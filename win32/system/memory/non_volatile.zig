//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (1)
//--------------------------------------------------------------------------------
pub const NV_MEMORY_RANGE = extern struct {
    BaseAddress: ?*c_void,
    Length: usize,
};


//--------------------------------------------------------------------------------
// Section: Functions (7)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../../zig.zig").arch) {
.X64, .Arm64 => struct {

pub extern "ntdll" fn RtlGetNonVolatileToken(
    // TODO: what to do with BytesParamIndex 1?
    NvBuffer: ?*c_void,
    Size: usize,
    NvToken: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

}, else => struct { } };

pub usingnamespace switch (@import("../../zig.zig").arch) {
.X64, .Arm64 => struct {

pub extern "ntdll" fn RtlFreeNonVolatileToken(
    NvToken: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

}, else => struct { } };

pub usingnamespace switch (@import("../../zig.zig").arch) {
.X64, .Arm64 => struct {

pub extern "ntdll" fn RtlFlushNonVolatileMemory(
    NvToken: ?*c_void,
    // TODO: what to do with BytesParamIndex 2?
    NvBuffer: ?*c_void,
    Size: usize,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

}, else => struct { } };

pub usingnamespace switch (@import("../../zig.zig").arch) {
.X64, .Arm64 => struct {

pub extern "ntdll" fn RtlDrainNonVolatileFlush(
    NvToken: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

}, else => struct { } };

pub usingnamespace switch (@import("../../zig.zig").arch) {
.X64, .Arm64 => struct {

pub extern "ntdll" fn RtlWriteNonVolatileMemory(
    NvToken: ?*c_void,
    // TODO: what to do with BytesParamIndex 3?
    NvDestination: ?*c_void,
    // TODO: what to do with BytesParamIndex 3?
    Source: ?*const c_void,
    Size: usize,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

}, else => struct { } };

pub usingnamespace switch (@import("../../zig.zig").arch) {
.X64, .Arm64 => struct {

pub extern "ntdll" fn RtlFillNonVolatileMemory(
    NvToken: ?*c_void,
    // TODO: what to do with BytesParamIndex 2?
    NvDestination: ?*c_void,
    Size: usize,
    Value: u8,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

}, else => struct { } };

pub usingnamespace switch (@import("../../zig.zig").arch) {
.X64, .Arm64 => struct {

pub extern "ntdll" fn RtlFlushNonVolatileMemoryRanges(
    NvToken: ?*c_void,
    NvRanges: [*]NV_MEMORY_RANGE,
    NumRanges: usize,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

}, else => struct { } };


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (0)
//--------------------------------------------------------------------------------

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}

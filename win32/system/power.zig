//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (84)
//--------------------------------------------------------------------------------
pub const PROCESSOR_NUMBER_PKEY = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("5724c81d-d5af-4c1f-a103-a06e28f204c6"), .pid = 1 };
pub const GUID_DEVICE_BATTERY = Guid.initString("72631e54-78a4-11d0-bcf7-00aa00b7b32a");
pub const GUID_DEVICE_APPLICATIONLAUNCH_BUTTON = Guid.initString("629758ee-986e-4d9e-8e47-de27f8ab054d");
pub const GUID_DEVICE_SYS_BUTTON = Guid.initString("4afa3d53-74a7-11d0-be5e-00a0c9062857");
pub const GUID_DEVICE_LID = Guid.initString("4afa3d52-74a7-11d0-be5e-00a0c9062857");
pub const GUID_DEVICE_THERMAL_ZONE = Guid.initString("4afa3d51-74a7-11d0-be5e-00a0c9062857");
pub const GUID_DEVICE_FAN = Guid.initString("05ecd13d-81da-4a2a-8a4c-524f23dd4dc9");
pub const GUID_DEVICE_PROCESSOR = Guid.initString("97fadb10-4e33-40ae-359c-8bef029dbdd0");
pub const GUID_DEVICE_MEMORY = Guid.initString("3fd0f03d-92e0-45fb-b75c-5ed8ffb01021");
pub const GUID_DEVICE_ACPI_TIME = Guid.initString("97f99bf6-4497-4f18-bb22-4b9fb2fbef9c");
pub const GUID_DEVICE_MESSAGE_INDICATOR = Guid.initString("cd48a365-fa94-4ce2-a232-a1b764e5d8b4");
pub const GUID_CLASS_INPUT = Guid.initString("4d1e55b2-f16f-11cf-88cb-001111000030");
pub const GUID_DEVINTERFACE_THERMAL_COOLING = Guid.initString("dbe4373d-3c81-40cb-ace4-e0e5d05f0c9f");
pub const BATTERY_UNKNOWN_CAPACITY = @as(u32, 4294967295);
pub const BATTERY_SYSTEM_BATTERY = @as(u32, 2147483648);
pub const BATTERY_CAPACITY_RELATIVE = @as(u32, 1073741824);
pub const BATTERY_IS_SHORT_TERM = @as(u32, 536870912);
pub const BATTERY_SEALED = @as(u32, 268435456);
pub const BATTERY_SET_CHARGE_SUPPORTED = @as(u32, 1);
pub const BATTERY_SET_DISCHARGE_SUPPORTED = @as(u32, 2);
pub const BATTERY_SET_CHARGINGSOURCE_SUPPORTED = @as(u32, 4);
pub const BATTERY_SET_CHARGER_ID_SUPPORTED = @as(u32, 8);
pub const BATTERY_UNKNOWN_TIME = @as(u32, 4294967295);
pub const BATTERY_UNKNOWN_CURRENT = @as(u32, 4294967295);
pub const BATTERY_USB_CHARGER_STATUS_FN_DEFAULT_USB = @as(u32, 1);
pub const BATTERY_USB_CHARGER_STATUS_UCM_PD = @as(u32, 2);
pub const BATTERY_UNKNOWN_VOLTAGE = @as(u32, 4294967295);
pub const BATTERY_UNKNOWN_RATE = @as(u32, 2147483648);
pub const BATTERY_POWER_ON_LINE = @as(u32, 1);
pub const BATTERY_DISCHARGING = @as(u32, 2);
pub const BATTERY_CHARGING = @as(u32, 4);
pub const BATTERY_CRITICAL = @as(u32, 8);
pub const MAX_BATTERY_STRING_SIZE = @as(u32, 128);
pub const BATTERY_TAG_INVALID = @as(u32, 0);
pub const MAX_ACTIVE_COOLING_LEVELS = @as(u32, 10);
pub const ACTIVE_COOLING = @as(u32, 0);
pub const PASSIVE_COOLING = @as(u32, 1);
pub const TZ_ACTIVATION_REASON_THERMAL = @as(u32, 1);
pub const TZ_ACTIVATION_REASON_CURRENT = @as(u32, 2);
pub const THERMAL_POLICY_VERSION_1 = @as(u32, 1);
pub const THERMAL_POLICY_VERSION_2 = @as(u32, 2);
pub const SYS_BUTTON_POWER = @as(u32, 1);
pub const SYS_BUTTON_SLEEP = @as(u32, 2);
pub const SYS_BUTTON_LID = @as(u32, 4);
pub const SYS_BUTTON_WAKE = @as(u32, 2147483648);
pub const SYS_BUTTON_LID_STATE_MASK = @as(u32, 196608);
pub const SYS_BUTTON_LID_OPEN = @as(u32, 65536);
pub const SYS_BUTTON_LID_CLOSED = @as(u32, 131072);
pub const SYS_BUTTON_LID_INITIAL = @as(u32, 262144);
pub const SYS_BUTTON_LID_CHANGED = @as(u32, 524288);
pub const THERMAL_COOLING_INTERFACE_VERSION = @as(u32, 1);
pub const THERMAL_DEVICE_INTERFACE_VERSION = @as(u32, 1);
pub const ACPI_TIME_ADJUST_DAYLIGHT = @as(u32, 1);
pub const ACPI_TIME_IN_DAYLIGHT = @as(u32, 2);
pub const ACPI_TIME_ZONE_UNKNOWN = @as(u32, 2047);
pub const EFFECTIVE_POWER_MODE_V1 = @as(u32, 1);
pub const EFFECTIVE_POWER_MODE_V2 = @as(u32, 2);
pub const EnableSysTrayBatteryMeter = @as(u32, 1);
pub const EnableMultiBatteryDisplay = @as(u32, 2);
pub const EnablePasswordLogon = @as(u32, 4);
pub const EnableWakeOnRing = @as(u32, 8);
pub const EnableVideoDimDisplay = @as(u32, 16);
pub const POWER_ATTRIBUTE_HIDE = @as(u32, 1);
pub const POWER_ATTRIBUTE_SHOW_AOAC = @as(u32, 2);
pub const DEVICEPOWER_HARDWAREID = @as(u32, 2147483648);
pub const DEVICEPOWER_AND_OPERATION = @as(u32, 1073741824);
pub const DEVICEPOWER_FILTER_DEVICES_PRESENT = @as(u32, 536870912);
pub const DEVICEPOWER_FILTER_HARDWARE = @as(u32, 268435456);
pub const DEVICEPOWER_FILTER_WAKEENABLED = @as(u32, 134217728);
pub const DEVICEPOWER_FILTER_WAKEPROGRAMMABLE = @as(u32, 67108864);
pub const DEVICEPOWER_FILTER_ON_NAME = @as(u32, 33554432);
pub const DEVICEPOWER_SET_WAKEENABLED = @as(u32, 1);
pub const DEVICEPOWER_CLEAR_WAKEENABLED = @as(u32, 2);
pub const PDCAP_S0_SUPPORTED = @as(u32, 65536);
pub const PDCAP_S1_SUPPORTED = @as(u32, 131072);
pub const PDCAP_S2_SUPPORTED = @as(u32, 262144);
pub const PDCAP_S3_SUPPORTED = @as(u32, 524288);
pub const PDCAP_WAKE_FROM_S0_SUPPORTED = @as(u32, 1048576);
pub const PDCAP_WAKE_FROM_S1_SUPPORTED = @as(u32, 2097152);
pub const PDCAP_WAKE_FROM_S2_SUPPORTED = @as(u32, 4194304);
pub const PDCAP_WAKE_FROM_S3_SUPPORTED = @as(u32, 8388608);
pub const PDCAP_S4_SUPPORTED = @as(u32, 16777216);
pub const PDCAP_S5_SUPPORTED = @as(u32, 33554432);
pub const THERMAL_EVENT_VERSION = @as(u32, 1);

//--------------------------------------------------------------------------------
// Section: Types (38)
//--------------------------------------------------------------------------------
pub const EFFECTIVE_POWER_MODE = extern enum(i32) {
    BatterySaver = 0,
    BetterBattery = 1,
    Balanced = 2,
    HighPerformance = 3,
    MaxPerformance = 4,
    GameMode = 5,
    MixedReality = 6,
};
pub const EffectivePowerModeBatterySaver = EFFECTIVE_POWER_MODE.BatterySaver;
pub const EffectivePowerModeBetterBattery = EFFECTIVE_POWER_MODE.BetterBattery;
pub const EffectivePowerModeBalanced = EFFECTIVE_POWER_MODE.Balanced;
pub const EffectivePowerModeHighPerformance = EFFECTIVE_POWER_MODE.HighPerformance;
pub const EffectivePowerModeMaxPerformance = EFFECTIVE_POWER_MODE.MaxPerformance;
pub const EffectivePowerModeGameMode = EFFECTIVE_POWER_MODE.GameMode;
pub const EffectivePowerModeMixedReality = EFFECTIVE_POWER_MODE.MixedReality;

// TODO: this type is limited to platform 'windows10.0.17763'
pub const EFFECTIVE_POWER_MODE_CALLBACK = fn(
    Mode: EFFECTIVE_POWER_MODE,
    Context: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const GLOBAL_MACHINE_POWER_POLICY = extern struct {
    Revision: u32,
    LidOpenWakeAc: SYSTEM_POWER_STATE,
    LidOpenWakeDc: SYSTEM_POWER_STATE,
    BroadcastCapacityResolution: u32,
};

pub const GLOBAL_USER_POWER_POLICY = extern struct {
    Revision: u32,
    PowerButtonAc: POWER_ACTION_POLICY,
    PowerButtonDc: POWER_ACTION_POLICY,
    SleepButtonAc: POWER_ACTION_POLICY,
    SleepButtonDc: POWER_ACTION_POLICY,
    LidCloseAc: POWER_ACTION_POLICY,
    LidCloseDc: POWER_ACTION_POLICY,
    DischargePolicy: [4]SYSTEM_POWER_LEVEL,
    GlobalFlags: u32,
};

pub const GLOBAL_POWER_POLICY = extern struct {
    user: GLOBAL_USER_POWER_POLICY,
    mach: GLOBAL_MACHINE_POWER_POLICY,
};

pub const MACHINE_POWER_POLICY = extern struct {
    Revision: u32,
    MinSleepAc: SYSTEM_POWER_STATE,
    MinSleepDc: SYSTEM_POWER_STATE,
    ReducedLatencySleepAc: SYSTEM_POWER_STATE,
    ReducedLatencySleepDc: SYSTEM_POWER_STATE,
    DozeTimeoutAc: u32,
    DozeTimeoutDc: u32,
    DozeS4TimeoutAc: u32,
    DozeS4TimeoutDc: u32,
    MinThrottleAc: u8,
    MinThrottleDc: u8,
    pad1: [2]u8,
    OverThrottledAc: POWER_ACTION_POLICY,
    OverThrottledDc: POWER_ACTION_POLICY,
};

pub const MACHINE_PROCESSOR_POWER_POLICY = extern struct {
    Revision: u32,
    ProcessorPolicyAc: PROCESSOR_POWER_POLICY,
    ProcessorPolicyDc: PROCESSOR_POWER_POLICY,
};

pub const USER_POWER_POLICY = extern struct {
    Revision: u32,
    IdleAc: POWER_ACTION_POLICY,
    IdleDc: POWER_ACTION_POLICY,
    IdleTimeoutAc: u32,
    IdleTimeoutDc: u32,
    IdleSensitivityAc: u8,
    IdleSensitivityDc: u8,
    ThrottlePolicyAc: u8,
    ThrottlePolicyDc: u8,
    MaxSleepAc: SYSTEM_POWER_STATE,
    MaxSleepDc: SYSTEM_POWER_STATE,
    Reserved: [2]u32,
    VideoTimeoutAc: u32,
    VideoTimeoutDc: u32,
    SpindownTimeoutAc: u32,
    SpindownTimeoutDc: u32,
    OptimizeForPowerAc: u8,
    OptimizeForPowerDc: u8,
    FanThrottleToleranceAc: u8,
    FanThrottleToleranceDc: u8,
    ForcedThrottleAc: u8,
    ForcedThrottleDc: u8,
};

pub const POWER_POLICY = extern struct {
    user: USER_POWER_POLICY,
    mach: MACHINE_POWER_POLICY,
};

pub const PWRSCHEMESENUMPROC_V1 = fn(
    Index: u32,
    NameSize: u32,
    // TODO: what to do with BytesParamIndex 1?
    Name: *i8,
    DescriptionSize: u32,
    // TODO: what to do with BytesParamIndex 3?
    Description: *i8,
    Policy: *POWER_POLICY,
    Context: LPARAM,
) callconv(@import("std").os.windows.WINAPI) u8;

pub const PWRSCHEMESENUMPROC = fn(
    Index: u32,
    NameSize: u32,
    // TODO: what to do with BytesParamIndex 1?
    Name: PWSTR,
    DescriptionSize: u32,
    // TODO: what to do with BytesParamIndex 3?
    Description: PWSTR,
    Policy: *POWER_POLICY,
    Context: LPARAM,
) callconv(@import("std").os.windows.WINAPI) u8;

pub const POWER_DATA_ACCESSOR = extern enum(i32) {
    AC_POWER_SETTING_INDEX = 0,
    DC_POWER_SETTING_INDEX = 1,
    FRIENDLY_NAME = 2,
    DESCRIPTION = 3,
    POSSIBLE_POWER_SETTING = 4,
    POSSIBLE_POWER_SETTING_FRIENDLY_NAME = 5,
    POSSIBLE_POWER_SETTING_DESCRIPTION = 6,
    DEFAULT_AC_POWER_SETTING = 7,
    DEFAULT_DC_POWER_SETTING = 8,
    POSSIBLE_VALUE_MIN = 9,
    POSSIBLE_VALUE_MAX = 10,
    POSSIBLE_VALUE_INCREMENT = 11,
    POSSIBLE_VALUE_UNITS = 12,
    ICON_RESOURCE = 13,
    DEFAULT_SECURITY_DESCRIPTOR = 14,
    ATTRIBUTES = 15,
    SCHEME = 16,
    SUBGROUP = 17,
    INDIVIDUAL_SETTING = 18,
    ACTIVE_SCHEME = 19,
    CREATE_SCHEME = 20,
    AC_POWER_SETTING_MAX = 21,
    DC_POWER_SETTING_MAX = 22,
    AC_POWER_SETTING_MIN = 23,
    DC_POWER_SETTING_MIN = 24,
    PROFILE = 25,
    OVERLAY_SCHEME = 26,
    ACTIVE_OVERLAY_SCHEME = 27,
};
pub const ACCESS_AC_POWER_SETTING_INDEX = POWER_DATA_ACCESSOR.AC_POWER_SETTING_INDEX;
pub const ACCESS_DC_POWER_SETTING_INDEX = POWER_DATA_ACCESSOR.DC_POWER_SETTING_INDEX;
pub const ACCESS_FRIENDLY_NAME = POWER_DATA_ACCESSOR.FRIENDLY_NAME;
pub const ACCESS_DESCRIPTION = POWER_DATA_ACCESSOR.DESCRIPTION;
pub const ACCESS_POSSIBLE_POWER_SETTING = POWER_DATA_ACCESSOR.POSSIBLE_POWER_SETTING;
pub const ACCESS_POSSIBLE_POWER_SETTING_FRIENDLY_NAME = POWER_DATA_ACCESSOR.POSSIBLE_POWER_SETTING_FRIENDLY_NAME;
pub const ACCESS_POSSIBLE_POWER_SETTING_DESCRIPTION = POWER_DATA_ACCESSOR.POSSIBLE_POWER_SETTING_DESCRIPTION;
pub const ACCESS_DEFAULT_AC_POWER_SETTING = POWER_DATA_ACCESSOR.DEFAULT_AC_POWER_SETTING;
pub const ACCESS_DEFAULT_DC_POWER_SETTING = POWER_DATA_ACCESSOR.DEFAULT_DC_POWER_SETTING;
pub const ACCESS_POSSIBLE_VALUE_MIN = POWER_DATA_ACCESSOR.POSSIBLE_VALUE_MIN;
pub const ACCESS_POSSIBLE_VALUE_MAX = POWER_DATA_ACCESSOR.POSSIBLE_VALUE_MAX;
pub const ACCESS_POSSIBLE_VALUE_INCREMENT = POWER_DATA_ACCESSOR.POSSIBLE_VALUE_INCREMENT;
pub const ACCESS_POSSIBLE_VALUE_UNITS = POWER_DATA_ACCESSOR.POSSIBLE_VALUE_UNITS;
pub const ACCESS_ICON_RESOURCE = POWER_DATA_ACCESSOR.ICON_RESOURCE;
pub const ACCESS_DEFAULT_SECURITY_DESCRIPTOR = POWER_DATA_ACCESSOR.DEFAULT_SECURITY_DESCRIPTOR;
pub const ACCESS_ATTRIBUTES = POWER_DATA_ACCESSOR.ATTRIBUTES;
pub const ACCESS_SCHEME = POWER_DATA_ACCESSOR.SCHEME;
pub const ACCESS_SUBGROUP = POWER_DATA_ACCESSOR.SUBGROUP;
pub const ACCESS_INDIVIDUAL_SETTING = POWER_DATA_ACCESSOR.INDIVIDUAL_SETTING;
pub const ACCESS_ACTIVE_SCHEME = POWER_DATA_ACCESSOR.ACTIVE_SCHEME;
pub const ACCESS_CREATE_SCHEME = POWER_DATA_ACCESSOR.CREATE_SCHEME;
pub const ACCESS_AC_POWER_SETTING_MAX = POWER_DATA_ACCESSOR.AC_POWER_SETTING_MAX;
pub const ACCESS_DC_POWER_SETTING_MAX = POWER_DATA_ACCESSOR.DC_POWER_SETTING_MAX;
pub const ACCESS_AC_POWER_SETTING_MIN = POWER_DATA_ACCESSOR.AC_POWER_SETTING_MIN;
pub const ACCESS_DC_POWER_SETTING_MIN = POWER_DATA_ACCESSOR.DC_POWER_SETTING_MIN;
pub const ACCESS_PROFILE = POWER_DATA_ACCESSOR.PROFILE;
pub const ACCESS_OVERLAY_SCHEME = POWER_DATA_ACCESSOR.OVERLAY_SCHEME;
pub const ACCESS_ACTIVE_OVERLAY_SCHEME = POWER_DATA_ACCESSOR.ACTIVE_OVERLAY_SCHEME;

pub const PDEVICE_NOTIFY_CALLBACK_ROUTINE = fn(
    Context: ?*c_void,
    Type: u32,
    Setting: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const DEVICE_NOTIFY_SUBSCRIBE_PARAMETERS = extern struct {
    Callback: PDEVICE_NOTIFY_CALLBACK_ROUTINE,
    Context: *c_void,
};

pub const THERMAL_EVENT = extern struct {
    Version: u32,
    Size: u32,
    Type: u32,
    Temperature: u32,
    TripPointTemperature: u32,
    Initiator: PWSTR,
};

pub const BATTERY_QUERY_INFORMATION_LEVEL = extern enum(i32) {
    Information = 0,
    GranularityInformation = 1,
    Temperature = 2,
    EstimatedTime = 3,
    DeviceName = 4,
    ManufactureDate = 5,
    ManufactureName = 6,
    UniqueID = 7,
    SerialNumber = 8,
};
pub const BatteryInformation = BATTERY_QUERY_INFORMATION_LEVEL.Information;
pub const BatteryGranularityInformation = BATTERY_QUERY_INFORMATION_LEVEL.GranularityInformation;
pub const BatteryTemperature = BATTERY_QUERY_INFORMATION_LEVEL.Temperature;
pub const BatteryEstimatedTime = BATTERY_QUERY_INFORMATION_LEVEL.EstimatedTime;
pub const BatteryDeviceName = BATTERY_QUERY_INFORMATION_LEVEL.DeviceName;
pub const BatteryManufactureDate = BATTERY_QUERY_INFORMATION_LEVEL.ManufactureDate;
pub const BatteryManufactureName = BATTERY_QUERY_INFORMATION_LEVEL.ManufactureName;
pub const BatteryUniqueID = BATTERY_QUERY_INFORMATION_LEVEL.UniqueID;
pub const BatterySerialNumber = BATTERY_QUERY_INFORMATION_LEVEL.SerialNumber;

pub const BATTERY_QUERY_INFORMATION = extern struct {
    BatteryTag: u32,
    InformationLevel: BATTERY_QUERY_INFORMATION_LEVEL,
    AtRate: u32,
};

pub const BATTERY_INFORMATION = extern struct {
    Capabilities: u32,
    Technology: u8,
    Reserved: [3]u8,
    Chemistry: [4]u8,
    DesignedCapacity: u32,
    FullChargedCapacity: u32,
    DefaultAlert1: u32,
    DefaultAlert2: u32,
    CriticalBias: u32,
    CycleCount: u32,
};

pub const BATTERY_CHARGING_SOURCE_TYPE = extern enum(i32) {
    AC = 1,
    USB = 2,
    Wireless = 3,
    Max = 4,
};
pub const BatteryChargingSourceType_AC = BATTERY_CHARGING_SOURCE_TYPE.AC;
pub const BatteryChargingSourceType_USB = BATTERY_CHARGING_SOURCE_TYPE.USB;
pub const BatteryChargingSourceType_Wireless = BATTERY_CHARGING_SOURCE_TYPE.Wireless;
pub const BatteryChargingSourceType_Max = BATTERY_CHARGING_SOURCE_TYPE.Max;

pub const BATTERY_CHARGING_SOURCE = extern struct {
    Type: BATTERY_CHARGING_SOURCE_TYPE,
    MaxCurrent: u32,
};

pub const BATTERY_CHARGING_SOURCE_INFORMATION = extern struct {
    Type: BATTERY_CHARGING_SOURCE_TYPE,
    SourceOnline: u8,
};

pub const USB_CHARGER_PORT = extern enum(i32) {
    Legacy = 0,
    TypeC = 1,
    Max = 2,
};
pub const UsbChargerPort_Legacy = USB_CHARGER_PORT.Legacy;
pub const UsbChargerPort_TypeC = USB_CHARGER_PORT.TypeC;
pub const UsbChargerPort_Max = USB_CHARGER_PORT.Max;

pub const BATTERY_SET_INFORMATION_LEVEL = extern enum(i32) {
    CriticalBias = 0,
    Charge = 1,
    Discharge = 2,
    ChargingSource = 3,
    ChargerId = 4,
    ChargerStatus = 5,
};
pub const BatteryCriticalBias = BATTERY_SET_INFORMATION_LEVEL.CriticalBias;
pub const BatteryCharge = BATTERY_SET_INFORMATION_LEVEL.Charge;
pub const BatteryDischarge = BATTERY_SET_INFORMATION_LEVEL.Discharge;
pub const BatteryChargingSource = BATTERY_SET_INFORMATION_LEVEL.ChargingSource;
pub const BatteryChargerId = BATTERY_SET_INFORMATION_LEVEL.ChargerId;
pub const BatteryChargerStatus = BATTERY_SET_INFORMATION_LEVEL.ChargerStatus;

pub const BATTERY_SET_INFORMATION = extern struct {
    BatteryTag: u32,
    InformationLevel: BATTERY_SET_INFORMATION_LEVEL,
    Buffer: [1]u8,
};

pub const BATTERY_CHARGER_STATUS = extern struct {
    Type: BATTERY_CHARGING_SOURCE_TYPE,
    VaData: [1]u32,
};

pub const BATTERY_USB_CHARGER_STATUS = extern struct {
    Type: BATTERY_CHARGING_SOURCE_TYPE,
    Reserved: u32,
    Flags: u32,
    MaxCurrent: u32,
    Voltage: u32,
    PortType: USB_CHARGER_PORT,
    PortId: u64,
    PowerSourceInformation: *c_void,
    OemCharger: Guid,
};

pub const BATTERY_WAIT_STATUS = extern struct {
    BatteryTag: u32,
    Timeout: u32,
    PowerState: u32,
    LowCapacity: u32,
    HighCapacity: u32,
};

pub const BATTERY_STATUS = extern struct {
    PowerState: u32,
    Capacity: u32,
    Voltage: u32,
    Rate: i32,
};

pub const BATTERY_MANUFACTURE_DATE = extern struct {
    Day: u8,
    Month: u8,
    Year: u16,
};

pub const THERMAL_INFORMATION = extern struct {
    ThermalStamp: u32,
    ThermalConstant1: u32,
    ThermalConstant2: u32,
    Processors: usize,
    SamplingPeriod: u32,
    CurrentTemperature: u32,
    PassiveTripPoint: u32,
    CriticalTripPoint: u32,
    ActiveTripPointCount: u8,
    ActiveTripPoint: [10]u32,
};

pub const THERMAL_WAIT_READ = extern struct {
    Timeout: u32,
    LowTemperature: u32,
    HighTemperature: u32,
};

pub const THERMAL_POLICY = extern struct {
    Version: u32,
    WaitForUpdate: u8,
    Hibernate: u8,
    Critical: u8,
    ThermalStandby: u8,
    ActivationReasons: u32,
    PassiveLimit: u32,
    ActiveLevel: u32,
    OverThrottled: u8,
};

pub const PROCESSOR_OBJECT_INFO = extern struct {
    PhysicalID: u32,
    PBlkAddress: u32,
    PBlkLength: u8,
};

pub const PROCESSOR_OBJECT_INFO_EX = extern struct {
    PhysicalID: u32,
    PBlkAddress: u32,
    PBlkLength: u8,
    InitialApicId: u32,
};

pub const WAKE_ALARM_INFORMATION = extern struct {
    TimerIdentifier: u32,
    Timeout: u32,
};

pub const ACPI_REAL_TIME = extern struct {
    Year: u16,
    Month: u8,
    Day: u8,
    Hour: u8,
    Minute: u8,
    Second: u8,
    Valid: u8,
    Milliseconds: u16,
    TimeZone: i16,
    DayLight: u8,
    Reserved1: [3]u8,
};

pub const POWER_PLATFORM_ROLE_VERSION = extern enum(u32) {
    ERSION = 2,
    @"1" = 1,
    @"2" = 2,
};
// TODO: enum 'POWER_PLATFORM_ROLE_VERSION' has known issues with its value aliases

pub const POWER_SETTING_REGISTER_NOTIFICATION_FLAGS = extern enum(u32) {
    SERVICE_HANDLE = 1,
    CALLBACK = 2,
    WINDOW_HANDLE = 0,
};
pub const DEVICE_NOTIFY_SERVICE_HANDLE = POWER_SETTING_REGISTER_NOTIFICATION_FLAGS.SERVICE_HANDLE;
pub const DEVICE_NOTIFY_CALLBACK = POWER_SETTING_REGISTER_NOTIFICATION_FLAGS.CALLBACK;
pub const DEVICE_NOTIFY_WINDOW_HANDLE = POWER_SETTING_REGISTER_NOTIFICATION_FLAGS.WINDOW_HANDLE;


//--------------------------------------------------------------------------------
// Section: Functions (87)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn CallNtPowerInformation(
    InformationLevel: POWER_INFORMATION_LEVEL,
    // TODO: what to do with BytesParamIndex 2?
    InputBuffer: ?*c_void,
    InputBufferLength: u32,
    // TODO: what to do with BytesParamIndex 4?
    OutputBuffer: ?*c_void,
    OutputBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn GetPwrCapabilities(
    lpspc: *SYSTEM_POWER_CAPABILITIES,
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows8.0'
pub extern "POWRPROF" fn PowerDeterminePlatformRoleEx(
    Version: POWER_PLATFORM_ROLE_VERSION,
) callconv(@import("std").os.windows.WINAPI) POWER_PLATFORM_ROLE;

// TODO: this type is limited to platform 'windows8.0'
pub extern "POWRPROF" fn PowerRegisterSuspendResumeNotification(
    Flags: u32,
    Recipient: HANDLE,
    RegistrationHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "POWRPROF" fn PowerUnregisterSuspendResumeNotification(
    RegistrationHandle: HPOWERNOTIFY,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerReadACValue(
    RootPowerKey: HKEY,
    SchemeGuid: ?*const Guid,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    Type: ?*u32,
    // TODO: what to do with BytesParamIndex 6?
    Buffer: ?*u8,
    BufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerReadDCValue(
    RootPowerKey: HKEY,
    SchemeGuid: ?*const Guid,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    Type: ?*u32,
    // TODO: what to do with BytesParamIndex 6?
    Buffer: ?*u8,
    BufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerWriteACValueIndex(
    RootPowerKey: HKEY,
    SchemeGuid: *const Guid,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    AcValueIndex: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerWriteDCValueIndex(
    RootPowerKey: HKEY,
    SchemeGuid: *const Guid,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    DcValueIndex: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerGetActiveScheme(
    UserRootPowerKey: HKEY,
    ActivePolicyGuid: **Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerSetActiveScheme(
    UserRootPowerKey: HKEY,
    SchemeGuid: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "POWRPROF" fn PowerSettingRegisterNotification(
    SettingGuid: *const Guid,
    Flags: POWER_SETTING_REGISTER_NOTIFICATION_FLAGS,
    Recipient: HANDLE,
    RegistrationHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "POWRPROF" fn PowerSettingUnregisterNotification(
    RegistrationHandle: HPOWERNOTIFY,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.17763'
pub extern "POWRPROF" fn PowerRegisterForEffectivePowerModeNotifications(
    Version: u32,
    Callback: EFFECTIVE_POWER_MODE_CALLBACK,
    Context: ?*c_void,
    RegistrationHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.17763'
pub extern "POWRPROF" fn PowerUnregisterFromEffectivePowerModeNotifications(
    RegistrationHandle: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn GetPwrDiskSpindownRange(
    puiMax: *u32,
    puiMin: *u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn EnumPwrSchemes(
    lpfn: PWRSCHEMESENUMPROC,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn ReadGlobalPwrPolicy(
    pGlobalPowerPolicy: *GLOBAL_POWER_POLICY,
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn ReadPwrScheme(
    uiID: u32,
    pPowerPolicy: *POWER_POLICY,
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn WritePwrScheme(
    puiID: *u32,
    lpszSchemeName: [*:0]const u16,
    lpszDescription: ?[*:0]const u16,
    lpScheme: *POWER_POLICY,
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn WriteGlobalPwrPolicy(
    pGlobalPowerPolicy: *GLOBAL_POWER_POLICY,
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn DeletePwrScheme(
    uiID: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn GetActivePwrScheme(
    puiID: *u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn SetActivePwrScheme(
    uiID: u32,
    pGlobalPowerPolicy: ?*GLOBAL_POWER_POLICY,
    pPowerPolicy: ?*POWER_POLICY,
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn IsPwrSuspendAllowed(
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn IsPwrHibernateAllowed(
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn IsPwrShutdownAllowed(
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "POWRPROF" fn IsAdminOverrideActive(
    papp: *ADMINISTRATOR_POWER_POLICY,
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn SetSuspendState(
    bHibernate: u8,
    bForce: u8,
    bWakeupEventsDisabled: u8,
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn GetCurrentPowerPolicies(
    pGlobalPowerPolicy: *GLOBAL_POWER_POLICY,
    pPowerPolicy: *POWER_POLICY,
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn CanUserWritePwrScheme(
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn ReadProcessorPwrScheme(
    uiID: u32,
    pMachineProcessorPowerPolicy: *MACHINE_PROCESSOR_POWER_POLICY,
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "POWRPROF" fn WriteProcessorPwrScheme(
    uiID: u32,
    pMachineProcessorPowerPolicy: *MACHINE_PROCESSOR_POWER_POLICY,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "POWRPROF" fn ValidatePowerPolicies(
    pGlobalPowerPolicy: ?*GLOBAL_POWER_POLICY,
    pPowerPolicy: ?*POWER_POLICY,
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows6.1'
pub extern "POWRPROF" fn PowerIsSettingRangeDefined(
    SubKeyGuid: ?*const Guid,
    SettingGuid: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows6.1'
pub extern "POWRPROF" fn PowerSettingAccessCheckEx(
    AccessFlags: POWER_DATA_ACCESSOR,
    PowerGuid: ?*const Guid,
    AccessType: REG_SAM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerSettingAccessCheck(
    AccessFlags: POWER_DATA_ACCESSOR,
    PowerGuid: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerReadACValueIndex(
    RootPowerKey: HKEY,
    SchemeGuid: ?*const Guid,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    AcValueIndex: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerReadDCValueIndex(
    RootPowerKey: HKEY,
    SchemeGuid: ?*const Guid,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    DcValueIndex: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerReadFriendlyName(
    RootPowerKey: HKEY,
    SchemeGuid: ?*const Guid,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    // TODO: what to do with BytesParamIndex 5?
    Buffer: ?*u8,
    BufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerReadDescription(
    RootPowerKey: HKEY,
    SchemeGuid: ?*const Guid,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    // TODO: what to do with BytesParamIndex 5?
    Buffer: ?*u8,
    BufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerReadPossibleValue(
    RootPowerKey: HKEY,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    Type: ?*u32,
    PossibleSettingIndex: u32,
    // TODO: what to do with BytesParamIndex 6?
    Buffer: ?*u8,
    BufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerReadPossibleFriendlyName(
    RootPowerKey: HKEY,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    PossibleSettingIndex: u32,
    // TODO: what to do with BytesParamIndex 5?
    Buffer: ?*u8,
    BufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerReadPossibleDescription(
    RootPowerKey: HKEY,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    PossibleSettingIndex: u32,
    // TODO: what to do with BytesParamIndex 5?
    Buffer: ?*u8,
    BufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerReadValueMin(
    RootPowerKey: HKEY,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    ValueMinimum: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerReadValueMax(
    RootPowerKey: HKEY,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    ValueMaximum: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerReadValueIncrement(
    RootPowerKey: HKEY,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    ValueIncrement: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerReadValueUnitsSpecifier(
    RootPowerKey: HKEY,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    // TODO: what to do with BytesParamIndex 4?
    Buffer: ?*u8,
    BufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerReadACDefaultIndex(
    RootPowerKey: HKEY,
    SchemePersonalityGuid: *const Guid,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: *const Guid,
    AcDefaultIndex: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerReadDCDefaultIndex(
    RootPowerKey: HKEY,
    SchemePersonalityGuid: *const Guid,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: *const Guid,
    DcDefaultIndex: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerReadIconResourceSpecifier(
    RootPowerKey: HKEY,
    SchemeGuid: ?*const Guid,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    // TODO: what to do with BytesParamIndex 5?
    Buffer: ?*u8,
    BufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerReadSettingAttributes(
    SubGroupGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerWriteFriendlyName(
    RootPowerKey: HKEY,
    SchemeGuid: *const Guid,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    // TODO: what to do with BytesParamIndex 5?
    Buffer: *u8,
    BufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerWriteDescription(
    RootPowerKey: HKEY,
    SchemeGuid: *const Guid,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    // TODO: what to do with BytesParamIndex 5?
    Buffer: *u8,
    BufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerWritePossibleValue(
    RootPowerKey: HKEY,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    Type: u32,
    PossibleSettingIndex: u32,
    // TODO: what to do with BytesParamIndex 6?
    Buffer: *u8,
    BufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerWritePossibleFriendlyName(
    RootPowerKey: HKEY,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    PossibleSettingIndex: u32,
    // TODO: what to do with BytesParamIndex 5?
    Buffer: *u8,
    BufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerWritePossibleDescription(
    RootPowerKey: HKEY,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    PossibleSettingIndex: u32,
    // TODO: what to do with BytesParamIndex 5?
    Buffer: *u8,
    BufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerWriteValueMin(
    RootPowerKey: HKEY,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    ValueMinimum: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerWriteValueMax(
    RootPowerKey: HKEY,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    ValueMaximum: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerWriteValueIncrement(
    RootPowerKey: HKEY,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    ValueIncrement: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerWriteValueUnitsSpecifier(
    RootPowerKey: HKEY,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    // TODO: what to do with BytesParamIndex 4?
    Buffer: *u8,
    BufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerWriteACDefaultIndex(
    RootSystemPowerKey: HKEY,
    SchemePersonalityGuid: *const Guid,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: *const Guid,
    DefaultAcIndex: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerWriteDCDefaultIndex(
    RootSystemPowerKey: HKEY,
    SchemePersonalityGuid: *const Guid,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: *const Guid,
    DefaultDcIndex: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerWriteIconResourceSpecifier(
    RootPowerKey: HKEY,
    SchemeGuid: *const Guid,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    // TODO: what to do with BytesParamIndex 5?
    Buffer: *u8,
    BufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerWriteSettingAttributes(
    SubGroupGuid: ?*const Guid,
    PowerSettingGuid: ?*const Guid,
    Attributes: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerDuplicateScheme(
    RootPowerKey: HKEY,
    SourceSchemeGuid: *const Guid,
    DestinationSchemeGuid: **Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerImportPowerScheme(
    RootPowerKey: HKEY,
    ImportFileNamePath: [*:0]const u16,
    DestinationSchemeGuid: **Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerDeleteScheme(
    RootPowerKey: HKEY,
    SchemeGuid: *const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerRemovePowerSetting(
    PowerSettingSubKeyGuid: *const Guid,
    PowerSettingGuid: *const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerCreateSetting(
    RootSystemPowerKey: HKEY,
    SubGroupOfPowerSettingsGuid: *const Guid,
    PowerSettingGuid: *const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerCreatePossibleSetting(
    RootSystemPowerKey: HKEY,
    SubGroupOfPowerSettingsGuid: *const Guid,
    PowerSettingGuid: *const Guid,
    PossibleSettingIndex: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerEnumerate(
    RootPowerKey: HKEY,
    SchemeGuid: ?*const Guid,
    SubGroupOfPowerSettingsGuid: ?*const Guid,
    AccessFlags: POWER_DATA_ACCESSOR,
    Index: u32,
    // TODO: what to do with BytesParamIndex 6?
    Buffer: ?*u8,
    BufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "POWRPROF" fn PowerOpenUserPowerKey(
    phUserPowerKey: *HKEY,
    Access: u32,
    OpenExisting: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "POWRPROF" fn PowerOpenSystemPowerKey(
    phSystemPowerKey: *HKEY,
    Access: u32,
    OpenExisting: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerCanRestoreIndividualDefaultPowerScheme(
    SchemeGuid: *const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerRestoreIndividualDefaultPowerScheme(
    SchemeGuid: *const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerRestoreDefaultPowerSchemes(
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerReplaceDefaultPowerSchemes(
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn PowerDeterminePlatformRole(
) callconv(@import("std").os.windows.WINAPI) POWER_PLATFORM_ROLE;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn DevicePowerEnumDevices(
    QueryIndex: u32,
    QueryInterpretationFlags: u32,
    QueryFlags: u32,
    // TODO: what to do with BytesParamIndex 4?
    pReturnBuffer: ?*u8,
    pBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn DevicePowerSetDeviceState(
    DeviceDescription: [*:0]const u16,
    SetFlags: u32,
    SetData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn DevicePowerOpen(
    DebugMask: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "POWRPROF" fn DevicePowerClose(
) callconv(@import("std").os.windows.WINAPI) u8;

// TODO: this type is limited to platform 'windows8.1'
pub extern "POWRPROF" fn PowerReportThermalEvent(
    Event: *THERMAL_EVENT,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "KERNEL32" fn PowerCreateRequest(
    Context: *REASON_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// TODO: this type is limited to platform 'windows6.1'
pub extern "KERNEL32" fn PowerSetRequest(
    PowerRequest: HANDLE,
    RequestType: POWER_REQUEST_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "KERNEL32" fn PowerClearRequest(
    PowerRequest: HANDLE,
    RequestType: POWER_REQUEST_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (20)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const PROCESSOR_POWER_POLICY = @import("../system/system_services.zig").PROCESSOR_POWER_POLICY;
const LPARAM = @import("../ui/windows_and_messaging.zig").LPARAM;
const PWSTR = @import("../system/system_services.zig").PWSTR;
const SYSTEM_POWER_LEVEL = @import("../system/system_services.zig").SYSTEM_POWER_LEVEL;
const HKEY = @import("../system/registry.zig").HKEY;
const ADMINISTRATOR_POWER_POLICY = @import("../system/system_services.zig").ADMINISTRATOR_POWER_POLICY;
const SYSTEM_POWER_CAPABILITIES = @import("../system/system_services.zig").SYSTEM_POWER_CAPABILITIES;
const POWER_ACTION_POLICY = @import("../system/system_services.zig").POWER_ACTION_POLICY;
const POWER_INFORMATION_LEVEL = @import("../system/system_services.zig").POWER_INFORMATION_LEVEL;
const HRESULT = @import("../system/com.zig").HRESULT;
const SYSTEM_POWER_STATE = @import("../system/system_services.zig").SYSTEM_POWER_STATE;
const BOOL = @import("../system/system_services.zig").BOOL;
const POWER_REQUEST_TYPE = @import("../system/system_services.zig").POWER_REQUEST_TYPE;
const HPOWERNOTIFY = @import("../system/system_services.zig").HPOWERNOTIFY;
const PROPERTYKEY = @import("../system/properties_system.zig").PROPERTYKEY;
const POWER_PLATFORM_ROLE = @import("../system/system_services.zig").POWER_PLATFORM_ROLE;
const HANDLE = @import("../system/system_services.zig").HANDLE;
const REG_SAM_FLAGS = @import("../system/registry.zig").REG_SAM_FLAGS;
const REASON_CONTEXT = @import("../system/system_services.zig").REASON_CONTEXT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "EFFECTIVE_POWER_MODE_CALLBACK")) { _ = EFFECTIVE_POWER_MODE_CALLBACK; }
    if (@hasDecl(@This(), "PWRSCHEMESENUMPROC_V1")) { _ = PWRSCHEMESENUMPROC_V1; }
    if (@hasDecl(@This(), "PWRSCHEMESENUMPROC")) { _ = PWRSCHEMESENUMPROC; }
    if (@hasDecl(@This(), "PDEVICE_NOTIFY_CALLBACK_ROUTINE")) { _ = PDEVICE_NOTIFY_CALLBACK_ROUTINE; }

    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("std").builtin.is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (30)
//--------------------------------------------------------------------------------
pub const DFS_TARGET_PRIORITY_CLASS = extern enum(i32) {
    DfsInvalidPriorityClass = -1,
    DfsSiteCostNormalPriorityClass = 0,
    DfsGlobalHighPriorityClass = 1,
    DfsSiteCostHighPriorityClass = 2,
    DfsSiteCostLowPriorityClass = 3,
    DfsGlobalLowPriorityClass = 4,
};
pub const DfsInvalidPriorityClass = DFS_TARGET_PRIORITY_CLASS.DfsInvalidPriorityClass;
pub const DfsSiteCostNormalPriorityClass = DFS_TARGET_PRIORITY_CLASS.DfsSiteCostNormalPriorityClass;
pub const DfsGlobalHighPriorityClass = DFS_TARGET_PRIORITY_CLASS.DfsGlobalHighPriorityClass;
pub const DfsSiteCostHighPriorityClass = DFS_TARGET_PRIORITY_CLASS.DfsSiteCostHighPriorityClass;
pub const DfsSiteCostLowPriorityClass = DFS_TARGET_PRIORITY_CLASS.DfsSiteCostLowPriorityClass;
pub const DfsGlobalLowPriorityClass = DFS_TARGET_PRIORITY_CLASS.DfsGlobalLowPriorityClass;

pub const DFS_TARGET_PRIORITY = extern struct {
    TargetPriorityClass: DFS_TARGET_PRIORITY_CLASS,
    TargetPriorityRank: u16,
    Reserved: u16,
};

pub const DFS_INFO_1 = extern struct {
    EntryPath: PWSTR,
};

pub const DFS_INFO_2 = extern struct {
    EntryPath: PWSTR,
    Comment: PWSTR,
    State: u32,
    NumberOfStorages: u32,
};

pub const DFS_STORAGE_INFO = extern struct {
    State: u32,
    ServerName: PWSTR,
    ShareName: PWSTR,
};

pub const DFS_STORAGE_INFO_1 = extern struct {
    State: u32,
    ServerName: PWSTR,
    ShareName: PWSTR,
    TargetPriority: DFS_TARGET_PRIORITY,
};

pub const DFS_INFO_3 = extern struct {
    EntryPath: PWSTR,
    Comment: PWSTR,
    State: u32,
    NumberOfStorages: u32,
    Storage: *DFS_STORAGE_INFO,
};

pub const DFS_INFO_4 = extern struct {
    EntryPath: PWSTR,
    Comment: PWSTR,
    State: u32,
    Timeout: u32,
    Guid: Guid,
    NumberOfStorages: u32,
    Storage: *DFS_STORAGE_INFO,
};

pub const DFS_INFO_5 = extern struct {
    EntryPath: PWSTR,
    Comment: PWSTR,
    State: u32,
    Timeout: u32,
    Guid: Guid,
    PropertyFlags: u32,
    MetadataSize: u32,
    NumberOfStorages: u32,
};

pub const DFS_INFO_6 = extern struct {
    EntryPath: PWSTR,
    Comment: PWSTR,
    State: u32,
    Timeout: u32,
    Guid: Guid,
    PropertyFlags: u32,
    MetadataSize: u32,
    NumberOfStorages: u32,
    Storage: *DFS_STORAGE_INFO_1,
};

pub const DFS_INFO_7 = extern struct {
    GenerationGuid: Guid,
};

pub const DFS_INFO_8 = extern struct {
    EntryPath: PWSTR,
    Comment: PWSTR,
    State: u32,
    Timeout: u32,
    Guid: Guid,
    PropertyFlags: u32,
    MetadataSize: u32,
    SdLengthReserved: u32,
    pSecurityDescriptor: *c_void,
    NumberOfStorages: u32,
};

pub const DFS_INFO_9 = extern struct {
    EntryPath: PWSTR,
    Comment: PWSTR,
    State: u32,
    Timeout: u32,
    Guid: Guid,
    PropertyFlags: u32,
    MetadataSize: u32,
    SdLengthReserved: u32,
    pSecurityDescriptor: *c_void,
    NumberOfStorages: u32,
    Storage: *DFS_STORAGE_INFO_1,
};

pub const DFS_INFO_50 = extern struct {
    NamespaceMajorVersion: u32,
    NamespaceMinorVersion: u32,
    NamespaceCapabilities: u64,
};

pub const DFS_INFO_100 = extern struct {
    Comment: PWSTR,
};

pub const DFS_INFO_101 = extern struct {
    State: u32,
};

pub const DFS_INFO_102 = extern struct {
    Timeout: u32,
};

pub const DFS_INFO_103 = extern struct {
    PropertyFlagMask: u32,
    PropertyFlags: u32,
};

pub const DFS_INFO_104 = extern struct {
    TargetPriority: DFS_TARGET_PRIORITY,
};

pub const DFS_INFO_105 = extern struct {
    Comment: PWSTR,
    State: u32,
    Timeout: u32,
    PropertyFlagMask: u32,
    PropertyFlags: u32,
};

pub const DFS_INFO_106 = extern struct {
    State: u32,
    TargetPriority: DFS_TARGET_PRIORITY,
};

pub const DFS_INFO_107 = extern struct {
    Comment: PWSTR,
    State: u32,
    Timeout: u32,
    PropertyFlagMask: u32,
    PropertyFlags: u32,
    SdLengthReserved: u32,
    pSecurityDescriptor: *c_void,
};

pub const DFS_INFO_150 = extern struct {
    SdLengthReserved: u32,
    pSecurityDescriptor: *c_void,
};

pub const DFS_INFO_200 = extern struct {
    FtDfsName: PWSTR,
};

pub const DFS_INFO_300 = extern struct {
    Flags: u32,
    DfsName: PWSTR,
};

pub const DFS_SITENAME_INFO = extern struct {
    SiteFlags: u32,
    SiteName: PWSTR,
};

pub const DFS_SITELIST_INFO = extern struct {
    cSites: u32,
    Site: [1]DFS_SITENAME_INFO,
};

pub const DFS_NAMESPACE_VERSION_ORIGIN = extern enum(i32) {
    COMBINED = 0,
    SERVER = 1,
    DOMAIN = 2,
};
pub const DFS_NAMESPACE_VERSION_ORIGIN_COMBINED = DFS_NAMESPACE_VERSION_ORIGIN.COMBINED;
pub const DFS_NAMESPACE_VERSION_ORIGIN_SERVER = DFS_NAMESPACE_VERSION_ORIGIN.SERVER;
pub const DFS_NAMESPACE_VERSION_ORIGIN_DOMAIN = DFS_NAMESPACE_VERSION_ORIGIN.DOMAIN;

pub const DFS_SUPPORTED_NAMESPACE_VERSION_INFO = extern struct {
    DomainDfsMajorVersion: u32,
    DomainDfsMinorVersion: u32,
    DomainDfsCapabilities: u64,
    StandaloneDfsMajorVersion: u32,
    StandaloneDfsMinorVersion: u32,
    StandaloneDfsCapabilities: u64,
};

pub const DFS_GET_PKT_ENTRY_STATE_ARG = extern struct {
    DfsEntryPathLen: u16,
    ServerNameLen: u16,
    ShareNameLen: u16,
    Level: u32,
    Buffer: [1]u16,
};


//--------------------------------------------------------------------------------
// Section: Functions (22)
//--------------------------------------------------------------------------------
pub extern "dfscli" fn NetDfsAdd(
    DfsEntryPath: PWSTR,
    ServerName: PWSTR,
    ShareName: PWSTR,
    Comment: ?PWSTR,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsAddStdRoot(
    ServerName: PWSTR,
    RootShare: PWSTR,
    Comment: ?PWSTR,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsRemoveStdRoot(
    ServerName: PWSTR,
    RootShare: PWSTR,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsAddFtRoot(
    ServerName: PWSTR,
    RootShare: PWSTR,
    FtDfsName: PWSTR,
    Comment: ?PWSTR,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsRemoveFtRoot(
    ServerName: PWSTR,
    RootShare: PWSTR,
    FtDfsName: PWSTR,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsRemoveFtRootForced(
    DomainName: PWSTR,
    ServerName: PWSTR,
    RootShare: PWSTR,
    FtDfsName: PWSTR,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsRemove(
    DfsEntryPath: PWSTR,
    ServerName: ?PWSTR,
    ShareName: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsEnum(
    DfsName: PWSTR,
    Level: u32,
    PrefMaxLen: u32,
    Buffer: **u8,
    EntriesRead: *u32,
    ResumeHandle: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsGetInfo(
    DfsEntryPath: PWSTR,
    ServerName: ?PWSTR,
    ShareName: ?PWSTR,
    Level: u32,
    Buffer: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsSetInfo(
    DfsEntryPath: PWSTR,
    ServerName: ?PWSTR,
    ShareName: ?PWSTR,
    Level: u32,
    Buffer: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsGetClientInfo(
    DfsEntryPath: PWSTR,
    ServerName: ?PWSTR,
    ShareName: ?PWSTR,
    Level: u32,
    Buffer: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsSetClientInfo(
    DfsEntryPath: PWSTR,
    ServerName: ?PWSTR,
    ShareName: ?PWSTR,
    Level: u32,
    Buffer: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsMove(
    OldDfsEntryPath: PWSTR,
    NewDfsEntryPath: PWSTR,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsAddRootTarget(
    pDfsPath: PWSTR,
    pTargetPath: ?PWSTR,
    MajorVersion: u32,
    pComment: ?PWSTR,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsRemoveRootTarget(
    pDfsPath: PWSTR,
    pTargetPath: ?PWSTR,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsGetSecurity(
    DfsEntryPath: PWSTR,
    SecurityInformation: u32,
    ppSecurityDescriptor: **c_void,
    lpcbSecurityDescriptor: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsSetSecurity(
    DfsEntryPath: PWSTR,
    SecurityInformation: u32,
    pSecurityDescriptor: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsGetStdContainerSecurity(
    MachineName: PWSTR,
    SecurityInformation: u32,
    ppSecurityDescriptor: **c_void,
    lpcbSecurityDescriptor: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsSetStdContainerSecurity(
    MachineName: PWSTR,
    SecurityInformation: u32,
    pSecurityDescriptor: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsGetFtContainerSecurity(
    DomainName: PWSTR,
    SecurityInformation: u32,
    ppSecurityDescriptor: **c_void,
    lpcbSecurityDescriptor: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsSetFtContainerSecurity(
    DomainName: PWSTR,
    SecurityInformation: u32,
    pSecurityDescriptor: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dfscli" fn NetDfsGetSupportedNamespaceVersion(
    Origin: DFS_NAMESPACE_VERSION_ORIGIN,
    pName: ?PWSTR,
    ppVersionInfo: **DFS_SUPPORTED_NAMESPACE_VERSION_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (2)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const PWSTR = @import("system_services.zig").PWSTR;

test {
    const constant_export_count = 0;
    const type_export_count = 30;
    const enum_value_export_count = 9;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 22;
    const unicode_alias_count = 0;
    const import_count = 2;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (26)
//--------------------------------------------------------------------------------
pub const LDAP_RETCODE = extern enum(i32) {
    LDAP_SUCCESS = 0,
    LDAP_OPERATIONS_ERROR = 1,
    LDAP_PROTOCOL_ERROR = 2,
    LDAP_TIMELIMIT_EXCEEDED = 3,
    LDAP_SIZELIMIT_EXCEEDED = 4,
    LDAP_COMPARE_FALSE = 5,
    LDAP_COMPARE_TRUE = 6,
    LDAP_AUTH_METHOD_NOT_SUPPORTED = 7,
    LDAP_STRONG_AUTH_REQUIRED = 8,
    LDAP_REFERRAL_V2 = 9,
    LDAP_PARTIAL_RESULTS = 9,
    LDAP_REFERRAL = 10,
    LDAP_ADMIN_LIMIT_EXCEEDED = 11,
    LDAP_UNAVAILABLE_CRIT_EXTENSION = 12,
    LDAP_CONFIDENTIALITY_REQUIRED = 13,
    LDAP_SASL_BIND_IN_PROGRESS = 14,
    LDAP_NO_SUCH_ATTRIBUTE = 16,
    LDAP_UNDEFINED_TYPE = 17,
    LDAP_INAPPROPRIATE_MATCHING = 18,
    LDAP_CONSTRAINT_VIOLATION = 19,
    LDAP_ATTRIBUTE_OR_VALUE_EXISTS = 20,
    LDAP_INVALID_SYNTAX = 21,
    LDAP_NO_SUCH_OBJECT = 32,
    LDAP_ALIAS_PROBLEM = 33,
    LDAP_INVALID_DN_SYNTAX = 34,
    LDAP_IS_LEAF = 35,
    LDAP_ALIAS_DEREF_PROBLEM = 36,
    LDAP_INAPPROPRIATE_AUTH = 48,
    LDAP_INVALID_CREDENTIALS = 49,
    LDAP_INSUFFICIENT_RIGHTS = 50,
    LDAP_BUSY = 51,
    LDAP_UNAVAILABLE = 52,
    LDAP_UNWILLING_TO_PERFORM = 53,
    LDAP_LOOP_DETECT = 54,
    LDAP_SORT_CONTROL_MISSING = 60,
    LDAP_OFFSET_RANGE_ERROR = 61,
    LDAP_NAMING_VIOLATION = 64,
    LDAP_OBJECT_CLASS_VIOLATION = 65,
    LDAP_NOT_ALLOWED_ON_NONLEAF = 66,
    LDAP_NOT_ALLOWED_ON_RDN = 67,
    LDAP_ALREADY_EXISTS = 68,
    LDAP_NO_OBJECT_CLASS_MODS = 69,
    LDAP_RESULTS_TOO_LARGE = 70,
    LDAP_AFFECTS_MULTIPLE_DSAS = 71,
    LDAP_VIRTUAL_LIST_VIEW_ERROR = 76,
    LDAP_OTHER = 80,
    LDAP_SERVER_DOWN = 81,
    LDAP_LOCAL_ERROR = 82,
    LDAP_ENCODING_ERROR = 83,
    LDAP_DECODING_ERROR = 84,
    LDAP_TIMEOUT = 85,
    LDAP_AUTH_UNKNOWN = 86,
    LDAP_FILTER_ERROR = 87,
    LDAP_USER_CANCELLED = 88,
    LDAP_PARAM_ERROR = 89,
    LDAP_NO_MEMORY = 90,
    LDAP_CONNECT_ERROR = 91,
    LDAP_NOT_SUPPORTED = 92,
    LDAP_NO_RESULTS_RETURNED = 94,
    LDAP_CONTROL_NOT_FOUND = 93,
    LDAP_MORE_RESULTS_TO_RETURN = 95,
    LDAP_CLIENT_LOOP = 96,
    LDAP_REFERRAL_LIMIT_EXCEEDED = 97,
};
pub const LDAP_SUCCESS = LDAP_RETCODE.LDAP_SUCCESS;
pub const LDAP_OPERATIONS_ERROR = LDAP_RETCODE.LDAP_OPERATIONS_ERROR;
pub const LDAP_PROTOCOL_ERROR = LDAP_RETCODE.LDAP_PROTOCOL_ERROR;
pub const LDAP_TIMELIMIT_EXCEEDED = LDAP_RETCODE.LDAP_TIMELIMIT_EXCEEDED;
pub const LDAP_SIZELIMIT_EXCEEDED = LDAP_RETCODE.LDAP_SIZELIMIT_EXCEEDED;
pub const LDAP_COMPARE_FALSE = LDAP_RETCODE.LDAP_COMPARE_FALSE;
pub const LDAP_COMPARE_TRUE = LDAP_RETCODE.LDAP_COMPARE_TRUE;
pub const LDAP_AUTH_METHOD_NOT_SUPPORTED = LDAP_RETCODE.LDAP_AUTH_METHOD_NOT_SUPPORTED;
pub const LDAP_STRONG_AUTH_REQUIRED = LDAP_RETCODE.LDAP_STRONG_AUTH_REQUIRED;
pub const LDAP_REFERRAL_V2 = LDAP_RETCODE.LDAP_REFERRAL_V2;
pub const LDAP_PARTIAL_RESULTS = LDAP_RETCODE.LDAP_PARTIAL_RESULTS;
pub const LDAP_REFERRAL = LDAP_RETCODE.LDAP_REFERRAL;
pub const LDAP_ADMIN_LIMIT_EXCEEDED = LDAP_RETCODE.LDAP_ADMIN_LIMIT_EXCEEDED;
pub const LDAP_UNAVAILABLE_CRIT_EXTENSION = LDAP_RETCODE.LDAP_UNAVAILABLE_CRIT_EXTENSION;
pub const LDAP_CONFIDENTIALITY_REQUIRED = LDAP_RETCODE.LDAP_CONFIDENTIALITY_REQUIRED;
pub const LDAP_SASL_BIND_IN_PROGRESS = LDAP_RETCODE.LDAP_SASL_BIND_IN_PROGRESS;
pub const LDAP_NO_SUCH_ATTRIBUTE = LDAP_RETCODE.LDAP_NO_SUCH_ATTRIBUTE;
pub const LDAP_UNDEFINED_TYPE = LDAP_RETCODE.LDAP_UNDEFINED_TYPE;
pub const LDAP_INAPPROPRIATE_MATCHING = LDAP_RETCODE.LDAP_INAPPROPRIATE_MATCHING;
pub const LDAP_CONSTRAINT_VIOLATION = LDAP_RETCODE.LDAP_CONSTRAINT_VIOLATION;
pub const LDAP_ATTRIBUTE_OR_VALUE_EXISTS = LDAP_RETCODE.LDAP_ATTRIBUTE_OR_VALUE_EXISTS;
pub const LDAP_INVALID_SYNTAX = LDAP_RETCODE.LDAP_INVALID_SYNTAX;
pub const LDAP_NO_SUCH_OBJECT = LDAP_RETCODE.LDAP_NO_SUCH_OBJECT;
pub const LDAP_ALIAS_PROBLEM = LDAP_RETCODE.LDAP_ALIAS_PROBLEM;
pub const LDAP_INVALID_DN_SYNTAX = LDAP_RETCODE.LDAP_INVALID_DN_SYNTAX;
pub const LDAP_IS_LEAF = LDAP_RETCODE.LDAP_IS_LEAF;
pub const LDAP_ALIAS_DEREF_PROBLEM = LDAP_RETCODE.LDAP_ALIAS_DEREF_PROBLEM;
pub const LDAP_INAPPROPRIATE_AUTH = LDAP_RETCODE.LDAP_INAPPROPRIATE_AUTH;
pub const LDAP_INVALID_CREDENTIALS = LDAP_RETCODE.LDAP_INVALID_CREDENTIALS;
pub const LDAP_INSUFFICIENT_RIGHTS = LDAP_RETCODE.LDAP_INSUFFICIENT_RIGHTS;
pub const LDAP_BUSY = LDAP_RETCODE.LDAP_BUSY;
pub const LDAP_UNAVAILABLE = LDAP_RETCODE.LDAP_UNAVAILABLE;
pub const LDAP_UNWILLING_TO_PERFORM = LDAP_RETCODE.LDAP_UNWILLING_TO_PERFORM;
pub const LDAP_LOOP_DETECT = LDAP_RETCODE.LDAP_LOOP_DETECT;
pub const LDAP_SORT_CONTROL_MISSING = LDAP_RETCODE.LDAP_SORT_CONTROL_MISSING;
pub const LDAP_OFFSET_RANGE_ERROR = LDAP_RETCODE.LDAP_OFFSET_RANGE_ERROR;
pub const LDAP_NAMING_VIOLATION = LDAP_RETCODE.LDAP_NAMING_VIOLATION;
pub const LDAP_OBJECT_CLASS_VIOLATION = LDAP_RETCODE.LDAP_OBJECT_CLASS_VIOLATION;
pub const LDAP_NOT_ALLOWED_ON_NONLEAF = LDAP_RETCODE.LDAP_NOT_ALLOWED_ON_NONLEAF;
pub const LDAP_NOT_ALLOWED_ON_RDN = LDAP_RETCODE.LDAP_NOT_ALLOWED_ON_RDN;
pub const LDAP_ALREADY_EXISTS = LDAP_RETCODE.LDAP_ALREADY_EXISTS;
pub const LDAP_NO_OBJECT_CLASS_MODS = LDAP_RETCODE.LDAP_NO_OBJECT_CLASS_MODS;
pub const LDAP_RESULTS_TOO_LARGE = LDAP_RETCODE.LDAP_RESULTS_TOO_LARGE;
pub const LDAP_AFFECTS_MULTIPLE_DSAS = LDAP_RETCODE.LDAP_AFFECTS_MULTIPLE_DSAS;
pub const LDAP_VIRTUAL_LIST_VIEW_ERROR = LDAP_RETCODE.LDAP_VIRTUAL_LIST_VIEW_ERROR;
pub const LDAP_OTHER = LDAP_RETCODE.LDAP_OTHER;
pub const LDAP_SERVER_DOWN = LDAP_RETCODE.LDAP_SERVER_DOWN;
pub const LDAP_LOCAL_ERROR = LDAP_RETCODE.LDAP_LOCAL_ERROR;
pub const LDAP_ENCODING_ERROR = LDAP_RETCODE.LDAP_ENCODING_ERROR;
pub const LDAP_DECODING_ERROR = LDAP_RETCODE.LDAP_DECODING_ERROR;
pub const LDAP_TIMEOUT = LDAP_RETCODE.LDAP_TIMEOUT;
pub const LDAP_AUTH_UNKNOWN = LDAP_RETCODE.LDAP_AUTH_UNKNOWN;
pub const LDAP_FILTER_ERROR = LDAP_RETCODE.LDAP_FILTER_ERROR;
pub const LDAP_USER_CANCELLED = LDAP_RETCODE.LDAP_USER_CANCELLED;
pub const LDAP_PARAM_ERROR = LDAP_RETCODE.LDAP_PARAM_ERROR;
pub const LDAP_NO_MEMORY = LDAP_RETCODE.LDAP_NO_MEMORY;
pub const LDAP_CONNECT_ERROR = LDAP_RETCODE.LDAP_CONNECT_ERROR;
pub const LDAP_NOT_SUPPORTED = LDAP_RETCODE.LDAP_NOT_SUPPORTED;
pub const LDAP_NO_RESULTS_RETURNED = LDAP_RETCODE.LDAP_NO_RESULTS_RETURNED;
pub const LDAP_CONTROL_NOT_FOUND = LDAP_RETCODE.LDAP_CONTROL_NOT_FOUND;
pub const LDAP_MORE_RESULTS_TO_RETURN = LDAP_RETCODE.LDAP_MORE_RESULTS_TO_RETURN;
pub const LDAP_CLIENT_LOOP = LDAP_RETCODE.LDAP_CLIENT_LOOP;
pub const LDAP_REFERRAL_LIMIT_EXCEEDED = LDAP_RETCODE.LDAP_REFERRAL_LIMIT_EXCEEDED;

pub const ldap = extern struct {
    ld_sb: ldap._ld_sb_e__Struct,
    ld_host: [*]u8,
    ld_version: u32,
    ld_lberoptions: u8,
    ld_deref: u32,
    ld_timelimit: u32,
    ld_sizelimit: u32,
    ld_errno: u32,
    ld_matched: [*]u8,
    ld_error: [*]u8,
    ld_msgid: u32,
    Reserved3: [25]u8,
    ld_cldaptries: u32,
    ld_cldaptimeout: u32,
    ld_refhoplimit: u32,
    ld_options: u32,
    const _ld_sb_e__Struct = u32; // TODO: generate this nested type!
};

pub const LDAP_TIMEVAL = extern struct {
    tv_sec: i32,
    tv_usec: i32,
};

pub const LDAP_BERVAL = extern struct {
    bv_len: u32,
    bv_val: [*]u8,
};

pub const LDAPMessage = extern struct {
    lm_msgid: u32,
    lm_msgtype: u32,
    lm_ber: *c_void,
    lm_chain: *LDAPMessage,
    lm_next: *LDAPMessage,
    lm_time: u32,
    Connection: *ldap,
    Request: *c_void,
    lm_returncode: u32,
    lm_referral: u16,
    lm_chased: u8,
    lm_eom: u8,
    ConnectionReferenced: u8,
};

pub const ldapcontrolA = extern struct {
    ldctl_oid: [*]u8,
    ldctl_value: LDAP_BERVAL,
    ldctl_iscritical: u8,
};

pub const ldapcontrolW = extern struct {
    ldctl_oid: [*]u16,
    ldctl_value: LDAP_BERVAL,
    ldctl_iscritical: u8,
};

pub const ldapmodW = extern struct {
    mod_op: u32,
    mod_type: [*]u16,
    mod_vals: ldapmodW._mod_vals_e__Union,
    const _mod_vals_e__Union = u32; // TODO: generate this nested type!
};

pub const ldapmodA = extern struct {
    mod_op: u32,
    mod_type: [*]u8,
    mod_vals: ldapmodA._mod_vals_e__Union,
    const _mod_vals_e__Union = u32; // TODO: generate this nested type!
};

pub const berelement = extern struct {
    @"opaque": [*]u8,
};

pub const ldap_version_info = extern struct {
    lv_size: u32,
    lv_major: u32,
    lv_minor: u32,
};

pub const ldapapiinfoA = extern struct {
    ldapai_info_version: i32,
    ldapai_api_version: i32,
    ldapai_protocol_version: i32,
    ldapai_extensions: **i8,
    ldapai_vendor_name: *i8,
    ldapai_vendor_version: i32,
};

pub const ldapapiinfoW = extern struct {
    ldapai_info_version: i32,
    ldapai_api_version: i32,
    ldapai_protocol_version: i32,
    ldapai_extensions: *PWSTR,
    ldapai_vendor_name: [*]u16,
    ldapai_vendor_version: i32,
};

pub const LDAPAPIFeatureInfoA = extern struct {
    ldapaif_info_version: i32,
    ldapaif_name: *i8,
    ldapaif_version: i32,
};

pub const LDAPAPIFeatureInfoW = extern struct {
    ldapaif_info_version: i32,
    ldapaif_name: [*]u16,
    ldapaif_version: i32,
};

pub const DBGPRINT = fn(
    Format: [*]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const ldapsearch = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const ldapsortkeyW = extern struct {
    sk_attrtype: [*]u16,
    sk_matchruleoid: [*]u16,
    sk_reverseorder: u8,
};

pub const ldapsortkeyA = extern struct {
    sk_attrtype: [*]u8,
    sk_matchruleoid: [*]u8,
    sk_reverseorder: u8,
};

pub const ldapvlvinfo = extern struct {
    ldvlv_version: i32,
    ldvlv_before_count: u32,
    ldvlv_after_count: u32,
    ldvlv_offset: u32,
    ldvlv_count: u32,
    ldvlv_attrvalue: *LDAP_BERVAL,
    ldvlv_context: *LDAP_BERVAL,
    ldvlv_extradata: *c_void,
};

pub const QUERYFORCONNECTION = fn(
    PrimaryConnection: *ldap,
    ReferralFromConnection: *ldap,
    NewDN: [*]u16,
    HostName: [*]u8,
    PortNumber: u32,
    SecAuthIdentity: *c_void,
    CurrentUserToken: *c_void,
    ConnectionToUse: **ldap,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const NOTIFYOFNEWCONNECTION = fn(
    PrimaryConnection: *ldap,
    ReferralFromConnection: *ldap,
    NewDN: [*]u16,
    HostName: [*]u8,
    NewConnection: *ldap,
    PortNumber: u32,
    SecAuthIdentity: *c_void,
    CurrentUser: *c_void,
    ErrorCodeFromBind: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub const DEREFERENCECONNECTION = fn(
    PrimaryConnection: *ldap,
    ConnectionToDereference: *ldap,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const LDAP_REFERRAL_CALLBACK = extern struct {
    SizeOfCallbacks: u32,
    QueryForConnection: *QUERYFORCONNECTION,
    NotifyRoutine: *NOTIFYOFNEWCONNECTION,
    DereferenceRoutine: *DEREFERENCECONNECTION,
};

pub const QUERYCLIENTCERT = fn(
    Connection: *ldap,
    trusted_CAs: *SecPkgContext_IssuerListInfoEx,
    ppCertificate: **CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) u8;

pub const VERIFYSERVERCERT = fn(
    Connection: *ldap,
    pServerCert: **CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) u8;


//--------------------------------------------------------------------------------
// Section: Functions (243)
//--------------------------------------------------------------------------------
pub extern "WLDAP32" fn ldap_openW(
    HostName: [*:0]const u16,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) *ldap;

pub extern "WLDAP32" fn ldap_openA(
    HostName: [*:0]const u8,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) *ldap;

pub extern "WLDAP32" fn ldap_initW(
    HostName: [*:0]const u16,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) *ldap;

pub extern "WLDAP32" fn ldap_initA(
    HostName: [*:0]const u8,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) *ldap;

pub extern "WLDAP32" fn ldap_sslinitW(
    HostName: PWSTR,
    PortNumber: u32,
    secure: i32,
) callconv(@import("std").os.windows.WINAPI) *ldap;

pub extern "WLDAP32" fn ldap_sslinitA(
    HostName: PSTR,
    PortNumber: u32,
    secure: i32,
) callconv(@import("std").os.windows.WINAPI) *ldap;

pub extern "WLDAP32" fn ldap_connect(
    ld: *ldap,
    timeout: *LDAP_TIMEVAL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_open(
    HostName: PSTR,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) *ldap;

pub extern "WLDAP32" fn ldap_init(
    HostName: PSTR,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) *ldap;

pub extern "WLDAP32" fn ldap_sslinit(
    HostName: PSTR,
    PortNumber: u32,
    secure: i32,
) callconv(@import("std").os.windows.WINAPI) *ldap;

pub extern "WLDAP32" fn cldap_openW(
    HostName: PWSTR,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) *ldap;

pub extern "WLDAP32" fn cldap_openA(
    HostName: PSTR,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) *ldap;

pub extern "WLDAP32" fn cldap_open(
    HostName: PSTR,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) *ldap;

pub extern "WLDAP32" fn ldap_unbind(
    ld: *ldap,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_unbind_s(
    ld: *ldap,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_get_option(
    ld: *ldap,
    option: i32,
    outvalue: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_get_optionW(
    ld: *ldap,
    option: i32,
    outvalue: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_set_option(
    ld: *ldap,
    option: i32,
    invalue: *const c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_set_optionW(
    ld: *ldap,
    option: i32,
    invalue: *const c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_simple_bindW(
    ld: *ldap,
    dn: ?PWSTR,
    passwd: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_simple_bindA(
    ld: *ldap,
    dn: ?PSTR,
    passwd: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_simple_bind_sW(
    ld: *ldap,
    dn: ?PWSTR,
    passwd: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_simple_bind_sA(
    ld: *ldap,
    dn: ?PSTR,
    passwd: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_bindW(
    ld: *ldap,
    dn: ?PWSTR,
    cred: ?[*]u16,
    method: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_bindA(
    ld: *ldap,
    dn: ?PSTR,
    cred: ?[*]u8,
    method: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_bind_sW(
    ld: *ldap,
    dn: ?PWSTR,
    cred: ?[*]u16,
    method: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_bind_sA(
    ld: *ldap,
    dn: ?PSTR,
    cred: ?[*]u8,
    method: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_sasl_bindA(
    ExternalHandle: *ldap,
    DistName: [*:0]const u8,
    AuthMechanism: [*:0]const u8,
    cred: *const LDAP_BERVAL,
    ServerCtrls: **ldapcontrolA,
    ClientCtrls: **ldapcontrolA,
    MessageNumber: *i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WLDAP32" fn ldap_sasl_bindW(
    ExternalHandle: *ldap,
    DistName: [*:0]const u16,
    AuthMechanism: [*:0]const u16,
    cred: *const LDAP_BERVAL,
    ServerCtrls: **ldapcontrolW,
    ClientCtrls: **ldapcontrolW,
    MessageNumber: *i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WLDAP32" fn ldap_sasl_bind_sA(
    ExternalHandle: *ldap,
    DistName: [*:0]const u8,
    AuthMechanism: [*:0]const u8,
    cred: *const LDAP_BERVAL,
    ServerCtrls: **ldapcontrolA,
    ClientCtrls: **ldapcontrolA,
    ServerData: **LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WLDAP32" fn ldap_sasl_bind_sW(
    ExternalHandle: *ldap,
    DistName: [*:0]const u16,
    AuthMechanism: [*:0]const u16,
    cred: *const LDAP_BERVAL,
    ServerCtrls: **ldapcontrolW,
    ClientCtrls: **ldapcontrolW,
    ServerData: **LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WLDAP32" fn ldap_simple_bind(
    ld: *ldap,
    dn: ?[*:0]const u8,
    passwd: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_simple_bind_s(
    ld: *ldap,
    dn: ?[*:0]const u8,
    passwd: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_bind(
    ld: *ldap,
    dn: ?[*:0]const u8,
    cred: ?[*:0]const u8,
    method: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_bind_s(
    ld: *ldap,
    dn: ?[*:0]const u8,
    cred: ?[*:0]const u8,
    method: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_searchW(
    ld: *ldap,
    base: ?[*:0]const u16,
    scope: u32,
    filter: [*:0]const u16,
    attrs: **u16,
    attrsonly: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_searchA(
    ld: *ldap,
    base: ?[*:0]const u8,
    scope: u32,
    filter: [*:0]const u8,
    attrs: **i8,
    attrsonly: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_search_sW(
    ld: *ldap,
    base: ?[*:0]const u16,
    scope: u32,
    filter: [*:0]const u16,
    attrs: **u16,
    attrsonly: u32,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_search_sA(
    ld: *ldap,
    base: ?[*:0]const u8,
    scope: u32,
    filter: [*:0]const u8,
    attrs: **i8,
    attrsonly: u32,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_search_stW(
    ld: *ldap,
    base: ?[*:0]const u16,
    scope: u32,
    filter: [*:0]const u16,
    attrs: **u16,
    attrsonly: u32,
    timeout: *LDAP_TIMEVAL,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_search_stA(
    ld: *ldap,
    base: ?[*:0]const u8,
    scope: u32,
    filter: [*:0]const u8,
    attrs: **i8,
    attrsonly: u32,
    timeout: *LDAP_TIMEVAL,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_search_extW(
    ld: *ldap,
    base: ?[*:0]const u16,
    scope: u32,
    filter: [*:0]const u16,
    attrs: **u16,
    attrsonly: u32,
    ServerControls: ?*?*ldapcontrolW,
    ClientControls: ?*?*ldapcontrolW,
    TimeLimit: u32,
    SizeLimit: u32,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_search_extA(
    ld: *ldap,
    base: ?[*:0]const u8,
    scope: u32,
    filter: [*:0]const u8,
    attrs: **i8,
    attrsonly: u32,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    TimeLimit: u32,
    SizeLimit: u32,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_search_ext_sW(
    ld: *ldap,
    base: ?[*:0]const u16,
    scope: u32,
    filter: [*:0]const u16,
    attrs: **u16,
    attrsonly: u32,
    ServerControls: ?*?*ldapcontrolW,
    ClientControls: ?*?*ldapcontrolW,
    timeout: *LDAP_TIMEVAL,
    SizeLimit: u32,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_search_ext_sA(
    ld: *ldap,
    base: ?[*:0]const u8,
    scope: u32,
    filter: [*:0]const u8,
    attrs: **i8,
    attrsonly: u32,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    timeout: *LDAP_TIMEVAL,
    SizeLimit: u32,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_search(
    ld: *ldap,
    base: ?PSTR,
    scope: u32,
    filter: PSTR,
    attrs: **i8,
    attrsonly: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_search_s(
    ld: *ldap,
    base: ?PSTR,
    scope: u32,
    filter: PSTR,
    attrs: **i8,
    attrsonly: u32,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_search_st(
    ld: *ldap,
    base: ?PSTR,
    scope: u32,
    filter: PSTR,
    attrs: **i8,
    attrsonly: u32,
    timeout: *LDAP_TIMEVAL,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_search_ext(
    ld: *ldap,
    base: ?PSTR,
    scope: u32,
    filter: PSTR,
    attrs: **i8,
    attrsonly: u32,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    TimeLimit: u32,
    SizeLimit: u32,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_search_ext_s(
    ld: *ldap,
    base: ?PSTR,
    scope: u32,
    filter: PSTR,
    attrs: **i8,
    attrsonly: u32,
    ServerControls: ?*?*ldapcontrolA,
    ClientControls: ?*?*ldapcontrolA,
    timeout: *LDAP_TIMEVAL,
    SizeLimit: u32,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_check_filterW(
    ld: *ldap,
    SearchFilter: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_check_filterA(
    ld: *ldap,
    SearchFilter: PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modifyW(
    ld: *ldap,
    dn: PWSTR,
    mods: **ldapmodW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modifyA(
    ld: *ldap,
    dn: PSTR,
    mods: **ldapmodA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modify_sW(
    ld: *ldap,
    dn: PWSTR,
    mods: **ldapmodW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modify_sA(
    ld: *ldap,
    dn: PSTR,
    mods: **ldapmodA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modify_extW(
    ld: *ldap,
    dn: [*:0]const u16,
    mods: **ldapmodW,
    ServerControls: **ldapcontrolW,
    ClientControls: **ldapcontrolW,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modify_extA(
    ld: *ldap,
    dn: [*:0]const u8,
    mods: **ldapmodA,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modify_ext_sW(
    ld: *ldap,
    dn: [*:0]const u16,
    mods: **ldapmodW,
    ServerControls: **ldapcontrolW,
    ClientControls: **ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modify_ext_sA(
    ld: *ldap,
    dn: [*:0]const u8,
    mods: **ldapmodA,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modify(
    ld: *ldap,
    dn: PSTR,
    mods: **ldapmodA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modify_s(
    ld: *ldap,
    dn: PSTR,
    mods: **ldapmodA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modify_ext(
    ld: *ldap,
    dn: [*:0]const u8,
    mods: **ldapmodA,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modify_ext_s(
    ld: *ldap,
    dn: [*:0]const u8,
    mods: **ldapmodA,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modrdn2W(
    ExternalHandle: *ldap,
    DistinguishedName: [*:0]const u16,
    NewDistinguishedName: [*:0]const u16,
    DeleteOldRdn: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modrdn2A(
    ExternalHandle: *ldap,
    DistinguishedName: [*:0]const u8,
    NewDistinguishedName: [*:0]const u8,
    DeleteOldRdn: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modrdnW(
    ExternalHandle: *ldap,
    DistinguishedName: [*:0]const u16,
    NewDistinguishedName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modrdnA(
    ExternalHandle: *ldap,
    DistinguishedName: [*:0]const u8,
    NewDistinguishedName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modrdn2_sW(
    ExternalHandle: *ldap,
    DistinguishedName: [*:0]const u16,
    NewDistinguishedName: [*:0]const u16,
    DeleteOldRdn: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modrdn2_sA(
    ExternalHandle: *ldap,
    DistinguishedName: [*:0]const u8,
    NewDistinguishedName: [*:0]const u8,
    DeleteOldRdn: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modrdn_sW(
    ExternalHandle: *ldap,
    DistinguishedName: [*:0]const u16,
    NewDistinguishedName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modrdn_sA(
    ExternalHandle: *ldap,
    DistinguishedName: [*:0]const u8,
    NewDistinguishedName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modrdn2(
    ExternalHandle: *ldap,
    DistinguishedName: [*:0]const u8,
    NewDistinguishedName: [*:0]const u8,
    DeleteOldRdn: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modrdn(
    ExternalHandle: *ldap,
    DistinguishedName: [*:0]const u8,
    NewDistinguishedName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modrdn2_s(
    ExternalHandle: *ldap,
    DistinguishedName: [*:0]const u8,
    NewDistinguishedName: [*:0]const u8,
    DeleteOldRdn: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_modrdn_s(
    ExternalHandle: *ldap,
    DistinguishedName: [*:0]const u8,
    NewDistinguishedName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_rename_extW(
    ld: *ldap,
    dn: [*:0]const u16,
    NewRDN: [*:0]const u16,
    NewParent: ?[*:0]const u16,
    DeleteOldRdn: i32,
    ServerControls: **ldapcontrolW,
    ClientControls: **ldapcontrolW,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_rename_extA(
    ld: *ldap,
    dn: [*:0]const u8,
    NewRDN: [*:0]const u8,
    NewParent: ?[*:0]const u8,
    DeleteOldRdn: i32,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_rename_ext_sW(
    ld: *ldap,
    dn: [*:0]const u16,
    NewRDN: [*:0]const u16,
    NewParent: ?[*:0]const u16,
    DeleteOldRdn: i32,
    ServerControls: **ldapcontrolW,
    ClientControls: **ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_rename_ext_sA(
    ld: *ldap,
    dn: [*:0]const u8,
    NewRDN: [*:0]const u8,
    NewParent: ?[*:0]const u8,
    DeleteOldRdn: i32,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_rename_ext(
    ld: *ldap,
    dn: [*:0]const u8,
    NewRDN: [*:0]const u8,
    NewParent: [*:0]const u8,
    DeleteOldRdn: i32,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_rename_ext_s(
    ld: *ldap,
    dn: [*:0]const u8,
    NewRDN: [*:0]const u8,
    NewParent: [*:0]const u8,
    DeleteOldRdn: i32,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_addW(
    ld: *ldap,
    dn: PWSTR,
    attrs: **ldapmodW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_addA(
    ld: *ldap,
    dn: PSTR,
    attrs: **ldapmodA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_add_sW(
    ld: *ldap,
    dn: PWSTR,
    attrs: **ldapmodW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_add_sA(
    ld: *ldap,
    dn: PSTR,
    attrs: **ldapmodA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_add_extW(
    ld: *ldap,
    dn: [*:0]const u16,
    attrs: **ldapmodW,
    ServerControls: **ldapcontrolW,
    ClientControls: **ldapcontrolW,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_add_extA(
    ld: *ldap,
    dn: [*:0]const u8,
    attrs: **ldapmodA,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_add_ext_sW(
    ld: *ldap,
    dn: [*:0]const u16,
    attrs: **ldapmodW,
    ServerControls: **ldapcontrolW,
    ClientControls: **ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_add_ext_sA(
    ld: *ldap,
    dn: [*:0]const u8,
    attrs: **ldapmodA,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_add(
    ld: *ldap,
    dn: PSTR,
    attrs: **ldapmodA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_add_s(
    ld: *ldap,
    dn: PSTR,
    attrs: **ldapmodA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_add_ext(
    ld: *ldap,
    dn: [*:0]const u8,
    attrs: **ldapmodA,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_add_ext_s(
    ld: *ldap,
    dn: [*:0]const u8,
    attrs: **ldapmodA,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_compareW(
    ld: *ldap,
    dn: [*:0]const u16,
    attr: [*:0]const u16,
    value: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_compareA(
    ld: *ldap,
    dn: [*:0]const u8,
    attr: [*:0]const u8,
    value: PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_compare_sW(
    ld: *ldap,
    dn: [*:0]const u16,
    attr: [*:0]const u16,
    value: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_compare_sA(
    ld: *ldap,
    dn: [*:0]const u8,
    attr: [*:0]const u8,
    value: PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_compare(
    ld: *ldap,
    dn: [*:0]const u8,
    attr: [*:0]const u8,
    value: PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_compare_s(
    ld: *ldap,
    dn: [*:0]const u8,
    attr: [*:0]const u8,
    value: PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_compare_extW(
    ld: *ldap,
    dn: [*:0]const u16,
    Attr: [*:0]const u16,
    Value: ?[*:0]const u16,
    Data: ?*LDAP_BERVAL,
    ServerControls: **ldapcontrolW,
    ClientControls: **ldapcontrolW,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_compare_extA(
    ld: *ldap,
    dn: [*:0]const u8,
    Attr: [*:0]const u8,
    Value: ?[*:0]const u8,
    Data: ?*LDAP_BERVAL,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_compare_ext_sW(
    ld: *ldap,
    dn: [*:0]const u16,
    Attr: [*:0]const u16,
    Value: ?[*:0]const u16,
    Data: ?*LDAP_BERVAL,
    ServerControls: **ldapcontrolW,
    ClientControls: **ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_compare_ext_sA(
    ld: *ldap,
    dn: [*:0]const u8,
    Attr: [*:0]const u8,
    Value: ?[*:0]const u8,
    Data: ?*LDAP_BERVAL,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_compare_ext(
    ld: *ldap,
    dn: [*:0]const u8,
    Attr: [*:0]const u8,
    Value: [*:0]const u8,
    Data: *LDAP_BERVAL,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_compare_ext_s(
    ld: *ldap,
    dn: [*:0]const u8,
    Attr: [*:0]const u8,
    Value: [*:0]const u8,
    Data: *LDAP_BERVAL,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_deleteW(
    ld: *ldap,
    dn: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_deleteA(
    ld: *ldap,
    dn: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_delete_sW(
    ld: *ldap,
    dn: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_delete_sA(
    ld: *ldap,
    dn: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_delete_extW(
    ld: *ldap,
    dn: [*:0]const u16,
    ServerControls: **ldapcontrolW,
    ClientControls: **ldapcontrolW,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_delete_extA(
    ld: *ldap,
    dn: [*:0]const u8,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_delete_ext_sW(
    ld: *ldap,
    dn: [*:0]const u16,
    ServerControls: **ldapcontrolW,
    ClientControls: **ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_delete_ext_sA(
    ld: *ldap,
    dn: [*:0]const u8,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_delete(
    ld: *ldap,
    dn: PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_delete_s(
    ld: *ldap,
    dn: PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_delete_ext(
    ld: *ldap,
    dn: [*:0]const u8,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_delete_ext_s(
    ld: *ldap,
    dn: [*:0]const u8,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_abandon(
    ld: *ldap,
    msgid: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_result(
    ld: *ldap,
    msgid: u32,
    all: u32,
    timeout: ?*LDAP_TIMEVAL,
    res: ?*?*LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_msgfree(
    res: *LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_result2error(
    ld: *ldap,
    res: *LDAPMessage,
    freeit: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_parse_resultW(
    Connection: *ldap,
    ResultMessage: *LDAPMessage,
    ReturnCode: *u32,
    MatchedDNs: ?*?PWSTR,
    ErrorMessage: ?*?PWSTR,
    Referrals: ?*?*?*u16,
    ServerControls: ***ldapcontrolW,
    Freeit: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_parse_resultA(
    Connection: *ldap,
    ResultMessage: *LDAPMessage,
    ReturnCode: *u32,
    MatchedDNs: ?*?PSTR,
    ErrorMessage: ?*?PSTR,
    Referrals: ?*?*?*i8,
    ServerControls: ***ldapcontrolA,
    Freeit: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_parse_extended_resultA(
    Connection: *ldap,
    ResultMessage: *LDAPMessage,
    ResultOID: ?*?PSTR,
    ResultData: **LDAP_BERVAL,
    Freeit: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_parse_extended_resultW(
    Connection: *ldap,
    ResultMessage: *LDAPMessage,
    ResultOID: ?*?PWSTR,
    ResultData: **LDAP_BERVAL,
    Freeit: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_controls_freeA(
    Controls: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_control_freeA(
    Controls: *ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_controls_freeW(
    Control: **ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_control_freeW(
    Control: *ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_free_controlsW(
    Controls: **ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_free_controlsA(
    Controls: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_parse_result(
    Connection: *ldap,
    ResultMessage: *LDAPMessage,
    ReturnCode: *u32,
    MatchedDNs: ?*?PSTR,
    ErrorMessage: ?*?PSTR,
    Referrals: ?*?*?PSTR,
    ServerControls: ***ldapcontrolA,
    Freeit: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_controls_free(
    Controls: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_control_free(
    Control: *ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_free_controls(
    Controls: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_err2stringW(
    err: u32,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "WLDAP32" fn ldap_err2stringA(
    err: u32,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "WLDAP32" fn ldap_err2string(
    err: u32,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "WLDAP32" fn ldap_perror(
    ld: *ldap,
    msg: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WLDAP32" fn ldap_first_entry(
    ld: *ldap,
    res: *LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) *LDAPMessage;

pub extern "WLDAP32" fn ldap_next_entry(
    ld: *ldap,
    entry: *LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) *LDAPMessage;

pub extern "WLDAP32" fn ldap_count_entries(
    ld: *ldap,
    res: *LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_first_attributeW(
    ld: *ldap,
    entry: *LDAPMessage,
    ptr: **berelement,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "WLDAP32" fn ldap_first_attributeA(
    ld: *ldap,
    entry: *LDAPMessage,
    ptr: **berelement,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "WLDAP32" fn ldap_first_attribute(
    ld: *ldap,
    entry: *LDAPMessage,
    ptr: **berelement,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "WLDAP32" fn ldap_next_attributeW(
    ld: *ldap,
    entry: *LDAPMessage,
    ptr: *berelement,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "WLDAP32" fn ldap_next_attributeA(
    ld: *ldap,
    entry: *LDAPMessage,
    ptr: *berelement,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "WLDAP32" fn ldap_next_attribute(
    ld: *ldap,
    entry: *LDAPMessage,
    ptr: *berelement,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "WLDAP32" fn ldap_get_valuesW(
    ld: *ldap,
    entry: *LDAPMessage,
    attr: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *PWSTR;

pub extern "WLDAP32" fn ldap_get_valuesA(
    ld: *ldap,
    entry: *LDAPMessage,
    attr: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) *PSTR;

pub extern "WLDAP32" fn ldap_get_values(
    ld: *ldap,
    entry: *LDAPMessage,
    attr: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) *PSTR;

pub extern "WLDAP32" fn ldap_get_values_lenW(
    ExternalHandle: *ldap,
    Message: *LDAPMessage,
    attr: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) **LDAP_BERVAL;

pub extern "WLDAP32" fn ldap_get_values_lenA(
    ExternalHandle: *ldap,
    Message: *LDAPMessage,
    attr: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) **LDAP_BERVAL;

pub extern "WLDAP32" fn ldap_get_values_len(
    ExternalHandle: *ldap,
    Message: *LDAPMessage,
    attr: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) **LDAP_BERVAL;

pub extern "WLDAP32" fn ldap_count_valuesW(
    vals: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_count_valuesA(
    vals: ?*?PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_count_values(
    vals: ?*?PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_count_values_len(
    vals: **LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_value_freeW(
    vals: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_value_freeA(
    vals: ?*?PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_value_free(
    vals: ?*?PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_value_free_len(
    vals: **LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_get_dnW(
    ld: *ldap,
    entry: *LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "WLDAP32" fn ldap_get_dnA(
    ld: *ldap,
    entry: *LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "WLDAP32" fn ldap_get_dn(
    ld: *ldap,
    entry: *LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "WLDAP32" fn ldap_explode_dnW(
    dn: [*:0]const u16,
    notypes: u32,
) callconv(@import("std").os.windows.WINAPI) *PWSTR;

pub extern "WLDAP32" fn ldap_explode_dnA(
    dn: [*:0]const u8,
    notypes: u32,
) callconv(@import("std").os.windows.WINAPI) *PSTR;

pub extern "WLDAP32" fn ldap_explode_dn(
    dn: [*:0]const u8,
    notypes: u32,
) callconv(@import("std").os.windows.WINAPI) *PSTR;

pub extern "WLDAP32" fn ldap_dn2ufnW(
    dn: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "WLDAP32" fn ldap_dn2ufnA(
    dn: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "WLDAP32" fn ldap_dn2ufn(
    dn: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "WLDAP32" fn ldap_memfreeW(
    Block: [*]u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WLDAP32" fn ldap_memfreeA(
    Block: [*]u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WLDAP32" fn ber_bvfree(
    bv: *LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WLDAP32" fn ldap_memfree(
    Block: [*]u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WLDAP32" fn ldap_ufn2dnW(
    ufn: [*:0]const u16,
    pDn: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_ufn2dnA(
    ufn: [*:0]const u8,
    pDn: *PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_ufn2dn(
    ufn: [*:0]const u8,
    pDn: *PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_startup(
    version: *ldap_version_info,
    Instance: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_cleanup(
    hInstance: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_escape_filter_elementW(
    sourceFilterElement: [*]u8,
    sourceLength: u32,
    destFilterElement: ?[*]u16,
    destLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_escape_filter_elementA(
    sourceFilterElement: [*]u8,
    sourceLength: u32,
    destFilterElement: ?[*]u8,
    destLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_escape_filter_element(
    sourceFilterElement: [*]u8,
    sourceLength: u32,
    destFilterElement: ?[*]u8,
    destLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_set_dbg_flags(
    NewFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_set_dbg_routine(
    DebugPrintRoutine: DBGPRINT,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WLDAP32" fn LdapUTF8ToUnicode(
    lpSrcStr: [*:0]const u8,
    cchSrc: i32,
    lpDestStr: [*:0]u16,
    cchDest: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WLDAP32" fn LdapUnicodeToUTF8(
    lpSrcStr: [*:0]const u16,
    cchSrc: i32,
    lpDestStr: [*:0]u8,
    cchDest: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WLDAP32" fn ldap_create_sort_controlA(
    ExternalHandle: *ldap,
    SortKeys: **ldapsortkeyA,
    IsCritical: u8,
    Control: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_create_sort_controlW(
    ExternalHandle: *ldap,
    SortKeys: **ldapsortkeyW,
    IsCritical: u8,
    Control: **ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_parse_sort_controlA(
    ExternalHandle: *ldap,
    Control: **ldapcontrolA,
    Result: *u32,
    Attribute: ?*?PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_parse_sort_controlW(
    ExternalHandle: *ldap,
    Control: **ldapcontrolW,
    Result: *u32,
    Attribute: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_create_sort_control(
    ExternalHandle: *ldap,
    SortKeys: **ldapsortkeyA,
    IsCritical: u8,
    Control: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_parse_sort_control(
    ExternalHandle: *ldap,
    Control: **ldapcontrolA,
    Result: *u32,
    Attribute: *PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_encode_sort_controlW(
    ExternalHandle: *ldap,
    SortKeys: **ldapsortkeyW,
    Control: *ldapcontrolW,
    Criticality: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_encode_sort_controlA(
    ExternalHandle: *ldap,
    SortKeys: **ldapsortkeyA,
    Control: *ldapcontrolA,
    Criticality: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_create_page_controlW(
    ExternalHandle: *ldap,
    PageSize: u32,
    Cookie: *LDAP_BERVAL,
    IsCritical: u8,
    Control: **ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_create_page_controlA(
    ExternalHandle: *ldap,
    PageSize: u32,
    Cookie: *LDAP_BERVAL,
    IsCritical: u8,
    Control: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_parse_page_controlW(
    ExternalHandle: *ldap,
    ServerControls: **ldapcontrolW,
    TotalCount: *u32,
    Cookie: **LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_parse_page_controlA(
    ExternalHandle: *ldap,
    ServerControls: **ldapcontrolA,
    TotalCount: *u32,
    Cookie: **LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_create_page_control(
    ExternalHandle: *ldap,
    PageSize: u32,
    Cookie: *LDAP_BERVAL,
    IsCritical: u8,
    Control: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_parse_page_control(
    ExternalHandle: *ldap,
    ServerControls: **ldapcontrolA,
    TotalCount: *u32,
    Cookie: **LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_search_init_pageW(
    ExternalHandle: *ldap,
    DistinguishedName: [*:0]const u16,
    ScopeOfSearch: u32,
    SearchFilter: [*:0]const u16,
    AttributeList: **u16,
    AttributesOnly: u32,
    ServerControls: **ldapcontrolW,
    ClientControls: **ldapcontrolW,
    PageTimeLimit: u32,
    TotalSizeLimit: u32,
    SortKeys: **ldapsortkeyW,
) callconv(@import("std").os.windows.WINAPI) *ldapsearch;

pub extern "WLDAP32" fn ldap_search_init_pageA(
    ExternalHandle: *ldap,
    DistinguishedName: [*:0]const u8,
    ScopeOfSearch: u32,
    SearchFilter: [*:0]const u8,
    AttributeList: **i8,
    AttributesOnly: u32,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
    PageTimeLimit: u32,
    TotalSizeLimit: u32,
    SortKeys: **ldapsortkeyA,
) callconv(@import("std").os.windows.WINAPI) *ldapsearch;

pub extern "WLDAP32" fn ldap_search_init_page(
    ExternalHandle: *ldap,
    DistinguishedName: [*:0]const u8,
    ScopeOfSearch: u32,
    SearchFilter: [*:0]const u8,
    AttributeList: **i8,
    AttributesOnly: u32,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
    PageTimeLimit: u32,
    TotalSizeLimit: u32,
    SortKeys: **ldapsortkeyA,
) callconv(@import("std").os.windows.WINAPI) *ldapsearch;

pub extern "WLDAP32" fn ldap_get_next_page(
    ExternalHandle: *ldap,
    SearchHandle: *ldapsearch,
    PageSize: u32,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_get_next_page_s(
    ExternalHandle: *ldap,
    SearchHandle: *ldapsearch,
    timeout: *LDAP_TIMEVAL,
    PageSize: u32,
    TotalCount: *u32,
    Results: **LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_get_paged_count(
    ExternalHandle: *ldap,
    SearchBlock: *ldapsearch,
    TotalCount: *u32,
    Results: *LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_search_abandon_page(
    ExternalHandle: *ldap,
    SearchBlock: *ldapsearch,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_create_vlv_controlW(
    ExternalHandle: *ldap,
    VlvInfo: *ldapvlvinfo,
    IsCritical: u8,
    Control: **ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WLDAP32" fn ldap_create_vlv_controlA(
    ExternalHandle: *ldap,
    VlvInfo: *ldapvlvinfo,
    IsCritical: u8,
    Control: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WLDAP32" fn ldap_parse_vlv_controlW(
    ExternalHandle: *ldap,
    Control: **ldapcontrolW,
    TargetPos: *u32,
    ListCount: *u32,
    Context: **LDAP_BERVAL,
    ErrCode: *i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WLDAP32" fn ldap_parse_vlv_controlA(
    ExternalHandle: *ldap,
    Control: **ldapcontrolA,
    TargetPos: *u32,
    ListCount: *u32,
    Context: **LDAP_BERVAL,
    ErrCode: *i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WLDAP32" fn ldap_start_tls_sW(
    ExternalHandle: *ldap,
    ServerReturnValue: *u32,
    result: **LDAPMessage,
    ServerControls: **ldapcontrolW,
    ClientControls: **ldapcontrolW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_start_tls_sA(
    ExternalHandle: *ldap,
    ServerReturnValue: *u32,
    result: **LDAPMessage,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_stop_tls_s(
    ExternalHandle: *ldap,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "WLDAP32" fn ldap_first_reference(
    ld: *ldap,
    res: *LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) *LDAPMessage;

pub extern "WLDAP32" fn ldap_next_reference(
    ld: *ldap,
    entry: *LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) *LDAPMessage;

pub extern "WLDAP32" fn ldap_count_references(
    ld: *ldap,
    res: *LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_parse_referenceW(
    Connection: *ldap,
    ResultMessage: *LDAPMessage,
    Referrals: **PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_parse_referenceA(
    Connection: *ldap,
    ResultMessage: *LDAPMessage,
    Referrals: **PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_parse_reference(
    Connection: *ldap,
    ResultMessage: *LDAPMessage,
    Referrals: **PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_extended_operationW(
    ld: *ldap,
    Oid: [*:0]const u16,
    Data: *LDAP_BERVAL,
    ServerControls: **ldapcontrolW,
    ClientControls: **ldapcontrolW,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_extended_operationA(
    ld: *ldap,
    Oid: [*:0]const u8,
    Data: *LDAP_BERVAL,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_extended_operation_sA(
    ExternalHandle: *ldap,
    Oid: PSTR,
    Data: *LDAP_BERVAL,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
    ReturnedOid: *PSTR,
    ReturnedData: **LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_extended_operation_sW(
    ExternalHandle: *ldap,
    Oid: PWSTR,
    Data: *LDAP_BERVAL,
    ServerControls: **ldapcontrolW,
    ClientControls: **ldapcontrolW,
    ReturnedOid: *PWSTR,
    ReturnedData: **LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_extended_operation(
    ld: *ldap,
    Oid: [*:0]const u8,
    Data: *LDAP_BERVAL,
    ServerControls: **ldapcontrolA,
    ClientControls: **ldapcontrolA,
    MessageNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_close_extended_op(
    ld: *ldap,
    MessageNumber: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn LdapGetLastError(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn LdapMapErrorToWin32(
    LdapError: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ldap_conn_from_msg(
    PrimaryConn: *ldap,
    res: *LDAPMessage,
) callconv(@import("std").os.windows.WINAPI) *ldap;

pub extern "WLDAP32" fn ber_init(
    pBerVal: *LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) *berelement;

pub extern "WLDAP32" fn ber_free(
    pBerElement: *berelement,
    fbuf: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WLDAP32" fn ber_bvecfree(
    pBerVal: **LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WLDAP32" fn ber_bvdup(
    pBerVal: *LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) *LDAP_BERVAL;

pub extern "WLDAP32" fn ber_alloc_t(
    options: i32,
) callconv(@import("std").os.windows.WINAPI) *berelement;

pub extern "WLDAP32" fn ber_skip_tag(
    pBerElement: *berelement,
    pLen: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ber_peek_tag(
    pBerElement: *berelement,
    pLen: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ber_first_element(
    pBerElement: *berelement,
    pLen: *u32,
    ppOpaque: **i8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ber_next_element(
    pBerElement: *berelement,
    pLen: *u32,
    @"opaque": *i8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WLDAP32" fn ber_flatten(
    pBerElement: *berelement,
    pBerVal: **LDAP_BERVAL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WLDAP32" fn ber_printf(
    pBerElement: *berelement,
    fmt: PSTR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WLDAP32" fn ber_scanf(
    pBerElement: *berelement,
    fmt: PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (14)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const ldapcontrol = ldapcontrolA;
        pub const ldapmod = ldapmodA;
        pub const ldapapiinfo = ldapapiinfoA;
        pub const LDAPAPIFeatureInfo = LDAPAPIFeatureInfoA;
        pub const ldapsortkey = ldapsortkeyA;
        pub const ldap_sasl_bind = ldap_sasl_bindA;
        pub const ldap_sasl_bind_s = ldap_sasl_bind_sA;
        pub const ldap_check_filter = ldap_check_filterA;
        pub const ldap_parse_extended_result = ldap_parse_extended_resultA;
        pub const ldap_encode_sort_control = ldap_encode_sort_controlA;
        pub const ldap_create_vlv_control = ldap_create_vlv_controlA;
        pub const ldap_parse_vlv_control = ldap_parse_vlv_controlA;
        pub const ldap_start_tls_s = ldap_start_tls_sA;
        pub const ldap_extended_operation_s = ldap_extended_operation_sA;
    },
    .wide => struct {
        pub const ldapcontrol = ldapcontrolW;
        pub const ldapmod = ldapmodW;
        pub const ldapapiinfo = ldapapiinfoW;
        pub const LDAPAPIFeatureInfo = LDAPAPIFeatureInfoW;
        pub const ldapsortkey = ldapsortkeyW;
        pub const ldap_sasl_bind = ldap_sasl_bindW;
        pub const ldap_sasl_bind_s = ldap_sasl_bind_sW;
        pub const ldap_check_filter = ldap_check_filterW;
        pub const ldap_parse_extended_result = ldap_parse_extended_resultW;
        pub const ldap_encode_sort_control = ldap_encode_sort_controlW;
        pub const ldap_create_vlv_control = ldap_create_vlv_controlW;
        pub const ldap_parse_vlv_control = ldap_parse_vlv_controlW;
        pub const ldap_start_tls_s = ldap_start_tls_sW;
        pub const ldap_extended_operation_s = ldap_extended_operation_sW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const ldapcontrol = *opaque{};
        pub const ldapmod = *opaque{};
        pub const ldapapiinfo = *opaque{};
        pub const LDAPAPIFeatureInfo = *opaque{};
        pub const ldapsortkey = *opaque{};
        pub const ldap_sasl_bind = *opaque{};
        pub const ldap_sasl_bind_s = *opaque{};
        pub const ldap_check_filter = *opaque{};
        pub const ldap_parse_extended_result = *opaque{};
        pub const ldap_encode_sort_control = *opaque{};
        pub const ldap_create_vlv_control = *opaque{};
        pub const ldap_parse_vlv_control = *opaque{};
        pub const ldap_start_tls_s = *opaque{};
        pub const ldap_extended_operation_s = *opaque{};
    } else struct {
        pub const ldapcontrol = @compileError("'ldapcontrol' requires that UNICODE be set to true or false in the root module");
        pub const ldapmod = @compileError("'ldapmod' requires that UNICODE be set to true or false in the root module");
        pub const ldapapiinfo = @compileError("'ldapapiinfo' requires that UNICODE be set to true or false in the root module");
        pub const LDAPAPIFeatureInfo = @compileError("'LDAPAPIFeatureInfo' requires that UNICODE be set to true or false in the root module");
        pub const ldapsortkey = @compileError("'ldapsortkey' requires that UNICODE be set to true or false in the root module");
        pub const ldap_sasl_bind = @compileError("'ldap_sasl_bind' requires that UNICODE be set to true or false in the root module");
        pub const ldap_sasl_bind_s = @compileError("'ldap_sasl_bind_s' requires that UNICODE be set to true or false in the root module");
        pub const ldap_check_filter = @compileError("'ldap_check_filter' requires that UNICODE be set to true or false in the root module");
        pub const ldap_parse_extended_result = @compileError("'ldap_parse_extended_result' requires that UNICODE be set to true or false in the root module");
        pub const ldap_encode_sort_control = @compileError("'ldap_encode_sort_control' requires that UNICODE be set to true or false in the root module");
        pub const ldap_create_vlv_control = @compileError("'ldap_create_vlv_control' requires that UNICODE be set to true or false in the root module");
        pub const ldap_parse_vlv_control = @compileError("'ldap_parse_vlv_control' requires that UNICODE be set to true or false in the root module");
        pub const ldap_start_tls_s = @compileError("'ldap_start_tls_s' requires that UNICODE be set to true or false in the root module");
        pub const ldap_extended_operation_s = @compileError("'ldap_extended_operation_s' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (5)
//--------------------------------------------------------------------------------
const PWSTR = @import("system_services.zig").PWSTR;
const PSTR = @import("system_services.zig").PSTR;
const CERT_CONTEXT = @import("security.zig").CERT_CONTEXT;
const HANDLE = @import("system_services.zig").HANDLE;
const SecPkgContext_IssuerListInfoEx = @import("security.zig").SecPkgContext_IssuerListInfoEx;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = DBGPRINT;
    _ = QUERYFORCONNECTION;
    _ = NOTIFYOFNEWCONNECTION;
    _ = DEREFERENCECONNECTION;
    _ = QUERYCLIENTCERT;
    _ = VERIFYSERVERCERT;

    const constant_export_count = 0;
    const type_export_count = 26;
    const enum_value_export_count = 63;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 243;
    const unicode_alias_count = 14;
    const import_count = 5;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

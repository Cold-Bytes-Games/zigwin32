//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (55)
//--------------------------------------------------------------------------------
pub const WINSTAENUMPROCA = fn(
    param0: PSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const WINSTAENUMPROCW = fn(
    param0: PWSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DESKTOPENUMPROCA = fn(
    param0: PSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DESKTOPENUMPROCW = fn(
    param0: PWSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const DI_FLAGS = extern enum(u32) {
    DI_MASK = 1,
    DI_IMAGE = 2,
    DI_NORMAL = 3,
    DI_COMPAT = 4,
    DI_DEFAULTSIZE = 8,
    DI_NOMIRROR = 16,
};
pub const DI_MASK = DI_FLAGS.DI_MASK;
pub const DI_IMAGE = DI_FLAGS.DI_IMAGE;
pub const DI_NORMAL = DI_FLAGS.DI_NORMAL;
pub const DI_COMPAT = DI_FLAGS.DI_COMPAT;
pub const DI_DEFAULTSIZE = DI_FLAGS.DI_DEFAULTSIZE;
pub const DI_NOMIRROR = DI_FLAGS.DI_NOMIRROR;

pub const WNDPROC = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const WNDENUMPROC = fn(
    param0: HWND,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const NAMEENUMPROCA = fn(
    param0: PSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const NAMEENUMPROCW = fn(
    param0: PWSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const SHELLHOOKINFO = extern struct {
    hwnd: HWND,
    rc: RECT,
};

pub const HARDWAREHOOKSTRUCT = extern struct {
    hwnd: HWND,
    message: u32,
    wParam: WPARAM,
    lParam: LPARAM,
};

pub const MDINEXTMENU = extern struct {
    hmenuIn: HMENU,
    hmenuNext: HMENU,
    hwndNext: HWND,
};

pub const ACCEL = extern struct {
    fVirt: u8,
    key: u16,
    cmd: u16,
};

pub const PREGISTERCLASSNAMEW = fn(
    param0: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u8;

pub const POINTER_INPUT_TYPE = extern enum(i32) {
    PT_POINTER = 1,
    PT_TOUCH = 2,
    PT_PEN = 3,
    PT_MOUSE = 4,
    PT_TOUCHPAD = 5,
};
pub const PT_POINTER = POINTER_INPUT_TYPE.PT_POINTER;
pub const PT_TOUCH = POINTER_INPUT_TYPE.PT_TOUCH;
pub const PT_PEN = POINTER_INPUT_TYPE.PT_PEN;
pub const PT_MOUSE = POINTER_INPUT_TYPE.PT_MOUSE;
pub const PT_TOUCHPAD = POINTER_INPUT_TYPE.PT_TOUCHPAD;

pub const TPMPARAMS = extern struct {
    cbSize: u32,
    rcExclude: RECT,
};

pub const MENUINFO = extern struct {
    cbSize: u32,
    fMask: u32,
    dwStyle: u32,
    cyMax: u32,
    hbrBack: HBRUSH,
    dwContextHelpID: u32,
    dwMenuData: ?*c_void,
};

pub const MENUGETOBJECTINFO = extern struct {
    dwFlags: u32,
    uPos: u32,
    hmenu: HMENU,
    riid: *c_void,
    pvObj: *c_void,
};

pub const MENUITEMINFOA = extern struct {
    cbSize: u32,
    fMask: u32,
    fType: u32,
    fState: u32,
    wID: u32,
    hSubMenu: HMENU,
    hbmpChecked: HBITMAP,
    hbmpUnchecked: HBITMAP,
    dwItemData: ?*c_void,
    dwTypeData: PSTR,
    cch: u32,
    hbmpItem: HBITMAP,
};

pub const MENUITEMINFOW = extern struct {
    cbSize: u32,
    fMask: u32,
    fType: u32,
    fState: u32,
    wID: u32,
    hSubMenu: HMENU,
    hbmpChecked: HBITMAP,
    hbmpUnchecked: HBITMAP,
    dwItemData: ?*c_void,
    dwTypeData: PWSTR,
    cch: u32,
    hbmpItem: HBITMAP,
};

pub const DROPSTRUCT = extern struct {
    hwndSource: HWND,
    hwndSink: HWND,
    wFmt: u32,
    dwData: ?*c_void,
    ptDrop: POINT,
    dwControlData: u32,
};

pub const MSGBOXCALLBACK = fn(
    lpHelpInfo: *HELPINFO,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MENUITEMTEMPLATEHEADER = extern struct {
    versionNumber: u16,
    offset: u16,
};

pub const MENUITEMTEMPLATE = extern struct {
    mtOption: u16,
    mtID: u16,
    mtString: [1]u16,
};

pub const ICONINFO = extern struct {
    fIcon: BOOL,
    xHotspot: u32,
    yHotspot: u32,
    hbmMask: HBITMAP,
    hbmColor: HBITMAP,
};

pub const CURSORSHAPE = extern struct {
    xHotSpot: i32,
    yHotSpot: i32,
    cx: i32,
    cy: i32,
    cbWidth: i32,
    Planes: u8,
    BitsPixel: u8,
};

pub const ICONINFOEXA = extern struct {
    cbSize: u32,
    fIcon: BOOL,
    xHotspot: u32,
    yHotspot: u32,
    hbmMask: HBITMAP,
    hbmColor: HBITMAP,
    wResID: u16,
    szModName: [260]i8,
    szResName: [260]i8,
};

pub const ICONINFOEXW = extern struct {
    cbSize: u32,
    fIcon: BOOL,
    xHotspot: u32,
    yHotspot: u32,
    hbmMask: HBITMAP,
    hbmColor: HBITMAP,
    wResID: u16,
    szModName: [260]u16,
    szResName: [260]u16,
};

pub const EDIT_CONTROL_FEATURE = extern enum(i32) {
    ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0,
    PASTE_NOTIFICATIONS = 1,
};
pub const EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = EDIT_CONTROL_FEATURE.ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT;
pub const EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = EDIT_CONTROL_FEATURE.PASTE_NOTIFICATIONS;

pub const TouchPredictionParameters = extern struct {
    cbSize: u32,
    dwLatency: u32,
    dwSampleTime: u32,
    bUseHWTimeStamp: u32,
};

pub const HANDEDNESS = extern enum(i32) {
    LEFT = 0,
    RIGHT = 1,
};
pub const HANDEDNESS_LEFT = HANDEDNESS.LEFT;
pub const HANDEDNESS_RIGHT = HANDEDNESS.RIGHT;

pub const ICONMETRICSA = extern struct {
    cbSize: u32,
    iHorzSpacing: i32,
    iVertSpacing: i32,
    iTitleWrap: i32,
    lfFont: LOGFONTA,
};

pub const ICONMETRICSW = extern struct {
    cbSize: u32,
    iHorzSpacing: i32,
    iVertSpacing: i32,
    iTitleWrap: i32,
    lfFont: LOGFONTW,
};

pub const CURSORINFO = extern struct {
    cbSize: u32,
    flags: u32,
    hCursor: HCURSOR,
    ptScreenPos: POINT,
};

pub const MENUBARINFO = extern struct {
    cbSize: u32,
    rcBar: RECT,
    hMenu: HMENU,
    hwndMenu: HWND,
    _bitfield: i32,
};

pub const IndexedResourceQualifier = extern struct {
    name: PWSTR,
    value: PWSTR,
};

pub const MrmPlatformVersion = extern enum(i32) {
    Default = 0,
    Windows10_0_0_0 = 17432576,
    Windows10_0_0_5 = 17432581,
};
pub const MrmPlatformVersion_Default = MrmPlatformVersion.Default;
pub const MrmPlatformVersion_Windows10_0_0_0 = MrmPlatformVersion.Windows10_0_0_0;
pub const MrmPlatformVersion_Windows10_0_0_5 = MrmPlatformVersion.Windows10_0_0_5;

pub const MrmResourceIndexerHandle = extern struct {
    handle: *c_void,
};

pub const MrmPackagingMode = extern enum(i32) {
    MrmPackagingModeStandaloneFile = 0,
    MrmPackagingModeAutoSplit = 1,
    MrmPackagingModeResourcePack = 2,
};
pub const MrmPackagingModeStandaloneFile = MrmPackagingMode.MrmPackagingModeStandaloneFile;
pub const MrmPackagingModeAutoSplit = MrmPackagingMode.MrmPackagingModeAutoSplit;
pub const MrmPackagingModeResourcePack = MrmPackagingMode.MrmPackagingModeResourcePack;

pub const MrmPackagingOptions = extern enum(i32) {
    MrmPackagingOptionsNone = 0,
    MrmPackagingOptionsOmitSchemaFromResourcePacks = 1,
    MrmPackagingOptionsSplitLanguageVariants = 2,
};
pub const MrmPackagingOptionsNone = MrmPackagingOptions.MrmPackagingOptionsNone;
pub const MrmPackagingOptionsOmitSchemaFromResourcePacks = MrmPackagingOptions.MrmPackagingOptionsOmitSchemaFromResourcePacks;
pub const MrmPackagingOptionsSplitLanguageVariants = MrmPackagingOptions.MrmPackagingOptionsSplitLanguageVariants;

pub const MrmDumpType = extern enum(i32) {
    Basic = 0,
    Detailed = 1,
    Schema = 2,
};
pub const MrmDumpType_Basic = MrmDumpType.Basic;
pub const MrmDumpType_Detailed = MrmDumpType.Detailed;
pub const MrmDumpType_Schema = MrmDumpType.Schema;

pub const MrmResourceIndexerMessageSeverity = extern enum(i32) {
    MrmResourceIndexerMessageSeverityVerbose = 0,
    MrmResourceIndexerMessageSeverityInfo = 1,
    MrmResourceIndexerMessageSeverityWarning = 2,
    MrmResourceIndexerMessageSeverityError = 3,
};
pub const MrmResourceIndexerMessageSeverityVerbose = MrmResourceIndexerMessageSeverity.MrmResourceIndexerMessageSeverityVerbose;
pub const MrmResourceIndexerMessageSeverityInfo = MrmResourceIndexerMessageSeverity.MrmResourceIndexerMessageSeverityInfo;
pub const MrmResourceIndexerMessageSeverityWarning = MrmResourceIndexerMessageSeverity.MrmResourceIndexerMessageSeverityWarning;
pub const MrmResourceIndexerMessageSeverityError = MrmResourceIndexerMessageSeverity.MrmResourceIndexerMessageSeverityError;

pub const MrmResourceIndexerMessage = extern struct {
    severity: MrmResourceIndexerMessageSeverity,
    id: u32,
    text: [*:0]const u16,
};

// TODO: this type has a FreeFunc 'DestroyAcceleratorTable', what can Zig do with this information?
pub const HACCEL = ?*c_void;

// TODO: this type has a FreeFunc 'DestroyCursor', what can Zig do with this information?
pub const HCURSOR = ?*c_void;

// TODO: this type has a FreeFunc 'DestroyIcon', what can Zig do with this information?
pub const HICON = ?*c_void;

// TODO: this type has a FreeFunc 'DestroyMenu', what can Zig do with this information?
pub const HMENU = ?*c_void;

pub const MESSAGE_RESOURCE_ENTRY = extern struct {
    Length: u16,
    Flags: u16,
    Text: [1]u8,
};

pub const MESSAGE_RESOURCE_BLOCK = extern struct {
    LowId: u32,
    HighId: u32,
    OffsetToEntries: u32,
};

pub const MESSAGE_RESOURCE_DATA = extern struct {
    NumberOfBlocks: u32,
    Blocks: [1]MESSAGE_RESOURCE_BLOCK,
};

pub const ENUMRESNAMEPROCA = fn(
    hModule: ?*c_void,
    lpType: [*:0]const u8,
    lpName: PSTR,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const ENUMRESNAMEPROCW = fn(
    hModule: ?*c_void,
    lpType: [*:0]const u16,
    lpName: PWSTR,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const ENUMRESTYPEPROCA = fn(
    hModule: ?*c_void,
    lpType: PSTR,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const ENUMRESTYPEPROCW = fn(
    hModule: ?*c_void,
    lpType: PWSTR,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const VS_FIXEDFILEINFO = extern struct {
    dwSignature: u32,
    dwStrucVersion: u32,
    dwFileVersionMS: u32,
    dwFileVersionLS: u32,
    dwProductVersionMS: u32,
    dwProductVersionLS: u32,
    dwFileFlagsMask: u32,
    dwFileFlags: u32,
    dwFileOS: u32,
    dwFileType: u32,
    dwFileSubtype: u32,
    dwFileDateMS: u32,
    dwFileDateLS: u32,
};


//--------------------------------------------------------------------------------
// Section: Functions (229)
//--------------------------------------------------------------------------------
pub extern "USER32" fn wvsprintfA(
    param0: PSTR,
    param1: [*:0]const u8,
    arglist: *i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn wvsprintfW(
    param0: PWSTR,
    param1: [*:0]const u16,
    arglist: *i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn wsprintfA(
    param0: PSTR,
    param1: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn wsprintfW(
    param0: PWSTR,
    param1: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn SetMessageQueue(
    cMessagesMax: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn BroadcastSystemMessageA(
    flags: u32,
    lpInfo: ?*u32,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn IsMenu(
    hMenu: HMENU,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn UpdateLayeredWindowIndirect(
    hWnd: HWND,
    pULWInfo: *const UPDATELAYEREDWINDOWINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DefDlgProcA(
    hDlg: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn CharToOemA(
    pSrc: [*:0]const u8,
    pDst: PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CharToOemW(
    pSrc: [*:0]const u16,
    pDst: PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn OemToCharA(
    pSrc: [*:0]const u8,
    pDst: PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn OemToCharW(
    pSrc: [*:0]const u8,
    pDst: PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CharToOemBuffA(
    lpszSrc: [*:0]const u8,
    lpszDst: [*:0]u8,
    cchDstLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CharToOemBuffW(
    lpszSrc: [*:0]const u16,
    lpszDst: [*:0]u8,
    cchDstLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn OemToCharBuffA(
    lpszSrc: [*:0]const u8,
    lpszDst: [*:0]u8,
    cchDstLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn OemToCharBuffW(
    lpszSrc: [*:0]const u8,
    lpszDst: [*:0]u16,
    cchDstLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CharUpperA(
    lpsz: PSTR,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "USER32" fn CharUpperW(
    lpsz: PWSTR,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "USER32" fn CharUpperBuffA(
    lpsz: [*:0]u8,
    cchLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn CharUpperBuffW(
    lpsz: [*:0]u16,
    cchLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn CharLowerA(
    lpsz: PSTR,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "USER32" fn CharLowerW(
    lpsz: PWSTR,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "USER32" fn CharLowerBuffA(
    lpsz: [*:0]u8,
    cchLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn CharLowerBuffW(
    lpsz: [*:0]u16,
    cchLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn CharNextA(
    lpsz: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "USER32" fn CharNextW(
    lpsz: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "USER32" fn CharPrevA(
    lpszStart: [*:0]const u8,
    lpszCurrent: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "USER32" fn CharPrevW(
    lpszStart: [*:0]const u16,
    lpszCurrent: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "USER32" fn CharNextExA(
    CodePage: u16,
    lpCurrentChar: [*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "USER32" fn CharPrevExA(
    CodePage: u16,
    lpStart: [*:0]const u8,
    lpCurrentChar: [*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "USER32" fn IsCharAlphaA(
    ch: i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsCharAlphaW(
    ch: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsCharAlphaNumericA(
    ch: i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsCharAlphaNumericW(
    ch: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsCharUpperA(
    ch: i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsCharUpperW(
    ch: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsCharLowerA(
    ch: i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn LoadAcceleratorsA(
    hInstance: HINSTANCE,
    lpTableName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HACCEL;

pub extern "USER32" fn LoadAcceleratorsW(
    hInstance: HINSTANCE,
    lpTableName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HACCEL;

pub extern "USER32" fn CreateAcceleratorTableA(
    paccel: [*]ACCEL,
    cAccel: i32,
) callconv(@import("std").os.windows.WINAPI) HACCEL;

pub extern "USER32" fn CreateAcceleratorTableW(
    paccel: [*]ACCEL,
    cAccel: i32,
) callconv(@import("std").os.windows.WINAPI) HACCEL;

pub extern "USER32" fn DestroyAcceleratorTable(
    hAccel: HACCEL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CopyAcceleratorTableA(
    hAccelSrc: HACCEL,
    lpAccelDst: ?[*]ACCEL,
    cAccelEntries: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn CopyAcceleratorTableW(
    hAccelSrc: HACCEL,
    lpAccelDst: ?[*]ACCEL,
    cAccelEntries: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn TranslateAcceleratorA(
    hWnd: HWND,
    hAccTable: HACCEL,
    lpMsg: *MSG,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn TranslateAcceleratorW(
    hWnd: HWND,
    hAccTable: HACCEL,
    lpMsg: *MSG,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn LoadMenuA(
    hInstance: HINSTANCE,
    lpMenuName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HMENU;

pub extern "USER32" fn LoadMenuW(
    hInstance: HINSTANCE,
    lpMenuName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HMENU;

pub extern "USER32" fn LoadMenuIndirectA(
    lpMenuTemplate: *const c_void,
) callconv(@import("std").os.windows.WINAPI) HMENU;

pub extern "USER32" fn LoadMenuIndirectW(
    lpMenuTemplate: *const c_void,
) callconv(@import("std").os.windows.WINAPI) HMENU;

pub extern "USER32" fn GetMenu(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HMENU;

pub extern "USER32" fn SetMenu(
    hWnd: HWND,
    hMenu: HMENU,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ChangeMenuA(
    hMenu: HMENU,
    cmd: u32,
    lpszNewItem: ?[*:0]const u8,
    cmdInsert: u32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ChangeMenuW(
    hMenu: HMENU,
    cmd: u32,
    lpszNewItem: ?[*:0]const u16,
    cmdInsert: u32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn HiliteMenuItem(
    hWnd: HWND,
    hMenu: HMENU,
    uIDHiliteItem: u32,
    uHilite: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMenuStringA(
    hMenu: HMENU,
    uIDItem: u32,
    lpString: ?[*:0]u8,
    cchMax: i32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetMenuStringW(
    hMenu: HMENU,
    uIDItem: u32,
    lpString: ?[*:0]u16,
    cchMax: i32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetMenuState(
    hMenu: HMENU,
    uId: u32,
    uFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn DrawMenuBar(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetSystemMenu(
    hWnd: HWND,
    bRevert: BOOL,
) callconv(@import("std").os.windows.WINAPI) HMENU;

pub extern "USER32" fn CreateMenu(
) callconv(@import("std").os.windows.WINAPI) HMENU;

pub extern "USER32" fn CreatePopupMenu(
) callconv(@import("std").os.windows.WINAPI) HMENU;

pub extern "USER32" fn DestroyMenu(
    hMenu: HMENU,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CheckMenuItem(
    hMenu: HMENU,
    uIDCheckItem: u32,
    uCheck: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn EnableMenuItem(
    hMenu: HMENU,
    uIDEnableItem: u32,
    uEnable: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetSubMenu(
    hMenu: HMENU,
    nPos: i32,
) callconv(@import("std").os.windows.WINAPI) HMENU;

pub extern "USER32" fn GetMenuItemID(
    hMenu: HMENU,
    nPos: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetMenuItemCount(
    hMenu: HMENU,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn InsertMenuA(
    hMenu: HMENU,
    uPosition: u32,
    uFlags: u32,
    uIDNewItem: ?*c_void,
    lpNewItem: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn InsertMenuW(
    hMenu: HMENU,
    uPosition: u32,
    uFlags: u32,
    uIDNewItem: ?*c_void,
    lpNewItem: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn AppendMenuA(
    hMenu: HMENU,
    uFlags: u32,
    uIDNewItem: ?*c_void,
    lpNewItem: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn AppendMenuW(
    hMenu: HMENU,
    uFlags: u32,
    uIDNewItem: ?*c_void,
    lpNewItem: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ModifyMenuA(
    hMnu: HMENU,
    uPosition: u32,
    uFlags: u32,
    uIDNewItem: ?*c_void,
    lpNewItem: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ModifyMenuW(
    hMnu: HMENU,
    uPosition: u32,
    uFlags: u32,
    uIDNewItem: ?*c_void,
    lpNewItem: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn RemoveMenu(
    hMenu: HMENU,
    uPosition: u32,
    uFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DeleteMenu(
    hMenu: HMENU,
    uPosition: u32,
    uFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetMenuItemBitmaps(
    hMenu: HMENU,
    uPosition: u32,
    uFlags: u32,
    hBitmapUnchecked: HBITMAP,
    hBitmapChecked: HBITMAP,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMenuCheckMarkDimensions(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn TrackPopupMenu(
    hMenu: HMENU,
    uFlags: u32,
    x: i32,
    y: i32,
    nReserved: i32,
    hWnd: HWND,
    prcRect: *const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn TrackPopupMenuEx(
    hMenu: HMENU,
    uFlags: u32,
    x: i32,
    y: i32,
    hwnd: HWND,
    lptpm: ?*TPMPARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMenuInfo(
    param0: HMENU,
    param1: *MENUINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetMenuInfo(
    param0: HMENU,
    param1: *MENUINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn EndMenu(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn InsertMenuItemA(
    hmenu: HMENU,
    item: u32,
    fByPosition: BOOL,
    lpmi: *MENUITEMINFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn InsertMenuItemW(
    hmenu: HMENU,
    item: u32,
    fByPosition: BOOL,
    lpmi: *MENUITEMINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMenuItemInfoA(
    hmenu: HMENU,
    item: u32,
    fByPosition: BOOL,
    lpmii: *MENUITEMINFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMenuItemInfoW(
    hmenu: HMENU,
    item: u32,
    fByPosition: BOOL,
    lpmii: *MENUITEMINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetMenuItemInfoA(
    hmenu: HMENU,
    item: u32,
    fByPositon: BOOL,
    lpmii: *MENUITEMINFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetMenuItemInfoW(
    hmenu: HMENU,
    item: u32,
    fByPositon: BOOL,
    lpmii: *MENUITEMINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMenuDefaultItem(
    hMenu: HMENU,
    fByPos: u32,
    gmdiFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn SetMenuDefaultItem(
    hMenu: HMENU,
    uItem: u32,
    fByPos: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMenuItemRect(
    hWnd: HWND,
    hMenu: HMENU,
    uItem: u32,
    lprcItem: *RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn MenuItemFromPoint(
    hWnd: HWND,
    hMenu: HMENU,
    ptScreen: POINT,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn DragObject(
    hwndParent: HWND,
    hwndFrom: HWND,
    fmt: u32,
    data: ?*c_void,
    hcur: HCURSOR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn DrawIcon(
    hDC: HDC,
    X: i32,
    Y: i32,
    hIcon: HICON,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ShowCursor(
    bShow: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn SetCursorPos(
    X: i32,
    Y: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetPhysicalCursorPos(
    X: i32,
    Y: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetCursor(
    hCursor: HCURSOR,
) callconv(@import("std").os.windows.WINAPI) HCURSOR;

pub extern "USER32" fn GetCursorPos(
    lpPoint: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetPhysicalCursorPos(
    lpPoint: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetClipCursor(
    lpRect: *RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetCursor(
) callconv(@import("std").os.windows.WINAPI) HCURSOR;

pub extern "USER32" fn CreateCaret(
    hWnd: HWND,
    hBitmap: HBITMAP,
    nWidth: i32,
    nHeight: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetCaretBlinkTime(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn SetCaretBlinkTime(
    uMSeconds: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DestroyCaret(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn HideCaret(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ShowCaret(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetCaretPos(
    X: i32,
    Y: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetCaretPos(
    lpPoint: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ClipCursor(
    lpRect: ?*const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetWindowWord(
    hWnd: HWND,
    nIndex: i32,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn SetWindowWord(
    hWnd: HWND,
    nIndex: i32,
    wNewWord: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn SetWindowsHookA(
    nFilterType: i32,
    pfnFilterProc: HOOKPROC,
) callconv(@import("std").os.windows.WINAPI) HHOOK;

pub extern "USER32" fn SetWindowsHookW(
    nFilterType: i32,
    pfnFilterProc: HOOKPROC,
) callconv(@import("std").os.windows.WINAPI) HHOOK;

pub extern "USER32" fn UnhookWindowsHook(
    nCode: i32,
    pfnFilterProc: HOOKPROC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CheckMenuRadioItem(
    hmenu: HMENU,
    first: u32,
    last: u32,
    check: u32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn LoadCursorA(
    hInstance: HINSTANCE,
    lpCursorName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HCURSOR;

pub extern "USER32" fn LoadCursorW(
    hInstance: HINSTANCE,
    lpCursorName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HCURSOR;

pub extern "USER32" fn LoadCursorFromFileA(
    lpFileName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HCURSOR;

pub extern "USER32" fn LoadCursorFromFileW(
    lpFileName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HCURSOR;

pub extern "USER32" fn CreateCursor(
    hInst: HINSTANCE,
    xHotSpot: i32,
    yHotSpot: i32,
    nWidth: i32,
    nHeight: i32,
    pvANDPlane: *const c_void,
    pvXORPlane: *const c_void,
) callconv(@import("std").os.windows.WINAPI) HCURSOR;

pub extern "USER32" fn DestroyCursor(
    hCursor: HCURSOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetSystemCursor(
    hcur: HCURSOR,
    id: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn LoadIconA(
    hInstance: HINSTANCE,
    lpIconName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "USER32" fn LoadIconW(
    hInstance: HINSTANCE,
    lpIconName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "USER32" fn PrivateExtractIconsA(
    szFileName: *[260]u8,
    nIconIndex: i32,
    cxIcon: i32,
    cyIcon: i32,
    phicon: ?[*]HICON,
    piconid: ?[*]u32,
    nIcons: u32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn PrivateExtractIconsW(
    szFileName: *[260]u16,
    nIconIndex: i32,
    cxIcon: i32,
    cyIcon: i32,
    phicon: ?[*]HICON,
    piconid: ?[*]u32,
    nIcons: u32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn CreateIcon(
    hInstance: HINSTANCE,
    nWidth: i32,
    nHeight: i32,
    cPlanes: u8,
    cBitsPixel: u8,
    lpbANDbits: *const u8,
    lpbXORbits: *const u8,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "USER32" fn DestroyIcon(
    hIcon: HICON,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn LookupIconIdFromDirectory(
    presbits: *u8,
    fIcon: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn LookupIconIdFromDirectoryEx(
    presbits: *u8,
    fIcon: BOOL,
    cxDesired: i32,
    cyDesired: i32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn CreateIconFromResource(
    presbits: [*:0]u8,
    dwResSize: u32,
    fIcon: BOOL,
    dwVer: u32,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "USER32" fn CreateIconFromResourceEx(
    presbits: [*:0]u8,
    dwResSize: u32,
    fIcon: BOOL,
    dwVer: u32,
    cxDesired: i32,
    cyDesired: i32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "USER32" fn LoadImageA(
    hInst: HINSTANCE,
    name: [*:0]const u8,
    type: u32,
    cx: i32,
    cy: i32,
    fuLoad: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "USER32" fn LoadImageW(
    hInst: HINSTANCE,
    name: [*:0]const u16,
    type: u32,
    cx: i32,
    cy: i32,
    fuLoad: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "USER32" fn CopyImage(
    h: HANDLE,
    type: u32,
    cx: i32,
    cy: i32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "USER32" fn DrawIconEx(
    hdc: HDC,
    xLeft: i32,
    yTop: i32,
    hIcon: HICON,
    cxWidth: i32,
    cyWidth: i32,
    istepIfAniCur: u32,
    hbrFlickerFreeDraw: HBRUSH,
    diFlags: DI_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CreateIconIndirect(
    piconinfo: *ICONINFO,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "USER32" fn CopyIcon(
    hIcon: HICON,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "USER32" fn GetIconInfo(
    hIcon: HICON,
    piconinfo: *ICONINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetIconInfoExA(
    hicon: HICON,
    piconinfo: *ICONINFOEXA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetIconInfoExW(
    hicon: HICON,
    piconinfo: *ICONINFOEXW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetDebugErrorLevel(
    dwLevel: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "USER32" fn CancelShutdown(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn InheritWindowMonitor(
    hwnd: HWND,
    hwndInherit: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetDpiAwarenessContextForProcess(
    hProcess: HANDLE,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn GetCursorInfo(
    pci: *CURSORINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMenuBarInfo(
    hwnd: HWND,
    idObject: i32,
    idItem: i32,
    pmbi: *MENUBARINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn RealGetWindowClassA(
    hwnd: HWND,
    ptszClassName: [*:0]u8,
    cchClassNameMax: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn VerFindFileA(
    uFlags: u32,
    szFileName: [*:0]const u8,
    szWinDir: ?[*:0]const u8,
    szAppDir: [*:0]const u8,
    szCurDir: [*:0]u8,
    puCurDirLen: *u32,
    szDestDir: [*:0]u8,
    puDestDirLen: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn VerFindFileW(
    uFlags: u32,
    szFileName: [*:0]const u16,
    szWinDir: ?[*:0]const u16,
    szAppDir: [*:0]const u16,
    szCurDir: [*:0]u16,
    puCurDirLen: *u32,
    szDestDir: [*:0]u16,
    puDestDirLen: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn VerInstallFileA(
    uFlags: u32,
    szSrcFileName: [*:0]const u8,
    szDestFileName: [*:0]const u8,
    szSrcDir: [*:0]const u8,
    szDestDir: [*:0]const u8,
    szCurDir: [*:0]const u8,
    szTmpFile: [*:0]u8,
    puTmpFileLen: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn VerInstallFileW(
    uFlags: u32,
    szSrcFileName: [*:0]const u16,
    szDestFileName: [*:0]const u16,
    szSrcDir: [*:0]const u16,
    szDestDir: [*:0]const u16,
    szCurDir: [*:0]const u16,
    szTmpFile: [*:0]u16,
    puTmpFileLen: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn GetFileVersionInfoSizeA(
    lptstrFilename: [*:0]const u8,
    lpdwHandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn GetFileVersionInfoSizeW(
    lptstrFilename: [*:0]const u16,
    lpdwHandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn GetFileVersionInfoA(
    lptstrFilename: [*:0]const u8,
    dwHandle: u32,
    dwLen: u32,
    lpData: [*]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "VERSION" fn GetFileVersionInfoW(
    lptstrFilename: [*:0]const u16,
    dwHandle: u32,
    dwLen: u32,
    lpData: [*]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "VERSION" fn GetFileVersionInfoSizeExA(
    dwFlags: u32,
    lpwstrFilename: [*:0]const u8,
    lpdwHandle: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn GetFileVersionInfoSizeExW(
    dwFlags: u32,
    lpwstrFilename: [*:0]const u16,
    lpdwHandle: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn GetFileVersionInfoExA(
    dwFlags: u32,
    lpwstrFilename: [*:0]const u8,
    dwHandle: u32,
    dwLen: u32,
    lpData: [*]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "VERSION" fn GetFileVersionInfoExW(
    dwFlags: u32,
    lpwstrFilename: [*:0]const u16,
    dwHandle: u32,
    dwLen: u32,
    lpData: [*]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn VerLanguageNameA(
    wLang: u32,
    szLang: [*:0]u8,
    cchLang: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "KERNEL32" fn VerLanguageNameW(
    wLang: u32,
    szLang: [*:0]u16,
    cchLang: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn VerQueryValueA(
    pBlock: *const c_void,
    lpSubBlock: [*:0]const u8,
    lplpBuffer: **c_void,
    puLen: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "VERSION" fn VerQueryValueW(
    pBlock: *const c_void,
    lpSubBlock: [*:0]const u16,
    lplpBuffer: **c_void,
    puLen: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MrmSupport" fn CreateResourceIndexer(
    projectRoot: [*:0]const u16,
    extensionDllPath: ?[*:0]const u16,
    ppResourceIndexer: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn DestroyResourceIndexer(
    resourceIndexer: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MrmSupport" fn IndexFilePath(
    resourceIndexer: *c_void,
    filePath: [*:0]const u16,
    ppResourceUri: *PWSTR,
    pQualifierCount: *u32,
    ppQualifiers: [*]*IndexedResourceQualifier,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn DestroyIndexedResults(
    resourceUri: ?PWSTR,
    qualifierCount: u32,
    qualifiers: ?[*]IndexedResourceQualifier,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MrmSupport" fn MrmCreateResourceIndexer(
    packageFamilyName: ?[*:0]const u16,
    projectRoot: [*:0]const u16,
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    indexer: *MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmCreateResourceIndexerFromPreviousSchemaFile(
    projectRoot: [*:0]const u16,
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    schemaFile: [*:0]const u16,
    indexer: *MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmCreateResourceIndexerFromPreviousPriFile(
    projectRoot: [*:0]const u16,
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    priFile: [*:0]const u16,
    indexer: *MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmCreateResourceIndexerFromPreviousSchemaData(
    projectRoot: [*:0]const u16,
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    schemaXmlData: [*:0]u8,
    schemaXmlSize: u32,
    indexer: *MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmCreateResourceIndexerFromPreviousPriData(
    projectRoot: [*:0]const u16,
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    priData: [*:0]u8,
    priSize: u32,
    indexer: *MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmIndexString(
    indexer: MrmResourceIndexerHandle,
    resourceUri: [*:0]const u16,
    resourceString: [*:0]const u16,
    qualifiers: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmIndexEmbeddedData(
    indexer: MrmResourceIndexerHandle,
    resourceUri: [*:0]const u16,
    embeddedData: [*:0]const u8,
    embeddedDataSize: u32,
    qualifiers: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmIndexFile(
    indexer: MrmResourceIndexerHandle,
    resourceUri: [*:0]const u16,
    filePath: [*:0]const u16,
    qualifiers: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmIndexFileAutoQualifiers(
    indexer: MrmResourceIndexerHandle,
    filePath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmIndexResourceContainerAutoQualifiers(
    indexer: MrmResourceIndexerHandle,
    containerPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmCreateResourceFile(
    indexer: MrmResourceIndexerHandle,
    packagingMode: MrmPackagingMode,
    packagingOptions: MrmPackagingOptions,
    outputDirectory: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmCreateResourceFileInMemory(
    indexer: MrmResourceIndexerHandle,
    packagingMode: MrmPackagingMode,
    packagingOptions: MrmPackagingOptions,
    outputPriData: **u8,
    outputPriSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmPeekResourceIndexerMessages(
    handle: MrmResourceIndexerHandle,
    messages: [*]*MrmResourceIndexerMessage,
    numMsgs: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmDestroyIndexerAndMessages(
    indexer: MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmFreeMemory(
    data: *u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmDumpPriFile(
    indexFileName: [*:0]const u16,
    schemaPriFile: ?[*:0]const u16,
    dumpType: MrmDumpType,
    outputXmlFile: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmDumpPriFileInMemory(
    indexFileName: [*:0]const u16,
    schemaPriFile: ?[*:0]const u16,
    dumpType: MrmDumpType,
    outputXmlData: **u8,
    outputXmlSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmDumpPriDataInMemory(
    inputPriData: [*:0]u8,
    inputPriSize: u32,
    schemaPriData: ?[*:0]u8,
    schemaPriSize: u32,
    dumpType: MrmDumpType,
    outputXmlData: **u8,
    outputXmlSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmCreateConfig(
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    outputXmlFile: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmCreateConfigInMemory(
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    outputXmlData: **u8,
    outputXmlSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "KERNEL32" fn FreeResource(
    hResData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn LoadResource(
    hModule: ?*c_void,
    hResInfo: HRSRC,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn LoadStringA(
    hInstance: HINSTANCE,
    uID: u32,
    lpBuffer: [*:0]u8,
    cchBufferMax: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn LoadStringW(
    hInstance: HINSTANCE,
    uID: u32,
    lpBuffer: [*:0]u16,
    cchBufferMax: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn LockResource(
    hResData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "KERNEL32" fn SizeofResource(
    hModule: ?*c_void,
    hResInfo: HRSRC,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "KERNEL32" fn EnumResourceLanguagesExA(
    hModule: ?*c_void,
    lpType: [*:0]const u8,
    lpName: [*:0]const u8,
    lpEnumFunc: ENUMRESLANGPROCA,
    lParam: ?*c_void,
    dwFlags: u32,
    LangId: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumResourceLanguagesExW(
    hModule: ?*c_void,
    lpType: [*:0]const u16,
    lpName: [*:0]const u16,
    lpEnumFunc: ENUMRESLANGPROCW,
    lParam: ?*c_void,
    dwFlags: u32,
    LangId: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumResourceNamesExA(
    hModule: ?*c_void,
    lpType: [*:0]const u8,
    lpEnumFunc: ENUMRESNAMEPROCA,
    lParam: ?*c_void,
    dwFlags: u32,
    LangId: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumResourceNamesExW(
    hModule: ?*c_void,
    lpType: [*:0]const u16,
    lpEnumFunc: ENUMRESNAMEPROCW,
    lParam: ?*c_void,
    dwFlags: u32,
    LangId: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumResourceTypesExA(
    hModule: ?*c_void,
    lpEnumFunc: ENUMRESTYPEPROCA,
    lParam: ?*c_void,
    dwFlags: u32,
    LangId: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumResourceTypesExW(
    hModule: ?*c_void,
    lpEnumFunc: ENUMRESTYPEPROCW,
    lParam: ?*c_void,
    dwFlags: u32,
    LangId: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn lstrcmpA(
    lpString1: [*:0]const u8,
    lpString2: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn lstrcmpW(
    lpString1: [*:0]const u16,
    lpString2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn lstrcmpiA(
    lpString1: [*:0]const u8,
    lpString2: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn lstrcmpiW(
    lpString1: [*:0]const u16,
    lpString2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn lstrcpynA(
    lpString1: [*:0]u8,
    lpString2: [*:0]const u8,
    iMaxLength: i32,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "KERNEL32" fn lstrcpynW(
    lpString1: [*:0]u16,
    lpString2: [*:0]const u16,
    iMaxLength: i32,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "KERNEL32" fn lstrcpyA(
    lpString1: PSTR,
    lpString2: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "KERNEL32" fn lstrcpyW(
    lpString1: PWSTR,
    lpString2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "KERNEL32" fn lstrcatA(
    lpString1: PSTR,
    lpString2: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "KERNEL32" fn lstrcatW(
    lpString1: PWSTR,
    lpString2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "KERNEL32" fn lstrlenA(
    lpString: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn lstrlenW(
    lpString: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn FindResourceA(
    hModule: ?*c_void,
    lpName: [*:0]const u8,
    lpType: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HRSRC;

pub extern "KERNEL32" fn FindResourceExA(
    hModule: ?*c_void,
    lpType: [*:0]const u8,
    lpName: [*:0]const u8,
    wLanguage: u16,
) callconv(@import("std").os.windows.WINAPI) HRSRC;

pub extern "KERNEL32" fn EnumResourceTypesA(
    hModule: ?*c_void,
    lpEnumFunc: ENUMRESTYPEPROCA,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumResourceTypesW(
    hModule: ?*c_void,
    lpEnumFunc: ENUMRESTYPEPROCW,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumResourceNamesA(
    hModule: ?*c_void,
    lpType: [*:0]const u8,
    lpEnumFunc: ENUMRESNAMEPROCA,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumResourceLanguagesA(
    hModule: ?*c_void,
    lpType: [*:0]const u8,
    lpName: [*:0]const u8,
    lpEnumFunc: ENUMRESLANGPROCA,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumResourceLanguagesW(
    hModule: ?*c_void,
    lpType: [*:0]const u16,
    lpName: [*:0]const u16,
    lpEnumFunc: ENUMRESLANGPROCW,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn BeginUpdateResourceA(
    pFileName: [*:0]const u8,
    bDeleteExistingResources: BOOL,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "KERNEL32" fn BeginUpdateResourceW(
    pFileName: [*:0]const u16,
    bDeleteExistingResources: BOOL,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "KERNEL32" fn UpdateResourceA(
    hUpdate: HANDLE,
    lpType: [*:0]const u8,
    lpName: [*:0]const u8,
    wLanguage: u16,
    lpData: ?[*]u8,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn UpdateResourceW(
    hUpdate: HANDLE,
    lpType: [*:0]const u16,
    lpName: [*:0]const u16,
    wLanguage: u16,
    lpData: ?[*]u8,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EndUpdateResourceA(
    hUpdate: HANDLE,
    fDiscard: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EndUpdateResourceW(
    hUpdate: HANDLE,
    fDiscard: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (67)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const WINSTAENUMPROC = WINSTAENUMPROCA;
        pub const DESKTOPENUMPROC = DESKTOPENUMPROCA;
        pub const NAMEENUMPROC = NAMEENUMPROCA;
        pub const MENUITEMINFO = MENUITEMINFOA;
        pub const ICONINFOEX = ICONINFOEXA;
        pub const ICONMETRICS = ICONMETRICSA;
        pub const ENUMRESNAMEPROC = ENUMRESNAMEPROCA;
        pub const ENUMRESTYPEPROC = ENUMRESTYPEPROCA;
        pub const wvsprintf = wvsprintfA;
        pub const wsprintf = wsprintfA;
        pub const CharToOem = CharToOemA;
        pub const OemToChar = OemToCharA;
        pub const CharToOemBuff = CharToOemBuffA;
        pub const OemToCharBuff = OemToCharBuffA;
        pub const CharUpper = CharUpperA;
        pub const CharUpperBuff = CharUpperBuffA;
        pub const CharLower = CharLowerA;
        pub const CharLowerBuff = CharLowerBuffA;
        pub const CharNext = CharNextA;
        pub const CharPrev = CharPrevA;
        pub const IsCharAlpha = IsCharAlphaA;
        pub const IsCharAlphaNumeric = IsCharAlphaNumericA;
        pub const IsCharUpper = IsCharUpperA;
        pub const LoadAccelerators = LoadAcceleratorsA;
        pub const CreateAcceleratorTable = CreateAcceleratorTableA;
        pub const CopyAcceleratorTable = CopyAcceleratorTableA;
        pub const TranslateAccelerator = TranslateAcceleratorA;
        pub const LoadMenu = LoadMenuA;
        pub const LoadMenuIndirect = LoadMenuIndirectA;
        pub const ChangeMenu = ChangeMenuA;
        pub const GetMenuString = GetMenuStringA;
        pub const InsertMenu = InsertMenuA;
        pub const AppendMenu = AppendMenuA;
        pub const ModifyMenu = ModifyMenuA;
        pub const InsertMenuItem = InsertMenuItemA;
        pub const GetMenuItemInfo = GetMenuItemInfoA;
        pub const SetMenuItemInfo = SetMenuItemInfoA;
        pub const SetWindowsHook = SetWindowsHookA;
        pub const LoadCursor = LoadCursorA;
        pub const LoadCursorFromFile = LoadCursorFromFileA;
        pub const LoadIcon = LoadIconA;
        pub const PrivateExtractIcons = PrivateExtractIconsA;
        pub const LoadImage = LoadImageA;
        pub const GetIconInfoEx = GetIconInfoExA;
        pub const VerFindFile = VerFindFileA;
        pub const VerInstallFile = VerInstallFileA;
        pub const GetFileVersionInfoSize = GetFileVersionInfoSizeA;
        pub const GetFileVersionInfo = GetFileVersionInfoA;
        pub const GetFileVersionInfoSizeEx = GetFileVersionInfoSizeExA;
        pub const GetFileVersionInfoEx = GetFileVersionInfoExA;
        pub const VerLanguageName = VerLanguageNameA;
        pub const VerQueryValue = VerQueryValueA;
        pub const LoadString = LoadStringA;
        pub const EnumResourceLanguagesEx = EnumResourceLanguagesExA;
        pub const EnumResourceNamesEx = EnumResourceNamesExA;
        pub const EnumResourceTypesEx = EnumResourceTypesExA;
        pub const lstrcmp = lstrcmpA;
        pub const lstrcmpi = lstrcmpiA;
        pub const lstrcpyn = lstrcpynA;
        pub const lstrcpy = lstrcpyA;
        pub const lstrcat = lstrcatA;
        pub const lstrlen = lstrlenA;
        pub const EnumResourceTypes = EnumResourceTypesA;
        pub const EnumResourceLanguages = EnumResourceLanguagesA;
        pub const BeginUpdateResource = BeginUpdateResourceA;
        pub const UpdateResource = UpdateResourceA;
        pub const EndUpdateResource = EndUpdateResourceA;
    },
    .wide => struct {
        pub const WINSTAENUMPROC = WINSTAENUMPROCW;
        pub const DESKTOPENUMPROC = DESKTOPENUMPROCW;
        pub const NAMEENUMPROC = NAMEENUMPROCW;
        pub const MENUITEMINFO = MENUITEMINFOW;
        pub const ICONINFOEX = ICONINFOEXW;
        pub const ICONMETRICS = ICONMETRICSW;
        pub const ENUMRESNAMEPROC = ENUMRESNAMEPROCW;
        pub const ENUMRESTYPEPROC = ENUMRESTYPEPROCW;
        pub const wvsprintf = wvsprintfW;
        pub const wsprintf = wsprintfW;
        pub const CharToOem = CharToOemW;
        pub const OemToChar = OemToCharW;
        pub const CharToOemBuff = CharToOemBuffW;
        pub const OemToCharBuff = OemToCharBuffW;
        pub const CharUpper = CharUpperW;
        pub const CharUpperBuff = CharUpperBuffW;
        pub const CharLower = CharLowerW;
        pub const CharLowerBuff = CharLowerBuffW;
        pub const CharNext = CharNextW;
        pub const CharPrev = CharPrevW;
        pub const IsCharAlpha = IsCharAlphaW;
        pub const IsCharAlphaNumeric = IsCharAlphaNumericW;
        pub const IsCharUpper = IsCharUpperW;
        pub const LoadAccelerators = LoadAcceleratorsW;
        pub const CreateAcceleratorTable = CreateAcceleratorTableW;
        pub const CopyAcceleratorTable = CopyAcceleratorTableW;
        pub const TranslateAccelerator = TranslateAcceleratorW;
        pub const LoadMenu = LoadMenuW;
        pub const LoadMenuIndirect = LoadMenuIndirectW;
        pub const ChangeMenu = ChangeMenuW;
        pub const GetMenuString = GetMenuStringW;
        pub const InsertMenu = InsertMenuW;
        pub const AppendMenu = AppendMenuW;
        pub const ModifyMenu = ModifyMenuW;
        pub const InsertMenuItem = InsertMenuItemW;
        pub const GetMenuItemInfo = GetMenuItemInfoW;
        pub const SetMenuItemInfo = SetMenuItemInfoW;
        pub const SetWindowsHook = SetWindowsHookW;
        pub const LoadCursor = LoadCursorW;
        pub const LoadCursorFromFile = LoadCursorFromFileW;
        pub const LoadIcon = LoadIconW;
        pub const PrivateExtractIcons = PrivateExtractIconsW;
        pub const LoadImage = LoadImageW;
        pub const GetIconInfoEx = GetIconInfoExW;
        pub const VerFindFile = VerFindFileW;
        pub const VerInstallFile = VerInstallFileW;
        pub const GetFileVersionInfoSize = GetFileVersionInfoSizeW;
        pub const GetFileVersionInfo = GetFileVersionInfoW;
        pub const GetFileVersionInfoSizeEx = GetFileVersionInfoSizeExW;
        pub const GetFileVersionInfoEx = GetFileVersionInfoExW;
        pub const VerLanguageName = VerLanguageNameW;
        pub const VerQueryValue = VerQueryValueW;
        pub const LoadString = LoadStringW;
        pub const EnumResourceLanguagesEx = EnumResourceLanguagesExW;
        pub const EnumResourceNamesEx = EnumResourceNamesExW;
        pub const EnumResourceTypesEx = EnumResourceTypesExW;
        pub const lstrcmp = lstrcmpW;
        pub const lstrcmpi = lstrcmpiW;
        pub const lstrcpyn = lstrcpynW;
        pub const lstrcpy = lstrcpyW;
        pub const lstrcat = lstrcatW;
        pub const lstrlen = lstrlenW;
        pub const EnumResourceTypes = EnumResourceTypesW;
        pub const EnumResourceLanguages = EnumResourceLanguagesW;
        pub const BeginUpdateResource = BeginUpdateResourceW;
        pub const UpdateResource = UpdateResourceW;
        pub const EndUpdateResource = EndUpdateResourceW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const WINSTAENUMPROC = *opaque{};
        pub const DESKTOPENUMPROC = *opaque{};
        pub const NAMEENUMPROC = *opaque{};
        pub const MENUITEMINFO = *opaque{};
        pub const ICONINFOEX = *opaque{};
        pub const ICONMETRICS = *opaque{};
        pub const ENUMRESNAMEPROC = *opaque{};
        pub const ENUMRESTYPEPROC = *opaque{};
        pub const wvsprintf = *opaque{};
        pub const wsprintf = *opaque{};
        pub const CharToOem = *opaque{};
        pub const OemToChar = *opaque{};
        pub const CharToOemBuff = *opaque{};
        pub const OemToCharBuff = *opaque{};
        pub const CharUpper = *opaque{};
        pub const CharUpperBuff = *opaque{};
        pub const CharLower = *opaque{};
        pub const CharLowerBuff = *opaque{};
        pub const CharNext = *opaque{};
        pub const CharPrev = *opaque{};
        pub const IsCharAlpha = *opaque{};
        pub const IsCharAlphaNumeric = *opaque{};
        pub const IsCharUpper = *opaque{};
        pub const LoadAccelerators = *opaque{};
        pub const CreateAcceleratorTable = *opaque{};
        pub const CopyAcceleratorTable = *opaque{};
        pub const TranslateAccelerator = *opaque{};
        pub const LoadMenu = *opaque{};
        pub const LoadMenuIndirect = *opaque{};
        pub const ChangeMenu = *opaque{};
        pub const GetMenuString = *opaque{};
        pub const InsertMenu = *opaque{};
        pub const AppendMenu = *opaque{};
        pub const ModifyMenu = *opaque{};
        pub const InsertMenuItem = *opaque{};
        pub const GetMenuItemInfo = *opaque{};
        pub const SetMenuItemInfo = *opaque{};
        pub const SetWindowsHook = *opaque{};
        pub const LoadCursor = *opaque{};
        pub const LoadCursorFromFile = *opaque{};
        pub const LoadIcon = *opaque{};
        pub const PrivateExtractIcons = *opaque{};
        pub const LoadImage = *opaque{};
        pub const GetIconInfoEx = *opaque{};
        pub const VerFindFile = *opaque{};
        pub const VerInstallFile = *opaque{};
        pub const GetFileVersionInfoSize = *opaque{};
        pub const GetFileVersionInfo = *opaque{};
        pub const GetFileVersionInfoSizeEx = *opaque{};
        pub const GetFileVersionInfoEx = *opaque{};
        pub const VerLanguageName = *opaque{};
        pub const VerQueryValue = *opaque{};
        pub const LoadString = *opaque{};
        pub const EnumResourceLanguagesEx = *opaque{};
        pub const EnumResourceNamesEx = *opaque{};
        pub const EnumResourceTypesEx = *opaque{};
        pub const lstrcmp = *opaque{};
        pub const lstrcmpi = *opaque{};
        pub const lstrcpyn = *opaque{};
        pub const lstrcpy = *opaque{};
        pub const lstrcat = *opaque{};
        pub const lstrlen = *opaque{};
        pub const EnumResourceTypes = *opaque{};
        pub const EnumResourceLanguages = *opaque{};
        pub const BeginUpdateResource = *opaque{};
        pub const UpdateResource = *opaque{};
        pub const EndUpdateResource = *opaque{};
    } else struct {
        pub const WINSTAENUMPROC = @compileError("'WINSTAENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const DESKTOPENUMPROC = @compileError("'DESKTOPENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const NAMEENUMPROC = @compileError("'NAMEENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const MENUITEMINFO = @compileError("'MENUITEMINFO' requires that UNICODE be set to true or false in the root module");
        pub const ICONINFOEX = @compileError("'ICONINFOEX' requires that UNICODE be set to true or false in the root module");
        pub const ICONMETRICS = @compileError("'ICONMETRICS' requires that UNICODE be set to true or false in the root module");
        pub const ENUMRESNAMEPROC = @compileError("'ENUMRESNAMEPROC' requires that UNICODE be set to true or false in the root module");
        pub const ENUMRESTYPEPROC = @compileError("'ENUMRESTYPEPROC' requires that UNICODE be set to true or false in the root module");
        pub const wvsprintf = @compileError("'wvsprintf' requires that UNICODE be set to true or false in the root module");
        pub const wsprintf = @compileError("'wsprintf' requires that UNICODE be set to true or false in the root module");
        pub const CharToOem = @compileError("'CharToOem' requires that UNICODE be set to true or false in the root module");
        pub const OemToChar = @compileError("'OemToChar' requires that UNICODE be set to true or false in the root module");
        pub const CharToOemBuff = @compileError("'CharToOemBuff' requires that UNICODE be set to true or false in the root module");
        pub const OemToCharBuff = @compileError("'OemToCharBuff' requires that UNICODE be set to true or false in the root module");
        pub const CharUpper = @compileError("'CharUpper' requires that UNICODE be set to true or false in the root module");
        pub const CharUpperBuff = @compileError("'CharUpperBuff' requires that UNICODE be set to true or false in the root module");
        pub const CharLower = @compileError("'CharLower' requires that UNICODE be set to true or false in the root module");
        pub const CharLowerBuff = @compileError("'CharLowerBuff' requires that UNICODE be set to true or false in the root module");
        pub const CharNext = @compileError("'CharNext' requires that UNICODE be set to true or false in the root module");
        pub const CharPrev = @compileError("'CharPrev' requires that UNICODE be set to true or false in the root module");
        pub const IsCharAlpha = @compileError("'IsCharAlpha' requires that UNICODE be set to true or false in the root module");
        pub const IsCharAlphaNumeric = @compileError("'IsCharAlphaNumeric' requires that UNICODE be set to true or false in the root module");
        pub const IsCharUpper = @compileError("'IsCharUpper' requires that UNICODE be set to true or false in the root module");
        pub const LoadAccelerators = @compileError("'LoadAccelerators' requires that UNICODE be set to true or false in the root module");
        pub const CreateAcceleratorTable = @compileError("'CreateAcceleratorTable' requires that UNICODE be set to true or false in the root module");
        pub const CopyAcceleratorTable = @compileError("'CopyAcceleratorTable' requires that UNICODE be set to true or false in the root module");
        pub const TranslateAccelerator = @compileError("'TranslateAccelerator' requires that UNICODE be set to true or false in the root module");
        pub const LoadMenu = @compileError("'LoadMenu' requires that UNICODE be set to true or false in the root module");
        pub const LoadMenuIndirect = @compileError("'LoadMenuIndirect' requires that UNICODE be set to true or false in the root module");
        pub const ChangeMenu = @compileError("'ChangeMenu' requires that UNICODE be set to true or false in the root module");
        pub const GetMenuString = @compileError("'GetMenuString' requires that UNICODE be set to true or false in the root module");
        pub const InsertMenu = @compileError("'InsertMenu' requires that UNICODE be set to true or false in the root module");
        pub const AppendMenu = @compileError("'AppendMenu' requires that UNICODE be set to true or false in the root module");
        pub const ModifyMenu = @compileError("'ModifyMenu' requires that UNICODE be set to true or false in the root module");
        pub const InsertMenuItem = @compileError("'InsertMenuItem' requires that UNICODE be set to true or false in the root module");
        pub const GetMenuItemInfo = @compileError("'GetMenuItemInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetMenuItemInfo = @compileError("'SetMenuItemInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetWindowsHook = @compileError("'SetWindowsHook' requires that UNICODE be set to true or false in the root module");
        pub const LoadCursor = @compileError("'LoadCursor' requires that UNICODE be set to true or false in the root module");
        pub const LoadCursorFromFile = @compileError("'LoadCursorFromFile' requires that UNICODE be set to true or false in the root module");
        pub const LoadIcon = @compileError("'LoadIcon' requires that UNICODE be set to true or false in the root module");
        pub const PrivateExtractIcons = @compileError("'PrivateExtractIcons' requires that UNICODE be set to true or false in the root module");
        pub const LoadImage = @compileError("'LoadImage' requires that UNICODE be set to true or false in the root module");
        pub const GetIconInfoEx = @compileError("'GetIconInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const VerFindFile = @compileError("'VerFindFile' requires that UNICODE be set to true or false in the root module");
        pub const VerInstallFile = @compileError("'VerInstallFile' requires that UNICODE be set to true or false in the root module");
        pub const GetFileVersionInfoSize = @compileError("'GetFileVersionInfoSize' requires that UNICODE be set to true or false in the root module");
        pub const GetFileVersionInfo = @compileError("'GetFileVersionInfo' requires that UNICODE be set to true or false in the root module");
        pub const GetFileVersionInfoSizeEx = @compileError("'GetFileVersionInfoSizeEx' requires that UNICODE be set to true or false in the root module");
        pub const GetFileVersionInfoEx = @compileError("'GetFileVersionInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const VerLanguageName = @compileError("'VerLanguageName' requires that UNICODE be set to true or false in the root module");
        pub const VerQueryValue = @compileError("'VerQueryValue' requires that UNICODE be set to true or false in the root module");
        pub const LoadString = @compileError("'LoadString' requires that UNICODE be set to true or false in the root module");
        pub const EnumResourceLanguagesEx = @compileError("'EnumResourceLanguagesEx' requires that UNICODE be set to true or false in the root module");
        pub const EnumResourceNamesEx = @compileError("'EnumResourceNamesEx' requires that UNICODE be set to true or false in the root module");
        pub const EnumResourceTypesEx = @compileError("'EnumResourceTypesEx' requires that UNICODE be set to true or false in the root module");
        pub const lstrcmp = @compileError("'lstrcmp' requires that UNICODE be set to true or false in the root module");
        pub const lstrcmpi = @compileError("'lstrcmpi' requires that UNICODE be set to true or false in the root module");
        pub const lstrcpyn = @compileError("'lstrcpyn' requires that UNICODE be set to true or false in the root module");
        pub const lstrcpy = @compileError("'lstrcpy' requires that UNICODE be set to true or false in the root module");
        pub const lstrcat = @compileError("'lstrcat' requires that UNICODE be set to true or false in the root module");
        pub const lstrlen = @compileError("'lstrlen' requires that UNICODE be set to true or false in the root module");
        pub const EnumResourceTypes = @compileError("'EnumResourceTypes' requires that UNICODE be set to true or false in the root module");
        pub const EnumResourceLanguages = @compileError("'EnumResourceLanguages' requires that UNICODE be set to true or false in the root module");
        pub const BeginUpdateResource = @compileError("'BeginUpdateResource' requires that UNICODE be set to true or false in the root module");
        pub const UpdateResource = @compileError("'UpdateResource' requires that UNICODE be set to true or false in the root module");
        pub const EndUpdateResource = @compileError("'EndUpdateResource' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (25)
//--------------------------------------------------------------------------------
const LPARAM = @import("windows_and_messaging.zig").LPARAM;
const MSG = @import("windows_and_messaging.zig").MSG;
const PWSTR = @import("system_services.zig").PWSTR;
const HINSTANCE = @import("system_services.zig").HINSTANCE;
const HDC = @import("gdi.zig").HDC;
const HHOOK = @import("windows_and_messaging.zig").HHOOK;
const HRESULT = @import("com.zig").HRESULT;
const LOGFONTW = @import("shell.zig").LOGFONTW;
const HBITMAP = @import("gdi.zig").HBITMAP;
const PSTR = @import("system_services.zig").PSTR;
const RECT = @import("display_devices.zig").RECT;
const HELPINFO = @import("shell.zig").HELPINFO;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const WPARAM = @import("windows_and_messaging.zig").WPARAM;
const LRESULT = @import("system_services.zig").LRESULT;
const HBRUSH = @import("gdi.zig").HBRUSH;
const HOOKPROC = @import("windows_and_messaging.zig").HOOKPROC;
const ENUMRESLANGPROCA = @import("system_services.zig").ENUMRESLANGPROCA;
const ENUMRESLANGPROCW = @import("system_services.zig").ENUMRESLANGPROCW;
const POINT = @import("display_devices.zig").POINT;
const HANDLE = @import("system_services.zig").HANDLE;
const LOGFONTA = @import("shell.zig").LOGFONTA;
const HRSRC = @import("system_services.zig").HRSRC;
const UPDATELAYEREDWINDOWINFO = @import("windows_and_messaging.zig").UPDATELAYEREDWINDOWINFO;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = WINSTAENUMPROCA;
    _ = WINSTAENUMPROCW;
    _ = DESKTOPENUMPROCA;
    _ = DESKTOPENUMPROCW;
    _ = WNDPROC;
    _ = WNDENUMPROC;
    _ = NAMEENUMPROCA;
    _ = NAMEENUMPROCW;
    _ = PREGISTERCLASSNAMEW;
    _ = MSGBOXCALLBACK;
    _ = ENUMRESNAMEPROCA;
    _ = ENUMRESNAMEPROCW;
    _ = ENUMRESTYPEPROCA;
    _ = ENUMRESTYPEPROCW;

    const constant_export_count = 0;
    const type_export_count = 55;
    const enum_value_export_count = 31;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 229;
    const unicode_alias_count = 67;
    const import_count = 25;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

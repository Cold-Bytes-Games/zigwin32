//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (2917)
//--------------------------------------------------------------------------------
pub const MCI_TEST : i32 = 32;
pub const MCI_CAPTURE : u32 = 2160;
pub const MCI_MONITOR : u32 = 2161;
pub const MCI_RESERVE : u32 = 2162;
pub const MCI_SETAUDIO : u32 = 2163;
pub const MCI_SIGNAL : u32 = 2165;
pub const MCI_SETVIDEO : u32 = 2166;
pub const MCI_QUALITY : u32 = 2167;
pub const MCI_LIST : u32 = 2168;
pub const MCI_UNDO : u32 = 2169;
pub const MCI_CONFIGURE : u32 = 2170;
pub const MCI_RESTORE : u32 = 2171;
pub const MCI_ON : u32 = 1;
pub const MCI_OFF : u32 = 0;
pub const MCI_DGV_FILE_MODE_SAVING : u32 = 1;
pub const MCI_DGV_FILE_MODE_LOADING : u32 = 2;
pub const MCI_DGV_FILE_MODE_EDITING : u32 = 3;
pub const MCI_DGV_FILE_MODE_IDLE : u32 = 4;
pub const MCI_ON_S : i32 = 32768;
pub const MCI_OFF_S : i32 = 32769;
pub const MCI_DGV_FILE_S : i32 = 32770;
pub const MCI_DGV_INPUT_S : i32 = 32771;
pub const MCI_DGV_FILE_MODE_SAVING_S : i32 = 32772;
pub const MCI_DGV_FILE_MODE_LOADING_S : i32 = 32773;
pub const MCI_DGV_FILE_MODE_EDITING_S : i32 = 32774;
pub const MCI_DGV_FILE_MODE_IDLE_S : i32 = 32775;
pub const MCI_DGV_SETVIDEO_SRC_NTSC_S : i32 = 32784;
pub const MCI_DGV_SETVIDEO_SRC_RGB_S : i32 = 32785;
pub const MCI_DGV_SETVIDEO_SRC_SVIDEO_S : i32 = 32786;
pub const MCI_DGV_SETVIDEO_SRC_PAL_S : i32 = 32787;
pub const MCI_DGV_SETVIDEO_SRC_SECAM_S : i32 = 32788;
pub const MCI_DGV_SETVIDEO_SRC_GENERIC_S : i32 = 32789;
pub const MCI_DGV_SETAUDIO_SRC_LEFT_S : i32 = 32800;
pub const MCI_DGV_SETAUDIO_SRC_RIGHT_S : i32 = 32801;
pub const MCI_DGV_SETAUDIO_SRC_AVERAGE_S : i32 = 32802;
pub const MCI_DGV_SETAUDIO_SRC_STEREO_S : i32 = 32803;
pub const MM_MCISIGNAL : u32 = 971;
pub const MCI_DGV_METHOD_PRE : i32 = 40960;
pub const MCI_DGV_METHOD_POST : i32 = 40961;
pub const MCI_DGV_METHOD_DIRECT : i32 = 40962;
pub const MCI_DGV_FF_AVSS : i32 = 16384;
pub const MCI_DGV_FF_AVI : i32 = 16385;
pub const MCI_DGV_FF_DIB : i32 = 16386;
pub const MCI_DGV_FF_RDIB : i32 = 16387;
pub const MCI_DGV_FF_JPEG : i32 = 16388;
pub const MCI_DGV_FF_RJPEG : i32 = 16389;
pub const MCI_DGV_FF_JFIF : i32 = 16390;
pub const MCI_DGV_FF_MPEG : i32 = 16391;
pub const MCI_DGV_GETDEVCAPS_CAN_LOCK : i32 = 16384;
pub const MCI_DGV_GETDEVCAPS_CAN_STRETCH : i32 = 16385;
pub const MCI_DGV_GETDEVCAPS_CAN_FREEZE : i32 = 16386;
pub const MCI_DGV_GETDEVCAPS_MAX_WINDOWS : i32 = 16387;
pub const MCI_DGV_GETDEVCAPS_CAN_REVERSE : i32 = 16388;
pub const MCI_DGV_GETDEVCAPS_HAS_STILL : i32 = 16389;
pub const MCI_DGV_GETDEVCAPS_PALETTES : i32 = 16390;
pub const MCI_DGV_GETDEVCAPS_CAN_STR_IN : i32 = 16392;
pub const MCI_DGV_GETDEVCAPS_CAN_TEST : i32 = 16393;
pub const MCI_DGV_GETDEVCAPS_MAXIMUM_RATE : i32 = 16394;
pub const MCI_DGV_GETDEVCAPS_MINIMUM_RATE : i32 = 16395;
pub const MCI_DGV_CAPTURE_AS : i32 = 65536;
pub const MCI_DGV_CAPTURE_AT : i32 = 131072;
pub const MCI_DGV_COPY_AT : i32 = 65536;
pub const MCI_DGV_COPY_AUDIO_STREAM : i32 = 131072;
pub const MCI_DGV_COPY_VIDEO_STREAM : i32 = 262144;
pub const MCI_DGV_CUE_INPUT : i32 = 65536;
pub const MCI_DGV_CUE_OUTPUT : i32 = 131072;
pub const MCI_DGV_CUE_NOSHOW : i32 = 262144;
pub const MCI_DGV_CUT_AT : i32 = 65536;
pub const MCI_DGV_CUT_AUDIO_STREAM : i32 = 131072;
pub const MCI_DGV_CUT_VIDEO_STREAM : i32 = 262144;
pub const MCI_DGV_DELETE_AT : i32 = 65536;
pub const MCI_DGV_DELETE_AUDIO_STREAM : i32 = 131072;
pub const MCI_DGV_DELETE_VIDEO_STREAM : i32 = 262144;
pub const MCI_DGV_FREEZE_AT : i32 = 65536;
pub const MCI_DGV_FREEZE_OUTSIDE : i32 = 131072;
pub const MCI_DGV_INFO_TEXT : i32 = 65536;
pub const MCI_DGV_INFO_ITEM : i32 = 131072;
pub const MCI_INFO_VERSION : i32 = 1024;
pub const MCI_DGV_INFO_USAGE : i32 = 16384;
pub const MCI_DGV_INFO_AUDIO_QUALITY : i32 = 16385;
pub const MCI_DGV_INFO_STILL_QUALITY : i32 = 16386;
pub const MCI_DGV_INFO_VIDEO_QUALITY : i32 = 16387;
pub const MCI_DGV_INFO_AUDIO_ALG : i32 = 16388;
pub const MCI_DGV_INFO_STILL_ALG : i32 = 16389;
pub const MCI_DGV_INFO_VIDEO_ALG : i32 = 16390;
pub const MCI_DGV_LIST_ITEM : i32 = 65536;
pub const MCI_DGV_LIST_COUNT : i32 = 131072;
pub const MCI_DGV_LIST_NUMBER : i32 = 262144;
pub const MCI_DGV_LIST_ALG : i32 = 524288;
pub const MCI_DGV_LIST_AUDIO_ALG : i32 = 16384;
pub const MCI_DGV_LIST_AUDIO_QUALITY : i32 = 16385;
pub const MCI_DGV_LIST_AUDIO_STREAM : i32 = 16386;
pub const MCI_DGV_LIST_STILL_ALG : i32 = 16387;
pub const MCI_DGV_LIST_STILL_QUALITY : i32 = 16388;
pub const MCI_DGV_LIST_VIDEO_ALG : i32 = 16389;
pub const MCI_DGV_LIST_VIDEO_QUALITY : i32 = 16390;
pub const MCI_DGV_LIST_VIDEO_STREAM : i32 = 16391;
pub const MCI_DGV_LIST_VIDEO_SOURCE : i32 = 16392;
pub const MCI_DGV_MONITOR_METHOD : i32 = 65536;
pub const MCI_DGV_MONITOR_SOURCE : i32 = 131072;
pub const MCI_DGV_MONITOR_INPUT : i32 = 16384;
pub const MCI_DGV_MONITOR_FILE : i32 = 16385;
pub const MCI_DGV_OPEN_WS : i32 = 65536;
pub const MCI_DGV_OPEN_PARENT : i32 = 131072;
pub const MCI_DGV_OPEN_NOSTATIC : i32 = 262144;
pub const MCI_DGV_OPEN_16BIT : i32 = 524288;
pub const MCI_DGV_OPEN_32BIT : i32 = 1048576;
pub const MCI_DGV_PASTE_AT : i32 = 65536;
pub const MCI_DGV_PASTE_AUDIO_STREAM : i32 = 131072;
pub const MCI_DGV_PASTE_VIDEO_STREAM : i32 = 262144;
pub const MCI_DGV_PASTE_INSERT : i32 = 524288;
pub const MCI_DGV_PASTE_OVERWRITE : i32 = 1048576;
pub const MCI_DGV_PLAY_REPEAT : i32 = 65536;
pub const MCI_DGV_PLAY_REVERSE : i32 = 131072;
pub const MCI_DGV_RECT : i32 = 65536;
pub const MCI_DGV_PUT_SOURCE : i32 = 131072;
pub const MCI_DGV_PUT_DESTINATION : i32 = 262144;
pub const MCI_DGV_PUT_FRAME : i32 = 524288;
pub const MCI_DGV_PUT_VIDEO : i32 = 1048576;
pub const MCI_DGV_PUT_WINDOW : i32 = 2097152;
pub const MCI_DGV_PUT_CLIENT : i32 = 4194304;
pub const MCI_QUALITY_ITEM : i32 = 65536;
pub const MCI_QUALITY_NAME : i32 = 131072;
pub const MCI_QUALITY_ALG : i32 = 262144;
pub const MCI_QUALITY_DIALOG : i32 = 524288;
pub const MCI_QUALITY_HANDLE : i32 = 1048576;
pub const MCI_QUALITY_ITEM_AUDIO : i32 = 16384;
pub const MCI_QUALITY_ITEM_STILL : i32 = 16385;
pub const MCI_QUALITY_ITEM_VIDEO : i32 = 16386;
pub const MCI_DGV_REALIZE_NORM : i32 = 65536;
pub const MCI_DGV_REALIZE_BKGD : i32 = 131072;
pub const MCI_DGV_RECORD_HOLD : i32 = 131072;
pub const MCI_DGV_RECORD_AUDIO_STREAM : i32 = 262144;
pub const MCI_DGV_RECORD_VIDEO_STREAM : i32 = 524288;
pub const MCI_DGV_RESERVE_IN : i32 = 65536;
pub const MCI_DGV_RESERVE_SIZE : i32 = 131072;
pub const MCI_DGV_RESTORE_FROM : i32 = 65536;
pub const MCI_DGV_RESTORE_AT : i32 = 131072;
pub const MCI_DGV_SAVE_ABORT : i32 = 131072;
pub const MCI_DGV_SAVE_KEEPRESERVE : i32 = 262144;
pub const MCI_DGV_SET_SEEK_EXACTLY : i32 = 65536;
pub const MCI_DGV_SET_SPEED : i32 = 131072;
pub const MCI_DGV_SET_STILL : i32 = 262144;
pub const MCI_DGV_SET_FILEFORMAT : i32 = 524288;
pub const MCI_DGV_SETAUDIO_OVER : i32 = 65536;
pub const MCI_DGV_SETAUDIO_CLOCKTIME : i32 = 131072;
pub const MCI_DGV_SETAUDIO_ALG : i32 = 262144;
pub const MCI_DGV_SETAUDIO_QUALITY : i32 = 524288;
pub const MCI_DGV_SETAUDIO_RECORD : i32 = 1048576;
pub const MCI_DGV_SETAUDIO_LEFT : i32 = 2097152;
pub const MCI_DGV_SETAUDIO_RIGHT : i32 = 4194304;
pub const MCI_DGV_SETAUDIO_ITEM : i32 = 8388608;
pub const MCI_DGV_SETAUDIO_VALUE : i32 = 16777216;
pub const MCI_DGV_SETAUDIO_INPUT : i32 = 33554432;
pub const MCI_DGV_SETAUDIO_OUTPUT : i32 = 67108864;
pub const MCI_DGV_SETAUDIO_TREBLE : i32 = 16384;
pub const MCI_DGV_SETAUDIO_BASS : i32 = 16385;
pub const MCI_DGV_SETAUDIO_VOLUME : i32 = 16386;
pub const MCI_DGV_SETAUDIO_STREAM : i32 = 16387;
pub const MCI_DGV_SETAUDIO_SOURCE : i32 = 16388;
pub const MCI_DGV_SETAUDIO_SAMPLESPERSEC : i32 = 16389;
pub const MCI_DGV_SETAUDIO_AVGBYTESPERSEC : i32 = 16390;
pub const MCI_DGV_SETAUDIO_BLOCKALIGN : i32 = 16391;
pub const MCI_DGV_SETAUDIO_BITSPERSAMPLE : i32 = 16392;
pub const MCI_DGV_SETAUDIO_SOURCE_STEREO : i32 = 0;
pub const MCI_DGV_SETAUDIO_SOURCE_LEFT : i32 = 1;
pub const MCI_DGV_SETAUDIO_SOURCE_RIGHT : i32 = 2;
pub const MCI_DGV_SETAUDIO_SOURCE_AVERAGE : i32 = 16384;
pub const MCI_DGV_SETVIDEO_QUALITY : i32 = 65536;
pub const MCI_DGV_SETVIDEO_ALG : i32 = 131072;
pub const MCI_DGV_SETVIDEO_CLOCKTIME : i32 = 262144;
pub const MCI_DGV_SETVIDEO_SRC_NUMBER : i32 = 524288;
pub const MCI_DGV_SETVIDEO_ITEM : i32 = 1048576;
pub const MCI_DGV_SETVIDEO_OVER : i32 = 2097152;
pub const MCI_DGV_SETVIDEO_RECORD : i32 = 4194304;
pub const MCI_DGV_SETVIDEO_STILL : i32 = 8388608;
pub const MCI_DGV_SETVIDEO_VALUE : i32 = 16777216;
pub const MCI_DGV_SETVIDEO_INPUT : i32 = 33554432;
pub const MCI_DGV_SETVIDEO_OUTPUT : i32 = 67108864;
pub const MCI_DGV_SETVIDEO_SRC_NTSC : i32 = 16384;
pub const MCI_DGV_SETVIDEO_SRC_RGB : i32 = 16385;
pub const MCI_DGV_SETVIDEO_SRC_SVIDEO : i32 = 16386;
pub const MCI_DGV_SETVIDEO_SRC_PAL : i32 = 16387;
pub const MCI_DGV_SETVIDEO_SRC_SECAM : i32 = 16388;
pub const MCI_DGV_SETVIDEO_SRC_GENERIC : i32 = 16389;
pub const MCI_DGV_SETVIDEO_BRIGHTNESS : i32 = 16384;
pub const MCI_DGV_SETVIDEO_COLOR : i32 = 16385;
pub const MCI_DGV_SETVIDEO_CONTRAST : i32 = 16386;
pub const MCI_DGV_SETVIDEO_TINT : i32 = 16387;
pub const MCI_DGV_SETVIDEO_SHARPNESS : i32 = 16388;
pub const MCI_DGV_SETVIDEO_GAMMA : i32 = 16389;
pub const MCI_DGV_SETVIDEO_STREAM : i32 = 16390;
pub const MCI_DGV_SETVIDEO_PALHANDLE : i32 = 16391;
pub const MCI_DGV_SETVIDEO_FRAME_RATE : i32 = 16392;
pub const MCI_DGV_SETVIDEO_SOURCE : i32 = 16393;
pub const MCI_DGV_SETVIDEO_KEY_INDEX : i32 = 16394;
pub const MCI_DGV_SETVIDEO_KEY_COLOR : i32 = 16395;
pub const MCI_DGV_SETVIDEO_BITSPERPEL : i32 = 16396;
pub const MCI_DGV_SIGNAL_AT : i32 = 65536;
pub const MCI_DGV_SIGNAL_EVERY : i32 = 131072;
pub const MCI_DGV_SIGNAL_USERVAL : i32 = 262144;
pub const MCI_DGV_SIGNAL_CANCEL : i32 = 524288;
pub const MCI_DGV_SIGNAL_POSITION : i32 = 1048576;
pub const MCI_DGV_STATUS_NOMINAL : i32 = 131072;
pub const MCI_DGV_STATUS_REFERENCE : i32 = 262144;
pub const MCI_DGV_STATUS_LEFT : i32 = 524288;
pub const MCI_DGV_STATUS_RIGHT : i32 = 1048576;
pub const MCI_DGV_STATUS_DISKSPACE : i32 = 2097152;
pub const MCI_DGV_STATUS_INPUT : i32 = 4194304;
pub const MCI_DGV_STATUS_OUTPUT : i32 = 8388608;
pub const MCI_DGV_STATUS_RECORD : i32 = 16777216;
pub const MCI_DGV_STATUS_AUDIO_INPUT : i32 = 16384;
pub const MCI_DGV_STATUS_HWND : i32 = 16385;
pub const MCI_DGV_STATUS_SPEED : i32 = 16387;
pub const MCI_DGV_STATUS_HPAL : i32 = 16388;
pub const MCI_DGV_STATUS_BRIGHTNESS : i32 = 16389;
pub const MCI_DGV_STATUS_COLOR : i32 = 16390;
pub const MCI_DGV_STATUS_CONTRAST : i32 = 16391;
pub const MCI_DGV_STATUS_FILEFORMAT : i32 = 16392;
pub const MCI_DGV_STATUS_AUDIO_SOURCE : i32 = 16393;
pub const MCI_DGV_STATUS_GAMMA : i32 = 16394;
pub const MCI_DGV_STATUS_MONITOR : i32 = 16395;
pub const MCI_DGV_STATUS_MONITOR_METHOD : i32 = 16396;
pub const MCI_DGV_STATUS_FRAME_RATE : i32 = 16398;
pub const MCI_DGV_STATUS_BASS : i32 = 16399;
pub const MCI_DGV_STATUS_SIZE : i32 = 16400;
pub const MCI_DGV_STATUS_SEEK_EXACTLY : i32 = 16401;
pub const MCI_DGV_STATUS_SHARPNESS : i32 = 16402;
pub const MCI_DGV_STATUS_SMPTE : i32 = 16403;
pub const MCI_DGV_STATUS_AUDIO : i32 = 16404;
pub const MCI_DGV_STATUS_TINT : i32 = 16405;
pub const MCI_DGV_STATUS_TREBLE : i32 = 16406;
pub const MCI_DGV_STATUS_UNSAVED : i32 = 16407;
pub const MCI_DGV_STATUS_VIDEO : i32 = 16408;
pub const MCI_DGV_STATUS_VOLUME : i32 = 16409;
pub const MCI_DGV_STATUS_AUDIO_RECORD : i32 = 16410;
pub const MCI_DGV_STATUS_VIDEO_SOURCE : i32 = 16411;
pub const MCI_DGV_STATUS_VIDEO_RECORD : i32 = 16412;
pub const MCI_DGV_STATUS_STILL_FILEFORMAT : i32 = 16413;
pub const MCI_DGV_STATUS_VIDEO_SRC_NUM : i32 = 16414;
pub const MCI_DGV_STATUS_FILE_MODE : i32 = 16415;
pub const MCI_DGV_STATUS_FILE_COMPLETION : i32 = 16416;
pub const MCI_DGV_STATUS_WINDOW_VISIBLE : i32 = 16417;
pub const MCI_DGV_STATUS_WINDOW_MINIMIZED : i32 = 16418;
pub const MCI_DGV_STATUS_WINDOW_MAXIMIZED : i32 = 16419;
pub const MCI_DGV_STATUS_KEY_INDEX : i32 = 16420;
pub const MCI_DGV_STATUS_KEY_COLOR : i32 = 16421;
pub const MCI_DGV_STATUS_PAUSE_MODE : i32 = 16422;
pub const MCI_DGV_STATUS_SAMPLESPERSEC : i32 = 16423;
pub const MCI_DGV_STATUS_AVGBYTESPERSEC : i32 = 16424;
pub const MCI_DGV_STATUS_BLOCKALIGN : i32 = 16425;
pub const MCI_DGV_STATUS_BITSPERSAMPLE : i32 = 16426;
pub const MCI_DGV_STATUS_BITSPERPEL : i32 = 16427;
pub const MCI_DGV_STATUS_FORWARD : i32 = 16428;
pub const MCI_DGV_STATUS_AUDIO_STREAM : i32 = 16429;
pub const MCI_DGV_STATUS_VIDEO_STREAM : i32 = 16430;
pub const MCI_DGV_STEP_REVERSE : i32 = 65536;
pub const MCI_DGV_STEP_FRAMES : i32 = 131072;
pub const MCI_DGV_STOP_HOLD : i32 = 65536;
pub const MCI_DGV_UPDATE_HDC : i32 = 131072;
pub const MCI_DGV_UPDATE_PAINT : i32 = 262144;
pub const MCI_DGV_WHERE_SOURCE : i32 = 131072;
pub const MCI_DGV_WHERE_DESTINATION : i32 = 262144;
pub const MCI_DGV_WHERE_FRAME : i32 = 524288;
pub const MCI_DGV_WHERE_VIDEO : i32 = 1048576;
pub const MCI_DGV_WHERE_WINDOW : i32 = 2097152;
pub const MCI_DGV_WHERE_MAX : i32 = 4194304;
pub const MCI_DGV_WINDOW_HWND : i32 = 65536;
pub const MCI_DGV_WINDOW_STATE : i32 = 262144;
pub const MCI_DGV_WINDOW_TEXT : i32 = 524288;
pub const MCI_DGV_WINDOW_DEFAULT : i32 = 0;
pub const MM_MICROSOFT : u32 = 1;
pub const MM_CREATIVE : u32 = 2;
pub const MM_MEDIAVISION : u32 = 3;
pub const MM_FUJITSU : u32 = 4;
pub const MM_PRAGMATRAX : u32 = 5;
pub const MM_CYRIX : u32 = 6;
pub const MM_PHILIPS_SPEECH_PROCESSING : u32 = 7;
pub const MM_NETXL : u32 = 8;
pub const MM_ZYXEL : u32 = 9;
pub const MM_BECUBED : u32 = 10;
pub const MM_AARDVARK : u32 = 11;
pub const MM_BINTEC : u32 = 12;
pub const MM_HEWLETT_PACKARD : u32 = 13;
pub const MM_ACULAB : u32 = 14;
pub const MM_FAITH : u32 = 15;
pub const MM_MITEL : u32 = 16;
pub const MM_QUANTUM3D : u32 = 17;
pub const MM_SNI : u32 = 18;
pub const MM_EMU : u32 = 19;
pub const MM_ARTISOFT : u32 = 20;
pub const MM_TURTLE_BEACH : u32 = 21;
pub const MM_IBM : u32 = 22;
pub const MM_VOCALTEC : u32 = 23;
pub const MM_ROLAND : u32 = 24;
pub const MM_DSP_SOLUTIONS : u32 = 25;
pub const MM_NEC : u32 = 26;
pub const MM_ATI : u32 = 27;
pub const MM_WANGLABS : u32 = 28;
pub const MM_TANDY : u32 = 29;
pub const MM_VOYETRA : u32 = 30;
pub const MM_ANTEX : u32 = 31;
pub const MM_ICL_PS : u32 = 32;
pub const MM_INTEL : u32 = 33;
pub const MM_GRAVIS : u32 = 34;
pub const MM_VAL : u32 = 35;
pub const MM_INTERACTIVE : u32 = 36;
pub const MM_YAMAHA : u32 = 37;
pub const MM_EVEREX : u32 = 38;
pub const MM_ECHO : u32 = 39;
pub const MM_SIERRA : u32 = 40;
pub const MM_CAT : u32 = 41;
pub const MM_APPS : u32 = 42;
pub const MM_DSP_GROUP : u32 = 43;
pub const MM_MELABS : u32 = 44;
pub const MM_COMPUTER_FRIENDS : u32 = 45;
pub const MM_ESS : u32 = 46;
pub const MM_AUDIOFILE : u32 = 47;
pub const MM_MOTOROLA : u32 = 48;
pub const MM_CANOPUS : u32 = 49;
pub const MM_EPSON : u32 = 50;
pub const MM_TRUEVISION : u32 = 51;
pub const MM_AZTECH : u32 = 52;
pub const MM_VIDEOLOGIC : u32 = 53;
pub const MM_SCALACS : u32 = 54;
pub const MM_KORG : u32 = 55;
pub const MM_APT : u32 = 56;
pub const MM_ICS : u32 = 57;
pub const MM_ITERATEDSYS : u32 = 58;
pub const MM_METHEUS : u32 = 59;
pub const MM_LOGITECH : u32 = 60;
pub const MM_WINNOV : u32 = 61;
pub const MM_NCR : u32 = 62;
pub const MM_EXAN : u32 = 63;
pub const MM_AST : u32 = 64;
pub const MM_WILLOWPOND : u32 = 65;
pub const MM_SONICFOUNDRY : u32 = 66;
pub const MM_VITEC : u32 = 67;
pub const MM_MOSCOM : u32 = 68;
pub const MM_SILICONSOFT : u32 = 69;
pub const MM_TERRATEC : u32 = 70;
pub const MM_MEDIASONIC : u32 = 71;
pub const MM_SANYO : u32 = 72;
pub const MM_SUPERMAC : u32 = 73;
pub const MM_AUDIOPT : u32 = 74;
pub const MM_NOGATECH : u32 = 75;
pub const MM_SPEECHCOMP : u32 = 76;
pub const MM_AHEAD : u32 = 77;
pub const MM_DOLBY : u32 = 78;
pub const MM_OKI : u32 = 79;
pub const MM_AURAVISION : u32 = 80;
pub const MM_OLIVETTI : u32 = 81;
pub const MM_IOMAGIC : u32 = 82;
pub const MM_MATSUSHITA : u32 = 83;
pub const MM_CONTROLRES : u32 = 84;
pub const MM_XEBEC : u32 = 85;
pub const MM_NEWMEDIA : u32 = 86;
pub const MM_NMS : u32 = 87;
pub const MM_LYRRUS : u32 = 88;
pub const MM_COMPUSIC : u32 = 89;
pub const MM_OPTI : u32 = 90;
pub const MM_ADLACC : u32 = 91;
pub const MM_COMPAQ : u32 = 92;
pub const MM_DIALOGIC : u32 = 93;
pub const MM_INSOFT : u32 = 94;
pub const MM_MPTUS : u32 = 95;
pub const MM_WEITEK : u32 = 96;
pub const MM_LERNOUT_AND_HAUSPIE : u32 = 97;
pub const MM_QCIAR : u32 = 98;
pub const MM_APPLE : u32 = 99;
pub const MM_DIGITAL : u32 = 100;
pub const MM_MOTU : u32 = 101;
pub const MM_WORKBIT : u32 = 102;
pub const MM_OSITECH : u32 = 103;
pub const MM_MIRO : u32 = 104;
pub const MM_CIRRUSLOGIC : u32 = 105;
pub const MM_ISOLUTION : u32 = 106;
pub const MM_HORIZONS : u32 = 107;
pub const MM_CONCEPTS : u32 = 108;
pub const MM_VTG : u32 = 109;
pub const MM_RADIUS : u32 = 110;
pub const MM_ROCKWELL : u32 = 111;
pub const MM_XYZ : u32 = 112;
pub const MM_OPCODE : u32 = 113;
pub const MM_VOXWARE : u32 = 114;
pub const MM_NORTHERN_TELECOM : u32 = 115;
pub const MM_APICOM : u32 = 116;
pub const MM_GRANDE : u32 = 117;
pub const MM_ADDX : u32 = 118;
pub const MM_WILDCAT : u32 = 119;
pub const MM_RHETOREX : u32 = 120;
pub const MM_BROOKTREE : u32 = 121;
pub const MM_ENSONIQ : u32 = 125;
pub const MM_FAST : u32 = 126;
pub const MM_NVIDIA : u32 = 127;
pub const MM_OKSORI : u32 = 128;
pub const MM_DIACOUSTICS : u32 = 129;
pub const MM_GULBRANSEN : u32 = 130;
pub const MM_KAY_ELEMETRICS : u32 = 131;
pub const MM_CRYSTAL : u32 = 132;
pub const MM_SPLASH_STUDIOS : u32 = 133;
pub const MM_QUARTERDECK : u32 = 134;
pub const MM_TDK : u32 = 135;
pub const MM_DIGITAL_AUDIO_LABS : u32 = 136;
pub const MM_SEERSYS : u32 = 137;
pub const MM_PICTURETEL : u32 = 138;
pub const MM_ATT_MICROELECTRONICS : u32 = 139;
pub const MM_OSPREY : u32 = 140;
pub const MM_MEDIATRIX : u32 = 141;
pub const MM_SOUNDESIGNS : u32 = 142;
pub const MM_ALDIGITAL : u32 = 143;
pub const MM_SPECTRUM_SIGNAL_PROCESSING : u32 = 144;
pub const MM_ECS : u32 = 145;
pub const MM_AMD : u32 = 146;
pub const MM_COREDYNAMICS : u32 = 147;
pub const MM_CANAM : u32 = 148;
pub const MM_SOFTSOUND : u32 = 149;
pub const MM_NORRIS : u32 = 150;
pub const MM_DDD : u32 = 151;
pub const MM_EUPHONICS : u32 = 152;
pub const MM_PRECEPT : u32 = 153;
pub const MM_CRYSTAL_NET : u32 = 154;
pub const MM_CHROMATIC : u32 = 155;
pub const MM_VOICEINFO : u32 = 156;
pub const MM_VIENNASYS : u32 = 157;
pub const MM_CONNECTIX : u32 = 158;
pub const MM_GADGETLABS : u32 = 159;
pub const MM_FRONTIER : u32 = 160;
pub const MM_VIONA : u32 = 161;
pub const MM_CASIO : u32 = 162;
pub const MM_DIAMONDMM : u32 = 163;
pub const MM_S3 : u32 = 164;
pub const MM_DVISION : u32 = 165;
pub const MM_NETSCAPE : u32 = 166;
pub const MM_SOUNDSPACE : u32 = 167;
pub const MM_VANKOEVERING : u32 = 168;
pub const MM_QTEAM : u32 = 169;
pub const MM_ZEFIRO : u32 = 170;
pub const MM_STUDER : u32 = 171;
pub const MM_FRAUNHOFER_IIS : u32 = 172;
pub const MM_QUICKNET : u32 = 173;
pub const MM_ALARIS : u32 = 174;
pub const MM_SICRESOURCE : u32 = 175;
pub const MM_NEOMAGIC : u32 = 176;
pub const MM_MERGING_TECHNOLOGIES : u32 = 177;
pub const MM_XIRLINK : u32 = 178;
pub const MM_COLORGRAPH : u32 = 179;
pub const MM_OTI : u32 = 180;
pub const MM_AUREAL : u32 = 181;
pub const MM_VIVO : u32 = 182;
pub const MM_SHARP : u32 = 183;
pub const MM_LUCENT : u32 = 184;
pub const MM_ATT : u32 = 185;
pub const MM_SUNCOM : u32 = 186;
pub const MM_SORVIS : u32 = 187;
pub const MM_INVISION : u32 = 188;
pub const MM_BERKOM : u32 = 189;
pub const MM_MARIAN : u32 = 190;
pub const MM_DPSINC : u32 = 191;
pub const MM_BCB : u32 = 192;
pub const MM_MOTIONPIXELS : u32 = 193;
pub const MM_QDESIGN : u32 = 194;
pub const MM_NMP : u32 = 195;
pub const MM_DATAFUSION : u32 = 196;
pub const MM_DUCK : u32 = 197;
pub const MM_FTR : u32 = 198;
pub const MM_BERCOS : u32 = 199;
pub const MM_ONLIVE : u32 = 200;
pub const MM_SIEMENS_SBC : u32 = 201;
pub const MM_TERALOGIC : u32 = 202;
pub const MM_PHONET : u32 = 203;
pub const MM_WINBOND : u32 = 204;
pub const MM_VIRTUALMUSIC : u32 = 205;
pub const MM_ENET : u32 = 206;
pub const MM_GUILLEMOT : u32 = 207;
pub const MM_EMAGIC : u32 = 208;
pub const MM_MWM : u32 = 209;
pub const MM_PACIFICRESEARCH : u32 = 210;
pub const MM_SIPROLAB : u32 = 211;
pub const MM_LYNX : u32 = 212;
pub const MM_SPECTRUM_PRODUCTIONS : u32 = 213;
pub const MM_DICTAPHONE : u32 = 214;
pub const MM_QUALCOMM : u32 = 215;
pub const MM_RZS : u32 = 216;
pub const MM_AUDIOSCIENCE : u32 = 217;
pub const MM_PINNACLE : u32 = 218;
pub const MM_EES : u32 = 219;
pub const MM_HAFTMANN : u32 = 220;
pub const MM_LUCID : u32 = 221;
pub const MM_HEADSPACE : u32 = 222;
pub const MM_UNISYS : u32 = 223;
pub const MM_LUMINOSITI : u32 = 224;
pub const MM_ACTIVEVOICE : u32 = 225;
pub const MM_DTS : u32 = 226;
pub const MM_DIGIGRAM : u32 = 227;
pub const MM_SOFTLAB_NSK : u32 = 228;
pub const MM_FORTEMEDIA : u32 = 229;
pub const MM_SONORUS : u32 = 230;
pub const MM_ARRAY : u32 = 231;
pub const MM_DATARAN : u32 = 232;
pub const MM_I_LINK : u32 = 233;
pub const MM_SELSIUS_SYSTEMS : u32 = 234;
pub const MM_ADMOS : u32 = 235;
pub const MM_LEXICON : u32 = 236;
pub const MM_SGI : u32 = 237;
pub const MM_IPI : u32 = 238;
pub const MM_ICE : u32 = 239;
pub const MM_VQST : u32 = 240;
pub const MM_ETEK : u32 = 241;
pub const MM_CS : u32 = 242;
pub const MM_ALESIS : u32 = 243;
pub const MM_INTERNET : u32 = 244;
pub const MM_SONY : u32 = 245;
pub const MM_HYPERACTIVE : u32 = 246;
pub const MM_UHER_INFORMATIC : u32 = 247;
pub const MM_SYDEC_NV : u32 = 248;
pub const MM_FLEXION : u32 = 249;
pub const MM_VIA : u32 = 250;
pub const MM_MICRONAS : u32 = 251;
pub const MM_ANALOGDEVICES : u32 = 252;
pub const MM_HP : u32 = 253;
pub const MM_MATROX_DIV : u32 = 254;
pub const MM_QUICKAUDIO : u32 = 255;
pub const MM_YOUCOM : u32 = 256;
pub const MM_RICHMOND : u32 = 257;
pub const MM_IODD : u32 = 258;
pub const MM_ICCC : u32 = 259;
pub const MM_3COM : u32 = 260;
pub const MM_MALDEN : u32 = 261;
pub const MM_3DFX : u32 = 262;
pub const MM_MINDMAKER : u32 = 263;
pub const MM_TELEKOL : u32 = 264;
pub const MM_ST_MICROELECTRONICS : u32 = 265;
pub const MM_ALGOVISION : u32 = 266;
pub const MM_UNMAPPED : u32 = 65535;
pub const MM_MIDI_MAPPER : u32 = 1;
pub const MM_WAVE_MAPPER : u32 = 2;
pub const MM_SNDBLST_MIDIOUT : u32 = 3;
pub const MM_SNDBLST_MIDIIN : u32 = 4;
pub const MM_SNDBLST_SYNTH : u32 = 5;
pub const MM_SNDBLST_WAVEOUT : u32 = 6;
pub const MM_SNDBLST_WAVEIN : u32 = 7;
pub const MM_ADLIB : u32 = 9;
pub const MM_MPU401_MIDIOUT : u32 = 10;
pub const MM_MPU401_MIDIIN : u32 = 11;
pub const MM_PC_JOYSTICK : u32 = 12;
pub const MM_PCSPEAKER_WAVEOUT : u32 = 13;
pub const MM_MSFT_WSS_WAVEIN : u32 = 14;
pub const MM_MSFT_WSS_WAVEOUT : u32 = 15;
pub const MM_MSFT_WSS_FMSYNTH_STEREO : u32 = 16;
pub const MM_MSFT_WSS_MIXER : u32 = 17;
pub const MM_MSFT_WSS_OEM_WAVEIN : u32 = 18;
pub const MM_MSFT_WSS_OEM_WAVEOUT : u32 = 19;
pub const MM_MSFT_WSS_OEM_FMSYNTH_STEREO : u32 = 20;
pub const MM_MSFT_WSS_AUX : u32 = 21;
pub const MM_MSFT_WSS_OEM_AUX : u32 = 22;
pub const MM_MSFT_GENERIC_WAVEIN : u32 = 23;
pub const MM_MSFT_GENERIC_WAVEOUT : u32 = 24;
pub const MM_MSFT_GENERIC_MIDIIN : u32 = 25;
pub const MM_MSFT_GENERIC_MIDIOUT : u32 = 26;
pub const MM_MSFT_GENERIC_MIDISYNTH : u32 = 27;
pub const MM_MSFT_GENERIC_AUX_LINE : u32 = 28;
pub const MM_MSFT_GENERIC_AUX_MIC : u32 = 29;
pub const MM_MSFT_GENERIC_AUX_CD : u32 = 30;
pub const MM_MSFT_WSS_OEM_MIXER : u32 = 31;
pub const MM_MSFT_MSACM : u32 = 32;
pub const MM_MSFT_ACM_MSADPCM : u32 = 33;
pub const MM_MSFT_ACM_IMAADPCM : u32 = 34;
pub const MM_MSFT_ACM_MSFILTER : u32 = 35;
pub const MM_MSFT_ACM_GSM610 : u32 = 36;
pub const MM_MSFT_ACM_G711 : u32 = 37;
pub const MM_MSFT_ACM_PCM : u32 = 38;
pub const MM_WSS_SB16_WAVEIN : u32 = 39;
pub const MM_WSS_SB16_WAVEOUT : u32 = 40;
pub const MM_WSS_SB16_MIDIIN : u32 = 41;
pub const MM_WSS_SB16_MIDIOUT : u32 = 42;
pub const MM_WSS_SB16_SYNTH : u32 = 43;
pub const MM_WSS_SB16_AUX_LINE : u32 = 44;
pub const MM_WSS_SB16_AUX_CD : u32 = 45;
pub const MM_WSS_SB16_MIXER : u32 = 46;
pub const MM_WSS_SBPRO_WAVEIN : u32 = 47;
pub const MM_WSS_SBPRO_WAVEOUT : u32 = 48;
pub const MM_WSS_SBPRO_MIDIIN : u32 = 49;
pub const MM_WSS_SBPRO_MIDIOUT : u32 = 50;
pub const MM_WSS_SBPRO_SYNTH : u32 = 51;
pub const MM_WSS_SBPRO_AUX_LINE : u32 = 52;
pub const MM_WSS_SBPRO_AUX_CD : u32 = 53;
pub const MM_WSS_SBPRO_MIXER : u32 = 54;
pub const MM_MSFT_WSS_NT_WAVEIN : u32 = 55;
pub const MM_MSFT_WSS_NT_WAVEOUT : u32 = 56;
pub const MM_MSFT_WSS_NT_FMSYNTH_STEREO : u32 = 57;
pub const MM_MSFT_WSS_NT_MIXER : u32 = 58;
pub const MM_MSFT_WSS_NT_AUX : u32 = 59;
pub const MM_MSFT_SB16_WAVEIN : u32 = 60;
pub const MM_MSFT_SB16_WAVEOUT : u32 = 61;
pub const MM_MSFT_SB16_MIDIIN : u32 = 62;
pub const MM_MSFT_SB16_MIDIOUT : u32 = 63;
pub const MM_MSFT_SB16_SYNTH : u32 = 64;
pub const MM_MSFT_SB16_AUX_LINE : u32 = 65;
pub const MM_MSFT_SB16_AUX_CD : u32 = 66;
pub const MM_MSFT_SB16_MIXER : u32 = 67;
pub const MM_MSFT_SBPRO_WAVEIN : u32 = 68;
pub const MM_MSFT_SBPRO_WAVEOUT : u32 = 69;
pub const MM_MSFT_SBPRO_MIDIIN : u32 = 70;
pub const MM_MSFT_SBPRO_MIDIOUT : u32 = 71;
pub const MM_MSFT_SBPRO_SYNTH : u32 = 72;
pub const MM_MSFT_SBPRO_AUX_LINE : u32 = 73;
pub const MM_MSFT_SBPRO_AUX_CD : u32 = 74;
pub const MM_MSFT_SBPRO_MIXER : u32 = 75;
pub const MM_MSFT_MSOPL_SYNTH : u32 = 76;
pub const MM_MSFT_VMDMS_LINE_WAVEIN : u32 = 80;
pub const MM_MSFT_VMDMS_LINE_WAVEOUT : u32 = 81;
pub const MM_MSFT_VMDMS_HANDSET_WAVEIN : u32 = 82;
pub const MM_MSFT_VMDMS_HANDSET_WAVEOUT : u32 = 83;
pub const MM_MSFT_VMDMW_LINE_WAVEIN : u32 = 84;
pub const MM_MSFT_VMDMW_LINE_WAVEOUT : u32 = 85;
pub const MM_MSFT_VMDMW_HANDSET_WAVEIN : u32 = 86;
pub const MM_MSFT_VMDMW_HANDSET_WAVEOUT : u32 = 87;
pub const MM_MSFT_VMDMW_MIXER : u32 = 88;
pub const MM_MSFT_VMDM_GAME_WAVEOUT : u32 = 89;
pub const MM_MSFT_VMDM_GAME_WAVEIN : u32 = 90;
pub const MM_MSFT_ACM_MSNAUDIO : u32 = 91;
pub const MM_MSFT_ACM_MSG723 : u32 = 92;
pub const MM_MSFT_ACM_MSRT24 : u32 = 93;
pub const MM_MSFT_WDMAUDIO_WAVEOUT : u32 = 100;
pub const MM_MSFT_WDMAUDIO_WAVEIN : u32 = 101;
pub const MM_MSFT_WDMAUDIO_MIDIOUT : u32 = 102;
pub const MM_MSFT_WDMAUDIO_MIDIIN : u32 = 103;
pub const MM_MSFT_WDMAUDIO_MIXER : u32 = 104;
pub const MM_MSFT_WDMAUDIO_AUX : u32 = 105;
pub const MM_CREATIVE_SB15_WAVEIN : u32 = 1;
pub const MM_CREATIVE_SB20_WAVEIN : u32 = 2;
pub const MM_CREATIVE_SBPRO_WAVEIN : u32 = 3;
pub const MM_CREATIVE_SBP16_WAVEIN : u32 = 4;
pub const MM_CREATIVE_PHNBLST_WAVEIN : u32 = 5;
pub const MM_CREATIVE_SB15_WAVEOUT : u32 = 101;
pub const MM_CREATIVE_SB20_WAVEOUT : u32 = 102;
pub const MM_CREATIVE_SBPRO_WAVEOUT : u32 = 103;
pub const MM_CREATIVE_SBP16_WAVEOUT : u32 = 104;
pub const MM_CREATIVE_PHNBLST_WAVEOUT : u32 = 105;
pub const MM_CREATIVE_MIDIOUT : u32 = 201;
pub const MM_CREATIVE_MIDIIN : u32 = 202;
pub const MM_CREATIVE_FMSYNTH_MONO : u32 = 301;
pub const MM_CREATIVE_FMSYNTH_STEREO : u32 = 302;
pub const MM_CREATIVE_MIDI_AWE32 : u32 = 303;
pub const MM_CREATIVE_AUX_CD : u32 = 401;
pub const MM_CREATIVE_AUX_LINE : u32 = 402;
pub const MM_CREATIVE_AUX_MIC : u32 = 403;
pub const MM_CREATIVE_AUX_MASTER : u32 = 404;
pub const MM_CREATIVE_AUX_PCSPK : u32 = 405;
pub const MM_CREATIVE_AUX_WAVE : u32 = 406;
pub const MM_CREATIVE_AUX_MIDI : u32 = 407;
pub const MM_CREATIVE_SBPRO_MIXER : u32 = 408;
pub const MM_CREATIVE_SB16_MIXER : u32 = 409;
pub const MM_MEDIAVISION_PROAUDIO : u32 = 16;
pub const MM_MEDIAVISION_THUNDER : u32 = 32;
pub const MM_MEDIAVISION_TPORT : u32 = 64;
pub const MM_MEDIAVISION_PROAUDIO_PLUS : u32 = 80;
pub const MM_MEDIAVISION_PROAUDIO_16 : u32 = 96;
pub const MM_MEDIAVISION_PROSTUDIO_16 : u32 = 96;
pub const MM_MEDIAVISION_CDPC : u32 = 112;
pub const MM_MEDIAVISION_OPUS1208 : u32 = 128;
pub const MM_MEDIAVISION_OPUS1216 : u32 = 144;
pub const MM_CYRIX_XASYNTH : u32 = 1;
pub const MM_CYRIX_XAMIDIIN : u32 = 2;
pub const MM_CYRIX_XAMIDIOUT : u32 = 3;
pub const MM_CYRIX_XAWAVEIN : u32 = 4;
pub const MM_CYRIX_XAWAVEOUT : u32 = 5;
pub const MM_CYRIX_XAAUX : u32 = 6;
pub const MM_CYRIX_XAMIXER : u32 = 7;
pub const MM_PHILIPS_ACM_LPCBB : u32 = 1;
pub const MM_NETXL_XLVIDEO : u32 = 1;
pub const MM_ZYXEL_ACM_ADPCM : u32 = 1;
pub const MM_AARDVARK_STUDIO12_WAVEOUT : u32 = 1;
pub const MM_AARDVARK_STUDIO12_WAVEIN : u32 = 2;
pub const MM_AARDVARK_STUDIO88_WAVEOUT : u32 = 3;
pub const MM_AARDVARK_STUDIO88_WAVEIN : u32 = 4;
pub const MM_BINTEC_TAPI_WAVE : u32 = 1;
pub const MM_HEWLETT_PACKARD_CU_CODEC : u32 = 1;
pub const MM_MITEL_TALKTO_LINE_WAVEOUT : u32 = 100;
pub const MM_MITEL_TALKTO_LINE_WAVEIN : u32 = 101;
pub const MM_MITEL_TALKTO_HANDSET_WAVEOUT : u32 = 102;
pub const MM_MITEL_TALKTO_HANDSET_WAVEIN : u32 = 103;
pub const MM_MITEL_TALKTO_BRIDGED_WAVEOUT : u32 = 104;
pub const MM_MITEL_TALKTO_BRIDGED_WAVEIN : u32 = 105;
pub const MM_MITEL_MPA_HANDSET_WAVEOUT : u32 = 200;
pub const MM_MITEL_MPA_HANDSET_WAVEIN : u32 = 201;
pub const MM_MITEL_MPA_HANDSFREE_WAVEOUT : u32 = 202;
pub const MM_MITEL_MPA_HANDSFREE_WAVEIN : u32 = 203;
pub const MM_MITEL_MPA_LINE1_WAVEOUT : u32 = 204;
pub const MM_MITEL_MPA_LINE1_WAVEIN : u32 = 205;
pub const MM_MITEL_MPA_LINE2_WAVEOUT : u32 = 206;
pub const MM_MITEL_MPA_LINE2_WAVEIN : u32 = 207;
pub const MM_MITEL_MEDIAPATH_WAVEOUT : u32 = 300;
pub const MM_MITEL_MEDIAPATH_WAVEIN : u32 = 301;
pub const MM_SNI_ACM_G721 : u32 = 1;
pub const MM_EMU_APSSYNTH : u32 = 1;
pub const MM_EMU_APSMIDIIN : u32 = 2;
pub const MM_EMU_APSMIDIOUT : u32 = 3;
pub const MM_EMU_APSWAVEIN : u32 = 4;
pub const MM_EMU_APSWAVEOUT : u32 = 5;
pub const MM_ARTISOFT_SBWAVEIN : u32 = 1;
pub const MM_ARTISOFT_SBWAVEOUT : u32 = 2;
pub const MM_TBS_TROPEZ_WAVEIN : u32 = 37;
pub const MM_TBS_TROPEZ_WAVEOUT : u32 = 38;
pub const MM_TBS_TROPEZ_AUX1 : u32 = 39;
pub const MM_TBS_TROPEZ_AUX2 : u32 = 40;
pub const MM_TBS_TROPEZ_LINE : u32 = 41;
pub const MM_MMOTION_WAVEAUX : u32 = 1;
pub const MM_MMOTION_WAVEOUT : u32 = 2;
pub const MM_MMOTION_WAVEIN : u32 = 3;
pub const MM_IBM_PCMCIA_WAVEIN : u32 = 11;
pub const MM_IBM_PCMCIA_WAVEOUT : u32 = 12;
pub const MM_IBM_PCMCIA_SYNTH : u32 = 13;
pub const MM_IBM_PCMCIA_MIDIIN : u32 = 14;
pub const MM_IBM_PCMCIA_MIDIOUT : u32 = 15;
pub const MM_IBM_PCMCIA_AUX : u32 = 16;
pub const MM_IBM_THINKPAD200 : u32 = 17;
pub const MM_IBM_MWAVE_WAVEIN : u32 = 18;
pub const MM_IBM_MWAVE_WAVEOUT : u32 = 19;
pub const MM_IBM_MWAVE_MIXER : u32 = 20;
pub const MM_IBM_MWAVE_MIDIIN : u32 = 21;
pub const MM_IBM_MWAVE_MIDIOUT : u32 = 22;
pub const MM_IBM_MWAVE_AUX : u32 = 23;
pub const MM_IBM_WC_MIDIOUT : u32 = 30;
pub const MM_IBM_WC_WAVEOUT : u32 = 31;
pub const MM_IBM_WC_MIXEROUT : u32 = 33;
pub const MM_VOCALTEC_WAVEOUT : u32 = 1;
pub const MM_VOCALTEC_WAVEIN : u32 = 2;
pub const MM_ROLAND_RAP10_MIDIOUT : u32 = 10;
pub const MM_ROLAND_RAP10_MIDIIN : u32 = 11;
pub const MM_ROLAND_RAP10_SYNTH : u32 = 12;
pub const MM_ROLAND_RAP10_WAVEOUT : u32 = 13;
pub const MM_ROLAND_RAP10_WAVEIN : u32 = 14;
pub const MM_ROLAND_MPU401_MIDIOUT : u32 = 15;
pub const MM_ROLAND_MPU401_MIDIIN : u32 = 16;
pub const MM_ROLAND_SMPU_MIDIOUTA : u32 = 17;
pub const MM_ROLAND_SMPU_MIDIOUTB : u32 = 18;
pub const MM_ROLAND_SMPU_MIDIINA : u32 = 19;
pub const MM_ROLAND_SMPU_MIDIINB : u32 = 20;
pub const MM_ROLAND_SC7_MIDIOUT : u32 = 21;
pub const MM_ROLAND_SC7_MIDIIN : u32 = 22;
pub const MM_ROLAND_SERIAL_MIDIOUT : u32 = 23;
pub const MM_ROLAND_SERIAL_MIDIIN : u32 = 24;
pub const MM_ROLAND_SCP_MIDIOUT : u32 = 38;
pub const MM_ROLAND_SCP_MIDIIN : u32 = 39;
pub const MM_ROLAND_SCP_WAVEOUT : u32 = 40;
pub const MM_ROLAND_SCP_WAVEIN : u32 = 41;
pub const MM_ROLAND_SCP_MIXER : u32 = 42;
pub const MM_ROLAND_SCP_AUX : u32 = 48;
pub const MM_DSP_SOLUTIONS_WAVEOUT : u32 = 1;
pub const MM_DSP_SOLUTIONS_WAVEIN : u32 = 2;
pub const MM_DSP_SOLUTIONS_SYNTH : u32 = 3;
pub const MM_DSP_SOLUTIONS_AUX : u32 = 4;
pub const MM_NEC_73_86_SYNTH : u32 = 5;
pub const MM_NEC_73_86_WAVEOUT : u32 = 6;
pub const MM_NEC_73_86_WAVEIN : u32 = 7;
pub const MM_NEC_26_SYNTH : u32 = 9;
pub const MM_NEC_MPU401_MIDIOUT : u32 = 10;
pub const MM_NEC_MPU401_MIDIIN : u32 = 11;
pub const MM_NEC_JOYSTICK : u32 = 12;
pub const MM_WANGLABS_WAVEIN1 : u32 = 1;
pub const MM_WANGLABS_WAVEOUT1 : u32 = 2;
pub const MM_TANDY_VISWAVEIN : u32 = 1;
pub const MM_TANDY_VISWAVEOUT : u32 = 2;
pub const MM_TANDY_VISBIOSSYNTH : u32 = 3;
pub const MM_TANDY_SENS_MMAWAVEIN : u32 = 4;
pub const MM_TANDY_SENS_MMAWAVEOUT : u32 = 5;
pub const MM_TANDY_SENS_MMAMIDIIN : u32 = 6;
pub const MM_TANDY_SENS_MMAMIDIOUT : u32 = 7;
pub const MM_TANDY_SENS_VISWAVEOUT : u32 = 8;
pub const MM_TANDY_PSSJWAVEIN : u32 = 9;
pub const MM_TANDY_PSSJWAVEOUT : u32 = 10;
pub const MM_ANTEX_SX12_WAVEIN : u32 = 1;
pub const MM_ANTEX_SX12_WAVEOUT : u32 = 2;
pub const MM_ANTEX_SX15_WAVEIN : u32 = 3;
pub const MM_ANTEX_SX15_WAVEOUT : u32 = 4;
pub const MM_ANTEX_VP625_WAVEIN : u32 = 5;
pub const MM_ANTEX_VP625_WAVEOUT : u32 = 6;
pub const MM_ANTEX_AUDIOPORT22_WAVEIN : u32 = 7;
pub const MM_ANTEX_AUDIOPORT22_WAVEOUT : u32 = 8;
pub const MM_ANTEX_AUDIOPORT22_FEEDTHRU : u32 = 9;
pub const MM_INTELOPD_WAVEIN : u32 = 1;
pub const MM_INTELOPD_WAVEOUT : u32 = 101;
pub const MM_INTELOPD_AUX : u32 = 401;
pub const MM_INTEL_NSPMODEMLINEIN : u32 = 501;
pub const MM_INTEL_NSPMODEMLINEOUT : u32 = 502;
pub const MM_VAL_MICROKEY_AP_WAVEIN : u32 = 1;
pub const MM_VAL_MICROKEY_AP_WAVEOUT : u32 = 2;
pub const MM_INTERACTIVE_WAVEIN : u32 = 69;
pub const MM_INTERACTIVE_WAVEOUT : u32 = 69;
pub const MM_YAMAHA_GSS_SYNTH : u32 = 1;
pub const MM_YAMAHA_GSS_WAVEOUT : u32 = 2;
pub const MM_YAMAHA_GSS_WAVEIN : u32 = 3;
pub const MM_YAMAHA_GSS_MIDIOUT : u32 = 4;
pub const MM_YAMAHA_GSS_MIDIIN : u32 = 5;
pub const MM_YAMAHA_GSS_AUX : u32 = 6;
pub const MM_YAMAHA_SERIAL_MIDIOUT : u32 = 7;
pub const MM_YAMAHA_SERIAL_MIDIIN : u32 = 8;
pub const MM_YAMAHA_OPL3SA_WAVEOUT : u32 = 16;
pub const MM_YAMAHA_OPL3SA_WAVEIN : u32 = 17;
pub const MM_YAMAHA_OPL3SA_FMSYNTH : u32 = 18;
pub const MM_YAMAHA_OPL3SA_YSYNTH : u32 = 19;
pub const MM_YAMAHA_OPL3SA_MIDIOUT : u32 = 20;
pub const MM_YAMAHA_OPL3SA_MIDIIN : u32 = 21;
pub const MM_YAMAHA_OPL3SA_MIXER : u32 = 23;
pub const MM_YAMAHA_OPL3SA_JOYSTICK : u32 = 24;
pub const MM_YAMAHA_YMF724LEG_MIDIOUT : u32 = 25;
pub const MM_YAMAHA_YMF724LEG_MIDIIN : u32 = 26;
pub const MM_YAMAHA_YMF724_WAVEOUT : u32 = 27;
pub const MM_YAMAHA_YMF724_WAVEIN : u32 = 28;
pub const MM_YAMAHA_YMF724_MIDIOUT : u32 = 29;
pub const MM_YAMAHA_YMF724_AUX : u32 = 30;
pub const MM_YAMAHA_YMF724_MIXER : u32 = 31;
pub const MM_YAMAHA_YMF724LEG_FMSYNTH : u32 = 32;
pub const MM_YAMAHA_YMF724LEG_MIXER : u32 = 33;
pub const MM_YAMAHA_SXG_MIDIOUT : u32 = 34;
pub const MM_YAMAHA_SXG_WAVEOUT : u32 = 35;
pub const MM_YAMAHA_SXG_MIXER : u32 = 36;
pub const MM_YAMAHA_ACXG_WAVEIN : u32 = 37;
pub const MM_YAMAHA_ACXG_WAVEOUT : u32 = 38;
pub const MM_YAMAHA_ACXG_MIDIOUT : u32 = 39;
pub const MM_YAMAHA_ACXG_MIXER : u32 = 40;
pub const MM_YAMAHA_ACXG_AUX : u32 = 41;
pub const MM_EVEREX_CARRIER : u32 = 1;
pub const MM_ECHO_SYNTH : u32 = 1;
pub const MM_ECHO_WAVEOUT : u32 = 2;
pub const MM_ECHO_WAVEIN : u32 = 3;
pub const MM_ECHO_MIDIOUT : u32 = 4;
pub const MM_ECHO_MIDIIN : u32 = 5;
pub const MM_ECHO_AUX : u32 = 6;
pub const MM_SIERRA_ARIA_MIDIOUT : u32 = 20;
pub const MM_SIERRA_ARIA_MIDIIN : u32 = 21;
pub const MM_SIERRA_ARIA_SYNTH : u32 = 22;
pub const MM_SIERRA_ARIA_WAVEOUT : u32 = 23;
pub const MM_SIERRA_ARIA_WAVEIN : u32 = 24;
pub const MM_SIERRA_ARIA_AUX : u32 = 25;
pub const MM_SIERRA_ARIA_AUX2 : u32 = 32;
pub const MM_SIERRA_QUARTET_WAVEIN : u32 = 80;
pub const MM_SIERRA_QUARTET_WAVEOUT : u32 = 81;
pub const MM_SIERRA_QUARTET_MIDIIN : u32 = 82;
pub const MM_SIERRA_QUARTET_MIDIOUT : u32 = 83;
pub const MM_SIERRA_QUARTET_SYNTH : u32 = 84;
pub const MM_SIERRA_QUARTET_AUX_CD : u32 = 85;
pub const MM_SIERRA_QUARTET_AUX_LINE : u32 = 86;
pub const MM_SIERRA_QUARTET_AUX_MODEM : u32 = 87;
pub const MM_SIERRA_QUARTET_MIXER : u32 = 88;
pub const MM_CAT_WAVEOUT : u32 = 1;
pub const MM_DSP_GROUP_TRUESPEECH : u32 = 1;
pub const MM_MELABS_MIDI2GO : u32 = 1;
pub const MM_ESS_AMWAVEOUT : u32 = 1;
pub const MM_ESS_AMWAVEIN : u32 = 2;
pub const MM_ESS_AMAUX : u32 = 3;
pub const MM_ESS_AMSYNTH : u32 = 4;
pub const MM_ESS_AMMIDIOUT : u32 = 5;
pub const MM_ESS_AMMIDIIN : u32 = 6;
pub const MM_ESS_MIXER : u32 = 7;
pub const MM_ESS_AUX_CD : u32 = 8;
pub const MM_ESS_MPU401_MIDIOUT : u32 = 9;
pub const MM_ESS_MPU401_MIDIIN : u32 = 10;
pub const MM_ESS_ES488_WAVEOUT : u32 = 16;
pub const MM_ESS_ES488_WAVEIN : u32 = 17;
pub const MM_ESS_ES488_MIXER : u32 = 18;
pub const MM_ESS_ES688_WAVEOUT : u32 = 19;
pub const MM_ESS_ES688_WAVEIN : u32 = 20;
pub const MM_ESS_ES688_MIXER : u32 = 21;
pub const MM_ESS_ES1488_WAVEOUT : u32 = 22;
pub const MM_ESS_ES1488_WAVEIN : u32 = 23;
pub const MM_ESS_ES1488_MIXER : u32 = 24;
pub const MM_ESS_ES1688_WAVEOUT : u32 = 25;
pub const MM_ESS_ES1688_WAVEIN : u32 = 26;
pub const MM_ESS_ES1688_MIXER : u32 = 27;
pub const MM_ESS_ES1788_WAVEOUT : u32 = 28;
pub const MM_ESS_ES1788_WAVEIN : u32 = 29;
pub const MM_ESS_ES1788_MIXER : u32 = 30;
pub const MM_ESS_ES1888_WAVEOUT : u32 = 31;
pub const MM_ESS_ES1888_WAVEIN : u32 = 32;
pub const MM_ESS_ES1888_MIXER : u32 = 33;
pub const MM_ESS_ES1868_WAVEOUT : u32 = 34;
pub const MM_ESS_ES1868_WAVEIN : u32 = 35;
pub const MM_ESS_ES1868_MIXER : u32 = 36;
pub const MM_ESS_ES1878_WAVEOUT : u32 = 37;
pub const MM_ESS_ES1878_WAVEIN : u32 = 38;
pub const MM_ESS_ES1878_MIXER : u32 = 39;
pub const MM_CANOPUS_ACM_DVREX : u32 = 1;
pub const MM_EPS_FMSND : u32 = 1;
pub const MM_TRUEVISION_WAVEIN1 : u32 = 1;
pub const MM_TRUEVISION_WAVEOUT1 : u32 = 2;
pub const MM_AZTECH_MIDIOUT : u32 = 3;
pub const MM_AZTECH_MIDIIN : u32 = 4;
pub const MM_AZTECH_WAVEIN : u32 = 17;
pub const MM_AZTECH_WAVEOUT : u32 = 18;
pub const MM_AZTECH_FMSYNTH : u32 = 20;
pub const MM_AZTECH_MIXER : u32 = 21;
pub const MM_AZTECH_PRO16_WAVEIN : u32 = 33;
pub const MM_AZTECH_PRO16_WAVEOUT : u32 = 34;
pub const MM_AZTECH_PRO16_FMSYNTH : u32 = 38;
pub const MM_AZTECH_DSP16_WAVEIN : u32 = 65;
pub const MM_AZTECH_DSP16_WAVEOUT : u32 = 66;
pub const MM_AZTECH_DSP16_FMSYNTH : u32 = 68;
pub const MM_AZTECH_DSP16_WAVESYNTH : u32 = 70;
pub const MM_AZTECH_NOVA16_WAVEIN : u32 = 71;
pub const MM_AZTECH_NOVA16_WAVEOUT : u32 = 72;
pub const MM_AZTECH_NOVA16_MIXER : u32 = 73;
pub const MM_AZTECH_WASH16_WAVEIN : u32 = 74;
pub const MM_AZTECH_WASH16_WAVEOUT : u32 = 75;
pub const MM_AZTECH_WASH16_MIXER : u32 = 76;
pub const MM_AZTECH_AUX_CD : u32 = 401;
pub const MM_AZTECH_AUX_LINE : u32 = 402;
pub const MM_AZTECH_AUX_MIC : u32 = 403;
pub const MM_AZTECH_AUX : u32 = 404;
pub const MM_VIDEOLOGIC_MSWAVEIN : u32 = 1;
pub const MM_VIDEOLOGIC_MSWAVEOUT : u32 = 2;
pub const MM_KORG_PCIF_MIDIOUT : u32 = 1;
pub const MM_KORG_PCIF_MIDIIN : u32 = 2;
pub const MM_KORG_1212IO_MSWAVEIN : u32 = 3;
pub const MM_KORG_1212IO_MSWAVEOUT : u32 = 4;
pub const MM_APT_ACE100CD : u32 = 1;
pub const MM_ICS_WAVEDECK_WAVEOUT : u32 = 1;
pub const MM_ICS_WAVEDECK_WAVEIN : u32 = 2;
pub const MM_ICS_WAVEDECK_MIXER : u32 = 3;
pub const MM_ICS_WAVEDECK_AUX : u32 = 4;
pub const MM_ICS_WAVEDECK_SYNTH : u32 = 5;
pub const MM_ICS_WAVEDEC_SB_WAVEOUT : u32 = 6;
pub const MM_ICS_WAVEDEC_SB_WAVEIN : u32 = 7;
pub const MM_ICS_WAVEDEC_SB_FM_MIDIOUT : u32 = 8;
pub const MM_ICS_WAVEDEC_SB_MPU401_MIDIOUT : u32 = 9;
pub const MM_ICS_WAVEDEC_SB_MPU401_MIDIIN : u32 = 10;
pub const MM_ICS_WAVEDEC_SB_MIXER : u32 = 11;
pub const MM_ICS_WAVEDEC_SB_AUX : u32 = 12;
pub const MM_ICS_2115_LITE_MIDIOUT : u32 = 13;
pub const MM_ICS_2120_LITE_MIDIOUT : u32 = 14;
pub const MM_ITERATEDSYS_FUFCODEC : u32 = 1;
pub const MM_METHEUS_ZIPPER : u32 = 1;
pub const MM_WINNOV_CAVIAR_WAVEIN : u32 = 1;
pub const MM_WINNOV_CAVIAR_WAVEOUT : u32 = 2;
pub const MM_WINNOV_CAVIAR_VIDC : u32 = 3;
pub const MM_WINNOV_CAVIAR_CHAMPAGNE : u32 = 4;
pub const MM_WINNOV_CAVIAR_YUV8 : u32 = 5;
pub const MM_NCR_BA_WAVEIN : u32 = 1;
pub const MM_NCR_BA_WAVEOUT : u32 = 2;
pub const MM_NCR_BA_SYNTH : u32 = 3;
pub const MM_NCR_BA_AUX : u32 = 4;
pub const MM_NCR_BA_MIXER : u32 = 5;
pub const MM_AST_MODEMWAVE_WAVEIN : u32 = 13;
pub const MM_AST_MODEMWAVE_WAVEOUT : u32 = 14;
pub const MM_WILLOWPOND_FMSYNTH_STEREO : u32 = 20;
pub const MM_WILLOWPOND_MPU401 : u32 = 21;
pub const MM_WILLOWPOND_SNDPORT_WAVEIN : u32 = 100;
pub const MM_WILLOWPOND_SNDPORT_WAVEOUT : u32 = 101;
pub const MM_WILLOWPOND_SNDPORT_MIXER : u32 = 102;
pub const MM_WILLOWPOND_SNDPORT_AUX : u32 = 103;
pub const MM_WILLOWPOND_PH_WAVEIN : u32 = 104;
pub const MM_WILLOWPOND_PH_WAVEOUT : u32 = 105;
pub const MM_WILLOWPOND_PH_MIXER : u32 = 106;
pub const MM_WILLOWPOND_PH_AUX : u32 = 107;
pub const MM_WILLOPOND_SNDCOMM_WAVEIN : u32 = 108;
pub const MM_WILLOWPOND_SNDCOMM_WAVEOUT : u32 = 109;
pub const MM_WILLOWPOND_SNDCOMM_MIXER : u32 = 110;
pub const MM_WILLOWPOND_SNDCOMM_AUX : u32 = 111;
pub const MM_WILLOWPOND_GENERIC_WAVEIN : u32 = 112;
pub const MM_WILLOWPOND_GENERIC_WAVEOUT : u32 = 113;
pub const MM_WILLOWPOND_GENERIC_MIXER : u32 = 114;
pub const MM_WILLOWPOND_GENERIC_AUX : u32 = 115;
pub const MM_VITEC_VMAKER : u32 = 1;
pub const MM_VITEC_VMPRO : u32 = 2;
pub const MM_MOSCOM_VPC2400_IN : u32 = 1;
pub const MM_MOSCOM_VPC2400_OUT : u32 = 2;
pub const MM_SILICONSOFT_SC1_WAVEIN : u32 = 1;
pub const MM_SILICONSOFT_SC1_WAVEOUT : u32 = 2;
pub const MM_SILICONSOFT_SC2_WAVEIN : u32 = 3;
pub const MM_SILICONSOFT_SC2_WAVEOUT : u32 = 4;
pub const MM_SILICONSOFT_SOUNDJR2_WAVEOUT : u32 = 5;
pub const MM_SILICONSOFT_SOUNDJR2PR_WAVEIN : u32 = 6;
pub const MM_SILICONSOFT_SOUNDJR2PR_WAVEOUT : u32 = 7;
pub const MM_SILICONSOFT_SOUNDJR3_WAVEOUT : u32 = 8;
pub const MM_TTEWS_WAVEIN : u32 = 1;
pub const MM_TTEWS_WAVEOUT : u32 = 2;
pub const MM_TTEWS_MIDIIN : u32 = 3;
pub const MM_TTEWS_MIDIOUT : u32 = 4;
pub const MM_TTEWS_MIDISYNTH : u32 = 5;
pub const MM_TTEWS_MIDIMONITOR : u32 = 6;
pub const MM_TTEWS_VMIDIIN : u32 = 7;
pub const MM_TTEWS_VMIDIOUT : u32 = 8;
pub const MM_TTEWS_AUX : u32 = 9;
pub const MM_TTEWS_MIXER : u32 = 10;
pub const MM_MEDIASONIC_ACM_G723 : u32 = 1;
pub const MM_MEDIASONIC_ICOM : u32 = 2;
pub const MM_ICOM_WAVEIN : u32 = 3;
pub const MM_ICOM_WAVEOUT : u32 = 4;
pub const MM_ICOM_MIXER : u32 = 5;
pub const MM_ICOM_AUX : u32 = 6;
pub const MM_ICOM_LINE : u32 = 7;
pub const MM_SANYO_ACM_LD_ADPCM : u32 = 1;
pub const MM_AHEAD_MULTISOUND : u32 = 1;
pub const MM_AHEAD_SOUNDBLASTER : u32 = 2;
pub const MM_AHEAD_PROAUDIO : u32 = 3;
pub const MM_AHEAD_GENERIC : u32 = 4;
pub const MM_OLIVETTI_WAVEIN : u32 = 1;
pub const MM_OLIVETTI_WAVEOUT : u32 = 2;
pub const MM_OLIVETTI_MIXER : u32 = 3;
pub const MM_OLIVETTI_AUX : u32 = 4;
pub const MM_OLIVETTI_MIDIIN : u32 = 5;
pub const MM_OLIVETTI_MIDIOUT : u32 = 6;
pub const MM_OLIVETTI_SYNTH : u32 = 7;
pub const MM_OLIVETTI_JOYSTICK : u32 = 8;
pub const MM_OLIVETTI_ACM_GSM : u32 = 9;
pub const MM_OLIVETTI_ACM_ADPCM : u32 = 10;
pub const MM_OLIVETTI_ACM_CELP : u32 = 11;
pub const MM_OLIVETTI_ACM_SBC : u32 = 12;
pub const MM_OLIVETTI_ACM_OPR : u32 = 13;
pub const MM_IOMAGIC_TEMPO_WAVEOUT : u32 = 1;
pub const MM_IOMAGIC_TEMPO_WAVEIN : u32 = 2;
pub const MM_IOMAGIC_TEMPO_SYNTH : u32 = 3;
pub const MM_IOMAGIC_TEMPO_MIDIOUT : u32 = 4;
pub const MM_IOMAGIC_TEMPO_MXDOUT : u32 = 5;
pub const MM_IOMAGIC_TEMPO_AUXOUT : u32 = 6;
pub const MM_MATSUSHITA_WAVEIN : u32 = 1;
pub const MM_MATSUSHITA_WAVEOUT : u32 = 2;
pub const MM_MATSUSHITA_FMSYNTH_STEREO : u32 = 3;
pub const MM_MATSUSHITA_MIXER : u32 = 4;
pub const MM_MATSUSHITA_AUX : u32 = 5;
pub const MM_NEWMEDIA_WAVJAMMER : u32 = 1;
pub const MM_LYRRUS_BRIDGE_GUITAR : u32 = 1;
pub const MM_OPTI_M16_FMSYNTH_STEREO : u32 = 1;
pub const MM_OPTI_M16_MIDIIN : u32 = 2;
pub const MM_OPTI_M16_MIDIOUT : u32 = 3;
pub const MM_OPTI_M16_WAVEIN : u32 = 4;
pub const MM_OPTI_M16_WAVEOUT : u32 = 5;
pub const MM_OPTI_M16_MIXER : u32 = 6;
pub const MM_OPTI_M16_AUX : u32 = 7;
pub const MM_OPTI_P16_FMSYNTH_STEREO : u32 = 16;
pub const MM_OPTI_P16_MIDIIN : u32 = 17;
pub const MM_OPTI_P16_MIDIOUT : u32 = 18;
pub const MM_OPTI_P16_WAVEIN : u32 = 19;
pub const MM_OPTI_P16_WAVEOUT : u32 = 20;
pub const MM_OPTI_P16_MIXER : u32 = 21;
pub const MM_OPTI_P16_AUX : u32 = 22;
pub const MM_OPTI_M32_WAVEIN : u32 = 32;
pub const MM_OPTI_M32_WAVEOUT : u32 = 33;
pub const MM_OPTI_M32_MIDIIN : u32 = 34;
pub const MM_OPTI_M32_MIDIOUT : u32 = 35;
pub const MM_OPTI_M32_SYNTH_STEREO : u32 = 36;
pub const MM_OPTI_M32_MIXER : u32 = 37;
pub const MM_OPTI_M32_AUX : u32 = 38;
pub const MM_COMPAQ_BB_WAVEIN : u32 = 1;
pub const MM_COMPAQ_BB_WAVEOUT : u32 = 2;
pub const MM_COMPAQ_BB_WAVEAUX : u32 = 3;
pub const MM_MPTUS_SPWAVEOUT : u32 = 1;
pub const MM_LERNOUT_ANDHAUSPIE_LHCODECACM : u32 = 1;
pub const MM_DIGITAL_AV320_WAVEIN : u32 = 1;
pub const MM_DIGITAL_AV320_WAVEOUT : u32 = 2;
pub const MM_DIGITAL_ACM_G723 : u32 = 3;
pub const MM_DIGITAL_ICM_H263 : u32 = 4;
pub const MM_DIGITAL_ICM_H261 : u32 = 5;
pub const MM_MOTU_MTP_MIDIOUT_ALL : u32 = 100;
pub const MM_MOTU_MTP_MIDIIN_1 : u32 = 101;
pub const MM_MOTU_MTP_MIDIOUT_1 : u32 = 101;
pub const MM_MOTU_MTP_MIDIIN_2 : u32 = 102;
pub const MM_MOTU_MTP_MIDIOUT_2 : u32 = 102;
pub const MM_MOTU_MTP_MIDIIN_3 : u32 = 103;
pub const MM_MOTU_MTP_MIDIOUT_3 : u32 = 103;
pub const MM_MOTU_MTP_MIDIIN_4 : u32 = 104;
pub const MM_MOTU_MTP_MIDIOUT_4 : u32 = 104;
pub const MM_MOTU_MTP_MIDIIN_5 : u32 = 105;
pub const MM_MOTU_MTP_MIDIOUT_5 : u32 = 105;
pub const MM_MOTU_MTP_MIDIIN_6 : u32 = 106;
pub const MM_MOTU_MTP_MIDIOUT_6 : u32 = 106;
pub const MM_MOTU_MTP_MIDIIN_7 : u32 = 107;
pub const MM_MOTU_MTP_MIDIOUT_7 : u32 = 107;
pub const MM_MOTU_MTP_MIDIIN_8 : u32 = 108;
pub const MM_MOTU_MTP_MIDIOUT_8 : u32 = 108;
pub const MM_MOTU_MTPII_MIDIOUT_ALL : u32 = 200;
pub const MM_MOTU_MTPII_MIDIIN_SYNC : u32 = 200;
pub const MM_MOTU_MTPII_MIDIIN_1 : u32 = 201;
pub const MM_MOTU_MTPII_MIDIOUT_1 : u32 = 201;
pub const MM_MOTU_MTPII_MIDIIN_2 : u32 = 202;
pub const MM_MOTU_MTPII_MIDIOUT_2 : u32 = 202;
pub const MM_MOTU_MTPII_MIDIIN_3 : u32 = 203;
pub const MM_MOTU_MTPII_MIDIOUT_3 : u32 = 203;
pub const MM_MOTU_MTPII_MIDIIN_4 : u32 = 204;
pub const MM_MOTU_MTPII_MIDIOUT_4 : u32 = 204;
pub const MM_MOTU_MTPII_MIDIIN_5 : u32 = 205;
pub const MM_MOTU_MTPII_MIDIOUT_5 : u32 = 205;
pub const MM_MOTU_MTPII_MIDIIN_6 : u32 = 206;
pub const MM_MOTU_MTPII_MIDIOUT_6 : u32 = 206;
pub const MM_MOTU_MTPII_MIDIIN_7 : u32 = 207;
pub const MM_MOTU_MTPII_MIDIOUT_7 : u32 = 207;
pub const MM_MOTU_MTPII_MIDIIN_8 : u32 = 208;
pub const MM_MOTU_MTPII_MIDIOUT_8 : u32 = 208;
pub const MM_MOTU_MTPII_NET_MIDIIN_1 : u32 = 209;
pub const MM_MOTU_MTPII_NET_MIDIOUT_1 : u32 = 209;
pub const MM_MOTU_MTPII_NET_MIDIIN_2 : u32 = 210;
pub const MM_MOTU_MTPII_NET_MIDIOUT_2 : u32 = 210;
pub const MM_MOTU_MTPII_NET_MIDIIN_3 : u32 = 211;
pub const MM_MOTU_MTPII_NET_MIDIOUT_3 : u32 = 211;
pub const MM_MOTU_MTPII_NET_MIDIIN_4 : u32 = 212;
pub const MM_MOTU_MTPII_NET_MIDIOUT_4 : u32 = 212;
pub const MM_MOTU_MTPII_NET_MIDIIN_5 : u32 = 213;
pub const MM_MOTU_MTPII_NET_MIDIOUT_5 : u32 = 213;
pub const MM_MOTU_MTPII_NET_MIDIIN_6 : u32 = 214;
pub const MM_MOTU_MTPII_NET_MIDIOUT_6 : u32 = 214;
pub const MM_MOTU_MTPII_NET_MIDIIN_7 : u32 = 215;
pub const MM_MOTU_MTPII_NET_MIDIOUT_7 : u32 = 215;
pub const MM_MOTU_MTPII_NET_MIDIIN_8 : u32 = 216;
pub const MM_MOTU_MTPII_NET_MIDIOUT_8 : u32 = 216;
pub const MM_MOTU_MXP_MIDIIN_MIDIOUT_ALL : u32 = 300;
pub const MM_MOTU_MXP_MIDIIN_SYNC : u32 = 300;
pub const MM_MOTU_MXP_MIDIIN_MIDIIN_1 : u32 = 301;
pub const MM_MOTU_MXP_MIDIIN_MIDIOUT_1 : u32 = 301;
pub const MM_MOTU_MXP_MIDIIN_MIDIIN_2 : u32 = 302;
pub const MM_MOTU_MXP_MIDIIN_MIDIOUT_2 : u32 = 302;
pub const MM_MOTU_MXP_MIDIIN_MIDIIN_3 : u32 = 303;
pub const MM_MOTU_MXP_MIDIIN_MIDIOUT_3 : u32 = 303;
pub const MM_MOTU_MXP_MIDIIN_MIDIIN_4 : u32 = 304;
pub const MM_MOTU_MXP_MIDIIN_MIDIOUT_4 : u32 = 304;
pub const MM_MOTU_MXP_MIDIIN_MIDIIN_5 : u32 = 305;
pub const MM_MOTU_MXP_MIDIIN_MIDIOUT_5 : u32 = 305;
pub const MM_MOTU_MXP_MIDIIN_MIDIIN_6 : u32 = 306;
pub const MM_MOTU_MXP_MIDIIN_MIDIOUT_6 : u32 = 306;
pub const MM_MOTU_MXPMPU_MIDIOUT_ALL : u32 = 400;
pub const MM_MOTU_MXPMPU_MIDIIN_SYNC : u32 = 400;
pub const MM_MOTU_MXPMPU_MIDIIN_1 : u32 = 401;
pub const MM_MOTU_MXPMPU_MIDIOUT_1 : u32 = 401;
pub const MM_MOTU_MXPMPU_MIDIIN_2 : u32 = 402;
pub const MM_MOTU_MXPMPU_MIDIOUT_2 : u32 = 402;
pub const MM_MOTU_MXPMPU_MIDIIN_3 : u32 = 403;
pub const MM_MOTU_MXPMPU_MIDIOUT_3 : u32 = 403;
pub const MM_MOTU_MXPMPU_MIDIIN_4 : u32 = 404;
pub const MM_MOTU_MXPMPU_MIDIOUT_4 : u32 = 404;
pub const MM_MOTU_MXPMPU_MIDIIN_5 : u32 = 405;
pub const MM_MOTU_MXPMPU_MIDIOUT_5 : u32 = 405;
pub const MM_MOTU_MXPMPU_MIDIIN_6 : u32 = 406;
pub const MM_MOTU_MXPMPU_MIDIOUT_6 : u32 = 406;
pub const MM_MOTU_MXN_MIDIOUT_ALL : u32 = 500;
pub const MM_MOTU_MXN_MIDIIN_SYNC : u32 = 500;
pub const MM_MOTU_MXN_MIDIIN_1 : u32 = 501;
pub const MM_MOTU_MXN_MIDIOUT_1 : u32 = 501;
pub const MM_MOTU_MXN_MIDIIN_2 : u32 = 502;
pub const MM_MOTU_MXN_MIDIOUT_2 : u32 = 502;
pub const MM_MOTU_MXN_MIDIIN_3 : u32 = 503;
pub const MM_MOTU_MXN_MIDIOUT_3 : u32 = 503;
pub const MM_MOTU_MXN_MIDIIN_4 : u32 = 504;
pub const MM_MOTU_MXN_MIDIOUT_4 : u32 = 504;
pub const MM_MOTU_FLYER_MIDI_IN_SYNC : u32 = 600;
pub const MM_MOTU_FLYER_MIDI_IN_A : u32 = 601;
pub const MM_MOTU_FLYER_MIDI_OUT_A : u32 = 601;
pub const MM_MOTU_FLYER_MIDI_IN_B : u32 = 602;
pub const MM_MOTU_FLYER_MIDI_OUT_B : u32 = 602;
pub const MM_MOTU_PKX_MIDI_IN_SYNC : u32 = 700;
pub const MM_MOTU_PKX_MIDI_IN_A : u32 = 701;
pub const MM_MOTU_PKX_MIDI_OUT_A : u32 = 701;
pub const MM_MOTU_PKX_MIDI_IN_B : u32 = 702;
pub const MM_MOTU_PKX_MIDI_OUT_B : u32 = 702;
pub const MM_MOTU_DTX_MIDI_IN_SYNC : u32 = 800;
pub const MM_MOTU_DTX_MIDI_IN_A : u32 = 801;
pub const MM_MOTU_DTX_MIDI_OUT_A : u32 = 801;
pub const MM_MOTU_DTX_MIDI_IN_B : u32 = 802;
pub const MM_MOTU_DTX_MIDI_OUT_B : u32 = 802;
pub const MM_MOTU_MTPAV_MIDIOUT_ALL : u32 = 900;
pub const MM_MOTU_MTPAV_MIDIIN_SYNC : u32 = 900;
pub const MM_MOTU_MTPAV_MIDIIN_1 : u32 = 901;
pub const MM_MOTU_MTPAV_MIDIOUT_1 : u32 = 901;
pub const MM_MOTU_MTPAV_MIDIIN_2 : u32 = 902;
pub const MM_MOTU_MTPAV_MIDIOUT_2 : u32 = 902;
pub const MM_MOTU_MTPAV_MIDIIN_3 : u32 = 903;
pub const MM_MOTU_MTPAV_MIDIOUT_3 : u32 = 903;
pub const MM_MOTU_MTPAV_MIDIIN_4 : u32 = 904;
pub const MM_MOTU_MTPAV_MIDIOUT_4 : u32 = 904;
pub const MM_MOTU_MTPAV_MIDIIN_5 : u32 = 905;
pub const MM_MOTU_MTPAV_MIDIOUT_5 : u32 = 905;
pub const MM_MOTU_MTPAV_MIDIIN_6 : u32 = 906;
pub const MM_MOTU_MTPAV_MIDIOUT_6 : u32 = 906;
pub const MM_MOTU_MTPAV_MIDIIN_7 : u32 = 907;
pub const MM_MOTU_MTPAV_MIDIOUT_7 : u32 = 907;
pub const MM_MOTU_MTPAV_MIDIIN_8 : u32 = 908;
pub const MM_MOTU_MTPAV_MIDIOUT_8 : u32 = 908;
pub const MM_MOTU_MTPAV_NET_MIDIIN_1 : u32 = 909;
pub const MM_MOTU_MTPAV_NET_MIDIOUT_1 : u32 = 909;
pub const MM_MOTU_MTPAV_NET_MIDIIN_2 : u32 = 910;
pub const MM_MOTU_MTPAV_NET_MIDIOUT_2 : u32 = 910;
pub const MM_MOTU_MTPAV_NET_MIDIIN_3 : u32 = 911;
pub const MM_MOTU_MTPAV_NET_MIDIOUT_3 : u32 = 911;
pub const MM_MOTU_MTPAV_NET_MIDIIN_4 : u32 = 912;
pub const MM_MOTU_MTPAV_NET_MIDIOUT_4 : u32 = 912;
pub const MM_MOTU_MTPAV_NET_MIDIIN_5 : u32 = 913;
pub const MM_MOTU_MTPAV_NET_MIDIOUT_5 : u32 = 913;
pub const MM_MOTU_MTPAV_NET_MIDIIN_6 : u32 = 914;
pub const MM_MOTU_MTPAV_NET_MIDIOUT_6 : u32 = 914;
pub const MM_MOTU_MTPAV_NET_MIDIIN_7 : u32 = 915;
pub const MM_MOTU_MTPAV_NET_MIDIOUT_7 : u32 = 915;
pub const MM_MOTU_MTPAV_NET_MIDIIN_8 : u32 = 916;
pub const MM_MOTU_MTPAV_NET_MIDIOUT_8 : u32 = 916;
pub const MM_MOTU_MTPAV_MIDIIN_ADAT : u32 = 917;
pub const MM_MOTU_MTPAV_MIDIOUT_ADAT : u32 = 917;
pub const MM_MOTU_MXPXT_MIDIIN_SYNC : u32 = 1000;
pub const MM_MOTU_MXPXT_MIDIOUT_ALL : u32 = 1000;
pub const MM_MOTU_MXPXT_MIDIIN_1 : u32 = 1001;
pub const MM_MOTU_MXPXT_MIDIOUT_1 : u32 = 1001;
pub const MM_MOTU_MXPXT_MIDIOUT_2 : u32 = 1002;
pub const MM_MOTU_MXPXT_MIDIIN_2 : u32 = 1002;
pub const MM_MOTU_MXPXT_MIDIIN_3 : u32 = 1003;
pub const MM_MOTU_MXPXT_MIDIOUT_3 : u32 = 1003;
pub const MM_MOTU_MXPXT_MIDIIN_4 : u32 = 1004;
pub const MM_MOTU_MXPXT_MIDIOUT_4 : u32 = 1004;
pub const MM_MOTU_MXPXT_MIDIIN_5 : u32 = 1005;
pub const MM_MOTU_MXPXT_MIDIOUT_5 : u32 = 1005;
pub const MM_MOTU_MXPXT_MIDIOUT_6 : u32 = 1006;
pub const MM_MOTU_MXPXT_MIDIIN_6 : u32 = 1006;
pub const MM_MOTU_MXPXT_MIDIOUT_7 : u32 = 1007;
pub const MM_MOTU_MXPXT_MIDIIN_7 : u32 = 1007;
pub const MM_MOTU_MXPXT_MIDIOUT_8 : u32 = 1008;
pub const MM_MOTU_MXPXT_MIDIIN_8 : u32 = 1008;
pub const MM_WORKBIT_MIXER : u32 = 1;
pub const MM_WORKBIT_WAVEOUT : u32 = 2;
pub const MM_WORKBIT_WAVEIN : u32 = 3;
pub const MM_WORKBIT_MIDIIN : u32 = 4;
pub const MM_WORKBIT_MIDIOUT : u32 = 5;
pub const MM_WORKBIT_FMSYNTH : u32 = 6;
pub const MM_WORKBIT_AUX : u32 = 7;
pub const MM_WORKBIT_JOYSTICK : u32 = 8;
pub const MM_OSITECH_TRUMPCARD : u32 = 1;
pub const MM_MIRO_MOVIEPRO : u32 = 1;
pub const MM_MIRO_VIDEOD1 : u32 = 2;
pub const MM_MIRO_VIDEODC1TV : u32 = 3;
pub const MM_MIRO_VIDEOTD : u32 = 4;
pub const MM_MIRO_DC30_WAVEOUT : u32 = 5;
pub const MM_MIRO_DC30_WAVEIN : u32 = 6;
pub const MM_MIRO_DC30_MIX : u32 = 7;
pub const MM_ISOLUTION_PASCAL : u32 = 1;
pub const MM_VOICEMIXER : u32 = 1;
pub const ROCKWELL_WA1_WAVEIN : u32 = 100;
pub const ROCKWELL_WA1_WAVEOUT : u32 = 101;
pub const ROCKWELL_WA1_SYNTH : u32 = 102;
pub const ROCKWELL_WA1_MIXER : u32 = 103;
pub const ROCKWELL_WA1_MPU401_IN : u32 = 104;
pub const ROCKWELL_WA1_MPU401_OUT : u32 = 105;
pub const ROCKWELL_WA2_WAVEIN : u32 = 200;
pub const ROCKWELL_WA2_WAVEOUT : u32 = 201;
pub const ROCKWELL_WA2_SYNTH : u32 = 202;
pub const ROCKWELL_WA2_MIXER : u32 = 203;
pub const ROCKWELL_WA2_MPU401_IN : u32 = 204;
pub const ROCKWELL_WA2_MPU401_OUT : u32 = 205;
pub const MM_VOXWARE_CODEC : u32 = 1;
pub const MM_NORTEL_MPXAC_WAVEIN : u32 = 1;
pub const MM_NORTEL_MPXAC_WAVEOUT : u32 = 2;
pub const MM_ADDX_PCTV_DIGITALMIX : u32 = 1;
pub const MM_ADDX_PCTV_WAVEIN : u32 = 2;
pub const MM_ADDX_PCTV_WAVEOUT : u32 = 3;
pub const MM_ADDX_PCTV_MIXER : u32 = 4;
pub const MM_ADDX_PCTV_AUX_CD : u32 = 5;
pub const MM_ADDX_PCTV_AUX_LINE : u32 = 6;
pub const MM_WILDCAT_AUTOSCOREMIDIIN : u32 = 1;
pub const MM_RHETOREX_WAVEIN : u32 = 1;
pub const MM_RHETOREX_WAVEOUT : u32 = 2;
pub const MM_BTV_WAVEIN : u32 = 1;
pub const MM_BTV_WAVEOUT : u32 = 2;
pub const MM_BTV_MIDIIN : u32 = 3;
pub const MM_BTV_MIDIOUT : u32 = 4;
pub const MM_BTV_MIDISYNTH : u32 = 5;
pub const MM_BTV_AUX_LINE : u32 = 6;
pub const MM_BTV_AUX_MIC : u32 = 7;
pub const MM_BTV_AUX_CD : u32 = 8;
pub const MM_BTV_DIGITALIN : u32 = 9;
pub const MM_BTV_DIGITALOUT : u32 = 10;
pub const MM_BTV_MIDIWAVESTREAM : u32 = 11;
pub const MM_BTV_MIXER : u32 = 12;
pub const MM_ENSONIQ_SOUNDSCAPE : u32 = 16;
pub const MM_NVIDIA_WAVEOUT : u32 = 1;
pub const MM_NVIDIA_WAVEIN : u32 = 2;
pub const MM_NVIDIA_MIDIOUT : u32 = 3;
pub const MM_NVIDIA_MIDIIN : u32 = 4;
pub const MM_NVIDIA_GAMEPORT : u32 = 5;
pub const MM_NVIDIA_MIXER : u32 = 6;
pub const MM_NVIDIA_AUX : u32 = 7;
pub const MM_OKSORI_BASE : u32 = 0;
pub const MM_DIACOUSTICS_DRUM_ACTION : u32 = 1;
pub const MM_KAY_ELEMETRICS_CSL : u32 = 17152;
pub const MM_KAY_ELEMETRICS_CSL_DAT : u32 = 17160;
pub const MM_KAY_ELEMETRICS_CSL_4CHANNEL : u32 = 17161;
pub const MM_CRYSTAL_CS4232_WAVEIN : u32 = 1;
pub const MM_CRYSTAL_CS4232_WAVEOUT : u32 = 2;
pub const MM_CRYSTAL_CS4232_WAVEMIXER : u32 = 3;
pub const MM_CRYSTAL_CS4232_WAVEAUX_AUX1 : u32 = 4;
pub const MM_CRYSTAL_CS4232_WAVEAUX_AUX2 : u32 = 5;
pub const MM_CRYSTAL_CS4232_WAVEAUX_LINE : u32 = 6;
pub const MM_CRYSTAL_CS4232_WAVEAUX_MONO : u32 = 7;
pub const MM_CRYSTAL_CS4232_WAVEAUX_MASTER : u32 = 8;
pub const MM_CRYSTAL_CS4232_MIDIIN : u32 = 9;
pub const MM_CRYSTAL_CS4232_MIDIOUT : u32 = 10;
pub const MM_CRYSTAL_CS4232_INPUTGAIN_AUX1 : u32 = 13;
pub const MM_CRYSTAL_CS4232_INPUTGAIN_LOOP : u32 = 14;
pub const MM_CRYSTAL_SOUND_FUSION_WAVEIN : u32 = 21;
pub const MM_CRYSTAL_SOUND_FUSION_WAVEOUT : u32 = 22;
pub const MM_CRYSTAL_SOUND_FUSION_MIXER : u32 = 23;
pub const MM_CRYSTAL_SOUND_FUSION_MIDIIN : u32 = 24;
pub const MM_CRYSTAL_SOUND_FUSION_MIDIOUT : u32 = 25;
pub const MM_CRYSTAL_SOUND_FUSION_JOYSTICK : u32 = 26;
pub const MM_QUARTERDECK_LHWAVEIN : u32 = 0;
pub const MM_QUARTERDECK_LHWAVEOUT : u32 = 1;
pub const MM_TDK_MW_MIDI_SYNTH : u32 = 1;
pub const MM_TDK_MW_MIDI_IN : u32 = 2;
pub const MM_TDK_MW_MIDI_OUT : u32 = 3;
pub const MM_TDK_MW_WAVE_IN : u32 = 4;
pub const MM_TDK_MW_WAVE_OUT : u32 = 5;
pub const MM_TDK_MW_AUX : u32 = 6;
pub const MM_TDK_MW_MIXER : u32 = 10;
pub const MM_TDK_MW_AUX_MASTER : u32 = 100;
pub const MM_TDK_MW_AUX_BASS : u32 = 101;
pub const MM_TDK_MW_AUX_TREBLE : u32 = 102;
pub const MM_TDK_MW_AUX_MIDI_VOL : u32 = 103;
pub const MM_TDK_MW_AUX_WAVE_VOL : u32 = 104;
pub const MM_TDK_MW_AUX_WAVE_RVB : u32 = 105;
pub const MM_TDK_MW_AUX_WAVE_CHR : u32 = 106;
pub const MM_TDK_MW_AUX_VOL : u32 = 107;
pub const MM_TDK_MW_AUX_RVB : u32 = 108;
pub const MM_TDK_MW_AUX_CHR : u32 = 109;
pub const MM_DIGITAL_AUDIO_LABS_TC : u32 = 1;
pub const MM_DIGITAL_AUDIO_LABS_DOC : u32 = 2;
pub const MM_DIGITAL_AUDIO_LABS_V8 : u32 = 16;
pub const MM_DIGITAL_AUDIO_LABS_CPRO : u32 = 17;
pub const MM_DIGITAL_AUDIO_LABS_VP : u32 = 18;
pub const MM_DIGITAL_AUDIO_LABS_CDLX : u32 = 19;
pub const MM_DIGITAL_AUDIO_LABS_CTDIF : u32 = 20;
pub const MM_SEERSYS_SEERSYNTH : u32 = 1;
pub const MM_SEERSYS_SEERWAVE : u32 = 2;
pub const MM_SEERSYS_SEERMIX : u32 = 3;
pub const MM_SEERSYS_WAVESYNTH : u32 = 4;
pub const MM_SEERSYS_WAVESYNTH_WG : u32 = 5;
pub const MM_SEERSYS_REALITY : u32 = 6;
pub const MM_OSPREY_1000WAVEIN : u32 = 1;
pub const MM_OSPREY_1000WAVEOUT : u32 = 2;
pub const MM_SOUNDESIGNS_WAVEIN : u32 = 1;
pub const MM_SOUNDESIGNS_WAVEOUT : u32 = 2;
pub const MM_SSP_SNDFESWAVEIN : u32 = 1;
pub const MM_SSP_SNDFESWAVEOUT : u32 = 2;
pub const MM_SSP_SNDFESMIDIIN : u32 = 3;
pub const MM_SSP_SNDFESMIDIOUT : u32 = 4;
pub const MM_SSP_SNDFESSYNTH : u32 = 5;
pub const MM_SSP_SNDFESMIX : u32 = 6;
pub const MM_SSP_SNDFESAUX : u32 = 7;
pub const MM_ECS_AADF_MIDI_IN : u32 = 10;
pub const MM_ECS_AADF_MIDI_OUT : u32 = 11;
pub const MM_ECS_AADF_WAVE2MIDI_IN : u32 = 12;
pub const MM_AMD_INTERWAVE_WAVEIN : u32 = 1;
pub const MM_AMD_INTERWAVE_WAVEOUT : u32 = 2;
pub const MM_AMD_INTERWAVE_SYNTH : u32 = 3;
pub const MM_AMD_INTERWAVE_MIXER1 : u32 = 4;
pub const MM_AMD_INTERWAVE_MIXER2 : u32 = 5;
pub const MM_AMD_INTERWAVE_JOYSTICK : u32 = 6;
pub const MM_AMD_INTERWAVE_EX_CD : u32 = 7;
pub const MM_AMD_INTERWAVE_MIDIIN : u32 = 8;
pub const MM_AMD_INTERWAVE_MIDIOUT : u32 = 9;
pub const MM_AMD_INTERWAVE_AUX1 : u32 = 10;
pub const MM_AMD_INTERWAVE_AUX2 : u32 = 11;
pub const MM_AMD_INTERWAVE_AUX_MIC : u32 = 12;
pub const MM_AMD_INTERWAVE_AUX_CD : u32 = 13;
pub const MM_AMD_INTERWAVE_MONO_IN : u32 = 14;
pub const MM_AMD_INTERWAVE_MONO_OUT : u32 = 15;
pub const MM_AMD_INTERWAVE_EX_TELEPHONY : u32 = 16;
pub const MM_AMD_INTERWAVE_WAVEOUT_BASE : u32 = 17;
pub const MM_AMD_INTERWAVE_WAVEOUT_TREBLE : u32 = 18;
pub const MM_AMD_INTERWAVE_STEREO_ENHANCED : u32 = 19;
pub const MM_COREDYNAMICS_DYNAMIXHR : u32 = 1;
pub const MM_COREDYNAMICS_DYNASONIX_SYNTH : u32 = 2;
pub const MM_COREDYNAMICS_DYNASONIX_MIDI_IN : u32 = 3;
pub const MM_COREDYNAMICS_DYNASONIX_MIDI_OUT : u32 = 4;
pub const MM_COREDYNAMICS_DYNASONIX_WAVE_IN : u32 = 5;
pub const MM_COREDYNAMICS_DYNASONIX_WAVE_OUT : u32 = 6;
pub const MM_COREDYNAMICS_DYNASONIX_AUDIO_IN : u32 = 7;
pub const MM_COREDYNAMICS_DYNASONIX_AUDIO_OUT : u32 = 8;
pub const MM_COREDYNAMICS_DYNAGRAFX_VGA : u32 = 9;
pub const MM_COREDYNAMICS_DYNAGRAFX_WAVE_IN : u32 = 10;
pub const MM_COREDYNAMICS_DYNAGRAFX_WAVE_OUT : u32 = 11;
pub const MM_CANAM_CBXWAVEOUT : u32 = 1;
pub const MM_CANAM_CBXWAVEIN : u32 = 2;
pub const MM_SOFTSOUND_CODEC : u32 = 1;
pub const MM_NORRIS_VOICELINK : u32 = 1;
pub const MM_DDD_MIDILINK_MIDIIN : u32 = 1;
pub const MM_DDD_MIDILINK_MIDIOUT : u32 = 2;
pub const MM_EUPHONICS_AUX_CD : u32 = 1;
pub const MM_EUPHONICS_AUX_LINE : u32 = 2;
pub const MM_EUPHONICS_AUX_MASTER : u32 = 3;
pub const MM_EUPHONICS_AUX_MIC : u32 = 4;
pub const MM_EUPHONICS_AUX_MIDI : u32 = 5;
pub const MM_EUPHONICS_AUX_WAVE : u32 = 6;
pub const MM_EUPHONICS_FMSYNTH_MONO : u32 = 7;
pub const MM_EUPHONICS_FMSYNTH_STEREO : u32 = 8;
pub const MM_EUPHONICS_MIDIIN : u32 = 9;
pub const MM_EUPHONICS_MIDIOUT : u32 = 10;
pub const MM_EUPHONICS_MIXER : u32 = 11;
pub const MM_EUPHONICS_WAVEIN : u32 = 12;
pub const MM_EUPHONICS_WAVEOUT : u32 = 13;
pub const MM_EUPHONICS_EUSYNTH : u32 = 14;
pub const CRYSTAL_NET_SFM_CODEC : u32 = 1;
pub const MM_CHROMATIC_M1 : u32 = 1;
pub const MM_CHROMATIC_M1_WAVEIN : u32 = 2;
pub const MM_CHROMATIC_M1_WAVEOUT : u32 = 3;
pub const MM_CHROMATIC_M1_FMSYNTH : u32 = 4;
pub const MM_CHROMATIC_M1_MIXER : u32 = 5;
pub const MM_CHROMATIC_M1_AUX : u32 = 6;
pub const MM_CHROMATIC_M1_AUX_CD : u32 = 7;
pub const MM_CHROMATIC_M1_MIDIIN : u32 = 8;
pub const MM_CHROMATIC_M1_MIDIOUT : u32 = 9;
pub const MM_CHROMATIC_M1_WTSYNTH : u32 = 16;
pub const MM_CHROMATIC_M1_MPEGWAVEIN : u32 = 17;
pub const MM_CHROMATIC_M1_MPEGWAVEOUT : u32 = 18;
pub const MM_CHROMATIC_M2 : u32 = 19;
pub const MM_CHROMATIC_M2_WAVEIN : u32 = 20;
pub const MM_CHROMATIC_M2_WAVEOUT : u32 = 21;
pub const MM_CHROMATIC_M2_FMSYNTH : u32 = 22;
pub const MM_CHROMATIC_M2_MIXER : u32 = 23;
pub const MM_CHROMATIC_M2_AUX : u32 = 24;
pub const MM_CHROMATIC_M2_AUX_CD : u32 = 25;
pub const MM_CHROMATIC_M2_MIDIIN : u32 = 32;
pub const MM_CHROMATIC_M2_MIDIOUT : u32 = 33;
pub const MM_CHROMATIC_M2_WTSYNTH : u32 = 34;
pub const MM_CHROMATIC_M2_MPEGWAVEIN : u32 = 35;
pub const MM_CHROMATIC_M2_MPEGWAVEOUT : u32 = 36;
pub const MM_VIENNASYS_TSP_WAVE_DRIVER : u32 = 1;
pub const MM_CONNECTIX_VIDEC_CODEC : u32 = 1;
pub const MM_GADGETLABS_WAVE44_WAVEIN : u32 = 1;
pub const MM_GADGETLABS_WAVE44_WAVEOUT : u32 = 2;
pub const MM_GADGETLABS_WAVE42_WAVEIN : u32 = 3;
pub const MM_GADGETLABS_WAVE42_WAVEOUT : u32 = 4;
pub const MM_GADGETLABS_WAVE4_MIDIIN : u32 = 5;
pub const MM_GADGETLABS_WAVE4_MIDIOUT : u32 = 6;
pub const MM_FRONTIER_WAVECENTER_MIDIIN : u32 = 1;
pub const MM_FRONTIER_WAVECENTER_MIDIOUT : u32 = 2;
pub const MM_FRONTIER_WAVECENTER_WAVEIN : u32 = 3;
pub const MM_FRONTIER_WAVECENTER_WAVEOUT : u32 = 4;
pub const MM_VIONA_QVINPCI_MIXER : u32 = 1;
pub const MM_VIONA_QVINPCI_WAVEIN : u32 = 2;
pub const MM_VIONAQVINPCI_WAVEOUT : u32 = 3;
pub const MM_VIONA_BUSTER_MIXER : u32 = 4;
pub const MM_VIONA_CINEMASTER_MIXER : u32 = 5;
pub const MM_VIONA_CONCERTO_MIXER : u32 = 6;
pub const MM_CASIO_WP150_MIDIOUT : u32 = 1;
pub const MM_CASIO_WP150_MIDIIN : u32 = 2;
pub const MM_CASIO_LSG_MIDIOUT : u32 = 3;
pub const MM_DIMD_PLATFORM : u32 = 0;
pub const MM_DIMD_DIRSOUND : u32 = 1;
pub const MM_DIMD_VIRTMPU : u32 = 2;
pub const MM_DIMD_VIRTSB : u32 = 3;
pub const MM_DIMD_VIRTJOY : u32 = 4;
pub const MM_DIMD_WAVEIN : u32 = 5;
pub const MM_DIMD_WAVEOUT : u32 = 6;
pub const MM_DIMD_MIDIIN : u32 = 7;
pub const MM_DIMD_MIDIOUT : u32 = 8;
pub const MM_DIMD_AUX_LINE : u32 = 9;
pub const MM_DIMD_MIXER : u32 = 10;
pub const MM_DIMD_WSS_WAVEIN : u32 = 14;
pub const MM_DIMD_WSS_WAVEOUT : u32 = 15;
pub const MM_DIMD_WSS_MIXER : u32 = 17;
pub const MM_DIMD_WSS_AUX : u32 = 21;
pub const MM_DIMD_WSS_SYNTH : u32 = 76;
pub const MM_S3_WAVEOUT : u32 = 1;
pub const MM_S3_WAVEIN : u32 = 2;
pub const MM_S3_MIDIOUT : u32 = 3;
pub const MM_S3_MIDIIN : u32 = 4;
pub const MM_S3_FMSYNTH : u32 = 5;
pub const MM_S3_MIXER : u32 = 6;
pub const MM_S3_AUX : u32 = 7;
pub const MM_VKC_MPU401_MIDIIN : u32 = 256;
pub const MM_VKC_SERIAL_MIDIIN : u32 = 257;
pub const MM_VKC_MPU401_MIDIOUT : u32 = 512;
pub const MM_VKC_SERIAL_MIDIOUT : u32 = 513;
pub const MM_ZEFIRO_ZA2 : u32 = 2;
pub const MM_FHGIIS_MPEGLAYER3_DECODE : u32 = 9;
pub const MM_FHGIIS_MPEGLAYER3 : u32 = 10;
pub const MM_FHGIIS_MPEGLAYER3_LITE : u32 = 10;
pub const MM_FHGIIS_MPEGLAYER3_BASIC : u32 = 11;
pub const MM_FHGIIS_MPEGLAYER3_ADVANCED : u32 = 12;
pub const MM_FHGIIS_MPEGLAYER3_PROFESSIONAL : u32 = 13;
pub const MM_FHGIIS_MPEGLAYER3_ADVANCEDPLUS : u32 = 14;
pub const MM_QUICKNET_PJWAVEIN : u32 = 1;
pub const MM_QUICKNET_PJWAVEOUT : u32 = 2;
pub const MM_SICRESOURCE_SSO3D : u32 = 2;
pub const MM_SICRESOURCE_SSOW3DI : u32 = 3;
pub const MM_NEOMAGIC_SYNTH : u32 = 1;
pub const MM_NEOMAGIC_WAVEOUT : u32 = 2;
pub const MM_NEOMAGIC_WAVEIN : u32 = 3;
pub const MM_NEOMAGIC_MIDIOUT : u32 = 4;
pub const MM_NEOMAGIC_MIDIIN : u32 = 5;
pub const MM_NEOMAGIC_AUX : u32 = 6;
pub const MM_NEOMAGIC_MW3DX_WAVEOUT : u32 = 10;
pub const MM_NEOMAGIC_MW3DX_WAVEIN : u32 = 11;
pub const MM_NEOMAGIC_MW3DX_MIDIOUT : u32 = 12;
pub const MM_NEOMAGIC_MW3DX_MIDIIN : u32 = 13;
pub const MM_NEOMAGIC_MW3DX_FMSYNTH : u32 = 14;
pub const MM_NEOMAGIC_MW3DX_GMSYNTH : u32 = 15;
pub const MM_NEOMAGIC_MW3DX_MIXER : u32 = 16;
pub const MM_NEOMAGIC_MW3DX_AUX : u32 = 17;
pub const MM_NEOMAGIC_MWAVE_WAVEOUT : u32 = 20;
pub const MM_NEOMAGIC_MWAVE_WAVEIN : u32 = 21;
pub const MM_NEOMAGIC_MWAVE_MIDIOUT : u32 = 22;
pub const MM_NEOMAGIC_MWAVE_MIDIIN : u32 = 23;
pub const MM_NEOMAGIC_MWAVE_MIXER : u32 = 24;
pub const MM_NEOMAGIC_MWAVE_AUX : u32 = 25;
pub const MM_MERGING_MPEGL3 : u32 = 1;
pub const MM_XIRLINK_VISIONLINK : u32 = 1;
pub const MM_OTI_611WAVEIN : u32 = 5;
pub const MM_OTI_611WAVEOUT : u32 = 6;
pub const MM_OTI_611MIXER : u32 = 7;
pub const MM_OTI_611MIDIN : u32 = 18;
pub const MM_OTI_611MIDIOUT : u32 = 19;
pub const MM_AUREAL_AU8820 : u32 = 16;
pub const MM_AU8820_SYNTH : u32 = 17;
pub const MM_AU8820_WAVEOUT : u32 = 18;
pub const MM_AU8820_WAVEIN : u32 = 19;
pub const MM_AU8820_MIXER : u32 = 20;
pub const MM_AU8820_AUX : u32 = 21;
pub const MM_AU8820_MIDIOUT : u32 = 22;
pub const MM_AU8820_MIDIIN : u32 = 23;
pub const MM_AUREAL_AU8830 : u32 = 32;
pub const MM_AU8830_SYNTH : u32 = 33;
pub const MM_AU8830_WAVEOUT : u32 = 34;
pub const MM_AU8830_WAVEIN : u32 = 35;
pub const MM_AU8830_MIXER : u32 = 36;
pub const MM_AU8830_AUX : u32 = 37;
pub const MM_AU8830_MIDIOUT : u32 = 38;
pub const MM_AU8830_MIDIIN : u32 = 39;
pub const MM_VIVO_AUDIO_CODEC : u32 = 1;
pub const MM_SHARP_MDC_MIDI_SYNTH : u32 = 1;
pub const MM_SHARP_MDC_MIDI_IN : u32 = 2;
pub const MM_SHARP_MDC_MIDI_OUT : u32 = 3;
pub const MM_SHARP_MDC_WAVE_IN : u32 = 4;
pub const MM_SHARP_MDC_WAVE_OUT : u32 = 5;
pub const MM_SHARP_MDC_AUX : u32 = 6;
pub const MM_SHARP_MDC_MIXER : u32 = 10;
pub const MM_SHARP_MDC_AUX_MASTER : u32 = 100;
pub const MM_SHARP_MDC_AUX_BASS : u32 = 101;
pub const MM_SHARP_MDC_AUX_TREBLE : u32 = 102;
pub const MM_SHARP_MDC_AUX_MIDI_VOL : u32 = 103;
pub const MM_SHARP_MDC_AUX_WAVE_VOL : u32 = 104;
pub const MM_SHARP_MDC_AUX_WAVE_RVB : u32 = 105;
pub const MM_SHARP_MDC_AUX_WAVE_CHR : u32 = 106;
pub const MM_SHARP_MDC_AUX_VOL : u32 = 107;
pub const MM_SHARP_MDC_AUX_RVB : u32 = 108;
pub const MM_SHARP_MDC_AUX_CHR : u32 = 109;
pub const MM_LUCENT_ACM_G723 : u32 = 0;
pub const MM_ATT_G729A : u32 = 1;
pub const MM_MARIAN_ARC44WAVEIN : u32 = 1;
pub const MM_MARIAN_ARC44WAVEOUT : u32 = 2;
pub const MM_MARIAN_PRODIF24WAVEIN : u32 = 3;
pub const MM_MARIAN_PRODIF24WAVEOUT : u32 = 4;
pub const MM_MARIAN_ARC88WAVEIN : u32 = 5;
pub const MM_MARIAN_ARC88WAVEOUT : u32 = 6;
pub const MM_BCB_NETBOARD_10 : u32 = 1;
pub const MM_BCB_TT75_10 : u32 = 2;
pub const MM_MOTIONPIXELS_MVI2 : u32 = 1;
pub const MM_QDESIGN_ACM_MPEG : u32 = 1;
pub const MM_QDESIGN_ACM_QDESIGN_MUSIC : u32 = 2;
pub const MM_NMP_CCP_WAVEIN : u32 = 1;
pub const MM_NMP_CCP_WAVEOUT : u32 = 2;
pub const MM_NMP_ACM_AMR : u32 = 10;
pub const MM_DF_ACM_G726 : u32 = 1;
pub const MM_DF_ACM_GSM610 : u32 = 2;
pub const MM_BERCOS_WAVEIN : u32 = 1;
pub const MM_BERCOS_MIXER : u32 = 2;
pub const MM_BERCOS_WAVEOUT : u32 = 3;
pub const MM_ONLIVE_MPCODEC : u32 = 1;
pub const MM_PHONET_PP_WAVEOUT : u32 = 1;
pub const MM_PHONET_PP_WAVEIN : u32 = 2;
pub const MM_PHONET_PP_MIXER : u32 = 3;
pub const MM_FTR_ENCODER_WAVEIN : u32 = 1;
pub const MM_FTR_ACM : u32 = 2;
pub const MM_ENET_T2000_LINEIN : u32 = 1;
pub const MM_ENET_T2000_LINEOUT : u32 = 2;
pub const MM_ENET_T2000_HANDSETIN : u32 = 3;
pub const MM_ENET_T2000_HANDSETOUT : u32 = 4;
pub const MM_EMAGIC_UNITOR8 : u32 = 1;
pub const MM_SIPROLAB_ACELPNET : u32 = 1;
pub const MM_DICTAPHONE_G726 : u32 = 1;
pub const MM_RZS_ACM_TUBGSM : u32 = 1;
pub const MM_EES_PCMIDI14 : u32 = 1;
pub const MM_EES_PCMIDI14_IN : u32 = 2;
pub const MM_EES_PCMIDI14_OUT1 : u32 = 3;
pub const MM_EES_PCMIDI14_OUT2 : u32 = 4;
pub const MM_EES_PCMIDI14_OUT3 : u32 = 5;
pub const MM_EES_PCMIDI14_OUT4 : u32 = 6;
pub const MM_HAFTMANN_LPTDAC2 : u32 = 1;
pub const MM_LUCID_PCI24WAVEIN : u32 = 1;
pub const MM_LUCID_PCI24WAVEOUT : u32 = 2;
pub const MM_HEADSPACE_HAESYNTH : u32 = 1;
pub const MM_HEADSPACE_HAEWAVEOUT : u32 = 2;
pub const MM_HEADSPACE_HAEWAVEIN : u32 = 3;
pub const MM_HEADSPACE_HAEMIXER : u32 = 4;
pub const MM_UNISYS_ACM_NAP : u32 = 1;
pub const MM_LUMINOSITI_SCWAVEIN : u32 = 1;
pub const MM_LUMINOSITI_SCWAVEOUT : u32 = 2;
pub const MM_LUMINOSITI_SCWAVEMIX : u32 = 3;
pub const MM_ACTIVEVOICE_ACM_VOXADPCM : u32 = 1;
pub const MM_DTS_DS : u32 = 1;
pub const MM_SOFTLAB_NSK_FRW_WAVEIN : u32 = 1;
pub const MM_SOFTLAB_NSK_FRW_WAVEOUT : u32 = 2;
pub const MM_SOFTLAB_NSK_FRW_MIXER : u32 = 3;
pub const MM_SOFTLAB_NSK_FRW_AUX : u32 = 4;
pub const MM_FORTEMEDIA_WAVEIN : u32 = 1;
pub const MM_FORTEMEDIA_WAVEOUT : u32 = 2;
pub const MM_FORTEMEDIA_FMSYNC : u32 = 3;
pub const MM_FORTEMEDIA_MIXER : u32 = 4;
pub const MM_FORTEMEDIA_AUX : u32 = 5;
pub const MM_SONORUS_STUDIO : u32 = 1;
pub const MM_I_LINK_VOICE_CODER : u32 = 1;
pub const MM_SELSIUS_SYSTEMS_RTPWAVEOUT : u32 = 1;
pub const MM_SELSIUS_SYSTEMS_RTPWAVEIN : u32 = 2;
pub const MM_ADMOS_FM_SYNTH : u32 = 1;
pub const MM_ADMOS_QS3AMIDIOUT : u32 = 2;
pub const MM_ADMOS_QS3AMIDIIN : u32 = 3;
pub const MM_ADMOS_QS3AWAVEOUT : u32 = 4;
pub const MM_ADMOS_QS3AWAVEIN : u32 = 5;
pub const MM_LEXICON_STUDIO_WAVE_OUT : u32 = 1;
pub const MM_LEXICON_STUDIO_WAVE_IN : u32 = 2;
pub const MM_SGI_320_WAVEIN : u32 = 1;
pub const MM_SGI_320_WAVEOUT : u32 = 2;
pub const MM_SGI_320_MIXER : u32 = 3;
pub const MM_SGI_540_WAVEIN : u32 = 4;
pub const MM_SGI_540_WAVEOUT : u32 = 5;
pub const MM_SGI_540_MIXER : u32 = 6;
pub const MM_SGI_RAD_ADATMONO1_WAVEIN : u32 = 7;
pub const MM_SGI_RAD_ADATMONO2_WAVEIN : u32 = 8;
pub const MM_SGI_RAD_ADATMONO3_WAVEIN : u32 = 9;
pub const MM_SGI_RAD_ADATMONO4_WAVEIN : u32 = 10;
pub const MM_SGI_RAD_ADATMONO5_WAVEIN : u32 = 11;
pub const MM_SGI_RAD_ADATMONO6_WAVEIN : u32 = 12;
pub const MM_SGI_RAD_ADATMONO7_WAVEIN : u32 = 13;
pub const MM_SGI_RAD_ADATMONO8_WAVEIN : u32 = 14;
pub const MM_SGI_RAD_ADATSTEREO12_WAVEIN : u32 = 15;
pub const MM_SGI_RAD_ADATSTEREO34_WAVEIN : u32 = 16;
pub const MM_SGI_RAD_ADATSTEREO56_WAVEIN : u32 = 17;
pub const MM_SGI_RAD_ADATSTEREO78_WAVEIN : u32 = 18;
pub const MM_SGI_RAD_ADAT8CHAN_WAVEIN : u32 = 19;
pub const MM_SGI_RAD_ADATMONO1_WAVEOUT : u32 = 20;
pub const MM_SGI_RAD_ADATMONO2_WAVEOUT : u32 = 21;
pub const MM_SGI_RAD_ADATMONO3_WAVEOUT : u32 = 22;
pub const MM_SGI_RAD_ADATMONO4_WAVEOUT : u32 = 23;
pub const MM_SGI_RAD_ADATMONO5_WAVEOUT : u32 = 24;
pub const MM_SGI_RAD_ADATMONO6_WAVEOUT : u32 = 25;
pub const MM_SGI_RAD_ADATMONO7_WAVEOUT : u32 = 26;
pub const MM_SGI_RAD_ADATMONO8_WAVEOUT : u32 = 27;
pub const MM_SGI_RAD_ADATSTEREO12_WAVEOUT : u32 = 28;
pub const MM_SGI_RAD_ADATSTEREO32_WAVEOUT : u32 = 29;
pub const MM_SGI_RAD_ADATSTEREO56_WAVEOUT : u32 = 30;
pub const MM_SGI_RAD_ADATSTEREO78_WAVEOUT : u32 = 31;
pub const MM_SGI_RAD_ADAT8CHAN_WAVEOUT : u32 = 32;
pub const MM_SGI_RAD_AESMONO1_WAVEIN : u32 = 33;
pub const MM_SGI_RAD_AESMONO2_WAVEIN : u32 = 34;
pub const MM_SGI_RAD_AESSTEREO_WAVEIN : u32 = 35;
pub const MM_SGI_RAD_AESMONO1_WAVEOUT : u32 = 36;
pub const MM_SGI_RAD_AESMONO2_WAVEOUT : u32 = 37;
pub const MM_SGI_RAD_AESSTEREO_WAVEOUT : u32 = 38;
pub const MM_IPI_ACM_HSX : u32 = 1;
pub const MM_IPI_ACM_RPELP : u32 = 2;
pub const MM_IPI_WF_ASSS : u32 = 3;
pub const MM_IPI_AT_WAVEOUT : u32 = 4;
pub const MM_IPI_AT_WAVEIN : u32 = 5;
pub const MM_IPI_AT_MIXER : u32 = 6;
pub const MM_ICE_WAVEOUT : u32 = 1;
pub const MM_ICE_WAVEIN : u32 = 2;
pub const MM_ICE_MTWAVEOUT : u32 = 3;
pub const MM_ICE_MTWAVEIN : u32 = 4;
pub const MM_ICE_MIDIOUT1 : u32 = 5;
pub const MM_ICE_MIDIIN1 : u32 = 6;
pub const MM_ICE_MIDIOUT2 : u32 = 7;
pub const MM_ICE_MIDIIN2 : u32 = 8;
pub const MM_ICE_SYNTH : u32 = 9;
pub const MM_ICE_MIXER : u32 = 10;
pub const MM_ICE_AUX : u32 = 11;
pub const MM_VQST_VQC1 : u32 = 1;
pub const MM_VQST_VQC2 : u32 = 2;
pub const MM_ETEK_KWIKMIDI_MIDIIN : u32 = 1;
pub const MM_ETEK_KWIKMIDI_MIDIOUT : u32 = 2;
pub const MM_INTERNET_SSW_MIDIOUT : u32 = 10;
pub const MM_INTERNET_SSW_MIDIIN : u32 = 11;
pub const MM_INTERNET_SSW_WAVEOUT : u32 = 12;
pub const MM_INTERNET_SSW_WAVEIN : u32 = 13;
pub const MM_SONY_ACM_SCX : u32 = 1;
pub const MM_UH_ACM_ADPCM : u32 = 1;
pub const MM_SYDEC_NV_WAVEIN : u32 = 1;
pub const MM_SYDEC_NV_WAVEOUT : u32 = 2;
pub const MM_FLEXION_X300_WAVEIN : u32 = 1;
pub const MM_FLEXION_X300_WAVEOUT : u32 = 2;
pub const MM_VIA_WAVEOUT : u32 = 1;
pub const MM_VIA_WAVEIN : u32 = 2;
pub const MM_VIA_MIXER : u32 = 3;
pub const MM_VIA_AUX : u32 = 4;
pub const MM_VIA_MPU401_MIDIOUT : u32 = 5;
pub const MM_VIA_MPU401_MIDIIN : u32 = 6;
pub const MM_VIA_SWFM_SYNTH : u32 = 7;
pub const MM_VIA_WDM_WAVEOUT : u32 = 8;
pub const MM_VIA_WDM_WAVEIN : u32 = 9;
pub const MM_VIA_WDM_MIXER : u32 = 10;
pub const MM_VIA_WDM_MPU401_MIDIOUT : u32 = 11;
pub const MM_VIA_WDM_MPU401_MIDIIN : u32 = 12;
pub const MM_MICRONAS_SC4 : u32 = 1;
pub const MM_MICRONAS_CLP833 : u32 = 2;
pub const MM_HP_WAVEOUT : u32 = 1;
pub const MM_HP_WAVEIN : u32 = 2;
pub const MM_QUICKAUDIO_MINIMIDI : u32 = 1;
pub const MM_QUICKAUDIO_MAXIMIDI : u32 = 2;
pub const MM_ICCC_UNA3_WAVEIN : u32 = 1;
pub const MM_ICCC_UNA3_WAVEOUT : u32 = 2;
pub const MM_ICCC_UNA3_AUX : u32 = 3;
pub const MM_ICCC_UNA3_MIXER : u32 = 4;
pub const MM_3COM_CB_MIXER : u32 = 1;
pub const MM_3COM_CB_WAVEIN : u32 = 2;
pub const MM_3COM_CB_WAVEOUT : u32 = 3;
pub const MM_MINDMAKER_GC_WAVEIN : u32 = 1;
pub const MM_MINDMAKER_GC_WAVEOUT : u32 = 2;
pub const MM_MINDMAKER_GC_MIXER : u32 = 3;
pub const MM_TELEKOL_WAVEOUT : u32 = 1;
pub const MM_TELEKOL_WAVEIN : u32 = 2;
pub const MM_ALGOVISION_VB80WAVEOUT : u32 = 1;
pub const MM_ALGOVISION_VB80WAVEIN : u32 = 2;
pub const MM_ALGOVISION_VB80MIXER : u32 = 3;
pub const MM_ALGOVISION_VB80AUX : u32 = 4;
pub const MM_ALGOVISION_VB80AUX2 : u32 = 5;
pub const WAVE_FORMAT_UNKNOWN : u32 = 0;
pub const WAVE_FORMAT_ADPCM : u32 = 2;
pub const WAVE_FORMAT_IEEE_FLOAT : u32 = 3;
pub const WAVE_FORMAT_VSELP : u32 = 4;
pub const WAVE_FORMAT_IBM_CVSD : u32 = 5;
pub const WAVE_FORMAT_ALAW : u32 = 6;
pub const WAVE_FORMAT_MULAW : u32 = 7;
pub const WAVE_FORMAT_DTS : u32 = 8;
pub const WAVE_FORMAT_DRM : u32 = 9;
pub const WAVE_FORMAT_WMAVOICE9 : u32 = 10;
pub const WAVE_FORMAT_WMAVOICE10 : u32 = 11;
pub const WAVE_FORMAT_OKI_ADPCM : u32 = 16;
pub const WAVE_FORMAT_DVI_ADPCM : u32 = 17;
pub const WAVE_FORMAT_MEDIASPACE_ADPCM : u32 = 18;
pub const WAVE_FORMAT_SIERRA_ADPCM : u32 = 19;
pub const WAVE_FORMAT_G723_ADPCM : u32 = 20;
pub const WAVE_FORMAT_DIGISTD : u32 = 21;
pub const WAVE_FORMAT_DIGIFIX : u32 = 22;
pub const WAVE_FORMAT_DIALOGIC_OKI_ADPCM : u32 = 23;
pub const WAVE_FORMAT_MEDIAVISION_ADPCM : u32 = 24;
pub const WAVE_FORMAT_CU_CODEC : u32 = 25;
pub const WAVE_FORMAT_HP_DYN_VOICE : u32 = 26;
pub const WAVE_FORMAT_YAMAHA_ADPCM : u32 = 32;
pub const WAVE_FORMAT_SONARC : u32 = 33;
pub const WAVE_FORMAT_DSPGROUP_TRUESPEECH : u32 = 34;
pub const WAVE_FORMAT_ECHOSC1 : u32 = 35;
pub const WAVE_FORMAT_AUDIOFILE_AF36 : u32 = 36;
pub const WAVE_FORMAT_APTX : u32 = 37;
pub const WAVE_FORMAT_AUDIOFILE_AF10 : u32 = 38;
pub const WAVE_FORMAT_PROSODY_1612 : u32 = 39;
pub const WAVE_FORMAT_LRC : u32 = 40;
pub const WAVE_FORMAT_DOLBY_AC2 : u32 = 48;
pub const WAVE_FORMAT_GSM610 : u32 = 49;
pub const WAVE_FORMAT_MSNAUDIO : u32 = 50;
pub const WAVE_FORMAT_ANTEX_ADPCME : u32 = 51;
pub const WAVE_FORMAT_CONTROL_RES_VQLPC : u32 = 52;
pub const WAVE_FORMAT_DIGIREAL : u32 = 53;
pub const WAVE_FORMAT_DIGIADPCM : u32 = 54;
pub const WAVE_FORMAT_CONTROL_RES_CR10 : u32 = 55;
pub const WAVE_FORMAT_NMS_VBXADPCM : u32 = 56;
pub const WAVE_FORMAT_CS_IMAADPCM : u32 = 57;
pub const WAVE_FORMAT_ECHOSC3 : u32 = 58;
pub const WAVE_FORMAT_ROCKWELL_ADPCM : u32 = 59;
pub const WAVE_FORMAT_ROCKWELL_DIGITALK : u32 = 60;
pub const WAVE_FORMAT_XEBEC : u32 = 61;
pub const WAVE_FORMAT_G721_ADPCM : u32 = 64;
pub const WAVE_FORMAT_G728_CELP : u32 = 65;
pub const WAVE_FORMAT_MSG723 : u32 = 66;
pub const WAVE_FORMAT_INTEL_G723_1 : u32 = 67;
pub const WAVE_FORMAT_INTEL_G729 : u32 = 68;
pub const WAVE_FORMAT_SHARP_G726 : u32 = 69;
pub const WAVE_FORMAT_MPEG : u32 = 80;
pub const WAVE_FORMAT_RT24 : u32 = 82;
pub const WAVE_FORMAT_PAC : u32 = 83;
pub const WAVE_FORMAT_MPEGLAYER3 : u32 = 85;
pub const WAVE_FORMAT_LUCENT_G723 : u32 = 89;
pub const WAVE_FORMAT_CIRRUS : u32 = 96;
pub const WAVE_FORMAT_ESPCM : u32 = 97;
pub const WAVE_FORMAT_VOXWARE : u32 = 98;
pub const WAVE_FORMAT_CANOPUS_ATRAC : u32 = 99;
pub const WAVE_FORMAT_G726_ADPCM : u32 = 100;
pub const WAVE_FORMAT_G722_ADPCM : u32 = 101;
pub const WAVE_FORMAT_DSAT : u32 = 102;
pub const WAVE_FORMAT_DSAT_DISPLAY : u32 = 103;
pub const WAVE_FORMAT_VOXWARE_BYTE_ALIGNED : u32 = 105;
pub const WAVE_FORMAT_VOXWARE_AC8 : u32 = 112;
pub const WAVE_FORMAT_VOXWARE_AC10 : u32 = 113;
pub const WAVE_FORMAT_VOXWARE_AC16 : u32 = 114;
pub const WAVE_FORMAT_VOXWARE_AC20 : u32 = 115;
pub const WAVE_FORMAT_VOXWARE_RT24 : u32 = 116;
pub const WAVE_FORMAT_VOXWARE_RT29 : u32 = 117;
pub const WAVE_FORMAT_VOXWARE_RT29HW : u32 = 118;
pub const WAVE_FORMAT_VOXWARE_VR12 : u32 = 119;
pub const WAVE_FORMAT_VOXWARE_VR18 : u32 = 120;
pub const WAVE_FORMAT_VOXWARE_TQ40 : u32 = 121;
pub const WAVE_FORMAT_VOXWARE_SC3 : u32 = 122;
pub const WAVE_FORMAT_VOXWARE_SC3_1 : u32 = 123;
pub const WAVE_FORMAT_SOFTSOUND : u32 = 128;
pub const WAVE_FORMAT_VOXWARE_TQ60 : u32 = 129;
pub const WAVE_FORMAT_MSRT24 : u32 = 130;
pub const WAVE_FORMAT_G729A : u32 = 131;
pub const WAVE_FORMAT_MVI_MVI2 : u32 = 132;
pub const WAVE_FORMAT_DF_G726 : u32 = 133;
pub const WAVE_FORMAT_DF_GSM610 : u32 = 134;
pub const WAVE_FORMAT_ISIAUDIO : u32 = 136;
pub const WAVE_FORMAT_ONLIVE : u32 = 137;
pub const WAVE_FORMAT_MULTITUDE_FT_SX20 : u32 = 138;
pub const WAVE_FORMAT_INFOCOM_ITS_G721_ADPCM : u32 = 139;
pub const WAVE_FORMAT_CONVEDIA_G729 : u32 = 140;
pub const WAVE_FORMAT_CONGRUENCY : u32 = 141;
pub const WAVE_FORMAT_SBC24 : u32 = 145;
pub const WAVE_FORMAT_DOLBY_AC3_SPDIF : u32 = 146;
pub const WAVE_FORMAT_MEDIASONIC_G723 : u32 = 147;
pub const WAVE_FORMAT_PROSODY_8KBPS : u32 = 148;
pub const WAVE_FORMAT_ZYXEL_ADPCM : u32 = 151;
pub const WAVE_FORMAT_PHILIPS_LPCBB : u32 = 152;
pub const WAVE_FORMAT_PACKED : u32 = 153;
pub const WAVE_FORMAT_MALDEN_PHONYTALK : u32 = 160;
pub const WAVE_FORMAT_RACAL_RECORDER_GSM : u32 = 161;
pub const WAVE_FORMAT_RACAL_RECORDER_G720_A : u32 = 162;
pub const WAVE_FORMAT_RACAL_RECORDER_G723_1 : u32 = 163;
pub const WAVE_FORMAT_RACAL_RECORDER_TETRA_ACELP : u32 = 164;
pub const WAVE_FORMAT_NEC_AAC : u32 = 176;
pub const WAVE_FORMAT_RAW_AAC1 : u32 = 255;
pub const WAVE_FORMAT_RHETOREX_ADPCM : u32 = 256;
pub const WAVE_FORMAT_IRAT : u32 = 257;
pub const WAVE_FORMAT_VIVO_G723 : u32 = 273;
pub const WAVE_FORMAT_VIVO_SIREN : u32 = 274;
pub const WAVE_FORMAT_PHILIPS_CELP : u32 = 288;
pub const WAVE_FORMAT_PHILIPS_GRUNDIG : u32 = 289;
pub const WAVE_FORMAT_DIGITAL_G723 : u32 = 291;
pub const WAVE_FORMAT_SANYO_LD_ADPCM : u32 = 293;
pub const WAVE_FORMAT_SIPROLAB_ACEPLNET : u32 = 304;
pub const WAVE_FORMAT_SIPROLAB_ACELP4800 : u32 = 305;
pub const WAVE_FORMAT_SIPROLAB_ACELP8V3 : u32 = 306;
pub const WAVE_FORMAT_SIPROLAB_G729 : u32 = 307;
pub const WAVE_FORMAT_SIPROLAB_G729A : u32 = 308;
pub const WAVE_FORMAT_SIPROLAB_KELVIN : u32 = 309;
pub const WAVE_FORMAT_VOICEAGE_AMR : u32 = 310;
pub const WAVE_FORMAT_G726ADPCM : u32 = 320;
pub const WAVE_FORMAT_DICTAPHONE_CELP68 : u32 = 321;
pub const WAVE_FORMAT_DICTAPHONE_CELP54 : u32 = 322;
pub const WAVE_FORMAT_QUALCOMM_PUREVOICE : u32 = 336;
pub const WAVE_FORMAT_QUALCOMM_HALFRATE : u32 = 337;
pub const WAVE_FORMAT_TUBGSM : u32 = 341;
pub const WAVE_FORMAT_MSAUDIO1 : u32 = 352;
pub const WAVE_FORMAT_WMAUDIO2 : u32 = 353;
pub const WAVE_FORMAT_WMAUDIO3 : u32 = 354;
pub const WAVE_FORMAT_WMAUDIO_LOSSLESS : u32 = 355;
pub const WAVE_FORMAT_WMASPDIF : u32 = 356;
pub const WAVE_FORMAT_UNISYS_NAP_ADPCM : u32 = 368;
pub const WAVE_FORMAT_UNISYS_NAP_ULAW : u32 = 369;
pub const WAVE_FORMAT_UNISYS_NAP_ALAW : u32 = 370;
pub const WAVE_FORMAT_UNISYS_NAP_16K : u32 = 371;
pub const WAVE_FORMAT_SYCOM_ACM_SYC008 : u32 = 372;
pub const WAVE_FORMAT_SYCOM_ACM_SYC701_G726L : u32 = 373;
pub const WAVE_FORMAT_SYCOM_ACM_SYC701_CELP54 : u32 = 374;
pub const WAVE_FORMAT_SYCOM_ACM_SYC701_CELP68 : u32 = 375;
pub const WAVE_FORMAT_KNOWLEDGE_ADVENTURE_ADPCM : u32 = 376;
pub const WAVE_FORMAT_FRAUNHOFER_IIS_MPEG2_AAC : u32 = 384;
pub const WAVE_FORMAT_DTS_DS : u32 = 400;
pub const WAVE_FORMAT_CREATIVE_ADPCM : u32 = 512;
pub const WAVE_FORMAT_CREATIVE_FASTSPEECH8 : u32 = 514;
pub const WAVE_FORMAT_CREATIVE_FASTSPEECH10 : u32 = 515;
pub const WAVE_FORMAT_UHER_ADPCM : u32 = 528;
pub const WAVE_FORMAT_ULEAD_DV_AUDIO : u32 = 533;
pub const WAVE_FORMAT_ULEAD_DV_AUDIO_1 : u32 = 534;
pub const WAVE_FORMAT_QUARTERDECK : u32 = 544;
pub const WAVE_FORMAT_ILINK_VC : u32 = 560;
pub const WAVE_FORMAT_RAW_SPORT : u32 = 576;
pub const WAVE_FORMAT_ESST_AC3 : u32 = 577;
pub const WAVE_FORMAT_GENERIC_PASSTHRU : u32 = 585;
pub const WAVE_FORMAT_IPI_HSX : u32 = 592;
pub const WAVE_FORMAT_IPI_RPELP : u32 = 593;
pub const WAVE_FORMAT_CS2 : u32 = 608;
pub const WAVE_FORMAT_SONY_SCX : u32 = 624;
pub const WAVE_FORMAT_SONY_SCY : u32 = 625;
pub const WAVE_FORMAT_SONY_ATRAC3 : u32 = 626;
pub const WAVE_FORMAT_SONY_SPC : u32 = 627;
pub const WAVE_FORMAT_TELUM_AUDIO : u32 = 640;
pub const WAVE_FORMAT_TELUM_IA_AUDIO : u32 = 641;
pub const WAVE_FORMAT_NORCOM_VOICE_SYSTEMS_ADPCM : u32 = 645;
pub const WAVE_FORMAT_FM_TOWNS_SND : u32 = 768;
pub const WAVE_FORMAT_MICRONAS : u32 = 848;
pub const WAVE_FORMAT_MICRONAS_CELP833 : u32 = 849;
pub const WAVE_FORMAT_BTV_DIGITAL : u32 = 1024;
pub const WAVE_FORMAT_INTEL_MUSIC_CODER : u32 = 1025;
pub const WAVE_FORMAT_INDEO_AUDIO : u32 = 1026;
pub const WAVE_FORMAT_QDESIGN_MUSIC : u32 = 1104;
pub const WAVE_FORMAT_ON2_VP7_AUDIO : u32 = 1280;
pub const WAVE_FORMAT_ON2_VP6_AUDIO : u32 = 1281;
pub const WAVE_FORMAT_VME_VMPCM : u32 = 1664;
pub const WAVE_FORMAT_TPC : u32 = 1665;
pub const WAVE_FORMAT_LIGHTWAVE_LOSSLESS : u32 = 2222;
pub const WAVE_FORMAT_OLIGSM : u32 = 4096;
pub const WAVE_FORMAT_OLIADPCM : u32 = 4097;
pub const WAVE_FORMAT_OLICELP : u32 = 4098;
pub const WAVE_FORMAT_OLISBC : u32 = 4099;
pub const WAVE_FORMAT_OLIOPR : u32 = 4100;
pub const WAVE_FORMAT_LH_CODEC : u32 = 4352;
pub const WAVE_FORMAT_LH_CODEC_CELP : u32 = 4353;
pub const WAVE_FORMAT_LH_CODEC_SBC8 : u32 = 4354;
pub const WAVE_FORMAT_LH_CODEC_SBC12 : u32 = 4355;
pub const WAVE_FORMAT_LH_CODEC_SBC16 : u32 = 4356;
pub const WAVE_FORMAT_NORRIS : u32 = 5120;
pub const WAVE_FORMAT_ISIAUDIO_2 : u32 = 5121;
pub const WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS : u32 = 5376;
pub const WAVE_FORMAT_MPEG_ADTS_AAC : u32 = 5632;
pub const WAVE_FORMAT_MPEG_RAW_AAC : u32 = 5633;
pub const WAVE_FORMAT_MPEG_LOAS : u32 = 5634;
pub const WAVE_FORMAT_NOKIA_MPEG_ADTS_AAC : u32 = 5640;
pub const WAVE_FORMAT_NOKIA_MPEG_RAW_AAC : u32 = 5641;
pub const WAVE_FORMAT_VODAFONE_MPEG_ADTS_AAC : u32 = 5642;
pub const WAVE_FORMAT_VODAFONE_MPEG_RAW_AAC : u32 = 5643;
pub const WAVE_FORMAT_MPEG_HEAAC : u32 = 5648;
pub const WAVE_FORMAT_VOXWARE_RT24_SPEECH : u32 = 6172;
pub const WAVE_FORMAT_SONICFOUNDRY_LOSSLESS : u32 = 6513;
pub const WAVE_FORMAT_INNINGS_TELECOM_ADPCM : u32 = 6521;
pub const WAVE_FORMAT_LUCENT_SX8300P : u32 = 7175;
pub const WAVE_FORMAT_LUCENT_SX5363S : u32 = 7180;
pub const WAVE_FORMAT_CUSEEME : u32 = 7939;
pub const WAVE_FORMAT_NTCSOFT_ALF2CM_ACM : u32 = 8132;
pub const WAVE_FORMAT_DVM : u32 = 8192;
pub const WAVE_FORMAT_DTS2 : u32 = 8193;
pub const WAVE_FORMAT_MAKEAVIS : u32 = 13075;
pub const WAVE_FORMAT_DIVIO_MPEG4_AAC : u32 = 16707;
pub const WAVE_FORMAT_NOKIA_ADAPTIVE_MULTIRATE : u32 = 16897;
pub const WAVE_FORMAT_DIVIO_G726 : u32 = 16963;
pub const WAVE_FORMAT_LEAD_SPEECH : u32 = 17228;
pub const WAVE_FORMAT_LEAD_VORBIS : u32 = 22092;
pub const WAVE_FORMAT_WAVPACK_AUDIO : u32 = 22358;
pub const WAVE_FORMAT_ALAC : u32 = 27745;
pub const WAVE_FORMAT_OGG_VORBIS_MODE_1 : u32 = 26447;
pub const WAVE_FORMAT_OGG_VORBIS_MODE_2 : u32 = 26448;
pub const WAVE_FORMAT_OGG_VORBIS_MODE_3 : u32 = 26449;
pub const WAVE_FORMAT_OGG_VORBIS_MODE_1_PLUS : u32 = 26479;
pub const WAVE_FORMAT_OGG_VORBIS_MODE_2_PLUS : u32 = 26480;
pub const WAVE_FORMAT_OGG_VORBIS_MODE_3_PLUS : u32 = 26481;
pub const WAVE_FORMAT_3COM_NBX : u32 = 28672;
pub const WAVE_FORMAT_OPUS : u32 = 28751;
pub const WAVE_FORMAT_FAAD_AAC : u32 = 28781;
pub const WAVE_FORMAT_AMR_NB : u32 = 29537;
pub const WAVE_FORMAT_AMR_WB : u32 = 29538;
pub const WAVE_FORMAT_AMR_WP : u32 = 29539;
pub const WAVE_FORMAT_GSM_AMR_CBR : u32 = 31265;
pub const WAVE_FORMAT_GSM_AMR_VBR_SID : u32 = 31266;
pub const WAVE_FORMAT_COMVERSE_INFOSYS_G723_1 : u32 = 41216;
pub const WAVE_FORMAT_COMVERSE_INFOSYS_AVQSBC : u32 = 41217;
pub const WAVE_FORMAT_COMVERSE_INFOSYS_SBC : u32 = 41218;
pub const WAVE_FORMAT_SYMBOL_G729_A : u32 = 41219;
pub const WAVE_FORMAT_VOICEAGE_AMR_WB : u32 = 41220;
pub const WAVE_FORMAT_INGENIENT_G726 : u32 = 41221;
pub const WAVE_FORMAT_MPEG4_AAC : u32 = 41222;
pub const WAVE_FORMAT_ENCORE_G726 : u32 = 41223;
pub const WAVE_FORMAT_ZOLL_ASAO : u32 = 41224;
pub const WAVE_FORMAT_SPEEX_VOICE : u32 = 41225;
pub const WAVE_FORMAT_VIANIX_MASC : u32 = 41226;
pub const WAVE_FORMAT_WM9_SPECTRUM_ANALYZER : u32 = 41227;
pub const WAVE_FORMAT_WMF_SPECTRUM_ANAYZER : u32 = 41228;
pub const WAVE_FORMAT_GSM_610 : u32 = 41229;
pub const WAVE_FORMAT_GSM_620 : u32 = 41230;
pub const WAVE_FORMAT_GSM_660 : u32 = 41231;
pub const WAVE_FORMAT_GSM_690 : u32 = 41232;
pub const WAVE_FORMAT_GSM_ADAPTIVE_MULTIRATE_WB : u32 = 41233;
pub const WAVE_FORMAT_POLYCOM_G722 : u32 = 41234;
pub const WAVE_FORMAT_POLYCOM_G728 : u32 = 41235;
pub const WAVE_FORMAT_POLYCOM_G729_A : u32 = 41236;
pub const WAVE_FORMAT_POLYCOM_SIREN : u32 = 41237;
pub const WAVE_FORMAT_GLOBAL_IP_ILBC : u32 = 41238;
pub const WAVE_FORMAT_RADIOTIME_TIME_SHIFT_RADIO : u32 = 41239;
pub const WAVE_FORMAT_NICE_ACA : u32 = 41240;
pub const WAVE_FORMAT_NICE_ADPCM : u32 = 41241;
pub const WAVE_FORMAT_VOCORD_G721 : u32 = 41242;
pub const WAVE_FORMAT_VOCORD_G726 : u32 = 41243;
pub const WAVE_FORMAT_VOCORD_G722_1 : u32 = 41244;
pub const WAVE_FORMAT_VOCORD_G728 : u32 = 41245;
pub const WAVE_FORMAT_VOCORD_G729 : u32 = 41246;
pub const WAVE_FORMAT_VOCORD_G729_A : u32 = 41247;
pub const WAVE_FORMAT_VOCORD_G723_1 : u32 = 41248;
pub const WAVE_FORMAT_VOCORD_LBC : u32 = 41249;
pub const WAVE_FORMAT_NICE_G728 : u32 = 41250;
pub const WAVE_FORMAT_FRACE_TELECOM_G729 : u32 = 41251;
pub const WAVE_FORMAT_CODIAN : u32 = 41252;
pub const WAVE_FORMAT_FLAC : u32 = 61868;
pub const WAVE_FORMAT_DEVELOPMENT : u32 = 65535;
pub const WAVE_FORMAT_PCM : u32 = 1;
pub const ACM_MPEG_LAYER1 : u32 = 1;
pub const ACM_MPEG_LAYER2 : u32 = 2;
pub const ACM_MPEG_LAYER3 : u32 = 4;
pub const ACM_MPEG_STEREO : u32 = 1;
pub const ACM_MPEG_JOINTSTEREO : u32 = 2;
pub const ACM_MPEG_DUALCHANNEL : u32 = 4;
pub const ACM_MPEG_SINGLECHANNEL : u32 = 8;
pub const ACM_MPEG_PRIVATEBIT : u32 = 1;
pub const ACM_MPEG_COPYRIGHT : u32 = 2;
pub const ACM_MPEG_ORIGINALHOME : u32 = 4;
pub const ACM_MPEG_PROTECTIONBIT : u32 = 8;
pub const ACM_MPEG_ID_MPEG1 : u32 = 16;
pub const MPEGLAYER3_WFX_EXTRA_BYTES : u32 = 12;
pub const MPEGLAYER3_ID_UNKNOWN : u32 = 0;
pub const MPEGLAYER3_ID_MPEG : u32 = 1;
pub const MPEGLAYER3_ID_CONSTANTFRAMESIZE : u32 = 2;
pub const MM_MSFT_ACM_WMAUDIO : u32 = 39;
pub const WMAUDIO_BITS_PER_SAMPLE : u32 = 16;
pub const WMAUDIO_MAX_CHANNELS : u32 = 2;
pub const MM_MSFT_ACM_MSAUDIO1 : u32 = 39;
pub const MM_MSFT_ACM_WMAUDIO2 : u32 = 101;
pub const WAVE_FILTER_UNKNOWN : u32 = 0;
pub const WAVE_FILTER_DEVELOPMENT : u32 = 65535;
pub const WAVE_FILTER_VOLUME : u32 = 1;
pub const WAVE_FILTER_ECHO : u32 = 2;
pub const JPEG_PROCESS_BASELINE : u32 = 0;
pub const AVIIF_CONTROLFRAME : i32 = 512;
pub const JIFMK_SOF0 : u32 = 65472;
pub const JIFMK_SOF1 : u32 = 65473;
pub const JIFMK_SOF2 : u32 = 65474;
pub const JIFMK_SOF3 : u32 = 65475;
pub const JIFMK_SOF5 : u32 = 65477;
pub const JIFMK_SOF6 : u32 = 65478;
pub const JIFMK_SOF7 : u32 = 65479;
pub const JIFMK_JPG : u32 = 65480;
pub const JIFMK_SOF9 : u32 = 65481;
pub const JIFMK_SOF10 : u32 = 65482;
pub const JIFMK_SOF11 : u32 = 65483;
pub const JIFMK_SOF13 : u32 = 65485;
pub const JIFMK_SOF14 : u32 = 65486;
pub const JIFMK_SOF15 : u32 = 65487;
pub const JIFMK_DHT : u32 = 65476;
pub const JIFMK_DAC : u32 = 65484;
pub const JIFMK_RST0 : u32 = 65488;
pub const JIFMK_RST1 : u32 = 65489;
pub const JIFMK_RST2 : u32 = 65490;
pub const JIFMK_RST3 : u32 = 65491;
pub const JIFMK_RST4 : u32 = 65492;
pub const JIFMK_RST5 : u32 = 65493;
pub const JIFMK_RST6 : u32 = 65494;
pub const JIFMK_RST7 : u32 = 65495;
pub const JIFMK_SOI : u32 = 65496;
pub const JIFMK_EOI : u32 = 65497;
pub const JIFMK_SOS : u32 = 65498;
pub const JIFMK_DQT : u32 = 65499;
pub const JIFMK_DNL : u32 = 65500;
pub const JIFMK_DRI : u32 = 65501;
pub const JIFMK_DHP : u32 = 65502;
pub const JIFMK_EXP : u32 = 65503;
pub const JIFMK_APP0 : u32 = 65504;
pub const JIFMK_APP1 : u32 = 65505;
pub const JIFMK_APP2 : u32 = 65506;
pub const JIFMK_APP3 : u32 = 65507;
pub const JIFMK_APP4 : u32 = 65508;
pub const JIFMK_APP5 : u32 = 65509;
pub const JIFMK_APP6 : u32 = 65510;
pub const JIFMK_APP7 : u32 = 65511;
pub const JIFMK_JPG0 : u32 = 65520;
pub const JIFMK_JPG1 : u32 = 65521;
pub const JIFMK_JPG2 : u32 = 65522;
pub const JIFMK_JPG3 : u32 = 65523;
pub const JIFMK_JPG4 : u32 = 65524;
pub const JIFMK_JPG5 : u32 = 65525;
pub const JIFMK_JPG6 : u32 = 65526;
pub const JIFMK_JPG7 : u32 = 65527;
pub const JIFMK_JPG8 : u32 = 65528;
pub const JIFMK_JPG9 : u32 = 65529;
pub const JIFMK_JPG10 : u32 = 65530;
pub const JIFMK_JPG11 : u32 = 65531;
pub const JIFMK_JPG12 : u32 = 65532;
pub const JIFMK_JPG13 : u32 = 65533;
pub const JIFMK_COM : u32 = 65534;
pub const JIFMK_TEM : u32 = 65281;
pub const JIFMK_RES : u32 = 65282;
pub const JIFMK_00 : u32 = 65280;
pub const JIFMK_FF : u32 = 65535;
pub const JPEG_Y : u32 = 1;
pub const JPEG_YCbCr : u32 = 2;
pub const JPEG_RGB : u32 = 3;
pub const SND_SYNC : u32 = 0;
pub const SND_ASYNC : u32 = 1;
pub const SND_NODEFAULT : u32 = 2;
pub const SND_MEMORY : u32 = 4;
pub const SND_LOOP : u32 = 8;
pub const SND_NOSTOP : u32 = 16;
pub const SND_NOWAIT : i32 = 8192;
pub const SND_ALIAS : i32 = 65536;
pub const SND_ALIAS_ID : i32 = 1114112;
pub const SND_FILENAME : i32 = 131072;
pub const SND_RESOURCE : i32 = 262148;
pub const SND_PURGE : u32 = 64;
pub const SND_APPLICATION : u32 = 128;
pub const SND_SENTRY : i32 = 524288;
pub const SND_RING : i32 = 1048576;
pub const SND_SYSTEM : i32 = 2097152;
pub const SND_ALIAS_START : u32 = 0;
pub const MAXPNAMELEN : u32 = 32;
pub const MAXERRORLENGTH : u32 = 256;
pub const TIME_MS : u32 = 1;
pub const TIME_SAMPLES : u32 = 2;
pub const TIME_BYTES : u32 = 4;
pub const TIME_SMPTE : u32 = 8;
pub const TIME_MIDI : u32 = 16;
pub const TIME_TICKS : u32 = 32;
pub const MM_JOY1MOVE : u32 = 928;
pub const MM_JOY2MOVE : u32 = 929;
pub const MM_JOY1ZMOVE : u32 = 930;
pub const MM_JOY2ZMOVE : u32 = 931;
pub const MM_JOY1BUTTONDOWN : u32 = 949;
pub const MM_JOY2BUTTONDOWN : u32 = 950;
pub const MM_JOY1BUTTONUP : u32 = 951;
pub const MM_JOY2BUTTONUP : u32 = 952;
pub const MM_MCINOTIFY : u32 = 953;
pub const MM_WOM_OPEN : u32 = 955;
pub const MM_WOM_CLOSE : u32 = 956;
pub const MM_WOM_DONE : u32 = 957;
pub const MM_WIM_OPEN : u32 = 958;
pub const MM_WIM_CLOSE : u32 = 959;
pub const MM_WIM_DATA : u32 = 960;
pub const MM_MIM_OPEN : u32 = 961;
pub const MM_MIM_CLOSE : u32 = 962;
pub const MM_MIM_DATA : u32 = 963;
pub const MM_MIM_LONGDATA : u32 = 964;
pub const MM_MIM_ERROR : u32 = 965;
pub const MM_MIM_LONGERROR : u32 = 966;
pub const MM_MOM_OPEN : u32 = 967;
pub const MM_MOM_CLOSE : u32 = 968;
pub const MM_MOM_DONE : u32 = 969;
pub const MM_STREAM_OPEN : u32 = 980;
pub const MM_STREAM_CLOSE : u32 = 981;
pub const MM_STREAM_DONE : u32 = 982;
pub const MM_STREAM_ERROR : u32 = 983;
pub const MM_MOM_POSITIONCB : u32 = 970;
pub const MM_MIM_MOREDATA : u32 = 972;
pub const MM_MIXM_LINE_CHANGE : u32 = 976;
pub const MM_MIXM_CONTROL_CHANGE : u32 = 977;
pub const MMSYSERR_BASE : u32 = 0;
pub const WAVERR_BASE : u32 = 32;
pub const MIDIERR_BASE : u32 = 64;
pub const TIMERR_BASE : u32 = 96;
pub const JOYERR_BASE : u32 = 160;
pub const MCIERR_BASE : u32 = 256;
pub const MIXERR_BASE : u32 = 1024;
pub const MCI_STRING_OFFSET : u32 = 512;
pub const MCI_VD_OFFSET : u32 = 1024;
pub const MCI_CD_OFFSET : u32 = 1088;
pub const MCI_WAVE_OFFSET : u32 = 1152;
pub const MCI_SEQ_OFFSET : u32 = 1216;
pub const MMSYSERR_NOERROR : u32 = 0;
pub const CALLBACK_TYPEMASK : i32 = 458752;
pub const CALLBACK_NULL : i32 = 0;
pub const CALLBACK_WINDOW : i32 = 65536;
pub const CALLBACK_TASK : i32 = 131072;
pub const CALLBACK_FUNCTION : i32 = 196608;
pub const CALLBACK_EVENT : i32 = 327680;
pub const VP_COMMAND_GET : u32 = 1;
pub const VP_COMMAND_SET : u32 = 2;
pub const VP_FLAGS_TV_MODE : u32 = 1;
pub const VP_FLAGS_TV_STANDARD : u32 = 2;
pub const VP_FLAGS_FLICKER : u32 = 4;
pub const VP_FLAGS_OVERSCAN : u32 = 8;
pub const VP_FLAGS_MAX_UNSCALED : u32 = 16;
pub const VP_FLAGS_POSITION : u32 = 32;
pub const VP_FLAGS_BRIGHTNESS : u32 = 64;
pub const VP_FLAGS_CONTRAST : u32 = 128;
pub const VP_FLAGS_COPYPROTECT : u32 = 256;
pub const VP_MODE_WIN_GRAPHICS : u32 = 1;
pub const VP_MODE_TV_PLAYBACK : u32 = 2;
pub const VP_TV_STANDARD_NTSC_M : u32 = 1;
pub const VP_TV_STANDARD_NTSC_M_J : u32 = 2;
pub const VP_TV_STANDARD_PAL_B : u32 = 4;
pub const VP_TV_STANDARD_PAL_D : u32 = 8;
pub const VP_TV_STANDARD_PAL_H : u32 = 16;
pub const VP_TV_STANDARD_PAL_I : u32 = 32;
pub const VP_TV_STANDARD_PAL_M : u32 = 64;
pub const VP_TV_STANDARD_PAL_N : u32 = 128;
pub const VP_TV_STANDARD_SECAM_B : u32 = 256;
pub const VP_TV_STANDARD_SECAM_D : u32 = 512;
pub const VP_TV_STANDARD_SECAM_G : u32 = 1024;
pub const VP_TV_STANDARD_SECAM_H : u32 = 2048;
pub const VP_TV_STANDARD_SECAM_K : u32 = 4096;
pub const VP_TV_STANDARD_SECAM_K1 : u32 = 8192;
pub const VP_TV_STANDARD_SECAM_L : u32 = 16384;
pub const VP_TV_STANDARD_WIN_VGA : u32 = 32768;
pub const VP_TV_STANDARD_NTSC_433 : u32 = 65536;
pub const VP_TV_STANDARD_PAL_G : u32 = 131072;
pub const VP_TV_STANDARD_PAL_60 : u32 = 262144;
pub const VP_TV_STANDARD_SECAM_L1 : u32 = 524288;
pub const VP_CP_TYPE_APS_TRIGGER : u32 = 1;
pub const VP_CP_TYPE_MACROVISION : u32 = 2;
pub const VP_CP_CMD_ACTIVATE : u32 = 1;
pub const VP_CP_CMD_DEACTIVATE : u32 = 2;
pub const VP_CP_CMD_CHANGE : u32 = 4;
pub const DRVM_MAPPER : u32 = 8192;
pub const WAVEIN_MAPPER_STATUS_DEVICE : u32 = 0;
pub const WAVEIN_MAPPER_STATUS_MAPPED : u32 = 1;
pub const WAVEIN_MAPPER_STATUS_FORMAT : u32 = 2;
pub const WAVEOUT_MAPPER_STATUS_DEVICE : u32 = 0;
pub const WAVEOUT_MAPPER_STATUS_MAPPED : u32 = 1;
pub const WAVEOUT_MAPPER_STATUS_FORMAT : u32 = 2;
pub const ACMERR_BASE : u32 = 512;
pub const ACM_METRIC_COUNT_DRIVERS : u32 = 1;
pub const ACM_METRIC_COUNT_CODECS : u32 = 2;
pub const ACM_METRIC_COUNT_CONVERTERS : u32 = 3;
pub const ACM_METRIC_COUNT_FILTERS : u32 = 4;
pub const ACM_METRIC_COUNT_DISABLED : u32 = 5;
pub const ACM_METRIC_COUNT_HARDWARE : u32 = 6;
pub const ACM_METRIC_COUNT_LOCAL_DRIVERS : u32 = 20;
pub const ACM_METRIC_COUNT_LOCAL_CODECS : u32 = 21;
pub const ACM_METRIC_COUNT_LOCAL_CONVERTERS : u32 = 22;
pub const ACM_METRIC_COUNT_LOCAL_FILTERS : u32 = 23;
pub const ACM_METRIC_COUNT_LOCAL_DISABLED : u32 = 24;
pub const ACM_METRIC_HARDWARE_WAVE_INPUT : u32 = 30;
pub const ACM_METRIC_HARDWARE_WAVE_OUTPUT : u32 = 31;
pub const ACM_METRIC_MAX_SIZE_FORMAT : u32 = 50;
pub const ACM_METRIC_MAX_SIZE_FILTER : u32 = 51;
pub const ACM_METRIC_DRIVER_SUPPORT : u32 = 100;
pub const ACM_METRIC_DRIVER_PRIORITY : u32 = 101;
pub const ACM_DRIVERENUMF_NOLOCAL : i32 = 1073741824;
pub const ACM_DRIVERENUMF_DISABLED : i32 = -2147483648;
pub const ACM_DRIVERADDF_NAME : i32 = 1;
pub const ACM_DRIVERADDF_FUNCTION : i32 = 3;
pub const ACM_DRIVERADDF_NOTIFYHWND : i32 = 4;
pub const ACM_DRIVERADDF_TYPEMASK : i32 = 7;
pub const ACM_DRIVERADDF_LOCAL : i32 = 0;
pub const ACM_DRIVERADDF_GLOBAL : i32 = 8;
pub const ACM_DRIVERPRIORITYF_ENABLE : i32 = 1;
pub const ACM_DRIVERPRIORITYF_DISABLE : i32 = 2;
pub const ACM_DRIVERPRIORITYF_ABLEMASK : i32 = 3;
pub const ACM_DRIVERPRIORITYF_BEGIN : i32 = 65536;
pub const ACM_DRIVERPRIORITYF_END : i32 = 131072;
pub const ACM_DRIVERPRIORITYF_DEFERMASK : i32 = 196608;
pub const ACMDRIVERDETAILS_SHORTNAME_CHARS : u32 = 32;
pub const ACMDRIVERDETAILS_LONGNAME_CHARS : u32 = 128;
pub const ACMDRIVERDETAILS_COPYRIGHT_CHARS : u32 = 80;
pub const ACMDRIVERDETAILS_LICENSING_CHARS : u32 = 128;
pub const ACMDRIVERDETAILS_FEATURES_CHARS : u32 = 512;
pub const ACMDRIVERDETAILS_SUPPORTF_LOCAL : i32 = 1073741824;
pub const ACMDRIVERDETAILS_SUPPORTF_DISABLED : i32 = -2147483648;
pub const ACMFORMATTAGDETAILS_FORMATTAG_CHARS : u32 = 48;
pub const ACM_FORMATTAGDETAILSF_INDEX : i32 = 0;
pub const ACM_FORMATTAGDETAILSF_FORMATTAG : i32 = 1;
pub const ACM_FORMATTAGDETAILSF_LARGESTSIZE : i32 = 2;
pub const ACM_FORMATTAGDETAILSF_QUERYMASK : i32 = 15;
pub const ACMFORMATDETAILS_FORMAT_CHARS : u32 = 128;
pub const ACM_FORMATDETAILSF_INDEX : i32 = 0;
pub const ACM_FORMATDETAILSF_FORMAT : i32 = 1;
pub const ACM_FORMATDETAILSF_QUERYMASK : i32 = 15;
pub const ACM_FORMATENUMF_WFORMATTAG : i32 = 65536;
pub const ACM_FORMATENUMF_NCHANNELS : i32 = 131072;
pub const ACM_FORMATENUMF_NSAMPLESPERSEC : i32 = 262144;
pub const ACM_FORMATENUMF_WBITSPERSAMPLE : i32 = 524288;
pub const ACM_FORMATENUMF_CONVERT : i32 = 1048576;
pub const ACM_FORMATENUMF_SUGGEST : i32 = 2097152;
pub const ACM_FORMATENUMF_HARDWARE : i32 = 4194304;
pub const ACM_FORMATENUMF_INPUT : i32 = 8388608;
pub const ACM_FORMATENUMF_OUTPUT : i32 = 16777216;
pub const ACM_FORMATSUGGESTF_WFORMATTAG : i32 = 65536;
pub const ACM_FORMATSUGGESTF_NCHANNELS : i32 = 131072;
pub const ACM_FORMATSUGGESTF_NSAMPLESPERSEC : i32 = 262144;
pub const ACM_FORMATSUGGESTF_WBITSPERSAMPLE : i32 = 524288;
pub const ACM_FORMATSUGGESTF_TYPEMASK : i32 = 16711680;
pub const MM_ACM_FORMATCHOOSE : u32 = 32768;
pub const FORMATCHOOSE_MESSAGE : u32 = 0;
pub const ACMFORMATCHOOSE_STYLEF_SHOWHELP : i32 = 4;
pub const ACMFORMATCHOOSE_STYLEF_ENABLEHOOK : i32 = 8;
pub const ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATE : i32 = 16;
pub const ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE : i32 = 32;
pub const ACMFORMATCHOOSE_STYLEF_INITTOWFXSTRUCT : i32 = 64;
pub const ACMFORMATCHOOSE_STYLEF_CONTEXTHELP : i32 = 128;
pub const ACMFILTERTAGDETAILS_FILTERTAG_CHARS : u32 = 48;
pub const ACM_FILTERTAGDETAILSF_INDEX : i32 = 0;
pub const ACM_FILTERTAGDETAILSF_FILTERTAG : i32 = 1;
pub const ACM_FILTERTAGDETAILSF_LARGESTSIZE : i32 = 2;
pub const ACM_FILTERTAGDETAILSF_QUERYMASK : i32 = 15;
pub const ACMFILTERDETAILS_FILTER_CHARS : u32 = 128;
pub const ACM_FILTERDETAILSF_INDEX : i32 = 0;
pub const ACM_FILTERDETAILSF_FILTER : i32 = 1;
pub const ACM_FILTERDETAILSF_QUERYMASK : i32 = 15;
pub const ACM_FILTERENUMF_DWFILTERTAG : i32 = 65536;
pub const MM_ACM_FILTERCHOOSE : u32 = 32768;
pub const FILTERCHOOSE_MESSAGE : u32 = 0;
pub const ACMFILTERCHOOSE_STYLEF_SHOWHELP : i32 = 4;
pub const ACMFILTERCHOOSE_STYLEF_ENABLEHOOK : i32 = 8;
pub const ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATE : i32 = 16;
pub const ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATEHANDLE : i32 = 32;
pub const ACMFILTERCHOOSE_STYLEF_INITTOFILTERSTRUCT : i32 = 64;
pub const ACMFILTERCHOOSE_STYLEF_CONTEXTHELP : i32 = 128;
pub const ACMSTREAMHEADER_STATUSF_DONE : i32 = 65536;
pub const ACMSTREAMHEADER_STATUSF_PREPARED : i32 = 131072;
pub const ACMSTREAMHEADER_STATUSF_INQUEUE : i32 = 1048576;
pub const ACM_STREAMOPENF_QUERY : u32 = 1;
pub const ACM_STREAMOPENF_ASYNC : u32 = 2;
pub const ACM_STREAMOPENF_NONREALTIME : u32 = 4;
pub const ACM_STREAMSIZEF_SOURCE : i32 = 0;
pub const ACM_STREAMSIZEF_DESTINATION : i32 = 1;
pub const ACM_STREAMSIZEF_QUERYMASK : i32 = 15;
pub const ACM_STREAMCONVERTF_BLOCKALIGN : u32 = 4;
pub const ACM_STREAMCONVERTF_START : u32 = 16;
pub const ACM_STREAMCONVERTF_END : u32 = 32;
pub const WAVE_FORMAT_QUERY : u32 = 1;
pub const WAVE_ALLOWSYNC : u32 = 2;
pub const WAVE_MAPPED : u32 = 4;
pub const WAVE_FORMAT_DIRECT : u32 = 8;
pub const WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE : u32 = 16;
pub const WHDR_DONE : u32 = 1;
pub const WHDR_PREPARED : u32 = 2;
pub const WHDR_BEGINLOOP : u32 = 4;
pub const WHDR_ENDLOOP : u32 = 8;
pub const WHDR_INQUEUE : u32 = 16;
pub const WAVECAPS_PITCH : u32 = 1;
pub const WAVECAPS_PLAYBACKRATE : u32 = 2;
pub const WAVECAPS_VOLUME : u32 = 4;
pub const WAVECAPS_LRVOLUME : u32 = 8;
pub const WAVECAPS_SYNC : u32 = 16;
pub const WAVECAPS_SAMPLEACCURATE : u32 = 32;
pub const WAVE_INVALIDFORMAT : u32 = 0;
pub const WAVE_FORMAT_1M08 : u32 = 1;
pub const WAVE_FORMAT_1S08 : u32 = 2;
pub const WAVE_FORMAT_1M16 : u32 = 4;
pub const WAVE_FORMAT_1S16 : u32 = 8;
pub const WAVE_FORMAT_2M08 : u32 = 16;
pub const WAVE_FORMAT_2S08 : u32 = 32;
pub const WAVE_FORMAT_2M16 : u32 = 64;
pub const WAVE_FORMAT_2S16 : u32 = 128;
pub const WAVE_FORMAT_4M08 : u32 = 256;
pub const WAVE_FORMAT_4S08 : u32 = 512;
pub const WAVE_FORMAT_4M16 : u32 = 1024;
pub const WAVE_FORMAT_4S16 : u32 = 2048;
pub const WAVE_FORMAT_44M08 : u32 = 256;
pub const WAVE_FORMAT_44S08 : u32 = 512;
pub const WAVE_FORMAT_44M16 : u32 = 1024;
pub const WAVE_FORMAT_44S16 : u32 = 2048;
pub const WAVE_FORMAT_48M08 : u32 = 4096;
pub const WAVE_FORMAT_48S08 : u32 = 8192;
pub const WAVE_FORMAT_48M16 : u32 = 16384;
pub const WAVE_FORMAT_48S16 : u32 = 32768;
pub const WAVE_FORMAT_96M08 : u32 = 65536;
pub const WAVE_FORMAT_96S08 : u32 = 131072;
pub const WAVE_FORMAT_96M16 : u32 = 262144;
pub const WAVE_FORMAT_96S16 : u32 = 524288;
pub const MIDIPATCHSIZE : u32 = 128;
pub const MIDI_IO_STATUS : i32 = 32;
pub const MIDI_CACHE_ALL : u32 = 1;
pub const MIDI_CACHE_BESTFIT : u32 = 2;
pub const MIDI_CACHE_QUERY : u32 = 3;
pub const MIDI_UNCACHE : u32 = 4;
pub const MOD_MIDIPORT : u32 = 1;
pub const MOD_SYNTH : u32 = 2;
pub const MOD_SQSYNTH : u32 = 3;
pub const MOD_FMSYNTH : u32 = 4;
pub const MOD_MAPPER : u32 = 5;
pub const MOD_WAVETABLE : u32 = 6;
pub const MOD_SWSYNTH : u32 = 7;
pub const MIDICAPS_VOLUME : u32 = 1;
pub const MIDICAPS_LRVOLUME : u32 = 2;
pub const MIDICAPS_CACHE : u32 = 4;
pub const MIDICAPS_STREAM : u32 = 8;
pub const MHDR_DONE : u32 = 1;
pub const MHDR_PREPARED : u32 = 2;
pub const MHDR_INQUEUE : u32 = 4;
pub const MHDR_ISSTRM : u32 = 8;
pub const MEVT_F_SHORT : i32 = 0;
pub const MEVT_F_LONG : i32 = -2147483648;
pub const MEVT_F_CALLBACK : i32 = 1073741824;
pub const MIDISTRM_ERROR : i32 = -2;
pub const MIDIPROP_SET : i32 = -2147483648;
pub const MIDIPROP_GET : i32 = 1073741824;
pub const MIDIPROP_TIMEDIV : i32 = 1;
pub const MIDIPROP_TEMPO : i32 = 2;
pub const AUXCAPS_CDAUDIO : u32 = 1;
pub const AUXCAPS_AUXIN : u32 = 2;
pub const AUXCAPS_VOLUME : u32 = 1;
pub const AUXCAPS_LRVOLUME : u32 = 2;
pub const MIXER_SHORT_NAME_CHARS : u32 = 16;
pub const MIXER_LONG_NAME_CHARS : u32 = 64;
pub const MIXER_OBJECTF_HANDLE : i32 = -2147483648;
pub const MIXER_OBJECTF_MIXER : i32 = 0;
pub const MIXER_OBJECTF_WAVEOUT : i32 = 268435456;
pub const MIXER_OBJECTF_WAVEIN : i32 = 536870912;
pub const MIXER_OBJECTF_MIDIOUT : i32 = 805306368;
pub const MIXER_OBJECTF_MIDIIN : i32 = 1073741824;
pub const MIXER_OBJECTF_AUX : i32 = 1342177280;
pub const MIXERLINE_LINEF_ACTIVE : i32 = 1;
pub const MIXERLINE_LINEF_DISCONNECTED : i32 = 32768;
pub const MIXERLINE_LINEF_SOURCE : i32 = -2147483648;
pub const MIXERLINE_COMPONENTTYPE_DST_FIRST : i32 = 0;
pub const MIXERLINE_COMPONENTTYPE_SRC_FIRST : i32 = 4096;
pub const MIXERLINE_TARGETTYPE_UNDEFINED : u32 = 0;
pub const MIXERLINE_TARGETTYPE_WAVEOUT : u32 = 1;
pub const MIXERLINE_TARGETTYPE_WAVEIN : u32 = 2;
pub const MIXERLINE_TARGETTYPE_MIDIOUT : u32 = 3;
pub const MIXERLINE_TARGETTYPE_MIDIIN : u32 = 4;
pub const MIXERLINE_TARGETTYPE_AUX : u32 = 5;
pub const MIXER_GETLINEINFOF_DESTINATION : i32 = 0;
pub const MIXER_GETLINEINFOF_SOURCE : i32 = 1;
pub const MIXER_GETLINEINFOF_LINEID : i32 = 2;
pub const MIXER_GETLINEINFOF_COMPONENTTYPE : i32 = 3;
pub const MIXER_GETLINEINFOF_TARGETTYPE : i32 = 4;
pub const MIXER_GETLINEINFOF_QUERYMASK : i32 = 15;
pub const MIXERCONTROL_CONTROLF_UNIFORM : i32 = 1;
pub const MIXERCONTROL_CONTROLF_MULTIPLE : i32 = 2;
pub const MIXERCONTROL_CONTROLF_DISABLED : i32 = -2147483648;
pub const MIXERCONTROL_CT_CLASS_MASK : i32 = -268435456;
pub const MIXERCONTROL_CT_CLASS_CUSTOM : i32 = 0;
pub const MIXERCONTROL_CT_CLASS_METER : i32 = 268435456;
pub const MIXERCONTROL_CT_CLASS_SWITCH : i32 = 536870912;
pub const MIXERCONTROL_CT_CLASS_NUMBER : i32 = 805306368;
pub const MIXERCONTROL_CT_CLASS_SLIDER : i32 = 1073741824;
pub const MIXERCONTROL_CT_CLASS_FADER : i32 = 1342177280;
pub const MIXERCONTROL_CT_CLASS_TIME : i32 = 1610612736;
pub const MIXERCONTROL_CT_CLASS_LIST : i32 = 1879048192;
pub const MIXERCONTROL_CT_SUBCLASS_MASK : i32 = 251658240;
pub const MIXERCONTROL_CT_SC_SWITCH_BOOLEAN : i32 = 0;
pub const MIXERCONTROL_CT_SC_SWITCH_BUTTON : i32 = 16777216;
pub const MIXERCONTROL_CT_SC_METER_POLLED : i32 = 0;
pub const MIXERCONTROL_CT_SC_TIME_MICROSECS : i32 = 0;
pub const MIXERCONTROL_CT_SC_TIME_MILLISECS : i32 = 16777216;
pub const MIXERCONTROL_CT_SC_LIST_SINGLE : i32 = 0;
pub const MIXERCONTROL_CT_SC_LIST_MULTIPLE : i32 = 16777216;
pub const MIXERCONTROL_CT_UNITS_MASK : i32 = 16711680;
pub const MIXERCONTROL_CT_UNITS_CUSTOM : i32 = 0;
pub const MIXERCONTROL_CT_UNITS_BOOLEAN : i32 = 65536;
pub const MIXERCONTROL_CT_UNITS_SIGNED : i32 = 131072;
pub const MIXERCONTROL_CT_UNITS_UNSIGNED : i32 = 196608;
pub const MIXERCONTROL_CT_UNITS_DECIBELS : i32 = 262144;
pub const MIXERCONTROL_CT_UNITS_PERCENT : i32 = 327680;
pub const MIXER_GETLINECONTROLSF_ALL : i32 = 0;
pub const MIXER_GETLINECONTROLSF_ONEBYID : i32 = 1;
pub const MIXER_GETLINECONTROLSF_ONEBYTYPE : i32 = 2;
pub const MIXER_GETLINECONTROLSF_QUERYMASK : i32 = 15;
pub const MIXER_GETCONTROLDETAILSF_VALUE : i32 = 0;
pub const MIXER_GETCONTROLDETAILSF_LISTTEXT : i32 = 1;
pub const MIXER_GETCONTROLDETAILSF_QUERYMASK : i32 = 15;
pub const MIXER_SETCONTROLDETAILSF_VALUE : i32 = 0;
pub const MIXER_SETCONTROLDETAILSF_CUSTOM : i32 = 1;
pub const MIXER_SETCONTROLDETAILSF_QUERYMASK : i32 = 15;
pub const ICVERSION : u32 = 260;
pub const BI_1632 : u32 = 842217009;
pub const ICERR_OK : i32 = 0;
pub const ICERR_DONTDRAW : i32 = 1;
pub const ICERR_NEWPALETTE : i32 = 2;
pub const ICERR_GOTOKEYFRAME : i32 = 3;
pub const ICERR_STOPDRAWING : i32 = 4;
pub const ICERR_UNSUPPORTED : i32 = -1;
pub const ICERR_BADFORMAT : i32 = -2;
pub const ICERR_MEMORY : i32 = -3;
pub const ICERR_INTERNAL : i32 = -4;
pub const ICERR_BADFLAGS : i32 = -5;
pub const ICERR_BADPARAM : i32 = -6;
pub const ICERR_BADSIZE : i32 = -7;
pub const ICERR_BADHANDLE : i32 = -8;
pub const ICERR_CANTUPDATE : i32 = -9;
pub const ICERR_ABORT : i32 = -10;
pub const ICERR_ERROR : i32 = -100;
pub const ICERR_BADBITDEPTH : i32 = -200;
pub const ICERR_BADIMAGESIZE : i32 = -201;
pub const ICERR_CUSTOM : i32 = -400;
pub const ICMODE_COMPRESS : u32 = 1;
pub const ICMODE_DECOMPRESS : u32 = 2;
pub const ICMODE_FASTDECOMPRESS : u32 = 3;
pub const ICMODE_QUERY : u32 = 4;
pub const ICMODE_FASTCOMPRESS : u32 = 5;
pub const ICMODE_DRAW : u32 = 8;
pub const ICMODE_INTERNALF_FUNCTION32 : u32 = 32768;
pub const ICMODE_INTERNALF_MASK : u32 = 32768;
pub const AVIIF_TWOCC : i32 = 2;
pub const ICQUALITY_LOW : u32 = 0;
pub const ICQUALITY_HIGH : u32 = 10000;
pub const ICQUALITY_DEFAULT : i32 = -1;
pub const VIDCF_QUALITY : u32 = 1;
pub const VIDCF_CRUNCH : u32 = 2;
pub const VIDCF_TEMPORAL : u32 = 4;
pub const VIDCF_COMPRESSFRAMES : u32 = 8;
pub const VIDCF_DRAW : u32 = 16;
pub const VIDCF_FASTTEMPORALC : u32 = 32;
pub const VIDCF_FASTTEMPORALD : u32 = 128;
pub const ICCOMPRESS_KEYFRAME : i32 = 1;
pub const ICCOMPRESSFRAMES_PADDING : u32 = 1;
pub const ICDECOMPRESS_HURRYUP : i32 = -2147483648;
pub const ICDECOMPRESS_UPDATE : i32 = 1073741824;
pub const ICDECOMPRESS_PREROLL : i32 = 536870912;
pub const ICDECOMPRESS_NULLFRAME : i32 = 268435456;
pub const ICDECOMPRESS_NOTKEYFRAME : i32 = 134217728;
pub const ICDRAW_QUERY : i32 = 1;
pub const ICDRAW_FULLSCREEN : i32 = 2;
pub const ICDRAW_HDC : i32 = 4;
pub const ICDRAW_ANIMATE : i32 = 8;
pub const ICDRAW_CONTINUE : i32 = 16;
pub const ICDRAW_MEMORYDC : i32 = 32;
pub const ICDRAW_UPDATING : i32 = 64;
pub const ICDRAW_RENDER : i32 = 128;
pub const ICDRAW_BUFFER : i32 = 256;
pub const ICDRAW_HURRYUP : i32 = -2147483648;
pub const ICDRAW_UPDATE : i32 = 1073741824;
pub const ICDRAW_PREROLL : i32 = 536870912;
pub const ICDRAW_NULLFRAME : i32 = 268435456;
pub const ICDRAW_NOTKEYFRAME : i32 = 134217728;
pub const ICINSTALL_UNICODE : u32 = 32768;
pub const ICINSTALL_FUNCTION : u32 = 1;
pub const ICINSTALL_DRIVER : u32 = 2;
pub const ICINSTALL_HDRV : u32 = 4;
pub const ICINSTALL_DRIVERW : u32 = 32770;
pub const ICMF_CONFIGURE_QUERY : u32 = 1;
pub const ICMF_ABOUT_QUERY : u32 = 1;
pub const ICMF_COMPVARS_VALID : u32 = 1;
pub const ICMF_CHOOSE_KEYFRAME : u32 = 1;
pub const ICMF_CHOOSE_DATARATE : u32 = 2;
pub const ICMF_CHOOSE_PREVIEW : u32 = 4;
pub const ICMF_CHOOSE_ALLCOMPRESSORS : u32 = 8;
pub const DDF_0001 : u32 = 1;
pub const DDF_UPDATE : u32 = 2;
pub const DDF_SAME_HDC : u32 = 4;
pub const DDF_SAME_DRAW : u32 = 8;
pub const DDF_DONTDRAW : u32 = 16;
pub const DDF_ANIMATE : u32 = 32;
pub const DDF_BUFFER : u32 = 64;
pub const DDF_JUSTDRAWIT : u32 = 128;
pub const DDF_FULLSCREEN : u32 = 256;
pub const DDF_BACKGROUNDPAL : u32 = 512;
pub const DDF_NOTKEYFRAME : u32 = 1024;
pub const DDF_HURRYUP : u32 = 2048;
pub const DDF_HALFTONE : u32 = 4096;
pub const DDF_2000 : u32 = 8192;
pub const PD_CAN_DRAW_DIB : u32 = 1;
pub const PD_CAN_STRETCHDIB : u32 = 2;
pub const PD_STRETCHDIB_1_1_OK : u32 = 4;
pub const PD_STRETCHDIB_1_2_OK : u32 = 8;
pub const PD_STRETCHDIB_1_N_OK : u32 = 16;
pub const AVIGETFRAMEF_BESTDISPLAYFMT : u32 = 1;
pub const AVISTREAMINFO_DISABLED : u32 = 1;
pub const AVISTREAMINFO_FORMATCHANGES : u32 = 65536;
pub const AVIFILEINFO_HASINDEX : u32 = 16;
pub const AVIFILEINFO_MUSTUSEINDEX : u32 = 32;
pub const AVIFILEINFO_ISINTERLEAVED : u32 = 256;
pub const AVIFILEINFO_WASCAPTUREFILE : u32 = 65536;
pub const AVIFILEINFO_COPYRIGHTED : u32 = 131072;
pub const AVIFILECAPS_CANREAD : u32 = 1;
pub const AVIFILECAPS_CANWRITE : u32 = 2;
pub const AVIFILECAPS_ALLKEYFRAMES : u32 = 16;
pub const AVIFILECAPS_NOCOMPRESSION : u32 = 32;
pub const AVICOMPRESSF_INTERLEAVE : u32 = 1;
pub const AVICOMPRESSF_DATARATE : u32 = 2;
pub const AVICOMPRESSF_KEYFRAMES : u32 = 4;
pub const AVICOMPRESSF_VALID : u32 = 8;
pub const AVIFILEHANDLER_CANREAD : u32 = 1;
pub const AVIFILEHANDLER_CANWRITE : u32 = 2;
pub const AVIFILEHANDLER_CANACCEPTNONRGB : u32 = 4;
pub const AVISTREAMREAD_CONVENIENT : i32 = -1;
pub const FIND_DIR : i32 = 15;
pub const FIND_NEXT : i32 = 1;
pub const FIND_PREV : i32 = 4;
pub const FIND_FROM_START : i32 = 8;
pub const FIND_TYPE : i32 = 240;
pub const FIND_KEY : i32 = 16;
pub const FIND_ANY : i32 = 32;
pub const FIND_FORMAT : i32 = 64;
pub const FIND_RET : i32 = 61440;
pub const FIND_POS : i32 = 0;
pub const FIND_LENGTH : i32 = 4096;
pub const FIND_OFFSET : i32 = 8192;
pub const FIND_SIZE : i32 = 12288;
pub const FIND_INDEX : i32 = 16384;
pub const AVIERR_OK : i32 = 0;
pub const MCIWNDOPENF_NEW : u32 = 1;
pub const MCIWNDF_NOAUTOSIZEWINDOW : u32 = 1;
pub const MCIWNDF_NOPLAYBAR : u32 = 2;
pub const MCIWNDF_NOAUTOSIZEMOVIE : u32 = 4;
pub const MCIWNDF_NOMENU : u32 = 8;
pub const MCIWNDF_SHOWNAME : u32 = 16;
pub const MCIWNDF_SHOWPOS : u32 = 32;
pub const MCIWNDF_SHOWMODE : u32 = 64;
pub const MCIWNDF_SHOWALL : u32 = 112;
pub const MCIWNDF_NOTIFYMODE : u32 = 256;
pub const MCIWNDF_NOTIFYPOS : u32 = 512;
pub const MCIWNDF_NOTIFYSIZE : u32 = 1024;
pub const MCIWNDF_NOTIFYERROR : u32 = 4096;
pub const MCIWNDF_NOTIFYALL : u32 = 7936;
pub const MCIWNDF_NOTIFYANSI : u32 = 128;
pub const MCIWNDF_NOTIFYMEDIAA : u32 = 2176;
pub const MCIWNDF_NOTIFYMEDIAW : u32 = 2048;
pub const MCIWNDF_RECORD : u32 = 8192;
pub const MCIWNDF_NOERRORDLG : u32 = 16384;
pub const MCIWNDF_NOOPEN : u32 = 32768;
pub const MCIWND_START : i32 = -1;
pub const MCIWND_END : i32 = -2;
pub const DV_ERR_OK : u32 = 0;
pub const DV_ERR_BASE : u32 = 1;
pub const MM_DRVM_OPEN : u32 = 976;
pub const MM_DRVM_CLOSE : u32 = 977;
pub const MM_DRVM_DATA : u32 = 978;
pub const MM_DRVM_ERROR : u32 = 979;
pub const VHDR_DONE : u32 = 1;
pub const VHDR_PREPARED : u32 = 2;
pub const VHDR_INQUEUE : u32 = 4;
pub const VHDR_KEYFRAME : u32 = 8;
pub const VHDR_VALID : u32 = 15;
pub const VCAPS_OVERLAY : u32 = 1;
pub const VCAPS_SRC_CAN_CLIP : u32 = 2;
pub const VCAPS_DST_CAN_CLIP : u32 = 4;
pub const VCAPS_CAN_SCALE : u32 = 8;
pub const VIDEO_EXTERNALIN : u32 = 1;
pub const VIDEO_EXTERNALOUT : u32 = 2;
pub const VIDEO_IN : u32 = 4;
pub const VIDEO_OUT : u32 = 8;
pub const VIDEO_DLG_QUERY : u32 = 16;
pub const VIDEO_CONFIGURE_QUERY : u32 = 32768;
pub const VIDEO_CONFIGURE_SET : u32 = 4096;
pub const VIDEO_CONFIGURE_GET : u32 = 8192;
pub const VIDEO_CONFIGURE_QUERYSIZE : u32 = 1;
pub const VIDEO_CONFIGURE_CURRENT : u32 = 16;
pub const VIDEO_CONFIGURE_NOMINAL : u32 = 32;
pub const VIDEO_CONFIGURE_MIN : u32 = 64;
pub const VIDEO_CONFIGURE_MAX : u32 = 128;
pub const DVM_USER : u32 = 16384;
pub const DVM_CONFIGURE_START : u32 = 4096;
pub const DVM_CONFIGURE_END : u32 = 8191;
pub const AVSTREAMMASTER_AUDIO : u32 = 0;
pub const AVSTREAMMASTER_NONE : u32 = 1;
pub const CONTROLCALLBACK_PREROLL : u32 = 1;
pub const CONTROLCALLBACK_CAPTURING : u32 = 2;
pub const IDS_CAP_BEGIN : u32 = 300;
pub const IDS_CAP_END : u32 = 301;
pub const IDS_CAP_INFO : u32 = 401;
pub const IDS_CAP_OUTOFMEM : u32 = 402;
pub const IDS_CAP_FILEEXISTS : u32 = 403;
pub const IDS_CAP_ERRORPALOPEN : u32 = 404;
pub const IDS_CAP_ERRORPALSAVE : u32 = 405;
pub const IDS_CAP_ERRORDIBSAVE : u32 = 406;
pub const IDS_CAP_DEFAVIEXT : u32 = 407;
pub const IDS_CAP_DEFPALEXT : u32 = 408;
pub const IDS_CAP_CANTOPEN : u32 = 409;
pub const IDS_CAP_SEQ_MSGSTART : u32 = 410;
pub const IDS_CAP_SEQ_MSGSTOP : u32 = 411;
pub const IDS_CAP_VIDEDITERR : u32 = 412;
pub const IDS_CAP_READONLYFILE : u32 = 413;
pub const IDS_CAP_WRITEERROR : u32 = 414;
pub const IDS_CAP_NODISKSPACE : u32 = 415;
pub const IDS_CAP_SETFILESIZE : u32 = 416;
pub const IDS_CAP_SAVEASPERCENT : u32 = 417;
pub const IDS_CAP_DRIVER_ERROR : u32 = 418;
pub const IDS_CAP_WAVE_OPEN_ERROR : u32 = 419;
pub const IDS_CAP_WAVE_ALLOC_ERROR : u32 = 420;
pub const IDS_CAP_WAVE_PREPARE_ERROR : u32 = 421;
pub const IDS_CAP_WAVE_ADD_ERROR : u32 = 422;
pub const IDS_CAP_WAVE_SIZE_ERROR : u32 = 423;
pub const IDS_CAP_VIDEO_OPEN_ERROR : u32 = 424;
pub const IDS_CAP_VIDEO_ALLOC_ERROR : u32 = 425;
pub const IDS_CAP_VIDEO_PREPARE_ERROR : u32 = 426;
pub const IDS_CAP_VIDEO_ADD_ERROR : u32 = 427;
pub const IDS_CAP_VIDEO_SIZE_ERROR : u32 = 428;
pub const IDS_CAP_FILE_OPEN_ERROR : u32 = 429;
pub const IDS_CAP_FILE_WRITE_ERROR : u32 = 430;
pub const IDS_CAP_RECORDING_ERROR : u32 = 431;
pub const IDS_CAP_RECORDING_ERROR2 : u32 = 432;
pub const IDS_CAP_AVI_INIT_ERROR : u32 = 433;
pub const IDS_CAP_NO_FRAME_CAP_ERROR : u32 = 434;
pub const IDS_CAP_NO_PALETTE_WARN : u32 = 435;
pub const IDS_CAP_MCI_CONTROL_ERROR : u32 = 436;
pub const IDS_CAP_MCI_CANT_STEP_ERROR : u32 = 437;
pub const IDS_CAP_NO_AUDIO_CAP_ERROR : u32 = 438;
pub const IDS_CAP_AVI_DRAWDIB_ERROR : u32 = 439;
pub const IDS_CAP_COMPRESSOR_ERROR : u32 = 440;
pub const IDS_CAP_AUDIO_DROP_ERROR : u32 = 441;
pub const IDS_CAP_AUDIO_DROP_COMPERROR : u32 = 442;
pub const IDS_CAP_STAT_LIVE_MODE : u32 = 500;
pub const IDS_CAP_STAT_OVERLAY_MODE : u32 = 501;
pub const IDS_CAP_STAT_CAP_INIT : u32 = 502;
pub const IDS_CAP_STAT_CAP_FINI : u32 = 503;
pub const IDS_CAP_STAT_PALETTE_BUILD : u32 = 504;
pub const IDS_CAP_STAT_OPTPAL_BUILD : u32 = 505;
pub const IDS_CAP_STAT_I_FRAMES : u32 = 506;
pub const IDS_CAP_STAT_L_FRAMES : u32 = 507;
pub const IDS_CAP_STAT_CAP_L_FRAMES : u32 = 508;
pub const IDS_CAP_STAT_CAP_AUDIO : u32 = 509;
pub const IDS_CAP_STAT_VIDEOCURRENT : u32 = 510;
pub const IDS_CAP_STAT_VIDEOAUDIO : u32 = 511;
pub const IDS_CAP_STAT_VIDEOONLY : u32 = 512;
pub const IDS_CAP_STAT_FRAMESDROPPED : u32 = 513;
pub const JOYERR_NOERROR : u32 = 0;
pub const JOY_BUTTON1 : u32 = 1;
pub const JOY_BUTTON2 : u32 = 2;
pub const JOY_BUTTON3 : u32 = 4;
pub const JOY_BUTTON4 : u32 = 8;
pub const JOY_BUTTON1CHG : u32 = 256;
pub const JOY_BUTTON2CHG : u32 = 512;
pub const JOY_BUTTON3CHG : u32 = 1024;
pub const JOY_BUTTON4CHG : u32 = 2048;
pub const JOY_BUTTON5 : i32 = 16;
pub const JOY_BUTTON6 : i32 = 32;
pub const JOY_BUTTON7 : i32 = 64;
pub const JOY_BUTTON8 : i32 = 128;
pub const JOY_BUTTON9 : i32 = 256;
pub const JOY_BUTTON10 : i32 = 512;
pub const JOY_BUTTON11 : i32 = 1024;
pub const JOY_BUTTON12 : i32 = 2048;
pub const JOY_BUTTON13 : i32 = 4096;
pub const JOY_BUTTON14 : i32 = 8192;
pub const JOY_BUTTON15 : i32 = 16384;
pub const JOY_BUTTON16 : i32 = 32768;
pub const JOY_BUTTON17 : i32 = 65536;
pub const JOY_BUTTON18 : i32 = 131072;
pub const JOY_BUTTON19 : i32 = 262144;
pub const JOY_BUTTON20 : i32 = 524288;
pub const JOY_BUTTON21 : i32 = 1048576;
pub const JOY_BUTTON22 : i32 = 2097152;
pub const JOY_BUTTON23 : i32 = 4194304;
pub const JOY_BUTTON24 : i32 = 8388608;
pub const JOY_BUTTON25 : i32 = 16777216;
pub const JOY_BUTTON26 : i32 = 33554432;
pub const JOY_BUTTON27 : i32 = 67108864;
pub const JOY_BUTTON28 : i32 = 134217728;
pub const JOY_BUTTON29 : i32 = 268435456;
pub const JOY_BUTTON30 : i32 = 536870912;
pub const JOY_BUTTON31 : i32 = 1073741824;
pub const JOY_BUTTON32 : i32 = -2147483648;
pub const JOY_POVFORWARD : u32 = 0;
pub const JOY_POVRIGHT : u32 = 9000;
pub const JOY_POVBACKWARD : u32 = 18000;
pub const JOY_POVLEFT : u32 = 27000;
pub const JOY_RETURNX : i32 = 1;
pub const JOY_RETURNY : i32 = 2;
pub const JOY_RETURNZ : i32 = 4;
pub const JOY_RETURNR : i32 = 8;
pub const JOY_RETURNU : i32 = 16;
pub const JOY_RETURNV : i32 = 32;
pub const JOY_RETURNPOV : i32 = 64;
pub const JOY_RETURNBUTTONS : i32 = 128;
pub const JOY_RETURNRAWDATA : i32 = 256;
pub const JOY_RETURNPOVCTS : i32 = 512;
pub const JOY_RETURNCENTERED : i32 = 1024;
pub const JOY_USEDEADZONE : i32 = 2048;
pub const JOY_CAL_READALWAYS : i32 = 65536;
pub const JOY_CAL_READXYONLY : i32 = 131072;
pub const JOY_CAL_READ3 : i32 = 262144;
pub const JOY_CAL_READ4 : i32 = 524288;
pub const JOY_CAL_READXONLY : i32 = 1048576;
pub const JOY_CAL_READYONLY : i32 = 2097152;
pub const JOY_CAL_READ5 : i32 = 4194304;
pub const JOY_CAL_READ6 : i32 = 8388608;
pub const JOY_CAL_READZONLY : i32 = 16777216;
pub const JOY_CAL_READRONLY : i32 = 33554432;
pub const JOY_CAL_READUONLY : i32 = 67108864;
pub const JOY_CAL_READVONLY : i32 = 134217728;
pub const JOYSTICKID1 : u32 = 0;
pub const JOYSTICKID2 : u32 = 1;
pub const JOYCAPS_HASZ : u32 = 1;
pub const JOYCAPS_HASR : u32 = 2;
pub const JOYCAPS_HASU : u32 = 4;
pub const JOYCAPS_HASV : u32 = 8;
pub const JOYCAPS_HASPOV : u32 = 16;
pub const JOYCAPS_POV4DIR : u32 = 32;
pub const JOYCAPS_POVCTS : u32 = 64;
pub const DRV_LOAD : u32 = 1;
pub const DRV_ENABLE : u32 = 2;
pub const DRV_OPEN : u32 = 3;
pub const DRV_CLOSE : u32 = 4;
pub const DRV_DISABLE : u32 = 5;
pub const DRV_FREE : u32 = 6;
pub const DRV_CONFIGURE : u32 = 7;
pub const DRV_QUERYCONFIGURE : u32 = 8;
pub const DRV_INSTALL : u32 = 9;
pub const DRV_REMOVE : u32 = 10;
pub const DRV_RESERVED : u32 = 2048;
pub const DRV_USER : u32 = 16384;
pub const DCB_NOSWITCH : u32 = 8;
pub const DCB_TYPEMASK : u32 = 7;
pub const DCB_NULL : u32 = 0;
pub const DCB_WINDOW : u32 = 1;
pub const DCB_TASK : u32 = 2;
pub const DCB_FUNCTION : u32 = 3;
pub const DCB_EVENT : u32 = 5;
pub const DRVM_INIT : u32 = 100;
pub const DRVM_EXIT : u32 = 101;
pub const DRVM_DISABLE : u32 = 102;
pub const DRVM_ENABLE : u32 = 103;
pub const DRVM_INIT_EX : u32 = 104;
pub const DRVM_USER : u32 = 16384;
pub const DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY : u32 = 1;
pub const DRVM_IOCTL : u32 = 256;
pub const DRVM_IOCTL_CMD_USER : i32 = 0;
pub const DRVM_IOCTL_CMD_SYSTEM : i32 = -2147483648;
pub const VADMAD_Device_ID : u32 = 1092;
pub const WODM_GETNUMDEVS : u32 = 3;
pub const WODM_GETDEVCAPS : u32 = 4;
pub const WODM_OPEN : u32 = 5;
pub const WODM_CLOSE : u32 = 6;
pub const WODM_PREPARE : u32 = 7;
pub const WODM_UNPREPARE : u32 = 8;
pub const WODM_WRITE : u32 = 9;
pub const WODM_PAUSE : u32 = 10;
pub const WODM_RESTART : u32 = 11;
pub const WODM_RESET : u32 = 12;
pub const WODM_GETPOS : u32 = 13;
pub const WODM_GETPITCH : u32 = 14;
pub const WODM_SETPITCH : u32 = 15;
pub const WODM_GETVOLUME : u32 = 16;
pub const WODM_SETVOLUME : u32 = 17;
pub const WODM_GETPLAYBACKRATE : u32 = 18;
pub const WODM_SETPLAYBACKRATE : u32 = 19;
pub const WODM_BREAKLOOP : u32 = 20;
pub const WODM_PREFERRED : u32 = 21;
pub const WODM_BUSY : u32 = 21;
pub const WIDM_GETNUMDEVS : u32 = 50;
pub const WIDM_GETDEVCAPS : u32 = 51;
pub const WIDM_OPEN : u32 = 52;
pub const WIDM_CLOSE : u32 = 53;
pub const WIDM_PREPARE : u32 = 54;
pub const WIDM_UNPREPARE : u32 = 55;
pub const WIDM_ADDBUFFER : u32 = 56;
pub const WIDM_START : u32 = 57;
pub const WIDM_STOP : u32 = 58;
pub const WIDM_RESET : u32 = 59;
pub const WIDM_GETPOS : u32 = 60;
pub const WIDM_PREFERRED : u32 = 61;
pub const MIDI_IO_PACKED : i32 = 0;
pub const MIDI_IO_COOKED : i32 = 2;
pub const MODM_GETNUMDEVS : u32 = 1;
pub const MODM_GETDEVCAPS : u32 = 2;
pub const MODM_OPEN : u32 = 3;
pub const MODM_CLOSE : u32 = 4;
pub const MODM_PREPARE : u32 = 5;
pub const MODM_UNPREPARE : u32 = 6;
pub const MODM_DATA : u32 = 7;
pub const MODM_LONGDATA : u32 = 8;
pub const MODM_RESET : u32 = 9;
pub const MODM_GETVOLUME : u32 = 10;
pub const MODM_SETVOLUME : u32 = 11;
pub const MODM_CACHEPATCHES : u32 = 12;
pub const MODM_CACHEDRUMPATCHES : u32 = 13;
pub const MODM_STRMDATA : u32 = 14;
pub const MODM_GETPOS : u32 = 17;
pub const MODM_PAUSE : u32 = 18;
pub const MODM_RESTART : u32 = 19;
pub const MODM_STOP : u32 = 20;
pub const MODM_PROPERTIES : u32 = 21;
pub const MODM_PREFERRED : u32 = 22;
pub const MIDM_GETNUMDEVS : u32 = 53;
pub const MIDM_GETDEVCAPS : u32 = 54;
pub const MIDM_OPEN : u32 = 55;
pub const MIDM_CLOSE : u32 = 56;
pub const MIDM_PREPARE : u32 = 57;
pub const MIDM_UNPREPARE : u32 = 58;
pub const MIDM_ADDBUFFER : u32 = 59;
pub const MIDM_START : u32 = 60;
pub const MIDM_STOP : u32 = 61;
pub const MIDM_RESET : u32 = 62;
pub const AUXDM_GETNUMDEVS : u32 = 3;
pub const AUXDM_GETDEVCAPS : u32 = 4;
pub const AUXDM_GETVOLUME : u32 = 5;
pub const AUXDM_SETVOLUME : u32 = 6;
pub const MXDM_BASE : u32 = 1;
pub const MCI_OPEN_DRIVER : u32 = 2049;
pub const MCI_CLOSE_DRIVER : u32 = 2050;
pub const MCI_MAX_DEVICE_TYPE_LENGTH : u32 = 80;
pub const MCI_RESOURCE_RETURNED : u32 = 65536;
pub const MCI_COLONIZED3_RETURN : u32 = 131072;
pub const MCI_COLONIZED4_RETURN : u32 = 262144;
pub const MCI_INTEGER_RETURNED : u32 = 524288;
pub const MCI_RESOURCE_DRIVER : u32 = 1048576;
pub const MCI_COMMAND_HEAD : u32 = 0;
pub const MCI_STRING : u32 = 1;
pub const MCI_INTEGER : u32 = 2;
pub const MCI_END_COMMAND : u32 = 3;
pub const MCI_RETURN : u32 = 4;
pub const MCI_FLAG : u32 = 5;
pub const MCI_END_COMMAND_LIST : u32 = 6;
pub const MCI_RECT : u32 = 7;
pub const MCI_CONSTANT : u32 = 8;
pub const MCI_END_CONSTANT : u32 = 9;
pub const MCI_HWND : u32 = 10;
pub const MCI_HPAL : u32 = 11;
pub const MCI_HDC : u32 = 12;
pub const MCI_INTEGER64 : u32 = 13;
pub const TASKERR_NOTASKSUPPORT : u32 = 1;
pub const TASKERR_OUTOFMEMORY : u32 = 2;
pub const DRV_EXITSESSION : u32 = 11;
pub const DRV_POWER : u32 = 15;
pub const DRVCNF_CANCEL : u32 = 0;
pub const DRVCNF_OK : u32 = 1;
pub const DRVCNF_RESTART : u32 = 2;
pub const MMIOERR_BASE : u32 = 256;
pub const MMIO_RWMODE : u32 = 3;
pub const MMIO_SHAREMODE : u32 = 112;
pub const MMIO_CREATE : u32 = 4096;
pub const MMIO_PARSE : u32 = 256;
pub const MMIO_DELETE : u32 = 512;
pub const MMIO_EXIST : u32 = 16384;
pub const MMIO_ALLOCBUF : u32 = 65536;
pub const MMIO_GETTEMP : u32 = 131072;
pub const MMIO_DIRTY : u32 = 268435456;
pub const MMIO_READ : u32 = 0;
pub const MMIO_WRITE : u32 = 1;
pub const MMIO_READWRITE : u32 = 2;
pub const MMIO_COMPAT : u32 = 0;
pub const MMIO_EXCLUSIVE : u32 = 16;
pub const MMIO_DENYWRITE : u32 = 32;
pub const MMIO_DENYREAD : u32 = 48;
pub const MMIO_DENYNONE : u32 = 64;
pub const MMIO_FHOPEN : u32 = 16;
pub const MMIO_EMPTYBUF : u32 = 16;
pub const MMIO_TOUPPER : u32 = 16;
pub const MMIO_INSTALLPROC : u32 = 65536;
pub const MMIO_GLOBALPROC : u32 = 268435456;
pub const MMIO_REMOVEPROC : u32 = 131072;
pub const MMIO_UNICODEPROC : u32 = 16777216;
pub const MMIO_FINDPROC : u32 = 262144;
pub const MMIO_FINDCHUNK : u32 = 16;
pub const MMIO_FINDRIFF : u32 = 32;
pub const MMIO_FINDLIST : u32 = 64;
pub const MMIO_CREATERIFF : u32 = 32;
pub const MMIO_CREATELIST : u32 = 64;
pub const MMIOM_SEEK : u32 = 2;
pub const MMIOM_OPEN : u32 = 3;
pub const MMIOM_CLOSE : u32 = 4;
pub const MMIOM_WRITEFLUSH : u32 = 5;
pub const MMIOM_RENAME : u32 = 6;
pub const MMIOM_USER : u32 = 32768;
pub const SEEK_SET : u32 = 0;
pub const SEEK_CUR : u32 = 1;
pub const SEEK_END : u32 = 2;
pub const MMIO_DEFAULTBUFFER : u32 = 8192;
pub const TIMERR_NOERROR : u32 = 0;

//--------------------------------------------------------------------------------
// Section: Types (258)
//--------------------------------------------------------------------------------
pub const HACMDRIVER = ?*c_void;

pub const HACMDRIVERID = ?*c_void;

pub const HACMOBJ = ?*c_void;

pub const HACMSTREAM = ?*c_void;

pub const HDRVR = ?*c_void;

pub const HIC = ?*c_void;

pub const HMIDI = ?*c_void;

pub const HMIDIIN = ?*c_void;

pub const HMIDIOUT = ?*c_void;

pub const HMIDISTRM = ?*c_void;

pub const HMIXER = ?*c_void;

pub const HMIXEROBJ = ?*c_void;

pub const HMMIO = ?*c_void;

pub const HVIDEO = ?*c_void;

pub const HWAVE = ?*c_void;

pub const HWAVEIN = ?*c_void;

pub const HWAVEOUT = ?*c_void;

pub const MMTIME = extern struct {
    wType: u32,
    u: MMTIME._u_e__Union,
    const _u_e__Union = u32; // TODO: generate this nested type!
};

pub const DRVCALLBACK = fn(
    hdrvr: HDRVR,
    uMsg: u32,
    dwUser: ?*c_void,
    dw1: ?*c_void,
    dw2: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LPDRVCALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const PDRVCALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const DRVCONFIGINFOEX = extern struct {
    dwDCISize: u32,
    lpszDCISectionName: [*:0]const u16,
    lpszDCIAliasName: [*:0]const u16,
    dnDevNode: u32,
};

pub const DRVCONFIGINFO = extern struct {
    dwDCISize: u32,
    lpszDCISectionName: [*:0]const u16,
    lpszDCIAliasName: [*:0]const u16,
};

pub const DRIVERPROC = fn(
    param0: ?*c_void,
    param1: HDRVR,
    param2: u32,
    param3: LPARAM,
    param4: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const DRIVERMSGPROC = fn(
    param0: u32,
    param1: u32,
    param2: ?*c_void,
    param3: ?*c_void,
    param4: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const MMIOPROC = fn(
    lpmmioinfo: PSTR,
    uMsg: u32,
    lParam1: LPARAM,
    lParam2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const LPMMIOPROC = fn(
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const MMIOINFO = extern struct {
    dwFlags: u32,
    fccIOProc: u32,
    pIOProc: LPMMIOPROC,
    wErrorRet: u32,
    htask: HTASK,
    cchBuffer: i32,
    pchBuffer: *i8,
    pchNext: *i8,
    pchEndRead: *i8,
    pchEndWrite: *i8,
    lBufOffset: i32,
    lDiskOffset: i32,
    adwInfo: [3]u32,
    dwReserved1: u32,
    dwReserved2: u32,
    hmmio: HMMIO,
};

pub const MMCKINFO = extern struct {
    ckid: u32,
    cksize: u32,
    fccType: u32,
    dwDataOffset: u32,
    dwFlags: u32,
};

pub const WAVECALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const LPWAVECALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const WAVEHDR = extern struct {
    lpData: PSTR,
    dwBufferLength: u32,
    dwBytesRecorded: u32,
    dwUser: ?*c_void,
    dwFlags: u32,
    dwLoops: u32,
    lpNext: *WAVEHDR,
    reserved: ?*c_void,
};

pub const WAVEOUTCAPSA = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]i8,
    dwFormats: u32,
    wChannels: u16,
    wReserved1: u16,
    dwSupport: u32,
};

pub const WAVEOUTCAPSW = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]u16,
    dwFormats: u32,
    wChannels: u16,
    wReserved1: u16,
    dwSupport: u32,
};

pub const WAVEOUTCAPS2A = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]i8,
    dwFormats: u32,
    wChannels: u16,
    wReserved1: u16,
    dwSupport: u32,
    ManufacturerGuid: Guid,
    ProductGuid: Guid,
    NameGuid: Guid,
};

pub const WAVEOUTCAPS2W = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]u16,
    dwFormats: u32,
    wChannels: u16,
    wReserved1: u16,
    dwSupport: u32,
    ManufacturerGuid: Guid,
    ProductGuid: Guid,
    NameGuid: Guid,
};

pub const WAVEINCAPSA = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]i8,
    dwFormats: u32,
    wChannels: u16,
    wReserved1: u16,
};

pub const WAVEINCAPSW = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]u16,
    dwFormats: u32,
    wChannels: u16,
    wReserved1: u16,
};

pub const WAVEINCAPS2A = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]i8,
    dwFormats: u32,
    wChannels: u16,
    wReserved1: u16,
    ManufacturerGuid: Guid,
    ProductGuid: Guid,
    NameGuid: Guid,
};

pub const WAVEINCAPS2W = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]u16,
    dwFormats: u32,
    wChannels: u16,
    wReserved1: u16,
    ManufacturerGuid: Guid,
    ProductGuid: Guid,
    NameGuid: Guid,
};

pub const WAVEFORMAT = extern struct {
    wFormatTag: u16,
    nChannels: u16,
    nSamplesPerSec: u32,
    nAvgBytesPerSec: u32,
    nBlockAlign: u16,
};

pub const PCMWAVEFORMAT = extern struct {
    wf: WAVEFORMAT,
    wBitsPerSample: u16,
};

pub const WAVEFORMATEX = extern struct {
    wFormatTag: u16,
    nChannels: u16,
    nSamplesPerSec: u32,
    nAvgBytesPerSec: u32,
    nBlockAlign: u16,
    wBitsPerSample: u16,
    cbSize: u16,
};

pub const MIDICALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const LPMIDICALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const MIDIOUTCAPSA = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]i8,
    wTechnology: u16,
    wVoices: u16,
    wNotes: u16,
    wChannelMask: u16,
    dwSupport: u32,
};

pub const MIDIOUTCAPSW = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]u16,
    wTechnology: u16,
    wVoices: u16,
    wNotes: u16,
    wChannelMask: u16,
    dwSupport: u32,
};

pub const MIDIOUTCAPS2A = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]i8,
    wTechnology: u16,
    wVoices: u16,
    wNotes: u16,
    wChannelMask: u16,
    dwSupport: u32,
    ManufacturerGuid: Guid,
    ProductGuid: Guid,
    NameGuid: Guid,
};

pub const MIDIOUTCAPS2W = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]u16,
    wTechnology: u16,
    wVoices: u16,
    wNotes: u16,
    wChannelMask: u16,
    dwSupport: u32,
    ManufacturerGuid: Guid,
    ProductGuid: Guid,
    NameGuid: Guid,
};

pub const MIDIINCAPSA = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]i8,
    dwSupport: u32,
};

pub const MIDIINCAPSW = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]u16,
    dwSupport: u32,
};

pub const MIDIINCAPS2A = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]i8,
    dwSupport: u32,
    ManufacturerGuid: Guid,
    ProductGuid: Guid,
    NameGuid: Guid,
};

pub const MIDIINCAPS2W = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]u16,
    dwSupport: u32,
    ManufacturerGuid: Guid,
    ProductGuid: Guid,
    NameGuid: Guid,
};

pub const MIDIHDR = extern struct {
    lpData: PSTR,
    dwBufferLength: u32,
    dwBytesRecorded: u32,
    dwUser: ?*c_void,
    dwFlags: u32,
    lpNext: *MIDIHDR,
    reserved: ?*c_void,
    dwOffset: u32,
    dwReserved: [8]?*c_void,
};

pub const MIDIEVENT = extern struct {
    dwDeltaTime: u32,
    dwStreamID: u32,
    dwEvent: u32,
    dwParms: [1]u32,
};

pub const MIDISTRMBUFFVER = extern struct {
    dwVersion: u32,
    dwMid: u32,
    dwOEMVersion: u32,
};

pub const MIDIPROPTIMEDIV = extern struct {
    cbStruct: u32,
    dwTimeDiv: u32,
};

pub const MIDIPROPTEMPO = extern struct {
    cbStruct: u32,
    dwTempo: u32,
};

pub const AUXCAPSA = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]i8,
    wTechnology: u16,
    wReserved1: u16,
    dwSupport: u32,
};

pub const AUXCAPSW = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]u16,
    wTechnology: u16,
    wReserved1: u16,
    dwSupport: u32,
};

pub const AUXCAPS2A = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]i8,
    wTechnology: u16,
    wReserved1: u16,
    dwSupport: u32,
    ManufacturerGuid: Guid,
    ProductGuid: Guid,
    NameGuid: Guid,
};

pub const AUXCAPS2W = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]u16,
    wTechnology: u16,
    wReserved1: u16,
    dwSupport: u32,
    ManufacturerGuid: Guid,
    ProductGuid: Guid,
    NameGuid: Guid,
};

pub const MIXERCAPSA = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]i8,
    fdwSupport: u32,
    cDestinations: u32,
};

pub const MIXERCAPSW = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]u16,
    fdwSupport: u32,
    cDestinations: u32,
};

pub const MIXERCAPS2A = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]i8,
    fdwSupport: u32,
    cDestinations: u32,
    ManufacturerGuid: Guid,
    ProductGuid: Guid,
    NameGuid: Guid,
};

pub const MIXERCAPS2W = extern struct {
    wMid: u16,
    wPid: u16,
    vDriverVersion: u32,
    szPname: [32]u16,
    fdwSupport: u32,
    cDestinations: u32,
    ManufacturerGuid: Guid,
    ProductGuid: Guid,
    NameGuid: Guid,
};

pub const MIXERLINEA = extern struct {
    cbStruct: u32,
    dwDestination: u32,
    dwSource: u32,
    dwLineID: u32,
    fdwLine: u32,
    dwUser: ?*c_void,
    dwComponentType: MIXERLINE_COMPONENTTYPE,
    cChannels: u32,
    cConnections: u32,
    cControls: u32,
    szShortName: [16]i8,
    szName: [64]i8,
    Target: MIXERLINEA._Target_e__Struct,
    const _Target_e__Struct = u32; // TODO: generate this nested type!
};

pub const MIXERLINEW = extern struct {
    cbStruct: u32,
    dwDestination: u32,
    dwSource: u32,
    dwLineID: u32,
    fdwLine: u32,
    dwUser: ?*c_void,
    dwComponentType: MIXERLINE_COMPONENTTYPE,
    cChannels: u32,
    cConnections: u32,
    cControls: u32,
    szShortName: [16]u16,
    szName: [64]u16,
    Target: MIXERLINEW._Target_e__Struct,
    const _Target_e__Struct = u32; // TODO: generate this nested type!
};

pub const MIXERCONTROLA = extern struct {
    cbStruct: u32,
    dwControlID: u32,
    dwControlType: u32,
    fdwControl: u32,
    cMultipleItems: u32,
    szShortName: [16]i8,
    szName: [64]i8,
    Bounds: MIXERCONTROLA._Bounds_e__Union,
    Metrics: MIXERCONTROLA._Metrics_e__Union,
    const _Bounds_e__Union = u32; // TODO: generate this nested type!
    const _Metrics_e__Union = u32; // TODO: generate this nested type!
};

pub const MIXERCONTROLW = extern struct {
    cbStruct: u32,
    dwControlID: u32,
    dwControlType: u32,
    fdwControl: u32,
    cMultipleItems: u32,
    szShortName: [16]u16,
    szName: [64]u16,
    Bounds: MIXERCONTROLW._Bounds_e__Union,
    Metrics: MIXERCONTROLW._Metrics_e__Union,
    const _Metrics_e__Union = u32; // TODO: generate this nested type!
    const _Bounds_e__Union = u32; // TODO: generate this nested type!
};

pub const MIXERLINECONTROLSA = extern struct {
    cbStruct: u32,
    dwLineID: u32,
    Anonymous: MIXERLINECONTROLSA._Anonymous_e__Union,
    cControls: u32,
    cbmxctrl: u32,
    pamxctrl: *MIXERCONTROLA,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const MIXERLINECONTROLSW = extern struct {
    cbStruct: u32,
    dwLineID: u32,
    Anonymous: MIXERLINECONTROLSW._Anonymous_e__Union,
    cControls: u32,
    cbmxctrl: u32,
    pamxctrl: *MIXERCONTROLW,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const MIXERCONTROLDETAILS = extern struct {
    cbStruct: u32,
    dwControlID: u32,
    cChannels: u32,
    Anonymous: MIXERCONTROLDETAILS._Anonymous_e__Union,
    cbDetails: u32,
    paDetails: *c_void,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const MIXERCONTROLDETAILS_LISTTEXTA = extern struct {
    dwParam1: u32,
    dwParam2: u32,
    szName: [64]i8,
};

pub const MIXERCONTROLDETAILS_LISTTEXTW = extern struct {
    dwParam1: u32,
    dwParam2: u32,
    szName: [64]u16,
};

pub const MIXERCONTROLDETAILS_BOOLEAN = extern struct {
    fValue: i32,
};

pub const MIXERCONTROLDETAILS_SIGNED = extern struct {
    lValue: i32,
};

pub const MIXERCONTROLDETAILS_UNSIGNED = extern struct {
    dwValue: u32,
};

pub const TIMECAPS = extern struct {
    wPeriodMin: u32,
    wPeriodMax: u32,
};

pub const JOYCAPSA = extern struct {
    wMid: u16,
    wPid: u16,
    szPname: [32]i8,
    wXmin: u32,
    wXmax: u32,
    wYmin: u32,
    wYmax: u32,
    wZmin: u32,
    wZmax: u32,
    wNumButtons: u32,
    wPeriodMin: u32,
    wPeriodMax: u32,
    wRmin: u32,
    wRmax: u32,
    wUmin: u32,
    wUmax: u32,
    wVmin: u32,
    wVmax: u32,
    wCaps: u32,
    wMaxAxes: u32,
    wNumAxes: u32,
    wMaxButtons: u32,
    szRegKey: [32]i8,
    szOEMVxD: [260]i8,
};

pub const JOYCAPSW = extern struct {
    wMid: u16,
    wPid: u16,
    szPname: [32]u16,
    wXmin: u32,
    wXmax: u32,
    wYmin: u32,
    wYmax: u32,
    wZmin: u32,
    wZmax: u32,
    wNumButtons: u32,
    wPeriodMin: u32,
    wPeriodMax: u32,
    wRmin: u32,
    wRmax: u32,
    wUmin: u32,
    wUmax: u32,
    wVmin: u32,
    wVmax: u32,
    wCaps: u32,
    wMaxAxes: u32,
    wNumAxes: u32,
    wMaxButtons: u32,
    szRegKey: [32]u16,
    szOEMVxD: [260]u16,
};

pub const JOYCAPS2A = extern struct {
    wMid: u16,
    wPid: u16,
    szPname: [32]i8,
    wXmin: u32,
    wXmax: u32,
    wYmin: u32,
    wYmax: u32,
    wZmin: u32,
    wZmax: u32,
    wNumButtons: u32,
    wPeriodMin: u32,
    wPeriodMax: u32,
    wRmin: u32,
    wRmax: u32,
    wUmin: u32,
    wUmax: u32,
    wVmin: u32,
    wVmax: u32,
    wCaps: u32,
    wMaxAxes: u32,
    wNumAxes: u32,
    wMaxButtons: u32,
    szRegKey: [32]i8,
    szOEMVxD: [260]i8,
    ManufacturerGuid: Guid,
    ProductGuid: Guid,
    NameGuid: Guid,
};

pub const JOYCAPS2W = extern struct {
    wMid: u16,
    wPid: u16,
    szPname: [32]u16,
    wXmin: u32,
    wXmax: u32,
    wYmin: u32,
    wYmax: u32,
    wZmin: u32,
    wZmax: u32,
    wNumButtons: u32,
    wPeriodMin: u32,
    wPeriodMax: u32,
    wRmin: u32,
    wRmax: u32,
    wUmin: u32,
    wUmax: u32,
    wVmin: u32,
    wVmax: u32,
    wCaps: u32,
    wMaxAxes: u32,
    wNumAxes: u32,
    wMaxButtons: u32,
    szRegKey: [32]u16,
    szOEMVxD: [260]u16,
    ManufacturerGuid: Guid,
    ProductGuid: Guid,
    NameGuid: Guid,
};

pub const JOYINFO = extern struct {
    wXpos: u32,
    wYpos: u32,
    wZpos: u32,
    wButtons: u32,
};

pub const JOYINFOEX = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwXpos: u32,
    dwYpos: u32,
    dwZpos: u32,
    dwRpos: u32,
    dwUpos: u32,
    dwVpos: u32,
    dwButtons: u32,
    dwButtonNumber: u32,
    dwPOV: u32,
    dwReserved1: u32,
    dwReserved2: u32,
};

const CLSID_KSDATAFORMAT_SUBTYPE_PCM_Value = @import("../zig.zig").Guid.initString("00000001-0000-0010-8000-00aa00389b71");
pub const CLSID_KSDATAFORMAT_SUBTYPE_PCM = &CLSID_KSDATAFORMAT_SUBTYPE_PCM_Value;

const CLSID_KSDATAFORMAT_SUBTYPE_IEEE_FLOAT_Value = @import("../zig.zig").Guid.initString("00000003-0000-0010-8000-00aa00389b71");
pub const CLSID_KSDATAFORMAT_SUBTYPE_IEEE_FLOAT = &CLSID_KSDATAFORMAT_SUBTYPE_IEEE_FLOAT_Value;

const CLSID_KSDATAFORMAT_SUBTYPE_WAVEFORMATEX_Value = @import("../zig.zig").Guid.initString("00000000-0000-0010-8000-00aa00389b71");
pub const CLSID_KSDATAFORMAT_SUBTYPE_WAVEFORMATEX = &CLSID_KSDATAFORMAT_SUBTYPE_WAVEFORMATEX_Value;

pub const WAVEFORMATEXTENSIBLE = extern struct {
    Format: WAVEFORMATEX,
    Samples: WAVEFORMATEXTENSIBLE._Samples_e__Union,
    dwChannelMask: u32,
    SubFormat: Guid,
    const _Samples_e__Union = u32; // TODO: generate this nested type!
};

pub const ADPCMCOEFSET = extern struct {
    iCoef1: i16,
    iCoef2: i16,
};

pub const ADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wSamplesPerBlock: u16,
    wNumCoef: u16,
    aCoef: ADPCMCOEFSET,
};

pub const DRMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wReserved: u16,
    ulContentId: u32,
    wfxSecure: WAVEFORMATEX,
};

pub const DVIADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wSamplesPerBlock: u16,
};

pub const IMAADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wSamplesPerBlock: u16,
};

pub const MEDIASPACEADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wRevision: u16,
};

pub const SIERRAADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wRevision: u16,
};

pub const G723_ADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    cbExtraSize: u16,
    nAuxBlockSize: u16,
};

pub const DIGISTDWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
};

pub const DIGIFIXWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
};

pub const DIALOGICOKIADPCMWAVEFORMAT = extern struct {
    ewf: WAVEFORMATEX,
};

pub const YAMAHA_ADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
};

pub const SONARCWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wCompType: u16,
};

pub const TRUESPEECHWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wRevision: u16,
    nSamplesPerBlock: u16,
    abReserved: [28]u8,
};

pub const ECHOSC1WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
};

pub const AUDIOFILE_AF36WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
};

pub const APTXWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
};

pub const AUDIOFILE_AF10WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
};

pub const DOLBYAC2WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    nAuxBitsCode: u16,
};

pub const GSM610WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wSamplesPerBlock: u16,
};

pub const ADPCMEWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wSamplesPerBlock: u16,
};

pub const CONTRESVQLPCWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wSamplesPerBlock: u16,
};

pub const DIGIREALWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wSamplesPerBlock: u16,
};

pub const DIGIADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wSamplesPerBlock: u16,
};

pub const CONTRESCR10WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wSamplesPerBlock: u16,
};

pub const NMS_VBXADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wSamplesPerBlock: u16,
};

pub const G721_ADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    nAuxBlockSize: u16,
};

pub const MSAUDIO1WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wSamplesPerBlock: u16,
    wEncodeOptions: u16,
};

pub const WMAUDIO2WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    dwSamplesPerBlock: u32,
    wEncodeOptions: u16,
    dwSuperBlockAlign: u32,
};

pub const WMAUDIO3WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wValidBitsPerSample: u16,
    dwChannelMask: u32,
    dwReserved1: u32,
    dwReserved2: u32,
    wEncodeOptions: u16,
    wReserved3: u16,
};

pub const CREATIVEADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wRevision: u16,
};

pub const CREATIVEFASTSPEECH8WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wRevision: u16,
};

pub const CREATIVEFASTSPEECH10WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wRevision: u16,
};

pub const FMTOWNS_SND_WAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
    wRevision: u16,
};

pub const OLIGSMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
};

pub const OLIADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
};

pub const OLICELPWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
};

pub const OLISBCWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
};

pub const OLIOPRWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
};

pub const CSIMAADPCMWAVEFORMAT = extern struct {
    wfx: WAVEFORMATEX,
};

pub const WAVEFILTER = extern struct {
    cbStruct: u32,
    dwFilterTag: u32,
    fdwFilter: u32,
    dwReserved: [5]u32,
};

pub const VOLUMEWAVEFILTER = extern struct {
    wfltr: WAVEFILTER,
    dwVolume: u32,
};

pub const ECHOWAVEFILTER = extern struct {
    wfltr: WAVEFILTER,
    dwVolume: u32,
    dwDelay: u32,
};

pub const s_RIFFWAVE_inst = extern struct {
    bUnshiftedNote: u8,
    chFineTune: i8,
    chGain: i8,
    bLowNote: u8,
    bHighNote: u8,
    bLowVelocity: u8,
    bHighVelocity: u8,
};

pub const EXBMINFOHEADER = extern struct {
    bmi: BITMAPINFOHEADER,
    biExtDataOffset: u32,
};

pub const JPEGINFOHEADER = extern struct {
    JPEGSize: u32,
    JPEGProcess: u32,
    JPEGColorSpaceID: u32,
    JPEGBitsPerSample: u32,
    JPEGHSubSampling: u32,
    JPEGVSubSampling: u32,
};

pub const MCI_DGV_RECT_PARMS = extern struct {
    dwCallback: ?*c_void,
    rc: RECT,
};

pub const MCI_DGV_CAPTURE_PARMSA = extern struct {
    dwCallback: ?*c_void,
    lpstrFileName: PSTR,
    rc: RECT,
};

pub const MCI_DGV_CAPTURE_PARMSW = extern struct {
    dwCallback: ?*c_void,
    lpstrFileName: PWSTR,
    rc: RECT,
};

pub const MCI_DGV_COPY_PARMS = extern struct {
    dwCallback: ?*c_void,
    dwFrom: u32,
    dwTo: u32,
    rc: RECT,
    dwAudioStream: u32,
    dwVideoStream: u32,
};

pub const MCI_DGV_CUE_PARMS = extern struct {
    dwCallback: ?*c_void,
    dwTo: u32,
};

pub const MCI_DGV_CUT_PARMS = extern struct {
    dwCallback: ?*c_void,
    dwFrom: u32,
    dwTo: u32,
    rc: RECT,
    dwAudioStream: u32,
    dwVideoStream: u32,
};

pub const MCI_DGV_DELETE_PARMS = extern struct {
    dwCallback: ?*c_void,
    dwFrom: u32,
    dwTo: u32,
    rc: RECT,
    dwAudioStream: u32,
    dwVideoStream: u32,
};

pub const MCI_DGV_INFO_PARMSA = extern struct {
    dwCallback: ?*c_void,
    lpstrReturn: PSTR,
    dwRetSize: u32,
    dwItem: u32,
};

pub const MCI_DGV_INFO_PARMSW = extern struct {
    dwCallback: ?*c_void,
    lpstrReturn: PWSTR,
    dwRetSize: u32,
    dwItem: u32,
};

pub const MCI_DGV_LIST_PARMSA = extern struct {
    dwCallback: ?*c_void,
    lpstrReturn: PSTR,
    dwLength: u32,
    dwNumber: u32,
    dwItem: u32,
    lpstrAlgorithm: PSTR,
};

pub const MCI_DGV_LIST_PARMSW = extern struct {
    dwCallback: ?*c_void,
    lpstrReturn: PWSTR,
    dwLength: u32,
    dwNumber: u32,
    dwItem: u32,
    lpstrAlgorithm: PWSTR,
};

pub const MCI_DGV_MONITOR_PARMS = extern struct {
    dwCallback: ?*c_void,
    dwSource: u32,
    dwMethod: u32,
};

pub const MCI_DGV_OPEN_PARMSA = extern struct {
    dwCallback: ?*c_void,
    wDeviceID: u32,
    lpstrDeviceType: PSTR,
    lpstrElementName: PSTR,
    lpstrAlias: PSTR,
    dwStyle: u32,
    hWndParent: HWND,
};

pub const MCI_DGV_OPEN_PARMSW = extern struct {
    dwCallback: ?*c_void,
    wDeviceID: u32,
    lpstrDeviceType: PWSTR,
    lpstrElementName: PWSTR,
    lpstrAlias: PWSTR,
    dwStyle: u32,
    hWndParent: HWND,
};

pub const MCI_DGV_PASTE_PARMS = extern struct {
    dwCallback: ?*c_void,
    dwTo: u32,
    rc: RECT,
    dwAudioStream: u32,
    dwVideoStream: u32,
};

pub const MCI_DGV_QUALITY_PARMSA = extern struct {
    dwCallback: ?*c_void,
    dwItem: u32,
    lpstrName: PSTR,
    lpstrAlgorithm: u32,
    dwHandle: u32,
};

pub const MCI_DGV_QUALITY_PARMSW = extern struct {
    dwCallback: ?*c_void,
    dwItem: u32,
    lpstrName: PWSTR,
    lpstrAlgorithm: u32,
    dwHandle: u32,
};

pub const MCI_DGV_RECORD_PARMS = extern struct {
    dwCallback: ?*c_void,
    dwFrom: u32,
    dwTo: u32,
    rc: RECT,
    dwAudioStream: u32,
    dwVideoStream: u32,
};

pub const MCI_DGV_RESERVE_PARMSA = extern struct {
    dwCallback: ?*c_void,
    lpstrPath: PSTR,
    dwSize: u32,
};

pub const MCI_DGV_RESERVE_PARMSW = extern struct {
    dwCallback: ?*c_void,
    lpstrPath: PWSTR,
    dwSize: u32,
};

pub const MCI_DGV_RESTORE_PARMSA = extern struct {
    dwCallback: ?*c_void,
    lpstrFileName: PSTR,
    rc: RECT,
};

pub const MCI_DGV_RESTORE_PARMSW = extern struct {
    dwCallback: ?*c_void,
    lpstrFileName: PWSTR,
    rc: RECT,
};

pub const MCI_DGV_SAVE_PARMSA = extern struct {
    dwCallback: ?*c_void,
    lpstrFileName: PSTR,
    rc: RECT,
};

pub const MCI_DGV_SAVE_PARMSW = extern struct {
    dwCallback: ?*c_void,
    lpstrFileName: PWSTR,
    rc: RECT,
};

pub const MCI_DGV_SET_PARMS = extern struct {
    dwCallback: ?*c_void,
    dwTimeFormat: u32,
    dwAudio: u32,
    dwFileFormat: u32,
    dwSpeed: u32,
};

pub const MCI_DGV_SETAUDIO_PARMSA = extern struct {
    dwCallback: ?*c_void,
    dwItem: u32,
    dwValue: u32,
    dwOver: u32,
    lpstrAlgorithm: PSTR,
    lpstrQuality: PSTR,
};

pub const MCI_DGV_SETAUDIO_PARMSW = extern struct {
    dwCallback: ?*c_void,
    dwItem: u32,
    dwValue: u32,
    dwOver: u32,
    lpstrAlgorithm: PWSTR,
    lpstrQuality: PWSTR,
};

pub const MCI_DGV_SIGNAL_PARMS = extern struct {
    dwCallback: ?*c_void,
    dwPosition: u32,
    dwPeriod: u32,
    dwUserParm: u32,
};

pub const MCI_DGV_SETVIDEO_PARMSA = extern struct {
    dwCallback: ?*c_void,
    dwItem: u32,
    dwValue: u32,
    dwOver: u32,
    lpstrAlgorithm: PSTR,
    lpstrQuality: PSTR,
    dwSourceNumber: u32,
};

pub const MCI_DGV_SETVIDEO_PARMSW = extern struct {
    dwCallback: ?*c_void,
    dwItem: u32,
    dwValue: u32,
    dwOver: u32,
    lpstrAlgorithm: PWSTR,
    lpstrQuality: PWSTR,
    dwSourceNumber: u32,
};

pub const MCI_DGV_STATUS_PARMSA = extern struct {
    dwCallback: ?*c_void,
    dwReturn: ?*c_void,
    dwItem: u32,
    dwTrack: u32,
    lpstrDrive: PSTR,
    dwReference: u32,
};

pub const MCI_DGV_STATUS_PARMSW = extern struct {
    dwCallback: ?*c_void,
    dwReturn: ?*c_void,
    dwItem: u32,
    dwTrack: u32,
    lpstrDrive: PWSTR,
    dwReference: u32,
};

pub const MCI_DGV_STEP_PARMS = extern struct {
    dwCallback: ?*c_void,
    dwFrames: u32,
};

pub const MCI_DGV_UPDATE_PARMS = extern struct {
    dwCallback: ?*c_void,
    rc: RECT,
    hDC: HDC,
};

pub const MCI_DGV_WINDOW_PARMSA = extern struct {
    dwCallback: ?*c_void,
    hWnd: HWND,
    nCmdShow: u32,
    lpstrText: PSTR,
};

pub const MCI_DGV_WINDOW_PARMSW = extern struct {
    dwCallback: ?*c_void,
    hWnd: HWND,
    nCmdShow: u32,
    lpstrText: PWSTR,
};

pub const ACMDRIVERENUMCB = fn(
    hadid: HACMDRIVERID,
    dwInstance: ?*c_void,
    fdwSupport: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const ACMDRIVERPROC = fn(
    param0: ?*c_void,
    param1: HACMDRIVERID,
    param2: u32,
    param3: LPARAM,
    param4: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const LPACMDRIVERPROC = fn(
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const tACMDRIVERDETAILSA = extern struct {
    cbStruct: u32,
    fccType: u32,
    fccComp: u32,
    wMid: u16,
    wPid: u16,
    vdwACM: u32,
    vdwDriver: u32,
    fdwSupport: u32,
    cFormatTags: u32,
    cFilterTags: u32,
    hicon: HICON,
    szShortName: [32]i8,
    szLongName: [128]i8,
    szCopyright: [80]i8,
    szLicensing: [128]i8,
    szFeatures: [512]i8,
};

pub const tACMDRIVERDETAILSW = extern struct {
    cbStruct: u32,
    fccType: u32,
    fccComp: u32,
    wMid: u16,
    wPid: u16,
    vdwACM: u32,
    vdwDriver: u32,
    fdwSupport: u32,
    cFormatTags: u32,
    cFilterTags: u32,
    hicon: HICON,
    szShortName: [32]u16,
    szLongName: [128]u16,
    szCopyright: [80]u16,
    szLicensing: [128]u16,
    szFeatures: [512]u16,
};

pub const ACMFORMATTAGDETAILSA = extern struct {
    cbStruct: u32,
    dwFormatTagIndex: u32,
    dwFormatTag: u32,
    cbFormatSize: u32,
    fdwSupport: u32,
    cStandardFormats: u32,
    szFormatTag: [48]i8,
};

pub const ACMFORMATTAGDETAILSW = extern struct {
    cbStruct: u32,
    dwFormatTagIndex: u32,
    dwFormatTag: u32,
    cbFormatSize: u32,
    fdwSupport: u32,
    cStandardFormats: u32,
    szFormatTag: [48]u16,
};

pub const ACMFORMATTAGENUMCBA = fn(
    hadid: HACMDRIVERID,
    paftd: *ACMFORMATTAGDETAILSA,
    dwInstance: ?*c_void,
    fdwSupport: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const ACMFORMATTAGENUMCBW = fn(
    hadid: HACMDRIVERID,
    paftd: *ACMFORMATTAGDETAILSW,
    dwInstance: ?*c_void,
    fdwSupport: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const tACMFORMATDETAILSA = extern struct {
    cbStruct: u32,
    dwFormatIndex: u32,
    dwFormatTag: u32,
    fdwSupport: u32,
    pwfx: *WAVEFORMATEX,
    cbwfx: u32,
    szFormat: [128]i8,
};

pub const tACMFORMATDETAILSW = extern struct {
    cbStruct: u32,
    dwFormatIndex: u32,
    dwFormatTag: u32,
    fdwSupport: u32,
    pwfx: *WAVEFORMATEX,
    cbwfx: u32,
    szFormat: [128]u16,
};

pub const ACMFORMATENUMCBA = fn(
    hadid: HACMDRIVERID,
    pafd: *tACMFORMATDETAILSA,
    dwInstance: ?*c_void,
    fdwSupport: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const ACMFORMATENUMCBW = fn(
    hadid: HACMDRIVERID,
    pafd: *tACMFORMATDETAILSW,
    dwInstance: ?*c_void,
    fdwSupport: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const ACMFORMATCHOOSEHOOKPROCA = fn(
    hwnd: HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const ACMFORMATCHOOSEHOOKPROCW = fn(
    hwnd: HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const tACMFORMATCHOOSEA = extern struct {
    cbStruct: u32,
    fdwStyle: u32,
    hwndOwner: HWND,
    pwfx: *WAVEFORMATEX,
    cbwfx: u32,
    pszTitle: [*:0]const u8,
    szFormatTag: [48]i8,
    szFormat: [128]i8,
    pszName: PSTR,
    cchName: u32,
    fdwEnum: u32,
    pwfxEnum: *WAVEFORMATEX,
    hInstance: HINSTANCE,
    pszTemplateName: [*:0]const u8,
    lCustData: LPARAM,
    pfnHook: ACMFORMATCHOOSEHOOKPROCA,
};

pub const tACMFORMATCHOOSEW = extern struct {
    cbStruct: u32,
    fdwStyle: u32,
    hwndOwner: HWND,
    pwfx: *WAVEFORMATEX,
    cbwfx: u32,
    pszTitle: [*:0]const u16,
    szFormatTag: [48]u16,
    szFormat: [128]u16,
    pszName: PWSTR,
    cchName: u32,
    fdwEnum: u32,
    pwfxEnum: *WAVEFORMATEX,
    hInstance: HINSTANCE,
    pszTemplateName: [*:0]const u16,
    lCustData: LPARAM,
    pfnHook: ACMFORMATCHOOSEHOOKPROCW,
};

pub const ACMFILTERTAGDETAILSA = extern struct {
    cbStruct: u32,
    dwFilterTagIndex: u32,
    dwFilterTag: u32,
    cbFilterSize: u32,
    fdwSupport: u32,
    cStandardFilters: u32,
    szFilterTag: [48]i8,
};

pub const ACMFILTERTAGDETAILSW = extern struct {
    cbStruct: u32,
    dwFilterTagIndex: u32,
    dwFilterTag: u32,
    cbFilterSize: u32,
    fdwSupport: u32,
    cStandardFilters: u32,
    szFilterTag: [48]u16,
};

pub const ACMFILTERTAGENUMCBA = fn(
    hadid: HACMDRIVERID,
    paftd: *ACMFILTERTAGDETAILSA,
    dwInstance: ?*c_void,
    fdwSupport: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const ACMFILTERTAGENUMCBW = fn(
    hadid: HACMDRIVERID,
    paftd: *ACMFILTERTAGDETAILSW,
    dwInstance: ?*c_void,
    fdwSupport: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const tACMFILTERDETAILSA = extern struct {
    cbStruct: u32,
    dwFilterIndex: u32,
    dwFilterTag: u32,
    fdwSupport: u32,
    pwfltr: *WAVEFILTER,
    cbwfltr: u32,
    szFilter: [128]i8,
};

pub const tACMFILTERDETAILSW = extern struct {
    cbStruct: u32,
    dwFilterIndex: u32,
    dwFilterTag: u32,
    fdwSupport: u32,
    pwfltr: *WAVEFILTER,
    cbwfltr: u32,
    szFilter: [128]u16,
};

pub const ACMFILTERENUMCBA = fn(
    hadid: HACMDRIVERID,
    pafd: *tACMFILTERDETAILSA,
    dwInstance: ?*c_void,
    fdwSupport: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const ACMFILTERENUMCBW = fn(
    hadid: HACMDRIVERID,
    pafd: *tACMFILTERDETAILSW,
    dwInstance: ?*c_void,
    fdwSupport: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const ACMFILTERCHOOSEHOOKPROCA = fn(
    hwnd: HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const ACMFILTERCHOOSEHOOKPROCW = fn(
    hwnd: HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const tACMFILTERCHOOSEA = extern struct {
    cbStruct: u32,
    fdwStyle: u32,
    hwndOwner: HWND,
    pwfltr: *WAVEFILTER,
    cbwfltr: u32,
    pszTitle: [*:0]const u8,
    szFilterTag: [48]i8,
    szFilter: [128]i8,
    pszName: PSTR,
    cchName: u32,
    fdwEnum: u32,
    pwfltrEnum: *WAVEFILTER,
    hInstance: HINSTANCE,
    pszTemplateName: [*:0]const u8,
    lCustData: LPARAM,
    pfnHook: ACMFILTERCHOOSEHOOKPROCA,
};

pub const tACMFILTERCHOOSEW = extern struct {
    cbStruct: u32,
    fdwStyle: u32,
    hwndOwner: HWND,
    pwfltr: *WAVEFILTER,
    cbwfltr: u32,
    pszTitle: [*:0]const u16,
    szFilterTag: [48]u16,
    szFilter: [128]u16,
    pszName: PWSTR,
    cchName: u32,
    fdwEnum: u32,
    pwfltrEnum: *WAVEFILTER,
    hInstance: HINSTANCE,
    pszTemplateName: [*:0]const u16,
    lCustData: LPARAM,
    pfnHook: ACMFILTERCHOOSEHOOKPROCW,
};

pub const ACMSTREAMHEADER = extern struct {
    cbStruct: u32,
    fdwStatus: u32,
    dwUser: ?*c_void,
    pbSrc: *u8,
    cbSrcLength: u32,
    cbSrcLengthUsed: u32,
    dwSrcUser: ?*c_void,
    pbDst: *u8,
    cbDstLength: u32,
    cbDstLengthUsed: u32,
    dwDstUser: ?*c_void,
    dwReservedDriver: [10]u32,
};

pub const ICOPEN = extern struct {
    dwSize: u32,
    fccType: u32,
    fccHandler: u32,
    dwVersion: u32,
    dwFlags: u32,
    dwError: LRESULT,
    pV1Reserved: *c_void,
    pV2Reserved: *c_void,
    dnDevNode: u32,
};

pub const ICINFO = extern struct {
    dwSize: u32,
    fccType: u32,
    fccHandler: u32,
    dwFlags: u32,
    dwVersion: u32,
    dwVersionICM: u32,
    szName: [16]u16,
    szDescription: [128]u16,
    szDriver: [128]u16,
};

pub const ICCOMPRESS = extern struct {
    dwFlags: u32,
    lpbiOutput: *BITMAPINFOHEADER,
    lpOutput: *c_void,
    lpbiInput: *BITMAPINFOHEADER,
    lpInput: *c_void,
    lpckid: *u32,
    lpdwFlags: *u32,
    lFrameNum: i32,
    dwFrameSize: u32,
    dwQuality: u32,
    lpbiPrev: *BITMAPINFOHEADER,
    lpPrev: *c_void,
};

pub const ICCOMPRESSFRAMES = extern struct {
    dwFlags: u32,
    lpbiOutput: *BITMAPINFOHEADER,
    lOutput: LPARAM,
    lpbiInput: *BITMAPINFOHEADER,
    lInput: LPARAM,
    lStartFrame: i32,
    lFrameCount: i32,
    lQuality: i32,
    lDataRate: i32,
    lKeyRate: i32,
    dwRate: u32,
    dwScale: u32,
    dwOverheadPerFrame: u32,
    dwReserved2: u32,
    GetData: ?*c_void,
    PutData: ?*c_void,
};

pub const ICSETSTATUSPROC = extern struct {
    dwFlags: u32,
    lParam: LPARAM,
    Status: ?*c_void,
};

pub const ICDECOMPRESS = extern struct {
    dwFlags: u32,
    lpbiInput: *BITMAPINFOHEADER,
    lpInput: *c_void,
    lpbiOutput: *BITMAPINFOHEADER,
    lpOutput: *c_void,
    ckid: u32,
};

pub const ICDECOMPRESSEX = extern struct {
    dwFlags: u32,
    lpbiSrc: *BITMAPINFOHEADER,
    lpSrc: *c_void,
    lpbiDst: *BITMAPINFOHEADER,
    lpDst: *c_void,
    xDst: i32,
    yDst: i32,
    dxDst: i32,
    dyDst: i32,
    xSrc: i32,
    ySrc: i32,
    dxSrc: i32,
    dySrc: i32,
};

pub const ICDRAWBEGIN = extern struct {
    dwFlags: u32,
    hpal: HPALETTE,
    hwnd: HWND,
    hdc: HDC,
    xDst: i32,
    yDst: i32,
    dxDst: i32,
    dyDst: i32,
    lpbi: *BITMAPINFOHEADER,
    xSrc: i32,
    ySrc: i32,
    dxSrc: i32,
    dySrc: i32,
    dwRate: u32,
    dwScale: u32,
};

pub const ICDRAW = extern struct {
    dwFlags: u32,
    lpFormat: *c_void,
    lpData: *c_void,
    cbData: u32,
    lTime: i32,
};

pub const ICDRAWSUGGEST = extern struct {
    lpbiIn: *BITMAPINFOHEADER,
    lpbiSuggest: *BITMAPINFOHEADER,
    dxSrc: i32,
    dySrc: i32,
    dxDst: i32,
    dyDst: i32,
    hicDecompressor: HIC,
};

pub const ICPALETTE = extern struct {
    dwFlags: u32,
    iStart: i32,
    iLen: i32,
    lppe: *PALETTEENTRY,
};

pub const COMPVARS = extern struct {
    cbSize: i32,
    dwFlags: u32,
    hic: HIC,
    fccType: u32,
    fccHandler: u32,
    lpbiIn: *BITMAPINFO,
    lpbiOut: *BITMAPINFO,
    lpBitsOut: *c_void,
    lpBitsPrev: *c_void,
    lFrame: i32,
    lKey: i32,
    lDataRate: i32,
    lQ: i32,
    lKeyCount: i32,
    lpState: *c_void,
    cbState: i32,
};

pub const DRAWDIBTIME = extern struct {
    timeCount: i32,
    timeDraw: i32,
    timeDecompress: i32,
    timeDither: i32,
    timeStretch: i32,
    timeBlt: i32,
    timeSetDIBits: i32,
};

pub const AVISTREAMINFOW = extern struct {
    fccType: u32,
    fccHandler: u32,
    dwFlags: u32,
    dwCaps: u32,
    wPriority: u16,
    wLanguage: u16,
    dwScale: u32,
    dwRate: u32,
    dwStart: u32,
    dwLength: u32,
    dwInitialFrames: u32,
    dwSuggestedBufferSize: u32,
    dwQuality: u32,
    dwSampleSize: u32,
    rcFrame: RECT,
    dwEditCount: u32,
    dwFormatChangeCount: u32,
    szName: [64]u16,
};

pub const AVISTREAMINFOA = extern struct {
    fccType: u32,
    fccHandler: u32,
    dwFlags: u32,
    dwCaps: u32,
    wPriority: u16,
    wLanguage: u16,
    dwScale: u32,
    dwRate: u32,
    dwStart: u32,
    dwLength: u32,
    dwInitialFrames: u32,
    dwSuggestedBufferSize: u32,
    dwQuality: u32,
    dwSampleSize: u32,
    rcFrame: RECT,
    dwEditCount: u32,
    dwFormatChangeCount: u32,
    szName: [64]i8,
};

pub const AVIFILEINFOW = extern struct {
    dwMaxBytesPerSec: u32,
    dwFlags: u32,
    dwCaps: u32,
    dwStreams: u32,
    dwSuggestedBufferSize: u32,
    dwWidth: u32,
    dwHeight: u32,
    dwScale: u32,
    dwRate: u32,
    dwLength: u32,
    dwEditCount: u32,
    szFileType: [64]u16,
};

pub const AVIFILEINFOA = extern struct {
    dwMaxBytesPerSec: u32,
    dwFlags: u32,
    dwCaps: u32,
    dwStreams: u32,
    dwSuggestedBufferSize: u32,
    dwWidth: u32,
    dwHeight: u32,
    dwScale: u32,
    dwRate: u32,
    dwLength: u32,
    dwEditCount: u32,
    szFileType: [64]i8,
};

pub const AVISAVECALLBACK = fn(
    param0: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const AVICOMPRESSOPTIONS = extern struct {
    fccType: u32,
    fccHandler: u32,
    dwKeyFrameEvery: u32,
    dwQuality: u32,
    dwBytesPerSecond: u32,
    dwFlags: u32,
    lpFormat: *c_void,
    cbFormat: u32,
    lpParms: *c_void,
    cbParms: u32,
    dwInterleaveEvery: u32,
};

pub const IAVIStream = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: fn(
            self: *const IAVIStream,
            lParam1: LPARAM,
            lParam2: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Info: fn(
            self: *const IAVIStream,
            psi: [*]AVISTREAMINFOW,
            lSize: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindSample: fn(
            self: *const IAVIStream,
            lPos: i32,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) i32,
        ReadFormat: fn(
            self: *const IAVIStream,
            lPos: i32,
            lpFormat: ?[*]u8,
            lpcbFormat: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFormat: fn(
            self: *const IAVIStream,
            lPos: i32,
            lpFormat: [*]u8,
            cbFormat: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Read: fn(
            self: *const IAVIStream,
            lStart: i32,
            lSamples: i32,
            lpBuffer: ?[*]u8,
            cbBuffer: i32,
            plBytes: ?*i32,
            plSamples: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Write: fn(
            self: *const IAVIStream,
            lStart: i32,
            lSamples: i32,
            lpBuffer: [*]u8,
            cbBuffer: i32,
            dwFlags: u32,
            plSampWritten: ?*i32,
            plBytesWritten: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: fn(
            self: *const IAVIStream,
            lStart: i32,
            lSamples: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadData: fn(
            self: *const IAVIStream,
            fcc: u32,
            lp: ?[*]u8,
            lpcb: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteData: fn(
            self: *const IAVIStream,
            fcc: u32,
            lp: [*]u8,
            cb: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInfo: fn(
            self: *const IAVIStream,
            lpInfo: [*]AVISTREAMINFOW,
            cbInfo: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIStream_Create(self: *const T, lParam1: LPARAM, lParam2: LPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIStream.VTable, self.vtable).Create(@ptrCast(*const IAVIStream, self), lParam1, lParam2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIStream_Info(self: *const T, psi: [*]AVISTREAMINFOW, lSize: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIStream.VTable, self.vtable).Info(@ptrCast(*const IAVIStream, self), psi, lSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIStream_FindSample(self: *const T, lPos: i32, lFlags: i32) callconv(.Inline) i32 {
            return @ptrCast(*const IAVIStream.VTable, self.vtable).FindSample(@ptrCast(*const IAVIStream, self), lPos, lFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIStream_ReadFormat(self: *const T, lPos: i32, lpFormat: ?[*]u8, lpcbFormat: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIStream.VTable, self.vtable).ReadFormat(@ptrCast(*const IAVIStream, self), lPos, lpFormat, lpcbFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIStream_SetFormat(self: *const T, lPos: i32, lpFormat: [*]u8, cbFormat: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIStream.VTable, self.vtable).SetFormat(@ptrCast(*const IAVIStream, self), lPos, lpFormat, cbFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIStream_Read(self: *const T, lStart: i32, lSamples: i32, lpBuffer: ?[*]u8, cbBuffer: i32, plBytes: ?*i32, plSamples: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIStream.VTable, self.vtable).Read(@ptrCast(*const IAVIStream, self), lStart, lSamples, lpBuffer, cbBuffer, plBytes, plSamples);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIStream_Write(self: *const T, lStart: i32, lSamples: i32, lpBuffer: [*]u8, cbBuffer: i32, dwFlags: u32, plSampWritten: ?*i32, plBytesWritten: ?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIStream.VTable, self.vtable).Write(@ptrCast(*const IAVIStream, self), lStart, lSamples, lpBuffer, cbBuffer, dwFlags, plSampWritten, plBytesWritten);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIStream_Delete(self: *const T, lStart: i32, lSamples: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIStream.VTable, self.vtable).Delete(@ptrCast(*const IAVIStream, self), lStart, lSamples);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIStream_ReadData(self: *const T, fcc: u32, lp: ?[*]u8, lpcb: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIStream.VTable, self.vtable).ReadData(@ptrCast(*const IAVIStream, self), fcc, lp, lpcb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIStream_WriteData(self: *const T, fcc: u32, lp: [*]u8, cb: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIStream.VTable, self.vtable).WriteData(@ptrCast(*const IAVIStream, self), fcc, lp, cb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIStream_SetInfo(self: *const T, lpInfo: [*]AVISTREAMINFOW, cbInfo: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIStream.VTable, self.vtable).SetInfo(@ptrCast(*const IAVIStream, self), lpInfo, cbInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IAVIStreaming = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin: fn(
            self: *const IAVIStreaming,
            lStart: i32,
            lEnd: i32,
            lRate: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        End: fn(
            self: *const IAVIStreaming,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIStreaming_Begin(self: *const T, lStart: i32, lEnd: i32, lRate: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIStreaming.VTable, self.vtable).Begin(@ptrCast(*const IAVIStreaming, self), lStart, lEnd, lRate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIStreaming_End(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIStreaming.VTable, self.vtable).End(@ptrCast(*const IAVIStreaming, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IAVIEditStream = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Cut: fn(
            self: *const IAVIEditStream,
            plStart: *i32,
            plLength: *i32,
            ppResult: **IAVIStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Copy: fn(
            self: *const IAVIEditStream,
            plStart: *i32,
            plLength: *i32,
            ppResult: **IAVIStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Paste: fn(
            self: *const IAVIEditStream,
            plPos: *i32,
            plLength: *i32,
            pstream: *IAVIStream,
            lStart: i32,
            lEnd: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IAVIEditStream,
            ppResult: **IAVIStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInfo: fn(
            self: *const IAVIEditStream,
            lpInfo: [*]AVISTREAMINFOW,
            cbInfo: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIEditStream_Cut(self: *const T, plStart: *i32, plLength: *i32, ppResult: **IAVIStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIEditStream.VTable, self.vtable).Cut(@ptrCast(*const IAVIEditStream, self), plStart, plLength, ppResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIEditStream_Copy(self: *const T, plStart: *i32, plLength: *i32, ppResult: **IAVIStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIEditStream.VTable, self.vtable).Copy(@ptrCast(*const IAVIEditStream, self), plStart, plLength, ppResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIEditStream_Paste(self: *const T, plPos: *i32, plLength: *i32, pstream: *IAVIStream, lStart: i32, lEnd: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIEditStream.VTable, self.vtable).Paste(@ptrCast(*const IAVIEditStream, self), plPos, plLength, pstream, lStart, lEnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIEditStream_Clone(self: *const T, ppResult: **IAVIStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIEditStream.VTable, self.vtable).Clone(@ptrCast(*const IAVIEditStream, self), ppResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIEditStream_SetInfo(self: *const T, lpInfo: [*]AVISTREAMINFOW, cbInfo: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIEditStream.VTable, self.vtable).SetInfo(@ptrCast(*const IAVIEditStream, self), lpInfo, cbInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IAVIPersistFile = extern struct {
    pub const VTable = extern struct {
        base: IPersistFile.VTable,
        Reserved1: fn(
            self: *const IAVIPersistFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPersistFile.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIPersistFile_Reserved1(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIPersistFile.VTable, self.vtable).Reserved1(@ptrCast(*const IAVIPersistFile, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IAVIFile = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Info: fn(
            self: *const IAVIFile,
            pfi: [*]AVIFILEINFOW,
            lSize: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStream: fn(
            self: *const IAVIFile,
            ppStream: **IAVIStream,
            fccType: u32,
            lParam: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStream: fn(
            self: *const IAVIFile,
            ppStream: **IAVIStream,
            psi: *AVISTREAMINFOW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteData: fn(
            self: *const IAVIFile,
            ckid: u32,
            lpData: [*]u8,
            cbData: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadData: fn(
            self: *const IAVIFile,
            ckid: u32,
            lpData: [*]u8,
            lpcbData: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndRecord: fn(
            self: *const IAVIFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteStream: fn(
            self: *const IAVIFile,
            fccType: u32,
            lParam: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIFile_Info(self: *const T, pfi: [*]AVIFILEINFOW, lSize: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIFile.VTable, self.vtable).Info(@ptrCast(*const IAVIFile, self), pfi, lSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIFile_GetStream(self: *const T, ppStream: **IAVIStream, fccType: u32, lParam: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIFile.VTable, self.vtable).GetStream(@ptrCast(*const IAVIFile, self), ppStream, fccType, lParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIFile_CreateStream(self: *const T, ppStream: **IAVIStream, psi: *AVISTREAMINFOW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIFile.VTable, self.vtable).CreateStream(@ptrCast(*const IAVIFile, self), ppStream, psi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIFile_WriteData(self: *const T, ckid: u32, lpData: [*]u8, cbData: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIFile.VTable, self.vtable).WriteData(@ptrCast(*const IAVIFile, self), ckid, lpData, cbData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIFile_ReadData(self: *const T, ckid: u32, lpData: [*]u8, lpcbData: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIFile.VTable, self.vtable).ReadData(@ptrCast(*const IAVIFile, self), ckid, lpData, lpcbData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIFile_EndRecord(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIFile.VTable, self.vtable).EndRecord(@ptrCast(*const IAVIFile, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAVIFile_DeleteStream(self: *const T, fccType: u32, lParam: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAVIFile.VTable, self.vtable).DeleteStream(@ptrCast(*const IAVIFile, self), fccType, lParam);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IGetFrame = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFrame: fn(
            self: *const IGetFrame,
            lPos: i32,
        ) callconv(@import("std").os.windows.WINAPI) *c_void,
        Begin: fn(
            self: *const IGetFrame,
            lStart: i32,
            lEnd: i32,
            lRate: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        End: fn(
            self: *const IGetFrame,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFormat: fn(
            self: *const IGetFrame,
            lpbi: *BITMAPINFOHEADER,
            lpBits: ?*c_void,
            x: i32,
            y: i32,
            dx: i32,
            dy: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetFrame_GetFrame(self: *const T, lPos: i32) callconv(.Inline) *c_void {
            return @ptrCast(*const IGetFrame.VTable, self.vtable).GetFrame(@ptrCast(*const IGetFrame, self), lPos);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetFrame_Begin(self: *const T, lStart: i32, lEnd: i32, lRate: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetFrame.VTable, self.vtable).Begin(@ptrCast(*const IGetFrame, self), lStart, lEnd, lRate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetFrame_End(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetFrame.VTable, self.vtable).End(@ptrCast(*const IGetFrame, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetFrame_SetFormat(self: *const T, lpbi: *BITMAPINFOHEADER, lpBits: ?*c_void, x: i32, y: i32, dx: i32, dy: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetFrame.VTable, self.vtable).SetFormat(@ptrCast(*const IGetFrame, self), lpbi, lpBits, x, y, dx, dy);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const VIDEOHDR = extern struct {
    lpData: *u8,
    dwBufferLength: u32,
    dwBytesUsed: u32,
    dwTimeCaptured: u32,
    dwUser: ?*c_void,
    dwFlags: u32,
    dwReserved: [4]?*c_void,
};

pub const channel_caps_tag = extern struct {
    dwFlags: u32,
    dwSrcRectXMod: u32,
    dwSrcRectYMod: u32,
    dwSrcRectWidthMod: u32,
    dwSrcRectHeightMod: u32,
    dwDstRectXMod: u32,
    dwDstRectYMod: u32,
    dwDstRectWidthMod: u32,
    dwDstRectHeightMod: u32,
};

pub const CAPDRIVERCAPS = extern struct {
    wDeviceIndex: u32,
    fHasOverlay: BOOL,
    fHasDlgVideoSource: BOOL,
    fHasDlgVideoFormat: BOOL,
    fHasDlgVideoDisplay: BOOL,
    fCaptureInitialized: BOOL,
    fDriverSuppliesPalettes: BOOL,
    hVideoIn: HANDLE,
    hVideoOut: HANDLE,
    hVideoExtIn: HANDLE,
    hVideoExtOut: HANDLE,
};

pub const CAPSTATUS = extern struct {
    uiImageWidth: u32,
    uiImageHeight: u32,
    fLiveWindow: BOOL,
    fOverlayWindow: BOOL,
    fScale: BOOL,
    ptScroll: POINT,
    fUsingDefaultPalette: BOOL,
    fAudioHardware: BOOL,
    fCapFileExists: BOOL,
    dwCurrentVideoFrame: u32,
    dwCurrentVideoFramesDropped: u32,
    dwCurrentWaveSamples: u32,
    dwCurrentTimeElapsedMS: u32,
    hPalCurrent: HPALETTE,
    fCapturingNow: BOOL,
    dwReturn: u32,
    wNumVideoAllocated: u32,
    wNumAudioAllocated: u32,
};

pub const CAPTUREPARMS = extern struct {
    dwRequestMicroSecPerFrame: u32,
    fMakeUserHitOKToCapture: BOOL,
    wPercentDropForError: u32,
    fYield: BOOL,
    dwIndexSize: u32,
    wChunkGranularity: u32,
    fUsingDOSMemory: BOOL,
    wNumVideoRequested: u32,
    fCaptureAudio: BOOL,
    wNumAudioRequested: u32,
    vKeyAbort: u32,
    fAbortLeftMouse: BOOL,
    fAbortRightMouse: BOOL,
    fLimitEnabled: BOOL,
    wTimeLimit: u32,
    fMCIControl: BOOL,
    fStepMCIDevice: BOOL,
    dwMCIStartTime: u32,
    dwMCIStopTime: u32,
    fStepCaptureAt2x: BOOL,
    wStepCaptureAverageFrames: u32,
    dwAudioBufferSize: u32,
    fDisableWriteCache: BOOL,
    AVStreamMaster: u32,
};

pub const CAPINFOCHUNK = extern struct {
    fccInfoID: u32,
    lpData: *c_void,
    cbData: i32,
};

pub const CAPYIELDCALLBACK = fn(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const CAPSTATUSCALLBACKW = fn(
    hWnd: HWND,
    nID: i32,
    lpsz: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const CAPERRORCALLBACKW = fn(
    hWnd: HWND,
    nID: i32,
    lpsz: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const CAPSTATUSCALLBACKA = fn(
    hWnd: HWND,
    nID: i32,
    lpsz: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const CAPERRORCALLBACKA = fn(
    hWnd: HWND,
    nID: i32,
    lpsz: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const CAPVIDEOCALLBACK = fn(
    hWnd: HWND,
    lpVHdr: *VIDEOHDR,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const CAPWAVECALLBACK = fn(
    hWnd: HWND,
    lpWHdr: *WAVEHDR,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const CAPCONTROLCALLBACK = fn(
    hWnd: HWND,
    nState: i32,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const DRVM_IOCTL_DATA = extern struct {
    dwSize: u32,
    dwCmd: u32,
};

pub const WAVEOPENDESC = extern struct {
    hWave: HWAVE,
    lpFormat: *WAVEFORMAT,
    dwCallback: ?*c_void,
    dwInstance: ?*c_void,
    uMappedDeviceID: u32,
    dnDevNode: ?*c_void,
};

pub const midiopenstrmid_tag = extern struct {
    dwStreamID: u32,
    uDeviceID: u32,
};

pub const tMIXEROPENDESC = extern struct {
    hmx: HMIXER,
    pReserved0: *c_void,
    dwCallback: ?*c_void,
    dwInstance: ?*c_void,
    dnDevNode: ?*c_void,
};

pub const timerevent_tag = extern struct {
    wDelay: u16,
    wResolution: u16,
    lpFunction: LPTIMECALLBACK,
    dwUser: u32,
    wFlags: u16,
    wReserved1: u16,
};

pub const joypos_tag = extern struct {
    dwX: u32,
    dwY: u32,
    dwZ: u32,
    dwR: u32,
    dwU: u32,
    dwV: u32,
};

pub const joyrange_tag = extern struct {
    jpMin: joypos_tag,
    jpMax: joypos_tag,
    jpCenter: joypos_tag,
};

pub const joyreguservalues_tag = extern struct {
    dwTimeOut: u32,
    jrvRanges: joyrange_tag,
    jpDeadZone: joypos_tag,
};

pub const joyreghwsettings_tag = extern struct {
    dwFlags: u32,
    dwNumButtons: u32,
};

pub const joyreghwconfig_tag = extern struct {
    hws: joyreghwsettings_tag,
    dwUsageSettings: u32,
    hwv: JOYREGHWVALUES,
    dwType: u32,
    dwReserved: u32,
};

pub const joycalibrate_tag = extern struct {
    wXbase: u16,
    wXdelta: u16,
    wYbase: u16,
    wYdelta: u16,
    wZbase: u16,
    wZdelta: u16,
};

pub const JOYDEVMSGPROC = fn(
    param0: u32,
    param1: u32,
    param2: i32,
    param3: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const LPJOYDEVMSGPROC = fn(
) callconv(@import("std").os.windows.WINAPI) u32;

pub const MCI_OPEN_DRIVER_PARMS = extern struct {
    wDeviceID: u32,
    lpstrParams: [*:0]const u16,
    wCustomCommandTable: u32,
    wType: u32,
};

pub const TASKCALLBACK = fn(
    dwInst: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LPTASKCALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const ACMDRIVERDETAILS_SUPPORTF = extern enum(u32) {
    ASYNC = 16,
    CODEC = 1,
    CONVERTER = 2,
    FILTER = 4,
    HARDWARE = 8,
    _,
};
pub const ACMDRIVERDETAILS_SUPPORTF_ASYNC = ACMDRIVERDETAILS_SUPPORTF.ASYNC;
pub const ACMDRIVERDETAILS_SUPPORTF_CODEC = ACMDRIVERDETAILS_SUPPORTF.CODEC;
pub const ACMDRIVERDETAILS_SUPPORTF_CONVERTER = ACMDRIVERDETAILS_SUPPORTF.CONVERTER;
pub const ACMDRIVERDETAILS_SUPPORTF_FILTER = ACMDRIVERDETAILS_SUPPORTF.FILTER;
pub const ACMDRIVERDETAILS_SUPPORTF_HARDWARE = ACMDRIVERDETAILS_SUPPORTF.HARDWARE;

pub const MIXERLINE_COMPONENTTYPE = extern enum(u32) {
    DST_DIGITAL = 1,
    DST_HEADPHONES = 5,
    DST_LINE = 2,
    DST_MONITOR = 3,
    DST_SPEAKERS = 4,
    DST_TELEPHONE = 6,
    DST_UNDEFINED = 0,
    DST_VOICEIN = 8,
    DST_WAVEIN = 7,
    SRC_ANALOG = 4106,
    SRC_AUXILIARY = 4105,
    SRC_COMPACTDISC = 4101,
    SRC_DIGITAL = 4097,
    SRC_LINE = 4098,
    SRC_MICROPHONE = 4099,
    SRC_PCSPEAKER = 4103,
    SRC_SYNTHESIZER = 4100,
    SRC_TELEPHONE = 4102,
    SRC_UNDEFINED = 4096,
    SRC_WAVEOUT = 4104,
};
pub const MIXERLINE_COMPONENTTYPE_DST_DIGITAL = MIXERLINE_COMPONENTTYPE.DST_DIGITAL;
pub const MIXERLINE_COMPONENTTYPE_DST_HEADPHONES = MIXERLINE_COMPONENTTYPE.DST_HEADPHONES;
pub const MIXERLINE_COMPONENTTYPE_DST_LINE = MIXERLINE_COMPONENTTYPE.DST_LINE;
pub const MIXERLINE_COMPONENTTYPE_DST_MONITOR = MIXERLINE_COMPONENTTYPE.DST_MONITOR;
pub const MIXERLINE_COMPONENTTYPE_DST_SPEAKERS = MIXERLINE_COMPONENTTYPE.DST_SPEAKERS;
pub const MIXERLINE_COMPONENTTYPE_DST_TELEPHONE = MIXERLINE_COMPONENTTYPE.DST_TELEPHONE;
pub const MIXERLINE_COMPONENTTYPE_DST_UNDEFINED = MIXERLINE_COMPONENTTYPE.DST_UNDEFINED;
pub const MIXERLINE_COMPONENTTYPE_DST_VOICEIN = MIXERLINE_COMPONENTTYPE.DST_VOICEIN;
pub const MIXERLINE_COMPONENTTYPE_DST_WAVEIN = MIXERLINE_COMPONENTTYPE.DST_WAVEIN;
pub const MIXERLINE_COMPONENTTYPE_SRC_ANALOG = MIXERLINE_COMPONENTTYPE.SRC_ANALOG;
pub const MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY = MIXERLINE_COMPONENTTYPE.SRC_AUXILIARY;
pub const MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC = MIXERLINE_COMPONENTTYPE.SRC_COMPACTDISC;
pub const MIXERLINE_COMPONENTTYPE_SRC_DIGITAL = MIXERLINE_COMPONENTTYPE.SRC_DIGITAL;
pub const MIXERLINE_COMPONENTTYPE_SRC_LINE = MIXERLINE_COMPONENTTYPE.SRC_LINE;
pub const MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE = MIXERLINE_COMPONENTTYPE.SRC_MICROPHONE;
pub const MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER = MIXERLINE_COMPONENTTYPE.SRC_PCSPEAKER;
pub const MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER = MIXERLINE_COMPONENTTYPE.SRC_SYNTHESIZER;
pub const MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE = MIXERLINE_COMPONENTTYPE.SRC_TELEPHONE;
pub const MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED = MIXERLINE_COMPONENTTYPE.SRC_UNDEFINED;
pub const MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT = MIXERLINE_COMPONENTTYPE.SRC_WAVEOUT;


//--------------------------------------------------------------------------------
// Section: Functions (305)
//--------------------------------------------------------------------------------
pub extern "WINMM" fn CloseDriver(
    hDriver: HDRVR,
    lParam1: LPARAM,
    lParam2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "WINMM" fn OpenDriver(
    szDriverName: [*:0]const u16,
    szSectionName: [*:0]const u16,
    lParam2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HDRVR;

pub extern "WINMM" fn SendDriverMessage(
    hDriver: HDRVR,
    message: u32,
    lParam1: LPARAM,
    lParam2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "WINMM" fn DrvGetModuleHandle(
    hDriver: HDRVR,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "WINMM" fn GetDriverModuleHandle(
    hDriver: HDRVR,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "WINMM" fn DefDriverProc(
    dwDriverIdentifier: ?*c_void,
    hdrvr: HDRVR,
    uMsg: u32,
    lParam1: LPARAM,
    lParam2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "WINMM" fn DriverCallback(
    dwCallback: ?*c_void,
    dwFlags: u32,
    hDevice: HDRVR,
    dwMsg: u32,
    dwUser: ?*c_void,
    dwParam1: ?*c_void,
    dwParam2: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "api-ms-win-mm-misc-l1-1-1" fn sndOpenSound(
    EventName: [*:0]const u16,
    AppName: [*:0]const u16,
    Flags: i32,
    FileHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WINMM" fn mmDrvInstall(
    hDriver: HDRVR,
    wszDrvEntry: [*:0]const u16,
    drvMessage: DRIVERMSGPROC,
    wFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mmioStringToFOURCCA(
    sz: [*:0]const u8,
    uFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mmioStringToFOURCCW(
    sz: [*:0]const u16,
    uFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mmioInstallIOProcA(
    fccIOProc: u32,
    pIOProc: ?LPMMIOPROC,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) LPMMIOPROC;

pub extern "WINMM" fn mmioInstallIOProcW(
    fccIOProc: u32,
    pIOProc: ?LPMMIOPROC,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) LPMMIOPROC;

pub extern "WINMM" fn mmioOpenA(
    pszFileName: ?*[128]u8,
    pmmioinfo: ?*MMIOINFO,
    fdwOpen: u32,
) callconv(@import("std").os.windows.WINAPI) HMMIO;

pub extern "WINMM" fn mmioOpenW(
    pszFileName: ?*[128]u16,
    pmmioinfo: ?*MMIOINFO,
    fdwOpen: u32,
) callconv(@import("std").os.windows.WINAPI) HMMIO;

pub extern "WINMM" fn mmioRenameA(
    pszFileName: [*:0]const u8,
    pszNewFileName: [*:0]const u8,
    pmmioinfo: ?*MMIOINFO,
    fdwRename: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mmioRenameW(
    pszFileName: [*:0]const u16,
    pszNewFileName: [*:0]const u16,
    pmmioinfo: ?*MMIOINFO,
    fdwRename: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mmioClose(
    hmmio: HMMIO,
    fuClose: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mmioRead(
    hmmio: HMMIO,
    pch: [*]i8,
    cch: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WINMM" fn mmioWrite(
    hmmio: HMMIO,
    pch: [*]const i8,
    cch: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WINMM" fn mmioSeek(
    hmmio: HMMIO,
    lOffset: i32,
    iOrigin: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WINMM" fn mmioGetInfo(
    hmmio: HMMIO,
    pmmioinfo: *MMIOINFO,
    fuInfo: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mmioSetInfo(
    hmmio: HMMIO,
    pmmioinfo: *MMIOINFO,
    fuInfo: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mmioSetBuffer(
    hmmio: HMMIO,
    pchBuffer: ?[*:0]u8,
    cchBuffer: i32,
    fuBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mmioFlush(
    hmmio: HMMIO,
    fuFlush: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mmioAdvance(
    hmmio: HMMIO,
    pmmioinfo: ?*MMIOINFO,
    fuAdvance: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mmioSendMessage(
    hmmio: HMMIO,
    uMsg: u32,
    lParam1: LPARAM,
    lParam2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "WINMM" fn mmioDescend(
    hmmio: HMMIO,
    pmmcki: *MMCKINFO,
    pmmckiParent: ?*const MMCKINFO,
    fuDescend: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mmioAscend(
    hmmio: HMMIO,
    pmmcki: *MMCKINFO,
    fuAscend: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mmioCreateChunk(
    hmmio: HMMIO,
    pmmcki: *MMCKINFO,
    fuCreate: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn sndPlaySoundA(
    pszSound: ?[*:0]const u8,
    fuSound: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINMM" fn sndPlaySoundW(
    pszSound: ?[*:0]const u16,
    fuSound: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINMM" fn PlaySoundA(
    pszSound: ?[*:0]const u8,
    hmod: ?*c_void,
    fdwSound: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINMM" fn PlaySoundW(
    pszSound: ?[*:0]const u16,
    hmod: ?*c_void,
    fdwSound: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINMM" fn waveOutGetNumDevs(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutGetDevCapsA(
    uDeviceID: ?*c_void,
    pwoc: *WAVEOUTCAPSA,
    cbwoc: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutGetDevCapsW(
    uDeviceID: ?*c_void,
    pwoc: *WAVEOUTCAPSW,
    cbwoc: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutGetVolume(
    hwo: HWAVEOUT,
    pdwVolume: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutSetVolume(
    hwo: HWAVEOUT,
    dwVolume: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutGetErrorTextA(
    mmrError: u32,
    pszText: [*:0]u8,
    cchText: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutGetErrorTextW(
    mmrError: u32,
    pszText: [*:0]u16,
    cchText: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutOpen(
    phwo: ?*HWAVEOUT,
    uDeviceID: u32,
    pwfx: *WAVEFORMATEX,
    dwCallback: ?*c_void,
    dwInstance: ?*c_void,
    fdwOpen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutClose(
    hwo: HWAVEOUT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutPrepareHeader(
    hwo: HWAVEOUT,
    pwh: [*]WAVEHDR,
    cbwh: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutUnprepareHeader(
    hwo: HWAVEOUT,
    pwh: [*]WAVEHDR,
    cbwh: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutWrite(
    hwo: HWAVEOUT,
    pwh: [*]WAVEHDR,
    cbwh: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutPause(
    hwo: HWAVEOUT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutRestart(
    hwo: HWAVEOUT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutReset(
    hwo: HWAVEOUT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutBreakLoop(
    hwo: HWAVEOUT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutGetPosition(
    hwo: HWAVEOUT,
    pmmt: [*]MMTIME,
    cbmmt: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutGetPitch(
    hwo: HWAVEOUT,
    pdwPitch: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutSetPitch(
    hwo: HWAVEOUT,
    dwPitch: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutGetPlaybackRate(
    hwo: HWAVEOUT,
    pdwRate: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutSetPlaybackRate(
    hwo: HWAVEOUT,
    dwRate: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutGetID(
    hwo: HWAVEOUT,
    puDeviceID: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveOutMessage(
    hwo: HWAVEOUT,
    uMsg: u32,
    dw1: ?*c_void,
    dw2: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveInGetNumDevs(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveInGetDevCapsA(
    uDeviceID: ?*c_void,
    pwic: [*]WAVEINCAPSA,
    cbwic: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveInGetDevCapsW(
    uDeviceID: ?*c_void,
    pwic: [*]WAVEINCAPSW,
    cbwic: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveInGetErrorTextA(
    mmrError: u32,
    pszText: [*:0]u8,
    cchText: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveInGetErrorTextW(
    mmrError: u32,
    pszText: [*:0]u16,
    cchText: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveInOpen(
    phwi: ?*HWAVEIN,
    uDeviceID: u32,
    pwfx: *WAVEFORMATEX,
    dwCallback: ?*c_void,
    dwInstance: ?*c_void,
    fdwOpen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveInClose(
    hwi: HWAVEIN,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveInPrepareHeader(
    hwi: HWAVEIN,
    pwh: [*]WAVEHDR,
    cbwh: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveInUnprepareHeader(
    hwi: HWAVEIN,
    pwh: [*]WAVEHDR,
    cbwh: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveInAddBuffer(
    hwi: HWAVEIN,
    pwh: [*]WAVEHDR,
    cbwh: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveInStart(
    hwi: HWAVEIN,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveInStop(
    hwi: HWAVEIN,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveInReset(
    hwi: HWAVEIN,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveInGetPosition(
    hwi: HWAVEIN,
    pmmt: [*]MMTIME,
    cbmmt: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveInGetID(
    hwi: HWAVEIN,
    puDeviceID: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn waveInMessage(
    hwi: HWAVEIN,
    uMsg: u32,
    dw1: ?*c_void,
    dw2: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiOutGetNumDevs(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiStreamOpen(
    phms: *HMIDISTRM,
    puDeviceID: [*]u32,
    cMidi: u32,
    dwCallback: ?*c_void,
    dwInstance: ?*c_void,
    fdwOpen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiStreamClose(
    hms: HMIDISTRM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiStreamProperty(
    hms: HMIDISTRM,
    lppropdata: *u8,
    dwProperty: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiStreamPosition(
    hms: HMIDISTRM,
    lpmmt: [*]MMTIME,
    cbmmt: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiStreamOut(
    hms: HMIDISTRM,
    pmh: [*]MIDIHDR,
    cbmh: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiStreamPause(
    hms: HMIDISTRM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiStreamRestart(
    hms: HMIDISTRM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiStreamStop(
    hms: HMIDISTRM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiConnect(
    hmi: HMIDI,
    hmo: HMIDIOUT,
    pReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiDisconnect(
    hmi: HMIDI,
    hmo: HMIDIOUT,
    pReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiOutGetDevCapsA(
    uDeviceID: ?*c_void,
    pmoc: [*]MIDIOUTCAPSA,
    cbmoc: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiOutGetDevCapsW(
    uDeviceID: ?*c_void,
    pmoc: [*]MIDIOUTCAPSW,
    cbmoc: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiOutGetVolume(
    hmo: HMIDIOUT,
    pdwVolume: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiOutSetVolume(
    hmo: HMIDIOUT,
    dwVolume: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiOutGetErrorTextA(
    mmrError: u32,
    pszText: [*:0]u8,
    cchText: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiOutGetErrorTextW(
    mmrError: u32,
    pszText: [*:0]u16,
    cchText: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiOutOpen(
    phmo: *HMIDIOUT,
    uDeviceID: u32,
    dwCallback: ?*c_void,
    dwInstance: ?*c_void,
    fdwOpen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiOutClose(
    hmo: HMIDIOUT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiOutPrepareHeader(
    hmo: HMIDIOUT,
    pmh: [*]MIDIHDR,
    cbmh: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiOutUnprepareHeader(
    hmo: HMIDIOUT,
    pmh: [*]MIDIHDR,
    cbmh: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiOutShortMsg(
    hmo: HMIDIOUT,
    dwMsg: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiOutLongMsg(
    hmo: HMIDIOUT,
    pmh: [*]MIDIHDR,
    cbmh: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiOutReset(
    hmo: HMIDIOUT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiOutCachePatches(
    hmo: HMIDIOUT,
    uBank: u32,
    pwpa: *[128]u16,
    fuCache: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiOutCacheDrumPatches(
    hmo: HMIDIOUT,
    uPatch: u32,
    pwkya: *[128]u16,
    fuCache: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiOutGetID(
    hmo: HMIDIOUT,
    puDeviceID: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiOutMessage(
    hmo: HMIDIOUT,
    uMsg: u32,
    dw1: ?*c_void,
    dw2: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiInGetNumDevs(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiInGetDevCapsA(
    uDeviceID: ?*c_void,
    pmic: [*]MIDIINCAPSA,
    cbmic: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiInGetDevCapsW(
    uDeviceID: ?*c_void,
    pmic: [*]MIDIINCAPSW,
    cbmic: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiInGetErrorTextA(
    mmrError: u32,
    pszText: [*:0]u8,
    cchText: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiInGetErrorTextW(
    mmrError: u32,
    pszText: [*:0]u16,
    cchText: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiInOpen(
    phmi: *HMIDIIN,
    uDeviceID: u32,
    dwCallback: ?*c_void,
    dwInstance: ?*c_void,
    fdwOpen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiInClose(
    hmi: HMIDIIN,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiInPrepareHeader(
    hmi: HMIDIIN,
    pmh: [*]MIDIHDR,
    cbmh: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiInUnprepareHeader(
    hmi: HMIDIIN,
    pmh: [*]MIDIHDR,
    cbmh: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiInAddBuffer(
    hmi: HMIDIIN,
    pmh: [*]MIDIHDR,
    cbmh: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiInStart(
    hmi: HMIDIIN,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiInStop(
    hmi: HMIDIIN,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiInReset(
    hmi: HMIDIIN,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiInGetID(
    hmi: HMIDIIN,
    puDeviceID: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn midiInMessage(
    hmi: HMIDIIN,
    uMsg: u32,
    dw1: ?*c_void,
    dw2: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn auxGetNumDevs(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn auxGetDevCapsA(
    uDeviceID: ?*c_void,
    pac: [*]AUXCAPSA,
    cbac: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn auxGetDevCapsW(
    uDeviceID: ?*c_void,
    pac: [*]AUXCAPSW,
    cbac: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn auxSetVolume(
    uDeviceID: u32,
    dwVolume: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn auxGetVolume(
    uDeviceID: u32,
    pdwVolume: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn auxOutMessage(
    uDeviceID: u32,
    uMsg: u32,
    dw1: ?*c_void,
    dw2: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mixerGetNumDevs(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mixerGetDevCapsA(
    uMxId: ?*c_void,
    pmxcaps: [*]MIXERCAPSA,
    cbmxcaps: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mixerGetDevCapsW(
    uMxId: ?*c_void,
    pmxcaps: [*]MIXERCAPSW,
    cbmxcaps: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mixerOpen(
    phmx: ?*?*c_void,
    uMxId: u32,
    dwCallback: ?*c_void,
    dwInstance: ?*c_void,
    fdwOpen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mixerClose(
    hmx: HMIXER,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mixerMessage(
    hmx: HMIXER,
    uMsg: u32,
    dwParam1: ?*c_void,
    dwParam2: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mixerGetLineInfoA(
    hmxobj: HMIXEROBJ,
    pmxl: *MIXERLINEA,
    fdwInfo: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mixerGetLineInfoW(
    hmxobj: HMIXEROBJ,
    pmxl: *MIXERLINEW,
    fdwInfo: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mixerGetID(
    hmxobj: HMIXEROBJ,
    puMxId: *u32,
    fdwId: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mixerGetLineControlsA(
    hmxobj: HMIXEROBJ,
    pmxlc: *MIXERLINECONTROLSA,
    fdwControls: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mixerGetLineControlsW(
    hmxobj: HMIXEROBJ,
    pmxlc: *MIXERLINECONTROLSW,
    fdwControls: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mixerGetControlDetailsA(
    hmxobj: HMIXEROBJ,
    pmxcd: *MIXERCONTROLDETAILS,
    fdwDetails: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mixerGetControlDetailsW(
    hmxobj: HMIXEROBJ,
    pmxcd: *MIXERCONTROLDETAILS,
    fdwDetails: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mixerSetControlDetails(
    hmxobj: HMIXEROBJ,
    pmxcd: *MIXERCONTROLDETAILS,
    fdwDetails: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn timeGetSystemTime(
    pmmt: [*]MMTIME,
    cbmmt: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn timeGetTime(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn timeGetDevCaps(
    ptc: [*]TIMECAPS,
    cbtc: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn timeBeginPeriod(
    uPeriod: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn timeEndPeriod(
    uPeriod: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn joyGetPosEx(
    uJoyID: u32,
    pji: *JOYINFOEX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn joyGetNumDevs(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn joyGetDevCapsA(
    uJoyID: ?*c_void,
    pjc: [*]JOYCAPSA,
    cbjc: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn joyGetDevCapsW(
    uJoyID: ?*c_void,
    pjc: [*]JOYCAPSW,
    cbjc: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn joyGetPos(
    uJoyID: u32,
    pji: *JOYINFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn joyGetThreshold(
    uJoyID: u32,
    puThreshold: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn joyReleaseCapture(
    uJoyID: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn joySetCapture(
    hwnd: HWND,
    uJoyID: u32,
    uPeriod: u32,
    fChanged: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn joySetThreshold(
    uJoyID: u32,
    uThreshold: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmGetVersion(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmMetrics(
    hao: HACMOBJ,
    uMetric: u32,
    pMetric: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmDriverEnum(
    fnCallback: ACMDRIVERENUMCB,
    dwInstance: ?*c_void,
    fdwEnum: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmDriverID(
    hao: HACMOBJ,
    phadid: *?*c_void,
    fdwDriverID: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmDriverAddA(
    phadid: *?*c_void,
    hinstModule: HINSTANCE,
    lParam: LPARAM,
    dwPriority: u32,
    fdwAdd: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmDriverAddW(
    phadid: *?*c_void,
    hinstModule: HINSTANCE,
    lParam: LPARAM,
    dwPriority: u32,
    fdwAdd: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmDriverRemove(
    hadid: HACMDRIVERID,
    fdwRemove: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmDriverOpen(
    phad: *?*c_void,
    hadid: HACMDRIVERID,
    fdwOpen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmDriverClose(
    had: HACMDRIVER,
    fdwClose: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmDriverMessage(
    had: HACMDRIVER,
    uMsg: u32,
    lParam1: LPARAM,
    lParam2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "MSACM32" fn acmDriverPriority(
    hadid: HACMDRIVERID,
    dwPriority: u32,
    fdwPriority: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmDriverDetailsA(
    hadid: HACMDRIVERID,
    padd: *tACMDRIVERDETAILSA,
    fdwDetails: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmDriverDetailsW(
    hadid: HACMDRIVERID,
    padd: *tACMDRIVERDETAILSW,
    fdwDetails: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFormatTagDetailsA(
    had: HACMDRIVER,
    paftd: *ACMFORMATTAGDETAILSA,
    fdwDetails: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFormatTagDetailsW(
    had: HACMDRIVER,
    paftd: *ACMFORMATTAGDETAILSW,
    fdwDetails: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFormatTagEnumA(
    had: HACMDRIVER,
    paftd: *ACMFORMATTAGDETAILSA,
    fnCallback: ACMFORMATTAGENUMCBA,
    dwInstance: ?*c_void,
    fdwEnum: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFormatTagEnumW(
    had: HACMDRIVER,
    paftd: *ACMFORMATTAGDETAILSW,
    fnCallback: ACMFORMATTAGENUMCBW,
    dwInstance: ?*c_void,
    fdwEnum: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFormatDetailsA(
    had: HACMDRIVER,
    pafd: *tACMFORMATDETAILSA,
    fdwDetails: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFormatDetailsW(
    had: HACMDRIVER,
    pafd: *tACMFORMATDETAILSW,
    fdwDetails: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFormatEnumA(
    had: HACMDRIVER,
    pafd: *tACMFORMATDETAILSA,
    fnCallback: ACMFORMATENUMCBA,
    dwInstance: ?*c_void,
    fdwEnum: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFormatEnumW(
    had: HACMDRIVER,
    pafd: *tACMFORMATDETAILSW,
    fnCallback: ACMFORMATENUMCBW,
    dwInstance: ?*c_void,
    fdwEnum: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFormatSuggest(
    had: HACMDRIVER,
    pwfxSrc: *WAVEFORMATEX,
    pwfxDst: *WAVEFORMATEX,
    cbwfxDst: u32,
    fdwSuggest: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFormatChooseA(
    pafmtc: *tACMFORMATCHOOSEA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFormatChooseW(
    pafmtc: *tACMFORMATCHOOSEW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFilterTagDetailsA(
    had: HACMDRIVER,
    paftd: *ACMFILTERTAGDETAILSA,
    fdwDetails: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFilterTagDetailsW(
    had: HACMDRIVER,
    paftd: *ACMFILTERTAGDETAILSW,
    fdwDetails: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFilterTagEnumA(
    had: HACMDRIVER,
    paftd: *ACMFILTERTAGDETAILSA,
    fnCallback: ACMFILTERTAGENUMCBA,
    dwInstance: ?*c_void,
    fdwEnum: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFilterTagEnumW(
    had: HACMDRIVER,
    paftd: *ACMFILTERTAGDETAILSW,
    fnCallback: ACMFILTERTAGENUMCBW,
    dwInstance: ?*c_void,
    fdwEnum: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFilterDetailsA(
    had: HACMDRIVER,
    pafd: *tACMFILTERDETAILSA,
    fdwDetails: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFilterDetailsW(
    had: HACMDRIVER,
    pafd: *tACMFILTERDETAILSW,
    fdwDetails: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFilterEnumA(
    had: HACMDRIVER,
    pafd: *tACMFILTERDETAILSA,
    fnCallback: ACMFILTERENUMCBA,
    dwInstance: ?*c_void,
    fdwEnum: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFilterEnumW(
    had: HACMDRIVER,
    pafd: *tACMFILTERDETAILSW,
    fnCallback: ACMFILTERENUMCBW,
    dwInstance: ?*c_void,
    fdwEnum: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFilterChooseA(
    pafltrc: *tACMFILTERCHOOSEA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmFilterChooseW(
    pafltrc: *tACMFILTERCHOOSEW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmStreamOpen(
    phas: *?*c_void,
    had: HACMDRIVER,
    pwfxSrc: *WAVEFORMATEX,
    pwfxDst: *WAVEFORMATEX,
    pwfltr: *WAVEFILTER,
    dwCallback: ?*c_void,
    dwInstance: ?*c_void,
    fdwOpen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmStreamClose(
    has: HACMSTREAM,
    fdwClose: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmStreamSize(
    has: HACMSTREAM,
    cbInput: u32,
    pdwOutputBytes: *u32,
    fdwSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmStreamReset(
    has: HACMSTREAM,
    fdwReset: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmStreamMessage(
    has: HACMSTREAM,
    uMsg: u32,
    lParam1: LPARAM,
    lParam2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmStreamConvert(
    has: HACMSTREAM,
    pash: *ACMSTREAMHEADER,
    fdwConvert: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmStreamPrepareHeader(
    has: HACMSTREAM,
    pash: *ACMSTREAMHEADER,
    fdwPrepare: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSACM32" fn acmStreamUnprepareHeader(
    has: HACMSTREAM,
    pash: *ACMSTREAMHEADER,
    fdwUnprepare: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSVFW32" fn VideoForWindowsVersion(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSVFW32" fn ICInfo(
    fccType: u32,
    fccHandler: u32,
    lpicinfo: *ICINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSVFW32" fn ICInstall(
    fccType: u32,
    fccHandler: u32,
    lParam: LPARAM,
    szDesc: PSTR,
    wFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSVFW32" fn ICRemove(
    fccType: u32,
    fccHandler: u32,
    wFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSVFW32" fn ICGetInfo(
    hic: HIC,
    picinfo: [*]ICINFO,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "MSVFW32" fn ICOpen(
    fccType: u32,
    fccHandler: u32,
    wMode: u32,
) callconv(@import("std").os.windows.WINAPI) HIC;

pub extern "MSVFW32" fn ICOpenFunction(
    fccType: u32,
    fccHandler: u32,
    wMode: u32,
    lpfnHandler: FARPROC,
) callconv(@import("std").os.windows.WINAPI) HIC;

pub extern "MSVFW32" fn ICClose(
    hic: HIC,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "MSVFW32" fn ICSendMessage(
    hic: HIC,
    msg: u32,
    dw1: ?*c_void,
    dw2: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "MSVFW32" fn ICCompress(
    hic: HIC,
    dwFlags: u32,
    lpbiOutput: *BITMAPINFOHEADER,
    lpData: *c_void,
    lpbiInput: *BITMAPINFOHEADER,
    lpBits: *c_void,
    lpckid: ?*u32,
    lpdwFlags: ?*u32,
    lFrameNum: i32,
    dwFrameSize: u32,
    dwQuality: u32,
    lpbiPrev: ?*BITMAPINFOHEADER,
    lpPrev: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSVFW32" fn ICDecompress(
    hic: HIC,
    dwFlags: u32,
    lpbiFormat: *BITMAPINFOHEADER,
    lpData: *c_void,
    lpbi: *BITMAPINFOHEADER,
    lpBits: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSVFW32" fn ICDrawBegin(
    hic: HIC,
    dwFlags: u32,
    hpal: HPALETTE,
    hwnd: HWND,
    hdc: HDC,
    xDst: i32,
    yDst: i32,
    dxDst: i32,
    dyDst: i32,
    lpbi: *BITMAPINFOHEADER,
    xSrc: i32,
    ySrc: i32,
    dxSrc: i32,
    dySrc: i32,
    dwRate: u32,
    dwScale: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSVFW32" fn ICDraw(
    hic: HIC,
    dwFlags: u32,
    lpFormat: *c_void,
    lpData: ?[*]u8,
    cbData: u32,
    lTime: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSVFW32" fn ICLocate(
    fccType: u32,
    fccHandler: u32,
    lpbiIn: *BITMAPINFOHEADER,
    lpbiOut: ?*BITMAPINFOHEADER,
    wFlags: u16,
) callconv(@import("std").os.windows.WINAPI) HIC;

pub extern "MSVFW32" fn ICGetDisplayFormat(
    hic: HIC,
    lpbiIn: *BITMAPINFOHEADER,
    lpbiOut: *BITMAPINFOHEADER,
    BitDepth: i32,
    dx: i32,
    dy: i32,
) callconv(@import("std").os.windows.WINAPI) HIC;

pub extern "MSVFW32" fn ICImageCompress(
    hic: HIC,
    uiFlags: u32,
    lpbiIn: *BITMAPINFO,
    lpBits: *c_void,
    lpbiOut: ?*BITMAPINFO,
    lQuality: i32,
    plSize: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "MSVFW32" fn ICImageDecompress(
    hic: HIC,
    uiFlags: u32,
    lpbiIn: *BITMAPINFO,
    lpBits: *c_void,
    lpbiOut: ?*BITMAPINFO,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "MSVFW32" fn ICCompressorChoose(
    hwnd: HWND,
    uiFlags: u32,
    pvIn: ?*c_void,
    lpData: ?*c_void,
    pc: *COMPVARS,
    lpszTitle: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSVFW32" fn ICSeqCompressFrameStart(
    pc: *COMPVARS,
    lpbiIn: *BITMAPINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSVFW32" fn ICSeqCompressFrameEnd(
    pc: *COMPVARS,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSVFW32" fn ICSeqCompressFrame(
    pc: *COMPVARS,
    uiFlags: u32,
    lpBits: *c_void,
    pfKey: *BOOL,
    plSize: ?*i32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "MSVFW32" fn ICCompressorFree(
    pc: *COMPVARS,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSVFW32" fn DrawDibOpen(
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSVFW32" fn DrawDibClose(
    hdd: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSVFW32" fn DrawDibGetBuffer(
    hdd: ?*c_void,
    lpbi: *BITMAPINFOHEADER,
    dwSize: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "MSVFW32" fn DrawDibGetPalette(
    hdd: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HPALETTE;

pub extern "MSVFW32" fn DrawDibSetPalette(
    hdd: ?*c_void,
    hpal: HPALETTE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSVFW32" fn DrawDibChangePalette(
    hdd: ?*c_void,
    iStart: i32,
    iLen: i32,
    lppe: [*]PALETTEENTRY,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSVFW32" fn DrawDibRealize(
    hdd: ?*c_void,
    hdc: HDC,
    fBackground: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSVFW32" fn DrawDibStart(
    hdd: ?*c_void,
    rate: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSVFW32" fn DrawDibStop(
    hdd: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSVFW32" fn DrawDibBegin(
    hdd: ?*c_void,
    hdc: HDC,
    dxDst: i32,
    dyDst: i32,
    lpbi: *BITMAPINFOHEADER,
    dxSrc: i32,
    dySrc: i32,
    wFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSVFW32" fn DrawDibDraw(
    hdd: ?*c_void,
    hdc: HDC,
    xDst: i32,
    yDst: i32,
    dxDst: i32,
    dyDst: i32,
    lpbi: ?*BITMAPINFOHEADER,
    lpBits: ?*c_void,
    xSrc: i32,
    ySrc: i32,
    dxSrc: i32,
    dySrc: i32,
    wFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSVFW32" fn DrawDibEnd(
    hdd: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSVFW32" fn DrawDibTime(
    hdd: ?*c_void,
    lpddtime: *DRAWDIBTIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSVFW32" fn DrawDibProfileDisplay(
    lpbi: *BITMAPINFOHEADER,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "AVIFIL32" fn AVIFileInit(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "AVIFIL32" fn AVIFileExit(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "AVIFIL32" fn AVIFileAddRef(
    pfile: *IAVIFile,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "AVIFIL32" fn AVIFileRelease(
    pfile: *IAVIFile,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "AVIFIL32" fn AVIFileOpenA(
    ppfile: **IAVIFile,
    szFile: [*:0]const u8,
    uMode: u32,
    lpHandler: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIFileOpenW(
    ppfile: **IAVIFile,
    szFile: [*:0]const u16,
    uMode: u32,
    lpHandler: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIFileInfoW(
    pfile: *IAVIFile,
    pfi: [*]AVIFILEINFOW,
    lSize: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIFileInfoA(
    pfile: *IAVIFile,
    pfi: [*]AVIFILEINFOA,
    lSize: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIFileGetStream(
    pfile: *IAVIFile,
    ppavi: **IAVIStream,
    fccType: u32,
    lParam: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIFileCreateStreamW(
    pfile: *IAVIFile,
    ppavi: **IAVIStream,
    psi: *AVISTREAMINFOW,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIFileCreateStreamA(
    pfile: *IAVIFile,
    ppavi: **IAVIStream,
    psi: *AVISTREAMINFOA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIFileWriteData(
    pfile: *IAVIFile,
    ckid: u32,
    lpData: [*]u8,
    cbData: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIFileReadData(
    pfile: *IAVIFile,
    ckid: u32,
    lpData: [*]u8,
    lpcbData: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIFileEndRecord(
    pfile: *IAVIFile,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIStreamAddRef(
    pavi: *IAVIStream,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "AVIFIL32" fn AVIStreamRelease(
    pavi: *IAVIStream,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "AVIFIL32" fn AVIStreamInfoW(
    pavi: *IAVIStream,
    psi: [*]AVISTREAMINFOW,
    lSize: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIStreamInfoA(
    pavi: *IAVIStream,
    psi: [*]AVISTREAMINFOA,
    lSize: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIStreamFindSample(
    pavi: *IAVIStream,
    lPos: i32,
    lFlags: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "AVIFIL32" fn AVIStreamReadFormat(
    pavi: *IAVIStream,
    lPos: i32,
    lpFormat: ?[*]u8,
    lpcbFormat: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIStreamSetFormat(
    pavi: *IAVIStream,
    lPos: i32,
    lpFormat: [*]u8,
    cbFormat: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIStreamReadData(
    pavi: *IAVIStream,
    fcc: u32,
    lp: ?[*]u8,
    lpcb: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIStreamWriteData(
    pavi: *IAVIStream,
    fcc: u32,
    lp: [*]u8,
    cb: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIStreamRead(
    pavi: *IAVIStream,
    lStart: i32,
    lSamples: i32,
    lpBuffer: ?[*]u8,
    cbBuffer: i32,
    plBytes: ?*i32,
    plSamples: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIStreamWrite(
    pavi: *IAVIStream,
    lStart: i32,
    lSamples: i32,
    lpBuffer: [*]u8,
    cbBuffer: i32,
    dwFlags: u32,
    plSampWritten: ?*i32,
    plBytesWritten: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIStreamStart(
    pavi: *IAVIStream,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "AVIFIL32" fn AVIStreamLength(
    pavi: *IAVIStream,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "AVIFIL32" fn AVIStreamTimeToSample(
    pavi: *IAVIStream,
    lTime: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "AVIFIL32" fn AVIStreamSampleToTime(
    pavi: *IAVIStream,
    lSample: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "AVIFIL32" fn AVIStreamBeginStreaming(
    pavi: *IAVIStream,
    lStart: i32,
    lEnd: i32,
    lRate: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIStreamEndStreaming(
    pavi: *IAVIStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIStreamGetFrameOpen(
    pavi: *IAVIStream,
    lpbiWanted: ?*BITMAPINFOHEADER,
) callconv(@import("std").os.windows.WINAPI) *IGetFrame;

pub extern "AVIFIL32" fn AVIStreamGetFrame(
    pg: *IGetFrame,
    lPos: i32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "AVIFIL32" fn AVIStreamGetFrameClose(
    pg: *IGetFrame,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIStreamOpenFromFileA(
    ppavi: **IAVIStream,
    szFile: [*:0]const u8,
    fccType: u32,
    lParam: i32,
    mode: u32,
    pclsidHandler: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIStreamOpenFromFileW(
    ppavi: **IAVIStream,
    szFile: [*:0]const u16,
    fccType: u32,
    lParam: i32,
    mode: u32,
    pclsidHandler: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIStreamCreate(
    ppavi: **IAVIStream,
    lParam1: i32,
    lParam2: i32,
    pclsidHandler: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIMakeCompressedStream(
    ppsCompressed: **IAVIStream,
    ppsSource: *IAVIStream,
    lpOptions: *AVICOMPRESSOPTIONS,
    pclsidHandler: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVISaveA(
    szFile: [*:0]const u8,
    pclsidHandler: ?*Guid,
    lpfnCallback: AVISAVECALLBACK,
    nStreams: i32,
    pfile: *IAVIStream,
    lpOptions: *AVICOMPRESSOPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVISaveVA(
    szFile: [*:0]const u8,
    pclsidHandler: ?*Guid,
    lpfnCallback: AVISAVECALLBACK,
    nStreams: i32,
    ppavi: [*]*IAVIStream,
    plpOptions: [*]*AVICOMPRESSOPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVISaveW(
    szFile: [*:0]const u16,
    pclsidHandler: ?*Guid,
    lpfnCallback: AVISAVECALLBACK,
    nStreams: i32,
    pfile: *IAVIStream,
    lpOptions: *AVICOMPRESSOPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVISaveVW(
    szFile: [*:0]const u16,
    pclsidHandler: ?*Guid,
    lpfnCallback: AVISAVECALLBACK,
    nStreams: i32,
    ppavi: [*]*IAVIStream,
    plpOptions: [*]*AVICOMPRESSOPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVISaveOptions(
    hwnd: HWND,
    uiFlags: u32,
    nStreams: i32,
    ppavi: [*]*IAVIStream,
    plpOptions: [*]*AVICOMPRESSOPTIONS,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "AVIFIL32" fn AVISaveOptionsFree(
    nStreams: i32,
    plpOptions: [*]*AVICOMPRESSOPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIBuildFilterW(
    lpszFilter: [*:0]u16,
    cbFilter: i32,
    fSaving: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIBuildFilterA(
    lpszFilter: [*:0]u8,
    cbFilter: i32,
    fSaving: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIMakeFileFromStreams(
    ppfile: **IAVIFile,
    nStreams: i32,
    papStreams: [*]*IAVIStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIMakeStreamFromClipboard(
    cfFormat: u32,
    hGlobal: HANDLE,
    ppstream: **IAVIStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIPutFileOnClipboard(
    pf: *IAVIFile,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIGetFromClipboard(
    lppf: **IAVIFile,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn AVIClearClipboard(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn CreateEditableStream(
    ppsEditable: **IAVIStream,
    psSource: *IAVIStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn EditStreamCut(
    pavi: *IAVIStream,
    plStart: *i32,
    plLength: *i32,
    ppResult: **IAVIStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn EditStreamCopy(
    pavi: *IAVIStream,
    plStart: *i32,
    plLength: *i32,
    ppResult: **IAVIStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn EditStreamPaste(
    pavi: *IAVIStream,
    plPos: *i32,
    plLength: *i32,
    pstream: *IAVIStream,
    lStart: i32,
    lEnd: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn EditStreamClone(
    pavi: *IAVIStream,
    ppResult: **IAVIStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn EditStreamSetNameA(
    pavi: *IAVIStream,
    lpszName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn EditStreamSetNameW(
    pavi: *IAVIStream,
    lpszName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn EditStreamSetInfoW(
    pavi: *IAVIStream,
    lpInfo: [*]AVISTREAMINFOW,
    cbInfo: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "AVIFIL32" fn EditStreamSetInfoA(
    pavi: *IAVIStream,
    lpInfo: [*]AVISTREAMINFOA,
    cbInfo: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MSVFW32" fn MCIWndCreateA(
    hwndParent: HWND,
    hInstance: HINSTANCE,
    dwStyle: u32,
    szFile: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "MSVFW32" fn MCIWndCreateW(
    hwndParent: HWND,
    hInstance: HINSTANCE,
    dwStyle: u32,
    szFile: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "MSVFW32" fn MCIWndRegisterClass(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AVICAP32" fn capCreateCaptureWindowA(
    lpszWindowName: [*:0]const u8,
    dwStyle: u32,
    x: i32,
    y: i32,
    nWidth: i32,
    nHeight: i32,
    hwndParent: HWND,
    nID: i32,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "AVICAP32" fn capGetDriverDescriptionA(
    wDriverIndex: u32,
    lpszName: [*:0]u8,
    cbName: i32,
    lpszVer: [*:0]u8,
    cbVer: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AVICAP32" fn capCreateCaptureWindowW(
    lpszWindowName: [*:0]const u16,
    dwStyle: u32,
    x: i32,
    y: i32,
    nWidth: i32,
    nHeight: i32,
    hwndParent: HWND,
    nID: i32,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "AVICAP32" fn capGetDriverDescriptionW(
    wDriverIndex: u32,
    lpszName: [*:0]u16,
    cbName: i32,
    lpszVer: [*:0]u16,
    cbVer: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSVFW32" fn GetOpenFileNamePreviewA(
    lpofn: *OPENFILENAMEA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSVFW32" fn GetSaveFileNamePreviewA(
    lpofn: *OPENFILENAMEA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSVFW32" fn GetOpenFileNamePreviewW(
    lpofn: *OPENFILENAMEW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSVFW32" fn GetSaveFileNamePreviewW(
    lpofn: *OPENFILENAMEW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINMM" fn mmTaskCreate(
    lpfn: LPTASKCALLBACK,
    lph: *HANDLE,
    dwInst: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn mmTaskBlock(
    h: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WINMM" fn mmTaskSignal(
    h: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINMM" fn mmTaskYield(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WINMM" fn mmGetCurrentTask(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINMM" fn joyConfigChanged(
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (94)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const WAVEOUTCAPS = WAVEOUTCAPSA;
        pub const WAVEOUTCAPS2 = WAVEOUTCAPS2A;
        pub const WAVEINCAPS = WAVEINCAPSA;
        pub const WAVEINCAPS2 = WAVEINCAPS2A;
        pub const MIDIOUTCAPS = MIDIOUTCAPSA;
        pub const MIDIOUTCAPS2 = MIDIOUTCAPS2A;
        pub const MIDIINCAPS = MIDIINCAPSA;
        pub const MIDIINCAPS2 = MIDIINCAPS2A;
        pub const AUXCAPS = AUXCAPSA;
        pub const AUXCAPS2 = AUXCAPS2A;
        pub const MIXERCAPS = MIXERCAPSA;
        pub const MIXERCAPS2 = MIXERCAPS2A;
        pub const MIXERLINE = MIXERLINEA;
        pub const MIXERCONTROL = MIXERCONTROLA;
        pub const MIXERLINECONTROLS = MIXERLINECONTROLSA;
        pub const MIXERCONTROLDETAILS_LISTTEXT = MIXERCONTROLDETAILS_LISTTEXTA;
        pub const JOYCAPS = JOYCAPSA;
        pub const JOYCAPS2 = JOYCAPS2A;
        pub const MCI_DGV_CAPTURE_PARMS = MCI_DGV_CAPTURE_PARMSA;
        pub const MCI_DGV_INFO_PARMS = MCI_DGV_INFO_PARMSA;
        pub const MCI_DGV_LIST_PARMS = MCI_DGV_LIST_PARMSA;
        pub const MCI_DGV_OPEN_PARMS = MCI_DGV_OPEN_PARMSA;
        pub const MCI_DGV_QUALITY_PARMS = MCI_DGV_QUALITY_PARMSA;
        pub const MCI_DGV_RESERVE_PARMS = MCI_DGV_RESERVE_PARMSA;
        pub const MCI_DGV_RESTORE_PARMS = MCI_DGV_RESTORE_PARMSA;
        pub const MCI_DGV_SAVE_PARMS = MCI_DGV_SAVE_PARMSA;
        pub const MCI_DGV_SETAUDIO_PARMS = MCI_DGV_SETAUDIO_PARMSA;
        pub const MCI_DGV_SETVIDEO_PARMS = MCI_DGV_SETVIDEO_PARMSA;
        pub const MCI_DGV_STATUS_PARMS = MCI_DGV_STATUS_PARMSA;
        pub const MCI_DGV_WINDOW_PARMS = MCI_DGV_WINDOW_PARMSA;
        pub const tACMDRIVERDETAILS = tACMDRIVERDETAILSA;
        pub const ACMFORMATTAGDETAILS = ACMFORMATTAGDETAILSA;
        pub const ACMFORMATTAGENUMCB = ACMFORMATTAGENUMCBA;
        pub const tACMFORMATDETAILS = tACMFORMATDETAILSA;
        pub const ACMFORMATENUMCB = ACMFORMATENUMCBA;
        pub const ACMFORMATCHOOSEHOOKPROC = ACMFORMATCHOOSEHOOKPROCA;
        pub const tACMFORMATCHOOSE = tACMFORMATCHOOSEA;
        pub const ACMFILTERTAGDETAILS = ACMFILTERTAGDETAILSA;
        pub const ACMFILTERTAGENUMCB = ACMFILTERTAGENUMCBA;
        pub const tACMFILTERDETAILS = tACMFILTERDETAILSA;
        pub const ACMFILTERENUMCB = ACMFILTERENUMCBA;
        pub const ACMFILTERCHOOSEHOOKPROC = ACMFILTERCHOOSEHOOKPROCA;
        pub const tACMFILTERCHOOSE = tACMFILTERCHOOSEA;
        pub const AVISTREAMINFO = AVISTREAMINFOA;
        pub const AVIFILEINFO = AVIFILEINFOA;
        pub const CAPSTATUSCALLBACK = CAPSTATUSCALLBACKA;
        pub const CAPERRORCALLBACK = CAPERRORCALLBACKA;
        pub const mmioStringToFOURCC = mmioStringToFOURCCA;
        pub const mmioInstallIOProc = mmioInstallIOProcA;
        pub const mmioOpen = mmioOpenA;
        pub const mmioRename = mmioRenameA;
        pub const sndPlaySound = sndPlaySoundA;
        pub const PlaySound = PlaySoundA;
        pub const waveOutGetDevCaps = waveOutGetDevCapsA;
        pub const waveOutGetErrorText = waveOutGetErrorTextA;
        pub const waveInGetDevCaps = waveInGetDevCapsA;
        pub const waveInGetErrorText = waveInGetErrorTextA;
        pub const midiOutGetDevCaps = midiOutGetDevCapsA;
        pub const midiOutGetErrorText = midiOutGetErrorTextA;
        pub const midiInGetDevCaps = midiInGetDevCapsA;
        pub const midiInGetErrorText = midiInGetErrorTextA;
        pub const auxGetDevCaps = auxGetDevCapsA;
        pub const mixerGetDevCaps = mixerGetDevCapsA;
        pub const mixerGetLineInfo = mixerGetLineInfoA;
        pub const mixerGetLineControls = mixerGetLineControlsA;
        pub const mixerGetControlDetails = mixerGetControlDetailsA;
        pub const joyGetDevCaps = joyGetDevCapsA;
        pub const acmDriverAdd = acmDriverAddA;
        pub const acmDriverDetails = acmDriverDetailsA;
        pub const acmFormatTagDetails = acmFormatTagDetailsA;
        pub const acmFormatTagEnum = acmFormatTagEnumA;
        pub const acmFormatDetails = acmFormatDetailsA;
        pub const acmFormatEnum = acmFormatEnumA;
        pub const acmFormatChoose = acmFormatChooseA;
        pub const acmFilterTagDetails = acmFilterTagDetailsA;
        pub const acmFilterTagEnum = acmFilterTagEnumA;
        pub const acmFilterDetails = acmFilterDetailsA;
        pub const acmFilterEnum = acmFilterEnumA;
        pub const acmFilterChoose = acmFilterChooseA;
        pub const AVIFileOpen = AVIFileOpenA;
        pub const AVIFileInfo = AVIFileInfoA;
        pub const AVIFileCreateStream = AVIFileCreateStreamA;
        pub const AVIStreamInfo = AVIStreamInfoA;
        pub const AVIStreamOpenFromFile = AVIStreamOpenFromFileA;
        pub const AVISave = AVISaveA;
        pub const AVISaveV = AVISaveVA;
        pub const AVIBuildFilter = AVIBuildFilterA;
        pub const EditStreamSetName = EditStreamSetNameA;
        pub const EditStreamSetInfo = EditStreamSetInfoA;
        pub const MCIWndCreate = MCIWndCreateA;
        pub const capCreateCaptureWindow = capCreateCaptureWindowA;
        pub const capGetDriverDescription = capGetDriverDescriptionA;
        pub const GetOpenFileNamePreview = GetOpenFileNamePreviewA;
        pub const GetSaveFileNamePreview = GetSaveFileNamePreviewA;
    },
    .wide => struct {
        pub const WAVEOUTCAPS = WAVEOUTCAPSW;
        pub const WAVEOUTCAPS2 = WAVEOUTCAPS2W;
        pub const WAVEINCAPS = WAVEINCAPSW;
        pub const WAVEINCAPS2 = WAVEINCAPS2W;
        pub const MIDIOUTCAPS = MIDIOUTCAPSW;
        pub const MIDIOUTCAPS2 = MIDIOUTCAPS2W;
        pub const MIDIINCAPS = MIDIINCAPSW;
        pub const MIDIINCAPS2 = MIDIINCAPS2W;
        pub const AUXCAPS = AUXCAPSW;
        pub const AUXCAPS2 = AUXCAPS2W;
        pub const MIXERCAPS = MIXERCAPSW;
        pub const MIXERCAPS2 = MIXERCAPS2W;
        pub const MIXERLINE = MIXERLINEW;
        pub const MIXERCONTROL = MIXERCONTROLW;
        pub const MIXERLINECONTROLS = MIXERLINECONTROLSW;
        pub const MIXERCONTROLDETAILS_LISTTEXT = MIXERCONTROLDETAILS_LISTTEXTW;
        pub const JOYCAPS = JOYCAPSW;
        pub const JOYCAPS2 = JOYCAPS2W;
        pub const MCI_DGV_CAPTURE_PARMS = MCI_DGV_CAPTURE_PARMSW;
        pub const MCI_DGV_INFO_PARMS = MCI_DGV_INFO_PARMSW;
        pub const MCI_DGV_LIST_PARMS = MCI_DGV_LIST_PARMSW;
        pub const MCI_DGV_OPEN_PARMS = MCI_DGV_OPEN_PARMSW;
        pub const MCI_DGV_QUALITY_PARMS = MCI_DGV_QUALITY_PARMSW;
        pub const MCI_DGV_RESERVE_PARMS = MCI_DGV_RESERVE_PARMSW;
        pub const MCI_DGV_RESTORE_PARMS = MCI_DGV_RESTORE_PARMSW;
        pub const MCI_DGV_SAVE_PARMS = MCI_DGV_SAVE_PARMSW;
        pub const MCI_DGV_SETAUDIO_PARMS = MCI_DGV_SETAUDIO_PARMSW;
        pub const MCI_DGV_SETVIDEO_PARMS = MCI_DGV_SETVIDEO_PARMSW;
        pub const MCI_DGV_STATUS_PARMS = MCI_DGV_STATUS_PARMSW;
        pub const MCI_DGV_WINDOW_PARMS = MCI_DGV_WINDOW_PARMSW;
        pub const tACMDRIVERDETAILS = tACMDRIVERDETAILSW;
        pub const ACMFORMATTAGDETAILS = ACMFORMATTAGDETAILSW;
        pub const ACMFORMATTAGENUMCB = ACMFORMATTAGENUMCBW;
        pub const tACMFORMATDETAILS = tACMFORMATDETAILSW;
        pub const ACMFORMATENUMCB = ACMFORMATENUMCBW;
        pub const ACMFORMATCHOOSEHOOKPROC = ACMFORMATCHOOSEHOOKPROCW;
        pub const tACMFORMATCHOOSE = tACMFORMATCHOOSEW;
        pub const ACMFILTERTAGDETAILS = ACMFILTERTAGDETAILSW;
        pub const ACMFILTERTAGENUMCB = ACMFILTERTAGENUMCBW;
        pub const tACMFILTERDETAILS = tACMFILTERDETAILSW;
        pub const ACMFILTERENUMCB = ACMFILTERENUMCBW;
        pub const ACMFILTERCHOOSEHOOKPROC = ACMFILTERCHOOSEHOOKPROCW;
        pub const tACMFILTERCHOOSE = tACMFILTERCHOOSEW;
        pub const AVISTREAMINFO = AVISTREAMINFOW;
        pub const AVIFILEINFO = AVIFILEINFOW;
        pub const CAPSTATUSCALLBACK = CAPSTATUSCALLBACKW;
        pub const CAPERRORCALLBACK = CAPERRORCALLBACKW;
        pub const mmioStringToFOURCC = mmioStringToFOURCCW;
        pub const mmioInstallIOProc = mmioInstallIOProcW;
        pub const mmioOpen = mmioOpenW;
        pub const mmioRename = mmioRenameW;
        pub const sndPlaySound = sndPlaySoundW;
        pub const PlaySound = PlaySoundW;
        pub const waveOutGetDevCaps = waveOutGetDevCapsW;
        pub const waveOutGetErrorText = waveOutGetErrorTextW;
        pub const waveInGetDevCaps = waveInGetDevCapsW;
        pub const waveInGetErrorText = waveInGetErrorTextW;
        pub const midiOutGetDevCaps = midiOutGetDevCapsW;
        pub const midiOutGetErrorText = midiOutGetErrorTextW;
        pub const midiInGetDevCaps = midiInGetDevCapsW;
        pub const midiInGetErrorText = midiInGetErrorTextW;
        pub const auxGetDevCaps = auxGetDevCapsW;
        pub const mixerGetDevCaps = mixerGetDevCapsW;
        pub const mixerGetLineInfo = mixerGetLineInfoW;
        pub const mixerGetLineControls = mixerGetLineControlsW;
        pub const mixerGetControlDetails = mixerGetControlDetailsW;
        pub const joyGetDevCaps = joyGetDevCapsW;
        pub const acmDriverAdd = acmDriverAddW;
        pub const acmDriverDetails = acmDriverDetailsW;
        pub const acmFormatTagDetails = acmFormatTagDetailsW;
        pub const acmFormatTagEnum = acmFormatTagEnumW;
        pub const acmFormatDetails = acmFormatDetailsW;
        pub const acmFormatEnum = acmFormatEnumW;
        pub const acmFormatChoose = acmFormatChooseW;
        pub const acmFilterTagDetails = acmFilterTagDetailsW;
        pub const acmFilterTagEnum = acmFilterTagEnumW;
        pub const acmFilterDetails = acmFilterDetailsW;
        pub const acmFilterEnum = acmFilterEnumW;
        pub const acmFilterChoose = acmFilterChooseW;
        pub const AVIFileOpen = AVIFileOpenW;
        pub const AVIFileInfo = AVIFileInfoW;
        pub const AVIFileCreateStream = AVIFileCreateStreamW;
        pub const AVIStreamInfo = AVIStreamInfoW;
        pub const AVIStreamOpenFromFile = AVIStreamOpenFromFileW;
        pub const AVISave = AVISaveW;
        pub const AVISaveV = AVISaveVW;
        pub const AVIBuildFilter = AVIBuildFilterW;
        pub const EditStreamSetName = EditStreamSetNameW;
        pub const EditStreamSetInfo = EditStreamSetInfoW;
        pub const MCIWndCreate = MCIWndCreateW;
        pub const capCreateCaptureWindow = capCreateCaptureWindowW;
        pub const capGetDriverDescription = capGetDriverDescriptionW;
        pub const GetOpenFileNamePreview = GetOpenFileNamePreviewW;
        pub const GetSaveFileNamePreview = GetSaveFileNamePreviewW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const WAVEOUTCAPS = *opaque{};
        pub const WAVEOUTCAPS2 = *opaque{};
        pub const WAVEINCAPS = *opaque{};
        pub const WAVEINCAPS2 = *opaque{};
        pub const MIDIOUTCAPS = *opaque{};
        pub const MIDIOUTCAPS2 = *opaque{};
        pub const MIDIINCAPS = *opaque{};
        pub const MIDIINCAPS2 = *opaque{};
        pub const AUXCAPS = *opaque{};
        pub const AUXCAPS2 = *opaque{};
        pub const MIXERCAPS = *opaque{};
        pub const MIXERCAPS2 = *opaque{};
        pub const MIXERLINE = *opaque{};
        pub const MIXERCONTROL = *opaque{};
        pub const MIXERLINECONTROLS = *opaque{};
        pub const MIXERCONTROLDETAILS_LISTTEXT = *opaque{};
        pub const JOYCAPS = *opaque{};
        pub const JOYCAPS2 = *opaque{};
        pub const MCI_DGV_CAPTURE_PARMS = *opaque{};
        pub const MCI_DGV_INFO_PARMS = *opaque{};
        pub const MCI_DGV_LIST_PARMS = *opaque{};
        pub const MCI_DGV_OPEN_PARMS = *opaque{};
        pub const MCI_DGV_QUALITY_PARMS = *opaque{};
        pub const MCI_DGV_RESERVE_PARMS = *opaque{};
        pub const MCI_DGV_RESTORE_PARMS = *opaque{};
        pub const MCI_DGV_SAVE_PARMS = *opaque{};
        pub const MCI_DGV_SETAUDIO_PARMS = *opaque{};
        pub const MCI_DGV_SETVIDEO_PARMS = *opaque{};
        pub const MCI_DGV_STATUS_PARMS = *opaque{};
        pub const MCI_DGV_WINDOW_PARMS = *opaque{};
        pub const tACMDRIVERDETAILS = *opaque{};
        pub const ACMFORMATTAGDETAILS = *opaque{};
        pub const ACMFORMATTAGENUMCB = *opaque{};
        pub const tACMFORMATDETAILS = *opaque{};
        pub const ACMFORMATENUMCB = *opaque{};
        pub const ACMFORMATCHOOSEHOOKPROC = *opaque{};
        pub const tACMFORMATCHOOSE = *opaque{};
        pub const ACMFILTERTAGDETAILS = *opaque{};
        pub const ACMFILTERTAGENUMCB = *opaque{};
        pub const tACMFILTERDETAILS = *opaque{};
        pub const ACMFILTERENUMCB = *opaque{};
        pub const ACMFILTERCHOOSEHOOKPROC = *opaque{};
        pub const tACMFILTERCHOOSE = *opaque{};
        pub const AVISTREAMINFO = *opaque{};
        pub const AVIFILEINFO = *opaque{};
        pub const CAPSTATUSCALLBACK = *opaque{};
        pub const CAPERRORCALLBACK = *opaque{};
        pub const mmioStringToFOURCC = *opaque{};
        pub const mmioInstallIOProc = *opaque{};
        pub const mmioOpen = *opaque{};
        pub const mmioRename = *opaque{};
        pub const sndPlaySound = *opaque{};
        pub const PlaySound = *opaque{};
        pub const waveOutGetDevCaps = *opaque{};
        pub const waveOutGetErrorText = *opaque{};
        pub const waveInGetDevCaps = *opaque{};
        pub const waveInGetErrorText = *opaque{};
        pub const midiOutGetDevCaps = *opaque{};
        pub const midiOutGetErrorText = *opaque{};
        pub const midiInGetDevCaps = *opaque{};
        pub const midiInGetErrorText = *opaque{};
        pub const auxGetDevCaps = *opaque{};
        pub const mixerGetDevCaps = *opaque{};
        pub const mixerGetLineInfo = *opaque{};
        pub const mixerGetLineControls = *opaque{};
        pub const mixerGetControlDetails = *opaque{};
        pub const joyGetDevCaps = *opaque{};
        pub const acmDriverAdd = *opaque{};
        pub const acmDriverDetails = *opaque{};
        pub const acmFormatTagDetails = *opaque{};
        pub const acmFormatTagEnum = *opaque{};
        pub const acmFormatDetails = *opaque{};
        pub const acmFormatEnum = *opaque{};
        pub const acmFormatChoose = *opaque{};
        pub const acmFilterTagDetails = *opaque{};
        pub const acmFilterTagEnum = *opaque{};
        pub const acmFilterDetails = *opaque{};
        pub const acmFilterEnum = *opaque{};
        pub const acmFilterChoose = *opaque{};
        pub const AVIFileOpen = *opaque{};
        pub const AVIFileInfo = *opaque{};
        pub const AVIFileCreateStream = *opaque{};
        pub const AVIStreamInfo = *opaque{};
        pub const AVIStreamOpenFromFile = *opaque{};
        pub const AVISave = *opaque{};
        pub const AVISaveV = *opaque{};
        pub const AVIBuildFilter = *opaque{};
        pub const EditStreamSetName = *opaque{};
        pub const EditStreamSetInfo = *opaque{};
        pub const MCIWndCreate = *opaque{};
        pub const capCreateCaptureWindow = *opaque{};
        pub const capGetDriverDescription = *opaque{};
        pub const GetOpenFileNamePreview = *opaque{};
        pub const GetSaveFileNamePreview = *opaque{};
    } else struct {
        pub const WAVEOUTCAPS = @compileError("'WAVEOUTCAPS' requires that UNICODE be set to true or false in the root module");
        pub const WAVEOUTCAPS2 = @compileError("'WAVEOUTCAPS2' requires that UNICODE be set to true or false in the root module");
        pub const WAVEINCAPS = @compileError("'WAVEINCAPS' requires that UNICODE be set to true or false in the root module");
        pub const WAVEINCAPS2 = @compileError("'WAVEINCAPS2' requires that UNICODE be set to true or false in the root module");
        pub const MIDIOUTCAPS = @compileError("'MIDIOUTCAPS' requires that UNICODE be set to true or false in the root module");
        pub const MIDIOUTCAPS2 = @compileError("'MIDIOUTCAPS2' requires that UNICODE be set to true or false in the root module");
        pub const MIDIINCAPS = @compileError("'MIDIINCAPS' requires that UNICODE be set to true or false in the root module");
        pub const MIDIINCAPS2 = @compileError("'MIDIINCAPS2' requires that UNICODE be set to true or false in the root module");
        pub const AUXCAPS = @compileError("'AUXCAPS' requires that UNICODE be set to true or false in the root module");
        pub const AUXCAPS2 = @compileError("'AUXCAPS2' requires that UNICODE be set to true or false in the root module");
        pub const MIXERCAPS = @compileError("'MIXERCAPS' requires that UNICODE be set to true or false in the root module");
        pub const MIXERCAPS2 = @compileError("'MIXERCAPS2' requires that UNICODE be set to true or false in the root module");
        pub const MIXERLINE = @compileError("'MIXERLINE' requires that UNICODE be set to true or false in the root module");
        pub const MIXERCONTROL = @compileError("'MIXERCONTROL' requires that UNICODE be set to true or false in the root module");
        pub const MIXERLINECONTROLS = @compileError("'MIXERLINECONTROLS' requires that UNICODE be set to true or false in the root module");
        pub const MIXERCONTROLDETAILS_LISTTEXT = @compileError("'MIXERCONTROLDETAILS_LISTTEXT' requires that UNICODE be set to true or false in the root module");
        pub const JOYCAPS = @compileError("'JOYCAPS' requires that UNICODE be set to true or false in the root module");
        pub const JOYCAPS2 = @compileError("'JOYCAPS2' requires that UNICODE be set to true or false in the root module");
        pub const MCI_DGV_CAPTURE_PARMS = @compileError("'MCI_DGV_CAPTURE_PARMS' requires that UNICODE be set to true or false in the root module");
        pub const MCI_DGV_INFO_PARMS = @compileError("'MCI_DGV_INFO_PARMS' requires that UNICODE be set to true or false in the root module");
        pub const MCI_DGV_LIST_PARMS = @compileError("'MCI_DGV_LIST_PARMS' requires that UNICODE be set to true or false in the root module");
        pub const MCI_DGV_OPEN_PARMS = @compileError("'MCI_DGV_OPEN_PARMS' requires that UNICODE be set to true or false in the root module");
        pub const MCI_DGV_QUALITY_PARMS = @compileError("'MCI_DGV_QUALITY_PARMS' requires that UNICODE be set to true or false in the root module");
        pub const MCI_DGV_RESERVE_PARMS = @compileError("'MCI_DGV_RESERVE_PARMS' requires that UNICODE be set to true or false in the root module");
        pub const MCI_DGV_RESTORE_PARMS = @compileError("'MCI_DGV_RESTORE_PARMS' requires that UNICODE be set to true or false in the root module");
        pub const MCI_DGV_SAVE_PARMS = @compileError("'MCI_DGV_SAVE_PARMS' requires that UNICODE be set to true or false in the root module");
        pub const MCI_DGV_SETAUDIO_PARMS = @compileError("'MCI_DGV_SETAUDIO_PARMS' requires that UNICODE be set to true or false in the root module");
        pub const MCI_DGV_SETVIDEO_PARMS = @compileError("'MCI_DGV_SETVIDEO_PARMS' requires that UNICODE be set to true or false in the root module");
        pub const MCI_DGV_STATUS_PARMS = @compileError("'MCI_DGV_STATUS_PARMS' requires that UNICODE be set to true or false in the root module");
        pub const MCI_DGV_WINDOW_PARMS = @compileError("'MCI_DGV_WINDOW_PARMS' requires that UNICODE be set to true or false in the root module");
        pub const tACMDRIVERDETAILS = @compileError("'tACMDRIVERDETAILS' requires that UNICODE be set to true or false in the root module");
        pub const ACMFORMATTAGDETAILS = @compileError("'ACMFORMATTAGDETAILS' requires that UNICODE be set to true or false in the root module");
        pub const ACMFORMATTAGENUMCB = @compileError("'ACMFORMATTAGENUMCB' requires that UNICODE be set to true or false in the root module");
        pub const tACMFORMATDETAILS = @compileError("'tACMFORMATDETAILS' requires that UNICODE be set to true or false in the root module");
        pub const ACMFORMATENUMCB = @compileError("'ACMFORMATENUMCB' requires that UNICODE be set to true or false in the root module");
        pub const ACMFORMATCHOOSEHOOKPROC = @compileError("'ACMFORMATCHOOSEHOOKPROC' requires that UNICODE be set to true or false in the root module");
        pub const tACMFORMATCHOOSE = @compileError("'tACMFORMATCHOOSE' requires that UNICODE be set to true or false in the root module");
        pub const ACMFILTERTAGDETAILS = @compileError("'ACMFILTERTAGDETAILS' requires that UNICODE be set to true or false in the root module");
        pub const ACMFILTERTAGENUMCB = @compileError("'ACMFILTERTAGENUMCB' requires that UNICODE be set to true or false in the root module");
        pub const tACMFILTERDETAILS = @compileError("'tACMFILTERDETAILS' requires that UNICODE be set to true or false in the root module");
        pub const ACMFILTERENUMCB = @compileError("'ACMFILTERENUMCB' requires that UNICODE be set to true or false in the root module");
        pub const ACMFILTERCHOOSEHOOKPROC = @compileError("'ACMFILTERCHOOSEHOOKPROC' requires that UNICODE be set to true or false in the root module");
        pub const tACMFILTERCHOOSE = @compileError("'tACMFILTERCHOOSE' requires that UNICODE be set to true or false in the root module");
        pub const AVISTREAMINFO = @compileError("'AVISTREAMINFO' requires that UNICODE be set to true or false in the root module");
        pub const AVIFILEINFO = @compileError("'AVIFILEINFO' requires that UNICODE be set to true or false in the root module");
        pub const CAPSTATUSCALLBACK = @compileError("'CAPSTATUSCALLBACK' requires that UNICODE be set to true or false in the root module");
        pub const CAPERRORCALLBACK = @compileError("'CAPERRORCALLBACK' requires that UNICODE be set to true or false in the root module");
        pub const mmioStringToFOURCC = @compileError("'mmioStringToFOURCC' requires that UNICODE be set to true or false in the root module");
        pub const mmioInstallIOProc = @compileError("'mmioInstallIOProc' requires that UNICODE be set to true or false in the root module");
        pub const mmioOpen = @compileError("'mmioOpen' requires that UNICODE be set to true or false in the root module");
        pub const mmioRename = @compileError("'mmioRename' requires that UNICODE be set to true or false in the root module");
        pub const sndPlaySound = @compileError("'sndPlaySound' requires that UNICODE be set to true or false in the root module");
        pub const PlaySound = @compileError("'PlaySound' requires that UNICODE be set to true or false in the root module");
        pub const waveOutGetDevCaps = @compileError("'waveOutGetDevCaps' requires that UNICODE be set to true or false in the root module");
        pub const waveOutGetErrorText = @compileError("'waveOutGetErrorText' requires that UNICODE be set to true or false in the root module");
        pub const waveInGetDevCaps = @compileError("'waveInGetDevCaps' requires that UNICODE be set to true or false in the root module");
        pub const waveInGetErrorText = @compileError("'waveInGetErrorText' requires that UNICODE be set to true or false in the root module");
        pub const midiOutGetDevCaps = @compileError("'midiOutGetDevCaps' requires that UNICODE be set to true or false in the root module");
        pub const midiOutGetErrorText = @compileError("'midiOutGetErrorText' requires that UNICODE be set to true or false in the root module");
        pub const midiInGetDevCaps = @compileError("'midiInGetDevCaps' requires that UNICODE be set to true or false in the root module");
        pub const midiInGetErrorText = @compileError("'midiInGetErrorText' requires that UNICODE be set to true or false in the root module");
        pub const auxGetDevCaps = @compileError("'auxGetDevCaps' requires that UNICODE be set to true or false in the root module");
        pub const mixerGetDevCaps = @compileError("'mixerGetDevCaps' requires that UNICODE be set to true or false in the root module");
        pub const mixerGetLineInfo = @compileError("'mixerGetLineInfo' requires that UNICODE be set to true or false in the root module");
        pub const mixerGetLineControls = @compileError("'mixerGetLineControls' requires that UNICODE be set to true or false in the root module");
        pub const mixerGetControlDetails = @compileError("'mixerGetControlDetails' requires that UNICODE be set to true or false in the root module");
        pub const joyGetDevCaps = @compileError("'joyGetDevCaps' requires that UNICODE be set to true or false in the root module");
        pub const acmDriverAdd = @compileError("'acmDriverAdd' requires that UNICODE be set to true or false in the root module");
        pub const acmDriverDetails = @compileError("'acmDriverDetails' requires that UNICODE be set to true or false in the root module");
        pub const acmFormatTagDetails = @compileError("'acmFormatTagDetails' requires that UNICODE be set to true or false in the root module");
        pub const acmFormatTagEnum = @compileError("'acmFormatTagEnum' requires that UNICODE be set to true or false in the root module");
        pub const acmFormatDetails = @compileError("'acmFormatDetails' requires that UNICODE be set to true or false in the root module");
        pub const acmFormatEnum = @compileError("'acmFormatEnum' requires that UNICODE be set to true or false in the root module");
        pub const acmFormatChoose = @compileError("'acmFormatChoose' requires that UNICODE be set to true or false in the root module");
        pub const acmFilterTagDetails = @compileError("'acmFilterTagDetails' requires that UNICODE be set to true or false in the root module");
        pub const acmFilterTagEnum = @compileError("'acmFilterTagEnum' requires that UNICODE be set to true or false in the root module");
        pub const acmFilterDetails = @compileError("'acmFilterDetails' requires that UNICODE be set to true or false in the root module");
        pub const acmFilterEnum = @compileError("'acmFilterEnum' requires that UNICODE be set to true or false in the root module");
        pub const acmFilterChoose = @compileError("'acmFilterChoose' requires that UNICODE be set to true or false in the root module");
        pub const AVIFileOpen = @compileError("'AVIFileOpen' requires that UNICODE be set to true or false in the root module");
        pub const AVIFileInfo = @compileError("'AVIFileInfo' requires that UNICODE be set to true or false in the root module");
        pub const AVIFileCreateStream = @compileError("'AVIFileCreateStream' requires that UNICODE be set to true or false in the root module");
        pub const AVIStreamInfo = @compileError("'AVIStreamInfo' requires that UNICODE be set to true or false in the root module");
        pub const AVIStreamOpenFromFile = @compileError("'AVIStreamOpenFromFile' requires that UNICODE be set to true or false in the root module");
        pub const AVISave = @compileError("'AVISave' requires that UNICODE be set to true or false in the root module");
        pub const AVISaveV = @compileError("'AVISaveV' requires that UNICODE be set to true or false in the root module");
        pub const AVIBuildFilter = @compileError("'AVIBuildFilter' requires that UNICODE be set to true or false in the root module");
        pub const EditStreamSetName = @compileError("'EditStreamSetName' requires that UNICODE be set to true or false in the root module");
        pub const EditStreamSetInfo = @compileError("'EditStreamSetInfo' requires that UNICODE be set to true or false in the root module");
        pub const MCIWndCreate = @compileError("'MCIWndCreate' requires that UNICODE be set to true or false in the root module");
        pub const capCreateCaptureWindow = @compileError("'capCreateCaptureWindow' requires that UNICODE be set to true or false in the root module");
        pub const capGetDriverDescription = @compileError("'capGetDriverDescription' requires that UNICODE be set to true or false in the root module");
        pub const GetOpenFileNamePreview = @compileError("'GetOpenFileNamePreview' requires that UNICODE be set to true or false in the root module");
        pub const GetSaveFileNamePreview = @compileError("'GetSaveFileNamePreview' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (27)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const LPARAM = @import("windows_and_messaging.zig").LPARAM;
const HDC = @import("gdi.zig").HDC;
const HINSTANCE = @import("system_services.zig").HINSTANCE;
const JOYREGHWVALUES = @import("hid.zig").JOYREGHWVALUES;
const OPENFILENAMEA = @import("windows_and_messaging.zig").OPENFILENAMEA;
const HRESULT = @import("com.zig").HRESULT;
const BITMAPINFOHEADER = @import("direct_show.zig").BITMAPINFOHEADER;
const BOOL = @import("system_services.zig").BOOL;
const LRESULT = @import("system_services.zig").LRESULT;
const WPARAM = @import("windows_and_messaging.zig").WPARAM;
const HPALETTE = @import("gdi.zig").HPALETTE;
const HTASK = @import("core_audio.zig").HTASK;
const FARPROC = @import("system_services.zig").FARPROC;
const OPENFILENAMEW = @import("windows_and_messaging.zig").OPENFILENAMEW;
const HICON = @import("menus_and_resources.zig").HICON;
const PWSTR = @import("system_services.zig").PWSTR;
const IUnknown = @import("com.zig").IUnknown;
const LPTIMECALLBACK = @import("system_services.zig").LPTIMECALLBACK;
const PSTR = @import("system_services.zig").PSTR;
const RECT = @import("display_devices.zig").RECT;
const HWND = @import("windows_and_messaging.zig").HWND;
const BITMAPINFO = @import("gdi.zig").BITMAPINFO;
const IPersistFile = @import("com.zig").IPersistFile;
const PALETTEENTRY = @import("gdi.zig").PALETTEENTRY;
const HANDLE = @import("system_services.zig").HANDLE;
const POINT = @import("display_devices.zig").POINT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = DRVCALLBACK;
    _ = LPDRVCALLBACK;
    _ = PDRVCALLBACK;
    _ = DRIVERPROC;
    _ = DRIVERMSGPROC;
    _ = MMIOPROC;
    _ = LPMMIOPROC;
    _ = WAVECALLBACK;
    _ = LPWAVECALLBACK;
    _ = MIDICALLBACK;
    _ = LPMIDICALLBACK;
    _ = ACMDRIVERENUMCB;
    _ = ACMDRIVERPROC;
    _ = LPACMDRIVERPROC;
    _ = ACMFORMATTAGENUMCBA;
    _ = ACMFORMATTAGENUMCBW;
    _ = ACMFORMATENUMCBA;
    _ = ACMFORMATENUMCBW;
    _ = ACMFORMATCHOOSEHOOKPROCA;
    _ = ACMFORMATCHOOSEHOOKPROCW;
    _ = ACMFILTERTAGENUMCBA;
    _ = ACMFILTERTAGENUMCBW;
    _ = ACMFILTERENUMCBA;
    _ = ACMFILTERENUMCBW;
    _ = ACMFILTERCHOOSEHOOKPROCA;
    _ = ACMFILTERCHOOSEHOOKPROCW;
    _ = AVISAVECALLBACK;
    _ = CAPYIELDCALLBACK;
    _ = CAPSTATUSCALLBACKW;
    _ = CAPERRORCALLBACKW;
    _ = CAPSTATUSCALLBACKA;
    _ = CAPERRORCALLBACKA;
    _ = CAPVIDEOCALLBACK;
    _ = CAPWAVECALLBACK;
    _ = CAPCONTROLCALLBACK;
    _ = JOYDEVMSGPROC;
    _ = LPJOYDEVMSGPROC;
    _ = TASKCALLBACK;
    _ = LPTASKCALLBACK;

    const constant_export_count = 2917;
    const type_export_count = 255;
    const enum_value_export_count = 25;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 3;
    const func_export_count = 305;
    const unicode_alias_count = 94;
    const import_count = 27;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

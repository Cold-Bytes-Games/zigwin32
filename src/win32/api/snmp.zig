//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (20)
//--------------------------------------------------------------------------------
pub const AsnOctetString = extern struct {
    stream: *u8,
    length: u32,
    dynamic: BOOL,
};

pub const AsnObjectIdentifier = extern struct {
    idLength: u32,
    ids: *u32,
};

pub const AsnAny = extern struct {
    asnType: u8,
    asnValue: AsnAny._asnValue_e__Union,
    const _asnValue_e__Union = u32; // TODO: generate this nested type!
};

pub const SnmpVarBind = extern struct {
    name: AsnObjectIdentifier,
    value: AsnAny,
};

pub const SnmpVarBindList = extern struct {
    list: *SnmpVarBind,
    len: u32,
};

pub const PFNSNMPEXTENSIONINIT = fn(
    dwUpTimeReference: u32,
    phSubagentTrapEvent: *HANDLE,
    pFirstSupportedRegion: *AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFNSNMPEXTENSIONINITEX = fn(
    pNextSupportedRegion: *AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFNSNMPEXTENSIONMONITOR = fn(
    pAgentMgmtData: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFNSNMPEXTENSIONQUERY = fn(
    bPduType: u8,
    pVarBindList: *SnmpVarBindList,
    pErrorStatus: *i32,
    pErrorIndex: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFNSNMPEXTENSIONQUERYEX = fn(
    nRequestType: u32,
    nTransactionId: u32,
    pVarBindList: *SnmpVarBindList,
    pContextInfo: *AsnOctetString,
    pErrorStatus: *i32,
    pErrorIndex: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFNSNMPEXTENSIONTRAP = fn(
    pEnterpriseOid: *AsnObjectIdentifier,
    pGenericTrapId: *i32,
    pSpecificTrapId: *i32,
    pTimeStamp: *u32,
    pVarBindList: *SnmpVarBindList,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFNSNMPEXTENSIONCLOSE = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const smiOCTETS = extern struct {
    len: u32,
    ptr: *u8,
};

pub const smiOID = extern struct {
    len: u32,
    ptr: *u32,
};

pub const smiCNTR64 = extern struct {
    hipart: u32,
    lopart: u32,
};

pub const smiVALUE = extern struct {
    syntax: u32,
    value: smiVALUE._value_e__Union,
    const _value_e__Union = u32; // TODO: generate this nested type!
};

pub const smiVENDORINFO = extern struct {
    vendorName: [64]i8,
    vendorContact: [64]i8,
    vendorVersionId: [32]i8,
    vendorVersionDate: [32]i8,
    vendorEnterprise: u32,
};

pub const SNMPAPI_CALLBACK = fn(
    hSession: ?*c_void,
    hWnd: HWND,
    wMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    lpClientData: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFNSNMPSTARTUPEX = fn(
    param0: *u32,
    param1: *u32,
    param2: *u32,
    param3: *u32,
    param4: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFNSNMPCLEANUPEX = fn(
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Functions (84)
//--------------------------------------------------------------------------------
pub extern "snmpapi" fn SnmpUtilOidCpy(
    pOidDst: *AsnObjectIdentifier,
    pOidSrc: *AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilOidAppend(
    pOidDst: *AsnObjectIdentifier,
    pOidSrc: *AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilOidNCmp(
    pOid1: *AsnObjectIdentifier,
    pOid2: *AsnObjectIdentifier,
    nSubIds: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilOidCmp(
    pOid1: *AsnObjectIdentifier,
    pOid2: *AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilOidFree(
    pOid: *AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpUtilOctetsCmp(
    pOctets1: *AsnOctetString,
    pOctets2: *AsnOctetString,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilOctetsNCmp(
    pOctets1: *AsnOctetString,
    pOctets2: *AsnOctetString,
    nChars: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilOctetsCpy(
    pOctetsDst: *AsnOctetString,
    pOctetsSrc: *AsnOctetString,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilOctetsFree(
    pOctets: *AsnOctetString,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpUtilAsnAnyCpy(
    pAnyDst: *AsnAny,
    pAnySrc: *AsnAny,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilAsnAnyFree(
    pAny: *AsnAny,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpUtilVarBindCpy(
    pVbDst: *SnmpVarBind,
    pVbSrc: *SnmpVarBind,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilVarBindFree(
    pVb: *SnmpVarBind,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpUtilVarBindListCpy(
    pVblDst: *SnmpVarBindList,
    pVblSrc: *SnmpVarBindList,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilVarBindListFree(
    pVbl: *SnmpVarBindList,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpUtilMemFree(
    pMem: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpUtilMemAlloc(
    nBytes: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "snmpapi" fn SnmpUtilMemReAlloc(
    pMem: *c_void,
    nBytes: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "snmpapi" fn SnmpUtilOidToA(
    Oid: *AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "snmpapi" fn SnmpUtilIdsToA(
    Ids: *u32,
    IdLength: u32,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "snmpapi" fn SnmpUtilPrintOid(
    Oid: *AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpUtilPrintAsnAny(
    pAny: *AsnAny,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpSvcGetUptime(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "snmpapi" fn SnmpSvcSetLogLevel(
    nLogLevel: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpSvcSetLogType(
    nLogType: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpUtilDbgPrint(
    nLogLevel: i32,
    szFormat: PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "mgmtapi" fn SnmpMgrOpen(
    lpAgentAddress: ?PSTR,
    lpAgentCommunity: ?PSTR,
    nTimeOut: i32,
    nRetries: i32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "mgmtapi" fn SnmpMgrCtl(
    session: *c_void,
    dwCtlCode: u32,
    lpvInBuffer: *c_void,
    cbInBuffer: u32,
    lpvOUTBuffer: *c_void,
    cbOUTBuffer: u32,
    lpcbBytesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mgmtapi" fn SnmpMgrClose(
    session: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mgmtapi" fn SnmpMgrRequest(
    session: *c_void,
    requestType: u8,
    variableBindings: *SnmpVarBindList,
    errorStatus: *i32,
    errorIndex: *i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "mgmtapi" fn SnmpMgrStrToOid(
    string: ?PSTR,
    oid: *AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mgmtapi" fn SnmpMgrOidToStr(
    oid: *AsnObjectIdentifier,
    string: ?*?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mgmtapi" fn SnmpMgrTrapListen(
    phTrapAvailable: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mgmtapi" fn SnmpMgrGetTrap(
    enterprise: *AsnObjectIdentifier,
    IPAddress: *AsnOctetString,
    genericTrap: *i32,
    specificTrap: *i32,
    timeStamp: *u32,
    variableBindings: *SnmpVarBindList,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mgmtapi" fn SnmpMgrGetTrapEx(
    enterprise: *AsnObjectIdentifier,
    agentAddress: *AsnOctetString,
    sourceAddress: *AsnOctetString,
    genericTrap: *i32,
    specificTrap: *i32,
    community: *AsnOctetString,
    timeStamp: *u32,
    variableBindings: *SnmpVarBindList,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wsnmp32" fn SnmpGetTranslateMode(
    nTranslateMode: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpSetTranslateMode(
    nTranslateMode: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpGetRetransmitMode(
    nRetransmitMode: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpSetRetransmitMode(
    nRetransmitMode: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpGetTimeout(
    hEntity: ?*c_void,
    nPolicyTimeout: *u32,
    nActualTimeout: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpSetTimeout(
    hEntity: ?*c_void,
    nPolicyTimeout: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpGetRetry(
    hEntity: ?*c_void,
    nPolicyRetry: *u32,
    nActualRetry: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpSetRetry(
    hEntity: ?*c_void,
    nPolicyRetry: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpGetVendorInfo(
    vendorInfo: *smiVENDORINFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpStartup(
    nMajorVersion: *u32,
    nMinorVersion: *u32,
    nLevel: *u32,
    nTranslateMode: *u32,
    nRetransmitMode: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpCleanup(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpOpen(
    hWnd: HWND,
    wMsg: u32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wsnmp32" fn SnmpClose(
    session: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpSendMsg(
    session: ?*c_void,
    srcEntity: ?*c_void,
    dstEntity: ?*c_void,
    context: ?*c_void,
    PDU: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpRecvMsg(
    session: ?*c_void,
    srcEntity: *?*c_void,
    dstEntity: *?*c_void,
    context: *?*c_void,
    PDU: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpRegister(
    session: ?*c_void,
    srcEntity: ?*c_void,
    dstEntity: ?*c_void,
    context: ?*c_void,
    notification: *smiOID,
    state: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpCreateSession(
    hWnd: HWND,
    wMsg: u32,
    fCallBack: SNMPAPI_CALLBACK,
    lpClientData: *c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wsnmp32" fn SnmpListen(
    hEntity: ?*c_void,
    lStatus: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpListenEx(
    hEntity: ?*c_void,
    lStatus: u32,
    nUseEntityAddr: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpCancelMsg(
    session: ?*c_void,
    reqId: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpStartupEx(
    nMajorVersion: *u32,
    nMinorVersion: *u32,
    nLevel: *u32,
    nTranslateMode: *u32,
    nRetransmitMode: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpCleanupEx(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpStrToEntity(
    session: ?*c_void,
    string: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wsnmp32" fn SnmpEntityToStr(
    entity: ?*c_void,
    size: u32,
    string: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpFreeEntity(
    entity: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpStrToContext(
    session: ?*c_void,
    string: *smiOCTETS,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wsnmp32" fn SnmpContextToStr(
    context: ?*c_void,
    string: *smiOCTETS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpFreeContext(
    context: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpSetPort(
    hEntity: ?*c_void,
    nPort: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpCreatePdu(
    session: ?*c_void,
    PDU_type: i32,
    request_id: i32,
    error_status: i32,
    error_index: i32,
    varbindlist: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wsnmp32" fn SnmpGetPduData(
    PDU: ?*c_void,
    PDU_type: *i32,
    request_id: *i32,
    error_status: *i32,
    error_index: *i32,
    varbindlist: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpSetPduData(
    PDU: ?*c_void,
    PDU_type: *const i32,
    request_id: *const i32,
    non_repeaters: *const i32,
    max_repetitions: *const i32,
    varbindlist: *const ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpDuplicatePdu(
    session: ?*c_void,
    PDU: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wsnmp32" fn SnmpFreePdu(
    PDU: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpCreateVbl(
    session: ?*c_void,
    name: *smiOID,
    value: *smiVALUE,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wsnmp32" fn SnmpDuplicateVbl(
    session: ?*c_void,
    vbl: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wsnmp32" fn SnmpFreeVbl(
    vbl: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpCountVbl(
    vbl: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpGetVb(
    vbl: ?*c_void,
    index: u32,
    name: *smiOID,
    value: *smiVALUE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpSetVb(
    vbl: ?*c_void,
    index: u32,
    name: *smiOID,
    value: *smiVALUE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpDeleteVb(
    vbl: ?*c_void,
    index: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpGetLastError(
    session: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpStrToOid(
    string: [*:0]const u8,
    dstOID: *smiOID,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpOidToStr(
    srcOID: *smiOID,
    size: u32,
    string: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpOidCopy(
    srcOID: *smiOID,
    dstOID: *smiOID,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpOidCompare(
    xOID: *smiOID,
    yOID: *smiOID,
    maxlen: u32,
    result: *i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpEncodeMsg(
    session: ?*c_void,
    srcEntity: ?*c_void,
    dstEntity: ?*c_void,
    context: ?*c_void,
    pdu: ?*c_void,
    msgBufDesc: *smiOCTETS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpDecodeMsg(
    session: ?*c_void,
    srcEntity: *?*c_void,
    dstEntity: *?*c_void,
    context: *?*c_void,
    pdu: *?*c_void,
    msgBufDesc: *smiOCTETS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpFreeDescriptor(
    syntax: u32,
    descriptor: *smiOCTETS,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const LPARAM = @import("windows_and_messaging.zig").LPARAM;
const WPARAM = @import("windows_and_messaging.zig").WPARAM;
const HANDLE = @import("system_services.zig").HANDLE;
const PSTR = @import("system_services.zig").PSTR;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = PFNSNMPEXTENSIONINIT;
    _ = PFNSNMPEXTENSIONINITEX;
    _ = PFNSNMPEXTENSIONMONITOR;
    _ = PFNSNMPEXTENSIONQUERY;
    _ = PFNSNMPEXTENSIONQUERYEX;
    _ = PFNSNMPEXTENSIONTRAP;
    _ = PFNSNMPEXTENSIONCLOSE;
    _ = SNMPAPI_CALLBACK;
    _ = PFNSNMPSTARTUPEX;
    _ = PFNSNMPCLEANUPEX;

    const constant_export_count = 0;
    const type_export_count = 20;
    const enum_value_export_count = 0;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 84;
    const unicode_alias_count = 0;
    const import_count = 6;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

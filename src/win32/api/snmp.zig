//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (90)
//--------------------------------------------------------------------------------
pub const ASN_UNIVERSAL : u32 = 0;
pub const ASN_APPLICATION : u32 = 64;
pub const ASN_CONTEXT : u32 = 128;
pub const ASN_PRIVATE : u32 = 192;
pub const ASN_PRIMITIVE : u32 = 0;
pub const ASN_CONSTRUCTOR : u32 = 32;
pub const SNMP_ACCESS_NONE : u32 = 0;
pub const SNMP_ACCESS_NOTIFY : u32 = 1;
pub const SNMP_ACCESS_READ_ONLY : u32 = 2;
pub const SNMP_ACCESS_READ_WRITE : u32 = 3;
pub const SNMP_ACCESS_READ_CREATE : u32 = 4;
pub const SNMPAPI_NOERROR : u32 = 1;
pub const SNMPAPI_ERROR : u32 = 0;
pub const SNMP_OUTPUT_TO_EVENTLOG : u32 = 4;
pub const DEFAULT_SNMP_PORT_UDP : u32 = 161;
pub const DEFAULT_SNMP_PORT_IPX : u32 = 36879;
pub const DEFAULT_SNMPTRAP_PORT_UDP : u32 = 162;
pub const DEFAULT_SNMPTRAP_PORT_IPX : u32 = 36880;
pub const SNMP_MAX_OID_LEN : u32 = 128;
pub const SNMP_MEM_ALLOC_ERROR : u32 = 1;
pub const SNMP_BERAPI_INVALID_LENGTH : u32 = 10;
pub const SNMP_BERAPI_INVALID_TAG : u32 = 11;
pub const SNMP_BERAPI_OVERFLOW : u32 = 12;
pub const SNMP_BERAPI_SHORT_BUFFER : u32 = 13;
pub const SNMP_BERAPI_INVALID_OBJELEM : u32 = 14;
pub const SNMP_PDUAPI_UNRECOGNIZED_PDU : u32 = 20;
pub const SNMP_PDUAPI_INVALID_ES : u32 = 21;
pub const SNMP_PDUAPI_INVALID_GT : u32 = 22;
pub const SNMP_AUTHAPI_INVALID_VERSION : u32 = 30;
pub const SNMP_AUTHAPI_INVALID_MSG_TYPE : u32 = 31;
pub const SNMP_AUTHAPI_TRIV_AUTH_FAILED : u32 = 32;
pub const SNMP_MGMTAPI_TIMEOUT : u32 = 40;
pub const SNMP_MGMTAPI_SELECT_FDERRORS : u32 = 41;
pub const SNMP_MGMTAPI_TRAP_ERRORS : u32 = 42;
pub const SNMP_MGMTAPI_TRAP_DUPINIT : u32 = 43;
pub const SNMP_MGMTAPI_NOTRAPS : u32 = 44;
pub const SNMP_MGMTAPI_AGAIN : u32 = 45;
pub const SNMP_MGMTAPI_INVALID_CTL : u32 = 46;
pub const SNMP_MGMTAPI_INVALID_SESSION : u32 = 47;
pub const SNMP_MGMTAPI_INVALID_BUFFER : u32 = 48;
pub const MGMCTL_SETAGENTPORT : u32 = 1;
pub const MAXOBJIDSIZE : u32 = 128;
pub const MAXOBJIDSTRSIZE : u32 = 1408;
pub const SNMPLISTEN_USEENTITY_ADDR : u32 = 0;
pub const SNMPLISTEN_ALL_ADDR : u32 = 1;
pub const SNMP_TRAP_COLDSTART : u32 = 0;
pub const SNMP_TRAP_WARMSTART : u32 = 1;
pub const SNMP_TRAP_LINKDOWN : u32 = 2;
pub const SNMP_TRAP_LINKUP : u32 = 3;
pub const SNMP_TRAP_AUTHFAIL : u32 = 4;
pub const SNMP_TRAP_EGPNEIGHBORLOSS : u32 = 5;
pub const SNMP_TRAP_ENTERPRISESPECIFIC : u32 = 6;
pub const SNMPAPI_NO_SUPPORT : u32 = 0;
pub const SNMPAPI_V1_SUPPORT : u32 = 1;
pub const SNMPAPI_V2_SUPPORT : u32 = 2;
pub const SNMPAPI_M2M_SUPPORT : u32 = 3;
pub const SNMPAPI_FAILURE : u32 = 0;
pub const SNMPAPI_SUCCESS : u32 = 1;
pub const SNMPAPI_ALLOC_ERROR : u32 = 2;
pub const SNMPAPI_CONTEXT_INVALID : u32 = 3;
pub const SNMPAPI_CONTEXT_UNKNOWN : u32 = 4;
pub const SNMPAPI_ENTITY_INVALID : u32 = 5;
pub const SNMPAPI_ENTITY_UNKNOWN : u32 = 6;
pub const SNMPAPI_INDEX_INVALID : u32 = 7;
pub const SNMPAPI_NOOP : u32 = 8;
pub const SNMPAPI_OID_INVALID : u32 = 9;
pub const SNMPAPI_OPERATION_INVALID : u32 = 10;
pub const SNMPAPI_OUTPUT_TRUNCATED : u32 = 11;
pub const SNMPAPI_PDU_INVALID : u32 = 12;
pub const SNMPAPI_SESSION_INVALID : u32 = 13;
pub const SNMPAPI_SYNTAX_INVALID : u32 = 14;
pub const SNMPAPI_VBL_INVALID : u32 = 15;
pub const SNMPAPI_MODE_INVALID : u32 = 16;
pub const SNMPAPI_SIZE_INVALID : u32 = 17;
pub const SNMPAPI_NOT_INITIALIZED : u32 = 18;
pub const SNMPAPI_MESSAGE_INVALID : u32 = 19;
pub const SNMPAPI_HWND_INVALID : u32 = 20;
pub const SNMPAPI_OTHER_ERROR : u32 = 99;
pub const SNMPAPI_TL_NOT_INITIALIZED : u32 = 100;
pub const SNMPAPI_TL_NOT_SUPPORTED : u32 = 101;
pub const SNMPAPI_TL_NOT_AVAILABLE : u32 = 102;
pub const SNMPAPI_TL_RESOURCE_ERROR : u32 = 103;
pub const SNMPAPI_TL_UNDELIVERABLE : u32 = 104;
pub const SNMPAPI_TL_SRC_INVALID : u32 = 105;
pub const SNMPAPI_TL_INVALID_PARAM : u32 = 106;
pub const SNMPAPI_TL_IN_USE : u32 = 107;
pub const SNMPAPI_TL_TIMEOUT : u32 = 108;
pub const SNMPAPI_TL_PDU_TOO_BIG : u32 = 109;
pub const SNMPAPI_TL_OTHER : u32 = 199;
pub const MAXVENDORINFO : u32 = 32;

//--------------------------------------------------------------------------------
// Section: Types (30)
//--------------------------------------------------------------------------------
pub const SNMP_PDU_TYPE = extern enum(u32) {
    GET = 160,
    GETNEXT = 161,
    RESPONSE = 162,
    SET = 163,
    GETBULK = 165,
    TRAP = 167,
};
pub const SNMP_PDU_GET = SNMP_PDU_TYPE.GET;
pub const SNMP_PDU_GETNEXT = SNMP_PDU_TYPE.GETNEXT;
pub const SNMP_PDU_RESPONSE = SNMP_PDU_TYPE.RESPONSE;
pub const SNMP_PDU_SET = SNMP_PDU_TYPE.SET;
pub const SNMP_PDU_GETBULK = SNMP_PDU_TYPE.GETBULK;
pub const SNMP_PDU_TRAP = SNMP_PDU_TYPE.TRAP;

pub const SNMP_EXTENSION_REQUEST_TYPE = extern enum(u32) {
    GET = 160,
    GET_NEXT = 161,
    SET_TEST = 224,
    SET_COMMIT = 163,
    SET_UNDO = 225,
    SET_CLEANUP = 226,
};
pub const SNMP_EXTENSION_GET = SNMP_EXTENSION_REQUEST_TYPE.GET;
pub const SNMP_EXTENSION_GET_NEXT = SNMP_EXTENSION_REQUEST_TYPE.GET_NEXT;
pub const SNMP_EXTENSION_SET_TEST = SNMP_EXTENSION_REQUEST_TYPE.SET_TEST;
pub const SNMP_EXTENSION_SET_COMMIT = SNMP_EXTENSION_REQUEST_TYPE.SET_COMMIT;
pub const SNMP_EXTENSION_SET_UNDO = SNMP_EXTENSION_REQUEST_TYPE.SET_UNDO;
pub const SNMP_EXTENSION_SET_CLEANUP = SNMP_EXTENSION_REQUEST_TYPE.SET_CLEANUP;

pub const AS_ANY_TYPE = extern enum(u32) {
    ASN_INTEGER = 2,
    ASN_INTEGER32 = 2,
    ASN_UNSIGNED32 = 71,
    ASN_COUNTER64 = 70,
    ASN_OCTETSTRING = 4,
    ASN_BITS = 3,
    ASN_OBJECTIDENTIFIER = 6,
    ASN_SEQUENCE = 48,
    __no_name__ = 49,
    ASN_IPADDRESS = 64,
    ASN_COUNTER32 = 65,
    ASN_GAUGE32 = 66,
    ASN_TIMETICKS = 67,
    ASN_OPAQUE = 68,
    SNMP_EXCEPTION_NOSUCHOBJECT = 128,
    SNMP_EXCEPTION_NOSUCHINSTANCE = 129,
    SNMP_EXCEPTION_ENDOFMIBVIEW = 130,
};
// TODO: enum 'AS_ANY_TYPE' has known issues with its value aliases

pub const Snmp_nTranslateMode = extern enum(u32) {
    TRANSLATED = 0,
    UNTRANSLATED_V1 = 1,
    UNTRANSLATED_V2 = 2,
};
pub const SNMPAPI_TRANSLATED = Snmp_nTranslateMode.TRANSLATED;
pub const SNMPAPI_UNTRANSLATED_V1 = Snmp_nTranslateMode.UNTRANSLATED_V1;
pub const SNMPAPI_UNTRANSLATED_V2 = Snmp_nTranslateMode.UNTRANSLATED_V2;

pub const SNMP_GENERICTRAP = extern enum(u32) {
    COLDSTART = 0,
    WARMSTART = 1,
    LINKDOWN = 2,
    LINKUP = 3,
    AUTHFAILURE = 4,
    EGPNEIGHLOSS = 5,
    ENTERSPECIFIC = 6,
};
pub const SNMP_GENERICTRAP_COLDSTART = SNMP_GENERICTRAP.COLDSTART;
pub const SNMP_GENERICTRAP_WARMSTART = SNMP_GENERICTRAP.WARMSTART;
pub const SNMP_GENERICTRAP_LINKDOWN = SNMP_GENERICTRAP.LINKDOWN;
pub const SNMP_GENERICTRAP_LINKUP = SNMP_GENERICTRAP.LINKUP;
pub const SNMP_GENERICTRAP_AUTHFAILURE = SNMP_GENERICTRAP.AUTHFAILURE;
pub const SNMP_GENERICTRAP_EGPNEIGHLOSS = SNMP_GENERICTRAP.EGPNEIGHLOSS;
pub const SNMP_GENERICTRAP_ENTERSPECIFIC = SNMP_GENERICTRAP.ENTERSPECIFIC;

pub const SnmpExtensionQueryEx_pErrorStatusFlags = extern enum(u32) {
    NOERROR = 0,
    TOOBIG = 1,
    NOSUCHNAME = 2,
    BADVALUE = 3,
    READONLY = 4,
    GENERR = 5,
    NOACCESS = 6,
    WRONGTYPE = 7,
    WRONGLENGTH = 8,
    WRONGENCODING = 9,
    WRONGVALUE = 10,
    NOCREATION = 11,
    INCONSISTENTVALUE = 12,
    RESOURCEUNAVAILABLE = 13,
    COMMITFAILED = 14,
    UNDOFAILED = 15,
    AUTHORIZATIONERROR = 16,
    NOTWRITABLE = 17,
    INCONSISTENTNAME = 18,
};
pub const SNMP_ERRORSTATUS_NOERROR = SnmpExtensionQueryEx_pErrorStatusFlags.NOERROR;
pub const SNMP_ERRORSTATUS_TOOBIG = SnmpExtensionQueryEx_pErrorStatusFlags.TOOBIG;
pub const SNMP_ERRORSTATUS_NOSUCHNAME = SnmpExtensionQueryEx_pErrorStatusFlags.NOSUCHNAME;
pub const SNMP_ERRORSTATUS_BADVALUE = SnmpExtensionQueryEx_pErrorStatusFlags.BADVALUE;
pub const SNMP_ERRORSTATUS_READONLY = SnmpExtensionQueryEx_pErrorStatusFlags.READONLY;
pub const SNMP_ERRORSTATUS_GENERR = SnmpExtensionQueryEx_pErrorStatusFlags.GENERR;
pub const SNMP_ERRORSTATUS_NOACCESS = SnmpExtensionQueryEx_pErrorStatusFlags.NOACCESS;
pub const SNMP_ERRORSTATUS_WRONGTYPE = SnmpExtensionQueryEx_pErrorStatusFlags.WRONGTYPE;
pub const SNMP_ERRORSTATUS_WRONGLENGTH = SnmpExtensionQueryEx_pErrorStatusFlags.WRONGLENGTH;
pub const SNMP_ERRORSTATUS_WRONGENCODING = SnmpExtensionQueryEx_pErrorStatusFlags.WRONGENCODING;
pub const SNMP_ERRORSTATUS_WRONGVALUE = SnmpExtensionQueryEx_pErrorStatusFlags.WRONGVALUE;
pub const SNMP_ERRORSTATUS_NOCREATION = SnmpExtensionQueryEx_pErrorStatusFlags.NOCREATION;
pub const SNMP_ERRORSTATUS_INCONSISTENTVALUE = SnmpExtensionQueryEx_pErrorStatusFlags.INCONSISTENTVALUE;
pub const SNMP_ERRORSTATUS_RESOURCEUNAVAILABLE = SnmpExtensionQueryEx_pErrorStatusFlags.RESOURCEUNAVAILABLE;
pub const SNMP_ERRORSTATUS_COMMITFAILED = SnmpExtensionQueryEx_pErrorStatusFlags.COMMITFAILED;
pub const SNMP_ERRORSTATUS_UNDOFAILED = SnmpExtensionQueryEx_pErrorStatusFlags.UNDOFAILED;
pub const SNMP_ERRORSTATUS_AUTHORIZATIONERROR = SnmpExtensionQueryEx_pErrorStatusFlags.AUTHORIZATIONERROR;
pub const SNMP_ERRORSTATUS_NOTWRITABLE = SnmpExtensionQueryEx_pErrorStatusFlags.NOTWRITABLE;
pub const SNMP_ERRORSTATUS_INCONSISTENTNAME = SnmpExtensionQueryEx_pErrorStatusFlags.INCONSISTENTNAME;

pub const Snmp_lStatus = extern enum(u32) {
    N = 1,
    FF = 0,
};
pub const SNMPAPI_ON = Snmp_lStatus.N;
pub const SNMPAPI_OFF = Snmp_lStatus.FF;

pub const SnmpSvcSetLogType_nLogTypeFlags = extern enum(u32) {
    CONSOLE = 1,
    LOGFILE = 2,
    DEBUGGER = 8,
};
pub const SNMP_OUTPUT_TO_CONSOLE = SnmpSvcSetLogType_nLogTypeFlags.CONSOLE;
pub const SNMP_OUTPUT_TO_LOGFILE = SnmpSvcSetLogType_nLogTypeFlags.LOGFILE;
pub const SNMP_OUTPUT_TO_DEBUGGER = SnmpSvcSetLogType_nLogTypeFlags.DEBUGGER;

pub const SNMP_LOG = extern enum(u32) {
    SILENT = 0,
    FATAL = 1,
    ERROR = 2,
    WARNING = 3,
    TRACE = 4,
    VERBOSE = 5,
};
pub const SNMP_LOG_SILENT = SNMP_LOG.SILENT;
pub const SNMP_LOG_FATAL = SNMP_LOG.FATAL;
pub const SNMP_LOG_ERROR = SNMP_LOG.ERROR;
pub const SNMP_LOG_WARNING = SNMP_LOG.WARNING;
pub const SNMP_LOG_TRACE = SNMP_LOG.TRACE;
pub const SNMP_LOG_VERBOSE = SNMP_LOG.VERBOSE;

pub const SnmpGetPduData_error_statusFlags = extern enum(u32) {
    NOERROR = 0,
    TOOBIG = 1,
    NOSUCHNAME = 2,
    BADVALUE = 3,
    READONLY = 4,
    GENERR = 5,
    NOACCESS = 6,
    WRONGTYPE = 7,
    WRONGLENGTH = 8,
    WRONGENCODING = 9,
    WRONGVALUE = 10,
    NOCREATION = 11,
    INCONSISTENTVALUE = 12,
    RESOURCEUNAVAILABLE = 13,
    COMMITFAILED = 14,
    UNDOFAILED = 15,
    AUTHORIZATIONERROR = 16,
    NOTWRITABLE = 17,
    INCONSISTENTNAME = 18,
};
pub const SNMP_ERROR_NOERROR = SnmpGetPduData_error_statusFlags.NOERROR;
pub const SNMP_ERROR_TOOBIG = SnmpGetPduData_error_statusFlags.TOOBIG;
pub const SNMP_ERROR_NOSUCHNAME = SnmpGetPduData_error_statusFlags.NOSUCHNAME;
pub const SNMP_ERROR_BADVALUE = SnmpGetPduData_error_statusFlags.BADVALUE;
pub const SNMP_ERROR_READONLY = SnmpGetPduData_error_statusFlags.READONLY;
pub const SNMP_ERROR_GENERR = SnmpGetPduData_error_statusFlags.GENERR;
pub const SNMP_ERROR_NOACCESS = SnmpGetPduData_error_statusFlags.NOACCESS;
pub const SNMP_ERROR_WRONGTYPE = SnmpGetPduData_error_statusFlags.WRONGTYPE;
pub const SNMP_ERROR_WRONGLENGTH = SnmpGetPduData_error_statusFlags.WRONGLENGTH;
pub const SNMP_ERROR_WRONGENCODING = SnmpGetPduData_error_statusFlags.WRONGENCODING;
pub const SNMP_ERROR_WRONGVALUE = SnmpGetPduData_error_statusFlags.WRONGVALUE;
pub const SNMP_ERROR_NOCREATION = SnmpGetPduData_error_statusFlags.NOCREATION;
pub const SNMP_ERROR_INCONSISTENTVALUE = SnmpGetPduData_error_statusFlags.INCONSISTENTVALUE;
pub const SNMP_ERROR_RESOURCEUNAVAILABLE = SnmpGetPduData_error_statusFlags.RESOURCEUNAVAILABLE;
pub const SNMP_ERROR_COMMITFAILED = SnmpGetPduData_error_statusFlags.COMMITFAILED;
pub const SNMP_ERROR_UNDOFAILED = SnmpGetPduData_error_statusFlags.UNDOFAILED;
pub const SNMP_ERROR_AUTHORIZATIONERROR = SnmpGetPduData_error_statusFlags.AUTHORIZATIONERROR;
pub const SNMP_ERROR_NOTWRITABLE = SnmpGetPduData_error_statusFlags.NOTWRITABLE;
pub const SNMP_ERROR_INCONSISTENTNAME = SnmpGetPduData_error_statusFlags.INCONSISTENTNAME;

pub const AsnOctetString = extern struct {
    stream: *u8,
    length: u32,
    dynamic: BOOL,
};

pub const AsnObjectIdentifier = extern struct {
    idLength: u32,
    ids: *u32,
};

pub const AsnAny = extern struct {
    asnType: AS_ANY_TYPE,
    asnValue: AsnAny._asnValue_e__Union,
    const _asnValue_e__Union = u32; // TODO: generate this nested type!
};

pub const SnmpVarBind = extern struct {
    name: AsnObjectIdentifier,
    value: AsnAny,
};

pub const SnmpVarBindList = extern struct {
    list: *SnmpVarBind,
    len: u32,
};

pub const PFNSNMPEXTENSIONINIT = fn(
    dwUpTimeReference: u32,
    phSubagentTrapEvent: *HANDLE,
    pFirstSupportedRegion: *AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFNSNMPEXTENSIONINITEX = fn(
    pNextSupportedRegion: *AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFNSNMPEXTENSIONMONITOR = fn(
    pAgentMgmtData: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFNSNMPEXTENSIONQUERY = fn(
    bPduType: u8,
    pVarBindList: *SnmpVarBindList,
    pErrorStatus: *i32,
    pErrorIndex: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFNSNMPEXTENSIONQUERYEX = fn(
    nRequestType: u32,
    nTransactionId: u32,
    pVarBindList: *SnmpVarBindList,
    pContextInfo: *AsnOctetString,
    pErrorStatus: *i32,
    pErrorIndex: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFNSNMPEXTENSIONTRAP = fn(
    pEnterpriseOid: *AsnObjectIdentifier,
    pGenericTrapId: *i32,
    pSpecificTrapId: *i32,
    pTimeStamp: *u32,
    pVarBindList: *SnmpVarBindList,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFNSNMPEXTENSIONCLOSE = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const smiOCTETS = extern struct {
    len: u32,
    ptr: *u8,
};

pub const smiOID = extern struct {
    len: u32,
    ptr: *u32,
};

pub const smiCNTR64 = extern struct {
    hipart: u32,
    lopart: u32,
};

pub const smiVALUE = extern struct {
    syntax: u32,
    value: smiVALUE._value_e__Union,
    const _value_e__Union = u32; // TODO: generate this nested type!
};

pub const smiVENDORINFO = extern struct {
    vendorName: [64]i8,
    vendorContact: [64]i8,
    vendorVersionId: [32]i8,
    vendorVersionDate: [32]i8,
    vendorEnterprise: u32,
};

pub const SNMPAPI_CALLBACK = fn(
    hSession: ?*c_void,
    hWnd: HWND,
    wMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    lpClientData: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFNSNMPSTARTUPEX = fn(
    param0: *u32,
    param1: *u32,
    param2: *u32,
    param3: *u32,
    param4: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFNSNMPCLEANUPEX = fn(
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Functions (84)
//--------------------------------------------------------------------------------
pub extern "snmpapi" fn SnmpUtilOidCpy(
    pOidDst: *AsnObjectIdentifier,
    pOidSrc: *AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilOidAppend(
    pOidDst: *AsnObjectIdentifier,
    pOidSrc: *AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilOidNCmp(
    pOid1: *AsnObjectIdentifier,
    pOid2: *AsnObjectIdentifier,
    nSubIds: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilOidCmp(
    pOid1: *AsnObjectIdentifier,
    pOid2: *AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilOidFree(
    pOid: *AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpUtilOctetsCmp(
    pOctets1: *AsnOctetString,
    pOctets2: *AsnOctetString,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilOctetsNCmp(
    pOctets1: *AsnOctetString,
    pOctets2: *AsnOctetString,
    nChars: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilOctetsCpy(
    pOctetsDst: *AsnOctetString,
    pOctetsSrc: *AsnOctetString,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilOctetsFree(
    pOctets: *AsnOctetString,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpUtilAsnAnyCpy(
    pAnyDst: *AsnAny,
    pAnySrc: *AsnAny,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilAsnAnyFree(
    pAny: *AsnAny,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpUtilVarBindCpy(
    pVbDst: *SnmpVarBind,
    pVbSrc: *SnmpVarBind,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilVarBindFree(
    pVb: *SnmpVarBind,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpUtilVarBindListCpy(
    pVblDst: *SnmpVarBindList,
    pVblSrc: *SnmpVarBindList,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "snmpapi" fn SnmpUtilVarBindListFree(
    pVbl: *SnmpVarBindList,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpUtilMemFree(
    pMem: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpUtilMemAlloc(
    nBytes: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "snmpapi" fn SnmpUtilMemReAlloc(
    pMem: *c_void,
    nBytes: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "snmpapi" fn SnmpUtilOidToA(
    Oid: *AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "snmpapi" fn SnmpUtilIdsToA(
    Ids: *u32,
    IdLength: u32,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "snmpapi" fn SnmpUtilPrintOid(
    Oid: *AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpUtilPrintAsnAny(
    pAny: *AsnAny,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpSvcGetUptime(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "snmpapi" fn SnmpSvcSetLogLevel(
    nLogLevel: SNMP_LOG,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpSvcSetLogType(
    nLogType: SnmpSvcSetLogType_nLogTypeFlags,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "snmpapi" fn SnmpUtilDbgPrint(
    nLogLevel: SNMP_LOG,
    szFormat: PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "mgmtapi" fn SnmpMgrOpen(
    lpAgentAddress: ?PSTR,
    lpAgentCommunity: ?PSTR,
    nTimeOut: i32,
    nRetries: i32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "mgmtapi" fn SnmpMgrCtl(
    session: *c_void,
    dwCtlCode: u32,
    lpvInBuffer: *c_void,
    cbInBuffer: u32,
    lpvOUTBuffer: *c_void,
    cbOUTBuffer: u32,
    lpcbBytesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mgmtapi" fn SnmpMgrClose(
    session: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mgmtapi" fn SnmpMgrRequest(
    session: *c_void,
    requestType: SNMP_PDU_TYPE,
    variableBindings: *SnmpVarBindList,
    errorStatus: *SnmpExtensionQueryEx_pErrorStatusFlags,
    errorIndex: *i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "mgmtapi" fn SnmpMgrStrToOid(
    string: ?PSTR,
    oid: *AsnObjectIdentifier,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mgmtapi" fn SnmpMgrOidToStr(
    oid: *AsnObjectIdentifier,
    string: ?*?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mgmtapi" fn SnmpMgrTrapListen(
    phTrapAvailable: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mgmtapi" fn SnmpMgrGetTrap(
    enterprise: *AsnObjectIdentifier,
    IPAddress: *AsnOctetString,
    genericTrap: *SNMP_GENERICTRAP,
    specificTrap: *i32,
    timeStamp: *u32,
    variableBindings: *SnmpVarBindList,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mgmtapi" fn SnmpMgrGetTrapEx(
    enterprise: *AsnObjectIdentifier,
    agentAddress: *AsnOctetString,
    sourceAddress: *AsnOctetString,
    genericTrap: *SNMP_GENERICTRAP,
    specificTrap: *i32,
    community: *AsnOctetString,
    timeStamp: *u32,
    variableBindings: *SnmpVarBindList,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wsnmp32" fn SnmpGetTranslateMode(
    nTranslateMode: *Snmp_nTranslateMode,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpSetTranslateMode(
    nTranslateMode: Snmp_nTranslateMode,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpGetRetransmitMode(
    nRetransmitMode: *Snmp_lStatus,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpSetRetransmitMode(
    nRetransmitMode: Snmp_lStatus,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpGetTimeout(
    hEntity: ?*c_void,
    nPolicyTimeout: *u32,
    nActualTimeout: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpSetTimeout(
    hEntity: ?*c_void,
    nPolicyTimeout: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpGetRetry(
    hEntity: ?*c_void,
    nPolicyRetry: *u32,
    nActualRetry: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpSetRetry(
    hEntity: ?*c_void,
    nPolicyRetry: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpGetVendorInfo(
    vendorInfo: *smiVENDORINFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpStartup(
    nMajorVersion: *u32,
    nMinorVersion: *u32,
    nLevel: *u32,
    nTranslateMode: *Snmp_nTranslateMode,
    nRetransmitMode: *Snmp_lStatus,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpCleanup(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpOpen(
    hWnd: HWND,
    wMsg: u32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wsnmp32" fn SnmpClose(
    session: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpSendMsg(
    session: ?*c_void,
    srcEntity: ?*c_void,
    dstEntity: ?*c_void,
    context: ?*c_void,
    PDU: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpRecvMsg(
    session: ?*c_void,
    srcEntity: *?*c_void,
    dstEntity: *?*c_void,
    context: *?*c_void,
    PDU: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpRegister(
    session: ?*c_void,
    srcEntity: ?*c_void,
    dstEntity: ?*c_void,
    context: ?*c_void,
    notification: *smiOID,
    state: Snmp_lStatus,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpCreateSession(
    hWnd: HWND,
    wMsg: u32,
    fCallBack: SNMPAPI_CALLBACK,
    lpClientData: *c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wsnmp32" fn SnmpListen(
    hEntity: ?*c_void,
    lStatus: Snmp_lStatus,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpListenEx(
    hEntity: ?*c_void,
    lStatus: u32,
    nUseEntityAddr: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpCancelMsg(
    session: ?*c_void,
    reqId: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpStartupEx(
    nMajorVersion: *u32,
    nMinorVersion: *u32,
    nLevel: *u32,
    nTranslateMode: *Snmp_nTranslateMode,
    nRetransmitMode: *Snmp_lStatus,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpCleanupEx(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpStrToEntity(
    session: ?*c_void,
    string: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wsnmp32" fn SnmpEntityToStr(
    entity: ?*c_void,
    size: u32,
    string: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpFreeEntity(
    entity: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpStrToContext(
    session: ?*c_void,
    string: *smiOCTETS,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wsnmp32" fn SnmpContextToStr(
    context: ?*c_void,
    string: *smiOCTETS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpFreeContext(
    context: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpSetPort(
    hEntity: ?*c_void,
    nPort: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpCreatePdu(
    session: ?*c_void,
    PDU_type: SNMP_PDU_TYPE,
    request_id: i32,
    error_status: i32,
    error_index: i32,
    varbindlist: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wsnmp32" fn SnmpGetPduData(
    PDU: ?*c_void,
    PDU_type: *i32,
    request_id: *i32,
    error_status: *SnmpGetPduData_error_statusFlags,
    error_index: *i32,
    varbindlist: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpSetPduData(
    PDU: ?*c_void,
    PDU_type: *const i32,
    request_id: *const i32,
    non_repeaters: *const i32,
    max_repetitions: *const i32,
    varbindlist: *const ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpDuplicatePdu(
    session: ?*c_void,
    PDU: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wsnmp32" fn SnmpFreePdu(
    PDU: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpCreateVbl(
    session: ?*c_void,
    name: *smiOID,
    value: *smiVALUE,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wsnmp32" fn SnmpDuplicateVbl(
    session: ?*c_void,
    vbl: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wsnmp32" fn SnmpFreeVbl(
    vbl: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpCountVbl(
    vbl: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpGetVb(
    vbl: ?*c_void,
    index: u32,
    name: *smiOID,
    value: *smiVALUE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpSetVb(
    vbl: ?*c_void,
    index: u32,
    name: *smiOID,
    value: *smiVALUE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpDeleteVb(
    vbl: ?*c_void,
    index: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpGetLastError(
    session: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpStrToOid(
    string: [*:0]const u8,
    dstOID: *smiOID,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpOidToStr(
    srcOID: *smiOID,
    size: u32,
    string: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpOidCopy(
    srcOID: *smiOID,
    dstOID: *smiOID,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpOidCompare(
    xOID: *smiOID,
    yOID: *smiOID,
    maxlen: u32,
    result: *i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpEncodeMsg(
    session: ?*c_void,
    srcEntity: ?*c_void,
    dstEntity: ?*c_void,
    context: ?*c_void,
    pdu: ?*c_void,
    msgBufDesc: *smiOCTETS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpDecodeMsg(
    session: ?*c_void,
    srcEntity: *?*c_void,
    dstEntity: *?*c_void,
    context: *?*c_void,
    pdu: *?*c_void,
    msgBufDesc: *smiOCTETS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wsnmp32" fn SnmpFreeDescriptor(
    syntax: u32,
    descriptor: *smiOCTETS,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const LPARAM = @import("windows_and_messaging.zig").LPARAM;
const WPARAM = @import("windows_and_messaging.zig").WPARAM;
const HANDLE = @import("system_services.zig").HANDLE;
const PSTR = @import("system_services.zig").PSTR;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = PFNSNMPEXTENSIONINIT;
    _ = PFNSNMPEXTENSIONINITEX;
    _ = PFNSNMPEXTENSIONMONITOR;
    _ = PFNSNMPEXTENSIONQUERY;
    _ = PFNSNMPEXTENSIONQUERYEX;
    _ = PFNSNMPEXTENSIONTRAP;
    _ = PFNSNMPEXTENSIONCLOSE;
    _ = SNMPAPI_CALLBACK;
    _ = PFNSNMPSTARTUPEX;
    _ = PFNSNMPCLEANUPEX;

    const constant_export_count = 90;
    const type_export_count = 30;
    const enum_value_export_count = 71;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 84;
    const unicode_alias_count = 0;
    const import_count = 6;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

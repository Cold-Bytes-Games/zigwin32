//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (19)
//--------------------------------------------------------------------------------
const CLSID_CInitiateWinSAT_Value = @import("../zig.zig").Guid.initString("489331DC-F5E0-4528-9FDA-45331BF4A571");
pub const CLSID_CInitiateWinSAT = &CLSID_CInitiateWinSAT_Value;

const CLSID_CQueryWinSAT_Value = @import("../zig.zig").Guid.initString("F3BDFAD3-F276-49E9-9B17-C474F48F0764");
pub const CLSID_CQueryWinSAT = &CLSID_CQueryWinSAT_Value;

const CLSID_CQueryAllWinSAT_Value = @import("../zig.zig").Guid.initString("05DF8D13-C355-47F4-A11E-851B338CEFB8");
pub const CLSID_CQueryAllWinSAT = &CLSID_CQueryAllWinSAT_Value;

const CLSID_CProvideWinSATVisuals_Value = @import("../zig.zig").Guid.initString("9F377D7E-E551-44F8-9F94-9DB392B03B7B");
pub const CLSID_CProvideWinSATVisuals = &CLSID_CProvideWinSATVisuals_Value;

const CLSID_CAccessiblityWinSAT_Value = @import("../zig.zig").Guid.initString("6E18F9C6-A3EB-495A-89B7-956482E19F7A");
pub const CLSID_CAccessiblityWinSAT = &CLSID_CAccessiblityWinSAT_Value;

const CLSID_CQueryOEMWinSATCustomization_Value = @import("../zig.zig").Guid.initString("C47A41B7-B729-424F-9AF9-5CB3934F2DFA");
pub const CLSID_CQueryOEMWinSATCustomization = &CLSID_CQueryOEMWinSATCustomization_Value;

pub const __MIDL___MIDL_itf_winsatcominterfacei_0000_0000_0001 = extern enum(i32) {
    WINSAT_OEM_DATA_VALID = 0,
    WINSAT_OEM_DATA_NON_SYS_CONFIG_MATCH = 1,
    WINSAT_OEM_DATA_INVALID = 2,
    WINSAT_OEM_NO_DATA_SUPPLIED = 3,
};
pub const WINSAT_OEM_DATA_VALID = __MIDL___MIDL_itf_winsatcominterfacei_0000_0000_0001.WINSAT_OEM_DATA_VALID;
pub const WINSAT_OEM_DATA_NON_SYS_CONFIG_MATCH = __MIDL___MIDL_itf_winsatcominterfacei_0000_0000_0001.WINSAT_OEM_DATA_NON_SYS_CONFIG_MATCH;
pub const WINSAT_OEM_DATA_INVALID = __MIDL___MIDL_itf_winsatcominterfacei_0000_0000_0001.WINSAT_OEM_DATA_INVALID;
pub const WINSAT_OEM_NO_DATA_SUPPLIED = __MIDL___MIDL_itf_winsatcominterfacei_0000_0000_0001.WINSAT_OEM_NO_DATA_SUPPLIED;

pub const WINSAT_ASSESSMENT_STATE = extern enum(i32) {
    MIN = 0,
    UNKNOWN = 0,
    VALID = 1,
    INCOHERENT_WITH_HARDWARE = 2,
    NOT_AVAILABLE = 3,
    INVALID = 4,
    MAX = 4,
};
pub const WINSAT_ASSESSMENT_STATE_MIN = WINSAT_ASSESSMENT_STATE.MIN;
pub const WINSAT_ASSESSMENT_STATE_UNKNOWN = WINSAT_ASSESSMENT_STATE.UNKNOWN;
pub const WINSAT_ASSESSMENT_STATE_VALID = WINSAT_ASSESSMENT_STATE.VALID;
pub const WINSAT_ASSESSMENT_STATE_INCOHERENT_WITH_HARDWARE = WINSAT_ASSESSMENT_STATE.INCOHERENT_WITH_HARDWARE;
pub const WINSAT_ASSESSMENT_STATE_NOT_AVAILABLE = WINSAT_ASSESSMENT_STATE.NOT_AVAILABLE;
pub const WINSAT_ASSESSMENT_STATE_INVALID = WINSAT_ASSESSMENT_STATE.INVALID;
pub const WINSAT_ASSESSMENT_STATE_MAX = WINSAT_ASSESSMENT_STATE.MAX;

pub const WINSAT_ASSESSMENT_TYPE = extern enum(i32) {
    WINSAT_ASSESSMENT_MEMORY = 0,
    WINSAT_ASSESSMENT_CPU = 1,
    WINSAT_ASSESSMENT_DISK = 2,
    WINSAT_ASSESSMENT_D3D = 3,
    WINSAT_ASSESSMENT_GRAPHICS = 4,
};
pub const WINSAT_ASSESSMENT_MEMORY = WINSAT_ASSESSMENT_TYPE.WINSAT_ASSESSMENT_MEMORY;
pub const WINSAT_ASSESSMENT_CPU = WINSAT_ASSESSMENT_TYPE.WINSAT_ASSESSMENT_CPU;
pub const WINSAT_ASSESSMENT_DISK = WINSAT_ASSESSMENT_TYPE.WINSAT_ASSESSMENT_DISK;
pub const WINSAT_ASSESSMENT_D3D = WINSAT_ASSESSMENT_TYPE.WINSAT_ASSESSMENT_D3D;
pub const WINSAT_ASSESSMENT_GRAPHICS = WINSAT_ASSESSMENT_TYPE.WINSAT_ASSESSMENT_GRAPHICS;

pub const WINSAT_BITMAP_SIZE = extern enum(i32) {
    SMALL = 0,
    NORMAL = 1,
};
pub const WINSAT_BITMAP_SIZE_SMALL = WINSAT_BITMAP_SIZE.SMALL;
pub const WINSAT_BITMAP_SIZE_NORMAL = WINSAT_BITMAP_SIZE.NORMAL;

const IID_IProvideWinSATAssessmentInfo_Value = @import("../zig.zig").Guid.initString("0CD1C380-52D3-4678-AC6F-E929E480BE9E");
pub const IID_IProvideWinSATAssessmentInfo = &IID_IProvideWinSATAssessmentInfo_Value;
pub const IProvideWinSATAssessmentInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Score: fn(
            self: *const IProvideWinSATAssessmentInfo,
            score: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Title: fn(
            self: *const IProvideWinSATAssessmentInfo,
            title: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Description: fn(
            self: *const IProvideWinSATAssessmentInfo,
            description: ?*BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProvideWinSATAssessmentInfo_get_Score(self: *const T, score: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProvideWinSATAssessmentInfo.VTable, self.vtable).get_Score(@ptrCast(*const IProvideWinSATAssessmentInfo, self), score);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProvideWinSATAssessmentInfo_get_Title(self: *const T, title: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProvideWinSATAssessmentInfo.VTable, self.vtable).get_Title(@ptrCast(*const IProvideWinSATAssessmentInfo, self), title);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProvideWinSATAssessmentInfo_get_Description(self: *const T, description: ?*BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProvideWinSATAssessmentInfo.VTable, self.vtable).get_Description(@ptrCast(*const IProvideWinSATAssessmentInfo, self), description);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IProvideWinSATResultsInfo_Value = @import("../zig.zig").Guid.initString("F8334D5D-568E-4075-875F-9DF341506640");
pub const IID_IProvideWinSATResultsInfo = &IID_IProvideWinSATResultsInfo_Value;
pub const IProvideWinSATResultsInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetAssessmentInfo: fn(
            self: *const IProvideWinSATResultsInfo,
            assessment: WINSAT_ASSESSMENT_TYPE,
            ppinfo: **IProvideWinSATAssessmentInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AssessmentState: fn(
            self: *const IProvideWinSATResultsInfo,
            state: *WINSAT_ASSESSMENT_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AssessmentDateTime: fn(
            self: *const IProvideWinSATResultsInfo,
            fileTime: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SystemRating: fn(
            self: *const IProvideWinSATResultsInfo,
            level: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RatingStateDesc: fn(
            self: *const IProvideWinSATResultsInfo,
            description: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProvideWinSATResultsInfo_GetAssessmentInfo(self: *const T, assessment: WINSAT_ASSESSMENT_TYPE, ppinfo: **IProvideWinSATAssessmentInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProvideWinSATResultsInfo.VTable, self.vtable).GetAssessmentInfo(@ptrCast(*const IProvideWinSATResultsInfo, self), assessment, ppinfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProvideWinSATResultsInfo_get_AssessmentState(self: *const T, state: *WINSAT_ASSESSMENT_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProvideWinSATResultsInfo.VTable, self.vtable).get_AssessmentState(@ptrCast(*const IProvideWinSATResultsInfo, self), state);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProvideWinSATResultsInfo_get_AssessmentDateTime(self: *const T, fileTime: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProvideWinSATResultsInfo.VTable, self.vtable).get_AssessmentDateTime(@ptrCast(*const IProvideWinSATResultsInfo, self), fileTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProvideWinSATResultsInfo_get_SystemRating(self: *const T, level: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProvideWinSATResultsInfo.VTable, self.vtable).get_SystemRating(@ptrCast(*const IProvideWinSATResultsInfo, self), level);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProvideWinSATResultsInfo_get_RatingStateDesc(self: *const T, description: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProvideWinSATResultsInfo.VTable, self.vtable).get_RatingStateDesc(@ptrCast(*const IProvideWinSATResultsInfo, self), description);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IQueryRecentWinSATAssessment_Value = @import("../zig.zig").Guid.initString("F8AD5D1F-3B47-4BDC-9375-7C6B1DA4ECA7");
pub const IID_IQueryRecentWinSATAssessment = &IID_IQueryRecentWinSATAssessment_Value;
pub const IQueryRecentWinSATAssessment = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_XML: fn(
            self: *const IQueryRecentWinSATAssessment,
            xPath: BSTR,
            namespaces: BSTR,
            ppDomNodeList: **IXMLDOMNodeList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Info: fn(
            self: *const IQueryRecentWinSATAssessment,
            ppWinSATAssessmentInfo: **IProvideWinSATResultsInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IQueryRecentWinSATAssessment_get_XML(self: *const T, xPath: BSTR, namespaces: BSTR, ppDomNodeList: **IXMLDOMNodeList) callconv(.Inline) HRESULT {
            return @ptrCast(*const IQueryRecentWinSATAssessment.VTable, self.vtable).get_XML(@ptrCast(*const IQueryRecentWinSATAssessment, self), xPath, namespaces, ppDomNodeList);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IQueryRecentWinSATAssessment_get_Info(self: *const T, ppWinSATAssessmentInfo: **IProvideWinSATResultsInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IQueryRecentWinSATAssessment.VTable, self.vtable).get_Info(@ptrCast(*const IQueryRecentWinSATAssessment, self), ppWinSATAssessmentInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IProvideWinSATVisuals_Value = @import("../zig.zig").Guid.initString("A9F4ADE0-871A-42A3-B813-3078D25162C9");
pub const IID_IProvideWinSATVisuals = &IID_IProvideWinSATVisuals_Value;
pub const IProvideWinSATVisuals = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_Bitmap: fn(
            self: *const IProvideWinSATVisuals,
            bitmapSize: WINSAT_BITMAP_SIZE,
            state: WINSAT_ASSESSMENT_STATE,
            rating: f32,
            pBitmap: *HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProvideWinSATVisuals_get_Bitmap(self: *const T, bitmapSize: WINSAT_BITMAP_SIZE, state: WINSAT_ASSESSMENT_STATE, rating: f32, pBitmap: *HBITMAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProvideWinSATVisuals.VTable, self.vtable).get_Bitmap(@ptrCast(*const IProvideWinSATVisuals, self), bitmapSize, state, rating, pBitmap);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IQueryAllWinSATAssessments_Value = @import("../zig.zig").Guid.initString("0B89ED1D-6398-4FEA-87FC-567D8D19176F");
pub const IID_IQueryAllWinSATAssessments = &IID_IQueryAllWinSATAssessments_Value;
pub const IQueryAllWinSATAssessments = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_AllXML: fn(
            self: *const IQueryAllWinSATAssessments,
            xPath: BSTR,
            namespaces: BSTR,
            ppDomNodeList: **IXMLDOMNodeList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IQueryAllWinSATAssessments_get_AllXML(self: *const T, xPath: BSTR, namespaces: BSTR, ppDomNodeList: **IXMLDOMNodeList) callconv(.Inline) HRESULT {
            return @ptrCast(*const IQueryAllWinSATAssessments.VTable, self.vtable).get_AllXML(@ptrCast(*const IQueryAllWinSATAssessments, self), xPath, namespaces, ppDomNodeList);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWinSATInitiateEvents_Value = @import("../zig.zig").Guid.initString("262A1918-BA0D-41D5-92C2-FAB4633EE74F");
pub const IID_IWinSATInitiateEvents = &IID_IWinSATInitiateEvents_Value;
pub const IWinSATInitiateEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        WinSATComplete: fn(
            self: *const IWinSATInitiateEvents,
            hresult: HRESULT,
            strDescription: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WinSATUpdate: fn(
            self: *const IWinSATInitiateEvents,
            uCurrentTick: u32,
            uTickTotal: u32,
            strCurrentState: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWinSATInitiateEvents_WinSATComplete(self: *const T, hresult: HRESULT, strDescription: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWinSATInitiateEvents.VTable, self.vtable).WinSATComplete(@ptrCast(*const IWinSATInitiateEvents, self), hresult, strDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWinSATInitiateEvents_WinSATUpdate(self: *const T, uCurrentTick: u32, uTickTotal: u32, strCurrentState: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWinSATInitiateEvents.VTable, self.vtable).WinSATUpdate(@ptrCast(*const IWinSATInitiateEvents, self), uCurrentTick, uTickTotal, strCurrentState);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInitiateWinSATAssessment_Value = @import("../zig.zig").Guid.initString("D983FC50-F5BF-49D5-B5ED-CCCB18AA7FC1");
pub const IID_IInitiateWinSATAssessment = &IID_IInitiateWinSATAssessment_Value;
pub const IInitiateWinSATAssessment = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitiateAssessment: fn(
            self: *const IInitiateWinSATAssessment,
            cmdLine: [*:0]const u16,
            pCallbacks: ?*IWinSATInitiateEvents,
            callerHwnd: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitiateFormalAssessment: fn(
            self: *const IInitiateWinSATAssessment,
            pCallbacks: ?*IWinSATInitiateEvents,
            callerHwnd: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelAssessment: fn(
            self: *const IInitiateWinSATAssessment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInitiateWinSATAssessment_InitiateAssessment(self: *const T, cmdLine: [*:0]const u16, pCallbacks: ?*IWinSATInitiateEvents, callerHwnd: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInitiateWinSATAssessment.VTable, self.vtable).InitiateAssessment(@ptrCast(*const IInitiateWinSATAssessment, self), cmdLine, pCallbacks, callerHwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInitiateWinSATAssessment_InitiateFormalAssessment(self: *const T, pCallbacks: ?*IWinSATInitiateEvents, callerHwnd: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInitiateWinSATAssessment.VTable, self.vtable).InitiateFormalAssessment(@ptrCast(*const IInitiateWinSATAssessment, self), pCallbacks, callerHwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInitiateWinSATAssessment_CancelAssessment(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInitiateWinSATAssessment.VTable, self.vtable).CancelAssessment(@ptrCast(*const IInitiateWinSATAssessment, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAccessibleWinSAT_Value = @import("../zig.zig").Guid.initString("30E6018A-94A8-4FF8-A69A-71B67413F07B");
pub const IID_IAccessibleWinSAT = &IID_IAccessibleWinSAT_Value;
pub const IAccessibleWinSAT = extern struct {
    pub const VTable = extern struct {
        base: IAccessible.VTable,
        SetAccessiblityData: fn(
            self: *const IAccessibleWinSAT,
            wsName: [*:0]const u16,
            wsValue: [*:0]const u16,
            wsDesc: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IAccessible.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAccessibleWinSAT_SetAccessiblityData(self: *const T, wsName: [*:0]const u16, wsValue: [*:0]const u16, wsDesc: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAccessibleWinSAT.VTable, self.vtable).SetAccessiblityData(@ptrCast(*const IAccessibleWinSAT, self), wsName, wsValue, wsDesc);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IQueryOEMWinSATCustomization_Value = @import("../zig.zig").Guid.initString("BC9A6A9F-AD4E-420E-9953-B34671E9DF22");
pub const IID_IQueryOEMWinSATCustomization = &IID_IQueryOEMWinSATCustomization_Value;
pub const IQueryOEMWinSATCustomization = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOEMPrePopulationInfo: fn(
            self: *const IQueryOEMWinSATCustomization,
            state: *__MIDL___MIDL_itf_winsatcominterfacei_0000_0000_0001,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IQueryOEMWinSATCustomization_GetOEMPrePopulationInfo(self: *const T, state: *__MIDL___MIDL_itf_winsatcominterfacei_0000_0000_0001) callconv(.Inline) HRESULT {
            return @ptrCast(*const IQueryOEMWinSATCustomization.VTable, self.vtable).GetOEMPrePopulationInfo(@ptrCast(*const IQueryOEMWinSATCustomization, self), state);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (10)
//--------------------------------------------------------------------------------
const IDispatch = @import("automation.zig").IDispatch;
const IXMLDOMNodeList = @import("windows_programming.zig").IXMLDOMNodeList;
const PWSTR = @import("system_services.zig").PWSTR;
const VARIANT = @import("automation.zig").VARIANT;
const IAccessible = @import("windows_accessibility.zig").IAccessible;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const BSTR = @import("automation.zig").BSTR;
const HBITMAP = @import("gdi.zig").HBITMAP;
const HWND = @import("windows_and_messaging.zig").HWND;

test {
    const constant_export_count = 0;
    const type_export_count = 13;
    const enum_value_export_count = 18;
    const com_iface_id_export_count = 9;
    const com_class_id_export_count = 6;
    const func_export_count = 0;
    const unicode_alias_count = 0;
    const import_count = 10;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

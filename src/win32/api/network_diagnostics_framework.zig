//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (25)
//--------------------------------------------------------------------------------
pub const ATTRIBUTE_TYPE = extern enum(i32) {
    AT_INVALID = 0,
    AT_BOOLEAN = 1,
    AT_INT8 = 2,
    AT_UINT8 = 3,
    AT_INT16 = 4,
    AT_UINT16 = 5,
    AT_INT32 = 6,
    AT_UINT32 = 7,
    AT_INT64 = 8,
    AT_UINT64 = 9,
    AT_STRING = 10,
    AT_GUID = 11,
    AT_LIFE_TIME = 12,
    AT_SOCKADDR = 13,
    AT_OCTET_STRING = 14,
};
pub const AT_INVALID = ATTRIBUTE_TYPE.AT_INVALID;
pub const AT_BOOLEAN = ATTRIBUTE_TYPE.AT_BOOLEAN;
pub const AT_INT8 = ATTRIBUTE_TYPE.AT_INT8;
pub const AT_UINT8 = ATTRIBUTE_TYPE.AT_UINT8;
pub const AT_INT16 = ATTRIBUTE_TYPE.AT_INT16;
pub const AT_UINT16 = ATTRIBUTE_TYPE.AT_UINT16;
pub const AT_INT32 = ATTRIBUTE_TYPE.AT_INT32;
pub const AT_UINT32 = ATTRIBUTE_TYPE.AT_UINT32;
pub const AT_INT64 = ATTRIBUTE_TYPE.AT_INT64;
pub const AT_UINT64 = ATTRIBUTE_TYPE.AT_UINT64;
pub const AT_STRING = ATTRIBUTE_TYPE.AT_STRING;
pub const AT_GUID = ATTRIBUTE_TYPE.AT_GUID;
pub const AT_LIFE_TIME = ATTRIBUTE_TYPE.AT_LIFE_TIME;
pub const AT_SOCKADDR = ATTRIBUTE_TYPE.AT_SOCKADDR;
pub const AT_OCTET_STRING = ATTRIBUTE_TYPE.AT_OCTET_STRING;

pub const OCTET_STRING = extern struct {
    dwLength: u32,
    lpValue: *u8,
};

pub const LIFE_TIME = extern struct {
    startTime: FILETIME,
    endTime: FILETIME,
};

pub const DIAG_SOCKADDR = extern struct {
    family: u16,
    data: [126]i8,
};

pub const HELPER_ATTRIBUTE = extern struct {
    pwszName: PWSTR,
    type: ATTRIBUTE_TYPE,
    Anonymous: HELPER_ATTRIBUTE._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const REPAIR_SCOPE = extern enum(i32) {
    RS_SYSTEM = 0,
    RS_USER = 1,
    RS_APPLICATION = 2,
    RS_PROCESS = 3,
};
pub const RS_SYSTEM = REPAIR_SCOPE.RS_SYSTEM;
pub const RS_USER = REPAIR_SCOPE.RS_USER;
pub const RS_APPLICATION = REPAIR_SCOPE.RS_APPLICATION;
pub const RS_PROCESS = REPAIR_SCOPE.RS_PROCESS;

pub const REPAIR_RISK = extern enum(i32) {
    RR_NOROLLBACK = 0,
    RR_ROLLBACK = 1,
    RR_NORISK = 2,
};
pub const RR_NOROLLBACK = REPAIR_RISK.RR_NOROLLBACK;
pub const RR_ROLLBACK = REPAIR_RISK.RR_ROLLBACK;
pub const RR_NORISK = REPAIR_RISK.RR_NORISK;

pub const UI_INFO_TYPE = extern enum(i32) {
    UIT_INVALID = 0,
    UIT_NONE = 1,
    UIT_SHELL_COMMAND = 2,
    UIT_HELP_PANE = 3,
    UIT_DUI = 4,
};
pub const UIT_INVALID = UI_INFO_TYPE.UIT_INVALID;
pub const UIT_NONE = UI_INFO_TYPE.UIT_NONE;
pub const UIT_SHELL_COMMAND = UI_INFO_TYPE.UIT_SHELL_COMMAND;
pub const UIT_HELP_PANE = UI_INFO_TYPE.UIT_HELP_PANE;
pub const UIT_DUI = UI_INFO_TYPE.UIT_DUI;

pub const ShellCommandInfo = extern struct {
    pwszOperation: PWSTR,
    pwszFile: PWSTR,
    pwszParameters: PWSTR,
    pwszDirectory: PWSTR,
    nShowCmd: u32,
};

pub const UiInfo = extern struct {
    type: UI_INFO_TYPE,
    Anonymous: UiInfo._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const RepairInfo = extern struct {
    guid: Guid,
    pwszClassName: PWSTR,
    pwszDescription: PWSTR,
    sidType: u32,
    cost: i32,
    flags: u32,
    scope: REPAIR_SCOPE,
    risk: REPAIR_RISK,
    UiInfo: UiInfo,
    rootCauseIndex: i32,
};

pub const RepairInfoEx = extern struct {
    repair: RepairInfo,
    repairRank: u16,
};

pub const RootCauseInfo = extern struct {
    pwszDescription: PWSTR,
    rootCauseID: Guid,
    rootCauseFlags: u32,
    networkInterfaceID: Guid,
    pRepairs: *RepairInfoEx,
    repairCount: u16,
};

pub const DIAGNOSIS_STATUS = extern enum(i32) {
    DS_NOT_IMPLEMENTED = 0,
    DS_CONFIRMED = 1,
    DS_REJECTED = 2,
    DS_INDETERMINATE = 3,
    DS_DEFERRED = 4,
    DS_PASSTHROUGH = 5,
};
pub const DS_NOT_IMPLEMENTED = DIAGNOSIS_STATUS.DS_NOT_IMPLEMENTED;
pub const DS_CONFIRMED = DIAGNOSIS_STATUS.DS_CONFIRMED;
pub const DS_REJECTED = DIAGNOSIS_STATUS.DS_REJECTED;
pub const DS_INDETERMINATE = DIAGNOSIS_STATUS.DS_INDETERMINATE;
pub const DS_DEFERRED = DIAGNOSIS_STATUS.DS_DEFERRED;
pub const DS_PASSTHROUGH = DIAGNOSIS_STATUS.DS_PASSTHROUGH;

pub const REPAIR_STATUS = extern enum(i32) {
    RS_NOT_IMPLEMENTED = 0,
    RS_REPAIRED = 1,
    RS_UNREPAIRED = 2,
    RS_DEFERRED = 3,
    RS_USER_ACTION = 4,
};
pub const RS_NOT_IMPLEMENTED = REPAIR_STATUS.RS_NOT_IMPLEMENTED;
pub const RS_REPAIRED = REPAIR_STATUS.RS_REPAIRED;
pub const RS_UNREPAIRED = REPAIR_STATUS.RS_UNREPAIRED;
pub const RS_DEFERRED = REPAIR_STATUS.RS_DEFERRED;
pub const RS_USER_ACTION = REPAIR_STATUS.RS_USER_ACTION;

pub const PROBLEM_TYPE = extern enum(i32) {
    PT_INVALID = 0,
    PT_LOW_HEALTH = 1,
    PT_LOWER_HEALTH = 2,
    PT_DOWN_STREAM_HEALTH = 4,
    PT_HIGH_UTILIZATION = 8,
    PT_HIGHER_UTILIZATION = 16,
    PT_UP_STREAM_UTILIZATION = 32,
};
pub const PT_INVALID = PROBLEM_TYPE.PT_INVALID;
pub const PT_LOW_HEALTH = PROBLEM_TYPE.PT_LOW_HEALTH;
pub const PT_LOWER_HEALTH = PROBLEM_TYPE.PT_LOWER_HEALTH;
pub const PT_DOWN_STREAM_HEALTH = PROBLEM_TYPE.PT_DOWN_STREAM_HEALTH;
pub const PT_HIGH_UTILIZATION = PROBLEM_TYPE.PT_HIGH_UTILIZATION;
pub const PT_HIGHER_UTILIZATION = PROBLEM_TYPE.PT_HIGHER_UTILIZATION;
pub const PT_UP_STREAM_UTILIZATION = PROBLEM_TYPE.PT_UP_STREAM_UTILIZATION;

pub const HYPOTHESIS = extern struct {
    pwszClassName: PWSTR,
    pwszDescription: PWSTR,
    celt: u32,
    rgAttributes: *HELPER_ATTRIBUTE,
};

pub const HelperAttributeInfo = extern struct {
    pwszName: PWSTR,
    type: ATTRIBUTE_TYPE,
};

pub const DiagnosticsInfo = extern struct {
    cost: i32,
    flags: u32,
};

const IID_INetDiagHelper_Value = @import("../zig.zig").Guid.initString("c0b35746-ebf5-11d8-bbe9-505054503030");
pub const IID_INetDiagHelper = &IID_INetDiagHelper_Value;
pub const INetDiagHelper = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const INetDiagHelper,
            celt: u32,
            rgAttributes: [*]HELPER_ATTRIBUTE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDiagnosticsInfo: fn(
            self: *const INetDiagHelper,
            ppInfo: **DiagnosticsInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyAttributes: fn(
            self: *const INetDiagHelper,
            pcelt: *u32,
            pprgAttributes: [*]*HELPER_ATTRIBUTE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LowHealth: fn(
            self: *const INetDiagHelper,
            pwszInstanceDescription: [*:0]const u16,
            ppwszDescription: *PWSTR,
            pDeferredTime: *i32,
            pStatus: *DIAGNOSIS_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HighUtilization: fn(
            self: *const INetDiagHelper,
            pwszInstanceDescription: [*:0]const u16,
            ppwszDescription: *PWSTR,
            pDeferredTime: *i32,
            pStatus: *DIAGNOSIS_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLowerHypotheses: fn(
            self: *const INetDiagHelper,
            pcelt: *u32,
            pprgHypotheses: [*]*HYPOTHESIS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDownStreamHypotheses: fn(
            self: *const INetDiagHelper,
            pcelt: *u32,
            pprgHypotheses: [*]*HYPOTHESIS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHigherHypotheses: fn(
            self: *const INetDiagHelper,
            pcelt: *u32,
            pprgHypotheses: [*]*HYPOTHESIS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUpStreamHypotheses: fn(
            self: *const INetDiagHelper,
            pcelt: *u32,
            pprgHypotheses: [*]*HYPOTHESIS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Repair: fn(
            self: *const INetDiagHelper,
            pInfo: *RepairInfo,
            pDeferredTime: *i32,
            pStatus: *REPAIR_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Validate: fn(
            self: *const INetDiagHelper,
            problem: PROBLEM_TYPE,
            pDeferredTime: *i32,
            pStatus: *REPAIR_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRepairInfo: fn(
            self: *const INetDiagHelper,
            problem: PROBLEM_TYPE,
            pcelt: *u32,
            ppInfo: [*]*RepairInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLifeTime: fn(
            self: *const INetDiagHelper,
            pLifeTime: *LIFE_TIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLifeTime: fn(
            self: *const INetDiagHelper,
            lifeTime: LIFE_TIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCacheTime: fn(
            self: *const INetDiagHelper,
            pCacheTime: *FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributes: fn(
            self: *const INetDiagHelper,
            pcelt: *u32,
            pprgAttributes: [*]*HELPER_ATTRIBUTE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: fn(
            self: *const INetDiagHelper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cleanup: fn(
            self: *const INetDiagHelper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelper_Initialize(self: *const T, celt: u32, rgAttributes: [*]HELPER_ATTRIBUTE) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelper.VTable, self.vtable).Initialize(@ptrCast(*const INetDiagHelper, self), celt, rgAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelper_GetDiagnosticsInfo(self: *const T, ppInfo: **DiagnosticsInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelper.VTable, self.vtable).GetDiagnosticsInfo(@ptrCast(*const INetDiagHelper, self), ppInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelper_GetKeyAttributes(self: *const T, pcelt: *u32, pprgAttributes: [*]*HELPER_ATTRIBUTE) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelper.VTable, self.vtable).GetKeyAttributes(@ptrCast(*const INetDiagHelper, self), pcelt, pprgAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelper_LowHealth(self: *const T, pwszInstanceDescription: [*:0]const u16, ppwszDescription: *PWSTR, pDeferredTime: *i32, pStatus: *DIAGNOSIS_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelper.VTable, self.vtable).LowHealth(@ptrCast(*const INetDiagHelper, self), pwszInstanceDescription, ppwszDescription, pDeferredTime, pStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelper_HighUtilization(self: *const T, pwszInstanceDescription: [*:0]const u16, ppwszDescription: *PWSTR, pDeferredTime: *i32, pStatus: *DIAGNOSIS_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelper.VTable, self.vtable).HighUtilization(@ptrCast(*const INetDiagHelper, self), pwszInstanceDescription, ppwszDescription, pDeferredTime, pStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelper_GetLowerHypotheses(self: *const T, pcelt: *u32, pprgHypotheses: [*]*HYPOTHESIS) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelper.VTable, self.vtable).GetLowerHypotheses(@ptrCast(*const INetDiagHelper, self), pcelt, pprgHypotheses);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelper_GetDownStreamHypotheses(self: *const T, pcelt: *u32, pprgHypotheses: [*]*HYPOTHESIS) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelper.VTable, self.vtable).GetDownStreamHypotheses(@ptrCast(*const INetDiagHelper, self), pcelt, pprgHypotheses);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelper_GetHigherHypotheses(self: *const T, pcelt: *u32, pprgHypotheses: [*]*HYPOTHESIS) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelper.VTable, self.vtable).GetHigherHypotheses(@ptrCast(*const INetDiagHelper, self), pcelt, pprgHypotheses);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelper_GetUpStreamHypotheses(self: *const T, pcelt: *u32, pprgHypotheses: [*]*HYPOTHESIS) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelper.VTable, self.vtable).GetUpStreamHypotheses(@ptrCast(*const INetDiagHelper, self), pcelt, pprgHypotheses);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelper_Repair(self: *const T, pInfo: *RepairInfo, pDeferredTime: *i32, pStatus: *REPAIR_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelper.VTable, self.vtable).Repair(@ptrCast(*const INetDiagHelper, self), pInfo, pDeferredTime, pStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelper_Validate(self: *const T, problem: PROBLEM_TYPE, pDeferredTime: *i32, pStatus: *REPAIR_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelper.VTable, self.vtable).Validate(@ptrCast(*const INetDiagHelper, self), problem, pDeferredTime, pStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelper_GetRepairInfo(self: *const T, problem: PROBLEM_TYPE, pcelt: *u32, ppInfo: [*]*RepairInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelper.VTable, self.vtable).GetRepairInfo(@ptrCast(*const INetDiagHelper, self), problem, pcelt, ppInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelper_GetLifeTime(self: *const T, pLifeTime: *LIFE_TIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelper.VTable, self.vtable).GetLifeTime(@ptrCast(*const INetDiagHelper, self), pLifeTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelper_SetLifeTime(self: *const T, lifeTime: LIFE_TIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelper.VTable, self.vtable).SetLifeTime(@ptrCast(*const INetDiagHelper, self), lifeTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelper_GetCacheTime(self: *const T, pCacheTime: *FILETIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelper.VTable, self.vtable).GetCacheTime(@ptrCast(*const INetDiagHelper, self), pCacheTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelper_GetAttributes(self: *const T, pcelt: *u32, pprgAttributes: [*]*HELPER_ATTRIBUTE) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelper.VTable, self.vtable).GetAttributes(@ptrCast(*const INetDiagHelper, self), pcelt, pprgAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelper_Cancel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelper.VTable, self.vtable).Cancel(@ptrCast(*const INetDiagHelper, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelper_Cleanup(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelper.VTable, self.vtable).Cleanup(@ptrCast(*const INetDiagHelper, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const HypothesisResult = extern struct {
    hypothesis: HYPOTHESIS,
    pathStatus: DIAGNOSIS_STATUS,
};

const IID_INetDiagHelperUtilFactory_Value = @import("../zig.zig").Guid.initString("104613fb-bc57-4178-95ba-88809698354a");
pub const IID_INetDiagHelperUtilFactory = &IID_INetDiagHelperUtilFactory_Value;
pub const INetDiagHelperUtilFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateUtilityInstance: fn(
            self: *const INetDiagHelperUtilFactory,
            riid: *const Guid,
            ppvObject: ?*?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelperUtilFactory_CreateUtilityInstance(self: *const T, riid: *const Guid, ppvObject: ?*?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelperUtilFactory.VTable, self.vtable).CreateUtilityInstance(@ptrCast(*const INetDiagHelperUtilFactory, self), riid, ppvObject);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_INetDiagHelperEx_Value = @import("../zig.zig").Guid.initString("972dab4d-e4e3-4fc6-ae54-5f65ccde4a15");
pub const IID_INetDiagHelperEx = &IID_INetDiagHelperEx_Value;
pub const INetDiagHelperEx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReconfirmLowHealth: fn(
            self: *const INetDiagHelperEx,
            celt: u32,
            pResults: [*]HypothesisResult,
            ppwszUpdatedDescription: *PWSTR,
            pUpdatedStatus: *DIAGNOSIS_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUtilities: fn(
            self: *const INetDiagHelperEx,
            pUtilities: *INetDiagHelperUtilFactory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReproduceFailure: fn(
            self: *const INetDiagHelperEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelperEx_ReconfirmLowHealth(self: *const T, celt: u32, pResults: [*]HypothesisResult, ppwszUpdatedDescription: *PWSTR, pUpdatedStatus: *DIAGNOSIS_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelperEx.VTable, self.vtable).ReconfirmLowHealth(@ptrCast(*const INetDiagHelperEx, self), celt, pResults, ppwszUpdatedDescription, pUpdatedStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelperEx_SetUtilities(self: *const T, pUtilities: *INetDiagHelperUtilFactory) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelperEx.VTable, self.vtable).SetUtilities(@ptrCast(*const INetDiagHelperEx, self), pUtilities);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelperEx_ReproduceFailure(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelperEx.VTable, self.vtable).ReproduceFailure(@ptrCast(*const INetDiagHelperEx, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_INetDiagHelperInfo_Value = @import("../zig.zig").Guid.initString("c0b35747-ebf5-11d8-bbe9-505054503030");
pub const IID_INetDiagHelperInfo = &IID_INetDiagHelperInfo_Value;
pub const INetDiagHelperInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAttributeInfo: fn(
            self: *const INetDiagHelperInfo,
            pcelt: *u32,
            pprgAttributeInfos: [*]*HelperAttributeInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagHelperInfo_GetAttributeInfo(self: *const T, pcelt: *u32, pprgAttributeInfos: [*]*HelperAttributeInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagHelperInfo.VTable, self.vtable).GetAttributeInfo(@ptrCast(*const INetDiagHelperInfo, self), pcelt, pprgAttributeInfos);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_INetDiagExtensibleHelper_Value = @import("../zig.zig").Guid.initString("c0b35748-ebf5-11d8-bbe9-505054503030");
pub const IID_INetDiagExtensibleHelper = &IID_INetDiagExtensibleHelper_Value;
pub const INetDiagExtensibleHelper = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ResolveAttributes: fn(
            self: *const INetDiagExtensibleHelper,
            celt: u32,
            rgKeyAttributes: [*]HELPER_ATTRIBUTE,
            pcelt: *u32,
            prgMatchValues: [*]*HELPER_ATTRIBUTE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetDiagExtensibleHelper_ResolveAttributes(self: *const T, celt: u32, rgKeyAttributes: [*]HELPER_ATTRIBUTE, pcelt: *u32, prgMatchValues: [*]*HELPER_ATTRIBUTE) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetDiagExtensibleHelper.VTable, self.vtable).ResolveAttributes(@ptrCast(*const INetDiagExtensibleHelper, self), celt, rgKeyAttributes, pcelt, prgMatchValues);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (16)
//--------------------------------------------------------------------------------
pub extern "NDFAPI" fn NdfCreateIncident(
    helperClassName: [*:0]const u16,
    celt: u32,
    attributes: [*]HELPER_ATTRIBUTE,
    handle: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NDFAPI" fn NdfCreateWinSockIncident(
    sock: ?*c_void,
    host: ?[*:0]const u16,
    port: u16,
    appId: ?[*:0]const u16,
    userId: ?*SID,
    handle: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NDFAPI" fn NdfCreateWebIncident(
    url: [*:0]const u16,
    handle: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NDFAPI" fn NdfCreateWebIncidentEx(
    url: [*:0]const u16,
    useWinHTTP: BOOL,
    moduleName: ?PWSTR,
    handle: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NDFAPI" fn NdfCreateSharingIncident(
    UNCPath: [*:0]const u16,
    handle: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NDFAPI" fn NdfCreateDNSIncident(
    hostname: [*:0]const u16,
    queryType: u16,
    handle: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NDFAPI" fn NdfCreateConnectivityIncident(
    handle: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NDFAPI" fn NdfCreateNetConnectionIncident(
    handle: **c_void,
    id: Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NDFAPI" fn NdfCreatePnrpIncident(
    cloudname: [*:0]const u16,
    peername: ?[*:0]const u16,
    diagnosePublish: BOOL,
    appId: ?[*:0]const u16,
    handle: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NDFAPI" fn NdfCreateGroupingIncident(
    CloudName: ?[*:0]const u16,
    GroupName: ?[*:0]const u16,
    Identity: ?[*:0]const u16,
    Invitation: ?[*:0]const u16,
    Addresses: ?*SOCKET_ADDRESS_LIST,
    appId: ?[*:0]const u16,
    handle: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NDFAPI" fn NdfExecuteDiagnosis(
    handle: *c_void,
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NDFAPI" fn NdfCloseIncident(
    handle: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NDFAPI" fn NdfDiagnoseIncident(
    Handle: *c_void,
    RootCauseCount: *u32,
    RootCauses: **RootCauseInfo,
    dwWait: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NDFAPI" fn NdfRepairIncident(
    Handle: *c_void,
    RepairEx: *RepairInfoEx,
    dwWait: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NDFAPI" fn NdfCancelIncident(
    Handle: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NDFAPI" fn NdfGetTraceFile(
    Handle: *c_void,
    TraceFileLocation: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (9)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const FILETIME = @import("windows_programming.zig").FILETIME;
const PWSTR = @import("system_services.zig").PWSTR;
const SID = @import("security.zig").SID;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const SOCKET_ADDRESS_LIST = @import("network_drivers.zig").SOCKET_ADDRESS_LIST;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;

test {
    const constant_export_count = 0;
    const type_export_count = 25;
    const enum_value_export_count = 45;
    const com_iface_id_export_count = 5;
    const com_class_id_export_count = 0;
    const func_export_count = 16;
    const unicode_alias_count = 0;
    const import_count = 9;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (9)
//--------------------------------------------------------------------------------
pub const PHYSICAL_MONITOR = extern struct {
    hPhysicalMonitor: HANDLE,
    szPhysicalMonitorDescription: [128]u16,
};

pub const MC_TIMING_REPORT = extern struct {
    dwHorizontalFrequencyInHZ: u32,
    dwVerticalFrequencyInHZ: u32,
    bTimingStatusByte: u8,
};

pub const MC_VCP_CODE_TYPE = extern enum(i32) {
    MC_MOMENTARY = 0,
    MC_SET_PARAMETER = 1,
};
pub const MC_MOMENTARY = MC_VCP_CODE_TYPE.MC_MOMENTARY;
pub const MC_SET_PARAMETER = MC_VCP_CODE_TYPE.MC_SET_PARAMETER;

pub const MC_DISPLAY_TECHNOLOGY_TYPE = extern enum(i32) {
    MC_SHADOW_MASK_CATHODE_RAY_TUBE = 0,
    MC_APERTURE_GRILL_CATHODE_RAY_TUBE = 1,
    MC_THIN_FILM_TRANSISTOR = 2,
    MC_LIQUID_CRYSTAL_ON_SILICON = 3,
    MC_PLASMA = 4,
    MC_ORGANIC_LIGHT_EMITTING_DIODE = 5,
    MC_ELECTROLUMINESCENT = 6,
    MC_MICROELECTROMECHANICAL = 7,
    MC_FIELD_EMISSION_DEVICE = 8,
};
pub const MC_SHADOW_MASK_CATHODE_RAY_TUBE = MC_DISPLAY_TECHNOLOGY_TYPE.MC_SHADOW_MASK_CATHODE_RAY_TUBE;
pub const MC_APERTURE_GRILL_CATHODE_RAY_TUBE = MC_DISPLAY_TECHNOLOGY_TYPE.MC_APERTURE_GRILL_CATHODE_RAY_TUBE;
pub const MC_THIN_FILM_TRANSISTOR = MC_DISPLAY_TECHNOLOGY_TYPE.MC_THIN_FILM_TRANSISTOR;
pub const MC_LIQUID_CRYSTAL_ON_SILICON = MC_DISPLAY_TECHNOLOGY_TYPE.MC_LIQUID_CRYSTAL_ON_SILICON;
pub const MC_PLASMA = MC_DISPLAY_TECHNOLOGY_TYPE.MC_PLASMA;
pub const MC_ORGANIC_LIGHT_EMITTING_DIODE = MC_DISPLAY_TECHNOLOGY_TYPE.MC_ORGANIC_LIGHT_EMITTING_DIODE;
pub const MC_ELECTROLUMINESCENT = MC_DISPLAY_TECHNOLOGY_TYPE.MC_ELECTROLUMINESCENT;
pub const MC_MICROELECTROMECHANICAL = MC_DISPLAY_TECHNOLOGY_TYPE.MC_MICROELECTROMECHANICAL;
pub const MC_FIELD_EMISSION_DEVICE = MC_DISPLAY_TECHNOLOGY_TYPE.MC_FIELD_EMISSION_DEVICE;

pub const MC_DRIVE_TYPE = extern enum(i32) {
    MC_RED_DRIVE = 0,
    MC_GREEN_DRIVE = 1,
    MC_BLUE_DRIVE = 2,
};
pub const MC_RED_DRIVE = MC_DRIVE_TYPE.MC_RED_DRIVE;
pub const MC_GREEN_DRIVE = MC_DRIVE_TYPE.MC_GREEN_DRIVE;
pub const MC_BLUE_DRIVE = MC_DRIVE_TYPE.MC_BLUE_DRIVE;

pub const MC_GAIN_TYPE = extern enum(i32) {
    MC_RED_GAIN = 0,
    MC_GREEN_GAIN = 1,
    MC_BLUE_GAIN = 2,
};
pub const MC_RED_GAIN = MC_GAIN_TYPE.MC_RED_GAIN;
pub const MC_GREEN_GAIN = MC_GAIN_TYPE.MC_GREEN_GAIN;
pub const MC_BLUE_GAIN = MC_GAIN_TYPE.MC_BLUE_GAIN;

pub const MC_POSITION_TYPE = extern enum(i32) {
    MC_HORIZONTAL_POSITION = 0,
    MC_VERTICAL_POSITION = 1,
};
pub const MC_HORIZONTAL_POSITION = MC_POSITION_TYPE.MC_HORIZONTAL_POSITION;
pub const MC_VERTICAL_POSITION = MC_POSITION_TYPE.MC_VERTICAL_POSITION;

pub const MC_SIZE_TYPE = extern enum(i32) {
    MC_WIDTH = 0,
    MC_HEIGHT = 1,
};
pub const MC_WIDTH = MC_SIZE_TYPE.MC_WIDTH;
pub const MC_HEIGHT = MC_SIZE_TYPE.MC_HEIGHT;

pub const MC_COLOR_TEMPERATURE = extern enum(i32) {
    UNKNOWN = 0,
    _4000K = 1,
    _5000K = 2,
    _6500K = 3,
    _7500K = 4,
    _8200K = 5,
    _9300K = 6,
    _10000K = 7,
    _11500K = 8,
};
pub const MC_COLOR_TEMPERATURE_UNKNOWN = MC_COLOR_TEMPERATURE.UNKNOWN;
pub const MC_COLOR_TEMPERATURE_4000K = MC_COLOR_TEMPERATURE._4000K;
pub const MC_COLOR_TEMPERATURE_5000K = MC_COLOR_TEMPERATURE._5000K;
pub const MC_COLOR_TEMPERATURE_6500K = MC_COLOR_TEMPERATURE._6500K;
pub const MC_COLOR_TEMPERATURE_7500K = MC_COLOR_TEMPERATURE._7500K;
pub const MC_COLOR_TEMPERATURE_8200K = MC_COLOR_TEMPERATURE._8200K;
pub const MC_COLOR_TEMPERATURE_9300K = MC_COLOR_TEMPERATURE._9300K;
pub const MC_COLOR_TEMPERATURE_10000K = MC_COLOR_TEMPERATURE._10000K;
pub const MC_COLOR_TEMPERATURE_11500K = MC_COLOR_TEMPERATURE._11500K;


//--------------------------------------------------------------------------------
// Section: Functions (32)
//--------------------------------------------------------------------------------
pub extern "dxva2" fn GetNumberOfPhysicalMonitorsFromHMONITOR(
    hMonitor: HMONITOR,
    pdwNumberOfPhysicalMonitors: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn GetNumberOfPhysicalMonitorsFromIDirect3DDevice9(
    pDirect3DDevice9: *IDirect3DDevice9,
    pdwNumberOfPhysicalMonitors: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dxva2" fn GetPhysicalMonitorsFromHMONITOR(
    hMonitor: HMONITOR,
    dwPhysicalMonitorArraySize: u32,
    pPhysicalMonitorArray: [*]PHYSICAL_MONITOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn GetPhysicalMonitorsFromIDirect3DDevice9(
    pDirect3DDevice9: *IDirect3DDevice9,
    dwPhysicalMonitorArraySize: u32,
    pPhysicalMonitorArray: [*]PHYSICAL_MONITOR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dxva2" fn DestroyPhysicalMonitor(
    hMonitor: HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn DestroyPhysicalMonitors(
    dwPhysicalMonitorArraySize: u32,
    pPhysicalMonitorArray: [*]PHYSICAL_MONITOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn GetVCPFeatureAndVCPFeatureReply(
    hMonitor: HANDLE,
    bVCPCode: u8,
    pvct: ?*MC_VCP_CODE_TYPE,
    pdwCurrentValue: *u32,
    pdwMaximumValue: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn SetVCPFeature(
    hMonitor: HANDLE,
    bVCPCode: u8,
    dwNewValue: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn SaveCurrentSettings(
    hMonitor: HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn GetCapabilitiesStringLength(
    hMonitor: HANDLE,
    pdwCapabilitiesStringLengthInCharacters: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn CapabilitiesRequestAndCapabilitiesReply(
    hMonitor: HANDLE,
    pszASCIICapabilitiesString: [*:0]u8,
    dwCapabilitiesStringLengthInCharacters: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn GetTimingReport(
    hMonitor: HANDLE,
    pmtrMonitorTimingReport: *MC_TIMING_REPORT,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn GetMonitorCapabilities(
    hMonitor: HANDLE,
    pdwMonitorCapabilities: *u32,
    pdwSupportedColorTemperatures: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn SaveCurrentMonitorSettings(
    hMonitor: HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn GetMonitorTechnologyType(
    hMonitor: HANDLE,
    pdtyDisplayTechnologyType: *MC_DISPLAY_TECHNOLOGY_TYPE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn GetMonitorBrightness(
    hMonitor: HANDLE,
    pdwMinimumBrightness: *u32,
    pdwCurrentBrightness: *u32,
    pdwMaximumBrightness: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn GetMonitorContrast(
    hMonitor: HANDLE,
    pdwMinimumContrast: *u32,
    pdwCurrentContrast: *u32,
    pdwMaximumContrast: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn GetMonitorColorTemperature(
    hMonitor: HANDLE,
    pctCurrentColorTemperature: *MC_COLOR_TEMPERATURE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn GetMonitorRedGreenOrBlueDrive(
    hMonitor: HANDLE,
    dtDriveType: MC_DRIVE_TYPE,
    pdwMinimumDrive: *u32,
    pdwCurrentDrive: *u32,
    pdwMaximumDrive: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn GetMonitorRedGreenOrBlueGain(
    hMonitor: HANDLE,
    gtGainType: MC_GAIN_TYPE,
    pdwMinimumGain: *u32,
    pdwCurrentGain: *u32,
    pdwMaximumGain: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn SetMonitorBrightness(
    hMonitor: HANDLE,
    dwNewBrightness: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn SetMonitorContrast(
    hMonitor: HANDLE,
    dwNewContrast: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn SetMonitorColorTemperature(
    hMonitor: HANDLE,
    ctCurrentColorTemperature: MC_COLOR_TEMPERATURE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn SetMonitorRedGreenOrBlueDrive(
    hMonitor: HANDLE,
    dtDriveType: MC_DRIVE_TYPE,
    dwNewDrive: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn SetMonitorRedGreenOrBlueGain(
    hMonitor: HANDLE,
    gtGainType: MC_GAIN_TYPE,
    dwNewGain: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn DegaussMonitor(
    hMonitor: HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn GetMonitorDisplayAreaSize(
    hMonitor: HANDLE,
    stSizeType: MC_SIZE_TYPE,
    pdwMinimumWidthOrHeight: *u32,
    pdwCurrentWidthOrHeight: *u32,
    pdwMaximumWidthOrHeight: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn GetMonitorDisplayAreaPosition(
    hMonitor: HANDLE,
    ptPositionType: MC_POSITION_TYPE,
    pdwMinimumPosition: *u32,
    pdwCurrentPosition: *u32,
    pdwMaximumPosition: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn SetMonitorDisplayAreaSize(
    hMonitor: HANDLE,
    stSizeType: MC_SIZE_TYPE,
    dwNewDisplayAreaWidthOrHeight: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn SetMonitorDisplayAreaPosition(
    hMonitor: HANDLE,
    ptPositionType: MC_POSITION_TYPE,
    dwNewPosition: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn RestoreMonitorFactoryColorDefaults(
    hMonitor: HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "dxva2" fn RestoreMonitorFactoryDefaults(
    hMonitor: HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (4)
//--------------------------------------------------------------------------------
const HMONITOR = @import("gdi.zig").HMONITOR;
const HANDLE = @import("system_services.zig").HANDLE;
const IDirect3DDevice9 = @import("direct3d9.zig").IDirect3DDevice9;
const HRESULT = @import("com.zig").HRESULT;

test {
    const constant_export_count = 0;
    const type_export_count = 9;
    const enum_value_export_count = 30;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 32;
    const unicode_alias_count = 0;
    const import_count = 4;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

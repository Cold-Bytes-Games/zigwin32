//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (76)
//--------------------------------------------------------------------------------
pub const NCBNAMSZ : u32 = 16;
pub const MAX_LANA : u32 = 254;
pub const NAME_FLAGS_MASK : u32 = 135;
pub const GROUP_NAME : u32 = 128;
pub const UNIQUE_NAME : u32 = 0;
pub const REGISTERING : u32 = 0;
pub const REGISTERED : u32 = 4;
pub const DEREGISTERED : u32 = 5;
pub const DUPLICATE : u32 = 6;
pub const DUPLICATE_DEREG : u32 = 7;
pub const NCBCALL : u32 = 16;
pub const NCBLISTEN : u32 = 17;
pub const NCBHANGUP : u32 = 18;
pub const NCBSEND : u32 = 20;
pub const NCBRECV : u32 = 21;
pub const NCBRECVANY : u32 = 22;
pub const NCBCHAINSEND : u32 = 23;
pub const NCBDGSEND : u32 = 32;
pub const NCBDGRECV : u32 = 33;
pub const NCBDGSENDBC : u32 = 34;
pub const NCBDGRECVBC : u32 = 35;
pub const NCBADDNAME : u32 = 48;
pub const NCBDELNAME : u32 = 49;
pub const NCBRESET : u32 = 50;
pub const NCBASTAT : u32 = 51;
pub const NCBSSTAT : u32 = 52;
pub const NCBCANCEL : u32 = 53;
pub const NCBADDGRNAME : u32 = 54;
pub const NCBENUM : u32 = 55;
pub const NCBUNLINK : u32 = 112;
pub const NCBSENDNA : u32 = 113;
pub const NCBCHAINSENDNA : u32 = 114;
pub const NCBLANSTALERT : u32 = 115;
pub const NCBACTION : u32 = 119;
pub const NCBFINDNAME : u32 = 120;
pub const NCBTRACE : u32 = 121;
pub const ASYNCH : u32 = 128;
pub const NRC_GOODRET : u32 = 0;
pub const NRC_BUFLEN : u32 = 1;
pub const NRC_ILLCMD : u32 = 3;
pub const NRC_CMDTMO : u32 = 5;
pub const NRC_INCOMP : u32 = 6;
pub const NRC_BADDR : u32 = 7;
pub const NRC_SNUMOUT : u32 = 8;
pub const NRC_NORES : u32 = 9;
pub const NRC_SCLOSED : u32 = 10;
pub const NRC_CMDCAN : u32 = 11;
pub const NRC_DUPNAME : u32 = 13;
pub const NRC_NAMTFUL : u32 = 14;
pub const NRC_ACTSES : u32 = 15;
pub const NRC_LOCTFUL : u32 = 17;
pub const NRC_REMTFUL : u32 = 18;
pub const NRC_ILLNN : u32 = 19;
pub const NRC_NOCALL : u32 = 20;
pub const NRC_NOWILD : u32 = 21;
pub const NRC_INUSE : u32 = 22;
pub const NRC_NAMERR : u32 = 23;
pub const NRC_SABORT : u32 = 24;
pub const NRC_NAMCONF : u32 = 25;
pub const NRC_IFBUSY : u32 = 33;
pub const NRC_TOOMANY : u32 = 34;
pub const NRC_BRIDGE : u32 = 35;
pub const NRC_CANOCCR : u32 = 36;
pub const NRC_CANCEL : u32 = 38;
pub const NRC_DUPENV : u32 = 48;
pub const NRC_ENVNOTDEF : u32 = 52;
pub const NRC_OSRESNOTAV : u32 = 53;
pub const NRC_MAXAPPS : u32 = 54;
pub const NRC_NOSAPS : u32 = 55;
pub const NRC_NORESOURCES : u32 = 56;
pub const NRC_INVADDRESS : u32 = 57;
pub const NRC_INVDDID : u32 = 59;
pub const NRC_LOCKFAIL : u32 = 60;
pub const NRC_OPENERR : u32 = 63;
pub const NRC_SYSTEM : u32 = 64;
pub const NRC_PENDING : u32 = 255;

//--------------------------------------------------------------------------------
// Section: Types (10)
//--------------------------------------------------------------------------------
pub const NCB = extern struct {
    ncb_command: u8,
    ncb_retcode: u8,
    ncb_lsn: u8,
    ncb_num: u8,
    ncb_buffer: *u8,
    ncb_length: u16,
    ncb_callname: [16]u8,
    ncb_name: [16]u8,
    ncb_rto: u8,
    ncb_sto: u8,
    ncb_post: ?*c_void,
    ncb_lana_num: u8,
    ncb_cmd_cplt: u8,
    ncb_reserve: [10]u8,
    ncb_event: HANDLE,
};

pub const ADAPTER_STATUS = extern struct {
    adapter_address: [6]u8,
    rev_major: u8,
    reserved0: u8,
    adapter_type: u8,
    rev_minor: u8,
    duration: u16,
    frmr_recv: u16,
    frmr_xmit: u16,
    iframe_recv_err: u16,
    xmit_aborts: u16,
    xmit_success: u32,
    recv_success: u32,
    iframe_xmit_err: u16,
    recv_buff_unavail: u16,
    t1_timeouts: u16,
    ti_timeouts: u16,
    reserved1: u32,
    free_ncbs: u16,
    max_cfg_ncbs: u16,
    max_ncbs: u16,
    xmit_buf_unavail: u16,
    max_dgram_size: u16,
    pending_sess: u16,
    max_cfg_sess: u16,
    max_sess: u16,
    max_sess_pkt_size: u16,
    name_count: u16,
};

pub const NAME_BUFFER = extern struct {
    name: [16]u8,
    name_num: u8,
    name_flags: u8,
};

pub const SESSION_HEADER = extern struct {
    sess_name: u8,
    num_sess: u8,
    rcv_dg_outstanding: u8,
    rcv_any_outstanding: u8,
};

pub const SESSION_BUFFER = extern struct {
    lsn: u8,
    state: SESSION_BUFFER_stateFlags,
    local_name: [16]u8,
    remote_name: [16]u8,
    rcvs_outstanding: u8,
    sends_outstanding: u8,
};

pub const LANA_ENUM = extern struct {
    length: u8,
    lana: [255]u8,
};

pub const FIND_NAME_HEADER = extern struct {
    node_count: u16,
    reserved: u8,
    unique_group: u8,
};

pub const FIND_NAME_BUFFER = extern struct {
    length: u8,
    access_control: u8,
    frame_control: u8,
    destination_addr: [6]u8,
    source_addr: [6]u8,
    routing_info: [18]u8,
};

pub const ACTION_HEADER = extern struct {
    transport_id: u32,
    action_code: u16,
    reserved: u16,
};

pub const SESSION_BUFFER_stateFlags = extern enum(u32) {
    LISTEN_OUTSTANDING = 1,
    CALL_PENDING = 2,
    SESSION_ESTABLISHED = 3,
    HANGUP_PENDING = 4,
    HANGUP_COMPLETE = 5,
    SESSION_ABORTED = 6,
};
pub const LISTEN_OUTSTANDING = SESSION_BUFFER_stateFlags.LISTEN_OUTSTANDING;
pub const CALL_PENDING = SESSION_BUFFER_stateFlags.CALL_PENDING;
pub const SESSION_ESTABLISHED = SESSION_BUFFER_stateFlags.SESSION_ESTABLISHED;
pub const HANGUP_PENDING = SESSION_BUFFER_stateFlags.HANGUP_PENDING;
pub const HANGUP_COMPLETE = SESSION_BUFFER_stateFlags.HANGUP_COMPLETE;
pub const SESSION_ABORTED = SESSION_BUFFER_stateFlags.SESSION_ABORTED;


//--------------------------------------------------------------------------------
// Section: Functions (1)
//--------------------------------------------------------------------------------
pub extern "NETAPI32" fn Netbios(
    pncb: *NCB,
) callconv(@import("std").os.windows.WINAPI) u8;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (1)
//--------------------------------------------------------------------------------
const HANDLE = @import("system_services.zig").HANDLE;

test {
    const constant_export_count = 76;
    const type_export_count = 10;
    const enum_value_export_count = 6;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 1;
    const unicode_alias_count = 0;
    const import_count = 1;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

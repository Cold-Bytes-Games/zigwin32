//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (6)
//--------------------------------------------------------------------------------
pub const CastingSourceInfo_Property_PreferredSourceUriScheme = "PreferredSourceUriScheme";
pub const CastingSourceInfo_Property_CastingTypes = "CastingTypes";
pub const CastingSourceInfo_Property_ProtectedMedia = "ProtectedMedia";
pub const CLSID_SoftwareBitmapNativeFactory = @import("../zig.zig").Guid.initString("84e65691-8602-4a84-be46-708be9cd4b74");
pub const CLSID_AudioFrameNativeFactory = @import("../zig.zig").Guid.initString("16a0a3b9-9f65-4102-9367-2cda3a4f372a");
pub const CLSID_VideoFrameNativeFactory = @import("../zig.zig").Guid.initString("d194386a-04e3-4814-8100-b2b0ae6d78c7");

//--------------------------------------------------------------------------------
// Section: Types (81)
//--------------------------------------------------------------------------------
pub const EventRegistrationToken = extern struct {
    value: i64,
};

// TODO: this type has a FreeFunc 'WindowsDeleteString', what can Zig do with this information?
pub const HSTRING = ?*c_void;

pub const ACTIVATIONTYPE = extern enum(i32) {
    UNCATEGORIZED = 0,
    FROM_MONIKER = 1,
    FROM_DATA = 2,
    FROM_STORAGE = 4,
    FROM_STREAM = 8,
    FROM_FILE = 16,
};
pub const ACTIVATIONTYPE_UNCATEGORIZED = ACTIVATIONTYPE.UNCATEGORIZED;
pub const ACTIVATIONTYPE_FROM_MONIKER = ACTIVATIONTYPE.FROM_MONIKER;
pub const ACTIVATIONTYPE_FROM_DATA = ACTIVATIONTYPE.FROM_DATA;
pub const ACTIVATIONTYPE_FROM_STORAGE = ACTIVATIONTYPE.FROM_STORAGE;
pub const ACTIVATIONTYPE_FROM_STREAM = ACTIVATIONTYPE.FROM_STREAM;
pub const ACTIVATIONTYPE_FROM_FILE = ACTIVATIONTYPE.FROM_FILE;

const IID_IAgileReference_Value = @import("../zig.zig").Guid.initString("C03F6A43-65A4-9818-987E-E0B810D2A6F2");
pub const IID_IAgileReference = &IID_IAgileReference_Value;
pub const IAgileReference = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Resolve: fn(
            self: *const IAgileReference,
            riid: *const Guid,
            ppvObjectReference: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAgileReference_Resolve(self: *const T, riid: *const Guid, ppvObjectReference: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAgileReference.VTable, self.vtable).Resolve(@ptrCast(*const IAgileReference, self), riid, ppvObjectReference);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const ServerInformation = extern struct {
    dwServerPid: u32,
    dwServerTid: u32,
    ui64ServerAddress: u64,
};

pub const AgileReferenceOptions = extern enum(i32) {
    AGILEREFERENCE_DEFAULT = 0,
    AGILEREFERENCE_DELAYEDMARSHAL = 1,
};
pub const AGILEREFERENCE_DEFAULT = AgileReferenceOptions.AGILEREFERENCE_DEFAULT;
pub const AGILEREFERENCE_DELAYEDMARSHAL = AgileReferenceOptions.AGILEREFERENCE_DELAYEDMARSHAL;

const IID_IApartmentShutdown_Value = @import("../zig.zig").Guid.initString("A2F05A09-27A2-42B5-BC0E-AC163EF49D9B");
pub const IID_IApartmentShutdown = &IID_IApartmentShutdown_Value;
pub const IApartmentShutdown = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnUninitialize: fn(
            self: *const IApartmentShutdown,
            ui64ApartmentIdentifier: u64,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApartmentShutdown_OnUninitialize(self: *const T, ui64ApartmentIdentifier: u64) callconv(.Inline) void {
            return @ptrCast(*const IApartmentShutdown.VTable, self.vtable).OnUninitialize(@ptrCast(*const IApartmentShutdown, self), ui64ApartmentIdentifier);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const HSTRING_HEADER = extern struct {
    Reserved: HSTRING_HEADER._Reserved_e__Union,
    const _Reserved_e__Union = u32; // TODO: generate this nested type!
};

pub const TrustLevel = extern enum(i32) {
    BaseTrust = 0,
    PartialTrust = 1,
    FullTrust = 2,
};
pub const BaseTrust = TrustLevel.BaseTrust;
pub const PartialTrust = TrustLevel.PartialTrust;
pub const FullTrust = TrustLevel.FullTrust;

const IID_IInspectable_Value = @import("../zig.zig").Guid.initString("AF86E2E0-B12D-4C6A-9C5A-D7AA65101E90");
pub const IID_IInspectable = &IID_IInspectable_Value;
pub const IInspectable = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIids: fn(
            self: *const IInspectable,
            iidCount: *u32,
            iids: ?[*]?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRuntimeClassName: fn(
            self: *const IInspectable,
            className: *HSTRING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTrustLevel: fn(
            self: *const IInspectable,
            trustLevel: *TrustLevel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInspectable_GetIids(self: *const T, iidCount: *u32, iids: ?[*]?*Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInspectable.VTable, self.vtable).GetIids(@ptrCast(*const IInspectable, self), iidCount, iids);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInspectable_GetRuntimeClassName(self: *const T, className: *HSTRING) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInspectable.VTable, self.vtable).GetRuntimeClassName(@ptrCast(*const IInspectable, self), className);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInspectable_GetTrustLevel(self: *const T, trustLevel: *TrustLevel) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInspectable.VTable, self.vtable).GetTrustLevel(@ptrCast(*const IInspectable, self), trustLevel);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAccountsSettingsPaneInterop_Value = @import("../zig.zig").Guid.initString("D3EE12AD-3865-4362-9746-B75A682DF0E6");
pub const IID_IAccountsSettingsPaneInterop = &IID_IAccountsSettingsPaneInterop_Value;
pub const IAccountsSettingsPaneInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: fn(
            self: *const IAccountsSettingsPaneInterop,
            appWindow: HWND,
            riid: *const Guid,
            accountsSettingsPane: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowManageAccountsForWindowAsync: fn(
            self: *const IAccountsSettingsPaneInterop,
            appWindow: HWND,
            riid: *const Guid,
            asyncAction: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowAddAccountForWindowAsync: fn(
            self: *const IAccountsSettingsPaneInterop,
            appWindow: HWND,
            riid: *const Guid,
            asyncAction: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAccountsSettingsPaneInterop_GetForWindow(self: *const T, appWindow: HWND, riid: *const Guid, accountsSettingsPane: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAccountsSettingsPaneInterop.VTable, self.vtable).GetForWindow(@ptrCast(*const IAccountsSettingsPaneInterop, self), appWindow, riid, accountsSettingsPane);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAccountsSettingsPaneInterop_ShowManageAccountsForWindowAsync(self: *const T, appWindow: HWND, riid: *const Guid, asyncAction: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAccountsSettingsPaneInterop.VTable, self.vtable).ShowManageAccountsForWindowAsync(@ptrCast(*const IAccountsSettingsPaneInterop, self), appWindow, riid, asyncAction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAccountsSettingsPaneInterop_ShowAddAccountForWindowAsync(self: *const T, appWindow: HWND, riid: *const Guid, asyncAction: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAccountsSettingsPaneInterop.VTable, self.vtable).ShowAddAccountForWindowAsync(@ptrCast(*const IAccountsSettingsPaneInterop, self), appWindow, riid, asyncAction);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAppServiceConnectionExtendedExecution_Value = @import("../zig.zig").Guid.initString("65219584-F9CB-4AE3-81F9-A28A6CA450D9");
pub const IID_IAppServiceConnectionExtendedExecution = &IID_IAppServiceConnectionExtendedExecution_Value;
pub const IAppServiceConnectionExtendedExecution = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OpenForExtendedExecutionAsync: fn(
            self: *const IAppServiceConnectionExtendedExecution,
            riid: *const Guid,
            operation: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAppServiceConnectionExtendedExecution_OpenForExtendedExecutionAsync(self: *const T, riid: *const Guid, operation: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAppServiceConnectionExtendedExecution.VTable, self.vtable).OpenForExtendedExecutionAsync(@ptrCast(*const IAppServiceConnectionExtendedExecution, self), riid, operation);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICorrelationVectorSource_Value = @import("../zig.zig").Guid.initString("152B8A3B-B9B9-4685-B56E-974847BC7545");
pub const IID_ICorrelationVectorSource = &IID_ICorrelationVectorSource_Value;
pub const ICorrelationVectorSource = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_CorrelationVector: fn(
            self: *const ICorrelationVectorSource,
            cv: *HSTRING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICorrelationVectorSource_get_CorrelationVector(self: *const T, cv: *HSTRING) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICorrelationVectorSource.VTable, self.vtable).get_CorrelationVector(@ptrCast(*const ICorrelationVectorSource, self), cv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CASTING_CONNECTION_ERROR_STATUS = extern enum(i32) {
    SUCCEEDED = 0,
    DEVICE_DID_NOT_RESPOND = 1,
    DEVICE_ERROR = 2,
    DEVICE_LOCKED = 3,
    PROTECTED_PLAYBACK_FAILED = 4,
    INVALID_CASTING_SOURCE = 5,
    UNKNOWN = 6,
};
pub const CASTING_CONNECTION_ERROR_STATUS_SUCCEEDED = CASTING_CONNECTION_ERROR_STATUS.SUCCEEDED;
pub const CASTING_CONNECTION_ERROR_STATUS_DEVICE_DID_NOT_RESPOND = CASTING_CONNECTION_ERROR_STATUS.DEVICE_DID_NOT_RESPOND;
pub const CASTING_CONNECTION_ERROR_STATUS_DEVICE_ERROR = CASTING_CONNECTION_ERROR_STATUS.DEVICE_ERROR;
pub const CASTING_CONNECTION_ERROR_STATUS_DEVICE_LOCKED = CASTING_CONNECTION_ERROR_STATUS.DEVICE_LOCKED;
pub const CASTING_CONNECTION_ERROR_STATUS_PROTECTED_PLAYBACK_FAILED = CASTING_CONNECTION_ERROR_STATUS.PROTECTED_PLAYBACK_FAILED;
pub const CASTING_CONNECTION_ERROR_STATUS_INVALID_CASTING_SOURCE = CASTING_CONNECTION_ERROR_STATUS.INVALID_CASTING_SOURCE;
pub const CASTING_CONNECTION_ERROR_STATUS_UNKNOWN = CASTING_CONNECTION_ERROR_STATUS.UNKNOWN;

pub const CASTING_CONNECTION_STATE = extern enum(i32) {
    DISCONNECTED = 0,
    CONNECTED = 1,
    RENDERING = 2,
    DISCONNECTING = 3,
    CONNECTING = 4,
};
pub const CASTING_CONNECTION_STATE_DISCONNECTED = CASTING_CONNECTION_STATE.DISCONNECTED;
pub const CASTING_CONNECTION_STATE_CONNECTED = CASTING_CONNECTION_STATE.CONNECTED;
pub const CASTING_CONNECTION_STATE_RENDERING = CASTING_CONNECTION_STATE.RENDERING;
pub const CASTING_CONNECTION_STATE_DISCONNECTING = CASTING_CONNECTION_STATE.DISCONNECTING;
pub const CASTING_CONNECTION_STATE_CONNECTING = CASTING_CONNECTION_STATE.CONNECTING;

const IID_ICastingEventHandler_Value = @import("../zig.zig").Guid.initString("C79A6CB7-BEBD-47A6-A2AD-4D45AD79C7BC");
pub const IID_ICastingEventHandler = &IID_ICastingEventHandler_Value;
pub const ICastingEventHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStateChanged: fn(
            self: *const ICastingEventHandler,
            newState: CASTING_CONNECTION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnError: fn(
            self: *const ICastingEventHandler,
            errorStatus: CASTING_CONNECTION_ERROR_STATUS,
            errorMessage: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICastingEventHandler_OnStateChanged(self: *const T, newState: CASTING_CONNECTION_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICastingEventHandler.VTable, self.vtable).OnStateChanged(@ptrCast(*const ICastingEventHandler, self), newState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICastingEventHandler_OnError(self: *const T, errorStatus: CASTING_CONNECTION_ERROR_STATUS, errorMessage: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICastingEventHandler.VTable, self.vtable).OnError(@ptrCast(*const ICastingEventHandler, self), errorStatus, errorMessage);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICastingController_Value = @import("../zig.zig").Guid.initString("F0A56423-A664-4FBD-8B43-409A45E8D9A1");
pub const IID_ICastingController = &IID_ICastingController_Value;
pub const ICastingController = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const ICastingController,
            castingEngine: *IUnknown,
            castingSource: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Connect: fn(
            self: *const ICastingController,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: fn(
            self: *const ICastingController,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: fn(
            self: *const ICastingController,
            eventHandler: *ICastingEventHandler,
            cookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnAdvise: fn(
            self: *const ICastingController,
            cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICastingController_Initialize(self: *const T, castingEngine: *IUnknown, castingSource: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICastingController.VTable, self.vtable).Initialize(@ptrCast(*const ICastingController, self), castingEngine, castingSource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICastingController_Connect(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICastingController.VTable, self.vtable).Connect(@ptrCast(*const ICastingController, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICastingController_Disconnect(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICastingController.VTable, self.vtable).Disconnect(@ptrCast(*const ICastingController, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICastingController_Advise(self: *const T, eventHandler: *ICastingEventHandler, cookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICastingController.VTable, self.vtable).Advise(@ptrCast(*const ICastingController, self), eventHandler, cookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICastingController_UnAdvise(self: *const T, cookie: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICastingController.VTable, self.vtable).UnAdvise(@ptrCast(*const ICastingController, self), cookie);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICastingSourceInfo_Value = @import("../zig.zig").Guid.initString("45101AB7-7C3A-4BCE-9500-12C09024B298");
pub const IID_ICastingSourceInfo = &IID_ICastingSourceInfo_Value;
pub const ICastingSourceInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetController: fn(
            self: *const ICastingSourceInfo,
            controller: **ICastingController,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperties: fn(
            self: *const ICastingSourceInfo,
            props: **INamedPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICastingSourceInfo_GetController(self: *const T, controller: **ICastingController) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICastingSourceInfo.VTable, self.vtable).GetController(@ptrCast(*const ICastingSourceInfo, self), controller);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICastingSourceInfo_GetProperties(self: *const T, props: **INamedPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICastingSourceInfo.VTable, self.vtable).GetProperties(@ptrCast(*const ICastingSourceInfo, self), props);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDragDropManagerInterop_Value = @import("../zig.zig").Guid.initString("5AD8CBA7-4C01-4DAC-9074-827894292D63");
pub const IID_IDragDropManagerInterop = &IID_IDragDropManagerInterop_Value;
pub const IDragDropManagerInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: fn(
            self: *const IDragDropManagerInterop,
            hwnd: HWND,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDragDropManagerInterop_GetForWindow(self: *const T, hwnd: HWND, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDragDropManagerInterop.VTable, self.vtable).GetForWindow(@ptrCast(*const IDragDropManagerInterop, self), hwnd, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInputPaneInterop_Value = @import("../zig.zig").Guid.initString("75CF2C57-9195-4931-8332-F0B409E916AF");
pub const IID_IInputPaneInterop = &IID_IInputPaneInterop_Value;
pub const IInputPaneInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: fn(
            self: *const IInputPaneInterop,
            appWindow: HWND,
            riid: *const Guid,
            inputPane: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInputPaneInterop_GetForWindow(self: *const T, appWindow: HWND, riid: *const Guid, inputPane: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInputPaneInterop.VTable, self.vtable).GetForWindow(@ptrCast(*const IInputPaneInterop, self), appWindow, riid, inputPane);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPlayToManagerInterop_Value = @import("../zig.zig").Guid.initString("24394699-1F2C-4EB3-8CD7-0EC1DA42A540");
pub const IID_IPlayToManagerInterop = &IID_IPlayToManagerInterop_Value;
pub const IPlayToManagerInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: fn(
            self: *const IPlayToManagerInterop,
            appWindow: HWND,
            riid: *const Guid,
            playToManager: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowPlayToUIForWindow: fn(
            self: *const IPlayToManagerInterop,
            appWindow: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPlayToManagerInterop_GetForWindow(self: *const T, appWindow: HWND, riid: *const Guid, playToManager: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPlayToManagerInterop.VTable, self.vtable).GetForWindow(@ptrCast(*const IPlayToManagerInterop, self), appWindow, riid, playToManager);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPlayToManagerInterop_ShowPlayToUIForWindow(self: *const T, appWindow: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPlayToManagerInterop.VTable, self.vtable).ShowPlayToUIForWindow(@ptrCast(*const IPlayToManagerInterop, self), appWindow);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinting3DManagerInterop_Value = @import("../zig.zig").Guid.initString("9CA31010-1484-4587-B26B-DDDF9F9CAECD");
pub const IID_IPrinting3DManagerInterop = &IID_IPrinting3DManagerInterop_Value;
pub const IPrinting3DManagerInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: fn(
            self: *const IPrinting3DManagerInterop,
            appWindow: HWND,
            riid: *const Guid,
            printManager: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowPrintUIForWindowAsync: fn(
            self: *const IPrinting3DManagerInterop,
            appWindow: HWND,
            riid: *const Guid,
            asyncOperation: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrinting3DManagerInterop_GetForWindow(self: *const T, appWindow: HWND, riid: *const Guid, printManager: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrinting3DManagerInterop.VTable, self.vtable).GetForWindow(@ptrCast(*const IPrinting3DManagerInterop, self), appWindow, riid, printManager);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrinting3DManagerInterop_ShowPrintUIForWindowAsync(self: *const T, appWindow: HWND, riid: *const Guid, asyncOperation: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrinting3DManagerInterop.VTable, self.vtable).ShowPrintUIForWindowAsync(@ptrCast(*const IPrinting3DManagerInterop, self), appWindow, riid, asyncOperation);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintManagerInterop_Value = @import("../zig.zig").Guid.initString("C5435A42-8D43-4E7B-A68A-EF311E392087");
pub const IID_IPrintManagerInterop = &IID_IPrintManagerInterop_Value;
pub const IPrintManagerInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: fn(
            self: *const IPrintManagerInterop,
            appWindow: HWND,
            riid: *const Guid,
            printManager: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowPrintUIForWindowAsync: fn(
            self: *const IPrintManagerInterop,
            appWindow: HWND,
            riid: *const Guid,
            asyncOperation: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintManagerInterop_GetForWindow(self: *const T, appWindow: HWND, riid: *const Guid, printManager: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintManagerInterop.VTable, self.vtable).GetForWindow(@ptrCast(*const IPrintManagerInterop, self), appWindow, riid, printManager);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintManagerInterop_ShowPrintUIForWindowAsync(self: *const T, appWindow: HWND, riid: *const Guid, asyncOperation: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintManagerInterop.VTable, self.vtable).ShowPrintUIForWindowAsync(@ptrCast(*const IPrintManagerInterop, self), appWindow, riid, asyncOperation);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICorrelationVectorInformation_Value = @import("../zig.zig").Guid.initString("83C78B3C-D88B-4950-AA6E-22B8D22AABD3");
pub const IID_ICorrelationVectorInformation = &IID_ICorrelationVectorInformation_Value;
pub const ICorrelationVectorInformation = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        get_LastCorrelationVectorForThread: fn(
            self: *const ICorrelationVectorInformation,
            cv: *HSTRING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NextCorrelationVectorForThread: fn(
            self: *const ICorrelationVectorInformation,
            cv: *HSTRING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_NextCorrelationVectorForThread: fn(
            self: *const ICorrelationVectorInformation,
            cv: HSTRING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICorrelationVectorInformation_get_LastCorrelationVectorForThread(self: *const T, cv: *HSTRING) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICorrelationVectorInformation.VTable, self.vtable).get_LastCorrelationVectorForThread(@ptrCast(*const ICorrelationVectorInformation, self), cv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICorrelationVectorInformation_get_NextCorrelationVectorForThread(self: *const T, cv: *HSTRING) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICorrelationVectorInformation.VTable, self.vtable).get_NextCorrelationVectorForThread(@ptrCast(*const ICorrelationVectorInformation, self), cv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICorrelationVectorInformation_put_NextCorrelationVectorForThread(self: *const T, cv: HSTRING) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICorrelationVectorInformation.VTable, self.vtable).put_NextCorrelationVectorForThread(@ptrCast(*const ICorrelationVectorInformation, self), cv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUIViewSettingsInterop_Value = @import("../zig.zig").Guid.initString("3694DBF9-8F68-44BE-8FF5-195C98EDE8A6");
pub const IID_IUIViewSettingsInterop = &IID_IUIViewSettingsInterop_Value;
pub const IUIViewSettingsInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: fn(
            self: *const IUIViewSettingsInterop,
            hwnd: HWND,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUIViewSettingsInterop_GetForWindow(self: *const T, hwnd: HWND, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUIViewSettingsInterop.VTable, self.vtable).GetForWindow(@ptrCast(*const IUIViewSettingsInterop, self), hwnd, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUserActivityInterop_Value = @import("../zig.zig").Guid.initString("1ADE314D-0E0A-40D9-824C-9A088A50059F");
pub const IID_IUserActivityInterop = &IID_IUserActivityInterop_Value;
pub const IUserActivityInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        CreateSessionForWindow: fn(
            self: *const IUserActivityInterop,
            window: HWND,
            iid: *const Guid,
            value: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserActivityInterop_CreateSessionForWindow(self: *const T, window: HWND, iid: *const Guid, value: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserActivityInterop.VTable, self.vtable).CreateSessionForWindow(@ptrCast(*const IUserActivityInterop, self), window, iid, value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUserActivitySourceHostInterop_Value = @import("../zig.zig").Guid.initString("C15DF8BC-8844-487A-B85B-7578E0F61419");
pub const IID_IUserActivitySourceHostInterop = &IID_IUserActivitySourceHostInterop_Value;
pub const IUserActivitySourceHostInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        SetActivitySourceHost: fn(
            self: *const IUserActivitySourceHostInterop,
            activitySourceHost: HSTRING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserActivitySourceHostInterop_SetActivitySourceHost(self: *const T, activitySourceHost: HSTRING) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserActivitySourceHostInterop.VTable, self.vtable).SetActivitySourceHost(@ptrCast(*const IUserActivitySourceHostInterop, self), activitySourceHost);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUserActivityRequestManagerInterop_Value = @import("../zig.zig").Guid.initString("DD69F876-9699-4715-9095-E37EA30DFA1B");
pub const IID_IUserActivityRequestManagerInterop = &IID_IUserActivityRequestManagerInterop_Value;
pub const IUserActivityRequestManagerInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: fn(
            self: *const IUserActivityRequestManagerInterop,
            window: HWND,
            iid: *const Guid,
            value: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserActivityRequestManagerInterop_GetForWindow(self: *const T, window: HWND, iid: *const Guid, value: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserActivityRequestManagerInterop.VTable, self.vtable).GetForWindow(@ptrCast(*const IUserActivityRequestManagerInterop, self), window, iid, value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUserConsentVerifierInterop_Value = @import("../zig.zig").Guid.initString("39E050C3-4E74-441A-8DC0-B81104DF949C");
pub const IID_IUserConsentVerifierInterop = &IID_IUserConsentVerifierInterop_Value;
pub const IUserConsentVerifierInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        RequestVerificationForWindowAsync: fn(
            self: *const IUserConsentVerifierInterop,
            appWindow: HWND,
            message: HSTRING,
            riid: *const Guid,
            asyncOperation: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserConsentVerifierInterop_RequestVerificationForWindowAsync(self: *const T, appWindow: HWND, message: HSTRING, riid: *const Guid, asyncOperation: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserConsentVerifierInterop.VTable, self.vtable).RequestVerificationForWindowAsync(@ptrCast(*const IUserConsentVerifierInterop, self), appWindow, message, riid, asyncOperation);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWebAuthenticationCoreManagerInterop_Value = @import("../zig.zig").Guid.initString("F4B8E804-811E-4436-B69C-44CB67B72084");
pub const IID_IWebAuthenticationCoreManagerInterop = &IID_IWebAuthenticationCoreManagerInterop_Value;
pub const IWebAuthenticationCoreManagerInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        RequestTokenForWindowAsync: fn(
            self: *const IWebAuthenticationCoreManagerInterop,
            appWindow: HWND,
            request: *IInspectable,
            riid: *const Guid,
            asyncInfo: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestTokenWithWebAccountForWindowAsync: fn(
            self: *const IWebAuthenticationCoreManagerInterop,
            appWindow: HWND,
            request: *IInspectable,
            webAccount: *IInspectable,
            riid: *const Guid,
            asyncInfo: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWebAuthenticationCoreManagerInterop_RequestTokenForWindowAsync(self: *const T, appWindow: HWND, request: *IInspectable, riid: *const Guid, asyncInfo: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWebAuthenticationCoreManagerInterop.VTable, self.vtable).RequestTokenForWindowAsync(@ptrCast(*const IWebAuthenticationCoreManagerInterop, self), appWindow, request, riid, asyncInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWebAuthenticationCoreManagerInterop_RequestTokenWithWebAccountForWindowAsync(self: *const T, appWindow: HWND, request: *IInspectable, webAccount: *IInspectable, riid: *const Guid, asyncInfo: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWebAuthenticationCoreManagerInterop.VTable, self.vtable).RequestTokenWithWebAccountForWindowAsync(@ptrCast(*const IWebAuthenticationCoreManagerInterop, self), appWindow, request, webAccount, riid, asyncInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PFN_PDF_CREATE_RENDERER = fn(
    param0: *IDXGIDevice,
    param1: **IPdfRendererNative,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PDF_RENDER_PARAMS = extern struct {
    SourceRect: D2D_RECT_F,
    DestinationWidth: u32,
    DestinationHeight: u32,
    BackgroundColor: DXGI_RGBA,
    IgnoreHighContrast: u8,
};

const IID_IPdfRendererNative_Value = @import("../zig.zig").Guid.initString("7D9DCD91-D277-4947-8527-07A0DAEDA94A");
pub const IID_IPdfRendererNative = &IID_IPdfRendererNative_Value;
pub const IPdfRendererNative = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RenderPageToSurface: fn(
            self: *const IPdfRendererNative,
            pdfPage: *IUnknown,
            pSurface: *IDXGISurface,
            offset: POINT,
            pRenderParams: ?*PDF_RENDER_PARAMS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenderPageToDeviceContext: fn(
            self: *const IPdfRendererNative,
            pdfPage: *IUnknown,
            pD2DDeviceContext: *ID2D1DeviceContext,
            pRenderParams: ?*PDF_RENDER_PARAMS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPdfRendererNative_RenderPageToSurface(self: *const T, pdfPage: *IUnknown, pSurface: *IDXGISurface, offset: POINT, pRenderParams: ?*PDF_RENDER_PARAMS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPdfRendererNative.VTable, self.vtable).RenderPageToSurface(@ptrCast(*const IPdfRendererNative, self), pdfPage, pSurface, offset, pRenderParams);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPdfRendererNative_RenderPageToDeviceContext(self: *const T, pdfPage: *IUnknown, pD2DDeviceContext: *ID2D1DeviceContext, pRenderParams: ?*PDF_RENDER_PARAMS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPdfRendererNative.VTable, self.vtable).RenderPageToDeviceContext(@ptrCast(*const IPdfRendererNative, self), pdfPage, pD2DDeviceContext, pRenderParams);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDisplayDeviceInterop_Value = @import("../zig.zig").Guid.initString("64338358-366A-471B-BD56-DD8EF48E439B");
pub const IID_IDisplayDeviceInterop = &IID_IDisplayDeviceInterop_Value;
pub const IDisplayDeviceInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateSharedHandle: fn(
            self: *const IDisplayDeviceInterop,
            pObject: *IInspectable,
            pSecurityAttributes: *const SECURITY_ATTRIBUTES,
            Access: u32,
            Name: HSTRING,
            pHandle: *HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenSharedHandle: fn(
            self: *const IDisplayDeviceInterop,
            NTHandle: HANDLE,
            riid: Guid,
            ppvObj: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDisplayDeviceInterop_CreateSharedHandle(self: *const T, pObject: *IInspectable, pSecurityAttributes: *const SECURITY_ATTRIBUTES, Access: u32, Name: HSTRING, pHandle: *HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDisplayDeviceInterop.VTable, self.vtable).CreateSharedHandle(@ptrCast(*const IDisplayDeviceInterop, self), pObject, pSecurityAttributes, Access, Name, pHandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDisplayDeviceInterop_OpenSharedHandle(self: *const T, NTHandle: HANDLE, riid: Guid, ppvObj: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDisplayDeviceInterop.VTable, self.vtable).OpenSharedHandle(@ptrCast(*const IDisplayDeviceInterop, self), NTHandle, riid, ppvObj);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDisplayPathInterop_Value = @import("../zig.zig").Guid.initString("A6BA4205-E59E-4E71-B25B-4E436D21EE3D");
pub const IID_IDisplayPathInterop = &IID_IDisplayPathInterop_Value;
pub const IDisplayPathInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateSourcePresentationHandle: fn(
            self: *const IDisplayPathInterop,
            pValue: *HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceId: fn(
            self: *const IDisplayPathInterop,
            pSourceId: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDisplayPathInterop_CreateSourcePresentationHandle(self: *const T, pValue: *HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDisplayPathInterop.VTable, self.vtable).CreateSourcePresentationHandle(@ptrCast(*const IDisplayPathInterop, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDisplayPathInterop_GetSourceId(self: *const T, pSourceId: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDisplayPathInterop.VTable, self.vtable).GetSourceId(@ptrCast(*const IDisplayPathInterop, self), pSourceId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PINSPECT_HSTRING_CALLBACK = fn(
    context: *c_void,
    readAddress: ?*c_void,
    length: u32,
    buffer: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PINSPECT_HSTRING_CALLBACK2 = fn(
    context: *c_void,
    readAddress: u64,
    length: u32,
    buffer: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

const IID_IGraphicsCaptureItemInterop_Value = @import("../zig.zig").Guid.initString("3628E81B-3CAC-4C60-B7F4-23CE0E0C3356");
pub const IID_IGraphicsCaptureItemInterop = &IID_IGraphicsCaptureItemInterop_Value;
pub const IGraphicsCaptureItemInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateForWindow: fn(
            self: *const IGraphicsCaptureItemInterop,
            window: HWND,
            riid: *const Guid,
            result: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateForMonitor: fn(
            self: *const IGraphicsCaptureItemInterop,
            monitor: HMONITOR,
            riid: *const Guid,
            result: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGraphicsCaptureItemInterop_CreateForWindow(self: *const T, window: HWND, riid: *const Guid, result: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGraphicsCaptureItemInterop.VTable, self.vtable).CreateForWindow(@ptrCast(*const IGraphicsCaptureItemInterop, self), window, riid, result);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGraphicsCaptureItemInterop_CreateForMonitor(self: *const T, monitor: HMONITOR, riid: *const Guid, result: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGraphicsCaptureItemInterop.VTable, self.vtable).CreateForMonitor(@ptrCast(*const IGraphicsCaptureItemInterop, self), monitor, riid, result);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DDxgiInterfaceAccess_Value = @import("../zig.zig").Guid.initString("A9B3D012-3DF2-4EE3-B8D1-8695F457D3C1");
pub const IID_IDirect3DDxgiInterfaceAccess = &IID_IDirect3DDxgiInterfaceAccess_Value;
pub const IDirect3DDxgiInterfaceAccess = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInterface: fn(
            self: *const IDirect3DDxgiInterfaceAccess,
            iid: *const Guid,
            p: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDxgiInterfaceAccess_GetInterface(self: *const T, iid: *const Guid, p: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDxgiInterfaceAccess.VTable, self.vtable).GetInterface(@ptrCast(*const IDirect3DDxgiInterfaceAccess, self), iid, p);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISoftwareBitmapNative_Value = @import("../zig.zig").Guid.initString("94BC8415-04EA-4B2E-AF13-4DE95AA898EB");
pub const IID_ISoftwareBitmapNative = &IID_ISoftwareBitmapNative_Value;
pub const ISoftwareBitmapNative = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetData: fn(
            self: *const ISoftwareBitmapNative,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISoftwareBitmapNative_GetData(self: *const T, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISoftwareBitmapNative.VTable, self.vtable).GetData(@ptrCast(*const ISoftwareBitmapNative, self), riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISoftwareBitmapNativeFactory_Value = @import("../zig.zig").Guid.initString("C3C181EC-2914-4791-AF02-02D224A10B43");
pub const IID_ISoftwareBitmapNativeFactory = &IID_ISoftwareBitmapNativeFactory_Value;
pub const ISoftwareBitmapNativeFactory = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        CreateFromWICBitmap: fn(
            self: *const ISoftwareBitmapNativeFactory,
            data: *IWICBitmap,
            forceReadOnly: BOOL,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFromMF2DBuffer2: fn(
            self: *const ISoftwareBitmapNativeFactory,
            data: *IMF2DBuffer2,
            subtype: *const Guid,
            width: u32,
            height: u32,
            forceReadOnly: BOOL,
            minDisplayAperture: ?*const MFVideoArea,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISoftwareBitmapNativeFactory_CreateFromWICBitmap(self: *const T, data: *IWICBitmap, forceReadOnly: BOOL, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISoftwareBitmapNativeFactory.VTable, self.vtable).CreateFromWICBitmap(@ptrCast(*const ISoftwareBitmapNativeFactory, self), data, forceReadOnly, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISoftwareBitmapNativeFactory_CreateFromMF2DBuffer2(self: *const T, data: *IMF2DBuffer2, subtype: *const Guid, width: u32, height: u32, forceReadOnly: BOOL, minDisplayAperture: ?*const MFVideoArea, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISoftwareBitmapNativeFactory.VTable, self.vtable).CreateFromMF2DBuffer2(@ptrCast(*const ISoftwareBitmapNativeFactory, self), data, subtype, width, height, forceReadOnly, minDisplayAperture, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAudioFrameNative_Value = @import("../zig.zig").Guid.initString("20BE1E2E-930F-4746-9335-3C332F255093");
pub const IID_IAudioFrameNative = &IID_IAudioFrameNative_Value;
pub const IAudioFrameNative = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetData: fn(
            self: *const IAudioFrameNative,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioFrameNative_GetData(self: *const T, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioFrameNative.VTable, self.vtable).GetData(@ptrCast(*const IAudioFrameNative, self), riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IVideoFrameNative_Value = @import("../zig.zig").Guid.initString("26BA702B-314A-4620-AAF6-7A51AA58FA18");
pub const IID_IVideoFrameNative = &IID_IVideoFrameNative_Value;
pub const IVideoFrameNative = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetData: fn(
            self: *const IVideoFrameNative,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDevice: fn(
            self: *const IVideoFrameNative,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVideoFrameNative_GetData(self: *const T, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVideoFrameNative.VTable, self.vtable).GetData(@ptrCast(*const IVideoFrameNative, self), riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVideoFrameNative_GetDevice(self: *const T, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVideoFrameNative.VTable, self.vtable).GetDevice(@ptrCast(*const IVideoFrameNative, self), riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAudioFrameNativeFactory_Value = @import("../zig.zig").Guid.initString("7BD67CF8-BF7D-43E6-AF8D-B170EE0C0110");
pub const IID_IAudioFrameNativeFactory = &IID_IAudioFrameNativeFactory_Value;
pub const IAudioFrameNativeFactory = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        CreateFromMFSample: fn(
            self: *const IAudioFrameNativeFactory,
            data: *IMFSample,
            forceReadOnly: BOOL,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAudioFrameNativeFactory_CreateFromMFSample(self: *const T, data: *IMFSample, forceReadOnly: BOOL, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAudioFrameNativeFactory.VTable, self.vtable).CreateFromMFSample(@ptrCast(*const IAudioFrameNativeFactory, self), data, forceReadOnly, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IVideoFrameNativeFactory_Value = @import("../zig.zig").Guid.initString("69E3693E-8E1E-4E63-AC4C-7FDC21D9731D");
pub const IID_IVideoFrameNativeFactory = &IID_IVideoFrameNativeFactory_Value;
pub const IVideoFrameNativeFactory = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        CreateFromMFSample: fn(
            self: *const IVideoFrameNativeFactory,
            data: *IMFSample,
            subtype: *const Guid,
            width: u32,
            height: u32,
            forceReadOnly: BOOL,
            minDisplayAperture: ?*const MFVideoArea,
            device: ?*IMFDXGIDeviceManager,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVideoFrameNativeFactory_CreateFromMFSample(self: *const T, data: *IMFSample, subtype: *const Guid, width: u32, height: u32, forceReadOnly: BOOL, minDisplayAperture: ?*const MFVideoArea, device: ?*IMFDXGIDeviceManager, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVideoFrameNativeFactory.VTable, self.vtable).CreateFromMFSample(@ptrCast(*const IVideoFrameNativeFactory, self), data, subtype, width, height, forceReadOnly, minDisplayAperture, device, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISurfaceImageSourceNative_Value = @import("../zig.zig").Guid.initString("F2E9EDC1-D307-4525-9886-0FAFAA44163C");
pub const IID_ISurfaceImageSourceNative = &IID_ISurfaceImageSourceNative_Value;
pub const ISurfaceImageSourceNative = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetDevice: fn(
            self: *const ISurfaceImageSourceNative,
            device: *IDXGIDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginDraw: fn(
            self: *const ISurfaceImageSourceNative,
            updateRect: RECT,
            surface: **IDXGISurface,
            offset: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndDraw: fn(
            self: *const ISurfaceImageSourceNative,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISurfaceImageSourceNative_SetDevice(self: *const T, device: *IDXGIDevice) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISurfaceImageSourceNative.VTable, self.vtable).SetDevice(@ptrCast(*const ISurfaceImageSourceNative, self), device);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISurfaceImageSourceNative_BeginDraw(self: *const T, updateRect: RECT, surface: **IDXGISurface, offset: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISurfaceImageSourceNative.VTable, self.vtable).BeginDraw(@ptrCast(*const ISurfaceImageSourceNative, self), updateRect, surface, offset);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISurfaceImageSourceNative_EndDraw(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISurfaceImageSourceNative.VTable, self.vtable).EndDraw(@ptrCast(*const ISurfaceImageSourceNative, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IVirtualSurfaceUpdatesCallbackNative_Value = @import("../zig.zig").Guid.initString("DBF2E947-8E6C-4254-9EEE-7738F71386C9");
pub const IID_IVirtualSurfaceUpdatesCallbackNative = &IID_IVirtualSurfaceUpdatesCallbackNative_Value;
pub const IVirtualSurfaceUpdatesCallbackNative = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UpdatesNeeded: fn(
            self: *const IVirtualSurfaceUpdatesCallbackNative,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVirtualSurfaceUpdatesCallbackNative_UpdatesNeeded(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVirtualSurfaceUpdatesCallbackNative.VTable, self.vtable).UpdatesNeeded(@ptrCast(*const IVirtualSurfaceUpdatesCallbackNative, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IVirtualSurfaceImageSourceNative_Value = @import("../zig.zig").Guid.initString("E9550983-360B-4F53-B391-AFD695078691");
pub const IID_IVirtualSurfaceImageSourceNative = &IID_IVirtualSurfaceImageSourceNative_Value;
pub const IVirtualSurfaceImageSourceNative = extern struct {
    pub const VTable = extern struct {
        base: ISurfaceImageSourceNative.VTable,
        Invalidate: fn(
            self: *const IVirtualSurfaceImageSourceNative,
            updateRect: RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUpdateRectCount: fn(
            self: *const IVirtualSurfaceImageSourceNative,
            count: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUpdateRects: fn(
            self: *const IVirtualSurfaceImageSourceNative,
            updates: [*]RECT,
            count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVisibleBounds: fn(
            self: *const IVirtualSurfaceImageSourceNative,
            bounds: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterForUpdatesNeeded: fn(
            self: *const IVirtualSurfaceImageSourceNative,
            callback: ?*IVirtualSurfaceUpdatesCallbackNative,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resize: fn(
            self: *const IVirtualSurfaceImageSourceNative,
            newWidth: i32,
            newHeight: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISurfaceImageSourceNative.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVirtualSurfaceImageSourceNative_Invalidate(self: *const T, updateRect: RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVirtualSurfaceImageSourceNative.VTable, self.vtable).Invalidate(@ptrCast(*const IVirtualSurfaceImageSourceNative, self), updateRect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVirtualSurfaceImageSourceNative_GetUpdateRectCount(self: *const T, count: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVirtualSurfaceImageSourceNative.VTable, self.vtable).GetUpdateRectCount(@ptrCast(*const IVirtualSurfaceImageSourceNative, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVirtualSurfaceImageSourceNative_GetUpdateRects(self: *const T, updates: [*]RECT, count: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVirtualSurfaceImageSourceNative.VTable, self.vtable).GetUpdateRects(@ptrCast(*const IVirtualSurfaceImageSourceNative, self), updates, count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVirtualSurfaceImageSourceNative_GetVisibleBounds(self: *const T, bounds: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVirtualSurfaceImageSourceNative.VTable, self.vtable).GetVisibleBounds(@ptrCast(*const IVirtualSurfaceImageSourceNative, self), bounds);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVirtualSurfaceImageSourceNative_RegisterForUpdatesNeeded(self: *const T, callback: ?*IVirtualSurfaceUpdatesCallbackNative) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVirtualSurfaceImageSourceNative.VTable, self.vtable).RegisterForUpdatesNeeded(@ptrCast(*const IVirtualSurfaceImageSourceNative, self), callback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVirtualSurfaceImageSourceNative_Resize(self: *const T, newWidth: i32, newHeight: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVirtualSurfaceImageSourceNative.VTable, self.vtable).Resize(@ptrCast(*const IVirtualSurfaceImageSourceNative, self), newWidth, newHeight);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISwapChainBackgroundPanelNative_Value = @import("../zig.zig").Guid.initString("43BEBD4E-ADD5-4035-8F85-5608D08E9DC9");
pub const IID_ISwapChainBackgroundPanelNative = &IID_ISwapChainBackgroundPanelNative_Value;
pub const ISwapChainBackgroundPanelNative = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetSwapChain: fn(
            self: *const ISwapChainBackgroundPanelNative,
            swapChain: *IDXGISwapChain,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISwapChainBackgroundPanelNative_SetSwapChain(self: *const T, swapChain: *IDXGISwapChain) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISwapChainBackgroundPanelNative.VTable, self.vtable).SetSwapChain(@ptrCast(*const ISwapChainBackgroundPanelNative, self), swapChain);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISurfaceImageSourceManagerNative_Value = @import("../zig.zig").Guid.initString("4C8798B7-1D88-4A0F-B59B-B93F600DE8C8");
pub const IID_ISurfaceImageSourceManagerNative = &IID_ISurfaceImageSourceManagerNative_Value;
pub const ISurfaceImageSourceManagerNative = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FlushAllSurfacesWithDevice: fn(
            self: *const ISurfaceImageSourceManagerNative,
            device: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISurfaceImageSourceManagerNative_FlushAllSurfacesWithDevice(self: *const T, device: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISurfaceImageSourceManagerNative.VTable, self.vtable).FlushAllSurfacesWithDevice(@ptrCast(*const ISurfaceImageSourceManagerNative, self), device);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISurfaceImageSourceNativeWithD2D_Value = @import("../zig.zig").Guid.initString("54298223-41E1-4A41-9C08-02E8256864A1");
pub const IID_ISurfaceImageSourceNativeWithD2D = &IID_ISurfaceImageSourceNativeWithD2D_Value;
pub const ISurfaceImageSourceNativeWithD2D = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetDevice: fn(
            self: *const ISurfaceImageSourceNativeWithD2D,
            device: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginDraw: fn(
            self: *const ISurfaceImageSourceNativeWithD2D,
            updateRect: *const RECT,
            iid: *const Guid,
            updateObject: **c_void,
            offset: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndDraw: fn(
            self: *const ISurfaceImageSourceNativeWithD2D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SuspendDraw: fn(
            self: *const ISurfaceImageSourceNativeWithD2D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResumeDraw: fn(
            self: *const ISurfaceImageSourceNativeWithD2D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISurfaceImageSourceNativeWithD2D_SetDevice(self: *const T, device: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISurfaceImageSourceNativeWithD2D.VTable, self.vtable).SetDevice(@ptrCast(*const ISurfaceImageSourceNativeWithD2D, self), device);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISurfaceImageSourceNativeWithD2D_BeginDraw(self: *const T, updateRect: *const RECT, iid: *const Guid, updateObject: **c_void, offset: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISurfaceImageSourceNativeWithD2D.VTable, self.vtable).BeginDraw(@ptrCast(*const ISurfaceImageSourceNativeWithD2D, self), updateRect, iid, updateObject, offset);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISurfaceImageSourceNativeWithD2D_EndDraw(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISurfaceImageSourceNativeWithD2D.VTable, self.vtable).EndDraw(@ptrCast(*const ISurfaceImageSourceNativeWithD2D, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISurfaceImageSourceNativeWithD2D_SuspendDraw(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISurfaceImageSourceNativeWithD2D.VTable, self.vtable).SuspendDraw(@ptrCast(*const ISurfaceImageSourceNativeWithD2D, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISurfaceImageSourceNativeWithD2D_ResumeDraw(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISurfaceImageSourceNativeWithD2D.VTable, self.vtable).ResumeDraw(@ptrCast(*const ISurfaceImageSourceNativeWithD2D, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISwapChainPanelNative_Value = @import("../zig.zig").Guid.initString("F92F19D2-3ADE-45A6-A20C-F6F1EA90554B");
pub const IID_ISwapChainPanelNative = &IID_ISwapChainPanelNative_Value;
pub const ISwapChainPanelNative = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetSwapChain: fn(
            self: *const ISwapChainPanelNative,
            swapChain: *IDXGISwapChain,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISwapChainPanelNative_SetSwapChain(self: *const T, swapChain: *IDXGISwapChain) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISwapChainPanelNative.VTable, self.vtable).SetSwapChain(@ptrCast(*const ISwapChainPanelNative, self), swapChain);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISwapChainPanelNative2_Value = @import("../zig.zig").Guid.initString("D5A2F60C-37B2-44A2-937B-8D8EB9726821");
pub const IID_ISwapChainPanelNative2 = &IID_ISwapChainPanelNative2_Value;
pub const ISwapChainPanelNative2 = extern struct {
    pub const VTable = extern struct {
        base: ISwapChainPanelNative.VTable,
        SetSwapChainHandle: fn(
            self: *const ISwapChainPanelNative2,
            swapChainHandle: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISwapChainPanelNative.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISwapChainPanelNative2_SetSwapChainHandle(self: *const T, swapChainHandle: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISwapChainPanelNative2.VTable, self.vtable).SetSwapChainHandle(@ptrCast(*const ISwapChainPanelNative2, self), swapChainHandle);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const GRAPHICS_EFFECT_PROPERTY_MAPPING = extern enum(i32) {
    UNKNOWN = 0,
    DIRECT = 1,
    VECTORX = 2,
    VECTORY = 3,
    VECTORZ = 4,
    VECTORW = 5,
    RECT_TO_VECTOR4 = 6,
    RADIANS_TO_DEGREES = 7,
    COLORMATRIX_ALPHA_MODE = 8,
    COLOR_TO_VECTOR3 = 9,
    COLOR_TO_VECTOR4 = 10,
};
pub const GRAPHICS_EFFECT_PROPERTY_MAPPING_UNKNOWN = GRAPHICS_EFFECT_PROPERTY_MAPPING.UNKNOWN;
pub const GRAPHICS_EFFECT_PROPERTY_MAPPING_DIRECT = GRAPHICS_EFFECT_PROPERTY_MAPPING.DIRECT;
pub const GRAPHICS_EFFECT_PROPERTY_MAPPING_VECTORX = GRAPHICS_EFFECT_PROPERTY_MAPPING.VECTORX;
pub const GRAPHICS_EFFECT_PROPERTY_MAPPING_VECTORY = GRAPHICS_EFFECT_PROPERTY_MAPPING.VECTORY;
pub const GRAPHICS_EFFECT_PROPERTY_MAPPING_VECTORZ = GRAPHICS_EFFECT_PROPERTY_MAPPING.VECTORZ;
pub const GRAPHICS_EFFECT_PROPERTY_MAPPING_VECTORW = GRAPHICS_EFFECT_PROPERTY_MAPPING.VECTORW;
pub const GRAPHICS_EFFECT_PROPERTY_MAPPING_RECT_TO_VECTOR4 = GRAPHICS_EFFECT_PROPERTY_MAPPING.RECT_TO_VECTOR4;
pub const GRAPHICS_EFFECT_PROPERTY_MAPPING_RADIANS_TO_DEGREES = GRAPHICS_EFFECT_PROPERTY_MAPPING.RADIANS_TO_DEGREES;
pub const GRAPHICS_EFFECT_PROPERTY_MAPPING_COLORMATRIX_ALPHA_MODE = GRAPHICS_EFFECT_PROPERTY_MAPPING.COLORMATRIX_ALPHA_MODE;
pub const GRAPHICS_EFFECT_PROPERTY_MAPPING_COLOR_TO_VECTOR3 = GRAPHICS_EFFECT_PROPERTY_MAPPING.COLOR_TO_VECTOR3;
pub const GRAPHICS_EFFECT_PROPERTY_MAPPING_COLOR_TO_VECTOR4 = GRAPHICS_EFFECT_PROPERTY_MAPPING.COLOR_TO_VECTOR4;

const IID_IGraphicsEffectD2D1Interop_Value = @import("../zig.zig").Guid.initString("2FC57384-A068-44D7-A331-30982FCF7177");
pub const IID_IGraphicsEffectD2D1Interop = &IID_IGraphicsEffectD2D1Interop_Value;
pub const IGraphicsEffectD2D1Interop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetEffectId: fn(
            self: *const IGraphicsEffectD2D1Interop,
            id: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNamedPropertyMapping: fn(
            self: *const IGraphicsEffectD2D1Interop,
            name: [*:0]const u16,
            index: *u32,
            mapping: *GRAPHICS_EFFECT_PROPERTY_MAPPING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyCount: fn(
            self: *const IGraphicsEffectD2D1Interop,
            count: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IGraphicsEffectD2D1Interop,
            index: u32,
            value: **struct{comment: []const u8 = "MissingClrType IPropertyValue.Windows.Foundation"},
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSource: fn(
            self: *const IGraphicsEffectD2D1Interop,
            index: u32,
            source: **struct{comment: []const u8 = "MissingClrType IGraphicsEffectSource.Windows.Graphics.Effects"},
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceCount: fn(
            self: *const IGraphicsEffectD2D1Interop,
            count: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGraphicsEffectD2D1Interop_GetEffectId(self: *const T, id: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGraphicsEffectD2D1Interop.VTable, self.vtable).GetEffectId(@ptrCast(*const IGraphicsEffectD2D1Interop, self), id);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGraphicsEffectD2D1Interop_GetNamedPropertyMapping(self: *const T, name: [*:0]const u16, index: *u32, mapping: *GRAPHICS_EFFECT_PROPERTY_MAPPING) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGraphicsEffectD2D1Interop.VTable, self.vtable).GetNamedPropertyMapping(@ptrCast(*const IGraphicsEffectD2D1Interop, self), name, index, mapping);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGraphicsEffectD2D1Interop_GetPropertyCount(self: *const T, count: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGraphicsEffectD2D1Interop.VTable, self.vtable).GetPropertyCount(@ptrCast(*const IGraphicsEffectD2D1Interop, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGraphicsEffectD2D1Interop_GetProperty(self: *const T, index: u32, value: **struct{comment: []const u8 = "MissingClrType IPropertyValue.Windows.Foundation"}) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGraphicsEffectD2D1Interop.VTable, self.vtable).GetProperty(@ptrCast(*const IGraphicsEffectD2D1Interop, self), index, value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGraphicsEffectD2D1Interop_GetSource(self: *const T, index: u32, source: **struct{comment: []const u8 = "MissingClrType IGraphicsEffectSource.Windows.Graphics.Effects"}) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGraphicsEffectD2D1Interop.VTable, self.vtable).GetSource(@ptrCast(*const IGraphicsEffectD2D1Interop, self), index, source);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGraphicsEffectD2D1Interop_GetSourceCount(self: *const T, count: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGraphicsEffectD2D1Interop.VTable, self.vtable).GetSourceCount(@ptrCast(*const IGraphicsEffectD2D1Interop, self), count);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IGeometrySource2DInterop_Value = @import("../zig.zig").Guid.initString("0657AF73-53FD-47CF-84FF-C8492D2A80A3");
pub const IID_IGeometrySource2DInterop = &IID_IGeometrySource2DInterop_Value;
pub const IGeometrySource2DInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetGeometry: fn(
            self: *const IGeometrySource2DInterop,
            value: **ID2D1Geometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TryGetGeometryUsingFactory: fn(
            self: *const IGeometrySource2DInterop,
            factory: *ID2D1Factory,
            value: ?*?*ID2D1Geometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGeometrySource2DInterop_GetGeometry(self: *const T, value: **ID2D1Geometry) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGeometrySource2DInterop.VTable, self.vtable).GetGeometry(@ptrCast(*const IGeometrySource2DInterop, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGeometrySource2DInterop_TryGetGeometryUsingFactory(self: *const T, factory: *ID2D1Factory, value: ?*?*ID2D1Geometry) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGeometrySource2DInterop.VTable, self.vtable).TryGetGeometryUsingFactory(@ptrCast(*const IGeometrySource2DInterop, self), factory, value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICompositionDrawingSurfaceInterop_Value = @import("../zig.zig").Guid.initString("FD04E6E3-FE0C-4C3C-AB19-A07601A576EE");
pub const IID_ICompositionDrawingSurfaceInterop = &IID_ICompositionDrawingSurfaceInterop_Value;
pub const ICompositionDrawingSurfaceInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BeginDraw: fn(
            self: *const ICompositionDrawingSurfaceInterop,
            updateRect: ?*const RECT,
            iid: *const Guid,
            updateObject: **c_void,
            updateOffset: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndDraw: fn(
            self: *const ICompositionDrawingSurfaceInterop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resize: fn(
            self: *const ICompositionDrawingSurfaceInterop,
            sizePixels: SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Scroll: fn(
            self: *const ICompositionDrawingSurfaceInterop,
            scrollRect: ?*const RECT,
            clipRect: ?*const RECT,
            offsetX: i32,
            offsetY: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResumeDraw: fn(
            self: *const ICompositionDrawingSurfaceInterop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SuspendDraw: fn(
            self: *const ICompositionDrawingSurfaceInterop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICompositionDrawingSurfaceInterop_BeginDraw(self: *const T, updateRect: ?*const RECT, iid: *const Guid, updateObject: **c_void, updateOffset: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICompositionDrawingSurfaceInterop.VTable, self.vtable).BeginDraw(@ptrCast(*const ICompositionDrawingSurfaceInterop, self), updateRect, iid, updateObject, updateOffset);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICompositionDrawingSurfaceInterop_EndDraw(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICompositionDrawingSurfaceInterop.VTable, self.vtable).EndDraw(@ptrCast(*const ICompositionDrawingSurfaceInterop, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICompositionDrawingSurfaceInterop_Resize(self: *const T, sizePixels: SIZE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICompositionDrawingSurfaceInterop.VTable, self.vtable).Resize(@ptrCast(*const ICompositionDrawingSurfaceInterop, self), sizePixels);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICompositionDrawingSurfaceInterop_Scroll(self: *const T, scrollRect: ?*const RECT, clipRect: ?*const RECT, offsetX: i32, offsetY: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICompositionDrawingSurfaceInterop.VTable, self.vtable).Scroll(@ptrCast(*const ICompositionDrawingSurfaceInterop, self), scrollRect, clipRect, offsetX, offsetY);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICompositionDrawingSurfaceInterop_ResumeDraw(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICompositionDrawingSurfaceInterop.VTable, self.vtable).ResumeDraw(@ptrCast(*const ICompositionDrawingSurfaceInterop, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICompositionDrawingSurfaceInterop_SuspendDraw(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICompositionDrawingSurfaceInterop.VTable, self.vtable).SuspendDraw(@ptrCast(*const ICompositionDrawingSurfaceInterop, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICompositionDrawingSurfaceInterop2_Value = @import("../zig.zig").Guid.initString("41E64AAE-98C0-4239-8E95-A330DD6AA18B");
pub const IID_ICompositionDrawingSurfaceInterop2 = &IID_ICompositionDrawingSurfaceInterop2_Value;
pub const ICompositionDrawingSurfaceInterop2 = extern struct {
    pub const VTable = extern struct {
        base: ICompositionDrawingSurfaceInterop.VTable,
        CopySurface: fn(
            self: *const ICompositionDrawingSurfaceInterop2,
            destinationResource: *IUnknown,
            destinationOffsetX: i32,
            destinationOffsetY: i32,
            sourceRectangle: ?*const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICompositionDrawingSurfaceInterop.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICompositionDrawingSurfaceInterop2_CopySurface(self: *const T, destinationResource: *IUnknown, destinationOffsetX: i32, destinationOffsetY: i32, sourceRectangle: ?*const RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICompositionDrawingSurfaceInterop2.VTable, self.vtable).CopySurface(@ptrCast(*const ICompositionDrawingSurfaceInterop2, self), destinationResource, destinationOffsetX, destinationOffsetY, sourceRectangle);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICompositionGraphicsDeviceInterop_Value = @import("../zig.zig").Guid.initString("A116FF71-F8BF-4C8A-9C98-70779A32A9C8");
pub const IID_ICompositionGraphicsDeviceInterop = &IID_ICompositionGraphicsDeviceInterop_Value;
pub const ICompositionGraphicsDeviceInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRenderingDevice: fn(
            self: *const ICompositionGraphicsDeviceInterop,
            value: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRenderingDevice: fn(
            self: *const ICompositionGraphicsDeviceInterop,
            value: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICompositionGraphicsDeviceInterop_GetRenderingDevice(self: *const T, value: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICompositionGraphicsDeviceInterop.VTable, self.vtable).GetRenderingDevice(@ptrCast(*const ICompositionGraphicsDeviceInterop, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICompositionGraphicsDeviceInterop_SetRenderingDevice(self: *const T, value: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICompositionGraphicsDeviceInterop.VTable, self.vtable).SetRenderingDevice(@ptrCast(*const ICompositionGraphicsDeviceInterop, self), value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICompositorInterop_Value = @import("../zig.zig").Guid.initString("25297D5C-3AD4-4C9C-B5CF-E36A38512330");
pub const IID_ICompositorInterop = &IID_ICompositorInterop_Value;
pub const ICompositorInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateCompositionSurfaceForHandle: fn(
            self: *const ICompositorInterop,
            swapChain: HANDLE,
            result: **struct{comment: []const u8 = "MissingClrType ICompositionSurface.Windows.UI.Composition"},
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCompositionSurfaceForSwapChain: fn(
            self: *const ICompositorInterop,
            swapChain: *IUnknown,
            result: **struct{comment: []const u8 = "MissingClrType ICompositionSurface.Windows.UI.Composition"},
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGraphicsDevice: fn(
            self: *const ICompositorInterop,
            renderingDevice: *IUnknown,
            result: **struct{comment: []const u8 = "MissingClrType CompositionGraphicsDevice.Windows.UI.Composition"},
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICompositorInterop_CreateCompositionSurfaceForHandle(self: *const T, swapChain: HANDLE, result: **struct{comment: []const u8 = "MissingClrType ICompositionSurface.Windows.UI.Composition"}) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICompositorInterop.VTable, self.vtable).CreateCompositionSurfaceForHandle(@ptrCast(*const ICompositorInterop, self), swapChain, result);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICompositorInterop_CreateCompositionSurfaceForSwapChain(self: *const T, swapChain: *IUnknown, result: **struct{comment: []const u8 = "MissingClrType ICompositionSurface.Windows.UI.Composition"}) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICompositorInterop.VTable, self.vtable).CreateCompositionSurfaceForSwapChain(@ptrCast(*const ICompositorInterop, self), swapChain, result);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICompositorInterop_CreateGraphicsDevice(self: *const T, renderingDevice: *IUnknown, result: **struct{comment: []const u8 = "MissingClrType CompositionGraphicsDevice.Windows.UI.Composition"}) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICompositorInterop.VTable, self.vtable).CreateGraphicsDevice(@ptrCast(*const ICompositorInterop, self), renderingDevice, result);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISwapChainInterop_Value = @import("../zig.zig").Guid.initString("26F496A0-7F38-45FB-88F7-FAAABE67DD59");
pub const IID_ISwapChainInterop = &IID_ISwapChainInterop_Value;
pub const ISwapChainInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetSwapChain: fn(
            self: *const ISwapChainInterop,
            swapChain: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISwapChainInterop_SetSwapChain(self: *const T, swapChain: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISwapChainInterop.VTable, self.vtable).SetSwapChain(@ptrCast(*const ISwapChainInterop, self), swapChain);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IVisualInteractionSourceInterop_Value = @import("../zig.zig").Guid.initString("11F62CD1-2F9D-42D3-B05F-D6790D9E9F8E");
pub const IID_IVisualInteractionSourceInterop = &IID_IVisualInteractionSourceInterop_Value;
pub const IVisualInteractionSourceInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TryRedirectForManipulation: fn(
            self: *const IVisualInteractionSourceInterop,
            pointerInfo: *const POINTER_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVisualInteractionSourceInterop_TryRedirectForManipulation(self: *const T, pointerInfo: *const POINTER_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVisualInteractionSourceInterop.VTable, self.vtable).TryRedirectForManipulation(@ptrCast(*const IVisualInteractionSourceInterop, self), pointerInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICompositionCapabilitiesInteropFactory_Value = @import("../zig.zig").Guid.initString("2C9DB356-E70D-4642-8298-BC4AA5B4865C");
pub const IID_ICompositionCapabilitiesInteropFactory = &IID_ICompositionCapabilitiesInteropFactory_Value;
pub const ICompositionCapabilitiesInteropFactory = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: fn(
            self: *const ICompositionCapabilitiesInteropFactory,
            hwnd: HWND,
            result: **struct{comment: []const u8 = "MissingClrType CompositionCapabilities.Windows.UI.Composition"},
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInspectable.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICompositionCapabilitiesInteropFactory_GetForWindow(self: *const T, hwnd: HWND, result: **struct{comment: []const u8 = "MissingClrType CompositionCapabilities.Windows.UI.Composition"}) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICompositionCapabilitiesInteropFactory.VTable, self.vtable).GetForWindow(@ptrCast(*const ICompositionCapabilitiesInteropFactory, self), hwnd, result);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICompositorDesktopInterop_Value = @import("../zig.zig").Guid.initString("29E691FA-4567-4DCA-B319-D0F207EB6807");
pub const IID_ICompositorDesktopInterop = &IID_ICompositorDesktopInterop_Value;
pub const ICompositorDesktopInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateDesktopWindowTarget: fn(
            self: *const ICompositorDesktopInterop,
            hwndTarget: HWND,
            isTopmost: BOOL,
            result: **struct{comment: []const u8 = "MissingClrType DesktopWindowTarget.Windows.UI.Composition.Desktop"},
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnsureOnThread: fn(
            self: *const ICompositorDesktopInterop,
            threadId: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICompositorDesktopInterop_CreateDesktopWindowTarget(self: *const T, hwndTarget: HWND, isTopmost: BOOL, result: **struct{comment: []const u8 = "MissingClrType DesktopWindowTarget.Windows.UI.Composition.Desktop"}) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICompositorDesktopInterop.VTable, self.vtable).CreateDesktopWindowTarget(@ptrCast(*const ICompositorDesktopInterop, self), hwndTarget, isTopmost, result);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICompositorDesktopInterop_EnsureOnThread(self: *const T, threadId: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICompositorDesktopInterop.VTable, self.vtable).EnsureOnThread(@ptrCast(*const ICompositorDesktopInterop, self), threadId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDesktopWindowTargetInterop_Value = @import("../zig.zig").Guid.initString("35DBF59E-E3F9-45B0-81E7-FE75F4145DC9");
pub const IID_IDesktopWindowTargetInterop = &IID_IDesktopWindowTargetInterop_Value;
pub const IDesktopWindowTargetInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_Hwnd: fn(
            self: *const IDesktopWindowTargetInterop,
            value: *HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWindowTargetInterop_get_Hwnd(self: *const T, value: *HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWindowTargetInterop.VTable, self.vtable).get_Hwnd(@ptrCast(*const IDesktopWindowTargetInterop, self), value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDesktopWindowContentBridgeInterop_Value = @import("../zig.zig").Guid.initString("37642806-F421-4FD0-9F82-23AE7C776182");
pub const IID_IDesktopWindowContentBridgeInterop = &IID_IDesktopWindowContentBridgeInterop_Value;
pub const IDesktopWindowContentBridgeInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IDesktopWindowContentBridgeInterop,
            compositor: *struct{comment: []const u8 = "MissingClrType Compositor.Windows.UI.Composition"},
            parentHwnd: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Hwnd: fn(
            self: *const IDesktopWindowContentBridgeInterop,
            value: *HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AppliedScaleFactor: fn(
            self: *const IDesktopWindowContentBridgeInterop,
            value: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWindowContentBridgeInterop_Initialize(self: *const T, compositor: *struct{comment: []const u8 = "MissingClrType Compositor.Windows.UI.Composition"}, parentHwnd: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWindowContentBridgeInterop.VTable, self.vtable).Initialize(@ptrCast(*const IDesktopWindowContentBridgeInterop, self), compositor, parentHwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWindowContentBridgeInterop_get_Hwnd(self: *const T, value: *HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWindowContentBridgeInterop.VTable, self.vtable).get_Hwnd(@ptrCast(*const IDesktopWindowContentBridgeInterop, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWindowContentBridgeInterop_get_AppliedScaleFactor(self: *const T, value: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWindowContentBridgeInterop.VTable, self.vtable).get_AppliedScaleFactor(@ptrCast(*const IDesktopWindowContentBridgeInterop, self), value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRestrictedErrorInfo_Value = @import("../zig.zig").Guid.initString("82BA7092-4C88-427D-A7BC-16DD93FEB67E");
pub const IID_IRestrictedErrorInfo = &IID_IRestrictedErrorInfo_Value;
pub const IRestrictedErrorInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetErrorDetails: fn(
            self: *const IRestrictedErrorInfo,
            description: *BSTR,
            @"error": *HRESULT,
            restrictedDescription: *BSTR,
            capabilitySid: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReference: fn(
            self: *const IRestrictedErrorInfo,
            reference: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRestrictedErrorInfo_GetErrorDetails(self: *const T, description: *BSTR, @"error": *HRESULT, restrictedDescription: *BSTR, capabilitySid: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRestrictedErrorInfo.VTable, self.vtable).GetErrorDetails(@ptrCast(*const IRestrictedErrorInfo, self), description, @"error", restrictedDescription, capabilitySid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRestrictedErrorInfo_GetReference(self: *const T, reference: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRestrictedErrorInfo.VTable, self.vtable).GetReference(@ptrCast(*const IRestrictedErrorInfo, self), reference);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILanguageExceptionErrorInfo_Value = @import("../zig.zig").Guid.initString("04A2DBF3-DF83-116C-0946-0812ABF6E07D");
pub const IID_ILanguageExceptionErrorInfo = &IID_ILanguageExceptionErrorInfo_Value;
pub const ILanguageExceptionErrorInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLanguageException: fn(
            self: *const ILanguageExceptionErrorInfo,
            languageException: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILanguageExceptionErrorInfo_GetLanguageException(self: *const T, languageException: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILanguageExceptionErrorInfo.VTable, self.vtable).GetLanguageException(@ptrCast(*const ILanguageExceptionErrorInfo, self), languageException);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILanguageExceptionTransform_Value = @import("../zig.zig").Guid.initString("FEB5A271-A6CD-45CE-880A-696706BADC65");
pub const IID_ILanguageExceptionTransform = &IID_ILanguageExceptionTransform_Value;
pub const ILanguageExceptionTransform = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTransformedRestrictedErrorInfo: fn(
            self: *const ILanguageExceptionTransform,
            restrictedErrorInfo: **IRestrictedErrorInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILanguageExceptionTransform_GetTransformedRestrictedErrorInfo(self: *const T, restrictedErrorInfo: **IRestrictedErrorInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILanguageExceptionTransform.VTable, self.vtable).GetTransformedRestrictedErrorInfo(@ptrCast(*const ILanguageExceptionTransform, self), restrictedErrorInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILanguageExceptionStackBackTrace_Value = @import("../zig.zig").Guid.initString("CBE53FB5-F967-4258-8D34-42F5E25833DE");
pub const IID_ILanguageExceptionStackBackTrace = &IID_ILanguageExceptionStackBackTrace_Value;
pub const ILanguageExceptionStackBackTrace = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStackBackTrace: fn(
            self: *const ILanguageExceptionStackBackTrace,
            maxFramesToCapture: u32,
            stackBackTrace: *?*c_void,
            framesCaptured: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILanguageExceptionStackBackTrace_GetStackBackTrace(self: *const T, maxFramesToCapture: u32, stackBackTrace: *?*c_void, framesCaptured: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILanguageExceptionStackBackTrace.VTable, self.vtable).GetStackBackTrace(@ptrCast(*const ILanguageExceptionStackBackTrace, self), maxFramesToCapture, stackBackTrace, framesCaptured);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILanguageExceptionErrorInfo2_Value = @import("../zig.zig").Guid.initString("5746E5C4-5B97-424C-B620-2822915734DD");
pub const IID_ILanguageExceptionErrorInfo2 = &IID_ILanguageExceptionErrorInfo2_Value;
pub const ILanguageExceptionErrorInfo2 = extern struct {
    pub const VTable = extern struct {
        base: ILanguageExceptionErrorInfo.VTable,
        GetPreviousLanguageExceptionErrorInfo: fn(
            self: *const ILanguageExceptionErrorInfo2,
            previousLanguageExceptionErrorInfo: **ILanguageExceptionErrorInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CapturePropagationContext: fn(
            self: *const ILanguageExceptionErrorInfo2,
            languageException: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropagationContextHead: fn(
            self: *const ILanguageExceptionErrorInfo2,
            propagatedLanguageExceptionErrorInfoHead: **ILanguageExceptionErrorInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ILanguageExceptionErrorInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILanguageExceptionErrorInfo2_GetPreviousLanguageExceptionErrorInfo(self: *const T, previousLanguageExceptionErrorInfo: **ILanguageExceptionErrorInfo2) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILanguageExceptionErrorInfo2.VTable, self.vtable).GetPreviousLanguageExceptionErrorInfo(@ptrCast(*const ILanguageExceptionErrorInfo2, self), previousLanguageExceptionErrorInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILanguageExceptionErrorInfo2_CapturePropagationContext(self: *const T, languageException: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILanguageExceptionErrorInfo2.VTable, self.vtable).CapturePropagationContext(@ptrCast(*const ILanguageExceptionErrorInfo2, self), languageException);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILanguageExceptionErrorInfo2_GetPropagationContextHead(self: *const T, propagatedLanguageExceptionErrorInfoHead: **ILanguageExceptionErrorInfo2) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILanguageExceptionErrorInfo2.VTable, self.vtable).GetPropagationContextHead(@ptrCast(*const ILanguageExceptionErrorInfo2, self), propagatedLanguageExceptionErrorInfoHead);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const RO_INIT_TYPE = extern enum(i32) {
    RO_INIT_SINGLETHREADED = 0,
    RO_INIT_MULTITHREADED = 1,
};
pub const RO_INIT_SINGLETHREADED = RO_INIT_TYPE.RO_INIT_SINGLETHREADED;
pub const RO_INIT_MULTITHREADED = RO_INIT_TYPE.RO_INIT_MULTITHREADED;

pub const __AnonymousRecord_roapi_L45_C9 = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const APARTMENT_SHUTDOWN_REGISTRATION_COOKIE__ = extern struct {
    unused: i32,
};

const IID_IBufferByteAccess_Value = @import("../zig.zig").Guid.initString("905A0FEF-BC53-11DF-8C49-001E4FC686DA");
pub const IID_IBufferByteAccess = &IID_IBufferByteAccess_Value;
pub const IBufferByteAccess = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Buffer: fn(
            self: *const IBufferByteAccess,
            value: **u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBufferByteAccess_Buffer(self: *const T, value: **u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBufferByteAccess.VTable, self.vtable).Buffer(@ptrCast(*const IBufferByteAccess, self), value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const RO_ERROR_REPORTING_FLAGS = extern enum(i32) {
    RO_ERROR_REPORTING_NONE = 0,
    RO_ERROR_REPORTING_SUPPRESSEXCEPTIONS = 1,
    RO_ERROR_REPORTING_FORCEEXCEPTIONS = 2,
    RO_ERROR_REPORTING_USESETERRORINFO = 4,
    RO_ERROR_REPORTING_SUPPRESSSETERRORINFO = 8,
};
pub const RO_ERROR_REPORTING_NONE = RO_ERROR_REPORTING_FLAGS.RO_ERROR_REPORTING_NONE;
pub const RO_ERROR_REPORTING_SUPPRESSEXCEPTIONS = RO_ERROR_REPORTING_FLAGS.RO_ERROR_REPORTING_SUPPRESSEXCEPTIONS;
pub const RO_ERROR_REPORTING_FORCEEXCEPTIONS = RO_ERROR_REPORTING_FLAGS.RO_ERROR_REPORTING_FORCEEXCEPTIONS;
pub const RO_ERROR_REPORTING_USESETERRORINFO = RO_ERROR_REPORTING_FLAGS.RO_ERROR_REPORTING_USESETERRORINFO;
pub const RO_ERROR_REPORTING_SUPPRESSSETERRORINFO = RO_ERROR_REPORTING_FLAGS.RO_ERROR_REPORTING_SUPPRESSSETERRORINFO;

pub const PINSPECT_MEMORY_CALLBACK = fn(
    context: ?*c_void,
    readAddress: ?*c_void,
    length: u32,
    buffer: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const ROPARAMIIDHANDLE__ = extern struct {
    unused: i32,
};

pub const IRoSimpleMetaDataBuilder = extern struct {
    pub const VTable = extern struct {
        SetWinRtInterface: fn(
            self: *const IRoSimpleMetaDataBuilder,
            iid: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDelegate: fn(
            self: *const IRoSimpleMetaDataBuilder,
            iid: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInterfaceGroupSimpleDefault: fn(
            self: *const IRoSimpleMetaDataBuilder,
            name: [*:0]const u16,
            defaultInterfaceName: [*:0]const u16,
            defaultInterfaceIID: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInterfaceGroupParameterizedDefault: fn(
            self: *const IRoSimpleMetaDataBuilder,
            name: [*:0]const u16,
            elementCount: u32,
            defaultInterfaceNameElements: [*]PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRuntimeClassSimpleDefault: fn(
            self: *const IRoSimpleMetaDataBuilder,
            name: [*:0]const u16,
            defaultInterfaceName: [*:0]const u16,
            defaultInterfaceIID: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRuntimeClassParameterizedDefault: fn(
            self: *const IRoSimpleMetaDataBuilder,
            name: [*:0]const u16,
            elementCount: u32,
            defaultInterfaceNameElements: [*]const [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStruct: fn(
            self: *const IRoSimpleMetaDataBuilder,
            name: [*:0]const u16,
            numFields: u32,
            fieldTypeNames: [*]const [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnum: fn(
            self: *const IRoSimpleMetaDataBuilder,
            name: [*:0]const u16,
            baseType: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParameterizedInterface: fn(
            self: *const IRoSimpleMetaDataBuilder,
            piid: Guid,
            numArgs: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParameterizedDelegate: fn(
            self: *const IRoSimpleMetaDataBuilder,
            piid: Guid,
            numArgs: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRoSimpleMetaDataBuilder_SetWinRtInterface(self: *const T, iid: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRoSimpleMetaDataBuilder.VTable, self.vtable).SetWinRtInterface(@ptrCast(*const IRoSimpleMetaDataBuilder, self), iid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRoSimpleMetaDataBuilder_SetDelegate(self: *const T, iid: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRoSimpleMetaDataBuilder.VTable, self.vtable).SetDelegate(@ptrCast(*const IRoSimpleMetaDataBuilder, self), iid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRoSimpleMetaDataBuilder_SetInterfaceGroupSimpleDefault(self: *const T, name: [*:0]const u16, defaultInterfaceName: [*:0]const u16, defaultInterfaceIID: ?*const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRoSimpleMetaDataBuilder.VTable, self.vtable).SetInterfaceGroupSimpleDefault(@ptrCast(*const IRoSimpleMetaDataBuilder, self), name, defaultInterfaceName, defaultInterfaceIID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRoSimpleMetaDataBuilder_SetInterfaceGroupParameterizedDefault(self: *const T, name: [*:0]const u16, elementCount: u32, defaultInterfaceNameElements: [*]PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRoSimpleMetaDataBuilder.VTable, self.vtable).SetInterfaceGroupParameterizedDefault(@ptrCast(*const IRoSimpleMetaDataBuilder, self), name, elementCount, defaultInterfaceNameElements);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRoSimpleMetaDataBuilder_SetRuntimeClassSimpleDefault(self: *const T, name: [*:0]const u16, defaultInterfaceName: [*:0]const u16, defaultInterfaceIID: ?*const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRoSimpleMetaDataBuilder.VTable, self.vtable).SetRuntimeClassSimpleDefault(@ptrCast(*const IRoSimpleMetaDataBuilder, self), name, defaultInterfaceName, defaultInterfaceIID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRoSimpleMetaDataBuilder_SetRuntimeClassParameterizedDefault(self: *const T, name: [*:0]const u16, elementCount: u32, defaultInterfaceNameElements: [*]const [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRoSimpleMetaDataBuilder.VTable, self.vtable).SetRuntimeClassParameterizedDefault(@ptrCast(*const IRoSimpleMetaDataBuilder, self), name, elementCount, defaultInterfaceNameElements);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRoSimpleMetaDataBuilder_SetStruct(self: *const T, name: [*:0]const u16, numFields: u32, fieldTypeNames: [*]const [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRoSimpleMetaDataBuilder.VTable, self.vtable).SetStruct(@ptrCast(*const IRoSimpleMetaDataBuilder, self), name, numFields, fieldTypeNames);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRoSimpleMetaDataBuilder_SetEnum(self: *const T, name: [*:0]const u16, baseType: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRoSimpleMetaDataBuilder.VTable, self.vtable).SetEnum(@ptrCast(*const IRoSimpleMetaDataBuilder, self), name, baseType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRoSimpleMetaDataBuilder_SetParameterizedInterface(self: *const T, piid: Guid, numArgs: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRoSimpleMetaDataBuilder.VTable, self.vtable).SetParameterizedInterface(@ptrCast(*const IRoSimpleMetaDataBuilder, self), piid, numArgs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRoSimpleMetaDataBuilder_SetParameterizedDelegate(self: *const T, piid: Guid, numArgs: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRoSimpleMetaDataBuilder.VTable, self.vtable).SetParameterizedDelegate(@ptrCast(*const IRoSimpleMetaDataBuilder, self), piid, numArgs);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IRoMetaDataLocator = extern struct {
    pub const VTable = extern struct {
        Locate: fn(
            self: *const IRoMetaDataLocator,
            nameElement: [*:0]const u16,
            metaDataDestination: *IRoSimpleMetaDataBuilder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRoMetaDataLocator_Locate(self: *const T, nameElement: [*:0]const u16, metaDataDestination: *IRoSimpleMetaDataBuilder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRoMetaDataLocator.VTable, self.vtable).Locate(@ptrCast(*const IRoMetaDataLocator, self), nameElement, metaDataDestination);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const BSOS_OPTIONS = extern enum(i32) {
    BSOS_DEFAULT = 0,
    BSOS_PREFERDESTINATIONSTREAM = 1,
};
pub const BSOS_DEFAULT = BSOS_OPTIONS.BSOS_DEFAULT;
pub const BSOS_PREFERDESTINATIONSTREAM = BSOS_OPTIONS.BSOS_PREFERDESTINATIONSTREAM;


//--------------------------------------------------------------------------------
// Section: Functions (70)
//--------------------------------------------------------------------------------
pub extern "api-ms-win-core-winrt-string-l1-1-0" fn HSTRING_UserSize(
    param0: *u32,
    param1: u32,
    param2: *HSTRING,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn HSTRING_UserMarshal(
    param0: *u32,
    param1: *u8,
    param2: *HSTRING,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn HSTRING_UserUnmarshal(
    param0: *u32,
    param1: [*:0]u8,
    param2: *HSTRING,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn HSTRING_UserFree(
    param0: *u32,
    param1: *HSTRING,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn HSTRING_UserSize64(
    param0: *u32,
    param1: u32,
    param2: *HSTRING,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn HSTRING_UserMarshal64(
    param0: *u32,
    param1: *u8,
    param2: *HSTRING,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn HSTRING_UserUnmarshal64(
    param0: *u32,
    param1: [*:0]u8,
    param2: *HSTRING,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn HSTRING_UserFree64(
    param0: *u32,
    param1: *HSTRING,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "OLE32" fn CoDecodeProxy(
    dwClientPid: u32,
    ui64ProxyAddress: u64,
    pServerInformation: *ServerInformation,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn RoGetAgileReference(
    options: AgileReferenceOptions,
    riid: *const Guid,
    pUnk: *IUnknown,
    ppAgileReference: **IAgileReference,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "Windows.Data.Pdf" fn PdfCreateRenderer(
    pDevice: *IDXGIDevice,
    ppRenderer: **IPdfRendererNative,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsCreateString(
    sourceString: ?[*:0]u16,
    length: u32,
    string: ?*HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsCreateStringReference(
    sourceString: ?[*:0]const u16,
    length: u32,
    hstringHeader: *HSTRING_HEADER,
    string: ?*HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsDeleteString(
    string: HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsDuplicateString(
    string: HSTRING,
    newString: ?*HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsGetStringLen(
    string: HSTRING,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsGetStringRawBuffer(
    string: HSTRING,
    length: ?*u32,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsIsStringEmpty(
    string: HSTRING,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsStringHasEmbeddedNull(
    string: HSTRING,
    hasEmbedNull: *BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsCompareStringOrdinal(
    string1: HSTRING,
    string2: HSTRING,
    result: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsSubstring(
    string: HSTRING,
    startIndex: u32,
    newString: ?*HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsSubstringWithSpecifiedLength(
    string: HSTRING,
    startIndex: u32,
    length: u32,
    newString: ?*HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsConcatString(
    string1: HSTRING,
    string2: HSTRING,
    newString: ?*HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsReplaceString(
    string: HSTRING,
    stringReplaced: HSTRING,
    stringReplaceWith: HSTRING,
    newString: ?*HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsTrimStringStart(
    string: HSTRING,
    trimString: HSTRING,
    newString: ?*HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsTrimStringEnd(
    string: HSTRING,
    trimString: HSTRING,
    newString: ?*HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsPreallocateStringBuffer(
    length: u32,
    charBuffer: **u16,
    bufferHandle: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsPromoteStringBuffer(
    bufferHandle: ?*c_void,
    string: ?*HSTRING,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsDeleteStringBuffer(
    bufferHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-string-l1-1-0" fn WindowsInspectString(
    targetHString: ?*c_void,
    machine: u16,
    callback: PINSPECT_HSTRING_CALLBACK,
    context: ?*c_void,
    length: *u32,
    targetStringAddress: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-string-l1-1-1" fn WindowsInspectString2(
    targetHString: u64,
    machine: u16,
    callback: PINSPECT_HSTRING_CALLBACK2,
    context: ?*c_void,
    length: *u32,
    targetStringAddress: *u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "d3d11" fn CreateDirect3D11DeviceFromDXGIDevice(
    dxgiDevice: *IDXGIDevice,
    graphicsDevice: **IInspectable,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "d3d11" fn CreateDirect3D11SurfaceFromDXGISurface(
    dgxiSurface: *IDXGISurface,
    graphicsSurface: **IInspectable,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-l1-1-0" fn RoInitialize(
    initType: RO_INIT_TYPE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-l1-1-0" fn RoUninitialize(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "api-ms-win-core-winrt-l1-1-0" fn RoActivateInstance(
    activatableClassId: HSTRING,
    instance: **IInspectable,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-l1-1-0" fn RoRegisterActivationFactories(
    activatableClassIds: [*]HSTRING,
    activationFactoryCallbacks: [*]?*c_void,
    count: u32,
    cookie: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-l1-1-0" fn RoRevokeActivationFactories(
    cookie: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "api-ms-win-core-winrt-l1-1-0" fn RoGetActivationFactory(
    activatableClassId: HSTRING,
    iid: *const Guid,
    factory: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-l1-1-0" fn RoRegisterForApartmentShutdown(
    callbackObject: *IApartmentShutdown,
    apartmentIdentifier: *u64,
    regCookie: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-l1-1-0" fn RoUnregisterForApartmentShutdown(
    regCookie: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-l1-1-0" fn RoGetApartmentIdentifier(
    apartmentIdentifier: *u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-robuffer-l1-1-0" fn RoGetBufferMarshaler(
    bufferMarshaler: **IMarshal,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-error-l1-1-0" fn RoGetErrorReportingFlags(
    pflags: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-error-l1-1-0" fn RoSetErrorReportingFlags(
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-error-l1-1-0" fn RoResolveRestrictedErrorInfoReference(
    reference: [*:0]const u16,
    ppRestrictedErrorInfo: **IRestrictedErrorInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-error-l1-1-0" fn SetRestrictedErrorInfo(
    pRestrictedErrorInfo: ?*IRestrictedErrorInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-error-l1-1-0" fn GetRestrictedErrorInfo(
    ppRestrictedErrorInfo: ?*?*IRestrictedErrorInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-error-l1-1-0" fn RoOriginateErrorW(
    @"error": HRESULT,
    cchMax: u32,
    message: ?*[512]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "api-ms-win-core-winrt-error-l1-1-0" fn RoOriginateError(
    @"error": HRESULT,
    message: HSTRING,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "api-ms-win-core-winrt-error-l1-1-0" fn RoTransformErrorW(
    oldError: HRESULT,
    newError: HRESULT,
    cchMax: u32,
    message: ?*[512]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "api-ms-win-core-winrt-error-l1-1-0" fn RoTransformError(
    oldError: HRESULT,
    newError: HRESULT,
    message: HSTRING,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "api-ms-win-core-winrt-error-l1-1-0" fn RoCaptureErrorContext(
    hr: HRESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-error-l1-1-0" fn RoFailFastWithErrorContext(
    hrError: HRESULT,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "api-ms-win-core-winrt-error-l1-1-1" fn RoOriginateLanguageException(
    @"error": HRESULT,
    message: HSTRING,
    languageException: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "api-ms-win-core-winrt-error-l1-1-1" fn RoClearError(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "api-ms-win-core-winrt-error-l1-1-1" fn RoReportUnhandledError(
    pRestrictedErrorInfo: *IRestrictedErrorInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-error-l1-1-1" fn RoInspectThreadErrorInfo(
    targetTebAddress: ?*c_void,
    machine: u16,
    readMemoryCallback: PINSPECT_MEMORY_CALLBACK,
    context: ?*c_void,
    targetErrorInfoAddress: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-error-l1-1-1" fn RoInspectCapturedStackBackTrace(
    targetErrorInfoAddress: ?*c_void,
    machine: u16,
    readMemoryCallback: PINSPECT_MEMORY_CALLBACK,
    context: ?*c_void,
    frameCount: *u32,
    targetBackTraceAddress: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-error-l1-1-1" fn RoGetMatchingRestrictedErrorInfo(
    hrIn: HRESULT,
    ppRestrictedErrorInfo: **IRestrictedErrorInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-error-l1-1-1" fn RoReportFailedDelegate(
    punkDelegate: *IUnknown,
    pRestrictedErrorInfo: *IRestrictedErrorInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-error-l1-1-1" fn IsErrorPropagationEnabled(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "RoMetadata" fn MetaDataGetDispenser(
    rclsid: *const Guid,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-roparameterizediid-l1-1-0" fn RoGetParameterizedTypeInstanceIID(
    nameElementCount: u32,
    nameElements: [*]PWSTR,
    metaDataLocator: *IRoMetaDataLocator,
    iid: *Guid,
    pExtra: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-winrt-roparameterizediid-l1-1-0" fn RoFreeParameterizedTypeExtra(
    extra: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "api-ms-win-core-winrt-roparameterizediid-l1-1-0" fn RoParameterizedTypeExtraGetTypeSignature(
    extra: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "api-ms-win-core-winrt-registration-l1-1-0" fn RoGetServerActivatableClasses(
    serverName: HSTRING,
    activatableClassIds: **HSTRING,
    count: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-shcore-stream-winrt-l1-1-0" fn CreateRandomAccessStreamOnFile(
    filePath: [*:0]const u16,
    accessMode: u32,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-shcore-stream-winrt-l1-1-0" fn CreateRandomAccessStreamOverStream(
    stream: *IStream,
    options: BSOS_OPTIONS,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-shcore-stream-winrt-l1-1-0" fn CreateStreamOverRandomAccessStream(
    randomAccessStream: *IUnknown,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (31)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const DXGI_RGBA = @import("dxgi.zig").DXGI_RGBA;
const IMarshal = @import("com.zig").IMarshal;
const HRESULT = @import("com.zig").HRESULT;
const IWICBitmap = @import("windows_imaging_component.zig").IWICBitmap;
const BOOL = @import("system_services.zig").BOOL;
const ID2D1Geometry = @import("direct2d.zig").ID2D1Geometry;
const IDXGIDevice = @import("dxgi.zig").IDXGIDevice;
const D2D_RECT_F = @import("direct2d.zig").D2D_RECT_F;
const INamedPropertyStore = @import("shell.zig").INamedPropertyStore;
const IDXGISurface = @import("dxgi.zig").IDXGISurface;
const IMFDXGIDeviceManager = @import("media_foundation.zig").IMFDXGIDeviceManager;
const ID2D1DeviceContext = @import("direct2d.zig").ID2D1DeviceContext;
const IStream = @import("structured_storage.zig").IStream;
const HMONITOR = @import("gdi.zig").HMONITOR;
const PWSTR = @import("system_services.zig").PWSTR;
const IUnknown = @import("com.zig").IUnknown;
const POINTER_INFO = @import("pointer_input.zig").POINTER_INFO;
const SECURITY_ATTRIBUTES = @import("system_services.zig").SECURITY_ATTRIBUTES;
const BSTR = @import("automation.zig").BSTR;
const RECT = @import("display_devices.zig").RECT;
const IDXGISwapChain = @import("dxgi.zig").IDXGISwapChain;
const PSTR = @import("system_services.zig").PSTR;
const HWND = @import("windows_and_messaging.zig").HWND;
const MFVideoArea = @import("media_foundation.zig").MFVideoArea;
const IMFSample = @import("media_foundation.zig").IMFSample;
const ID2D1Factory = @import("direct2d.zig").ID2D1Factory;
const IMF2DBuffer2 = @import("media_foundation.zig").IMF2DBuffer2;
const POINT = @import("display_devices.zig").POINT;
const SIZE = @import("display_devices.zig").SIZE;
const HANDLE = @import("system_services.zig").HANDLE;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = PFN_PDF_CREATE_RENDERER;
    _ = PINSPECT_HSTRING_CALLBACK;
    _ = PINSPECT_HSTRING_CALLBACK2;
    _ = PINSPECT_MEMORY_CALLBACK;

    const constant_export_count = 6;
    const type_export_count = 81;
    const enum_value_export_count = 43;
    const com_iface_id_export_count = 58;
    const com_class_id_export_count = 0;
    const func_export_count = 70;
    const unicode_alias_count = 0;
    const import_count = 31;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (2)
//--------------------------------------------------------------------------------
pub const OPERATION_START_PARAMETERS = extern struct {
    Version: u32,
    OperationId: u32,
    Flags: u32,
};

pub const OPERATION_END_PARAMETERS = extern struct {
    Version: u32,
    OperationId: u32,
    Flags: u32,
};


//--------------------------------------------------------------------------------
// Section: Functions (2)
//--------------------------------------------------------------------------------
pub extern "ADVAPI32" fn OperationStart(
    OperationStartParams: *OPERATION_START_PARAMETERS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn OperationEnd(
    OperationEndParams: *OPERATION_END_PARAMETERS,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (1)
//--------------------------------------------------------------------------------
const BOOL = @import("system_services.zig").BOOL;

test {
    const constant_export_count = 0;
    const type_export_count = 2;
    const enum_value_export_count = 0;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 2;
    const unicode_alias_count = 0;
    const import_count = 1;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (51)
//--------------------------------------------------------------------------------
pub const XAPO_REGISTRATION_PROPERTIES = extern struct {
    clsid: Guid,
    FriendlyName: [256]u16,
    CopyrightInfo: [256]u16,
    MajorVersion: u32,
    MinorVersion: u32,
    Flags: u32,
    MinInputBufferCount: u32,
    MaxInputBufferCount: u32,
    MinOutputBufferCount: u32,
    MaxOutputBufferCount: u32,
};

pub const XAPO_LOCKFORPROCESS_PARAMETERS = extern struct {
    pFormat: *const WAVEFORMATEX,
    MaxFrameCount: u32,
};

pub const XAPO_BUFFER_FLAGS = extern enum(i32) {
    XAPO_BUFFER_SILENT = 0,
    XAPO_BUFFER_VALID = 1,
};
pub const XAPO_BUFFER_SILENT = XAPO_BUFFER_FLAGS.XAPO_BUFFER_SILENT;
pub const XAPO_BUFFER_VALID = XAPO_BUFFER_FLAGS.XAPO_BUFFER_VALID;

pub const XAPO_PROCESS_BUFFER_PARAMETERS = extern struct {
    pBuffer: *c_void,
    BufferFlags: XAPO_BUFFER_FLAGS,
    ValidFrameCount: u32,
};

const IID_IXAPO_Value = @import("../zig.zig").Guid.initString("A410B984-9839-4819-A0BE-2856AE6B3ADB");
pub const IID_IXAPO = &IID_IXAPO_Value;
pub const IXAPO = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRegistrationProperties: fn(
            self: *const IXAPO,
            ppRegistrationProperties: **XAPO_REGISTRATION_PROPERTIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsInputFormatSupported: fn(
            self: *const IXAPO,
            pOutputFormat: *const WAVEFORMATEX,
            pRequestedInputFormat: *const WAVEFORMATEX,
            ppSupportedInputFormat: ?*?*WAVEFORMATEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsOutputFormatSupported: fn(
            self: *const IXAPO,
            pInputFormat: *const WAVEFORMATEX,
            pRequestedOutputFormat: *const WAVEFORMATEX,
            ppSupportedOutputFormat: ?*?*WAVEFORMATEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IXAPO,
            pData: ?[*]const u8,
            DataByteSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IXAPO,
        ) callconv(@import("std").os.windows.WINAPI) void,
        LockForProcess: fn(
            self: *const IXAPO,
            InputLockedParameterCount: u32,
            pInputLockedParameters: ?[*]const XAPO_LOCKFORPROCESS_PARAMETERS,
            OutputLockedParameterCount: u32,
            pOutputLockedParameters: ?[*]const XAPO_LOCKFORPROCESS_PARAMETERS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnlockForProcess: fn(
            self: *const IXAPO,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Process: fn(
            self: *const IXAPO,
            InputProcessParameterCount: u32,
            pInputProcessParameters: ?[*]const XAPO_PROCESS_BUFFER_PARAMETERS,
            OutputProcessParameterCount: u32,
            pOutputProcessParameters: ?[*]XAPO_PROCESS_BUFFER_PARAMETERS,
            IsEnabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CalcInputFrames: fn(
            self: *const IXAPO,
            OutputFrameCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        CalcOutputFrames: fn(
            self: *const IXAPO,
            InputFrameCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAPO_GetRegistrationProperties(self: *const T, ppRegistrationProperties: **XAPO_REGISTRATION_PROPERTIES) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAPO.VTable, self.vtable).GetRegistrationProperties(@ptrCast(*const IXAPO, self), ppRegistrationProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAPO_IsInputFormatSupported(self: *const T, pOutputFormat: *const WAVEFORMATEX, pRequestedInputFormat: *const WAVEFORMATEX, ppSupportedInputFormat: ?*?*WAVEFORMATEX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAPO.VTable, self.vtable).IsInputFormatSupported(@ptrCast(*const IXAPO, self), pOutputFormat, pRequestedInputFormat, ppSupportedInputFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAPO_IsOutputFormatSupported(self: *const T, pInputFormat: *const WAVEFORMATEX, pRequestedOutputFormat: *const WAVEFORMATEX, ppSupportedOutputFormat: ?*?*WAVEFORMATEX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAPO.VTable, self.vtable).IsOutputFormatSupported(@ptrCast(*const IXAPO, self), pInputFormat, pRequestedOutputFormat, ppSupportedOutputFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAPO_Initialize(self: *const T, pData: ?[*]const u8, DataByteSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAPO.VTable, self.vtable).Initialize(@ptrCast(*const IXAPO, self), pData, DataByteSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAPO_Reset(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const IXAPO.VTable, self.vtable).Reset(@ptrCast(*const IXAPO, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAPO_LockForProcess(self: *const T, InputLockedParameterCount: u32, pInputLockedParameters: ?[*]const XAPO_LOCKFORPROCESS_PARAMETERS, OutputLockedParameterCount: u32, pOutputLockedParameters: ?[*]const XAPO_LOCKFORPROCESS_PARAMETERS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAPO.VTable, self.vtable).LockForProcess(@ptrCast(*const IXAPO, self), InputLockedParameterCount, pInputLockedParameters, OutputLockedParameterCount, pOutputLockedParameters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAPO_UnlockForProcess(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const IXAPO.VTable, self.vtable).UnlockForProcess(@ptrCast(*const IXAPO, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAPO_Process(self: *const T, InputProcessParameterCount: u32, pInputProcessParameters: ?[*]const XAPO_PROCESS_BUFFER_PARAMETERS, OutputProcessParameterCount: u32, pOutputProcessParameters: ?[*]XAPO_PROCESS_BUFFER_PARAMETERS, IsEnabled: BOOL) callconv(.Inline) void {
            return @ptrCast(*const IXAPO.VTable, self.vtable).Process(@ptrCast(*const IXAPO, self), InputProcessParameterCount, pInputProcessParameters, OutputProcessParameterCount, pOutputProcessParameters, IsEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAPO_CalcInputFrames(self: *const T, OutputFrameCount: u32) callconv(.Inline) u32 {
            return @ptrCast(*const IXAPO.VTable, self.vtable).CalcInputFrames(@ptrCast(*const IXAPO, self), OutputFrameCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAPO_CalcOutputFrames(self: *const T, InputFrameCount: u32) callconv(.Inline) u32 {
            return @ptrCast(*const IXAPO.VTable, self.vtable).CalcOutputFrames(@ptrCast(*const IXAPO, self), InputFrameCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IXAPOParameters_Value = @import("../zig.zig").Guid.initString("26D95C66-80F2-499A-AD54-5AE7F01C6D98");
pub const IID_IXAPOParameters = &IID_IXAPOParameters_Value;
pub const IXAPOParameters = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetParameters: fn(
            self: *const IXAPOParameters,
            pParameters: [*]const u8,
            ParameterByteSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetParameters: fn(
            self: *const IXAPOParameters,
            pParameters: [*]u8,
            ParameterByteSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAPOParameters_SetParameters(self: *const T, pParameters: [*]const u8, ParameterByteSize: u32) callconv(.Inline) void {
            return @ptrCast(*const IXAPOParameters.VTable, self.vtable).SetParameters(@ptrCast(*const IXAPOParameters, self), pParameters, ParameterByteSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAPOParameters_GetParameters(self: *const T, pParameters: [*]u8, ParameterByteSize: u32) callconv(.Inline) void {
            return @ptrCast(*const IXAPOParameters.VTable, self.vtable).GetParameters(@ptrCast(*const IXAPOParameters, self), pParameters, ParameterByteSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_FXEQ_Value = @import("../zig.zig").Guid.initString("F5E01117-D6C4-485A-A3F5-695196F3DBFA");
pub const CLSID_FXEQ = &CLSID_FXEQ_Value;

const CLSID_FXMasteringLimiter_Value = @import("../zig.zig").Guid.initString("C4137916-2BE1-46FD-8599-441536F49856");
pub const CLSID_FXMasteringLimiter = &CLSID_FXMasteringLimiter_Value;

const CLSID_FXReverb_Value = @import("../zig.zig").Guid.initString("7D9ACA56-CB68-4807-B632-B137352E8596");
pub const CLSID_FXReverb = &CLSID_FXReverb_Value;

const CLSID_FXEcho_Value = @import("../zig.zig").Guid.initString("5039D740-F736-449A-84D3-A56202557B87");
pub const CLSID_FXEcho = &CLSID_FXEcho_Value;

pub const FXEQ_PARAMETERS = extern struct {
    FrequencyCenter0: f32,
    Gain0: f32,
    Bandwidth0: f32,
    FrequencyCenter1: f32,
    Gain1: f32,
    Bandwidth1: f32,
    FrequencyCenter2: f32,
    Gain2: f32,
    Bandwidth2: f32,
    FrequencyCenter3: f32,
    Gain3: f32,
    Bandwidth3: f32,
};

pub const FXMASTERINGLIMITER_PARAMETERS = extern struct {
    Release: u32,
    Loudness: u32,
};

pub const FXREVERB_PARAMETERS = extern struct {
    Diffusion: f32,
    RoomSize: f32,
};

pub const FXECHO_INITDATA = extern struct {
    MaxDelay: f32,
};

pub const FXECHO_PARAMETERS = extern struct {
    WetDryMix: f32,
    Feedback: f32,
    Delay: f32,
};

pub const XAUDIO2_VOICE_DETAILS = extern struct {
    CreationFlags: u32,
    ActiveFlags: u32,
    InputChannels: u32,
    InputSampleRate: u32,
};

pub const XAUDIO2_SEND_DESCRIPTOR = extern struct {
    Flags: u32,
    pOutputVoice: *IXAudio2Voice,
};

pub const XAUDIO2_VOICE_SENDS = extern struct {
    SendCount: u32,
    pSends: *XAUDIO2_SEND_DESCRIPTOR,
};

pub const XAUDIO2_EFFECT_DESCRIPTOR = extern struct {
    pEffect: *IUnknown,
    InitialState: BOOL,
    OutputChannels: u32,
};

pub const XAUDIO2_EFFECT_CHAIN = extern struct {
    EffectCount: u32,
    pEffectDescriptors: *XAUDIO2_EFFECT_DESCRIPTOR,
};

pub const XAUDIO2_FILTER_TYPE = extern enum(i32) {
    LowPassFilter = 0,
    BandPassFilter = 1,
    HighPassFilter = 2,
    NotchFilter = 3,
    LowPassOnePoleFilter = 4,
    HighPassOnePoleFilter = 5,
};
pub const LowPassFilter = XAUDIO2_FILTER_TYPE.LowPassFilter;
pub const BandPassFilter = XAUDIO2_FILTER_TYPE.BandPassFilter;
pub const HighPassFilter = XAUDIO2_FILTER_TYPE.HighPassFilter;
pub const NotchFilter = XAUDIO2_FILTER_TYPE.NotchFilter;
pub const LowPassOnePoleFilter = XAUDIO2_FILTER_TYPE.LowPassOnePoleFilter;
pub const HighPassOnePoleFilter = XAUDIO2_FILTER_TYPE.HighPassOnePoleFilter;

pub const XAUDIO2_FILTER_PARAMETERS = extern struct {
    Type: XAUDIO2_FILTER_TYPE,
    Frequency: f32,
    OneOverQ: f32,
};

pub const XAUDIO2_BUFFER = extern struct {
    Flags: u32,
    AudioBytes: u32,
    pAudioData: *const u8,
    PlayBegin: u32,
    PlayLength: u32,
    LoopBegin: u32,
    LoopLength: u32,
    LoopCount: u32,
    pContext: *c_void,
};

pub const XAUDIO2_BUFFER_WMA = extern struct {
    pDecodedPacketCumulativeBytes: *const u32,
    PacketCount: u32,
};

pub const XAUDIO2_VOICE_STATE = extern struct {
    pCurrentBufferContext: *c_void,
    BuffersQueued: u32,
    SamplesPlayed: u64,
};

pub const XAUDIO2_PERFORMANCE_DATA = extern struct {
    AudioCyclesSinceLastQuery: u64,
    TotalCyclesSinceLastQuery: u64,
    MinimumCyclesPerQuantum: u32,
    MaximumCyclesPerQuantum: u32,
    MemoryUsageInBytes: u32,
    CurrentLatencyInSamples: u32,
    GlitchesSinceEngineStarted: u32,
    ActiveSourceVoiceCount: u32,
    TotalSourceVoiceCount: u32,
    ActiveSubmixVoiceCount: u32,
    ActiveResamplerCount: u32,
    ActiveMatrixMixCount: u32,
    ActiveXmaSourceVoices: u32,
    ActiveXmaStreams: u32,
};

pub const XAUDIO2_DEBUG_CONFIGURATION = extern struct {
    TraceMask: u32,
    BreakMask: u32,
    LogThreadID: BOOL,
    LogFileline: BOOL,
    LogFunctionName: BOOL,
    LogTiming: BOOL,
};

const IID_IXAudio2_Value = @import("../zig.zig").Guid.initString("2B02E3CF-2E0B-4EC3-BE45-1B2A3FE7210D");
pub const IID_IXAudio2 = &IID_IXAudio2_Value;
pub const IXAudio2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterForCallbacks: fn(
            self: *const IXAudio2,
            pCallback: *IXAudio2EngineCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterForCallbacks: fn(
            self: *const IXAudio2,
            pCallback: *IXAudio2EngineCallback,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CreateSourceVoice: fn(
            self: *const IXAudio2,
            ppSourceVoice: **IXAudio2SourceVoice,
            pSourceFormat: *const WAVEFORMATEX,
            Flags: u32,
            MaxFrequencyRatio: f32,
            pCallback: ?*IXAudio2VoiceCallback,
            pSendList: ?*const XAUDIO2_VOICE_SENDS,
            pEffectChain: ?*const XAUDIO2_EFFECT_CHAIN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSubmixVoice: fn(
            self: *const IXAudio2,
            ppSubmixVoice: **IXAudio2SubmixVoice,
            InputChannels: u32,
            InputSampleRate: u32,
            Flags: u32,
            ProcessingStage: u32,
            pSendList: ?*const XAUDIO2_VOICE_SENDS,
            pEffectChain: ?*const XAUDIO2_EFFECT_CHAIN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMasteringVoice: fn(
            self: *const IXAudio2,
            ppMasteringVoice: **IXAudio2MasteringVoice,
            InputChannels: u32,
            InputSampleRate: u32,
            Flags: u32,
            szDeviceId: ?[*:0]const u16,
            pEffectChain: ?*const XAUDIO2_EFFECT_CHAIN,
            StreamCategory: AUDIO_STREAM_CATEGORY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartEngine: fn(
            self: *const IXAudio2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopEngine: fn(
            self: *const IXAudio2,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CommitChanges: fn(
            self: *const IXAudio2,
            OperationSet: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPerformanceData: fn(
            self: *const IXAudio2,
            pPerfData: *XAUDIO2_PERFORMANCE_DATA,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetDebugConfiguration: fn(
            self: *const IXAudio2,
            pDebugConfiguration: ?*const XAUDIO2_DEBUG_CONFIGURATION,
            pReserved: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2_RegisterForCallbacks(self: *const T, pCallback: *IXAudio2EngineCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2.VTable, self.vtable).RegisterForCallbacks(@ptrCast(*const IXAudio2, self), pCallback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2_UnregisterForCallbacks(self: *const T, pCallback: *IXAudio2EngineCallback) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2.VTable, self.vtable).UnregisterForCallbacks(@ptrCast(*const IXAudio2, self), pCallback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2_CreateSourceVoice(self: *const T, ppSourceVoice: **IXAudio2SourceVoice, pSourceFormat: *const WAVEFORMATEX, Flags: u32, MaxFrequencyRatio: f32, pCallback: ?*IXAudio2VoiceCallback, pSendList: ?*const XAUDIO2_VOICE_SENDS, pEffectChain: ?*const XAUDIO2_EFFECT_CHAIN) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2.VTable, self.vtable).CreateSourceVoice(@ptrCast(*const IXAudio2, self), ppSourceVoice, pSourceFormat, Flags, MaxFrequencyRatio, pCallback, pSendList, pEffectChain);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2_CreateSubmixVoice(self: *const T, ppSubmixVoice: **IXAudio2SubmixVoice, InputChannels: u32, InputSampleRate: u32, Flags: u32, ProcessingStage: u32, pSendList: ?*const XAUDIO2_VOICE_SENDS, pEffectChain: ?*const XAUDIO2_EFFECT_CHAIN) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2.VTable, self.vtable).CreateSubmixVoice(@ptrCast(*const IXAudio2, self), ppSubmixVoice, InputChannels, InputSampleRate, Flags, ProcessingStage, pSendList, pEffectChain);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2_CreateMasteringVoice(self: *const T, ppMasteringVoice: **IXAudio2MasteringVoice, InputChannels: u32, InputSampleRate: u32, Flags: u32, szDeviceId: ?[*:0]const u16, pEffectChain: ?*const XAUDIO2_EFFECT_CHAIN, StreamCategory: AUDIO_STREAM_CATEGORY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2.VTable, self.vtable).CreateMasteringVoice(@ptrCast(*const IXAudio2, self), ppMasteringVoice, InputChannels, InputSampleRate, Flags, szDeviceId, pEffectChain, StreamCategory);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2_StartEngine(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2.VTable, self.vtable).StartEngine(@ptrCast(*const IXAudio2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2_StopEngine(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2.VTable, self.vtable).StopEngine(@ptrCast(*const IXAudio2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2_CommitChanges(self: *const T, OperationSet: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2.VTable, self.vtable).CommitChanges(@ptrCast(*const IXAudio2, self), OperationSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2_GetPerformanceData(self: *const T, pPerfData: *XAUDIO2_PERFORMANCE_DATA) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2.VTable, self.vtable).GetPerformanceData(@ptrCast(*const IXAudio2, self), pPerfData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2_SetDebugConfiguration(self: *const T, pDebugConfiguration: ?*const XAUDIO2_DEBUG_CONFIGURATION, pReserved: *c_void) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2.VTable, self.vtable).SetDebugConfiguration(@ptrCast(*const IXAudio2, self), pDebugConfiguration, pReserved);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IXAudio2Extension_Value = @import("../zig.zig").Guid.initString("84AC29BB-D619-44D2-B197-E4ACF7DF3ED6");
pub const IID_IXAudio2Extension = &IID_IXAudio2Extension_Value;
pub const IXAudio2Extension = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetProcessingQuantum: fn(
            self: *const IXAudio2Extension,
            quantumNumerator: *u32,
            quantumDenominator: *u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetProcessor: fn(
            self: *const IXAudio2Extension,
            processor: *u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Extension_GetProcessingQuantum(self: *const T, quantumNumerator: *u32, quantumDenominator: *u32) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2Extension.VTable, self.vtable).GetProcessingQuantum(@ptrCast(*const IXAudio2Extension, self), quantumNumerator, quantumDenominator);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Extension_GetProcessor(self: *const T, processor: *u32) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2Extension.VTable, self.vtable).GetProcessor(@ptrCast(*const IXAudio2Extension, self), processor);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IXAudio2Voice = extern struct {
    pub const VTable = extern struct {
        GetVoiceDetails: fn(
            self: *const IXAudio2Voice,
            pVoiceDetails: *XAUDIO2_VOICE_DETAILS,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetOutputVoices: fn(
            self: *const IXAudio2Voice,
            pSendList: ?*const XAUDIO2_VOICE_SENDS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEffectChain: fn(
            self: *const IXAudio2Voice,
            pEffectChain: ?*const XAUDIO2_EFFECT_CHAIN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableEffect: fn(
            self: *const IXAudio2Voice,
            EffectIndex: u32,
            OperationSet: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableEffect: fn(
            self: *const IXAudio2Voice,
            EffectIndex: u32,
            OperationSet: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectState: fn(
            self: *const IXAudio2Voice,
            EffectIndex: u32,
            pEnabled: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetEffectParameters: fn(
            self: *const IXAudio2Voice,
            EffectIndex: u32,
            pParameters: [*]const u8,
            ParametersByteSize: u32,
            OperationSet: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectParameters: fn(
            self: *const IXAudio2Voice,
            EffectIndex: u32,
            pParameters: [*]u8,
            ParametersByteSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFilterParameters: fn(
            self: *const IXAudio2Voice,
            pParameters: *const XAUDIO2_FILTER_PARAMETERS,
            OperationSet: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilterParameters: fn(
            self: *const IXAudio2Voice,
            pParameters: *XAUDIO2_FILTER_PARAMETERS,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetOutputFilterParameters: fn(
            self: *const IXAudio2Voice,
            pDestinationVoice: ?*IXAudio2Voice,
            pParameters: *const XAUDIO2_FILTER_PARAMETERS,
            OperationSet: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputFilterParameters: fn(
            self: *const IXAudio2Voice,
            pDestinationVoice: ?*IXAudio2Voice,
            pParameters: *XAUDIO2_FILTER_PARAMETERS,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetVolume: fn(
            self: *const IXAudio2Voice,
            Volume: f32,
            OperationSet: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVolume: fn(
            self: *const IXAudio2Voice,
            pVolume: *f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetChannelVolumes: fn(
            self: *const IXAudio2Voice,
            Channels: u32,
            pVolumes: [*]const f32,
            OperationSet: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChannelVolumes: fn(
            self: *const IXAudio2Voice,
            Channels: u32,
            pVolumes: [*]f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetOutputMatrix: fn(
            self: *const IXAudio2Voice,
            pDestinationVoice: ?*IXAudio2Voice,
            SourceChannels: u32,
            DestinationChannels: u32,
            pLevelMatrix: *const f32,
            OperationSet: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputMatrix: fn(
            self: *const IXAudio2Voice,
            pDestinationVoice: ?*IXAudio2Voice,
            SourceChannels: u32,
            DestinationChannels: u32,
            pLevelMatrix: *f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DestroyVoice: fn(
            self: *const IXAudio2Voice,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_GetVoiceDetails(self: *const T, pVoiceDetails: *XAUDIO2_VOICE_DETAILS) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).GetVoiceDetails(@ptrCast(*const IXAudio2Voice, self), pVoiceDetails);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_SetOutputVoices(self: *const T, pSendList: ?*const XAUDIO2_VOICE_SENDS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).SetOutputVoices(@ptrCast(*const IXAudio2Voice, self), pSendList);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_SetEffectChain(self: *const T, pEffectChain: ?*const XAUDIO2_EFFECT_CHAIN) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).SetEffectChain(@ptrCast(*const IXAudio2Voice, self), pEffectChain);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_EnableEffect(self: *const T, EffectIndex: u32, OperationSet: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).EnableEffect(@ptrCast(*const IXAudio2Voice, self), EffectIndex, OperationSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_DisableEffect(self: *const T, EffectIndex: u32, OperationSet: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).DisableEffect(@ptrCast(*const IXAudio2Voice, self), EffectIndex, OperationSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_GetEffectState(self: *const T, EffectIndex: u32, pEnabled: *BOOL) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).GetEffectState(@ptrCast(*const IXAudio2Voice, self), EffectIndex, pEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_SetEffectParameters(self: *const T, EffectIndex: u32, pParameters: [*]const u8, ParametersByteSize: u32, OperationSet: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).SetEffectParameters(@ptrCast(*const IXAudio2Voice, self), EffectIndex, pParameters, ParametersByteSize, OperationSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_GetEffectParameters(self: *const T, EffectIndex: u32, pParameters: [*]u8, ParametersByteSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).GetEffectParameters(@ptrCast(*const IXAudio2Voice, self), EffectIndex, pParameters, ParametersByteSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_SetFilterParameters(self: *const T, pParameters: *const XAUDIO2_FILTER_PARAMETERS, OperationSet: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).SetFilterParameters(@ptrCast(*const IXAudio2Voice, self), pParameters, OperationSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_GetFilterParameters(self: *const T, pParameters: *XAUDIO2_FILTER_PARAMETERS) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).GetFilterParameters(@ptrCast(*const IXAudio2Voice, self), pParameters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_SetOutputFilterParameters(self: *const T, pDestinationVoice: ?*IXAudio2Voice, pParameters: *const XAUDIO2_FILTER_PARAMETERS, OperationSet: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).SetOutputFilterParameters(@ptrCast(*const IXAudio2Voice, self), pDestinationVoice, pParameters, OperationSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_GetOutputFilterParameters(self: *const T, pDestinationVoice: ?*IXAudio2Voice, pParameters: *XAUDIO2_FILTER_PARAMETERS) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).GetOutputFilterParameters(@ptrCast(*const IXAudio2Voice, self), pDestinationVoice, pParameters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_SetVolume(self: *const T, Volume: f32, OperationSet: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).SetVolume(@ptrCast(*const IXAudio2Voice, self), Volume, OperationSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_GetVolume(self: *const T, pVolume: *f32) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).GetVolume(@ptrCast(*const IXAudio2Voice, self), pVolume);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_SetChannelVolumes(self: *const T, Channels: u32, pVolumes: [*]const f32, OperationSet: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).SetChannelVolumes(@ptrCast(*const IXAudio2Voice, self), Channels, pVolumes, OperationSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_GetChannelVolumes(self: *const T, Channels: u32, pVolumes: [*]f32) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).GetChannelVolumes(@ptrCast(*const IXAudio2Voice, self), Channels, pVolumes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_SetOutputMatrix(self: *const T, pDestinationVoice: ?*IXAudio2Voice, SourceChannels: u32, DestinationChannels: u32, pLevelMatrix: *const f32, OperationSet: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).SetOutputMatrix(@ptrCast(*const IXAudio2Voice, self), pDestinationVoice, SourceChannels, DestinationChannels, pLevelMatrix, OperationSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_GetOutputMatrix(self: *const T, pDestinationVoice: ?*IXAudio2Voice, SourceChannels: u32, DestinationChannels: u32, pLevelMatrix: *f32) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).GetOutputMatrix(@ptrCast(*const IXAudio2Voice, self), pDestinationVoice, SourceChannels, DestinationChannels, pLevelMatrix);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2Voice_DestroyVoice(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2Voice.VTable, self.vtable).DestroyVoice(@ptrCast(*const IXAudio2Voice, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IXAudio2SourceVoice = extern struct {
    pub const VTable = extern struct {
        base: IXAudio2Voice.VTable,
        Start: fn(
            self: *const IXAudio2SourceVoice,
            Flags: u32,
            OperationSet: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: fn(
            self: *const IXAudio2SourceVoice,
            Flags: u32,
            OperationSet: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SubmitSourceBuffer: fn(
            self: *const IXAudio2SourceVoice,
            pBuffer: *const XAUDIO2_BUFFER,
            pBufferWMA: ?*const XAUDIO2_BUFFER_WMA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FlushSourceBuffers: fn(
            self: *const IXAudio2SourceVoice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Discontinuity: fn(
            self: *const IXAudio2SourceVoice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExitLoop: fn(
            self: *const IXAudio2SourceVoice,
            OperationSet: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetState: fn(
            self: *const IXAudio2SourceVoice,
            pVoiceState: *XAUDIO2_VOICE_STATE,
            Flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetFrequencyRatio: fn(
            self: *const IXAudio2SourceVoice,
            Ratio: f32,
            OperationSet: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrequencyRatio: fn(
            self: *const IXAudio2SourceVoice,
            pRatio: *f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetSourceSampleRate: fn(
            self: *const IXAudio2SourceVoice,
            NewSourceSampleRate: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXAudio2Voice.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2SourceVoice_Start(self: *const T, Flags: u32, OperationSet: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2SourceVoice.VTable, self.vtable).Start(@ptrCast(*const IXAudio2SourceVoice, self), Flags, OperationSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2SourceVoice_Stop(self: *const T, Flags: u32, OperationSet: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2SourceVoice.VTable, self.vtable).Stop(@ptrCast(*const IXAudio2SourceVoice, self), Flags, OperationSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2SourceVoice_SubmitSourceBuffer(self: *const T, pBuffer: *const XAUDIO2_BUFFER, pBufferWMA: ?*const XAUDIO2_BUFFER_WMA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2SourceVoice.VTable, self.vtable).SubmitSourceBuffer(@ptrCast(*const IXAudio2SourceVoice, self), pBuffer, pBufferWMA);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2SourceVoice_FlushSourceBuffers(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2SourceVoice.VTable, self.vtable).FlushSourceBuffers(@ptrCast(*const IXAudio2SourceVoice, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2SourceVoice_Discontinuity(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2SourceVoice.VTable, self.vtable).Discontinuity(@ptrCast(*const IXAudio2SourceVoice, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2SourceVoice_ExitLoop(self: *const T, OperationSet: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2SourceVoice.VTable, self.vtable).ExitLoop(@ptrCast(*const IXAudio2SourceVoice, self), OperationSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2SourceVoice_GetState(self: *const T, pVoiceState: *XAUDIO2_VOICE_STATE, Flags: u32) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2SourceVoice.VTable, self.vtable).GetState(@ptrCast(*const IXAudio2SourceVoice, self), pVoiceState, Flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2SourceVoice_SetFrequencyRatio(self: *const T, Ratio: f32, OperationSet: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2SourceVoice.VTable, self.vtable).SetFrequencyRatio(@ptrCast(*const IXAudio2SourceVoice, self), Ratio, OperationSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2SourceVoice_GetFrequencyRatio(self: *const T, pRatio: *f32) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2SourceVoice.VTable, self.vtable).GetFrequencyRatio(@ptrCast(*const IXAudio2SourceVoice, self), pRatio);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2SourceVoice_SetSourceSampleRate(self: *const T, NewSourceSampleRate: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2SourceVoice.VTable, self.vtable).SetSourceSampleRate(@ptrCast(*const IXAudio2SourceVoice, self), NewSourceSampleRate);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IXAudio2SubmixVoice = extern struct {
    pub const VTable = extern struct {
        base: IXAudio2Voice.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXAudio2Voice.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IXAudio2MasteringVoice = extern struct {
    pub const VTable = extern struct {
        base: IXAudio2Voice.VTable,
        GetChannelMask: fn(
            self: *const IXAudio2MasteringVoice,
            pChannelmask: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IXAudio2Voice.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2MasteringVoice_GetChannelMask(self: *const T, pChannelmask: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAudio2MasteringVoice.VTable, self.vtable).GetChannelMask(@ptrCast(*const IXAudio2MasteringVoice, self), pChannelmask);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IXAudio2EngineCallback = extern struct {
    pub const VTable = extern struct {
        OnProcessingPassStart: fn(
            self: *const IXAudio2EngineCallback,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnProcessingPassEnd: fn(
            self: *const IXAudio2EngineCallback,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnCriticalError: fn(
            self: *const IXAudio2EngineCallback,
            Error: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2EngineCallback_OnProcessingPassStart(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2EngineCallback.VTable, self.vtable).OnProcessingPassStart(@ptrCast(*const IXAudio2EngineCallback, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2EngineCallback_OnProcessingPassEnd(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2EngineCallback.VTable, self.vtable).OnProcessingPassEnd(@ptrCast(*const IXAudio2EngineCallback, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2EngineCallback_OnCriticalError(self: *const T, Error: HRESULT) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2EngineCallback.VTable, self.vtable).OnCriticalError(@ptrCast(*const IXAudio2EngineCallback, self), Error);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IXAudio2VoiceCallback = extern struct {
    pub const VTable = extern struct {
        OnVoiceProcessingPassStart: fn(
            self: *const IXAudio2VoiceCallback,
            BytesRequired: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnVoiceProcessingPassEnd: fn(
            self: *const IXAudio2VoiceCallback,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnStreamEnd: fn(
            self: *const IXAudio2VoiceCallback,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnBufferStart: fn(
            self: *const IXAudio2VoiceCallback,
            pBufferContext: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnBufferEnd: fn(
            self: *const IXAudio2VoiceCallback,
            pBufferContext: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnLoopEnd: fn(
            self: *const IXAudio2VoiceCallback,
            pBufferContext: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnVoiceError: fn(
            self: *const IXAudio2VoiceCallback,
            pBufferContext: *c_void,
            Error: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2VoiceCallback_OnVoiceProcessingPassStart(self: *const T, BytesRequired: u32) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2VoiceCallback.VTable, self.vtable).OnVoiceProcessingPassStart(@ptrCast(*const IXAudio2VoiceCallback, self), BytesRequired);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2VoiceCallback_OnVoiceProcessingPassEnd(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2VoiceCallback.VTable, self.vtable).OnVoiceProcessingPassEnd(@ptrCast(*const IXAudio2VoiceCallback, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2VoiceCallback_OnStreamEnd(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2VoiceCallback.VTable, self.vtable).OnStreamEnd(@ptrCast(*const IXAudio2VoiceCallback, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2VoiceCallback_OnBufferStart(self: *const T, pBufferContext: *c_void) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2VoiceCallback.VTable, self.vtable).OnBufferStart(@ptrCast(*const IXAudio2VoiceCallback, self), pBufferContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2VoiceCallback_OnBufferEnd(self: *const T, pBufferContext: *c_void) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2VoiceCallback.VTable, self.vtable).OnBufferEnd(@ptrCast(*const IXAudio2VoiceCallback, self), pBufferContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2VoiceCallback_OnLoopEnd(self: *const T, pBufferContext: *c_void) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2VoiceCallback.VTable, self.vtable).OnLoopEnd(@ptrCast(*const IXAudio2VoiceCallback, self), pBufferContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAudio2VoiceCallback_OnVoiceError(self: *const T, pBufferContext: *c_void, Error: HRESULT) callconv(.Inline) void {
            return @ptrCast(*const IXAudio2VoiceCallback.VTable, self.vtable).OnVoiceError(@ptrCast(*const IXAudio2VoiceCallback, self), pBufferContext, Error);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_AudioVolumeMeter_Value = @import("../zig.zig").Guid.initString("4FC3B166-972A-40CF-BC37-7DB03DB2FBA3");
pub const CLSID_AudioVolumeMeter = &CLSID_AudioVolumeMeter_Value;

const CLSID_AudioReverb_Value = @import("../zig.zig").Guid.initString("C2633B16-471B-4498-B8C5-4F0959E2EC09");
pub const CLSID_AudioReverb = &CLSID_AudioReverb_Value;

pub const XAUDIO2FX_VOLUMEMETER_LEVELS = extern struct {
    pPeakLevels: *f32,
    pRMSLevels: *f32,
    ChannelCount: u32,
};

pub const XAUDIO2FX_REVERB_PARAMETERS = extern struct {
    WetDryMix: f32,
    ReflectionsDelay: u32,
    ReverbDelay: u8,
    RearDelay: u8,
    SideDelay: u8,
    PositionLeft: u8,
    PositionRight: u8,
    PositionMatrixLeft: u8,
    PositionMatrixRight: u8,
    EarlyDiffusion: u8,
    LateDiffusion: u8,
    LowEQGain: u8,
    LowEQCutoff: u8,
    HighEQGain: u8,
    HighEQCutoff: u8,
    RoomFilterFreq: f32,
    RoomFilterMain: f32,
    RoomFilterHF: f32,
    ReflectionsGain: f32,
    ReverbGain: f32,
    DecayTime: f32,
    Density: f32,
    RoomSize: f32,
    DisableLateField: BOOL,
};

pub const XAUDIO2FX_REVERB_I3DL2_PARAMETERS = extern struct {
    WetDryMix: f32,
    Room: i32,
    RoomHF: i32,
    RoomRolloffFactor: f32,
    DecayTime: f32,
    DecayHFRatio: f32,
    Reflections: i32,
    ReflectionsDelay: f32,
    Reverb: i32,
    ReverbDelay: f32,
    Diffusion: f32,
    Density: f32,
    HFReference: f32,
};

pub const HrtfPosition = extern struct {
    x: f32,
    y: f32,
    z: f32,
};

pub const HrtfOrientation = extern struct {
    element: [9]f32,
};

pub const HrtfDirectivityType = extern enum(i32) {
    OmniDirectional = 0,
    Cardioid = 1,
    Cone = 2,
};
pub const OmniDirectional = HrtfDirectivityType.OmniDirectional;
pub const Cardioid = HrtfDirectivityType.Cardioid;
pub const Cone = HrtfDirectivityType.Cone;

pub const HrtfEnvironment = extern enum(i32) {
    Small = 0,
    Medium = 1,
    Large = 2,
    Outdoors = 3,
};
pub const Small = HrtfEnvironment.Small;
pub const Medium = HrtfEnvironment.Medium;
pub const Large = HrtfEnvironment.Large;
pub const Outdoors = HrtfEnvironment.Outdoors;

pub const HrtfDirectivity = extern struct {
    type: HrtfDirectivityType,
    scaling: f32,
};

pub const HrtfDirectivityCardioid = extern struct {
    directivity: HrtfDirectivity,
    order: f32,
};

pub const HrtfDirectivityCone = extern struct {
    directivity: HrtfDirectivity,
    innerAngle: f32,
    outerAngle: f32,
};

pub const HrtfDistanceDecayType = extern enum(i32) {
    NaturalDecay = 0,
    CustomDecay = 1,
};
pub const NaturalDecay = HrtfDistanceDecayType.NaturalDecay;
pub const CustomDecay = HrtfDistanceDecayType.CustomDecay;

pub const HrtfDistanceDecay = extern struct {
    type: HrtfDistanceDecayType,
    maxGain: f32,
    minGain: f32,
    unityGainDistance: f32,
    cutoffDistance: f32,
};

pub const HrtfApoInit = extern struct {
    distanceDecay: *HrtfDistanceDecay,
    directivity: *HrtfDirectivity,
};

const IID_IXAPOHrtfParameters_Value = @import("../zig.zig").Guid.initString("15B3CD66-E9DE-4464-B6E6-2BC3CF63D455");
pub const IID_IXAPOHrtfParameters = &IID_IXAPOHrtfParameters_Value;
pub const IXAPOHrtfParameters = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetSourcePosition: fn(
            self: *const IXAPOHrtfParameters,
            position: *const HrtfPosition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSourceOrientation: fn(
            self: *const IXAPOHrtfParameters,
            orientation: *const HrtfOrientation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSourceGain: fn(
            self: *const IXAPOHrtfParameters,
            gain: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnvironment: fn(
            self: *const IXAPOHrtfParameters,
            environment: HrtfEnvironment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAPOHrtfParameters_SetSourcePosition(self: *const T, position: *const HrtfPosition) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAPOHrtfParameters.VTable, self.vtable).SetSourcePosition(@ptrCast(*const IXAPOHrtfParameters, self), position);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAPOHrtfParameters_SetSourceOrientation(self: *const T, orientation: *const HrtfOrientation) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAPOHrtfParameters.VTable, self.vtable).SetSourceOrientation(@ptrCast(*const IXAPOHrtfParameters, self), orientation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAPOHrtfParameters_SetSourceGain(self: *const T, gain: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAPOHrtfParameters.VTable, self.vtable).SetSourceGain(@ptrCast(*const IXAPOHrtfParameters, self), gain);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAPOHrtfParameters_SetEnvironment(self: *const T, environment: HrtfEnvironment) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAPOHrtfParameters.VTable, self.vtable).SetEnvironment(@ptrCast(*const IXAPOHrtfParameters, self), environment);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (5)
//--------------------------------------------------------------------------------
pub extern "XAudio2_9" fn CreateFX(
    clsid: *const Guid,
    pEffect: **IUnknown,
    pInitDat: ?[*]const u8,
    InitDataByteSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "XAudio2_9" fn XAudio2CreateWithVersionInfo(
    ppXAudio2: **IXAudio2,
    Flags: u32,
    XAudio2Processor: u32,
    ntddiVersion: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "XAudio2_9" fn CreateAudioVolumeMeter(
    ppApo: **IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "XAudio2_9" fn CreateAudioReverb(
    ppApo: **IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "HrtfApo" fn CreateHrtfApo(
    init: *const HrtfApoInit,
    xApo: **IXAPO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (7)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const AUDIO_STREAM_CATEGORY = @import("core_audio.zig").AUDIO_STREAM_CATEGORY;
const PWSTR = @import("system_services.zig").PWSTR;
const WAVEFORMATEX = @import("multimedia.zig").WAVEFORMATEX;
const IUnknown = @import("com.zig").IUnknown;
const BOOL = @import("system_services.zig").BOOL;
const HRESULT = @import("com.zig").HRESULT;

test {
    const constant_export_count = 0;
    const type_export_count = 45;
    const enum_value_export_count = 17;
    const com_iface_id_export_count = 5;
    const com_class_id_export_count = 6;
    const func_export_count = 5;
    const unicode_alias_count = 0;
    const import_count = 7;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

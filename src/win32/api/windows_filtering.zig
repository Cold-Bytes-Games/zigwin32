//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (333)
//--------------------------------------------------------------------------------
pub const FWP_DIRECTION = extern enum(i32) {
    OUTBOUND = 0,
    INBOUND = 1,
    MAX = 2,
};
pub const FWP_DIRECTION_OUTBOUND = FWP_DIRECTION.OUTBOUND;
pub const FWP_DIRECTION_INBOUND = FWP_DIRECTION.INBOUND;
pub const FWP_DIRECTION_MAX = FWP_DIRECTION.MAX;

pub const FWP_IP_VERSION = extern enum(i32) {
    V4 = 0,
    V6 = 1,
    NONE = 2,
    MAX = 3,
};
pub const FWP_IP_VERSION_V4 = FWP_IP_VERSION.V4;
pub const FWP_IP_VERSION_V6 = FWP_IP_VERSION.V6;
pub const FWP_IP_VERSION_NONE = FWP_IP_VERSION.NONE;
pub const FWP_IP_VERSION_MAX = FWP_IP_VERSION.MAX;

pub const FWP_AF = extern enum(i32) {
    INET = 0,
    INET6 = 1,
    ETHER = 2,
    NONE = 3,
};
pub const FWP_AF_INET = FWP_AF.INET;
pub const FWP_AF_INET6 = FWP_AF.INET6;
pub const FWP_AF_ETHER = FWP_AF.ETHER;
pub const FWP_AF_NONE = FWP_AF.NONE;

pub const FWP_ETHER_ENCAP_METHOD = extern enum(i32) {
    ETHER_V2 = 0,
    SNAP = 1,
    SNAP_W_OUI_ZERO = 3,
};
pub const FWP_ETHER_ENCAP_METHOD_ETHER_V2 = FWP_ETHER_ENCAP_METHOD.ETHER_V2;
pub const FWP_ETHER_ENCAP_METHOD_SNAP = FWP_ETHER_ENCAP_METHOD.SNAP;
pub const FWP_ETHER_ENCAP_METHOD_SNAP_W_OUI_ZERO = FWP_ETHER_ENCAP_METHOD.SNAP_W_OUI_ZERO;

pub const FWP_DATA_TYPE = extern enum(i32) {
    FWP_EMPTY = 0,
    FWP_UINT8 = 1,
    FWP_UINT16 = 2,
    FWP_UINT32 = 3,
    FWP_UINT64 = 4,
    FWP_INT8 = 5,
    FWP_INT16 = 6,
    FWP_INT32 = 7,
    FWP_INT64 = 8,
    FWP_FLOAT = 9,
    FWP_DOUBLE = 10,
    FWP_BYTE_ARRAY16_TYPE = 11,
    FWP_BYTE_BLOB_TYPE = 12,
    FWP_SID = 13,
    FWP_SECURITY_DESCRIPTOR_TYPE = 14,
    FWP_TOKEN_INFORMATION_TYPE = 15,
    FWP_TOKEN_ACCESS_INFORMATION_TYPE = 16,
    FWP_UNICODE_STRING_TYPE = 17,
    FWP_BYTE_ARRAY6_TYPE = 18,
    FWP_BITMAP_INDEX_TYPE = 19,
    FWP_BITMAP_ARRAY64_TYPE = 20,
    FWP_SINGLE_DATA_TYPE_MAX = 255,
    FWP_V4_ADDR_MASK = 256,
    FWP_V6_ADDR_MASK = 257,
    FWP_RANGE_TYPE = 258,
    MAX = 259,
};
pub const FWP_EMPTY = FWP_DATA_TYPE.FWP_EMPTY;
pub const FWP_UINT8 = FWP_DATA_TYPE.FWP_UINT8;
pub const FWP_UINT16 = FWP_DATA_TYPE.FWP_UINT16;
pub const FWP_UINT32 = FWP_DATA_TYPE.FWP_UINT32;
pub const FWP_UINT64 = FWP_DATA_TYPE.FWP_UINT64;
pub const FWP_INT8 = FWP_DATA_TYPE.FWP_INT8;
pub const FWP_INT16 = FWP_DATA_TYPE.FWP_INT16;
pub const FWP_INT32 = FWP_DATA_TYPE.FWP_INT32;
pub const FWP_INT64 = FWP_DATA_TYPE.FWP_INT64;
pub const FWP_FLOAT = FWP_DATA_TYPE.FWP_FLOAT;
pub const FWP_DOUBLE = FWP_DATA_TYPE.FWP_DOUBLE;
pub const FWP_BYTE_ARRAY16_TYPE = FWP_DATA_TYPE.FWP_BYTE_ARRAY16_TYPE;
pub const FWP_BYTE_BLOB_TYPE = FWP_DATA_TYPE.FWP_BYTE_BLOB_TYPE;
pub const FWP_SID = FWP_DATA_TYPE.FWP_SID;
pub const FWP_SECURITY_DESCRIPTOR_TYPE = FWP_DATA_TYPE.FWP_SECURITY_DESCRIPTOR_TYPE;
pub const FWP_TOKEN_INFORMATION_TYPE = FWP_DATA_TYPE.FWP_TOKEN_INFORMATION_TYPE;
pub const FWP_TOKEN_ACCESS_INFORMATION_TYPE = FWP_DATA_TYPE.FWP_TOKEN_ACCESS_INFORMATION_TYPE;
pub const FWP_UNICODE_STRING_TYPE = FWP_DATA_TYPE.FWP_UNICODE_STRING_TYPE;
pub const FWP_BYTE_ARRAY6_TYPE = FWP_DATA_TYPE.FWP_BYTE_ARRAY6_TYPE;
pub const FWP_BITMAP_INDEX_TYPE = FWP_DATA_TYPE.FWP_BITMAP_INDEX_TYPE;
pub const FWP_BITMAP_ARRAY64_TYPE = FWP_DATA_TYPE.FWP_BITMAP_ARRAY64_TYPE;
pub const FWP_SINGLE_DATA_TYPE_MAX = FWP_DATA_TYPE.FWP_SINGLE_DATA_TYPE_MAX;
pub const FWP_V4_ADDR_MASK = FWP_DATA_TYPE.FWP_V4_ADDR_MASK;
pub const FWP_V6_ADDR_MASK = FWP_DATA_TYPE.FWP_V6_ADDR_MASK;
pub const FWP_RANGE_TYPE = FWP_DATA_TYPE.FWP_RANGE_TYPE;
pub const FWP_DATA_TYPE_MAX = FWP_DATA_TYPE.MAX;

pub const FWP_BITMAP_ARRAY64_ = extern struct {
    bitmapArray64: [8]u8,
};

pub const FWP_BYTE_ARRAY6 = extern struct {
    byteArray6: [6]u8,
};

pub const FWP_BYTE_ARRAY16 = extern struct {
    byteArray16: [16]u8,
};

pub const FWP_BYTE_BLOB = extern struct {
    size: u32,
    data: *u8,
};

pub const FWP_TOKEN_INFORMATION = extern struct {
    sidCount: u32,
    sids: *SID_AND_ATTRIBUTES,
    restrictedSidCount: u32,
    restrictedSids: *SID_AND_ATTRIBUTES,
};

pub const FWP_VALUE0 = extern struct {
    type: FWP_DATA_TYPE,
    Anonymous: FWP_VALUE0._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const FWP_MATCH_TYPE = extern enum(i32) {
    FWP_MATCH_EQUAL = 0,
    FWP_MATCH_GREATER = 1,
    FWP_MATCH_LESS = 2,
    FWP_MATCH_GREATER_OR_EQUAL = 3,
    FWP_MATCH_LESS_OR_EQUAL = 4,
    FWP_MATCH_RANGE = 5,
    FWP_MATCH_FLAGS_ALL_SET = 6,
    FWP_MATCH_FLAGS_ANY_SET = 7,
    FWP_MATCH_FLAGS_NONE_SET = 8,
    FWP_MATCH_EQUAL_CASE_INSENSITIVE = 9,
    FWP_MATCH_NOT_EQUAL = 10,
    FWP_MATCH_PREFIX = 11,
    FWP_MATCH_NOT_PREFIX = 12,
    MAX = 13,
};
pub const FWP_MATCH_EQUAL = FWP_MATCH_TYPE.FWP_MATCH_EQUAL;
pub const FWP_MATCH_GREATER = FWP_MATCH_TYPE.FWP_MATCH_GREATER;
pub const FWP_MATCH_LESS = FWP_MATCH_TYPE.FWP_MATCH_LESS;
pub const FWP_MATCH_GREATER_OR_EQUAL = FWP_MATCH_TYPE.FWP_MATCH_GREATER_OR_EQUAL;
pub const FWP_MATCH_LESS_OR_EQUAL = FWP_MATCH_TYPE.FWP_MATCH_LESS_OR_EQUAL;
pub const FWP_MATCH_RANGE = FWP_MATCH_TYPE.FWP_MATCH_RANGE;
pub const FWP_MATCH_FLAGS_ALL_SET = FWP_MATCH_TYPE.FWP_MATCH_FLAGS_ALL_SET;
pub const FWP_MATCH_FLAGS_ANY_SET = FWP_MATCH_TYPE.FWP_MATCH_FLAGS_ANY_SET;
pub const FWP_MATCH_FLAGS_NONE_SET = FWP_MATCH_TYPE.FWP_MATCH_FLAGS_NONE_SET;
pub const FWP_MATCH_EQUAL_CASE_INSENSITIVE = FWP_MATCH_TYPE.FWP_MATCH_EQUAL_CASE_INSENSITIVE;
pub const FWP_MATCH_NOT_EQUAL = FWP_MATCH_TYPE.FWP_MATCH_NOT_EQUAL;
pub const FWP_MATCH_PREFIX = FWP_MATCH_TYPE.FWP_MATCH_PREFIX;
pub const FWP_MATCH_NOT_PREFIX = FWP_MATCH_TYPE.FWP_MATCH_NOT_PREFIX;
pub const FWP_MATCH_TYPE_MAX = FWP_MATCH_TYPE.MAX;

pub const FWP_V4_ADDR_AND_MASK = extern struct {
    addr: u32,
    mask: u32,
};

pub const FWP_V6_ADDR_AND_MASK = extern struct {
    addr: [16]u8,
    prefixLength: u8,
};

pub const FWP_RANGE0 = extern struct {
    valueLow: FWP_VALUE0,
    valueHigh: FWP_VALUE0,
};

pub const FWP_CONDITION_VALUE0 = extern struct {
    type: FWP_DATA_TYPE,
    Anonymous: FWP_CONDITION_VALUE0._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const FWP_CLASSIFY_OPTION_TYPE = extern enum(i32) {
    FWP_CLASSIFY_OPTION_MULTICAST_STATE = 0,
    FWP_CLASSIFY_OPTION_LOOSE_SOURCE_MAPPING = 1,
    FWP_CLASSIFY_OPTION_UNICAST_LIFETIME = 2,
    FWP_CLASSIFY_OPTION_MCAST_BCAST_LIFETIME = 3,
    FWP_CLASSIFY_OPTION_SECURE_SOCKET_SECURITY_FLAGS = 4,
    FWP_CLASSIFY_OPTION_SECURE_SOCKET_AUTHIP_MM_POLICY_KEY = 5,
    FWP_CLASSIFY_OPTION_SECURE_SOCKET_AUTHIP_QM_POLICY_KEY = 6,
    FWP_CLASSIFY_OPTION_LOCAL_ONLY_MAPPING = 7,
    FWP_CLASSIFY_OPTION_MAX = 8,
};
pub const FWP_CLASSIFY_OPTION_MULTICAST_STATE = FWP_CLASSIFY_OPTION_TYPE.FWP_CLASSIFY_OPTION_MULTICAST_STATE;
pub const FWP_CLASSIFY_OPTION_LOOSE_SOURCE_MAPPING = FWP_CLASSIFY_OPTION_TYPE.FWP_CLASSIFY_OPTION_LOOSE_SOURCE_MAPPING;
pub const FWP_CLASSIFY_OPTION_UNICAST_LIFETIME = FWP_CLASSIFY_OPTION_TYPE.FWP_CLASSIFY_OPTION_UNICAST_LIFETIME;
pub const FWP_CLASSIFY_OPTION_MCAST_BCAST_LIFETIME = FWP_CLASSIFY_OPTION_TYPE.FWP_CLASSIFY_OPTION_MCAST_BCAST_LIFETIME;
pub const FWP_CLASSIFY_OPTION_SECURE_SOCKET_SECURITY_FLAGS = FWP_CLASSIFY_OPTION_TYPE.FWP_CLASSIFY_OPTION_SECURE_SOCKET_SECURITY_FLAGS;
pub const FWP_CLASSIFY_OPTION_SECURE_SOCKET_AUTHIP_MM_POLICY_KEY = FWP_CLASSIFY_OPTION_TYPE.FWP_CLASSIFY_OPTION_SECURE_SOCKET_AUTHIP_MM_POLICY_KEY;
pub const FWP_CLASSIFY_OPTION_SECURE_SOCKET_AUTHIP_QM_POLICY_KEY = FWP_CLASSIFY_OPTION_TYPE.FWP_CLASSIFY_OPTION_SECURE_SOCKET_AUTHIP_QM_POLICY_KEY;
pub const FWP_CLASSIFY_OPTION_LOCAL_ONLY_MAPPING = FWP_CLASSIFY_OPTION_TYPE.FWP_CLASSIFY_OPTION_LOCAL_ONLY_MAPPING;
pub const FWP_CLASSIFY_OPTION_MAX = FWP_CLASSIFY_OPTION_TYPE.FWP_CLASSIFY_OPTION_MAX;

pub const FWP_VSWITCH_NETWORK_TYPE = extern enum(i32) {
    UNKNOWN = 0,
    PRIVATE = 1,
    INTERNAL = 2,
    EXTERNAL = 3,
};
pub const FWP_VSWITCH_NETWORK_TYPE_UNKNOWN = FWP_VSWITCH_NETWORK_TYPE.UNKNOWN;
pub const FWP_VSWITCH_NETWORK_TYPE_PRIVATE = FWP_VSWITCH_NETWORK_TYPE.PRIVATE;
pub const FWP_VSWITCH_NETWORK_TYPE_INTERNAL = FWP_VSWITCH_NETWORK_TYPE.INTERNAL;
pub const FWP_VSWITCH_NETWORK_TYPE_EXTERNAL = FWP_VSWITCH_NETWORK_TYPE.EXTERNAL;

pub const FWP_FILTER_ENUM_TYPE = extern enum(i32) {
    FWP_FILTER_ENUM_FULLY_CONTAINED = 0,
    FWP_FILTER_ENUM_OVERLAPPING = 1,
    MAX = 2,
};
pub const FWP_FILTER_ENUM_FULLY_CONTAINED = FWP_FILTER_ENUM_TYPE.FWP_FILTER_ENUM_FULLY_CONTAINED;
pub const FWP_FILTER_ENUM_OVERLAPPING = FWP_FILTER_ENUM_TYPE.FWP_FILTER_ENUM_OVERLAPPING;
pub const FWP_FILTER_ENUM_TYPE_MAX = FWP_FILTER_ENUM_TYPE.MAX;

pub const FWPM_DISPLAY_DATA0 = extern struct {
    name: PWSTR,
    description: PWSTR,
};

pub const IPSEC_VIRTUAL_IF_TUNNEL_INFO0 = extern struct {
    virtualIfTunnelId: u64,
    trafficSelectorId: u64,
};

pub const IKEEXT_KEY_MODULE_TYPE = extern enum(i32) {
    IKEEXT_KEY_MODULE_IKE = 0,
    IKEEXT_KEY_MODULE_AUTHIP = 1,
    IKEEXT_KEY_MODULE_IKEV2 = 2,
    IKEEXT_KEY_MODULE_MAX = 3,
};
pub const IKEEXT_KEY_MODULE_IKE = IKEEXT_KEY_MODULE_TYPE.IKEEXT_KEY_MODULE_IKE;
pub const IKEEXT_KEY_MODULE_AUTHIP = IKEEXT_KEY_MODULE_TYPE.IKEEXT_KEY_MODULE_AUTHIP;
pub const IKEEXT_KEY_MODULE_IKEV2 = IKEEXT_KEY_MODULE_TYPE.IKEEXT_KEY_MODULE_IKEV2;
pub const IKEEXT_KEY_MODULE_MAX = IKEEXT_KEY_MODULE_TYPE.IKEEXT_KEY_MODULE_MAX;

pub const IKEEXT_AUTHENTICATION_METHOD_TYPE = extern enum(i32) {
    IKEEXT_PRESHARED_KEY = 0,
    IKEEXT_CERTIFICATE = 1,
    IKEEXT_KERBEROS = 2,
    IKEEXT_ANONYMOUS = 3,
    IKEEXT_SSL = 4,
    IKEEXT_NTLM_V2 = 5,
    IKEEXT_IPV6_CGA = 6,
    IKEEXT_CERTIFICATE_ECDSA_P256 = 7,
    IKEEXT_CERTIFICATE_ECDSA_P384 = 8,
    IKEEXT_SSL_ECDSA_P256 = 9,
    IKEEXT_SSL_ECDSA_P384 = 10,
    IKEEXT_EAP = 11,
    IKEEXT_RESERVED = 12,
    MAX = 13,
};
pub const IKEEXT_PRESHARED_KEY = IKEEXT_AUTHENTICATION_METHOD_TYPE.IKEEXT_PRESHARED_KEY;
pub const IKEEXT_CERTIFICATE = IKEEXT_AUTHENTICATION_METHOD_TYPE.IKEEXT_CERTIFICATE;
pub const IKEEXT_KERBEROS = IKEEXT_AUTHENTICATION_METHOD_TYPE.IKEEXT_KERBEROS;
pub const IKEEXT_ANONYMOUS = IKEEXT_AUTHENTICATION_METHOD_TYPE.IKEEXT_ANONYMOUS;
pub const IKEEXT_SSL = IKEEXT_AUTHENTICATION_METHOD_TYPE.IKEEXT_SSL;
pub const IKEEXT_NTLM_V2 = IKEEXT_AUTHENTICATION_METHOD_TYPE.IKEEXT_NTLM_V2;
pub const IKEEXT_IPV6_CGA = IKEEXT_AUTHENTICATION_METHOD_TYPE.IKEEXT_IPV6_CGA;
pub const IKEEXT_CERTIFICATE_ECDSA_P256 = IKEEXT_AUTHENTICATION_METHOD_TYPE.IKEEXT_CERTIFICATE_ECDSA_P256;
pub const IKEEXT_CERTIFICATE_ECDSA_P384 = IKEEXT_AUTHENTICATION_METHOD_TYPE.IKEEXT_CERTIFICATE_ECDSA_P384;
pub const IKEEXT_SSL_ECDSA_P256 = IKEEXT_AUTHENTICATION_METHOD_TYPE.IKEEXT_SSL_ECDSA_P256;
pub const IKEEXT_SSL_ECDSA_P384 = IKEEXT_AUTHENTICATION_METHOD_TYPE.IKEEXT_SSL_ECDSA_P384;
pub const IKEEXT_EAP = IKEEXT_AUTHENTICATION_METHOD_TYPE.IKEEXT_EAP;
pub const IKEEXT_RESERVED = IKEEXT_AUTHENTICATION_METHOD_TYPE.IKEEXT_RESERVED;
pub const IKEEXT_AUTHENTICATION_METHOD_TYPE_MAX = IKEEXT_AUTHENTICATION_METHOD_TYPE.MAX;

pub const IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE = extern enum(i32) {
    IKEEXT_IMPERSONATION_NONE = 0,
    IKEEXT_IMPERSONATION_SOCKET_PRINCIPAL = 1,
    IKEEXT_IMPERSONATION_MAX = 2,
};
pub const IKEEXT_IMPERSONATION_NONE = IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE.IKEEXT_IMPERSONATION_NONE;
pub const IKEEXT_IMPERSONATION_SOCKET_PRINCIPAL = IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE.IKEEXT_IMPERSONATION_SOCKET_PRINCIPAL;
pub const IKEEXT_IMPERSONATION_MAX = IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE.IKEEXT_IMPERSONATION_MAX;

pub const IKEEXT_PRESHARED_KEY_AUTHENTICATION0 = extern struct {
    presharedKey: FWP_BYTE_BLOB,
};

pub const IKEEXT_PRESHARED_KEY_AUTHENTICATION1 = extern struct {
    presharedKey: FWP_BYTE_BLOB,
    flags: u32,
};

pub const IKEEXT_CERT_ROOT_CONFIG0 = extern struct {
    certData: FWP_BYTE_BLOB,
    flags: u32,
};

pub const IKEEXT_CERT_CONFIG_TYPE = extern enum(i32) {
    IKEEXT_CERT_CONFIG_EXPLICIT_TRUST_LIST = 0,
    IKEEXT_CERT_CONFIG_ENTERPRISE_STORE = 1,
    IKEEXT_CERT_CONFIG_TRUSTED_ROOT_STORE = 2,
    IKEEXT_CERT_CONFIG_UNSPECIFIED = 3,
    MAX = 4,
};
pub const IKEEXT_CERT_CONFIG_EXPLICIT_TRUST_LIST = IKEEXT_CERT_CONFIG_TYPE.IKEEXT_CERT_CONFIG_EXPLICIT_TRUST_LIST;
pub const IKEEXT_CERT_CONFIG_ENTERPRISE_STORE = IKEEXT_CERT_CONFIG_TYPE.IKEEXT_CERT_CONFIG_ENTERPRISE_STORE;
pub const IKEEXT_CERT_CONFIG_TRUSTED_ROOT_STORE = IKEEXT_CERT_CONFIG_TYPE.IKEEXT_CERT_CONFIG_TRUSTED_ROOT_STORE;
pub const IKEEXT_CERT_CONFIG_UNSPECIFIED = IKEEXT_CERT_CONFIG_TYPE.IKEEXT_CERT_CONFIG_UNSPECIFIED;
pub const IKEEXT_CERT_CONFIG_TYPE_MAX = IKEEXT_CERT_CONFIG_TYPE.MAX;

pub const IKEEXT_CERTIFICATE_AUTHENTICATION0 = extern struct {
    inboundConfigType: IKEEXT_CERT_CONFIG_TYPE,
    Anonymous1: IKEEXT_CERTIFICATE_AUTHENTICATION0._Anonymous1_e__Union,
    outboundConfigType: IKEEXT_CERT_CONFIG_TYPE,
    Anonymous2: IKEEXT_CERTIFICATE_AUTHENTICATION0._Anonymous2_e__Union,
    flags: u32,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const IKEEXT_CERTIFICATE_AUTHENTICATION1 = extern struct {
    inboundConfigType: IKEEXT_CERT_CONFIG_TYPE,
    Anonymous1: IKEEXT_CERTIFICATE_AUTHENTICATION1._Anonymous1_e__Union,
    outboundConfigType: IKEEXT_CERT_CONFIG_TYPE,
    Anonymous2: IKEEXT_CERTIFICATE_AUTHENTICATION1._Anonymous2_e__Union,
    flags: u32,
    localCertLocationUrl: FWP_BYTE_BLOB,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const IKEEXT_CERT_CRITERIA_NAME_TYPE = extern enum(i32) {
    IKEEXT_CERT_CRITERIA_DNS = 0,
    IKEEXT_CERT_CRITERIA_UPN = 1,
    IKEEXT_CERT_CRITERIA_RFC822 = 2,
    IKEEXT_CERT_CRITERIA_CN = 3,
    IKEEXT_CERT_CRITERIA_OU = 4,
    IKEEXT_CERT_CRITERIA_O = 5,
    IKEEXT_CERT_CRITERIA_DC = 6,
    MAX = 7,
};
pub const IKEEXT_CERT_CRITERIA_DNS = IKEEXT_CERT_CRITERIA_NAME_TYPE.IKEEXT_CERT_CRITERIA_DNS;
pub const IKEEXT_CERT_CRITERIA_UPN = IKEEXT_CERT_CRITERIA_NAME_TYPE.IKEEXT_CERT_CRITERIA_UPN;
pub const IKEEXT_CERT_CRITERIA_RFC822 = IKEEXT_CERT_CRITERIA_NAME_TYPE.IKEEXT_CERT_CRITERIA_RFC822;
pub const IKEEXT_CERT_CRITERIA_CN = IKEEXT_CERT_CRITERIA_NAME_TYPE.IKEEXT_CERT_CRITERIA_CN;
pub const IKEEXT_CERT_CRITERIA_OU = IKEEXT_CERT_CRITERIA_NAME_TYPE.IKEEXT_CERT_CRITERIA_OU;
pub const IKEEXT_CERT_CRITERIA_O = IKEEXT_CERT_CRITERIA_NAME_TYPE.IKEEXT_CERT_CRITERIA_O;
pub const IKEEXT_CERT_CRITERIA_DC = IKEEXT_CERT_CRITERIA_NAME_TYPE.IKEEXT_CERT_CRITERIA_DC;
pub const IKEEXT_CERT_CRITERIA_NAME_TYPE_MAX = IKEEXT_CERT_CRITERIA_NAME_TYPE.MAX;

pub const IKEEXT_CERT_EKUS0 = extern struct {
    numEku: u32,
    eku: *PSTR,
};

pub const IKEEXT_CERT_NAME0 = extern struct {
    nameType: IKEEXT_CERT_CRITERIA_NAME_TYPE,
    certName: PWSTR,
};

pub const IKEEXT_CERTIFICATE_CRITERIA0 = extern struct {
    certData: FWP_BYTE_BLOB,
    certHash: FWP_BYTE_BLOB,
    eku: *IKEEXT_CERT_EKUS0,
    name: *IKEEXT_CERT_NAME0,
    flags: u32,
};

pub const IKEEXT_CERTIFICATE_AUTHENTICATION2 = extern struct {
    inboundConfigType: IKEEXT_CERT_CONFIG_TYPE,
    Anonymous1: IKEEXT_CERTIFICATE_AUTHENTICATION2._Anonymous1_e__Union,
    outboundConfigType: IKEEXT_CERT_CONFIG_TYPE,
    Anonymous2: IKEEXT_CERTIFICATE_AUTHENTICATION2._Anonymous2_e__Union,
    flags: u32,
    localCertLocationUrl: FWP_BYTE_BLOB,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const IKEEXT_IPV6_CGA_AUTHENTICATION0 = extern struct {
    keyContainerName: PWSTR,
    cspName: PWSTR,
    cspType: u32,
    cgaModifier: FWP_BYTE_ARRAY16,
    cgaCollisionCount: u8,
};

pub const IKEEXT_KERBEROS_AUTHENTICATION0 = extern struct {
    flags: u32,
};

pub const IKEEXT_KERBEROS_AUTHENTICATION1 = extern struct {
    flags: u32,
    proxyServer: PWSTR,
};

pub const IKEEXT_RESERVED_AUTHENTICATION0 = extern struct {
    flags: u32,
};

pub const IKEEXT_NTLM_V2_AUTHENTICATION0 = extern struct {
    flags: u32,
};

pub const IKEEXT_EAP_AUTHENTICATION0 = extern struct {
    flags: u32,
};

pub const IKEEXT_AUTHENTICATION_METHOD0 = extern struct {
    authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    Anonymous: IKEEXT_AUTHENTICATION_METHOD0._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IKEEXT_AUTHENTICATION_METHOD1 = extern struct {
    authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    Anonymous: IKEEXT_AUTHENTICATION_METHOD1._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IKEEXT_AUTHENTICATION_METHOD2 = extern struct {
    authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    Anonymous: IKEEXT_AUTHENTICATION_METHOD2._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IKEEXT_CIPHER_TYPE = extern enum(i32) {
    IKEEXT_CIPHER_DES = 0,
    IKEEXT_CIPHER_3DES = 1,
    IKEEXT_CIPHER_AES_128 = 2,
    IKEEXT_CIPHER_AES_192 = 3,
    IKEEXT_CIPHER_AES_256 = 4,
    IKEEXT_CIPHER_AES_GCM_128_16ICV = 5,
    IKEEXT_CIPHER_AES_GCM_256_16ICV = 6,
    MAX = 7,
};
pub const IKEEXT_CIPHER_DES = IKEEXT_CIPHER_TYPE.IKEEXT_CIPHER_DES;
pub const IKEEXT_CIPHER_3DES = IKEEXT_CIPHER_TYPE.IKEEXT_CIPHER_3DES;
pub const IKEEXT_CIPHER_AES_128 = IKEEXT_CIPHER_TYPE.IKEEXT_CIPHER_AES_128;
pub const IKEEXT_CIPHER_AES_192 = IKEEXT_CIPHER_TYPE.IKEEXT_CIPHER_AES_192;
pub const IKEEXT_CIPHER_AES_256 = IKEEXT_CIPHER_TYPE.IKEEXT_CIPHER_AES_256;
pub const IKEEXT_CIPHER_AES_GCM_128_16ICV = IKEEXT_CIPHER_TYPE.IKEEXT_CIPHER_AES_GCM_128_16ICV;
pub const IKEEXT_CIPHER_AES_GCM_256_16ICV = IKEEXT_CIPHER_TYPE.IKEEXT_CIPHER_AES_GCM_256_16ICV;
pub const IKEEXT_CIPHER_TYPE_MAX = IKEEXT_CIPHER_TYPE.MAX;

pub const IKEEXT_CIPHER_ALGORITHM0 = extern struct {
    algoIdentifier: IKEEXT_CIPHER_TYPE,
    keyLen: u32,
    rounds: u32,
};

pub const IKEEXT_INTEGRITY_TYPE = extern enum(i32) {
    IKEEXT_INTEGRITY_MD5 = 0,
    IKEEXT_INTEGRITY_SHA1 = 1,
    IKEEXT_INTEGRITY_SHA_256 = 2,
    IKEEXT_INTEGRITY_SHA_384 = 3,
    MAX = 4,
};
pub const IKEEXT_INTEGRITY_MD5 = IKEEXT_INTEGRITY_TYPE.IKEEXT_INTEGRITY_MD5;
pub const IKEEXT_INTEGRITY_SHA1 = IKEEXT_INTEGRITY_TYPE.IKEEXT_INTEGRITY_SHA1;
pub const IKEEXT_INTEGRITY_SHA_256 = IKEEXT_INTEGRITY_TYPE.IKEEXT_INTEGRITY_SHA_256;
pub const IKEEXT_INTEGRITY_SHA_384 = IKEEXT_INTEGRITY_TYPE.IKEEXT_INTEGRITY_SHA_384;
pub const IKEEXT_INTEGRITY_TYPE_MAX = IKEEXT_INTEGRITY_TYPE.MAX;

pub const IKEEXT_INTEGRITY_ALGORITHM0 = extern struct {
    algoIdentifier: IKEEXT_INTEGRITY_TYPE,
};

pub const IKEEXT_DH_GROUP = extern enum(i32) {
    NONE = 0,
    _1 = 1,
    _2 = 2,
    _14 = 3,
    _2048 = 3,
    IKEEXT_DH_ECP_256 = 4,
    IKEEXT_DH_ECP_384 = 5,
    _24 = 6,
    MAX = 7,
};
pub const IKEEXT_DH_GROUP_NONE = IKEEXT_DH_GROUP.NONE;
pub const IKEEXT_DH_GROUP_1 = IKEEXT_DH_GROUP._1;
pub const IKEEXT_DH_GROUP_2 = IKEEXT_DH_GROUP._2;
pub const IKEEXT_DH_GROUP_14 = IKEEXT_DH_GROUP._14;
pub const IKEEXT_DH_GROUP_2048 = IKEEXT_DH_GROUP._2048;
pub const IKEEXT_DH_ECP_256 = IKEEXT_DH_GROUP.IKEEXT_DH_ECP_256;
pub const IKEEXT_DH_ECP_384 = IKEEXT_DH_GROUP.IKEEXT_DH_ECP_384;
pub const IKEEXT_DH_GROUP_24 = IKEEXT_DH_GROUP._24;
pub const IKEEXT_DH_GROUP_MAX = IKEEXT_DH_GROUP.MAX;

pub const IKEEXT_PROPOSAL0 = extern struct {
    cipherAlgorithm: IKEEXT_CIPHER_ALGORITHM0,
    integrityAlgorithm: IKEEXT_INTEGRITY_ALGORITHM0,
    maxLifetimeSeconds: u32,
    dhGroup: IKEEXT_DH_GROUP,
    quickModeLimit: u32,
};

pub const IKEEXT_POLICY0 = extern struct {
    softExpirationTime: u32,
    numAuthenticationMethods: u32,
    authenticationMethods: *IKEEXT_AUTHENTICATION_METHOD0,
    initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
    numIkeProposals: u32,
    ikeProposals: *IKEEXT_PROPOSAL0,
    flags: u32,
    maxDynamicFilters: u32,
};

pub const IKEEXT_POLICY1 = extern struct {
    softExpirationTime: u32,
    numAuthenticationMethods: u32,
    authenticationMethods: *IKEEXT_AUTHENTICATION_METHOD1,
    initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
    numIkeProposals: u32,
    ikeProposals: *IKEEXT_PROPOSAL0,
    flags: u32,
    maxDynamicFilters: u32,
    retransmitDurationSecs: u32,
};

pub const IKEEXT_POLICY2 = extern struct {
    softExpirationTime: u32,
    numAuthenticationMethods: u32,
    authenticationMethods: *IKEEXT_AUTHENTICATION_METHOD2,
    initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
    numIkeProposals: u32,
    ikeProposals: *IKEEXT_PROPOSAL0,
    flags: u32,
    maxDynamicFilters: u32,
    retransmitDurationSecs: u32,
};

pub const IKEEXT_EM_POLICY0 = extern struct {
    numAuthenticationMethods: u32,
    authenticationMethods: *IKEEXT_AUTHENTICATION_METHOD0,
    initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
};

pub const IKEEXT_EM_POLICY1 = extern struct {
    numAuthenticationMethods: u32,
    authenticationMethods: *IKEEXT_AUTHENTICATION_METHOD1,
    initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
};

pub const IKEEXT_EM_POLICY2 = extern struct {
    numAuthenticationMethods: u32,
    authenticationMethods: *IKEEXT_AUTHENTICATION_METHOD2,
    initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
};

pub const IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0 = extern struct {
    currentActiveMainModes: u32,
    totalMainModesStarted: u32,
    totalSuccessfulMainModes: u32,
    totalFailedMainModes: u32,
    totalResponderMainModes: u32,
    currentNewResponderMainModes: u32,
    currentActiveQuickModes: u32,
    totalQuickModesStarted: u32,
    totalSuccessfulQuickModes: u32,
    totalFailedQuickModes: u32,
    totalAcquires: u32,
    totalReinitAcquires: u32,
    currentActiveExtendedModes: u32,
    totalExtendedModesStarted: u32,
    totalSuccessfulExtendedModes: u32,
    totalFailedExtendedModes: u32,
    totalImpersonationExtendedModes: u32,
    totalImpersonationMainModes: u32,
};

pub const IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1 = extern struct {
    currentActiveMainModes: u32,
    totalMainModesStarted: u32,
    totalSuccessfulMainModes: u32,
    totalFailedMainModes: u32,
    totalResponderMainModes: u32,
    currentNewResponderMainModes: u32,
    currentActiveQuickModes: u32,
    totalQuickModesStarted: u32,
    totalSuccessfulQuickModes: u32,
    totalFailedQuickModes: u32,
    totalAcquires: u32,
    totalReinitAcquires: u32,
    currentActiveExtendedModes: u32,
    totalExtendedModesStarted: u32,
    totalSuccessfulExtendedModes: u32,
    totalFailedExtendedModes: u32,
    totalImpersonationExtendedModes: u32,
    totalImpersonationMainModes: u32,
};

pub const IKEEXT_KEYMODULE_STATISTICS0 = extern struct {
    v4Statistics: IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0,
    v6Statistics: IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0,
    errorFrequencyTable: [97]u32,
    mainModeNegotiationTime: u32,
    quickModeNegotiationTime: u32,
    extendedModeNegotiationTime: u32,
};

pub const IKEEXT_KEYMODULE_STATISTICS1 = extern struct {
    v4Statistics: IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1,
    v6Statistics: IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1,
    errorFrequencyTable: [97]u32,
    mainModeNegotiationTime: u32,
    quickModeNegotiationTime: u32,
    extendedModeNegotiationTime: u32,
};

pub const IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0 = extern struct {
    totalSocketReceiveFailures: u32,
    totalSocketSendFailures: u32,
};

pub const IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1 = extern struct {
    totalSocketReceiveFailures: u32,
    totalSocketSendFailures: u32,
};

pub const IKEEXT_COMMON_STATISTICS0 = extern struct {
    v4Statistics: IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0,
    v6Statistics: IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0,
    totalPacketsReceived: u32,
    totalInvalidPacketsReceived: u32,
    currentQueuedWorkitems: u32,
};

pub const IKEEXT_COMMON_STATISTICS1 = extern struct {
    v4Statistics: IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1,
    v6Statistics: IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1,
    totalPacketsReceived: u32,
    totalInvalidPacketsReceived: u32,
    currentQueuedWorkitems: u32,
};

pub const IKEEXT_STATISTICS0 = extern struct {
    ikeStatistics: IKEEXT_KEYMODULE_STATISTICS0,
    authipStatistics: IKEEXT_KEYMODULE_STATISTICS0,
    commonStatistics: IKEEXT_COMMON_STATISTICS0,
};

pub const IKEEXT_STATISTICS1 = extern struct {
    ikeStatistics: IKEEXT_KEYMODULE_STATISTICS1,
    authipStatistics: IKEEXT_KEYMODULE_STATISTICS1,
    ikeV2Statistics: IKEEXT_KEYMODULE_STATISTICS1,
    commonStatistics: IKEEXT_COMMON_STATISTICS1,
};

pub const IKEEXT_TRAFFIC0 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: IKEEXT_TRAFFIC0._Anonymous1_e__Union,
    Anonymous2: IKEEXT_TRAFFIC0._Anonymous2_e__Union,
    authIpFilterId: u64,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const IKEEXT_COOKIE_PAIR0 = extern struct {
    initiator: u64,
    responder: u64,
};

pub const IKEEXT_CERTIFICATE_CREDENTIAL0 = extern struct {
    subjectName: FWP_BYTE_BLOB,
    certHash: FWP_BYTE_BLOB,
    flags: u32,
};

pub const IKEEXT_NAME_CREDENTIAL0 = extern struct {
    principalName: PWSTR,
};

pub const IKEEXT_CREDENTIAL0 = extern struct {
    authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    impersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
    Anonymous: IKEEXT_CREDENTIAL0._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IKEEXT_CREDENTIAL_PAIR0 = extern struct {
    localCredentials: IKEEXT_CREDENTIAL0,
    peerCredentials: IKEEXT_CREDENTIAL0,
};

pub const IKEEXT_CREDENTIALS0 = extern struct {
    numCredentials: u32,
    credentials: *IKEEXT_CREDENTIAL_PAIR0,
};

pub const IKEEXT_SA_DETAILS0 = extern struct {
    saId: u64,
    keyModuleType: IKEEXT_KEY_MODULE_TYPE,
    ipVersion: FWP_IP_VERSION,
    Anonymous: IKEEXT_SA_DETAILS0._Anonymous_e__Union,
    ikeTraffic: IKEEXT_TRAFFIC0,
    ikeProposal: IKEEXT_PROPOSAL0,
    cookiePair: IKEEXT_COOKIE_PAIR0,
    ikeCredentials: IKEEXT_CREDENTIALS0,
    ikePolicyKey: Guid,
    virtualIfTunnelId: u64,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IKEEXT_CERTIFICATE_CREDENTIAL1 = extern struct {
    subjectName: FWP_BYTE_BLOB,
    certHash: FWP_BYTE_BLOB,
    flags: u32,
    certificate: FWP_BYTE_BLOB,
};

pub const IKEEXT_CREDENTIAL1 = extern struct {
    authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    impersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
    Anonymous: IKEEXT_CREDENTIAL1._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IKEEXT_CREDENTIAL_PAIR1 = extern struct {
    localCredentials: IKEEXT_CREDENTIAL1,
    peerCredentials: IKEEXT_CREDENTIAL1,
};

pub const IKEEXT_CREDENTIALS1 = extern struct {
    numCredentials: u32,
    credentials: *IKEEXT_CREDENTIAL_PAIR1,
};

pub const IKEEXT_SA_DETAILS1 = extern struct {
    saId: u64,
    keyModuleType: IKEEXT_KEY_MODULE_TYPE,
    ipVersion: FWP_IP_VERSION,
    Anonymous: IKEEXT_SA_DETAILS1._Anonymous_e__Union,
    ikeTraffic: IKEEXT_TRAFFIC0,
    ikeProposal: IKEEXT_PROPOSAL0,
    cookiePair: IKEEXT_COOKIE_PAIR0,
    ikeCredentials: IKEEXT_CREDENTIALS1,
    ikePolicyKey: Guid,
    virtualIfTunnelId: u64,
    correlationKey: FWP_BYTE_BLOB,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IKEEXT_CREDENTIAL2 = extern struct {
    authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    impersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE,
    Anonymous: IKEEXT_CREDENTIAL2._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IKEEXT_CREDENTIAL_PAIR2 = extern struct {
    localCredentials: IKEEXT_CREDENTIAL2,
    peerCredentials: IKEEXT_CREDENTIAL2,
};

pub const IKEEXT_CREDENTIALS2 = extern struct {
    numCredentials: u32,
    credentials: *IKEEXT_CREDENTIAL_PAIR2,
};

pub const IKEEXT_SA_DETAILS2 = extern struct {
    saId: u64,
    keyModuleType: IKEEXT_KEY_MODULE_TYPE,
    ipVersion: FWP_IP_VERSION,
    Anonymous: IKEEXT_SA_DETAILS2._Anonymous_e__Union,
    ikeTraffic: IKEEXT_TRAFFIC0,
    ikeProposal: IKEEXT_PROPOSAL0,
    cookiePair: IKEEXT_COOKIE_PAIR0,
    ikeCredentials: IKEEXT_CREDENTIALS2,
    ikePolicyKey: Guid,
    virtualIfTunnelId: u64,
    correlationKey: FWP_BYTE_BLOB,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IKEEXT_SA_ENUM_TEMPLATE0 = extern struct {
    localSubNet: FWP_CONDITION_VALUE0,
    remoteSubNet: FWP_CONDITION_VALUE0,
    localMainModeCertHash: FWP_BYTE_BLOB,
};

pub const IKEEXT_MM_SA_STATE = extern enum(i32) {
    NONE = 0,
    SA_SENT = 1,
    SSPI_SENT = 2,
    FINAL = 3,
    FINAL_SENT = 4,
    COMPLETE = 5,
    MAX = 6,
};
pub const IKEEXT_MM_SA_STATE_NONE = IKEEXT_MM_SA_STATE.NONE;
pub const IKEEXT_MM_SA_STATE_SA_SENT = IKEEXT_MM_SA_STATE.SA_SENT;
pub const IKEEXT_MM_SA_STATE_SSPI_SENT = IKEEXT_MM_SA_STATE.SSPI_SENT;
pub const IKEEXT_MM_SA_STATE_FINAL = IKEEXT_MM_SA_STATE.FINAL;
pub const IKEEXT_MM_SA_STATE_FINAL_SENT = IKEEXT_MM_SA_STATE.FINAL_SENT;
pub const IKEEXT_MM_SA_STATE_COMPLETE = IKEEXT_MM_SA_STATE.COMPLETE;
pub const IKEEXT_MM_SA_STATE_MAX = IKEEXT_MM_SA_STATE.MAX;

pub const IKEEXT_QM_SA_STATE = extern enum(i32) {
    NONE = 0,
    INITIAL = 1,
    FINAL = 2,
    COMPLETE = 3,
    MAX = 4,
};
pub const IKEEXT_QM_SA_STATE_NONE = IKEEXT_QM_SA_STATE.NONE;
pub const IKEEXT_QM_SA_STATE_INITIAL = IKEEXT_QM_SA_STATE.INITIAL;
pub const IKEEXT_QM_SA_STATE_FINAL = IKEEXT_QM_SA_STATE.FINAL;
pub const IKEEXT_QM_SA_STATE_COMPLETE = IKEEXT_QM_SA_STATE.COMPLETE;
pub const IKEEXT_QM_SA_STATE_MAX = IKEEXT_QM_SA_STATE.MAX;

pub const IKEEXT_EM_SA_STATE = extern enum(i32) {
    NONE = 0,
    SENT_ATTS = 1,
    SSPI_SENT = 2,
    AUTH_COMPLETE = 3,
    FINAL = 4,
    COMPLETE = 5,
    MAX = 6,
};
pub const IKEEXT_EM_SA_STATE_NONE = IKEEXT_EM_SA_STATE.NONE;
pub const IKEEXT_EM_SA_STATE_SENT_ATTS = IKEEXT_EM_SA_STATE.SENT_ATTS;
pub const IKEEXT_EM_SA_STATE_SSPI_SENT = IKEEXT_EM_SA_STATE.SSPI_SENT;
pub const IKEEXT_EM_SA_STATE_AUTH_COMPLETE = IKEEXT_EM_SA_STATE.AUTH_COMPLETE;
pub const IKEEXT_EM_SA_STATE_FINAL = IKEEXT_EM_SA_STATE.FINAL;
pub const IKEEXT_EM_SA_STATE_COMPLETE = IKEEXT_EM_SA_STATE.COMPLETE;
pub const IKEEXT_EM_SA_STATE_MAX = IKEEXT_EM_SA_STATE.MAX;

pub const IKEEXT_SA_ROLE = extern enum(i32) {
    INITIATOR = 0,
    RESPONDER = 1,
    MAX = 2,
};
pub const IKEEXT_SA_ROLE_INITIATOR = IKEEXT_SA_ROLE.INITIATOR;
pub const IKEEXT_SA_ROLE_RESPONDER = IKEEXT_SA_ROLE.RESPONDER;
pub const IKEEXT_SA_ROLE_MAX = IKEEXT_SA_ROLE.MAX;

pub const IPSEC_SA_LIFETIME0 = extern struct {
    lifetimeSeconds: u32,
    lifetimeKilobytes: u32,
    lifetimePackets: u32,
};

pub const IPSEC_TRANSFORM_TYPE = extern enum(i32) {
    IPSEC_TRANSFORM_AH = 1,
    IPSEC_TRANSFORM_ESP_AUTH = 2,
    IPSEC_TRANSFORM_ESP_CIPHER = 3,
    IPSEC_TRANSFORM_ESP_AUTH_AND_CIPHER = 4,
    IPSEC_TRANSFORM_ESP_AUTH_FW = 5,
    MAX = 6,
};
pub const IPSEC_TRANSFORM_AH = IPSEC_TRANSFORM_TYPE.IPSEC_TRANSFORM_AH;
pub const IPSEC_TRANSFORM_ESP_AUTH = IPSEC_TRANSFORM_TYPE.IPSEC_TRANSFORM_ESP_AUTH;
pub const IPSEC_TRANSFORM_ESP_CIPHER = IPSEC_TRANSFORM_TYPE.IPSEC_TRANSFORM_ESP_CIPHER;
pub const IPSEC_TRANSFORM_ESP_AUTH_AND_CIPHER = IPSEC_TRANSFORM_TYPE.IPSEC_TRANSFORM_ESP_AUTH_AND_CIPHER;
pub const IPSEC_TRANSFORM_ESP_AUTH_FW = IPSEC_TRANSFORM_TYPE.IPSEC_TRANSFORM_ESP_AUTH_FW;
pub const IPSEC_TRANSFORM_TYPE_MAX = IPSEC_TRANSFORM_TYPE.MAX;

pub const IPSEC_AUTH_TYPE = extern enum(i32) {
    IPSEC_AUTH_MD5 = 0,
    IPSEC_AUTH_SHA_1 = 1,
    IPSEC_AUTH_SHA_256 = 2,
    IPSEC_AUTH_AES_128 = 3,
    IPSEC_AUTH_AES_192 = 4,
    IPSEC_AUTH_AES_256 = 5,
    IPSEC_AUTH_MAX = 6,
};
pub const IPSEC_AUTH_MD5 = IPSEC_AUTH_TYPE.IPSEC_AUTH_MD5;
pub const IPSEC_AUTH_SHA_1 = IPSEC_AUTH_TYPE.IPSEC_AUTH_SHA_1;
pub const IPSEC_AUTH_SHA_256 = IPSEC_AUTH_TYPE.IPSEC_AUTH_SHA_256;
pub const IPSEC_AUTH_AES_128 = IPSEC_AUTH_TYPE.IPSEC_AUTH_AES_128;
pub const IPSEC_AUTH_AES_192 = IPSEC_AUTH_TYPE.IPSEC_AUTH_AES_192;
pub const IPSEC_AUTH_AES_256 = IPSEC_AUTH_TYPE.IPSEC_AUTH_AES_256;
pub const IPSEC_AUTH_MAX = IPSEC_AUTH_TYPE.IPSEC_AUTH_MAX;

pub const IPSEC_AUTH_TRANSFORM_ID0 = extern struct {
    authType: IPSEC_AUTH_TYPE,
    authConfig: u8,
};

pub const IPSEC_AUTH_TRANSFORM0 = extern struct {
    authTransformId: IPSEC_AUTH_TRANSFORM_ID0,
    cryptoModuleId: *Guid,
};

pub const IPSEC_CIPHER_TYPE = extern enum(i32) {
    DES = 1,
    _3DES = 2,
    AES_128 = 3,
    AES_192 = 4,
    AES_256 = 5,
    MAX = 6,
};
pub const IPSEC_CIPHER_TYPE_DES = IPSEC_CIPHER_TYPE.DES;
pub const IPSEC_CIPHER_TYPE_3DES = IPSEC_CIPHER_TYPE._3DES;
pub const IPSEC_CIPHER_TYPE_AES_128 = IPSEC_CIPHER_TYPE.AES_128;
pub const IPSEC_CIPHER_TYPE_AES_192 = IPSEC_CIPHER_TYPE.AES_192;
pub const IPSEC_CIPHER_TYPE_AES_256 = IPSEC_CIPHER_TYPE.AES_256;
pub const IPSEC_CIPHER_TYPE_MAX = IPSEC_CIPHER_TYPE.MAX;

pub const IPSEC_CIPHER_TRANSFORM_ID0 = extern struct {
    cipherType: IPSEC_CIPHER_TYPE,
    cipherConfig: u8,
};

pub const IPSEC_CIPHER_TRANSFORM0 = extern struct {
    cipherTransformId: IPSEC_CIPHER_TRANSFORM_ID0,
    cryptoModuleId: *Guid,
};

pub const IPSEC_AUTH_AND_CIPHER_TRANSFORM0 = extern struct {
    authTransform: IPSEC_AUTH_TRANSFORM0,
    cipherTransform: IPSEC_CIPHER_TRANSFORM0,
};

pub const IPSEC_SA_TRANSFORM0 = extern struct {
    ipsecTransformType: IPSEC_TRANSFORM_TYPE,
    Anonymous: IPSEC_SA_TRANSFORM0._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IPSEC_PFS_GROUP = extern enum(i32) {
    IPSEC_PFS_NONE = 0,
    IPSEC_PFS_1 = 1,
    IPSEC_PFS_2 = 2,
    IPSEC_PFS_2048 = 3,
    IPSEC_PFS_14 = 3,
    IPSEC_PFS_ECP_256 = 4,
    IPSEC_PFS_ECP_384 = 5,
    IPSEC_PFS_MM = 6,
    IPSEC_PFS_24 = 7,
    IPSEC_PFS_MAX = 8,
};
pub const IPSEC_PFS_NONE = IPSEC_PFS_GROUP.IPSEC_PFS_NONE;
pub const IPSEC_PFS_1 = IPSEC_PFS_GROUP.IPSEC_PFS_1;
pub const IPSEC_PFS_2 = IPSEC_PFS_GROUP.IPSEC_PFS_2;
pub const IPSEC_PFS_2048 = IPSEC_PFS_GROUP.IPSEC_PFS_2048;
pub const IPSEC_PFS_14 = IPSEC_PFS_GROUP.IPSEC_PFS_14;
pub const IPSEC_PFS_ECP_256 = IPSEC_PFS_GROUP.IPSEC_PFS_ECP_256;
pub const IPSEC_PFS_ECP_384 = IPSEC_PFS_GROUP.IPSEC_PFS_ECP_384;
pub const IPSEC_PFS_MM = IPSEC_PFS_GROUP.IPSEC_PFS_MM;
pub const IPSEC_PFS_24 = IPSEC_PFS_GROUP.IPSEC_PFS_24;
pub const IPSEC_PFS_MAX = IPSEC_PFS_GROUP.IPSEC_PFS_MAX;

pub const IPSEC_PROPOSAL0 = extern struct {
    lifetime: IPSEC_SA_LIFETIME0,
    numSaTransforms: u32,
    saTransforms: *IPSEC_SA_TRANSFORM0,
    pfsGroup: IPSEC_PFS_GROUP,
};

pub const IPSEC_SA_IDLE_TIMEOUT0 = extern struct {
    idleTimeoutSeconds: u32,
    idleTimeoutSecondsFailOver: u32,
};

pub const IPSEC_TRAFFIC_SELECTOR0_ = extern struct {
    protocolId: u8,
    portStart: u16,
    portEnd: u16,
    ipVersion: FWP_IP_VERSION,
    Anonymous1: IPSEC_TRAFFIC_SELECTOR0_._Anonymous1_e__Union,
    Anonymous2: IPSEC_TRAFFIC_SELECTOR0_._Anonymous2_e__Union,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const IPSEC_TRAFFIC_SELECTOR_POLICY0_ = extern struct {
    flags: u32,
    numLocalTrafficSelectors: u32,
    localTrafficSelectors: *IPSEC_TRAFFIC_SELECTOR0_,
    numRemoteTrafficSelectors: u32,
    remoteTrafficSelectors: *IPSEC_TRAFFIC_SELECTOR0_,
};

pub const IPSEC_TRANSPORT_POLICY0 = extern struct {
    numIpsecProposals: u32,
    ipsecProposals: *IPSEC_PROPOSAL0,
    flags: u32,
    ndAllowClearTimeoutSeconds: u32,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: *IKEEXT_EM_POLICY0,
};

pub const IPSEC_TRANSPORT_POLICY1 = extern struct {
    numIpsecProposals: u32,
    ipsecProposals: *IPSEC_PROPOSAL0,
    flags: u32,
    ndAllowClearTimeoutSeconds: u32,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: *IKEEXT_EM_POLICY1,
};

pub const IPSEC_TRANSPORT_POLICY2 = extern struct {
    numIpsecProposals: u32,
    ipsecProposals: *IPSEC_PROPOSAL0,
    flags: u32,
    ndAllowClearTimeoutSeconds: u32,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: *IKEEXT_EM_POLICY2,
};

pub const IPSEC_TUNNEL_ENDPOINTS0 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: IPSEC_TUNNEL_ENDPOINTS0._Anonymous1_e__Union,
    Anonymous2: IPSEC_TUNNEL_ENDPOINTS0._Anonymous2_e__Union,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const IPSEC_TUNNEL_ENDPOINT0 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous: IPSEC_TUNNEL_ENDPOINT0._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IPSEC_TUNNEL_ENDPOINTS2 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: IPSEC_TUNNEL_ENDPOINTS2._Anonymous1_e__Union,
    Anonymous2: IPSEC_TUNNEL_ENDPOINTS2._Anonymous2_e__Union,
    localIfLuid: u64,
    remoteFqdn: PWSTR,
    numAddresses: u32,
    remoteAddresses: *IPSEC_TUNNEL_ENDPOINT0,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const IPSEC_TUNNEL_ENDPOINTS1 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: IPSEC_TUNNEL_ENDPOINTS1._Anonymous1_e__Union,
    Anonymous2: IPSEC_TUNNEL_ENDPOINTS1._Anonymous2_e__Union,
    localIfLuid: u64,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const IPSEC_TUNNEL_POLICY0 = extern struct {
    flags: u32,
    numIpsecProposals: u32,
    ipsecProposals: *IPSEC_PROPOSAL0,
    tunnelEndpoints: IPSEC_TUNNEL_ENDPOINTS0,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: *IKEEXT_EM_POLICY0,
};

pub const IPSEC_TUNNEL_POLICY1 = extern struct {
    flags: u32,
    numIpsecProposals: u32,
    ipsecProposals: *IPSEC_PROPOSAL0,
    tunnelEndpoints: IPSEC_TUNNEL_ENDPOINTS1,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: *IKEEXT_EM_POLICY1,
};

pub const IPSEC_TUNNEL_POLICY2 = extern struct {
    flags: u32,
    numIpsecProposals: u32,
    ipsecProposals: *IPSEC_PROPOSAL0,
    tunnelEndpoints: IPSEC_TUNNEL_ENDPOINTS2,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: *IKEEXT_EM_POLICY2,
    fwdPathSaLifetime: u32,
};

pub const IPSEC_TUNNEL_POLICY3_ = extern struct {
    flags: u32,
    numIpsecProposals: u32,
    ipsecProposals: *IPSEC_PROPOSAL0,
    tunnelEndpoints: IPSEC_TUNNEL_ENDPOINTS2,
    saIdleTimeout: IPSEC_SA_IDLE_TIMEOUT0,
    emPolicy: *IKEEXT_EM_POLICY2,
    fwdPathSaLifetime: u32,
    compartmentId: u32,
    numTrafficSelectorPolicy: u32,
    trafficSelectorPolicies: *IPSEC_TRAFFIC_SELECTOR_POLICY0_,
};

pub const IPSEC_KEYING_POLICY0 = extern struct {
    numKeyMods: u32,
    keyModKeys: *Guid,
};

pub const IPSEC_KEYING_POLICY1 = extern struct {
    numKeyMods: u32,
    keyModKeys: *Guid,
    flags: u32,
};

pub const IPSEC_AGGREGATE_SA_STATISTICS0 = extern struct {
    activeSas: u32,
    pendingSaNegotiations: u32,
    totalSasAdded: u32,
    totalSasDeleted: u32,
    successfulRekeys: u32,
    activeTunnels: u32,
    offloadedSas: u32,
};

pub const IPSEC_ESP_DROP_PACKET_STATISTICS0 = extern struct {
    invalidSpisOnInbound: u32,
    decryptionFailuresOnInbound: u32,
    authenticationFailuresOnInbound: u32,
    replayCheckFailuresOnInbound: u32,
    saNotInitializedOnInbound: u32,
};

pub const IPSEC_AH_DROP_PACKET_STATISTICS0 = extern struct {
    invalidSpisOnInbound: u32,
    authenticationFailuresOnInbound: u32,
    replayCheckFailuresOnInbound: u32,
    saNotInitializedOnInbound: u32,
};

pub const IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0 = extern struct {
    invalidSpisOnInbound: u32,
    decryptionFailuresOnInbound: u32,
    authenticationFailuresOnInbound: u32,
    udpEspValidationFailuresOnInbound: u32,
    replayCheckFailuresOnInbound: u32,
    invalidClearTextInbound: u32,
    saNotInitializedOnInbound: u32,
    receiveOverIncorrectSaInbound: u32,
    secureReceivesNotMatchingFilters: u32,
};

pub const IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1 = extern struct {
    invalidSpisOnInbound: u32,
    decryptionFailuresOnInbound: u32,
    authenticationFailuresOnInbound: u32,
    udpEspValidationFailuresOnInbound: u32,
    replayCheckFailuresOnInbound: u32,
    invalidClearTextInbound: u32,
    saNotInitializedOnInbound: u32,
    receiveOverIncorrectSaInbound: u32,
    secureReceivesNotMatchingFilters: u32,
    totalDropPacketsInbound: u32,
};

pub const IPSEC_TRAFFIC_STATISTICS0 = extern struct {
    encryptedByteCount: u64,
    authenticatedAHByteCount: u64,
    authenticatedESPByteCount: u64,
    transportByteCount: u64,
    tunnelByteCount: u64,
    offloadByteCount: u64,
};

pub const IPSEC_TRAFFIC_STATISTICS1 = extern struct {
    encryptedByteCount: u64,
    authenticatedAHByteCount: u64,
    authenticatedESPByteCount: u64,
    transportByteCount: u64,
    tunnelByteCount: u64,
    offloadByteCount: u64,
    totalSuccessfulPackets: u64,
};

pub const IPSEC_STATISTICS0 = extern struct {
    aggregateSaStatistics: IPSEC_AGGREGATE_SA_STATISTICS0,
    espDropPacketStatistics: IPSEC_ESP_DROP_PACKET_STATISTICS0,
    ahDropPacketStatistics: IPSEC_AH_DROP_PACKET_STATISTICS0,
    aggregateDropPacketStatistics: IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0,
    inboundTrafficStatistics: IPSEC_TRAFFIC_STATISTICS0,
    outboundTrafficStatistics: IPSEC_TRAFFIC_STATISTICS0,
};

pub const IPSEC_STATISTICS1 = extern struct {
    aggregateSaStatistics: IPSEC_AGGREGATE_SA_STATISTICS0,
    espDropPacketStatistics: IPSEC_ESP_DROP_PACKET_STATISTICS0,
    ahDropPacketStatistics: IPSEC_AH_DROP_PACKET_STATISTICS0,
    aggregateDropPacketStatistics: IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1,
    inboundTrafficStatistics: IPSEC_TRAFFIC_STATISTICS1,
    outboundTrafficStatistics: IPSEC_TRAFFIC_STATISTICS1,
};

pub const IPSEC_SA_AUTH_INFORMATION0 = extern struct {
    authTransform: IPSEC_AUTH_TRANSFORM0,
    authKey: FWP_BYTE_BLOB,
};

pub const IPSEC_SA_CIPHER_INFORMATION0 = extern struct {
    cipherTransform: IPSEC_CIPHER_TRANSFORM0,
    cipherKey: FWP_BYTE_BLOB,
};

pub const IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0 = extern struct {
    saCipherInformation: IPSEC_SA_CIPHER_INFORMATION0,
    saAuthInformation: IPSEC_SA_AUTH_INFORMATION0,
};

pub const IPSEC_SA0 = extern struct {
    spi: u32,
    saTransformType: IPSEC_TRANSFORM_TYPE,
    Anonymous: IPSEC_SA0._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IPSEC_KEYMODULE_STATE0 = extern struct {
    keyModuleKey: Guid,
    stateBlob: FWP_BYTE_BLOB,
};

pub const IPSEC_TOKEN_TYPE = extern enum(i32) {
    MACHINE = 0,
    IMPERSONATION = 1,
    MAX = 2,
};
pub const IPSEC_TOKEN_TYPE_MACHINE = IPSEC_TOKEN_TYPE.MACHINE;
pub const IPSEC_TOKEN_TYPE_IMPERSONATION = IPSEC_TOKEN_TYPE.IMPERSONATION;
pub const IPSEC_TOKEN_TYPE_MAX = IPSEC_TOKEN_TYPE.MAX;

pub const IPSEC_TOKEN_PRINCIPAL = extern enum(i32) {
    LOCAL = 0,
    PEER = 1,
    MAX = 2,
};
pub const IPSEC_TOKEN_PRINCIPAL_LOCAL = IPSEC_TOKEN_PRINCIPAL.LOCAL;
pub const IPSEC_TOKEN_PRINCIPAL_PEER = IPSEC_TOKEN_PRINCIPAL.PEER;
pub const IPSEC_TOKEN_PRINCIPAL_MAX = IPSEC_TOKEN_PRINCIPAL.MAX;

pub const IPSEC_TOKEN_MODE = extern enum(i32) {
    MAIN = 0,
    EXTENDED = 1,
    MAX = 2,
};
pub const IPSEC_TOKEN_MODE_MAIN = IPSEC_TOKEN_MODE.MAIN;
pub const IPSEC_TOKEN_MODE_EXTENDED = IPSEC_TOKEN_MODE.EXTENDED;
pub const IPSEC_TOKEN_MODE_MAX = IPSEC_TOKEN_MODE.MAX;

pub const IPSEC_TOKEN0 = extern struct {
    type: IPSEC_TOKEN_TYPE,
    principal: IPSEC_TOKEN_PRINCIPAL,
    mode: IPSEC_TOKEN_MODE,
    token: u64,
};

pub const IPSEC_ID0 = extern struct {
    mmTargetName: PWSTR,
    emTargetName: PWSTR,
    numTokens: u32,
    tokens: *IPSEC_TOKEN0,
    explicitCredentials: u64,
    logonId: u64,
};

pub const IPSEC_SA_BUNDLE0 = extern struct {
    flags: u32,
    lifetime: IPSEC_SA_LIFETIME0,
    idleTimeoutSeconds: u32,
    ndAllowClearTimeoutSeconds: u32,
    ipsecId: *IPSEC_ID0,
    napContext: u32,
    qmSaId: u32,
    numSAs: u32,
    saList: *IPSEC_SA0,
    keyModuleState: *IPSEC_KEYMODULE_STATE0,
    ipVersion: FWP_IP_VERSION,
    Anonymous: IPSEC_SA_BUNDLE0._Anonymous_e__Union,
    mmSaId: u64,
    pfsGroup: IPSEC_PFS_GROUP,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IPSEC_SA_BUNDLE1 = extern struct {
    flags: u32,
    lifetime: IPSEC_SA_LIFETIME0,
    idleTimeoutSeconds: u32,
    ndAllowClearTimeoutSeconds: u32,
    ipsecId: *IPSEC_ID0,
    napContext: u32,
    qmSaId: u32,
    numSAs: u32,
    saList: *IPSEC_SA0,
    keyModuleState: *IPSEC_KEYMODULE_STATE0,
    ipVersion: FWP_IP_VERSION,
    Anonymous: IPSEC_SA_BUNDLE1._Anonymous_e__Union,
    mmSaId: u64,
    pfsGroup: IPSEC_PFS_GROUP,
    saLookupContext: Guid,
    qmFilterId: u64,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IPSEC_TRAFFIC_TYPE = extern enum(i32) {
    TRANSPORT = 0,
    TUNNEL = 1,
    MAX = 2,
};
pub const IPSEC_TRAFFIC_TYPE_TRANSPORT = IPSEC_TRAFFIC_TYPE.TRANSPORT;
pub const IPSEC_TRAFFIC_TYPE_TUNNEL = IPSEC_TRAFFIC_TYPE.TUNNEL;
pub const IPSEC_TRAFFIC_TYPE_MAX = IPSEC_TRAFFIC_TYPE.MAX;

pub const IPSEC_TRAFFIC0 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: IPSEC_TRAFFIC0._Anonymous1_e__Union,
    Anonymous2: IPSEC_TRAFFIC0._Anonymous2_e__Union,
    trafficType: IPSEC_TRAFFIC_TYPE,
    Anonymous3: IPSEC_TRAFFIC0._Anonymous3_e__Union,
    remotePort: u16,
    const _Anonymous3_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const IPSEC_TRAFFIC1 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: IPSEC_TRAFFIC1._Anonymous1_e__Union,
    Anonymous2: IPSEC_TRAFFIC1._Anonymous2_e__Union,
    trafficType: IPSEC_TRAFFIC_TYPE,
    Anonymous3: IPSEC_TRAFFIC1._Anonymous3_e__Union,
    remotePort: u16,
    localPort: u16,
    ipProtocol: u8,
    localIfLuid: u64,
    realIfProfileId: u32,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous3_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const IPSEC_V4_UDP_ENCAPSULATION0 = extern struct {
    localUdpEncapPort: u16,
    remoteUdpEncapPort: u16,
};

pub const IPSEC_GETSPI0 = extern struct {
    inboundIpsecTraffic: IPSEC_TRAFFIC0,
    ipVersion: FWP_IP_VERSION,
    Anonymous: IPSEC_GETSPI0._Anonymous_e__Union,
    rngCryptoModuleID: *Guid,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IPSEC_GETSPI1 = extern struct {
    inboundIpsecTraffic: IPSEC_TRAFFIC1,
    ipVersion: FWP_IP_VERSION,
    Anonymous: IPSEC_GETSPI1._Anonymous_e__Union,
    rngCryptoModuleID: *Guid,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IPSEC_SA_DETAILS0 = extern struct {
    ipVersion: FWP_IP_VERSION,
    saDirection: FWP_DIRECTION,
    traffic: IPSEC_TRAFFIC0,
    saBundle: IPSEC_SA_BUNDLE0,
    Anonymous: IPSEC_SA_DETAILS0._Anonymous_e__Union,
    transportFilter: *FWPM_FILTER0,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IPSEC_SA_DETAILS1 = extern struct {
    ipVersion: FWP_IP_VERSION,
    saDirection: FWP_DIRECTION,
    traffic: IPSEC_TRAFFIC1,
    saBundle: IPSEC_SA_BUNDLE1,
    Anonymous: IPSEC_SA_DETAILS1._Anonymous_e__Union,
    transportFilter: *FWPM_FILTER0,
    virtualIfTunnelInfo: IPSEC_VIRTUAL_IF_TUNNEL_INFO0,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IPSEC_SA_CONTEXT0 = extern struct {
    saContextId: u64,
    inboundSa: *IPSEC_SA_DETAILS0,
    outboundSa: *IPSEC_SA_DETAILS0,
};

pub const IPSEC_SA_CONTEXT1 = extern struct {
    saContextId: u64,
    inboundSa: *IPSEC_SA_DETAILS1,
    outboundSa: *IPSEC_SA_DETAILS1,
};

pub const IPSEC_SA_CONTEXT_ENUM_TEMPLATE0 = extern struct {
    localSubNet: FWP_CONDITION_VALUE0,
    remoteSubNet: FWP_CONDITION_VALUE0,
};

pub const IPSEC_SA_ENUM_TEMPLATE0 = extern struct {
    saDirection: FWP_DIRECTION,
};

pub const IPSEC_SA_CONTEXT_SUBSCRIPTION0 = extern struct {
    enumTemplate: *IPSEC_SA_CONTEXT_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};

pub const IPSEC_SA_CONTEXT_EVENT_TYPE0 = extern enum(i32) {
    IPSEC_SA_CONTEXT_EVENT_ADD = 1,
    IPSEC_SA_CONTEXT_EVENT_DELETE = 2,
    IPSEC_SA_CONTEXT_EVENT_MAX = 3,
};
pub const IPSEC_SA_CONTEXT_EVENT_ADD = IPSEC_SA_CONTEXT_EVENT_TYPE0.IPSEC_SA_CONTEXT_EVENT_ADD;
pub const IPSEC_SA_CONTEXT_EVENT_DELETE = IPSEC_SA_CONTEXT_EVENT_TYPE0.IPSEC_SA_CONTEXT_EVENT_DELETE;
pub const IPSEC_SA_CONTEXT_EVENT_MAX = IPSEC_SA_CONTEXT_EVENT_TYPE0.IPSEC_SA_CONTEXT_EVENT_MAX;

pub const IPSEC_SA_CONTEXT_CHANGE0 = extern struct {
    changeType: IPSEC_SA_CONTEXT_EVENT_TYPE0,
    saContextId: u64,
};

pub const IPSEC_FAILURE_POINT = extern enum(i32) {
    IPSEC_FAILURE_NONE = 0,
    IPSEC_FAILURE_ME = 1,
    IPSEC_FAILURE_PEER = 2,
    MAX = 3,
};
pub const IPSEC_FAILURE_NONE = IPSEC_FAILURE_POINT.IPSEC_FAILURE_NONE;
pub const IPSEC_FAILURE_ME = IPSEC_FAILURE_POINT.IPSEC_FAILURE_ME;
pub const IPSEC_FAILURE_PEER = IPSEC_FAILURE_POINT.IPSEC_FAILURE_PEER;
pub const IPSEC_FAILURE_POINT_MAX = IPSEC_FAILURE_POINT.MAX;

pub const IPSEC_ADDRESS_INFO0 = extern struct {
    numV4Addresses: u32,
    v4Addresses: *u32,
    numV6Addresses: u32,
    v6Addresses: *FWP_BYTE_ARRAY16,
};

pub const IPSEC_DOSP_OPTIONS0 = extern struct {
    stateIdleTimeoutSeconds: u32,
    perIPRateLimitQueueIdleTimeoutSeconds: u32,
    ipV6IPsecUnauthDscp: u8,
    ipV6IPsecUnauthRateLimitBytesPerSec: u32,
    ipV6IPsecUnauthPerIPRateLimitBytesPerSec: u32,
    ipV6IPsecAuthDscp: u8,
    ipV6IPsecAuthRateLimitBytesPerSec: u32,
    icmpV6Dscp: u8,
    icmpV6RateLimitBytesPerSec: u32,
    ipV6FilterExemptDscp: u8,
    ipV6FilterExemptRateLimitBytesPerSec: u32,
    defBlockExemptDscp: u8,
    defBlockExemptRateLimitBytesPerSec: u32,
    maxStateEntries: u32,
    maxPerIPRateLimitQueues: u32,
    flags: u32,
    numPublicIFLuids: u32,
    publicIFLuids: *u64,
    numInternalIFLuids: u32,
    internalIFLuids: *u64,
    publicV6AddrMask: FWP_V6_ADDR_AND_MASK,
    internalV6AddrMask: FWP_V6_ADDR_AND_MASK,
};

pub const IPSEC_DOSP_STATISTICS0 = extern struct {
    totalStateEntriesCreated: u64,
    currentStateEntries: u64,
    totalInboundAllowedIPv6IPsecUnauthPkts: u64,
    totalInboundRatelimitDiscardedIPv6IPsecUnauthPkts: u64,
    totalInboundPerIPRatelimitDiscardedIPv6IPsecUnauthPkts: u64,
    totalInboundOtherDiscardedIPv6IPsecUnauthPkts: u64,
    totalInboundAllowedIPv6IPsecAuthPkts: u64,
    totalInboundRatelimitDiscardedIPv6IPsecAuthPkts: u64,
    totalInboundOtherDiscardedIPv6IPsecAuthPkts: u64,
    totalInboundAllowedICMPv6Pkts: u64,
    totalInboundRatelimitDiscardedICMPv6Pkts: u64,
    totalInboundAllowedIPv6FilterExemptPkts: u64,
    totalInboundRatelimitDiscardedIPv6FilterExemptPkts: u64,
    totalInboundDiscardedIPv6FilterBlockPkts: u64,
    totalInboundAllowedDefBlockExemptPkts: u64,
    totalInboundRatelimitDiscardedDefBlockExemptPkts: u64,
    totalInboundDiscardedDefBlockPkts: u64,
    currentInboundIPv6IPsecUnauthPerIPRateLimitQueues: u64,
};

pub const IPSEC_DOSP_STATE0 = extern struct {
    publicHostV6Addr: [16]u8,
    internalHostV6Addr: [16]u8,
    totalInboundIPv6IPsecAuthPackets: u64,
    totalOutboundIPv6IPsecAuthPackets: u64,
    durationSecs: u32,
};

pub const IPSEC_DOSP_STATE_ENUM_TEMPLATE0 = extern struct {
    publicV6AddrMask: FWP_V6_ADDR_AND_MASK,
    internalV6AddrMask: FWP_V6_ADDR_AND_MASK,
};

pub const IPSEC_KEY_MANAGER0 = extern struct {
    keyManagerKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    keyDictationTimeoutHint: u8,
};

pub const DL_ADDRESS_TYPE = extern enum(i32) {
    DlUnicast = 0,
    DlMulticast = 1,
    DlBroadcast = 2,
};
pub const DlUnicast = DL_ADDRESS_TYPE.DlUnicast;
pub const DlMulticast = DL_ADDRESS_TYPE.DlMulticast;
pub const DlBroadcast = DL_ADDRESS_TYPE.DlBroadcast;

pub const FWPM_CHANGE_TYPE = extern enum(i32) {
    FWPM_CHANGE_ADD = 1,
    FWPM_CHANGE_DELETE = 2,
    MAX = 3,
};
pub const FWPM_CHANGE_ADD = FWPM_CHANGE_TYPE.FWPM_CHANGE_ADD;
pub const FWPM_CHANGE_DELETE = FWPM_CHANGE_TYPE.FWPM_CHANGE_DELETE;
pub const FWPM_CHANGE_TYPE_MAX = FWPM_CHANGE_TYPE.MAX;

pub const FWPM_SERVICE_STATE = extern enum(i32) {
    FWPM_SERVICE_STOPPED = 0,
    FWPM_SERVICE_START_PENDING = 1,
    FWPM_SERVICE_STOP_PENDING = 2,
    FWPM_SERVICE_RUNNING = 3,
    MAX = 4,
};
pub const FWPM_SERVICE_STOPPED = FWPM_SERVICE_STATE.FWPM_SERVICE_STOPPED;
pub const FWPM_SERVICE_START_PENDING = FWPM_SERVICE_STATE.FWPM_SERVICE_START_PENDING;
pub const FWPM_SERVICE_STOP_PENDING = FWPM_SERVICE_STATE.FWPM_SERVICE_STOP_PENDING;
pub const FWPM_SERVICE_RUNNING = FWPM_SERVICE_STATE.FWPM_SERVICE_RUNNING;
pub const FWPM_SERVICE_STATE_MAX = FWPM_SERVICE_STATE.MAX;

pub const FWPM_ENGINE_OPTION = extern enum(i32) {
    FWPM_ENGINE_COLLECT_NET_EVENTS = 0,
    FWPM_ENGINE_NET_EVENT_MATCH_ANY_KEYWORDS = 1,
    FWPM_ENGINE_NAME_CACHE = 2,
    FWPM_ENGINE_MONITOR_IPSEC_CONNECTIONS = 3,
    FWPM_ENGINE_PACKET_QUEUING = 4,
    FWPM_ENGINE_TXN_WATCHDOG_TIMEOUT_IN_MSEC = 5,
    MAX = 6,
};
pub const FWPM_ENGINE_COLLECT_NET_EVENTS = FWPM_ENGINE_OPTION.FWPM_ENGINE_COLLECT_NET_EVENTS;
pub const FWPM_ENGINE_NET_EVENT_MATCH_ANY_KEYWORDS = FWPM_ENGINE_OPTION.FWPM_ENGINE_NET_EVENT_MATCH_ANY_KEYWORDS;
pub const FWPM_ENGINE_NAME_CACHE = FWPM_ENGINE_OPTION.FWPM_ENGINE_NAME_CACHE;
pub const FWPM_ENGINE_MONITOR_IPSEC_CONNECTIONS = FWPM_ENGINE_OPTION.FWPM_ENGINE_MONITOR_IPSEC_CONNECTIONS;
pub const FWPM_ENGINE_PACKET_QUEUING = FWPM_ENGINE_OPTION.FWPM_ENGINE_PACKET_QUEUING;
pub const FWPM_ENGINE_TXN_WATCHDOG_TIMEOUT_IN_MSEC = FWPM_ENGINE_OPTION.FWPM_ENGINE_TXN_WATCHDOG_TIMEOUT_IN_MSEC;
pub const FWPM_ENGINE_OPTION_MAX = FWPM_ENGINE_OPTION.MAX;

pub const FWPM_SESSION0 = extern struct {
    sessionKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    txnWaitTimeoutInMSec: u32,
    processId: u32,
    sid: *SID,
    username: PWSTR,
    kernelMode: BOOL,
};

pub const FWPM_SESSION_ENUM_TEMPLATE0 = extern struct {
    reserved: u64,
};

pub const FWPM_PROVIDER0 = extern struct {
    providerKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerData: FWP_BYTE_BLOB,
    serviceName: PWSTR,
};

pub const FWPM_PROVIDER_ENUM_TEMPLATE0 = extern struct {
    reserved: u64,
};

pub const FWPM_PROVIDER_CHANGE0 = extern struct {
    changeType: FWPM_CHANGE_TYPE,
    providerKey: Guid,
};

pub const FWPM_PROVIDER_SUBSCRIPTION0 = extern struct {
    enumTemplate: *FWPM_PROVIDER_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};

pub const FWPM_CLASSIFY_OPTION0 = extern struct {
    type: FWP_CLASSIFY_OPTION_TYPE,
    value: FWP_VALUE0,
};

pub const FWPM_CLASSIFY_OPTIONS0 = extern struct {
    numOptions: u32,
    options: *FWPM_CLASSIFY_OPTION0,
};

pub const FWPM_PROVIDER_CONTEXT_TYPE = extern enum(i32) {
    FWPM_IPSEC_KEYING_CONTEXT = 0,
    FWPM_IPSEC_IKE_QM_TRANSPORT_CONTEXT = 1,
    FWPM_IPSEC_IKE_QM_TUNNEL_CONTEXT = 2,
    FWPM_IPSEC_AUTHIP_QM_TRANSPORT_CONTEXT = 3,
    FWPM_IPSEC_AUTHIP_QM_TUNNEL_CONTEXT = 4,
    FWPM_IPSEC_IKE_MM_CONTEXT = 5,
    FWPM_IPSEC_AUTHIP_MM_CONTEXT = 6,
    FWPM_CLASSIFY_OPTIONS_CONTEXT = 7,
    FWPM_GENERAL_CONTEXT = 8,
    FWPM_IPSEC_IKEV2_QM_TUNNEL_CONTEXT = 9,
    FWPM_IPSEC_IKEV2_MM_CONTEXT = 10,
    FWPM_IPSEC_DOSP_CONTEXT = 11,
    FWPM_IPSEC_IKEV2_QM_TRANSPORT_CONTEXT = 12,
    MAX = 13,
};
pub const FWPM_IPSEC_KEYING_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.FWPM_IPSEC_KEYING_CONTEXT;
pub const FWPM_IPSEC_IKE_QM_TRANSPORT_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.FWPM_IPSEC_IKE_QM_TRANSPORT_CONTEXT;
pub const FWPM_IPSEC_IKE_QM_TUNNEL_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.FWPM_IPSEC_IKE_QM_TUNNEL_CONTEXT;
pub const FWPM_IPSEC_AUTHIP_QM_TRANSPORT_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.FWPM_IPSEC_AUTHIP_QM_TRANSPORT_CONTEXT;
pub const FWPM_IPSEC_AUTHIP_QM_TUNNEL_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.FWPM_IPSEC_AUTHIP_QM_TUNNEL_CONTEXT;
pub const FWPM_IPSEC_IKE_MM_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.FWPM_IPSEC_IKE_MM_CONTEXT;
pub const FWPM_IPSEC_AUTHIP_MM_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.FWPM_IPSEC_AUTHIP_MM_CONTEXT;
pub const FWPM_CLASSIFY_OPTIONS_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.FWPM_CLASSIFY_OPTIONS_CONTEXT;
pub const FWPM_GENERAL_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.FWPM_GENERAL_CONTEXT;
pub const FWPM_IPSEC_IKEV2_QM_TUNNEL_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.FWPM_IPSEC_IKEV2_QM_TUNNEL_CONTEXT;
pub const FWPM_IPSEC_IKEV2_MM_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.FWPM_IPSEC_IKEV2_MM_CONTEXT;
pub const FWPM_IPSEC_DOSP_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.FWPM_IPSEC_DOSP_CONTEXT;
pub const FWPM_IPSEC_IKEV2_QM_TRANSPORT_CONTEXT = FWPM_PROVIDER_CONTEXT_TYPE.FWPM_IPSEC_IKEV2_QM_TRANSPORT_CONTEXT;
pub const FWPM_PROVIDER_CONTEXT_TYPE_MAX = FWPM_PROVIDER_CONTEXT_TYPE.MAX;

pub const FWPM_PROVIDER_CONTEXT0 = extern struct {
    providerContextKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: *Guid,
    providerData: FWP_BYTE_BLOB,
    type: FWPM_PROVIDER_CONTEXT_TYPE,
    Anonymous: FWPM_PROVIDER_CONTEXT0._Anonymous_e__Union,
    providerContextId: u64,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_PROVIDER_CONTEXT1 = extern struct {
    providerContextKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: *Guid,
    providerData: FWP_BYTE_BLOB,
    type: FWPM_PROVIDER_CONTEXT_TYPE,
    Anonymous: FWPM_PROVIDER_CONTEXT1._Anonymous_e__Union,
    providerContextId: u64,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_PROVIDER_CONTEXT2 = extern struct {
    providerContextKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: *Guid,
    providerData: FWP_BYTE_BLOB,
    type: FWPM_PROVIDER_CONTEXT_TYPE,
    Anonymous: FWPM_PROVIDER_CONTEXT2._Anonymous_e__Union,
    providerContextId: u64,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_PROVIDER_CONTEXT3_ = extern struct {
    providerContextKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: *Guid,
    providerData: FWP_BYTE_BLOB,
    type: FWPM_PROVIDER_CONTEXT_TYPE,
    Anonymous: FWPM_PROVIDER_CONTEXT3_._Anonymous_e__Union,
    providerContextId: u64,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0 = extern struct {
    providerKey: *Guid,
    providerContextType: FWPM_PROVIDER_CONTEXT_TYPE,
};

pub const FWPM_PROVIDER_CONTEXT_CHANGE0 = extern struct {
    changeType: FWPM_CHANGE_TYPE,
    providerContextKey: Guid,
    providerContextId: u64,
};

pub const FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0 = extern struct {
    enumTemplate: *FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};

pub const FWPM_SUBLAYER0 = extern struct {
    subLayerKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: *Guid,
    providerData: FWP_BYTE_BLOB,
    weight: u16,
};

pub const FWPM_SUBLAYER_ENUM_TEMPLATE0 = extern struct {
    providerKey: *Guid,
};

pub const FWPM_SUBLAYER_CHANGE0 = extern struct {
    changeType: FWPM_CHANGE_TYPE,
    subLayerKey: Guid,
};

pub const FWPM_SUBLAYER_SUBSCRIPTION0 = extern struct {
    enumTemplate: *FWPM_SUBLAYER_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};

pub const FWPM_FIELD_TYPE = extern enum(i32) {
    FWPM_FIELD_RAW_DATA = 0,
    FWPM_FIELD_IP_ADDRESS = 1,
    FWPM_FIELD_FLAGS = 2,
    MAX = 3,
};
pub const FWPM_FIELD_RAW_DATA = FWPM_FIELD_TYPE.FWPM_FIELD_RAW_DATA;
pub const FWPM_FIELD_IP_ADDRESS = FWPM_FIELD_TYPE.FWPM_FIELD_IP_ADDRESS;
pub const FWPM_FIELD_FLAGS = FWPM_FIELD_TYPE.FWPM_FIELD_FLAGS;
pub const FWPM_FIELD_TYPE_MAX = FWPM_FIELD_TYPE.MAX;

pub const FWPM_FIELD0 = extern struct {
    fieldKey: *Guid,
    type: FWPM_FIELD_TYPE,
    dataType: FWP_DATA_TYPE,
};

pub const FWPM_LAYER0 = extern struct {
    layerKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    numFields: u32,
    field: *FWPM_FIELD0,
    defaultSubLayerKey: Guid,
    layerId: u16,
};

pub const FWPM_LAYER_ENUM_TEMPLATE0 = extern struct {
    reserved: u64,
};

pub const FWPM_CALLOUT0 = extern struct {
    calloutKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: *Guid,
    providerData: FWP_BYTE_BLOB,
    applicableLayer: Guid,
    calloutId: u32,
};

pub const FWPM_CALLOUT_ENUM_TEMPLATE0 = extern struct {
    providerKey: *Guid,
    layerKey: Guid,
};

pub const FWPM_CALLOUT_CHANGE0 = extern struct {
    changeType: FWPM_CHANGE_TYPE,
    calloutKey: Guid,
    calloutId: u32,
};

pub const FWPM_CALLOUT_SUBSCRIPTION0 = extern struct {
    enumTemplate: *FWPM_CALLOUT_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};

pub const FWPM_ACTION0 = extern struct {
    type: u32,
    Anonymous: FWPM_ACTION0._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_FILTER_CONDITION0 = extern struct {
    fieldKey: Guid,
    matchType: FWP_MATCH_TYPE,
    conditionValue: FWP_CONDITION_VALUE0,
};

pub const FWPM_FILTER0 = extern struct {
    filterKey: Guid,
    displayData: FWPM_DISPLAY_DATA0,
    flags: u32,
    providerKey: *Guid,
    providerData: FWP_BYTE_BLOB,
    layerKey: Guid,
    subLayerKey: Guid,
    weight: FWP_VALUE0,
    numFilterConditions: u32,
    filterCondition: *FWPM_FILTER_CONDITION0,
    action: FWPM_ACTION0,
    Anonymous: FWPM_FILTER0._Anonymous_e__Union,
    reserved: *Guid,
    filterId: u64,
    effectiveWeight: FWP_VALUE0,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_FILTER_ENUM_TEMPLATE0 = extern struct {
    providerKey: *Guid,
    layerKey: Guid,
    enumType: FWP_FILTER_ENUM_TYPE,
    flags: u32,
    providerContextTemplate: *FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0,
    numFilterConditions: u32,
    filterCondition: *FWPM_FILTER_CONDITION0,
    actionMask: u32,
    calloutKey: *Guid,
};

pub const FWPM_FILTER_CHANGE0 = extern struct {
    changeType: FWPM_CHANGE_TYPE,
    filterKey: Guid,
    filterId: u64,
};

pub const FWPM_FILTER_SUBSCRIPTION0 = extern struct {
    enumTemplate: *FWPM_FILTER_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};

pub const FWPM_LAYER_STATISTICS0 = extern struct {
    layerId: Guid,
    classifyPermitCount: u32,
    classifyBlockCount: u32,
    classifyVetoCount: u32,
    numCacheEntries: u32,
};

pub const FWPM_STATISTICS0 = extern struct {
    numLayerStatistics: u32,
    layerStatistics: *FWPM_LAYER_STATISTICS0,
    inboundAllowedConnectionsV4: u32,
    inboundBlockedConnectionsV4: u32,
    outboundAllowedConnectionsV4: u32,
    outboundBlockedConnectionsV4: u32,
    inboundAllowedConnectionsV6: u32,
    inboundBlockedConnectionsV6: u32,
    outboundAllowedConnectionsV6: u32,
    outboundBlockedConnectionsV6: u32,
    inboundActiveConnectionsV4: u32,
    outboundActiveConnectionsV4: u32,
    inboundActiveConnectionsV6: u32,
    outboundActiveConnectionsV6: u32,
    reauthDirInbound: u64,
    reauthDirOutbound: u64,
    reauthFamilyV4: u64,
    reauthFamilyV6: u64,
    reauthProtoOther: u64,
    reauthProtoIPv4: u64,
    reauthProtoIPv6: u64,
    reauthProtoICMP: u64,
    reauthProtoICMP6: u64,
    reauthProtoUDP: u64,
    reauthProtoTCP: u64,
    reauthReasonPolicyChange: u64,
    reauthReasonNewArrivalInterface: u64,
    reauthReasonNewNextHopInterface: u64,
    reauthReasonProfileCrossing: u64,
    reauthReasonClassifyCompletion: u64,
    reauthReasonIPSecPropertiesChanged: u64,
    reauthReasonMidStreamInspection: u64,
    reauthReasonSocketPropertyChanged: u64,
    reauthReasonNewInboundMCastBCastPacket: u64,
    reauthReasonEDPPolicyChanged: u64,
    reauthReasonPreclassifyLocalAddrLayerChange: u64,
    reauthReasonPreclassifyRemoteAddrLayerChange: u64,
    reauthReasonPreclassifyLocalPortLayerChange: u64,
    reauthReasonPreclassifyRemotePortLayerChange: u64,
    reauthReasonProxyHandleChanged: u64,
};

pub const FWPM_NET_EVENT_HEADER0 = extern struct {
    timeStamp: FILETIME,
    flags: u32,
    ipVersion: FWP_IP_VERSION,
    ipProtocol: u8,
    Anonymous1: FWPM_NET_EVENT_HEADER0._Anonymous1_e__Union,
    Anonymous2: FWPM_NET_EVENT_HEADER0._Anonymous2_e__Union,
    localPort: u16,
    remotePort: u16,
    scopeId: u32,
    appId: FWP_BYTE_BLOB,
    userId: *SID,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_NET_EVENT_HEADER1 = extern struct {
    timeStamp: FILETIME,
    flags: u32,
    ipVersion: FWP_IP_VERSION,
    ipProtocol: u8,
    Anonymous1: FWPM_NET_EVENT_HEADER1._Anonymous1_e__Union,
    Anonymous2: FWPM_NET_EVENT_HEADER1._Anonymous2_e__Union,
    localPort: u16,
    remotePort: u16,
    scopeId: u32,
    appId: FWP_BYTE_BLOB,
    userId: *SID,
    Anonymous3: FWPM_NET_EVENT_HEADER1._Anonymous3_e__Union,
    const _Anonymous3_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_NET_EVENT_HEADER2 = extern struct {
    timeStamp: FILETIME,
    flags: u32,
    ipVersion: FWP_IP_VERSION,
    ipProtocol: u8,
    Anonymous1: FWPM_NET_EVENT_HEADER2._Anonymous1_e__Union,
    Anonymous2: FWPM_NET_EVENT_HEADER2._Anonymous2_e__Union,
    localPort: u16,
    remotePort: u16,
    scopeId: u32,
    appId: FWP_BYTE_BLOB,
    userId: *SID,
    addressFamily: FWP_AF,
    packageSid: *SID,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_NET_EVENT_HEADER3 = extern struct {
    timeStamp: FILETIME,
    flags: u32,
    ipVersion: FWP_IP_VERSION,
    ipProtocol: u8,
    Anonymous1: FWPM_NET_EVENT_HEADER3._Anonymous1_e__Union,
    Anonymous2: FWPM_NET_EVENT_HEADER3._Anonymous2_e__Union,
    localPort: u16,
    remotePort: u16,
    scopeId: u32,
    appId: FWP_BYTE_BLOB,
    userId: *SID,
    addressFamily: FWP_AF,
    packageSid: *SID,
    enterpriseId: PWSTR,
    policyFlags: u64,
    effectiveName: FWP_BYTE_BLOB,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_NET_EVENT_TYPE = extern enum(i32) {
    IKEEXT_MM_FAILURE = 0,
    IKEEXT_QM_FAILURE = 1,
    IKEEXT_EM_FAILURE = 2,
    CLASSIFY_DROP = 3,
    IPSEC_KERNEL_DROP = 4,
    IPSEC_DOSP_DROP = 5,
    CLASSIFY_ALLOW = 6,
    CAPABILITY_DROP = 7,
    CAPABILITY_ALLOW = 8,
    CLASSIFY_DROP_MAC = 9,
    LPM_PACKET_ARRIVAL = 10,
    MAX = 11,
};
pub const FWPM_NET_EVENT_TYPE_IKEEXT_MM_FAILURE = FWPM_NET_EVENT_TYPE.IKEEXT_MM_FAILURE;
pub const FWPM_NET_EVENT_TYPE_IKEEXT_QM_FAILURE = FWPM_NET_EVENT_TYPE.IKEEXT_QM_FAILURE;
pub const FWPM_NET_EVENT_TYPE_IKEEXT_EM_FAILURE = FWPM_NET_EVENT_TYPE.IKEEXT_EM_FAILURE;
pub const FWPM_NET_EVENT_TYPE_CLASSIFY_DROP = FWPM_NET_EVENT_TYPE.CLASSIFY_DROP;
pub const FWPM_NET_EVENT_TYPE_IPSEC_KERNEL_DROP = FWPM_NET_EVENT_TYPE.IPSEC_KERNEL_DROP;
pub const FWPM_NET_EVENT_TYPE_IPSEC_DOSP_DROP = FWPM_NET_EVENT_TYPE.IPSEC_DOSP_DROP;
pub const FWPM_NET_EVENT_TYPE_CLASSIFY_ALLOW = FWPM_NET_EVENT_TYPE.CLASSIFY_ALLOW;
pub const FWPM_NET_EVENT_TYPE_CAPABILITY_DROP = FWPM_NET_EVENT_TYPE.CAPABILITY_DROP;
pub const FWPM_NET_EVENT_TYPE_CAPABILITY_ALLOW = FWPM_NET_EVENT_TYPE.CAPABILITY_ALLOW;
pub const FWPM_NET_EVENT_TYPE_CLASSIFY_DROP_MAC = FWPM_NET_EVENT_TYPE.CLASSIFY_DROP_MAC;
pub const FWPM_NET_EVENT_TYPE_LPM_PACKET_ARRIVAL = FWPM_NET_EVENT_TYPE.LPM_PACKET_ARRIVAL;
pub const FWPM_NET_EVENT_TYPE_MAX = FWPM_NET_EVENT_TYPE.MAX;

pub const FWPM_NET_EVENT_IKEEXT_MM_FAILURE0 = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    flags: u32,
    keyingModuleType: IKEEXT_KEY_MODULE_TYPE,
    mmState: IKEEXT_MM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    mmAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    endCertHash: [20]u8,
    mmId: u64,
    mmFilterId: u64,
};

pub const FWPM_NET_EVENT_IKEEXT_MM_FAILURE1 = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    flags: u32,
    keyingModuleType: IKEEXT_KEY_MODULE_TYPE,
    mmState: IKEEXT_MM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    mmAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    endCertHash: [20]u8,
    mmId: u64,
    mmFilterId: u64,
    localPrincipalNameForAuth: PWSTR,
    remotePrincipalNameForAuth: PWSTR,
    numLocalPrincipalGroupSids: u32,
    localPrincipalGroupSids: *PWSTR,
    numRemotePrincipalGroupSids: u32,
    remotePrincipalGroupSids: *PWSTR,
};

pub const FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_ = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    flags: u32,
    keyingModuleType: IKEEXT_KEY_MODULE_TYPE,
    mmState: IKEEXT_MM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    mmAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    endCertHash: [20]u8,
    mmId: u64,
    mmFilterId: u64,
    localPrincipalNameForAuth: PWSTR,
    remotePrincipalNameForAuth: PWSTR,
    numLocalPrincipalGroupSids: u32,
    localPrincipalGroupSids: *PWSTR,
    numRemotePrincipalGroupSids: u32,
    remotePrincipalGroupSids: *PWSTR,
    providerContextKey: *Guid,
};

pub const FWPM_NET_EVENT_IKEEXT_QM_FAILURE0 = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    keyingModuleType: IKEEXT_KEY_MODULE_TYPE,
    qmState: IKEEXT_QM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    saTrafficType: IPSEC_TRAFFIC_TYPE,
    Anonymous1: FWPM_NET_EVENT_IKEEXT_QM_FAILURE0._Anonymous1_e__Union,
    Anonymous2: FWPM_NET_EVENT_IKEEXT_QM_FAILURE0._Anonymous2_e__Union,
    qmFilterId: u64,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_ = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    keyingModuleType: IKEEXT_KEY_MODULE_TYPE,
    qmState: IKEEXT_QM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    saTrafficType: IPSEC_TRAFFIC_TYPE,
    Anonymous1: FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_._Anonymous1_e__Union,
    Anonymous2: FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_._Anonymous2_e__Union,
    qmFilterId: u64,
    mmSaLuid: u64,
    mmProviderContextKey: Guid,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_NET_EVENT_IKEEXT_EM_FAILURE0 = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    flags: u32,
    emState: IKEEXT_EM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    emAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    endCertHash: [20]u8,
    mmId: u64,
    qmFilterId: u64,
};

pub const FWPM_NET_EVENT_IKEEXT_EM_FAILURE1 = extern struct {
    failureErrorCode: u32,
    failurePoint: IPSEC_FAILURE_POINT,
    flags: u32,
    emState: IKEEXT_EM_SA_STATE,
    saRole: IKEEXT_SA_ROLE,
    emAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE,
    endCertHash: [20]u8,
    mmId: u64,
    qmFilterId: u64,
    localPrincipalNameForAuth: PWSTR,
    remotePrincipalNameForAuth: PWSTR,
    numLocalPrincipalGroupSids: u32,
    localPrincipalGroupSids: *PWSTR,
    numRemotePrincipalGroupSids: u32,
    remotePrincipalGroupSids: *PWSTR,
    saTrafficType: IPSEC_TRAFFIC_TYPE,
};

pub const FWPM_NET_EVENT_CLASSIFY_DROP0 = extern struct {
    filterId: u64,
    layerId: u16,
};

pub const FWPM_NET_EVENT_CLASSIFY_DROP1 = extern struct {
    filterId: u64,
    layerId: u16,
    reauthReason: u32,
    originalProfile: u32,
    currentProfile: u32,
    msFwpDirection: u32,
    isLoopback: BOOL,
};

pub const FWPM_NET_EVENT_CLASSIFY_DROP2 = extern struct {
    filterId: u64,
    layerId: u16,
    reauthReason: u32,
    originalProfile: u32,
    currentProfile: u32,
    msFwpDirection: u32,
    isLoopback: BOOL,
    vSwitchId: FWP_BYTE_BLOB,
    vSwitchSourcePort: u32,
    vSwitchDestinationPort: u32,
};

pub const FWPM_NET_EVENT_CLASSIFY_DROP_MAC0 = extern struct {
    localMacAddr: FWP_BYTE_ARRAY6,
    remoteMacAddr: FWP_BYTE_ARRAY6,
    mediaType: u32,
    ifType: u32,
    etherType: u16,
    ndisPortNumber: u32,
    reserved: u32,
    vlanTag: u16,
    ifLuid: u64,
    filterId: u64,
    layerId: u16,
    reauthReason: u32,
    originalProfile: u32,
    currentProfile: u32,
    msFwpDirection: u32,
    isLoopback: BOOL,
    vSwitchId: FWP_BYTE_BLOB,
    vSwitchSourcePort: u32,
    vSwitchDestinationPort: u32,
};

pub const FWPM_NET_EVENT_CLASSIFY_ALLOW0 = extern struct {
    filterId: u64,
    layerId: u16,
    reauthReason: u32,
    originalProfile: u32,
    currentProfile: u32,
    msFwpDirection: u32,
    isLoopback: BOOL,
};

pub const FWPM_NET_EVENT_IPSEC_KERNEL_DROP0 = extern struct {
    failureStatus: i32,
    direction: FWP_DIRECTION,
    spi: u32,
    filterId: u64,
    layerId: u16,
};

pub const FWPM_NET_EVENT_IPSEC_DOSP_DROP0 = extern struct {
    ipVersion: FWP_IP_VERSION,
    Anonymous1: FWPM_NET_EVENT_IPSEC_DOSP_DROP0._Anonymous1_e__Union,
    Anonymous2: FWPM_NET_EVENT_IPSEC_DOSP_DROP0._Anonymous2_e__Union,
    failureStatus: i32,
    direction: FWP_DIRECTION,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_APPC_NETWORK_CAPABILITY_TYPE = extern enum(i32) {
    FWPM_APPC_NETWORK_CAPABILITY_INTERNET_CLIENT = 0,
    FWPM_APPC_NETWORK_CAPABILITY_INTERNET_CLIENT_SERVER = 1,
    FWPM_APPC_NETWORK_CAPABILITY_INTERNET_PRIVATE_NETWORK = 2,
};
pub const FWPM_APPC_NETWORK_CAPABILITY_INTERNET_CLIENT = FWPM_APPC_NETWORK_CAPABILITY_TYPE.FWPM_APPC_NETWORK_CAPABILITY_INTERNET_CLIENT;
pub const FWPM_APPC_NETWORK_CAPABILITY_INTERNET_CLIENT_SERVER = FWPM_APPC_NETWORK_CAPABILITY_TYPE.FWPM_APPC_NETWORK_CAPABILITY_INTERNET_CLIENT_SERVER;
pub const FWPM_APPC_NETWORK_CAPABILITY_INTERNET_PRIVATE_NETWORK = FWPM_APPC_NETWORK_CAPABILITY_TYPE.FWPM_APPC_NETWORK_CAPABILITY_INTERNET_PRIVATE_NETWORK;

pub const FWPM_NET_EVENT_CAPABILITY_DROP0 = extern struct {
    networkCapabilityId: FWPM_APPC_NETWORK_CAPABILITY_TYPE,
    filterId: u64,
    isLoopback: BOOL,
};

pub const FWPM_NET_EVENT_CAPABILITY_ALLOW0 = extern struct {
    networkCapabilityId: FWPM_APPC_NETWORK_CAPABILITY_TYPE,
    filterId: u64,
    isLoopback: BOOL,
};

pub const FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_ = extern struct {
    spi: u32,
};

pub const FWPM_NET_EVENT0 = extern struct {
    header: FWPM_NET_EVENT_HEADER0,
    type: FWPM_NET_EVENT_TYPE,
    Anonymous: FWPM_NET_EVENT0._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_NET_EVENT1 = extern struct {
    header: FWPM_NET_EVENT_HEADER1,
    type: FWPM_NET_EVENT_TYPE,
    Anonymous: FWPM_NET_EVENT1._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_NET_EVENT2 = extern struct {
    header: FWPM_NET_EVENT_HEADER2,
    type: FWPM_NET_EVENT_TYPE,
    Anonymous: FWPM_NET_EVENT2._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_NET_EVENT3 = extern struct {
    header: FWPM_NET_EVENT_HEADER3,
    type: FWPM_NET_EVENT_TYPE,
    Anonymous: FWPM_NET_EVENT3._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_NET_EVENT4_ = extern struct {
    header: FWPM_NET_EVENT_HEADER3,
    type: FWPM_NET_EVENT_TYPE,
    Anonymous: FWPM_NET_EVENT4_._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_NET_EVENT5_ = extern struct {
    header: FWPM_NET_EVENT_HEADER3,
    type: FWPM_NET_EVENT_TYPE,
    Anonymous: FWPM_NET_EVENT5_._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_NET_EVENT_ENUM_TEMPLATE0 = extern struct {
    startTime: FILETIME,
    endTime: FILETIME,
    numFilterConditions: u32,
    filterCondition: *FWPM_FILTER_CONDITION0,
};

pub const FWPM_NET_EVENT_SUBSCRIPTION0 = extern struct {
    enumTemplate: *FWPM_NET_EVENT_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};

pub const FWPM_SYSTEM_PORT_TYPE = extern enum(i32) {
    FWPM_SYSTEM_PORT_RPC_EPMAP = 0,
    FWPM_SYSTEM_PORT_TEREDO = 1,
    FWPM_SYSTEM_PORT_IPHTTPS_IN = 2,
    FWPM_SYSTEM_PORT_IPHTTPS_OUT = 3,
    MAX = 4,
};
pub const FWPM_SYSTEM_PORT_RPC_EPMAP = FWPM_SYSTEM_PORT_TYPE.FWPM_SYSTEM_PORT_RPC_EPMAP;
pub const FWPM_SYSTEM_PORT_TEREDO = FWPM_SYSTEM_PORT_TYPE.FWPM_SYSTEM_PORT_TEREDO;
pub const FWPM_SYSTEM_PORT_IPHTTPS_IN = FWPM_SYSTEM_PORT_TYPE.FWPM_SYSTEM_PORT_IPHTTPS_IN;
pub const FWPM_SYSTEM_PORT_IPHTTPS_OUT = FWPM_SYSTEM_PORT_TYPE.FWPM_SYSTEM_PORT_IPHTTPS_OUT;
pub const FWPM_SYSTEM_PORT_TYPE_MAX = FWPM_SYSTEM_PORT_TYPE.MAX;

pub const FWPM_SYSTEM_PORTS_BY_TYPE0 = extern struct {
    type: FWPM_SYSTEM_PORT_TYPE,
    numPorts: u32,
    ports: *u16,
};

pub const FWPM_SYSTEM_PORTS0 = extern struct {
    numTypes: u32,
    types: *FWPM_SYSTEM_PORTS_BY_TYPE0,
};

pub const FWPM_CONNECTION0 = extern struct {
    connectionId: u64,
    ipVersion: FWP_IP_VERSION,
    Anonymous1: FWPM_CONNECTION0._Anonymous1_e__Union,
    Anonymous2: FWPM_CONNECTION0._Anonymous2_e__Union,
    providerKey: *Guid,
    ipsecTrafficModeType: IPSEC_TRAFFIC_TYPE,
    keyModuleType: IKEEXT_KEY_MODULE_TYPE,
    mmCrypto: IKEEXT_PROPOSAL0,
    mmPeer: IKEEXT_CREDENTIAL2,
    emPeer: IKEEXT_CREDENTIAL2,
    bytesTransferredIn: u64,
    bytesTransferredOut: u64,
    bytesTransferredTotal: u64,
    startSysTime: FILETIME,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_CONNECTION_ENUM_TEMPLATE0 = extern struct {
    connectionId: u64,
    flags: u32,
};

pub const FWPM_CONNECTION_SUBSCRIPTION0 = extern struct {
    enumTemplate: *FWPM_CONNECTION_ENUM_TEMPLATE0,
    flags: u32,
    sessionKey: Guid,
};

pub const FWPM_CONNECTION_EVENT_TYPE = extern enum(i32) {
    FWPM_CONNECTION_EVENT_ADD = 0,
    FWPM_CONNECTION_EVENT_DELETE = 1,
    FWPM_CONNECTION_EVENT_MAX = 2,
};
pub const FWPM_CONNECTION_EVENT_ADD = FWPM_CONNECTION_EVENT_TYPE.FWPM_CONNECTION_EVENT_ADD;
pub const FWPM_CONNECTION_EVENT_DELETE = FWPM_CONNECTION_EVENT_TYPE.FWPM_CONNECTION_EVENT_DELETE;
pub const FWPM_CONNECTION_EVENT_MAX = FWPM_CONNECTION_EVENT_TYPE.FWPM_CONNECTION_EVENT_MAX;

pub const FWPM_VSWITCH_EVENT_TYPE = extern enum(i32) {
    FWPM_VSWITCH_EVENT_FILTER_ADD_TO_INCOMPLETE_LAYER = 0,
    FWPM_VSWITCH_EVENT_FILTER_ENGINE_NOT_IN_REQUIRED_POSITION = 1,
    FWPM_VSWITCH_EVENT_ENABLED_FOR_INSPECTION = 2,
    FWPM_VSWITCH_EVENT_DISABLED_FOR_INSPECTION = 3,
    FWPM_VSWITCH_EVENT_FILTER_ENGINE_REORDER = 4,
    FWPM_VSWITCH_EVENT_MAX = 5,
};
pub const FWPM_VSWITCH_EVENT_FILTER_ADD_TO_INCOMPLETE_LAYER = FWPM_VSWITCH_EVENT_TYPE.FWPM_VSWITCH_EVENT_FILTER_ADD_TO_INCOMPLETE_LAYER;
pub const FWPM_VSWITCH_EVENT_FILTER_ENGINE_NOT_IN_REQUIRED_POSITION = FWPM_VSWITCH_EVENT_TYPE.FWPM_VSWITCH_EVENT_FILTER_ENGINE_NOT_IN_REQUIRED_POSITION;
pub const FWPM_VSWITCH_EVENT_ENABLED_FOR_INSPECTION = FWPM_VSWITCH_EVENT_TYPE.FWPM_VSWITCH_EVENT_ENABLED_FOR_INSPECTION;
pub const FWPM_VSWITCH_EVENT_DISABLED_FOR_INSPECTION = FWPM_VSWITCH_EVENT_TYPE.FWPM_VSWITCH_EVENT_DISABLED_FOR_INSPECTION;
pub const FWPM_VSWITCH_EVENT_FILTER_ENGINE_REORDER = FWPM_VSWITCH_EVENT_TYPE.FWPM_VSWITCH_EVENT_FILTER_ENGINE_REORDER;
pub const FWPM_VSWITCH_EVENT_MAX = FWPM_VSWITCH_EVENT_TYPE.FWPM_VSWITCH_EVENT_MAX;

pub const FWPM_VSWITCH_EVENT0 = extern struct {
    eventType: FWPM_VSWITCH_EVENT_TYPE,
    vSwitchId: PWSTR,
    Anonymous: FWPM_VSWITCH_EVENT0._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const FWPM_VSWITCH_EVENT_SUBSCRIPTION0 = extern struct {
    flags: u32,
    sessionKey: Guid,
};

pub const FWPM_PROVIDER_CHANGE_CALLBACK0 = fn(
    context: *c_void,
    change: *const FWPM_PROVIDER_CHANGE0,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0 = fn(
    context: *c_void,
    change: *const FWPM_PROVIDER_CONTEXT_CHANGE0,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_SUBLAYER_CHANGE_CALLBACK0 = fn(
    context: *c_void,
    change: *const FWPM_SUBLAYER_CHANGE0,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_CALLOUT_CHANGE_CALLBACK0 = fn(
    context: *c_void,
    change: *const FWPM_CALLOUT_CHANGE0,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_FILTER_CHANGE_CALLBACK0 = fn(
    context: *c_void,
    change: *const FWPM_FILTER_CHANGE0,
) callconv(@import("std").os.windows.WINAPI) void;

pub const IPSEC_SA_CONTEXT_CALLBACK0 = fn(
    context: *c_void,
    change: *const IPSEC_SA_CONTEXT_CHANGE0,
) callconv(@import("std").os.windows.WINAPI) void;

pub const IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0 = fn(
    ikeTraffic: *const IKEEXT_TRAFFIC0,
    willDictateKey: *BOOL,
    weight: *u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const IPSEC_KEY_MANAGER_DICTATE_KEY0 = fn(
    inboundSaDetails: *IPSEC_SA_DETAILS1,
    outboundSaDetails: *IPSEC_SA_DETAILS1,
    keyingModuleGenKey: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const IPSEC_KEY_MANAGER_NOTIFY_KEY0 = fn(
    inboundSa: *const IPSEC_SA_DETAILS1,
    outboundSa: *const IPSEC_SA_DETAILS1,
) callconv(@import("std").os.windows.WINAPI) void;

pub const IPSEC_KEY_MANAGER_CALLBACKS0 = extern struct {
    reserved: Guid,
    flags: u32,
    keyDictationCheck: IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0,
    keyDictation: IPSEC_KEY_MANAGER_DICTATE_KEY0,
    keyNotify: IPSEC_KEY_MANAGER_NOTIFY_KEY0,
};

pub const FWPM_NET_EVENT_CALLBACK0 = fn(
    context: *c_void,
    event: *const FWPM_NET_EVENT1,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_NET_EVENT_CALLBACK1 = fn(
    context: *c_void,
    event: *const FWPM_NET_EVENT2,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_NET_EVENT_CALLBACK2 = fn(
    context: *c_void,
    event: *const FWPM_NET_EVENT3,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_NET_EVENT_CALLBACK3 = fn(
    context: *c_void,
    event: *const FWPM_NET_EVENT4_,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_NET_EVENT_CALLBACK4 = fn(
    context: *c_void,
    event: *const FWPM_NET_EVENT5_,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_SYSTEM_PORTS_CALLBACK0 = fn(
    context: *c_void,
    sysPorts: *const FWPM_SYSTEM_PORTS0,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_CONNECTION_CALLBACK0 = fn(
    context: *c_void,
    eventType: FWPM_CONNECTION_EVENT_TYPE,
    connection: *const FWPM_CONNECTION0,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FWPM_VSWITCH_EVENT_CALLBACK0 = fn(
    context: *c_void,
    vSwitchEvent: *const FWPM_VSWITCH_EVENT0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const DL_OUI = u32; // TODO: implement StructOrUnion types?

pub const DL_EI48 = u32; // TODO: implement StructOrUnion types?

pub const DL_EUI48 = u32; // TODO: implement StructOrUnion types?

pub const DL_EI64 = u32; // TODO: implement StructOrUnion types?

pub const DL_EUI64 = u32; // TODO: implement StructOrUnion types?

pub const SNAP_HEADER = extern struct {
    Dsap: u8,
    Ssap: u8,
    Control: u8,
    Oui: [3]u8,
    Type: u16,
};

pub const ETHERNET_HEADER = extern struct {
    Destination: DL_EUI48,
    Source: DL_EUI48,
    Anonymous: ETHERNET_HEADER._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const VLAN_TAG = extern struct {
    Anonymous: VLAN_TAG._Anonymous_e__Union,
    Type: u16,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const ICMP_HEADER = extern struct {
    Type: u8,
    Code: u8,
    Checksum: u16,
};

pub const ICMP_MESSAGE = extern struct {
    Header: ICMP_HEADER,
    Data: ICMP_MESSAGE._Data_e__Union,
    const _Data_e__Union = u32; // TODO: generate this nested type!
};

pub const IPV4_HEADER = extern struct {
    Anonymous1: IPV4_HEADER._Anonymous1_e__Union,
    Anonymous2: IPV4_HEADER._Anonymous2_e__Union,
    TotalLength: u16,
    Identification: u16,
    Anonymous3: IPV4_HEADER._Anonymous3_e__Union,
    TimeToLive: u8,
    Protocol: u8,
    HeaderChecksum: u16,
    SourceAddress: in_addr,
    DestinationAddress: in_addr,
    const _Anonymous3_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const IPV4_OPTION_HEADER = extern struct {
    Anonymous: IPV4_OPTION_HEADER._Anonymous_e__Union,
    OptionLength: u8,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IPV4_OPTION_TYPE = extern enum(i32) {
    IP_OPT_EOL = 0,
    IP_OPT_NOP = 1,
    IP_OPT_SECURITY = 130,
    IP_OPT_LSRR = 131,
    IP_OPT_TS = 68,
    IP_OPT_RR = 7,
    IP_OPT_SSRR = 137,
    IP_OPT_SID = 136,
    IP_OPT_ROUTER_ALERT = 148,
    IP_OPT_MULTIDEST = 149,
};
pub const IP_OPT_EOL = IPV4_OPTION_TYPE.IP_OPT_EOL;
pub const IP_OPT_NOP = IPV4_OPTION_TYPE.IP_OPT_NOP;
pub const IP_OPT_SECURITY = IPV4_OPTION_TYPE.IP_OPT_SECURITY;
pub const IP_OPT_LSRR = IPV4_OPTION_TYPE.IP_OPT_LSRR;
pub const IP_OPT_TS = IPV4_OPTION_TYPE.IP_OPT_TS;
pub const IP_OPT_RR = IPV4_OPTION_TYPE.IP_OPT_RR;
pub const IP_OPT_SSRR = IPV4_OPTION_TYPE.IP_OPT_SSRR;
pub const IP_OPT_SID = IPV4_OPTION_TYPE.IP_OPT_SID;
pub const IP_OPT_ROUTER_ALERT = IPV4_OPTION_TYPE.IP_OPT_ROUTER_ALERT;
pub const IP_OPT_MULTIDEST = IPV4_OPTION_TYPE.IP_OPT_MULTIDEST;

pub const IPV4_TIMESTAMP_OPTION = extern struct {
    OptionHeader: IPV4_OPTION_HEADER,
    Pointer: u8,
    Anonymous: IPV4_TIMESTAMP_OPTION._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IP_OPTION_TIMESTAMP_FLAGS = extern enum(i32) {
    IP_OPTION_TIMESTAMP_ONLY = 0,
    IP_OPTION_TIMESTAMP_ADDRESS = 1,
    IP_OPTION_TIMESTAMP_SPECIFIC_ADDRESS = 3,
};
pub const IP_OPTION_TIMESTAMP_ONLY = IP_OPTION_TIMESTAMP_FLAGS.IP_OPTION_TIMESTAMP_ONLY;
pub const IP_OPTION_TIMESTAMP_ADDRESS = IP_OPTION_TIMESTAMP_FLAGS.IP_OPTION_TIMESTAMP_ADDRESS;
pub const IP_OPTION_TIMESTAMP_SPECIFIC_ADDRESS = IP_OPTION_TIMESTAMP_FLAGS.IP_OPTION_TIMESTAMP_SPECIFIC_ADDRESS;

pub const IPV4_ROUTING_HEADER = extern struct {
    OptionHeader: IPV4_OPTION_HEADER,
    Pointer: u8,
};

pub const ICMP4_UNREACH_CODE = extern enum(i32) {
    ICMP4_UNREACH_NET = 0,
    ICMP4_UNREACH_HOST = 1,
    ICMP4_UNREACH_PROTOCOL = 2,
    ICMP4_UNREACH_PORT = 3,
    ICMP4_UNREACH_FRAG_NEEDED = 4,
    ICMP4_UNREACH_SOURCEROUTE_FAILED = 5,
    ICMP4_UNREACH_NET_UNKNOWN = 6,
    ICMP4_UNREACH_HOST_UNKNOWN = 7,
    ICMP4_UNREACH_ISOLATED = 8,
    ICMP4_UNREACH_NET_ADMIN = 9,
    ICMP4_UNREACH_HOST_ADMIN = 10,
    ICMP4_UNREACH_NET_TOS = 11,
    ICMP4_UNREACH_HOST_TOS = 12,
    ICMP4_UNREACH_ADMIN = 13,
};
pub const ICMP4_UNREACH_NET = ICMP4_UNREACH_CODE.ICMP4_UNREACH_NET;
pub const ICMP4_UNREACH_HOST = ICMP4_UNREACH_CODE.ICMP4_UNREACH_HOST;
pub const ICMP4_UNREACH_PROTOCOL = ICMP4_UNREACH_CODE.ICMP4_UNREACH_PROTOCOL;
pub const ICMP4_UNREACH_PORT = ICMP4_UNREACH_CODE.ICMP4_UNREACH_PORT;
pub const ICMP4_UNREACH_FRAG_NEEDED = ICMP4_UNREACH_CODE.ICMP4_UNREACH_FRAG_NEEDED;
pub const ICMP4_UNREACH_SOURCEROUTE_FAILED = ICMP4_UNREACH_CODE.ICMP4_UNREACH_SOURCEROUTE_FAILED;
pub const ICMP4_UNREACH_NET_UNKNOWN = ICMP4_UNREACH_CODE.ICMP4_UNREACH_NET_UNKNOWN;
pub const ICMP4_UNREACH_HOST_UNKNOWN = ICMP4_UNREACH_CODE.ICMP4_UNREACH_HOST_UNKNOWN;
pub const ICMP4_UNREACH_ISOLATED = ICMP4_UNREACH_CODE.ICMP4_UNREACH_ISOLATED;
pub const ICMP4_UNREACH_NET_ADMIN = ICMP4_UNREACH_CODE.ICMP4_UNREACH_NET_ADMIN;
pub const ICMP4_UNREACH_HOST_ADMIN = ICMP4_UNREACH_CODE.ICMP4_UNREACH_HOST_ADMIN;
pub const ICMP4_UNREACH_NET_TOS = ICMP4_UNREACH_CODE.ICMP4_UNREACH_NET_TOS;
pub const ICMP4_UNREACH_HOST_TOS = ICMP4_UNREACH_CODE.ICMP4_UNREACH_HOST_TOS;
pub const ICMP4_UNREACH_ADMIN = ICMP4_UNREACH_CODE.ICMP4_UNREACH_ADMIN;

pub const ICMP4_TIME_EXCEED_CODE = extern enum(i32) {
    ICMP4_TIME_EXCEED_TRANSIT = 0,
    ICMP4_TIME_EXCEED_REASSEMBLY = 1,
};
pub const ICMP4_TIME_EXCEED_TRANSIT = ICMP4_TIME_EXCEED_CODE.ICMP4_TIME_EXCEED_TRANSIT;
pub const ICMP4_TIME_EXCEED_REASSEMBLY = ICMP4_TIME_EXCEED_CODE.ICMP4_TIME_EXCEED_REASSEMBLY;

pub const ICMPV4_ROUTER_SOLICIT = extern struct {
    RsHeader: ICMP_MESSAGE,
};

pub const ICMPV4_ROUTER_ADVERT_HEADER = extern struct {
    RaHeader: ICMP_MESSAGE,
};

pub const ICMPV4_ROUTER_ADVERT_ENTRY = extern struct {
    RouterAdvertAddr: in_addr,
    PreferenceLevel: i32,
};

pub const ICMPV4_TIMESTAMP_MESSAGE = extern struct {
    Header: ICMP_MESSAGE,
    OriginateTimestamp: u32,
    ReceiveTimestamp: u32,
    TransmitTimestamp: u32,
};

pub const ICMPV4_ADDRESS_MASK_MESSAGE = extern struct {
    Header: ICMP_MESSAGE,
    AddressMask: u32,
};

pub const ARP_HEADER = extern struct {
    HardwareAddressSpace: u16,
    ProtocolAddressSpace: u16,
    HardwareAddressLength: u8,
    ProtocolAddressLength: u8,
    Opcode: u16,
    SenderHardwareAddress: [1]u8,
};

pub const ARP_OPCODE = extern enum(i32) {
    ARP_REQUEST = 1,
    ARP_RESPONSE = 2,
};
pub const ARP_REQUEST = ARP_OPCODE.ARP_REQUEST;
pub const ARP_RESPONSE = ARP_OPCODE.ARP_RESPONSE;

pub const ARP_HARDWARE_TYPE = extern enum(i32) {
    ARP_HW_ENET = 1,
    ARP_HW_802 = 6,
};
pub const ARP_HW_ENET = ARP_HARDWARE_TYPE.ARP_HW_ENET;
pub const ARP_HW_802 = ARP_HARDWARE_TYPE.ARP_HW_802;

pub const IGMP_HEADER = extern struct {
    Anonymous1: IGMP_HEADER._Anonymous1_e__Union,
    Anonymous2: IGMP_HEADER._Anonymous2_e__Union,
    Checksum: u16,
    MulticastAddress: in_addr,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const IGMP_MAX_RESP_CODE_TYPE = extern enum(i32) {
    NORMAL = 0,
    FLOAT = 1,
};
pub const IGMP_MAX_RESP_CODE_TYPE_NORMAL = IGMP_MAX_RESP_CODE_TYPE.NORMAL;
pub const IGMP_MAX_RESP_CODE_TYPE_FLOAT = IGMP_MAX_RESP_CODE_TYPE.FLOAT;

pub const IGMPV3_QUERY_HEADER = extern struct {
    Type: u8,
    Anonymous1: IGMPV3_QUERY_HEADER._Anonymous1_e__Union,
    Checksum: u16,
    MulticastAddress: in_addr,
    _bitfield: u8,
    Anonymous2: IGMPV3_QUERY_HEADER._Anonymous2_e__Union,
    SourceCount: u16,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const IGMPV3_REPORT_RECORD_HEADER = extern struct {
    Type: u8,
    AuxillaryDataLength: u8,
    SourceCount: u16,
    MulticastAddress: in_addr,
};

pub const IGMPV3_REPORT_HEADER = extern struct {
    Type: u8,
    Reserved: u8,
    Checksum: u16,
    Reserved2: u16,
    RecordCount: u16,
};

pub const IPV6_HEADER = extern struct {
    Anonymous: IPV6_HEADER._Anonymous_e__Union,
    PayloadLength: u16,
    NextHeader: u8,
    HopLimit: u8,
    SourceAddress: in6_addr,
    DestinationAddress: in6_addr,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IPV6_FRAGMENT_HEADER = extern struct {
    NextHeader: u8,
    Reserved: u8,
    Anonymous: IPV6_FRAGMENT_HEADER._Anonymous_e__Union,
    Id: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IPV6_EXTENSION_HEADER = extern struct {
    NextHeader: u8,
    Length: u8,
};

pub const IPV6_OPTION_HEADER = extern struct {
    Type: u8,
    DataLength: u8,
};

pub const IPV6_OPTION_TYPE = extern enum(i32) {
    IP6OPT_PAD1 = 0,
    IP6OPT_PADN = 1,
    IP6OPT_TUNNEL_LIMIT = 4,
    IP6OPT_ROUTER_ALERT = 5,
    IP6OPT_JUMBO = 194,
    IP6OPT_NSAP_ADDR = 195,
};
pub const IP6OPT_PAD1 = IPV6_OPTION_TYPE.IP6OPT_PAD1;
pub const IP6OPT_PADN = IPV6_OPTION_TYPE.IP6OPT_PADN;
pub const IP6OPT_TUNNEL_LIMIT = IPV6_OPTION_TYPE.IP6OPT_TUNNEL_LIMIT;
pub const IP6OPT_ROUTER_ALERT = IPV6_OPTION_TYPE.IP6OPT_ROUTER_ALERT;
pub const IP6OPT_JUMBO = IPV6_OPTION_TYPE.IP6OPT_JUMBO;
pub const IP6OPT_NSAP_ADDR = IPV6_OPTION_TYPE.IP6OPT_NSAP_ADDR;

pub const IPV6_OPTION_JUMBOGRAM = extern struct {
    Header: IPV6_OPTION_HEADER,
    JumbogramLength: [4]u8,
};

pub const IPV6_OPTION_ROUTER_ALERT = extern struct {
    Header: IPV6_OPTION_HEADER,
    Value: [2]u8,
};

pub const IPV6_ROUTING_HEADER = extern struct {
    NextHeader: u8,
    Length: u8,
    RoutingType: u8,
    SegmentsLeft: u8,
    Reserved: [4]u8,
};

pub const nd_router_solicit = extern struct {
    nd_rs_hdr: ICMP_MESSAGE,
};

pub const nd_router_advert = extern struct {
    nd_ra_hdr: ICMP_MESSAGE,
    nd_ra_reachable: u32,
    nd_ra_retransmit: u32,
};

pub const IPV6_ROUTER_ADVERTISEMENT_FLAGS = u32; // TODO: implement StructOrUnion types?

pub const nd_neighbor_solicit = extern struct {
    nd_ns_hdr: ICMP_MESSAGE,
    nd_ns_target: in6_addr,
};

pub const nd_neighbor_advert = extern struct {
    nd_na_hdr: ICMP_MESSAGE,
    nd_na_target: in6_addr,
};

pub const IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS = u32; // TODO: implement StructOrUnion types?

pub const nd_redirect = extern struct {
    nd_rd_hdr: ICMP_MESSAGE,
    nd_rd_target: in6_addr,
    nd_rd_dst: in6_addr,
};

pub const nd_opt_hdr = extern struct {
    nd_opt_type: u8,
    nd_opt_len: u8,
};

pub const ND_OPTION_TYPE = extern enum(i32) {
    ND_OPT_SOURCE_LINKADDR = 1,
    ND_OPT_TARGET_LINKADDR = 2,
    ND_OPT_PREFIX_INFORMATION = 3,
    ND_OPT_REDIRECTED_HEADER = 4,
    ND_OPT_MTU = 5,
    ND_OPT_NBMA_SHORTCUT_LIMIT = 6,
    ND_OPT_ADVERTISEMENT_INTERVAL = 7,
    ND_OPT_HOME_AGENT_INFORMATION = 8,
    ND_OPT_SOURCE_ADDR_LIST = 9,
    ND_OPT_TARGET_ADDR_LIST = 10,
    ND_OPT_ROUTE_INFO = 24,
    ND_OPT_RDNSS = 25,
    ND_OPT_DNSSL = 31,
};
pub const ND_OPT_SOURCE_LINKADDR = ND_OPTION_TYPE.ND_OPT_SOURCE_LINKADDR;
pub const ND_OPT_TARGET_LINKADDR = ND_OPTION_TYPE.ND_OPT_TARGET_LINKADDR;
pub const ND_OPT_PREFIX_INFORMATION = ND_OPTION_TYPE.ND_OPT_PREFIX_INFORMATION;
pub const ND_OPT_REDIRECTED_HEADER = ND_OPTION_TYPE.ND_OPT_REDIRECTED_HEADER;
pub const ND_OPT_MTU = ND_OPTION_TYPE.ND_OPT_MTU;
pub const ND_OPT_NBMA_SHORTCUT_LIMIT = ND_OPTION_TYPE.ND_OPT_NBMA_SHORTCUT_LIMIT;
pub const ND_OPT_ADVERTISEMENT_INTERVAL = ND_OPTION_TYPE.ND_OPT_ADVERTISEMENT_INTERVAL;
pub const ND_OPT_HOME_AGENT_INFORMATION = ND_OPTION_TYPE.ND_OPT_HOME_AGENT_INFORMATION;
pub const ND_OPT_SOURCE_ADDR_LIST = ND_OPTION_TYPE.ND_OPT_SOURCE_ADDR_LIST;
pub const ND_OPT_TARGET_ADDR_LIST = ND_OPTION_TYPE.ND_OPT_TARGET_ADDR_LIST;
pub const ND_OPT_ROUTE_INFO = ND_OPTION_TYPE.ND_OPT_ROUTE_INFO;
pub const ND_OPT_RDNSS = ND_OPTION_TYPE.ND_OPT_RDNSS;
pub const ND_OPT_DNSSL = ND_OPTION_TYPE.ND_OPT_DNSSL;

pub const nd_opt_prefix_info = extern struct {
    nd_opt_pi_type: u8,
    nd_opt_pi_len: u8,
    nd_opt_pi_prefix_len: u8,
    Anonymous1: nd_opt_prefix_info._Anonymous1_e__Union,
    nd_opt_pi_valid_time: u32,
    nd_opt_pi_preferred_time: u32,
    Anonymous2: nd_opt_prefix_info._Anonymous2_e__Union,
    nd_opt_pi_prefix: in6_addr,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const nd_opt_rd_hdr = extern struct {
    nd_opt_rh_type: u8,
    nd_opt_rh_len: u8,
    nd_opt_rh_reserved1: u16,
    nd_opt_rh_reserved2: u32,
};

pub const nd_opt_mtu = extern struct {
    nd_opt_mtu_type: u8,
    nd_opt_mtu_len: u8,
    nd_opt_mtu_reserved: u16,
    nd_opt_mtu_mtu: u32,
};

pub const nd_opt_route_info = extern struct {
    nd_opt_ri_type: u8,
    nd_opt_ri_len: u8,
    nd_opt_ri_prefix_len: u8,
    Anonymous: nd_opt_route_info._Anonymous_e__Union,
    nd_opt_ri_route_lifetime: u32,
    nd_opt_ri_prefix: in6_addr,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const nd_opt_rdnss = extern struct {
    nd_opt_rdnss_type: u8,
    nd_opt_rdnss_len: u8,
    nd_opt_rdnss_reserved: u16,
    nd_opt_rdnss_lifetime: u32,
};

pub const nd_opt_dnssl = extern struct {
    nd_opt_dnssl_type: u8,
    nd_opt_dnssl_len: u8,
    nd_opt_dnssl_reserved: u16,
    nd_opt_dnssl_lifetime: u32,
};

pub const MLD_HEADER = extern struct {
    IcmpHeader: ICMP_HEADER,
    MaxRespTime: u16,
    Reserved: u16,
    MulticastAddress: in6_addr,
};

pub const MLD_MAX_RESP_CODE_TYPE = extern enum(i32) {
    NORMAL = 0,
    FLOAT = 1,
};
pub const MLD_MAX_RESP_CODE_TYPE_NORMAL = MLD_MAX_RESP_CODE_TYPE.NORMAL;
pub const MLD_MAX_RESP_CODE_TYPE_FLOAT = MLD_MAX_RESP_CODE_TYPE.FLOAT;

pub const MLDV2_QUERY_HEADER = extern struct {
    IcmpHeader: ICMP_HEADER,
    Anonymous1: MLDV2_QUERY_HEADER._Anonymous1_e__Union,
    Reserved: u16,
    MulticastAddress: in6_addr,
    _bitfield: u8,
    Anonymous2: MLDV2_QUERY_HEADER._Anonymous2_e__Union,
    SourceCount: u16,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const MLDV2_REPORT_RECORD_HEADER = extern struct {
    Type: u8,
    AuxillaryDataLength: u8,
    SourceCount: u16,
    MulticastAddress: in6_addr,
};

pub const MLDV2_REPORT_HEADER = extern struct {
    IcmpHeader: ICMP_HEADER,
    Reserved: u16,
    RecordCount: u16,
};

pub const tcp_hdr = extern struct {
    th_sport: u16,
    th_dport: u16,
    th_seq: u32,
    th_ack: u32,
    _bitfield: u8,
    th_flags: u8,
    th_win: u16,
    th_sum: u16,
    th_urp: u16,
};

pub const tcp_opt_mss = extern struct {
    Kind: u8,
    Length: u8,
    Mss: u16,
};

pub const tcp_opt_ws = extern struct {
    Kind: u8,
    Length: u8,
    ShiftCnt: u8,
};

pub const tcp_opt_sack_permitted = extern struct {
    Kind: u8,
    Length: u8,
};

pub const tcp_opt_sack = extern struct {
    Kind: u8,
    Length: u8,
    Block: [1]tcp_opt_sack.tcp_opt_sack_block,
    const tcp_opt_sack_block = u32; // TODO: generate this nested type!
};

pub const tcp_opt_ts = extern struct {
    Kind: u8,
    Length: u8,
    Val: u32,
    EcR: u32,
};

pub const tcp_opt_unknown = extern struct {
    Kind: u8,
    Length: u8,
};

pub const tcp_opt_fastopen = extern struct {
    Kind: u8,
    Length: u8,
    Cookie: [1]u8,
};

pub const DL_TUNNEL_ADDRESS = extern struct {
    CompartmentId: COMPARTMENT_ID,
    ScopeId: SCOPE_ID,
    IpAddress: [1]u8,
};

pub const TUNNEL_SUB_TYPE = extern enum(i32) {
    NONE = 0,
    CP = 1,
    IPTLS = 2,
    HA = 3,
};
pub const TUNNEL_SUB_TYPE_NONE = TUNNEL_SUB_TYPE.NONE;
pub const TUNNEL_SUB_TYPE_CP = TUNNEL_SUB_TYPE.CP;
pub const TUNNEL_SUB_TYPE_IPTLS = TUNNEL_SUB_TYPE.IPTLS;
pub const TUNNEL_SUB_TYPE_HA = TUNNEL_SUB_TYPE.HA;

pub const DL_TEREDO_ADDRESS = extern struct {
    Reserved: [6]u8,
    Anonymous: DL_TEREDO_ADDRESS._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DL_TEREDO_ADDRESS_PRV = extern struct {
    Reserved: [6]u8,
    Anonymous: DL_TEREDO_ADDRESS_PRV._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IPTLS_METADATA = extern struct {
    SequenceNumber: u64,
};

pub const NPI_MODULEID_TYPE = extern enum(i32) {
    MIT_GUID = 1,
    MIT_IF_LUID = 2,
};
pub const MIT_GUID = NPI_MODULEID_TYPE.MIT_GUID;
pub const MIT_IF_LUID = NPI_MODULEID_TYPE.MIT_IF_LUID;

pub const NPI_MODULEID = extern struct {
    Length: u16,
    Type: NPI_MODULEID_TYPE,
    Anonymous: NPI_MODULEID._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const FALLBACK_INDEX = extern enum(i32) {
    FallbackIndexTcpFastopen = 0,
    FallbackIndexMax = 1,
};
pub const FallbackIndexTcpFastopen = FALLBACK_INDEX.FallbackIndexTcpFastopen;
pub const FallbackIndexMax = FALLBACK_INDEX.FallbackIndexMax;


//--------------------------------------------------------------------------------
// Section: Functions (186)
//--------------------------------------------------------------------------------
pub extern "fwpuclnt" fn FwpmFreeMemory0(
    p: **c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "fwpuclnt" fn FwpmEngineOpen0(
    serverName: ?[*:0]const u16,
    authnService: u32,
    authIdentity: ?*SEC_WINNT_AUTH_IDENTITY_W,
    session: ?*const FWPM_SESSION0,
    engineHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmEngineClose0(
    engineHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmEngineGetOption0(
    engineHandle: HANDLE,
    option: FWPM_ENGINE_OPTION,
    value: **FWP_VALUE0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmEngineSetOption0(
    engineHandle: HANDLE,
    option: FWPM_ENGINE_OPTION,
    newValue: *const FWP_VALUE0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmEngineGetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*?*c_void,
    sidGroup: ?*?*c_void,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmEngineSetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmSessionCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*const FWPM_SESSION_ENUM_TEMPLATE0,
    enumHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmSessionEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***FWPM_SESSION0,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmSessionDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmTransactionBegin0(
    engineHandle: HANDLE,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmTransactionCommit0(
    engineHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmTransactionAbort0(
    engineHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderAdd0(
    engineHandle: HANDLE,
    provider: *const FWPM_PROVIDER0,
    sd: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderDeleteByKey0(
    engineHandle: HANDLE,
    key: *const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderGetByKey0(
    engineHandle: HANDLE,
    key: *const Guid,
    provider: **FWPM_PROVIDER0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*const FWPM_PROVIDER_ENUM_TEMPLATE0,
    enumHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***FWPM_PROVIDER0,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderGetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*?*c_void,
    sidGroup: ?*?*c_void,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderSetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderSubscribeChanges0(
    engineHandle: HANDLE,
    subscription: *const FWPM_PROVIDER_SUBSCRIPTION0,
    callback: FWPM_PROVIDER_CHANGE_CALLBACK0,
    context: ?*c_void,
    changeHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderUnsubscribeChanges0(
    engineHandle: HANDLE,
    changeHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderSubscriptionsGet0(
    engineHandle: HANDLE,
    entries: ***FWPM_PROVIDER_SUBSCRIPTION0,
    numEntries: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextAdd0(
    engineHandle: HANDLE,
    providerContext: *const FWPM_PROVIDER_CONTEXT0,
    sd: ?*c_void,
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextAdd1(
    engineHandle: HANDLE,
    providerContext: *const FWPM_PROVIDER_CONTEXT1,
    sd: ?*c_void,
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextAdd2(
    engineHandle: HANDLE,
    providerContext: *const FWPM_PROVIDER_CONTEXT2,
    sd: ?*c_void,
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextAdd3(
    engineHandle: HANDLE,
    providerContext: *const FWPM_PROVIDER_CONTEXT3_,
    sd: ?*c_void,
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextDeleteById0(
    engineHandle: HANDLE,
    id: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextDeleteByKey0(
    engineHandle: HANDLE,
    key: *const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextGetById0(
    engineHandle: HANDLE,
    id: u64,
    providerContext: **FWPM_PROVIDER_CONTEXT0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextGetById1(
    engineHandle: HANDLE,
    id: u64,
    providerContext: **FWPM_PROVIDER_CONTEXT1,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextGetById2(
    engineHandle: HANDLE,
    id: u64,
    providerContext: **FWPM_PROVIDER_CONTEXT2,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextGetById3(
    engineHandle: HANDLE,
    id: u64,
    providerContext: **FWPM_PROVIDER_CONTEXT3_,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextGetByKey0(
    engineHandle: HANDLE,
    key: *const Guid,
    providerContext: **FWPM_PROVIDER_CONTEXT0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextGetByKey1(
    engineHandle: HANDLE,
    key: *const Guid,
    providerContext: **FWPM_PROVIDER_CONTEXT1,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextGetByKey2(
    engineHandle: HANDLE,
    key: *const Guid,
    providerContext: **FWPM_PROVIDER_CONTEXT2,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextGetByKey3(
    engineHandle: HANDLE,
    key: *const Guid,
    providerContext: **FWPM_PROVIDER_CONTEXT3_,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*const FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0,
    enumHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***FWPM_PROVIDER_CONTEXT0,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextEnum1(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***FWPM_PROVIDER_CONTEXT1,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextEnum2(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***FWPM_PROVIDER_CONTEXT2,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextEnum3(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***FWPM_PROVIDER_CONTEXT3_,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextGetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*?*c_void,
    sidGroup: ?*?*c_void,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextSetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextSubscribeChanges0(
    engineHandle: HANDLE,
    subscription: *const FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0,
    callback: FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0,
    context: ?*c_void,
    changeHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextUnsubscribeChanges0(
    engineHandle: HANDLE,
    changeHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmProviderContextSubscriptionsGet0(
    engineHandle: HANDLE,
    entries: ***FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0,
    numEntries: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmSubLayerAdd0(
    engineHandle: HANDLE,
    subLayer: *const FWPM_SUBLAYER0,
    sd: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmSubLayerDeleteByKey0(
    engineHandle: HANDLE,
    key: *const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmSubLayerGetByKey0(
    engineHandle: HANDLE,
    key: *const Guid,
    subLayer: **FWPM_SUBLAYER0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmSubLayerCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*const FWPM_SUBLAYER_ENUM_TEMPLATE0,
    enumHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmSubLayerEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***FWPM_SUBLAYER0,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmSubLayerDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmSubLayerGetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*?*c_void,
    sidGroup: ?*?*c_void,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmSubLayerSetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmSubLayerSubscribeChanges0(
    engineHandle: HANDLE,
    subscription: *const FWPM_SUBLAYER_SUBSCRIPTION0,
    callback: FWPM_SUBLAYER_CHANGE_CALLBACK0,
    context: ?*c_void,
    changeHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmSubLayerUnsubscribeChanges0(
    engineHandle: HANDLE,
    changeHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmSubLayerSubscriptionsGet0(
    engineHandle: HANDLE,
    entries: ***FWPM_SUBLAYER_SUBSCRIPTION0,
    numEntries: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmLayerGetById0(
    engineHandle: HANDLE,
    id: u16,
    layer: **FWPM_LAYER0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmLayerGetByKey0(
    engineHandle: HANDLE,
    key: *const Guid,
    layer: **FWPM_LAYER0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmLayerCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*const FWPM_LAYER_ENUM_TEMPLATE0,
    enumHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmLayerEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***FWPM_LAYER0,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmLayerDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmLayerGetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*?*c_void,
    sidGroup: ?*?*c_void,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmLayerSetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmCalloutAdd0(
    engineHandle: HANDLE,
    callout: *const FWPM_CALLOUT0,
    sd: ?*c_void,
    id: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmCalloutDeleteById0(
    engineHandle: HANDLE,
    id: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmCalloutDeleteByKey0(
    engineHandle: HANDLE,
    key: *const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmCalloutGetById0(
    engineHandle: HANDLE,
    id: u32,
    callout: **FWPM_CALLOUT0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmCalloutGetByKey0(
    engineHandle: HANDLE,
    key: *const Guid,
    callout: **FWPM_CALLOUT0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmCalloutCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*const FWPM_CALLOUT_ENUM_TEMPLATE0,
    enumHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmCalloutEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***FWPM_CALLOUT0,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmCalloutDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmCalloutGetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*?*c_void,
    sidGroup: ?*?*c_void,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmCalloutSetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmCalloutSubscribeChanges0(
    engineHandle: HANDLE,
    subscription: *const FWPM_CALLOUT_SUBSCRIPTION0,
    callback: FWPM_CALLOUT_CHANGE_CALLBACK0,
    context: ?*c_void,
    changeHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmCalloutUnsubscribeChanges0(
    engineHandle: HANDLE,
    changeHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmCalloutSubscriptionsGet0(
    engineHandle: HANDLE,
    entries: ***FWPM_CALLOUT_SUBSCRIPTION0,
    numEntries: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmFilterAdd0(
    engineHandle: HANDLE,
    filter: *const FWPM_FILTER0,
    sd: ?*c_void,
    id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmFilterDeleteById0(
    engineHandle: HANDLE,
    id: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmFilterDeleteByKey0(
    engineHandle: HANDLE,
    key: *const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmFilterGetById0(
    engineHandle: HANDLE,
    id: u64,
    filter: **FWPM_FILTER0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmFilterGetByKey0(
    engineHandle: HANDLE,
    key: *const Guid,
    filter: **FWPM_FILTER0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmFilterCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*const FWPM_FILTER_ENUM_TEMPLATE0,
    enumHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmFilterEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***FWPM_FILTER0,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmFilterDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmFilterGetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*?*c_void,
    sidGroup: ?*?*c_void,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmFilterSetSecurityInfoByKey0(
    engineHandle: HANDLE,
    key: ?*const Guid,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmFilterSubscribeChanges0(
    engineHandle: HANDLE,
    subscription: *const FWPM_FILTER_SUBSCRIPTION0,
    callback: FWPM_FILTER_CHANGE_CALLBACK0,
    context: ?*c_void,
    changeHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmFilterUnsubscribeChanges0(
    engineHandle: HANDLE,
    changeHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmFilterSubscriptionsGet0(
    engineHandle: HANDLE,
    entries: ***FWPM_FILTER_SUBSCRIPTION0,
    numEntries: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmGetAppIdFromFileName0(
    fileName: [*:0]const u16,
    appId: **FWP_BYTE_BLOB,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmBitmapIndexGet0(
    engineHandle: HANDLE,
    fieldId: *const Guid,
    idx: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmBitmapIndexFree0(
    engineHandle: HANDLE,
    fieldId: *const Guid,
    idx: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmIPsecTunnelAdd0(
    engineHandle: HANDLE,
    flags: u32,
    mainModePolicy: ?*const FWPM_PROVIDER_CONTEXT0,
    tunnelPolicy: *const FWPM_PROVIDER_CONTEXT0,
    numFilterConditions: u32,
    filterConditions: [*]const FWPM_FILTER_CONDITION0,
    sd: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmIPsecTunnelAdd1(
    engineHandle: HANDLE,
    flags: u32,
    mainModePolicy: ?*const FWPM_PROVIDER_CONTEXT1,
    tunnelPolicy: *const FWPM_PROVIDER_CONTEXT1,
    numFilterConditions: u32,
    filterConditions: [*]const FWPM_FILTER_CONDITION0,
    keyModKey: ?*const Guid,
    sd: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmIPsecTunnelAdd2(
    engineHandle: HANDLE,
    flags: u32,
    mainModePolicy: ?*const FWPM_PROVIDER_CONTEXT2,
    tunnelPolicy: *const FWPM_PROVIDER_CONTEXT2,
    numFilterConditions: u32,
    filterConditions: [*]const FWPM_FILTER_CONDITION0,
    keyModKey: ?*const Guid,
    sd: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmIPsecTunnelAdd3(
    engineHandle: HANDLE,
    flags: u32,
    mainModePolicy: ?*const FWPM_PROVIDER_CONTEXT3_,
    tunnelPolicy: *const FWPM_PROVIDER_CONTEXT3_,
    numFilterConditions: u32,
    filterConditions: [*]const FWPM_FILTER_CONDITION0,
    keyModKey: ?*const Guid,
    sd: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmIPsecTunnelDeleteByKey0(
    engineHandle: HANDLE,
    key: *const Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecGetStatistics0(
    engineHandle: HANDLE,
    ipsecStatistics: *IPSEC_STATISTICS0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecGetStatistics1(
    engineHandle: HANDLE,
    ipsecStatistics: *IPSEC_STATISTICS1,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextCreate0(
    engineHandle: HANDLE,
    outboundTraffic: *const IPSEC_TRAFFIC0,
    inboundFilterId: ?*u64,
    id: *u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextCreate1(
    engineHandle: HANDLE,
    outboundTraffic: *const IPSEC_TRAFFIC1,
    virtualIfTunnelInfo: ?*const IPSEC_VIRTUAL_IF_TUNNEL_INFO0,
    inboundFilterId: ?*u64,
    id: *u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextDeleteById0(
    engineHandle: HANDLE,
    id: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextGetById0(
    engineHandle: HANDLE,
    id: u64,
    saContext: **IPSEC_SA_CONTEXT0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextGetById1(
    engineHandle: HANDLE,
    id: u64,
    saContext: **IPSEC_SA_CONTEXT1,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextGetSpi0(
    engineHandle: HANDLE,
    id: u64,
    getSpi: *const IPSEC_GETSPI0,
    inboundSpi: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextGetSpi1(
    engineHandle: HANDLE,
    id: u64,
    getSpi: *const IPSEC_GETSPI1,
    inboundSpi: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextSetSpi0(
    engineHandle: HANDLE,
    id: u64,
    getSpi: *const IPSEC_GETSPI1,
    inboundSpi: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextAddInbound0(
    engineHandle: HANDLE,
    id: u64,
    inboundBundle: *const IPSEC_SA_BUNDLE0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextAddOutbound0(
    engineHandle: HANDLE,
    id: u64,
    outboundBundle: *const IPSEC_SA_BUNDLE0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextAddInbound1(
    engineHandle: HANDLE,
    id: u64,
    inboundBundle: *const IPSEC_SA_BUNDLE1,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextAddOutbound1(
    engineHandle: HANDLE,
    id: u64,
    outboundBundle: *const IPSEC_SA_BUNDLE1,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextExpire0(
    engineHandle: HANDLE,
    id: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextUpdate0(
    engineHandle: HANDLE,
    flags: u64,
    newValues: *const IPSEC_SA_CONTEXT1,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*const IPSEC_SA_CONTEXT_ENUM_TEMPLATE0,
    enumHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***IPSEC_SA_CONTEXT0,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextEnum1(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***IPSEC_SA_CONTEXT1,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextSubscribe0(
    engineHandle: HANDLE,
    subscription: *const IPSEC_SA_CONTEXT_SUBSCRIPTION0,
    callback: IPSEC_SA_CONTEXT_CALLBACK0,
    context: ?*c_void,
    eventsHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextUnsubscribe0(
    engineHandle: HANDLE,
    eventsHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaContextSubscriptionsGet0(
    engineHandle: HANDLE,
    entries: ***IPSEC_SA_CONTEXT_SUBSCRIPTION0,
    numEntries: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*const IPSEC_SA_ENUM_TEMPLATE0,
    enumHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***IPSEC_SA_DETAILS0,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaEnum1(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***IPSEC_SA_DETAILS1,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaDbGetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*?*c_void,
    sidGroup: ?*?*c_void,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecSaDbSetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecDospGetStatistics0(
    engineHandle: HANDLE,
    idpStatistics: *IPSEC_DOSP_STATISTICS0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecDospStateCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*const IPSEC_DOSP_STATE_ENUM_TEMPLATE0,
    enumHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecDospStateEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***IPSEC_DOSP_STATE0,
    numEntries: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecDospStateDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecDospGetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*?*c_void,
    sidGroup: ?*?*c_void,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecDospSetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecKeyManagerAddAndRegister0(
    engineHandle: HANDLE,
    keyManager: *const IPSEC_KEY_MANAGER0,
    keyManagerCallbacks: *const IPSEC_KEY_MANAGER_CALLBACKS0,
    keyMgmtHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecKeyManagerUnregisterAndDelete0(
    engineHandle: HANDLE,
    keyMgmtHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecKeyManagersGet0(
    engineHandle: HANDLE,
    entries: ***IPSEC_KEY_MANAGER0,
    numEntries: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecKeyManagerGetSecurityInfoByKey0(
    engineHandle: HANDLE,
    reserved: *const c_void,
    securityInfo: u32,
    sidOwner: ?*?*c_void,
    sidGroup: ?*?*c_void,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IPsecKeyManagerSetSecurityInfoByKey0(
    engineHandle: HANDLE,
    reserved: *const c_void,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IkeextGetStatistics0(
    engineHandle: HANDLE,
    ikeextStatistics: *IKEEXT_STATISTICS0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IkeextGetStatistics1(
    engineHandle: HANDLE,
    ikeextStatistics: *IKEEXT_STATISTICS1,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IkeextSaDeleteById0(
    engineHandle: HANDLE,
    id: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IkeextSaGetById0(
    engineHandle: HANDLE,
    id: u64,
    sa: **IKEEXT_SA_DETAILS0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IkeextSaGetById1(
    engineHandle: HANDLE,
    id: u64,
    saLookupContext: ?*Guid,
    sa: **IKEEXT_SA_DETAILS1,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IkeextSaGetById2(
    engineHandle: HANDLE,
    id: u64,
    saLookupContext: ?*Guid,
    sa: **IKEEXT_SA_DETAILS2,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IkeextSaCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*const IKEEXT_SA_ENUM_TEMPLATE0,
    enumHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IkeextSaEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***IKEEXT_SA_DETAILS0,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IkeextSaEnum1(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***IKEEXT_SA_DETAILS1,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IkeextSaEnum2(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***IKEEXT_SA_DETAILS2,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IkeextSaDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IkeextSaDbGetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*?*c_void,
    sidGroup: ?*?*c_void,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn IkeextSaDbSetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*const FWPM_NET_EVENT_ENUM_TEMPLATE0,
    enumHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***FWPM_NET_EVENT0,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventEnum1(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***FWPM_NET_EVENT1,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventEnum2(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***FWPM_NET_EVENT2,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventEnum3(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***FWPM_NET_EVENT3,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventEnum4(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***FWPM_NET_EVENT4_,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventEnum5(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***FWPM_NET_EVENT5_,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventsGetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*?*c_void,
    sidGroup: ?*?*c_void,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventsSetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventSubscribe0(
    engineHandle: HANDLE,
    subscription: *const FWPM_NET_EVENT_SUBSCRIPTION0,
    callback: FWPM_NET_EVENT_CALLBACK0,
    context: ?*c_void,
    eventsHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventUnsubscribe0(
    engineHandle: HANDLE,
    eventsHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventSubscriptionsGet0(
    engineHandle: HANDLE,
    entries: ***FWPM_NET_EVENT_SUBSCRIPTION0,
    numEntries: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventSubscribe1(
    engineHandle: HANDLE,
    subscription: *const FWPM_NET_EVENT_SUBSCRIPTION0,
    callback: FWPM_NET_EVENT_CALLBACK1,
    context: ?*c_void,
    eventsHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventSubscribe2(
    engineHandle: HANDLE,
    subscription: *const FWPM_NET_EVENT_SUBSCRIPTION0,
    callback: FWPM_NET_EVENT_CALLBACK2,
    context: ?*c_void,
    eventsHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventSubscribe3(
    engineHandle: HANDLE,
    subscription: *const FWPM_NET_EVENT_SUBSCRIPTION0,
    callback: FWPM_NET_EVENT_CALLBACK3,
    context: ?*c_void,
    eventsHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmNetEventSubscribe4(
    engineHandle: HANDLE,
    subscription: *const FWPM_NET_EVENT_SUBSCRIPTION0,
    callback: FWPM_NET_EVENT_CALLBACK4,
    context: ?*c_void,
    eventsHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmSystemPortsGet0(
    engineHandle: HANDLE,
    sysPorts: **FWPM_SYSTEM_PORTS0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmSystemPortsSubscribe0(
    engineHandle: HANDLE,
    reserved: *c_void,
    callback: FWPM_SYSTEM_PORTS_CALLBACK0,
    context: ?*c_void,
    sysPortsHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmSystemPortsUnsubscribe0(
    engineHandle: HANDLE,
    sysPortsHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmConnectionGetById0(
    engineHandle: HANDLE,
    id: u64,
    connection: **FWPM_CONNECTION0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmConnectionEnum0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
    numEntriesRequested: u32,
    entries: ***FWPM_CONNECTION0,
    numEntriesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmConnectionCreateEnumHandle0(
    engineHandle: HANDLE,
    enumTemplate: ?*const FWPM_CONNECTION_ENUM_TEMPLATE0,
    enumHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmConnectionDestroyEnumHandle0(
    engineHandle: HANDLE,
    enumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmConnectionGetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*?*c_void,
    sidGroup: ?*?*c_void,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmConnectionSetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmConnectionSubscribe0(
    engineHandle: HANDLE,
    subscription: *const FWPM_CONNECTION_SUBSCRIPTION0,
    callback: FWPM_CONNECTION_CALLBACK0,
    context: ?*c_void,
    eventsHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmConnectionUnsubscribe0(
    engineHandle: HANDLE,
    eventsHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmvSwitchEventSubscribe0(
    engineHandle: HANDLE,
    subscription: *const FWPM_VSWITCH_EVENT_SUBSCRIPTION0,
    callback: FWPM_VSWITCH_EVENT_CALLBACK0,
    context: ?*c_void,
    subscriptionHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmvSwitchEventUnsubscribe0(
    engineHandle: HANDLE,
    subscriptionHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmvSwitchEventsGetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*?*c_void,
    sidGroup: ?*?*c_void,
    dacl: ?*?*ACL,
    sacl: ?*?*ACL,
    securityDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "fwpuclnt" fn FwpmvSwitchEventsSetSecurityInfo0(
    engineHandle: HANDLE,
    securityInfo: u32,
    sidOwner: ?*const SID,
    sidGroup: ?*const SID,
    dacl: ?*const ACL,
    sacl: ?*const ACL,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (14)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const PWSTR = @import("system_services.zig").PWSTR;
const SID = @import("security.zig").SID;
const SID_AND_ATTRIBUTES = @import("security.zig").SID_AND_ATTRIBUTES;
const FILETIME = @import("windows_programming.zig").FILETIME;
const SEC_WINNT_AUTH_IDENTITY_W = @import("security.zig").SEC_WINNT_AUTH_IDENTITY_W;
const PSTR = @import("system_services.zig").PSTR;
const BOOL = @import("system_services.zig").BOOL;
const in_addr = @import("win_sock.zig").in_addr;
const SCOPE_ID = @import("win_sock.zig").SCOPE_ID;
const in6_addr = @import("win_sock.zig").in6_addr;
const COMPARTMENT_ID = @import("kernel.zig").COMPARTMENT_ID;
const HANDLE = @import("system_services.zig").HANDLE;
const ACL = @import("security.zig").ACL;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = FWPM_PROVIDER_CHANGE_CALLBACK0;
    _ = FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0;
    _ = FWPM_SUBLAYER_CHANGE_CALLBACK0;
    _ = FWPM_CALLOUT_CHANGE_CALLBACK0;
    _ = FWPM_FILTER_CHANGE_CALLBACK0;
    _ = IPSEC_SA_CONTEXT_CALLBACK0;
    _ = IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0;
    _ = IPSEC_KEY_MANAGER_DICTATE_KEY0;
    _ = IPSEC_KEY_MANAGER_NOTIFY_KEY0;
    _ = FWPM_NET_EVENT_CALLBACK0;
    _ = FWPM_NET_EVENT_CALLBACK1;
    _ = FWPM_NET_EVENT_CALLBACK2;
    _ = FWPM_NET_EVENT_CALLBACK3;
    _ = FWPM_NET_EVENT_CALLBACK4;
    _ = FWPM_SYSTEM_PORTS_CALLBACK0;
    _ = FWPM_CONNECTION_CALLBACK0;
    _ = FWPM_VSWITCH_EVENT_CALLBACK0;

    const constant_export_count = 0;
    const type_export_count = 333;
    const enum_value_export_count = 325;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 186;
    const unicode_alias_count = 0;
    const import_count = 14;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

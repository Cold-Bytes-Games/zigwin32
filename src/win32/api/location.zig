//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (23)
//--------------------------------------------------------------------------------
const CLSID_Location_Value = @import("../zig.zig").Guid.initString("E5B8E079-EE6D-4E33-A438-C87F2E959254");
pub const CLSID_Location = &CLSID_Location_Value;

const CLSID_DefaultLocation_Value = @import("../zig.zig").Guid.initString("8B7FBFE0-5CD7-494A-AF8C-283A65707506");
pub const CLSID_DefaultLocation = &CLSID_DefaultLocation_Value;

const CLSID_LatLongReport_Value = @import("../zig.zig").Guid.initString("ED81C073-1F84-4CA8-A161-183C776BC651");
pub const CLSID_LatLongReport = &CLSID_LatLongReport_Value;

const CLSID_CivicAddressReport_Value = @import("../zig.zig").Guid.initString("D39E7BDD-7D05-46B8-8721-80CF035F57D7");
pub const CLSID_CivicAddressReport = &CLSID_CivicAddressReport_Value;

const CLSID_LatLongReportFactory_Value = @import("../zig.zig").Guid.initString("9DCC3CC8-8609-4863-BAD4-03601F4C65E8");
pub const CLSID_LatLongReportFactory = &CLSID_LatLongReportFactory_Value;

const CLSID_CivicAddressReportFactory_Value = @import("../zig.zig").Guid.initString("2A11F42C-3E81-4AD4-9CBE-45579D89671A");
pub const CLSID_CivicAddressReportFactory = &CLSID_CivicAddressReportFactory_Value;

const CLSID_DispLatLongReport_Value = @import("../zig.zig").Guid.initString("7A7C3277-8F84-4636-95B2-EBB5507FF77E");
pub const CLSID_DispLatLongReport = &CLSID_DispLatLongReport_Value;

const CLSID_DispCivicAddressReport_Value = @import("../zig.zig").Guid.initString("4C596AEC-8544-4082-BA9F-EB0A7D8E65C6");
pub const CLSID_DispCivicAddressReport = &CLSID_DispCivicAddressReport_Value;

pub const LOCATION_REPORT_STATUS = extern enum(i32) {
    REPORT_NOT_SUPPORTED = 0,
    REPORT_ERROR = 1,
    REPORT_ACCESS_DENIED = 2,
    REPORT_INITIALIZING = 3,
    REPORT_RUNNING = 4,
};
pub const REPORT_NOT_SUPPORTED = LOCATION_REPORT_STATUS.REPORT_NOT_SUPPORTED;
pub const REPORT_ERROR = LOCATION_REPORT_STATUS.REPORT_ERROR;
pub const REPORT_ACCESS_DENIED = LOCATION_REPORT_STATUS.REPORT_ACCESS_DENIED;
pub const REPORT_INITIALIZING = LOCATION_REPORT_STATUS.REPORT_INITIALIZING;
pub const REPORT_RUNNING = LOCATION_REPORT_STATUS.REPORT_RUNNING;

const IID_ILocationReport_Value = @import("../zig.zig").Guid.initString("C8B7F7EE-75D0-4DB9-B62D-7A0F369CA456");
pub const IID_ILocationReport = &IID_ILocationReport_Value;
pub const ILocationReport = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSensorID: fn(
            self: *const ILocationReport,
            pSensorID: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTimestamp: fn(
            self: *const ILocationReport,
            pCreationTime: *SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const ILocationReport,
            pKey: *const PROPERTYKEY,
            pValue: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReport_GetSensorID(self: *const T, pSensorID: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReport.VTable, self.vtable).GetSensorID(@ptrCast(*const ILocationReport, self), pSensorID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReport_GetTimestamp(self: *const T, pCreationTime: *SYSTEMTIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReport.VTable, self.vtable).GetTimestamp(@ptrCast(*const ILocationReport, self), pCreationTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReport_GetValue(self: *const T, pKey: *const PROPERTYKEY, pValue: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReport.VTable, self.vtable).GetValue(@ptrCast(*const ILocationReport, self), pKey, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILatLongReport_Value = @import("../zig.zig").Guid.initString("7FED806D-0EF8-4F07-80AC-36A0BEAE3134");
pub const IID_ILatLongReport = &IID_ILatLongReport_Value;
pub const ILatLongReport = extern struct {
    pub const VTable = extern struct {
        base: ILocationReport.VTable,
        GetLatitude: fn(
            self: *const ILatLongReport,
            pLatitude: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLongitude: fn(
            self: *const ILatLongReport,
            pLongitude: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorRadius: fn(
            self: *const ILatLongReport,
            pErrorRadius: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAltitude: fn(
            self: *const ILatLongReport,
            pAltitude: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAltitudeError: fn(
            self: *const ILatLongReport,
            pAltitudeError: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ILocationReport.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILatLongReport_GetLatitude(self: *const T, pLatitude: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILatLongReport.VTable, self.vtable).GetLatitude(@ptrCast(*const ILatLongReport, self), pLatitude);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILatLongReport_GetLongitude(self: *const T, pLongitude: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILatLongReport.VTable, self.vtable).GetLongitude(@ptrCast(*const ILatLongReport, self), pLongitude);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILatLongReport_GetErrorRadius(self: *const T, pErrorRadius: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILatLongReport.VTable, self.vtable).GetErrorRadius(@ptrCast(*const ILatLongReport, self), pErrorRadius);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILatLongReport_GetAltitude(self: *const T, pAltitude: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILatLongReport.VTable, self.vtable).GetAltitude(@ptrCast(*const ILatLongReport, self), pAltitude);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILatLongReport_GetAltitudeError(self: *const T, pAltitudeError: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILatLongReport.VTable, self.vtable).GetAltitudeError(@ptrCast(*const ILatLongReport, self), pAltitudeError);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICivicAddressReport_Value = @import("../zig.zig").Guid.initString("C0B19F70-4ADF-445D-87F2-CAD8FD711792");
pub const IID_ICivicAddressReport = &IID_ICivicAddressReport_Value;
pub const ICivicAddressReport = extern struct {
    pub const VTable = extern struct {
        base: ILocationReport.VTable,
        GetAddressLine1: fn(
            self: *const ICivicAddressReport,
            pbstrAddress1: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAddressLine2: fn(
            self: *const ICivicAddressReport,
            pbstrAddress2: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCity: fn(
            self: *const ICivicAddressReport,
            pbstrCity: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStateProvince: fn(
            self: *const ICivicAddressReport,
            pbstrStateProvince: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPostalCode: fn(
            self: *const ICivicAddressReport,
            pbstrPostalCode: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCountryRegion: fn(
            self: *const ICivicAddressReport,
            pbstrCountryRegion: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDetailLevel: fn(
            self: *const ICivicAddressReport,
            pDetailLevel: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ILocationReport.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICivicAddressReport_GetAddressLine1(self: *const T, pbstrAddress1: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICivicAddressReport.VTable, self.vtable).GetAddressLine1(@ptrCast(*const ICivicAddressReport, self), pbstrAddress1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICivicAddressReport_GetAddressLine2(self: *const T, pbstrAddress2: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICivicAddressReport.VTable, self.vtable).GetAddressLine2(@ptrCast(*const ICivicAddressReport, self), pbstrAddress2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICivicAddressReport_GetCity(self: *const T, pbstrCity: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICivicAddressReport.VTable, self.vtable).GetCity(@ptrCast(*const ICivicAddressReport, self), pbstrCity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICivicAddressReport_GetStateProvince(self: *const T, pbstrStateProvince: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICivicAddressReport.VTable, self.vtable).GetStateProvince(@ptrCast(*const ICivicAddressReport, self), pbstrStateProvince);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICivicAddressReport_GetPostalCode(self: *const T, pbstrPostalCode: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICivicAddressReport.VTable, self.vtable).GetPostalCode(@ptrCast(*const ICivicAddressReport, self), pbstrPostalCode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICivicAddressReport_GetCountryRegion(self: *const T, pbstrCountryRegion: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICivicAddressReport.VTable, self.vtable).GetCountryRegion(@ptrCast(*const ICivicAddressReport, self), pbstrCountryRegion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICivicAddressReport_GetDetailLevel(self: *const T, pDetailLevel: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICivicAddressReport.VTable, self.vtable).GetDetailLevel(@ptrCast(*const ICivicAddressReport, self), pDetailLevel);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILocation_Value = @import("../zig.zig").Guid.initString("AB2ECE69-56D9-4F28-B525-DE1B0EE44237");
pub const IID_ILocation = &IID_ILocation_Value;
pub const ILocation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterForReport: fn(
            self: *const ILocation,
            pEvents: ?*ILocationEvents,
            reportType: *const Guid,
            dwRequestedReportInterval: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterForReport: fn(
            self: *const ILocation,
            reportType: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReport: fn(
            self: *const ILocation,
            reportType: *const Guid,
            ppLocationReport: **ILocationReport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReportStatus: fn(
            self: *const ILocation,
            reportType: *const Guid,
            pStatus: *LOCATION_REPORT_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReportInterval: fn(
            self: *const ILocation,
            reportType: *const Guid,
            pMilliseconds: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReportInterval: fn(
            self: *const ILocation,
            reportType: *const Guid,
            millisecondsRequested: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDesiredAccuracy: fn(
            self: *const ILocation,
            reportType: *const Guid,
            pDesiredAccuracy: *LOCATION_DESIRED_ACCURACY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDesiredAccuracy: fn(
            self: *const ILocation,
            reportType: *const Guid,
            desiredAccuracy: LOCATION_DESIRED_ACCURACY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestPermissions: fn(
            self: *const ILocation,
            hParent: HWND,
            pReportTypes: [*]Guid,
            count: u32,
            fModal: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocation_RegisterForReport(self: *const T, pEvents: ?*ILocationEvents, reportType: *const Guid, dwRequestedReportInterval: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocation.VTable, self.vtable).RegisterForReport(@ptrCast(*const ILocation, self), pEvents, reportType, dwRequestedReportInterval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocation_UnregisterForReport(self: *const T, reportType: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocation.VTable, self.vtable).UnregisterForReport(@ptrCast(*const ILocation, self), reportType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocation_GetReport(self: *const T, reportType: *const Guid, ppLocationReport: **ILocationReport) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocation.VTable, self.vtable).GetReport(@ptrCast(*const ILocation, self), reportType, ppLocationReport);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocation_GetReportStatus(self: *const T, reportType: *const Guid, pStatus: *LOCATION_REPORT_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocation.VTable, self.vtable).GetReportStatus(@ptrCast(*const ILocation, self), reportType, pStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocation_GetReportInterval(self: *const T, reportType: *const Guid, pMilliseconds: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocation.VTable, self.vtable).GetReportInterval(@ptrCast(*const ILocation, self), reportType, pMilliseconds);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocation_SetReportInterval(self: *const T, reportType: *const Guid, millisecondsRequested: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocation.VTable, self.vtable).SetReportInterval(@ptrCast(*const ILocation, self), reportType, millisecondsRequested);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocation_GetDesiredAccuracy(self: *const T, reportType: *const Guid, pDesiredAccuracy: *LOCATION_DESIRED_ACCURACY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocation.VTable, self.vtable).GetDesiredAccuracy(@ptrCast(*const ILocation, self), reportType, pDesiredAccuracy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocation_SetDesiredAccuracy(self: *const T, reportType: *const Guid, desiredAccuracy: LOCATION_DESIRED_ACCURACY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocation.VTable, self.vtable).SetDesiredAccuracy(@ptrCast(*const ILocation, self), reportType, desiredAccuracy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocation_RequestPermissions(self: *const T, hParent: HWND, pReportTypes: [*]Guid, count: u32, fModal: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocation.VTable, self.vtable).RequestPermissions(@ptrCast(*const ILocation, self), hParent, pReportTypes, count, fModal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILocationPower_Value = @import("../zig.zig").Guid.initString("193E7729-AB6B-4B12-8617-7596E1BB191C");
pub const IID_ILocationPower = &IID_ILocationPower_Value;
pub const ILocationPower = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Connect: fn(
            self: *const ILocationPower,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: fn(
            self: *const ILocationPower,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationPower_Connect(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationPower.VTable, self.vtable).Connect(@ptrCast(*const ILocationPower, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationPower_Disconnect(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationPower.VTable, self.vtable).Disconnect(@ptrCast(*const ILocationPower, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDefaultLocation_Value = @import("../zig.zig").Guid.initString("A65AF77E-969A-4A2E-8ACA-33BB7CBB1235");
pub const IID_IDefaultLocation = &IID_IDefaultLocation_Value;
pub const IDefaultLocation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetReport: fn(
            self: *const IDefaultLocation,
            reportType: *const Guid,
            pLocationReport: ?*ILocationReport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReport: fn(
            self: *const IDefaultLocation,
            reportType: *const Guid,
            ppLocationReport: **ILocationReport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDefaultLocation_SetReport(self: *const T, reportType: *const Guid, pLocationReport: ?*ILocationReport) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDefaultLocation.VTable, self.vtable).SetReport(@ptrCast(*const IDefaultLocation, self), reportType, pLocationReport);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDefaultLocation_GetReport(self: *const T, reportType: *const Guid, ppLocationReport: **ILocationReport) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDefaultLocation.VTable, self.vtable).GetReport(@ptrCast(*const IDefaultLocation, self), reportType, ppLocationReport);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILocationEvents_Value = @import("../zig.zig").Guid.initString("CAE02BBF-798B-4508-A207-35A7906DC73D");
pub const IID_ILocationEvents = &IID_ILocationEvents_Value;
pub const ILocationEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnLocationChanged: fn(
            self: *const ILocationEvents,
            reportType: *const Guid,
            pLocationReport: ?*ILocationReport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnStatusChanged: fn(
            self: *const ILocationEvents,
            reportType: *const Guid,
            newStatus: LOCATION_REPORT_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationEvents_OnLocationChanged(self: *const T, reportType: *const Guid, pLocationReport: ?*ILocationReport) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationEvents.VTable, self.vtable).OnLocationChanged(@ptrCast(*const ILocationEvents, self), reportType, pLocationReport);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationEvents_OnStatusChanged(self: *const T, reportType: *const Guid, newStatus: LOCATION_REPORT_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationEvents.VTable, self.vtable).OnStatusChanged(@ptrCast(*const ILocationEvents, self), reportType, newStatus);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDispLatLongReport_Value = @import("../zig.zig").Guid.initString("8AE32723-389B-4A11-9957-5BDD48FC9617");
pub const IID_IDispLatLongReport = &IID_IDispLatLongReport_Value;
pub const IDispLatLongReport = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Latitude: fn(
            self: *const IDispLatLongReport,
            pVal: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Longitude: fn(
            self: *const IDispLatLongReport,
            pVal: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ErrorRadius: fn(
            self: *const IDispLatLongReport,
            pVal: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Altitude: fn(
            self: *const IDispLatLongReport,
            pVal: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AltitudeError: fn(
            self: *const IDispLatLongReport,
            pVal: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Timestamp: fn(
            self: *const IDispLatLongReport,
            pVal: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispLatLongReport_get_Latitude(self: *const T, pVal: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispLatLongReport.VTable, self.vtable).get_Latitude(@ptrCast(*const IDispLatLongReport, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispLatLongReport_get_Longitude(self: *const T, pVal: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispLatLongReport.VTable, self.vtable).get_Longitude(@ptrCast(*const IDispLatLongReport, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispLatLongReport_get_ErrorRadius(self: *const T, pVal: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispLatLongReport.VTable, self.vtable).get_ErrorRadius(@ptrCast(*const IDispLatLongReport, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispLatLongReport_get_Altitude(self: *const T, pVal: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispLatLongReport.VTable, self.vtable).get_Altitude(@ptrCast(*const IDispLatLongReport, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispLatLongReport_get_AltitudeError(self: *const T, pVal: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispLatLongReport.VTable, self.vtable).get_AltitudeError(@ptrCast(*const IDispLatLongReport, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispLatLongReport_get_Timestamp(self: *const T, pVal: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispLatLongReport.VTable, self.vtable).get_Timestamp(@ptrCast(*const IDispLatLongReport, self), pVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDispCivicAddressReport_Value = @import("../zig.zig").Guid.initString("16FF1A34-9E30-42C3-B44D-E22513B5767A");
pub const IID_IDispCivicAddressReport = &IID_IDispCivicAddressReport_Value;
pub const IDispCivicAddressReport = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_AddressLine1: fn(
            self: *const IDispCivicAddressReport,
            pAddress1: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AddressLine2: fn(
            self: *const IDispCivicAddressReport,
            pAddress2: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_City: fn(
            self: *const IDispCivicAddressReport,
            pCity: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_StateProvince: fn(
            self: *const IDispCivicAddressReport,
            pStateProvince: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PostalCode: fn(
            self: *const IDispCivicAddressReport,
            pPostalCode: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CountryRegion: fn(
            self: *const IDispCivicAddressReport,
            pCountryRegion: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DetailLevel: fn(
            self: *const IDispCivicAddressReport,
            pDetailLevel: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Timestamp: fn(
            self: *const IDispCivicAddressReport,
            pVal: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispCivicAddressReport_get_AddressLine1(self: *const T, pAddress1: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispCivicAddressReport.VTable, self.vtable).get_AddressLine1(@ptrCast(*const IDispCivicAddressReport, self), pAddress1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispCivicAddressReport_get_AddressLine2(self: *const T, pAddress2: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispCivicAddressReport.VTable, self.vtable).get_AddressLine2(@ptrCast(*const IDispCivicAddressReport, self), pAddress2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispCivicAddressReport_get_City(self: *const T, pCity: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispCivicAddressReport.VTable, self.vtable).get_City(@ptrCast(*const IDispCivicAddressReport, self), pCity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispCivicAddressReport_get_StateProvince(self: *const T, pStateProvince: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispCivicAddressReport.VTable, self.vtable).get_StateProvince(@ptrCast(*const IDispCivicAddressReport, self), pStateProvince);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispCivicAddressReport_get_PostalCode(self: *const T, pPostalCode: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispCivicAddressReport.VTable, self.vtable).get_PostalCode(@ptrCast(*const IDispCivicAddressReport, self), pPostalCode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispCivicAddressReport_get_CountryRegion(self: *const T, pCountryRegion: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispCivicAddressReport.VTable, self.vtable).get_CountryRegion(@ptrCast(*const IDispCivicAddressReport, self), pCountryRegion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispCivicAddressReport_get_DetailLevel(self: *const T, pDetailLevel: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispCivicAddressReport.VTable, self.vtable).get_DetailLevel(@ptrCast(*const IDispCivicAddressReport, self), pDetailLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispCivicAddressReport_get_Timestamp(self: *const T, pVal: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispCivicAddressReport.VTable, self.vtable).get_Timestamp(@ptrCast(*const IDispCivicAddressReport, self), pVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILocationReportFactory_Value = @import("../zig.zig").Guid.initString("2DAEC322-90B2-47E4-BB08-0DA841935A6B");
pub const IID_ILocationReportFactory = &IID_ILocationReportFactory_Value;
pub const ILocationReportFactory = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        ListenForReports: fn(
            self: *const ILocationReportFactory,
            requestedReportInterval: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopListeningForReports: fn(
            self: *const ILocationReportFactory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Status: fn(
            self: *const ILocationReportFactory,
            pVal: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ReportInterval: fn(
            self: *const ILocationReportFactory,
            pMilliseconds: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ReportInterval: fn(
            self: *const ILocationReportFactory,
            millisecondsRequested: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DesiredAccuracy: fn(
            self: *const ILocationReportFactory,
            pDesiredAccuracy: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DesiredAccuracy: fn(
            self: *const ILocationReportFactory,
            desiredAccuracy: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestPermissions: fn(
            self: *const ILocationReportFactory,
            hWnd: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReportFactory_ListenForReports(self: *const T, requestedReportInterval: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReportFactory.VTable, self.vtable).ListenForReports(@ptrCast(*const ILocationReportFactory, self), requestedReportInterval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReportFactory_StopListeningForReports(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReportFactory.VTable, self.vtable).StopListeningForReports(@ptrCast(*const ILocationReportFactory, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReportFactory_get_Status(self: *const T, pVal: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReportFactory.VTable, self.vtable).get_Status(@ptrCast(*const ILocationReportFactory, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReportFactory_get_ReportInterval(self: *const T, pMilliseconds: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReportFactory.VTable, self.vtable).get_ReportInterval(@ptrCast(*const ILocationReportFactory, self), pMilliseconds);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReportFactory_put_ReportInterval(self: *const T, millisecondsRequested: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReportFactory.VTable, self.vtable).put_ReportInterval(@ptrCast(*const ILocationReportFactory, self), millisecondsRequested);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReportFactory_get_DesiredAccuracy(self: *const T, pDesiredAccuracy: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReportFactory.VTable, self.vtable).get_DesiredAccuracy(@ptrCast(*const ILocationReportFactory, self), pDesiredAccuracy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReportFactory_put_DesiredAccuracy(self: *const T, desiredAccuracy: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReportFactory.VTable, self.vtable).put_DesiredAccuracy(@ptrCast(*const ILocationReportFactory, self), desiredAccuracy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILocationReportFactory_RequestPermissions(self: *const T, hWnd: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILocationReportFactory.VTable, self.vtable).RequestPermissions(@ptrCast(*const ILocationReportFactory, self), hWnd);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILatLongReportFactory_Value = @import("../zig.zig").Guid.initString("3F0804CB-B114-447D-83DD-390174EBB082");
pub const IID_ILatLongReportFactory = &IID_ILatLongReportFactory_Value;
pub const ILatLongReportFactory = extern struct {
    pub const VTable = extern struct {
        base: ILocationReportFactory.VTable,
        get_LatLongReport: fn(
            self: *const ILatLongReportFactory,
            pVal: **IDispLatLongReport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ILocationReportFactory.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILatLongReportFactory_get_LatLongReport(self: *const T, pVal: **IDispLatLongReport) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILatLongReportFactory.VTable, self.vtable).get_LatLongReport(@ptrCast(*const ILatLongReportFactory, self), pVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICivicAddressReportFactory_Value = @import("../zig.zig").Guid.initString("BF773B93-C64F-4BEE-BEB2-67C0B8DF66E0");
pub const IID_ICivicAddressReportFactory = &IID_ICivicAddressReportFactory_Value;
pub const ICivicAddressReportFactory = extern struct {
    pub const VTable = extern struct {
        base: ILocationReportFactory.VTable,
        get_CivicAddressReport: fn(
            self: *const ICivicAddressReportFactory,
            pVal: **IDispCivicAddressReport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ILocationReportFactory.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICivicAddressReportFactory_get_CivicAddressReport(self: *const T, pVal: **IDispCivicAddressReport) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICivicAddressReportFactory.VTable, self.vtable).get_CivicAddressReport(@ptrCast(*const ICivicAddressReportFactory, self), pVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID__ILatLongReportFactoryEvents_Value = @import("../zig.zig").Guid.initString("16EE6CB7-AB3C-424B-849F-269BE551FCBC");
pub const IID__ILatLongReportFactoryEvents = &IID__ILatLongReportFactoryEvents_Value;
pub const _ILatLongReportFactoryEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID__ICivicAddressReportFactoryEvents_Value = @import("../zig.zig").Guid.initString("C96039FF-72EC-4617-89BD-84D88BEDC722");
pub const IID__ICivicAddressReportFactoryEvents = &IID__ICivicAddressReportFactoryEvents_Value;
pub const _ICivicAddressReportFactoryEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (11)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const IDispatch = @import("automation.zig").IDispatch;
const IUnknown = @import("com.zig").IUnknown;
const SYSTEMTIME = @import("windows_programming.zig").SYSTEMTIME;
const HRESULT = @import("com.zig").HRESULT;
const PROPERTYKEY = @import("windows_properties_system.zig").PROPERTYKEY;
const PROPVARIANT = @import("structured_storage.zig").PROPVARIANT;
const BSTR = @import("automation.zig").BSTR;
const LOCATION_DESIRED_ACCURACY = @import("sensors.zig").LOCATION_DESIRED_ACCURACY;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;

test {
    const constant_export_count = 0;
    const type_export_count = 15;
    const enum_value_export_count = 5;
    const com_iface_id_export_count = 14;
    const com_class_id_export_count = 8;
    const func_export_count = 0;
    const unicode_alias_count = 0;
    const import_count = 11;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

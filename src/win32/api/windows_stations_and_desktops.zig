//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (4)
//--------------------------------------------------------------------------------
pub const GetUserObjectInformation_nIndex = extern enum(u32) {
    FLAGS = 1,
    HEAPSIZE = 5,
    IO = 6,
    NAME = 2,
    TYPE = 3,
    USER_SID = 4,
};
pub const UOI_FLAGS = GetUserObjectInformation_nIndex.FLAGS;
pub const UOI_HEAPSIZE = GetUserObjectInformation_nIndex.HEAPSIZE;
pub const UOI_IO = GetUserObjectInformation_nIndex.IO;
pub const UOI_NAME = GetUserObjectInformation_nIndex.NAME;
pub const UOI_TYPE = GetUserObjectInformation_nIndex.TYPE;
pub const UOI_USER_SID = GetUserObjectInformation_nIndex.USER_SID;

// TODO: this type has a FreeFunc 'CloseWindowStation', what can Zig do with this information?
pub const HWINSTA = ?*c_void;

// TODO: this type has a FreeFunc 'CloseDesktop', what can Zig do with this information?
pub const HDESK = ?*c_void;

pub const USEROBJECTFLAGS = extern struct {
    fInherit: BOOL,
    fReserved: BOOL,
    dwFlags: u32,
};


//--------------------------------------------------------------------------------
// Section: Functions (27)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn CreateDesktopA(
    lpszDesktop: [*:0]const u8,
    lpszDevice: [*:0]const u8,
    pDevmode: *DEVMODEA,
    dwFlags: u32,
    dwDesiredAccess: u32,
    lpsa: ?*SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) HDESK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn CreateDesktopW(
    lpszDesktop: [*:0]const u16,
    lpszDevice: [*:0]const u16,
    pDevmode: *DEVMODEW,
    dwFlags: u32,
    dwDesiredAccess: u32,
    lpsa: ?*SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) HDESK;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USER32" fn CreateDesktopExA(
    lpszDesktop: [*:0]const u8,
    lpszDevice: [*:0]const u8,
    pDevmode: *DEVMODEA,
    dwFlags: u32,
    dwDesiredAccess: u32,
    lpsa: ?*SECURITY_ATTRIBUTES,
    ulHeapSize: u32,
    pvoid: *c_void,
) callconv(@import("std").os.windows.WINAPI) HDESK;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "USER32" fn CreateDesktopExW(
    lpszDesktop: [*:0]const u16,
    lpszDevice: [*:0]const u16,
    pDevmode: *DEVMODEW,
    dwFlags: u32,
    dwDesiredAccess: u32,
    lpsa: ?*SECURITY_ATTRIBUTES,
    ulHeapSize: u32,
    pvoid: *c_void,
) callconv(@import("std").os.windows.WINAPI) HDESK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn OpenDesktopA(
    lpszDesktop: [*:0]const u8,
    dwFlags: u32,
    fInherit: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) HDESK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn OpenDesktopW(
    lpszDesktop: [*:0]const u16,
    dwFlags: u32,
    fInherit: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) HDESK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn OpenInputDesktop(
    dwFlags: u32,
    fInherit: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) HDESK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn EnumDesktopsA(
    hwinsta: HWINSTA,
    lpEnumFunc: DESKTOPENUMPROCA,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn EnumDesktopsW(
    hwinsta: HWINSTA,
    lpEnumFunc: DESKTOPENUMPROCW,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn EnumDesktopWindows(
    hDesktop: HDESK,
    lpfn: WNDENUMPROC,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn SwitchDesktop(
    hDesktop: HDESK,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn SetThreadDesktop(
    hDesktop: HDESK,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn CloseDesktop(
    hDesktop: HDESK,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetThreadDesktop(
    dwThreadId: u32,
) callconv(@import("std").os.windows.WINAPI) HDESK;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn CreateWindowStationA(
    lpwinsta: ?[*:0]const u8,
    dwFlags: u32,
    dwDesiredAccess: u32,
    lpsa: ?*SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) HWINSTA;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn CreateWindowStationW(
    lpwinsta: ?[*:0]const u16,
    dwFlags: u32,
    dwDesiredAccess: u32,
    lpsa: ?*SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) HWINSTA;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn OpenWindowStationA(
    lpszWinSta: [*:0]const u8,
    fInherit: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) HWINSTA;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn OpenWindowStationW(
    lpszWinSta: [*:0]const u16,
    fInherit: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) HWINSTA;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn EnumWindowStationsA(
    lpEnumFunc: WINSTAENUMPROCA,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn EnumWindowStationsW(
    lpEnumFunc: WINSTAENUMPROCW,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn CloseWindowStation(
    hWinSta: HWINSTA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn SetProcessWindowStation(
    hWinSta: HWINSTA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetProcessWindowStation(
) callconv(@import("std").os.windows.WINAPI) HWINSTA;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetUserObjectInformationA(
    hObj: HANDLE,
    nIndex: GetUserObjectInformation_nIndex,
    pvInfo: ?[*]u8,
    nLength: u32,
    lpnLengthNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn GetUserObjectInformationW(
    hObj: HANDLE,
    nIndex: GetUserObjectInformation_nIndex,
    pvInfo: ?[*]u8,
    nLength: u32,
    lpnLengthNeeded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn SetUserObjectInformationA(
    hObj: HANDLE,
    nIndex: i32,
    pvInfo: [*]u8,
    nLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USER32" fn SetUserObjectInformationW(
    hObj: HANDLE,
    nIndex: i32,
    pvInfo: [*]u8,
    nLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (9)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const CreateDesktop = CreateDesktopA;
        pub const CreateDesktopEx = CreateDesktopExA;
        pub const OpenDesktop = OpenDesktopA;
        pub const EnumDesktops = EnumDesktopsA;
        pub const CreateWindowStation = CreateWindowStationA;
        pub const OpenWindowStation = OpenWindowStationA;
        pub const EnumWindowStations = EnumWindowStationsA;
        pub const GetUserObjectInformation = GetUserObjectInformationA;
        pub const SetUserObjectInformation = SetUserObjectInformationA;
    },
    .wide => struct {
        pub const CreateDesktop = CreateDesktopW;
        pub const CreateDesktopEx = CreateDesktopExW;
        pub const OpenDesktop = OpenDesktopW;
        pub const EnumDesktops = EnumDesktopsW;
        pub const CreateWindowStation = CreateWindowStationW;
        pub const OpenWindowStation = OpenWindowStationW;
        pub const EnumWindowStations = EnumWindowStationsW;
        pub const GetUserObjectInformation = GetUserObjectInformationW;
        pub const SetUserObjectInformation = SetUserObjectInformationW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const CreateDesktop = *opaque{};
        pub const CreateDesktopEx = *opaque{};
        pub const OpenDesktop = *opaque{};
        pub const EnumDesktops = *opaque{};
        pub const CreateWindowStation = *opaque{};
        pub const OpenWindowStation = *opaque{};
        pub const EnumWindowStations = *opaque{};
        pub const GetUserObjectInformation = *opaque{};
        pub const SetUserObjectInformation = *opaque{};
    } else struct {
        pub const CreateDesktop = @compileError("'CreateDesktop' requires that UNICODE be set to true or false in the root module");
        pub const CreateDesktopEx = @compileError("'CreateDesktopEx' requires that UNICODE be set to true or false in the root module");
        pub const OpenDesktop = @compileError("'OpenDesktop' requires that UNICODE be set to true or false in the root module");
        pub const EnumDesktops = @compileError("'EnumDesktops' requires that UNICODE be set to true or false in the root module");
        pub const CreateWindowStation = @compileError("'CreateWindowStation' requires that UNICODE be set to true or false in the root module");
        pub const OpenWindowStation = @compileError("'OpenWindowStation' requires that UNICODE be set to true or false in the root module");
        pub const EnumWindowStations = @compileError("'EnumWindowStations' requires that UNICODE be set to true or false in the root module");
        pub const GetUserObjectInformation = @compileError("'GetUserObjectInformation' requires that UNICODE be set to true or false in the root module");
        pub const SetUserObjectInformation = @compileError("'SetUserObjectInformation' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (13)
//--------------------------------------------------------------------------------
const LPARAM = @import("windows_and_messaging.zig").LPARAM;
const PWSTR = @import("system_services.zig").PWSTR;
const DEVMODEW = @import("display_devices.zig").DEVMODEW;
const DESKTOPENUMPROCA = @import("windows_and_messaging.zig").DESKTOPENUMPROCA;
const SECURITY_ATTRIBUTES = @import("system_services.zig").SECURITY_ATTRIBUTES;
const PSTR = @import("system_services.zig").PSTR;
const DESKTOPENUMPROCW = @import("windows_and_messaging.zig").DESKTOPENUMPROCW;
const BOOL = @import("system_services.zig").BOOL;
const DEVMODEA = @import("xps.zig").DEVMODEA;
const HANDLE = @import("system_services.zig").HANDLE;
const WINSTAENUMPROCW = @import("windows_and_messaging.zig").WINSTAENUMPROCW;
const WNDENUMPROC = @import("windows_and_messaging.zig").WNDENUMPROC;
const WINSTAENUMPROCA = @import("windows_and_messaging.zig").WINSTAENUMPROCA;

test {
    const constant_export_count = 0;
    const type_export_count = 4;
    const enum_value_export_count = 6;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 27;
    const unicode_alias_count = 9;
    const import_count = 13;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

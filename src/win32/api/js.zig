//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (2)
//--------------------------------------------------------------------------------
pub const JS_SOURCE_CONTEXT_NONE : u64 = 18446744073709551615;
pub const JsRuntimeVersionEdge : i32 = -1;

//--------------------------------------------------------------------------------
// Section: Types (11)
//--------------------------------------------------------------------------------
pub const JsRuntimeVersion = extern enum(i32) {
    JsRuntimeVersion10 = 0,
    JsRuntimeVersion11 = 1,
    JsRuntimeVersionEdge = -1,
};
// TODO: enum 'JsRuntimeVersion' has known value symbol conflicts, skipping the value aliases

pub const JsErrorCode = extern enum(u32) {
    JsNoError = 0,
    JsErrorCategoryUsage = 65536,
    JsErrorInvalidArgument = 65537,
    JsErrorNullArgument = 65538,
    JsErrorNoCurrentContext = 65539,
    JsErrorInExceptionState = 65540,
    JsErrorNotImplemented = 65541,
    JsErrorWrongThread = 65542,
    JsErrorRuntimeInUse = 65543,
    JsErrorBadSerializedScript = 65544,
    JsErrorInDisabledState = 65545,
    JsErrorCannotDisableExecution = 65546,
    JsErrorHeapEnumInProgress = 65547,
    JsErrorArgumentNotObject = 65548,
    JsErrorInProfileCallback = 65549,
    JsErrorInThreadServiceCallback = 65550,
    JsErrorCannotSerializeDebugScript = 65551,
    JsErrorAlreadyDebuggingContext = 65552,
    JsErrorAlreadyProfilingContext = 65553,
    JsErrorIdleNotEnabled = 65554,
    JsErrorCategoryEngine = 131072,
    JsErrorOutOfMemory = 131073,
    JsErrorCategoryScript = 196608,
    JsErrorScriptException = 196609,
    JsErrorScriptCompile = 196610,
    JsErrorScriptTerminated = 196611,
    JsErrorScriptEvalDisabled = 196612,
    JsErrorCategoryFatal = 262144,
    JsErrorFatal = 262145,
};
pub const JsNoError = JsErrorCode.JsNoError;
pub const JsErrorCategoryUsage = JsErrorCode.JsErrorCategoryUsage;
pub const JsErrorInvalidArgument = JsErrorCode.JsErrorInvalidArgument;
pub const JsErrorNullArgument = JsErrorCode.JsErrorNullArgument;
pub const JsErrorNoCurrentContext = JsErrorCode.JsErrorNoCurrentContext;
pub const JsErrorInExceptionState = JsErrorCode.JsErrorInExceptionState;
pub const JsErrorNotImplemented = JsErrorCode.JsErrorNotImplemented;
pub const JsErrorWrongThread = JsErrorCode.JsErrorWrongThread;
pub const JsErrorRuntimeInUse = JsErrorCode.JsErrorRuntimeInUse;
pub const JsErrorBadSerializedScript = JsErrorCode.JsErrorBadSerializedScript;
pub const JsErrorInDisabledState = JsErrorCode.JsErrorInDisabledState;
pub const JsErrorCannotDisableExecution = JsErrorCode.JsErrorCannotDisableExecution;
pub const JsErrorHeapEnumInProgress = JsErrorCode.JsErrorHeapEnumInProgress;
pub const JsErrorArgumentNotObject = JsErrorCode.JsErrorArgumentNotObject;
pub const JsErrorInProfileCallback = JsErrorCode.JsErrorInProfileCallback;
pub const JsErrorInThreadServiceCallback = JsErrorCode.JsErrorInThreadServiceCallback;
pub const JsErrorCannotSerializeDebugScript = JsErrorCode.JsErrorCannotSerializeDebugScript;
pub const JsErrorAlreadyDebuggingContext = JsErrorCode.JsErrorAlreadyDebuggingContext;
pub const JsErrorAlreadyProfilingContext = JsErrorCode.JsErrorAlreadyProfilingContext;
pub const JsErrorIdleNotEnabled = JsErrorCode.JsErrorIdleNotEnabled;
pub const JsErrorCategoryEngine = JsErrorCode.JsErrorCategoryEngine;
pub const JsErrorOutOfMemory = JsErrorCode.JsErrorOutOfMemory;
pub const JsErrorCategoryScript = JsErrorCode.JsErrorCategoryScript;
pub const JsErrorScriptException = JsErrorCode.JsErrorScriptException;
pub const JsErrorScriptCompile = JsErrorCode.JsErrorScriptCompile;
pub const JsErrorScriptTerminated = JsErrorCode.JsErrorScriptTerminated;
pub const JsErrorScriptEvalDisabled = JsErrorCode.JsErrorScriptEvalDisabled;
pub const JsErrorCategoryFatal = JsErrorCode.JsErrorCategoryFatal;
pub const JsErrorFatal = JsErrorCode.JsErrorFatal;

pub const JsRuntimeAttributes = extern enum(i32) {
    JsRuntimeAttributeNone = 0,
    JsRuntimeAttributeDisableBackgroundWork = 1,
    JsRuntimeAttributeAllowScriptInterrupt = 2,
    JsRuntimeAttributeEnableIdleProcessing = 4,
    JsRuntimeAttributeDisableNativeCodeGeneration = 8,
    JsRuntimeAttributeDisableEval = 16,
};
pub const JsRuntimeAttributeNone = JsRuntimeAttributes.JsRuntimeAttributeNone;
pub const JsRuntimeAttributeDisableBackgroundWork = JsRuntimeAttributes.JsRuntimeAttributeDisableBackgroundWork;
pub const JsRuntimeAttributeAllowScriptInterrupt = JsRuntimeAttributes.JsRuntimeAttributeAllowScriptInterrupt;
pub const JsRuntimeAttributeEnableIdleProcessing = JsRuntimeAttributes.JsRuntimeAttributeEnableIdleProcessing;
pub const JsRuntimeAttributeDisableNativeCodeGeneration = JsRuntimeAttributes.JsRuntimeAttributeDisableNativeCodeGeneration;
pub const JsRuntimeAttributeDisableEval = JsRuntimeAttributes.JsRuntimeAttributeDisableEval;

pub const JsMemoryEventType = extern enum(i32) {
    JsMemoryAllocate = 0,
    JsMemoryFree = 1,
    JsMemoryFailure = 2,
};
pub const JsMemoryAllocate = JsMemoryEventType.JsMemoryAllocate;
pub const JsMemoryFree = JsMemoryEventType.JsMemoryFree;
pub const JsMemoryFailure = JsMemoryEventType.JsMemoryFailure;

pub const JsMemoryAllocationCallback = fn(
    callbackState: ?*c_void,
    allocationEvent: JsMemoryEventType,
    allocationSize: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) bool;

pub const JsBeforeCollectCallback = fn(
    callbackState: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const JsBackgroundWorkItemCallback = fn(
    callbackState: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const JsThreadServiceCallback = fn(
    callback: JsBackgroundWorkItemCallback,
    callbackState: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) bool;

pub const JsValueType = extern enum(i32) {
    JsUndefined = 0,
    JsNull = 1,
    JsNumber = 2,
    JsString = 3,
    JsBoolean = 4,
    JsObject = 5,
    JsFunction = 6,
    JsError = 7,
    JsArray = 8,
};
pub const JsUndefined = JsValueType.JsUndefined;
pub const JsNull = JsValueType.JsNull;
pub const JsNumber = JsValueType.JsNumber;
pub const JsString = JsValueType.JsString;
pub const JsBoolean = JsValueType.JsBoolean;
pub const JsObject = JsValueType.JsObject;
pub const JsFunction = JsValueType.JsFunction;
pub const JsError = JsValueType.JsError;
pub const JsArray = JsValueType.JsArray;

pub const JsFinalizeCallback = fn(
    data: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const JsNativeFunction = fn(
    callee: *c_void,
    isConstructCall: bool,
    arguments: **c_void,
    argumentCount: u16,
    callbackState: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;


//--------------------------------------------------------------------------------
// Section: Functions (85)
//--------------------------------------------------------------------------------
pub extern "chakra" fn JsCreateRuntime(
    attributes: JsRuntimeAttributes,
    runtimeVersion: JsRuntimeVersion,
    threadService: ?JsThreadServiceCallback,
    runtime: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsCollectGarbage(
    runtime: *c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsDisposeRuntime(
    runtime: *c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetRuntimeMemoryUsage(
    runtime: *c_void,
    memoryUsage: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetRuntimeMemoryLimit(
    runtime: *c_void,
    memoryLimit: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsSetRuntimeMemoryLimit(
    runtime: *c_void,
    memoryLimit: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsSetRuntimeMemoryAllocationCallback(
    runtime: *c_void,
    callbackState: ?*c_void,
    allocationCallback: JsMemoryAllocationCallback,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsSetRuntimeBeforeCollectCallback(
    runtime: *c_void,
    callbackState: ?*c_void,
    beforeCollectCallback: JsBeforeCollectCallback,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsAddRef(
    ref: *c_void,
    count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsRelease(
    ref: *c_void,
    count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsCreateContext(
    runtime: *c_void,
    debugApplication: *IDebugApplication32,
    newContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetCurrentContext(
    currentContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsSetCurrentContext(
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetRuntime(
    context: *c_void,
    runtime: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsStartDebugging(
    debugApplication: *IDebugApplication32,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsIdle(
    nextIdleTick: ?*u32,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsParseScript(
    script: [*:0]const u16,
    sourceContext: ?*c_void,
    sourceUrl: [*:0]const u16,
    result: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsRunScript(
    script: [*:0]const u16,
    sourceContext: ?*c_void,
    sourceUrl: [*:0]const u16,
    result: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsSerializeScript(
    script: [*:0]const u16,
    buffer: ?[*:0]u8,
    bufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsParseSerializedScript(
    script: [*:0]const u16,
    buffer: *u8,
    sourceContext: ?*c_void,
    sourceUrl: [*:0]const u16,
    result: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsRunSerializedScript(
    script: [*:0]const u16,
    buffer: *u8,
    sourceContext: ?*c_void,
    sourceUrl: [*:0]const u16,
    result: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetPropertyIdFromName(
    name: [*:0]const u16,
    propertyId: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetPropertyNameFromId(
    propertyId: *c_void,
    name: *const *const u16,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetUndefinedValue(
    undefinedValue: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetNullValue(
    nullValue: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetTrueValue(
    trueValue: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetFalseValue(
    falseValue: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsBoolToBoolean(
    value: u8,
    booleanValue: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsBooleanToBool(
    value: *c_void,
    boolValue: *bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsConvertValueToBoolean(
    value: *c_void,
    booleanValue: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetValueType(
    value: *c_void,
    type: *JsValueType,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsDoubleToNumber(
    doubleValue: f64,
    value: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsIntToNumber(
    intValue: i32,
    value: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsNumberToDouble(
    value: *c_void,
    doubleValue: *f64,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsConvertValueToNumber(
    value: *c_void,
    numberValue: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetStringLength(
    stringValue: *c_void,
    length: *i32,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsPointerToString(
    stringValue: [*:0]const u16,
    stringLength: ?*c_void,
    value: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsStringToPointer(
    value: *c_void,
    stringValue: *const *const u16,
    stringLength: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsConvertValueToString(
    value: *c_void,
    stringValue: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsVariantToValue(
    variant: *VARIANT,
    value: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsValueToVariant(
    object: *c_void,
    variant: *VARIANT,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetGlobalObject(
    globalObject: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsCreateObject(
    object: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsCreateExternalObject(
    data: ?*c_void,
    finalizeCallback: ?JsFinalizeCallback,
    object: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsConvertValueToObject(
    value: *c_void,
    object: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetPrototype(
    object: *c_void,
    prototypeObject: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsSetPrototype(
    object: *c_void,
    prototypeObject: *c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetExtensionAllowed(
    object: *c_void,
    value: *bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsPreventExtension(
    object: *c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetProperty(
    object: *c_void,
    propertyId: *c_void,
    value: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetOwnPropertyDescriptor(
    object: *c_void,
    propertyId: *c_void,
    propertyDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetOwnPropertyNames(
    object: *c_void,
    propertyNames: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsSetProperty(
    object: *c_void,
    propertyId: *c_void,
    value: *c_void,
    useStrictRules: u8,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsHasProperty(
    object: *c_void,
    propertyId: *c_void,
    hasProperty: *bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsDeleteProperty(
    object: *c_void,
    propertyId: *c_void,
    useStrictRules: u8,
    result: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsDefineProperty(
    object: *c_void,
    propertyId: *c_void,
    propertyDescriptor: *c_void,
    result: *bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsHasIndexedProperty(
    object: *c_void,
    index: *c_void,
    result: *bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetIndexedProperty(
    object: *c_void,
    index: *c_void,
    result: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsSetIndexedProperty(
    object: *c_void,
    index: *c_void,
    value: *c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsDeleteIndexedProperty(
    object: *c_void,
    index: *c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsEquals(
    object1: *c_void,
    object2: *c_void,
    result: *bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsStrictEquals(
    object1: *c_void,
    object2: *c_void,
    result: *bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsHasExternalData(
    object: *c_void,
    value: *bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetExternalData(
    object: *c_void,
    externalData: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsSetExternalData(
    object: *c_void,
    externalData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsCreateArray(
    length: u32,
    result: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsCallFunction(
    function: *c_void,
    arguments: [*]*c_void,
    argumentCount: u16,
    result: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsConstructObject(
    function: *c_void,
    arguments: [*]*c_void,
    argumentCount: u16,
    result: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsCreateFunction(
    nativeFunction: JsNativeFunction,
    callbackState: ?*c_void,
    function: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsCreateError(
    message: *c_void,
    @"error": **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsCreateRangeError(
    message: *c_void,
    @"error": **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsCreateReferenceError(
    message: *c_void,
    @"error": **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsCreateSyntaxError(
    message: *c_void,
    @"error": **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsCreateTypeError(
    message: *c_void,
    @"error": **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsCreateURIError(
    message: *c_void,
    @"error": **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsHasException(
    hasException: *bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsGetAndClearException(
    exception: **c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsSetException(
    exception: *c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsDisableRuntimeExecution(
    runtime: *c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsEnableRuntimeExecution(
    runtime: *c_void,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsIsRuntimeExecutionDisabled(
    runtime: *c_void,
    isDisabled: *bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsStartProfiling(
    callback: *IActiveScriptProfilerCallback,
    eventMask: __MIDL___MIDL_itf_activprof_0000_0000_0002,
    context: u32,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsStopProfiling(
    reason: HRESULT,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsEnumerateHeap(
    enumerator: **IActiveScriptProfilerHeapEnum,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;

pub extern "chakra" fn JsIsEnumeratingHeap(
    isEnumeratingHeap: *bool,
) callconv(@import("std").os.windows.WINAPI) JsErrorCode;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (7)
//--------------------------------------------------------------------------------
const PWSTR = @import("system_services.zig").PWSTR;
const VARIANT = @import("automation.zig").VARIANT;
const HRESULT = @import("com.zig").HRESULT;
const IActiveScriptProfilerCallback = @import("debug.zig").IActiveScriptProfilerCallback;
const IActiveScriptProfilerHeapEnum = @import("debug.zig").IActiveScriptProfilerHeapEnum;
const __MIDL___MIDL_itf_activprof_0000_0000_0002 = @import("debug.zig").__MIDL___MIDL_itf_activprof_0000_0000_0002;
const IDebugApplication32 = @import("debug.zig").IDebugApplication32;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = JsMemoryAllocationCallback;
    _ = JsBeforeCollectCallback;
    _ = JsBackgroundWorkItemCallback;
    _ = JsThreadServiceCallback;
    _ = JsFinalizeCallback;
    _ = JsNativeFunction;

    const constant_export_count = 2;
    const type_export_count = 11;
    const enum_value_export_count = 47;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 85;
    const unicode_alias_count = 0;
    const import_count = 7;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (8)
//--------------------------------------------------------------------------------
const IID_IWsbApplicationBackupSupport_Value = @import("../zig.zig").Guid.initString("1EFF3510-4A27-46AD-B9E0-08332F0F4F6D");
pub const IID_IWsbApplicationBackupSupport = &IID_IWsbApplicationBackupSupport_Value;
pub const IWsbApplicationBackupSupport = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CheckConsistency: fn(
            self: *const IWsbApplicationBackupSupport,
            wszWriterMetadata: PWSTR,
            wszComponentName: PWSTR,
            wszComponentLogicalPath: PWSTR,
            cVolumes: u32,
            rgwszSourceVolumePath: [*]PWSTR,
            rgwszSnapshotVolumePath: [*]PWSTR,
            ppAsync: **IWsbApplicationAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWsbApplicationBackupSupport_CheckConsistency(self: *const T, wszWriterMetadata: PWSTR, wszComponentName: PWSTR, wszComponentLogicalPath: PWSTR, cVolumes: u32, rgwszSourceVolumePath: [*]PWSTR, rgwszSnapshotVolumePath: [*]PWSTR, ppAsync: **IWsbApplicationAsync) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWsbApplicationBackupSupport.VTable, self.vtable).CheckConsistency(@ptrCast(*const IWsbApplicationBackupSupport, self), wszWriterMetadata, wszComponentName, wszComponentLogicalPath, cVolumes, rgwszSourceVolumePath, rgwszSnapshotVolumePath, ppAsync);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWsbApplicationRestoreSupport_Value = @import("../zig.zig").Guid.initString("8D3BDB38-4EE8-4718-85F9-C7DBC4AB77AA");
pub const IID_IWsbApplicationRestoreSupport = &IID_IWsbApplicationRestoreSupport_Value;
pub const IWsbApplicationRestoreSupport = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PreRestore: fn(
            self: *const IWsbApplicationRestoreSupport,
            wszWriterMetadata: PWSTR,
            wszComponentName: PWSTR,
            wszComponentLogicalPath: PWSTR,
            bNoRollForward: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostRestore: fn(
            self: *const IWsbApplicationRestoreSupport,
            wszWriterMetadata: PWSTR,
            wszComponentName: PWSTR,
            wszComponentLogicalPath: PWSTR,
            bNoRollForward: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OrderComponents: fn(
            self: *const IWsbApplicationRestoreSupport,
            cComponents: u32,
            rgComponentName: [*]PWSTR,
            rgComponentLogicalPaths: [*]PWSTR,
            prgComponentName: [*]*PWSTR,
            prgComponentLogicalPath: [*]*PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRollForwardSupported: fn(
            self: *const IWsbApplicationRestoreSupport,
            pbRollForwardSupported: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWsbApplicationRestoreSupport_PreRestore(self: *const T, wszWriterMetadata: PWSTR, wszComponentName: PWSTR, wszComponentLogicalPath: PWSTR, bNoRollForward: u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWsbApplicationRestoreSupport.VTable, self.vtable).PreRestore(@ptrCast(*const IWsbApplicationRestoreSupport, self), wszWriterMetadata, wszComponentName, wszComponentLogicalPath, bNoRollForward);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWsbApplicationRestoreSupport_PostRestore(self: *const T, wszWriterMetadata: PWSTR, wszComponentName: PWSTR, wszComponentLogicalPath: PWSTR, bNoRollForward: u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWsbApplicationRestoreSupport.VTable, self.vtable).PostRestore(@ptrCast(*const IWsbApplicationRestoreSupport, self), wszWriterMetadata, wszComponentName, wszComponentLogicalPath, bNoRollForward);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWsbApplicationRestoreSupport_OrderComponents(self: *const T, cComponents: u32, rgComponentName: [*]PWSTR, rgComponentLogicalPaths: [*]PWSTR, prgComponentName: [*]*PWSTR, prgComponentLogicalPath: [*]*PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWsbApplicationRestoreSupport.VTable, self.vtable).OrderComponents(@ptrCast(*const IWsbApplicationRestoreSupport, self), cComponents, rgComponentName, rgComponentLogicalPaths, prgComponentName, prgComponentLogicalPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWsbApplicationRestoreSupport_IsRollForwardSupported(self: *const T, pbRollForwardSupported: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWsbApplicationRestoreSupport.VTable, self.vtable).IsRollForwardSupported(@ptrCast(*const IWsbApplicationRestoreSupport, self), pbRollForwardSupported);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWsbApplicationAsync_Value = @import("../zig.zig").Guid.initString("0843F6F7-895C-44A6-B0C2-05A5022AA3A1");
pub const IID_IWsbApplicationAsync = &IID_IWsbApplicationAsync_Value;
pub const IWsbApplicationAsync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryStatus: fn(
            self: *const IWsbApplicationAsync,
            phrResult: *HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: fn(
            self: *const IWsbApplicationAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWsbApplicationAsync_QueryStatus(self: *const T, phrResult: *HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWsbApplicationAsync.VTable, self.vtable).QueryStatus(@ptrCast(*const IWsbApplicationAsync, self), phrResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWsbApplicationAsync_Abort(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWsbApplicationAsync.VTable, self.vtable).Abort(@ptrCast(*const IWsbApplicationAsync, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WSB_OB_STATUS_ENTRY_PAIR_TYPE = extern enum(i32) {
    WSB_OB_ET_UNDEFINED = 0,
    WSB_OB_ET_STRING = 1,
    WSB_OB_ET_NUMBER = 2,
    WSB_OB_ET_DATETIME = 3,
    WSB_OB_ET_TIME = 4,
    WSB_OB_ET_SIZE = 5,
    WSB_OB_ET_MAX = 6,
};
pub const WSB_OB_ET_UNDEFINED = WSB_OB_STATUS_ENTRY_PAIR_TYPE.WSB_OB_ET_UNDEFINED;
pub const WSB_OB_ET_STRING = WSB_OB_STATUS_ENTRY_PAIR_TYPE.WSB_OB_ET_STRING;
pub const WSB_OB_ET_NUMBER = WSB_OB_STATUS_ENTRY_PAIR_TYPE.WSB_OB_ET_NUMBER;
pub const WSB_OB_ET_DATETIME = WSB_OB_STATUS_ENTRY_PAIR_TYPE.WSB_OB_ET_DATETIME;
pub const WSB_OB_ET_TIME = WSB_OB_STATUS_ENTRY_PAIR_TYPE.WSB_OB_ET_TIME;
pub const WSB_OB_ET_SIZE = WSB_OB_STATUS_ENTRY_PAIR_TYPE.WSB_OB_ET_SIZE;
pub const WSB_OB_ET_MAX = WSB_OB_STATUS_ENTRY_PAIR_TYPE.WSB_OB_ET_MAX;

pub const WSB_OB_STATUS_ENTRY_VALUE_TYPE_PAIR = extern struct {
    m_wszObStatusEntryPairValue: PWSTR,
    m_ObStatusEntryPairType: WSB_OB_STATUS_ENTRY_PAIR_TYPE,
};

pub const WSB_OB_STATUS_ENTRY = extern struct {
    m_dwIcon: u32,
    m_dwStatusEntryName: u32,
    m_dwStatusEntryValue: u32,
    m_cValueTypePair: u32,
    m_rgValueTypePair: *WSB_OB_STATUS_ENTRY_VALUE_TYPE_PAIR,
};

pub const WSB_OB_STATUS_INFO = extern struct {
    m_guidSnapinId: Guid,
    m_cStatusEntry: u32,
    m_rgStatusEntry: *WSB_OB_STATUS_ENTRY,
};

pub const WSB_OB_REGISTRATION_INFO = extern struct {
    m_wszResourceDLL: PWSTR,
    m_guidSnapinId: Guid,
    m_dwProviderName: u32,
    m_dwProviderIcon: u32,
    m_bSupportsRemoting: u8,
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (4)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const PWSTR = @import("system_services.zig").PWSTR;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;

test {
    const constant_export_count = 0;
    const type_export_count = 8;
    const enum_value_export_count = 7;
    const com_iface_id_export_count = 3;
    const com_class_id_export_count = 0;
    const func_export_count = 0;
    const unicode_alias_count = 0;
    const import_count = 4;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

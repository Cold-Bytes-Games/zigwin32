//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (135)
//--------------------------------------------------------------------------------
pub const STGC = extern enum(i32) {
    DEFAULT = 0,
    OVERWRITE = 1,
    ONLYIFCURRENT = 2,
    DANGEROUSLYCOMMITMERELYTODISKCACHE = 4,
    CONSOLIDATE = 8,
};
pub const STGC_DEFAULT = STGC.DEFAULT;
pub const STGC_OVERWRITE = STGC.OVERWRITE;
pub const STGC_ONLYIFCURRENT = STGC.ONLYIFCURRENT;
pub const STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = STGC.DANGEROUSLYCOMMITMERELYTODISKCACHE;
pub const STGC_CONSOLIDATE = STGC.CONSOLIDATE;

pub const STGMOVE = extern enum(i32) {
    MOVE = 0,
    COPY = 1,
    SHALLOWCOPY = 2,
};
pub const STGMOVE_MOVE = STGMOVE.MOVE;
pub const STGMOVE_COPY = STGMOVE.COPY;
pub const STGMOVE_SHALLOWCOPY = STGMOVE.SHALLOWCOPY;

pub const STATFLAG = extern enum(i32) {
    DEFAULT = 0,
    NONAME = 1,
    NOOPEN = 2,
};
pub const STATFLAG_DEFAULT = STATFLAG.DEFAULT;
pub const STATFLAG_NONAME = STATFLAG.NONAME;
pub const STATFLAG_NOOPEN = STATFLAG.NOOPEN;

const IID_ISequentialStream_Value = @import("../zig.zig").Guid.initString("0c733a30-2a1c-11ce-ade5-00aa0044773d");
pub const IID_ISequentialStream = &IID_ISequentialStream_Value;
pub const ISequentialStream = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Read: fn(
            self: *const ISequentialStream,
            pv: [*]u8,
            cb: u32,
            pcbRead: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Write: fn(
            self: *const ISequentialStream,
            pv: [*]const u8,
            cb: u32,
            pcbWritten: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISequentialStream_Read(self: *const T, pv: [*]u8, cb: u32, pcbRead: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISequentialStream.VTable, self.vtable).Read(@ptrCast(*const ISequentialStream, self), pv, cb, pcbRead);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISequentialStream_Write(self: *const T, pv: [*]const u8, cb: u32, pcbWritten: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISequentialStream.VTable, self.vtable).Write(@ptrCast(*const ISequentialStream, self), pv, cb, pcbWritten);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const STATSTG = extern struct {
    pwcsName: PWSTR,
    type: u32,
    cbSize: ULARGE_INTEGER,
    mtime: FILETIME,
    ctime: FILETIME,
    atime: FILETIME,
    grfMode: u32,
    grfLocksSupported: u32,
    clsid: Guid,
    grfStateBits: u32,
    reserved: u32,
};

pub const STGTY = extern enum(i32) {
    STORAGE = 1,
    STREAM = 2,
    LOCKBYTES = 3,
    PROPERTY = 4,
};
pub const STGTY_STORAGE = STGTY.STORAGE;
pub const STGTY_STREAM = STGTY.STREAM;
pub const STGTY_LOCKBYTES = STGTY.LOCKBYTES;
pub const STGTY_PROPERTY = STGTY.PROPERTY;

pub const STREAM_SEEK = extern enum(u32) {
    SET = 0,
    CUR = 1,
    END = 2,
};
pub const STREAM_SEEK_SET = STREAM_SEEK.SET;
pub const STREAM_SEEK_CUR = STREAM_SEEK.CUR;
pub const STREAM_SEEK_END = STREAM_SEEK.END;

pub const LOCKTYPE = extern enum(i32) {
    LOCK_WRITE = 1,
    LOCK_EXCLUSIVE = 2,
    LOCK_ONLYONCE = 4,
};
pub const LOCK_WRITE = LOCKTYPE.LOCK_WRITE;
pub const LOCK_EXCLUSIVE = LOCKTYPE.LOCK_EXCLUSIVE;
pub const LOCK_ONLYONCE = LOCKTYPE.LOCK_ONLYONCE;

const IID_IStream_Value = @import("../zig.zig").Guid.initString("0000000c-0000-0000-c000-000000000046");
pub const IID_IStream = &IID_IStream_Value;
pub const IStream = extern struct {
    pub const VTable = extern struct {
        base: ISequentialStream.VTable,
        Seek: fn(
            self: *const IStream,
            dlibMove: LARGE_INTEGER,
            dwOrigin: STREAM_SEEK,
            plibNewPosition: ?*ULARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSize: fn(
            self: *const IStream,
            libNewSize: ULARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyTo: fn(
            self: *const IStream,
            pstm: *IStream,
            cb: ULARGE_INTEGER,
            pcbRead: ?*ULARGE_INTEGER,
            pcbWritten: ?*ULARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: fn(
            self: *const IStream,
            grfCommitFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Revert: fn(
            self: *const IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LockRegion: fn(
            self: *const IStream,
            libOffset: ULARGE_INTEGER,
            cb: ULARGE_INTEGER,
            dwLockType: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnlockRegion: fn(
            self: *const IStream,
            libOffset: ULARGE_INTEGER,
            cb: ULARGE_INTEGER,
            dwLockType: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stat: fn(
            self: *const IStream,
            pstatstg: *STATSTG,
            grfStatFlag: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IStream,
            ppstm: **IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISequentialStream.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStream_Seek(self: *const T, dlibMove: LARGE_INTEGER, dwOrigin: STREAM_SEEK, plibNewPosition: ?*ULARGE_INTEGER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStream.VTable, self.vtable).Seek(@ptrCast(*const IStream, self), dlibMove, dwOrigin, plibNewPosition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStream_SetSize(self: *const T, libNewSize: ULARGE_INTEGER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStream.VTable, self.vtable).SetSize(@ptrCast(*const IStream, self), libNewSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStream_CopyTo(self: *const T, pstm: *IStream, cb: ULARGE_INTEGER, pcbRead: ?*ULARGE_INTEGER, pcbWritten: ?*ULARGE_INTEGER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStream.VTable, self.vtable).CopyTo(@ptrCast(*const IStream, self), pstm, cb, pcbRead, pcbWritten);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStream_Commit(self: *const T, grfCommitFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStream.VTable, self.vtable).Commit(@ptrCast(*const IStream, self), grfCommitFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStream_Revert(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStream.VTable, self.vtable).Revert(@ptrCast(*const IStream, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStream_LockRegion(self: *const T, libOffset: ULARGE_INTEGER, cb: ULARGE_INTEGER, dwLockType: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStream.VTable, self.vtable).LockRegion(@ptrCast(*const IStream, self), libOffset, cb, dwLockType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStream_UnlockRegion(self: *const T, libOffset: ULARGE_INTEGER, cb: ULARGE_INTEGER, dwLockType: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStream.VTable, self.vtable).UnlockRegion(@ptrCast(*const IStream, self), libOffset, cb, dwLockType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStream_Stat(self: *const T, pstatstg: *STATSTG, grfStatFlag: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStream.VTable, self.vtable).Stat(@ptrCast(*const IStream, self), pstatstg, grfStatFlag);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStream_Clone(self: *const T, ppstm: **IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStream.VTable, self.vtable).Clone(@ptrCast(*const IStream, self), ppstm);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumSTATSTG_Value = @import("../zig.zig").Guid.initString("0000000d-0000-0000-c000-000000000046");
pub const IID_IEnumSTATSTG = &IID_IEnumSTATSTG_Value;
pub const IEnumSTATSTG = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumSTATSTG,
            celt: u32,
            rgelt: [*]STATSTG,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumSTATSTG,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumSTATSTG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumSTATSTG,
            ppenum: **IEnumSTATSTG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSTATSTG_Next(self: *const T, celt: u32, rgelt: [*]STATSTG, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSTATSTG.VTable, self.vtable).Next(@ptrCast(*const IEnumSTATSTG, self), celt, rgelt, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSTATSTG_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSTATSTG.VTable, self.vtable).Skip(@ptrCast(*const IEnumSTATSTG, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSTATSTG_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSTATSTG.VTable, self.vtable).Reset(@ptrCast(*const IEnumSTATSTG, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSTATSTG_Clone(self: *const T, ppenum: **IEnumSTATSTG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSTATSTG.VTable, self.vtable).Clone(@ptrCast(*const IEnumSTATSTG, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const RemSNB = extern struct {
    ulCntStr: u32,
    ulCntChar: u32,
    rgString: [1]u16,
};

const IID_IStorage_Value = @import("../zig.zig").Guid.initString("0000000b-0000-0000-c000-000000000046");
pub const IID_IStorage = &IID_IStorage_Value;
pub const IStorage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateStream: fn(
            self: *const IStorage,
            pwcsName: [*:0]const u16,
            grfMode: u32,
            reserved1: u32,
            reserved2: u32,
            ppstm: **IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenStream: fn(
            self: *const IStorage,
            pwcsName: [*:0]const u16,
            reserved1: *c_void,
            grfMode: u32,
            reserved2: u32,
            ppstm: **IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStorage: fn(
            self: *const IStorage,
            pwcsName: [*:0]const u16,
            grfMode: u32,
            reserved1: u32,
            reserved2: u32,
            ppstg: **IStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenStorage: fn(
            self: *const IStorage,
            pwcsName: [*:0]const u16,
            pstgPriority: *IStorage,
            grfMode: u32,
            snbExclude: **u16,
            reserved: u32,
            ppstg: **IStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyTo: fn(
            self: *const IStorage,
            ciidExclude: u32,
            rgiidExclude: ?[*]const Guid,
            snbExclude: ?*?*u16,
            pstgDest: *IStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveElementTo: fn(
            self: *const IStorage,
            pwcsName: [*:0]const u16,
            pstgDest: *IStorage,
            pwcsNewName: [*:0]const u16,
            grfFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: fn(
            self: *const IStorage,
            grfCommitFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Revert: fn(
            self: *const IStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumElements: fn(
            self: *const IStorage,
            reserved1: u32,
            reserved2: *c_void,
            reserved3: u32,
            ppenum: **IEnumSTATSTG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyElement: fn(
            self: *const IStorage,
            pwcsName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenameElement: fn(
            self: *const IStorage,
            pwcsOldName: [*:0]const u16,
            pwcsNewName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetElementTimes: fn(
            self: *const IStorage,
            pwcsName: [*:0]const u16,
            pctime: *const FILETIME,
            patime: *const FILETIME,
            pmtime: *const FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClass: fn(
            self: *const IStorage,
            clsid: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStateBits: fn(
            self: *const IStorage,
            grfStateBits: u32,
            grfMask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stat: fn(
            self: *const IStorage,
            pstatstg: *STATSTG,
            grfStatFlag: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorage_CreateStream(self: *const T, pwcsName: [*:0]const u16, grfMode: u32, reserved1: u32, reserved2: u32, ppstm: **IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorage.VTable, self.vtable).CreateStream(@ptrCast(*const IStorage, self), pwcsName, grfMode, reserved1, reserved2, ppstm);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorage_OpenStream(self: *const T, pwcsName: [*:0]const u16, reserved1: *c_void, grfMode: u32, reserved2: u32, ppstm: **IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorage.VTable, self.vtable).OpenStream(@ptrCast(*const IStorage, self), pwcsName, reserved1, grfMode, reserved2, ppstm);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorage_CreateStorage(self: *const T, pwcsName: [*:0]const u16, grfMode: u32, reserved1: u32, reserved2: u32, ppstg: **IStorage) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorage.VTable, self.vtable).CreateStorage(@ptrCast(*const IStorage, self), pwcsName, grfMode, reserved1, reserved2, ppstg);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorage_OpenStorage(self: *const T, pwcsName: [*:0]const u16, pstgPriority: *IStorage, grfMode: u32, snbExclude: **u16, reserved: u32, ppstg: **IStorage) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorage.VTable, self.vtable).OpenStorage(@ptrCast(*const IStorage, self), pwcsName, pstgPriority, grfMode, snbExclude, reserved, ppstg);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorage_CopyTo(self: *const T, ciidExclude: u32, rgiidExclude: ?[*]const Guid, snbExclude: ?*?*u16, pstgDest: *IStorage) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorage.VTable, self.vtable).CopyTo(@ptrCast(*const IStorage, self), ciidExclude, rgiidExclude, snbExclude, pstgDest);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorage_MoveElementTo(self: *const T, pwcsName: [*:0]const u16, pstgDest: *IStorage, pwcsNewName: [*:0]const u16, grfFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorage.VTable, self.vtable).MoveElementTo(@ptrCast(*const IStorage, self), pwcsName, pstgDest, pwcsNewName, grfFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorage_Commit(self: *const T, grfCommitFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorage.VTable, self.vtable).Commit(@ptrCast(*const IStorage, self), grfCommitFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorage_Revert(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorage.VTable, self.vtable).Revert(@ptrCast(*const IStorage, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorage_EnumElements(self: *const T, reserved1: u32, reserved2: *c_void, reserved3: u32, ppenum: **IEnumSTATSTG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorage.VTable, self.vtable).EnumElements(@ptrCast(*const IStorage, self), reserved1, reserved2, reserved3, ppenum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorage_DestroyElement(self: *const T, pwcsName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorage.VTable, self.vtable).DestroyElement(@ptrCast(*const IStorage, self), pwcsName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorage_RenameElement(self: *const T, pwcsOldName: [*:0]const u16, pwcsNewName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorage.VTable, self.vtable).RenameElement(@ptrCast(*const IStorage, self), pwcsOldName, pwcsNewName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorage_SetElementTimes(self: *const T, pwcsName: [*:0]const u16, pctime: *const FILETIME, patime: *const FILETIME, pmtime: *const FILETIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorage.VTable, self.vtable).SetElementTimes(@ptrCast(*const IStorage, self), pwcsName, pctime, patime, pmtime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorage_SetClass(self: *const T, clsid: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorage.VTable, self.vtable).SetClass(@ptrCast(*const IStorage, self), clsid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorage_SetStateBits(self: *const T, grfStateBits: u32, grfMask: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorage.VTable, self.vtable).SetStateBits(@ptrCast(*const IStorage, self), grfStateBits, grfMask);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorage_Stat(self: *const T, pstatstg: *STATSTG, grfStatFlag: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorage.VTable, self.vtable).Stat(@ptrCast(*const IStorage, self), pstatstg, grfStatFlag);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILockBytes_Value = @import("../zig.zig").Guid.initString("0000000a-0000-0000-c000-000000000046");
pub const IID_ILockBytes = &IID_ILockBytes_Value;
pub const ILockBytes = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReadAt: fn(
            self: *const ILockBytes,
            ulOffset: ULARGE_INTEGER,
            pv: [*]u8,
            cb: u32,
            pcbRead: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteAt: fn(
            self: *const ILockBytes,
            ulOffset: ULARGE_INTEGER,
            pv: [*]const u8,
            cb: u32,
            pcbWritten: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Flush: fn(
            self: *const ILockBytes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSize: fn(
            self: *const ILockBytes,
            cb: ULARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LockRegion: fn(
            self: *const ILockBytes,
            libOffset: ULARGE_INTEGER,
            cb: ULARGE_INTEGER,
            dwLockType: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnlockRegion: fn(
            self: *const ILockBytes,
            libOffset: ULARGE_INTEGER,
            cb: ULARGE_INTEGER,
            dwLockType: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stat: fn(
            self: *const ILockBytes,
            pstatstg: *STATSTG,
            grfStatFlag: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILockBytes_ReadAt(self: *const T, ulOffset: ULARGE_INTEGER, pv: [*]u8, cb: u32, pcbRead: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILockBytes.VTable, self.vtable).ReadAt(@ptrCast(*const ILockBytes, self), ulOffset, pv, cb, pcbRead);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILockBytes_WriteAt(self: *const T, ulOffset: ULARGE_INTEGER, pv: [*]const u8, cb: u32, pcbWritten: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILockBytes.VTable, self.vtable).WriteAt(@ptrCast(*const ILockBytes, self), ulOffset, pv, cb, pcbWritten);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILockBytes_Flush(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILockBytes.VTable, self.vtable).Flush(@ptrCast(*const ILockBytes, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILockBytes_SetSize(self: *const T, cb: ULARGE_INTEGER) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILockBytes.VTable, self.vtable).SetSize(@ptrCast(*const ILockBytes, self), cb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILockBytes_LockRegion(self: *const T, libOffset: ULARGE_INTEGER, cb: ULARGE_INTEGER, dwLockType: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILockBytes.VTable, self.vtable).LockRegion(@ptrCast(*const ILockBytes, self), libOffset, cb, dwLockType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILockBytes_UnlockRegion(self: *const T, libOffset: ULARGE_INTEGER, cb: ULARGE_INTEGER, dwLockType: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILockBytes.VTable, self.vtable).UnlockRegion(@ptrCast(*const ILockBytes, self), libOffset, cb, dwLockType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILockBytes_Stat(self: *const T, pstatstg: *STATSTG, grfStatFlag: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILockBytes.VTable, self.vtable).Stat(@ptrCast(*const ILockBytes, self), pstatstg, grfStatFlag);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRootStorage_Value = @import("../zig.zig").Guid.initString("00000012-0000-0000-c000-000000000046");
pub const IID_IRootStorage = &IID_IRootStorage_Value;
pub const IRootStorage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SwitchToFile: fn(
            self: *const IRootStorage,
            pszFile: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRootStorage_SwitchToFile(self: *const T, pszFile: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRootStorage.VTable, self.vtable).SwitchToFile(@ptrCast(*const IRootStorage, self), pszFile);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFillLockBytes_Value = @import("../zig.zig").Guid.initString("99caf010-415e-11cf-8814-00aa00b569f5");
pub const IID_IFillLockBytes = &IID_IFillLockBytes_Value;
pub const IFillLockBytes = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FillAppend: fn(
            self: *const IFillLockBytes,
            pv: [*]const u8,
            cb: u32,
            pcbWritten: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FillAt: fn(
            self: *const IFillLockBytes,
            ulOffset: ULARGE_INTEGER,
            pv: [*]const u8,
            cb: u32,
            pcbWritten: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFillSize: fn(
            self: *const IFillLockBytes,
            ulSize: ULARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Terminate: fn(
            self: *const IFillLockBytes,
            bCanceled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFillLockBytes_FillAppend(self: *const T, pv: [*]const u8, cb: u32, pcbWritten: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFillLockBytes.VTable, self.vtable).FillAppend(@ptrCast(*const IFillLockBytes, self), pv, cb, pcbWritten);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFillLockBytes_FillAt(self: *const T, ulOffset: ULARGE_INTEGER, pv: [*]const u8, cb: u32, pcbWritten: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFillLockBytes.VTable, self.vtable).FillAt(@ptrCast(*const IFillLockBytes, self), ulOffset, pv, cb, pcbWritten);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFillLockBytes_SetFillSize(self: *const T, ulSize: ULARGE_INTEGER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFillLockBytes.VTable, self.vtable).SetFillSize(@ptrCast(*const IFillLockBytes, self), ulSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFillLockBytes_Terminate(self: *const T, bCanceled: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFillLockBytes.VTable, self.vtable).Terminate(@ptrCast(*const IFillLockBytes, self), bCanceled);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const StorageLayout = extern struct {
    LayoutType: u32,
    pwcsElementName: PWSTR,
    cOffset: LARGE_INTEGER,
    cBytes: LARGE_INTEGER,
};

const IID_ILayoutStorage_Value = @import("../zig.zig").Guid.initString("0e6d4d90-6738-11cf-9608-00aa00680db4");
pub const IID_ILayoutStorage = &IID_ILayoutStorage_Value;
pub const ILayoutStorage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LayoutScript: fn(
            self: *const ILayoutStorage,
            pStorageLayout: [*]StorageLayout,
            nEntries: u32,
            glfInterleavedFlag: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginMonitor: fn(
            self: *const ILayoutStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndMonitor: fn(
            self: *const ILayoutStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReLayoutDocfile: fn(
            self: *const ILayoutStorage,
            pwcsNewDfName: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReLayoutDocfileOnILockBytes: fn(
            self: *const ILayoutStorage,
            pILockBytes: *ILockBytes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILayoutStorage_LayoutScript(self: *const T, pStorageLayout: [*]StorageLayout, nEntries: u32, glfInterleavedFlag: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILayoutStorage.VTable, self.vtable).LayoutScript(@ptrCast(*const ILayoutStorage, self), pStorageLayout, nEntries, glfInterleavedFlag);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILayoutStorage_BeginMonitor(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILayoutStorage.VTable, self.vtable).BeginMonitor(@ptrCast(*const ILayoutStorage, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILayoutStorage_EndMonitor(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILayoutStorage.VTable, self.vtable).EndMonitor(@ptrCast(*const ILayoutStorage, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILayoutStorage_ReLayoutDocfile(self: *const T, pwcsNewDfName: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILayoutStorage.VTable, self.vtable).ReLayoutDocfile(@ptrCast(*const ILayoutStorage, self), pwcsNewDfName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILayoutStorage_ReLayoutDocfileOnILockBytes(self: *const T, pILockBytes: *ILockBytes) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILayoutStorage.VTable, self.vtable).ReLayoutDocfileOnILockBytes(@ptrCast(*const ILayoutStorage, self), pILockBytes);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectWriterLock_Value = @import("../zig.zig").Guid.initString("0e6d4d92-6738-11cf-9608-00aa00680db4");
pub const IID_IDirectWriterLock = &IID_IDirectWriterLock_Value;
pub const IDirectWriterLock = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        WaitForWriteAccess: fn(
            self: *const IDirectWriterLock,
            dwTimeout: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseWriteAccess: fn(
            self: *const IDirectWriterLock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HaveWriteAccess: fn(
            self: *const IDirectWriterLock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectWriterLock_WaitForWriteAccess(self: *const T, dwTimeout: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectWriterLock.VTable, self.vtable).WaitForWriteAccess(@ptrCast(*const IDirectWriterLock, self), dwTimeout);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectWriterLock_ReleaseWriteAccess(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectWriterLock.VTable, self.vtable).ReleaseWriteAccess(@ptrCast(*const IDirectWriterLock, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectWriterLock_HaveWriteAccess(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectWriterLock.VTable, self.vtable).HaveWriteAccess(@ptrCast(*const IDirectWriterLock, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const VERSIONEDSTREAM = extern struct {
    guidVersion: Guid,
    pStream: *IStream,
};

pub const CAC = extern struct {
    cElems: u32,
    pElems: *i8,
};

pub const CAUB = extern struct {
    cElems: u32,
    pElems: *u8,
};

pub const CAI = extern struct {
    cElems: u32,
    pElems: *i16,
};

pub const CAUI = extern struct {
    cElems: u32,
    pElems: *u16,
};

pub const CAL = extern struct {
    cElems: u32,
    pElems: *i32,
};

pub const CAUL = extern struct {
    cElems: u32,
    pElems: *u32,
};

pub const CAFLT = extern struct {
    cElems: u32,
    pElems: *f32,
};

pub const CADBL = extern struct {
    cElems: u32,
    pElems: *f64,
};

pub const CACY = extern struct {
    cElems: u32,
    pElems: *CY,
};

pub const CADATE = extern struct {
    cElems: u32,
    pElems: *f64,
};

pub const CABSTR = extern struct {
    cElems: u32,
    pElems: *BSTR,
};

pub const CABSTRBLOB = extern struct {
    cElems: u32,
    pElems: *BSTRBLOB,
};

pub const CABOOL = extern struct {
    cElems: u32,
    pElems: *i16,
};

pub const CASCODE = extern struct {
    cElems: u32,
    pElems: *i32,
};

pub const CAPROPVARIANT = extern struct {
    cElems: u32,
    pElems: *PROPVARIANT,
};

pub const CAH = extern struct {
    cElems: u32,
    pElems: *LARGE_INTEGER,
};

pub const CAUH = extern struct {
    cElems: u32,
    pElems: *ULARGE_INTEGER,
};

pub const CALPSTR = extern struct {
    cElems: u32,
    pElems: *PSTR,
};

pub const CALPWSTR = extern struct {
    cElems: u32,
    pElems: *PWSTR,
};

pub const CAFILETIME = extern struct {
    cElems: u32,
    pElems: *FILETIME,
};

pub const CACLIPDATA = extern struct {
    cElems: u32,
    pElems: *CLIPDATA,
};

pub const CACLSID = extern struct {
    cElems: u32,
    pElems: *Guid,
};

pub const PROPVARIANT = extern struct {
    Anonymous: PROPVARIANT._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PROPSPEC = extern struct {
    ulKind: u32,
    Anonymous: PROPSPEC._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const STATPROPSTG = extern struct {
    lpwstrName: PWSTR,
    propid: u32,
    vt: u16,
};

pub const STATPROPSETSTG = extern struct {
    fmtid: Guid,
    clsid: Guid,
    grfFlags: u32,
    mtime: FILETIME,
    ctime: FILETIME,
    atime: FILETIME,
    dwOSVersion: u32,
};

const IID_IPropertyStorage_Value = @import("../zig.zig").Guid.initString("00000138-0000-0000-c000-000000000046");
pub const IID_IPropertyStorage = &IID_IPropertyStorage_Value;
pub const IPropertyStorage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReadMultiple: fn(
            self: *const IPropertyStorage,
            cpspec: u32,
            rgpspec: [*]const PROPSPEC,
            rgpropvar: [*]PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteMultiple: fn(
            self: *const IPropertyStorage,
            cpspec: u32,
            rgpspec: [*]const PROPSPEC,
            rgpropvar: [*]const PROPVARIANT,
            propidNameFirst: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteMultiple: fn(
            self: *const IPropertyStorage,
            cpspec: u32,
            rgpspec: [*]const PROPSPEC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadPropertyNames: fn(
            self: *const IPropertyStorage,
            cpropid: u32,
            rgpropid: [*]const u32,
            rglpwstrName: [*]*PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WritePropertyNames: fn(
            self: *const IPropertyStorage,
            cpropid: u32,
            rgpropid: [*]const u32,
            rglpwstrName: [*]const *const [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePropertyNames: fn(
            self: *const IPropertyStorage,
            cpropid: u32,
            rgpropid: [*]const u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: fn(
            self: *const IPropertyStorage,
            grfCommitFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Revert: fn(
            self: *const IPropertyStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enum: fn(
            self: *const IPropertyStorage,
            ppenum: **IEnumSTATPROPSTG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTimes: fn(
            self: *const IPropertyStorage,
            pctime: *const FILETIME,
            patime: *const FILETIME,
            pmtime: *const FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClass: fn(
            self: *const IPropertyStorage,
            clsid: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stat: fn(
            self: *const IPropertyStorage,
            pstatpsstg: *STATPROPSETSTG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStorage_ReadMultiple(self: *const T, cpspec: u32, rgpspec: [*]const PROPSPEC, rgpropvar: [*]PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStorage.VTable, self.vtable).ReadMultiple(@ptrCast(*const IPropertyStorage, self), cpspec, rgpspec, rgpropvar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStorage_WriteMultiple(self: *const T, cpspec: u32, rgpspec: [*]const PROPSPEC, rgpropvar: [*]const PROPVARIANT, propidNameFirst: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStorage.VTable, self.vtable).WriteMultiple(@ptrCast(*const IPropertyStorage, self), cpspec, rgpspec, rgpropvar, propidNameFirst);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStorage_DeleteMultiple(self: *const T, cpspec: u32, rgpspec: [*]const PROPSPEC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStorage.VTable, self.vtable).DeleteMultiple(@ptrCast(*const IPropertyStorage, self), cpspec, rgpspec);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStorage_ReadPropertyNames(self: *const T, cpropid: u32, rgpropid: [*]const u32, rglpwstrName: [*]*PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStorage.VTable, self.vtable).ReadPropertyNames(@ptrCast(*const IPropertyStorage, self), cpropid, rgpropid, rglpwstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStorage_WritePropertyNames(self: *const T, cpropid: u32, rgpropid: [*]const u32, rglpwstrName: [*]const *const [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStorage.VTable, self.vtable).WritePropertyNames(@ptrCast(*const IPropertyStorage, self), cpropid, rgpropid, rglpwstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStorage_DeletePropertyNames(self: *const T, cpropid: u32, rgpropid: [*]const u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStorage.VTable, self.vtable).DeletePropertyNames(@ptrCast(*const IPropertyStorage, self), cpropid, rgpropid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStorage_Commit(self: *const T, grfCommitFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStorage.VTable, self.vtable).Commit(@ptrCast(*const IPropertyStorage, self), grfCommitFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStorage_Revert(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStorage.VTable, self.vtable).Revert(@ptrCast(*const IPropertyStorage, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStorage_Enum(self: *const T, ppenum: **IEnumSTATPROPSTG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStorage.VTable, self.vtable).Enum(@ptrCast(*const IPropertyStorage, self), ppenum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStorage_SetTimes(self: *const T, pctime: *const FILETIME, patime: *const FILETIME, pmtime: *const FILETIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStorage.VTable, self.vtable).SetTimes(@ptrCast(*const IPropertyStorage, self), pctime, patime, pmtime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStorage_SetClass(self: *const T, clsid: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStorage.VTable, self.vtable).SetClass(@ptrCast(*const IPropertyStorage, self), clsid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStorage_Stat(self: *const T, pstatpsstg: *STATPROPSETSTG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStorage.VTable, self.vtable).Stat(@ptrCast(*const IPropertyStorage, self), pstatpsstg);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPropertySetStorage_Value = @import("../zig.zig").Guid.initString("0000013a-0000-0000-c000-000000000046");
pub const IID_IPropertySetStorage = &IID_IPropertySetStorage_Value;
pub const IPropertySetStorage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: fn(
            self: *const IPropertySetStorage,
            rfmtid: *const Guid,
            pclsid: *const Guid,
            grfFlags: u32,
            grfMode: u32,
            ppprstg: **IPropertyStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: fn(
            self: *const IPropertySetStorage,
            rfmtid: *const Guid,
            grfMode: u32,
            ppprstg: **IPropertyStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: fn(
            self: *const IPropertySetStorage,
            rfmtid: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enum: fn(
            self: *const IPropertySetStorage,
            ppenum: **IEnumSTATPROPSETSTG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySetStorage_Create(self: *const T, rfmtid: *const Guid, pclsid: *const Guid, grfFlags: u32, grfMode: u32, ppprstg: **IPropertyStorage) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySetStorage.VTable, self.vtable).Create(@ptrCast(*const IPropertySetStorage, self), rfmtid, pclsid, grfFlags, grfMode, ppprstg);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySetStorage_Open(self: *const T, rfmtid: *const Guid, grfMode: u32, ppprstg: **IPropertyStorage) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySetStorage.VTable, self.vtable).Open(@ptrCast(*const IPropertySetStorage, self), rfmtid, grfMode, ppprstg);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySetStorage_Delete(self: *const T, rfmtid: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySetStorage.VTable, self.vtable).Delete(@ptrCast(*const IPropertySetStorage, self), rfmtid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySetStorage_Enum(self: *const T, ppenum: **IEnumSTATPROPSETSTG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySetStorage.VTable, self.vtable).Enum(@ptrCast(*const IPropertySetStorage, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumSTATPROPSTG_Value = @import("../zig.zig").Guid.initString("00000139-0000-0000-c000-000000000046");
pub const IID_IEnumSTATPROPSTG = &IID_IEnumSTATPROPSTG_Value;
pub const IEnumSTATPROPSTG = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumSTATPROPSTG,
            celt: u32,
            rgelt: [*]STATPROPSTG,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumSTATPROPSTG,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumSTATPROPSTG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumSTATPROPSTG,
            ppenum: **IEnumSTATPROPSTG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSTATPROPSTG_Next(self: *const T, celt: u32, rgelt: [*]STATPROPSTG, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSTATPROPSTG.VTable, self.vtable).Next(@ptrCast(*const IEnumSTATPROPSTG, self), celt, rgelt, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSTATPROPSTG_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSTATPROPSTG.VTable, self.vtable).Skip(@ptrCast(*const IEnumSTATPROPSTG, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSTATPROPSTG_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSTATPROPSTG.VTable, self.vtable).Reset(@ptrCast(*const IEnumSTATPROPSTG, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSTATPROPSTG_Clone(self: *const T, ppenum: **IEnumSTATPROPSTG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSTATPROPSTG.VTable, self.vtable).Clone(@ptrCast(*const IEnumSTATPROPSTG, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumSTATPROPSETSTG_Value = @import("../zig.zig").Guid.initString("0000013b-0000-0000-c000-000000000046");
pub const IID_IEnumSTATPROPSETSTG = &IID_IEnumSTATPROPSETSTG_Value;
pub const IEnumSTATPROPSETSTG = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumSTATPROPSETSTG,
            celt: u32,
            rgelt: [*]STATPROPSETSTG,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumSTATPROPSETSTG,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumSTATPROPSETSTG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumSTATPROPSETSTG,
            ppenum: **IEnumSTATPROPSETSTG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSTATPROPSETSTG_Next(self: *const T, celt: u32, rgelt: [*]STATPROPSETSTG, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSTATPROPSETSTG.VTable, self.vtable).Next(@ptrCast(*const IEnumSTATPROPSETSTG, self), celt, rgelt, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSTATPROPSETSTG_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSTATPROPSETSTG.VTable, self.vtable).Skip(@ptrCast(*const IEnumSTATPROPSETSTG, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSTATPROPSETSTG_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSTATPROPSETSTG.VTable, self.vtable).Reset(@ptrCast(*const IEnumSTATPROPSETSTG, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSTATPROPSETSTG_Clone(self: *const T, ppenum: **IEnumSTATPROPSETSTG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSTATPROPSETSTG.VTable, self.vtable).Clone(@ptrCast(*const IEnumSTATPROPSETSTG, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const STGOPTIONS = extern struct {
    usVersion: u16,
    reserved: u16,
    ulSectorSize: u32,
    pwcsTemplateFile: [*:0]const u16,
};

pub const PIDMSI_STATUS_VALUE = extern enum(i32) {
    PIDMSI_STATUS_NORMAL = 0,
    PIDMSI_STATUS_NEW = 1,
    PIDMSI_STATUS_PRELIM = 2,
    PIDMSI_STATUS_DRAFT = 3,
    PIDMSI_STATUS_INPROGRESS = 4,
    PIDMSI_STATUS_EDIT = 5,
    PIDMSI_STATUS_REVIEW = 6,
    PIDMSI_STATUS_PROOF = 7,
    PIDMSI_STATUS_FINAL = 8,
    PIDMSI_STATUS_OTHER = 32767,
};
pub const PIDMSI_STATUS_NORMAL = PIDMSI_STATUS_VALUE.PIDMSI_STATUS_NORMAL;
pub const PIDMSI_STATUS_NEW = PIDMSI_STATUS_VALUE.PIDMSI_STATUS_NEW;
pub const PIDMSI_STATUS_PRELIM = PIDMSI_STATUS_VALUE.PIDMSI_STATUS_PRELIM;
pub const PIDMSI_STATUS_DRAFT = PIDMSI_STATUS_VALUE.PIDMSI_STATUS_DRAFT;
pub const PIDMSI_STATUS_INPROGRESS = PIDMSI_STATUS_VALUE.PIDMSI_STATUS_INPROGRESS;
pub const PIDMSI_STATUS_EDIT = PIDMSI_STATUS_VALUE.PIDMSI_STATUS_EDIT;
pub const PIDMSI_STATUS_REVIEW = PIDMSI_STATUS_VALUE.PIDMSI_STATUS_REVIEW;
pub const PIDMSI_STATUS_PROOF = PIDMSI_STATUS_VALUE.PIDMSI_STATUS_PROOF;
pub const PIDMSI_STATUS_FINAL = PIDMSI_STATUS_VALUE.PIDMSI_STATUS_FINAL;
pub const PIDMSI_STATUS_OTHER = PIDMSI_STATUS_VALUE.PIDMSI_STATUS_OTHER;

pub const PMemoryAllocator = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const JET_INDEXID = extern struct {
    cbStruct: u32,
    rgbIndexId: [12]u8,
};

pub const JET_PFNSTATUS = fn(
    sesid: u32,
    snp: u32,
    snt: u32,
    pv: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const JET_RSTMAP_A = extern struct {
    szDatabaseName: *i8,
    szNewDatabaseName: *i8,
};

pub const JET_RSTMAP_W = extern struct {
    szDatabaseName: PWSTR,
    szNewDatabaseName: PWSTR,
};

pub const tagCONVERT_A = extern struct {
    szOldDll: *i8,
    Anonymous: tagCONVERT_A._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const tagCONVERT_W = extern struct {
    szOldDll: PWSTR,
    Anonymous: tagCONVERT_W._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const JET_CALLBACK = fn(
    sesid: u32,
    dbid: u32,
    tableid: u32,
    cbtyp: u32,
    pvArg1: ?*c_void,
    pvArg2: ?*c_void,
    pvContext: ?*c_void,
    ulUnused: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const JET_SNPROG = extern struct {
    cbStruct: u32,
    cunitDone: u32,
    cunitTotal: u32,
};

pub const JET_DBINFOUPGRADE = extern struct {
    cbStruct: u32,
    cbFilesizeLow: u32,
    cbFilesizeHigh: u32,
    cbFreeSpaceRequiredLow: u32,
    cbFreeSpaceRequiredHigh: u32,
    csecToUpgrade: u32,
    Anonymous: JET_DBINFOUPGRADE._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const JET_OBJECTINFO = extern struct {
    cbStruct: u32,
    objtyp: u32,
    dtCreate: f64,
    dtUpdate: f64,
    grbit: u32,
    flags: u32,
    cRecord: u32,
    cPage: u32,
};

pub const JET_OBJECTLIST = extern struct {
    cbStruct: u32,
    tableid: u32,
    cRecord: u32,
    columnidcontainername: u32,
    columnidobjectname: u32,
    columnidobjtyp: u32,
    columniddtCreate: u32,
    columniddtUpdate: u32,
    columnidgrbit: u32,
    columnidflags: u32,
    columnidcRecord: u32,
    columnidcPage: u32,
};

pub const JET_COLUMNLIST = extern struct {
    cbStruct: u32,
    tableid: u32,
    cRecord: u32,
    columnidPresentationOrder: u32,
    columnidcolumnname: u32,
    columnidcolumnid: u32,
    columnidcoltyp: u32,
    columnidCountry: u32,
    columnidLangid: u32,
    columnidCp: u32,
    columnidCollate: u32,
    columnidcbMax: u32,
    columnidgrbit: u32,
    columnidDefault: u32,
    columnidBaseTableName: u32,
    columnidBaseColumnName: u32,
    columnidDefinitionName: u32,
};

pub const JET_COLUMNDEF = extern struct {
    cbStruct: u32,
    columnid: u32,
    coltyp: u32,
    wCountry: u16,
    langid: u16,
    cp: u16,
    wCollate: u16,
    cbMax: u32,
    grbit: u32,
};

pub const JET_COLUMNBASE_A = extern struct {
    cbStruct: u32,
    columnid: u32,
    coltyp: u32,
    wCountry: u16,
    langid: u16,
    cp: u16,
    wFiller: u16,
    cbMax: u32,
    grbit: u32,
    szBaseTableName: [256]i8,
    szBaseColumnName: [256]i8,
};

pub const JET_COLUMNBASE_W = extern struct {
    cbStruct: u32,
    columnid: u32,
    coltyp: u32,
    wCountry: u16,
    langid: u16,
    cp: u16,
    wFiller: u16,
    cbMax: u32,
    grbit: u32,
    szBaseTableName: [256]u16,
    szBaseColumnName: [256]u16,
};

pub const JET_INDEXLIST = extern struct {
    cbStruct: u32,
    tableid: u32,
    cRecord: u32,
    columnidindexname: u32,
    columnidgrbitIndex: u32,
    columnidcKey: u32,
    columnidcEntry: u32,
    columnidcPage: u32,
    columnidcColumn: u32,
    columnidiColumn: u32,
    columnidcolumnid: u32,
    columnidcoltyp: u32,
    columnidCountry: u32,
    columnidLangid: u32,
    columnidCp: u32,
    columnidCollate: u32,
    columnidgrbitColumn: u32,
    columnidcolumnname: u32,
    columnidLCMapFlags: u32,
};

pub const tag_JET_COLUMNCREATE_A = extern struct {
    cbStruct: u32,
    szColumnName: *i8,
    coltyp: u32,
    cbMax: u32,
    grbit: u32,
    pvDefault: *c_void,
    cbDefault: u32,
    cp: u32,
    columnid: u32,
    err: i32,
};

pub const tag_JET_COLUMNCREATE_W = extern struct {
    cbStruct: u32,
    szColumnName: PWSTR,
    coltyp: u32,
    cbMax: u32,
    grbit: u32,
    pvDefault: *c_void,
    cbDefault: u32,
    cp: u32,
    columnid: u32,
    err: i32,
};

pub const tag_JET_USERDEFINEDDEFAULT_A = extern struct {
    szCallback: *i8,
    pbUserData: *u8,
    cbUserData: u32,
    szDependantColumns: *i8,
};

pub const tag_JET_USERDEFINEDDEFAULT_W = extern struct {
    szCallback: PWSTR,
    pbUserData: *u8,
    cbUserData: u32,
    szDependantColumns: PWSTR,
};

pub const JET_CONDITIONALCOLUMN_A = extern struct {
    cbStruct: u32,
    szColumnName: *i8,
    grbit: u32,
};

pub const JET_CONDITIONALCOLUMN_W = extern struct {
    cbStruct: u32,
    szColumnName: PWSTR,
    grbit: u32,
};

pub const JET_UNICODEINDEX = extern struct {
    lcid: u32,
    dwMapFlags: u32,
};

pub const JET_UNICODEINDEX2 = extern struct {
    szLocaleName: PWSTR,
    dwMapFlags: u32,
};

pub const JET_TUPLELIMITS = extern struct {
    chLengthMin: u32,
    chLengthMax: u32,
    chToIndexMax: u32,
    cchIncrement: u32,
    ichStart: u32,
};

pub const JET_SPACEHINTS = extern struct {
    cbStruct: u32,
    ulInitialDensity: u32,
    cbInitial: u32,
    grbit: u32,
    ulMaintDensity: u32,
    ulGrowth: u32,
    cbMinExtent: u32,
    cbMaxExtent: u32,
};

pub const JET_INDEXCREATE_A = extern struct {
    cbStruct: u32,
    szIndexName: *i8,
    szKey: *i8,
    cbKey: u32,
    grbit: u32,
    ulDensity: u32,
    Anonymous1: JET_INDEXCREATE_A._Anonymous1_e__Union,
    Anonymous2: JET_INDEXCREATE_A._Anonymous2_e__Union,
    rgconditionalcolumn: *JET_CONDITIONALCOLUMN_A,
    cConditionalColumn: u32,
    err: i32,
    cbKeyMost: u32,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const JET_INDEXCREATE_W = extern struct {
    cbStruct: u32,
    szIndexName: PWSTR,
    szKey: PWSTR,
    cbKey: u32,
    grbit: u32,
    ulDensity: u32,
    Anonymous1: JET_INDEXCREATE_W._Anonymous1_e__Union,
    Anonymous2: JET_INDEXCREATE_W._Anonymous2_e__Union,
    rgconditionalcolumn: *JET_CONDITIONALCOLUMN_W,
    cConditionalColumn: u32,
    err: i32,
    cbKeyMost: u32,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const JET_INDEXCREATE2_A = extern struct {
    cbStruct: u32,
    szIndexName: *i8,
    szKey: *i8,
    cbKey: u32,
    grbit: u32,
    ulDensity: u32,
    Anonymous1: JET_INDEXCREATE2_A._Anonymous1_e__Union,
    Anonymous2: JET_INDEXCREATE2_A._Anonymous2_e__Union,
    rgconditionalcolumn: *JET_CONDITIONALCOLUMN_A,
    cConditionalColumn: u32,
    err: i32,
    cbKeyMost: u32,
    pSpacehints: *JET_SPACEHINTS,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const JET_INDEXCREATE2_W = extern struct {
    cbStruct: u32,
    szIndexName: PWSTR,
    szKey: PWSTR,
    cbKey: u32,
    grbit: u32,
    ulDensity: u32,
    Anonymous1: JET_INDEXCREATE2_W._Anonymous1_e__Union,
    Anonymous2: JET_INDEXCREATE2_W._Anonymous2_e__Union,
    rgconditionalcolumn: *JET_CONDITIONALCOLUMN_W,
    cConditionalColumn: u32,
    err: i32,
    cbKeyMost: u32,
    pSpacehints: *JET_SPACEHINTS,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const JET_INDEXCREATE3_A = extern struct {
    cbStruct: u32,
    szIndexName: *i8,
    szKey: *i8,
    cbKey: u32,
    grbit: u32,
    ulDensity: u32,
    pidxunicode: *JET_UNICODEINDEX2,
    Anonymous: JET_INDEXCREATE3_A._Anonymous_e__Union,
    rgconditionalcolumn: *JET_CONDITIONALCOLUMN_A,
    cConditionalColumn: u32,
    err: i32,
    cbKeyMost: u32,
    pSpacehints: *JET_SPACEHINTS,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const JET_INDEXCREATE3_W = extern struct {
    cbStruct: u32,
    szIndexName: PWSTR,
    szKey: PWSTR,
    cbKey: u32,
    grbit: u32,
    ulDensity: u32,
    pidxunicode: *JET_UNICODEINDEX2,
    Anonymous: JET_INDEXCREATE3_W._Anonymous_e__Union,
    rgconditionalcolumn: *JET_CONDITIONALCOLUMN_W,
    cConditionalColumn: u32,
    err: i32,
    cbKeyMost: u32,
    pSpacehints: *JET_SPACEHINTS,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const JET_TABLECREATE_A = extern struct {
    cbStruct: u32,
    szTableName: *i8,
    szTemplateTableName: *i8,
    ulPages: u32,
    ulDensity: u32,
    rgcolumncreate: *tag_JET_COLUMNCREATE_A,
    cColumns: u32,
    rgindexcreate: *JET_INDEXCREATE_A,
    cIndexes: u32,
    grbit: u32,
    tableid: u32,
    cCreated: u32,
};

pub const JET_TABLECREATE_W = extern struct {
    cbStruct: u32,
    szTableName: PWSTR,
    szTemplateTableName: PWSTR,
    ulPages: u32,
    ulDensity: u32,
    rgcolumncreate: *tag_JET_COLUMNCREATE_W,
    cColumns: u32,
    rgindexcreate: *JET_INDEXCREATE_W,
    cIndexes: u32,
    grbit: u32,
    tableid: u32,
    cCreated: u32,
};

pub const JET_TABLECREATE2_A = extern struct {
    cbStruct: u32,
    szTableName: *i8,
    szTemplateTableName: *i8,
    ulPages: u32,
    ulDensity: u32,
    rgcolumncreate: *tag_JET_COLUMNCREATE_A,
    cColumns: u32,
    rgindexcreate: *JET_INDEXCREATE_A,
    cIndexes: u32,
    szCallback: *i8,
    cbtyp: u32,
    grbit: u32,
    tableid: u32,
    cCreated: u32,
};

pub const JET_TABLECREATE2_W = extern struct {
    cbStruct: u32,
    szTableName: PWSTR,
    szTemplateTableName: PWSTR,
    ulPages: u32,
    ulDensity: u32,
    rgcolumncreate: *tag_JET_COLUMNCREATE_W,
    cColumns: u32,
    rgindexcreate: *JET_INDEXCREATE_W,
    cIndexes: u32,
    szCallback: PWSTR,
    cbtyp: u32,
    grbit: u32,
    tableid: u32,
    cCreated: u32,
};

pub const JET_TABLECREATE3_A = extern struct {
    cbStruct: u32,
    szTableName: *i8,
    szTemplateTableName: *i8,
    ulPages: u32,
    ulDensity: u32,
    rgcolumncreate: *tag_JET_COLUMNCREATE_A,
    cColumns: u32,
    rgindexcreate: *JET_INDEXCREATE2_A,
    cIndexes: u32,
    szCallback: *i8,
    cbtyp: u32,
    grbit: u32,
    pSeqSpacehints: *JET_SPACEHINTS,
    pLVSpacehints: *JET_SPACEHINTS,
    cbSeparateLV: u32,
    tableid: u32,
    cCreated: u32,
};

pub const JET_TABLECREATE3_W = extern struct {
    cbStruct: u32,
    szTableName: PWSTR,
    szTemplateTableName: PWSTR,
    ulPages: u32,
    ulDensity: u32,
    rgcolumncreate: *tag_JET_COLUMNCREATE_W,
    cColumns: u32,
    rgindexcreate: *JET_INDEXCREATE2_W,
    cIndexes: u32,
    szCallback: PWSTR,
    cbtyp: u32,
    grbit: u32,
    pSeqSpacehints: *JET_SPACEHINTS,
    pLVSpacehints: *JET_SPACEHINTS,
    cbSeparateLV: u32,
    tableid: u32,
    cCreated: u32,
};

pub const JET_TABLECREATE4_A = extern struct {
    cbStruct: u32,
    szTableName: *i8,
    szTemplateTableName: *i8,
    ulPages: u32,
    ulDensity: u32,
    rgcolumncreate: *tag_JET_COLUMNCREATE_A,
    cColumns: u32,
    rgindexcreate: *JET_INDEXCREATE3_A,
    cIndexes: u32,
    szCallback: *i8,
    cbtyp: u32,
    grbit: u32,
    pSeqSpacehints: *JET_SPACEHINTS,
    pLVSpacehints: *JET_SPACEHINTS,
    cbSeparateLV: u32,
    tableid: u32,
    cCreated: u32,
};

pub const JET_TABLECREATE4_W = extern struct {
    cbStruct: u32,
    szTableName: PWSTR,
    szTemplateTableName: PWSTR,
    ulPages: u32,
    ulDensity: u32,
    rgcolumncreate: *tag_JET_COLUMNCREATE_W,
    cColumns: u32,
    rgindexcreate: *JET_INDEXCREATE3_W,
    cIndexes: u32,
    szCallback: PWSTR,
    cbtyp: u32,
    grbit: u32,
    pSeqSpacehints: *JET_SPACEHINTS,
    pLVSpacehints: *JET_SPACEHINTS,
    cbSeparateLV: u32,
    tableid: u32,
    cCreated: u32,
};

pub const JET_OPENTEMPORARYTABLE = extern struct {
    cbStruct: u32,
    prgcolumndef: *const JET_COLUMNDEF,
    ccolumn: u32,
    pidxunicode: *JET_UNICODEINDEX,
    grbit: u32,
    prgcolumnid: *u32,
    cbKeyMost: u32,
    cbVarSegMac: u32,
    tableid: u32,
};

pub const JET_OPENTEMPORARYTABLE2 = extern struct {
    cbStruct: u32,
    prgcolumndef: *const JET_COLUMNDEF,
    ccolumn: u32,
    pidxunicode: *JET_UNICODEINDEX2,
    grbit: u32,
    prgcolumnid: *u32,
    cbKeyMost: u32,
    cbVarSegMac: u32,
    tableid: u32,
};

pub const JET_RETINFO = extern struct {
    cbStruct: u32,
    ibLongValue: u32,
    itagSequence: u32,
    columnidNextTagged: u32,
};

pub const JET_SETINFO = extern struct {
    cbStruct: u32,
    ibLongValue: u32,
    itagSequence: u32,
};

pub const JET_RECPOS = extern struct {
    cbStruct: u32,
    centriesLT: u32,
    centriesInRange: u32,
    centriesTotal: u32,
};

pub const JET_RECORDLIST = extern struct {
    cbStruct: u32,
    tableid: u32,
    cRecord: u32,
    columnidBookmark: u32,
};

pub const JET_INDEXRANGE = extern struct {
    cbStruct: u32,
    tableid: u32,
    grbit: u32,
};

pub const JET_RELOP = extern enum(i32) {
    JET_relopEquals = 0,
    JET_relopPrefixEquals = 1,
    JET_relopNotEquals = 2,
    JET_relopLessThanOrEqual = 3,
    JET_relopLessThan = 4,
    JET_relopGreaterThanOrEqual = 5,
    JET_relopGreaterThan = 6,
    JET_relopBitmaskEqualsZero = 7,
    JET_relopBitmaskNotEqualsZero = 8,
};
pub const JET_relopEquals = JET_RELOP.JET_relopEquals;
pub const JET_relopPrefixEquals = JET_RELOP.JET_relopPrefixEquals;
pub const JET_relopNotEquals = JET_RELOP.JET_relopNotEquals;
pub const JET_relopLessThanOrEqual = JET_RELOP.JET_relopLessThanOrEqual;
pub const JET_relopLessThan = JET_RELOP.JET_relopLessThan;
pub const JET_relopGreaterThanOrEqual = JET_RELOP.JET_relopGreaterThanOrEqual;
pub const JET_relopGreaterThan = JET_RELOP.JET_relopGreaterThan;
pub const JET_relopBitmaskEqualsZero = JET_RELOP.JET_relopBitmaskEqualsZero;
pub const JET_relopBitmaskNotEqualsZero = JET_RELOP.JET_relopBitmaskNotEqualsZero;

pub const JET_INDEX_COLUMN = extern struct {
    columnid: u32,
    relop: JET_RELOP,
    pv: *c_void,
    cb: u32,
    grbit: u32,
};

pub const JET_INDEX_RANGE = extern struct {
    rgStartColumns: *JET_INDEX_COLUMN,
    cStartColumns: u32,
    rgEndColumns: *JET_INDEX_COLUMN,
    cEndColumns: u32,
};

pub const JET_LOGTIME = extern struct {
    bSeconds: i8,
    bMinutes: i8,
    bHours: i8,
    bDay: i8,
    bMonth: i8,
    bYear: i8,
    Anonymous1: JET_LOGTIME._Anonymous1_e__Union,
    Anonymous2: JET_LOGTIME._Anonymous2_e__Union,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const JET_BKLOGTIME = extern struct {
    bSeconds: i8,
    bMinutes: i8,
    bHours: i8,
    bDay: i8,
    bMonth: i8,
    bYear: i8,
    Anonymous1: JET_BKLOGTIME._Anonymous1_e__Union,
    Anonymous2: JET_BKLOGTIME._Anonymous2_e__Union,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const JET_LGPOS = extern struct {
    ib: u16,
    isec: u16,
    lGeneration: i32,
};

pub const JET_SIGNATURE = extern struct {
    ulRandom: u32,
    logtimeCreate: JET_LOGTIME,
    szComputerName: [16]i8,
};

pub const JET_BKINFO = extern struct {
    lgposMark: JET_LGPOS,
    Anonymous: JET_BKINFO._Anonymous_e__Union,
    genLow: u32,
    genHigh: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const JET_DBINFOMISC = extern struct {
    ulVersion: u32,
    ulUpdate: u32,
    signDb: JET_SIGNATURE,
    dbstate: u32,
    lgposConsistent: JET_LGPOS,
    logtimeConsistent: JET_LOGTIME,
    logtimeAttach: JET_LOGTIME,
    lgposAttach: JET_LGPOS,
    logtimeDetach: JET_LOGTIME,
    lgposDetach: JET_LGPOS,
    signLog: JET_SIGNATURE,
    bkinfoFullPrev: JET_BKINFO,
    bkinfoIncPrev: JET_BKINFO,
    bkinfoFullCur: JET_BKINFO,
    fShadowingDisabled: u32,
    fUpgradeDb: u32,
    dwMajorVersion: u32,
    dwMinorVersion: u32,
    dwBuildNumber: u32,
    lSPNumber: i32,
    cbPageSize: u32,
};

pub const JET_DBINFOMISC2 = extern struct {
    ulVersion: u32,
    ulUpdate: u32,
    signDb: JET_SIGNATURE,
    dbstate: u32,
    lgposConsistent: JET_LGPOS,
    logtimeConsistent: JET_LOGTIME,
    logtimeAttach: JET_LOGTIME,
    lgposAttach: JET_LGPOS,
    logtimeDetach: JET_LOGTIME,
    lgposDetach: JET_LGPOS,
    signLog: JET_SIGNATURE,
    bkinfoFullPrev: JET_BKINFO,
    bkinfoIncPrev: JET_BKINFO,
    bkinfoFullCur: JET_BKINFO,
    fShadowingDisabled: u32,
    fUpgradeDb: u32,
    dwMajorVersion: u32,
    dwMinorVersion: u32,
    dwBuildNumber: u32,
    lSPNumber: i32,
    cbPageSize: u32,
    genMinRequired: u32,
    genMaxRequired: u32,
    logtimeGenMaxCreate: JET_LOGTIME,
    ulRepairCount: u32,
    logtimeRepair: JET_LOGTIME,
    ulRepairCountOld: u32,
    ulECCFixSuccess: u32,
    logtimeECCFixSuccess: JET_LOGTIME,
    ulECCFixSuccessOld: u32,
    ulECCFixFail: u32,
    logtimeECCFixFail: JET_LOGTIME,
    ulECCFixFailOld: u32,
    ulBadChecksum: u32,
    logtimeBadChecksum: JET_LOGTIME,
    ulBadChecksumOld: u32,
};

pub const JET_DBINFOMISC3 = extern struct {
    ulVersion: u32,
    ulUpdate: u32,
    signDb: JET_SIGNATURE,
    dbstate: u32,
    lgposConsistent: JET_LGPOS,
    logtimeConsistent: JET_LOGTIME,
    logtimeAttach: JET_LOGTIME,
    lgposAttach: JET_LGPOS,
    logtimeDetach: JET_LOGTIME,
    lgposDetach: JET_LGPOS,
    signLog: JET_SIGNATURE,
    bkinfoFullPrev: JET_BKINFO,
    bkinfoIncPrev: JET_BKINFO,
    bkinfoFullCur: JET_BKINFO,
    fShadowingDisabled: u32,
    fUpgradeDb: u32,
    dwMajorVersion: u32,
    dwMinorVersion: u32,
    dwBuildNumber: u32,
    lSPNumber: i32,
    cbPageSize: u32,
    genMinRequired: u32,
    genMaxRequired: u32,
    logtimeGenMaxCreate: JET_LOGTIME,
    ulRepairCount: u32,
    logtimeRepair: JET_LOGTIME,
    ulRepairCountOld: u32,
    ulECCFixSuccess: u32,
    logtimeECCFixSuccess: JET_LOGTIME,
    ulECCFixSuccessOld: u32,
    ulECCFixFail: u32,
    logtimeECCFixFail: JET_LOGTIME,
    ulECCFixFailOld: u32,
    ulBadChecksum: u32,
    logtimeBadChecksum: JET_LOGTIME,
    ulBadChecksumOld: u32,
    genCommitted: u32,
};

pub const JET_DBINFOMISC4 = extern struct {
    ulVersion: u32,
    ulUpdate: u32,
    signDb: JET_SIGNATURE,
    dbstate: u32,
    lgposConsistent: JET_LGPOS,
    logtimeConsistent: JET_LOGTIME,
    logtimeAttach: JET_LOGTIME,
    lgposAttach: JET_LGPOS,
    logtimeDetach: JET_LOGTIME,
    lgposDetach: JET_LGPOS,
    signLog: JET_SIGNATURE,
    bkinfoFullPrev: JET_BKINFO,
    bkinfoIncPrev: JET_BKINFO,
    bkinfoFullCur: JET_BKINFO,
    fShadowingDisabled: u32,
    fUpgradeDb: u32,
    dwMajorVersion: u32,
    dwMinorVersion: u32,
    dwBuildNumber: u32,
    lSPNumber: i32,
    cbPageSize: u32,
    genMinRequired: u32,
    genMaxRequired: u32,
    logtimeGenMaxCreate: JET_LOGTIME,
    ulRepairCount: u32,
    logtimeRepair: JET_LOGTIME,
    ulRepairCountOld: u32,
    ulECCFixSuccess: u32,
    logtimeECCFixSuccess: JET_LOGTIME,
    ulECCFixSuccessOld: u32,
    ulECCFixFail: u32,
    logtimeECCFixFail: JET_LOGTIME,
    ulECCFixFailOld: u32,
    ulBadChecksum: u32,
    logtimeBadChecksum: JET_LOGTIME,
    ulBadChecksumOld: u32,
    genCommitted: u32,
    bkinfoCopyPrev: JET_BKINFO,
    bkinfoDiffPrev: JET_BKINFO,
};

pub const JET_THREADSTATS = extern struct {
    cbStruct: u32,
    cPageReferenced: u32,
    cPageRead: u32,
    cPagePreread: u32,
    cPageDirtied: u32,
    cPageRedirtied: u32,
    cLogRecord: u32,
    cbLogRecord: u32,
};

pub const JET_THREADSTATS2 = extern struct {
    cbStruct: u32,
    cPageReferenced: u32,
    cPageRead: u32,
    cPagePreread: u32,
    cPageDirtied: u32,
    cPageRedirtied: u32,
    cLogRecord: u32,
    cbLogRecord: u32,
    cusecPageCacheMiss: u64,
    cPageCacheMiss: u32,
};

pub const JET_RSTINFO_A = extern struct {
    cbStruct: u32,
    rgrstmap: *JET_RSTMAP_A,
    crstmap: i32,
    lgposStop: JET_LGPOS,
    logtimeStop: JET_LOGTIME,
    pfnStatus: JET_PFNSTATUS,
};

pub const JET_RSTINFO_W = extern struct {
    cbStruct: u32,
    rgrstmap: *JET_RSTMAP_W,
    crstmap: i32,
    lgposStop: JET_LGPOS,
    logtimeStop: JET_LOGTIME,
    pfnStatus: JET_PFNSTATUS,
};

pub const JET_ERRCAT = extern enum(i32) {
    JET_errcatUnknown = 0,
    JET_errcatError = 1,
    JET_errcatOperation = 2,
    JET_errcatFatal = 3,
    JET_errcatIO = 4,
    JET_errcatResource = 5,
    JET_errcatMemory = 6,
    JET_errcatQuota = 7,
    JET_errcatDisk = 8,
    JET_errcatData = 9,
    JET_errcatCorruption = 10,
    JET_errcatInconsistent = 11,
    JET_errcatFragmentation = 12,
    JET_errcatApi = 13,
    JET_errcatUsage = 14,
    JET_errcatState = 15,
    JET_errcatObsolete = 16,
    JET_errcatMax = 17,
};
pub const JET_errcatUnknown = JET_ERRCAT.JET_errcatUnknown;
pub const JET_errcatError = JET_ERRCAT.JET_errcatError;
pub const JET_errcatOperation = JET_ERRCAT.JET_errcatOperation;
pub const JET_errcatFatal = JET_ERRCAT.JET_errcatFatal;
pub const JET_errcatIO = JET_ERRCAT.JET_errcatIO;
pub const JET_errcatResource = JET_ERRCAT.JET_errcatResource;
pub const JET_errcatMemory = JET_ERRCAT.JET_errcatMemory;
pub const JET_errcatQuota = JET_ERRCAT.JET_errcatQuota;
pub const JET_errcatDisk = JET_ERRCAT.JET_errcatDisk;
pub const JET_errcatData = JET_ERRCAT.JET_errcatData;
pub const JET_errcatCorruption = JET_ERRCAT.JET_errcatCorruption;
pub const JET_errcatInconsistent = JET_ERRCAT.JET_errcatInconsistent;
pub const JET_errcatFragmentation = JET_ERRCAT.JET_errcatFragmentation;
pub const JET_errcatApi = JET_ERRCAT.JET_errcatApi;
pub const JET_errcatUsage = JET_ERRCAT.JET_errcatUsage;
pub const JET_errcatState = JET_ERRCAT.JET_errcatState;
pub const JET_errcatObsolete = JET_ERRCAT.JET_errcatObsolete;
pub const JET_errcatMax = JET_ERRCAT.JET_errcatMax;

pub const JET_ERRINFOBASIC_W = extern struct {
    cbStruct: u32,
    errValue: i32,
    errcatMostSpecific: JET_ERRCAT,
    rgCategoricalHierarchy: [8]u8,
    lSourceLine: u32,
    rgszSourceFile: [64]u16,
};

pub const JET_COMMIT_ID = extern struct {
    signLog: JET_SIGNATURE,
    reserved: i32,
    commitId: i64,
};

pub const JET_PFNDURABLECOMMITCALLBACK = fn(
    instance: u32,
    pCommitIdSeen: *JET_COMMIT_ID,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const JET_INDEXCHECKING = extern enum(i32) {
    JET_IndexCheckingOff = 0,
    JET_IndexCheckingOn = 1,
    JET_IndexCheckingDeferToOpenTable = 2,
    JET_IndexCheckingMax = 3,
};
pub const JET_IndexCheckingOff = JET_INDEXCHECKING.JET_IndexCheckingOff;
pub const JET_IndexCheckingOn = JET_INDEXCHECKING.JET_IndexCheckingOn;
pub const JET_IndexCheckingDeferToOpenTable = JET_INDEXCHECKING.JET_IndexCheckingDeferToOpenTable;
pub const JET_IndexCheckingMax = JET_INDEXCHECKING.JET_IndexCheckingMax;

pub const JET_OPERATIONCONTEXT = extern struct {
    ulUserID: u32,
    nOperationID: u8,
    nOperationType: u8,
    nClientType: u8,
    fFlags: u8,
};

pub const JET_SETCOLUMN = extern struct {
    columnid: u32,
    pvData: *const c_void,
    cbData: u32,
    grbit: u32,
    ibLongValue: u32,
    itagSequence: u32,
    err: i32,
};

pub const JET_SETSYSPARAM_A = extern struct {
    paramid: u32,
    lParam: u32,
    sz: *const i8,
    err: i32,
};

pub const JET_SETSYSPARAM_W = extern struct {
    paramid: u32,
    lParam: u32,
    sz: [*:0]const u16,
    err: i32,
};

pub const JET_RETRIEVECOLUMN = extern struct {
    columnid: u32,
    pvData: *c_void,
    cbData: u32,
    cbActual: u32,
    grbit: u32,
    ibLongValue: u32,
    itagSequence: u32,
    columnidNextTagged: u32,
    err: i32,
};

pub const JET_ENUMCOLUMNID = extern struct {
    columnid: u32,
    ctagSequence: u32,
    rgtagSequence: *u32,
};

pub const JET_ENUMCOLUMNVALUE = extern struct {
    itagSequence: u32,
    err: i32,
    cbData: u32,
    pvData: *c_void,
};

pub const JET_ENUMCOLUMN = extern struct {
    columnid: u32,
    err: i32,
    Anonymous: JET_ENUMCOLUMN._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const JET_PFNREALLOC = fn(
    pvContext: ?*c_void,
    pv: ?*c_void,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const JET_RECSIZE = extern struct {
    cbData: u64,
    cbLongValueData: u64,
    cbOverhead: u64,
    cbLongValueOverhead: u64,
    cNonTaggedColumns: u64,
    cTaggedColumns: u64,
    cLongValues: u64,
    cMultiValues: u64,
};

pub const JET_RECSIZE2 = extern struct {
    cbData: u64,
    cbLongValueData: u64,
    cbOverhead: u64,
    cbLongValueOverhead: u64,
    cNonTaggedColumns: u64,
    cTaggedColumns: u64,
    cLongValues: u64,
    cMultiValues: u64,
    cCompressedColumns: u64,
    cbDataCompressed: u64,
    cbLongValueDataCompressed: u64,
};

pub const JET_LOGINFO_A = extern struct {
    cbSize: u32,
    ulGenLow: u32,
    ulGenHigh: u32,
    szBaseName: [4]i8,
};

pub const JET_LOGINFO_W = extern struct {
    cbSize: u32,
    ulGenLow: u32,
    ulGenHigh: u32,
    szBaseName: [4]u16,
};

pub const JET_INSTANCE_INFO_A = extern struct {
    hInstanceId: u32,
    szInstanceName: *i8,
    cDatabases: u32,
    szDatabaseFileName: **i8,
    szDatabaseDisplayName: **i8,
    szDatabaseSLVFileName_Obsolete: **i8,
};

pub const JET_INSTANCE_INFO_W = extern struct {
    hInstanceId: u32,
    szInstanceName: PWSTR,
    cDatabases: u32,
    szDatabaseFileName: **u16,
    szDatabaseDisplayName: **u16,
    szDatabaseSLVFileName_Obsolete: **u16,
};


//--------------------------------------------------------------------------------
// Section: Functions (274)
//--------------------------------------------------------------------------------
pub extern "OLE32" fn CreateStreamOnHGlobal(
    hGlobal: ?*c_void,
    fDeleteOnRelease: BOOL,
    ppstm: **IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn GetHGlobalFromStream(
    pstm: *IStream,
    phglobal: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn PropVariantCopy(
    pvarDest: *PROPVARIANT,
    pvarSrc: *const PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn PropVariantClear(
    pvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn FreePropVariantArray(
    cVariants: u32,
    rgvars: [*]PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn WriteFmtUserTypeStg(
    pstg: *IStorage,
    cf: u16,
    lpszUserType: PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn ReadFmtUserTypeStg(
    pstg: *IStorage,
    pcf: *u16,
    lplpszUserType: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "ole32" fn OleConvertOLESTREAMToIStorage(
    lpolestream: *OLESTREAM,
    pstg: *IStorage,
    ptd: *const DVTARGETDEVICE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "ole32" fn OleConvertIStorageToOLESTREAM(
    pstg: *IStorage,
    lpolestream: *OLESTREAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn SetConvertStg(
    pStg: *IStorage,
    fConvert: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "ole32" fn OleConvertIStorageToOLESTREAMEx(
    pstg: *IStorage,
    cfFormat: u16,
    lWidth: i32,
    lHeight: i32,
    dwSize: u32,
    pmedium: *STGMEDIUM,
    polestm: *OLESTREAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "ole32" fn OleConvertOLESTREAMToIStorageEx(
    polestm: *OLESTREAM,
    pstg: *IStorage,
    pcfFormat: *u16,
    plwWidth: *i32,
    plHeight: *i32,
    pdwSize: *u32,
    pmedium: *STGMEDIUM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn StgSerializePropVariant(
    ppropvar: *const PROPVARIANT,
    ppProp: **SERIALIZEDPROPERTYVALUE,
    pcb: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn StgDeserializePropVariant(
    pprop: *const SERIALIZEDPROPERTYVALUE,
    cbMax: u32,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn StgCreateDocfile(
    pwcsName: ?[*:0]const u16,
    grfMode: u32,
    reserved: u32,
    ppstgOpen: **IStorage,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn StgCreateDocfileOnILockBytes(
    plkbyt: *ILockBytes,
    grfMode: u32,
    reserved: u32,
    ppstgOpen: **IStorage,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn StgOpenStorage(
    pwcsName: ?[*:0]const u16,
    pstgPriority: ?*IStorage,
    grfMode: u32,
    snbExclude: ?*?*u16,
    reserved: u32,
    ppstgOpen: **IStorage,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn StgOpenStorageOnILockBytes(
    plkbyt: *ILockBytes,
    pstgPriority: ?*IStorage,
    grfMode: u32,
    snbExclude: ?*?*u16,
    reserved: u32,
    ppstgOpen: **IStorage,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn StgIsStorageFile(
    pwcsName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn StgIsStorageILockBytes(
    plkbyt: *ILockBytes,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn StgSetTimes(
    lpszName: [*:0]const u16,
    pctime: ?*const FILETIME,
    patime: ?*const FILETIME,
    pmtime: ?*const FILETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn StgCreateStorageEx(
    pwcsName: ?[*:0]const u16,
    grfMode: u32,
    stgfmt: u32,
    grfAttrs: u32,
    pStgOptions: ?*STGOPTIONS,
    pSecurityDescriptor: ?*c_void,
    riid: *const Guid,
    ppObjectOpen: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn StgOpenStorageEx(
    pwcsName: [*:0]const u16,
    grfMode: u32,
    stgfmt: u32,
    grfAttrs: u32,
    pStgOptions: ?*STGOPTIONS,
    pSecurityDescriptor: ?*c_void,
    riid: *const Guid,
    ppObjectOpen: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn StgCreatePropStg(
    pUnk: *IUnknown,
    fmtid: *const Guid,
    pclsid: *const Guid,
    grfFlags: u32,
    dwReserved: u32,
    ppPropStg: **IPropertyStorage,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn StgOpenPropStg(
    pUnk: *IUnknown,
    fmtid: *const Guid,
    grfFlags: u32,
    dwReserved: u32,
    ppPropStg: **IPropertyStorage,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn StgCreatePropSetStg(
    pStorage: *IStorage,
    dwReserved: u32,
    ppPropSetStg: **IPropertySetStorage,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn FmtIdToPropStgName(
    pfmtid: *const Guid,
    oszName: PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn PropStgNameToFmtId(
    oszName: [*:0]const u16,
    pfmtid: *Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn ReadClassStg(
    pStg: *IStorage,
    pclsid: *Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn WriteClassStg(
    pStg: *IStorage,
    rclsid: *const Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn ReadClassStm(
    pStm: *IStream,
    pclsid: *Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn WriteClassStm(
    pStm: *IStream,
    rclsid: *const Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn GetHGlobalFromILockBytes(
    plkbyt: *ILockBytes,
    phglobal: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn CreateILockBytesOnHGlobal(
    hGlobal: ?*c_void,
    fDeleteOnRelease: BOOL,
    pplkbyt: **ILockBytes,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn GetConvertStg(
    pStg: *IStorage,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "ole32" fn CoBuildVersion(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ole32" fn DcomChannelSetHResult(
    pvReserved: ?*c_void,
    pulReserved: ?*u32,
    appsHR: HRESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "ole32" fn StgOpenAsyncDocfileOnIFillLockBytes(
    pflb: *IFillLockBytes,
    grfMode: u32,
    asyncFlags: u32,
    ppstgOpen: **IStorage,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "ole32" fn StgGetIFillLockBytesOnILockBytes(
    pilb: *ILockBytes,
    ppflb: **IFillLockBytes,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "ole32" fn StgGetIFillLockBytesOnFile(
    pwcsName: [*:0]const u16,
    ppflb: **IFillLockBytes,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dflayout" fn StgOpenLayoutDocfile(
    pwcsDfName: [*:0]const u16,
    grfMode: u32,
    reserved: u32,
    ppstgOpen: **IStorage,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "ole32" fn StgConvertVariantToProperty(
    pvar: *const PROPVARIANT,
    CodePage: u16,
    pprop: ?[*]SERIALIZEDPROPERTYVALUE,
    pcb: *u32,
    pid: u32,
    fReserved: u8,
    pcIndirect: ?*u32,
) callconv(@import("std").os.windows.WINAPI) *SERIALIZEDPROPERTYVALUE;

pub extern "ole32" fn StgConvertPropertyToVariant(
    pprop: *const SERIALIZEDPROPERTYVALUE,
    CodePage: u16,
    pvar: *PROPVARIANT,
    pma: *PMemoryAllocator,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ole32" fn CreateStdProgressIndicator(
    hwndParent: HWND,
    pszTitle: [*:0]const u16,
    pIbscCaller: *IBindStatusCallback,
    ppIbsc: **IBindStatusCallback,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "ole32" fn StgPropertyLengthAsVariant(
    pProp: [*]const SERIALIZEDPROPERTYVALUE,
    cbProp: u32,
    CodePage: u16,
    bReserved: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ESENT" fn JetInit(
    pinstance: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetInit2(
    pinstance: ?*u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetInit3A(
    pinstance: ?*u32,
    prstInfo: ?*JET_RSTINFO_A,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetInit3W(
    pinstance: ?*u32,
    prstInfo: ?*JET_RSTINFO_W,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateInstanceA(
    pinstance: *u32,
    szInstanceName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateInstanceW(
    pinstance: *u32,
    szInstanceName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateInstance2A(
    pinstance: *u32,
    szInstanceName: ?*i8,
    szDisplayName: ?*i8,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateInstance2W(
    pinstance: *u32,
    szInstanceName: ?*u16,
    szDisplayName: ?*u16,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetInstanceMiscInfo(
    instance: u32,
    pvResult: [*]u8,
    cbMax: u32,
    InfoLevel: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetTerm(
    instance: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetTerm2(
    instance: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetStopService(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetStopServiceInstance(
    instance: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetStopServiceInstance2(
    instance: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetStopBackup(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetStopBackupInstance(
    instance: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetSystemParameterA(
    pinstance: ?*u32,
    sesid: u32,
    paramid: u32,
    lParam: u32,
    szParam: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetSystemParameterW(
    pinstance: ?*u32,
    sesid: u32,
    paramid: u32,
    lParam: u32,
    szParam: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetSystemParameterA(
    instance: u32,
    sesid: u32,
    paramid: u32,
    plParam: ?*u32,
    szParam: ?[*]i8,
    cbMax: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetSystemParameterW(
    instance: u32,
    sesid: u32,
    paramid: u32,
    plParam: ?*u32,
    szParam: ?[*:0]u16,
    cbMax: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetEnableMultiInstanceA(
    psetsysparam: ?[*]JET_SETSYSPARAM_A,
    csetsysparam: u32,
    pcsetsucceed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetEnableMultiInstanceW(
    psetsysparam: ?[*]JET_SETSYSPARAM_W,
    csetsysparam: u32,
    pcsetsucceed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetThreadStats(
    pvResult: [*]u8,
    cbMax: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetBeginSessionA(
    instance: u32,
    psesid: *u32,
    szUserName: ?*i8,
    szPassword: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetBeginSessionW(
    instance: u32,
    psesid: *u32,
    szUserName: ?*u16,
    szPassword: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDupSession(
    sesid: u32,
    psesid: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetEndSession(
    sesid: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetVersion(
    sesid: u32,
    pwVersion: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetIdle(
    sesid: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateDatabaseA(
    sesid: u32,
    szFilename: *i8,
    szConnect: ?*i8,
    pdbid: *u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateDatabaseW(
    sesid: u32,
    szFilename: *u16,
    szConnect: ?*u16,
    pdbid: *u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateDatabase2A(
    sesid: u32,
    szFilename: *i8,
    cpgDatabaseSizeMax: u32,
    pdbid: *u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateDatabase2W(
    sesid: u32,
    szFilename: *u16,
    cpgDatabaseSizeMax: u32,
    pdbid: *u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetAttachDatabaseA(
    sesid: u32,
    szFilename: *i8,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetAttachDatabaseW(
    sesid: u32,
    szFilename: *u16,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetAttachDatabase2A(
    sesid: u32,
    szFilename: *i8,
    cpgDatabaseSizeMax: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetAttachDatabase2W(
    sesid: u32,
    szFilename: *u16,
    cpgDatabaseSizeMax: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDetachDatabaseA(
    sesid: u32,
    szFilename: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDetachDatabaseW(
    sesid: u32,
    szFilename: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDetachDatabase2A(
    sesid: u32,
    szFilename: ?*i8,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDetachDatabase2W(
    sesid: u32,
    szFilename: ?*u16,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetObjectInfoA(
    sesid: u32,
    dbid: u32,
    objtyp: u32,
    szContainerName: ?*i8,
    szObjectName: ?*i8,
    pvResult: [*]u8,
    cbMax: u32,
    InfoLevel: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetObjectInfoW(
    sesid: u32,
    dbid: u32,
    objtyp: u32,
    szContainerName: ?*u16,
    szObjectName: ?*u16,
    pvResult: [*]u8,
    cbMax: u32,
    InfoLevel: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetTableInfoA(
    sesid: u32,
    tableid: u32,
    pvResult: [*]u8,
    cbMax: u32,
    InfoLevel: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetTableInfoW(
    sesid: u32,
    tableid: u32,
    pvResult: [*]u8,
    cbMax: u32,
    InfoLevel: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateTableA(
    sesid: u32,
    dbid: u32,
    szTableName: *i8,
    lPages: u32,
    lDensity: u32,
    ptableid: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateTableW(
    sesid: u32,
    dbid: u32,
    szTableName: *u16,
    lPages: u32,
    lDensity: u32,
    ptableid: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateTableColumnIndexA(
    sesid: u32,
    dbid: u32,
    ptablecreate: *JET_TABLECREATE_A,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateTableColumnIndexW(
    sesid: u32,
    dbid: u32,
    ptablecreate: *JET_TABLECREATE_W,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateTableColumnIndex2A(
    sesid: u32,
    dbid: u32,
    ptablecreate: *JET_TABLECREATE2_A,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateTableColumnIndex2W(
    sesid: u32,
    dbid: u32,
    ptablecreate: *JET_TABLECREATE2_W,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateTableColumnIndex3A(
    sesid: u32,
    dbid: u32,
    ptablecreate: *JET_TABLECREATE3_A,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateTableColumnIndex3W(
    sesid: u32,
    dbid: u32,
    ptablecreate: *JET_TABLECREATE3_W,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateTableColumnIndex4A(
    sesid: u32,
    dbid: u32,
    ptablecreate: *JET_TABLECREATE4_A,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateTableColumnIndex4W(
    sesid: u32,
    dbid: u32,
    ptablecreate: *JET_TABLECREATE4_W,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDeleteTableA(
    sesid: u32,
    dbid: u32,
    szTableName: *i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDeleteTableW(
    sesid: u32,
    dbid: u32,
    szTableName: *u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetRenameTableA(
    sesid: u32,
    dbid: u32,
    szName: *i8,
    szNameNew: *i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetRenameTableW(
    sesid: u32,
    dbid: u32,
    szName: *u16,
    szNameNew: *u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetTableColumnInfoA(
    sesid: u32,
    tableid: u32,
    szColumnName: ?*i8,
    pvResult: [*]u8,
    cbMax: u32,
    InfoLevel: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetTableColumnInfoW(
    sesid: u32,
    tableid: u32,
    szColumnName: ?*u16,
    pvResult: [*]u8,
    cbMax: u32,
    InfoLevel: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetColumnInfoA(
    sesid: u32,
    dbid: u32,
    szTableName: *i8,
    pColumnNameOrId: ?*i8,
    pvResult: [*]u8,
    cbMax: u32,
    InfoLevel: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetColumnInfoW(
    sesid: u32,
    dbid: u32,
    szTableName: *u16,
    pwColumnNameOrId: ?*u16,
    pvResult: [*]u8,
    cbMax: u32,
    InfoLevel: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetAddColumnA(
    sesid: u32,
    tableid: u32,
    szColumnName: *i8,
    pcolumndef: *const JET_COLUMNDEF,
    pvDefault: ?[*]const u8,
    cbDefault: u32,
    pcolumnid: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetAddColumnW(
    sesid: u32,
    tableid: u32,
    szColumnName: *u16,
    pcolumndef: *const JET_COLUMNDEF,
    pvDefault: ?[*]const u8,
    cbDefault: u32,
    pcolumnid: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDeleteColumnA(
    sesid: u32,
    tableid: u32,
    szColumnName: *i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDeleteColumnW(
    sesid: u32,
    tableid: u32,
    szColumnName: *u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDeleteColumn2A(
    sesid: u32,
    tableid: u32,
    szColumnName: *i8,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDeleteColumn2W(
    sesid: u32,
    tableid: u32,
    szColumnName: *u16,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetRenameColumnA(
    sesid: u32,
    tableid: u32,
    szName: *i8,
    szNameNew: *i8,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetRenameColumnW(
    sesid: u32,
    tableid: u32,
    szName: *u16,
    szNameNew: *u16,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetColumnDefaultValueA(
    sesid: u32,
    dbid: u32,
    szTableName: *i8,
    szColumnName: *i8,
    pvData: [*]const u8,
    cbData: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetColumnDefaultValueW(
    sesid: u32,
    dbid: u32,
    szTableName: *u16,
    szColumnName: *u16,
    pvData: [*]const u8,
    cbData: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetTableIndexInfoA(
    sesid: u32,
    tableid: u32,
    szIndexName: ?*i8,
    pvResult: [*]u8,
    cbResult: u32,
    InfoLevel: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetTableIndexInfoW(
    sesid: u32,
    tableid: u32,
    szIndexName: ?*u16,
    pvResult: [*]u8,
    cbResult: u32,
    InfoLevel: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetIndexInfoA(
    sesid: u32,
    dbid: u32,
    szTableName: *i8,
    szIndexName: ?*i8,
    pvResult: [*]u8,
    cbResult: u32,
    InfoLevel: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetIndexInfoW(
    sesid: u32,
    dbid: u32,
    szTableName: *u16,
    szIndexName: ?*u16,
    pvResult: [*]u8,
    cbResult: u32,
    InfoLevel: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateIndexA(
    sesid: u32,
    tableid: u32,
    szIndexName: *i8,
    grbit: u32,
    szKey: [*]const i8,
    cbKey: u32,
    lDensity: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateIndexW(
    sesid: u32,
    tableid: u32,
    szIndexName: *u16,
    grbit: u32,
    szKey: [*:0]const u16,
    cbKey: u32,
    lDensity: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateIndex2A(
    sesid: u32,
    tableid: u32,
    pindexcreate: [*]JET_INDEXCREATE_A,
    cIndexCreate: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateIndex2W(
    sesid: u32,
    tableid: u32,
    pindexcreate: [*]JET_INDEXCREATE_W,
    cIndexCreate: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateIndex3A(
    sesid: u32,
    tableid: u32,
    pindexcreate: [*]JET_INDEXCREATE2_A,
    cIndexCreate: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateIndex3W(
    sesid: u32,
    tableid: u32,
    pindexcreate: [*]JET_INDEXCREATE2_W,
    cIndexCreate: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateIndex4A(
    sesid: u32,
    tableid: u32,
    pindexcreate: [*]JET_INDEXCREATE3_A,
    cIndexCreate: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCreateIndex4W(
    sesid: u32,
    tableid: u32,
    pindexcreate: [*]JET_INDEXCREATE3_W,
    cIndexCreate: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDeleteIndexA(
    sesid: u32,
    tableid: u32,
    szIndexName: *i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDeleteIndexW(
    sesid: u32,
    tableid: u32,
    szIndexName: *u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetBeginTransaction(
    sesid: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetBeginTransaction2(
    sesid: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetBeginTransaction3(
    sesid: u32,
    trxid: i64,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCommitTransaction(
    sesid: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCommitTransaction2(
    sesid: u32,
    grbit: u32,
    cmsecDurableCommit: u32,
    pCommitId: ?*JET_COMMIT_ID,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetRollback(
    sesid: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetDatabaseInfoA(
    sesid: u32,
    dbid: u32,
    pvResult: [*]u8,
    cbMax: u32,
    InfoLevel: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetDatabaseInfoW(
    sesid: u32,
    dbid: u32,
    pvResult: [*]u8,
    cbMax: u32,
    InfoLevel: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetDatabaseFileInfoA(
    szDatabaseName: *i8,
    pvResult: [*]u8,
    cbMax: u32,
    InfoLevel: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetDatabaseFileInfoW(
    szDatabaseName: *u16,
    pvResult: [*]u8,
    cbMax: u32,
    InfoLevel: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOpenDatabaseA(
    sesid: u32,
    szFilename: *i8,
    szConnect: ?*i8,
    pdbid: *u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOpenDatabaseW(
    sesid: u32,
    szFilename: *u16,
    szConnect: ?*u16,
    pdbid: *u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCloseDatabase(
    sesid: u32,
    dbid: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOpenTableA(
    sesid: u32,
    dbid: u32,
    szTableName: *i8,
    pvParameters: ?[*]const u8,
    cbParameters: u32,
    grbit: u32,
    ptableid: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOpenTableW(
    sesid: u32,
    dbid: u32,
    szTableName: *u16,
    pvParameters: ?[*]const u8,
    cbParameters: u32,
    grbit: u32,
    ptableid: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetTableSequential(
    sesid: u32,
    tableid: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetResetTableSequential(
    sesid: u32,
    tableid: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCloseTable(
    sesid: u32,
    tableid: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDelete(
    sesid: u32,
    tableid: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetUpdate(
    sesid: u32,
    tableid: u32,
    pvBookmark: ?[*]u8,
    cbBookmark: u32,
    pcbActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetUpdate2(
    sesid: u32,
    tableid: u32,
    pvBookmark: ?[*]u8,
    cbBookmark: u32,
    pcbActual: ?*u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetEscrowUpdate(
    sesid: u32,
    tableid: u32,
    columnid: u32,
    pv: [*]u8,
    cbMax: u32,
    pvOld: ?[*]u8,
    cbOldMax: u32,
    pcbOldActual: ?*u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetRetrieveColumn(
    sesid: u32,
    tableid: u32,
    columnid: u32,
    pvData: ?[*]u8,
    cbData: u32,
    pcbActual: ?*u32,
    grbit: u32,
    pretinfo: ?*JET_RETINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetRetrieveColumns(
    sesid: u32,
    tableid: u32,
    pretrievecolumn: ?[*]JET_RETRIEVECOLUMN,
    cretrievecolumn: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetEnumerateColumns(
    sesid: u32,
    tableid: u32,
    cEnumColumnId: u32,
    rgEnumColumnId: ?[*]JET_ENUMCOLUMNID,
    pcEnumColumn: *u32,
    prgEnumColumn: **JET_ENUMCOLUMN,
    pfnRealloc: JET_PFNREALLOC,
    pvReallocContext: ?*c_void,
    cbDataMost: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetRecordSize(
    sesid: u32,
    tableid: u32,
    precsize: *JET_RECSIZE,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetRecordSize2(
    sesid: u32,
    tableid: u32,
    precsize: *JET_RECSIZE2,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetColumn(
    sesid: u32,
    tableid: u32,
    columnid: u32,
    pvData: ?[*]const u8,
    cbData: u32,
    grbit: u32,
    psetinfo: ?*JET_SETINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetColumns(
    sesid: u32,
    tableid: u32,
    psetcolumn: ?[*]JET_SETCOLUMN,
    csetcolumn: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetPrepareUpdate(
    sesid: u32,
    tableid: u32,
    prep: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetRecordPosition(
    sesid: u32,
    tableid: u32,
    precpos: [*]JET_RECPOS,
    cbRecpos: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGotoPosition(
    sesid: u32,
    tableid: u32,
    precpos: *JET_RECPOS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetCursorInfo(
    sesid: u32,
    tableid: u32,
    pvResult: [*]u8,
    cbMax: u32,
    InfoLevel: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDupCursor(
    sesid: u32,
    tableid: u32,
    ptableid: *u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetCurrentIndexA(
    sesid: u32,
    tableid: u32,
    szIndexName: [*]i8,
    cbIndexName: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetCurrentIndexW(
    sesid: u32,
    tableid: u32,
    szIndexName: [*:0]u16,
    cbIndexName: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetCurrentIndexA(
    sesid: u32,
    tableid: u32,
    szIndexName: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetCurrentIndexW(
    sesid: u32,
    tableid: u32,
    szIndexName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetCurrentIndex2A(
    sesid: u32,
    tableid: u32,
    szIndexName: ?*i8,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetCurrentIndex2W(
    sesid: u32,
    tableid: u32,
    szIndexName: ?*u16,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetCurrentIndex3A(
    sesid: u32,
    tableid: u32,
    szIndexName: ?*i8,
    grbit: u32,
    itagSequence: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetCurrentIndex3W(
    sesid: u32,
    tableid: u32,
    szIndexName: ?*u16,
    grbit: u32,
    itagSequence: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetCurrentIndex4A(
    sesid: u32,
    tableid: u32,
    szIndexName: ?*i8,
    pindexid: ?*JET_INDEXID,
    grbit: u32,
    itagSequence: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetCurrentIndex4W(
    sesid: u32,
    tableid: u32,
    szIndexName: ?*u16,
    pindexid: ?*JET_INDEXID,
    grbit: u32,
    itagSequence: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetMove(
    sesid: u32,
    tableid: u32,
    cRow: i32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetCursorFilter(
    sesid: u32,
    tableid: u32,
    rgColumnFilters: [*]JET_INDEX_COLUMN,
    cColumnFilters: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetLock(
    sesid: u32,
    tableid: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetMakeKey(
    sesid: u32,
    tableid: u32,
    pvData: ?[*]const u8,
    cbData: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSeek(
    sesid: u32,
    tableid: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetPrereadKeys(
    sesid: u32,
    tableid: u32,
    rgpvKeys: [*]const *const c_void,
    rgcbKeys: [*]const u32,
    ckeys: i32,
    pckeysPreread: ?*i32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetPrereadIndexRanges(
    sesid: u32,
    tableid: u32,
    rgIndexRanges: [*]const JET_INDEX_RANGE,
    cIndexRanges: u32,
    pcRangesPreread: ?*u32,
    rgcolumnidPreread: [*]const u32,
    ccolumnidPreread: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetBookmark(
    sesid: u32,
    tableid: u32,
    pvBookmark: ?[*]u8,
    cbMax: u32,
    pcbActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetSecondaryIndexBookmark(
    sesid: u32,
    tableid: u32,
    pvSecondaryKey: ?[*]u8,
    cbSecondaryKeyMax: u32,
    pcbSecondaryKeyActual: ?*u32,
    pvPrimaryBookmark: ?[*]u8,
    cbPrimaryBookmarkMax: u32,
    pcbPrimaryBookmarkActual: ?*u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCompactA(
    sesid: u32,
    szDatabaseSrc: *i8,
    szDatabaseDest: *i8,
    pfnStatus: JET_PFNSTATUS,
    pconvert: ?*tagCONVERT_A,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCompactW(
    sesid: u32,
    szDatabaseSrc: *u16,
    szDatabaseDest: *u16,
    pfnStatus: JET_PFNSTATUS,
    pconvert: ?*tagCONVERT_W,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDefragmentA(
    sesid: u32,
    dbid: u32,
    szTableName: ?*i8,
    pcPasses: ?*u32,
    pcSeconds: ?*u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDefragmentW(
    sesid: u32,
    dbid: u32,
    szTableName: ?*u16,
    pcPasses: ?*u32,
    pcSeconds: ?*u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDefragment2A(
    sesid: u32,
    dbid: u32,
    szTableName: ?*i8,
    pcPasses: ?*u32,
    pcSeconds: ?*u32,
    callback: JET_CALLBACK,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDefragment2W(
    sesid: u32,
    dbid: u32,
    szTableName: ?*u16,
    pcPasses: ?*u32,
    pcSeconds: ?*u32,
    callback: JET_CALLBACK,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDefragment3A(
    sesid: u32,
    szDatabaseName: *i8,
    szTableName: ?*i8,
    pcPasses: ?*u32,
    pcSeconds: ?*u32,
    callback: JET_CALLBACK,
    pvContext: *c_void,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetDefragment3W(
    sesid: u32,
    szDatabaseName: *u16,
    szTableName: ?*u16,
    pcPasses: ?*u32,
    pcSeconds: ?*u32,
    callback: JET_CALLBACK,
    pvContext: *c_void,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetDatabaseSizeA(
    sesid: u32,
    szDatabaseName: *i8,
    cpg: u32,
    pcpgReal: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetDatabaseSizeW(
    sesid: u32,
    szDatabaseName: *u16,
    cpg: u32,
    pcpgReal: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGrowDatabase(
    sesid: u32,
    dbid: u32,
    cpg: u32,
    pcpgReal: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetResizeDatabase(
    sesid: u32,
    dbid: u32,
    cpgTarget: u32,
    pcpgActual: *u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetSessionContext(
    sesid: u32,
    ulContext: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetResetSessionContext(
    sesid: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGotoBookmark(
    sesid: u32,
    tableid: u32,
    pvBookmark: [*]u8,
    cbBookmark: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGotoSecondaryIndexBookmark(
    sesid: u32,
    tableid: u32,
    pvSecondaryKey: [*]u8,
    cbSecondaryKey: u32,
    pvPrimaryBookmark: ?[*]u8,
    cbPrimaryBookmark: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetIntersectIndexes(
    sesid: u32,
    rgindexrange: [*]JET_INDEXRANGE,
    cindexrange: u32,
    precordlist: *JET_RECORDLIST,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetComputeStats(
    sesid: u32,
    tableid: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOpenTempTable(
    sesid: u32,
    prgcolumndef: [*]const JET_COLUMNDEF,
    ccolumn: u32,
    grbit: u32,
    ptableid: *u32,
    prgcolumnid: [*]u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOpenTempTable2(
    sesid: u32,
    prgcolumndef: [*]const JET_COLUMNDEF,
    ccolumn: u32,
    lcid: u32,
    grbit: u32,
    ptableid: *u32,
    prgcolumnid: [*]u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOpenTempTable3(
    sesid: u32,
    prgcolumndef: [*]const JET_COLUMNDEF,
    ccolumn: u32,
    pidxunicode: ?*JET_UNICODEINDEX,
    grbit: u32,
    ptableid: *u32,
    prgcolumnid: [*]u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOpenTemporaryTable(
    sesid: u32,
    popentemporarytable: *JET_OPENTEMPORARYTABLE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOpenTemporaryTable2(
    sesid: u32,
    popentemporarytable: *JET_OPENTEMPORARYTABLE2,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetBackupA(
    szBackupPath: *i8,
    grbit: u32,
    pfnStatus: ?JET_PFNSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetBackupW(
    szBackupPath: *u16,
    grbit: u32,
    pfnStatus: ?JET_PFNSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetBackupInstanceA(
    instance: u32,
    szBackupPath: *i8,
    grbit: u32,
    pfnStatus: ?JET_PFNSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetBackupInstanceW(
    instance: u32,
    szBackupPath: *u16,
    grbit: u32,
    pfnStatus: ?JET_PFNSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetRestoreA(
    szSource: *i8,
    pfn: ?JET_PFNSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetRestoreW(
    szSource: *u16,
    pfn: ?JET_PFNSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetRestore2A(
    sz: *i8,
    szDest: ?*i8,
    pfn: ?JET_PFNSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetRestore2W(
    sz: *u16,
    szDest: ?*u16,
    pfn: ?JET_PFNSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetRestoreInstanceA(
    instance: u32,
    sz: *i8,
    szDest: ?*i8,
    pfn: ?JET_PFNSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetRestoreInstanceW(
    instance: u32,
    sz: *u16,
    szDest: ?*u16,
    pfn: ?JET_PFNSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetIndexRange(
    sesid: u32,
    tableidSrc: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetIndexRecordCount(
    sesid: u32,
    tableid: u32,
    pcrec: *u32,
    crecMax: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetRetrieveKey(
    sesid: u32,
    tableid: u32,
    pvKey: ?[*]u8,
    cbMax: u32,
    pcbActual: ?*u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetBeginExternalBackup(
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetBeginExternalBackupInstance(
    instance: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetAttachInfoA(
    szzDatabases: ?[*]i8,
    cbMax: u32,
    pcbActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetAttachInfoW(
    wszzDatabases: ?[*:0]u16,
    cbMax: u32,
    pcbActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetAttachInfoInstanceA(
    instance: u32,
    szzDatabases: ?[*]i8,
    cbMax: u32,
    pcbActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetAttachInfoInstanceW(
    instance: u32,
    szzDatabases: ?[*:0]u16,
    cbMax: u32,
    pcbActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOpenFileA(
    szFileName: *i8,
    phfFile: *u32,
    pulFileSizeLow: *u32,
    pulFileSizeHigh: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOpenFileW(
    szFileName: *u16,
    phfFile: *u32,
    pulFileSizeLow: *u32,
    pulFileSizeHigh: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOpenFileInstanceA(
    instance: u32,
    szFileName: *i8,
    phfFile: *u32,
    pulFileSizeLow: *u32,
    pulFileSizeHigh: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOpenFileInstanceW(
    instance: u32,
    szFileName: *u16,
    phfFile: *u32,
    pulFileSizeLow: *u32,
    pulFileSizeHigh: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetReadFile(
    hfFile: u32,
    pv: [*]u8,
    cb: u32,
    pcbActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetReadFileInstance(
    instance: u32,
    hfFile: u32,
    pv: [*]u8,
    cb: u32,
    pcbActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCloseFile(
    hfFile: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetCloseFileInstance(
    instance: u32,
    hfFile: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetLogInfoA(
    szzLogs: ?[*]i8,
    cbMax: u32,
    pcbActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetLogInfoW(
    szzLogs: ?[*:0]u16,
    cbMax: u32,
    pcbActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetLogInfoInstanceA(
    instance: u32,
    szzLogs: ?[*]i8,
    cbMax: u32,
    pcbActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetLogInfoInstanceW(
    instance: u32,
    wszzLogs: ?[*:0]u16,
    cbMax: u32,
    pcbActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetLogInfoInstance2A(
    instance: u32,
    szzLogs: ?[*]i8,
    cbMax: u32,
    pcbActual: ?*u32,
    pLogInfo: ?*JET_LOGINFO_A,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetLogInfoInstance2W(
    instance: u32,
    wszzLogs: ?[*:0]u16,
    cbMax: u32,
    pcbActual: ?*u32,
    pLogInfo: ?*JET_LOGINFO_W,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetTruncateLogInfoInstanceA(
    instance: u32,
    szzLogs: ?[*]i8,
    cbMax: u32,
    pcbActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetTruncateLogInfoInstanceW(
    instance: u32,
    wszzLogs: ?[*:0]u16,
    cbMax: u32,
    pcbActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetTruncateLog(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetTruncateLogInstance(
    instance: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetEndExternalBackup(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetEndExternalBackupInstance(
    instance: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetEndExternalBackupInstance2(
    instance: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetExternalRestoreA(
    szCheckpointFilePath: *i8,
    szLogPath: *i8,
    rgrstmap: ?[*]JET_RSTMAP_A,
    crstfilemap: i32,
    szBackupLogPath: *i8,
    genLow: i32,
    genHigh: i32,
    pfn: JET_PFNSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetExternalRestoreW(
    szCheckpointFilePath: *u16,
    szLogPath: *u16,
    rgrstmap: ?[*]JET_RSTMAP_W,
    crstfilemap: i32,
    szBackupLogPath: *u16,
    genLow: i32,
    genHigh: i32,
    pfn: JET_PFNSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetExternalRestore2A(
    szCheckpointFilePath: *i8,
    szLogPath: *i8,
    rgrstmap: ?[*]JET_RSTMAP_A,
    crstfilemap: i32,
    szBackupLogPath: *i8,
    pLogInfo: *JET_LOGINFO_A,
    szTargetInstanceName: ?*i8,
    szTargetInstanceLogPath: ?*i8,
    szTargetInstanceCheckpointPath: ?*i8,
    pfn: JET_PFNSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetExternalRestore2W(
    szCheckpointFilePath: *u16,
    szLogPath: *u16,
    rgrstmap: ?[*]JET_RSTMAP_W,
    crstfilemap: i32,
    szBackupLogPath: *u16,
    pLogInfo: *JET_LOGINFO_W,
    szTargetInstanceName: ?*u16,
    szTargetInstanceLogPath: ?*u16,
    szTargetInstanceCheckpointPath: ?*u16,
    pfn: JET_PFNSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetRegisterCallback(
    sesid: u32,
    tableid: u32,
    cbtyp: u32,
    pCallback: JET_CALLBACK,
    pvContext: ?*c_void,
    phCallbackId: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetUnregisterCallback(
    sesid: u32,
    tableid: u32,
    cbtyp: u32,
    hCallbackId: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetInstanceInfoA(
    pcInstanceInfo: *u32,
    paInstanceInfo: **JET_INSTANCE_INFO_A,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetInstanceInfoW(
    pcInstanceInfo: *u32,
    paInstanceInfo: **JET_INSTANCE_INFO_W,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetFreeBuffer(
    pbBuf: *i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetLS(
    sesid: u32,
    tableid: u32,
    ls: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetLS(
    sesid: u32,
    tableid: u32,
    pls: *u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOSSnapshotPrepare(
    psnapId: *u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOSSnapshotPrepareInstance(
    snapId: u32,
    instance: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOSSnapshotFreezeA(
    snapId: u32,
    pcInstanceInfo: *u32,
    paInstanceInfo: **JET_INSTANCE_INFO_A,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOSSnapshotFreezeW(
    snapId: u32,
    pcInstanceInfo: *u32,
    paInstanceInfo: **JET_INSTANCE_INFO_W,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOSSnapshotThaw(
    snapId: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOSSnapshotAbort(
    snapId: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOSSnapshotTruncateLog(
    snapId: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOSSnapshotTruncateLogInstance(
    snapId: u32,
    instance: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOSSnapshotGetFreezeInfoA(
    snapId: u32,
    pcInstanceInfo: *u32,
    paInstanceInfo: **JET_INSTANCE_INFO_A,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOSSnapshotGetFreezeInfoW(
    snapId: u32,
    pcInstanceInfo: *u32,
    paInstanceInfo: **JET_INSTANCE_INFO_W,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetOSSnapshotEnd(
    snapId: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetConfigureProcessForCrashDump(
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetErrorInfoW(
    pvContext: ?*c_void,
    pvResult: [*]u8,
    cbMax: u32,
    InfoLevel: u32,
    grbit: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetSetSessionParameter(
    sesid: u32,
    sesparamid: u32,
    pvParam: ?[*]u8,
    cbParam: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ESENT" fn JetGetSessionParameter(
    sesid: u32,
    sesparamid: u32,
    pvParam: [*]u8,
    cbParamMax: u32,
    pcbParamActual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (85)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const JET_RSTMAP_ = JET_RSTMAP_A;
        pub const tagCONVERT_ = tagCONVERT_A;
        pub const JET_COLUMNBASE_ = JET_COLUMNBASE_A;
        pub const tag_JET_COLUMNCREATE_ = tag_JET_COLUMNCREATE_A;
        pub const tag_JET_USERDEFINEDDEFAULT_ = tag_JET_USERDEFINEDDEFAULT_A;
        pub const JET_CONDITIONALCOLUMN_ = JET_CONDITIONALCOLUMN_A;
        pub const JET_INDEXCREATE_ = JET_INDEXCREATE_A;
        pub const JET_INDEXCREATE2_ = JET_INDEXCREATE2_A;
        pub const JET_INDEXCREATE3_ = JET_INDEXCREATE3_A;
        pub const JET_TABLECREATE_ = JET_TABLECREATE_A;
        pub const JET_TABLECREATE2_ = JET_TABLECREATE2_A;
        pub const JET_TABLECREATE3_ = JET_TABLECREATE3_A;
        pub const JET_TABLECREATE4_ = JET_TABLECREATE4_A;
        pub const JET_RSTINFO_ = JET_RSTINFO_A;
        pub const JET_SETSYSPARAM_ = JET_SETSYSPARAM_A;
        pub const JET_LOGINFO_ = JET_LOGINFO_A;
        pub const JET_INSTANCE_INFO_ = JET_INSTANCE_INFO_A;
        pub const JetInit3 = JetInit3A;
        pub const JetCreateInstance = JetCreateInstanceA;
        pub const JetCreateInstance2 = JetCreateInstance2A;
        pub const JetSetSystemParameter = JetSetSystemParameterA;
        pub const JetGetSystemParameter = JetGetSystemParameterA;
        pub const JetEnableMultiInstance = JetEnableMultiInstanceA;
        pub const JetBeginSession = JetBeginSessionA;
        pub const JetCreateDatabase = JetCreateDatabaseA;
        pub const JetCreateDatabase2 = JetCreateDatabase2A;
        pub const JetAttachDatabase = JetAttachDatabaseA;
        pub const JetAttachDatabase2 = JetAttachDatabase2A;
        pub const JetDetachDatabase = JetDetachDatabaseA;
        pub const JetDetachDatabase2 = JetDetachDatabase2A;
        pub const JetGetObjectInfo = JetGetObjectInfoA;
        pub const JetGetTableInfo = JetGetTableInfoA;
        pub const JetCreateTable = JetCreateTableA;
        pub const JetCreateTableColumnIndex = JetCreateTableColumnIndexA;
        pub const JetCreateTableColumnIndex2 = JetCreateTableColumnIndex2A;
        pub const JetCreateTableColumnIndex3 = JetCreateTableColumnIndex3A;
        pub const JetCreateTableColumnIndex4 = JetCreateTableColumnIndex4A;
        pub const JetDeleteTable = JetDeleteTableA;
        pub const JetRenameTable = JetRenameTableA;
        pub const JetGetTableColumnInfo = JetGetTableColumnInfoA;
        pub const JetGetColumnInfo = JetGetColumnInfoA;
        pub const JetAddColumn = JetAddColumnA;
        pub const JetDeleteColumn = JetDeleteColumnA;
        pub const JetDeleteColumn2 = JetDeleteColumn2A;
        pub const JetRenameColumn = JetRenameColumnA;
        pub const JetSetColumnDefaultValue = JetSetColumnDefaultValueA;
        pub const JetGetTableIndexInfo = JetGetTableIndexInfoA;
        pub const JetGetIndexInfo = JetGetIndexInfoA;
        pub const JetCreateIndex = JetCreateIndexA;
        pub const JetCreateIndex2 = JetCreateIndex2A;
        pub const JetCreateIndex3 = JetCreateIndex3A;
        pub const JetCreateIndex4 = JetCreateIndex4A;
        pub const JetDeleteIndex = JetDeleteIndexA;
        pub const JetGetDatabaseInfo = JetGetDatabaseInfoA;
        pub const JetGetDatabaseFileInfo = JetGetDatabaseFileInfoA;
        pub const JetOpenDatabase = JetOpenDatabaseA;
        pub const JetOpenTable = JetOpenTableA;
        pub const JetGetCurrentIndex = JetGetCurrentIndexA;
        pub const JetSetCurrentIndex = JetSetCurrentIndexA;
        pub const JetSetCurrentIndex2 = JetSetCurrentIndex2A;
        pub const JetSetCurrentIndex3 = JetSetCurrentIndex3A;
        pub const JetSetCurrentIndex4 = JetSetCurrentIndex4A;
        pub const JetCompact = JetCompactA;
        pub const JetDefragment = JetDefragmentA;
        pub const JetDefragment2 = JetDefragment2A;
        pub const JetDefragment3 = JetDefragment3A;
        pub const JetSetDatabaseSize = JetSetDatabaseSizeA;
        pub const JetBackup = JetBackupA;
        pub const JetBackupInstance = JetBackupInstanceA;
        pub const JetRestore = JetRestoreA;
        pub const JetRestore2 = JetRestore2A;
        pub const JetRestoreInstance = JetRestoreInstanceA;
        pub const JetGetAttachInfo = JetGetAttachInfoA;
        pub const JetGetAttachInfoInstance = JetGetAttachInfoInstanceA;
        pub const JetOpenFile = JetOpenFileA;
        pub const JetOpenFileInstance = JetOpenFileInstanceA;
        pub const JetGetLogInfo = JetGetLogInfoA;
        pub const JetGetLogInfoInstance = JetGetLogInfoInstanceA;
        pub const JetGetLogInfoInstance2 = JetGetLogInfoInstance2A;
        pub const JetGetTruncateLogInfoInstance = JetGetTruncateLogInfoInstanceA;
        pub const JetExternalRestore = JetExternalRestoreA;
        pub const JetExternalRestore2 = JetExternalRestore2A;
        pub const JetGetInstanceInfo = JetGetInstanceInfoA;
        pub const JetOSSnapshotFreeze = JetOSSnapshotFreezeA;
        pub const JetOSSnapshotGetFreezeInfo = JetOSSnapshotGetFreezeInfoA;
    },
    .wide => struct {
        pub const JET_RSTMAP_ = JET_RSTMAP_W;
        pub const tagCONVERT_ = tagCONVERT_W;
        pub const JET_COLUMNBASE_ = JET_COLUMNBASE_W;
        pub const tag_JET_COLUMNCREATE_ = tag_JET_COLUMNCREATE_W;
        pub const tag_JET_USERDEFINEDDEFAULT_ = tag_JET_USERDEFINEDDEFAULT_W;
        pub const JET_CONDITIONALCOLUMN_ = JET_CONDITIONALCOLUMN_W;
        pub const JET_INDEXCREATE_ = JET_INDEXCREATE_W;
        pub const JET_INDEXCREATE2_ = JET_INDEXCREATE2_W;
        pub const JET_INDEXCREATE3_ = JET_INDEXCREATE3_W;
        pub const JET_TABLECREATE_ = JET_TABLECREATE_W;
        pub const JET_TABLECREATE2_ = JET_TABLECREATE2_W;
        pub const JET_TABLECREATE3_ = JET_TABLECREATE3_W;
        pub const JET_TABLECREATE4_ = JET_TABLECREATE4_W;
        pub const JET_RSTINFO_ = JET_RSTINFO_W;
        pub const JET_SETSYSPARAM_ = JET_SETSYSPARAM_W;
        pub const JET_LOGINFO_ = JET_LOGINFO_W;
        pub const JET_INSTANCE_INFO_ = JET_INSTANCE_INFO_W;
        pub const JetInit3 = JetInit3W;
        pub const JetCreateInstance = JetCreateInstanceW;
        pub const JetCreateInstance2 = JetCreateInstance2W;
        pub const JetSetSystemParameter = JetSetSystemParameterW;
        pub const JetGetSystemParameter = JetGetSystemParameterW;
        pub const JetEnableMultiInstance = JetEnableMultiInstanceW;
        pub const JetBeginSession = JetBeginSessionW;
        pub const JetCreateDatabase = JetCreateDatabaseW;
        pub const JetCreateDatabase2 = JetCreateDatabase2W;
        pub const JetAttachDatabase = JetAttachDatabaseW;
        pub const JetAttachDatabase2 = JetAttachDatabase2W;
        pub const JetDetachDatabase = JetDetachDatabaseW;
        pub const JetDetachDatabase2 = JetDetachDatabase2W;
        pub const JetGetObjectInfo = JetGetObjectInfoW;
        pub const JetGetTableInfo = JetGetTableInfoW;
        pub const JetCreateTable = JetCreateTableW;
        pub const JetCreateTableColumnIndex = JetCreateTableColumnIndexW;
        pub const JetCreateTableColumnIndex2 = JetCreateTableColumnIndex2W;
        pub const JetCreateTableColumnIndex3 = JetCreateTableColumnIndex3W;
        pub const JetCreateTableColumnIndex4 = JetCreateTableColumnIndex4W;
        pub const JetDeleteTable = JetDeleteTableW;
        pub const JetRenameTable = JetRenameTableW;
        pub const JetGetTableColumnInfo = JetGetTableColumnInfoW;
        pub const JetGetColumnInfo = JetGetColumnInfoW;
        pub const JetAddColumn = JetAddColumnW;
        pub const JetDeleteColumn = JetDeleteColumnW;
        pub const JetDeleteColumn2 = JetDeleteColumn2W;
        pub const JetRenameColumn = JetRenameColumnW;
        pub const JetSetColumnDefaultValue = JetSetColumnDefaultValueW;
        pub const JetGetTableIndexInfo = JetGetTableIndexInfoW;
        pub const JetGetIndexInfo = JetGetIndexInfoW;
        pub const JetCreateIndex = JetCreateIndexW;
        pub const JetCreateIndex2 = JetCreateIndex2W;
        pub const JetCreateIndex3 = JetCreateIndex3W;
        pub const JetCreateIndex4 = JetCreateIndex4W;
        pub const JetDeleteIndex = JetDeleteIndexW;
        pub const JetGetDatabaseInfo = JetGetDatabaseInfoW;
        pub const JetGetDatabaseFileInfo = JetGetDatabaseFileInfoW;
        pub const JetOpenDatabase = JetOpenDatabaseW;
        pub const JetOpenTable = JetOpenTableW;
        pub const JetGetCurrentIndex = JetGetCurrentIndexW;
        pub const JetSetCurrentIndex = JetSetCurrentIndexW;
        pub const JetSetCurrentIndex2 = JetSetCurrentIndex2W;
        pub const JetSetCurrentIndex3 = JetSetCurrentIndex3W;
        pub const JetSetCurrentIndex4 = JetSetCurrentIndex4W;
        pub const JetCompact = JetCompactW;
        pub const JetDefragment = JetDefragmentW;
        pub const JetDefragment2 = JetDefragment2W;
        pub const JetDefragment3 = JetDefragment3W;
        pub const JetSetDatabaseSize = JetSetDatabaseSizeW;
        pub const JetBackup = JetBackupW;
        pub const JetBackupInstance = JetBackupInstanceW;
        pub const JetRestore = JetRestoreW;
        pub const JetRestore2 = JetRestore2W;
        pub const JetRestoreInstance = JetRestoreInstanceW;
        pub const JetGetAttachInfo = JetGetAttachInfoW;
        pub const JetGetAttachInfoInstance = JetGetAttachInfoInstanceW;
        pub const JetOpenFile = JetOpenFileW;
        pub const JetOpenFileInstance = JetOpenFileInstanceW;
        pub const JetGetLogInfo = JetGetLogInfoW;
        pub const JetGetLogInfoInstance = JetGetLogInfoInstanceW;
        pub const JetGetLogInfoInstance2 = JetGetLogInfoInstance2W;
        pub const JetGetTruncateLogInfoInstance = JetGetTruncateLogInfoInstanceW;
        pub const JetExternalRestore = JetExternalRestoreW;
        pub const JetExternalRestore2 = JetExternalRestore2W;
        pub const JetGetInstanceInfo = JetGetInstanceInfoW;
        pub const JetOSSnapshotFreeze = JetOSSnapshotFreezeW;
        pub const JetOSSnapshotGetFreezeInfo = JetOSSnapshotGetFreezeInfoW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const JET_RSTMAP_ = *opaque{};
        pub const tagCONVERT_ = *opaque{};
        pub const JET_COLUMNBASE_ = *opaque{};
        pub const tag_JET_COLUMNCREATE_ = *opaque{};
        pub const tag_JET_USERDEFINEDDEFAULT_ = *opaque{};
        pub const JET_CONDITIONALCOLUMN_ = *opaque{};
        pub const JET_INDEXCREATE_ = *opaque{};
        pub const JET_INDEXCREATE2_ = *opaque{};
        pub const JET_INDEXCREATE3_ = *opaque{};
        pub const JET_TABLECREATE_ = *opaque{};
        pub const JET_TABLECREATE2_ = *opaque{};
        pub const JET_TABLECREATE3_ = *opaque{};
        pub const JET_TABLECREATE4_ = *opaque{};
        pub const JET_RSTINFO_ = *opaque{};
        pub const JET_SETSYSPARAM_ = *opaque{};
        pub const JET_LOGINFO_ = *opaque{};
        pub const JET_INSTANCE_INFO_ = *opaque{};
        pub const JetInit3 = *opaque{};
        pub const JetCreateInstance = *opaque{};
        pub const JetCreateInstance2 = *opaque{};
        pub const JetSetSystemParameter = *opaque{};
        pub const JetGetSystemParameter = *opaque{};
        pub const JetEnableMultiInstance = *opaque{};
        pub const JetBeginSession = *opaque{};
        pub const JetCreateDatabase = *opaque{};
        pub const JetCreateDatabase2 = *opaque{};
        pub const JetAttachDatabase = *opaque{};
        pub const JetAttachDatabase2 = *opaque{};
        pub const JetDetachDatabase = *opaque{};
        pub const JetDetachDatabase2 = *opaque{};
        pub const JetGetObjectInfo = *opaque{};
        pub const JetGetTableInfo = *opaque{};
        pub const JetCreateTable = *opaque{};
        pub const JetCreateTableColumnIndex = *opaque{};
        pub const JetCreateTableColumnIndex2 = *opaque{};
        pub const JetCreateTableColumnIndex3 = *opaque{};
        pub const JetCreateTableColumnIndex4 = *opaque{};
        pub const JetDeleteTable = *opaque{};
        pub const JetRenameTable = *opaque{};
        pub const JetGetTableColumnInfo = *opaque{};
        pub const JetGetColumnInfo = *opaque{};
        pub const JetAddColumn = *opaque{};
        pub const JetDeleteColumn = *opaque{};
        pub const JetDeleteColumn2 = *opaque{};
        pub const JetRenameColumn = *opaque{};
        pub const JetSetColumnDefaultValue = *opaque{};
        pub const JetGetTableIndexInfo = *opaque{};
        pub const JetGetIndexInfo = *opaque{};
        pub const JetCreateIndex = *opaque{};
        pub const JetCreateIndex2 = *opaque{};
        pub const JetCreateIndex3 = *opaque{};
        pub const JetCreateIndex4 = *opaque{};
        pub const JetDeleteIndex = *opaque{};
        pub const JetGetDatabaseInfo = *opaque{};
        pub const JetGetDatabaseFileInfo = *opaque{};
        pub const JetOpenDatabase = *opaque{};
        pub const JetOpenTable = *opaque{};
        pub const JetGetCurrentIndex = *opaque{};
        pub const JetSetCurrentIndex = *opaque{};
        pub const JetSetCurrentIndex2 = *opaque{};
        pub const JetSetCurrentIndex3 = *opaque{};
        pub const JetSetCurrentIndex4 = *opaque{};
        pub const JetCompact = *opaque{};
        pub const JetDefragment = *opaque{};
        pub const JetDefragment2 = *opaque{};
        pub const JetDefragment3 = *opaque{};
        pub const JetSetDatabaseSize = *opaque{};
        pub const JetBackup = *opaque{};
        pub const JetBackupInstance = *opaque{};
        pub const JetRestore = *opaque{};
        pub const JetRestore2 = *opaque{};
        pub const JetRestoreInstance = *opaque{};
        pub const JetGetAttachInfo = *opaque{};
        pub const JetGetAttachInfoInstance = *opaque{};
        pub const JetOpenFile = *opaque{};
        pub const JetOpenFileInstance = *opaque{};
        pub const JetGetLogInfo = *opaque{};
        pub const JetGetLogInfoInstance = *opaque{};
        pub const JetGetLogInfoInstance2 = *opaque{};
        pub const JetGetTruncateLogInfoInstance = *opaque{};
        pub const JetExternalRestore = *opaque{};
        pub const JetExternalRestore2 = *opaque{};
        pub const JetGetInstanceInfo = *opaque{};
        pub const JetOSSnapshotFreeze = *opaque{};
        pub const JetOSSnapshotGetFreezeInfo = *opaque{};
    } else struct {
        pub const JET_RSTMAP_ = @compileError("'JET_RSTMAP_' requires that UNICODE be set to true or false in the root module");
        pub const tagCONVERT_ = @compileError("'tagCONVERT_' requires that UNICODE be set to true or false in the root module");
        pub const JET_COLUMNBASE_ = @compileError("'JET_COLUMNBASE_' requires that UNICODE be set to true or false in the root module");
        pub const tag_JET_COLUMNCREATE_ = @compileError("'tag_JET_COLUMNCREATE_' requires that UNICODE be set to true or false in the root module");
        pub const tag_JET_USERDEFINEDDEFAULT_ = @compileError("'tag_JET_USERDEFINEDDEFAULT_' requires that UNICODE be set to true or false in the root module");
        pub const JET_CONDITIONALCOLUMN_ = @compileError("'JET_CONDITIONALCOLUMN_' requires that UNICODE be set to true or false in the root module");
        pub const JET_INDEXCREATE_ = @compileError("'JET_INDEXCREATE_' requires that UNICODE be set to true or false in the root module");
        pub const JET_INDEXCREATE2_ = @compileError("'JET_INDEXCREATE2_' requires that UNICODE be set to true or false in the root module");
        pub const JET_INDEXCREATE3_ = @compileError("'JET_INDEXCREATE3_' requires that UNICODE be set to true or false in the root module");
        pub const JET_TABLECREATE_ = @compileError("'JET_TABLECREATE_' requires that UNICODE be set to true or false in the root module");
        pub const JET_TABLECREATE2_ = @compileError("'JET_TABLECREATE2_' requires that UNICODE be set to true or false in the root module");
        pub const JET_TABLECREATE3_ = @compileError("'JET_TABLECREATE3_' requires that UNICODE be set to true or false in the root module");
        pub const JET_TABLECREATE4_ = @compileError("'JET_TABLECREATE4_' requires that UNICODE be set to true or false in the root module");
        pub const JET_RSTINFO_ = @compileError("'JET_RSTINFO_' requires that UNICODE be set to true or false in the root module");
        pub const JET_SETSYSPARAM_ = @compileError("'JET_SETSYSPARAM_' requires that UNICODE be set to true or false in the root module");
        pub const JET_LOGINFO_ = @compileError("'JET_LOGINFO_' requires that UNICODE be set to true or false in the root module");
        pub const JET_INSTANCE_INFO_ = @compileError("'JET_INSTANCE_INFO_' requires that UNICODE be set to true or false in the root module");
        pub const JetInit3 = @compileError("'JetInit3' requires that UNICODE be set to true or false in the root module");
        pub const JetCreateInstance = @compileError("'JetCreateInstance' requires that UNICODE be set to true or false in the root module");
        pub const JetCreateInstance2 = @compileError("'JetCreateInstance2' requires that UNICODE be set to true or false in the root module");
        pub const JetSetSystemParameter = @compileError("'JetSetSystemParameter' requires that UNICODE be set to true or false in the root module");
        pub const JetGetSystemParameter = @compileError("'JetGetSystemParameter' requires that UNICODE be set to true or false in the root module");
        pub const JetEnableMultiInstance = @compileError("'JetEnableMultiInstance' requires that UNICODE be set to true or false in the root module");
        pub const JetBeginSession = @compileError("'JetBeginSession' requires that UNICODE be set to true or false in the root module");
        pub const JetCreateDatabase = @compileError("'JetCreateDatabase' requires that UNICODE be set to true or false in the root module");
        pub const JetCreateDatabase2 = @compileError("'JetCreateDatabase2' requires that UNICODE be set to true or false in the root module");
        pub const JetAttachDatabase = @compileError("'JetAttachDatabase' requires that UNICODE be set to true or false in the root module");
        pub const JetAttachDatabase2 = @compileError("'JetAttachDatabase2' requires that UNICODE be set to true or false in the root module");
        pub const JetDetachDatabase = @compileError("'JetDetachDatabase' requires that UNICODE be set to true or false in the root module");
        pub const JetDetachDatabase2 = @compileError("'JetDetachDatabase2' requires that UNICODE be set to true or false in the root module");
        pub const JetGetObjectInfo = @compileError("'JetGetObjectInfo' requires that UNICODE be set to true or false in the root module");
        pub const JetGetTableInfo = @compileError("'JetGetTableInfo' requires that UNICODE be set to true or false in the root module");
        pub const JetCreateTable = @compileError("'JetCreateTable' requires that UNICODE be set to true or false in the root module");
        pub const JetCreateTableColumnIndex = @compileError("'JetCreateTableColumnIndex' requires that UNICODE be set to true or false in the root module");
        pub const JetCreateTableColumnIndex2 = @compileError("'JetCreateTableColumnIndex2' requires that UNICODE be set to true or false in the root module");
        pub const JetCreateTableColumnIndex3 = @compileError("'JetCreateTableColumnIndex3' requires that UNICODE be set to true or false in the root module");
        pub const JetCreateTableColumnIndex4 = @compileError("'JetCreateTableColumnIndex4' requires that UNICODE be set to true or false in the root module");
        pub const JetDeleteTable = @compileError("'JetDeleteTable' requires that UNICODE be set to true or false in the root module");
        pub const JetRenameTable = @compileError("'JetRenameTable' requires that UNICODE be set to true or false in the root module");
        pub const JetGetTableColumnInfo = @compileError("'JetGetTableColumnInfo' requires that UNICODE be set to true or false in the root module");
        pub const JetGetColumnInfo = @compileError("'JetGetColumnInfo' requires that UNICODE be set to true or false in the root module");
        pub const JetAddColumn = @compileError("'JetAddColumn' requires that UNICODE be set to true or false in the root module");
        pub const JetDeleteColumn = @compileError("'JetDeleteColumn' requires that UNICODE be set to true or false in the root module");
        pub const JetDeleteColumn2 = @compileError("'JetDeleteColumn2' requires that UNICODE be set to true or false in the root module");
        pub const JetRenameColumn = @compileError("'JetRenameColumn' requires that UNICODE be set to true or false in the root module");
        pub const JetSetColumnDefaultValue = @compileError("'JetSetColumnDefaultValue' requires that UNICODE be set to true or false in the root module");
        pub const JetGetTableIndexInfo = @compileError("'JetGetTableIndexInfo' requires that UNICODE be set to true or false in the root module");
        pub const JetGetIndexInfo = @compileError("'JetGetIndexInfo' requires that UNICODE be set to true or false in the root module");
        pub const JetCreateIndex = @compileError("'JetCreateIndex' requires that UNICODE be set to true or false in the root module");
        pub const JetCreateIndex2 = @compileError("'JetCreateIndex2' requires that UNICODE be set to true or false in the root module");
        pub const JetCreateIndex3 = @compileError("'JetCreateIndex3' requires that UNICODE be set to true or false in the root module");
        pub const JetCreateIndex4 = @compileError("'JetCreateIndex4' requires that UNICODE be set to true or false in the root module");
        pub const JetDeleteIndex = @compileError("'JetDeleteIndex' requires that UNICODE be set to true or false in the root module");
        pub const JetGetDatabaseInfo = @compileError("'JetGetDatabaseInfo' requires that UNICODE be set to true or false in the root module");
        pub const JetGetDatabaseFileInfo = @compileError("'JetGetDatabaseFileInfo' requires that UNICODE be set to true or false in the root module");
        pub const JetOpenDatabase = @compileError("'JetOpenDatabase' requires that UNICODE be set to true or false in the root module");
        pub const JetOpenTable = @compileError("'JetOpenTable' requires that UNICODE be set to true or false in the root module");
        pub const JetGetCurrentIndex = @compileError("'JetGetCurrentIndex' requires that UNICODE be set to true or false in the root module");
        pub const JetSetCurrentIndex = @compileError("'JetSetCurrentIndex' requires that UNICODE be set to true or false in the root module");
        pub const JetSetCurrentIndex2 = @compileError("'JetSetCurrentIndex2' requires that UNICODE be set to true or false in the root module");
        pub const JetSetCurrentIndex3 = @compileError("'JetSetCurrentIndex3' requires that UNICODE be set to true or false in the root module");
        pub const JetSetCurrentIndex4 = @compileError("'JetSetCurrentIndex4' requires that UNICODE be set to true or false in the root module");
        pub const JetCompact = @compileError("'JetCompact' requires that UNICODE be set to true or false in the root module");
        pub const JetDefragment = @compileError("'JetDefragment' requires that UNICODE be set to true or false in the root module");
        pub const JetDefragment2 = @compileError("'JetDefragment2' requires that UNICODE be set to true or false in the root module");
        pub const JetDefragment3 = @compileError("'JetDefragment3' requires that UNICODE be set to true or false in the root module");
        pub const JetSetDatabaseSize = @compileError("'JetSetDatabaseSize' requires that UNICODE be set to true or false in the root module");
        pub const JetBackup = @compileError("'JetBackup' requires that UNICODE be set to true or false in the root module");
        pub const JetBackupInstance = @compileError("'JetBackupInstance' requires that UNICODE be set to true or false in the root module");
        pub const JetRestore = @compileError("'JetRestore' requires that UNICODE be set to true or false in the root module");
        pub const JetRestore2 = @compileError("'JetRestore2' requires that UNICODE be set to true or false in the root module");
        pub const JetRestoreInstance = @compileError("'JetRestoreInstance' requires that UNICODE be set to true or false in the root module");
        pub const JetGetAttachInfo = @compileError("'JetGetAttachInfo' requires that UNICODE be set to true or false in the root module");
        pub const JetGetAttachInfoInstance = @compileError("'JetGetAttachInfoInstance' requires that UNICODE be set to true or false in the root module");
        pub const JetOpenFile = @compileError("'JetOpenFile' requires that UNICODE be set to true or false in the root module");
        pub const JetOpenFileInstance = @compileError("'JetOpenFileInstance' requires that UNICODE be set to true or false in the root module");
        pub const JetGetLogInfo = @compileError("'JetGetLogInfo' requires that UNICODE be set to true or false in the root module");
        pub const JetGetLogInfoInstance = @compileError("'JetGetLogInfoInstance' requires that UNICODE be set to true or false in the root module");
        pub const JetGetLogInfoInstance2 = @compileError("'JetGetLogInfoInstance2' requires that UNICODE be set to true or false in the root module");
        pub const JetGetTruncateLogInfoInstance = @compileError("'JetGetTruncateLogInfoInstance' requires that UNICODE be set to true or false in the root module");
        pub const JetExternalRestore = @compileError("'JetExternalRestore' requires that UNICODE be set to true or false in the root module");
        pub const JetExternalRestore2 = @compileError("'JetExternalRestore2' requires that UNICODE be set to true or false in the root module");
        pub const JetGetInstanceInfo = @compileError("'JetGetInstanceInfo' requires that UNICODE be set to true or false in the root module");
        pub const JetOSSnapshotFreeze = @compileError("'JetOSSnapshotFreeze' requires that UNICODE be set to true or false in the root module");
        pub const JetOSSnapshotGetFreezeInfo = @compileError("'JetOSSnapshotGetFreezeInfo' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (19)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const ULARGE_INTEGER = @import("system_services.zig").ULARGE_INTEGER;
const PWSTR = @import("system_services.zig").PWSTR;
const FILETIME = @import("windows_programming.zig").FILETIME;
const IUnknown = @import("com.zig").IUnknown;
const CY = @import("system_services.zig").CY;
const HRESULT = @import("com.zig").HRESULT;
const BSTRBLOB = @import("system_services.zig").BSTRBLOB;
const SERIALIZEDPROPERTYVALUE = @import("shell.zig").SERIALIZEDPROPERTYVALUE;
const BSTR = @import("automation.zig").BSTR;
const PSTR = @import("system_services.zig").PSTR;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const STGMEDIUM = @import("com.zig").STGMEDIUM;
const LARGE_INTEGER = @import("system_services.zig").LARGE_INTEGER;
const OLESTREAM = @import("com.zig").OLESTREAM;
const IBindStatusCallback = @import("com.zig").IBindStatusCallback;
const DVTARGETDEVICE = @import("com.zig").DVTARGETDEVICE;
const CLIPDATA = @import("system_services.zig").CLIPDATA;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = JET_PFNSTATUS;
    _ = JET_CALLBACK;
    _ = JET_PFNDURABLECOMMITCALLBACK;
    _ = JET_PFNREALLOC;

    const constant_export_count = 0;
    const type_export_count = 135;
    const enum_value_export_count = 62;
    const com_iface_id_export_count = 13;
    const com_class_id_export_count = 0;
    const func_export_count = 274;
    const unicode_alias_count = 85;
    const import_count = 19;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

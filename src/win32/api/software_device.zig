//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (5)
//--------------------------------------------------------------------------------
pub const SW_DEVICE_CAPABILITIES = extern enum(i32) {
    SWDeviceCapabilitiesNone = 0,
    SWDeviceCapabilitiesRemovable = 1,
    SWDeviceCapabilitiesSilentInstall = 2,
    SWDeviceCapabilitiesNoDisplayInUI = 4,
    SWDeviceCapabilitiesDriverRequired = 8,
};
pub const SWDeviceCapabilitiesNone = SW_DEVICE_CAPABILITIES.SWDeviceCapabilitiesNone;
pub const SWDeviceCapabilitiesRemovable = SW_DEVICE_CAPABILITIES.SWDeviceCapabilitiesRemovable;
pub const SWDeviceCapabilitiesSilentInstall = SW_DEVICE_CAPABILITIES.SWDeviceCapabilitiesSilentInstall;
pub const SWDeviceCapabilitiesNoDisplayInUI = SW_DEVICE_CAPABILITIES.SWDeviceCapabilitiesNoDisplayInUI;
pub const SWDeviceCapabilitiesDriverRequired = SW_DEVICE_CAPABILITIES.SWDeviceCapabilitiesDriverRequired;

pub const SW_DEVICE_CREATE_INFO = extern struct {
    cbSize: u32,
    pszInstanceId: [*:0]const u16,
    pszzHardwareIds: [*]const u16,
    pszzCompatibleIds: [*]const u16,
    pContainerId: *const Guid,
    CapabilityFlags: u32,
    pszDeviceDescription: [*:0]const u16,
    pszDeviceLocation: [*:0]const u16,
    pSecurityDescriptor: *const SECURITY_DESCRIPTOR,
};

pub const SW_DEVICE_LIFETIME = extern enum(i32) {
    SWDeviceLifetimeHandle = 0,
    SWDeviceLifetimeParentPresent = 1,
    SWDeviceLifetimeMax = 2,
};
pub const SWDeviceLifetimeHandle = SW_DEVICE_LIFETIME.SWDeviceLifetimeHandle;
pub const SWDeviceLifetimeParentPresent = SW_DEVICE_LIFETIME.SWDeviceLifetimeParentPresent;
pub const SWDeviceLifetimeMax = SW_DEVICE_LIFETIME.SWDeviceLifetimeMax;

pub const HSWDEVICE__ = extern struct {
    unused: i32,
};

pub const SW_DEVICE_CREATE_CALLBACK = fn(
    hSwDevice: *HSWDEVICE__,
    CreateResult: HRESULT,
    pContext: ?*c_void,
    pszDeviceInstanceId: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) void;


//--------------------------------------------------------------------------------
// Section: Functions (9)
//--------------------------------------------------------------------------------
pub extern "CFGMGR32" fn SwDeviceCreate(
    pszEnumeratorName: [*:0]const u16,
    pszParentDeviceInstance: [*:0]const u16,
    pCreateInfo: *const SW_DEVICE_CREATE_INFO,
    cPropertyCount: u32,
    pProperties: ?[*]const DEVPROPERTY,
    pCallback: SW_DEVICE_CREATE_CALLBACK,
    pContext: ?*c_void,
    phSwDevice: **HSWDEVICE__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CFGMGR32" fn SwDeviceClose(
    hSwDevice: *HSWDEVICE__,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "CFGMGR32" fn SwDeviceSetLifetime(
    hSwDevice: *HSWDEVICE__,
    Lifetime: SW_DEVICE_LIFETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CFGMGR32" fn SwDeviceGetLifetime(
    hSwDevice: *HSWDEVICE__,
    pLifetime: *SW_DEVICE_LIFETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CFGMGR32" fn SwDevicePropertySet(
    hSwDevice: *HSWDEVICE__,
    cPropertyCount: u32,
    pProperties: [*]const DEVPROPERTY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CFGMGR32" fn SwDeviceInterfaceRegister(
    hSwDevice: *HSWDEVICE__,
    pInterfaceClassGuid: *const Guid,
    pszReferenceString: ?[*:0]const u16,
    cPropertyCount: u32,
    pProperties: ?[*]const DEVPROPERTY,
    fEnabled: BOOL,
    ppszDeviceInterfaceId: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CFGMGR32" fn SwMemFree(
    pMem: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "CFGMGR32" fn SwDeviceInterfaceSetState(
    hSwDevice: *HSWDEVICE__,
    pszDeviceInterfaceId: [*:0]const u16,
    fEnabled: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CFGMGR32" fn SwDeviceInterfacePropertySet(
    hSwDevice: *HSWDEVICE__,
    pszDeviceInterfaceId: [*:0]const u16,
    cPropertyCount: u32,
    pProperties: [*]const DEVPROPERTY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const SECURITY_DESCRIPTOR = @import("security.zig").SECURITY_DESCRIPTOR;
const DEVPROPERTY = @import("system_services.zig").DEVPROPERTY;
const PWSTR = @import("system_services.zig").PWSTR;
const BOOL = @import("system_services.zig").BOOL;
const HRESULT = @import("com.zig").HRESULT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = SW_DEVICE_CREATE_CALLBACK;

    const constant_export_count = 0;
    const type_export_count = 5;
    const enum_value_export_count = 8;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 9;
    const unicode_alias_count = 0;
    const import_count = 6;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

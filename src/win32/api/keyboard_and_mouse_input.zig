//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (19)
//--------------------------------------------------------------------------------
pub const MOUSEMOVEPOINT = extern struct {
    x: i32,
    y: i32,
    time: u32,
    dwExtraInfo: ?*c_void,
};

pub const TRACKMOUSEEVENT = extern struct {
    cbSize: u32,
    dwFlags: u32,
    hwndTrack: HWND,
    dwHoverTime: u32,
};

pub const MOUSEINPUT = extern struct {
    dx: i32,
    dy: i32,
    mouseData: u32,
    dwFlags: u32,
    time: u32,
    dwExtraInfo: ?*c_void,
};

pub const KEYBDINPUT = extern struct {
    wVk: u16,
    wScan: u16,
    dwFlags: u32,
    time: u32,
    dwExtraInfo: ?*c_void,
};

pub const HARDWAREINPUT = extern struct {
    uMsg: u32,
    wParamL: u16,
    wParamH: u16,
};

pub const INPUT = extern struct {
    type: u32,
    Anonymous: INPUT._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const LASTINPUTINFO = extern struct {
    cbSize: u32,
    dwTime: u32,
};

pub const RAWINPUTHEADER = extern struct {
    dwType: u32,
    dwSize: u32,
    hDevice: HANDLE,
    wParam: WPARAM,
};

pub const RAWMOUSE = extern struct {
    usFlags: u16,
    Anonymous: RAWMOUSE._Anonymous_e__Union,
    ulRawButtons: u32,
    lLastX: i32,
    lLastY: i32,
    ulExtraInformation: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const RAWKEYBOARD = extern struct {
    MakeCode: u16,
    Flags: u16,
    Reserved: u16,
    VKey: u16,
    Message: u32,
    ExtraInformation: u32,
};

pub const RAWHID = extern struct {
    dwSizeHid: u32,
    dwCount: u32,
    bRawData: [1]u8,
};

pub const RAWINPUT = extern struct {
    header: RAWINPUTHEADER,
    data: RAWINPUT._data_e__Union,
    const _data_e__Union = u32; // TODO: generate this nested type!
};

pub const RID_DEVICE_INFO_MOUSE = extern struct {
    dwId: u32,
    dwNumberOfButtons: u32,
    dwSampleRate: u32,
    fHasHorizontalWheel: BOOL,
};

pub const RID_DEVICE_INFO_KEYBOARD = extern struct {
    dwType: u32,
    dwSubType: u32,
    dwKeyboardMode: u32,
    dwNumberOfFunctionKeys: u32,
    dwNumberOfIndicators: u32,
    dwNumberOfKeysTotal: u32,
};

pub const RID_DEVICE_INFO_HID = extern struct {
    dwVendorId: u32,
    dwProductId: u32,
    dwVersionNumber: u32,
    usUsagePage: u16,
    usUsage: u16,
};

pub const RID_DEVICE_INFO = extern struct {
    cbSize: u32,
    dwType: u32,
    Anonymous: RID_DEVICE_INFO._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const RAWINPUTDEVICE = extern struct {
    usUsagePage: u16,
    usUsage: u16,
    dwFlags: u32,
    hwndTarget: HWND,
};

pub const RAWINPUTDEVICELIST = extern struct {
    hDevice: HANDLE,
    dwType: u32,
};

pub const HRAWINPUT = ?*c_void;


//--------------------------------------------------------------------------------
// Section: Functions (60)
//--------------------------------------------------------------------------------
pub extern "USER32" fn LoadKeyboardLayoutA(
    pwszKLID: [*:0]const u8,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) HKL;

pub extern "USER32" fn LoadKeyboardLayoutW(
    pwszKLID: [*:0]const u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) HKL;

pub extern "USER32" fn ActivateKeyboardLayout(
    hkl: HKL,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) HKL;

pub extern "USER32" fn ToUnicodeEx(
    wVirtKey: u32,
    wScanCode: u32,
    lpKeyState: *[256]u8,
    pwszBuff: [*:0]u16,
    cchBuff: i32,
    wFlags: u32,
    dwhkl: HKL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn UnloadKeyboardLayout(
    hkl: HKL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetKeyboardLayoutNameA(
    pwszKLID: *[9]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetKeyboardLayoutNameW(
    pwszKLID: *[9]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetKeyboardLayoutList(
    nBuff: i32,
    lpList: ?[*]HKL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetKeyboardLayout(
    idThread: u32,
) callconv(@import("std").os.windows.WINAPI) HKL;

pub extern "USER32" fn GetMouseMovePointsEx(
    cbSize: u32,
    lppt: *MOUSEMOVEPOINT,
    lpptBuf: [*]MOUSEMOVEPOINT,
    nBufPoints: i32,
    resolution: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn TrackMouseEvent(
    lpEventTrack: *TRACKMOUSEEVENT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn RegisterHotKey(
    hWnd: HWND,
    id: i32,
    fsModifiers: u32,
    vk: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn UnregisterHotKey(
    hWnd: HWND,
    id: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SwapMouseButton(
    fSwap: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetDoubleClickTime(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn SetDoubleClickTime(
    param0: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetFocus(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetActiveWindow(
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetFocus(
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetKBCodePage(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetKeyState(
    nVirtKey: i32,
) callconv(@import("std").os.windows.WINAPI) i16;

pub extern "USER32" fn GetAsyncKeyState(
    vKey: i32,
) callconv(@import("std").os.windows.WINAPI) i16;

pub extern "USER32" fn GetKeyboardState(
    lpKeyState: *[256]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetKeyboardState(
    lpKeyState: *[256]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetKeyNameTextA(
    lParam: i32,
    lpString: [*:0]u8,
    cchSize: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetKeyNameTextW(
    lParam: i32,
    lpString: [*:0]u16,
    cchSize: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetKeyboardType(
    nTypeFlag: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn ToAscii(
    uVirtKey: u32,
    uScanCode: u32,
    lpKeyState: ?*[256]u8,
    lpChar: *u16,
    uFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn ToAsciiEx(
    uVirtKey: u32,
    uScanCode: u32,
    lpKeyState: ?*[256]u8,
    lpChar: *u16,
    uFlags: u32,
    dwhkl: HKL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn ToUnicode(
    wVirtKey: u32,
    wScanCode: u32,
    lpKeyState: ?*[256]u8,
    pwszBuff: [*:0]u16,
    cchBuff: i32,
    wFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn OemKeyScan(
    wOemChar: u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn VkKeyScanA(
    ch: i8,
) callconv(@import("std").os.windows.WINAPI) i16;

pub extern "USER32" fn VkKeyScanW(
    ch: u16,
) callconv(@import("std").os.windows.WINAPI) i16;

pub extern "USER32" fn VkKeyScanExA(
    ch: i8,
    dwhkl: HKL,
) callconv(@import("std").os.windows.WINAPI) i16;

pub extern "USER32" fn VkKeyScanExW(
    ch: u16,
    dwhkl: HKL,
) callconv(@import("std").os.windows.WINAPI) i16;

pub extern "USER32" fn keybd_event(
    bVk: u8,
    bScan: u8,
    dwFlags: u32,
    dwExtraInfo: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "USER32" fn mouse_event(
    dwFlags: u32,
    dx: u32,
    dy: u32,
    dwData: u32,
    dwExtraInfo: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "USER32" fn SendInput(
    cInputs: u32,
    pInputs: [*]INPUT,
    cbSize: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetLastInputInfo(
    plii: *LASTINPUTINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn MapVirtualKeyA(
    uCode: u32,
    uMapType: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn MapVirtualKeyW(
    uCode: u32,
    uMapType: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn MapVirtualKeyExA(
    uCode: u32,
    uMapType: u32,
    dwhkl: HKL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn MapVirtualKeyExW(
    uCode: u32,
    uMapType: u32,
    dwhkl: HKL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetCapture(
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn SetCapture(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn ReleaseCapture(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn EnableWindow(
    hWnd: HWND,
    bEnable: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsWindowEnabled(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DragDetect(
    hwnd: HWND,
    pt: POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetActiveWindow(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn BlockInput(
    fBlockIt: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetRawInputData(
    hRawInput: HRAWINPUT,
    uiCommand: u32,
    pData: ?[*]u8,
    pcbSize: *u32,
    cbSizeHeader: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetRawInputDeviceInfoA(
    hDevice: HANDLE,
    uiCommand: u32,
    pData: ?[*]u8,
    pcbSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetRawInputDeviceInfoW(
    hDevice: HANDLE,
    uiCommand: u32,
    pData: ?[*]u8,
    pcbSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetRawInputBuffer(
    pData: ?[*]RAWINPUT,
    pcbSize: *u32,
    cbSizeHeader: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn RegisterRawInputDevices(
    pRawInputDevices: [*]RAWINPUTDEVICE,
    uiNumDevices: u32,
    cbSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetRegisteredRawInputDevices(
    pRawInputDevices: ?[*]RAWINPUTDEVICE,
    puiNumDevices: *u32,
    cbSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetRawInputDeviceList(
    pRawInputDeviceList: ?[*]RAWINPUTDEVICELIST,
    puiNumDevices: *u32,
    cbSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn DefRawInputProc(
    paRawInput: [*]*RAWINPUT,
    nInput: i32,
    cbSizeHeader: u32,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "COMCTL32" fn _TrackMouseEvent(
    lpEventTrack: *TRACKMOUSEEVENT,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (8)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const LoadKeyboardLayout = LoadKeyboardLayoutA;
        pub const GetKeyboardLayoutName = GetKeyboardLayoutNameA;
        pub const GetKeyNameText = GetKeyNameTextA;
        pub const VkKeyScan = VkKeyScanA;
        pub const VkKeyScanEx = VkKeyScanExA;
        pub const MapVirtualKey = MapVirtualKeyA;
        pub const MapVirtualKeyEx = MapVirtualKeyExA;
        pub const GetRawInputDeviceInfo = GetRawInputDeviceInfoA;
    },
    .wide => struct {
        pub const LoadKeyboardLayout = LoadKeyboardLayoutW;
        pub const GetKeyboardLayoutName = GetKeyboardLayoutNameW;
        pub const GetKeyNameText = GetKeyNameTextW;
        pub const VkKeyScan = VkKeyScanW;
        pub const VkKeyScanEx = VkKeyScanExW;
        pub const MapVirtualKey = MapVirtualKeyW;
        pub const MapVirtualKeyEx = MapVirtualKeyExW;
        pub const GetRawInputDeviceInfo = GetRawInputDeviceInfoW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const LoadKeyboardLayout = *opaque{};
        pub const GetKeyboardLayoutName = *opaque{};
        pub const GetKeyNameText = *opaque{};
        pub const VkKeyScan = *opaque{};
        pub const VkKeyScanEx = *opaque{};
        pub const MapVirtualKey = *opaque{};
        pub const MapVirtualKeyEx = *opaque{};
        pub const GetRawInputDeviceInfo = *opaque{};
    } else struct {
        pub const LoadKeyboardLayout = @compileError("'LoadKeyboardLayout' requires that UNICODE be set to true or false in the root module");
        pub const GetKeyboardLayoutName = @compileError("'GetKeyboardLayoutName' requires that UNICODE be set to true or false in the root module");
        pub const GetKeyNameText = @compileError("'GetKeyNameText' requires that UNICODE be set to true or false in the root module");
        pub const VkKeyScan = @compileError("'VkKeyScan' requires that UNICODE be set to true or false in the root module");
        pub const VkKeyScanEx = @compileError("'VkKeyScanEx' requires that UNICODE be set to true or false in the root module");
        pub const MapVirtualKey = @compileError("'MapVirtualKey' requires that UNICODE be set to true or false in the root module");
        pub const MapVirtualKeyEx = @compileError("'MapVirtualKeyEx' requires that UNICODE be set to true or false in the root module");
        pub const GetRawInputDeviceInfo = @compileError("'GetRawInputDeviceInfo' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (9)
//--------------------------------------------------------------------------------
const WPARAM = @import("windows_and_messaging.zig").WPARAM;
const PWSTR = @import("system_services.zig").PWSTR;
const LRESULT = @import("system_services.zig").LRESULT;
const HANDLE = @import("system_services.zig").HANDLE;
const PSTR = @import("system_services.zig").PSTR;
const HKL = @import("text_services.zig").HKL;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const POINT = @import("display_devices.zig").POINT;

test {
    const constant_export_count = 0;
    const type_export_count = 19;
    const enum_value_export_count = 0;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 60;
    const unicode_alias_count = 8;
    const import_count = 9;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

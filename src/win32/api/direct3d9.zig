//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (126)
//--------------------------------------------------------------------------------
pub const D3DMATRIX = extern struct {
    Anonymous: D3DMATRIX._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const D3DVIEWPORT9 = extern struct {
    X: u32,
    Y: u32,
    Width: u32,
    Height: u32,
    MinZ: f32,
    MaxZ: f32,
};

pub const D3DCLIPSTATUS9 = extern struct {
    ClipUnion: u32,
    ClipIntersection: u32,
};

pub const D3DMATERIAL9 = extern struct {
    Diffuse: DXGI_RGBA,
    Ambient: DXGI_RGBA,
    Specular: DXGI_RGBA,
    Emissive: DXGI_RGBA,
    Power: f32,
};

pub const D3DLIGHT9 = extern struct {
    Type: D3DLIGHTTYPE,
    Diffuse: DXGI_RGBA,
    Specular: DXGI_RGBA,
    Ambient: DXGI_RGBA,
    Position: D3DVECTOR,
    Direction: D3DVECTOR,
    Range: f32,
    Falloff: f32,
    Attenuation0: f32,
    Attenuation1: f32,
    Attenuation2: f32,
    Theta: f32,
    Phi: f32,
};

pub const D3DBLENDOP = extern enum(u32) {
    ADD = 1,
    SUBTRACT = 2,
    REVSUBTRACT = 3,
    MIN = 4,
    MAX = 5,
    FORCE_DWORD = 2147483647,
};
pub const D3DBLENDOP_ADD = D3DBLENDOP.ADD;
pub const D3DBLENDOP_SUBTRACT = D3DBLENDOP.SUBTRACT;
pub const D3DBLENDOP_REVSUBTRACT = D3DBLENDOP.REVSUBTRACT;
pub const D3DBLENDOP_MIN = D3DBLENDOP.MIN;
pub const D3DBLENDOP_MAX = D3DBLENDOP.MAX;
pub const D3DBLENDOP_FORCE_DWORD = D3DBLENDOP.FORCE_DWORD;

pub const D3DSAMPLERSTATETYPE = extern enum(i32) {
    D3DSAMP_ADDRESSU = 1,
    D3DSAMP_ADDRESSV = 2,
    D3DSAMP_ADDRESSW = 3,
    D3DSAMP_BORDERCOLOR = 4,
    D3DSAMP_MAGFILTER = 5,
    D3DSAMP_MINFILTER = 6,
    D3DSAMP_MIPFILTER = 7,
    D3DSAMP_MIPMAPLODBIAS = 8,
    D3DSAMP_MAXMIPLEVEL = 9,
    D3DSAMP_MAXANISOTROPY = 10,
    D3DSAMP_SRGBTEXTURE = 11,
    D3DSAMP_ELEMENTINDEX = 12,
    D3DSAMP_DMAPOFFSET = 13,
    D3DSAMP_FORCE_DWORD = 2147483647,
};
pub const D3DSAMP_ADDRESSU = D3DSAMPLERSTATETYPE.D3DSAMP_ADDRESSU;
pub const D3DSAMP_ADDRESSV = D3DSAMPLERSTATETYPE.D3DSAMP_ADDRESSV;
pub const D3DSAMP_ADDRESSW = D3DSAMPLERSTATETYPE.D3DSAMP_ADDRESSW;
pub const D3DSAMP_BORDERCOLOR = D3DSAMPLERSTATETYPE.D3DSAMP_BORDERCOLOR;
pub const D3DSAMP_MAGFILTER = D3DSAMPLERSTATETYPE.D3DSAMP_MAGFILTER;
pub const D3DSAMP_MINFILTER = D3DSAMPLERSTATETYPE.D3DSAMP_MINFILTER;
pub const D3DSAMP_MIPFILTER = D3DSAMPLERSTATETYPE.D3DSAMP_MIPFILTER;
pub const D3DSAMP_MIPMAPLODBIAS = D3DSAMPLERSTATETYPE.D3DSAMP_MIPMAPLODBIAS;
pub const D3DSAMP_MAXMIPLEVEL = D3DSAMPLERSTATETYPE.D3DSAMP_MAXMIPLEVEL;
pub const D3DSAMP_MAXANISOTROPY = D3DSAMPLERSTATETYPE.D3DSAMP_MAXANISOTROPY;
pub const D3DSAMP_SRGBTEXTURE = D3DSAMPLERSTATETYPE.D3DSAMP_SRGBTEXTURE;
pub const D3DSAMP_ELEMENTINDEX = D3DSAMPLERSTATETYPE.D3DSAMP_ELEMENTINDEX;
pub const D3DSAMP_DMAPOFFSET = D3DSAMPLERSTATETYPE.D3DSAMP_DMAPOFFSET;
pub const D3DSAMP_FORCE_DWORD = D3DSAMPLERSTATETYPE.D3DSAMP_FORCE_DWORD;

pub const D3DTEXTUREFILTERTYPE = extern enum(i32) {
    D3DTEXF_NONE = 0,
    D3DTEXF_POINT = 1,
    D3DTEXF_LINEAR = 2,
    D3DTEXF_ANISOTROPIC = 3,
    D3DTEXF_PYRAMIDALQUAD = 6,
    D3DTEXF_GAUSSIANQUAD = 7,
    D3DTEXF_CONVOLUTIONMONO = 8,
    D3DTEXF_FORCE_DWORD = 2147483647,
};
pub const D3DTEXF_NONE = D3DTEXTUREFILTERTYPE.D3DTEXF_NONE;
pub const D3DTEXF_POINT = D3DTEXTUREFILTERTYPE.D3DTEXF_POINT;
pub const D3DTEXF_LINEAR = D3DTEXTUREFILTERTYPE.D3DTEXF_LINEAR;
pub const D3DTEXF_ANISOTROPIC = D3DTEXTUREFILTERTYPE.D3DTEXF_ANISOTROPIC;
pub const D3DTEXF_PYRAMIDALQUAD = D3DTEXTUREFILTERTYPE.D3DTEXF_PYRAMIDALQUAD;
pub const D3DTEXF_GAUSSIANQUAD = D3DTEXTUREFILTERTYPE.D3DTEXF_GAUSSIANQUAD;
pub const D3DTEXF_CONVOLUTIONMONO = D3DTEXTUREFILTERTYPE.D3DTEXF_CONVOLUTIONMONO;
pub const D3DTEXF_FORCE_DWORD = D3DTEXTUREFILTERTYPE.D3DTEXF_FORCE_DWORD;

pub const D3DDECLUSAGE = extern enum(i32) {
    POSITION = 0,
    BLENDWEIGHT = 1,
    BLENDINDICES = 2,
    NORMAL = 3,
    PSIZE = 4,
    TEXCOORD = 5,
    TANGENT = 6,
    BINORMAL = 7,
    TESSFACTOR = 8,
    POSITIONT = 9,
    COLOR = 10,
    FOG = 11,
    DEPTH = 12,
    SAMPLE = 13,
};
pub const D3DDECLUSAGE_POSITION = D3DDECLUSAGE.POSITION;
pub const D3DDECLUSAGE_BLENDWEIGHT = D3DDECLUSAGE.BLENDWEIGHT;
pub const D3DDECLUSAGE_BLENDINDICES = D3DDECLUSAGE.BLENDINDICES;
pub const D3DDECLUSAGE_NORMAL = D3DDECLUSAGE.NORMAL;
pub const D3DDECLUSAGE_PSIZE = D3DDECLUSAGE.PSIZE;
pub const D3DDECLUSAGE_TEXCOORD = D3DDECLUSAGE.TEXCOORD;
pub const D3DDECLUSAGE_TANGENT = D3DDECLUSAGE.TANGENT;
pub const D3DDECLUSAGE_BINORMAL = D3DDECLUSAGE.BINORMAL;
pub const D3DDECLUSAGE_TESSFACTOR = D3DDECLUSAGE.TESSFACTOR;
pub const D3DDECLUSAGE_POSITIONT = D3DDECLUSAGE.POSITIONT;
pub const D3DDECLUSAGE_COLOR = D3DDECLUSAGE.COLOR;
pub const D3DDECLUSAGE_FOG = D3DDECLUSAGE.FOG;
pub const D3DDECLUSAGE_DEPTH = D3DDECLUSAGE.DEPTH;
pub const D3DDECLUSAGE_SAMPLE = D3DDECLUSAGE.SAMPLE;

pub const D3DDECLMETHOD = extern enum(i32) {
    DEFAULT = 0,
    PARTIALU = 1,
    PARTIALV = 2,
    CROSSUV = 3,
    UV = 4,
    LOOKUP = 5,
    LOOKUPPRESAMPLED = 6,
};
pub const D3DDECLMETHOD_DEFAULT = D3DDECLMETHOD.DEFAULT;
pub const D3DDECLMETHOD_PARTIALU = D3DDECLMETHOD.PARTIALU;
pub const D3DDECLMETHOD_PARTIALV = D3DDECLMETHOD.PARTIALV;
pub const D3DDECLMETHOD_CROSSUV = D3DDECLMETHOD.CROSSUV;
pub const D3DDECLMETHOD_UV = D3DDECLMETHOD.UV;
pub const D3DDECLMETHOD_LOOKUP = D3DDECLMETHOD.LOOKUP;
pub const D3DDECLMETHOD_LOOKUPPRESAMPLED = D3DDECLMETHOD.LOOKUPPRESAMPLED;

pub const D3DDECLTYPE = extern enum(i32) {
    FLOAT1 = 0,
    FLOAT2 = 1,
    FLOAT3 = 2,
    FLOAT4 = 3,
    D3DCOLOR = 4,
    UBYTE4 = 5,
    SHORT2 = 6,
    SHORT4 = 7,
    UBYTE4N = 8,
    SHORT2N = 9,
    SHORT4N = 10,
    USHORT2N = 11,
    USHORT4N = 12,
    UDEC3 = 13,
    DEC3N = 14,
    FLOAT16_2 = 15,
    FLOAT16_4 = 16,
    UNUSED = 17,
};
pub const D3DDECLTYPE_FLOAT1 = D3DDECLTYPE.FLOAT1;
pub const D3DDECLTYPE_FLOAT2 = D3DDECLTYPE.FLOAT2;
pub const D3DDECLTYPE_FLOAT3 = D3DDECLTYPE.FLOAT3;
pub const D3DDECLTYPE_FLOAT4 = D3DDECLTYPE.FLOAT4;
pub const D3DDECLTYPE_D3DCOLOR = D3DDECLTYPE.D3DCOLOR;
pub const D3DDECLTYPE_UBYTE4 = D3DDECLTYPE.UBYTE4;
pub const D3DDECLTYPE_SHORT2 = D3DDECLTYPE.SHORT2;
pub const D3DDECLTYPE_SHORT4 = D3DDECLTYPE.SHORT4;
pub const D3DDECLTYPE_UBYTE4N = D3DDECLTYPE.UBYTE4N;
pub const D3DDECLTYPE_SHORT2N = D3DDECLTYPE.SHORT2N;
pub const D3DDECLTYPE_SHORT4N = D3DDECLTYPE.SHORT4N;
pub const D3DDECLTYPE_USHORT2N = D3DDECLTYPE.USHORT2N;
pub const D3DDECLTYPE_USHORT4N = D3DDECLTYPE.USHORT4N;
pub const D3DDECLTYPE_UDEC3 = D3DDECLTYPE.UDEC3;
pub const D3DDECLTYPE_DEC3N = D3DDECLTYPE.DEC3N;
pub const D3DDECLTYPE_FLOAT16_2 = D3DDECLTYPE.FLOAT16_2;
pub const D3DDECLTYPE_FLOAT16_4 = D3DDECLTYPE.FLOAT16_4;
pub const D3DDECLTYPE_UNUSED = D3DDECLTYPE.UNUSED;

pub const D3DVERTEXELEMENT9 = extern struct {
    Stream: u16,
    Offset: u16,
    Type: u8,
    Method: u8,
    Usage: u8,
    UsageIndex: u8,
};

pub const D3DSHADER_INSTRUCTION_OPCODE_TYPE = extern enum(i32) {
    D3DSIO_NOP = 0,
    D3DSIO_MOV = 1,
    D3DSIO_ADD = 2,
    D3DSIO_SUB = 3,
    D3DSIO_MAD = 4,
    D3DSIO_MUL = 5,
    D3DSIO_RCP = 6,
    D3DSIO_RSQ = 7,
    D3DSIO_DP3 = 8,
    D3DSIO_DP4 = 9,
    D3DSIO_MIN = 10,
    D3DSIO_MAX = 11,
    D3DSIO_SLT = 12,
    D3DSIO_SGE = 13,
    D3DSIO_EXP = 14,
    D3DSIO_LOG = 15,
    D3DSIO_LIT = 16,
    D3DSIO_DST = 17,
    D3DSIO_LRP = 18,
    D3DSIO_FRC = 19,
    D3DSIO_M4x4 = 20,
    D3DSIO_M4x3 = 21,
    D3DSIO_M3x4 = 22,
    D3DSIO_M3x3 = 23,
    D3DSIO_M3x2 = 24,
    D3DSIO_CALL = 25,
    D3DSIO_CALLNZ = 26,
    D3DSIO_LOOP = 27,
    D3DSIO_RET = 28,
    D3DSIO_ENDLOOP = 29,
    D3DSIO_LABEL = 30,
    D3DSIO_DCL = 31,
    D3DSIO_POW = 32,
    D3DSIO_CRS = 33,
    D3DSIO_SGN = 34,
    D3DSIO_ABS = 35,
    D3DSIO_NRM = 36,
    D3DSIO_SINCOS = 37,
    D3DSIO_REP = 38,
    D3DSIO_ENDREP = 39,
    D3DSIO_IF = 40,
    D3DSIO_IFC = 41,
    D3DSIO_ELSE = 42,
    D3DSIO_ENDIF = 43,
    D3DSIO_BREAK = 44,
    D3DSIO_BREAKC = 45,
    D3DSIO_MOVA = 46,
    D3DSIO_DEFB = 47,
    D3DSIO_DEFI = 48,
    D3DSIO_TEXCOORD = 64,
    D3DSIO_TEXKILL = 65,
    D3DSIO_TEX = 66,
    D3DSIO_TEXBEM = 67,
    D3DSIO_TEXBEML = 68,
    D3DSIO_TEXREG2AR = 69,
    D3DSIO_TEXREG2GB = 70,
    D3DSIO_TEXM3x2PAD = 71,
    D3DSIO_TEXM3x2TEX = 72,
    D3DSIO_TEXM3x3PAD = 73,
    D3DSIO_TEXM3x3TEX = 74,
    D3DSIO_RESERVED0 = 75,
    D3DSIO_TEXM3x3SPEC = 76,
    D3DSIO_TEXM3x3VSPEC = 77,
    D3DSIO_EXPP = 78,
    D3DSIO_LOGP = 79,
    D3DSIO_CND = 80,
    D3DSIO_DEF = 81,
    D3DSIO_TEXREG2RGB = 82,
    D3DSIO_TEXDP3TEX = 83,
    D3DSIO_TEXM3x2DEPTH = 84,
    D3DSIO_TEXDP3 = 85,
    D3DSIO_TEXM3x3 = 86,
    D3DSIO_TEXDEPTH = 87,
    D3DSIO_CMP = 88,
    D3DSIO_BEM = 89,
    D3DSIO_DP2ADD = 90,
    D3DSIO_DSX = 91,
    D3DSIO_DSY = 92,
    D3DSIO_TEXLDD = 93,
    D3DSIO_SETP = 94,
    D3DSIO_TEXLDL = 95,
    D3DSIO_BREAKP = 96,
    D3DSIO_PHASE = 65533,
    D3DSIO_COMMENT = 65534,
    D3DSIO_END = 65535,
    D3DSIO_FORCE_DWORD = 2147483647,
};
pub const D3DSIO_NOP = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_NOP;
pub const D3DSIO_MOV = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_MOV;
pub const D3DSIO_ADD = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_ADD;
pub const D3DSIO_SUB = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_SUB;
pub const D3DSIO_MAD = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_MAD;
pub const D3DSIO_MUL = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_MUL;
pub const D3DSIO_RCP = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_RCP;
pub const D3DSIO_RSQ = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_RSQ;
pub const D3DSIO_DP3 = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_DP3;
pub const D3DSIO_DP4 = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_DP4;
pub const D3DSIO_MIN = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_MIN;
pub const D3DSIO_MAX = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_MAX;
pub const D3DSIO_SLT = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_SLT;
pub const D3DSIO_SGE = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_SGE;
pub const D3DSIO_EXP = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_EXP;
pub const D3DSIO_LOG = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_LOG;
pub const D3DSIO_LIT = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_LIT;
pub const D3DSIO_DST = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_DST;
pub const D3DSIO_LRP = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_LRP;
pub const D3DSIO_FRC = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_FRC;
pub const D3DSIO_M4x4 = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_M4x4;
pub const D3DSIO_M4x3 = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_M4x3;
pub const D3DSIO_M3x4 = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_M3x4;
pub const D3DSIO_M3x3 = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_M3x3;
pub const D3DSIO_M3x2 = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_M3x2;
pub const D3DSIO_CALL = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_CALL;
pub const D3DSIO_CALLNZ = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_CALLNZ;
pub const D3DSIO_LOOP = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_LOOP;
pub const D3DSIO_RET = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_RET;
pub const D3DSIO_ENDLOOP = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_ENDLOOP;
pub const D3DSIO_LABEL = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_LABEL;
pub const D3DSIO_DCL = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_DCL;
pub const D3DSIO_POW = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_POW;
pub const D3DSIO_CRS = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_CRS;
pub const D3DSIO_SGN = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_SGN;
pub const D3DSIO_ABS = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_ABS;
pub const D3DSIO_NRM = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_NRM;
pub const D3DSIO_SINCOS = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_SINCOS;
pub const D3DSIO_REP = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_REP;
pub const D3DSIO_ENDREP = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_ENDREP;
pub const D3DSIO_IF = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_IF;
pub const D3DSIO_IFC = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_IFC;
pub const D3DSIO_ELSE = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_ELSE;
pub const D3DSIO_ENDIF = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_ENDIF;
pub const D3DSIO_BREAK = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_BREAK;
pub const D3DSIO_BREAKC = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_BREAKC;
pub const D3DSIO_MOVA = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_MOVA;
pub const D3DSIO_DEFB = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_DEFB;
pub const D3DSIO_DEFI = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_DEFI;
pub const D3DSIO_TEXCOORD = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXCOORD;
pub const D3DSIO_TEXKILL = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXKILL;
pub const D3DSIO_TEX = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEX;
pub const D3DSIO_TEXBEM = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXBEM;
pub const D3DSIO_TEXBEML = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXBEML;
pub const D3DSIO_TEXREG2AR = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXREG2AR;
pub const D3DSIO_TEXREG2GB = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXREG2GB;
pub const D3DSIO_TEXM3x2PAD = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXM3x2PAD;
pub const D3DSIO_TEXM3x2TEX = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXM3x2TEX;
pub const D3DSIO_TEXM3x3PAD = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXM3x3PAD;
pub const D3DSIO_TEXM3x3TEX = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXM3x3TEX;
pub const D3DSIO_RESERVED0 = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_RESERVED0;
pub const D3DSIO_TEXM3x3SPEC = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXM3x3SPEC;
pub const D3DSIO_TEXM3x3VSPEC = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXM3x3VSPEC;
pub const D3DSIO_EXPP = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_EXPP;
pub const D3DSIO_LOGP = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_LOGP;
pub const D3DSIO_CND = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_CND;
pub const D3DSIO_DEF = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_DEF;
pub const D3DSIO_TEXREG2RGB = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXREG2RGB;
pub const D3DSIO_TEXDP3TEX = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXDP3TEX;
pub const D3DSIO_TEXM3x2DEPTH = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXM3x2DEPTH;
pub const D3DSIO_TEXDP3 = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXDP3;
pub const D3DSIO_TEXM3x3 = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXM3x3;
pub const D3DSIO_TEXDEPTH = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXDEPTH;
pub const D3DSIO_CMP = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_CMP;
pub const D3DSIO_BEM = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_BEM;
pub const D3DSIO_DP2ADD = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_DP2ADD;
pub const D3DSIO_DSX = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_DSX;
pub const D3DSIO_DSY = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_DSY;
pub const D3DSIO_TEXLDD = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXLDD;
pub const D3DSIO_SETP = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_SETP;
pub const D3DSIO_TEXLDL = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_TEXLDL;
pub const D3DSIO_BREAKP = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_BREAKP;
pub const D3DSIO_PHASE = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_PHASE;
pub const D3DSIO_COMMENT = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_COMMENT;
pub const D3DSIO_END = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_END;
pub const D3DSIO_FORCE_DWORD = D3DSHADER_INSTRUCTION_OPCODE_TYPE.D3DSIO_FORCE_DWORD;

pub const D3DSHADER_COMPARISON = extern enum(i32) {
    D3DSPC_RESERVED0 = 0,
    D3DSPC_GT = 1,
    D3DSPC_EQ = 2,
    D3DSPC_GE = 3,
    D3DSPC_LT = 4,
    D3DSPC_NE = 5,
    D3DSPC_LE = 6,
    D3DSPC_RESERVED1 = 7,
};
pub const D3DSPC_RESERVED0 = D3DSHADER_COMPARISON.D3DSPC_RESERVED0;
pub const D3DSPC_GT = D3DSHADER_COMPARISON.D3DSPC_GT;
pub const D3DSPC_EQ = D3DSHADER_COMPARISON.D3DSPC_EQ;
pub const D3DSPC_GE = D3DSHADER_COMPARISON.D3DSPC_GE;
pub const D3DSPC_LT = D3DSHADER_COMPARISON.D3DSPC_LT;
pub const D3DSPC_NE = D3DSHADER_COMPARISON.D3DSPC_NE;
pub const D3DSPC_LE = D3DSHADER_COMPARISON.D3DSPC_LE;
pub const D3DSPC_RESERVED1 = D3DSHADER_COMPARISON.D3DSPC_RESERVED1;

pub const D3DSAMPLER_TEXTURE_TYPE = extern enum(i32) {
    D3DSTT_UNKNOWN = 0,
    D3DSTT_2D = 268435456,
    D3DSTT_CUBE = 402653184,
    D3DSTT_VOLUME = 536870912,
    D3DSTT_FORCE_DWORD = 2147483647,
};
pub const D3DSTT_UNKNOWN = D3DSAMPLER_TEXTURE_TYPE.D3DSTT_UNKNOWN;
pub const D3DSTT_2D = D3DSAMPLER_TEXTURE_TYPE.D3DSTT_2D;
pub const D3DSTT_CUBE = D3DSAMPLER_TEXTURE_TYPE.D3DSTT_CUBE;
pub const D3DSTT_VOLUME = D3DSAMPLER_TEXTURE_TYPE.D3DSTT_VOLUME;
pub const D3DSTT_FORCE_DWORD = D3DSAMPLER_TEXTURE_TYPE.D3DSTT_FORCE_DWORD;

pub const D3DSHADER_PARAM_REGISTER_TYPE = extern enum(i32) {
    D3DSPR_TEMP = 0,
    D3DSPR_INPUT = 1,
    D3DSPR_CONST = 2,
    D3DSPR_ADDR = 3,
    D3DSPR_TEXTURE = 3,
    D3DSPR_RASTOUT = 4,
    D3DSPR_ATTROUT = 5,
    D3DSPR_TEXCRDOUT = 6,
    D3DSPR_OUTPUT = 6,
    D3DSPR_CONSTINT = 7,
    D3DSPR_COLOROUT = 8,
    D3DSPR_DEPTHOUT = 9,
    D3DSPR_SAMPLER = 10,
    D3DSPR_CONST2 = 11,
    D3DSPR_CONST3 = 12,
    D3DSPR_CONST4 = 13,
    D3DSPR_CONSTBOOL = 14,
    D3DSPR_LOOP = 15,
    D3DSPR_TEMPFLOAT16 = 16,
    D3DSPR_MISCTYPE = 17,
    D3DSPR_LABEL = 18,
    D3DSPR_PREDICATE = 19,
    D3DSPR_FORCE_DWORD = 2147483647,
};
pub const D3DSPR_TEMP = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_TEMP;
pub const D3DSPR_INPUT = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_INPUT;
pub const D3DSPR_CONST = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_CONST;
pub const D3DSPR_ADDR = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_ADDR;
pub const D3DSPR_TEXTURE = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_TEXTURE;
pub const D3DSPR_RASTOUT = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_RASTOUT;
pub const D3DSPR_ATTROUT = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_ATTROUT;
pub const D3DSPR_TEXCRDOUT = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_TEXCRDOUT;
pub const D3DSPR_OUTPUT = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_OUTPUT;
pub const D3DSPR_CONSTINT = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_CONSTINT;
pub const D3DSPR_COLOROUT = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_COLOROUT;
pub const D3DSPR_DEPTHOUT = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_DEPTHOUT;
pub const D3DSPR_SAMPLER = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_SAMPLER;
pub const D3DSPR_CONST2 = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_CONST2;
pub const D3DSPR_CONST3 = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_CONST3;
pub const D3DSPR_CONST4 = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_CONST4;
pub const D3DSPR_CONSTBOOL = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_CONSTBOOL;
pub const D3DSPR_LOOP = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_LOOP;
pub const D3DSPR_TEMPFLOAT16 = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_TEMPFLOAT16;
pub const D3DSPR_MISCTYPE = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_MISCTYPE;
pub const D3DSPR_LABEL = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_LABEL;
pub const D3DSPR_PREDICATE = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_PREDICATE;
pub const D3DSPR_FORCE_DWORD = D3DSHADER_PARAM_REGISTER_TYPE.D3DSPR_FORCE_DWORD;

pub const D3DSHADER_MISCTYPE_OFFSETS = extern enum(i32) {
    D3DSMO_POSITION = 0,
    D3DSMO_FACE = 1,
};
pub const D3DSMO_POSITION = D3DSHADER_MISCTYPE_OFFSETS.D3DSMO_POSITION;
pub const D3DSMO_FACE = D3DSHADER_MISCTYPE_OFFSETS.D3DSMO_FACE;

pub const D3DVS_RASTOUT_OFFSETS = extern enum(i32) {
    D3DSRO_POSITION = 0,
    D3DSRO_FOG = 1,
    D3DSRO_POINT_SIZE = 2,
    D3DSRO_FORCE_DWORD = 2147483647,
};
pub const D3DSRO_POSITION = D3DVS_RASTOUT_OFFSETS.D3DSRO_POSITION;
pub const D3DSRO_FOG = D3DVS_RASTOUT_OFFSETS.D3DSRO_FOG;
pub const D3DSRO_POINT_SIZE = D3DVS_RASTOUT_OFFSETS.D3DSRO_POINT_SIZE;
pub const D3DSRO_FORCE_DWORD = D3DVS_RASTOUT_OFFSETS.D3DSRO_FORCE_DWORD;

pub const D3DVS_ADDRESSMODE_TYPE = extern enum(i32) {
    D3DVS_ADDRMODE_ABSOLUTE = 0,
    D3DVS_ADDRMODE_RELATIVE = 8192,
    D3DVS_ADDRMODE_FORCE_DWORD = 2147483647,
};
pub const D3DVS_ADDRMODE_ABSOLUTE = D3DVS_ADDRESSMODE_TYPE.D3DVS_ADDRMODE_ABSOLUTE;
pub const D3DVS_ADDRMODE_RELATIVE = D3DVS_ADDRESSMODE_TYPE.D3DVS_ADDRMODE_RELATIVE;
pub const D3DVS_ADDRMODE_FORCE_DWORD = D3DVS_ADDRESSMODE_TYPE.D3DVS_ADDRMODE_FORCE_DWORD;

pub const D3DSHADER_ADDRESSMODE_TYPE = extern enum(i32) {
    D3DSHADER_ADDRMODE_ABSOLUTE = 0,
    D3DSHADER_ADDRMODE_RELATIVE = 8192,
    D3DSHADER_ADDRMODE_FORCE_DWORD = 2147483647,
};
pub const D3DSHADER_ADDRMODE_ABSOLUTE = D3DSHADER_ADDRESSMODE_TYPE.D3DSHADER_ADDRMODE_ABSOLUTE;
pub const D3DSHADER_ADDRMODE_RELATIVE = D3DSHADER_ADDRESSMODE_TYPE.D3DSHADER_ADDRMODE_RELATIVE;
pub const D3DSHADER_ADDRMODE_FORCE_DWORD = D3DSHADER_ADDRESSMODE_TYPE.D3DSHADER_ADDRMODE_FORCE_DWORD;

pub const D3DSHADER_PARAM_SRCMOD_TYPE = extern enum(i32) {
    D3DSPSM_NONE = 0,
    D3DSPSM_NEG = 16777216,
    D3DSPSM_BIAS = 33554432,
    D3DSPSM_BIASNEG = 50331648,
    D3DSPSM_SIGN = 67108864,
    D3DSPSM_SIGNNEG = 83886080,
    D3DSPSM_COMP = 100663296,
    D3DSPSM_X2 = 117440512,
    D3DSPSM_X2NEG = 134217728,
    D3DSPSM_DZ = 150994944,
    D3DSPSM_DW = 167772160,
    D3DSPSM_ABS = 184549376,
    D3DSPSM_ABSNEG = 201326592,
    D3DSPSM_NOT = 218103808,
    D3DSPSM_FORCE_DWORD = 2147483647,
};
pub const D3DSPSM_NONE = D3DSHADER_PARAM_SRCMOD_TYPE.D3DSPSM_NONE;
pub const D3DSPSM_NEG = D3DSHADER_PARAM_SRCMOD_TYPE.D3DSPSM_NEG;
pub const D3DSPSM_BIAS = D3DSHADER_PARAM_SRCMOD_TYPE.D3DSPSM_BIAS;
pub const D3DSPSM_BIASNEG = D3DSHADER_PARAM_SRCMOD_TYPE.D3DSPSM_BIASNEG;
pub const D3DSPSM_SIGN = D3DSHADER_PARAM_SRCMOD_TYPE.D3DSPSM_SIGN;
pub const D3DSPSM_SIGNNEG = D3DSHADER_PARAM_SRCMOD_TYPE.D3DSPSM_SIGNNEG;
pub const D3DSPSM_COMP = D3DSHADER_PARAM_SRCMOD_TYPE.D3DSPSM_COMP;
pub const D3DSPSM_X2 = D3DSHADER_PARAM_SRCMOD_TYPE.D3DSPSM_X2;
pub const D3DSPSM_X2NEG = D3DSHADER_PARAM_SRCMOD_TYPE.D3DSPSM_X2NEG;
pub const D3DSPSM_DZ = D3DSHADER_PARAM_SRCMOD_TYPE.D3DSPSM_DZ;
pub const D3DSPSM_DW = D3DSHADER_PARAM_SRCMOD_TYPE.D3DSPSM_DW;
pub const D3DSPSM_ABS = D3DSHADER_PARAM_SRCMOD_TYPE.D3DSPSM_ABS;
pub const D3DSPSM_ABSNEG = D3DSHADER_PARAM_SRCMOD_TYPE.D3DSPSM_ABSNEG;
pub const D3DSPSM_NOT = D3DSHADER_PARAM_SRCMOD_TYPE.D3DSPSM_NOT;
pub const D3DSPSM_FORCE_DWORD = D3DSHADER_PARAM_SRCMOD_TYPE.D3DSPSM_FORCE_DWORD;

pub const D3DSHADER_MIN_PRECISION = extern enum(i32) {
    D3DMP_DEFAULT = 0,
    D3DMP_16 = 1,
    D3DMP_2_8 = 2,
};
pub const D3DMP_DEFAULT = D3DSHADER_MIN_PRECISION.D3DMP_DEFAULT;
pub const D3DMP_16 = D3DSHADER_MIN_PRECISION.D3DMP_16;
pub const D3DMP_2_8 = D3DSHADER_MIN_PRECISION.D3DMP_2_8;

pub const D3DBASISTYPE = extern enum(i32) {
    D3DBASIS_BEZIER = 0,
    D3DBASIS_BSPLINE = 1,
    D3DBASIS_CATMULL_ROM = 2,
    D3DBASIS_FORCE_DWORD = 2147483647,
};
pub const D3DBASIS_BEZIER = D3DBASISTYPE.D3DBASIS_BEZIER;
pub const D3DBASIS_BSPLINE = D3DBASISTYPE.D3DBASIS_BSPLINE;
pub const D3DBASIS_CATMULL_ROM = D3DBASISTYPE.D3DBASIS_CATMULL_ROM;
pub const D3DBASIS_FORCE_DWORD = D3DBASISTYPE.D3DBASIS_FORCE_DWORD;

pub const D3DDEGREETYPE = extern enum(i32) {
    D3DDEGREE_LINEAR = 1,
    D3DDEGREE_QUADRATIC = 2,
    D3DDEGREE_CUBIC = 3,
    D3DDEGREE_QUINTIC = 5,
    D3DDEGREE_FORCE_DWORD = 2147483647,
};
pub const D3DDEGREE_LINEAR = D3DDEGREETYPE.D3DDEGREE_LINEAR;
pub const D3DDEGREE_QUADRATIC = D3DDEGREETYPE.D3DDEGREE_QUADRATIC;
pub const D3DDEGREE_CUBIC = D3DDEGREETYPE.D3DDEGREE_CUBIC;
pub const D3DDEGREE_QUINTIC = D3DDEGREETYPE.D3DDEGREE_QUINTIC;
pub const D3DDEGREE_FORCE_DWORD = D3DDEGREETYPE.D3DDEGREE_FORCE_DWORD;

pub const D3DPATCHEDGESTYLE = extern enum(i32) {
    D3DPATCHEDGE_DISCRETE = 0,
    D3DPATCHEDGE_CONTINUOUS = 1,
    D3DPATCHEDGE_FORCE_DWORD = 2147483647,
};
pub const D3DPATCHEDGE_DISCRETE = D3DPATCHEDGESTYLE.D3DPATCHEDGE_DISCRETE;
pub const D3DPATCHEDGE_CONTINUOUS = D3DPATCHEDGESTYLE.D3DPATCHEDGE_CONTINUOUS;
pub const D3DPATCHEDGE_FORCE_DWORD = D3DPATCHEDGESTYLE.D3DPATCHEDGE_FORCE_DWORD;

pub const D3DDEVTYPE = extern enum(u32) {
    HAL = 1,
    REF = 2,
    SW = 3,
    NULLREF = 4,
    FORCE_DWORD = 2147483647,
};
pub const D3DDEVTYPE_HAL = D3DDEVTYPE.HAL;
pub const D3DDEVTYPE_REF = D3DDEVTYPE.REF;
pub const D3DDEVTYPE_SW = D3DDEVTYPE.SW;
pub const D3DDEVTYPE_NULLREF = D3DDEVTYPE.NULLREF;
pub const D3DDEVTYPE_FORCE_DWORD = D3DDEVTYPE.FORCE_DWORD;

pub const D3DMULTISAMPLE_TYPE = extern enum(i32) {
    D3DMULTISAMPLE_NONE = 0,
    D3DMULTISAMPLE_NONMASKABLE = 1,
    D3DMULTISAMPLE_2_SAMPLES = 2,
    D3DMULTISAMPLE_3_SAMPLES = 3,
    D3DMULTISAMPLE_4_SAMPLES = 4,
    D3DMULTISAMPLE_5_SAMPLES = 5,
    D3DMULTISAMPLE_6_SAMPLES = 6,
    D3DMULTISAMPLE_7_SAMPLES = 7,
    D3DMULTISAMPLE_8_SAMPLES = 8,
    D3DMULTISAMPLE_9_SAMPLES = 9,
    D3DMULTISAMPLE_10_SAMPLES = 10,
    D3DMULTISAMPLE_11_SAMPLES = 11,
    D3DMULTISAMPLE_12_SAMPLES = 12,
    D3DMULTISAMPLE_13_SAMPLES = 13,
    D3DMULTISAMPLE_14_SAMPLES = 14,
    D3DMULTISAMPLE_15_SAMPLES = 15,
    D3DMULTISAMPLE_16_SAMPLES = 16,
    D3DMULTISAMPLE_FORCE_DWORD = 2147483647,
};
pub const D3DMULTISAMPLE_NONE = D3DMULTISAMPLE_TYPE.D3DMULTISAMPLE_NONE;
pub const D3DMULTISAMPLE_NONMASKABLE = D3DMULTISAMPLE_TYPE.D3DMULTISAMPLE_NONMASKABLE;
pub const D3DMULTISAMPLE_2_SAMPLES = D3DMULTISAMPLE_TYPE.D3DMULTISAMPLE_2_SAMPLES;
pub const D3DMULTISAMPLE_3_SAMPLES = D3DMULTISAMPLE_TYPE.D3DMULTISAMPLE_3_SAMPLES;
pub const D3DMULTISAMPLE_4_SAMPLES = D3DMULTISAMPLE_TYPE.D3DMULTISAMPLE_4_SAMPLES;
pub const D3DMULTISAMPLE_5_SAMPLES = D3DMULTISAMPLE_TYPE.D3DMULTISAMPLE_5_SAMPLES;
pub const D3DMULTISAMPLE_6_SAMPLES = D3DMULTISAMPLE_TYPE.D3DMULTISAMPLE_6_SAMPLES;
pub const D3DMULTISAMPLE_7_SAMPLES = D3DMULTISAMPLE_TYPE.D3DMULTISAMPLE_7_SAMPLES;
pub const D3DMULTISAMPLE_8_SAMPLES = D3DMULTISAMPLE_TYPE.D3DMULTISAMPLE_8_SAMPLES;
pub const D3DMULTISAMPLE_9_SAMPLES = D3DMULTISAMPLE_TYPE.D3DMULTISAMPLE_9_SAMPLES;
pub const D3DMULTISAMPLE_10_SAMPLES = D3DMULTISAMPLE_TYPE.D3DMULTISAMPLE_10_SAMPLES;
pub const D3DMULTISAMPLE_11_SAMPLES = D3DMULTISAMPLE_TYPE.D3DMULTISAMPLE_11_SAMPLES;
pub const D3DMULTISAMPLE_12_SAMPLES = D3DMULTISAMPLE_TYPE.D3DMULTISAMPLE_12_SAMPLES;
pub const D3DMULTISAMPLE_13_SAMPLES = D3DMULTISAMPLE_TYPE.D3DMULTISAMPLE_13_SAMPLES;
pub const D3DMULTISAMPLE_14_SAMPLES = D3DMULTISAMPLE_TYPE.D3DMULTISAMPLE_14_SAMPLES;
pub const D3DMULTISAMPLE_15_SAMPLES = D3DMULTISAMPLE_TYPE.D3DMULTISAMPLE_15_SAMPLES;
pub const D3DMULTISAMPLE_16_SAMPLES = D3DMULTISAMPLE_TYPE.D3DMULTISAMPLE_16_SAMPLES;
pub const D3DMULTISAMPLE_FORCE_DWORD = D3DMULTISAMPLE_TYPE.D3DMULTISAMPLE_FORCE_DWORD;

pub const D3DFORMAT = extern enum(u32) {
    D3DFMT_UNKNOWN = 0,
    D3DFMT_R8G8B8 = 20,
    D3DFMT_A8R8G8B8 = 21,
    D3DFMT_X8R8G8B8 = 22,
    D3DFMT_R5G6B5 = 23,
    D3DFMT_X1R5G5B5 = 24,
    D3DFMT_A1R5G5B5 = 25,
    D3DFMT_A4R4G4B4 = 26,
    D3DFMT_R3G3B2 = 27,
    D3DFMT_A8 = 28,
    D3DFMT_A8R3G3B2 = 29,
    D3DFMT_X4R4G4B4 = 30,
    D3DFMT_A2B10G10R10 = 31,
    D3DFMT_A8B8G8R8 = 32,
    D3DFMT_X8B8G8R8 = 33,
    D3DFMT_G16R16 = 34,
    D3DFMT_A2R10G10B10 = 35,
    D3DFMT_A16B16G16R16 = 36,
    D3DFMT_A8P8 = 40,
    D3DFMT_P8 = 41,
    D3DFMT_L8 = 50,
    D3DFMT_A8L8 = 51,
    D3DFMT_A4L4 = 52,
    D3DFMT_V8U8 = 60,
    D3DFMT_L6V5U5 = 61,
    D3DFMT_X8L8V8U8 = 62,
    D3DFMT_Q8W8V8U8 = 63,
    D3DFMT_V16U16 = 64,
    D3DFMT_A2W10V10U10 = 67,
    D3DFMT_UYVY = 1498831189,
    D3DFMT_R8G8_B8G8 = 1195525970,
    D3DFMT_YUY2 = 844715353,
    D3DFMT_G8R8_G8B8 = 1111970375,
    D3DFMT_DXT1 = 827611204,
    D3DFMT_DXT2 = 844388420,
    D3DFMT_DXT3 = 861165636,
    D3DFMT_DXT4 = 877942852,
    D3DFMT_DXT5 = 894720068,
    D3DFMT_D16_LOCKABLE = 70,
    D3DFMT_D32 = 71,
    D3DFMT_D15S1 = 73,
    D3DFMT_D24S8 = 75,
    D3DFMT_D24X8 = 77,
    D3DFMT_D24X4S4 = 79,
    D3DFMT_D16 = 80,
    D3DFMT_D32F_LOCKABLE = 82,
    D3DFMT_D24FS8 = 83,
    D3DFMT_D32_LOCKABLE = 84,
    D3DFMT_S8_LOCKABLE = 85,
    D3DFMT_L16 = 81,
    D3DFMT_VERTEXDATA = 100,
    D3DFMT_INDEX16 = 101,
    D3DFMT_INDEX32 = 102,
    D3DFMT_Q16W16V16U16 = 110,
    D3DFMT_MULTI2_ARGB8 = 827606349,
    D3DFMT_R16F = 111,
    D3DFMT_G16R16F = 112,
    D3DFMT_A16B16G16R16F = 113,
    D3DFMT_R32F = 114,
    D3DFMT_G32R32F = 115,
    D3DFMT_A32B32G32R32F = 116,
    D3DFMT_CxV8U8 = 117,
    D3DFMT_A1 = 118,
    D3DFMT_A2B10G10R10_XR_BIAS = 119,
    D3DFMT_BINARYBUFFER = 199,
    D3DFMT_FORCE_DWORD = 2147483647,
};
pub const D3DFMT_UNKNOWN = D3DFORMAT.D3DFMT_UNKNOWN;
pub const D3DFMT_R8G8B8 = D3DFORMAT.D3DFMT_R8G8B8;
pub const D3DFMT_A8R8G8B8 = D3DFORMAT.D3DFMT_A8R8G8B8;
pub const D3DFMT_X8R8G8B8 = D3DFORMAT.D3DFMT_X8R8G8B8;
pub const D3DFMT_R5G6B5 = D3DFORMAT.D3DFMT_R5G6B5;
pub const D3DFMT_X1R5G5B5 = D3DFORMAT.D3DFMT_X1R5G5B5;
pub const D3DFMT_A1R5G5B5 = D3DFORMAT.D3DFMT_A1R5G5B5;
pub const D3DFMT_A4R4G4B4 = D3DFORMAT.D3DFMT_A4R4G4B4;
pub const D3DFMT_R3G3B2 = D3DFORMAT.D3DFMT_R3G3B2;
pub const D3DFMT_A8 = D3DFORMAT.D3DFMT_A8;
pub const D3DFMT_A8R3G3B2 = D3DFORMAT.D3DFMT_A8R3G3B2;
pub const D3DFMT_X4R4G4B4 = D3DFORMAT.D3DFMT_X4R4G4B4;
pub const D3DFMT_A2B10G10R10 = D3DFORMAT.D3DFMT_A2B10G10R10;
pub const D3DFMT_A8B8G8R8 = D3DFORMAT.D3DFMT_A8B8G8R8;
pub const D3DFMT_X8B8G8R8 = D3DFORMAT.D3DFMT_X8B8G8R8;
pub const D3DFMT_G16R16 = D3DFORMAT.D3DFMT_G16R16;
pub const D3DFMT_A2R10G10B10 = D3DFORMAT.D3DFMT_A2R10G10B10;
pub const D3DFMT_A16B16G16R16 = D3DFORMAT.D3DFMT_A16B16G16R16;
pub const D3DFMT_A8P8 = D3DFORMAT.D3DFMT_A8P8;
pub const D3DFMT_P8 = D3DFORMAT.D3DFMT_P8;
pub const D3DFMT_L8 = D3DFORMAT.D3DFMT_L8;
pub const D3DFMT_A8L8 = D3DFORMAT.D3DFMT_A8L8;
pub const D3DFMT_A4L4 = D3DFORMAT.D3DFMT_A4L4;
pub const D3DFMT_V8U8 = D3DFORMAT.D3DFMT_V8U8;
pub const D3DFMT_L6V5U5 = D3DFORMAT.D3DFMT_L6V5U5;
pub const D3DFMT_X8L8V8U8 = D3DFORMAT.D3DFMT_X8L8V8U8;
pub const D3DFMT_Q8W8V8U8 = D3DFORMAT.D3DFMT_Q8W8V8U8;
pub const D3DFMT_V16U16 = D3DFORMAT.D3DFMT_V16U16;
pub const D3DFMT_A2W10V10U10 = D3DFORMAT.D3DFMT_A2W10V10U10;
pub const D3DFMT_UYVY = D3DFORMAT.D3DFMT_UYVY;
pub const D3DFMT_R8G8_B8G8 = D3DFORMAT.D3DFMT_R8G8_B8G8;
pub const D3DFMT_YUY2 = D3DFORMAT.D3DFMT_YUY2;
pub const D3DFMT_G8R8_G8B8 = D3DFORMAT.D3DFMT_G8R8_G8B8;
pub const D3DFMT_DXT1 = D3DFORMAT.D3DFMT_DXT1;
pub const D3DFMT_DXT2 = D3DFORMAT.D3DFMT_DXT2;
pub const D3DFMT_DXT3 = D3DFORMAT.D3DFMT_DXT3;
pub const D3DFMT_DXT4 = D3DFORMAT.D3DFMT_DXT4;
pub const D3DFMT_DXT5 = D3DFORMAT.D3DFMT_DXT5;
pub const D3DFMT_D16_LOCKABLE = D3DFORMAT.D3DFMT_D16_LOCKABLE;
pub const D3DFMT_D32 = D3DFORMAT.D3DFMT_D32;
pub const D3DFMT_D15S1 = D3DFORMAT.D3DFMT_D15S1;
pub const D3DFMT_D24S8 = D3DFORMAT.D3DFMT_D24S8;
pub const D3DFMT_D24X8 = D3DFORMAT.D3DFMT_D24X8;
pub const D3DFMT_D24X4S4 = D3DFORMAT.D3DFMT_D24X4S4;
pub const D3DFMT_D16 = D3DFORMAT.D3DFMT_D16;
pub const D3DFMT_D32F_LOCKABLE = D3DFORMAT.D3DFMT_D32F_LOCKABLE;
pub const D3DFMT_D24FS8 = D3DFORMAT.D3DFMT_D24FS8;
pub const D3DFMT_D32_LOCKABLE = D3DFORMAT.D3DFMT_D32_LOCKABLE;
pub const D3DFMT_S8_LOCKABLE = D3DFORMAT.D3DFMT_S8_LOCKABLE;
pub const D3DFMT_L16 = D3DFORMAT.D3DFMT_L16;
pub const D3DFMT_VERTEXDATA = D3DFORMAT.D3DFMT_VERTEXDATA;
pub const D3DFMT_INDEX16 = D3DFORMAT.D3DFMT_INDEX16;
pub const D3DFMT_INDEX32 = D3DFORMAT.D3DFMT_INDEX32;
pub const D3DFMT_Q16W16V16U16 = D3DFORMAT.D3DFMT_Q16W16V16U16;
pub const D3DFMT_MULTI2_ARGB8 = D3DFORMAT.D3DFMT_MULTI2_ARGB8;
pub const D3DFMT_R16F = D3DFORMAT.D3DFMT_R16F;
pub const D3DFMT_G16R16F = D3DFORMAT.D3DFMT_G16R16F;
pub const D3DFMT_A16B16G16R16F = D3DFORMAT.D3DFMT_A16B16G16R16F;
pub const D3DFMT_R32F = D3DFORMAT.D3DFMT_R32F;
pub const D3DFMT_G32R32F = D3DFORMAT.D3DFMT_G32R32F;
pub const D3DFMT_A32B32G32R32F = D3DFORMAT.D3DFMT_A32B32G32R32F;
pub const D3DFMT_CxV8U8 = D3DFORMAT.D3DFMT_CxV8U8;
pub const D3DFMT_A1 = D3DFORMAT.D3DFMT_A1;
pub const D3DFMT_A2B10G10R10_XR_BIAS = D3DFORMAT.D3DFMT_A2B10G10R10_XR_BIAS;
pub const D3DFMT_BINARYBUFFER = D3DFORMAT.D3DFMT_BINARYBUFFER;
pub const D3DFMT_FORCE_DWORD = D3DFORMAT.D3DFMT_FORCE_DWORD;

pub const D3DDISPLAYMODE = extern struct {
    Width: u32,
    Height: u32,
    RefreshRate: u32,
    Format: D3DFORMAT,
};

pub const D3DDEVICE_CREATION_PARAMETERS = extern struct {
    AdapterOrdinal: u32,
    DeviceType: D3DDEVTYPE,
    hFocusWindow: HWND,
    BehaviorFlags: u32,
};

pub const D3DSWAPEFFECT = extern enum(u32) {
    DISCARD = 1,
    FLIP = 2,
    COPY = 3,
    OVERLAY = 4,
    FLIPEX = 5,
    FORCE_DWORD = 2147483647,
};
pub const D3DSWAPEFFECT_DISCARD = D3DSWAPEFFECT.DISCARD;
pub const D3DSWAPEFFECT_FLIP = D3DSWAPEFFECT.FLIP;
pub const D3DSWAPEFFECT_COPY = D3DSWAPEFFECT.COPY;
pub const D3DSWAPEFFECT_OVERLAY = D3DSWAPEFFECT.OVERLAY;
pub const D3DSWAPEFFECT_FLIPEX = D3DSWAPEFFECT.FLIPEX;
pub const D3DSWAPEFFECT_FORCE_DWORD = D3DSWAPEFFECT.FORCE_DWORD;

pub const D3DPOOL = extern enum(u32) {
    DEFAULT = 0,
    MANAGED = 1,
    SYSTEMMEM = 2,
    SCRATCH = 3,
    FORCE_DWORD = 2147483647,
};
pub const D3DPOOL_DEFAULT = D3DPOOL.DEFAULT;
pub const D3DPOOL_MANAGED = D3DPOOL.MANAGED;
pub const D3DPOOL_SYSTEMMEM = D3DPOOL.SYSTEMMEM;
pub const D3DPOOL_SCRATCH = D3DPOOL.SCRATCH;
pub const D3DPOOL_FORCE_DWORD = D3DPOOL.FORCE_DWORD;

pub const D3DPRESENT_PARAMETERS = extern struct {
    BackBufferWidth: u32,
    BackBufferHeight: u32,
    BackBufferFormat: D3DFORMAT,
    BackBufferCount: u32,
    MultiSampleType: D3DMULTISAMPLE_TYPE,
    MultiSampleQuality: u32,
    SwapEffect: D3DSWAPEFFECT,
    hDeviceWindow: HWND,
    Windowed: BOOL,
    EnableAutoDepthStencil: BOOL,
    AutoDepthStencilFormat: D3DFORMAT,
    Flags: u32,
    FullScreen_RefreshRateInHz: u32,
    PresentationInterval: u32,
};

pub const D3DGAMMARAMP = extern struct {
    red: [256]u16,
    green: [256]u16,
    blue: [256]u16,
};

pub const D3DBACKBUFFER_TYPE = extern enum(u32) {
    MONO = 0,
    LEFT = 1,
    RIGHT = 2,
    FORCE_DWORD = 2147483647,
};
pub const D3DBACKBUFFER_TYPE_MONO = D3DBACKBUFFER_TYPE.MONO;
pub const D3DBACKBUFFER_TYPE_LEFT = D3DBACKBUFFER_TYPE.LEFT;
pub const D3DBACKBUFFER_TYPE_RIGHT = D3DBACKBUFFER_TYPE.RIGHT;
pub const D3DBACKBUFFER_TYPE_FORCE_DWORD = D3DBACKBUFFER_TYPE.FORCE_DWORD;

pub const D3DRESOURCETYPE = extern enum(i32) {
    D3DRTYPE_SURFACE = 1,
    D3DRTYPE_VOLUME = 2,
    D3DRTYPE_TEXTURE = 3,
    D3DRTYPE_VOLUMETEXTURE = 4,
    D3DRTYPE_CUBETEXTURE = 5,
    D3DRTYPE_VERTEXBUFFER = 6,
    D3DRTYPE_INDEXBUFFER = 7,
    D3DRTYPE_FORCE_DWORD = 2147483647,
};
pub const D3DRTYPE_SURFACE = D3DRESOURCETYPE.D3DRTYPE_SURFACE;
pub const D3DRTYPE_VOLUME = D3DRESOURCETYPE.D3DRTYPE_VOLUME;
pub const D3DRTYPE_TEXTURE = D3DRESOURCETYPE.D3DRTYPE_TEXTURE;
pub const D3DRTYPE_VOLUMETEXTURE = D3DRESOURCETYPE.D3DRTYPE_VOLUMETEXTURE;
pub const D3DRTYPE_CUBETEXTURE = D3DRESOURCETYPE.D3DRTYPE_CUBETEXTURE;
pub const D3DRTYPE_VERTEXBUFFER = D3DRESOURCETYPE.D3DRTYPE_VERTEXBUFFER;
pub const D3DRTYPE_INDEXBUFFER = D3DRESOURCETYPE.D3DRTYPE_INDEXBUFFER;
pub const D3DRTYPE_FORCE_DWORD = D3DRESOURCETYPE.D3DRTYPE_FORCE_DWORD;

pub const D3DCUBEMAP_FACES = extern enum(i32) {
    D3DCUBEMAP_FACE_POSITIVE_X = 0,
    D3DCUBEMAP_FACE_NEGATIVE_X = 1,
    D3DCUBEMAP_FACE_POSITIVE_Y = 2,
    D3DCUBEMAP_FACE_NEGATIVE_Y = 3,
    D3DCUBEMAP_FACE_POSITIVE_Z = 4,
    D3DCUBEMAP_FACE_NEGATIVE_Z = 5,
    D3DCUBEMAP_FACE_FORCE_DWORD = 2147483647,
};
pub const D3DCUBEMAP_FACE_POSITIVE_X = D3DCUBEMAP_FACES.D3DCUBEMAP_FACE_POSITIVE_X;
pub const D3DCUBEMAP_FACE_NEGATIVE_X = D3DCUBEMAP_FACES.D3DCUBEMAP_FACE_NEGATIVE_X;
pub const D3DCUBEMAP_FACE_POSITIVE_Y = D3DCUBEMAP_FACES.D3DCUBEMAP_FACE_POSITIVE_Y;
pub const D3DCUBEMAP_FACE_NEGATIVE_Y = D3DCUBEMAP_FACES.D3DCUBEMAP_FACE_NEGATIVE_Y;
pub const D3DCUBEMAP_FACE_POSITIVE_Z = D3DCUBEMAP_FACES.D3DCUBEMAP_FACE_POSITIVE_Z;
pub const D3DCUBEMAP_FACE_NEGATIVE_Z = D3DCUBEMAP_FACES.D3DCUBEMAP_FACE_NEGATIVE_Z;
pub const D3DCUBEMAP_FACE_FORCE_DWORD = D3DCUBEMAP_FACES.D3DCUBEMAP_FACE_FORCE_DWORD;

pub const D3DVERTEXBUFFER_DESC = extern struct {
    Format: D3DFORMAT,
    Type: D3DRESOURCETYPE,
    Usage: u32,
    Pool: D3DPOOL,
    Size: u32,
    FVF: u32,
};

pub const D3DINDEXBUFFER_DESC = extern struct {
    Format: D3DFORMAT,
    Type: D3DRESOURCETYPE,
    Usage: u32,
    Pool: D3DPOOL,
    Size: u32,
};

pub const D3DSURFACE_DESC = extern struct {
    Format: D3DFORMAT,
    Type: D3DRESOURCETYPE,
    Usage: u32,
    Pool: D3DPOOL,
    MultiSampleType: D3DMULTISAMPLE_TYPE,
    MultiSampleQuality: u32,
    Width: u32,
    Height: u32,
};

pub const D3DVOLUME_DESC = extern struct {
    Format: D3DFORMAT,
    Type: D3DRESOURCETYPE,
    Usage: u32,
    Pool: D3DPOOL,
    Width: u32,
    Height: u32,
    Depth: u32,
};

pub const D3DLOCKED_RECT = extern struct {
    Pitch: i32,
    pBits: *c_void,
};

pub const D3DBOX = extern struct {
    Left: u32,
    Top: u32,
    Right: u32,
    Bottom: u32,
    Front: u32,
    Back: u32,
};

pub const D3DLOCKED_BOX = extern struct {
    RowPitch: i32,
    SlicePitch: i32,
    pBits: *c_void,
};

pub const D3DRANGE = extern struct {
    Offset: u32,
    Size: u32,
};

pub const D3DRECTPATCH_INFO = extern struct {
    StartVertexOffsetWidth: u32,
    StartVertexOffsetHeight: u32,
    Width: u32,
    Height: u32,
    Stride: u32,
    Basis: D3DBASISTYPE,
    Degree: D3DDEGREETYPE,
};

pub const D3DTRIPATCH_INFO = extern struct {
    StartVertexOffset: u32,
    NumVertices: u32,
    Basis: D3DBASISTYPE,
    Degree: D3DDEGREETYPE,
};

pub const D3DADAPTER_IDENTIFIER9 = extern struct {
    Driver: [512]i8,
    Description: [512]i8,
    DeviceName: [32]i8,
    DriverVersion: LARGE_INTEGER,
    VendorId: u32,
    DeviceId: u32,
    SubSysId: u32,
    Revision: u32,
    DeviceIdentifier: Guid,
    WHQLLevel: u32,
};

pub const D3DRASTER_STATUS = extern struct {
    InVBlank: BOOL,
    ScanLine: u32,
};

pub const D3DDEBUGMONITORTOKENS = extern enum(i32) {
    D3DDMT_ENABLE = 0,
    D3DDMT_DISABLE = 1,
    D3DDMT_FORCE_DWORD = 2147483647,
};
pub const D3DDMT_ENABLE = D3DDEBUGMONITORTOKENS.D3DDMT_ENABLE;
pub const D3DDMT_DISABLE = D3DDEBUGMONITORTOKENS.D3DDMT_DISABLE;
pub const D3DDMT_FORCE_DWORD = D3DDEBUGMONITORTOKENS.D3DDMT_FORCE_DWORD;

pub const D3DQUERYTYPE = extern enum(i32) {
    VCACHE = 4,
    RESOURCEMANAGER = 5,
    VERTEXSTATS = 6,
    EVENT = 8,
    OCCLUSION = 9,
    TIMESTAMP = 10,
    TIMESTAMPDISJOINT = 11,
    TIMESTAMPFREQ = 12,
    PIPELINETIMINGS = 13,
    INTERFACETIMINGS = 14,
    VERTEXTIMINGS = 15,
    PIXELTIMINGS = 16,
    BANDWIDTHTIMINGS = 17,
    CACHEUTILIZATION = 18,
    MEMORYPRESSURE = 19,
};
pub const D3DQUERYTYPE_VCACHE = D3DQUERYTYPE.VCACHE;
pub const D3DQUERYTYPE_RESOURCEMANAGER = D3DQUERYTYPE.RESOURCEMANAGER;
pub const D3DQUERYTYPE_VERTEXSTATS = D3DQUERYTYPE.VERTEXSTATS;
pub const D3DQUERYTYPE_EVENT = D3DQUERYTYPE.EVENT;
pub const D3DQUERYTYPE_OCCLUSION = D3DQUERYTYPE.OCCLUSION;
pub const D3DQUERYTYPE_TIMESTAMP = D3DQUERYTYPE.TIMESTAMP;
pub const D3DQUERYTYPE_TIMESTAMPDISJOINT = D3DQUERYTYPE.TIMESTAMPDISJOINT;
pub const D3DQUERYTYPE_TIMESTAMPFREQ = D3DQUERYTYPE.TIMESTAMPFREQ;
pub const D3DQUERYTYPE_PIPELINETIMINGS = D3DQUERYTYPE.PIPELINETIMINGS;
pub const D3DQUERYTYPE_INTERFACETIMINGS = D3DQUERYTYPE.INTERFACETIMINGS;
pub const D3DQUERYTYPE_VERTEXTIMINGS = D3DQUERYTYPE.VERTEXTIMINGS;
pub const D3DQUERYTYPE_PIXELTIMINGS = D3DQUERYTYPE.PIXELTIMINGS;
pub const D3DQUERYTYPE_BANDWIDTHTIMINGS = D3DQUERYTYPE.BANDWIDTHTIMINGS;
pub const D3DQUERYTYPE_CACHEUTILIZATION = D3DQUERYTYPE.CACHEUTILIZATION;
pub const D3DQUERYTYPE_MEMORYPRESSURE = D3DQUERYTYPE.MEMORYPRESSURE;

pub const D3DRESOURCESTATS = extern struct {
    bThrashing: BOOL,
    ApproxBytesDownloaded: u32,
    NumEvicts: u32,
    NumVidCreates: u32,
    LastPri: u32,
    NumUsed: u32,
    NumUsedInVidMem: u32,
    WorkingSet: u32,
    WorkingSetBytes: u32,
    TotalManaged: u32,
    TotalBytes: u32,
};

pub const D3DDEVINFO_RESOURCEMANAGER = extern struct {
    stats: [8]D3DRESOURCESTATS,
};

pub const D3DDEVINFO_D3DVERTEXSTATS = extern struct {
    NumRenderedTriangles: u32,
    NumExtraClippingTriangles: u32,
};

pub const D3DDEVINFO_VCACHE = extern struct {
    Pattern: u32,
    OptMethod: u32,
    CacheSize: u32,
    MagicNumber: u32,
};

pub const D3DDEVINFO_D3D9PIPELINETIMINGS = extern struct {
    VertexProcessingTimePercent: f32,
    PixelProcessingTimePercent: f32,
    OtherGPUProcessingTimePercent: f32,
    GPUIdleTimePercent: f32,
};

pub const D3DDEVINFO_D3D9INTERFACETIMINGS = extern struct {
    WaitingForGPUToUseApplicationResourceTimePercent: f32,
    WaitingForGPUToAcceptMoreCommandsTimePercent: f32,
    WaitingForGPUToStayWithinLatencyTimePercent: f32,
    WaitingForGPUExclusiveResourceTimePercent: f32,
    WaitingForGPUOtherTimePercent: f32,
};

pub const D3DDEVINFO_D3D9STAGETIMINGS = extern struct {
    MemoryProcessingPercent: f32,
    ComputationProcessingPercent: f32,
};

pub const D3DDEVINFO_D3D9BANDWIDTHTIMINGS = extern struct {
    MaxBandwidthUtilized: f32,
    FrontEndUploadMemoryUtilizedPercent: f32,
    VertexRateUtilizedPercent: f32,
    TriangleSetupRateUtilizedPercent: f32,
    FillRateUtilizedPercent: f32,
};

pub const D3DDEVINFO_D3D9CACHEUTILIZATION = extern struct {
    TextureCacheHitRate: f32,
    PostTransformVertexCacheHitRate: f32,
};

pub const D3DMEMORYPRESSURE = extern struct {
    BytesEvictedFromProcess: u64,
    SizeOfInefficientAllocation: u64,
    LevelOfEfficiency: u32,
};

pub const D3DCOMPOSERECTSOP = extern enum(i32) {
    D3DCOMPOSERECTS_COPY = 1,
    D3DCOMPOSERECTS_OR = 2,
    D3DCOMPOSERECTS_AND = 3,
    D3DCOMPOSERECTS_NEG = 4,
    D3DCOMPOSERECTS_FORCE_DWORD = 2147483647,
};
pub const D3DCOMPOSERECTS_COPY = D3DCOMPOSERECTSOP.D3DCOMPOSERECTS_COPY;
pub const D3DCOMPOSERECTS_OR = D3DCOMPOSERECTSOP.D3DCOMPOSERECTS_OR;
pub const D3DCOMPOSERECTS_AND = D3DCOMPOSERECTSOP.D3DCOMPOSERECTS_AND;
pub const D3DCOMPOSERECTS_NEG = D3DCOMPOSERECTSOP.D3DCOMPOSERECTS_NEG;
pub const D3DCOMPOSERECTS_FORCE_DWORD = D3DCOMPOSERECTSOP.D3DCOMPOSERECTS_FORCE_DWORD;

pub const D3DCOMPOSERECTDESC = extern struct {
    X: u16,
    Y: u16,
    Width: u16,
    Height: u16,
};

pub const D3DCOMPOSERECTDESTINATION = extern struct {
    SrcRectIndex: u16,
    Reserved: u16,
    X: i16,
    Y: i16,
};

pub const D3DPRESENTSTATS = extern struct {
    PresentCount: u32,
    PresentRefreshCount: u32,
    SyncRefreshCount: u32,
    SyncQPCTime: LARGE_INTEGER,
    SyncGPUTime: LARGE_INTEGER,
};

pub const D3DSCANLINEORDERING = extern enum(i32) {
    UNKNOWN = 0,
    PROGRESSIVE = 1,
    INTERLACED = 2,
};
pub const D3DSCANLINEORDERING_UNKNOWN = D3DSCANLINEORDERING.UNKNOWN;
pub const D3DSCANLINEORDERING_PROGRESSIVE = D3DSCANLINEORDERING.PROGRESSIVE;
pub const D3DSCANLINEORDERING_INTERLACED = D3DSCANLINEORDERING.INTERLACED;

pub const D3DDISPLAYMODEEX = extern struct {
    Size: u32,
    Width: u32,
    Height: u32,
    RefreshRate: u32,
    Format: D3DFORMAT,
    ScanLineOrdering: D3DSCANLINEORDERING,
};

pub const D3DDISPLAYMODEFILTER = extern struct {
    Size: u32,
    Format: D3DFORMAT,
    ScanLineOrdering: D3DSCANLINEORDERING,
};

pub const D3DDISPLAYROTATION = extern enum(i32) {
    IDENTITY = 1,
    _90 = 2,
    _180 = 3,
    _270 = 4,
};
pub const D3DDISPLAYROTATION_IDENTITY = D3DDISPLAYROTATION.IDENTITY;
pub const D3DDISPLAYROTATION_90 = D3DDISPLAYROTATION._90;
pub const D3DDISPLAYROTATION_180 = D3DDISPLAYROTATION._180;
pub const D3DDISPLAYROTATION_270 = D3DDISPLAYROTATION._270;

pub const D3D_OMAC = extern struct {
    Omac: [16]u8,
};

pub const D3DAUTHENTICATEDCHANNELTYPE = extern enum(i32) {
    D3DAUTHENTICATEDCHANNEL_D3D9 = 1,
    D3DAUTHENTICATEDCHANNEL_DRIVER_SOFTWARE = 2,
    D3DAUTHENTICATEDCHANNEL_DRIVER_HARDWARE = 3,
};
pub const D3DAUTHENTICATEDCHANNEL_D3D9 = D3DAUTHENTICATEDCHANNELTYPE.D3DAUTHENTICATEDCHANNEL_D3D9;
pub const D3DAUTHENTICATEDCHANNEL_DRIVER_SOFTWARE = D3DAUTHENTICATEDCHANNELTYPE.D3DAUTHENTICATEDCHANNEL_DRIVER_SOFTWARE;
pub const D3DAUTHENTICATEDCHANNEL_DRIVER_HARDWARE = D3DAUTHENTICATEDCHANNELTYPE.D3DAUTHENTICATEDCHANNEL_DRIVER_HARDWARE;

pub const D3DAUTHENTICATEDCHANNEL_QUERY_INPUT = extern struct {
    QueryType: Guid,
    hChannel: HANDLE,
    SequenceNumber: u32,
};

pub const D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT = extern struct {
    omac: D3D_OMAC,
    QueryType: Guid,
    hChannel: HANDLE,
    SequenceNumber: u32,
    ReturnCode: HRESULT,
};

pub const D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS = extern struct {
    Anonymous: D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const D3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    ProtectionFlags: D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS,
};

pub const D3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    ChannelType: D3DAUTHENTICATEDCHANNELTYPE,
};

pub const D3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    DeviceHandle: HANDLE,
};

pub const D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT = extern struct {
    Input: D3DAUTHENTICATEDCHANNEL_QUERY_INPUT,
    DXVA2DecodeHandle: HANDLE,
};

pub const D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    DXVA2DecodeHandle: HANDLE,
    CryptoSessionHandle: HANDLE,
    DeviceHandle: HANDLE,
};

pub const D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    NumRestrictedSharedResourceProcesses: u32,
};

pub const D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT = extern struct {
    Input: D3DAUTHENTICATEDCHANNEL_QUERY_INPUT,
    ProcessIndex: u32,
};

pub const D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE = extern enum(i32) {
    PROCESSIDTYPE_UNKNOWN = 0,
    PROCESSIDTYPE_DWM = 1,
    PROCESSIDTYPE_HANDLE = 2,
};
pub const PROCESSIDTYPE_UNKNOWN = D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE.PROCESSIDTYPE_UNKNOWN;
pub const PROCESSIDTYPE_DWM = D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE.PROCESSIDTYPE_DWM;
pub const PROCESSIDTYPE_HANDLE = D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE.PROCESSIDTYPE_HANDLE;

pub const D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    ProcessIndex: u32,
    ProcessIdentifer: D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE,
    ProcessHandle: HANDLE,
};

pub const D3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    NumUnrestrictedProtectedSharedResources: u32,
};

pub const D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT = extern struct {
    Input: D3DAUTHENTICATEDCHANNEL_QUERY_INPUT,
    DeviceHandle: HANDLE,
    CryptoSessionHandle: HANDLE,
};

pub const D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    DeviceHandle: HANDLE,
    CryptoSessionHandle: HANDLE,
    NumOutputIDs: u32,
};

pub const D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT = extern struct {
    Input: D3DAUTHENTICATEDCHANNEL_QUERY_INPUT,
    DeviceHandle: HANDLE,
    CryptoSessionHandle: HANDLE,
    OutputIDIndex: u32,
};

pub const D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    DeviceHandle: HANDLE,
    CryptoSessionHandle: HANDLE,
    OutputIDIndex: u32,
    OutputID: u64,
};

pub const D3DBUSTYPE = extern enum(i32) {
    OTHER = 0,
    PCI = 1,
    PCIX = 2,
    PCIEXPRESS = 3,
    AGP = 4,
    D3DBUSIMPL_MODIFIER_INSIDE_OF_CHIPSET = 65536,
    D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 131072,
    D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 196608,
    D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 262144,
    D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 327680,
    D3DBUSIMPL_MODIFIER_NON_STANDARD = -2147483648,
};
pub const D3DBUSTYPE_OTHER = D3DBUSTYPE.OTHER;
pub const D3DBUSTYPE_PCI = D3DBUSTYPE.PCI;
pub const D3DBUSTYPE_PCIX = D3DBUSTYPE.PCIX;
pub const D3DBUSTYPE_PCIEXPRESS = D3DBUSTYPE.PCIEXPRESS;
pub const D3DBUSTYPE_AGP = D3DBUSTYPE.AGP;
pub const D3DBUSIMPL_MODIFIER_INSIDE_OF_CHIPSET = D3DBUSTYPE.D3DBUSIMPL_MODIFIER_INSIDE_OF_CHIPSET;
pub const D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = D3DBUSTYPE.D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP;
pub const D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = D3DBUSTYPE.D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET;
pub const D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = D3DBUSTYPE.D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR;
pub const D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = D3DBUSTYPE.D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE;
pub const D3DBUSIMPL_MODIFIER_NON_STANDARD = D3DBUSTYPE.D3DBUSIMPL_MODIFIER_NON_STANDARD;

pub const D3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    BusType: D3DBUSTYPE,
    bAccessibleInContiguousBlocks: BOOL,
    bAccessibleInNonContiguousBlocks: BOOL,
};

pub const D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    NumEncryptionGuids: u32,
};

pub const D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT = extern struct {
    Input: D3DAUTHENTICATEDCHANNEL_QUERY_INPUT,
    EncryptionGuidIndex: u32,
};

pub const D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    EncryptionGuidIndex: u32,
    EncryptionGuid: Guid,
};

pub const D3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT = extern struct {
    Output: D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT,
    EncryptionGuid: Guid,
};

pub const D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT = extern struct {
    omac: D3D_OMAC,
    ConfigureType: Guid,
    hChannel: HANDLE,
    SequenceNumber: u32,
};

pub const D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT = extern struct {
    omac: D3D_OMAC,
    ConfigureType: Guid,
    hChannel: HANDLE,
    SequenceNumber: u32,
    ReturnCode: HRESULT,
};

pub const D3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE = extern struct {
    Parameters: D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT,
    StartSequenceQuery: u32,
    StartSequenceConfigure: u32,
};

pub const D3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION = extern struct {
    Parameters: D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT,
    Protections: D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS,
};

pub const D3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION = extern struct {
    Parameters: D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT,
    DXVA2DecodeHandle: HANDLE,
    CryptoSessionHandle: HANDLE,
    DeviceHandle: HANDLE,
};

pub const D3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE = extern struct {
    Parameters: D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT,
    ProcessIdentiferType: D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE,
    ProcessHandle: HANDLE,
    AllowAccess: BOOL,
};

pub const D3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION = extern struct {
    Parameters: D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT,
    EncryptionGuid: Guid,
};

pub const D3DENCRYPTED_BLOCK_INFO = extern struct {
    NumEncryptedBytesAtBeginning: u32,
    NumBytesInSkipPattern: u32,
    NumBytesInEncryptPattern: u32,
};

pub const D3DAES_CTR_IV = extern struct {
    IV: u64,
    Count: u64,
};

pub const D3DVSHADERCAPS2_0 = extern struct {
    Caps: u32,
    DynamicFlowControlDepth: i32,
    NumTemps: i32,
    StaticFlowControlDepth: i32,
};

pub const D3DPSHADERCAPS2_0 = extern struct {
    Caps: u32,
    DynamicFlowControlDepth: i32,
    NumTemps: i32,
    StaticFlowControlDepth: i32,
    NumInstructionSlots: i32,
};

pub const D3DCAPS9 = extern struct {
    DeviceType: D3DDEVTYPE,
    AdapterOrdinal: u32,
    Caps: u32,
    Caps2: u32,
    Caps3: u32,
    PresentationIntervals: u32,
    CursorCaps: u32,
    DevCaps: u32,
    PrimitiveMiscCaps: u32,
    RasterCaps: u32,
    ZCmpCaps: u32,
    SrcBlendCaps: u32,
    DestBlendCaps: u32,
    AlphaCmpCaps: u32,
    ShadeCaps: u32,
    TextureCaps: u32,
    TextureFilterCaps: u32,
    CubeTextureFilterCaps: u32,
    VolumeTextureFilterCaps: u32,
    TextureAddressCaps: u32,
    VolumeTextureAddressCaps: u32,
    LineCaps: u32,
    MaxTextureWidth: u32,
    MaxTextureHeight: u32,
    MaxVolumeExtent: u32,
    MaxTextureRepeat: u32,
    MaxTextureAspectRatio: u32,
    MaxAnisotropy: u32,
    MaxVertexW: f32,
    GuardBandLeft: f32,
    GuardBandTop: f32,
    GuardBandRight: f32,
    GuardBandBottom: f32,
    ExtentsAdjust: f32,
    StencilCaps: u32,
    FVFCaps: u32,
    TextureOpCaps: u32,
    MaxTextureBlendStages: u32,
    MaxSimultaneousTextures: u32,
    VertexProcessingCaps: u32,
    MaxActiveLights: u32,
    MaxUserClipPlanes: u32,
    MaxVertexBlendMatrices: u32,
    MaxVertexBlendMatrixIndex: u32,
    MaxPointSize: f32,
    MaxPrimitiveCount: u32,
    MaxVertexIndex: u32,
    MaxStreams: u32,
    MaxStreamStride: u32,
    VertexShaderVersion: u32,
    MaxVertexShaderConst: u32,
    PixelShaderVersion: u32,
    PixelShader1xMaxValue: f32,
    DevCaps2: u32,
    MaxNpatchTessellationLevel: f32,
    Reserved5: u32,
    MasterAdapterOrdinal: u32,
    AdapterOrdinalInGroup: u32,
    NumberOfAdaptersInGroup: u32,
    DeclTypes: u32,
    NumSimultaneousRTs: u32,
    StretchRectFilterCaps: u32,
    VS20Caps: D3DVSHADERCAPS2_0,
    PS20Caps: D3DPSHADERCAPS2_0,
    VertexTextureFilterCaps: u32,
    MaxVShaderInstructionsExecuted: u32,
    MaxPShaderInstructionsExecuted: u32,
    MaxVertexShader30InstructionSlots: u32,
    MaxPixelShader30InstructionSlots: u32,
};

const IID_IDirect3D9_Value = @import("../zig.zig").Guid.initString("81bdcbca-64d4-426d-ae8d-ad0147f4275c");
pub const IID_IDirect3D9 = &IID_IDirect3D9_Value;
pub const IDirect3D9 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterSoftwareDevice: fn(
            self: *const IDirect3D9,
            pInitializeFunction: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAdapterCount: fn(
            self: *const IDirect3D9,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetAdapterIdentifier: fn(
            self: *const IDirect3D9,
            Adapter: u32,
            Flags: u32,
            pIdentifier: *D3DADAPTER_IDENTIFIER9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAdapterModeCount: fn(
            self: *const IDirect3D9,
            Adapter: u32,
            Format: D3DFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        EnumAdapterModes: fn(
            self: *const IDirect3D9,
            Adapter: u32,
            Format: D3DFORMAT,
            Mode: u32,
            pMode: *D3DDISPLAYMODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAdapterDisplayMode: fn(
            self: *const IDirect3D9,
            Adapter: u32,
            pMode: *D3DDISPLAYMODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckDeviceType: fn(
            self: *const IDirect3D9,
            Adapter: u32,
            DevType: D3DDEVTYPE,
            AdapterFormat: D3DFORMAT,
            BackBufferFormat: D3DFORMAT,
            bWindowed: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckDeviceFormat: fn(
            self: *const IDirect3D9,
            Adapter: u32,
            DeviceType: D3DDEVTYPE,
            AdapterFormat: D3DFORMAT,
            Usage: u32,
            RType: D3DRESOURCETYPE,
            CheckFormat: D3DFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckDeviceMultiSampleType: fn(
            self: *const IDirect3D9,
            Adapter: u32,
            DeviceType: D3DDEVTYPE,
            SurfaceFormat: D3DFORMAT,
            Windowed: BOOL,
            MultiSampleType: D3DMULTISAMPLE_TYPE,
            pQualityLevels: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckDepthStencilMatch: fn(
            self: *const IDirect3D9,
            Adapter: u32,
            DeviceType: D3DDEVTYPE,
            AdapterFormat: D3DFORMAT,
            RenderTargetFormat: D3DFORMAT,
            DepthStencilFormat: D3DFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckDeviceFormatConversion: fn(
            self: *const IDirect3D9,
            Adapter: u32,
            DeviceType: D3DDEVTYPE,
            SourceFormat: D3DFORMAT,
            TargetFormat: D3DFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceCaps: fn(
            self: *const IDirect3D9,
            Adapter: u32,
            DeviceType: D3DDEVTYPE,
            pCaps: *D3DCAPS9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAdapterMonitor: fn(
            self: *const IDirect3D9,
            Adapter: u32,
        ) callconv(@import("std").os.windows.WINAPI) HMONITOR,
        CreateDevice: fn(
            self: *const IDirect3D9,
            Adapter: u32,
            DeviceType: D3DDEVTYPE,
            hFocusWindow: HWND,
            BehaviorFlags: u32,
            pPresentationParameters: *D3DPRESENT_PARAMETERS,
            ppReturnedDeviceInterface: **IDirect3DDevice9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9_RegisterSoftwareDevice(self: *const T, pInitializeFunction: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3D9.VTable, self.vtable).RegisterSoftwareDevice(@ptrCast(*const IDirect3D9, self), pInitializeFunction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9_GetAdapterCount(self: *const T) callconv(.Inline) u32 {
            return @ptrCast(*const IDirect3D9.VTable, self.vtable).GetAdapterCount(@ptrCast(*const IDirect3D9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9_GetAdapterIdentifier(self: *const T, Adapter: u32, Flags: u32, pIdentifier: *D3DADAPTER_IDENTIFIER9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3D9.VTable, self.vtable).GetAdapterIdentifier(@ptrCast(*const IDirect3D9, self), Adapter, Flags, pIdentifier);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9_GetAdapterModeCount(self: *const T, Adapter: u32, Format: D3DFORMAT) callconv(.Inline) u32 {
            return @ptrCast(*const IDirect3D9.VTable, self.vtable).GetAdapterModeCount(@ptrCast(*const IDirect3D9, self), Adapter, Format);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9_EnumAdapterModes(self: *const T, Adapter: u32, Format: D3DFORMAT, Mode: u32, pMode: *D3DDISPLAYMODE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3D9.VTable, self.vtable).EnumAdapterModes(@ptrCast(*const IDirect3D9, self), Adapter, Format, Mode, pMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9_GetAdapterDisplayMode(self: *const T, Adapter: u32, pMode: *D3DDISPLAYMODE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3D9.VTable, self.vtable).GetAdapterDisplayMode(@ptrCast(*const IDirect3D9, self), Adapter, pMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9_CheckDeviceType(self: *const T, Adapter: u32, DevType: D3DDEVTYPE, AdapterFormat: D3DFORMAT, BackBufferFormat: D3DFORMAT, bWindowed: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3D9.VTable, self.vtable).CheckDeviceType(@ptrCast(*const IDirect3D9, self), Adapter, DevType, AdapterFormat, BackBufferFormat, bWindowed);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9_CheckDeviceFormat(self: *const T, Adapter: u32, DeviceType: D3DDEVTYPE, AdapterFormat: D3DFORMAT, Usage: u32, RType: D3DRESOURCETYPE, CheckFormat: D3DFORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3D9.VTable, self.vtable).CheckDeviceFormat(@ptrCast(*const IDirect3D9, self), Adapter, DeviceType, AdapterFormat, Usage, RType, CheckFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9_CheckDeviceMultiSampleType(self: *const T, Adapter: u32, DeviceType: D3DDEVTYPE, SurfaceFormat: D3DFORMAT, Windowed: BOOL, MultiSampleType: D3DMULTISAMPLE_TYPE, pQualityLevels: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3D9.VTable, self.vtable).CheckDeviceMultiSampleType(@ptrCast(*const IDirect3D9, self), Adapter, DeviceType, SurfaceFormat, Windowed, MultiSampleType, pQualityLevels);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9_CheckDepthStencilMatch(self: *const T, Adapter: u32, DeviceType: D3DDEVTYPE, AdapterFormat: D3DFORMAT, RenderTargetFormat: D3DFORMAT, DepthStencilFormat: D3DFORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3D9.VTable, self.vtable).CheckDepthStencilMatch(@ptrCast(*const IDirect3D9, self), Adapter, DeviceType, AdapterFormat, RenderTargetFormat, DepthStencilFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9_CheckDeviceFormatConversion(self: *const T, Adapter: u32, DeviceType: D3DDEVTYPE, SourceFormat: D3DFORMAT, TargetFormat: D3DFORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3D9.VTable, self.vtable).CheckDeviceFormatConversion(@ptrCast(*const IDirect3D9, self), Adapter, DeviceType, SourceFormat, TargetFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9_GetDeviceCaps(self: *const T, Adapter: u32, DeviceType: D3DDEVTYPE, pCaps: *D3DCAPS9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3D9.VTable, self.vtable).GetDeviceCaps(@ptrCast(*const IDirect3D9, self), Adapter, DeviceType, pCaps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9_GetAdapterMonitor(self: *const T, Adapter: u32) callconv(.Inline) HMONITOR {
            return @ptrCast(*const IDirect3D9.VTable, self.vtable).GetAdapterMonitor(@ptrCast(*const IDirect3D9, self), Adapter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9_CreateDevice(self: *const T, Adapter: u32, DeviceType: D3DDEVTYPE, hFocusWindow: HWND, BehaviorFlags: u32, pPresentationParameters: *D3DPRESENT_PARAMETERS, ppReturnedDeviceInterface: **IDirect3DDevice9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3D9.VTable, self.vtable).CreateDevice(@ptrCast(*const IDirect3D9, self), Adapter, DeviceType, hFocusWindow, BehaviorFlags, pPresentationParameters, ppReturnedDeviceInterface);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DDevice9_Value = @import("../zig.zig").Guid.initString("d0223b96-bf7a-43fd-92bd-a43b0d82b9eb");
pub const IID_IDirect3DDevice9 = &IID_IDirect3DDevice9_Value;
pub const IDirect3DDevice9 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TestCooperativeLevel: fn(
            self: *const IDirect3DDevice9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAvailableTextureMem: fn(
            self: *const IDirect3DDevice9,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        EvictManagedResources: fn(
            self: *const IDirect3DDevice9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDirect3D: fn(
            self: *const IDirect3DDevice9,
            ppD3D9: **IDirect3D9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceCaps: fn(
            self: *const IDirect3DDevice9,
            pCaps: *D3DCAPS9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayMode: fn(
            self: *const IDirect3DDevice9,
            iSwapChain: u32,
            pMode: *D3DDISPLAYMODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCreationParameters: fn(
            self: *const IDirect3DDevice9,
            pParameters: *D3DDEVICE_CREATION_PARAMETERS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCursorProperties: fn(
            self: *const IDirect3DDevice9,
            XHotSpot: u32,
            YHotSpot: u32,
            pCursorBitmap: *IDirect3DSurface9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCursorPosition: fn(
            self: *const IDirect3DDevice9,
            X: i32,
            Y: i32,
            Flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        ShowCursor: fn(
            self: *const IDirect3DDevice9,
            bShow: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        CreateAdditionalSwapChain: fn(
            self: *const IDirect3DDevice9,
            pPresentationParameters: *D3DPRESENT_PARAMETERS,
            pSwapChain: **IDirect3DSwapChain9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSwapChain: fn(
            self: *const IDirect3DDevice9,
            iSwapChain: u32,
            pSwapChain: **IDirect3DSwapChain9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumberOfSwapChains: fn(
            self: *const IDirect3DDevice9,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        Reset: fn(
            self: *const IDirect3DDevice9,
            pPresentationParameters: *D3DPRESENT_PARAMETERS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Present: fn(
            self: *const IDirect3DDevice9,
            pSourceRect: *const RECT,
            pDestRect: *const RECT,
            hDestWindowOverride: HWND,
            pDirtyRegion: *const RGNDATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBackBuffer: fn(
            self: *const IDirect3DDevice9,
            iSwapChain: u32,
            iBackBuffer: u32,
            Type: D3DBACKBUFFER_TYPE,
            ppBackBuffer: **IDirect3DSurface9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRasterStatus: fn(
            self: *const IDirect3DDevice9,
            iSwapChain: u32,
            pRasterStatus: *D3DRASTER_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDialogBoxMode: fn(
            self: *const IDirect3DDevice9,
            bEnableDialogs: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGammaRamp: fn(
            self: *const IDirect3DDevice9,
            iSwapChain: u32,
            Flags: u32,
            pRamp: *const D3DGAMMARAMP,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetGammaRamp: fn(
            self: *const IDirect3DDevice9,
            iSwapChain: u32,
            pRamp: *D3DGAMMARAMP,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CreateTexture: fn(
            self: *const IDirect3DDevice9,
            Width: u32,
            Height: u32,
            Levels: u32,
            Usage: u32,
            Format: D3DFORMAT,
            Pool: D3DPOOL,
            ppTexture: **IDirect3DTexture9,
            pSharedHandle: *HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVolumeTexture: fn(
            self: *const IDirect3DDevice9,
            Width: u32,
            Height: u32,
            Depth: u32,
            Levels: u32,
            Usage: u32,
            Format: D3DFORMAT,
            Pool: D3DPOOL,
            ppVolumeTexture: **IDirect3DVolumeTexture9,
            pSharedHandle: *HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCubeTexture: fn(
            self: *const IDirect3DDevice9,
            EdgeLength: u32,
            Levels: u32,
            Usage: u32,
            Format: D3DFORMAT,
            Pool: D3DPOOL,
            ppCubeTexture: **IDirect3DCubeTexture9,
            pSharedHandle: *HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVertexBuffer: fn(
            self: *const IDirect3DDevice9,
            Length: u32,
            Usage: u32,
            FVF: u32,
            Pool: D3DPOOL,
            ppVertexBuffer: **IDirect3DVertexBuffer9,
            pSharedHandle: *HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateIndexBuffer: fn(
            self: *const IDirect3DDevice9,
            Length: u32,
            Usage: u32,
            Format: D3DFORMAT,
            Pool: D3DPOOL,
            ppIndexBuffer: **IDirect3DIndexBuffer9,
            pSharedHandle: *HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRenderTarget: fn(
            self: *const IDirect3DDevice9,
            Width: u32,
            Height: u32,
            Format: D3DFORMAT,
            MultiSample: D3DMULTISAMPLE_TYPE,
            MultisampleQuality: u32,
            Lockable: BOOL,
            ppSurface: **IDirect3DSurface9,
            pSharedHandle: *HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDepthStencilSurface: fn(
            self: *const IDirect3DDevice9,
            Width: u32,
            Height: u32,
            Format: D3DFORMAT,
            MultiSample: D3DMULTISAMPLE_TYPE,
            MultisampleQuality: u32,
            Discard: BOOL,
            ppSurface: **IDirect3DSurface9,
            pSharedHandle: *HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateSurface: fn(
            self: *const IDirect3DDevice9,
            pSourceSurface: *IDirect3DSurface9,
            pSourceRect: *const RECT,
            pDestinationSurface: *IDirect3DSurface9,
            pDestPoint: *const POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateTexture: fn(
            self: *const IDirect3DDevice9,
            pSourceTexture: *IDirect3DBaseTexture9,
            pDestinationTexture: *IDirect3DBaseTexture9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRenderTargetData: fn(
            self: *const IDirect3DDevice9,
            pRenderTarget: *IDirect3DSurface9,
            pDestSurface: *IDirect3DSurface9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrontBufferData: fn(
            self: *const IDirect3DDevice9,
            iSwapChain: u32,
            pDestSurface: *IDirect3DSurface9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StretchRect: fn(
            self: *const IDirect3DDevice9,
            pSourceSurface: *IDirect3DSurface9,
            pSourceRect: *const RECT,
            pDestSurface: *IDirect3DSurface9,
            pDestRect: *const RECT,
            Filter: D3DTEXTUREFILTERTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ColorFill: fn(
            self: *const IDirect3DDevice9,
            pSurface: *IDirect3DSurface9,
            pRect: *const RECT,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateOffscreenPlainSurface: fn(
            self: *const IDirect3DDevice9,
            Width: u32,
            Height: u32,
            Format: D3DFORMAT,
            Pool: D3DPOOL,
            ppSurface: **IDirect3DSurface9,
            pSharedHandle: *HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRenderTarget: fn(
            self: *const IDirect3DDevice9,
            RenderTargetIndex: u32,
            pRenderTarget: *IDirect3DSurface9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRenderTarget: fn(
            self: *const IDirect3DDevice9,
            RenderTargetIndex: u32,
            ppRenderTarget: **IDirect3DSurface9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDepthStencilSurface: fn(
            self: *const IDirect3DDevice9,
            pNewZStencil: *IDirect3DSurface9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDepthStencilSurface: fn(
            self: *const IDirect3DDevice9,
            ppZStencilSurface: **IDirect3DSurface9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginScene: fn(
            self: *const IDirect3DDevice9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndScene: fn(
            self: *const IDirect3DDevice9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IDirect3DDevice9,
            Count: u32,
            pRects: *const D3DRECT,
            Flags: u32,
            Color: u32,
            Z: f32,
            Stencil: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransform: fn(
            self: *const IDirect3DDevice9,
            State: D3DTRANSFORMSTATETYPE,
            pMatrix: *const D3DMATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransform: fn(
            self: *const IDirect3DDevice9,
            State: D3DTRANSFORMSTATETYPE,
            pMatrix: *D3DMATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MultiplyTransform: fn(
            self: *const IDirect3DDevice9,
            param0: D3DTRANSFORMSTATETYPE,
            param1: *const D3DMATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewport: fn(
            self: *const IDirect3DDevice9,
            pViewport: *const D3DVIEWPORT9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewport: fn(
            self: *const IDirect3DDevice9,
            pViewport: *D3DVIEWPORT9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaterial: fn(
            self: *const IDirect3DDevice9,
            pMaterial: *const D3DMATERIAL9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaterial: fn(
            self: *const IDirect3DDevice9,
            pMaterial: *D3DMATERIAL9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLight: fn(
            self: *const IDirect3DDevice9,
            Index: u32,
            param1: *const D3DLIGHT9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLight: fn(
            self: *const IDirect3DDevice9,
            Index: u32,
            param1: *D3DLIGHT9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LightEnable: fn(
            self: *const IDirect3DDevice9,
            Index: u32,
            Enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLightEnable: fn(
            self: *const IDirect3DDevice9,
            Index: u32,
            pEnable: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClipPlane: fn(
            self: *const IDirect3DDevice9,
            Index: u32,
            pPlane: *const f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClipPlane: fn(
            self: *const IDirect3DDevice9,
            Index: u32,
            pPlane: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRenderState: fn(
            self: *const IDirect3DDevice9,
            State: D3DRENDERSTATETYPE,
            Value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRenderState: fn(
            self: *const IDirect3DDevice9,
            State: D3DRENDERSTATETYPE,
            pValue: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStateBlock: fn(
            self: *const IDirect3DDevice9,
            Type: D3DSTATEBLOCKTYPE,
            ppSB: **IDirect3DStateBlock9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginStateBlock: fn(
            self: *const IDirect3DDevice9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndStateBlock: fn(
            self: *const IDirect3DDevice9,
            ppSB: **IDirect3DStateBlock9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClipStatus: fn(
            self: *const IDirect3DDevice9,
            pClipStatus: *const D3DCLIPSTATUS9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClipStatus: fn(
            self: *const IDirect3DDevice9,
            pClipStatus: *D3DCLIPSTATUS9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTexture: fn(
            self: *const IDirect3DDevice9,
            Stage: u32,
            ppTexture: **IDirect3DBaseTexture9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTexture: fn(
            self: *const IDirect3DDevice9,
            Stage: u32,
            pTexture: *IDirect3DBaseTexture9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTextureStageState: fn(
            self: *const IDirect3DDevice9,
            Stage: u32,
            Type: D3DTEXTURESTAGESTATETYPE,
            pValue: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTextureStageState: fn(
            self: *const IDirect3DDevice9,
            Stage: u32,
            Type: D3DTEXTURESTAGESTATETYPE,
            Value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSamplerState: fn(
            self: *const IDirect3DDevice9,
            Sampler: u32,
            Type: D3DSAMPLERSTATETYPE,
            pValue: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSamplerState: fn(
            self: *const IDirect3DDevice9,
            Sampler: u32,
            Type: D3DSAMPLERSTATETYPE,
            Value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ValidateDevice: fn(
            self: *const IDirect3DDevice9,
            pNumPasses: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPaletteEntries: fn(
            self: *const IDirect3DDevice9,
            PaletteNumber: u32,
            pEntries: *const PALETTEENTRY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPaletteEntries: fn(
            self: *const IDirect3DDevice9,
            PaletteNumber: u32,
            pEntries: *PALETTEENTRY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCurrentTexturePalette: fn(
            self: *const IDirect3DDevice9,
            PaletteNumber: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentTexturePalette: fn(
            self: *const IDirect3DDevice9,
            PaletteNumber: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScissorRect: fn(
            self: *const IDirect3DDevice9,
            pRect: *const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScissorRect: fn(
            self: *const IDirect3DDevice9,
            pRect: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSoftwareVertexProcessing: fn(
            self: *const IDirect3DDevice9,
            bSoftware: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSoftwareVertexProcessing: fn(
            self: *const IDirect3DDevice9,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        SetNPatchMode: fn(
            self: *const IDirect3DDevice9,
            nSegments: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNPatchMode: fn(
            self: *const IDirect3DDevice9,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        DrawPrimitive: fn(
            self: *const IDirect3DDevice9,
            PrimitiveType: D3DPRIMITIVETYPE,
            StartVertex: u32,
            PrimitiveCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawIndexedPrimitive: fn(
            self: *const IDirect3DDevice9,
            param0: D3DPRIMITIVETYPE,
            BaseVertexIndex: i32,
            MinVertexIndex: u32,
            NumVertices: u32,
            startIndex: u32,
            primCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawPrimitiveUP: fn(
            self: *const IDirect3DDevice9,
            PrimitiveType: D3DPRIMITIVETYPE,
            PrimitiveCount: u32,
            pVertexStreamZeroData: *const c_void,
            VertexStreamZeroStride: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawIndexedPrimitiveUP: fn(
            self: *const IDirect3DDevice9,
            PrimitiveType: D3DPRIMITIVETYPE,
            MinVertexIndex: u32,
            NumVertices: u32,
            PrimitiveCount: u32,
            pIndexData: *const c_void,
            IndexDataFormat: D3DFORMAT,
            pVertexStreamZeroData: *const c_void,
            VertexStreamZeroStride: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessVertices: fn(
            self: *const IDirect3DDevice9,
            SrcStartIndex: u32,
            DestIndex: u32,
            VertexCount: u32,
            pDestBuffer: *IDirect3DVertexBuffer9,
            pVertexDecl: *IDirect3DVertexDeclaration9,
            Flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVertexDeclaration: fn(
            self: *const IDirect3DDevice9,
            pVertexElements: *const D3DVERTEXELEMENT9,
            ppDecl: **IDirect3DVertexDeclaration9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVertexDeclaration: fn(
            self: *const IDirect3DDevice9,
            pDecl: *IDirect3DVertexDeclaration9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVertexDeclaration: fn(
            self: *const IDirect3DDevice9,
            ppDecl: **IDirect3DVertexDeclaration9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFVF: fn(
            self: *const IDirect3DDevice9,
            FVF: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFVF: fn(
            self: *const IDirect3DDevice9,
            pFVF: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVertexShader: fn(
            self: *const IDirect3DDevice9,
            pFunction: *const u32,
            ppShader: **IDirect3DVertexShader9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVertexShader: fn(
            self: *const IDirect3DDevice9,
            pShader: *IDirect3DVertexShader9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVertexShader: fn(
            self: *const IDirect3DDevice9,
            ppShader: **IDirect3DVertexShader9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVertexShaderConstantF: fn(
            self: *const IDirect3DDevice9,
            StartRegister: u32,
            pConstantData: *const f32,
            Vector4fCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVertexShaderConstantF: fn(
            self: *const IDirect3DDevice9,
            StartRegister: u32,
            pConstantData: *f32,
            Vector4fCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVertexShaderConstantI: fn(
            self: *const IDirect3DDevice9,
            StartRegister: u32,
            pConstantData: *const i32,
            Vector4iCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVertexShaderConstantI: fn(
            self: *const IDirect3DDevice9,
            StartRegister: u32,
            pConstantData: *i32,
            Vector4iCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVertexShaderConstantB: fn(
            self: *const IDirect3DDevice9,
            StartRegister: u32,
            pConstantData: *const BOOL,
            BoolCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVertexShaderConstantB: fn(
            self: *const IDirect3DDevice9,
            StartRegister: u32,
            pConstantData: *BOOL,
            BoolCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStreamSource: fn(
            self: *const IDirect3DDevice9,
            StreamNumber: u32,
            pStreamData: *IDirect3DVertexBuffer9,
            OffsetInBytes: u32,
            Stride: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamSource: fn(
            self: *const IDirect3DDevice9,
            StreamNumber: u32,
            ppStreamData: **IDirect3DVertexBuffer9,
            pOffsetInBytes: *u32,
            pStride: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStreamSourceFreq: fn(
            self: *const IDirect3DDevice9,
            StreamNumber: u32,
            Setting: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamSourceFreq: fn(
            self: *const IDirect3DDevice9,
            StreamNumber: u32,
            pSetting: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIndices: fn(
            self: *const IDirect3DDevice9,
            pIndexData: *IDirect3DIndexBuffer9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIndices: fn(
            self: *const IDirect3DDevice9,
            ppIndexData: **IDirect3DIndexBuffer9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePixelShader: fn(
            self: *const IDirect3DDevice9,
            pFunction: *const u32,
            ppShader: **IDirect3DPixelShader9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPixelShader: fn(
            self: *const IDirect3DDevice9,
            pShader: *IDirect3DPixelShader9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelShader: fn(
            self: *const IDirect3DDevice9,
            ppShader: **IDirect3DPixelShader9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPixelShaderConstantF: fn(
            self: *const IDirect3DDevice9,
            StartRegister: u32,
            pConstantData: *const f32,
            Vector4fCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelShaderConstantF: fn(
            self: *const IDirect3DDevice9,
            StartRegister: u32,
            pConstantData: *f32,
            Vector4fCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPixelShaderConstantI: fn(
            self: *const IDirect3DDevice9,
            StartRegister: u32,
            pConstantData: *const i32,
            Vector4iCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelShaderConstantI: fn(
            self: *const IDirect3DDevice9,
            StartRegister: u32,
            pConstantData: *i32,
            Vector4iCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPixelShaderConstantB: fn(
            self: *const IDirect3DDevice9,
            StartRegister: u32,
            pConstantData: *const BOOL,
            BoolCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelShaderConstantB: fn(
            self: *const IDirect3DDevice9,
            StartRegister: u32,
            pConstantData: *BOOL,
            BoolCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawRectPatch: fn(
            self: *const IDirect3DDevice9,
            Handle: u32,
            pNumSegs: *const f32,
            pRectPatchInfo: *const D3DRECTPATCH_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawTriPatch: fn(
            self: *const IDirect3DDevice9,
            Handle: u32,
            pNumSegs: *const f32,
            pTriPatchInfo: *const D3DTRIPATCH_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePatch: fn(
            self: *const IDirect3DDevice9,
            Handle: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateQuery: fn(
            self: *const IDirect3DDevice9,
            Type: D3DQUERYTYPE,
            ppQuery: **IDirect3DQuery9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_TestCooperativeLevel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).TestCooperativeLevel(@ptrCast(*const IDirect3DDevice9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetAvailableTextureMem(self: *const T) callconv(.Inline) u32 {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetAvailableTextureMem(@ptrCast(*const IDirect3DDevice9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_EvictManagedResources(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).EvictManagedResources(@ptrCast(*const IDirect3DDevice9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetDirect3D(self: *const T, ppD3D9: **IDirect3D9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetDirect3D(@ptrCast(*const IDirect3DDevice9, self), ppD3D9);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetDeviceCaps(self: *const T, pCaps: *D3DCAPS9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetDeviceCaps(@ptrCast(*const IDirect3DDevice9, self), pCaps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetDisplayMode(self: *const T, iSwapChain: u32, pMode: *D3DDISPLAYMODE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetDisplayMode(@ptrCast(*const IDirect3DDevice9, self), iSwapChain, pMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetCreationParameters(self: *const T, pParameters: *D3DDEVICE_CREATION_PARAMETERS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetCreationParameters(@ptrCast(*const IDirect3DDevice9, self), pParameters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetCursorProperties(self: *const T, XHotSpot: u32, YHotSpot: u32, pCursorBitmap: *IDirect3DSurface9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetCursorProperties(@ptrCast(*const IDirect3DDevice9, self), XHotSpot, YHotSpot, pCursorBitmap);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetCursorPosition(self: *const T, X: i32, Y: i32, Flags: u32) callconv(.Inline) void {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetCursorPosition(@ptrCast(*const IDirect3DDevice9, self), X, Y, Flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_ShowCursor(self: *const T, bShow: BOOL) callconv(.Inline) BOOL {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).ShowCursor(@ptrCast(*const IDirect3DDevice9, self), bShow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_CreateAdditionalSwapChain(self: *const T, pPresentationParameters: *D3DPRESENT_PARAMETERS, pSwapChain: **IDirect3DSwapChain9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).CreateAdditionalSwapChain(@ptrCast(*const IDirect3DDevice9, self), pPresentationParameters, pSwapChain);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetSwapChain(self: *const T, iSwapChain: u32, pSwapChain: **IDirect3DSwapChain9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetSwapChain(@ptrCast(*const IDirect3DDevice9, self), iSwapChain, pSwapChain);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetNumberOfSwapChains(self: *const T) callconv(.Inline) u32 {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetNumberOfSwapChains(@ptrCast(*const IDirect3DDevice9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_Reset(self: *const T, pPresentationParameters: *D3DPRESENT_PARAMETERS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).Reset(@ptrCast(*const IDirect3DDevice9, self), pPresentationParameters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_Present(self: *const T, pSourceRect: *const RECT, pDestRect: *const RECT, hDestWindowOverride: HWND, pDirtyRegion: *const RGNDATA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).Present(@ptrCast(*const IDirect3DDevice9, self), pSourceRect, pDestRect, hDestWindowOverride, pDirtyRegion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetBackBuffer(self: *const T, iSwapChain: u32, iBackBuffer: u32, Type: D3DBACKBUFFER_TYPE, ppBackBuffer: **IDirect3DSurface9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetBackBuffer(@ptrCast(*const IDirect3DDevice9, self), iSwapChain, iBackBuffer, Type, ppBackBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetRasterStatus(self: *const T, iSwapChain: u32, pRasterStatus: *D3DRASTER_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetRasterStatus(@ptrCast(*const IDirect3DDevice9, self), iSwapChain, pRasterStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetDialogBoxMode(self: *const T, bEnableDialogs: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetDialogBoxMode(@ptrCast(*const IDirect3DDevice9, self), bEnableDialogs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetGammaRamp(self: *const T, iSwapChain: u32, Flags: u32, pRamp: *const D3DGAMMARAMP) callconv(.Inline) void {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetGammaRamp(@ptrCast(*const IDirect3DDevice9, self), iSwapChain, Flags, pRamp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetGammaRamp(self: *const T, iSwapChain: u32, pRamp: *D3DGAMMARAMP) callconv(.Inline) void {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetGammaRamp(@ptrCast(*const IDirect3DDevice9, self), iSwapChain, pRamp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_CreateTexture(self: *const T, Width: u32, Height: u32, Levels: u32, Usage: u32, Format: D3DFORMAT, Pool: D3DPOOL, ppTexture: **IDirect3DTexture9, pSharedHandle: *HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).CreateTexture(@ptrCast(*const IDirect3DDevice9, self), Width, Height, Levels, Usage, Format, Pool, ppTexture, pSharedHandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_CreateVolumeTexture(self: *const T, Width: u32, Height: u32, Depth: u32, Levels: u32, Usage: u32, Format: D3DFORMAT, Pool: D3DPOOL, ppVolumeTexture: **IDirect3DVolumeTexture9, pSharedHandle: *HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).CreateVolumeTexture(@ptrCast(*const IDirect3DDevice9, self), Width, Height, Depth, Levels, Usage, Format, Pool, ppVolumeTexture, pSharedHandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_CreateCubeTexture(self: *const T, EdgeLength: u32, Levels: u32, Usage: u32, Format: D3DFORMAT, Pool: D3DPOOL, ppCubeTexture: **IDirect3DCubeTexture9, pSharedHandle: *HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).CreateCubeTexture(@ptrCast(*const IDirect3DDevice9, self), EdgeLength, Levels, Usage, Format, Pool, ppCubeTexture, pSharedHandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_CreateVertexBuffer(self: *const T, Length: u32, Usage: u32, FVF: u32, Pool: D3DPOOL, ppVertexBuffer: **IDirect3DVertexBuffer9, pSharedHandle: *HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).CreateVertexBuffer(@ptrCast(*const IDirect3DDevice9, self), Length, Usage, FVF, Pool, ppVertexBuffer, pSharedHandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_CreateIndexBuffer(self: *const T, Length: u32, Usage: u32, Format: D3DFORMAT, Pool: D3DPOOL, ppIndexBuffer: **IDirect3DIndexBuffer9, pSharedHandle: *HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).CreateIndexBuffer(@ptrCast(*const IDirect3DDevice9, self), Length, Usage, Format, Pool, ppIndexBuffer, pSharedHandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_CreateRenderTarget(self: *const T, Width: u32, Height: u32, Format: D3DFORMAT, MultiSample: D3DMULTISAMPLE_TYPE, MultisampleQuality: u32, Lockable: BOOL, ppSurface: **IDirect3DSurface9, pSharedHandle: *HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).CreateRenderTarget(@ptrCast(*const IDirect3DDevice9, self), Width, Height, Format, MultiSample, MultisampleQuality, Lockable, ppSurface, pSharedHandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_CreateDepthStencilSurface(self: *const T, Width: u32, Height: u32, Format: D3DFORMAT, MultiSample: D3DMULTISAMPLE_TYPE, MultisampleQuality: u32, Discard: BOOL, ppSurface: **IDirect3DSurface9, pSharedHandle: *HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).CreateDepthStencilSurface(@ptrCast(*const IDirect3DDevice9, self), Width, Height, Format, MultiSample, MultisampleQuality, Discard, ppSurface, pSharedHandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_UpdateSurface(self: *const T, pSourceSurface: *IDirect3DSurface9, pSourceRect: *const RECT, pDestinationSurface: *IDirect3DSurface9, pDestPoint: *const POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).UpdateSurface(@ptrCast(*const IDirect3DDevice9, self), pSourceSurface, pSourceRect, pDestinationSurface, pDestPoint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_UpdateTexture(self: *const T, pSourceTexture: *IDirect3DBaseTexture9, pDestinationTexture: *IDirect3DBaseTexture9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).UpdateTexture(@ptrCast(*const IDirect3DDevice9, self), pSourceTexture, pDestinationTexture);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetRenderTargetData(self: *const T, pRenderTarget: *IDirect3DSurface9, pDestSurface: *IDirect3DSurface9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetRenderTargetData(@ptrCast(*const IDirect3DDevice9, self), pRenderTarget, pDestSurface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetFrontBufferData(self: *const T, iSwapChain: u32, pDestSurface: *IDirect3DSurface9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetFrontBufferData(@ptrCast(*const IDirect3DDevice9, self), iSwapChain, pDestSurface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_StretchRect(self: *const T, pSourceSurface: *IDirect3DSurface9, pSourceRect: *const RECT, pDestSurface: *IDirect3DSurface9, pDestRect: *const RECT, Filter: D3DTEXTUREFILTERTYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).StretchRect(@ptrCast(*const IDirect3DDevice9, self), pSourceSurface, pSourceRect, pDestSurface, pDestRect, Filter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_ColorFill(self: *const T, pSurface: *IDirect3DSurface9, pRect: *const RECT, color: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).ColorFill(@ptrCast(*const IDirect3DDevice9, self), pSurface, pRect, color);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_CreateOffscreenPlainSurface(self: *const T, Width: u32, Height: u32, Format: D3DFORMAT, Pool: D3DPOOL, ppSurface: **IDirect3DSurface9, pSharedHandle: *HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).CreateOffscreenPlainSurface(@ptrCast(*const IDirect3DDevice9, self), Width, Height, Format, Pool, ppSurface, pSharedHandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetRenderTarget(self: *const T, RenderTargetIndex: u32, pRenderTarget: *IDirect3DSurface9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetRenderTarget(@ptrCast(*const IDirect3DDevice9, self), RenderTargetIndex, pRenderTarget);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetRenderTarget(self: *const T, RenderTargetIndex: u32, ppRenderTarget: **IDirect3DSurface9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetRenderTarget(@ptrCast(*const IDirect3DDevice9, self), RenderTargetIndex, ppRenderTarget);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetDepthStencilSurface(self: *const T, pNewZStencil: *IDirect3DSurface9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetDepthStencilSurface(@ptrCast(*const IDirect3DDevice9, self), pNewZStencil);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetDepthStencilSurface(self: *const T, ppZStencilSurface: **IDirect3DSurface9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetDepthStencilSurface(@ptrCast(*const IDirect3DDevice9, self), ppZStencilSurface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_BeginScene(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).BeginScene(@ptrCast(*const IDirect3DDevice9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_EndScene(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).EndScene(@ptrCast(*const IDirect3DDevice9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_Clear(self: *const T, Count: u32, pRects: *const D3DRECT, Flags: u32, Color: u32, Z: f32, Stencil: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).Clear(@ptrCast(*const IDirect3DDevice9, self), Count, pRects, Flags, Color, Z, Stencil);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetTransform(self: *const T, State: D3DTRANSFORMSTATETYPE, pMatrix: *const D3DMATRIX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetTransform(@ptrCast(*const IDirect3DDevice9, self), State, pMatrix);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetTransform(self: *const T, State: D3DTRANSFORMSTATETYPE, pMatrix: *D3DMATRIX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetTransform(@ptrCast(*const IDirect3DDevice9, self), State, pMatrix);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_MultiplyTransform(self: *const T, param0: D3DTRANSFORMSTATETYPE, param1: *const D3DMATRIX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).MultiplyTransform(@ptrCast(*const IDirect3DDevice9, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetViewport(self: *const T, pViewport: *const D3DVIEWPORT9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetViewport(@ptrCast(*const IDirect3DDevice9, self), pViewport);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetViewport(self: *const T, pViewport: *D3DVIEWPORT9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetViewport(@ptrCast(*const IDirect3DDevice9, self), pViewport);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetMaterial(self: *const T, pMaterial: *const D3DMATERIAL9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetMaterial(@ptrCast(*const IDirect3DDevice9, self), pMaterial);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetMaterial(self: *const T, pMaterial: *D3DMATERIAL9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetMaterial(@ptrCast(*const IDirect3DDevice9, self), pMaterial);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetLight(self: *const T, Index: u32, param1: *const D3DLIGHT9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetLight(@ptrCast(*const IDirect3DDevice9, self), Index, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetLight(self: *const T, Index: u32, param1: *D3DLIGHT9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetLight(@ptrCast(*const IDirect3DDevice9, self), Index, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_LightEnable(self: *const T, Index: u32, Enable: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).LightEnable(@ptrCast(*const IDirect3DDevice9, self), Index, Enable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetLightEnable(self: *const T, Index: u32, pEnable: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetLightEnable(@ptrCast(*const IDirect3DDevice9, self), Index, pEnable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetClipPlane(self: *const T, Index: u32, pPlane: *const f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetClipPlane(@ptrCast(*const IDirect3DDevice9, self), Index, pPlane);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetClipPlane(self: *const T, Index: u32, pPlane: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetClipPlane(@ptrCast(*const IDirect3DDevice9, self), Index, pPlane);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetRenderState(self: *const T, State: D3DRENDERSTATETYPE, Value: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetRenderState(@ptrCast(*const IDirect3DDevice9, self), State, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetRenderState(self: *const T, State: D3DRENDERSTATETYPE, pValue: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetRenderState(@ptrCast(*const IDirect3DDevice9, self), State, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_CreateStateBlock(self: *const T, Type: D3DSTATEBLOCKTYPE, ppSB: **IDirect3DStateBlock9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).CreateStateBlock(@ptrCast(*const IDirect3DDevice9, self), Type, ppSB);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_BeginStateBlock(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).BeginStateBlock(@ptrCast(*const IDirect3DDevice9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_EndStateBlock(self: *const T, ppSB: **IDirect3DStateBlock9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).EndStateBlock(@ptrCast(*const IDirect3DDevice9, self), ppSB);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetClipStatus(self: *const T, pClipStatus: *const D3DCLIPSTATUS9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetClipStatus(@ptrCast(*const IDirect3DDevice9, self), pClipStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetClipStatus(self: *const T, pClipStatus: *D3DCLIPSTATUS9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetClipStatus(@ptrCast(*const IDirect3DDevice9, self), pClipStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetTexture(self: *const T, Stage: u32, ppTexture: **IDirect3DBaseTexture9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetTexture(@ptrCast(*const IDirect3DDevice9, self), Stage, ppTexture);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetTexture(self: *const T, Stage: u32, pTexture: *IDirect3DBaseTexture9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetTexture(@ptrCast(*const IDirect3DDevice9, self), Stage, pTexture);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetTextureStageState(self: *const T, Stage: u32, Type: D3DTEXTURESTAGESTATETYPE, pValue: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetTextureStageState(@ptrCast(*const IDirect3DDevice9, self), Stage, Type, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetTextureStageState(self: *const T, Stage: u32, Type: D3DTEXTURESTAGESTATETYPE, Value: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetTextureStageState(@ptrCast(*const IDirect3DDevice9, self), Stage, Type, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetSamplerState(self: *const T, Sampler: u32, Type: D3DSAMPLERSTATETYPE, pValue: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetSamplerState(@ptrCast(*const IDirect3DDevice9, self), Sampler, Type, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetSamplerState(self: *const T, Sampler: u32, Type: D3DSAMPLERSTATETYPE, Value: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetSamplerState(@ptrCast(*const IDirect3DDevice9, self), Sampler, Type, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_ValidateDevice(self: *const T, pNumPasses: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).ValidateDevice(@ptrCast(*const IDirect3DDevice9, self), pNumPasses);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetPaletteEntries(self: *const T, PaletteNumber: u32, pEntries: *const PALETTEENTRY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetPaletteEntries(@ptrCast(*const IDirect3DDevice9, self), PaletteNumber, pEntries);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetPaletteEntries(self: *const T, PaletteNumber: u32, pEntries: *PALETTEENTRY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetPaletteEntries(@ptrCast(*const IDirect3DDevice9, self), PaletteNumber, pEntries);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetCurrentTexturePalette(self: *const T, PaletteNumber: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetCurrentTexturePalette(@ptrCast(*const IDirect3DDevice9, self), PaletteNumber);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetCurrentTexturePalette(self: *const T, PaletteNumber: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetCurrentTexturePalette(@ptrCast(*const IDirect3DDevice9, self), PaletteNumber);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetScissorRect(self: *const T, pRect: *const RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetScissorRect(@ptrCast(*const IDirect3DDevice9, self), pRect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetScissorRect(self: *const T, pRect: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetScissorRect(@ptrCast(*const IDirect3DDevice9, self), pRect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetSoftwareVertexProcessing(self: *const T, bSoftware: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetSoftwareVertexProcessing(@ptrCast(*const IDirect3DDevice9, self), bSoftware);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetSoftwareVertexProcessing(self: *const T) callconv(.Inline) BOOL {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetSoftwareVertexProcessing(@ptrCast(*const IDirect3DDevice9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetNPatchMode(self: *const T, nSegments: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetNPatchMode(@ptrCast(*const IDirect3DDevice9, self), nSegments);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetNPatchMode(self: *const T) callconv(.Inline) f32 {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetNPatchMode(@ptrCast(*const IDirect3DDevice9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_DrawPrimitive(self: *const T, PrimitiveType: D3DPRIMITIVETYPE, StartVertex: u32, PrimitiveCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).DrawPrimitive(@ptrCast(*const IDirect3DDevice9, self), PrimitiveType, StartVertex, PrimitiveCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_DrawIndexedPrimitive(self: *const T, param0: D3DPRIMITIVETYPE, BaseVertexIndex: i32, MinVertexIndex: u32, NumVertices: u32, startIndex: u32, primCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).DrawIndexedPrimitive(@ptrCast(*const IDirect3DDevice9, self), param0, BaseVertexIndex, MinVertexIndex, NumVertices, startIndex, primCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_DrawPrimitiveUP(self: *const T, PrimitiveType: D3DPRIMITIVETYPE, PrimitiveCount: u32, pVertexStreamZeroData: *const c_void, VertexStreamZeroStride: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).DrawPrimitiveUP(@ptrCast(*const IDirect3DDevice9, self), PrimitiveType, PrimitiveCount, pVertexStreamZeroData, VertexStreamZeroStride);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_DrawIndexedPrimitiveUP(self: *const T, PrimitiveType: D3DPRIMITIVETYPE, MinVertexIndex: u32, NumVertices: u32, PrimitiveCount: u32, pIndexData: *const c_void, IndexDataFormat: D3DFORMAT, pVertexStreamZeroData: *const c_void, VertexStreamZeroStride: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).DrawIndexedPrimitiveUP(@ptrCast(*const IDirect3DDevice9, self), PrimitiveType, MinVertexIndex, NumVertices, PrimitiveCount, pIndexData, IndexDataFormat, pVertexStreamZeroData, VertexStreamZeroStride);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_ProcessVertices(self: *const T, SrcStartIndex: u32, DestIndex: u32, VertexCount: u32, pDestBuffer: *IDirect3DVertexBuffer9, pVertexDecl: *IDirect3DVertexDeclaration9, Flags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).ProcessVertices(@ptrCast(*const IDirect3DDevice9, self), SrcStartIndex, DestIndex, VertexCount, pDestBuffer, pVertexDecl, Flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_CreateVertexDeclaration(self: *const T, pVertexElements: *const D3DVERTEXELEMENT9, ppDecl: **IDirect3DVertexDeclaration9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).CreateVertexDeclaration(@ptrCast(*const IDirect3DDevice9, self), pVertexElements, ppDecl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetVertexDeclaration(self: *const T, pDecl: *IDirect3DVertexDeclaration9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetVertexDeclaration(@ptrCast(*const IDirect3DDevice9, self), pDecl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetVertexDeclaration(self: *const T, ppDecl: **IDirect3DVertexDeclaration9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetVertexDeclaration(@ptrCast(*const IDirect3DDevice9, self), ppDecl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetFVF(self: *const T, FVF: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetFVF(@ptrCast(*const IDirect3DDevice9, self), FVF);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetFVF(self: *const T, pFVF: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetFVF(@ptrCast(*const IDirect3DDevice9, self), pFVF);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_CreateVertexShader(self: *const T, pFunction: *const u32, ppShader: **IDirect3DVertexShader9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).CreateVertexShader(@ptrCast(*const IDirect3DDevice9, self), pFunction, ppShader);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetVertexShader(self: *const T, pShader: *IDirect3DVertexShader9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetVertexShader(@ptrCast(*const IDirect3DDevice9, self), pShader);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetVertexShader(self: *const T, ppShader: **IDirect3DVertexShader9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetVertexShader(@ptrCast(*const IDirect3DDevice9, self), ppShader);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetVertexShaderConstantF(self: *const T, StartRegister: u32, pConstantData: *const f32, Vector4fCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetVertexShaderConstantF(@ptrCast(*const IDirect3DDevice9, self), StartRegister, pConstantData, Vector4fCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetVertexShaderConstantF(self: *const T, StartRegister: u32, pConstantData: *f32, Vector4fCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetVertexShaderConstantF(@ptrCast(*const IDirect3DDevice9, self), StartRegister, pConstantData, Vector4fCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetVertexShaderConstantI(self: *const T, StartRegister: u32, pConstantData: *const i32, Vector4iCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetVertexShaderConstantI(@ptrCast(*const IDirect3DDevice9, self), StartRegister, pConstantData, Vector4iCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetVertexShaderConstantI(self: *const T, StartRegister: u32, pConstantData: *i32, Vector4iCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetVertexShaderConstantI(@ptrCast(*const IDirect3DDevice9, self), StartRegister, pConstantData, Vector4iCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetVertexShaderConstantB(self: *const T, StartRegister: u32, pConstantData: *const BOOL, BoolCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetVertexShaderConstantB(@ptrCast(*const IDirect3DDevice9, self), StartRegister, pConstantData, BoolCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetVertexShaderConstantB(self: *const T, StartRegister: u32, pConstantData: *BOOL, BoolCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetVertexShaderConstantB(@ptrCast(*const IDirect3DDevice9, self), StartRegister, pConstantData, BoolCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetStreamSource(self: *const T, StreamNumber: u32, pStreamData: *IDirect3DVertexBuffer9, OffsetInBytes: u32, Stride: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetStreamSource(@ptrCast(*const IDirect3DDevice9, self), StreamNumber, pStreamData, OffsetInBytes, Stride);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetStreamSource(self: *const T, StreamNumber: u32, ppStreamData: **IDirect3DVertexBuffer9, pOffsetInBytes: *u32, pStride: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetStreamSource(@ptrCast(*const IDirect3DDevice9, self), StreamNumber, ppStreamData, pOffsetInBytes, pStride);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetStreamSourceFreq(self: *const T, StreamNumber: u32, Setting: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetStreamSourceFreq(@ptrCast(*const IDirect3DDevice9, self), StreamNumber, Setting);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetStreamSourceFreq(self: *const T, StreamNumber: u32, pSetting: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetStreamSourceFreq(@ptrCast(*const IDirect3DDevice9, self), StreamNumber, pSetting);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetIndices(self: *const T, pIndexData: *IDirect3DIndexBuffer9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetIndices(@ptrCast(*const IDirect3DDevice9, self), pIndexData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetIndices(self: *const T, ppIndexData: **IDirect3DIndexBuffer9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetIndices(@ptrCast(*const IDirect3DDevice9, self), ppIndexData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_CreatePixelShader(self: *const T, pFunction: *const u32, ppShader: **IDirect3DPixelShader9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).CreatePixelShader(@ptrCast(*const IDirect3DDevice9, self), pFunction, ppShader);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetPixelShader(self: *const T, pShader: *IDirect3DPixelShader9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetPixelShader(@ptrCast(*const IDirect3DDevice9, self), pShader);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetPixelShader(self: *const T, ppShader: **IDirect3DPixelShader9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetPixelShader(@ptrCast(*const IDirect3DDevice9, self), ppShader);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetPixelShaderConstantF(self: *const T, StartRegister: u32, pConstantData: *const f32, Vector4fCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetPixelShaderConstantF(@ptrCast(*const IDirect3DDevice9, self), StartRegister, pConstantData, Vector4fCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetPixelShaderConstantF(self: *const T, StartRegister: u32, pConstantData: *f32, Vector4fCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetPixelShaderConstantF(@ptrCast(*const IDirect3DDevice9, self), StartRegister, pConstantData, Vector4fCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetPixelShaderConstantI(self: *const T, StartRegister: u32, pConstantData: *const i32, Vector4iCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetPixelShaderConstantI(@ptrCast(*const IDirect3DDevice9, self), StartRegister, pConstantData, Vector4iCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetPixelShaderConstantI(self: *const T, StartRegister: u32, pConstantData: *i32, Vector4iCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetPixelShaderConstantI(@ptrCast(*const IDirect3DDevice9, self), StartRegister, pConstantData, Vector4iCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_SetPixelShaderConstantB(self: *const T, StartRegister: u32, pConstantData: *const BOOL, BoolCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).SetPixelShaderConstantB(@ptrCast(*const IDirect3DDevice9, self), StartRegister, pConstantData, BoolCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_GetPixelShaderConstantB(self: *const T, StartRegister: u32, pConstantData: *BOOL, BoolCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).GetPixelShaderConstantB(@ptrCast(*const IDirect3DDevice9, self), StartRegister, pConstantData, BoolCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_DrawRectPatch(self: *const T, Handle: u32, pNumSegs: *const f32, pRectPatchInfo: *const D3DRECTPATCH_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).DrawRectPatch(@ptrCast(*const IDirect3DDevice9, self), Handle, pNumSegs, pRectPatchInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_DrawTriPatch(self: *const T, Handle: u32, pNumSegs: *const f32, pTriPatchInfo: *const D3DTRIPATCH_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).DrawTriPatch(@ptrCast(*const IDirect3DDevice9, self), Handle, pNumSegs, pTriPatchInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_DeletePatch(self: *const T, Handle: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).DeletePatch(@ptrCast(*const IDirect3DDevice9, self), Handle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9_CreateQuery(self: *const T, Type: D3DQUERYTYPE, ppQuery: **IDirect3DQuery9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9.VTable, self.vtable).CreateQuery(@ptrCast(*const IDirect3DDevice9, self), Type, ppQuery);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DStateBlock9_Value = @import("../zig.zig").Guid.initString("b07c4fe5-310d-4ba8-a23c-4f0f206f218b");
pub const IID_IDirect3DStateBlock9 = &IID_IDirect3DStateBlock9_Value;
pub const IDirect3DStateBlock9 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDevice: fn(
            self: *const IDirect3DStateBlock9,
            ppDevice: **IDirect3DDevice9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Capture: fn(
            self: *const IDirect3DStateBlock9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Apply: fn(
            self: *const IDirect3DStateBlock9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DStateBlock9_GetDevice(self: *const T, ppDevice: **IDirect3DDevice9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DStateBlock9.VTable, self.vtable).GetDevice(@ptrCast(*const IDirect3DStateBlock9, self), ppDevice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DStateBlock9_Capture(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DStateBlock9.VTable, self.vtable).Capture(@ptrCast(*const IDirect3DStateBlock9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DStateBlock9_Apply(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DStateBlock9.VTable, self.vtable).Apply(@ptrCast(*const IDirect3DStateBlock9, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DSwapChain9_Value = @import("../zig.zig").Guid.initString("794950f2-adfc-458a-905e-10a10b0b503b");
pub const IID_IDirect3DSwapChain9 = &IID_IDirect3DSwapChain9_Value;
pub const IDirect3DSwapChain9 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Present: fn(
            self: *const IDirect3DSwapChain9,
            pSourceRect: *const RECT,
            pDestRect: *const RECT,
            hDestWindowOverride: HWND,
            pDirtyRegion: *const RGNDATA,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrontBufferData: fn(
            self: *const IDirect3DSwapChain9,
            pDestSurface: *IDirect3DSurface9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBackBuffer: fn(
            self: *const IDirect3DSwapChain9,
            iBackBuffer: u32,
            Type: D3DBACKBUFFER_TYPE,
            ppBackBuffer: **IDirect3DSurface9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRasterStatus: fn(
            self: *const IDirect3DSwapChain9,
            pRasterStatus: *D3DRASTER_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayMode: fn(
            self: *const IDirect3DSwapChain9,
            pMode: *D3DDISPLAYMODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDevice: fn(
            self: *const IDirect3DSwapChain9,
            ppDevice: **IDirect3DDevice9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPresentParameters: fn(
            self: *const IDirect3DSwapChain9,
            pPresentationParameters: *D3DPRESENT_PARAMETERS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DSwapChain9_Present(self: *const T, pSourceRect: *const RECT, pDestRect: *const RECT, hDestWindowOverride: HWND, pDirtyRegion: *const RGNDATA, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DSwapChain9.VTable, self.vtable).Present(@ptrCast(*const IDirect3DSwapChain9, self), pSourceRect, pDestRect, hDestWindowOverride, pDirtyRegion, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DSwapChain9_GetFrontBufferData(self: *const T, pDestSurface: *IDirect3DSurface9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DSwapChain9.VTable, self.vtable).GetFrontBufferData(@ptrCast(*const IDirect3DSwapChain9, self), pDestSurface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DSwapChain9_GetBackBuffer(self: *const T, iBackBuffer: u32, Type: D3DBACKBUFFER_TYPE, ppBackBuffer: **IDirect3DSurface9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DSwapChain9.VTable, self.vtable).GetBackBuffer(@ptrCast(*const IDirect3DSwapChain9, self), iBackBuffer, Type, ppBackBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DSwapChain9_GetRasterStatus(self: *const T, pRasterStatus: *D3DRASTER_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DSwapChain9.VTable, self.vtable).GetRasterStatus(@ptrCast(*const IDirect3DSwapChain9, self), pRasterStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DSwapChain9_GetDisplayMode(self: *const T, pMode: *D3DDISPLAYMODE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DSwapChain9.VTable, self.vtable).GetDisplayMode(@ptrCast(*const IDirect3DSwapChain9, self), pMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DSwapChain9_GetDevice(self: *const T, ppDevice: **IDirect3DDevice9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DSwapChain9.VTable, self.vtable).GetDevice(@ptrCast(*const IDirect3DSwapChain9, self), ppDevice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DSwapChain9_GetPresentParameters(self: *const T, pPresentationParameters: *D3DPRESENT_PARAMETERS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DSwapChain9.VTable, self.vtable).GetPresentParameters(@ptrCast(*const IDirect3DSwapChain9, self), pPresentationParameters);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DResource9_Value = @import("../zig.zig").Guid.initString("05eec05d-8f7d-4362-b999-d1baf357c704");
pub const IID_IDirect3DResource9 = &IID_IDirect3DResource9_Value;
pub const IDirect3DResource9 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDevice: fn(
            self: *const IDirect3DResource9,
            ppDevice: **IDirect3DDevice9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrivateData: fn(
            self: *const IDirect3DResource9,
            refguid: *const Guid,
            pData: *const c_void,
            SizeOfData: u32,
            Flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrivateData: fn(
            self: *const IDirect3DResource9,
            refguid: *const Guid,
            pData: *c_void,
            pSizeOfData: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FreePrivateData: fn(
            self: *const IDirect3DResource9,
            refguid: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPriority: fn(
            self: *const IDirect3DResource9,
            PriorityNew: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetPriority: fn(
            self: *const IDirect3DResource9,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        PreLoad: fn(
            self: *const IDirect3DResource9,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetType: fn(
            self: *const IDirect3DResource9,
        ) callconv(@import("std").os.windows.WINAPI) D3DRESOURCETYPE,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DResource9_GetDevice(self: *const T, ppDevice: **IDirect3DDevice9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DResource9.VTable, self.vtable).GetDevice(@ptrCast(*const IDirect3DResource9, self), ppDevice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DResource9_SetPrivateData(self: *const T, refguid: *const Guid, pData: *const c_void, SizeOfData: u32, Flags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DResource9.VTable, self.vtable).SetPrivateData(@ptrCast(*const IDirect3DResource9, self), refguid, pData, SizeOfData, Flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DResource9_GetPrivateData(self: *const T, refguid: *const Guid, pData: *c_void, pSizeOfData: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DResource9.VTable, self.vtable).GetPrivateData(@ptrCast(*const IDirect3DResource9, self), refguid, pData, pSizeOfData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DResource9_FreePrivateData(self: *const T, refguid: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DResource9.VTable, self.vtable).FreePrivateData(@ptrCast(*const IDirect3DResource9, self), refguid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DResource9_SetPriority(self: *const T, PriorityNew: u32) callconv(.Inline) u32 {
            return @ptrCast(*const IDirect3DResource9.VTable, self.vtable).SetPriority(@ptrCast(*const IDirect3DResource9, self), PriorityNew);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DResource9_GetPriority(self: *const T) callconv(.Inline) u32 {
            return @ptrCast(*const IDirect3DResource9.VTable, self.vtable).GetPriority(@ptrCast(*const IDirect3DResource9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DResource9_PreLoad(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const IDirect3DResource9.VTable, self.vtable).PreLoad(@ptrCast(*const IDirect3DResource9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DResource9_GetType(self: *const T) callconv(.Inline) D3DRESOURCETYPE {
            return @ptrCast(*const IDirect3DResource9.VTable, self.vtable).GetType(@ptrCast(*const IDirect3DResource9, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DVertexDeclaration9_Value = @import("../zig.zig").Guid.initString("dd13c59c-36fa-4098-a8fb-c7ed39dc8546");
pub const IID_IDirect3DVertexDeclaration9 = &IID_IDirect3DVertexDeclaration9_Value;
pub const IDirect3DVertexDeclaration9 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDevice: fn(
            self: *const IDirect3DVertexDeclaration9,
            ppDevice: **IDirect3DDevice9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeclaration: fn(
            self: *const IDirect3DVertexDeclaration9,
            pElement: *D3DVERTEXELEMENT9,
            pNumElements: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVertexDeclaration9_GetDevice(self: *const T, ppDevice: **IDirect3DDevice9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVertexDeclaration9.VTable, self.vtable).GetDevice(@ptrCast(*const IDirect3DVertexDeclaration9, self), ppDevice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVertexDeclaration9_GetDeclaration(self: *const T, pElement: *D3DVERTEXELEMENT9, pNumElements: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVertexDeclaration9.VTable, self.vtable).GetDeclaration(@ptrCast(*const IDirect3DVertexDeclaration9, self), pElement, pNumElements);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DVertexShader9_Value = @import("../zig.zig").Guid.initString("efc5557e-6265-4613-8a94-43857889eb36");
pub const IID_IDirect3DVertexShader9 = &IID_IDirect3DVertexShader9_Value;
pub const IDirect3DVertexShader9 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDevice: fn(
            self: *const IDirect3DVertexShader9,
            ppDevice: **IDirect3DDevice9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFunction: fn(
            self: *const IDirect3DVertexShader9,
            param0: *c_void,
            pSizeOfData: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVertexShader9_GetDevice(self: *const T, ppDevice: **IDirect3DDevice9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVertexShader9.VTable, self.vtable).GetDevice(@ptrCast(*const IDirect3DVertexShader9, self), ppDevice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVertexShader9_GetFunction(self: *const T, param0: *c_void, pSizeOfData: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVertexShader9.VTable, self.vtable).GetFunction(@ptrCast(*const IDirect3DVertexShader9, self), param0, pSizeOfData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DPixelShader9_Value = @import("../zig.zig").Guid.initString("6d3bdbdc-5b02-4415-b852-ce5e8bccb289");
pub const IID_IDirect3DPixelShader9 = &IID_IDirect3DPixelShader9_Value;
pub const IDirect3DPixelShader9 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDevice: fn(
            self: *const IDirect3DPixelShader9,
            ppDevice: **IDirect3DDevice9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFunction: fn(
            self: *const IDirect3DPixelShader9,
            param0: *c_void,
            pSizeOfData: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DPixelShader9_GetDevice(self: *const T, ppDevice: **IDirect3DDevice9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DPixelShader9.VTable, self.vtable).GetDevice(@ptrCast(*const IDirect3DPixelShader9, self), ppDevice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DPixelShader9_GetFunction(self: *const T, param0: *c_void, pSizeOfData: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DPixelShader9.VTable, self.vtable).GetFunction(@ptrCast(*const IDirect3DPixelShader9, self), param0, pSizeOfData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DBaseTexture9_Value = @import("../zig.zig").Guid.initString("580ca87e-1d3c-4d54-991d-b7d3e3c298ce");
pub const IID_IDirect3DBaseTexture9 = &IID_IDirect3DBaseTexture9_Value;
pub const IDirect3DBaseTexture9 = extern struct {
    pub const VTable = extern struct {
        base: IDirect3DResource9.VTable,
        SetLOD: fn(
            self: *const IDirect3DBaseTexture9,
            LODNew: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetLOD: fn(
            self: *const IDirect3DBaseTexture9,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetLevelCount: fn(
            self: *const IDirect3DBaseTexture9,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        SetAutoGenFilterType: fn(
            self: *const IDirect3DBaseTexture9,
            FilterType: D3DTEXTUREFILTERTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutoGenFilterType: fn(
            self: *const IDirect3DBaseTexture9,
        ) callconv(@import("std").os.windows.WINAPI) D3DTEXTUREFILTERTYPE,
        GenerateMipSubLevels: fn(
            self: *const IDirect3DBaseTexture9,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirect3DResource9.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DBaseTexture9_SetLOD(self: *const T, LODNew: u32) callconv(.Inline) u32 {
            return @ptrCast(*const IDirect3DBaseTexture9.VTable, self.vtable).SetLOD(@ptrCast(*const IDirect3DBaseTexture9, self), LODNew);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DBaseTexture9_GetLOD(self: *const T) callconv(.Inline) u32 {
            return @ptrCast(*const IDirect3DBaseTexture9.VTable, self.vtable).GetLOD(@ptrCast(*const IDirect3DBaseTexture9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DBaseTexture9_GetLevelCount(self: *const T) callconv(.Inline) u32 {
            return @ptrCast(*const IDirect3DBaseTexture9.VTable, self.vtable).GetLevelCount(@ptrCast(*const IDirect3DBaseTexture9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DBaseTexture9_SetAutoGenFilterType(self: *const T, FilterType: D3DTEXTUREFILTERTYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DBaseTexture9.VTable, self.vtable).SetAutoGenFilterType(@ptrCast(*const IDirect3DBaseTexture9, self), FilterType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DBaseTexture9_GetAutoGenFilterType(self: *const T) callconv(.Inline) D3DTEXTUREFILTERTYPE {
            return @ptrCast(*const IDirect3DBaseTexture9.VTable, self.vtable).GetAutoGenFilterType(@ptrCast(*const IDirect3DBaseTexture9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DBaseTexture9_GenerateMipSubLevels(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const IDirect3DBaseTexture9.VTable, self.vtable).GenerateMipSubLevels(@ptrCast(*const IDirect3DBaseTexture9, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DTexture9_Value = @import("../zig.zig").Guid.initString("85c31227-3de5-4f00-9b3a-f11ac38c18b5");
pub const IID_IDirect3DTexture9 = &IID_IDirect3DTexture9_Value;
pub const IDirect3DTexture9 = extern struct {
    pub const VTable = extern struct {
        base: IDirect3DBaseTexture9.VTable,
        GetLevelDesc: fn(
            self: *const IDirect3DTexture9,
            Level: u32,
            pDesc: *D3DSURFACE_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSurfaceLevel: fn(
            self: *const IDirect3DTexture9,
            Level: u32,
            ppSurfaceLevel: **IDirect3DSurface9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LockRect: fn(
            self: *const IDirect3DTexture9,
            Level: u32,
            pLockedRect: *D3DLOCKED_RECT,
            pRect: *const RECT,
            Flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnlockRect: fn(
            self: *const IDirect3DTexture9,
            Level: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDirtyRect: fn(
            self: *const IDirect3DTexture9,
            pDirtyRect: *const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirect3DBaseTexture9.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DTexture9_GetLevelDesc(self: *const T, Level: u32, pDesc: *D3DSURFACE_DESC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DTexture9.VTable, self.vtable).GetLevelDesc(@ptrCast(*const IDirect3DTexture9, self), Level, pDesc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DTexture9_GetSurfaceLevel(self: *const T, Level: u32, ppSurfaceLevel: **IDirect3DSurface9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DTexture9.VTable, self.vtable).GetSurfaceLevel(@ptrCast(*const IDirect3DTexture9, self), Level, ppSurfaceLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DTexture9_LockRect(self: *const T, Level: u32, pLockedRect: *D3DLOCKED_RECT, pRect: *const RECT, Flags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DTexture9.VTable, self.vtable).LockRect(@ptrCast(*const IDirect3DTexture9, self), Level, pLockedRect, pRect, Flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DTexture9_UnlockRect(self: *const T, Level: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DTexture9.VTable, self.vtable).UnlockRect(@ptrCast(*const IDirect3DTexture9, self), Level);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DTexture9_AddDirtyRect(self: *const T, pDirtyRect: *const RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DTexture9.VTable, self.vtable).AddDirtyRect(@ptrCast(*const IDirect3DTexture9, self), pDirtyRect);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DVolumeTexture9_Value = @import("../zig.zig").Guid.initString("2518526c-e789-4111-a7b9-47ef328d13e6");
pub const IID_IDirect3DVolumeTexture9 = &IID_IDirect3DVolumeTexture9_Value;
pub const IDirect3DVolumeTexture9 = extern struct {
    pub const VTable = extern struct {
        base: IDirect3DBaseTexture9.VTable,
        GetLevelDesc: fn(
            self: *const IDirect3DVolumeTexture9,
            Level: u32,
            pDesc: *D3DVOLUME_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVolumeLevel: fn(
            self: *const IDirect3DVolumeTexture9,
            Level: u32,
            ppVolumeLevel: **IDirect3DVolume9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LockBox: fn(
            self: *const IDirect3DVolumeTexture9,
            Level: u32,
            pLockedVolume: *D3DLOCKED_BOX,
            pBox: *const D3DBOX,
            Flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnlockBox: fn(
            self: *const IDirect3DVolumeTexture9,
            Level: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDirtyBox: fn(
            self: *const IDirect3DVolumeTexture9,
            pDirtyBox: *const D3DBOX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirect3DBaseTexture9.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVolumeTexture9_GetLevelDesc(self: *const T, Level: u32, pDesc: *D3DVOLUME_DESC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVolumeTexture9.VTable, self.vtable).GetLevelDesc(@ptrCast(*const IDirect3DVolumeTexture9, self), Level, pDesc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVolumeTexture9_GetVolumeLevel(self: *const T, Level: u32, ppVolumeLevel: **IDirect3DVolume9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVolumeTexture9.VTable, self.vtable).GetVolumeLevel(@ptrCast(*const IDirect3DVolumeTexture9, self), Level, ppVolumeLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVolumeTexture9_LockBox(self: *const T, Level: u32, pLockedVolume: *D3DLOCKED_BOX, pBox: *const D3DBOX, Flags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVolumeTexture9.VTable, self.vtable).LockBox(@ptrCast(*const IDirect3DVolumeTexture9, self), Level, pLockedVolume, pBox, Flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVolumeTexture9_UnlockBox(self: *const T, Level: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVolumeTexture9.VTable, self.vtable).UnlockBox(@ptrCast(*const IDirect3DVolumeTexture9, self), Level);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVolumeTexture9_AddDirtyBox(self: *const T, pDirtyBox: *const D3DBOX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVolumeTexture9.VTable, self.vtable).AddDirtyBox(@ptrCast(*const IDirect3DVolumeTexture9, self), pDirtyBox);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DCubeTexture9_Value = @import("../zig.zig").Guid.initString("fff32f81-d953-473a-9223-93d652aba93f");
pub const IID_IDirect3DCubeTexture9 = &IID_IDirect3DCubeTexture9_Value;
pub const IDirect3DCubeTexture9 = extern struct {
    pub const VTable = extern struct {
        base: IDirect3DBaseTexture9.VTable,
        GetLevelDesc: fn(
            self: *const IDirect3DCubeTexture9,
            Level: u32,
            pDesc: *D3DSURFACE_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCubeMapSurface: fn(
            self: *const IDirect3DCubeTexture9,
            FaceType: D3DCUBEMAP_FACES,
            Level: u32,
            ppCubeMapSurface: **IDirect3DSurface9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LockRect: fn(
            self: *const IDirect3DCubeTexture9,
            FaceType: D3DCUBEMAP_FACES,
            Level: u32,
            pLockedRect: *D3DLOCKED_RECT,
            pRect: *const RECT,
            Flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnlockRect: fn(
            self: *const IDirect3DCubeTexture9,
            FaceType: D3DCUBEMAP_FACES,
            Level: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDirtyRect: fn(
            self: *const IDirect3DCubeTexture9,
            FaceType: D3DCUBEMAP_FACES,
            pDirtyRect: *const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirect3DBaseTexture9.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DCubeTexture9_GetLevelDesc(self: *const T, Level: u32, pDesc: *D3DSURFACE_DESC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DCubeTexture9.VTable, self.vtable).GetLevelDesc(@ptrCast(*const IDirect3DCubeTexture9, self), Level, pDesc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DCubeTexture9_GetCubeMapSurface(self: *const T, FaceType: D3DCUBEMAP_FACES, Level: u32, ppCubeMapSurface: **IDirect3DSurface9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DCubeTexture9.VTable, self.vtable).GetCubeMapSurface(@ptrCast(*const IDirect3DCubeTexture9, self), FaceType, Level, ppCubeMapSurface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DCubeTexture9_LockRect(self: *const T, FaceType: D3DCUBEMAP_FACES, Level: u32, pLockedRect: *D3DLOCKED_RECT, pRect: *const RECT, Flags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DCubeTexture9.VTable, self.vtable).LockRect(@ptrCast(*const IDirect3DCubeTexture9, self), FaceType, Level, pLockedRect, pRect, Flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DCubeTexture9_UnlockRect(self: *const T, FaceType: D3DCUBEMAP_FACES, Level: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DCubeTexture9.VTable, self.vtable).UnlockRect(@ptrCast(*const IDirect3DCubeTexture9, self), FaceType, Level);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DCubeTexture9_AddDirtyRect(self: *const T, FaceType: D3DCUBEMAP_FACES, pDirtyRect: *const RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DCubeTexture9.VTable, self.vtable).AddDirtyRect(@ptrCast(*const IDirect3DCubeTexture9, self), FaceType, pDirtyRect);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DVertexBuffer9_Value = @import("../zig.zig").Guid.initString("b64bb1b5-fd70-4df6-bf91-19d0a12455e3");
pub const IID_IDirect3DVertexBuffer9 = &IID_IDirect3DVertexBuffer9_Value;
pub const IDirect3DVertexBuffer9 = extern struct {
    pub const VTable = extern struct {
        base: IDirect3DResource9.VTable,
        Lock: fn(
            self: *const IDirect3DVertexBuffer9,
            OffsetToLock: u32,
            SizeToLock: u32,
            ppbData: **c_void,
            Flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unlock: fn(
            self: *const IDirect3DVertexBuffer9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDesc: fn(
            self: *const IDirect3DVertexBuffer9,
            pDesc: *D3DVERTEXBUFFER_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirect3DResource9.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVertexBuffer9_Lock(self: *const T, OffsetToLock: u32, SizeToLock: u32, ppbData: **c_void, Flags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVertexBuffer9.VTable, self.vtable).Lock(@ptrCast(*const IDirect3DVertexBuffer9, self), OffsetToLock, SizeToLock, ppbData, Flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVertexBuffer9_Unlock(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVertexBuffer9.VTable, self.vtable).Unlock(@ptrCast(*const IDirect3DVertexBuffer9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVertexBuffer9_GetDesc(self: *const T, pDesc: *D3DVERTEXBUFFER_DESC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVertexBuffer9.VTable, self.vtable).GetDesc(@ptrCast(*const IDirect3DVertexBuffer9, self), pDesc);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DIndexBuffer9_Value = @import("../zig.zig").Guid.initString("7c9dd65e-d3f7-4529-acee-785830acde35");
pub const IID_IDirect3DIndexBuffer9 = &IID_IDirect3DIndexBuffer9_Value;
pub const IDirect3DIndexBuffer9 = extern struct {
    pub const VTable = extern struct {
        base: IDirect3DResource9.VTable,
        Lock: fn(
            self: *const IDirect3DIndexBuffer9,
            OffsetToLock: u32,
            SizeToLock: u32,
            ppbData: **c_void,
            Flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unlock: fn(
            self: *const IDirect3DIndexBuffer9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDesc: fn(
            self: *const IDirect3DIndexBuffer9,
            pDesc: *D3DINDEXBUFFER_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirect3DResource9.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DIndexBuffer9_Lock(self: *const T, OffsetToLock: u32, SizeToLock: u32, ppbData: **c_void, Flags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DIndexBuffer9.VTable, self.vtable).Lock(@ptrCast(*const IDirect3DIndexBuffer9, self), OffsetToLock, SizeToLock, ppbData, Flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DIndexBuffer9_Unlock(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DIndexBuffer9.VTable, self.vtable).Unlock(@ptrCast(*const IDirect3DIndexBuffer9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DIndexBuffer9_GetDesc(self: *const T, pDesc: *D3DINDEXBUFFER_DESC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DIndexBuffer9.VTable, self.vtable).GetDesc(@ptrCast(*const IDirect3DIndexBuffer9, self), pDesc);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DSurface9_Value = @import("../zig.zig").Guid.initString("0cfbaf3a-9ff6-429a-99b3-a2796af8b89b");
pub const IID_IDirect3DSurface9 = &IID_IDirect3DSurface9_Value;
pub const IDirect3DSurface9 = extern struct {
    pub const VTable = extern struct {
        base: IDirect3DResource9.VTable,
        GetContainer: fn(
            self: *const IDirect3DSurface9,
            riid: *const Guid,
            ppContainer: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDesc: fn(
            self: *const IDirect3DSurface9,
            pDesc: *D3DSURFACE_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LockRect: fn(
            self: *const IDirect3DSurface9,
            pLockedRect: *D3DLOCKED_RECT,
            pRect: *const RECT,
            Flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnlockRect: fn(
            self: *const IDirect3DSurface9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDC: fn(
            self: *const IDirect3DSurface9,
            phdc: *HDC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseDC: fn(
            self: *const IDirect3DSurface9,
            hdc: HDC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirect3DResource9.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DSurface9_GetContainer(self: *const T, riid: *const Guid, ppContainer: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DSurface9.VTable, self.vtable).GetContainer(@ptrCast(*const IDirect3DSurface9, self), riid, ppContainer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DSurface9_GetDesc(self: *const T, pDesc: *D3DSURFACE_DESC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DSurface9.VTable, self.vtable).GetDesc(@ptrCast(*const IDirect3DSurface9, self), pDesc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DSurface9_LockRect(self: *const T, pLockedRect: *D3DLOCKED_RECT, pRect: *const RECT, Flags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DSurface9.VTable, self.vtable).LockRect(@ptrCast(*const IDirect3DSurface9, self), pLockedRect, pRect, Flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DSurface9_UnlockRect(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DSurface9.VTable, self.vtable).UnlockRect(@ptrCast(*const IDirect3DSurface9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DSurface9_GetDC(self: *const T, phdc: *HDC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DSurface9.VTable, self.vtable).GetDC(@ptrCast(*const IDirect3DSurface9, self), phdc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DSurface9_ReleaseDC(self: *const T, hdc: HDC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DSurface9.VTable, self.vtable).ReleaseDC(@ptrCast(*const IDirect3DSurface9, self), hdc);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DVolume9_Value = @import("../zig.zig").Guid.initString("24f416e6-1f67-4aa7-b88e-d33f6f3128a1");
pub const IID_IDirect3DVolume9 = &IID_IDirect3DVolume9_Value;
pub const IDirect3DVolume9 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDevice: fn(
            self: *const IDirect3DVolume9,
            ppDevice: **IDirect3DDevice9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrivateData: fn(
            self: *const IDirect3DVolume9,
            refguid: *const Guid,
            pData: *const c_void,
            SizeOfData: u32,
            Flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrivateData: fn(
            self: *const IDirect3DVolume9,
            refguid: *const Guid,
            pData: *c_void,
            pSizeOfData: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FreePrivateData: fn(
            self: *const IDirect3DVolume9,
            refguid: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContainer: fn(
            self: *const IDirect3DVolume9,
            riid: *const Guid,
            ppContainer: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDesc: fn(
            self: *const IDirect3DVolume9,
            pDesc: *D3DVOLUME_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LockBox: fn(
            self: *const IDirect3DVolume9,
            pLockedVolume: *D3DLOCKED_BOX,
            pBox: *const D3DBOX,
            Flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnlockBox: fn(
            self: *const IDirect3DVolume9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVolume9_GetDevice(self: *const T, ppDevice: **IDirect3DDevice9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVolume9.VTable, self.vtable).GetDevice(@ptrCast(*const IDirect3DVolume9, self), ppDevice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVolume9_SetPrivateData(self: *const T, refguid: *const Guid, pData: *const c_void, SizeOfData: u32, Flags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVolume9.VTable, self.vtable).SetPrivateData(@ptrCast(*const IDirect3DVolume9, self), refguid, pData, SizeOfData, Flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVolume9_GetPrivateData(self: *const T, refguid: *const Guid, pData: *c_void, pSizeOfData: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVolume9.VTable, self.vtable).GetPrivateData(@ptrCast(*const IDirect3DVolume9, self), refguid, pData, pSizeOfData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVolume9_FreePrivateData(self: *const T, refguid: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVolume9.VTable, self.vtable).FreePrivateData(@ptrCast(*const IDirect3DVolume9, self), refguid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVolume9_GetContainer(self: *const T, riid: *const Guid, ppContainer: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVolume9.VTable, self.vtable).GetContainer(@ptrCast(*const IDirect3DVolume9, self), riid, ppContainer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVolume9_GetDesc(self: *const T, pDesc: *D3DVOLUME_DESC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVolume9.VTable, self.vtable).GetDesc(@ptrCast(*const IDirect3DVolume9, self), pDesc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVolume9_LockBox(self: *const T, pLockedVolume: *D3DLOCKED_BOX, pBox: *const D3DBOX, Flags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVolume9.VTable, self.vtable).LockBox(@ptrCast(*const IDirect3DVolume9, self), pLockedVolume, pBox, Flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DVolume9_UnlockBox(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DVolume9.VTable, self.vtable).UnlockBox(@ptrCast(*const IDirect3DVolume9, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DQuery9_Value = @import("../zig.zig").Guid.initString("d9771460-a695-4f26-bbd3-27b840b541cc");
pub const IID_IDirect3DQuery9 = &IID_IDirect3DQuery9_Value;
pub const IDirect3DQuery9 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDevice: fn(
            self: *const IDirect3DQuery9,
            ppDevice: **IDirect3DDevice9,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: fn(
            self: *const IDirect3DQuery9,
        ) callconv(@import("std").os.windows.WINAPI) D3DQUERYTYPE,
        GetDataSize: fn(
            self: *const IDirect3DQuery9,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        Issue: fn(
            self: *const IDirect3DQuery9,
            dwIssueFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetData: fn(
            self: *const IDirect3DQuery9,
            pData: *c_void,
            dwSize: u32,
            dwGetDataFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DQuery9_GetDevice(self: *const T, ppDevice: **IDirect3DDevice9) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DQuery9.VTable, self.vtable).GetDevice(@ptrCast(*const IDirect3DQuery9, self), ppDevice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DQuery9_GetType(self: *const T) callconv(.Inline) D3DQUERYTYPE {
            return @ptrCast(*const IDirect3DQuery9.VTable, self.vtable).GetType(@ptrCast(*const IDirect3DQuery9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DQuery9_GetDataSize(self: *const T) callconv(.Inline) u32 {
            return @ptrCast(*const IDirect3DQuery9.VTable, self.vtable).GetDataSize(@ptrCast(*const IDirect3DQuery9, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DQuery9_Issue(self: *const T, dwIssueFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DQuery9.VTable, self.vtable).Issue(@ptrCast(*const IDirect3DQuery9, self), dwIssueFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DQuery9_GetData(self: *const T, pData: *c_void, dwSize: u32, dwGetDataFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DQuery9.VTable, self.vtable).GetData(@ptrCast(*const IDirect3DQuery9, self), pData, dwSize, dwGetDataFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3D9Ex_Value = @import("../zig.zig").Guid.initString("02177241-69fc-400c-8ff1-93a44df6861d");
pub const IID_IDirect3D9Ex = &IID_IDirect3D9Ex_Value;
pub const IDirect3D9Ex = extern struct {
    pub const VTable = extern struct {
        base: IDirect3D9.VTable,
        GetAdapterModeCountEx: fn(
            self: *const IDirect3D9Ex,
            Adapter: u32,
            pFilter: *const D3DDISPLAYMODEFILTER,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        EnumAdapterModesEx: fn(
            self: *const IDirect3D9Ex,
            Adapter: u32,
            pFilter: *const D3DDISPLAYMODEFILTER,
            Mode: u32,
            pMode: *D3DDISPLAYMODEEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAdapterDisplayModeEx: fn(
            self: *const IDirect3D9Ex,
            Adapter: u32,
            pMode: *D3DDISPLAYMODEEX,
            pRotation: *D3DDISPLAYROTATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDeviceEx: fn(
            self: *const IDirect3D9Ex,
            Adapter: u32,
            DeviceType: D3DDEVTYPE,
            hFocusWindow: HWND,
            BehaviorFlags: u32,
            pPresentationParameters: *D3DPRESENT_PARAMETERS,
            pFullscreenDisplayMode: *D3DDISPLAYMODEEX,
            ppReturnedDeviceInterface: **IDirect3DDevice9Ex,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAdapterLUID: fn(
            self: *const IDirect3D9Ex,
            Adapter: u32,
            pLUID: *LUID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirect3D9.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9Ex_GetAdapterModeCountEx(self: *const T, Adapter: u32, pFilter: *const D3DDISPLAYMODEFILTER) callconv(.Inline) u32 {
            return @ptrCast(*const IDirect3D9Ex.VTable, self.vtable).GetAdapterModeCountEx(@ptrCast(*const IDirect3D9Ex, self), Adapter, pFilter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9Ex_EnumAdapterModesEx(self: *const T, Adapter: u32, pFilter: *const D3DDISPLAYMODEFILTER, Mode: u32, pMode: *D3DDISPLAYMODEEX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3D9Ex.VTable, self.vtable).EnumAdapterModesEx(@ptrCast(*const IDirect3D9Ex, self), Adapter, pFilter, Mode, pMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9Ex_GetAdapterDisplayModeEx(self: *const T, Adapter: u32, pMode: *D3DDISPLAYMODEEX, pRotation: *D3DDISPLAYROTATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3D9Ex.VTable, self.vtable).GetAdapterDisplayModeEx(@ptrCast(*const IDirect3D9Ex, self), Adapter, pMode, pRotation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9Ex_CreateDeviceEx(self: *const T, Adapter: u32, DeviceType: D3DDEVTYPE, hFocusWindow: HWND, BehaviorFlags: u32, pPresentationParameters: *D3DPRESENT_PARAMETERS, pFullscreenDisplayMode: *D3DDISPLAYMODEEX, ppReturnedDeviceInterface: **IDirect3DDevice9Ex) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3D9Ex.VTable, self.vtable).CreateDeviceEx(@ptrCast(*const IDirect3D9Ex, self), Adapter, DeviceType, hFocusWindow, BehaviorFlags, pPresentationParameters, pFullscreenDisplayMode, ppReturnedDeviceInterface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3D9Ex_GetAdapterLUID(self: *const T, Adapter: u32, pLUID: *LUID) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3D9Ex.VTable, self.vtable).GetAdapterLUID(@ptrCast(*const IDirect3D9Ex, self), Adapter, pLUID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DDevice9Ex_Value = @import("../zig.zig").Guid.initString("b18b10ce-2649-405a-870f-95f777d4313a");
pub const IID_IDirect3DDevice9Ex = &IID_IDirect3DDevice9Ex_Value;
pub const IDirect3DDevice9Ex = extern struct {
    pub const VTable = extern struct {
        base: IDirect3DDevice9.VTable,
        SetConvolutionMonoKernel: fn(
            self: *const IDirect3DDevice9Ex,
            width: u32,
            height: u32,
            rows: *f32,
            columns: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ComposeRects: fn(
            self: *const IDirect3DDevice9Ex,
            pSrc: *IDirect3DSurface9,
            pDst: *IDirect3DSurface9,
            pSrcRectDescs: *IDirect3DVertexBuffer9,
            NumRects: u32,
            pDstRectDescs: *IDirect3DVertexBuffer9,
            Operation: D3DCOMPOSERECTSOP,
            Xoffset: i32,
            Yoffset: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PresentEx: fn(
            self: *const IDirect3DDevice9Ex,
            pSourceRect: *const RECT,
            pDestRect: *const RECT,
            hDestWindowOverride: HWND,
            pDirtyRegion: *const RGNDATA,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGPUThreadPriority: fn(
            self: *const IDirect3DDevice9Ex,
            pPriority: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGPUThreadPriority: fn(
            self: *const IDirect3DDevice9Ex,
            Priority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WaitForVBlank: fn(
            self: *const IDirect3DDevice9Ex,
            iSwapChain: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckResourceResidency: fn(
            self: *const IDirect3DDevice9Ex,
            pResourceArray: **IDirect3DResource9,
            NumResources: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaximumFrameLatency: fn(
            self: *const IDirect3DDevice9Ex,
            MaxLatency: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaximumFrameLatency: fn(
            self: *const IDirect3DDevice9Ex,
            pMaxLatency: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckDeviceState: fn(
            self: *const IDirect3DDevice9Ex,
            hDestinationWindow: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRenderTargetEx: fn(
            self: *const IDirect3DDevice9Ex,
            Width: u32,
            Height: u32,
            Format: D3DFORMAT,
            MultiSample: D3DMULTISAMPLE_TYPE,
            MultisampleQuality: u32,
            Lockable: BOOL,
            ppSurface: **IDirect3DSurface9,
            pSharedHandle: *HANDLE,
            Usage: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateOffscreenPlainSurfaceEx: fn(
            self: *const IDirect3DDevice9Ex,
            Width: u32,
            Height: u32,
            Format: D3DFORMAT,
            Pool: D3DPOOL,
            ppSurface: **IDirect3DSurface9,
            pSharedHandle: *HANDLE,
            Usage: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDepthStencilSurfaceEx: fn(
            self: *const IDirect3DDevice9Ex,
            Width: u32,
            Height: u32,
            Format: D3DFORMAT,
            MultiSample: D3DMULTISAMPLE_TYPE,
            MultisampleQuality: u32,
            Discard: BOOL,
            ppSurface: **IDirect3DSurface9,
            pSharedHandle: *HANDLE,
            Usage: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetEx: fn(
            self: *const IDirect3DDevice9Ex,
            pPresentationParameters: *D3DPRESENT_PARAMETERS,
            pFullscreenDisplayMode: *D3DDISPLAYMODEEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayModeEx: fn(
            self: *const IDirect3DDevice9Ex,
            iSwapChain: u32,
            pMode: *D3DDISPLAYMODEEX,
            pRotation: *D3DDISPLAYROTATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirect3DDevice9.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9Ex_SetConvolutionMonoKernel(self: *const T, width: u32, height: u32, rows: *f32, columns: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9Ex.VTable, self.vtable).SetConvolutionMonoKernel(@ptrCast(*const IDirect3DDevice9Ex, self), width, height, rows, columns);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9Ex_ComposeRects(self: *const T, pSrc: *IDirect3DSurface9, pDst: *IDirect3DSurface9, pSrcRectDescs: *IDirect3DVertexBuffer9, NumRects: u32, pDstRectDescs: *IDirect3DVertexBuffer9, Operation: D3DCOMPOSERECTSOP, Xoffset: i32, Yoffset: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9Ex.VTable, self.vtable).ComposeRects(@ptrCast(*const IDirect3DDevice9Ex, self), pSrc, pDst, pSrcRectDescs, NumRects, pDstRectDescs, Operation, Xoffset, Yoffset);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9Ex_PresentEx(self: *const T, pSourceRect: *const RECT, pDestRect: *const RECT, hDestWindowOverride: HWND, pDirtyRegion: *const RGNDATA, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9Ex.VTable, self.vtable).PresentEx(@ptrCast(*const IDirect3DDevice9Ex, self), pSourceRect, pDestRect, hDestWindowOverride, pDirtyRegion, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9Ex_GetGPUThreadPriority(self: *const T, pPriority: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9Ex.VTable, self.vtable).GetGPUThreadPriority(@ptrCast(*const IDirect3DDevice9Ex, self), pPriority);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9Ex_SetGPUThreadPriority(self: *const T, Priority: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9Ex.VTable, self.vtable).SetGPUThreadPriority(@ptrCast(*const IDirect3DDevice9Ex, self), Priority);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9Ex_WaitForVBlank(self: *const T, iSwapChain: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9Ex.VTable, self.vtable).WaitForVBlank(@ptrCast(*const IDirect3DDevice9Ex, self), iSwapChain);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9Ex_CheckResourceResidency(self: *const T, pResourceArray: **IDirect3DResource9, NumResources: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9Ex.VTable, self.vtable).CheckResourceResidency(@ptrCast(*const IDirect3DDevice9Ex, self), pResourceArray, NumResources);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9Ex_SetMaximumFrameLatency(self: *const T, MaxLatency: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9Ex.VTable, self.vtable).SetMaximumFrameLatency(@ptrCast(*const IDirect3DDevice9Ex, self), MaxLatency);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9Ex_GetMaximumFrameLatency(self: *const T, pMaxLatency: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9Ex.VTable, self.vtable).GetMaximumFrameLatency(@ptrCast(*const IDirect3DDevice9Ex, self), pMaxLatency);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9Ex_CheckDeviceState(self: *const T, hDestinationWindow: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9Ex.VTable, self.vtable).CheckDeviceState(@ptrCast(*const IDirect3DDevice9Ex, self), hDestinationWindow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9Ex_CreateRenderTargetEx(self: *const T, Width: u32, Height: u32, Format: D3DFORMAT, MultiSample: D3DMULTISAMPLE_TYPE, MultisampleQuality: u32, Lockable: BOOL, ppSurface: **IDirect3DSurface9, pSharedHandle: *HANDLE, Usage: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9Ex.VTable, self.vtable).CreateRenderTargetEx(@ptrCast(*const IDirect3DDevice9Ex, self), Width, Height, Format, MultiSample, MultisampleQuality, Lockable, ppSurface, pSharedHandle, Usage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9Ex_CreateOffscreenPlainSurfaceEx(self: *const T, Width: u32, Height: u32, Format: D3DFORMAT, Pool: D3DPOOL, ppSurface: **IDirect3DSurface9, pSharedHandle: *HANDLE, Usage: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9Ex.VTable, self.vtable).CreateOffscreenPlainSurfaceEx(@ptrCast(*const IDirect3DDevice9Ex, self), Width, Height, Format, Pool, ppSurface, pSharedHandle, Usage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9Ex_CreateDepthStencilSurfaceEx(self: *const T, Width: u32, Height: u32, Format: D3DFORMAT, MultiSample: D3DMULTISAMPLE_TYPE, MultisampleQuality: u32, Discard: BOOL, ppSurface: **IDirect3DSurface9, pSharedHandle: *HANDLE, Usage: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9Ex.VTable, self.vtable).CreateDepthStencilSurfaceEx(@ptrCast(*const IDirect3DDevice9Ex, self), Width, Height, Format, MultiSample, MultisampleQuality, Discard, ppSurface, pSharedHandle, Usage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9Ex_ResetEx(self: *const T, pPresentationParameters: *D3DPRESENT_PARAMETERS, pFullscreenDisplayMode: *D3DDISPLAYMODEEX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9Ex.VTable, self.vtable).ResetEx(@ptrCast(*const IDirect3DDevice9Ex, self), pPresentationParameters, pFullscreenDisplayMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DDevice9Ex_GetDisplayModeEx(self: *const T, iSwapChain: u32, pMode: *D3DDISPLAYMODEEX, pRotation: *D3DDISPLAYROTATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DDevice9Ex.VTable, self.vtable).GetDisplayModeEx(@ptrCast(*const IDirect3DDevice9Ex, self), iSwapChain, pMode, pRotation);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirect3DSwapChain9Ex_Value = @import("../zig.zig").Guid.initString("91886caf-1c3d-4d2e-a0ab-3e4c7d8d3303");
pub const IID_IDirect3DSwapChain9Ex = &IID_IDirect3DSwapChain9Ex_Value;
pub const IDirect3DSwapChain9Ex = extern struct {
    pub const VTable = extern struct {
        base: IDirect3DSwapChain9.VTable,
        GetLastPresentCount: fn(
            self: *const IDirect3DSwapChain9Ex,
            pLastPresentCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPresentStats: fn(
            self: *const IDirect3DSwapChain9Ex,
            pPresentationStatistics: *D3DPRESENTSTATS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayModeEx: fn(
            self: *const IDirect3DSwapChain9Ex,
            pMode: *D3DDISPLAYMODEEX,
            pRotation: *D3DDISPLAYROTATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirect3DSwapChain9.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DSwapChain9Ex_GetLastPresentCount(self: *const T, pLastPresentCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DSwapChain9Ex.VTable, self.vtable).GetLastPresentCount(@ptrCast(*const IDirect3DSwapChain9Ex, self), pLastPresentCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DSwapChain9Ex_GetPresentStats(self: *const T, pPresentationStatistics: *D3DPRESENTSTATS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DSwapChain9Ex.VTable, self.vtable).GetPresentStats(@ptrCast(*const IDirect3DSwapChain9Ex, self), pPresentationStatistics);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirect3DSwapChain9Ex_GetDisplayModeEx(self: *const T, pMode: *D3DDISPLAYMODEEX, pRotation: *D3DDISPLAYROTATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirect3DSwapChain9Ex.VTable, self.vtable).GetDisplayModeEx(@ptrCast(*const IDirect3DSwapChain9Ex, self), pMode, pRotation);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (9)
//--------------------------------------------------------------------------------
pub extern "d3d9" fn Direct3DCreate9(
    SDKVersion: u32,
) callconv(@import("std").os.windows.WINAPI) *IDirect3D9;

pub extern "d3d9" fn D3DPERF_BeginEvent(
    col: u32,
    wszName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "d3d9" fn D3DPERF_EndEvent(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "d3d9" fn D3DPERF_SetMarker(
    col: u32,
    wszName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "d3d9" fn D3DPERF_SetRegion(
    col: u32,
    wszName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "d3d9" fn D3DPERF_QueryRepeatFrame(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "d3d9" fn D3DPERF_SetOptions(
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "d3d9" fn D3DPERF_GetStatus(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "d3d9" fn Direct3DCreate9Ex(
    SDKVersion: u32,
    param1: **IDirect3D9Ex,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (24)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const HDC = @import("gdi.zig").HDC;
const HMONITOR = @import("gdi.zig").HMONITOR;
const PWSTR = @import("system_services.zig").PWSTR;
const DXGI_RGBA = @import("dxgi.zig").DXGI_RGBA;
const IUnknown = @import("com.zig").IUnknown;
const D3DRECT = @import("system_services.zig").D3DRECT;
const HRESULT = @import("com.zig").HRESULT;
const D3DTRANSFORMSTATETYPE = @import("system_services.zig").D3DTRANSFORMSTATETYPE;
const D3DPRIMITIVETYPE = @import("system_services.zig").D3DPRIMITIVETYPE;
const RECT = @import("display_devices.zig").RECT;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const D3DVECTOR = @import("system_services.zig").D3DVECTOR;
const D3DSTATEBLOCKTYPE = @import("system_services.zig").D3DSTATEBLOCKTYPE;
const LUID = @import("kernel.zig").LUID;
const LARGE_INTEGER = @import("system_services.zig").LARGE_INTEGER;
const D3DRENDERSTATETYPE = @import("system_services.zig").D3DRENDERSTATETYPE;
const D3DTEXTURESTAGESTATETYPE = @import("system_services.zig").D3DTEXTURESTAGESTATETYPE;
const D3DLIGHTTYPE = @import("system_services.zig").D3DLIGHTTYPE;
const HANDLE = @import("system_services.zig").HANDLE;
const RGNDATA = @import("gdi.zig").RGNDATA;
const POINT = @import("display_devices.zig").POINT;
const PALETTEENTRY = @import("gdi.zig").PALETTEENTRY;

test {
    const constant_export_count = 0;
    const type_export_count = 126;
    const enum_value_export_count = 397;
    const com_iface_id_export_count = 20;
    const com_class_id_export_count = 0;
    const func_export_count = 9;
    const unicode_alias_count = 0;
    const import_count = 24;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (304)
//--------------------------------------------------------------------------------
pub const SIZEOF_IP4_ADDRESS : u32 = 4;
pub const IP4_ADDRESS_STRING_LENGTH : u32 = 16;
pub const IP4_ADDRESS_STRING_BUFFER_LENGTH : u32 = 16;
pub const DNS_ADDR_MAX_SOCKADDR_LENGTH : u32 = 32;
pub const IP6_ADDRESS_STRING_LENGTH : u32 = 65;
pub const IP6_ADDRESS_STRING_BUFFER_LENGTH : u32 = 65;
pub const DNS_PORT_HOST_ORDER : u32 = 53;
pub const DNS_PORT_NET_ORDER : u32 = 13568;
pub const DNS_RFC_MAX_UDP_PACKET_LENGTH : u32 = 512;
pub const DNS_MAX_NAME_LENGTH : u32 = 255;
pub const DNS_MAX_LABEL_LENGTH : u32 = 63;
pub const DNS_MAX_NAME_BUFFER_LENGTH : u32 = 256;
pub const DNS_MAX_LABEL_BUFFER_LENGTH : u32 = 64;
pub const DNS_MAX_IP6_REVERSE_NAME_LENGTH : u32 = 75;
pub const DNS_MAX_TEXT_STRING_LENGTH : u32 = 255;
pub const DNS_COMPRESSED_QUESTION_NAME : u32 = 49164;
pub const DNS_OPCODE_QUERY : u32 = 0;
pub const DNS_OPCODE_IQUERY : u32 = 1;
pub const DNS_OPCODE_SERVER_STATUS : u32 = 2;
pub const DNS_OPCODE_UNKNOWN : u32 = 3;
pub const DNS_OPCODE_NOTIFY : u32 = 4;
pub const DNS_OPCODE_UPDATE : u32 = 5;
pub const DNS_RCODE_NOERROR : u32 = 0;
pub const DNS_RCODE_FORMERR : u32 = 1;
pub const DNS_RCODE_SERVFAIL : u32 = 2;
pub const DNS_RCODE_NXDOMAIN : u32 = 3;
pub const DNS_RCODE_NOTIMPL : u32 = 4;
pub const DNS_RCODE_REFUSED : u32 = 5;
pub const DNS_RCODE_YXDOMAIN : u32 = 6;
pub const DNS_RCODE_YXRRSET : u32 = 7;
pub const DNS_RCODE_NXRRSET : u32 = 8;
pub const DNS_RCODE_NOTAUTH : u32 = 9;
pub const DNS_RCODE_NOTZONE : u32 = 10;
pub const DNS_RCODE_MAX : u32 = 15;
pub const DNS_RCODE_BADVERS : u32 = 16;
pub const DNS_RCODE_BADSIG : u32 = 16;
pub const DNS_RCODE_BADKEY : u32 = 17;
pub const DNS_RCODE_BADTIME : u32 = 18;
pub const DNS_CLASS_INTERNET : u32 = 1;
pub const DNS_CLASS_CSNET : u32 = 2;
pub const DNS_CLASS_CHAOS : u32 = 3;
pub const DNS_CLASS_HESIOD : u32 = 4;
pub const DNS_CLASS_NONE : u32 = 254;
pub const DNS_CLASS_ALL : u32 = 255;
pub const DNS_CLASS_ANY : u32 = 255;
pub const DNS_CLASS_UNICAST_RESPONSE : u32 = 32768;
pub const DNS_RCLASS_INTERNET : u32 = 256;
pub const DNS_RCLASS_CSNET : u32 = 512;
pub const DNS_RCLASS_CHAOS : u32 = 768;
pub const DNS_RCLASS_HESIOD : u32 = 1024;
pub const DNS_RCLASS_NONE : u32 = 65024;
pub const DNS_RCLASS_ALL : u32 = 65280;
pub const DNS_RCLASS_ANY : u32 = 65280;
pub const DNS_RCLASS_UNICAST_RESPONSE : u32 = 128;
pub const DNS_TYPE_ZERO : u32 = 0;
pub const DNS_TYPE_A : u32 = 1;
pub const DNS_TYPE_NS : u32 = 2;
pub const DNS_TYPE_MD : u32 = 3;
pub const DNS_TYPE_MF : u32 = 4;
pub const DNS_TYPE_CNAME : u32 = 5;
pub const DNS_TYPE_SOA : u32 = 6;
pub const DNS_TYPE_MB : u32 = 7;
pub const DNS_TYPE_MG : u32 = 8;
pub const DNS_TYPE_MR : u32 = 9;
pub const DNS_TYPE_NULL : u32 = 10;
pub const DNS_TYPE_WKS : u32 = 11;
pub const DNS_TYPE_PTR : u32 = 12;
pub const DNS_TYPE_HINFO : u32 = 13;
pub const DNS_TYPE_MINFO : u32 = 14;
pub const DNS_TYPE_MX : u32 = 15;
pub const DNS_TYPE_TEXT : u32 = 16;
pub const DNS_TYPE_RP : u32 = 17;
pub const DNS_TYPE_AFSDB : u32 = 18;
pub const DNS_TYPE_X25 : u32 = 19;
pub const DNS_TYPE_ISDN : u32 = 20;
pub const DNS_TYPE_RT : u32 = 21;
pub const DNS_TYPE_NSAP : u32 = 22;
pub const DNS_TYPE_NSAPPTR : u32 = 23;
pub const DNS_TYPE_SIG : u32 = 24;
pub const DNS_TYPE_KEY : u32 = 25;
pub const DNS_TYPE_PX : u32 = 26;
pub const DNS_TYPE_GPOS : u32 = 27;
pub const DNS_TYPE_AAAA : u32 = 28;
pub const DNS_TYPE_LOC : u32 = 29;
pub const DNS_TYPE_NXT : u32 = 30;
pub const DNS_TYPE_EID : u32 = 31;
pub const DNS_TYPE_NIMLOC : u32 = 32;
pub const DNS_TYPE_SRV : u32 = 33;
pub const DNS_TYPE_ATMA : u32 = 34;
pub const DNS_TYPE_NAPTR : u32 = 35;
pub const DNS_TYPE_KX : u32 = 36;
pub const DNS_TYPE_CERT : u32 = 37;
pub const DNS_TYPE_A6 : u32 = 38;
pub const DNS_TYPE_DNAME : u32 = 39;
pub const DNS_TYPE_SINK : u32 = 40;
pub const DNS_TYPE_OPT : u32 = 41;
pub const DNS_TYPE_DS : u32 = 43;
pub const DNS_TYPE_RRSIG : u32 = 46;
pub const DNS_TYPE_NSEC : u32 = 47;
pub const DNS_TYPE_DNSKEY : u32 = 48;
pub const DNS_TYPE_DHCID : u32 = 49;
pub const DNS_TYPE_NSEC3 : u32 = 50;
pub const DNS_TYPE_NSEC3PARAM : u32 = 51;
pub const DNS_TYPE_TLSA : u32 = 52;
pub const DNS_TYPE_UINFO : u32 = 100;
pub const DNS_TYPE_UID : u32 = 101;
pub const DNS_TYPE_GID : u32 = 102;
pub const DNS_TYPE_UNSPEC : u32 = 103;
pub const DNS_TYPE_ADDRS : u32 = 248;
pub const DNS_TYPE_TKEY : u32 = 249;
pub const DNS_TYPE_TSIG : u32 = 250;
pub const DNS_TYPE_IXFR : u32 = 251;
pub const DNS_TYPE_AXFR : u32 = 252;
pub const DNS_TYPE_MAILB : u32 = 253;
pub const DNS_TYPE_MAILA : u32 = 254;
pub const DNS_TYPE_ALL : u32 = 255;
pub const DNS_TYPE_ANY : u32 = 255;
pub const DNS_TYPE_WINS : u32 = 65281;
pub const DNS_TYPE_WINSR : u32 = 65282;
pub const DNS_RTYPE_A : u32 = 256;
pub const DNS_RTYPE_NS : u32 = 512;
pub const DNS_RTYPE_MD : u32 = 768;
pub const DNS_RTYPE_MF : u32 = 1024;
pub const DNS_RTYPE_CNAME : u32 = 1280;
pub const DNS_RTYPE_SOA : u32 = 1536;
pub const DNS_RTYPE_MB : u32 = 1792;
pub const DNS_RTYPE_MG : u32 = 2048;
pub const DNS_RTYPE_MR : u32 = 2304;
pub const DNS_RTYPE_NULL : u32 = 2560;
pub const DNS_RTYPE_WKS : u32 = 2816;
pub const DNS_RTYPE_PTR : u32 = 3072;
pub const DNS_RTYPE_HINFO : u32 = 3328;
pub const DNS_RTYPE_MINFO : u32 = 3584;
pub const DNS_RTYPE_MX : u32 = 3840;
pub const DNS_RTYPE_TEXT : u32 = 4096;
pub const DNS_RTYPE_RP : u32 = 4352;
pub const DNS_RTYPE_AFSDB : u32 = 4608;
pub const DNS_RTYPE_X25 : u32 = 4864;
pub const DNS_RTYPE_ISDN : u32 = 5120;
pub const DNS_RTYPE_RT : u32 = 5376;
pub const DNS_RTYPE_NSAP : u32 = 5632;
pub const DNS_RTYPE_NSAPPTR : u32 = 5888;
pub const DNS_RTYPE_SIG : u32 = 6144;
pub const DNS_RTYPE_KEY : u32 = 6400;
pub const DNS_RTYPE_PX : u32 = 6656;
pub const DNS_RTYPE_GPOS : u32 = 6912;
pub const DNS_RTYPE_AAAA : u32 = 7168;
pub const DNS_RTYPE_LOC : u32 = 7424;
pub const DNS_RTYPE_NXT : u32 = 7680;
pub const DNS_RTYPE_EID : u32 = 7936;
pub const DNS_RTYPE_NIMLOC : u32 = 8192;
pub const DNS_RTYPE_SRV : u32 = 8448;
pub const DNS_RTYPE_ATMA : u32 = 8704;
pub const DNS_RTYPE_NAPTR : u32 = 8960;
pub const DNS_RTYPE_KX : u32 = 9216;
pub const DNS_RTYPE_CERT : u32 = 9472;
pub const DNS_RTYPE_A6 : u32 = 9728;
pub const DNS_RTYPE_DNAME : u32 = 9984;
pub const DNS_RTYPE_SINK : u32 = 10240;
pub const DNS_RTYPE_OPT : u32 = 10496;
pub const DNS_RTYPE_DS : u32 = 11008;
pub const DNS_RTYPE_RRSIG : u32 = 11776;
pub const DNS_RTYPE_NSEC : u32 = 12032;
pub const DNS_RTYPE_DNSKEY : u32 = 12288;
pub const DNS_RTYPE_DHCID : u32 = 12544;
pub const DNS_RTYPE_NSEC3 : u32 = 12800;
pub const DNS_RTYPE_NSEC3PARAM : u32 = 13056;
pub const DNS_RTYPE_TLSA : u32 = 13312;
pub const DNS_RTYPE_UINFO : u32 = 25600;
pub const DNS_RTYPE_UID : u32 = 25856;
pub const DNS_RTYPE_GID : u32 = 26112;
pub const DNS_RTYPE_UNSPEC : u32 = 26368;
pub const DNS_RTYPE_TKEY : u32 = 63744;
pub const DNS_RTYPE_TSIG : u32 = 64000;
pub const DNS_RTYPE_IXFR : u32 = 64256;
pub const DNS_RTYPE_AXFR : u32 = 64512;
pub const DNS_RTYPE_MAILB : u32 = 64768;
pub const DNS_RTYPE_MAILA : u32 = 65024;
pub const DNS_RTYPE_ALL : u32 = 65280;
pub const DNS_RTYPE_ANY : u32 = 65280;
pub const DNS_RTYPE_WINS : u32 = 511;
pub const DNS_RTYPE_WINSR : u32 = 767;
pub const DNS_ATMA_FORMAT_E164 : u32 = 1;
pub const DNS_ATMA_FORMAT_AESA : u32 = 2;
pub const DNS_ATMA_MAX_ADDR_LENGTH : u32 = 20;
pub const DNS_ATMA_AESA_ADDR_LENGTH : u32 = 20;
pub const DNSSEC_ALGORITHM_RSAMD5 : u32 = 1;
pub const DNSSEC_ALGORITHM_RSASHA1 : u32 = 5;
pub const DNSSEC_ALGORITHM_RSASHA1_NSEC3 : u32 = 7;
pub const DNSSEC_ALGORITHM_RSASHA256 : u32 = 8;
pub const DNSSEC_ALGORITHM_RSASHA512 : u32 = 10;
pub const DNSSEC_ALGORITHM_ECDSAP256_SHA256 : u32 = 13;
pub const DNSSEC_ALGORITHM_ECDSAP384_SHA384 : u32 = 14;
pub const DNSSEC_ALGORITHM_NULL : u32 = 253;
pub const DNSSEC_ALGORITHM_PRIVATE : u32 = 254;
pub const DNSSEC_DIGEST_ALGORITHM_SHA1 : u32 = 1;
pub const DNSSEC_DIGEST_ALGORITHM_SHA256 : u32 = 2;
pub const DNSSEC_DIGEST_ALGORITHM_SHA384 : u32 = 4;
pub const DNSSEC_PROTOCOL_NONE : u32 = 0;
pub const DNSSEC_PROTOCOL_TLS : u32 = 1;
pub const DNSSEC_PROTOCOL_EMAIL : u32 = 2;
pub const DNSSEC_PROTOCOL_DNSSEC : u32 = 3;
pub const DNSSEC_PROTOCOL_IPSEC : u32 = 4;
pub const DNSSEC_KEY_FLAG_NOAUTH : u32 = 1;
pub const DNSSEC_KEY_FLAG_NOCONF : u32 = 2;
pub const DNSSEC_KEY_FLAG_FLAG2 : u32 = 4;
pub const DNSSEC_KEY_FLAG_EXTEND : u32 = 8;
pub const DNSSEC_KEY_FLAG_FLAG4 : u32 = 16;
pub const DNSSEC_KEY_FLAG_FLAG5 : u32 = 32;
pub const DNSSEC_KEY_FLAG_USER : u32 = 0;
pub const DNSSEC_KEY_FLAG_ZONE : u32 = 64;
pub const DNSSEC_KEY_FLAG_HOST : u32 = 128;
pub const DNSSEC_KEY_FLAG_NTPE3 : u32 = 192;
pub const DNSSEC_KEY_FLAG_FLAG8 : u32 = 256;
pub const DNSSEC_KEY_FLAG_FLAG9 : u32 = 512;
pub const DNSSEC_KEY_FLAG_FLAG10 : u32 = 1024;
pub const DNSSEC_KEY_FLAG_FLAG11 : u32 = 2048;
pub const DNSSEC_KEY_FLAG_SIG0 : u32 = 0;
pub const DNSSEC_KEY_FLAG_SIG1 : u32 = 4096;
pub const DNSSEC_KEY_FLAG_SIG2 : u32 = 8192;
pub const DNSSEC_KEY_FLAG_SIG3 : u32 = 12288;
pub const DNSSEC_KEY_FLAG_SIG4 : u32 = 16384;
pub const DNSSEC_KEY_FLAG_SIG5 : u32 = 20480;
pub const DNSSEC_KEY_FLAG_SIG6 : u32 = 24576;
pub const DNSSEC_KEY_FLAG_SIG7 : u32 = 28672;
pub const DNSSEC_KEY_FLAG_SIG8 : u32 = 32768;
pub const DNSSEC_KEY_FLAG_SIG9 : u32 = 36864;
pub const DNSSEC_KEY_FLAG_SIG10 : u32 = 40960;
pub const DNSSEC_KEY_FLAG_SIG11 : u32 = 45056;
pub const DNSSEC_KEY_FLAG_SIG12 : u32 = 49152;
pub const DNSSEC_KEY_FLAG_SIG13 : u32 = 53248;
pub const DNSSEC_KEY_FLAG_SIG14 : u32 = 57344;
pub const DNSSEC_KEY_FLAG_SIG15 : u32 = 61440;
pub const DNS_TKEY_MODE_SERVER_ASSIGN : u32 = 1;
pub const DNS_TKEY_MODE_DIFFIE_HELLMAN : u32 = 2;
pub const DNS_TKEY_MODE_GSS : u32 = 3;
pub const DNS_TKEY_MODE_RESOLVER_ASSIGN : u32 = 4;
pub const DNS_WINS_FLAG_SCOPE : u32 = 2147483648;
pub const DNS_WINS_FLAG_LOCAL : u32 = 65536;
pub const DNS_CONFIG_FLAG_ALLOC : u32 = 1;
pub const DNSREC_SECTION : u32 = 3;
pub const DNSREC_QUESTION : u32 = 0;
pub const DNSREC_ANSWER : u32 = 1;
pub const DNSREC_AUTHORITY : u32 = 2;
pub const DNSREC_ADDITIONAL : u32 = 3;
pub const DNSREC_ZONE : u32 = 0;
pub const DNSREC_PREREQ : u32 = 1;
pub const DNSREC_UPDATE : u32 = 2;
pub const DNSREC_DELETE : u32 = 4;
pub const DNSREC_NOEXIST : u32 = 4;
pub const DNS_QUERY_STANDARD : u32 = 0;
pub const DNS_QUERY_ACCEPT_TRUNCATED_RESPONSE : u32 = 1;
pub const DNS_QUERY_USE_TCP_ONLY : u32 = 2;
pub const DNS_QUERY_NO_RECURSION : u32 = 4;
pub const DNS_QUERY_BYPASS_CACHE : u32 = 8;
pub const DNS_QUERY_NO_WIRE_QUERY : u32 = 16;
pub const DNS_QUERY_NO_LOCAL_NAME : u32 = 32;
pub const DNS_QUERY_NO_HOSTS_FILE : u32 = 64;
pub const DNS_QUERY_NO_NETBT : u32 = 128;
pub const DNS_QUERY_WIRE_ONLY : u32 = 256;
pub const DNS_QUERY_RETURN_MESSAGE : u32 = 512;
pub const DNS_QUERY_MULTICAST_ONLY : u32 = 1024;
pub const DNS_QUERY_NO_MULTICAST : u32 = 2048;
pub const DNS_QUERY_TREAT_AS_FQDN : u32 = 4096;
pub const DNS_QUERY_ADDRCONFIG : u32 = 8192;
pub const DNS_QUERY_DUAL_ADDR : u32 = 16384;
pub const DNS_QUERY_DONT_RESET_TTL_VALUES : u32 = 1048576;
pub const DNS_QUERY_DISABLE_IDN_ENCODING : u32 = 2097152;
pub const DNS_QUERY_APPEND_MULTILABEL : u32 = 8388608;
pub const DNS_QUERY_DNSSEC_OK : u32 = 16777216;
pub const DNS_QUERY_DNSSEC_CHECKING_DISABLED : u32 = 33554432;
pub const DNS_QUERY_RESERVED : u32 = 4026531840;
pub const DNS_QUERY_RESULTS_VERSION1 : u32 = 1;
pub const DNS_QUERY_REQUEST_VERSION1 : u32 = 1;
pub const DNS_UPDATE_SECURITY_USE_DEFAULT : u32 = 0;
pub const DNS_UPDATE_SECURITY_OFF : u32 = 16;
pub const DNS_UPDATE_SECURITY_ON : u32 = 32;
pub const DNS_UPDATE_SECURITY_ONLY : u32 = 256;
pub const DNS_UPDATE_CACHE_SECURITY_CONTEXT : u32 = 512;
pub const DNS_UPDATE_TEST_USE_LOCAL_SYS_ACCT : u32 = 1024;
pub const DNS_UPDATE_FORCE_SECURITY_NEGO : u32 = 2048;
pub const DNS_UPDATE_TRY_ALL_MASTER_SERVERS : u32 = 4096;
pub const DNS_UPDATE_SKIP_NO_UPDATE_ADAPTERS : u32 = 8192;
pub const DNS_UPDATE_REMOTE_SERVER : u32 = 16384;
pub const DNS_UPDATE_RESERVED : u32 = 4294901760;
pub const DNS_VALSVR_ERROR_INVALID_ADDR : u32 = 1;
pub const DNS_VALSVR_ERROR_INVALID_NAME : u32 = 2;
pub const DNS_VALSVR_ERROR_UNREACHABLE : u32 = 3;
pub const DNS_VALSVR_ERROR_NO_RESPONSE : u32 = 4;
pub const DNS_VALSVR_ERROR_NO_AUTH : u32 = 5;
pub const DNS_VALSVR_ERROR_REFUSED : u32 = 6;
pub const DNS_VALSVR_ERROR_NO_TCP : u32 = 16;
pub const DNS_VALSVR_ERROR_UNKNOWN : u32 = 255;
pub const DNS_CONNECTION_NAME_MAX_LENGTH : u32 = 64;
pub const DNS_CONNECTION_PROXY_INFO_CURRENT_VERSION : u32 = 1;
pub const DNS_CONNECTION_PROXY_INFO_SERVER_MAX_LENGTH : u32 = 256;
pub const DNS_CONNECTION_PROXY_INFO_FRIENDLY_NAME_MAX_LENGTH : u32 = 64;
pub const DNS_CONNECTION_PROXY_INFO_USERNAME_MAX_LENGTH : u32 = 128;
pub const DNS_CONNECTION_PROXY_INFO_PASSWORD_MAX_LENGTH : u32 = 128;
pub const DNS_CONNECTION_PROXY_INFO_EXCEPTION_MAX_LENGTH : u32 = 1024;
pub const DNS_CONNECTION_PROXY_INFO_EXTRA_INFO_MAX_LENGTH : u32 = 1024;
pub const DNS_CONNECTION_PROXY_INFO_FLAG_DISABLED : u32 = 1;
pub const DNS_CONNECTION_PROXY_INFO_FLAG_BYPASSLOCAL : u32 = 2;
pub const DNS_CONNECTION_POLICY_ENTRY_ONDEMAND : u32 = 1;

//--------------------------------------------------------------------------------
// Section: Types (98)
//--------------------------------------------------------------------------------
// TODO: this type has a FreeFunc 'DnsReleaseContextHandle', what can Zig do with this information?
pub const DnsContextHandle = ?*c_void;

pub const IP4_ARRAY = extern struct {
    AddrCount: u32,
    AddrArray: [1]u32,
};

pub const IP6_ADDRESS = u32; // TODO: implement StructOrUnion types?

pub const DNS_ADDR = extern struct {
    MaxSa: [32]i8,
    Data: DNS_ADDR._Data_e__Union,
    const _Data_e__Union = u32; // TODO: generate this nested type!
};

pub const DNS_ADDR_ARRAY = extern struct {
    MaxCount: u32,
    AddrCount: u32,
    Tag: u32,
    Family: u16,
    WordReserved: u16,
    Flags: u32,
    MatchFlag: u32,
    Reserved1: u32,
    Reserved2: u32,
    AddrArray: [1]DNS_ADDR,
};

pub const DNS_HEADER = extern struct {
    Xid: u16,
    _bitfield1: u8,
    _bitfield2: u8,
    QuestionCount: u16,
    AnswerCount: u16,
    NameServerCount: u16,
    AdditionalCount: u16,
};

pub const DNS_HEADER_EXT = extern struct {
    _bitfield: u16,
    chRcode: u8,
    chVersion: u8,
};

pub const DNS_WIRE_QUESTION = extern struct {
    QuestionType: u16,
    QuestionClass: u16,
};

pub const DNS_WIRE_RECORD = extern struct {
    RecordType: u16,
    RecordClass: u16,
    TimeToLive: u32,
    DataLength: u16,
};

pub const DNS_CONFIG_TYPE = extern enum(i32) {
    PrimaryDomainName_W = 0,
    PrimaryDomainName_A = 1,
    PrimaryDomainName_UTF8 = 2,
    AdapterDomainName_W = 3,
    AdapterDomainName_A = 4,
    AdapterDomainName_UTF8 = 5,
    DnsServerList = 6,
    SearchList = 7,
    AdapterInfo = 8,
    PrimaryHostNameRegistrationEnabled = 9,
    AdapterHostNameRegistrationEnabled = 10,
    AddressRegistrationMaxCount = 11,
    HostName_W = 12,
    HostName_A = 13,
    HostName_UTF8 = 14,
    FullHostName_W = 15,
    FullHostName_A = 16,
    FullHostName_UTF8 = 17,
    NameServer = 18,
};
pub const DnsConfigPrimaryDomainName_W = DNS_CONFIG_TYPE.PrimaryDomainName_W;
pub const DnsConfigPrimaryDomainName_A = DNS_CONFIG_TYPE.PrimaryDomainName_A;
pub const DnsConfigPrimaryDomainName_UTF8 = DNS_CONFIG_TYPE.PrimaryDomainName_UTF8;
pub const DnsConfigAdapterDomainName_W = DNS_CONFIG_TYPE.AdapterDomainName_W;
pub const DnsConfigAdapterDomainName_A = DNS_CONFIG_TYPE.AdapterDomainName_A;
pub const DnsConfigAdapterDomainName_UTF8 = DNS_CONFIG_TYPE.AdapterDomainName_UTF8;
pub const DnsConfigDnsServerList = DNS_CONFIG_TYPE.DnsServerList;
pub const DnsConfigSearchList = DNS_CONFIG_TYPE.SearchList;
pub const DnsConfigAdapterInfo = DNS_CONFIG_TYPE.AdapterInfo;
pub const DnsConfigPrimaryHostNameRegistrationEnabled = DNS_CONFIG_TYPE.PrimaryHostNameRegistrationEnabled;
pub const DnsConfigAdapterHostNameRegistrationEnabled = DNS_CONFIG_TYPE.AdapterHostNameRegistrationEnabled;
pub const DnsConfigAddressRegistrationMaxCount = DNS_CONFIG_TYPE.AddressRegistrationMaxCount;
pub const DnsConfigHostName_W = DNS_CONFIG_TYPE.HostName_W;
pub const DnsConfigHostName_A = DNS_CONFIG_TYPE.HostName_A;
pub const DnsConfigHostName_UTF8 = DNS_CONFIG_TYPE.HostName_UTF8;
pub const DnsConfigFullHostName_W = DNS_CONFIG_TYPE.FullHostName_W;
pub const DnsConfigFullHostName_A = DNS_CONFIG_TYPE.FullHostName_A;
pub const DnsConfigFullHostName_UTF8 = DNS_CONFIG_TYPE.FullHostName_UTF8;
pub const DnsConfigNameServer = DNS_CONFIG_TYPE.NameServer;

pub const DNS_A_DATA = extern struct {
    IpAddress: u32,
};

pub const DNS_PTR_DATAW = extern struct {
    pNameHost: PWSTR,
};

pub const DNS_PTR_DATAA = extern struct {
    pNameHost: PSTR,
};

pub const DNS_SOA_DATAW = extern struct {
    pNamePrimaryServer: PWSTR,
    pNameAdministrator: PWSTR,
    dwSerialNo: u32,
    dwRefresh: u32,
    dwRetry: u32,
    dwExpire: u32,
    dwDefaultTtl: u32,
};

pub const DNS_SOA_DATAA = extern struct {
    pNamePrimaryServer: PSTR,
    pNameAdministrator: PSTR,
    dwSerialNo: u32,
    dwRefresh: u32,
    dwRetry: u32,
    dwExpire: u32,
    dwDefaultTtl: u32,
};

pub const DNS_MINFO_DATAW = extern struct {
    pNameMailbox: PWSTR,
    pNameErrorsMailbox: PWSTR,
};

pub const DNS_MINFO_DATAA = extern struct {
    pNameMailbox: PSTR,
    pNameErrorsMailbox: PSTR,
};

pub const DNS_MX_DATAW = extern struct {
    pNameExchange: PWSTR,
    wPreference: u16,
    Pad: u16,
};

pub const DNS_MX_DATAA = extern struct {
    pNameExchange: PSTR,
    wPreference: u16,
    Pad: u16,
};

pub const DNS_TXT_DATAW = extern struct {
    dwStringCount: u32,
    pStringArray: [1]*u16,
};

pub const DNS_TXT_DATAA = extern struct {
    dwStringCount: u32,
    pStringArray: [1]*i8,
};

pub const DNS_NULL_DATA = extern struct {
    dwByteCount: u32,
    Data: [1]u8,
};

pub const DNS_WKS_DATA = extern struct {
    IpAddress: u32,
    chProtocol: u8,
    BitMask: [1]u8,
};

pub const DNS_AAAA_DATA = extern struct {
    Ip6Address: IP6_ADDRESS,
};

pub const DNS_SIG_DATAW = extern struct {
    wTypeCovered: u16,
    chAlgorithm: u8,
    chLabelCount: u8,
    dwOriginalTtl: u32,
    dwExpiration: u32,
    dwTimeSigned: u32,
    wKeyTag: u16,
    wSignatureLength: u16,
    pNameSigner: PWSTR,
    Signature: [1]u8,
};

pub const DNS_SIG_DATAA = extern struct {
    wTypeCovered: u16,
    chAlgorithm: u8,
    chLabelCount: u8,
    dwOriginalTtl: u32,
    dwExpiration: u32,
    dwTimeSigned: u32,
    wKeyTag: u16,
    wSignatureLength: u16,
    pNameSigner: PSTR,
    Signature: [1]u8,
};

pub const DNS_KEY_DATA = extern struct {
    wFlags: u16,
    chProtocol: u8,
    chAlgorithm: u8,
    wKeyLength: u16,
    wPad: u16,
    Key: [1]u8,
};

pub const DNS_DHCID_DATA = extern struct {
    dwByteCount: u32,
    DHCID: [1]u8,
};

pub const DNS_NSEC_DATAW = extern struct {
    pNextDomainName: PWSTR,
    wTypeBitMapsLength: u16,
    wPad: u16,
    TypeBitMaps: [1]u8,
};

pub const DNS_NSEC_DATAA = extern struct {
    pNextDomainName: PSTR,
    wTypeBitMapsLength: u16,
    wPad: u16,
    TypeBitMaps: [1]u8,
};

pub const DNS_NSEC3_DATA = extern struct {
    chAlgorithm: u8,
    bFlags: u8,
    wIterations: u16,
    bSaltLength: u8,
    bHashLength: u8,
    wTypeBitMapsLength: u16,
    chData: [1]u8,
};

pub const DNS_NSEC3PARAM_DATA = extern struct {
    chAlgorithm: u8,
    bFlags: u8,
    wIterations: u16,
    bSaltLength: u8,
    bPad: [3]u8,
    pbSalt: [1]u8,
};

pub const DNS_TLSA_DATA = extern struct {
    bCertUsage: u8,
    bSelector: u8,
    bMatchingType: u8,
    bCertificateAssociationDataLength: u16,
    bPad: [3]u8,
    bCertificateAssociationData: [1]u8,
};

pub const DNS_DS_DATA = extern struct {
    wKeyTag: u16,
    chAlgorithm: u8,
    chDigestType: u8,
    wDigestLength: u16,
    wPad: u16,
    Digest: [1]u8,
};

pub const DNS_OPT_DATA = extern struct {
    wDataLength: u16,
    wPad: u16,
    Data: [1]u8,
};

pub const DNS_LOC_DATA = extern struct {
    wVersion: u16,
    wSize: u16,
    wHorPrec: u16,
    wVerPrec: u16,
    dwLatitude: u32,
    dwLongitude: u32,
    dwAltitude: u32,
};

pub const DNS_NXT_DATAW = extern struct {
    pNameNext: PWSTR,
    wNumTypes: u16,
    wTypes: [1]u16,
};

pub const DNS_NXT_DATAA = extern struct {
    pNameNext: PSTR,
    wNumTypes: u16,
    wTypes: [1]u16,
};

pub const DNS_SRV_DATAW = extern struct {
    pNameTarget: PWSTR,
    wPriority: u16,
    wWeight: u16,
    wPort: u16,
    Pad: u16,
};

pub const DNS_SRV_DATAA = extern struct {
    pNameTarget: PSTR,
    wPriority: u16,
    wWeight: u16,
    wPort: u16,
    Pad: u16,
};

pub const DNS_NAPTR_DATAW = extern struct {
    wOrder: u16,
    wPreference: u16,
    pFlags: PWSTR,
    pService: PWSTR,
    pRegularExpression: PWSTR,
    pReplacement: PWSTR,
};

pub const DNS_NAPTR_DATAA = extern struct {
    wOrder: u16,
    wPreference: u16,
    pFlags: PSTR,
    pService: PSTR,
    pRegularExpression: PSTR,
    pReplacement: PSTR,
};

pub const DNS_ATMA_DATA = extern struct {
    AddressType: u8,
    Address: [20]u8,
};

pub const DNS_TKEY_DATAW = extern struct {
    pNameAlgorithm: PWSTR,
    pAlgorithmPacket: *u8,
    pKey: *u8,
    pOtherData: *u8,
    dwCreateTime: u32,
    dwExpireTime: u32,
    wMode: u16,
    wError: u16,
    wKeyLength: u16,
    wOtherLength: u16,
    cAlgNameLength: u8,
    bPacketPointers: BOOL,
};

pub const DNS_TKEY_DATAA = extern struct {
    pNameAlgorithm: PSTR,
    pAlgorithmPacket: *u8,
    pKey: *u8,
    pOtherData: *u8,
    dwCreateTime: u32,
    dwExpireTime: u32,
    wMode: u16,
    wError: u16,
    wKeyLength: u16,
    wOtherLength: u16,
    cAlgNameLength: u8,
    bPacketPointers: BOOL,
};

pub const DNS_TSIG_DATAW = extern struct {
    pNameAlgorithm: PWSTR,
    pAlgorithmPacket: *u8,
    pSignature: *u8,
    pOtherData: *u8,
    i64CreateTime: i64,
    wFudgeTime: u16,
    wOriginalXid: u16,
    wError: u16,
    wSigLength: u16,
    wOtherLength: u16,
    cAlgNameLength: u8,
    bPacketPointers: BOOL,
};

pub const DNS_TSIG_DATAA = extern struct {
    pNameAlgorithm: PSTR,
    pAlgorithmPacket: *u8,
    pSignature: *u8,
    pOtherData: *u8,
    i64CreateTime: i64,
    wFudgeTime: u16,
    wOriginalXid: u16,
    wError: u16,
    wSigLength: u16,
    wOtherLength: u16,
    cAlgNameLength: u8,
    bPacketPointers: BOOL,
};

pub const DNS_UNKNOWN_DATA = extern struct {
    dwByteCount: u32,
    bData: [1]u8,
};

pub const DNS_WINS_DATA = extern struct {
    dwMappingFlag: u32,
    dwLookupTimeout: u32,
    dwCacheTimeout: u32,
    cWinsServerCount: u32,
    WinsServers: [1]u32,
};

pub const DNS_WINSR_DATAW = extern struct {
    dwMappingFlag: u32,
    dwLookupTimeout: u32,
    dwCacheTimeout: u32,
    pNameResultDomain: PWSTR,
};

pub const DNS_WINSR_DATAA = extern struct {
    dwMappingFlag: u32,
    dwLookupTimeout: u32,
    dwCacheTimeout: u32,
    pNameResultDomain: PSTR,
};

pub const DNS_RECORD_FLAGS = extern struct {
    _bitfield: u32,
};

pub const DNS_SECTION = extern enum(i32) {
    Question = 0,
    Answer = 1,
    Authority = 2,
    Addtional = 3,
};
pub const DnsSectionQuestion = DNS_SECTION.Question;
pub const DnsSectionAnswer = DNS_SECTION.Answer;
pub const DnsSectionAuthority = DNS_SECTION.Authority;
pub const DnsSectionAddtional = DNS_SECTION.Addtional;

pub const DNS_RECORDW = extern struct {
    pNext: *DNS_RECORDW,
    pName: PWSTR,
    wType: u16,
    wDataLength: u16,
    Flags: DNS_RECORDW._Flags_e__Union,
    dwTtl: u32,
    dwReserved: u32,
    Data: DNS_RECORDW._Data_e__Union,
    const _Flags_e__Union = u32; // TODO: generate this nested type!
    const _Data_e__Union = u32; // TODO: generate this nested type!
};

pub const _DnsRecordOptW = extern struct {
    pNext: *DNS_RECORDW,
    pName: PWSTR,
    wType: u16,
    wDataLength: u16,
    Flags: _DnsRecordOptW._Flags_e__Union,
    ExtHeader: DNS_HEADER_EXT,
    wPayloadSize: u16,
    wReserved: u16,
    Data: _DnsRecordOptW._Data_e__Union,
    const _Flags_e__Union = u32; // TODO: generate this nested type!
    const _Data_e__Union = u32; // TODO: generate this nested type!
};

pub const DNS_RECORDA = extern struct {
    pNext: *DNS_RECORDA,
    pName: PSTR,
    wType: u16,
    wDataLength: u16,
    Flags: DNS_RECORDA._Flags_e__Union,
    dwTtl: u32,
    dwReserved: u32,
    Data: DNS_RECORDA._Data_e__Union,
    const _Flags_e__Union = u32; // TODO: generate this nested type!
    const _Data_e__Union = u32; // TODO: generate this nested type!
};

pub const _DnsRecordOptA = extern struct {
    pNext: *DNS_RECORDA,
    pName: PSTR,
    wType: u16,
    wDataLength: u16,
    Flags: _DnsRecordOptA._Flags_e__Union,
    ExtHeader: DNS_HEADER_EXT,
    wPayloadSize: u16,
    wReserved: u16,
    Data: _DnsRecordOptA._Data_e__Union,
    const _Flags_e__Union = u32; // TODO: generate this nested type!
    const _Data_e__Union = u32; // TODO: generate this nested type!
};

pub const DNS_RRSET = extern struct {
    pFirstRR: *DNS_RECORDA,
    pLastRR: *DNS_RECORDA,
};

pub const DNS_PROXY_COMPLETION_ROUTINE = fn(
    completionContext: ?*c_void,
    status: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const DNS_PROXY_INFORMATION_TYPE = extern enum(i32) {
    DIRECT = 0,
    DEFAULT_SETTINGS = 1,
    PROXY_NAME = 2,
    DOES_NOT_EXIST = 3,
};
pub const DNS_PROXY_INFORMATION_DIRECT = DNS_PROXY_INFORMATION_TYPE.DIRECT;
pub const DNS_PROXY_INFORMATION_DEFAULT_SETTINGS = DNS_PROXY_INFORMATION_TYPE.DEFAULT_SETTINGS;
pub const DNS_PROXY_INFORMATION_PROXY_NAME = DNS_PROXY_INFORMATION_TYPE.PROXY_NAME;
pub const DNS_PROXY_INFORMATION_DOES_NOT_EXIST = DNS_PROXY_INFORMATION_TYPE.DOES_NOT_EXIST;

pub const DNS_PROXY_INFORMATION = extern struct {
    version: u32,
    proxyInformationType: DNS_PROXY_INFORMATION_TYPE,
    proxyName: PWSTR,
};

pub const DNS_CHARSET = extern enum(i32) {
    Unknown = 0,
    Unicode = 1,
    Utf8 = 2,
    Ansi = 3,
};
pub const DnsCharSetUnknown = DNS_CHARSET.Unknown;
pub const DnsCharSetUnicode = DNS_CHARSET.Unicode;
pub const DnsCharSetUtf8 = DNS_CHARSET.Utf8;
pub const DnsCharSetAnsi = DNS_CHARSET.Ansi;

pub const DNS_FREE_TYPE = extern enum(i32) {
    Flat = 0,
    RecordList = 1,
    ParsedMessageFields = 2,
};
pub const DnsFreeFlat = DNS_FREE_TYPE.Flat;
pub const DnsFreeRecordList = DNS_FREE_TYPE.RecordList;
pub const DnsFreeParsedMessageFields = DNS_FREE_TYPE.ParsedMessageFields;

pub const DNS_QUERY_RESULT = extern struct {
    Version: u32,
    QueryStatus: i32,
    QueryOptions: u64,
    pQueryRecords: *DNS_RECORDA,
    Reserved: *c_void,
};

pub const DNS_QUERY_COMPLETION_ROUTINE = fn(
    pQueryContext: *c_void,
    pQueryResults: *DNS_QUERY_RESULT,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PDNS_QUERY_COMPLETION_ROUTINE = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const DNS_QUERY_REQUEST = extern struct {
    Version: u32,
    QueryName: [*:0]const u16,
    QueryType: u16,
    QueryOptions: u64,
    pDnsServerList: *DNS_ADDR_ARRAY,
    InterfaceIndex: u32,
    pQueryCompletionCallback: PDNS_QUERY_COMPLETION_ROUTINE,
    pQueryContext: *c_void,
};

pub const DNS_QUERY_CANCEL = extern struct {
    Reserved: [32]i8,
};

pub const DNS_NAME_FORMAT = extern enum(i32) {
    Domain = 0,
    DomainLabel = 1,
    HostnameFull = 2,
    HostnameLabel = 3,
    Wildcard = 4,
    SrvRecord = 5,
    ValidateTld = 6,
};
pub const DnsNameDomain = DNS_NAME_FORMAT.Domain;
pub const DnsNameDomainLabel = DNS_NAME_FORMAT.DomainLabel;
pub const DnsNameHostnameFull = DNS_NAME_FORMAT.HostnameFull;
pub const DnsNameHostnameLabel = DNS_NAME_FORMAT.HostnameLabel;
pub const DnsNameWildcard = DNS_NAME_FORMAT.Wildcard;
pub const DnsNameSrvRecord = DNS_NAME_FORMAT.SrvRecord;
pub const DnsNameValidateTld = DNS_NAME_FORMAT.ValidateTld;

pub const DNS_MESSAGE_BUFFER = extern struct {
    MessageHead: DNS_HEADER,
    MessageBody: [1]i8,
};

pub const DNS_CONNECTION_PROXY_TYPE = extern enum(i32) {
    NULL = 0,
    HTTP = 1,
    WAP = 2,
    SOCKS4 = 4,
    SOCKS5 = 5,
};
pub const DNS_CONNECTION_PROXY_TYPE_NULL = DNS_CONNECTION_PROXY_TYPE.NULL;
pub const DNS_CONNECTION_PROXY_TYPE_HTTP = DNS_CONNECTION_PROXY_TYPE.HTTP;
pub const DNS_CONNECTION_PROXY_TYPE_WAP = DNS_CONNECTION_PROXY_TYPE.WAP;
pub const DNS_CONNECTION_PROXY_TYPE_SOCKS4 = DNS_CONNECTION_PROXY_TYPE.SOCKS4;
pub const DNS_CONNECTION_PROXY_TYPE_SOCKS5 = DNS_CONNECTION_PROXY_TYPE.SOCKS5;

pub const DNS_CONNECTION_PROXY_INFO_SWITCH = extern enum(i32) {
    CONFIG = 0,
    SCRIPT = 1,
    WPAD = 2,
};
pub const DNS_CONNECTION_PROXY_INFO_SWITCH_CONFIG = DNS_CONNECTION_PROXY_INFO_SWITCH.CONFIG;
pub const DNS_CONNECTION_PROXY_INFO_SWITCH_SCRIPT = DNS_CONNECTION_PROXY_INFO_SWITCH.SCRIPT;
pub const DNS_CONNECTION_PROXY_INFO_SWITCH_WPAD = DNS_CONNECTION_PROXY_INFO_SWITCH.WPAD;

pub const DNS_CONNECTION_PROXY_INFO = extern struct {
    Version: u32,
    pwszFriendlyName: PWSTR,
    Flags: u32,
    Switch: DNS_CONNECTION_PROXY_INFO_SWITCH,
    Anonymous: DNS_CONNECTION_PROXY_INFO._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DNS_CONNECTION_PROXY_INFO_EX = extern struct {
    ProxyInfo: DNS_CONNECTION_PROXY_INFO,
    dwInterfaceIndex: u32,
    pwszConnectionName: PWSTR,
    fDirectConfiguration: BOOL,
    hConnection: HANDLE,
};

pub const DNS_CONNECTION_PROXY_ELEMENT = extern struct {
    Type: DNS_CONNECTION_PROXY_TYPE,
    Info: DNS_CONNECTION_PROXY_INFO,
};

pub const DNS_CONNECTION_PROXY_LIST = extern struct {
    cProxies: u32,
    pProxies: *DNS_CONNECTION_PROXY_ELEMENT,
};

pub const DNS_CONNECTION_NAME = extern struct {
    wszName: [65]u16,
};

pub const DNS_CONNECTION_NAME_LIST = extern struct {
    cNames: u32,
    pNames: *DNS_CONNECTION_NAME,
};

pub const DNS_CONNECTION_IFINDEX_ENTRY = extern struct {
    pwszConnectionName: [*:0]const u16,
    dwIfIndex: u32,
};

pub const DNS_CONNECTION_IFINDEX_LIST = extern struct {
    pConnectionIfIndexEntries: *DNS_CONNECTION_IFINDEX_ENTRY,
    nEntries: u32,
};

pub const DNS_CONNECTION_POLICY_ENTRY = extern struct {
    pwszHost: [*:0]const u16,
    pwszAppId: [*:0]const u16,
    cbAppSid: u32,
    pbAppSid: *u8,
    nConnections: u32,
    ppwszConnections: *PWSTR,
    dwPolicyEntryFlags: u32,
};

pub const DNS_CONNECTION_POLICY_ENTRY_LIST = extern struct {
    pPolicyEntries: *DNS_CONNECTION_POLICY_ENTRY,
    nEntries: u32,
};

pub const DNS_CONNECTION_POLICY_TAG = extern enum(i32) {
    DEFAULT = 0,
    CONNECTION_MANAGER = 1,
    WWWPT = 2,
};
pub const TAG_DNS_CONNECTION_POLICY_TAG_DEFAULT = DNS_CONNECTION_POLICY_TAG.DEFAULT;
pub const TAG_DNS_CONNECTION_POLICY_TAG_CONNECTION_MANAGER = DNS_CONNECTION_POLICY_TAG.CONNECTION_MANAGER;
pub const TAG_DNS_CONNECTION_POLICY_TAG_WWWPT = DNS_CONNECTION_POLICY_TAG.WWWPT;

pub const DNS_SERVICE_INSTANCE = extern struct {
    pszInstanceName: PWSTR,
    pszHostName: PWSTR,
    ip4Address: *u32,
    ip6Address: *IP6_ADDRESS,
    wPort: u16,
    wPriority: u16,
    wWeight: u16,
    dwPropertyCount: u32,
    keys: *PWSTR,
    values: *PWSTR,
    dwInterfaceIndex: u32,
};

pub const DNS_SERVICE_CANCEL = extern struct {
    reserved: *c_void,
};

pub const DNS_SERVICE_BROWSE_CALLBACK = fn(
    Status: u32,
    pQueryContext: *c_void,
    pDnsRecord: *DNS_RECORDA,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PDNS_SERVICE_BROWSE_CALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const DNS_SERVICE_BROWSE_REQUEST = extern struct {
    Version: u32,
    InterfaceIndex: u32,
    QueryName: [*:0]const u16,
    Anonymous: DNS_SERVICE_BROWSE_REQUEST._Anonymous_e__Union,
    pQueryContext: *c_void,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DNS_SERVICE_RESOLVE_COMPLETE = fn(
    Status: u32,
    pQueryContext: *c_void,
    pInstance: *DNS_SERVICE_INSTANCE,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PDNS_SERVICE_RESOLVE_COMPLETE = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const DNS_SERVICE_RESOLVE_REQUEST = extern struct {
    Version: u32,
    InterfaceIndex: u32,
    QueryName: PWSTR,
    pResolveCompletionCallback: PDNS_SERVICE_RESOLVE_COMPLETE,
    pQueryContext: *c_void,
};

pub const DNS_SERVICE_REGISTER_COMPLETE = fn(
    Status: u32,
    pQueryContext: *c_void,
    pInstance: *DNS_SERVICE_INSTANCE,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PDNS_SERVICE_REGISTER_COMPLETE = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const DNS_SERVICE_REGISTER_REQUEST = extern struct {
    Version: u32,
    InterfaceIndex: u32,
    pServiceInstance: *DNS_SERVICE_INSTANCE,
    pRegisterCompletionCallback: PDNS_SERVICE_REGISTER_COMPLETE,
    pQueryContext: *c_void,
    hCredentials: HANDLE,
    unicastEnabled: BOOL,
};

pub const MDNS_QUERY_HANDLE = extern struct {
    nameBuf: [256]u16,
    wType: u16,
    pSubscription: *c_void,
    pWnfCallbackParams: *c_void,
    stateNameData: [2]u32,
};

pub const MDNS_QUERY_CALLBACK = fn(
    pQueryContext: *c_void,
    pQueryHandle: *MDNS_QUERY_HANDLE,
    pQueryResults: *DNS_QUERY_RESULT,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PMDNS_QUERY_CALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const MDNS_QUERY_REQUEST = extern struct {
    Version: u32,
    ulRefCount: u32,
    Query: [*:0]const u16,
    QueryType: u16,
    QueryOptions: u64,
    InterfaceIndex: u32,
    pQueryCallback: PMDNS_QUERY_CALLBACK,
    pQueryContext: *c_void,
    fAnswerReceived: BOOL,
    ulResendCount: u32,
};


//--------------------------------------------------------------------------------
// Section: Functions (57)
//--------------------------------------------------------------------------------
pub extern "DNSAPI" fn DnsQueryConfig(
    Config: DNS_CONFIG_TYPE,
    Flag: u32,
    pwsAdapterName: ?[*:0]const u16,
    pReserved: ?*c_void,
    pBuffer: ?[*]u8,
    pBufLen: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsRecordCopyEx(
    pRecord: *DNS_RECORDA,
    CharSetIn: DNS_CHARSET,
    CharSetOut: DNS_CHARSET,
) callconv(@import("std").os.windows.WINAPI) *DNS_RECORDA;

pub extern "DNSAPI" fn DnsRecordSetCopyEx(
    pRecordSet: *DNS_RECORDA,
    CharSetIn: DNS_CHARSET,
    CharSetOut: DNS_CHARSET,
) callconv(@import("std").os.windows.WINAPI) *DNS_RECORDA;

pub extern "DNSAPI" fn DnsRecordCompare(
    pRecord1: *DNS_RECORDA,
    pRecord2: *DNS_RECORDA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "DNSAPI" fn DnsRecordSetCompare(
    pRR1: *DNS_RECORDA,
    pRR2: *DNS_RECORDA,
    ppDiff1: ?*?*DNS_RECORDA,
    ppDiff2: ?*?*DNS_RECORDA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "DNSAPI" fn DnsRecordSetDetach(
    pRecordList: *DNS_RECORDA,
) callconv(@import("std").os.windows.WINAPI) *DNS_RECORDA;

pub extern "DNSAPI" fn DnsFree(
    pData: ?*c_void,
    FreeType: DNS_FREE_TYPE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "DNSAPI" fn DnsQuery_A(
    pszName: [*:0]const u8,
    wType: u16,
    Options: u32,
    pExtra: ?*c_void,
    ppQueryResults: ?*?*DNS_RECORDA,
    pReserved: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsQuery_UTF8(
    pszName: [*:0]const u8,
    wType: u16,
    Options: u32,
    pExtra: ?*c_void,
    ppQueryResults: ?*?*DNS_RECORDA,
    pReserved: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsQuery_W(
    pszName: [*:0]const u16,
    wType: u16,
    Options: u32,
    pExtra: ?*c_void,
    ppQueryResults: ?*?*DNS_RECORDA,
    pReserved: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsQueryEx(
    pQueryRequest: *DNS_QUERY_REQUEST,
    pQueryResults: *DNS_QUERY_RESULT,
    pCancelHandle: ?*DNS_QUERY_CANCEL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsCancelQuery(
    pCancelHandle: *DNS_QUERY_CANCEL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsAcquireContextHandle_W(
    CredentialFlags: u32,
    Credentials: ?*c_void,
    pContext: *DnsContextHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsAcquireContextHandle_A(
    CredentialFlags: u32,
    Credentials: ?*c_void,
    pContext: *DnsContextHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsReleaseContextHandle(
    hContext: HANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "DNSAPI" fn DnsModifyRecordsInSet_W(
    pAddRecords: ?*DNS_RECORDA,
    pDeleteRecords: ?*DNS_RECORDA,
    Options: u32,
    hCredentials: HANDLE,
    pExtraList: ?*c_void,
    pReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsModifyRecordsInSet_A(
    pAddRecords: ?*DNS_RECORDA,
    pDeleteRecords: ?*DNS_RECORDA,
    Options: u32,
    hCredentials: HANDLE,
    pExtraList: ?*c_void,
    pReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsModifyRecordsInSet_UTF8(
    pAddRecords: ?*DNS_RECORDA,
    pDeleteRecords: ?*DNS_RECORDA,
    Options: u32,
    hCredentials: HANDLE,
    pExtraList: ?*c_void,
    pReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsReplaceRecordSetW(
    pReplaceSet: *DNS_RECORDA,
    Options: u32,
    hContext: HANDLE,
    pExtraInfo: ?*c_void,
    pReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsReplaceRecordSetA(
    pReplaceSet: *DNS_RECORDA,
    Options: u32,
    hContext: HANDLE,
    pExtraInfo: ?*c_void,
    pReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsReplaceRecordSetUTF8(
    pReplaceSet: *DNS_RECORDA,
    Options: u32,
    hContext: HANDLE,
    pExtraInfo: ?*c_void,
    pReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsValidateName_W(
    pszName: [*:0]const u16,
    Format: DNS_NAME_FORMAT,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsValidateName_A(
    pszName: [*:0]const u8,
    Format: DNS_NAME_FORMAT,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsValidateName_UTF8(
    pszName: [*:0]const u8,
    Format: DNS_NAME_FORMAT,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsNameCompare_A(
    pName1: [*:0]const u8,
    pName2: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "DNSAPI" fn DnsNameCompare_W(
    pName1: [*:0]const u16,
    pName2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "DNSAPI" fn DnsWriteQuestionToBuffer_W(
    pDnsBuffer: *DNS_MESSAGE_BUFFER,
    pdwBufferSize: *u32,
    pszName: [*:0]const u16,
    wType: u16,
    Xid: u16,
    fRecursionDesired: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "DNSAPI" fn DnsWriteQuestionToBuffer_UTF8(
    pDnsBuffer: *DNS_MESSAGE_BUFFER,
    pdwBufferSize: *u32,
    pszName: [*:0]const u8,
    wType: u16,
    Xid: u16,
    fRecursionDesired: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "DNSAPI" fn DnsExtractRecordsFromMessage_W(
    pDnsBuffer: *DNS_MESSAGE_BUFFER,
    wMessageLength: u16,
    ppRecord: **DNS_RECORDA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsExtractRecordsFromMessage_UTF8(
    pDnsBuffer: *DNS_MESSAGE_BUFFER,
    wMessageLength: u16,
    ppRecord: **DNS_RECORDA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsGetProxyInformation(
    hostName: [*:0]const u16,
    proxyInformation: *DNS_PROXY_INFORMATION,
    defaultProxyInformation: ?*DNS_PROXY_INFORMATION,
    completionRoutine: ?DNS_PROXY_COMPLETION_ROUTINE,
    completionContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DNSAPI" fn DnsFreeProxyName(
    proxyName: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "DNSAPI" fn DnsConnectionGetProxyInfoForHostUrl(
    pwszHostUrl: [*:0]const u16,
    pSelectionContext: ?[*:0]u8,
    dwSelectionContextLength: u32,
    dwExplicitInterfaceIndex: u32,
    pProxyInfoEx: *DNS_CONNECTION_PROXY_INFO_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DNSAPI" fn DnsConnectionFreeProxyInfoEx(
    pProxyInfoEx: *DNS_CONNECTION_PROXY_INFO_EX,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "DNSAPI" fn DnsConnectionGetProxyInfo(
    pwszConnectionName: [*:0]const u16,
    Type: DNS_CONNECTION_PROXY_TYPE,
    pProxyInfo: *DNS_CONNECTION_PROXY_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DNSAPI" fn DnsConnectionFreeProxyInfo(
    pProxyInfo: *DNS_CONNECTION_PROXY_INFO,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "DNSAPI" fn DnsConnectionSetProxyInfo(
    pwszConnectionName: [*:0]const u16,
    Type: DNS_CONNECTION_PROXY_TYPE,
    pProxyInfo: *const DNS_CONNECTION_PROXY_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DNSAPI" fn DnsConnectionDeleteProxyInfo(
    pwszConnectionName: [*:0]const u16,
    Type: DNS_CONNECTION_PROXY_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DNSAPI" fn DnsConnectionGetProxyList(
    pwszConnectionName: [*:0]const u16,
    pProxyList: *DNS_CONNECTION_PROXY_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DNSAPI" fn DnsConnectionFreeProxyList(
    pProxyList: *DNS_CONNECTION_PROXY_LIST,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "DNSAPI" fn DnsConnectionGetNameList(
    pNameList: *DNS_CONNECTION_NAME_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DNSAPI" fn DnsConnectionFreeNameList(
    pNameList: *DNS_CONNECTION_NAME_LIST,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "DNSAPI" fn DnsConnectionUpdateIfIndexTable(
    pConnectionIfIndexEntries: *DNS_CONNECTION_IFINDEX_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DNSAPI" fn DnsConnectionSetPolicyEntries(
    PolicyEntryTag: DNS_CONNECTION_POLICY_TAG,
    pPolicyEntryList: *DNS_CONNECTION_POLICY_ENTRY_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DNSAPI" fn DnsConnectionDeletePolicyEntries(
    PolicyEntryTag: DNS_CONNECTION_POLICY_TAG,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DNSAPI" fn DnsServiceConstructInstance(
    pServiceName: [*:0]const u16,
    pHostName: [*:0]const u16,
    pIp4: ?*u32,
    pIp6: ?*IP6_ADDRESS,
    wPort: u16,
    wPriority: u16,
    wWeight: u16,
    dwPropertiesCount: u32,
    keys: [*]PWSTR,
    values: [*]PWSTR,
) callconv(@import("std").os.windows.WINAPI) *DNS_SERVICE_INSTANCE;

pub extern "DNSAPI" fn DnsServiceCopyInstance(
    pOrig: *DNS_SERVICE_INSTANCE,
) callconv(@import("std").os.windows.WINAPI) *DNS_SERVICE_INSTANCE;

pub extern "DNSAPI" fn DnsServiceFreeInstance(
    pInstance: *DNS_SERVICE_INSTANCE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "DNSAPI" fn DnsServiceBrowse(
    pRequest: *DNS_SERVICE_BROWSE_REQUEST,
    pCancel: *DNS_SERVICE_CANCEL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsServiceBrowseCancel(
    pCancelHandle: *DNS_SERVICE_CANCEL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsServiceResolve(
    pRequest: *DNS_SERVICE_RESOLVE_REQUEST,
    pCancel: *DNS_SERVICE_CANCEL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsServiceResolveCancel(
    pCancelHandle: *DNS_SERVICE_CANCEL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsServiceRegister(
    pRequest: *DNS_SERVICE_REGISTER_REQUEST,
    pCancel: ?*DNS_SERVICE_CANCEL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DNSAPI" fn DnsServiceDeRegister(
    pRequest: *DNS_SERVICE_REGISTER_REQUEST,
    pCancel: ?*DNS_SERVICE_CANCEL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DNSAPI" fn DnsServiceRegisterCancel(
    pCancelHandle: *DNS_SERVICE_CANCEL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DNSAPI" fn DnsStartMulticastQuery(
    pQueryRequest: *MDNS_QUERY_REQUEST,
    pHandle: *MDNS_QUERY_HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "DNSAPI" fn DnsStopMulticastQuery(
    pHandle: *MDNS_QUERY_HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (21)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const DNS_PTR_DATA = DNS_PTR_DATAA;
        pub const DNS_SOA_DATA = DNS_SOA_DATAA;
        pub const DNS_MINFO_DATA = DNS_MINFO_DATAA;
        pub const DNS_MX_DATA = DNS_MX_DATAA;
        pub const DNS_TXT_DATA = DNS_TXT_DATAA;
        pub const DNS_SIG_DATA = DNS_SIG_DATAA;
        pub const DNS_NSEC_DATA = DNS_NSEC_DATAA;
        pub const DNS_NXT_DATA = DNS_NXT_DATAA;
        pub const DNS_SRV_DATA = DNS_SRV_DATAA;
        pub const DNS_NAPTR_DATA = DNS_NAPTR_DATAA;
        pub const DNS_TKEY_DATA = DNS_TKEY_DATAA;
        pub const DNS_TSIG_DATA = DNS_TSIG_DATAA;
        pub const DNS_WINSR_DATA = DNS_WINSR_DATAA;
        pub const DNS_RECORD = DNS_RECORDA;
        pub const _DnsRecordOpt = _DnsRecordOptA;
        pub const DnsQuery_ = DnsQuery_A;
        pub const DnsAcquireContextHandle_ = DnsAcquireContextHandle_A;
        pub const DnsModifyRecordsInSet_ = DnsModifyRecordsInSet_A;
        pub const DnsReplaceRecordSet = DnsReplaceRecordSetA;
        pub const DnsValidateName_ = DnsValidateName_A;
        pub const DnsNameCompare_ = DnsNameCompare_A;
    },
    .wide => struct {
        pub const DNS_PTR_DATA = DNS_PTR_DATAW;
        pub const DNS_SOA_DATA = DNS_SOA_DATAW;
        pub const DNS_MINFO_DATA = DNS_MINFO_DATAW;
        pub const DNS_MX_DATA = DNS_MX_DATAW;
        pub const DNS_TXT_DATA = DNS_TXT_DATAW;
        pub const DNS_SIG_DATA = DNS_SIG_DATAW;
        pub const DNS_NSEC_DATA = DNS_NSEC_DATAW;
        pub const DNS_NXT_DATA = DNS_NXT_DATAW;
        pub const DNS_SRV_DATA = DNS_SRV_DATAW;
        pub const DNS_NAPTR_DATA = DNS_NAPTR_DATAW;
        pub const DNS_TKEY_DATA = DNS_TKEY_DATAW;
        pub const DNS_TSIG_DATA = DNS_TSIG_DATAW;
        pub const DNS_WINSR_DATA = DNS_WINSR_DATAW;
        pub const DNS_RECORD = DNS_RECORDW;
        pub const _DnsRecordOpt = _DnsRecordOptW;
        pub const DnsQuery_ = DnsQuery_W;
        pub const DnsAcquireContextHandle_ = DnsAcquireContextHandle_W;
        pub const DnsModifyRecordsInSet_ = DnsModifyRecordsInSet_W;
        pub const DnsReplaceRecordSet = DnsReplaceRecordSetW;
        pub const DnsValidateName_ = DnsValidateName_W;
        pub const DnsNameCompare_ = DnsNameCompare_W;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const DNS_PTR_DATA = *opaque{};
        pub const DNS_SOA_DATA = *opaque{};
        pub const DNS_MINFO_DATA = *opaque{};
        pub const DNS_MX_DATA = *opaque{};
        pub const DNS_TXT_DATA = *opaque{};
        pub const DNS_SIG_DATA = *opaque{};
        pub const DNS_NSEC_DATA = *opaque{};
        pub const DNS_NXT_DATA = *opaque{};
        pub const DNS_SRV_DATA = *opaque{};
        pub const DNS_NAPTR_DATA = *opaque{};
        pub const DNS_TKEY_DATA = *opaque{};
        pub const DNS_TSIG_DATA = *opaque{};
        pub const DNS_WINSR_DATA = *opaque{};
        pub const DNS_RECORD = *opaque{};
        pub const _DnsRecordOpt = *opaque{};
        pub const DnsQuery_ = *opaque{};
        pub const DnsAcquireContextHandle_ = *opaque{};
        pub const DnsModifyRecordsInSet_ = *opaque{};
        pub const DnsReplaceRecordSet = *opaque{};
        pub const DnsValidateName_ = *opaque{};
        pub const DnsNameCompare_ = *opaque{};
    } else struct {
        pub const DNS_PTR_DATA = @compileError("'DNS_PTR_DATA' requires that UNICODE be set to true or false in the root module");
        pub const DNS_SOA_DATA = @compileError("'DNS_SOA_DATA' requires that UNICODE be set to true or false in the root module");
        pub const DNS_MINFO_DATA = @compileError("'DNS_MINFO_DATA' requires that UNICODE be set to true or false in the root module");
        pub const DNS_MX_DATA = @compileError("'DNS_MX_DATA' requires that UNICODE be set to true or false in the root module");
        pub const DNS_TXT_DATA = @compileError("'DNS_TXT_DATA' requires that UNICODE be set to true or false in the root module");
        pub const DNS_SIG_DATA = @compileError("'DNS_SIG_DATA' requires that UNICODE be set to true or false in the root module");
        pub const DNS_NSEC_DATA = @compileError("'DNS_NSEC_DATA' requires that UNICODE be set to true or false in the root module");
        pub const DNS_NXT_DATA = @compileError("'DNS_NXT_DATA' requires that UNICODE be set to true or false in the root module");
        pub const DNS_SRV_DATA = @compileError("'DNS_SRV_DATA' requires that UNICODE be set to true or false in the root module");
        pub const DNS_NAPTR_DATA = @compileError("'DNS_NAPTR_DATA' requires that UNICODE be set to true or false in the root module");
        pub const DNS_TKEY_DATA = @compileError("'DNS_TKEY_DATA' requires that UNICODE be set to true or false in the root module");
        pub const DNS_TSIG_DATA = @compileError("'DNS_TSIG_DATA' requires that UNICODE be set to true or false in the root module");
        pub const DNS_WINSR_DATA = @compileError("'DNS_WINSR_DATA' requires that UNICODE be set to true or false in the root module");
        pub const DNS_RECORD = @compileError("'DNS_RECORD' requires that UNICODE be set to true or false in the root module");
        pub const _DnsRecordOpt = @compileError("'_DnsRecordOpt' requires that UNICODE be set to true or false in the root module");
        pub const DnsQuery_ = @compileError("'DnsQuery_' requires that UNICODE be set to true or false in the root module");
        pub const DnsAcquireContextHandle_ = @compileError("'DnsAcquireContextHandle_' requires that UNICODE be set to true or false in the root module");
        pub const DnsModifyRecordsInSet_ = @compileError("'DnsModifyRecordsInSet_' requires that UNICODE be set to true or false in the root module");
        pub const DnsReplaceRecordSet = @compileError("'DnsReplaceRecordSet' requires that UNICODE be set to true or false in the root module");
        pub const DnsValidateName_ = @compileError("'DnsValidateName_' requires that UNICODE be set to true or false in the root module");
        pub const DnsNameCompare_ = @compileError("'DnsNameCompare_' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (4)
//--------------------------------------------------------------------------------
const PWSTR = @import("system_services.zig").PWSTR;
const PSTR = @import("system_services.zig").PSTR;
const HANDLE = @import("system_services.zig").HANDLE;
const BOOL = @import("system_services.zig").BOOL;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = DNS_PROXY_COMPLETION_ROUTINE;
    _ = DNS_QUERY_COMPLETION_ROUTINE;
    _ = PDNS_QUERY_COMPLETION_ROUTINE;
    _ = DNS_SERVICE_BROWSE_CALLBACK;
    _ = PDNS_SERVICE_BROWSE_CALLBACK;
    _ = DNS_SERVICE_RESOLVE_COMPLETE;
    _ = PDNS_SERVICE_RESOLVE_COMPLETE;
    _ = DNS_SERVICE_REGISTER_COMPLETE;
    _ = PDNS_SERVICE_REGISTER_COMPLETE;
    _ = MDNS_QUERY_CALLBACK;
    _ = PMDNS_QUERY_CALLBACK;

    const constant_export_count = 304;
    const type_export_count = 98;
    const enum_value_export_count = 52;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 57;
    const unicode_alias_count = 21;
    const import_count = 4;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

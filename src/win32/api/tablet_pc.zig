//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (31)
//--------------------------------------------------------------------------------
pub const MICROSOFT_URL_EXPERIENCE_PROPERTY = "Microsoft TIP URL Experience";
pub const MICROSOFT_TIP_NO_INSERT_BUTTON_PROPERTY = "Microsoft TIP No Insert Option";
pub const MICROSOFT_TIP_COMBOBOXLIST_PROPERTY = "Microsoft TIP ComboBox List Window Identifier";
pub const MICROSOFT_TIP_OPENING_MSG = "TabletInputPanelOpening";
pub const GUID_PACKETPROPERTY_GUID_X = @import("../zig.zig").Guid.initString("598a6a8f-52c0-4ba0-93af-af357411a561");
pub const GUID_PACKETPROPERTY_GUID_Y = @import("../zig.zig").Guid.initString("b53f9f75-04e0-4498-a7ee-c30dbb5a9011");
pub const GUID_PACKETPROPERTY_GUID_Z = @import("../zig.zig").Guid.initString("735adb30-0ebb-4788-a0e4-0f316490055d");
pub const GUID_PACKETPROPERTY_GUID_PACKET_STATUS = @import("../zig.zig").Guid.initString("6e0e07bf-afe7-4cf7-87d1-af6446208418");
pub const GUID_PACKETPROPERTY_GUID_TIMER_TICK = @import("../zig.zig").Guid.initString("436510c5-fed3-45d1-8b76-71d3ea7a829d");
pub const GUID_PACKETPROPERTY_GUID_SERIAL_NUMBER = @import("../zig.zig").Guid.initString("78a81b56-0935-4493-baae-00541a8a16c4");
pub const GUID_PACKETPROPERTY_GUID_NORMAL_PRESSURE = @import("../zig.zig").Guid.initString("7307502d-f9f4-4e18-b3f2-2ce1b1a3610c");
pub const GUID_PACKETPROPERTY_GUID_TANGENT_PRESSURE = @import("../zig.zig").Guid.initString("6da4488b-5244-41ec-905b-32d89ab80809");
pub const GUID_PACKETPROPERTY_GUID_BUTTON_PRESSURE = @import("../zig.zig").Guid.initString("8b7fefc4-96aa-4bfe-ac26-8a5f0be07bf5");
pub const GUID_PACKETPROPERTY_GUID_X_TILT_ORIENTATION = @import("../zig.zig").Guid.initString("a8d07b3a-8bf0-40b0-95a9-b80a6bb787bf");
pub const GUID_PACKETPROPERTY_GUID_Y_TILT_ORIENTATION = @import("../zig.zig").Guid.initString("0e932389-1d77-43af-ac00-5b950d6d4b2d");
pub const GUID_PACKETPROPERTY_GUID_AZIMUTH_ORIENTATION = @import("../zig.zig").Guid.initString("029123b4-8828-410b-b250-a0536595e5dc");
pub const GUID_PACKETPROPERTY_GUID_ALTITUDE_ORIENTATION = @import("../zig.zig").Guid.initString("82dec5c7-f6ba-4906-894f-66d68dfc456c");
pub const GUID_PACKETPROPERTY_GUID_TWIST_ORIENTATION = @import("../zig.zig").Guid.initString("0d324960-13b2-41e4-ace6-7ae9d43d2d3b");
pub const GUID_PACKETPROPERTY_GUID_PITCH_ROTATION = @import("../zig.zig").Guid.initString("7f7e57b7-be37-4be1-a356-7a84160e1893");
pub const GUID_PACKETPROPERTY_GUID_ROLL_ROTATION = @import("../zig.zig").Guid.initString("5d5d5e56-6ba9-4c5b-9fb0-851c91714e56");
pub const GUID_PACKETPROPERTY_GUID_YAW_ROTATION = @import("../zig.zig").Guid.initString("6a849980-7c3a-45b7-aa82-90a262950e89");
pub const GUID_PACKETPROPERTY_GUID_WIDTH = @import("../zig.zig").Guid.initString("baabe94d-2712-48f5-be9d-8f8b5ea0711a");
pub const GUID_PACKETPROPERTY_GUID_HEIGHT = @import("../zig.zig").Guid.initString("e61858d2-e447-4218-9d3f-18865c203df4");
pub const GUID_PACKETPROPERTY_GUID_FINGERCONTACTCONFIDENCE = @import("../zig.zig").Guid.initString("e706c804-57f0-4f00-8a0c-853d57789be9");
pub const GUID_PACKETPROPERTY_GUID_DEVICE_CONTACT_ID = @import("../zig.zig").Guid.initString("02585b91-049b-4750-9615-df8948ab3c9c");
pub const InkMinTransparencyValue : i32 = 0;
pub const InkMaxTransparencyValue : i32 = 255;
pub const InkCollectorClipInkToMargin : i32 = 0;
pub const InkCollectorDefaultMargin : i32 = -2147483648;
pub const GUID_GESTURE_DATA = @import("../zig.zig").Guid.initString("41e4ec0f-26aa-455a-9aa5-2cd36cf63fb9");
pub const GUID_DYNAMIC_RENDERER_CACHED_DATA = @import("../zig.zig").Guid.initString("bf531b92-25bf-4a95-89ad-0e476b34b4f5");

//--------------------------------------------------------------------------------
// Section: Types (240)
//--------------------------------------------------------------------------------
pub const PfnRecoCallback = fn(
    param0: u32,
    param1: *u8,
    param2: *HRECOCONTEXT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

const CLSID_InkDisp_Value = @import("../zig.zig").Guid.initString("937C1A34-151D-4610-9CA6-A8CC9BDB5D83");
pub const CLSID_InkDisp = &CLSID_InkDisp_Value;

const CLSID_InkOverlay_Value = @import("../zig.zig").Guid.initString("65D00646-CDE3-4A88-9163-6769F0F1A97D");
pub const CLSID_InkOverlay = &CLSID_InkOverlay_Value;

const CLSID_InkPicture_Value = @import("../zig.zig").Guid.initString("04A1E553-FE36-4FDE-865E-344194E69424");
pub const CLSID_InkPicture = &CLSID_InkPicture_Value;

const CLSID_InkCollector_Value = @import("../zig.zig").Guid.initString("43FB1553-AD74-4EE8-88E4-3E6DAAC915DB");
pub const CLSID_InkCollector = &CLSID_InkCollector_Value;

const CLSID_InkDrawingAttributes_Value = @import("../zig.zig").Guid.initString("D8BF32A2-05A5-44C3-B3AA-5E80AC7D2576");
pub const CLSID_InkDrawingAttributes = &CLSID_InkDrawingAttributes_Value;

const CLSID_InkRectangle_Value = @import("../zig.zig").Guid.initString("43B07326-AAE0-4B62-A83D-5FD768B7353C");
pub const CLSID_InkRectangle = &CLSID_InkRectangle_Value;

const CLSID_InkRenderer_Value = @import("../zig.zig").Guid.initString("9C1CC6E4-D7EB-4EEB-9091-15A7C8791ED9");
pub const CLSID_InkRenderer = &CLSID_InkRenderer_Value;

const CLSID_InkTransform_Value = @import("../zig.zig").Guid.initString("E3D5D93C-1663-4A78-A1A7-22375DFEBAEE");
pub const CLSID_InkTransform = &CLSID_InkTransform_Value;

const CLSID_InkRecognizers_Value = @import("../zig.zig").Guid.initString("9FD4E808-F6E6-4E65-98D3-AA39054C1255");
pub const CLSID_InkRecognizers = &CLSID_InkRecognizers_Value;

const CLSID_InkRecognizerContext_Value = @import("../zig.zig").Guid.initString("AAC46A37-9229-4FC0-8CCE-4497569BF4D1");
pub const CLSID_InkRecognizerContext = &CLSID_InkRecognizerContext_Value;

const CLSID_InkRecognizerGuide_Value = @import("../zig.zig").Guid.initString("8770D941-A63A-4671-A375-2855A18EBA73");
pub const CLSID_InkRecognizerGuide = &CLSID_InkRecognizerGuide_Value;

const CLSID_InkTablets_Value = @import("../zig.zig").Guid.initString("6E4FCB12-510A-4D40-9304-1DA10AE9147C");
pub const CLSID_InkTablets = &CLSID_InkTablets_Value;

const CLSID_InkWordList_Value = @import("../zig.zig").Guid.initString("9DE85094-F71F-44F1-8471-15A2FA76FCF3");
pub const CLSID_InkWordList = &CLSID_InkWordList_Value;

const CLSID_InkStrokes_Value = @import("../zig.zig").Guid.initString("48F491BC-240E-4860-B079-A1E94D3D2C86");
pub const CLSID_InkStrokes = &CLSID_InkStrokes_Value;

const CLSID_Ink_Value = @import("../zig.zig").Guid.initString("13DE4A42-8D21-4C8E-BF9C-8F69CB068FCA");
pub const CLSID_Ink = &CLSID_Ink_Value;

const CLSID_SketchInk_Value = @import("../zig.zig").Guid.initString("F0291081-E87C-4E07-97DA-A0A03761E586");
pub const CLSID_SketchInk = &CLSID_SketchInk_Value;

pub const PROPERTY_UNITS = extern enum(i32) {
    DEFAULT = 0,
    INCHES = 1,
    CENTIMETERS = 2,
    DEGREES = 3,
    RADIANS = 4,
    SECONDS = 5,
    POUNDS = 6,
    GRAMS = 7,
    SILINEAR = 8,
    SIROTATION = 9,
    ENGLINEAR = 10,
    ENGROTATION = 11,
    SLUGS = 12,
    KELVIN = 13,
    FAHRENHEIT = 14,
    AMPERE = 15,
    CANDELA = 16,
};
pub const PROPERTY_UNITS_DEFAULT = PROPERTY_UNITS.DEFAULT;
pub const PROPERTY_UNITS_INCHES = PROPERTY_UNITS.INCHES;
pub const PROPERTY_UNITS_CENTIMETERS = PROPERTY_UNITS.CENTIMETERS;
pub const PROPERTY_UNITS_DEGREES = PROPERTY_UNITS.DEGREES;
pub const PROPERTY_UNITS_RADIANS = PROPERTY_UNITS.RADIANS;
pub const PROPERTY_UNITS_SECONDS = PROPERTY_UNITS.SECONDS;
pub const PROPERTY_UNITS_POUNDS = PROPERTY_UNITS.POUNDS;
pub const PROPERTY_UNITS_GRAMS = PROPERTY_UNITS.GRAMS;
pub const PROPERTY_UNITS_SILINEAR = PROPERTY_UNITS.SILINEAR;
pub const PROPERTY_UNITS_SIROTATION = PROPERTY_UNITS.SIROTATION;
pub const PROPERTY_UNITS_ENGLINEAR = PROPERTY_UNITS.ENGLINEAR;
pub const PROPERTY_UNITS_ENGROTATION = PROPERTY_UNITS.ENGROTATION;
pub const PROPERTY_UNITS_SLUGS = PROPERTY_UNITS.SLUGS;
pub const PROPERTY_UNITS_KELVIN = PROPERTY_UNITS.KELVIN;
pub const PROPERTY_UNITS_FAHRENHEIT = PROPERTY_UNITS.FAHRENHEIT;
pub const PROPERTY_UNITS_AMPERE = PROPERTY_UNITS.AMPERE;
pub const PROPERTY_UNITS_CANDELA = PROPERTY_UNITS.CANDELA;

pub const SYSTEM_EVENT_DATA = extern struct {
    bModifier: u8,
    wKey: u16,
    xPos: i32,
    yPos: i32,
    bCursorMode: u8,
    dwButtonState: u32,
};

pub const STROKE_RANGE = extern struct {
    iStrokeBegin: u32,
    iStrokeEnd: u32,
};

pub const PROPERTY_METRICS = extern struct {
    nLogicalMin: i32,
    nLogicalMax: i32,
    Units: PROPERTY_UNITS,
    fResolution: f32,
};

pub const PACKET_PROPERTY = extern struct {
    guid: Guid,
    PropertyMetrics: PROPERTY_METRICS,
};

pub const PACKET_DESCRIPTION = extern struct {
    cbPacketSize: u32,
    cPacketProperties: u32,
    pPacketProperties: *PACKET_PROPERTY,
    cButtons: u32,
    pguidButtons: *Guid,
};

pub const enumINKMETRIC_FLAGS = extern enum(i32) {
    IMF_FONT_SELECTED_IN_HDC = 1,
    IMF_ITALIC = 2,
    IMF_BOLD = 4,
};
pub const IMF_FONT_SELECTED_IN_HDC = enumINKMETRIC_FLAGS.IMF_FONT_SELECTED_IN_HDC;
pub const IMF_ITALIC = enumINKMETRIC_FLAGS.IMF_ITALIC;
pub const IMF_BOLD = enumINKMETRIC_FLAGS.IMF_BOLD;

pub const enumGetCandidateFlags = extern enum(i32) {
    TCF_ALLOW_RECOGNITION = 1,
    TCF_FORCE_RECOGNITION = 2,
};
pub const TCF_ALLOW_RECOGNITION = enumGetCandidateFlags.TCF_ALLOW_RECOGNITION;
pub const TCF_FORCE_RECOGNITION = enumGetCandidateFlags.TCF_FORCE_RECOGNITION;

pub const INKMETRIC = extern struct {
    iHeight: i32,
    iFontAscent: i32,
    iFontDescent: i32,
    dwFlags: u32,
    color: u32,
};

pub const InkSelectionConstants = extern enum(i32) {
    ISC_FirstElement = 0,
    ISC_AllElements = -1,
};
pub const ISC_FirstElement = InkSelectionConstants.ISC_FirstElement;
pub const ISC_AllElements = InkSelectionConstants.ISC_AllElements;

pub const InkBoundingBoxMode = extern enum(i32) {
    IBBM_Default = 0,
    IBBM_NoCurveFit = 1,
    IBBM_CurveFit = 2,
    IBBM_PointsOnly = 3,
    IBBM_Union = 4,
};
pub const IBBM_Default = InkBoundingBoxMode.IBBM_Default;
pub const IBBM_NoCurveFit = InkBoundingBoxMode.IBBM_NoCurveFit;
pub const IBBM_CurveFit = InkBoundingBoxMode.IBBM_CurveFit;
pub const IBBM_PointsOnly = InkBoundingBoxMode.IBBM_PointsOnly;
pub const IBBM_Union = InkBoundingBoxMode.IBBM_Union;

pub const InkExtractFlags = extern enum(i32) {
    IEF_CopyFromOriginal = 0,
    IEF_RemoveFromOriginal = 1,
    IEF_Default = 1,
};
pub const IEF_CopyFromOriginal = InkExtractFlags.IEF_CopyFromOriginal;
pub const IEF_RemoveFromOriginal = InkExtractFlags.IEF_RemoveFromOriginal;
pub const IEF_Default = InkExtractFlags.IEF_Default;

pub const InkPersistenceFormat = extern enum(i32) {
    IPF_InkSerializedFormat = 0,
    IPF_Base64InkSerializedFormat = 1,
    IPF_GIF = 2,
    IPF_Base64GIF = 3,
};
pub const IPF_InkSerializedFormat = InkPersistenceFormat.IPF_InkSerializedFormat;
pub const IPF_Base64InkSerializedFormat = InkPersistenceFormat.IPF_Base64InkSerializedFormat;
pub const IPF_GIF = InkPersistenceFormat.IPF_GIF;
pub const IPF_Base64GIF = InkPersistenceFormat.IPF_Base64GIF;

pub const InkPersistenceCompressionMode = extern enum(i32) {
    IPCM_Default = 0,
    IPCM_MaximumCompression = 1,
    IPCM_NoCompression = 2,
};
pub const IPCM_Default = InkPersistenceCompressionMode.IPCM_Default;
pub const IPCM_MaximumCompression = InkPersistenceCompressionMode.IPCM_MaximumCompression;
pub const IPCM_NoCompression = InkPersistenceCompressionMode.IPCM_NoCompression;

pub const InkPenTip = extern enum(i32) {
    IPT_Ball = 0,
    IPT_Rectangle = 1,
};
pub const IPT_Ball = InkPenTip.IPT_Ball;
pub const IPT_Rectangle = InkPenTip.IPT_Rectangle;

pub const InkRasterOperation = extern enum(i32) {
    IRO_Black = 1,
    IRO_NotMergePen = 2,
    IRO_MaskNotPen = 3,
    IRO_NotCopyPen = 4,
    IRO_MaskPenNot = 5,
    IRO_Not = 6,
    IRO_XOrPen = 7,
    IRO_NotMaskPen = 8,
    IRO_MaskPen = 9,
    IRO_NotXOrPen = 10,
    IRO_NoOperation = 11,
    IRO_MergeNotPen = 12,
    IRO_CopyPen = 13,
    IRO_MergePenNot = 14,
    IRO_MergePen = 15,
    IRO_White = 16,
};
pub const IRO_Black = InkRasterOperation.IRO_Black;
pub const IRO_NotMergePen = InkRasterOperation.IRO_NotMergePen;
pub const IRO_MaskNotPen = InkRasterOperation.IRO_MaskNotPen;
pub const IRO_NotCopyPen = InkRasterOperation.IRO_NotCopyPen;
pub const IRO_MaskPenNot = InkRasterOperation.IRO_MaskPenNot;
pub const IRO_Not = InkRasterOperation.IRO_Not;
pub const IRO_XOrPen = InkRasterOperation.IRO_XOrPen;
pub const IRO_NotMaskPen = InkRasterOperation.IRO_NotMaskPen;
pub const IRO_MaskPen = InkRasterOperation.IRO_MaskPen;
pub const IRO_NotXOrPen = InkRasterOperation.IRO_NotXOrPen;
pub const IRO_NoOperation = InkRasterOperation.IRO_NoOperation;
pub const IRO_MergeNotPen = InkRasterOperation.IRO_MergeNotPen;
pub const IRO_CopyPen = InkRasterOperation.IRO_CopyPen;
pub const IRO_MergePenNot = InkRasterOperation.IRO_MergePenNot;
pub const IRO_MergePen = InkRasterOperation.IRO_MergePen;
pub const IRO_White = InkRasterOperation.IRO_White;

pub const InkMousePointer = extern enum(i32) {
    IMP_Default = 0,
    IMP_Arrow = 1,
    IMP_Crosshair = 2,
    IMP_Ibeam = 3,
    IMP_SizeNESW = 4,
    IMP_SizeNS = 5,
    IMP_SizeNWSE = 6,
    IMP_SizeWE = 7,
    IMP_UpArrow = 8,
    IMP_Hourglass = 9,
    IMP_NoDrop = 10,
    IMP_ArrowHourglass = 11,
    IMP_ArrowQuestion = 12,
    IMP_SizeAll = 13,
    IMP_Hand = 14,
    IMP_Custom = 99,
};
pub const IMP_Default = InkMousePointer.IMP_Default;
pub const IMP_Arrow = InkMousePointer.IMP_Arrow;
pub const IMP_Crosshair = InkMousePointer.IMP_Crosshair;
pub const IMP_Ibeam = InkMousePointer.IMP_Ibeam;
pub const IMP_SizeNESW = InkMousePointer.IMP_SizeNESW;
pub const IMP_SizeNS = InkMousePointer.IMP_SizeNS;
pub const IMP_SizeNWSE = InkMousePointer.IMP_SizeNWSE;
pub const IMP_SizeWE = InkMousePointer.IMP_SizeWE;
pub const IMP_UpArrow = InkMousePointer.IMP_UpArrow;
pub const IMP_Hourglass = InkMousePointer.IMP_Hourglass;
pub const IMP_NoDrop = InkMousePointer.IMP_NoDrop;
pub const IMP_ArrowHourglass = InkMousePointer.IMP_ArrowHourglass;
pub const IMP_ArrowQuestion = InkMousePointer.IMP_ArrowQuestion;
pub const IMP_SizeAll = InkMousePointer.IMP_SizeAll;
pub const IMP_Hand = InkMousePointer.IMP_Hand;
pub const IMP_Custom = InkMousePointer.IMP_Custom;

pub const InkClipboardModes = extern enum(i32) {
    ICB_Copy = 0,
    ICB_Cut = 1,
    ICB_ExtractOnly = 48,
    ICB_DelayedCopy = 32,
    ICB_Default = 0,
};
pub const ICB_Copy = InkClipboardModes.ICB_Copy;
pub const ICB_Cut = InkClipboardModes.ICB_Cut;
pub const ICB_ExtractOnly = InkClipboardModes.ICB_ExtractOnly;
pub const ICB_DelayedCopy = InkClipboardModes.ICB_DelayedCopy;
pub const ICB_Default = InkClipboardModes.ICB_Default;

pub const InkClipboardFormats = extern enum(i32) {
    ICF_None = 0,
    ICF_InkSerializedFormat = 1,
    ICF_SketchInk = 2,
    ICF_TextInk = 6,
    ICF_EnhancedMetafile = 8,
    ICF_Metafile = 32,
    ICF_Bitmap = 64,
    ICF_PasteMask = 7,
    ICF_CopyMask = 127,
    ICF_Default = 127,
};
pub const ICF_None = InkClipboardFormats.ICF_None;
pub const ICF_InkSerializedFormat = InkClipboardFormats.ICF_InkSerializedFormat;
pub const ICF_SketchInk = InkClipboardFormats.ICF_SketchInk;
pub const ICF_TextInk = InkClipboardFormats.ICF_TextInk;
pub const ICF_EnhancedMetafile = InkClipboardFormats.ICF_EnhancedMetafile;
pub const ICF_Metafile = InkClipboardFormats.ICF_Metafile;
pub const ICF_Bitmap = InkClipboardFormats.ICF_Bitmap;
pub const ICF_PasteMask = InkClipboardFormats.ICF_PasteMask;
pub const ICF_CopyMask = InkClipboardFormats.ICF_CopyMask;
pub const ICF_Default = InkClipboardFormats.ICF_Default;

pub const SelectionHitResult = extern enum(i32) {
    SHR_None = 0,
    SHR_NW = 1,
    SHR_SE = 2,
    SHR_NE = 3,
    SHR_SW = 4,
    SHR_E = 5,
    SHR_W = 6,
    SHR_N = 7,
    SHR_S = 8,
    SHR_Selection = 9,
};
pub const SHR_None = SelectionHitResult.SHR_None;
pub const SHR_NW = SelectionHitResult.SHR_NW;
pub const SHR_SE = SelectionHitResult.SHR_SE;
pub const SHR_NE = SelectionHitResult.SHR_NE;
pub const SHR_SW = SelectionHitResult.SHR_SW;
pub const SHR_E = SelectionHitResult.SHR_E;
pub const SHR_W = SelectionHitResult.SHR_W;
pub const SHR_N = SelectionHitResult.SHR_N;
pub const SHR_S = SelectionHitResult.SHR_S;
pub const SHR_Selection = SelectionHitResult.SHR_Selection;

pub const InkRecognitionStatus = extern enum(i32) {
    IRS_NoError = 0,
    IRS_Interrupted = 1,
    IRS_ProcessFailed = 2,
    IRS_InkAddedFailed = 4,
    IRS_SetAutoCompletionModeFailed = 8,
    IRS_SetStrokesFailed = 16,
    IRS_SetGuideFailed = 32,
    IRS_SetFlagsFailed = 64,
    IRS_SetFactoidFailed = 128,
    IRS_SetPrefixSuffixFailed = 256,
    IRS_SetWordListFailed = 512,
};
pub const IRS_NoError = InkRecognitionStatus.IRS_NoError;
pub const IRS_Interrupted = InkRecognitionStatus.IRS_Interrupted;
pub const IRS_ProcessFailed = InkRecognitionStatus.IRS_ProcessFailed;
pub const IRS_InkAddedFailed = InkRecognitionStatus.IRS_InkAddedFailed;
pub const IRS_SetAutoCompletionModeFailed = InkRecognitionStatus.IRS_SetAutoCompletionModeFailed;
pub const IRS_SetStrokesFailed = InkRecognitionStatus.IRS_SetStrokesFailed;
pub const IRS_SetGuideFailed = InkRecognitionStatus.IRS_SetGuideFailed;
pub const IRS_SetFlagsFailed = InkRecognitionStatus.IRS_SetFlagsFailed;
pub const IRS_SetFactoidFailed = InkRecognitionStatus.IRS_SetFactoidFailed;
pub const IRS_SetPrefixSuffixFailed = InkRecognitionStatus.IRS_SetPrefixSuffixFailed;
pub const IRS_SetWordListFailed = InkRecognitionStatus.IRS_SetWordListFailed;

pub const DISPID_InkRectangle = extern enum(i32) {
    DISPID_IRTop = 1,
    DISPID_IRLeft = 2,
    DISPID_IRBottom = 3,
    DISPID_IRRight = 4,
    DISPID_IRGetRectangle = 5,
    DISPID_IRSetRectangle = 6,
    DISPID_IRData = 7,
};
pub const DISPID_IRTop = DISPID_InkRectangle.DISPID_IRTop;
pub const DISPID_IRLeft = DISPID_InkRectangle.DISPID_IRLeft;
pub const DISPID_IRBottom = DISPID_InkRectangle.DISPID_IRBottom;
pub const DISPID_IRRight = DISPID_InkRectangle.DISPID_IRRight;
pub const DISPID_IRGetRectangle = DISPID_InkRectangle.DISPID_IRGetRectangle;
pub const DISPID_IRSetRectangle = DISPID_InkRectangle.DISPID_IRSetRectangle;
pub const DISPID_IRData = DISPID_InkRectangle.DISPID_IRData;

pub const DISPID_InkExtendedProperty = extern enum(i32) {
    DISPID_IEPGuid = 1,
    DISPID_IEPData = 2,
};
pub const DISPID_IEPGuid = DISPID_InkExtendedProperty.DISPID_IEPGuid;
pub const DISPID_IEPData = DISPID_InkExtendedProperty.DISPID_IEPData;

pub const DISPID_InkExtendedProperties = extern enum(i32) {
    DISPID_IEPs_NewEnum = -4,
    DISPID_IEPsItem = 0,
    DISPID_IEPsCount = 1,
    DISPID_IEPsAdd = 2,
    DISPID_IEPsRemove = 3,
    DISPID_IEPsClear = 4,
    DISPID_IEPsDoesPropertyExist = 5,
};
pub const DISPID_IEPs_NewEnum = DISPID_InkExtendedProperties.DISPID_IEPs_NewEnum;
pub const DISPID_IEPsItem = DISPID_InkExtendedProperties.DISPID_IEPsItem;
pub const DISPID_IEPsCount = DISPID_InkExtendedProperties.DISPID_IEPsCount;
pub const DISPID_IEPsAdd = DISPID_InkExtendedProperties.DISPID_IEPsAdd;
pub const DISPID_IEPsRemove = DISPID_InkExtendedProperties.DISPID_IEPsRemove;
pub const DISPID_IEPsClear = DISPID_InkExtendedProperties.DISPID_IEPsClear;
pub const DISPID_IEPsDoesPropertyExist = DISPID_InkExtendedProperties.DISPID_IEPsDoesPropertyExist;

pub const DISPID_InkDrawingAttributes = extern enum(i32) {
    DISPID_DAHeight = 1,
    DISPID_DAColor = 2,
    DISPID_DAWidth = 3,
    DISPID_DAFitToCurve = 4,
    DISPID_DAIgnorePressure = 5,
    DISPID_DAAntiAliased = 6,
    DISPID_DATransparency = 7,
    DISPID_DARasterOperation = 8,
    DISPID_DAPenTip = 9,
    DISPID_DAClone = 10,
    DISPID_DAExtendedProperties = 11,
};
pub const DISPID_DAHeight = DISPID_InkDrawingAttributes.DISPID_DAHeight;
pub const DISPID_DAColor = DISPID_InkDrawingAttributes.DISPID_DAColor;
pub const DISPID_DAWidth = DISPID_InkDrawingAttributes.DISPID_DAWidth;
pub const DISPID_DAFitToCurve = DISPID_InkDrawingAttributes.DISPID_DAFitToCurve;
pub const DISPID_DAIgnorePressure = DISPID_InkDrawingAttributes.DISPID_DAIgnorePressure;
pub const DISPID_DAAntiAliased = DISPID_InkDrawingAttributes.DISPID_DAAntiAliased;
pub const DISPID_DATransparency = DISPID_InkDrawingAttributes.DISPID_DATransparency;
pub const DISPID_DARasterOperation = DISPID_InkDrawingAttributes.DISPID_DARasterOperation;
pub const DISPID_DAPenTip = DISPID_InkDrawingAttributes.DISPID_DAPenTip;
pub const DISPID_DAClone = DISPID_InkDrawingAttributes.DISPID_DAClone;
pub const DISPID_DAExtendedProperties = DISPID_InkDrawingAttributes.DISPID_DAExtendedProperties;

pub const DISPID_InkTransform = extern enum(i32) {
    DISPID_ITReset = 1,
    DISPID_ITTranslate = 2,
    DISPID_ITRotate = 3,
    DISPID_ITReflect = 4,
    DISPID_ITShear = 5,
    DISPID_ITScale = 6,
    DISPID_ITeM11 = 7,
    DISPID_ITeM12 = 8,
    DISPID_ITeM21 = 9,
    DISPID_ITeM22 = 10,
    DISPID_ITeDx = 11,
    DISPID_ITeDy = 12,
    DISPID_ITGetTransform = 13,
    DISPID_ITSetTransform = 14,
    DISPID_ITData = 15,
};
pub const DISPID_ITReset = DISPID_InkTransform.DISPID_ITReset;
pub const DISPID_ITTranslate = DISPID_InkTransform.DISPID_ITTranslate;
pub const DISPID_ITRotate = DISPID_InkTransform.DISPID_ITRotate;
pub const DISPID_ITReflect = DISPID_InkTransform.DISPID_ITReflect;
pub const DISPID_ITShear = DISPID_InkTransform.DISPID_ITShear;
pub const DISPID_ITScale = DISPID_InkTransform.DISPID_ITScale;
pub const DISPID_ITeM11 = DISPID_InkTransform.DISPID_ITeM11;
pub const DISPID_ITeM12 = DISPID_InkTransform.DISPID_ITeM12;
pub const DISPID_ITeM21 = DISPID_InkTransform.DISPID_ITeM21;
pub const DISPID_ITeM22 = DISPID_InkTransform.DISPID_ITeM22;
pub const DISPID_ITeDx = DISPID_InkTransform.DISPID_ITeDx;
pub const DISPID_ITeDy = DISPID_InkTransform.DISPID_ITeDy;
pub const DISPID_ITGetTransform = DISPID_InkTransform.DISPID_ITGetTransform;
pub const DISPID_ITSetTransform = DISPID_InkTransform.DISPID_ITSetTransform;
pub const DISPID_ITData = DISPID_InkTransform.DISPID_ITData;

pub const InkApplicationGesture = extern enum(i32) {
    IAG_AllGestures = 0,
    IAG_NoGesture = 61440,
    IAG_Scratchout = 61441,
    IAG_Triangle = 61442,
    IAG_Square = 61443,
    IAG_Star = 61444,
    IAG_Check = 61445,
    IAG_Curlicue = 61456,
    IAG_DoubleCurlicue = 61457,
    IAG_Circle = 61472,
    IAG_DoubleCircle = 61473,
    IAG_SemiCircleLeft = 61480,
    IAG_SemiCircleRight = 61481,
    IAG_ChevronUp = 61488,
    IAG_ChevronDown = 61489,
    IAG_ChevronLeft = 61490,
    IAG_ChevronRight = 61491,
    IAG_ArrowUp = 61496,
    IAG_ArrowDown = 61497,
    IAG_ArrowLeft = 61498,
    IAG_ArrowRight = 61499,
    IAG_Up = 61528,
    IAG_Down = 61529,
    IAG_Left = 61530,
    IAG_Right = 61531,
    IAG_UpDown = 61536,
    IAG_DownUp = 61537,
    IAG_LeftRight = 61538,
    IAG_RightLeft = 61539,
    IAG_UpLeftLong = 61540,
    IAG_UpRightLong = 61541,
    IAG_DownLeftLong = 61542,
    IAG_DownRightLong = 61543,
    IAG_UpLeft = 61544,
    IAG_UpRight = 61545,
    IAG_DownLeft = 61546,
    IAG_DownRight = 61547,
    IAG_LeftUp = 61548,
    IAG_LeftDown = 61549,
    IAG_RightUp = 61550,
    IAG_RightDown = 61551,
    IAG_Exclamation = 61604,
    IAG_Tap = 61680,
    IAG_DoubleTap = 61681,
};
pub const IAG_AllGestures = InkApplicationGesture.IAG_AllGestures;
pub const IAG_NoGesture = InkApplicationGesture.IAG_NoGesture;
pub const IAG_Scratchout = InkApplicationGesture.IAG_Scratchout;
pub const IAG_Triangle = InkApplicationGesture.IAG_Triangle;
pub const IAG_Square = InkApplicationGesture.IAG_Square;
pub const IAG_Star = InkApplicationGesture.IAG_Star;
pub const IAG_Check = InkApplicationGesture.IAG_Check;
pub const IAG_Curlicue = InkApplicationGesture.IAG_Curlicue;
pub const IAG_DoubleCurlicue = InkApplicationGesture.IAG_DoubleCurlicue;
pub const IAG_Circle = InkApplicationGesture.IAG_Circle;
pub const IAG_DoubleCircle = InkApplicationGesture.IAG_DoubleCircle;
pub const IAG_SemiCircleLeft = InkApplicationGesture.IAG_SemiCircleLeft;
pub const IAG_SemiCircleRight = InkApplicationGesture.IAG_SemiCircleRight;
pub const IAG_ChevronUp = InkApplicationGesture.IAG_ChevronUp;
pub const IAG_ChevronDown = InkApplicationGesture.IAG_ChevronDown;
pub const IAG_ChevronLeft = InkApplicationGesture.IAG_ChevronLeft;
pub const IAG_ChevronRight = InkApplicationGesture.IAG_ChevronRight;
pub const IAG_ArrowUp = InkApplicationGesture.IAG_ArrowUp;
pub const IAG_ArrowDown = InkApplicationGesture.IAG_ArrowDown;
pub const IAG_ArrowLeft = InkApplicationGesture.IAG_ArrowLeft;
pub const IAG_ArrowRight = InkApplicationGesture.IAG_ArrowRight;
pub const IAG_Up = InkApplicationGesture.IAG_Up;
pub const IAG_Down = InkApplicationGesture.IAG_Down;
pub const IAG_Left = InkApplicationGesture.IAG_Left;
pub const IAG_Right = InkApplicationGesture.IAG_Right;
pub const IAG_UpDown = InkApplicationGesture.IAG_UpDown;
pub const IAG_DownUp = InkApplicationGesture.IAG_DownUp;
pub const IAG_LeftRight = InkApplicationGesture.IAG_LeftRight;
pub const IAG_RightLeft = InkApplicationGesture.IAG_RightLeft;
pub const IAG_UpLeftLong = InkApplicationGesture.IAG_UpLeftLong;
pub const IAG_UpRightLong = InkApplicationGesture.IAG_UpRightLong;
pub const IAG_DownLeftLong = InkApplicationGesture.IAG_DownLeftLong;
pub const IAG_DownRightLong = InkApplicationGesture.IAG_DownRightLong;
pub const IAG_UpLeft = InkApplicationGesture.IAG_UpLeft;
pub const IAG_UpRight = InkApplicationGesture.IAG_UpRight;
pub const IAG_DownLeft = InkApplicationGesture.IAG_DownLeft;
pub const IAG_DownRight = InkApplicationGesture.IAG_DownRight;
pub const IAG_LeftUp = InkApplicationGesture.IAG_LeftUp;
pub const IAG_LeftDown = InkApplicationGesture.IAG_LeftDown;
pub const IAG_RightUp = InkApplicationGesture.IAG_RightUp;
pub const IAG_RightDown = InkApplicationGesture.IAG_RightDown;
pub const IAG_Exclamation = InkApplicationGesture.IAG_Exclamation;
pub const IAG_Tap = InkApplicationGesture.IAG_Tap;
pub const IAG_DoubleTap = InkApplicationGesture.IAG_DoubleTap;

pub const InkSystemGesture = extern enum(i32) {
    ISG_Tap = 16,
    ISG_DoubleTap = 17,
    ISG_RightTap = 18,
    ISG_Drag = 19,
    ISG_RightDrag = 20,
    ISG_HoldEnter = 21,
    ISG_HoldLeave = 22,
    ISG_HoverEnter = 23,
    ISG_HoverLeave = 24,
    ISG_Flick = 31,
};
pub const ISG_Tap = InkSystemGesture.ISG_Tap;
pub const ISG_DoubleTap = InkSystemGesture.ISG_DoubleTap;
pub const ISG_RightTap = InkSystemGesture.ISG_RightTap;
pub const ISG_Drag = InkSystemGesture.ISG_Drag;
pub const ISG_RightDrag = InkSystemGesture.ISG_RightDrag;
pub const ISG_HoldEnter = InkSystemGesture.ISG_HoldEnter;
pub const ISG_HoldLeave = InkSystemGesture.ISG_HoldLeave;
pub const ISG_HoverEnter = InkSystemGesture.ISG_HoverEnter;
pub const ISG_HoverLeave = InkSystemGesture.ISG_HoverLeave;
pub const ISG_Flick = InkSystemGesture.ISG_Flick;

pub const InkRecognitionConfidence = extern enum(i32) {
    IRC_Strong = 0,
    IRC_Intermediate = 1,
    IRC_Poor = 2,
};
pub const IRC_Strong = InkRecognitionConfidence.IRC_Strong;
pub const IRC_Intermediate = InkRecognitionConfidence.IRC_Intermediate;
pub const IRC_Poor = InkRecognitionConfidence.IRC_Poor;

pub const DISPID_InkGesture = extern enum(i32) {
    DISPID_IGId = 0,
    DISPID_IGGetHotPoint = 1,
    DISPID_IGConfidence = 2,
};
pub const DISPID_IGId = DISPID_InkGesture.DISPID_IGId;
pub const DISPID_IGGetHotPoint = DISPID_InkGesture.DISPID_IGGetHotPoint;
pub const DISPID_IGConfidence = DISPID_InkGesture.DISPID_IGConfidence;

pub const DISPID_InkCursor = extern enum(i32) {
    DISPID_ICsrName = 0,
    DISPID_ICsrId = 1,
    DISPID_ICsrDrawingAttributes = 2,
    DISPID_ICsrButtons = 3,
    DISPID_ICsrInverted = 4,
    DISPID_ICsrTablet = 5,
};
pub const DISPID_ICsrName = DISPID_InkCursor.DISPID_ICsrName;
pub const DISPID_ICsrId = DISPID_InkCursor.DISPID_ICsrId;
pub const DISPID_ICsrDrawingAttributes = DISPID_InkCursor.DISPID_ICsrDrawingAttributes;
pub const DISPID_ICsrButtons = DISPID_InkCursor.DISPID_ICsrButtons;
pub const DISPID_ICsrInverted = DISPID_InkCursor.DISPID_ICsrInverted;
pub const DISPID_ICsrTablet = DISPID_InkCursor.DISPID_ICsrTablet;

pub const DISPID_InkCursors = extern enum(i32) {
    DISPID_ICs_NewEnum = -4,
    DISPID_ICsItem = 0,
    DISPID_ICsCount = 1,
};
pub const DISPID_ICs_NewEnum = DISPID_InkCursors.DISPID_ICs_NewEnum;
pub const DISPID_ICsItem = DISPID_InkCursors.DISPID_ICsItem;
pub const DISPID_ICsCount = DISPID_InkCursors.DISPID_ICsCount;

pub const InkCursorButtonState = extern enum(i32) {
    ICBS_Unavailable = 0,
    ICBS_Up = 1,
    ICBS_Down = 2,
};
pub const ICBS_Unavailable = InkCursorButtonState.ICBS_Unavailable;
pub const ICBS_Up = InkCursorButtonState.ICBS_Up;
pub const ICBS_Down = InkCursorButtonState.ICBS_Down;

pub const DISPID_InkCursorButton = extern enum(i32) {
    DISPID_ICBName = 0,
    DISPID_ICBId = 1,
    DISPID_ICBState = 2,
};
pub const DISPID_ICBName = DISPID_InkCursorButton.DISPID_ICBName;
pub const DISPID_ICBId = DISPID_InkCursorButton.DISPID_ICBId;
pub const DISPID_ICBState = DISPID_InkCursorButton.DISPID_ICBState;

pub const DISPID_InkCursorButtons = extern enum(i32) {
    DISPID_ICBs_NewEnum = -4,
    DISPID_ICBsItem = 0,
    DISPID_ICBsCount = 1,
};
pub const DISPID_ICBs_NewEnum = DISPID_InkCursorButtons.DISPID_ICBs_NewEnum;
pub const DISPID_ICBsItem = DISPID_InkCursorButtons.DISPID_ICBsItem;
pub const DISPID_ICBsCount = DISPID_InkCursorButtons.DISPID_ICBsCount;

pub const TabletHardwareCapabilities = extern enum(i32) {
    THWC_Integrated = 1,
    THWC_CursorMustTouch = 2,
    THWC_HardProximity = 4,
    THWC_CursorsHavePhysicalIds = 8,
};
pub const THWC_Integrated = TabletHardwareCapabilities.THWC_Integrated;
pub const THWC_CursorMustTouch = TabletHardwareCapabilities.THWC_CursorMustTouch;
pub const THWC_HardProximity = TabletHardwareCapabilities.THWC_HardProximity;
pub const THWC_CursorsHavePhysicalIds = TabletHardwareCapabilities.THWC_CursorsHavePhysicalIds;

pub const TabletPropertyMetricUnit = extern enum(i32) {
    TPMU_Default = 0,
    TPMU_Inches = 1,
    TPMU_Centimeters = 2,
    TPMU_Degrees = 3,
    TPMU_Radians = 4,
    TPMU_Seconds = 5,
    TPMU_Pounds = 6,
    TPMU_Grams = 7,
};
pub const TPMU_Default = TabletPropertyMetricUnit.TPMU_Default;
pub const TPMU_Inches = TabletPropertyMetricUnit.TPMU_Inches;
pub const TPMU_Centimeters = TabletPropertyMetricUnit.TPMU_Centimeters;
pub const TPMU_Degrees = TabletPropertyMetricUnit.TPMU_Degrees;
pub const TPMU_Radians = TabletPropertyMetricUnit.TPMU_Radians;
pub const TPMU_Seconds = TabletPropertyMetricUnit.TPMU_Seconds;
pub const TPMU_Pounds = TabletPropertyMetricUnit.TPMU_Pounds;
pub const TPMU_Grams = TabletPropertyMetricUnit.TPMU_Grams;

pub const DISPID_InkTablet = extern enum(i32) {
    DISPID_ITName = 0,
    DISPID_ITPlugAndPlayId = 1,
    DISPID_ITPropertyMetrics = 2,
    DISPID_ITIsPacketPropertySupported = 3,
    DISPID_ITMaximumInputRectangle = 4,
    DISPID_ITHardwareCapabilities = 5,
};
pub const DISPID_ITName = DISPID_InkTablet.DISPID_ITName;
pub const DISPID_ITPlugAndPlayId = DISPID_InkTablet.DISPID_ITPlugAndPlayId;
pub const DISPID_ITPropertyMetrics = DISPID_InkTablet.DISPID_ITPropertyMetrics;
pub const DISPID_ITIsPacketPropertySupported = DISPID_InkTablet.DISPID_ITIsPacketPropertySupported;
pub const DISPID_ITMaximumInputRectangle = DISPID_InkTablet.DISPID_ITMaximumInputRectangle;
pub const DISPID_ITHardwareCapabilities = DISPID_InkTablet.DISPID_ITHardwareCapabilities;

pub const TabletDeviceKind = extern enum(i32) {
    TDK_Mouse = 0,
    TDK_Pen = 1,
    TDK_Touch = 2,
};
pub const TDK_Mouse = TabletDeviceKind.TDK_Mouse;
pub const TDK_Pen = TabletDeviceKind.TDK_Pen;
pub const TDK_Touch = TabletDeviceKind.TDK_Touch;

pub const DISPID_InkTablet2 = extern enum(i32) {
    DISPID_IT2DeviceKind = 0,
};
pub const DISPID_IT2DeviceKind = DISPID_InkTablet2.DISPID_IT2DeviceKind;

pub const DISPID_InkTablet3 = extern enum(i32) {
    DISPID_IT3IsMultiTouch = 0,
    DISPID_IT3MaximumCursors = 1,
};
pub const DISPID_IT3IsMultiTouch = DISPID_InkTablet3.DISPID_IT3IsMultiTouch;
pub const DISPID_IT3MaximumCursors = DISPID_InkTablet3.DISPID_IT3MaximumCursors;

pub const DISPID_InkTablets = extern enum(i32) {
    DISPID_ITs_NewEnum = -4,
    DISPID_ITsItem = 0,
    DISPID_ITsDefaultTablet = 1,
    DISPID_ITsCount = 2,
    DISPID_ITsIsPacketPropertySupported = 3,
};
pub const DISPID_ITs_NewEnum = DISPID_InkTablets.DISPID_ITs_NewEnum;
pub const DISPID_ITsItem = DISPID_InkTablets.DISPID_ITsItem;
pub const DISPID_ITsDefaultTablet = DISPID_InkTablets.DISPID_ITsDefaultTablet;
pub const DISPID_ITsCount = DISPID_InkTablets.DISPID_ITsCount;
pub const DISPID_ITsIsPacketPropertySupported = DISPID_InkTablets.DISPID_ITsIsPacketPropertySupported;

pub const DISPID_InkStrokeDisp = extern enum(i32) {
    DISPID_ISDInkIndex = 1,
    DISPID_ISDID = 2,
    DISPID_ISDGetBoundingBox = 3,
    DISPID_ISDDrawingAttributes = 4,
    DISPID_ISDFindIntersections = 5,
    DISPID_ISDGetRectangleIntersections = 6,
    DISPID_ISDClip = 7,
    DISPID_ISDHitTestCircle = 8,
    DISPID_ISDNearestPoint = 9,
    DISPID_ISDSplit = 10,
    DISPID_ISDExtendedProperties = 11,
    DISPID_ISDInk = 12,
    DISPID_ISDBezierPoints = 13,
    DISPID_ISDPolylineCusps = 14,
    DISPID_ISDBezierCusps = 15,
    DISPID_ISDSelfIntersections = 16,
    DISPID_ISDPacketCount = 17,
    DISPID_ISDPacketSize = 18,
    DISPID_ISDPacketDescription = 19,
    DISPID_ISDDeleted = 20,
    DISPID_ISDGetPacketDescriptionPropertyMetrics = 21,
    DISPID_ISDGetPoints = 22,
    DISPID_ISDSetPoints = 23,
    DISPID_ISDGetPacketData = 24,
    DISPID_ISDGetPacketValuesByProperty = 25,
    DISPID_ISDSetPacketValuesByProperty = 26,
    DISPID_ISDGetFlattenedBezierPoints = 27,
    DISPID_ISDScaleToRectangle = 28,
    DISPID_ISDTransform = 29,
    DISPID_ISDMove = 30,
    DISPID_ISDRotate = 31,
    DISPID_ISDShear = 32,
    DISPID_ISDScale = 33,
};
pub const DISPID_ISDInkIndex = DISPID_InkStrokeDisp.DISPID_ISDInkIndex;
pub const DISPID_ISDID = DISPID_InkStrokeDisp.DISPID_ISDID;
pub const DISPID_ISDGetBoundingBox = DISPID_InkStrokeDisp.DISPID_ISDGetBoundingBox;
pub const DISPID_ISDDrawingAttributes = DISPID_InkStrokeDisp.DISPID_ISDDrawingAttributes;
pub const DISPID_ISDFindIntersections = DISPID_InkStrokeDisp.DISPID_ISDFindIntersections;
pub const DISPID_ISDGetRectangleIntersections = DISPID_InkStrokeDisp.DISPID_ISDGetRectangleIntersections;
pub const DISPID_ISDClip = DISPID_InkStrokeDisp.DISPID_ISDClip;
pub const DISPID_ISDHitTestCircle = DISPID_InkStrokeDisp.DISPID_ISDHitTestCircle;
pub const DISPID_ISDNearestPoint = DISPID_InkStrokeDisp.DISPID_ISDNearestPoint;
pub const DISPID_ISDSplit = DISPID_InkStrokeDisp.DISPID_ISDSplit;
pub const DISPID_ISDExtendedProperties = DISPID_InkStrokeDisp.DISPID_ISDExtendedProperties;
pub const DISPID_ISDInk = DISPID_InkStrokeDisp.DISPID_ISDInk;
pub const DISPID_ISDBezierPoints = DISPID_InkStrokeDisp.DISPID_ISDBezierPoints;
pub const DISPID_ISDPolylineCusps = DISPID_InkStrokeDisp.DISPID_ISDPolylineCusps;
pub const DISPID_ISDBezierCusps = DISPID_InkStrokeDisp.DISPID_ISDBezierCusps;
pub const DISPID_ISDSelfIntersections = DISPID_InkStrokeDisp.DISPID_ISDSelfIntersections;
pub const DISPID_ISDPacketCount = DISPID_InkStrokeDisp.DISPID_ISDPacketCount;
pub const DISPID_ISDPacketSize = DISPID_InkStrokeDisp.DISPID_ISDPacketSize;
pub const DISPID_ISDPacketDescription = DISPID_InkStrokeDisp.DISPID_ISDPacketDescription;
pub const DISPID_ISDDeleted = DISPID_InkStrokeDisp.DISPID_ISDDeleted;
pub const DISPID_ISDGetPacketDescriptionPropertyMetrics = DISPID_InkStrokeDisp.DISPID_ISDGetPacketDescriptionPropertyMetrics;
pub const DISPID_ISDGetPoints = DISPID_InkStrokeDisp.DISPID_ISDGetPoints;
pub const DISPID_ISDSetPoints = DISPID_InkStrokeDisp.DISPID_ISDSetPoints;
pub const DISPID_ISDGetPacketData = DISPID_InkStrokeDisp.DISPID_ISDGetPacketData;
pub const DISPID_ISDGetPacketValuesByProperty = DISPID_InkStrokeDisp.DISPID_ISDGetPacketValuesByProperty;
pub const DISPID_ISDSetPacketValuesByProperty = DISPID_InkStrokeDisp.DISPID_ISDSetPacketValuesByProperty;
pub const DISPID_ISDGetFlattenedBezierPoints = DISPID_InkStrokeDisp.DISPID_ISDGetFlattenedBezierPoints;
pub const DISPID_ISDScaleToRectangle = DISPID_InkStrokeDisp.DISPID_ISDScaleToRectangle;
pub const DISPID_ISDTransform = DISPID_InkStrokeDisp.DISPID_ISDTransform;
pub const DISPID_ISDMove = DISPID_InkStrokeDisp.DISPID_ISDMove;
pub const DISPID_ISDRotate = DISPID_InkStrokeDisp.DISPID_ISDRotate;
pub const DISPID_ISDShear = DISPID_InkStrokeDisp.DISPID_ISDShear;
pub const DISPID_ISDScale = DISPID_InkStrokeDisp.DISPID_ISDScale;

pub const DISPID_InkStrokes = extern enum(i32) {
    DISPID_ISs_NewEnum = -4,
    DISPID_ISsItem = 0,
    DISPID_ISsCount = 1,
    DISPID_ISsValid = 2,
    DISPID_ISsInk = 3,
    DISPID_ISsAdd = 4,
    DISPID_ISsAddStrokes = 5,
    DISPID_ISsRemove = 6,
    DISPID_ISsRemoveStrokes = 7,
    DISPID_ISsToString = 8,
    DISPID_ISsModifyDrawingAttributes = 9,
    DISPID_ISsGetBoundingBox = 10,
    DISPID_ISsScaleToRectangle = 11,
    DISPID_ISsTransform = 12,
    DISPID_ISsMove = 13,
    DISPID_ISsRotate = 14,
    DISPID_ISsShear = 15,
    DISPID_ISsScale = 16,
    DISPID_ISsClip = 17,
    DISPID_ISsRecognitionResult = 18,
    DISPID_ISsRemoveRecognitionResult = 19,
};
pub const DISPID_ISs_NewEnum = DISPID_InkStrokes.DISPID_ISs_NewEnum;
pub const DISPID_ISsItem = DISPID_InkStrokes.DISPID_ISsItem;
pub const DISPID_ISsCount = DISPID_InkStrokes.DISPID_ISsCount;
pub const DISPID_ISsValid = DISPID_InkStrokes.DISPID_ISsValid;
pub const DISPID_ISsInk = DISPID_InkStrokes.DISPID_ISsInk;
pub const DISPID_ISsAdd = DISPID_InkStrokes.DISPID_ISsAdd;
pub const DISPID_ISsAddStrokes = DISPID_InkStrokes.DISPID_ISsAddStrokes;
pub const DISPID_ISsRemove = DISPID_InkStrokes.DISPID_ISsRemove;
pub const DISPID_ISsRemoveStrokes = DISPID_InkStrokes.DISPID_ISsRemoveStrokes;
pub const DISPID_ISsToString = DISPID_InkStrokes.DISPID_ISsToString;
pub const DISPID_ISsModifyDrawingAttributes = DISPID_InkStrokes.DISPID_ISsModifyDrawingAttributes;
pub const DISPID_ISsGetBoundingBox = DISPID_InkStrokes.DISPID_ISsGetBoundingBox;
pub const DISPID_ISsScaleToRectangle = DISPID_InkStrokes.DISPID_ISsScaleToRectangle;
pub const DISPID_ISsTransform = DISPID_InkStrokes.DISPID_ISsTransform;
pub const DISPID_ISsMove = DISPID_InkStrokes.DISPID_ISsMove;
pub const DISPID_ISsRotate = DISPID_InkStrokes.DISPID_ISsRotate;
pub const DISPID_ISsShear = DISPID_InkStrokes.DISPID_ISsShear;
pub const DISPID_ISsScale = DISPID_InkStrokes.DISPID_ISsScale;
pub const DISPID_ISsClip = DISPID_InkStrokes.DISPID_ISsClip;
pub const DISPID_ISsRecognitionResult = DISPID_InkStrokes.DISPID_ISsRecognitionResult;
pub const DISPID_ISsRemoveRecognitionResult = DISPID_InkStrokes.DISPID_ISsRemoveRecognitionResult;

pub const DISPID_InkCustomStrokes = extern enum(i32) {
    DISPID_ICSs_NewEnum = -4,
    DISPID_ICSsItem = 0,
    DISPID_ICSsCount = 1,
    DISPID_ICSsAdd = 2,
    DISPID_ICSsRemove = 3,
    DISPID_ICSsClear = 4,
};
pub const DISPID_ICSs_NewEnum = DISPID_InkCustomStrokes.DISPID_ICSs_NewEnum;
pub const DISPID_ICSsItem = DISPID_InkCustomStrokes.DISPID_ICSsItem;
pub const DISPID_ICSsCount = DISPID_InkCustomStrokes.DISPID_ICSsCount;
pub const DISPID_ICSsAdd = DISPID_InkCustomStrokes.DISPID_ICSsAdd;
pub const DISPID_ICSsRemove = DISPID_InkCustomStrokes.DISPID_ICSsRemove;
pub const DISPID_ICSsClear = DISPID_InkCustomStrokes.DISPID_ICSsClear;

pub const DISPID_StrokeEvent = extern enum(i32) {
    DISPID_SEStrokesAdded = 1,
    DISPID_SEStrokesRemoved = 2,
};
pub const DISPID_SEStrokesAdded = DISPID_StrokeEvent.DISPID_SEStrokesAdded;
pub const DISPID_SEStrokesRemoved = DISPID_StrokeEvent.DISPID_SEStrokesRemoved;

pub const DISPID_Ink = extern enum(i32) {
    DISPID_IStrokes = 1,
    DISPID_IExtendedProperties = 2,
    DISPID_IGetBoundingBox = 3,
    DISPID_IDeleteStrokes = 4,
    DISPID_IDeleteStroke = 5,
    DISPID_IExtractStrokes = 6,
    DISPID_IExtractWithRectangle = 7,
    DISPID_IDirty = 8,
    DISPID_ICustomStrokes = 9,
    DISPID_IClone = 10,
    DISPID_IHitTestCircle = 11,
    DISPID_IHitTestWithRectangle = 12,
    DISPID_IHitTestWithLasso = 13,
    DISPID_INearestPoint = 14,
    DISPID_ICreateStrokes = 15,
    DISPID_ICreateStroke = 16,
    DISPID_IAddStrokesAtRectangle = 17,
    DISPID_IClip = 18,
    DISPID_ISave = 19,
    DISPID_ILoad = 20,
    DISPID_ICreateStrokeFromPoints = 21,
    DISPID_IClipboardCopyWithRectangle = 22,
    DISPID_IClipboardCopy = 23,
    DISPID_ICanPaste = 24,
    DISPID_IClipboardPaste = 25,
};
pub const DISPID_IStrokes = DISPID_Ink.DISPID_IStrokes;
pub const DISPID_IExtendedProperties = DISPID_Ink.DISPID_IExtendedProperties;
pub const DISPID_IGetBoundingBox = DISPID_Ink.DISPID_IGetBoundingBox;
pub const DISPID_IDeleteStrokes = DISPID_Ink.DISPID_IDeleteStrokes;
pub const DISPID_IDeleteStroke = DISPID_Ink.DISPID_IDeleteStroke;
pub const DISPID_IExtractStrokes = DISPID_Ink.DISPID_IExtractStrokes;
pub const DISPID_IExtractWithRectangle = DISPID_Ink.DISPID_IExtractWithRectangle;
pub const DISPID_IDirty = DISPID_Ink.DISPID_IDirty;
pub const DISPID_ICustomStrokes = DISPID_Ink.DISPID_ICustomStrokes;
pub const DISPID_IClone = DISPID_Ink.DISPID_IClone;
pub const DISPID_IHitTestCircle = DISPID_Ink.DISPID_IHitTestCircle;
pub const DISPID_IHitTestWithRectangle = DISPID_Ink.DISPID_IHitTestWithRectangle;
pub const DISPID_IHitTestWithLasso = DISPID_Ink.DISPID_IHitTestWithLasso;
pub const DISPID_INearestPoint = DISPID_Ink.DISPID_INearestPoint;
pub const DISPID_ICreateStrokes = DISPID_Ink.DISPID_ICreateStrokes;
pub const DISPID_ICreateStroke = DISPID_Ink.DISPID_ICreateStroke;
pub const DISPID_IAddStrokesAtRectangle = DISPID_Ink.DISPID_IAddStrokesAtRectangle;
pub const DISPID_IClip = DISPID_Ink.DISPID_IClip;
pub const DISPID_ISave = DISPID_Ink.DISPID_ISave;
pub const DISPID_ILoad = DISPID_Ink.DISPID_ILoad;
pub const DISPID_ICreateStrokeFromPoints = DISPID_Ink.DISPID_ICreateStrokeFromPoints;
pub const DISPID_IClipboardCopyWithRectangle = DISPID_Ink.DISPID_IClipboardCopyWithRectangle;
pub const DISPID_IClipboardCopy = DISPID_Ink.DISPID_IClipboardCopy;
pub const DISPID_ICanPaste = DISPID_Ink.DISPID_ICanPaste;
pub const DISPID_IClipboardPaste = DISPID_Ink.DISPID_IClipboardPaste;

pub const DISPID_InkEvent = extern enum(i32) {
    DISPID_IEInkAdded = 1,
    DISPID_IEInkDeleted = 2,
};
pub const DISPID_IEInkAdded = DISPID_InkEvent.DISPID_IEInkAdded;
pub const DISPID_IEInkDeleted = DISPID_InkEvent.DISPID_IEInkDeleted;

pub const DISPID_InkRenderer = extern enum(i32) {
    DISPID_IRGetViewTransform = 1,
    DISPID_IRSetViewTransform = 2,
    DISPID_IRGetObjectTransform = 3,
    DISPID_IRSetObjectTransform = 4,
    DISPID_IRDraw = 5,
    DISPID_IRDrawStroke = 6,
    DISPID_IRPixelToInkSpace = 7,
    DISPID_IRInkSpaceToPixel = 8,
    DISPID_IRPixelToInkSpaceFromPoints = 9,
    DISPID_IRInkSpaceToPixelFromPoints = 10,
    DISPID_IRMeasure = 11,
    DISPID_IRMeasureStroke = 12,
    DISPID_IRMove = 13,
    DISPID_IRRotate = 14,
    DISPID_IRScale = 15,
};
pub const DISPID_IRGetViewTransform = DISPID_InkRenderer.DISPID_IRGetViewTransform;
pub const DISPID_IRSetViewTransform = DISPID_InkRenderer.DISPID_IRSetViewTransform;
pub const DISPID_IRGetObjectTransform = DISPID_InkRenderer.DISPID_IRGetObjectTransform;
pub const DISPID_IRSetObjectTransform = DISPID_InkRenderer.DISPID_IRSetObjectTransform;
pub const DISPID_IRDraw = DISPID_InkRenderer.DISPID_IRDraw;
pub const DISPID_IRDrawStroke = DISPID_InkRenderer.DISPID_IRDrawStroke;
pub const DISPID_IRPixelToInkSpace = DISPID_InkRenderer.DISPID_IRPixelToInkSpace;
pub const DISPID_IRInkSpaceToPixel = DISPID_InkRenderer.DISPID_IRInkSpaceToPixel;
pub const DISPID_IRPixelToInkSpaceFromPoints = DISPID_InkRenderer.DISPID_IRPixelToInkSpaceFromPoints;
pub const DISPID_IRInkSpaceToPixelFromPoints = DISPID_InkRenderer.DISPID_IRInkSpaceToPixelFromPoints;
pub const DISPID_IRMeasure = DISPID_InkRenderer.DISPID_IRMeasure;
pub const DISPID_IRMeasureStroke = DISPID_InkRenderer.DISPID_IRMeasureStroke;
pub const DISPID_IRMove = DISPID_InkRenderer.DISPID_IRMove;
pub const DISPID_IRRotate = DISPID_InkRenderer.DISPID_IRRotate;
pub const DISPID_IRScale = DISPID_InkRenderer.DISPID_IRScale;

pub const InkCollectorEventInterest = extern enum(i32) {
    ICEI_DefaultEvents = -1,
    ICEI_CursorDown = 0,
    ICEI_Stroke = 1,
    ICEI_NewPackets = 2,
    ICEI_NewInAirPackets = 3,
    ICEI_CursorButtonDown = 4,
    ICEI_CursorButtonUp = 5,
    ICEI_CursorInRange = 6,
    ICEI_CursorOutOfRange = 7,
    ICEI_SystemGesture = 8,
    ICEI_TabletAdded = 9,
    ICEI_TabletRemoved = 10,
    ICEI_MouseDown = 11,
    ICEI_MouseMove = 12,
    ICEI_MouseUp = 13,
    ICEI_MouseWheel = 14,
    ICEI_DblClick = 15,
    ICEI_AllEvents = 16,
};
pub const ICEI_DefaultEvents = InkCollectorEventInterest.ICEI_DefaultEvents;
pub const ICEI_CursorDown = InkCollectorEventInterest.ICEI_CursorDown;
pub const ICEI_Stroke = InkCollectorEventInterest.ICEI_Stroke;
pub const ICEI_NewPackets = InkCollectorEventInterest.ICEI_NewPackets;
pub const ICEI_NewInAirPackets = InkCollectorEventInterest.ICEI_NewInAirPackets;
pub const ICEI_CursorButtonDown = InkCollectorEventInterest.ICEI_CursorButtonDown;
pub const ICEI_CursorButtonUp = InkCollectorEventInterest.ICEI_CursorButtonUp;
pub const ICEI_CursorInRange = InkCollectorEventInterest.ICEI_CursorInRange;
pub const ICEI_CursorOutOfRange = InkCollectorEventInterest.ICEI_CursorOutOfRange;
pub const ICEI_SystemGesture = InkCollectorEventInterest.ICEI_SystemGesture;
pub const ICEI_TabletAdded = InkCollectorEventInterest.ICEI_TabletAdded;
pub const ICEI_TabletRemoved = InkCollectorEventInterest.ICEI_TabletRemoved;
pub const ICEI_MouseDown = InkCollectorEventInterest.ICEI_MouseDown;
pub const ICEI_MouseMove = InkCollectorEventInterest.ICEI_MouseMove;
pub const ICEI_MouseUp = InkCollectorEventInterest.ICEI_MouseUp;
pub const ICEI_MouseWheel = InkCollectorEventInterest.ICEI_MouseWheel;
pub const ICEI_DblClick = InkCollectorEventInterest.ICEI_DblClick;
pub const ICEI_AllEvents = InkCollectorEventInterest.ICEI_AllEvents;

pub const InkMouseButton = extern enum(i32) {
    IMF_Left = 1,
    IMF_Right = 2,
    IMF_Middle = 4,
};
pub const IMF_Left = InkMouseButton.IMF_Left;
pub const IMF_Right = InkMouseButton.IMF_Right;
pub const IMF_Middle = InkMouseButton.IMF_Middle;

pub const InkShiftKeyModifierFlags = extern enum(i32) {
    IKM_Shift = 1,
    IKM_Control = 2,
    IKM_Alt = 4,
};
pub const IKM_Shift = InkShiftKeyModifierFlags.IKM_Shift;
pub const IKM_Control = InkShiftKeyModifierFlags.IKM_Control;
pub const IKM_Alt = InkShiftKeyModifierFlags.IKM_Alt;

pub const DISPID_InkCollectorEvent = extern enum(i32) {
    DISPID_ICEStroke = 1,
    DISPID_ICECursorDown = 2,
    DISPID_ICENewPackets = 3,
    DISPID_ICENewInAirPackets = 4,
    DISPID_ICECursorButtonDown = 5,
    DISPID_ICECursorButtonUp = 6,
    DISPID_ICECursorInRange = 7,
    DISPID_ICECursorOutOfRange = 8,
    DISPID_ICESystemGesture = 9,
    DISPID_ICEGesture = 10,
    DISPID_ICETabletAdded = 11,
    DISPID_ICETabletRemoved = 12,
    DISPID_IOEPainting = 13,
    DISPID_IOEPainted = 14,
    DISPID_IOESelectionChanging = 15,
    DISPID_IOESelectionChanged = 16,
    DISPID_IOESelectionMoving = 17,
    DISPID_IOESelectionMoved = 18,
    DISPID_IOESelectionResizing = 19,
    DISPID_IOESelectionResized = 20,
    DISPID_IOEStrokesDeleting = 21,
    DISPID_IOEStrokesDeleted = 22,
    DISPID_IPEChangeUICues = 23,
    DISPID_IPEClick = 24,
    DISPID_IPEDblClick = 25,
    DISPID_IPEInvalidated = 26,
    DISPID_IPEMouseDown = 27,
    DISPID_IPEMouseEnter = 28,
    DISPID_IPEMouseHover = 29,
    DISPID_IPEMouseLeave = 30,
    DISPID_IPEMouseMove = 31,
    DISPID_IPEMouseUp = 32,
    DISPID_IPEMouseWheel = 33,
    DISPID_IPESizeModeChanged = 34,
    DISPID_IPEStyleChanged = 35,
    DISPID_IPESystemColorsChanged = 36,
    DISPID_IPEKeyDown = 37,
    DISPID_IPEKeyPress = 38,
    DISPID_IPEKeyUp = 39,
    DISPID_IPEResize = 40,
    DISPID_IPESizeChanged = 41,
};
pub const DISPID_ICEStroke = DISPID_InkCollectorEvent.DISPID_ICEStroke;
pub const DISPID_ICECursorDown = DISPID_InkCollectorEvent.DISPID_ICECursorDown;
pub const DISPID_ICENewPackets = DISPID_InkCollectorEvent.DISPID_ICENewPackets;
pub const DISPID_ICENewInAirPackets = DISPID_InkCollectorEvent.DISPID_ICENewInAirPackets;
pub const DISPID_ICECursorButtonDown = DISPID_InkCollectorEvent.DISPID_ICECursorButtonDown;
pub const DISPID_ICECursorButtonUp = DISPID_InkCollectorEvent.DISPID_ICECursorButtonUp;
pub const DISPID_ICECursorInRange = DISPID_InkCollectorEvent.DISPID_ICECursorInRange;
pub const DISPID_ICECursorOutOfRange = DISPID_InkCollectorEvent.DISPID_ICECursorOutOfRange;
pub const DISPID_ICESystemGesture = DISPID_InkCollectorEvent.DISPID_ICESystemGesture;
pub const DISPID_ICEGesture = DISPID_InkCollectorEvent.DISPID_ICEGesture;
pub const DISPID_ICETabletAdded = DISPID_InkCollectorEvent.DISPID_ICETabletAdded;
pub const DISPID_ICETabletRemoved = DISPID_InkCollectorEvent.DISPID_ICETabletRemoved;
pub const DISPID_IOEPainting = DISPID_InkCollectorEvent.DISPID_IOEPainting;
pub const DISPID_IOEPainted = DISPID_InkCollectorEvent.DISPID_IOEPainted;
pub const DISPID_IOESelectionChanging = DISPID_InkCollectorEvent.DISPID_IOESelectionChanging;
pub const DISPID_IOESelectionChanged = DISPID_InkCollectorEvent.DISPID_IOESelectionChanged;
pub const DISPID_IOESelectionMoving = DISPID_InkCollectorEvent.DISPID_IOESelectionMoving;
pub const DISPID_IOESelectionMoved = DISPID_InkCollectorEvent.DISPID_IOESelectionMoved;
pub const DISPID_IOESelectionResizing = DISPID_InkCollectorEvent.DISPID_IOESelectionResizing;
pub const DISPID_IOESelectionResized = DISPID_InkCollectorEvent.DISPID_IOESelectionResized;
pub const DISPID_IOEStrokesDeleting = DISPID_InkCollectorEvent.DISPID_IOEStrokesDeleting;
pub const DISPID_IOEStrokesDeleted = DISPID_InkCollectorEvent.DISPID_IOEStrokesDeleted;
pub const DISPID_IPEChangeUICues = DISPID_InkCollectorEvent.DISPID_IPEChangeUICues;
pub const DISPID_IPEClick = DISPID_InkCollectorEvent.DISPID_IPEClick;
pub const DISPID_IPEDblClick = DISPID_InkCollectorEvent.DISPID_IPEDblClick;
pub const DISPID_IPEInvalidated = DISPID_InkCollectorEvent.DISPID_IPEInvalidated;
pub const DISPID_IPEMouseDown = DISPID_InkCollectorEvent.DISPID_IPEMouseDown;
pub const DISPID_IPEMouseEnter = DISPID_InkCollectorEvent.DISPID_IPEMouseEnter;
pub const DISPID_IPEMouseHover = DISPID_InkCollectorEvent.DISPID_IPEMouseHover;
pub const DISPID_IPEMouseLeave = DISPID_InkCollectorEvent.DISPID_IPEMouseLeave;
pub const DISPID_IPEMouseMove = DISPID_InkCollectorEvent.DISPID_IPEMouseMove;
pub const DISPID_IPEMouseUp = DISPID_InkCollectorEvent.DISPID_IPEMouseUp;
pub const DISPID_IPEMouseWheel = DISPID_InkCollectorEvent.DISPID_IPEMouseWheel;
pub const DISPID_IPESizeModeChanged = DISPID_InkCollectorEvent.DISPID_IPESizeModeChanged;
pub const DISPID_IPEStyleChanged = DISPID_InkCollectorEvent.DISPID_IPEStyleChanged;
pub const DISPID_IPESystemColorsChanged = DISPID_InkCollectorEvent.DISPID_IPESystemColorsChanged;
pub const DISPID_IPEKeyDown = DISPID_InkCollectorEvent.DISPID_IPEKeyDown;
pub const DISPID_IPEKeyPress = DISPID_InkCollectorEvent.DISPID_IPEKeyPress;
pub const DISPID_IPEKeyUp = DISPID_InkCollectorEvent.DISPID_IPEKeyUp;
pub const DISPID_IPEResize = DISPID_InkCollectorEvent.DISPID_IPEResize;
pub const DISPID_IPESizeChanged = DISPID_InkCollectorEvent.DISPID_IPESizeChanged;

pub const InkOverlayEditingMode = extern enum(i32) {
    IOEM_Ink = 0,
    IOEM_Delete = 1,
    IOEM_Select = 2,
};
pub const IOEM_Ink = InkOverlayEditingMode.IOEM_Ink;
pub const IOEM_Delete = InkOverlayEditingMode.IOEM_Delete;
pub const IOEM_Select = InkOverlayEditingMode.IOEM_Select;

pub const InkOverlayAttachMode = extern enum(i32) {
    IOAM_Behind = 0,
    IOAM_InFront = 1,
};
pub const IOAM_Behind = InkOverlayAttachMode.IOAM_Behind;
pub const IOAM_InFront = InkOverlayAttachMode.IOAM_InFront;

pub const InkPictureSizeMode = extern enum(i32) {
    IPSM_AutoSize = 0,
    IPSM_CenterImage = 1,
    IPSM_Normal = 2,
    IPSM_StretchImage = 3,
};
pub const IPSM_AutoSize = InkPictureSizeMode.IPSM_AutoSize;
pub const IPSM_CenterImage = InkPictureSizeMode.IPSM_CenterImage;
pub const IPSM_Normal = InkPictureSizeMode.IPSM_Normal;
pub const IPSM_StretchImage = InkPictureSizeMode.IPSM_StretchImage;

pub const InkOverlayEraserMode = extern enum(i32) {
    IOERM_StrokeErase = 0,
    IOERM_PointErase = 1,
};
pub const IOERM_StrokeErase = InkOverlayEraserMode.IOERM_StrokeErase;
pub const IOERM_PointErase = InkOverlayEraserMode.IOERM_PointErase;

pub const InkCollectionMode = extern enum(i32) {
    ICM_InkOnly = 0,
    ICM_GestureOnly = 1,
    ICM_InkAndGesture = 2,
};
pub const ICM_InkOnly = InkCollectionMode.ICM_InkOnly;
pub const ICM_GestureOnly = InkCollectionMode.ICM_GestureOnly;
pub const ICM_InkAndGesture = InkCollectionMode.ICM_InkAndGesture;

pub const DISPID_InkCollector = extern enum(i32) {
    DISPID_ICEnabled = 1,
    DISPID_ICHwnd = 2,
    DISPID_ICPaint = 3,
    DISPID_ICText = 4,
    DISPID_ICDefaultDrawingAttributes = 5,
    DISPID_ICRenderer = 6,
    DISPID_ICInk = 7,
    DISPID_ICAutoRedraw = 8,
    DISPID_ICCollectingInk = 9,
    DISPID_ICSetEventInterest = 10,
    DISPID_ICGetEventInterest = 11,
    DISPID_IOEditingMode = 12,
    DISPID_IOSelection = 13,
    DISPID_IOAttachMode = 14,
    DISPID_IOHitTestSelection = 15,
    DISPID_IODraw = 16,
    DISPID_IPPicture = 17,
    DISPID_IPSizeMode = 18,
    DISPID_IPBackColor = 19,
    DISPID_ICCursors = 20,
    DISPID_ICMarginX = 21,
    DISPID_ICMarginY = 22,
    DISPID_ICSetWindowInputRectangle = 23,
    DISPID_ICGetWindowInputRectangle = 24,
    DISPID_ICTablet = 25,
    DISPID_ICSetAllTabletsMode = 26,
    DISPID_ICSetSingleTabletIntegratedMode = 27,
    DISPID_ICCollectionMode = 28,
    DISPID_ICSetGestureStatus = 29,
    DISPID_ICGetGestureStatus = 30,
    DISPID_ICDynamicRendering = 31,
    DISPID_ICDesiredPacketDescription = 32,
    DISPID_IOEraserMode = 33,
    DISPID_IOEraserWidth = 34,
    DISPID_ICMouseIcon = 35,
    DISPID_ICMousePointer = 36,
    DISPID_IPInkEnabled = 37,
    DISPID_ICSupportHighContrastInk = 38,
    DISPID_IOSupportHighContrastSelectionUI = 39,
};
pub const DISPID_ICEnabled = DISPID_InkCollector.DISPID_ICEnabled;
pub const DISPID_ICHwnd = DISPID_InkCollector.DISPID_ICHwnd;
pub const DISPID_ICPaint = DISPID_InkCollector.DISPID_ICPaint;
pub const DISPID_ICText = DISPID_InkCollector.DISPID_ICText;
pub const DISPID_ICDefaultDrawingAttributes = DISPID_InkCollector.DISPID_ICDefaultDrawingAttributes;
pub const DISPID_ICRenderer = DISPID_InkCollector.DISPID_ICRenderer;
pub const DISPID_ICInk = DISPID_InkCollector.DISPID_ICInk;
pub const DISPID_ICAutoRedraw = DISPID_InkCollector.DISPID_ICAutoRedraw;
pub const DISPID_ICCollectingInk = DISPID_InkCollector.DISPID_ICCollectingInk;
pub const DISPID_ICSetEventInterest = DISPID_InkCollector.DISPID_ICSetEventInterest;
pub const DISPID_ICGetEventInterest = DISPID_InkCollector.DISPID_ICGetEventInterest;
pub const DISPID_IOEditingMode = DISPID_InkCollector.DISPID_IOEditingMode;
pub const DISPID_IOSelection = DISPID_InkCollector.DISPID_IOSelection;
pub const DISPID_IOAttachMode = DISPID_InkCollector.DISPID_IOAttachMode;
pub const DISPID_IOHitTestSelection = DISPID_InkCollector.DISPID_IOHitTestSelection;
pub const DISPID_IODraw = DISPID_InkCollector.DISPID_IODraw;
pub const DISPID_IPPicture = DISPID_InkCollector.DISPID_IPPicture;
pub const DISPID_IPSizeMode = DISPID_InkCollector.DISPID_IPSizeMode;
pub const DISPID_IPBackColor = DISPID_InkCollector.DISPID_IPBackColor;
pub const DISPID_ICCursors = DISPID_InkCollector.DISPID_ICCursors;
pub const DISPID_ICMarginX = DISPID_InkCollector.DISPID_ICMarginX;
pub const DISPID_ICMarginY = DISPID_InkCollector.DISPID_ICMarginY;
pub const DISPID_ICSetWindowInputRectangle = DISPID_InkCollector.DISPID_ICSetWindowInputRectangle;
pub const DISPID_ICGetWindowInputRectangle = DISPID_InkCollector.DISPID_ICGetWindowInputRectangle;
pub const DISPID_ICTablet = DISPID_InkCollector.DISPID_ICTablet;
pub const DISPID_ICSetAllTabletsMode = DISPID_InkCollector.DISPID_ICSetAllTabletsMode;
pub const DISPID_ICSetSingleTabletIntegratedMode = DISPID_InkCollector.DISPID_ICSetSingleTabletIntegratedMode;
pub const DISPID_ICCollectionMode = DISPID_InkCollector.DISPID_ICCollectionMode;
pub const DISPID_ICSetGestureStatus = DISPID_InkCollector.DISPID_ICSetGestureStatus;
pub const DISPID_ICGetGestureStatus = DISPID_InkCollector.DISPID_ICGetGestureStatus;
pub const DISPID_ICDynamicRendering = DISPID_InkCollector.DISPID_ICDynamicRendering;
pub const DISPID_ICDesiredPacketDescription = DISPID_InkCollector.DISPID_ICDesiredPacketDescription;
pub const DISPID_IOEraserMode = DISPID_InkCollector.DISPID_IOEraserMode;
pub const DISPID_IOEraserWidth = DISPID_InkCollector.DISPID_IOEraserWidth;
pub const DISPID_ICMouseIcon = DISPID_InkCollector.DISPID_ICMouseIcon;
pub const DISPID_ICMousePointer = DISPID_InkCollector.DISPID_ICMousePointer;
pub const DISPID_IPInkEnabled = DISPID_InkCollector.DISPID_IPInkEnabled;
pub const DISPID_ICSupportHighContrastInk = DISPID_InkCollector.DISPID_ICSupportHighContrastInk;
pub const DISPID_IOSupportHighContrastSelectionUI = DISPID_InkCollector.DISPID_IOSupportHighContrastSelectionUI;

pub const DISPID_InkRecognizer = extern enum(i32) {
    DISPID_RecoClsid = 1,
    DISPID_RecoName = 2,
    DISPID_RecoVendor = 3,
    DISPID_RecoCapabilities = 4,
    DISPID_RecoLanguageID = 5,
    DISPID_RecoPreferredPacketDescription = 6,
    DISPID_RecoCreateRecognizerContext = 7,
    DISPID_RecoSupportedProperties = 8,
};
pub const DISPID_RecoClsid = DISPID_InkRecognizer.DISPID_RecoClsid;
pub const DISPID_RecoName = DISPID_InkRecognizer.DISPID_RecoName;
pub const DISPID_RecoVendor = DISPID_InkRecognizer.DISPID_RecoVendor;
pub const DISPID_RecoCapabilities = DISPID_InkRecognizer.DISPID_RecoCapabilities;
pub const DISPID_RecoLanguageID = DISPID_InkRecognizer.DISPID_RecoLanguageID;
pub const DISPID_RecoPreferredPacketDescription = DISPID_InkRecognizer.DISPID_RecoPreferredPacketDescription;
pub const DISPID_RecoCreateRecognizerContext = DISPID_InkRecognizer.DISPID_RecoCreateRecognizerContext;
pub const DISPID_RecoSupportedProperties = DISPID_InkRecognizer.DISPID_RecoSupportedProperties;

pub const InkRecognizerCapabilities = extern enum(i32) {
    IRC_DontCare = 1,
    IRC_Object = 2,
    IRC_FreeInput = 4,
    IRC_LinedInput = 8,
    IRC_BoxedInput = 16,
    IRC_CharacterAutoCompletionInput = 32,
    IRC_RightAndDown = 64,
    IRC_LeftAndDown = 128,
    IRC_DownAndLeft = 256,
    IRC_DownAndRight = 512,
    IRC_ArbitraryAngle = 1024,
    IRC_Lattice = 2048,
    IRC_AdviseInkChange = 4096,
    IRC_StrokeReorder = 8192,
    IRC_Personalizable = 16384,
    IRC_PrefersArbitraryAngle = 32768,
    IRC_PrefersParagraphBreaking = 65536,
    IRC_PrefersSegmentation = 131072,
    IRC_Cursive = 262144,
    IRC_TextPrediction = 524288,
    IRC_Alpha = 1048576,
    IRC_Beta = 2097152,
};
pub const IRC_DontCare = InkRecognizerCapabilities.IRC_DontCare;
pub const IRC_Object = InkRecognizerCapabilities.IRC_Object;
pub const IRC_FreeInput = InkRecognizerCapabilities.IRC_FreeInput;
pub const IRC_LinedInput = InkRecognizerCapabilities.IRC_LinedInput;
pub const IRC_BoxedInput = InkRecognizerCapabilities.IRC_BoxedInput;
pub const IRC_CharacterAutoCompletionInput = InkRecognizerCapabilities.IRC_CharacterAutoCompletionInput;
pub const IRC_RightAndDown = InkRecognizerCapabilities.IRC_RightAndDown;
pub const IRC_LeftAndDown = InkRecognizerCapabilities.IRC_LeftAndDown;
pub const IRC_DownAndLeft = InkRecognizerCapabilities.IRC_DownAndLeft;
pub const IRC_DownAndRight = InkRecognizerCapabilities.IRC_DownAndRight;
pub const IRC_ArbitraryAngle = InkRecognizerCapabilities.IRC_ArbitraryAngle;
pub const IRC_Lattice = InkRecognizerCapabilities.IRC_Lattice;
pub const IRC_AdviseInkChange = InkRecognizerCapabilities.IRC_AdviseInkChange;
pub const IRC_StrokeReorder = InkRecognizerCapabilities.IRC_StrokeReorder;
pub const IRC_Personalizable = InkRecognizerCapabilities.IRC_Personalizable;
pub const IRC_PrefersArbitraryAngle = InkRecognizerCapabilities.IRC_PrefersArbitraryAngle;
pub const IRC_PrefersParagraphBreaking = InkRecognizerCapabilities.IRC_PrefersParagraphBreaking;
pub const IRC_PrefersSegmentation = InkRecognizerCapabilities.IRC_PrefersSegmentation;
pub const IRC_Cursive = InkRecognizerCapabilities.IRC_Cursive;
pub const IRC_TextPrediction = InkRecognizerCapabilities.IRC_TextPrediction;
pub const IRC_Alpha = InkRecognizerCapabilities.IRC_Alpha;
pub const IRC_Beta = InkRecognizerCapabilities.IRC_Beta;

pub const DISPID_InkRecognizer2 = extern enum(i32) {
    DISPID_RecoId = 0,
    DISPID_RecoUnicodeRanges = 1,
};
pub const DISPID_RecoId = DISPID_InkRecognizer2.DISPID_RecoId;
pub const DISPID_RecoUnicodeRanges = DISPID_InkRecognizer2.DISPID_RecoUnicodeRanges;

pub const DISPID_InkRecognizers = extern enum(i32) {
    DISPID_IRecos_NewEnum = -4,
    DISPID_IRecosItem = 0,
    DISPID_IRecosCount = 1,
    DISPID_IRecosGetDefaultRecognizer = 2,
};
pub const DISPID_IRecos_NewEnum = DISPID_InkRecognizers.DISPID_IRecos_NewEnum;
pub const DISPID_IRecosItem = DISPID_InkRecognizers.DISPID_IRecosItem;
pub const DISPID_IRecosCount = DISPID_InkRecognizers.DISPID_IRecosCount;
pub const DISPID_IRecosGetDefaultRecognizer = DISPID_InkRecognizers.DISPID_IRecosGetDefaultRecognizer;

pub const InkRecognizerCharacterAutoCompletionMode = extern enum(i32) {
    IRCACM_Full = 0,
    IRCACM_Prefix = 1,
    IRCACM_Random = 2,
};
pub const IRCACM_Full = InkRecognizerCharacterAutoCompletionMode.IRCACM_Full;
pub const IRCACM_Prefix = InkRecognizerCharacterAutoCompletionMode.IRCACM_Prefix;
pub const IRCACM_Random = InkRecognizerCharacterAutoCompletionMode.IRCACM_Random;

pub const InkRecognitionModes = extern enum(i32) {
    IRM_None = 0,
    IRM_WordModeOnly = 1,
    IRM_Coerce = 2,
    IRM_TopInkBreaksOnly = 4,
    IRM_PrefixOk = 8,
    IRM_LineMode = 16,
    IRM_DisablePersonalization = 32,
    IRM_AutoSpace = 64,
    IRM_Max = 128,
};
pub const IRM_None = InkRecognitionModes.IRM_None;
pub const IRM_WordModeOnly = InkRecognitionModes.IRM_WordModeOnly;
pub const IRM_Coerce = InkRecognitionModes.IRM_Coerce;
pub const IRM_TopInkBreaksOnly = InkRecognitionModes.IRM_TopInkBreaksOnly;
pub const IRM_PrefixOk = InkRecognitionModes.IRM_PrefixOk;
pub const IRM_LineMode = InkRecognitionModes.IRM_LineMode;
pub const IRM_DisablePersonalization = InkRecognitionModes.IRM_DisablePersonalization;
pub const IRM_AutoSpace = InkRecognitionModes.IRM_AutoSpace;
pub const IRM_Max = InkRecognitionModes.IRM_Max;

pub const DISPID_InkRecognitionEvent = extern enum(i32) {
    DISPID_IRERecognitionWithAlternates = 1,
    DISPID_IRERecognition = 2,
};
pub const DISPID_IRERecognitionWithAlternates = DISPID_InkRecognitionEvent.DISPID_IRERecognitionWithAlternates;
pub const DISPID_IRERecognition = DISPID_InkRecognitionEvent.DISPID_IRERecognition;

pub const DISPID_InkRecoContext = extern enum(i32) {
    DISPID_IRecoCtx_Strokes = 1,
    DISPID_IRecoCtx_CharacterAutoCompletionMode = 2,
    DISPID_IRecoCtx_Factoid = 3,
    DISPID_IRecoCtx_WordList = 4,
    DISPID_IRecoCtx_Recognizer = 5,
    DISPID_IRecoCtx_Guide = 6,
    DISPID_IRecoCtx_Flags = 7,
    DISPID_IRecoCtx_PrefixText = 8,
    DISPID_IRecoCtx_SuffixText = 9,
    DISPID_IRecoCtx_StopRecognition = 10,
    DISPID_IRecoCtx_Clone = 11,
    DISPID_IRecoCtx_Recognize = 12,
    DISPID_IRecoCtx_StopBackgroundRecognition = 13,
    DISPID_IRecoCtx_EndInkInput = 14,
    DISPID_IRecoCtx_BackgroundRecognize = 15,
    DISPID_IRecoCtx_BackgroundRecognizeWithAlternates = 16,
    DISPID_IRecoCtx_IsStringSupported = 17,
};
pub const DISPID_IRecoCtx_Strokes = DISPID_InkRecoContext.DISPID_IRecoCtx_Strokes;
pub const DISPID_IRecoCtx_CharacterAutoCompletionMode = DISPID_InkRecoContext.DISPID_IRecoCtx_CharacterAutoCompletionMode;
pub const DISPID_IRecoCtx_Factoid = DISPID_InkRecoContext.DISPID_IRecoCtx_Factoid;
pub const DISPID_IRecoCtx_WordList = DISPID_InkRecoContext.DISPID_IRecoCtx_WordList;
pub const DISPID_IRecoCtx_Recognizer = DISPID_InkRecoContext.DISPID_IRecoCtx_Recognizer;
pub const DISPID_IRecoCtx_Guide = DISPID_InkRecoContext.DISPID_IRecoCtx_Guide;
pub const DISPID_IRecoCtx_Flags = DISPID_InkRecoContext.DISPID_IRecoCtx_Flags;
pub const DISPID_IRecoCtx_PrefixText = DISPID_InkRecoContext.DISPID_IRecoCtx_PrefixText;
pub const DISPID_IRecoCtx_SuffixText = DISPID_InkRecoContext.DISPID_IRecoCtx_SuffixText;
pub const DISPID_IRecoCtx_StopRecognition = DISPID_InkRecoContext.DISPID_IRecoCtx_StopRecognition;
pub const DISPID_IRecoCtx_Clone = DISPID_InkRecoContext.DISPID_IRecoCtx_Clone;
pub const DISPID_IRecoCtx_Recognize = DISPID_InkRecoContext.DISPID_IRecoCtx_Recognize;
pub const DISPID_IRecoCtx_StopBackgroundRecognition = DISPID_InkRecoContext.DISPID_IRecoCtx_StopBackgroundRecognition;
pub const DISPID_IRecoCtx_EndInkInput = DISPID_InkRecoContext.DISPID_IRecoCtx_EndInkInput;
pub const DISPID_IRecoCtx_BackgroundRecognize = DISPID_InkRecoContext.DISPID_IRecoCtx_BackgroundRecognize;
pub const DISPID_IRecoCtx_BackgroundRecognizeWithAlternates = DISPID_InkRecoContext.DISPID_IRecoCtx_BackgroundRecognizeWithAlternates;
pub const DISPID_IRecoCtx_IsStringSupported = DISPID_InkRecoContext.DISPID_IRecoCtx_IsStringSupported;

pub const DISPID_InkRecoContext2 = extern enum(i32) {
    DISPID_IRecoCtx2_EnabledUnicodeRanges = 0,
};
pub const DISPID_IRecoCtx2_EnabledUnicodeRanges = DISPID_InkRecoContext2.DISPID_IRecoCtx2_EnabledUnicodeRanges;

pub const InkRecognitionAlternatesSelection = extern enum(i32) {
    IRAS_Start = 0,
    IRAS_DefaultCount = 10,
    IRAS_All = -1,
};
pub const IRAS_Start = InkRecognitionAlternatesSelection.IRAS_Start;
pub const IRAS_DefaultCount = InkRecognitionAlternatesSelection.IRAS_DefaultCount;
pub const IRAS_All = InkRecognitionAlternatesSelection.IRAS_All;

pub const DISPID_InkRecognitionResult = extern enum(i32) {
    TopString = 1,
    TopAlternate = 2,
    Strokes = 3,
    TopConfidence = 4,
    AlternatesFromSelection = 5,
    ModifyTopAlternate = 6,
    SetResultOnStrokes = 7,
};
pub const DISPID_InkRecognitionResult_TopString = DISPID_InkRecognitionResult.TopString;
pub const DISPID_InkRecognitionResult_TopAlternate = DISPID_InkRecognitionResult.TopAlternate;
pub const DISPID_InkRecognitionResult_Strokes = DISPID_InkRecognitionResult.Strokes;
pub const DISPID_InkRecognitionResult_TopConfidence = DISPID_InkRecognitionResult.TopConfidence;
pub const DISPID_InkRecognitionResult_AlternatesFromSelection = DISPID_InkRecognitionResult.AlternatesFromSelection;
pub const DISPID_InkRecognitionResult_ModifyTopAlternate = DISPID_InkRecognitionResult.ModifyTopAlternate;
pub const DISPID_InkRecognitionResult_SetResultOnStrokes = DISPID_InkRecognitionResult.SetResultOnStrokes;

pub const DISPID_InkRecoAlternate = extern enum(i32) {
    String = 1,
    LineNumber = 2,
    Baseline = 3,
    Midline = 4,
    Ascender = 5,
    Descender = 6,
    Confidence = 7,
    Strokes = 8,
    GetStrokesFromStrokeRanges = 9,
    GetStrokesFromTextRange = 10,
    GetTextRangeFromStrokes = 11,
    GetPropertyValue = 12,
    LineAlternates = 13,
    ConfidenceAlternates = 14,
    AlternatesWithConstantPropertyValues = 15,
};
pub const DISPID_InkRecoAlternate_String = DISPID_InkRecoAlternate.String;
pub const DISPID_InkRecoAlternate_LineNumber = DISPID_InkRecoAlternate.LineNumber;
pub const DISPID_InkRecoAlternate_Baseline = DISPID_InkRecoAlternate.Baseline;
pub const DISPID_InkRecoAlternate_Midline = DISPID_InkRecoAlternate.Midline;
pub const DISPID_InkRecoAlternate_Ascender = DISPID_InkRecoAlternate.Ascender;
pub const DISPID_InkRecoAlternate_Descender = DISPID_InkRecoAlternate.Descender;
pub const DISPID_InkRecoAlternate_Confidence = DISPID_InkRecoAlternate.Confidence;
pub const DISPID_InkRecoAlternate_Strokes = DISPID_InkRecoAlternate.Strokes;
pub const DISPID_InkRecoAlternate_GetStrokesFromStrokeRanges = DISPID_InkRecoAlternate.GetStrokesFromStrokeRanges;
pub const DISPID_InkRecoAlternate_GetStrokesFromTextRange = DISPID_InkRecoAlternate.GetStrokesFromTextRange;
pub const DISPID_InkRecoAlternate_GetTextRangeFromStrokes = DISPID_InkRecoAlternate.GetTextRangeFromStrokes;
pub const DISPID_InkRecoAlternate_GetPropertyValue = DISPID_InkRecoAlternate.GetPropertyValue;
pub const DISPID_InkRecoAlternate_LineAlternates = DISPID_InkRecoAlternate.LineAlternates;
pub const DISPID_InkRecoAlternate_ConfidenceAlternates = DISPID_InkRecoAlternate.ConfidenceAlternates;
pub const DISPID_InkRecoAlternate_AlternatesWithConstantPropertyValues = DISPID_InkRecoAlternate.AlternatesWithConstantPropertyValues;

pub const DISPID_InkRecognitionAlternates = extern enum(i32) {
    NewEnum = -4,
    Item = 0,
    Count = 1,
    Strokes = 2,
};
pub const DISPID_InkRecognitionAlternates_NewEnum = DISPID_InkRecognitionAlternates.NewEnum;
pub const DISPID_InkRecognitionAlternates_Item = DISPID_InkRecognitionAlternates.Item;
pub const DISPID_InkRecognitionAlternates_Count = DISPID_InkRecognitionAlternates.Count;
pub const DISPID_InkRecognitionAlternates_Strokes = DISPID_InkRecognitionAlternates.Strokes;

pub const InkRecoGuide = extern struct {
    rectWritingBox: RECT,
    rectDrawnBox: RECT,
    cRows: i32,
    cColumns: i32,
    midline: i32,
};

pub const DISPID_InkRecognizerGuide = extern enum(i32) {
    DISPID_IRGWritingBox = 1,
    DISPID_IRGDrawnBox = 2,
    DISPID_IRGRows = 3,
    DISPID_IRGColumns = 4,
    DISPID_IRGMidline = 5,
    DISPID_IRGGuideData = 6,
};
pub const DISPID_IRGWritingBox = DISPID_InkRecognizerGuide.DISPID_IRGWritingBox;
pub const DISPID_IRGDrawnBox = DISPID_InkRecognizerGuide.DISPID_IRGDrawnBox;
pub const DISPID_IRGRows = DISPID_InkRecognizerGuide.DISPID_IRGRows;
pub const DISPID_IRGColumns = DISPID_InkRecognizerGuide.DISPID_IRGColumns;
pub const DISPID_IRGMidline = DISPID_InkRecognizerGuide.DISPID_IRGMidline;
pub const DISPID_IRGGuideData = DISPID_InkRecognizerGuide.DISPID_IRGGuideData;

pub const DISPID_InkWordList = extern enum(i32) {
    AddWord = 0,
    RemoveWord = 1,
    Merge = 2,
};
pub const DISPID_InkWordList_AddWord = DISPID_InkWordList.AddWord;
pub const DISPID_InkWordList_RemoveWord = DISPID_InkWordList.RemoveWord;
pub const DISPID_InkWordList_Merge = DISPID_InkWordList.Merge;

pub const DISPID_InkWordList2 = extern enum(i32) {
    AddWords = 3,
};
pub const DISPID_InkWordList2_AddWords = DISPID_InkWordList2.AddWords;

const IID_IInkRectangle_Value = @import("../zig.zig").Guid.initString("9794FF82-6071-4717-8A8B-6AC7C64A686E");
pub const IID_IInkRectangle = &IID_IInkRectangle_Value;
pub const IInkRectangle = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Top: fn(
            self: *const IInkRectangle,
            Units: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Top: fn(
            self: *const IInkRectangle,
            Units: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Left: fn(
            self: *const IInkRectangle,
            Units: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Left: fn(
            self: *const IInkRectangle,
            Units: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Bottom: fn(
            self: *const IInkRectangle,
            Units: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Bottom: fn(
            self: *const IInkRectangle,
            Units: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Right: fn(
            self: *const IInkRectangle,
            Units: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Right: fn(
            self: *const IInkRectangle,
            Units: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Data: fn(
            self: *const IInkRectangle,
            Rect: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Data: fn(
            self: *const IInkRectangle,
            Rect: RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRectangle: fn(
            self: *const IInkRectangle,
            Top: *i32,
            Left: *i32,
            Bottom: *i32,
            Right: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRectangle: fn(
            self: *const IInkRectangle,
            Top: i32,
            Left: i32,
            Bottom: i32,
            Right: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRectangle_get_Top(self: *const T, Units: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRectangle.VTable, self.vtable).get_Top(@ptrCast(*const IInkRectangle, self), Units);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRectangle_put_Top(self: *const T, Units: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRectangle.VTable, self.vtable).put_Top(@ptrCast(*const IInkRectangle, self), Units);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRectangle_get_Left(self: *const T, Units: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRectangle.VTable, self.vtable).get_Left(@ptrCast(*const IInkRectangle, self), Units);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRectangle_put_Left(self: *const T, Units: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRectangle.VTable, self.vtable).put_Left(@ptrCast(*const IInkRectangle, self), Units);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRectangle_get_Bottom(self: *const T, Units: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRectangle.VTable, self.vtable).get_Bottom(@ptrCast(*const IInkRectangle, self), Units);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRectangle_put_Bottom(self: *const T, Units: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRectangle.VTable, self.vtable).put_Bottom(@ptrCast(*const IInkRectangle, self), Units);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRectangle_get_Right(self: *const T, Units: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRectangle.VTable, self.vtable).get_Right(@ptrCast(*const IInkRectangle, self), Units);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRectangle_put_Right(self: *const T, Units: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRectangle.VTable, self.vtable).put_Right(@ptrCast(*const IInkRectangle, self), Units);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRectangle_get_Data(self: *const T, Rect: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRectangle.VTable, self.vtable).get_Data(@ptrCast(*const IInkRectangle, self), Rect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRectangle_put_Data(self: *const T, Rect: RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRectangle.VTable, self.vtable).put_Data(@ptrCast(*const IInkRectangle, self), Rect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRectangle_GetRectangle(self: *const T, Top: *i32, Left: *i32, Bottom: *i32, Right: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRectangle.VTable, self.vtable).GetRectangle(@ptrCast(*const IInkRectangle, self), Top, Left, Bottom, Right);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRectangle_SetRectangle(self: *const T, Top: i32, Left: i32, Bottom: i32, Right: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRectangle.VTable, self.vtable).SetRectangle(@ptrCast(*const IInkRectangle, self), Top, Left, Bottom, Right);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkExtendedProperty_Value = @import("../zig.zig").Guid.initString("DB489209-B7C3-411D-90F6-1548CFFF271E");
pub const IID_IInkExtendedProperty = &IID_IInkExtendedProperty_Value;
pub const IInkExtendedProperty = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Guid: fn(
            self: *const IInkExtendedProperty,
            Guid: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Data: fn(
            self: *const IInkExtendedProperty,
            Data: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Data: fn(
            self: *const IInkExtendedProperty,
            Data: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkExtendedProperty_get_Guid(self: *const T, Guid: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkExtendedProperty.VTable, self.vtable).get_Guid(@ptrCast(*const IInkExtendedProperty, self), Guid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkExtendedProperty_get_Data(self: *const T, Data: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkExtendedProperty.VTable, self.vtable).get_Data(@ptrCast(*const IInkExtendedProperty, self), Data);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkExtendedProperty_put_Data(self: *const T, Data: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkExtendedProperty.VTable, self.vtable).put_Data(@ptrCast(*const IInkExtendedProperty, self), Data);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkExtendedProperties_Value = @import("../zig.zig").Guid.initString("89F2A8BE-95A9-4530-8B8F-88E971E3E25F");
pub const IID_IInkExtendedProperties = &IID_IInkExtendedProperties_Value;
pub const IInkExtendedProperties = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const IInkExtendedProperties,
            Count: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IInkExtendedProperties,
            _NewEnum: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const IInkExtendedProperties,
            Identifier: VARIANT,
            Item: **IInkExtendedProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IInkExtendedProperties,
            Guid: BSTR,
            Data: VARIANT,
            InkExtendedProperty: **IInkExtendedProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IInkExtendedProperties,
            Identifier: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IInkExtendedProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesPropertyExist: fn(
            self: *const IInkExtendedProperties,
            Guid: BSTR,
            DoesPropertyExist: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkExtendedProperties_get_Count(self: *const T, Count: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkExtendedProperties.VTable, self.vtable).get_Count(@ptrCast(*const IInkExtendedProperties, self), Count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkExtendedProperties_get__NewEnum(self: *const T, _NewEnum: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkExtendedProperties.VTable, self.vtable).get__NewEnum(@ptrCast(*const IInkExtendedProperties, self), _NewEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkExtendedProperties_Item(self: *const T, Identifier: VARIANT, Item: **IInkExtendedProperty) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkExtendedProperties.VTable, self.vtable).Item(@ptrCast(*const IInkExtendedProperties, self), Identifier, Item);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkExtendedProperties_Add(self: *const T, Guid: BSTR, Data: VARIANT, InkExtendedProperty: **IInkExtendedProperty) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkExtendedProperties.VTable, self.vtable).Add(@ptrCast(*const IInkExtendedProperties, self), Guid, Data, InkExtendedProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkExtendedProperties_Remove(self: *const T, Identifier: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkExtendedProperties.VTable, self.vtable).Remove(@ptrCast(*const IInkExtendedProperties, self), Identifier);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkExtendedProperties_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkExtendedProperties.VTable, self.vtable).Clear(@ptrCast(*const IInkExtendedProperties, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkExtendedProperties_DoesPropertyExist(self: *const T, Guid: BSTR, DoesPropertyExist: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkExtendedProperties.VTable, self.vtable).DoesPropertyExist(@ptrCast(*const IInkExtendedProperties, self), Guid, DoesPropertyExist);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkDrawingAttributes_Value = @import("../zig.zig").Guid.initString("BF519B75-0A15-4623-ADC9-C00D436A8092");
pub const IID_IInkDrawingAttributes = &IID_IInkDrawingAttributes_Value;
pub const IInkDrawingAttributes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Color: fn(
            self: *const IInkDrawingAttributes,
            CurrentColor: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Color: fn(
            self: *const IInkDrawingAttributes,
            NewColor: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Width: fn(
            self: *const IInkDrawingAttributes,
            CurrentWidth: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Width: fn(
            self: *const IInkDrawingAttributes,
            NewWidth: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Height: fn(
            self: *const IInkDrawingAttributes,
            CurrentHeight: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Height: fn(
            self: *const IInkDrawingAttributes,
            NewHeight: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_FitToCurve: fn(
            self: *const IInkDrawingAttributes,
            Flag: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_FitToCurve: fn(
            self: *const IInkDrawingAttributes,
            Flag: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IgnorePressure: fn(
            self: *const IInkDrawingAttributes,
            Flag: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_IgnorePressure: fn(
            self: *const IInkDrawingAttributes,
            Flag: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AntiAliased: fn(
            self: *const IInkDrawingAttributes,
            Flag: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AntiAliased: fn(
            self: *const IInkDrawingAttributes,
            Flag: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Transparency: fn(
            self: *const IInkDrawingAttributes,
            CurrentTransparency: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Transparency: fn(
            self: *const IInkDrawingAttributes,
            NewTransparency: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RasterOperation: fn(
            self: *const IInkDrawingAttributes,
            CurrentRasterOperation: *InkRasterOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RasterOperation: fn(
            self: *const IInkDrawingAttributes,
            NewRasterOperation: InkRasterOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PenTip: fn(
            self: *const IInkDrawingAttributes,
            CurrentPenTip: *InkPenTip,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_PenTip: fn(
            self: *const IInkDrawingAttributes,
            NewPenTip: InkPenTip,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ExtendedProperties: fn(
            self: *const IInkDrawingAttributes,
            Properties: **IInkExtendedProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IInkDrawingAttributes,
            DrawingAttributes: **IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_get_Color(self: *const T, CurrentColor: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).get_Color(@ptrCast(*const IInkDrawingAttributes, self), CurrentColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_put_Color(self: *const T, NewColor: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).put_Color(@ptrCast(*const IInkDrawingAttributes, self), NewColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_get_Width(self: *const T, CurrentWidth: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).get_Width(@ptrCast(*const IInkDrawingAttributes, self), CurrentWidth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_put_Width(self: *const T, NewWidth: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).put_Width(@ptrCast(*const IInkDrawingAttributes, self), NewWidth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_get_Height(self: *const T, CurrentHeight: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).get_Height(@ptrCast(*const IInkDrawingAttributes, self), CurrentHeight);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_put_Height(self: *const T, NewHeight: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).put_Height(@ptrCast(*const IInkDrawingAttributes, self), NewHeight);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_get_FitToCurve(self: *const T, Flag: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).get_FitToCurve(@ptrCast(*const IInkDrawingAttributes, self), Flag);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_put_FitToCurve(self: *const T, Flag: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).put_FitToCurve(@ptrCast(*const IInkDrawingAttributes, self), Flag);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_get_IgnorePressure(self: *const T, Flag: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).get_IgnorePressure(@ptrCast(*const IInkDrawingAttributes, self), Flag);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_put_IgnorePressure(self: *const T, Flag: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).put_IgnorePressure(@ptrCast(*const IInkDrawingAttributes, self), Flag);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_get_AntiAliased(self: *const T, Flag: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).get_AntiAliased(@ptrCast(*const IInkDrawingAttributes, self), Flag);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_put_AntiAliased(self: *const T, Flag: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).put_AntiAliased(@ptrCast(*const IInkDrawingAttributes, self), Flag);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_get_Transparency(self: *const T, CurrentTransparency: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).get_Transparency(@ptrCast(*const IInkDrawingAttributes, self), CurrentTransparency);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_put_Transparency(self: *const T, NewTransparency: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).put_Transparency(@ptrCast(*const IInkDrawingAttributes, self), NewTransparency);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_get_RasterOperation(self: *const T, CurrentRasterOperation: *InkRasterOperation) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).get_RasterOperation(@ptrCast(*const IInkDrawingAttributes, self), CurrentRasterOperation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_put_RasterOperation(self: *const T, NewRasterOperation: InkRasterOperation) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).put_RasterOperation(@ptrCast(*const IInkDrawingAttributes, self), NewRasterOperation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_get_PenTip(self: *const T, CurrentPenTip: *InkPenTip) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).get_PenTip(@ptrCast(*const IInkDrawingAttributes, self), CurrentPenTip);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_put_PenTip(self: *const T, NewPenTip: InkPenTip) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).put_PenTip(@ptrCast(*const IInkDrawingAttributes, self), NewPenTip);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_get_ExtendedProperties(self: *const T, Properties: **IInkExtendedProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).get_ExtendedProperties(@ptrCast(*const IInkDrawingAttributes, self), Properties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDrawingAttributes_Clone(self: *const T, DrawingAttributes: **IInkDrawingAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDrawingAttributes.VTable, self.vtable).Clone(@ptrCast(*const IInkDrawingAttributes, self), DrawingAttributes);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkTransform_Value = @import("../zig.zig").Guid.initString("615F1D43-8703-4565-88E2-8201D2ECD7B7");
pub const IID_IInkTransform = &IID_IInkTransform_Value;
pub const IInkTransform = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Reset: fn(
            self: *const IInkTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Translate: fn(
            self: *const IInkTransform,
            HorizontalComponent: f32,
            VerticalComponent: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rotate: fn(
            self: *const IInkTransform,
            Degrees: f32,
            x: f32,
            y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reflect: fn(
            self: *const IInkTransform,
            Horizontally: i16,
            Vertically: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shear: fn(
            self: *const IInkTransform,
            HorizontalComponent: f32,
            VerticalComponent: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScaleTransform: fn(
            self: *const IInkTransform,
            HorizontalMultiplier: f32,
            VerticalMultiplier: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransform: fn(
            self: *const IInkTransform,
            eM11: *f32,
            eM12: *f32,
            eM21: *f32,
            eM22: *f32,
            eDx: *f32,
            eDy: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransform: fn(
            self: *const IInkTransform,
            eM11: f32,
            eM12: f32,
            eM21: f32,
            eM22: f32,
            eDx: f32,
            eDy: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_eM11: fn(
            self: *const IInkTransform,
            Value: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_eM11: fn(
            self: *const IInkTransform,
            Value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_eM12: fn(
            self: *const IInkTransform,
            Value: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_eM12: fn(
            self: *const IInkTransform,
            Value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_eM21: fn(
            self: *const IInkTransform,
            Value: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_eM21: fn(
            self: *const IInkTransform,
            Value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_eM22: fn(
            self: *const IInkTransform,
            Value: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_eM22: fn(
            self: *const IInkTransform,
            Value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_eDx: fn(
            self: *const IInkTransform,
            Value: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_eDx: fn(
            self: *const IInkTransform,
            Value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_eDy: fn(
            self: *const IInkTransform,
            Value: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_eDy: fn(
            self: *const IInkTransform,
            Value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Data: fn(
            self: *const IInkTransform,
            XForm: *XFORM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Data: fn(
            self: *const IInkTransform,
            XForm: XFORM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).Reset(@ptrCast(*const IInkTransform, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_Translate(self: *const T, HorizontalComponent: f32, VerticalComponent: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).Translate(@ptrCast(*const IInkTransform, self), HorizontalComponent, VerticalComponent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_Rotate(self: *const T, Degrees: f32, x: f32, y: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).Rotate(@ptrCast(*const IInkTransform, self), Degrees, x, y);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_Reflect(self: *const T, Horizontally: i16, Vertically: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).Reflect(@ptrCast(*const IInkTransform, self), Horizontally, Vertically);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_Shear(self: *const T, HorizontalComponent: f32, VerticalComponent: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).Shear(@ptrCast(*const IInkTransform, self), HorizontalComponent, VerticalComponent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_ScaleTransform(self: *const T, HorizontalMultiplier: f32, VerticalMultiplier: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).ScaleTransform(@ptrCast(*const IInkTransform, self), HorizontalMultiplier, VerticalMultiplier);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_GetTransform(self: *const T, eM11: *f32, eM12: *f32, eM21: *f32, eM22: *f32, eDx: *f32, eDy: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).GetTransform(@ptrCast(*const IInkTransform, self), eM11, eM12, eM21, eM22, eDx, eDy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_SetTransform(self: *const T, eM11: f32, eM12: f32, eM21: f32, eM22: f32, eDx: f32, eDy: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).SetTransform(@ptrCast(*const IInkTransform, self), eM11, eM12, eM21, eM22, eDx, eDy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_get_eM11(self: *const T, Value: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).get_eM11(@ptrCast(*const IInkTransform, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_put_eM11(self: *const T, Value: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).put_eM11(@ptrCast(*const IInkTransform, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_get_eM12(self: *const T, Value: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).get_eM12(@ptrCast(*const IInkTransform, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_put_eM12(self: *const T, Value: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).put_eM12(@ptrCast(*const IInkTransform, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_get_eM21(self: *const T, Value: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).get_eM21(@ptrCast(*const IInkTransform, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_put_eM21(self: *const T, Value: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).put_eM21(@ptrCast(*const IInkTransform, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_get_eM22(self: *const T, Value: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).get_eM22(@ptrCast(*const IInkTransform, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_put_eM22(self: *const T, Value: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).put_eM22(@ptrCast(*const IInkTransform, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_get_eDx(self: *const T, Value: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).get_eDx(@ptrCast(*const IInkTransform, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_put_eDx(self: *const T, Value: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).put_eDx(@ptrCast(*const IInkTransform, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_get_eDy(self: *const T, Value: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).get_eDy(@ptrCast(*const IInkTransform, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_put_eDy(self: *const T, Value: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).put_eDy(@ptrCast(*const IInkTransform, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_get_Data(self: *const T, XForm: *XFORM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).get_Data(@ptrCast(*const IInkTransform, self), XForm);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTransform_put_Data(self: *const T, XForm: XFORM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTransform.VTable, self.vtable).put_Data(@ptrCast(*const IInkTransform, self), XForm);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkGesture_Value = @import("../zig.zig").Guid.initString("3BDC0A97-04E5-4E26-B813-18F052D41DEF");
pub const IID_IInkGesture = &IID_IInkGesture_Value;
pub const IInkGesture = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Confidence: fn(
            self: *const IInkGesture,
            Confidence: *InkRecognitionConfidence,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Id: fn(
            self: *const IInkGesture,
            Id: *InkApplicationGesture,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHotPoint: fn(
            self: *const IInkGesture,
            X: *i32,
            Y: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkGesture_get_Confidence(self: *const T, Confidence: *InkRecognitionConfidence) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkGesture.VTable, self.vtable).get_Confidence(@ptrCast(*const IInkGesture, self), Confidence);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkGesture_get_Id(self: *const T, Id: *InkApplicationGesture) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkGesture.VTable, self.vtable).get_Id(@ptrCast(*const IInkGesture, self), Id);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkGesture_GetHotPoint(self: *const T, X: *i32, Y: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkGesture.VTable, self.vtable).GetHotPoint(@ptrCast(*const IInkGesture, self), X, Y);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkCursor_Value = @import("../zig.zig").Guid.initString("AD30C630-40C5-4350-8405-9C71012FC558");
pub const IID_IInkCursor = &IID_IInkCursor_Value;
pub const IInkCursor = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Name: fn(
            self: *const IInkCursor,
            Name: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Id: fn(
            self: *const IInkCursor,
            Id: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Inverted: fn(
            self: *const IInkCursor,
            Status: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DrawingAttributes: fn(
            self: *const IInkCursor,
            Attributes: **IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_DrawingAttributes: fn(
            self: *const IInkCursor,
            Attributes: ?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Tablet: fn(
            self: *const IInkCursor,
            Tablet: **IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Buttons: fn(
            self: *const IInkCursor,
            Buttons: **IInkCursorButtons,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCursor_get_Name(self: *const T, Name: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCursor.VTable, self.vtable).get_Name(@ptrCast(*const IInkCursor, self), Name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCursor_get_Id(self: *const T, Id: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCursor.VTable, self.vtable).get_Id(@ptrCast(*const IInkCursor, self), Id);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCursor_get_Inverted(self: *const T, Status: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCursor.VTable, self.vtable).get_Inverted(@ptrCast(*const IInkCursor, self), Status);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCursor_get_DrawingAttributes(self: *const T, Attributes: **IInkDrawingAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCursor.VTable, self.vtable).get_DrawingAttributes(@ptrCast(*const IInkCursor, self), Attributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCursor_putref_DrawingAttributes(self: *const T, Attributes: ?*IInkDrawingAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCursor.VTable, self.vtable).putref_DrawingAttributes(@ptrCast(*const IInkCursor, self), Attributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCursor_get_Tablet(self: *const T, Tablet: **IInkTablet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCursor.VTable, self.vtable).get_Tablet(@ptrCast(*const IInkCursor, self), Tablet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCursor_get_Buttons(self: *const T, Buttons: **IInkCursorButtons) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCursor.VTable, self.vtable).get_Buttons(@ptrCast(*const IInkCursor, self), Buttons);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkCursors_Value = @import("../zig.zig").Guid.initString("A248C1AC-C698-4E06-9E5C-D57F77C7E647");
pub const IID_IInkCursors = &IID_IInkCursors_Value;
pub const IInkCursors = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const IInkCursors,
            Count: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IInkCursors,
            _NewEnum: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const IInkCursors,
            Index: i32,
            Cursor: **IInkCursor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCursors_get_Count(self: *const T, Count: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCursors.VTable, self.vtable).get_Count(@ptrCast(*const IInkCursors, self), Count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCursors_get__NewEnum(self: *const T, _NewEnum: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCursors.VTable, self.vtable).get__NewEnum(@ptrCast(*const IInkCursors, self), _NewEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCursors_Item(self: *const T, Index: i32, Cursor: **IInkCursor) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCursors.VTable, self.vtable).Item(@ptrCast(*const IInkCursors, self), Index, Cursor);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkCursorButton_Value = @import("../zig.zig").Guid.initString("85EF9417-1D59-49B2-A13C-702C85430894");
pub const IID_IInkCursorButton = &IID_IInkCursorButton_Value;
pub const IInkCursorButton = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Name: fn(
            self: *const IInkCursorButton,
            Name: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Id: fn(
            self: *const IInkCursorButton,
            Id: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_State: fn(
            self: *const IInkCursorButton,
            CurrentState: *InkCursorButtonState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCursorButton_get_Name(self: *const T, Name: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCursorButton.VTable, self.vtable).get_Name(@ptrCast(*const IInkCursorButton, self), Name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCursorButton_get_Id(self: *const T, Id: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCursorButton.VTable, self.vtable).get_Id(@ptrCast(*const IInkCursorButton, self), Id);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCursorButton_get_State(self: *const T, CurrentState: *InkCursorButtonState) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCursorButton.VTable, self.vtable).get_State(@ptrCast(*const IInkCursorButton, self), CurrentState);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkCursorButtons_Value = @import("../zig.zig").Guid.initString("3671CC40-B624-4671-9FA0-DB119D952D54");
pub const IID_IInkCursorButtons = &IID_IInkCursorButtons_Value;
pub const IInkCursorButtons = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const IInkCursorButtons,
            Count: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IInkCursorButtons,
            _NewEnum: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const IInkCursorButtons,
            Identifier: VARIANT,
            Button: **IInkCursorButton,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCursorButtons_get_Count(self: *const T, Count: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCursorButtons.VTable, self.vtable).get_Count(@ptrCast(*const IInkCursorButtons, self), Count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCursorButtons_get__NewEnum(self: *const T, _NewEnum: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCursorButtons.VTable, self.vtable).get__NewEnum(@ptrCast(*const IInkCursorButtons, self), _NewEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCursorButtons_Item(self: *const T, Identifier: VARIANT, Button: **IInkCursorButton) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCursorButtons.VTable, self.vtable).Item(@ptrCast(*const IInkCursorButtons, self), Identifier, Button);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkTablet_Value = @import("../zig.zig").Guid.initString("2DE25EAA-6EF8-42D5-AEE9-185BC81B912D");
pub const IID_IInkTablet = &IID_IInkTablet_Value;
pub const IInkTablet = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Name: fn(
            self: *const IInkTablet,
            Name: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PlugAndPlayId: fn(
            self: *const IInkTablet,
            Id: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MaximumInputRectangle: fn(
            self: *const IInkTablet,
            Rectangle: **IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_HardwareCapabilities: fn(
            self: *const IInkTablet,
            Capabilities: *TabletHardwareCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPacketPropertySupported: fn(
            self: *const IInkTablet,
            packetPropertyName: BSTR,
            Supported: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyMetrics: fn(
            self: *const IInkTablet,
            propertyName: BSTR,
            Minimum: *i32,
            Maximum: *i32,
            Units: *TabletPropertyMetricUnit,
            Resolution: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTablet_get_Name(self: *const T, Name: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTablet.VTable, self.vtable).get_Name(@ptrCast(*const IInkTablet, self), Name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTablet_get_PlugAndPlayId(self: *const T, Id: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTablet.VTable, self.vtable).get_PlugAndPlayId(@ptrCast(*const IInkTablet, self), Id);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTablet_get_MaximumInputRectangle(self: *const T, Rectangle: **IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTablet.VTable, self.vtable).get_MaximumInputRectangle(@ptrCast(*const IInkTablet, self), Rectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTablet_get_HardwareCapabilities(self: *const T, Capabilities: *TabletHardwareCapabilities) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTablet.VTable, self.vtable).get_HardwareCapabilities(@ptrCast(*const IInkTablet, self), Capabilities);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTablet_IsPacketPropertySupported(self: *const T, packetPropertyName: BSTR, Supported: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTablet.VTable, self.vtable).IsPacketPropertySupported(@ptrCast(*const IInkTablet, self), packetPropertyName, Supported);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTablet_GetPropertyMetrics(self: *const T, propertyName: BSTR, Minimum: *i32, Maximum: *i32, Units: *TabletPropertyMetricUnit, Resolution: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTablet.VTable, self.vtable).GetPropertyMetrics(@ptrCast(*const IInkTablet, self), propertyName, Minimum, Maximum, Units, Resolution);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkTablet2_Value = @import("../zig.zig").Guid.initString("90C91AD2-FA36-49D6-9516-CE8D570F6F85");
pub const IID_IInkTablet2 = &IID_IInkTablet2_Value;
pub const IInkTablet2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_DeviceKind: fn(
            self: *const IInkTablet2,
            Kind: *TabletDeviceKind,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTablet2_get_DeviceKind(self: *const T, Kind: *TabletDeviceKind) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTablet2.VTable, self.vtable).get_DeviceKind(@ptrCast(*const IInkTablet2, self), Kind);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkTablet3_Value = @import("../zig.zig").Guid.initString("7E313997-1327-41DD-8CA9-79F24BE17250");
pub const IID_IInkTablet3 = &IID_IInkTablet3_Value;
pub const IInkTablet3 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_IsMultiTouch: fn(
            self: *const IInkTablet3,
            pIsMultiTouch: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MaximumCursors: fn(
            self: *const IInkTablet3,
            pMaximumCursors: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTablet3_get_IsMultiTouch(self: *const T, pIsMultiTouch: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTablet3.VTable, self.vtable).get_IsMultiTouch(@ptrCast(*const IInkTablet3, self), pIsMultiTouch);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTablet3_get_MaximumCursors(self: *const T, pMaximumCursors: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTablet3.VTable, self.vtable).get_MaximumCursors(@ptrCast(*const IInkTablet3, self), pMaximumCursors);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkTablets_Value = @import("../zig.zig").Guid.initString("112086D9-7779-4535-A699-862B43AC1863");
pub const IID_IInkTablets = &IID_IInkTablets_Value;
pub const IInkTablets = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const IInkTablets,
            Count: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IInkTablets,
            _NewEnum: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DefaultTablet: fn(
            self: *const IInkTablets,
            DefaultTablet: **IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const IInkTablets,
            Index: i32,
            Tablet: **IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPacketPropertySupported: fn(
            self: *const IInkTablets,
            packetPropertyName: BSTR,
            Supported: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTablets_get_Count(self: *const T, Count: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTablets.VTable, self.vtable).get_Count(@ptrCast(*const IInkTablets, self), Count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTablets_get__NewEnum(self: *const T, _NewEnum: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTablets.VTable, self.vtable).get__NewEnum(@ptrCast(*const IInkTablets, self), _NewEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTablets_get_DefaultTablet(self: *const T, DefaultTablet: **IInkTablet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTablets.VTable, self.vtable).get_DefaultTablet(@ptrCast(*const IInkTablets, self), DefaultTablet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTablets_Item(self: *const T, Index: i32, Tablet: **IInkTablet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTablets.VTable, self.vtable).Item(@ptrCast(*const IInkTablets, self), Index, Tablet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkTablets_IsPacketPropertySupported(self: *const T, packetPropertyName: BSTR, Supported: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkTablets.VTable, self.vtable).IsPacketPropertySupported(@ptrCast(*const IInkTablets, self), packetPropertyName, Supported);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkStrokeDisp_Value = @import("../zig.zig").Guid.initString("43242FEA-91D1-4A72-963E-FBB91829CFA2");
pub const IID_IInkStrokeDisp = &IID_IInkStrokeDisp_Value;
pub const IInkStrokeDisp = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ID: fn(
            self: *const IInkStrokeDisp,
            ID: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BezierPoints: fn(
            self: *const IInkStrokeDisp,
            Points: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DrawingAttributes: fn(
            self: *const IInkStrokeDisp,
            DrawAttrs: **IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_DrawingAttributes: fn(
            self: *const IInkStrokeDisp,
            DrawAttrs: ?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Ink: fn(
            self: *const IInkStrokeDisp,
            Ink: **IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ExtendedProperties: fn(
            self: *const IInkStrokeDisp,
            Properties: **IInkExtendedProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolylineCusps: fn(
            self: *const IInkStrokeDisp,
            Cusps: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BezierCusps: fn(
            self: *const IInkStrokeDisp,
            Cusps: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SelfIntersections: fn(
            self: *const IInkStrokeDisp,
            Intersections: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PacketCount: fn(
            self: *const IInkStrokeDisp,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PacketSize: fn(
            self: *const IInkStrokeDisp,
            plSize: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PacketDescription: fn(
            self: *const IInkStrokeDisp,
            PacketDescription: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Deleted: fn(
            self: *const IInkStrokeDisp,
            Deleted: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBoundingBox: fn(
            self: *const IInkStrokeDisp,
            BoundingBoxMode: InkBoundingBoxMode,
            Rectangle: **IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindIntersections: fn(
            self: *const IInkStrokeDisp,
            Strokes: ?*IInkStrokes,
            Intersections: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRectangleIntersections: fn(
            self: *const IInkStrokeDisp,
            Rectangle: ?*IInkRectangle,
            Intersections: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clip: fn(
            self: *const IInkStrokeDisp,
            Rectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTestCircle: fn(
            self: *const IInkStrokeDisp,
            X: i32,
            Y: i32,
            Radius: f32,
            Intersects: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NearestPoint: fn(
            self: *const IInkStrokeDisp,
            X: i32,
            Y: i32,
            Distance: *f32,
            Point: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Split: fn(
            self: *const IInkStrokeDisp,
            SplitAt: f32,
            NewStroke: **IInkStrokeDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPacketDescriptionPropertyMetrics: fn(
            self: *const IInkStrokeDisp,
            PropertyName: BSTR,
            Minimum: *i32,
            Maximum: *i32,
            Units: *TabletPropertyMetricUnit,
            Resolution: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPoints: fn(
            self: *const IInkStrokeDisp,
            Index: i32,
            Count: i32,
            Points: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPoints: fn(
            self: *const IInkStrokeDisp,
            Points: VARIANT,
            Index: i32,
            Count: i32,
            NumberOfPointsSet: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPacketData: fn(
            self: *const IInkStrokeDisp,
            Index: i32,
            Count: i32,
            PacketData: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPacketValuesByProperty: fn(
            self: *const IInkStrokeDisp,
            PropertyName: BSTR,
            Index: i32,
            Count: i32,
            PacketValues: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPacketValuesByProperty: fn(
            self: *const IInkStrokeDisp,
            bstrPropertyName: BSTR,
            PacketValues: VARIANT,
            Index: i32,
            Count: i32,
            NumberOfPacketsSet: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlattenedBezierPoints: fn(
            self: *const IInkStrokeDisp,
            FittingError: i32,
            FlattenedBezierPoints: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Transform: fn(
            self: *const IInkStrokeDisp,
            Transform: ?*IInkTransform,
            ApplyOnPenWidth: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScaleToRectangle: fn(
            self: *const IInkStrokeDisp,
            Rectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Move: fn(
            self: *const IInkStrokeDisp,
            HorizontalComponent: f32,
            VerticalComponent: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rotate: fn(
            self: *const IInkStrokeDisp,
            Degrees: f32,
            x: f32,
            y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shear: fn(
            self: *const IInkStrokeDisp,
            HorizontalMultiplier: f32,
            VerticalMultiplier: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScaleTransform: fn(
            self: *const IInkStrokeDisp,
            HorizontalMultiplier: f32,
            VerticalMultiplier: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_get_ID(self: *const T, ID: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).get_ID(@ptrCast(*const IInkStrokeDisp, self), ID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_get_BezierPoints(self: *const T, Points: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).get_BezierPoints(@ptrCast(*const IInkStrokeDisp, self), Points);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_get_DrawingAttributes(self: *const T, DrawAttrs: **IInkDrawingAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).get_DrawingAttributes(@ptrCast(*const IInkStrokeDisp, self), DrawAttrs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_putref_DrawingAttributes(self: *const T, DrawAttrs: ?*IInkDrawingAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).putref_DrawingAttributes(@ptrCast(*const IInkStrokeDisp, self), DrawAttrs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_get_Ink(self: *const T, Ink: **IInkDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).get_Ink(@ptrCast(*const IInkStrokeDisp, self), Ink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_get_ExtendedProperties(self: *const T, Properties: **IInkExtendedProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).get_ExtendedProperties(@ptrCast(*const IInkStrokeDisp, self), Properties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_get_PolylineCusps(self: *const T, Cusps: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).get_PolylineCusps(@ptrCast(*const IInkStrokeDisp, self), Cusps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_get_BezierCusps(self: *const T, Cusps: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).get_BezierCusps(@ptrCast(*const IInkStrokeDisp, self), Cusps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_get_SelfIntersections(self: *const T, Intersections: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).get_SelfIntersections(@ptrCast(*const IInkStrokeDisp, self), Intersections);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_get_PacketCount(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).get_PacketCount(@ptrCast(*const IInkStrokeDisp, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_get_PacketSize(self: *const T, plSize: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).get_PacketSize(@ptrCast(*const IInkStrokeDisp, self), plSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_get_PacketDescription(self: *const T, PacketDescription: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).get_PacketDescription(@ptrCast(*const IInkStrokeDisp, self), PacketDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_get_Deleted(self: *const T, Deleted: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).get_Deleted(@ptrCast(*const IInkStrokeDisp, self), Deleted);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_GetBoundingBox(self: *const T, BoundingBoxMode: InkBoundingBoxMode, Rectangle: **IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).GetBoundingBox(@ptrCast(*const IInkStrokeDisp, self), BoundingBoxMode, Rectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_FindIntersections(self: *const T, Strokes: ?*IInkStrokes, Intersections: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).FindIntersections(@ptrCast(*const IInkStrokeDisp, self), Strokes, Intersections);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_GetRectangleIntersections(self: *const T, Rectangle: ?*IInkRectangle, Intersections: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).GetRectangleIntersections(@ptrCast(*const IInkStrokeDisp, self), Rectangle, Intersections);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_Clip(self: *const T, Rectangle: ?*IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).Clip(@ptrCast(*const IInkStrokeDisp, self), Rectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_HitTestCircle(self: *const T, X: i32, Y: i32, Radius: f32, Intersects: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).HitTestCircle(@ptrCast(*const IInkStrokeDisp, self), X, Y, Radius, Intersects);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_NearestPoint(self: *const T, X: i32, Y: i32, Distance: *f32, Point: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).NearestPoint(@ptrCast(*const IInkStrokeDisp, self), X, Y, Distance, Point);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_Split(self: *const T, SplitAt: f32, NewStroke: **IInkStrokeDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).Split(@ptrCast(*const IInkStrokeDisp, self), SplitAt, NewStroke);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_GetPacketDescriptionPropertyMetrics(self: *const T, PropertyName: BSTR, Minimum: *i32, Maximum: *i32, Units: *TabletPropertyMetricUnit, Resolution: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).GetPacketDescriptionPropertyMetrics(@ptrCast(*const IInkStrokeDisp, self), PropertyName, Minimum, Maximum, Units, Resolution);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_GetPoints(self: *const T, Index: i32, Count: i32, Points: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).GetPoints(@ptrCast(*const IInkStrokeDisp, self), Index, Count, Points);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_SetPoints(self: *const T, Points: VARIANT, Index: i32, Count: i32, NumberOfPointsSet: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).SetPoints(@ptrCast(*const IInkStrokeDisp, self), Points, Index, Count, NumberOfPointsSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_GetPacketData(self: *const T, Index: i32, Count: i32, PacketData: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).GetPacketData(@ptrCast(*const IInkStrokeDisp, self), Index, Count, PacketData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_GetPacketValuesByProperty(self: *const T, PropertyName: BSTR, Index: i32, Count: i32, PacketValues: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).GetPacketValuesByProperty(@ptrCast(*const IInkStrokeDisp, self), PropertyName, Index, Count, PacketValues);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_SetPacketValuesByProperty(self: *const T, bstrPropertyName: BSTR, PacketValues: VARIANT, Index: i32, Count: i32, NumberOfPacketsSet: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).SetPacketValuesByProperty(@ptrCast(*const IInkStrokeDisp, self), bstrPropertyName, PacketValues, Index, Count, NumberOfPacketsSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_GetFlattenedBezierPoints(self: *const T, FittingError: i32, FlattenedBezierPoints: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).GetFlattenedBezierPoints(@ptrCast(*const IInkStrokeDisp, self), FittingError, FlattenedBezierPoints);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_Transform(self: *const T, Transform: ?*IInkTransform, ApplyOnPenWidth: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).Transform(@ptrCast(*const IInkStrokeDisp, self), Transform, ApplyOnPenWidth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_ScaleToRectangle(self: *const T, Rectangle: ?*IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).ScaleToRectangle(@ptrCast(*const IInkStrokeDisp, self), Rectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_Move(self: *const T, HorizontalComponent: f32, VerticalComponent: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).Move(@ptrCast(*const IInkStrokeDisp, self), HorizontalComponent, VerticalComponent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_Rotate(self: *const T, Degrees: f32, x: f32, y: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).Rotate(@ptrCast(*const IInkStrokeDisp, self), Degrees, x, y);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_Shear(self: *const T, HorizontalMultiplier: f32, VerticalMultiplier: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).Shear(@ptrCast(*const IInkStrokeDisp, self), HorizontalMultiplier, VerticalMultiplier);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokeDisp_ScaleTransform(self: *const T, HorizontalMultiplier: f32, VerticalMultiplier: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokeDisp.VTable, self.vtable).ScaleTransform(@ptrCast(*const IInkStrokeDisp, self), HorizontalMultiplier, VerticalMultiplier);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkStrokes_Value = @import("../zig.zig").Guid.initString("F1F4C9D8-590A-4963-B3AE-1935671BB6F3");
pub const IID_IInkStrokes = &IID_IInkStrokes_Value;
pub const IInkStrokes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const IInkStrokes,
            Count: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IInkStrokes,
            _NewEnum: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Ink: fn(
            self: *const IInkStrokes,
            Ink: **IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RecognitionResult: fn(
            self: *const IInkStrokes,
            RecognitionResult: **IInkRecognitionResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ToString: fn(
            self: *const IInkStrokes,
            ToString: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const IInkStrokes,
            Index: i32,
            Stroke: **IInkStrokeDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IInkStrokes,
            InkStroke: ?*IInkStrokeDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStrokes: fn(
            self: *const IInkStrokes,
            InkStrokes: ?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IInkStrokes,
            InkStroke: ?*IInkStrokeDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStrokes: fn(
            self: *const IInkStrokes,
            InkStrokes: ?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ModifyDrawingAttributes: fn(
            self: *const IInkStrokes,
            DrawAttrs: ?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBoundingBox: fn(
            self: *const IInkStrokes,
            BoundingBoxMode: InkBoundingBoxMode,
            BoundingBox: **IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Transform: fn(
            self: *const IInkStrokes,
            Transform: ?*IInkTransform,
            ApplyOnPenWidth: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScaleToRectangle: fn(
            self: *const IInkStrokes,
            Rectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Move: fn(
            self: *const IInkStrokes,
            HorizontalComponent: f32,
            VerticalComponent: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rotate: fn(
            self: *const IInkStrokes,
            Degrees: f32,
            x: f32,
            y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shear: fn(
            self: *const IInkStrokes,
            HorizontalMultiplier: f32,
            VerticalMultiplier: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScaleTransform: fn(
            self: *const IInkStrokes,
            HorizontalMultiplier: f32,
            VerticalMultiplier: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clip: fn(
            self: *const IInkStrokes,
            Rectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveRecognitionResult: fn(
            self: *const IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_get_Count(self: *const T, Count: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).get_Count(@ptrCast(*const IInkStrokes, self), Count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_get__NewEnum(self: *const T, _NewEnum: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).get__NewEnum(@ptrCast(*const IInkStrokes, self), _NewEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_get_Ink(self: *const T, Ink: **IInkDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).get_Ink(@ptrCast(*const IInkStrokes, self), Ink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_get_RecognitionResult(self: *const T, RecognitionResult: **IInkRecognitionResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).get_RecognitionResult(@ptrCast(*const IInkStrokes, self), RecognitionResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_ToString(self: *const T, ToString: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).ToString(@ptrCast(*const IInkStrokes, self), ToString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_Item(self: *const T, Index: i32, Stroke: **IInkStrokeDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).Item(@ptrCast(*const IInkStrokes, self), Index, Stroke);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_Add(self: *const T, InkStroke: ?*IInkStrokeDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).Add(@ptrCast(*const IInkStrokes, self), InkStroke);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_AddStrokes(self: *const T, InkStrokes: ?*IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).AddStrokes(@ptrCast(*const IInkStrokes, self), InkStrokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_Remove(self: *const T, InkStroke: ?*IInkStrokeDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).Remove(@ptrCast(*const IInkStrokes, self), InkStroke);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_RemoveStrokes(self: *const T, InkStrokes: ?*IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).RemoveStrokes(@ptrCast(*const IInkStrokes, self), InkStrokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_ModifyDrawingAttributes(self: *const T, DrawAttrs: ?*IInkDrawingAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).ModifyDrawingAttributes(@ptrCast(*const IInkStrokes, self), DrawAttrs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_GetBoundingBox(self: *const T, BoundingBoxMode: InkBoundingBoxMode, BoundingBox: **IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).GetBoundingBox(@ptrCast(*const IInkStrokes, self), BoundingBoxMode, BoundingBox);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_Transform(self: *const T, Transform: ?*IInkTransform, ApplyOnPenWidth: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).Transform(@ptrCast(*const IInkStrokes, self), Transform, ApplyOnPenWidth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_ScaleToRectangle(self: *const T, Rectangle: ?*IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).ScaleToRectangle(@ptrCast(*const IInkStrokes, self), Rectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_Move(self: *const T, HorizontalComponent: f32, VerticalComponent: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).Move(@ptrCast(*const IInkStrokes, self), HorizontalComponent, VerticalComponent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_Rotate(self: *const T, Degrees: f32, x: f32, y: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).Rotate(@ptrCast(*const IInkStrokes, self), Degrees, x, y);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_Shear(self: *const T, HorizontalMultiplier: f32, VerticalMultiplier: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).Shear(@ptrCast(*const IInkStrokes, self), HorizontalMultiplier, VerticalMultiplier);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_ScaleTransform(self: *const T, HorizontalMultiplier: f32, VerticalMultiplier: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).ScaleTransform(@ptrCast(*const IInkStrokes, self), HorizontalMultiplier, VerticalMultiplier);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_Clip(self: *const T, Rectangle: ?*IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).Clip(@ptrCast(*const IInkStrokes, self), Rectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkStrokes_RemoveRecognitionResult(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkStrokes.VTable, self.vtable).RemoveRecognitionResult(@ptrCast(*const IInkStrokes, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkCustomStrokes_Value = @import("../zig.zig").Guid.initString("7E23A88F-C30E-420F-9BDB-28902543F0C1");
pub const IID_IInkCustomStrokes = &IID_IInkCustomStrokes_Value;
pub const IInkCustomStrokes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const IInkCustomStrokes,
            Count: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IInkCustomStrokes,
            _NewEnum: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const IInkCustomStrokes,
            Identifier: VARIANT,
            Strokes: **IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IInkCustomStrokes,
            Name: BSTR,
            Strokes: ?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IInkCustomStrokes,
            Identifier: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IInkCustomStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCustomStrokes_get_Count(self: *const T, Count: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCustomStrokes.VTable, self.vtable).get_Count(@ptrCast(*const IInkCustomStrokes, self), Count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCustomStrokes_get__NewEnum(self: *const T, _NewEnum: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCustomStrokes.VTable, self.vtable).get__NewEnum(@ptrCast(*const IInkCustomStrokes, self), _NewEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCustomStrokes_Item(self: *const T, Identifier: VARIANT, Strokes: **IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCustomStrokes.VTable, self.vtable).Item(@ptrCast(*const IInkCustomStrokes, self), Identifier, Strokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCustomStrokes_Add(self: *const T, Name: BSTR, Strokes: ?*IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCustomStrokes.VTable, self.vtable).Add(@ptrCast(*const IInkCustomStrokes, self), Name, Strokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCustomStrokes_Remove(self: *const T, Identifier: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCustomStrokes.VTable, self.vtable).Remove(@ptrCast(*const IInkCustomStrokes, self), Identifier);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCustomStrokes_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCustomStrokes.VTable, self.vtable).Clear(@ptrCast(*const IInkCustomStrokes, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID__IInkStrokesEvents_Value = @import("../zig.zig").Guid.initString("F33053EC-5D25-430A-928F-76A6491DDE15");
pub const IID__IInkStrokesEvents = &IID__IInkStrokesEvents_Value;
pub const _IInkStrokesEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkDisp_Value = @import("../zig.zig").Guid.initString("9D398FA0-C4E2-4FCD-9973-975CAAF47EA6");
pub const IID_IInkDisp = &IID_IInkDisp_Value;
pub const IInkDisp = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Strokes: fn(
            self: *const IInkDisp,
            Strokes: **IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ExtendedProperties: fn(
            self: *const IInkDisp,
            Properties: **IInkExtendedProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Dirty: fn(
            self: *const IInkDisp,
            Dirty: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Dirty: fn(
            self: *const IInkDisp,
            Dirty: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CustomStrokes: fn(
            self: *const IInkDisp,
            ppunkInkCustomStrokes: **IInkCustomStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBoundingBox: fn(
            self: *const IInkDisp,
            BoundingBoxMode: InkBoundingBoxMode,
            Rectangle: **IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteStrokes: fn(
            self: *const IInkDisp,
            Strokes: ?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteStroke: fn(
            self: *const IInkDisp,
            Stroke: ?*IInkStrokeDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExtractStrokes: fn(
            self: *const IInkDisp,
            Strokes: ?*IInkStrokes,
            ExtractFlags: InkExtractFlags,
            ExtractedInk: **IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExtractWithRectangle: fn(
            self: *const IInkDisp,
            Rectangle: ?*IInkRectangle,
            extractFlags: InkExtractFlags,
            ExtractedInk: **IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clip: fn(
            self: *const IInkDisp,
            Rectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IInkDisp,
            NewInk: **IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTestCircle: fn(
            self: *const IInkDisp,
            X: i32,
            Y: i32,
            radius: f32,
            Strokes: **IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTestWithRectangle: fn(
            self: *const IInkDisp,
            SelectionRectangle: ?*IInkRectangle,
            IntersectPercent: f32,
            Strokes: **IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTestWithLasso: fn(
            self: *const IInkDisp,
            Points: VARIANT,
            IntersectPercent: f32,
            LassoPoints: ?*VARIANT,
            Strokes: **IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NearestPoint: fn(
            self: *const IInkDisp,
            X: i32,
            Y: i32,
            PointOnStroke: *f32,
            DistanceFromPacket: *f32,
            Stroke: **IInkStrokeDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStrokes: fn(
            self: *const IInkDisp,
            StrokeIds: VARIANT,
            Strokes: **IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStrokesAtRectangle: fn(
            self: *const IInkDisp,
            SourceStrokes: ?*IInkStrokes,
            TargetRectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: fn(
            self: *const IInkDisp,
            PersistenceFormat: InkPersistenceFormat,
            CompressionMode: InkPersistenceCompressionMode,
            Data: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Load: fn(
            self: *const IInkDisp,
            Data: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStroke: fn(
            self: *const IInkDisp,
            PacketData: VARIANT,
            PacketDescription: VARIANT,
            Stroke: **IInkStrokeDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClipboardCopyWithRectangle: fn(
            self: *const IInkDisp,
            Rectangle: ?*IInkRectangle,
            ClipboardFormats: InkClipboardFormats,
            ClipboardModes: InkClipboardModes,
            DataObject: **IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClipboardCopy: fn(
            self: *const IInkDisp,
            strokes: ?*IInkStrokes,
            ClipboardFormats: InkClipboardFormats,
            ClipboardModes: InkClipboardModes,
            DataObject: **IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanPaste: fn(
            self: *const IInkDisp,
            DataObject: ?*IDataObject,
            CanPaste: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClipboardPaste: fn(
            self: *const IInkDisp,
            x: i32,
            y: i32,
            DataObject: ?*IDataObject,
            Strokes: **IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_get_Strokes(self: *const T, Strokes: **IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).get_Strokes(@ptrCast(*const IInkDisp, self), Strokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_get_ExtendedProperties(self: *const T, Properties: **IInkExtendedProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).get_ExtendedProperties(@ptrCast(*const IInkDisp, self), Properties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_get_Dirty(self: *const T, Dirty: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).get_Dirty(@ptrCast(*const IInkDisp, self), Dirty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_put_Dirty(self: *const T, Dirty: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).put_Dirty(@ptrCast(*const IInkDisp, self), Dirty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_get_CustomStrokes(self: *const T, ppunkInkCustomStrokes: **IInkCustomStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).get_CustomStrokes(@ptrCast(*const IInkDisp, self), ppunkInkCustomStrokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_GetBoundingBox(self: *const T, BoundingBoxMode: InkBoundingBoxMode, Rectangle: **IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).GetBoundingBox(@ptrCast(*const IInkDisp, self), BoundingBoxMode, Rectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_DeleteStrokes(self: *const T, Strokes: ?*IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).DeleteStrokes(@ptrCast(*const IInkDisp, self), Strokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_DeleteStroke(self: *const T, Stroke: ?*IInkStrokeDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).DeleteStroke(@ptrCast(*const IInkDisp, self), Stroke);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_ExtractStrokes(self: *const T, Strokes: ?*IInkStrokes, ExtractFlags: InkExtractFlags, ExtractedInk: **IInkDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).ExtractStrokes(@ptrCast(*const IInkDisp, self), Strokes, ExtractFlags, ExtractedInk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_ExtractWithRectangle(self: *const T, Rectangle: ?*IInkRectangle, extractFlags: InkExtractFlags, ExtractedInk: **IInkDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).ExtractWithRectangle(@ptrCast(*const IInkDisp, self), Rectangle, extractFlags, ExtractedInk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_Clip(self: *const T, Rectangle: ?*IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).Clip(@ptrCast(*const IInkDisp, self), Rectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_Clone(self: *const T, NewInk: **IInkDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).Clone(@ptrCast(*const IInkDisp, self), NewInk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_HitTestCircle(self: *const T, X: i32, Y: i32, radius: f32, Strokes: **IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).HitTestCircle(@ptrCast(*const IInkDisp, self), X, Y, radius, Strokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_HitTestWithRectangle(self: *const T, SelectionRectangle: ?*IInkRectangle, IntersectPercent: f32, Strokes: **IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).HitTestWithRectangle(@ptrCast(*const IInkDisp, self), SelectionRectangle, IntersectPercent, Strokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_HitTestWithLasso(self: *const T, Points: VARIANT, IntersectPercent: f32, LassoPoints: ?*VARIANT, Strokes: **IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).HitTestWithLasso(@ptrCast(*const IInkDisp, self), Points, IntersectPercent, LassoPoints, Strokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_NearestPoint(self: *const T, X: i32, Y: i32, PointOnStroke: *f32, DistanceFromPacket: *f32, Stroke: **IInkStrokeDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).NearestPoint(@ptrCast(*const IInkDisp, self), X, Y, PointOnStroke, DistanceFromPacket, Stroke);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_CreateStrokes(self: *const T, StrokeIds: VARIANT, Strokes: **IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).CreateStrokes(@ptrCast(*const IInkDisp, self), StrokeIds, Strokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_AddStrokesAtRectangle(self: *const T, SourceStrokes: ?*IInkStrokes, TargetRectangle: ?*IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).AddStrokesAtRectangle(@ptrCast(*const IInkDisp, self), SourceStrokes, TargetRectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_Save(self: *const T, PersistenceFormat: InkPersistenceFormat, CompressionMode: InkPersistenceCompressionMode, Data: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).Save(@ptrCast(*const IInkDisp, self), PersistenceFormat, CompressionMode, Data);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_Load(self: *const T, Data: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).Load(@ptrCast(*const IInkDisp, self), Data);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_CreateStroke(self: *const T, PacketData: VARIANT, PacketDescription: VARIANT, Stroke: **IInkStrokeDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).CreateStroke(@ptrCast(*const IInkDisp, self), PacketData, PacketDescription, Stroke);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_ClipboardCopyWithRectangle(self: *const T, Rectangle: ?*IInkRectangle, ClipboardFormats: InkClipboardFormats, ClipboardModes: InkClipboardModes, DataObject: **IDataObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).ClipboardCopyWithRectangle(@ptrCast(*const IInkDisp, self), Rectangle, ClipboardFormats, ClipboardModes, DataObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_ClipboardCopy(self: *const T, strokes: ?*IInkStrokes, ClipboardFormats: InkClipboardFormats, ClipboardModes: InkClipboardModes, DataObject: **IDataObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).ClipboardCopy(@ptrCast(*const IInkDisp, self), strokes, ClipboardFormats, ClipboardModes, DataObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_CanPaste(self: *const T, DataObject: ?*IDataObject, CanPaste: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).CanPaste(@ptrCast(*const IInkDisp, self), DataObject, CanPaste);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDisp_ClipboardPaste(self: *const T, x: i32, y: i32, DataObject: ?*IDataObject, Strokes: **IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDisp.VTable, self.vtable).ClipboardPaste(@ptrCast(*const IInkDisp, self), x, y, DataObject, Strokes);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID__IInkEvents_Value = @import("../zig.zig").Guid.initString("427B1865-CA3F-479A-83A9-0F420F2A0073");
pub const IID__IInkEvents = &IID__IInkEvents_Value;
pub const _IInkEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkRenderer_Value = @import("../zig.zig").Guid.initString("E6257A9C-B511-4F4C-A8B0-A7DBC9506B83");
pub const IID_IInkRenderer = &IID_IInkRenderer_Value;
pub const IInkRenderer = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetViewTransform: fn(
            self: *const IInkRenderer,
            ViewTransform: ?*IInkTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewTransform: fn(
            self: *const IInkRenderer,
            ViewTransform: ?*IInkTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectTransform: fn(
            self: *const IInkRenderer,
            ObjectTransform: ?*IInkTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetObjectTransform: fn(
            self: *const IInkRenderer,
            ObjectTransform: ?*IInkTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Draw: fn(
            self: *const IInkRenderer,
            hDC: ?*c_void,
            Strokes: ?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawStroke: fn(
            self: *const IInkRenderer,
            hDC: ?*c_void,
            Stroke: ?*IInkStrokeDisp,
            DrawingAttributes: ?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PixelToInkSpace: fn(
            self: *const IInkRenderer,
            hDC: ?*c_void,
            x: *i32,
            y: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InkSpaceToPixel: fn(
            self: *const IInkRenderer,
            hdcDisplay: ?*c_void,
            x: *i32,
            y: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PixelToInkSpaceFromPoints: fn(
            self: *const IInkRenderer,
            hDC: ?*c_void,
            Points: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InkSpaceToPixelFromPoints: fn(
            self: *const IInkRenderer,
            hDC: ?*c_void,
            Points: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Measure: fn(
            self: *const IInkRenderer,
            Strokes: ?*IInkStrokes,
            Rectangle: **IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MeasureStroke: fn(
            self: *const IInkRenderer,
            Stroke: ?*IInkStrokeDisp,
            DrawingAttributes: ?*IInkDrawingAttributes,
            Rectangle: **IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Move: fn(
            self: *const IInkRenderer,
            HorizontalComponent: f32,
            VerticalComponent: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rotate: fn(
            self: *const IInkRenderer,
            Degrees: f32,
            x: f32,
            y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScaleTransform: fn(
            self: *const IInkRenderer,
            HorizontalMultiplier: f32,
            VerticalMultiplier: f32,
            ApplyOnPenWidth: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRenderer_GetViewTransform(self: *const T, ViewTransform: ?*IInkTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRenderer.VTable, self.vtable).GetViewTransform(@ptrCast(*const IInkRenderer, self), ViewTransform);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRenderer_SetViewTransform(self: *const T, ViewTransform: ?*IInkTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRenderer.VTable, self.vtable).SetViewTransform(@ptrCast(*const IInkRenderer, self), ViewTransform);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRenderer_GetObjectTransform(self: *const T, ObjectTransform: ?*IInkTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRenderer.VTable, self.vtable).GetObjectTransform(@ptrCast(*const IInkRenderer, self), ObjectTransform);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRenderer_SetObjectTransform(self: *const T, ObjectTransform: ?*IInkTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRenderer.VTable, self.vtable).SetObjectTransform(@ptrCast(*const IInkRenderer, self), ObjectTransform);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRenderer_Draw(self: *const T, hDC: ?*c_void, Strokes: ?*IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRenderer.VTable, self.vtable).Draw(@ptrCast(*const IInkRenderer, self), hDC, Strokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRenderer_DrawStroke(self: *const T, hDC: ?*c_void, Stroke: ?*IInkStrokeDisp, DrawingAttributes: ?*IInkDrawingAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRenderer.VTable, self.vtable).DrawStroke(@ptrCast(*const IInkRenderer, self), hDC, Stroke, DrawingAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRenderer_PixelToInkSpace(self: *const T, hDC: ?*c_void, x: *i32, y: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRenderer.VTable, self.vtable).PixelToInkSpace(@ptrCast(*const IInkRenderer, self), hDC, x, y);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRenderer_InkSpaceToPixel(self: *const T, hdcDisplay: ?*c_void, x: *i32, y: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRenderer.VTable, self.vtable).InkSpaceToPixel(@ptrCast(*const IInkRenderer, self), hdcDisplay, x, y);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRenderer_PixelToInkSpaceFromPoints(self: *const T, hDC: ?*c_void, Points: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRenderer.VTable, self.vtable).PixelToInkSpaceFromPoints(@ptrCast(*const IInkRenderer, self), hDC, Points);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRenderer_InkSpaceToPixelFromPoints(self: *const T, hDC: ?*c_void, Points: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRenderer.VTable, self.vtable).InkSpaceToPixelFromPoints(@ptrCast(*const IInkRenderer, self), hDC, Points);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRenderer_Measure(self: *const T, Strokes: ?*IInkStrokes, Rectangle: **IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRenderer.VTable, self.vtable).Measure(@ptrCast(*const IInkRenderer, self), Strokes, Rectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRenderer_MeasureStroke(self: *const T, Stroke: ?*IInkStrokeDisp, DrawingAttributes: ?*IInkDrawingAttributes, Rectangle: **IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRenderer.VTable, self.vtable).MeasureStroke(@ptrCast(*const IInkRenderer, self), Stroke, DrawingAttributes, Rectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRenderer_Move(self: *const T, HorizontalComponent: f32, VerticalComponent: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRenderer.VTable, self.vtable).Move(@ptrCast(*const IInkRenderer, self), HorizontalComponent, VerticalComponent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRenderer_Rotate(self: *const T, Degrees: f32, x: f32, y: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRenderer.VTable, self.vtable).Rotate(@ptrCast(*const IInkRenderer, self), Degrees, x, y);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRenderer_ScaleTransform(self: *const T, HorizontalMultiplier: f32, VerticalMultiplier: f32, ApplyOnPenWidth: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRenderer.VTable, self.vtable).ScaleTransform(@ptrCast(*const IInkRenderer, self), HorizontalMultiplier, VerticalMultiplier, ApplyOnPenWidth);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkCollector_Value = @import("../zig.zig").Guid.initString("F0F060B5-8B1F-4A7C-89EC-880692588A4F");
pub const IID_IInkCollector = &IID_IInkCollector_Value;
pub const IInkCollector = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_hWnd: fn(
            self: *const IInkCollector,
            CurrentWindow: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_hWnd: fn(
            self: *const IInkCollector,
            NewWindow: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Enabled: fn(
            self: *const IInkCollector,
            Collecting: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Enabled: fn(
            self: *const IInkCollector,
            Collecting: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DefaultDrawingAttributes: fn(
            self: *const IInkCollector,
            CurrentAttributes: **IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_DefaultDrawingAttributes: fn(
            self: *const IInkCollector,
            NewAttributes: ?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Renderer: fn(
            self: *const IInkCollector,
            CurrentInkRenderer: **IInkRenderer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Renderer: fn(
            self: *const IInkCollector,
            NewInkRenderer: ?*IInkRenderer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Ink: fn(
            self: *const IInkCollector,
            Ink: **IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Ink: fn(
            self: *const IInkCollector,
            NewInk: ?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AutoRedraw: fn(
            self: *const IInkCollector,
            AutoRedraw: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AutoRedraw: fn(
            self: *const IInkCollector,
            AutoRedraw: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CollectingInk: fn(
            self: *const IInkCollector,
            Collecting: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CollectionMode: fn(
            self: *const IInkCollector,
            Mode: *InkCollectionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CollectionMode: fn(
            self: *const IInkCollector,
            Mode: InkCollectionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DynamicRendering: fn(
            self: *const IInkCollector,
            Enabled: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DynamicRendering: fn(
            self: *const IInkCollector,
            Enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DesiredPacketDescription: fn(
            self: *const IInkCollector,
            PacketGuids: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DesiredPacketDescription: fn(
            self: *const IInkCollector,
            PacketGuids: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MouseIcon: fn(
            self: *const IInkCollector,
            MouseIcon: **IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MouseIcon: fn(
            self: *const IInkCollector,
            MouseIcon: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_MouseIcon: fn(
            self: *const IInkCollector,
            MouseIcon: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MousePointer: fn(
            self: *const IInkCollector,
            MousePointer: *InkMousePointer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MousePointer: fn(
            self: *const IInkCollector,
            MousePointer: InkMousePointer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Cursors: fn(
            self: *const IInkCollector,
            Cursors: **IInkCursors,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MarginX: fn(
            self: *const IInkCollector,
            MarginX: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MarginX: fn(
            self: *const IInkCollector,
            MarginX: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MarginY: fn(
            self: *const IInkCollector,
            MarginY: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MarginY: fn(
            self: *const IInkCollector,
            MarginY: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Tablet: fn(
            self: *const IInkCollector,
            SingleTablet: **IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SupportHighContrastInk: fn(
            self: *const IInkCollector,
            Support: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SupportHighContrastInk: fn(
            self: *const IInkCollector,
            Support: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGestureStatus: fn(
            self: *const IInkCollector,
            Gesture: InkApplicationGesture,
            Listen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGestureStatus: fn(
            self: *const IInkCollector,
            Gesture: InkApplicationGesture,
            Listening: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWindowInputRectangle: fn(
            self: *const IInkCollector,
            WindowInputRectangle: ?*?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWindowInputRectangle: fn(
            self: *const IInkCollector,
            WindowInputRectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllTabletsMode: fn(
            self: *const IInkCollector,
            UseMouseForInput: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSingleTabletIntegratedMode: fn(
            self: *const IInkCollector,
            Tablet: ?*IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventInterest: fn(
            self: *const IInkCollector,
            EventId: InkCollectorEventInterest,
            Listen: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEventInterest: fn(
            self: *const IInkCollector,
            EventId: InkCollectorEventInterest,
            Listen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_get_hWnd(self: *const T, CurrentWindow: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).get_hWnd(@ptrCast(*const IInkCollector, self), CurrentWindow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_put_hWnd(self: *const T, NewWindow: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).put_hWnd(@ptrCast(*const IInkCollector, self), NewWindow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_get_Enabled(self: *const T, Collecting: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).get_Enabled(@ptrCast(*const IInkCollector, self), Collecting);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_put_Enabled(self: *const T, Collecting: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).put_Enabled(@ptrCast(*const IInkCollector, self), Collecting);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_get_DefaultDrawingAttributes(self: *const T, CurrentAttributes: **IInkDrawingAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).get_DefaultDrawingAttributes(@ptrCast(*const IInkCollector, self), CurrentAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_putref_DefaultDrawingAttributes(self: *const T, NewAttributes: ?*IInkDrawingAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).putref_DefaultDrawingAttributes(@ptrCast(*const IInkCollector, self), NewAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_get_Renderer(self: *const T, CurrentInkRenderer: **IInkRenderer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).get_Renderer(@ptrCast(*const IInkCollector, self), CurrentInkRenderer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_putref_Renderer(self: *const T, NewInkRenderer: ?*IInkRenderer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).putref_Renderer(@ptrCast(*const IInkCollector, self), NewInkRenderer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_get_Ink(self: *const T, Ink: **IInkDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).get_Ink(@ptrCast(*const IInkCollector, self), Ink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_putref_Ink(self: *const T, NewInk: ?*IInkDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).putref_Ink(@ptrCast(*const IInkCollector, self), NewInk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_get_AutoRedraw(self: *const T, AutoRedraw: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).get_AutoRedraw(@ptrCast(*const IInkCollector, self), AutoRedraw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_put_AutoRedraw(self: *const T, AutoRedraw: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).put_AutoRedraw(@ptrCast(*const IInkCollector, self), AutoRedraw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_get_CollectingInk(self: *const T, Collecting: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).get_CollectingInk(@ptrCast(*const IInkCollector, self), Collecting);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_get_CollectionMode(self: *const T, Mode: *InkCollectionMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).get_CollectionMode(@ptrCast(*const IInkCollector, self), Mode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_put_CollectionMode(self: *const T, Mode: InkCollectionMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).put_CollectionMode(@ptrCast(*const IInkCollector, self), Mode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_get_DynamicRendering(self: *const T, Enabled: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).get_DynamicRendering(@ptrCast(*const IInkCollector, self), Enabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_put_DynamicRendering(self: *const T, Enabled: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).put_DynamicRendering(@ptrCast(*const IInkCollector, self), Enabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_get_DesiredPacketDescription(self: *const T, PacketGuids: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).get_DesiredPacketDescription(@ptrCast(*const IInkCollector, self), PacketGuids);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_put_DesiredPacketDescription(self: *const T, PacketGuids: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).put_DesiredPacketDescription(@ptrCast(*const IInkCollector, self), PacketGuids);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_get_MouseIcon(self: *const T, MouseIcon: **IPictureDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).get_MouseIcon(@ptrCast(*const IInkCollector, self), MouseIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_put_MouseIcon(self: *const T, MouseIcon: ?*IPictureDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).put_MouseIcon(@ptrCast(*const IInkCollector, self), MouseIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_putref_MouseIcon(self: *const T, MouseIcon: ?*IPictureDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).putref_MouseIcon(@ptrCast(*const IInkCollector, self), MouseIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_get_MousePointer(self: *const T, MousePointer: *InkMousePointer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).get_MousePointer(@ptrCast(*const IInkCollector, self), MousePointer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_put_MousePointer(self: *const T, MousePointer: InkMousePointer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).put_MousePointer(@ptrCast(*const IInkCollector, self), MousePointer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_get_Cursors(self: *const T, Cursors: **IInkCursors) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).get_Cursors(@ptrCast(*const IInkCollector, self), Cursors);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_get_MarginX(self: *const T, MarginX: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).get_MarginX(@ptrCast(*const IInkCollector, self), MarginX);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_put_MarginX(self: *const T, MarginX: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).put_MarginX(@ptrCast(*const IInkCollector, self), MarginX);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_get_MarginY(self: *const T, MarginY: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).get_MarginY(@ptrCast(*const IInkCollector, self), MarginY);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_put_MarginY(self: *const T, MarginY: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).put_MarginY(@ptrCast(*const IInkCollector, self), MarginY);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_get_Tablet(self: *const T, SingleTablet: **IInkTablet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).get_Tablet(@ptrCast(*const IInkCollector, self), SingleTablet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_get_SupportHighContrastInk(self: *const T, Support: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).get_SupportHighContrastInk(@ptrCast(*const IInkCollector, self), Support);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_put_SupportHighContrastInk(self: *const T, Support: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).put_SupportHighContrastInk(@ptrCast(*const IInkCollector, self), Support);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_SetGestureStatus(self: *const T, Gesture: InkApplicationGesture, Listen: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).SetGestureStatus(@ptrCast(*const IInkCollector, self), Gesture, Listen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_GetGestureStatus(self: *const T, Gesture: InkApplicationGesture, Listening: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).GetGestureStatus(@ptrCast(*const IInkCollector, self), Gesture, Listening);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_GetWindowInputRectangle(self: *const T, WindowInputRectangle: ?*?*IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).GetWindowInputRectangle(@ptrCast(*const IInkCollector, self), WindowInputRectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_SetWindowInputRectangle(self: *const T, WindowInputRectangle: ?*IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).SetWindowInputRectangle(@ptrCast(*const IInkCollector, self), WindowInputRectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_SetAllTabletsMode(self: *const T, UseMouseForInput: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).SetAllTabletsMode(@ptrCast(*const IInkCollector, self), UseMouseForInput);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_SetSingleTabletIntegratedMode(self: *const T, Tablet: ?*IInkTablet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).SetSingleTabletIntegratedMode(@ptrCast(*const IInkCollector, self), Tablet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_GetEventInterest(self: *const T, EventId: InkCollectorEventInterest, Listen: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).GetEventInterest(@ptrCast(*const IInkCollector, self), EventId, Listen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCollector_SetEventInterest(self: *const T, EventId: InkCollectorEventInterest, Listen: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCollector.VTable, self.vtable).SetEventInterest(@ptrCast(*const IInkCollector, self), EventId, Listen);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID__IInkCollectorEvents_Value = @import("../zig.zig").Guid.initString("11A583F2-712D-4FEA-ABCF-AB4AF38EA06B");
pub const IID__IInkCollectorEvents = &IID__IInkCollectorEvents_Value;
pub const _IInkCollectorEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkOverlay_Value = @import("../zig.zig").Guid.initString("B82A463B-C1C5-45A3-997C-DEAB5651B67A");
pub const IID_IInkOverlay = &IID_IInkOverlay_Value;
pub const IInkOverlay = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_hWnd: fn(
            self: *const IInkOverlay,
            CurrentWindow: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_hWnd: fn(
            self: *const IInkOverlay,
            NewWindow: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Enabled: fn(
            self: *const IInkOverlay,
            Collecting: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Enabled: fn(
            self: *const IInkOverlay,
            Collecting: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DefaultDrawingAttributes: fn(
            self: *const IInkOverlay,
            CurrentAttributes: **IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_DefaultDrawingAttributes: fn(
            self: *const IInkOverlay,
            NewAttributes: ?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Renderer: fn(
            self: *const IInkOverlay,
            CurrentInkRenderer: **IInkRenderer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Renderer: fn(
            self: *const IInkOverlay,
            NewInkRenderer: ?*IInkRenderer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Ink: fn(
            self: *const IInkOverlay,
            Ink: **IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Ink: fn(
            self: *const IInkOverlay,
            NewInk: ?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AutoRedraw: fn(
            self: *const IInkOverlay,
            AutoRedraw: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AutoRedraw: fn(
            self: *const IInkOverlay,
            AutoRedraw: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CollectingInk: fn(
            self: *const IInkOverlay,
            Collecting: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CollectionMode: fn(
            self: *const IInkOverlay,
            Mode: *InkCollectionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CollectionMode: fn(
            self: *const IInkOverlay,
            Mode: InkCollectionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DynamicRendering: fn(
            self: *const IInkOverlay,
            Enabled: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DynamicRendering: fn(
            self: *const IInkOverlay,
            Enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DesiredPacketDescription: fn(
            self: *const IInkOverlay,
            PacketGuids: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DesiredPacketDescription: fn(
            self: *const IInkOverlay,
            PacketGuids: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MouseIcon: fn(
            self: *const IInkOverlay,
            MouseIcon: **IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MouseIcon: fn(
            self: *const IInkOverlay,
            MouseIcon: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_MouseIcon: fn(
            self: *const IInkOverlay,
            MouseIcon: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MousePointer: fn(
            self: *const IInkOverlay,
            MousePointer: *InkMousePointer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MousePointer: fn(
            self: *const IInkOverlay,
            MousePointer: InkMousePointer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EditingMode: fn(
            self: *const IInkOverlay,
            EditingMode: *InkOverlayEditingMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_EditingMode: fn(
            self: *const IInkOverlay,
            EditingMode: InkOverlayEditingMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Selection: fn(
            self: *const IInkOverlay,
            Selection: **IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Selection: fn(
            self: *const IInkOverlay,
            Selection: ?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EraserMode: fn(
            self: *const IInkOverlay,
            EraserMode: *InkOverlayEraserMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_EraserMode: fn(
            self: *const IInkOverlay,
            EraserMode: InkOverlayEraserMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EraserWidth: fn(
            self: *const IInkOverlay,
            EraserWidth: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_EraserWidth: fn(
            self: *const IInkOverlay,
            newEraserWidth: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AttachMode: fn(
            self: *const IInkOverlay,
            AttachMode: *InkOverlayAttachMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AttachMode: fn(
            self: *const IInkOverlay,
            AttachMode: InkOverlayAttachMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Cursors: fn(
            self: *const IInkOverlay,
            Cursors: **IInkCursors,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MarginX: fn(
            self: *const IInkOverlay,
            MarginX: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MarginX: fn(
            self: *const IInkOverlay,
            MarginX: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MarginY: fn(
            self: *const IInkOverlay,
            MarginY: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MarginY: fn(
            self: *const IInkOverlay,
            MarginY: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Tablet: fn(
            self: *const IInkOverlay,
            SingleTablet: **IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SupportHighContrastInk: fn(
            self: *const IInkOverlay,
            Support: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SupportHighContrastInk: fn(
            self: *const IInkOverlay,
            Support: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SupportHighContrastSelectionUI: fn(
            self: *const IInkOverlay,
            Support: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SupportHighContrastSelectionUI: fn(
            self: *const IInkOverlay,
            Support: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTestSelection: fn(
            self: *const IInkOverlay,
            x: i32,
            y: i32,
            SelArea: *SelectionHitResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Draw: fn(
            self: *const IInkOverlay,
            Rect: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGestureStatus: fn(
            self: *const IInkOverlay,
            Gesture: InkApplicationGesture,
            Listen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGestureStatus: fn(
            self: *const IInkOverlay,
            Gesture: InkApplicationGesture,
            Listening: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWindowInputRectangle: fn(
            self: *const IInkOverlay,
            WindowInputRectangle: ?*?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWindowInputRectangle: fn(
            self: *const IInkOverlay,
            WindowInputRectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllTabletsMode: fn(
            self: *const IInkOverlay,
            UseMouseForInput: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSingleTabletIntegratedMode: fn(
            self: *const IInkOverlay,
            Tablet: ?*IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventInterest: fn(
            self: *const IInkOverlay,
            EventId: InkCollectorEventInterest,
            Listen: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEventInterest: fn(
            self: *const IInkOverlay,
            EventId: InkCollectorEventInterest,
            Listen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_hWnd(self: *const T, CurrentWindow: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_hWnd(@ptrCast(*const IInkOverlay, self), CurrentWindow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_put_hWnd(self: *const T, NewWindow: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).put_hWnd(@ptrCast(*const IInkOverlay, self), NewWindow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_Enabled(self: *const T, Collecting: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_Enabled(@ptrCast(*const IInkOverlay, self), Collecting);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_put_Enabled(self: *const T, Collecting: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).put_Enabled(@ptrCast(*const IInkOverlay, self), Collecting);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_DefaultDrawingAttributes(self: *const T, CurrentAttributes: **IInkDrawingAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_DefaultDrawingAttributes(@ptrCast(*const IInkOverlay, self), CurrentAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_putref_DefaultDrawingAttributes(self: *const T, NewAttributes: ?*IInkDrawingAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).putref_DefaultDrawingAttributes(@ptrCast(*const IInkOverlay, self), NewAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_Renderer(self: *const T, CurrentInkRenderer: **IInkRenderer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_Renderer(@ptrCast(*const IInkOverlay, self), CurrentInkRenderer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_putref_Renderer(self: *const T, NewInkRenderer: ?*IInkRenderer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).putref_Renderer(@ptrCast(*const IInkOverlay, self), NewInkRenderer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_Ink(self: *const T, Ink: **IInkDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_Ink(@ptrCast(*const IInkOverlay, self), Ink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_putref_Ink(self: *const T, NewInk: ?*IInkDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).putref_Ink(@ptrCast(*const IInkOverlay, self), NewInk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_AutoRedraw(self: *const T, AutoRedraw: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_AutoRedraw(@ptrCast(*const IInkOverlay, self), AutoRedraw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_put_AutoRedraw(self: *const T, AutoRedraw: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).put_AutoRedraw(@ptrCast(*const IInkOverlay, self), AutoRedraw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_CollectingInk(self: *const T, Collecting: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_CollectingInk(@ptrCast(*const IInkOverlay, self), Collecting);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_CollectionMode(self: *const T, Mode: *InkCollectionMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_CollectionMode(@ptrCast(*const IInkOverlay, self), Mode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_put_CollectionMode(self: *const T, Mode: InkCollectionMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).put_CollectionMode(@ptrCast(*const IInkOverlay, self), Mode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_DynamicRendering(self: *const T, Enabled: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_DynamicRendering(@ptrCast(*const IInkOverlay, self), Enabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_put_DynamicRendering(self: *const T, Enabled: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).put_DynamicRendering(@ptrCast(*const IInkOverlay, self), Enabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_DesiredPacketDescription(self: *const T, PacketGuids: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_DesiredPacketDescription(@ptrCast(*const IInkOverlay, self), PacketGuids);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_put_DesiredPacketDescription(self: *const T, PacketGuids: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).put_DesiredPacketDescription(@ptrCast(*const IInkOverlay, self), PacketGuids);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_MouseIcon(self: *const T, MouseIcon: **IPictureDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_MouseIcon(@ptrCast(*const IInkOverlay, self), MouseIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_put_MouseIcon(self: *const T, MouseIcon: ?*IPictureDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).put_MouseIcon(@ptrCast(*const IInkOverlay, self), MouseIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_putref_MouseIcon(self: *const T, MouseIcon: ?*IPictureDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).putref_MouseIcon(@ptrCast(*const IInkOverlay, self), MouseIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_MousePointer(self: *const T, MousePointer: *InkMousePointer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_MousePointer(@ptrCast(*const IInkOverlay, self), MousePointer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_put_MousePointer(self: *const T, MousePointer: InkMousePointer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).put_MousePointer(@ptrCast(*const IInkOverlay, self), MousePointer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_EditingMode(self: *const T, EditingMode: *InkOverlayEditingMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_EditingMode(@ptrCast(*const IInkOverlay, self), EditingMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_put_EditingMode(self: *const T, EditingMode: InkOverlayEditingMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).put_EditingMode(@ptrCast(*const IInkOverlay, self), EditingMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_Selection(self: *const T, Selection: **IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_Selection(@ptrCast(*const IInkOverlay, self), Selection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_put_Selection(self: *const T, Selection: ?*IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).put_Selection(@ptrCast(*const IInkOverlay, self), Selection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_EraserMode(self: *const T, EraserMode: *InkOverlayEraserMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_EraserMode(@ptrCast(*const IInkOverlay, self), EraserMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_put_EraserMode(self: *const T, EraserMode: InkOverlayEraserMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).put_EraserMode(@ptrCast(*const IInkOverlay, self), EraserMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_EraserWidth(self: *const T, EraserWidth: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_EraserWidth(@ptrCast(*const IInkOverlay, self), EraserWidth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_put_EraserWidth(self: *const T, newEraserWidth: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).put_EraserWidth(@ptrCast(*const IInkOverlay, self), newEraserWidth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_AttachMode(self: *const T, AttachMode: *InkOverlayAttachMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_AttachMode(@ptrCast(*const IInkOverlay, self), AttachMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_put_AttachMode(self: *const T, AttachMode: InkOverlayAttachMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).put_AttachMode(@ptrCast(*const IInkOverlay, self), AttachMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_Cursors(self: *const T, Cursors: **IInkCursors) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_Cursors(@ptrCast(*const IInkOverlay, self), Cursors);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_MarginX(self: *const T, MarginX: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_MarginX(@ptrCast(*const IInkOverlay, self), MarginX);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_put_MarginX(self: *const T, MarginX: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).put_MarginX(@ptrCast(*const IInkOverlay, self), MarginX);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_MarginY(self: *const T, MarginY: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_MarginY(@ptrCast(*const IInkOverlay, self), MarginY);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_put_MarginY(self: *const T, MarginY: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).put_MarginY(@ptrCast(*const IInkOverlay, self), MarginY);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_Tablet(self: *const T, SingleTablet: **IInkTablet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_Tablet(@ptrCast(*const IInkOverlay, self), SingleTablet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_SupportHighContrastInk(self: *const T, Support: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_SupportHighContrastInk(@ptrCast(*const IInkOverlay, self), Support);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_put_SupportHighContrastInk(self: *const T, Support: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).put_SupportHighContrastInk(@ptrCast(*const IInkOverlay, self), Support);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_get_SupportHighContrastSelectionUI(self: *const T, Support: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).get_SupportHighContrastSelectionUI(@ptrCast(*const IInkOverlay, self), Support);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_put_SupportHighContrastSelectionUI(self: *const T, Support: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).put_SupportHighContrastSelectionUI(@ptrCast(*const IInkOverlay, self), Support);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_HitTestSelection(self: *const T, x: i32, y: i32, SelArea: *SelectionHitResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).HitTestSelection(@ptrCast(*const IInkOverlay, self), x, y, SelArea);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_Draw(self: *const T, Rect: ?*IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).Draw(@ptrCast(*const IInkOverlay, self), Rect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_SetGestureStatus(self: *const T, Gesture: InkApplicationGesture, Listen: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).SetGestureStatus(@ptrCast(*const IInkOverlay, self), Gesture, Listen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_GetGestureStatus(self: *const T, Gesture: InkApplicationGesture, Listening: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).GetGestureStatus(@ptrCast(*const IInkOverlay, self), Gesture, Listening);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_GetWindowInputRectangle(self: *const T, WindowInputRectangle: ?*?*IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).GetWindowInputRectangle(@ptrCast(*const IInkOverlay, self), WindowInputRectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_SetWindowInputRectangle(self: *const T, WindowInputRectangle: ?*IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).SetWindowInputRectangle(@ptrCast(*const IInkOverlay, self), WindowInputRectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_SetAllTabletsMode(self: *const T, UseMouseForInput: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).SetAllTabletsMode(@ptrCast(*const IInkOverlay, self), UseMouseForInput);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_SetSingleTabletIntegratedMode(self: *const T, Tablet: ?*IInkTablet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).SetSingleTabletIntegratedMode(@ptrCast(*const IInkOverlay, self), Tablet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_GetEventInterest(self: *const T, EventId: InkCollectorEventInterest, Listen: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).GetEventInterest(@ptrCast(*const IInkOverlay, self), EventId, Listen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkOverlay_SetEventInterest(self: *const T, EventId: InkCollectorEventInterest, Listen: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkOverlay.VTable, self.vtable).SetEventInterest(@ptrCast(*const IInkOverlay, self), EventId, Listen);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID__IInkOverlayEvents_Value = @import("../zig.zig").Guid.initString("31179B69-E563-489E-B16F-712F1E8A0651");
pub const IID__IInkOverlayEvents = &IID__IInkOverlayEvents_Value;
pub const _IInkOverlayEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkPicture_Value = @import("../zig.zig").Guid.initString("E85662E0-379A-40D7-9B5C-757D233F9923");
pub const IID_IInkPicture = &IID_IInkPicture_Value;
pub const IInkPicture = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_hWnd: fn(
            self: *const IInkPicture,
            CurrentWindow: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DefaultDrawingAttributes: fn(
            self: *const IInkPicture,
            CurrentAttributes: **IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_DefaultDrawingAttributes: fn(
            self: *const IInkPicture,
            NewAttributes: ?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Renderer: fn(
            self: *const IInkPicture,
            CurrentInkRenderer: **IInkRenderer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Renderer: fn(
            self: *const IInkPicture,
            NewInkRenderer: ?*IInkRenderer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Ink: fn(
            self: *const IInkPicture,
            Ink: **IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Ink: fn(
            self: *const IInkPicture,
            NewInk: ?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AutoRedraw: fn(
            self: *const IInkPicture,
            AutoRedraw: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AutoRedraw: fn(
            self: *const IInkPicture,
            AutoRedraw: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CollectingInk: fn(
            self: *const IInkPicture,
            Collecting: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CollectionMode: fn(
            self: *const IInkPicture,
            Mode: *InkCollectionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CollectionMode: fn(
            self: *const IInkPicture,
            Mode: InkCollectionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DynamicRendering: fn(
            self: *const IInkPicture,
            Enabled: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DynamicRendering: fn(
            self: *const IInkPicture,
            Enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DesiredPacketDescription: fn(
            self: *const IInkPicture,
            PacketGuids: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DesiredPacketDescription: fn(
            self: *const IInkPicture,
            PacketGuids: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MouseIcon: fn(
            self: *const IInkPicture,
            MouseIcon: **IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MouseIcon: fn(
            self: *const IInkPicture,
            MouseIcon: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_MouseIcon: fn(
            self: *const IInkPicture,
            MouseIcon: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MousePointer: fn(
            self: *const IInkPicture,
            MousePointer: *InkMousePointer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MousePointer: fn(
            self: *const IInkPicture,
            MousePointer: InkMousePointer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EditingMode: fn(
            self: *const IInkPicture,
            EditingMode: *InkOverlayEditingMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_EditingMode: fn(
            self: *const IInkPicture,
            EditingMode: InkOverlayEditingMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Selection: fn(
            self: *const IInkPicture,
            Selection: **IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Selection: fn(
            self: *const IInkPicture,
            Selection: ?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EraserMode: fn(
            self: *const IInkPicture,
            EraserMode: *InkOverlayEraserMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_EraserMode: fn(
            self: *const IInkPicture,
            EraserMode: InkOverlayEraserMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EraserWidth: fn(
            self: *const IInkPicture,
            EraserWidth: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_EraserWidth: fn(
            self: *const IInkPicture,
            newEraserWidth: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Picture: fn(
            self: *const IInkPicture,
            pPicture: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Picture: fn(
            self: *const IInkPicture,
            pPicture: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Picture: fn(
            self: *const IInkPicture,
            ppPicture: **IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SizeMode: fn(
            self: *const IInkPicture,
            smNewSizeMode: InkPictureSizeMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SizeMode: fn(
            self: *const IInkPicture,
            smSizeMode: *InkPictureSizeMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_BackColor: fn(
            self: *const IInkPicture,
            newColor: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BackColor: fn(
            self: *const IInkPicture,
            pColor: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Cursors: fn(
            self: *const IInkPicture,
            Cursors: **IInkCursors,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MarginX: fn(
            self: *const IInkPicture,
            MarginX: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MarginX: fn(
            self: *const IInkPicture,
            MarginX: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MarginY: fn(
            self: *const IInkPicture,
            MarginY: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MarginY: fn(
            self: *const IInkPicture,
            MarginY: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Tablet: fn(
            self: *const IInkPicture,
            SingleTablet: **IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SupportHighContrastInk: fn(
            self: *const IInkPicture,
            Support: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SupportHighContrastInk: fn(
            self: *const IInkPicture,
            Support: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SupportHighContrastSelectionUI: fn(
            self: *const IInkPicture,
            Support: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SupportHighContrastSelectionUI: fn(
            self: *const IInkPicture,
            Support: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTestSelection: fn(
            self: *const IInkPicture,
            x: i32,
            y: i32,
            SelArea: *SelectionHitResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGestureStatus: fn(
            self: *const IInkPicture,
            Gesture: InkApplicationGesture,
            Listen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGestureStatus: fn(
            self: *const IInkPicture,
            Gesture: InkApplicationGesture,
            Listening: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWindowInputRectangle: fn(
            self: *const IInkPicture,
            WindowInputRectangle: ?*?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWindowInputRectangle: fn(
            self: *const IInkPicture,
            WindowInputRectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllTabletsMode: fn(
            self: *const IInkPicture,
            UseMouseForInput: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSingleTabletIntegratedMode: fn(
            self: *const IInkPicture,
            Tablet: ?*IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventInterest: fn(
            self: *const IInkPicture,
            EventId: InkCollectorEventInterest,
            Listen: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEventInterest: fn(
            self: *const IInkPicture,
            EventId: InkCollectorEventInterest,
            Listen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_InkEnabled: fn(
            self: *const IInkPicture,
            Collecting: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_InkEnabled: fn(
            self: *const IInkPicture,
            Collecting: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Enabled: fn(
            self: *const IInkPicture,
            pbool: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Enabled: fn(
            self: *const IInkPicture,
            vbool: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_hWnd(self: *const T, CurrentWindow: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_hWnd(@ptrCast(*const IInkPicture, self), CurrentWindow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_DefaultDrawingAttributes(self: *const T, CurrentAttributes: **IInkDrawingAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_DefaultDrawingAttributes(@ptrCast(*const IInkPicture, self), CurrentAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_putref_DefaultDrawingAttributes(self: *const T, NewAttributes: ?*IInkDrawingAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).putref_DefaultDrawingAttributes(@ptrCast(*const IInkPicture, self), NewAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_Renderer(self: *const T, CurrentInkRenderer: **IInkRenderer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_Renderer(@ptrCast(*const IInkPicture, self), CurrentInkRenderer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_putref_Renderer(self: *const T, NewInkRenderer: ?*IInkRenderer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).putref_Renderer(@ptrCast(*const IInkPicture, self), NewInkRenderer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_Ink(self: *const T, Ink: **IInkDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_Ink(@ptrCast(*const IInkPicture, self), Ink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_putref_Ink(self: *const T, NewInk: ?*IInkDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).putref_Ink(@ptrCast(*const IInkPicture, self), NewInk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_AutoRedraw(self: *const T, AutoRedraw: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_AutoRedraw(@ptrCast(*const IInkPicture, self), AutoRedraw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_AutoRedraw(self: *const T, AutoRedraw: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_AutoRedraw(@ptrCast(*const IInkPicture, self), AutoRedraw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_CollectingInk(self: *const T, Collecting: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_CollectingInk(@ptrCast(*const IInkPicture, self), Collecting);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_CollectionMode(self: *const T, Mode: *InkCollectionMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_CollectionMode(@ptrCast(*const IInkPicture, self), Mode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_CollectionMode(self: *const T, Mode: InkCollectionMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_CollectionMode(@ptrCast(*const IInkPicture, self), Mode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_DynamicRendering(self: *const T, Enabled: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_DynamicRendering(@ptrCast(*const IInkPicture, self), Enabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_DynamicRendering(self: *const T, Enabled: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_DynamicRendering(@ptrCast(*const IInkPicture, self), Enabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_DesiredPacketDescription(self: *const T, PacketGuids: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_DesiredPacketDescription(@ptrCast(*const IInkPicture, self), PacketGuids);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_DesiredPacketDescription(self: *const T, PacketGuids: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_DesiredPacketDescription(@ptrCast(*const IInkPicture, self), PacketGuids);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_MouseIcon(self: *const T, MouseIcon: **IPictureDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_MouseIcon(@ptrCast(*const IInkPicture, self), MouseIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_MouseIcon(self: *const T, MouseIcon: ?*IPictureDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_MouseIcon(@ptrCast(*const IInkPicture, self), MouseIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_putref_MouseIcon(self: *const T, MouseIcon: ?*IPictureDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).putref_MouseIcon(@ptrCast(*const IInkPicture, self), MouseIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_MousePointer(self: *const T, MousePointer: *InkMousePointer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_MousePointer(@ptrCast(*const IInkPicture, self), MousePointer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_MousePointer(self: *const T, MousePointer: InkMousePointer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_MousePointer(@ptrCast(*const IInkPicture, self), MousePointer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_EditingMode(self: *const T, EditingMode: *InkOverlayEditingMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_EditingMode(@ptrCast(*const IInkPicture, self), EditingMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_EditingMode(self: *const T, EditingMode: InkOverlayEditingMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_EditingMode(@ptrCast(*const IInkPicture, self), EditingMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_Selection(self: *const T, Selection: **IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_Selection(@ptrCast(*const IInkPicture, self), Selection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_Selection(self: *const T, Selection: ?*IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_Selection(@ptrCast(*const IInkPicture, self), Selection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_EraserMode(self: *const T, EraserMode: *InkOverlayEraserMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_EraserMode(@ptrCast(*const IInkPicture, self), EraserMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_EraserMode(self: *const T, EraserMode: InkOverlayEraserMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_EraserMode(@ptrCast(*const IInkPicture, self), EraserMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_EraserWidth(self: *const T, EraserWidth: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_EraserWidth(@ptrCast(*const IInkPicture, self), EraserWidth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_EraserWidth(self: *const T, newEraserWidth: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_EraserWidth(@ptrCast(*const IInkPicture, self), newEraserWidth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_putref_Picture(self: *const T, pPicture: ?*IPictureDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).putref_Picture(@ptrCast(*const IInkPicture, self), pPicture);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_Picture(self: *const T, pPicture: ?*IPictureDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_Picture(@ptrCast(*const IInkPicture, self), pPicture);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_Picture(self: *const T, ppPicture: **IPictureDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_Picture(@ptrCast(*const IInkPicture, self), ppPicture);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_SizeMode(self: *const T, smNewSizeMode: InkPictureSizeMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_SizeMode(@ptrCast(*const IInkPicture, self), smNewSizeMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_SizeMode(self: *const T, smSizeMode: *InkPictureSizeMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_SizeMode(@ptrCast(*const IInkPicture, self), smSizeMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_BackColor(self: *const T, newColor: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_BackColor(@ptrCast(*const IInkPicture, self), newColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_BackColor(self: *const T, pColor: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_BackColor(@ptrCast(*const IInkPicture, self), pColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_Cursors(self: *const T, Cursors: **IInkCursors) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_Cursors(@ptrCast(*const IInkPicture, self), Cursors);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_MarginX(self: *const T, MarginX: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_MarginX(@ptrCast(*const IInkPicture, self), MarginX);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_MarginX(self: *const T, MarginX: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_MarginX(@ptrCast(*const IInkPicture, self), MarginX);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_MarginY(self: *const T, MarginY: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_MarginY(@ptrCast(*const IInkPicture, self), MarginY);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_MarginY(self: *const T, MarginY: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_MarginY(@ptrCast(*const IInkPicture, self), MarginY);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_Tablet(self: *const T, SingleTablet: **IInkTablet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_Tablet(@ptrCast(*const IInkPicture, self), SingleTablet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_SupportHighContrastInk(self: *const T, Support: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_SupportHighContrastInk(@ptrCast(*const IInkPicture, self), Support);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_SupportHighContrastInk(self: *const T, Support: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_SupportHighContrastInk(@ptrCast(*const IInkPicture, self), Support);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_SupportHighContrastSelectionUI(self: *const T, Support: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_SupportHighContrastSelectionUI(@ptrCast(*const IInkPicture, self), Support);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_SupportHighContrastSelectionUI(self: *const T, Support: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_SupportHighContrastSelectionUI(@ptrCast(*const IInkPicture, self), Support);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_HitTestSelection(self: *const T, x: i32, y: i32, SelArea: *SelectionHitResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).HitTestSelection(@ptrCast(*const IInkPicture, self), x, y, SelArea);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_SetGestureStatus(self: *const T, Gesture: InkApplicationGesture, Listen: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).SetGestureStatus(@ptrCast(*const IInkPicture, self), Gesture, Listen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_GetGestureStatus(self: *const T, Gesture: InkApplicationGesture, Listening: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).GetGestureStatus(@ptrCast(*const IInkPicture, self), Gesture, Listening);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_GetWindowInputRectangle(self: *const T, WindowInputRectangle: ?*?*IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).GetWindowInputRectangle(@ptrCast(*const IInkPicture, self), WindowInputRectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_SetWindowInputRectangle(self: *const T, WindowInputRectangle: ?*IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).SetWindowInputRectangle(@ptrCast(*const IInkPicture, self), WindowInputRectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_SetAllTabletsMode(self: *const T, UseMouseForInput: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).SetAllTabletsMode(@ptrCast(*const IInkPicture, self), UseMouseForInput);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_SetSingleTabletIntegratedMode(self: *const T, Tablet: ?*IInkTablet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).SetSingleTabletIntegratedMode(@ptrCast(*const IInkPicture, self), Tablet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_GetEventInterest(self: *const T, EventId: InkCollectorEventInterest, Listen: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).GetEventInterest(@ptrCast(*const IInkPicture, self), EventId, Listen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_SetEventInterest(self: *const T, EventId: InkCollectorEventInterest, Listen: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).SetEventInterest(@ptrCast(*const IInkPicture, self), EventId, Listen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_InkEnabled(self: *const T, Collecting: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_InkEnabled(@ptrCast(*const IInkPicture, self), Collecting);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_InkEnabled(self: *const T, Collecting: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_InkEnabled(@ptrCast(*const IInkPicture, self), Collecting);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_get_Enabled(self: *const T, pbool: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).get_Enabled(@ptrCast(*const IInkPicture, self), pbool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPicture_put_Enabled(self: *const T, vbool: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPicture.VTable, self.vtable).put_Enabled(@ptrCast(*const IInkPicture, self), vbool);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID__IInkPictureEvents_Value = @import("../zig.zig").Guid.initString("60FF4FEE-22FF-4484-ACC1-D308D9CD7EA3");
pub const IID__IInkPictureEvents = &IID__IInkPictureEvents_Value;
pub const _IInkPictureEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkRecognizer_Value = @import("../zig.zig").Guid.initString("782BF7CF-034B-4396-8A32-3A1833CF6B56");
pub const IID_IInkRecognizer = &IID_IInkRecognizer_Value;
pub const IInkRecognizer = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Name: fn(
            self: *const IInkRecognizer,
            Name: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Vendor: fn(
            self: *const IInkRecognizer,
            Vendor: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Capabilities: fn(
            self: *const IInkRecognizer,
            CapabilitiesFlags: *InkRecognizerCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Languages: fn(
            self: *const IInkRecognizer,
            Languages: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SupportedProperties: fn(
            self: *const IInkRecognizer,
            SupportedProperties: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PreferredPacketDescription: fn(
            self: *const IInkRecognizer,
            PreferredPacketDescription: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRecognizerContext: fn(
            self: *const IInkRecognizer,
            Context: **IInkRecognizerContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizer_get_Name(self: *const T, Name: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizer.VTable, self.vtable).get_Name(@ptrCast(*const IInkRecognizer, self), Name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizer_get_Vendor(self: *const T, Vendor: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizer.VTable, self.vtable).get_Vendor(@ptrCast(*const IInkRecognizer, self), Vendor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizer_get_Capabilities(self: *const T, CapabilitiesFlags: *InkRecognizerCapabilities) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizer.VTable, self.vtable).get_Capabilities(@ptrCast(*const IInkRecognizer, self), CapabilitiesFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizer_get_Languages(self: *const T, Languages: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizer.VTable, self.vtable).get_Languages(@ptrCast(*const IInkRecognizer, self), Languages);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizer_get_SupportedProperties(self: *const T, SupportedProperties: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizer.VTable, self.vtable).get_SupportedProperties(@ptrCast(*const IInkRecognizer, self), SupportedProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizer_get_PreferredPacketDescription(self: *const T, PreferredPacketDescription: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizer.VTable, self.vtable).get_PreferredPacketDescription(@ptrCast(*const IInkRecognizer, self), PreferredPacketDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizer_CreateRecognizerContext(self: *const T, Context: **IInkRecognizerContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizer.VTable, self.vtable).CreateRecognizerContext(@ptrCast(*const IInkRecognizer, self), Context);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkRecognizer2_Value = @import("../zig.zig").Guid.initString("6110118A-3A75-4AD6-B2AA-04B2B72BBE65");
pub const IID_IInkRecognizer2 = &IID_IInkRecognizer2_Value;
pub const IInkRecognizer2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Id: fn(
            self: *const IInkRecognizer2,
            pbstrId: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UnicodeRanges: fn(
            self: *const IInkRecognizer2,
            UnicodeRanges: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizer2_get_Id(self: *const T, pbstrId: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizer2.VTable, self.vtable).get_Id(@ptrCast(*const IInkRecognizer2, self), pbstrId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizer2_get_UnicodeRanges(self: *const T, UnicodeRanges: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizer2.VTable, self.vtable).get_UnicodeRanges(@ptrCast(*const IInkRecognizer2, self), UnicodeRanges);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkRecognizers_Value = @import("../zig.zig").Guid.initString("9CCC4F12-B0B7-4A8B-BF58-4AECA4E8CEFD");
pub const IID_IInkRecognizers = &IID_IInkRecognizers_Value;
pub const IInkRecognizers = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const IInkRecognizers,
            Count: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IInkRecognizers,
            _NewEnum: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultRecognizer: fn(
            self: *const IInkRecognizers,
            lcid: i32,
            DefaultRecognizer: **IInkRecognizer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const IInkRecognizers,
            Index: i32,
            InkRecognizer: **IInkRecognizer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizers_get_Count(self: *const T, Count: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizers.VTable, self.vtable).get_Count(@ptrCast(*const IInkRecognizers, self), Count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizers_get__NewEnum(self: *const T, _NewEnum: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizers.VTable, self.vtable).get__NewEnum(@ptrCast(*const IInkRecognizers, self), _NewEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizers_GetDefaultRecognizer(self: *const T, lcid: i32, DefaultRecognizer: **IInkRecognizer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizers.VTable, self.vtable).GetDefaultRecognizer(@ptrCast(*const IInkRecognizers, self), lcid, DefaultRecognizer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizers_Item(self: *const T, Index: i32, InkRecognizer: **IInkRecognizer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizers.VTable, self.vtable).Item(@ptrCast(*const IInkRecognizers, self), Index, InkRecognizer);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID__IInkRecognitionEvents_Value = @import("../zig.zig").Guid.initString("17BCE92F-2E21-47FD-9D33-3C6AFBFD8C59");
pub const IID__IInkRecognitionEvents = &IID__IInkRecognitionEvents_Value;
pub const _IInkRecognitionEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkRecognizerContext_Value = @import("../zig.zig").Guid.initString("C68F52F9-32A3-4625-906C-44FC23B40958");
pub const IID_IInkRecognizerContext = &IID_IInkRecognizerContext_Value;
pub const IInkRecognizerContext = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Strokes: fn(
            self: *const IInkRecognizerContext,
            Strokes: **IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Strokes: fn(
            self: *const IInkRecognizerContext,
            Strokes: ?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CharacterAutoCompletionMode: fn(
            self: *const IInkRecognizerContext,
            Mode: *InkRecognizerCharacterAutoCompletionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CharacterAutoCompletionMode: fn(
            self: *const IInkRecognizerContext,
            Mode: InkRecognizerCharacterAutoCompletionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Factoid: fn(
            self: *const IInkRecognizerContext,
            Factoid: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Factoid: fn(
            self: *const IInkRecognizerContext,
            factoid: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Guide: fn(
            self: *const IInkRecognizerContext,
            RecognizerGuide: **IInkRecognizerGuide,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Guide: fn(
            self: *const IInkRecognizerContext,
            RecognizerGuide: ?*IInkRecognizerGuide,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrefixText: fn(
            self: *const IInkRecognizerContext,
            Prefix: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_PrefixText: fn(
            self: *const IInkRecognizerContext,
            Prefix: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SuffixText: fn(
            self: *const IInkRecognizerContext,
            Suffix: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SuffixText: fn(
            self: *const IInkRecognizerContext,
            Suffix: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RecognitionFlags: fn(
            self: *const IInkRecognizerContext,
            Modes: *InkRecognitionModes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RecognitionFlags: fn(
            self: *const IInkRecognizerContext,
            Modes: InkRecognitionModes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_WordList: fn(
            self: *const IInkRecognizerContext,
            WordList: **IInkWordList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_WordList: fn(
            self: *const IInkRecognizerContext,
            WordList: ?*IInkWordList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Recognizer: fn(
            self: *const IInkRecognizerContext,
            Recognizer: **IInkRecognizer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Recognize: fn(
            self: *const IInkRecognizerContext,
            RecognitionStatus: *InkRecognitionStatus,
            RecognitionResult: **IInkRecognitionResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopBackgroundRecognition: fn(
            self: *const IInkRecognizerContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndInkInput: fn(
            self: *const IInkRecognizerContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackgroundRecognize: fn(
            self: *const IInkRecognizerContext,
            CustomData: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackgroundRecognizeWithAlternates: fn(
            self: *const IInkRecognizerContext,
            CustomData: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IInkRecognizerContext,
            RecoContext: **IInkRecognizerContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsStringSupported: fn(
            self: *const IInkRecognizerContext,
            String: BSTR,
            Supported: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_get_Strokes(self: *const T, Strokes: **IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).get_Strokes(@ptrCast(*const IInkRecognizerContext, self), Strokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_putref_Strokes(self: *const T, Strokes: ?*IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).putref_Strokes(@ptrCast(*const IInkRecognizerContext, self), Strokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_get_CharacterAutoCompletionMode(self: *const T, Mode: *InkRecognizerCharacterAutoCompletionMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).get_CharacterAutoCompletionMode(@ptrCast(*const IInkRecognizerContext, self), Mode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_put_CharacterAutoCompletionMode(self: *const T, Mode: InkRecognizerCharacterAutoCompletionMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).put_CharacterAutoCompletionMode(@ptrCast(*const IInkRecognizerContext, self), Mode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_get_Factoid(self: *const T, Factoid: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).get_Factoid(@ptrCast(*const IInkRecognizerContext, self), Factoid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_put_Factoid(self: *const T, factoid: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).put_Factoid(@ptrCast(*const IInkRecognizerContext, self), factoid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_get_Guide(self: *const T, RecognizerGuide: **IInkRecognizerGuide) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).get_Guide(@ptrCast(*const IInkRecognizerContext, self), RecognizerGuide);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_putref_Guide(self: *const T, RecognizerGuide: ?*IInkRecognizerGuide) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).putref_Guide(@ptrCast(*const IInkRecognizerContext, self), RecognizerGuide);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_get_PrefixText(self: *const T, Prefix: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).get_PrefixText(@ptrCast(*const IInkRecognizerContext, self), Prefix);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_put_PrefixText(self: *const T, Prefix: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).put_PrefixText(@ptrCast(*const IInkRecognizerContext, self), Prefix);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_get_SuffixText(self: *const T, Suffix: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).get_SuffixText(@ptrCast(*const IInkRecognizerContext, self), Suffix);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_put_SuffixText(self: *const T, Suffix: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).put_SuffixText(@ptrCast(*const IInkRecognizerContext, self), Suffix);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_get_RecognitionFlags(self: *const T, Modes: *InkRecognitionModes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).get_RecognitionFlags(@ptrCast(*const IInkRecognizerContext, self), Modes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_put_RecognitionFlags(self: *const T, Modes: InkRecognitionModes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).put_RecognitionFlags(@ptrCast(*const IInkRecognizerContext, self), Modes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_get_WordList(self: *const T, WordList: **IInkWordList) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).get_WordList(@ptrCast(*const IInkRecognizerContext, self), WordList);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_putref_WordList(self: *const T, WordList: ?*IInkWordList) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).putref_WordList(@ptrCast(*const IInkRecognizerContext, self), WordList);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_get_Recognizer(self: *const T, Recognizer: **IInkRecognizer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).get_Recognizer(@ptrCast(*const IInkRecognizerContext, self), Recognizer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_Recognize(self: *const T, RecognitionStatus: *InkRecognitionStatus, RecognitionResult: **IInkRecognitionResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).Recognize(@ptrCast(*const IInkRecognizerContext, self), RecognitionStatus, RecognitionResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_StopBackgroundRecognition(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).StopBackgroundRecognition(@ptrCast(*const IInkRecognizerContext, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_EndInkInput(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).EndInkInput(@ptrCast(*const IInkRecognizerContext, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_BackgroundRecognize(self: *const T, CustomData: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).BackgroundRecognize(@ptrCast(*const IInkRecognizerContext, self), CustomData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_BackgroundRecognizeWithAlternates(self: *const T, CustomData: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).BackgroundRecognizeWithAlternates(@ptrCast(*const IInkRecognizerContext, self), CustomData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_Clone(self: *const T, RecoContext: **IInkRecognizerContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).Clone(@ptrCast(*const IInkRecognizerContext, self), RecoContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext_IsStringSupported(self: *const T, String: BSTR, Supported: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext.VTable, self.vtable).IsStringSupported(@ptrCast(*const IInkRecognizerContext, self), String, Supported);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkRecognizerContext2_Value = @import("../zig.zig").Guid.initString("D6F0E32F-73D8-408E-8E9F-5FEA592C363F");
pub const IID_IInkRecognizerContext2 = &IID_IInkRecognizerContext2_Value;
pub const IInkRecognizerContext2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_EnabledUnicodeRanges: fn(
            self: *const IInkRecognizerContext2,
            UnicodeRanges: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_EnabledUnicodeRanges: fn(
            self: *const IInkRecognizerContext2,
            UnicodeRanges: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext2_get_EnabledUnicodeRanges(self: *const T, UnicodeRanges: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext2.VTable, self.vtable).get_EnabledUnicodeRanges(@ptrCast(*const IInkRecognizerContext2, self), UnicodeRanges);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerContext2_put_EnabledUnicodeRanges(self: *const T, UnicodeRanges: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerContext2.VTable, self.vtable).put_EnabledUnicodeRanges(@ptrCast(*const IInkRecognizerContext2, self), UnicodeRanges);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkRecognitionResult_Value = @import("../zig.zig").Guid.initString("3BC129A8-86CD-45AD-BDE8-E0D32D61C16D");
pub const IID_IInkRecognitionResult = &IID_IInkRecognitionResult_Value;
pub const IInkRecognitionResult = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_TopString: fn(
            self: *const IInkRecognitionResult,
            TopString: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_TopAlternate: fn(
            self: *const IInkRecognitionResult,
            TopAlternate: **IInkRecognitionAlternate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_TopConfidence: fn(
            self: *const IInkRecognitionResult,
            TopConfidence: *InkRecognitionConfidence,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Strokes: fn(
            self: *const IInkRecognitionResult,
            Strokes: **IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AlternatesFromSelection: fn(
            self: *const IInkRecognitionResult,
            selectionStart: i32,
            selectionLength: i32,
            maximumAlternates: i32,
            AlternatesFromSelection: **IInkRecognitionAlternates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ModifyTopAlternate: fn(
            self: *const IInkRecognitionResult,
            Alternate: ?*IInkRecognitionAlternate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetResultOnStrokes: fn(
            self: *const IInkRecognitionResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionResult_get_TopString(self: *const T, TopString: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionResult.VTable, self.vtable).get_TopString(@ptrCast(*const IInkRecognitionResult, self), TopString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionResult_get_TopAlternate(self: *const T, TopAlternate: **IInkRecognitionAlternate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionResult.VTable, self.vtable).get_TopAlternate(@ptrCast(*const IInkRecognitionResult, self), TopAlternate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionResult_get_TopConfidence(self: *const T, TopConfidence: *InkRecognitionConfidence) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionResult.VTable, self.vtable).get_TopConfidence(@ptrCast(*const IInkRecognitionResult, self), TopConfidence);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionResult_get_Strokes(self: *const T, Strokes: **IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionResult.VTable, self.vtable).get_Strokes(@ptrCast(*const IInkRecognitionResult, self), Strokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionResult_AlternatesFromSelection(self: *const T, selectionStart: i32, selectionLength: i32, maximumAlternates: i32, AlternatesFromSelection: **IInkRecognitionAlternates) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionResult.VTable, self.vtable).AlternatesFromSelection(@ptrCast(*const IInkRecognitionResult, self), selectionStart, selectionLength, maximumAlternates, AlternatesFromSelection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionResult_ModifyTopAlternate(self: *const T, Alternate: ?*IInkRecognitionAlternate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionResult.VTable, self.vtable).ModifyTopAlternate(@ptrCast(*const IInkRecognitionResult, self), Alternate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionResult_SetResultOnStrokes(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionResult.VTable, self.vtable).SetResultOnStrokes(@ptrCast(*const IInkRecognitionResult, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkRecognitionAlternate_Value = @import("../zig.zig").Guid.initString("B7E660AD-77E4-429B-ADDA-873780D1FC4A");
pub const IID_IInkRecognitionAlternate = &IID_IInkRecognitionAlternate_Value;
pub const IInkRecognitionAlternate = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_String: fn(
            self: *const IInkRecognitionAlternate,
            RecoString: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Confidence: fn(
            self: *const IInkRecognitionAlternate,
            Confidence: *InkRecognitionConfidence,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Baseline: fn(
            self: *const IInkRecognitionAlternate,
            Baseline: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Midline: fn(
            self: *const IInkRecognitionAlternate,
            Midline: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Ascender: fn(
            self: *const IInkRecognitionAlternate,
            Ascender: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Descender: fn(
            self: *const IInkRecognitionAlternate,
            Descender: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_LineNumber: fn(
            self: *const IInkRecognitionAlternate,
            LineNumber: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Strokes: fn(
            self: *const IInkRecognitionAlternate,
            Strokes: **IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_LineAlternates: fn(
            self: *const IInkRecognitionAlternate,
            LineAlternates: **IInkRecognitionAlternates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ConfidenceAlternates: fn(
            self: *const IInkRecognitionAlternate,
            ConfidenceAlternates: **IInkRecognitionAlternates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokesFromStrokeRanges: fn(
            self: *const IInkRecognitionAlternate,
            Strokes: ?*IInkStrokes,
            GetStrokesFromStrokeRanges: **IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokesFromTextRange: fn(
            self: *const IInkRecognitionAlternate,
            selectionStart: *i32,
            selectionLength: *i32,
            GetStrokesFromTextRange: **IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTextRangeFromStrokes: fn(
            self: *const IInkRecognitionAlternate,
            Strokes: ?*IInkStrokes,
            selectionStart: *i32,
            selectionLength: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AlternatesWithConstantPropertyValues: fn(
            self: *const IInkRecognitionAlternate,
            PropertyType: BSTR,
            AlternatesWithConstantPropertyValues: **IInkRecognitionAlternates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyValue: fn(
            self: *const IInkRecognitionAlternate,
            PropertyType: BSTR,
            PropertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternate_get_String(self: *const T, RecoString: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternate.VTable, self.vtable).get_String(@ptrCast(*const IInkRecognitionAlternate, self), RecoString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternate_get_Confidence(self: *const T, Confidence: *InkRecognitionConfidence) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternate.VTable, self.vtable).get_Confidence(@ptrCast(*const IInkRecognitionAlternate, self), Confidence);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternate_get_Baseline(self: *const T, Baseline: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternate.VTable, self.vtable).get_Baseline(@ptrCast(*const IInkRecognitionAlternate, self), Baseline);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternate_get_Midline(self: *const T, Midline: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternate.VTable, self.vtable).get_Midline(@ptrCast(*const IInkRecognitionAlternate, self), Midline);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternate_get_Ascender(self: *const T, Ascender: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternate.VTable, self.vtable).get_Ascender(@ptrCast(*const IInkRecognitionAlternate, self), Ascender);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternate_get_Descender(self: *const T, Descender: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternate.VTable, self.vtable).get_Descender(@ptrCast(*const IInkRecognitionAlternate, self), Descender);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternate_get_LineNumber(self: *const T, LineNumber: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternate.VTable, self.vtable).get_LineNumber(@ptrCast(*const IInkRecognitionAlternate, self), LineNumber);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternate_get_Strokes(self: *const T, Strokes: **IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternate.VTable, self.vtable).get_Strokes(@ptrCast(*const IInkRecognitionAlternate, self), Strokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternate_get_LineAlternates(self: *const T, LineAlternates: **IInkRecognitionAlternates) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternate.VTable, self.vtable).get_LineAlternates(@ptrCast(*const IInkRecognitionAlternate, self), LineAlternates);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternate_get_ConfidenceAlternates(self: *const T, ConfidenceAlternates: **IInkRecognitionAlternates) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternate.VTable, self.vtable).get_ConfidenceAlternates(@ptrCast(*const IInkRecognitionAlternate, self), ConfidenceAlternates);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternate_GetStrokesFromStrokeRanges(self: *const T, Strokes: ?*IInkStrokes, GetStrokesFromStrokeRanges: **IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternate.VTable, self.vtable).GetStrokesFromStrokeRanges(@ptrCast(*const IInkRecognitionAlternate, self), Strokes, GetStrokesFromStrokeRanges);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternate_GetStrokesFromTextRange(self: *const T, selectionStart: *i32, selectionLength: *i32, GetStrokesFromTextRange: **IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternate.VTable, self.vtable).GetStrokesFromTextRange(@ptrCast(*const IInkRecognitionAlternate, self), selectionStart, selectionLength, GetStrokesFromTextRange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternate_GetTextRangeFromStrokes(self: *const T, Strokes: ?*IInkStrokes, selectionStart: *i32, selectionLength: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternate.VTable, self.vtable).GetTextRangeFromStrokes(@ptrCast(*const IInkRecognitionAlternate, self), Strokes, selectionStart, selectionLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternate_AlternatesWithConstantPropertyValues(self: *const T, PropertyType: BSTR, AlternatesWithConstantPropertyValues: **IInkRecognitionAlternates) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternate.VTable, self.vtable).AlternatesWithConstantPropertyValues(@ptrCast(*const IInkRecognitionAlternate, self), PropertyType, AlternatesWithConstantPropertyValues);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternate_GetPropertyValue(self: *const T, PropertyType: BSTR, PropertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternate.VTable, self.vtable).GetPropertyValue(@ptrCast(*const IInkRecognitionAlternate, self), PropertyType, PropertyValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkRecognitionAlternates_Value = @import("../zig.zig").Guid.initString("286A167F-9F19-4C61-9D53-4F07BE622B84");
pub const IID_IInkRecognitionAlternates = &IID_IInkRecognitionAlternates_Value;
pub const IInkRecognitionAlternates = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const IInkRecognitionAlternates,
            Count: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IInkRecognitionAlternates,
            _NewEnum: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Strokes: fn(
            self: *const IInkRecognitionAlternates,
            Strokes: **IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const IInkRecognitionAlternates,
            Index: i32,
            InkRecoAlternate: **IInkRecognitionAlternate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternates_get_Count(self: *const T, Count: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternates.VTable, self.vtable).get_Count(@ptrCast(*const IInkRecognitionAlternates, self), Count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternates_get__NewEnum(self: *const T, _NewEnum: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternates.VTable, self.vtable).get__NewEnum(@ptrCast(*const IInkRecognitionAlternates, self), _NewEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternates_get_Strokes(self: *const T, Strokes: **IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternates.VTable, self.vtable).get_Strokes(@ptrCast(*const IInkRecognitionAlternates, self), Strokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognitionAlternates_Item(self: *const T, Index: i32, InkRecoAlternate: **IInkRecognitionAlternate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognitionAlternates.VTable, self.vtable).Item(@ptrCast(*const IInkRecognitionAlternates, self), Index, InkRecoAlternate);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkRecognizerGuide_Value = @import("../zig.zig").Guid.initString("D934BE07-7B84-4208-9136-83C20994E905");
pub const IID_IInkRecognizerGuide = &IID_IInkRecognizerGuide_Value;
pub const IInkRecognizerGuide = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_WritingBox: fn(
            self: *const IInkRecognizerGuide,
            Rectangle: **IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_WritingBox: fn(
            self: *const IInkRecognizerGuide,
            Rectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DrawnBox: fn(
            self: *const IInkRecognizerGuide,
            Rectangle: **IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DrawnBox: fn(
            self: *const IInkRecognizerGuide,
            Rectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Rows: fn(
            self: *const IInkRecognizerGuide,
            Units: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Rows: fn(
            self: *const IInkRecognizerGuide,
            Units: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Columns: fn(
            self: *const IInkRecognizerGuide,
            Units: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Columns: fn(
            self: *const IInkRecognizerGuide,
            Units: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Midline: fn(
            self: *const IInkRecognizerGuide,
            Units: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Midline: fn(
            self: *const IInkRecognizerGuide,
            Units: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_GuideData: fn(
            self: *const IInkRecognizerGuide,
            pRecoGuide: *InkRecoGuide,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_GuideData: fn(
            self: *const IInkRecognizerGuide,
            recoGuide: InkRecoGuide,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerGuide_get_WritingBox(self: *const T, Rectangle: **IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerGuide.VTable, self.vtable).get_WritingBox(@ptrCast(*const IInkRecognizerGuide, self), Rectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerGuide_put_WritingBox(self: *const T, Rectangle: ?*IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerGuide.VTable, self.vtable).put_WritingBox(@ptrCast(*const IInkRecognizerGuide, self), Rectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerGuide_get_DrawnBox(self: *const T, Rectangle: **IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerGuide.VTable, self.vtable).get_DrawnBox(@ptrCast(*const IInkRecognizerGuide, self), Rectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerGuide_put_DrawnBox(self: *const T, Rectangle: ?*IInkRectangle) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerGuide.VTable, self.vtable).put_DrawnBox(@ptrCast(*const IInkRecognizerGuide, self), Rectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerGuide_get_Rows(self: *const T, Units: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerGuide.VTable, self.vtable).get_Rows(@ptrCast(*const IInkRecognizerGuide, self), Units);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerGuide_put_Rows(self: *const T, Units: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerGuide.VTable, self.vtable).put_Rows(@ptrCast(*const IInkRecognizerGuide, self), Units);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerGuide_get_Columns(self: *const T, Units: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerGuide.VTable, self.vtable).get_Columns(@ptrCast(*const IInkRecognizerGuide, self), Units);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerGuide_put_Columns(self: *const T, Units: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerGuide.VTable, self.vtable).put_Columns(@ptrCast(*const IInkRecognizerGuide, self), Units);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerGuide_get_Midline(self: *const T, Units: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerGuide.VTable, self.vtable).get_Midline(@ptrCast(*const IInkRecognizerGuide, self), Units);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerGuide_put_Midline(self: *const T, Units: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerGuide.VTable, self.vtable).put_Midline(@ptrCast(*const IInkRecognizerGuide, self), Units);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerGuide_get_GuideData(self: *const T, pRecoGuide: *InkRecoGuide) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerGuide.VTable, self.vtable).get_GuideData(@ptrCast(*const IInkRecognizerGuide, self), pRecoGuide);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkRecognizerGuide_put_GuideData(self: *const T, recoGuide: InkRecoGuide) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkRecognizerGuide.VTable, self.vtable).put_GuideData(@ptrCast(*const IInkRecognizerGuide, self), recoGuide);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkWordList_Value = @import("../zig.zig").Guid.initString("76BA3491-CB2F-406B-9961-0E0C4CDAAEF2");
pub const IID_IInkWordList = &IID_IInkWordList_Value;
pub const IInkWordList = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        AddWord: fn(
            self: *const IInkWordList,
            NewWord: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveWord: fn(
            self: *const IInkWordList,
            RemoveWord: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Merge: fn(
            self: *const IInkWordList,
            MergeWordList: ?*IInkWordList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkWordList_AddWord(self: *const T, NewWord: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkWordList.VTable, self.vtable).AddWord(@ptrCast(*const IInkWordList, self), NewWord);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkWordList_RemoveWord(self: *const T, RemoveWord: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkWordList.VTable, self.vtable).RemoveWord(@ptrCast(*const IInkWordList, self), RemoveWord);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkWordList_Merge(self: *const T, MergeWordList: ?*IInkWordList) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkWordList.VTable, self.vtable).Merge(@ptrCast(*const IInkWordList, self), MergeWordList);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkWordList2_Value = @import("../zig.zig").Guid.initString("14542586-11BF-4F5F-B6E7-49D0744AAB6E");
pub const IID_IInkWordList2 = &IID_IInkWordList2_Value;
pub const IInkWordList2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        AddWords: fn(
            self: *const IInkWordList2,
            NewWords: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkWordList2_AddWords(self: *const T, NewWords: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkWordList2.VTable, self.vtable).AddWords(@ptrCast(*const IInkWordList2, self), NewWords);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInk_Value = @import("../zig.zig").Guid.initString("03F8E511-43A1-11D3-8BB6-0080C7D6BAD5");
pub const IID_IInk = &IID_IInk_Value;
pub const IInk = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkLineInfo_Value = @import("../zig.zig").Guid.initString("9C1C5AD6-F22F-4DE4-B453-A2CC482E7C33");
pub const IID_IInkLineInfo = &IID_IInkLineInfo_Value;
pub const IInkLineInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFormat: fn(
            self: *const IInkLineInfo,
            pim: *INKMETRIC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormat: fn(
            self: *const IInkLineInfo,
            pim: *INKMETRIC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInkExtent: fn(
            self: *const IInkLineInfo,
            pim: *INKMETRIC,
            pnWidth: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCandidate: fn(
            self: *const IInkLineInfo,
            nCandidateNum: u32,
            pwcRecogWord: PWSTR,
            pcwcRecogWord: *u32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCandidate: fn(
            self: *const IInkLineInfo,
            nCandidateNum: u32,
            strRecogWord: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Recognize: fn(
            self: *const IInkLineInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkLineInfo_SetFormat(self: *const T, pim: *INKMETRIC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkLineInfo.VTable, self.vtable).SetFormat(@ptrCast(*const IInkLineInfo, self), pim);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkLineInfo_GetFormat(self: *const T, pim: *INKMETRIC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkLineInfo.VTable, self.vtable).GetFormat(@ptrCast(*const IInkLineInfo, self), pim);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkLineInfo_GetInkExtent(self: *const T, pim: *INKMETRIC, pnWidth: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkLineInfo.VTable, self.vtable).GetInkExtent(@ptrCast(*const IInkLineInfo, self), pim, pnWidth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkLineInfo_GetCandidate(self: *const T, nCandidateNum: u32, pwcRecogWord: PWSTR, pcwcRecogWord: *u32, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkLineInfo.VTable, self.vtable).GetCandidate(@ptrCast(*const IInkLineInfo, self), nCandidateNum, pwcRecogWord, pcwcRecogWord, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkLineInfo_SetCandidate(self: *const T, nCandidateNum: u32, strRecogWord: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkLineInfo.VTable, self.vtable).SetCandidate(@ptrCast(*const IInkLineInfo, self), nCandidateNum, strRecogWord);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkLineInfo_Recognize(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkLineInfo.VTable, self.vtable).Recognize(@ptrCast(*const IInkLineInfo, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISketchInk_Value = @import("../zig.zig").Guid.initString("B4563688-98EB-4646-B279-44DA14D45748");
pub const IID_ISketchInk = &IID_ISketchInk_Value;
pub const ISketchInk = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_InkDivider_Value = @import("../zig.zig").Guid.initString("8854F6A0-4683-4AE7-9191-752FE64612C3");
pub const CLSID_InkDivider = &CLSID_InkDivider_Value;

pub const InkDivisionType = extern enum(i32) {
    IDT_Segment = 0,
    IDT_Line = 1,
    IDT_Paragraph = 2,
    IDT_Drawing = 3,
};
pub const IDT_Segment = InkDivisionType.IDT_Segment;
pub const IDT_Line = InkDivisionType.IDT_Line;
pub const IDT_Paragraph = InkDivisionType.IDT_Paragraph;
pub const IDT_Drawing = InkDivisionType.IDT_Drawing;

pub const DISPID_InkDivider = extern enum(i32) {
    DISPID_IInkDivider_Strokes = 1,
    DISPID_IInkDivider_RecognizerContext = 2,
    DISPID_IInkDivider_LineHeight = 3,
    DISPID_IInkDivider_Divide = 4,
};
pub const DISPID_IInkDivider_Strokes = DISPID_InkDivider.DISPID_IInkDivider_Strokes;
pub const DISPID_IInkDivider_RecognizerContext = DISPID_InkDivider.DISPID_IInkDivider_RecognizerContext;
pub const DISPID_IInkDivider_LineHeight = DISPID_InkDivider.DISPID_IInkDivider_LineHeight;
pub const DISPID_IInkDivider_Divide = DISPID_InkDivider.DISPID_IInkDivider_Divide;

pub const DISPID_InkDivisionResult = extern enum(i32) {
    DISPID_IInkDivisionResult_Strokes = 1,
    DISPID_IInkDivisionResult_ResultByType = 2,
};
pub const DISPID_IInkDivisionResult_Strokes = DISPID_InkDivisionResult.DISPID_IInkDivisionResult_Strokes;
pub const DISPID_IInkDivisionResult_ResultByType = DISPID_InkDivisionResult.DISPID_IInkDivisionResult_ResultByType;

pub const DISPID_InkDivisionUnit = extern enum(i32) {
    DISPID_IInkDivisionUnit_Strokes = 1,
    DISPID_IInkDivisionUnit_DivisionType = 2,
    DISPID_IInkDivisionUnit_RecognizedString = 3,
    DISPID_IInkDivisionUnit_RotationTransform = 4,
};
pub const DISPID_IInkDivisionUnit_Strokes = DISPID_InkDivisionUnit.DISPID_IInkDivisionUnit_Strokes;
pub const DISPID_IInkDivisionUnit_DivisionType = DISPID_InkDivisionUnit.DISPID_IInkDivisionUnit_DivisionType;
pub const DISPID_IInkDivisionUnit_RecognizedString = DISPID_InkDivisionUnit.DISPID_IInkDivisionUnit_RecognizedString;
pub const DISPID_IInkDivisionUnit_RotationTransform = DISPID_InkDivisionUnit.DISPID_IInkDivisionUnit_RotationTransform;

pub const DISPID_InkDivisionUnits = extern enum(i32) {
    DISPID_IInkDivisionUnits_NewEnum = -4,
    DISPID_IInkDivisionUnits_Item = 0,
    DISPID_IInkDivisionUnits_Count = 1,
};
pub const DISPID_IInkDivisionUnits_NewEnum = DISPID_InkDivisionUnits.DISPID_IInkDivisionUnits_NewEnum;
pub const DISPID_IInkDivisionUnits_Item = DISPID_InkDivisionUnits.DISPID_IInkDivisionUnits_Item;
pub const DISPID_IInkDivisionUnits_Count = DISPID_InkDivisionUnits.DISPID_IInkDivisionUnits_Count;

const IID_IInkDivider_Value = @import("../zig.zig").Guid.initString("5DE00405-F9A4-4651-B0C5-C317DEFD58B9");
pub const IID_IInkDivider = &IID_IInkDivider_Value;
pub const IInkDivider = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Strokes: fn(
            self: *const IInkDivider,
            Strokes: **IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Strokes: fn(
            self: *const IInkDivider,
            Strokes: ?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RecognizerContext: fn(
            self: *const IInkDivider,
            RecognizerContext: **IInkRecognizerContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_RecognizerContext: fn(
            self: *const IInkDivider,
            RecognizerContext: ?*IInkRecognizerContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_LineHeight: fn(
            self: *const IInkDivider,
            LineHeight: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_LineHeight: fn(
            self: *const IInkDivider,
            LineHeight: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Divide: fn(
            self: *const IInkDivider,
            InkDivisionResult: **IInkDivisionResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDivider_get_Strokes(self: *const T, Strokes: **IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDivider.VTable, self.vtable).get_Strokes(@ptrCast(*const IInkDivider, self), Strokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDivider_putref_Strokes(self: *const T, Strokes: ?*IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDivider.VTable, self.vtable).putref_Strokes(@ptrCast(*const IInkDivider, self), Strokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDivider_get_RecognizerContext(self: *const T, RecognizerContext: **IInkRecognizerContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDivider.VTable, self.vtable).get_RecognizerContext(@ptrCast(*const IInkDivider, self), RecognizerContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDivider_putref_RecognizerContext(self: *const T, RecognizerContext: ?*IInkRecognizerContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDivider.VTable, self.vtable).putref_RecognizerContext(@ptrCast(*const IInkDivider, self), RecognizerContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDivider_get_LineHeight(self: *const T, LineHeight: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDivider.VTable, self.vtable).get_LineHeight(@ptrCast(*const IInkDivider, self), LineHeight);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDivider_put_LineHeight(self: *const T, LineHeight: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDivider.VTable, self.vtable).put_LineHeight(@ptrCast(*const IInkDivider, self), LineHeight);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDivider_Divide(self: *const T, InkDivisionResult: **IInkDivisionResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDivider.VTable, self.vtable).Divide(@ptrCast(*const IInkDivider, self), InkDivisionResult);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkDivisionResult_Value = @import("../zig.zig").Guid.initString("2DBEC0A7-74C7-4B38-81EB-AA8EF0C24900");
pub const IID_IInkDivisionResult = &IID_IInkDivisionResult_Value;
pub const IInkDivisionResult = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Strokes: fn(
            self: *const IInkDivisionResult,
            Strokes: **IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResultByType: fn(
            self: *const IInkDivisionResult,
            divisionType: InkDivisionType,
            InkDivisionUnits: **IInkDivisionUnits,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDivisionResult_get_Strokes(self: *const T, Strokes: **IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDivisionResult.VTable, self.vtable).get_Strokes(@ptrCast(*const IInkDivisionResult, self), Strokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDivisionResult_ResultByType(self: *const T, divisionType: InkDivisionType, InkDivisionUnits: **IInkDivisionUnits) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDivisionResult.VTable, self.vtable).ResultByType(@ptrCast(*const IInkDivisionResult, self), divisionType, InkDivisionUnits);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkDivisionUnit_Value = @import("../zig.zig").Guid.initString("85AEE342-48B0-4244-9DD5-1ED435410FAB");
pub const IID_IInkDivisionUnit = &IID_IInkDivisionUnit_Value;
pub const IInkDivisionUnit = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Strokes: fn(
            self: *const IInkDivisionUnit,
            Strokes: **IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DivisionType: fn(
            self: *const IInkDivisionUnit,
            divisionType: *InkDivisionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RecognizedString: fn(
            self: *const IInkDivisionUnit,
            RecoString: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RotationTransform: fn(
            self: *const IInkDivisionUnit,
            RotationTransform: **IInkTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDivisionUnit_get_Strokes(self: *const T, Strokes: **IInkStrokes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDivisionUnit.VTable, self.vtable).get_Strokes(@ptrCast(*const IInkDivisionUnit, self), Strokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDivisionUnit_get_DivisionType(self: *const T, divisionType: *InkDivisionType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDivisionUnit.VTable, self.vtable).get_DivisionType(@ptrCast(*const IInkDivisionUnit, self), divisionType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDivisionUnit_get_RecognizedString(self: *const T, RecoString: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDivisionUnit.VTable, self.vtable).get_RecognizedString(@ptrCast(*const IInkDivisionUnit, self), RecoString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDivisionUnit_get_RotationTransform(self: *const T, RotationTransform: **IInkTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDivisionUnit.VTable, self.vtable).get_RotationTransform(@ptrCast(*const IInkDivisionUnit, self), RotationTransform);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkDivisionUnits_Value = @import("../zig.zig").Guid.initString("1BB5DDC2-31CC-4135-AB82-2C66C9F00C41");
pub const IID_IInkDivisionUnits = &IID_IInkDivisionUnits_Value;
pub const IInkDivisionUnits = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const IInkDivisionUnits,
            Count: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IInkDivisionUnits,
            _NewEnum: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const IInkDivisionUnits,
            Index: i32,
            InkDivisionUnit: **IInkDivisionUnit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDivisionUnits_get_Count(self: *const T, Count: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDivisionUnits.VTable, self.vtable).get_Count(@ptrCast(*const IInkDivisionUnits, self), Count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDivisionUnits_get__NewEnum(self: *const T, _NewEnum: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDivisionUnits.VTable, self.vtable).get__NewEnum(@ptrCast(*const IInkDivisionUnits, self), _NewEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDivisionUnits_Item(self: *const T, Index: i32, InkDivisionUnit: **IInkDivisionUnit) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDivisionUnits.VTable, self.vtable).Item(@ptrCast(*const IInkDivisionUnits, self), Index, InkDivisionUnit);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_HandwrittenTextInsertion_Value = @import("../zig.zig").Guid.initString("9F074EE2-E6E9-4D8A-A047-EB5B5C3C55DA");
pub const CLSID_HandwrittenTextInsertion = &CLSID_HandwrittenTextInsertion_Value;

const CLSID_PenInputPanel_Value = @import("../zig.zig").Guid.initString("F744E496-1B5A-489E-81DC-FBD7AC6298A8");
pub const CLSID_PenInputPanel = &CLSID_PenInputPanel_Value;

const CLSID_TextInputPanel_Value = @import("../zig.zig").Guid.initString("F9B189D7-228B-4F2B-8650-B97F59E02C8C");
pub const CLSID_TextInputPanel = &CLSID_TextInputPanel_Value;

const CLSID_PenInputPanel_Internal_Value = @import("../zig.zig").Guid.initString("802B1FB9-056B-4720-B0CC-80D23B71171E");
pub const CLSID_PenInputPanel_Internal = &CLSID_PenInputPanel_Internal_Value;

pub const DISPID_PenInputPanel = extern enum(i32) {
    DISPID_PIPAttachedEditWindow = 0,
    DISPID_PIPFactoid = 1,
    DISPID_PIPCurrentPanel = 2,
    DISPID_PIPDefaultPanel = 3,
    DISPID_PIPVisible = 4,
    DISPID_PIPTop = 5,
    DISPID_PIPLeft = 6,
    DISPID_PIPWidth = 7,
    DISPID_PIPHeight = 8,
    DISPID_PIPMoveTo = 9,
    DISPID_PIPCommitPendingInput = 10,
    DISPID_PIPRefresh = 11,
    DISPID_PIPBusy = 12,
    DISPID_PIPVerticalOffset = 13,
    DISPID_PIPHorizontalOffset = 14,
    DISPID_PIPEnableTsf = 15,
    DISPID_PIPAutoShow = 16,
};
pub const DISPID_PIPAttachedEditWindow = DISPID_PenInputPanel.DISPID_PIPAttachedEditWindow;
pub const DISPID_PIPFactoid = DISPID_PenInputPanel.DISPID_PIPFactoid;
pub const DISPID_PIPCurrentPanel = DISPID_PenInputPanel.DISPID_PIPCurrentPanel;
pub const DISPID_PIPDefaultPanel = DISPID_PenInputPanel.DISPID_PIPDefaultPanel;
pub const DISPID_PIPVisible = DISPID_PenInputPanel.DISPID_PIPVisible;
pub const DISPID_PIPTop = DISPID_PenInputPanel.DISPID_PIPTop;
pub const DISPID_PIPLeft = DISPID_PenInputPanel.DISPID_PIPLeft;
pub const DISPID_PIPWidth = DISPID_PenInputPanel.DISPID_PIPWidth;
pub const DISPID_PIPHeight = DISPID_PenInputPanel.DISPID_PIPHeight;
pub const DISPID_PIPMoveTo = DISPID_PenInputPanel.DISPID_PIPMoveTo;
pub const DISPID_PIPCommitPendingInput = DISPID_PenInputPanel.DISPID_PIPCommitPendingInput;
pub const DISPID_PIPRefresh = DISPID_PenInputPanel.DISPID_PIPRefresh;
pub const DISPID_PIPBusy = DISPID_PenInputPanel.DISPID_PIPBusy;
pub const DISPID_PIPVerticalOffset = DISPID_PenInputPanel.DISPID_PIPVerticalOffset;
pub const DISPID_PIPHorizontalOffset = DISPID_PenInputPanel.DISPID_PIPHorizontalOffset;
pub const DISPID_PIPEnableTsf = DISPID_PenInputPanel.DISPID_PIPEnableTsf;
pub const DISPID_PIPAutoShow = DISPID_PenInputPanel.DISPID_PIPAutoShow;

pub const DISPID_PenInputPanelEvents = extern enum(i32) {
    DISPID_PIPEVisibleChanged = 0,
    DISPID_PIPEPanelChanged = 1,
    DISPID_PIPEInputFailed = 2,
    DISPID_PIPEPanelMoving = 3,
};
pub const DISPID_PIPEVisibleChanged = DISPID_PenInputPanelEvents.DISPID_PIPEVisibleChanged;
pub const DISPID_PIPEPanelChanged = DISPID_PenInputPanelEvents.DISPID_PIPEPanelChanged;
pub const DISPID_PIPEInputFailed = DISPID_PenInputPanelEvents.DISPID_PIPEInputFailed;
pub const DISPID_PIPEPanelMoving = DISPID_PenInputPanelEvents.DISPID_PIPEPanelMoving;

pub const VisualState = extern enum(i32) {
    InPlace = 0,
    Floating = 1,
    DockedTop = 2,
    DockedBottom = 3,
    Closed = 4,
};
pub const InPlace = VisualState.InPlace;
pub const Floating = VisualState.Floating;
pub const DockedTop = VisualState.DockedTop;
pub const DockedBottom = VisualState.DockedBottom;
pub const Closed = VisualState.Closed;

pub const InteractionMode = extern enum(i32) {
    InPlace = 0,
    Floating = 1,
    DockedTop = 2,
    DockedBottom = 3,
};
pub const InteractionMode_InPlace = InteractionMode.InPlace;
pub const InteractionMode_Floating = InteractionMode.Floating;
pub const InteractionMode_DockedTop = InteractionMode.DockedTop;
pub const InteractionMode_DockedBottom = InteractionMode.DockedBottom;

pub const InPlaceState = extern enum(i32) {
    Auto = 0,
    HoverTarget = 1,
    Expanded = 2,
};
pub const InPlaceState_Auto = InPlaceState.Auto;
pub const InPlaceState_HoverTarget = InPlaceState.HoverTarget;
pub const InPlaceState_Expanded = InPlaceState.Expanded;

pub const PanelInputArea = extern enum(i32) {
    Auto = 0,
    Keyboard = 1,
    WritingPad = 2,
    CharacterPad = 3,
};
pub const PanelInputArea_Auto = PanelInputArea.Auto;
pub const PanelInputArea_Keyboard = PanelInputArea.Keyboard;
pub const PanelInputArea_WritingPad = PanelInputArea.WritingPad;
pub const PanelInputArea_CharacterPad = PanelInputArea.CharacterPad;

pub const CorrectionMode = extern enum(i32) {
    NotVisible = 0,
    PreInsertion = 1,
    PostInsertionCollapsed = 2,
    PostInsertionExpanded = 3,
};
pub const CorrectionMode_NotVisible = CorrectionMode.NotVisible;
pub const CorrectionMode_PreInsertion = CorrectionMode.PreInsertion;
pub const CorrectionMode_PostInsertionCollapsed = CorrectionMode.PostInsertionCollapsed;
pub const CorrectionMode_PostInsertionExpanded = CorrectionMode.PostInsertionExpanded;

pub const CorrectionPosition = extern enum(i32) {
    Auto = 0,
    Bottom = 1,
    Top = 2,
};
pub const CorrectionPosition_Auto = CorrectionPosition.Auto;
pub const CorrectionPosition_Bottom = CorrectionPosition.Bottom;
pub const CorrectionPosition_Top = CorrectionPosition.Top;

pub const InPlaceDirection = extern enum(i32) {
    Auto = 0,
    Bottom = 1,
    Top = 2,
};
pub const InPlaceDirection_Auto = InPlaceDirection.Auto;
pub const InPlaceDirection_Bottom = InPlaceDirection.Bottom;
pub const InPlaceDirection_Top = InPlaceDirection.Top;

pub const EventMask = extern enum(i32) {
    InPlaceStateChanging = 1,
    InPlaceStateChanged = 2,
    InPlaceSizeChanging = 4,
    InPlaceSizeChanged = 8,
    InputAreaChanging = 16,
    InputAreaChanged = 32,
    CorrectionModeChanging = 64,
    CorrectionModeChanged = 128,
    InPlaceVisibilityChanging = 256,
    InPlaceVisibilityChanged = 512,
    TextInserting = 1024,
    TextInserted = 2048,
    All = 4095,
};
pub const EventMask_InPlaceStateChanging = EventMask.InPlaceStateChanging;
pub const EventMask_InPlaceStateChanged = EventMask.InPlaceStateChanged;
pub const EventMask_InPlaceSizeChanging = EventMask.InPlaceSizeChanging;
pub const EventMask_InPlaceSizeChanged = EventMask.InPlaceSizeChanged;
pub const EventMask_InputAreaChanging = EventMask.InputAreaChanging;
pub const EventMask_InputAreaChanged = EventMask.InputAreaChanged;
pub const EventMask_CorrectionModeChanging = EventMask.CorrectionModeChanging;
pub const EventMask_CorrectionModeChanged = EventMask.CorrectionModeChanged;
pub const EventMask_InPlaceVisibilityChanging = EventMask.InPlaceVisibilityChanging;
pub const EventMask_InPlaceVisibilityChanged = EventMask.InPlaceVisibilityChanged;
pub const EventMask_TextInserting = EventMask.TextInserting;
pub const EventMask_TextInserted = EventMask.TextInserted;
pub const EventMask_All = EventMask.All;

pub const PanelType = extern enum(i32) {
    PT_Default = 0,
    PT_Inactive = 1,
    PT_Handwriting = 2,
    PT_Keyboard = 3,
};
pub const PT_Default = PanelType.PT_Default;
pub const PT_Inactive = PanelType.PT_Inactive;
pub const PT_Handwriting = PanelType.PT_Handwriting;
pub const PT_Keyboard = PanelType.PT_Keyboard;

const IID_IPenInputPanel_Value = @import("../zig.zig").Guid.initString("FA7A4083-5747-4040-A182-0B0E9FD4FAC7");
pub const IID_IPenInputPanel = &IID_IPenInputPanel_Value;
pub const IPenInputPanel = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Busy: fn(
            self: *const IPenInputPanel,
            Busy: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Factoid: fn(
            self: *const IPenInputPanel,
            Factoid: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Factoid: fn(
            self: *const IPenInputPanel,
            Factoid: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AttachedEditWindow: fn(
            self: *const IPenInputPanel,
            AttachedEditWindow: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AttachedEditWindow: fn(
            self: *const IPenInputPanel,
            AttachedEditWindow: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CurrentPanel: fn(
            self: *const IPenInputPanel,
            CurrentPanel: *PanelType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CurrentPanel: fn(
            self: *const IPenInputPanel,
            CurrentPanel: PanelType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DefaultPanel: fn(
            self: *const IPenInputPanel,
            pDefaultPanel: *PanelType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DefaultPanel: fn(
            self: *const IPenInputPanel,
            DefaultPanel: PanelType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Visible: fn(
            self: *const IPenInputPanel,
            Visible: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Visible: fn(
            self: *const IPenInputPanel,
            Visible: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Top: fn(
            self: *const IPenInputPanel,
            Top: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Left: fn(
            self: *const IPenInputPanel,
            Left: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Width: fn(
            self: *const IPenInputPanel,
            Width: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Height: fn(
            self: *const IPenInputPanel,
            Height: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_VerticalOffset: fn(
            self: *const IPenInputPanel,
            VerticalOffset: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_VerticalOffset: fn(
            self: *const IPenInputPanel,
            VerticalOffset: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_HorizontalOffset: fn(
            self: *const IPenInputPanel,
            HorizontalOffset: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_HorizontalOffset: fn(
            self: *const IPenInputPanel,
            HorizontalOffset: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AutoShow: fn(
            self: *const IPenInputPanel,
            pAutoShow: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AutoShow: fn(
            self: *const IPenInputPanel,
            AutoShow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveTo: fn(
            self: *const IPenInputPanel,
            Left: i32,
            Top: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitPendingInput: fn(
            self: *const IPenInputPanel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const IPenInputPanel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableTsf: fn(
            self: *const IPenInputPanel,
            Enable: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_get_Busy(self: *const T, Busy: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).get_Busy(@ptrCast(*const IPenInputPanel, self), Busy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_get_Factoid(self: *const T, Factoid: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).get_Factoid(@ptrCast(*const IPenInputPanel, self), Factoid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_put_Factoid(self: *const T, Factoid: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).put_Factoid(@ptrCast(*const IPenInputPanel, self), Factoid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_get_AttachedEditWindow(self: *const T, AttachedEditWindow: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).get_AttachedEditWindow(@ptrCast(*const IPenInputPanel, self), AttachedEditWindow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_put_AttachedEditWindow(self: *const T, AttachedEditWindow: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).put_AttachedEditWindow(@ptrCast(*const IPenInputPanel, self), AttachedEditWindow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_get_CurrentPanel(self: *const T, CurrentPanel: *PanelType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).get_CurrentPanel(@ptrCast(*const IPenInputPanel, self), CurrentPanel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_put_CurrentPanel(self: *const T, CurrentPanel: PanelType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).put_CurrentPanel(@ptrCast(*const IPenInputPanel, self), CurrentPanel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_get_DefaultPanel(self: *const T, pDefaultPanel: *PanelType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).get_DefaultPanel(@ptrCast(*const IPenInputPanel, self), pDefaultPanel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_put_DefaultPanel(self: *const T, DefaultPanel: PanelType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).put_DefaultPanel(@ptrCast(*const IPenInputPanel, self), DefaultPanel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_get_Visible(self: *const T, Visible: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).get_Visible(@ptrCast(*const IPenInputPanel, self), Visible);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_put_Visible(self: *const T, Visible: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).put_Visible(@ptrCast(*const IPenInputPanel, self), Visible);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_get_Top(self: *const T, Top: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).get_Top(@ptrCast(*const IPenInputPanel, self), Top);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_get_Left(self: *const T, Left: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).get_Left(@ptrCast(*const IPenInputPanel, self), Left);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_get_Width(self: *const T, Width: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).get_Width(@ptrCast(*const IPenInputPanel, self), Width);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_get_Height(self: *const T, Height: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).get_Height(@ptrCast(*const IPenInputPanel, self), Height);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_get_VerticalOffset(self: *const T, VerticalOffset: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).get_VerticalOffset(@ptrCast(*const IPenInputPanel, self), VerticalOffset);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_put_VerticalOffset(self: *const T, VerticalOffset: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).put_VerticalOffset(@ptrCast(*const IPenInputPanel, self), VerticalOffset);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_get_HorizontalOffset(self: *const T, HorizontalOffset: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).get_HorizontalOffset(@ptrCast(*const IPenInputPanel, self), HorizontalOffset);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_put_HorizontalOffset(self: *const T, HorizontalOffset: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).put_HorizontalOffset(@ptrCast(*const IPenInputPanel, self), HorizontalOffset);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_get_AutoShow(self: *const T, pAutoShow: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).get_AutoShow(@ptrCast(*const IPenInputPanel, self), pAutoShow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_put_AutoShow(self: *const T, AutoShow: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).put_AutoShow(@ptrCast(*const IPenInputPanel, self), AutoShow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_MoveTo(self: *const T, Left: i32, Top: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).MoveTo(@ptrCast(*const IPenInputPanel, self), Left, Top);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_CommitPendingInput(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).CommitPendingInput(@ptrCast(*const IPenInputPanel, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).Refresh(@ptrCast(*const IPenInputPanel, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPenInputPanel_EnableTsf(self: *const T, Enable: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPenInputPanel.VTable, self.vtable).EnableTsf(@ptrCast(*const IPenInputPanel, self), Enable);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID__IPenInputPanelEvents_Value = @import("../zig.zig").Guid.initString("B7E489DA-3719-439F-848F-E7ACBD820F17");
pub const IID__IPenInputPanelEvents = &IID__IPenInputPanelEvents_Value;
pub const _IPenInputPanelEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IHandwrittenTextInsertion_Value = @import("../zig.zig").Guid.initString("56FDEA97-ECD6-43E7-AA3A-816BE7785860");
pub const IID_IHandwrittenTextInsertion = &IID_IHandwrittenTextInsertion_Value;
pub const IHandwrittenTextInsertion = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InsertRecognitionResultsArray: fn(
            self: *const IHandwrittenTextInsertion,
            psaAlternates: *SAFEARRAY,
            locale: u32,
            fAlternateContainsAutoSpacingInformation: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertInkRecognitionResult: fn(
            self: *const IHandwrittenTextInsertion,
            pIInkRecoResult: ?*IInkRecognitionResult,
            locale: u32,
            fAlternateContainsAutoSpacingInformation: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHandwrittenTextInsertion_InsertRecognitionResultsArray(self: *const T, psaAlternates: *SAFEARRAY, locale: u32, fAlternateContainsAutoSpacingInformation: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHandwrittenTextInsertion.VTable, self.vtable).InsertRecognitionResultsArray(@ptrCast(*const IHandwrittenTextInsertion, self), psaAlternates, locale, fAlternateContainsAutoSpacingInformation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHandwrittenTextInsertion_InsertInkRecognitionResult(self: *const T, pIInkRecoResult: ?*IInkRecognitionResult, locale: u32, fAlternateContainsAutoSpacingInformation: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHandwrittenTextInsertion.VTable, self.vtable).InsertInkRecognitionResult(@ptrCast(*const IHandwrittenTextInsertion, self), pIInkRecoResult, locale, fAlternateContainsAutoSpacingInformation);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITextInputPanelEventSink_Value = @import("../zig.zig").Guid.initString("27560408-8E64-4FE1-804E-421201584B31");
pub const IID_ITextInputPanelEventSink = &IID_ITextInputPanelEventSink_Value;
pub const ITextInputPanelEventSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InPlaceStateChanging: fn(
            self: *const ITextInputPanelEventSink,
            oldInPlaceState: InPlaceState,
            newInPlaceState: InPlaceState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InPlaceStateChanged: fn(
            self: *const ITextInputPanelEventSink,
            oldInPlaceState: InPlaceState,
            newInPlaceState: InPlaceState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InPlaceSizeChanging: fn(
            self: *const ITextInputPanelEventSink,
            oldBoundingRectangle: RECT,
            newBoundingRectangle: RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InPlaceSizeChanged: fn(
            self: *const ITextInputPanelEventSink,
            oldBoundingRectangle: RECT,
            newBoundingRectangle: RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InputAreaChanging: fn(
            self: *const ITextInputPanelEventSink,
            oldInputArea: PanelInputArea,
            newInputArea: PanelInputArea,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InputAreaChanged: fn(
            self: *const ITextInputPanelEventSink,
            oldInputArea: PanelInputArea,
            newInputArea: PanelInputArea,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CorrectionModeChanging: fn(
            self: *const ITextInputPanelEventSink,
            oldCorrectionMode: CorrectionMode,
            newCorrectionMode: CorrectionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CorrectionModeChanged: fn(
            self: *const ITextInputPanelEventSink,
            oldCorrectionMode: CorrectionMode,
            newCorrectionMode: CorrectionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InPlaceVisibilityChanging: fn(
            self: *const ITextInputPanelEventSink,
            oldVisible: BOOL,
            newVisible: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InPlaceVisibilityChanged: fn(
            self: *const ITextInputPanelEventSink,
            oldVisible: BOOL,
            newVisible: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TextInserting: fn(
            self: *const ITextInputPanelEventSink,
            Ink: *SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TextInserted: fn(
            self: *const ITextInputPanelEventSink,
            Ink: *SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanelEventSink_InPlaceStateChanging(self: *const T, oldInPlaceState: InPlaceState, newInPlaceState: InPlaceState) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanelEventSink.VTable, self.vtable).InPlaceStateChanging(@ptrCast(*const ITextInputPanelEventSink, self), oldInPlaceState, newInPlaceState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanelEventSink_InPlaceStateChanged(self: *const T, oldInPlaceState: InPlaceState, newInPlaceState: InPlaceState) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanelEventSink.VTable, self.vtable).InPlaceStateChanged(@ptrCast(*const ITextInputPanelEventSink, self), oldInPlaceState, newInPlaceState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanelEventSink_InPlaceSizeChanging(self: *const T, oldBoundingRectangle: RECT, newBoundingRectangle: RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanelEventSink.VTable, self.vtable).InPlaceSizeChanging(@ptrCast(*const ITextInputPanelEventSink, self), oldBoundingRectangle, newBoundingRectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanelEventSink_InPlaceSizeChanged(self: *const T, oldBoundingRectangle: RECT, newBoundingRectangle: RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanelEventSink.VTable, self.vtable).InPlaceSizeChanged(@ptrCast(*const ITextInputPanelEventSink, self), oldBoundingRectangle, newBoundingRectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanelEventSink_InputAreaChanging(self: *const T, oldInputArea: PanelInputArea, newInputArea: PanelInputArea) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanelEventSink.VTable, self.vtable).InputAreaChanging(@ptrCast(*const ITextInputPanelEventSink, self), oldInputArea, newInputArea);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanelEventSink_InputAreaChanged(self: *const T, oldInputArea: PanelInputArea, newInputArea: PanelInputArea) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanelEventSink.VTable, self.vtable).InputAreaChanged(@ptrCast(*const ITextInputPanelEventSink, self), oldInputArea, newInputArea);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanelEventSink_CorrectionModeChanging(self: *const T, oldCorrectionMode: CorrectionMode, newCorrectionMode: CorrectionMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanelEventSink.VTable, self.vtable).CorrectionModeChanging(@ptrCast(*const ITextInputPanelEventSink, self), oldCorrectionMode, newCorrectionMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanelEventSink_CorrectionModeChanged(self: *const T, oldCorrectionMode: CorrectionMode, newCorrectionMode: CorrectionMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanelEventSink.VTable, self.vtable).CorrectionModeChanged(@ptrCast(*const ITextInputPanelEventSink, self), oldCorrectionMode, newCorrectionMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanelEventSink_InPlaceVisibilityChanging(self: *const T, oldVisible: BOOL, newVisible: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanelEventSink.VTable, self.vtable).InPlaceVisibilityChanging(@ptrCast(*const ITextInputPanelEventSink, self), oldVisible, newVisible);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanelEventSink_InPlaceVisibilityChanged(self: *const T, oldVisible: BOOL, newVisible: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanelEventSink.VTable, self.vtable).InPlaceVisibilityChanged(@ptrCast(*const ITextInputPanelEventSink, self), oldVisible, newVisible);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanelEventSink_TextInserting(self: *const T, Ink: *SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanelEventSink.VTable, self.vtable).TextInserting(@ptrCast(*const ITextInputPanelEventSink, self), Ink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanelEventSink_TextInserted(self: *const T, Ink: *SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanelEventSink.VTable, self.vtable).TextInserted(@ptrCast(*const ITextInputPanelEventSink, self), Ink);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITextInputPanel_Value = @import("../zig.zig").Guid.initString("6B6A65A5-6AF3-46C2-B6EA-56CD1F80DF71");
pub const IID_ITextInputPanel = &IID_ITextInputPanel_Value;
pub const ITextInputPanel = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_AttachedEditWindow: fn(
            self: *const ITextInputPanel,
            AttachedEditWindow: *HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AttachedEditWindow: fn(
            self: *const ITextInputPanel,
            AttachedEditWindow: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CurrentInteractionMode: fn(
            self: *const ITextInputPanel,
            CurrentInteractionMode: *InteractionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DefaultInPlaceState: fn(
            self: *const ITextInputPanel,
            State: *InPlaceState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DefaultInPlaceState: fn(
            self: *const ITextInputPanel,
            State: InPlaceState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CurrentInPlaceState: fn(
            self: *const ITextInputPanel,
            State: *InPlaceState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DefaultInputArea: fn(
            self: *const ITextInputPanel,
            Area: *PanelInputArea,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DefaultInputArea: fn(
            self: *const ITextInputPanel,
            Area: PanelInputArea,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CurrentInputArea: fn(
            self: *const ITextInputPanel,
            Area: *PanelInputArea,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CurrentCorrectionMode: fn(
            self: *const ITextInputPanel,
            Mode: *CorrectionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PreferredInPlaceDirection: fn(
            self: *const ITextInputPanel,
            Direction: *InPlaceDirection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_PreferredInPlaceDirection: fn(
            self: *const ITextInputPanel,
            Direction: InPlaceDirection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ExpandPostInsertionCorrection: fn(
            self: *const ITextInputPanel,
            Expand: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ExpandPostInsertionCorrection: fn(
            self: *const ITextInputPanel,
            Expand: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_InPlaceVisibleOnFocus: fn(
            self: *const ITextInputPanel,
            Visible: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_InPlaceVisibleOnFocus: fn(
            self: *const ITextInputPanel,
            Visible: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_InPlaceBoundingRectangle: fn(
            self: *const ITextInputPanel,
            BoundingRectangle: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PopUpCorrectionHeight: fn(
            self: *const ITextInputPanel,
            Height: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PopDownCorrectionHeight: fn(
            self: *const ITextInputPanel,
            Height: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitPendingInput: fn(
            self: *const ITextInputPanel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInPlaceVisibility: fn(
            self: *const ITextInputPanel,
            Visible: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInPlacePosition: fn(
            self: *const ITextInputPanel,
            xPosition: i32,
            yPosition: i32,
            position: CorrectionPosition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInPlaceHoverTargetPosition: fn(
            self: *const ITextInputPanel,
            xPosition: i32,
            yPosition: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: fn(
            self: *const ITextInputPanel,
            EventSink: ?*ITextInputPanelEventSink,
            EventMask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: fn(
            self: *const ITextInputPanel,
            EventSink: ?*ITextInputPanelEventSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_get_AttachedEditWindow(self: *const T, AttachedEditWindow: *HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).get_AttachedEditWindow(@ptrCast(*const ITextInputPanel, self), AttachedEditWindow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_put_AttachedEditWindow(self: *const T, AttachedEditWindow: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).put_AttachedEditWindow(@ptrCast(*const ITextInputPanel, self), AttachedEditWindow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_get_CurrentInteractionMode(self: *const T, CurrentInteractionMode: *InteractionMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).get_CurrentInteractionMode(@ptrCast(*const ITextInputPanel, self), CurrentInteractionMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_get_DefaultInPlaceState(self: *const T, State: *InPlaceState) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).get_DefaultInPlaceState(@ptrCast(*const ITextInputPanel, self), State);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_put_DefaultInPlaceState(self: *const T, State: InPlaceState) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).put_DefaultInPlaceState(@ptrCast(*const ITextInputPanel, self), State);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_get_CurrentInPlaceState(self: *const T, State: *InPlaceState) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).get_CurrentInPlaceState(@ptrCast(*const ITextInputPanel, self), State);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_get_DefaultInputArea(self: *const T, Area: *PanelInputArea) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).get_DefaultInputArea(@ptrCast(*const ITextInputPanel, self), Area);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_put_DefaultInputArea(self: *const T, Area: PanelInputArea) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).put_DefaultInputArea(@ptrCast(*const ITextInputPanel, self), Area);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_get_CurrentInputArea(self: *const T, Area: *PanelInputArea) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).get_CurrentInputArea(@ptrCast(*const ITextInputPanel, self), Area);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_get_CurrentCorrectionMode(self: *const T, Mode: *CorrectionMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).get_CurrentCorrectionMode(@ptrCast(*const ITextInputPanel, self), Mode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_get_PreferredInPlaceDirection(self: *const T, Direction: *InPlaceDirection) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).get_PreferredInPlaceDirection(@ptrCast(*const ITextInputPanel, self), Direction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_put_PreferredInPlaceDirection(self: *const T, Direction: InPlaceDirection) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).put_PreferredInPlaceDirection(@ptrCast(*const ITextInputPanel, self), Direction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_get_ExpandPostInsertionCorrection(self: *const T, Expand: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).get_ExpandPostInsertionCorrection(@ptrCast(*const ITextInputPanel, self), Expand);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_put_ExpandPostInsertionCorrection(self: *const T, Expand: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).put_ExpandPostInsertionCorrection(@ptrCast(*const ITextInputPanel, self), Expand);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_get_InPlaceVisibleOnFocus(self: *const T, Visible: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).get_InPlaceVisibleOnFocus(@ptrCast(*const ITextInputPanel, self), Visible);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_put_InPlaceVisibleOnFocus(self: *const T, Visible: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).put_InPlaceVisibleOnFocus(@ptrCast(*const ITextInputPanel, self), Visible);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_get_InPlaceBoundingRectangle(self: *const T, BoundingRectangle: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).get_InPlaceBoundingRectangle(@ptrCast(*const ITextInputPanel, self), BoundingRectangle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_get_PopUpCorrectionHeight(self: *const T, Height: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).get_PopUpCorrectionHeight(@ptrCast(*const ITextInputPanel, self), Height);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_get_PopDownCorrectionHeight(self: *const T, Height: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).get_PopDownCorrectionHeight(@ptrCast(*const ITextInputPanel, self), Height);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_CommitPendingInput(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).CommitPendingInput(@ptrCast(*const ITextInputPanel, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_SetInPlaceVisibility(self: *const T, Visible: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).SetInPlaceVisibility(@ptrCast(*const ITextInputPanel, self), Visible);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_SetInPlacePosition(self: *const T, xPosition: i32, yPosition: i32, position: CorrectionPosition) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).SetInPlacePosition(@ptrCast(*const ITextInputPanel, self), xPosition, yPosition, position);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_SetInPlaceHoverTargetPosition(self: *const T, xPosition: i32, yPosition: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).SetInPlaceHoverTargetPosition(@ptrCast(*const ITextInputPanel, self), xPosition, yPosition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_Advise(self: *const T, EventSink: ?*ITextInputPanelEventSink, EventMask: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).Advise(@ptrCast(*const ITextInputPanel, self), EventSink, EventMask);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanel_Unadvise(self: *const T, EventSink: ?*ITextInputPanelEventSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanel.VTable, self.vtable).Unadvise(@ptrCast(*const ITextInputPanel, self), EventSink);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInputPanelWindowHandle_Value = @import("../zig.zig").Guid.initString("4AF81847-FDC4-4FC3-AD0B-422479C1B935");
pub const IID_IInputPanelWindowHandle = &IID_IInputPanelWindowHandle_Value;
pub const IInputPanelWindowHandle = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_AttachedEditWindow32: fn(
            self: *const IInputPanelWindowHandle,
            AttachedEditWindow: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AttachedEditWindow32: fn(
            self: *const IInputPanelWindowHandle,
            AttachedEditWindow: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AttachedEditWindow64: fn(
            self: *const IInputPanelWindowHandle,
            AttachedEditWindow: *i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AttachedEditWindow64: fn(
            self: *const IInputPanelWindowHandle,
            AttachedEditWindow: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInputPanelWindowHandle_get_AttachedEditWindow32(self: *const T, AttachedEditWindow: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInputPanelWindowHandle.VTable, self.vtable).get_AttachedEditWindow32(@ptrCast(*const IInputPanelWindowHandle, self), AttachedEditWindow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInputPanelWindowHandle_put_AttachedEditWindow32(self: *const T, AttachedEditWindow: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInputPanelWindowHandle.VTable, self.vtable).put_AttachedEditWindow32(@ptrCast(*const IInputPanelWindowHandle, self), AttachedEditWindow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInputPanelWindowHandle_get_AttachedEditWindow64(self: *const T, AttachedEditWindow: *i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInputPanelWindowHandle.VTable, self.vtable).get_AttachedEditWindow64(@ptrCast(*const IInputPanelWindowHandle, self), AttachedEditWindow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInputPanelWindowHandle_put_AttachedEditWindow64(self: *const T, AttachedEditWindow: i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInputPanelWindowHandle.VTable, self.vtable).put_AttachedEditWindow64(@ptrCast(*const IInputPanelWindowHandle, self), AttachedEditWindow);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITextInputPanelRunInfo_Value = @import("../zig.zig").Guid.initString("9F424568-1920-48CC-9811-A993CBF5ADBA");
pub const IID_ITextInputPanelRunInfo = &IID_ITextInputPanelRunInfo_Value;
pub const ITextInputPanelRunInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsTipRunning: fn(
            self: *const ITextInputPanelRunInfo,
            pfRunning: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITextInputPanelRunInfo_IsTipRunning(self: *const T, pfRunning: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITextInputPanelRunInfo.VTable, self.vtable).IsTipRunning(@ptrCast(*const ITextInputPanelRunInfo, self), pfRunning);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const FLICKDIRECTION = extern enum(i32) {
    MIN = 0,
    RIGHT = 0,
    UPRIGHT = 1,
    UP = 2,
    UPLEFT = 3,
    LEFT = 4,
    DOWNLEFT = 5,
    DOWN = 6,
    DOWNRIGHT = 7,
    INVALID = 8,
};
pub const FLICKDIRECTION_MIN = FLICKDIRECTION.MIN;
pub const FLICKDIRECTION_RIGHT = FLICKDIRECTION.RIGHT;
pub const FLICKDIRECTION_UPRIGHT = FLICKDIRECTION.UPRIGHT;
pub const FLICKDIRECTION_UP = FLICKDIRECTION.UP;
pub const FLICKDIRECTION_UPLEFT = FLICKDIRECTION.UPLEFT;
pub const FLICKDIRECTION_LEFT = FLICKDIRECTION.LEFT;
pub const FLICKDIRECTION_DOWNLEFT = FLICKDIRECTION.DOWNLEFT;
pub const FLICKDIRECTION_DOWN = FLICKDIRECTION.DOWN;
pub const FLICKDIRECTION_DOWNRIGHT = FLICKDIRECTION.DOWNRIGHT;
pub const FLICKDIRECTION_INVALID = FLICKDIRECTION.INVALID;

pub const FLICKMODE = extern enum(i32) {
    MIN = 0,
    OFF = 0,
    ON = 1,
    LEARNING = 2,
    MAX = 2,
    DEFAULT = 1,
};
pub const FLICKMODE_MIN = FLICKMODE.MIN;
pub const FLICKMODE_OFF = FLICKMODE.OFF;
pub const FLICKMODE_ON = FLICKMODE.ON;
pub const FLICKMODE_LEARNING = FLICKMODE.LEARNING;
pub const FLICKMODE_MAX = FLICKMODE.MAX;
pub const FLICKMODE_DEFAULT = FLICKMODE.DEFAULT;

pub const FLICKACTION_COMMANDCODE = extern enum(i32) {
    NULL = 0,
    SCROLL = 1,
    APPCOMMAND = 2,
    CUSTOMKEY = 3,
    KEYMODIFIER = 4,
};
pub const FLICKACTION_COMMANDCODE_NULL = FLICKACTION_COMMANDCODE.NULL;
pub const FLICKACTION_COMMANDCODE_SCROLL = FLICKACTION_COMMANDCODE.SCROLL;
pub const FLICKACTION_COMMANDCODE_APPCOMMAND = FLICKACTION_COMMANDCODE.APPCOMMAND;
pub const FLICKACTION_COMMANDCODE_CUSTOMKEY = FLICKACTION_COMMANDCODE.CUSTOMKEY;
pub const FLICKACTION_COMMANDCODE_KEYMODIFIER = FLICKACTION_COMMANDCODE.KEYMODIFIER;

pub const FLICK_POINT = extern struct {
    _bitfield: i32,
};

pub const FLICK_DATA = extern struct {
    _bitfield: i32,
};

pub const SCROLLDIRECTION = extern enum(i32) {
    UP = 0,
    DOWN = 1,
};
pub const SCROLLDIRECTION_UP = SCROLLDIRECTION.UP;
pub const SCROLLDIRECTION_DOWN = SCROLLDIRECTION.DOWN;

pub const KEYMODIFIER = extern enum(i32) {
    CONTROL = 1,
    MENU = 2,
    SHIFT = 4,
    WIN = 8,
    ALTGR = 16,
    EXT = 32,
};
pub const KEYMODIFIER_CONTROL = KEYMODIFIER.CONTROL;
pub const KEYMODIFIER_MENU = KEYMODIFIER.MENU;
pub const KEYMODIFIER_SHIFT = KEYMODIFIER.SHIFT;
pub const KEYMODIFIER_WIN = KEYMODIFIER.WIN;
pub const KEYMODIFIER_ALTGR = KEYMODIFIER.ALTGR;
pub const KEYMODIFIER_EXT = KEYMODIFIER.EXT;

const CLSID_InkEdit_Value = @import("../zig.zig").Guid.initString("E5CA59F5-57C4-4DD8-9BD6-1DEEEDD27AF4");
pub const CLSID_InkEdit = &CLSID_InkEdit_Value;

pub const IEC_STROKEINFO = extern struct {
    nmhdr: NMHDR,
    Cursor: *IInkCursor,
    Stroke: *IInkStrokeDisp,
};

pub const IEC_GESTUREINFO = extern struct {
    nmhdr: NMHDR,
    Cursor: *IInkCursor,
    Strokes: *IInkStrokes,
    Gestures: VARIANT,
};

pub const IEC_RECOGNITIONRESULTINFO = extern struct {
    nmhdr: NMHDR,
    RecognitionResult: *IInkRecognitionResult,
};

pub const MouseButton = extern enum(i32) {
    NO_BUTTON = 0,
    LEFT_BUTTON = 1,
    RIGHT_BUTTON = 2,
    MIDDLE_BUTTON = 4,
};
pub const NO_BUTTON = MouseButton.NO_BUTTON;
pub const LEFT_BUTTON = MouseButton.LEFT_BUTTON;
pub const RIGHT_BUTTON = MouseButton.RIGHT_BUTTON;
pub const MIDDLE_BUTTON = MouseButton.MIDDLE_BUTTON;

pub const SelAlignmentConstants = extern enum(i32) {
    rtfLeft = 0,
    rtfRight = 1,
    rtfCenter = 2,
};
pub const rtfLeft = SelAlignmentConstants.rtfLeft;
pub const rtfRight = SelAlignmentConstants.rtfRight;
pub const rtfCenter = SelAlignmentConstants.rtfCenter;

pub const DISPID_InkEdit = extern enum(i32) {
    DISPID_Text = 0,
    DISPID_TextRTF = 1,
    DISPID_Hwnd = 2,
    DISPID_DisableNoScroll = 3,
    DISPID_Locked = 4,
    DISPID_Enabled = 5,
    DISPID_MaxLength = 6,
    DISPID_MultiLine = 7,
    DISPID_ScrollBars = 8,
    DISPID_RTSelStart = 9,
    DISPID_RTSelLength = 10,
    DISPID_RTSelText = 11,
    DISPID_SelAlignment = 12,
    DISPID_SelBold = 13,
    DISPID_SelCharOffset = 14,
    DISPID_SelColor = 15,
    DISPID_SelFontName = 16,
    DISPID_SelFontSize = 17,
    DISPID_SelItalic = 18,
    DISPID_SelRTF = 19,
    DISPID_SelUnderline = 20,
    DISPID_DragIcon = 21,
    DISPID_Status = 22,
    DISPID_UseMouseForInput = 23,
    DISPID_InkMode = 24,
    DISPID_InkInsertMode = 25,
    DISPID_RecoTimeout = 26,
    DISPID_DrawAttr = 27,
    DISPID_Recognizer = 28,
    DISPID_Factoid = 29,
    DISPID_SelInk = 30,
    DISPID_SelInksDisplayMode = 31,
    DISPID_Recognize = 32,
    DISPID_GetGestStatus = 33,
    DISPID_SetGestStatus = 34,
    DISPID_Refresh = 35,
};
pub const DISPID_Text = DISPID_InkEdit.DISPID_Text;
pub const DISPID_TextRTF = DISPID_InkEdit.DISPID_TextRTF;
pub const DISPID_Hwnd = DISPID_InkEdit.DISPID_Hwnd;
pub const DISPID_DisableNoScroll = DISPID_InkEdit.DISPID_DisableNoScroll;
pub const DISPID_Locked = DISPID_InkEdit.DISPID_Locked;
pub const DISPID_Enabled = DISPID_InkEdit.DISPID_Enabled;
pub const DISPID_MaxLength = DISPID_InkEdit.DISPID_MaxLength;
pub const DISPID_MultiLine = DISPID_InkEdit.DISPID_MultiLine;
pub const DISPID_ScrollBars = DISPID_InkEdit.DISPID_ScrollBars;
pub const DISPID_RTSelStart = DISPID_InkEdit.DISPID_RTSelStart;
pub const DISPID_RTSelLength = DISPID_InkEdit.DISPID_RTSelLength;
pub const DISPID_RTSelText = DISPID_InkEdit.DISPID_RTSelText;
pub const DISPID_SelAlignment = DISPID_InkEdit.DISPID_SelAlignment;
pub const DISPID_SelBold = DISPID_InkEdit.DISPID_SelBold;
pub const DISPID_SelCharOffset = DISPID_InkEdit.DISPID_SelCharOffset;
pub const DISPID_SelColor = DISPID_InkEdit.DISPID_SelColor;
pub const DISPID_SelFontName = DISPID_InkEdit.DISPID_SelFontName;
pub const DISPID_SelFontSize = DISPID_InkEdit.DISPID_SelFontSize;
pub const DISPID_SelItalic = DISPID_InkEdit.DISPID_SelItalic;
pub const DISPID_SelRTF = DISPID_InkEdit.DISPID_SelRTF;
pub const DISPID_SelUnderline = DISPID_InkEdit.DISPID_SelUnderline;
pub const DISPID_DragIcon = DISPID_InkEdit.DISPID_DragIcon;
pub const DISPID_Status = DISPID_InkEdit.DISPID_Status;
pub const DISPID_UseMouseForInput = DISPID_InkEdit.DISPID_UseMouseForInput;
pub const DISPID_InkMode = DISPID_InkEdit.DISPID_InkMode;
pub const DISPID_InkInsertMode = DISPID_InkEdit.DISPID_InkInsertMode;
pub const DISPID_RecoTimeout = DISPID_InkEdit.DISPID_RecoTimeout;
pub const DISPID_DrawAttr = DISPID_InkEdit.DISPID_DrawAttr;
pub const DISPID_Recognizer = DISPID_InkEdit.DISPID_Recognizer;
pub const DISPID_Factoid = DISPID_InkEdit.DISPID_Factoid;
pub const DISPID_SelInk = DISPID_InkEdit.DISPID_SelInk;
pub const DISPID_SelInksDisplayMode = DISPID_InkEdit.DISPID_SelInksDisplayMode;
pub const DISPID_Recognize = DISPID_InkEdit.DISPID_Recognize;
pub const DISPID_GetGestStatus = DISPID_InkEdit.DISPID_GetGestStatus;
pub const DISPID_SetGestStatus = DISPID_InkEdit.DISPID_SetGestStatus;
pub const DISPID_Refresh = DISPID_InkEdit.DISPID_Refresh;

pub const DISPID_InkEditEvents = extern enum(i32) {
    DISPID_IeeChange = 1,
    DISPID_IeeSelChange = 2,
    DISPID_IeeKeyDown = 3,
    DISPID_IeeKeyUp = 4,
    DISPID_IeeMouseUp = 5,
    DISPID_IeeMouseDown = 6,
    DISPID_IeeKeyPress = 7,
    DISPID_IeeDblClick = 8,
    DISPID_IeeClick = 9,
    DISPID_IeeMouseMove = 10,
    DISPID_IeeCursorDown = 21,
    DISPID_IeeStroke = 22,
    DISPID_IeeGesture = 23,
    DISPID_IeeRecognitionResult = 24,
};
pub const DISPID_IeeChange = DISPID_InkEditEvents.DISPID_IeeChange;
pub const DISPID_IeeSelChange = DISPID_InkEditEvents.DISPID_IeeSelChange;
pub const DISPID_IeeKeyDown = DISPID_InkEditEvents.DISPID_IeeKeyDown;
pub const DISPID_IeeKeyUp = DISPID_InkEditEvents.DISPID_IeeKeyUp;
pub const DISPID_IeeMouseUp = DISPID_InkEditEvents.DISPID_IeeMouseUp;
pub const DISPID_IeeMouseDown = DISPID_InkEditEvents.DISPID_IeeMouseDown;
pub const DISPID_IeeKeyPress = DISPID_InkEditEvents.DISPID_IeeKeyPress;
pub const DISPID_IeeDblClick = DISPID_InkEditEvents.DISPID_IeeDblClick;
pub const DISPID_IeeClick = DISPID_InkEditEvents.DISPID_IeeClick;
pub const DISPID_IeeMouseMove = DISPID_InkEditEvents.DISPID_IeeMouseMove;
pub const DISPID_IeeCursorDown = DISPID_InkEditEvents.DISPID_IeeCursorDown;
pub const DISPID_IeeStroke = DISPID_InkEditEvents.DISPID_IeeStroke;
pub const DISPID_IeeGesture = DISPID_InkEditEvents.DISPID_IeeGesture;
pub const DISPID_IeeRecognitionResult = DISPID_InkEditEvents.DISPID_IeeRecognitionResult;

pub const InkMode = extern enum(i32) {
    IEM_Disabled = 0,
    IEM_Ink = 1,
    IEM_InkAndGesture = 2,
};
pub const IEM_Disabled = InkMode.IEM_Disabled;
pub const IEM_Ink = InkMode.IEM_Ink;
pub const IEM_InkAndGesture = InkMode.IEM_InkAndGesture;

pub const InkInsertMode = extern enum(i32) {
    IEM_InsertText = 0,
    IEM_InsertInk = 1,
};
pub const IEM_InsertText = InkInsertMode.IEM_InsertText;
pub const IEM_InsertInk = InkInsertMode.IEM_InsertInk;

pub const InkEditStatus = extern enum(i32) {
    IES_Idle = 0,
    IES_Collecting = 1,
    IES_Recognizing = 2,
};
pub const IES_Idle = InkEditStatus.IES_Idle;
pub const IES_Collecting = InkEditStatus.IES_Collecting;
pub const IES_Recognizing = InkEditStatus.IES_Recognizing;

pub const InkDisplayMode = extern enum(i32) {
    IDM_Ink = 0,
    IDM_Text = 1,
};
pub const IDM_Ink = InkDisplayMode.IDM_Ink;
pub const IDM_Text = InkDisplayMode.IDM_Text;

pub const AppearanceConstants = extern enum(i32) {
    rtfFlat = 0,
    rtfThreeD = 1,
};
pub const rtfFlat = AppearanceConstants.rtfFlat;
pub const rtfThreeD = AppearanceConstants.rtfThreeD;

pub const BorderStyleConstants = extern enum(i32) {
    rtfNoBorder = 0,
    rtfFixedSingle = 1,
};
pub const rtfNoBorder = BorderStyleConstants.rtfNoBorder;
pub const rtfFixedSingle = BorderStyleConstants.rtfFixedSingle;

pub const ScrollBarsConstants = extern enum(i32) {
    rtfNone = 0,
    rtfHorizontal = 1,
    rtfVertical = 2,
    rtfBoth = 3,
};
pub const rtfNone = ScrollBarsConstants.rtfNone;
pub const rtfHorizontal = ScrollBarsConstants.rtfHorizontal;
pub const rtfVertical = ScrollBarsConstants.rtfVertical;
pub const rtfBoth = ScrollBarsConstants.rtfBoth;

const IID_IInkEdit_Value = @import("../zig.zig").Guid.initString("F2127A19-FBFB-4AED-8464-3F36D78CFEFB");
pub const IID_IInkEdit = &IID_IInkEdit_Value;
pub const IInkEdit = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Status: fn(
            self: *const IInkEdit,
            pStatus: *InkEditStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UseMouseForInput: fn(
            self: *const IInkEdit,
            pVal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_UseMouseForInput: fn(
            self: *const IInkEdit,
            newVal: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_InkMode: fn(
            self: *const IInkEdit,
            pVal: *InkMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_InkMode: fn(
            self: *const IInkEdit,
            newVal: InkMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_InkInsertMode: fn(
            self: *const IInkEdit,
            pVal: *InkInsertMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_InkInsertMode: fn(
            self: *const IInkEdit,
            newVal: InkInsertMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DrawingAttributes: fn(
            self: *const IInkEdit,
            pVal: **IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_DrawingAttributes: fn(
            self: *const IInkEdit,
            newVal: ?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RecognitionTimeout: fn(
            self: *const IInkEdit,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RecognitionTimeout: fn(
            self: *const IInkEdit,
            newVal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Recognizer: fn(
            self: *const IInkEdit,
            pVal: **IInkRecognizer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Recognizer: fn(
            self: *const IInkEdit,
            newVal: ?*IInkRecognizer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Factoid: fn(
            self: *const IInkEdit,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Factoid: fn(
            self: *const IInkEdit,
            newVal: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SelInks: fn(
            self: *const IInkEdit,
            pSelInk: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SelInks: fn(
            self: *const IInkEdit,
            SelInk: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SelInksDisplayMode: fn(
            self: *const IInkEdit,
            pInkDisplayMode: *InkDisplayMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SelInksDisplayMode: fn(
            self: *const IInkEdit,
            InkDisplayMode: InkDisplayMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Recognize: fn(
            self: *const IInkEdit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGestureStatus: fn(
            self: *const IInkEdit,
            Gesture: InkApplicationGesture,
            pListen: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGestureStatus: fn(
            self: *const IInkEdit,
            Gesture: InkApplicationGesture,
            Listen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_BackColor: fn(
            self: *const IInkEdit,
            clr: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BackColor: fn(
            self: *const IInkEdit,
            pclr: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Appearance: fn(
            self: *const IInkEdit,
            pAppearance: *AppearanceConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Appearance: fn(
            self: *const IInkEdit,
            pAppearance: AppearanceConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BorderStyle: fn(
            self: *const IInkEdit,
            pBorderStyle: *BorderStyleConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_BorderStyle: fn(
            self: *const IInkEdit,
            pBorderStyle: BorderStyleConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Hwnd: fn(
            self: *const IInkEdit,
            pohHwnd: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Font: fn(
            self: *const IInkEdit,
            ppFont: **IFontDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Font: fn(
            self: *const IInkEdit,
            ppFont: ?*IFontDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Text: fn(
            self: *const IInkEdit,
            pbstrText: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Text: fn(
            self: *const IInkEdit,
            pbstrText: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MouseIcon: fn(
            self: *const IInkEdit,
            MouseIcon: **IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MouseIcon: fn(
            self: *const IInkEdit,
            MouseIcon: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_MouseIcon: fn(
            self: *const IInkEdit,
            MouseIcon: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MousePointer: fn(
            self: *const IInkEdit,
            MousePointer: *InkMousePointer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MousePointer: fn(
            self: *const IInkEdit,
            MousePointer: InkMousePointer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Locked: fn(
            self: *const IInkEdit,
            pVal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Locked: fn(
            self: *const IInkEdit,
            newVal: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Enabled: fn(
            self: *const IInkEdit,
            pVal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Enabled: fn(
            self: *const IInkEdit,
            newVal: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MaxLength: fn(
            self: *const IInkEdit,
            plMaxLength: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MaxLength: fn(
            self: *const IInkEdit,
            lMaxLength: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MultiLine: fn(
            self: *const IInkEdit,
            pVal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MultiLine: fn(
            self: *const IInkEdit,
            newVal: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ScrollBars: fn(
            self: *const IInkEdit,
            pVal: *ScrollBarsConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ScrollBars: fn(
            self: *const IInkEdit,
            newVal: ScrollBarsConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DisableNoScroll: fn(
            self: *const IInkEdit,
            pVal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DisableNoScroll: fn(
            self: *const IInkEdit,
            newVal: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SelAlignment: fn(
            self: *const IInkEdit,
            pvarSelAlignment: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SelAlignment: fn(
            self: *const IInkEdit,
            pvarSelAlignment: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SelBold: fn(
            self: *const IInkEdit,
            pvarSelBold: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SelBold: fn(
            self: *const IInkEdit,
            pvarSelBold: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SelItalic: fn(
            self: *const IInkEdit,
            pvarSelItalic: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SelItalic: fn(
            self: *const IInkEdit,
            pvarSelItalic: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SelUnderline: fn(
            self: *const IInkEdit,
            pvarSelUnderline: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SelUnderline: fn(
            self: *const IInkEdit,
            pvarSelUnderline: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SelColor: fn(
            self: *const IInkEdit,
            pvarSelColor: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SelColor: fn(
            self: *const IInkEdit,
            pvarSelColor: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SelFontName: fn(
            self: *const IInkEdit,
            pvarSelFontName: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SelFontName: fn(
            self: *const IInkEdit,
            pvarSelFontName: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SelFontSize: fn(
            self: *const IInkEdit,
            pvarSelFontSize: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SelFontSize: fn(
            self: *const IInkEdit,
            pvarSelFontSize: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SelCharOffset: fn(
            self: *const IInkEdit,
            pvarSelCharOffset: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SelCharOffset: fn(
            self: *const IInkEdit,
            pvarSelCharOffset: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_TextRTF: fn(
            self: *const IInkEdit,
            pbstrTextRTF: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_TextRTF: fn(
            self: *const IInkEdit,
            pbstrTextRTF: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SelStart: fn(
            self: *const IInkEdit,
            plSelStart: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SelStart: fn(
            self: *const IInkEdit,
            plSelStart: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SelLength: fn(
            self: *const IInkEdit,
            plSelLength: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SelLength: fn(
            self: *const IInkEdit,
            plSelLength: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SelText: fn(
            self: *const IInkEdit,
            pbstrSelText: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SelText: fn(
            self: *const IInkEdit,
            pbstrSelText: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SelRTF: fn(
            self: *const IInkEdit,
            pbstrSelRTF: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SelRTF: fn(
            self: *const IInkEdit,
            pbstrSelRTF: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const IInkEdit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_Status(self: *const T, pStatus: *InkEditStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_Status(@ptrCast(*const IInkEdit, self), pStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_UseMouseForInput(self: *const T, pVal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_UseMouseForInput(@ptrCast(*const IInkEdit, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_UseMouseForInput(self: *const T, newVal: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_UseMouseForInput(@ptrCast(*const IInkEdit, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_InkMode(self: *const T, pVal: *InkMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_InkMode(@ptrCast(*const IInkEdit, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_InkMode(self: *const T, newVal: InkMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_InkMode(@ptrCast(*const IInkEdit, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_InkInsertMode(self: *const T, pVal: *InkInsertMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_InkInsertMode(@ptrCast(*const IInkEdit, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_InkInsertMode(self: *const T, newVal: InkInsertMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_InkInsertMode(@ptrCast(*const IInkEdit, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_DrawingAttributes(self: *const T, pVal: **IInkDrawingAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_DrawingAttributes(@ptrCast(*const IInkEdit, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_putref_DrawingAttributes(self: *const T, newVal: ?*IInkDrawingAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).putref_DrawingAttributes(@ptrCast(*const IInkEdit, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_RecognitionTimeout(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_RecognitionTimeout(@ptrCast(*const IInkEdit, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_RecognitionTimeout(self: *const T, newVal: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_RecognitionTimeout(@ptrCast(*const IInkEdit, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_Recognizer(self: *const T, pVal: **IInkRecognizer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_Recognizer(@ptrCast(*const IInkEdit, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_putref_Recognizer(self: *const T, newVal: ?*IInkRecognizer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).putref_Recognizer(@ptrCast(*const IInkEdit, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_Factoid(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_Factoid(@ptrCast(*const IInkEdit, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_Factoid(self: *const T, newVal: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_Factoid(@ptrCast(*const IInkEdit, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_SelInks(self: *const T, pSelInk: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_SelInks(@ptrCast(*const IInkEdit, self), pSelInk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_SelInks(self: *const T, SelInk: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_SelInks(@ptrCast(*const IInkEdit, self), SelInk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_SelInksDisplayMode(self: *const T, pInkDisplayMode: *InkDisplayMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_SelInksDisplayMode(@ptrCast(*const IInkEdit, self), pInkDisplayMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_SelInksDisplayMode(self: *const T, InkDisplayMode: InkDisplayMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_SelInksDisplayMode(@ptrCast(*const IInkEdit, self), InkDisplayMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_Recognize(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).Recognize(@ptrCast(*const IInkEdit, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_GetGestureStatus(self: *const T, Gesture: InkApplicationGesture, pListen: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).GetGestureStatus(@ptrCast(*const IInkEdit, self), Gesture, pListen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_SetGestureStatus(self: *const T, Gesture: InkApplicationGesture, Listen: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).SetGestureStatus(@ptrCast(*const IInkEdit, self), Gesture, Listen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_BackColor(self: *const T, clr: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_BackColor(@ptrCast(*const IInkEdit, self), clr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_BackColor(self: *const T, pclr: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_BackColor(@ptrCast(*const IInkEdit, self), pclr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_Appearance(self: *const T, pAppearance: *AppearanceConstants) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_Appearance(@ptrCast(*const IInkEdit, self), pAppearance);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_Appearance(self: *const T, pAppearance: AppearanceConstants) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_Appearance(@ptrCast(*const IInkEdit, self), pAppearance);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_BorderStyle(self: *const T, pBorderStyle: *BorderStyleConstants) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_BorderStyle(@ptrCast(*const IInkEdit, self), pBorderStyle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_BorderStyle(self: *const T, pBorderStyle: BorderStyleConstants) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_BorderStyle(@ptrCast(*const IInkEdit, self), pBorderStyle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_Hwnd(self: *const T, pohHwnd: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_Hwnd(@ptrCast(*const IInkEdit, self), pohHwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_Font(self: *const T, ppFont: **IFontDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_Font(@ptrCast(*const IInkEdit, self), ppFont);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_putref_Font(self: *const T, ppFont: ?*IFontDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).putref_Font(@ptrCast(*const IInkEdit, self), ppFont);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_Text(self: *const T, pbstrText: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_Text(@ptrCast(*const IInkEdit, self), pbstrText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_Text(self: *const T, pbstrText: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_Text(@ptrCast(*const IInkEdit, self), pbstrText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_MouseIcon(self: *const T, MouseIcon: **IPictureDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_MouseIcon(@ptrCast(*const IInkEdit, self), MouseIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_MouseIcon(self: *const T, MouseIcon: ?*IPictureDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_MouseIcon(@ptrCast(*const IInkEdit, self), MouseIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_putref_MouseIcon(self: *const T, MouseIcon: ?*IPictureDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).putref_MouseIcon(@ptrCast(*const IInkEdit, self), MouseIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_MousePointer(self: *const T, MousePointer: *InkMousePointer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_MousePointer(@ptrCast(*const IInkEdit, self), MousePointer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_MousePointer(self: *const T, MousePointer: InkMousePointer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_MousePointer(@ptrCast(*const IInkEdit, self), MousePointer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_Locked(self: *const T, pVal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_Locked(@ptrCast(*const IInkEdit, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_Locked(self: *const T, newVal: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_Locked(@ptrCast(*const IInkEdit, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_Enabled(self: *const T, pVal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_Enabled(@ptrCast(*const IInkEdit, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_Enabled(self: *const T, newVal: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_Enabled(@ptrCast(*const IInkEdit, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_MaxLength(self: *const T, plMaxLength: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_MaxLength(@ptrCast(*const IInkEdit, self), plMaxLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_MaxLength(self: *const T, lMaxLength: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_MaxLength(@ptrCast(*const IInkEdit, self), lMaxLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_MultiLine(self: *const T, pVal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_MultiLine(@ptrCast(*const IInkEdit, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_MultiLine(self: *const T, newVal: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_MultiLine(@ptrCast(*const IInkEdit, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_ScrollBars(self: *const T, pVal: *ScrollBarsConstants) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_ScrollBars(@ptrCast(*const IInkEdit, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_ScrollBars(self: *const T, newVal: ScrollBarsConstants) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_ScrollBars(@ptrCast(*const IInkEdit, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_DisableNoScroll(self: *const T, pVal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_DisableNoScroll(@ptrCast(*const IInkEdit, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_DisableNoScroll(self: *const T, newVal: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_DisableNoScroll(@ptrCast(*const IInkEdit, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_SelAlignment(self: *const T, pvarSelAlignment: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_SelAlignment(@ptrCast(*const IInkEdit, self), pvarSelAlignment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_SelAlignment(self: *const T, pvarSelAlignment: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_SelAlignment(@ptrCast(*const IInkEdit, self), pvarSelAlignment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_SelBold(self: *const T, pvarSelBold: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_SelBold(@ptrCast(*const IInkEdit, self), pvarSelBold);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_SelBold(self: *const T, pvarSelBold: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_SelBold(@ptrCast(*const IInkEdit, self), pvarSelBold);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_SelItalic(self: *const T, pvarSelItalic: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_SelItalic(@ptrCast(*const IInkEdit, self), pvarSelItalic);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_SelItalic(self: *const T, pvarSelItalic: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_SelItalic(@ptrCast(*const IInkEdit, self), pvarSelItalic);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_SelUnderline(self: *const T, pvarSelUnderline: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_SelUnderline(@ptrCast(*const IInkEdit, self), pvarSelUnderline);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_SelUnderline(self: *const T, pvarSelUnderline: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_SelUnderline(@ptrCast(*const IInkEdit, self), pvarSelUnderline);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_SelColor(self: *const T, pvarSelColor: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_SelColor(@ptrCast(*const IInkEdit, self), pvarSelColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_SelColor(self: *const T, pvarSelColor: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_SelColor(@ptrCast(*const IInkEdit, self), pvarSelColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_SelFontName(self: *const T, pvarSelFontName: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_SelFontName(@ptrCast(*const IInkEdit, self), pvarSelFontName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_SelFontName(self: *const T, pvarSelFontName: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_SelFontName(@ptrCast(*const IInkEdit, self), pvarSelFontName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_SelFontSize(self: *const T, pvarSelFontSize: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_SelFontSize(@ptrCast(*const IInkEdit, self), pvarSelFontSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_SelFontSize(self: *const T, pvarSelFontSize: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_SelFontSize(@ptrCast(*const IInkEdit, self), pvarSelFontSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_SelCharOffset(self: *const T, pvarSelCharOffset: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_SelCharOffset(@ptrCast(*const IInkEdit, self), pvarSelCharOffset);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_SelCharOffset(self: *const T, pvarSelCharOffset: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_SelCharOffset(@ptrCast(*const IInkEdit, self), pvarSelCharOffset);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_TextRTF(self: *const T, pbstrTextRTF: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_TextRTF(@ptrCast(*const IInkEdit, self), pbstrTextRTF);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_TextRTF(self: *const T, pbstrTextRTF: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_TextRTF(@ptrCast(*const IInkEdit, self), pbstrTextRTF);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_SelStart(self: *const T, plSelStart: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_SelStart(@ptrCast(*const IInkEdit, self), plSelStart);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_SelStart(self: *const T, plSelStart: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_SelStart(@ptrCast(*const IInkEdit, self), plSelStart);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_SelLength(self: *const T, plSelLength: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_SelLength(@ptrCast(*const IInkEdit, self), plSelLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_SelLength(self: *const T, plSelLength: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_SelLength(@ptrCast(*const IInkEdit, self), plSelLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_SelText(self: *const T, pbstrSelText: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_SelText(@ptrCast(*const IInkEdit, self), pbstrSelText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_SelText(self: *const T, pbstrSelText: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_SelText(@ptrCast(*const IInkEdit, self), pbstrSelText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_get_SelRTF(self: *const T, pbstrSelRTF: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).get_SelRTF(@ptrCast(*const IInkEdit, self), pbstrSelRTF);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_put_SelRTF(self: *const T, pbstrSelRTF: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).put_SelRTF(@ptrCast(*const IInkEdit, self), pbstrSelRTF);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkEdit_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkEdit.VTable, self.vtable).Refresh(@ptrCast(*const IInkEdit, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID__IInkEditEvents_Value = @import("../zig.zig").Guid.initString("E3B0B797-A72E-46DB-A0D7-6C9EBA8E9BBC");
pub const IID__IInkEditEvents = &IID__IInkEditEvents_Value;
pub const _IInkEditEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_MathInputControl_Value = @import("../zig.zig").Guid.initString("C561816C-14D8-4090-830C-98D994B21C7B");
pub const CLSID_MathInputControl = &CLSID_MathInputControl_Value;

pub const MICUIELEMENT = extern enum(i32) {
    BUTTON_WRITE = 1,
    BUTTON_ERASE = 2,
    BUTTON_CORRECT = 4,
    BUTTON_CLEAR = 8,
    BUTTON_UNDO = 16,
    BUTTON_REDO = 32,
    BUTTON_INSERT = 64,
    BUTTON_CANCEL = 128,
    INKPANEL_BACKGROUND = 256,
    RESULTPANEL_BACKGROUND = 512,
};
pub const MICUIELEMENT_BUTTON_WRITE = MICUIELEMENT.BUTTON_WRITE;
pub const MICUIELEMENT_BUTTON_ERASE = MICUIELEMENT.BUTTON_ERASE;
pub const MICUIELEMENT_BUTTON_CORRECT = MICUIELEMENT.BUTTON_CORRECT;
pub const MICUIELEMENT_BUTTON_CLEAR = MICUIELEMENT.BUTTON_CLEAR;
pub const MICUIELEMENT_BUTTON_UNDO = MICUIELEMENT.BUTTON_UNDO;
pub const MICUIELEMENT_BUTTON_REDO = MICUIELEMENT.BUTTON_REDO;
pub const MICUIELEMENT_BUTTON_INSERT = MICUIELEMENT.BUTTON_INSERT;
pub const MICUIELEMENT_BUTTON_CANCEL = MICUIELEMENT.BUTTON_CANCEL;
pub const MICUIELEMENT_INKPANEL_BACKGROUND = MICUIELEMENT.INKPANEL_BACKGROUND;
pub const MICUIELEMENT_RESULTPANEL_BACKGROUND = MICUIELEMENT.RESULTPANEL_BACKGROUND;

pub const MICUIELEMENTSTATE = extern enum(i32) {
    NORMAL = 1,
    HOT = 2,
    PRESSED = 3,
    DISABLED = 4,
};
pub const MICUIELEMENTSTATE_NORMAL = MICUIELEMENTSTATE.NORMAL;
pub const MICUIELEMENTSTATE_HOT = MICUIELEMENTSTATE.HOT;
pub const MICUIELEMENTSTATE_PRESSED = MICUIELEMENTSTATE.PRESSED;
pub const MICUIELEMENTSTATE_DISABLED = MICUIELEMENTSTATE.DISABLED;

pub const DISPID_MathInputControlEvents = extern enum(i32) {
    DISPID_MICInsert = 0,
    DISPID_MICClose = 1,
    DISPID_MICPaint = 2,
    DISPID_MICClear = 3,
};
pub const DISPID_MICInsert = DISPID_MathInputControlEvents.DISPID_MICInsert;
pub const DISPID_MICClose = DISPID_MathInputControlEvents.DISPID_MICClose;
pub const DISPID_MICPaint = DISPID_MathInputControlEvents.DISPID_MICPaint;
pub const DISPID_MICClear = DISPID_MathInputControlEvents.DISPID_MICClear;

const IID_IMathInputControl_Value = @import("../zig.zig").Guid.initString("EBA615AA-FAC6-4738-BA5F-FF09E9FE473E");
pub const IID_IMathInputControl = &IID_IMathInputControl_Value;
pub const IMathInputControl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Show: fn(
            self: *const IMathInputControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Hide: fn(
            self: *const IMathInputControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsVisible: fn(
            self: *const IMathInputControl,
            pvbShown: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPosition: fn(
            self: *const IMathInputControl,
            Left: *i32,
            Top: *i32,
            Right: *i32,
            Bottom: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPosition: fn(
            self: *const IMathInputControl,
            Left: i32,
            Top: i32,
            Right: i32,
            Bottom: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IMathInputControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCustomPaint: fn(
            self: *const IMathInputControl,
            Element: i32,
            Paint: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCaptionText: fn(
            self: *const IMathInputControl,
            CaptionText: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadInk: fn(
            self: *const IMathInputControl,
            Ink: ?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOwnerWindow: fn(
            self: *const IMathInputControl,
            OwnerWindow: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableExtendedButtons: fn(
            self: *const IMathInputControl,
            Extended: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreviewHeight: fn(
            self: *const IMathInputControl,
            Height: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPreviewHeight: fn(
            self: *const IMathInputControl,
            Height: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableAutoGrow: fn(
            self: *const IMathInputControl,
            AutoGrow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFunctionName: fn(
            self: *const IMathInputControl,
            FunctionName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveFunctionName: fn(
            self: *const IMathInputControl,
            FunctionName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHoverIcon: fn(
            self: *const IMathInputControl,
            HoverImage: **IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMathInputControl_Show(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMathInputControl.VTable, self.vtable).Show(@ptrCast(*const IMathInputControl, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMathInputControl_Hide(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMathInputControl.VTable, self.vtable).Hide(@ptrCast(*const IMathInputControl, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMathInputControl_IsVisible(self: *const T, pvbShown: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMathInputControl.VTable, self.vtable).IsVisible(@ptrCast(*const IMathInputControl, self), pvbShown);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMathInputControl_GetPosition(self: *const T, Left: *i32, Top: *i32, Right: *i32, Bottom: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMathInputControl.VTable, self.vtable).GetPosition(@ptrCast(*const IMathInputControl, self), Left, Top, Right, Bottom);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMathInputControl_SetPosition(self: *const T, Left: i32, Top: i32, Right: i32, Bottom: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMathInputControl.VTable, self.vtable).SetPosition(@ptrCast(*const IMathInputControl, self), Left, Top, Right, Bottom);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMathInputControl_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMathInputControl.VTable, self.vtable).Clear(@ptrCast(*const IMathInputControl, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMathInputControl_SetCustomPaint(self: *const T, Element: i32, Paint: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMathInputControl.VTable, self.vtable).SetCustomPaint(@ptrCast(*const IMathInputControl, self), Element, Paint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMathInputControl_SetCaptionText(self: *const T, CaptionText: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMathInputControl.VTable, self.vtable).SetCaptionText(@ptrCast(*const IMathInputControl, self), CaptionText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMathInputControl_LoadInk(self: *const T, Ink: ?*IInkDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMathInputControl.VTable, self.vtable).LoadInk(@ptrCast(*const IMathInputControl, self), Ink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMathInputControl_SetOwnerWindow(self: *const T, OwnerWindow: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMathInputControl.VTable, self.vtable).SetOwnerWindow(@ptrCast(*const IMathInputControl, self), OwnerWindow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMathInputControl_EnableExtendedButtons(self: *const T, Extended: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMathInputControl.VTable, self.vtable).EnableExtendedButtons(@ptrCast(*const IMathInputControl, self), Extended);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMathInputControl_GetPreviewHeight(self: *const T, Height: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMathInputControl.VTable, self.vtable).GetPreviewHeight(@ptrCast(*const IMathInputControl, self), Height);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMathInputControl_SetPreviewHeight(self: *const T, Height: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMathInputControl.VTable, self.vtable).SetPreviewHeight(@ptrCast(*const IMathInputControl, self), Height);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMathInputControl_EnableAutoGrow(self: *const T, AutoGrow: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMathInputControl.VTable, self.vtable).EnableAutoGrow(@ptrCast(*const IMathInputControl, self), AutoGrow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMathInputControl_AddFunctionName(self: *const T, FunctionName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMathInputControl.VTable, self.vtable).AddFunctionName(@ptrCast(*const IMathInputControl, self), FunctionName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMathInputControl_RemoveFunctionName(self: *const T, FunctionName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMathInputControl.VTable, self.vtable).RemoveFunctionName(@ptrCast(*const IMathInputControl, self), FunctionName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMathInputControl_GetHoverIcon(self: *const T, HoverImage: **IPictureDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMathInputControl.VTable, self.vtable).GetHoverIcon(@ptrCast(*const IMathInputControl, self), HoverImage);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID__IMathInputControlEvents_Value = @import("../zig.zig").Guid.initString("683336B5-A47D-4358-96F9-875A472AE70A");
pub const IID__IMathInputControlEvents = &IID__IMathInputControlEvents_Value;
pub const _IMathInputControlEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_RealTimeStylus_Value = @import("../zig.zig").Guid.initString("E26B366D-F998-43CE-836F-CB6D904432B0");
pub const CLSID_RealTimeStylus = &CLSID_RealTimeStylus_Value;

const CLSID_DynamicRenderer_Value = @import("../zig.zig").Guid.initString("ECD32AEA-746F-4DCB-BF68-082757FAFF18");
pub const CLSID_DynamicRenderer = &CLSID_DynamicRenderer_Value;

const CLSID_GestureRecognizer_Value = @import("../zig.zig").Guid.initString("EA30C654-C62C-441F-AC00-95F9A196782C");
pub const CLSID_GestureRecognizer = &CLSID_GestureRecognizer_Value;

const CLSID_StrokeBuilder_Value = @import("../zig.zig").Guid.initString("E810CEE7-6E51-4CB0-AA3A-0B985B70DAF7");
pub const CLSID_StrokeBuilder = &CLSID_StrokeBuilder_Value;

pub const RealTimeStylusDataInterest = extern enum(i32) {
    RTSDI_AllData = -1,
    RTSDI_None = 0,
    RTSDI_Error = 1,
    RTSDI_RealTimeStylusEnabled = 2,
    RTSDI_RealTimeStylusDisabled = 4,
    RTSDI_StylusNew = 8,
    RTSDI_StylusInRange = 16,
    RTSDI_InAirPackets = 32,
    RTSDI_StylusOutOfRange = 64,
    RTSDI_StylusDown = 128,
    RTSDI_Packets = 256,
    RTSDI_StylusUp = 512,
    RTSDI_StylusButtonUp = 1024,
    RTSDI_StylusButtonDown = 2048,
    RTSDI_SystemEvents = 4096,
    RTSDI_TabletAdded = 8192,
    RTSDI_TabletRemoved = 16384,
    RTSDI_CustomStylusDataAdded = 32768,
    RTSDI_UpdateMapping = 65536,
    RTSDI_DefaultEvents = 37766,
};
pub const RTSDI_AllData = RealTimeStylusDataInterest.RTSDI_AllData;
pub const RTSDI_None = RealTimeStylusDataInterest.RTSDI_None;
pub const RTSDI_Error = RealTimeStylusDataInterest.RTSDI_Error;
pub const RTSDI_RealTimeStylusEnabled = RealTimeStylusDataInterest.RTSDI_RealTimeStylusEnabled;
pub const RTSDI_RealTimeStylusDisabled = RealTimeStylusDataInterest.RTSDI_RealTimeStylusDisabled;
pub const RTSDI_StylusNew = RealTimeStylusDataInterest.RTSDI_StylusNew;
pub const RTSDI_StylusInRange = RealTimeStylusDataInterest.RTSDI_StylusInRange;
pub const RTSDI_InAirPackets = RealTimeStylusDataInterest.RTSDI_InAirPackets;
pub const RTSDI_StylusOutOfRange = RealTimeStylusDataInterest.RTSDI_StylusOutOfRange;
pub const RTSDI_StylusDown = RealTimeStylusDataInterest.RTSDI_StylusDown;
pub const RTSDI_Packets = RealTimeStylusDataInterest.RTSDI_Packets;
pub const RTSDI_StylusUp = RealTimeStylusDataInterest.RTSDI_StylusUp;
pub const RTSDI_StylusButtonUp = RealTimeStylusDataInterest.RTSDI_StylusButtonUp;
pub const RTSDI_StylusButtonDown = RealTimeStylusDataInterest.RTSDI_StylusButtonDown;
pub const RTSDI_SystemEvents = RealTimeStylusDataInterest.RTSDI_SystemEvents;
pub const RTSDI_TabletAdded = RealTimeStylusDataInterest.RTSDI_TabletAdded;
pub const RTSDI_TabletRemoved = RealTimeStylusDataInterest.RTSDI_TabletRemoved;
pub const RTSDI_CustomStylusDataAdded = RealTimeStylusDataInterest.RTSDI_CustomStylusDataAdded;
pub const RTSDI_UpdateMapping = RealTimeStylusDataInterest.RTSDI_UpdateMapping;
pub const RTSDI_DefaultEvents = RealTimeStylusDataInterest.RTSDI_DefaultEvents;

pub const StylusInfo = extern struct {
    tcid: u32,
    cid: u32,
    bIsInvertedCursor: BOOL,
};

pub const StylusQueue = extern enum(i32) {
    SyncStylusQueue = 1,
    AsyncStylusQueueImmediate = 2,
    AsyncStylusQueue = 3,
};
pub const SyncStylusQueue = StylusQueue.SyncStylusQueue;
pub const AsyncStylusQueueImmediate = StylusQueue.AsyncStylusQueueImmediate;
pub const AsyncStylusQueue = StylusQueue.AsyncStylusQueue;

pub const RealTimeStylusLockType = extern enum(i32) {
    RTSLT_ObjLock = 1,
    RTSLT_SyncEventLock = 2,
    RTSLT_AsyncEventLock = 4,
    RTSLT_ExcludeCallback = 8,
    RTSLT_SyncObjLock = 11,
    RTSLT_AsyncObjLock = 13,
};
pub const RTSLT_ObjLock = RealTimeStylusLockType.RTSLT_ObjLock;
pub const RTSLT_SyncEventLock = RealTimeStylusLockType.RTSLT_SyncEventLock;
pub const RTSLT_AsyncEventLock = RealTimeStylusLockType.RTSLT_AsyncEventLock;
pub const RTSLT_ExcludeCallback = RealTimeStylusLockType.RTSLT_ExcludeCallback;
pub const RTSLT_SyncObjLock = RealTimeStylusLockType.RTSLT_SyncObjLock;
pub const RTSLT_AsyncObjLock = RealTimeStylusLockType.RTSLT_AsyncObjLock;

pub const GESTURE_DATA = extern struct {
    gestureId: i32,
    recoConfidence: i32,
    strokeCount: i32,
};

pub const DYNAMIC_RENDERER_CACHED_DATA = extern struct {
    strokeId: i32,
    dynamicRenderer: *IDynamicRenderer,
};

const IID_IRealTimeStylus_Value = @import("../zig.zig").Guid.initString("A8BB5D22-3144-4A7B-93CD-F34A16BE513A");
pub const IID_IRealTimeStylus = &IID_IRealTimeStylus_Value;
pub const IRealTimeStylus = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_Enabled: fn(
            self: *const IRealTimeStylus,
            pfEnable: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Enabled: fn(
            self: *const IRealTimeStylus,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_HWND: fn(
            self: *const IRealTimeStylus,
            phwnd: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_HWND: fn(
            self: *const IRealTimeStylus,
            hwnd: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_WindowInputRectangle: fn(
            self: *const IRealTimeStylus,
            prcWndInputRect: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_WindowInputRectangle: fn(
            self: *const IRealTimeStylus,
            prcWndInputRect: *const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStylusSyncPlugin: fn(
            self: *const IRealTimeStylus,
            iIndex: u32,
            piPlugin: ?*IStylusSyncPlugin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStylusSyncPlugin: fn(
            self: *const IRealTimeStylus,
            iIndex: u32,
            ppiPlugin: ?*?*IStylusSyncPlugin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllStylusSyncPlugins: fn(
            self: *const IRealTimeStylus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStylusSyncPlugin: fn(
            self: *const IRealTimeStylus,
            iIndex: u32,
            ppiPlugin: **IStylusSyncPlugin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStylusSyncPluginCount: fn(
            self: *const IRealTimeStylus,
            pcPlugins: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStylusAsyncPlugin: fn(
            self: *const IRealTimeStylus,
            iIndex: u32,
            piPlugin: ?*IStylusAsyncPlugin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStylusAsyncPlugin: fn(
            self: *const IRealTimeStylus,
            iIndex: u32,
            ppiPlugin: ?*?*IStylusAsyncPlugin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllStylusAsyncPlugins: fn(
            self: *const IRealTimeStylus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStylusAsyncPlugin: fn(
            self: *const IRealTimeStylus,
            iIndex: u32,
            ppiPlugin: **IStylusAsyncPlugin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStylusAsyncPluginCount: fn(
            self: *const IRealTimeStylus,
            pcPlugins: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ChildRealTimeStylusPlugin: fn(
            self: *const IRealTimeStylus,
            ppiRTS: **IRealTimeStylus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ChildRealTimeStylusPlugin: fn(
            self: *const IRealTimeStylus,
            piRTS: ?*IRealTimeStylus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCustomStylusDataToQueue: fn(
            self: *const IRealTimeStylus,
            sq: StylusQueue,
            pGuidId: *const Guid,
            cbData: u32,
            pbData: ?[*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearStylusQueues: fn(
            self: *const IRealTimeStylus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllTabletsMode: fn(
            self: *const IRealTimeStylus,
            fUseMouseForInput: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSingleTabletMode: fn(
            self: *const IRealTimeStylus,
            piTablet: ?*IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTablet: fn(
            self: *const IRealTimeStylus,
            ppiSingleTablet: **IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTabletContextIdFromTablet: fn(
            self: *const IRealTimeStylus,
            piTablet: ?*IInkTablet,
            ptcid: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTabletFromTabletContextId: fn(
            self: *const IRealTimeStylus,
            tcid: u32,
            ppiTablet: **IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllTabletContextIds: fn(
            self: *const IRealTimeStylus,
            pcTcidCount: *u32,
            ppTcids: ?[*]?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStyluses: fn(
            self: *const IRealTimeStylus,
            ppiInkCursors: **IInkCursors,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStylusForId: fn(
            self: *const IRealTimeStylus,
            sid: u32,
            ppiInkCursor: **IInkCursor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDesiredPacketDescription: fn(
            self: *const IRealTimeStylus,
            cProperties: u32,
            pPropertyGuids: [*]const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDesiredPacketDescription: fn(
            self: *const IRealTimeStylus,
            pcProperties: *u32,
            ppPropertyGuids: ?[*]?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPacketDescriptionData: fn(
            self: *const IRealTimeStylus,
            tcid: u32,
            pfInkToDeviceScaleX: ?*f32,
            pfInkToDeviceScaleY: ?*f32,
            pcPacketProperties: *u32,
            ppPacketProperties: ?[*]?*PACKET_PROPERTY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_get_Enabled(self: *const T, pfEnable: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).get_Enabled(@ptrCast(*const IRealTimeStylus, self), pfEnable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_put_Enabled(self: *const T, fEnable: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).put_Enabled(@ptrCast(*const IRealTimeStylus, self), fEnable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_get_HWND(self: *const T, phwnd: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).get_HWND(@ptrCast(*const IRealTimeStylus, self), phwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_put_HWND(self: *const T, hwnd: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).put_HWND(@ptrCast(*const IRealTimeStylus, self), hwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_get_WindowInputRectangle(self: *const T, prcWndInputRect: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).get_WindowInputRectangle(@ptrCast(*const IRealTimeStylus, self), prcWndInputRect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_put_WindowInputRectangle(self: *const T, prcWndInputRect: *const RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).put_WindowInputRectangle(@ptrCast(*const IRealTimeStylus, self), prcWndInputRect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_AddStylusSyncPlugin(self: *const T, iIndex: u32, piPlugin: ?*IStylusSyncPlugin) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).AddStylusSyncPlugin(@ptrCast(*const IRealTimeStylus, self), iIndex, piPlugin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_RemoveStylusSyncPlugin(self: *const T, iIndex: u32, ppiPlugin: ?*?*IStylusSyncPlugin) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).RemoveStylusSyncPlugin(@ptrCast(*const IRealTimeStylus, self), iIndex, ppiPlugin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_RemoveAllStylusSyncPlugins(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).RemoveAllStylusSyncPlugins(@ptrCast(*const IRealTimeStylus, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_GetStylusSyncPlugin(self: *const T, iIndex: u32, ppiPlugin: **IStylusSyncPlugin) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).GetStylusSyncPlugin(@ptrCast(*const IRealTimeStylus, self), iIndex, ppiPlugin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_GetStylusSyncPluginCount(self: *const T, pcPlugins: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).GetStylusSyncPluginCount(@ptrCast(*const IRealTimeStylus, self), pcPlugins);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_AddStylusAsyncPlugin(self: *const T, iIndex: u32, piPlugin: ?*IStylusAsyncPlugin) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).AddStylusAsyncPlugin(@ptrCast(*const IRealTimeStylus, self), iIndex, piPlugin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_RemoveStylusAsyncPlugin(self: *const T, iIndex: u32, ppiPlugin: ?*?*IStylusAsyncPlugin) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).RemoveStylusAsyncPlugin(@ptrCast(*const IRealTimeStylus, self), iIndex, ppiPlugin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_RemoveAllStylusAsyncPlugins(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).RemoveAllStylusAsyncPlugins(@ptrCast(*const IRealTimeStylus, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_GetStylusAsyncPlugin(self: *const T, iIndex: u32, ppiPlugin: **IStylusAsyncPlugin) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).GetStylusAsyncPlugin(@ptrCast(*const IRealTimeStylus, self), iIndex, ppiPlugin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_GetStylusAsyncPluginCount(self: *const T, pcPlugins: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).GetStylusAsyncPluginCount(@ptrCast(*const IRealTimeStylus, self), pcPlugins);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_get_ChildRealTimeStylusPlugin(self: *const T, ppiRTS: **IRealTimeStylus) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).get_ChildRealTimeStylusPlugin(@ptrCast(*const IRealTimeStylus, self), ppiRTS);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_putref_ChildRealTimeStylusPlugin(self: *const T, piRTS: ?*IRealTimeStylus) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).putref_ChildRealTimeStylusPlugin(@ptrCast(*const IRealTimeStylus, self), piRTS);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_AddCustomStylusDataToQueue(self: *const T, sq: StylusQueue, pGuidId: *const Guid, cbData: u32, pbData: ?[*:0]u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).AddCustomStylusDataToQueue(@ptrCast(*const IRealTimeStylus, self), sq, pGuidId, cbData, pbData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_ClearStylusQueues(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).ClearStylusQueues(@ptrCast(*const IRealTimeStylus, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_SetAllTabletsMode(self: *const T, fUseMouseForInput: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).SetAllTabletsMode(@ptrCast(*const IRealTimeStylus, self), fUseMouseForInput);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_SetSingleTabletMode(self: *const T, piTablet: ?*IInkTablet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).SetSingleTabletMode(@ptrCast(*const IRealTimeStylus, self), piTablet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_GetTablet(self: *const T, ppiSingleTablet: **IInkTablet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).GetTablet(@ptrCast(*const IRealTimeStylus, self), ppiSingleTablet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_GetTabletContextIdFromTablet(self: *const T, piTablet: ?*IInkTablet, ptcid: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).GetTabletContextIdFromTablet(@ptrCast(*const IRealTimeStylus, self), piTablet, ptcid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_GetTabletFromTabletContextId(self: *const T, tcid: u32, ppiTablet: **IInkTablet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).GetTabletFromTabletContextId(@ptrCast(*const IRealTimeStylus, self), tcid, ppiTablet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_GetAllTabletContextIds(self: *const T, pcTcidCount: *u32, ppTcids: ?[*]?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).GetAllTabletContextIds(@ptrCast(*const IRealTimeStylus, self), pcTcidCount, ppTcids);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_GetStyluses(self: *const T, ppiInkCursors: **IInkCursors) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).GetStyluses(@ptrCast(*const IRealTimeStylus, self), ppiInkCursors);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_GetStylusForId(self: *const T, sid: u32, ppiInkCursor: **IInkCursor) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).GetStylusForId(@ptrCast(*const IRealTimeStylus, self), sid, ppiInkCursor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_SetDesiredPacketDescription(self: *const T, cProperties: u32, pPropertyGuids: [*]const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).SetDesiredPacketDescription(@ptrCast(*const IRealTimeStylus, self), cProperties, pPropertyGuids);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_GetDesiredPacketDescription(self: *const T, pcProperties: *u32, ppPropertyGuids: ?[*]?*Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).GetDesiredPacketDescription(@ptrCast(*const IRealTimeStylus, self), pcProperties, ppPropertyGuids);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus_GetPacketDescriptionData(self: *const T, tcid: u32, pfInkToDeviceScaleX: ?*f32, pfInkToDeviceScaleY: ?*f32, pcPacketProperties: *u32, ppPacketProperties: ?[*]?*PACKET_PROPERTY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus.VTable, self.vtable).GetPacketDescriptionData(@ptrCast(*const IRealTimeStylus, self), tcid, pfInkToDeviceScaleX, pfInkToDeviceScaleY, pcPacketProperties, ppPacketProperties);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRealTimeStylus2_Value = @import("../zig.zig").Guid.initString("B5F2A6CD-3179-4A3E-B9C4-BB5865962BE2");
pub const IID_IRealTimeStylus2 = &IID_IRealTimeStylus2_Value;
pub const IRealTimeStylus2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_FlicksEnabled: fn(
            self: *const IRealTimeStylus2,
            pfEnable: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_FlicksEnabled: fn(
            self: *const IRealTimeStylus2,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus2_get_FlicksEnabled(self: *const T, pfEnable: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus2.VTable, self.vtable).get_FlicksEnabled(@ptrCast(*const IRealTimeStylus2, self), pfEnable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus2_put_FlicksEnabled(self: *const T, fEnable: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus2.VTable, self.vtable).put_FlicksEnabled(@ptrCast(*const IRealTimeStylus2, self), fEnable);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRealTimeStylus3_Value = @import("../zig.zig").Guid.initString("D70230A3-6986-4051-B57A-1CF69F4D9DB5");
pub const IID_IRealTimeStylus3 = &IID_IRealTimeStylus3_Value;
pub const IRealTimeStylus3 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_MultiTouchEnabled: fn(
            self: *const IRealTimeStylus3,
            pfEnable: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MultiTouchEnabled: fn(
            self: *const IRealTimeStylus3,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus3_get_MultiTouchEnabled(self: *const T, pfEnable: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus3.VTable, self.vtable).get_MultiTouchEnabled(@ptrCast(*const IRealTimeStylus3, self), pfEnable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylus3_put_MultiTouchEnabled(self: *const T, fEnable: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylus3.VTable, self.vtable).put_MultiTouchEnabled(@ptrCast(*const IRealTimeStylus3, self), fEnable);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRealTimeStylusSynchronization_Value = @import("../zig.zig").Guid.initString("AA87EAB8-AB4A-4CEA-B5CB-46D84C6A2509");
pub const IID_IRealTimeStylusSynchronization = &IID_IRealTimeStylusSynchronization_Value;
pub const IRealTimeStylusSynchronization = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AcquireLock: fn(
            self: *const IRealTimeStylusSynchronization,
            lock: RealTimeStylusLockType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseLock: fn(
            self: *const IRealTimeStylusSynchronization,
            lock: RealTimeStylusLockType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylusSynchronization_AcquireLock(self: *const T, lock: RealTimeStylusLockType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylusSynchronization.VTable, self.vtable).AcquireLock(@ptrCast(*const IRealTimeStylusSynchronization, self), lock);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRealTimeStylusSynchronization_ReleaseLock(self: *const T, lock: RealTimeStylusLockType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRealTimeStylusSynchronization.VTable, self.vtable).ReleaseLock(@ptrCast(*const IRealTimeStylusSynchronization, self), lock);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IStrokeBuilder_Value = @import("../zig.zig").Guid.initString("A5FD4E2D-C44B-4092-9177-260905EB672B");
pub const IID_IStrokeBuilder = &IID_IStrokeBuilder_Value;
pub const IStrokeBuilder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateStroke: fn(
            self: *const IStrokeBuilder,
            cPktBuffLength: u32,
            pPackets: [*]const i32,
            cPacketProperties: u32,
            pPacketProperties: [*]const PACKET_PROPERTY,
            fInkToDeviceScaleX: f32,
            fInkToDeviceScaleY: f32,
            ppIInkStroke: ?*?*IInkStrokeDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginStroke: fn(
            self: *const IStrokeBuilder,
            tcid: u32,
            sid: u32,
            pPacket: *const i32,
            cPacketProperties: u32,
            pPacketProperties: [*]PACKET_PROPERTY,
            fInkToDeviceScaleX: f32,
            fInkToDeviceScaleY: f32,
            ppIInkStroke: ?*?*IInkStrokeDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendPackets: fn(
            self: *const IStrokeBuilder,
            tcid: u32,
            sid: u32,
            cPktBuffLength: u32,
            pPackets: [*]const i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndStroke: fn(
            self: *const IStrokeBuilder,
            tcid: u32,
            sid: u32,
            ppIInkStroke: ?*?*IInkStrokeDisp,
            pDirtyRect: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Ink: fn(
            self: *const IStrokeBuilder,
            ppiInkObj: **IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Ink: fn(
            self: *const IStrokeBuilder,
            piInkObj: ?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStrokeBuilder_CreateStroke(self: *const T, cPktBuffLength: u32, pPackets: [*]const i32, cPacketProperties: u32, pPacketProperties: [*]const PACKET_PROPERTY, fInkToDeviceScaleX: f32, fInkToDeviceScaleY: f32, ppIInkStroke: ?*?*IInkStrokeDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStrokeBuilder.VTable, self.vtable).CreateStroke(@ptrCast(*const IStrokeBuilder, self), cPktBuffLength, pPackets, cPacketProperties, pPacketProperties, fInkToDeviceScaleX, fInkToDeviceScaleY, ppIInkStroke);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStrokeBuilder_BeginStroke(self: *const T, tcid: u32, sid: u32, pPacket: *const i32, cPacketProperties: u32, pPacketProperties: [*]PACKET_PROPERTY, fInkToDeviceScaleX: f32, fInkToDeviceScaleY: f32, ppIInkStroke: ?*?*IInkStrokeDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStrokeBuilder.VTable, self.vtable).BeginStroke(@ptrCast(*const IStrokeBuilder, self), tcid, sid, pPacket, cPacketProperties, pPacketProperties, fInkToDeviceScaleX, fInkToDeviceScaleY, ppIInkStroke);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStrokeBuilder_AppendPackets(self: *const T, tcid: u32, sid: u32, cPktBuffLength: u32, pPackets: [*]const i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStrokeBuilder.VTable, self.vtable).AppendPackets(@ptrCast(*const IStrokeBuilder, self), tcid, sid, cPktBuffLength, pPackets);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStrokeBuilder_EndStroke(self: *const T, tcid: u32, sid: u32, ppIInkStroke: ?*?*IInkStrokeDisp, pDirtyRect: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStrokeBuilder.VTable, self.vtable).EndStroke(@ptrCast(*const IStrokeBuilder, self), tcid, sid, ppIInkStroke, pDirtyRect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStrokeBuilder_get_Ink(self: *const T, ppiInkObj: **IInkDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStrokeBuilder.VTable, self.vtable).get_Ink(@ptrCast(*const IStrokeBuilder, self), ppiInkObj);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStrokeBuilder_putref_Ink(self: *const T, piInkObj: ?*IInkDisp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStrokeBuilder.VTable, self.vtable).putref_Ink(@ptrCast(*const IStrokeBuilder, self), piInkObj);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IStylusPlugin_Value = @import("../zig.zig").Guid.initString("A81436D8-4757-4FD1-A185-133F97C6C545");
pub const IID_IStylusPlugin = &IID_IStylusPlugin_Value;
pub const IStylusPlugin = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RealTimeStylusEnabled: fn(
            self: *const IStylusPlugin,
            piRtsSrc: ?*IRealTimeStylus,
            cTcidCount: u32,
            pTcids: [*]const u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RealTimeStylusDisabled: fn(
            self: *const IStylusPlugin,
            piRtsSrc: ?*IRealTimeStylus,
            cTcidCount: u32,
            pTcids: [*]const u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StylusInRange: fn(
            self: *const IStylusPlugin,
            piRtsSrc: ?*IRealTimeStylus,
            tcid: u32,
            sid: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StylusOutOfRange: fn(
            self: *const IStylusPlugin,
            piRtsSrc: ?*IRealTimeStylus,
            tcid: u32,
            sid: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StylusDown: fn(
            self: *const IStylusPlugin,
            piRtsSrc: ?*IRealTimeStylus,
            pStylusInfo: *const StylusInfo,
            cPropCountPerPkt: u32,
            pPacket: [*]i32,
            ppInOutPkt: ?*?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StylusUp: fn(
            self: *const IStylusPlugin,
            piRtsSrc: ?*IRealTimeStylus,
            pStylusInfo: *const StylusInfo,
            cPropCountPerPkt: u32,
            pPacket: [*]i32,
            ppInOutPkt: ?*?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StylusButtonDown: fn(
            self: *const IStylusPlugin,
            piRtsSrc: ?*IRealTimeStylus,
            sid: u32,
            pGuidStylusButton: *const Guid,
            pStylusPos: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StylusButtonUp: fn(
            self: *const IStylusPlugin,
            piRtsSrc: ?*IRealTimeStylus,
            sid: u32,
            pGuidStylusButton: *const Guid,
            pStylusPos: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InAirPackets: fn(
            self: *const IStylusPlugin,
            piRtsSrc: ?*IRealTimeStylus,
            pStylusInfo: *const StylusInfo,
            cPktCount: u32,
            cPktBuffLength: u32,
            pPackets: [*]i32,
            pcInOutPkts: *u32,
            ppInOutPkts: ?*?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Packets: fn(
            self: *const IStylusPlugin,
            piRtsSrc: ?*IRealTimeStylus,
            pStylusInfo: *const StylusInfo,
            cPktCount: u32,
            cPktBuffLength: u32,
            pPackets: [*]i32,
            pcInOutPkts: *u32,
            ppInOutPkts: ?*?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CustomStylusDataAdded: fn(
            self: *const IStylusPlugin,
            piRtsSrc: ?*IRealTimeStylus,
            pGuidId: *const Guid,
            cbData: u32,
            pbData: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SystemEvent: fn(
            self: *const IStylusPlugin,
            piRtsSrc: ?*IRealTimeStylus,
            tcid: u32,
            sid: u32,
            event: u16,
            eventdata: SYSTEM_EVENT_DATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TabletAdded: fn(
            self: *const IStylusPlugin,
            piRtsSrc: ?*IRealTimeStylus,
            piTablet: ?*IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TabletRemoved: fn(
            self: *const IStylusPlugin,
            piRtsSrc: ?*IRealTimeStylus,
            iTabletIndex: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Error: fn(
            self: *const IStylusPlugin,
            piRtsSrc: ?*IRealTimeStylus,
            piPlugin: ?*IStylusPlugin,
            dataInterest: RealTimeStylusDataInterest,
            hrErrorCode: HRESULT,
            lptrKey: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateMapping: fn(
            self: *const IStylusPlugin,
            piRtsSrc: ?*IRealTimeStylus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DataInterest: fn(
            self: *const IStylusPlugin,
            pDataInterest: *RealTimeStylusDataInterest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStylusPlugin_RealTimeStylusEnabled(self: *const T, piRtsSrc: ?*IRealTimeStylus, cTcidCount: u32, pTcids: [*]const u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStylusPlugin.VTable, self.vtable).RealTimeStylusEnabled(@ptrCast(*const IStylusPlugin, self), piRtsSrc, cTcidCount, pTcids);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStylusPlugin_RealTimeStylusDisabled(self: *const T, piRtsSrc: ?*IRealTimeStylus, cTcidCount: u32, pTcids: [*]const u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStylusPlugin.VTable, self.vtable).RealTimeStylusDisabled(@ptrCast(*const IStylusPlugin, self), piRtsSrc, cTcidCount, pTcids);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStylusPlugin_StylusInRange(self: *const T, piRtsSrc: ?*IRealTimeStylus, tcid: u32, sid: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStylusPlugin.VTable, self.vtable).StylusInRange(@ptrCast(*const IStylusPlugin, self), piRtsSrc, tcid, sid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStylusPlugin_StylusOutOfRange(self: *const T, piRtsSrc: ?*IRealTimeStylus, tcid: u32, sid: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStylusPlugin.VTable, self.vtable).StylusOutOfRange(@ptrCast(*const IStylusPlugin, self), piRtsSrc, tcid, sid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStylusPlugin_StylusDown(self: *const T, piRtsSrc: ?*IRealTimeStylus, pStylusInfo: *const StylusInfo, cPropCountPerPkt: u32, pPacket: [*]i32, ppInOutPkt: ?*?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStylusPlugin.VTable, self.vtable).StylusDown(@ptrCast(*const IStylusPlugin, self), piRtsSrc, pStylusInfo, cPropCountPerPkt, pPacket, ppInOutPkt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStylusPlugin_StylusUp(self: *const T, piRtsSrc: ?*IRealTimeStylus, pStylusInfo: *const StylusInfo, cPropCountPerPkt: u32, pPacket: [*]i32, ppInOutPkt: ?*?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStylusPlugin.VTable, self.vtable).StylusUp(@ptrCast(*const IStylusPlugin, self), piRtsSrc, pStylusInfo, cPropCountPerPkt, pPacket, ppInOutPkt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStylusPlugin_StylusButtonDown(self: *const T, piRtsSrc: ?*IRealTimeStylus, sid: u32, pGuidStylusButton: *const Guid, pStylusPos: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStylusPlugin.VTable, self.vtable).StylusButtonDown(@ptrCast(*const IStylusPlugin, self), piRtsSrc, sid, pGuidStylusButton, pStylusPos);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStylusPlugin_StylusButtonUp(self: *const T, piRtsSrc: ?*IRealTimeStylus, sid: u32, pGuidStylusButton: *const Guid, pStylusPos: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStylusPlugin.VTable, self.vtable).StylusButtonUp(@ptrCast(*const IStylusPlugin, self), piRtsSrc, sid, pGuidStylusButton, pStylusPos);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStylusPlugin_InAirPackets(self: *const T, piRtsSrc: ?*IRealTimeStylus, pStylusInfo: *const StylusInfo, cPktCount: u32, cPktBuffLength: u32, pPackets: [*]i32, pcInOutPkts: *u32, ppInOutPkts: ?*?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStylusPlugin.VTable, self.vtable).InAirPackets(@ptrCast(*const IStylusPlugin, self), piRtsSrc, pStylusInfo, cPktCount, cPktBuffLength, pPackets, pcInOutPkts, ppInOutPkts);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStylusPlugin_Packets(self: *const T, piRtsSrc: ?*IRealTimeStylus, pStylusInfo: *const StylusInfo, cPktCount: u32, cPktBuffLength: u32, pPackets: [*]i32, pcInOutPkts: *u32, ppInOutPkts: ?*?*i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStylusPlugin.VTable, self.vtable).Packets(@ptrCast(*const IStylusPlugin, self), piRtsSrc, pStylusInfo, cPktCount, cPktBuffLength, pPackets, pcInOutPkts, ppInOutPkts);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStylusPlugin_CustomStylusDataAdded(self: *const T, piRtsSrc: ?*IRealTimeStylus, pGuidId: *const Guid, cbData: u32, pbData: ?[*:0]const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStylusPlugin.VTable, self.vtable).CustomStylusDataAdded(@ptrCast(*const IStylusPlugin, self), piRtsSrc, pGuidId, cbData, pbData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStylusPlugin_SystemEvent(self: *const T, piRtsSrc: ?*IRealTimeStylus, tcid: u32, sid: u32, event: u16, eventdata: SYSTEM_EVENT_DATA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStylusPlugin.VTable, self.vtable).SystemEvent(@ptrCast(*const IStylusPlugin, self), piRtsSrc, tcid, sid, event, eventdata);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStylusPlugin_TabletAdded(self: *const T, piRtsSrc: ?*IRealTimeStylus, piTablet: ?*IInkTablet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStylusPlugin.VTable, self.vtable).TabletAdded(@ptrCast(*const IStylusPlugin, self), piRtsSrc, piTablet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStylusPlugin_TabletRemoved(self: *const T, piRtsSrc: ?*IRealTimeStylus, iTabletIndex: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStylusPlugin.VTable, self.vtable).TabletRemoved(@ptrCast(*const IStylusPlugin, self), piRtsSrc, iTabletIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStylusPlugin_Error(self: *const T, piRtsSrc: ?*IRealTimeStylus, piPlugin: ?*IStylusPlugin, dataInterest: RealTimeStylusDataInterest, hrErrorCode: HRESULT, lptrKey: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStylusPlugin.VTable, self.vtable).Error(@ptrCast(*const IStylusPlugin, self), piRtsSrc, piPlugin, dataInterest, hrErrorCode, lptrKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStylusPlugin_UpdateMapping(self: *const T, piRtsSrc: ?*IRealTimeStylus) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStylusPlugin.VTable, self.vtable).UpdateMapping(@ptrCast(*const IStylusPlugin, self), piRtsSrc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStylusPlugin_DataInterest(self: *const T, pDataInterest: *RealTimeStylusDataInterest) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStylusPlugin.VTable, self.vtable).DataInterest(@ptrCast(*const IStylusPlugin, self), pDataInterest);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IStylusSyncPlugin_Value = @import("../zig.zig").Guid.initString("A157B174-482F-4D71-A3F6-3A41DDD11BE9");
pub const IID_IStylusSyncPlugin = &IID_IStylusSyncPlugin_Value;
pub const IStylusSyncPlugin = extern struct {
    pub const VTable = extern struct {
        base: IStylusPlugin.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IStylusPlugin.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IStylusAsyncPlugin_Value = @import("../zig.zig").Guid.initString("A7CCA85A-31BC-4CD2-AADC-3289A3AF11C8");
pub const IID_IStylusAsyncPlugin = &IID_IStylusAsyncPlugin_Value;
pub const IStylusAsyncPlugin = extern struct {
    pub const VTable = extern struct {
        base: IStylusPlugin.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IStylusPlugin.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDynamicRenderer_Value = @import("../zig.zig").Guid.initString("A079468E-7165-46F9-B7AF-98AD01A93009");
pub const IID_IDynamicRenderer = &IID_IDynamicRenderer_Value;
pub const IDynamicRenderer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_Enabled: fn(
            self: *const IDynamicRenderer,
            bEnabled: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Enabled: fn(
            self: *const IDynamicRenderer,
            bEnabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_HWND: fn(
            self: *const IDynamicRenderer,
            hwnd: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_HWND: fn(
            self: *const IDynamicRenderer,
            hwnd: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ClipRectangle: fn(
            self: *const IDynamicRenderer,
            prcClipRect: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ClipRectangle: fn(
            self: *const IDynamicRenderer,
            prcClipRect: *const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ClipRegion: fn(
            self: *const IDynamicRenderer,
            phClipRgn: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ClipRegion: fn(
            self: *const IDynamicRenderer,
            hClipRgn: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DrawingAttributes: fn(
            self: *const IDynamicRenderer,
            ppiDA: **IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_DrawingAttributes: fn(
            self: *const IDynamicRenderer,
            piDA: ?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DataCacheEnabled: fn(
            self: *const IDynamicRenderer,
            pfCacheData: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DataCacheEnabled: fn(
            self: *const IDynamicRenderer,
            fCacheData: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseCachedData: fn(
            self: *const IDynamicRenderer,
            strokeId: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const IDynamicRenderer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Draw: fn(
            self: *const IDynamicRenderer,
            hDC: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDynamicRenderer_get_Enabled(self: *const T, bEnabled: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDynamicRenderer.VTable, self.vtable).get_Enabled(@ptrCast(*const IDynamicRenderer, self), bEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDynamicRenderer_put_Enabled(self: *const T, bEnabled: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDynamicRenderer.VTable, self.vtable).put_Enabled(@ptrCast(*const IDynamicRenderer, self), bEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDynamicRenderer_get_HWND(self: *const T, hwnd: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDynamicRenderer.VTable, self.vtable).get_HWND(@ptrCast(*const IDynamicRenderer, self), hwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDynamicRenderer_put_HWND(self: *const T, hwnd: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDynamicRenderer.VTable, self.vtable).put_HWND(@ptrCast(*const IDynamicRenderer, self), hwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDynamicRenderer_get_ClipRectangle(self: *const T, prcClipRect: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDynamicRenderer.VTable, self.vtable).get_ClipRectangle(@ptrCast(*const IDynamicRenderer, self), prcClipRect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDynamicRenderer_put_ClipRectangle(self: *const T, prcClipRect: *const RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDynamicRenderer.VTable, self.vtable).put_ClipRectangle(@ptrCast(*const IDynamicRenderer, self), prcClipRect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDynamicRenderer_get_ClipRegion(self: *const T, phClipRgn: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDynamicRenderer.VTable, self.vtable).get_ClipRegion(@ptrCast(*const IDynamicRenderer, self), phClipRgn);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDynamicRenderer_put_ClipRegion(self: *const T, hClipRgn: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDynamicRenderer.VTable, self.vtable).put_ClipRegion(@ptrCast(*const IDynamicRenderer, self), hClipRgn);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDynamicRenderer_get_DrawingAttributes(self: *const T, ppiDA: **IInkDrawingAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDynamicRenderer.VTable, self.vtable).get_DrawingAttributes(@ptrCast(*const IDynamicRenderer, self), ppiDA);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDynamicRenderer_putref_DrawingAttributes(self: *const T, piDA: ?*IInkDrawingAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDynamicRenderer.VTable, self.vtable).putref_DrawingAttributes(@ptrCast(*const IDynamicRenderer, self), piDA);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDynamicRenderer_get_DataCacheEnabled(self: *const T, pfCacheData: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDynamicRenderer.VTable, self.vtable).get_DataCacheEnabled(@ptrCast(*const IDynamicRenderer, self), pfCacheData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDynamicRenderer_put_DataCacheEnabled(self: *const T, fCacheData: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDynamicRenderer.VTable, self.vtable).put_DataCacheEnabled(@ptrCast(*const IDynamicRenderer, self), fCacheData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDynamicRenderer_ReleaseCachedData(self: *const T, strokeId: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDynamicRenderer.VTable, self.vtable).ReleaseCachedData(@ptrCast(*const IDynamicRenderer, self), strokeId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDynamicRenderer_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDynamicRenderer.VTable, self.vtable).Refresh(@ptrCast(*const IDynamicRenderer, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDynamicRenderer_Draw(self: *const T, hDC: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDynamicRenderer.VTable, self.vtable).Draw(@ptrCast(*const IDynamicRenderer, self), hDC);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IGestureRecognizer_Value = @import("../zig.zig").Guid.initString("AE9EF86B-7054-45E3-AE22-3174DC8811B7");
pub const IID_IGestureRecognizer = &IID_IGestureRecognizer_Value;
pub const IGestureRecognizer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_Enabled: fn(
            self: *const IGestureRecognizer,
            pfEnabled: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Enabled: fn(
            self: *const IGestureRecognizer,
            fEnabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MaxStrokeCount: fn(
            self: *const IGestureRecognizer,
            pcStrokes: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MaxStrokeCount: fn(
            self: *const IGestureRecognizer,
            cStrokes: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableGestures: fn(
            self: *const IGestureRecognizer,
            cGestures: u32,
            pGestures: [*]const i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IGestureRecognizer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGestureRecognizer_get_Enabled(self: *const T, pfEnabled: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGestureRecognizer.VTable, self.vtable).get_Enabled(@ptrCast(*const IGestureRecognizer, self), pfEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGestureRecognizer_put_Enabled(self: *const T, fEnabled: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGestureRecognizer.VTable, self.vtable).put_Enabled(@ptrCast(*const IGestureRecognizer, self), fEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGestureRecognizer_get_MaxStrokeCount(self: *const T, pcStrokes: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGestureRecognizer.VTable, self.vtable).get_MaxStrokeCount(@ptrCast(*const IGestureRecognizer, self), pcStrokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGestureRecognizer_put_MaxStrokeCount(self: *const T, cStrokes: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGestureRecognizer.VTable, self.vtable).put_MaxStrokeCount(@ptrCast(*const IGestureRecognizer, self), cStrokes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGestureRecognizer_EnableGestures(self: *const T, cGestures: u32, pGestures: [*]const i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGestureRecognizer.VTable, self.vtable).EnableGestures(@ptrCast(*const IGestureRecognizer, self), cGestures, pGestures);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGestureRecognizer_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGestureRecognizer.VTable, self.vtable).Reset(@ptrCast(*const IGestureRecognizer, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const RECO_GUIDE = extern struct {
    xOrigin: i32,
    yOrigin: i32,
    cxBox: i32,
    cyBox: i32,
    cxBase: i32,
    cyBase: i32,
    cHorzBox: i32,
    cVertBox: i32,
    cyMid: i32,
};

pub const RECO_ATTRS = extern struct {
    dwRecoCapabilityFlags: u32,
    awcVendorName: [32]u16,
    awcFriendlyName: [64]u16,
    awLanguageId: [64]u16,
};

pub const RECO_RANGE = extern struct {
    iwcBegin: u32,
    cCount: u32,
};

pub const LINE_SEGMENT = extern struct {
    PtA: POINT,
    PtB: POINT,
};

pub const LATTICE_METRICS = extern struct {
    lsBaseline: LINE_SEGMENT,
    iMidlineOffset: i16,
};

pub const LINE_METRICS = extern enum(i32) {
    LM_BASELINE = 0,
    LM_MIDLINE = 1,
    LM_ASCENDER = 2,
    LM_DESCENDER = 3,
};
pub const LM_BASELINE = LINE_METRICS.LM_BASELINE;
pub const LM_MIDLINE = LINE_METRICS.LM_MIDLINE;
pub const LM_ASCENDER = LINE_METRICS.LM_ASCENDER;
pub const LM_DESCENDER = LINE_METRICS.LM_DESCENDER;

pub const CONFIDENCE_LEVEL = extern enum(i32) {
    CFL_STRONG = 0,
    CFL_INTERMEDIATE = 1,
    CFL_POOR = 2,
};
pub const CFL_STRONG = CONFIDENCE_LEVEL.CFL_STRONG;
pub const CFL_INTERMEDIATE = CONFIDENCE_LEVEL.CFL_INTERMEDIATE;
pub const CFL_POOR = CONFIDENCE_LEVEL.CFL_POOR;

pub const ALT_BREAKS = extern enum(i32) {
    SAME = 0,
    UNIQUE = 1,
    FULL = 2,
};
pub const ALT_BREAKS_SAME = ALT_BREAKS.SAME;
pub const ALT_BREAKS_UNIQUE = ALT_BREAKS.UNIQUE;
pub const ALT_BREAKS_FULL = ALT_BREAKS.FULL;

pub const enumRECO_TYPE = extern enum(i32) {
    RECO_TYPE_WSTRING = 0,
    RECO_TYPE_WCHAR = 1,
};
pub const RECO_TYPE_WSTRING = enumRECO_TYPE.RECO_TYPE_WSTRING;
pub const RECO_TYPE_WCHAR = enumRECO_TYPE.RECO_TYPE_WCHAR;

pub const RECO_LATTICE_PROPERTY = extern struct {
    guidProperty: Guid,
    cbPropertyValue: u16,
    pPropertyValue: *u8,
};

pub const RECO_LATTICE_PROPERTIES = extern struct {
    cProperties: u32,
    apProps: **RECO_LATTICE_PROPERTY,
};

pub const RECO_LATTICE_ELEMENT = extern struct {
    score: i32,
    type: u16,
    pData: *u8,
    ulNextColumn: u32,
    ulStrokeNumber: u32,
    epProp: RECO_LATTICE_PROPERTIES,
};

pub const RECO_LATTICE_COLUMN = extern struct {
    key: u32,
    cpProp: RECO_LATTICE_PROPERTIES,
    cStrokes: u32,
    pStrokes: *u32,
    cLatticeElements: u32,
    pLatticeElements: *RECO_LATTICE_ELEMENT,
};

pub const RECO_LATTICE = extern struct {
    ulColumnCount: u32,
    pLatticeColumns: *RECO_LATTICE_COLUMN,
    ulPropertyCount: u32,
    pGuidProperties: *Guid,
    ulBestResultColumnCount: u32,
    pulBestResultColumns: *u32,
    pulBestResultIndexes: *u32,
};

pub const CHARACTER_RANGE = extern struct {
    wcLow: u16,
    cChars: u16,
};

pub const HRECOALT__ = extern struct {
    unused: i32,
};

pub const HRECOCONTEXT__ = extern struct {
    unused: i32,
};

pub const HRECOGNIZER__ = extern struct {
    unused: i32,
};

pub const HRECOLATTICE__ = extern struct {
    unused: i32,
};

pub const HRECOWORDLIST__ = extern struct {
    unused: i32,
};

const CLSID_TipAutoCompleteClient_Value = @import("../zig.zig").Guid.initString("807C1E6C-1D00-453F-B920-B61BB7CDD997");
pub const CLSID_TipAutoCompleteClient = &CLSID_TipAutoCompleteClient_Value;

const IID_ITipAutoCompleteProvider_Value = @import("../zig.zig").Guid.initString("7C6CF46D-8404-46B9-AD33-F5B6036D4007");
pub const IID_ITipAutoCompleteProvider = &IID_ITipAutoCompleteProvider_Value;
pub const ITipAutoCompleteProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UpdatePendingText: fn(
            self: *const ITipAutoCompleteProvider,
            bstrPendingText: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Show: fn(
            self: *const ITipAutoCompleteProvider,
            fShow: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITipAutoCompleteProvider_UpdatePendingText(self: *const T, bstrPendingText: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITipAutoCompleteProvider.VTable, self.vtable).UpdatePendingText(@ptrCast(*const ITipAutoCompleteProvider, self), bstrPendingText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITipAutoCompleteProvider_Show(self: *const T, fShow: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITipAutoCompleteProvider.VTable, self.vtable).Show(@ptrCast(*const ITipAutoCompleteProvider, self), fShow);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITipAutoCompleteClient_Value = @import("../zig.zig").Guid.initString("5E078E03-8265-4BBE-9487-D242EDBEF910");
pub const IID_ITipAutoCompleteClient = &IID_ITipAutoCompleteClient_Value;
pub const ITipAutoCompleteClient = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AdviseProvider: fn(
            self: *const ITipAutoCompleteClient,
            hWndField: HWND,
            pIProvider: ?*ITipAutoCompleteProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnadviseProvider: fn(
            self: *const ITipAutoCompleteClient,
            hWndField: HWND,
            pIProvider: ?*ITipAutoCompleteProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UserSelection: fn(
            self: *const ITipAutoCompleteClient,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreferredRects: fn(
            self: *const ITipAutoCompleteClient,
            prcACList: *RECT,
            prcField: *RECT,
            prcModifiedACList: *RECT,
            pfShownAboveTip: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestShowUI: fn(
            self: *const ITipAutoCompleteClient,
            hWndList: HWND,
            pfAllowShowing: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITipAutoCompleteClient_AdviseProvider(self: *const T, hWndField: HWND, pIProvider: ?*ITipAutoCompleteProvider) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITipAutoCompleteClient.VTable, self.vtable).AdviseProvider(@ptrCast(*const ITipAutoCompleteClient, self), hWndField, pIProvider);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITipAutoCompleteClient_UnadviseProvider(self: *const T, hWndField: HWND, pIProvider: ?*ITipAutoCompleteProvider) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITipAutoCompleteClient.VTable, self.vtable).UnadviseProvider(@ptrCast(*const ITipAutoCompleteClient, self), hWndField, pIProvider);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITipAutoCompleteClient_UserSelection(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITipAutoCompleteClient.VTable, self.vtable).UserSelection(@ptrCast(*const ITipAutoCompleteClient, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITipAutoCompleteClient_PreferredRects(self: *const T, prcACList: *RECT, prcField: *RECT, prcModifiedACList: *RECT, pfShownAboveTip: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITipAutoCompleteClient.VTable, self.vtable).PreferredRects(@ptrCast(*const ITipAutoCompleteClient, self), prcACList, prcField, prcModifiedACList, pfShownAboveTip);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITipAutoCompleteClient_RequestShowUI(self: *const T, hWndList: HWND, pfAllowShowing: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITipAutoCompleteClient.VTable, self.vtable).RequestShowUI(@ptrCast(*const ITipAutoCompleteClient, self), hWndList, pfAllowShowing);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (27)
//--------------------------------------------------------------------------------
pub extern "inkobjcore" fn CreateRecognizer(
    pCLSID: *Guid,
    phrec: **HRECOGNIZER__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn DestroyRecognizer(
    hrec: *HRECOGNIZER__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn GetRecoAttributes(
    hrec: *HRECOGNIZER__,
    pRecoAttrs: *RECO_ATTRS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn CreateContext(
    hrec: *HRECOGNIZER__,
    phrc: **HRECOCONTEXT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn DestroyContext(
    hrc: *HRECOCONTEXT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn GetResultPropertyList(
    hrec: *HRECOGNIZER__,
    pPropertyCount: *u32,
    pPropertyGuid: *Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn GetUnicodeRanges(
    hrec: *HRECOGNIZER__,
    pcRanges: *u32,
    pcr: *CHARACTER_RANGE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn AddStroke(
    hrc: *HRECOCONTEXT__,
    pPacketDesc: *const PACKET_DESCRIPTION,
    cbPacket: u32,
    pPacket: *const u8,
    pXForm: *const XFORM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn GetBestResultString(
    hrc: *HRECOCONTEXT__,
    pcSize: *u32,
    pwcBestResult: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn SetGuide(
    hrc: *HRECOCONTEXT__,
    pGuide: *const RECO_GUIDE,
    iIndex: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn AdviseInkChange(
    hrc: *HRECOCONTEXT__,
    bNewStroke: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn EndInkInput(
    hrc: *HRECOCONTEXT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn Process(
    hrc: *HRECOCONTEXT__,
    pbPartialProcessing: *BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn SetFactoid(
    hrc: *HRECOCONTEXT__,
    cwcFactoid: u32,
    pwcFactoid: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn SetFlags(
    hrc: *HRECOCONTEXT__,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn GetLatticePtr(
    hrc: *HRECOCONTEXT__,
    ppLattice: **RECO_LATTICE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn SetTextContext(
    hrc: *HRECOCONTEXT__,
    cwcBefore: u32,
    pwcBefore: [*:0]const u16,
    cwcAfter: u32,
    pwcAfter: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn SetEnabledUnicodeRanges(
    hrc: *HRECOCONTEXT__,
    cRanges: u32,
    pcr: *CHARACTER_RANGE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn IsStringSupported(
    hrc: *HRECOCONTEXT__,
    wcString: u32,
    pwcString: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn SetWordList(
    hrc: *HRECOCONTEXT__,
    hwl: *HRECOWORDLIST__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn GetRightSeparator(
    hrc: *HRECOCONTEXT__,
    pcSize: *u32,
    pwcRightSeparator: [*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn GetLeftSeparator(
    hrc: *HRECOCONTEXT__,
    pcSize: *u32,
    pwcLeftSeparator: [*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn DestroyWordList(
    hwl: *HRECOWORDLIST__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn AddWordsToWordList(
    hwl: *HRECOWORDLIST__,
    pwcWords: PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn MakeWordList(
    hrec: *HRECOGNIZER__,
    pBuffer: PWSTR,
    phwl: **HRECOWORDLIST__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn GetAllRecognizers(
    recognizerClsids: **Guid,
    count: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "inkobjcore" fn LoadCachedAttributes(
    clsid: Guid,
    pRecoAttributes: *RECO_ATTRS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (17)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const IDispatch = @import("automation.zig").IDispatch;
const SAFEARRAY = @import("automation.zig").SAFEARRAY;
const PWSTR = @import("system_services.zig").PWSTR;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const BSTR = @import("automation.zig").BSTR;
const RECT = @import("display_devices.zig").RECT;
const NMHDR = @import("controls.zig").NMHDR;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const XFORM = @import("gdi.zig").XFORM;
const VARIANT = @import("automation.zig").VARIANT;
const IDataObject = @import("com.zig").IDataObject;
const IFontDisp = @import("com.zig").IFontDisp;
const POINT = @import("display_devices.zig").POINT;
const IPictureDisp = @import("com.zig").IPictureDisp;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = PfnRecoCallback;

    const constant_export_count = 31;
    const type_export_count = 212;
    const enum_value_export_count = 831;
    const com_iface_id_export_count = 69;
    const com_class_id_export_count = 28;
    const func_export_count = 27;
    const unicode_alias_count = 0;
    const import_count = 17;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (3)
//--------------------------------------------------------------------------------
pub const MAX_MODULE_NAME32 = @as(u32, 255);
pub const HF32_DEFAULT = @as(u32, 1);
pub const HF32_SHARED = @as(u32, 2);

//--------------------------------------------------------------------------------
// Section: Types (9)
//--------------------------------------------------------------------------------
// TODO: This Enum is marked as [Flags], what do I do with this?
pub const CreateToolhelp32Snapshot_dwFlags = extern enum(u32) {
    INHERIT = 2147483648,
    SNAPALL = 15,
    SNAPHEAPLIST = 1,
    SNAPMODULE = 8,
    SNAPMODULE32 = 16,
    SNAPPROCESS = 2,
    SNAPTHREAD = 4,
    _,
};
pub const TH32CS_INHERIT = CreateToolhelp32Snapshot_dwFlags.INHERIT;
pub const TH32CS_SNAPALL = CreateToolhelp32Snapshot_dwFlags.SNAPALL;
pub const TH32CS_SNAPHEAPLIST = CreateToolhelp32Snapshot_dwFlags.SNAPHEAPLIST;
pub const TH32CS_SNAPMODULE = CreateToolhelp32Snapshot_dwFlags.SNAPMODULE;
pub const TH32CS_SNAPMODULE32 = CreateToolhelp32Snapshot_dwFlags.SNAPMODULE32;
pub const TH32CS_SNAPPROCESS = CreateToolhelp32Snapshot_dwFlags.SNAPPROCESS;
pub const TH32CS_SNAPTHREAD = CreateToolhelp32Snapshot_dwFlags.SNAPTHREAD;

pub const HEAPENTRY32_dwFlags = extern enum(u32) {
    FIXED = 1,
    FREE = 2,
    MOVEABLE = 4,
};
pub const LF32_FIXED = HEAPENTRY32_dwFlags.FIXED;
pub const LF32_FREE = HEAPENTRY32_dwFlags.FREE;
pub const LF32_MOVEABLE = HEAPENTRY32_dwFlags.MOVEABLE;

pub const HEAPLIST32 = extern struct {
    dwSize: ?*c_void,
    th32ProcessID: u32,
    th32HeapID: ?*c_void,
    dwFlags: u32,
};

pub const HEAPENTRY32 = extern struct {
    dwSize: ?*c_void,
    hHandle: HANDLE,
    dwAddress: ?*c_void,
    dwBlockSize: ?*c_void,
    dwFlags: HEAPENTRY32_dwFlags,
    dwLockCount: u32,
    dwResvd: u32,
    th32ProcessID: u32,
    th32HeapID: ?*c_void,
};

pub const PROCESSENTRY32W = extern struct {
    dwSize: u32,
    cntUsage: u32,
    th32ProcessID: u32,
    th32DefaultHeapID: ?*c_void,
    th32ModuleID: u32,
    cntThreads: u32,
    th32ParentProcessID: u32,
    pcPriClassBase: i32,
    dwFlags: u32,
    szExeFile: [260]u16,
};

pub const PROCESSENTRY32 = extern struct {
    dwSize: u32,
    cntUsage: u32,
    th32ProcessID: u32,
    th32DefaultHeapID: ?*c_void,
    th32ModuleID: u32,
    cntThreads: u32,
    th32ParentProcessID: u32,
    pcPriClassBase: i32,
    dwFlags: u32,
    szExeFile: [260]i8,
};

pub const THREADENTRY32 = extern struct {
    dwSize: u32,
    cntUsage: u32,
    th32ThreadID: u32,
    th32OwnerProcessID: u32,
    tpBasePri: i32,
    tpDeltaPri: i32,
    dwFlags: u32,
};

pub const MODULEENTRY32W = extern struct {
    dwSize: u32,
    th32ModuleID: u32,
    th32ProcessID: u32,
    GlblcntUsage: u32,
    ProccntUsage: u32,
    modBaseAddr: *u8,
    modBaseSize: u32,
    hModule: ?*c_void,
    szModule: [256]u16,
    szExePath: [260]u16,
};

pub const MODULEENTRY32 = extern struct {
    dwSize: u32,
    th32ModuleID: u32,
    th32ProcessID: u32,
    GlblcntUsage: u32,
    ProccntUsage: u32,
    modBaseAddr: *u8,
    modBaseSize: u32,
    hModule: ?*c_void,
    szModule: [256]i8,
    szExePath: [260]i8,
};


//--------------------------------------------------------------------------------
// Section: Functions (16)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn CreateToolhelp32Snapshot(
    dwFlags: CreateToolhelp32Snapshot_dwFlags,
    th32ProcessID: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn Heap32ListFirst(
    hSnapshot: HANDLE,
    lphl: *HEAPLIST32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn Heap32ListNext(
    hSnapshot: HANDLE,
    lphl: *HEAPLIST32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn Heap32First(
    lphe: *HEAPENTRY32,
    th32ProcessID: u32,
    th32HeapID: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn Heap32Next(
    lphe: *HEAPENTRY32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn Toolhelp32ReadProcessMemory(
    th32ProcessID: u32,
    lpBaseAddress: *const c_void,
    lpBuffer: *c_void,
    cbRead: ?*c_void,
    lpNumberOfBytesRead: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn Process32FirstW(
    hSnapshot: HANDLE,
    lppe: *PROCESSENTRY32W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn Process32NextW(
    hSnapshot: HANDLE,
    lppe: *PROCESSENTRY32W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn Process32First(
    hSnapshot: HANDLE,
    lppe: *PROCESSENTRY32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn Process32Next(
    hSnapshot: HANDLE,
    lppe: *PROCESSENTRY32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn Thread32First(
    hSnapshot: HANDLE,
    lpte: *THREADENTRY32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn Thread32Next(
    hSnapshot: HANDLE,
    lpte: *THREADENTRY32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn Module32FirstW(
    hSnapshot: HANDLE,
    lpme: *MODULEENTRY32W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn Module32NextW(
    hSnapshot: HANDLE,
    lpme: *MODULEENTRY32W,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn Module32First(
    hSnapshot: HANDLE,
    lpme: *MODULEENTRY32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn Module32Next(
    hSnapshot: HANDLE,
    lpme: *MODULEENTRY32,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (2)
//--------------------------------------------------------------------------------
const HANDLE = @import("system_services.zig").HANDLE;
const BOOL = @import("system_services.zig").BOOL;

test {
    const constant_export_count = 3;
    const type_export_count = 9;
    const enum_value_export_count = 10;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 16;
    const unicode_alias_count = 0;
    const import_count = 2;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

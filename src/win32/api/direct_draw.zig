//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (428)
//--------------------------------------------------------------------------------
pub const DIRECTDRAW_VERSION : u32 = 1792;
pub const CLSID_DirectDraw = @import("../zig.zig").Guid.initString("d7b70ee0-4340-11cf-b063-0020afc2cd35");
pub const CLSID_DirectDraw7 = @import("../zig.zig").Guid.initString("3c305196-50db-11d3-9cfe-00c04fd930c5");
pub const CLSID_DirectDrawClipper = @import("../zig.zig").Guid.initString("593817a0-7db3-11cf-a2de-00aa00b93356");
pub const DDENUM_ATTACHEDSECONDARYDEVICES : i32 = 1;
pub const DDENUM_DETACHEDSECONDARYDEVICES : i32 = 2;
pub const DDENUM_NONDISPLAYDEVICES : i32 = 4;
pub const DDCREATE_HARDWAREONLY : i32 = 1;
pub const DDCREATE_EMULATIONONLY : i32 = 2;
pub const MAX_DDDEVICEID_STRING : u32 = 512;
pub const DDGDI_GETHOSTIDENTIFIER : i32 = 1;
pub const DDSD_CAPS : i32 = 1;
pub const DDSD_HEIGHT : i32 = 2;
pub const DDSD_WIDTH : i32 = 4;
pub const DDSD_PITCH : i32 = 8;
pub const DDSD_BACKBUFFERCOUNT : i32 = 32;
pub const DDSD_ZBUFFERBITDEPTH : i32 = 64;
pub const DDSD_ALPHABITDEPTH : i32 = 128;
pub const DDSD_LPSURFACE : i32 = 2048;
pub const DDSD_PIXELFORMAT : i32 = 4096;
pub const DDSD_CKDESTOVERLAY : i32 = 8192;
pub const DDSD_CKDESTBLT : i32 = 16384;
pub const DDSD_CKSRCOVERLAY : i32 = 32768;
pub const DDSD_CKSRCBLT : i32 = 65536;
pub const DDSD_MIPMAPCOUNT : i32 = 131072;
pub const DDSD_REFRESHRATE : i32 = 262144;
pub const DDSD_LINEARSIZE : i32 = 524288;
pub const DDSD_TEXTURESTAGE : i32 = 1048576;
pub const DDSD_FVF : i32 = 2097152;
pub const DDSD_SRCVBHANDLE : i32 = 4194304;
pub const DDSD_DEPTH : i32 = 8388608;
pub const DDSD_ALL : i32 = 16775662;
pub const DDOSD_GUID : i32 = 1;
pub const DDOSD_COMPRESSION_RATIO : i32 = 2;
pub const DDOSD_SCAPS : i32 = 4;
pub const DDOSD_OSCAPS : i32 = 8;
pub const DDOSD_ALL : i32 = 15;
pub const DDOSDCAPS_OPTCOMPRESSED : i32 = 1;
pub const DDOSDCAPS_OPTREORDERED : i32 = 2;
pub const DDOSDCAPS_MONOLITHICMIPMAP : i32 = 4;
pub const DDOSDCAPS_VALIDSCAPS : i32 = 805324800;
pub const DDOSDCAPS_VALIDOSCAPS : i32 = 7;
pub const DDCOLOR_BRIGHTNESS : i32 = 1;
pub const DDCOLOR_CONTRAST : i32 = 2;
pub const DDCOLOR_HUE : i32 = 4;
pub const DDCOLOR_SATURATION : i32 = 8;
pub const DDCOLOR_SHARPNESS : i32 = 16;
pub const DDCOLOR_GAMMA : i32 = 32;
pub const DDCOLOR_COLORENABLE : i32 = 64;
pub const DDSCAPS_RESERVED1 : i32 = 1;
pub const DDSCAPS_ALPHA : i32 = 2;
pub const DDSCAPS_BACKBUFFER : i32 = 4;
pub const DDSCAPS_COMPLEX : i32 = 8;
pub const DDSCAPS_FLIP : i32 = 16;
pub const DDSCAPS_FRONTBUFFER : i32 = 32;
pub const DDSCAPS_OFFSCREENPLAIN : i32 = 64;
pub const DDSCAPS_OVERLAY : i32 = 128;
pub const DDSCAPS_PALETTE : i32 = 256;
pub const DDSCAPS_PRIMARYSURFACE : i32 = 512;
pub const DDSCAPS_RESERVED3 : i32 = 1024;
pub const DDSCAPS_PRIMARYSURFACELEFT : i32 = 0;
pub const DDSCAPS_SYSTEMMEMORY : i32 = 2048;
pub const DDSCAPS_TEXTURE : i32 = 4096;
pub const DDSCAPS_3DDEVICE : i32 = 8192;
pub const DDSCAPS_VIDEOMEMORY : i32 = 16384;
pub const DDSCAPS_VISIBLE : i32 = 32768;
pub const DDSCAPS_WRITEONLY : i32 = 65536;
pub const DDSCAPS_ZBUFFER : i32 = 131072;
pub const DDSCAPS_OWNDC : i32 = 262144;
pub const DDSCAPS_LIVEVIDEO : i32 = 524288;
pub const DDSCAPS_HWCODEC : i32 = 1048576;
pub const DDSCAPS_MODEX : i32 = 2097152;
pub const DDSCAPS_MIPMAP : i32 = 4194304;
pub const DDSCAPS_RESERVED2 : i32 = 8388608;
pub const DDSCAPS_ALLOCONLOAD : i32 = 67108864;
pub const DDSCAPS_VIDEOPORT : i32 = 134217728;
pub const DDSCAPS_LOCALVIDMEM : i32 = 268435456;
pub const DDSCAPS_NONLOCALVIDMEM : i32 = 536870912;
pub const DDSCAPS_STANDARDVGAMODE : i32 = 1073741824;
pub const DDSCAPS_OPTIMIZED : i32 = -2147483648;
pub const DDSCAPS2_RESERVED4 : i32 = 2;
pub const DDSCAPS2_HARDWAREDEINTERLACE : i32 = 0;
pub const DDSCAPS2_HINTDYNAMIC : i32 = 4;
pub const DDSCAPS2_HINTSTATIC : i32 = 8;
pub const DDSCAPS2_TEXTUREMANAGE : i32 = 16;
pub const DDSCAPS2_RESERVED1 : i32 = 32;
pub const DDSCAPS2_RESERVED2 : i32 = 64;
pub const DDSCAPS2_OPAQUE : i32 = 128;
pub const DDSCAPS2_HINTANTIALIASING : i32 = 256;
pub const DDSCAPS2_CUBEMAP : i32 = 512;
pub const DDSCAPS2_CUBEMAP_POSITIVEX : i32 = 1024;
pub const DDSCAPS2_CUBEMAP_NEGATIVEX : i32 = 2048;
pub const DDSCAPS2_CUBEMAP_POSITIVEY : i32 = 4096;
pub const DDSCAPS2_CUBEMAP_NEGATIVEY : i32 = 8192;
pub const DDSCAPS2_CUBEMAP_POSITIVEZ : i32 = 16384;
pub const DDSCAPS2_CUBEMAP_NEGATIVEZ : i32 = 32768;
pub const DDSCAPS2_MIPMAPSUBLEVEL : i32 = 65536;
pub const DDSCAPS2_D3DTEXTUREMANAGE : i32 = 131072;
pub const DDSCAPS2_DONOTPERSIST : i32 = 262144;
pub const DDSCAPS2_STEREOSURFACELEFT : i32 = 524288;
pub const DDSCAPS2_VOLUME : i32 = 2097152;
pub const DDSCAPS2_NOTUSERLOCKABLE : i32 = 4194304;
pub const DDSCAPS2_POINTS : i32 = 8388608;
pub const DDSCAPS2_RTPATCHES : i32 = 16777216;
pub const DDSCAPS2_NPATCHES : i32 = 33554432;
pub const DDSCAPS2_RESERVED3 : i32 = 67108864;
pub const DDSCAPS2_DISCARDBACKBUFFER : i32 = 268435456;
pub const DDSCAPS2_ENABLEALPHACHANNEL : i32 = 536870912;
pub const DDSCAPS2_EXTENDEDFORMATPRIMARY : i32 = 1073741824;
pub const DDSCAPS2_ADDITIONALPRIMARY : i32 = -2147483648;
pub const DDSCAPS3_MULTISAMPLE_MASK : i32 = 31;
pub const DDSCAPS3_MULTISAMPLE_QUALITY_MASK : i32 = 224;
pub const DDSCAPS3_MULTISAMPLE_QUALITY_SHIFT : u32 = 5;
pub const DDSCAPS3_RESERVED1 : i32 = 256;
pub const DDSCAPS3_RESERVED2 : i32 = 512;
pub const DDSCAPS3_LIGHTWEIGHTMIPMAP : i32 = 1024;
pub const DDSCAPS3_AUTOGENMIPMAP : i32 = 2048;
pub const DDSCAPS3_DMAP : i32 = 4096;
pub const DDSCAPS3_CREATESHAREDRESOURCE : i32 = 8192;
pub const DDSCAPS3_READONLYRESOURCE : i32 = 16384;
pub const DDSCAPS3_OPENSHAREDRESOURCE : i32 = 32768;
pub const DDCAPS_3D : i32 = 1;
pub const DDCAPS_ALIGNBOUNDARYDEST : i32 = 2;
pub const DDCAPS_ALIGNSIZEDEST : i32 = 4;
pub const DDCAPS_ALIGNBOUNDARYSRC : i32 = 8;
pub const DDCAPS_ALIGNSIZESRC : i32 = 16;
pub const DDCAPS_ALIGNSTRIDE : i32 = 32;
pub const DDCAPS_BLT : i32 = 64;
pub const DDCAPS_BLTQUEUE : i32 = 128;
pub const DDCAPS_BLTFOURCC : i32 = 256;
pub const DDCAPS_BLTSTRETCH : i32 = 512;
pub const DDCAPS_GDI : i32 = 1024;
pub const DDCAPS_OVERLAY : i32 = 2048;
pub const DDCAPS_OVERLAYCANTCLIP : i32 = 4096;
pub const DDCAPS_OVERLAYFOURCC : i32 = 8192;
pub const DDCAPS_OVERLAYSTRETCH : i32 = 16384;
pub const DDCAPS_PALETTE : i32 = 32768;
pub const DDCAPS_PALETTEVSYNC : i32 = 65536;
pub const DDCAPS_READSCANLINE : i32 = 131072;
pub const DDCAPS_RESERVED1 : i32 = 262144;
pub const DDCAPS_VBI : i32 = 524288;
pub const DDCAPS_ZBLTS : i32 = 1048576;
pub const DDCAPS_ZOVERLAYS : i32 = 2097152;
pub const DDCAPS_COLORKEY : i32 = 4194304;
pub const DDCAPS_ALPHA : i32 = 8388608;
pub const DDCAPS_COLORKEYHWASSIST : i32 = 16777216;
pub const DDCAPS_NOHARDWARE : i32 = 33554432;
pub const DDCAPS_BLTCOLORFILL : i32 = 67108864;
pub const DDCAPS_BANKSWITCHED : i32 = 134217728;
pub const DDCAPS_BLTDEPTHFILL : i32 = 268435456;
pub const DDCAPS_CANCLIP : i32 = 536870912;
pub const DDCAPS_CANCLIPSTRETCHED : i32 = 1073741824;
pub const DDCAPS_CANBLTSYSMEM : i32 = -2147483648;
pub const DDCAPS2_CERTIFIED : i32 = 1;
pub const DDCAPS2_NO2DDURING3DSCENE : i32 = 2;
pub const DDCAPS2_VIDEOPORT : i32 = 4;
pub const DDCAPS2_AUTOFLIPOVERLAY : i32 = 8;
pub const DDCAPS2_CANBOBINTERLEAVED : i32 = 16;
pub const DDCAPS2_CANBOBNONINTERLEAVED : i32 = 32;
pub const DDCAPS2_COLORCONTROLOVERLAY : i32 = 64;
pub const DDCAPS2_COLORCONTROLPRIMARY : i32 = 128;
pub const DDCAPS2_CANDROPZ16BIT : i32 = 256;
pub const DDCAPS2_NONLOCALVIDMEM : i32 = 512;
pub const DDCAPS2_NONLOCALVIDMEMCAPS : i32 = 1024;
pub const DDCAPS2_NOPAGELOCKREQUIRED : i32 = 2048;
pub const DDCAPS2_WIDESURFACES : i32 = 4096;
pub const DDCAPS2_CANFLIPODDEVEN : i32 = 8192;
pub const DDCAPS2_CANBOBHARDWARE : i32 = 16384;
pub const DDCAPS2_COPYFOURCC : i32 = 32768;
pub const DDCAPS2_PRIMARYGAMMA : i32 = 131072;
pub const DDCAPS2_CANRENDERWINDOWED : i32 = 524288;
pub const DDCAPS2_CANCALIBRATEGAMMA : i32 = 1048576;
pub const DDCAPS2_FLIPINTERVAL : i32 = 2097152;
pub const DDCAPS2_FLIPNOVSYNC : i32 = 4194304;
pub const DDCAPS2_CANMANAGETEXTURE : i32 = 8388608;
pub const DDCAPS2_TEXMANINNONLOCALVIDMEM : i32 = 16777216;
pub const DDCAPS2_STEREO : i32 = 33554432;
pub const DDCAPS2_SYSTONONLOCAL_AS_SYSTOLOCAL : i32 = 67108864;
pub const DDCAPS2_RESERVED1 : i32 = 134217728;
pub const DDCAPS2_CANMANAGERESOURCE : i32 = 268435456;
pub const DDCAPS2_DYNAMICTEXTURES : i32 = 536870912;
pub const DDCAPS2_CANAUTOGENMIPMAP : i32 = 1073741824;
pub const DDCAPS2_CANSHARERESOURCE : i32 = -2147483648;
pub const DDFXALPHACAPS_BLTALPHAEDGEBLEND : i32 = 1;
pub const DDFXALPHACAPS_BLTALPHAPIXELS : i32 = 2;
pub const DDFXALPHACAPS_BLTALPHAPIXELSNEG : i32 = 4;
pub const DDFXALPHACAPS_BLTALPHASURFACES : i32 = 8;
pub const DDFXALPHACAPS_BLTALPHASURFACESNEG : i32 = 16;
pub const DDFXALPHACAPS_OVERLAYALPHAEDGEBLEND : i32 = 32;
pub const DDFXALPHACAPS_OVERLAYALPHAPIXELS : i32 = 64;
pub const DDFXALPHACAPS_OVERLAYALPHAPIXELSNEG : i32 = 128;
pub const DDFXALPHACAPS_OVERLAYALPHASURFACES : i32 = 256;
pub const DDFXALPHACAPS_OVERLAYALPHASURFACESNEG : i32 = 512;
pub const DDFXCAPS_BLTARITHSTRETCHY : i32 = 32;
pub const DDFXCAPS_BLTARITHSTRETCHYN : i32 = 16;
pub const DDFXCAPS_BLTMIRRORLEFTRIGHT : i32 = 64;
pub const DDFXCAPS_BLTMIRRORUPDOWN : i32 = 128;
pub const DDFXCAPS_BLTROTATION : i32 = 256;
pub const DDFXCAPS_BLTROTATION90 : i32 = 512;
pub const DDFXCAPS_BLTSHRINKX : i32 = 1024;
pub const DDFXCAPS_BLTSHRINKXN : i32 = 2048;
pub const DDFXCAPS_BLTSHRINKY : i32 = 4096;
pub const DDFXCAPS_BLTSHRINKYN : i32 = 8192;
pub const DDFXCAPS_BLTSTRETCHX : i32 = 16384;
pub const DDFXCAPS_BLTSTRETCHXN : i32 = 32768;
pub const DDFXCAPS_BLTSTRETCHY : i32 = 65536;
pub const DDFXCAPS_BLTSTRETCHYN : i32 = 131072;
pub const DDFXCAPS_OVERLAYARITHSTRETCHY : i32 = 262144;
pub const DDFXCAPS_OVERLAYARITHSTRETCHYN : i32 = 8;
pub const DDFXCAPS_OVERLAYSHRINKX : i32 = 524288;
pub const DDFXCAPS_OVERLAYSHRINKXN : i32 = 1048576;
pub const DDFXCAPS_OVERLAYSHRINKY : i32 = 2097152;
pub const DDFXCAPS_OVERLAYSHRINKYN : i32 = 4194304;
pub const DDFXCAPS_OVERLAYSTRETCHX : i32 = 8388608;
pub const DDFXCAPS_OVERLAYSTRETCHXN : i32 = 16777216;
pub const DDFXCAPS_OVERLAYSTRETCHY : i32 = 33554432;
pub const DDFXCAPS_OVERLAYSTRETCHYN : i32 = 67108864;
pub const DDFXCAPS_OVERLAYMIRRORLEFTRIGHT : i32 = 134217728;
pub const DDFXCAPS_OVERLAYMIRRORUPDOWN : i32 = 268435456;
pub const DDFXCAPS_OVERLAYDEINTERLACE : i32 = 536870912;
pub const DDFXCAPS_BLTALPHA : i32 = 1;
pub const DDFXCAPS_OVERLAYALPHA : i32 = 4;
pub const DDSVCAPS_RESERVED1 : i32 = 1;
pub const DDSVCAPS_RESERVED2 : i32 = 2;
pub const DDSVCAPS_RESERVED3 : i32 = 4;
pub const DDSVCAPS_RESERVED4 : i32 = 8;
pub const DDSVCAPS_STEREOSEQUENTIAL : i32 = 16;
pub const DDPCAPS_4BIT : i32 = 1;
pub const DDPCAPS_8BITENTRIES : i32 = 2;
pub const DDPCAPS_8BIT : i32 = 4;
pub const DDPCAPS_INITIALIZE : i32 = 0;
pub const DDPCAPS_PRIMARYSURFACE : i32 = 16;
pub const DDPCAPS_PRIMARYSURFACELEFT : i32 = 32;
pub const DDPCAPS_ALLOW256 : i32 = 64;
pub const DDPCAPS_VSYNC : i32 = 128;
pub const DDPCAPS_1BIT : i32 = 256;
pub const DDPCAPS_2BIT : i32 = 512;
pub const DDPCAPS_ALPHA : i32 = 1024;
pub const DDSPD_IUNKNOWNPOINTER : i32 = 1;
pub const DDSPD_VOLATILE : i32 = 2;
pub const DDBD_1 : i32 = 16384;
pub const DDBD_2 : i32 = 8192;
pub const DDBD_4 : i32 = 4096;
pub const DDBD_8 : i32 = 2048;
pub const DDBD_16 : i32 = 1024;
pub const DDBD_24 : i32 = 512;
pub const DDBD_32 : i32 = 256;
pub const DDCKEY_COLORSPACE : i32 = 1;
pub const DDCKEY_DESTBLT : i32 = 2;
pub const DDCKEY_DESTOVERLAY : i32 = 4;
pub const DDCKEY_SRCBLT : i32 = 8;
pub const DDCKEY_SRCOVERLAY : i32 = 16;
pub const DDCKEYCAPS_DESTBLT : i32 = 1;
pub const DDCKEYCAPS_DESTBLTCLRSPACE : i32 = 2;
pub const DDCKEYCAPS_DESTBLTCLRSPACEYUV : i32 = 4;
pub const DDCKEYCAPS_DESTBLTYUV : i32 = 8;
pub const DDCKEYCAPS_DESTOVERLAY : i32 = 16;
pub const DDCKEYCAPS_DESTOVERLAYCLRSPACE : i32 = 32;
pub const DDCKEYCAPS_DESTOVERLAYCLRSPACEYUV : i32 = 64;
pub const DDCKEYCAPS_DESTOVERLAYONEACTIVE : i32 = 128;
pub const DDCKEYCAPS_DESTOVERLAYYUV : i32 = 256;
pub const DDCKEYCAPS_SRCBLT : i32 = 512;
pub const DDCKEYCAPS_SRCBLTCLRSPACE : i32 = 1024;
pub const DDCKEYCAPS_SRCBLTCLRSPACEYUV : i32 = 2048;
pub const DDCKEYCAPS_SRCBLTYUV : i32 = 4096;
pub const DDCKEYCAPS_SRCOVERLAY : i32 = 8192;
pub const DDCKEYCAPS_SRCOVERLAYCLRSPACE : i32 = 16384;
pub const DDCKEYCAPS_SRCOVERLAYCLRSPACEYUV : i32 = 32768;
pub const DDCKEYCAPS_SRCOVERLAYONEACTIVE : i32 = 65536;
pub const DDCKEYCAPS_SRCOVERLAYYUV : i32 = 131072;
pub const DDCKEYCAPS_NOCOSTOVERLAY : i32 = 262144;
pub const DDPF_ALPHAPIXELS : i32 = 1;
pub const DDPF_ALPHA : i32 = 2;
pub const DDPF_PALETTEINDEXED4 : i32 = 8;
pub const DDPF_PALETTEINDEXEDTO8 : i32 = 16;
pub const DDPF_PALETTEINDEXED8 : i32 = 32;
pub const DDPF_RGB : i32 = 64;
pub const DDPF_COMPRESSED : i32 = 128;
pub const DDPF_RGBTOYUV : i32 = 256;
pub const DDPF_YUV : i32 = 512;
pub const DDPF_ZBUFFER : i32 = 1024;
pub const DDPF_PALETTEINDEXED1 : i32 = 2048;
pub const DDPF_PALETTEINDEXED2 : i32 = 4096;
pub const DDPF_ZPIXELS : i32 = 8192;
pub const DDPF_STENCILBUFFER : i32 = 16384;
pub const DDPF_ALPHAPREMULT : i32 = 32768;
pub const DDPF_LUMINANCE : i32 = 131072;
pub const DDPF_BUMPLUMINANCE : i32 = 262144;
pub const DDPF_BUMPDUDV : i32 = 524288;
pub const DDENUMSURFACES_ALL : i32 = 1;
pub const DDENUMSURFACES_MATCH : i32 = 2;
pub const DDENUMSURFACES_NOMATCH : i32 = 4;
pub const DDENUMSURFACES_CANBECREATED : i32 = 8;
pub const DDENUMSURFACES_DOESEXIST : i32 = 16;
pub const DDSDM_STANDARDVGAMODE : i32 = 1;
pub const DDEDM_REFRESHRATES : i32 = 1;
pub const DDEDM_STANDARDVGAMODES : i32 = 2;
pub const DDSCL_FULLSCREEN : i32 = 1;
pub const DDSCL_ALLOWREBOOT : i32 = 2;
pub const DDSCL_NOWINDOWCHANGES : i32 = 4;
pub const DDSCL_NORMAL : i32 = 8;
pub const DDSCL_EXCLUSIVE : i32 = 16;
pub const DDSCL_ALLOWMODEX : i32 = 64;
pub const DDSCL_SETFOCUSWINDOW : i32 = 128;
pub const DDSCL_SETDEVICEWINDOW : i32 = 256;
pub const DDSCL_CREATEDEVICEWINDOW : i32 = 512;
pub const DDSCL_MULTITHREADED : i32 = 1024;
pub const DDSCL_FPUSETUP : i32 = 2048;
pub const DDSCL_FPUPRESERVE : i32 = 4096;
pub const DDBLT_ALPHADEST : i32 = 1;
pub const DDBLT_ALPHADESTCONSTOVERRIDE : i32 = 2;
pub const DDBLT_ALPHADESTNEG : i32 = 4;
pub const DDBLT_ALPHADESTSURFACEOVERRIDE : i32 = 8;
pub const DDBLT_ALPHAEDGEBLEND : i32 = 16;
pub const DDBLT_ALPHASRC : i32 = 32;
pub const DDBLT_ALPHASRCCONSTOVERRIDE : i32 = 64;
pub const DDBLT_ALPHASRCNEG : i32 = 128;
pub const DDBLT_ALPHASRCSURFACEOVERRIDE : i32 = 256;
pub const DDBLT_ASYNC : i32 = 512;
pub const DDBLT_COLORFILL : i32 = 1024;
pub const DDBLT_DDFX : i32 = 2048;
pub const DDBLT_DDROPS : i32 = 4096;
pub const DDBLT_KEYDEST : i32 = 8192;
pub const DDBLT_KEYDESTOVERRIDE : i32 = 16384;
pub const DDBLT_KEYSRC : i32 = 32768;
pub const DDBLT_KEYSRCOVERRIDE : i32 = 65536;
pub const DDBLT_ROP : i32 = 131072;
pub const DDBLT_ROTATIONANGLE : i32 = 262144;
pub const DDBLT_ZBUFFER : i32 = 524288;
pub const DDBLT_ZBUFFERDESTCONSTOVERRIDE : i32 = 1048576;
pub const DDBLT_ZBUFFERDESTOVERRIDE : i32 = 2097152;
pub const DDBLT_ZBUFFERSRCCONSTOVERRIDE : i32 = 4194304;
pub const DDBLT_ZBUFFERSRCOVERRIDE : i32 = 8388608;
pub const DDBLT_WAIT : i32 = 16777216;
pub const DDBLT_DEPTHFILL : i32 = 33554432;
pub const DDBLT_DONOTWAIT : i32 = 134217728;
pub const DDBLT_PRESENTATION : i32 = 268435456;
pub const DDBLT_LAST_PRESENTATION : i32 = 536870912;
pub const DDBLT_EXTENDED_FLAGS : i32 = 1073741824;
pub const DDBLT_EXTENDED_LINEAR_CONTENT : i32 = 4;
pub const DDBLTFAST_NOCOLORKEY : u32 = 0;
pub const DDBLTFAST_SRCCOLORKEY : u32 = 1;
pub const DDBLTFAST_DESTCOLORKEY : u32 = 2;
pub const DDBLTFAST_WAIT : u32 = 16;
pub const DDBLTFAST_DONOTWAIT : u32 = 32;
pub const DDFLIP_WAIT : i32 = 1;
pub const DDFLIP_EVEN : i32 = 2;
pub const DDFLIP_ODD : i32 = 4;
pub const DDFLIP_NOVSYNC : i32 = 8;
pub const DDFLIP_INTERVAL2 : i32 = 33554432;
pub const DDFLIP_INTERVAL3 : i32 = 50331648;
pub const DDFLIP_INTERVAL4 : i32 = 67108864;
pub const DDFLIP_STEREO : i32 = 16;
pub const DDFLIP_DONOTWAIT : i32 = 32;
pub const DDOVER_ALPHADEST : i32 = 1;
pub const DDOVER_ALPHADESTCONSTOVERRIDE : i32 = 2;
pub const DDOVER_ALPHADESTNEG : i32 = 4;
pub const DDOVER_ALPHADESTSURFACEOVERRIDE : i32 = 8;
pub const DDOVER_ALPHAEDGEBLEND : i32 = 16;
pub const DDOVER_ALPHASRC : i32 = 32;
pub const DDOVER_ALPHASRCCONSTOVERRIDE : i32 = 64;
pub const DDOVER_ALPHASRCNEG : i32 = 128;
pub const DDOVER_ALPHASRCSURFACEOVERRIDE : i32 = 256;
pub const DDOVER_HIDE : i32 = 512;
pub const DDOVER_KEYDEST : i32 = 1024;
pub const DDOVER_KEYDESTOVERRIDE : i32 = 2048;
pub const DDOVER_KEYSRC : i32 = 4096;
pub const DDOVER_KEYSRCOVERRIDE : i32 = 8192;
pub const DDOVER_SHOW : i32 = 16384;
pub const DDOVER_ADDDIRTYRECT : i32 = 32768;
pub const DDOVER_REFRESHDIRTYRECTS : i32 = 65536;
pub const DDOVER_REFRESHALL : i32 = 131072;
pub const DDOVER_DDFX : i32 = 524288;
pub const DDOVER_AUTOFLIP : i32 = 1048576;
pub const DDOVER_BOB : i32 = 2097152;
pub const DDOVER_OVERRIDEBOBWEAVE : i32 = 4194304;
pub const DDOVER_INTERLEAVED : i32 = 8388608;
pub const DDOVER_BOBHARDWARE : i32 = 16777216;
pub const DDOVER_ARGBSCALEFACTORS : i32 = 33554432;
pub const DDOVER_DEGRADEARGBSCALING : i32 = 67108864;
pub const DDSETSURFACEDESC_RECREATEDC : i32 = 0;
pub const DDSETSURFACEDESC_PRESERVEDC : i32 = 1;
pub const DDLOCK_SURFACEMEMORYPTR : i32 = 0;
pub const DDLOCK_WAIT : i32 = 1;
pub const DDLOCK_EVENT : i32 = 2;
pub const DDLOCK_READONLY : i32 = 16;
pub const DDLOCK_WRITEONLY : i32 = 32;
pub const DDLOCK_NOSYSLOCK : i32 = 2048;
pub const DDLOCK_NOOVERWRITE : i32 = 4096;
pub const DDLOCK_DISCARDCONTENTS : i32 = 8192;
pub const DDLOCK_OKTOSWAP : i32 = 8192;
pub const DDLOCK_DONOTWAIT : i32 = 16384;
pub const DDLOCK_HASVOLUMETEXTUREBOXRECT : i32 = 32768;
pub const DDLOCK_NODIRTYUPDATE : i32 = 65536;
pub const DDBLTFX_ARITHSTRETCHY : i32 = 1;
pub const DDBLTFX_MIRRORLEFTRIGHT : i32 = 2;
pub const DDBLTFX_MIRRORUPDOWN : i32 = 4;
pub const DDBLTFX_NOTEARING : i32 = 8;
pub const DDBLTFX_ROTATE180 : i32 = 16;
pub const DDBLTFX_ROTATE270 : i32 = 32;
pub const DDBLTFX_ROTATE90 : i32 = 64;
pub const DDBLTFX_ZBUFFERRANGE : i32 = 128;
pub const DDBLTFX_ZBUFFERBASEDEST : i32 = 256;
pub const DDOVERFX_ARITHSTRETCHY : i32 = 1;
pub const DDOVERFX_MIRRORLEFTRIGHT : i32 = 2;
pub const DDOVERFX_MIRRORUPDOWN : i32 = 4;
pub const DDOVERFX_DEINTERLACE : i32 = 8;
pub const DDWAITVB_BLOCKBEGIN : i32 = 1;
pub const DDWAITVB_BLOCKBEGINEVENT : i32 = 2;
pub const DDWAITVB_BLOCKEND : i32 = 4;
pub const DDGFS_CANFLIP : i32 = 1;
pub const DDGFS_ISFLIPDONE : i32 = 2;
pub const DDGBS_CANBLT : i32 = 1;
pub const DDGBS_ISBLTDONE : i32 = 2;
pub const DDENUMOVERLAYZ_BACKTOFRONT : i32 = 0;
pub const DDENUMOVERLAYZ_FRONTTOBACK : i32 = 1;
pub const DDOVERZ_SENDTOFRONT : i32 = 0;
pub const DDOVERZ_SENDTOBACK : i32 = 1;
pub const DDOVERZ_MOVEFORWARD : i32 = 2;
pub const DDOVERZ_MOVEBACKWARD : i32 = 3;
pub const DDOVERZ_INSERTINFRONTOF : i32 = 4;
pub const DDOVERZ_INSERTINBACKOF : i32 = 5;
pub const DDSGR_CALIBRATE : i32 = 1;
pub const DDSMT_ISTESTREQUIRED : i32 = 1;
pub const DDEM_MODEPASSED : i32 = 1;
pub const DDEM_MODEFAILED : i32 = 2;
pub const DDENUMRET_CANCEL : u32 = 0;
pub const DDENUMRET_OK : u32 = 1;

//--------------------------------------------------------------------------------
// Section: Types (51)
//--------------------------------------------------------------------------------
pub const _DDFXROP = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const LPDDENUMCALLBACKA = fn(
    param0: *Guid,
    param1: PSTR,
    param2: PSTR,
    param3: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDDENUMCALLBACKW = fn(
    param0: *Guid,
    param1: PWSTR,
    param2: PWSTR,
    param3: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDDENUMCALLBACKEXA = fn(
    param0: *Guid,
    param1: PSTR,
    param2: PSTR,
    param3: *c_void,
    param4: HMONITOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDDENUMCALLBACKEXW = fn(
    param0: *Guid,
    param1: PWSTR,
    param2: PWSTR,
    param3: *c_void,
    param4: HMONITOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDIRECTDRAWENUMERATEEXA = fn(
    lpCallback: LPDDENUMCALLBACKEXA,
    lpContext: *c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const LPDIRECTDRAWENUMERATEEXW = fn(
    lpCallback: LPDDENUMCALLBACKEXW,
    lpContext: *c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const LPDDENUMCALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDDENUMCALLBACKEX = fn(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDIRECTDRAWENUMERATEEX = fn(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const LPDDENUMMODESCALLBACK = fn(
    param0: *DDSURFACEDESC,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const LPDDENUMMODESCALLBACK2 = fn(
    param0: *DDSURFACEDESC2,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const LPDDENUMSURFACESCALLBACK = fn(
    param0: *IDirectDrawSurface,
    param1: *DDSURFACEDESC,
    param2: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const LPDDENUMSURFACESCALLBACK2 = fn(
    param0: *IDirectDrawSurface4,
    param1: *DDSURFACEDESC2,
    param2: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const LPDDENUMSURFACESCALLBACK7 = fn(
    param0: *IDirectDrawSurface7,
    param1: *DDSURFACEDESC2,
    param2: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const DDARGB = extern struct {
    blue: u8,
    green: u8,
    red: u8,
    alpha: u8,
};

pub const DDRGBA = extern struct {
    red: u8,
    green: u8,
    blue: u8,
    alpha: u8,
};

pub const DDBLTFX = extern struct {
    dwSize: u32,
    dwDDFX: u32,
    dwROP: u32,
    dwDDROP: u32,
    dwRotationAngle: u32,
    dwZBufferOpCode: u32,
    dwZBufferLow: u32,
    dwZBufferHigh: u32,
    dwZBufferBaseDest: u32,
    dwZDestConstBitDepth: u32,
    Anonymous1: DDBLTFX._Anonymous1_e__Union,
    dwZSrcConstBitDepth: u32,
    Anonymous2: DDBLTFX._Anonymous2_e__Union,
    dwAlphaEdgeBlendBitDepth: u32,
    dwAlphaEdgeBlend: u32,
    dwReserved: u32,
    dwAlphaDestConstBitDepth: u32,
    Anonymous3: DDBLTFX._Anonymous3_e__Union,
    dwAlphaSrcConstBitDepth: u32,
    Anonymous4: DDBLTFX._Anonymous4_e__Union,
    Anonymous5: DDBLTFX._Anonymous5_e__Union,
    ddckDestColorkey: DDCOLORKEY,
    ddckSrcColorkey: DDCOLORKEY,
    const _Anonymous4_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous3_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous5_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const DDSCAPS = extern struct {
    dwCaps: u32,
};

pub const DDOSCAPS = extern struct {
    dwCaps: u32,
};

pub const DDSCAPSEX = extern struct {
    dwCaps2: u32,
    dwCaps3: u32,
    Anonymous: DDSCAPSEX._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DDSCAPS2 = extern struct {
    dwCaps: u32,
    dwCaps2: u32,
    dwCaps3: u32,
    Anonymous: DDSCAPS2._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DDCAPS_DX1 = extern struct {
    dwSize: u32,
    dwCaps: u32,
    dwCaps2: u32,
    dwCKeyCaps: u32,
    dwFXCaps: u32,
    dwFXAlphaCaps: u32,
    dwPalCaps: u32,
    dwSVCaps: u32,
    dwAlphaBltConstBitDepths: u32,
    dwAlphaBltPixelBitDepths: u32,
    dwAlphaBltSurfaceBitDepths: u32,
    dwAlphaOverlayConstBitDepths: u32,
    dwAlphaOverlayPixelBitDepths: u32,
    dwAlphaOverlaySurfaceBitDepths: u32,
    dwZBufferBitDepths: u32,
    dwVidMemTotal: u32,
    dwVidMemFree: u32,
    dwMaxVisibleOverlays: u32,
    dwCurrVisibleOverlays: u32,
    dwNumFourCCCodes: u32,
    dwAlignBoundarySrc: u32,
    dwAlignSizeSrc: u32,
    dwAlignBoundaryDest: u32,
    dwAlignSizeDest: u32,
    dwAlignStrideAlign: u32,
    dwRops: [8]u32,
    ddsCaps: DDSCAPS,
    dwMinOverlayStretch: u32,
    dwMaxOverlayStretch: u32,
    dwMinLiveVideoStretch: u32,
    dwMaxLiveVideoStretch: u32,
    dwMinHwCodecStretch: u32,
    dwMaxHwCodecStretch: u32,
    dwReserved1: u32,
    dwReserved2: u32,
    dwReserved3: u32,
};

pub const DDCAPS_DX3 = extern struct {
    dwSize: u32,
    dwCaps: u32,
    dwCaps2: u32,
    dwCKeyCaps: u32,
    dwFXCaps: u32,
    dwFXAlphaCaps: u32,
    dwPalCaps: u32,
    dwSVCaps: u32,
    dwAlphaBltConstBitDepths: u32,
    dwAlphaBltPixelBitDepths: u32,
    dwAlphaBltSurfaceBitDepths: u32,
    dwAlphaOverlayConstBitDepths: u32,
    dwAlphaOverlayPixelBitDepths: u32,
    dwAlphaOverlaySurfaceBitDepths: u32,
    dwZBufferBitDepths: u32,
    dwVidMemTotal: u32,
    dwVidMemFree: u32,
    dwMaxVisibleOverlays: u32,
    dwCurrVisibleOverlays: u32,
    dwNumFourCCCodes: u32,
    dwAlignBoundarySrc: u32,
    dwAlignSizeSrc: u32,
    dwAlignBoundaryDest: u32,
    dwAlignSizeDest: u32,
    dwAlignStrideAlign: u32,
    dwRops: [8]u32,
    ddsCaps: DDSCAPS,
    dwMinOverlayStretch: u32,
    dwMaxOverlayStretch: u32,
    dwMinLiveVideoStretch: u32,
    dwMaxLiveVideoStretch: u32,
    dwMinHwCodecStretch: u32,
    dwMaxHwCodecStretch: u32,
    dwReserved1: u32,
    dwReserved2: u32,
    dwReserved3: u32,
    dwSVBCaps: u32,
    dwSVBCKeyCaps: u32,
    dwSVBFXCaps: u32,
    dwSVBRops: [8]u32,
    dwVSBCaps: u32,
    dwVSBCKeyCaps: u32,
    dwVSBFXCaps: u32,
    dwVSBRops: [8]u32,
    dwSSBCaps: u32,
    dwSSBCKeyCaps: u32,
    dwSSBFXCaps: u32,
    dwSSBRops: [8]u32,
    dwReserved4: u32,
    dwReserved5: u32,
    dwReserved6: u32,
};

pub const DDCAPS_DX5 = extern struct {
    dwSize: u32,
    dwCaps: u32,
    dwCaps2: u32,
    dwCKeyCaps: u32,
    dwFXCaps: u32,
    dwFXAlphaCaps: u32,
    dwPalCaps: u32,
    dwSVCaps: u32,
    dwAlphaBltConstBitDepths: u32,
    dwAlphaBltPixelBitDepths: u32,
    dwAlphaBltSurfaceBitDepths: u32,
    dwAlphaOverlayConstBitDepths: u32,
    dwAlphaOverlayPixelBitDepths: u32,
    dwAlphaOverlaySurfaceBitDepths: u32,
    dwZBufferBitDepths: u32,
    dwVidMemTotal: u32,
    dwVidMemFree: u32,
    dwMaxVisibleOverlays: u32,
    dwCurrVisibleOverlays: u32,
    dwNumFourCCCodes: u32,
    dwAlignBoundarySrc: u32,
    dwAlignSizeSrc: u32,
    dwAlignBoundaryDest: u32,
    dwAlignSizeDest: u32,
    dwAlignStrideAlign: u32,
    dwRops: [8]u32,
    ddsCaps: DDSCAPS,
    dwMinOverlayStretch: u32,
    dwMaxOverlayStretch: u32,
    dwMinLiveVideoStretch: u32,
    dwMaxLiveVideoStretch: u32,
    dwMinHwCodecStretch: u32,
    dwMaxHwCodecStretch: u32,
    dwReserved1: u32,
    dwReserved2: u32,
    dwReserved3: u32,
    dwSVBCaps: u32,
    dwSVBCKeyCaps: u32,
    dwSVBFXCaps: u32,
    dwSVBRops: [8]u32,
    dwVSBCaps: u32,
    dwVSBCKeyCaps: u32,
    dwVSBFXCaps: u32,
    dwVSBRops: [8]u32,
    dwSSBCaps: u32,
    dwSSBCKeyCaps: u32,
    dwSSBFXCaps: u32,
    dwSSBRops: [8]u32,
    dwMaxVideoPorts: u32,
    dwCurrVideoPorts: u32,
    dwSVBCaps2: u32,
    dwNLVBCaps: u32,
    dwNLVBCaps2: u32,
    dwNLVBCKeyCaps: u32,
    dwNLVBFXCaps: u32,
    dwNLVBRops: [8]u32,
};

pub const DDCAPS_DX6 = extern struct {
    dwSize: u32,
    dwCaps: u32,
    dwCaps2: u32,
    dwCKeyCaps: u32,
    dwFXCaps: u32,
    dwFXAlphaCaps: u32,
    dwPalCaps: u32,
    dwSVCaps: u32,
    dwAlphaBltConstBitDepths: u32,
    dwAlphaBltPixelBitDepths: u32,
    dwAlphaBltSurfaceBitDepths: u32,
    dwAlphaOverlayConstBitDepths: u32,
    dwAlphaOverlayPixelBitDepths: u32,
    dwAlphaOverlaySurfaceBitDepths: u32,
    dwZBufferBitDepths: u32,
    dwVidMemTotal: u32,
    dwVidMemFree: u32,
    dwMaxVisibleOverlays: u32,
    dwCurrVisibleOverlays: u32,
    dwNumFourCCCodes: u32,
    dwAlignBoundarySrc: u32,
    dwAlignSizeSrc: u32,
    dwAlignBoundaryDest: u32,
    dwAlignSizeDest: u32,
    dwAlignStrideAlign: u32,
    dwRops: [8]u32,
    ddsOldCaps: DDSCAPS,
    dwMinOverlayStretch: u32,
    dwMaxOverlayStretch: u32,
    dwMinLiveVideoStretch: u32,
    dwMaxLiveVideoStretch: u32,
    dwMinHwCodecStretch: u32,
    dwMaxHwCodecStretch: u32,
    dwReserved1: u32,
    dwReserved2: u32,
    dwReserved3: u32,
    dwSVBCaps: u32,
    dwSVBCKeyCaps: u32,
    dwSVBFXCaps: u32,
    dwSVBRops: [8]u32,
    dwVSBCaps: u32,
    dwVSBCKeyCaps: u32,
    dwVSBFXCaps: u32,
    dwVSBRops: [8]u32,
    dwSSBCaps: u32,
    dwSSBCKeyCaps: u32,
    dwSSBFXCaps: u32,
    dwSSBRops: [8]u32,
    dwMaxVideoPorts: u32,
    dwCurrVideoPorts: u32,
    dwSVBCaps2: u32,
    dwNLVBCaps: u32,
    dwNLVBCaps2: u32,
    dwNLVBCKeyCaps: u32,
    dwNLVBFXCaps: u32,
    dwNLVBRops: [8]u32,
    ddsCaps: DDSCAPS2,
};

pub const DDCAPS_DX7 = extern struct {
    dwSize: u32,
    dwCaps: u32,
    dwCaps2: u32,
    dwCKeyCaps: u32,
    dwFXCaps: u32,
    dwFXAlphaCaps: u32,
    dwPalCaps: u32,
    dwSVCaps: u32,
    dwAlphaBltConstBitDepths: u32,
    dwAlphaBltPixelBitDepths: u32,
    dwAlphaBltSurfaceBitDepths: u32,
    dwAlphaOverlayConstBitDepths: u32,
    dwAlphaOverlayPixelBitDepths: u32,
    dwAlphaOverlaySurfaceBitDepths: u32,
    dwZBufferBitDepths: u32,
    dwVidMemTotal: u32,
    dwVidMemFree: u32,
    dwMaxVisibleOverlays: u32,
    dwCurrVisibleOverlays: u32,
    dwNumFourCCCodes: u32,
    dwAlignBoundarySrc: u32,
    dwAlignSizeSrc: u32,
    dwAlignBoundaryDest: u32,
    dwAlignSizeDest: u32,
    dwAlignStrideAlign: u32,
    dwRops: [8]u32,
    ddsOldCaps: DDSCAPS,
    dwMinOverlayStretch: u32,
    dwMaxOverlayStretch: u32,
    dwMinLiveVideoStretch: u32,
    dwMaxLiveVideoStretch: u32,
    dwMinHwCodecStretch: u32,
    dwMaxHwCodecStretch: u32,
    dwReserved1: u32,
    dwReserved2: u32,
    dwReserved3: u32,
    dwSVBCaps: u32,
    dwSVBCKeyCaps: u32,
    dwSVBFXCaps: u32,
    dwSVBRops: [8]u32,
    dwVSBCaps: u32,
    dwVSBCKeyCaps: u32,
    dwVSBFXCaps: u32,
    dwVSBRops: [8]u32,
    dwSSBCaps: u32,
    dwSSBCKeyCaps: u32,
    dwSSBFXCaps: u32,
    dwSSBRops: [8]u32,
    dwMaxVideoPorts: u32,
    dwCurrVideoPorts: u32,
    dwSVBCaps2: u32,
    dwNLVBCaps: u32,
    dwNLVBCaps2: u32,
    dwNLVBCKeyCaps: u32,
    dwNLVBFXCaps: u32,
    dwNLVBRops: [8]u32,
    ddsCaps: DDSCAPS2,
};

pub const DDPIXELFORMAT = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwFourCC: u32,
    Anonymous1: DDPIXELFORMAT._Anonymous1_e__Union,
    Anonymous2: DDPIXELFORMAT._Anonymous2_e__Union,
    Anonymous3: DDPIXELFORMAT._Anonymous3_e__Union,
    Anonymous4: DDPIXELFORMAT._Anonymous4_e__Union,
    Anonymous5: DDPIXELFORMAT._Anonymous5_e__Union,
    const _Anonymous5_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous3_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous4_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const DDOVERLAYFX = extern struct {
    dwSize: u32,
    dwAlphaEdgeBlendBitDepth: u32,
    dwAlphaEdgeBlend: u32,
    dwReserved: u32,
    dwAlphaDestConstBitDepth: u32,
    Anonymous1: DDOVERLAYFX._Anonymous1_e__Union,
    dwAlphaSrcConstBitDepth: u32,
    Anonymous2: DDOVERLAYFX._Anonymous2_e__Union,
    dckDestColorkey: DDCOLORKEY,
    dckSrcColorkey: DDCOLORKEY,
    dwDDFX: u32,
    dwFlags: u32,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const DDBLTBATCH = extern struct {
    lprDest: *RECT,
    lpDDSSrc: *IDirectDrawSurface,
    lprSrc: *RECT,
    dwFlags: u32,
    lpDDBltFx: *DDBLTFX,
};

pub const DDGAMMARAMP = extern struct {
    red: [256]u16,
    green: [256]u16,
    blue: [256]u16,
};

pub const DDDEVICEIDENTIFIER = extern struct {
    szDriver: [512]i8,
    szDescription: [512]i8,
    liDriverVersion: LARGE_INTEGER,
    dwVendorId: u32,
    dwDeviceId: u32,
    dwSubSysId: u32,
    dwRevision: u32,
    guidDeviceIdentifier: Guid,
};

pub const DDDEVICEIDENTIFIER2 = extern struct {
    szDriver: [512]i8,
    szDescription: [512]i8,
    liDriverVersion: LARGE_INTEGER,
    dwVendorId: u32,
    dwDeviceId: u32,
    dwSubSysId: u32,
    dwRevision: u32,
    guidDeviceIdentifier: Guid,
    dwWHQLLevel: u32,
};

pub const LPCLIPPERCALLBACK = fn(
    lpDDClipper: *IDirectDrawClipper,
    hWnd: HWND,
    code: u32,
    lpContext: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

const IID_IDirectDraw_Value = @import("../zig.zig").Guid.initString("6c14db80-a733-11ce-a521-0020af0be560");
pub const IID_IDirectDraw = &IID_IDirectDraw_Value;
pub const IDirectDraw = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Compact: fn(
            self: *const IDirectDraw,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateClipper: fn(
            self: *const IDirectDraw,
            param0: u32,
            param1: **IDirectDrawClipper,
            param2: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePalette: fn(
            self: *const IDirectDraw,
            param0: u32,
            param1: *PALETTEENTRY,
            param2: **IDirectDrawPalette,
            param3: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSurface: fn(
            self: *const IDirectDraw,
            param0: *DDSURFACEDESC,
            param1: **IDirectDrawSurface,
            param2: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DuplicateSurface: fn(
            self: *const IDirectDraw,
            param0: *IDirectDrawSurface,
            param1: **IDirectDrawSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDisplayModes: fn(
            self: *const IDirectDraw,
            param0: u32,
            param1: *DDSURFACEDESC,
            param2: *c_void,
            param3: LPDDENUMMODESCALLBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumSurfaces: fn(
            self: *const IDirectDraw,
            param0: u32,
            param1: *DDSURFACEDESC,
            param2: *c_void,
            param3: LPDDENUMSURFACESCALLBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FlipToGDISurface: fn(
            self: *const IDirectDraw,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaps: fn(
            self: *const IDirectDraw,
            param0: *DDCAPS_DX7,
            param1: *DDCAPS_DX7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayMode: fn(
            self: *const IDirectDraw,
            param0: *DDSURFACEDESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFourCCCodes: fn(
            self: *const IDirectDraw,
            param0: *u32,
            param1: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGDISurface: fn(
            self: *const IDirectDraw,
            param0: **IDirectDrawSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMonitorFrequency: fn(
            self: *const IDirectDraw,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScanLine: fn(
            self: *const IDirectDraw,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVerticalBlankStatus: fn(
            self: *const IDirectDraw,
            param0: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectDraw,
            param0: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestoreDisplayMode: fn(
            self: *const IDirectDraw,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCooperativeLevel: fn(
            self: *const IDirectDraw,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDisplayMode: fn(
            self: *const IDirectDraw,
            param0: u32,
            param1: u32,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WaitForVerticalBlank: fn(
            self: *const IDirectDraw,
            param0: u32,
            param1: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_Compact(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).Compact(@ptrCast(*const IDirectDraw, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_CreateClipper(self: *const T, param0: u32, param1: **IDirectDrawClipper, param2: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).CreateClipper(@ptrCast(*const IDirectDraw, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_CreatePalette(self: *const T, param0: u32, param1: *PALETTEENTRY, param2: **IDirectDrawPalette, param3: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).CreatePalette(@ptrCast(*const IDirectDraw, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_CreateSurface(self: *const T, param0: *DDSURFACEDESC, param1: **IDirectDrawSurface, param2: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).CreateSurface(@ptrCast(*const IDirectDraw, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_DuplicateSurface(self: *const T, param0: *IDirectDrawSurface, param1: **IDirectDrawSurface) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).DuplicateSurface(@ptrCast(*const IDirectDraw, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_EnumDisplayModes(self: *const T, param0: u32, param1: *DDSURFACEDESC, param2: *c_void, param3: LPDDENUMMODESCALLBACK) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).EnumDisplayModes(@ptrCast(*const IDirectDraw, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_EnumSurfaces(self: *const T, param0: u32, param1: *DDSURFACEDESC, param2: *c_void, param3: LPDDENUMSURFACESCALLBACK) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).EnumSurfaces(@ptrCast(*const IDirectDraw, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_FlipToGDISurface(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).FlipToGDISurface(@ptrCast(*const IDirectDraw, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_GetCaps(self: *const T, param0: *DDCAPS_DX7, param1: *DDCAPS_DX7) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).GetCaps(@ptrCast(*const IDirectDraw, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_GetDisplayMode(self: *const T, param0: *DDSURFACEDESC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).GetDisplayMode(@ptrCast(*const IDirectDraw, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_GetFourCCCodes(self: *const T, param0: *u32, param1: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).GetFourCCCodes(@ptrCast(*const IDirectDraw, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_GetGDISurface(self: *const T, param0: **IDirectDrawSurface) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).GetGDISurface(@ptrCast(*const IDirectDraw, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_GetMonitorFrequency(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).GetMonitorFrequency(@ptrCast(*const IDirectDraw, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_GetScanLine(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).GetScanLine(@ptrCast(*const IDirectDraw, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_GetVerticalBlankStatus(self: *const T, param0: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).GetVerticalBlankStatus(@ptrCast(*const IDirectDraw, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_Initialize(self: *const T, param0: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).Initialize(@ptrCast(*const IDirectDraw, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_RestoreDisplayMode(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).RestoreDisplayMode(@ptrCast(*const IDirectDraw, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_SetCooperativeLevel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).SetCooperativeLevel(@ptrCast(*const IDirectDraw, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_SetDisplayMode(self: *const T, param0: u32, param1: u32, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).SetDisplayMode(@ptrCast(*const IDirectDraw, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw_WaitForVerticalBlank(self: *const T, param0: u32, param1: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw.VTable, self.vtable).WaitForVerticalBlank(@ptrCast(*const IDirectDraw, self), param0, param1);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectDraw2_Value = @import("../zig.zig").Guid.initString("b3a6f3e0-2b43-11cf-a2de-00aa00b93356");
pub const IID_IDirectDraw2 = &IID_IDirectDraw2_Value;
pub const IDirectDraw2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Compact: fn(
            self: *const IDirectDraw2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateClipper: fn(
            self: *const IDirectDraw2,
            param0: u32,
            param1: **IDirectDrawClipper,
            param2: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePalette: fn(
            self: *const IDirectDraw2,
            param0: u32,
            param1: *PALETTEENTRY,
            param2: **IDirectDrawPalette,
            param3: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSurface: fn(
            self: *const IDirectDraw2,
            param0: *DDSURFACEDESC,
            param1: **IDirectDrawSurface,
            param2: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DuplicateSurface: fn(
            self: *const IDirectDraw2,
            param0: *IDirectDrawSurface,
            param1: **IDirectDrawSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDisplayModes: fn(
            self: *const IDirectDraw2,
            param0: u32,
            param1: *DDSURFACEDESC,
            param2: *c_void,
            param3: LPDDENUMMODESCALLBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumSurfaces: fn(
            self: *const IDirectDraw2,
            param0: u32,
            param1: *DDSURFACEDESC,
            param2: *c_void,
            param3: LPDDENUMSURFACESCALLBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FlipToGDISurface: fn(
            self: *const IDirectDraw2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaps: fn(
            self: *const IDirectDraw2,
            param0: *DDCAPS_DX7,
            param1: *DDCAPS_DX7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayMode: fn(
            self: *const IDirectDraw2,
            param0: *DDSURFACEDESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFourCCCodes: fn(
            self: *const IDirectDraw2,
            param0: *u32,
            param1: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGDISurface: fn(
            self: *const IDirectDraw2,
            param0: **IDirectDrawSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMonitorFrequency: fn(
            self: *const IDirectDraw2,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScanLine: fn(
            self: *const IDirectDraw2,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVerticalBlankStatus: fn(
            self: *const IDirectDraw2,
            param0: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectDraw2,
            param0: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestoreDisplayMode: fn(
            self: *const IDirectDraw2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCooperativeLevel: fn(
            self: *const IDirectDraw2,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDisplayMode: fn(
            self: *const IDirectDraw2,
            param0: u32,
            param1: u32,
            param2: u32,
            param3: u32,
            param4: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WaitForVerticalBlank: fn(
            self: *const IDirectDraw2,
            param0: u32,
            param1: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAvailableVidMem: fn(
            self: *const IDirectDraw2,
            param0: *DDSCAPS,
            param1: *u32,
            param2: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_Compact(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).Compact(@ptrCast(*const IDirectDraw2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_CreateClipper(self: *const T, param0: u32, param1: **IDirectDrawClipper, param2: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).CreateClipper(@ptrCast(*const IDirectDraw2, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_CreatePalette(self: *const T, param0: u32, param1: *PALETTEENTRY, param2: **IDirectDrawPalette, param3: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).CreatePalette(@ptrCast(*const IDirectDraw2, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_CreateSurface(self: *const T, param0: *DDSURFACEDESC, param1: **IDirectDrawSurface, param2: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).CreateSurface(@ptrCast(*const IDirectDraw2, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_DuplicateSurface(self: *const T, param0: *IDirectDrawSurface, param1: **IDirectDrawSurface) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).DuplicateSurface(@ptrCast(*const IDirectDraw2, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_EnumDisplayModes(self: *const T, param0: u32, param1: *DDSURFACEDESC, param2: *c_void, param3: LPDDENUMMODESCALLBACK) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).EnumDisplayModes(@ptrCast(*const IDirectDraw2, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_EnumSurfaces(self: *const T, param0: u32, param1: *DDSURFACEDESC, param2: *c_void, param3: LPDDENUMSURFACESCALLBACK) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).EnumSurfaces(@ptrCast(*const IDirectDraw2, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_FlipToGDISurface(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).FlipToGDISurface(@ptrCast(*const IDirectDraw2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_GetCaps(self: *const T, param0: *DDCAPS_DX7, param1: *DDCAPS_DX7) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).GetCaps(@ptrCast(*const IDirectDraw2, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_GetDisplayMode(self: *const T, param0: *DDSURFACEDESC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).GetDisplayMode(@ptrCast(*const IDirectDraw2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_GetFourCCCodes(self: *const T, param0: *u32, param1: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).GetFourCCCodes(@ptrCast(*const IDirectDraw2, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_GetGDISurface(self: *const T, param0: **IDirectDrawSurface) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).GetGDISurface(@ptrCast(*const IDirectDraw2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_GetMonitorFrequency(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).GetMonitorFrequency(@ptrCast(*const IDirectDraw2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_GetScanLine(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).GetScanLine(@ptrCast(*const IDirectDraw2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_GetVerticalBlankStatus(self: *const T, param0: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).GetVerticalBlankStatus(@ptrCast(*const IDirectDraw2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_Initialize(self: *const T, param0: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).Initialize(@ptrCast(*const IDirectDraw2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_RestoreDisplayMode(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).RestoreDisplayMode(@ptrCast(*const IDirectDraw2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_SetCooperativeLevel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).SetCooperativeLevel(@ptrCast(*const IDirectDraw2, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_SetDisplayMode(self: *const T, param0: u32, param1: u32, param2: u32, param3: u32, param4: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).SetDisplayMode(@ptrCast(*const IDirectDraw2, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_WaitForVerticalBlank(self: *const T, param0: u32, param1: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).WaitForVerticalBlank(@ptrCast(*const IDirectDraw2, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw2_GetAvailableVidMem(self: *const T, param0: *DDSCAPS, param1: *u32, param2: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw2.VTable, self.vtable).GetAvailableVidMem(@ptrCast(*const IDirectDraw2, self), param0, param1, param2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectDraw4_Value = @import("../zig.zig").Guid.initString("9c59509a-39bd-11d1-8c4a-00c04fd930c5");
pub const IID_IDirectDraw4 = &IID_IDirectDraw4_Value;
pub const IDirectDraw4 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Compact: fn(
            self: *const IDirectDraw4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateClipper: fn(
            self: *const IDirectDraw4,
            param0: u32,
            param1: **IDirectDrawClipper,
            param2: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePalette: fn(
            self: *const IDirectDraw4,
            param0: u32,
            param1: *PALETTEENTRY,
            param2: **IDirectDrawPalette,
            param3: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSurface: fn(
            self: *const IDirectDraw4,
            param0: *DDSURFACEDESC2,
            param1: **IDirectDrawSurface4,
            param2: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DuplicateSurface: fn(
            self: *const IDirectDraw4,
            param0: *IDirectDrawSurface4,
            param1: **IDirectDrawSurface4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDisplayModes: fn(
            self: *const IDirectDraw4,
            param0: u32,
            param1: *DDSURFACEDESC2,
            param2: *c_void,
            param3: LPDDENUMMODESCALLBACK2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumSurfaces: fn(
            self: *const IDirectDraw4,
            param0: u32,
            param1: *DDSURFACEDESC2,
            param2: *c_void,
            param3: LPDDENUMSURFACESCALLBACK2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FlipToGDISurface: fn(
            self: *const IDirectDraw4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaps: fn(
            self: *const IDirectDraw4,
            param0: *DDCAPS_DX7,
            param1: *DDCAPS_DX7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayMode: fn(
            self: *const IDirectDraw4,
            param0: *DDSURFACEDESC2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFourCCCodes: fn(
            self: *const IDirectDraw4,
            param0: *u32,
            param1: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGDISurface: fn(
            self: *const IDirectDraw4,
            param0: **IDirectDrawSurface4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMonitorFrequency: fn(
            self: *const IDirectDraw4,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScanLine: fn(
            self: *const IDirectDraw4,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVerticalBlankStatus: fn(
            self: *const IDirectDraw4,
            param0: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectDraw4,
            param0: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestoreDisplayMode: fn(
            self: *const IDirectDraw4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCooperativeLevel: fn(
            self: *const IDirectDraw4,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDisplayMode: fn(
            self: *const IDirectDraw4,
            param0: u32,
            param1: u32,
            param2: u32,
            param3: u32,
            param4: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WaitForVerticalBlank: fn(
            self: *const IDirectDraw4,
            param0: u32,
            param1: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAvailableVidMem: fn(
            self: *const IDirectDraw4,
            param0: *DDSCAPS2,
            param1: *u32,
            param2: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSurfaceFromDC: fn(
            self: *const IDirectDraw4,
            param0: HDC,
            param1: **IDirectDrawSurface4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestoreAllSurfaces: fn(
            self: *const IDirectDraw4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TestCooperativeLevel: fn(
            self: *const IDirectDraw4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceIdentifier: fn(
            self: *const IDirectDraw4,
            param0: *DDDEVICEIDENTIFIER,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_Compact(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).Compact(@ptrCast(*const IDirectDraw4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_CreateClipper(self: *const T, param0: u32, param1: **IDirectDrawClipper, param2: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).CreateClipper(@ptrCast(*const IDirectDraw4, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_CreatePalette(self: *const T, param0: u32, param1: *PALETTEENTRY, param2: **IDirectDrawPalette, param3: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).CreatePalette(@ptrCast(*const IDirectDraw4, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_CreateSurface(self: *const T, param0: *DDSURFACEDESC2, param1: **IDirectDrawSurface4, param2: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).CreateSurface(@ptrCast(*const IDirectDraw4, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_DuplicateSurface(self: *const T, param0: *IDirectDrawSurface4, param1: **IDirectDrawSurface4) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).DuplicateSurface(@ptrCast(*const IDirectDraw4, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_EnumDisplayModes(self: *const T, param0: u32, param1: *DDSURFACEDESC2, param2: *c_void, param3: LPDDENUMMODESCALLBACK2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).EnumDisplayModes(@ptrCast(*const IDirectDraw4, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_EnumSurfaces(self: *const T, param0: u32, param1: *DDSURFACEDESC2, param2: *c_void, param3: LPDDENUMSURFACESCALLBACK2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).EnumSurfaces(@ptrCast(*const IDirectDraw4, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_FlipToGDISurface(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).FlipToGDISurface(@ptrCast(*const IDirectDraw4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_GetCaps(self: *const T, param0: *DDCAPS_DX7, param1: *DDCAPS_DX7) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).GetCaps(@ptrCast(*const IDirectDraw4, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_GetDisplayMode(self: *const T, param0: *DDSURFACEDESC2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).GetDisplayMode(@ptrCast(*const IDirectDraw4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_GetFourCCCodes(self: *const T, param0: *u32, param1: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).GetFourCCCodes(@ptrCast(*const IDirectDraw4, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_GetGDISurface(self: *const T, param0: **IDirectDrawSurface4) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).GetGDISurface(@ptrCast(*const IDirectDraw4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_GetMonitorFrequency(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).GetMonitorFrequency(@ptrCast(*const IDirectDraw4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_GetScanLine(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).GetScanLine(@ptrCast(*const IDirectDraw4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_GetVerticalBlankStatus(self: *const T, param0: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).GetVerticalBlankStatus(@ptrCast(*const IDirectDraw4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_Initialize(self: *const T, param0: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).Initialize(@ptrCast(*const IDirectDraw4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_RestoreDisplayMode(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).RestoreDisplayMode(@ptrCast(*const IDirectDraw4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_SetCooperativeLevel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).SetCooperativeLevel(@ptrCast(*const IDirectDraw4, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_SetDisplayMode(self: *const T, param0: u32, param1: u32, param2: u32, param3: u32, param4: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).SetDisplayMode(@ptrCast(*const IDirectDraw4, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_WaitForVerticalBlank(self: *const T, param0: u32, param1: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).WaitForVerticalBlank(@ptrCast(*const IDirectDraw4, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_GetAvailableVidMem(self: *const T, param0: *DDSCAPS2, param1: *u32, param2: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).GetAvailableVidMem(@ptrCast(*const IDirectDraw4, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_GetSurfaceFromDC(self: *const T, param0: HDC, param1: **IDirectDrawSurface4) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).GetSurfaceFromDC(@ptrCast(*const IDirectDraw4, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_RestoreAllSurfaces(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).RestoreAllSurfaces(@ptrCast(*const IDirectDraw4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_TestCooperativeLevel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).TestCooperativeLevel(@ptrCast(*const IDirectDraw4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw4_GetDeviceIdentifier(self: *const T, param0: *DDDEVICEIDENTIFIER, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw4.VTable, self.vtable).GetDeviceIdentifier(@ptrCast(*const IDirectDraw4, self), param0, param1);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectDraw7_Value = @import("../zig.zig").Guid.initString("15e65ec0-3b9c-11d2-b92f-00609797ea5b");
pub const IID_IDirectDraw7 = &IID_IDirectDraw7_Value;
pub const IDirectDraw7 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Compact: fn(
            self: *const IDirectDraw7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateClipper: fn(
            self: *const IDirectDraw7,
            param0: u32,
            param1: **IDirectDrawClipper,
            param2: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePalette: fn(
            self: *const IDirectDraw7,
            param0: u32,
            param1: *PALETTEENTRY,
            param2: **IDirectDrawPalette,
            param3: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSurface: fn(
            self: *const IDirectDraw7,
            param0: *DDSURFACEDESC2,
            param1: **IDirectDrawSurface7,
            param2: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DuplicateSurface: fn(
            self: *const IDirectDraw7,
            param0: *IDirectDrawSurface7,
            param1: **IDirectDrawSurface7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDisplayModes: fn(
            self: *const IDirectDraw7,
            param0: u32,
            param1: *DDSURFACEDESC2,
            param2: *c_void,
            param3: LPDDENUMMODESCALLBACK2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumSurfaces: fn(
            self: *const IDirectDraw7,
            param0: u32,
            param1: *DDSURFACEDESC2,
            param2: *c_void,
            param3: LPDDENUMSURFACESCALLBACK7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FlipToGDISurface: fn(
            self: *const IDirectDraw7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaps: fn(
            self: *const IDirectDraw7,
            param0: *DDCAPS_DX7,
            param1: *DDCAPS_DX7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayMode: fn(
            self: *const IDirectDraw7,
            param0: *DDSURFACEDESC2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFourCCCodes: fn(
            self: *const IDirectDraw7,
            param0: *u32,
            param1: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGDISurface: fn(
            self: *const IDirectDraw7,
            param0: **IDirectDrawSurface7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMonitorFrequency: fn(
            self: *const IDirectDraw7,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScanLine: fn(
            self: *const IDirectDraw7,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVerticalBlankStatus: fn(
            self: *const IDirectDraw7,
            param0: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectDraw7,
            param0: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestoreDisplayMode: fn(
            self: *const IDirectDraw7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCooperativeLevel: fn(
            self: *const IDirectDraw7,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDisplayMode: fn(
            self: *const IDirectDraw7,
            param0: u32,
            param1: u32,
            param2: u32,
            param3: u32,
            param4: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WaitForVerticalBlank: fn(
            self: *const IDirectDraw7,
            param0: u32,
            param1: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAvailableVidMem: fn(
            self: *const IDirectDraw7,
            param0: *DDSCAPS2,
            param1: *u32,
            param2: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSurfaceFromDC: fn(
            self: *const IDirectDraw7,
            param0: HDC,
            param1: **IDirectDrawSurface7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestoreAllSurfaces: fn(
            self: *const IDirectDraw7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TestCooperativeLevel: fn(
            self: *const IDirectDraw7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceIdentifier: fn(
            self: *const IDirectDraw7,
            param0: *DDDEVICEIDENTIFIER2,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartModeTest: fn(
            self: *const IDirectDraw7,
            param0: *SIZE,
            param1: u32,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EvaluateMode: fn(
            self: *const IDirectDraw7,
            param0: u32,
            param1: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_Compact(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).Compact(@ptrCast(*const IDirectDraw7, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_CreateClipper(self: *const T, param0: u32, param1: **IDirectDrawClipper, param2: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).CreateClipper(@ptrCast(*const IDirectDraw7, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_CreatePalette(self: *const T, param0: u32, param1: *PALETTEENTRY, param2: **IDirectDrawPalette, param3: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).CreatePalette(@ptrCast(*const IDirectDraw7, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_CreateSurface(self: *const T, param0: *DDSURFACEDESC2, param1: **IDirectDrawSurface7, param2: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).CreateSurface(@ptrCast(*const IDirectDraw7, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_DuplicateSurface(self: *const T, param0: *IDirectDrawSurface7, param1: **IDirectDrawSurface7) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).DuplicateSurface(@ptrCast(*const IDirectDraw7, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_EnumDisplayModes(self: *const T, param0: u32, param1: *DDSURFACEDESC2, param2: *c_void, param3: LPDDENUMMODESCALLBACK2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).EnumDisplayModes(@ptrCast(*const IDirectDraw7, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_EnumSurfaces(self: *const T, param0: u32, param1: *DDSURFACEDESC2, param2: *c_void, param3: LPDDENUMSURFACESCALLBACK7) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).EnumSurfaces(@ptrCast(*const IDirectDraw7, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_FlipToGDISurface(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).FlipToGDISurface(@ptrCast(*const IDirectDraw7, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_GetCaps(self: *const T, param0: *DDCAPS_DX7, param1: *DDCAPS_DX7) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).GetCaps(@ptrCast(*const IDirectDraw7, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_GetDisplayMode(self: *const T, param0: *DDSURFACEDESC2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).GetDisplayMode(@ptrCast(*const IDirectDraw7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_GetFourCCCodes(self: *const T, param0: *u32, param1: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).GetFourCCCodes(@ptrCast(*const IDirectDraw7, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_GetGDISurface(self: *const T, param0: **IDirectDrawSurface7) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).GetGDISurface(@ptrCast(*const IDirectDraw7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_GetMonitorFrequency(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).GetMonitorFrequency(@ptrCast(*const IDirectDraw7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_GetScanLine(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).GetScanLine(@ptrCast(*const IDirectDraw7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_GetVerticalBlankStatus(self: *const T, param0: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).GetVerticalBlankStatus(@ptrCast(*const IDirectDraw7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_Initialize(self: *const T, param0: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).Initialize(@ptrCast(*const IDirectDraw7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_RestoreDisplayMode(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).RestoreDisplayMode(@ptrCast(*const IDirectDraw7, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_SetCooperativeLevel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).SetCooperativeLevel(@ptrCast(*const IDirectDraw7, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_SetDisplayMode(self: *const T, param0: u32, param1: u32, param2: u32, param3: u32, param4: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).SetDisplayMode(@ptrCast(*const IDirectDraw7, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_WaitForVerticalBlank(self: *const T, param0: u32, param1: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).WaitForVerticalBlank(@ptrCast(*const IDirectDraw7, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_GetAvailableVidMem(self: *const T, param0: *DDSCAPS2, param1: *u32, param2: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).GetAvailableVidMem(@ptrCast(*const IDirectDraw7, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_GetSurfaceFromDC(self: *const T, param0: HDC, param1: **IDirectDrawSurface7) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).GetSurfaceFromDC(@ptrCast(*const IDirectDraw7, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_RestoreAllSurfaces(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).RestoreAllSurfaces(@ptrCast(*const IDirectDraw7, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_TestCooperativeLevel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).TestCooperativeLevel(@ptrCast(*const IDirectDraw7, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_GetDeviceIdentifier(self: *const T, param0: *DDDEVICEIDENTIFIER2, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).GetDeviceIdentifier(@ptrCast(*const IDirectDraw7, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_StartModeTest(self: *const T, param0: *SIZE, param1: u32, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).StartModeTest(@ptrCast(*const IDirectDraw7, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDraw7_EvaluateMode(self: *const T, param0: u32, param1: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDraw7.VTable, self.vtable).EvaluateMode(@ptrCast(*const IDirectDraw7, self), param0, param1);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectDrawPalette_Value = @import("../zig.zig").Guid.initString("6c14db84-a733-11ce-a521-0020af0be560");
pub const IID_IDirectDrawPalette = &IID_IDirectDrawPalette_Value;
pub const IDirectDrawPalette = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCaps: fn(
            self: *const IDirectDrawPalette,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEntries: fn(
            self: *const IDirectDrawPalette,
            param0: u32,
            param1: u32,
            param2: u32,
            param3: *PALETTEENTRY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectDrawPalette,
            param0: *IDirectDraw,
            param1: u32,
            param2: *PALETTEENTRY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEntries: fn(
            self: *const IDirectDrawPalette,
            param0: u32,
            param1: u32,
            param2: u32,
            param3: *PALETTEENTRY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawPalette_GetCaps(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawPalette.VTable, self.vtable).GetCaps(@ptrCast(*const IDirectDrawPalette, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawPalette_GetEntries(self: *const T, param0: u32, param1: u32, param2: u32, param3: *PALETTEENTRY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawPalette.VTable, self.vtable).GetEntries(@ptrCast(*const IDirectDrawPalette, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawPalette_Initialize(self: *const T, param0: *IDirectDraw, param1: u32, param2: *PALETTEENTRY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawPalette.VTable, self.vtable).Initialize(@ptrCast(*const IDirectDrawPalette, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawPalette_SetEntries(self: *const T, param0: u32, param1: u32, param2: u32, param3: *PALETTEENTRY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawPalette.VTable, self.vtable).SetEntries(@ptrCast(*const IDirectDrawPalette, self), param0, param1, param2, param3);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectDrawClipper_Value = @import("../zig.zig").Guid.initString("6c14db85-a733-11ce-a521-0020af0be560");
pub const IID_IDirectDrawClipper = &IID_IDirectDrawClipper_Value;
pub const IDirectDrawClipper = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetClipList: fn(
            self: *const IDirectDrawClipper,
            param0: *RECT,
            param1: *RGNDATA,
            param2: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHWnd: fn(
            self: *const IDirectDrawClipper,
            param0: *HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectDrawClipper,
            param0: *IDirectDraw,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsClipListChanged: fn(
            self: *const IDirectDrawClipper,
            param0: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClipList: fn(
            self: *const IDirectDrawClipper,
            param0: *RGNDATA,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHWnd: fn(
            self: *const IDirectDrawClipper,
            param0: u32,
            param1: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawClipper_GetClipList(self: *const T, param0: *RECT, param1: *RGNDATA, param2: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawClipper.VTable, self.vtable).GetClipList(@ptrCast(*const IDirectDrawClipper, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawClipper_GetHWnd(self: *const T, param0: *HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawClipper.VTable, self.vtable).GetHWnd(@ptrCast(*const IDirectDrawClipper, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawClipper_Initialize(self: *const T, param0: *IDirectDraw, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawClipper.VTable, self.vtable).Initialize(@ptrCast(*const IDirectDrawClipper, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawClipper_IsClipListChanged(self: *const T, param0: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawClipper.VTable, self.vtable).IsClipListChanged(@ptrCast(*const IDirectDrawClipper, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawClipper_SetClipList(self: *const T, param0: *RGNDATA, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawClipper.VTable, self.vtable).SetClipList(@ptrCast(*const IDirectDrawClipper, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawClipper_SetHWnd(self: *const T, param0: u32, param1: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawClipper.VTable, self.vtable).SetHWnd(@ptrCast(*const IDirectDrawClipper, self), param0, param1);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectDrawSurface_Value = @import("../zig.zig").Guid.initString("6c14db81-a733-11ce-a521-0020af0be560");
pub const IID_IDirectDrawSurface = &IID_IDirectDrawSurface_Value;
pub const IDirectDrawSurface = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddAttachedSurface: fn(
            self: *const IDirectDrawSurface,
            param0: *IDirectDrawSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddOverlayDirtyRect: fn(
            self: *const IDirectDrawSurface,
            param0: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Blt: fn(
            self: *const IDirectDrawSurface,
            param0: *RECT,
            param1: *IDirectDrawSurface,
            param2: *RECT,
            param3: u32,
            param4: *DDBLTFX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BltBatch: fn(
            self: *const IDirectDrawSurface,
            param0: *DDBLTBATCH,
            param1: u32,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BltFast: fn(
            self: *const IDirectDrawSurface,
            param0: u32,
            param1: u32,
            param2: *IDirectDrawSurface,
            param3: *RECT,
            param4: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAttachedSurface: fn(
            self: *const IDirectDrawSurface,
            param0: u32,
            param1: *IDirectDrawSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumAttachedSurfaces: fn(
            self: *const IDirectDrawSurface,
            param0: *c_void,
            param1: LPDDENUMSURFACESCALLBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumOverlayZOrders: fn(
            self: *const IDirectDrawSurface,
            param0: u32,
            param1: *c_void,
            param2: LPDDENUMSURFACESCALLBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Flip: fn(
            self: *const IDirectDrawSurface,
            param0: *IDirectDrawSurface,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttachedSurface: fn(
            self: *const IDirectDrawSurface,
            param0: *DDSCAPS,
            param1: **IDirectDrawSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBltStatus: fn(
            self: *const IDirectDrawSurface,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaps: fn(
            self: *const IDirectDrawSurface,
            param0: *DDSCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClipper: fn(
            self: *const IDirectDrawSurface,
            param0: **IDirectDrawClipper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorKey: fn(
            self: *const IDirectDrawSurface,
            param0: u32,
            param1: *DDCOLORKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDC: fn(
            self: *const IDirectDrawSurface,
            param0: *HDC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlipStatus: fn(
            self: *const IDirectDrawSurface,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOverlayPosition: fn(
            self: *const IDirectDrawSurface,
            param0: *i32,
            param1: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPalette: fn(
            self: *const IDirectDrawSurface,
            param0: **IDirectDrawPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelFormat: fn(
            self: *const IDirectDrawSurface,
            param0: *DDPIXELFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSurfaceDesc: fn(
            self: *const IDirectDrawSurface,
            param0: *DDSURFACEDESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectDrawSurface,
            param0: *IDirectDraw,
            param1: *DDSURFACEDESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsLost: fn(
            self: *const IDirectDrawSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Lock: fn(
            self: *const IDirectDrawSurface,
            param0: *RECT,
            param1: *DDSURFACEDESC,
            param2: u32,
            param3: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseDC: fn(
            self: *const IDirectDrawSurface,
            param0: HDC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Restore: fn(
            self: *const IDirectDrawSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClipper: fn(
            self: *const IDirectDrawSurface,
            param0: *IDirectDrawClipper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColorKey: fn(
            self: *const IDirectDrawSurface,
            param0: u32,
            param1: *DDCOLORKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOverlayPosition: fn(
            self: *const IDirectDrawSurface,
            param0: i32,
            param1: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPalette: fn(
            self: *const IDirectDrawSurface,
            param0: *IDirectDrawPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unlock: fn(
            self: *const IDirectDrawSurface,
            param0: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateOverlay: fn(
            self: *const IDirectDrawSurface,
            param0: *RECT,
            param1: *IDirectDrawSurface,
            param2: *RECT,
            param3: u32,
            param4: *DDOVERLAYFX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateOverlayDisplay: fn(
            self: *const IDirectDrawSurface,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateOverlayZOrder: fn(
            self: *const IDirectDrawSurface,
            param0: u32,
            param1: *IDirectDrawSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_AddAttachedSurface(self: *const T, param0: *IDirectDrawSurface) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).AddAttachedSurface(@ptrCast(*const IDirectDrawSurface, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_AddOverlayDirtyRect(self: *const T, param0: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).AddOverlayDirtyRect(@ptrCast(*const IDirectDrawSurface, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_Blt(self: *const T, param0: *RECT, param1: *IDirectDrawSurface, param2: *RECT, param3: u32, param4: *DDBLTFX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).Blt(@ptrCast(*const IDirectDrawSurface, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_BltBatch(self: *const T, param0: *DDBLTBATCH, param1: u32, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).BltBatch(@ptrCast(*const IDirectDrawSurface, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_BltFast(self: *const T, param0: u32, param1: u32, param2: *IDirectDrawSurface, param3: *RECT, param4: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).BltFast(@ptrCast(*const IDirectDrawSurface, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_DeleteAttachedSurface(self: *const T, param0: u32, param1: *IDirectDrawSurface) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).DeleteAttachedSurface(@ptrCast(*const IDirectDrawSurface, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_EnumAttachedSurfaces(self: *const T, param0: *c_void, param1: LPDDENUMSURFACESCALLBACK) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).EnumAttachedSurfaces(@ptrCast(*const IDirectDrawSurface, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_EnumOverlayZOrders(self: *const T, param0: u32, param1: *c_void, param2: LPDDENUMSURFACESCALLBACK) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).EnumOverlayZOrders(@ptrCast(*const IDirectDrawSurface, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_Flip(self: *const T, param0: *IDirectDrawSurface, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).Flip(@ptrCast(*const IDirectDrawSurface, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_GetAttachedSurface(self: *const T, param0: *DDSCAPS, param1: **IDirectDrawSurface) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).GetAttachedSurface(@ptrCast(*const IDirectDrawSurface, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_GetBltStatus(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).GetBltStatus(@ptrCast(*const IDirectDrawSurface, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_GetCaps(self: *const T, param0: *DDSCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).GetCaps(@ptrCast(*const IDirectDrawSurface, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_GetClipper(self: *const T, param0: **IDirectDrawClipper) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).GetClipper(@ptrCast(*const IDirectDrawSurface, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_GetColorKey(self: *const T, param0: u32, param1: *DDCOLORKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).GetColorKey(@ptrCast(*const IDirectDrawSurface, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_GetDC(self: *const T, param0: *HDC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).GetDC(@ptrCast(*const IDirectDrawSurface, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_GetFlipStatus(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).GetFlipStatus(@ptrCast(*const IDirectDrawSurface, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_GetOverlayPosition(self: *const T, param0: *i32, param1: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).GetOverlayPosition(@ptrCast(*const IDirectDrawSurface, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_GetPalette(self: *const T, param0: **IDirectDrawPalette) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).GetPalette(@ptrCast(*const IDirectDrawSurface, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_GetPixelFormat(self: *const T, param0: *DDPIXELFORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).GetPixelFormat(@ptrCast(*const IDirectDrawSurface, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_GetSurfaceDesc(self: *const T, param0: *DDSURFACEDESC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).GetSurfaceDesc(@ptrCast(*const IDirectDrawSurface, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_Initialize(self: *const T, param0: *IDirectDraw, param1: *DDSURFACEDESC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).Initialize(@ptrCast(*const IDirectDrawSurface, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_IsLost(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).IsLost(@ptrCast(*const IDirectDrawSurface, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_Lock(self: *const T, param0: *RECT, param1: *DDSURFACEDESC, param2: u32, param3: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).Lock(@ptrCast(*const IDirectDrawSurface, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_ReleaseDC(self: *const T, param0: HDC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).ReleaseDC(@ptrCast(*const IDirectDrawSurface, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_Restore(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).Restore(@ptrCast(*const IDirectDrawSurface, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_SetClipper(self: *const T, param0: *IDirectDrawClipper) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).SetClipper(@ptrCast(*const IDirectDrawSurface, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_SetColorKey(self: *const T, param0: u32, param1: *DDCOLORKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).SetColorKey(@ptrCast(*const IDirectDrawSurface, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_SetOverlayPosition(self: *const T, param0: i32, param1: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).SetOverlayPosition(@ptrCast(*const IDirectDrawSurface, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_SetPalette(self: *const T, param0: *IDirectDrawPalette) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).SetPalette(@ptrCast(*const IDirectDrawSurface, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_Unlock(self: *const T, param0: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).Unlock(@ptrCast(*const IDirectDrawSurface, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_UpdateOverlay(self: *const T, param0: *RECT, param1: *IDirectDrawSurface, param2: *RECT, param3: u32, param4: *DDOVERLAYFX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).UpdateOverlay(@ptrCast(*const IDirectDrawSurface, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_UpdateOverlayDisplay(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).UpdateOverlayDisplay(@ptrCast(*const IDirectDrawSurface, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface_UpdateOverlayZOrder(self: *const T, param0: u32, param1: *IDirectDrawSurface) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface.VTable, self.vtable).UpdateOverlayZOrder(@ptrCast(*const IDirectDrawSurface, self), param0, param1);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectDrawSurface2_Value = @import("../zig.zig").Guid.initString("57805885-6eec-11cf-9441-a82303c10e27");
pub const IID_IDirectDrawSurface2 = &IID_IDirectDrawSurface2_Value;
pub const IDirectDrawSurface2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddAttachedSurface: fn(
            self: *const IDirectDrawSurface2,
            param0: *IDirectDrawSurface2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddOverlayDirtyRect: fn(
            self: *const IDirectDrawSurface2,
            param0: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Blt: fn(
            self: *const IDirectDrawSurface2,
            param0: *RECT,
            param1: *IDirectDrawSurface2,
            param2: *RECT,
            param3: u32,
            param4: *DDBLTFX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BltBatch: fn(
            self: *const IDirectDrawSurface2,
            param0: *DDBLTBATCH,
            param1: u32,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BltFast: fn(
            self: *const IDirectDrawSurface2,
            param0: u32,
            param1: u32,
            param2: *IDirectDrawSurface2,
            param3: *RECT,
            param4: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAttachedSurface: fn(
            self: *const IDirectDrawSurface2,
            param0: u32,
            param1: *IDirectDrawSurface2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumAttachedSurfaces: fn(
            self: *const IDirectDrawSurface2,
            param0: *c_void,
            param1: LPDDENUMSURFACESCALLBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumOverlayZOrders: fn(
            self: *const IDirectDrawSurface2,
            param0: u32,
            param1: *c_void,
            param2: LPDDENUMSURFACESCALLBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Flip: fn(
            self: *const IDirectDrawSurface2,
            param0: *IDirectDrawSurface2,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttachedSurface: fn(
            self: *const IDirectDrawSurface2,
            param0: *DDSCAPS,
            param1: **IDirectDrawSurface2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBltStatus: fn(
            self: *const IDirectDrawSurface2,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaps: fn(
            self: *const IDirectDrawSurface2,
            param0: *DDSCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClipper: fn(
            self: *const IDirectDrawSurface2,
            param0: **IDirectDrawClipper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorKey: fn(
            self: *const IDirectDrawSurface2,
            param0: u32,
            param1: *DDCOLORKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDC: fn(
            self: *const IDirectDrawSurface2,
            param0: *HDC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlipStatus: fn(
            self: *const IDirectDrawSurface2,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOverlayPosition: fn(
            self: *const IDirectDrawSurface2,
            param0: *i32,
            param1: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPalette: fn(
            self: *const IDirectDrawSurface2,
            param0: **IDirectDrawPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelFormat: fn(
            self: *const IDirectDrawSurface2,
            param0: *DDPIXELFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSurfaceDesc: fn(
            self: *const IDirectDrawSurface2,
            param0: *DDSURFACEDESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectDrawSurface2,
            param0: *IDirectDraw,
            param1: *DDSURFACEDESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsLost: fn(
            self: *const IDirectDrawSurface2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Lock: fn(
            self: *const IDirectDrawSurface2,
            param0: *RECT,
            param1: *DDSURFACEDESC,
            param2: u32,
            param3: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseDC: fn(
            self: *const IDirectDrawSurface2,
            param0: HDC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Restore: fn(
            self: *const IDirectDrawSurface2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClipper: fn(
            self: *const IDirectDrawSurface2,
            param0: *IDirectDrawClipper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColorKey: fn(
            self: *const IDirectDrawSurface2,
            param0: u32,
            param1: *DDCOLORKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOverlayPosition: fn(
            self: *const IDirectDrawSurface2,
            param0: i32,
            param1: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPalette: fn(
            self: *const IDirectDrawSurface2,
            param0: *IDirectDrawPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unlock: fn(
            self: *const IDirectDrawSurface2,
            param0: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateOverlay: fn(
            self: *const IDirectDrawSurface2,
            param0: *RECT,
            param1: *IDirectDrawSurface2,
            param2: *RECT,
            param3: u32,
            param4: *DDOVERLAYFX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateOverlayDisplay: fn(
            self: *const IDirectDrawSurface2,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateOverlayZOrder: fn(
            self: *const IDirectDrawSurface2,
            param0: u32,
            param1: *IDirectDrawSurface2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDDInterface: fn(
            self: *const IDirectDrawSurface2,
            param0: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PageLock: fn(
            self: *const IDirectDrawSurface2,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PageUnlock: fn(
            self: *const IDirectDrawSurface2,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_AddAttachedSurface(self: *const T, param0: *IDirectDrawSurface2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).AddAttachedSurface(@ptrCast(*const IDirectDrawSurface2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_AddOverlayDirtyRect(self: *const T, param0: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).AddOverlayDirtyRect(@ptrCast(*const IDirectDrawSurface2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_Blt(self: *const T, param0: *RECT, param1: *IDirectDrawSurface2, param2: *RECT, param3: u32, param4: *DDBLTFX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).Blt(@ptrCast(*const IDirectDrawSurface2, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_BltBatch(self: *const T, param0: *DDBLTBATCH, param1: u32, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).BltBatch(@ptrCast(*const IDirectDrawSurface2, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_BltFast(self: *const T, param0: u32, param1: u32, param2: *IDirectDrawSurface2, param3: *RECT, param4: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).BltFast(@ptrCast(*const IDirectDrawSurface2, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_DeleteAttachedSurface(self: *const T, param0: u32, param1: *IDirectDrawSurface2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).DeleteAttachedSurface(@ptrCast(*const IDirectDrawSurface2, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_EnumAttachedSurfaces(self: *const T, param0: *c_void, param1: LPDDENUMSURFACESCALLBACK) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).EnumAttachedSurfaces(@ptrCast(*const IDirectDrawSurface2, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_EnumOverlayZOrders(self: *const T, param0: u32, param1: *c_void, param2: LPDDENUMSURFACESCALLBACK) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).EnumOverlayZOrders(@ptrCast(*const IDirectDrawSurface2, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_Flip(self: *const T, param0: *IDirectDrawSurface2, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).Flip(@ptrCast(*const IDirectDrawSurface2, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_GetAttachedSurface(self: *const T, param0: *DDSCAPS, param1: **IDirectDrawSurface2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).GetAttachedSurface(@ptrCast(*const IDirectDrawSurface2, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_GetBltStatus(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).GetBltStatus(@ptrCast(*const IDirectDrawSurface2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_GetCaps(self: *const T, param0: *DDSCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).GetCaps(@ptrCast(*const IDirectDrawSurface2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_GetClipper(self: *const T, param0: **IDirectDrawClipper) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).GetClipper(@ptrCast(*const IDirectDrawSurface2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_GetColorKey(self: *const T, param0: u32, param1: *DDCOLORKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).GetColorKey(@ptrCast(*const IDirectDrawSurface2, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_GetDC(self: *const T, param0: *HDC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).GetDC(@ptrCast(*const IDirectDrawSurface2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_GetFlipStatus(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).GetFlipStatus(@ptrCast(*const IDirectDrawSurface2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_GetOverlayPosition(self: *const T, param0: *i32, param1: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).GetOverlayPosition(@ptrCast(*const IDirectDrawSurface2, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_GetPalette(self: *const T, param0: **IDirectDrawPalette) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).GetPalette(@ptrCast(*const IDirectDrawSurface2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_GetPixelFormat(self: *const T, param0: *DDPIXELFORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).GetPixelFormat(@ptrCast(*const IDirectDrawSurface2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_GetSurfaceDesc(self: *const T, param0: *DDSURFACEDESC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).GetSurfaceDesc(@ptrCast(*const IDirectDrawSurface2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_Initialize(self: *const T, param0: *IDirectDraw, param1: *DDSURFACEDESC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).Initialize(@ptrCast(*const IDirectDrawSurface2, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_IsLost(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).IsLost(@ptrCast(*const IDirectDrawSurface2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_Lock(self: *const T, param0: *RECT, param1: *DDSURFACEDESC, param2: u32, param3: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).Lock(@ptrCast(*const IDirectDrawSurface2, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_ReleaseDC(self: *const T, param0: HDC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).ReleaseDC(@ptrCast(*const IDirectDrawSurface2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_Restore(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).Restore(@ptrCast(*const IDirectDrawSurface2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_SetClipper(self: *const T, param0: *IDirectDrawClipper) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).SetClipper(@ptrCast(*const IDirectDrawSurface2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_SetColorKey(self: *const T, param0: u32, param1: *DDCOLORKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).SetColorKey(@ptrCast(*const IDirectDrawSurface2, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_SetOverlayPosition(self: *const T, param0: i32, param1: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).SetOverlayPosition(@ptrCast(*const IDirectDrawSurface2, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_SetPalette(self: *const T, param0: *IDirectDrawPalette) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).SetPalette(@ptrCast(*const IDirectDrawSurface2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_Unlock(self: *const T, param0: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).Unlock(@ptrCast(*const IDirectDrawSurface2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_UpdateOverlay(self: *const T, param0: *RECT, param1: *IDirectDrawSurface2, param2: *RECT, param3: u32, param4: *DDOVERLAYFX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).UpdateOverlay(@ptrCast(*const IDirectDrawSurface2, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_UpdateOverlayDisplay(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).UpdateOverlayDisplay(@ptrCast(*const IDirectDrawSurface2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_UpdateOverlayZOrder(self: *const T, param0: u32, param1: *IDirectDrawSurface2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).UpdateOverlayZOrder(@ptrCast(*const IDirectDrawSurface2, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_GetDDInterface(self: *const T, param0: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).GetDDInterface(@ptrCast(*const IDirectDrawSurface2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_PageLock(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).PageLock(@ptrCast(*const IDirectDrawSurface2, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface2_PageUnlock(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface2.VTable, self.vtable).PageUnlock(@ptrCast(*const IDirectDrawSurface2, self), param0);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectDrawSurface3_Value = @import("../zig.zig").Guid.initString("da044e00-69b2-11d0-a1d5-00aa00b8dfbb");
pub const IID_IDirectDrawSurface3 = &IID_IDirectDrawSurface3_Value;
pub const IDirectDrawSurface3 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddAttachedSurface: fn(
            self: *const IDirectDrawSurface3,
            param0: *IDirectDrawSurface3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddOverlayDirtyRect: fn(
            self: *const IDirectDrawSurface3,
            param0: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Blt: fn(
            self: *const IDirectDrawSurface3,
            param0: *RECT,
            param1: *IDirectDrawSurface3,
            param2: *RECT,
            param3: u32,
            param4: *DDBLTFX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BltBatch: fn(
            self: *const IDirectDrawSurface3,
            param0: *DDBLTBATCH,
            param1: u32,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BltFast: fn(
            self: *const IDirectDrawSurface3,
            param0: u32,
            param1: u32,
            param2: *IDirectDrawSurface3,
            param3: *RECT,
            param4: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAttachedSurface: fn(
            self: *const IDirectDrawSurface3,
            param0: u32,
            param1: *IDirectDrawSurface3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumAttachedSurfaces: fn(
            self: *const IDirectDrawSurface3,
            param0: *c_void,
            param1: LPDDENUMSURFACESCALLBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumOverlayZOrders: fn(
            self: *const IDirectDrawSurface3,
            param0: u32,
            param1: *c_void,
            param2: LPDDENUMSURFACESCALLBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Flip: fn(
            self: *const IDirectDrawSurface3,
            param0: *IDirectDrawSurface3,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttachedSurface: fn(
            self: *const IDirectDrawSurface3,
            param0: *DDSCAPS,
            param1: **IDirectDrawSurface3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBltStatus: fn(
            self: *const IDirectDrawSurface3,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaps: fn(
            self: *const IDirectDrawSurface3,
            param0: *DDSCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClipper: fn(
            self: *const IDirectDrawSurface3,
            param0: **IDirectDrawClipper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorKey: fn(
            self: *const IDirectDrawSurface3,
            param0: u32,
            param1: *DDCOLORKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDC: fn(
            self: *const IDirectDrawSurface3,
            param0: *HDC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlipStatus: fn(
            self: *const IDirectDrawSurface3,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOverlayPosition: fn(
            self: *const IDirectDrawSurface3,
            param0: *i32,
            param1: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPalette: fn(
            self: *const IDirectDrawSurface3,
            param0: **IDirectDrawPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelFormat: fn(
            self: *const IDirectDrawSurface3,
            param0: *DDPIXELFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSurfaceDesc: fn(
            self: *const IDirectDrawSurface3,
            param0: *DDSURFACEDESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectDrawSurface3,
            param0: *IDirectDraw,
            param1: *DDSURFACEDESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsLost: fn(
            self: *const IDirectDrawSurface3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Lock: fn(
            self: *const IDirectDrawSurface3,
            param0: *RECT,
            param1: *DDSURFACEDESC,
            param2: u32,
            param3: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseDC: fn(
            self: *const IDirectDrawSurface3,
            param0: HDC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Restore: fn(
            self: *const IDirectDrawSurface3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClipper: fn(
            self: *const IDirectDrawSurface3,
            param0: *IDirectDrawClipper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColorKey: fn(
            self: *const IDirectDrawSurface3,
            param0: u32,
            param1: *DDCOLORKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOverlayPosition: fn(
            self: *const IDirectDrawSurface3,
            param0: i32,
            param1: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPalette: fn(
            self: *const IDirectDrawSurface3,
            param0: *IDirectDrawPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unlock: fn(
            self: *const IDirectDrawSurface3,
            param0: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateOverlay: fn(
            self: *const IDirectDrawSurface3,
            param0: *RECT,
            param1: *IDirectDrawSurface3,
            param2: *RECT,
            param3: u32,
            param4: *DDOVERLAYFX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateOverlayDisplay: fn(
            self: *const IDirectDrawSurface3,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateOverlayZOrder: fn(
            self: *const IDirectDrawSurface3,
            param0: u32,
            param1: *IDirectDrawSurface3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDDInterface: fn(
            self: *const IDirectDrawSurface3,
            param0: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PageLock: fn(
            self: *const IDirectDrawSurface3,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PageUnlock: fn(
            self: *const IDirectDrawSurface3,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSurfaceDesc: fn(
            self: *const IDirectDrawSurface3,
            param0: *DDSURFACEDESC,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_AddAttachedSurface(self: *const T, param0: *IDirectDrawSurface3) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).AddAttachedSurface(@ptrCast(*const IDirectDrawSurface3, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_AddOverlayDirtyRect(self: *const T, param0: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).AddOverlayDirtyRect(@ptrCast(*const IDirectDrawSurface3, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_Blt(self: *const T, param0: *RECT, param1: *IDirectDrawSurface3, param2: *RECT, param3: u32, param4: *DDBLTFX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).Blt(@ptrCast(*const IDirectDrawSurface3, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_BltBatch(self: *const T, param0: *DDBLTBATCH, param1: u32, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).BltBatch(@ptrCast(*const IDirectDrawSurface3, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_BltFast(self: *const T, param0: u32, param1: u32, param2: *IDirectDrawSurface3, param3: *RECT, param4: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).BltFast(@ptrCast(*const IDirectDrawSurface3, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_DeleteAttachedSurface(self: *const T, param0: u32, param1: *IDirectDrawSurface3) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).DeleteAttachedSurface(@ptrCast(*const IDirectDrawSurface3, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_EnumAttachedSurfaces(self: *const T, param0: *c_void, param1: LPDDENUMSURFACESCALLBACK) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).EnumAttachedSurfaces(@ptrCast(*const IDirectDrawSurface3, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_EnumOverlayZOrders(self: *const T, param0: u32, param1: *c_void, param2: LPDDENUMSURFACESCALLBACK) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).EnumOverlayZOrders(@ptrCast(*const IDirectDrawSurface3, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_Flip(self: *const T, param0: *IDirectDrawSurface3, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).Flip(@ptrCast(*const IDirectDrawSurface3, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_GetAttachedSurface(self: *const T, param0: *DDSCAPS, param1: **IDirectDrawSurface3) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).GetAttachedSurface(@ptrCast(*const IDirectDrawSurface3, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_GetBltStatus(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).GetBltStatus(@ptrCast(*const IDirectDrawSurface3, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_GetCaps(self: *const T, param0: *DDSCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).GetCaps(@ptrCast(*const IDirectDrawSurface3, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_GetClipper(self: *const T, param0: **IDirectDrawClipper) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).GetClipper(@ptrCast(*const IDirectDrawSurface3, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_GetColorKey(self: *const T, param0: u32, param1: *DDCOLORKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).GetColorKey(@ptrCast(*const IDirectDrawSurface3, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_GetDC(self: *const T, param0: *HDC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).GetDC(@ptrCast(*const IDirectDrawSurface3, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_GetFlipStatus(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).GetFlipStatus(@ptrCast(*const IDirectDrawSurface3, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_GetOverlayPosition(self: *const T, param0: *i32, param1: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).GetOverlayPosition(@ptrCast(*const IDirectDrawSurface3, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_GetPalette(self: *const T, param0: **IDirectDrawPalette) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).GetPalette(@ptrCast(*const IDirectDrawSurface3, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_GetPixelFormat(self: *const T, param0: *DDPIXELFORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).GetPixelFormat(@ptrCast(*const IDirectDrawSurface3, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_GetSurfaceDesc(self: *const T, param0: *DDSURFACEDESC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).GetSurfaceDesc(@ptrCast(*const IDirectDrawSurface3, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_Initialize(self: *const T, param0: *IDirectDraw, param1: *DDSURFACEDESC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).Initialize(@ptrCast(*const IDirectDrawSurface3, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_IsLost(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).IsLost(@ptrCast(*const IDirectDrawSurface3, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_Lock(self: *const T, param0: *RECT, param1: *DDSURFACEDESC, param2: u32, param3: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).Lock(@ptrCast(*const IDirectDrawSurface3, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_ReleaseDC(self: *const T, param0: HDC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).ReleaseDC(@ptrCast(*const IDirectDrawSurface3, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_Restore(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).Restore(@ptrCast(*const IDirectDrawSurface3, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_SetClipper(self: *const T, param0: *IDirectDrawClipper) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).SetClipper(@ptrCast(*const IDirectDrawSurface3, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_SetColorKey(self: *const T, param0: u32, param1: *DDCOLORKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).SetColorKey(@ptrCast(*const IDirectDrawSurface3, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_SetOverlayPosition(self: *const T, param0: i32, param1: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).SetOverlayPosition(@ptrCast(*const IDirectDrawSurface3, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_SetPalette(self: *const T, param0: *IDirectDrawPalette) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).SetPalette(@ptrCast(*const IDirectDrawSurface3, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_Unlock(self: *const T, param0: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).Unlock(@ptrCast(*const IDirectDrawSurface3, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_UpdateOverlay(self: *const T, param0: *RECT, param1: *IDirectDrawSurface3, param2: *RECT, param3: u32, param4: *DDOVERLAYFX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).UpdateOverlay(@ptrCast(*const IDirectDrawSurface3, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_UpdateOverlayDisplay(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).UpdateOverlayDisplay(@ptrCast(*const IDirectDrawSurface3, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_UpdateOverlayZOrder(self: *const T, param0: u32, param1: *IDirectDrawSurface3) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).UpdateOverlayZOrder(@ptrCast(*const IDirectDrawSurface3, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_GetDDInterface(self: *const T, param0: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).GetDDInterface(@ptrCast(*const IDirectDrawSurface3, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_PageLock(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).PageLock(@ptrCast(*const IDirectDrawSurface3, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_PageUnlock(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).PageUnlock(@ptrCast(*const IDirectDrawSurface3, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface3_SetSurfaceDesc(self: *const T, param0: *DDSURFACEDESC, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface3.VTable, self.vtable).SetSurfaceDesc(@ptrCast(*const IDirectDrawSurface3, self), param0, param1);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectDrawSurface4_Value = @import("../zig.zig").Guid.initString("0b2b8630-ad35-11d0-8ea6-00609797ea5b");
pub const IID_IDirectDrawSurface4 = &IID_IDirectDrawSurface4_Value;
pub const IDirectDrawSurface4 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddAttachedSurface: fn(
            self: *const IDirectDrawSurface4,
            param0: *IDirectDrawSurface4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddOverlayDirtyRect: fn(
            self: *const IDirectDrawSurface4,
            param0: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Blt: fn(
            self: *const IDirectDrawSurface4,
            param0: *RECT,
            param1: *IDirectDrawSurface4,
            param2: *RECT,
            param3: u32,
            param4: *DDBLTFX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BltBatch: fn(
            self: *const IDirectDrawSurface4,
            param0: *DDBLTBATCH,
            param1: u32,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BltFast: fn(
            self: *const IDirectDrawSurface4,
            param0: u32,
            param1: u32,
            param2: *IDirectDrawSurface4,
            param3: *RECT,
            param4: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAttachedSurface: fn(
            self: *const IDirectDrawSurface4,
            param0: u32,
            param1: *IDirectDrawSurface4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumAttachedSurfaces: fn(
            self: *const IDirectDrawSurface4,
            param0: *c_void,
            param1: LPDDENUMSURFACESCALLBACK2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumOverlayZOrders: fn(
            self: *const IDirectDrawSurface4,
            param0: u32,
            param1: *c_void,
            param2: LPDDENUMSURFACESCALLBACK2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Flip: fn(
            self: *const IDirectDrawSurface4,
            param0: *IDirectDrawSurface4,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttachedSurface: fn(
            self: *const IDirectDrawSurface4,
            param0: *DDSCAPS2,
            param1: **IDirectDrawSurface4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBltStatus: fn(
            self: *const IDirectDrawSurface4,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaps: fn(
            self: *const IDirectDrawSurface4,
            param0: *DDSCAPS2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClipper: fn(
            self: *const IDirectDrawSurface4,
            param0: **IDirectDrawClipper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorKey: fn(
            self: *const IDirectDrawSurface4,
            param0: u32,
            param1: *DDCOLORKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDC: fn(
            self: *const IDirectDrawSurface4,
            param0: *HDC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlipStatus: fn(
            self: *const IDirectDrawSurface4,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOverlayPosition: fn(
            self: *const IDirectDrawSurface4,
            param0: *i32,
            param1: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPalette: fn(
            self: *const IDirectDrawSurface4,
            param0: **IDirectDrawPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelFormat: fn(
            self: *const IDirectDrawSurface4,
            param0: *DDPIXELFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSurfaceDesc: fn(
            self: *const IDirectDrawSurface4,
            param0: *DDSURFACEDESC2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectDrawSurface4,
            param0: *IDirectDraw,
            param1: *DDSURFACEDESC2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsLost: fn(
            self: *const IDirectDrawSurface4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Lock: fn(
            self: *const IDirectDrawSurface4,
            param0: *RECT,
            param1: *DDSURFACEDESC2,
            param2: u32,
            param3: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseDC: fn(
            self: *const IDirectDrawSurface4,
            param0: HDC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Restore: fn(
            self: *const IDirectDrawSurface4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClipper: fn(
            self: *const IDirectDrawSurface4,
            param0: *IDirectDrawClipper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColorKey: fn(
            self: *const IDirectDrawSurface4,
            param0: u32,
            param1: *DDCOLORKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOverlayPosition: fn(
            self: *const IDirectDrawSurface4,
            param0: i32,
            param1: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPalette: fn(
            self: *const IDirectDrawSurface4,
            param0: *IDirectDrawPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unlock: fn(
            self: *const IDirectDrawSurface4,
            param0: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateOverlay: fn(
            self: *const IDirectDrawSurface4,
            param0: *RECT,
            param1: *IDirectDrawSurface4,
            param2: *RECT,
            param3: u32,
            param4: *DDOVERLAYFX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateOverlayDisplay: fn(
            self: *const IDirectDrawSurface4,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateOverlayZOrder: fn(
            self: *const IDirectDrawSurface4,
            param0: u32,
            param1: *IDirectDrawSurface4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDDInterface: fn(
            self: *const IDirectDrawSurface4,
            param0: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PageLock: fn(
            self: *const IDirectDrawSurface4,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PageUnlock: fn(
            self: *const IDirectDrawSurface4,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSurfaceDesc: fn(
            self: *const IDirectDrawSurface4,
            param0: *DDSURFACEDESC2,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrivateData: fn(
            self: *const IDirectDrawSurface4,
            param0: *const Guid,
            param1: *c_void,
            param2: u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrivateData: fn(
            self: *const IDirectDrawSurface4,
            param0: *const Guid,
            param1: *c_void,
            param2: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FreePrivateData: fn(
            self: *const IDirectDrawSurface4,
            param0: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUniquenessValue: fn(
            self: *const IDirectDrawSurface4,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChangeUniquenessValue: fn(
            self: *const IDirectDrawSurface4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_AddAttachedSurface(self: *const T, param0: *IDirectDrawSurface4) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).AddAttachedSurface(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_AddOverlayDirtyRect(self: *const T, param0: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).AddOverlayDirtyRect(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_Blt(self: *const T, param0: *RECT, param1: *IDirectDrawSurface4, param2: *RECT, param3: u32, param4: *DDBLTFX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).Blt(@ptrCast(*const IDirectDrawSurface4, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_BltBatch(self: *const T, param0: *DDBLTBATCH, param1: u32, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).BltBatch(@ptrCast(*const IDirectDrawSurface4, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_BltFast(self: *const T, param0: u32, param1: u32, param2: *IDirectDrawSurface4, param3: *RECT, param4: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).BltFast(@ptrCast(*const IDirectDrawSurface4, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_DeleteAttachedSurface(self: *const T, param0: u32, param1: *IDirectDrawSurface4) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).DeleteAttachedSurface(@ptrCast(*const IDirectDrawSurface4, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_EnumAttachedSurfaces(self: *const T, param0: *c_void, param1: LPDDENUMSURFACESCALLBACK2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).EnumAttachedSurfaces(@ptrCast(*const IDirectDrawSurface4, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_EnumOverlayZOrders(self: *const T, param0: u32, param1: *c_void, param2: LPDDENUMSURFACESCALLBACK2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).EnumOverlayZOrders(@ptrCast(*const IDirectDrawSurface4, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_Flip(self: *const T, param0: *IDirectDrawSurface4, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).Flip(@ptrCast(*const IDirectDrawSurface4, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_GetAttachedSurface(self: *const T, param0: *DDSCAPS2, param1: **IDirectDrawSurface4) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).GetAttachedSurface(@ptrCast(*const IDirectDrawSurface4, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_GetBltStatus(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).GetBltStatus(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_GetCaps(self: *const T, param0: *DDSCAPS2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).GetCaps(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_GetClipper(self: *const T, param0: **IDirectDrawClipper) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).GetClipper(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_GetColorKey(self: *const T, param0: u32, param1: *DDCOLORKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).GetColorKey(@ptrCast(*const IDirectDrawSurface4, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_GetDC(self: *const T, param0: *HDC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).GetDC(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_GetFlipStatus(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).GetFlipStatus(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_GetOverlayPosition(self: *const T, param0: *i32, param1: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).GetOverlayPosition(@ptrCast(*const IDirectDrawSurface4, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_GetPalette(self: *const T, param0: **IDirectDrawPalette) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).GetPalette(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_GetPixelFormat(self: *const T, param0: *DDPIXELFORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).GetPixelFormat(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_GetSurfaceDesc(self: *const T, param0: *DDSURFACEDESC2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).GetSurfaceDesc(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_Initialize(self: *const T, param0: *IDirectDraw, param1: *DDSURFACEDESC2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).Initialize(@ptrCast(*const IDirectDrawSurface4, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_IsLost(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).IsLost(@ptrCast(*const IDirectDrawSurface4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_Lock(self: *const T, param0: *RECT, param1: *DDSURFACEDESC2, param2: u32, param3: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).Lock(@ptrCast(*const IDirectDrawSurface4, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_ReleaseDC(self: *const T, param0: HDC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).ReleaseDC(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_Restore(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).Restore(@ptrCast(*const IDirectDrawSurface4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_SetClipper(self: *const T, param0: *IDirectDrawClipper) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).SetClipper(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_SetColorKey(self: *const T, param0: u32, param1: *DDCOLORKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).SetColorKey(@ptrCast(*const IDirectDrawSurface4, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_SetOverlayPosition(self: *const T, param0: i32, param1: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).SetOverlayPosition(@ptrCast(*const IDirectDrawSurface4, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_SetPalette(self: *const T, param0: *IDirectDrawPalette) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).SetPalette(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_Unlock(self: *const T, param0: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).Unlock(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_UpdateOverlay(self: *const T, param0: *RECT, param1: *IDirectDrawSurface4, param2: *RECT, param3: u32, param4: *DDOVERLAYFX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).UpdateOverlay(@ptrCast(*const IDirectDrawSurface4, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_UpdateOverlayDisplay(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).UpdateOverlayDisplay(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_UpdateOverlayZOrder(self: *const T, param0: u32, param1: *IDirectDrawSurface4) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).UpdateOverlayZOrder(@ptrCast(*const IDirectDrawSurface4, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_GetDDInterface(self: *const T, param0: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).GetDDInterface(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_PageLock(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).PageLock(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_PageUnlock(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).PageUnlock(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_SetSurfaceDesc(self: *const T, param0: *DDSURFACEDESC2, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).SetSurfaceDesc(@ptrCast(*const IDirectDrawSurface4, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_SetPrivateData(self: *const T, param0: *const Guid, param1: *c_void, param2: u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).SetPrivateData(@ptrCast(*const IDirectDrawSurface4, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_GetPrivateData(self: *const T, param0: *const Guid, param1: *c_void, param2: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).GetPrivateData(@ptrCast(*const IDirectDrawSurface4, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_FreePrivateData(self: *const T, param0: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).FreePrivateData(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_GetUniquenessValue(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).GetUniquenessValue(@ptrCast(*const IDirectDrawSurface4, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface4_ChangeUniquenessValue(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface4.VTable, self.vtable).ChangeUniquenessValue(@ptrCast(*const IDirectDrawSurface4, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectDrawSurface7_Value = @import("../zig.zig").Guid.initString("06675a80-3b9b-11d2-b92f-00609797ea5b");
pub const IID_IDirectDrawSurface7 = &IID_IDirectDrawSurface7_Value;
pub const IDirectDrawSurface7 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddAttachedSurface: fn(
            self: *const IDirectDrawSurface7,
            param0: *IDirectDrawSurface7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddOverlayDirtyRect: fn(
            self: *const IDirectDrawSurface7,
            param0: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Blt: fn(
            self: *const IDirectDrawSurface7,
            param0: *RECT,
            param1: *IDirectDrawSurface7,
            param2: *RECT,
            param3: u32,
            param4: *DDBLTFX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BltBatch: fn(
            self: *const IDirectDrawSurface7,
            param0: *DDBLTBATCH,
            param1: u32,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BltFast: fn(
            self: *const IDirectDrawSurface7,
            param0: u32,
            param1: u32,
            param2: *IDirectDrawSurface7,
            param3: *RECT,
            param4: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAttachedSurface: fn(
            self: *const IDirectDrawSurface7,
            param0: u32,
            param1: *IDirectDrawSurface7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumAttachedSurfaces: fn(
            self: *const IDirectDrawSurface7,
            param0: *c_void,
            param1: LPDDENUMSURFACESCALLBACK7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumOverlayZOrders: fn(
            self: *const IDirectDrawSurface7,
            param0: u32,
            param1: *c_void,
            param2: LPDDENUMSURFACESCALLBACK7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Flip: fn(
            self: *const IDirectDrawSurface7,
            param0: *IDirectDrawSurface7,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttachedSurface: fn(
            self: *const IDirectDrawSurface7,
            param0: *DDSCAPS2,
            param1: **IDirectDrawSurface7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBltStatus: fn(
            self: *const IDirectDrawSurface7,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaps: fn(
            self: *const IDirectDrawSurface7,
            param0: *DDSCAPS2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClipper: fn(
            self: *const IDirectDrawSurface7,
            param0: **IDirectDrawClipper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorKey: fn(
            self: *const IDirectDrawSurface7,
            param0: u32,
            param1: *DDCOLORKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDC: fn(
            self: *const IDirectDrawSurface7,
            param0: *HDC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlipStatus: fn(
            self: *const IDirectDrawSurface7,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOverlayPosition: fn(
            self: *const IDirectDrawSurface7,
            param0: *i32,
            param1: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPalette: fn(
            self: *const IDirectDrawSurface7,
            param0: **IDirectDrawPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelFormat: fn(
            self: *const IDirectDrawSurface7,
            param0: *DDPIXELFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSurfaceDesc: fn(
            self: *const IDirectDrawSurface7,
            param0: *DDSURFACEDESC2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectDrawSurface7,
            param0: *IDirectDraw,
            param1: *DDSURFACEDESC2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsLost: fn(
            self: *const IDirectDrawSurface7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Lock: fn(
            self: *const IDirectDrawSurface7,
            param0: *RECT,
            param1: *DDSURFACEDESC2,
            param2: u32,
            param3: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseDC: fn(
            self: *const IDirectDrawSurface7,
            param0: HDC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Restore: fn(
            self: *const IDirectDrawSurface7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClipper: fn(
            self: *const IDirectDrawSurface7,
            param0: *IDirectDrawClipper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColorKey: fn(
            self: *const IDirectDrawSurface7,
            param0: u32,
            param1: *DDCOLORKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOverlayPosition: fn(
            self: *const IDirectDrawSurface7,
            param0: i32,
            param1: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPalette: fn(
            self: *const IDirectDrawSurface7,
            param0: *IDirectDrawPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unlock: fn(
            self: *const IDirectDrawSurface7,
            param0: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateOverlay: fn(
            self: *const IDirectDrawSurface7,
            param0: *RECT,
            param1: *IDirectDrawSurface7,
            param2: *RECT,
            param3: u32,
            param4: *DDOVERLAYFX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateOverlayDisplay: fn(
            self: *const IDirectDrawSurface7,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateOverlayZOrder: fn(
            self: *const IDirectDrawSurface7,
            param0: u32,
            param1: *IDirectDrawSurface7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDDInterface: fn(
            self: *const IDirectDrawSurface7,
            param0: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PageLock: fn(
            self: *const IDirectDrawSurface7,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PageUnlock: fn(
            self: *const IDirectDrawSurface7,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSurfaceDesc: fn(
            self: *const IDirectDrawSurface7,
            param0: *DDSURFACEDESC2,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrivateData: fn(
            self: *const IDirectDrawSurface7,
            param0: *const Guid,
            param1: *c_void,
            param2: u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrivateData: fn(
            self: *const IDirectDrawSurface7,
            param0: *const Guid,
            param1: *c_void,
            param2: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FreePrivateData: fn(
            self: *const IDirectDrawSurface7,
            param0: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUniquenessValue: fn(
            self: *const IDirectDrawSurface7,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChangeUniquenessValue: fn(
            self: *const IDirectDrawSurface7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPriority: fn(
            self: *const IDirectDrawSurface7,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPriority: fn(
            self: *const IDirectDrawSurface7,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLOD: fn(
            self: *const IDirectDrawSurface7,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLOD: fn(
            self: *const IDirectDrawSurface7,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_AddAttachedSurface(self: *const T, param0: *IDirectDrawSurface7) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).AddAttachedSurface(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_AddOverlayDirtyRect(self: *const T, param0: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).AddOverlayDirtyRect(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_Blt(self: *const T, param0: *RECT, param1: *IDirectDrawSurface7, param2: *RECT, param3: u32, param4: *DDBLTFX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).Blt(@ptrCast(*const IDirectDrawSurface7, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_BltBatch(self: *const T, param0: *DDBLTBATCH, param1: u32, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).BltBatch(@ptrCast(*const IDirectDrawSurface7, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_BltFast(self: *const T, param0: u32, param1: u32, param2: *IDirectDrawSurface7, param3: *RECT, param4: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).BltFast(@ptrCast(*const IDirectDrawSurface7, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_DeleteAttachedSurface(self: *const T, param0: u32, param1: *IDirectDrawSurface7) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).DeleteAttachedSurface(@ptrCast(*const IDirectDrawSurface7, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_EnumAttachedSurfaces(self: *const T, param0: *c_void, param1: LPDDENUMSURFACESCALLBACK7) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).EnumAttachedSurfaces(@ptrCast(*const IDirectDrawSurface7, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_EnumOverlayZOrders(self: *const T, param0: u32, param1: *c_void, param2: LPDDENUMSURFACESCALLBACK7) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).EnumOverlayZOrders(@ptrCast(*const IDirectDrawSurface7, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_Flip(self: *const T, param0: *IDirectDrawSurface7, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).Flip(@ptrCast(*const IDirectDrawSurface7, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_GetAttachedSurface(self: *const T, param0: *DDSCAPS2, param1: **IDirectDrawSurface7) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).GetAttachedSurface(@ptrCast(*const IDirectDrawSurface7, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_GetBltStatus(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).GetBltStatus(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_GetCaps(self: *const T, param0: *DDSCAPS2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).GetCaps(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_GetClipper(self: *const T, param0: **IDirectDrawClipper) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).GetClipper(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_GetColorKey(self: *const T, param0: u32, param1: *DDCOLORKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).GetColorKey(@ptrCast(*const IDirectDrawSurface7, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_GetDC(self: *const T, param0: *HDC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).GetDC(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_GetFlipStatus(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).GetFlipStatus(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_GetOverlayPosition(self: *const T, param0: *i32, param1: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).GetOverlayPosition(@ptrCast(*const IDirectDrawSurface7, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_GetPalette(self: *const T, param0: **IDirectDrawPalette) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).GetPalette(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_GetPixelFormat(self: *const T, param0: *DDPIXELFORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).GetPixelFormat(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_GetSurfaceDesc(self: *const T, param0: *DDSURFACEDESC2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).GetSurfaceDesc(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_Initialize(self: *const T, param0: *IDirectDraw, param1: *DDSURFACEDESC2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).Initialize(@ptrCast(*const IDirectDrawSurface7, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_IsLost(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).IsLost(@ptrCast(*const IDirectDrawSurface7, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_Lock(self: *const T, param0: *RECT, param1: *DDSURFACEDESC2, param2: u32, param3: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).Lock(@ptrCast(*const IDirectDrawSurface7, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_ReleaseDC(self: *const T, param0: HDC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).ReleaseDC(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_Restore(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).Restore(@ptrCast(*const IDirectDrawSurface7, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_SetClipper(self: *const T, param0: *IDirectDrawClipper) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).SetClipper(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_SetColorKey(self: *const T, param0: u32, param1: *DDCOLORKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).SetColorKey(@ptrCast(*const IDirectDrawSurface7, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_SetOverlayPosition(self: *const T, param0: i32, param1: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).SetOverlayPosition(@ptrCast(*const IDirectDrawSurface7, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_SetPalette(self: *const T, param0: *IDirectDrawPalette) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).SetPalette(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_Unlock(self: *const T, param0: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).Unlock(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_UpdateOverlay(self: *const T, param0: *RECT, param1: *IDirectDrawSurface7, param2: *RECT, param3: u32, param4: *DDOVERLAYFX) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).UpdateOverlay(@ptrCast(*const IDirectDrawSurface7, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_UpdateOverlayDisplay(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).UpdateOverlayDisplay(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_UpdateOverlayZOrder(self: *const T, param0: u32, param1: *IDirectDrawSurface7) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).UpdateOverlayZOrder(@ptrCast(*const IDirectDrawSurface7, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_GetDDInterface(self: *const T, param0: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).GetDDInterface(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_PageLock(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).PageLock(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_PageUnlock(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).PageUnlock(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_SetSurfaceDesc(self: *const T, param0: *DDSURFACEDESC2, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).SetSurfaceDesc(@ptrCast(*const IDirectDrawSurface7, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_SetPrivateData(self: *const T, param0: *const Guid, param1: *c_void, param2: u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).SetPrivateData(@ptrCast(*const IDirectDrawSurface7, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_GetPrivateData(self: *const T, param0: *const Guid, param1: *c_void, param2: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).GetPrivateData(@ptrCast(*const IDirectDrawSurface7, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_FreePrivateData(self: *const T, param0: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).FreePrivateData(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_GetUniquenessValue(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).GetUniquenessValue(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_ChangeUniquenessValue(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).ChangeUniquenessValue(@ptrCast(*const IDirectDrawSurface7, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_SetPriority(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).SetPriority(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_GetPriority(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).GetPriority(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_SetLOD(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).SetLOD(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawSurface7_GetLOD(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawSurface7.VTable, self.vtable).GetLOD(@ptrCast(*const IDirectDrawSurface7, self), param0);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectDrawColorControl_Value = @import("../zig.zig").Guid.initString("4b9f0ee0-0d7e-11d0-9b06-00a0c903a3b8");
pub const IID_IDirectDrawColorControl = &IID_IDirectDrawColorControl_Value;
pub const IDirectDrawColorControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetColorControls: fn(
            self: *const IDirectDrawColorControl,
            param0: *DDCOLORCONTROL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColorControls: fn(
            self: *const IDirectDrawColorControl,
            param0: *DDCOLORCONTROL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawColorControl_GetColorControls(self: *const T, param0: *DDCOLORCONTROL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawColorControl.VTable, self.vtable).GetColorControls(@ptrCast(*const IDirectDrawColorControl, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawColorControl_SetColorControls(self: *const T, param0: *DDCOLORCONTROL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawColorControl.VTable, self.vtable).SetColorControls(@ptrCast(*const IDirectDrawColorControl, self), param0);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectDrawGammaControl_Value = @import("../zig.zig").Guid.initString("69c11c3e-b46b-11d1-ad7a-00c04fc29b4e");
pub const IID_IDirectDrawGammaControl = &IID_IDirectDrawGammaControl_Value;
pub const IDirectDrawGammaControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetGammaRamp: fn(
            self: *const IDirectDrawGammaControl,
            param0: u32,
            param1: *DDGAMMARAMP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGammaRamp: fn(
            self: *const IDirectDrawGammaControl,
            param0: u32,
            param1: *DDGAMMARAMP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawGammaControl_GetGammaRamp(self: *const T, param0: u32, param1: *DDGAMMARAMP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawGammaControl.VTable, self.vtable).GetGammaRamp(@ptrCast(*const IDirectDrawGammaControl, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectDrawGammaControl_SetGammaRamp(self: *const T, param0: u32, param1: *DDGAMMARAMP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectDrawGammaControl.VTable, self.vtable).SetGammaRamp(@ptrCast(*const IDirectDrawGammaControl, self), param0, param1);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DDSURFACEDESC = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwHeight: u32,
    dwWidth: u32,
    Anonymous1: DDSURFACEDESC._Anonymous1_e__Union,
    dwBackBufferCount: u32,
    Anonymous2: DDSURFACEDESC._Anonymous2_e__Union,
    dwAlphaBitDepth: u32,
    dwReserved: u32,
    lpSurface: *c_void,
    ddckCKDestOverlay: DDCOLORKEY,
    ddckCKDestBlt: DDCOLORKEY,
    ddckCKSrcOverlay: DDCOLORKEY,
    ddckCKSrcBlt: DDCOLORKEY,
    ddpfPixelFormat: DDPIXELFORMAT,
    ddsCaps: DDSCAPS,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const DDSURFACEDESC2 = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwHeight: u32,
    dwWidth: u32,
    Anonymous1: DDSURFACEDESC2._Anonymous1_e__Union,
    Anonymous2: DDSURFACEDESC2._Anonymous2_e__Union,
    Anonymous3: DDSURFACEDESC2._Anonymous3_e__Union,
    dwAlphaBitDepth: u32,
    dwReserved: u32,
    lpSurface: *c_void,
    Anonymous4: DDSURFACEDESC2._Anonymous4_e__Union,
    ddckCKDestBlt: DDCOLORKEY,
    ddckCKSrcOverlay: DDCOLORKEY,
    ddckCKSrcBlt: DDCOLORKEY,
    Anonymous5: DDSURFACEDESC2._Anonymous5_e__Union,
    ddsCaps: DDSCAPS2,
    dwTextureStage: u32,
    const _Anonymous4_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous5_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous3_e__Union = u32; // TODO: generate this nested type!
};

pub const DDOPTSURFACEDESC = extern struct {
    dwSize: u32,
    dwFlags: u32,
    ddSCaps: DDSCAPS2,
    ddOSCaps: DDOSCAPS,
    guid: Guid,
    dwCompressionRatio: u32,
};

pub const DDCOLORCONTROL = extern struct {
    dwSize: u32,
    dwFlags: u32,
    lBrightness: i32,
    lContrast: i32,
    lHue: i32,
    lSaturation: i32,
    lSharpness: i32,
    lGamma: i32,
    lColorEnable: i32,
    dwReserved1: u32,
};


//--------------------------------------------------------------------------------
// Section: Functions (7)
//--------------------------------------------------------------------------------
pub extern "DDRAW" fn DirectDrawEnumerateW(
    lpCallback: LPDDENUMCALLBACKW,
    lpContext: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DDRAW" fn DirectDrawEnumerateA(
    lpCallback: LPDDENUMCALLBACKA,
    lpContext: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DDRAW" fn DirectDrawEnumerateExW(
    lpCallback: LPDDENUMCALLBACKEXW,
    lpContext: *c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DDRAW" fn DirectDrawEnumerateExA(
    lpCallback: LPDDENUMCALLBACKEXA,
    lpContext: *c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DDRAW" fn DirectDrawCreate(
    lpGUID: *Guid,
    lplpDD: **IDirectDraw,
    pUnkOuter: *IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DDRAW" fn DirectDrawCreateEx(
    lpGuid: *Guid,
    lplpDD: **c_void,
    iid: *const Guid,
    pUnkOuter: *IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DDRAW" fn DirectDrawCreateClipper(
    dwFlags: u32,
    lplpDDClipper: **IDirectDrawClipper,
    pUnkOuter: *IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (2)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const DirectDrawEnumerate = DirectDrawEnumerateA;
        pub const DirectDrawEnumerateEx = DirectDrawEnumerateExA;
    },
    .wide => struct {
        pub const DirectDrawEnumerate = DirectDrawEnumerateW;
        pub const DirectDrawEnumerateEx = DirectDrawEnumerateExW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const DirectDrawEnumerate = *opaque{};
        pub const DirectDrawEnumerateEx = *opaque{};
    } else struct {
        pub const DirectDrawEnumerate = @compileError("'DirectDrawEnumerate' requires that UNICODE be set to true or false in the root module");
        pub const DirectDrawEnumerateEx = @compileError("'DirectDrawEnumerateEx' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (16)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const HDC = @import("gdi.zig").HDC;
const HMONITOR = @import("gdi.zig").HMONITOR;
const PWSTR = @import("system_services.zig").PWSTR;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const PSTR = @import("system_services.zig").PSTR;
const RECT = @import("display_devices.zig").RECT;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const LARGE_INTEGER = @import("system_services.zig").LARGE_INTEGER;
const HANDLE = @import("system_services.zig").HANDLE;
const DDCOLORKEY = @import("direct_show.zig").DDCOLORKEY;
const PALETTEENTRY = @import("gdi.zig").PALETTEENTRY;
const SIZE = @import("display_devices.zig").SIZE;
const RGNDATA = @import("gdi.zig").RGNDATA;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = LPDDENUMCALLBACKA;
    _ = LPDDENUMCALLBACKW;
    _ = LPDDENUMCALLBACKEXA;
    _ = LPDDENUMCALLBACKEXW;
    _ = LPDIRECTDRAWENUMERATEEXA;
    _ = LPDIRECTDRAWENUMERATEEXW;
    _ = LPDDENUMCALLBACK;
    _ = LPDDENUMCALLBACKEX;
    _ = LPDIRECTDRAWENUMERATEEX;
    _ = LPDDENUMMODESCALLBACK;
    _ = LPDDENUMMODESCALLBACK2;
    _ = LPDDENUMSURFACESCALLBACK;
    _ = LPDDENUMSURFACESCALLBACK2;
    _ = LPDDENUMSURFACESCALLBACK7;
    _ = LPCLIPPERCALLBACK;

    const constant_export_count = 428;
    const type_export_count = 51;
    const enum_value_export_count = 0;
    const com_iface_id_export_count = 13;
    const com_class_id_export_count = 0;
    const func_export_count = 7;
    const unicode_alias_count = 2;
    const import_count = 16;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

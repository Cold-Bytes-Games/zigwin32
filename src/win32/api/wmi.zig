//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (162)
//--------------------------------------------------------------------------------
const CLSID_WbemDefPath_Value = @import("../zig.zig").Guid.initString("CF4CC405-E2C5-4DDD-B3CE-5E7582D8C9FA");
pub const CLSID_WbemDefPath = &CLSID_WbemDefPath_Value;

const CLSID_WbemQuery_Value = @import("../zig.zig").Guid.initString("EAC8A024-21E2-4523-AD73-A71A0AA2F56A");
pub const CLSID_WbemQuery = &CLSID_WbemQuery_Value;

pub const tag_WBEM_PATH_STATUS_FLAG = extern enum(i32) {
    WBEMPATH_INFO_ANON_LOCAL_MACHINE = 1,
    WBEMPATH_INFO_HAS_MACHINE_NAME = 2,
    WBEMPATH_INFO_IS_CLASS_REF = 4,
    WBEMPATH_INFO_IS_INST_REF = 8,
    WBEMPATH_INFO_HAS_SUBSCOPES = 16,
    WBEMPATH_INFO_IS_COMPOUND = 32,
    WBEMPATH_INFO_HAS_V2_REF_PATHS = 64,
    WBEMPATH_INFO_HAS_IMPLIED_KEY = 128,
    WBEMPATH_INFO_CONTAINS_SINGLETON = 256,
    WBEMPATH_INFO_V1_COMPLIANT = 512,
    WBEMPATH_INFO_V2_COMPLIANT = 1024,
    WBEMPATH_INFO_CIM_COMPLIANT = 2048,
    WBEMPATH_INFO_IS_SINGLETON = 4096,
    WBEMPATH_INFO_IS_PARENT = 8192,
    WBEMPATH_INFO_SERVER_NAMESPACE_ONLY = 16384,
    WBEMPATH_INFO_NATIVE_PATH = 32768,
    WBEMPATH_INFO_WMI_PATH = 65536,
    WBEMPATH_INFO_PATH_HAD_SERVER = 131072,
};
pub const WBEMPATH_INFO_ANON_LOCAL_MACHINE = tag_WBEM_PATH_STATUS_FLAG.WBEMPATH_INFO_ANON_LOCAL_MACHINE;
pub const WBEMPATH_INFO_HAS_MACHINE_NAME = tag_WBEM_PATH_STATUS_FLAG.WBEMPATH_INFO_HAS_MACHINE_NAME;
pub const WBEMPATH_INFO_IS_CLASS_REF = tag_WBEM_PATH_STATUS_FLAG.WBEMPATH_INFO_IS_CLASS_REF;
pub const WBEMPATH_INFO_IS_INST_REF = tag_WBEM_PATH_STATUS_FLAG.WBEMPATH_INFO_IS_INST_REF;
pub const WBEMPATH_INFO_HAS_SUBSCOPES = tag_WBEM_PATH_STATUS_FLAG.WBEMPATH_INFO_HAS_SUBSCOPES;
pub const WBEMPATH_INFO_IS_COMPOUND = tag_WBEM_PATH_STATUS_FLAG.WBEMPATH_INFO_IS_COMPOUND;
pub const WBEMPATH_INFO_HAS_V2_REF_PATHS = tag_WBEM_PATH_STATUS_FLAG.WBEMPATH_INFO_HAS_V2_REF_PATHS;
pub const WBEMPATH_INFO_HAS_IMPLIED_KEY = tag_WBEM_PATH_STATUS_FLAG.WBEMPATH_INFO_HAS_IMPLIED_KEY;
pub const WBEMPATH_INFO_CONTAINS_SINGLETON = tag_WBEM_PATH_STATUS_FLAG.WBEMPATH_INFO_CONTAINS_SINGLETON;
pub const WBEMPATH_INFO_V1_COMPLIANT = tag_WBEM_PATH_STATUS_FLAG.WBEMPATH_INFO_V1_COMPLIANT;
pub const WBEMPATH_INFO_V2_COMPLIANT = tag_WBEM_PATH_STATUS_FLAG.WBEMPATH_INFO_V2_COMPLIANT;
pub const WBEMPATH_INFO_CIM_COMPLIANT = tag_WBEM_PATH_STATUS_FLAG.WBEMPATH_INFO_CIM_COMPLIANT;
pub const WBEMPATH_INFO_IS_SINGLETON = tag_WBEM_PATH_STATUS_FLAG.WBEMPATH_INFO_IS_SINGLETON;
pub const WBEMPATH_INFO_IS_PARENT = tag_WBEM_PATH_STATUS_FLAG.WBEMPATH_INFO_IS_PARENT;
pub const WBEMPATH_INFO_SERVER_NAMESPACE_ONLY = tag_WBEM_PATH_STATUS_FLAG.WBEMPATH_INFO_SERVER_NAMESPACE_ONLY;
pub const WBEMPATH_INFO_NATIVE_PATH = tag_WBEM_PATH_STATUS_FLAG.WBEMPATH_INFO_NATIVE_PATH;
pub const WBEMPATH_INFO_WMI_PATH = tag_WBEM_PATH_STATUS_FLAG.WBEMPATH_INFO_WMI_PATH;
pub const WBEMPATH_INFO_PATH_HAD_SERVER = tag_WBEM_PATH_STATUS_FLAG.WBEMPATH_INFO_PATH_HAD_SERVER;

pub const tag_WBEM_PATH_CREATE_FLAG = extern enum(i32) {
    WBEMPATH_CREATE_ACCEPT_RELATIVE = 1,
    WBEMPATH_CREATE_ACCEPT_ABSOLUTE = 2,
    WBEMPATH_CREATE_ACCEPT_ALL = 4,
    WBEMPATH_TREAT_SINGLE_IDENT_AS_NS = 8,
};
pub const WBEMPATH_CREATE_ACCEPT_RELATIVE = tag_WBEM_PATH_CREATE_FLAG.WBEMPATH_CREATE_ACCEPT_RELATIVE;
pub const WBEMPATH_CREATE_ACCEPT_ABSOLUTE = tag_WBEM_PATH_CREATE_FLAG.WBEMPATH_CREATE_ACCEPT_ABSOLUTE;
pub const WBEMPATH_CREATE_ACCEPT_ALL = tag_WBEM_PATH_CREATE_FLAG.WBEMPATH_CREATE_ACCEPT_ALL;
pub const WBEMPATH_TREAT_SINGLE_IDENT_AS_NS = tag_WBEM_PATH_CREATE_FLAG.WBEMPATH_TREAT_SINGLE_IDENT_AS_NS;

pub const tag_WBEM_GET_TEXT_FLAGS = extern enum(i32) {
    WBEMPATH_COMPRESSED = 1,
    WBEMPATH_GET_RELATIVE_ONLY = 2,
    WBEMPATH_GET_SERVER_TOO = 4,
    WBEMPATH_GET_SERVER_AND_NAMESPACE_ONLY = 8,
    WBEMPATH_GET_NAMESPACE_ONLY = 16,
    WBEMPATH_GET_ORIGINAL = 32,
};
pub const WBEMPATH_COMPRESSED = tag_WBEM_GET_TEXT_FLAGS.WBEMPATH_COMPRESSED;
pub const WBEMPATH_GET_RELATIVE_ONLY = tag_WBEM_GET_TEXT_FLAGS.WBEMPATH_GET_RELATIVE_ONLY;
pub const WBEMPATH_GET_SERVER_TOO = tag_WBEM_GET_TEXT_FLAGS.WBEMPATH_GET_SERVER_TOO;
pub const WBEMPATH_GET_SERVER_AND_NAMESPACE_ONLY = tag_WBEM_GET_TEXT_FLAGS.WBEMPATH_GET_SERVER_AND_NAMESPACE_ONLY;
pub const WBEMPATH_GET_NAMESPACE_ONLY = tag_WBEM_GET_TEXT_FLAGS.WBEMPATH_GET_NAMESPACE_ONLY;
pub const WBEMPATH_GET_ORIGINAL = tag_WBEM_GET_TEXT_FLAGS.WBEMPATH_GET_ORIGINAL;

pub const tag_WBEM_GET_KEY_FLAGS = extern enum(i32) {
    WBEMPATH_TEXT = 1,
    WBEMPATH_QUOTEDTEXT = 2,
};
pub const WBEMPATH_TEXT = tag_WBEM_GET_KEY_FLAGS.WBEMPATH_TEXT;
pub const WBEMPATH_QUOTEDTEXT = tag_WBEM_GET_KEY_FLAGS.WBEMPATH_QUOTEDTEXT;

const IID_IWbemPathKeyList_Value = @import("../zig.zig").Guid.initString("9AE62877-7544-4BB0-AA26-A13824659ED6");
pub const IID_IWbemPathKeyList = &IID_IWbemPathKeyList_Value;
pub const IWbemPathKeyList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IWbemPathKeyList,
            puKeyCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetKey: fn(
            self: *const IWbemPathKeyList,
            wszName: [*:0]const u16,
            uFlags: u32,
            uCimType: u32,
            pKeyVal: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetKey2: fn(
            self: *const IWbemPathKeyList,
            wszName: [*:0]const u16,
            uFlags: u32,
            uCimType: u32,
            pKeyVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKey: fn(
            self: *const IWbemPathKeyList,
            uKeyIx: u32,
            uFlags: u32,
            puNameBufSize: *u32,
            pszKeyName: ?[*:0]u16,
            puKeyValBufSize: *u32,
            pKeyVal: *c_void,
            puApparentCimType: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKey2: fn(
            self: *const IWbemPathKeyList,
            uKeyIx: u32,
            uFlags: u32,
            puNameBufSize: *u32,
            pszKeyName: ?[*:0]u16,
            pKeyValue: *VARIANT,
            puApparentCimType: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveKey: fn(
            self: *const IWbemPathKeyList,
            wszName: [*:0]const u16,
            uFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllKeys: fn(
            self: *const IWbemPathKeyList,
            uFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MakeSingleton: fn(
            self: *const IWbemPathKeyList,
            bSet: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInfo: fn(
            self: *const IWbemPathKeyList,
            uRequestedInfo: u32,
            puResponse: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetText: fn(
            self: *const IWbemPathKeyList,
            lFlags: i32,
            puBuffLength: *u32,
            pszText: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPathKeyList_GetCount(self: *const T, puKeyCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPathKeyList.VTable, self.vtable).GetCount(@ptrCast(*const IWbemPathKeyList, self), puKeyCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPathKeyList_SetKey(self: *const T, wszName: [*:0]const u16, uFlags: u32, uCimType: u32, pKeyVal: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPathKeyList.VTable, self.vtable).SetKey(@ptrCast(*const IWbemPathKeyList, self), wszName, uFlags, uCimType, pKeyVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPathKeyList_SetKey2(self: *const T, wszName: [*:0]const u16, uFlags: u32, uCimType: u32, pKeyVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPathKeyList.VTable, self.vtable).SetKey2(@ptrCast(*const IWbemPathKeyList, self), wszName, uFlags, uCimType, pKeyVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPathKeyList_GetKey(self: *const T, uKeyIx: u32, uFlags: u32, puNameBufSize: *u32, pszKeyName: ?[*:0]u16, puKeyValBufSize: *u32, pKeyVal: *c_void, puApparentCimType: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPathKeyList.VTable, self.vtable).GetKey(@ptrCast(*const IWbemPathKeyList, self), uKeyIx, uFlags, puNameBufSize, pszKeyName, puKeyValBufSize, pKeyVal, puApparentCimType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPathKeyList_GetKey2(self: *const T, uKeyIx: u32, uFlags: u32, puNameBufSize: *u32, pszKeyName: ?[*:0]u16, pKeyValue: *VARIANT, puApparentCimType: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPathKeyList.VTable, self.vtable).GetKey2(@ptrCast(*const IWbemPathKeyList, self), uKeyIx, uFlags, puNameBufSize, pszKeyName, pKeyValue, puApparentCimType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPathKeyList_RemoveKey(self: *const T, wszName: [*:0]const u16, uFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPathKeyList.VTable, self.vtable).RemoveKey(@ptrCast(*const IWbemPathKeyList, self), wszName, uFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPathKeyList_RemoveAllKeys(self: *const T, uFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPathKeyList.VTable, self.vtable).RemoveAllKeys(@ptrCast(*const IWbemPathKeyList, self), uFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPathKeyList_MakeSingleton(self: *const T, bSet: u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPathKeyList.VTable, self.vtable).MakeSingleton(@ptrCast(*const IWbemPathKeyList, self), bSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPathKeyList_GetInfo(self: *const T, uRequestedInfo: u32, puResponse: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPathKeyList.VTable, self.vtable).GetInfo(@ptrCast(*const IWbemPathKeyList, self), uRequestedInfo, puResponse);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPathKeyList_GetText(self: *const T, lFlags: i32, puBuffLength: *u32, pszText: [*:0]u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPathKeyList.VTable, self.vtable).GetText(@ptrCast(*const IWbemPathKeyList, self), lFlags, puBuffLength, pszText);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemPath_Value = @import("../zig.zig").Guid.initString("3BC15AF2-736C-477E-9E51-238AF8667DCC");
pub const IID_IWbemPath = &IID_IWbemPath_Value;
pub const IWbemPath = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetText: fn(
            self: *const IWbemPath,
            uMode: u32,
            pszPath: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetText: fn(
            self: *const IWbemPath,
            lFlags: i32,
            puBuffLength: *u32,
            pszText: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInfo: fn(
            self: *const IWbemPath,
            uRequestedInfo: u32,
            puResponse: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetServer: fn(
            self: *const IWbemPath,
            Name: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetServer: fn(
            self: *const IWbemPath,
            puNameBufLength: *u32,
            pName: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNamespaceCount: fn(
            self: *const IWbemPath,
            puCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNamespaceAt: fn(
            self: *const IWbemPath,
            uIndex: u32,
            pszName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNamespaceAt: fn(
            self: *const IWbemPath,
            uIndex: u32,
            puNameBufLength: *u32,
            pName: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveNamespaceAt: fn(
            self: *const IWbemPath,
            uIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllNamespaces: fn(
            self: *const IWbemPath,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScopeCount: fn(
            self: *const IWbemPath,
            puCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScope: fn(
            self: *const IWbemPath,
            uIndex: u32,
            pszClass: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScopeFromText: fn(
            self: *const IWbemPath,
            uIndex: u32,
            pszText: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScope: fn(
            self: *const IWbemPath,
            uIndex: u32,
            puClassNameBufSize: *u32,
            pszClass: [*:0]u16,
            pKeyList: **IWbemPathKeyList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScopeAsText: fn(
            self: *const IWbemPath,
            uIndex: u32,
            puTextBufSize: *u32,
            pszText: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveScope: fn(
            self: *const IWbemPath,
            uIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllScopes: fn(
            self: *const IWbemPath,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClassName: fn(
            self: *const IWbemPath,
            Name: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClassNameA: fn(
            self: *const IWbemPath,
            puBuffLength: *u32,
            pszName: ?[*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyList: fn(
            self: *const IWbemPath,
            pOut: **IWbemPathKeyList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateClassPart: fn(
            self: *const IWbemPath,
            lFlags: i32,
            Name: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteClassPart: fn(
            self: *const IWbemPath,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRelative: fn(
            self: *const IWbemPath,
            wszMachine: PWSTR,
            wszNamespace: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        IsRelativeOrChild: fn(
            self: *const IWbemPath,
            wszMachine: PWSTR,
            wszNamespace: PWSTR,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        IsLocal: fn(
            self: *const IWbemPath,
            wszMachine: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        IsSameClassName: fn(
            self: *const IWbemPath,
            wszClass: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_SetText(self: *const T, uMode: u32, pszPath: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).SetText(@ptrCast(*const IWbemPath, self), uMode, pszPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_GetText(self: *const T, lFlags: i32, puBuffLength: *u32, pszText: [*:0]u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).GetText(@ptrCast(*const IWbemPath, self), lFlags, puBuffLength, pszText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_GetInfo(self: *const T, uRequestedInfo: u32, puResponse: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).GetInfo(@ptrCast(*const IWbemPath, self), uRequestedInfo, puResponse);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_SetServer(self: *const T, Name: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).SetServer(@ptrCast(*const IWbemPath, self), Name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_GetServer(self: *const T, puNameBufLength: *u32, pName: [*:0]u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).GetServer(@ptrCast(*const IWbemPath, self), puNameBufLength, pName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_GetNamespaceCount(self: *const T, puCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).GetNamespaceCount(@ptrCast(*const IWbemPath, self), puCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_SetNamespaceAt(self: *const T, uIndex: u32, pszName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).SetNamespaceAt(@ptrCast(*const IWbemPath, self), uIndex, pszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_GetNamespaceAt(self: *const T, uIndex: u32, puNameBufLength: *u32, pName: [*:0]u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).GetNamespaceAt(@ptrCast(*const IWbemPath, self), uIndex, puNameBufLength, pName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_RemoveNamespaceAt(self: *const T, uIndex: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).RemoveNamespaceAt(@ptrCast(*const IWbemPath, self), uIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_RemoveAllNamespaces(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).RemoveAllNamespaces(@ptrCast(*const IWbemPath, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_GetScopeCount(self: *const T, puCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).GetScopeCount(@ptrCast(*const IWbemPath, self), puCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_SetScope(self: *const T, uIndex: u32, pszClass: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).SetScope(@ptrCast(*const IWbemPath, self), uIndex, pszClass);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_SetScopeFromText(self: *const T, uIndex: u32, pszText: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).SetScopeFromText(@ptrCast(*const IWbemPath, self), uIndex, pszText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_GetScope(self: *const T, uIndex: u32, puClassNameBufSize: *u32, pszClass: [*:0]u16, pKeyList: **IWbemPathKeyList) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).GetScope(@ptrCast(*const IWbemPath, self), uIndex, puClassNameBufSize, pszClass, pKeyList);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_GetScopeAsText(self: *const T, uIndex: u32, puTextBufSize: *u32, pszText: [*:0]u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).GetScopeAsText(@ptrCast(*const IWbemPath, self), uIndex, puTextBufSize, pszText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_RemoveScope(self: *const T, uIndex: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).RemoveScope(@ptrCast(*const IWbemPath, self), uIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_RemoveAllScopes(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).RemoveAllScopes(@ptrCast(*const IWbemPath, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_SetClassName(self: *const T, Name: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).SetClassName(@ptrCast(*const IWbemPath, self), Name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_GetClassNameA(self: *const T, puBuffLength: *u32, pszName: ?[*:0]u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).GetClassNameA(@ptrCast(*const IWbemPath, self), puBuffLength, pszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_GetKeyList(self: *const T, pOut: **IWbemPathKeyList) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).GetKeyList(@ptrCast(*const IWbemPath, self), pOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_CreateClassPart(self: *const T, lFlags: i32, Name: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).CreateClassPart(@ptrCast(*const IWbemPath, self), lFlags, Name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_DeleteClassPart(self: *const T, lFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).DeleteClassPart(@ptrCast(*const IWbemPath, self), lFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_IsRelative(self: *const T, wszMachine: PWSTR, wszNamespace: PWSTR) callconv(.Inline) BOOL {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).IsRelative(@ptrCast(*const IWbemPath, self), wszMachine, wszNamespace);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_IsRelativeOrChild(self: *const T, wszMachine: PWSTR, wszNamespace: PWSTR, lFlags: i32) callconv(.Inline) BOOL {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).IsRelativeOrChild(@ptrCast(*const IWbemPath, self), wszMachine, wszNamespace, lFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_IsLocal(self: *const T, wszMachine: [*:0]const u16) callconv(.Inline) BOOL {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).IsLocal(@ptrCast(*const IWbemPath, self), wszMachine);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPath_IsSameClassName(self: *const T, wszClass: [*:0]const u16) callconv(.Inline) BOOL {
            return @ptrCast(*const IWbemPath.VTable, self.vtable).IsSameClassName(@ptrCast(*const IWbemPath, self), wszClass);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemQuery_Value = @import("../zig.zig").Guid.initString("81166F58-DD98-11D3-A120-00105A1F515A");
pub const IID_IWbemQuery = &IID_IWbemQuery_Value;
pub const IWbemQuery = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Empty: fn(
            self: *const IWbemQuery,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLanguageFeatures: fn(
            self: *const IWbemQuery,
            uFlags: u32,
            uArraySize: u32,
            puFeatures: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TestLanguageFeatures: fn(
            self: *const IWbemQuery,
            uFlags: u32,
            uArraySize: *u32,
            puFeatures: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Parse: fn(
            self: *const IWbemQuery,
            pszLang: [*:0]const u16,
            pszQuery: [*:0]const u16,
            uFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAnalysis: fn(
            self: *const IWbemQuery,
            uAnalysisType: u32,
            uFlags: u32,
            pAnalysis: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FreeMemory: fn(
            self: *const IWbemQuery,
            pMem: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetQueryInfo: fn(
            self: *const IWbemQuery,
            uAnalysisType: u32,
            uInfoId: u32,
            uBufSize: u32,
            pDestBuf: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemQuery_Empty(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemQuery.VTable, self.vtable).Empty(@ptrCast(*const IWbemQuery, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemQuery_SetLanguageFeatures(self: *const T, uFlags: u32, uArraySize: u32, puFeatures: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemQuery.VTable, self.vtable).SetLanguageFeatures(@ptrCast(*const IWbemQuery, self), uFlags, uArraySize, puFeatures);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemQuery_TestLanguageFeatures(self: *const T, uFlags: u32, uArraySize: *u32, puFeatures: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemQuery.VTable, self.vtable).TestLanguageFeatures(@ptrCast(*const IWbemQuery, self), uFlags, uArraySize, puFeatures);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemQuery_Parse(self: *const T, pszLang: [*:0]const u16, pszQuery: [*:0]const u16, uFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemQuery.VTable, self.vtable).Parse(@ptrCast(*const IWbemQuery, self), pszLang, pszQuery, uFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemQuery_GetAnalysis(self: *const T, uAnalysisType: u32, uFlags: u32, pAnalysis: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemQuery.VTable, self.vtable).GetAnalysis(@ptrCast(*const IWbemQuery, self), uAnalysisType, uFlags, pAnalysis);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemQuery_FreeMemory(self: *const T, pMem: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemQuery.VTable, self.vtable).FreeMemory(@ptrCast(*const IWbemQuery, self), pMem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemQuery_GetQueryInfo(self: *const T, uAnalysisType: u32, uInfoId: u32, uBufSize: u32, pDestBuf: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemQuery.VTable, self.vtable).GetQueryInfo(@ptrCast(*const IWbemQuery, self), uAnalysisType, uInfoId, uBufSize, pDestBuf);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WMIQ_ANALYSIS_TYPE = extern enum(i32) {
    WMIQ_ANALYSIS_RPN_SEQUENCE = 1,
    WMIQ_ANALYSIS_ASSOC_QUERY = 2,
    WMIQ_ANALYSIS_PROP_ANALYSIS_MATRIX = 3,
    WMIQ_ANALYSIS_QUERY_TEXT = 4,
    WMIQ_ANALYSIS_RESERVED = 134217728,
};
pub const WMIQ_ANALYSIS_RPN_SEQUENCE = WMIQ_ANALYSIS_TYPE.WMIQ_ANALYSIS_RPN_SEQUENCE;
pub const WMIQ_ANALYSIS_ASSOC_QUERY = WMIQ_ANALYSIS_TYPE.WMIQ_ANALYSIS_ASSOC_QUERY;
pub const WMIQ_ANALYSIS_PROP_ANALYSIS_MATRIX = WMIQ_ANALYSIS_TYPE.WMIQ_ANALYSIS_PROP_ANALYSIS_MATRIX;
pub const WMIQ_ANALYSIS_QUERY_TEXT = WMIQ_ANALYSIS_TYPE.WMIQ_ANALYSIS_QUERY_TEXT;
pub const WMIQ_ANALYSIS_RESERVED = WMIQ_ANALYSIS_TYPE.WMIQ_ANALYSIS_RESERVED;

pub const WMIQ_RPN_TOKEN_FLAGS = extern enum(i32) {
    WMIQ_RPN_TOKEN_EXPRESSION = 1,
    WMIQ_RPN_TOKEN_AND = 2,
    WMIQ_RPN_TOKEN_OR = 3,
    WMIQ_RPN_TOKEN_NOT = 4,
    WMIQ_RPN_OP_UNDEFINED = 0,
    WMIQ_RPN_OP_EQ = 1,
    WMIQ_RPN_OP_NE = 2,
    WMIQ_RPN_OP_GE = 3,
    WMIQ_RPN_OP_LE = 4,
    WMIQ_RPN_OP_LT = 5,
    WMIQ_RPN_OP_GT = 6,
    WMIQ_RPN_OP_LIKE = 7,
    WMIQ_RPN_OP_ISA = 8,
    WMIQ_RPN_OP_ISNOTA = 9,
    WMIQ_RPN_OP_ISNULL = 10,
    WMIQ_RPN_OP_ISNOTNULL = 11,
    WMIQ_RPN_LEFT_PROPERTY_NAME = 1,
    WMIQ_RPN_RIGHT_PROPERTY_NAME = 2,
    WMIQ_RPN_CONST2 = 4,
    WMIQ_RPN_CONST = 8,
    WMIQ_RPN_RELOP = 16,
    WMIQ_RPN_LEFT_FUNCTION = 32,
    WMIQ_RPN_RIGHT_FUNCTION = 64,
    WMIQ_RPN_GET_TOKEN_TYPE = 1,
    WMIQ_RPN_GET_EXPR_SHAPE = 2,
    WMIQ_RPN_GET_LEFT_FUNCTION = 3,
    WMIQ_RPN_GET_RIGHT_FUNCTION = 4,
    WMIQ_RPN_GET_RELOP = 5,
    WMIQ_RPN_NEXT_TOKEN = 1,
    WMIQ_RPN_FROM_UNARY = 1,
    WMIQ_RPN_FROM_PATH = 2,
    WMIQ_RPN_FROM_CLASS_LIST = 4,
    WMIQ_RPN_FROM_MULTIPLE = 8,
};
pub const WMIQ_RPN_TOKEN_EXPRESSION = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_TOKEN_EXPRESSION;
pub const WMIQ_RPN_TOKEN_AND = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_TOKEN_AND;
pub const WMIQ_RPN_TOKEN_OR = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_TOKEN_OR;
pub const WMIQ_RPN_TOKEN_NOT = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_TOKEN_NOT;
pub const WMIQ_RPN_OP_UNDEFINED = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_OP_UNDEFINED;
pub const WMIQ_RPN_OP_EQ = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_OP_EQ;
pub const WMIQ_RPN_OP_NE = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_OP_NE;
pub const WMIQ_RPN_OP_GE = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_OP_GE;
pub const WMIQ_RPN_OP_LE = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_OP_LE;
pub const WMIQ_RPN_OP_LT = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_OP_LT;
pub const WMIQ_RPN_OP_GT = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_OP_GT;
pub const WMIQ_RPN_OP_LIKE = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_OP_LIKE;
pub const WMIQ_RPN_OP_ISA = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_OP_ISA;
pub const WMIQ_RPN_OP_ISNOTA = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_OP_ISNOTA;
pub const WMIQ_RPN_OP_ISNULL = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_OP_ISNULL;
pub const WMIQ_RPN_OP_ISNOTNULL = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_OP_ISNOTNULL;
pub const WMIQ_RPN_LEFT_PROPERTY_NAME = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_LEFT_PROPERTY_NAME;
pub const WMIQ_RPN_RIGHT_PROPERTY_NAME = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_RIGHT_PROPERTY_NAME;
pub const WMIQ_RPN_CONST2 = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_CONST2;
pub const WMIQ_RPN_CONST = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_CONST;
pub const WMIQ_RPN_RELOP = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_RELOP;
pub const WMIQ_RPN_LEFT_FUNCTION = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_LEFT_FUNCTION;
pub const WMIQ_RPN_RIGHT_FUNCTION = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_RIGHT_FUNCTION;
pub const WMIQ_RPN_GET_TOKEN_TYPE = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_GET_TOKEN_TYPE;
pub const WMIQ_RPN_GET_EXPR_SHAPE = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_GET_EXPR_SHAPE;
pub const WMIQ_RPN_GET_LEFT_FUNCTION = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_GET_LEFT_FUNCTION;
pub const WMIQ_RPN_GET_RIGHT_FUNCTION = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_GET_RIGHT_FUNCTION;
pub const WMIQ_RPN_GET_RELOP = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_GET_RELOP;
pub const WMIQ_RPN_NEXT_TOKEN = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_NEXT_TOKEN;
pub const WMIQ_RPN_FROM_UNARY = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_FROM_UNARY;
pub const WMIQ_RPN_FROM_PATH = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_FROM_PATH;
pub const WMIQ_RPN_FROM_CLASS_LIST = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_FROM_CLASS_LIST;
pub const WMIQ_RPN_FROM_MULTIPLE = WMIQ_RPN_TOKEN_FLAGS.WMIQ_RPN_FROM_MULTIPLE;

pub const WMIQ_ASSOCQ_FLAGS = extern enum(i32) {
    WMIQ_ASSOCQ_ASSOCIATORS = 1,
    WMIQ_ASSOCQ_REFERENCES = 2,
    WMIQ_ASSOCQ_RESULTCLASS = 4,
    WMIQ_ASSOCQ_ASSOCCLASS = 8,
    WMIQ_ASSOCQ_ROLE = 16,
    WMIQ_ASSOCQ_RESULTROLE = 32,
    WMIQ_ASSOCQ_REQUIREDQUALIFIER = 64,
    WMIQ_ASSOCQ_REQUIREDASSOCQUALIFIER = 128,
    WMIQ_ASSOCQ_CLASSDEFSONLY = 256,
    WMIQ_ASSOCQ_KEYSONLY = 512,
    WMIQ_ASSOCQ_SCHEMAONLY = 1024,
    WMIQ_ASSOCQ_CLASSREFSONLY = 2048,
};
pub const WMIQ_ASSOCQ_ASSOCIATORS = WMIQ_ASSOCQ_FLAGS.WMIQ_ASSOCQ_ASSOCIATORS;
pub const WMIQ_ASSOCQ_REFERENCES = WMIQ_ASSOCQ_FLAGS.WMIQ_ASSOCQ_REFERENCES;
pub const WMIQ_ASSOCQ_RESULTCLASS = WMIQ_ASSOCQ_FLAGS.WMIQ_ASSOCQ_RESULTCLASS;
pub const WMIQ_ASSOCQ_ASSOCCLASS = WMIQ_ASSOCQ_FLAGS.WMIQ_ASSOCQ_ASSOCCLASS;
pub const WMIQ_ASSOCQ_ROLE = WMIQ_ASSOCQ_FLAGS.WMIQ_ASSOCQ_ROLE;
pub const WMIQ_ASSOCQ_RESULTROLE = WMIQ_ASSOCQ_FLAGS.WMIQ_ASSOCQ_RESULTROLE;
pub const WMIQ_ASSOCQ_REQUIREDQUALIFIER = WMIQ_ASSOCQ_FLAGS.WMIQ_ASSOCQ_REQUIREDQUALIFIER;
pub const WMIQ_ASSOCQ_REQUIREDASSOCQUALIFIER = WMIQ_ASSOCQ_FLAGS.WMIQ_ASSOCQ_REQUIREDASSOCQUALIFIER;
pub const WMIQ_ASSOCQ_CLASSDEFSONLY = WMIQ_ASSOCQ_FLAGS.WMIQ_ASSOCQ_CLASSDEFSONLY;
pub const WMIQ_ASSOCQ_KEYSONLY = WMIQ_ASSOCQ_FLAGS.WMIQ_ASSOCQ_KEYSONLY;
pub const WMIQ_ASSOCQ_SCHEMAONLY = WMIQ_ASSOCQ_FLAGS.WMIQ_ASSOCQ_SCHEMAONLY;
pub const WMIQ_ASSOCQ_CLASSREFSONLY = WMIQ_ASSOCQ_FLAGS.WMIQ_ASSOCQ_CLASSREFSONLY;

pub const SWbemQueryQualifiedName = extern struct {
    m_uVersion: u32,
    m_uTokenType: u32,
    m_uNameListSize: u32,
    m_ppszNameList: *PWSTR,
    m_bArraysUsed: BOOL,
    m_pbArrayElUsed: *BOOL,
    m_puArrayIndex: *u32,
};

pub const tag_SWbemRpnConst = u32; // TODO: implement StructOrUnion types?

pub const SWbemRpnQueryToken = extern struct {
    m_uVersion: u32,
    m_uTokenType: u32,
    m_uSubexpressionShape: u32,
    m_uOperator: u32,
    m_pRightIdent: *SWbemQueryQualifiedName,
    m_pLeftIdent: *SWbemQueryQualifiedName,
    m_uConstApparentType: u32,
    m_Const: tag_SWbemRpnConst,
    m_uConst2ApparentType: u32,
    m_Const2: tag_SWbemRpnConst,
    m_pszRightFunc: [*:0]const u16,
    m_pszLeftFunc: [*:0]const u16,
};

pub const tag_SWbemRpnTokenList = extern struct {
    m_uVersion: u32,
    m_uTokenType: u32,
    m_uNumTokens: u32,
};

pub const tag_WMIQ_LANGUAGE_FEATURES = extern enum(i32) {
    WMIQ_LF1_BASIC_SELECT = 1,
    WMIQ_LF2_CLASS_NAME_IN_QUERY = 2,
    WMIQ_LF3_STRING_CASE_FUNCTIONS = 3,
    WMIQ_LF4_PROP_TO_PROP_TESTS = 4,
    WMIQ_LF5_COUNT_STAR = 5,
    WMIQ_LF6_ORDER_BY = 6,
    WMIQ_LF7_DISTINCT = 7,
    WMIQ_LF8_ISA = 8,
    WMIQ_LF9_THIS = 9,
    WMIQ_LF10_COMPEX_SUBEXPRESSIONS = 10,
    WMIQ_LF11_ALIASING = 11,
    WMIQ_LF12_GROUP_BY_HAVING = 12,
    WMIQ_LF13_WMI_WITHIN = 13,
    WMIQ_LF14_SQL_WRITE_OPERATIONS = 14,
    WMIQ_LF15_GO = 15,
    WMIQ_LF16_SINGLE_LEVEL_TRANSACTIONS = 16,
    WMIQ_LF17_QUALIFIED_NAMES = 17,
    WMIQ_LF18_ASSOCIATONS = 18,
    WMIQ_LF19_SYSTEM_PROPERTIES = 19,
    WMIQ_LF20_EXTENDED_SYSTEM_PROPERTIES = 20,
    WMIQ_LF21_SQL89_JOINS = 21,
    WMIQ_LF22_SQL92_JOINS = 22,
    WMIQ_LF23_SUBSELECTS = 23,
    WMIQ_LF24_UMI_EXTENSIONS = 24,
    WMIQ_LF25_DATEPART = 25,
    WMIQ_LF26_LIKE = 26,
    WMIQ_LF27_CIM_TEMPORAL_CONSTRUCTS = 27,
    WMIQ_LF28_STANDARD_AGGREGATES = 28,
    WMIQ_LF29_MULTI_LEVEL_ORDER_BY = 29,
    WMIQ_LF30_WMI_PRAGMAS = 30,
    WMIQ_LF31_QUALIFIER_TESTS = 31,
    WMIQ_LF32_SP_EXECUTE = 32,
    WMIQ_LF33_ARRAY_ACCESS = 33,
    WMIQ_LF34_UNION = 34,
    WMIQ_LF35_COMPLEX_SELECT_TARGET = 35,
    WMIQ_LF36_REFERENCE_TESTS = 36,
    WMIQ_LF37_SELECT_INTO = 37,
    WMIQ_LF38_BASIC_DATETIME_TESTS = 38,
    WMIQ_LF39_COUNT_COLUMN = 39,
    WMIQ_LF40_BETWEEN = 40,
    WMIQ_LF_LAST = 40,
};
pub const WMIQ_LF1_BASIC_SELECT = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF1_BASIC_SELECT;
pub const WMIQ_LF2_CLASS_NAME_IN_QUERY = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF2_CLASS_NAME_IN_QUERY;
pub const WMIQ_LF3_STRING_CASE_FUNCTIONS = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF3_STRING_CASE_FUNCTIONS;
pub const WMIQ_LF4_PROP_TO_PROP_TESTS = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF4_PROP_TO_PROP_TESTS;
pub const WMIQ_LF5_COUNT_STAR = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF5_COUNT_STAR;
pub const WMIQ_LF6_ORDER_BY = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF6_ORDER_BY;
pub const WMIQ_LF7_DISTINCT = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF7_DISTINCT;
pub const WMIQ_LF8_ISA = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF8_ISA;
pub const WMIQ_LF9_THIS = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF9_THIS;
pub const WMIQ_LF10_COMPEX_SUBEXPRESSIONS = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF10_COMPEX_SUBEXPRESSIONS;
pub const WMIQ_LF11_ALIASING = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF11_ALIASING;
pub const WMIQ_LF12_GROUP_BY_HAVING = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF12_GROUP_BY_HAVING;
pub const WMIQ_LF13_WMI_WITHIN = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF13_WMI_WITHIN;
pub const WMIQ_LF14_SQL_WRITE_OPERATIONS = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF14_SQL_WRITE_OPERATIONS;
pub const WMIQ_LF15_GO = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF15_GO;
pub const WMIQ_LF16_SINGLE_LEVEL_TRANSACTIONS = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF16_SINGLE_LEVEL_TRANSACTIONS;
pub const WMIQ_LF17_QUALIFIED_NAMES = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF17_QUALIFIED_NAMES;
pub const WMIQ_LF18_ASSOCIATONS = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF18_ASSOCIATONS;
pub const WMIQ_LF19_SYSTEM_PROPERTIES = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF19_SYSTEM_PROPERTIES;
pub const WMIQ_LF20_EXTENDED_SYSTEM_PROPERTIES = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF20_EXTENDED_SYSTEM_PROPERTIES;
pub const WMIQ_LF21_SQL89_JOINS = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF21_SQL89_JOINS;
pub const WMIQ_LF22_SQL92_JOINS = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF22_SQL92_JOINS;
pub const WMIQ_LF23_SUBSELECTS = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF23_SUBSELECTS;
pub const WMIQ_LF24_UMI_EXTENSIONS = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF24_UMI_EXTENSIONS;
pub const WMIQ_LF25_DATEPART = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF25_DATEPART;
pub const WMIQ_LF26_LIKE = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF26_LIKE;
pub const WMIQ_LF27_CIM_TEMPORAL_CONSTRUCTS = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF27_CIM_TEMPORAL_CONSTRUCTS;
pub const WMIQ_LF28_STANDARD_AGGREGATES = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF28_STANDARD_AGGREGATES;
pub const WMIQ_LF29_MULTI_LEVEL_ORDER_BY = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF29_MULTI_LEVEL_ORDER_BY;
pub const WMIQ_LF30_WMI_PRAGMAS = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF30_WMI_PRAGMAS;
pub const WMIQ_LF31_QUALIFIER_TESTS = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF31_QUALIFIER_TESTS;
pub const WMIQ_LF32_SP_EXECUTE = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF32_SP_EXECUTE;
pub const WMIQ_LF33_ARRAY_ACCESS = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF33_ARRAY_ACCESS;
pub const WMIQ_LF34_UNION = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF34_UNION;
pub const WMIQ_LF35_COMPLEX_SELECT_TARGET = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF35_COMPLEX_SELECT_TARGET;
pub const WMIQ_LF36_REFERENCE_TESTS = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF36_REFERENCE_TESTS;
pub const WMIQ_LF37_SELECT_INTO = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF37_SELECT_INTO;
pub const WMIQ_LF38_BASIC_DATETIME_TESTS = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF38_BASIC_DATETIME_TESTS;
pub const WMIQ_LF39_COUNT_COLUMN = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF39_COUNT_COLUMN;
pub const WMIQ_LF40_BETWEEN = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF40_BETWEEN;
pub const WMIQ_LF_LAST = tag_WMIQ_LANGUAGE_FEATURES.WMIQ_LF_LAST;

pub const tag_WMIQ_RPNQ_FEATURE = extern enum(i32) {
    WMIQ_RPNF_WHERE_CLAUSE_PRESENT = 1,
    WMIQ_RPNF_QUERY_IS_CONJUNCTIVE = 2,
    WMIQ_RPNF_QUERY_IS_DISJUNCTIVE = 4,
    WMIQ_RPNF_PROJECTION = 8,
    WMIQ_RPNF_FEATURE_SELECT_STAR = 16,
    WMIQ_RPNF_EQUALITY_TESTS_ONLY = 32,
    WMIQ_RPNF_COUNT_STAR = 64,
    WMIQ_RPNF_QUALIFIED_NAMES_USED = 128,
    WMIQ_RPNF_SYSPROP_CLASS_USED = 256,
    WMIQ_RPNF_PROP_TO_PROP_TESTS = 512,
    WMIQ_RPNF_ORDER_BY = 1024,
    WMIQ_RPNF_ISA_USED = 2048,
    WMIQ_RPNF_GROUP_BY_HAVING = 4096,
    WMIQ_RPNF_ARRAY_ACCESS_USED = 8192,
};
pub const WMIQ_RPNF_WHERE_CLAUSE_PRESENT = tag_WMIQ_RPNQ_FEATURE.WMIQ_RPNF_WHERE_CLAUSE_PRESENT;
pub const WMIQ_RPNF_QUERY_IS_CONJUNCTIVE = tag_WMIQ_RPNQ_FEATURE.WMIQ_RPNF_QUERY_IS_CONJUNCTIVE;
pub const WMIQ_RPNF_QUERY_IS_DISJUNCTIVE = tag_WMIQ_RPNQ_FEATURE.WMIQ_RPNF_QUERY_IS_DISJUNCTIVE;
pub const WMIQ_RPNF_PROJECTION = tag_WMIQ_RPNQ_FEATURE.WMIQ_RPNF_PROJECTION;
pub const WMIQ_RPNF_FEATURE_SELECT_STAR = tag_WMIQ_RPNQ_FEATURE.WMIQ_RPNF_FEATURE_SELECT_STAR;
pub const WMIQ_RPNF_EQUALITY_TESTS_ONLY = tag_WMIQ_RPNQ_FEATURE.WMIQ_RPNF_EQUALITY_TESTS_ONLY;
pub const WMIQ_RPNF_COUNT_STAR = tag_WMIQ_RPNQ_FEATURE.WMIQ_RPNF_COUNT_STAR;
pub const WMIQ_RPNF_QUALIFIED_NAMES_USED = tag_WMIQ_RPNQ_FEATURE.WMIQ_RPNF_QUALIFIED_NAMES_USED;
pub const WMIQ_RPNF_SYSPROP_CLASS_USED = tag_WMIQ_RPNQ_FEATURE.WMIQ_RPNF_SYSPROP_CLASS_USED;
pub const WMIQ_RPNF_PROP_TO_PROP_TESTS = tag_WMIQ_RPNQ_FEATURE.WMIQ_RPNF_PROP_TO_PROP_TESTS;
pub const WMIQ_RPNF_ORDER_BY = tag_WMIQ_RPNQ_FEATURE.WMIQ_RPNF_ORDER_BY;
pub const WMIQ_RPNF_ISA_USED = tag_WMIQ_RPNQ_FEATURE.WMIQ_RPNF_ISA_USED;
pub const WMIQ_RPNF_GROUP_BY_HAVING = tag_WMIQ_RPNQ_FEATURE.WMIQ_RPNF_GROUP_BY_HAVING;
pub const WMIQ_RPNF_ARRAY_ACCESS_USED = tag_WMIQ_RPNQ_FEATURE.WMIQ_RPNF_ARRAY_ACCESS_USED;

pub const SWbemRpnEncodedQuery = extern struct {
    m_uVersion: u32,
    m_uTokenType: u32,
    m_uParsedFeatureMask: u64,
    m_uDetectedArraySize: u32,
    m_puDetectedFeatures: *u32,
    m_uSelectListSize: u32,
    m_ppSelectList: **SWbemQueryQualifiedName,
    m_uFromTargetType: u32,
    m_pszOptionalFromPath: [*:0]const u16,
    m_uFromListSize: u32,
    m_ppszFromList: *PWSTR,
    m_uWhereClauseSize: u32,
    m_ppRpnWhereClause: **SWbemRpnQueryToken,
    m_dblWithinPolling: f64,
    m_dblWithinWindow: f64,
    m_uOrderByListSize: u32,
    m_ppszOrderByList: *PWSTR,
    m_uOrderDirectionEl: *u32,
};

pub const tag_SWbemAnalysisMatrix = extern struct {
    m_uVersion: u32,
    m_uMatrixType: u32,
    m_pszProperty: [*:0]const u16,
    m_uPropertyType: u32,
    m_uEntries: u32,
    m_pValues: **c_void,
    m_pbTruthTable: *BOOL,
};

pub const tag_SWbemAnalysisMatrixList = extern struct {
    m_uVersion: u32,
    m_uMatrixType: u32,
    m_uNumMatrices: u32,
    m_pMatrices: *tag_SWbemAnalysisMatrix,
};

pub const SWbemAssocQueryInf = extern struct {
    m_uVersion: u32,
    m_uAnalysisType: u32,
    m_uFeatureMask: u32,
    m_pPath: *IWbemPath,
    m_pszPath: PWSTR,
    m_pszQueryText: PWSTR,
    m_pszResultClass: PWSTR,
    m_pszAssocClass: PWSTR,
    m_pszRole: PWSTR,
    m_pszResultRole: PWSTR,
    m_pszRequiredQualifier: PWSTR,
    m_pszRequiredAssocQualifier: PWSTR,
};

const CLSID_WbemLocator_Value = @import("../zig.zig").Guid.initString("4590F811-1D3A-11D0-891F-00AA004B2E24");
pub const CLSID_WbemLocator = &CLSID_WbemLocator_Value;

const CLSID_WbemContext_Value = @import("../zig.zig").Guid.initString("674B6698-EE92-11D0-AD71-00C04FD8FDFF");
pub const CLSID_WbemContext = &CLSID_WbemContext_Value;

const CLSID_UnsecuredApartment_Value = @import("../zig.zig").Guid.initString("49BD2028-1523-11D1-AD79-00C04FD8FDFF");
pub const CLSID_UnsecuredApartment = &CLSID_UnsecuredApartment_Value;

const CLSID_WbemClassObject_Value = @import("../zig.zig").Guid.initString("9A653086-174F-11D2-B5F9-00104B703EFD");
pub const CLSID_WbemClassObject = &CLSID_WbemClassObject_Value;

const CLSID_MofCompiler_Value = @import("../zig.zig").Guid.initString("6DAF9757-2E37-11D2-AEC9-00C04FB68820");
pub const CLSID_MofCompiler = &CLSID_MofCompiler_Value;

const CLSID_WbemStatusCodeText_Value = @import("../zig.zig").Guid.initString("EB87E1BD-3233-11D2-AEC9-00C04FB68820");
pub const CLSID_WbemStatusCodeText = &CLSID_WbemStatusCodeText_Value;

const CLSID_WbemBackupRestore_Value = @import("../zig.zig").Guid.initString("C49E32C6-BC8B-11D2-85D4-00105A1F8304");
pub const CLSID_WbemBackupRestore = &CLSID_WbemBackupRestore_Value;

const CLSID_WbemRefresher_Value = @import("../zig.zig").Guid.initString("C71566F2-561E-11D1-AD87-00C04FD8FDFF");
pub const CLSID_WbemRefresher = &CLSID_WbemRefresher_Value;

const CLSID_WbemObjectTextSrc_Value = @import("../zig.zig").Guid.initString("8D1C559D-84F0-4BB3-A7D5-56A7435A9BA6");
pub const CLSID_WbemObjectTextSrc = &CLSID_WbemObjectTextSrc_Value;

pub const WBEM_GENUS_TYPE = extern enum(i32) {
    WBEM_GENUS_CLASS = 1,
    WBEM_GENUS_INSTANCE = 2,
};
pub const WBEM_GENUS_CLASS = WBEM_GENUS_TYPE.WBEM_GENUS_CLASS;
pub const WBEM_GENUS_INSTANCE = WBEM_GENUS_TYPE.WBEM_GENUS_INSTANCE;

pub const WBEM_CHANGE_FLAG_TYPE = extern enum(i32) {
    WBEM_FLAG_CREATE_OR_UPDATE = 0,
    WBEM_FLAG_UPDATE_ONLY = 1,
    WBEM_FLAG_CREATE_ONLY = 2,
    WBEM_FLAG_UPDATE_COMPATIBLE = 0,
    WBEM_FLAG_UPDATE_SAFE_MODE = 32,
    WBEM_FLAG_UPDATE_FORCE_MODE = 64,
    WBEM_MASK_UPDATE_MODE = 96,
    WBEM_FLAG_ADVISORY = 65536,
};
pub const WBEM_FLAG_CREATE_OR_UPDATE = WBEM_CHANGE_FLAG_TYPE.WBEM_FLAG_CREATE_OR_UPDATE;
pub const WBEM_FLAG_UPDATE_ONLY = WBEM_CHANGE_FLAG_TYPE.WBEM_FLAG_UPDATE_ONLY;
pub const WBEM_FLAG_CREATE_ONLY = WBEM_CHANGE_FLAG_TYPE.WBEM_FLAG_CREATE_ONLY;
pub const WBEM_FLAG_UPDATE_COMPATIBLE = WBEM_CHANGE_FLAG_TYPE.WBEM_FLAG_UPDATE_COMPATIBLE;
pub const WBEM_FLAG_UPDATE_SAFE_MODE = WBEM_CHANGE_FLAG_TYPE.WBEM_FLAG_UPDATE_SAFE_MODE;
pub const WBEM_FLAG_UPDATE_FORCE_MODE = WBEM_CHANGE_FLAG_TYPE.WBEM_FLAG_UPDATE_FORCE_MODE;
pub const WBEM_MASK_UPDATE_MODE = WBEM_CHANGE_FLAG_TYPE.WBEM_MASK_UPDATE_MODE;
pub const WBEM_FLAG_ADVISORY = WBEM_CHANGE_FLAG_TYPE.WBEM_FLAG_ADVISORY;

pub const WBEM_GENERIC_FLAG_TYPE = extern enum(i32) {
    WBEM_FLAG_RETURN_IMMEDIATELY = 16,
    WBEM_FLAG_RETURN_WBEM_COMPLETE = 0,
    WBEM_FLAG_BIDIRECTIONAL = 0,
    WBEM_FLAG_FORWARD_ONLY = 32,
    WBEM_FLAG_NO_ERROR_OBJECT = 64,
    WBEM_FLAG_RETURN_ERROR_OBJECT = 0,
    WBEM_FLAG_SEND_STATUS = 128,
    WBEM_FLAG_DONT_SEND_STATUS = 0,
    WBEM_FLAG_ENSURE_LOCATABLE = 256,
    WBEM_FLAG_DIRECT_READ = 512,
    WBEM_FLAG_SEND_ONLY_SELECTED = 0,
    WBEM_RETURN_WHEN_COMPLETE = 0,
    WBEM_RETURN_IMMEDIATELY = 16,
    WBEM_MASK_RESERVED_FLAGS = 126976,
    WBEM_FLAG_USE_AMENDED_QUALIFIERS = 131072,
    WBEM_FLAG_STRONG_VALIDATION = 1048576,
};
pub const WBEM_FLAG_RETURN_IMMEDIATELY = WBEM_GENERIC_FLAG_TYPE.WBEM_FLAG_RETURN_IMMEDIATELY;
pub const WBEM_FLAG_RETURN_WBEM_COMPLETE = WBEM_GENERIC_FLAG_TYPE.WBEM_FLAG_RETURN_WBEM_COMPLETE;
pub const WBEM_FLAG_BIDIRECTIONAL = WBEM_GENERIC_FLAG_TYPE.WBEM_FLAG_BIDIRECTIONAL;
pub const WBEM_FLAG_FORWARD_ONLY = WBEM_GENERIC_FLAG_TYPE.WBEM_FLAG_FORWARD_ONLY;
pub const WBEM_FLAG_NO_ERROR_OBJECT = WBEM_GENERIC_FLAG_TYPE.WBEM_FLAG_NO_ERROR_OBJECT;
pub const WBEM_FLAG_RETURN_ERROR_OBJECT = WBEM_GENERIC_FLAG_TYPE.WBEM_FLAG_RETURN_ERROR_OBJECT;
pub const WBEM_FLAG_SEND_STATUS = WBEM_GENERIC_FLAG_TYPE.WBEM_FLAG_SEND_STATUS;
pub const WBEM_FLAG_DONT_SEND_STATUS = WBEM_GENERIC_FLAG_TYPE.WBEM_FLAG_DONT_SEND_STATUS;
pub const WBEM_FLAG_ENSURE_LOCATABLE = WBEM_GENERIC_FLAG_TYPE.WBEM_FLAG_ENSURE_LOCATABLE;
pub const WBEM_FLAG_DIRECT_READ = WBEM_GENERIC_FLAG_TYPE.WBEM_FLAG_DIRECT_READ;
pub const WBEM_FLAG_SEND_ONLY_SELECTED = WBEM_GENERIC_FLAG_TYPE.WBEM_FLAG_SEND_ONLY_SELECTED;
pub const WBEM_RETURN_WHEN_COMPLETE = WBEM_GENERIC_FLAG_TYPE.WBEM_RETURN_WHEN_COMPLETE;
pub const WBEM_RETURN_IMMEDIATELY = WBEM_GENERIC_FLAG_TYPE.WBEM_RETURN_IMMEDIATELY;
pub const WBEM_MASK_RESERVED_FLAGS = WBEM_GENERIC_FLAG_TYPE.WBEM_MASK_RESERVED_FLAGS;
pub const WBEM_FLAG_USE_AMENDED_QUALIFIERS = WBEM_GENERIC_FLAG_TYPE.WBEM_FLAG_USE_AMENDED_QUALIFIERS;
pub const WBEM_FLAG_STRONG_VALIDATION = WBEM_GENERIC_FLAG_TYPE.WBEM_FLAG_STRONG_VALIDATION;

pub const WBEM_STATUS_TYPE = extern enum(i32) {
    WBEM_STATUS_COMPLETE = 0,
    WBEM_STATUS_REQUIREMENTS = 1,
    WBEM_STATUS_PROGRESS = 2,
    WBEM_STATUS_LOGGING_INFORMATION = 256,
    WBEM_STATUS_LOGGING_INFORMATION_PROVIDER = 512,
    WBEM_STATUS_LOGGING_INFORMATION_HOST = 1024,
    WBEM_STATUS_LOGGING_INFORMATION_REPOSITORY = 2048,
    WBEM_STATUS_LOGGING_INFORMATION_ESS = 4096,
};
pub const WBEM_STATUS_COMPLETE = WBEM_STATUS_TYPE.WBEM_STATUS_COMPLETE;
pub const WBEM_STATUS_REQUIREMENTS = WBEM_STATUS_TYPE.WBEM_STATUS_REQUIREMENTS;
pub const WBEM_STATUS_PROGRESS = WBEM_STATUS_TYPE.WBEM_STATUS_PROGRESS;
pub const WBEM_STATUS_LOGGING_INFORMATION = WBEM_STATUS_TYPE.WBEM_STATUS_LOGGING_INFORMATION;
pub const WBEM_STATUS_LOGGING_INFORMATION_PROVIDER = WBEM_STATUS_TYPE.WBEM_STATUS_LOGGING_INFORMATION_PROVIDER;
pub const WBEM_STATUS_LOGGING_INFORMATION_HOST = WBEM_STATUS_TYPE.WBEM_STATUS_LOGGING_INFORMATION_HOST;
pub const WBEM_STATUS_LOGGING_INFORMATION_REPOSITORY = WBEM_STATUS_TYPE.WBEM_STATUS_LOGGING_INFORMATION_REPOSITORY;
pub const WBEM_STATUS_LOGGING_INFORMATION_ESS = WBEM_STATUS_TYPE.WBEM_STATUS_LOGGING_INFORMATION_ESS;

pub const WBEM_TIMEOUT_TYPE = extern enum(i32) {
    WBEM_NO_WAIT = 0,
    WBEM_INFINITE = -1,
};
pub const WBEM_NO_WAIT = WBEM_TIMEOUT_TYPE.WBEM_NO_WAIT;
pub const WBEM_INFINITE = WBEM_TIMEOUT_TYPE.WBEM_INFINITE;

pub const WBEM_CONDITION_FLAG_TYPE = extern enum(i32) {
    WBEM_FLAG_ALWAYS = 0,
    WBEM_FLAG_ONLY_IF_TRUE = 1,
    WBEM_FLAG_ONLY_IF_FALSE = 2,
    WBEM_FLAG_ONLY_IF_IDENTICAL = 3,
    WBEM_MASK_PRIMARY_CONDITION = 3,
    WBEM_FLAG_KEYS_ONLY = 4,
    WBEM_FLAG_REFS_ONLY = 8,
    WBEM_FLAG_LOCAL_ONLY = 16,
    WBEM_FLAG_PROPAGATED_ONLY = 32,
    WBEM_FLAG_SYSTEM_ONLY = 48,
    WBEM_FLAG_NONSYSTEM_ONLY = 64,
    WBEM_MASK_CONDITION_ORIGIN = 112,
    WBEM_FLAG_CLASS_OVERRIDES_ONLY = 256,
    WBEM_FLAG_CLASS_LOCAL_AND_OVERRIDES = 512,
    WBEM_MASK_CLASS_CONDITION = 768,
};
pub const WBEM_FLAG_ALWAYS = WBEM_CONDITION_FLAG_TYPE.WBEM_FLAG_ALWAYS;
pub const WBEM_FLAG_ONLY_IF_TRUE = WBEM_CONDITION_FLAG_TYPE.WBEM_FLAG_ONLY_IF_TRUE;
pub const WBEM_FLAG_ONLY_IF_FALSE = WBEM_CONDITION_FLAG_TYPE.WBEM_FLAG_ONLY_IF_FALSE;
pub const WBEM_FLAG_ONLY_IF_IDENTICAL = WBEM_CONDITION_FLAG_TYPE.WBEM_FLAG_ONLY_IF_IDENTICAL;
pub const WBEM_MASK_PRIMARY_CONDITION = WBEM_CONDITION_FLAG_TYPE.WBEM_MASK_PRIMARY_CONDITION;
pub const WBEM_FLAG_KEYS_ONLY = WBEM_CONDITION_FLAG_TYPE.WBEM_FLAG_KEYS_ONLY;
pub const WBEM_FLAG_REFS_ONLY = WBEM_CONDITION_FLAG_TYPE.WBEM_FLAG_REFS_ONLY;
pub const WBEM_FLAG_LOCAL_ONLY = WBEM_CONDITION_FLAG_TYPE.WBEM_FLAG_LOCAL_ONLY;
pub const WBEM_FLAG_PROPAGATED_ONLY = WBEM_CONDITION_FLAG_TYPE.WBEM_FLAG_PROPAGATED_ONLY;
pub const WBEM_FLAG_SYSTEM_ONLY = WBEM_CONDITION_FLAG_TYPE.WBEM_FLAG_SYSTEM_ONLY;
pub const WBEM_FLAG_NONSYSTEM_ONLY = WBEM_CONDITION_FLAG_TYPE.WBEM_FLAG_NONSYSTEM_ONLY;
pub const WBEM_MASK_CONDITION_ORIGIN = WBEM_CONDITION_FLAG_TYPE.WBEM_MASK_CONDITION_ORIGIN;
pub const WBEM_FLAG_CLASS_OVERRIDES_ONLY = WBEM_CONDITION_FLAG_TYPE.WBEM_FLAG_CLASS_OVERRIDES_ONLY;
pub const WBEM_FLAG_CLASS_LOCAL_AND_OVERRIDES = WBEM_CONDITION_FLAG_TYPE.WBEM_FLAG_CLASS_LOCAL_AND_OVERRIDES;
pub const WBEM_MASK_CLASS_CONDITION = WBEM_CONDITION_FLAG_TYPE.WBEM_MASK_CLASS_CONDITION;

pub const WBEM_FLAVOR_TYPE = extern enum(i32) {
    WBEM_FLAVOR_DONT_PROPAGATE = 0,
    WBEM_FLAVOR_FLAG_PROPAGATE_TO_INSTANCE = 1,
    WBEM_FLAVOR_FLAG_PROPAGATE_TO_DERIVED_CLASS = 2,
    WBEM_FLAVOR_MASK_PROPAGATION = 15,
    WBEM_FLAVOR_OVERRIDABLE = 0,
    WBEM_FLAVOR_NOT_OVERRIDABLE = 16,
    WBEM_FLAVOR_MASK_PERMISSIONS = 16,
    WBEM_FLAVOR_ORIGIN_LOCAL = 0,
    WBEM_FLAVOR_ORIGIN_PROPAGATED = 32,
    WBEM_FLAVOR_ORIGIN_SYSTEM = 64,
    WBEM_FLAVOR_MASK_ORIGIN = 96,
    WBEM_FLAVOR_NOT_AMENDED = 0,
    WBEM_FLAVOR_AMENDED = 128,
    WBEM_FLAVOR_MASK_AMENDED = 128,
};
pub const WBEM_FLAVOR_DONT_PROPAGATE = WBEM_FLAVOR_TYPE.WBEM_FLAVOR_DONT_PROPAGATE;
pub const WBEM_FLAVOR_FLAG_PROPAGATE_TO_INSTANCE = WBEM_FLAVOR_TYPE.WBEM_FLAVOR_FLAG_PROPAGATE_TO_INSTANCE;
pub const WBEM_FLAVOR_FLAG_PROPAGATE_TO_DERIVED_CLASS = WBEM_FLAVOR_TYPE.WBEM_FLAVOR_FLAG_PROPAGATE_TO_DERIVED_CLASS;
pub const WBEM_FLAVOR_MASK_PROPAGATION = WBEM_FLAVOR_TYPE.WBEM_FLAVOR_MASK_PROPAGATION;
pub const WBEM_FLAVOR_OVERRIDABLE = WBEM_FLAVOR_TYPE.WBEM_FLAVOR_OVERRIDABLE;
pub const WBEM_FLAVOR_NOT_OVERRIDABLE = WBEM_FLAVOR_TYPE.WBEM_FLAVOR_NOT_OVERRIDABLE;
pub const WBEM_FLAVOR_MASK_PERMISSIONS = WBEM_FLAVOR_TYPE.WBEM_FLAVOR_MASK_PERMISSIONS;
pub const WBEM_FLAVOR_ORIGIN_LOCAL = WBEM_FLAVOR_TYPE.WBEM_FLAVOR_ORIGIN_LOCAL;
pub const WBEM_FLAVOR_ORIGIN_PROPAGATED = WBEM_FLAVOR_TYPE.WBEM_FLAVOR_ORIGIN_PROPAGATED;
pub const WBEM_FLAVOR_ORIGIN_SYSTEM = WBEM_FLAVOR_TYPE.WBEM_FLAVOR_ORIGIN_SYSTEM;
pub const WBEM_FLAVOR_MASK_ORIGIN = WBEM_FLAVOR_TYPE.WBEM_FLAVOR_MASK_ORIGIN;
pub const WBEM_FLAVOR_NOT_AMENDED = WBEM_FLAVOR_TYPE.WBEM_FLAVOR_NOT_AMENDED;
pub const WBEM_FLAVOR_AMENDED = WBEM_FLAVOR_TYPE.WBEM_FLAVOR_AMENDED;
pub const WBEM_FLAVOR_MASK_AMENDED = WBEM_FLAVOR_TYPE.WBEM_FLAVOR_MASK_AMENDED;

pub const WBEM_QUERY_FLAG_TYPE = extern enum(i32) {
    WBEM_FLAG_DEEP = 0,
    WBEM_FLAG_SHALLOW = 1,
    WBEM_FLAG_PROTOTYPE = 2,
};
pub const WBEM_FLAG_DEEP = WBEM_QUERY_FLAG_TYPE.WBEM_FLAG_DEEP;
pub const WBEM_FLAG_SHALLOW = WBEM_QUERY_FLAG_TYPE.WBEM_FLAG_SHALLOW;
pub const WBEM_FLAG_PROTOTYPE = WBEM_QUERY_FLAG_TYPE.WBEM_FLAG_PROTOTYPE;

pub const WBEM_SECURITY_FLAGS = extern enum(i32) {
    WBEM_ENABLE = 1,
    WBEM_METHOD_EXECUTE = 2,
    WBEM_FULL_WRITE_REP = 4,
    WBEM_PARTIAL_WRITE_REP = 8,
    WBEM_WRITE_PROVIDER = 16,
    WBEM_REMOTE_ACCESS = 32,
    WBEM_RIGHT_SUBSCRIBE = 64,
    WBEM_RIGHT_PUBLISH = 128,
};
pub const WBEM_ENABLE = WBEM_SECURITY_FLAGS.WBEM_ENABLE;
pub const WBEM_METHOD_EXECUTE = WBEM_SECURITY_FLAGS.WBEM_METHOD_EXECUTE;
pub const WBEM_FULL_WRITE_REP = WBEM_SECURITY_FLAGS.WBEM_FULL_WRITE_REP;
pub const WBEM_PARTIAL_WRITE_REP = WBEM_SECURITY_FLAGS.WBEM_PARTIAL_WRITE_REP;
pub const WBEM_WRITE_PROVIDER = WBEM_SECURITY_FLAGS.WBEM_WRITE_PROVIDER;
pub const WBEM_REMOTE_ACCESS = WBEM_SECURITY_FLAGS.WBEM_REMOTE_ACCESS;
pub const WBEM_RIGHT_SUBSCRIBE = WBEM_SECURITY_FLAGS.WBEM_RIGHT_SUBSCRIBE;
pub const WBEM_RIGHT_PUBLISH = WBEM_SECURITY_FLAGS.WBEM_RIGHT_PUBLISH;

pub const tag_WBEM_LIMITATION_FLAG_TYPE = extern enum(i32) {
    WBEM_FLAG_EXCLUDE_OBJECT_QUALIFIERS = 16,
    WBEM_FLAG_EXCLUDE_PROPERTY_QUALIFIERS = 32,
};
pub const WBEM_FLAG_EXCLUDE_OBJECT_QUALIFIERS = tag_WBEM_LIMITATION_FLAG_TYPE.WBEM_FLAG_EXCLUDE_OBJECT_QUALIFIERS;
pub const WBEM_FLAG_EXCLUDE_PROPERTY_QUALIFIERS = tag_WBEM_LIMITATION_FLAG_TYPE.WBEM_FLAG_EXCLUDE_PROPERTY_QUALIFIERS;

pub const WBEM_TEXT_FLAG_TYPE = extern enum(i32) {
    WBEM_FLAG_NO_FLAVORS = 1,
};
pub const WBEM_FLAG_NO_FLAVORS = WBEM_TEXT_FLAG_TYPE.WBEM_FLAG_NO_FLAVORS;

pub const WBEM_COMPARISON_FLAG = extern enum(i32) {
    WBEM_COMPARISON_INCLUDE_ALL = 0,
    WBEM_FLAG_IGNORE_QUALIFIERS = 1,
    WBEM_FLAG_IGNORE_OBJECT_SOURCE = 2,
    WBEM_FLAG_IGNORE_DEFAULT_VALUES = 4,
    WBEM_FLAG_IGNORE_CLASS = 8,
    WBEM_FLAG_IGNORE_CASE = 16,
    WBEM_FLAG_IGNORE_FLAVOR = 32,
};
pub const WBEM_COMPARISON_INCLUDE_ALL = WBEM_COMPARISON_FLAG.WBEM_COMPARISON_INCLUDE_ALL;
pub const WBEM_FLAG_IGNORE_QUALIFIERS = WBEM_COMPARISON_FLAG.WBEM_FLAG_IGNORE_QUALIFIERS;
pub const WBEM_FLAG_IGNORE_OBJECT_SOURCE = WBEM_COMPARISON_FLAG.WBEM_FLAG_IGNORE_OBJECT_SOURCE;
pub const WBEM_FLAG_IGNORE_DEFAULT_VALUES = WBEM_COMPARISON_FLAG.WBEM_FLAG_IGNORE_DEFAULT_VALUES;
pub const WBEM_FLAG_IGNORE_CLASS = WBEM_COMPARISON_FLAG.WBEM_FLAG_IGNORE_CLASS;
pub const WBEM_FLAG_IGNORE_CASE = WBEM_COMPARISON_FLAG.WBEM_FLAG_IGNORE_CASE;
pub const WBEM_FLAG_IGNORE_FLAVOR = WBEM_COMPARISON_FLAG.WBEM_FLAG_IGNORE_FLAVOR;

pub const tag_WBEM_LOCKING = extern enum(i32) {
    WBEM_FLAG_ALLOW_READ = 1,
};
pub const WBEM_FLAG_ALLOW_READ = tag_WBEM_LOCKING.WBEM_FLAG_ALLOW_READ;

pub const CIMTYPE_ENUMERATION = extern enum(i32) {
    CIM_ILLEGAL = 4095,
    CIM_EMPTY = 0,
    CIM_SINT8 = 16,
    CIM_UINT8 = 17,
    CIM_SINT16 = 2,
    CIM_UINT16 = 18,
    CIM_SINT32 = 3,
    CIM_UINT32 = 19,
    CIM_SINT64 = 20,
    CIM_UINT64 = 21,
    CIM_REAL32 = 4,
    CIM_REAL64 = 5,
    CIM_BOOLEAN = 11,
    CIM_STRING = 8,
    CIM_DATETIME = 101,
    CIM_REFERENCE = 102,
    CIM_CHAR16 = 103,
    CIM_OBJECT = 13,
    CIM_FLAG_ARRAY = 8192,
};
pub const CIM_ILLEGAL = CIMTYPE_ENUMERATION.CIM_ILLEGAL;
pub const CIM_EMPTY = CIMTYPE_ENUMERATION.CIM_EMPTY;
pub const CIM_SINT8 = CIMTYPE_ENUMERATION.CIM_SINT8;
pub const CIM_UINT8 = CIMTYPE_ENUMERATION.CIM_UINT8;
pub const CIM_SINT16 = CIMTYPE_ENUMERATION.CIM_SINT16;
pub const CIM_UINT16 = CIMTYPE_ENUMERATION.CIM_UINT16;
pub const CIM_SINT32 = CIMTYPE_ENUMERATION.CIM_SINT32;
pub const CIM_UINT32 = CIMTYPE_ENUMERATION.CIM_UINT32;
pub const CIM_SINT64 = CIMTYPE_ENUMERATION.CIM_SINT64;
pub const CIM_UINT64 = CIMTYPE_ENUMERATION.CIM_UINT64;
pub const CIM_REAL32 = CIMTYPE_ENUMERATION.CIM_REAL32;
pub const CIM_REAL64 = CIMTYPE_ENUMERATION.CIM_REAL64;
pub const CIM_BOOLEAN = CIMTYPE_ENUMERATION.CIM_BOOLEAN;
pub const CIM_STRING = CIMTYPE_ENUMERATION.CIM_STRING;
pub const CIM_DATETIME = CIMTYPE_ENUMERATION.CIM_DATETIME;
pub const CIM_REFERENCE = CIMTYPE_ENUMERATION.CIM_REFERENCE;
pub const CIM_CHAR16 = CIMTYPE_ENUMERATION.CIM_CHAR16;
pub const CIM_OBJECT = CIMTYPE_ENUMERATION.CIM_OBJECT;
pub const CIM_FLAG_ARRAY = CIMTYPE_ENUMERATION.CIM_FLAG_ARRAY;

pub const WBEM_BACKUP_RESTORE_FLAGS = extern enum(i32) {
    WBEM_FLAG_BACKUP_RESTORE_DEFAULT = 0,
    WBEM_FLAG_BACKUP_RESTORE_FORCE_SHUTDOWN = 1,
};
pub const WBEM_FLAG_BACKUP_RESTORE_DEFAULT = WBEM_BACKUP_RESTORE_FLAGS.WBEM_FLAG_BACKUP_RESTORE_DEFAULT;
pub const WBEM_FLAG_BACKUP_RESTORE_FORCE_SHUTDOWN = WBEM_BACKUP_RESTORE_FLAGS.WBEM_FLAG_BACKUP_RESTORE_FORCE_SHUTDOWN;

pub const WBEM_REFRESHER_FLAGS = extern enum(i32) {
    WBEM_FLAG_REFRESH_AUTO_RECONNECT = 0,
    WBEM_FLAG_REFRESH_NO_AUTO_RECONNECT = 1,
};
pub const WBEM_FLAG_REFRESH_AUTO_RECONNECT = WBEM_REFRESHER_FLAGS.WBEM_FLAG_REFRESH_AUTO_RECONNECT;
pub const WBEM_FLAG_REFRESH_NO_AUTO_RECONNECT = WBEM_REFRESHER_FLAGS.WBEM_FLAG_REFRESH_NO_AUTO_RECONNECT;

pub const tag_WBEM_SHUTDOWN_FLAGS = extern enum(i32) {
    WBEM_SHUTDOWN_UNLOAD_COMPONENT = 1,
    WBEM_SHUTDOWN_WMI = 2,
    WBEM_SHUTDOWN_OS = 3,
};
pub const WBEM_SHUTDOWN_UNLOAD_COMPONENT = tag_WBEM_SHUTDOWN_FLAGS.WBEM_SHUTDOWN_UNLOAD_COMPONENT;
pub const WBEM_SHUTDOWN_WMI = tag_WBEM_SHUTDOWN_FLAGS.WBEM_SHUTDOWN_WMI;
pub const WBEM_SHUTDOWN_OS = tag_WBEM_SHUTDOWN_FLAGS.WBEM_SHUTDOWN_OS;

pub const tag_WBEMSTATUS_FORMAT = extern enum(i32) {
    WBEMSTATUS_FORMAT_NEWLINE = 0,
    WBEMSTATUS_FORMAT_NO_NEWLINE = 1,
};
pub const WBEMSTATUS_FORMAT_NEWLINE = tag_WBEMSTATUS_FORMAT.WBEMSTATUS_FORMAT_NEWLINE;
pub const WBEMSTATUS_FORMAT_NO_NEWLINE = tag_WBEMSTATUS_FORMAT.WBEMSTATUS_FORMAT_NO_NEWLINE;

pub const WBEM_LIMITS = extern enum(i32) {
    WBEM_MAX_IDENTIFIER = 4096,
    WBEM_MAX_QUERY = 16384,
    WBEM_MAX_PATH = 8192,
    WBEM_MAX_OBJECT_NESTING = 64,
    WBEM_MAX_USER_PROPERTIES = 1024,
};
pub const WBEM_MAX_IDENTIFIER = WBEM_LIMITS.WBEM_MAX_IDENTIFIER;
pub const WBEM_MAX_QUERY = WBEM_LIMITS.WBEM_MAX_QUERY;
pub const WBEM_MAX_PATH = WBEM_LIMITS.WBEM_MAX_PATH;
pub const WBEM_MAX_OBJECT_NESTING = WBEM_LIMITS.WBEM_MAX_OBJECT_NESTING;
pub const WBEM_MAX_USER_PROPERTIES = WBEM_LIMITS.WBEM_MAX_USER_PROPERTIES;

pub const WBEMSTATUS = extern enum(i32) {
    WBEM_NO_ERROR = 0,
    WBEM_S_NO_ERROR = 0,
    WBEM_S_SAME = 0,
    WBEM_S_FALSE = 1,
    WBEM_S_ALREADY_EXISTS = 262145,
    WBEM_S_RESET_TO_DEFAULT = 262146,
    WBEM_S_DIFFERENT = 262147,
    WBEM_S_TIMEDOUT = 262148,
    WBEM_S_NO_MORE_DATA = 262149,
    WBEM_S_OPERATION_CANCELLED = 262150,
    WBEM_S_PENDING = 262151,
    WBEM_S_DUPLICATE_OBJECTS = 262152,
    WBEM_S_ACCESS_DENIED = 262153,
    WBEM_S_PARTIAL_RESULTS = 262160,
    WBEM_S_SOURCE_NOT_AVAILABLE = 262167,
    WBEM_E_FAILED = -2147217407,
    WBEM_E_NOT_FOUND = -2147217406,
    WBEM_E_ACCESS_DENIED = -2147217405,
    WBEM_E_PROVIDER_FAILURE = -2147217404,
    WBEM_E_TYPE_MISMATCH = -2147217403,
    WBEM_E_OUT_OF_MEMORY = -2147217402,
    WBEM_E_INVALID_CONTEXT = -2147217401,
    WBEM_E_INVALID_PARAMETER = -2147217400,
    WBEM_E_NOT_AVAILABLE = -2147217399,
    WBEM_E_CRITICAL_ERROR = -2147217398,
    WBEM_E_INVALID_STREAM = -2147217397,
    WBEM_E_NOT_SUPPORTED = -2147217396,
    WBEM_E_INVALID_SUPERCLASS = -2147217395,
    WBEM_E_INVALID_NAMESPACE = -2147217394,
    WBEM_E_INVALID_OBJECT = -2147217393,
    WBEM_E_INVALID_CLASS = -2147217392,
    WBEM_E_PROVIDER_NOT_FOUND = -2147217391,
    WBEM_E_INVALID_PROVIDER_REGISTRATION = -2147217390,
    WBEM_E_PROVIDER_LOAD_FAILURE = -2147217389,
    WBEM_E_INITIALIZATION_FAILURE = -2147217388,
    WBEM_E_TRANSPORT_FAILURE = -2147217387,
    WBEM_E_INVALID_OPERATION = -2147217386,
    WBEM_E_INVALID_QUERY = -2147217385,
    WBEM_E_INVALID_QUERY_TYPE = -2147217384,
    WBEM_E_ALREADY_EXISTS = -2147217383,
    WBEM_E_OVERRIDE_NOT_ALLOWED = -2147217382,
    WBEM_E_PROPAGATED_QUALIFIER = -2147217381,
    WBEM_E_PROPAGATED_PROPERTY = -2147217380,
    WBEM_E_UNEXPECTED = -2147217379,
    WBEM_E_ILLEGAL_OPERATION = -2147217378,
    WBEM_E_CANNOT_BE_KEY = -2147217377,
    WBEM_E_INCOMPLETE_CLASS = -2147217376,
    WBEM_E_INVALID_SYNTAX = -2147217375,
    WBEM_E_NONDECORATED_OBJECT = -2147217374,
    WBEM_E_READ_ONLY = -2147217373,
    WBEM_E_PROVIDER_NOT_CAPABLE = -2147217372,
    WBEM_E_CLASS_HAS_CHILDREN = -2147217371,
    WBEM_E_CLASS_HAS_INSTANCES = -2147217370,
    WBEM_E_QUERY_NOT_IMPLEMENTED = -2147217369,
    WBEM_E_ILLEGAL_NULL = -2147217368,
    WBEM_E_INVALID_QUALIFIER_TYPE = -2147217367,
    WBEM_E_INVALID_PROPERTY_TYPE = -2147217366,
    WBEM_E_VALUE_OUT_OF_RANGE = -2147217365,
    WBEM_E_CANNOT_BE_SINGLETON = -2147217364,
    WBEM_E_INVALID_CIM_TYPE = -2147217363,
    WBEM_E_INVALID_METHOD = -2147217362,
    WBEM_E_INVALID_METHOD_PARAMETERS = -2147217361,
    WBEM_E_SYSTEM_PROPERTY = -2147217360,
    WBEM_E_INVALID_PROPERTY = -2147217359,
    WBEM_E_CALL_CANCELLED = -2147217358,
    WBEM_E_SHUTTING_DOWN = -2147217357,
    WBEM_E_PROPAGATED_METHOD = -2147217356,
    WBEM_E_UNSUPPORTED_PARAMETER = -2147217355,
    WBEM_E_MISSING_PARAMETER_ID = -2147217354,
    WBEM_E_INVALID_PARAMETER_ID = -2147217353,
    WBEM_E_NONCONSECUTIVE_PARAMETER_IDS = -2147217352,
    WBEM_E_PARAMETER_ID_ON_RETVAL = -2147217351,
    WBEM_E_INVALID_OBJECT_PATH = -2147217350,
    WBEM_E_OUT_OF_DISK_SPACE = -2147217349,
    WBEM_E_BUFFER_TOO_SMALL = -2147217348,
    WBEM_E_UNSUPPORTED_PUT_EXTENSION = -2147217347,
    WBEM_E_UNKNOWN_OBJECT_TYPE = -2147217346,
    WBEM_E_UNKNOWN_PACKET_TYPE = -2147217345,
    WBEM_E_MARSHAL_VERSION_MISMATCH = -2147217344,
    WBEM_E_MARSHAL_INVALID_SIGNATURE = -2147217343,
    WBEM_E_INVALID_QUALIFIER = -2147217342,
    WBEM_E_INVALID_DUPLICATE_PARAMETER = -2147217341,
    WBEM_E_TOO_MUCH_DATA = -2147217340,
    WBEM_E_SERVER_TOO_BUSY = -2147217339,
    WBEM_E_INVALID_FLAVOR = -2147217338,
    WBEM_E_CIRCULAR_REFERENCE = -2147217337,
    WBEM_E_UNSUPPORTED_CLASS_UPDATE = -2147217336,
    WBEM_E_CANNOT_CHANGE_KEY_INHERITANCE = -2147217335,
    WBEM_E_CANNOT_CHANGE_INDEX_INHERITANCE = -2147217328,
    WBEM_E_TOO_MANY_PROPERTIES = -2147217327,
    WBEM_E_UPDATE_TYPE_MISMATCH = -2147217326,
    WBEM_E_UPDATE_OVERRIDE_NOT_ALLOWED = -2147217325,
    WBEM_E_UPDATE_PROPAGATED_METHOD = -2147217324,
    WBEM_E_METHOD_NOT_IMPLEMENTED = -2147217323,
    WBEM_E_METHOD_DISABLED = -2147217322,
    WBEM_E_REFRESHER_BUSY = -2147217321,
    WBEM_E_UNPARSABLE_QUERY = -2147217320,
    WBEM_E_NOT_EVENT_CLASS = -2147217319,
    WBEM_E_MISSING_GROUP_WITHIN = -2147217318,
    WBEM_E_MISSING_AGGREGATION_LIST = -2147217317,
    WBEM_E_PROPERTY_NOT_AN_OBJECT = -2147217316,
    WBEM_E_AGGREGATING_BY_OBJECT = -2147217315,
    WBEM_E_UNINTERPRETABLE_PROVIDER_QUERY = -2147217313,
    WBEM_E_BACKUP_RESTORE_WINMGMT_RUNNING = -2147217312,
    WBEM_E_QUEUE_OVERFLOW = -2147217311,
    WBEM_E_PRIVILEGE_NOT_HELD = -2147217310,
    WBEM_E_INVALID_OPERATOR = -2147217309,
    WBEM_E_LOCAL_CREDENTIALS = -2147217308,
    WBEM_E_CANNOT_BE_ABSTRACT = -2147217307,
    WBEM_E_AMENDED_OBJECT = -2147217306,
    WBEM_E_CLIENT_TOO_SLOW = -2147217305,
    WBEM_E_NULL_SECURITY_DESCRIPTOR = -2147217304,
    WBEM_E_TIMED_OUT = -2147217303,
    WBEM_E_INVALID_ASSOCIATION = -2147217302,
    WBEM_E_AMBIGUOUS_OPERATION = -2147217301,
    WBEM_E_QUOTA_VIOLATION = -2147217300,
    WBEM_E_RESERVED_001 = -2147217299,
    WBEM_E_RESERVED_002 = -2147217298,
    WBEM_E_UNSUPPORTED_LOCALE = -2147217297,
    WBEM_E_HANDLE_OUT_OF_DATE = -2147217296,
    WBEM_E_CONNECTION_FAILED = -2147217295,
    WBEM_E_INVALID_HANDLE_REQUEST = -2147217294,
    WBEM_E_PROPERTY_NAME_TOO_WIDE = -2147217293,
    WBEM_E_CLASS_NAME_TOO_WIDE = -2147217292,
    WBEM_E_METHOD_NAME_TOO_WIDE = -2147217291,
    WBEM_E_QUALIFIER_NAME_TOO_WIDE = -2147217290,
    WBEM_E_RERUN_COMMAND = -2147217289,
    WBEM_E_DATABASE_VER_MISMATCH = -2147217288,
    WBEM_E_VETO_DELETE = -2147217287,
    WBEM_E_VETO_PUT = -2147217286,
    WBEM_E_INVALID_LOCALE = -2147217280,
    WBEM_E_PROVIDER_SUSPENDED = -2147217279,
    WBEM_E_SYNCHRONIZATION_REQUIRED = -2147217278,
    WBEM_E_NO_SCHEMA = -2147217277,
    WBEM_E_PROVIDER_ALREADY_REGISTERED = -2147217276,
    WBEM_E_PROVIDER_NOT_REGISTERED = -2147217275,
    WBEM_E_FATAL_TRANSPORT_ERROR = -2147217274,
    WBEM_E_ENCRYPTED_CONNECTION_REQUIRED = -2147217273,
    WBEM_E_PROVIDER_TIMED_OUT = -2147217272,
    WBEM_E_NO_KEY = -2147217271,
    WBEM_E_PROVIDER_DISABLED = -2147217270,
    WBEMESS_E_REGISTRATION_TOO_BROAD = -2147213311,
    WBEMESS_E_REGISTRATION_TOO_PRECISE = -2147213310,
    WBEMESS_E_AUTHZ_NOT_PRIVILEGED = -2147213309,
    WBEMMOF_E_EXPECTED_QUALIFIER_NAME = -2147205119,
    WBEMMOF_E_EXPECTED_SEMI = -2147205118,
    WBEMMOF_E_EXPECTED_OPEN_BRACE = -2147205117,
    WBEMMOF_E_EXPECTED_CLOSE_BRACE = -2147205116,
    WBEMMOF_E_EXPECTED_CLOSE_BRACKET = -2147205115,
    WBEMMOF_E_EXPECTED_CLOSE_PAREN = -2147205114,
    WBEMMOF_E_ILLEGAL_CONSTANT_VALUE = -2147205113,
    WBEMMOF_E_EXPECTED_TYPE_IDENTIFIER = -2147205112,
    WBEMMOF_E_EXPECTED_OPEN_PAREN = -2147205111,
    WBEMMOF_E_UNRECOGNIZED_TOKEN = -2147205110,
    WBEMMOF_E_UNRECOGNIZED_TYPE = -2147205109,
    WBEMMOF_E_EXPECTED_PROPERTY_NAME = -2147205108,
    WBEMMOF_E_TYPEDEF_NOT_SUPPORTED = -2147205107,
    WBEMMOF_E_UNEXPECTED_ALIAS = -2147205106,
    WBEMMOF_E_UNEXPECTED_ARRAY_INIT = -2147205105,
    WBEMMOF_E_INVALID_AMENDMENT_SYNTAX = -2147205104,
    WBEMMOF_E_INVALID_DUPLICATE_AMENDMENT = -2147205103,
    WBEMMOF_E_INVALID_PRAGMA = -2147205102,
    WBEMMOF_E_INVALID_NAMESPACE_SYNTAX = -2147205101,
    WBEMMOF_E_EXPECTED_CLASS_NAME = -2147205100,
    WBEMMOF_E_TYPE_MISMATCH = -2147205099,
    WBEMMOF_E_EXPECTED_ALIAS_NAME = -2147205098,
    WBEMMOF_E_INVALID_CLASS_DECLARATION = -2147205097,
    WBEMMOF_E_INVALID_INSTANCE_DECLARATION = -2147205096,
    WBEMMOF_E_EXPECTED_DOLLAR = -2147205095,
    WBEMMOF_E_CIMTYPE_QUALIFIER = -2147205094,
    WBEMMOF_E_DUPLICATE_PROPERTY = -2147205093,
    WBEMMOF_E_INVALID_NAMESPACE_SPECIFICATION = -2147205092,
    WBEMMOF_E_OUT_OF_RANGE = -2147205091,
    WBEMMOF_E_INVALID_FILE = -2147205090,
    WBEMMOF_E_ALIASES_IN_EMBEDDED = -2147205089,
    WBEMMOF_E_NULL_ARRAY_ELEM = -2147205088,
    WBEMMOF_E_DUPLICATE_QUALIFIER = -2147205087,
    WBEMMOF_E_EXPECTED_FLAVOR_TYPE = -2147205086,
    WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES = -2147205085,
    WBEMMOF_E_MULTIPLE_ALIASES = -2147205084,
    WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES2 = -2147205083,
    WBEMMOF_E_NO_ARRAYS_RETURNED = -2147205082,
    WBEMMOF_E_MUST_BE_IN_OR_OUT = -2147205081,
    WBEMMOF_E_INVALID_FLAGS_SYNTAX = -2147205080,
    WBEMMOF_E_EXPECTED_BRACE_OR_BAD_TYPE = -2147205079,
    WBEMMOF_E_UNSUPPORTED_CIMV22_QUAL_VALUE = -2147205078,
    WBEMMOF_E_UNSUPPORTED_CIMV22_DATA_TYPE = -2147205077,
    WBEMMOF_E_INVALID_DELETEINSTANCE_SYNTAX = -2147205076,
    WBEMMOF_E_INVALID_QUALIFIER_SYNTAX = -2147205075,
    WBEMMOF_E_QUALIFIER_USED_OUTSIDE_SCOPE = -2147205074,
    WBEMMOF_E_ERROR_CREATING_TEMP_FILE = -2147205073,
    WBEMMOF_E_ERROR_INVALID_INCLUDE_FILE = -2147205072,
    WBEMMOF_E_INVALID_DELETECLASS_SYNTAX = -2147205071,
};
pub const WBEM_NO_ERROR = WBEMSTATUS.WBEM_NO_ERROR;
pub const WBEM_S_NO_ERROR = WBEMSTATUS.WBEM_S_NO_ERROR;
pub const WBEM_S_SAME = WBEMSTATUS.WBEM_S_SAME;
pub const WBEM_S_FALSE = WBEMSTATUS.WBEM_S_FALSE;
pub const WBEM_S_ALREADY_EXISTS = WBEMSTATUS.WBEM_S_ALREADY_EXISTS;
pub const WBEM_S_RESET_TO_DEFAULT = WBEMSTATUS.WBEM_S_RESET_TO_DEFAULT;
pub const WBEM_S_DIFFERENT = WBEMSTATUS.WBEM_S_DIFFERENT;
pub const WBEM_S_TIMEDOUT = WBEMSTATUS.WBEM_S_TIMEDOUT;
pub const WBEM_S_NO_MORE_DATA = WBEMSTATUS.WBEM_S_NO_MORE_DATA;
pub const WBEM_S_OPERATION_CANCELLED = WBEMSTATUS.WBEM_S_OPERATION_CANCELLED;
pub const WBEM_S_PENDING = WBEMSTATUS.WBEM_S_PENDING;
pub const WBEM_S_DUPLICATE_OBJECTS = WBEMSTATUS.WBEM_S_DUPLICATE_OBJECTS;
pub const WBEM_S_ACCESS_DENIED = WBEMSTATUS.WBEM_S_ACCESS_DENIED;
pub const WBEM_S_PARTIAL_RESULTS = WBEMSTATUS.WBEM_S_PARTIAL_RESULTS;
pub const WBEM_S_SOURCE_NOT_AVAILABLE = WBEMSTATUS.WBEM_S_SOURCE_NOT_AVAILABLE;
pub const WBEM_E_FAILED = WBEMSTATUS.WBEM_E_FAILED;
pub const WBEM_E_NOT_FOUND = WBEMSTATUS.WBEM_E_NOT_FOUND;
pub const WBEM_E_ACCESS_DENIED = WBEMSTATUS.WBEM_E_ACCESS_DENIED;
pub const WBEM_E_PROVIDER_FAILURE = WBEMSTATUS.WBEM_E_PROVIDER_FAILURE;
pub const WBEM_E_TYPE_MISMATCH = WBEMSTATUS.WBEM_E_TYPE_MISMATCH;
pub const WBEM_E_OUT_OF_MEMORY = WBEMSTATUS.WBEM_E_OUT_OF_MEMORY;
pub const WBEM_E_INVALID_CONTEXT = WBEMSTATUS.WBEM_E_INVALID_CONTEXT;
pub const WBEM_E_INVALID_PARAMETER = WBEMSTATUS.WBEM_E_INVALID_PARAMETER;
pub const WBEM_E_NOT_AVAILABLE = WBEMSTATUS.WBEM_E_NOT_AVAILABLE;
pub const WBEM_E_CRITICAL_ERROR = WBEMSTATUS.WBEM_E_CRITICAL_ERROR;
pub const WBEM_E_INVALID_STREAM = WBEMSTATUS.WBEM_E_INVALID_STREAM;
pub const WBEM_E_NOT_SUPPORTED = WBEMSTATUS.WBEM_E_NOT_SUPPORTED;
pub const WBEM_E_INVALID_SUPERCLASS = WBEMSTATUS.WBEM_E_INVALID_SUPERCLASS;
pub const WBEM_E_INVALID_NAMESPACE = WBEMSTATUS.WBEM_E_INVALID_NAMESPACE;
pub const WBEM_E_INVALID_OBJECT = WBEMSTATUS.WBEM_E_INVALID_OBJECT;
pub const WBEM_E_INVALID_CLASS = WBEMSTATUS.WBEM_E_INVALID_CLASS;
pub const WBEM_E_PROVIDER_NOT_FOUND = WBEMSTATUS.WBEM_E_PROVIDER_NOT_FOUND;
pub const WBEM_E_INVALID_PROVIDER_REGISTRATION = WBEMSTATUS.WBEM_E_INVALID_PROVIDER_REGISTRATION;
pub const WBEM_E_PROVIDER_LOAD_FAILURE = WBEMSTATUS.WBEM_E_PROVIDER_LOAD_FAILURE;
pub const WBEM_E_INITIALIZATION_FAILURE = WBEMSTATUS.WBEM_E_INITIALIZATION_FAILURE;
pub const WBEM_E_TRANSPORT_FAILURE = WBEMSTATUS.WBEM_E_TRANSPORT_FAILURE;
pub const WBEM_E_INVALID_OPERATION = WBEMSTATUS.WBEM_E_INVALID_OPERATION;
pub const WBEM_E_INVALID_QUERY = WBEMSTATUS.WBEM_E_INVALID_QUERY;
pub const WBEM_E_INVALID_QUERY_TYPE = WBEMSTATUS.WBEM_E_INVALID_QUERY_TYPE;
pub const WBEM_E_ALREADY_EXISTS = WBEMSTATUS.WBEM_E_ALREADY_EXISTS;
pub const WBEM_E_OVERRIDE_NOT_ALLOWED = WBEMSTATUS.WBEM_E_OVERRIDE_NOT_ALLOWED;
pub const WBEM_E_PROPAGATED_QUALIFIER = WBEMSTATUS.WBEM_E_PROPAGATED_QUALIFIER;
pub const WBEM_E_PROPAGATED_PROPERTY = WBEMSTATUS.WBEM_E_PROPAGATED_PROPERTY;
pub const WBEM_E_UNEXPECTED = WBEMSTATUS.WBEM_E_UNEXPECTED;
pub const WBEM_E_ILLEGAL_OPERATION = WBEMSTATUS.WBEM_E_ILLEGAL_OPERATION;
pub const WBEM_E_CANNOT_BE_KEY = WBEMSTATUS.WBEM_E_CANNOT_BE_KEY;
pub const WBEM_E_INCOMPLETE_CLASS = WBEMSTATUS.WBEM_E_INCOMPLETE_CLASS;
pub const WBEM_E_INVALID_SYNTAX = WBEMSTATUS.WBEM_E_INVALID_SYNTAX;
pub const WBEM_E_NONDECORATED_OBJECT = WBEMSTATUS.WBEM_E_NONDECORATED_OBJECT;
pub const WBEM_E_READ_ONLY = WBEMSTATUS.WBEM_E_READ_ONLY;
pub const WBEM_E_PROVIDER_NOT_CAPABLE = WBEMSTATUS.WBEM_E_PROVIDER_NOT_CAPABLE;
pub const WBEM_E_CLASS_HAS_CHILDREN = WBEMSTATUS.WBEM_E_CLASS_HAS_CHILDREN;
pub const WBEM_E_CLASS_HAS_INSTANCES = WBEMSTATUS.WBEM_E_CLASS_HAS_INSTANCES;
pub const WBEM_E_QUERY_NOT_IMPLEMENTED = WBEMSTATUS.WBEM_E_QUERY_NOT_IMPLEMENTED;
pub const WBEM_E_ILLEGAL_NULL = WBEMSTATUS.WBEM_E_ILLEGAL_NULL;
pub const WBEM_E_INVALID_QUALIFIER_TYPE = WBEMSTATUS.WBEM_E_INVALID_QUALIFIER_TYPE;
pub const WBEM_E_INVALID_PROPERTY_TYPE = WBEMSTATUS.WBEM_E_INVALID_PROPERTY_TYPE;
pub const WBEM_E_VALUE_OUT_OF_RANGE = WBEMSTATUS.WBEM_E_VALUE_OUT_OF_RANGE;
pub const WBEM_E_CANNOT_BE_SINGLETON = WBEMSTATUS.WBEM_E_CANNOT_BE_SINGLETON;
pub const WBEM_E_INVALID_CIM_TYPE = WBEMSTATUS.WBEM_E_INVALID_CIM_TYPE;
pub const WBEM_E_INVALID_METHOD = WBEMSTATUS.WBEM_E_INVALID_METHOD;
pub const WBEM_E_INVALID_METHOD_PARAMETERS = WBEMSTATUS.WBEM_E_INVALID_METHOD_PARAMETERS;
pub const WBEM_E_SYSTEM_PROPERTY = WBEMSTATUS.WBEM_E_SYSTEM_PROPERTY;
pub const WBEM_E_INVALID_PROPERTY = WBEMSTATUS.WBEM_E_INVALID_PROPERTY;
pub const WBEM_E_CALL_CANCELLED = WBEMSTATUS.WBEM_E_CALL_CANCELLED;
pub const WBEM_E_SHUTTING_DOWN = WBEMSTATUS.WBEM_E_SHUTTING_DOWN;
pub const WBEM_E_PROPAGATED_METHOD = WBEMSTATUS.WBEM_E_PROPAGATED_METHOD;
pub const WBEM_E_UNSUPPORTED_PARAMETER = WBEMSTATUS.WBEM_E_UNSUPPORTED_PARAMETER;
pub const WBEM_E_MISSING_PARAMETER_ID = WBEMSTATUS.WBEM_E_MISSING_PARAMETER_ID;
pub const WBEM_E_INVALID_PARAMETER_ID = WBEMSTATUS.WBEM_E_INVALID_PARAMETER_ID;
pub const WBEM_E_NONCONSECUTIVE_PARAMETER_IDS = WBEMSTATUS.WBEM_E_NONCONSECUTIVE_PARAMETER_IDS;
pub const WBEM_E_PARAMETER_ID_ON_RETVAL = WBEMSTATUS.WBEM_E_PARAMETER_ID_ON_RETVAL;
pub const WBEM_E_INVALID_OBJECT_PATH = WBEMSTATUS.WBEM_E_INVALID_OBJECT_PATH;
pub const WBEM_E_OUT_OF_DISK_SPACE = WBEMSTATUS.WBEM_E_OUT_OF_DISK_SPACE;
pub const WBEM_E_BUFFER_TOO_SMALL = WBEMSTATUS.WBEM_E_BUFFER_TOO_SMALL;
pub const WBEM_E_UNSUPPORTED_PUT_EXTENSION = WBEMSTATUS.WBEM_E_UNSUPPORTED_PUT_EXTENSION;
pub const WBEM_E_UNKNOWN_OBJECT_TYPE = WBEMSTATUS.WBEM_E_UNKNOWN_OBJECT_TYPE;
pub const WBEM_E_UNKNOWN_PACKET_TYPE = WBEMSTATUS.WBEM_E_UNKNOWN_PACKET_TYPE;
pub const WBEM_E_MARSHAL_VERSION_MISMATCH = WBEMSTATUS.WBEM_E_MARSHAL_VERSION_MISMATCH;
pub const WBEM_E_MARSHAL_INVALID_SIGNATURE = WBEMSTATUS.WBEM_E_MARSHAL_INVALID_SIGNATURE;
pub const WBEM_E_INVALID_QUALIFIER = WBEMSTATUS.WBEM_E_INVALID_QUALIFIER;
pub const WBEM_E_INVALID_DUPLICATE_PARAMETER = WBEMSTATUS.WBEM_E_INVALID_DUPLICATE_PARAMETER;
pub const WBEM_E_TOO_MUCH_DATA = WBEMSTATUS.WBEM_E_TOO_MUCH_DATA;
pub const WBEM_E_SERVER_TOO_BUSY = WBEMSTATUS.WBEM_E_SERVER_TOO_BUSY;
pub const WBEM_E_INVALID_FLAVOR = WBEMSTATUS.WBEM_E_INVALID_FLAVOR;
pub const WBEM_E_CIRCULAR_REFERENCE = WBEMSTATUS.WBEM_E_CIRCULAR_REFERENCE;
pub const WBEM_E_UNSUPPORTED_CLASS_UPDATE = WBEMSTATUS.WBEM_E_UNSUPPORTED_CLASS_UPDATE;
pub const WBEM_E_CANNOT_CHANGE_KEY_INHERITANCE = WBEMSTATUS.WBEM_E_CANNOT_CHANGE_KEY_INHERITANCE;
pub const WBEM_E_CANNOT_CHANGE_INDEX_INHERITANCE = WBEMSTATUS.WBEM_E_CANNOT_CHANGE_INDEX_INHERITANCE;
pub const WBEM_E_TOO_MANY_PROPERTIES = WBEMSTATUS.WBEM_E_TOO_MANY_PROPERTIES;
pub const WBEM_E_UPDATE_TYPE_MISMATCH = WBEMSTATUS.WBEM_E_UPDATE_TYPE_MISMATCH;
pub const WBEM_E_UPDATE_OVERRIDE_NOT_ALLOWED = WBEMSTATUS.WBEM_E_UPDATE_OVERRIDE_NOT_ALLOWED;
pub const WBEM_E_UPDATE_PROPAGATED_METHOD = WBEMSTATUS.WBEM_E_UPDATE_PROPAGATED_METHOD;
pub const WBEM_E_METHOD_NOT_IMPLEMENTED = WBEMSTATUS.WBEM_E_METHOD_NOT_IMPLEMENTED;
pub const WBEM_E_METHOD_DISABLED = WBEMSTATUS.WBEM_E_METHOD_DISABLED;
pub const WBEM_E_REFRESHER_BUSY = WBEMSTATUS.WBEM_E_REFRESHER_BUSY;
pub const WBEM_E_UNPARSABLE_QUERY = WBEMSTATUS.WBEM_E_UNPARSABLE_QUERY;
pub const WBEM_E_NOT_EVENT_CLASS = WBEMSTATUS.WBEM_E_NOT_EVENT_CLASS;
pub const WBEM_E_MISSING_GROUP_WITHIN = WBEMSTATUS.WBEM_E_MISSING_GROUP_WITHIN;
pub const WBEM_E_MISSING_AGGREGATION_LIST = WBEMSTATUS.WBEM_E_MISSING_AGGREGATION_LIST;
pub const WBEM_E_PROPERTY_NOT_AN_OBJECT = WBEMSTATUS.WBEM_E_PROPERTY_NOT_AN_OBJECT;
pub const WBEM_E_AGGREGATING_BY_OBJECT = WBEMSTATUS.WBEM_E_AGGREGATING_BY_OBJECT;
pub const WBEM_E_UNINTERPRETABLE_PROVIDER_QUERY = WBEMSTATUS.WBEM_E_UNINTERPRETABLE_PROVIDER_QUERY;
pub const WBEM_E_BACKUP_RESTORE_WINMGMT_RUNNING = WBEMSTATUS.WBEM_E_BACKUP_RESTORE_WINMGMT_RUNNING;
pub const WBEM_E_QUEUE_OVERFLOW = WBEMSTATUS.WBEM_E_QUEUE_OVERFLOW;
pub const WBEM_E_PRIVILEGE_NOT_HELD = WBEMSTATUS.WBEM_E_PRIVILEGE_NOT_HELD;
pub const WBEM_E_INVALID_OPERATOR = WBEMSTATUS.WBEM_E_INVALID_OPERATOR;
pub const WBEM_E_LOCAL_CREDENTIALS = WBEMSTATUS.WBEM_E_LOCAL_CREDENTIALS;
pub const WBEM_E_CANNOT_BE_ABSTRACT = WBEMSTATUS.WBEM_E_CANNOT_BE_ABSTRACT;
pub const WBEM_E_AMENDED_OBJECT = WBEMSTATUS.WBEM_E_AMENDED_OBJECT;
pub const WBEM_E_CLIENT_TOO_SLOW = WBEMSTATUS.WBEM_E_CLIENT_TOO_SLOW;
pub const WBEM_E_NULL_SECURITY_DESCRIPTOR = WBEMSTATUS.WBEM_E_NULL_SECURITY_DESCRIPTOR;
pub const WBEM_E_TIMED_OUT = WBEMSTATUS.WBEM_E_TIMED_OUT;
pub const WBEM_E_INVALID_ASSOCIATION = WBEMSTATUS.WBEM_E_INVALID_ASSOCIATION;
pub const WBEM_E_AMBIGUOUS_OPERATION = WBEMSTATUS.WBEM_E_AMBIGUOUS_OPERATION;
pub const WBEM_E_QUOTA_VIOLATION = WBEMSTATUS.WBEM_E_QUOTA_VIOLATION;
pub const WBEM_E_RESERVED_001 = WBEMSTATUS.WBEM_E_RESERVED_001;
pub const WBEM_E_RESERVED_002 = WBEMSTATUS.WBEM_E_RESERVED_002;
pub const WBEM_E_UNSUPPORTED_LOCALE = WBEMSTATUS.WBEM_E_UNSUPPORTED_LOCALE;
pub const WBEM_E_HANDLE_OUT_OF_DATE = WBEMSTATUS.WBEM_E_HANDLE_OUT_OF_DATE;
pub const WBEM_E_CONNECTION_FAILED = WBEMSTATUS.WBEM_E_CONNECTION_FAILED;
pub const WBEM_E_INVALID_HANDLE_REQUEST = WBEMSTATUS.WBEM_E_INVALID_HANDLE_REQUEST;
pub const WBEM_E_PROPERTY_NAME_TOO_WIDE = WBEMSTATUS.WBEM_E_PROPERTY_NAME_TOO_WIDE;
pub const WBEM_E_CLASS_NAME_TOO_WIDE = WBEMSTATUS.WBEM_E_CLASS_NAME_TOO_WIDE;
pub const WBEM_E_METHOD_NAME_TOO_WIDE = WBEMSTATUS.WBEM_E_METHOD_NAME_TOO_WIDE;
pub const WBEM_E_QUALIFIER_NAME_TOO_WIDE = WBEMSTATUS.WBEM_E_QUALIFIER_NAME_TOO_WIDE;
pub const WBEM_E_RERUN_COMMAND = WBEMSTATUS.WBEM_E_RERUN_COMMAND;
pub const WBEM_E_DATABASE_VER_MISMATCH = WBEMSTATUS.WBEM_E_DATABASE_VER_MISMATCH;
pub const WBEM_E_VETO_DELETE = WBEMSTATUS.WBEM_E_VETO_DELETE;
pub const WBEM_E_VETO_PUT = WBEMSTATUS.WBEM_E_VETO_PUT;
pub const WBEM_E_INVALID_LOCALE = WBEMSTATUS.WBEM_E_INVALID_LOCALE;
pub const WBEM_E_PROVIDER_SUSPENDED = WBEMSTATUS.WBEM_E_PROVIDER_SUSPENDED;
pub const WBEM_E_SYNCHRONIZATION_REQUIRED = WBEMSTATUS.WBEM_E_SYNCHRONIZATION_REQUIRED;
pub const WBEM_E_NO_SCHEMA = WBEMSTATUS.WBEM_E_NO_SCHEMA;
pub const WBEM_E_PROVIDER_ALREADY_REGISTERED = WBEMSTATUS.WBEM_E_PROVIDER_ALREADY_REGISTERED;
pub const WBEM_E_PROVIDER_NOT_REGISTERED = WBEMSTATUS.WBEM_E_PROVIDER_NOT_REGISTERED;
pub const WBEM_E_FATAL_TRANSPORT_ERROR = WBEMSTATUS.WBEM_E_FATAL_TRANSPORT_ERROR;
pub const WBEM_E_ENCRYPTED_CONNECTION_REQUIRED = WBEMSTATUS.WBEM_E_ENCRYPTED_CONNECTION_REQUIRED;
pub const WBEM_E_PROVIDER_TIMED_OUT = WBEMSTATUS.WBEM_E_PROVIDER_TIMED_OUT;
pub const WBEM_E_NO_KEY = WBEMSTATUS.WBEM_E_NO_KEY;
pub const WBEM_E_PROVIDER_DISABLED = WBEMSTATUS.WBEM_E_PROVIDER_DISABLED;
pub const WBEMESS_E_REGISTRATION_TOO_BROAD = WBEMSTATUS.WBEMESS_E_REGISTRATION_TOO_BROAD;
pub const WBEMESS_E_REGISTRATION_TOO_PRECISE = WBEMSTATUS.WBEMESS_E_REGISTRATION_TOO_PRECISE;
pub const WBEMESS_E_AUTHZ_NOT_PRIVILEGED = WBEMSTATUS.WBEMESS_E_AUTHZ_NOT_PRIVILEGED;
pub const WBEMMOF_E_EXPECTED_QUALIFIER_NAME = WBEMSTATUS.WBEMMOF_E_EXPECTED_QUALIFIER_NAME;
pub const WBEMMOF_E_EXPECTED_SEMI = WBEMSTATUS.WBEMMOF_E_EXPECTED_SEMI;
pub const WBEMMOF_E_EXPECTED_OPEN_BRACE = WBEMSTATUS.WBEMMOF_E_EXPECTED_OPEN_BRACE;
pub const WBEMMOF_E_EXPECTED_CLOSE_BRACE = WBEMSTATUS.WBEMMOF_E_EXPECTED_CLOSE_BRACE;
pub const WBEMMOF_E_EXPECTED_CLOSE_BRACKET = WBEMSTATUS.WBEMMOF_E_EXPECTED_CLOSE_BRACKET;
pub const WBEMMOF_E_EXPECTED_CLOSE_PAREN = WBEMSTATUS.WBEMMOF_E_EXPECTED_CLOSE_PAREN;
pub const WBEMMOF_E_ILLEGAL_CONSTANT_VALUE = WBEMSTATUS.WBEMMOF_E_ILLEGAL_CONSTANT_VALUE;
pub const WBEMMOF_E_EXPECTED_TYPE_IDENTIFIER = WBEMSTATUS.WBEMMOF_E_EXPECTED_TYPE_IDENTIFIER;
pub const WBEMMOF_E_EXPECTED_OPEN_PAREN = WBEMSTATUS.WBEMMOF_E_EXPECTED_OPEN_PAREN;
pub const WBEMMOF_E_UNRECOGNIZED_TOKEN = WBEMSTATUS.WBEMMOF_E_UNRECOGNIZED_TOKEN;
pub const WBEMMOF_E_UNRECOGNIZED_TYPE = WBEMSTATUS.WBEMMOF_E_UNRECOGNIZED_TYPE;
pub const WBEMMOF_E_EXPECTED_PROPERTY_NAME = WBEMSTATUS.WBEMMOF_E_EXPECTED_PROPERTY_NAME;
pub const WBEMMOF_E_TYPEDEF_NOT_SUPPORTED = WBEMSTATUS.WBEMMOF_E_TYPEDEF_NOT_SUPPORTED;
pub const WBEMMOF_E_UNEXPECTED_ALIAS = WBEMSTATUS.WBEMMOF_E_UNEXPECTED_ALIAS;
pub const WBEMMOF_E_UNEXPECTED_ARRAY_INIT = WBEMSTATUS.WBEMMOF_E_UNEXPECTED_ARRAY_INIT;
pub const WBEMMOF_E_INVALID_AMENDMENT_SYNTAX = WBEMSTATUS.WBEMMOF_E_INVALID_AMENDMENT_SYNTAX;
pub const WBEMMOF_E_INVALID_DUPLICATE_AMENDMENT = WBEMSTATUS.WBEMMOF_E_INVALID_DUPLICATE_AMENDMENT;
pub const WBEMMOF_E_INVALID_PRAGMA = WBEMSTATUS.WBEMMOF_E_INVALID_PRAGMA;
pub const WBEMMOF_E_INVALID_NAMESPACE_SYNTAX = WBEMSTATUS.WBEMMOF_E_INVALID_NAMESPACE_SYNTAX;
pub const WBEMMOF_E_EXPECTED_CLASS_NAME = WBEMSTATUS.WBEMMOF_E_EXPECTED_CLASS_NAME;
pub const WBEMMOF_E_TYPE_MISMATCH = WBEMSTATUS.WBEMMOF_E_TYPE_MISMATCH;
pub const WBEMMOF_E_EXPECTED_ALIAS_NAME = WBEMSTATUS.WBEMMOF_E_EXPECTED_ALIAS_NAME;
pub const WBEMMOF_E_INVALID_CLASS_DECLARATION = WBEMSTATUS.WBEMMOF_E_INVALID_CLASS_DECLARATION;
pub const WBEMMOF_E_INVALID_INSTANCE_DECLARATION = WBEMSTATUS.WBEMMOF_E_INVALID_INSTANCE_DECLARATION;
pub const WBEMMOF_E_EXPECTED_DOLLAR = WBEMSTATUS.WBEMMOF_E_EXPECTED_DOLLAR;
pub const WBEMMOF_E_CIMTYPE_QUALIFIER = WBEMSTATUS.WBEMMOF_E_CIMTYPE_QUALIFIER;
pub const WBEMMOF_E_DUPLICATE_PROPERTY = WBEMSTATUS.WBEMMOF_E_DUPLICATE_PROPERTY;
pub const WBEMMOF_E_INVALID_NAMESPACE_SPECIFICATION = WBEMSTATUS.WBEMMOF_E_INVALID_NAMESPACE_SPECIFICATION;
pub const WBEMMOF_E_OUT_OF_RANGE = WBEMSTATUS.WBEMMOF_E_OUT_OF_RANGE;
pub const WBEMMOF_E_INVALID_FILE = WBEMSTATUS.WBEMMOF_E_INVALID_FILE;
pub const WBEMMOF_E_ALIASES_IN_EMBEDDED = WBEMSTATUS.WBEMMOF_E_ALIASES_IN_EMBEDDED;
pub const WBEMMOF_E_NULL_ARRAY_ELEM = WBEMSTATUS.WBEMMOF_E_NULL_ARRAY_ELEM;
pub const WBEMMOF_E_DUPLICATE_QUALIFIER = WBEMSTATUS.WBEMMOF_E_DUPLICATE_QUALIFIER;
pub const WBEMMOF_E_EXPECTED_FLAVOR_TYPE = WBEMSTATUS.WBEMMOF_E_EXPECTED_FLAVOR_TYPE;
pub const WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES = WBEMSTATUS.WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES;
pub const WBEMMOF_E_MULTIPLE_ALIASES = WBEMSTATUS.WBEMMOF_E_MULTIPLE_ALIASES;
pub const WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES2 = WBEMSTATUS.WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES2;
pub const WBEMMOF_E_NO_ARRAYS_RETURNED = WBEMSTATUS.WBEMMOF_E_NO_ARRAYS_RETURNED;
pub const WBEMMOF_E_MUST_BE_IN_OR_OUT = WBEMSTATUS.WBEMMOF_E_MUST_BE_IN_OR_OUT;
pub const WBEMMOF_E_INVALID_FLAGS_SYNTAX = WBEMSTATUS.WBEMMOF_E_INVALID_FLAGS_SYNTAX;
pub const WBEMMOF_E_EXPECTED_BRACE_OR_BAD_TYPE = WBEMSTATUS.WBEMMOF_E_EXPECTED_BRACE_OR_BAD_TYPE;
pub const WBEMMOF_E_UNSUPPORTED_CIMV22_QUAL_VALUE = WBEMSTATUS.WBEMMOF_E_UNSUPPORTED_CIMV22_QUAL_VALUE;
pub const WBEMMOF_E_UNSUPPORTED_CIMV22_DATA_TYPE = WBEMSTATUS.WBEMMOF_E_UNSUPPORTED_CIMV22_DATA_TYPE;
pub const WBEMMOF_E_INVALID_DELETEINSTANCE_SYNTAX = WBEMSTATUS.WBEMMOF_E_INVALID_DELETEINSTANCE_SYNTAX;
pub const WBEMMOF_E_INVALID_QUALIFIER_SYNTAX = WBEMSTATUS.WBEMMOF_E_INVALID_QUALIFIER_SYNTAX;
pub const WBEMMOF_E_QUALIFIER_USED_OUTSIDE_SCOPE = WBEMSTATUS.WBEMMOF_E_QUALIFIER_USED_OUTSIDE_SCOPE;
pub const WBEMMOF_E_ERROR_CREATING_TEMP_FILE = WBEMSTATUS.WBEMMOF_E_ERROR_CREATING_TEMP_FILE;
pub const WBEMMOF_E_ERROR_INVALID_INCLUDE_FILE = WBEMSTATUS.WBEMMOF_E_ERROR_INVALID_INCLUDE_FILE;
pub const WBEMMOF_E_INVALID_DELETECLASS_SYNTAX = WBEMSTATUS.WBEMMOF_E_INVALID_DELETECLASS_SYNTAX;

const IID_IWbemClassObject_Value = @import("../zig.zig").Guid.initString("DC12A681-737F-11CF-884D-00AA004B2E24");
pub const IID_IWbemClassObject = &IID_IWbemClassObject_Value;
pub const IWbemClassObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetQualifierSet: fn(
            self: *const IWbemClassObject,
            ppQualSet: **IWbemQualifierSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Get: fn(
            self: *const IWbemClassObject,
            wszName: [*:0]const u16,
            lFlags: i32,
            pVal: *VARIANT,
            pType: *i32,
            plFlavor: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Put: fn(
            self: *const IWbemClassObject,
            wszName: [*:0]const u16,
            lFlags: i32,
            pVal: *VARIANT,
            Type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: fn(
            self: *const IWbemClassObject,
            wszName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNames: fn(
            self: *const IWbemClassObject,
            wszQualifierName: [*:0]const u16,
            lFlags: i32,
            pQualifierVal: *VARIANT,
            pNames: **SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginEnumeration: fn(
            self: *const IWbemClassObject,
            lEnumFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: fn(
            self: *const IWbemClassObject,
            lFlags: i32,
            strName: *BSTR,
            pVal: *VARIANT,
            pType: *i32,
            plFlavor: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndEnumeration: fn(
            self: *const IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyQualifierSet: fn(
            self: *const IWbemClassObject,
            wszProperty: [*:0]const u16,
            ppQualSet: **IWbemQualifierSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IWbemClassObject,
            ppCopy: **IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectText: fn(
            self: *const IWbemClassObject,
            lFlags: i32,
            pstrObjectText: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SpawnDerivedClass: fn(
            self: *const IWbemClassObject,
            lFlags: i32,
            ppNewClass: **IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SpawnInstance: fn(
            self: *const IWbemClassObject,
            lFlags: i32,
            ppNewInstance: **IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompareTo: fn(
            self: *const IWbemClassObject,
            lFlags: i32,
            pCompareTo: *IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyOrigin: fn(
            self: *const IWbemClassObject,
            wszName: [*:0]const u16,
            pstrClassName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InheritsFrom: fn(
            self: *const IWbemClassObject,
            strAncestor: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMethod: fn(
            self: *const IWbemClassObject,
            wszName: [*:0]const u16,
            lFlags: i32,
            ppInSignature: **IWbemClassObject,
            ppOutSignature: **IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutMethod: fn(
            self: *const IWbemClassObject,
            wszName: [*:0]const u16,
            lFlags: i32,
            pInSignature: *IWbemClassObject,
            pOutSignature: *IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteMethod: fn(
            self: *const IWbemClassObject,
            wszName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginMethodEnumeration: fn(
            self: *const IWbemClassObject,
            lEnumFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NextMethod: fn(
            self: *const IWbemClassObject,
            lFlags: i32,
            pstrName: *BSTR,
            ppInSignature: **IWbemClassObject,
            ppOutSignature: **IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndMethodEnumeration: fn(
            self: *const IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMethodQualifierSet: fn(
            self: *const IWbemClassObject,
            wszMethod: [*:0]const u16,
            ppQualSet: **IWbemQualifierSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMethodOrigin: fn(
            self: *const IWbemClassObject,
            wszMethodName: [*:0]const u16,
            pstrClassName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_GetQualifierSet(self: *const T, ppQualSet: **IWbemQualifierSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).GetQualifierSet(@ptrCast(*const IWbemClassObject, self), ppQualSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_Get(self: *const T, wszName: [*:0]const u16, lFlags: i32, pVal: *VARIANT, pType: *i32, plFlavor: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).Get(@ptrCast(*const IWbemClassObject, self), wszName, lFlags, pVal, pType, plFlavor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_Put(self: *const T, wszName: [*:0]const u16, lFlags: i32, pVal: *VARIANT, Type: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).Put(@ptrCast(*const IWbemClassObject, self), wszName, lFlags, pVal, Type);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_Delete(self: *const T, wszName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).Delete(@ptrCast(*const IWbemClassObject, self), wszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_GetNames(self: *const T, wszQualifierName: [*:0]const u16, lFlags: i32, pQualifierVal: *VARIANT, pNames: **SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).GetNames(@ptrCast(*const IWbemClassObject, self), wszQualifierName, lFlags, pQualifierVal, pNames);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_BeginEnumeration(self: *const T, lEnumFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).BeginEnumeration(@ptrCast(*const IWbemClassObject, self), lEnumFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_Next(self: *const T, lFlags: i32, strName: *BSTR, pVal: *VARIANT, pType: *i32, plFlavor: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).Next(@ptrCast(*const IWbemClassObject, self), lFlags, strName, pVal, pType, plFlavor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_EndEnumeration(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).EndEnumeration(@ptrCast(*const IWbemClassObject, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_GetPropertyQualifierSet(self: *const T, wszProperty: [*:0]const u16, ppQualSet: **IWbemQualifierSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).GetPropertyQualifierSet(@ptrCast(*const IWbemClassObject, self), wszProperty, ppQualSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_Clone(self: *const T, ppCopy: **IWbemClassObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).Clone(@ptrCast(*const IWbemClassObject, self), ppCopy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_GetObjectText(self: *const T, lFlags: i32, pstrObjectText: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).GetObjectText(@ptrCast(*const IWbemClassObject, self), lFlags, pstrObjectText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_SpawnDerivedClass(self: *const T, lFlags: i32, ppNewClass: **IWbemClassObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).SpawnDerivedClass(@ptrCast(*const IWbemClassObject, self), lFlags, ppNewClass);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_SpawnInstance(self: *const T, lFlags: i32, ppNewInstance: **IWbemClassObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).SpawnInstance(@ptrCast(*const IWbemClassObject, self), lFlags, ppNewInstance);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_CompareTo(self: *const T, lFlags: i32, pCompareTo: *IWbemClassObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).CompareTo(@ptrCast(*const IWbemClassObject, self), lFlags, pCompareTo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_GetPropertyOrigin(self: *const T, wszName: [*:0]const u16, pstrClassName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).GetPropertyOrigin(@ptrCast(*const IWbemClassObject, self), wszName, pstrClassName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_InheritsFrom(self: *const T, strAncestor: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).InheritsFrom(@ptrCast(*const IWbemClassObject, self), strAncestor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_GetMethod(self: *const T, wszName: [*:0]const u16, lFlags: i32, ppInSignature: **IWbemClassObject, ppOutSignature: **IWbemClassObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).GetMethod(@ptrCast(*const IWbemClassObject, self), wszName, lFlags, ppInSignature, ppOutSignature);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_PutMethod(self: *const T, wszName: [*:0]const u16, lFlags: i32, pInSignature: *IWbemClassObject, pOutSignature: *IWbemClassObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).PutMethod(@ptrCast(*const IWbemClassObject, self), wszName, lFlags, pInSignature, pOutSignature);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_DeleteMethod(self: *const T, wszName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).DeleteMethod(@ptrCast(*const IWbemClassObject, self), wszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_BeginMethodEnumeration(self: *const T, lEnumFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).BeginMethodEnumeration(@ptrCast(*const IWbemClassObject, self), lEnumFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_NextMethod(self: *const T, lFlags: i32, pstrName: *BSTR, ppInSignature: **IWbemClassObject, ppOutSignature: **IWbemClassObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).NextMethod(@ptrCast(*const IWbemClassObject, self), lFlags, pstrName, ppInSignature, ppOutSignature);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_EndMethodEnumeration(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).EndMethodEnumeration(@ptrCast(*const IWbemClassObject, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_GetMethodQualifierSet(self: *const T, wszMethod: [*:0]const u16, ppQualSet: **IWbemQualifierSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).GetMethodQualifierSet(@ptrCast(*const IWbemClassObject, self), wszMethod, ppQualSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemClassObject_GetMethodOrigin(self: *const T, wszMethodName: [*:0]const u16, pstrClassName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemClassObject.VTable, self.vtable).GetMethodOrigin(@ptrCast(*const IWbemClassObject, self), wszMethodName, pstrClassName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemObjectAccess_Value = @import("../zig.zig").Guid.initString("49353C9A-516B-11D1-AEA6-00C04FB68820");
pub const IID_IWbemObjectAccess = &IID_IWbemObjectAccess_Value;
pub const IWbemObjectAccess = extern struct {
    pub const VTable = extern struct {
        base: IWbemClassObject.VTable,
        GetPropertyHandle: fn(
            self: *const IWbemObjectAccess,
            wszPropertyName: [*:0]const u16,
            pType: *i32,
            plHandle: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WritePropertyValue: fn(
            self: *const IWbemObjectAccess,
            lHandle: i32,
            lNumBytes: i32,
            aData: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadPropertyValue: fn(
            self: *const IWbemObjectAccess,
            lHandle: i32,
            lBufferSize: i32,
            plNumBytes: *i32,
            aData: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadDWORD: fn(
            self: *const IWbemObjectAccess,
            lHandle: i32,
            pdw: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteDWORD: fn(
            self: *const IWbemObjectAccess,
            lHandle: i32,
            dw: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadQWORD: fn(
            self: *const IWbemObjectAccess,
            lHandle: i32,
            pqw: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteQWORD: fn(
            self: *const IWbemObjectAccess,
            lHandle: i32,
            pw: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyInfoByHandle: fn(
            self: *const IWbemObjectAccess,
            lHandle: i32,
            pstrName: *BSTR,
            pType: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Lock: fn(
            self: *const IWbemObjectAccess,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unlock: fn(
            self: *const IWbemObjectAccess,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWbemClassObject.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectAccess_GetPropertyHandle(self: *const T, wszPropertyName: [*:0]const u16, pType: *i32, plHandle: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectAccess.VTable, self.vtable).GetPropertyHandle(@ptrCast(*const IWbemObjectAccess, self), wszPropertyName, pType, plHandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectAccess_WritePropertyValue(self: *const T, lHandle: i32, lNumBytes: i32, aData: [*:0]const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectAccess.VTable, self.vtable).WritePropertyValue(@ptrCast(*const IWbemObjectAccess, self), lHandle, lNumBytes, aData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectAccess_ReadPropertyValue(self: *const T, lHandle: i32, lBufferSize: i32, plNumBytes: *i32, aData: [*:0]u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectAccess.VTable, self.vtable).ReadPropertyValue(@ptrCast(*const IWbemObjectAccess, self), lHandle, lBufferSize, plNumBytes, aData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectAccess_ReadDWORD(self: *const T, lHandle: i32, pdw: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectAccess.VTable, self.vtable).ReadDWORD(@ptrCast(*const IWbemObjectAccess, self), lHandle, pdw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectAccess_WriteDWORD(self: *const T, lHandle: i32, dw: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectAccess.VTable, self.vtable).WriteDWORD(@ptrCast(*const IWbemObjectAccess, self), lHandle, dw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectAccess_ReadQWORD(self: *const T, lHandle: i32, pqw: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectAccess.VTable, self.vtable).ReadQWORD(@ptrCast(*const IWbemObjectAccess, self), lHandle, pqw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectAccess_WriteQWORD(self: *const T, lHandle: i32, pw: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectAccess.VTable, self.vtable).WriteQWORD(@ptrCast(*const IWbemObjectAccess, self), lHandle, pw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectAccess_GetPropertyInfoByHandle(self: *const T, lHandle: i32, pstrName: *BSTR, pType: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectAccess.VTable, self.vtable).GetPropertyInfoByHandle(@ptrCast(*const IWbemObjectAccess, self), lHandle, pstrName, pType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectAccess_Lock(self: *const T, lFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectAccess.VTable, self.vtable).Lock(@ptrCast(*const IWbemObjectAccess, self), lFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectAccess_Unlock(self: *const T, lFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectAccess.VTable, self.vtable).Unlock(@ptrCast(*const IWbemObjectAccess, self), lFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemQualifierSet_Value = @import("../zig.zig").Guid.initString("DC12A680-737F-11CF-884D-00AA004B2E24");
pub const IID_IWbemQualifierSet = &IID_IWbemQualifierSet_Value;
pub const IWbemQualifierSet = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Get: fn(
            self: *const IWbemQualifierSet,
            wszName: [*:0]const u16,
            lFlags: i32,
            pVal: *VARIANT,
            plFlavor: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Put: fn(
            self: *const IWbemQualifierSet,
            wszName: [*:0]const u16,
            pVal: *VARIANT,
            lFlavor: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: fn(
            self: *const IWbemQualifierSet,
            wszName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNames: fn(
            self: *const IWbemQualifierSet,
            lFlags: i32,
            pNames: **SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginEnumeration: fn(
            self: *const IWbemQualifierSet,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: fn(
            self: *const IWbemQualifierSet,
            lFlags: i32,
            pstrName: *BSTR,
            pVal: *VARIANT,
            plFlavor: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndEnumeration: fn(
            self: *const IWbemQualifierSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemQualifierSet_Get(self: *const T, wszName: [*:0]const u16, lFlags: i32, pVal: *VARIANT, plFlavor: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemQualifierSet.VTable, self.vtable).Get(@ptrCast(*const IWbemQualifierSet, self), wszName, lFlags, pVal, plFlavor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemQualifierSet_Put(self: *const T, wszName: [*:0]const u16, pVal: *VARIANT, lFlavor: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemQualifierSet.VTable, self.vtable).Put(@ptrCast(*const IWbemQualifierSet, self), wszName, pVal, lFlavor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemQualifierSet_Delete(self: *const T, wszName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemQualifierSet.VTable, self.vtable).Delete(@ptrCast(*const IWbemQualifierSet, self), wszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemQualifierSet_GetNames(self: *const T, lFlags: i32, pNames: **SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemQualifierSet.VTable, self.vtable).GetNames(@ptrCast(*const IWbemQualifierSet, self), lFlags, pNames);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemQualifierSet_BeginEnumeration(self: *const T, lFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemQualifierSet.VTable, self.vtable).BeginEnumeration(@ptrCast(*const IWbemQualifierSet, self), lFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemQualifierSet_Next(self: *const T, lFlags: i32, pstrName: *BSTR, pVal: *VARIANT, plFlavor: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemQualifierSet.VTable, self.vtable).Next(@ptrCast(*const IWbemQualifierSet, self), lFlags, pstrName, pVal, plFlavor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemQualifierSet_EndEnumeration(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemQualifierSet.VTable, self.vtable).EndEnumeration(@ptrCast(*const IWbemQualifierSet, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemServices_Value = @import("../zig.zig").Guid.initString("9556DC99-828C-11CF-A37E-00AA003240C7");
pub const IID_IWbemServices = &IID_IWbemServices_Value;
pub const IWbemServices = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OpenNamespace: fn(
            self: *const IWbemServices,
            strNamespace: BSTR,
            lFlags: i32,
            pCtx: *IWbemContext,
            ppWorkingNamespace: ?*?*IWbemServices,
            ppResult: ?*?*IWbemCallResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelAsyncCall: fn(
            self: *const IWbemServices,
            pSink: *IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryObjectSink: fn(
            self: *const IWbemServices,
            lFlags: i32,
            ppResponseHandler: **IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObject: fn(
            self: *const IWbemServices,
            strObjectPath: BSTR,
            lFlags: i32,
            pCtx: *IWbemContext,
            ppObject: ?*?*IWbemClassObject,
            ppCallResult: ?*?*IWbemCallResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectAsync: fn(
            self: *const IWbemServices,
            strObjectPath: BSTR,
            lFlags: i32,
            pCtx: *IWbemContext,
            pResponseHandler: *IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutClass: fn(
            self: *const IWbemServices,
            pObject: *IWbemClassObject,
            lFlags: i32,
            pCtx: *IWbemContext,
            ppCallResult: ?*?*IWbemCallResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutClassAsync: fn(
            self: *const IWbemServices,
            pObject: *IWbemClassObject,
            lFlags: i32,
            pCtx: *IWbemContext,
            pResponseHandler: *IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteClass: fn(
            self: *const IWbemServices,
            strClass: BSTR,
            lFlags: i32,
            pCtx: *IWbemContext,
            ppCallResult: ?*?*IWbemCallResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteClassAsync: fn(
            self: *const IWbemServices,
            strClass: BSTR,
            lFlags: i32,
            pCtx: *IWbemContext,
            pResponseHandler: *IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateClassEnum: fn(
            self: *const IWbemServices,
            strSuperclass: BSTR,
            lFlags: i32,
            pCtx: *IWbemContext,
            ppEnum: **IEnumWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateClassEnumAsync: fn(
            self: *const IWbemServices,
            strSuperclass: BSTR,
            lFlags: i32,
            pCtx: *IWbemContext,
            pResponseHandler: *IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutInstance: fn(
            self: *const IWbemServices,
            pInst: *IWbemClassObject,
            lFlags: i32,
            pCtx: *IWbemContext,
            ppCallResult: ?*?*IWbemCallResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutInstanceAsync: fn(
            self: *const IWbemServices,
            pInst: *IWbemClassObject,
            lFlags: i32,
            pCtx: *IWbemContext,
            pResponseHandler: *IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteInstance: fn(
            self: *const IWbemServices,
            strObjectPath: BSTR,
            lFlags: i32,
            pCtx: *IWbemContext,
            ppCallResult: ?*?*IWbemCallResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteInstanceAsync: fn(
            self: *const IWbemServices,
            strObjectPath: BSTR,
            lFlags: i32,
            pCtx: *IWbemContext,
            pResponseHandler: *IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInstanceEnum: fn(
            self: *const IWbemServices,
            strFilter: BSTR,
            lFlags: i32,
            pCtx: *IWbemContext,
            ppEnum: **IEnumWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInstanceEnumAsync: fn(
            self: *const IWbemServices,
            strFilter: BSTR,
            lFlags: i32,
            pCtx: *IWbemContext,
            pResponseHandler: *IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecQuery: fn(
            self: *const IWbemServices,
            strQueryLanguage: BSTR,
            strQuery: BSTR,
            lFlags: i32,
            pCtx: *IWbemContext,
            ppEnum: **IEnumWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecQueryAsync: fn(
            self: *const IWbemServices,
            strQueryLanguage: BSTR,
            strQuery: BSTR,
            lFlags: i32,
            pCtx: *IWbemContext,
            pResponseHandler: *IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecNotificationQuery: fn(
            self: *const IWbemServices,
            strQueryLanguage: BSTR,
            strQuery: BSTR,
            lFlags: i32,
            pCtx: *IWbemContext,
            ppEnum: **IEnumWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecNotificationQueryAsync: fn(
            self: *const IWbemServices,
            strQueryLanguage: BSTR,
            strQuery: BSTR,
            lFlags: i32,
            pCtx: *IWbemContext,
            pResponseHandler: *IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecMethod: fn(
            self: *const IWbemServices,
            strObjectPath: BSTR,
            strMethodName: BSTR,
            lFlags: i32,
            pCtx: *IWbemContext,
            pInParams: *IWbemClassObject,
            ppOutParams: ?*?*IWbemClassObject,
            ppCallResult: ?*?*IWbemCallResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecMethodAsync: fn(
            self: *const IWbemServices,
            strObjectPath: BSTR,
            strMethodName: BSTR,
            lFlags: i32,
            pCtx: *IWbemContext,
            pInParams: *IWbemClassObject,
            pResponseHandler: *IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_OpenNamespace(self: *const T, strNamespace: BSTR, lFlags: i32, pCtx: *IWbemContext, ppWorkingNamespace: ?*?*IWbemServices, ppResult: ?*?*IWbemCallResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).OpenNamespace(@ptrCast(*const IWbemServices, self), strNamespace, lFlags, pCtx, ppWorkingNamespace, ppResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_CancelAsyncCall(self: *const T, pSink: *IWbemObjectSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).CancelAsyncCall(@ptrCast(*const IWbemServices, self), pSink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_QueryObjectSink(self: *const T, lFlags: i32, ppResponseHandler: **IWbemObjectSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).QueryObjectSink(@ptrCast(*const IWbemServices, self), lFlags, ppResponseHandler);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_GetObject(self: *const T, strObjectPath: BSTR, lFlags: i32, pCtx: *IWbemContext, ppObject: ?*?*IWbemClassObject, ppCallResult: ?*?*IWbemCallResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).GetObject(@ptrCast(*const IWbemServices, self), strObjectPath, lFlags, pCtx, ppObject, ppCallResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_GetObjectAsync(self: *const T, strObjectPath: BSTR, lFlags: i32, pCtx: *IWbemContext, pResponseHandler: *IWbemObjectSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).GetObjectAsync(@ptrCast(*const IWbemServices, self), strObjectPath, lFlags, pCtx, pResponseHandler);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_PutClass(self: *const T, pObject: *IWbemClassObject, lFlags: i32, pCtx: *IWbemContext, ppCallResult: ?*?*IWbemCallResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).PutClass(@ptrCast(*const IWbemServices, self), pObject, lFlags, pCtx, ppCallResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_PutClassAsync(self: *const T, pObject: *IWbemClassObject, lFlags: i32, pCtx: *IWbemContext, pResponseHandler: *IWbemObjectSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).PutClassAsync(@ptrCast(*const IWbemServices, self), pObject, lFlags, pCtx, pResponseHandler);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_DeleteClass(self: *const T, strClass: BSTR, lFlags: i32, pCtx: *IWbemContext, ppCallResult: ?*?*IWbemCallResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).DeleteClass(@ptrCast(*const IWbemServices, self), strClass, lFlags, pCtx, ppCallResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_DeleteClassAsync(self: *const T, strClass: BSTR, lFlags: i32, pCtx: *IWbemContext, pResponseHandler: *IWbemObjectSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).DeleteClassAsync(@ptrCast(*const IWbemServices, self), strClass, lFlags, pCtx, pResponseHandler);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_CreateClassEnum(self: *const T, strSuperclass: BSTR, lFlags: i32, pCtx: *IWbemContext, ppEnum: **IEnumWbemClassObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).CreateClassEnum(@ptrCast(*const IWbemServices, self), strSuperclass, lFlags, pCtx, ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_CreateClassEnumAsync(self: *const T, strSuperclass: BSTR, lFlags: i32, pCtx: *IWbemContext, pResponseHandler: *IWbemObjectSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).CreateClassEnumAsync(@ptrCast(*const IWbemServices, self), strSuperclass, lFlags, pCtx, pResponseHandler);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_PutInstance(self: *const T, pInst: *IWbemClassObject, lFlags: i32, pCtx: *IWbemContext, ppCallResult: ?*?*IWbemCallResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).PutInstance(@ptrCast(*const IWbemServices, self), pInst, lFlags, pCtx, ppCallResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_PutInstanceAsync(self: *const T, pInst: *IWbemClassObject, lFlags: i32, pCtx: *IWbemContext, pResponseHandler: *IWbemObjectSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).PutInstanceAsync(@ptrCast(*const IWbemServices, self), pInst, lFlags, pCtx, pResponseHandler);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_DeleteInstance(self: *const T, strObjectPath: BSTR, lFlags: i32, pCtx: *IWbemContext, ppCallResult: ?*?*IWbemCallResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).DeleteInstance(@ptrCast(*const IWbemServices, self), strObjectPath, lFlags, pCtx, ppCallResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_DeleteInstanceAsync(self: *const T, strObjectPath: BSTR, lFlags: i32, pCtx: *IWbemContext, pResponseHandler: *IWbemObjectSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).DeleteInstanceAsync(@ptrCast(*const IWbemServices, self), strObjectPath, lFlags, pCtx, pResponseHandler);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_CreateInstanceEnum(self: *const T, strFilter: BSTR, lFlags: i32, pCtx: *IWbemContext, ppEnum: **IEnumWbemClassObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).CreateInstanceEnum(@ptrCast(*const IWbemServices, self), strFilter, lFlags, pCtx, ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_CreateInstanceEnumAsync(self: *const T, strFilter: BSTR, lFlags: i32, pCtx: *IWbemContext, pResponseHandler: *IWbemObjectSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).CreateInstanceEnumAsync(@ptrCast(*const IWbemServices, self), strFilter, lFlags, pCtx, pResponseHandler);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_ExecQuery(self: *const T, strQueryLanguage: BSTR, strQuery: BSTR, lFlags: i32, pCtx: *IWbemContext, ppEnum: **IEnumWbemClassObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).ExecQuery(@ptrCast(*const IWbemServices, self), strQueryLanguage, strQuery, lFlags, pCtx, ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_ExecQueryAsync(self: *const T, strQueryLanguage: BSTR, strQuery: BSTR, lFlags: i32, pCtx: *IWbemContext, pResponseHandler: *IWbemObjectSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).ExecQueryAsync(@ptrCast(*const IWbemServices, self), strQueryLanguage, strQuery, lFlags, pCtx, pResponseHandler);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_ExecNotificationQuery(self: *const T, strQueryLanguage: BSTR, strQuery: BSTR, lFlags: i32, pCtx: *IWbemContext, ppEnum: **IEnumWbemClassObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).ExecNotificationQuery(@ptrCast(*const IWbemServices, self), strQueryLanguage, strQuery, lFlags, pCtx, ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_ExecNotificationQueryAsync(self: *const T, strQueryLanguage: BSTR, strQuery: BSTR, lFlags: i32, pCtx: *IWbemContext, pResponseHandler: *IWbemObjectSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).ExecNotificationQueryAsync(@ptrCast(*const IWbemServices, self), strQueryLanguage, strQuery, lFlags, pCtx, pResponseHandler);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_ExecMethod(self: *const T, strObjectPath: BSTR, strMethodName: BSTR, lFlags: i32, pCtx: *IWbemContext, pInParams: *IWbemClassObject, ppOutParams: ?*?*IWbemClassObject, ppCallResult: ?*?*IWbemCallResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).ExecMethod(@ptrCast(*const IWbemServices, self), strObjectPath, strMethodName, lFlags, pCtx, pInParams, ppOutParams, ppCallResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemServices_ExecMethodAsync(self: *const T, strObjectPath: BSTR, strMethodName: BSTR, lFlags: i32, pCtx: *IWbemContext, pInParams: *IWbemClassObject, pResponseHandler: *IWbemObjectSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemServices.VTable, self.vtable).ExecMethodAsync(@ptrCast(*const IWbemServices, self), strObjectPath, strMethodName, lFlags, pCtx, pInParams, pResponseHandler);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemLocator_Value = @import("../zig.zig").Guid.initString("DC12A687-737F-11CF-884D-00AA004B2E24");
pub const IID_IWbemLocator = &IID_IWbemLocator_Value;
pub const IWbemLocator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConnectServer: fn(
            self: *const IWbemLocator,
            strNetworkResource: BSTR,
            strUser: BSTR,
            strPassword: BSTR,
            strLocale: BSTR,
            lSecurityFlags: i32,
            strAuthority: BSTR,
            pCtx: *IWbemContext,
            ppNamespace: **IWbemServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemLocator_ConnectServer(self: *const T, strNetworkResource: BSTR, strUser: BSTR, strPassword: BSTR, strLocale: BSTR, lSecurityFlags: i32, strAuthority: BSTR, pCtx: *IWbemContext, ppNamespace: **IWbemServices) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemLocator.VTable, self.vtable).ConnectServer(@ptrCast(*const IWbemLocator, self), strNetworkResource, strUser, strPassword, strLocale, lSecurityFlags, strAuthority, pCtx, ppNamespace);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemObjectSink_Value = @import("../zig.zig").Guid.initString("7C857801-7381-11CF-884D-00AA004B2E24");
pub const IID_IWbemObjectSink = &IID_IWbemObjectSink_Value;
pub const IWbemObjectSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Indicate: fn(
            self: *const IWbemObjectSink,
            lObjectCount: i32,
            apObjArray: [*]*IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStatus: fn(
            self: *const IWbemObjectSink,
            lFlags: i32,
            hResult: HRESULT,
            strParam: BSTR,
            pObjParam: *IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectSink_Indicate(self: *const T, lObjectCount: i32, apObjArray: [*]*IWbemClassObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectSink.VTable, self.vtable).Indicate(@ptrCast(*const IWbemObjectSink, self), lObjectCount, apObjArray);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectSink_SetStatus(self: *const T, lFlags: i32, hResult: HRESULT, strParam: BSTR, pObjParam: *IWbemClassObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectSink.VTable, self.vtable).SetStatus(@ptrCast(*const IWbemObjectSink, self), lFlags, hResult, strParam, pObjParam);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumWbemClassObject_Value = @import("../zig.zig").Guid.initString("027947E1-D731-11CE-A357-000000000001");
pub const IID_IEnumWbemClassObject = &IID_IEnumWbemClassObject_Value;
pub const IEnumWbemClassObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Reset: fn(
            self: *const IEnumWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: fn(
            self: *const IEnumWbemClassObject,
            lTimeout: i32,
            uCount: u32,
            apObjects: [*]*IWbemClassObject,
            puReturned: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NextAsync: fn(
            self: *const IEnumWbemClassObject,
            uCount: u32,
            pSink: *IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumWbemClassObject,
            ppEnum: **IEnumWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumWbemClassObject,
            lTimeout: i32,
            nCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWbemClassObject_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWbemClassObject.VTable, self.vtable).Reset(@ptrCast(*const IEnumWbemClassObject, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWbemClassObject_Next(self: *const T, lTimeout: i32, uCount: u32, apObjects: [*]*IWbemClassObject, puReturned: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWbemClassObject.VTable, self.vtable).Next(@ptrCast(*const IEnumWbemClassObject, self), lTimeout, uCount, apObjects, puReturned);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWbemClassObject_NextAsync(self: *const T, uCount: u32, pSink: *IWbemObjectSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWbemClassObject.VTable, self.vtable).NextAsync(@ptrCast(*const IEnumWbemClassObject, self), uCount, pSink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWbemClassObject_Clone(self: *const T, ppEnum: **IEnumWbemClassObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWbemClassObject.VTable, self.vtable).Clone(@ptrCast(*const IEnumWbemClassObject, self), ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumWbemClassObject_Skip(self: *const T, lTimeout: i32, nCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumWbemClassObject.VTable, self.vtable).Skip(@ptrCast(*const IEnumWbemClassObject, self), lTimeout, nCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemCallResult_Value = @import("../zig.zig").Guid.initString("44ACA675-E8FC-11D0-A07C-00C04FB68820");
pub const IID_IWbemCallResult = &IID_IWbemCallResult_Value;
pub const IWbemCallResult = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetResultObject: fn(
            self: *const IWbemCallResult,
            lTimeout: i32,
            ppResultObject: **IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResultString: fn(
            self: *const IWbemCallResult,
            lTimeout: i32,
            pstrResultString: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResultServices: fn(
            self: *const IWbemCallResult,
            lTimeout: i32,
            ppServices: **IWbemServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCallStatus: fn(
            self: *const IWbemCallResult,
            lTimeout: i32,
            plStatus: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemCallResult_GetResultObject(self: *const T, lTimeout: i32, ppResultObject: **IWbemClassObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemCallResult.VTable, self.vtable).GetResultObject(@ptrCast(*const IWbemCallResult, self), lTimeout, ppResultObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemCallResult_GetResultString(self: *const T, lTimeout: i32, pstrResultString: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemCallResult.VTable, self.vtable).GetResultString(@ptrCast(*const IWbemCallResult, self), lTimeout, pstrResultString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemCallResult_GetResultServices(self: *const T, lTimeout: i32, ppServices: **IWbemServices) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemCallResult.VTable, self.vtable).GetResultServices(@ptrCast(*const IWbemCallResult, self), lTimeout, ppServices);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemCallResult_GetCallStatus(self: *const T, lTimeout: i32, plStatus: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemCallResult.VTable, self.vtable).GetCallStatus(@ptrCast(*const IWbemCallResult, self), lTimeout, plStatus);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemContext_Value = @import("../zig.zig").Guid.initString("44ACA674-E8FC-11D0-A07C-00C04FB68820");
pub const IID_IWbemContext = &IID_IWbemContext_Value;
pub const IWbemContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Clone: fn(
            self: *const IWbemContext,
            ppNewCopy: **IWbemContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNames: fn(
            self: *const IWbemContext,
            lFlags: i32,
            pNames: **SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginEnumeration: fn(
            self: *const IWbemContext,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: fn(
            self: *const IWbemContext,
            lFlags: i32,
            pstrName: *BSTR,
            pValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndEnumeration: fn(
            self: *const IWbemContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: fn(
            self: *const IWbemContext,
            wszName: [*:0]const u16,
            lFlags: i32,
            pValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const IWbemContext,
            wszName: [*:0]const u16,
            lFlags: i32,
            pValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteValue: fn(
            self: *const IWbemContext,
            wszName: [*:0]const u16,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAll: fn(
            self: *const IWbemContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemContext_Clone(self: *const T, ppNewCopy: **IWbemContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemContext.VTable, self.vtable).Clone(@ptrCast(*const IWbemContext, self), ppNewCopy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemContext_GetNames(self: *const T, lFlags: i32, pNames: **SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemContext.VTable, self.vtable).GetNames(@ptrCast(*const IWbemContext, self), lFlags, pNames);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemContext_BeginEnumeration(self: *const T, lFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemContext.VTable, self.vtable).BeginEnumeration(@ptrCast(*const IWbemContext, self), lFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemContext_Next(self: *const T, lFlags: i32, pstrName: *BSTR, pValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemContext.VTable, self.vtable).Next(@ptrCast(*const IWbemContext, self), lFlags, pstrName, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemContext_EndEnumeration(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemContext.VTable, self.vtable).EndEnumeration(@ptrCast(*const IWbemContext, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemContext_SetValue(self: *const T, wszName: [*:0]const u16, lFlags: i32, pValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemContext.VTable, self.vtable).SetValue(@ptrCast(*const IWbemContext, self), wszName, lFlags, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemContext_GetValue(self: *const T, wszName: [*:0]const u16, lFlags: i32, pValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemContext.VTable, self.vtable).GetValue(@ptrCast(*const IWbemContext, self), wszName, lFlags, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemContext_DeleteValue(self: *const T, wszName: [*:0]const u16, lFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemContext.VTable, self.vtable).DeleteValue(@ptrCast(*const IWbemContext, self), wszName, lFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemContext_DeleteAll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemContext.VTable, self.vtable).DeleteAll(@ptrCast(*const IWbemContext, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUnsecuredApartment_Value = @import("../zig.zig").Guid.initString("1CFABA8C-1523-11D1-AD79-00C04FD8FDFF");
pub const IID_IUnsecuredApartment = &IID_IUnsecuredApartment_Value;
pub const IUnsecuredApartment = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateObjectStub: fn(
            self: *const IUnsecuredApartment,
            pObject: *IUnknown,
            ppStub: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUnsecuredApartment_CreateObjectStub(self: *const T, pObject: *IUnknown, ppStub: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUnsecuredApartment.VTable, self.vtable).CreateObjectStub(@ptrCast(*const IUnsecuredApartment, self), pObject, ppStub);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemUnsecuredApartment_Value = @import("../zig.zig").Guid.initString("31739D04-3471-4CF4-9A7C-57A44AE71956");
pub const IID_IWbemUnsecuredApartment = &IID_IWbemUnsecuredApartment_Value;
pub const IWbemUnsecuredApartment = extern struct {
    pub const VTable = extern struct {
        base: IUnsecuredApartment.VTable,
        CreateSinkStub: fn(
            self: *const IWbemUnsecuredApartment,
            pSink: *IWbemObjectSink,
            dwFlags: u32,
            wszReserved: [*:0]const u16,
            ppStub: **IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnsecuredApartment.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemUnsecuredApartment_CreateSinkStub(self: *const T, pSink: *IWbemObjectSink, dwFlags: u32, wszReserved: [*:0]const u16, ppStub: **IWbemObjectSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemUnsecuredApartment.VTable, self.vtable).CreateSinkStub(@ptrCast(*const IWbemUnsecuredApartment, self), pSink, dwFlags, wszReserved, ppStub);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemStatusCodeText_Value = @import("../zig.zig").Guid.initString("EB87E1BC-3233-11D2-AEC9-00C04FB68820");
pub const IID_IWbemStatusCodeText = &IID_IWbemStatusCodeText_Value;
pub const IWbemStatusCodeText = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetErrorCodeText: fn(
            self: *const IWbemStatusCodeText,
            hRes: HRESULT,
            LocaleId: u32,
            lFlags: i32,
            MessageText: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFacilityCodeText: fn(
            self: *const IWbemStatusCodeText,
            hRes: HRESULT,
            LocaleId: u32,
            lFlags: i32,
            MessageText: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemStatusCodeText_GetErrorCodeText(self: *const T, hRes: HRESULT, LocaleId: u32, lFlags: i32, MessageText: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemStatusCodeText.VTable, self.vtable).GetErrorCodeText(@ptrCast(*const IWbemStatusCodeText, self), hRes, LocaleId, lFlags, MessageText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemStatusCodeText_GetFacilityCodeText(self: *const T, hRes: HRESULT, LocaleId: u32, lFlags: i32, MessageText: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemStatusCodeText.VTable, self.vtable).GetFacilityCodeText(@ptrCast(*const IWbemStatusCodeText, self), hRes, LocaleId, lFlags, MessageText);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemBackupRestore_Value = @import("../zig.zig").Guid.initString("C49E32C7-BC8B-11D2-85D4-00105A1F8304");
pub const IID_IWbemBackupRestore = &IID_IWbemBackupRestore_Value;
pub const IWbemBackupRestore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Backup: fn(
            self: *const IWbemBackupRestore,
            strBackupToFile: [*:0]const u16,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Restore: fn(
            self: *const IWbemBackupRestore,
            strRestoreFromFile: [*:0]const u16,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemBackupRestore_Backup(self: *const T, strBackupToFile: [*:0]const u16, lFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemBackupRestore.VTable, self.vtable).Backup(@ptrCast(*const IWbemBackupRestore, self), strBackupToFile, lFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemBackupRestore_Restore(self: *const T, strRestoreFromFile: [*:0]const u16, lFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemBackupRestore.VTable, self.vtable).Restore(@ptrCast(*const IWbemBackupRestore, self), strRestoreFromFile, lFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemBackupRestoreEx_Value = @import("../zig.zig").Guid.initString("A359DEC5-E813-4834-8A2A-BA7F1D777D76");
pub const IID_IWbemBackupRestoreEx = &IID_IWbemBackupRestoreEx_Value;
pub const IWbemBackupRestoreEx = extern struct {
    pub const VTable = extern struct {
        base: IWbemBackupRestore.VTable,
        Pause: fn(
            self: *const IWbemBackupRestoreEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: fn(
            self: *const IWbemBackupRestoreEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWbemBackupRestore.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemBackupRestoreEx_Pause(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemBackupRestoreEx.VTable, self.vtable).Pause(@ptrCast(*const IWbemBackupRestoreEx, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemBackupRestoreEx_Resume(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemBackupRestoreEx.VTable, self.vtable).Resume(@ptrCast(*const IWbemBackupRestoreEx, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemRefresher_Value = @import("../zig.zig").Guid.initString("49353C99-516B-11D1-AEA6-00C04FB68820");
pub const IID_IWbemRefresher = &IID_IWbemRefresher_Value;
pub const IWbemRefresher = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Refresh: fn(
            self: *const IWbemRefresher,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemRefresher_Refresh(self: *const T, lFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemRefresher.VTable, self.vtable).Refresh(@ptrCast(*const IWbemRefresher, self), lFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemHiPerfEnum_Value = @import("../zig.zig").Guid.initString("2705C288-79AE-11D2-B348-00105A1F8177");
pub const IID_IWbemHiPerfEnum = &IID_IWbemHiPerfEnum_Value;
pub const IWbemHiPerfEnum = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddObjects: fn(
            self: *const IWbemHiPerfEnum,
            lFlags: i32,
            uNumObjects: u32,
            apIds: [*]i32,
            apObj: [*]*IWbemObjectAccess,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveObjects: fn(
            self: *const IWbemHiPerfEnum,
            lFlags: i32,
            uNumObjects: u32,
            apIds: [*]i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjects: fn(
            self: *const IWbemHiPerfEnum,
            lFlags: i32,
            uNumObjects: u32,
            apObj: [*]*IWbemObjectAccess,
            puReturned: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAll: fn(
            self: *const IWbemHiPerfEnum,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemHiPerfEnum_AddObjects(self: *const T, lFlags: i32, uNumObjects: u32, apIds: [*]i32, apObj: [*]*IWbemObjectAccess) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemHiPerfEnum.VTable, self.vtable).AddObjects(@ptrCast(*const IWbemHiPerfEnum, self), lFlags, uNumObjects, apIds, apObj);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemHiPerfEnum_RemoveObjects(self: *const T, lFlags: i32, uNumObjects: u32, apIds: [*]i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemHiPerfEnum.VTable, self.vtable).RemoveObjects(@ptrCast(*const IWbemHiPerfEnum, self), lFlags, uNumObjects, apIds);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemHiPerfEnum_GetObjects(self: *const T, lFlags: i32, uNumObjects: u32, apObj: [*]*IWbemObjectAccess, puReturned: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemHiPerfEnum.VTable, self.vtable).GetObjects(@ptrCast(*const IWbemHiPerfEnum, self), lFlags, uNumObjects, apObj, puReturned);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemHiPerfEnum_RemoveAll(self: *const T, lFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemHiPerfEnum.VTable, self.vtable).RemoveAll(@ptrCast(*const IWbemHiPerfEnum, self), lFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemConfigureRefresher_Value = @import("../zig.zig").Guid.initString("49353C92-516B-11D1-AEA6-00C04FB68820");
pub const IID_IWbemConfigureRefresher = &IID_IWbemConfigureRefresher_Value;
pub const IWbemConfigureRefresher = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddObjectByPath: fn(
            self: *const IWbemConfigureRefresher,
            pNamespace: *IWbemServices,
            wszPath: [*:0]const u16,
            lFlags: i32,
            pContext: *IWbemContext,
            ppRefreshable: **IWbemClassObject,
            plId: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddObjectByTemplate: fn(
            self: *const IWbemConfigureRefresher,
            pNamespace: *IWbemServices,
            pTemplate: *IWbemClassObject,
            lFlags: i32,
            pContext: *IWbemContext,
            ppRefreshable: **IWbemClassObject,
            plId: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRefresher: fn(
            self: *const IWbemConfigureRefresher,
            pRefresher: *IWbemRefresher,
            lFlags: i32,
            plId: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IWbemConfigureRefresher,
            lId: i32,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddEnum: fn(
            self: *const IWbemConfigureRefresher,
            pNamespace: *IWbemServices,
            wszClassName: [*:0]const u16,
            lFlags: i32,
            pContext: *IWbemContext,
            ppEnum: **IWbemHiPerfEnum,
            plId: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemConfigureRefresher_AddObjectByPath(self: *const T, pNamespace: *IWbemServices, wszPath: [*:0]const u16, lFlags: i32, pContext: *IWbemContext, ppRefreshable: **IWbemClassObject, plId: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemConfigureRefresher.VTable, self.vtable).AddObjectByPath(@ptrCast(*const IWbemConfigureRefresher, self), pNamespace, wszPath, lFlags, pContext, ppRefreshable, plId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemConfigureRefresher_AddObjectByTemplate(self: *const T, pNamespace: *IWbemServices, pTemplate: *IWbemClassObject, lFlags: i32, pContext: *IWbemContext, ppRefreshable: **IWbemClassObject, plId: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemConfigureRefresher.VTable, self.vtable).AddObjectByTemplate(@ptrCast(*const IWbemConfigureRefresher, self), pNamespace, pTemplate, lFlags, pContext, ppRefreshable, plId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemConfigureRefresher_AddRefresher(self: *const T, pRefresher: *IWbemRefresher, lFlags: i32, plId: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemConfigureRefresher.VTable, self.vtable).AddRefresher(@ptrCast(*const IWbemConfigureRefresher, self), pRefresher, lFlags, plId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemConfigureRefresher_Remove(self: *const T, lId: i32, lFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemConfigureRefresher.VTable, self.vtable).Remove(@ptrCast(*const IWbemConfigureRefresher, self), lId, lFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemConfigureRefresher_AddEnum(self: *const T, pNamespace: *IWbemServices, wszClassName: [*:0]const u16, lFlags: i32, pContext: *IWbemContext, ppEnum: **IWbemHiPerfEnum, plId: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemConfigureRefresher.VTable, self.vtable).AddEnum(@ptrCast(*const IWbemConfigureRefresher, self), pNamespace, wszClassName, lFlags, pContext, ppEnum, plId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemObjectSinkEx_Value = @import("../zig.zig").Guid.initString("E7D35CFA-348B-485E-B524-252725D697CA");
pub const IID_IWbemObjectSinkEx = &IID_IWbemObjectSinkEx_Value;
pub const IWbemObjectSinkEx = extern struct {
    pub const VTable = extern struct {
        base: IWbemObjectSink.VTable,
        WriteMessage: fn(
            self: *const IWbemObjectSinkEx,
            uChannel: u32,
            strMessage: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteError: fn(
            self: *const IWbemObjectSinkEx,
            pObjError: *IWbemClassObject,
            puReturned: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PromptUser: fn(
            self: *const IWbemObjectSinkEx,
            strMessage: BSTR,
            uPromptType: u8,
            puReturned: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteProgress: fn(
            self: *const IWbemObjectSinkEx,
            strActivity: BSTR,
            strCurrentOperation: BSTR,
            strStatusDescription: BSTR,
            uPercentComplete: u32,
            uSecondsRemaining: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteStreamParameter: fn(
            self: *const IWbemObjectSinkEx,
            strName: BSTR,
            vtValue: *VARIANT,
            ulType: u32,
            ulFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWbemObjectSink.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectSinkEx_WriteMessage(self: *const T, uChannel: u32, strMessage: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectSinkEx.VTable, self.vtable).WriteMessage(@ptrCast(*const IWbemObjectSinkEx, self), uChannel, strMessage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectSinkEx_WriteError(self: *const T, pObjError: *IWbemClassObject, puReturned: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectSinkEx.VTable, self.vtable).WriteError(@ptrCast(*const IWbemObjectSinkEx, self), pObjError, puReturned);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectSinkEx_PromptUser(self: *const T, strMessage: BSTR, uPromptType: u8, puReturned: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectSinkEx.VTable, self.vtable).PromptUser(@ptrCast(*const IWbemObjectSinkEx, self), strMessage, uPromptType, puReturned);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectSinkEx_WriteProgress(self: *const T, strActivity: BSTR, strCurrentOperation: BSTR, strStatusDescription: BSTR, uPercentComplete: u32, uSecondsRemaining: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectSinkEx.VTable, self.vtable).WriteProgress(@ptrCast(*const IWbemObjectSinkEx, self), strActivity, strCurrentOperation, strStatusDescription, uPercentComplete, uSecondsRemaining);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectSinkEx_WriteStreamParameter(self: *const T, strName: BSTR, vtValue: *VARIANT, ulType: u32, ulFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectSinkEx.VTable, self.vtable).WriteStreamParameter(@ptrCast(*const IWbemObjectSinkEx, self), strName, vtValue, ulType, ulFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemShutdown_Value = @import("../zig.zig").Guid.initString("B7B31DF9-D515-11D3-A11C-00105A1F515A");
pub const IID_IWbemShutdown = &IID_IWbemShutdown_Value;
pub const IWbemShutdown = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Shutdown: fn(
            self: *const IWbemShutdown,
            uReason: i32,
            uMaxMilliseconds: u32,
            pCtx: *IWbemContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemShutdown_Shutdown(self: *const T, uReason: i32, uMaxMilliseconds: u32, pCtx: *IWbemContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemShutdown.VTable, self.vtable).Shutdown(@ptrCast(*const IWbemShutdown, self), uReason, uMaxMilliseconds, pCtx);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WMI_OBJ_TEXT = extern enum(i32) {
    CIM_DTD_2_0 = 1,
    WMI_DTD_2_0 = 2,
    WMI_EXT1 = 3,
    WMI_EXT2 = 4,
    WMI_EXT3 = 5,
    WMI_EXT4 = 6,
    WMI_EXT5 = 7,
    WMI_EXT6 = 8,
    WMI_EXT7 = 9,
    WMI_EXT8 = 10,
    WMI_EXT9 = 11,
    WMI_EXT10 = 12,
    LAST = 13,
};
pub const WMI_OBJ_TEXT_CIM_DTD_2_0 = WMI_OBJ_TEXT.CIM_DTD_2_0;
pub const WMI_OBJ_TEXT_WMI_DTD_2_0 = WMI_OBJ_TEXT.WMI_DTD_2_0;
pub const WMI_OBJ_TEXT_WMI_EXT1 = WMI_OBJ_TEXT.WMI_EXT1;
pub const WMI_OBJ_TEXT_WMI_EXT2 = WMI_OBJ_TEXT.WMI_EXT2;
pub const WMI_OBJ_TEXT_WMI_EXT3 = WMI_OBJ_TEXT.WMI_EXT3;
pub const WMI_OBJ_TEXT_WMI_EXT4 = WMI_OBJ_TEXT.WMI_EXT4;
pub const WMI_OBJ_TEXT_WMI_EXT5 = WMI_OBJ_TEXT.WMI_EXT5;
pub const WMI_OBJ_TEXT_WMI_EXT6 = WMI_OBJ_TEXT.WMI_EXT6;
pub const WMI_OBJ_TEXT_WMI_EXT7 = WMI_OBJ_TEXT.WMI_EXT7;
pub const WMI_OBJ_TEXT_WMI_EXT8 = WMI_OBJ_TEXT.WMI_EXT8;
pub const WMI_OBJ_TEXT_WMI_EXT9 = WMI_OBJ_TEXT.WMI_EXT9;
pub const WMI_OBJ_TEXT_WMI_EXT10 = WMI_OBJ_TEXT.WMI_EXT10;
pub const WMI_OBJ_TEXT_LAST = WMI_OBJ_TEXT.LAST;

const IID_IWbemObjectTextSrc_Value = @import("../zig.zig").Guid.initString("BFBF883A-CAD7-11D3-A11B-00105A1F515A");
pub const IID_IWbemObjectTextSrc = &IID_IWbemObjectTextSrc_Value;
pub const IWbemObjectTextSrc = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetText: fn(
            self: *const IWbemObjectTextSrc,
            lFlags: i32,
            pObj: *IWbemClassObject,
            uObjTextFormat: u32,
            pCtx: *IWbemContext,
            strText: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFromText: fn(
            self: *const IWbemObjectTextSrc,
            lFlags: i32,
            strText: BSTR,
            uObjTextFormat: u32,
            pCtx: *IWbemContext,
            pNewObj: **IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectTextSrc_GetText(self: *const T, lFlags: i32, pObj: *IWbemClassObject, uObjTextFormat: u32, pCtx: *IWbemContext, strText: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectTextSrc.VTable, self.vtable).GetText(@ptrCast(*const IWbemObjectTextSrc, self), lFlags, pObj, uObjTextFormat, pCtx, strText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemObjectTextSrc_CreateFromText(self: *const T, lFlags: i32, strText: BSTR, uObjTextFormat: u32, pCtx: *IWbemContext, pNewObj: **IWbemClassObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemObjectTextSrc.VTable, self.vtable).CreateFromText(@ptrCast(*const IWbemObjectTextSrc, self), lFlags, strText, uObjTextFormat, pCtx, pNewObj);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WBEM_COMPILE_STATUS_INFO = extern struct {
    lPhaseError: i32,
    hRes: HRESULT,
    ObjectNum: i32,
    FirstLine: i32,
    LastLine: i32,
    dwOutFlags: u32,
};

pub const WBEM_COMPILER_OPTIONS = extern enum(i32) {
    WBEM_FLAG_CHECK_ONLY = 1,
    WBEM_FLAG_AUTORECOVER = 2,
    WBEM_FLAG_WMI_CHECK = 4,
    WBEM_FLAG_CONSOLE_PRINT = 8,
    WBEM_FLAG_DONT_ADD_TO_LIST = 16,
    WBEM_FLAG_SPLIT_FILES = 32,
    WBEM_FLAG_STORE_FILE = 256,
};
pub const WBEM_FLAG_CHECK_ONLY = WBEM_COMPILER_OPTIONS.WBEM_FLAG_CHECK_ONLY;
pub const WBEM_FLAG_AUTORECOVER = WBEM_COMPILER_OPTIONS.WBEM_FLAG_AUTORECOVER;
pub const WBEM_FLAG_WMI_CHECK = WBEM_COMPILER_OPTIONS.WBEM_FLAG_WMI_CHECK;
pub const WBEM_FLAG_CONSOLE_PRINT = WBEM_COMPILER_OPTIONS.WBEM_FLAG_CONSOLE_PRINT;
pub const WBEM_FLAG_DONT_ADD_TO_LIST = WBEM_COMPILER_OPTIONS.WBEM_FLAG_DONT_ADD_TO_LIST;
pub const WBEM_FLAG_SPLIT_FILES = WBEM_COMPILER_OPTIONS.WBEM_FLAG_SPLIT_FILES;
pub const WBEM_FLAG_STORE_FILE = WBEM_COMPILER_OPTIONS.WBEM_FLAG_STORE_FILE;

pub const WBEM_CONNECT_OPTIONS = extern enum(i32) {
    WBEM_FLAG_CONNECT_REPOSITORY_ONLY = 64,
    WBEM_FLAG_CONNECT_USE_MAX_WAIT = 128,
    WBEM_FLAG_CONNECT_PROVIDERS = 256,
};
pub const WBEM_FLAG_CONNECT_REPOSITORY_ONLY = WBEM_CONNECT_OPTIONS.WBEM_FLAG_CONNECT_REPOSITORY_ONLY;
pub const WBEM_FLAG_CONNECT_USE_MAX_WAIT = WBEM_CONNECT_OPTIONS.WBEM_FLAG_CONNECT_USE_MAX_WAIT;
pub const WBEM_FLAG_CONNECT_PROVIDERS = WBEM_CONNECT_OPTIONS.WBEM_FLAG_CONNECT_PROVIDERS;

const IID_IMofCompiler_Value = @import("../zig.zig").Guid.initString("6DAF974E-2E37-11D2-AEC9-00C04FB68820");
pub const IID_IMofCompiler = &IID_IMofCompiler_Value;
pub const IMofCompiler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CompileFile: fn(
            self: *const IMofCompiler,
            FileName: PWSTR,
            ServerAndNamespace: PWSTR,
            User: PWSTR,
            Authority: PWSTR,
            Password: PWSTR,
            lOptionFlags: i32,
            lClassFlags: i32,
            lInstanceFlags: i32,
            pInfo: *WBEM_COMPILE_STATUS_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompileBuffer: fn(
            self: *const IMofCompiler,
            BuffSize: i32,
            pBuffer: [*:0]u8,
            ServerAndNamespace: PWSTR,
            User: PWSTR,
            Authority: PWSTR,
            Password: PWSTR,
            lOptionFlags: i32,
            lClassFlags: i32,
            lInstanceFlags: i32,
            pInfo: *WBEM_COMPILE_STATUS_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBMOF: fn(
            self: *const IMofCompiler,
            TextFileName: PWSTR,
            BMOFFileName: PWSTR,
            ServerAndNamespace: PWSTR,
            lOptionFlags: i32,
            lClassFlags: i32,
            lInstanceFlags: i32,
            pInfo: *WBEM_COMPILE_STATUS_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMofCompiler_CompileFile(self: *const T, FileName: PWSTR, ServerAndNamespace: PWSTR, User: PWSTR, Authority: PWSTR, Password: PWSTR, lOptionFlags: i32, lClassFlags: i32, lInstanceFlags: i32, pInfo: *WBEM_COMPILE_STATUS_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMofCompiler.VTable, self.vtable).CompileFile(@ptrCast(*const IMofCompiler, self), FileName, ServerAndNamespace, User, Authority, Password, lOptionFlags, lClassFlags, lInstanceFlags, pInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMofCompiler_CompileBuffer(self: *const T, BuffSize: i32, pBuffer: [*:0]u8, ServerAndNamespace: PWSTR, User: PWSTR, Authority: PWSTR, Password: PWSTR, lOptionFlags: i32, lClassFlags: i32, lInstanceFlags: i32, pInfo: *WBEM_COMPILE_STATUS_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMofCompiler.VTable, self.vtable).CompileBuffer(@ptrCast(*const IMofCompiler, self), BuffSize, pBuffer, ServerAndNamespace, User, Authority, Password, lOptionFlags, lClassFlags, lInstanceFlags, pInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMofCompiler_CreateBMOF(self: *const T, TextFileName: PWSTR, BMOFFileName: PWSTR, ServerAndNamespace: PWSTR, lOptionFlags: i32, lClassFlags: i32, lInstanceFlags: i32, pInfo: *WBEM_COMPILE_STATUS_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMofCompiler.VTable, self.vtable).CreateBMOF(@ptrCast(*const IMofCompiler, self), TextFileName, BMOFFileName, ServerAndNamespace, lOptionFlags, lClassFlags, lInstanceFlags, pInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WBEM_UNSECAPP_FLAG_TYPE = extern enum(i32) {
    WBEM_FLAG_UNSECAPP_DEFAULT_CHECK_ACCESS = 0,
    WBEM_FLAG_UNSECAPP_CHECK_ACCESS = 1,
    WBEM_FLAG_UNSECAPP_DONT_CHECK_ACCESS = 2,
};
pub const WBEM_FLAG_UNSECAPP_DEFAULT_CHECK_ACCESS = WBEM_UNSECAPP_FLAG_TYPE.WBEM_FLAG_UNSECAPP_DEFAULT_CHECK_ACCESS;
pub const WBEM_FLAG_UNSECAPP_CHECK_ACCESS = WBEM_UNSECAPP_FLAG_TYPE.WBEM_FLAG_UNSECAPP_CHECK_ACCESS;
pub const WBEM_FLAG_UNSECAPP_DONT_CHECK_ACCESS = WBEM_UNSECAPP_FLAG_TYPE.WBEM_FLAG_UNSECAPP_DONT_CHECK_ACCESS;

pub const tag_WBEM_INFORMATION_FLAG_TYPE = extern enum(i32) {
    WBEM_FLAG_SHORT_NAME = 1,
    WBEM_FLAG_LONG_NAME = 2,
};
pub const WBEM_FLAG_SHORT_NAME = tag_WBEM_INFORMATION_FLAG_TYPE.WBEM_FLAG_SHORT_NAME;
pub const WBEM_FLAG_LONG_NAME = tag_WBEM_INFORMATION_FLAG_TYPE.WBEM_FLAG_LONG_NAME;

const CLSID_WbemAdministrativeLocator_Value = @import("../zig.zig").Guid.initString("CB8555CC-9128-11D1-AD9B-00C04FD8FDFF");
pub const CLSID_WbemAdministrativeLocator = &CLSID_WbemAdministrativeLocator_Value;

const CLSID_WbemAuthenticatedLocator_Value = @import("../zig.zig").Guid.initString("CD184336-9128-11D1-AD9B-00C04FD8FDFF");
pub const CLSID_WbemAuthenticatedLocator = &CLSID_WbemAuthenticatedLocator_Value;

const CLSID_WbemUnauthenticatedLocator_Value = @import("../zig.zig").Guid.initString("443E7B79-DE31-11D2-B340-00104BCC4B4A");
pub const CLSID_WbemUnauthenticatedLocator = &CLSID_WbemUnauthenticatedLocator_Value;

const CLSID_WbemDecoupledRegistrar_Value = @import("../zig.zig").Guid.initString("4CFC7932-0F9D-4BEF-9C32-8EA2A6B56FCB");
pub const CLSID_WbemDecoupledRegistrar = &CLSID_WbemDecoupledRegistrar_Value;

const CLSID_WbemDecoupledBasicEventProvider_Value = @import("../zig.zig").Guid.initString("F5F75737-2843-4F22-933D-C76A97CDA62F");
pub const CLSID_WbemDecoupledBasicEventProvider = &CLSID_WbemDecoupledBasicEventProvider_Value;

pub const tag_WBEM_PROVIDER_REQUIREMENTS_TYPE = extern enum(i32) {
    WBEM_REQUIREMENTS_START_POSTFILTER = 0,
    WBEM_REQUIREMENTS_STOP_POSTFILTER = 1,
    WBEM_REQUIREMENTS_RECHECK_SUBSCRIPTIONS = 2,
};
pub const WBEM_REQUIREMENTS_START_POSTFILTER = tag_WBEM_PROVIDER_REQUIREMENTS_TYPE.WBEM_REQUIREMENTS_START_POSTFILTER;
pub const WBEM_REQUIREMENTS_STOP_POSTFILTER = tag_WBEM_PROVIDER_REQUIREMENTS_TYPE.WBEM_REQUIREMENTS_STOP_POSTFILTER;
pub const WBEM_REQUIREMENTS_RECHECK_SUBSCRIPTIONS = tag_WBEM_PROVIDER_REQUIREMENTS_TYPE.WBEM_REQUIREMENTS_RECHECK_SUBSCRIPTIONS;

const IID_IWbemPropertyProvider_Value = @import("../zig.zig").Guid.initString("CE61E841-65BC-11D0-B6BD-00AA003240C7");
pub const IID_IWbemPropertyProvider = &IID_IWbemPropertyProvider_Value;
pub const IWbemPropertyProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetProperty: fn(
            self: *const IWbemPropertyProvider,
            lFlags: i32,
            strLocale: BSTR,
            strClassMapping: BSTR,
            strInstMapping: BSTR,
            strPropMapping: BSTR,
            pvValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutProperty: fn(
            self: *const IWbemPropertyProvider,
            lFlags: i32,
            strLocale: BSTR,
            strClassMapping: BSTR,
            strInstMapping: BSTR,
            strPropMapping: BSTR,
            pvValue: *const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPropertyProvider_GetProperty(self: *const T, lFlags: i32, strLocale: BSTR, strClassMapping: BSTR, strInstMapping: BSTR, strPropMapping: BSTR, pvValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPropertyProvider.VTable, self.vtable).GetProperty(@ptrCast(*const IWbemPropertyProvider, self), lFlags, strLocale, strClassMapping, strInstMapping, strPropMapping, pvValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemPropertyProvider_PutProperty(self: *const T, lFlags: i32, strLocale: BSTR, strClassMapping: BSTR, strInstMapping: BSTR, strPropMapping: BSTR, pvValue: *const VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemPropertyProvider.VTable, self.vtable).PutProperty(@ptrCast(*const IWbemPropertyProvider, self), lFlags, strLocale, strClassMapping, strInstMapping, strPropMapping, pvValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemUnboundObjectSink_Value = @import("../zig.zig").Guid.initString("E246107B-B06E-11D0-AD61-00C04FD8FDFF");
pub const IID_IWbemUnboundObjectSink = &IID_IWbemUnboundObjectSink_Value;
pub const IWbemUnboundObjectSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IndicateToConsumer: fn(
            self: *const IWbemUnboundObjectSink,
            pLogicalConsumer: *IWbemClassObject,
            lNumObjects: i32,
            apObjects: [*]*IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemUnboundObjectSink_IndicateToConsumer(self: *const T, pLogicalConsumer: *IWbemClassObject, lNumObjects: i32, apObjects: [*]*IWbemClassObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemUnboundObjectSink.VTable, self.vtable).IndicateToConsumer(@ptrCast(*const IWbemUnboundObjectSink, self), pLogicalConsumer, lNumObjects, apObjects);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemEventProvider_Value = @import("../zig.zig").Guid.initString("E245105B-B06E-11D0-AD61-00C04FD8FDFF");
pub const IID_IWbemEventProvider = &IID_IWbemEventProvider_Value;
pub const IWbemEventProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ProvideEvents: fn(
            self: *const IWbemEventProvider,
            pSink: *IWbemObjectSink,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemEventProvider_ProvideEvents(self: *const T, pSink: *IWbemObjectSink, lFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemEventProvider.VTable, self.vtable).ProvideEvents(@ptrCast(*const IWbemEventProvider, self), pSink, lFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemEventProviderQuerySink_Value = @import("../zig.zig").Guid.initString("580ACAF8-FA1C-11D0-AD72-00C04FD8FDFF");
pub const IID_IWbemEventProviderQuerySink = &IID_IWbemEventProviderQuerySink_Value;
pub const IWbemEventProviderQuerySink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NewQuery: fn(
            self: *const IWbemEventProviderQuerySink,
            dwId: u32,
            wszQueryLanguage: *u16,
            wszQuery: *u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelQuery: fn(
            self: *const IWbemEventProviderQuerySink,
            dwId: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemEventProviderQuerySink_NewQuery(self: *const T, dwId: u32, wszQueryLanguage: *u16, wszQuery: *u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemEventProviderQuerySink.VTable, self.vtable).NewQuery(@ptrCast(*const IWbemEventProviderQuerySink, self), dwId, wszQueryLanguage, wszQuery);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemEventProviderQuerySink_CancelQuery(self: *const T, dwId: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemEventProviderQuerySink.VTable, self.vtable).CancelQuery(@ptrCast(*const IWbemEventProviderQuerySink, self), dwId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemEventProviderSecurity_Value = @import("../zig.zig").Guid.initString("631F7D96-D993-11D2-B339-00105A1F4AAF");
pub const IID_IWbemEventProviderSecurity = &IID_IWbemEventProviderSecurity_Value;
pub const IWbemEventProviderSecurity = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AccessCheck: fn(
            self: *const IWbemEventProviderSecurity,
            wszQueryLanguage: *u16,
            wszQuery: *u16,
            lSidLength: i32,
            pSid: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemEventProviderSecurity_AccessCheck(self: *const T, wszQueryLanguage: *u16, wszQuery: *u16, lSidLength: i32, pSid: [*:0]const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemEventProviderSecurity.VTable, self.vtable).AccessCheck(@ptrCast(*const IWbemEventProviderSecurity, self), wszQueryLanguage, wszQuery, lSidLength, pSid);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemEventConsumerProvider_Value = @import("../zig.zig").Guid.initString("E246107A-B06E-11D0-AD61-00C04FD8FDFF");
pub const IID_IWbemEventConsumerProvider = &IID_IWbemEventConsumerProvider_Value;
pub const IWbemEventConsumerProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindConsumer: fn(
            self: *const IWbemEventConsumerProvider,
            pLogicalConsumer: *IWbemClassObject,
            ppConsumer: **IWbemUnboundObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemEventConsumerProvider_FindConsumer(self: *const T, pLogicalConsumer: *IWbemClassObject, ppConsumer: **IWbemUnboundObjectSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemEventConsumerProvider.VTable, self.vtable).FindConsumer(@ptrCast(*const IWbemEventConsumerProvider, self), pLogicalConsumer, ppConsumer);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemProviderInitSink_Value = @import("../zig.zig").Guid.initString("1BE41571-91DD-11D1-AEB2-00C04FB68820");
pub const IID_IWbemProviderInitSink = &IID_IWbemProviderInitSink_Value;
pub const IWbemProviderInitSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetStatus: fn(
            self: *const IWbemProviderInitSink,
            lStatus: i32,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemProviderInitSink_SetStatus(self: *const T, lStatus: i32, lFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemProviderInitSink.VTable, self.vtable).SetStatus(@ptrCast(*const IWbemProviderInitSink, self), lStatus, lFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemProviderInit_Value = @import("../zig.zig").Guid.initString("1BE41572-91DD-11D1-AEB2-00C04FB68820");
pub const IID_IWbemProviderInit = &IID_IWbemProviderInit_Value;
pub const IWbemProviderInit = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IWbemProviderInit,
            wszUser: PWSTR,
            lFlags: i32,
            wszNamespace: PWSTR,
            wszLocale: PWSTR,
            pNamespace: *IWbemServices,
            pCtx: *IWbemContext,
            pInitSink: *IWbemProviderInitSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemProviderInit_Initialize(self: *const T, wszUser: PWSTR, lFlags: i32, wszNamespace: PWSTR, wszLocale: PWSTR, pNamespace: *IWbemServices, pCtx: *IWbemContext, pInitSink: *IWbemProviderInitSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemProviderInit.VTable, self.vtable).Initialize(@ptrCast(*const IWbemProviderInit, self), wszUser, lFlags, wszNamespace, wszLocale, pNamespace, pCtx, pInitSink);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemHiPerfProvider_Value = @import("../zig.zig").Guid.initString("49353C93-516B-11D1-AEA6-00C04FB68820");
pub const IID_IWbemHiPerfProvider = &IID_IWbemHiPerfProvider_Value;
pub const IWbemHiPerfProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryInstances: fn(
            self: *const IWbemHiPerfProvider,
            pNamespace: *IWbemServices,
            wszClass: PWSTR,
            lFlags: i32,
            pCtx: *IWbemContext,
            pSink: *IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRefresher: fn(
            self: *const IWbemHiPerfProvider,
            pNamespace: *IWbemServices,
            lFlags: i32,
            ppRefresher: **IWbemRefresher,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRefreshableObject: fn(
            self: *const IWbemHiPerfProvider,
            pNamespace: *IWbemServices,
            pTemplate: *IWbemObjectAccess,
            pRefresher: *IWbemRefresher,
            lFlags: i32,
            pContext: *IWbemContext,
            ppRefreshable: **IWbemObjectAccess,
            plId: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopRefreshing: fn(
            self: *const IWbemHiPerfProvider,
            pRefresher: *IWbemRefresher,
            lId: i32,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRefreshableEnum: fn(
            self: *const IWbemHiPerfProvider,
            pNamespace: *IWbemServices,
            wszClass: [*:0]const u16,
            pRefresher: *IWbemRefresher,
            lFlags: i32,
            pContext: *IWbemContext,
            pHiPerfEnum: *IWbemHiPerfEnum,
            plId: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjects: fn(
            self: *const IWbemHiPerfProvider,
            pNamespace: *IWbemServices,
            lNumObjects: i32,
            apObj: [*]*IWbemObjectAccess,
            lFlags: i32,
            pContext: *IWbemContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemHiPerfProvider_QueryInstances(self: *const T, pNamespace: *IWbemServices, wszClass: PWSTR, lFlags: i32, pCtx: *IWbemContext, pSink: *IWbemObjectSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemHiPerfProvider.VTable, self.vtable).QueryInstances(@ptrCast(*const IWbemHiPerfProvider, self), pNamespace, wszClass, lFlags, pCtx, pSink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemHiPerfProvider_CreateRefresher(self: *const T, pNamespace: *IWbemServices, lFlags: i32, ppRefresher: **IWbemRefresher) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemHiPerfProvider.VTable, self.vtable).CreateRefresher(@ptrCast(*const IWbemHiPerfProvider, self), pNamespace, lFlags, ppRefresher);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemHiPerfProvider_CreateRefreshableObject(self: *const T, pNamespace: *IWbemServices, pTemplate: *IWbemObjectAccess, pRefresher: *IWbemRefresher, lFlags: i32, pContext: *IWbemContext, ppRefreshable: **IWbemObjectAccess, plId: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemHiPerfProvider.VTable, self.vtable).CreateRefreshableObject(@ptrCast(*const IWbemHiPerfProvider, self), pNamespace, pTemplate, pRefresher, lFlags, pContext, ppRefreshable, plId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemHiPerfProvider_StopRefreshing(self: *const T, pRefresher: *IWbemRefresher, lId: i32, lFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemHiPerfProvider.VTable, self.vtable).StopRefreshing(@ptrCast(*const IWbemHiPerfProvider, self), pRefresher, lId, lFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemHiPerfProvider_CreateRefreshableEnum(self: *const T, pNamespace: *IWbemServices, wszClass: [*:0]const u16, pRefresher: *IWbemRefresher, lFlags: i32, pContext: *IWbemContext, pHiPerfEnum: *IWbemHiPerfEnum, plId: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemHiPerfProvider.VTable, self.vtable).CreateRefreshableEnum(@ptrCast(*const IWbemHiPerfProvider, self), pNamespace, wszClass, pRefresher, lFlags, pContext, pHiPerfEnum, plId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemHiPerfProvider_GetObjects(self: *const T, pNamespace: *IWbemServices, lNumObjects: i32, apObj: [*]*IWbemObjectAccess, lFlags: i32, pContext: *IWbemContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemHiPerfProvider.VTable, self.vtable).GetObjects(@ptrCast(*const IWbemHiPerfProvider, self), pNamespace, lNumObjects, apObj, lFlags, pContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemDecoupledRegistrar_Value = @import("../zig.zig").Guid.initString("1005CBCF-E64F-4646-BCD3-3A089D8A84B4");
pub const IID_IWbemDecoupledRegistrar = &IID_IWbemDecoupledRegistrar_Value;
pub const IWbemDecoupledRegistrar = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Register: fn(
            self: *const IWbemDecoupledRegistrar,
            a_Flags: i32,
            a_Context: *IWbemContext,
            a_User: [*:0]const u16,
            a_Locale: [*:0]const u16,
            a_Scope: [*:0]const u16,
            a_Registration: [*:0]const u16,
            pIUnknown: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnRegister: fn(
            self: *const IWbemDecoupledRegistrar,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemDecoupledRegistrar_Register(self: *const T, a_Flags: i32, a_Context: *IWbemContext, a_User: [*:0]const u16, a_Locale: [*:0]const u16, a_Scope: [*:0]const u16, a_Registration: [*:0]const u16, pIUnknown: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemDecoupledRegistrar.VTable, self.vtable).Register(@ptrCast(*const IWbemDecoupledRegistrar, self), a_Flags, a_Context, a_User, a_Locale, a_Scope, a_Registration, pIUnknown);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemDecoupledRegistrar_UnRegister(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemDecoupledRegistrar.VTable, self.vtable).UnRegister(@ptrCast(*const IWbemDecoupledRegistrar, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemProviderIdentity_Value = @import("../zig.zig").Guid.initString("631F7D97-D993-11D2-B339-00105A1F4AAF");
pub const IID_IWbemProviderIdentity = &IID_IWbemProviderIdentity_Value;
pub const IWbemProviderIdentity = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetRegistrationObject: fn(
            self: *const IWbemProviderIdentity,
            lFlags: i32,
            pProvReg: *IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemProviderIdentity_SetRegistrationObject(self: *const T, lFlags: i32, pProvReg: *IWbemClassObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemProviderIdentity.VTable, self.vtable).SetRegistrationObject(@ptrCast(*const IWbemProviderIdentity, self), lFlags, pProvReg);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const tag_WBEM_EXTRA_RETURN_CODES = extern enum(i32) {
    WBEM_S_INITIALIZED = 0,
    WBEM_S_LIMITED_SERVICE = 274433,
    WBEM_S_INDIRECTLY_UPDATED = 274434,
    WBEM_S_SUBJECT_TO_SDS = 274435,
    WBEM_E_RETRY_LATER = -2147209215,
    WBEM_E_RESOURCE_CONTENTION = -2147209214,
};
pub const WBEM_S_INITIALIZED = tag_WBEM_EXTRA_RETURN_CODES.WBEM_S_INITIALIZED;
pub const WBEM_S_LIMITED_SERVICE = tag_WBEM_EXTRA_RETURN_CODES.WBEM_S_LIMITED_SERVICE;
pub const WBEM_S_INDIRECTLY_UPDATED = tag_WBEM_EXTRA_RETURN_CODES.WBEM_S_INDIRECTLY_UPDATED;
pub const WBEM_S_SUBJECT_TO_SDS = tag_WBEM_EXTRA_RETURN_CODES.WBEM_S_SUBJECT_TO_SDS;
pub const WBEM_E_RETRY_LATER = tag_WBEM_EXTRA_RETURN_CODES.WBEM_E_RETRY_LATER;
pub const WBEM_E_RESOURCE_CONTENTION = tag_WBEM_EXTRA_RETURN_CODES.WBEM_E_RESOURCE_CONTENTION;

pub const tag_WBEM_PROVIDER_FLAGS = extern enum(i32) {
    WBEM_FLAG_OWNER_UPDATE = 65536,
};
pub const WBEM_FLAG_OWNER_UPDATE = tag_WBEM_PROVIDER_FLAGS.WBEM_FLAG_OWNER_UPDATE;

const IID_IWbemDecoupledBasicEventProvider_Value = @import("../zig.zig").Guid.initString("86336D20-CA11-4786-9EF1-BC8A946B42FC");
pub const IID_IWbemDecoupledBasicEventProvider = &IID_IWbemDecoupledBasicEventProvider_Value;
pub const IWbemDecoupledBasicEventProvider = extern struct {
    pub const VTable = extern struct {
        base: IWbemDecoupledRegistrar.VTable,
        GetSink: fn(
            self: *const IWbemDecoupledBasicEventProvider,
            a_Flags: i32,
            a_Context: *IWbemContext,
            a_Sink: **IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetService: fn(
            self: *const IWbemDecoupledBasicEventProvider,
            a_Flags: i32,
            a_Context: *IWbemContext,
            a_Service: **IWbemServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWbemDecoupledRegistrar.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemDecoupledBasicEventProvider_GetSink(self: *const T, a_Flags: i32, a_Context: *IWbemContext, a_Sink: **IWbemObjectSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemDecoupledBasicEventProvider.VTable, self.vtable).GetSink(@ptrCast(*const IWbemDecoupledBasicEventProvider, self), a_Flags, a_Context, a_Sink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemDecoupledBasicEventProvider_GetService(self: *const T, a_Flags: i32, a_Context: *IWbemContext, a_Service: **IWbemServices) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemDecoupledBasicEventProvider.VTable, self.vtable).GetService(@ptrCast(*const IWbemDecoupledBasicEventProvider, self), a_Flags, a_Context, a_Service);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const tag_WBEM_BATCH_TYPE = extern enum(i32) {
    WBEM_FLAG_BATCH_IF_NEEDED = 0,
    WBEM_FLAG_MUST_BATCH = 1,
    WBEM_FLAG_MUST_NOT_BATCH = 2,
};
pub const WBEM_FLAG_BATCH_IF_NEEDED = tag_WBEM_BATCH_TYPE.WBEM_FLAG_BATCH_IF_NEEDED;
pub const WBEM_FLAG_MUST_BATCH = tag_WBEM_BATCH_TYPE.WBEM_FLAG_MUST_BATCH;
pub const WBEM_FLAG_MUST_NOT_BATCH = tag_WBEM_BATCH_TYPE.WBEM_FLAG_MUST_NOT_BATCH;

const IID_IWbemEventSink_Value = @import("../zig.zig").Guid.initString("3AE0080A-7E3A-4366-BF89-0FEEDC931659");
pub const IID_IWbemEventSink = &IID_IWbemEventSink_Value;
pub const IWbemEventSink = extern struct {
    pub const VTable = extern struct {
        base: IWbemObjectSink.VTable,
        SetSinkSecurity: fn(
            self: *const IWbemEventSink,
            lSDLength: i32,
            pSD: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsActive: fn(
            self: *const IWbemEventSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRestrictedSink: fn(
            self: *const IWbemEventSink,
            lNumQueries: i32,
            awszQueries: [*]const [*:0]const u16,
            pCallback: *IUnknown,
            ppSink: **IWbemEventSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBatchingParameters: fn(
            self: *const IWbemEventSink,
            lFlags: i32,
            dwMaxBufferSize: u32,
            dwMaxSendLatency: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWbemObjectSink.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemEventSink_SetSinkSecurity(self: *const T, lSDLength: i32, pSD: [*:0]u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemEventSink.VTable, self.vtable).SetSinkSecurity(@ptrCast(*const IWbemEventSink, self), lSDLength, pSD);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemEventSink_IsActive(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemEventSink.VTable, self.vtable).IsActive(@ptrCast(*const IWbemEventSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemEventSink_GetRestrictedSink(self: *const T, lNumQueries: i32, awszQueries: [*]const [*:0]const u16, pCallback: *IUnknown, ppSink: **IWbemEventSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemEventSink.VTable, self.vtable).GetRestrictedSink(@ptrCast(*const IWbemEventSink, self), lNumQueries, awszQueries, pCallback, ppSink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWbemEventSink_SetBatchingParameters(self: *const T, lFlags: i32, dwMaxBufferSize: u32, dwMaxSendLatency: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWbemEventSink.VTable, self.vtable).SetBatchingParameters(@ptrCast(*const IWbemEventSink, self), lFlags, dwMaxBufferSize, dwMaxSendLatency);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_SWbemLocator_Value = @import("../zig.zig").Guid.initString("76A64158-CB41-11D1-8B02-00600806D9B6");
pub const CLSID_SWbemLocator = &CLSID_SWbemLocator_Value;

const CLSID_SWbemNamedValueSet_Value = @import("../zig.zig").Guid.initString("9AED384E-CE8B-11D1-8B05-00600806D9B6");
pub const CLSID_SWbemNamedValueSet = &CLSID_SWbemNamedValueSet_Value;

const CLSID_SWbemObjectPath_Value = @import("../zig.zig").Guid.initString("5791BC26-CE9C-11D1-97BF-0000F81E849C");
pub const CLSID_SWbemObjectPath = &CLSID_SWbemObjectPath_Value;

const CLSID_SWbemLastError_Value = @import("../zig.zig").Guid.initString("C2FEEEAC-CFCD-11D1-8B05-00600806D9B6");
pub const CLSID_SWbemLastError = &CLSID_SWbemLastError_Value;

const CLSID_SWbemSink_Value = @import("../zig.zig").Guid.initString("75718C9A-F029-11D1-A1AC-00C04FB6C223");
pub const CLSID_SWbemSink = &CLSID_SWbemSink_Value;

const CLSID_SWbemDateTime_Value = @import("../zig.zig").Guid.initString("47DFBE54-CF76-11D3-B38F-00105A1F473A");
pub const CLSID_SWbemDateTime = &CLSID_SWbemDateTime_Value;

const CLSID_SWbemRefresher_Value = @import("../zig.zig").Guid.initString("D269BF5C-D9C1-11D3-B38F-00105A1F473A");
pub const CLSID_SWbemRefresher = &CLSID_SWbemRefresher_Value;

const CLSID_SWbemServices_Value = @import("../zig.zig").Guid.initString("04B83D63-21AE-11D2-8B33-00600806D9B6");
pub const CLSID_SWbemServices = &CLSID_SWbemServices_Value;

const CLSID_SWbemServicesEx_Value = @import("../zig.zig").Guid.initString("62E522DC-8CF3-40A8-8B2E-37D595651E40");
pub const CLSID_SWbemServicesEx = &CLSID_SWbemServicesEx_Value;

const CLSID_SWbemObject_Value = @import("../zig.zig").Guid.initString("04B83D62-21AE-11D2-8B33-00600806D9B6");
pub const CLSID_SWbemObject = &CLSID_SWbemObject_Value;

const CLSID_SWbemObjectEx_Value = @import("../zig.zig").Guid.initString("D6BDAFB2-9435-491F-BB87-6AA0F0BC31A2");
pub const CLSID_SWbemObjectEx = &CLSID_SWbemObjectEx_Value;

const CLSID_SWbemObjectSet_Value = @import("../zig.zig").Guid.initString("04B83D61-21AE-11D2-8B33-00600806D9B6");
pub const CLSID_SWbemObjectSet = &CLSID_SWbemObjectSet_Value;

const CLSID_SWbemNamedValue_Value = @import("../zig.zig").Guid.initString("04B83D60-21AE-11D2-8B33-00600806D9B6");
pub const CLSID_SWbemNamedValue = &CLSID_SWbemNamedValue_Value;

const CLSID_SWbemQualifier_Value = @import("../zig.zig").Guid.initString("04B83D5F-21AE-11D2-8B33-00600806D9B6");
pub const CLSID_SWbemQualifier = &CLSID_SWbemQualifier_Value;

const CLSID_SWbemQualifierSet_Value = @import("../zig.zig").Guid.initString("04B83D5E-21AE-11D2-8B33-00600806D9B6");
pub const CLSID_SWbemQualifierSet = &CLSID_SWbemQualifierSet_Value;

const CLSID_SWbemProperty_Value = @import("../zig.zig").Guid.initString("04B83D5D-21AE-11D2-8B33-00600806D9B6");
pub const CLSID_SWbemProperty = &CLSID_SWbemProperty_Value;

const CLSID_SWbemPropertySet_Value = @import("../zig.zig").Guid.initString("04B83D5C-21AE-11D2-8B33-00600806D9B6");
pub const CLSID_SWbemPropertySet = &CLSID_SWbemPropertySet_Value;

const CLSID_SWbemMethod_Value = @import("../zig.zig").Guid.initString("04B83D5B-21AE-11D2-8B33-00600806D9B6");
pub const CLSID_SWbemMethod = &CLSID_SWbemMethod_Value;

const CLSID_SWbemMethodSet_Value = @import("../zig.zig").Guid.initString("04B83D5A-21AE-11D2-8B33-00600806D9B6");
pub const CLSID_SWbemMethodSet = &CLSID_SWbemMethodSet_Value;

const CLSID_SWbemEventSource_Value = @import("../zig.zig").Guid.initString("04B83D58-21AE-11D2-8B33-00600806D9B6");
pub const CLSID_SWbemEventSource = &CLSID_SWbemEventSource_Value;

const CLSID_SWbemSecurity_Value = @import("../zig.zig").Guid.initString("B54D66E9-2287-11D2-8B33-00600806D9B6");
pub const CLSID_SWbemSecurity = &CLSID_SWbemSecurity_Value;

const CLSID_SWbemPrivilege_Value = @import("../zig.zig").Guid.initString("26EE67BC-5804-11D2-8B4A-00600806D9B6");
pub const CLSID_SWbemPrivilege = &CLSID_SWbemPrivilege_Value;

const CLSID_SWbemPrivilegeSet_Value = @import("../zig.zig").Guid.initString("26EE67BE-5804-11D2-8B4A-00600806D9B6");
pub const CLSID_SWbemPrivilegeSet = &CLSID_SWbemPrivilegeSet_Value;

const CLSID_SWbemRefreshableItem_Value = @import("../zig.zig").Guid.initString("8C6854BC-DE4B-11D3-B390-00105A1F473A");
pub const CLSID_SWbemRefreshableItem = &CLSID_SWbemRefreshableItem_Value;

pub const WbemChangeFlagEnum = extern enum(i32) {
    wbemChangeFlagCreateOrUpdate = 0,
    wbemChangeFlagUpdateOnly = 1,
    wbemChangeFlagCreateOnly = 2,
    wbemChangeFlagUpdateCompatible = 0,
    wbemChangeFlagUpdateSafeMode = 32,
    wbemChangeFlagUpdateForceMode = 64,
    wbemChangeFlagStrongValidation = 128,
    wbemChangeFlagAdvisory = 65536,
};
pub const wbemChangeFlagCreateOrUpdate = WbemChangeFlagEnum.wbemChangeFlagCreateOrUpdate;
pub const wbemChangeFlagUpdateOnly = WbemChangeFlagEnum.wbemChangeFlagUpdateOnly;
pub const wbemChangeFlagCreateOnly = WbemChangeFlagEnum.wbemChangeFlagCreateOnly;
pub const wbemChangeFlagUpdateCompatible = WbemChangeFlagEnum.wbemChangeFlagUpdateCompatible;
pub const wbemChangeFlagUpdateSafeMode = WbemChangeFlagEnum.wbemChangeFlagUpdateSafeMode;
pub const wbemChangeFlagUpdateForceMode = WbemChangeFlagEnum.wbemChangeFlagUpdateForceMode;
pub const wbemChangeFlagStrongValidation = WbemChangeFlagEnum.wbemChangeFlagStrongValidation;
pub const wbemChangeFlagAdvisory = WbemChangeFlagEnum.wbemChangeFlagAdvisory;

pub const WbemFlagEnum = extern enum(i32) {
    wbemFlagReturnImmediately = 16,
    wbemFlagReturnWhenComplete = 0,
    wbemFlagBidirectional = 0,
    wbemFlagForwardOnly = 32,
    wbemFlagNoErrorObject = 64,
    wbemFlagReturnErrorObject = 0,
    wbemFlagSendStatus = 128,
    wbemFlagDontSendStatus = 0,
    wbemFlagEnsureLocatable = 256,
    wbemFlagDirectRead = 512,
    wbemFlagSendOnlySelected = 0,
    wbemFlagUseAmendedQualifiers = 131072,
    wbemFlagGetDefault = 0,
    wbemFlagSpawnInstance = 1,
    wbemFlagUseCurrentTime = 1,
};
pub const wbemFlagReturnImmediately = WbemFlagEnum.wbemFlagReturnImmediately;
pub const wbemFlagReturnWhenComplete = WbemFlagEnum.wbemFlagReturnWhenComplete;
pub const wbemFlagBidirectional = WbemFlagEnum.wbemFlagBidirectional;
pub const wbemFlagForwardOnly = WbemFlagEnum.wbemFlagForwardOnly;
pub const wbemFlagNoErrorObject = WbemFlagEnum.wbemFlagNoErrorObject;
pub const wbemFlagReturnErrorObject = WbemFlagEnum.wbemFlagReturnErrorObject;
pub const wbemFlagSendStatus = WbemFlagEnum.wbemFlagSendStatus;
pub const wbemFlagDontSendStatus = WbemFlagEnum.wbemFlagDontSendStatus;
pub const wbemFlagEnsureLocatable = WbemFlagEnum.wbemFlagEnsureLocatable;
pub const wbemFlagDirectRead = WbemFlagEnum.wbemFlagDirectRead;
pub const wbemFlagSendOnlySelected = WbemFlagEnum.wbemFlagSendOnlySelected;
pub const wbemFlagUseAmendedQualifiers = WbemFlagEnum.wbemFlagUseAmendedQualifiers;
pub const wbemFlagGetDefault = WbemFlagEnum.wbemFlagGetDefault;
pub const wbemFlagSpawnInstance = WbemFlagEnum.wbemFlagSpawnInstance;
pub const wbemFlagUseCurrentTime = WbemFlagEnum.wbemFlagUseCurrentTime;

pub const WbemQueryFlagEnum = extern enum(i32) {
    wbemQueryFlagDeep = 0,
    wbemQueryFlagShallow = 1,
    wbemQueryFlagPrototype = 2,
};
pub const wbemQueryFlagDeep = WbemQueryFlagEnum.wbemQueryFlagDeep;
pub const wbemQueryFlagShallow = WbemQueryFlagEnum.wbemQueryFlagShallow;
pub const wbemQueryFlagPrototype = WbemQueryFlagEnum.wbemQueryFlagPrototype;

pub const WbemTextFlagEnum = extern enum(i32) {
    wbemTextFlagNoFlavors = 1,
};
pub const wbemTextFlagNoFlavors = WbemTextFlagEnum.wbemTextFlagNoFlavors;

pub const WbemTimeout = extern enum(i32) {
    wbemTimeoutInfinite = -1,
};
pub const wbemTimeoutInfinite = WbemTimeout.wbemTimeoutInfinite;

pub const WbemComparisonFlagEnum = extern enum(i32) {
    wbemComparisonFlagIncludeAll = 0,
    wbemComparisonFlagIgnoreQualifiers = 1,
    wbemComparisonFlagIgnoreObjectSource = 2,
    wbemComparisonFlagIgnoreDefaultValues = 4,
    wbemComparisonFlagIgnoreClass = 8,
    wbemComparisonFlagIgnoreCase = 16,
    wbemComparisonFlagIgnoreFlavor = 32,
};
pub const wbemComparisonFlagIncludeAll = WbemComparisonFlagEnum.wbemComparisonFlagIncludeAll;
pub const wbemComparisonFlagIgnoreQualifiers = WbemComparisonFlagEnum.wbemComparisonFlagIgnoreQualifiers;
pub const wbemComparisonFlagIgnoreObjectSource = WbemComparisonFlagEnum.wbemComparisonFlagIgnoreObjectSource;
pub const wbemComparisonFlagIgnoreDefaultValues = WbemComparisonFlagEnum.wbemComparisonFlagIgnoreDefaultValues;
pub const wbemComparisonFlagIgnoreClass = WbemComparisonFlagEnum.wbemComparisonFlagIgnoreClass;
pub const wbemComparisonFlagIgnoreCase = WbemComparisonFlagEnum.wbemComparisonFlagIgnoreCase;
pub const wbemComparisonFlagIgnoreFlavor = WbemComparisonFlagEnum.wbemComparisonFlagIgnoreFlavor;

pub const WbemCimtypeEnum = extern enum(i32) {
    wbemCimtypeSint8 = 16,
    wbemCimtypeUint8 = 17,
    wbemCimtypeSint16 = 2,
    wbemCimtypeUint16 = 18,
    wbemCimtypeSint32 = 3,
    wbemCimtypeUint32 = 19,
    wbemCimtypeSint64 = 20,
    wbemCimtypeUint64 = 21,
    wbemCimtypeReal32 = 4,
    wbemCimtypeReal64 = 5,
    wbemCimtypeBoolean = 11,
    wbemCimtypeString = 8,
    wbemCimtypeDatetime = 101,
    wbemCimtypeReference = 102,
    wbemCimtypeChar16 = 103,
    wbemCimtypeObject = 13,
};
pub const wbemCimtypeSint8 = WbemCimtypeEnum.wbemCimtypeSint8;
pub const wbemCimtypeUint8 = WbemCimtypeEnum.wbemCimtypeUint8;
pub const wbemCimtypeSint16 = WbemCimtypeEnum.wbemCimtypeSint16;
pub const wbemCimtypeUint16 = WbemCimtypeEnum.wbemCimtypeUint16;
pub const wbemCimtypeSint32 = WbemCimtypeEnum.wbemCimtypeSint32;
pub const wbemCimtypeUint32 = WbemCimtypeEnum.wbemCimtypeUint32;
pub const wbemCimtypeSint64 = WbemCimtypeEnum.wbemCimtypeSint64;
pub const wbemCimtypeUint64 = WbemCimtypeEnum.wbemCimtypeUint64;
pub const wbemCimtypeReal32 = WbemCimtypeEnum.wbemCimtypeReal32;
pub const wbemCimtypeReal64 = WbemCimtypeEnum.wbemCimtypeReal64;
pub const wbemCimtypeBoolean = WbemCimtypeEnum.wbemCimtypeBoolean;
pub const wbemCimtypeString = WbemCimtypeEnum.wbemCimtypeString;
pub const wbemCimtypeDatetime = WbemCimtypeEnum.wbemCimtypeDatetime;
pub const wbemCimtypeReference = WbemCimtypeEnum.wbemCimtypeReference;
pub const wbemCimtypeChar16 = WbemCimtypeEnum.wbemCimtypeChar16;
pub const wbemCimtypeObject = WbemCimtypeEnum.wbemCimtypeObject;

pub const WbemErrorEnum = extern enum(i32) {
    wbemNoErr = 0,
    wbemErrFailed = -2147217407,
    wbemErrNotFound = -2147217406,
    wbemErrAccessDenied = -2147217405,
    wbemErrProviderFailure = -2147217404,
    wbemErrTypeMismatch = -2147217403,
    wbemErrOutOfMemory = -2147217402,
    wbemErrInvalidContext = -2147217401,
    wbemErrInvalidParameter = -2147217400,
    wbemErrNotAvailable = -2147217399,
    wbemErrCriticalError = -2147217398,
    wbemErrInvalidStream = -2147217397,
    wbemErrNotSupported = -2147217396,
    wbemErrInvalidSuperclass = -2147217395,
    wbemErrInvalidNamespace = -2147217394,
    wbemErrInvalidObject = -2147217393,
    wbemErrInvalidClass = -2147217392,
    wbemErrProviderNotFound = -2147217391,
    wbemErrInvalidProviderRegistration = -2147217390,
    wbemErrProviderLoadFailure = -2147217389,
    wbemErrInitializationFailure = -2147217388,
    wbemErrTransportFailure = -2147217387,
    wbemErrInvalidOperation = -2147217386,
    wbemErrInvalidQuery = -2147217385,
    wbemErrInvalidQueryType = -2147217384,
    wbemErrAlreadyExists = -2147217383,
    wbemErrOverrideNotAllowed = -2147217382,
    wbemErrPropagatedQualifier = -2147217381,
    wbemErrPropagatedProperty = -2147217380,
    wbemErrUnexpected = -2147217379,
    wbemErrIllegalOperation = -2147217378,
    wbemErrCannotBeKey = -2147217377,
    wbemErrIncompleteClass = -2147217376,
    wbemErrInvalidSyntax = -2147217375,
    wbemErrNondecoratedObject = -2147217374,
    wbemErrReadOnly = -2147217373,
    wbemErrProviderNotCapable = -2147217372,
    wbemErrClassHasChildren = -2147217371,
    wbemErrClassHasInstances = -2147217370,
    wbemErrQueryNotImplemented = -2147217369,
    wbemErrIllegalNull = -2147217368,
    wbemErrInvalidQualifierType = -2147217367,
    wbemErrInvalidPropertyType = -2147217366,
    wbemErrValueOutOfRange = -2147217365,
    wbemErrCannotBeSingleton = -2147217364,
    wbemErrInvalidCimType = -2147217363,
    wbemErrInvalidMethod = -2147217362,
    wbemErrInvalidMethodParameters = -2147217361,
    wbemErrSystemProperty = -2147217360,
    wbemErrInvalidProperty = -2147217359,
    wbemErrCallCancelled = -2147217358,
    wbemErrShuttingDown = -2147217357,
    wbemErrPropagatedMethod = -2147217356,
    wbemErrUnsupportedParameter = -2147217355,
    wbemErrMissingParameter = -2147217354,
    wbemErrInvalidParameterId = -2147217353,
    wbemErrNonConsecutiveParameterIds = -2147217352,
    wbemErrParameterIdOnRetval = -2147217351,
    wbemErrInvalidObjectPath = -2147217350,
    wbemErrOutOfDiskSpace = -2147217349,
    wbemErrBufferTooSmall = -2147217348,
    wbemErrUnsupportedPutExtension = -2147217347,
    wbemErrUnknownObjectType = -2147217346,
    wbemErrUnknownPacketType = -2147217345,
    wbemErrMarshalVersionMismatch = -2147217344,
    wbemErrMarshalInvalidSignature = -2147217343,
    wbemErrInvalidQualifier = -2147217342,
    wbemErrInvalidDuplicateParameter = -2147217341,
    wbemErrTooMuchData = -2147217340,
    wbemErrServerTooBusy = -2147217339,
    wbemErrInvalidFlavor = -2147217338,
    wbemErrCircularReference = -2147217337,
    wbemErrUnsupportedClassUpdate = -2147217336,
    wbemErrCannotChangeKeyInheritance = -2147217335,
    wbemErrCannotChangeIndexInheritance = -2147217328,
    wbemErrTooManyProperties = -2147217327,
    wbemErrUpdateTypeMismatch = -2147217326,
    wbemErrUpdateOverrideNotAllowed = -2147217325,
    wbemErrUpdatePropagatedMethod = -2147217324,
    wbemErrMethodNotImplemented = -2147217323,
    wbemErrMethodDisabled = -2147217322,
    wbemErrRefresherBusy = -2147217321,
    wbemErrUnparsableQuery = -2147217320,
    wbemErrNotEventClass = -2147217319,
    wbemErrMissingGroupWithin = -2147217318,
    wbemErrMissingAggregationList = -2147217317,
    wbemErrPropertyNotAnObject = -2147217316,
    wbemErrAggregatingByObject = -2147217315,
    wbemErrUninterpretableProviderQuery = -2147217313,
    wbemErrBackupRestoreWinmgmtRunning = -2147217312,
    wbemErrQueueOverflow = -2147217311,
    wbemErrPrivilegeNotHeld = -2147217310,
    wbemErrInvalidOperator = -2147217309,
    wbemErrLocalCredentials = -2147217308,
    wbemErrCannotBeAbstract = -2147217307,
    wbemErrAmendedObject = -2147217306,
    wbemErrClientTooSlow = -2147217305,
    wbemErrNullSecurityDescriptor = -2147217304,
    wbemErrTimeout = -2147217303,
    wbemErrInvalidAssociation = -2147217302,
    wbemErrAmbiguousOperation = -2147217301,
    wbemErrQuotaViolation = -2147217300,
    wbemErrTransactionConflict = -2147217299,
    wbemErrForcedRollback = -2147217298,
    wbemErrUnsupportedLocale = -2147217297,
    wbemErrHandleOutOfDate = -2147217296,
    wbemErrConnectionFailed = -2147217295,
    wbemErrInvalidHandleRequest = -2147217294,
    wbemErrPropertyNameTooWide = -2147217293,
    wbemErrClassNameTooWide = -2147217292,
    wbemErrMethodNameTooWide = -2147217291,
    wbemErrQualifierNameTooWide = -2147217290,
    wbemErrRerunCommand = -2147217289,
    wbemErrDatabaseVerMismatch = -2147217288,
    wbemErrVetoPut = -2147217287,
    wbemErrVetoDelete = -2147217286,
    wbemErrInvalidLocale = -2147217280,
    wbemErrProviderSuspended = -2147217279,
    wbemErrSynchronizationRequired = -2147217278,
    wbemErrNoSchema = -2147217277,
    wbemErrProviderAlreadyRegistered = -2147217276,
    wbemErrProviderNotRegistered = -2147217275,
    wbemErrFatalTransportError = -2147217274,
    wbemErrEncryptedConnectionRequired = -2147217273,
    wbemErrRegistrationTooBroad = -2147213311,
    wbemErrRegistrationTooPrecise = -2147213310,
    wbemErrTimedout = -2147209215,
    wbemErrResetToDefault = -2147209214,
};
pub const wbemNoErr = WbemErrorEnum.wbemNoErr;
pub const wbemErrFailed = WbemErrorEnum.wbemErrFailed;
pub const wbemErrNotFound = WbemErrorEnum.wbemErrNotFound;
pub const wbemErrAccessDenied = WbemErrorEnum.wbemErrAccessDenied;
pub const wbemErrProviderFailure = WbemErrorEnum.wbemErrProviderFailure;
pub const wbemErrTypeMismatch = WbemErrorEnum.wbemErrTypeMismatch;
pub const wbemErrOutOfMemory = WbemErrorEnum.wbemErrOutOfMemory;
pub const wbemErrInvalidContext = WbemErrorEnum.wbemErrInvalidContext;
pub const wbemErrInvalidParameter = WbemErrorEnum.wbemErrInvalidParameter;
pub const wbemErrNotAvailable = WbemErrorEnum.wbemErrNotAvailable;
pub const wbemErrCriticalError = WbemErrorEnum.wbemErrCriticalError;
pub const wbemErrInvalidStream = WbemErrorEnum.wbemErrInvalidStream;
pub const wbemErrNotSupported = WbemErrorEnum.wbemErrNotSupported;
pub const wbemErrInvalidSuperclass = WbemErrorEnum.wbemErrInvalidSuperclass;
pub const wbemErrInvalidNamespace = WbemErrorEnum.wbemErrInvalidNamespace;
pub const wbemErrInvalidObject = WbemErrorEnum.wbemErrInvalidObject;
pub const wbemErrInvalidClass = WbemErrorEnum.wbemErrInvalidClass;
pub const wbemErrProviderNotFound = WbemErrorEnum.wbemErrProviderNotFound;
pub const wbemErrInvalidProviderRegistration = WbemErrorEnum.wbemErrInvalidProviderRegistration;
pub const wbemErrProviderLoadFailure = WbemErrorEnum.wbemErrProviderLoadFailure;
pub const wbemErrInitializationFailure = WbemErrorEnum.wbemErrInitializationFailure;
pub const wbemErrTransportFailure = WbemErrorEnum.wbemErrTransportFailure;
pub const wbemErrInvalidOperation = WbemErrorEnum.wbemErrInvalidOperation;
pub const wbemErrInvalidQuery = WbemErrorEnum.wbemErrInvalidQuery;
pub const wbemErrInvalidQueryType = WbemErrorEnum.wbemErrInvalidQueryType;
pub const wbemErrAlreadyExists = WbemErrorEnum.wbemErrAlreadyExists;
pub const wbemErrOverrideNotAllowed = WbemErrorEnum.wbemErrOverrideNotAllowed;
pub const wbemErrPropagatedQualifier = WbemErrorEnum.wbemErrPropagatedQualifier;
pub const wbemErrPropagatedProperty = WbemErrorEnum.wbemErrPropagatedProperty;
pub const wbemErrUnexpected = WbemErrorEnum.wbemErrUnexpected;
pub const wbemErrIllegalOperation = WbemErrorEnum.wbemErrIllegalOperation;
pub const wbemErrCannotBeKey = WbemErrorEnum.wbemErrCannotBeKey;
pub const wbemErrIncompleteClass = WbemErrorEnum.wbemErrIncompleteClass;
pub const wbemErrInvalidSyntax = WbemErrorEnum.wbemErrInvalidSyntax;
pub const wbemErrNondecoratedObject = WbemErrorEnum.wbemErrNondecoratedObject;
pub const wbemErrReadOnly = WbemErrorEnum.wbemErrReadOnly;
pub const wbemErrProviderNotCapable = WbemErrorEnum.wbemErrProviderNotCapable;
pub const wbemErrClassHasChildren = WbemErrorEnum.wbemErrClassHasChildren;
pub const wbemErrClassHasInstances = WbemErrorEnum.wbemErrClassHasInstances;
pub const wbemErrQueryNotImplemented = WbemErrorEnum.wbemErrQueryNotImplemented;
pub const wbemErrIllegalNull = WbemErrorEnum.wbemErrIllegalNull;
pub const wbemErrInvalidQualifierType = WbemErrorEnum.wbemErrInvalidQualifierType;
pub const wbemErrInvalidPropertyType = WbemErrorEnum.wbemErrInvalidPropertyType;
pub const wbemErrValueOutOfRange = WbemErrorEnum.wbemErrValueOutOfRange;
pub const wbemErrCannotBeSingleton = WbemErrorEnum.wbemErrCannotBeSingleton;
pub const wbemErrInvalidCimType = WbemErrorEnum.wbemErrInvalidCimType;
pub const wbemErrInvalidMethod = WbemErrorEnum.wbemErrInvalidMethod;
pub const wbemErrInvalidMethodParameters = WbemErrorEnum.wbemErrInvalidMethodParameters;
pub const wbemErrSystemProperty = WbemErrorEnum.wbemErrSystemProperty;
pub const wbemErrInvalidProperty = WbemErrorEnum.wbemErrInvalidProperty;
pub const wbemErrCallCancelled = WbemErrorEnum.wbemErrCallCancelled;
pub const wbemErrShuttingDown = WbemErrorEnum.wbemErrShuttingDown;
pub const wbemErrPropagatedMethod = WbemErrorEnum.wbemErrPropagatedMethod;
pub const wbemErrUnsupportedParameter = WbemErrorEnum.wbemErrUnsupportedParameter;
pub const wbemErrMissingParameter = WbemErrorEnum.wbemErrMissingParameter;
pub const wbemErrInvalidParameterId = WbemErrorEnum.wbemErrInvalidParameterId;
pub const wbemErrNonConsecutiveParameterIds = WbemErrorEnum.wbemErrNonConsecutiveParameterIds;
pub const wbemErrParameterIdOnRetval = WbemErrorEnum.wbemErrParameterIdOnRetval;
pub const wbemErrInvalidObjectPath = WbemErrorEnum.wbemErrInvalidObjectPath;
pub const wbemErrOutOfDiskSpace = WbemErrorEnum.wbemErrOutOfDiskSpace;
pub const wbemErrBufferTooSmall = WbemErrorEnum.wbemErrBufferTooSmall;
pub const wbemErrUnsupportedPutExtension = WbemErrorEnum.wbemErrUnsupportedPutExtension;
pub const wbemErrUnknownObjectType = WbemErrorEnum.wbemErrUnknownObjectType;
pub const wbemErrUnknownPacketType = WbemErrorEnum.wbemErrUnknownPacketType;
pub const wbemErrMarshalVersionMismatch = WbemErrorEnum.wbemErrMarshalVersionMismatch;
pub const wbemErrMarshalInvalidSignature = WbemErrorEnum.wbemErrMarshalInvalidSignature;
pub const wbemErrInvalidQualifier = WbemErrorEnum.wbemErrInvalidQualifier;
pub const wbemErrInvalidDuplicateParameter = WbemErrorEnum.wbemErrInvalidDuplicateParameter;
pub const wbemErrTooMuchData = WbemErrorEnum.wbemErrTooMuchData;
pub const wbemErrServerTooBusy = WbemErrorEnum.wbemErrServerTooBusy;
pub const wbemErrInvalidFlavor = WbemErrorEnum.wbemErrInvalidFlavor;
pub const wbemErrCircularReference = WbemErrorEnum.wbemErrCircularReference;
pub const wbemErrUnsupportedClassUpdate = WbemErrorEnum.wbemErrUnsupportedClassUpdate;
pub const wbemErrCannotChangeKeyInheritance = WbemErrorEnum.wbemErrCannotChangeKeyInheritance;
pub const wbemErrCannotChangeIndexInheritance = WbemErrorEnum.wbemErrCannotChangeIndexInheritance;
pub const wbemErrTooManyProperties = WbemErrorEnum.wbemErrTooManyProperties;
pub const wbemErrUpdateTypeMismatch = WbemErrorEnum.wbemErrUpdateTypeMismatch;
pub const wbemErrUpdateOverrideNotAllowed = WbemErrorEnum.wbemErrUpdateOverrideNotAllowed;
pub const wbemErrUpdatePropagatedMethod = WbemErrorEnum.wbemErrUpdatePropagatedMethod;
pub const wbemErrMethodNotImplemented = WbemErrorEnum.wbemErrMethodNotImplemented;
pub const wbemErrMethodDisabled = WbemErrorEnum.wbemErrMethodDisabled;
pub const wbemErrRefresherBusy = WbemErrorEnum.wbemErrRefresherBusy;
pub const wbemErrUnparsableQuery = WbemErrorEnum.wbemErrUnparsableQuery;
pub const wbemErrNotEventClass = WbemErrorEnum.wbemErrNotEventClass;
pub const wbemErrMissingGroupWithin = WbemErrorEnum.wbemErrMissingGroupWithin;
pub const wbemErrMissingAggregationList = WbemErrorEnum.wbemErrMissingAggregationList;
pub const wbemErrPropertyNotAnObject = WbemErrorEnum.wbemErrPropertyNotAnObject;
pub const wbemErrAggregatingByObject = WbemErrorEnum.wbemErrAggregatingByObject;
pub const wbemErrUninterpretableProviderQuery = WbemErrorEnum.wbemErrUninterpretableProviderQuery;
pub const wbemErrBackupRestoreWinmgmtRunning = WbemErrorEnum.wbemErrBackupRestoreWinmgmtRunning;
pub const wbemErrQueueOverflow = WbemErrorEnum.wbemErrQueueOverflow;
pub const wbemErrPrivilegeNotHeld = WbemErrorEnum.wbemErrPrivilegeNotHeld;
pub const wbemErrInvalidOperator = WbemErrorEnum.wbemErrInvalidOperator;
pub const wbemErrLocalCredentials = WbemErrorEnum.wbemErrLocalCredentials;
pub const wbemErrCannotBeAbstract = WbemErrorEnum.wbemErrCannotBeAbstract;
pub const wbemErrAmendedObject = WbemErrorEnum.wbemErrAmendedObject;
pub const wbemErrClientTooSlow = WbemErrorEnum.wbemErrClientTooSlow;
pub const wbemErrNullSecurityDescriptor = WbemErrorEnum.wbemErrNullSecurityDescriptor;
pub const wbemErrTimeout = WbemErrorEnum.wbemErrTimeout;
pub const wbemErrInvalidAssociation = WbemErrorEnum.wbemErrInvalidAssociation;
pub const wbemErrAmbiguousOperation = WbemErrorEnum.wbemErrAmbiguousOperation;
pub const wbemErrQuotaViolation = WbemErrorEnum.wbemErrQuotaViolation;
pub const wbemErrTransactionConflict = WbemErrorEnum.wbemErrTransactionConflict;
pub const wbemErrForcedRollback = WbemErrorEnum.wbemErrForcedRollback;
pub const wbemErrUnsupportedLocale = WbemErrorEnum.wbemErrUnsupportedLocale;
pub const wbemErrHandleOutOfDate = WbemErrorEnum.wbemErrHandleOutOfDate;
pub const wbemErrConnectionFailed = WbemErrorEnum.wbemErrConnectionFailed;
pub const wbemErrInvalidHandleRequest = WbemErrorEnum.wbemErrInvalidHandleRequest;
pub const wbemErrPropertyNameTooWide = WbemErrorEnum.wbemErrPropertyNameTooWide;
pub const wbemErrClassNameTooWide = WbemErrorEnum.wbemErrClassNameTooWide;
pub const wbemErrMethodNameTooWide = WbemErrorEnum.wbemErrMethodNameTooWide;
pub const wbemErrQualifierNameTooWide = WbemErrorEnum.wbemErrQualifierNameTooWide;
pub const wbemErrRerunCommand = WbemErrorEnum.wbemErrRerunCommand;
pub const wbemErrDatabaseVerMismatch = WbemErrorEnum.wbemErrDatabaseVerMismatch;
pub const wbemErrVetoPut = WbemErrorEnum.wbemErrVetoPut;
pub const wbemErrVetoDelete = WbemErrorEnum.wbemErrVetoDelete;
pub const wbemErrInvalidLocale = WbemErrorEnum.wbemErrInvalidLocale;
pub const wbemErrProviderSuspended = WbemErrorEnum.wbemErrProviderSuspended;
pub const wbemErrSynchronizationRequired = WbemErrorEnum.wbemErrSynchronizationRequired;
pub const wbemErrNoSchema = WbemErrorEnum.wbemErrNoSchema;
pub const wbemErrProviderAlreadyRegistered = WbemErrorEnum.wbemErrProviderAlreadyRegistered;
pub const wbemErrProviderNotRegistered = WbemErrorEnum.wbemErrProviderNotRegistered;
pub const wbemErrFatalTransportError = WbemErrorEnum.wbemErrFatalTransportError;
pub const wbemErrEncryptedConnectionRequired = WbemErrorEnum.wbemErrEncryptedConnectionRequired;
pub const wbemErrRegistrationTooBroad = WbemErrorEnum.wbemErrRegistrationTooBroad;
pub const wbemErrRegistrationTooPrecise = WbemErrorEnum.wbemErrRegistrationTooPrecise;
pub const wbemErrTimedout = WbemErrorEnum.wbemErrTimedout;
pub const wbemErrResetToDefault = WbemErrorEnum.wbemErrResetToDefault;

pub const WbemAuthenticationLevelEnum = extern enum(i32) {
    wbemAuthenticationLevelDefault = 0,
    wbemAuthenticationLevelNone = 1,
    wbemAuthenticationLevelConnect = 2,
    wbemAuthenticationLevelCall = 3,
    wbemAuthenticationLevelPkt = 4,
    wbemAuthenticationLevelPktIntegrity = 5,
    wbemAuthenticationLevelPktPrivacy = 6,
};
pub const wbemAuthenticationLevelDefault = WbemAuthenticationLevelEnum.wbemAuthenticationLevelDefault;
pub const wbemAuthenticationLevelNone = WbemAuthenticationLevelEnum.wbemAuthenticationLevelNone;
pub const wbemAuthenticationLevelConnect = WbemAuthenticationLevelEnum.wbemAuthenticationLevelConnect;
pub const wbemAuthenticationLevelCall = WbemAuthenticationLevelEnum.wbemAuthenticationLevelCall;
pub const wbemAuthenticationLevelPkt = WbemAuthenticationLevelEnum.wbemAuthenticationLevelPkt;
pub const wbemAuthenticationLevelPktIntegrity = WbemAuthenticationLevelEnum.wbemAuthenticationLevelPktIntegrity;
pub const wbemAuthenticationLevelPktPrivacy = WbemAuthenticationLevelEnum.wbemAuthenticationLevelPktPrivacy;

pub const WbemImpersonationLevelEnum = extern enum(i32) {
    wbemImpersonationLevelAnonymous = 1,
    wbemImpersonationLevelIdentify = 2,
    wbemImpersonationLevelImpersonate = 3,
    wbemImpersonationLevelDelegate = 4,
};
pub const wbemImpersonationLevelAnonymous = WbemImpersonationLevelEnum.wbemImpersonationLevelAnonymous;
pub const wbemImpersonationLevelIdentify = WbemImpersonationLevelEnum.wbemImpersonationLevelIdentify;
pub const wbemImpersonationLevelImpersonate = WbemImpersonationLevelEnum.wbemImpersonationLevelImpersonate;
pub const wbemImpersonationLevelDelegate = WbemImpersonationLevelEnum.wbemImpersonationLevelDelegate;

pub const WbemPrivilegeEnum = extern enum(i32) {
    wbemPrivilegeCreateToken = 1,
    wbemPrivilegePrimaryToken = 2,
    wbemPrivilegeLockMemory = 3,
    wbemPrivilegeIncreaseQuota = 4,
    wbemPrivilegeMachineAccount = 5,
    wbemPrivilegeTcb = 6,
    wbemPrivilegeSecurity = 7,
    wbemPrivilegeTakeOwnership = 8,
    wbemPrivilegeLoadDriver = 9,
    wbemPrivilegeSystemProfile = 10,
    wbemPrivilegeSystemtime = 11,
    wbemPrivilegeProfileSingleProcess = 12,
    wbemPrivilegeIncreaseBasePriority = 13,
    wbemPrivilegeCreatePagefile = 14,
    wbemPrivilegeCreatePermanent = 15,
    wbemPrivilegeBackup = 16,
    wbemPrivilegeRestore = 17,
    wbemPrivilegeShutdown = 18,
    wbemPrivilegeDebug = 19,
    wbemPrivilegeAudit = 20,
    wbemPrivilegeSystemEnvironment = 21,
    wbemPrivilegeChangeNotify = 22,
    wbemPrivilegeRemoteShutdown = 23,
    wbemPrivilegeUndock = 24,
    wbemPrivilegeSyncAgent = 25,
    wbemPrivilegeEnableDelegation = 26,
    wbemPrivilegeManageVolume = 27,
};
pub const wbemPrivilegeCreateToken = WbemPrivilegeEnum.wbemPrivilegeCreateToken;
pub const wbemPrivilegePrimaryToken = WbemPrivilegeEnum.wbemPrivilegePrimaryToken;
pub const wbemPrivilegeLockMemory = WbemPrivilegeEnum.wbemPrivilegeLockMemory;
pub const wbemPrivilegeIncreaseQuota = WbemPrivilegeEnum.wbemPrivilegeIncreaseQuota;
pub const wbemPrivilegeMachineAccount = WbemPrivilegeEnum.wbemPrivilegeMachineAccount;
pub const wbemPrivilegeTcb = WbemPrivilegeEnum.wbemPrivilegeTcb;
pub const wbemPrivilegeSecurity = WbemPrivilegeEnum.wbemPrivilegeSecurity;
pub const wbemPrivilegeTakeOwnership = WbemPrivilegeEnum.wbemPrivilegeTakeOwnership;
pub const wbemPrivilegeLoadDriver = WbemPrivilegeEnum.wbemPrivilegeLoadDriver;
pub const wbemPrivilegeSystemProfile = WbemPrivilegeEnum.wbemPrivilegeSystemProfile;
pub const wbemPrivilegeSystemtime = WbemPrivilegeEnum.wbemPrivilegeSystemtime;
pub const wbemPrivilegeProfileSingleProcess = WbemPrivilegeEnum.wbemPrivilegeProfileSingleProcess;
pub const wbemPrivilegeIncreaseBasePriority = WbemPrivilegeEnum.wbemPrivilegeIncreaseBasePriority;
pub const wbemPrivilegeCreatePagefile = WbemPrivilegeEnum.wbemPrivilegeCreatePagefile;
pub const wbemPrivilegeCreatePermanent = WbemPrivilegeEnum.wbemPrivilegeCreatePermanent;
pub const wbemPrivilegeBackup = WbemPrivilegeEnum.wbemPrivilegeBackup;
pub const wbemPrivilegeRestore = WbemPrivilegeEnum.wbemPrivilegeRestore;
pub const wbemPrivilegeShutdown = WbemPrivilegeEnum.wbemPrivilegeShutdown;
pub const wbemPrivilegeDebug = WbemPrivilegeEnum.wbemPrivilegeDebug;
pub const wbemPrivilegeAudit = WbemPrivilegeEnum.wbemPrivilegeAudit;
pub const wbemPrivilegeSystemEnvironment = WbemPrivilegeEnum.wbemPrivilegeSystemEnvironment;
pub const wbemPrivilegeChangeNotify = WbemPrivilegeEnum.wbemPrivilegeChangeNotify;
pub const wbemPrivilegeRemoteShutdown = WbemPrivilegeEnum.wbemPrivilegeRemoteShutdown;
pub const wbemPrivilegeUndock = WbemPrivilegeEnum.wbemPrivilegeUndock;
pub const wbemPrivilegeSyncAgent = WbemPrivilegeEnum.wbemPrivilegeSyncAgent;
pub const wbemPrivilegeEnableDelegation = WbemPrivilegeEnum.wbemPrivilegeEnableDelegation;
pub const wbemPrivilegeManageVolume = WbemPrivilegeEnum.wbemPrivilegeManageVolume;

pub const WbemObjectTextFormatEnum = extern enum(i32) {
    wbemObjectTextFormatCIMDTD20 = 1,
    wbemObjectTextFormatWMIDTD20 = 2,
};
pub const wbemObjectTextFormatCIMDTD20 = WbemObjectTextFormatEnum.wbemObjectTextFormatCIMDTD20;
pub const wbemObjectTextFormatWMIDTD20 = WbemObjectTextFormatEnum.wbemObjectTextFormatWMIDTD20;

pub const WbemConnectOptionsEnum = extern enum(i32) {
    wbemConnectFlagUseMaxWait = 128,
};
pub const wbemConnectFlagUseMaxWait = WbemConnectOptionsEnum.wbemConnectFlagUseMaxWait;

const IID_ISWbemServices_Value = @import("../zig.zig").Guid.initString("76A6415C-CB41-11D1-8B02-00600806D9B6");
pub const IID_ISWbemServices = &IID_ISWbemServices_Value;
pub const ISWbemServices = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Get: fn(
            self: *const ISWbemServices,
            strObjectPath: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemObject: **ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAsync: fn(
            self: *const ISWbemServices,
            objWbemSink: *IDispatch,
            strObjectPath: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemAsyncContext: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: fn(
            self: *const ISWbemServices,
            strObjectPath: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAsync: fn(
            self: *const ISWbemServices,
            objWbemSink: *IDispatch,
            strObjectPath: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemAsyncContext: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstancesOf: fn(
            self: *const ISWbemServices,
            strClass: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemObjectSet: **ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstancesOfAsync: fn(
            self: *const ISWbemServices,
            objWbemSink: *IDispatch,
            strClass: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemAsyncContext: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SubclassesOf: fn(
            self: *const ISWbemServices,
            strSuperclass: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemObjectSet: **ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SubclassesOfAsync: fn(
            self: *const ISWbemServices,
            objWbemSink: *IDispatch,
            strSuperclass: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemAsyncContext: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecQuery: fn(
            self: *const ISWbemServices,
            strQuery: BSTR,
            strQueryLanguage: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemObjectSet: **ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecQueryAsync: fn(
            self: *const ISWbemServices,
            objWbemSink: *IDispatch,
            strQuery: BSTR,
            strQueryLanguage: BSTR,
            lFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemAsyncContext: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AssociatorsOf: fn(
            self: *const ISWbemServices,
            strObjectPath: BSTR,
            strAssocClass: BSTR,
            strResultClass: BSTR,
            strResultRole: BSTR,
            strRole: BSTR,
            bClassesOnly: i16,
            bSchemaOnly: i16,
            strRequiredAssocQualifier: BSTR,
            strRequiredQualifier: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemObjectSet: **ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AssociatorsOfAsync: fn(
            self: *const ISWbemServices,
            objWbemSink: *IDispatch,
            strObjectPath: BSTR,
            strAssocClass: BSTR,
            strResultClass: BSTR,
            strResultRole: BSTR,
            strRole: BSTR,
            bClassesOnly: i16,
            bSchemaOnly: i16,
            strRequiredAssocQualifier: BSTR,
            strRequiredQualifier: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemAsyncContext: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReferencesTo: fn(
            self: *const ISWbemServices,
            strObjectPath: BSTR,
            strResultClass: BSTR,
            strRole: BSTR,
            bClassesOnly: i16,
            bSchemaOnly: i16,
            strRequiredQualifier: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemObjectSet: **ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReferencesToAsync: fn(
            self: *const ISWbemServices,
            objWbemSink: *IDispatch,
            strObjectPath: BSTR,
            strResultClass: BSTR,
            strRole: BSTR,
            bClassesOnly: i16,
            bSchemaOnly: i16,
            strRequiredQualifier: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemAsyncContext: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecNotificationQuery: fn(
            self: *const ISWbemServices,
            strQuery: BSTR,
            strQueryLanguage: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemEventSource: **ISWbemEventSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecNotificationQueryAsync: fn(
            self: *const ISWbemServices,
            objWbemSink: *IDispatch,
            strQuery: BSTR,
            strQueryLanguage: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemAsyncContext: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecMethod: fn(
            self: *const ISWbemServices,
            strObjectPath: BSTR,
            strMethodName: BSTR,
            objWbemInParameters: *IDispatch,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemOutParameters: **ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecMethodAsync: fn(
            self: *const ISWbemServices,
            objWbemSink: *IDispatch,
            strObjectPath: BSTR,
            strMethodName: BSTR,
            objWbemInParameters: *IDispatch,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemAsyncContext: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Security_: fn(
            self: *const ISWbemServices,
            objWbemSecurity: **ISWbemSecurity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_Get(self: *const T, strObjectPath: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemObject: **ISWbemObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).Get(@ptrCast(*const ISWbemServices, self), strObjectPath, iFlags, objWbemNamedValueSet, objWbemObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_GetAsync(self: *const T, objWbemSink: *IDispatch, strObjectPath: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemAsyncContext: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).GetAsync(@ptrCast(*const ISWbemServices, self), objWbemSink, strObjectPath, iFlags, objWbemNamedValueSet, objWbemAsyncContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_Delete(self: *const T, strObjectPath: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).Delete(@ptrCast(*const ISWbemServices, self), strObjectPath, iFlags, objWbemNamedValueSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_DeleteAsync(self: *const T, objWbemSink: *IDispatch, strObjectPath: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemAsyncContext: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).DeleteAsync(@ptrCast(*const ISWbemServices, self), objWbemSink, strObjectPath, iFlags, objWbemNamedValueSet, objWbemAsyncContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_InstancesOf(self: *const T, strClass: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemObjectSet: **ISWbemObjectSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).InstancesOf(@ptrCast(*const ISWbemServices, self), strClass, iFlags, objWbemNamedValueSet, objWbemObjectSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_InstancesOfAsync(self: *const T, objWbemSink: *IDispatch, strClass: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemAsyncContext: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).InstancesOfAsync(@ptrCast(*const ISWbemServices, self), objWbemSink, strClass, iFlags, objWbemNamedValueSet, objWbemAsyncContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_SubclassesOf(self: *const T, strSuperclass: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemObjectSet: **ISWbemObjectSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).SubclassesOf(@ptrCast(*const ISWbemServices, self), strSuperclass, iFlags, objWbemNamedValueSet, objWbemObjectSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_SubclassesOfAsync(self: *const T, objWbemSink: *IDispatch, strSuperclass: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemAsyncContext: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).SubclassesOfAsync(@ptrCast(*const ISWbemServices, self), objWbemSink, strSuperclass, iFlags, objWbemNamedValueSet, objWbemAsyncContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_ExecQuery(self: *const T, strQuery: BSTR, strQueryLanguage: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemObjectSet: **ISWbemObjectSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).ExecQuery(@ptrCast(*const ISWbemServices, self), strQuery, strQueryLanguage, iFlags, objWbemNamedValueSet, objWbemObjectSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_ExecQueryAsync(self: *const T, objWbemSink: *IDispatch, strQuery: BSTR, strQueryLanguage: BSTR, lFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemAsyncContext: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).ExecQueryAsync(@ptrCast(*const ISWbemServices, self), objWbemSink, strQuery, strQueryLanguage, lFlags, objWbemNamedValueSet, objWbemAsyncContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_AssociatorsOf(self: *const T, strObjectPath: BSTR, strAssocClass: BSTR, strResultClass: BSTR, strResultRole: BSTR, strRole: BSTR, bClassesOnly: i16, bSchemaOnly: i16, strRequiredAssocQualifier: BSTR, strRequiredQualifier: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemObjectSet: **ISWbemObjectSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).AssociatorsOf(@ptrCast(*const ISWbemServices, self), strObjectPath, strAssocClass, strResultClass, strResultRole, strRole, bClassesOnly, bSchemaOnly, strRequiredAssocQualifier, strRequiredQualifier, iFlags, objWbemNamedValueSet, objWbemObjectSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_AssociatorsOfAsync(self: *const T, objWbemSink: *IDispatch, strObjectPath: BSTR, strAssocClass: BSTR, strResultClass: BSTR, strResultRole: BSTR, strRole: BSTR, bClassesOnly: i16, bSchemaOnly: i16, strRequiredAssocQualifier: BSTR, strRequiredQualifier: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemAsyncContext: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).AssociatorsOfAsync(@ptrCast(*const ISWbemServices, self), objWbemSink, strObjectPath, strAssocClass, strResultClass, strResultRole, strRole, bClassesOnly, bSchemaOnly, strRequiredAssocQualifier, strRequiredQualifier, iFlags, objWbemNamedValueSet, objWbemAsyncContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_ReferencesTo(self: *const T, strObjectPath: BSTR, strResultClass: BSTR, strRole: BSTR, bClassesOnly: i16, bSchemaOnly: i16, strRequiredQualifier: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemObjectSet: **ISWbemObjectSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).ReferencesTo(@ptrCast(*const ISWbemServices, self), strObjectPath, strResultClass, strRole, bClassesOnly, bSchemaOnly, strRequiredQualifier, iFlags, objWbemNamedValueSet, objWbemObjectSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_ReferencesToAsync(self: *const T, objWbemSink: *IDispatch, strObjectPath: BSTR, strResultClass: BSTR, strRole: BSTR, bClassesOnly: i16, bSchemaOnly: i16, strRequiredQualifier: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemAsyncContext: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).ReferencesToAsync(@ptrCast(*const ISWbemServices, self), objWbemSink, strObjectPath, strResultClass, strRole, bClassesOnly, bSchemaOnly, strRequiredQualifier, iFlags, objWbemNamedValueSet, objWbemAsyncContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_ExecNotificationQuery(self: *const T, strQuery: BSTR, strQueryLanguage: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemEventSource: **ISWbemEventSource) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).ExecNotificationQuery(@ptrCast(*const ISWbemServices, self), strQuery, strQueryLanguage, iFlags, objWbemNamedValueSet, objWbemEventSource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_ExecNotificationQueryAsync(self: *const T, objWbemSink: *IDispatch, strQuery: BSTR, strQueryLanguage: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemAsyncContext: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).ExecNotificationQueryAsync(@ptrCast(*const ISWbemServices, self), objWbemSink, strQuery, strQueryLanguage, iFlags, objWbemNamedValueSet, objWbemAsyncContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_ExecMethod(self: *const T, strObjectPath: BSTR, strMethodName: BSTR, objWbemInParameters: *IDispatch, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemOutParameters: **ISWbemObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).ExecMethod(@ptrCast(*const ISWbemServices, self), strObjectPath, strMethodName, objWbemInParameters, iFlags, objWbemNamedValueSet, objWbemOutParameters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_ExecMethodAsync(self: *const T, objWbemSink: *IDispatch, strObjectPath: BSTR, strMethodName: BSTR, objWbemInParameters: *IDispatch, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemAsyncContext: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).ExecMethodAsync(@ptrCast(*const ISWbemServices, self), objWbemSink, strObjectPath, strMethodName, objWbemInParameters, iFlags, objWbemNamedValueSet, objWbemAsyncContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServices_get_Security_(self: *const T, objWbemSecurity: **ISWbemSecurity) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServices.VTable, self.vtable).get_Security_(@ptrCast(*const ISWbemServices, self), objWbemSecurity);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemLocator_Value = @import("../zig.zig").Guid.initString("76A6415B-CB41-11D1-8B02-00600806D9B6");
pub const IID_ISWbemLocator = &IID_ISWbemLocator_Value;
pub const ISWbemLocator = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        ConnectServer: fn(
            self: *const ISWbemLocator,
            strServer: BSTR,
            strNamespace: BSTR,
            strUser: BSTR,
            strPassword: BSTR,
            strLocale: BSTR,
            strAuthority: BSTR,
            iSecurityFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemServices: **ISWbemServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Security_: fn(
            self: *const ISWbemLocator,
            objWbemSecurity: **ISWbemSecurity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemLocator_ConnectServer(self: *const T, strServer: BSTR, strNamespace: BSTR, strUser: BSTR, strPassword: BSTR, strLocale: BSTR, strAuthority: BSTR, iSecurityFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemServices: **ISWbemServices) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemLocator.VTable, self.vtable).ConnectServer(@ptrCast(*const ISWbemLocator, self), strServer, strNamespace, strUser, strPassword, strLocale, strAuthority, iSecurityFlags, objWbemNamedValueSet, objWbemServices);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemLocator_get_Security_(self: *const T, objWbemSecurity: **ISWbemSecurity) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemLocator.VTable, self.vtable).get_Security_(@ptrCast(*const ISWbemLocator, self), objWbemSecurity);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemObject_Value = @import("../zig.zig").Guid.initString("76A6415A-CB41-11D1-8B02-00600806D9B6");
pub const IID_ISWbemObject = &IID_ISWbemObject_Value;
pub const ISWbemObject = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Put_: fn(
            self: *const ISWbemObject,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemObjectPath: **ISWbemObjectPath,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutAsync_: fn(
            self: *const ISWbemObject,
            objWbemSink: *IDispatch,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemAsyncContext: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete_: fn(
            self: *const ISWbemObject,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAsync_: fn(
            self: *const ISWbemObject,
            objWbemSink: *IDispatch,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemAsyncContext: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Instances_: fn(
            self: *const ISWbemObject,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemObjectSet: **ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstancesAsync_: fn(
            self: *const ISWbemObject,
            objWbemSink: *IDispatch,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemAsyncContext: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Subclasses_: fn(
            self: *const ISWbemObject,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemObjectSet: **ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SubclassesAsync_: fn(
            self: *const ISWbemObject,
            objWbemSink: *IDispatch,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemAsyncContext: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Associators_: fn(
            self: *const ISWbemObject,
            strAssocClass: BSTR,
            strResultClass: BSTR,
            strResultRole: BSTR,
            strRole: BSTR,
            bClassesOnly: i16,
            bSchemaOnly: i16,
            strRequiredAssocQualifier: BSTR,
            strRequiredQualifier: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemObjectSet: **ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AssociatorsAsync_: fn(
            self: *const ISWbemObject,
            objWbemSink: *IDispatch,
            strAssocClass: BSTR,
            strResultClass: BSTR,
            strResultRole: BSTR,
            strRole: BSTR,
            bClassesOnly: i16,
            bSchemaOnly: i16,
            strRequiredAssocQualifier: BSTR,
            strRequiredQualifier: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemAsyncContext: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        References_: fn(
            self: *const ISWbemObject,
            strResultClass: BSTR,
            strRole: BSTR,
            bClassesOnly: i16,
            bSchemaOnly: i16,
            strRequiredQualifier: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemObjectSet: **ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReferencesAsync_: fn(
            self: *const ISWbemObject,
            objWbemSink: *IDispatch,
            strResultClass: BSTR,
            strRole: BSTR,
            bClassesOnly: i16,
            bSchemaOnly: i16,
            strRequiredQualifier: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemAsyncContext: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecMethod_: fn(
            self: *const ISWbemObject,
            strMethodName: BSTR,
            objWbemInParameters: *IDispatch,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemOutParameters: **ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecMethodAsync_: fn(
            self: *const ISWbemObject,
            objWbemSink: *IDispatch,
            strMethodName: BSTR,
            objWbemInParameters: *IDispatch,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemAsyncContext: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone_: fn(
            self: *const ISWbemObject,
            objWbemObject: **ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectText_: fn(
            self: *const ISWbemObject,
            iFlags: i32,
            strObjectText: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SpawnDerivedClass_: fn(
            self: *const ISWbemObject,
            iFlags: i32,
            objWbemObject: **ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SpawnInstance_: fn(
            self: *const ISWbemObject,
            iFlags: i32,
            objWbemObject: **ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompareTo_: fn(
            self: *const ISWbemObject,
            objWbemObject: *IDispatch,
            iFlags: i32,
            bResult: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Qualifiers_: fn(
            self: *const ISWbemObject,
            objWbemQualifierSet: **ISWbemQualifierSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Properties_: fn(
            self: *const ISWbemObject,
            objWbemPropertySet: **ISWbemPropertySet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Methods_: fn(
            self: *const ISWbemObject,
            objWbemMethodSet: **ISWbemMethodSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Derivation_: fn(
            self: *const ISWbemObject,
            strClassNameArray: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Path_: fn(
            self: *const ISWbemObject,
            objWbemObjectPath: **ISWbemObjectPath,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Security_: fn(
            self: *const ISWbemObject,
            objWbemSecurity: **ISWbemSecurity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_Put_(self: *const T, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemObjectPath: **ISWbemObjectPath) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).Put_(@ptrCast(*const ISWbemObject, self), iFlags, objWbemNamedValueSet, objWbemObjectPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_PutAsync_(self: *const T, objWbemSink: *IDispatch, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemAsyncContext: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).PutAsync_(@ptrCast(*const ISWbemObject, self), objWbemSink, iFlags, objWbemNamedValueSet, objWbemAsyncContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_Delete_(self: *const T, iFlags: i32, objWbemNamedValueSet: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).Delete_(@ptrCast(*const ISWbemObject, self), iFlags, objWbemNamedValueSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_DeleteAsync_(self: *const T, objWbemSink: *IDispatch, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemAsyncContext: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).DeleteAsync_(@ptrCast(*const ISWbemObject, self), objWbemSink, iFlags, objWbemNamedValueSet, objWbemAsyncContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_Instances_(self: *const T, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemObjectSet: **ISWbemObjectSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).Instances_(@ptrCast(*const ISWbemObject, self), iFlags, objWbemNamedValueSet, objWbemObjectSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_InstancesAsync_(self: *const T, objWbemSink: *IDispatch, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemAsyncContext: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).InstancesAsync_(@ptrCast(*const ISWbemObject, self), objWbemSink, iFlags, objWbemNamedValueSet, objWbemAsyncContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_Subclasses_(self: *const T, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemObjectSet: **ISWbemObjectSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).Subclasses_(@ptrCast(*const ISWbemObject, self), iFlags, objWbemNamedValueSet, objWbemObjectSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_SubclassesAsync_(self: *const T, objWbemSink: *IDispatch, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemAsyncContext: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).SubclassesAsync_(@ptrCast(*const ISWbemObject, self), objWbemSink, iFlags, objWbemNamedValueSet, objWbemAsyncContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_Associators_(self: *const T, strAssocClass: BSTR, strResultClass: BSTR, strResultRole: BSTR, strRole: BSTR, bClassesOnly: i16, bSchemaOnly: i16, strRequiredAssocQualifier: BSTR, strRequiredQualifier: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemObjectSet: **ISWbemObjectSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).Associators_(@ptrCast(*const ISWbemObject, self), strAssocClass, strResultClass, strResultRole, strRole, bClassesOnly, bSchemaOnly, strRequiredAssocQualifier, strRequiredQualifier, iFlags, objWbemNamedValueSet, objWbemObjectSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_AssociatorsAsync_(self: *const T, objWbemSink: *IDispatch, strAssocClass: BSTR, strResultClass: BSTR, strResultRole: BSTR, strRole: BSTR, bClassesOnly: i16, bSchemaOnly: i16, strRequiredAssocQualifier: BSTR, strRequiredQualifier: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemAsyncContext: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).AssociatorsAsync_(@ptrCast(*const ISWbemObject, self), objWbemSink, strAssocClass, strResultClass, strResultRole, strRole, bClassesOnly, bSchemaOnly, strRequiredAssocQualifier, strRequiredQualifier, iFlags, objWbemNamedValueSet, objWbemAsyncContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_References_(self: *const T, strResultClass: BSTR, strRole: BSTR, bClassesOnly: i16, bSchemaOnly: i16, strRequiredQualifier: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemObjectSet: **ISWbemObjectSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).References_(@ptrCast(*const ISWbemObject, self), strResultClass, strRole, bClassesOnly, bSchemaOnly, strRequiredQualifier, iFlags, objWbemNamedValueSet, objWbemObjectSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_ReferencesAsync_(self: *const T, objWbemSink: *IDispatch, strResultClass: BSTR, strRole: BSTR, bClassesOnly: i16, bSchemaOnly: i16, strRequiredQualifier: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemAsyncContext: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).ReferencesAsync_(@ptrCast(*const ISWbemObject, self), objWbemSink, strResultClass, strRole, bClassesOnly, bSchemaOnly, strRequiredQualifier, iFlags, objWbemNamedValueSet, objWbemAsyncContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_ExecMethod_(self: *const T, strMethodName: BSTR, objWbemInParameters: *IDispatch, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemOutParameters: **ISWbemObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).ExecMethod_(@ptrCast(*const ISWbemObject, self), strMethodName, objWbemInParameters, iFlags, objWbemNamedValueSet, objWbemOutParameters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_ExecMethodAsync_(self: *const T, objWbemSink: *IDispatch, strMethodName: BSTR, objWbemInParameters: *IDispatch, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemAsyncContext: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).ExecMethodAsync_(@ptrCast(*const ISWbemObject, self), objWbemSink, strMethodName, objWbemInParameters, iFlags, objWbemNamedValueSet, objWbemAsyncContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_Clone_(self: *const T, objWbemObject: **ISWbemObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).Clone_(@ptrCast(*const ISWbemObject, self), objWbemObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_GetObjectText_(self: *const T, iFlags: i32, strObjectText: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).GetObjectText_(@ptrCast(*const ISWbemObject, self), iFlags, strObjectText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_SpawnDerivedClass_(self: *const T, iFlags: i32, objWbemObject: **ISWbemObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).SpawnDerivedClass_(@ptrCast(*const ISWbemObject, self), iFlags, objWbemObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_SpawnInstance_(self: *const T, iFlags: i32, objWbemObject: **ISWbemObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).SpawnInstance_(@ptrCast(*const ISWbemObject, self), iFlags, objWbemObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_CompareTo_(self: *const T, objWbemObject: *IDispatch, iFlags: i32, bResult: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).CompareTo_(@ptrCast(*const ISWbemObject, self), objWbemObject, iFlags, bResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_get_Qualifiers_(self: *const T, objWbemQualifierSet: **ISWbemQualifierSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).get_Qualifiers_(@ptrCast(*const ISWbemObject, self), objWbemQualifierSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_get_Properties_(self: *const T, objWbemPropertySet: **ISWbemPropertySet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).get_Properties_(@ptrCast(*const ISWbemObject, self), objWbemPropertySet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_get_Methods_(self: *const T, objWbemMethodSet: **ISWbemMethodSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).get_Methods_(@ptrCast(*const ISWbemObject, self), objWbemMethodSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_get_Derivation_(self: *const T, strClassNameArray: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).get_Derivation_(@ptrCast(*const ISWbemObject, self), strClassNameArray);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_get_Path_(self: *const T, objWbemObjectPath: **ISWbemObjectPath) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).get_Path_(@ptrCast(*const ISWbemObject, self), objWbemObjectPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObject_get_Security_(self: *const T, objWbemSecurity: **ISWbemSecurity) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObject.VTable, self.vtable).get_Security_(@ptrCast(*const ISWbemObject, self), objWbemSecurity);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemObjectSet_Value = @import("../zig.zig").Guid.initString("76A6415F-CB41-11D1-8B02-00600806D9B6");
pub const IID_ISWbemObjectSet = &IID_ISWbemObjectSet_Value;
pub const ISWbemObjectSet = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get__NewEnum: fn(
            self: *const ISWbemObjectSet,
            pUnk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const ISWbemObjectSet,
            strObjectPath: BSTR,
            iFlags: i32,
            objWbemObject: **ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ISWbemObjectSet,
            iCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Security_: fn(
            self: *const ISWbemObjectSet,
            objWbemSecurity: **ISWbemSecurity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemIndex: fn(
            self: *const ISWbemObjectSet,
            lIndex: i32,
            objWbemObject: **ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectSet_get__NewEnum(self: *const T, pUnk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectSet.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISWbemObjectSet, self), pUnk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectSet_Item(self: *const T, strObjectPath: BSTR, iFlags: i32, objWbemObject: **ISWbemObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectSet.VTable, self.vtable).Item(@ptrCast(*const ISWbemObjectSet, self), strObjectPath, iFlags, objWbemObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectSet_get_Count(self: *const T, iCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectSet.VTable, self.vtable).get_Count(@ptrCast(*const ISWbemObjectSet, self), iCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectSet_get_Security_(self: *const T, objWbemSecurity: **ISWbemSecurity) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectSet.VTable, self.vtable).get_Security_(@ptrCast(*const ISWbemObjectSet, self), objWbemSecurity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectSet_ItemIndex(self: *const T, lIndex: i32, objWbemObject: **ISWbemObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectSet.VTable, self.vtable).ItemIndex(@ptrCast(*const ISWbemObjectSet, self), lIndex, objWbemObject);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemNamedValue_Value = @import("../zig.zig").Guid.initString("76A64164-CB41-11D1-8B02-00600806D9B6");
pub const IID_ISWbemNamedValue = &IID_ISWbemNamedValue_Value;
pub const ISWbemNamedValue = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Value: fn(
            self: *const ISWbemNamedValue,
            varValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Value: fn(
            self: *const ISWbemNamedValue,
            varValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const ISWbemNamedValue,
            strName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemNamedValue_get_Value(self: *const T, varValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemNamedValue.VTable, self.vtable).get_Value(@ptrCast(*const ISWbemNamedValue, self), varValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemNamedValue_put_Value(self: *const T, varValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemNamedValue.VTable, self.vtable).put_Value(@ptrCast(*const ISWbemNamedValue, self), varValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemNamedValue_get_Name(self: *const T, strName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemNamedValue.VTable, self.vtable).get_Name(@ptrCast(*const ISWbemNamedValue, self), strName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemNamedValueSet_Value = @import("../zig.zig").Guid.initString("CF2376EA-CE8C-11D1-8B05-00600806D9B6");
pub const IID_ISWbemNamedValueSet = &IID_ISWbemNamedValueSet_Value;
pub const ISWbemNamedValueSet = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get__NewEnum: fn(
            self: *const ISWbemNamedValueSet,
            pUnk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const ISWbemNamedValueSet,
            strName: BSTR,
            iFlags: i32,
            objWbemNamedValue: **ISWbemNamedValue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ISWbemNamedValueSet,
            iCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ISWbemNamedValueSet,
            strName: BSTR,
            varValue: *VARIANT,
            iFlags: i32,
            objWbemNamedValue: **ISWbemNamedValue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ISWbemNamedValueSet,
            strName: BSTR,
            iFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const ISWbemNamedValueSet,
            objWbemNamedValueSet: **ISWbemNamedValueSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAll: fn(
            self: *const ISWbemNamedValueSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemNamedValueSet_get__NewEnum(self: *const T, pUnk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemNamedValueSet.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISWbemNamedValueSet, self), pUnk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemNamedValueSet_Item(self: *const T, strName: BSTR, iFlags: i32, objWbemNamedValue: **ISWbemNamedValue) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemNamedValueSet.VTable, self.vtable).Item(@ptrCast(*const ISWbemNamedValueSet, self), strName, iFlags, objWbemNamedValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemNamedValueSet_get_Count(self: *const T, iCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemNamedValueSet.VTable, self.vtable).get_Count(@ptrCast(*const ISWbemNamedValueSet, self), iCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemNamedValueSet_Add(self: *const T, strName: BSTR, varValue: *VARIANT, iFlags: i32, objWbemNamedValue: **ISWbemNamedValue) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemNamedValueSet.VTable, self.vtable).Add(@ptrCast(*const ISWbemNamedValueSet, self), strName, varValue, iFlags, objWbemNamedValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemNamedValueSet_Remove(self: *const T, strName: BSTR, iFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemNamedValueSet.VTable, self.vtable).Remove(@ptrCast(*const ISWbemNamedValueSet, self), strName, iFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemNamedValueSet_Clone(self: *const T, objWbemNamedValueSet: **ISWbemNamedValueSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemNamedValueSet.VTable, self.vtable).Clone(@ptrCast(*const ISWbemNamedValueSet, self), objWbemNamedValueSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemNamedValueSet_DeleteAll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemNamedValueSet.VTable, self.vtable).DeleteAll(@ptrCast(*const ISWbemNamedValueSet, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemQualifier_Value = @import("../zig.zig").Guid.initString("79B05932-D3B7-11D1-8B06-00600806D9B6");
pub const IID_ISWbemQualifier = &IID_ISWbemQualifier_Value;
pub const ISWbemQualifier = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Value: fn(
            self: *const ISWbemQualifier,
            varValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Value: fn(
            self: *const ISWbemQualifier,
            varValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const ISWbemQualifier,
            strName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsLocal: fn(
            self: *const ISWbemQualifier,
            bIsLocal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PropagatesToSubclass: fn(
            self: *const ISWbemQualifier,
            bPropagatesToSubclass: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_PropagatesToSubclass: fn(
            self: *const ISWbemQualifier,
            bPropagatesToSubclass: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PropagatesToInstance: fn(
            self: *const ISWbemQualifier,
            bPropagatesToInstance: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_PropagatesToInstance: fn(
            self: *const ISWbemQualifier,
            bPropagatesToInstance: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsOverridable: fn(
            self: *const ISWbemQualifier,
            bIsOverridable: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_IsOverridable: fn(
            self: *const ISWbemQualifier,
            bIsOverridable: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsAmended: fn(
            self: *const ISWbemQualifier,
            bIsAmended: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemQualifier_get_Value(self: *const T, varValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemQualifier.VTable, self.vtable).get_Value(@ptrCast(*const ISWbemQualifier, self), varValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemQualifier_put_Value(self: *const T, varValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemQualifier.VTable, self.vtable).put_Value(@ptrCast(*const ISWbemQualifier, self), varValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemQualifier_get_Name(self: *const T, strName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemQualifier.VTable, self.vtable).get_Name(@ptrCast(*const ISWbemQualifier, self), strName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemQualifier_get_IsLocal(self: *const T, bIsLocal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemQualifier.VTable, self.vtable).get_IsLocal(@ptrCast(*const ISWbemQualifier, self), bIsLocal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemQualifier_get_PropagatesToSubclass(self: *const T, bPropagatesToSubclass: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemQualifier.VTable, self.vtable).get_PropagatesToSubclass(@ptrCast(*const ISWbemQualifier, self), bPropagatesToSubclass);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemQualifier_put_PropagatesToSubclass(self: *const T, bPropagatesToSubclass: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemQualifier.VTable, self.vtable).put_PropagatesToSubclass(@ptrCast(*const ISWbemQualifier, self), bPropagatesToSubclass);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemQualifier_get_PropagatesToInstance(self: *const T, bPropagatesToInstance: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemQualifier.VTable, self.vtable).get_PropagatesToInstance(@ptrCast(*const ISWbemQualifier, self), bPropagatesToInstance);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemQualifier_put_PropagatesToInstance(self: *const T, bPropagatesToInstance: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemQualifier.VTable, self.vtable).put_PropagatesToInstance(@ptrCast(*const ISWbemQualifier, self), bPropagatesToInstance);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemQualifier_get_IsOverridable(self: *const T, bIsOverridable: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemQualifier.VTable, self.vtable).get_IsOverridable(@ptrCast(*const ISWbemQualifier, self), bIsOverridable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemQualifier_put_IsOverridable(self: *const T, bIsOverridable: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemQualifier.VTable, self.vtable).put_IsOverridable(@ptrCast(*const ISWbemQualifier, self), bIsOverridable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemQualifier_get_IsAmended(self: *const T, bIsAmended: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemQualifier.VTable, self.vtable).get_IsAmended(@ptrCast(*const ISWbemQualifier, self), bIsAmended);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemQualifierSet_Value = @import("../zig.zig").Guid.initString("9B16ED16-D3DF-11D1-8B08-00600806D9B6");
pub const IID_ISWbemQualifierSet = &IID_ISWbemQualifierSet_Value;
pub const ISWbemQualifierSet = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get__NewEnum: fn(
            self: *const ISWbemQualifierSet,
            pUnk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const ISWbemQualifierSet,
            name: BSTR,
            iFlags: i32,
            objWbemQualifier: **ISWbemQualifier,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ISWbemQualifierSet,
            iCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ISWbemQualifierSet,
            strName: BSTR,
            varVal: *VARIANT,
            bPropagatesToSubclass: i16,
            bPropagatesToInstance: i16,
            bIsOverridable: i16,
            iFlags: i32,
            objWbemQualifier: **ISWbemQualifier,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ISWbemQualifierSet,
            strName: BSTR,
            iFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemQualifierSet_get__NewEnum(self: *const T, pUnk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemQualifierSet.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISWbemQualifierSet, self), pUnk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemQualifierSet_Item(self: *const T, name: BSTR, iFlags: i32, objWbemQualifier: **ISWbemQualifier) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemQualifierSet.VTable, self.vtable).Item(@ptrCast(*const ISWbemQualifierSet, self), name, iFlags, objWbemQualifier);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemQualifierSet_get_Count(self: *const T, iCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemQualifierSet.VTable, self.vtable).get_Count(@ptrCast(*const ISWbemQualifierSet, self), iCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemQualifierSet_Add(self: *const T, strName: BSTR, varVal: *VARIANT, bPropagatesToSubclass: i16, bPropagatesToInstance: i16, bIsOverridable: i16, iFlags: i32, objWbemQualifier: **ISWbemQualifier) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemQualifierSet.VTable, self.vtable).Add(@ptrCast(*const ISWbemQualifierSet, self), strName, varVal, bPropagatesToSubclass, bPropagatesToInstance, bIsOverridable, iFlags, objWbemQualifier);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemQualifierSet_Remove(self: *const T, strName: BSTR, iFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemQualifierSet.VTable, self.vtable).Remove(@ptrCast(*const ISWbemQualifierSet, self), strName, iFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemProperty_Value = @import("../zig.zig").Guid.initString("1A388F98-D4BA-11D1-8B09-00600806D9B6");
pub const IID_ISWbemProperty = &IID_ISWbemProperty_Value;
pub const ISWbemProperty = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Value: fn(
            self: *const ISWbemProperty,
            varValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Value: fn(
            self: *const ISWbemProperty,
            varValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const ISWbemProperty,
            strName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsLocal: fn(
            self: *const ISWbemProperty,
            bIsLocal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Origin: fn(
            self: *const ISWbemProperty,
            strOrigin: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CIMType: fn(
            self: *const ISWbemProperty,
            iCimType: *WbemCimtypeEnum,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Qualifiers_: fn(
            self: *const ISWbemProperty,
            objWbemQualifierSet: **ISWbemQualifierSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsArray: fn(
            self: *const ISWbemProperty,
            bIsArray: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemProperty_get_Value(self: *const T, varValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemProperty.VTable, self.vtable).get_Value(@ptrCast(*const ISWbemProperty, self), varValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemProperty_put_Value(self: *const T, varValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemProperty.VTable, self.vtable).put_Value(@ptrCast(*const ISWbemProperty, self), varValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemProperty_get_Name(self: *const T, strName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemProperty.VTable, self.vtable).get_Name(@ptrCast(*const ISWbemProperty, self), strName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemProperty_get_IsLocal(self: *const T, bIsLocal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemProperty.VTable, self.vtable).get_IsLocal(@ptrCast(*const ISWbemProperty, self), bIsLocal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemProperty_get_Origin(self: *const T, strOrigin: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemProperty.VTable, self.vtable).get_Origin(@ptrCast(*const ISWbemProperty, self), strOrigin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemProperty_get_CIMType(self: *const T, iCimType: *WbemCimtypeEnum) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemProperty.VTable, self.vtable).get_CIMType(@ptrCast(*const ISWbemProperty, self), iCimType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemProperty_get_Qualifiers_(self: *const T, objWbemQualifierSet: **ISWbemQualifierSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemProperty.VTable, self.vtable).get_Qualifiers_(@ptrCast(*const ISWbemProperty, self), objWbemQualifierSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemProperty_get_IsArray(self: *const T, bIsArray: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemProperty.VTable, self.vtable).get_IsArray(@ptrCast(*const ISWbemProperty, self), bIsArray);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemPropertySet_Value = @import("../zig.zig").Guid.initString("DEA0A7B2-D4BA-11D1-8B09-00600806D9B6");
pub const IID_ISWbemPropertySet = &IID_ISWbemPropertySet_Value;
pub const ISWbemPropertySet = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get__NewEnum: fn(
            self: *const ISWbemPropertySet,
            pUnk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const ISWbemPropertySet,
            strName: BSTR,
            iFlags: i32,
            objWbemProperty: **ISWbemProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ISWbemPropertySet,
            iCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ISWbemPropertySet,
            strName: BSTR,
            iCIMType: WbemCimtypeEnum,
            bIsArray: i16,
            iFlags: i32,
            objWbemProperty: **ISWbemProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ISWbemPropertySet,
            strName: BSTR,
            iFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemPropertySet_get__NewEnum(self: *const T, pUnk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemPropertySet.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISWbemPropertySet, self), pUnk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemPropertySet_Item(self: *const T, strName: BSTR, iFlags: i32, objWbemProperty: **ISWbemProperty) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemPropertySet.VTable, self.vtable).Item(@ptrCast(*const ISWbemPropertySet, self), strName, iFlags, objWbemProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemPropertySet_get_Count(self: *const T, iCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemPropertySet.VTable, self.vtable).get_Count(@ptrCast(*const ISWbemPropertySet, self), iCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemPropertySet_Add(self: *const T, strName: BSTR, iCIMType: WbemCimtypeEnum, bIsArray: i16, iFlags: i32, objWbemProperty: **ISWbemProperty) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemPropertySet.VTable, self.vtable).Add(@ptrCast(*const ISWbemPropertySet, self), strName, iCIMType, bIsArray, iFlags, objWbemProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemPropertySet_Remove(self: *const T, strName: BSTR, iFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemPropertySet.VTable, self.vtable).Remove(@ptrCast(*const ISWbemPropertySet, self), strName, iFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemMethod_Value = @import("../zig.zig").Guid.initString("422E8E90-D955-11D1-8B09-00600806D9B6");
pub const IID_ISWbemMethod = &IID_ISWbemMethod_Value;
pub const ISWbemMethod = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Name: fn(
            self: *const ISWbemMethod,
            strName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Origin: fn(
            self: *const ISWbemMethod,
            strOrigin: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_InParameters: fn(
            self: *const ISWbemMethod,
            objWbemInParameters: **ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_OutParameters: fn(
            self: *const ISWbemMethod,
            objWbemOutParameters: **ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Qualifiers_: fn(
            self: *const ISWbemMethod,
            objWbemQualifierSet: **ISWbemQualifierSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemMethod_get_Name(self: *const T, strName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemMethod.VTable, self.vtable).get_Name(@ptrCast(*const ISWbemMethod, self), strName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemMethod_get_Origin(self: *const T, strOrigin: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemMethod.VTable, self.vtable).get_Origin(@ptrCast(*const ISWbemMethod, self), strOrigin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemMethod_get_InParameters(self: *const T, objWbemInParameters: **ISWbemObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemMethod.VTable, self.vtable).get_InParameters(@ptrCast(*const ISWbemMethod, self), objWbemInParameters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemMethod_get_OutParameters(self: *const T, objWbemOutParameters: **ISWbemObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemMethod.VTable, self.vtable).get_OutParameters(@ptrCast(*const ISWbemMethod, self), objWbemOutParameters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemMethod_get_Qualifiers_(self: *const T, objWbemQualifierSet: **ISWbemQualifierSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemMethod.VTable, self.vtable).get_Qualifiers_(@ptrCast(*const ISWbemMethod, self), objWbemQualifierSet);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemMethodSet_Value = @import("../zig.zig").Guid.initString("C93BA292-D955-11D1-8B09-00600806D9B6");
pub const IID_ISWbemMethodSet = &IID_ISWbemMethodSet_Value;
pub const ISWbemMethodSet = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get__NewEnum: fn(
            self: *const ISWbemMethodSet,
            pUnk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const ISWbemMethodSet,
            strName: BSTR,
            iFlags: i32,
            objWbemMethod: **ISWbemMethod,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ISWbemMethodSet,
            iCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemMethodSet_get__NewEnum(self: *const T, pUnk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemMethodSet.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISWbemMethodSet, self), pUnk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemMethodSet_Item(self: *const T, strName: BSTR, iFlags: i32, objWbemMethod: **ISWbemMethod) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemMethodSet.VTable, self.vtable).Item(@ptrCast(*const ISWbemMethodSet, self), strName, iFlags, objWbemMethod);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemMethodSet_get_Count(self: *const T, iCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemMethodSet.VTable, self.vtable).get_Count(@ptrCast(*const ISWbemMethodSet, self), iCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemEventSource_Value = @import("../zig.zig").Guid.initString("27D54D92-0EBE-11D2-8B22-00600806D9B6");
pub const IID_ISWbemEventSource = &IID_ISWbemEventSource_Value;
pub const ISWbemEventSource = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        NextEvent: fn(
            self: *const ISWbemEventSource,
            iTimeoutMs: i32,
            objWbemObject: **ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Security_: fn(
            self: *const ISWbemEventSource,
            objWbemSecurity: **ISWbemSecurity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemEventSource_NextEvent(self: *const T, iTimeoutMs: i32, objWbemObject: **ISWbemObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemEventSource.VTable, self.vtable).NextEvent(@ptrCast(*const ISWbemEventSource, self), iTimeoutMs, objWbemObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemEventSource_get_Security_(self: *const T, objWbemSecurity: **ISWbemSecurity) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemEventSource.VTable, self.vtable).get_Security_(@ptrCast(*const ISWbemEventSource, self), objWbemSecurity);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemObjectPath_Value = @import("../zig.zig").Guid.initString("5791BC27-CE9C-11D1-97BF-0000F81E849C");
pub const IID_ISWbemObjectPath = &IID_ISWbemObjectPath_Value;
pub const ISWbemObjectPath = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Path: fn(
            self: *const ISWbemObjectPath,
            strPath: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Path: fn(
            self: *const ISWbemObjectPath,
            strPath: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RelPath: fn(
            self: *const ISWbemObjectPath,
            strRelPath: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RelPath: fn(
            self: *const ISWbemObjectPath,
            strRelPath: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Server: fn(
            self: *const ISWbemObjectPath,
            strServer: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Server: fn(
            self: *const ISWbemObjectPath,
            strServer: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Namespace: fn(
            self: *const ISWbemObjectPath,
            strNamespace: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Namespace: fn(
            self: *const ISWbemObjectPath,
            strNamespace: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ParentNamespace: fn(
            self: *const ISWbemObjectPath,
            strParentNamespace: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DisplayName: fn(
            self: *const ISWbemObjectPath,
            strDisplayName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DisplayName: fn(
            self: *const ISWbemObjectPath,
            strDisplayName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Class: fn(
            self: *const ISWbemObjectPath,
            strClass: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Class: fn(
            self: *const ISWbemObjectPath,
            strClass: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsClass: fn(
            self: *const ISWbemObjectPath,
            bIsClass: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAsClass: fn(
            self: *const ISWbemObjectPath,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsSingleton: fn(
            self: *const ISWbemObjectPath,
            bIsSingleton: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAsSingleton: fn(
            self: *const ISWbemObjectPath,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Keys: fn(
            self: *const ISWbemObjectPath,
            objWbemNamedValueSet: **ISWbemNamedValueSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Security_: fn(
            self: *const ISWbemObjectPath,
            objWbemSecurity: **ISWbemSecurity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Locale: fn(
            self: *const ISWbemObjectPath,
            strLocale: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Locale: fn(
            self: *const ISWbemObjectPath,
            strLocale: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Authority: fn(
            self: *const ISWbemObjectPath,
            strAuthority: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Authority: fn(
            self: *const ISWbemObjectPath,
            strAuthority: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_get_Path(self: *const T, strPath: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).get_Path(@ptrCast(*const ISWbemObjectPath, self), strPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_put_Path(self: *const T, strPath: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).put_Path(@ptrCast(*const ISWbemObjectPath, self), strPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_get_RelPath(self: *const T, strRelPath: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).get_RelPath(@ptrCast(*const ISWbemObjectPath, self), strRelPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_put_RelPath(self: *const T, strRelPath: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).put_RelPath(@ptrCast(*const ISWbemObjectPath, self), strRelPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_get_Server(self: *const T, strServer: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).get_Server(@ptrCast(*const ISWbemObjectPath, self), strServer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_put_Server(self: *const T, strServer: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).put_Server(@ptrCast(*const ISWbemObjectPath, self), strServer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_get_Namespace(self: *const T, strNamespace: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).get_Namespace(@ptrCast(*const ISWbemObjectPath, self), strNamespace);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_put_Namespace(self: *const T, strNamespace: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).put_Namespace(@ptrCast(*const ISWbemObjectPath, self), strNamespace);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_get_ParentNamespace(self: *const T, strParentNamespace: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).get_ParentNamespace(@ptrCast(*const ISWbemObjectPath, self), strParentNamespace);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_get_DisplayName(self: *const T, strDisplayName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).get_DisplayName(@ptrCast(*const ISWbemObjectPath, self), strDisplayName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_put_DisplayName(self: *const T, strDisplayName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).put_DisplayName(@ptrCast(*const ISWbemObjectPath, self), strDisplayName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_get_Class(self: *const T, strClass: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).get_Class(@ptrCast(*const ISWbemObjectPath, self), strClass);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_put_Class(self: *const T, strClass: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).put_Class(@ptrCast(*const ISWbemObjectPath, self), strClass);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_get_IsClass(self: *const T, bIsClass: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).get_IsClass(@ptrCast(*const ISWbemObjectPath, self), bIsClass);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_SetAsClass(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).SetAsClass(@ptrCast(*const ISWbemObjectPath, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_get_IsSingleton(self: *const T, bIsSingleton: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).get_IsSingleton(@ptrCast(*const ISWbemObjectPath, self), bIsSingleton);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_SetAsSingleton(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).SetAsSingleton(@ptrCast(*const ISWbemObjectPath, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_get_Keys(self: *const T, objWbemNamedValueSet: **ISWbemNamedValueSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).get_Keys(@ptrCast(*const ISWbemObjectPath, self), objWbemNamedValueSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_get_Security_(self: *const T, objWbemSecurity: **ISWbemSecurity) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).get_Security_(@ptrCast(*const ISWbemObjectPath, self), objWbemSecurity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_get_Locale(self: *const T, strLocale: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).get_Locale(@ptrCast(*const ISWbemObjectPath, self), strLocale);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_put_Locale(self: *const T, strLocale: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).put_Locale(@ptrCast(*const ISWbemObjectPath, self), strLocale);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_get_Authority(self: *const T, strAuthority: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).get_Authority(@ptrCast(*const ISWbemObjectPath, self), strAuthority);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectPath_put_Authority(self: *const T, strAuthority: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectPath.VTable, self.vtable).put_Authority(@ptrCast(*const ISWbemObjectPath, self), strAuthority);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemLastError_Value = @import("../zig.zig").Guid.initString("D962DB84-D4BB-11D1-8B09-00600806D9B6");
pub const IID_ISWbemLastError = &IID_ISWbemLastError_Value;
pub const ISWbemLastError = extern struct {
    pub const VTable = extern struct {
        base: ISWbemObject.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISWbemObject.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemSinkEvents_Value = @import("../zig.zig").Guid.initString("75718CA0-F029-11D1-A1AC-00C04FB6C223");
pub const IID_ISWbemSinkEvents = &IID_ISWbemSinkEvents_Value;
pub const ISWbemSinkEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemSink_Value = @import("../zig.zig").Guid.initString("75718C9F-F029-11D1-A1AC-00C04FB6C223");
pub const IID_ISWbemSink = &IID_ISWbemSink_Value;
pub const ISWbemSink = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Cancel: fn(
            self: *const ISWbemSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemSink_Cancel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemSink.VTable, self.vtable).Cancel(@ptrCast(*const ISWbemSink, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemSecurity_Value = @import("../zig.zig").Guid.initString("B54D66E6-2287-11D2-8B33-00600806D9B6");
pub const IID_ISWbemSecurity = &IID_ISWbemSecurity_Value;
pub const ISWbemSecurity = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ImpersonationLevel: fn(
            self: *const ISWbemSecurity,
            iImpersonationLevel: *WbemImpersonationLevelEnum,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ImpersonationLevel: fn(
            self: *const ISWbemSecurity,
            iImpersonationLevel: WbemImpersonationLevelEnum,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AuthenticationLevel: fn(
            self: *const ISWbemSecurity,
            iAuthenticationLevel: *WbemAuthenticationLevelEnum,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AuthenticationLevel: fn(
            self: *const ISWbemSecurity,
            iAuthenticationLevel: WbemAuthenticationLevelEnum,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Privileges: fn(
            self: *const ISWbemSecurity,
            objWbemPrivilegeSet: **ISWbemPrivilegeSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemSecurity_get_ImpersonationLevel(self: *const T, iImpersonationLevel: *WbemImpersonationLevelEnum) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemSecurity.VTable, self.vtable).get_ImpersonationLevel(@ptrCast(*const ISWbemSecurity, self), iImpersonationLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemSecurity_put_ImpersonationLevel(self: *const T, iImpersonationLevel: WbemImpersonationLevelEnum) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemSecurity.VTable, self.vtable).put_ImpersonationLevel(@ptrCast(*const ISWbemSecurity, self), iImpersonationLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemSecurity_get_AuthenticationLevel(self: *const T, iAuthenticationLevel: *WbemAuthenticationLevelEnum) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemSecurity.VTable, self.vtable).get_AuthenticationLevel(@ptrCast(*const ISWbemSecurity, self), iAuthenticationLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemSecurity_put_AuthenticationLevel(self: *const T, iAuthenticationLevel: WbemAuthenticationLevelEnum) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemSecurity.VTable, self.vtable).put_AuthenticationLevel(@ptrCast(*const ISWbemSecurity, self), iAuthenticationLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemSecurity_get_Privileges(self: *const T, objWbemPrivilegeSet: **ISWbemPrivilegeSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemSecurity.VTable, self.vtable).get_Privileges(@ptrCast(*const ISWbemSecurity, self), objWbemPrivilegeSet);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemPrivilege_Value = @import("../zig.zig").Guid.initString("26EE67BD-5804-11D2-8B4A-00600806D9B6");
pub const IID_ISWbemPrivilege = &IID_ISWbemPrivilege_Value;
pub const ISWbemPrivilege = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_IsEnabled: fn(
            self: *const ISWbemPrivilege,
            bIsEnabled: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_IsEnabled: fn(
            self: *const ISWbemPrivilege,
            bIsEnabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const ISWbemPrivilege,
            strDisplayName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DisplayName: fn(
            self: *const ISWbemPrivilege,
            strDisplayName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Identifier: fn(
            self: *const ISWbemPrivilege,
            iPrivilege: *WbemPrivilegeEnum,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemPrivilege_get_IsEnabled(self: *const T, bIsEnabled: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemPrivilege.VTable, self.vtable).get_IsEnabled(@ptrCast(*const ISWbemPrivilege, self), bIsEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemPrivilege_put_IsEnabled(self: *const T, bIsEnabled: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemPrivilege.VTable, self.vtable).put_IsEnabled(@ptrCast(*const ISWbemPrivilege, self), bIsEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemPrivilege_get_Name(self: *const T, strDisplayName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemPrivilege.VTable, self.vtable).get_Name(@ptrCast(*const ISWbemPrivilege, self), strDisplayName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemPrivilege_get_DisplayName(self: *const T, strDisplayName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemPrivilege.VTable, self.vtable).get_DisplayName(@ptrCast(*const ISWbemPrivilege, self), strDisplayName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemPrivilege_get_Identifier(self: *const T, iPrivilege: *WbemPrivilegeEnum) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemPrivilege.VTable, self.vtable).get_Identifier(@ptrCast(*const ISWbemPrivilege, self), iPrivilege);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemPrivilegeSet_Value = @import("../zig.zig").Guid.initString("26EE67BF-5804-11D2-8B4A-00600806D9B6");
pub const IID_ISWbemPrivilegeSet = &IID_ISWbemPrivilegeSet_Value;
pub const ISWbemPrivilegeSet = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get__NewEnum: fn(
            self: *const ISWbemPrivilegeSet,
            pUnk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const ISWbemPrivilegeSet,
            iPrivilege: WbemPrivilegeEnum,
            objWbemPrivilege: **ISWbemPrivilege,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ISWbemPrivilegeSet,
            iCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ISWbemPrivilegeSet,
            iPrivilege: WbemPrivilegeEnum,
            bIsEnabled: i16,
            objWbemPrivilege: **ISWbemPrivilege,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ISWbemPrivilegeSet,
            iPrivilege: WbemPrivilegeEnum,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAll: fn(
            self: *const ISWbemPrivilegeSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAsString: fn(
            self: *const ISWbemPrivilegeSet,
            strPrivilege: BSTR,
            bIsEnabled: i16,
            objWbemPrivilege: **ISWbemPrivilege,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemPrivilegeSet_get__NewEnum(self: *const T, pUnk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemPrivilegeSet.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISWbemPrivilegeSet, self), pUnk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemPrivilegeSet_Item(self: *const T, iPrivilege: WbemPrivilegeEnum, objWbemPrivilege: **ISWbemPrivilege) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemPrivilegeSet.VTable, self.vtable).Item(@ptrCast(*const ISWbemPrivilegeSet, self), iPrivilege, objWbemPrivilege);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemPrivilegeSet_get_Count(self: *const T, iCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemPrivilegeSet.VTable, self.vtable).get_Count(@ptrCast(*const ISWbemPrivilegeSet, self), iCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemPrivilegeSet_Add(self: *const T, iPrivilege: WbemPrivilegeEnum, bIsEnabled: i16, objWbemPrivilege: **ISWbemPrivilege) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemPrivilegeSet.VTable, self.vtable).Add(@ptrCast(*const ISWbemPrivilegeSet, self), iPrivilege, bIsEnabled, objWbemPrivilege);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemPrivilegeSet_Remove(self: *const T, iPrivilege: WbemPrivilegeEnum) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemPrivilegeSet.VTable, self.vtable).Remove(@ptrCast(*const ISWbemPrivilegeSet, self), iPrivilege);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemPrivilegeSet_DeleteAll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemPrivilegeSet.VTable, self.vtable).DeleteAll(@ptrCast(*const ISWbemPrivilegeSet, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemPrivilegeSet_AddAsString(self: *const T, strPrivilege: BSTR, bIsEnabled: i16, objWbemPrivilege: **ISWbemPrivilege) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemPrivilegeSet.VTable, self.vtable).AddAsString(@ptrCast(*const ISWbemPrivilegeSet, self), strPrivilege, bIsEnabled, objWbemPrivilege);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemServicesEx_Value = @import("../zig.zig").Guid.initString("D2F68443-85DC-427E-91D8-366554CC754C");
pub const IID_ISWbemServicesEx = &IID_ISWbemServicesEx_Value;
pub const ISWbemServicesEx = extern struct {
    pub const VTable = extern struct {
        base: ISWbemServices.VTable,
        Put: fn(
            self: *const ISWbemServicesEx,
            objWbemObject: *ISWbemObjectEx,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemObjectPath: **ISWbemObjectPath,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutAsync: fn(
            self: *const ISWbemServicesEx,
            objWbemSink: *ISWbemSink,
            objWbemObject: *ISWbemObjectEx,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemAsyncContext: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISWbemServices.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServicesEx_Put(self: *const T, objWbemObject: *ISWbemObjectEx, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemObjectPath: **ISWbemObjectPath) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServicesEx.VTable, self.vtable).Put(@ptrCast(*const ISWbemServicesEx, self), objWbemObject, iFlags, objWbemNamedValueSet, objWbemObjectPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemServicesEx_PutAsync(self: *const T, objWbemSink: *ISWbemSink, objWbemObject: *ISWbemObjectEx, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemAsyncContext: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemServicesEx.VTable, self.vtable).PutAsync(@ptrCast(*const ISWbemServicesEx, self), objWbemSink, objWbemObject, iFlags, objWbemNamedValueSet, objWbemAsyncContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemObjectEx_Value = @import("../zig.zig").Guid.initString("269AD56A-8A67-4129-BC8C-0506DCFE9880");
pub const IID_ISWbemObjectEx = &IID_ISWbemObjectEx_Value;
pub const ISWbemObjectEx = extern struct {
    pub const VTable = extern struct {
        base: ISWbemObject.VTable,
        Refresh_: fn(
            self: *const ISWbemObjectEx,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SystemProperties_: fn(
            self: *const ISWbemObjectEx,
            objWbemPropertySet: **ISWbemPropertySet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetText_: fn(
            self: *const ISWbemObjectEx,
            iObjectTextFormat: WbemObjectTextFormatEnum,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            bsText: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFromText_: fn(
            self: *const ISWbemObjectEx,
            bsText: BSTR,
            iObjectTextFormat: WbemObjectTextFormatEnum,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISWbemObject.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectEx_Refresh_(self: *const T, iFlags: i32, objWbemNamedValueSet: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectEx.VTable, self.vtable).Refresh_(@ptrCast(*const ISWbemObjectEx, self), iFlags, objWbemNamedValueSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectEx_get_SystemProperties_(self: *const T, objWbemPropertySet: **ISWbemPropertySet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectEx.VTable, self.vtable).get_SystemProperties_(@ptrCast(*const ISWbemObjectEx, self), objWbemPropertySet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectEx_GetText_(self: *const T, iObjectTextFormat: WbemObjectTextFormatEnum, iFlags: i32, objWbemNamedValueSet: *IDispatch, bsText: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectEx.VTable, self.vtable).GetText_(@ptrCast(*const ISWbemObjectEx, self), iObjectTextFormat, iFlags, objWbemNamedValueSet, bsText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemObjectEx_SetFromText_(self: *const T, bsText: BSTR, iObjectTextFormat: WbemObjectTextFormatEnum, iFlags: i32, objWbemNamedValueSet: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemObjectEx.VTable, self.vtable).SetFromText_(@ptrCast(*const ISWbemObjectEx, self), bsText, iObjectTextFormat, iFlags, objWbemNamedValueSet);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemDateTime_Value = @import("../zig.zig").Guid.initString("5E97458A-CF77-11D3-B38F-00105A1F473A");
pub const IID_ISWbemDateTime = &IID_ISWbemDateTime_Value;
pub const ISWbemDateTime = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Value: fn(
            self: *const ISWbemDateTime,
            strValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Value: fn(
            self: *const ISWbemDateTime,
            strValue: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Year: fn(
            self: *const ISWbemDateTime,
            iYear: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Year: fn(
            self: *const ISWbemDateTime,
            iYear: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_YearSpecified: fn(
            self: *const ISWbemDateTime,
            bYearSpecified: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_YearSpecified: fn(
            self: *const ISWbemDateTime,
            bYearSpecified: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Month: fn(
            self: *const ISWbemDateTime,
            iMonth: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Month: fn(
            self: *const ISWbemDateTime,
            iMonth: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MonthSpecified: fn(
            self: *const ISWbemDateTime,
            bMonthSpecified: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MonthSpecified: fn(
            self: *const ISWbemDateTime,
            bMonthSpecified: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Day: fn(
            self: *const ISWbemDateTime,
            iDay: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Day: fn(
            self: *const ISWbemDateTime,
            iDay: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DaySpecified: fn(
            self: *const ISWbemDateTime,
            bDaySpecified: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DaySpecified: fn(
            self: *const ISWbemDateTime,
            bDaySpecified: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Hours: fn(
            self: *const ISWbemDateTime,
            iHours: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Hours: fn(
            self: *const ISWbemDateTime,
            iHours: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_HoursSpecified: fn(
            self: *const ISWbemDateTime,
            bHoursSpecified: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_HoursSpecified: fn(
            self: *const ISWbemDateTime,
            bHoursSpecified: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Minutes: fn(
            self: *const ISWbemDateTime,
            iMinutes: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Minutes: fn(
            self: *const ISWbemDateTime,
            iMinutes: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MinutesSpecified: fn(
            self: *const ISWbemDateTime,
            bMinutesSpecified: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MinutesSpecified: fn(
            self: *const ISWbemDateTime,
            bMinutesSpecified: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Seconds: fn(
            self: *const ISWbemDateTime,
            iSeconds: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Seconds: fn(
            self: *const ISWbemDateTime,
            iSeconds: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SecondsSpecified: fn(
            self: *const ISWbemDateTime,
            bSecondsSpecified: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SecondsSpecified: fn(
            self: *const ISWbemDateTime,
            bSecondsSpecified: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Microseconds: fn(
            self: *const ISWbemDateTime,
            iMicroseconds: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Microseconds: fn(
            self: *const ISWbemDateTime,
            iMicroseconds: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MicrosecondsSpecified: fn(
            self: *const ISWbemDateTime,
            bMicrosecondsSpecified: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MicrosecondsSpecified: fn(
            self: *const ISWbemDateTime,
            bMicrosecondsSpecified: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UTC: fn(
            self: *const ISWbemDateTime,
            iUTC: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_UTC: fn(
            self: *const ISWbemDateTime,
            iUTC: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UTCSpecified: fn(
            self: *const ISWbemDateTime,
            bUTCSpecified: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_UTCSpecified: fn(
            self: *const ISWbemDateTime,
            bUTCSpecified: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsInterval: fn(
            self: *const ISWbemDateTime,
            bIsInterval: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_IsInterval: fn(
            self: *const ISWbemDateTime,
            bIsInterval: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVarDate: fn(
            self: *const ISWbemDateTime,
            bIsLocal: i16,
            dVarDate: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVarDate: fn(
            self: *const ISWbemDateTime,
            dVarDate: f64,
            bIsLocal: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileTime: fn(
            self: *const ISWbemDateTime,
            bIsLocal: i16,
            strFileTime: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFileTime: fn(
            self: *const ISWbemDateTime,
            strFileTime: BSTR,
            bIsLocal: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_get_Value(self: *const T, strValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).get_Value(@ptrCast(*const ISWbemDateTime, self), strValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_put_Value(self: *const T, strValue: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).put_Value(@ptrCast(*const ISWbemDateTime, self), strValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_get_Year(self: *const T, iYear: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).get_Year(@ptrCast(*const ISWbemDateTime, self), iYear);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_put_Year(self: *const T, iYear: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).put_Year(@ptrCast(*const ISWbemDateTime, self), iYear);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_get_YearSpecified(self: *const T, bYearSpecified: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).get_YearSpecified(@ptrCast(*const ISWbemDateTime, self), bYearSpecified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_put_YearSpecified(self: *const T, bYearSpecified: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).put_YearSpecified(@ptrCast(*const ISWbemDateTime, self), bYearSpecified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_get_Month(self: *const T, iMonth: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).get_Month(@ptrCast(*const ISWbemDateTime, self), iMonth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_put_Month(self: *const T, iMonth: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).put_Month(@ptrCast(*const ISWbemDateTime, self), iMonth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_get_MonthSpecified(self: *const T, bMonthSpecified: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).get_MonthSpecified(@ptrCast(*const ISWbemDateTime, self), bMonthSpecified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_put_MonthSpecified(self: *const T, bMonthSpecified: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).put_MonthSpecified(@ptrCast(*const ISWbemDateTime, self), bMonthSpecified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_get_Day(self: *const T, iDay: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).get_Day(@ptrCast(*const ISWbemDateTime, self), iDay);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_put_Day(self: *const T, iDay: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).put_Day(@ptrCast(*const ISWbemDateTime, self), iDay);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_get_DaySpecified(self: *const T, bDaySpecified: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).get_DaySpecified(@ptrCast(*const ISWbemDateTime, self), bDaySpecified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_put_DaySpecified(self: *const T, bDaySpecified: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).put_DaySpecified(@ptrCast(*const ISWbemDateTime, self), bDaySpecified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_get_Hours(self: *const T, iHours: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).get_Hours(@ptrCast(*const ISWbemDateTime, self), iHours);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_put_Hours(self: *const T, iHours: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).put_Hours(@ptrCast(*const ISWbemDateTime, self), iHours);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_get_HoursSpecified(self: *const T, bHoursSpecified: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).get_HoursSpecified(@ptrCast(*const ISWbemDateTime, self), bHoursSpecified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_put_HoursSpecified(self: *const T, bHoursSpecified: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).put_HoursSpecified(@ptrCast(*const ISWbemDateTime, self), bHoursSpecified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_get_Minutes(self: *const T, iMinutes: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).get_Minutes(@ptrCast(*const ISWbemDateTime, self), iMinutes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_put_Minutes(self: *const T, iMinutes: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).put_Minutes(@ptrCast(*const ISWbemDateTime, self), iMinutes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_get_MinutesSpecified(self: *const T, bMinutesSpecified: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).get_MinutesSpecified(@ptrCast(*const ISWbemDateTime, self), bMinutesSpecified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_put_MinutesSpecified(self: *const T, bMinutesSpecified: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).put_MinutesSpecified(@ptrCast(*const ISWbemDateTime, self), bMinutesSpecified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_get_Seconds(self: *const T, iSeconds: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).get_Seconds(@ptrCast(*const ISWbemDateTime, self), iSeconds);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_put_Seconds(self: *const T, iSeconds: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).put_Seconds(@ptrCast(*const ISWbemDateTime, self), iSeconds);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_get_SecondsSpecified(self: *const T, bSecondsSpecified: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).get_SecondsSpecified(@ptrCast(*const ISWbemDateTime, self), bSecondsSpecified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_put_SecondsSpecified(self: *const T, bSecondsSpecified: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).put_SecondsSpecified(@ptrCast(*const ISWbemDateTime, self), bSecondsSpecified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_get_Microseconds(self: *const T, iMicroseconds: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).get_Microseconds(@ptrCast(*const ISWbemDateTime, self), iMicroseconds);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_put_Microseconds(self: *const T, iMicroseconds: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).put_Microseconds(@ptrCast(*const ISWbemDateTime, self), iMicroseconds);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_get_MicrosecondsSpecified(self: *const T, bMicrosecondsSpecified: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).get_MicrosecondsSpecified(@ptrCast(*const ISWbemDateTime, self), bMicrosecondsSpecified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_put_MicrosecondsSpecified(self: *const T, bMicrosecondsSpecified: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).put_MicrosecondsSpecified(@ptrCast(*const ISWbemDateTime, self), bMicrosecondsSpecified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_get_UTC(self: *const T, iUTC: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).get_UTC(@ptrCast(*const ISWbemDateTime, self), iUTC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_put_UTC(self: *const T, iUTC: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).put_UTC(@ptrCast(*const ISWbemDateTime, self), iUTC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_get_UTCSpecified(self: *const T, bUTCSpecified: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).get_UTCSpecified(@ptrCast(*const ISWbemDateTime, self), bUTCSpecified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_put_UTCSpecified(self: *const T, bUTCSpecified: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).put_UTCSpecified(@ptrCast(*const ISWbemDateTime, self), bUTCSpecified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_get_IsInterval(self: *const T, bIsInterval: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).get_IsInterval(@ptrCast(*const ISWbemDateTime, self), bIsInterval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_put_IsInterval(self: *const T, bIsInterval: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).put_IsInterval(@ptrCast(*const ISWbemDateTime, self), bIsInterval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_GetVarDate(self: *const T, bIsLocal: i16, dVarDate: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).GetVarDate(@ptrCast(*const ISWbemDateTime, self), bIsLocal, dVarDate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_SetVarDate(self: *const T, dVarDate: f64, bIsLocal: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).SetVarDate(@ptrCast(*const ISWbemDateTime, self), dVarDate, bIsLocal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_GetFileTime(self: *const T, bIsLocal: i16, strFileTime: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).GetFileTime(@ptrCast(*const ISWbemDateTime, self), bIsLocal, strFileTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemDateTime_SetFileTime(self: *const T, strFileTime: BSTR, bIsLocal: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemDateTime.VTable, self.vtable).SetFileTime(@ptrCast(*const ISWbemDateTime, self), strFileTime, bIsLocal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemRefresher_Value = @import("../zig.zig").Guid.initString("14D8250E-D9C2-11D3-B38F-00105A1F473A");
pub const IID_ISWbemRefresher = &IID_ISWbemRefresher_Value;
pub const ISWbemRefresher = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get__NewEnum: fn(
            self: *const ISWbemRefresher,
            pUnk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const ISWbemRefresher,
            iIndex: i32,
            objWbemRefreshableItem: **ISWbemRefreshableItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ISWbemRefresher,
            iCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ISWbemRefresher,
            objWbemServices: *ISWbemServicesEx,
            bsInstancePath: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemRefreshableItem: **ISWbemRefreshableItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddEnum: fn(
            self: *const ISWbemRefresher,
            objWbemServices: *ISWbemServicesEx,
            bsClassName: BSTR,
            iFlags: i32,
            objWbemNamedValueSet: *IDispatch,
            objWbemRefreshableItem: **ISWbemRefreshableItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ISWbemRefresher,
            iIndex: i32,
            iFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISWbemRefresher,
            iFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AutoReconnect: fn(
            self: *const ISWbemRefresher,
            bCount: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AutoReconnect: fn(
            self: *const ISWbemRefresher,
            bCount: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAll: fn(
            self: *const ISWbemRefresher,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemRefresher_get__NewEnum(self: *const T, pUnk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemRefresher.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISWbemRefresher, self), pUnk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemRefresher_Item(self: *const T, iIndex: i32, objWbemRefreshableItem: **ISWbemRefreshableItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemRefresher.VTable, self.vtable).Item(@ptrCast(*const ISWbemRefresher, self), iIndex, objWbemRefreshableItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemRefresher_get_Count(self: *const T, iCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemRefresher.VTable, self.vtable).get_Count(@ptrCast(*const ISWbemRefresher, self), iCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemRefresher_Add(self: *const T, objWbemServices: *ISWbemServicesEx, bsInstancePath: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemRefreshableItem: **ISWbemRefreshableItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemRefresher.VTable, self.vtable).Add(@ptrCast(*const ISWbemRefresher, self), objWbemServices, bsInstancePath, iFlags, objWbemNamedValueSet, objWbemRefreshableItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemRefresher_AddEnum(self: *const T, objWbemServices: *ISWbemServicesEx, bsClassName: BSTR, iFlags: i32, objWbemNamedValueSet: *IDispatch, objWbemRefreshableItem: **ISWbemRefreshableItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemRefresher.VTable, self.vtable).AddEnum(@ptrCast(*const ISWbemRefresher, self), objWbemServices, bsClassName, iFlags, objWbemNamedValueSet, objWbemRefreshableItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemRefresher_Remove(self: *const T, iIndex: i32, iFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemRefresher.VTable, self.vtable).Remove(@ptrCast(*const ISWbemRefresher, self), iIndex, iFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemRefresher_Refresh(self: *const T, iFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemRefresher.VTable, self.vtable).Refresh(@ptrCast(*const ISWbemRefresher, self), iFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemRefresher_get_AutoReconnect(self: *const T, bCount: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemRefresher.VTable, self.vtable).get_AutoReconnect(@ptrCast(*const ISWbemRefresher, self), bCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemRefresher_put_AutoReconnect(self: *const T, bCount: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemRefresher.VTable, self.vtable).put_AutoReconnect(@ptrCast(*const ISWbemRefresher, self), bCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemRefresher_DeleteAll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemRefresher.VTable, self.vtable).DeleteAll(@ptrCast(*const ISWbemRefresher, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemRefreshableItem_Value = @import("../zig.zig").Guid.initString("5AD4BF92-DAAB-11D3-B38F-00105A1F473A");
pub const IID_ISWbemRefreshableItem = &IID_ISWbemRefreshableItem_Value;
pub const ISWbemRefreshableItem = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Index: fn(
            self: *const ISWbemRefreshableItem,
            iIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Refresher: fn(
            self: *const ISWbemRefreshableItem,
            objWbemRefresher: **ISWbemRefresher,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsSet: fn(
            self: *const ISWbemRefreshableItem,
            bIsSet: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Object: fn(
            self: *const ISWbemRefreshableItem,
            objWbemObject: **ISWbemObjectEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ObjectSet: fn(
            self: *const ISWbemRefreshableItem,
            objWbemObjectSet: **ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ISWbemRefreshableItem,
            iFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemRefreshableItem_get_Index(self: *const T, iIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemRefreshableItem.VTable, self.vtable).get_Index(@ptrCast(*const ISWbemRefreshableItem, self), iIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemRefreshableItem_get_Refresher(self: *const T, objWbemRefresher: **ISWbemRefresher) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemRefreshableItem.VTable, self.vtable).get_Refresher(@ptrCast(*const ISWbemRefreshableItem, self), objWbemRefresher);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemRefreshableItem_get_IsSet(self: *const T, bIsSet: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemRefreshableItem.VTable, self.vtable).get_IsSet(@ptrCast(*const ISWbemRefreshableItem, self), bIsSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemRefreshableItem_get_Object(self: *const T, objWbemObject: **ISWbemObjectEx) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemRefreshableItem.VTable, self.vtable).get_Object(@ptrCast(*const ISWbemRefreshableItem, self), objWbemObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemRefreshableItem_get_ObjectSet(self: *const T, objWbemObjectSet: **ISWbemObjectSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemRefreshableItem.VTable, self.vtable).get_ObjectSet(@ptrCast(*const ISWbemRefreshableItem, self), objWbemObjectSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISWbemRefreshableItem_Remove(self: *const T, iFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISWbemRefreshableItem.VTable, self.vtable).Remove(@ptrCast(*const ISWbemRefreshableItem, self), iFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (8)
//--------------------------------------------------------------------------------
const SAFEARRAY = @import("automation.zig").SAFEARRAY;
const IDispatch = @import("automation.zig").IDispatch;
const PWSTR = @import("system_services.zig").PWSTR;
const VARIANT = @import("automation.zig").VARIANT;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const BSTR = @import("automation.zig").BSTR;
const BOOL = @import("system_services.zig").BOOL;

test {
    const constant_export_count = 0;
    const type_export_count = 122;
    const enum_value_export_count = 709;
    const com_iface_id_export_count = 62;
    const com_class_id_export_count = 40;
    const func_export_count = 0;
    const unicode_alias_count = 0;
    const import_count = 8;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

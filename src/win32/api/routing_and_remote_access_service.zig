//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (217)
//--------------------------------------------------------------------------------
pub const RASAPIVERSION = extern enum(i32) {
    _500 = 1,
    _501 = 2,
    _600 = 3,
    _601 = 4,
};
pub const RASAPIVERSION_500 = RASAPIVERSION._500;
pub const RASAPIVERSION_501 = RASAPIVERSION._501;
pub const RASAPIVERSION_600 = RASAPIVERSION._600;
pub const RASAPIVERSION_601 = RASAPIVERSION._601;

pub const RASIPADDR = extern struct {
    a: u8,
    b: u8,
    c: u8,
    d: u8,
};

pub const tagRASTUNNELENDPOINT = extern struct {
    dwType: u32,
    Anonymous: tagRASTUNNELENDPOINT._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const HRASCONN__ = extern struct {
    unused: i32,
};

pub const tagRASCONNW = extern struct {
    dwSize: u32,
    hrasconn: *HRASCONN__,
    szEntryName: [257]u16,
    szDeviceType: [17]u16,
    szDeviceName: [129]u16,
    szPhonebook: [260]u16,
    dwSubEntry: u32,
    guidEntry: Guid,
    dwFlags: u32,
    luid: LUID,
    guidCorrelationId: Guid,
};

pub const tagRASCONNA = extern struct {
    dwSize: u32,
    hrasconn: *HRASCONN__,
    szEntryName: [257]i8,
    szDeviceType: [17]i8,
    szDeviceName: [129]i8,
    szPhonebook: [260]i8,
    dwSubEntry: u32,
    guidEntry: Guid,
    dwFlags: u32,
    luid: LUID,
    guidCorrelationId: Guid,
};

pub const tagRASCONNSTATE = extern enum(i32) {
    RASCS_OpenPort = 0,
    RASCS_PortOpened = 1,
    RASCS_ConnectDevice = 2,
    RASCS_DeviceConnected = 3,
    RASCS_AllDevicesConnected = 4,
    RASCS_Authenticate = 5,
    RASCS_AuthNotify = 6,
    RASCS_AuthRetry = 7,
    RASCS_AuthCallback = 8,
    RASCS_AuthChangePassword = 9,
    RASCS_AuthProject = 10,
    RASCS_AuthLinkSpeed = 11,
    RASCS_AuthAck = 12,
    RASCS_ReAuthenticate = 13,
    RASCS_Authenticated = 14,
    RASCS_PrepareForCallback = 15,
    RASCS_WaitForModemReset = 16,
    RASCS_WaitForCallback = 17,
    RASCS_Projected = 18,
    RASCS_StartAuthentication = 19,
    RASCS_CallbackComplete = 20,
    RASCS_LogonNetwork = 21,
    RASCS_SubEntryConnected = 22,
    RASCS_SubEntryDisconnected = 23,
    RASCS_ApplySettings = 24,
    RASCS_Interactive = 4096,
    RASCS_RetryAuthentication = 4097,
    RASCS_CallbackSetByCaller = 4098,
    RASCS_PasswordExpired = 4099,
    RASCS_InvokeEapUI = 4100,
    RASCS_Connected = 8192,
    RASCS_Disconnected = 8193,
};
pub const RASCS_OpenPort = tagRASCONNSTATE.RASCS_OpenPort;
pub const RASCS_PortOpened = tagRASCONNSTATE.RASCS_PortOpened;
pub const RASCS_ConnectDevice = tagRASCONNSTATE.RASCS_ConnectDevice;
pub const RASCS_DeviceConnected = tagRASCONNSTATE.RASCS_DeviceConnected;
pub const RASCS_AllDevicesConnected = tagRASCONNSTATE.RASCS_AllDevicesConnected;
pub const RASCS_Authenticate = tagRASCONNSTATE.RASCS_Authenticate;
pub const RASCS_AuthNotify = tagRASCONNSTATE.RASCS_AuthNotify;
pub const RASCS_AuthRetry = tagRASCONNSTATE.RASCS_AuthRetry;
pub const RASCS_AuthCallback = tagRASCONNSTATE.RASCS_AuthCallback;
pub const RASCS_AuthChangePassword = tagRASCONNSTATE.RASCS_AuthChangePassword;
pub const RASCS_AuthProject = tagRASCONNSTATE.RASCS_AuthProject;
pub const RASCS_AuthLinkSpeed = tagRASCONNSTATE.RASCS_AuthLinkSpeed;
pub const RASCS_AuthAck = tagRASCONNSTATE.RASCS_AuthAck;
pub const RASCS_ReAuthenticate = tagRASCONNSTATE.RASCS_ReAuthenticate;
pub const RASCS_Authenticated = tagRASCONNSTATE.RASCS_Authenticated;
pub const RASCS_PrepareForCallback = tagRASCONNSTATE.RASCS_PrepareForCallback;
pub const RASCS_WaitForModemReset = tagRASCONNSTATE.RASCS_WaitForModemReset;
pub const RASCS_WaitForCallback = tagRASCONNSTATE.RASCS_WaitForCallback;
pub const RASCS_Projected = tagRASCONNSTATE.RASCS_Projected;
pub const RASCS_StartAuthentication = tagRASCONNSTATE.RASCS_StartAuthentication;
pub const RASCS_CallbackComplete = tagRASCONNSTATE.RASCS_CallbackComplete;
pub const RASCS_LogonNetwork = tagRASCONNSTATE.RASCS_LogonNetwork;
pub const RASCS_SubEntryConnected = tagRASCONNSTATE.RASCS_SubEntryConnected;
pub const RASCS_SubEntryDisconnected = tagRASCONNSTATE.RASCS_SubEntryDisconnected;
pub const RASCS_ApplySettings = tagRASCONNSTATE.RASCS_ApplySettings;
pub const RASCS_Interactive = tagRASCONNSTATE.RASCS_Interactive;
pub const RASCS_RetryAuthentication = tagRASCONNSTATE.RASCS_RetryAuthentication;
pub const RASCS_CallbackSetByCaller = tagRASCONNSTATE.RASCS_CallbackSetByCaller;
pub const RASCS_PasswordExpired = tagRASCONNSTATE.RASCS_PasswordExpired;
pub const RASCS_InvokeEapUI = tagRASCONNSTATE.RASCS_InvokeEapUI;
pub const RASCS_Connected = tagRASCONNSTATE.RASCS_Connected;
pub const RASCS_Disconnected = tagRASCONNSTATE.RASCS_Disconnected;

pub const tagRASCONNSUBSTATE = extern enum(i32) {
    RASCSS_None = 0,
    RASCSS_Dormant = 1,
    RASCSS_Reconnecting = 2,
    RASCSS_Reconnected = 8192,
};
pub const RASCSS_None = tagRASCONNSUBSTATE.RASCSS_None;
pub const RASCSS_Dormant = tagRASCONNSUBSTATE.RASCSS_Dormant;
pub const RASCSS_Reconnecting = tagRASCONNSUBSTATE.RASCSS_Reconnecting;
pub const RASCSS_Reconnected = tagRASCONNSUBSTATE.RASCSS_Reconnected;

pub const tagRASCONNSTATUSW = extern struct {
    dwSize: u32,
    rasconnstate: tagRASCONNSTATE,
    dwError: u32,
    szDeviceType: [17]u16,
    szDeviceName: [129]u16,
    szPhoneNumber: [129]u16,
    localEndPoint: tagRASTUNNELENDPOINT,
    remoteEndPoint: tagRASTUNNELENDPOINT,
    rasconnsubstate: tagRASCONNSUBSTATE,
};

pub const tagRASCONNSTATUSA = extern struct {
    dwSize: u32,
    rasconnstate: tagRASCONNSTATE,
    dwError: u32,
    szDeviceType: [17]i8,
    szDeviceName: [129]i8,
    szPhoneNumber: [129]i8,
    localEndPoint: tagRASTUNNELENDPOINT,
    remoteEndPoint: tagRASTUNNELENDPOINT,
    rasconnsubstate: tagRASCONNSUBSTATE,
};

pub const tagRASDIALPARAMSW = extern struct {
    dwSize: u32,
    szEntryName: [257]u16,
    szPhoneNumber: [129]u16,
    szCallbackNumber: [129]u16,
    szUserName: [257]u16,
    szPassword: [257]u16,
    szDomain: [16]u16,
    dwSubEntry: u32,
    dwCallbackId: ?*c_void,
    dwIfIndex: u32,
    szEncPassword: PWSTR,
};

pub const tagRASDIALPARAMSA = extern struct {
    dwSize: u32,
    szEntryName: [257]i8,
    szPhoneNumber: [129]i8,
    szCallbackNumber: [129]i8,
    szUserName: [257]i8,
    szPassword: [257]i8,
    szDomain: [16]i8,
    dwSubEntry: u32,
    dwCallbackId: ?*c_void,
    dwIfIndex: u32,
    szEncPassword: PSTR,
};

pub const tagRASEAPINFO = extern struct {
    dwSizeofEapInfo: u32,
    pbEapInfo: *u8,
};

pub const RASDEVSPECIFICINFO = extern struct {
    dwSize: u32,
    pbDevSpecificInfo: *u8,
};

pub const tagRASDIALEXTENSIONS = extern struct {
    dwSize: u32,
    dwfOptions: u32,
    hwndParent: HWND,
    reserved: ?*c_void,
    reserved1: ?*c_void,
    RasEapInfo: tagRASEAPINFO,
    fSkipPppAuth: BOOL,
    RasDevSpecificInfo: RASDEVSPECIFICINFO,
};

pub const tagRASENTRYNAMEW = extern struct {
    dwSize: u32,
    szEntryName: [257]u16,
    dwFlags: u32,
    szPhonebookPath: [261]u16,
};

pub const tagRASENTRYNAMEA = extern struct {
    dwSize: u32,
    szEntryName: [257]i8,
    dwFlags: u32,
    szPhonebookPath: [261]i8,
};

pub const tagRASPROJECTION = extern enum(i32) {
    RASP_Amb = 65536,
    RASP_PppNbf = 32831,
    RASP_PppIpx = 32811,
    RASP_PppIp = 32801,
    RASP_PppCcp = 33021,
    RASP_PppLcp = 49185,
    RASP_PppIpv6 = 32855,
};
pub const RASP_Amb = tagRASPROJECTION.RASP_Amb;
pub const RASP_PppNbf = tagRASPROJECTION.RASP_PppNbf;
pub const RASP_PppIpx = tagRASPROJECTION.RASP_PppIpx;
pub const RASP_PppIp = tagRASPROJECTION.RASP_PppIp;
pub const RASP_PppCcp = tagRASPROJECTION.RASP_PppCcp;
pub const RASP_PppLcp = tagRASPROJECTION.RASP_PppLcp;
pub const RASP_PppIpv6 = tagRASPROJECTION.RASP_PppIpv6;

pub const tagRASAMBW = extern struct {
    dwSize: u32,
    dwError: u32,
    szNetBiosError: [17]u16,
    bLana: u8,
};

pub const tagRASAMBA = extern struct {
    dwSize: u32,
    dwError: u32,
    szNetBiosError: [17]i8,
    bLana: u8,
};

pub const tagRASPPPNBFW = extern struct {
    dwSize: u32,
    dwError: u32,
    dwNetBiosError: u32,
    szNetBiosError: [17]u16,
    szWorkstationName: [17]u16,
    bLana: u8,
};

pub const tagRASPPPNBFA = extern struct {
    dwSize: u32,
    dwError: u32,
    dwNetBiosError: u32,
    szNetBiosError: [17]i8,
    szWorkstationName: [17]i8,
    bLana: u8,
};

pub const tagRASIPXW = extern struct {
    dwSize: u32,
    dwError: u32,
    szIpxAddress: [22]u16,
};

pub const tagRASPPPIPXA = extern struct {
    dwSize: u32,
    dwError: u32,
    szIpxAddress: [22]i8,
};

pub const tagRASPPPIPW = extern struct {
    dwSize: u32,
    dwError: u32,
    szIpAddress: [16]u16,
    szServerIpAddress: [16]u16,
    dwOptions: u32,
    dwServerOptions: u32,
};

pub const tagRASPPPIPA = extern struct {
    dwSize: u32,
    dwError: u32,
    szIpAddress: [16]i8,
    szServerIpAddress: [16]i8,
    dwOptions: u32,
    dwServerOptions: u32,
};

pub const tagRASPPPIPV6 = extern struct {
    dwSize: u32,
    dwError: u32,
    bLocalInterfaceIdentifier: [8]u8,
    bPeerInterfaceIdentifier: [8]u8,
    bLocalCompressionProtocol: [2]u8,
    bPeerCompressionProtocol: [2]u8,
};

pub const tagRASPPPLCPW = extern struct {
    dwSize: u32,
    fBundled: BOOL,
    dwError: u32,
    dwAuthenticationProtocol: u32,
    dwAuthenticationData: u32,
    dwEapTypeId: u32,
    dwServerAuthenticationProtocol: u32,
    dwServerAuthenticationData: u32,
    dwServerEapTypeId: u32,
    fMultilink: BOOL,
    dwTerminateReason: u32,
    dwServerTerminateReason: u32,
    szReplyMessage: [1024]u16,
    dwOptions: u32,
    dwServerOptions: u32,
};

pub const tagRASPPPLCPA = extern struct {
    dwSize: u32,
    fBundled: BOOL,
    dwError: u32,
    dwAuthenticationProtocol: u32,
    dwAuthenticationData: u32,
    dwEapTypeId: u32,
    dwServerAuthenticationProtocol: u32,
    dwServerAuthenticationData: u32,
    dwServerEapTypeId: u32,
    fMultilink: BOOL,
    dwTerminateReason: u32,
    dwServerTerminateReason: u32,
    szReplyMessage: [1024]i8,
    dwOptions: u32,
    dwServerOptions: u32,
};

pub const tagRASPPPCCP = extern struct {
    dwSize: u32,
    dwError: u32,
    dwCompressionAlgorithm: u32,
    dwOptions: u32,
    dwServerCompressionAlgorithm: u32,
    dwServerOptions: u32,
};

pub const RASPPP_PROJECTION_INFO = extern struct {
    dwIPv4NegotiationError: u32,
    ipv4Address: in_addr,
    ipv4ServerAddress: in_addr,
    dwIPv4Options: u32,
    dwIPv4ServerOptions: u32,
    dwIPv6NegotiationError: u32,
    bInterfaceIdentifier: [8]u8,
    bServerInterfaceIdentifier: [8]u8,
    fBundled: BOOL,
    fMultilink: BOOL,
    dwAuthenticationProtocol: u32,
    dwAuthenticationData: u32,
    dwServerAuthenticationProtocol: u32,
    dwServerAuthenticationData: u32,
    dwEapTypeId: u32,
    dwServerEapTypeId: u32,
    dwLcpOptions: u32,
    dwLcpServerOptions: u32,
    dwCcpError: u32,
    dwCcpCompressionAlgorithm: u32,
    dwCcpServerCompressionAlgorithm: u32,
    dwCcpOptions: u32,
    dwCcpServerOptions: u32,
};

pub const RASIKEV2_PROJECTION_INFO = extern struct {
    dwIPv4NegotiationError: u32,
    ipv4Address: in_addr,
    ipv4ServerAddress: in_addr,
    dwIPv6NegotiationError: u32,
    ipv6Address: in6_addr,
    ipv6ServerAddress: in6_addr,
    dwPrefixLength: u32,
    dwAuthenticationProtocol: u32,
    dwEapTypeId: u32,
    dwFlags: u32,
    dwEncryptionMethod: u32,
    numIPv4ServerAddresses: u32,
    ipv4ServerAddresses: *in_addr,
    numIPv6ServerAddresses: u32,
    ipv6ServerAddresses: *in6_addr,
};

pub const RASPROJECTION_INFO_TYPE = extern enum(i32) {
    PROJECTION_INFO_TYPE_PPP = 1,
    PROJECTION_INFO_TYPE_IKEv2 = 2,
};
pub const PROJECTION_INFO_TYPE_PPP = RASPROJECTION_INFO_TYPE.PROJECTION_INFO_TYPE_PPP;
pub const PROJECTION_INFO_TYPE_IKEv2 = RASPROJECTION_INFO_TYPE.PROJECTION_INFO_TYPE_IKEv2;

pub const IKEV2_ID_PAYLOAD_TYPE = extern enum(i32) {
    INVALID = 0,
    IPV4_ADDR = 1,
    FQDN = 2,
    RFC822_ADDR = 3,
    RESERVED1 = 4,
    ID_IPV6_ADDR = 5,
    RESERVED2 = 6,
    RESERVED3 = 7,
    RESERVED4 = 8,
    DER_ASN1_DN = 9,
    DER_ASN1_GN = 10,
    KEY_ID = 11,
    MAX = 12,
};
pub const IKEV2_ID_PAYLOAD_TYPE_INVALID = IKEV2_ID_PAYLOAD_TYPE.INVALID;
pub const IKEV2_ID_PAYLOAD_TYPE_IPV4_ADDR = IKEV2_ID_PAYLOAD_TYPE.IPV4_ADDR;
pub const IKEV2_ID_PAYLOAD_TYPE_FQDN = IKEV2_ID_PAYLOAD_TYPE.FQDN;
pub const IKEV2_ID_PAYLOAD_TYPE_RFC822_ADDR = IKEV2_ID_PAYLOAD_TYPE.RFC822_ADDR;
pub const IKEV2_ID_PAYLOAD_TYPE_RESERVED1 = IKEV2_ID_PAYLOAD_TYPE.RESERVED1;
pub const IKEV2_ID_PAYLOAD_TYPE_ID_IPV6_ADDR = IKEV2_ID_PAYLOAD_TYPE.ID_IPV6_ADDR;
pub const IKEV2_ID_PAYLOAD_TYPE_RESERVED2 = IKEV2_ID_PAYLOAD_TYPE.RESERVED2;
pub const IKEV2_ID_PAYLOAD_TYPE_RESERVED3 = IKEV2_ID_PAYLOAD_TYPE.RESERVED3;
pub const IKEV2_ID_PAYLOAD_TYPE_RESERVED4 = IKEV2_ID_PAYLOAD_TYPE.RESERVED4;
pub const IKEV2_ID_PAYLOAD_TYPE_DER_ASN1_DN = IKEV2_ID_PAYLOAD_TYPE.DER_ASN1_DN;
pub const IKEV2_ID_PAYLOAD_TYPE_DER_ASN1_GN = IKEV2_ID_PAYLOAD_TYPE.DER_ASN1_GN;
pub const IKEV2_ID_PAYLOAD_TYPE_KEY_ID = IKEV2_ID_PAYLOAD_TYPE.KEY_ID;
pub const IKEV2_ID_PAYLOAD_TYPE_MAX = IKEV2_ID_PAYLOAD_TYPE.MAX;

pub const RAS_PROJECTION_INFO = extern struct {
    version: RASAPIVERSION,
    type: RASPROJECTION_INFO_TYPE,
    Anonymous: RAS_PROJECTION_INFO._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const RASDIALFUNC = fn(
    param0: u32,
    param1: tagRASCONNSTATE,
    param2: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const RASDIALFUNC1 = fn(
    param0: *HRASCONN__,
    param1: u32,
    param2: tagRASCONNSTATE,
    param3: u32,
    param4: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const RASDIALFUNC2 = fn(
    param0: ?*c_void,
    param1: u32,
    param2: *HRASCONN__,
    param3: u32,
    param4: tagRASCONNSTATE,
    param5: u32,
    param6: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const tagRASDEVINFOW = extern struct {
    dwSize: u32,
    szDeviceType: [17]u16,
    szDeviceName: [129]u16,
};

pub const tagRASDEVINFOA = extern struct {
    dwSize: u32,
    szDeviceType: [17]i8,
    szDeviceName: [129]i8,
};

pub const RASCTRYINFO = extern struct {
    dwSize: u32,
    dwCountryID: u32,
    dwNextCountryID: u32,
    dwCountryCode: u32,
    dwCountryNameOffset: u32,
};

pub const tagRASENTRYA = extern struct {
    dwSize: u32,
    dwfOptions: u32,
    dwCountryID: u32,
    dwCountryCode: u32,
    szAreaCode: [11]i8,
    szLocalPhoneNumber: [129]i8,
    dwAlternateOffset: u32,
    ipaddr: RASIPADDR,
    ipaddrDns: RASIPADDR,
    ipaddrDnsAlt: RASIPADDR,
    ipaddrWins: RASIPADDR,
    ipaddrWinsAlt: RASIPADDR,
    dwFrameSize: u32,
    dwfNetProtocols: u32,
    dwFramingProtocol: u32,
    szScript: [260]i8,
    szAutodialDll: [260]i8,
    szAutodialFunc: [260]i8,
    szDeviceType: [17]i8,
    szDeviceName: [129]i8,
    szX25PadType: [33]i8,
    szX25Address: [201]i8,
    szX25Facilities: [201]i8,
    szX25UserData: [201]i8,
    dwChannels: u32,
    dwReserved1: u32,
    dwReserved2: u32,
    dwSubEntries: u32,
    dwDialMode: u32,
    dwDialExtraPercent: u32,
    dwDialExtraSampleSeconds: u32,
    dwHangUpExtraPercent: u32,
    dwHangUpExtraSampleSeconds: u32,
    dwIdleDisconnectSeconds: u32,
    dwType: u32,
    dwEncryptionType: u32,
    dwCustomAuthKey: u32,
    guidId: Guid,
    szCustomDialDll: [260]i8,
    dwVpnStrategy: u32,
    dwfOptions2: u32,
    dwfOptions3: u32,
    szDnsSuffix: [256]i8,
    dwTcpWindowSize: u32,
    szPrerequisitePbk: [260]i8,
    szPrerequisiteEntry: [257]i8,
    dwRedialCount: u32,
    dwRedialPause: u32,
    ipv6addrDns: in6_addr,
    ipv6addrDnsAlt: in6_addr,
    dwIPv4InterfaceMetric: u32,
    dwIPv6InterfaceMetric: u32,
    ipv6addr: in6_addr,
    dwIPv6PrefixLength: u32,
    dwNetworkOutageTime: u32,
    szIDi: [257]i8,
    szIDr: [257]i8,
    fIsImsConfig: BOOL,
    IdiType: IKEV2_ID_PAYLOAD_TYPE,
    IdrType: IKEV2_ID_PAYLOAD_TYPE,
    fDisableIKEv2Fragmentation: BOOL,
};

pub const tagRASENTRYW = extern struct {
    dwSize: u32,
    dwfOptions: u32,
    dwCountryID: u32,
    dwCountryCode: u32,
    szAreaCode: [11]u16,
    szLocalPhoneNumber: [129]u16,
    dwAlternateOffset: u32,
    ipaddr: RASIPADDR,
    ipaddrDns: RASIPADDR,
    ipaddrDnsAlt: RASIPADDR,
    ipaddrWins: RASIPADDR,
    ipaddrWinsAlt: RASIPADDR,
    dwFrameSize: u32,
    dwfNetProtocols: u32,
    dwFramingProtocol: u32,
    szScript: [260]u16,
    szAutodialDll: [260]u16,
    szAutodialFunc: [260]u16,
    szDeviceType: [17]u16,
    szDeviceName: [129]u16,
    szX25PadType: [33]u16,
    szX25Address: [201]u16,
    szX25Facilities: [201]u16,
    szX25UserData: [201]u16,
    dwChannels: u32,
    dwReserved1: u32,
    dwReserved2: u32,
    dwSubEntries: u32,
    dwDialMode: u32,
    dwDialExtraPercent: u32,
    dwDialExtraSampleSeconds: u32,
    dwHangUpExtraPercent: u32,
    dwHangUpExtraSampleSeconds: u32,
    dwIdleDisconnectSeconds: u32,
    dwType: u32,
    dwEncryptionType: u32,
    dwCustomAuthKey: u32,
    guidId: Guid,
    szCustomDialDll: [260]u16,
    dwVpnStrategy: u32,
    dwfOptions2: u32,
    dwfOptions3: u32,
    szDnsSuffix: [256]u16,
    dwTcpWindowSize: u32,
    szPrerequisitePbk: [260]u16,
    szPrerequisiteEntry: [257]u16,
    dwRedialCount: u32,
    dwRedialPause: u32,
    ipv6addrDns: in6_addr,
    ipv6addrDnsAlt: in6_addr,
    dwIPv4InterfaceMetric: u32,
    dwIPv6InterfaceMetric: u32,
    ipv6addr: in6_addr,
    dwIPv6PrefixLength: u32,
    dwNetworkOutageTime: u32,
    szIDi: [257]u16,
    szIDr: [257]u16,
    fIsImsConfig: BOOL,
    IdiType: IKEV2_ID_PAYLOAD_TYPE,
    IdrType: IKEV2_ID_PAYLOAD_TYPE,
    fDisableIKEv2Fragmentation: BOOL,
};

pub const ORASADFUNC = fn(
    param0: HWND,
    param1: PSTR,
    param2: u32,
    param3: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const tagRASADPARAMS = extern struct {
    dwSize: u32,
    hwndOwner: HWND,
    dwFlags: u32,
    xDlg: i32,
    yDlg: i32,
};

pub const RASADFUNCA = fn(
    param0: PSTR,
    param1: PSTR,
    param2: *tagRASADPARAMS,
    param3: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const RASADFUNCW = fn(
    param0: PWSTR,
    param1: PWSTR,
    param2: *tagRASADPARAMS,
    param3: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const tagRASSUBENTRYA = extern struct {
    dwSize: u32,
    dwfFlags: u32,
    szDeviceType: [17]i8,
    szDeviceName: [129]i8,
    szLocalPhoneNumber: [129]i8,
    dwAlternateOffset: u32,
};

pub const tagRASSUBENTRYW = extern struct {
    dwSize: u32,
    dwfFlags: u32,
    szDeviceType: [17]u16,
    szDeviceName: [129]u16,
    szLocalPhoneNumber: [129]u16,
    dwAlternateOffset: u32,
};

pub const tagRASCREDENTIALSA = extern struct {
    dwSize: u32,
    dwMask: u32,
    szUserName: [257]i8,
    szPassword: [257]i8,
    szDomain: [16]i8,
};

pub const tagRASCREDENTIALSW = extern struct {
    dwSize: u32,
    dwMask: u32,
    szUserName: [257]u16,
    szPassword: [257]u16,
    szDomain: [16]u16,
};

pub const tagRASAUTODIALENTRYA = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwDialingLocation: u32,
    szEntry: [257]i8,
};

pub const tagRASAUTODIALENTRYW = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwDialingLocation: u32,
    szEntry: [257]u16,
};

pub const tagRASEAPUSERIDENTITYA = extern struct {
    szUserName: [257]i8,
    dwSizeofEapInfo: u32,
    pbEapInfo: [1]u8,
};

pub const tagRASEAPUSERIDENTITYW = extern struct {
    szUserName: [257]u16,
    dwSizeofEapInfo: u32,
    pbEapInfo: [1]u8,
};

pub const PFNRASGETBUFFER = fn(
    ppBuffer: **u8,
    pdwSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFNRASFREEBUFFER = fn(
    pBufer: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFNRASSENDBUFFER = fn(
    hPort: HANDLE,
    pBuffer: *u8,
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFNRASRECEIVEBUFFER = fn(
    hPort: HANDLE,
    pBuffer: *u8,
    pdwSize: *u32,
    dwTimeOut: u32,
    hEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFNRASRETRIEVEBUFFER = fn(
    hPort: HANDLE,
    pBuffer: *u8,
    pdwSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const RasCustomScriptExecuteFn = fn(
    hPort: HANDLE,
    lpszPhonebook: [*:0]const u16,
    lpszEntryName: [*:0]const u16,
    pfnRasGetBuffer: PFNRASGETBUFFER,
    pfnRasFreeBuffer: PFNRASFREEBUFFER,
    pfnRasSendBuffer: PFNRASSENDBUFFER,
    pfnRasReceiveBuffer: PFNRASRECEIVEBUFFER,
    pfnRasRetrieveBuffer: PFNRASRETRIEVEBUFFER,
    hWnd: HWND,
    pRasDialParams: *tagRASDIALPARAMSA,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const tagRASCOMMSETTINGS = extern struct {
    dwSize: u32,
    bParity: u8,
    bStop: u8,
    bByteSize: u8,
    bAlign: u8,
};

pub const PFNRASSETCOMMSETTINGS = fn(
    hPort: HANDLE,
    pRasCommSettings: *tagRASCOMMSETTINGS,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const tagRASCUSTOMSCRIPTEXTENSIONS = extern struct {
    dwSize: u32,
    pfnRasSetCommSettings: PFNRASSETCOMMSETTINGS,
};

pub const RAS_STATS = extern struct {
    dwSize: u32,
    dwBytesXmited: u32,
    dwBytesRcved: u32,
    dwFramesXmited: u32,
    dwFramesRcved: u32,
    dwCrcErr: u32,
    dwTimeoutErr: u32,
    dwAlignmentErr: u32,
    dwHardwareOverrunErr: u32,
    dwFramingErr: u32,
    dwBufferOverrunErr: u32,
    dwCompressionRatioIn: u32,
    dwCompressionRatioOut: u32,
    dwBps: u32,
    dwConnectDuration: u32,
};

pub const RasCustomHangUpFn = fn(
    hRasConn: *HRASCONN__,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const RasCustomDialFn = fn(
    hInstDll: HINSTANCE,
    lpRasDialExtensions: *tagRASDIALEXTENSIONS,
    lpszPhonebook: [*:0]const u16,
    lpRasDialParams: *tagRASDIALPARAMSA,
    dwNotifierType: u32,
    lpvNotifier: *c_void,
    lphRasConn: **HRASCONN__,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const RasCustomDeleteEntryNotifyFn = fn(
    lpszPhonebook: [*:0]const u16,
    lpszEntry: [*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const tagRASUPDATECONN = extern struct {
    version: RASAPIVERSION,
    dwSize: u32,
    dwFlags: u32,
    dwIfIndex: u32,
    localEndPoint: tagRASTUNNELENDPOINT,
    remoteEndPoint: tagRASTUNNELENDPOINT,
};

pub const RASPBDLGFUNCW = fn(
    param0: ?*c_void,
    param1: u32,
    param2: PWSTR,
    param3: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const RASPBDLGFUNCA = fn(
    param0: ?*c_void,
    param1: u32,
    param2: PSTR,
    param3: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const tagRASNOUSERW = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwTimeoutMs: u32,
    szUserName: [257]u16,
    szPassword: [257]u16,
    szDomain: [16]u16,
};

pub const tagRASNOUSERA = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwTimeoutMs: u32,
    szUserName: [257]i8,
    szPassword: [257]i8,
    szDomain: [16]i8,
};

pub const tagRASPBDLGW = extern struct {
    dwSize: u32,
    hwndOwner: HWND,
    dwFlags: u32,
    xDlg: i32,
    yDlg: i32,
    dwCallbackId: ?*c_void,
    pCallback: RASPBDLGFUNCW,
    dwError: u32,
    reserved: ?*c_void,
    reserved2: ?*c_void,
};

pub const tagRASPBDLGA = extern struct {
    dwSize: u32,
    hwndOwner: HWND,
    dwFlags: u32,
    xDlg: i32,
    yDlg: i32,
    dwCallbackId: ?*c_void,
    pCallback: RASPBDLGFUNCA,
    dwError: u32,
    reserved: ?*c_void,
    reserved2: ?*c_void,
};

pub const tagRASENTRYDLGW = extern struct {
    dwSize: u32,
    hwndOwner: HWND,
    dwFlags: u32,
    xDlg: i32,
    yDlg: i32,
    szEntry: [257]u16,
    dwError: u32,
    reserved: ?*c_void,
    reserved2: ?*c_void,
};

pub const tagRASENTRYDLGA = extern struct {
    dwSize: u32,
    hwndOwner: HWND,
    dwFlags: u32,
    xDlg: i32,
    yDlg: i32,
    szEntry: [257]i8,
    dwError: u32,
    reserved: ?*c_void,
    reserved2: ?*c_void,
};

pub const tagRASDIALDLG = extern struct {
    dwSize: u32,
    hwndOwner: HWND,
    dwFlags: u32,
    xDlg: i32,
    yDlg: i32,
    dwSubEntry: u32,
    dwError: u32,
    reserved: ?*c_void,
    reserved2: ?*c_void,
};

pub const RasCustomDialDlgFn = fn(
    hInstDll: HINSTANCE,
    dwFlags: u32,
    lpszPhonebook: PWSTR,
    lpszEntry: PWSTR,
    lpszPhoneNumber: PWSTR,
    lpInfo: *tagRASDIALDLG,
    pvInfo: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const RasCustomEntryDlgFn = fn(
    hInstDll: HINSTANCE,
    lpszPhonebook: PWSTR,
    lpszEntry: PWSTR,
    lpInfo: *tagRASENTRYDLGA,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const ROUTER_INTERFACE_TYPE = extern enum(i32) {
    ROUTER_IF_TYPE_CLIENT = 0,
    ROUTER_IF_TYPE_HOME_ROUTER = 1,
    ROUTER_IF_TYPE_FULL_ROUTER = 2,
    ROUTER_IF_TYPE_DEDICATED = 3,
    ROUTER_IF_TYPE_INTERNAL = 4,
    ROUTER_IF_TYPE_LOOPBACK = 5,
    ROUTER_IF_TYPE_TUNNEL1 = 6,
    ROUTER_IF_TYPE_DIALOUT = 7,
    ROUTER_IF_TYPE_MAX = 8,
};
pub const ROUTER_IF_TYPE_CLIENT = ROUTER_INTERFACE_TYPE.ROUTER_IF_TYPE_CLIENT;
pub const ROUTER_IF_TYPE_HOME_ROUTER = ROUTER_INTERFACE_TYPE.ROUTER_IF_TYPE_HOME_ROUTER;
pub const ROUTER_IF_TYPE_FULL_ROUTER = ROUTER_INTERFACE_TYPE.ROUTER_IF_TYPE_FULL_ROUTER;
pub const ROUTER_IF_TYPE_DEDICATED = ROUTER_INTERFACE_TYPE.ROUTER_IF_TYPE_DEDICATED;
pub const ROUTER_IF_TYPE_INTERNAL = ROUTER_INTERFACE_TYPE.ROUTER_IF_TYPE_INTERNAL;
pub const ROUTER_IF_TYPE_LOOPBACK = ROUTER_INTERFACE_TYPE.ROUTER_IF_TYPE_LOOPBACK;
pub const ROUTER_IF_TYPE_TUNNEL1 = ROUTER_INTERFACE_TYPE.ROUTER_IF_TYPE_TUNNEL1;
pub const ROUTER_IF_TYPE_DIALOUT = ROUTER_INTERFACE_TYPE.ROUTER_IF_TYPE_DIALOUT;
pub const ROUTER_IF_TYPE_MAX = ROUTER_INTERFACE_TYPE.ROUTER_IF_TYPE_MAX;

pub const ROUTER_CONNECTION_STATE = extern enum(i32) {
    ROUTER_IF_STATE_UNREACHABLE = 0,
    ROUTER_IF_STATE_DISCONNECTED = 1,
    ROUTER_IF_STATE_CONNECTING = 2,
    ROUTER_IF_STATE_CONNECTED = 3,
};
pub const ROUTER_IF_STATE_UNREACHABLE = ROUTER_CONNECTION_STATE.ROUTER_IF_STATE_UNREACHABLE;
pub const ROUTER_IF_STATE_DISCONNECTED = ROUTER_CONNECTION_STATE.ROUTER_IF_STATE_DISCONNECTED;
pub const ROUTER_IF_STATE_CONNECTING = ROUTER_CONNECTION_STATE.ROUTER_IF_STATE_CONNECTING;
pub const ROUTER_IF_STATE_CONNECTED = ROUTER_CONNECTION_STATE.ROUTER_IF_STATE_CONNECTED;

pub const MPR_INTERFACE_0 = extern struct {
    wszInterfaceName: [257]u16,
    hInterface: HANDLE,
    fEnabled: BOOL,
    dwIfType: ROUTER_INTERFACE_TYPE,
    dwConnectionState: ROUTER_CONNECTION_STATE,
    fUnReachabilityReasons: u32,
    dwLastError: u32,
};

pub const MPR_IPINIP_INTERFACE_0 = extern struct {
    wszFriendlyName: [257]u16,
    Guid: Guid,
};

pub const MPR_INTERFACE_1 = extern struct {
    wszInterfaceName: [257]u16,
    hInterface: HANDLE,
    fEnabled: BOOL,
    dwIfType: ROUTER_INTERFACE_TYPE,
    dwConnectionState: ROUTER_CONNECTION_STATE,
    fUnReachabilityReasons: u32,
    dwLastError: u32,
    lpwsDialoutHoursRestriction: PWSTR,
};

pub const MPR_INTERFACE_2 = extern struct {
    wszInterfaceName: [257]u16,
    hInterface: HANDLE,
    fEnabled: BOOL,
    dwIfType: ROUTER_INTERFACE_TYPE,
    dwConnectionState: ROUTER_CONNECTION_STATE,
    fUnReachabilityReasons: u32,
    dwLastError: u32,
    dwfOptions: u32,
    szLocalPhoneNumber: [129]u16,
    szAlternates: [*]u16,
    ipaddr: u32,
    ipaddrDns: u32,
    ipaddrDnsAlt: u32,
    ipaddrWins: u32,
    ipaddrWinsAlt: u32,
    dwfNetProtocols: u32,
    szDeviceType: [17]u16,
    szDeviceName: [129]u16,
    szX25PadType: [33]u16,
    szX25Address: [201]u16,
    szX25Facilities: [201]u16,
    szX25UserData: [201]u16,
    dwChannels: u32,
    dwSubEntries: u32,
    dwDialMode: u32,
    dwDialExtraPercent: u32,
    dwDialExtraSampleSeconds: u32,
    dwHangUpExtraPercent: u32,
    dwHangUpExtraSampleSeconds: u32,
    dwIdleDisconnectSeconds: u32,
    dwType: u32,
    dwEncryptionType: u32,
    dwCustomAuthKey: u32,
    dwCustomAuthDataSize: u32,
    lpbCustomAuthData: *u8,
    guidId: Guid,
    dwVpnStrategy: u32,
};

pub const MPR_INTERFACE_3 = extern struct {
    wszInterfaceName: [257]u16,
    hInterface: HANDLE,
    fEnabled: BOOL,
    dwIfType: ROUTER_INTERFACE_TYPE,
    dwConnectionState: ROUTER_CONNECTION_STATE,
    fUnReachabilityReasons: u32,
    dwLastError: u32,
    dwfOptions: u32,
    szLocalPhoneNumber: [129]u16,
    szAlternates: [*]u16,
    ipaddr: u32,
    ipaddrDns: u32,
    ipaddrDnsAlt: u32,
    ipaddrWins: u32,
    ipaddrWinsAlt: u32,
    dwfNetProtocols: u32,
    szDeviceType: [17]u16,
    szDeviceName: [129]u16,
    szX25PadType: [33]u16,
    szX25Address: [201]u16,
    szX25Facilities: [201]u16,
    szX25UserData: [201]u16,
    dwChannels: u32,
    dwSubEntries: u32,
    dwDialMode: u32,
    dwDialExtraPercent: u32,
    dwDialExtraSampleSeconds: u32,
    dwHangUpExtraPercent: u32,
    dwHangUpExtraSampleSeconds: u32,
    dwIdleDisconnectSeconds: u32,
    dwType: u32,
    dwEncryptionType: u32,
    dwCustomAuthKey: u32,
    dwCustomAuthDataSize: u32,
    lpbCustomAuthData: *u8,
    guidId: Guid,
    dwVpnStrategy: u32,
    AddressCount: u32,
    ipv6addrDns: in6_addr,
    ipv6addrDnsAlt: in6_addr,
    ipv6addr: *in6_addr,
};

pub const MPR_DEVICE_0 = extern struct {
    szDeviceType: [17]u16,
    szDeviceName: [129]u16,
};

pub const MPR_DEVICE_1 = extern struct {
    szDeviceType: [17]u16,
    szDeviceName: [129]u16,
    szLocalPhoneNumber: [129]u16,
    szAlternates: [*]u16,
};

pub const MPR_CREDENTIALSEX_0 = extern struct {
    dwSize: u32,
    lpbCredentialsInfo: *u8,
};

pub const MPR_CREDENTIALSEX_1 = extern struct {
    dwSize: u32,
    lpbCredentialsInfo: *u8,
};

pub const MPR_TRANSPORT_0 = extern struct {
    dwTransportId: u32,
    hTransport: HANDLE,
    wszTransportName: [41]u16,
};

pub const MPR_IFTRANSPORT_0 = extern struct {
    dwTransportId: u32,
    hIfTransport: HANDLE,
    wszIfTransportName: [41]u16,
};

pub const MPR_SERVER_0 = extern struct {
    fLanOnlyMode: BOOL,
    dwUpTime: u32,
    dwTotalPorts: u32,
    dwPortsInUse: u32,
};

pub const MPR_SERVER_1 = extern struct {
    dwNumPptpPorts: u32,
    dwPptpPortFlags: u32,
    dwNumL2tpPorts: u32,
    dwL2tpPortFlags: u32,
};

pub const MPR_SERVER_2 = extern struct {
    dwNumPptpPorts: u32,
    dwPptpPortFlags: u32,
    dwNumL2tpPorts: u32,
    dwL2tpPortFlags: u32,
    dwNumSstpPorts: u32,
    dwSstpPortFlags: u32,
};

pub const RAS_PORT_CONDITION = extern enum(i32) {
    RAS_PORT_NON_OPERATIONAL = 0,
    RAS_PORT_DISCONNECTED = 1,
    RAS_PORT_CALLING_BACK = 2,
    RAS_PORT_LISTENING = 3,
    RAS_PORT_AUTHENTICATING = 4,
    RAS_PORT_AUTHENTICATED = 5,
    RAS_PORT_INITIALIZING = 6,
};
pub const RAS_PORT_NON_OPERATIONAL = RAS_PORT_CONDITION.RAS_PORT_NON_OPERATIONAL;
pub const RAS_PORT_DISCONNECTED = RAS_PORT_CONDITION.RAS_PORT_DISCONNECTED;
pub const RAS_PORT_CALLING_BACK = RAS_PORT_CONDITION.RAS_PORT_CALLING_BACK;
pub const RAS_PORT_LISTENING = RAS_PORT_CONDITION.RAS_PORT_LISTENING;
pub const RAS_PORT_AUTHENTICATING = RAS_PORT_CONDITION.RAS_PORT_AUTHENTICATING;
pub const RAS_PORT_AUTHENTICATED = RAS_PORT_CONDITION.RAS_PORT_AUTHENTICATED;
pub const RAS_PORT_INITIALIZING = RAS_PORT_CONDITION.RAS_PORT_INITIALIZING;

pub const RAS_HARDWARE_CONDITION = extern enum(i32) {
    RAS_HARDWARE_OPERATIONAL = 0,
    RAS_HARDWARE_FAILURE = 1,
};
pub const RAS_HARDWARE_OPERATIONAL = RAS_HARDWARE_CONDITION.RAS_HARDWARE_OPERATIONAL;
pub const RAS_HARDWARE_FAILURE = RAS_HARDWARE_CONDITION.RAS_HARDWARE_FAILURE;

pub const RAS_PORT_0 = extern struct {
    hPort: HANDLE,
    hConnection: HANDLE,
    dwPortCondition: RAS_PORT_CONDITION,
    dwTotalNumberOfCalls: u32,
    dwConnectDuration: u32,
    wszPortName: [17]u16,
    wszMediaName: [17]u16,
    wszDeviceName: [129]u16,
    wszDeviceType: [17]u16,
};

pub const RAS_PORT_1 = extern struct {
    hPort: HANDLE,
    hConnection: HANDLE,
    dwHardwareCondition: RAS_HARDWARE_CONDITION,
    dwLineSpeed: u32,
    dwBytesXmited: u32,
    dwBytesRcved: u32,
    dwFramesXmited: u32,
    dwFramesRcved: u32,
    dwCrcErr: u32,
    dwTimeoutErr: u32,
    dwAlignmentErr: u32,
    dwHardwareOverrunErr: u32,
    dwFramingErr: u32,
    dwBufferOverrunErr: u32,
    dwCompressionRatioIn: u32,
    dwCompressionRatioOut: u32,
};

pub const RAS_PORT_2 = extern struct {
    hPort: HANDLE,
    hConnection: HANDLE,
    dwConn_State: u32,
    wszPortName: [17]u16,
    wszMediaName: [17]u16,
    wszDeviceName: [129]u16,
    wszDeviceType: [17]u16,
    dwHardwareCondition: RAS_HARDWARE_CONDITION,
    dwLineSpeed: u32,
    dwCrcErr: u32,
    dwSerialOverRunErrs: u32,
    dwTimeoutErr: u32,
    dwAlignmentErr: u32,
    dwHardwareOverrunErr: u32,
    dwFramingErr: u32,
    dwBufferOverrunErr: u32,
    dwCompressionRatioIn: u32,
    dwCompressionRatioOut: u32,
    dwTotalErrors: u32,
    ullBytesXmited: u64,
    ullBytesRcved: u64,
    ullFramesXmited: u64,
    ullFramesRcved: u64,
    ullBytesTxUncompressed: u64,
    ullBytesTxCompressed: u64,
    ullBytesRcvUncompressed: u64,
    ullBytesRcvCompressed: u64,
};

pub const PPP_NBFCP_INFO = extern struct {
    dwError: u32,
    wszWksta: [17]u16,
};

pub const PPP_IPCP_INFO = extern struct {
    dwError: u32,
    wszAddress: [16]u16,
    wszRemoteAddress: [16]u16,
};

pub const PPP_IPCP_INFO2 = extern struct {
    dwError: u32,
    wszAddress: [16]u16,
    wszRemoteAddress: [16]u16,
    dwOptions: u32,
    dwRemoteOptions: u32,
};

pub const PPP_IPXCP_INFO = extern struct {
    dwError: u32,
    wszAddress: [23]u16,
};

pub const PPP_ATCP_INFO = extern struct {
    dwError: u32,
    wszAddress: [33]u16,
};

pub const PPP_IPV6_CP_INFO = extern struct {
    dwVersion: u32,
    dwSize: u32,
    dwError: u32,
    bInterfaceIdentifier: [8]u8,
    bRemoteInterfaceIdentifier: [8]u8,
    dwOptions: u32,
    dwRemoteOptions: u32,
    bPrefix: [8]u8,
    dwPrefixLength: u32,
};

pub const PPP_INFO = extern struct {
    nbf: PPP_NBFCP_INFO,
    ip: PPP_IPCP_INFO,
    ipx: PPP_IPXCP_INFO,
    at: PPP_ATCP_INFO,
};

pub const PPP_CCP_INFO = extern struct {
    dwError: u32,
    dwCompressionAlgorithm: u32,
    dwOptions: u32,
    dwRemoteCompressionAlgorithm: u32,
    dwRemoteOptions: u32,
};

pub const PPP_LCP_INFO = extern struct {
    dwError: u32,
    dwAuthenticationProtocol: u32,
    dwAuthenticationData: u32,
    dwRemoteAuthenticationProtocol: u32,
    dwRemoteAuthenticationData: u32,
    dwTerminateReason: u32,
    dwRemoteTerminateReason: u32,
    dwOptions: u32,
    dwRemoteOptions: u32,
    dwEapTypeId: u32,
    dwRemoteEapTypeId: u32,
};

pub const PPP_INFO_2 = extern struct {
    nbf: PPP_NBFCP_INFO,
    ip: PPP_IPCP_INFO2,
    ipx: PPP_IPXCP_INFO,
    at: PPP_ATCP_INFO,
    ccp: PPP_CCP_INFO,
    lcp: PPP_LCP_INFO,
};

pub const PPP_INFO_3 = extern struct {
    nbf: PPP_NBFCP_INFO,
    ip: PPP_IPCP_INFO2,
    ipv6: PPP_IPV6_CP_INFO,
    ccp: PPP_CCP_INFO,
    lcp: PPP_LCP_INFO,
};

pub const RAS_CONNECTION_0 = extern struct {
    hConnection: HANDLE,
    hInterface: HANDLE,
    dwConnectDuration: u32,
    dwInterfaceType: ROUTER_INTERFACE_TYPE,
    dwConnectionFlags: u32,
    wszInterfaceName: [257]u16,
    wszUserName: [257]u16,
    wszLogonDomain: [16]u16,
    wszRemoteComputer: [17]u16,
};

pub const RAS_CONNECTION_1 = extern struct {
    hConnection: HANDLE,
    hInterface: HANDLE,
    PppInfo: PPP_INFO,
    dwBytesXmited: u32,
    dwBytesRcved: u32,
    dwFramesXmited: u32,
    dwFramesRcved: u32,
    dwCrcErr: u32,
    dwTimeoutErr: u32,
    dwAlignmentErr: u32,
    dwHardwareOverrunErr: u32,
    dwFramingErr: u32,
    dwBufferOverrunErr: u32,
    dwCompressionRatioIn: u32,
    dwCompressionRatioOut: u32,
};

pub const RAS_CONNECTION_2 = extern struct {
    hConnection: HANDLE,
    wszUserName: [257]u16,
    dwInterfaceType: ROUTER_INTERFACE_TYPE,
    guid: Guid,
    PppInfo2: PPP_INFO_2,
};

pub const RAS_QUARANTINE_STATE = extern enum(i32) {
    RAS_QUAR_STATE_NORMAL = 0,
    RAS_QUAR_STATE_QUARANTINE = 1,
    RAS_QUAR_STATE_PROBATION = 2,
    RAS_QUAR_STATE_NOT_CAPABLE = 3,
};
pub const RAS_QUAR_STATE_NORMAL = RAS_QUARANTINE_STATE.RAS_QUAR_STATE_NORMAL;
pub const RAS_QUAR_STATE_QUARANTINE = RAS_QUARANTINE_STATE.RAS_QUAR_STATE_QUARANTINE;
pub const RAS_QUAR_STATE_PROBATION = RAS_QUARANTINE_STATE.RAS_QUAR_STATE_PROBATION;
pub const RAS_QUAR_STATE_NOT_CAPABLE = RAS_QUARANTINE_STATE.RAS_QUAR_STATE_NOT_CAPABLE;

pub const RAS_CONNECTION_3 = extern struct {
    dwVersion: u32,
    dwSize: u32,
    hConnection: HANDLE,
    wszUserName: [257]u16,
    dwInterfaceType: ROUTER_INTERFACE_TYPE,
    guid: Guid,
    PppInfo3: PPP_INFO_3,
    rasQuarState: RAS_QUARANTINE_STATE,
    timer: FILETIME,
};

pub const RAS_USER_0 = extern struct {
    bfPrivilege: u8,
    wszPhoneNumber: [129]u16,
};

pub const RAS_USER_1 = extern struct {
    bfPrivilege: u8,
    wszPhoneNumber: [129]u16,
    bfPrivilege2: u8,
};

pub const MPR_FILTER_0 = extern struct {
    fEnable: BOOL,
};

pub const MPRAPI_OBJECT_HEADER = extern struct {
    revision: u8,
    type: u8,
    size: u16,
};

pub const MPRAPI_OBJECT_TYPE = extern enum(i32) {
    RAS_CONNECTION_OBJECT = 1,
    MPR_SERVER_OBJECT = 2,
    MPR_SERVER_SET_CONFIG_OBJECT = 3,
    AUTH_VALIDATION_OBJECT = 4,
    UPDATE_CONNECTION_OBJECT = 5,
    IF_CUSTOM_CONFIG_OBJECT = 6,
};
pub const MPRAPI_OBJECT_TYPE_RAS_CONNECTION_OBJECT = MPRAPI_OBJECT_TYPE.RAS_CONNECTION_OBJECT;
pub const MPRAPI_OBJECT_TYPE_MPR_SERVER_OBJECT = MPRAPI_OBJECT_TYPE.MPR_SERVER_OBJECT;
pub const MPRAPI_OBJECT_TYPE_MPR_SERVER_SET_CONFIG_OBJECT = MPRAPI_OBJECT_TYPE.MPR_SERVER_SET_CONFIG_OBJECT;
pub const MPRAPI_OBJECT_TYPE_AUTH_VALIDATION_OBJECT = MPRAPI_OBJECT_TYPE.AUTH_VALIDATION_OBJECT;
pub const MPRAPI_OBJECT_TYPE_UPDATE_CONNECTION_OBJECT = MPRAPI_OBJECT_TYPE.UPDATE_CONNECTION_OBJECT;
pub const MPRAPI_OBJECT_TYPE_IF_CUSTOM_CONFIG_OBJECT = MPRAPI_OBJECT_TYPE.IF_CUSTOM_CONFIG_OBJECT;

pub const PPP_PROJECTION_INFO = extern struct {
    dwIPv4NegotiationError: u32,
    wszAddress: [16]u16,
    wszRemoteAddress: [16]u16,
    dwIPv4Options: u32,
    dwIPv4RemoteOptions: u32,
    IPv4SubInterfaceIndex: u64,
    dwIPv6NegotiationError: u32,
    bInterfaceIdentifier: [8]u8,
    bRemoteInterfaceIdentifier: [8]u8,
    bPrefix: [8]u8,
    dwPrefixLength: u32,
    IPv6SubInterfaceIndex: u64,
    dwLcpError: u32,
    dwAuthenticationProtocol: u32,
    dwAuthenticationData: u32,
    dwRemoteAuthenticationProtocol: u32,
    dwRemoteAuthenticationData: u32,
    dwLcpTerminateReason: u32,
    dwLcpRemoteTerminateReason: u32,
    dwLcpOptions: u32,
    dwLcpRemoteOptions: u32,
    dwEapTypeId: u32,
    dwRemoteEapTypeId: u32,
    dwCcpError: u32,
    dwCompressionAlgorithm: u32,
    dwCcpOptions: u32,
    dwRemoteCompressionAlgorithm: u32,
    dwCcpRemoteOptions: u32,
};

pub const PPP_PROJECTION_INFO2 = extern struct {
    dwIPv4NegotiationError: u32,
    wszAddress: [16]u16,
    wszRemoteAddress: [16]u16,
    dwIPv4Options: u32,
    dwIPv4RemoteOptions: u32,
    IPv4SubInterfaceIndex: u64,
    dwIPv6NegotiationError: u32,
    bInterfaceIdentifier: [8]u8,
    bRemoteInterfaceIdentifier: [8]u8,
    bPrefix: [8]u8,
    dwPrefixLength: u32,
    IPv6SubInterfaceIndex: u64,
    dwLcpError: u32,
    dwAuthenticationProtocol: u32,
    dwAuthenticationData: u32,
    dwRemoteAuthenticationProtocol: u32,
    dwRemoteAuthenticationData: u32,
    dwLcpTerminateReason: u32,
    dwLcpRemoteTerminateReason: u32,
    dwLcpOptions: u32,
    dwLcpRemoteOptions: u32,
    dwEapTypeId: u32,
    dwEmbeddedEAPTypeId: u32,
    dwRemoteEapTypeId: u32,
    dwCcpError: u32,
    dwCompressionAlgorithm: u32,
    dwCcpOptions: u32,
    dwRemoteCompressionAlgorithm: u32,
    dwCcpRemoteOptions: u32,
};

pub const IKEV2_PROJECTION_INFO = extern struct {
    dwIPv4NegotiationError: u32,
    wszAddress: [16]u16,
    wszRemoteAddress: [16]u16,
    IPv4SubInterfaceIndex: u64,
    dwIPv6NegotiationError: u32,
    bInterfaceIdentifier: [8]u8,
    bRemoteInterfaceIdentifier: [8]u8,
    bPrefix: [8]u8,
    dwPrefixLength: u32,
    IPv6SubInterfaceIndex: u64,
    dwOptions: u32,
    dwAuthenticationProtocol: u32,
    dwEapTypeId: u32,
    dwCompressionAlgorithm: u32,
    dwEncryptionMethod: u32,
};

pub const IKEV2_PROJECTION_INFO2 = extern struct {
    dwIPv4NegotiationError: u32,
    wszAddress: [16]u16,
    wszRemoteAddress: [16]u16,
    IPv4SubInterfaceIndex: u64,
    dwIPv6NegotiationError: u32,
    bInterfaceIdentifier: [8]u8,
    bRemoteInterfaceIdentifier: [8]u8,
    bPrefix: [8]u8,
    dwPrefixLength: u32,
    IPv6SubInterfaceIndex: u64,
    dwOptions: u32,
    dwAuthenticationProtocol: u32,
    dwEapTypeId: u32,
    dwEmbeddedEAPTypeId: u32,
    dwCompressionAlgorithm: u32,
    dwEncryptionMethod: u32,
};

pub const PROJECTION_INFO = extern struct {
    projectionInfoType: u8,
    Anonymous: PROJECTION_INFO._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PROJECTION_INFO2 = extern struct {
    projectionInfoType: u8,
    Anonymous: PROJECTION_INFO2._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const RAS_CONNECTION_EX = extern struct {
    Header: MPRAPI_OBJECT_HEADER,
    dwConnectDuration: u32,
    dwInterfaceType: ROUTER_INTERFACE_TYPE,
    dwConnectionFlags: u32,
    wszInterfaceName: [257]u16,
    wszUserName: [257]u16,
    wszLogonDomain: [16]u16,
    wszRemoteComputer: [17]u16,
    guid: Guid,
    rasQuarState: RAS_QUARANTINE_STATE,
    probationTime: FILETIME,
    dwBytesXmited: u32,
    dwBytesRcved: u32,
    dwFramesXmited: u32,
    dwFramesRcved: u32,
    dwCrcErr: u32,
    dwTimeoutErr: u32,
    dwAlignmentErr: u32,
    dwHardwareOverrunErr: u32,
    dwFramingErr: u32,
    dwBufferOverrunErr: u32,
    dwCompressionRatioIn: u32,
    dwCompressionRatioOut: u32,
    dwNumSwitchOvers: u32,
    wszRemoteEndpointAddress: [65]u16,
    wszLocalEndpointAddress: [65]u16,
    ProjectionInfo: PROJECTION_INFO,
    hConnection: HANDLE,
    hInterface: HANDLE,
};

pub const RAS_CONNECTION_4 = extern struct {
    dwConnectDuration: u32,
    dwInterfaceType: ROUTER_INTERFACE_TYPE,
    dwConnectionFlags: u32,
    wszInterfaceName: [257]u16,
    wszUserName: [257]u16,
    wszLogonDomain: [16]u16,
    wszRemoteComputer: [17]u16,
    guid: Guid,
    rasQuarState: RAS_QUARANTINE_STATE,
    probationTime: FILETIME,
    connectionStartTime: FILETIME,
    ullBytesXmited: u64,
    ullBytesRcved: u64,
    dwFramesXmited: u32,
    dwFramesRcved: u32,
    dwCrcErr: u32,
    dwTimeoutErr: u32,
    dwAlignmentErr: u32,
    dwHardwareOverrunErr: u32,
    dwFramingErr: u32,
    dwBufferOverrunErr: u32,
    dwCompressionRatioIn: u32,
    dwCompressionRatioOut: u32,
    dwNumSwitchOvers: u32,
    wszRemoteEndpointAddress: [65]u16,
    wszLocalEndpointAddress: [65]u16,
    ProjectionInfo: PROJECTION_INFO2,
    hConnection: HANDLE,
    hInterface: HANDLE,
    dwDeviceType: u32,
};

pub const ROUTER_CUSTOM_IKEv2_POLICY0 = extern struct {
    dwIntegrityMethod: u32,
    dwEncryptionMethod: u32,
    dwCipherTransformConstant: u32,
    dwAuthTransformConstant: u32,
    dwPfsGroup: u32,
    dwDhGroup: u32,
};

pub const ROUTER_IKEv2_IF_CUSTOM_CONFIG0 = extern struct {
    dwSaLifeTime: u32,
    dwSaDataSize: u32,
    certificateName: CRYPTOAPI_BLOB,
    customPolicy: *ROUTER_CUSTOM_IKEv2_POLICY0,
};

pub const MPR_IF_CUSTOMINFOEX0 = extern struct {
    Header: MPRAPI_OBJECT_HEADER,
    dwFlags: u32,
    customIkev2Config: ROUTER_IKEv2_IF_CUSTOM_CONFIG0,
};

pub const MPR_CERT_EKU = extern struct {
    dwSize: u32,
    IsEKUOID: BOOL,
    pwszEKU: PWSTR,
};

pub const VPN_TS_IP_ADDRESS = extern struct {
    Type: u16,
    Anonymous: VPN_TS_IP_ADDRESS._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const MPR_VPN_TS_TYPE = extern enum(i32) {
    MPR_VPN_TS_IPv4_ADDR_RANGE = 7,
    MPR_VPN_TS_IPv6_ADDR_RANGE = 8,
};
pub const MPR_VPN_TS_IPv4_ADDR_RANGE = MPR_VPN_TS_TYPE.MPR_VPN_TS_IPv4_ADDR_RANGE;
pub const MPR_VPN_TS_IPv6_ADDR_RANGE = MPR_VPN_TS_TYPE.MPR_VPN_TS_IPv6_ADDR_RANGE;

pub const _MPR_VPN_SELECTOR = extern struct {
    type: MPR_VPN_TS_TYPE,
    protocolId: u8,
    portStart: u16,
    portEnd: u16,
    tsPayloadId: u16,
    addrStart: VPN_TS_IP_ADDRESS,
    addrEnd: VPN_TS_IP_ADDRESS,
};

pub const MPR_VPN_TRAFFIC_SELECTORS = extern struct {
    numTsi: u32,
    numTsr: u32,
    tsI: *_MPR_VPN_SELECTOR,
    tsR: *_MPR_VPN_SELECTOR,
};

pub const ROUTER_IKEv2_IF_CUSTOM_CONFIG2 = extern struct {
    dwSaLifeTime: u32,
    dwSaDataSize: u32,
    certificateName: CRYPTOAPI_BLOB,
    customPolicy: *ROUTER_CUSTOM_IKEv2_POLICY0,
    certificateHash: CRYPTOAPI_BLOB,
    dwMmSaLifeTime: u32,
    vpnTrafficSelectors: MPR_VPN_TRAFFIC_SELECTORS,
};

pub const MPR_IF_CUSTOMINFOEX2 = extern struct {
    Header: MPRAPI_OBJECT_HEADER,
    dwFlags: u32,
    customIkev2Config: ROUTER_IKEv2_IF_CUSTOM_CONFIG2,
};

pub const IKEV2_TUNNEL_CONFIG_PARAMS4 = extern struct {
    dwIdleTimeout: u32,
    dwNetworkBlackoutTime: u32,
    dwSaLifeTime: u32,
    dwSaDataSizeForRenegotiation: u32,
    dwConfigOptions: u32,
    dwTotalCertificates: u32,
    certificateNames: *CRYPTOAPI_BLOB,
    machineCertificateName: CRYPTOAPI_BLOB,
    dwEncryptionType: u32,
    customPolicy: *ROUTER_CUSTOM_IKEv2_POLICY0,
    dwTotalEkus: u32,
    certificateEKUs: *MPR_CERT_EKU,
    machineCertificateHash: CRYPTOAPI_BLOB,
    dwMmSaLifeTime: u32,
};

pub const ROUTER_IKEv2_IF_CUSTOM_CONFIG1 = extern struct {
    dwSaLifeTime: u32,
    dwSaDataSize: u32,
    certificateName: CRYPTOAPI_BLOB,
    customPolicy: *ROUTER_CUSTOM_IKEv2_POLICY0,
    certificateHash: CRYPTOAPI_BLOB,
};

pub const MPR_IF_CUSTOMINFOEX1 = extern struct {
    Header: MPRAPI_OBJECT_HEADER,
    dwFlags: u32,
    customIkev2Config: ROUTER_IKEv2_IF_CUSTOM_CONFIG1,
};

pub const IKEV2_TUNNEL_CONFIG_PARAMS3 = extern struct {
    dwIdleTimeout: u32,
    dwNetworkBlackoutTime: u32,
    dwSaLifeTime: u32,
    dwSaDataSizeForRenegotiation: u32,
    dwConfigOptions: u32,
    dwTotalCertificates: u32,
    certificateNames: *CRYPTOAPI_BLOB,
    machineCertificateName: CRYPTOAPI_BLOB,
    dwEncryptionType: u32,
    customPolicy: *ROUTER_CUSTOM_IKEv2_POLICY0,
    dwTotalEkus: u32,
    certificateEKUs: *MPR_CERT_EKU,
    machineCertificateHash: CRYPTOAPI_BLOB,
};

pub const IKEV2_TUNNEL_CONFIG_PARAMS2 = extern struct {
    dwIdleTimeout: u32,
    dwNetworkBlackoutTime: u32,
    dwSaLifeTime: u32,
    dwSaDataSizeForRenegotiation: u32,
    dwConfigOptions: u32,
    dwTotalCertificates: u32,
    certificateNames: *CRYPTOAPI_BLOB,
    machineCertificateName: CRYPTOAPI_BLOB,
    dwEncryptionType: u32,
    customPolicy: *ROUTER_CUSTOM_IKEv2_POLICY0,
};

pub const L2TP_TUNNEL_CONFIG_PARAMS2 = extern struct {
    dwIdleTimeout: u32,
    dwEncryptionType: u32,
    dwSaLifeTime: u32,
    dwSaDataSizeForRenegotiation: u32,
    customPolicy: *ROUTER_CUSTOM_IKEv2_POLICY0,
    dwMmSaLifeTime: u32,
};

pub const L2TP_TUNNEL_CONFIG_PARAMS1 = extern struct {
    dwIdleTimeout: u32,
    dwEncryptionType: u32,
    dwSaLifeTime: u32,
    dwSaDataSizeForRenegotiation: u32,
    customPolicy: *ROUTER_CUSTOM_IKEv2_POLICY0,
};

pub const IKEV2_CONFIG_PARAMS = extern struct {
    dwNumPorts: u32,
    dwPortFlags: u32,
    dwTunnelConfigParamFlags: u32,
    TunnelConfigParams: IKEV2_TUNNEL_CONFIG_PARAMS4,
};

pub const PPTP_CONFIG_PARAMS = extern struct {
    dwNumPorts: u32,
    dwPortFlags: u32,
};

pub const L2TP_CONFIG_PARAMS1 = extern struct {
    dwNumPorts: u32,
    dwPortFlags: u32,
    dwTunnelConfigParamFlags: u32,
    TunnelConfigParams: L2TP_TUNNEL_CONFIG_PARAMS2,
};

pub const GRE_CONFIG_PARAMS0 = extern struct {
    dwNumPorts: u32,
    dwPortFlags: u32,
};

pub const L2TP_CONFIG_PARAMS0 = extern struct {
    dwNumPorts: u32,
    dwPortFlags: u32,
};

pub const SSTP_CERT_INFO = extern struct {
    isDefault: BOOL,
    certBlob: CRYPTOAPI_BLOB,
};

pub const SSTP_CONFIG_PARAMS = extern struct {
    dwNumPorts: u32,
    dwPortFlags: u32,
    isUseHttps: BOOL,
    certAlgorithm: u32,
    sstpCertDetails: SSTP_CERT_INFO,
};

pub const MPRAPI_TUNNEL_CONFIG_PARAMS0 = extern struct {
    IkeConfigParams: IKEV2_CONFIG_PARAMS,
    PptpConfigParams: PPTP_CONFIG_PARAMS,
    L2tpConfigParams: L2TP_CONFIG_PARAMS1,
    SstpConfigParams: SSTP_CONFIG_PARAMS,
};

pub const MPRAPI_TUNNEL_CONFIG_PARAMS1 = extern struct {
    IkeConfigParams: IKEV2_CONFIG_PARAMS,
    PptpConfigParams: PPTP_CONFIG_PARAMS,
    L2tpConfigParams: L2TP_CONFIG_PARAMS1,
    SstpConfigParams: SSTP_CONFIG_PARAMS,
    GREConfigParams: GRE_CONFIG_PARAMS0,
};

pub const MPR_SERVER_EX0 = extern struct {
    Header: MPRAPI_OBJECT_HEADER,
    fLanOnlyMode: u32,
    dwUpTime: u32,
    dwTotalPorts: u32,
    dwPortsInUse: u32,
    Reserved: u32,
    ConfigParams: MPRAPI_TUNNEL_CONFIG_PARAMS0,
};

pub const MPR_SERVER_EX1 = extern struct {
    Header: MPRAPI_OBJECT_HEADER,
    fLanOnlyMode: u32,
    dwUpTime: u32,
    dwTotalPorts: u32,
    dwPortsInUse: u32,
    Reserved: u32,
    ConfigParams: MPRAPI_TUNNEL_CONFIG_PARAMS1,
};

pub const MPR_SERVER_SET_CONFIG_EX0 = extern struct {
    Header: MPRAPI_OBJECT_HEADER,
    setConfigForProtocols: u32,
    ConfigParams: MPRAPI_TUNNEL_CONFIG_PARAMS0,
};

pub const MPR_SERVER_SET_CONFIG_EX1 = extern struct {
    Header: MPRAPI_OBJECT_HEADER,
    setConfigForProtocols: u32,
    ConfigParams: MPRAPI_TUNNEL_CONFIG_PARAMS1,
};

pub const AUTH_VALIDATION_EX = extern struct {
    Header: MPRAPI_OBJECT_HEADER,
    hRasConnection: HANDLE,
    wszUserName: [257]u16,
    wszLogonDomain: [16]u16,
    AuthInfoSize: u32,
    AuthInfo: [1]u8,
};

pub const RAS_UPDATE_CONNECTION = extern struct {
    Header: MPRAPI_OBJECT_HEADER,
    dwIfIndex: u32,
    wszLocalEndpointAddress: [65]u16,
    wszRemoteEndpointAddress: [65]u16,
};

pub const PMPRADMINGETIPADDRESSFORUSER = fn(
    param0: PWSTR,
    param1: PWSTR,
    param2: *u32,
    param3: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PMPRADMINRELEASEIPADRESS = fn(
    param0: PWSTR,
    param1: PWSTR,
    param2: *u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PMPRADMINGETIPV6ADDRESSFORUSER = fn(
    param0: PWSTR,
    param1: PWSTR,
    param2: *in6_addr,
    param3: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PMPRADMINRELEASEIPV6ADDRESSFORUSER = fn(
    param0: PWSTR,
    param1: PWSTR,
    param2: *in6_addr,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PMPRADMINACCEPTNEWCONNECTION = fn(
    param0: *RAS_CONNECTION_0,
    param1: *RAS_CONNECTION_1,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PMPRADMINACCEPTNEWCONNECTION2 = fn(
    param0: *RAS_CONNECTION_0,
    param1: *RAS_CONNECTION_1,
    param2: *RAS_CONNECTION_2,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PMPRADMINACCEPTNEWCONNECTION3 = fn(
    param0: *RAS_CONNECTION_0,
    param1: *RAS_CONNECTION_1,
    param2: *RAS_CONNECTION_2,
    param3: *RAS_CONNECTION_3,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PMPRADMINACCEPTNEWLINK = fn(
    param0: *RAS_PORT_0,
    param1: *RAS_PORT_1,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PMPRADMINCONNECTIONHANGUPNOTIFICATION = fn(
    param0: *RAS_CONNECTION_0,
    param1: *RAS_CONNECTION_1,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PMPRADMINCONNECTIONHANGUPNOTIFICATION2 = fn(
    param0: *RAS_CONNECTION_0,
    param1: *RAS_CONNECTION_1,
    param2: *RAS_CONNECTION_2,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PMPRADMINCONNECTIONHANGUPNOTIFICATION3 = fn(
    param0: *RAS_CONNECTION_0,
    param1: *RAS_CONNECTION_1,
    param2: *RAS_CONNECTION_2,
    param3: RAS_CONNECTION_3,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PMPRADMINLINKHANGUPNOTIFICATION = fn(
    param0: *RAS_PORT_0,
    param1: *RAS_PORT_1,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PMPRADMINTERMINATEDLL = fn(
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PMPRADMINACCEPTREAUTHENTICATION = fn(
    param0: *RAS_CONNECTION_0,
    param1: *RAS_CONNECTION_1,
    param2: *RAS_CONNECTION_2,
    param3: *RAS_CONNECTION_3,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PMPRADMINACCEPTNEWCONNECTIONEX = fn(
    param0: *RAS_CONNECTION_EX,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PMPRADMINACCEPTREAUTHENTICATIONEX = fn(
    param0: *RAS_CONNECTION_EX,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PMPRADMINACCEPTTUNNELENDPOINTCHANGEEX = fn(
    param0: *RAS_CONNECTION_EX,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PMPRADMINCONNECTIONHANGUPNOTIFICATIONEX = fn(
    param0: *RAS_CONNECTION_EX,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PMPRADMINRASVALIDATEPREAUTHENTICATEDCONNECTIONEX = fn(
    param0: *AUTH_VALIDATION_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const MPRAPI_ADMIN_DLL_CALLBACKS = extern struct {
    revision: u8,
    lpfnMprAdminGetIpAddressForUser: PMPRADMINGETIPADDRESSFORUSER,
    lpfnMprAdminReleaseIpAddress: PMPRADMINRELEASEIPADRESS,
    lpfnMprAdminGetIpv6AddressForUser: PMPRADMINGETIPV6ADDRESSFORUSER,
    lpfnMprAdminReleaseIpV6AddressForUser: PMPRADMINRELEASEIPV6ADDRESSFORUSER,
    lpfnRasAdminAcceptNewLink: PMPRADMINACCEPTNEWLINK,
    lpfnRasAdminLinkHangupNotification: PMPRADMINLINKHANGUPNOTIFICATION,
    lpfnRasAdminTerminateDll: PMPRADMINTERMINATEDLL,
    lpfnRasAdminAcceptNewConnectionEx: PMPRADMINACCEPTNEWCONNECTIONEX,
    lpfnRasAdminAcceptEndpointChangeEx: PMPRADMINACCEPTTUNNELENDPOINTCHANGEEX,
    lpfnRasAdminAcceptReauthenticationEx: PMPRADMINACCEPTREAUTHENTICATIONEX,
    lpfnRasAdminConnectionHangupNotificationEx: PMPRADMINCONNECTIONHANGUPNOTIFICATIONEX,
    lpfnRASValidatePreAuthenticatedConnectionEx: PMPRADMINRASVALIDATEPREAUTHENTICATEDCONNECTIONEX,
};

pub const SECURITY_MESSAGE = extern struct {
    dwMsgId: u32,
    hPort: ?*c_void,
    dwError: u32,
    UserName: [257]i8,
    Domain: [16]i8,
};

pub const RAS_SECURITY_INFO = extern struct {
    LastError: u32,
    BytesReceived: u32,
    DeviceName: [129]i8,
};

pub const RASSECURITYPROC = fn(
) callconv(@import("std").os.windows.WINAPI) u32;

pub const MGM_IF_ENTRY = extern struct {
    dwIfIndex: u32,
    dwIfNextHopAddr: u32,
    bIGMP: BOOL,
    bIsEnabled: BOOL,
};

pub const PMGM_RPF_CALLBACK = fn(
    dwSourceAddr: u32,
    dwSourceMask: u32,
    dwGroupAddr: u32,
    dwGroupMask: u32,
    pdwInIfIndex: *u32,
    pdwInIfNextHopAddr: *u32,
    pdwUpStreamNbr: *u32,
    dwHdrSize: u32,
    pbPacketHdr: *u8,
    pbRoute: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PMGM_CREATION_ALERT_CALLBACK = fn(
    dwSourceAddr: u32,
    dwSourceMask: u32,
    dwGroupAddr: u32,
    dwGroupMask: u32,
    dwInIfIndex: u32,
    dwInIfNextHopAddr: u32,
    dwIfCount: u32,
    pmieOutIfList: *MGM_IF_ENTRY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PMGM_PRUNE_ALERT_CALLBACK = fn(
    dwSourceAddr: u32,
    dwSourceMask: u32,
    dwGroupAddr: u32,
    dwGroupMask: u32,
    dwIfIndex: u32,
    dwIfNextHopAddr: u32,
    bMemberDelete: BOOL,
    pdwTimeout: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PMGM_JOIN_ALERT_CALLBACK = fn(
    dwSourceAddr: u32,
    dwSourceMask: u32,
    dwGroupAddr: u32,
    dwGroupMask: u32,
    bMemberUpdate: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PMGM_WRONG_IF_CALLBACK = fn(
    dwSourceAddr: u32,
    dwGroupAddr: u32,
    dwIfIndex: u32,
    dwIfNextHopAddr: u32,
    dwHdrSize: u32,
    pbPacketHdr: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PMGM_LOCAL_JOIN_CALLBACK = fn(
    dwSourceAddr: u32,
    dwSourceMask: u32,
    dwGroupAddr: u32,
    dwGroupMask: u32,
    dwIfIndex: u32,
    dwIfNextHopAddr: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PMGM_LOCAL_LEAVE_CALLBACK = fn(
    dwSourceAddr: u32,
    dwSourceMask: u32,
    dwGroupAddr: u32,
    dwGroupMask: u32,
    dwIfIndex: u32,
    dwIfNextHopAddr: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PMGM_DISABLE_IGMP_CALLBACK = fn(
    dwIfIndex: u32,
    dwIfNextHopAddr: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PMGM_ENABLE_IGMP_CALLBACK = fn(
    dwIfIndex: u32,
    dwIfNextHopAddr: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const ROUTING_PROTOCOL_CONFIG = extern struct {
    dwCallbackFlags: u32,
    pfnRpfCallback: PMGM_RPF_CALLBACK,
    pfnCreationAlertCallback: PMGM_CREATION_ALERT_CALLBACK,
    pfnPruneAlertCallback: PMGM_PRUNE_ALERT_CALLBACK,
    pfnJoinAlertCallback: PMGM_JOIN_ALERT_CALLBACK,
    pfnWrongIfCallback: PMGM_WRONG_IF_CALLBACK,
    pfnLocalJoinCallback: PMGM_LOCAL_JOIN_CALLBACK,
    pfnLocalLeaveCallback: PMGM_LOCAL_LEAVE_CALLBACK,
    pfnDisableIgmpCallback: PMGM_DISABLE_IGMP_CALLBACK,
    pfnEnableIgmpCallback: PMGM_ENABLE_IGMP_CALLBACK,
};

pub const MGM_ENUM_TYPES = extern enum(i32) {
    ANY_SOURCE = 0,
    ALL_SOURCES = 1,
};
pub const ANY_SOURCE = MGM_ENUM_TYPES.ANY_SOURCE;
pub const ALL_SOURCES = MGM_ENUM_TYPES.ALL_SOURCES;

pub const SOURCE_GROUP_ENTRY = extern struct {
    dwSourceAddr: u32,
    dwSourceMask: u32,
    dwGroupAddr: u32,
    dwGroupMask: u32,
};

pub const RTM_REGN_PROFILE = extern struct {
    MaxNextHopsInRoute: u32,
    MaxHandlesInEnum: u32,
    ViewsSupported: u32,
    NumberOfViews: u32,
};

pub const RTM_NET_ADDRESS = extern struct {
    AddressFamily: u16,
    NumBits: u16,
    AddrBits: [16]u8,
};

pub const RTM_PREF_INFO = extern struct {
    Metric: u32,
    Preference: u32,
};

pub const RTM_NEXTHOP_LIST = extern struct {
    NumNextHops: u16,
    NextHops: [1]?*c_void,
};

pub const RTM_DEST_INFO = extern struct {
    DestHandle: ?*c_void,
    DestAddress: RTM_NET_ADDRESS,
    LastChanged: FILETIME,
    BelongsToViews: u32,
    NumberOfViews: u32,
    ViewInfo: [1]RTM_DEST_INFO._Anonymous_e__Struct,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const RTM_ROUTE_INFO = extern struct {
    DestHandle: ?*c_void,
    RouteOwner: ?*c_void,
    Neighbour: ?*c_void,
    State: u8,
    Flags1: u8,
    Flags: u16,
    PrefInfo: RTM_PREF_INFO,
    BelongsToViews: u32,
    EntitySpecificInfo: *c_void,
    NextHopsList: RTM_NEXTHOP_LIST,
};

pub const RTM_NEXTHOP_INFO = extern struct {
    NextHopAddress: RTM_NET_ADDRESS,
    NextHopOwner: ?*c_void,
    InterfaceIndex: u32,
    State: u16,
    Flags: u16,
    EntitySpecificInfo: *c_void,
    RemoteNextHop: ?*c_void,
};

pub const RTM_ENTITY_ID = extern struct {
    Anonymous: RTM_ENTITY_ID._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const RTM_ENTITY_INFO = extern struct {
    RtmInstanceId: u16,
    AddressFamily: u16,
    EntityId: RTM_ENTITY_ID,
};

pub const RTM_EVENT_TYPE = extern enum(i32) {
    RTM_ENTITY_REGISTERED = 0,
    RTM_ENTITY_DEREGISTERED = 1,
    RTM_ROUTE_EXPIRED = 2,
    RTM_CHANGE_NOTIFICATION = 3,
};
pub const RTM_ENTITY_REGISTERED = RTM_EVENT_TYPE.RTM_ENTITY_REGISTERED;
pub const RTM_ENTITY_DEREGISTERED = RTM_EVENT_TYPE.RTM_ENTITY_DEREGISTERED;
pub const RTM_ROUTE_EXPIRED = RTM_EVENT_TYPE.RTM_ROUTE_EXPIRED;
pub const RTM_CHANGE_NOTIFICATION = RTM_EVENT_TYPE.RTM_CHANGE_NOTIFICATION;

pub const _EVENT_CALLBACK = fn(
    RtmRegHandle: ?*c_void,
    EventType: RTM_EVENT_TYPE,
    Context1: *c_void,
    Context2: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const RTM_EVENT_CALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRTM_EVENT_CALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) u32;

pub const RTM_ENTITY_METHOD_INPUT = extern struct {
    MethodType: u32,
    InputSize: u32,
    InputData: [1]u8,
};

pub const RTM_ENTITY_METHOD_OUTPUT = extern struct {
    MethodType: u32,
    MethodStatus: u32,
    OutputSize: u32,
    OutputData: [1]u8,
};

pub const _ENTITY_METHOD = fn(
    CallerHandle: ?*c_void,
    CalleeHandle: ?*c_void,
    Input: *RTM_ENTITY_METHOD_INPUT,
    Output: *RTM_ENTITY_METHOD_OUTPUT,
) callconv(@import("std").os.windows.WINAPI) void;

pub const RTM_ENTITY_EXPORT_METHOD = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const PRTM_ENTITY_EXPORT_METHOD = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const RTM_ENTITY_EXPORT_METHODS = extern struct {
    NumMethods: u32,
    Methods: [1]?*c_void,
};


//--------------------------------------------------------------------------------
// Section: Functions (277)
//--------------------------------------------------------------------------------
pub extern "RASAPI32" fn RasDialA(
    param0: ?*tagRASDIALEXTENSIONS,
    param1: ?[*:0]const u8,
    param2: *tagRASDIALPARAMSA,
    param3: u32,
    param4: ?*c_void,
    param5: **HRASCONN__,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasDialW(
    param0: ?*tagRASDIALEXTENSIONS,
    param1: ?[*:0]const u16,
    param2: *tagRASDIALPARAMSW,
    param3: u32,
    param4: ?*c_void,
    param5: **HRASCONN__,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasEnumConnectionsA(
    param0: ?*tagRASCONNA,
    param1: *u32,
    param2: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasEnumConnectionsW(
    param0: ?*tagRASCONNW,
    param1: *u32,
    param2: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasEnumEntriesA(
    param0: ?[*:0]const u8,
    param1: ?[*:0]const u8,
    param2: ?*tagRASENTRYNAMEA,
    param3: *u32,
    param4: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasEnumEntriesW(
    param0: ?[*:0]const u16,
    param1: ?[*:0]const u16,
    param2: ?*tagRASENTRYNAMEW,
    param3: *u32,
    param4: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetConnectStatusA(
    param0: *HRASCONN__,
    param1: *tagRASCONNSTATUSA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetConnectStatusW(
    param0: *HRASCONN__,
    param1: *tagRASCONNSTATUSW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetErrorStringA(
    ResourceId: u32,
    lpszString: [*:0]u8,
    InBufSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetErrorStringW(
    ResourceId: u32,
    lpszString: [*:0]u16,
    InBufSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasHangUpA(
    param0: *HRASCONN__,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasHangUpW(
    param0: *HRASCONN__,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetProjectionInfoA(
    param0: *HRASCONN__,
    param1: tagRASPROJECTION,
    param2: *c_void,
    param3: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetProjectionInfoW(
    param0: *HRASCONN__,
    param1: tagRASPROJECTION,
    param2: *c_void,
    param3: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasCreatePhonebookEntryA(
    param0: HWND,
    param1: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasCreatePhonebookEntryW(
    param0: HWND,
    param1: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasEditPhonebookEntryA(
    param0: HWND,
    param1: ?[*:0]const u8,
    param2: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasEditPhonebookEntryW(
    param0: HWND,
    param1: ?[*:0]const u16,
    param2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasSetEntryDialParamsA(
    param0: ?[*:0]const u8,
    param1: *tagRASDIALPARAMSA,
    param2: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasSetEntryDialParamsW(
    param0: ?[*:0]const u16,
    param1: *tagRASDIALPARAMSW,
    param2: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetEntryDialParamsA(
    param0: ?[*:0]const u8,
    param1: *tagRASDIALPARAMSA,
    param2: *i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetEntryDialParamsW(
    param0: ?[*:0]const u16,
    param1: *tagRASDIALPARAMSW,
    param2: *i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasEnumDevicesA(
    param0: ?*tagRASDEVINFOA,
    param1: *u32,
    param2: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasEnumDevicesW(
    param0: ?*tagRASDEVINFOW,
    param1: *u32,
    param2: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetCountryInfoA(
    param0: ?*RASCTRYINFO,
    param1: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetCountryInfoW(
    param0: ?*RASCTRYINFO,
    param1: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetEntryPropertiesA(
    param0: ?[*:0]const u8,
    param1: [*:0]const u8,
    param2: ?*tagRASENTRYA,
    param3: *u32,
    param4: ?*u8,
    param5: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetEntryPropertiesW(
    param0: ?[*:0]const u16,
    param1: [*:0]const u16,
    param2: ?*tagRASENTRYW,
    param3: *u32,
    param4: ?*u8,
    param5: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasSetEntryPropertiesA(
    param0: ?[*:0]const u8,
    param1: [*:0]const u8,
    param2: *tagRASENTRYA,
    param3: u32,
    param4: ?*u8,
    param5: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasSetEntryPropertiesW(
    param0: ?[*:0]const u16,
    param1: [*:0]const u16,
    param2: *tagRASENTRYW,
    param3: u32,
    param4: ?*u8,
    param5: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasRenameEntryA(
    param0: ?[*:0]const u8,
    param1: [*:0]const u8,
    param2: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasRenameEntryW(
    param0: ?[*:0]const u16,
    param1: [*:0]const u16,
    param2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasDeleteEntryA(
    param0: ?[*:0]const u8,
    param1: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasDeleteEntryW(
    param0: ?[*:0]const u16,
    param1: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasValidateEntryNameA(
    param0: ?[*:0]const u8,
    param1: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasValidateEntryNameW(
    param0: ?[*:0]const u16,
    param1: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasConnectionNotificationA(
    param0: *HRASCONN__,
    param1: HANDLE,
    param2: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasConnectionNotificationW(
    param0: *HRASCONN__,
    param1: HANDLE,
    param2: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetSubEntryHandleA(
    param0: *HRASCONN__,
    param1: u32,
    param2: **HRASCONN__,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetSubEntryHandleW(
    param0: *HRASCONN__,
    param1: u32,
    param2: **HRASCONN__,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetCredentialsA(
    param0: ?[*:0]const u8,
    param1: [*:0]const u8,
    param2: *tagRASCREDENTIALSA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetCredentialsW(
    param0: ?[*:0]const u16,
    param1: [*:0]const u16,
    param2: *tagRASCREDENTIALSW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasSetCredentialsA(
    param0: ?[*:0]const u8,
    param1: [*:0]const u8,
    param2: *tagRASCREDENTIALSA,
    param3: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasSetCredentialsW(
    param0: ?[*:0]const u16,
    param1: [*:0]const u16,
    param2: *tagRASCREDENTIALSW,
    param3: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetSubEntryPropertiesA(
    param0: ?[*:0]const u8,
    param1: [*:0]const u8,
    param2: u32,
    param3: ?*tagRASSUBENTRYA,
    param4: ?*u32,
    param5: ?*u8,
    param6: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetSubEntryPropertiesW(
    param0: ?[*:0]const u16,
    param1: [*:0]const u16,
    param2: u32,
    param3: ?*tagRASSUBENTRYW,
    param4: ?*u32,
    param5: ?*u8,
    param6: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasSetSubEntryPropertiesA(
    param0: ?[*:0]const u8,
    param1: [*:0]const u8,
    param2: u32,
    param3: *tagRASSUBENTRYA,
    param4: u32,
    param5: ?*u8,
    param6: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasSetSubEntryPropertiesW(
    param0: ?[*:0]const u16,
    param1: [*:0]const u16,
    param2: u32,
    param3: *tagRASSUBENTRYW,
    param4: u32,
    param5: ?*u8,
    param6: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetAutodialAddressA(
    param0: ?[*:0]const u8,
    param1: ?*u32,
    param2: ?*tagRASAUTODIALENTRYA,
    param3: *u32,
    param4: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetAutodialAddressW(
    param0: ?[*:0]const u16,
    param1: ?*u32,
    param2: ?*tagRASAUTODIALENTRYW,
    param3: *u32,
    param4: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasSetAutodialAddressA(
    param0: ?[*:0]const u8,
    param1: u32,
    param2: ?*tagRASAUTODIALENTRYA,
    param3: u32,
    param4: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasSetAutodialAddressW(
    param0: ?[*:0]const u16,
    param1: u32,
    param2: ?*tagRASAUTODIALENTRYW,
    param3: u32,
    param4: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasEnumAutodialAddressesA(
    lppRasAutodialAddresses: ?[*]?PSTR,
    lpdwcbRasAutodialAddresses: *u32,
    lpdwcRasAutodialAddresses: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasEnumAutodialAddressesW(
    lppRasAutodialAddresses: ?[*]?PWSTR,
    lpdwcbRasAutodialAddresses: *u32,
    lpdwcRasAutodialAddresses: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetAutodialEnableA(
    param0: u32,
    param1: *i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetAutodialEnableW(
    param0: u32,
    param1: *i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasSetAutodialEnableA(
    param0: u32,
    param1: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasSetAutodialEnableW(
    param0: u32,
    param1: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetAutodialParamA(
    param0: u32,
    param1: *c_void,
    param2: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetAutodialParamW(
    param0: u32,
    param1: *c_void,
    param2: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasSetAutodialParamA(
    param0: u32,
    param1: *c_void,
    param2: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasSetAutodialParamW(
    param0: u32,
    param1: *c_void,
    param2: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetPCscf(
    lpszPCscf: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasInvokeEapUI(
    param0: *HRASCONN__,
    param1: u32,
    param2: *tagRASDIALEXTENSIONS,
    param3: HWND,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetLinkStatistics(
    hRasConn: *HRASCONN__,
    dwSubEntry: u32,
    lpStatistics: *RAS_STATS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetConnectionStatistics(
    hRasConn: *HRASCONN__,
    lpStatistics: *RAS_STATS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasClearLinkStatistics(
    hRasConn: *HRASCONN__,
    dwSubEntry: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasClearConnectionStatistics(
    hRasConn: *HRASCONN__,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetEapUserDataA(
    hToken: HANDLE,
    pszPhonebook: ?[*:0]const u8,
    pszEntry: [*:0]const u8,
    pbEapData: ?*u8,
    pdwSizeofEapData: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetEapUserDataW(
    hToken: HANDLE,
    pszPhonebook: ?[*:0]const u16,
    pszEntry: [*:0]const u16,
    pbEapData: ?*u8,
    pdwSizeofEapData: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasSetEapUserDataA(
    hToken: HANDLE,
    pszPhonebook: ?[*:0]const u8,
    pszEntry: [*:0]const u8,
    pbEapData: *u8,
    dwSizeofEapData: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasSetEapUserDataW(
    hToken: HANDLE,
    pszPhonebook: ?[*:0]const u16,
    pszEntry: [*:0]const u16,
    pbEapData: *u8,
    dwSizeofEapData: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetCustomAuthDataA(
    pszPhonebook: ?[*:0]const u8,
    pszEntry: [*:0]const u8,
    pbCustomAuthData: ?[*:0]u8,
    pdwSizeofCustomAuthData: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetCustomAuthDataW(
    pszPhonebook: ?[*:0]const u16,
    pszEntry: [*:0]const u16,
    pbCustomAuthData: ?[*:0]u8,
    pdwSizeofCustomAuthData: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasSetCustomAuthDataA(
    pszPhonebook: ?[*:0]const u8,
    pszEntry: [*:0]const u8,
    pbCustomAuthData: [*:0]u8,
    dwSizeofCustomAuthData: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasSetCustomAuthDataW(
    pszPhonebook: ?[*:0]const u16,
    pszEntry: [*:0]const u16,
    pbCustomAuthData: [*:0]u8,
    dwSizeofCustomAuthData: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetEapUserIdentityW(
    pszPhonebook: ?[*:0]const u16,
    pszEntry: [*:0]const u16,
    dwFlags: u32,
    hwnd: HWND,
    ppRasEapUserIdentity: **tagRASEAPUSERIDENTITYW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetEapUserIdentityA(
    pszPhonebook: ?[*:0]const u8,
    pszEntry: [*:0]const u8,
    dwFlags: u32,
    hwnd: HWND,
    ppRasEapUserIdentity: **tagRASEAPUSERIDENTITYA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasFreeEapUserIdentityW(
    pRasEapUserIdentity: *tagRASEAPUSERIDENTITYW,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RASAPI32" fn RasFreeEapUserIdentityA(
    pRasEapUserIdentity: *tagRASEAPUSERIDENTITYA,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RASAPI32" fn RasDeleteSubEntryA(
    pszPhonebook: ?[*:0]const u8,
    pszEntry: [*:0]const u8,
    dwSubentryId: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasDeleteSubEntryW(
    pszPhonebook: ?[*:0]const u16,
    pszEntry: [*:0]const u16,
    dwSubEntryId: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasUpdateConnection(
    hrasconn: *HRASCONN__,
    lprasupdateconn: *tagRASUPDATECONN,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASAPI32" fn RasGetProjectionInfoEx(
    hrasconn: *HRASCONN__,
    pRasProjection: ?*RAS_PROJECTION_INFO,
    lpdwSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RASDLG" fn RasPhonebookDlgA(
    lpszPhonebook: ?PSTR,
    lpszEntry: ?PSTR,
    lpInfo: *tagRASPBDLGA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "RASDLG" fn RasPhonebookDlgW(
    lpszPhonebook: ?PWSTR,
    lpszEntry: ?PWSTR,
    lpInfo: *tagRASPBDLGW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "RASDLG" fn RasEntryDlgA(
    lpszPhonebook: ?PSTR,
    lpszEntry: ?PSTR,
    lpInfo: *tagRASENTRYDLGA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "RASDLG" fn RasEntryDlgW(
    lpszPhonebook: ?PWSTR,
    lpszEntry: ?PWSTR,
    lpInfo: *tagRASENTRYDLGW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "RASDLG" fn RasDialDlgA(
    lpszPhonebook: ?PSTR,
    lpszEntry: ?PSTR,
    lpszPhoneNumber: ?PSTR,
    lpInfo: *tagRASDIALDLG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "RASDLG" fn RasDialDlgW(
    lpszPhonebook: ?PWSTR,
    lpszEntry: ?PWSTR,
    lpszPhoneNumber: ?PWSTR,
    lpInfo: *tagRASDIALDLG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MPRAPI" fn MprAdminConnectionEnumEx(
    hRasServer: ?*c_void,
    pObjectHeader: *MPRAPI_OBJECT_HEADER,
    dwPreferedMaxLen: u32,
    lpdwEntriesRead: *u32,
    lpdwTotalEntries: *u32,
    ppRasConn: **RAS_CONNECTION_EX,
    lpdwResumeHandle: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminConnectionGetInfoEx(
    hRasServer: ?*c_void,
    hRasConnection: HANDLE,
    pRasConnection: *RAS_CONNECTION_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminServerGetInfoEx(
    hMprServer: ?*c_void,
    pServerInfo: *MPR_SERVER_EX1,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminServerSetInfoEx(
    hMprServer: ?*c_void,
    pServerInfo: *MPR_SERVER_SET_CONFIG_EX1,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigServerGetInfoEx(
    hMprConfig: HANDLE,
    pServerInfo: *MPR_SERVER_EX1,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigServerSetInfoEx(
    hMprConfig: HANDLE,
    pSetServerConfig: *MPR_SERVER_SET_CONFIG_EX1,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminUpdateConnection(
    hRasServer: ?*c_void,
    hRasConnection: HANDLE,
    pRasUpdateConnection: *RAS_UPDATE_CONNECTION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminIsServiceInitialized(
    lpwsServerName: PWSTR,
    fIsServiceInitialized: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceSetCustomInfoEx(
    hMprServer: ?*c_void,
    hInterface: HANDLE,
    pCustomInfo: *MPR_IF_CUSTOMINFOEX2,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceGetCustomInfoEx(
    hMprServer: ?*c_void,
    hInterface: HANDLE,
    pCustomInfo: *MPR_IF_CUSTOMINFOEX2,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigInterfaceGetCustomInfoEx(
    hMprConfig: HANDLE,
    hRouterInterface: HANDLE,
    pCustomInfo: *MPR_IF_CUSTOMINFOEX2,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigInterfaceSetCustomInfoEx(
    hMprConfig: HANDLE,
    hRouterInterface: HANDLE,
    pCustomInfo: *MPR_IF_CUSTOMINFOEX2,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminConnectionEnum(
    hRasServer: ?*c_void,
    dwLevel: u32,
    lplpbBuffer: **u8,
    dwPrefMaxLen: u32,
    lpdwEntriesRead: *u32,
    lpdwTotalEntries: *u32,
    lpdwResumeHandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminPortEnum(
    hRasServer: ?*c_void,
    dwLevel: u32,
    hRasConnection: HANDLE,
    lplpbBuffer: **u8,
    dwPrefMaxLen: u32,
    lpdwEntriesRead: *u32,
    lpdwTotalEntries: *u32,
    lpdwResumeHandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminConnectionGetInfo(
    hRasServer: ?*c_void,
    dwLevel: u32,
    hRasConnection: HANDLE,
    lplpbBuffer: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminPortGetInfo(
    hRasServer: ?*c_void,
    dwLevel: u32,
    hPort: HANDLE,
    lplpbBuffer: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminConnectionClearStats(
    hRasServer: ?*c_void,
    hRasConnection: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminPortClearStats(
    hRasServer: ?*c_void,
    hPort: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminPortReset(
    hRasServer: ?*c_void,
    hPort: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminPortDisconnect(
    hRasServer: ?*c_void,
    hPort: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminConnectionRemoveQuarantine(
    hRasServer: HANDLE,
    hRasConnection: HANDLE,
    fIsIpAddress: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminUserGetInfo(
    lpszServer: [*:0]const u16,
    lpszUser: [*:0]const u16,
    dwLevel: u32,
    lpbBuffer: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminUserSetInfo(
    lpszServer: [*:0]const u16,
    lpszUser: [*:0]const u16,
    dwLevel: u32,
    lpbBuffer: *const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminSendUserMessage(
    hMprServer: ?*c_void,
    hConnection: HANDLE,
    lpwszMessage: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminGetPDCServer(
    lpszDomain: [*:0]const u16,
    lpszServer: [*:0]const u16,
    lpszPDCServer: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminIsServiceRunning(
    lpwsServerName: PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MPRAPI" fn MprAdminServerConnect(
    lpwsServerName: ?PWSTR,
    phMprServer: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminServerDisconnect(
    hMprServer: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MPRAPI" fn MprAdminServerGetCredentials(
    hMprServer: ?*c_void,
    dwLevel: u32,
    lplpbBuffer: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminServerSetCredentials(
    hMprServer: ?*c_void,
    dwLevel: u32,
    lpbBuffer: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminBufferFree(
    pBuffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminGetErrorString(
    dwError: u32,
    lplpwsErrorString: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminServerGetInfo(
    hMprServer: ?*c_void,
    dwLevel: u32,
    lplpbBuffer: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminServerSetInfo(
    hMprServer: ?*c_void,
    dwLevel: u32,
    lpbBuffer: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminEstablishDomainRasServer(
    pszDomain: PWSTR,
    pszMachine: PWSTR,
    bEnable: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminIsDomainRasServer(
    pszDomain: PWSTR,
    pszMachine: PWSTR,
    pbIsRasServer: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminTransportCreate(
    hMprServer: ?*c_void,
    dwTransportId: u32,
    lpwsTransportName: ?PWSTR,
    pGlobalInfo: *u8,
    dwGlobalInfoSize: u32,
    pClientInterfaceInfo: ?*u8,
    dwClientInterfaceInfoSize: u32,
    lpwsDLLPath: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminTransportSetInfo(
    hMprServer: ?*c_void,
    dwTransportId: u32,
    pGlobalInfo: ?*u8,
    dwGlobalInfoSize: u32,
    pClientInterfaceInfo: ?*u8,
    dwClientInterfaceInfoSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminTransportGetInfo(
    hMprServer: ?*c_void,
    dwTransportId: u32,
    ppGlobalInfo: ?*?*u8,
    lpdwGlobalInfoSize: ?*u32,
    ppClientInterfaceInfo: ?*?*u8,
    lpdwClientInterfaceInfoSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminDeviceEnum(
    hMprServer: ?*c_void,
    dwLevel: u32,
    lplpbBuffer: **u8,
    lpdwTotalEntries: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceGetHandle(
    hMprServer: ?*c_void,
    lpwsInterfaceName: PWSTR,
    phInterface: *HANDLE,
    fIncludeClientInterfaces: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceCreate(
    hMprServer: ?*c_void,
    dwLevel: u32,
    lpbBuffer: *u8,
    phInterface: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceGetInfo(
    hMprServer: ?*c_void,
    hInterface: HANDLE,
    dwLevel: u32,
    lplpbBuffer: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceSetInfo(
    hMprServer: ?*c_void,
    hInterface: HANDLE,
    dwLevel: u32,
    lpbBuffer: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceDelete(
    hMprServer: ?*c_void,
    hInterface: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceDeviceGetInfo(
    hMprServer: ?*c_void,
    hInterface: HANDLE,
    dwIndex: u32,
    dwLevel: u32,
    lplpBuffer: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceDeviceSetInfo(
    hMprServer: ?*c_void,
    hInterface: HANDLE,
    dwIndex: u32,
    dwLevel: u32,
    lpbBuffer: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceTransportRemove(
    hMprServer: ?*c_void,
    hInterface: HANDLE,
    dwTransportId: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceTransportAdd(
    hMprServer: ?*c_void,
    hInterface: HANDLE,
    dwTransportId: u32,
    pInterfaceInfo: *u8,
    dwInterfaceInfoSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceTransportGetInfo(
    hMprServer: ?*c_void,
    hInterface: HANDLE,
    dwTransportId: u32,
    ppInterfaceInfo: **u8,
    lpdwInterfaceInfoSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceTransportSetInfo(
    hMprServer: ?*c_void,
    hInterface: HANDLE,
    dwTransportId: u32,
    pInterfaceInfo: *u8,
    dwInterfaceInfoSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceEnum(
    hMprServer: ?*c_void,
    dwLevel: u32,
    lplpbBuffer: **u8,
    dwPrefMaxLen: u32,
    lpdwEntriesRead: *u32,
    lpdwTotalEntries: *u32,
    lpdwResumeHandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceSetCredentials(
    lpwsServer: ?PWSTR,
    lpwsInterfaceName: PWSTR,
    lpwsUserName: ?PWSTR,
    lpwsDomainName: ?PWSTR,
    lpwsPassword: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceGetCredentials(
    lpwsServer: ?PWSTR,
    lpwsInterfaceName: PWSTR,
    lpwsUserName: ?PWSTR,
    lpwsPassword: ?PWSTR,
    lpwsDomainName: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceSetCredentialsEx(
    hMprServer: ?*c_void,
    hInterface: HANDLE,
    dwLevel: u32,
    lpbBuffer: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceGetCredentialsEx(
    hMprServer: ?*c_void,
    hInterface: HANDLE,
    dwLevel: u32,
    lplpbBuffer: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceConnect(
    hMprServer: ?*c_void,
    hInterface: HANDLE,
    hEvent: HANDLE,
    fSynchronous: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceDisconnect(
    hMprServer: ?*c_void,
    hInterface: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceUpdateRoutes(
    hMprServer: ?*c_void,
    hInterface: HANDLE,
    dwProtocolId: u32,
    hEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceQueryUpdateResult(
    hMprServer: ?*c_void,
    hInterface: HANDLE,
    dwProtocolId: u32,
    lpdwUpdateResult: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminInterfaceUpdatePhonebookInfo(
    hMprServer: ?*c_void,
    hInterface: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminRegisterConnectionNotification(
    hMprServer: ?*c_void,
    hEventNotification: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminDeregisterConnectionNotification(
    hMprServer: ?*c_void,
    hEventNotification: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminMIBServerConnect(
    lpwsServerName: ?PWSTR,
    phMibServer: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminMIBServerDisconnect(
    hMibServer: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MPRAPI" fn MprAdminMIBEntryCreate(
    hMibServer: ?*c_void,
    dwPid: u32,
    dwRoutingPid: u32,
    lpEntry: *c_void,
    dwEntrySize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminMIBEntryDelete(
    hMibServer: ?*c_void,
    dwProtocolId: u32,
    dwRoutingPid: u32,
    lpEntry: *c_void,
    dwEntrySize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminMIBEntrySet(
    hMibServer: ?*c_void,
    dwProtocolId: u32,
    dwRoutingPid: u32,
    lpEntry: *c_void,
    dwEntrySize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminMIBEntryGet(
    hMibServer: ?*c_void,
    dwProtocolId: u32,
    dwRoutingPid: u32,
    lpInEntry: *c_void,
    dwInEntrySize: u32,
    lplpOutEntry: **c_void,
    lpOutEntrySize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminMIBEntryGetFirst(
    hMibServer: ?*c_void,
    dwProtocolId: u32,
    dwRoutingPid: u32,
    lpInEntry: *c_void,
    dwInEntrySize: u32,
    lplpOutEntry: **c_void,
    lpOutEntrySize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminMIBEntryGetNext(
    hMibServer: ?*c_void,
    dwProtocolId: u32,
    dwRoutingPid: u32,
    lpInEntry: *c_void,
    dwInEntrySize: u32,
    lplpOutEntry: **c_void,
    lpOutEntrySize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprAdminMIBBufferFree(
    pBuffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigServerInstall(
    dwLevel: u32,
    pBuffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigServerConnect(
    lpwsServerName: ?PWSTR,
    phMprConfig: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigServerDisconnect(
    hMprConfig: HANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MPRAPI" fn MprConfigServerRefresh(
    hMprConfig: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigBufferFree(
    pBuffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigServerGetInfo(
    hMprConfig: HANDLE,
    dwLevel: u32,
    lplpbBuffer: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigServerSetInfo(
    hMprServer: ?*c_void,
    dwLevel: u32,
    lpbBuffer: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigServerBackup(
    hMprConfig: HANDLE,
    lpwsPath: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigServerRestore(
    hMprConfig: HANDLE,
    lpwsPath: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigTransportCreate(
    hMprConfig: HANDLE,
    dwTransportId: u32,
    lpwsTransportName: ?PWSTR,
    pGlobalInfo: [*:0]u8,
    dwGlobalInfoSize: u32,
    pClientInterfaceInfo: ?[*:0]u8,
    dwClientInterfaceInfoSize: u32,
    lpwsDLLPath: ?PWSTR,
    phRouterTransport: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigTransportDelete(
    hMprConfig: HANDLE,
    hRouterTransport: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigTransportGetHandle(
    hMprConfig: HANDLE,
    dwTransportId: u32,
    phRouterTransport: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigTransportSetInfo(
    hMprConfig: HANDLE,
    hRouterTransport: HANDLE,
    pGlobalInfo: ?[*:0]u8,
    dwGlobalInfoSize: u32,
    pClientInterfaceInfo: ?[*:0]u8,
    dwClientInterfaceInfoSize: u32,
    lpwsDLLPath: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigTransportGetInfo(
    hMprConfig: HANDLE,
    hRouterTransport: HANDLE,
    ppGlobalInfo: ?*?*u8,
    lpdwGlobalInfoSize: ?*u32,
    ppClientInterfaceInfo: ?*?*u8,
    lpdwClientInterfaceInfoSize: ?*u32,
    lplpwsDLLPath: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigTransportEnum(
    hMprConfig: HANDLE,
    dwLevel: u32,
    lplpBuffer: ?*?*u8,
    dwPrefMaxLen: u32,
    lpdwEntriesRead: *u32,
    lpdwTotalEntries: *u32,
    lpdwResumeHandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigInterfaceCreate(
    hMprConfig: HANDLE,
    dwLevel: u32,
    lpbBuffer: *u8,
    phRouterInterface: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigInterfaceDelete(
    hMprConfig: HANDLE,
    hRouterInterface: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigInterfaceGetHandle(
    hMprConfig: HANDLE,
    lpwsInterfaceName: PWSTR,
    phRouterInterface: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigInterfaceGetInfo(
    hMprConfig: HANDLE,
    hRouterInterface: HANDLE,
    dwLevel: u32,
    lplpBuffer: **u8,
    lpdwBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigInterfaceSetInfo(
    hMprConfig: HANDLE,
    hRouterInterface: HANDLE,
    dwLevel: u32,
    lpbBuffer: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigInterfaceEnum(
    hMprConfig: HANDLE,
    dwLevel: u32,
    lplpBuffer: ?*?*u8,
    dwPrefMaxLen: u32,
    lpdwEntriesRead: *u32,
    lpdwTotalEntries: *u32,
    lpdwResumeHandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigInterfaceTransportAdd(
    hMprConfig: HANDLE,
    hRouterInterface: HANDLE,
    dwTransportId: u32,
    lpwsTransportName: ?PWSTR,
    pInterfaceInfo: [*:0]u8,
    dwInterfaceInfoSize: u32,
    phRouterIfTransport: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigInterfaceTransportRemove(
    hMprConfig: HANDLE,
    hRouterInterface: HANDLE,
    hRouterIfTransport: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigInterfaceTransportGetHandle(
    hMprConfig: HANDLE,
    hRouterInterface: HANDLE,
    dwTransportId: u32,
    phRouterIfTransport: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigInterfaceTransportGetInfo(
    hMprConfig: HANDLE,
    hRouterInterface: HANDLE,
    hRouterIfTransport: HANDLE,
    ppInterfaceInfo: ?*?*u8,
    lpdwInterfaceInfoSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigInterfaceTransportSetInfo(
    hMprConfig: HANDLE,
    hRouterInterface: HANDLE,
    hRouterIfTransport: HANDLE,
    pInterfaceInfo: ?[*:0]u8,
    dwInterfaceInfoSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigInterfaceTransportEnum(
    hMprConfig: HANDLE,
    hRouterInterface: HANDLE,
    dwLevel: u32,
    lplpBuffer: ?*?*u8,
    dwPrefMaxLen: u32,
    lpdwEntriesRead: *u32,
    lpdwTotalEntries: *u32,
    lpdwResumeHandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigGetFriendlyName(
    hMprConfig: HANDLE,
    pszGuidName: PWSTR,
    pszBuffer: [*]u16,
    dwBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigGetGuidName(
    hMprConfig: HANDLE,
    pszFriendlyName: PWSTR,
    pszBuffer: [*]u16,
    dwBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigFilterGetInfo(
    hMprConfig: HANDLE,
    dwLevel: u32,
    dwTransportId: u32,
    lpBuffer: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprConfigFilterSetInfo(
    hMprConfig: HANDLE,
    dwLevel: u32,
    dwTransportId: u32,
    lpBuffer: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprInfoCreate(
    dwVersion: u32,
    lplpNewHeader: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprInfoDelete(
    lpHeader: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprInfoRemoveAll(
    lpHeader: *c_void,
    lplpNewHeader: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprInfoDuplicate(
    lpHeader: *c_void,
    lplpNewHeader: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprInfoBlockAdd(
    lpHeader: *c_void,
    dwInfoType: u32,
    dwItemSize: u32,
    dwItemCount: u32,
    lpItemData: *u8,
    lplpNewHeader: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprInfoBlockRemove(
    lpHeader: *c_void,
    dwInfoType: u32,
    lplpNewHeader: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprInfoBlockSet(
    lpHeader: *c_void,
    dwInfoType: u32,
    dwItemSize: u32,
    dwItemCount: u32,
    lpItemData: *u8,
    lplpNewHeader: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprInfoBlockFind(
    lpHeader: *c_void,
    dwInfoType: u32,
    lpdwItemSize: *u32,
    lpdwItemCount: *u32,
    lplpItemData: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPRAPI" fn MprInfoBlockQuerySize(
    lpHeader: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn MgmRegisterMProtocol(
    prpiInfo: *ROUTING_PROTOCOL_CONFIG,
    dwProtocolId: u32,
    dwComponentId: u32,
    phProtocol: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn MgmDeRegisterMProtocol(
    hProtocol: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn MgmTakeInterfaceOwnership(
    hProtocol: HANDLE,
    dwIfIndex: u32,
    dwIfNextHopAddr: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn MgmReleaseInterfaceOwnership(
    hProtocol: HANDLE,
    dwIfIndex: u32,
    dwIfNextHopAddr: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn MgmGetProtocolOnInterface(
    dwIfIndex: u32,
    dwIfNextHopAddr: u32,
    pdwIfProtocolId: *u32,
    pdwIfComponentId: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn MgmAddGroupMembershipEntry(
    hProtocol: HANDLE,
    dwSourceAddr: u32,
    dwSourceMask: u32,
    dwGroupAddr: u32,
    dwGroupMask: u32,
    dwIfIndex: u32,
    dwIfNextHopIPAddr: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn MgmDeleteGroupMembershipEntry(
    hProtocol: HANDLE,
    dwSourceAddr: u32,
    dwSourceMask: u32,
    dwGroupAddr: u32,
    dwGroupMask: u32,
    dwIfIndex: u32,
    dwIfNextHopIPAddr: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn MgmGetMfe(
    pimm: *MIB_IPMCAST_MFE,
    pdwBufferSize: *u32,
    pbBuffer: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn MgmGetFirstMfe(
    pdwBufferSize: *u32,
    pbBuffer: *u8,
    pdwNumEntries: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn MgmGetNextMfe(
    pimmStart: *MIB_IPMCAST_MFE,
    pdwBufferSize: *u32,
    pbBuffer: *u8,
    pdwNumEntries: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn MgmGetMfeStats(
    pimm: *MIB_IPMCAST_MFE,
    pdwBufferSize: *u32,
    pbBuffer: *u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn MgmGetFirstMfeStats(
    pdwBufferSize: *u32,
    pbBuffer: *u8,
    pdwNumEntries: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn MgmGetNextMfeStats(
    pimmStart: *MIB_IPMCAST_MFE,
    pdwBufferSize: *u32,
    pbBuffer: *u8,
    pdwNumEntries: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn MgmGroupEnumerationStart(
    hProtocol: HANDLE,
    metEnumType: MGM_ENUM_TYPES,
    phEnumHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn MgmGroupEnumerationGetNext(
    hEnum: HANDLE,
    pdwBufferSize: *u32,
    pbBuffer: *u8,
    pdwNumEntries: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn MgmGroupEnumerationEnd(
    hEnum: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmConvertNetAddressToIpv6AddressAndLength(
    pNetAddress: *RTM_NET_ADDRESS,
    pAddress: *in6_addr,
    pLength: *u32,
    dwAddressSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmConvertIpv6AddressAndLengthToNetAddress(
    pNetAddress: *RTM_NET_ADDRESS,
    Address: in6_addr,
    dwLength: u32,
    dwAddressSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmRegisterEntity(
    RtmEntityInfo: *RTM_ENTITY_INFO,
    ExportMethods: *RTM_ENTITY_EXPORT_METHODS,
    EventCallback: RTM_EVENT_CALLBACK,
    ReserveOpaquePointer: BOOL,
    RtmRegProfile: *RTM_REGN_PROFILE,
    RtmRegHandle: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmDeregisterEntity(
    RtmRegHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetRegisteredEntities(
    RtmRegHandle: ?*c_void,
    NumEntities: *u32,
    EntityHandles: *?*c_void,
    EntityInfos: *RTM_ENTITY_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmReleaseEntities(
    RtmRegHandle: ?*c_void,
    NumEntities: u32,
    EntityHandles: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmLockDestination(
    RtmRegHandle: ?*c_void,
    DestHandle: ?*c_void,
    Exclusive: BOOL,
    LockDest: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetOpaqueInformationPointer(
    RtmRegHandle: ?*c_void,
    DestHandle: ?*c_void,
    OpaqueInfoPointer: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetEntityMethods(
    RtmRegHandle: ?*c_void,
    EntityHandle: ?*c_void,
    NumMethods: *u32,
    ExptMethods: PRTM_ENTITY_EXPORT_METHOD,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmInvokeMethod(
    RtmRegHandle: ?*c_void,
    EntityHandle: ?*c_void,
    Input: *RTM_ENTITY_METHOD_INPUT,
    OutputSize: *u32,
    Output: *RTM_ENTITY_METHOD_OUTPUT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmBlockMethods(
    RtmRegHandle: ?*c_void,
    TargetHandle: HANDLE,
    TargetType: u8,
    BlockingFlag: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetEntityInfo(
    RtmRegHandle: ?*c_void,
    EntityHandle: ?*c_void,
    EntityInfo: *RTM_ENTITY_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetDestInfo(
    RtmRegHandle: ?*c_void,
    DestHandle: ?*c_void,
    ProtocolId: u32,
    TargetViews: u32,
    DestInfo: *RTM_DEST_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetRouteInfo(
    RtmRegHandle: ?*c_void,
    RouteHandle: ?*c_void,
    RouteInfo: *RTM_ROUTE_INFO,
    DestAddress: *RTM_NET_ADDRESS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetNextHopInfo(
    RtmRegHandle: ?*c_void,
    NextHopHandle: ?*c_void,
    NextHopInfo: *RTM_NEXTHOP_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmReleaseEntityInfo(
    RtmRegHandle: ?*c_void,
    EntityInfo: *RTM_ENTITY_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmReleaseDestInfo(
    RtmRegHandle: ?*c_void,
    DestInfo: *RTM_DEST_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmReleaseRouteInfo(
    RtmRegHandle: ?*c_void,
    RouteInfo: *RTM_ROUTE_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmReleaseNextHopInfo(
    RtmRegHandle: ?*c_void,
    NextHopInfo: *RTM_NEXTHOP_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmAddRouteToDest(
    RtmRegHandle: ?*c_void,
    RouteHandle: *?*c_void,
    DestAddress: *RTM_NET_ADDRESS,
    RouteInfo: *RTM_ROUTE_INFO,
    TimeToLive: u32,
    RouteListHandle: ?*c_void,
    NotifyType: u32,
    NotifyHandle: ?*c_void,
    ChangeFlags: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmDeleteRouteToDest(
    RtmRegHandle: ?*c_void,
    RouteHandle: ?*c_void,
    ChangeFlags: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmHoldDestination(
    RtmRegHandle: ?*c_void,
    DestHandle: ?*c_void,
    TargetViews: u32,
    HoldTime: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetRoutePointer(
    RtmRegHandle: ?*c_void,
    RouteHandle: ?*c_void,
    RoutePointer: **RTM_ROUTE_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmLockRoute(
    RtmRegHandle: ?*c_void,
    RouteHandle: ?*c_void,
    Exclusive: BOOL,
    LockRoute: BOOL,
    RoutePointer: **RTM_ROUTE_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmUpdateAndUnlockRoute(
    RtmRegHandle: ?*c_void,
    RouteHandle: ?*c_void,
    TimeToLive: u32,
    RouteListHandle: ?*c_void,
    NotifyType: u32,
    NotifyHandle: ?*c_void,
    ChangeFlags: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetExactMatchDestination(
    RtmRegHandle: ?*c_void,
    DestAddress: *RTM_NET_ADDRESS,
    ProtocolId: u32,
    TargetViews: u32,
    DestInfo: *RTM_DEST_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetMostSpecificDestination(
    RtmRegHandle: ?*c_void,
    DestAddress: *RTM_NET_ADDRESS,
    ProtocolId: u32,
    TargetViews: u32,
    DestInfo: *RTM_DEST_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetLessSpecificDestination(
    RtmRegHandle: ?*c_void,
    DestHandle: ?*c_void,
    ProtocolId: u32,
    TargetViews: u32,
    DestInfo: *RTM_DEST_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetExactMatchRoute(
    RtmRegHandle: ?*c_void,
    DestAddress: *RTM_NET_ADDRESS,
    MatchingFlags: u32,
    RouteInfo: *RTM_ROUTE_INFO,
    InterfaceIndex: u32,
    TargetViews: u32,
    RouteHandle: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmIsBestRoute(
    RtmRegHandle: ?*c_void,
    RouteHandle: ?*c_void,
    BestInViews: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmAddNextHop(
    RtmRegHandle: ?*c_void,
    NextHopInfo: *RTM_NEXTHOP_INFO,
    NextHopHandle: *?*c_void,
    ChangeFlags: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmFindNextHop(
    RtmRegHandle: ?*c_void,
    NextHopInfo: *RTM_NEXTHOP_INFO,
    NextHopHandle: *?*c_void,
    NextHopPointer: **RTM_NEXTHOP_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmDeleteNextHop(
    RtmRegHandle: ?*c_void,
    NextHopHandle: ?*c_void,
    NextHopInfo: *RTM_NEXTHOP_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetNextHopPointer(
    RtmRegHandle: ?*c_void,
    NextHopHandle: ?*c_void,
    NextHopPointer: **RTM_NEXTHOP_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmLockNextHop(
    RtmRegHandle: ?*c_void,
    NextHopHandle: ?*c_void,
    Exclusive: BOOL,
    LockNextHop: BOOL,
    NextHopPointer: **RTM_NEXTHOP_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmCreateDestEnum(
    RtmRegHandle: ?*c_void,
    TargetViews: u32,
    EnumFlags: u32,
    NetAddress: *RTM_NET_ADDRESS,
    ProtocolId: u32,
    RtmEnumHandle: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetEnumDests(
    RtmRegHandle: ?*c_void,
    EnumHandle: ?*c_void,
    NumDests: *u32,
    DestInfos: *RTM_DEST_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmReleaseDests(
    RtmRegHandle: ?*c_void,
    NumDests: u32,
    DestInfos: *RTM_DEST_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmCreateRouteEnum(
    RtmRegHandle: ?*c_void,
    DestHandle: ?*c_void,
    TargetViews: u32,
    EnumFlags: u32,
    StartDest: *RTM_NET_ADDRESS,
    MatchingFlags: u32,
    CriteriaRoute: *RTM_ROUTE_INFO,
    CriteriaInterface: u32,
    RtmEnumHandle: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetEnumRoutes(
    RtmRegHandle: ?*c_void,
    EnumHandle: ?*c_void,
    NumRoutes: *u32,
    RouteHandles: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmReleaseRoutes(
    RtmRegHandle: ?*c_void,
    NumRoutes: u32,
    RouteHandles: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmCreateNextHopEnum(
    RtmRegHandle: ?*c_void,
    EnumFlags: u32,
    NetAddress: *RTM_NET_ADDRESS,
    RtmEnumHandle: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetEnumNextHops(
    RtmRegHandle: ?*c_void,
    EnumHandle: ?*c_void,
    NumNextHops: *u32,
    NextHopHandles: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmReleaseNextHops(
    RtmRegHandle: ?*c_void,
    NumNextHops: u32,
    NextHopHandles: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmDeleteEnumHandle(
    RtmRegHandle: ?*c_void,
    EnumHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmRegisterForChangeNotification(
    RtmRegHandle: ?*c_void,
    TargetViews: u32,
    NotifyFlags: u32,
    NotifyContext: *c_void,
    NotifyHandle: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetChangedDests(
    RtmRegHandle: ?*c_void,
    NotifyHandle: ?*c_void,
    NumDests: *u32,
    ChangedDests: *RTM_DEST_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmReleaseChangedDests(
    RtmRegHandle: ?*c_void,
    NotifyHandle: ?*c_void,
    NumDests: u32,
    ChangedDests: *RTM_DEST_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmIgnoreChangedDests(
    RtmRegHandle: ?*c_void,
    NotifyHandle: ?*c_void,
    NumDests: u32,
    ChangedDests: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetChangeStatus(
    RtmRegHandle: ?*c_void,
    NotifyHandle: ?*c_void,
    DestHandle: ?*c_void,
    ChangeStatus: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmMarkDestForChangeNotification(
    RtmRegHandle: ?*c_void,
    NotifyHandle: ?*c_void,
    DestHandle: ?*c_void,
    MarkDest: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmIsMarkedForChangeNotification(
    RtmRegHandle: ?*c_void,
    NotifyHandle: ?*c_void,
    DestHandle: ?*c_void,
    DestMarked: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmDeregisterFromChangeNotification(
    RtmRegHandle: ?*c_void,
    NotifyHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmCreateRouteList(
    RtmRegHandle: ?*c_void,
    RouteListHandle: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmInsertInRouteList(
    RtmRegHandle: ?*c_void,
    RouteListHandle: ?*c_void,
    NumRoutes: u32,
    RouteHandles: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmCreateRouteListEnum(
    RtmRegHandle: ?*c_void,
    RouteListHandle: ?*c_void,
    RtmEnumHandle: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmGetListEnumRoutes(
    RtmRegHandle: ?*c_void,
    EnumHandle: ?*c_void,
    NumRoutes: *u32,
    RouteHandles: [*]?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmDeleteRouteList(
    RtmRegHandle: ?*c_void,
    RouteListHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rtm" fn RtmReferenceHandles(
    RtmRegHandle: ?*c_void,
    NumHandles: u32,
    RtmHandles: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (60)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const tagRASCONN = tagRASCONNA;
        pub const tagRASCONNSTATUS = tagRASCONNSTATUSA;
        pub const tagRASDIALPARAMS = tagRASDIALPARAMSA;
        pub const tagRASENTRYNAME = tagRASENTRYNAMEA;
        pub const tagRASAMB = tagRASAMBA;
        pub const tagRASPPPNBF = tagRASPPPNBFA;
        pub const tagRASPPPIP = tagRASPPPIPA;
        pub const tagRASPPPLCP = tagRASPPPLCPA;
        pub const tagRASDEVINFO = tagRASDEVINFOA;
        pub const tagRASENTRY = tagRASENTRYA;
        pub const RASADFUNC = RASADFUNCA;
        pub const tagRASSUBENTRY = tagRASSUBENTRYA;
        pub const tagRASCREDENTIALS = tagRASCREDENTIALSA;
        pub const tagRASAUTODIALENTRY = tagRASAUTODIALENTRYA;
        pub const tagRASEAPUSERIDENTITY = tagRASEAPUSERIDENTITYA;
        pub const RASPBDLGFUNC = RASPBDLGFUNCA;
        pub const tagRASNOUSER = tagRASNOUSERA;
        pub const tagRASPBDLG = tagRASPBDLGA;
        pub const tagRASENTRYDLG = tagRASENTRYDLGA;
        pub const RasDial = RasDialA;
        pub const RasEnumConnections = RasEnumConnectionsA;
        pub const RasEnumEntries = RasEnumEntriesA;
        pub const RasGetConnectStatus = RasGetConnectStatusA;
        pub const RasGetErrorString = RasGetErrorStringA;
        pub const RasHangUp = RasHangUpA;
        pub const RasGetProjectionInfo = RasGetProjectionInfoA;
        pub const RasCreatePhonebookEntry = RasCreatePhonebookEntryA;
        pub const RasEditPhonebookEntry = RasEditPhonebookEntryA;
        pub const RasSetEntryDialParams = RasSetEntryDialParamsA;
        pub const RasGetEntryDialParams = RasGetEntryDialParamsA;
        pub const RasEnumDevices = RasEnumDevicesA;
        pub const RasGetCountryInfo = RasGetCountryInfoA;
        pub const RasGetEntryProperties = RasGetEntryPropertiesA;
        pub const RasSetEntryProperties = RasSetEntryPropertiesA;
        pub const RasRenameEntry = RasRenameEntryA;
        pub const RasDeleteEntry = RasDeleteEntryA;
        pub const RasValidateEntryName = RasValidateEntryNameA;
        pub const RasConnectionNotification = RasConnectionNotificationA;
        pub const RasGetSubEntryHandle = RasGetSubEntryHandleA;
        pub const RasGetCredentials = RasGetCredentialsA;
        pub const RasSetCredentials = RasSetCredentialsA;
        pub const RasGetSubEntryProperties = RasGetSubEntryPropertiesA;
        pub const RasSetSubEntryProperties = RasSetSubEntryPropertiesA;
        pub const RasGetAutodialAddress = RasGetAutodialAddressA;
        pub const RasSetAutodialAddress = RasSetAutodialAddressA;
        pub const RasEnumAutodialAddresses = RasEnumAutodialAddressesA;
        pub const RasGetAutodialEnable = RasGetAutodialEnableA;
        pub const RasSetAutodialEnable = RasSetAutodialEnableA;
        pub const RasGetAutodialParam = RasGetAutodialParamA;
        pub const RasSetAutodialParam = RasSetAutodialParamA;
        pub const RasGetEapUserData = RasGetEapUserDataA;
        pub const RasSetEapUserData = RasSetEapUserDataA;
        pub const RasGetCustomAuthData = RasGetCustomAuthDataA;
        pub const RasSetCustomAuthData = RasSetCustomAuthDataA;
        pub const RasGetEapUserIdentity = RasGetEapUserIdentityA;
        pub const RasFreeEapUserIdentity = RasFreeEapUserIdentityA;
        pub const RasDeleteSubEntry = RasDeleteSubEntryA;
        pub const RasPhonebookDlg = RasPhonebookDlgA;
        pub const RasEntryDlg = RasEntryDlgA;
        pub const RasDialDlg = RasDialDlgA;
    },
    .wide => struct {
        pub const tagRASCONN = tagRASCONNW;
        pub const tagRASCONNSTATUS = tagRASCONNSTATUSW;
        pub const tagRASDIALPARAMS = tagRASDIALPARAMSW;
        pub const tagRASENTRYNAME = tagRASENTRYNAMEW;
        pub const tagRASAMB = tagRASAMBW;
        pub const tagRASPPPNBF = tagRASPPPNBFW;
        pub const tagRASPPPIP = tagRASPPPIPW;
        pub const tagRASPPPLCP = tagRASPPPLCPW;
        pub const tagRASDEVINFO = tagRASDEVINFOW;
        pub const tagRASENTRY = tagRASENTRYW;
        pub const RASADFUNC = RASADFUNCW;
        pub const tagRASSUBENTRY = tagRASSUBENTRYW;
        pub const tagRASCREDENTIALS = tagRASCREDENTIALSW;
        pub const tagRASAUTODIALENTRY = tagRASAUTODIALENTRYW;
        pub const tagRASEAPUSERIDENTITY = tagRASEAPUSERIDENTITYW;
        pub const RASPBDLGFUNC = RASPBDLGFUNCW;
        pub const tagRASNOUSER = tagRASNOUSERW;
        pub const tagRASPBDLG = tagRASPBDLGW;
        pub const tagRASENTRYDLG = tagRASENTRYDLGW;
        pub const RasDial = RasDialW;
        pub const RasEnumConnections = RasEnumConnectionsW;
        pub const RasEnumEntries = RasEnumEntriesW;
        pub const RasGetConnectStatus = RasGetConnectStatusW;
        pub const RasGetErrorString = RasGetErrorStringW;
        pub const RasHangUp = RasHangUpW;
        pub const RasGetProjectionInfo = RasGetProjectionInfoW;
        pub const RasCreatePhonebookEntry = RasCreatePhonebookEntryW;
        pub const RasEditPhonebookEntry = RasEditPhonebookEntryW;
        pub const RasSetEntryDialParams = RasSetEntryDialParamsW;
        pub const RasGetEntryDialParams = RasGetEntryDialParamsW;
        pub const RasEnumDevices = RasEnumDevicesW;
        pub const RasGetCountryInfo = RasGetCountryInfoW;
        pub const RasGetEntryProperties = RasGetEntryPropertiesW;
        pub const RasSetEntryProperties = RasSetEntryPropertiesW;
        pub const RasRenameEntry = RasRenameEntryW;
        pub const RasDeleteEntry = RasDeleteEntryW;
        pub const RasValidateEntryName = RasValidateEntryNameW;
        pub const RasConnectionNotification = RasConnectionNotificationW;
        pub const RasGetSubEntryHandle = RasGetSubEntryHandleW;
        pub const RasGetCredentials = RasGetCredentialsW;
        pub const RasSetCredentials = RasSetCredentialsW;
        pub const RasGetSubEntryProperties = RasGetSubEntryPropertiesW;
        pub const RasSetSubEntryProperties = RasSetSubEntryPropertiesW;
        pub const RasGetAutodialAddress = RasGetAutodialAddressW;
        pub const RasSetAutodialAddress = RasSetAutodialAddressW;
        pub const RasEnumAutodialAddresses = RasEnumAutodialAddressesW;
        pub const RasGetAutodialEnable = RasGetAutodialEnableW;
        pub const RasSetAutodialEnable = RasSetAutodialEnableW;
        pub const RasGetAutodialParam = RasGetAutodialParamW;
        pub const RasSetAutodialParam = RasSetAutodialParamW;
        pub const RasGetEapUserData = RasGetEapUserDataW;
        pub const RasSetEapUserData = RasSetEapUserDataW;
        pub const RasGetCustomAuthData = RasGetCustomAuthDataW;
        pub const RasSetCustomAuthData = RasSetCustomAuthDataW;
        pub const RasGetEapUserIdentity = RasGetEapUserIdentityW;
        pub const RasFreeEapUserIdentity = RasFreeEapUserIdentityW;
        pub const RasDeleteSubEntry = RasDeleteSubEntryW;
        pub const RasPhonebookDlg = RasPhonebookDlgW;
        pub const RasEntryDlg = RasEntryDlgW;
        pub const RasDialDlg = RasDialDlgW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const tagRASCONN = *opaque{};
        pub const tagRASCONNSTATUS = *opaque{};
        pub const tagRASDIALPARAMS = *opaque{};
        pub const tagRASENTRYNAME = *opaque{};
        pub const tagRASAMB = *opaque{};
        pub const tagRASPPPNBF = *opaque{};
        pub const tagRASPPPIP = *opaque{};
        pub const tagRASPPPLCP = *opaque{};
        pub const tagRASDEVINFO = *opaque{};
        pub const tagRASENTRY = *opaque{};
        pub const RASADFUNC = *opaque{};
        pub const tagRASSUBENTRY = *opaque{};
        pub const tagRASCREDENTIALS = *opaque{};
        pub const tagRASAUTODIALENTRY = *opaque{};
        pub const tagRASEAPUSERIDENTITY = *opaque{};
        pub const RASPBDLGFUNC = *opaque{};
        pub const tagRASNOUSER = *opaque{};
        pub const tagRASPBDLG = *opaque{};
        pub const tagRASENTRYDLG = *opaque{};
        pub const RasDial = *opaque{};
        pub const RasEnumConnections = *opaque{};
        pub const RasEnumEntries = *opaque{};
        pub const RasGetConnectStatus = *opaque{};
        pub const RasGetErrorString = *opaque{};
        pub const RasHangUp = *opaque{};
        pub const RasGetProjectionInfo = *opaque{};
        pub const RasCreatePhonebookEntry = *opaque{};
        pub const RasEditPhonebookEntry = *opaque{};
        pub const RasSetEntryDialParams = *opaque{};
        pub const RasGetEntryDialParams = *opaque{};
        pub const RasEnumDevices = *opaque{};
        pub const RasGetCountryInfo = *opaque{};
        pub const RasGetEntryProperties = *opaque{};
        pub const RasSetEntryProperties = *opaque{};
        pub const RasRenameEntry = *opaque{};
        pub const RasDeleteEntry = *opaque{};
        pub const RasValidateEntryName = *opaque{};
        pub const RasConnectionNotification = *opaque{};
        pub const RasGetSubEntryHandle = *opaque{};
        pub const RasGetCredentials = *opaque{};
        pub const RasSetCredentials = *opaque{};
        pub const RasGetSubEntryProperties = *opaque{};
        pub const RasSetSubEntryProperties = *opaque{};
        pub const RasGetAutodialAddress = *opaque{};
        pub const RasSetAutodialAddress = *opaque{};
        pub const RasEnumAutodialAddresses = *opaque{};
        pub const RasGetAutodialEnable = *opaque{};
        pub const RasSetAutodialEnable = *opaque{};
        pub const RasGetAutodialParam = *opaque{};
        pub const RasSetAutodialParam = *opaque{};
        pub const RasGetEapUserData = *opaque{};
        pub const RasSetEapUserData = *opaque{};
        pub const RasGetCustomAuthData = *opaque{};
        pub const RasSetCustomAuthData = *opaque{};
        pub const RasGetEapUserIdentity = *opaque{};
        pub const RasFreeEapUserIdentity = *opaque{};
        pub const RasDeleteSubEntry = *opaque{};
        pub const RasPhonebookDlg = *opaque{};
        pub const RasEntryDlg = *opaque{};
        pub const RasDialDlg = *opaque{};
    } else struct {
        pub const tagRASCONN = @compileError("'tagRASCONN' requires that UNICODE be set to true or false in the root module");
        pub const tagRASCONNSTATUS = @compileError("'tagRASCONNSTATUS' requires that UNICODE be set to true or false in the root module");
        pub const tagRASDIALPARAMS = @compileError("'tagRASDIALPARAMS' requires that UNICODE be set to true or false in the root module");
        pub const tagRASENTRYNAME = @compileError("'tagRASENTRYNAME' requires that UNICODE be set to true or false in the root module");
        pub const tagRASAMB = @compileError("'tagRASAMB' requires that UNICODE be set to true or false in the root module");
        pub const tagRASPPPNBF = @compileError("'tagRASPPPNBF' requires that UNICODE be set to true or false in the root module");
        pub const tagRASPPPIP = @compileError("'tagRASPPPIP' requires that UNICODE be set to true or false in the root module");
        pub const tagRASPPPLCP = @compileError("'tagRASPPPLCP' requires that UNICODE be set to true or false in the root module");
        pub const tagRASDEVINFO = @compileError("'tagRASDEVINFO' requires that UNICODE be set to true or false in the root module");
        pub const tagRASENTRY = @compileError("'tagRASENTRY' requires that UNICODE be set to true or false in the root module");
        pub const RASADFUNC = @compileError("'RASADFUNC' requires that UNICODE be set to true or false in the root module");
        pub const tagRASSUBENTRY = @compileError("'tagRASSUBENTRY' requires that UNICODE be set to true or false in the root module");
        pub const tagRASCREDENTIALS = @compileError("'tagRASCREDENTIALS' requires that UNICODE be set to true or false in the root module");
        pub const tagRASAUTODIALENTRY = @compileError("'tagRASAUTODIALENTRY' requires that UNICODE be set to true or false in the root module");
        pub const tagRASEAPUSERIDENTITY = @compileError("'tagRASEAPUSERIDENTITY' requires that UNICODE be set to true or false in the root module");
        pub const RASPBDLGFUNC = @compileError("'RASPBDLGFUNC' requires that UNICODE be set to true or false in the root module");
        pub const tagRASNOUSER = @compileError("'tagRASNOUSER' requires that UNICODE be set to true or false in the root module");
        pub const tagRASPBDLG = @compileError("'tagRASPBDLG' requires that UNICODE be set to true or false in the root module");
        pub const tagRASENTRYDLG = @compileError("'tagRASENTRYDLG' requires that UNICODE be set to true or false in the root module");
        pub const RasDial = @compileError("'RasDial' requires that UNICODE be set to true or false in the root module");
        pub const RasEnumConnections = @compileError("'RasEnumConnections' requires that UNICODE be set to true or false in the root module");
        pub const RasEnumEntries = @compileError("'RasEnumEntries' requires that UNICODE be set to true or false in the root module");
        pub const RasGetConnectStatus = @compileError("'RasGetConnectStatus' requires that UNICODE be set to true or false in the root module");
        pub const RasGetErrorString = @compileError("'RasGetErrorString' requires that UNICODE be set to true or false in the root module");
        pub const RasHangUp = @compileError("'RasHangUp' requires that UNICODE be set to true or false in the root module");
        pub const RasGetProjectionInfo = @compileError("'RasGetProjectionInfo' requires that UNICODE be set to true or false in the root module");
        pub const RasCreatePhonebookEntry = @compileError("'RasCreatePhonebookEntry' requires that UNICODE be set to true or false in the root module");
        pub const RasEditPhonebookEntry = @compileError("'RasEditPhonebookEntry' requires that UNICODE be set to true or false in the root module");
        pub const RasSetEntryDialParams = @compileError("'RasSetEntryDialParams' requires that UNICODE be set to true or false in the root module");
        pub const RasGetEntryDialParams = @compileError("'RasGetEntryDialParams' requires that UNICODE be set to true or false in the root module");
        pub const RasEnumDevices = @compileError("'RasEnumDevices' requires that UNICODE be set to true or false in the root module");
        pub const RasGetCountryInfo = @compileError("'RasGetCountryInfo' requires that UNICODE be set to true or false in the root module");
        pub const RasGetEntryProperties = @compileError("'RasGetEntryProperties' requires that UNICODE be set to true or false in the root module");
        pub const RasSetEntryProperties = @compileError("'RasSetEntryProperties' requires that UNICODE be set to true or false in the root module");
        pub const RasRenameEntry = @compileError("'RasRenameEntry' requires that UNICODE be set to true or false in the root module");
        pub const RasDeleteEntry = @compileError("'RasDeleteEntry' requires that UNICODE be set to true or false in the root module");
        pub const RasValidateEntryName = @compileError("'RasValidateEntryName' requires that UNICODE be set to true or false in the root module");
        pub const RasConnectionNotification = @compileError("'RasConnectionNotification' requires that UNICODE be set to true or false in the root module");
        pub const RasGetSubEntryHandle = @compileError("'RasGetSubEntryHandle' requires that UNICODE be set to true or false in the root module");
        pub const RasGetCredentials = @compileError("'RasGetCredentials' requires that UNICODE be set to true or false in the root module");
        pub const RasSetCredentials = @compileError("'RasSetCredentials' requires that UNICODE be set to true or false in the root module");
        pub const RasGetSubEntryProperties = @compileError("'RasGetSubEntryProperties' requires that UNICODE be set to true or false in the root module");
        pub const RasSetSubEntryProperties = @compileError("'RasSetSubEntryProperties' requires that UNICODE be set to true or false in the root module");
        pub const RasGetAutodialAddress = @compileError("'RasGetAutodialAddress' requires that UNICODE be set to true or false in the root module");
        pub const RasSetAutodialAddress = @compileError("'RasSetAutodialAddress' requires that UNICODE be set to true or false in the root module");
        pub const RasEnumAutodialAddresses = @compileError("'RasEnumAutodialAddresses' requires that UNICODE be set to true or false in the root module");
        pub const RasGetAutodialEnable = @compileError("'RasGetAutodialEnable' requires that UNICODE be set to true or false in the root module");
        pub const RasSetAutodialEnable = @compileError("'RasSetAutodialEnable' requires that UNICODE be set to true or false in the root module");
        pub const RasGetAutodialParam = @compileError("'RasGetAutodialParam' requires that UNICODE be set to true or false in the root module");
        pub const RasSetAutodialParam = @compileError("'RasSetAutodialParam' requires that UNICODE be set to true or false in the root module");
        pub const RasGetEapUserData = @compileError("'RasGetEapUserData' requires that UNICODE be set to true or false in the root module");
        pub const RasSetEapUserData = @compileError("'RasSetEapUserData' requires that UNICODE be set to true or false in the root module");
        pub const RasGetCustomAuthData = @compileError("'RasGetCustomAuthData' requires that UNICODE be set to true or false in the root module");
        pub const RasSetCustomAuthData = @compileError("'RasSetCustomAuthData' requires that UNICODE be set to true or false in the root module");
        pub const RasGetEapUserIdentity = @compileError("'RasGetEapUserIdentity' requires that UNICODE be set to true or false in the root module");
        pub const RasFreeEapUserIdentity = @compileError("'RasFreeEapUserIdentity' requires that UNICODE be set to true or false in the root module");
        pub const RasDeleteSubEntry = @compileError("'RasDeleteSubEntry' requires that UNICODE be set to true or false in the root module");
        pub const RasPhonebookDlg = @compileError("'RasPhonebookDlg' requires that UNICODE be set to true or false in the root module");
        pub const RasEntryDlg = @compileError("'RasEntryDlg' requires that UNICODE be set to true or false in the root module");
        pub const RasDialDlg = @compileError("'RasDialDlg' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (13)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const HWND = @import("windows_and_messaging.zig").HWND;
const PWSTR = @import("system_services.zig").PWSTR;
const HINSTANCE = @import("system_services.zig").HINSTANCE;
const FILETIME = @import("windows_programming.zig").FILETIME;
const in6_addr = @import("win_sock.zig").in6_addr;
const MIB_IPMCAST_MFE = @import("mib.zig").MIB_IPMCAST_MFE;
const HANDLE = @import("system_services.zig").HANDLE;
const PSTR = @import("system_services.zig").PSTR;
const CRYPTOAPI_BLOB = @import("security.zig").CRYPTOAPI_BLOB;
const BOOL = @import("system_services.zig").BOOL;
const LUID = @import("kernel.zig").LUID;
const in_addr = @import("win_sock.zig").in_addr;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = RASDIALFUNC;
    _ = RASDIALFUNC1;
    _ = RASDIALFUNC2;
    _ = ORASADFUNC;
    _ = RASADFUNCA;
    _ = RASADFUNCW;
    _ = PFNRASGETBUFFER;
    _ = PFNRASFREEBUFFER;
    _ = PFNRASSENDBUFFER;
    _ = PFNRASRECEIVEBUFFER;
    _ = PFNRASRETRIEVEBUFFER;
    _ = RasCustomScriptExecuteFn;
    _ = PFNRASSETCOMMSETTINGS;
    _ = RasCustomHangUpFn;
    _ = RasCustomDialFn;
    _ = RasCustomDeleteEntryNotifyFn;
    _ = RASPBDLGFUNCW;
    _ = RASPBDLGFUNCA;
    _ = RasCustomDialDlgFn;
    _ = RasCustomEntryDlgFn;
    _ = PMPRADMINGETIPADDRESSFORUSER;
    _ = PMPRADMINRELEASEIPADRESS;
    _ = PMPRADMINGETIPV6ADDRESSFORUSER;
    _ = PMPRADMINRELEASEIPV6ADDRESSFORUSER;
    _ = PMPRADMINACCEPTNEWCONNECTION;
    _ = PMPRADMINACCEPTNEWCONNECTION2;
    _ = PMPRADMINACCEPTNEWCONNECTION3;
    _ = PMPRADMINACCEPTNEWLINK;
    _ = PMPRADMINCONNECTIONHANGUPNOTIFICATION;
    _ = PMPRADMINCONNECTIONHANGUPNOTIFICATION2;
    _ = PMPRADMINCONNECTIONHANGUPNOTIFICATION3;
    _ = PMPRADMINLINKHANGUPNOTIFICATION;
    _ = PMPRADMINTERMINATEDLL;
    _ = PMPRADMINACCEPTREAUTHENTICATION;
    _ = PMPRADMINACCEPTNEWCONNECTIONEX;
    _ = PMPRADMINACCEPTREAUTHENTICATIONEX;
    _ = PMPRADMINACCEPTTUNNELENDPOINTCHANGEEX;
    _ = PMPRADMINCONNECTIONHANGUPNOTIFICATIONEX;
    _ = PMPRADMINRASVALIDATEPREAUTHENTICATEDCONNECTIONEX;
    _ = RASSECURITYPROC;
    _ = PMGM_RPF_CALLBACK;
    _ = PMGM_CREATION_ALERT_CALLBACK;
    _ = PMGM_PRUNE_ALERT_CALLBACK;
    _ = PMGM_JOIN_ALERT_CALLBACK;
    _ = PMGM_WRONG_IF_CALLBACK;
    _ = PMGM_LOCAL_JOIN_CALLBACK;
    _ = PMGM_LOCAL_LEAVE_CALLBACK;
    _ = PMGM_DISABLE_IGMP_CALLBACK;
    _ = PMGM_ENABLE_IGMP_CALLBACK;
    _ = _EVENT_CALLBACK;
    _ = RTM_EVENT_CALLBACK;
    _ = PRTM_EVENT_CALLBACK;
    _ = _ENTITY_METHOD;
    _ = RTM_ENTITY_EXPORT_METHOD;
    _ = PRTM_ENTITY_EXPORT_METHOD;

    const constant_export_count = 0;
    const type_export_count = 217;
    const enum_value_export_count = 102;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 277;
    const unicode_alias_count = 60;
    const import_count = 13;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

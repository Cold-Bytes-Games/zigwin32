//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (4)
//--------------------------------------------------------------------------------
pub const MAGTRANSFORM = extern struct {
    v: [9]f32,
};

pub const MAGIMAGEHEADER = extern struct {
    width: u32,
    height: u32,
    format: Guid,
    stride: u32,
    offset: u32,
    cbSize: ?*c_void,
};

pub const MAGCOLOREFFECT = extern struct {
    transform: [25]f32,
};

pub const MagImageScalingCallback = fn(
    hwnd: HWND,
    srcdata: *c_void,
    srcheader: MAGIMAGEHEADER,
    destdata: *c_void,
    destheader: MAGIMAGEHEADER,
    unclipped: RECT,
    clipped: RECT,
    dirty: HRGN,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Functions (19)
//--------------------------------------------------------------------------------
pub extern "MAGNIFICATION" fn MagInitialize(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MAGNIFICATION" fn MagUninitialize(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MAGNIFICATION" fn MagSetWindowSource(
    hwnd: HWND,
    rect: RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MAGNIFICATION" fn MagGetWindowSource(
    hwnd: HWND,
    pRect: *RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MAGNIFICATION" fn MagSetWindowTransform(
    hwnd: HWND,
    pTransform: *MAGTRANSFORM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MAGNIFICATION" fn MagGetWindowTransform(
    hwnd: HWND,
    pTransform: *MAGTRANSFORM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MAGNIFICATION" fn MagSetWindowFilterList(
    hwnd: HWND,
    dwFilterMode: u32,
    count: i32,
    pHWND: *HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MAGNIFICATION" fn MagGetWindowFilterList(
    hwnd: HWND,
    pdwFilterMode: *u32,
    count: i32,
    pHWND: *HWND,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MAGNIFICATION" fn MagSetImageScalingCallback(
    hwnd: HWND,
    callback: MagImageScalingCallback,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MAGNIFICATION" fn MagGetImageScalingCallback(
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) MagImageScalingCallback;

pub extern "MAGNIFICATION" fn MagSetColorEffect(
    hwnd: HWND,
    pEffect: *MAGCOLOREFFECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MAGNIFICATION" fn MagGetColorEffect(
    hwnd: HWND,
    pEffect: *MAGCOLOREFFECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MAGNIFICATION" fn MagSetFullscreenTransform(
    magLevel: f32,
    xOffset: i32,
    yOffset: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MAGNIFICATION" fn MagGetFullscreenTransform(
    pMagLevel: *f32,
    pxOffset: *i32,
    pyOffset: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MAGNIFICATION" fn MagSetFullscreenColorEffect(
    pEffect: *MAGCOLOREFFECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MAGNIFICATION" fn MagGetFullscreenColorEffect(
    pEffect: *MAGCOLOREFFECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MAGNIFICATION" fn MagSetInputTransform(
    fEnabled: BOOL,
    pRectSource: *const RECT,
    pRectDest: *const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MAGNIFICATION" fn MagGetInputTransform(
    pfEnabled: *BOOL,
    pRectSource: *RECT,
    pRectDest: *RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MAGNIFICATION" fn MagShowSystemCursor(
    fShowCursor: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (5)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const RECT = @import("display_devices.zig").RECT;
const HRGN = @import("gdi.zig").HRGN;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = MagImageScalingCallback;

    const constant_export_count = 0;
    const type_export_count = 4;
    const enum_value_export_count = 0;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 19;
    const unicode_alias_count = 0;
    const import_count = 5;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

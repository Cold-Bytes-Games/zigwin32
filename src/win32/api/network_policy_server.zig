//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (66)
//--------------------------------------------------------------------------------
const CLSID_SdoMachine_Value = @import("../zig.zig").Guid.initString("E9218AE7-9E91-11D1-BF60-0080C7846BC0");
pub const CLSID_SdoMachine = &CLSID_SdoMachine_Value;

pub const ATTRIBUTEID = extern enum(u32) {
    ATTRIBUTE_UNDEFINED = 0,
    ATTRIBUTE_MIN_VALUE = 1,
    RADIUS_ATTRIBUTE_USER_NAME = 1,
    RADIUS_ATTRIBUTE_USER_PASSWORD = 2,
    RADIUS_ATTRIBUTE_CHAP_PASSWORD = 3,
    RADIUS_ATTRIBUTE_NAS_IP_ADDRESS = 4,
    RADIUS_ATTRIBUTE_NAS_PORT = 5,
    RADIUS_ATTRIBUTE_SERVICE_TYPE = 6,
    RADIUS_ATTRIBUTE_FRAMED_PROTOCOL = 7,
    RADIUS_ATTRIBUTE_FRAMED_IP_ADDRESS = 8,
    RADIUS_ATTRIBUTE_FRAMED_IP_NETMASK = 9,
    RADIUS_ATTRIBUTE_FRAMED_ROUTING = 10,
    RADIUS_ATTRIBUTE_FILTER_ID = 11,
    RADIUS_ATTRIBUTE_FRAMED_MTU = 12,
    RADIUS_ATTRIBUTE_FRAMED_COMPRESSION = 13,
    RADIUS_ATTRIBUTE_LOGIN_IP_HOST = 14,
    RADIUS_ATTRIBUTE_LOGIN_SERVICE = 15,
    RADIUS_ATTRIBUTE_LOGIN_TCP_PORT = 16,
    RADIUS_ATTRIBUTE_UNASSIGNED1 = 17,
    RADIUS_ATTRIBUTE_REPLY_MESSAGE = 18,
    RADIUS_ATTRIBUTE_CALLBACK_NUMBER = 19,
    RADIUS_ATTRIBUTE_CALLBACK_ID = 20,
    RADIUS_ATTRIBUTE_UNASSIGNED2 = 21,
    RADIUS_ATTRIBUTE_FRAMED_ROUTE = 22,
    RADIUS_ATTRIBUTE_FRAMED_IPX_NETWORK = 23,
    RADIUS_ATTRIBUTE_STATE = 24,
    RADIUS_ATTRIBUTE_CLASS = 25,
    RADIUS_ATTRIBUTE_VENDOR_SPECIFIC = 26,
    RADIUS_ATTRIBUTE_SESSION_TIMEOUT = 27,
    RADIUS_ATTRIBUTE_IDLE_TIMEOUT = 28,
    RADIUS_ATTRIBUTE_TERMINATION_ACTION = 29,
    RADIUS_ATTRIBUTE_CALLED_STATION_ID = 30,
    RADIUS_ATTRIBUTE_CALLING_STATION_ID = 31,
    RADIUS_ATTRIBUTE_NAS_IDENTIFIER = 32,
    RADIUS_ATTRIBUTE_PROXY_STATE = 33,
    RADIUS_ATTRIBUTE_LOGIN_LAT_SERVICE = 34,
    RADIUS_ATTRIBUTE_LOGIN_LAT_NODE = 35,
    RADIUS_ATTRIBUTE_LOGIN_LAT_GROUP = 36,
    RADIUS_ATTRIBUTE_FRAMED_APPLETALK_LINK = 37,
    RADIUS_ATTRIBUTE_FRAMED_APPLETALK_NET = 38,
    RADIUS_ATTRIBUTE_FRAMED_APPLETALK_ZONE = 39,
    RADIUS_ATTRIBUTE_ACCT_STATUS_TYPE = 40,
    RADIUS_ATTRIBUTE_ACCT_DELAY_TIME = 41,
    RADIUS_ATTRIBUTE_ACCT_INPUT_OCTETS = 42,
    RADIUS_ATTRIBUTE_ACCT_OUTPUT_OCTETS = 43,
    RADIUS_ATTRIBUTE_ACCT_SESSION_ID = 44,
    RADIUS_ATTRIBUTE_ACCT_AUTHENTIC = 45,
    RADIUS_ATTRIBUTE_ACCT_SESSION_TIME = 46,
    RADIUS_ATTRIBUTE_ACCT_INPUT_PACKETS = 47,
    RADIUS_ATTRIBUTE_ACCT_OUTPUT_PACKETS = 48,
    RADIUS_ATTRIBUTE_ACCT_TERMINATE_CAUSE = 49,
    RADIUS_ATTRIBUTE_ACCT_MULTI_SSN_ID = 50,
    RADIUS_ATTRIBUTE_ACCT_LINK_COUNT = 51,
    RADIUS_ATTRIBUTE_CHAP_CHALLENGE = 60,
    RADIUS_ATTRIBUTE_NAS_PORT_TYPE = 61,
    RADIUS_ATTRIBUTE_PORT_LIMIT = 62,
    RADIUS_ATTRIBUTE_LOGIN_LAT_PORT = 63,
    RADIUS_ATTRIBUTE_TUNNEL_TYPE = 64,
    RADIUS_ATTRIBUTE_TUNNEL_MEDIUM_TYPE = 65,
    RADIUS_ATTRIBUTE_TUNNEL_CLIENT_ENDPT = 66,
    RADIUS_ATTRIBUTE_TUNNEL_SERVER_ENDPT = 67,
    RADIUS_ATTRIBUTE_ACCT_TUNNEL_CONN = 68,
    RADIUS_ATTRIBUTE_TUNNEL_PASSWORD = 69,
    RADIUS_ATTRIBUTE_ARAP_PASSWORD = 70,
    RADIUS_ATTRIBUTE_ARAP_FEATURES = 71,
    RADIUS_ATTRIBUTE_ARAP_ZONE_ACCESS = 72,
    RADIUS_ATTRIBUTE_ARAP_SECURITY = 73,
    RADIUS_ATTRIBUTE_ARAP_SECURITY_DATA = 74,
    RADIUS_ATTRIBUTE_PASSWORD_RETRY = 75,
    RADIUS_ATTRIBUTE_PROMPT = 76,
    RADIUS_ATTRIBUTE_CONNECT_INFO = 77,
    RADIUS_ATTRIBUTE_CONFIGURATION_TOKEN = 78,
    RADIUS_ATTRIBUTE_EAP_MESSAGE = 79,
    RADIUS_ATTRIBUTE_SIGNATURE = 80,
    RADIUS_ATTRIBUTE_TUNNEL_PVT_GROUP_ID = 81,
    RADIUS_ATTRIBUTE_TUNNEL_ASSIGNMENT_ID = 82,
    RADIUS_ATTRIBUTE_TUNNEL_PREFERENCE = 83,
    RADIUS_ATTRIBUTE_ARAP_CHALLENGE_RESPONSE = 84,
    RADIUS_ATTRIBUTE_ACCT_INTERIM_INTERVAL = 85,
    RADIUS_ATTRIBUTE_NAS_IPv6_ADDRESS = 95,
    RADIUS_ATTRIBUTE_FRAMED_INTERFACE_ID = 96,
    RADIUS_ATTRIBUTE_FRAMED_IPv6_PREFIX = 97,
    RADIUS_ATTRIBUTE_LOGIN_IPv6_HOST = 98,
    RADIUS_ATTRIBUTE_FRAMED_IPv6_ROUTE = 99,
    RADIUS_ATTRIBUTE_FRAMED_IPv6_POOL = 100,
    IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IP_ADDRESS = 4096,
    IAS_ATTRIBUTE_SAVED_RADIUS_CALLBACK_NUMBER = 4097,
    IAS_ATTRIBUTE_NP_CALLING_STATION_ID = 4098,
    IAS_ATTRIBUTE_SAVED_NP_CALLING_STATION_ID = 4099,
    IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_ROUTE = 4100,
    IAS_ATTRIBUTE_IGNORE_USER_DIALIN_PROPERTIES = 4101,
    IAS_ATTRIBUTE_NP_TIME_OF_DAY = 4102,
    IAS_ATTRIBUTE_NP_CALLED_STATION_ID = 4103,
    IAS_ATTRIBUTE_NP_ALLOWED_PORT_TYPES = 4104,
    IAS_ATTRIBUTE_NP_AUTHENTICATION_TYPE = 4105,
    IAS_ATTRIBUTE_NP_ALLOWED_EAP_TYPE = 4106,
    IAS_ATTRIBUTE_SHARED_SECRET = 4107,
    IAS_ATTRIBUTE_CLIENT_IP_ADDRESS = 4108,
    IAS_ATTRIBUTE_CLIENT_PACKET_HEADER = 4109,
    IAS_ATTRIBUTE_TOKEN_GROUPS = 4110,
    IAS_ATTRIBUTE_ALLOW_DIALIN = 4111,
    IAS_ATTRIBUTE_REQUEST_ID = 4112,
    IAS_ATTRIBUTE_MANIPULATION_TARGET = 4113,
    IAS_ATTRIBUTE_MANIPULATION_RULE = 4114,
    IAS_ATTRIBUTE_ORIGINAL_USER_NAME = 4115,
    IAS_ATTRIBUTE_CLIENT_VENDOR_TYPE = 4116,
    IAS_ATTRIBUTE_CLIENT_UDP_PORT = 4117,
    MS_ATTRIBUTE_CHAP_CHALLENGE = 4118,
    MS_ATTRIBUTE_CHAP_RESPONSE = 4119,
    MS_ATTRIBUTE_CHAP_DOMAIN = 4120,
    MS_ATTRIBUTE_CHAP_ERROR = 4121,
    MS_ATTRIBUTE_CHAP_CPW1 = 4122,
    MS_ATTRIBUTE_CHAP_CPW2 = 4123,
    MS_ATTRIBUTE_CHAP_LM_ENC_PW = 4124,
    MS_ATTRIBUTE_CHAP_NT_ENC_PW = 4125,
    MS_ATTRIBUTE_CHAP_MPPE_KEYS = 4126,
    IAS_ATTRIBUTE_AUTHENTICATION_TYPE = 4127,
    IAS_ATTRIBUTE_CLIENT_NAME = 4128,
    IAS_ATTRIBUTE_NT4_ACCOUNT_NAME = 4129,
    IAS_ATTRIBUTE_FULLY_QUALIFIED_USER_NAME = 4130,
    IAS_ATTRIBUTE_NTGROUPS = 4131,
    IAS_ATTRIBUTE_EAP_FRIENDLY_NAME = 4132,
    IAS_ATTRIBUTE_AUTH_PROVIDER_TYPE = 4133,
    MS_ATTRIBUTE_ACCT_AUTH_TYPE = 4134,
    MS_ATTRIBUTE_ACCT_EAP_TYPE = 4135,
    IAS_ATTRIBUTE_PACKET_TYPE = 4136,
    IAS_ATTRIBUTE_AUTH_PROVIDER_NAME = 4137,
    IAS_ATTRIBUTE_ACCT_PROVIDER_TYPE = 4138,
    IAS_ATTRIBUTE_ACCT_PROVIDER_NAME = 4139,
    MS_ATTRIBUTE_MPPE_SEND_KEY = 4140,
    MS_ATTRIBUTE_MPPE_RECV_KEY = 4141,
    IAS_ATTRIBUTE_REASON_CODE = 4142,
    MS_ATTRIBUTE_FILTER = 4143,
    MS_ATTRIBUTE_CHAP2_RESPONSE = 4144,
    MS_ATTRIBUTE_CHAP2_SUCCESS = 4145,
    MS_ATTRIBUTE_CHAP2_CPW = 4146,
    MS_ATTRIBUTE_RAS_VENDOR = 4147,
    MS_ATTRIBUTE_RAS_VERSION = 4148,
    IAS_ATTRIBUTE_NP_NAME = 4149,
    MS_ATTRIBUTE_PRIMARY_DNS_SERVER = 4150,
    MS_ATTRIBUTE_SECONDARY_DNS_SERVER = 4151,
    MS_ATTRIBUTE_PRIMARY_NBNS_SERVER = 4152,
    MS_ATTRIBUTE_SECONDARY_NBNS_SERVER = 4153,
    IAS_ATTRIBUTE_PROXY_POLICY_NAME = 4154,
    IAS_ATTRIBUTE_PROVIDER_TYPE = 4155,
    IAS_ATTRIBUTE_PROVIDER_NAME = 4156,
    IAS_ATTRIBUTE_REMOTE_SERVER_ADDRESS = 4157,
    IAS_ATTRIBUTE_GENERATE_CLASS_ATTRIBUTE = 4158,
    MS_ATTRIBUTE_RAS_CLIENT_NAME = 4159,
    MS_ATTRIBUTE_RAS_CLIENT_VERSION = 4160,
    IAS_ATTRIBUTE_ALLOWED_CERTIFICATE_EKU = 4161,
    IAS_ATTRIBUTE_EXTENSION_STATE = 4162,
    IAS_ATTRIBUTE_GENERATE_SESSION_TIMEOUT = 4163,
    IAS_ATTRIBUTE_SESSION_TIMEOUT = 4164,
    MS_ATTRIBUTE_QUARANTINE_IPFILTER = 4165,
    MS_ATTRIBUTE_QUARANTINE_SESSION_TIMEOUT = 4166,
    MS_ATTRIBUTE_USER_SECURITY_IDENTITY = 4167,
    IAS_ATTRIBUTE_REMOTE_RADIUS_TO_WINDOWS_USER_MAPPING = 4168,
    IAS_ATTRIBUTE_PASSPORT_USER_MAPPING_UPN_SUFFIX = 4169,
    IAS_ATTRIBUTE_TUNNEL_TAG = 4170,
    IAS_ATTRIBUTE_NP_PEAPUPFRONT_ENABLED = 4171,
    IAS_ATTRIBUTE_CERTIFICATE_EKU = 8097,
    IAS_ATTRIBUTE_EAP_CONFIG = 8098,
    IAS_ATTRIBUTE_PEAP_EMBEDDED_EAP_TYPEID = 8099,
    IAS_ATTRIBUTE_PEAP_FAST_ROAMED_SESSION = 8100,
    IAS_ATTRIBUTE_EAP_TYPEID = 8101,
    MS_ATTRIBUTE_EAP_TLV = 8102,
    IAS_ATTRIBUTE_REJECT_REASON_CODE = 8103,
    IAS_ATTRIBUTE_PROXY_EAP_CONFIG = 8104,
    IAS_ATTRIBUTE_EAP_SESSION = 8105,
    IAS_ATTRIBUTE_IS_REPLAY = 8106,
    IAS_ATTRIBUTE_CLEAR_TEXT_PASSWORD = 8107,
    MS_ATTRIBUTE_IDENTITY_TYPE = 8108,
    MS_ATTRIBUTE_SERVICE_CLASS = 8109,
    MS_ATTRIBUTE_QUARANTINE_USER_CLASS = 8110,
    MS_ATTRIBUTE_QUARANTINE_STATE = 8111,
    IAS_ATTRIBUTE_OVERRIDE_RAP_AUTH = 8112,
    IAS_ATTRIBUTE_PEAP_CHANNEL_UP = 8113,
    IAS_ATTRIBUTE_NAME_MAPPED = 8114,
    IAS_ATTRIBUTE_POLICY_ENFORCED = 8115,
    IAS_ATTRIBUTE_MACHINE_NTGROUPS = 8116,
    IAS_ATTRIBUTE_USER_NTGROUPS = 8117,
    IAS_ATTRIBUTE_MACHINE_TOKEN_GROUPS = 8118,
    IAS_ATTRIBUTE_USER_TOKEN_GROUPS = 8119,
    MS_ATTRIBUTE_QUARANTINE_GRACE_TIME = 8120,
    IAS_ATTRIBUTE_QUARANTINE_URL = 8121,
    IAS_ATTRIBUTE_QUARANTINE_FIXUP_SERVERS = 8122,
    MS_ATTRIBUTE_NOT_QUARANTINE_CAPABLE = 8123,
    IAS_ATTRIBUTE_QUARANTINE_SYSTEM_HEALTH_RESULT = 8124,
    IAS_ATTRIBUTE_QUARANTINE_SYSTEM_HEALTH_VALIDATORS = 8125,
    IAS_ATTRIBUTE_MACHINE_NAME = 8126,
    IAS_ATTRIBUTE_NT4_MACHINE_NAME = 8127,
    IAS_ATTRIBUTE_QUARANTINE_SESSION_HANDLE = 8128,
    IAS_ATTRIBUTE_FULLY_QUALIFIED_MACHINE_NAME = 8129,
    IAS_ATTRIBUTE_QUARANTINE_FIXUP_SERVERS_CONFIGURATION = 8130,
    IAS_ATTRIBUTE_CLIENT_QUARANTINE_COMPATIBLE = 8131,
    MS_ATTRIBUTE_NETWORK_ACCESS_SERVER_TYPE = 8132,
    IAS_ATTRIBUTE_QUARANTINE_SESSION_ID = 8133,
    MS_ATTRIBUTE_AFW_QUARANTINE_ZONE = 8134,
    MS_ATTRIBUTE_AFW_PROTECTION_LEVEL = 8135,
    IAS_ATTRIBUTE_QUARANTINE_UPDATE_NON_COMPLIANT = 8136,
    IAS_ATTRIBUTE_REQUEST_START_TIME = 8137,
    MS_ATTRIBUTE_MACHINE_NAME = 8138,
    IAS_ATTRIBUTE_CLIENT_IPv6_ADDRESS = 8139,
    IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_INTERFACE_ID = 8140,
    IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IPv6_PREFIX = 8141,
    IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IPv6_ROUTE = 8142,
    MS_ATTRIBUTE_QUARANTINE_GRACE_TIME_CONFIGURATION = 8143,
    MS_ATTRIBUTE_IPv6_FILTER = 8144,
    MS_ATTRIBUTE_IPV4_REMEDIATION_SERVERS = 8145,
    MS_ATTRIBUTE_IPV6_REMEDIATION_SERVERS = 8146,
    IAS_ATTRIBUTE_PROXY_RETRY_COUNT = 8147,
    IAS_ATTRIBUTE_MACHINE_INVENTORY = 8148,
    IAS_ATTRIBUTE_ABSOLUTE_TIME = 8149,
    MS_ATTRIBUTE_QUARANTINE_SOH = 8150,
    IAS_ATTRIBUTE_EAP_TYPES_CONFIGURED_IN_PROXYPOLICY = 8151,
    MS_ATTRIBUTE_HCAP_LOCATION_GROUP_NAME = 8152,
    MS_ATTRIBUTE_EXTENDED_QUARANTINE_STATE = 8153,
    IAS_ATTRIBUTE_SOH_CARRIER_EAPTLV = 8154,
    MS_ATTRIBUTE_HCAP_USER_GROUPS = 8155,
    IAS_ATTRIBUTE_SAVED_MACHINE_HEALTHCHECK_ONLY = 8156,
    IAS_ATTRIBUTE_POLICY_EVALUATED_SHV = 8157,
    MS_ATTRIBUTE_RAS_CORRELATION_ID = 8158,
    MS_ATTRIBUTE_HCAP_USER_NAME = 8159,
    IAS_ATTRIBUTE_NT4_HCAP_ACCOUNT_NAME = 8160,
    IAS_ATTRIBUTE_USER_TOKEN_SID = 8161,
    IAS_ATTRIBUTE_MACHINE_TOKEN_SID = 8162,
    IAS_ATTRIBUTE_MACHINE_VALIDATED = 8163,
    MS_ATTRIBUTE_USER_IPv4_ADDRESS = 8164,
    MS_ATTRIBUTE_USER_IPv6_ADDRESS = 8165,
    MS_ATTRIBUTE_TSG_DEVICE_REDIRECTION = 8166,
    IAS_ATTRIBUTE_ACCEPT_REASON_CODE = 8167,
    IAS_ATTRIBUTE_LOGGING_RESULT = 8168,
    IAS_ATTRIBUTE_SERVER_IP_ADDRESS = 8169,
    IAS_ATTRIBUTE_SERVER_IPv6_ADDRESS = 8170,
    IAS_ATTRIBUTE_RADIUS_USERNAME_ENCODING_ASCII = 8171,
    MS_ATTRIBUTE_RAS_ROUTING_DOMAIN_ID = 8172,
    IAS_ATTRIBUTE_CERTIFICATE_THUMBPRINT = 8250,
    RAS_ATTRIBUTE_ENCRYPTION_TYPE = 4294967206,
    RAS_ATTRIBUTE_ENCRYPTION_POLICY = 4294967207,
    RAS_ATTRIBUTE_BAP_REQUIRED = 4294967208,
    RAS_ATTRIBUTE_BAP_LINE_DOWN_TIME = 4294967209,
    RAS_ATTRIBUTE_BAP_LINE_DOWN_LIMIT = 4294967210,
};
pub const ATTRIBUTE_UNDEFINED = ATTRIBUTEID.ATTRIBUTE_UNDEFINED;
pub const ATTRIBUTE_MIN_VALUE = ATTRIBUTEID.ATTRIBUTE_MIN_VALUE;
pub const RADIUS_ATTRIBUTE_USER_NAME = ATTRIBUTEID.RADIUS_ATTRIBUTE_USER_NAME;
pub const RADIUS_ATTRIBUTE_USER_PASSWORD = ATTRIBUTEID.RADIUS_ATTRIBUTE_USER_PASSWORD;
pub const RADIUS_ATTRIBUTE_CHAP_PASSWORD = ATTRIBUTEID.RADIUS_ATTRIBUTE_CHAP_PASSWORD;
pub const RADIUS_ATTRIBUTE_NAS_IP_ADDRESS = ATTRIBUTEID.RADIUS_ATTRIBUTE_NAS_IP_ADDRESS;
pub const RADIUS_ATTRIBUTE_NAS_PORT = ATTRIBUTEID.RADIUS_ATTRIBUTE_NAS_PORT;
pub const RADIUS_ATTRIBUTE_SERVICE_TYPE = ATTRIBUTEID.RADIUS_ATTRIBUTE_SERVICE_TYPE;
pub const RADIUS_ATTRIBUTE_FRAMED_PROTOCOL = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_PROTOCOL;
pub const RADIUS_ATTRIBUTE_FRAMED_IP_ADDRESS = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_IP_ADDRESS;
pub const RADIUS_ATTRIBUTE_FRAMED_IP_NETMASK = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_IP_NETMASK;
pub const RADIUS_ATTRIBUTE_FRAMED_ROUTING = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_ROUTING;
pub const RADIUS_ATTRIBUTE_FILTER_ID = ATTRIBUTEID.RADIUS_ATTRIBUTE_FILTER_ID;
pub const RADIUS_ATTRIBUTE_FRAMED_MTU = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_MTU;
pub const RADIUS_ATTRIBUTE_FRAMED_COMPRESSION = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_COMPRESSION;
pub const RADIUS_ATTRIBUTE_LOGIN_IP_HOST = ATTRIBUTEID.RADIUS_ATTRIBUTE_LOGIN_IP_HOST;
pub const RADIUS_ATTRIBUTE_LOGIN_SERVICE = ATTRIBUTEID.RADIUS_ATTRIBUTE_LOGIN_SERVICE;
pub const RADIUS_ATTRIBUTE_LOGIN_TCP_PORT = ATTRIBUTEID.RADIUS_ATTRIBUTE_LOGIN_TCP_PORT;
pub const RADIUS_ATTRIBUTE_UNASSIGNED1 = ATTRIBUTEID.RADIUS_ATTRIBUTE_UNASSIGNED1;
pub const RADIUS_ATTRIBUTE_REPLY_MESSAGE = ATTRIBUTEID.RADIUS_ATTRIBUTE_REPLY_MESSAGE;
pub const RADIUS_ATTRIBUTE_CALLBACK_NUMBER = ATTRIBUTEID.RADIUS_ATTRIBUTE_CALLBACK_NUMBER;
pub const RADIUS_ATTRIBUTE_CALLBACK_ID = ATTRIBUTEID.RADIUS_ATTRIBUTE_CALLBACK_ID;
pub const RADIUS_ATTRIBUTE_UNASSIGNED2 = ATTRIBUTEID.RADIUS_ATTRIBUTE_UNASSIGNED2;
pub const RADIUS_ATTRIBUTE_FRAMED_ROUTE = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_ROUTE;
pub const RADIUS_ATTRIBUTE_FRAMED_IPX_NETWORK = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_IPX_NETWORK;
pub const RADIUS_ATTRIBUTE_STATE = ATTRIBUTEID.RADIUS_ATTRIBUTE_STATE;
pub const RADIUS_ATTRIBUTE_CLASS = ATTRIBUTEID.RADIUS_ATTRIBUTE_CLASS;
pub const RADIUS_ATTRIBUTE_VENDOR_SPECIFIC = ATTRIBUTEID.RADIUS_ATTRIBUTE_VENDOR_SPECIFIC;
pub const RADIUS_ATTRIBUTE_SESSION_TIMEOUT = ATTRIBUTEID.RADIUS_ATTRIBUTE_SESSION_TIMEOUT;
pub const RADIUS_ATTRIBUTE_IDLE_TIMEOUT = ATTRIBUTEID.RADIUS_ATTRIBUTE_IDLE_TIMEOUT;
pub const RADIUS_ATTRIBUTE_TERMINATION_ACTION = ATTRIBUTEID.RADIUS_ATTRIBUTE_TERMINATION_ACTION;
pub const RADIUS_ATTRIBUTE_CALLED_STATION_ID = ATTRIBUTEID.RADIUS_ATTRIBUTE_CALLED_STATION_ID;
pub const RADIUS_ATTRIBUTE_CALLING_STATION_ID = ATTRIBUTEID.RADIUS_ATTRIBUTE_CALLING_STATION_ID;
pub const RADIUS_ATTRIBUTE_NAS_IDENTIFIER = ATTRIBUTEID.RADIUS_ATTRIBUTE_NAS_IDENTIFIER;
pub const RADIUS_ATTRIBUTE_PROXY_STATE = ATTRIBUTEID.RADIUS_ATTRIBUTE_PROXY_STATE;
pub const RADIUS_ATTRIBUTE_LOGIN_LAT_SERVICE = ATTRIBUTEID.RADIUS_ATTRIBUTE_LOGIN_LAT_SERVICE;
pub const RADIUS_ATTRIBUTE_LOGIN_LAT_NODE = ATTRIBUTEID.RADIUS_ATTRIBUTE_LOGIN_LAT_NODE;
pub const RADIUS_ATTRIBUTE_LOGIN_LAT_GROUP = ATTRIBUTEID.RADIUS_ATTRIBUTE_LOGIN_LAT_GROUP;
pub const RADIUS_ATTRIBUTE_FRAMED_APPLETALK_LINK = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_APPLETALK_LINK;
pub const RADIUS_ATTRIBUTE_FRAMED_APPLETALK_NET = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_APPLETALK_NET;
pub const RADIUS_ATTRIBUTE_FRAMED_APPLETALK_ZONE = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_APPLETALK_ZONE;
pub const RADIUS_ATTRIBUTE_ACCT_STATUS_TYPE = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_STATUS_TYPE;
pub const RADIUS_ATTRIBUTE_ACCT_DELAY_TIME = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_DELAY_TIME;
pub const RADIUS_ATTRIBUTE_ACCT_INPUT_OCTETS = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_INPUT_OCTETS;
pub const RADIUS_ATTRIBUTE_ACCT_OUTPUT_OCTETS = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_OUTPUT_OCTETS;
pub const RADIUS_ATTRIBUTE_ACCT_SESSION_ID = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_SESSION_ID;
pub const RADIUS_ATTRIBUTE_ACCT_AUTHENTIC = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_AUTHENTIC;
pub const RADIUS_ATTRIBUTE_ACCT_SESSION_TIME = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_SESSION_TIME;
pub const RADIUS_ATTRIBUTE_ACCT_INPUT_PACKETS = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_INPUT_PACKETS;
pub const RADIUS_ATTRIBUTE_ACCT_OUTPUT_PACKETS = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_OUTPUT_PACKETS;
pub const RADIUS_ATTRIBUTE_ACCT_TERMINATE_CAUSE = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_TERMINATE_CAUSE;
pub const RADIUS_ATTRIBUTE_ACCT_MULTI_SSN_ID = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_MULTI_SSN_ID;
pub const RADIUS_ATTRIBUTE_ACCT_LINK_COUNT = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_LINK_COUNT;
pub const RADIUS_ATTRIBUTE_CHAP_CHALLENGE = ATTRIBUTEID.RADIUS_ATTRIBUTE_CHAP_CHALLENGE;
pub const RADIUS_ATTRIBUTE_NAS_PORT_TYPE = ATTRIBUTEID.RADIUS_ATTRIBUTE_NAS_PORT_TYPE;
pub const RADIUS_ATTRIBUTE_PORT_LIMIT = ATTRIBUTEID.RADIUS_ATTRIBUTE_PORT_LIMIT;
pub const RADIUS_ATTRIBUTE_LOGIN_LAT_PORT = ATTRIBUTEID.RADIUS_ATTRIBUTE_LOGIN_LAT_PORT;
pub const RADIUS_ATTRIBUTE_TUNNEL_TYPE = ATTRIBUTEID.RADIUS_ATTRIBUTE_TUNNEL_TYPE;
pub const RADIUS_ATTRIBUTE_TUNNEL_MEDIUM_TYPE = ATTRIBUTEID.RADIUS_ATTRIBUTE_TUNNEL_MEDIUM_TYPE;
pub const RADIUS_ATTRIBUTE_TUNNEL_CLIENT_ENDPT = ATTRIBUTEID.RADIUS_ATTRIBUTE_TUNNEL_CLIENT_ENDPT;
pub const RADIUS_ATTRIBUTE_TUNNEL_SERVER_ENDPT = ATTRIBUTEID.RADIUS_ATTRIBUTE_TUNNEL_SERVER_ENDPT;
pub const RADIUS_ATTRIBUTE_ACCT_TUNNEL_CONN = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_TUNNEL_CONN;
pub const RADIUS_ATTRIBUTE_TUNNEL_PASSWORD = ATTRIBUTEID.RADIUS_ATTRIBUTE_TUNNEL_PASSWORD;
pub const RADIUS_ATTRIBUTE_ARAP_PASSWORD = ATTRIBUTEID.RADIUS_ATTRIBUTE_ARAP_PASSWORD;
pub const RADIUS_ATTRIBUTE_ARAP_FEATURES = ATTRIBUTEID.RADIUS_ATTRIBUTE_ARAP_FEATURES;
pub const RADIUS_ATTRIBUTE_ARAP_ZONE_ACCESS = ATTRIBUTEID.RADIUS_ATTRIBUTE_ARAP_ZONE_ACCESS;
pub const RADIUS_ATTRIBUTE_ARAP_SECURITY = ATTRIBUTEID.RADIUS_ATTRIBUTE_ARAP_SECURITY;
pub const RADIUS_ATTRIBUTE_ARAP_SECURITY_DATA = ATTRIBUTEID.RADIUS_ATTRIBUTE_ARAP_SECURITY_DATA;
pub const RADIUS_ATTRIBUTE_PASSWORD_RETRY = ATTRIBUTEID.RADIUS_ATTRIBUTE_PASSWORD_RETRY;
pub const RADIUS_ATTRIBUTE_PROMPT = ATTRIBUTEID.RADIUS_ATTRIBUTE_PROMPT;
pub const RADIUS_ATTRIBUTE_CONNECT_INFO = ATTRIBUTEID.RADIUS_ATTRIBUTE_CONNECT_INFO;
pub const RADIUS_ATTRIBUTE_CONFIGURATION_TOKEN = ATTRIBUTEID.RADIUS_ATTRIBUTE_CONFIGURATION_TOKEN;
pub const RADIUS_ATTRIBUTE_EAP_MESSAGE = ATTRIBUTEID.RADIUS_ATTRIBUTE_EAP_MESSAGE;
pub const RADIUS_ATTRIBUTE_SIGNATURE = ATTRIBUTEID.RADIUS_ATTRIBUTE_SIGNATURE;
pub const RADIUS_ATTRIBUTE_TUNNEL_PVT_GROUP_ID = ATTRIBUTEID.RADIUS_ATTRIBUTE_TUNNEL_PVT_GROUP_ID;
pub const RADIUS_ATTRIBUTE_TUNNEL_ASSIGNMENT_ID = ATTRIBUTEID.RADIUS_ATTRIBUTE_TUNNEL_ASSIGNMENT_ID;
pub const RADIUS_ATTRIBUTE_TUNNEL_PREFERENCE = ATTRIBUTEID.RADIUS_ATTRIBUTE_TUNNEL_PREFERENCE;
pub const RADIUS_ATTRIBUTE_ARAP_CHALLENGE_RESPONSE = ATTRIBUTEID.RADIUS_ATTRIBUTE_ARAP_CHALLENGE_RESPONSE;
pub const RADIUS_ATTRIBUTE_ACCT_INTERIM_INTERVAL = ATTRIBUTEID.RADIUS_ATTRIBUTE_ACCT_INTERIM_INTERVAL;
pub const RADIUS_ATTRIBUTE_NAS_IPv6_ADDRESS = ATTRIBUTEID.RADIUS_ATTRIBUTE_NAS_IPv6_ADDRESS;
pub const RADIUS_ATTRIBUTE_FRAMED_INTERFACE_ID = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_INTERFACE_ID;
pub const RADIUS_ATTRIBUTE_FRAMED_IPv6_PREFIX = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_IPv6_PREFIX;
pub const RADIUS_ATTRIBUTE_LOGIN_IPv6_HOST = ATTRIBUTEID.RADIUS_ATTRIBUTE_LOGIN_IPv6_HOST;
pub const RADIUS_ATTRIBUTE_FRAMED_IPv6_ROUTE = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_IPv6_ROUTE;
pub const RADIUS_ATTRIBUTE_FRAMED_IPv6_POOL = ATTRIBUTEID.RADIUS_ATTRIBUTE_FRAMED_IPv6_POOL;
pub const IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IP_ADDRESS = ATTRIBUTEID.IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IP_ADDRESS;
pub const IAS_ATTRIBUTE_SAVED_RADIUS_CALLBACK_NUMBER = ATTRIBUTEID.IAS_ATTRIBUTE_SAVED_RADIUS_CALLBACK_NUMBER;
pub const IAS_ATTRIBUTE_NP_CALLING_STATION_ID = ATTRIBUTEID.IAS_ATTRIBUTE_NP_CALLING_STATION_ID;
pub const IAS_ATTRIBUTE_SAVED_NP_CALLING_STATION_ID = ATTRIBUTEID.IAS_ATTRIBUTE_SAVED_NP_CALLING_STATION_ID;
pub const IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_ROUTE = ATTRIBUTEID.IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_ROUTE;
pub const IAS_ATTRIBUTE_IGNORE_USER_DIALIN_PROPERTIES = ATTRIBUTEID.IAS_ATTRIBUTE_IGNORE_USER_DIALIN_PROPERTIES;
pub const IAS_ATTRIBUTE_NP_TIME_OF_DAY = ATTRIBUTEID.IAS_ATTRIBUTE_NP_TIME_OF_DAY;
pub const IAS_ATTRIBUTE_NP_CALLED_STATION_ID = ATTRIBUTEID.IAS_ATTRIBUTE_NP_CALLED_STATION_ID;
pub const IAS_ATTRIBUTE_NP_ALLOWED_PORT_TYPES = ATTRIBUTEID.IAS_ATTRIBUTE_NP_ALLOWED_PORT_TYPES;
pub const IAS_ATTRIBUTE_NP_AUTHENTICATION_TYPE = ATTRIBUTEID.IAS_ATTRIBUTE_NP_AUTHENTICATION_TYPE;
pub const IAS_ATTRIBUTE_NP_ALLOWED_EAP_TYPE = ATTRIBUTEID.IAS_ATTRIBUTE_NP_ALLOWED_EAP_TYPE;
pub const IAS_ATTRIBUTE_SHARED_SECRET = ATTRIBUTEID.IAS_ATTRIBUTE_SHARED_SECRET;
pub const IAS_ATTRIBUTE_CLIENT_IP_ADDRESS = ATTRIBUTEID.IAS_ATTRIBUTE_CLIENT_IP_ADDRESS;
pub const IAS_ATTRIBUTE_CLIENT_PACKET_HEADER = ATTRIBUTEID.IAS_ATTRIBUTE_CLIENT_PACKET_HEADER;
pub const IAS_ATTRIBUTE_TOKEN_GROUPS = ATTRIBUTEID.IAS_ATTRIBUTE_TOKEN_GROUPS;
pub const IAS_ATTRIBUTE_ALLOW_DIALIN = ATTRIBUTEID.IAS_ATTRIBUTE_ALLOW_DIALIN;
pub const IAS_ATTRIBUTE_REQUEST_ID = ATTRIBUTEID.IAS_ATTRIBUTE_REQUEST_ID;
pub const IAS_ATTRIBUTE_MANIPULATION_TARGET = ATTRIBUTEID.IAS_ATTRIBUTE_MANIPULATION_TARGET;
pub const IAS_ATTRIBUTE_MANIPULATION_RULE = ATTRIBUTEID.IAS_ATTRIBUTE_MANIPULATION_RULE;
pub const IAS_ATTRIBUTE_ORIGINAL_USER_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_ORIGINAL_USER_NAME;
pub const IAS_ATTRIBUTE_CLIENT_VENDOR_TYPE = ATTRIBUTEID.IAS_ATTRIBUTE_CLIENT_VENDOR_TYPE;
pub const IAS_ATTRIBUTE_CLIENT_UDP_PORT = ATTRIBUTEID.IAS_ATTRIBUTE_CLIENT_UDP_PORT;
pub const MS_ATTRIBUTE_CHAP_CHALLENGE = ATTRIBUTEID.MS_ATTRIBUTE_CHAP_CHALLENGE;
pub const MS_ATTRIBUTE_CHAP_RESPONSE = ATTRIBUTEID.MS_ATTRIBUTE_CHAP_RESPONSE;
pub const MS_ATTRIBUTE_CHAP_DOMAIN = ATTRIBUTEID.MS_ATTRIBUTE_CHAP_DOMAIN;
pub const MS_ATTRIBUTE_CHAP_ERROR = ATTRIBUTEID.MS_ATTRIBUTE_CHAP_ERROR;
pub const MS_ATTRIBUTE_CHAP_CPW1 = ATTRIBUTEID.MS_ATTRIBUTE_CHAP_CPW1;
pub const MS_ATTRIBUTE_CHAP_CPW2 = ATTRIBUTEID.MS_ATTRIBUTE_CHAP_CPW2;
pub const MS_ATTRIBUTE_CHAP_LM_ENC_PW = ATTRIBUTEID.MS_ATTRIBUTE_CHAP_LM_ENC_PW;
pub const MS_ATTRIBUTE_CHAP_NT_ENC_PW = ATTRIBUTEID.MS_ATTRIBUTE_CHAP_NT_ENC_PW;
pub const MS_ATTRIBUTE_CHAP_MPPE_KEYS = ATTRIBUTEID.MS_ATTRIBUTE_CHAP_MPPE_KEYS;
pub const IAS_ATTRIBUTE_AUTHENTICATION_TYPE = ATTRIBUTEID.IAS_ATTRIBUTE_AUTHENTICATION_TYPE;
pub const IAS_ATTRIBUTE_CLIENT_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_CLIENT_NAME;
pub const IAS_ATTRIBUTE_NT4_ACCOUNT_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_NT4_ACCOUNT_NAME;
pub const IAS_ATTRIBUTE_FULLY_QUALIFIED_USER_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_FULLY_QUALIFIED_USER_NAME;
pub const IAS_ATTRIBUTE_NTGROUPS = ATTRIBUTEID.IAS_ATTRIBUTE_NTGROUPS;
pub const IAS_ATTRIBUTE_EAP_FRIENDLY_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_EAP_FRIENDLY_NAME;
pub const IAS_ATTRIBUTE_AUTH_PROVIDER_TYPE = ATTRIBUTEID.IAS_ATTRIBUTE_AUTH_PROVIDER_TYPE;
pub const MS_ATTRIBUTE_ACCT_AUTH_TYPE = ATTRIBUTEID.MS_ATTRIBUTE_ACCT_AUTH_TYPE;
pub const MS_ATTRIBUTE_ACCT_EAP_TYPE = ATTRIBUTEID.MS_ATTRIBUTE_ACCT_EAP_TYPE;
pub const IAS_ATTRIBUTE_PACKET_TYPE = ATTRIBUTEID.IAS_ATTRIBUTE_PACKET_TYPE;
pub const IAS_ATTRIBUTE_AUTH_PROVIDER_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_AUTH_PROVIDER_NAME;
pub const IAS_ATTRIBUTE_ACCT_PROVIDER_TYPE = ATTRIBUTEID.IAS_ATTRIBUTE_ACCT_PROVIDER_TYPE;
pub const IAS_ATTRIBUTE_ACCT_PROVIDER_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_ACCT_PROVIDER_NAME;
pub const MS_ATTRIBUTE_MPPE_SEND_KEY = ATTRIBUTEID.MS_ATTRIBUTE_MPPE_SEND_KEY;
pub const MS_ATTRIBUTE_MPPE_RECV_KEY = ATTRIBUTEID.MS_ATTRIBUTE_MPPE_RECV_KEY;
pub const IAS_ATTRIBUTE_REASON_CODE = ATTRIBUTEID.IAS_ATTRIBUTE_REASON_CODE;
pub const MS_ATTRIBUTE_FILTER = ATTRIBUTEID.MS_ATTRIBUTE_FILTER;
pub const MS_ATTRIBUTE_CHAP2_RESPONSE = ATTRIBUTEID.MS_ATTRIBUTE_CHAP2_RESPONSE;
pub const MS_ATTRIBUTE_CHAP2_SUCCESS = ATTRIBUTEID.MS_ATTRIBUTE_CHAP2_SUCCESS;
pub const MS_ATTRIBUTE_CHAP2_CPW = ATTRIBUTEID.MS_ATTRIBUTE_CHAP2_CPW;
pub const MS_ATTRIBUTE_RAS_VENDOR = ATTRIBUTEID.MS_ATTRIBUTE_RAS_VENDOR;
pub const MS_ATTRIBUTE_RAS_VERSION = ATTRIBUTEID.MS_ATTRIBUTE_RAS_VERSION;
pub const IAS_ATTRIBUTE_NP_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_NP_NAME;
pub const MS_ATTRIBUTE_PRIMARY_DNS_SERVER = ATTRIBUTEID.MS_ATTRIBUTE_PRIMARY_DNS_SERVER;
pub const MS_ATTRIBUTE_SECONDARY_DNS_SERVER = ATTRIBUTEID.MS_ATTRIBUTE_SECONDARY_DNS_SERVER;
pub const MS_ATTRIBUTE_PRIMARY_NBNS_SERVER = ATTRIBUTEID.MS_ATTRIBUTE_PRIMARY_NBNS_SERVER;
pub const MS_ATTRIBUTE_SECONDARY_NBNS_SERVER = ATTRIBUTEID.MS_ATTRIBUTE_SECONDARY_NBNS_SERVER;
pub const IAS_ATTRIBUTE_PROXY_POLICY_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_PROXY_POLICY_NAME;
pub const IAS_ATTRIBUTE_PROVIDER_TYPE = ATTRIBUTEID.IAS_ATTRIBUTE_PROVIDER_TYPE;
pub const IAS_ATTRIBUTE_PROVIDER_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_PROVIDER_NAME;
pub const IAS_ATTRIBUTE_REMOTE_SERVER_ADDRESS = ATTRIBUTEID.IAS_ATTRIBUTE_REMOTE_SERVER_ADDRESS;
pub const IAS_ATTRIBUTE_GENERATE_CLASS_ATTRIBUTE = ATTRIBUTEID.IAS_ATTRIBUTE_GENERATE_CLASS_ATTRIBUTE;
pub const MS_ATTRIBUTE_RAS_CLIENT_NAME = ATTRIBUTEID.MS_ATTRIBUTE_RAS_CLIENT_NAME;
pub const MS_ATTRIBUTE_RAS_CLIENT_VERSION = ATTRIBUTEID.MS_ATTRIBUTE_RAS_CLIENT_VERSION;
pub const IAS_ATTRIBUTE_ALLOWED_CERTIFICATE_EKU = ATTRIBUTEID.IAS_ATTRIBUTE_ALLOWED_CERTIFICATE_EKU;
pub const IAS_ATTRIBUTE_EXTENSION_STATE = ATTRIBUTEID.IAS_ATTRIBUTE_EXTENSION_STATE;
pub const IAS_ATTRIBUTE_GENERATE_SESSION_TIMEOUT = ATTRIBUTEID.IAS_ATTRIBUTE_GENERATE_SESSION_TIMEOUT;
pub const IAS_ATTRIBUTE_SESSION_TIMEOUT = ATTRIBUTEID.IAS_ATTRIBUTE_SESSION_TIMEOUT;
pub const MS_ATTRIBUTE_QUARANTINE_IPFILTER = ATTRIBUTEID.MS_ATTRIBUTE_QUARANTINE_IPFILTER;
pub const MS_ATTRIBUTE_QUARANTINE_SESSION_TIMEOUT = ATTRIBUTEID.MS_ATTRIBUTE_QUARANTINE_SESSION_TIMEOUT;
pub const MS_ATTRIBUTE_USER_SECURITY_IDENTITY = ATTRIBUTEID.MS_ATTRIBUTE_USER_SECURITY_IDENTITY;
pub const IAS_ATTRIBUTE_REMOTE_RADIUS_TO_WINDOWS_USER_MAPPING = ATTRIBUTEID.IAS_ATTRIBUTE_REMOTE_RADIUS_TO_WINDOWS_USER_MAPPING;
pub const IAS_ATTRIBUTE_PASSPORT_USER_MAPPING_UPN_SUFFIX = ATTRIBUTEID.IAS_ATTRIBUTE_PASSPORT_USER_MAPPING_UPN_SUFFIX;
pub const IAS_ATTRIBUTE_TUNNEL_TAG = ATTRIBUTEID.IAS_ATTRIBUTE_TUNNEL_TAG;
pub const IAS_ATTRIBUTE_NP_PEAPUPFRONT_ENABLED = ATTRIBUTEID.IAS_ATTRIBUTE_NP_PEAPUPFRONT_ENABLED;
pub const IAS_ATTRIBUTE_CERTIFICATE_EKU = ATTRIBUTEID.IAS_ATTRIBUTE_CERTIFICATE_EKU;
pub const IAS_ATTRIBUTE_EAP_CONFIG = ATTRIBUTEID.IAS_ATTRIBUTE_EAP_CONFIG;
pub const IAS_ATTRIBUTE_PEAP_EMBEDDED_EAP_TYPEID = ATTRIBUTEID.IAS_ATTRIBUTE_PEAP_EMBEDDED_EAP_TYPEID;
pub const IAS_ATTRIBUTE_PEAP_FAST_ROAMED_SESSION = ATTRIBUTEID.IAS_ATTRIBUTE_PEAP_FAST_ROAMED_SESSION;
pub const IAS_ATTRIBUTE_EAP_TYPEID = ATTRIBUTEID.IAS_ATTRIBUTE_EAP_TYPEID;
pub const MS_ATTRIBUTE_EAP_TLV = ATTRIBUTEID.MS_ATTRIBUTE_EAP_TLV;
pub const IAS_ATTRIBUTE_REJECT_REASON_CODE = ATTRIBUTEID.IAS_ATTRIBUTE_REJECT_REASON_CODE;
pub const IAS_ATTRIBUTE_PROXY_EAP_CONFIG = ATTRIBUTEID.IAS_ATTRIBUTE_PROXY_EAP_CONFIG;
pub const IAS_ATTRIBUTE_EAP_SESSION = ATTRIBUTEID.IAS_ATTRIBUTE_EAP_SESSION;
pub const IAS_ATTRIBUTE_IS_REPLAY = ATTRIBUTEID.IAS_ATTRIBUTE_IS_REPLAY;
pub const IAS_ATTRIBUTE_CLEAR_TEXT_PASSWORD = ATTRIBUTEID.IAS_ATTRIBUTE_CLEAR_TEXT_PASSWORD;
pub const MS_ATTRIBUTE_IDENTITY_TYPE = ATTRIBUTEID.MS_ATTRIBUTE_IDENTITY_TYPE;
pub const MS_ATTRIBUTE_SERVICE_CLASS = ATTRIBUTEID.MS_ATTRIBUTE_SERVICE_CLASS;
pub const MS_ATTRIBUTE_QUARANTINE_USER_CLASS = ATTRIBUTEID.MS_ATTRIBUTE_QUARANTINE_USER_CLASS;
pub const MS_ATTRIBUTE_QUARANTINE_STATE = ATTRIBUTEID.MS_ATTRIBUTE_QUARANTINE_STATE;
pub const IAS_ATTRIBUTE_OVERRIDE_RAP_AUTH = ATTRIBUTEID.IAS_ATTRIBUTE_OVERRIDE_RAP_AUTH;
pub const IAS_ATTRIBUTE_PEAP_CHANNEL_UP = ATTRIBUTEID.IAS_ATTRIBUTE_PEAP_CHANNEL_UP;
pub const IAS_ATTRIBUTE_NAME_MAPPED = ATTRIBUTEID.IAS_ATTRIBUTE_NAME_MAPPED;
pub const IAS_ATTRIBUTE_POLICY_ENFORCED = ATTRIBUTEID.IAS_ATTRIBUTE_POLICY_ENFORCED;
pub const IAS_ATTRIBUTE_MACHINE_NTGROUPS = ATTRIBUTEID.IAS_ATTRIBUTE_MACHINE_NTGROUPS;
pub const IAS_ATTRIBUTE_USER_NTGROUPS = ATTRIBUTEID.IAS_ATTRIBUTE_USER_NTGROUPS;
pub const IAS_ATTRIBUTE_MACHINE_TOKEN_GROUPS = ATTRIBUTEID.IAS_ATTRIBUTE_MACHINE_TOKEN_GROUPS;
pub const IAS_ATTRIBUTE_USER_TOKEN_GROUPS = ATTRIBUTEID.IAS_ATTRIBUTE_USER_TOKEN_GROUPS;
pub const MS_ATTRIBUTE_QUARANTINE_GRACE_TIME = ATTRIBUTEID.MS_ATTRIBUTE_QUARANTINE_GRACE_TIME;
pub const IAS_ATTRIBUTE_QUARANTINE_URL = ATTRIBUTEID.IAS_ATTRIBUTE_QUARANTINE_URL;
pub const IAS_ATTRIBUTE_QUARANTINE_FIXUP_SERVERS = ATTRIBUTEID.IAS_ATTRIBUTE_QUARANTINE_FIXUP_SERVERS;
pub const MS_ATTRIBUTE_NOT_QUARANTINE_CAPABLE = ATTRIBUTEID.MS_ATTRIBUTE_NOT_QUARANTINE_CAPABLE;
pub const IAS_ATTRIBUTE_QUARANTINE_SYSTEM_HEALTH_RESULT = ATTRIBUTEID.IAS_ATTRIBUTE_QUARANTINE_SYSTEM_HEALTH_RESULT;
pub const IAS_ATTRIBUTE_QUARANTINE_SYSTEM_HEALTH_VALIDATORS = ATTRIBUTEID.IAS_ATTRIBUTE_QUARANTINE_SYSTEM_HEALTH_VALIDATORS;
pub const IAS_ATTRIBUTE_MACHINE_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_MACHINE_NAME;
pub const IAS_ATTRIBUTE_NT4_MACHINE_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_NT4_MACHINE_NAME;
pub const IAS_ATTRIBUTE_QUARANTINE_SESSION_HANDLE = ATTRIBUTEID.IAS_ATTRIBUTE_QUARANTINE_SESSION_HANDLE;
pub const IAS_ATTRIBUTE_FULLY_QUALIFIED_MACHINE_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_FULLY_QUALIFIED_MACHINE_NAME;
pub const IAS_ATTRIBUTE_QUARANTINE_FIXUP_SERVERS_CONFIGURATION = ATTRIBUTEID.IAS_ATTRIBUTE_QUARANTINE_FIXUP_SERVERS_CONFIGURATION;
pub const IAS_ATTRIBUTE_CLIENT_QUARANTINE_COMPATIBLE = ATTRIBUTEID.IAS_ATTRIBUTE_CLIENT_QUARANTINE_COMPATIBLE;
pub const MS_ATTRIBUTE_NETWORK_ACCESS_SERVER_TYPE = ATTRIBUTEID.MS_ATTRIBUTE_NETWORK_ACCESS_SERVER_TYPE;
pub const IAS_ATTRIBUTE_QUARANTINE_SESSION_ID = ATTRIBUTEID.IAS_ATTRIBUTE_QUARANTINE_SESSION_ID;
pub const MS_ATTRIBUTE_AFW_QUARANTINE_ZONE = ATTRIBUTEID.MS_ATTRIBUTE_AFW_QUARANTINE_ZONE;
pub const MS_ATTRIBUTE_AFW_PROTECTION_LEVEL = ATTRIBUTEID.MS_ATTRIBUTE_AFW_PROTECTION_LEVEL;
pub const IAS_ATTRIBUTE_QUARANTINE_UPDATE_NON_COMPLIANT = ATTRIBUTEID.IAS_ATTRIBUTE_QUARANTINE_UPDATE_NON_COMPLIANT;
pub const IAS_ATTRIBUTE_REQUEST_START_TIME = ATTRIBUTEID.IAS_ATTRIBUTE_REQUEST_START_TIME;
pub const MS_ATTRIBUTE_MACHINE_NAME = ATTRIBUTEID.MS_ATTRIBUTE_MACHINE_NAME;
pub const IAS_ATTRIBUTE_CLIENT_IPv6_ADDRESS = ATTRIBUTEID.IAS_ATTRIBUTE_CLIENT_IPv6_ADDRESS;
pub const IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_INTERFACE_ID = ATTRIBUTEID.IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_INTERFACE_ID;
pub const IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IPv6_PREFIX = ATTRIBUTEID.IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IPv6_PREFIX;
pub const IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IPv6_ROUTE = ATTRIBUTEID.IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IPv6_ROUTE;
pub const MS_ATTRIBUTE_QUARANTINE_GRACE_TIME_CONFIGURATION = ATTRIBUTEID.MS_ATTRIBUTE_QUARANTINE_GRACE_TIME_CONFIGURATION;
pub const MS_ATTRIBUTE_IPv6_FILTER = ATTRIBUTEID.MS_ATTRIBUTE_IPv6_FILTER;
pub const MS_ATTRIBUTE_IPV4_REMEDIATION_SERVERS = ATTRIBUTEID.MS_ATTRIBUTE_IPV4_REMEDIATION_SERVERS;
pub const MS_ATTRIBUTE_IPV6_REMEDIATION_SERVERS = ATTRIBUTEID.MS_ATTRIBUTE_IPV6_REMEDIATION_SERVERS;
pub const IAS_ATTRIBUTE_PROXY_RETRY_COUNT = ATTRIBUTEID.IAS_ATTRIBUTE_PROXY_RETRY_COUNT;
pub const IAS_ATTRIBUTE_MACHINE_INVENTORY = ATTRIBUTEID.IAS_ATTRIBUTE_MACHINE_INVENTORY;
pub const IAS_ATTRIBUTE_ABSOLUTE_TIME = ATTRIBUTEID.IAS_ATTRIBUTE_ABSOLUTE_TIME;
pub const MS_ATTRIBUTE_QUARANTINE_SOH = ATTRIBUTEID.MS_ATTRIBUTE_QUARANTINE_SOH;
pub const IAS_ATTRIBUTE_EAP_TYPES_CONFIGURED_IN_PROXYPOLICY = ATTRIBUTEID.IAS_ATTRIBUTE_EAP_TYPES_CONFIGURED_IN_PROXYPOLICY;
pub const MS_ATTRIBUTE_HCAP_LOCATION_GROUP_NAME = ATTRIBUTEID.MS_ATTRIBUTE_HCAP_LOCATION_GROUP_NAME;
pub const MS_ATTRIBUTE_EXTENDED_QUARANTINE_STATE = ATTRIBUTEID.MS_ATTRIBUTE_EXTENDED_QUARANTINE_STATE;
pub const IAS_ATTRIBUTE_SOH_CARRIER_EAPTLV = ATTRIBUTEID.IAS_ATTRIBUTE_SOH_CARRIER_EAPTLV;
pub const MS_ATTRIBUTE_HCAP_USER_GROUPS = ATTRIBUTEID.MS_ATTRIBUTE_HCAP_USER_GROUPS;
pub const IAS_ATTRIBUTE_SAVED_MACHINE_HEALTHCHECK_ONLY = ATTRIBUTEID.IAS_ATTRIBUTE_SAVED_MACHINE_HEALTHCHECK_ONLY;
pub const IAS_ATTRIBUTE_POLICY_EVALUATED_SHV = ATTRIBUTEID.IAS_ATTRIBUTE_POLICY_EVALUATED_SHV;
pub const MS_ATTRIBUTE_RAS_CORRELATION_ID = ATTRIBUTEID.MS_ATTRIBUTE_RAS_CORRELATION_ID;
pub const MS_ATTRIBUTE_HCAP_USER_NAME = ATTRIBUTEID.MS_ATTRIBUTE_HCAP_USER_NAME;
pub const IAS_ATTRIBUTE_NT4_HCAP_ACCOUNT_NAME = ATTRIBUTEID.IAS_ATTRIBUTE_NT4_HCAP_ACCOUNT_NAME;
pub const IAS_ATTRIBUTE_USER_TOKEN_SID = ATTRIBUTEID.IAS_ATTRIBUTE_USER_TOKEN_SID;
pub const IAS_ATTRIBUTE_MACHINE_TOKEN_SID = ATTRIBUTEID.IAS_ATTRIBUTE_MACHINE_TOKEN_SID;
pub const IAS_ATTRIBUTE_MACHINE_VALIDATED = ATTRIBUTEID.IAS_ATTRIBUTE_MACHINE_VALIDATED;
pub const MS_ATTRIBUTE_USER_IPv4_ADDRESS = ATTRIBUTEID.MS_ATTRIBUTE_USER_IPv4_ADDRESS;
pub const MS_ATTRIBUTE_USER_IPv6_ADDRESS = ATTRIBUTEID.MS_ATTRIBUTE_USER_IPv6_ADDRESS;
pub const MS_ATTRIBUTE_TSG_DEVICE_REDIRECTION = ATTRIBUTEID.MS_ATTRIBUTE_TSG_DEVICE_REDIRECTION;
pub const IAS_ATTRIBUTE_ACCEPT_REASON_CODE = ATTRIBUTEID.IAS_ATTRIBUTE_ACCEPT_REASON_CODE;
pub const IAS_ATTRIBUTE_LOGGING_RESULT = ATTRIBUTEID.IAS_ATTRIBUTE_LOGGING_RESULT;
pub const IAS_ATTRIBUTE_SERVER_IP_ADDRESS = ATTRIBUTEID.IAS_ATTRIBUTE_SERVER_IP_ADDRESS;
pub const IAS_ATTRIBUTE_SERVER_IPv6_ADDRESS = ATTRIBUTEID.IAS_ATTRIBUTE_SERVER_IPv6_ADDRESS;
pub const IAS_ATTRIBUTE_RADIUS_USERNAME_ENCODING_ASCII = ATTRIBUTEID.IAS_ATTRIBUTE_RADIUS_USERNAME_ENCODING_ASCII;
pub const MS_ATTRIBUTE_RAS_ROUTING_DOMAIN_ID = ATTRIBUTEID.MS_ATTRIBUTE_RAS_ROUTING_DOMAIN_ID;
pub const IAS_ATTRIBUTE_CERTIFICATE_THUMBPRINT = ATTRIBUTEID.IAS_ATTRIBUTE_CERTIFICATE_THUMBPRINT;
pub const RAS_ATTRIBUTE_ENCRYPTION_TYPE = ATTRIBUTEID.RAS_ATTRIBUTE_ENCRYPTION_TYPE;
pub const RAS_ATTRIBUTE_ENCRYPTION_POLICY = ATTRIBUTEID.RAS_ATTRIBUTE_ENCRYPTION_POLICY;
pub const RAS_ATTRIBUTE_BAP_REQUIRED = ATTRIBUTEID.RAS_ATTRIBUTE_BAP_REQUIRED;
pub const RAS_ATTRIBUTE_BAP_LINE_DOWN_TIME = ATTRIBUTEID.RAS_ATTRIBUTE_BAP_LINE_DOWN_TIME;
pub const RAS_ATTRIBUTE_BAP_LINE_DOWN_LIMIT = ATTRIBUTEID.RAS_ATTRIBUTE_BAP_LINE_DOWN_LIMIT;

pub const NEW_LOG_FILE_FREQUENCY = extern enum(i32) {
    IAS_LOGGING_UNLIMITED_SIZE = 0,
    IAS_LOGGING_DAILY = 1,
    IAS_LOGGING_WEEKLY = 2,
    IAS_LOGGING_MONTHLY = 3,
    IAS_LOGGING_WHEN_FILE_SIZE_REACHES = 4,
};
pub const IAS_LOGGING_UNLIMITED_SIZE = NEW_LOG_FILE_FREQUENCY.IAS_LOGGING_UNLIMITED_SIZE;
pub const IAS_LOGGING_DAILY = NEW_LOG_FILE_FREQUENCY.IAS_LOGGING_DAILY;
pub const IAS_LOGGING_WEEKLY = NEW_LOG_FILE_FREQUENCY.IAS_LOGGING_WEEKLY;
pub const IAS_LOGGING_MONTHLY = NEW_LOG_FILE_FREQUENCY.IAS_LOGGING_MONTHLY;
pub const IAS_LOGGING_WHEN_FILE_SIZE_REACHES = NEW_LOG_FILE_FREQUENCY.IAS_LOGGING_WHEN_FILE_SIZE_REACHES;

pub const AUTHENTICATION_TYPE = extern enum(i32) {
    IAS_AUTH_INVALID = 0,
    IAS_AUTH_PAP = 1,
    IAS_AUTH_MD5CHAP = 2,
    IAS_AUTH_MSCHAP = 3,
    IAS_AUTH_MSCHAP2 = 4,
    IAS_AUTH_EAP = 5,
    IAS_AUTH_ARAP = 6,
    IAS_AUTH_NONE = 7,
    IAS_AUTH_CUSTOM = 8,
    IAS_AUTH_MSCHAP_CPW = 9,
    IAS_AUTH_MSCHAP2_CPW = 10,
    IAS_AUTH_PEAP = 11,
};
pub const IAS_AUTH_INVALID = AUTHENTICATION_TYPE.IAS_AUTH_INVALID;
pub const IAS_AUTH_PAP = AUTHENTICATION_TYPE.IAS_AUTH_PAP;
pub const IAS_AUTH_MD5CHAP = AUTHENTICATION_TYPE.IAS_AUTH_MD5CHAP;
pub const IAS_AUTH_MSCHAP = AUTHENTICATION_TYPE.IAS_AUTH_MSCHAP;
pub const IAS_AUTH_MSCHAP2 = AUTHENTICATION_TYPE.IAS_AUTH_MSCHAP2;
pub const IAS_AUTH_EAP = AUTHENTICATION_TYPE.IAS_AUTH_EAP;
pub const IAS_AUTH_ARAP = AUTHENTICATION_TYPE.IAS_AUTH_ARAP;
pub const IAS_AUTH_NONE = AUTHENTICATION_TYPE.IAS_AUTH_NONE;
pub const IAS_AUTH_CUSTOM = AUTHENTICATION_TYPE.IAS_AUTH_CUSTOM;
pub const IAS_AUTH_MSCHAP_CPW = AUTHENTICATION_TYPE.IAS_AUTH_MSCHAP_CPW;
pub const IAS_AUTH_MSCHAP2_CPW = AUTHENTICATION_TYPE.IAS_AUTH_MSCHAP2_CPW;
pub const IAS_AUTH_PEAP = AUTHENTICATION_TYPE.IAS_AUTH_PEAP;

pub const IDENTITY_TYPE = extern enum(i32) {
    IAS_IDENTITY_NO_DEFAULT = 1,
};
pub const IAS_IDENTITY_NO_DEFAULT = IDENTITY_TYPE.IAS_IDENTITY_NO_DEFAULT;

pub const ATTRIBUTESYNTAX = extern enum(i32) {
    IAS_SYNTAX_BOOLEAN = 1,
    IAS_SYNTAX_INTEGER = 2,
    IAS_SYNTAX_ENUMERATOR = 3,
    IAS_SYNTAX_INETADDR = 4,
    IAS_SYNTAX_STRING = 5,
    IAS_SYNTAX_OCTETSTRING = 6,
    IAS_SYNTAX_UTCTIME = 7,
    IAS_SYNTAX_PROVIDERSPECIFIC = 8,
    IAS_SYNTAX_UNSIGNEDINTEGER = 9,
    IAS_SYNTAX_INETADDR6 = 10,
};
pub const IAS_SYNTAX_BOOLEAN = ATTRIBUTESYNTAX.IAS_SYNTAX_BOOLEAN;
pub const IAS_SYNTAX_INTEGER = ATTRIBUTESYNTAX.IAS_SYNTAX_INTEGER;
pub const IAS_SYNTAX_ENUMERATOR = ATTRIBUTESYNTAX.IAS_SYNTAX_ENUMERATOR;
pub const IAS_SYNTAX_INETADDR = ATTRIBUTESYNTAX.IAS_SYNTAX_INETADDR;
pub const IAS_SYNTAX_STRING = ATTRIBUTESYNTAX.IAS_SYNTAX_STRING;
pub const IAS_SYNTAX_OCTETSTRING = ATTRIBUTESYNTAX.IAS_SYNTAX_OCTETSTRING;
pub const IAS_SYNTAX_UTCTIME = ATTRIBUTESYNTAX.IAS_SYNTAX_UTCTIME;
pub const IAS_SYNTAX_PROVIDERSPECIFIC = ATTRIBUTESYNTAX.IAS_SYNTAX_PROVIDERSPECIFIC;
pub const IAS_SYNTAX_UNSIGNEDINTEGER = ATTRIBUTESYNTAX.IAS_SYNTAX_UNSIGNEDINTEGER;
pub const IAS_SYNTAX_INETADDR6 = ATTRIBUTESYNTAX.IAS_SYNTAX_INETADDR6;

pub const ATTRIBUTERESTRICTIONS = extern enum(i32) {
    MULTIVALUED = 1,
    ALLOWEDINPROFILE = 2,
    ALLOWEDINCONDITION = 4,
    ALLOWEDINPROXYPROFILE = 8,
    ALLOWEDINPROXYCONDITION = 16,
    ALLOWEDINVPNDIALUP = 32,
    ALLOWEDIN8021X = 64,
};
pub const MULTIVALUED = ATTRIBUTERESTRICTIONS.MULTIVALUED;
pub const ALLOWEDINPROFILE = ATTRIBUTERESTRICTIONS.ALLOWEDINPROFILE;
pub const ALLOWEDINCONDITION = ATTRIBUTERESTRICTIONS.ALLOWEDINCONDITION;
pub const ALLOWEDINPROXYPROFILE = ATTRIBUTERESTRICTIONS.ALLOWEDINPROXYPROFILE;
pub const ALLOWEDINPROXYCONDITION = ATTRIBUTERESTRICTIONS.ALLOWEDINPROXYCONDITION;
pub const ALLOWEDINVPNDIALUP = ATTRIBUTERESTRICTIONS.ALLOWEDINVPNDIALUP;
pub const ALLOWEDIN8021X = ATTRIBUTERESTRICTIONS.ALLOWEDIN8021X;

pub const ATTRIBUTEFILTER = extern enum(i32) {
    ATTRIBUTE_FILTER_NONE = 0,
    ATTRIBUTE_FILTER_VPN_DIALUP = 1,
    ATTRIBUTE_FILTER_IEEE_802_1x = 2,
};
pub const ATTRIBUTE_FILTER_NONE = ATTRIBUTEFILTER.ATTRIBUTE_FILTER_NONE;
pub const ATTRIBUTE_FILTER_VPN_DIALUP = ATTRIBUTEFILTER.ATTRIBUTE_FILTER_VPN_DIALUP;
pub const ATTRIBUTE_FILTER_IEEE_802_1x = ATTRIBUTEFILTER.ATTRIBUTE_FILTER_IEEE_802_1x;

pub const ATTRIBUTEINFO = extern enum(i32) {
    NAME = 1,
    SYNTAX = 2,
    RESTRICTIONS = 3,
    DESCRIPTION = 4,
    VENDORID = 5,
    LDAPNAME = 6,
    VENDORTYPE = 7,
};
pub const NAME = ATTRIBUTEINFO.NAME;
pub const SYNTAX = ATTRIBUTEINFO.SYNTAX;
pub const RESTRICTIONS = ATTRIBUTEINFO.RESTRICTIONS;
pub const DESCRIPTION = ATTRIBUTEINFO.DESCRIPTION;
pub const VENDORID = ATTRIBUTEINFO.VENDORID;
pub const LDAPNAME = ATTRIBUTEINFO.LDAPNAME;
pub const VENDORTYPE = ATTRIBUTEINFO.VENDORTYPE;

pub const IASCOMMONPROPERTIES = extern enum(i32) {
    PROPERTY_SDO_RESERVED = 0,
    PROPERTY_SDO_CLASS = 1,
    PROPERTY_SDO_NAME = 2,
    PROPERTY_SDO_DESCRIPTION = 3,
    PROPERTY_SDO_ID = 4,
    PROPERTY_SDO_DATASTORE_NAME = 5,
    PROPERTY_SDO_TEMPLATE_GUID = 6,
    PROPERTY_SDO_OPAQUE = 7,
    PROPERTY_SDO_START = 1024,
};
pub const PROPERTY_SDO_RESERVED = IASCOMMONPROPERTIES.PROPERTY_SDO_RESERVED;
pub const PROPERTY_SDO_CLASS = IASCOMMONPROPERTIES.PROPERTY_SDO_CLASS;
pub const PROPERTY_SDO_NAME = IASCOMMONPROPERTIES.PROPERTY_SDO_NAME;
pub const PROPERTY_SDO_DESCRIPTION = IASCOMMONPROPERTIES.PROPERTY_SDO_DESCRIPTION;
pub const PROPERTY_SDO_ID = IASCOMMONPROPERTIES.PROPERTY_SDO_ID;
pub const PROPERTY_SDO_DATASTORE_NAME = IASCOMMONPROPERTIES.PROPERTY_SDO_DATASTORE_NAME;
pub const PROPERTY_SDO_TEMPLATE_GUID = IASCOMMONPROPERTIES.PROPERTY_SDO_TEMPLATE_GUID;
pub const PROPERTY_SDO_OPAQUE = IASCOMMONPROPERTIES.PROPERTY_SDO_OPAQUE;
pub const PROPERTY_SDO_START = IASCOMMONPROPERTIES.PROPERTY_SDO_START;

pub const USERPROPERTIES = extern enum(i32) {
    PROPERTY_USER_CALLING_STATION_ID = 1024,
    PROPERTY_USER_SAVED_CALLING_STATION_ID = 1025,
    PROPERTY_USER_RADIUS_CALLBACK_NUMBER = 1026,
    PROPERTY_USER_RADIUS_FRAMED_ROUTE = 1027,
    PROPERTY_USER_RADIUS_FRAMED_IP_ADDRESS = 1028,
    PROPERTY_USER_SAVED_RADIUS_CALLBACK_NUMBER = 1029,
    PROPERTY_USER_SAVED_RADIUS_FRAMED_ROUTE = 1030,
    PROPERTY_USER_SAVED_RADIUS_FRAMED_IP_ADDRESS = 1031,
    PROPERTY_USER_ALLOW_DIALIN = 1032,
    PROPERTY_USER_SERVICE_TYPE = 1033,
    PROPERTY_USER_RADIUS_FRAMED_IPV6_ROUTE = 1034,
    PROPERTY_USER_SAVED_RADIUS_FRAMED_IPV6_ROUTE = 1035,
    PROPERTY_USER_RADIUS_FRAMED_INTERFACE_ID = 1036,
    PROPERTY_USER_SAVED_RADIUS_FRAMED_INTERFACE_ID = 1037,
    PROPERTY_USER_RADIUS_FRAMED_IPV6_PREFIX = 1038,
    PROPERTY_USER_SAVED_RADIUS_FRAMED_IPV6_PREFIX = 1039,
};
pub const PROPERTY_USER_CALLING_STATION_ID = USERPROPERTIES.PROPERTY_USER_CALLING_STATION_ID;
pub const PROPERTY_USER_SAVED_CALLING_STATION_ID = USERPROPERTIES.PROPERTY_USER_SAVED_CALLING_STATION_ID;
pub const PROPERTY_USER_RADIUS_CALLBACK_NUMBER = USERPROPERTIES.PROPERTY_USER_RADIUS_CALLBACK_NUMBER;
pub const PROPERTY_USER_RADIUS_FRAMED_ROUTE = USERPROPERTIES.PROPERTY_USER_RADIUS_FRAMED_ROUTE;
pub const PROPERTY_USER_RADIUS_FRAMED_IP_ADDRESS = USERPROPERTIES.PROPERTY_USER_RADIUS_FRAMED_IP_ADDRESS;
pub const PROPERTY_USER_SAVED_RADIUS_CALLBACK_NUMBER = USERPROPERTIES.PROPERTY_USER_SAVED_RADIUS_CALLBACK_NUMBER;
pub const PROPERTY_USER_SAVED_RADIUS_FRAMED_ROUTE = USERPROPERTIES.PROPERTY_USER_SAVED_RADIUS_FRAMED_ROUTE;
pub const PROPERTY_USER_SAVED_RADIUS_FRAMED_IP_ADDRESS = USERPROPERTIES.PROPERTY_USER_SAVED_RADIUS_FRAMED_IP_ADDRESS;
pub const PROPERTY_USER_ALLOW_DIALIN = USERPROPERTIES.PROPERTY_USER_ALLOW_DIALIN;
pub const PROPERTY_USER_SERVICE_TYPE = USERPROPERTIES.PROPERTY_USER_SERVICE_TYPE;
pub const PROPERTY_USER_RADIUS_FRAMED_IPV6_ROUTE = USERPROPERTIES.PROPERTY_USER_RADIUS_FRAMED_IPV6_ROUTE;
pub const PROPERTY_USER_SAVED_RADIUS_FRAMED_IPV6_ROUTE = USERPROPERTIES.PROPERTY_USER_SAVED_RADIUS_FRAMED_IPV6_ROUTE;
pub const PROPERTY_USER_RADIUS_FRAMED_INTERFACE_ID = USERPROPERTIES.PROPERTY_USER_RADIUS_FRAMED_INTERFACE_ID;
pub const PROPERTY_USER_SAVED_RADIUS_FRAMED_INTERFACE_ID = USERPROPERTIES.PROPERTY_USER_SAVED_RADIUS_FRAMED_INTERFACE_ID;
pub const PROPERTY_USER_RADIUS_FRAMED_IPV6_PREFIX = USERPROPERTIES.PROPERTY_USER_RADIUS_FRAMED_IPV6_PREFIX;
pub const PROPERTY_USER_SAVED_RADIUS_FRAMED_IPV6_PREFIX = USERPROPERTIES.PROPERTY_USER_SAVED_RADIUS_FRAMED_IPV6_PREFIX;

pub const DICTIONARYPROPERTIES = extern enum(i32) {
    PROPERTY_DICTIONARY_ATTRIBUTES_COLLECTION = 1024,
    PROPERTY_DICTIONARY_LOCATION = 1025,
};
pub const PROPERTY_DICTIONARY_ATTRIBUTES_COLLECTION = DICTIONARYPROPERTIES.PROPERTY_DICTIONARY_ATTRIBUTES_COLLECTION;
pub const PROPERTY_DICTIONARY_LOCATION = DICTIONARYPROPERTIES.PROPERTY_DICTIONARY_LOCATION;

pub const ATTRIBUTEPROPERTIES = extern enum(i32) {
    PROPERTY_ATTRIBUTE_ID = 1024,
    PROPERTY_ATTRIBUTE_VENDOR_ID = 1025,
    PROPERTY_ATTRIBUTE_VENDOR_TYPE_ID = 1026,
    PROPERTY_ATTRIBUTE_IS_ENUMERABLE = 1027,
    PROPERTY_ATTRIBUTE_ENUM_NAMES = 1028,
    PROPERTY_ATTRIBUTE_ENUM_VALUES = 1029,
    PROPERTY_ATTRIBUTE_SYNTAX = 1030,
    PROPERTY_ATTRIBUTE_ALLOW_MULTIPLE = 1031,
    PROPERTY_ATTRIBUTE_ALLOW_LOG_ORDINAL = 1032,
    PROPERTY_ATTRIBUTE_ALLOW_IN_PROFILE = 1033,
    PROPERTY_ATTRIBUTE_ALLOW_IN_CONDITION = 1034,
    PROPERTY_ATTRIBUTE_DISPLAY_NAME = 1035,
    PROPERTY_ATTRIBUTE_VALUE = 1036,
    PROPERTY_ATTRIBUTE_ALLOW_IN_PROXY_PROFILE = 1037,
    PROPERTY_ATTRIBUTE_ALLOW_IN_PROXY_CONDITION = 1038,
    PROPERTY_ATTRIBUTE_ALLOW_IN_VPNDIALUP = 1039,
    PROPERTY_ATTRIBUTE_ALLOW_IN_8021X = 1040,
    PROPERTY_ATTRIBUTE_ENUM_FILTERS = 1041,
};
pub const PROPERTY_ATTRIBUTE_ID = ATTRIBUTEPROPERTIES.PROPERTY_ATTRIBUTE_ID;
pub const PROPERTY_ATTRIBUTE_VENDOR_ID = ATTRIBUTEPROPERTIES.PROPERTY_ATTRIBUTE_VENDOR_ID;
pub const PROPERTY_ATTRIBUTE_VENDOR_TYPE_ID = ATTRIBUTEPROPERTIES.PROPERTY_ATTRIBUTE_VENDOR_TYPE_ID;
pub const PROPERTY_ATTRIBUTE_IS_ENUMERABLE = ATTRIBUTEPROPERTIES.PROPERTY_ATTRIBUTE_IS_ENUMERABLE;
pub const PROPERTY_ATTRIBUTE_ENUM_NAMES = ATTRIBUTEPROPERTIES.PROPERTY_ATTRIBUTE_ENUM_NAMES;
pub const PROPERTY_ATTRIBUTE_ENUM_VALUES = ATTRIBUTEPROPERTIES.PROPERTY_ATTRIBUTE_ENUM_VALUES;
pub const PROPERTY_ATTRIBUTE_SYNTAX = ATTRIBUTEPROPERTIES.PROPERTY_ATTRIBUTE_SYNTAX;
pub const PROPERTY_ATTRIBUTE_ALLOW_MULTIPLE = ATTRIBUTEPROPERTIES.PROPERTY_ATTRIBUTE_ALLOW_MULTIPLE;
pub const PROPERTY_ATTRIBUTE_ALLOW_LOG_ORDINAL = ATTRIBUTEPROPERTIES.PROPERTY_ATTRIBUTE_ALLOW_LOG_ORDINAL;
pub const PROPERTY_ATTRIBUTE_ALLOW_IN_PROFILE = ATTRIBUTEPROPERTIES.PROPERTY_ATTRIBUTE_ALLOW_IN_PROFILE;
pub const PROPERTY_ATTRIBUTE_ALLOW_IN_CONDITION = ATTRIBUTEPROPERTIES.PROPERTY_ATTRIBUTE_ALLOW_IN_CONDITION;
pub const PROPERTY_ATTRIBUTE_DISPLAY_NAME = ATTRIBUTEPROPERTIES.PROPERTY_ATTRIBUTE_DISPLAY_NAME;
pub const PROPERTY_ATTRIBUTE_VALUE = ATTRIBUTEPROPERTIES.PROPERTY_ATTRIBUTE_VALUE;
pub const PROPERTY_ATTRIBUTE_ALLOW_IN_PROXY_PROFILE = ATTRIBUTEPROPERTIES.PROPERTY_ATTRIBUTE_ALLOW_IN_PROXY_PROFILE;
pub const PROPERTY_ATTRIBUTE_ALLOW_IN_PROXY_CONDITION = ATTRIBUTEPROPERTIES.PROPERTY_ATTRIBUTE_ALLOW_IN_PROXY_CONDITION;
pub const PROPERTY_ATTRIBUTE_ALLOW_IN_VPNDIALUP = ATTRIBUTEPROPERTIES.PROPERTY_ATTRIBUTE_ALLOW_IN_VPNDIALUP;
pub const PROPERTY_ATTRIBUTE_ALLOW_IN_8021X = ATTRIBUTEPROPERTIES.PROPERTY_ATTRIBUTE_ALLOW_IN_8021X;
pub const PROPERTY_ATTRIBUTE_ENUM_FILTERS = ATTRIBUTEPROPERTIES.PROPERTY_ATTRIBUTE_ENUM_FILTERS;

pub const IASPROPERTIES = extern enum(i32) {
    PROPERTY_IAS_RADIUSSERVERGROUPS_COLLECTION = 1024,
    PROPERTY_IAS_POLICIES_COLLECTION = 1025,
    PROPERTY_IAS_PROFILES_COLLECTION = 1026,
    PROPERTY_IAS_PROTOCOLS_COLLECTION = 1027,
    PROPERTY_IAS_AUDITORS_COLLECTION = 1028,
    PROPERTY_IAS_REQUESTHANDLERS_COLLECTION = 1029,
    PROPERTY_IAS_PROXYPOLICIES_COLLECTION = 1030,
    PROPERTY_IAS_PROXYPROFILES_COLLECTION = 1031,
    PROPERTY_IAS_REMEDIATIONSERVERGROUPS_COLLECTION = 1032,
    PROPERTY_IAS_SHVTEMPLATES_COLLECTION = 1033,
};
pub const PROPERTY_IAS_RADIUSSERVERGROUPS_COLLECTION = IASPROPERTIES.PROPERTY_IAS_RADIUSSERVERGROUPS_COLLECTION;
pub const PROPERTY_IAS_POLICIES_COLLECTION = IASPROPERTIES.PROPERTY_IAS_POLICIES_COLLECTION;
pub const PROPERTY_IAS_PROFILES_COLLECTION = IASPROPERTIES.PROPERTY_IAS_PROFILES_COLLECTION;
pub const PROPERTY_IAS_PROTOCOLS_COLLECTION = IASPROPERTIES.PROPERTY_IAS_PROTOCOLS_COLLECTION;
pub const PROPERTY_IAS_AUDITORS_COLLECTION = IASPROPERTIES.PROPERTY_IAS_AUDITORS_COLLECTION;
pub const PROPERTY_IAS_REQUESTHANDLERS_COLLECTION = IASPROPERTIES.PROPERTY_IAS_REQUESTHANDLERS_COLLECTION;
pub const PROPERTY_IAS_PROXYPOLICIES_COLLECTION = IASPROPERTIES.PROPERTY_IAS_PROXYPOLICIES_COLLECTION;
pub const PROPERTY_IAS_PROXYPROFILES_COLLECTION = IASPROPERTIES.PROPERTY_IAS_PROXYPROFILES_COLLECTION;
pub const PROPERTY_IAS_REMEDIATIONSERVERGROUPS_COLLECTION = IASPROPERTIES.PROPERTY_IAS_REMEDIATIONSERVERGROUPS_COLLECTION;
pub const PROPERTY_IAS_SHVTEMPLATES_COLLECTION = IASPROPERTIES.PROPERTY_IAS_SHVTEMPLATES_COLLECTION;

pub const TEMPLATESPROPERTIES = extern enum(i32) {
    PROPERTY_TEMPLATES_POLICIES_TEMPLATES = 1024,
    PROPERTY_TEMPLATES_PROFILES_TEMPLATES = 1025,
    PROPERTY_TEMPLATES_PROFILES_COLLECTION = 1026,
    PROPERTY_TEMPLATES_PROXYPOLICIES_TEMPLATES = 1027,
    PROPERTY_TEMPLATES_PROXYPROFILES_TEMPLATES = 1028,
    PROPERTY_TEMPLATES_PROXYPROFILES_COLLECTION = 1029,
    PROPERTY_TEMPLATES_REMEDIATIONSERVERGROUPS_TEMPLATES = 1030,
    PROPERTY_TEMPLATES_SHVTEMPLATES_TEMPLATES = 1031,
    PROPERTY_TEMPLATES_CLIENTS_TEMPLATES = 1032,
    PROPERTY_TEMPLATES_RADIUSSERVERS_TEMPLATES = 1033,
    PROPERTY_TEMPLATES_SHAREDSECRETS_TEMPLATES = 1034,
    PROPERTY_TEMPLATES_IPFILTERS_TEMPLATES = 1035,
};
pub const PROPERTY_TEMPLATES_POLICIES_TEMPLATES = TEMPLATESPROPERTIES.PROPERTY_TEMPLATES_POLICIES_TEMPLATES;
pub const PROPERTY_TEMPLATES_PROFILES_TEMPLATES = TEMPLATESPROPERTIES.PROPERTY_TEMPLATES_PROFILES_TEMPLATES;
pub const PROPERTY_TEMPLATES_PROFILES_COLLECTION = TEMPLATESPROPERTIES.PROPERTY_TEMPLATES_PROFILES_COLLECTION;
pub const PROPERTY_TEMPLATES_PROXYPOLICIES_TEMPLATES = TEMPLATESPROPERTIES.PROPERTY_TEMPLATES_PROXYPOLICIES_TEMPLATES;
pub const PROPERTY_TEMPLATES_PROXYPROFILES_TEMPLATES = TEMPLATESPROPERTIES.PROPERTY_TEMPLATES_PROXYPROFILES_TEMPLATES;
pub const PROPERTY_TEMPLATES_PROXYPROFILES_COLLECTION = TEMPLATESPROPERTIES.PROPERTY_TEMPLATES_PROXYPROFILES_COLLECTION;
pub const PROPERTY_TEMPLATES_REMEDIATIONSERVERGROUPS_TEMPLATES = TEMPLATESPROPERTIES.PROPERTY_TEMPLATES_REMEDIATIONSERVERGROUPS_TEMPLATES;
pub const PROPERTY_TEMPLATES_SHVTEMPLATES_TEMPLATES = TEMPLATESPROPERTIES.PROPERTY_TEMPLATES_SHVTEMPLATES_TEMPLATES;
pub const PROPERTY_TEMPLATES_CLIENTS_TEMPLATES = TEMPLATESPROPERTIES.PROPERTY_TEMPLATES_CLIENTS_TEMPLATES;
pub const PROPERTY_TEMPLATES_RADIUSSERVERS_TEMPLATES = TEMPLATESPROPERTIES.PROPERTY_TEMPLATES_RADIUSSERVERS_TEMPLATES;
pub const PROPERTY_TEMPLATES_SHAREDSECRETS_TEMPLATES = TEMPLATESPROPERTIES.PROPERTY_TEMPLATES_SHAREDSECRETS_TEMPLATES;
pub const PROPERTY_TEMPLATES_IPFILTERS_TEMPLATES = TEMPLATESPROPERTIES.PROPERTY_TEMPLATES_IPFILTERS_TEMPLATES;

pub const CLIENTPROPERTIES = extern enum(i32) {
    PROPERTY_CLIENT_REQUIRE_SIGNATURE = 1024,
    PROPERTY_CLIENT_UNUSED = 1025,
    PROPERTY_CLIENT_SHARED_SECRET = 1026,
    PROPERTY_CLIENT_NAS_MANUFACTURER = 1027,
    PROPERTY_CLIENT_ADDRESS = 1028,
    PROPERTY_CLIENT_QUARANTINE_COMPATIBLE = 1029,
    PROPERTY_CLIENT_ENABLED = 1030,
    PROPERTY_CLIENT_SECRET_TEMPLATE_GUID = 1031,
};
pub const PROPERTY_CLIENT_REQUIRE_SIGNATURE = CLIENTPROPERTIES.PROPERTY_CLIENT_REQUIRE_SIGNATURE;
pub const PROPERTY_CLIENT_UNUSED = CLIENTPROPERTIES.PROPERTY_CLIENT_UNUSED;
pub const PROPERTY_CLIENT_SHARED_SECRET = CLIENTPROPERTIES.PROPERTY_CLIENT_SHARED_SECRET;
pub const PROPERTY_CLIENT_NAS_MANUFACTURER = CLIENTPROPERTIES.PROPERTY_CLIENT_NAS_MANUFACTURER;
pub const PROPERTY_CLIENT_ADDRESS = CLIENTPROPERTIES.PROPERTY_CLIENT_ADDRESS;
pub const PROPERTY_CLIENT_QUARANTINE_COMPATIBLE = CLIENTPROPERTIES.PROPERTY_CLIENT_QUARANTINE_COMPATIBLE;
pub const PROPERTY_CLIENT_ENABLED = CLIENTPROPERTIES.PROPERTY_CLIENT_ENABLED;
pub const PROPERTY_CLIENT_SECRET_TEMPLATE_GUID = CLIENTPROPERTIES.PROPERTY_CLIENT_SECRET_TEMPLATE_GUID;

pub const VENDORPROPERTIES = extern enum(i32) {
    PROPERTY_NAS_VENDOR_ID = 1024,
};
pub const PROPERTY_NAS_VENDOR_ID = VENDORPROPERTIES.PROPERTY_NAS_VENDOR_ID;

pub const PROFILEPROPERTIES = extern enum(i32) {
    PROPERTY_PROFILE_ATTRIBUTES_COLLECTION = 1024,
    PROPERTY_PROFILE_IPFILTER_TEMPLATE_GUID = 1025,
};
pub const PROPERTY_PROFILE_ATTRIBUTES_COLLECTION = PROFILEPROPERTIES.PROPERTY_PROFILE_ATTRIBUTES_COLLECTION;
pub const PROPERTY_PROFILE_IPFILTER_TEMPLATE_GUID = PROFILEPROPERTIES.PROPERTY_PROFILE_IPFILTER_TEMPLATE_GUID;

pub const POLICYPROPERTIES = extern enum(i32) {
    PROPERTY_POLICY_CONSTRAINT = 1024,
    PROPERTY_POLICY_MERIT = 1025,
    PROPERTY_POLICY_UNUSED0 = 1026,
    PROPERTY_POLICY_UNUSED1 = 1027,
    PROPERTY_POLICY_PROFILE_NAME = 1028,
    PROPERTY_POLICY_ACTION = 1029,
    PROPERTY_POLICY_CONDITIONS_COLLECTION = 1030,
    PROPERTY_POLICY_ENABLED = 1031,
    PROPERTY_POLICY_SOURCETAG = 1032,
};
pub const PROPERTY_POLICY_CONSTRAINT = POLICYPROPERTIES.PROPERTY_POLICY_CONSTRAINT;
pub const PROPERTY_POLICY_MERIT = POLICYPROPERTIES.PROPERTY_POLICY_MERIT;
pub const PROPERTY_POLICY_UNUSED0 = POLICYPROPERTIES.PROPERTY_POLICY_UNUSED0;
pub const PROPERTY_POLICY_UNUSED1 = POLICYPROPERTIES.PROPERTY_POLICY_UNUSED1;
pub const PROPERTY_POLICY_PROFILE_NAME = POLICYPROPERTIES.PROPERTY_POLICY_PROFILE_NAME;
pub const PROPERTY_POLICY_ACTION = POLICYPROPERTIES.PROPERTY_POLICY_ACTION;
pub const PROPERTY_POLICY_CONDITIONS_COLLECTION = POLICYPROPERTIES.PROPERTY_POLICY_CONDITIONS_COLLECTION;
pub const PROPERTY_POLICY_ENABLED = POLICYPROPERTIES.PROPERTY_POLICY_ENABLED;
pub const PROPERTY_POLICY_SOURCETAG = POLICYPROPERTIES.PROPERTY_POLICY_SOURCETAG;

pub const CONDITIONPROPERTIES = extern enum(i32) {
    PROPERTY_CONDITION_TEXT = 1024,
};
pub const PROPERTY_CONDITION_TEXT = CONDITIONPROPERTIES.PROPERTY_CONDITION_TEXT;

pub const RADIUSSERVERGROUPPROPERTIES = extern enum(i32) {
    PROPERTY_RADIUSSERVERGROUP_SERVERS_COLLECTION = 1024,
};
pub const PROPERTY_RADIUSSERVERGROUP_SERVERS_COLLECTION = RADIUSSERVERGROUPPROPERTIES.PROPERTY_RADIUSSERVERGROUP_SERVERS_COLLECTION;

pub const RADIUSSERVERPROPERTIES = extern enum(i32) {
    PROPERTY_RADIUSSERVER_AUTH_PORT = 1024,
    PROPERTY_RADIUSSERVER_AUTH_SECRET = 1025,
    PROPERTY_RADIUSSERVER_ACCT_PORT = 1026,
    PROPERTY_RADIUSSERVER_ACCT_SECRET = 1027,
    PROPERTY_RADIUSSERVER_ADDRESS = 1028,
    PROPERTY_RADIUSSERVER_FORWARD_ACCT_ONOFF = 1029,
    PROPERTY_RADIUSSERVER_PRIORITY = 1030,
    PROPERTY_RADIUSSERVER_WEIGHT = 1031,
    PROPERTY_RADIUSSERVER_TIMEOUT = 1032,
    PROPERTY_RADIUSSERVER_MAX_LOST = 1033,
    PROPERTY_RADIUSSERVER_BLACKOUT = 1034,
    PROPERTY_RADIUSSERVER_SEND_SIGNATURE = 1035,
    PROPERTY_RADIUSSERVER_AUTH_SECRET_TEMPLATE_GUID = 1036,
    PROPERTY_RADIUSSERVER_ACCT_SECRET_TEMPLATE_GUID = 1037,
};
pub const PROPERTY_RADIUSSERVER_AUTH_PORT = RADIUSSERVERPROPERTIES.PROPERTY_RADIUSSERVER_AUTH_PORT;
pub const PROPERTY_RADIUSSERVER_AUTH_SECRET = RADIUSSERVERPROPERTIES.PROPERTY_RADIUSSERVER_AUTH_SECRET;
pub const PROPERTY_RADIUSSERVER_ACCT_PORT = RADIUSSERVERPROPERTIES.PROPERTY_RADIUSSERVER_ACCT_PORT;
pub const PROPERTY_RADIUSSERVER_ACCT_SECRET = RADIUSSERVERPROPERTIES.PROPERTY_RADIUSSERVER_ACCT_SECRET;
pub const PROPERTY_RADIUSSERVER_ADDRESS = RADIUSSERVERPROPERTIES.PROPERTY_RADIUSSERVER_ADDRESS;
pub const PROPERTY_RADIUSSERVER_FORWARD_ACCT_ONOFF = RADIUSSERVERPROPERTIES.PROPERTY_RADIUSSERVER_FORWARD_ACCT_ONOFF;
pub const PROPERTY_RADIUSSERVER_PRIORITY = RADIUSSERVERPROPERTIES.PROPERTY_RADIUSSERVER_PRIORITY;
pub const PROPERTY_RADIUSSERVER_WEIGHT = RADIUSSERVERPROPERTIES.PROPERTY_RADIUSSERVER_WEIGHT;
pub const PROPERTY_RADIUSSERVER_TIMEOUT = RADIUSSERVERPROPERTIES.PROPERTY_RADIUSSERVER_TIMEOUT;
pub const PROPERTY_RADIUSSERVER_MAX_LOST = RADIUSSERVERPROPERTIES.PROPERTY_RADIUSSERVER_MAX_LOST;
pub const PROPERTY_RADIUSSERVER_BLACKOUT = RADIUSSERVERPROPERTIES.PROPERTY_RADIUSSERVER_BLACKOUT;
pub const PROPERTY_RADIUSSERVER_SEND_SIGNATURE = RADIUSSERVERPROPERTIES.PROPERTY_RADIUSSERVER_SEND_SIGNATURE;
pub const PROPERTY_RADIUSSERVER_AUTH_SECRET_TEMPLATE_GUID = RADIUSSERVERPROPERTIES.PROPERTY_RADIUSSERVER_AUTH_SECRET_TEMPLATE_GUID;
pub const PROPERTY_RADIUSSERVER_ACCT_SECRET_TEMPLATE_GUID = RADIUSSERVERPROPERTIES.PROPERTY_RADIUSSERVER_ACCT_SECRET_TEMPLATE_GUID;

pub const REMEDIATIONSERVERGROUPPROPERTIES = extern enum(i32) {
    PROPERTY_REMEDIATIONSERVERGROUP_SERVERS_COLLECTION = 1024,
};
pub const PROPERTY_REMEDIATIONSERVERGROUP_SERVERS_COLLECTION = REMEDIATIONSERVERGROUPPROPERTIES.PROPERTY_REMEDIATIONSERVERGROUP_SERVERS_COLLECTION;

pub const REMEDIATIONSERVERPROPERTIES = extern enum(i32) {
    PROPERTY_REMEDIATIONSERVER_ADDRESS = 1024,
    PROPERTY_REMEDIATIONSERVER_FRIENDLY_NAME = 1025,
};
pub const PROPERTY_REMEDIATIONSERVER_ADDRESS = REMEDIATIONSERVERPROPERTIES.PROPERTY_REMEDIATIONSERVER_ADDRESS;
pub const PROPERTY_REMEDIATIONSERVER_FRIENDLY_NAME = REMEDIATIONSERVERPROPERTIES.PROPERTY_REMEDIATIONSERVER_FRIENDLY_NAME;

pub const SHVTEMPLATEPROPERTIES = extern enum(i32) {
    PROPERTY_SHV_COMBINATION_TYPE = 1024,
    PROPERTY_SHV_LIST = 1025,
    PROPERTY_SHVCONFIG_LIST = 1026,
};
pub const PROPERTY_SHV_COMBINATION_TYPE = SHVTEMPLATEPROPERTIES.PROPERTY_SHV_COMBINATION_TYPE;
pub const PROPERTY_SHV_LIST = SHVTEMPLATEPROPERTIES.PROPERTY_SHV_LIST;
pub const PROPERTY_SHVCONFIG_LIST = SHVTEMPLATEPROPERTIES.PROPERTY_SHVCONFIG_LIST;

pub const IPFILTERPROPERTIES = extern enum(i32) {
    PROPERTY_IPFILTER_ATTRIBUTES_COLLECTION = 1024,
};
pub const PROPERTY_IPFILTER_ATTRIBUTES_COLLECTION = IPFILTERPROPERTIES.PROPERTY_IPFILTER_ATTRIBUTES_COLLECTION;

pub const SHAREDSECRETPROPERTIES = extern enum(i32) {
    PROPERTY_SHAREDSECRET_STRING = 1024,
};
pub const PROPERTY_SHAREDSECRET_STRING = SHAREDSECRETPROPERTIES.PROPERTY_SHAREDSECRET_STRING;

pub const IASCOMPONENTPROPERTIES = extern enum(i32) {
    PROPERTY_COMPONENT_ID = 1024,
    PROPERTY_COMPONENT_PROG_ID = 1025,
    PROPERTY_COMPONENT_START = 1026,
};
pub const PROPERTY_COMPONENT_ID = IASCOMPONENTPROPERTIES.PROPERTY_COMPONENT_ID;
pub const PROPERTY_COMPONENT_PROG_ID = IASCOMPONENTPROPERTIES.PROPERTY_COMPONENT_PROG_ID;
pub const PROPERTY_COMPONENT_START = IASCOMPONENTPROPERTIES.PROPERTY_COMPONENT_START;

pub const PROTOCOLPROPERTIES = extern enum(i32) {
    PROPERTY_PROTOCOL_REQUEST_HANDLER = 1026,
    PROPERTY_PROTOCOL_START = 1027,
};
pub const PROPERTY_PROTOCOL_REQUEST_HANDLER = PROTOCOLPROPERTIES.PROPERTY_PROTOCOL_REQUEST_HANDLER;
pub const PROPERTY_PROTOCOL_START = PROTOCOLPROPERTIES.PROPERTY_PROTOCOL_START;

pub const RADIUSPROPERTIES = extern enum(i32) {
    PROPERTY_RADIUS_ACCOUNTING_PORT = 1027,
    PROPERTY_RADIUS_AUTHENTICATION_PORT = 1028,
    PROPERTY_RADIUS_CLIENTS_COLLECTION = 1029,
    PROPERTY_RADIUS_VENDORS_COLLECTION = 1030,
};
pub const PROPERTY_RADIUS_ACCOUNTING_PORT = RADIUSPROPERTIES.PROPERTY_RADIUS_ACCOUNTING_PORT;
pub const PROPERTY_RADIUS_AUTHENTICATION_PORT = RADIUSPROPERTIES.PROPERTY_RADIUS_AUTHENTICATION_PORT;
pub const PROPERTY_RADIUS_CLIENTS_COLLECTION = RADIUSPROPERTIES.PROPERTY_RADIUS_CLIENTS_COLLECTION;
pub const PROPERTY_RADIUS_VENDORS_COLLECTION = RADIUSPROPERTIES.PROPERTY_RADIUS_VENDORS_COLLECTION;

pub const NTEVENTLOGPROPERTIES = extern enum(i32) {
    PROPERTY_EVENTLOG_LOG_APPLICATION_EVENTS = 1026,
    PROPERTY_EVENTLOG_LOG_MALFORMED = 1027,
    PROPERTY_EVENTLOG_LOG_DEBUG = 1028,
};
pub const PROPERTY_EVENTLOG_LOG_APPLICATION_EVENTS = NTEVENTLOGPROPERTIES.PROPERTY_EVENTLOG_LOG_APPLICATION_EVENTS;
pub const PROPERTY_EVENTLOG_LOG_MALFORMED = NTEVENTLOGPROPERTIES.PROPERTY_EVENTLOG_LOG_MALFORMED;
pub const PROPERTY_EVENTLOG_LOG_DEBUG = NTEVENTLOGPROPERTIES.PROPERTY_EVENTLOG_LOG_DEBUG;

pub const NAMESPROPERTIES = extern enum(i32) {
    PROPERTY_NAMES_REALMS = 1026,
};
pub const PROPERTY_NAMES_REALMS = NAMESPROPERTIES.PROPERTY_NAMES_REALMS;

pub const NTSAMPROPERTIES = extern enum(i32) {
    PROPERTY_NTSAM_ALLOW_LM_AUTHENTICATION = 1026,
};
pub const PROPERTY_NTSAM_ALLOW_LM_AUTHENTICATION = NTSAMPROPERTIES.PROPERTY_NTSAM_ALLOW_LM_AUTHENTICATION;

pub const ACCOUNTINGPROPERTIES = extern enum(i32) {
    PROPERTY_ACCOUNTING_LOG_ACCOUNTING = 1026,
    PROPERTY_ACCOUNTING_LOG_ACCOUNTING_INTERIM = 1027,
    PROPERTY_ACCOUNTING_LOG_AUTHENTICATION = 1028,
    PROPERTY_ACCOUNTING_LOG_OPEN_NEW_FREQUENCY = 1029,
    PROPERTY_ACCOUNTING_LOG_OPEN_NEW_SIZE = 1030,
    PROPERTY_ACCOUNTING_LOG_FILE_DIRECTORY = 1031,
    PROPERTY_ACCOUNTING_LOG_IAS1_FORMAT = 1032,
    PROPERTY_ACCOUNTING_LOG_ENABLE_LOGGING = 1033,
    PROPERTY_ACCOUNTING_LOG_DELETE_IF_FULL = 1034,
    PROPERTY_ACCOUNTING_SQL_MAX_SESSIONS = 1035,
    PROPERTY_ACCOUNTING_LOG_AUTHENTICATION_INTERIM = 1036,
    PROPERTY_ACCOUNTING_LOG_FILE_IS_BACKUP = 1037,
    PROPERTY_ACCOUNTING_DISCARD_REQUEST_ON_FAILURE = 1038,
};
pub const PROPERTY_ACCOUNTING_LOG_ACCOUNTING = ACCOUNTINGPROPERTIES.PROPERTY_ACCOUNTING_LOG_ACCOUNTING;
pub const PROPERTY_ACCOUNTING_LOG_ACCOUNTING_INTERIM = ACCOUNTINGPROPERTIES.PROPERTY_ACCOUNTING_LOG_ACCOUNTING_INTERIM;
pub const PROPERTY_ACCOUNTING_LOG_AUTHENTICATION = ACCOUNTINGPROPERTIES.PROPERTY_ACCOUNTING_LOG_AUTHENTICATION;
pub const PROPERTY_ACCOUNTING_LOG_OPEN_NEW_FREQUENCY = ACCOUNTINGPROPERTIES.PROPERTY_ACCOUNTING_LOG_OPEN_NEW_FREQUENCY;
pub const PROPERTY_ACCOUNTING_LOG_OPEN_NEW_SIZE = ACCOUNTINGPROPERTIES.PROPERTY_ACCOUNTING_LOG_OPEN_NEW_SIZE;
pub const PROPERTY_ACCOUNTING_LOG_FILE_DIRECTORY = ACCOUNTINGPROPERTIES.PROPERTY_ACCOUNTING_LOG_FILE_DIRECTORY;
pub const PROPERTY_ACCOUNTING_LOG_IAS1_FORMAT = ACCOUNTINGPROPERTIES.PROPERTY_ACCOUNTING_LOG_IAS1_FORMAT;
pub const PROPERTY_ACCOUNTING_LOG_ENABLE_LOGGING = ACCOUNTINGPROPERTIES.PROPERTY_ACCOUNTING_LOG_ENABLE_LOGGING;
pub const PROPERTY_ACCOUNTING_LOG_DELETE_IF_FULL = ACCOUNTINGPROPERTIES.PROPERTY_ACCOUNTING_LOG_DELETE_IF_FULL;
pub const PROPERTY_ACCOUNTING_SQL_MAX_SESSIONS = ACCOUNTINGPROPERTIES.PROPERTY_ACCOUNTING_SQL_MAX_SESSIONS;
pub const PROPERTY_ACCOUNTING_LOG_AUTHENTICATION_INTERIM = ACCOUNTINGPROPERTIES.PROPERTY_ACCOUNTING_LOG_AUTHENTICATION_INTERIM;
pub const PROPERTY_ACCOUNTING_LOG_FILE_IS_BACKUP = ACCOUNTINGPROPERTIES.PROPERTY_ACCOUNTING_LOG_FILE_IS_BACKUP;
pub const PROPERTY_ACCOUNTING_DISCARD_REQUEST_ON_FAILURE = ACCOUNTINGPROPERTIES.PROPERTY_ACCOUNTING_DISCARD_REQUEST_ON_FAILURE;

pub const NAPPROPERTIES = extern enum(i32) {
    PROPERTY_NAP_POLICIES_COLLECTION = 1026,
    PROPERTY_SHV_TEMPLATES_COLLECTION = 1027,
};
pub const PROPERTY_NAP_POLICIES_COLLECTION = NAPPROPERTIES.PROPERTY_NAP_POLICIES_COLLECTION;
pub const PROPERTY_SHV_TEMPLATES_COLLECTION = NAPPROPERTIES.PROPERTY_SHV_TEMPLATES_COLLECTION;

pub const RADIUSPROXYPROPERTIES = extern enum(i32) {
    PROPERTY_RADIUSPROXY_SERVERGROUPS = 1026,
};
pub const PROPERTY_RADIUSPROXY_SERVERGROUPS = RADIUSPROXYPROPERTIES.PROPERTY_RADIUSPROXY_SERVERGROUPS;

pub const REMEDIATIONSERVERSPROPERTIES = extern enum(i32) {
    PROPERTY_REMEDIATIONSERVERS_SERVERGROUPS = 1026,
};
pub const PROPERTY_REMEDIATIONSERVERS_SERVERGROUPS = REMEDIATIONSERVERSPROPERTIES.PROPERTY_REMEDIATIONSERVERS_SERVERGROUPS;

pub const SHV_COMBINATION_TYPE = extern enum(i32) {
    ALL_PASS = 0,
    ALL_FAIL = 1,
    ONE_OR_MORE_PASS = 2,
    ONE_OR_MORE_FAIL = 3,
    ONE_OR_MORE_INFECTED = 4,
    ONE_OR_MORE_TRANSITIONAL = 5,
    ONE_OR_MORE_UNKNOWN = 6,
    MAX = 7,
};
pub const SHV_COMBINATION_TYPE_ALL_PASS = SHV_COMBINATION_TYPE.ALL_PASS;
pub const SHV_COMBINATION_TYPE_ALL_FAIL = SHV_COMBINATION_TYPE.ALL_FAIL;
pub const SHV_COMBINATION_TYPE_ONE_OR_MORE_PASS = SHV_COMBINATION_TYPE.ONE_OR_MORE_PASS;
pub const SHV_COMBINATION_TYPE_ONE_OR_MORE_FAIL = SHV_COMBINATION_TYPE.ONE_OR_MORE_FAIL;
pub const SHV_COMBINATION_TYPE_ONE_OR_MORE_INFECTED = SHV_COMBINATION_TYPE.ONE_OR_MORE_INFECTED;
pub const SHV_COMBINATION_TYPE_ONE_OR_MORE_TRANSITIONAL = SHV_COMBINATION_TYPE.ONE_OR_MORE_TRANSITIONAL;
pub const SHV_COMBINATION_TYPE_ONE_OR_MORE_UNKNOWN = SHV_COMBINATION_TYPE.ONE_OR_MORE_UNKNOWN;
pub const SHV_COMBINATION_TYPE_MAX = SHV_COMBINATION_TYPE.MAX;

pub const SERVICE_TYPE = extern enum(i32) {
    IAS = 0,
    RAS = 1,
    RAMGMTSVC = 2,
    MAX = 3,
};
pub const SERVICE_TYPE_IAS = SERVICE_TYPE.IAS;
pub const SERVICE_TYPE_RAS = SERVICE_TYPE.RAS;
pub const SERVICE_TYPE_RAMGMTSVC = SERVICE_TYPE.RAMGMTSVC;
pub const SERVICE_TYPE_MAX = SERVICE_TYPE.MAX;

pub const IASOSTYPE = extern enum(i32) {
    SYSTEM_TYPE_NT4_WORKSTATION = 0,
    SYSTEM_TYPE_NT5_WORKSTATION = 1,
    SYSTEM_TYPE_NT6_WORKSTATION = 2,
    SYSTEM_TYPE_NT6_1_WORKSTATION = 3,
    SYSTEM_TYPE_NT6_2_WORKSTATION = 4,
    SYSTEM_TYPE_NT6_3_WORKSTATION = 5,
    SYSTEM_TYPE_NT10_0_WORKSTATION = 6,
    SYSTEM_TYPE_NT4_SERVER = 7,
    SYSTEM_TYPE_NT5_SERVER = 8,
    SYSTEM_TYPE_NT6_SERVER = 9,
    SYSTEM_TYPE_NT6_1_SERVER = 10,
    SYSTEM_TYPE_NT6_2_SERVER = 11,
    SYSTEM_TYPE_NT6_3_SERVER = 12,
    SYSTEM_TYPE_NT10_0_SERVER = 13,
};
pub const SYSTEM_TYPE_NT4_WORKSTATION = IASOSTYPE.SYSTEM_TYPE_NT4_WORKSTATION;
pub const SYSTEM_TYPE_NT5_WORKSTATION = IASOSTYPE.SYSTEM_TYPE_NT5_WORKSTATION;
pub const SYSTEM_TYPE_NT6_WORKSTATION = IASOSTYPE.SYSTEM_TYPE_NT6_WORKSTATION;
pub const SYSTEM_TYPE_NT6_1_WORKSTATION = IASOSTYPE.SYSTEM_TYPE_NT6_1_WORKSTATION;
pub const SYSTEM_TYPE_NT6_2_WORKSTATION = IASOSTYPE.SYSTEM_TYPE_NT6_2_WORKSTATION;
pub const SYSTEM_TYPE_NT6_3_WORKSTATION = IASOSTYPE.SYSTEM_TYPE_NT6_3_WORKSTATION;
pub const SYSTEM_TYPE_NT10_0_WORKSTATION = IASOSTYPE.SYSTEM_TYPE_NT10_0_WORKSTATION;
pub const SYSTEM_TYPE_NT4_SERVER = IASOSTYPE.SYSTEM_TYPE_NT4_SERVER;
pub const SYSTEM_TYPE_NT5_SERVER = IASOSTYPE.SYSTEM_TYPE_NT5_SERVER;
pub const SYSTEM_TYPE_NT6_SERVER = IASOSTYPE.SYSTEM_TYPE_NT6_SERVER;
pub const SYSTEM_TYPE_NT6_1_SERVER = IASOSTYPE.SYSTEM_TYPE_NT6_1_SERVER;
pub const SYSTEM_TYPE_NT6_2_SERVER = IASOSTYPE.SYSTEM_TYPE_NT6_2_SERVER;
pub const SYSTEM_TYPE_NT6_3_SERVER = IASOSTYPE.SYSTEM_TYPE_NT6_3_SERVER;
pub const SYSTEM_TYPE_NT10_0_SERVER = IASOSTYPE.SYSTEM_TYPE_NT10_0_SERVER;

pub const IASDOMAINTYPE = extern enum(i32) {
    DOMAIN_TYPE_NONE = 0,
    DOMAIN_TYPE_NT4 = 1,
    DOMAIN_TYPE_NT5 = 2,
    DOMAIN_TYPE_MIXED = 3,
};
pub const DOMAIN_TYPE_NONE = IASDOMAINTYPE.DOMAIN_TYPE_NONE;
pub const DOMAIN_TYPE_NT4 = IASDOMAINTYPE.DOMAIN_TYPE_NT4;
pub const DOMAIN_TYPE_NT5 = IASDOMAINTYPE.DOMAIN_TYPE_NT5;
pub const DOMAIN_TYPE_MIXED = IASDOMAINTYPE.DOMAIN_TYPE_MIXED;

pub const IASDATASTORE = extern enum(i32) {
    DATA_STORE_LOCAL = 0,
    DATA_STORE_DIRECTORY = 1,
};
pub const DATA_STORE_LOCAL = IASDATASTORE.DATA_STORE_LOCAL;
pub const DATA_STORE_DIRECTORY = IASDATASTORE.DATA_STORE_DIRECTORY;

const IID_ISdoMachine_Value = @import("../zig.zig").Guid.initString("479F6E75-49A2-11D2-8ECA-00C04FC2F519");
pub const IID_ISdoMachine = &IID_ISdoMachine_Value;
pub const ISdoMachine = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Attach: fn(
            self: *const ISdoMachine,
            bstrComputerName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDictionarySDO: fn(
            self: *const ISdoMachine,
            ppDictionarySDO: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetServiceSDO: fn(
            self: *const ISdoMachine,
            eDataStore: IASDATASTORE,
            bstrServiceName: BSTR,
            ppServiceSDO: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserSDO: fn(
            self: *const ISdoMachine,
            eDataStore: IASDATASTORE,
            bstrUserName: BSTR,
            ppUserSDO: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOSType: fn(
            self: *const ISdoMachine,
            eOSType: *IASOSTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDomainType: fn(
            self: *const ISdoMachine,
            eDomainType: *IASDOMAINTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDirectoryAvailable: fn(
            self: *const ISdoMachine,
            boolDirectoryAvailable: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttachedComputer: fn(
            self: *const ISdoMachine,
            bstrComputerName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSDOSchema: fn(
            self: *const ISdoMachine,
            ppSDOSchema: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoMachine_Attach(self: *const T, bstrComputerName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoMachine.VTable, self.vtable).Attach(@ptrCast(*const ISdoMachine, self), bstrComputerName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoMachine_GetDictionarySDO(self: *const T, ppDictionarySDO: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoMachine.VTable, self.vtable).GetDictionarySDO(@ptrCast(*const ISdoMachine, self), ppDictionarySDO);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoMachine_GetServiceSDO(self: *const T, eDataStore: IASDATASTORE, bstrServiceName: BSTR, ppServiceSDO: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoMachine.VTable, self.vtable).GetServiceSDO(@ptrCast(*const ISdoMachine, self), eDataStore, bstrServiceName, ppServiceSDO);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoMachine_GetUserSDO(self: *const T, eDataStore: IASDATASTORE, bstrUserName: BSTR, ppUserSDO: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoMachine.VTable, self.vtable).GetUserSDO(@ptrCast(*const ISdoMachine, self), eDataStore, bstrUserName, ppUserSDO);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoMachine_GetOSType(self: *const T, eOSType: *IASOSTYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoMachine.VTable, self.vtable).GetOSType(@ptrCast(*const ISdoMachine, self), eOSType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoMachine_GetDomainType(self: *const T, eDomainType: *IASDOMAINTYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoMachine.VTable, self.vtable).GetDomainType(@ptrCast(*const ISdoMachine, self), eDomainType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoMachine_IsDirectoryAvailable(self: *const T, boolDirectoryAvailable: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoMachine.VTable, self.vtable).IsDirectoryAvailable(@ptrCast(*const ISdoMachine, self), boolDirectoryAvailable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoMachine_GetAttachedComputer(self: *const T, bstrComputerName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoMachine.VTable, self.vtable).GetAttachedComputer(@ptrCast(*const ISdoMachine, self), bstrComputerName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoMachine_GetSDOSchema(self: *const T, ppSDOSchema: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoMachine.VTable, self.vtable).GetSDOSchema(@ptrCast(*const ISdoMachine, self), ppSDOSchema);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISdoMachine2_Value = @import("../zig.zig").Guid.initString("518E5FFE-D8CE-4F7E-A5DB-B40A35419D3B");
pub const IID_ISdoMachine2 = &IID_ISdoMachine2_Value;
pub const ISdoMachine2 = extern struct {
    pub const VTable = extern struct {
        base: ISdoMachine.VTable,
        GetTemplatesSDO: fn(
            self: *const ISdoMachine2,
            bstrServiceName: BSTR,
            ppTemplatesSDO: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableTemplates: fn(
            self: *const ISdoMachine2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncConfigAgainstTemplates: fn(
            self: *const ISdoMachine2,
            bstrServiceName: BSTR,
            ppConfigRoot: **IUnknown,
            ppTemplatesRoot: **IUnknown,
            bForcedSync: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportRemoteTemplates: fn(
            self: *const ISdoMachine2,
            pLocalTemplatesRoot: ?*IUnknown,
            bstrRemoteMachineName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reload: fn(
            self: *const ISdoMachine2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISdoMachine.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoMachine2_GetTemplatesSDO(self: *const T, bstrServiceName: BSTR, ppTemplatesSDO: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoMachine2.VTable, self.vtable).GetTemplatesSDO(@ptrCast(*const ISdoMachine2, self), bstrServiceName, ppTemplatesSDO);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoMachine2_EnableTemplates(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoMachine2.VTable, self.vtable).EnableTemplates(@ptrCast(*const ISdoMachine2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoMachine2_SyncConfigAgainstTemplates(self: *const T, bstrServiceName: BSTR, ppConfigRoot: **IUnknown, ppTemplatesRoot: **IUnknown, bForcedSync: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoMachine2.VTable, self.vtable).SyncConfigAgainstTemplates(@ptrCast(*const ISdoMachine2, self), bstrServiceName, ppConfigRoot, ppTemplatesRoot, bForcedSync);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoMachine2_ImportRemoteTemplates(self: *const T, pLocalTemplatesRoot: ?*IUnknown, bstrRemoteMachineName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoMachine2.VTable, self.vtable).ImportRemoteTemplates(@ptrCast(*const ISdoMachine2, self), pLocalTemplatesRoot, bstrRemoteMachineName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoMachine2_Reload(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoMachine2.VTable, self.vtable).Reload(@ptrCast(*const ISdoMachine2, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISdoServiceControl_Value = @import("../zig.zig").Guid.initString("479F6E74-49A2-11D2-8ECA-00C04FC2F519");
pub const IID_ISdoServiceControl = &IID_ISdoServiceControl_Value;
pub const ISdoServiceControl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        StartServiceA: fn(
            self: *const ISdoServiceControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopService: fn(
            self: *const ISdoServiceControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetServiceStatus: fn(
            self: *const ISdoServiceControl,
            status: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetService: fn(
            self: *const ISdoServiceControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoServiceControl_StartServiceA(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoServiceControl.VTable, self.vtable).StartServiceA(@ptrCast(*const ISdoServiceControl, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoServiceControl_StopService(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoServiceControl.VTable, self.vtable).StopService(@ptrCast(*const ISdoServiceControl, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoServiceControl_GetServiceStatus(self: *const T, status: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoServiceControl.VTable, self.vtable).GetServiceStatus(@ptrCast(*const ISdoServiceControl, self), status);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoServiceControl_ResetService(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoServiceControl.VTable, self.vtable).ResetService(@ptrCast(*const ISdoServiceControl, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISdo_Value = @import("../zig.zig").Guid.initString("56BC53DE-96DB-11D1-BF3F-000000000000");
pub const IID_ISdo = &IID_ISdo_Value;
pub const ISdo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetPropertyInfo: fn(
            self: *const ISdo,
            Id: i32,
            ppPropertyInfo: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const ISdo,
            Id: i32,
            pValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutProperty: fn(
            self: *const ISdo,
            Id: i32,
            pValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetProperty: fn(
            self: *const ISdo,
            Id: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Apply: fn(
            self: *const ISdo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Restore: fn(
            self: *const ISdo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISdo,
            ppEnumVARIANT: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdo_GetPropertyInfo(self: *const T, Id: i32, ppPropertyInfo: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdo.VTable, self.vtable).GetPropertyInfo(@ptrCast(*const ISdo, self), Id, ppPropertyInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdo_GetProperty(self: *const T, Id: i32, pValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdo.VTable, self.vtable).GetProperty(@ptrCast(*const ISdo, self), Id, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdo_PutProperty(self: *const T, Id: i32, pValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdo.VTable, self.vtable).PutProperty(@ptrCast(*const ISdo, self), Id, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdo_ResetProperty(self: *const T, Id: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdo.VTable, self.vtable).ResetProperty(@ptrCast(*const ISdo, self), Id);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdo_Apply(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdo.VTable, self.vtable).Apply(@ptrCast(*const ISdo, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdo_Restore(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdo.VTable, self.vtable).Restore(@ptrCast(*const ISdo, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdo_get__NewEnum(self: *const T, ppEnumVARIANT: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdo.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISdo, self), ppEnumVARIANT);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISdoCollection_Value = @import("../zig.zig").Guid.initString("56BC53E2-96DB-11D1-BF3F-000000000000");
pub const IID_ISdoCollection = &IID_ISdoCollection_Value;
pub const ISdoCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISdoCollection,
            pCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ISdoCollection,
            bstrName: BSTR,
            ppItem: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ISdoCollection,
            pItem: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAll: fn(
            self: *const ISdoCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reload: fn(
            self: *const ISdoCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsNameUnique: fn(
            self: *const ISdoCollection,
            bstrName: BSTR,
            pBool: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const ISdoCollection,
            Name: *VARIANT,
            pItem: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISdoCollection,
            ppEnumVARIANT: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoCollection_get_Count(self: *const T, pCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoCollection.VTable, self.vtable).get_Count(@ptrCast(*const ISdoCollection, self), pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoCollection_Add(self: *const T, bstrName: BSTR, ppItem: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoCollection.VTable, self.vtable).Add(@ptrCast(*const ISdoCollection, self), bstrName, ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoCollection_Remove(self: *const T, pItem: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoCollection.VTable, self.vtable).Remove(@ptrCast(*const ISdoCollection, self), pItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoCollection_RemoveAll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoCollection.VTable, self.vtable).RemoveAll(@ptrCast(*const ISdoCollection, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoCollection_Reload(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoCollection.VTable, self.vtable).Reload(@ptrCast(*const ISdoCollection, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoCollection_IsNameUnique(self: *const T, bstrName: BSTR, pBool: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoCollection.VTable, self.vtable).IsNameUnique(@ptrCast(*const ISdoCollection, self), bstrName, pBool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoCollection_Item(self: *const T, Name: *VARIANT, pItem: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoCollection.VTable, self.vtable).Item(@ptrCast(*const ISdoCollection, self), Name, pItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoCollection_get__NewEnum(self: *const T, ppEnumVARIANT: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoCollection.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISdoCollection, self), ppEnumVARIANT);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITemplateSdo_Value = @import("../zig.zig").Guid.initString("8AA85302-D2E2-4E20-8B1F-A571E437D6C9");
pub const IID_ITemplateSdo = &IID_ITemplateSdo_Value;
pub const ITemplateSdo = extern struct {
    pub const VTable = extern struct {
        base: ISdo.VTable,
        AddToCollection: fn(
            self: *const ITemplateSdo,
            bstrName: BSTR,
            pCollection: *IDispatch,
            ppItem: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddToSdo: fn(
            self: *const ITemplateSdo,
            bstrName: BSTR,
            pSdoTarget: *IDispatch,
            ppItem: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddToSdoAsProperty: fn(
            self: *const ITemplateSdo,
            pSdoTarget: *IDispatch,
            id: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISdo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITemplateSdo_AddToCollection(self: *const T, bstrName: BSTR, pCollection: *IDispatch, ppItem: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITemplateSdo.VTable, self.vtable).AddToCollection(@ptrCast(*const ITemplateSdo, self), bstrName, pCollection, ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITemplateSdo_AddToSdo(self: *const T, bstrName: BSTR, pSdoTarget: *IDispatch, ppItem: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITemplateSdo.VTable, self.vtable).AddToSdo(@ptrCast(*const ITemplateSdo, self), bstrName, pSdoTarget, ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITemplateSdo_AddToSdoAsProperty(self: *const T, pSdoTarget: *IDispatch, id: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITemplateSdo.VTable, self.vtable).AddToSdoAsProperty(@ptrCast(*const ITemplateSdo, self), pSdoTarget, id);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISdoDictionaryOld_Value = @import("../zig.zig").Guid.initString("D432E5F4-53D8-11D2-9A3A-00C04FB998AC");
pub const IID_ISdoDictionaryOld = &IID_ISdoDictionaryOld_Value;
pub const ISdoDictionaryOld = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        EnumAttributes: fn(
            self: *const ISdoDictionaryOld,
            Id: *VARIANT,
            pValues: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeInfo: fn(
            self: *const ISdoDictionaryOld,
            Id: ATTRIBUTEID,
            pInfoIDs: *VARIANT,
            pInfoValues: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumAttributeValues: fn(
            self: *const ISdoDictionaryOld,
            Id: ATTRIBUTEID,
            pValueIds: *VARIANT,
            pValuesDesc: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAttribute: fn(
            self: *const ISdoDictionaryOld,
            Id: ATTRIBUTEID,
            ppAttributeObject: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeID: fn(
            self: *const ISdoDictionaryOld,
            bstrAttributeName: BSTR,
            pId: *ATTRIBUTEID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoDictionaryOld_EnumAttributes(self: *const T, Id: *VARIANT, pValues: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoDictionaryOld.VTable, self.vtable).EnumAttributes(@ptrCast(*const ISdoDictionaryOld, self), Id, pValues);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoDictionaryOld_GetAttributeInfo(self: *const T, Id: ATTRIBUTEID, pInfoIDs: *VARIANT, pInfoValues: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoDictionaryOld.VTable, self.vtable).GetAttributeInfo(@ptrCast(*const ISdoDictionaryOld, self), Id, pInfoIDs, pInfoValues);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoDictionaryOld_EnumAttributeValues(self: *const T, Id: ATTRIBUTEID, pValueIds: *VARIANT, pValuesDesc: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoDictionaryOld.VTable, self.vtable).EnumAttributeValues(@ptrCast(*const ISdoDictionaryOld, self), Id, pValueIds, pValuesDesc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoDictionaryOld_CreateAttribute(self: *const T, Id: ATTRIBUTEID, ppAttributeObject: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoDictionaryOld.VTable, self.vtable).CreateAttribute(@ptrCast(*const ISdoDictionaryOld, self), Id, ppAttributeObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISdoDictionaryOld_GetAttributeID(self: *const T, bstrAttributeName: BSTR, pId: *ATTRIBUTEID) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISdoDictionaryOld.VTable, self.vtable).GetAttributeID(@ptrCast(*const ISdoDictionaryOld, self), bstrAttributeName, pId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const RADIUS_ATTRIBUTE_TYPE = extern enum(i32) {
    ratMinimum = 0,
    ratUserName = 1,
    ratUserPassword = 2,
    ratCHAPPassword = 3,
    ratNASIPAddress = 4,
    ratNASPort = 5,
    ratServiceType = 6,
    ratFramedProtocol = 7,
    ratFramedIPAddress = 8,
    ratFramedIPNetmask = 9,
    ratFramedRouting = 10,
    ratFilterId = 11,
    ratFramedMTU = 12,
    ratFramedCompression = 13,
    ratLoginIPHost = 14,
    ratLoginService = 15,
    ratLoginPort = 16,
    ratReplyMessage = 18,
    ratCallbackNumber = 19,
    ratCallbackId = 20,
    ratFramedRoute = 22,
    ratFramedIPXNetwork = 23,
    ratState = 24,
    ratClass = 25,
    ratVendorSpecific = 26,
    ratSessionTimeout = 27,
    ratIdleTimeout = 28,
    ratTerminationAction = 29,
    ratCalledStationId = 30,
    ratCallingStationId = 31,
    ratNASIdentifier = 32,
    ratProxyState = 33,
    ratLoginLATService = 34,
    ratLoginLATNode = 35,
    ratLoginLATGroup = 36,
    ratFramedAppleTalkLink = 37,
    ratFramedAppleTalkNetwork = 38,
    ratFramedAppleTalkZone = 39,
    ratAcctStatusType = 40,
    ratAcctDelayTime = 41,
    ratAcctInputOctets = 42,
    ratAcctOutputOctets = 43,
    ratAcctSessionId = 44,
    ratAcctAuthentic = 45,
    ratAcctSessionTime = 46,
    ratAcctInputPackets = 47,
    ratAcctOutputPackets = 48,
    ratAcctTerminationCause = 49,
    ratCHAPChallenge = 60,
    ratNASPortType = 61,
    ratPortLimit = 62,
    ratTunnelType = 64,
    ratMediumType = 65,
    ratTunnelPassword = 69,
    ratTunnelPrivateGroupID = 81,
    ratNASIPv6Address = 95,
    ratFramedInterfaceId = 96,
    ratFramedIPv6Prefix = 97,
    ratLoginIPv6Host = 98,
    ratFramedIPv6Route = 99,
    ratFramedIPv6Pool = 100,
    ratCode = 262,
    ratIdentifier = 263,
    ratAuthenticator = 264,
    ratSrcIPAddress = 265,
    ratSrcPort = 266,
    ratProvider = 267,
    ratStrippedUserName = 268,
    ratFQUserName = 269,
    ratPolicyName = 270,
    ratUniqueId = 271,
    ratExtensionState = 272,
    ratEAPTLV = 273,
    ratRejectReasonCode = 274,
    ratCRPPolicyName = 275,
    ratProviderName = 276,
    ratClearTextPassword = 277,
    ratSrcIPv6Address = 278,
    ratCertificateThumbprint = 279,
};
pub const ratMinimum = RADIUS_ATTRIBUTE_TYPE.ratMinimum;
pub const ratUserName = RADIUS_ATTRIBUTE_TYPE.ratUserName;
pub const ratUserPassword = RADIUS_ATTRIBUTE_TYPE.ratUserPassword;
pub const ratCHAPPassword = RADIUS_ATTRIBUTE_TYPE.ratCHAPPassword;
pub const ratNASIPAddress = RADIUS_ATTRIBUTE_TYPE.ratNASIPAddress;
pub const ratNASPort = RADIUS_ATTRIBUTE_TYPE.ratNASPort;
pub const ratServiceType = RADIUS_ATTRIBUTE_TYPE.ratServiceType;
pub const ratFramedProtocol = RADIUS_ATTRIBUTE_TYPE.ratFramedProtocol;
pub const ratFramedIPAddress = RADIUS_ATTRIBUTE_TYPE.ratFramedIPAddress;
pub const ratFramedIPNetmask = RADIUS_ATTRIBUTE_TYPE.ratFramedIPNetmask;
pub const ratFramedRouting = RADIUS_ATTRIBUTE_TYPE.ratFramedRouting;
pub const ratFilterId = RADIUS_ATTRIBUTE_TYPE.ratFilterId;
pub const ratFramedMTU = RADIUS_ATTRIBUTE_TYPE.ratFramedMTU;
pub const ratFramedCompression = RADIUS_ATTRIBUTE_TYPE.ratFramedCompression;
pub const ratLoginIPHost = RADIUS_ATTRIBUTE_TYPE.ratLoginIPHost;
pub const ratLoginService = RADIUS_ATTRIBUTE_TYPE.ratLoginService;
pub const ratLoginPort = RADIUS_ATTRIBUTE_TYPE.ratLoginPort;
pub const ratReplyMessage = RADIUS_ATTRIBUTE_TYPE.ratReplyMessage;
pub const ratCallbackNumber = RADIUS_ATTRIBUTE_TYPE.ratCallbackNumber;
pub const ratCallbackId = RADIUS_ATTRIBUTE_TYPE.ratCallbackId;
pub const ratFramedRoute = RADIUS_ATTRIBUTE_TYPE.ratFramedRoute;
pub const ratFramedIPXNetwork = RADIUS_ATTRIBUTE_TYPE.ratFramedIPXNetwork;
pub const ratState = RADIUS_ATTRIBUTE_TYPE.ratState;
pub const ratClass = RADIUS_ATTRIBUTE_TYPE.ratClass;
pub const ratVendorSpecific = RADIUS_ATTRIBUTE_TYPE.ratVendorSpecific;
pub const ratSessionTimeout = RADIUS_ATTRIBUTE_TYPE.ratSessionTimeout;
pub const ratIdleTimeout = RADIUS_ATTRIBUTE_TYPE.ratIdleTimeout;
pub const ratTerminationAction = RADIUS_ATTRIBUTE_TYPE.ratTerminationAction;
pub const ratCalledStationId = RADIUS_ATTRIBUTE_TYPE.ratCalledStationId;
pub const ratCallingStationId = RADIUS_ATTRIBUTE_TYPE.ratCallingStationId;
pub const ratNASIdentifier = RADIUS_ATTRIBUTE_TYPE.ratNASIdentifier;
pub const ratProxyState = RADIUS_ATTRIBUTE_TYPE.ratProxyState;
pub const ratLoginLATService = RADIUS_ATTRIBUTE_TYPE.ratLoginLATService;
pub const ratLoginLATNode = RADIUS_ATTRIBUTE_TYPE.ratLoginLATNode;
pub const ratLoginLATGroup = RADIUS_ATTRIBUTE_TYPE.ratLoginLATGroup;
pub const ratFramedAppleTalkLink = RADIUS_ATTRIBUTE_TYPE.ratFramedAppleTalkLink;
pub const ratFramedAppleTalkNetwork = RADIUS_ATTRIBUTE_TYPE.ratFramedAppleTalkNetwork;
pub const ratFramedAppleTalkZone = RADIUS_ATTRIBUTE_TYPE.ratFramedAppleTalkZone;
pub const ratAcctStatusType = RADIUS_ATTRIBUTE_TYPE.ratAcctStatusType;
pub const ratAcctDelayTime = RADIUS_ATTRIBUTE_TYPE.ratAcctDelayTime;
pub const ratAcctInputOctets = RADIUS_ATTRIBUTE_TYPE.ratAcctInputOctets;
pub const ratAcctOutputOctets = RADIUS_ATTRIBUTE_TYPE.ratAcctOutputOctets;
pub const ratAcctSessionId = RADIUS_ATTRIBUTE_TYPE.ratAcctSessionId;
pub const ratAcctAuthentic = RADIUS_ATTRIBUTE_TYPE.ratAcctAuthentic;
pub const ratAcctSessionTime = RADIUS_ATTRIBUTE_TYPE.ratAcctSessionTime;
pub const ratAcctInputPackets = RADIUS_ATTRIBUTE_TYPE.ratAcctInputPackets;
pub const ratAcctOutputPackets = RADIUS_ATTRIBUTE_TYPE.ratAcctOutputPackets;
pub const ratAcctTerminationCause = RADIUS_ATTRIBUTE_TYPE.ratAcctTerminationCause;
pub const ratCHAPChallenge = RADIUS_ATTRIBUTE_TYPE.ratCHAPChallenge;
pub const ratNASPortType = RADIUS_ATTRIBUTE_TYPE.ratNASPortType;
pub const ratPortLimit = RADIUS_ATTRIBUTE_TYPE.ratPortLimit;
pub const ratTunnelType = RADIUS_ATTRIBUTE_TYPE.ratTunnelType;
pub const ratMediumType = RADIUS_ATTRIBUTE_TYPE.ratMediumType;
pub const ratTunnelPassword = RADIUS_ATTRIBUTE_TYPE.ratTunnelPassword;
pub const ratTunnelPrivateGroupID = RADIUS_ATTRIBUTE_TYPE.ratTunnelPrivateGroupID;
pub const ratNASIPv6Address = RADIUS_ATTRIBUTE_TYPE.ratNASIPv6Address;
pub const ratFramedInterfaceId = RADIUS_ATTRIBUTE_TYPE.ratFramedInterfaceId;
pub const ratFramedIPv6Prefix = RADIUS_ATTRIBUTE_TYPE.ratFramedIPv6Prefix;
pub const ratLoginIPv6Host = RADIUS_ATTRIBUTE_TYPE.ratLoginIPv6Host;
pub const ratFramedIPv6Route = RADIUS_ATTRIBUTE_TYPE.ratFramedIPv6Route;
pub const ratFramedIPv6Pool = RADIUS_ATTRIBUTE_TYPE.ratFramedIPv6Pool;
pub const ratCode = RADIUS_ATTRIBUTE_TYPE.ratCode;
pub const ratIdentifier = RADIUS_ATTRIBUTE_TYPE.ratIdentifier;
pub const ratAuthenticator = RADIUS_ATTRIBUTE_TYPE.ratAuthenticator;
pub const ratSrcIPAddress = RADIUS_ATTRIBUTE_TYPE.ratSrcIPAddress;
pub const ratSrcPort = RADIUS_ATTRIBUTE_TYPE.ratSrcPort;
pub const ratProvider = RADIUS_ATTRIBUTE_TYPE.ratProvider;
pub const ratStrippedUserName = RADIUS_ATTRIBUTE_TYPE.ratStrippedUserName;
pub const ratFQUserName = RADIUS_ATTRIBUTE_TYPE.ratFQUserName;
pub const ratPolicyName = RADIUS_ATTRIBUTE_TYPE.ratPolicyName;
pub const ratUniqueId = RADIUS_ATTRIBUTE_TYPE.ratUniqueId;
pub const ratExtensionState = RADIUS_ATTRIBUTE_TYPE.ratExtensionState;
pub const ratEAPTLV = RADIUS_ATTRIBUTE_TYPE.ratEAPTLV;
pub const ratRejectReasonCode = RADIUS_ATTRIBUTE_TYPE.ratRejectReasonCode;
pub const ratCRPPolicyName = RADIUS_ATTRIBUTE_TYPE.ratCRPPolicyName;
pub const ratProviderName = RADIUS_ATTRIBUTE_TYPE.ratProviderName;
pub const ratClearTextPassword = RADIUS_ATTRIBUTE_TYPE.ratClearTextPassword;
pub const ratSrcIPv6Address = RADIUS_ATTRIBUTE_TYPE.ratSrcIPv6Address;
pub const ratCertificateThumbprint = RADIUS_ATTRIBUTE_TYPE.ratCertificateThumbprint;

pub const RADIUS_CODE = extern enum(i32) {
    rcUnknown = 0,
    rcAccessRequest = 1,
    rcAccessAccept = 2,
    rcAccessReject = 3,
    rcAccountingRequest = 4,
    rcAccountingResponse = 5,
    rcAccessChallenge = 11,
    rcDiscard = 256,
};
pub const rcUnknown = RADIUS_CODE.rcUnknown;
pub const rcAccessRequest = RADIUS_CODE.rcAccessRequest;
pub const rcAccessAccept = RADIUS_CODE.rcAccessAccept;
pub const rcAccessReject = RADIUS_CODE.rcAccessReject;
pub const rcAccountingRequest = RADIUS_CODE.rcAccountingRequest;
pub const rcAccountingResponse = RADIUS_CODE.rcAccountingResponse;
pub const rcAccessChallenge = RADIUS_CODE.rcAccessChallenge;
pub const rcDiscard = RADIUS_CODE.rcDiscard;

pub const RADIUS_AUTHENTICATION_PROVIDER = extern enum(i32) {
    rapUnknown = 0,
    rapUsersFile = 1,
    rapProxy = 2,
    rapWindowsNT = 3,
    rapMCIS = 4,
    rapODBC = 5,
    rapNone = 6,
};
pub const rapUnknown = RADIUS_AUTHENTICATION_PROVIDER.rapUnknown;
pub const rapUsersFile = RADIUS_AUTHENTICATION_PROVIDER.rapUsersFile;
pub const rapProxy = RADIUS_AUTHENTICATION_PROVIDER.rapProxy;
pub const rapWindowsNT = RADIUS_AUTHENTICATION_PROVIDER.rapWindowsNT;
pub const rapMCIS = RADIUS_AUTHENTICATION_PROVIDER.rapMCIS;
pub const rapODBC = RADIUS_AUTHENTICATION_PROVIDER.rapODBC;
pub const rapNone = RADIUS_AUTHENTICATION_PROVIDER.rapNone;

pub const RADIUS_REJECT_REASON_CODE = extern enum(i32) {
    rrrcUndefined = 0,
    rrrcAccountUnknown = 1,
    rrrcAccountDisabled = 2,
    rrrcAccountExpired = 3,
    rrrcAuthenticationFailure = 4,
};
pub const rrrcUndefined = RADIUS_REJECT_REASON_CODE.rrrcUndefined;
pub const rrrcAccountUnknown = RADIUS_REJECT_REASON_CODE.rrrcAccountUnknown;
pub const rrrcAccountDisabled = RADIUS_REJECT_REASON_CODE.rrrcAccountDisabled;
pub const rrrcAccountExpired = RADIUS_REJECT_REASON_CODE.rrrcAccountExpired;
pub const rrrcAuthenticationFailure = RADIUS_REJECT_REASON_CODE.rrrcAuthenticationFailure;

pub const RADIUS_DATA_TYPE = extern enum(i32) {
    rdtUnknown = 0,
    rdtString = 1,
    rdtAddress = 2,
    rdtInteger = 3,
    rdtTime = 4,
    rdtIpv6Address = 5,
};
pub const rdtUnknown = RADIUS_DATA_TYPE.rdtUnknown;
pub const rdtString = RADIUS_DATA_TYPE.rdtString;
pub const rdtAddress = RADIUS_DATA_TYPE.rdtAddress;
pub const rdtInteger = RADIUS_DATA_TYPE.rdtInteger;
pub const rdtTime = RADIUS_DATA_TYPE.rdtTime;
pub const rdtIpv6Address = RADIUS_DATA_TYPE.rdtIpv6Address;

pub const RADIUS_ATTRIBUTE = extern struct {
    dwAttrType: u32,
    fDataType: RADIUS_DATA_TYPE,
    cbDataLength: u32,
    Anonymous: RADIUS_ATTRIBUTE._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const RADIUS_VSA_FORMAT = extern struct {
    VendorId: [4]u8,
    VendorType: u8,
    VendorLength: u8,
    AttributeSpecific: [1]u8,
};

pub const RADIUS_ACTION = extern enum(i32) {
    raContinue = 0,
    raReject = 1,
    raAccept = 2,
};
pub const raContinue = RADIUS_ACTION.raContinue;
pub const raReject = RADIUS_ACTION.raReject;
pub const raAccept = RADIUS_ACTION.raAccept;

pub const PRADIUS_EXTENSION_INIT = fn(
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRADIUS_EXTENSION_TERM = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const PRADIUS_EXTENSION_PROCESS = fn(
    pAttrs: *const RADIUS_ATTRIBUTE,
    pfAction: *RADIUS_ACTION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRADIUS_EXTENSION_PROCESS_EX = fn(
    pInAttrs: *const RADIUS_ATTRIBUTE,
    pOutAttrs: **RADIUS_ATTRIBUTE,
    pfAction: *RADIUS_ACTION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRADIUS_EXTENSION_FREE_ATTRIBUTES = fn(
    pAttrs: *RADIUS_ATTRIBUTE,
) callconv(@import("std").os.windows.WINAPI) void;

pub const RADIUS_EXTENSION_POINT = extern enum(i32) {
    repAuthentication = 0,
    repAuthorization = 1,
};
pub const repAuthentication = RADIUS_EXTENSION_POINT.repAuthentication;
pub const repAuthorization = RADIUS_EXTENSION_POINT.repAuthorization;

pub const RADIUS_ATTRIBUTE_ARRAY = extern struct {
    cbSize: u32,
    Add: ?*c_void,
    AttributeAt: *const *const *const *const *const *const *const *const *const *const RADIUS_ATTRIBUTE,
    GetSize: ?*c_void,
    InsertAt: ?*c_void,
    RemoveAt: ?*c_void,
    SetAt: ?*c_void,
};

pub const RADIUS_EXTENSION_CONTROL_BLOCK = extern struct {
    cbSize: u32,
    dwVersion: u32,
    repPoint: RADIUS_EXTENSION_POINT,
    rcRequestType: RADIUS_CODE,
    rcResponseType: RADIUS_CODE,
    GetRequest: ?*c_void,
    GetResponse: ?*c_void,
    SetResponseType: ?*c_void,
};

pub const PRADIUS_EXTENSION_PROCESS_2 = fn(
    pECB: *RADIUS_EXTENSION_CONTROL_BLOCK,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (5)
//--------------------------------------------------------------------------------
const IDispatch = @import("automation.zig").IDispatch;
const BSTR = @import("automation.zig").BSTR;
const VARIANT = @import("automation.zig").VARIANT;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = PRADIUS_EXTENSION_INIT;
    _ = PRADIUS_EXTENSION_TERM;
    _ = PRADIUS_EXTENSION_PROCESS;
    _ = PRADIUS_EXTENSION_PROCESS_EX;
    _ = PRADIUS_EXTENSION_FREE_ATTRIBUTES;
    _ = PRADIUS_EXTENSION_PROCESS_2;

    const constant_export_count = 0;
    const type_export_count = 65;
    const enum_value_export_count = 572;
    const com_iface_id_export_count = 7;
    const com_class_id_export_count = 1;
    const func_export_count = 0;
    const unicode_alias_count = 0;
    const import_count = 5;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

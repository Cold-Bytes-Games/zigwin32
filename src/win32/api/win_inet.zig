//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (107)
//--------------------------------------------------------------------------------
pub const HTTP_VERSION_INFO = extern struct {
    dwMajorVersion: u32,
    dwMinorVersion: u32,
};

pub const INTERNET_SCHEME = extern enum(i32) {
    PARTIAL = -2,
    UNKNOWN = -1,
    DEFAULT = 0,
    FTP = 1,
    GOPHER = 2,
    HTTP = 3,
    HTTPS = 4,
    FILE = 5,
    NEWS = 6,
    MAILTO = 7,
    SOCKS = 8,
    JAVASCRIPT = 9,
    VBSCRIPT = 10,
    RES = 11,
    FIRST = 1,
    LAST = 11,
};
pub const INTERNET_SCHEME_PARTIAL = INTERNET_SCHEME.PARTIAL;
pub const INTERNET_SCHEME_UNKNOWN = INTERNET_SCHEME.UNKNOWN;
pub const INTERNET_SCHEME_DEFAULT = INTERNET_SCHEME.DEFAULT;
pub const INTERNET_SCHEME_FTP = INTERNET_SCHEME.FTP;
pub const INTERNET_SCHEME_GOPHER = INTERNET_SCHEME.GOPHER;
pub const INTERNET_SCHEME_HTTP = INTERNET_SCHEME.HTTP;
pub const INTERNET_SCHEME_HTTPS = INTERNET_SCHEME.HTTPS;
pub const INTERNET_SCHEME_FILE = INTERNET_SCHEME.FILE;
pub const INTERNET_SCHEME_NEWS = INTERNET_SCHEME.NEWS;
pub const INTERNET_SCHEME_MAILTO = INTERNET_SCHEME.MAILTO;
pub const INTERNET_SCHEME_SOCKS = INTERNET_SCHEME.SOCKS;
pub const INTERNET_SCHEME_JAVASCRIPT = INTERNET_SCHEME.JAVASCRIPT;
pub const INTERNET_SCHEME_VBSCRIPT = INTERNET_SCHEME.VBSCRIPT;
pub const INTERNET_SCHEME_RES = INTERNET_SCHEME.RES;
pub const INTERNET_SCHEME_FIRST = INTERNET_SCHEME.FIRST;
pub const INTERNET_SCHEME_LAST = INTERNET_SCHEME.LAST;

pub const INTERNET_ASYNC_RESULT = extern struct {
    dwResult: ?*c_void,
    dwError: u32,
};

pub const INTERNET_DIAGNOSTIC_SOCKET_INFO = extern struct {
    Socket: ?*c_void,
    SourcePort: u32,
    DestPort: u32,
    Flags: u32,
};

pub const INTERNET_PROXY_INFO = extern struct {
    dwAccessType: u32,
    lpszProxy: *i8,
    lpszProxyBypass: *i8,
};

pub const INTERNET_PER_CONN_OPTIONA = extern struct {
    dwOption: u32,
    Value: INTERNET_PER_CONN_OPTIONA._Value_e__Union,
    const _Value_e__Union = u32; // TODO: generate this nested type!
};

pub const INTERNET_PER_CONN_OPTIONW = extern struct {
    dwOption: u32,
    Value: INTERNET_PER_CONN_OPTIONW._Value_e__Union,
    const _Value_e__Union = u32; // TODO: generate this nested type!
};

pub const INTERNET_PER_CONN_OPTION_LISTA = extern struct {
    dwSize: u32,
    pszConnection: PSTR,
    dwOptionCount: u32,
    dwOptionError: u32,
    pOptions: *INTERNET_PER_CONN_OPTIONA,
};

pub const INTERNET_PER_CONN_OPTION_LISTW = extern struct {
    dwSize: u32,
    pszConnection: PWSTR,
    dwOptionCount: u32,
    dwOptionError: u32,
    pOptions: *INTERNET_PER_CONN_OPTIONW,
};

pub const INTERNET_VERSION_INFO = extern struct {
    dwMajorVersion: u32,
    dwMinorVersion: u32,
};

pub const INTERNET_CONNECTED_INFO = extern struct {
    dwConnectedState: u32,
    dwFlags: u32,
};

pub const URL_COMPONENTSA = extern struct {
    dwStructSize: u32,
    lpszScheme: PSTR,
    dwSchemeLength: u32,
    nScheme: INTERNET_SCHEME,
    lpszHostName: PSTR,
    dwHostNameLength: u32,
    nPort: u16,
    lpszUserName: PSTR,
    dwUserNameLength: u32,
    lpszPassword: PSTR,
    dwPasswordLength: u32,
    lpszUrlPath: PSTR,
    dwUrlPathLength: u32,
    lpszExtraInfo: PSTR,
    dwExtraInfoLength: u32,
};

pub const URL_COMPONENTSW = extern struct {
    dwStructSize: u32,
    lpszScheme: PWSTR,
    dwSchemeLength: u32,
    nScheme: INTERNET_SCHEME,
    lpszHostName: PWSTR,
    dwHostNameLength: u32,
    nPort: u16,
    lpszUserName: PWSTR,
    dwUserNameLength: u32,
    lpszPassword: PWSTR,
    dwPasswordLength: u32,
    lpszUrlPath: PWSTR,
    dwUrlPathLength: u32,
    lpszExtraInfo: PWSTR,
    dwExtraInfoLength: u32,
};

pub const INTERNET_CERTIFICATE_INFO = extern struct {
    ftExpiry: FILETIME,
    ftStart: FILETIME,
    lpszSubjectInfo: *i8,
    lpszIssuerInfo: *i8,
    lpszProtocolName: *i8,
    lpszSignatureAlgName: *i8,
    lpszEncryptionAlgName: *i8,
    dwKeySize: u32,
};

pub const INTERNET_BUFFERSA = extern struct {
    dwStructSize: u32,
    Next: *INTERNET_BUFFERSA,
    lpcszHeader: [*:0]const u8,
    dwHeadersLength: u32,
    dwHeadersTotal: u32,
    lpvBuffer: *c_void,
    dwBufferLength: u32,
    dwBufferTotal: u32,
    dwOffsetLow: u32,
    dwOffsetHigh: u32,
};

pub const INTERNET_BUFFERSW = extern struct {
    dwStructSize: u32,
    Next: *INTERNET_BUFFERSW,
    lpcszHeader: [*:0]const u16,
    dwHeadersLength: u32,
    dwHeadersTotal: u32,
    lpvBuffer: *c_void,
    dwBufferLength: u32,
    dwBufferTotal: u32,
    dwOffsetLow: u32,
    dwOffsetHigh: u32,
};

pub const INTERNET_STATUS_CALLBACK = fn(
    hInternet: *c_void,
    dwContext: ?*c_void,
    dwInternetStatus: u32,
    lpvStatusInformation: ?*c_void,
    dwStatusInformationLength: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LPINTERNET_STATUS_CALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const InternetCookieState = extern enum(i32) {
    COOKIE_STATE_UNKNOWN = 0,
    COOKIE_STATE_ACCEPT = 1,
    COOKIE_STATE_PROMPT = 2,
    COOKIE_STATE_LEASH = 3,
    COOKIE_STATE_DOWNGRADE = 4,
    COOKIE_STATE_REJECT = 5,
    COOKIE_STATE_MAX = 5,
};
pub const COOKIE_STATE_UNKNOWN = InternetCookieState.COOKIE_STATE_UNKNOWN;
pub const COOKIE_STATE_ACCEPT = InternetCookieState.COOKIE_STATE_ACCEPT;
pub const COOKIE_STATE_PROMPT = InternetCookieState.COOKIE_STATE_PROMPT;
pub const COOKIE_STATE_LEASH = InternetCookieState.COOKIE_STATE_LEASH;
pub const COOKIE_STATE_DOWNGRADE = InternetCookieState.COOKIE_STATE_DOWNGRADE;
pub const COOKIE_STATE_REJECT = InternetCookieState.COOKIE_STATE_REJECT;
pub const COOKIE_STATE_MAX = InternetCookieState.COOKIE_STATE_MAX;

pub const IncomingCookieState = extern struct {
    cSession: i32,
    cPersistent: i32,
    cAccepted: i32,
    cLeashed: i32,
    cDowngraded: i32,
    cBlocked: i32,
    pszLocation: *const i8,
};

pub const OutgoingCookieState = extern struct {
    cSent: i32,
    cSuppressed: i32,
    pszLocation: *const i8,
};

pub const InternetCookieHistory = extern struct {
    fAccepted: BOOL,
    fLeashed: BOOL,
    fDowngraded: BOOL,
    fRejected: BOOL,
};

pub const CookieDecision = extern struct {
    dwCookieState: u32,
    fAllowSession: BOOL,
};

pub const GOPHER_FIND_DATAA = extern struct {
    DisplayString: [129]i8,
    GopherType: u32,
    SizeLow: u32,
    SizeHigh: u32,
    LastModificationTime: FILETIME,
    Locator: [654]i8,
};

pub const GOPHER_FIND_DATAW = extern struct {
    DisplayString: [129]u16,
    GopherType: u32,
    SizeLow: u32,
    SizeHigh: u32,
    LastModificationTime: FILETIME,
    Locator: [654]u16,
};

pub const GOPHER_ADMIN_ATTRIBUTE_TYPE = extern struct {
    Comment: *i8,
    EmailAddress: *i8,
};

pub const GOPHER_MOD_DATE_ATTRIBUTE_TYPE = extern struct {
    DateAndTime: FILETIME,
};

pub const GOPHER_TTL_ATTRIBUTE_TYPE = extern struct {
    Ttl: u32,
};

pub const GOPHER_SCORE_ATTRIBUTE_TYPE = extern struct {
    Score: i32,
};

pub const GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE = extern struct {
    LowerBound: i32,
    UpperBound: i32,
};

pub const GOPHER_SITE_ATTRIBUTE_TYPE = extern struct {
    Site: *i8,
};

pub const GOPHER_ORGANIZATION_ATTRIBUTE_TYPE = extern struct {
    Organization: *i8,
};

pub const GOPHER_LOCATION_ATTRIBUTE_TYPE = extern struct {
    Location: *i8,
};

pub const GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE = extern struct {
    DegreesNorth: i32,
    MinutesNorth: i32,
    SecondsNorth: i32,
    DegreesEast: i32,
    MinutesEast: i32,
    SecondsEast: i32,
};

pub const GOPHER_TIMEZONE_ATTRIBUTE_TYPE = extern struct {
    Zone: i32,
};

pub const GOPHER_PROVIDER_ATTRIBUTE_TYPE = extern struct {
    Provider: *i8,
};

pub const GOPHER_VERSION_ATTRIBUTE_TYPE = extern struct {
    Version: *i8,
};

pub const GOPHER_ABSTRACT_ATTRIBUTE_TYPE = extern struct {
    ShortAbstract: *i8,
    AbstractFile: *i8,
};

pub const GOPHER_VIEW_ATTRIBUTE_TYPE = extern struct {
    ContentType: *i8,
    Language: *i8,
    Size: u32,
};

pub const GOPHER_VERONICA_ATTRIBUTE_TYPE = extern struct {
    TreeWalk: BOOL,
};

pub const GOPHER_ASK_ATTRIBUTE_TYPE = extern struct {
    QuestionType: *i8,
    QuestionText: *i8,
};

pub const GOPHER_UNKNOWN_ATTRIBUTE_TYPE = extern struct {
    Text: *i8,
};

pub const GOPHER_ATTRIBUTE_TYPE = extern struct {
    CategoryId: u32,
    AttributeId: u32,
    AttributeType: GOPHER_ATTRIBUTE_TYPE._AttributeType_e__Union,
    const _AttributeType_e__Union = u32; // TODO: generate this nested type!
};

pub const GOPHER_ATTRIBUTE_ENUMERATOR = fn(
    lpAttributeInfo: *GOPHER_ATTRIBUTE_TYPE,
    dwError: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const INTERNET_COOKIE2 = extern struct {
    pwszName: PWSTR,
    pwszValue: PWSTR,
    pwszDomain: PWSTR,
    pwszPath: PWSTR,
    dwFlags: u32,
    ftExpires: FILETIME,
    fExpiresSet: BOOL,
};

pub const PFN_AUTH_NOTIFY = fn(
    param0: ?*c_void,
    param1: u32,
    param2: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const INTERNET_AUTH_NOTIFY_DATA = extern struct {
    cbStruct: u32,
    dwOptions: u32,
    pfnNotify: PFN_AUTH_NOTIFY,
    dwContext: ?*c_void,
};

pub const INTERNET_CACHE_ENTRY_INFOA = extern struct {
    dwStructSize: u32,
    lpszSourceUrlName: PSTR,
    lpszLocalFileName: PSTR,
    CacheEntryType: u32,
    dwUseCount: u32,
    dwHitRate: u32,
    dwSizeLow: u32,
    dwSizeHigh: u32,
    LastModifiedTime: FILETIME,
    ExpireTime: FILETIME,
    LastAccessTime: FILETIME,
    LastSyncTime: FILETIME,
    lpHeaderInfo: PSTR,
    dwHeaderInfoSize: u32,
    lpszFileExtension: PSTR,
    Anonymous: INTERNET_CACHE_ENTRY_INFOA._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const INTERNET_CACHE_ENTRY_INFOW = extern struct {
    dwStructSize: u32,
    lpszSourceUrlName: PWSTR,
    lpszLocalFileName: PWSTR,
    CacheEntryType: u32,
    dwUseCount: u32,
    dwHitRate: u32,
    dwSizeLow: u32,
    dwSizeHigh: u32,
    LastModifiedTime: FILETIME,
    ExpireTime: FILETIME,
    LastAccessTime: FILETIME,
    LastSyncTime: FILETIME,
    lpHeaderInfo: PWSTR,
    dwHeaderInfoSize: u32,
    lpszFileExtension: PWSTR,
    Anonymous: INTERNET_CACHE_ENTRY_INFOW._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const INTERNET_CACHE_TIMESTAMPS = extern struct {
    ftExpires: FILETIME,
    ftLastModified: FILETIME,
};

pub const INTERNET_CACHE_GROUP_INFOA = extern struct {
    dwGroupSize: u32,
    dwGroupFlags: u32,
    dwGroupType: u32,
    dwDiskUsage: u32,
    dwDiskQuota: u32,
    dwOwnerStorage: [4]u32,
    szGroupName: [120]i8,
};

pub const INTERNET_CACHE_GROUP_INFOW = extern struct {
    dwGroupSize: u32,
    dwGroupFlags: u32,
    dwGroupType: u32,
    dwDiskUsage: u32,
    dwDiskQuota: u32,
    dwOwnerStorage: [4]u32,
    szGroupName: [120]u16,
};

pub const AutoProxyHelperVtbl = extern struct {
    IsResolvable: **********BOOL,
    GetIPAddress: ?*c_void,
    ResolveHostName: ?*c_void,
    IsInNet: **********BOOL,
    IsResolvableEx: **********BOOL,
    GetIPAddressEx: ?*c_void,
    ResolveHostNameEx: ?*c_void,
    IsInNetEx: **********BOOL,
    SortIpList: ?*c_void,
};

pub const AUTO_PROXY_SCRIPT_BUFFER = extern struct {
    dwStructSize: u32,
    lpszScriptBuffer: PSTR,
    dwScriptBufferSize: u32,
};

pub const AutoProxyHelperFunctions = extern struct {
    lpVtbl: *const AutoProxyHelperVtbl,
};

pub const pfnInternetInitializeAutoProxyDll = fn(
    dwVersion: u32,
    lpszDownloadedTempFile: PSTR,
    lpszMime: PSTR,
    lpAutoProxyCallbacks: *AutoProxyHelperFunctions,
    lpAutoProxyScriptBuffer: *AUTO_PROXY_SCRIPT_BUFFER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const pfnInternetDeInitializeAutoProxyDll = fn(
    lpszMime: PSTR,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const pfnInternetGetProxyInfo = fn(
    lpszUrl: [*:0]const u8,
    dwUrlLength: u32,
    lpszUrlHostName: PSTR,
    dwUrlHostNameLength: u32,
    lplpszProxyHostName: *PSTR,
    lpdwProxyHostNameLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const WPAD_CACHE_DELETE = extern enum(i32) {
    CURRENT = 0,
    ALL = 1,
};
pub const WPAD_CACHE_DELETE_CURRENT = WPAD_CACHE_DELETE.CURRENT;
pub const WPAD_CACHE_DELETE_ALL = WPAD_CACHE_DELETE.ALL;

pub const PFN_DIAL_HANDLER = fn(
    param0: HWND,
    param1: [*:0]const u8,
    param2: u32,
    param3: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

const IID_IDialEventSink_Value = @import("../zig.zig").Guid.initString("2D86F4FF-6E2D-4488-B2E9-6934AFD41BEA");
pub const IID_IDialEventSink = &IID_IDialEventSink_Value;
pub const IDialEventSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnEvent: fn(
            self: *const IDialEventSink,
            dwEvent: u32,
            dwStatus: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialEventSink_OnEvent(self: *const T, dwEvent: u32, dwStatus: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialEventSink.VTable, self.vtable).OnEvent(@ptrCast(*const IDialEventSink, self), dwEvent, dwStatus);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDialEngine_Value = @import("../zig.zig").Guid.initString("39FD782B-7905-40D5-9148-3C9B190423D5");
pub const IID_IDialEngine = &IID_IDialEngine_Value;
pub const IDialEngine = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IDialEngine,
            pwzConnectoid: [*:0]const u16,
            pIDES: *IDialEventSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IDialEngine,
            pwzProperty: [*:0]const u16,
            pwzValue: PWSTR,
            dwBufSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IDialEngine,
            pwzProperty: [*:0]const u16,
            pwzValue: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Dial: fn(
            self: *const IDialEngine,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HangUp: fn(
            self: *const IDialEngine,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnectedState: fn(
            self: *const IDialEngine,
            pdwState: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnectHandle: fn(
            self: *const IDialEngine,
            pdwHandle: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialEngine_Initialize(self: *const T, pwzConnectoid: [*:0]const u16, pIDES: *IDialEventSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialEngine.VTable, self.vtable).Initialize(@ptrCast(*const IDialEngine, self), pwzConnectoid, pIDES);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialEngine_GetProperty(self: *const T, pwzProperty: [*:0]const u16, pwzValue: PWSTR, dwBufSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialEngine.VTable, self.vtable).GetProperty(@ptrCast(*const IDialEngine, self), pwzProperty, pwzValue, dwBufSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialEngine_SetProperty(self: *const T, pwzProperty: [*:0]const u16, pwzValue: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialEngine.VTable, self.vtable).SetProperty(@ptrCast(*const IDialEngine, self), pwzProperty, pwzValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialEngine_Dial(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialEngine.VTable, self.vtable).Dial(@ptrCast(*const IDialEngine, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialEngine_HangUp(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialEngine.VTable, self.vtable).HangUp(@ptrCast(*const IDialEngine, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialEngine_GetConnectedState(self: *const T, pdwState: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialEngine.VTable, self.vtable).GetConnectedState(@ptrCast(*const IDialEngine, self), pdwState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialEngine_GetConnectHandle(self: *const T, pdwHandle: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialEngine.VTable, self.vtable).GetConnectHandle(@ptrCast(*const IDialEngine, self), pdwHandle);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDialBranding_Value = @import("../zig.zig").Guid.initString("8AECAFA9-4306-43CC-8C5A-765F2979CC16");
pub const IID_IDialBranding = &IID_IDialBranding_Value;
pub const IDialBranding = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IDialBranding,
            pwzConnectoid: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitmap: fn(
            self: *const IDialBranding,
            dwIndex: u32,
            phBitmap: *HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialBranding_Initialize(self: *const T, pwzConnectoid: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialBranding.VTable, self.vtable).Initialize(@ptrCast(*const IDialBranding, self), pwzConnectoid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialBranding_GetBitmap(self: *const T, dwIndex: u32, phBitmap: *HBITMAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialBranding.VTable, self.vtable).GetBitmap(@ptrCast(*const IDialBranding, self), dwIndex, phBitmap);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const INTERNET_PREFETCH_STATUS = extern struct {
    dwStatus: u32,
    dwSize: u32,
};

pub const INTERNET_SECURITY_INFO = extern struct {
    dwSize: u32,
    pCertificate: *CERT_CONTEXT,
    pcCertChain: *CERT_CHAIN_CONTEXT,
    connectionInfo: SecPkgContext_ConnectionInfo,
    cipherInfo: SecPkgContext_CipherInfo,
    pcUnverifiedCertChain: *CERT_CHAIN_CONTEXT,
    channelBindingToken: SecPkgContext_Bindings,
};

pub const INTERNET_SECURITY_CONNECTION_INFO = extern struct {
    dwSize: u32,
    fSecure: BOOL,
    connectionInfo: SecPkgContext_ConnectionInfo,
    cipherInfo: SecPkgContext_CipherInfo,
};

pub const FORTCMD = extern enum(i32) {
    LOGON = 1,
    LOGOFF = 2,
    CHG_PERSONALITY = 3,
};
pub const FORTCMD_LOGON = FORTCMD.LOGON;
pub const FORTCMD_LOGOFF = FORTCMD.LOGOFF;
pub const FORTCMD_CHG_PERSONALITY = FORTCMD.CHG_PERSONALITY;

pub const FORTSTAT = extern enum(i32) {
    INSTALLED = 1,
    LOGGEDON = 2,
};
pub const FORTSTAT_INSTALLED = FORTSTAT.INSTALLED;
pub const FORTSTAT_LOGGEDON = FORTSTAT.LOGGEDON;

pub const INTERNET_DOWNLOAD_MODE_HANDLE = extern struct {
    pcwszFileName: [*:0]const u16,
    phFile: *HANDLE,
};

pub const REQUEST_TIMES = extern enum(i32) {
    NameResolutionStart = 0,
    NameResolutionEnd = 1,
    ConnectionEstablishmentStart = 2,
    ConnectionEstablishmentEnd = 3,
    TLSHandshakeStart = 4,
    TLSHandshakeEnd = 5,
    HttpRequestTimeMax = 32,
};
pub const NameResolutionStart = REQUEST_TIMES.NameResolutionStart;
pub const NameResolutionEnd = REQUEST_TIMES.NameResolutionEnd;
pub const ConnectionEstablishmentStart = REQUEST_TIMES.ConnectionEstablishmentStart;
pub const ConnectionEstablishmentEnd = REQUEST_TIMES.ConnectionEstablishmentEnd;
pub const TLSHandshakeStart = REQUEST_TIMES.TLSHandshakeStart;
pub const TLSHandshakeEnd = REQUEST_TIMES.TLSHandshakeEnd;
pub const HttpRequestTimeMax = REQUEST_TIMES.HttpRequestTimeMax;

pub const HTTP_REQUEST_TIMES = extern struct {
    cTimes: u32,
    rgTimes: [32]u64,
};

pub const INTERNET_SERVER_CONNECTION_STATE = extern struct {
    lpcwszHostName: [*:0]const u16,
    fProxy: BOOL,
    dwCounter: u32,
    dwConnectionLimit: u32,
    dwAvailableCreates: u32,
    dwAvailableKeepAlives: u32,
    dwActiveConnections: u32,
    dwWaiters: u32,
};

pub const INTERNET_END_BROWSER_SESSION_DATA = extern struct {
    lpBuffer: *c_void,
    dwBufferLength: u32,
};

pub const INTERNET_CALLBACK_COOKIE = extern struct {
    pcwszName: [*:0]const u16,
    pcwszValue: [*:0]const u16,
    pcwszDomain: [*:0]const u16,
    pcwszPath: [*:0]const u16,
    ftExpires: FILETIME,
    dwFlags: u32,
};

pub const INTERNET_CREDENTIALS = extern struct {
    lpcwszHostName: [*:0]const u16,
    dwPort: u32,
    dwScheme: u32,
    lpcwszUrl: [*:0]const u16,
    lpcwszRealm: [*:0]const u16,
    fAuthIdentity: BOOL,
    Anonymous: INTERNET_CREDENTIALS._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const HTTP_PUSH_WAIT_HANDLE__ = extern struct {
    unused: i32,
};

pub const HTTP_PUSH_TRANSPORT_SETTING = extern struct {
    TransportSettingId: Guid,
    BrokerEventId: Guid,
};

pub const HTTP_PUSH_NOTIFICATION_STATUS = extern struct {
    ChannelStatusValid: BOOL,
    ChannelStatus: u32,
};

pub const HTTP_PUSH_WAIT_TYPE = extern enum(i32) {
    HttpPushWaitEnableComplete = 0,
    HttpPushWaitReceiveComplete = 1,
    HttpPushWaitSendComplete = 2,
};
pub const HttpPushWaitEnableComplete = HTTP_PUSH_WAIT_TYPE.HttpPushWaitEnableComplete;
pub const HttpPushWaitReceiveComplete = HTTP_PUSH_WAIT_TYPE.HttpPushWaitReceiveComplete;
pub const HttpPushWaitSendComplete = HTTP_PUSH_WAIT_TYPE.HttpPushWaitSendComplete;

pub const INTERNET_COOKIE = extern struct {
    cbSize: u32,
    pszName: PSTR,
    pszData: PSTR,
    pszDomain: PSTR,
    pszPath: PSTR,
    pftExpires: *FILETIME,
    dwFlags: u32,
    pszUrl: PSTR,
    pszP3PPolicy: PSTR,
};

pub const COOKIE_DLG_INFO = extern struct {
    pszServer: PWSTR,
    pic: *INTERNET_COOKIE,
    dwStopWarning: u32,
    cx: i32,
    cy: i32,
    pszHeader: PWSTR,
    dwOperation: u32,
};

pub const INTERNET_CACHE_CONFIG_PATH_ENTRYA = extern struct {
    CachePath: [260]i8,
    dwCacheSize: u32,
};

pub const INTERNET_CACHE_CONFIG_PATH_ENTRYW = extern struct {
    CachePath: [260]u16,
    dwCacheSize: u32,
};

pub const INTERNET_CACHE_CONFIG_INFOA = extern struct {
    dwStructSize: u32,
    dwContainer: u32,
    dwQuota: u32,
    dwReserved4: u32,
    fPerUser: BOOL,
    dwSyncMode: u32,
    dwNumCachePaths: u32,
    Anonymous: INTERNET_CACHE_CONFIG_INFOA._Anonymous_e__Union,
    dwNormalUsage: u32,
    dwExemptUsage: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const INTERNET_CACHE_CONFIG_INFOW = extern struct {
    dwStructSize: u32,
    dwContainer: u32,
    dwQuota: u32,
    dwReserved4: u32,
    fPerUser: BOOL,
    dwSyncMode: u32,
    dwNumCachePaths: u32,
    Anonymous: INTERNET_CACHE_CONFIG_INFOW._Anonymous_e__Union,
    dwNormalUsage: u32,
    dwExemptUsage: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const INTERNET_CACHE_CONTAINER_INFOA = extern struct {
    dwCacheVersion: u32,
    lpszName: PSTR,
    lpszCachePrefix: PSTR,
    lpszVolumeLabel: PSTR,
    lpszVolumeTitle: PSTR,
};

pub const INTERNET_CACHE_CONTAINER_INFOW = extern struct {
    dwCacheVersion: u32,
    lpszName: PWSTR,
    lpszCachePrefix: PWSTR,
    lpszVolumeLabel: PWSTR,
    lpszVolumeTitle: PWSTR,
};

pub const WININET_SYNC_MODE = extern enum(i32) {
    NEVER = 0,
    ON_EXPIRY = 1,
    ONCE_PER_SESSION = 2,
    ALWAYS = 3,
    AUTOMATIC = 4,
    DEFAULT = 4,
};
pub const WININET_SYNC_MODE_NEVER = WININET_SYNC_MODE.NEVER;
pub const WININET_SYNC_MODE_ON_EXPIRY = WININET_SYNC_MODE.ON_EXPIRY;
pub const WININET_SYNC_MODE_ONCE_PER_SESSION = WININET_SYNC_MODE.ONCE_PER_SESSION;
pub const WININET_SYNC_MODE_ALWAYS = WININET_SYNC_MODE.ALWAYS;
pub const WININET_SYNC_MODE_AUTOMATIC = WININET_SYNC_MODE.AUTOMATIC;
pub const WININET_SYNC_MODE_DEFAULT = WININET_SYNC_MODE.DEFAULT;

pub const APP_CACHE_STATE = extern enum(i32) {
    AppCacheStateNoUpdateNeeded = 0,
    AppCacheStateUpdateNeeded = 1,
    AppCacheStateUpdateNeededNew = 2,
    AppCacheStateUpdateNeededMasterOnly = 3,
};
pub const AppCacheStateNoUpdateNeeded = APP_CACHE_STATE.AppCacheStateNoUpdateNeeded;
pub const AppCacheStateUpdateNeeded = APP_CACHE_STATE.AppCacheStateUpdateNeeded;
pub const AppCacheStateUpdateNeededNew = APP_CACHE_STATE.AppCacheStateUpdateNeededNew;
pub const AppCacheStateUpdateNeededMasterOnly = APP_CACHE_STATE.AppCacheStateUpdateNeededMasterOnly;

pub const APP_CACHE_DOWNLOAD_ENTRY = extern struct {
    pwszUrl: PWSTR,
    dwEntryType: u32,
};

pub const APP_CACHE_DOWNLOAD_LIST = extern struct {
    dwEntryCount: u32,
    pEntries: *APP_CACHE_DOWNLOAD_ENTRY,
};

pub const APP_CACHE_FINALIZE_STATE = extern enum(i32) {
    AppCacheFinalizeStateIncomplete = 0,
    AppCacheFinalizeStateManifestChange = 1,
    AppCacheFinalizeStateComplete = 2,
};
pub const AppCacheFinalizeStateIncomplete = APP_CACHE_FINALIZE_STATE.AppCacheFinalizeStateIncomplete;
pub const AppCacheFinalizeStateManifestChange = APP_CACHE_FINALIZE_STATE.AppCacheFinalizeStateManifestChange;
pub const AppCacheFinalizeStateComplete = APP_CACHE_FINALIZE_STATE.AppCacheFinalizeStateComplete;

pub const APP_CACHE_GROUP_INFO = extern struct {
    pwszManifestUrl: PWSTR,
    ftLastAccessTime: FILETIME,
    ullSize: u64,
};

pub const APP_CACHE_GROUP_LIST = extern struct {
    dwAppCacheGroupCount: u32,
    pAppCacheGroups: *APP_CACHE_GROUP_INFO,
};

pub const URLCACHE_ENTRY_INFO = extern struct {
    pwszSourceUrlName: PWSTR,
    pwszLocalFileName: PWSTR,
    dwCacheEntryType: u32,
    dwUseCount: u32,
    dwHitRate: u32,
    dwSizeLow: u32,
    dwSizeHigh: u32,
    ftLastModifiedTime: FILETIME,
    ftExpireTime: FILETIME,
    ftLastAccessTime: FILETIME,
    ftLastSyncTime: FILETIME,
    pbHeaderInfo: *u8,
    cbHeaderInfoSize: u32,
    pbExtraData: *u8,
    cbExtraDataSize: u32,
};

pub const URL_CACHE_LIMIT_TYPE = extern enum(i32) {
    UrlCacheLimitTypeIE = 0,
    UrlCacheLimitTypeIETotal = 1,
    UrlCacheLimitTypeAppContainer = 2,
    UrlCacheLimitTypeAppContainerTotal = 3,
    UrlCacheLimitTypeNum = 4,
};
pub const UrlCacheLimitTypeIE = URL_CACHE_LIMIT_TYPE.UrlCacheLimitTypeIE;
pub const UrlCacheLimitTypeIETotal = URL_CACHE_LIMIT_TYPE.UrlCacheLimitTypeIETotal;
pub const UrlCacheLimitTypeAppContainer = URL_CACHE_LIMIT_TYPE.UrlCacheLimitTypeAppContainer;
pub const UrlCacheLimitTypeAppContainerTotal = URL_CACHE_LIMIT_TYPE.UrlCacheLimitTypeAppContainerTotal;
pub const UrlCacheLimitTypeNum = URL_CACHE_LIMIT_TYPE.UrlCacheLimitTypeNum;

pub const WININET_PROXY_INFO = extern struct {
    fProxy: BOOL,
    fBypass: BOOL,
    ProxyScheme: INTERNET_SCHEME,
    pwszProxy: PWSTR,
    ProxyPort: u16,
};

pub const WININET_PROXY_INFO_LIST = extern struct {
    dwProxyInfoCount: u32,
    pProxyInfo: *WININET_PROXY_INFO,
};

pub const CACHE_OPERATOR = fn(
    pcei: *INTERNET_CACHE_ENTRY_INFOA,
    pcbcei: *u32,
    pOpData: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const HTTP_WEB_SOCKET_OPERATION = extern enum(i32) {
    HTTP_WEB_SOCKET_SEND_OPERATION = 0,
    HTTP_WEB_SOCKET_RECEIVE_OPERATION = 1,
    HTTP_WEB_SOCKET_CLOSE_OPERATION = 2,
    HTTP_WEB_SOCKET_SHUTDOWN_OPERATION = 3,
};
pub const HTTP_WEB_SOCKET_SEND_OPERATION = HTTP_WEB_SOCKET_OPERATION.HTTP_WEB_SOCKET_SEND_OPERATION;
pub const HTTP_WEB_SOCKET_RECEIVE_OPERATION = HTTP_WEB_SOCKET_OPERATION.HTTP_WEB_SOCKET_RECEIVE_OPERATION;
pub const HTTP_WEB_SOCKET_CLOSE_OPERATION = HTTP_WEB_SOCKET_OPERATION.HTTP_WEB_SOCKET_CLOSE_OPERATION;
pub const HTTP_WEB_SOCKET_SHUTDOWN_OPERATION = HTTP_WEB_SOCKET_OPERATION.HTTP_WEB_SOCKET_SHUTDOWN_OPERATION;

pub const HTTP_WEB_SOCKET_BUFFER_TYPE = extern enum(i32) {
    HTTP_WEB_SOCKET_BINARY_MESSAGE_TYPE = 0,
    HTTP_WEB_SOCKET_BINARY_FRAGMENT_TYPE = 1,
    HTTP_WEB_SOCKET_UTF8_MESSAGE_TYPE = 2,
    HTTP_WEB_SOCKET_UTF8_FRAGMENT_TYPE = 3,
    HTTP_WEB_SOCKET_CLOSE_TYPE = 4,
    HTTP_WEB_SOCKET_PING_TYPE = 5,
};
pub const HTTP_WEB_SOCKET_BINARY_MESSAGE_TYPE = HTTP_WEB_SOCKET_BUFFER_TYPE.HTTP_WEB_SOCKET_BINARY_MESSAGE_TYPE;
pub const HTTP_WEB_SOCKET_BINARY_FRAGMENT_TYPE = HTTP_WEB_SOCKET_BUFFER_TYPE.HTTP_WEB_SOCKET_BINARY_FRAGMENT_TYPE;
pub const HTTP_WEB_SOCKET_UTF8_MESSAGE_TYPE = HTTP_WEB_SOCKET_BUFFER_TYPE.HTTP_WEB_SOCKET_UTF8_MESSAGE_TYPE;
pub const HTTP_WEB_SOCKET_UTF8_FRAGMENT_TYPE = HTTP_WEB_SOCKET_BUFFER_TYPE.HTTP_WEB_SOCKET_UTF8_FRAGMENT_TYPE;
pub const HTTP_WEB_SOCKET_CLOSE_TYPE = HTTP_WEB_SOCKET_BUFFER_TYPE.HTTP_WEB_SOCKET_CLOSE_TYPE;
pub const HTTP_WEB_SOCKET_PING_TYPE = HTTP_WEB_SOCKET_BUFFER_TYPE.HTTP_WEB_SOCKET_PING_TYPE;

pub const HTTP_WEB_SOCKET_CLOSE_STATUS = extern enum(i32) {
    HTTP_WEB_SOCKET_SUCCESS_CLOSE_STATUS = 1000,
    HTTP_WEB_SOCKET_ENDPOINT_TERMINATED_CLOSE_STATUS = 1001,
    HTTP_WEB_SOCKET_PROTOCOL_ERROR_CLOSE_STATUS = 1002,
    HTTP_WEB_SOCKET_INVALID_DATA_TYPE_CLOSE_STATUS = 1003,
    HTTP_WEB_SOCKET_EMPTY_CLOSE_STATUS = 1005,
    HTTP_WEB_SOCKET_ABORTED_CLOSE_STATUS = 1006,
    HTTP_WEB_SOCKET_INVALID_PAYLOAD_CLOSE_STATUS = 1007,
    HTTP_WEB_SOCKET_POLICY_VIOLATION_CLOSE_STATUS = 1008,
    HTTP_WEB_SOCKET_MESSAGE_TOO_BIG_CLOSE_STATUS = 1009,
    HTTP_WEB_SOCKET_UNSUPPORTED_EXTENSIONS_CLOSE_STATUS = 1010,
    HTTP_WEB_SOCKET_SERVER_ERROR_CLOSE_STATUS = 1011,
    HTTP_WEB_SOCKET_SECURE_HANDSHAKE_ERROR_CLOSE_STATUS = 1015,
};
pub const HTTP_WEB_SOCKET_SUCCESS_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.HTTP_WEB_SOCKET_SUCCESS_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_ENDPOINT_TERMINATED_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.HTTP_WEB_SOCKET_ENDPOINT_TERMINATED_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_PROTOCOL_ERROR_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.HTTP_WEB_SOCKET_PROTOCOL_ERROR_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_INVALID_DATA_TYPE_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.HTTP_WEB_SOCKET_INVALID_DATA_TYPE_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_EMPTY_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.HTTP_WEB_SOCKET_EMPTY_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_ABORTED_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.HTTP_WEB_SOCKET_ABORTED_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_INVALID_PAYLOAD_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.HTTP_WEB_SOCKET_INVALID_PAYLOAD_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_POLICY_VIOLATION_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.HTTP_WEB_SOCKET_POLICY_VIOLATION_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_MESSAGE_TOO_BIG_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.HTTP_WEB_SOCKET_MESSAGE_TOO_BIG_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_UNSUPPORTED_EXTENSIONS_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.HTTP_WEB_SOCKET_UNSUPPORTED_EXTENSIONS_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_SERVER_ERROR_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.HTTP_WEB_SOCKET_SERVER_ERROR_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_SECURE_HANDSHAKE_ERROR_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.HTTP_WEB_SOCKET_SECURE_HANDSHAKE_ERROR_CLOSE_STATUS;

pub const HTTP_WEB_SOCKET_ASYNC_RESULT = extern struct {
    AsyncResult: INTERNET_ASYNC_RESULT,
    Operation: HTTP_WEB_SOCKET_OPERATION,
    BufferType: HTTP_WEB_SOCKET_BUFFER_TYPE,
    dwBytesTransferred: u32,
};

const CLSID_ProofOfPossessionCookieInfoManager_Value = @import("../zig.zig").Guid.initString("A9927F85-A304-4390-8B23-A75F1C668600");
pub const CLSID_ProofOfPossessionCookieInfoManager = &CLSID_ProofOfPossessionCookieInfoManager_Value;

pub const ProofOfPossessionCookieInfo = extern struct {
    name: PWSTR,
    data: PWSTR,
    flags: u32,
    p3pHeader: PWSTR,
};

const IID_IProofOfPossessionCookieInfoManager_Value = @import("../zig.zig").Guid.initString("CDAECE56-4EDF-43DF-B113-88E4556FA1BB");
pub const IID_IProofOfPossessionCookieInfoManager = &IID_IProofOfPossessionCookieInfoManager_Value;
pub const IProofOfPossessionCookieInfoManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCookieInfoForUri: fn(
            self: *const IProofOfPossessionCookieInfoManager,
            uri: [*:0]const u16,
            cookieInfoCount: *u32,
            cookieInfo: [*]*ProofOfPossessionCookieInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProofOfPossessionCookieInfoManager_GetCookieInfoForUri(self: *const T, uri: [*:0]const u16, cookieInfoCount: *u32, cookieInfo: [*]*ProofOfPossessionCookieInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProofOfPossessionCookieInfoManager.VTable, self.vtable).GetCookieInfoForUri(@ptrCast(*const IProofOfPossessionCookieInfoManager, self), uri, cookieInfoCount, cookieInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IProofOfPossessionCookieInfoManager2_Value = @import("../zig.zig").Guid.initString("15E41407-B42F-4AE7-9966-34A087B2D713");
pub const IID_IProofOfPossessionCookieInfoManager2 = &IID_IProofOfPossessionCookieInfoManager2_Value;
pub const IProofOfPossessionCookieInfoManager2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCookieInfoWithUriForAccount: fn(
            self: *const IProofOfPossessionCookieInfoManager2,
            webAccount: *IInspectable,
            uri: [*:0]const u16,
            cookieInfoCount: *u32,
            cookieInfo: [*]*ProofOfPossessionCookieInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProofOfPossessionCookieInfoManager2_GetCookieInfoWithUriForAccount(self: *const T, webAccount: *IInspectable, uri: [*:0]const u16, cookieInfoCount: *u32, cookieInfo: [*]*ProofOfPossessionCookieInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProofOfPossessionCookieInfoManager2.VTable, self.vtable).GetCookieInfoWithUriForAccount(@ptrCast(*const IProofOfPossessionCookieInfoManager2, self), webAccount, uri, cookieInfoCount, cookieInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (296)
//--------------------------------------------------------------------------------
pub extern "WININET" fn InternetTimeFromSystemTimeA(
    pst: *const SYSTEMTIME,
    dwRFC: u32,
    lpszTime: [*:0]u8,
    cbTime: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetTimeFromSystemTimeW(
    pst: *const SYSTEMTIME,
    dwRFC: u32,
    lpszTime: [*:0]u16,
    cbTime: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetTimeFromSystemTime(
    pst: *const SYSTEMTIME,
    dwRFC: u32,
    lpszTime: [*:0]u8,
    cbTime: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetTimeToSystemTimeA(
    lpszTime: [*:0]const u8,
    pst: *SYSTEMTIME,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetTimeToSystemTimeW(
    lpszTime: [*:0]const u16,
    pst: *SYSTEMTIME,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetTimeToSystemTime(
    lpszTime: [*:0]const u8,
    pst: *SYSTEMTIME,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetCrackUrlA(
    lpszUrl: [*:0]const u8,
    dwUrlLength: u32,
    dwFlags: u32,
    lpUrlComponents: *URL_COMPONENTSA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetCrackUrlW(
    lpszUrl: [*:0]const u16,
    dwUrlLength: u32,
    dwFlags: u32,
    lpUrlComponents: *URL_COMPONENTSW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetCreateUrlA(
    lpUrlComponents: *URL_COMPONENTSA,
    dwFlags: u32,
    lpszUrl: ?[*:0]u8,
    lpdwUrlLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetCreateUrlW(
    lpUrlComponents: *URL_COMPONENTSW,
    dwFlags: u32,
    lpszUrl: ?[*:0]u16,
    lpdwUrlLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetCanonicalizeUrlA(
    lpszUrl: [*:0]const u8,
    lpszBuffer: [*:0]u8,
    lpdwBufferLength: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetCanonicalizeUrlW(
    lpszUrl: [*:0]const u16,
    lpszBuffer: [*:0]u16,
    lpdwBufferLength: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetCombineUrlA(
    lpszBaseUrl: [*:0]const u8,
    lpszRelativeUrl: [*:0]const u8,
    lpszBuffer: [*:0]u8,
    lpdwBufferLength: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetCombineUrlW(
    lpszBaseUrl: [*:0]const u16,
    lpszRelativeUrl: [*:0]const u16,
    lpszBuffer: [*:0]u16,
    lpdwBufferLength: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetOpenA(
    lpszAgent: ?[*:0]const u8,
    dwAccessType: u32,
    lpszProxy: ?[*:0]const u8,
    lpszProxyBypass: ?[*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn InternetOpenW(
    lpszAgent: ?[*:0]const u16,
    dwAccessType: u32,
    lpszProxy: ?[*:0]const u16,
    lpszProxyBypass: ?[*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn InternetCloseHandle(
    hInternet: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetConnectA(
    hInternet: *c_void,
    lpszServerName: [*:0]const u8,
    nServerPort: u16,
    lpszUserName: ?[*:0]const u8,
    lpszPassword: ?[*:0]const u8,
    dwService: u32,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn InternetConnectW(
    hInternet: *c_void,
    lpszServerName: [*:0]const u16,
    nServerPort: u16,
    lpszUserName: ?[*:0]const u16,
    lpszPassword: ?[*:0]const u16,
    dwService: u32,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn InternetOpenUrlA(
    hInternet: *c_void,
    lpszUrl: [*:0]const u8,
    lpszHeaders: ?[*:0]const u8,
    dwHeadersLength: u32,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn InternetOpenUrlW(
    hInternet: *c_void,
    lpszUrl: [*:0]const u16,
    lpszHeaders: ?[*:0]const u16,
    dwHeadersLength: u32,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn InternetReadFile(
    hFile: *c_void,
    lpBuffer: [*]u8,
    dwNumberOfBytesToRead: u32,
    lpdwNumberOfBytesRead: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetReadFileExA(
    hFile: *c_void,
    lpBuffersOut: *INTERNET_BUFFERSA,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetReadFileExW(
    hFile: *c_void,
    lpBuffersOut: *INTERNET_BUFFERSW,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetFilePointer(
    hFile: *c_void,
    lDistanceToMove: i32,
    lpDistanceToMoveHigh: ?*i32,
    dwMoveMethod: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetWriteFile(
    hFile: *c_void,
    lpBuffer: [*]const u8,
    dwNumberOfBytesToWrite: u32,
    lpdwNumberOfBytesWritten: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetQueryDataAvailable(
    hFile: *c_void,
    lpdwNumberOfBytesAvailable: ?*u32,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetFindNextFileA(
    hFind: *c_void,
    lpvFindData: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetFindNextFileW(
    hFind: *c_void,
    lpvFindData: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetQueryOptionA(
    hInternet: ?*c_void,
    dwOption: u32,
    lpBuffer: ?[*]u8,
    lpdwBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetQueryOptionW(
    hInternet: ?*c_void,
    dwOption: u32,
    lpBuffer: ?[*]u8,
    lpdwBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetOptionA(
    hInternet: ?*c_void,
    dwOption: u32,
    lpBuffer: ?*c_void,
    dwBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetOptionW(
    hInternet: ?*c_void,
    dwOption: u32,
    lpBuffer: ?*c_void,
    dwBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetOptionExA(
    hInternet: ?*c_void,
    dwOption: u32,
    lpBuffer: ?*c_void,
    dwBufferLength: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetOptionExW(
    hInternet: ?*c_void,
    dwOption: u32,
    lpBuffer: ?*c_void,
    dwBufferLength: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetLockRequestFile(
    hInternet: *c_void,
    lphLockRequestInfo: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetUnlockRequestFile(
    hLockRequestInfo: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetLastResponseInfoA(
    lpdwError: *u32,
    lpszBuffer: ?[*:0]u8,
    lpdwBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetLastResponseInfoW(
    lpdwError: *u32,
    lpszBuffer: ?[*:0]u16,
    lpdwBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetStatusCallbackA(
    hInternet: *c_void,
    lpfnInternetCallback: ?INTERNET_STATUS_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) INTERNET_STATUS_CALLBACK;

pub extern "WININET" fn InternetSetStatusCallbackW(
    hInternet: *c_void,
    lpfnInternetCallback: ?INTERNET_STATUS_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) INTERNET_STATUS_CALLBACK;

pub extern "WININET" fn InternetSetStatusCallback(
    hInternet: *c_void,
    lpfnInternetCallback: ?INTERNET_STATUS_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) INTERNET_STATUS_CALLBACK;

pub extern "WININET" fn FtpFindFirstFileA(
    hConnect: *c_void,
    lpszSearchFile: ?[*:0]const u8,
    lpFindFileData: ?*WIN32_FIND_DATAA,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn FtpFindFirstFileW(
    hConnect: *c_void,
    lpszSearchFile: ?[*:0]const u16,
    lpFindFileData: ?*WIN32_FIND_DATAW,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn FtpGetFileA(
    hConnect: *c_void,
    lpszRemoteFile: [*:0]const u8,
    lpszNewFile: [*:0]const u8,
    fFailIfExists: BOOL,
    dwFlagsAndAttributes: u32,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpGetFileW(
    hConnect: *c_void,
    lpszRemoteFile: [*:0]const u16,
    lpszNewFile: [*:0]const u16,
    fFailIfExists: BOOL,
    dwFlagsAndAttributes: u32,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpPutFileA(
    hConnect: *c_void,
    lpszLocalFile: [*:0]const u8,
    lpszNewRemoteFile: [*:0]const u8,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpPutFileW(
    hConnect: *c_void,
    lpszLocalFile: [*:0]const u16,
    lpszNewRemoteFile: [*:0]const u16,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpGetFileEx(
    hFtpSession: *c_void,
    lpszRemoteFile: [*:0]const u8,
    lpszNewFile: [*:0]const u16,
    fFailIfExists: BOOL,
    dwFlagsAndAttributes: u32,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpPutFileEx(
    hFtpSession: *c_void,
    lpszLocalFile: [*:0]const u16,
    lpszNewRemoteFile: [*:0]const u8,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpDeleteFileA(
    hConnect: *c_void,
    lpszFileName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpDeleteFileW(
    hConnect: *c_void,
    lpszFileName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpRenameFileA(
    hConnect: *c_void,
    lpszExisting: [*:0]const u8,
    lpszNew: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpRenameFileW(
    hConnect: *c_void,
    lpszExisting: [*:0]const u16,
    lpszNew: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpOpenFileA(
    hConnect: *c_void,
    lpszFileName: [*:0]const u8,
    dwAccess: u32,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn FtpOpenFileW(
    hConnect: *c_void,
    lpszFileName: [*:0]const u16,
    dwAccess: u32,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn FtpCreateDirectoryA(
    hConnect: *c_void,
    lpszDirectory: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpCreateDirectoryW(
    hConnect: *c_void,
    lpszDirectory: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpRemoveDirectoryA(
    hConnect: *c_void,
    lpszDirectory: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpRemoveDirectoryW(
    hConnect: *c_void,
    lpszDirectory: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpSetCurrentDirectoryA(
    hConnect: *c_void,
    lpszDirectory: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpSetCurrentDirectoryW(
    hConnect: *c_void,
    lpszDirectory: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpGetCurrentDirectoryA(
    hConnect: *c_void,
    lpszCurrentDirectory: [*:0]u8,
    lpdwCurrentDirectory: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpGetCurrentDirectoryW(
    hConnect: *c_void,
    lpszCurrentDirectory: [*:0]u16,
    lpdwCurrentDirectory: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpCommandA(
    hConnect: *c_void,
    fExpectResponse: BOOL,
    dwFlags: u32,
    lpszCommand: [*:0]const u8,
    dwContext: ?*c_void,
    phFtpCommand: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpCommandW(
    hConnect: *c_void,
    fExpectResponse: BOOL,
    dwFlags: u32,
    lpszCommand: [*:0]const u16,
    dwContext: ?*c_void,
    phFtpCommand: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpGetFileSize(
    hFile: *c_void,
    lpdwFileSizeHigh: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn GopherCreateLocatorA(
    lpszHost: [*:0]const u8,
    nServerPort: u16,
    lpszDisplayString: ?[*:0]const u8,
    lpszSelectorString: ?[*:0]const u8,
    dwGopherType: u32,
    lpszLocator: ?[*:0]u8,
    lpdwBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GopherCreateLocatorW(
    lpszHost: [*:0]const u16,
    nServerPort: u16,
    lpszDisplayString: ?[*:0]const u16,
    lpszSelectorString: ?[*:0]const u16,
    dwGopherType: u32,
    lpszLocator: ?[*:0]u16,
    lpdwBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GopherGetLocatorTypeA(
    lpszLocator: [*:0]const u8,
    lpdwGopherType: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GopherGetLocatorTypeW(
    lpszLocator: [*:0]const u16,
    lpdwGopherType: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GopherFindFirstFileA(
    hConnect: *c_void,
    lpszLocator: ?[*:0]const u8,
    lpszSearchString: ?[*:0]const u8,
    lpFindData: ?*GOPHER_FIND_DATAA,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn GopherFindFirstFileW(
    hConnect: *c_void,
    lpszLocator: ?[*:0]const u16,
    lpszSearchString: ?[*:0]const u16,
    lpFindData: ?*GOPHER_FIND_DATAW,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn GopherOpenFileA(
    hConnect: *c_void,
    lpszLocator: [*:0]const u8,
    lpszView: ?[*:0]const u8,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn GopherOpenFileW(
    hConnect: *c_void,
    lpszLocator: [*:0]const u16,
    lpszView: ?[*:0]const u16,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn GopherGetAttributeA(
    hConnect: *c_void,
    lpszLocator: [*:0]const u8,
    lpszAttributeName: ?[*:0]const u8,
    lpBuffer: [*:0]u8,
    dwBufferLength: u32,
    lpdwCharactersReturned: *u32,
    lpfnEnumerator: ?GOPHER_ATTRIBUTE_ENUMERATOR,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GopherGetAttributeW(
    hConnect: *c_void,
    lpszLocator: [*:0]const u16,
    lpszAttributeName: ?[*:0]const u16,
    lpBuffer: [*:0]u8,
    dwBufferLength: u32,
    lpdwCharactersReturned: *u32,
    lpfnEnumerator: ?GOPHER_ATTRIBUTE_ENUMERATOR,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpOpenRequestA(
    hConnect: *c_void,
    lpszVerb: ?[*:0]const u8,
    lpszObjectName: ?[*:0]const u8,
    lpszVersion: ?[*:0]const u8,
    lpszReferrer: ?[*:0]const u8,
    lplpszAcceptTypes: ?*?PSTR,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn HttpOpenRequestW(
    hConnect: *c_void,
    lpszVerb: ?[*:0]const u16,
    lpszObjectName: ?[*:0]const u16,
    lpszVersion: ?[*:0]const u16,
    lpszReferrer: ?[*:0]const u16,
    lplpszAcceptTypes: ?*?PWSTR,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn HttpAddRequestHeadersA(
    hRequest: *c_void,
    lpszHeaders: [*:0]const u8,
    dwHeadersLength: u32,
    dwModifiers: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpAddRequestHeadersW(
    hRequest: *c_void,
    lpszHeaders: [*:0]const u16,
    dwHeadersLength: u32,
    dwModifiers: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpSendRequestA(
    hRequest: *c_void,
    lpszHeaders: ?[*:0]const u8,
    dwHeadersLength: u32,
    lpOptional: ?[*]u8,
    dwOptionalLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpSendRequestW(
    hRequest: *c_void,
    lpszHeaders: ?[*:0]const u16,
    dwHeadersLength: u32,
    lpOptional: ?[*]u8,
    dwOptionalLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpSendRequestExA(
    hRequest: *c_void,
    lpBuffersIn: ?*INTERNET_BUFFERSA,
    lpBuffersOut: ?*INTERNET_BUFFERSA,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpSendRequestExW(
    hRequest: *c_void,
    lpBuffersIn: ?*INTERNET_BUFFERSW,
    lpBuffersOut: ?*INTERNET_BUFFERSW,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpEndRequestA(
    hRequest: *c_void,
    lpBuffersOut: ?*INTERNET_BUFFERSA,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpEndRequestW(
    hRequest: *c_void,
    lpBuffersOut: ?*INTERNET_BUFFERSW,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpQueryInfoA(
    hRequest: *c_void,
    dwInfoLevel: u32,
    lpBuffer: ?[*]u8,
    lpdwBufferLength: *u32,
    lpdwIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpQueryInfoW(
    hRequest: *c_void,
    dwInfoLevel: u32,
    lpBuffer: ?[*]u8,
    lpdwBufferLength: *u32,
    lpdwIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetCookieA(
    lpszUrl: [*:0]const u8,
    lpszCookieName: ?[*:0]const u8,
    lpszCookieData: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetCookieW(
    lpszUrl: [*:0]const u16,
    lpszCookieName: ?[*:0]const u16,
    lpszCookieData: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetCookieA(
    lpszUrl: [*:0]const u8,
    lpszCookieName: ?[*:0]const u8,
    lpszCookieData: ?[*:0]u8,
    lpdwSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetCookieW(
    lpszUrl: [*:0]const u16,
    lpszCookieName: ?[*:0]const u16,
    lpszCookieData: ?[*:0]u16,
    lpdwSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetCookieExA(
    lpszUrl: [*:0]const u8,
    lpszCookieName: ?[*:0]const u8,
    lpszCookieData: [*:0]const u8,
    dwFlags: u32,
    dwReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetSetCookieExW(
    lpszUrl: [*:0]const u16,
    lpszCookieName: ?[*:0]const u16,
    lpszCookieData: [*:0]const u16,
    dwFlags: u32,
    dwReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetGetCookieExA(
    lpszUrl: [*:0]const u8,
    lpszCookieName: ?[*:0]const u8,
    lpszCookieData: ?[*:0]u8,
    lpdwSize: *u32,
    dwFlags: u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetCookieExW(
    lpszUrl: [*:0]const u16,
    lpszCookieName: ?[*:0]const u16,
    lpszCookieData: ?[*:0]u16,
    lpdwSize: *u32,
    dwFlags: u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetFreeCookies(
    pCookies: ?*INTERNET_COOKIE2,
    dwCookieCount: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WININET" fn InternetGetCookieEx2(
    pcwszUrl: [*:0]const u16,
    pcwszCookieName: ?[*:0]const u16,
    dwFlags: u32,
    ppCookies: **INTERNET_COOKIE2,
    pdwCookieCount: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetSetCookieEx2(
    pcwszUrl: [*:0]const u16,
    pCookie: *const INTERNET_COOKIE2,
    pcwszP3PPolicy: ?[*:0]const u16,
    dwFlags: u32,
    pdwCookieState: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetAttemptConnect(
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetCheckConnectionA(
    lpszUrl: [*:0]const u8,
    dwFlags: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetCheckConnectionW(
    lpszUrl: [*:0]const u16,
    dwFlags: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn ResumeSuspendedDownload(
    hRequest: *c_void,
    dwResultCode: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetErrorDlg(
    hWnd: HWND,
    hRequest: ?*c_void,
    dwError: u32,
    dwFlags: u32,
    lppvData: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetConfirmZoneCrossingA(
    hWnd: HWND,
    szUrlPrev: PSTR,
    szUrlNew: PSTR,
    bPost: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetConfirmZoneCrossingW(
    hWnd: HWND,
    szUrlPrev: PWSTR,
    szUrlNew: PWSTR,
    bPost: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetConfirmZoneCrossing(
    hWnd: HWND,
    szUrlPrev: PSTR,
    szUrlNew: PSTR,
    bPost: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn CreateUrlCacheEntryA(
    lpszUrlName: [*:0]const u8,
    dwExpectedFileSize: u32,
    lpszFileExtension: ?[*:0]const u8,
    lpszFileName: *[260]u8,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn CreateUrlCacheEntryW(
    lpszUrlName: [*:0]const u16,
    dwExpectedFileSize: u32,
    lpszFileExtension: ?[*:0]const u16,
    lpszFileName: *[260]u16,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn CommitUrlCacheEntryA(
    lpszUrlName: [*:0]const u8,
    lpszLocalFileName: ?[*:0]const u8,
    ExpireTime: FILETIME,
    LastModifiedTime: FILETIME,
    CacheEntryType: u32,
    lpHeaderInfo: ?[*:0]u8,
    cchHeaderInfo: u32,
    lpszFileExtension: [*:0]const u8,
    lpszOriginalUrl: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn CommitUrlCacheEntryW(
    lpszUrlName: [*:0]const u16,
    lpszLocalFileName: ?[*:0]const u16,
    ExpireTime: FILETIME,
    LastModifiedTime: FILETIME,
    CacheEntryType: u32,
    lpszHeaderInfo: ?[*:0]u16,
    cchHeaderInfo: u32,
    lpszFileExtension: [*:0]const u16,
    lpszOriginalUrl: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn RetrieveUrlCacheEntryFileA(
    lpszUrlName: [*:0]const u8,
    lpCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: *u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn RetrieveUrlCacheEntryFileW(
    lpszUrlName: [*:0]const u16,
    lpCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: *u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn UnlockUrlCacheEntryFileA(
    lpszUrlName: [*:0]const u8,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn UnlockUrlCacheEntryFileW(
    lpszUrlName: [*:0]const u16,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn UnlockUrlCacheEntryFile(
    lpszUrlName: [*:0]const u8,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn RetrieveUrlCacheEntryStreamA(
    lpszUrlName: [*:0]const u8,
    lpCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: *u32,
    fRandomRead: BOOL,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WININET" fn RetrieveUrlCacheEntryStreamW(
    lpszUrlName: [*:0]const u16,
    lpCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: *u32,
    fRandomRead: BOOL,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WININET" fn ReadUrlCacheEntryStream(
    hUrlCacheStream: HANDLE,
    dwLocation: u32,
    lpBuffer: [*]u8,
    lpdwLen: *u32,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn ReadUrlCacheEntryStreamEx(
    hUrlCacheStream: HANDLE,
    qwLocation: u64,
    lpBuffer: [*]u8,
    lpdwLen: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn UnlockUrlCacheEntryStream(
    hUrlCacheStream: HANDLE,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetUrlCacheEntryInfoA(
    lpszUrlName: [*:0]const u8,
    lpCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetUrlCacheEntryInfoW(
    lpszUrlName: [*:0]const u16,
    lpCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FindFirstUrlCacheGroup(
    dwFlags: u32,
    dwFilter: u32,
    lpSearchCondition: *c_void,
    dwSearchCondition: u32,
    lpGroupId: *i64,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WININET" fn FindNextUrlCacheGroup(
    hFind: HANDLE,
    lpGroupId: *i64,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetUrlCacheGroupAttributeA(
    gid: i64,
    dwFlags: u32,
    dwAttributes: u32,
    lpGroupInfo: [*]INTERNET_CACHE_GROUP_INFOA,
    lpcbGroupInfo: *u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetUrlCacheGroupAttributeW(
    gid: i64,
    dwFlags: u32,
    dwAttributes: u32,
    lpGroupInfo: [*]INTERNET_CACHE_GROUP_INFOW,
    lpcbGroupInfo: *u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheGroupAttributeA(
    gid: i64,
    dwFlags: u32,
    dwAttributes: u32,
    lpGroupInfo: *INTERNET_CACHE_GROUP_INFOA,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheGroupAttributeW(
    gid: i64,
    dwFlags: u32,
    dwAttributes: u32,
    lpGroupInfo: *INTERNET_CACHE_GROUP_INFOW,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetUrlCacheEntryInfoExA(
    lpszUrl: [*:0]const u8,
    lpCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: ?*u32,
    lpszRedirectUrl: PSTR,
    lpcbRedirectUrl: *u32,
    lpReserved: *c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetUrlCacheEntryInfoExW(
    lpszUrl: [*:0]const u16,
    lpCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: ?*u32,
    lpszRedirectUrl: PWSTR,
    lpcbRedirectUrl: *u32,
    lpReserved: *c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheEntryInfoA(
    lpszUrlName: [*:0]const u8,
    lpCacheEntryInfo: *INTERNET_CACHE_ENTRY_INFOA,
    dwFieldControl: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheEntryInfoW(
    lpszUrlName: [*:0]const u16,
    lpCacheEntryInfo: *INTERNET_CACHE_ENTRY_INFOW,
    dwFieldControl: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn CreateUrlCacheGroup(
    dwFlags: u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) i64;

pub extern "WININET" fn DeleteUrlCacheGroup(
    GroupId: i64,
    dwFlags: u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheEntryGroupA(
    lpszUrlName: [*:0]const u8,
    dwFlags: u32,
    GroupId: i64,
    pbGroupAttributes: *u8,
    cbGroupAttributes: u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheEntryGroupW(
    lpszUrlName: [*:0]const u16,
    dwFlags: u32,
    GroupId: i64,
    pbGroupAttributes: *u8,
    cbGroupAttributes: u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheEntryGroup(
    lpszUrlName: [*:0]const u8,
    dwFlags: u32,
    GroupId: i64,
    pbGroupAttributes: *u8,
    cbGroupAttributes: u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FindFirstUrlCacheEntryExA(
    lpszUrlSearchPattern: ?[*:0]const u8,
    dwFlags: u32,
    dwFilter: u32,
    GroupId: i64,
    lpFirstCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: *u32,
    lpGroupAttributes: *c_void,
    lpcbGroupAttributes: *u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WININET" fn FindFirstUrlCacheEntryExW(
    lpszUrlSearchPattern: ?[*:0]const u16,
    dwFlags: u32,
    dwFilter: u32,
    GroupId: i64,
    lpFirstCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: *u32,
    lpGroupAttributes: *c_void,
    lpcbGroupAttributes: *u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WININET" fn FindNextUrlCacheEntryExA(
    hEnumHandle: HANDLE,
    lpNextCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: *u32,
    lpGroupAttributes: *c_void,
    lpcbGroupAttributes: *u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FindNextUrlCacheEntryExW(
    hEnumHandle: HANDLE,
    lpNextCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: *u32,
    lpGroupAttributes: *c_void,
    lpcbGroupAttributes: *u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FindFirstUrlCacheEntryA(
    lpszUrlSearchPattern: ?[*:0]const u8,
    lpFirstCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WININET" fn FindFirstUrlCacheEntryW(
    lpszUrlSearchPattern: ?[*:0]const u16,
    lpFirstCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WININET" fn FindNextUrlCacheEntryA(
    hEnumHandle: HANDLE,
    lpNextCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FindNextUrlCacheEntryW(
    hEnumHandle: HANDLE,
    lpNextCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FindCloseUrlCache(
    hEnumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn DeleteUrlCacheEntryA(
    lpszUrlName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn DeleteUrlCacheEntryW(
    lpszUrlName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn DeleteUrlCacheEntry(
    lpszUrlName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetDialA(
    hwndParent: HWND,
    lpszConnectoid: ?PSTR,
    dwFlags: u32,
    lpdwConnection: *?*c_void,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetDialW(
    hwndParent: HWND,
    lpszConnectoid: ?PWSTR,
    dwFlags: u32,
    lpdwConnection: *?*c_void,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetDial(
    hwndParent: HWND,
    lpszConnectoid: ?PSTR,
    dwFlags: u32,
    lpdwConnection: *u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetHangUp(
    dwConnection: ?*c_void,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetGoOnlineA(
    lpszURL: ?[*:0]const u8,
    hwndParent: HWND,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGoOnlineW(
    lpszURL: ?[*:0]const u16,
    hwndParent: HWND,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGoOnline(
    lpszURL: ?PSTR,
    hwndParent: HWND,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetAutodial(
    dwFlags: u32,
    hwndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetAutodialHangup(
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetConnectedState(
    lpdwFlags: *u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetConnectedStateExA(
    lpdwFlags: ?*u32,
    lpszConnectionName: ?[*:0]u8,
    cchNameLen: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetConnectedStateExW(
    lpdwFlags: ?*u32,
    lpszConnectionName: ?[*:0]u16,
    cchNameLen: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn DeleteWpadCacheForNetworks(
    param0: WPAD_CACHE_DELETE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetInitializeAutoProxyDll(
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn DetectAutoProxyUrl(
    pszAutoProxyUrl: [*:0]u8,
    cchAutoProxyUrl: u32,
    dwDetectFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn CreateMD5SSOHash(
    pszChallengeInfo: PWSTR,
    pwszRealm: PWSTR,
    pwszTarget: PWSTR,
    pbHexHash: *u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetConnectedStateEx(
    lpdwFlags: *u32,
    lpszConnectionName: ?[*:0]u8,
    dwNameLen: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetDialStateA(
    lpszConnectoid: ?[*:0]const u8,
    dwState: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetDialStateW(
    lpszConnectoid: ?[*:0]const u16,
    dwState: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetDialState(
    lpszConnectoid: ?[*:0]const u8,
    dwState: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetPerSiteCookieDecisionA(
    pchHostName: [*:0]const u8,
    dwDecision: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetPerSiteCookieDecisionW(
    pchHostName: [*:0]const u16,
    dwDecision: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetPerSiteCookieDecisionA(
    pchHostName: [*:0]const u8,
    pResult: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetPerSiteCookieDecisionW(
    pchHostName: [*:0]const u16,
    pResult: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetClearAllPerSiteCookieDecisions(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetEnumPerSiteCookieDecisionA(
    pszSiteName: [*:0]u8,
    pcSiteNameSize: *u32,
    pdwDecision: *u32,
    dwIndex: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetEnumPerSiteCookieDecisionW(
    pszSiteName: [*:0]u16,
    pcSiteNameSize: *u32,
    pdwDecision: *u32,
    dwIndex: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn PrivacySetZonePreferenceW(
    dwZone: u32,
    dwType: u32,
    dwTemplate: u32,
    pszPreference: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn PrivacyGetZonePreferenceW(
    dwZone: u32,
    dwType: u32,
    pdwTemplate: ?*u32,
    pszBuffer: ?[*:0]u16,
    pdwBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn HttpIsHostHstsEnabled(
    pcwszUrl: [*:0]const u16,
    pfIsHsts: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetAlgIdToStringA(
    ai: u32,
    lpstr: [*:0]u8,
    lpdwstrLength: *u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetAlgIdToStringW(
    ai: u32,
    lpstr: [*:0]u16,
    lpdwstrLength: *u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSecurityProtocolToStringA(
    dwProtocol: u32,
    lpstr: ?[*:0]u8,
    lpdwstrLength: *u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSecurityProtocolToStringW(
    dwProtocol: u32,
    lpstr: ?[*:0]u16,
    lpdwstrLength: *u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetSecurityInfoByURLA(
    lpszURL: PSTR,
    ppCertChain: **CERT_CHAIN_CONTEXT,
    pdwSecureFlags: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetSecurityInfoByURLW(
    lpszURL: [*:0]const u16,
    ppCertChain: **CERT_CHAIN_CONTEXT,
    pdwSecureFlags: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetSecurityInfoByURL(
    lpszURL: PSTR,
    ppCertChain: **CERT_CHAIN_CONTEXT,
    pdwSecureFlags: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn ShowSecurityInfo(
    hWndParent: HWND,
    pSecurityInfo: *INTERNET_SECURITY_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn ShowX509EncodedCertificate(
    hWndParent: HWND,
    lpCert: [*:0]u8,
    cbCert: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn ShowClientAuthCerts(
    hWndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn ParseX509EncodedCertificateForListBoxEntry(
    lpCert: [*:0]u8,
    cbCert: u32,
    lpszListBoxEntry: ?[*:0]u8,
    lpdwListBoxEntry: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetShowSecurityInfoByURLA(
    lpszURL: PSTR,
    hwndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetShowSecurityInfoByURLW(
    lpszURL: [*:0]const u16,
    hwndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetShowSecurityInfoByURL(
    lpszURL: PSTR,
    hwndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetFortezzaCommand(
    dwCommand: u32,
    hwnd: HWND,
    dwReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetQueryFortezzaStatus(
    pdwStatus: *u32,
    dwReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetWriteFileExA(
    hFile: *c_void,
    lpBuffersIn: *INTERNET_BUFFERSA,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetWriteFileExW(
    hFile: *c_void,
    lpBuffersIn: *INTERNET_BUFFERSW,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FindP3PPolicySymbol(
    pszSymbol: *const i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WININET" fn HttpGetServerCredentials(
    pwszUrl: PWSTR,
    ppwszUserName: *PWSTR,
    ppwszPassword: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn HttpPushEnable(
    hRequest: *c_void,
    pTransportSetting: *HTTP_PUSH_TRANSPORT_SETTING,
    phWait: **HTTP_PUSH_WAIT_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn HttpPushWait(
    hWait: *HTTP_PUSH_WAIT_HANDLE__,
    eType: HTTP_PUSH_WAIT_TYPE,
    pNotificationStatus: ?*HTTP_PUSH_NOTIFICATION_STATUS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn HttpPushClose(
    hWait: *HTTP_PUSH_WAIT_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WININET" fn HttpCheckDavComplianceA(
    lpszUrl: [*:0]const u8,
    lpszComplianceToken: [*:0]const u8,
    lpfFound: *i32,
    hWnd: HWND,
    lpvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpCheckDavComplianceW(
    lpszUrl: [*:0]const u16,
    lpszComplianceToken: [*:0]const u16,
    lpfFound: *i32,
    hWnd: HWND,
    lpvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn IsUrlCacheEntryExpiredA(
    lpszUrlName: [*:0]const u8,
    dwFlags: u32,
    pftLastModified: *FILETIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn IsUrlCacheEntryExpiredW(
    lpszUrlName: [*:0]const u16,
    dwFlags: u32,
    pftLastModified: *FILETIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn CreateUrlCacheEntryExW(
    lpszUrlName: [*:0]const u16,
    dwExpectedFileSize: u32,
    lpszFileExtension: ?[*:0]const u16,
    lpszFileName: *[260]u16,
    dwReserved: u32,
    fPreserveIncomingFileName: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetUrlCacheEntryBinaryBlob(
    pwszUrlName: [*:0]const u16,
    dwType: *u32,
    pftExpireTime: *FILETIME,
    pftAccessTime: *FILETIME,
    pftModifiedTime: *FILETIME,
    ppbBlob: ?[*]?*u8,
    pcbBlob: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn CommitUrlCacheEntryBinaryBlob(
    pwszUrlName: [*:0]const u16,
    dwType: u32,
    ftExpireTime: FILETIME,
    ftModifiedTime: FILETIME,
    pbBlob: ?[*:0]const u8,
    cbBlob: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn CreateUrlCacheContainerA(
    Name: [*:0]const u8,
    lpCachePrefix: [*:0]const u8,
    lpszCachePath: ?[*:0]const u8,
    KBCacheLimit: u32,
    dwContainerType: u32,
    dwOptions: u32,
    pvBuffer: *c_void,
    cbBuffer: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn CreateUrlCacheContainerW(
    Name: [*:0]const u16,
    lpCachePrefix: [*:0]const u16,
    lpszCachePath: ?[*:0]const u16,
    KBCacheLimit: u32,
    dwContainerType: u32,
    dwOptions: u32,
    pvBuffer: *c_void,
    cbBuffer: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn DeleteUrlCacheContainerA(
    Name: [*:0]const u8,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn DeleteUrlCacheContainerW(
    Name: [*:0]const u16,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FindFirstUrlCacheContainerA(
    pdwModified: *u32,
    lpContainerInfo: [*]INTERNET_CACHE_CONTAINER_INFOA,
    lpcbContainerInfo: *u32,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WININET" fn FindFirstUrlCacheContainerW(
    pdwModified: *u32,
    lpContainerInfo: [*]INTERNET_CACHE_CONTAINER_INFOW,
    lpcbContainerInfo: *u32,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WININET" fn FindNextUrlCacheContainerA(
    hEnumHandle: HANDLE,
    lpContainerInfo: [*]INTERNET_CACHE_CONTAINER_INFOA,
    lpcbContainerInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FindNextUrlCacheContainerW(
    hEnumHandle: HANDLE,
    lpContainerInfo: [*]INTERNET_CACHE_CONTAINER_INFOW,
    lpcbContainerInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FreeUrlCacheSpaceA(
    lpszCachePath: ?[*:0]const u8,
    dwSize: u32,
    dwFilter: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FreeUrlCacheSpaceW(
    lpszCachePath: ?[*:0]const u16,
    dwSize: u32,
    dwFilter: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn UrlCacheFreeGlobalSpace(
    ullTargetSize: u64,
    dwFilter: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheGetGlobalCacheSize(
    dwFilter: u32,
    pullSize: *u64,
    pullLimit: *u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn GetUrlCacheConfigInfoA(
    lpCacheConfigInfo: *INTERNET_CACHE_CONFIG_INFOA,
    lpcbCacheConfigInfo: *u32,
    dwFieldControl: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetUrlCacheConfigInfoW(
    lpCacheConfigInfo: *INTERNET_CACHE_CONFIG_INFOW,
    lpcbCacheConfigInfo: *u32,
    dwFieldControl: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheConfigInfoA(
    lpCacheConfigInfo: *INTERNET_CACHE_CONFIG_INFOA,
    dwFieldControl: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheConfigInfoW(
    lpCacheConfigInfo: *INTERNET_CACHE_CONFIG_INFOW,
    dwFieldControl: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn RunOnceUrlCache(
    hwnd: HWND,
    hinst: HINSTANCE,
    lpszCmd: PSTR,
    nCmdShow: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn DeleteIE3Cache(
    hwnd: HWND,
    hinst: HINSTANCE,
    lpszCmd: PSTR,
    nCmdShow: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UpdateUrlCacheContentPath(
    szNewPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn RegisterUrlCacheNotification(
    hWnd: HWND,
    uMsg: u32,
    gid: i64,
    dwOpsFilter: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetUrlCacheHeaderData(
    nIdx: u32,
    lpdwData: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheHeaderData(
    nIdx: u32,
    dwData: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn IncrementUrlCacheHeaderData(
    nIdx: u32,
    lpdwData: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn LoadUrlCacheContent(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn AppCacheLookup(
    pwszUrl: [*:0]const u16,
    dwFlags: u32,
    phAppCache: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheCheckManifest(
    pwszMasterUrl: ?[*:0]const u16,
    pwszManifestUrl: [*:0]const u16,
    pbManifestData: [*:0]const u8,
    dwManifestDataSize: u32,
    pbManifestResponseHeaders: [*:0]const u8,
    dwManifestResponseHeadersSize: u32,
    peState: *APP_CACHE_STATE,
    phNewAppCache: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheGetDownloadList(
    hAppCache: *c_void,
    pDownloadList: *APP_CACHE_DOWNLOAD_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheFreeDownloadList(
    pDownloadList: *APP_CACHE_DOWNLOAD_LIST,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WININET" fn AppCacheFinalize(
    hAppCache: *c_void,
    pbManifestData: [*:0]const u8,
    dwManifestDataSize: u32,
    peState: *APP_CACHE_FINALIZE_STATE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheGetFallbackUrl(
    hAppCache: *c_void,
    pwszUrl: [*:0]const u16,
    ppwszFallbackUrl: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheGetManifestUrl(
    hAppCache: *c_void,
    ppwszManifestUrl: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheDuplicateHandle(
    hAppCache: *c_void,
    phDuplicatedAppCache: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheCloseHandle(
    hAppCache: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WININET" fn AppCacheFreeGroupList(
    pAppCacheGroupList: *APP_CACHE_GROUP_LIST,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WININET" fn AppCacheGetGroupList(
    pAppCacheGroupList: *APP_CACHE_GROUP_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheGetInfo(
    hAppCache: *c_void,
    pAppCacheInfo: *APP_CACHE_GROUP_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheDeleteGroup(
    pwszManifestUrl: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheFreeSpace(
    ftCutOff: FILETIME,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheGetIEGroupList(
    pAppCacheGroupList: *APP_CACHE_GROUP_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheDeleteIEGroup(
    pwszManifestUrl: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheFreeIESpace(
    ftCutOff: FILETIME,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheCreateAndCommitFile(
    hAppCache: *c_void,
    pwszSourceFilePath: [*:0]const u16,
    pwszUrl: [*:0]const u16,
    pbResponseHeaders: [*:0]const u8,
    dwResponseHeadersSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn HttpOpenDependencyHandle(
    hRequestHandle: *c_void,
    fBackground: BOOL,
    phDependencyHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn HttpCloseDependencyHandle(
    hDependencyHandle: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WININET" fn HttpDuplicateDependencyHandle(
    hDependencyHandle: *c_void,
    phDuplicatedDependencyHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn HttpIndicatePageLoadComplete(
    hDependencyHandle: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheFreeEntryInfo(
    pCacheEntryInfo: *URLCACHE_ENTRY_INFO,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WININET" fn UrlCacheGetEntryInfo(
    hAppCache: ?*c_void,
    pcwszUrl: [*:0]const u16,
    pCacheEntryInfo: ?*URLCACHE_ENTRY_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheCloseEntryHandle(
    hEntryFile: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WININET" fn UrlCacheRetrieveEntryFile(
    hAppCache: ?*c_void,
    pcwszUrl: [*:0]const u16,
    pCacheEntryInfo: *URLCACHE_ENTRY_INFO,
    phEntryFile: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheReadEntryStream(
    hUrlCacheStream: *c_void,
    ullLocation: u64,
    pBuffer: *c_void,
    dwBufferLen: u32,
    pdwBufferLen: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheRetrieveEntryStream(
    hAppCache: ?*c_void,
    pcwszUrl: [*:0]const u16,
    fRandomRead: BOOL,
    pCacheEntryInfo: *URLCACHE_ENTRY_INFO,
    phEntryStream: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheUpdateEntryExtraData(
    hAppCache: ?*c_void,
    pcwszUrl: [*:0]const u16,
    pbExtraData: [*:0]const u8,
    cbExtraData: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheCreateContainer(
    pwszName: [*:0]const u16,
    pwszPrefix: [*:0]const u16,
    pwszDirectory: [*:0]const u16,
    ullLimit: u64,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheCheckEntriesExist(
    rgpwszUrls: [*]PWSTR,
    cEntries: u32,
    rgfExist: [*]BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheGetContentPaths(
    pppwszDirectories: **PWSTR,
    pcDirectories: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheGetGlobalLimit(
    limitType: URL_CACHE_LIMIT_TYPE,
    pullLimit: *u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheSetGlobalLimit(
    limitType: URL_CACHE_LIMIT_TYPE,
    ullLimit: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheReloadSettings(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheContainerSetEntryMaximumAge(
    pwszPrefix: [*:0]const u16,
    dwEntryMaxAge: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheFindFirstEntry(
    pwszPrefix: ?[*:0]const u16,
    dwFlags: u32,
    dwFilter: u32,
    GroupId: i64,
    pCacheEntryInfo: *URLCACHE_ENTRY_INFO,
    phFind: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheFindNextEntry(
    hFind: HANDLE,
    pCacheEntryInfo: *URLCACHE_ENTRY_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheServer(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn ReadGuidsForConnectedNetworks(
    pcNetworks: ?*u32,
    pppwszNetworkGuids: ?*?*?PWSTR,
    pppbstrNetworkNames: ?*?*BSTR,
    pppwszGWMacs: ?*?*?PWSTR,
    pcGatewayMacs: ?*u32,
    pdwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn IsHostInProxyBypassList(
    tScheme: INTERNET_SCHEME,
    lpszHost: [*:0]const u8,
    cchHost: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetFreeProxyInfoList(
    pProxyInfoList: *WININET_PROXY_INFO_LIST,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WININET" fn InternetGetProxyForUrl(
    hInternet: *c_void,
    pcwszUrl: [*:0]const u16,
    pProxyInfoList: *WININET_PROXY_INFO_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn DoConnectoidsExist(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetDiskInfoA(
    pszPath: [*:0]const u8,
    pdwClusterSize: ?*u32,
    pdlAvail: ?*u64,
    pdlTotal: ?*u64,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn PerformOperationOverUrlCacheA(
    pszUrlSearchPattern: ?[*:0]const u8,
    dwFlags: u32,
    dwFilter: u32,
    GroupId: i64,
    pReserved1: *c_void,
    pdwReserved2: *u32,
    pReserved3: *c_void,
    op: CACHE_OPERATOR,
    pOperatorData: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn IsProfilesEnabled(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternalInternetGetCookie(
    lpszUrl: [*:0]const u8,
    lpszCookieData: [*:0]u8,
    lpdwDataSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn ImportCookieFileA(
    szFilename: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn ImportCookieFileW(
    szFilename: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn ExportCookieFileA(
    szFilename: [*:0]const u8,
    fAppend: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn ExportCookieFileW(
    szFilename: [*:0]const u16,
    fAppend: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn IsDomainLegalCookieDomainA(
    pchDomain: [*:0]const u8,
    pchFullDomain: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn IsDomainLegalCookieDomainW(
    pchDomain: [*:0]const u16,
    pchFullDomain: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpWebSocketCompleteUpgrade(
    hRequest: *c_void,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn HttpWebSocketSend(
    hWebSocket: *c_void,
    BufferType: HTTP_WEB_SOCKET_BUFFER_TYPE,
    pvBuffer: ?[*]u8,
    dwBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpWebSocketReceive(
    hWebSocket: *c_void,
    pvBuffer: [*]u8,
    dwBufferLength: u32,
    pdwBytesRead: *u32,
    pBufferType: *HTTP_WEB_SOCKET_BUFFER_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpWebSocketClose(
    hWebSocket: *c_void,
    usStatus: u16,
    pvReason: ?[*]u8,
    dwReasonLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpWebSocketShutdown(
    hWebSocket: *c_void,
    usStatus: u16,
    pvReason: ?[*]u8,
    dwReasonLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpWebSocketQueryCloseStatus(
    hWebSocket: *c_void,
    pusStatus: *u16,
    pvReason: ?[*]u8,
    dwReasonLength: u32,
    pdwReasonLengthConsumed: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetConvertUrlFromWireToWideChar(
    pcszUrl: [*:0]const u8,
    cchUrl: u32,
    pcwszBaseUrl: [*:0]const u16,
    dwCodePageHost: u32,
    dwCodePagePath: u32,
    fEncodePathExtra: BOOL,
    dwCodePageExtra: u32,
    ppwszConvertedUrl: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (81)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const INTERNET_PER_CONN_OPTION = INTERNET_PER_CONN_OPTIONA;
        pub const INTERNET_PER_CONN_OPTION_LIST = INTERNET_PER_CONN_OPTION_LISTA;
        pub const URL_COMPONENTS = URL_COMPONENTSA;
        pub const INTERNET_BUFFERS = INTERNET_BUFFERSA;
        pub const GOPHER_FIND_DATA = GOPHER_FIND_DATAA;
        pub const INTERNET_CACHE_ENTRY_INFO = INTERNET_CACHE_ENTRY_INFOA;
        pub const INTERNET_CACHE_GROUP_INFO = INTERNET_CACHE_GROUP_INFOA;
        pub const INTERNET_CACHE_CONFIG_PATH_ENTRY = INTERNET_CACHE_CONFIG_PATH_ENTRYA;
        pub const INTERNET_CACHE_CONFIG_INFO = INTERNET_CACHE_CONFIG_INFOA;
        pub const INTERNET_CACHE_CONTAINER_INFO = INTERNET_CACHE_CONTAINER_INFOA;
        pub const InternetCrackUrl = InternetCrackUrlA;
        pub const InternetCreateUrl = InternetCreateUrlA;
        pub const InternetCanonicalizeUrl = InternetCanonicalizeUrlA;
        pub const InternetCombineUrl = InternetCombineUrlA;
        pub const InternetOpen = InternetOpenA;
        pub const InternetConnect = InternetConnectA;
        pub const InternetOpenUrl = InternetOpenUrlA;
        pub const InternetReadFileEx = InternetReadFileExA;
        pub const InternetFindNextFile = InternetFindNextFileA;
        pub const InternetQueryOption = InternetQueryOptionA;
        pub const InternetSetOption = InternetSetOptionA;
        pub const InternetSetOptionEx = InternetSetOptionExA;
        pub const InternetGetLastResponseInfo = InternetGetLastResponseInfoA;
        pub const FtpFindFirstFile = FtpFindFirstFileA;
        pub const FtpGetFile = FtpGetFileA;
        pub const FtpPutFile = FtpPutFileA;
        pub const FtpDeleteFile = FtpDeleteFileA;
        pub const FtpRenameFile = FtpRenameFileA;
        pub const FtpOpenFile = FtpOpenFileA;
        pub const FtpCreateDirectory = FtpCreateDirectoryA;
        pub const FtpRemoveDirectory = FtpRemoveDirectoryA;
        pub const FtpSetCurrentDirectory = FtpSetCurrentDirectoryA;
        pub const FtpGetCurrentDirectory = FtpGetCurrentDirectoryA;
        pub const FtpCommand = FtpCommandA;
        pub const GopherCreateLocator = GopherCreateLocatorA;
        pub const GopherGetLocatorType = GopherGetLocatorTypeA;
        pub const GopherFindFirstFile = GopherFindFirstFileA;
        pub const GopherOpenFile = GopherOpenFileA;
        pub const GopherGetAttribute = GopherGetAttributeA;
        pub const HttpOpenRequest = HttpOpenRequestA;
        pub const HttpAddRequestHeaders = HttpAddRequestHeadersA;
        pub const HttpSendRequest = HttpSendRequestA;
        pub const HttpSendRequestEx = HttpSendRequestExA;
        pub const HttpEndRequest = HttpEndRequestA;
        pub const HttpQueryInfo = HttpQueryInfoA;
        pub const InternetSetCookie = InternetSetCookieA;
        pub const InternetGetCookie = InternetGetCookieA;
        pub const InternetSetCookieEx = InternetSetCookieExA;
        pub const InternetGetCookieEx = InternetGetCookieExA;
        pub const InternetCheckConnection = InternetCheckConnectionA;
        pub const CreateUrlCacheEntry = CreateUrlCacheEntryA;
        pub const CommitUrlCacheEntry = CommitUrlCacheEntryA;
        pub const RetrieveUrlCacheEntryFile = RetrieveUrlCacheEntryFileA;
        pub const RetrieveUrlCacheEntryStream = RetrieveUrlCacheEntryStreamA;
        pub const GetUrlCacheEntryInfo = GetUrlCacheEntryInfoA;
        pub const GetUrlCacheGroupAttribute = GetUrlCacheGroupAttributeA;
        pub const SetUrlCacheGroupAttribute = SetUrlCacheGroupAttributeA;
        pub const GetUrlCacheEntryInfoEx = GetUrlCacheEntryInfoExA;
        pub const SetUrlCacheEntryInfo = SetUrlCacheEntryInfoA;
        pub const FindFirstUrlCacheEntryEx = FindFirstUrlCacheEntryExA;
        pub const FindNextUrlCacheEntryEx = FindNextUrlCacheEntryExA;
        pub const FindFirstUrlCacheEntry = FindFirstUrlCacheEntryA;
        pub const FindNextUrlCacheEntry = FindNextUrlCacheEntryA;
        pub const InternetSetPerSiteCookieDecision = InternetSetPerSiteCookieDecisionA;
        pub const InternetGetPerSiteCookieDecision = InternetGetPerSiteCookieDecisionA;
        pub const InternetEnumPerSiteCookieDecision = InternetEnumPerSiteCookieDecisionA;
        pub const InternetAlgIdToString = InternetAlgIdToStringA;
        pub const InternetSecurityProtocolToString = InternetSecurityProtocolToStringA;
        pub const InternetWriteFileEx = InternetWriteFileExA;
        pub const HttpCheckDavCompliance = HttpCheckDavComplianceA;
        pub const IsUrlCacheEntryExpired = IsUrlCacheEntryExpiredA;
        pub const CreateUrlCacheContainer = CreateUrlCacheContainerA;
        pub const DeleteUrlCacheContainer = DeleteUrlCacheContainerA;
        pub const FindFirstUrlCacheContainer = FindFirstUrlCacheContainerA;
        pub const FindNextUrlCacheContainer = FindNextUrlCacheContainerA;
        pub const FreeUrlCacheSpace = FreeUrlCacheSpaceA;
        pub const GetUrlCacheConfigInfo = GetUrlCacheConfigInfoA;
        pub const SetUrlCacheConfigInfo = SetUrlCacheConfigInfoA;
        pub const ImportCookieFile = ImportCookieFileA;
        pub const ExportCookieFile = ExportCookieFileA;
        pub const IsDomainLegalCookieDomain = IsDomainLegalCookieDomainA;
    },
    .wide => struct {
        pub const INTERNET_PER_CONN_OPTION = INTERNET_PER_CONN_OPTIONW;
        pub const INTERNET_PER_CONN_OPTION_LIST = INTERNET_PER_CONN_OPTION_LISTW;
        pub const URL_COMPONENTS = URL_COMPONENTSW;
        pub const INTERNET_BUFFERS = INTERNET_BUFFERSW;
        pub const GOPHER_FIND_DATA = GOPHER_FIND_DATAW;
        pub const INTERNET_CACHE_ENTRY_INFO = INTERNET_CACHE_ENTRY_INFOW;
        pub const INTERNET_CACHE_GROUP_INFO = INTERNET_CACHE_GROUP_INFOW;
        pub const INTERNET_CACHE_CONFIG_PATH_ENTRY = INTERNET_CACHE_CONFIG_PATH_ENTRYW;
        pub const INTERNET_CACHE_CONFIG_INFO = INTERNET_CACHE_CONFIG_INFOW;
        pub const INTERNET_CACHE_CONTAINER_INFO = INTERNET_CACHE_CONTAINER_INFOW;
        pub const InternetCrackUrl = InternetCrackUrlW;
        pub const InternetCreateUrl = InternetCreateUrlW;
        pub const InternetCanonicalizeUrl = InternetCanonicalizeUrlW;
        pub const InternetCombineUrl = InternetCombineUrlW;
        pub const InternetOpen = InternetOpenW;
        pub const InternetConnect = InternetConnectW;
        pub const InternetOpenUrl = InternetOpenUrlW;
        pub const InternetReadFileEx = InternetReadFileExW;
        pub const InternetFindNextFile = InternetFindNextFileW;
        pub const InternetQueryOption = InternetQueryOptionW;
        pub const InternetSetOption = InternetSetOptionW;
        pub const InternetSetOptionEx = InternetSetOptionExW;
        pub const InternetGetLastResponseInfo = InternetGetLastResponseInfoW;
        pub const FtpFindFirstFile = FtpFindFirstFileW;
        pub const FtpGetFile = FtpGetFileW;
        pub const FtpPutFile = FtpPutFileW;
        pub const FtpDeleteFile = FtpDeleteFileW;
        pub const FtpRenameFile = FtpRenameFileW;
        pub const FtpOpenFile = FtpOpenFileW;
        pub const FtpCreateDirectory = FtpCreateDirectoryW;
        pub const FtpRemoveDirectory = FtpRemoveDirectoryW;
        pub const FtpSetCurrentDirectory = FtpSetCurrentDirectoryW;
        pub const FtpGetCurrentDirectory = FtpGetCurrentDirectoryW;
        pub const FtpCommand = FtpCommandW;
        pub const GopherCreateLocator = GopherCreateLocatorW;
        pub const GopherGetLocatorType = GopherGetLocatorTypeW;
        pub const GopherFindFirstFile = GopherFindFirstFileW;
        pub const GopherOpenFile = GopherOpenFileW;
        pub const GopherGetAttribute = GopherGetAttributeW;
        pub const HttpOpenRequest = HttpOpenRequestW;
        pub const HttpAddRequestHeaders = HttpAddRequestHeadersW;
        pub const HttpSendRequest = HttpSendRequestW;
        pub const HttpSendRequestEx = HttpSendRequestExW;
        pub const HttpEndRequest = HttpEndRequestW;
        pub const HttpQueryInfo = HttpQueryInfoW;
        pub const InternetSetCookie = InternetSetCookieW;
        pub const InternetGetCookie = InternetGetCookieW;
        pub const InternetSetCookieEx = InternetSetCookieExW;
        pub const InternetGetCookieEx = InternetGetCookieExW;
        pub const InternetCheckConnection = InternetCheckConnectionW;
        pub const CreateUrlCacheEntry = CreateUrlCacheEntryW;
        pub const CommitUrlCacheEntry = CommitUrlCacheEntryW;
        pub const RetrieveUrlCacheEntryFile = RetrieveUrlCacheEntryFileW;
        pub const RetrieveUrlCacheEntryStream = RetrieveUrlCacheEntryStreamW;
        pub const GetUrlCacheEntryInfo = GetUrlCacheEntryInfoW;
        pub const GetUrlCacheGroupAttribute = GetUrlCacheGroupAttributeW;
        pub const SetUrlCacheGroupAttribute = SetUrlCacheGroupAttributeW;
        pub const GetUrlCacheEntryInfoEx = GetUrlCacheEntryInfoExW;
        pub const SetUrlCacheEntryInfo = SetUrlCacheEntryInfoW;
        pub const FindFirstUrlCacheEntryEx = FindFirstUrlCacheEntryExW;
        pub const FindNextUrlCacheEntryEx = FindNextUrlCacheEntryExW;
        pub const FindFirstUrlCacheEntry = FindFirstUrlCacheEntryW;
        pub const FindNextUrlCacheEntry = FindNextUrlCacheEntryW;
        pub const InternetSetPerSiteCookieDecision = InternetSetPerSiteCookieDecisionW;
        pub const InternetGetPerSiteCookieDecision = InternetGetPerSiteCookieDecisionW;
        pub const InternetEnumPerSiteCookieDecision = InternetEnumPerSiteCookieDecisionW;
        pub const InternetAlgIdToString = InternetAlgIdToStringW;
        pub const InternetSecurityProtocolToString = InternetSecurityProtocolToStringW;
        pub const InternetWriteFileEx = InternetWriteFileExW;
        pub const HttpCheckDavCompliance = HttpCheckDavComplianceW;
        pub const IsUrlCacheEntryExpired = IsUrlCacheEntryExpiredW;
        pub const CreateUrlCacheContainer = CreateUrlCacheContainerW;
        pub const DeleteUrlCacheContainer = DeleteUrlCacheContainerW;
        pub const FindFirstUrlCacheContainer = FindFirstUrlCacheContainerW;
        pub const FindNextUrlCacheContainer = FindNextUrlCacheContainerW;
        pub const FreeUrlCacheSpace = FreeUrlCacheSpaceW;
        pub const GetUrlCacheConfigInfo = GetUrlCacheConfigInfoW;
        pub const SetUrlCacheConfigInfo = SetUrlCacheConfigInfoW;
        pub const ImportCookieFile = ImportCookieFileW;
        pub const ExportCookieFile = ExportCookieFileW;
        pub const IsDomainLegalCookieDomain = IsDomainLegalCookieDomainW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const INTERNET_PER_CONN_OPTION = *opaque{};
        pub const INTERNET_PER_CONN_OPTION_LIST = *opaque{};
        pub const URL_COMPONENTS = *opaque{};
        pub const INTERNET_BUFFERS = *opaque{};
        pub const GOPHER_FIND_DATA = *opaque{};
        pub const INTERNET_CACHE_ENTRY_INFO = *opaque{};
        pub const INTERNET_CACHE_GROUP_INFO = *opaque{};
        pub const INTERNET_CACHE_CONFIG_PATH_ENTRY = *opaque{};
        pub const INTERNET_CACHE_CONFIG_INFO = *opaque{};
        pub const INTERNET_CACHE_CONTAINER_INFO = *opaque{};
        pub const InternetCrackUrl = *opaque{};
        pub const InternetCreateUrl = *opaque{};
        pub const InternetCanonicalizeUrl = *opaque{};
        pub const InternetCombineUrl = *opaque{};
        pub const InternetOpen = *opaque{};
        pub const InternetConnect = *opaque{};
        pub const InternetOpenUrl = *opaque{};
        pub const InternetReadFileEx = *opaque{};
        pub const InternetFindNextFile = *opaque{};
        pub const InternetQueryOption = *opaque{};
        pub const InternetSetOption = *opaque{};
        pub const InternetSetOptionEx = *opaque{};
        pub const InternetGetLastResponseInfo = *opaque{};
        pub const FtpFindFirstFile = *opaque{};
        pub const FtpGetFile = *opaque{};
        pub const FtpPutFile = *opaque{};
        pub const FtpDeleteFile = *opaque{};
        pub const FtpRenameFile = *opaque{};
        pub const FtpOpenFile = *opaque{};
        pub const FtpCreateDirectory = *opaque{};
        pub const FtpRemoveDirectory = *opaque{};
        pub const FtpSetCurrentDirectory = *opaque{};
        pub const FtpGetCurrentDirectory = *opaque{};
        pub const FtpCommand = *opaque{};
        pub const GopherCreateLocator = *opaque{};
        pub const GopherGetLocatorType = *opaque{};
        pub const GopherFindFirstFile = *opaque{};
        pub const GopherOpenFile = *opaque{};
        pub const GopherGetAttribute = *opaque{};
        pub const HttpOpenRequest = *opaque{};
        pub const HttpAddRequestHeaders = *opaque{};
        pub const HttpSendRequest = *opaque{};
        pub const HttpSendRequestEx = *opaque{};
        pub const HttpEndRequest = *opaque{};
        pub const HttpQueryInfo = *opaque{};
        pub const InternetSetCookie = *opaque{};
        pub const InternetGetCookie = *opaque{};
        pub const InternetSetCookieEx = *opaque{};
        pub const InternetGetCookieEx = *opaque{};
        pub const InternetCheckConnection = *opaque{};
        pub const CreateUrlCacheEntry = *opaque{};
        pub const CommitUrlCacheEntry = *opaque{};
        pub const RetrieveUrlCacheEntryFile = *opaque{};
        pub const RetrieveUrlCacheEntryStream = *opaque{};
        pub const GetUrlCacheEntryInfo = *opaque{};
        pub const GetUrlCacheGroupAttribute = *opaque{};
        pub const SetUrlCacheGroupAttribute = *opaque{};
        pub const GetUrlCacheEntryInfoEx = *opaque{};
        pub const SetUrlCacheEntryInfo = *opaque{};
        pub const FindFirstUrlCacheEntryEx = *opaque{};
        pub const FindNextUrlCacheEntryEx = *opaque{};
        pub const FindFirstUrlCacheEntry = *opaque{};
        pub const FindNextUrlCacheEntry = *opaque{};
        pub const InternetSetPerSiteCookieDecision = *opaque{};
        pub const InternetGetPerSiteCookieDecision = *opaque{};
        pub const InternetEnumPerSiteCookieDecision = *opaque{};
        pub const InternetAlgIdToString = *opaque{};
        pub const InternetSecurityProtocolToString = *opaque{};
        pub const InternetWriteFileEx = *opaque{};
        pub const HttpCheckDavCompliance = *opaque{};
        pub const IsUrlCacheEntryExpired = *opaque{};
        pub const CreateUrlCacheContainer = *opaque{};
        pub const DeleteUrlCacheContainer = *opaque{};
        pub const FindFirstUrlCacheContainer = *opaque{};
        pub const FindNextUrlCacheContainer = *opaque{};
        pub const FreeUrlCacheSpace = *opaque{};
        pub const GetUrlCacheConfigInfo = *opaque{};
        pub const SetUrlCacheConfigInfo = *opaque{};
        pub const ImportCookieFile = *opaque{};
        pub const ExportCookieFile = *opaque{};
        pub const IsDomainLegalCookieDomain = *opaque{};
    } else struct {
        pub const INTERNET_PER_CONN_OPTION = @compileError("'INTERNET_PER_CONN_OPTION' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_PER_CONN_OPTION_LIST = @compileError("'INTERNET_PER_CONN_OPTION_LIST' requires that UNICODE be set to true or false in the root module");
        pub const URL_COMPONENTS = @compileError("'URL_COMPONENTS' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_BUFFERS = @compileError("'INTERNET_BUFFERS' requires that UNICODE be set to true or false in the root module");
        pub const GOPHER_FIND_DATA = @compileError("'GOPHER_FIND_DATA' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_CACHE_ENTRY_INFO = @compileError("'INTERNET_CACHE_ENTRY_INFO' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_CACHE_GROUP_INFO = @compileError("'INTERNET_CACHE_GROUP_INFO' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_CACHE_CONFIG_PATH_ENTRY = @compileError("'INTERNET_CACHE_CONFIG_PATH_ENTRY' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_CACHE_CONFIG_INFO = @compileError("'INTERNET_CACHE_CONFIG_INFO' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_CACHE_CONTAINER_INFO = @compileError("'INTERNET_CACHE_CONTAINER_INFO' requires that UNICODE be set to true or false in the root module");
        pub const InternetCrackUrl = @compileError("'InternetCrackUrl' requires that UNICODE be set to true or false in the root module");
        pub const InternetCreateUrl = @compileError("'InternetCreateUrl' requires that UNICODE be set to true or false in the root module");
        pub const InternetCanonicalizeUrl = @compileError("'InternetCanonicalizeUrl' requires that UNICODE be set to true or false in the root module");
        pub const InternetCombineUrl = @compileError("'InternetCombineUrl' requires that UNICODE be set to true or false in the root module");
        pub const InternetOpen = @compileError("'InternetOpen' requires that UNICODE be set to true or false in the root module");
        pub const InternetConnect = @compileError("'InternetConnect' requires that UNICODE be set to true or false in the root module");
        pub const InternetOpenUrl = @compileError("'InternetOpenUrl' requires that UNICODE be set to true or false in the root module");
        pub const InternetReadFileEx = @compileError("'InternetReadFileEx' requires that UNICODE be set to true or false in the root module");
        pub const InternetFindNextFile = @compileError("'InternetFindNextFile' requires that UNICODE be set to true or false in the root module");
        pub const InternetQueryOption = @compileError("'InternetQueryOption' requires that UNICODE be set to true or false in the root module");
        pub const InternetSetOption = @compileError("'InternetSetOption' requires that UNICODE be set to true or false in the root module");
        pub const InternetSetOptionEx = @compileError("'InternetSetOptionEx' requires that UNICODE be set to true or false in the root module");
        pub const InternetGetLastResponseInfo = @compileError("'InternetGetLastResponseInfo' requires that UNICODE be set to true or false in the root module");
        pub const FtpFindFirstFile = @compileError("'FtpFindFirstFile' requires that UNICODE be set to true or false in the root module");
        pub const FtpGetFile = @compileError("'FtpGetFile' requires that UNICODE be set to true or false in the root module");
        pub const FtpPutFile = @compileError("'FtpPutFile' requires that UNICODE be set to true or false in the root module");
        pub const FtpDeleteFile = @compileError("'FtpDeleteFile' requires that UNICODE be set to true or false in the root module");
        pub const FtpRenameFile = @compileError("'FtpRenameFile' requires that UNICODE be set to true or false in the root module");
        pub const FtpOpenFile = @compileError("'FtpOpenFile' requires that UNICODE be set to true or false in the root module");
        pub const FtpCreateDirectory = @compileError("'FtpCreateDirectory' requires that UNICODE be set to true or false in the root module");
        pub const FtpRemoveDirectory = @compileError("'FtpRemoveDirectory' requires that UNICODE be set to true or false in the root module");
        pub const FtpSetCurrentDirectory = @compileError("'FtpSetCurrentDirectory' requires that UNICODE be set to true or false in the root module");
        pub const FtpGetCurrentDirectory = @compileError("'FtpGetCurrentDirectory' requires that UNICODE be set to true or false in the root module");
        pub const FtpCommand = @compileError("'FtpCommand' requires that UNICODE be set to true or false in the root module");
        pub const GopherCreateLocator = @compileError("'GopherCreateLocator' requires that UNICODE be set to true or false in the root module");
        pub const GopherGetLocatorType = @compileError("'GopherGetLocatorType' requires that UNICODE be set to true or false in the root module");
        pub const GopherFindFirstFile = @compileError("'GopherFindFirstFile' requires that UNICODE be set to true or false in the root module");
        pub const GopherOpenFile = @compileError("'GopherOpenFile' requires that UNICODE be set to true or false in the root module");
        pub const GopherGetAttribute = @compileError("'GopherGetAttribute' requires that UNICODE be set to true or false in the root module");
        pub const HttpOpenRequest = @compileError("'HttpOpenRequest' requires that UNICODE be set to true or false in the root module");
        pub const HttpAddRequestHeaders = @compileError("'HttpAddRequestHeaders' requires that UNICODE be set to true or false in the root module");
        pub const HttpSendRequest = @compileError("'HttpSendRequest' requires that UNICODE be set to true or false in the root module");
        pub const HttpSendRequestEx = @compileError("'HttpSendRequestEx' requires that UNICODE be set to true or false in the root module");
        pub const HttpEndRequest = @compileError("'HttpEndRequest' requires that UNICODE be set to true or false in the root module");
        pub const HttpQueryInfo = @compileError("'HttpQueryInfo' requires that UNICODE be set to true or false in the root module");
        pub const InternetSetCookie = @compileError("'InternetSetCookie' requires that UNICODE be set to true or false in the root module");
        pub const InternetGetCookie = @compileError("'InternetGetCookie' requires that UNICODE be set to true or false in the root module");
        pub const InternetSetCookieEx = @compileError("'InternetSetCookieEx' requires that UNICODE be set to true or false in the root module");
        pub const InternetGetCookieEx = @compileError("'InternetGetCookieEx' requires that UNICODE be set to true or false in the root module");
        pub const InternetCheckConnection = @compileError("'InternetCheckConnection' requires that UNICODE be set to true or false in the root module");
        pub const CreateUrlCacheEntry = @compileError("'CreateUrlCacheEntry' requires that UNICODE be set to true or false in the root module");
        pub const CommitUrlCacheEntry = @compileError("'CommitUrlCacheEntry' requires that UNICODE be set to true or false in the root module");
        pub const RetrieveUrlCacheEntryFile = @compileError("'RetrieveUrlCacheEntryFile' requires that UNICODE be set to true or false in the root module");
        pub const RetrieveUrlCacheEntryStream = @compileError("'RetrieveUrlCacheEntryStream' requires that UNICODE be set to true or false in the root module");
        pub const GetUrlCacheEntryInfo = @compileError("'GetUrlCacheEntryInfo' requires that UNICODE be set to true or false in the root module");
        pub const GetUrlCacheGroupAttribute = @compileError("'GetUrlCacheGroupAttribute' requires that UNICODE be set to true or false in the root module");
        pub const SetUrlCacheGroupAttribute = @compileError("'SetUrlCacheGroupAttribute' requires that UNICODE be set to true or false in the root module");
        pub const GetUrlCacheEntryInfoEx = @compileError("'GetUrlCacheEntryInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const SetUrlCacheEntryInfo = @compileError("'SetUrlCacheEntryInfo' requires that UNICODE be set to true or false in the root module");
        pub const FindFirstUrlCacheEntryEx = @compileError("'FindFirstUrlCacheEntryEx' requires that UNICODE be set to true or false in the root module");
        pub const FindNextUrlCacheEntryEx = @compileError("'FindNextUrlCacheEntryEx' requires that UNICODE be set to true or false in the root module");
        pub const FindFirstUrlCacheEntry = @compileError("'FindFirstUrlCacheEntry' requires that UNICODE be set to true or false in the root module");
        pub const FindNextUrlCacheEntry = @compileError("'FindNextUrlCacheEntry' requires that UNICODE be set to true or false in the root module");
        pub const InternetSetPerSiteCookieDecision = @compileError("'InternetSetPerSiteCookieDecision' requires that UNICODE be set to true or false in the root module");
        pub const InternetGetPerSiteCookieDecision = @compileError("'InternetGetPerSiteCookieDecision' requires that UNICODE be set to true or false in the root module");
        pub const InternetEnumPerSiteCookieDecision = @compileError("'InternetEnumPerSiteCookieDecision' requires that UNICODE be set to true or false in the root module");
        pub const InternetAlgIdToString = @compileError("'InternetAlgIdToString' requires that UNICODE be set to true or false in the root module");
        pub const InternetSecurityProtocolToString = @compileError("'InternetSecurityProtocolToString' requires that UNICODE be set to true or false in the root module");
        pub const InternetWriteFileEx = @compileError("'InternetWriteFileEx' requires that UNICODE be set to true or false in the root module");
        pub const HttpCheckDavCompliance = @compileError("'HttpCheckDavCompliance' requires that UNICODE be set to true or false in the root module");
        pub const IsUrlCacheEntryExpired = @compileError("'IsUrlCacheEntryExpired' requires that UNICODE be set to true or false in the root module");
        pub const CreateUrlCacheContainer = @compileError("'CreateUrlCacheContainer' requires that UNICODE be set to true or false in the root module");
        pub const DeleteUrlCacheContainer = @compileError("'DeleteUrlCacheContainer' requires that UNICODE be set to true or false in the root module");
        pub const FindFirstUrlCacheContainer = @compileError("'FindFirstUrlCacheContainer' requires that UNICODE be set to true or false in the root module");
        pub const FindNextUrlCacheContainer = @compileError("'FindNextUrlCacheContainer' requires that UNICODE be set to true or false in the root module");
        pub const FreeUrlCacheSpace = @compileError("'FreeUrlCacheSpace' requires that UNICODE be set to true or false in the root module");
        pub const GetUrlCacheConfigInfo = @compileError("'GetUrlCacheConfigInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetUrlCacheConfigInfo = @compileError("'SetUrlCacheConfigInfo' requires that UNICODE be set to true or false in the root module");
        pub const ImportCookieFile = @compileError("'ImportCookieFile' requires that UNICODE be set to true or false in the root module");
        pub const ExportCookieFile = @compileError("'ExportCookieFile' requires that UNICODE be set to true or false in the root module");
        pub const IsDomainLegalCookieDomain = @compileError("'IsDomainLegalCookieDomain' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (21)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const PWSTR = @import("system_services.zig").PWSTR;
const FILETIME = @import("windows_programming.zig").FILETIME;
const CERT_CONTEXT = @import("security.zig").CERT_CONTEXT;
const IUnknown = @import("com.zig").IUnknown;
const CERT_CHAIN_CONTEXT = @import("security.zig").CERT_CHAIN_CONTEXT;
const HRESULT = @import("com.zig").HRESULT;
const HINSTANCE = @import("system_services.zig").HINSTANCE;
const SecPkgContext_Bindings = @import("security.zig").SecPkgContext_Bindings;
const BSTR = @import("automation.zig").BSTR;
const PSTR = @import("system_services.zig").PSTR;
const HBITMAP = @import("gdi.zig").HBITMAP;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const SecPkgContext_CipherInfo = @import("security.zig").SecPkgContext_CipherInfo;
const IInspectable = @import("win_rt.zig").IInspectable;
const WIN32_FIND_DATAW = @import("file_system.zig").WIN32_FIND_DATAW;
const SecPkgContext_ConnectionInfo = @import("security.zig").SecPkgContext_ConnectionInfo;
const SYSTEMTIME = @import("windows_programming.zig").SYSTEMTIME;
const HANDLE = @import("system_services.zig").HANDLE;
const WIN32_FIND_DATAA = @import("file_system.zig").WIN32_FIND_DATAA;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = INTERNET_STATUS_CALLBACK;
    _ = LPINTERNET_STATUS_CALLBACK;
    _ = GOPHER_ATTRIBUTE_ENUMERATOR;
    _ = PFN_AUTH_NOTIFY;
    _ = pfnInternetInitializeAutoProxyDll;
    _ = pfnInternetDeInitializeAutoProxyDll;
    _ = pfnInternetGetProxyInfo;
    _ = PFN_DIAL_HANDLER;
    _ = CACHE_OPERATOR;

    const constant_export_count = 0;
    const type_export_count = 106;
    const enum_value_export_count = 80;
    const com_iface_id_export_count = 5;
    const com_class_id_export_count = 1;
    const func_export_count = 296;
    const unicode_alias_count = 81;
    const import_count = 21;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

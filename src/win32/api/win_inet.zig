//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (680)
//--------------------------------------------------------------------------------
pub const DIALENG_OperationComplete : u32 = 65536;
pub const DIALENG_RedialAttempt : u32 = 65537;
pub const DIALENG_RedialWait : u32 = 65538;
pub const INTERNET_INVALID_PORT_NUMBER : u32 = 0;
pub const INTERNET_DEFAULT_FTP_PORT : u32 = 21;
pub const INTERNET_DEFAULT_GOPHER_PORT : u32 = 70;
pub const INTERNET_DEFAULT_SOCKS_PORT : u32 = 1080;
pub const INTERNET_MAX_HOST_NAME_LENGTH : u32 = 256;
pub const INTERNET_MAX_USER_NAME_LENGTH : u32 = 128;
pub const INTERNET_MAX_PASSWORD_LENGTH : u32 = 128;
pub const INTERNET_MAX_PORT_NUMBER_LENGTH : u32 = 5;
pub const INTERNET_MAX_PORT_NUMBER_VALUE : u32 = 65535;
pub const INTERNET_KEEP_ALIVE_ENABLED : u32 = 1;
pub const INTERNET_KEEP_ALIVE_DISABLED : u32 = 0;
pub const INTERNET_REQFLAG_FROM_CACHE : u32 = 1;
pub const INTERNET_REQFLAG_ASYNC : u32 = 2;
pub const INTERNET_REQFLAG_VIA_PROXY : u32 = 4;
pub const INTERNET_REQFLAG_NO_HEADERS : u32 = 8;
pub const INTERNET_REQFLAG_PASSIVE : u32 = 16;
pub const INTERNET_REQFLAG_CACHE_WRITE_DISABLED : u32 = 64;
pub const INTERNET_REQFLAG_NET_TIMEOUT : u32 = 128;
pub const INTERNET_FLAG_IDN_DIRECT : u32 = 1;
pub const INTERNET_FLAG_IDN_PROXY : u32 = 2;
pub const INTERNET_FLAG_RELOAD : u32 = 2147483648;
pub const INTERNET_FLAG_RAW_DATA : u32 = 1073741824;
pub const INTERNET_FLAG_EXISTING_CONNECT : u32 = 536870912;
pub const INTERNET_FLAG_ASYNC : u32 = 268435456;
pub const INTERNET_FLAG_PASSIVE : u32 = 134217728;
pub const INTERNET_FLAG_NO_CACHE_WRITE : u32 = 67108864;
pub const INTERNET_FLAG_MAKE_PERSISTENT : u32 = 33554432;
pub const INTERNET_FLAG_FROM_CACHE : u32 = 16777216;
pub const INTERNET_FLAG_SECURE : u32 = 8388608;
pub const INTERNET_FLAG_KEEP_CONNECTION : u32 = 4194304;
pub const INTERNET_FLAG_NO_AUTO_REDIRECT : u32 = 2097152;
pub const INTERNET_FLAG_READ_PREFETCH : u32 = 1048576;
pub const INTERNET_FLAG_NO_COOKIES : u32 = 524288;
pub const INTERNET_FLAG_NO_AUTH : u32 = 262144;
pub const INTERNET_FLAG_CACHE_IF_NET_FAIL : u32 = 65536;
pub const INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP : u32 = 32768;
pub const INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS : u32 = 16384;
pub const INTERNET_FLAG_IGNORE_CERT_DATE_INVALID : u32 = 8192;
pub const INTERNET_FLAG_IGNORE_CERT_CN_INVALID : u32 = 4096;
pub const INTERNET_FLAG_RESYNCHRONIZE : u32 = 2048;
pub const INTERNET_FLAG_HYPERLINK : u32 = 1024;
pub const INTERNET_FLAG_NO_UI : u32 = 512;
pub const INTERNET_FLAG_PRAGMA_NOCACHE : u32 = 256;
pub const INTERNET_FLAG_CACHE_ASYNC : u32 = 128;
pub const INTERNET_FLAG_FORMS_SUBMIT : u32 = 64;
pub const INTERNET_FLAG_FWD_BACK : u32 = 32;
pub const INTERNET_FLAG_NEED_FILE : u32 = 16;
pub const INTERNET_ERROR_MASK_INSERT_CDROM : u32 = 1;
pub const INTERNET_ERROR_MASK_COMBINED_SEC_CERT : u32 = 2;
pub const INTERNET_ERROR_MASK_NEED_MSN_SSPI_PKG : u32 = 4;
pub const INTERNET_ERROR_MASK_LOGIN_FAILURE_DISPLAY_ENTITY_BODY : u32 = 8;
pub const WININET_API_FLAG_ASYNC : u32 = 1;
pub const WININET_API_FLAG_SYNC : u32 = 4;
pub const WININET_API_FLAG_USE_CONTEXT : u32 = 8;
pub const INTERNET_NO_CALLBACK : u32 = 0;
pub const IDSI_FLAG_KEEP_ALIVE : u32 = 1;
pub const IDSI_FLAG_SECURE : u32 = 2;
pub const IDSI_FLAG_PROXY : u32 = 4;
pub const IDSI_FLAG_TUNNEL : u32 = 8;
pub const INTERNET_PER_CONN_FLAGS_UI : u32 = 10;
pub const PROXY_TYPE_DIRECT : u32 = 1;
pub const PROXY_TYPE_PROXY : u32 = 2;
pub const PROXY_TYPE_AUTO_PROXY_URL : u32 = 4;
pub const PROXY_TYPE_AUTO_DETECT : u32 = 8;
pub const AUTO_PROXY_FLAG_USER_SET : u32 = 1;
pub const AUTO_PROXY_FLAG_ALWAYS_DETECT : u32 = 2;
pub const AUTO_PROXY_FLAG_DETECTION_RUN : u32 = 4;
pub const AUTO_PROXY_FLAG_MIGRATED : u32 = 8;
pub const AUTO_PROXY_FLAG_DONT_CACHE_PROXY_RESULT : u32 = 16;
pub const AUTO_PROXY_FLAG_CACHE_INIT_RUN : u32 = 32;
pub const AUTO_PROXY_FLAG_DETECTION_SUSPECT : u32 = 64;
pub const ISO_FORCE_DISCONNECTED : u32 = 1;
pub const INTERNET_RFC1123_FORMAT : u32 = 0;
pub const INTERNET_RFC1123_BUFSIZE : u32 = 30;
pub const ICU_USERNAME : u32 = 1073741824;
pub const INTERNET_OPEN_TYPE_PRECONFIG_WITH_NO_AUTOPROXY : u32 = 4;
pub const INTERNET_SERVICE_FTP : u32 = 1;
pub const INTERNET_SERVICE_GOPHER : u32 = 2;
pub const INTERNET_SERVICE_HTTP : u32 = 3;
pub const IRF_NO_WAIT : u32 = 8;
pub const ISO_GLOBAL : u32 = 1;
pub const ISO_REGISTRY : u32 = 2;
pub const INTERNET_OPTION_CALLBACK : u32 = 1;
pub const INTERNET_OPTION_CONNECT_TIMEOUT : u32 = 2;
pub const INTERNET_OPTION_CONNECT_RETRIES : u32 = 3;
pub const INTERNET_OPTION_CONNECT_BACKOFF : u32 = 4;
pub const INTERNET_OPTION_SEND_TIMEOUT : u32 = 5;
pub const INTERNET_OPTION_RECEIVE_TIMEOUT : u32 = 6;
pub const INTERNET_OPTION_DATA_SEND_TIMEOUT : u32 = 7;
pub const INTERNET_OPTION_DATA_RECEIVE_TIMEOUT : u32 = 8;
pub const INTERNET_OPTION_HANDLE_TYPE : u32 = 9;
pub const INTERNET_OPTION_LISTEN_TIMEOUT : u32 = 11;
pub const INTERNET_OPTION_READ_BUFFER_SIZE : u32 = 12;
pub const INTERNET_OPTION_WRITE_BUFFER_SIZE : u32 = 13;
pub const INTERNET_OPTION_ASYNC_ID : u32 = 15;
pub const INTERNET_OPTION_ASYNC_PRIORITY : u32 = 16;
pub const INTERNET_OPTION_PARENT_HANDLE : u32 = 21;
pub const INTERNET_OPTION_KEEP_CONNECTION : u32 = 22;
pub const INTERNET_OPTION_REQUEST_FLAGS : u32 = 23;
pub const INTERNET_OPTION_EXTENDED_ERROR : u32 = 24;
pub const INTERNET_OPTION_OFFLINE_MODE : u32 = 26;
pub const INTERNET_OPTION_CACHE_STREAM_HANDLE : u32 = 27;
pub const INTERNET_OPTION_USERNAME : u32 = 28;
pub const INTERNET_OPTION_PASSWORD : u32 = 29;
pub const INTERNET_OPTION_ASYNC : u32 = 30;
pub const INTERNET_OPTION_SECURITY_FLAGS : u32 = 31;
pub const INTERNET_OPTION_SECURITY_CERTIFICATE_STRUCT : u32 = 32;
pub const INTERNET_OPTION_DATAFILE_NAME : u32 = 33;
pub const INTERNET_OPTION_URL : u32 = 34;
pub const INTERNET_OPTION_SECURITY_CERTIFICATE : u32 = 35;
pub const INTERNET_OPTION_SECURITY_KEY_BITNESS : u32 = 36;
pub const INTERNET_OPTION_REFRESH : u32 = 37;
pub const INTERNET_OPTION_PROXY : u32 = 38;
pub const INTERNET_OPTION_SETTINGS_CHANGED : u32 = 39;
pub const INTERNET_OPTION_VERSION : u32 = 40;
pub const INTERNET_OPTION_USER_AGENT : u32 = 41;
pub const INTERNET_OPTION_END_BROWSER_SESSION : u32 = 42;
pub const INTERNET_OPTION_PROXY_USERNAME : u32 = 43;
pub const INTERNET_OPTION_PROXY_PASSWORD : u32 = 44;
pub const INTERNET_OPTION_CONTEXT_VALUE : u32 = 45;
pub const INTERNET_OPTION_CONNECT_LIMIT : u32 = 46;
pub const INTERNET_OPTION_SECURITY_SELECT_CLIENT_CERT : u32 = 47;
pub const INTERNET_OPTION_POLICY : u32 = 48;
pub const INTERNET_OPTION_DISCONNECTED_TIMEOUT : u32 = 49;
pub const INTERNET_OPTION_CONNECTED_STATE : u32 = 50;
pub const INTERNET_OPTION_IDLE_STATE : u32 = 51;
pub const INTERNET_OPTION_OFFLINE_SEMANTICS : u32 = 52;
pub const INTERNET_OPTION_SECONDARY_CACHE_KEY : u32 = 53;
pub const INTERNET_OPTION_CALLBACK_FILTER : u32 = 54;
pub const INTERNET_OPTION_CONNECT_TIME : u32 = 55;
pub const INTERNET_OPTION_SEND_THROUGHPUT : u32 = 56;
pub const INTERNET_OPTION_RECEIVE_THROUGHPUT : u32 = 57;
pub const INTERNET_OPTION_REQUEST_PRIORITY : u32 = 58;
pub const INTERNET_OPTION_HTTP_VERSION : u32 = 59;
pub const INTERNET_OPTION_RESET_URLCACHE_SESSION : u32 = 60;
pub const INTERNET_OPTION_ERROR_MASK : u32 = 62;
pub const INTERNET_OPTION_FROM_CACHE_TIMEOUT : u32 = 63;
pub const INTERNET_OPTION_BYPASS_EDITED_ENTRY : u32 = 64;
pub const INTERNET_OPTION_HTTP_DECODING : u32 = 65;
pub const INTERNET_OPTION_DIAGNOSTIC_SOCKET_INFO : u32 = 67;
pub const INTERNET_OPTION_CODEPAGE : u32 = 68;
pub const INTERNET_OPTION_CACHE_TIMESTAMPS : u32 = 69;
pub const INTERNET_OPTION_DISABLE_AUTODIAL : u32 = 70;
pub const INTERNET_OPTION_MAX_CONNS_PER_SERVER : u32 = 73;
pub const INTERNET_OPTION_MAX_CONNS_PER_1_0_SERVER : u32 = 74;
pub const INTERNET_OPTION_PER_CONNECTION_OPTION : u32 = 75;
pub const INTERNET_OPTION_DIGEST_AUTH_UNLOAD : u32 = 76;
pub const INTERNET_OPTION_IGNORE_OFFLINE : u32 = 77;
pub const INTERNET_OPTION_IDENTITY : u32 = 78;
pub const INTERNET_OPTION_REMOVE_IDENTITY : u32 = 79;
pub const INTERNET_OPTION_ALTER_IDENTITY : u32 = 80;
pub const INTERNET_OPTION_SUPPRESS_BEHAVIOR : u32 = 81;
pub const INTERNET_OPTION_AUTODIAL_MODE : u32 = 82;
pub const INTERNET_OPTION_AUTODIAL_CONNECTION : u32 = 83;
pub const INTERNET_OPTION_CLIENT_CERT_CONTEXT : u32 = 84;
pub const INTERNET_OPTION_AUTH_FLAGS : u32 = 85;
pub const INTERNET_OPTION_COOKIES_3RD_PARTY : u32 = 86;
pub const INTERNET_OPTION_DISABLE_PASSPORT_AUTH : u32 = 87;
pub const INTERNET_OPTION_SEND_UTF8_SERVERNAME_TO_PROXY : u32 = 88;
pub const INTERNET_OPTION_EXEMPT_CONNECTION_LIMIT : u32 = 89;
pub const INTERNET_OPTION_ENABLE_PASSPORT_AUTH : u32 = 90;
pub const INTERNET_OPTION_HIBERNATE_INACTIVE_WORKER_THREADS : u32 = 91;
pub const INTERNET_OPTION_ACTIVATE_WORKER_THREADS : u32 = 92;
pub const INTERNET_OPTION_RESTORE_WORKER_THREAD_DEFAULTS : u32 = 93;
pub const INTERNET_OPTION_SOCKET_SEND_BUFFER_LENGTH : u32 = 94;
pub const INTERNET_OPTION_PROXY_SETTINGS_CHANGED : u32 = 95;
pub const INTERNET_OPTION_DATAFILE_EXT : u32 = 96;
pub const INTERNET_OPTION_CODEPAGE_PATH : u32 = 100;
pub const INTERNET_OPTION_CODEPAGE_EXTRA : u32 = 101;
pub const INTERNET_OPTION_IDN : u32 = 102;
pub const INTERNET_OPTION_MAX_CONNS_PER_PROXY : u32 = 103;
pub const INTERNET_OPTION_SUPPRESS_SERVER_AUTH : u32 = 104;
pub const INTERNET_OPTION_SERVER_CERT_CHAIN_CONTEXT : u32 = 105;
pub const INTERNET_OPTION_ENABLE_REDIRECT_CACHE_READ : u32 = 122;
pub const INTERNET_OPTION_COMPRESSED_CONTENT_LENGTH : u32 = 147;
pub const INTERNET_OPTION_ENABLE_HTTP_PROTOCOL : u32 = 148;
pub const INTERNET_OPTION_HTTP_PROTOCOL_USED : u32 = 149;
pub const INTERNET_OPTION_ENCODE_EXTRA : u32 = 155;
pub const INTERNET_OPTION_HSTS : u32 = 157;
pub const INTERNET_OPTION_ENTERPRISE_CONTEXT : u32 = 159;
pub const INTERNET_OPTION_CONNECTION_FILTER : u32 = 162;
pub const INTERNET_OPTION_REFERER_TOKEN_BINDING_HOSTNAME : u32 = 163;
pub const INTERNET_OPTION_TOKEN_BINDING_PUBLIC_KEY : u32 = 181;
pub const INTERNET_OPTION_COOKIES_SAME_SITE_LEVEL : u32 = 187;
pub const INTERNET_PRIORITY_FOREGROUND : u32 = 1000;
pub const HTTP_COOKIES_SAME_SITE_LEVEL_UNKNOWN : u32 = 0;
pub const HTTP_COOKIES_SAME_SITE_LEVEL_SAME_SITE : u32 = 1;
pub const HTTP_COOKIES_SAME_SITE_LEVEL_CROSS_SITE_LAX : u32 = 2;
pub const HTTP_COOKIES_SAME_SITE_LEVEL_CROSS_SITE : u32 = 3;
pub const HTTP_PROTOCOL_FLAG_HTTP2 : u32 = 2;
pub const INTERNET_HANDLE_TYPE_INTERNET : u32 = 1;
pub const INTERNET_HANDLE_TYPE_CONNECT_FTP : u32 = 2;
pub const INTERNET_HANDLE_TYPE_CONNECT_GOPHER : u32 = 3;
pub const INTERNET_HANDLE_TYPE_CONNECT_HTTP : u32 = 4;
pub const INTERNET_HANDLE_TYPE_FTP_FIND : u32 = 5;
pub const INTERNET_HANDLE_TYPE_FTP_FIND_HTML : u32 = 6;
pub const INTERNET_HANDLE_TYPE_FTP_FILE : u32 = 7;
pub const INTERNET_HANDLE_TYPE_FTP_FILE_HTML : u32 = 8;
pub const INTERNET_HANDLE_TYPE_GOPHER_FIND : u32 = 9;
pub const INTERNET_HANDLE_TYPE_GOPHER_FIND_HTML : u32 = 10;
pub const INTERNET_HANDLE_TYPE_GOPHER_FILE : u32 = 11;
pub const INTERNET_HANDLE_TYPE_GOPHER_FILE_HTML : u32 = 12;
pub const INTERNET_HANDLE_TYPE_HTTP_REQUEST : u32 = 13;
pub const INTERNET_HANDLE_TYPE_FILE_REQUEST : u32 = 14;
pub const AUTH_FLAG_DISABLE_NEGOTIATE : u32 = 1;
pub const AUTH_FLAG_ENABLE_NEGOTIATE : u32 = 2;
pub const AUTH_FLAG_DISABLE_BASIC_CLEARCHANNEL : u32 = 4;
pub const AUTH_FLAG_DISABLE_SERVER_AUTH : u32 = 8;
pub const SECURITY_FLAG_UNKNOWNBIT : u32 = 2147483648;
pub const SECURITY_FLAG_FORTEZZA : u32 = 134217728;
pub const SECURITY_FLAG_SSL : u32 = 2;
pub const SECURITY_FLAG_SSL3 : u32 = 4;
pub const SECURITY_FLAG_PCT : u32 = 8;
pub const SECURITY_FLAG_PCT4 : u32 = 16;
pub const SECURITY_FLAG_IETFSSL4 : u32 = 32;
pub const SECURITY_FLAG_IGNORE_REVOCATION : u32 = 128;
pub const SECURITY_FLAG_IGNORE_WRONG_USAGE : u32 = 512;
pub const SECURITY_FLAG_IGNORE_WEAK_SIGNATURE : u32 = 65536;
pub const SECURITY_FLAG_OPT_IN_WEAK_SIGNATURE : u32 = 131072;
pub const AUTODIAL_MODE_NEVER : u32 = 1;
pub const AUTODIAL_MODE_ALWAYS : u32 = 2;
pub const AUTODIAL_MODE_NO_NETWORK_PRESENT : u32 = 4;
pub const INTERNET_STATUS_USER_INPUT_REQUIRED : u32 = 140;
pub const INTERNET_STATUS_PRIVACY_IMPACTED : u32 = 324;
pub const MAX_GOPHER_DISPLAY_TEXT : u32 = 128;
pub const MAX_GOPHER_SELECTOR_TEXT : u32 = 256;
pub const MAX_GOPHER_CATEGORY_NAME : u32 = 128;
pub const MAX_GOPHER_ATTRIBUTE_NAME : u32 = 128;
pub const MIN_GOPHER_ATTRIBUTE_LENGTH : u32 = 256;
pub const GOPHER_ATTRIBUTE_ID_BASE : u32 = 2882325504;
pub const HTTP_MAJOR_VERSION : u32 = 1;
pub const HTTP_MINOR_VERSION : u32 = 0;
pub const HTTP_QUERY_MIME_VERSION : u32 = 0;
pub const HTTP_QUERY_CONTENT_TYPE : u32 = 1;
pub const HTTP_QUERY_CONTENT_TRANSFER_ENCODING : u32 = 2;
pub const HTTP_QUERY_CONTENT_ID : u32 = 3;
pub const HTTP_QUERY_CONTENT_DESCRIPTION : u32 = 4;
pub const HTTP_QUERY_CONTENT_LENGTH : u32 = 5;
pub const HTTP_QUERY_CONTENT_LANGUAGE : u32 = 6;
pub const HTTP_QUERY_ALLOW : u32 = 7;
pub const HTTP_QUERY_PUBLIC : u32 = 8;
pub const HTTP_QUERY_DATE : u32 = 9;
pub const HTTP_QUERY_EXPIRES : u32 = 10;
pub const HTTP_QUERY_LAST_MODIFIED : u32 = 11;
pub const HTTP_QUERY_MESSAGE_ID : u32 = 12;
pub const HTTP_QUERY_URI : u32 = 13;
pub const HTTP_QUERY_DERIVED_FROM : u32 = 14;
pub const HTTP_QUERY_COST : u32 = 15;
pub const HTTP_QUERY_LINK : u32 = 16;
pub const HTTP_QUERY_PRAGMA : u32 = 17;
pub const HTTP_QUERY_VERSION : u32 = 18;
pub const HTTP_QUERY_STATUS_CODE : u32 = 19;
pub const HTTP_QUERY_STATUS_TEXT : u32 = 20;
pub const HTTP_QUERY_RAW_HEADERS : u32 = 21;
pub const HTTP_QUERY_RAW_HEADERS_CRLF : u32 = 22;
pub const HTTP_QUERY_CONNECTION : u32 = 23;
pub const HTTP_QUERY_ACCEPT : u32 = 24;
pub const HTTP_QUERY_ACCEPT_CHARSET : u32 = 25;
pub const HTTP_QUERY_ACCEPT_ENCODING : u32 = 26;
pub const HTTP_QUERY_ACCEPT_LANGUAGE : u32 = 27;
pub const HTTP_QUERY_AUTHORIZATION : u32 = 28;
pub const HTTP_QUERY_CONTENT_ENCODING : u32 = 29;
pub const HTTP_QUERY_FORWARDED : u32 = 30;
pub const HTTP_QUERY_FROM : u32 = 31;
pub const HTTP_QUERY_IF_MODIFIED_SINCE : u32 = 32;
pub const HTTP_QUERY_LOCATION : u32 = 33;
pub const HTTP_QUERY_ORIG_URI : u32 = 34;
pub const HTTP_QUERY_REFERER : u32 = 35;
pub const HTTP_QUERY_RETRY_AFTER : u32 = 36;
pub const HTTP_QUERY_SERVER : u32 = 37;
pub const HTTP_QUERY_TITLE : u32 = 38;
pub const HTTP_QUERY_USER_AGENT : u32 = 39;
pub const HTTP_QUERY_WWW_AUTHENTICATE : u32 = 40;
pub const HTTP_QUERY_PROXY_AUTHENTICATE : u32 = 41;
pub const HTTP_QUERY_ACCEPT_RANGES : u32 = 42;
pub const HTTP_QUERY_SET_COOKIE : u32 = 43;
pub const HTTP_QUERY_COOKIE : u32 = 44;
pub const HTTP_QUERY_REQUEST_METHOD : u32 = 45;
pub const HTTP_QUERY_REFRESH : u32 = 46;
pub const HTTP_QUERY_CONTENT_DISPOSITION : u32 = 47;
pub const HTTP_QUERY_AGE : u32 = 48;
pub const HTTP_QUERY_CACHE_CONTROL : u32 = 49;
pub const HTTP_QUERY_CONTENT_BASE : u32 = 50;
pub const HTTP_QUERY_CONTENT_LOCATION : u32 = 51;
pub const HTTP_QUERY_CONTENT_MD5 : u32 = 52;
pub const HTTP_QUERY_CONTENT_RANGE : u32 = 53;
pub const HTTP_QUERY_ETAG : u32 = 54;
pub const HTTP_QUERY_HOST : u32 = 55;
pub const HTTP_QUERY_IF_MATCH : u32 = 56;
pub const HTTP_QUERY_IF_NONE_MATCH : u32 = 57;
pub const HTTP_QUERY_IF_RANGE : u32 = 58;
pub const HTTP_QUERY_IF_UNMODIFIED_SINCE : u32 = 59;
pub const HTTP_QUERY_MAX_FORWARDS : u32 = 60;
pub const HTTP_QUERY_PROXY_AUTHORIZATION : u32 = 61;
pub const HTTP_QUERY_RANGE : u32 = 62;
pub const HTTP_QUERY_TRANSFER_ENCODING : u32 = 63;
pub const HTTP_QUERY_UPGRADE : u32 = 64;
pub const HTTP_QUERY_VARY : u32 = 65;
pub const HTTP_QUERY_VIA : u32 = 66;
pub const HTTP_QUERY_WARNING : u32 = 67;
pub const HTTP_QUERY_EXPECT : u32 = 68;
pub const HTTP_QUERY_PROXY_CONNECTION : u32 = 69;
pub const HTTP_QUERY_UNLESS_MODIFIED_SINCE : u32 = 70;
pub const HTTP_QUERY_ECHO_REQUEST : u32 = 71;
pub const HTTP_QUERY_ECHO_REPLY : u32 = 72;
pub const HTTP_QUERY_ECHO_HEADERS : u32 = 73;
pub const HTTP_QUERY_ECHO_HEADERS_CRLF : u32 = 74;
pub const HTTP_QUERY_PROXY_SUPPORT : u32 = 75;
pub const HTTP_QUERY_AUTHENTICATION_INFO : u32 = 76;
pub const HTTP_QUERY_PASSPORT_URLS : u32 = 77;
pub const HTTP_QUERY_PASSPORT_CONFIG : u32 = 78;
pub const HTTP_QUERY_X_CONTENT_TYPE_OPTIONS : u32 = 79;
pub const HTTP_QUERY_P3P : u32 = 80;
pub const HTTP_QUERY_X_P2P_PEERDIST : u32 = 81;
pub const HTTP_QUERY_TRANSLATE : u32 = 82;
pub const HTTP_QUERY_X_UA_COMPATIBLE : u32 = 83;
pub const HTTP_QUERY_DEFAULT_STYLE : u32 = 84;
pub const HTTP_QUERY_X_FRAME_OPTIONS : u32 = 85;
pub const HTTP_QUERY_X_XSS_PROTECTION : u32 = 86;
pub const HTTP_QUERY_SET_COOKIE2 : u32 = 87;
pub const HTTP_QUERY_DO_NOT_TRACK : u32 = 88;
pub const HTTP_QUERY_KEEP_ALIVE : u32 = 89;
pub const HTTP_QUERY_HTTP2_SETTINGS : u32 = 90;
pub const HTTP_QUERY_STRICT_TRANSPORT_SECURITY : u32 = 91;
pub const HTTP_QUERY_TOKEN_BINDING : u32 = 92;
pub const HTTP_QUERY_INCLUDE_REFERRED_TOKEN_BINDING_ID : u32 = 93;
pub const HTTP_QUERY_PUBLIC_KEY_PINS : u32 = 94;
pub const HTTP_QUERY_PUBLIC_KEY_PINS_REPORT_ONLY : u32 = 95;
pub const HTTP_QUERY_MAX : u32 = 95;
pub const HTTP_QUERY_CUSTOM : u32 = 65535;
pub const HTTP_QUERY_FLAG_REQUEST_HEADERS : u32 = 2147483648;
pub const HTTP_QUERY_FLAG_SYSTEMTIME : u32 = 1073741824;
pub const HTTP_QUERY_FLAG_NUMBER : u32 = 536870912;
pub const HTTP_QUERY_FLAG_COALESCE : u32 = 268435456;
pub const HTTP_QUERY_FLAG_NUMBER64 : u32 = 134217728;
pub const HTTP_QUERY_FLAG_COALESCE_WITH_COMMA : u32 = 67108864;
pub const HTTP_STATUS_MISDIRECTED_REQUEST : u32 = 421;
pub const HTTP_ADDREQ_INDEX_MASK : u32 = 65535;
pub const HTTP_ADDREQ_FLAGS_MASK : u32 = 4294901760;
pub const HSR_INITIATE : u32 = 8;
pub const HSR_DOWNLOAD : u32 = 16;
pub const HSR_CHUNKED : u32 = 32;
pub const INTERNET_COOKIE_IS_SECURE : u32 = 1;
pub const INTERNET_COOKIE_IS_SESSION : u32 = 2;
pub const INTERNET_COOKIE_PROMPT_REQUIRED : u32 = 32;
pub const INTERNET_COOKIE_EVALUATE_P3P : u32 = 64;
pub const INTERNET_COOKIE_APPLY_P3P : u32 = 128;
pub const INTERNET_COOKIE_P3P_ENABLED : u32 = 256;
pub const INTERNET_COOKIE_IS_RESTRICTED : u32 = 512;
pub const INTERNET_COOKIE_IE6 : u32 = 1024;
pub const INTERNET_COOKIE_IS_LEGACY : u32 = 2048;
pub const INTERNET_COOKIE_NON_SCRIPT : u32 = 4096;
pub const INTERNET_COOKIE_HOST_ONLY : u32 = 16384;
pub const INTERNET_COOKIE_APPLY_HOST_ONLY : u32 = 32768;
pub const INTERNET_COOKIE_HOST_ONLY_APPLIED : u32 = 524288;
pub const INTERNET_COOKIE_SAME_SITE_STRICT : u32 = 1048576;
pub const INTERNET_COOKIE_SAME_SITE_LAX : u32 = 2097152;
pub const INTERNET_COOKIE_SAME_SITE_LEVEL_CROSS_SITE : u32 = 4194304;
pub const FLAG_ICC_FORCE_CONNECTION : u32 = 1;
pub const FLAGS_ERROR_UI_FILTER_FOR_ERRORS : u32 = 1;
pub const FLAGS_ERROR_UI_FLAGS_CHANGE_OPTIONS : u32 = 2;
pub const FLAGS_ERROR_UI_FLAGS_GENERATE_DATA : u32 = 4;
pub const FLAGS_ERROR_UI_FLAGS_NO_UI : u32 = 8;
pub const FLAGS_ERROR_UI_SERIALIZE_DIALOGS : u32 = 16;
pub const INTERNET_ERROR_BASE : u32 = 12000;
pub const NORMAL_CACHE_ENTRY : u32 = 1;
pub const STICKY_CACHE_ENTRY : u32 = 4;
pub const EDITED_CACHE_ENTRY : u32 = 8;
pub const TRACK_OFFLINE_CACHE_ENTRY : u32 = 16;
pub const TRACK_ONLINE_CACHE_ENTRY : u32 = 32;
pub const SPARSE_CACHE_ENTRY : u32 = 65536;
pub const COOKIE_CACHE_ENTRY : u32 = 1048576;
pub const URLHISTORY_CACHE_ENTRY : u32 = 2097152;
pub const CACHEGROUP_ATTRIBUTE_GET_ALL : u32 = 4294967295;
pub const CACHEGROUP_ATTRIBUTE_BASIC : u32 = 1;
pub const CACHEGROUP_ATTRIBUTE_FLAG : u32 = 2;
pub const CACHEGROUP_ATTRIBUTE_TYPE : u32 = 4;
pub const CACHEGROUP_ATTRIBUTE_QUOTA : u32 = 8;
pub const CACHEGROUP_ATTRIBUTE_GROUPNAME : u32 = 16;
pub const CACHEGROUP_ATTRIBUTE_STORAGE : u32 = 32;
pub const CACHEGROUP_FLAG_NONPURGEABLE : u32 = 1;
pub const CACHEGROUP_FLAG_GIDONLY : u32 = 4;
pub const CACHEGROUP_FLAG_FLUSHURL_ONDELETE : u32 = 2;
pub const CACHEGROUP_SEARCH_ALL : u32 = 0;
pub const CACHEGROUP_SEARCH_BYURL : u32 = 1;
pub const CACHEGROUP_TYPE_INVALID : u32 = 1;
pub const GROUPNAME_MAX_LENGTH : u32 = 120;
pub const GROUP_OWNER_STORAGE_SIZE : u32 = 4;
pub const CACHE_ENTRY_ATTRIBUTE_FC : u32 = 4;
pub const CACHE_ENTRY_HITRATE_FC : u32 = 16;
pub const CACHE_ENTRY_MODTIME_FC : u32 = 64;
pub const CACHE_ENTRY_EXPTIME_FC : u32 = 128;
pub const CACHE_ENTRY_ACCTIME_FC : u32 = 256;
pub const CACHE_ENTRY_SYNCTIME_FC : u32 = 512;
pub const CACHE_ENTRY_HEADERINFO_FC : u32 = 1024;
pub const CACHE_ENTRY_EXEMPT_DELTA_FC : u32 = 2048;
pub const INTERNET_CACHE_GROUP_ADD : u32 = 0;
pub const INTERNET_CACHE_GROUP_REMOVE : u32 = 1;
pub const INTERNET_DIAL_FORCE_PROMPT : u32 = 8192;
pub const INTERNET_DIAL_SHOW_OFFLINE : u32 = 16384;
pub const INTERNET_DIAL_UNATTENDED : u32 = 32768;
pub const INTERENT_GOONLINE_REFRESH : u32 = 1;
pub const INTERENT_GOONLINE_NOPROMPT : u32 = 2;
pub const INTERENT_GOONLINE_MASK : u32 = 3;
pub const INTERNET_CONNECTION_LAN : u32 = 2;
pub const INTERNET_CONNECTION_OFFLINE : u32 = 32;
pub const INTERNET_CUSTOMDIAL_CONNECT : u32 = 0;
pub const INTERNET_CUSTOMDIAL_UNATTENDED : u32 = 1;
pub const INTERNET_CUSTOMDIAL_DISCONNECT : u32 = 2;
pub const INTERNET_CUSTOMDIAL_SHOWOFFLINE : u32 = 4;
pub const INTERNET_CUSTOMDIAL_SAFE_FOR_UNATTENDED : u32 = 1;
pub const INTERNET_CUSTOMDIAL_WILL_SUPPLY_STATE : u32 = 2;
pub const INTERNET_CUSTOMDIAL_CAN_HANGUP : u32 = 4;
pub const INTERNET_DIALSTATE_DISCONNECTED : u32 = 1;
pub const INTERNET_IDENTITY_FLAG_PRIVATE_CACHE : u32 = 1;
pub const INTERNET_IDENTITY_FLAG_SHARED_CACHE : u32 = 2;
pub const INTERNET_IDENTITY_FLAG_CLEAR_DATA : u32 = 4;
pub const INTERNET_IDENTITY_FLAG_CLEAR_COOKIES : u32 = 8;
pub const INTERNET_IDENTITY_FLAG_CLEAR_HISTORY : u32 = 16;
pub const INTERNET_IDENTITY_FLAG_CLEAR_CONTENT : u32 = 32;
pub const INTERNET_SUPPRESS_RESET_ALL : u32 = 0;
pub const INTERNET_SUPPRESS_COOKIE_POLICY : u32 = 1;
pub const INTERNET_SUPPRESS_COOKIE_POLICY_RESET : u32 = 2;
pub const PRIVACY_TEMPLATE_NO_COOKIES : u32 = 0;
pub const PRIVACY_TEMPLATE_HIGH : u32 = 1;
pub const PRIVACY_TEMPLATE_MEDIUM_HIGH : u32 = 2;
pub const PRIVACY_TEMPLATE_MEDIUM : u32 = 3;
pub const PRIVACY_TEMPLATE_MEDIUM_LOW : u32 = 4;
pub const PRIVACY_TEMPLATE_LOW : u32 = 5;
pub const PRIVACY_TEMPLATE_CUSTOM : u32 = 100;
pub const PRIVACY_TEMPLATE_ADVANCED : u32 = 101;
pub const PRIVACY_TYPE_FIRST_PARTY : u32 = 0;
pub const PRIVACY_TYPE_THIRD_PARTY : u32 = 1;
pub const MAX_CACHE_ENTRY_INFO_SIZE : u32 = 4096;
pub const INTERNET_REQFLAG_FROM_APP_CACHE : u32 = 256;
pub const INTERNET_FLAG_BGUPDATE : u32 = 8;
pub const INTERNET_FLAG_FTP_FOLDER_VIEW : u32 = 4;
pub const INTERNET_PREFETCH_PROGRESS : u32 = 0;
pub const INTERNET_PREFETCH_COMPLETE : u32 = 1;
pub const INTERNET_PREFETCH_ABORTED : u32 = 2;
pub const DLG_FLAGS_INVALID_CA : u32 = 16777216;
pub const DLG_FLAGS_SEC_CERT_CN_INVALID : u32 = 33554432;
pub const DLG_FLAGS_SEC_CERT_DATE_INVALID : u32 = 67108864;
pub const DLG_FLAGS_WEAK_SIGNATURE : u32 = 2097152;
pub const DLG_FLAGS_INSECURE_FALLBACK : u32 = 4194304;
pub const DLG_FLAGS_SEC_CERT_REV_FAILED : u32 = 8388608;
pub const INTERNET_SERVICE_URL : u32 = 0;
pub const INTERNET_OPTION_CONTEXT_VALUE_OLD : u32 = 10;
pub const INTERNET_OPTION_NET_SPEED : u32 = 61;
pub const INTERNET_OPTION_SECURITY_CONNECTION_INFO : u32 = 66;
pub const INTERNET_OPTION_DETECT_POST_SEND : u32 = 71;
pub const INTERNET_OPTION_DISABLE_NTLM_PREAUTH : u32 = 72;
pub const INTERNET_OPTION_ORIGINAL_CONNECT_FLAGS : u32 = 97;
pub const INTERNET_OPTION_CERT_ERROR_FLAGS : u32 = 98;
pub const INTERNET_OPTION_IGNORE_CERT_ERROR_FLAGS : u32 = 99;
pub const INTERNET_OPTION_SESSION_START_TIME : u32 = 106;
pub const INTERNET_OPTION_PROXY_CREDENTIALS : u32 = 107;
pub const INTERNET_OPTION_EXTENDED_CALLBACKS : u32 = 108;
pub const INTERNET_OPTION_PROXY_FROM_REQUEST : u32 = 109;
pub const INTERNET_OPTION_ALLOW_FAILED_CONNECT_CONTENT : u32 = 110;
pub const INTERNET_OPTION_CACHE_PARTITION : u32 = 111;
pub const INTERNET_OPTION_AUTODIAL_HWND : u32 = 112;
pub const INTERNET_OPTION_SERVER_CREDENTIALS : u32 = 113;
pub const INTERNET_OPTION_WPAD_SLEEP : u32 = 114;
pub const INTERNET_OPTION_FAIL_ON_CACHE_WRITE_ERROR : u32 = 115;
pub const INTERNET_OPTION_DOWNLOAD_MODE : u32 = 116;
pub const INTERNET_OPTION_RESPONSE_RESUMABLE : u32 = 117;
pub const INTERNET_OPTION_CM_HANDLE_COPY_REF : u32 = 118;
pub const INTERNET_OPTION_CONNECTION_INFO : u32 = 120;
pub const INTERNET_OPTION_BACKGROUND_CONNECTIONS : u32 = 121;
pub const INTERNET_OPTION_DO_NOT_TRACK : u32 = 123;
pub const INTERNET_OPTION_USE_MODIFIED_HEADER_FILTER : u32 = 124;
pub const INTERNET_OPTION_WWA_MODE : u32 = 125;
pub const INTERNET_OPTION_UPGRADE_TO_WEB_SOCKET : u32 = 126;
pub const INTERNET_OPTION_WEB_SOCKET_KEEPALIVE_INTERVAL : u32 = 127;
pub const INTERNET_OPTION_UNLOAD_NOTIFY_EVENT : u32 = 128;
pub const INTERNET_OPTION_SOCKET_NODELAY : u32 = 129;
pub const INTERNET_OPTION_APP_CACHE : u32 = 130;
pub const INTERNET_OPTION_DEPENDENCY_HANDLE : u32 = 131;
pub const INTERNET_OPTION_USE_FIRST_AVAILABLE_CONNECTION : u32 = 132;
pub const INTERNET_OPTION_TIMED_CONNECTION_LIMIT_BYPASS : u32 = 133;
pub const INTERNET_OPTION_WEB_SOCKET_CLOSE_TIMEOUT : u32 = 134;
pub const INTERNET_OPTION_FLUSH_STATE : u32 = 135;
pub const INTERNET_OPTION_DISALLOW_PREMATURE_EOF : u32 = 137;
pub const INTERNET_OPTION_SOCKET_NOTIFICATION_IOCTL : u32 = 138;
pub const INTERNET_OPTION_CACHE_ENTRY_EXTRA_DATA : u32 = 139;
pub const INTERNET_OPTION_MAX_QUERY_BUFFER_SIZE : u32 = 140;
pub const INTERNET_OPTION_FALSE_START : u32 = 141;
pub const INTERNET_OPTION_USER_PASS_SERVER_ONLY : u32 = 142;
pub const INTERNET_OPTION_SERVER_AUTH_SCHEME : u32 = 143;
pub const INTERNET_OPTION_PROXY_AUTH_SCHEME : u32 = 144;
pub const INTERNET_OPTION_TUNNEL_ONLY : u32 = 145;
pub const INTERNET_OPTION_SOURCE_PORT : u32 = 146;
pub const INTERNET_OPTION_CHUNK_ENCODE_REQUEST : u32 = 150;
pub const INTERNET_OPTION_SECURE_FAILURE : u32 = 151;
pub const INTERNET_OPTION_NOTIFY_SENDING_COOKIE : u32 = 152;
pub const INTERNET_OPTION_CLIENT_CERT_ISSUER_LIST : u32 = 153;
pub const INTERNET_OPTION_RESET : u32 = 154;
pub const INTERNET_OPTION_SERVER_ADDRESS_INFO : u32 = 156;
pub const INTERNET_OPTION_ENABLE_WBOEXT : u32 = 158;
pub const INTERNET_OPTION_DISABLE_INSECURE_FALLBACK : u32 = 160;
pub const INTERNET_OPTION_ALLOW_INSECURE_FALLBACK : u32 = 161;
pub const INTERNET_OPTION_SET_IN_PRIVATE : u32 = 164;
pub const INTERNET_OPTION_DOWNLOAD_MODE_HANDLE : u32 = 165;
pub const INTERNET_OPTION_EDGE_COOKIES : u32 = 166;
pub const INTERNET_OPTION_NO_HTTP_SERVER_AUTH : u32 = 167;
pub const INTERNET_OPTION_ENABLE_HEADER_CALLBACKS : u32 = 168;
pub const INTERNET_OPTION_PRESERVE_REQUEST_SERVER_CREDENTIALS_ON_REDIRECT : u32 = 169;
pub const INTERNET_OPTION_PRESERVE_REFERER_ON_HTTPS_TO_HTTP_REDIRECT : u32 = 170;
pub const INTERNET_OPTION_TCP_FAST_OPEN : u32 = 171;
pub const INTERNET_OPTION_SYNC_MODE_AUTOMATIC_SESSION_DISABLED : u32 = 172;
pub const INTERNET_OPTION_ENABLE_ZLIB_DEFLATE : u32 = 173;
pub const INTERNET_OPTION_ENCODE_FALLBACK_FOR_REDIRECT_URI : u32 = 174;
pub const INTERNET_OPTION_EDGE_COOKIES_TEMP : u32 = 175;
pub const INTERNET_OPTION_OPT_IN_WEAK_SIGNATURE : u32 = 176;
pub const INTERNET_OPTION_PARSE_LINE_FOLDING : u32 = 177;
pub const INTERNET_OPTION_FORCE_DECODE : u32 = 178;
pub const INTERNET_OPTION_COOKIES_APPLY_HOST_ONLY : u32 = 179;
pub const INTERNET_OPTION_EDGE_MODE : u32 = 180;
pub const INTERNET_OPTION_CANCEL_CACHE_WRITE : u32 = 182;
pub const INTERNET_OPTION_AUTH_SCHEME_SELECTED : u32 = 183;
pub const INTERNET_OPTION_NOCACHE_WRITE_IN_PRIVATE : u32 = 184;
pub const INTERNET_OPTION_ACTIVITY_ID : u32 = 185;
pub const INTERNET_OPTION_REQUEST_TIMES : u32 = 186;
pub const DUO_PROTOCOL_FLAG_SPDY3 : u32 = 1;
pub const AUTH_FLAG_RESET : u32 = 0;
pub const INTERNET_AUTH_SCHEME_BASIC : u32 = 0;
pub const INTERNET_AUTH_SCHEME_DIGEST : u32 = 1;
pub const INTERNET_AUTH_SCHEME_NTLM : u32 = 2;
pub const INTERNET_AUTH_SCHEME_KERBEROS : u32 = 3;
pub const INTERNET_AUTH_SCHEME_NEGOTIATE : u32 = 4;
pub const INTERNET_AUTH_SCHEME_PASSPORT : u32 = 5;
pub const INTERNET_AUTH_SCHEME_UNKNOWN : u32 = 6;
pub const INTERNET_STATUS_SENDING_COOKIE : u32 = 328;
pub const INTERNET_STATUS_REQUEST_HEADERS_SET : u32 = 329;
pub const INTERNET_STATUS_RESPONSE_HEADERS_SET : u32 = 330;
pub const INTERNET_STATUS_PROXY_CREDENTIALS : u32 = 400;
pub const INTERNET_STATUS_SERVER_CREDENTIALS : u32 = 401;
pub const INTERNET_STATUS_SERVER_CONNECTION_STATE : u32 = 410;
pub const INTERNET_STATUS_END_BROWSER_SESSION : u32 = 420;
pub const INTERNET_STATUS_COOKIE : u32 = 430;
pub const COOKIE_STATE_LB : u32 = 0;
pub const COOKIE_STATE_UB : u32 = 5;
pub const MaxPrivacySettings : u32 = 16384;
pub const INTERNET_STATUS_FILTER_RESOLVING : u32 = 1;
pub const INTERNET_STATUS_FILTER_RESOLVED : u32 = 2;
pub const INTERNET_STATUS_FILTER_CONNECTING : u32 = 4;
pub const INTERNET_STATUS_FILTER_CONNECTED : u32 = 8;
pub const INTERNET_STATUS_FILTER_SENDING : u32 = 16;
pub const INTERNET_STATUS_FILTER_SENT : u32 = 32;
pub const INTERNET_STATUS_FILTER_RECEIVING : u32 = 64;
pub const INTERNET_STATUS_FILTER_RECEIVED : u32 = 128;
pub const INTERNET_STATUS_FILTER_CLOSING : u32 = 256;
pub const INTERNET_STATUS_FILTER_CLOSED : u32 = 512;
pub const INTERNET_STATUS_FILTER_HANDLE_CREATED : u32 = 1024;
pub const INTERNET_STATUS_FILTER_HANDLE_CLOSING : u32 = 2048;
pub const INTERNET_STATUS_FILTER_PREFETCH : u32 = 4096;
pub const INTERNET_STATUS_FILTER_REDIRECT : u32 = 8192;
pub const INTERNET_STATUS_FILTER_STATE_CHANGE : u32 = 16384;
pub const HTTP_ADDREQ_FLAG_RESPONSE_HEADERS : u32 = 33554432;
pub const HTTP_ADDREQ_FLAG_ALLOW_EMPTY_VALUES : u32 = 67108864;
pub const COOKIE_DONT_ALLOW : u32 = 1;
pub const COOKIE_ALLOW : u32 = 2;
pub const COOKIE_ALLOW_ALL : u32 = 4;
pub const COOKIE_DONT_ALLOW_ALL : u32 = 8;
pub const COOKIE_OP_SET : u32 = 1;
pub const COOKIE_OP_MODIFY : u32 = 2;
pub const COOKIE_OP_GET : u32 = 4;
pub const COOKIE_OP_SESSION : u32 = 8;
pub const COOKIE_OP_PERSISTENT : u32 = 16;
pub const COOKIE_OP_3RD_PARTY : u32 = 32;
pub const INTERNET_COOKIE_PERSISTENT_HOST_ONLY : u32 = 65536;
pub const INTERNET_COOKIE_RESTRICTED_ZONE : u32 = 131072;
pub const INTERNET_COOKIE_EDGE_COOKIES : u32 = 262144;
pub const INTERNET_COOKIE_ALL_COOKIES : u32 = 536870912;
pub const INTERNET_COOKIE_NO_CALLBACK : u32 = 1073741824;
pub const INTERNET_COOKIE_ECTX_3RDPARTY : u32 = 2147483648;
pub const FLAGS_ERROR_UI_SHOW_IDN_HOSTNAME : u32 = 32;
pub const HTTP_1_1_CACHE_ENTRY : u32 = 64;
pub const STATIC_CACHE_ENTRY : u32 = 128;
pub const MUST_REVALIDATE_CACHE_ENTRY : u32 = 256;
pub const SHORTPATH_CACHE_ENTRY : u32 = 512;
pub const DOWNLOAD_CACHE_ENTRY : u32 = 1024;
pub const REDIRECT_CACHE_ENTRY : u32 = 2048;
pub const COOKIE_ACCEPTED_CACHE_ENTRY : u32 = 4096;
pub const COOKIE_LEASHED_CACHE_ENTRY : u32 = 8192;
pub const COOKIE_DOWNGRADED_CACHE_ENTRY : u32 = 16384;
pub const COOKIE_REJECTED_CACHE_ENTRY : u32 = 32768;
pub const PRIVACY_MODE_CACHE_ENTRY : u32 = 131072;
pub const XDR_CACHE_ENTRY : u32 = 262144;
pub const IMMUTABLE_CACHE_ENTRY : u32 = 524288;
pub const PENDING_DELETE_CACHE_ENTRY : u32 = 4194304;
pub const OTHER_USER_CACHE_ENTRY : u32 = 8388608;
pub const PRIVACY_IMPACTED_CACHE_ENTRY : u32 = 33554432;
pub const POST_RESPONSE_CACHE_ENTRY : u32 = 67108864;
pub const INSTALLED_CACHE_ENTRY : u32 = 268435456;
pub const POST_CHECK_CACHE_ENTRY : u32 = 536870912;
pub const IDENTITY_CACHE_ENTRY : u32 = 2147483648;
pub const ANY_CACHE_ENTRY : u32 = 4294967295;
pub const CACHEGROUP_FLAG_VALID : u32 = 7;
pub const CACHEGROUP_ID_BUILTIN_STICKY : u64 = 1152921504606846983;
pub const INTERNET_CACHE_FLAG_ALLOW_COLLISIONS : u32 = 256;
pub const INTERNET_CACHE_FLAG_INSTALLED_ENTRY : u32 = 512;
pub const INTERNET_CACHE_FLAG_ENTRY_OR_MAPPING : u32 = 1024;
pub const INTERNET_CACHE_FLAG_ADD_FILENAME_ONLY : u32 = 2048;
pub const INTERNET_CACHE_FLAG_GET_STRUCT_ONLY : u32 = 4096;
pub const CACHE_ENTRY_TYPE_FC : u32 = 4096;
pub const CACHE_ENTRY_MODIFY_DATA_FC : u32 = 2147483648;
pub const INTERNET_CACHE_CONTAINER_NOSUBDIRS : u32 = 1;
pub const INTERNET_CACHE_CONTAINER_AUTODELETE : u32 = 2;
pub const INTERNET_CACHE_CONTAINER_RESERVED1 : u32 = 4;
pub const INTERNET_CACHE_CONTAINER_NODESKTOPINIT : u32 = 8;
pub const INTERNET_CACHE_CONTAINER_MAP_ENABLED : u32 = 16;
pub const INTERNET_CACHE_CONTAINER_BLOOM_FILTER : u32 = 32;
pub const INTERNET_CACHE_CONTAINER_SHARE_READ : u32 = 256;
pub const INTERNET_CACHE_CONTAINER_SHARE_READ_WRITE : u32 = 768;
pub const CACHE_FIND_CONTAINER_RETURN_NOCHANGE : u32 = 1;
pub const CACHE_HEADER_DATA_CURRENT_SETTINGS_VERSION : u32 = 0;
pub const CACHE_HEADER_DATA_CONLIST_CHANGE_COUNT : u32 = 1;
pub const CACHE_HEADER_DATA_COOKIE_CHANGE_COUNT : u32 = 2;
pub const CACHE_HEADER_DATA_NOTIFICATION_HWND : u32 = 3;
pub const CACHE_HEADER_DATA_NOTIFICATION_MESG : u32 = 4;
pub const CACHE_HEADER_DATA_ROOTGROUP_OFFSET : u32 = 5;
pub const CACHE_HEADER_DATA_GID_LOW : u32 = 6;
pub const CACHE_HEADER_DATA_GID_HIGH : u32 = 7;
pub const CACHE_HEADER_DATA_LAST_SCAVENGE_TIMESTAMP : u32 = 8;
pub const CACHE_HEADER_DATA_CACHE_READ_COUNT_SINCE_LAST_SCAVENGE : u32 = 9;
pub const CACHE_HEADER_DATA_CACHE_WRITE_COUNT_SINCE_LAST_SCAVENGE : u32 = 10;
pub const CACHE_HEADER_DATA_HSTS_CHANGE_COUNT : u32 = 11;
pub const CACHE_HEADER_DATA_CACHE_RESERVED_12 : u32 = 12;
pub const CACHE_HEADER_DATA_CACHE_RESERVED_13 : u32 = 13;
pub const CACHE_HEADER_DATA_SSL_STATE_COUNT : u32 = 14;
pub const CACHE_HEADER_DATA_CACHE_RESERVED_15 : u32 = 15;
pub const CACHE_HEADER_DATA_CACHE_RESERVED_16 : u32 = 16;
pub const CACHE_HEADER_DATA_CACHE_RESERVED_17 : u32 = 17;
pub const CACHE_HEADER_DATA_CACHE_RESERVED_18 : u32 = 18;
pub const CACHE_HEADER_DATA_CACHE_RESERVED_19 : u32 = 19;
pub const CACHE_HEADER_DATA_CACHE_RESERVED_20 : u32 = 20;
pub const CACHE_HEADER_DATA_NOTIFICATION_FILTER : u32 = 21;
pub const CACHE_HEADER_DATA_ROOT_LEAK_OFFSET : u32 = 22;
pub const CACHE_HEADER_DATA_CACHE_RESERVED_23 : u32 = 23;
pub const CACHE_HEADER_DATA_CACHE_RESERVED_24 : u32 = 24;
pub const CACHE_HEADER_DATA_CACHE_RESERVED_25 : u32 = 25;
pub const CACHE_HEADER_DATA_CACHE_RESERVED_26 : u32 = 26;
pub const CACHE_HEADER_DATA_ROOT_GROUPLIST_OFFSET : u32 = 27;
pub const CACHE_HEADER_DATA_CACHE_RESERVED_28 : u32 = 28;
pub const CACHE_HEADER_DATA_CACHE_RESERVED_29 : u32 = 29;
pub const CACHE_HEADER_DATA_CACHE_RESERVED_30 : u32 = 30;
pub const CACHE_HEADER_DATA_CACHE_RESERVED_31 : u32 = 31;
pub const CACHE_HEADER_DATA_LAST : u32 = 31;
pub const CACHE_NOTIFY_ADD_URL : u32 = 1;
pub const CACHE_NOTIFY_DELETE_URL : u32 = 2;
pub const CACHE_NOTIFY_UPDATE_URL : u32 = 4;
pub const CACHE_NOTIFY_DELETE_ALL : u32 = 8;
pub const CACHE_NOTIFY_URL_SET_STICKY : u32 = 16;
pub const CACHE_NOTIFY_URL_UNSET_STICKY : u32 = 32;
pub const CACHE_NOTIFY_SET_ONLINE : u32 = 256;
pub const CACHE_NOTIFY_SET_OFFLINE : u32 = 512;
pub const CACHE_NOTIFY_FILTER_CHANGED : u32 = 268435456;
pub const APP_CACHE_LOOKUP_NO_MASTER_ONLY : u32 = 1;
pub const APP_CACHE_ENTRY_TYPE_MASTER : u32 = 1;
pub const APP_CACHE_ENTRY_TYPE_EXPLICIT : u32 = 2;
pub const APP_CACHE_ENTRY_TYPE_FALLBACK : u32 = 4;
pub const APP_CACHE_ENTRY_TYPE_FOREIGN : u32 = 8;
pub const APP_CACHE_ENTRY_TYPE_MANIFEST : u32 = 16;
pub const CACHE_CONFIG_CONTENT_QUOTA_FC : u32 = 32768;
pub const CACHE_CONFIG_TOTAL_CONTENT_QUOTA_FC : u32 = 65536;
pub const CACHE_CONFIG_APPCONTAINER_CONTENT_QUOTA_FC : u32 = 131072;
pub const CACHE_CONFIG_APPCONTAINER_TOTAL_CONTENT_QUOTA_FC : u32 = 262144;
pub const INTERNET_AUTOPROXY_INIT_DEFAULT : u32 = 1;
pub const INTERNET_AUTOPROXY_INIT_DOWNLOADSYNC : u32 = 2;
pub const INTERNET_AUTOPROXY_INIT_QUERYSTATE : u32 = 4;
pub const INTERNET_AUTOPROXY_INIT_ONLYQUERY : u32 = 8;
pub const INTERNET_SUPPRESS_COOKIE_PERSIST : u32 = 3;
pub const INTERNET_SUPPRESS_COOKIE_PERSIST_RESET : u32 = 4;
pub const HTTP_WEB_SOCKET_MAX_CLOSE_REASON_LENGTH : u32 = 123;
pub const HTTP_WEB_SOCKET_MIN_KEEPALIVE_VALUE : u32 = 10000;

//--------------------------------------------------------------------------------
// Section: Types (119)
//--------------------------------------------------------------------------------
pub const INTERNET_SCHEME = extern enum(i32) {
    PARTIAL = -2,
    UNKNOWN = -1,
    DEFAULT = 0,
    FTP = 1,
    GOPHER = 2,
    HTTP = 3,
    HTTPS = 4,
    FILE = 5,
    NEWS = 6,
    MAILTO = 7,
    SOCKS = 8,
    JAVASCRIPT = 9,
    VBSCRIPT = 10,
    RES = 11,
    FIRST = 1,
    LAST = 11,
};
pub const INTERNET_SCHEME_PARTIAL = INTERNET_SCHEME.PARTIAL;
pub const INTERNET_SCHEME_UNKNOWN = INTERNET_SCHEME.UNKNOWN;
pub const INTERNET_SCHEME_DEFAULT = INTERNET_SCHEME.DEFAULT;
pub const INTERNET_SCHEME_FTP = INTERNET_SCHEME.FTP;
pub const INTERNET_SCHEME_GOPHER = INTERNET_SCHEME.GOPHER;
pub const INTERNET_SCHEME_HTTP = INTERNET_SCHEME.HTTP;
pub const INTERNET_SCHEME_HTTPS = INTERNET_SCHEME.HTTPS;
pub const INTERNET_SCHEME_FILE = INTERNET_SCHEME.FILE;
pub const INTERNET_SCHEME_NEWS = INTERNET_SCHEME.NEWS;
pub const INTERNET_SCHEME_MAILTO = INTERNET_SCHEME.MAILTO;
pub const INTERNET_SCHEME_SOCKS = INTERNET_SCHEME.SOCKS;
pub const INTERNET_SCHEME_JAVASCRIPT = INTERNET_SCHEME.JAVASCRIPT;
pub const INTERNET_SCHEME_VBSCRIPT = INTERNET_SCHEME.VBSCRIPT;
pub const INTERNET_SCHEME_RES = INTERNET_SCHEME.RES;
pub const INTERNET_SCHEME_FIRST = INTERNET_SCHEME.FIRST;
pub const INTERNET_SCHEME_LAST = INTERNET_SCHEME.LAST;

pub const INTERNET_ASYNC_RESULT = extern struct {
    dwResult: ?*c_void,
    dwError: u32,
};

pub const INTERNET_DIAGNOSTIC_SOCKET_INFO = extern struct {
    Socket: ?*c_void,
    SourcePort: u32,
    DestPort: u32,
    Flags: u32,
};

pub const INTERNET_PROXY_INFO = extern struct {
    dwAccessType: INTERNET_PROXY_INFO_dwAccessTypeFlags,
    lpszProxy: *i8,
    lpszProxyBypass: *i8,
};

pub const INTERNET_PER_CONN_OPTIONA = extern struct {
    dwOption: INTERNET_PER_CONN,
    Value: INTERNET_PER_CONN_OPTIONA._Value_e__Union,
    const _Value_e__Union = u32; // TODO: generate this nested type!
};

pub const INTERNET_PER_CONN_OPTIONW = extern struct {
    dwOption: INTERNET_PER_CONN,
    Value: INTERNET_PER_CONN_OPTIONW._Value_e__Union,
    const _Value_e__Union = u32; // TODO: generate this nested type!
};

pub const INTERNET_PER_CONN_OPTION_LISTA = extern struct {
    dwSize: u32,
    pszConnection: PSTR,
    dwOptionCount: u32,
    dwOptionError: u32,
    pOptions: *INTERNET_PER_CONN_OPTIONA,
};

pub const INTERNET_PER_CONN_OPTION_LISTW = extern struct {
    dwSize: u32,
    pszConnection: PWSTR,
    dwOptionCount: u32,
    dwOptionError: u32,
    pOptions: *INTERNET_PER_CONN_OPTIONW,
};

pub const INTERNET_VERSION_INFO = extern struct {
    dwMajorVersion: u32,
    dwMinorVersion: u32,
};

pub const INTERNET_CONNECTED_INFO = extern struct {
    dwConnectedState: INTERNET_CONNECTED_INFO_dwConnectedStateFlags,
    dwFlags: u32,
};

pub const URL_COMPONENTSA = extern struct {
    dwStructSize: u32,
    lpszScheme: PSTR,
    dwSchemeLength: u32,
    nScheme: INTERNET_SCHEME,
    lpszHostName: PSTR,
    dwHostNameLength: u32,
    nPort: u16,
    lpszUserName: PSTR,
    dwUserNameLength: u32,
    lpszPassword: PSTR,
    dwPasswordLength: u32,
    lpszUrlPath: PSTR,
    dwUrlPathLength: u32,
    lpszExtraInfo: PSTR,
    dwExtraInfoLength: u32,
};

pub const URL_COMPONENTSW = extern struct {
    dwStructSize: u32,
    lpszScheme: PWSTR,
    dwSchemeLength: u32,
    nScheme: INTERNET_SCHEME,
    lpszHostName: PWSTR,
    dwHostNameLength: u32,
    nPort: u16,
    lpszUserName: PWSTR,
    dwUserNameLength: u32,
    lpszPassword: PWSTR,
    dwPasswordLength: u32,
    lpszUrlPath: PWSTR,
    dwUrlPathLength: u32,
    lpszExtraInfo: PWSTR,
    dwExtraInfoLength: u32,
};

pub const INTERNET_CERTIFICATE_INFO = extern struct {
    ftExpiry: FILETIME,
    ftStart: FILETIME,
    lpszSubjectInfo: *i8,
    lpszIssuerInfo: *i8,
    lpszProtocolName: *i8,
    lpszSignatureAlgName: *i8,
    lpszEncryptionAlgName: *i8,
    dwKeySize: u32,
};

pub const INTERNET_BUFFERSA = extern struct {
    dwStructSize: u32,
    Next: *INTERNET_BUFFERSA,
    lpcszHeader: [*:0]const u8,
    dwHeadersLength: u32,
    dwHeadersTotal: u32,
    lpvBuffer: *c_void,
    dwBufferLength: u32,
    dwBufferTotal: u32,
    dwOffsetLow: u32,
    dwOffsetHigh: u32,
};

pub const INTERNET_BUFFERSW = extern struct {
    dwStructSize: u32,
    Next: *INTERNET_BUFFERSW,
    lpcszHeader: [*:0]const u16,
    dwHeadersLength: u32,
    dwHeadersTotal: u32,
    lpvBuffer: *c_void,
    dwBufferLength: u32,
    dwBufferTotal: u32,
    dwOffsetLow: u32,
    dwOffsetHigh: u32,
};

pub const INTERNET_STATUS_CALLBACK = fn(
    hInternet: *c_void,
    dwContext: ?*c_void,
    dwInternetStatus: INTERNET_STATUS_CALLBACK_dwInternetStatusFlags,
    lpvStatusInformation: ?*c_void,
    dwStatusInformationLength: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LPINTERNET_STATUS_CALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const InternetCookieState = extern enum(i32) {
    UNKNOWN = 0,
    ACCEPT = 1,
    PROMPT = 2,
    LEASH = 3,
    DOWNGRADE = 4,
    REJECT = 5,
    MAX = 5,
};
pub const COOKIE_STATE_UNKNOWN = InternetCookieState.UNKNOWN;
pub const COOKIE_STATE_ACCEPT = InternetCookieState.ACCEPT;
pub const COOKIE_STATE_PROMPT = InternetCookieState.PROMPT;
pub const COOKIE_STATE_LEASH = InternetCookieState.LEASH;
pub const COOKIE_STATE_DOWNGRADE = InternetCookieState.DOWNGRADE;
pub const COOKIE_STATE_REJECT = InternetCookieState.REJECT;
pub const COOKIE_STATE_MAX = InternetCookieState.MAX;

pub const IncomingCookieState = extern struct {
    cSession: i32,
    cPersistent: i32,
    cAccepted: i32,
    cLeashed: i32,
    cDowngraded: i32,
    cBlocked: i32,
    pszLocation: *const i8,
};

pub const OutgoingCookieState = extern struct {
    cSent: i32,
    cSuppressed: i32,
    pszLocation: *const i8,
};

pub const InternetCookieHistory = extern struct {
    fAccepted: BOOL,
    fLeashed: BOOL,
    fDowngraded: BOOL,
    fRejected: BOOL,
};

pub const CookieDecision = extern struct {
    dwCookieState: u32,
    fAllowSession: BOOL,
};

pub const GOPHER_FIND_DATAA = extern struct {
    DisplayString: [129]i8,
    GopherType: GOPHER_TYPE,
    SizeLow: u32,
    SizeHigh: u32,
    LastModificationTime: FILETIME,
    Locator: [654]i8,
};

pub const GOPHER_FIND_DATAW = extern struct {
    DisplayString: [129]u16,
    GopherType: GOPHER_TYPE,
    SizeLow: u32,
    SizeHigh: u32,
    LastModificationTime: FILETIME,
    Locator: [654]u16,
};

pub const GOPHER_ADMIN_ATTRIBUTE_TYPE = extern struct {
    Comment: *i8,
    EmailAddress: *i8,
};

pub const GOPHER_MOD_DATE_ATTRIBUTE_TYPE = extern struct {
    DateAndTime: FILETIME,
};

pub const GOPHER_TTL_ATTRIBUTE_TYPE = extern struct {
    Ttl: u32,
};

pub const GOPHER_SCORE_ATTRIBUTE_TYPE = extern struct {
    Score: i32,
};

pub const GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE = extern struct {
    LowerBound: i32,
    UpperBound: i32,
};

pub const GOPHER_SITE_ATTRIBUTE_TYPE = extern struct {
    Site: *i8,
};

pub const GOPHER_ORGANIZATION_ATTRIBUTE_TYPE = extern struct {
    Organization: *i8,
};

pub const GOPHER_LOCATION_ATTRIBUTE_TYPE = extern struct {
    Location: *i8,
};

pub const GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE = extern struct {
    DegreesNorth: i32,
    MinutesNorth: i32,
    SecondsNorth: i32,
    DegreesEast: i32,
    MinutesEast: i32,
    SecondsEast: i32,
};

pub const GOPHER_TIMEZONE_ATTRIBUTE_TYPE = extern struct {
    Zone: i32,
};

pub const GOPHER_PROVIDER_ATTRIBUTE_TYPE = extern struct {
    Provider: *i8,
};

pub const GOPHER_VERSION_ATTRIBUTE_TYPE = extern struct {
    Version: *i8,
};

pub const GOPHER_ABSTRACT_ATTRIBUTE_TYPE = extern struct {
    ShortAbstract: *i8,
    AbstractFile: *i8,
};

pub const GOPHER_VIEW_ATTRIBUTE_TYPE = extern struct {
    ContentType: *i8,
    Language: *i8,
    Size: u32,
};

pub const GOPHER_VERONICA_ATTRIBUTE_TYPE = extern struct {
    TreeWalk: BOOL,
};

pub const GOPHER_ASK_ATTRIBUTE_TYPE = extern struct {
    QuestionType: *i8,
    QuestionText: *i8,
};

pub const GOPHER_UNKNOWN_ATTRIBUTE_TYPE = extern struct {
    Text: *i8,
};

pub const GOPHER_ATTRIBUTE_TYPE = extern struct {
    CategoryId: u32,
    AttributeId: u32,
    AttributeType: GOPHER_ATTRIBUTE_TYPE._AttributeType_e__Union,
    const _AttributeType_e__Union = u32; // TODO: generate this nested type!
};

pub const GOPHER_ATTRIBUTE_ENUMERATOR = fn(
    lpAttributeInfo: *GOPHER_ATTRIBUTE_TYPE,
    dwError: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const INTERNET_COOKIE2 = extern struct {
    pwszName: PWSTR,
    pwszValue: PWSTR,
    pwszDomain: PWSTR,
    pwszPath: PWSTR,
    dwFlags: u32,
    ftExpires: FILETIME,
    fExpiresSet: BOOL,
};

pub const PFN_AUTH_NOTIFY = fn(
    param0: ?*c_void,
    param1: u32,
    param2: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const INTERNET_AUTH_NOTIFY_DATA = extern struct {
    cbStruct: u32,
    dwOptions: u32,
    pfnNotify: PFN_AUTH_NOTIFY,
    dwContext: ?*c_void,
};

pub const INTERNET_CACHE_ENTRY_INFOA = extern struct {
    dwStructSize: u32,
    lpszSourceUrlName: PSTR,
    lpszLocalFileName: PSTR,
    CacheEntryType: u32,
    dwUseCount: u32,
    dwHitRate: u32,
    dwSizeLow: u32,
    dwSizeHigh: u32,
    LastModifiedTime: FILETIME,
    ExpireTime: FILETIME,
    LastAccessTime: FILETIME,
    LastSyncTime: FILETIME,
    lpHeaderInfo: PSTR,
    dwHeaderInfoSize: u32,
    lpszFileExtension: PSTR,
    Anonymous: INTERNET_CACHE_ENTRY_INFOA._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const INTERNET_CACHE_ENTRY_INFOW = extern struct {
    dwStructSize: u32,
    lpszSourceUrlName: PWSTR,
    lpszLocalFileName: PWSTR,
    CacheEntryType: u32,
    dwUseCount: u32,
    dwHitRate: u32,
    dwSizeLow: u32,
    dwSizeHigh: u32,
    LastModifiedTime: FILETIME,
    ExpireTime: FILETIME,
    LastAccessTime: FILETIME,
    LastSyncTime: FILETIME,
    lpHeaderInfo: PWSTR,
    dwHeaderInfoSize: u32,
    lpszFileExtension: PWSTR,
    Anonymous: INTERNET_CACHE_ENTRY_INFOW._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const INTERNET_CACHE_TIMESTAMPS = extern struct {
    ftExpires: FILETIME,
    ftLastModified: FILETIME,
};

pub const INTERNET_CACHE_GROUP_INFOA = extern struct {
    dwGroupSize: u32,
    dwGroupFlags: u32,
    dwGroupType: u32,
    dwDiskUsage: u32,
    dwDiskQuota: u32,
    dwOwnerStorage: [4]u32,
    szGroupName: [120]i8,
};

pub const INTERNET_CACHE_GROUP_INFOW = extern struct {
    dwGroupSize: u32,
    dwGroupFlags: u32,
    dwGroupType: u32,
    dwDiskUsage: u32,
    dwDiskQuota: u32,
    dwOwnerStorage: [4]u32,
    szGroupName: [120]u16,
};

pub const AutoProxyHelperVtbl = extern struct {
    IsResolvable: **********BOOL,
    GetIPAddress: ?*c_void,
    ResolveHostName: ?*c_void,
    IsInNet: **********BOOL,
    IsResolvableEx: **********BOOL,
    GetIPAddressEx: ?*c_void,
    ResolveHostNameEx: ?*c_void,
    IsInNetEx: **********BOOL,
    SortIpList: ?*c_void,
};

pub const AUTO_PROXY_SCRIPT_BUFFER = extern struct {
    dwStructSize: u32,
    lpszScriptBuffer: PSTR,
    dwScriptBufferSize: u32,
};

pub const AutoProxyHelperFunctions = extern struct {
    lpVtbl: *const AutoProxyHelperVtbl,
};

pub const pfnInternetInitializeAutoProxyDll = fn(
    dwVersion: u32,
    lpszDownloadedTempFile: PSTR,
    lpszMime: PSTR,
    lpAutoProxyCallbacks: *AutoProxyHelperFunctions,
    lpAutoProxyScriptBuffer: *AUTO_PROXY_SCRIPT_BUFFER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const pfnInternetDeInitializeAutoProxyDll = fn(
    lpszMime: PSTR,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const pfnInternetGetProxyInfo = fn(
    lpszUrl: [*:0]const u8,
    dwUrlLength: u32,
    lpszUrlHostName: PSTR,
    dwUrlHostNameLength: u32,
    lplpszProxyHostName: *PSTR,
    lpdwProxyHostNameLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const WPAD_CACHE_DELETE = extern enum(i32) {
    CURRENT = 0,
    ALL = 1,
};
pub const WPAD_CACHE_DELETE_CURRENT = WPAD_CACHE_DELETE.CURRENT;
pub const WPAD_CACHE_DELETE_ALL = WPAD_CACHE_DELETE.ALL;

pub const PFN_DIAL_HANDLER = fn(
    param0: HWND,
    param1: [*:0]const u8,
    param2: u32,
    param3: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

const IID_IDialEventSink_Value = @import("../zig.zig").Guid.initString("2d86f4ff-6e2d-4488-b2e9-6934afd41bea");
pub const IID_IDialEventSink = &IID_IDialEventSink_Value;
pub const IDialEventSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnEvent: fn(
            self: *const IDialEventSink,
            dwEvent: u32,
            dwStatus: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialEventSink_OnEvent(self: *const T, dwEvent: u32, dwStatus: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialEventSink.VTable, self.vtable).OnEvent(@ptrCast(*const IDialEventSink, self), dwEvent, dwStatus);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDialEngine_Value = @import("../zig.zig").Guid.initString("39fd782b-7905-40d5-9148-3c9b190423d5");
pub const IID_IDialEngine = &IID_IDialEngine_Value;
pub const IDialEngine = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IDialEngine,
            pwzConnectoid: [*:0]const u16,
            pIDES: *IDialEventSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IDialEngine,
            pwzProperty: [*:0]const u16,
            pwzValue: PWSTR,
            dwBufSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IDialEngine,
            pwzProperty: [*:0]const u16,
            pwzValue: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Dial: fn(
            self: *const IDialEngine,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HangUp: fn(
            self: *const IDialEngine,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnectedState: fn(
            self: *const IDialEngine,
            pdwState: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnectHandle: fn(
            self: *const IDialEngine,
            pdwHandle: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialEngine_Initialize(self: *const T, pwzConnectoid: [*:0]const u16, pIDES: *IDialEventSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialEngine.VTable, self.vtable).Initialize(@ptrCast(*const IDialEngine, self), pwzConnectoid, pIDES);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialEngine_GetProperty(self: *const T, pwzProperty: [*:0]const u16, pwzValue: PWSTR, dwBufSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialEngine.VTable, self.vtable).GetProperty(@ptrCast(*const IDialEngine, self), pwzProperty, pwzValue, dwBufSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialEngine_SetProperty(self: *const T, pwzProperty: [*:0]const u16, pwzValue: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialEngine.VTable, self.vtable).SetProperty(@ptrCast(*const IDialEngine, self), pwzProperty, pwzValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialEngine_Dial(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialEngine.VTable, self.vtable).Dial(@ptrCast(*const IDialEngine, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialEngine_HangUp(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialEngine.VTable, self.vtable).HangUp(@ptrCast(*const IDialEngine, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialEngine_GetConnectedState(self: *const T, pdwState: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialEngine.VTable, self.vtable).GetConnectedState(@ptrCast(*const IDialEngine, self), pdwState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialEngine_GetConnectHandle(self: *const T, pdwHandle: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialEngine.VTable, self.vtable).GetConnectHandle(@ptrCast(*const IDialEngine, self), pdwHandle);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDialBranding_Value = @import("../zig.zig").Guid.initString("8aecafa9-4306-43cc-8c5a-765f2979cc16");
pub const IID_IDialBranding = &IID_IDialBranding_Value;
pub const IDialBranding = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IDialBranding,
            pwzConnectoid: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitmap: fn(
            self: *const IDialBranding,
            dwIndex: u32,
            phBitmap: *HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialBranding_Initialize(self: *const T, pwzConnectoid: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialBranding.VTable, self.vtable).Initialize(@ptrCast(*const IDialBranding, self), pwzConnectoid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDialBranding_GetBitmap(self: *const T, dwIndex: u32, phBitmap: *HBITMAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDialBranding.VTable, self.vtable).GetBitmap(@ptrCast(*const IDialBranding, self), dwIndex, phBitmap);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const INTERNET_PREFETCH_STATUS = extern struct {
    dwStatus: u32,
    dwSize: u32,
};

pub const INTERNET_SECURITY_INFO = extern struct {
    dwSize: u32,
    pCertificate: *CERT_CONTEXT,
    pcCertChain: *CERT_CHAIN_CONTEXT,
    connectionInfo: SecPkgContext_ConnectionInfo,
    cipherInfo: SecPkgContext_CipherInfo,
    pcUnverifiedCertChain: *CERT_CHAIN_CONTEXT,
    channelBindingToken: SecPkgContext_Bindings,
};

pub const INTERNET_SECURITY_CONNECTION_INFO = extern struct {
    dwSize: u32,
    fSecure: BOOL,
    connectionInfo: SecPkgContext_ConnectionInfo,
    cipherInfo: SecPkgContext_CipherInfo,
};

pub const FORTCMD = extern enum(i32) {
    LOGON = 1,
    LOGOFF = 2,
    CHG_PERSONALITY = 3,
};
pub const FORTCMD_LOGON = FORTCMD.LOGON;
pub const FORTCMD_LOGOFF = FORTCMD.LOGOFF;
pub const FORTCMD_CHG_PERSONALITY = FORTCMD.CHG_PERSONALITY;

pub const FORTSTAT = extern enum(i32) {
    INSTALLED = 1,
    LOGGEDON = 2,
};
pub const FORTSTAT_INSTALLED = FORTSTAT.INSTALLED;
pub const FORTSTAT_LOGGEDON = FORTSTAT.LOGGEDON;

pub const INTERNET_DOWNLOAD_MODE_HANDLE = extern struct {
    pcwszFileName: [*:0]const u16,
    phFile: *HANDLE,
};

pub const REQUEST_TIMES = extern enum(i32) {
    NameResolutionStart = 0,
    NameResolutionEnd = 1,
    ConnectionEstablishmentStart = 2,
    ConnectionEstablishmentEnd = 3,
    TLSHandshakeStart = 4,
    TLSHandshakeEnd = 5,
    HttpRequestTimeMax = 32,
};
pub const NameResolutionStart = REQUEST_TIMES.NameResolutionStart;
pub const NameResolutionEnd = REQUEST_TIMES.NameResolutionEnd;
pub const ConnectionEstablishmentStart = REQUEST_TIMES.ConnectionEstablishmentStart;
pub const ConnectionEstablishmentEnd = REQUEST_TIMES.ConnectionEstablishmentEnd;
pub const TLSHandshakeStart = REQUEST_TIMES.TLSHandshakeStart;
pub const TLSHandshakeEnd = REQUEST_TIMES.TLSHandshakeEnd;
pub const HttpRequestTimeMax = REQUEST_TIMES.HttpRequestTimeMax;

pub const HTTP_REQUEST_TIMES = extern struct {
    cTimes: u32,
    rgTimes: [32]u64,
};

pub const INTERNET_SERVER_CONNECTION_STATE = extern struct {
    lpcwszHostName: [*:0]const u16,
    fProxy: BOOL,
    dwCounter: u32,
    dwConnectionLimit: u32,
    dwAvailableCreates: u32,
    dwAvailableKeepAlives: u32,
    dwActiveConnections: u32,
    dwWaiters: u32,
};

pub const INTERNET_END_BROWSER_SESSION_DATA = extern struct {
    lpBuffer: *c_void,
    dwBufferLength: u32,
};

pub const INTERNET_CALLBACK_COOKIE = extern struct {
    pcwszName: [*:0]const u16,
    pcwszValue: [*:0]const u16,
    pcwszDomain: [*:0]const u16,
    pcwszPath: [*:0]const u16,
    ftExpires: FILETIME,
    dwFlags: u32,
};

pub const INTERNET_CREDENTIALS = extern struct {
    lpcwszHostName: [*:0]const u16,
    dwPort: u32,
    dwScheme: u32,
    lpcwszUrl: [*:0]const u16,
    lpcwszRealm: [*:0]const u16,
    fAuthIdentity: BOOL,
    Anonymous: INTERNET_CREDENTIALS._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const HTTP_PUSH_TRANSPORT_SETTING = extern struct {
    TransportSettingId: Guid,
    BrokerEventId: Guid,
};

pub const HTTP_PUSH_NOTIFICATION_STATUS = extern struct {
    ChannelStatusValid: BOOL,
    ChannelStatus: u32,
};

pub const HTTP_PUSH_WAIT_TYPE = extern enum(i32) {
    EnableComplete = 0,
    ReceiveComplete = 1,
    SendComplete = 2,
};
pub const HttpPushWaitEnableComplete = HTTP_PUSH_WAIT_TYPE.EnableComplete;
pub const HttpPushWaitReceiveComplete = HTTP_PUSH_WAIT_TYPE.ReceiveComplete;
pub const HttpPushWaitSendComplete = HTTP_PUSH_WAIT_TYPE.SendComplete;

pub const INTERNET_COOKIE = extern struct {
    cbSize: u32,
    pszName: PSTR,
    pszData: PSTR,
    pszDomain: PSTR,
    pszPath: PSTR,
    pftExpires: *FILETIME,
    dwFlags: u32,
    pszUrl: PSTR,
    pszP3PPolicy: PSTR,
};

pub const COOKIE_DLG_INFO = extern struct {
    pszServer: PWSTR,
    pic: *INTERNET_COOKIE,
    dwStopWarning: u32,
    cx: i32,
    cy: i32,
    pszHeader: PWSTR,
    dwOperation: u32,
};

pub const INTERNET_CACHE_CONFIG_PATH_ENTRYA = extern struct {
    CachePath: [260]i8,
    dwCacheSize: u32,
};

pub const INTERNET_CACHE_CONFIG_PATH_ENTRYW = extern struct {
    CachePath: [260]u16,
    dwCacheSize: u32,
};

pub const INTERNET_CACHE_CONFIG_INFOA = extern struct {
    dwStructSize: u32,
    dwContainer: u32,
    dwQuota: u32,
    dwReserved4: u32,
    fPerUser: BOOL,
    dwSyncMode: u32,
    dwNumCachePaths: u32,
    Anonymous: INTERNET_CACHE_CONFIG_INFOA._Anonymous_e__Union,
    dwNormalUsage: u32,
    dwExemptUsage: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const INTERNET_CACHE_CONFIG_INFOW = extern struct {
    dwStructSize: u32,
    dwContainer: u32,
    dwQuota: u32,
    dwReserved4: u32,
    fPerUser: BOOL,
    dwSyncMode: u32,
    dwNumCachePaths: u32,
    Anonymous: INTERNET_CACHE_CONFIG_INFOW._Anonymous_e__Union,
    dwNormalUsage: u32,
    dwExemptUsage: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const INTERNET_CACHE_CONTAINER_INFOA = extern struct {
    dwCacheVersion: u32,
    lpszName: PSTR,
    lpszCachePrefix: PSTR,
    lpszVolumeLabel: PSTR,
    lpszVolumeTitle: PSTR,
};

pub const INTERNET_CACHE_CONTAINER_INFOW = extern struct {
    dwCacheVersion: u32,
    lpszName: PWSTR,
    lpszCachePrefix: PWSTR,
    lpszVolumeLabel: PWSTR,
    lpszVolumeTitle: PWSTR,
};

pub const WININET_SYNC_MODE = extern enum(i32) {
    NEVER = 0,
    ON_EXPIRY = 1,
    ONCE_PER_SESSION = 2,
    ALWAYS = 3,
    AUTOMATIC = 4,
    DEFAULT = 4,
};
pub const WININET_SYNC_MODE_NEVER = WININET_SYNC_MODE.NEVER;
pub const WININET_SYNC_MODE_ON_EXPIRY = WININET_SYNC_MODE.ON_EXPIRY;
pub const WININET_SYNC_MODE_ONCE_PER_SESSION = WININET_SYNC_MODE.ONCE_PER_SESSION;
pub const WININET_SYNC_MODE_ALWAYS = WININET_SYNC_MODE.ALWAYS;
pub const WININET_SYNC_MODE_AUTOMATIC = WININET_SYNC_MODE.AUTOMATIC;
pub const WININET_SYNC_MODE_DEFAULT = WININET_SYNC_MODE.DEFAULT;

pub const APP_CACHE_STATE = extern enum(i32) {
    NoUpdateNeeded = 0,
    UpdateNeeded = 1,
    UpdateNeededNew = 2,
    UpdateNeededMasterOnly = 3,
};
pub const AppCacheStateNoUpdateNeeded = APP_CACHE_STATE.NoUpdateNeeded;
pub const AppCacheStateUpdateNeeded = APP_CACHE_STATE.UpdateNeeded;
pub const AppCacheStateUpdateNeededNew = APP_CACHE_STATE.UpdateNeededNew;
pub const AppCacheStateUpdateNeededMasterOnly = APP_CACHE_STATE.UpdateNeededMasterOnly;

pub const APP_CACHE_DOWNLOAD_ENTRY = extern struct {
    pwszUrl: PWSTR,
    dwEntryType: u32,
};

pub const APP_CACHE_DOWNLOAD_LIST = extern struct {
    dwEntryCount: u32,
    pEntries: *APP_CACHE_DOWNLOAD_ENTRY,
};

pub const APP_CACHE_FINALIZE_STATE = extern enum(i32) {
    Incomplete = 0,
    ManifestChange = 1,
    Complete = 2,
};
pub const AppCacheFinalizeStateIncomplete = APP_CACHE_FINALIZE_STATE.Incomplete;
pub const AppCacheFinalizeStateManifestChange = APP_CACHE_FINALIZE_STATE.ManifestChange;
pub const AppCacheFinalizeStateComplete = APP_CACHE_FINALIZE_STATE.Complete;

pub const APP_CACHE_GROUP_INFO = extern struct {
    pwszManifestUrl: PWSTR,
    ftLastAccessTime: FILETIME,
    ullSize: u64,
};

pub const APP_CACHE_GROUP_LIST = extern struct {
    dwAppCacheGroupCount: u32,
    pAppCacheGroups: *APP_CACHE_GROUP_INFO,
};

pub const URLCACHE_ENTRY_INFO = extern struct {
    pwszSourceUrlName: PWSTR,
    pwszLocalFileName: PWSTR,
    dwCacheEntryType: u32,
    dwUseCount: u32,
    dwHitRate: u32,
    dwSizeLow: u32,
    dwSizeHigh: u32,
    ftLastModifiedTime: FILETIME,
    ftExpireTime: FILETIME,
    ftLastAccessTime: FILETIME,
    ftLastSyncTime: FILETIME,
    pbHeaderInfo: *u8,
    cbHeaderInfoSize: u32,
    pbExtraData: *u8,
    cbExtraDataSize: u32,
};

pub const URL_CACHE_LIMIT_TYPE = extern enum(i32) {
    IE = 0,
    IETotal = 1,
    AppContainer = 2,
    AppContainerTotal = 3,
    Num = 4,
};
pub const UrlCacheLimitTypeIE = URL_CACHE_LIMIT_TYPE.IE;
pub const UrlCacheLimitTypeIETotal = URL_CACHE_LIMIT_TYPE.IETotal;
pub const UrlCacheLimitTypeAppContainer = URL_CACHE_LIMIT_TYPE.AppContainer;
pub const UrlCacheLimitTypeAppContainerTotal = URL_CACHE_LIMIT_TYPE.AppContainerTotal;
pub const UrlCacheLimitTypeNum = URL_CACHE_LIMIT_TYPE.Num;

pub const WININET_PROXY_INFO = extern struct {
    fProxy: BOOL,
    fBypass: BOOL,
    ProxyScheme: INTERNET_SCHEME,
    pwszProxy: PWSTR,
    ProxyPort: u16,
};

pub const WININET_PROXY_INFO_LIST = extern struct {
    dwProxyInfoCount: u32,
    pProxyInfo: *WININET_PROXY_INFO,
};

pub const CACHE_OPERATOR = fn(
    pcei: *INTERNET_CACHE_ENTRY_INFOA,
    pcbcei: *u32,
    pOpData: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const HTTP_WEB_SOCKET_OPERATION = extern enum(i32) {
    SEND_OPERATION = 0,
    RECEIVE_OPERATION = 1,
    CLOSE_OPERATION = 2,
    SHUTDOWN_OPERATION = 3,
};
pub const HTTP_WEB_SOCKET_SEND_OPERATION = HTTP_WEB_SOCKET_OPERATION.SEND_OPERATION;
pub const HTTP_WEB_SOCKET_RECEIVE_OPERATION = HTTP_WEB_SOCKET_OPERATION.RECEIVE_OPERATION;
pub const HTTP_WEB_SOCKET_CLOSE_OPERATION = HTTP_WEB_SOCKET_OPERATION.CLOSE_OPERATION;
pub const HTTP_WEB_SOCKET_SHUTDOWN_OPERATION = HTTP_WEB_SOCKET_OPERATION.SHUTDOWN_OPERATION;

pub const HTTP_WEB_SOCKET_BUFFER_TYPE = extern enum(i32) {
    BINARY_MESSAGE_TYPE = 0,
    BINARY_FRAGMENT_TYPE = 1,
    UTF8_MESSAGE_TYPE = 2,
    UTF8_FRAGMENT_TYPE = 3,
    CLOSE_TYPE = 4,
    PING_TYPE = 5,
};
pub const HTTP_WEB_SOCKET_BINARY_MESSAGE_TYPE = HTTP_WEB_SOCKET_BUFFER_TYPE.BINARY_MESSAGE_TYPE;
pub const HTTP_WEB_SOCKET_BINARY_FRAGMENT_TYPE = HTTP_WEB_SOCKET_BUFFER_TYPE.BINARY_FRAGMENT_TYPE;
pub const HTTP_WEB_SOCKET_UTF8_MESSAGE_TYPE = HTTP_WEB_SOCKET_BUFFER_TYPE.UTF8_MESSAGE_TYPE;
pub const HTTP_WEB_SOCKET_UTF8_FRAGMENT_TYPE = HTTP_WEB_SOCKET_BUFFER_TYPE.UTF8_FRAGMENT_TYPE;
pub const HTTP_WEB_SOCKET_CLOSE_TYPE = HTTP_WEB_SOCKET_BUFFER_TYPE.CLOSE_TYPE;
pub const HTTP_WEB_SOCKET_PING_TYPE = HTTP_WEB_SOCKET_BUFFER_TYPE.PING_TYPE;

pub const HTTP_WEB_SOCKET_CLOSE_STATUS = extern enum(i32) {
    SUCCESS_CLOSE_STATUS = 1000,
    ENDPOINT_TERMINATED_CLOSE_STATUS = 1001,
    PROTOCOL_ERROR_CLOSE_STATUS = 1002,
    INVALID_DATA_TYPE_CLOSE_STATUS = 1003,
    EMPTY_CLOSE_STATUS = 1005,
    ABORTED_CLOSE_STATUS = 1006,
    INVALID_PAYLOAD_CLOSE_STATUS = 1007,
    POLICY_VIOLATION_CLOSE_STATUS = 1008,
    MESSAGE_TOO_BIG_CLOSE_STATUS = 1009,
    UNSUPPORTED_EXTENSIONS_CLOSE_STATUS = 1010,
    SERVER_ERROR_CLOSE_STATUS = 1011,
    SECURE_HANDSHAKE_ERROR_CLOSE_STATUS = 1015,
};
pub const HTTP_WEB_SOCKET_SUCCESS_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.SUCCESS_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_ENDPOINT_TERMINATED_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.ENDPOINT_TERMINATED_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_PROTOCOL_ERROR_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.PROTOCOL_ERROR_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_INVALID_DATA_TYPE_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.INVALID_DATA_TYPE_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_EMPTY_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.EMPTY_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_ABORTED_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.ABORTED_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_INVALID_PAYLOAD_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.INVALID_PAYLOAD_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_POLICY_VIOLATION_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.POLICY_VIOLATION_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_MESSAGE_TOO_BIG_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.MESSAGE_TOO_BIG_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_UNSUPPORTED_EXTENSIONS_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.UNSUPPORTED_EXTENSIONS_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_SERVER_ERROR_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.SERVER_ERROR_CLOSE_STATUS;
pub const HTTP_WEB_SOCKET_SECURE_HANDSHAKE_ERROR_CLOSE_STATUS = HTTP_WEB_SOCKET_CLOSE_STATUS.SECURE_HANDSHAKE_ERROR_CLOSE_STATUS;

pub const HTTP_WEB_SOCKET_ASYNC_RESULT = extern struct {
    AsyncResult: INTERNET_ASYNC_RESULT,
    Operation: HTTP_WEB_SOCKET_OPERATION,
    BufferType: HTTP_WEB_SOCKET_BUFFER_TYPE,
    dwBytesTransferred: u32,
};

const CLSID_ProofOfPossessionCookieInfoManager_Value = @import("../zig.zig").Guid.initString("a9927f85-a304-4390-8b23-a75f1c668600");
pub const CLSID_ProofOfPossessionCookieInfoManager = &CLSID_ProofOfPossessionCookieInfoManager_Value;

pub const ProofOfPossessionCookieInfo = extern struct {
    name: PWSTR,
    data: PWSTR,
    flags: u32,
    p3pHeader: PWSTR,
};

const IID_IProofOfPossessionCookieInfoManager_Value = @import("../zig.zig").Guid.initString("cdaece56-4edf-43df-b113-88e4556fa1bb");
pub const IID_IProofOfPossessionCookieInfoManager = &IID_IProofOfPossessionCookieInfoManager_Value;
pub const IProofOfPossessionCookieInfoManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCookieInfoForUri: fn(
            self: *const IProofOfPossessionCookieInfoManager,
            uri: [*:0]const u16,
            cookieInfoCount: *u32,
            cookieInfo: [*]*ProofOfPossessionCookieInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProofOfPossessionCookieInfoManager_GetCookieInfoForUri(self: *const T, uri: [*:0]const u16, cookieInfoCount: *u32, cookieInfo: [*]*ProofOfPossessionCookieInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProofOfPossessionCookieInfoManager.VTable, self.vtable).GetCookieInfoForUri(@ptrCast(*const IProofOfPossessionCookieInfoManager, self), uri, cookieInfoCount, cookieInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IProofOfPossessionCookieInfoManager2_Value = @import("../zig.zig").Guid.initString("15e41407-b42f-4ae7-9966-34a087b2d713");
pub const IID_IProofOfPossessionCookieInfoManager2 = &IID_IProofOfPossessionCookieInfoManager2_Value;
pub const IProofOfPossessionCookieInfoManager2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCookieInfoWithUriForAccount: fn(
            self: *const IProofOfPossessionCookieInfoManager2,
            webAccount: *IInspectable,
            uri: [*:0]const u16,
            cookieInfoCount: *u32,
            cookieInfo: [*]*ProofOfPossessionCookieInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProofOfPossessionCookieInfoManager2_GetCookieInfoWithUriForAccount(self: *const T, webAccount: *IInspectable, uri: [*:0]const u16, cookieInfoCount: *u32, cookieInfo: [*]*ProofOfPossessionCookieInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProofOfPossessionCookieInfoManager2.VTable, self.vtable).GetCookieInfoWithUriForAccount(@ptrCast(*const IProofOfPossessionCookieInfoManager2, self), webAccount, uri, cookieInfoCount, cookieInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CACHE_CONFIG = extern enum(u32) {
    FORCE_CLEANUP_FC = 32,
    DISK_CACHE_PATHS_FC = 64,
    SYNC_MODE_FC = 128,
    CONTENT_PATHS_FC = 256,
    HISTORY_PATHS_FC = 1024,
    COOKIES_PATHS_FC = 512,
    QUOTA_FC = 2048,
    USER_MODE_FC = 4096,
    CONTENT_USAGE_FC = 8192,
    STICKY_CONTENT_USAGE_FC = 16384,
};
pub const CACHE_CONFIG_FORCE_CLEANUP_FC = CACHE_CONFIG.FORCE_CLEANUP_FC;
pub const CACHE_CONFIG_DISK_CACHE_PATHS_FC = CACHE_CONFIG.DISK_CACHE_PATHS_FC;
pub const CACHE_CONFIG_SYNC_MODE_FC = CACHE_CONFIG.SYNC_MODE_FC;
pub const CACHE_CONFIG_CONTENT_PATHS_FC = CACHE_CONFIG.CONTENT_PATHS_FC;
pub const CACHE_CONFIG_HISTORY_PATHS_FC = CACHE_CONFIG.HISTORY_PATHS_FC;
pub const CACHE_CONFIG_COOKIES_PATHS_FC = CACHE_CONFIG.COOKIES_PATHS_FC;
pub const CACHE_CONFIG_QUOTA_FC = CACHE_CONFIG.QUOTA_FC;
pub const CACHE_CONFIG_USER_MODE_FC = CACHE_CONFIG.USER_MODE_FC;
pub const CACHE_CONFIG_CONTENT_USAGE_FC = CACHE_CONFIG.CONTENT_USAGE_FC;
pub const CACHE_CONFIG_STICKY_CONTENT_USAGE_FC = CACHE_CONFIG.STICKY_CONTENT_USAGE_FC;

pub const Ftp_dwFlags = extern enum(u32) {
    FTP_TRANSFER_TYPE_ASCII = 1,
    FTP_TRANSFER_TYPE_BINARY = 2,
    FTP_TRANSFER_TYPE_UNKNOWN = 0,
    INTERNET_FLAG_TRANSFER_ASCII = 1,
    INTERNET_FLAG_TRANSFER_BINARY = 2,
};
pub const FTP_TRANSFER_TYPE_ASCII = Ftp_dwFlags.FTP_TRANSFER_TYPE_ASCII;
pub const FTP_TRANSFER_TYPE_BINARY = Ftp_dwFlags.FTP_TRANSFER_TYPE_BINARY;
pub const FTP_TRANSFER_TYPE_UNKNOWN = Ftp_dwFlags.FTP_TRANSFER_TYPE_UNKNOWN;
pub const INTERNET_FLAG_TRANSFER_ASCII = Ftp_dwFlags.INTERNET_FLAG_TRANSFER_ASCII;
pub const INTERNET_FLAG_TRANSFER_BINARY = Ftp_dwFlags.INTERNET_FLAG_TRANSFER_BINARY;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const INTERNET_CONNECTION = extern enum(u32) {
    CONFIGURED = 64,
    LAN_ = 2,
    MODEM = 1,
    MODEM_BUSY = 8,
    OFFLINE_ = 32,
    PROXY = 4,
    _,
};
pub const INTERNET_CONNECTION_CONFIGURED = INTERNET_CONNECTION.CONFIGURED;
pub const INTERNET_CONNECTION_LAN_ = INTERNET_CONNECTION.LAN_;
pub const INTERNET_CONNECTION_MODEM = INTERNET_CONNECTION.MODEM;
pub const INTERNET_CONNECTION_MODEM_BUSY = INTERNET_CONNECTION.MODEM_BUSY;
pub const INTERNET_CONNECTION_OFFLINE_ = INTERNET_CONNECTION.OFFLINE_;
pub const INTERNET_CONNECTION_PROXY = INTERNET_CONNECTION.PROXY;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const HTTP_ADDREQ_FLAG = extern enum(u32) {
    ADD = 536870912,
    ADD_IF_NEW = 268435456,
    COALESCE = 1073741824,
    COALESCE_WITH_COMMA = 1073741824,
    COALESCE_WITH_SEMICOLON = 16777216,
    REPLACE = 2147483648,
    _,
};
pub const HTTP_ADDREQ_FLAG_ADD = HTTP_ADDREQ_FLAG.ADD;
pub const HTTP_ADDREQ_FLAG_ADD_IF_NEW = HTTP_ADDREQ_FLAG.ADD_IF_NEW;
pub const HTTP_ADDREQ_FLAG_COALESCE = HTTP_ADDREQ_FLAG.COALESCE;
pub const HTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA = HTTP_ADDREQ_FLAG.COALESCE_WITH_COMMA;
pub const HTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON = HTTP_ADDREQ_FLAG.COALESCE_WITH_SEMICOLON;
pub const HTTP_ADDREQ_FLAG_REPLACE = HTTP_ADDREQ_FLAG.REPLACE;

pub const InternetGetCookieEx_dwFlags = extern enum(u32) {
    COOKIE_HTTPONLY = 8192,
    COOKIE_THIRD_PARTY = 16,
    FLAG_RESTRICTED_ZONE = 131072,
};
pub const INTERNET_COOKIE_HTTPONLY = InternetGetCookieEx_dwFlags.COOKIE_HTTPONLY;
pub const INTERNET_COOKIE_THIRD_PARTY = InternetGetCookieEx_dwFlags.COOKIE_THIRD_PARTY;
pub const INTERNET_FLAG_RESTRICTED_ZONE = InternetGetCookieEx_dwFlags.FLAG_RESTRICTED_ZONE;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const DetectAutoProxyUrl_dwDetectFlags = extern enum(u32) {
    HCP = 1,
    NS_A = 2,
    _,
};
pub const PROXY_AUTO_DETECT_TYPE_DHCP = DetectAutoProxyUrl_dwDetectFlags.HCP;
pub const PROXY_AUTO_DETECT_TYPE_DNS_A = DetectAutoProxyUrl_dwDetectFlags.NS_A;

pub const INTERNET_AUTODIAL = extern enum(u32) {
    FAILIFSECURITYCHECK = 4,
    FORCE_ONLINE = 1,
    FORCE_UNATTENDED = 2,
    OVERRIDE_NET_PRESENT = 8,
};
pub const INTERNET_AUTODIAL_FAILIFSECURITYCHECK = INTERNET_AUTODIAL.FAILIFSECURITYCHECK;
pub const INTERNET_AUTODIAL_FORCE_ONLINE = INTERNET_AUTODIAL.FORCE_ONLINE;
pub const INTERNET_AUTODIAL_FORCE_UNATTENDED = INTERNET_AUTODIAL.FORCE_UNATTENDED;
pub const INTERNET_AUTODIAL_OVERRIDE_NET_PRESENT = INTERNET_AUTODIAL.OVERRIDE_NET_PRESENT;

pub const INTERNET_STATUS_CALLBACK_dwInternetStatusFlags = extern enum(u32) {
    CLOSING_CONNECTION = 50,
    CONNECTED_TO_SERVER = 21,
    CONNECTING_TO_SERVER = 20,
    CONNECTION_CLOSED = 51,
    COOKIE_HISTORY = 327,
    COOKIE_RECEIVED = 321,
    COOKIE_SENT = 320,
    CTL_RESPONSE_RECEIVED = 42,
    DETECTING_PROXY = 80,
    HANDLE_CLOSING = 70,
    HANDLE_CREATED = 60,
    INTERMEDIATE_RESPONSE = 120,
    NAME_RESOLVED = 11,
    P3P_HEADER = 325,
    P3P_POLICYREF = 326,
    PREFETCH = 43,
    RECEIVING_RESPONSE = 40,
    REDIRECT = 110,
    REQUEST_COMPLETE = 100,
    REQUEST_SENT = 31,
    RESOLVING_NAME = 10,
    RESPONSE_RECEIVED = 41,
    SENDING_REQUEST = 30,
    STATE_CHANGE = 200,
};
pub const INTERNET_STATUS_CLOSING_CONNECTION = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.CLOSING_CONNECTION;
pub const INTERNET_STATUS_CONNECTED_TO_SERVER = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.CONNECTED_TO_SERVER;
pub const INTERNET_STATUS_CONNECTING_TO_SERVER = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.CONNECTING_TO_SERVER;
pub const INTERNET_STATUS_CONNECTION_CLOSED = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.CONNECTION_CLOSED;
pub const INTERNET_STATUS_COOKIE_HISTORY = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.COOKIE_HISTORY;
pub const INTERNET_STATUS_COOKIE_RECEIVED = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.COOKIE_RECEIVED;
pub const INTERNET_STATUS_COOKIE_SENT = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.COOKIE_SENT;
pub const INTERNET_STATUS_CTL_RESPONSE_RECEIVED = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.CTL_RESPONSE_RECEIVED;
pub const INTERNET_STATUS_DETECTING_PROXY = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.DETECTING_PROXY;
pub const INTERNET_STATUS_HANDLE_CLOSING = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.HANDLE_CLOSING;
pub const INTERNET_STATUS_HANDLE_CREATED = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.HANDLE_CREATED;
pub const INTERNET_STATUS_INTERMEDIATE_RESPONSE = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.INTERMEDIATE_RESPONSE;
pub const INTERNET_STATUS_NAME_RESOLVED = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.NAME_RESOLVED;
pub const INTERNET_STATUS_P3P_HEADER = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.P3P_HEADER;
pub const INTERNET_STATUS_P3P_POLICYREF = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.P3P_POLICYREF;
pub const INTERNET_STATUS_PREFETCH = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.PREFETCH;
pub const INTERNET_STATUS_RECEIVING_RESPONSE = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.RECEIVING_RESPONSE;
pub const INTERNET_STATUS_REDIRECT = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.REDIRECT;
pub const INTERNET_STATUS_REQUEST_COMPLETE = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.REQUEST_COMPLETE;
pub const INTERNET_STATUS_REQUEST_SENT = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.REQUEST_SENT;
pub const INTERNET_STATUS_RESOLVING_NAME = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.RESOLVING_NAME;
pub const INTERNET_STATUS_RESPONSE_RECEIVED = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.RESPONSE_RECEIVED;
pub const INTERNET_STATUS_SENDING_REQUEST = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.SENDING_REQUEST;
pub const INTERNET_STATUS_STATE_CHANGE = INTERNET_STATUS_CALLBACK_dwInternetStatusFlags.STATE_CHANGE;

pub const GOPHER_TYPE = extern enum(u32) {
    ASK = 1073741824,
    BINARY = 512,
    BITMAP = 16384,
    CALENDAR = 524288,
    CSO = 4,
    DIRECTORY = 2,
    DOS_ARCHIVE = 32,
    ERROR = 8,
    GIF = 4096,
    GOPHER_PLUS = 2147483648,
    HTML = 131072,
    IMAGE = 8192,
    INDEX_SERVER = 128,
    INLINE = 1048576,
    MAC_BINHEX = 16,
    MOVIE = 32768,
    PDF = 262144,
    REDUNDANT = 1024,
    SOUND = 65536,
    TELNET = 256,
    TEXT_FILE = 1,
    TN3270 = 2048,
    UNIX_UUENCODED = 64,
    UNKNOWN = 536870912,
};
pub const GOPHER_TYPE_ASK = GOPHER_TYPE.ASK;
pub const GOPHER_TYPE_BINARY = GOPHER_TYPE.BINARY;
pub const GOPHER_TYPE_BITMAP = GOPHER_TYPE.BITMAP;
pub const GOPHER_TYPE_CALENDAR = GOPHER_TYPE.CALENDAR;
pub const GOPHER_TYPE_CSO = GOPHER_TYPE.CSO;
pub const GOPHER_TYPE_DIRECTORY = GOPHER_TYPE.DIRECTORY;
pub const GOPHER_TYPE_DOS_ARCHIVE = GOPHER_TYPE.DOS_ARCHIVE;
pub const GOPHER_TYPE_ERROR = GOPHER_TYPE.ERROR;
pub const GOPHER_TYPE_GIF = GOPHER_TYPE.GIF;
pub const GOPHER_TYPE_GOPHER_PLUS = GOPHER_TYPE.GOPHER_PLUS;
pub const GOPHER_TYPE_HTML = GOPHER_TYPE.HTML;
pub const GOPHER_TYPE_IMAGE = GOPHER_TYPE.IMAGE;
pub const GOPHER_TYPE_INDEX_SERVER = GOPHER_TYPE.INDEX_SERVER;
pub const GOPHER_TYPE_INLINE = GOPHER_TYPE.INLINE;
pub const GOPHER_TYPE_MAC_BINHEX = GOPHER_TYPE.MAC_BINHEX;
pub const GOPHER_TYPE_MOVIE = GOPHER_TYPE.MOVIE;
pub const GOPHER_TYPE_PDF = GOPHER_TYPE.PDF;
pub const GOPHER_TYPE_REDUNDANT = GOPHER_TYPE.REDUNDANT;
pub const GOPHER_TYPE_SOUND = GOPHER_TYPE.SOUND;
pub const GOPHER_TYPE_TELNET = GOPHER_TYPE.TELNET;
pub const GOPHER_TYPE_TEXT_FILE = GOPHER_TYPE.TEXT_FILE;
pub const GOPHER_TYPE_TN3270 = GOPHER_TYPE.TN3270;
pub const GOPHER_TYPE_UNIX_UUENCODED = GOPHER_TYPE.UNIX_UUENCODED;
pub const GOPHER_TYPE_UNKNOWN = GOPHER_TYPE.UNKNOWN;

pub const INTERNET_PER_CONN = extern enum(u32) {
    AUTOCONFIG_URL = 4,
    AUTODISCOVERY_FLAGS = 5,
    FLAGS = 1,
    PROXY_BYPASS = 3,
    PROXY_SERVER = 2,
    AUTOCONFIG_SECONDARY_URL = 6,
    AUTOCONFIG_RELOAD_DELAY_MINS = 7,
    AUTOCONFIG_LAST_DETECT_TIME = 8,
    AUTOCONFIG_LAST_DETECT_URL = 9,
};
pub const INTERNET_PER_CONN_AUTOCONFIG_URL = INTERNET_PER_CONN.AUTOCONFIG_URL;
pub const INTERNET_PER_CONN_AUTODISCOVERY_FLAGS = INTERNET_PER_CONN.AUTODISCOVERY_FLAGS;
pub const INTERNET_PER_CONN_FLAGS = INTERNET_PER_CONN.FLAGS;
pub const INTERNET_PER_CONN_PROXY_BYPASS = INTERNET_PER_CONN.PROXY_BYPASS;
pub const INTERNET_PER_CONN_PROXY_SERVER = INTERNET_PER_CONN.PROXY_SERVER;
pub const INTERNET_PER_CONN_AUTOCONFIG_SECONDARY_URL = INTERNET_PER_CONN.AUTOCONFIG_SECONDARY_URL;
pub const INTERNET_PER_CONN_AUTOCONFIG_RELOAD_DELAY_MINS = INTERNET_PER_CONN.AUTOCONFIG_RELOAD_DELAY_MINS;
pub const INTERNET_PER_CONN_AUTOCONFIG_LAST_DETECT_TIME = INTERNET_PER_CONN.AUTOCONFIG_LAST_DETECT_TIME;
pub const INTERNET_PER_CONN_AUTOCONFIG_LAST_DETECT_URL = INTERNET_PER_CONN.AUTOCONFIG_LAST_DETECT_URL;

pub const INTERNET_PROXY_INFO_dwAccessTypeFlags = extern enum(u32) {
    DIRECT = 1,
    PRECONFIG = 0,
    PROXY = 3,
};
pub const INTERNET_OPEN_TYPE_DIRECT = INTERNET_PROXY_INFO_dwAccessTypeFlags.DIRECT;
pub const INTERNET_OPEN_TYPE_PRECONFIG = INTERNET_PROXY_INFO_dwAccessTypeFlags.PRECONFIG;
pub const INTERNET_OPEN_TYPE_PROXY = INTERNET_PROXY_INFO_dwAccessTypeFlags.PROXY;

pub const INTERNET_CONNECTED_INFO_dwConnectedStateFlags = extern enum(u32) {
    CONNECTED = 1,
    DISCONNECTED = 2,
    DISCONNECTED_BY_USER = 16,
    IDLE = 256,
    BUSY = 512,
};
pub const INTERNET_STATE_CONNECTED = INTERNET_CONNECTED_INFO_dwConnectedStateFlags.CONNECTED;
pub const INTERNET_STATE_DISCONNECTED = INTERNET_CONNECTED_INFO_dwConnectedStateFlags.DISCONNECTED;
pub const INTERNET_STATE_DISCONNECTED_BY_USER = INTERNET_CONNECTED_INFO_dwConnectedStateFlags.DISCONNECTED_BY_USER;
pub const INTERNET_STATE_IDLE = INTERNET_CONNECTED_INFO_dwConnectedStateFlags.IDLE;
pub const INTERNET_STATE_BUSY = INTERNET_CONNECTED_INFO_dwConnectedStateFlags.BUSY;

pub const HTTP_PUSH_WAIT_HANDLE = ?*c_void;

pub const HTTP_VERSION_INFO = extern struct {
    dwMajorVersion: u32,
    dwMinorVersion: u32,
};


//--------------------------------------------------------------------------------
// Section: Functions (296)
//--------------------------------------------------------------------------------
pub extern "WININET" fn InternetTimeFromSystemTimeA(
    pst: *const SYSTEMTIME,
    dwRFC: u32,
    lpszTime: [*:0]u8,
    cbTime: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetTimeFromSystemTimeW(
    pst: *const SYSTEMTIME,
    dwRFC: u32,
    lpszTime: [*:0]u16,
    cbTime: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetTimeFromSystemTime(
    pst: *const SYSTEMTIME,
    dwRFC: u32,
    lpszTime: [*:0]u8,
    cbTime: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetTimeToSystemTimeA(
    lpszTime: [*:0]const u8,
    pst: *SYSTEMTIME,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetTimeToSystemTimeW(
    lpszTime: [*:0]const u16,
    pst: *SYSTEMTIME,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetTimeToSystemTime(
    lpszTime: [*:0]const u8,
    pst: *SYSTEMTIME,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetCrackUrlA(
    lpszUrl: [*:0]const u8,
    dwUrlLength: u32,
    dwFlags: WinHttpCreateUrl_dwFlags,
    lpUrlComponents: *URL_COMPONENTSA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetCrackUrlW(
    lpszUrl: [*:0]const u16,
    dwUrlLength: u32,
    dwFlags: WinHttpCreateUrl_dwFlags,
    lpUrlComponents: *URL_COMPONENTSW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetCreateUrlA(
    lpUrlComponents: *URL_COMPONENTSA,
    dwFlags: u32,
    lpszUrl: ?[*:0]u8,
    lpdwUrlLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetCreateUrlW(
    lpUrlComponents: *URL_COMPONENTSW,
    dwFlags: u32,
    lpszUrl: ?[*:0]u16,
    lpdwUrlLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetCanonicalizeUrlA(
    lpszUrl: [*:0]const u8,
    lpszBuffer: [*:0]u8,
    lpdwBufferLength: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetCanonicalizeUrlW(
    lpszUrl: [*:0]const u16,
    lpszBuffer: [*:0]u16,
    lpdwBufferLength: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetCombineUrlA(
    lpszBaseUrl: [*:0]const u8,
    lpszRelativeUrl: [*:0]const u8,
    lpszBuffer: [*:0]u8,
    lpdwBufferLength: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetCombineUrlW(
    lpszBaseUrl: [*:0]const u16,
    lpszRelativeUrl: [*:0]const u16,
    lpszBuffer: [*:0]u16,
    lpdwBufferLength: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetOpenA(
    lpszAgent: ?[*:0]const u8,
    dwAccessType: u32,
    lpszProxy: ?[*:0]const u8,
    lpszProxyBypass: ?[*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn InternetOpenW(
    lpszAgent: ?[*:0]const u16,
    dwAccessType: u32,
    lpszProxy: ?[*:0]const u16,
    lpszProxyBypass: ?[*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn InternetCloseHandle(
    hInternet: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetConnectA(
    hInternet: *c_void,
    lpszServerName: [*:0]const u8,
    nServerPort: u16,
    lpszUserName: ?[*:0]const u8,
    lpszPassword: ?[*:0]const u8,
    dwService: u32,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn InternetConnectW(
    hInternet: *c_void,
    lpszServerName: [*:0]const u16,
    nServerPort: u16,
    lpszUserName: ?[*:0]const u16,
    lpszPassword: ?[*:0]const u16,
    dwService: u32,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn InternetOpenUrlA(
    hInternet: *c_void,
    lpszUrl: [*:0]const u8,
    lpszHeaders: ?[*:0]const u8,
    dwHeadersLength: u32,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn InternetOpenUrlW(
    hInternet: *c_void,
    lpszUrl: [*:0]const u16,
    lpszHeaders: ?[*:0]const u16,
    dwHeadersLength: u32,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn InternetReadFile(
    hFile: *c_void,
    lpBuffer: [*]u8,
    dwNumberOfBytesToRead: u32,
    lpdwNumberOfBytesRead: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetReadFileExA(
    hFile: *c_void,
    lpBuffersOut: *INTERNET_BUFFERSA,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetReadFileExW(
    hFile: *c_void,
    lpBuffersOut: *INTERNET_BUFFERSW,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetFilePointer(
    hFile: *c_void,
    lDistanceToMove: i32,
    lpDistanceToMoveHigh: ?*i32,
    dwMoveMethod: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetWriteFile(
    hFile: *c_void,
    lpBuffer: [*]const u8,
    dwNumberOfBytesToWrite: u32,
    lpdwNumberOfBytesWritten: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetQueryDataAvailable(
    hFile: *c_void,
    lpdwNumberOfBytesAvailable: ?*u32,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetFindNextFileA(
    hFind: *c_void,
    lpvFindData: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetFindNextFileW(
    hFind: *c_void,
    lpvFindData: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetQueryOptionA(
    hInternet: ?*c_void,
    dwOption: u32,
    lpBuffer: ?[*]u8,
    lpdwBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetQueryOptionW(
    hInternet: ?*c_void,
    dwOption: u32,
    lpBuffer: ?[*]u8,
    lpdwBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetOptionA(
    hInternet: ?*c_void,
    dwOption: u32,
    lpBuffer: ?*c_void,
    dwBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetOptionW(
    hInternet: ?*c_void,
    dwOption: u32,
    lpBuffer: ?*c_void,
    dwBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetOptionExA(
    hInternet: ?*c_void,
    dwOption: u32,
    lpBuffer: ?*c_void,
    dwBufferLength: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetOptionExW(
    hInternet: ?*c_void,
    dwOption: u32,
    lpBuffer: ?*c_void,
    dwBufferLength: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetLockRequestFile(
    hInternet: *c_void,
    lphLockRequestInfo: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetUnlockRequestFile(
    hLockRequestInfo: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetLastResponseInfoA(
    lpdwError: *u32,
    lpszBuffer: ?[*:0]u8,
    lpdwBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetLastResponseInfoW(
    lpdwError: *u32,
    lpszBuffer: ?[*:0]u16,
    lpdwBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetStatusCallbackA(
    hInternet: *c_void,
    lpfnInternetCallback: ?INTERNET_STATUS_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) INTERNET_STATUS_CALLBACK;

pub extern "WININET" fn InternetSetStatusCallbackW(
    hInternet: *c_void,
    lpfnInternetCallback: ?INTERNET_STATUS_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) INTERNET_STATUS_CALLBACK;

pub extern "WININET" fn InternetSetStatusCallback(
    hInternet: *c_void,
    lpfnInternetCallback: ?INTERNET_STATUS_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) INTERNET_STATUS_CALLBACK;

pub extern "WININET" fn FtpFindFirstFileA(
    hConnect: *c_void,
    lpszSearchFile: ?[*:0]const u8,
    lpFindFileData: ?*WIN32_FIND_DATAA,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn FtpFindFirstFileW(
    hConnect: *c_void,
    lpszSearchFile: ?[*:0]const u16,
    lpFindFileData: ?*WIN32_FIND_DATAW,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn FtpGetFileA(
    hConnect: *c_void,
    lpszRemoteFile: [*:0]const u8,
    lpszNewFile: [*:0]const u8,
    fFailIfExists: BOOL,
    dwFlagsAndAttributes: u32,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpGetFileW(
    hConnect: *c_void,
    lpszRemoteFile: [*:0]const u16,
    lpszNewFile: [*:0]const u16,
    fFailIfExists: BOOL,
    dwFlagsAndAttributes: u32,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpPutFileA(
    hConnect: *c_void,
    lpszLocalFile: [*:0]const u8,
    lpszNewRemoteFile: [*:0]const u8,
    dwFlags: Ftp_dwFlags,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpPutFileW(
    hConnect: *c_void,
    lpszLocalFile: [*:0]const u16,
    lpszNewRemoteFile: [*:0]const u16,
    dwFlags: Ftp_dwFlags,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpGetFileEx(
    hFtpSession: *c_void,
    lpszRemoteFile: [*:0]const u8,
    lpszNewFile: [*:0]const u16,
    fFailIfExists: BOOL,
    dwFlagsAndAttributes: u32,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpPutFileEx(
    hFtpSession: *c_void,
    lpszLocalFile: [*:0]const u16,
    lpszNewRemoteFile: [*:0]const u8,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpDeleteFileA(
    hConnect: *c_void,
    lpszFileName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpDeleteFileW(
    hConnect: *c_void,
    lpszFileName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpRenameFileA(
    hConnect: *c_void,
    lpszExisting: [*:0]const u8,
    lpszNew: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpRenameFileW(
    hConnect: *c_void,
    lpszExisting: [*:0]const u16,
    lpszNew: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpOpenFileA(
    hConnect: *c_void,
    lpszFileName: [*:0]const u8,
    dwAccess: u32,
    dwFlags: Ftp_dwFlags,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn FtpOpenFileW(
    hConnect: *c_void,
    lpszFileName: [*:0]const u16,
    dwAccess: u32,
    dwFlags: Ftp_dwFlags,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn FtpCreateDirectoryA(
    hConnect: *c_void,
    lpszDirectory: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpCreateDirectoryW(
    hConnect: *c_void,
    lpszDirectory: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpRemoveDirectoryA(
    hConnect: *c_void,
    lpszDirectory: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpRemoveDirectoryW(
    hConnect: *c_void,
    lpszDirectory: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpSetCurrentDirectoryA(
    hConnect: *c_void,
    lpszDirectory: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpSetCurrentDirectoryW(
    hConnect: *c_void,
    lpszDirectory: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpGetCurrentDirectoryA(
    hConnect: *c_void,
    lpszCurrentDirectory: [*:0]u8,
    lpdwCurrentDirectory: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpGetCurrentDirectoryW(
    hConnect: *c_void,
    lpszCurrentDirectory: [*:0]u16,
    lpdwCurrentDirectory: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpCommandA(
    hConnect: *c_void,
    fExpectResponse: BOOL,
    dwFlags: Ftp_dwFlags,
    lpszCommand: [*:0]const u8,
    dwContext: ?*c_void,
    phFtpCommand: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpCommandW(
    hConnect: *c_void,
    fExpectResponse: BOOL,
    dwFlags: Ftp_dwFlags,
    lpszCommand: [*:0]const u16,
    dwContext: ?*c_void,
    phFtpCommand: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FtpGetFileSize(
    hFile: *c_void,
    lpdwFileSizeHigh: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn GopherCreateLocatorA(
    lpszHost: [*:0]const u8,
    nServerPort: u16,
    lpszDisplayString: ?[*:0]const u8,
    lpszSelectorString: ?[*:0]const u8,
    dwGopherType: u32,
    lpszLocator: ?[*:0]u8,
    lpdwBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GopherCreateLocatorW(
    lpszHost: [*:0]const u16,
    nServerPort: u16,
    lpszDisplayString: ?[*:0]const u16,
    lpszSelectorString: ?[*:0]const u16,
    dwGopherType: u32,
    lpszLocator: ?[*:0]u16,
    lpdwBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GopherGetLocatorTypeA(
    lpszLocator: [*:0]const u8,
    lpdwGopherType: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GopherGetLocatorTypeW(
    lpszLocator: [*:0]const u16,
    lpdwGopherType: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GopherFindFirstFileA(
    hConnect: *c_void,
    lpszLocator: ?[*:0]const u8,
    lpszSearchString: ?[*:0]const u8,
    lpFindData: ?*GOPHER_FIND_DATAA,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn GopherFindFirstFileW(
    hConnect: *c_void,
    lpszLocator: ?[*:0]const u16,
    lpszSearchString: ?[*:0]const u16,
    lpFindData: ?*GOPHER_FIND_DATAW,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn GopherOpenFileA(
    hConnect: *c_void,
    lpszLocator: [*:0]const u8,
    lpszView: ?[*:0]const u8,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn GopherOpenFileW(
    hConnect: *c_void,
    lpszLocator: [*:0]const u16,
    lpszView: ?[*:0]const u16,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn GopherGetAttributeA(
    hConnect: *c_void,
    lpszLocator: [*:0]const u8,
    lpszAttributeName: ?[*:0]const u8,
    lpBuffer: [*:0]u8,
    dwBufferLength: u32,
    lpdwCharactersReturned: *u32,
    lpfnEnumerator: ?GOPHER_ATTRIBUTE_ENUMERATOR,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GopherGetAttributeW(
    hConnect: *c_void,
    lpszLocator: [*:0]const u16,
    lpszAttributeName: ?[*:0]const u16,
    lpBuffer: [*:0]u8,
    dwBufferLength: u32,
    lpdwCharactersReturned: *u32,
    lpfnEnumerator: ?GOPHER_ATTRIBUTE_ENUMERATOR,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpOpenRequestA(
    hConnect: *c_void,
    lpszVerb: ?[*:0]const u8,
    lpszObjectName: ?[*:0]const u8,
    lpszVersion: ?[*:0]const u8,
    lpszReferrer: ?[*:0]const u8,
    lplpszAcceptTypes: ?*?PSTR,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn HttpOpenRequestW(
    hConnect: *c_void,
    lpszVerb: ?[*:0]const u16,
    lpszObjectName: ?[*:0]const u16,
    lpszVersion: ?[*:0]const u16,
    lpszReferrer: ?[*:0]const u16,
    lplpszAcceptTypes: ?*?PWSTR,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn HttpAddRequestHeadersA(
    hRequest: *c_void,
    lpszHeaders: [*:0]const u8,
    dwHeadersLength: u32,
    dwModifiers: HTTP_ADDREQ_FLAG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpAddRequestHeadersW(
    hRequest: *c_void,
    lpszHeaders: [*:0]const u16,
    dwHeadersLength: u32,
    dwModifiers: HTTP_ADDREQ_FLAG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpSendRequestA(
    hRequest: *c_void,
    lpszHeaders: ?[*:0]const u8,
    dwHeadersLength: u32,
    lpOptional: ?[*]u8,
    dwOptionalLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpSendRequestW(
    hRequest: *c_void,
    lpszHeaders: ?[*:0]const u16,
    dwHeadersLength: u32,
    lpOptional: ?[*]u8,
    dwOptionalLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpSendRequestExA(
    hRequest: *c_void,
    lpBuffersIn: ?*INTERNET_BUFFERSA,
    lpBuffersOut: ?*INTERNET_BUFFERSA,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpSendRequestExW(
    hRequest: *c_void,
    lpBuffersIn: ?*INTERNET_BUFFERSW,
    lpBuffersOut: ?*INTERNET_BUFFERSW,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpEndRequestA(
    hRequest: *c_void,
    lpBuffersOut: ?*INTERNET_BUFFERSA,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpEndRequestW(
    hRequest: *c_void,
    lpBuffersOut: ?*INTERNET_BUFFERSW,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpQueryInfoA(
    hRequest: *c_void,
    dwInfoLevel: u32,
    lpBuffer: ?[*]u8,
    lpdwBufferLength: *u32,
    lpdwIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpQueryInfoW(
    hRequest: *c_void,
    dwInfoLevel: u32,
    lpBuffer: ?[*]u8,
    lpdwBufferLength: *u32,
    lpdwIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetCookieA(
    lpszUrl: [*:0]const u8,
    lpszCookieName: ?[*:0]const u8,
    lpszCookieData: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetCookieW(
    lpszUrl: [*:0]const u16,
    lpszCookieName: ?[*:0]const u16,
    lpszCookieData: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetCookieA(
    lpszUrl: [*:0]const u8,
    lpszCookieName: ?[*:0]const u8,
    lpszCookieData: ?[*:0]u8,
    lpdwSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetCookieW(
    lpszUrl: [*:0]const u16,
    lpszCookieName: ?[*:0]const u16,
    lpszCookieData: ?[*:0]u16,
    lpdwSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetCookieExA(
    lpszUrl: [*:0]const u8,
    lpszCookieName: ?[*:0]const u8,
    lpszCookieData: [*:0]const u8,
    dwFlags: u32,
    dwReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetSetCookieExW(
    lpszUrl: [*:0]const u16,
    lpszCookieName: ?[*:0]const u16,
    lpszCookieData: [*:0]const u16,
    dwFlags: u32,
    dwReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetGetCookieExA(
    lpszUrl: [*:0]const u8,
    lpszCookieName: ?[*:0]const u8,
    lpszCookieData: ?[*:0]u8,
    lpdwSize: *u32,
    dwFlags: InternetGetCookieEx_dwFlags,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetCookieExW(
    lpszUrl: [*:0]const u16,
    lpszCookieName: ?[*:0]const u16,
    lpszCookieData: ?[*:0]u16,
    lpdwSize: *u32,
    dwFlags: InternetGetCookieEx_dwFlags,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetFreeCookies(
    pCookies: ?*INTERNET_COOKIE2,
    dwCookieCount: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WININET" fn InternetGetCookieEx2(
    pcwszUrl: [*:0]const u16,
    pcwszCookieName: ?[*:0]const u16,
    dwFlags: u32,
    ppCookies: **INTERNET_COOKIE2,
    pdwCookieCount: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetSetCookieEx2(
    pcwszUrl: [*:0]const u16,
    pCookie: *const INTERNET_COOKIE2,
    pcwszP3PPolicy: ?[*:0]const u16,
    dwFlags: u32,
    pdwCookieState: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetAttemptConnect(
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetCheckConnectionA(
    lpszUrl: [*:0]const u8,
    dwFlags: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetCheckConnectionW(
    lpszUrl: [*:0]const u16,
    dwFlags: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn ResumeSuspendedDownload(
    hRequest: *c_void,
    dwResultCode: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetErrorDlg(
    hWnd: HWND,
    hRequest: ?*c_void,
    dwError: u32,
    dwFlags: u32,
    lppvData: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetConfirmZoneCrossingA(
    hWnd: HWND,
    szUrlPrev: PSTR,
    szUrlNew: PSTR,
    bPost: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetConfirmZoneCrossingW(
    hWnd: HWND,
    szUrlPrev: PWSTR,
    szUrlNew: PWSTR,
    bPost: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetConfirmZoneCrossing(
    hWnd: HWND,
    szUrlPrev: PSTR,
    szUrlNew: PSTR,
    bPost: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn CreateUrlCacheEntryA(
    lpszUrlName: [*:0]const u8,
    dwExpectedFileSize: u32,
    lpszFileExtension: ?[*:0]const u8,
    lpszFileName: *[260]u8,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn CreateUrlCacheEntryW(
    lpszUrlName: [*:0]const u16,
    dwExpectedFileSize: u32,
    lpszFileExtension: ?[*:0]const u16,
    lpszFileName: *[260]u16,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn CommitUrlCacheEntryA(
    lpszUrlName: [*:0]const u8,
    lpszLocalFileName: ?[*:0]const u8,
    ExpireTime: FILETIME,
    LastModifiedTime: FILETIME,
    CacheEntryType: u32,
    lpHeaderInfo: ?[*:0]u8,
    cchHeaderInfo: u32,
    lpszFileExtension: [*:0]const u8,
    lpszOriginalUrl: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn CommitUrlCacheEntryW(
    lpszUrlName: [*:0]const u16,
    lpszLocalFileName: ?[*:0]const u16,
    ExpireTime: FILETIME,
    LastModifiedTime: FILETIME,
    CacheEntryType: u32,
    lpszHeaderInfo: ?[*:0]u16,
    cchHeaderInfo: u32,
    lpszFileExtension: [*:0]const u16,
    lpszOriginalUrl: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn RetrieveUrlCacheEntryFileA(
    lpszUrlName: [*:0]const u8,
    lpCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: *u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn RetrieveUrlCacheEntryFileW(
    lpszUrlName: [*:0]const u16,
    lpCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: *u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn UnlockUrlCacheEntryFileA(
    lpszUrlName: [*:0]const u8,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn UnlockUrlCacheEntryFileW(
    lpszUrlName: [*:0]const u16,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn UnlockUrlCacheEntryFile(
    lpszUrlName: [*:0]const u8,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn RetrieveUrlCacheEntryStreamA(
    lpszUrlName: [*:0]const u8,
    lpCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: *u32,
    fRandomRead: BOOL,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WININET" fn RetrieveUrlCacheEntryStreamW(
    lpszUrlName: [*:0]const u16,
    lpCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: *u32,
    fRandomRead: BOOL,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WININET" fn ReadUrlCacheEntryStream(
    hUrlCacheStream: HANDLE,
    dwLocation: u32,
    lpBuffer: [*]u8,
    lpdwLen: *u32,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn ReadUrlCacheEntryStreamEx(
    hUrlCacheStream: HANDLE,
    qwLocation: u64,
    lpBuffer: [*]u8,
    lpdwLen: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn UnlockUrlCacheEntryStream(
    hUrlCacheStream: HANDLE,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetUrlCacheEntryInfoA(
    lpszUrlName: [*:0]const u8,
    lpCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetUrlCacheEntryInfoW(
    lpszUrlName: [*:0]const u16,
    lpCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FindFirstUrlCacheGroup(
    dwFlags: u32,
    dwFilter: u32,
    lpSearchCondition: *c_void,
    dwSearchCondition: u32,
    lpGroupId: *i64,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WININET" fn FindNextUrlCacheGroup(
    hFind: HANDLE,
    lpGroupId: *i64,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetUrlCacheGroupAttributeA(
    gid: i64,
    dwFlags: u32,
    dwAttributes: u32,
    lpGroupInfo: [*]INTERNET_CACHE_GROUP_INFOA,
    lpcbGroupInfo: *u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetUrlCacheGroupAttributeW(
    gid: i64,
    dwFlags: u32,
    dwAttributes: u32,
    lpGroupInfo: [*]INTERNET_CACHE_GROUP_INFOW,
    lpcbGroupInfo: *u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheGroupAttributeA(
    gid: i64,
    dwFlags: u32,
    dwAttributes: u32,
    lpGroupInfo: *INTERNET_CACHE_GROUP_INFOA,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheGroupAttributeW(
    gid: i64,
    dwFlags: u32,
    dwAttributes: u32,
    lpGroupInfo: *INTERNET_CACHE_GROUP_INFOW,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetUrlCacheEntryInfoExA(
    lpszUrl: [*:0]const u8,
    lpCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: ?*u32,
    lpszRedirectUrl: PSTR,
    lpcbRedirectUrl: *u32,
    lpReserved: *c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetUrlCacheEntryInfoExW(
    lpszUrl: [*:0]const u16,
    lpCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: ?*u32,
    lpszRedirectUrl: PWSTR,
    lpcbRedirectUrl: *u32,
    lpReserved: *c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheEntryInfoA(
    lpszUrlName: [*:0]const u8,
    lpCacheEntryInfo: *INTERNET_CACHE_ENTRY_INFOA,
    dwFieldControl: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheEntryInfoW(
    lpszUrlName: [*:0]const u16,
    lpCacheEntryInfo: *INTERNET_CACHE_ENTRY_INFOW,
    dwFieldControl: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn CreateUrlCacheGroup(
    dwFlags: u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) i64;

pub extern "WININET" fn DeleteUrlCacheGroup(
    GroupId: i64,
    dwFlags: u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheEntryGroupA(
    lpszUrlName: [*:0]const u8,
    dwFlags: u32,
    GroupId: i64,
    pbGroupAttributes: *u8,
    cbGroupAttributes: u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheEntryGroupW(
    lpszUrlName: [*:0]const u16,
    dwFlags: u32,
    GroupId: i64,
    pbGroupAttributes: *u8,
    cbGroupAttributes: u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheEntryGroup(
    lpszUrlName: [*:0]const u8,
    dwFlags: u32,
    GroupId: i64,
    pbGroupAttributes: *u8,
    cbGroupAttributes: u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FindFirstUrlCacheEntryExA(
    lpszUrlSearchPattern: ?[*:0]const u8,
    dwFlags: u32,
    dwFilter: u32,
    GroupId: i64,
    lpFirstCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: *u32,
    lpGroupAttributes: *c_void,
    lpcbGroupAttributes: *u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WININET" fn FindFirstUrlCacheEntryExW(
    lpszUrlSearchPattern: ?[*:0]const u16,
    dwFlags: u32,
    dwFilter: u32,
    GroupId: i64,
    lpFirstCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: *u32,
    lpGroupAttributes: *c_void,
    lpcbGroupAttributes: *u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WININET" fn FindNextUrlCacheEntryExA(
    hEnumHandle: HANDLE,
    lpNextCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: *u32,
    lpGroupAttributes: *c_void,
    lpcbGroupAttributes: *u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FindNextUrlCacheEntryExW(
    hEnumHandle: HANDLE,
    lpNextCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: *u32,
    lpGroupAttributes: *c_void,
    lpcbGroupAttributes: *u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FindFirstUrlCacheEntryA(
    lpszUrlSearchPattern: ?[*:0]const u8,
    lpFirstCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WININET" fn FindFirstUrlCacheEntryW(
    lpszUrlSearchPattern: ?[*:0]const u16,
    lpFirstCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WININET" fn FindNextUrlCacheEntryA(
    hEnumHandle: HANDLE,
    lpNextCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOA,
    lpcbCacheEntryInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FindNextUrlCacheEntryW(
    hEnumHandle: HANDLE,
    lpNextCacheEntryInfo: ?[*]INTERNET_CACHE_ENTRY_INFOW,
    lpcbCacheEntryInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FindCloseUrlCache(
    hEnumHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn DeleteUrlCacheEntryA(
    lpszUrlName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn DeleteUrlCacheEntryW(
    lpszUrlName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn DeleteUrlCacheEntry(
    lpszUrlName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetDialA(
    hwndParent: HWND,
    lpszConnectoid: ?PSTR,
    dwFlags: u32,
    lpdwConnection: *?*c_void,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetDialW(
    hwndParent: HWND,
    lpszConnectoid: ?PWSTR,
    dwFlags: u32,
    lpdwConnection: *?*c_void,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetDial(
    hwndParent: HWND,
    lpszConnectoid: ?PSTR,
    dwFlags: u32,
    lpdwConnection: *u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetHangUp(
    dwConnection: ?*c_void,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetGoOnlineA(
    lpszURL: ?[*:0]const u8,
    hwndParent: HWND,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGoOnlineW(
    lpszURL: ?[*:0]const u16,
    hwndParent: HWND,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGoOnline(
    lpszURL: ?PSTR,
    hwndParent: HWND,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetAutodial(
    dwFlags: INTERNET_AUTODIAL,
    hwndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetAutodialHangup(
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetConnectedState(
    lpdwFlags: *INTERNET_CONNECTION,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetConnectedStateExA(
    lpdwFlags: ?*INTERNET_CONNECTION,
    lpszConnectionName: ?[*:0]u8,
    cchNameLen: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetConnectedStateExW(
    lpdwFlags: ?*INTERNET_CONNECTION,
    lpszConnectionName: ?[*:0]u16,
    cchNameLen: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn DeleteWpadCacheForNetworks(
    param0: WPAD_CACHE_DELETE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetInitializeAutoProxyDll(
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn DetectAutoProxyUrl(
    pszAutoProxyUrl: [*:0]u8,
    cchAutoProxyUrl: u32,
    dwDetectFlags: DetectAutoProxyUrl_dwDetectFlags,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn CreateMD5SSOHash(
    pszChallengeInfo: PWSTR,
    pwszRealm: PWSTR,
    pwszTarget: PWSTR,
    pbHexHash: *u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetConnectedStateEx(
    lpdwFlags: *INTERNET_CONNECTION,
    lpszConnectionName: ?[*:0]u8,
    dwNameLen: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetDialStateA(
    lpszConnectoid: ?[*:0]const u8,
    dwState: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetDialStateW(
    lpszConnectoid: ?[*:0]const u16,
    dwState: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetDialState(
    lpszConnectoid: ?[*:0]const u8,
    dwState: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetPerSiteCookieDecisionA(
    pchHostName: [*:0]const u8,
    dwDecision: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSetPerSiteCookieDecisionW(
    pchHostName: [*:0]const u16,
    dwDecision: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetPerSiteCookieDecisionA(
    pchHostName: [*:0]const u8,
    pResult: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetPerSiteCookieDecisionW(
    pchHostName: [*:0]const u16,
    pResult: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetClearAllPerSiteCookieDecisions(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetEnumPerSiteCookieDecisionA(
    pszSiteName: [*:0]u8,
    pcSiteNameSize: *u32,
    pdwDecision: *u32,
    dwIndex: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetEnumPerSiteCookieDecisionW(
    pszSiteName: [*:0]u16,
    pcSiteNameSize: *u32,
    pdwDecision: *u32,
    dwIndex: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn PrivacySetZonePreferenceW(
    dwZone: u32,
    dwType: u32,
    dwTemplate: u32,
    pszPreference: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn PrivacyGetZonePreferenceW(
    dwZone: u32,
    dwType: u32,
    pdwTemplate: ?*u32,
    pszBuffer: ?[*:0]u16,
    pdwBufferLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn HttpIsHostHstsEnabled(
    pcwszUrl: [*:0]const u16,
    pfIsHsts: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetAlgIdToStringA(
    ai: u32,
    lpstr: [*:0]u8,
    lpdwstrLength: *u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetAlgIdToStringW(
    ai: u32,
    lpstr: [*:0]u16,
    lpdwstrLength: *u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSecurityProtocolToStringA(
    dwProtocol: u32,
    lpstr: ?[*:0]u8,
    lpdwstrLength: *u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetSecurityProtocolToStringW(
    dwProtocol: u32,
    lpstr: ?[*:0]u16,
    lpdwstrLength: *u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetSecurityInfoByURLA(
    lpszURL: PSTR,
    ppCertChain: **CERT_CHAIN_CONTEXT,
    pdwSecureFlags: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetSecurityInfoByURLW(
    lpszURL: [*:0]const u16,
    ppCertChain: **CERT_CHAIN_CONTEXT,
    pdwSecureFlags: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetGetSecurityInfoByURL(
    lpszURL: PSTR,
    ppCertChain: **CERT_CHAIN_CONTEXT,
    pdwSecureFlags: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn ShowSecurityInfo(
    hWndParent: HWND,
    pSecurityInfo: *INTERNET_SECURITY_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn ShowX509EncodedCertificate(
    hWndParent: HWND,
    lpCert: [*:0]u8,
    cbCert: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn ShowClientAuthCerts(
    hWndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn ParseX509EncodedCertificateForListBoxEntry(
    lpCert: [*:0]u8,
    cbCert: u32,
    lpszListBoxEntry: ?[*:0]u8,
    lpdwListBoxEntry: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn InternetShowSecurityInfoByURLA(
    lpszURL: PSTR,
    hwndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetShowSecurityInfoByURLW(
    lpszURL: [*:0]const u16,
    hwndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetShowSecurityInfoByURL(
    lpszURL: PSTR,
    hwndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetFortezzaCommand(
    dwCommand: u32,
    hwnd: HWND,
    dwReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetQueryFortezzaStatus(
    pdwStatus: *u32,
    dwReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetWriteFileExA(
    hFile: *c_void,
    lpBuffersIn: *INTERNET_BUFFERSA,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetWriteFileExW(
    hFile: *c_void,
    lpBuffersIn: *INTERNET_BUFFERSW,
    dwFlags: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FindP3PPolicySymbol(
    pszSymbol: *const i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WININET" fn HttpGetServerCredentials(
    pwszUrl: PWSTR,
    ppwszUserName: *PWSTR,
    ppwszPassword: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn HttpPushEnable(
    hRequest: *c_void,
    pTransportSetting: *HTTP_PUSH_TRANSPORT_SETTING,
    phWait: *HTTP_PUSH_WAIT_HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn HttpPushWait(
    hWait: HTTP_PUSH_WAIT_HANDLE,
    eType: HTTP_PUSH_WAIT_TYPE,
    pNotificationStatus: ?*HTTP_PUSH_NOTIFICATION_STATUS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn HttpPushClose(
    hWait: HTTP_PUSH_WAIT_HANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WININET" fn HttpCheckDavComplianceA(
    lpszUrl: [*:0]const u8,
    lpszComplianceToken: [*:0]const u8,
    lpfFound: *i32,
    hWnd: HWND,
    lpvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpCheckDavComplianceW(
    lpszUrl: [*:0]const u16,
    lpszComplianceToken: [*:0]const u16,
    lpfFound: *i32,
    hWnd: HWND,
    lpvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn IsUrlCacheEntryExpiredA(
    lpszUrlName: [*:0]const u8,
    dwFlags: u32,
    pftLastModified: *FILETIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn IsUrlCacheEntryExpiredW(
    lpszUrlName: [*:0]const u16,
    dwFlags: u32,
    pftLastModified: *FILETIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn CreateUrlCacheEntryExW(
    lpszUrlName: [*:0]const u16,
    dwExpectedFileSize: u32,
    lpszFileExtension: ?[*:0]const u16,
    lpszFileName: *[260]u16,
    dwReserved: u32,
    fPreserveIncomingFileName: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetUrlCacheEntryBinaryBlob(
    pwszUrlName: [*:0]const u16,
    dwType: *u32,
    pftExpireTime: *FILETIME,
    pftAccessTime: *FILETIME,
    pftModifiedTime: *FILETIME,
    ppbBlob: ?[*]?*u8,
    pcbBlob: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn CommitUrlCacheEntryBinaryBlob(
    pwszUrlName: [*:0]const u16,
    dwType: u32,
    ftExpireTime: FILETIME,
    ftModifiedTime: FILETIME,
    pbBlob: ?[*:0]const u8,
    cbBlob: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn CreateUrlCacheContainerA(
    Name: [*:0]const u8,
    lpCachePrefix: [*:0]const u8,
    lpszCachePath: ?[*:0]const u8,
    KBCacheLimit: u32,
    dwContainerType: u32,
    dwOptions: u32,
    pvBuffer: *c_void,
    cbBuffer: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn CreateUrlCacheContainerW(
    Name: [*:0]const u16,
    lpCachePrefix: [*:0]const u16,
    lpszCachePath: ?[*:0]const u16,
    KBCacheLimit: u32,
    dwContainerType: u32,
    dwOptions: u32,
    pvBuffer: *c_void,
    cbBuffer: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn DeleteUrlCacheContainerA(
    Name: [*:0]const u8,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn DeleteUrlCacheContainerW(
    Name: [*:0]const u16,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FindFirstUrlCacheContainerA(
    pdwModified: *u32,
    lpContainerInfo: [*]INTERNET_CACHE_CONTAINER_INFOA,
    lpcbContainerInfo: *u32,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WININET" fn FindFirstUrlCacheContainerW(
    pdwModified: *u32,
    lpContainerInfo: [*]INTERNET_CACHE_CONTAINER_INFOW,
    lpcbContainerInfo: *u32,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WININET" fn FindNextUrlCacheContainerA(
    hEnumHandle: HANDLE,
    lpContainerInfo: [*]INTERNET_CACHE_CONTAINER_INFOA,
    lpcbContainerInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FindNextUrlCacheContainerW(
    hEnumHandle: HANDLE,
    lpContainerInfo: [*]INTERNET_CACHE_CONTAINER_INFOW,
    lpcbContainerInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FreeUrlCacheSpaceA(
    lpszCachePath: ?[*:0]const u8,
    dwSize: u32,
    dwFilter: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn FreeUrlCacheSpaceW(
    lpszCachePath: ?[*:0]const u16,
    dwSize: u32,
    dwFilter: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn UrlCacheFreeGlobalSpace(
    ullTargetSize: u64,
    dwFilter: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheGetGlobalCacheSize(
    dwFilter: u32,
    pullSize: *u64,
    pullLimit: *u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn GetUrlCacheConfigInfoA(
    lpCacheConfigInfo: *INTERNET_CACHE_CONFIG_INFOA,
    lpcbCacheConfigInfo: *u32,
    dwFieldControl: CACHE_CONFIG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetUrlCacheConfigInfoW(
    lpCacheConfigInfo: *INTERNET_CACHE_CONFIG_INFOW,
    lpcbCacheConfigInfo: *u32,
    dwFieldControl: CACHE_CONFIG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheConfigInfoA(
    lpCacheConfigInfo: *INTERNET_CACHE_CONFIG_INFOA,
    dwFieldControl: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheConfigInfoW(
    lpCacheConfigInfo: *INTERNET_CACHE_CONFIG_INFOW,
    dwFieldControl: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn RunOnceUrlCache(
    hwnd: HWND,
    hinst: HINSTANCE,
    lpszCmd: PSTR,
    nCmdShow: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn DeleteIE3Cache(
    hwnd: HWND,
    hinst: HINSTANCE,
    lpszCmd: PSTR,
    nCmdShow: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UpdateUrlCacheContentPath(
    szNewPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn RegisterUrlCacheNotification(
    hWnd: HWND,
    uMsg: u32,
    gid: i64,
    dwOpsFilter: u32,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetUrlCacheHeaderData(
    nIdx: u32,
    lpdwData: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn SetUrlCacheHeaderData(
    nIdx: u32,
    dwData: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn IncrementUrlCacheHeaderData(
    nIdx: u32,
    lpdwData: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn LoadUrlCacheContent(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn AppCacheLookup(
    pwszUrl: [*:0]const u16,
    dwFlags: u32,
    phAppCache: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheCheckManifest(
    pwszMasterUrl: ?[*:0]const u16,
    pwszManifestUrl: [*:0]const u16,
    pbManifestData: [*:0]const u8,
    dwManifestDataSize: u32,
    pbManifestResponseHeaders: [*:0]const u8,
    dwManifestResponseHeadersSize: u32,
    peState: *APP_CACHE_STATE,
    phNewAppCache: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheGetDownloadList(
    hAppCache: *c_void,
    pDownloadList: *APP_CACHE_DOWNLOAD_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheFreeDownloadList(
    pDownloadList: *APP_CACHE_DOWNLOAD_LIST,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WININET" fn AppCacheFinalize(
    hAppCache: *c_void,
    pbManifestData: [*:0]const u8,
    dwManifestDataSize: u32,
    peState: *APP_CACHE_FINALIZE_STATE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheGetFallbackUrl(
    hAppCache: *c_void,
    pwszUrl: [*:0]const u16,
    ppwszFallbackUrl: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheGetManifestUrl(
    hAppCache: *c_void,
    ppwszManifestUrl: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheDuplicateHandle(
    hAppCache: *c_void,
    phDuplicatedAppCache: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheCloseHandle(
    hAppCache: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WININET" fn AppCacheFreeGroupList(
    pAppCacheGroupList: *APP_CACHE_GROUP_LIST,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WININET" fn AppCacheGetGroupList(
    pAppCacheGroupList: *APP_CACHE_GROUP_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheGetInfo(
    hAppCache: *c_void,
    pAppCacheInfo: *APP_CACHE_GROUP_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheDeleteGroup(
    pwszManifestUrl: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheFreeSpace(
    ftCutOff: FILETIME,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheGetIEGroupList(
    pAppCacheGroupList: *APP_CACHE_GROUP_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheDeleteIEGroup(
    pwszManifestUrl: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheFreeIESpace(
    ftCutOff: FILETIME,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn AppCacheCreateAndCommitFile(
    hAppCache: *c_void,
    pwszSourceFilePath: [*:0]const u16,
    pwszUrl: [*:0]const u16,
    pbResponseHeaders: [*:0]const u8,
    dwResponseHeadersSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn HttpOpenDependencyHandle(
    hRequestHandle: *c_void,
    fBackground: BOOL,
    phDependencyHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn HttpCloseDependencyHandle(
    hDependencyHandle: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WININET" fn HttpDuplicateDependencyHandle(
    hDependencyHandle: *c_void,
    phDuplicatedDependencyHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn HttpIndicatePageLoadComplete(
    hDependencyHandle: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheFreeEntryInfo(
    pCacheEntryInfo: *URLCACHE_ENTRY_INFO,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WININET" fn UrlCacheGetEntryInfo(
    hAppCache: ?*c_void,
    pcwszUrl: [*:0]const u16,
    pCacheEntryInfo: ?*URLCACHE_ENTRY_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheCloseEntryHandle(
    hEntryFile: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WININET" fn UrlCacheRetrieveEntryFile(
    hAppCache: ?*c_void,
    pcwszUrl: [*:0]const u16,
    pCacheEntryInfo: *URLCACHE_ENTRY_INFO,
    phEntryFile: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheReadEntryStream(
    hUrlCacheStream: *c_void,
    ullLocation: u64,
    pBuffer: *c_void,
    dwBufferLen: u32,
    pdwBufferLen: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheRetrieveEntryStream(
    hAppCache: ?*c_void,
    pcwszUrl: [*:0]const u16,
    fRandomRead: BOOL,
    pCacheEntryInfo: *URLCACHE_ENTRY_INFO,
    phEntryStream: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheUpdateEntryExtraData(
    hAppCache: ?*c_void,
    pcwszUrl: [*:0]const u16,
    pbExtraData: [*:0]const u8,
    cbExtraData: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheCreateContainer(
    pwszName: [*:0]const u16,
    pwszPrefix: [*:0]const u16,
    pwszDirectory: [*:0]const u16,
    ullLimit: u64,
    dwOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheCheckEntriesExist(
    rgpwszUrls: [*]PWSTR,
    cEntries: u32,
    rgfExist: [*]BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheGetContentPaths(
    pppwszDirectories: **PWSTR,
    pcDirectories: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheGetGlobalLimit(
    limitType: URL_CACHE_LIMIT_TYPE,
    pullLimit: *u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheSetGlobalLimit(
    limitType: URL_CACHE_LIMIT_TYPE,
    ullLimit: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheReloadSettings(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheContainerSetEntryMaximumAge(
    pwszPrefix: [*:0]const u16,
    dwEntryMaxAge: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheFindFirstEntry(
    pwszPrefix: ?[*:0]const u16,
    dwFlags: u32,
    dwFilter: u32,
    GroupId: i64,
    pCacheEntryInfo: *URLCACHE_ENTRY_INFO,
    phFind: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheFindNextEntry(
    hFind: HANDLE,
    pCacheEntryInfo: *URLCACHE_ENTRY_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn UrlCacheServer(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn ReadGuidsForConnectedNetworks(
    pcNetworks: ?*u32,
    pppwszNetworkGuids: ?*?*?PWSTR,
    pppbstrNetworkNames: ?*?*BSTR,
    pppwszGWMacs: ?*?*?PWSTR,
    pcGatewayMacs: ?*u32,
    pdwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn IsHostInProxyBypassList(
    tScheme: INTERNET_SCHEME,
    lpszHost: [*:0]const u8,
    cchHost: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetFreeProxyInfoList(
    pProxyInfoList: *WININET_PROXY_INFO_LIST,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WININET" fn InternetGetProxyForUrl(
    hInternet: *c_void,
    pcwszUrl: [*:0]const u16,
    pProxyInfoList: *WININET_PROXY_INFO_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn DoConnectoidsExist(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn GetDiskInfoA(
    pszPath: [*:0]const u8,
    pdwClusterSize: ?*u32,
    pdlAvail: ?*u64,
    pdlTotal: ?*u64,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn PerformOperationOverUrlCacheA(
    pszUrlSearchPattern: ?[*:0]const u8,
    dwFlags: u32,
    dwFilter: u32,
    GroupId: i64,
    pReserved1: *c_void,
    pdwReserved2: *u32,
    pReserved3: *c_void,
    op: CACHE_OPERATOR,
    pOperatorData: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn IsProfilesEnabled(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternalInternetGetCookie(
    lpszUrl: [*:0]const u8,
    lpszCookieData: [*:0]u8,
    lpdwDataSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WININET" fn ImportCookieFileA(
    szFilename: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn ImportCookieFileW(
    szFilename: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn ExportCookieFileA(
    szFilename: [*:0]const u8,
    fAppend: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn ExportCookieFileW(
    szFilename: [*:0]const u16,
    fAppend: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn IsDomainLegalCookieDomainA(
    pchDomain: [*:0]const u8,
    pchFullDomain: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn IsDomainLegalCookieDomainW(
    pchDomain: [*:0]const u16,
    pchFullDomain: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpWebSocketCompleteUpgrade(
    hRequest: *c_void,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WININET" fn HttpWebSocketSend(
    hWebSocket: *c_void,
    BufferType: HTTP_WEB_SOCKET_BUFFER_TYPE,
    pvBuffer: ?[*]u8,
    dwBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpWebSocketReceive(
    hWebSocket: *c_void,
    pvBuffer: [*]u8,
    dwBufferLength: u32,
    pdwBytesRead: *u32,
    pBufferType: *HTTP_WEB_SOCKET_BUFFER_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpWebSocketClose(
    hWebSocket: *c_void,
    usStatus: u16,
    pvReason: ?[*]u8,
    dwReasonLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpWebSocketShutdown(
    hWebSocket: *c_void,
    usStatus: u16,
    pvReason: ?[*]u8,
    dwReasonLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn HttpWebSocketQueryCloseStatus(
    hWebSocket: *c_void,
    pusStatus: *u16,
    pvReason: ?[*]u8,
    dwReasonLength: u32,
    pdwReasonLengthConsumed: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WININET" fn InternetConvertUrlFromWireToWideChar(
    pcszUrl: [*:0]const u8,
    cchUrl: u32,
    pcwszBaseUrl: [*:0]const u16,
    dwCodePageHost: u32,
    dwCodePagePath: u32,
    fEncodePathExtra: BOOL,
    dwCodePageExtra: u32,
    ppwszConvertedUrl: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (81)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const INTERNET_PER_CONN_OPTION = INTERNET_PER_CONN_OPTIONA;
        pub const INTERNET_PER_CONN_OPTION_LIST = INTERNET_PER_CONN_OPTION_LISTA;
        pub const URL_COMPONENTS = URL_COMPONENTSA;
        pub const INTERNET_BUFFERS = INTERNET_BUFFERSA;
        pub const GOPHER_FIND_DATA = GOPHER_FIND_DATAA;
        pub const INTERNET_CACHE_ENTRY_INFO = INTERNET_CACHE_ENTRY_INFOA;
        pub const INTERNET_CACHE_GROUP_INFO = INTERNET_CACHE_GROUP_INFOA;
        pub const INTERNET_CACHE_CONFIG_PATH_ENTRY = INTERNET_CACHE_CONFIG_PATH_ENTRYA;
        pub const INTERNET_CACHE_CONFIG_INFO = INTERNET_CACHE_CONFIG_INFOA;
        pub const INTERNET_CACHE_CONTAINER_INFO = INTERNET_CACHE_CONTAINER_INFOA;
        pub const InternetCrackUrl = InternetCrackUrlA;
        pub const InternetCreateUrl = InternetCreateUrlA;
        pub const InternetCanonicalizeUrl = InternetCanonicalizeUrlA;
        pub const InternetCombineUrl = InternetCombineUrlA;
        pub const InternetOpen = InternetOpenA;
        pub const InternetConnect = InternetConnectA;
        pub const InternetOpenUrl = InternetOpenUrlA;
        pub const InternetReadFileEx = InternetReadFileExA;
        pub const InternetFindNextFile = InternetFindNextFileA;
        pub const InternetQueryOption = InternetQueryOptionA;
        pub const InternetSetOption = InternetSetOptionA;
        pub const InternetSetOptionEx = InternetSetOptionExA;
        pub const InternetGetLastResponseInfo = InternetGetLastResponseInfoA;
        pub const FtpFindFirstFile = FtpFindFirstFileA;
        pub const FtpGetFile = FtpGetFileA;
        pub const FtpPutFile = FtpPutFileA;
        pub const FtpDeleteFile = FtpDeleteFileA;
        pub const FtpRenameFile = FtpRenameFileA;
        pub const FtpOpenFile = FtpOpenFileA;
        pub const FtpCreateDirectory = FtpCreateDirectoryA;
        pub const FtpRemoveDirectory = FtpRemoveDirectoryA;
        pub const FtpSetCurrentDirectory = FtpSetCurrentDirectoryA;
        pub const FtpGetCurrentDirectory = FtpGetCurrentDirectoryA;
        pub const FtpCommand = FtpCommandA;
        pub const GopherCreateLocator = GopherCreateLocatorA;
        pub const GopherGetLocatorType = GopherGetLocatorTypeA;
        pub const GopherFindFirstFile = GopherFindFirstFileA;
        pub const GopherOpenFile = GopherOpenFileA;
        pub const GopherGetAttribute = GopherGetAttributeA;
        pub const HttpOpenRequest = HttpOpenRequestA;
        pub const HttpAddRequestHeaders = HttpAddRequestHeadersA;
        pub const HttpSendRequest = HttpSendRequestA;
        pub const HttpSendRequestEx = HttpSendRequestExA;
        pub const HttpEndRequest = HttpEndRequestA;
        pub const HttpQueryInfo = HttpQueryInfoA;
        pub const InternetSetCookie = InternetSetCookieA;
        pub const InternetGetCookie = InternetGetCookieA;
        pub const InternetSetCookieEx = InternetSetCookieExA;
        pub const InternetGetCookieEx = InternetGetCookieExA;
        pub const InternetCheckConnection = InternetCheckConnectionA;
        pub const CreateUrlCacheEntry = CreateUrlCacheEntryA;
        pub const CommitUrlCacheEntry = CommitUrlCacheEntryA;
        pub const RetrieveUrlCacheEntryFile = RetrieveUrlCacheEntryFileA;
        pub const RetrieveUrlCacheEntryStream = RetrieveUrlCacheEntryStreamA;
        pub const GetUrlCacheEntryInfo = GetUrlCacheEntryInfoA;
        pub const GetUrlCacheGroupAttribute = GetUrlCacheGroupAttributeA;
        pub const SetUrlCacheGroupAttribute = SetUrlCacheGroupAttributeA;
        pub const GetUrlCacheEntryInfoEx = GetUrlCacheEntryInfoExA;
        pub const SetUrlCacheEntryInfo = SetUrlCacheEntryInfoA;
        pub const FindFirstUrlCacheEntryEx = FindFirstUrlCacheEntryExA;
        pub const FindNextUrlCacheEntryEx = FindNextUrlCacheEntryExA;
        pub const FindFirstUrlCacheEntry = FindFirstUrlCacheEntryA;
        pub const FindNextUrlCacheEntry = FindNextUrlCacheEntryA;
        pub const InternetSetPerSiteCookieDecision = InternetSetPerSiteCookieDecisionA;
        pub const InternetGetPerSiteCookieDecision = InternetGetPerSiteCookieDecisionA;
        pub const InternetEnumPerSiteCookieDecision = InternetEnumPerSiteCookieDecisionA;
        pub const InternetAlgIdToString = InternetAlgIdToStringA;
        pub const InternetSecurityProtocolToString = InternetSecurityProtocolToStringA;
        pub const InternetWriteFileEx = InternetWriteFileExA;
        pub const HttpCheckDavCompliance = HttpCheckDavComplianceA;
        pub const IsUrlCacheEntryExpired = IsUrlCacheEntryExpiredA;
        pub const CreateUrlCacheContainer = CreateUrlCacheContainerA;
        pub const DeleteUrlCacheContainer = DeleteUrlCacheContainerA;
        pub const FindFirstUrlCacheContainer = FindFirstUrlCacheContainerA;
        pub const FindNextUrlCacheContainer = FindNextUrlCacheContainerA;
        pub const FreeUrlCacheSpace = FreeUrlCacheSpaceA;
        pub const GetUrlCacheConfigInfo = GetUrlCacheConfigInfoA;
        pub const SetUrlCacheConfigInfo = SetUrlCacheConfigInfoA;
        pub const ImportCookieFile = ImportCookieFileA;
        pub const ExportCookieFile = ExportCookieFileA;
        pub const IsDomainLegalCookieDomain = IsDomainLegalCookieDomainA;
    },
    .wide => struct {
        pub const INTERNET_PER_CONN_OPTION = INTERNET_PER_CONN_OPTIONW;
        pub const INTERNET_PER_CONN_OPTION_LIST = INTERNET_PER_CONN_OPTION_LISTW;
        pub const URL_COMPONENTS = URL_COMPONENTSW;
        pub const INTERNET_BUFFERS = INTERNET_BUFFERSW;
        pub const GOPHER_FIND_DATA = GOPHER_FIND_DATAW;
        pub const INTERNET_CACHE_ENTRY_INFO = INTERNET_CACHE_ENTRY_INFOW;
        pub const INTERNET_CACHE_GROUP_INFO = INTERNET_CACHE_GROUP_INFOW;
        pub const INTERNET_CACHE_CONFIG_PATH_ENTRY = INTERNET_CACHE_CONFIG_PATH_ENTRYW;
        pub const INTERNET_CACHE_CONFIG_INFO = INTERNET_CACHE_CONFIG_INFOW;
        pub const INTERNET_CACHE_CONTAINER_INFO = INTERNET_CACHE_CONTAINER_INFOW;
        pub const InternetCrackUrl = InternetCrackUrlW;
        pub const InternetCreateUrl = InternetCreateUrlW;
        pub const InternetCanonicalizeUrl = InternetCanonicalizeUrlW;
        pub const InternetCombineUrl = InternetCombineUrlW;
        pub const InternetOpen = InternetOpenW;
        pub const InternetConnect = InternetConnectW;
        pub const InternetOpenUrl = InternetOpenUrlW;
        pub const InternetReadFileEx = InternetReadFileExW;
        pub const InternetFindNextFile = InternetFindNextFileW;
        pub const InternetQueryOption = InternetQueryOptionW;
        pub const InternetSetOption = InternetSetOptionW;
        pub const InternetSetOptionEx = InternetSetOptionExW;
        pub const InternetGetLastResponseInfo = InternetGetLastResponseInfoW;
        pub const FtpFindFirstFile = FtpFindFirstFileW;
        pub const FtpGetFile = FtpGetFileW;
        pub const FtpPutFile = FtpPutFileW;
        pub const FtpDeleteFile = FtpDeleteFileW;
        pub const FtpRenameFile = FtpRenameFileW;
        pub const FtpOpenFile = FtpOpenFileW;
        pub const FtpCreateDirectory = FtpCreateDirectoryW;
        pub const FtpRemoveDirectory = FtpRemoveDirectoryW;
        pub const FtpSetCurrentDirectory = FtpSetCurrentDirectoryW;
        pub const FtpGetCurrentDirectory = FtpGetCurrentDirectoryW;
        pub const FtpCommand = FtpCommandW;
        pub const GopherCreateLocator = GopherCreateLocatorW;
        pub const GopherGetLocatorType = GopherGetLocatorTypeW;
        pub const GopherFindFirstFile = GopherFindFirstFileW;
        pub const GopherOpenFile = GopherOpenFileW;
        pub const GopherGetAttribute = GopherGetAttributeW;
        pub const HttpOpenRequest = HttpOpenRequestW;
        pub const HttpAddRequestHeaders = HttpAddRequestHeadersW;
        pub const HttpSendRequest = HttpSendRequestW;
        pub const HttpSendRequestEx = HttpSendRequestExW;
        pub const HttpEndRequest = HttpEndRequestW;
        pub const HttpQueryInfo = HttpQueryInfoW;
        pub const InternetSetCookie = InternetSetCookieW;
        pub const InternetGetCookie = InternetGetCookieW;
        pub const InternetSetCookieEx = InternetSetCookieExW;
        pub const InternetGetCookieEx = InternetGetCookieExW;
        pub const InternetCheckConnection = InternetCheckConnectionW;
        pub const CreateUrlCacheEntry = CreateUrlCacheEntryW;
        pub const CommitUrlCacheEntry = CommitUrlCacheEntryW;
        pub const RetrieveUrlCacheEntryFile = RetrieveUrlCacheEntryFileW;
        pub const RetrieveUrlCacheEntryStream = RetrieveUrlCacheEntryStreamW;
        pub const GetUrlCacheEntryInfo = GetUrlCacheEntryInfoW;
        pub const GetUrlCacheGroupAttribute = GetUrlCacheGroupAttributeW;
        pub const SetUrlCacheGroupAttribute = SetUrlCacheGroupAttributeW;
        pub const GetUrlCacheEntryInfoEx = GetUrlCacheEntryInfoExW;
        pub const SetUrlCacheEntryInfo = SetUrlCacheEntryInfoW;
        pub const FindFirstUrlCacheEntryEx = FindFirstUrlCacheEntryExW;
        pub const FindNextUrlCacheEntryEx = FindNextUrlCacheEntryExW;
        pub const FindFirstUrlCacheEntry = FindFirstUrlCacheEntryW;
        pub const FindNextUrlCacheEntry = FindNextUrlCacheEntryW;
        pub const InternetSetPerSiteCookieDecision = InternetSetPerSiteCookieDecisionW;
        pub const InternetGetPerSiteCookieDecision = InternetGetPerSiteCookieDecisionW;
        pub const InternetEnumPerSiteCookieDecision = InternetEnumPerSiteCookieDecisionW;
        pub const InternetAlgIdToString = InternetAlgIdToStringW;
        pub const InternetSecurityProtocolToString = InternetSecurityProtocolToStringW;
        pub const InternetWriteFileEx = InternetWriteFileExW;
        pub const HttpCheckDavCompliance = HttpCheckDavComplianceW;
        pub const IsUrlCacheEntryExpired = IsUrlCacheEntryExpiredW;
        pub const CreateUrlCacheContainer = CreateUrlCacheContainerW;
        pub const DeleteUrlCacheContainer = DeleteUrlCacheContainerW;
        pub const FindFirstUrlCacheContainer = FindFirstUrlCacheContainerW;
        pub const FindNextUrlCacheContainer = FindNextUrlCacheContainerW;
        pub const FreeUrlCacheSpace = FreeUrlCacheSpaceW;
        pub const GetUrlCacheConfigInfo = GetUrlCacheConfigInfoW;
        pub const SetUrlCacheConfigInfo = SetUrlCacheConfigInfoW;
        pub const ImportCookieFile = ImportCookieFileW;
        pub const ExportCookieFile = ExportCookieFileW;
        pub const IsDomainLegalCookieDomain = IsDomainLegalCookieDomainW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const INTERNET_PER_CONN_OPTION = *opaque{};
        pub const INTERNET_PER_CONN_OPTION_LIST = *opaque{};
        pub const URL_COMPONENTS = *opaque{};
        pub const INTERNET_BUFFERS = *opaque{};
        pub const GOPHER_FIND_DATA = *opaque{};
        pub const INTERNET_CACHE_ENTRY_INFO = *opaque{};
        pub const INTERNET_CACHE_GROUP_INFO = *opaque{};
        pub const INTERNET_CACHE_CONFIG_PATH_ENTRY = *opaque{};
        pub const INTERNET_CACHE_CONFIG_INFO = *opaque{};
        pub const INTERNET_CACHE_CONTAINER_INFO = *opaque{};
        pub const InternetCrackUrl = *opaque{};
        pub const InternetCreateUrl = *opaque{};
        pub const InternetCanonicalizeUrl = *opaque{};
        pub const InternetCombineUrl = *opaque{};
        pub const InternetOpen = *opaque{};
        pub const InternetConnect = *opaque{};
        pub const InternetOpenUrl = *opaque{};
        pub const InternetReadFileEx = *opaque{};
        pub const InternetFindNextFile = *opaque{};
        pub const InternetQueryOption = *opaque{};
        pub const InternetSetOption = *opaque{};
        pub const InternetSetOptionEx = *opaque{};
        pub const InternetGetLastResponseInfo = *opaque{};
        pub const FtpFindFirstFile = *opaque{};
        pub const FtpGetFile = *opaque{};
        pub const FtpPutFile = *opaque{};
        pub const FtpDeleteFile = *opaque{};
        pub const FtpRenameFile = *opaque{};
        pub const FtpOpenFile = *opaque{};
        pub const FtpCreateDirectory = *opaque{};
        pub const FtpRemoveDirectory = *opaque{};
        pub const FtpSetCurrentDirectory = *opaque{};
        pub const FtpGetCurrentDirectory = *opaque{};
        pub const FtpCommand = *opaque{};
        pub const GopherCreateLocator = *opaque{};
        pub const GopherGetLocatorType = *opaque{};
        pub const GopherFindFirstFile = *opaque{};
        pub const GopherOpenFile = *opaque{};
        pub const GopherGetAttribute = *opaque{};
        pub const HttpOpenRequest = *opaque{};
        pub const HttpAddRequestHeaders = *opaque{};
        pub const HttpSendRequest = *opaque{};
        pub const HttpSendRequestEx = *opaque{};
        pub const HttpEndRequest = *opaque{};
        pub const HttpQueryInfo = *opaque{};
        pub const InternetSetCookie = *opaque{};
        pub const InternetGetCookie = *opaque{};
        pub const InternetSetCookieEx = *opaque{};
        pub const InternetGetCookieEx = *opaque{};
        pub const InternetCheckConnection = *opaque{};
        pub const CreateUrlCacheEntry = *opaque{};
        pub const CommitUrlCacheEntry = *opaque{};
        pub const RetrieveUrlCacheEntryFile = *opaque{};
        pub const RetrieveUrlCacheEntryStream = *opaque{};
        pub const GetUrlCacheEntryInfo = *opaque{};
        pub const GetUrlCacheGroupAttribute = *opaque{};
        pub const SetUrlCacheGroupAttribute = *opaque{};
        pub const GetUrlCacheEntryInfoEx = *opaque{};
        pub const SetUrlCacheEntryInfo = *opaque{};
        pub const FindFirstUrlCacheEntryEx = *opaque{};
        pub const FindNextUrlCacheEntryEx = *opaque{};
        pub const FindFirstUrlCacheEntry = *opaque{};
        pub const FindNextUrlCacheEntry = *opaque{};
        pub const InternetSetPerSiteCookieDecision = *opaque{};
        pub const InternetGetPerSiteCookieDecision = *opaque{};
        pub const InternetEnumPerSiteCookieDecision = *opaque{};
        pub const InternetAlgIdToString = *opaque{};
        pub const InternetSecurityProtocolToString = *opaque{};
        pub const InternetWriteFileEx = *opaque{};
        pub const HttpCheckDavCompliance = *opaque{};
        pub const IsUrlCacheEntryExpired = *opaque{};
        pub const CreateUrlCacheContainer = *opaque{};
        pub const DeleteUrlCacheContainer = *opaque{};
        pub const FindFirstUrlCacheContainer = *opaque{};
        pub const FindNextUrlCacheContainer = *opaque{};
        pub const FreeUrlCacheSpace = *opaque{};
        pub const GetUrlCacheConfigInfo = *opaque{};
        pub const SetUrlCacheConfigInfo = *opaque{};
        pub const ImportCookieFile = *opaque{};
        pub const ExportCookieFile = *opaque{};
        pub const IsDomainLegalCookieDomain = *opaque{};
    } else struct {
        pub const INTERNET_PER_CONN_OPTION = @compileError("'INTERNET_PER_CONN_OPTION' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_PER_CONN_OPTION_LIST = @compileError("'INTERNET_PER_CONN_OPTION_LIST' requires that UNICODE be set to true or false in the root module");
        pub const URL_COMPONENTS = @compileError("'URL_COMPONENTS' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_BUFFERS = @compileError("'INTERNET_BUFFERS' requires that UNICODE be set to true or false in the root module");
        pub const GOPHER_FIND_DATA = @compileError("'GOPHER_FIND_DATA' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_CACHE_ENTRY_INFO = @compileError("'INTERNET_CACHE_ENTRY_INFO' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_CACHE_GROUP_INFO = @compileError("'INTERNET_CACHE_GROUP_INFO' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_CACHE_CONFIG_PATH_ENTRY = @compileError("'INTERNET_CACHE_CONFIG_PATH_ENTRY' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_CACHE_CONFIG_INFO = @compileError("'INTERNET_CACHE_CONFIG_INFO' requires that UNICODE be set to true or false in the root module");
        pub const INTERNET_CACHE_CONTAINER_INFO = @compileError("'INTERNET_CACHE_CONTAINER_INFO' requires that UNICODE be set to true or false in the root module");
        pub const InternetCrackUrl = @compileError("'InternetCrackUrl' requires that UNICODE be set to true or false in the root module");
        pub const InternetCreateUrl = @compileError("'InternetCreateUrl' requires that UNICODE be set to true or false in the root module");
        pub const InternetCanonicalizeUrl = @compileError("'InternetCanonicalizeUrl' requires that UNICODE be set to true or false in the root module");
        pub const InternetCombineUrl = @compileError("'InternetCombineUrl' requires that UNICODE be set to true or false in the root module");
        pub const InternetOpen = @compileError("'InternetOpen' requires that UNICODE be set to true or false in the root module");
        pub const InternetConnect = @compileError("'InternetConnect' requires that UNICODE be set to true or false in the root module");
        pub const InternetOpenUrl = @compileError("'InternetOpenUrl' requires that UNICODE be set to true or false in the root module");
        pub const InternetReadFileEx = @compileError("'InternetReadFileEx' requires that UNICODE be set to true or false in the root module");
        pub const InternetFindNextFile = @compileError("'InternetFindNextFile' requires that UNICODE be set to true or false in the root module");
        pub const InternetQueryOption = @compileError("'InternetQueryOption' requires that UNICODE be set to true or false in the root module");
        pub const InternetSetOption = @compileError("'InternetSetOption' requires that UNICODE be set to true or false in the root module");
        pub const InternetSetOptionEx = @compileError("'InternetSetOptionEx' requires that UNICODE be set to true or false in the root module");
        pub const InternetGetLastResponseInfo = @compileError("'InternetGetLastResponseInfo' requires that UNICODE be set to true or false in the root module");
        pub const FtpFindFirstFile = @compileError("'FtpFindFirstFile' requires that UNICODE be set to true or false in the root module");
        pub const FtpGetFile = @compileError("'FtpGetFile' requires that UNICODE be set to true or false in the root module");
        pub const FtpPutFile = @compileError("'FtpPutFile' requires that UNICODE be set to true or false in the root module");
        pub const FtpDeleteFile = @compileError("'FtpDeleteFile' requires that UNICODE be set to true or false in the root module");
        pub const FtpRenameFile = @compileError("'FtpRenameFile' requires that UNICODE be set to true or false in the root module");
        pub const FtpOpenFile = @compileError("'FtpOpenFile' requires that UNICODE be set to true or false in the root module");
        pub const FtpCreateDirectory = @compileError("'FtpCreateDirectory' requires that UNICODE be set to true or false in the root module");
        pub const FtpRemoveDirectory = @compileError("'FtpRemoveDirectory' requires that UNICODE be set to true or false in the root module");
        pub const FtpSetCurrentDirectory = @compileError("'FtpSetCurrentDirectory' requires that UNICODE be set to true or false in the root module");
        pub const FtpGetCurrentDirectory = @compileError("'FtpGetCurrentDirectory' requires that UNICODE be set to true or false in the root module");
        pub const FtpCommand = @compileError("'FtpCommand' requires that UNICODE be set to true or false in the root module");
        pub const GopherCreateLocator = @compileError("'GopherCreateLocator' requires that UNICODE be set to true or false in the root module");
        pub const GopherGetLocatorType = @compileError("'GopherGetLocatorType' requires that UNICODE be set to true or false in the root module");
        pub const GopherFindFirstFile = @compileError("'GopherFindFirstFile' requires that UNICODE be set to true or false in the root module");
        pub const GopherOpenFile = @compileError("'GopherOpenFile' requires that UNICODE be set to true or false in the root module");
        pub const GopherGetAttribute = @compileError("'GopherGetAttribute' requires that UNICODE be set to true or false in the root module");
        pub const HttpOpenRequest = @compileError("'HttpOpenRequest' requires that UNICODE be set to true or false in the root module");
        pub const HttpAddRequestHeaders = @compileError("'HttpAddRequestHeaders' requires that UNICODE be set to true or false in the root module");
        pub const HttpSendRequest = @compileError("'HttpSendRequest' requires that UNICODE be set to true or false in the root module");
        pub const HttpSendRequestEx = @compileError("'HttpSendRequestEx' requires that UNICODE be set to true or false in the root module");
        pub const HttpEndRequest = @compileError("'HttpEndRequest' requires that UNICODE be set to true or false in the root module");
        pub const HttpQueryInfo = @compileError("'HttpQueryInfo' requires that UNICODE be set to true or false in the root module");
        pub const InternetSetCookie = @compileError("'InternetSetCookie' requires that UNICODE be set to true or false in the root module");
        pub const InternetGetCookie = @compileError("'InternetGetCookie' requires that UNICODE be set to true or false in the root module");
        pub const InternetSetCookieEx = @compileError("'InternetSetCookieEx' requires that UNICODE be set to true or false in the root module");
        pub const InternetGetCookieEx = @compileError("'InternetGetCookieEx' requires that UNICODE be set to true or false in the root module");
        pub const InternetCheckConnection = @compileError("'InternetCheckConnection' requires that UNICODE be set to true or false in the root module");
        pub const CreateUrlCacheEntry = @compileError("'CreateUrlCacheEntry' requires that UNICODE be set to true or false in the root module");
        pub const CommitUrlCacheEntry = @compileError("'CommitUrlCacheEntry' requires that UNICODE be set to true or false in the root module");
        pub const RetrieveUrlCacheEntryFile = @compileError("'RetrieveUrlCacheEntryFile' requires that UNICODE be set to true or false in the root module");
        pub const RetrieveUrlCacheEntryStream = @compileError("'RetrieveUrlCacheEntryStream' requires that UNICODE be set to true or false in the root module");
        pub const GetUrlCacheEntryInfo = @compileError("'GetUrlCacheEntryInfo' requires that UNICODE be set to true or false in the root module");
        pub const GetUrlCacheGroupAttribute = @compileError("'GetUrlCacheGroupAttribute' requires that UNICODE be set to true or false in the root module");
        pub const SetUrlCacheGroupAttribute = @compileError("'SetUrlCacheGroupAttribute' requires that UNICODE be set to true or false in the root module");
        pub const GetUrlCacheEntryInfoEx = @compileError("'GetUrlCacheEntryInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const SetUrlCacheEntryInfo = @compileError("'SetUrlCacheEntryInfo' requires that UNICODE be set to true or false in the root module");
        pub const FindFirstUrlCacheEntryEx = @compileError("'FindFirstUrlCacheEntryEx' requires that UNICODE be set to true or false in the root module");
        pub const FindNextUrlCacheEntryEx = @compileError("'FindNextUrlCacheEntryEx' requires that UNICODE be set to true or false in the root module");
        pub const FindFirstUrlCacheEntry = @compileError("'FindFirstUrlCacheEntry' requires that UNICODE be set to true or false in the root module");
        pub const FindNextUrlCacheEntry = @compileError("'FindNextUrlCacheEntry' requires that UNICODE be set to true or false in the root module");
        pub const InternetSetPerSiteCookieDecision = @compileError("'InternetSetPerSiteCookieDecision' requires that UNICODE be set to true or false in the root module");
        pub const InternetGetPerSiteCookieDecision = @compileError("'InternetGetPerSiteCookieDecision' requires that UNICODE be set to true or false in the root module");
        pub const InternetEnumPerSiteCookieDecision = @compileError("'InternetEnumPerSiteCookieDecision' requires that UNICODE be set to true or false in the root module");
        pub const InternetAlgIdToString = @compileError("'InternetAlgIdToString' requires that UNICODE be set to true or false in the root module");
        pub const InternetSecurityProtocolToString = @compileError("'InternetSecurityProtocolToString' requires that UNICODE be set to true or false in the root module");
        pub const InternetWriteFileEx = @compileError("'InternetWriteFileEx' requires that UNICODE be set to true or false in the root module");
        pub const HttpCheckDavCompliance = @compileError("'HttpCheckDavCompliance' requires that UNICODE be set to true or false in the root module");
        pub const IsUrlCacheEntryExpired = @compileError("'IsUrlCacheEntryExpired' requires that UNICODE be set to true or false in the root module");
        pub const CreateUrlCacheContainer = @compileError("'CreateUrlCacheContainer' requires that UNICODE be set to true or false in the root module");
        pub const DeleteUrlCacheContainer = @compileError("'DeleteUrlCacheContainer' requires that UNICODE be set to true or false in the root module");
        pub const FindFirstUrlCacheContainer = @compileError("'FindFirstUrlCacheContainer' requires that UNICODE be set to true or false in the root module");
        pub const FindNextUrlCacheContainer = @compileError("'FindNextUrlCacheContainer' requires that UNICODE be set to true or false in the root module");
        pub const FreeUrlCacheSpace = @compileError("'FreeUrlCacheSpace' requires that UNICODE be set to true or false in the root module");
        pub const GetUrlCacheConfigInfo = @compileError("'GetUrlCacheConfigInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetUrlCacheConfigInfo = @compileError("'SetUrlCacheConfigInfo' requires that UNICODE be set to true or false in the root module");
        pub const ImportCookieFile = @compileError("'ImportCookieFile' requires that UNICODE be set to true or false in the root module");
        pub const ExportCookieFile = @compileError("'ExportCookieFile' requires that UNICODE be set to true or false in the root module");
        pub const IsDomainLegalCookieDomain = @compileError("'IsDomainLegalCookieDomain' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (22)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const PWSTR = @import("system_services.zig").PWSTR;
const FILETIME = @import("windows_programming.zig").FILETIME;
const CERT_CONTEXT = @import("security.zig").CERT_CONTEXT;
const IUnknown = @import("com.zig").IUnknown;
const CERT_CHAIN_CONTEXT = @import("security.zig").CERT_CHAIN_CONTEXT;
const HRESULT = @import("com.zig").HRESULT;
const HINSTANCE = @import("system_services.zig").HINSTANCE;
const SecPkgContext_Bindings = @import("security.zig").SecPkgContext_Bindings;
const BSTR = @import("automation.zig").BSTR;
const PSTR = @import("system_services.zig").PSTR;
const HBITMAP = @import("gdi.zig").HBITMAP;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const SecPkgContext_CipherInfo = @import("security.zig").SecPkgContext_CipherInfo;
const IInspectable = @import("win_rt.zig").IInspectable;
const WinHttpCreateUrl_dwFlags = @import("http.zig").WinHttpCreateUrl_dwFlags;
const WIN32_FIND_DATAW = @import("file_system.zig").WIN32_FIND_DATAW;
const SecPkgContext_ConnectionInfo = @import("security.zig").SecPkgContext_ConnectionInfo;
const SYSTEMTIME = @import("windows_programming.zig").SYSTEMTIME;
const HANDLE = @import("system_services.zig").HANDLE;
const WIN32_FIND_DATAA = @import("file_system.zig").WIN32_FIND_DATAA;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = INTERNET_STATUS_CALLBACK;
    _ = LPINTERNET_STATUS_CALLBACK;
    _ = GOPHER_ATTRIBUTE_ENUMERATOR;
    _ = PFN_AUTH_NOTIFY;
    _ = pfnInternetInitializeAutoProxyDll;
    _ = pfnInternetDeInitializeAutoProxyDll;
    _ = pfnInternetGetProxyInfo;
    _ = PFN_DIAL_HANDLER;
    _ = CACHE_OPERATOR;

    const constant_export_count = 680;
    const type_export_count = 118;
    const enum_value_export_count = 181;
    const com_iface_id_export_count = 5;
    const com_class_id_export_count = 1;
    const func_export_count = 296;
    const unicode_alias_count = 81;
    const import_count = 22;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

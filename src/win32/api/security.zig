//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (7)
//--------------------------------------------------------------------------------
pub const wszCMM_PROP_NAME = "Name";
pub const wszCMM_PROP_DESCRIPTION = "Description";
pub const wszCMM_PROP_COPYRIGHT = "Copyright";
pub const wszCMM_PROP_FILEVER = "File Version";
pub const wszCMM_PROP_PRODUCTVER = "Product Version";
pub const wszCMM_PROP_DISPLAY_HWND = "HWND";
pub const wszCMM_PROP_ISMULTITHREADED = "IsMultiThreaded";

//--------------------------------------------------------------------------------
// Section: Types (2018)
//--------------------------------------------------------------------------------
// TODO: This Enum is marked as [Flags], what do I do with this?
pub const CREDUI_FLAGS = extern enum(i32) {
    ALWAYS_SHOW_UI = 128,
    COMPLETE_USERNAME = 2048,
    DO_NOT_PERSIST = 2,
    EXCLUDE_CERTIFICATES = 8,
    EXPECT_CONFIRMATION = 131072,
    GENERIC_CREDENTIALS = 262144,
    INCORRECT_PASSWORD = 1,
    KEEP_USERNAME = 1048576,
    PASSWORD_ONLY_OK = 512,
    PERSIST = 4096,
    REQUEST_ADMINISTRATOR = 4,
    REQUIRE_CERTIFICATE = 16,
    REQUIRE_SMARTCARD = 256,
    SERVER_CREDENTIAL = 16384,
    SHOW_SAVE_CHECK_BOX = 64,
    USERNAME_TARGET_CREDENTIALS = 524288,
    VALIDATE_USERNAME = 1024,
};
pub const CREDUI_FLAGS_ALWAYS_SHOW_UI = CREDUI_FLAGS.ALWAYS_SHOW_UI;
pub const CREDUI_FLAGS_COMPLETE_USERNAME = CREDUI_FLAGS.COMPLETE_USERNAME;
pub const CREDUI_FLAGS_DO_NOT_PERSIST = CREDUI_FLAGS.DO_NOT_PERSIST;
pub const CREDUI_FLAGS_EXCLUDE_CERTIFICATES = CREDUI_FLAGS.EXCLUDE_CERTIFICATES;
pub const CREDUI_FLAGS_EXPECT_CONFIRMATION = CREDUI_FLAGS.EXPECT_CONFIRMATION;
pub const CREDUI_FLAGS_GENERIC_CREDENTIALS = CREDUI_FLAGS.GENERIC_CREDENTIALS;
pub const CREDUI_FLAGS_INCORRECT_PASSWORD = CREDUI_FLAGS.INCORRECT_PASSWORD;
pub const CREDUI_FLAGS_KEEP_USERNAME = CREDUI_FLAGS.KEEP_USERNAME;
pub const CREDUI_FLAGS_PASSWORD_ONLY_OK = CREDUI_FLAGS.PASSWORD_ONLY_OK;
pub const CREDUI_FLAGS_PERSIST = CREDUI_FLAGS.PERSIST;
pub const CREDUI_FLAGS_REQUEST_ADMINISTRATOR = CREDUI_FLAGS.REQUEST_ADMINISTRATOR;
pub const CREDUI_FLAGS_REQUIRE_CERTIFICATE = CREDUI_FLAGS.REQUIRE_CERTIFICATE;
pub const CREDUI_FLAGS_REQUIRE_SMARTCARD = CREDUI_FLAGS.REQUIRE_SMARTCARD;
pub const CREDUI_FLAGS_SERVER_CREDENTIAL = CREDUI_FLAGS.SERVER_CREDENTIAL;
pub const CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX = CREDUI_FLAGS.SHOW_SAVE_CHECK_BOX;
pub const CREDUI_FLAGS_USERNAME_TARGET_CREDENTIALS = CREDUI_FLAGS.USERNAME_TARGET_CREDENTIALS;
pub const CREDUI_FLAGS_VALIDATE_USERNAME = CREDUI_FLAGS.VALIDATE_USERNAME;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const CREDUIWIN = extern enum(i32) {
    GENERIC = 1,
    CHECKBOX = 2,
    AUTHPACKAGE_ONLY = 16,
    IN_CRED_ONLY = 32,
    ENUMERATE_ADMINS = 256,
    ENUMERATE_CURRENT_USER = 512,
    SECURE_PROMPT = 4096,
    PREPROMPTING = 8192,
    PACK_32_WOW = 268435456,
};
pub const CREDUIWIN_GENERIC = CREDUIWIN.GENERIC;
pub const CREDUIWIN_CHECKBOX = CREDUIWIN.CHECKBOX;
pub const CREDUIWIN_AUTHPACKAGE_ONLY = CREDUIWIN.AUTHPACKAGE_ONLY;
pub const CREDUIWIN_IN_CRED_ONLY = CREDUIWIN.IN_CRED_ONLY;
pub const CREDUIWIN_ENUMERATE_ADMINS = CREDUIWIN.ENUMERATE_ADMINS;
pub const CREDUIWIN_ENUMERATE_CURRENT_USER = CREDUIWIN.ENUMERATE_CURRENT_USER;
pub const CREDUIWIN_SECURE_PROMPT = CREDUIWIN.SECURE_PROMPT;
pub const CREDUIWIN_PREPROMPTING = CREDUIWIN.PREPROMPTING;
pub const CREDUIWIN_PACK_32_WOW = CREDUIWIN.PACK_32_WOW;

pub const SEC_WINNT_AUTH_IDENTITY_W = extern struct {
    User: *u16,
    UserLength: u32,
    Domain: *u16,
    DomainLength: u32,
    Password: *u16,
    PasswordLength: u32,
    Flags: u32,
};

pub const SEC_WINNT_AUTH_IDENTITY_A = extern struct {
    User: *u8,
    UserLength: u32,
    Domain: *u8,
    DomainLength: u32,
    Password: *u8,
    PasswordLength: u32,
    Flags: u32,
};

pub const UNICODE_STRING = extern struct {
    Length: u16,
    MaximumLength: u16,
    Buffer: [*]u16,
};

pub const CMS_KEY_INFO = extern struct {
    dwVersion: u32,
    Algid: u32,
    pbOID: *u8,
    cbOID: u32,
};

pub const HMAC_Info = extern struct {
    HashAlgid: u32,
    pbInnerString: *u8,
    cbInnerString: u32,
    pbOuterString: *u8,
    cbOuterString: u32,
};

pub const SCHANNEL_ALG = extern struct {
    dwUse: u32,
    Algid: u32,
    cBits: u32,
    dwFlags: u32,
    dwReserved: u32,
};

pub const PROV_ENUMALGS = extern struct {
    aiAlgid: u32,
    dwBitLen: u32,
    dwNameLen: u32,
    szName: [20]i8,
};

pub const PROV_ENUMALGS_EX = extern struct {
    aiAlgid: u32,
    dwDefaultLen: u32,
    dwMinLen: u32,
    dwMaxLen: u32,
    dwProtocols: u32,
    dwNameLen: u32,
    szName: [20]i8,
    dwLongNameLen: u32,
    szLongName: [40]i8,
};

pub const PUBLICKEYSTRUC = extern struct {
    bType: u8,
    bVersion: u8,
    reserved: u16,
    aiKeyAlg: u32,
};

pub const RSAPUBKEY = extern struct {
    magic: u32,
    bitlen: u32,
    pubexp: u32,
};

pub const PUBKEY = extern struct {
    magic: u32,
    bitlen: u32,
};

pub const DSSSEED = extern struct {
    counter: u32,
    seed: [20]u8,
};

pub const PUBKEYVER3 = extern struct {
    magic: u32,
    bitlenP: u32,
    bitlenQ: u32,
    bitlenJ: u32,
    DSSSeed: DSSSEED,
};

pub const PRIVKEYVER3 = extern struct {
    magic: u32,
    bitlenP: u32,
    bitlenQ: u32,
    bitlenJ: u32,
    bitlenX: u32,
    DSSSeed: DSSSEED,
};

pub const KEY_TYPE_SUBTYPE = extern struct {
    dwKeySpec: u32,
    Type: Guid,
    Subtype: Guid,
};

pub const CERT_FORTEZZA_DATA_PROP = extern struct {
    SerialNumber: [8]u8,
    CertIndex: i32,
    CertLabel: [36]u8,
};

pub const CRYPT_RC4_KEY_STATE = extern struct {
    Key: [16]u8,
    SBox: [256]u8,
    i: u8,
    j: u8,
};

pub const CRYPT_DES_KEY_STATE = extern struct {
    Key: [8]u8,
    IV: [8]u8,
    Feedback: [8]u8,
};

pub const CRYPT_3DES_KEY_STATE = extern struct {
    Key: [24]u8,
    IV: [8]u8,
    Feedback: [8]u8,
};

pub const CRYPT_AES_128_KEY_STATE = extern struct {
    Key: [16]u8,
    IV: [16]u8,
    EncryptionState: [176]u8,
    DecryptionState: [176]u8,
    Feedback: [16]u8,
};

pub const CRYPT_AES_256_KEY_STATE = extern struct {
    Key: [32]u8,
    IV: [16]u8,
    EncryptionState: [240]u8,
    DecryptionState: [240]u8,
    Feedback: [16]u8,
};

pub const CRYPTOAPI_BLOB = extern struct {
    cbData: u32,
    pbData: *u8,
};

pub const CMS_DH_KEY_INFO = extern struct {
    dwVersion: u32,
    Algid: u32,
    pszContentEncObjId: PSTR,
    PubInfo: CRYPTOAPI_BLOB,
    pReserved: *c_void,
};

pub const BCRYPT_KEY_LENGTHS_STRUCT = extern struct {
    dwMinLength: u32,
    dwMaxLength: u32,
    dwIncrement: u32,
};

pub const BCRYPT_OID = extern struct {
    cbOID: u32,
    pbOID: *u8,
};

pub const BCRYPT_OID_LIST = extern struct {
    dwOIDCount: u32,
    pOIDs: *BCRYPT_OID,
};

pub const BCRYPT_PKCS1_PADDING_INFO = extern struct {
    pszAlgId: [*:0]const u16,
};

pub const BCRYPT_PSS_PADDING_INFO = extern struct {
    pszAlgId: [*:0]const u16,
    cbSalt: u32,
};

pub const BCRYPT_OAEP_PADDING_INFO = extern struct {
    pszAlgId: [*:0]const u16,
    pbLabel: *u8,
    cbLabel: u32,
};

pub const BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO = extern struct {
    cbSize: u32,
    dwInfoVersion: u32,
    pbNonce: *u8,
    cbNonce: u32,
    pbAuthData: *u8,
    cbAuthData: u32,
    pbTag: *u8,
    cbTag: u32,
    pbMacContext: *u8,
    cbMacContext: u32,
    cbAAD: u32,
    cbData: u64,
    dwFlags: u32,
};

pub const BCryptBuffer = extern struct {
    cbBuffer: u32,
    BufferType: u32,
    pvBuffer: *c_void,
};

pub const BCryptBufferDesc = extern struct {
    ulVersion: u32,
    cBuffers: u32,
    pBuffers: *BCryptBuffer,
};

pub const BCRYPT_KEY_BLOB = extern struct {
    Magic: u32,
};

pub const BCRYPT_RSAKEY_BLOB = extern struct {
    Magic: u32,
    BitLength: u32,
    cbPublicExp: u32,
    cbModulus: u32,
    cbPrime1: u32,
    cbPrime2: u32,
};

pub const BCRYPT_ECCKEY_BLOB = extern struct {
    dwMagic: u32,
    cbKey: u32,
};

pub const SSL_ECCKEY_BLOB = extern struct {
    dwCurveType: u32,
    cbKey: u32,
};

pub const ECC_CURVE_TYPE_ENUM = extern enum(i32) {
    BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE = 1,
    BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE = 2,
    BCRYPT_ECC_PRIME_MONTGOMERY_CURVE = 3,
};
pub const BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE = ECC_CURVE_TYPE_ENUM.BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE;
pub const BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE = ECC_CURVE_TYPE_ENUM.BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE;
pub const BCRYPT_ECC_PRIME_MONTGOMERY_CURVE = ECC_CURVE_TYPE_ENUM.BCRYPT_ECC_PRIME_MONTGOMERY_CURVE;

pub const ECC_CURVE_ALG_ID_ENUM = extern enum(i32) {
    BCRYPT_NO_CURVE_GENERATION_ALG_ID = 0,
};
pub const BCRYPT_NO_CURVE_GENERATION_ALG_ID = ECC_CURVE_ALG_ID_ENUM.BCRYPT_NO_CURVE_GENERATION_ALG_ID;

pub const BCRYPT_ECCFULLKEY_BLOB = extern struct {
    dwMagic: u32,
    dwVersion: u32,
    dwCurveType: ECC_CURVE_TYPE_ENUM,
    dwCurveGenerationAlgId: ECC_CURVE_ALG_ID_ENUM,
    cbFieldLength: u32,
    cbSubgroupOrder: u32,
    cbCofactor: u32,
    cbSeed: u32,
};

pub const BCRYPT_DH_KEY_BLOB = extern struct {
    dwMagic: u32,
    cbKey: u32,
};

pub const BCRYPT_DH_PARAMETER_HEADER = extern struct {
    cbLength: u32,
    dwMagic: u32,
    cbKeyLength: u32,
};

pub const BCRYPT_DSA_KEY_BLOB = extern struct {
    dwMagic: u32,
    cbKey: u32,
    Count: [4]u8,
    Seed: [20]u8,
    q: [20]u8,
};

pub const HASHALGORITHM_ENUM = extern enum(i32) {
    DSA_HASH_ALGORITHM_SHA1 = 0,
    DSA_HASH_ALGORITHM_SHA256 = 1,
    DSA_HASH_ALGORITHM_SHA512 = 2,
};
pub const DSA_HASH_ALGORITHM_SHA1 = HASHALGORITHM_ENUM.DSA_HASH_ALGORITHM_SHA1;
pub const DSA_HASH_ALGORITHM_SHA256 = HASHALGORITHM_ENUM.DSA_HASH_ALGORITHM_SHA256;
pub const DSA_HASH_ALGORITHM_SHA512 = HASHALGORITHM_ENUM.DSA_HASH_ALGORITHM_SHA512;

pub const DSAFIPSVERSION_ENUM = extern enum(i32) {
    DSA_FIPS186_2 = 0,
    DSA_FIPS186_3 = 1,
};
pub const DSA_FIPS186_2 = DSAFIPSVERSION_ENUM.DSA_FIPS186_2;
pub const DSA_FIPS186_3 = DSAFIPSVERSION_ENUM.DSA_FIPS186_3;

pub const BCRYPT_DSA_KEY_BLOB_V2 = extern struct {
    dwMagic: u32,
    cbKey: u32,
    hashAlgorithm: HASHALGORITHM_ENUM,
    standardVersion: DSAFIPSVERSION_ENUM,
    cbSeedLength: u32,
    cbGroupSize: u32,
    Count: [4]u8,
};

pub const BCRYPT_KEY_DATA_BLOB_HEADER = extern struct {
    dwMagic: u32,
    dwVersion: u32,
    cbKeyData: u32,
};

pub const BCRYPT_DSA_PARAMETER_HEADER = extern struct {
    cbLength: u32,
    dwMagic: u32,
    cbKeyLength: u32,
    Count: [4]u8,
    Seed: [20]u8,
    q: [20]u8,
};

pub const BCRYPT_DSA_PARAMETER_HEADER_V2 = extern struct {
    cbLength: u32,
    dwMagic: u32,
    cbKeyLength: u32,
    hashAlgorithm: HASHALGORITHM_ENUM,
    standardVersion: DSAFIPSVERSION_ENUM,
    cbSeedLength: u32,
    cbGroupSize: u32,
    Count: [4]u8,
};

pub const BCRYPT_ECC_CURVE_NAMES = extern struct {
    dwEccCurveNames: u32,
    pEccCurveNames: *PWSTR,
};

pub const BCRYPT_HASH_OPERATION_TYPE = extern enum(i32) {
    BCRYPT_HASH_OPERATION_HASH_DATA = 1,
    BCRYPT_HASH_OPERATION_FINISH_HASH = 2,
};
pub const BCRYPT_HASH_OPERATION_HASH_DATA = BCRYPT_HASH_OPERATION_TYPE.BCRYPT_HASH_OPERATION_HASH_DATA;
pub const BCRYPT_HASH_OPERATION_FINISH_HASH = BCRYPT_HASH_OPERATION_TYPE.BCRYPT_HASH_OPERATION_FINISH_HASH;

pub const BCRYPT_MULTI_HASH_OPERATION = extern struct {
    iHash: u32,
    hashOperation: BCRYPT_HASH_OPERATION_TYPE,
    pbBuffer: *u8,
    cbBuffer: u32,
};

pub const BCRYPT_MULTI_OPERATION_TYPE = extern enum(i32) {
    BCRYPT_OPERATION_TYPE_HASH = 1,
};
pub const BCRYPT_OPERATION_TYPE_HASH = BCRYPT_MULTI_OPERATION_TYPE.BCRYPT_OPERATION_TYPE_HASH;

pub const BCRYPT_MULTI_OBJECT_LENGTH_STRUCT = extern struct {
    cbPerObject: u32,
    cbPerElement: u32,
};

pub const BCRYPT_ALGORITHM_IDENTIFIER = extern struct {
    pszName: PWSTR,
    dwClass: u32,
    dwFlags: u32,
};

pub const BCRYPT_PROVIDER_NAME = extern struct {
    pszProviderName: PWSTR,
};

pub const BCRYPT_INTERFACE_VERSION = extern struct {
    MajorVersion: u16,
    MinorVersion: u16,
};

pub const CRYPT_INTERFACE_REG = extern struct {
    dwInterface: u32,
    dwFlags: u32,
    cFunctions: u32,
    rgpszFunctions: *PWSTR,
};

pub const CRYPT_IMAGE_REG = extern struct {
    pszImage: PWSTR,
    cInterfaces: u32,
    rgpInterfaces: **CRYPT_INTERFACE_REG,
};

pub const CRYPT_PROVIDER_REG = extern struct {
    cAliases: u32,
    rgpszAliases: *PWSTR,
    pUM: *CRYPT_IMAGE_REG,
    pKM: *CRYPT_IMAGE_REG,
};

pub const CRYPT_PROVIDERS = extern struct {
    cProviders: u32,
    rgpszProviders: *PWSTR,
};

pub const CRYPT_CONTEXT_CONFIG = extern struct {
    dwFlags: u32,
    dwReserved: u32,
};

pub const CRYPT_CONTEXT_FUNCTION_CONFIG = extern struct {
    dwFlags: u32,
    dwReserved: u32,
};

pub const CRYPT_CONTEXTS = extern struct {
    cContexts: u32,
    rgpszContexts: *PWSTR,
};

pub const CRYPT_CONTEXT_FUNCTIONS = extern struct {
    cFunctions: u32,
    rgpszFunctions: *PWSTR,
};

pub const CRYPT_CONTEXT_FUNCTION_PROVIDERS = extern struct {
    cProviders: u32,
    rgpszProviders: *PWSTR,
};

pub const CRYPT_PROPERTY_REF = extern struct {
    pszProperty: PWSTR,
    cbValue: u32,
    pbValue: *u8,
};

pub const CRYPT_IMAGE_REF = extern struct {
    pszImage: PWSTR,
    dwFlags: u32,
};

pub const CRYPT_PROVIDER_REF = extern struct {
    dwInterface: u32,
    pszFunction: PWSTR,
    pszProvider: PWSTR,
    cProperties: u32,
    rgpProperties: **CRYPT_PROPERTY_REF,
    pUM: *CRYPT_IMAGE_REF,
    pKM: *CRYPT_IMAGE_REF,
};

pub const CRYPT_PROVIDER_REFS = extern struct {
    cProviders: u32,
    rgpProviders: **CRYPT_PROVIDER_REF,
};

pub const PFN_NCRYPT_ALLOC = fn(
    cbSize: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const PFN_NCRYPT_FREE = fn(
    pv: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const NCRYPT_ALLOC_PARA = extern struct {
    cbSize: u32,
    pfnAlloc: PFN_NCRYPT_ALLOC,
    pfnFree: PFN_NCRYPT_FREE,
};

pub const NCRYPT_CIPHER_PADDING_INFO = extern struct {
    cbSize: u32,
    dwFlags: u32,
    pbIV: *u8,
    cbIV: u32,
    pbOtherInfo: *u8,
    cbOtherInfo: u32,
};

pub const NCRYPT_PLATFORM_ATTEST_PADDING_INFO = extern struct {
    magic: u32,
    pcrMask: u32,
};

pub const NCRYPT_KEY_ATTEST_PADDING_INFO = extern struct {
    magic: u32,
    pbKeyBlob: *u8,
    cbKeyBlob: u32,
    pbKeyAuth: *u8,
    cbKeyAuth: u32,
};

pub const NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES = extern struct {
    Version: u32,
    Flags: u32,
    cbPublicKeyBlob: u32,
};

pub const NCRYPT_VSM_KEY_ATTESTATION_STATEMENT = extern struct {
    Magic: u32,
    Version: u32,
    cbSignature: u32,
    cbReport: u32,
    cbAttributes: u32,
};

pub const NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS = extern struct {
    Version: u32,
    TrustletId: u64,
    MinSvn: u32,
    FlagsMask: u32,
    FlagsExpected: u32,
    _bitfield: u32,
};

pub const NCRYPT_EXPORTED_ISOLATED_KEY_HEADER = extern struct {
    Version: u32,
    KeyUsage: u32,
    _bitfield: u32,
    cbAlgName: u32,
    cbNonce: u32,
    cbAuthTag: u32,
    cbWrappingKey: u32,
    cbIsolatedKey: u32,
};

pub const NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE = extern struct {
    Header: NCRYPT_EXPORTED_ISOLATED_KEY_HEADER,
};

pub const __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT = extern struct {
    Magic: u32,
    Version: u32,
    HeaderSize: u32,
    cbCertifyInfo: u32,
    cbSignature: u32,
    cbTpmPublic: u32,
};

pub const NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT = extern struct {
    Magic: u32,
    Version: u32,
    pcrAlg: u32,
    cbSignature: u32,
    cbQuote: u32,
    cbPcrs: u32,
};

pub const NCryptAlgorithmName = extern struct {
    pszName: PWSTR,
    dwClass: u32,
    dwAlgOperations: u32,
    dwFlags: u32,
};

pub const NCryptKeyName = extern struct {
    pszName: PWSTR,
    pszAlgid: PWSTR,
    dwLegacyKeySpec: u32,
    dwFlags: u32,
};

pub const NCryptProviderName = extern struct {
    pszName: PWSTR,
    pszComment: PWSTR,
};

pub const NCRYPT_UI_POLICY = extern struct {
    dwVersion: u32,
    dwFlags: u32,
    pszCreationTitle: [*:0]const u16,
    pszFriendlyName: [*:0]const u16,
    pszDescription: [*:0]const u16,
};

pub const __NCRYPT_KEY_ACCESS_POLICY_BLOB = extern struct {
    dwVersion: u32,
    dwPolicyFlags: u32,
    cbUserSid: u32,
    cbApplicationSid: u32,
};

pub const NCRYPT_SUPPORTED_LENGTHS = extern struct {
    dwMinLength: u32,
    dwMaxLength: u32,
    dwIncrement: u32,
    dwDefaultLength: u32,
};

pub const __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO = extern struct {
    dwVersion: u32,
    iExpiration: i32,
    pabNonce: [32]u8,
    pabPolicyRef: [32]u8,
    pabHMAC: [32]u8,
};

pub const __NCRYPT_PCP_TPM_FW_VERSION_INFO = extern struct {
    major1: u16,
    major2: u16,
    minor1: u16,
    minor2: u16,
};

pub const __NCRYPT_PCP_RAW_POLICYDIGEST = extern struct {
    dwVersion: u32,
    cbDigest: u32,
};

pub const NCRYPT_KEY_BLOB_HEADER = extern struct {
    cbSize: u32,
    dwMagic: u32,
    cbAlgName: u32,
    cbKeyData: u32,
};

pub const NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER = extern struct {
    magic: u32,
    cbHeader: u32,
    cbPublic: u32,
    cbPrivate: u32,
    cbName: u32,
};

pub const CRYPT_BIT_BLOB = extern struct {
    cbData: u32,
    pbData: *u8,
    cUnusedBits: u32,
};

pub const CRYPT_ALGORITHM_IDENTIFIER = extern struct {
    pszObjId: PSTR,
    Parameters: CRYPTOAPI_BLOB,
};

pub const CRYPT_OBJID_TABLE = extern struct {
    dwAlgId: u32,
    pszObjId: [*:0]const u8,
};

pub const CRYPT_HASH_INFO = extern struct {
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    Hash: CRYPTOAPI_BLOB,
};

pub const CERT_EXTENSION = extern struct {
    pszObjId: PSTR,
    fCritical: BOOL,
    Value: CRYPTOAPI_BLOB,
};

pub const CRYPT_ATTRIBUTE_TYPE_VALUE = extern struct {
    pszObjId: PSTR,
    Value: CRYPTOAPI_BLOB,
};

pub const CRYPT_ATTRIBUTE = extern struct {
    pszObjId: PSTR,
    cValue: u32,
    rgValue: *CRYPTOAPI_BLOB,
};

pub const CRYPT_ATTRIBUTES = extern struct {
    cAttr: u32,
    rgAttr: *CRYPT_ATTRIBUTE,
};

pub const CERT_RDN_ATTR = extern struct {
    pszObjId: PSTR,
    dwValueType: u32,
    Value: CRYPTOAPI_BLOB,
};

pub const CERT_RDN = extern struct {
    cRDNAttr: u32,
    rgRDNAttr: *CERT_RDN_ATTR,
};

pub const CERT_NAME_INFO = extern struct {
    cRDN: u32,
    rgRDN: *CERT_RDN,
};

pub const CERT_NAME_VALUE = extern struct {
    dwValueType: u32,
    Value: CRYPTOAPI_BLOB,
};

pub const CERT_PUBLIC_KEY_INFO = extern struct {
    Algorithm: CRYPT_ALGORITHM_IDENTIFIER,
    PublicKey: CRYPT_BIT_BLOB,
};

pub const CRYPT_ECC_PRIVATE_KEY_INFO = extern struct {
    dwVersion: u32,
    PrivateKey: CRYPTOAPI_BLOB,
    szCurveOid: PSTR,
    PublicKey: CRYPT_BIT_BLOB,
};

pub const CRYPT_PRIVATE_KEY_INFO = extern struct {
    Version: u32,
    Algorithm: CRYPT_ALGORITHM_IDENTIFIER,
    PrivateKey: CRYPTOAPI_BLOB,
    pAttributes: *CRYPT_ATTRIBUTES,
};

pub const CRYPT_ENCRYPTED_PRIVATE_KEY_INFO = extern struct {
    EncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedPrivateKey: CRYPTOAPI_BLOB,
};

pub const PCRYPT_DECRYPT_PRIVATE_KEY_FUNC = fn(
    Algorithm: CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedPrivateKey: CRYPTOAPI_BLOB,
    pbClearTextKey: ?[*:0]u8,
    pcbClearTextKey: *u32,
    pVoidDecryptFunc: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC = fn(
    pAlgorithm: *CRYPT_ALGORITHM_IDENTIFIER,
    pClearTextPrivateKey: *CRYPTOAPI_BLOB,
    pbEncryptedKey: ?[*:0]u8,
    pcbEncryptedKey: *u32,
    pVoidEncryptFunc: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PCRYPT_RESOLVE_HCRYPTPROV_FUNC = fn(
    pPrivateKeyInfo: *CRYPT_PRIVATE_KEY_INFO,
    phCryptProv: *?*c_void,
    pVoidResolveFunc: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CRYPT_PKCS8_IMPORT_PARAMS = extern struct {
    PrivateKey: CRYPTOAPI_BLOB,
    pResolvehCryptProvFunc: PCRYPT_RESOLVE_HCRYPTPROV_FUNC,
    pVoidResolveFunc: *c_void,
    pDecryptPrivateKeyFunc: PCRYPT_DECRYPT_PRIVATE_KEY_FUNC,
    pVoidDecryptFunc: *c_void,
};

pub const CRYPT_PKCS8_EXPORT_PARAMS = extern struct {
    hCryptProv: ?*c_void,
    dwKeySpec: u32,
    pszPrivateKeyObjId: PSTR,
    pEncryptPrivateKeyFunc: PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC,
    pVoidEncryptFunc: *c_void,
};

pub const CERT_INFO = extern struct {
    dwVersion: u32,
    SerialNumber: CRYPTOAPI_BLOB,
    SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    Issuer: CRYPTOAPI_BLOB,
    NotBefore: FILETIME,
    NotAfter: FILETIME,
    Subject: CRYPTOAPI_BLOB,
    SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO,
    IssuerUniqueId: CRYPT_BIT_BLOB,
    SubjectUniqueId: CRYPT_BIT_BLOB,
    cExtension: u32,
    rgExtension: *CERT_EXTENSION,
};

pub const CRL_ENTRY = extern struct {
    SerialNumber: CRYPTOAPI_BLOB,
    RevocationDate: FILETIME,
    cExtension: u32,
    rgExtension: *CERT_EXTENSION,
};

pub const CRL_INFO = extern struct {
    dwVersion: u32,
    SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    Issuer: CRYPTOAPI_BLOB,
    ThisUpdate: FILETIME,
    NextUpdate: FILETIME,
    cCRLEntry: u32,
    rgCRLEntry: *CRL_ENTRY,
    cExtension: u32,
    rgExtension: *CERT_EXTENSION,
};

pub const CERT_OR_CRL_BLOB = extern struct {
    dwChoice: u32,
    cbEncoded: u32,
    pbEncoded: *u8,
};

pub const CERT_OR_CRL_BUNDLE = extern struct {
    cItem: u32,
    rgItem: *CERT_OR_CRL_BLOB,
};

pub const CERT_REQUEST_INFO = extern struct {
    dwVersion: u32,
    Subject: CRYPTOAPI_BLOB,
    SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO,
    cAttribute: u32,
    rgAttribute: *CRYPT_ATTRIBUTE,
};

pub const CERT_KEYGEN_REQUEST_INFO = extern struct {
    dwVersion: u32,
    SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO,
    pwszChallengeString: PWSTR,
};

pub const CERT_SIGNED_CONTENT_INFO = extern struct {
    ToBeSigned: CRYPTOAPI_BLOB,
    SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    Signature: CRYPT_BIT_BLOB,
};

pub const CTL_USAGE = extern struct {
    cUsageIdentifier: u32,
    rgpszUsageIdentifier: *PSTR,
};

pub const CTL_ENTRY = extern struct {
    SubjectIdentifier: CRYPTOAPI_BLOB,
    cAttribute: u32,
    rgAttribute: *CRYPT_ATTRIBUTE,
};

pub const CTL_INFO = extern struct {
    dwVersion: u32,
    SubjectUsage: CTL_USAGE,
    ListIdentifier: CRYPTOAPI_BLOB,
    SequenceNumber: CRYPTOAPI_BLOB,
    ThisUpdate: FILETIME,
    NextUpdate: FILETIME,
    SubjectAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    cCTLEntry: u32,
    rgCTLEntry: *CTL_ENTRY,
    cExtension: u32,
    rgExtension: *CERT_EXTENSION,
};

pub const CRYPT_TIME_STAMP_REQUEST_INFO = extern struct {
    pszTimeStampAlgorithm: PSTR,
    pszContentType: PSTR,
    Content: CRYPTOAPI_BLOB,
    cAttribute: u32,
    rgAttribute: *CRYPT_ATTRIBUTE,
};

pub const CRYPT_ENROLLMENT_NAME_VALUE_PAIR = extern struct {
    pwszName: PWSTR,
    pwszValue: PWSTR,
};

pub const CRYPT_CSP_PROVIDER = extern struct {
    dwKeySpec: u32,
    pwszProviderName: PWSTR,
    Signature: CRYPT_BIT_BLOB,
};

pub const PFN_CRYPT_ALLOC = fn(
    cbSize: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const PFN_CRYPT_FREE = fn(
    pv: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const CRYPT_ENCODE_PARA = extern struct {
    cbSize: u32,
    pfnAlloc: PFN_CRYPT_ALLOC,
    pfnFree: PFN_CRYPT_FREE,
};

pub const CRYPT_DECODE_PARA = extern struct {
    cbSize: u32,
    pfnAlloc: PFN_CRYPT_ALLOC,
    pfnFree: PFN_CRYPT_FREE,
};

pub const CERT_EXTENSIONS = extern struct {
    cExtension: u32,
    rgExtension: *CERT_EXTENSION,
};

pub const CERT_AUTHORITY_KEY_ID_INFO = extern struct {
    KeyId: CRYPTOAPI_BLOB,
    CertIssuer: CRYPTOAPI_BLOB,
    CertSerialNumber: CRYPTOAPI_BLOB,
};

pub const CERT_PRIVATE_KEY_VALIDITY = extern struct {
    NotBefore: FILETIME,
    NotAfter: FILETIME,
};

pub const CERT_KEY_ATTRIBUTES_INFO = extern struct {
    KeyId: CRYPTOAPI_BLOB,
    IntendedKeyUsage: CRYPT_BIT_BLOB,
    pPrivateKeyUsagePeriod: *CERT_PRIVATE_KEY_VALIDITY,
};

pub const CERT_POLICY_ID = extern struct {
    cCertPolicyElementId: u32,
    rgpszCertPolicyElementId: *PSTR,
};

pub const CERT_KEY_USAGE_RESTRICTION_INFO = extern struct {
    cCertPolicyId: u32,
    rgCertPolicyId: *CERT_POLICY_ID,
    RestrictedKeyUsage: CRYPT_BIT_BLOB,
};

pub const CERT_OTHER_NAME = extern struct {
    pszObjId: PSTR,
    Value: CRYPTOAPI_BLOB,
};

pub const CERT_ALT_NAME_ENTRY = extern struct {
    dwAltNameChoice: u32,
    Anonymous: CERT_ALT_NAME_ENTRY._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CERT_ALT_NAME_INFO = extern struct {
    cAltEntry: u32,
    rgAltEntry: *CERT_ALT_NAME_ENTRY,
};

pub const CERT_BASIC_CONSTRAINTS_INFO = extern struct {
    SubjectType: CRYPT_BIT_BLOB,
    fPathLenConstraint: BOOL,
    dwPathLenConstraint: u32,
    cSubtreesConstraint: u32,
    rgSubtreesConstraint: *CRYPTOAPI_BLOB,
};

pub const CERT_BASIC_CONSTRAINTS2_INFO = extern struct {
    fCA: BOOL,
    fPathLenConstraint: BOOL,
    dwPathLenConstraint: u32,
};

pub const CERT_POLICY_QUALIFIER_INFO = extern struct {
    pszPolicyQualifierId: PSTR,
    Qualifier: CRYPTOAPI_BLOB,
};

pub const CERT_POLICY_INFO = extern struct {
    pszPolicyIdentifier: PSTR,
    cPolicyQualifier: u32,
    rgPolicyQualifier: *CERT_POLICY_QUALIFIER_INFO,
};

pub const CERT_POLICIES_INFO = extern struct {
    cPolicyInfo: u32,
    rgPolicyInfo: *CERT_POLICY_INFO,
};

pub const CERT_POLICY_QUALIFIER_NOTICE_REFERENCE = extern struct {
    pszOrganization: PSTR,
    cNoticeNumbers: u32,
    rgNoticeNumbers: *i32,
};

pub const CERT_POLICY_QUALIFIER_USER_NOTICE = extern struct {
    pNoticeReference: *CERT_POLICY_QUALIFIER_NOTICE_REFERENCE,
    pszDisplayText: PWSTR,
};

pub const CPS_URLS = extern struct {
    pszURL: PWSTR,
    pAlgorithm: *CRYPT_ALGORITHM_IDENTIFIER,
    pDigest: *CRYPTOAPI_BLOB,
};

pub const CERT_POLICY95_QUALIFIER1 = extern struct {
    pszPracticesReference: PWSTR,
    pszNoticeIdentifier: PSTR,
    pszNSINoticeIdentifier: PSTR,
    cCPSURLs: u32,
    rgCPSURLs: *CPS_URLS,
};

pub const CERT_POLICY_MAPPING = extern struct {
    pszIssuerDomainPolicy: PSTR,
    pszSubjectDomainPolicy: PSTR,
};

pub const CERT_POLICY_MAPPINGS_INFO = extern struct {
    cPolicyMapping: u32,
    rgPolicyMapping: *CERT_POLICY_MAPPING,
};

pub const CERT_POLICY_CONSTRAINTS_INFO = extern struct {
    fRequireExplicitPolicy: BOOL,
    dwRequireExplicitPolicySkipCerts: u32,
    fInhibitPolicyMapping: BOOL,
    dwInhibitPolicyMappingSkipCerts: u32,
};

pub const CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = extern struct {
    pszObjId: PSTR,
    cValue: u32,
    rgValue: *CRYPTOAPI_BLOB,
};

pub const CRYPT_CONTENT_INFO = extern struct {
    pszObjId: PSTR,
    Content: CRYPTOAPI_BLOB,
};

pub const CRYPT_SEQUENCE_OF_ANY = extern struct {
    cValue: u32,
    rgValue: *CRYPTOAPI_BLOB,
};

pub const CERT_AUTHORITY_KEY_ID2_INFO = extern struct {
    KeyId: CRYPTOAPI_BLOB,
    AuthorityCertIssuer: CERT_ALT_NAME_INFO,
    AuthorityCertSerialNumber: CRYPTOAPI_BLOB,
};

pub const CERT_ACCESS_DESCRIPTION = extern struct {
    pszAccessMethod: PSTR,
    AccessLocation: CERT_ALT_NAME_ENTRY,
};

pub const CERT_AUTHORITY_INFO_ACCESS = extern struct {
    cAccDescr: u32,
    rgAccDescr: *CERT_ACCESS_DESCRIPTION,
};

pub const CRL_DIST_POINT_NAME = extern struct {
    dwDistPointNameChoice: u32,
    Anonymous: CRL_DIST_POINT_NAME._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CRL_DIST_POINT = extern struct {
    DistPointName: CRL_DIST_POINT_NAME,
    ReasonFlags: CRYPT_BIT_BLOB,
    CRLIssuer: CERT_ALT_NAME_INFO,
};

pub const CRL_DIST_POINTS_INFO = extern struct {
    cDistPoint: u32,
    rgDistPoint: *CRL_DIST_POINT,
};

pub const CROSS_CERT_DIST_POINTS_INFO = extern struct {
    dwSyncDeltaTime: u32,
    cDistPoint: u32,
    rgDistPoint: *CERT_ALT_NAME_INFO,
};

pub const CERT_PAIR = extern struct {
    Forward: CRYPTOAPI_BLOB,
    Reverse: CRYPTOAPI_BLOB,
};

pub const CRL_ISSUING_DIST_POINT = extern struct {
    DistPointName: CRL_DIST_POINT_NAME,
    fOnlyContainsUserCerts: BOOL,
    fOnlyContainsCACerts: BOOL,
    OnlySomeReasonFlags: CRYPT_BIT_BLOB,
    fIndirectCRL: BOOL,
};

pub const CERT_GENERAL_SUBTREE = extern struct {
    Base: CERT_ALT_NAME_ENTRY,
    dwMinimum: u32,
    fMaximum: BOOL,
    dwMaximum: u32,
};

pub const CERT_NAME_CONSTRAINTS_INFO = extern struct {
    cPermittedSubtree: u32,
    rgPermittedSubtree: *CERT_GENERAL_SUBTREE,
    cExcludedSubtree: u32,
    rgExcludedSubtree: *CERT_GENERAL_SUBTREE,
};

pub const CERT_DSS_PARAMETERS = extern struct {
    p: CRYPTOAPI_BLOB,
    q: CRYPTOAPI_BLOB,
    g: CRYPTOAPI_BLOB,
};

pub const CERT_DH_PARAMETERS = extern struct {
    p: CRYPTOAPI_BLOB,
    g: CRYPTOAPI_BLOB,
};

pub const CERT_ECC_SIGNATURE = extern struct {
    r: CRYPTOAPI_BLOB,
    s: CRYPTOAPI_BLOB,
};

pub const CERT_X942_DH_VALIDATION_PARAMS = extern struct {
    seed: CRYPT_BIT_BLOB,
    pgenCounter: u32,
};

pub const CERT_X942_DH_PARAMETERS = extern struct {
    p: CRYPTOAPI_BLOB,
    g: CRYPTOAPI_BLOB,
    q: CRYPTOAPI_BLOB,
    j: CRYPTOAPI_BLOB,
    pValidationParams: *CERT_X942_DH_VALIDATION_PARAMS,
};

pub const CRYPT_X942_OTHER_INFO = extern struct {
    pszContentEncryptionObjId: PSTR,
    rgbCounter: [4]u8,
    rgbKeyLength: [4]u8,
    PubInfo: CRYPTOAPI_BLOB,
};

pub const CRYPT_ECC_CMS_SHARED_INFO = extern struct {
    Algorithm: CRYPT_ALGORITHM_IDENTIFIER,
    EntityUInfo: CRYPTOAPI_BLOB,
    rgbSuppPubInfo: [4]u8,
};

pub const CRYPT_RC2_CBC_PARAMETERS = extern struct {
    dwVersion: u32,
    fIV: BOOL,
    rgbIV: [8]u8,
};

pub const CRYPT_SMIME_CAPABILITY = extern struct {
    pszObjId: PSTR,
    Parameters: CRYPTOAPI_BLOB,
};

pub const CRYPT_SMIME_CAPABILITIES = extern struct {
    cCapability: u32,
    rgCapability: *CRYPT_SMIME_CAPABILITY,
};

pub const CERT_QC_STATEMENT = extern struct {
    pszStatementId: PSTR,
    StatementInfo: CRYPTOAPI_BLOB,
};

pub const CERT_QC_STATEMENTS_EXT_INFO = extern struct {
    cStatement: u32,
    rgStatement: *CERT_QC_STATEMENT,
};

pub const CRYPT_MASK_GEN_ALGORITHM = extern struct {
    pszObjId: PSTR,
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
};

pub const CRYPT_RSA_SSA_PSS_PARAMETERS = extern struct {
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    MaskGenAlgorithm: CRYPT_MASK_GEN_ALGORITHM,
    dwSaltLength: u32,
    dwTrailerField: u32,
};

pub const CRYPT_PSOURCE_ALGORITHM = extern struct {
    pszObjId: PSTR,
    EncodingParameters: CRYPTOAPI_BLOB,
};

pub const CRYPT_RSAES_OAEP_PARAMETERS = extern struct {
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    MaskGenAlgorithm: CRYPT_MASK_GEN_ALGORITHM,
    PSourceAlgorithm: CRYPT_PSOURCE_ALGORITHM,
};

pub const CMC_TAGGED_ATTRIBUTE = extern struct {
    dwBodyPartID: u32,
    Attribute: CRYPT_ATTRIBUTE,
};

pub const CMC_TAGGED_CERT_REQUEST = extern struct {
    dwBodyPartID: u32,
    SignedCertRequest: CRYPTOAPI_BLOB,
};

pub const CMC_TAGGED_REQUEST = extern struct {
    dwTaggedRequestChoice: u32,
    Anonymous: CMC_TAGGED_REQUEST._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CMC_TAGGED_CONTENT_INFO = extern struct {
    dwBodyPartID: u32,
    EncodedContentInfo: CRYPTOAPI_BLOB,
};

pub const CMC_TAGGED_OTHER_MSG = extern struct {
    dwBodyPartID: u32,
    pszObjId: PSTR,
    Value: CRYPTOAPI_BLOB,
};

pub const CMC_DATA_INFO = extern struct {
    cTaggedAttribute: u32,
    rgTaggedAttribute: *CMC_TAGGED_ATTRIBUTE,
    cTaggedRequest: u32,
    rgTaggedRequest: *CMC_TAGGED_REQUEST,
    cTaggedContentInfo: u32,
    rgTaggedContentInfo: *CMC_TAGGED_CONTENT_INFO,
    cTaggedOtherMsg: u32,
    rgTaggedOtherMsg: *CMC_TAGGED_OTHER_MSG,
};

pub const CMC_RESPONSE_INFO = extern struct {
    cTaggedAttribute: u32,
    rgTaggedAttribute: *CMC_TAGGED_ATTRIBUTE,
    cTaggedContentInfo: u32,
    rgTaggedContentInfo: *CMC_TAGGED_CONTENT_INFO,
    cTaggedOtherMsg: u32,
    rgTaggedOtherMsg: *CMC_TAGGED_OTHER_MSG,
};

pub const CMC_PEND_INFO = extern struct {
    PendToken: CRYPTOAPI_BLOB,
    PendTime: FILETIME,
};

pub const CMC_STATUS_INFO = extern struct {
    dwStatus: u32,
    cBodyList: u32,
    rgdwBodyList: *u32,
    pwszStatusString: PWSTR,
    dwOtherInfoChoice: u32,
    Anonymous: CMC_STATUS_INFO._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CMC_ADD_EXTENSIONS_INFO = extern struct {
    dwCmcDataReference: u32,
    cCertReference: u32,
    rgdwCertReference: *u32,
    cExtension: u32,
    rgExtension: *CERT_EXTENSION,
};

pub const CMC_ADD_ATTRIBUTES_INFO = extern struct {
    dwCmcDataReference: u32,
    cCertReference: u32,
    rgdwCertReference: *u32,
    cAttribute: u32,
    rgAttribute: *CRYPT_ATTRIBUTE,
};

pub const CERT_TEMPLATE_EXT = extern struct {
    pszObjId: PSTR,
    dwMajorVersion: u32,
    fMinorVersion: BOOL,
    dwMinorVersion: u32,
};

pub const CERT_HASHED_URL = extern struct {
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    Hash: CRYPTOAPI_BLOB,
    pwszUrl: PWSTR,
};

pub const CERT_LOGOTYPE_DETAILS = extern struct {
    pwszMimeType: PWSTR,
    cHashedUrl: u32,
    rgHashedUrl: *CERT_HASHED_URL,
};

pub const CERT_LOGOTYPE_REFERENCE = extern struct {
    cHashedUrl: u32,
    rgHashedUrl: *CERT_HASHED_URL,
};

pub const CERT_LOGOTYPE_IMAGE_INFO = extern struct {
    dwLogotypeImageInfoChoice: u32,
    dwFileSize: u32,
    dwXSize: u32,
    dwYSize: u32,
    dwLogotypeImageResolutionChoice: u32,
    Anonymous: CERT_LOGOTYPE_IMAGE_INFO._Anonymous_e__Union,
    pwszLanguage: PWSTR,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CERT_LOGOTYPE_IMAGE = extern struct {
    LogotypeDetails: CERT_LOGOTYPE_DETAILS,
    pLogotypeImageInfo: *CERT_LOGOTYPE_IMAGE_INFO,
};

pub const CERT_LOGOTYPE_AUDIO_INFO = extern struct {
    dwFileSize: u32,
    dwPlayTime: u32,
    dwChannels: u32,
    dwSampleRate: u32,
    pwszLanguage: PWSTR,
};

pub const CERT_LOGOTYPE_AUDIO = extern struct {
    LogotypeDetails: CERT_LOGOTYPE_DETAILS,
    pLogotypeAudioInfo: *CERT_LOGOTYPE_AUDIO_INFO,
};

pub const CERT_LOGOTYPE_DATA = extern struct {
    cLogotypeImage: u32,
    rgLogotypeImage: *CERT_LOGOTYPE_IMAGE,
    cLogotypeAudio: u32,
    rgLogotypeAudio: *CERT_LOGOTYPE_AUDIO,
};

pub const CERT_LOGOTYPE_INFO = extern struct {
    dwLogotypeInfoChoice: u32,
    Anonymous: CERT_LOGOTYPE_INFO._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CERT_OTHER_LOGOTYPE_INFO = extern struct {
    pszObjId: PSTR,
    LogotypeInfo: CERT_LOGOTYPE_INFO,
};

pub const CERT_LOGOTYPE_EXT_INFO = extern struct {
    cCommunityLogo: u32,
    rgCommunityLogo: *CERT_LOGOTYPE_INFO,
    pIssuerLogo: *CERT_LOGOTYPE_INFO,
    pSubjectLogo: *CERT_LOGOTYPE_INFO,
    cOtherLogo: u32,
    rgOtherLogo: *CERT_OTHER_LOGOTYPE_INFO,
};

pub const CERT_BIOMETRIC_DATA = extern struct {
    dwTypeOfBiometricDataChoice: u32,
    Anonymous: CERT_BIOMETRIC_DATA._Anonymous_e__Union,
    HashedUrl: CERT_HASHED_URL,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CERT_BIOMETRIC_EXT_INFO = extern struct {
    cBiometricData: u32,
    rgBiometricData: *CERT_BIOMETRIC_DATA,
};

pub const OCSP_SIGNATURE_INFO = extern struct {
    SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    Signature: CRYPT_BIT_BLOB,
    cCertEncoded: u32,
    rgCertEncoded: *CRYPTOAPI_BLOB,
};

pub const OCSP_SIGNED_REQUEST_INFO = extern struct {
    ToBeSigned: CRYPTOAPI_BLOB,
    pOptionalSignatureInfo: *OCSP_SIGNATURE_INFO,
};

pub const OCSP_CERT_ID = extern struct {
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    IssuerNameHash: CRYPTOAPI_BLOB,
    IssuerKeyHash: CRYPTOAPI_BLOB,
    SerialNumber: CRYPTOAPI_BLOB,
};

pub const OCSP_REQUEST_ENTRY = extern struct {
    CertId: OCSP_CERT_ID,
    cExtension: u32,
    rgExtension: *CERT_EXTENSION,
};

pub const OCSP_REQUEST_INFO = extern struct {
    dwVersion: u32,
    pRequestorName: *CERT_ALT_NAME_ENTRY,
    cRequestEntry: u32,
    rgRequestEntry: *OCSP_REQUEST_ENTRY,
    cExtension: u32,
    rgExtension: *CERT_EXTENSION,
};

pub const OCSP_RESPONSE_INFO = extern struct {
    dwStatus: u32,
    pszObjId: PSTR,
    Value: CRYPTOAPI_BLOB,
};

pub const OCSP_BASIC_SIGNED_RESPONSE_INFO = extern struct {
    ToBeSigned: CRYPTOAPI_BLOB,
    SignatureInfo: OCSP_SIGNATURE_INFO,
};

pub const OCSP_BASIC_REVOKED_INFO = extern struct {
    RevocationDate: FILETIME,
    dwCrlReasonCode: u32,
};

pub const OCSP_BASIC_RESPONSE_ENTRY = extern struct {
    CertId: OCSP_CERT_ID,
    dwCertStatus: u32,
    Anonymous: OCSP_BASIC_RESPONSE_ENTRY._Anonymous_e__Union,
    ThisUpdate: FILETIME,
    NextUpdate: FILETIME,
    cExtension: u32,
    rgExtension: *CERT_EXTENSION,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const OCSP_BASIC_RESPONSE_INFO = extern struct {
    dwVersion: u32,
    dwResponderIdChoice: u32,
    Anonymous: OCSP_BASIC_RESPONSE_INFO._Anonymous_e__Union,
    ProducedAt: FILETIME,
    cResponseEntry: u32,
    rgResponseEntry: *OCSP_BASIC_RESPONSE_ENTRY,
    cExtension: u32,
    rgExtension: *CERT_EXTENSION,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CERT_SUPPORTED_ALGORITHM_INFO = extern struct {
    Algorithm: CRYPT_ALGORITHM_IDENTIFIER,
    IntendedKeyUsage: CRYPT_BIT_BLOB,
    IntendedCertPolicies: CERT_POLICIES_INFO,
};

pub const CERT_TPM_SPECIFICATION_INFO = extern struct {
    pwszFamily: PWSTR,
    dwLevel: u32,
    dwRevision: u32,
};

pub const CRYPT_OID_FUNC_ENTRY = extern struct {
    pszOID: [*:0]const u8,
    pvFuncAddr: *c_void,
};

pub const PFN_CRYPT_ENUM_OID_FUNC = fn(
    dwEncodingType: u32,
    pszFuncName: [*:0]const u8,
    pszOID: [*:0]const u8,
    cValue: u32,
    rgdwValueType: [*]const u32,
    rgpwszValueName: [*]const *const [*:0]const u16,
    rgpbValueData: [*]const *const u8,
    rgcbValueData: [*]const u32,
    pvArg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CRYPT_OID_INFO = extern struct {
    cbSize: u32,
    pszOID: [*:0]const u8,
    pwszName: [*:0]const u16,
    dwGroupId: u32,
    Anonymous: CRYPT_OID_INFO._Anonymous_e__Union,
    ExtraInfo: CRYPTOAPI_BLOB,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PFN_CRYPT_ENUM_OID_INFO = fn(
    pInfo: *CRYPT_OID_INFO,
    pvArg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CERT_STRONG_SIGN_SERIALIZED_INFO = extern struct {
    dwFlags: u32,
    pwszCNGSignHashAlgids: PWSTR,
    pwszCNGPubKeyMinBitLengths: PWSTR,
};

pub const CERT_STRONG_SIGN_PARA = extern struct {
    cbSize: u32,
    dwInfoChoice: u32,
    Anonymous: CERT_STRONG_SIGN_PARA._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CERT_ISSUER_SERIAL_NUMBER = extern struct {
    Issuer: CRYPTOAPI_BLOB,
    SerialNumber: CRYPTOAPI_BLOB,
};

pub const CERT_ID = extern struct {
    dwIdChoice: u32,
    Anonymous: CERT_ID._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CMSG_SIGNER_ENCODE_INFO = extern struct {
    cbSize: u32,
    pCertInfo: *CERT_INFO,
    Anonymous: CMSG_SIGNER_ENCODE_INFO._Anonymous_e__Union,
    dwKeySpec: u32,
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: *c_void,
    cAuthAttr: u32,
    rgAuthAttr: *CRYPT_ATTRIBUTE,
    cUnauthAttr: u32,
    rgUnauthAttr: *CRYPT_ATTRIBUTE,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CMSG_SIGNED_ENCODE_INFO = extern struct {
    cbSize: u32,
    cSigners: u32,
    rgSigners: *CMSG_SIGNER_ENCODE_INFO,
    cCertEncoded: u32,
    rgCertEncoded: *CRYPTOAPI_BLOB,
    cCrlEncoded: u32,
    rgCrlEncoded: *CRYPTOAPI_BLOB,
};

pub const CMSG_ENVELOPED_ENCODE_INFO = extern struct {
    cbSize: u32,
    hCryptProv: ?*c_void,
    ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: *c_void,
    cRecipients: u32,
    rgpRecipients: **CERT_INFO,
};

pub const CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = extern struct {
    cbSize: u32,
    KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: *c_void,
    hCryptProv: ?*c_void,
    RecipientPublicKey: CRYPT_BIT_BLOB,
    RecipientId: CERT_ID,
};

pub const CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = extern struct {
    cbSize: u32,
    RecipientPublicKey: CRYPT_BIT_BLOB,
    RecipientId: CERT_ID,
    Date: FILETIME,
    pOtherAttr: *CRYPT_ATTRIBUTE_TYPE_VALUE,
};

pub const CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = extern struct {
    cbSize: u32,
    KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: *c_void,
    KeyWrapAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyWrapAuxInfo: *c_void,
    hCryptProv: ?*c_void,
    dwKeySpec: u32,
    dwKeyChoice: u32,
    Anonymous: CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO._Anonymous_e__Union,
    UserKeyingMaterial: CRYPTOAPI_BLOB,
    cRecipientEncryptedKeys: u32,
    rgpRecipientEncryptedKeys: **CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = extern struct {
    cbSize: u32,
    KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvKeyEncryptionAuxInfo: *c_void,
    hCryptProv: ?*c_void,
    dwKeyChoice: u32,
    Anonymous: CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO._Anonymous_e__Union,
    KeyId: CRYPTOAPI_BLOB,
    Date: FILETIME,
    pOtherAttr: *CRYPT_ATTRIBUTE_TYPE_VALUE,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CMSG_RECIPIENT_ENCODE_INFO = extern struct {
    dwRecipientChoice: u32,
    Anonymous: CMSG_RECIPIENT_ENCODE_INFO._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CMSG_RC2_AUX_INFO = extern struct {
    cbSize: u32,
    dwBitLen: u32,
};

pub const CMSG_SP3_COMPATIBLE_AUX_INFO = extern struct {
    cbSize: u32,
    dwFlags: u32,
};

pub const CMSG_RC4_AUX_INFO = extern struct {
    cbSize: u32,
    dwBitLen: u32,
};

pub const CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = extern struct {
    cbSize: u32,
    SignedInfo: CMSG_SIGNED_ENCODE_INFO,
    EnvelopedInfo: CMSG_ENVELOPED_ENCODE_INFO,
};

pub const CMSG_HASHED_ENCODE_INFO = extern struct {
    cbSize: u32,
    hCryptProv: ?*c_void,
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: *c_void,
};

pub const CMSG_ENCRYPTED_ENCODE_INFO = extern struct {
    cbSize: u32,
    ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: *c_void,
};

pub const PFN_CMSG_STREAM_OUTPUT = fn(
    pvArg: ?*const c_void,
    pbData: ?[*:0]u8,
    cbData: u32,
    fFinal: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CMSG_STREAM_INFO = extern struct {
    cbContent: u32,
    pfnStreamOutput: PFN_CMSG_STREAM_OUTPUT,
    pvArg: *c_void,
};

pub const CMSG_SIGNER_INFO = extern struct {
    dwVersion: u32,
    Issuer: CRYPTOAPI_BLOB,
    SerialNumber: CRYPTOAPI_BLOB,
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    HashEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedHash: CRYPTOAPI_BLOB,
    AuthAttrs: CRYPT_ATTRIBUTES,
    UnauthAttrs: CRYPT_ATTRIBUTES,
};

pub const CMSG_CMS_SIGNER_INFO = extern struct {
    dwVersion: u32,
    SignerId: CERT_ID,
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    HashEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedHash: CRYPTOAPI_BLOB,
    AuthAttrs: CRYPT_ATTRIBUTES,
    UnauthAttrs: CRYPT_ATTRIBUTES,
};

pub const CMSG_KEY_TRANS_RECIPIENT_INFO = extern struct {
    dwVersion: u32,
    RecipientId: CERT_ID,
    KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: CRYPTOAPI_BLOB,
};

pub const CMSG_RECIPIENT_ENCRYPTED_KEY_INFO = extern struct {
    RecipientId: CERT_ID,
    EncryptedKey: CRYPTOAPI_BLOB,
    Date: FILETIME,
    pOtherAttr: *CRYPT_ATTRIBUTE_TYPE_VALUE,
};

pub const CMSG_KEY_AGREE_RECIPIENT_INFO = extern struct {
    dwVersion: u32,
    dwOriginatorChoice: u32,
    Anonymous: CMSG_KEY_AGREE_RECIPIENT_INFO._Anonymous_e__Union,
    UserKeyingMaterial: CRYPTOAPI_BLOB,
    KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    cRecipientEncryptedKeys: u32,
    rgpRecipientEncryptedKeys: **CMSG_RECIPIENT_ENCRYPTED_KEY_INFO,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CMSG_MAIL_LIST_RECIPIENT_INFO = extern struct {
    dwVersion: u32,
    KeyId: CRYPTOAPI_BLOB,
    KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: CRYPTOAPI_BLOB,
    Date: FILETIME,
    pOtherAttr: *CRYPT_ATTRIBUTE_TYPE_VALUE,
};

pub const CMSG_CMS_RECIPIENT_INFO = extern struct {
    dwRecipientChoice: u32,
    Anonymous: CMSG_CMS_RECIPIENT_INFO._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = extern struct {
    cbSize: u32,
    hCryptProv: ?*c_void,
    dwSignerIndex: u32,
    dwSignerType: u32,
    pvSigner: *c_void,
};

pub const CMSG_CTRL_DECRYPT_PARA = extern struct {
    cbSize: u32,
    Anonymous: CMSG_CTRL_DECRYPT_PARA._Anonymous_e__Union,
    dwKeySpec: u32,
    dwRecipientIndex: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CMSG_CTRL_KEY_TRANS_DECRYPT_PARA = extern struct {
    cbSize: u32,
    Anonymous: CMSG_CTRL_KEY_TRANS_DECRYPT_PARA._Anonymous_e__Union,
    dwKeySpec: u32,
    pKeyTrans: *CMSG_KEY_TRANS_RECIPIENT_INFO,
    dwRecipientIndex: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CMSG_CTRL_KEY_AGREE_DECRYPT_PARA = extern struct {
    cbSize: u32,
    Anonymous: CMSG_CTRL_KEY_AGREE_DECRYPT_PARA._Anonymous_e__Union,
    dwKeySpec: u32,
    pKeyAgree: *CMSG_KEY_AGREE_RECIPIENT_INFO,
    dwRecipientIndex: u32,
    dwRecipientEncryptedKeyIndex: u32,
    OriginatorPublicKey: CRYPT_BIT_BLOB,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CMSG_CTRL_MAIL_LIST_DECRYPT_PARA = extern struct {
    cbSize: u32,
    hCryptProv: ?*c_void,
    pMailList: *CMSG_MAIL_LIST_RECIPIENT_INFO,
    dwRecipientIndex: u32,
    dwKeyChoice: u32,
    Anonymous: CMSG_CTRL_MAIL_LIST_DECRYPT_PARA._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = extern struct {
    cbSize: u32,
    dwSignerIndex: u32,
    blob: CRYPTOAPI_BLOB,
};

pub const CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = extern struct {
    cbSize: u32,
    dwSignerIndex: u32,
    dwUnauthAttrIndex: u32,
};

pub const PFN_CMSG_ALLOC = fn(
    cb: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const PFN_CMSG_FREE = fn(
    pv: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFN_CMSG_GEN_ENCRYPT_KEY = fn(
    phCryptProv: *?*c_void,
    paiEncrypt: *CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptAuxInfo: ?*c_void,
    pPublicKeyInfo: *CERT_PUBLIC_KEY_INFO,
    pfnAlloc: PFN_CMSG_ALLOC,
    phEncryptKey: *?*c_void,
    ppbEncryptParameters: **u8,
    pcbEncryptParameters: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CMSG_EXPORT_ENCRYPT_KEY = fn(
    hCryptProv: ?*c_void,
    hEncryptKey: ?*c_void,
    pPublicKeyInfo: *CERT_PUBLIC_KEY_INFO,
    pbData: ?[*:0]u8,
    pcbData: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CMSG_IMPORT_ENCRYPT_KEY = fn(
    hCryptProv: ?*c_void,
    dwKeySpec: u32,
    paiEncrypt: *CRYPT_ALGORITHM_IDENTIFIER,
    paiPubKey: *CRYPT_ALGORITHM_IDENTIFIER,
    pbEncodedKey: [*:0]u8,
    cbEncodedKey: u32,
    phEncryptKey: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CMSG_CONTENT_ENCRYPT_INFO = extern struct {
    cbSize: u32,
    hCryptProv: ?*c_void,
    ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: *c_void,
    cRecipients: u32,
    rgCmsRecipients: *CMSG_RECIPIENT_ENCODE_INFO,
    pfnAlloc: PFN_CMSG_ALLOC,
    pfnFree: PFN_CMSG_FREE,
    dwEncryptFlags: u32,
    Anonymous: CMSG_CONTENT_ENCRYPT_INFO._Anonymous_e__Union,
    dwFlags: u32,
    fCNG: BOOL,
    pbCNGContentEncryptKeyObject: *u8,
    pbContentEncryptKey: *u8,
    cbContentEncryptKey: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY = fn(
    pContentEncryptInfo: *CMSG_CONTENT_ENCRYPT_INFO,
    dwFlags: u32,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CMSG_KEY_TRANS_ENCRYPT_INFO = extern struct {
    cbSize: u32,
    dwRecipientIndex: u32,
    KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: CRYPTOAPI_BLOB,
    dwFlags: u32,
};

pub const PFN_CMSG_EXPORT_KEY_TRANS = fn(
    pContentEncryptInfo: *CMSG_CONTENT_ENCRYPT_INFO,
    pKeyTransEncodeInfo: *CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO,
    pKeyTransEncryptInfo: *CMSG_KEY_TRANS_ENCRYPT_INFO,
    dwFlags: u32,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CMSG_KEY_AGREE_KEY_ENCRYPT_INFO = extern struct {
    cbSize: u32,
    EncryptedKey: CRYPTOAPI_BLOB,
};

pub const CMSG_KEY_AGREE_ENCRYPT_INFO = extern struct {
    cbSize: u32,
    dwRecipientIndex: u32,
    KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    UserKeyingMaterial: CRYPTOAPI_BLOB,
    dwOriginatorChoice: u32,
    Anonymous: CMSG_KEY_AGREE_ENCRYPT_INFO._Anonymous_e__Union,
    cKeyAgreeKeyEncryptInfo: u32,
    rgpKeyAgreeKeyEncryptInfo: **CMSG_KEY_AGREE_KEY_ENCRYPT_INFO,
    dwFlags: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PFN_CMSG_EXPORT_KEY_AGREE = fn(
    pContentEncryptInfo: *CMSG_CONTENT_ENCRYPT_INFO,
    pKeyAgreeEncodeInfo: *CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO,
    pKeyAgreeEncryptInfo: *CMSG_KEY_AGREE_ENCRYPT_INFO,
    dwFlags: u32,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CMSG_MAIL_LIST_ENCRYPT_INFO = extern struct {
    cbSize: u32,
    dwRecipientIndex: u32,
    KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    EncryptedKey: CRYPTOAPI_BLOB,
    dwFlags: u32,
};

pub const PFN_CMSG_EXPORT_MAIL_LIST = fn(
    pContentEncryptInfo: *CMSG_CONTENT_ENCRYPT_INFO,
    pMailListEncodeInfo: *CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO,
    pMailListEncryptInfo: *CMSG_MAIL_LIST_ENCRYPT_INFO,
    dwFlags: u32,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CMSG_IMPORT_KEY_TRANS = fn(
    pContentEncryptionAlgorithm: *CRYPT_ALGORITHM_IDENTIFIER,
    pKeyTransDecryptPara: *CMSG_CTRL_KEY_TRANS_DECRYPT_PARA,
    dwFlags: u32,
    pvReserved: *c_void,
    phContentEncryptKey: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CMSG_IMPORT_KEY_AGREE = fn(
    pContentEncryptionAlgorithm: *CRYPT_ALGORITHM_IDENTIFIER,
    pKeyAgreeDecryptPara: *CMSG_CTRL_KEY_AGREE_DECRYPT_PARA,
    dwFlags: u32,
    pvReserved: *c_void,
    phContentEncryptKey: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CMSG_IMPORT_MAIL_LIST = fn(
    pContentEncryptionAlgorithm: *CRYPT_ALGORITHM_IDENTIFIER,
    pMailListDecryptPara: *CMSG_CTRL_MAIL_LIST_DECRYPT_PARA,
    dwFlags: u32,
    pvReserved: *c_void,
    phContentEncryptKey: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CMSG_CNG_CONTENT_DECRYPT_INFO = extern struct {
    cbSize: u32,
    ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pfnAlloc: PFN_CMSG_ALLOC,
    pfnFree: PFN_CMSG_FREE,
    hNCryptKey: ?*c_void,
    pbContentEncryptKey: *u8,
    cbContentEncryptKey: u32,
    hCNGContentEncryptKey: *c_void,
    pbCNGContentEncryptKeyObject: *u8,
};

pub const PFN_CMSG_CNG_IMPORT_KEY_TRANS = fn(
    pCNGContentDecryptInfo: *CMSG_CNG_CONTENT_DECRYPT_INFO,
    pKeyTransDecryptPara: *CMSG_CTRL_KEY_TRANS_DECRYPT_PARA,
    dwFlags: u32,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CMSG_CNG_IMPORT_KEY_AGREE = fn(
    pCNGContentDecryptInfo: *CMSG_CNG_CONTENT_DECRYPT_INFO,
    pKeyAgreeDecryptPara: *CMSG_CTRL_KEY_AGREE_DECRYPT_PARA,
    dwFlags: u32,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY = fn(
    pCNGContentDecryptInfo: *CMSG_CNG_CONTENT_DECRYPT_INFO,
    dwFlags: u32,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CERT_CONTEXT = extern struct {
    dwCertEncodingType: u32,
    pbCertEncoded: *u8,
    cbCertEncoded: u32,
    pCertInfo: *CERT_INFO,
    hCertStore: *c_void,
};

pub const CRL_CONTEXT = extern struct {
    dwCertEncodingType: u32,
    pbCrlEncoded: *u8,
    cbCrlEncoded: u32,
    pCrlInfo: *CRL_INFO,
    hCertStore: *c_void,
};

pub const CTL_CONTEXT = extern struct {
    dwMsgAndCertEncodingType: u32,
    pbCtlEncoded: *u8,
    cbCtlEncoded: u32,
    pCtlInfo: *CTL_INFO,
    hCertStore: *c_void,
    hCryptMsg: *c_void,
    pbCtlContent: *u8,
    cbCtlContent: u32,
};

pub const CertKeyType = extern enum(u32) {
    KeyTypeOther = 0,
    KeyTypeVirtualSmartCard = 1,
    KeyTypePhysicalSmartCard = 2,
    KeyTypePassport = 3,
    KeyTypePassportRemote = 4,
    KeyTypePassportSmartCard = 5,
    KeyTypeHardware = 6,
    KeyTypeSoftware = 7,
    KeyTypeSelfSigned = 8,
};
pub const KeyTypeOther = CertKeyType.KeyTypeOther;
pub const KeyTypeVirtualSmartCard = CertKeyType.KeyTypeVirtualSmartCard;
pub const KeyTypePhysicalSmartCard = CertKeyType.KeyTypePhysicalSmartCard;
pub const KeyTypePassport = CertKeyType.KeyTypePassport;
pub const KeyTypePassportRemote = CertKeyType.KeyTypePassportRemote;
pub const KeyTypePassportSmartCard = CertKeyType.KeyTypePassportSmartCard;
pub const KeyTypeHardware = CertKeyType.KeyTypeHardware;
pub const KeyTypeSoftware = CertKeyType.KeyTypeSoftware;
pub const KeyTypeSelfSigned = CertKeyType.KeyTypeSelfSigned;

pub const CRYPT_KEY_PROV_PARAM = extern struct {
    dwParam: u32,
    pbData: *u8,
    cbData: u32,
    dwFlags: u32,
};

pub const CRYPT_KEY_PROV_INFO = extern struct {
    pwszContainerName: PWSTR,
    pwszProvName: PWSTR,
    dwProvType: u32,
    dwFlags: u32,
    cProvParam: u32,
    rgProvParam: *CRYPT_KEY_PROV_PARAM,
    dwKeySpec: u32,
};

pub const CERT_KEY_CONTEXT = extern struct {
    cbSize: u32,
    Anonymous: CERT_KEY_CONTEXT._Anonymous_e__Union,
    dwKeySpec: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const ROOT_INFO_LUID = extern struct {
    LowPart: u32,
    HighPart: i32,
};

pub const CRYPT_SMART_CARD_ROOT_INFO = extern struct {
    rgbCardID: [16]u8,
    luid: ROOT_INFO_LUID,
};

pub const CERT_SYSTEM_STORE_RELOCATE_PARA = extern struct {
    Anonymous1: CERT_SYSTEM_STORE_RELOCATE_PARA._Anonymous1_e__Union,
    Anonymous2: CERT_SYSTEM_STORE_RELOCATE_PARA._Anonymous2_e__Union,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const CERT_REGISTRY_STORE_CLIENT_GPT_PARA = extern struct {
    hKeyBase: HKEY,
    pwszRegPath: PWSTR,
};

pub const CERT_REGISTRY_STORE_ROAMING_PARA = extern struct {
    hKey: HKEY,
    pwszStoreDirectory: PWSTR,
};

pub const CERT_LDAP_STORE_OPENED_PARA = extern struct {
    pvLdapSessionHandle: *c_void,
    pwszLdapUrl: [*:0]const u16,
};

pub const CERT_STORE_PROV_INFO = extern struct {
    cbSize: u32,
    cStoreProvFunc: u32,
    rgpvStoreProvFunc: **c_void,
    hStoreProv: *c_void,
    dwStoreProvFlags: u32,
    hStoreProvFuncAddr2: *c_void,
};

pub const PFN_CERT_DLL_OPEN_STORE_PROV_FUNC = fn(
    lpszStoreProvider: [*:0]const u8,
    dwEncodingType: u32,
    hCryptProv: ?*c_void,
    dwFlags: u32,
    pvPara: ?*const c_void,
    hCertStore: *c_void,
    pStoreProvInfo: *CERT_STORE_PROV_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_CLOSE = fn(
    hStoreProv: ?*c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFN_CERT_STORE_PROV_READ_CERT = fn(
    hStoreProv: *c_void,
    pStoreCertContext: *CERT_CONTEXT,
    dwFlags: u32,
    ppProvCertContext: **CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_WRITE_CERT = fn(
    hStoreProv: *c_void,
    pCertContext: *CERT_CONTEXT,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_DELETE_CERT = fn(
    hStoreProv: *c_void,
    pCertContext: *CERT_CONTEXT,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_SET_CERT_PROPERTY = fn(
    hStoreProv: *c_void,
    pCertContext: *CERT_CONTEXT,
    dwPropId: u32,
    dwFlags: u32,
    pvData: ?*const c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_READ_CRL = fn(
    hStoreProv: *c_void,
    pStoreCrlContext: *CRL_CONTEXT,
    dwFlags: u32,
    ppProvCrlContext: **CRL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_WRITE_CRL = fn(
    hStoreProv: *c_void,
    pCrlContext: *CRL_CONTEXT,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_DELETE_CRL = fn(
    hStoreProv: *c_void,
    pCrlContext: *CRL_CONTEXT,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_SET_CRL_PROPERTY = fn(
    hStoreProv: *c_void,
    pCrlContext: *CRL_CONTEXT,
    dwPropId: u32,
    dwFlags: u32,
    pvData: ?*const c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_READ_CTL = fn(
    hStoreProv: *c_void,
    pStoreCtlContext: *CTL_CONTEXT,
    dwFlags: u32,
    ppProvCtlContext: **CTL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_WRITE_CTL = fn(
    hStoreProv: *c_void,
    pCtlContext: *CTL_CONTEXT,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_DELETE_CTL = fn(
    hStoreProv: *c_void,
    pCtlContext: *CTL_CONTEXT,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_SET_CTL_PROPERTY = fn(
    hStoreProv: *c_void,
    pCtlContext: *CTL_CONTEXT,
    dwPropId: u32,
    dwFlags: u32,
    pvData: ?*const c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_CONTROL = fn(
    hStoreProv: *c_void,
    dwFlags: u32,
    dwCtrlType: u32,
    pvCtrlPara: ?*const c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CERT_STORE_PROV_FIND_INFO = extern struct {
    cbSize: u32,
    dwMsgAndCertEncodingType: u32,
    dwFindFlags: u32,
    dwFindType: u32,
    pvFindPara: *const c_void,
};

pub const PFN_CERT_STORE_PROV_FIND_CERT = fn(
    hStoreProv: *c_void,
    pFindInfo: *CERT_STORE_PROV_FIND_INFO,
    pPrevCertContext: *CERT_CONTEXT,
    dwFlags: u32,
    ppvStoreProvFindInfo: **c_void,
    ppProvCertContext: **CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_FREE_FIND_CERT = fn(
    hStoreProv: *c_void,
    pCertContext: *CERT_CONTEXT,
    pvStoreProvFindInfo: *c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_GET_CERT_PROPERTY = fn(
    hStoreProv: *c_void,
    pCertContext: *CERT_CONTEXT,
    dwPropId: u32,
    dwFlags: u32,
    pvData: ?[*]u8,
    pcbData: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_FIND_CRL = fn(
    hStoreProv: *c_void,
    pFindInfo: *CERT_STORE_PROV_FIND_INFO,
    pPrevCrlContext: *CRL_CONTEXT,
    dwFlags: u32,
    ppvStoreProvFindInfo: **c_void,
    ppProvCrlContext: **CRL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_FREE_FIND_CRL = fn(
    hStoreProv: *c_void,
    pCrlContext: *CRL_CONTEXT,
    pvStoreProvFindInfo: *c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_GET_CRL_PROPERTY = fn(
    hStoreProv: *c_void,
    pCrlContext: *CRL_CONTEXT,
    dwPropId: u32,
    dwFlags: u32,
    pvData: ?[*]u8,
    pcbData: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_FIND_CTL = fn(
    hStoreProv: *c_void,
    pFindInfo: *CERT_STORE_PROV_FIND_INFO,
    pPrevCtlContext: *CTL_CONTEXT,
    dwFlags: u32,
    ppvStoreProvFindInfo: **c_void,
    ppProvCtlContext: **CTL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_FREE_FIND_CTL = fn(
    hStoreProv: *c_void,
    pCtlContext: *CTL_CONTEXT,
    pvStoreProvFindInfo: *c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_STORE_PROV_GET_CTL_PROPERTY = fn(
    hStoreProv: *c_void,
    pCtlContext: *CTL_CONTEXT,
    dwPropId: u32,
    dwFlags: u32,
    pvData: ?[*]u8,
    pcbData: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CRL_FIND_ISSUED_FOR_PARA = extern struct {
    pSubjectCert: *CERT_CONTEXT,
    pIssuerCert: *CERT_CONTEXT,
};

pub const CTL_ANY_SUBJECT_INFO = extern struct {
    SubjectAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    SubjectIdentifier: CRYPTOAPI_BLOB,
};

pub const CTL_FIND_USAGE_PARA = extern struct {
    cbSize: u32,
    SubjectUsage: CTL_USAGE,
    ListIdentifier: CRYPTOAPI_BLOB,
    pSigner: *CERT_INFO,
};

pub const CTL_FIND_SUBJECT_PARA = extern struct {
    cbSize: u32,
    pUsagePara: *CTL_FIND_USAGE_PARA,
    dwSubjectType: u32,
    pvSubject: *c_void,
};

pub const PFN_CERT_CREATE_CONTEXT_SORT_FUNC = fn(
    cbTotalEncoded: u32,
    cbRemainEncoded: u32,
    cEntry: u32,
    pvSort: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CERT_CREATE_CONTEXT_PARA = extern struct {
    cbSize: u32,
    pfnFree: PFN_CRYPT_FREE,
    pvFree: *c_void,
    pfnSort: PFN_CERT_CREATE_CONTEXT_SORT_FUNC,
    pvSort: *c_void,
};

pub const CERT_SYSTEM_STORE_INFO = extern struct {
    cbSize: u32,
};

pub const CERT_PHYSICAL_STORE_INFO = extern struct {
    cbSize: u32,
    pszOpenStoreProvider: PSTR,
    dwOpenEncodingType: u32,
    dwOpenFlags: u32,
    OpenParameters: CRYPTOAPI_BLOB,
    dwFlags: u32,
    dwPriority: u32,
};

pub const PFN_CERT_ENUM_SYSTEM_STORE_LOCATION = fn(
    pwszStoreLocation: [*:0]const u16,
    dwFlags: u32,
    pvReserved: *c_void,
    pvArg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_ENUM_SYSTEM_STORE = fn(
    pvSystemStore: *const c_void,
    dwFlags: u32,
    pStoreInfo: *CERT_SYSTEM_STORE_INFO,
    pvReserved: *c_void,
    pvArg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_ENUM_PHYSICAL_STORE = fn(
    pvSystemStore: *const c_void,
    dwFlags: u32,
    pwszStoreName: [*:0]const u16,
    pStoreInfo: *CERT_PHYSICAL_STORE_INFO,
    pvReserved: *c_void,
    pvArg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CTL_VERIFY_USAGE_PARA = extern struct {
    cbSize: u32,
    ListIdentifier: CRYPTOAPI_BLOB,
    cCtlStore: u32,
    rghCtlStore: **c_void,
    cSignerStore: u32,
    rghSignerStore: **c_void,
};

pub const CTL_VERIFY_USAGE_STATUS = extern struct {
    cbSize: u32,
    dwError: u32,
    dwFlags: u32,
    ppCtl: **CTL_CONTEXT,
    dwCtlEntryIndex: u32,
    ppSigner: **CERT_CONTEXT,
    dwSignerIndex: u32,
};

pub const CERT_REVOCATION_CRL_INFO = extern struct {
    cbSize: u32,
    pBaseCrlContext: *CRL_CONTEXT,
    pDeltaCrlContext: *CRL_CONTEXT,
    pCrlEntry: *CRL_ENTRY,
    fDeltaCrlEntry: BOOL,
};

pub const CERT_REVOCATION_PARA = extern struct {
    cbSize: u32,
    pIssuerCert: *CERT_CONTEXT,
    cCertStore: u32,
    rgCertStore: **c_void,
    hCrlStore: *c_void,
    pftTimeToUse: *FILETIME,
};

pub const CERT_REVOCATION_STATUS = extern struct {
    cbSize: u32,
    dwIndex: u32,
    dwError: u32,
    dwReason: u32,
    fHasFreshnessTime: BOOL,
    dwFreshnessTime: u32,
};

pub const CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO = extern struct {
    CertSignHashCNGAlgPropData: CRYPTOAPI_BLOB,
    CertIssuerPubKeyBitLengthPropData: CRYPTOAPI_BLOB,
};

pub const CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO = extern struct {
    cCNGHashAlgid: u32,
    rgpwszCNGHashAlgid: *PWSTR,
    dwWeakIndex: u32,
};

pub const PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC = fn(
    dwCertEncodingType: u32,
    pSignatureAlgorithm: *CRYPT_ALGORITHM_IDENTIFIER,
    ppvDecodedSignPara: ?*?*c_void,
    ppwszCNGHashAlgid: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC = fn(
    hKey: ?*c_void,
    dwCertEncodingType: u32,
    pSignatureAlgorithm: *CRYPT_ALGORITHM_IDENTIFIER,
    pvDecodedSignPara: ?*c_void,
    pwszCNGPubKeyAlgid: [*:0]const u16,
    pwszCNGHashAlgid: [*:0]const u16,
    pbComputedHash: [*:0]u8,
    cbComputedHash: u32,
    pbSignature: ?[*:0]u8,
    pcbSignature: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC = fn(
    dwCertEncodingType: u32,
    pPubKeyInfo: *CERT_PUBLIC_KEY_INFO,
    pSignatureAlgorithm: *CRYPT_ALGORITHM_IDENTIFIER,
    pvDecodedSignPara: ?*c_void,
    pwszCNGPubKeyAlgid: [*:0]const u16,
    pwszCNGHashAlgid: [*:0]const u16,
    pbComputedHash: [*:0]u8,
    cbComputedHash: u32,
    pbSignature: [*:0]u8,
    cbSignature: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = extern struct {
    cOID: u32,
    rgpszOID: *PSTR,
};

pub const PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC = fn(
    hNCryptKey: ?*c_void,
    dwCertEncodingType: u32,
    pszPublicKeyObjId: PSTR,
    dwFlags: u32,
    pvAuxInfo: ?*c_void,
    pInfo: ?[*]CERT_PUBLIC_KEY_INFO,
    pcbInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC = fn(
    hBCryptKey: *c_void,
    dwCertEncodingType: u32,
    pszPublicKeyObjId: PSTR,
    dwFlags: u32,
    pvAuxInfo: ?*c_void,
    pInfo: ?[*]CERT_PUBLIC_KEY_INFO,
    pcbInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC = fn(
    dwCertEncodingType: u32,
    pInfo: *CERT_PUBLIC_KEY_INFO,
    dwFlags: u32,
    pvAuxInfo: ?*c_void,
    phKey: **c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_IMPORT_PRIV_KEY_FUNC = fn(
    hCryptProv: ?*c_void,
    pPrivateKeyInfo: *CRYPT_PRIVATE_KEY_INFO,
    dwFlags: u32,
    pvAuxInfo: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_EXPORT_PRIV_KEY_FUNC = fn(
    hCryptProv: ?*c_void,
    dwKeySpec: u32,
    pszPrivateKeyObjId: PSTR,
    dwFlags: u32,
    pvAuxInfo: ?*c_void,
    pPrivateKeyInfo: ?[*]CRYPT_PRIVATE_KEY_INFO,
    pcbPrivateKeyInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CRYPT_GET_SIGNER_CERTIFICATE = fn(
    pvGetArg: ?*c_void,
    dwCertEncodingType: u32,
    pSignerId: *CERT_INFO,
    hMsgCertStore: *c_void,
) callconv(@import("std").os.windows.WINAPI) *CERT_CONTEXT;

pub const CRYPT_SIGN_MESSAGE_PARA = extern struct {
    cbSize: u32,
    dwMsgEncodingType: u32,
    pSigningCert: *CERT_CONTEXT,
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: *c_void,
    cMsgCert: u32,
    rgpMsgCert: **CERT_CONTEXT,
    cMsgCrl: u32,
    rgpMsgCrl: **CRL_CONTEXT,
    cAuthAttr: u32,
    rgAuthAttr: *CRYPT_ATTRIBUTE,
    cUnauthAttr: u32,
    rgUnauthAttr: *CRYPT_ATTRIBUTE,
    dwFlags: u32,
    dwInnerContentType: u32,
};

pub const CRYPT_VERIFY_MESSAGE_PARA = extern struct {
    cbSize: u32,
    dwMsgAndCertEncodingType: u32,
    hCryptProv: ?*c_void,
    pfnGetSignerCertificate: PFN_CRYPT_GET_SIGNER_CERTIFICATE,
    pvGetArg: *c_void,
};

pub const CRYPT_ENCRYPT_MESSAGE_PARA = extern struct {
    cbSize: u32,
    dwMsgEncodingType: u32,
    hCryptProv: ?*c_void,
    ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvEncryptionAuxInfo: *c_void,
    dwFlags: u32,
    dwInnerContentType: u32,
};

pub const CRYPT_DECRYPT_MESSAGE_PARA = extern struct {
    cbSize: u32,
    dwMsgAndCertEncodingType: u32,
    cCertStore: u32,
    rghCertStore: **c_void,
};

pub const CRYPT_HASH_MESSAGE_PARA = extern struct {
    cbSize: u32,
    dwMsgEncodingType: u32,
    hCryptProv: ?*c_void,
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: *c_void,
};

pub const CRYPT_KEY_SIGN_MESSAGE_PARA = extern struct {
    cbSize: u32,
    dwMsgAndCertEncodingType: u32,
    Anonymous: CRYPT_KEY_SIGN_MESSAGE_PARA._Anonymous_e__Union,
    dwKeySpec: u32,
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: *c_void,
    PubKeyAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CRYPT_KEY_VERIFY_MESSAGE_PARA = extern struct {
    cbSize: u32,
    dwMsgEncodingType: u32,
    hCryptProv: ?*c_void,
};

pub const CERT_CHAIN = extern struct {
    cCerts: u32,
    certs: *CRYPTOAPI_BLOB,
    keyLocatorInfo: CRYPT_KEY_PROV_INFO,
};

pub const PFN_CRYPT_ASYNC_PARAM_FREE_FUNC = fn(
    pszParamOid: PSTR,
    pvParam: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const CRYPT_BLOB_ARRAY = extern struct {
    cBlob: u32,
    rgBlob: *CRYPTOAPI_BLOB,
};

pub const CRYPT_CREDENTIALS = extern struct {
    cbSize: u32,
    pszCredentialsOid: [*:0]const u8,
    pvCredentials: *c_void,
};

pub const CRYPT_PASSWORD_CREDENTIALSA = extern struct {
    cbSize: u32,
    pszUsername: PSTR,
    pszPassword: PSTR,
};

pub const CRYPT_PASSWORD_CREDENTIALSW = extern struct {
    cbSize: u32,
    pszUsername: PWSTR,
    pszPassword: PWSTR,
};

pub const PFN_FREE_ENCODED_OBJECT_FUNC = fn(
    pszObjectOid: ?[*:0]const u8,
    pObject: *CRYPT_BLOB_ARRAY,
    pvFreeContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const CRYPTNET_URL_CACHE_PRE_FETCH_INFO = extern struct {
    cbSize: u32,
    dwObjectType: u32,
    dwError: u32,
    dwReserved: u32,
    ThisUpdateTime: FILETIME,
    NextUpdateTime: FILETIME,
    PublishTime: FILETIME,
};

pub const CRYPTNET_URL_CACHE_FLUSH_INFO = extern struct {
    cbSize: u32,
    dwExemptSeconds: u32,
    ExpireTime: FILETIME,
};

pub const CRYPTNET_URL_CACHE_RESPONSE_INFO = extern struct {
    cbSize: u32,
    wResponseType: u16,
    wResponseFlags: u16,
    LastModifiedTime: FILETIME,
    dwMaxAge: u32,
    pwszETag: [*:0]const u16,
    dwProxyId: u32,
};

pub const CRYPT_RETRIEVE_AUX_INFO = extern struct {
    cbSize: u32,
    pLastSyncTime: *FILETIME,
    dwMaxUrlRetrievalByteCount: u32,
    pPreFetchInfo: *CRYPTNET_URL_CACHE_PRE_FETCH_INFO,
    pFlushInfo: *CRYPTNET_URL_CACHE_FLUSH_INFO,
    ppResponseInfo: **CRYPTNET_URL_CACHE_RESPONSE_INFO,
    pwszCacheFileNamePrefix: PWSTR,
    pftCacheResync: *FILETIME,
    fProxyCacheRetrieval: BOOL,
    dwHttpStatusCode: u32,
    ppwszErrorResponseHeaders: *PWSTR,
    ppErrorContentBlob: **CRYPTOAPI_BLOB,
};

pub const PFN_CRYPT_CANCEL_RETRIEVAL = fn(
    dwFlags: u32,
    pvArg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC = fn(
    pvCompletion: ?*c_void,
    dwCompletionCode: u32,
    pszUrl: [*:0]const u8,
    pszObjectOid: ?PSTR,
    pvObject: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const CRYPT_ASYNC_RETRIEVAL_COMPLETION = extern struct {
    pfnCompletion: PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC,
    pvCompletion: *c_void,
};

pub const PFN_CANCEL_ASYNC_RETRIEVAL_FUNC = fn(
    hAsyncRetrieve: HCRYPTASYNC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CRYPT_URL_ARRAY = extern struct {
    cUrl: u32,
    rgwszUrl: *PWSTR,
};

pub const CRYPT_URL_INFO = extern struct {
    cbSize: u32,
    dwSyncDeltaTime: u32,
    cGroup: u32,
    rgcGroupEntry: *u32,
};

pub const CERT_CRL_CONTEXT_PAIR = extern struct {
    pCertContext: *CERT_CONTEXT,
    pCrlContext: *CRL_CONTEXT,
};

pub const CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO = extern struct {
    cbSize: u32,
    iDeltaCrlIndicator: i32,
    pftCacheResync: *FILETIME,
    pLastSyncTime: *FILETIME,
    pMaxAgeTime: *FILETIME,
    pChainPara: *CERT_REVOCATION_CHAIN_PARA,
    pDeltaCrlIndicator: *CRYPTOAPI_BLOB,
};

pub const PFN_CRYPT_ENUM_KEYID_PROP = fn(
    pKeyIdentifier: *const CRYPTOAPI_BLOB,
    dwFlags: u32,
    pvReserved: *c_void,
    pvArg: ?*c_void,
    cProp: u32,
    rgdwPropId: [*]u32,
    rgpvData: [*]*c_void,
    rgcbData: [*]u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CERT_CHAIN_ENGINE_CONFIG = extern struct {
    cbSize: u32,
    hRestrictedRoot: *c_void,
    hRestrictedTrust: *c_void,
    hRestrictedOther: *c_void,
    cAdditionalStore: u32,
    rghAdditionalStore: **c_void,
    dwFlags: u32,
    dwUrlRetrievalTimeout: u32,
    MaximumCachedCertificates: u32,
    CycleDetectionModulus: u32,
    hExclusiveRoot: *c_void,
    hExclusiveTrustedPeople: *c_void,
    dwExclusiveFlags: u32,
};

pub const CERT_TRUST_STATUS = extern struct {
    dwErrorStatus: u32,
    dwInfoStatus: u32,
};

pub const CERT_REVOCATION_INFO = extern struct {
    cbSize: u32,
    dwRevocationResult: u32,
    pszRevocationOid: [*:0]const u8,
    pvOidSpecificInfo: *c_void,
    fHasFreshnessTime: BOOL,
    dwFreshnessTime: u32,
    pCrlInfo: *CERT_REVOCATION_CRL_INFO,
};

pub const CERT_TRUST_LIST_INFO = extern struct {
    cbSize: u32,
    pCtlEntry: *CTL_ENTRY,
    pCtlContext: *CTL_CONTEXT,
};

pub const CERT_CHAIN_ELEMENT = extern struct {
    cbSize: u32,
    pCertContext: *CERT_CONTEXT,
    TrustStatus: CERT_TRUST_STATUS,
    pRevocationInfo: *CERT_REVOCATION_INFO,
    pIssuanceUsage: *CTL_USAGE,
    pApplicationUsage: *CTL_USAGE,
    pwszExtendedErrorInfo: [*:0]const u16,
};

pub const CERT_SIMPLE_CHAIN = extern struct {
    cbSize: u32,
    TrustStatus: CERT_TRUST_STATUS,
    cElement: u32,
    rgpElement: **CERT_CHAIN_ELEMENT,
    pTrustListInfo: *CERT_TRUST_LIST_INFO,
    fHasRevocationFreshnessTime: BOOL,
    dwRevocationFreshnessTime: u32,
};

pub const CERT_CHAIN_CONTEXT = extern struct {
    cbSize: u32,
    TrustStatus: CERT_TRUST_STATUS,
    cChain: u32,
    rgpChain: **CERT_SIMPLE_CHAIN,
    cLowerQualityChainContext: u32,
    rgpLowerQualityChainContext: **CERT_CHAIN_CONTEXT,
    fHasRevocationFreshnessTime: BOOL,
    dwRevocationFreshnessTime: u32,
    dwCreateFlags: u32,
    ChainId: Guid,
};

pub const CERT_USAGE_MATCH = extern struct {
    dwType: u32,
    Usage: CTL_USAGE,
};

pub const CTL_USAGE_MATCH = extern struct {
    dwType: u32,
    Usage: CTL_USAGE,
};

pub const CERT_CHAIN_PARA = extern struct {
    cbSize: u32,
    RequestedUsage: CERT_USAGE_MATCH,
};

pub const CERT_REVOCATION_CHAIN_PARA = extern struct {
    cbSize: u32,
    hChainEngine: HCERTCHAINENGINE,
    hAdditionalStore: *c_void,
    dwChainFlags: u32,
    dwUrlRetrievalTimeout: u32,
    pftCurrentTime: *FILETIME,
    pftCacheResync: *FILETIME,
    cbMaxUrlRetrievalByteCount: u32,
};

pub const CRL_REVOCATION_INFO = extern struct {
    pCrlEntry: *CRL_ENTRY,
    pCrlContext: *CRL_CONTEXT,
    pCrlIssuerChain: *CERT_CHAIN_CONTEXT,
};

pub const PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK = fn(
    pCert: *CERT_CONTEXT,
    pvFindArg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CERT_CHAIN_FIND_BY_ISSUER_PARA = extern struct {
    cbSize: u32,
    pszUsageIdentifier: [*:0]const u8,
    dwKeySpec: u32,
    dwAcquirePrivateKeyFlags: u32,
    cIssuer: u32,
    rgIssuer: *CRYPTOAPI_BLOB,
    pfnFindCallback: PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK,
    pvFindArg: *c_void,
};

pub const CERT_CHAIN_POLICY_PARA = extern struct {
    cbSize: u32,
    dwFlags: u32,
    pvExtraPolicyPara: *c_void,
};

pub const CERT_CHAIN_POLICY_STATUS = extern struct {
    cbSize: u32,
    dwError: u32,
    lChainIndex: i32,
    lElementIndex: i32,
    pvExtraPolicyStatus: *c_void,
};

pub const AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = extern struct {
    cbSize: u32,
    dwRegPolicySettings: u32,
    pSignerInfo: *CMSG_SIGNER_INFO,
};

pub const AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = extern struct {
    cbSize: u32,
    fCommercial: BOOL,
};

pub const AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = extern struct {
    cbSize: u32,
    dwRegPolicySettings: u32,
    fCommercial: BOOL,
};

pub const HTTPSPolicyCallbackData = extern struct {
    Anonymous: HTTPSPolicyCallbackData._Anonymous_e__Union,
    dwAuthType: u32,
    fdwChecks: u32,
    pwszServerName: PWSTR,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const EV_EXTRA_CERT_CHAIN_POLICY_PARA = extern struct {
    cbSize: u32,
    dwRootProgramQualifierFlags: u32,
};

pub const EV_EXTRA_CERT_CHAIN_POLICY_STATUS = extern struct {
    cbSize: u32,
    dwQualifiers: u32,
    dwIssuanceUsageIndex: u32,
};

pub const SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS = extern struct {
    cbSize: u32,
    dwErrorLevel: u32,
    dwErrorCategory: u32,
    dwReserved: u32,
    wszErrorText: [256]u16,
};

pub const SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA = extern struct {
    cbSize: u32,
    dwReserved: u32,
    pwszServerName: PWSTR,
    rgpszHpkpValue: [2]*i8,
};

pub const SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA = extern struct {
    cbSize: u32,
    dwReserved: u32,
    pwszServerName: [*:0]const u16,
};

pub const SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS = extern struct {
    cbSize: u32,
    lError: i32,
    wszErrorText: [512]u16,
};

pub const CRYPT_PKCS12_PBE_PARAMS = extern struct {
    iIterations: i32,
    cbSalt: u32,
};

pub const PKCS12_PBES2_EXPORT_PARAMS = extern struct {
    dwSize: u32,
    hNcryptDescriptor: *c_void,
    pwszPbes2Alg: PWSTR,
};

pub const CERT_SERVER_OCSP_RESPONSE_CONTEXT = extern struct {
    cbSize: u32,
    pbEncodedOcspResponse: *u8,
    cbEncodedOcspResponse: u32,
};

pub const PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK = fn(
    pChainContext: *CERT_CHAIN_CONTEXT,
    pServerOcspResponseContext: *CERT_SERVER_OCSP_RESPONSE_CONTEXT,
    pNewCrlContext: *CRL_CONTEXT,
    pPrevCrlContext: ?*CRL_CONTEXT,
    pvArg: ?*c_void,
    dwWriteOcspFileError: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const CERT_SERVER_OCSP_RESPONSE_OPEN_PARA = extern struct {
    cbSize: u32,
    dwFlags: u32,
    pcbUsedSize: *u32,
    pwszOcspDirectory: PWSTR,
    pfnUpdateCallback: PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK,
    pvUpdateCallbackArg: *c_void,
};

pub const CERT_SELECT_CHAIN_PARA = extern struct {
    hChainEngine: HCERTCHAINENGINE,
    pTime: *FILETIME,
    hAdditionalStore: *c_void,
    pChainPara: *CERT_CHAIN_PARA,
    dwFlags: u32,
};

pub const CERT_SELECT_CRITERIA = extern struct {
    dwType: u32,
    cPara: u32,
    ppPara: **c_void,
};

pub const CRYPT_TIMESTAMP_REQUEST = extern struct {
    dwVersion: u32,
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    HashedMessage: CRYPTOAPI_BLOB,
    pszTSAPolicyId: PSTR,
    Nonce: CRYPTOAPI_BLOB,
    fCertReq: BOOL,
    cExtension: u32,
    rgExtension: *CERT_EXTENSION,
};

pub const CRYPT_TIMESTAMP_RESPONSE = extern struct {
    dwStatus: u32,
    cFreeText: u32,
    rgFreeText: *PWSTR,
    FailureInfo: CRYPT_BIT_BLOB,
    ContentInfo: CRYPTOAPI_BLOB,
};

pub const CRYPT_TIMESTAMP_ACCURACY = extern struct {
    dwSeconds: u32,
    dwMillis: u32,
    dwMicros: u32,
};

pub const CRYPT_TIMESTAMP_INFO = extern struct {
    dwVersion: u32,
    pszTSAPolicyId: PSTR,
    HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    HashedMessage: CRYPTOAPI_BLOB,
    SerialNumber: CRYPTOAPI_BLOB,
    ftTime: FILETIME,
    pvAccuracy: *CRYPT_TIMESTAMP_ACCURACY,
    fOrdering: BOOL,
    Nonce: CRYPTOAPI_BLOB,
    Tsa: CRYPTOAPI_BLOB,
    cExtension: u32,
    rgExtension: *CERT_EXTENSION,
};

pub const CRYPT_TIMESTAMP_CONTEXT = extern struct {
    cbEncoded: u32,
    pbEncoded: *u8,
    pTimeStamp: *CRYPT_TIMESTAMP_INFO,
};

pub const CRYPT_TIMESTAMP_PARA = extern struct {
    pszTSAPolicyId: [*:0]const u8,
    fRequestCerts: BOOL,
    Nonce: CRYPTOAPI_BLOB,
    cExtension: u32,
    rgExtension: *CERT_EXTENSION,
};

pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH = fn(
    pContext: *c_void,
    rgIdentifierOrNameList: [*]*CRYPTOAPI_BLOB,
    dwIdentifierOrNameListCount: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET = fn(
    pPluginContext: ?*c_void,
    pIdentifier: ?*CRYPTOAPI_BLOB,
    dwNameType: u32,
    pNameBlob: *CRYPTOAPI_BLOB,
    ppbContent: **u8,
    pcbContent: *u32,
    ppwszPassword: ?*?PWSTR,
    ppIdentifier: ?*?*CRYPTOAPI_BLOB,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE = fn(
    dwReason: u32,
    pPluginContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD = fn(
    pPluginContext: ?*c_void,
    pwszPassword: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE = fn(
    pPluginContext: ?*c_void,
    pbData: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER = fn(
    pPluginContext: ?*c_void,
    pIdentifier: *CRYPTOAPI_BLOB,
) callconv(@import("std").os.windows.WINAPI) void;

pub const CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE = extern struct {
    cbSize: u32,
    pfnGet: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET,
    pfnRelease: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE,
    pfnFreePassword: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD,
    pfnFree: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE,
    pfnFreeIdentifier: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER,
};

pub const PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE = fn(
    pfnFlush: PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH,
    pContext: *c_void,
    pdwExpectedObjectCount: *u32,
    ppFuncTable: **CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE,
    ppPluginContext: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CERT_IS_WEAK_HASH = fn(
    dwHashUseType: u32,
    pwszCNGHashAlgid: [*:0]const u16,
    dwChainFlags: u32,
    pSignerChainContext: ?*CERT_CHAIN_CONTEXT,
    pTimeStamp: ?*FILETIME,
    pwszFileName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CRYPTPROTECT_PROMPTSTRUCT = extern struct {
    cbSize: u32,
    dwPromptFlags: u32,
    hwndApp: HWND,
    szPrompt: [*:0]const u16,
};

pub const SCARD_READERSTATEA = extern struct {
    szReader: [*:0]const u8,
    pvUserData: *c_void,
    dwCurrentState: u32,
    dwEventState: u32,
    cbAtr: u32,
    rgbAtr: [36]u8,
};

pub const SCARD_READERSTATEW = extern struct {
    szReader: [*:0]const u16,
    pvUserData: *c_void,
    dwCurrentState: u32,
    dwEventState: u32,
    cbAtr: u32,
    rgbAtr: [36]u8,
};

pub const SCARD_ATRMASK = extern struct {
    cbAtr: u32,
    rgbAtr: [36]u8,
    rgbMask: [36]u8,
};

pub const LPOCNCONNPROCA = fn(
    param0: ?*c_void,
    param1: PSTR,
    param2: PSTR,
    param3: *c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const LPOCNCONNPROCW = fn(
    param0: ?*c_void,
    param1: PWSTR,
    param2: PWSTR,
    param3: *c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const LPOCNCHKPROC = fn(
    param0: ?*c_void,
    param1: ?*c_void,
    param2: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPOCNDSCPROC = fn(
    param0: ?*c_void,
    param1: ?*c_void,
    param2: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const OPENCARD_SEARCH_CRITERIAA = extern struct {
    dwStructSize: u32,
    lpstrGroupNames: PSTR,
    nMaxGroupNames: u32,
    rgguidInterfaces: *Guid,
    cguidInterfaces: u32,
    lpstrCardNames: PSTR,
    nMaxCardNames: u32,
    lpfnCheck: LPOCNCHKPROC,
    lpfnConnect: LPOCNCONNPROCA,
    lpfnDisconnect: LPOCNDSCPROC,
    pvUserData: *c_void,
    dwShareMode: u32,
    dwPreferredProtocols: u32,
};

pub const OPENCARD_SEARCH_CRITERIAW = extern struct {
    dwStructSize: u32,
    lpstrGroupNames: PWSTR,
    nMaxGroupNames: u32,
    rgguidInterfaces: *Guid,
    cguidInterfaces: u32,
    lpstrCardNames: PWSTR,
    nMaxCardNames: u32,
    lpfnCheck: LPOCNCHKPROC,
    lpfnConnect: LPOCNCONNPROCW,
    lpfnDisconnect: LPOCNDSCPROC,
    pvUserData: *c_void,
    dwShareMode: u32,
    dwPreferredProtocols: u32,
};

pub const OPENCARDNAME_EXA = extern struct {
    dwStructSize: u32,
    hSCardContext: ?*c_void,
    hwndOwner: HWND,
    dwFlags: u32,
    lpstrTitle: [*:0]const u8,
    lpstrSearchDesc: [*:0]const u8,
    hIcon: HICON,
    pOpenCardSearchCriteria: *OPENCARD_SEARCH_CRITERIAA,
    lpfnConnect: LPOCNCONNPROCA,
    pvUserData: *c_void,
    dwShareMode: u32,
    dwPreferredProtocols: u32,
    lpstrRdr: PSTR,
    nMaxRdr: u32,
    lpstrCard: PSTR,
    nMaxCard: u32,
    dwActiveProtocol: u32,
    hCardHandle: ?*c_void,
};

pub const OPENCARDNAME_EXW = extern struct {
    dwStructSize: u32,
    hSCardContext: ?*c_void,
    hwndOwner: HWND,
    dwFlags: u32,
    lpstrTitle: [*:0]const u16,
    lpstrSearchDesc: [*:0]const u16,
    hIcon: HICON,
    pOpenCardSearchCriteria: *OPENCARD_SEARCH_CRITERIAW,
    lpfnConnect: LPOCNCONNPROCW,
    pvUserData: *c_void,
    dwShareMode: u32,
    dwPreferredProtocols: u32,
    lpstrRdr: PWSTR,
    nMaxRdr: u32,
    lpstrCard: PWSTR,
    nMaxCard: u32,
    dwActiveProtocol: u32,
    hCardHandle: ?*c_void,
};

pub const READER_SEL_REQUEST_MATCH_TYPE = extern enum(i32) {
    RSR_MATCH_TYPE_READER_AND_CONTAINER = 1,
    RSR_MATCH_TYPE_SERIAL_NUMBER = 2,
    RSR_MATCH_TYPE_ALL_CARDS = 3,
};
pub const RSR_MATCH_TYPE_READER_AND_CONTAINER = READER_SEL_REQUEST_MATCH_TYPE.RSR_MATCH_TYPE_READER_AND_CONTAINER;
pub const RSR_MATCH_TYPE_SERIAL_NUMBER = READER_SEL_REQUEST_MATCH_TYPE.RSR_MATCH_TYPE_SERIAL_NUMBER;
pub const RSR_MATCH_TYPE_ALL_CARDS = READER_SEL_REQUEST_MATCH_TYPE.RSR_MATCH_TYPE_ALL_CARDS;

pub const READER_SEL_REQUEST = extern struct {
    dwShareMode: u32,
    dwPreferredProtocols: u32,
    MatchType: READER_SEL_REQUEST_MATCH_TYPE,
    Anonymous: READER_SEL_REQUEST._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const READER_SEL_RESPONSE = extern struct {
    cbReaderNameOffset: u32,
    cchReaderNameLength: u32,
    cbCardNameOffset: u32,
    cchCardNameLength: u32,
};

pub const OPENCARDNAMEA = extern struct {
    dwStructSize: u32,
    hwndOwner: HWND,
    hSCardContext: ?*c_void,
    lpstrGroupNames: PSTR,
    nMaxGroupNames: u32,
    lpstrCardNames: PSTR,
    nMaxCardNames: u32,
    rgguidInterfaces: *Guid,
    cguidInterfaces: u32,
    lpstrRdr: PSTR,
    nMaxRdr: u32,
    lpstrCard: PSTR,
    nMaxCard: u32,
    lpstrTitle: [*:0]const u8,
    dwFlags: u32,
    pvUserData: *c_void,
    dwShareMode: u32,
    dwPreferredProtocols: u32,
    dwActiveProtocol: u32,
    lpfnConnect: LPOCNCONNPROCA,
    lpfnCheck: LPOCNCHKPROC,
    lpfnDisconnect: LPOCNDSCPROC,
    hCardHandle: ?*c_void,
};

pub const OPENCARDNAMEW = extern struct {
    dwStructSize: u32,
    hwndOwner: HWND,
    hSCardContext: ?*c_void,
    lpstrGroupNames: PWSTR,
    nMaxGroupNames: u32,
    lpstrCardNames: PWSTR,
    nMaxCardNames: u32,
    rgguidInterfaces: *Guid,
    cguidInterfaces: u32,
    lpstrRdr: PWSTR,
    nMaxRdr: u32,
    lpstrCard: PWSTR,
    nMaxCard: u32,
    lpstrTitle: [*:0]const u16,
    dwFlags: u32,
    pvUserData: *c_void,
    dwShareMode: u32,
    dwPreferredProtocols: u32,
    dwActiveProtocol: u32,
    lpfnConnect: LPOCNCONNPROCW,
    lpfnCheck: LPOCNCHKPROC,
    lpfnDisconnect: LPOCNDSCPROC,
    hCardHandle: ?*c_void,
};

pub const SERVICE_TRIGGER_CUSTOM_STATE_ID = extern struct {
    Data: [2]u32,
};

pub const SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM = extern struct {
    u: SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM._u_e__Union,
    const _u_e__Union = u32; // TODO: generate this nested type!
};

pub const SERVICE_DESCRIPTIONA = extern struct {
    lpDescription: PSTR,
};

pub const SERVICE_DESCRIPTIONW = extern struct {
    lpDescription: PWSTR,
};

pub const SC_ACTION_TYPE = extern enum(i32) {
    SC_ACTION_NONE = 0,
    SC_ACTION_RESTART = 1,
    SC_ACTION_REBOOT = 2,
    SC_ACTION_RUN_COMMAND = 3,
    SC_ACTION_OWN_RESTART = 4,
};
pub const SC_ACTION_NONE = SC_ACTION_TYPE.SC_ACTION_NONE;
pub const SC_ACTION_RESTART = SC_ACTION_TYPE.SC_ACTION_RESTART;
pub const SC_ACTION_REBOOT = SC_ACTION_TYPE.SC_ACTION_REBOOT;
pub const SC_ACTION_RUN_COMMAND = SC_ACTION_TYPE.SC_ACTION_RUN_COMMAND;
pub const SC_ACTION_OWN_RESTART = SC_ACTION_TYPE.SC_ACTION_OWN_RESTART;

pub const SC_ACTION = extern struct {
    Type: SC_ACTION_TYPE,
    Delay: u32,
};

pub const SERVICE_FAILURE_ACTIONSA = extern struct {
    dwResetPeriod: u32,
    lpRebootMsg: PSTR,
    lpCommand: PSTR,
    cActions: u32,
    lpsaActions: *SC_ACTION,
};

pub const SERVICE_FAILURE_ACTIONSW = extern struct {
    dwResetPeriod: u32,
    lpRebootMsg: PWSTR,
    lpCommand: PWSTR,
    cActions: u32,
    lpsaActions: *SC_ACTION,
};

pub const SERVICE_DELAYED_AUTO_START_INFO = extern struct {
    fDelayedAutostart: BOOL,
};

pub const SERVICE_FAILURE_ACTIONS_FLAG = extern struct {
    fFailureActionsOnNonCrashFailures: BOOL,
};

pub const SERVICE_SID_INFO = extern struct {
    dwServiceSidType: u32,
};

pub const SERVICE_REQUIRED_PRIVILEGES_INFOA = extern struct {
    pmszRequiredPrivileges: PSTR,
};

pub const SERVICE_REQUIRED_PRIVILEGES_INFOW = extern struct {
    pmszRequiredPrivileges: PWSTR,
};

pub const SERVICE_PRESHUTDOWN_INFO = extern struct {
    dwPreshutdownTimeout: u32,
};

pub const SERVICE_TRIGGER_SPECIFIC_DATA_ITEM = extern struct {
    dwDataType: u32,
    cbData: u32,
    pData: *u8,
};

pub const SERVICE_TRIGGER = extern struct {
    dwTriggerType: u32,
    dwAction: u32,
    pTriggerSubtype: *Guid,
    cDataItems: u32,
    pDataItems: *SERVICE_TRIGGER_SPECIFIC_DATA_ITEM,
};

pub const SERVICE_TRIGGER_INFO = extern struct {
    cTriggers: u32,
    pTriggers: *SERVICE_TRIGGER,
    pReserved: *u8,
};

pub const SERVICE_PREFERRED_NODE_INFO = extern struct {
    usPreferredNode: u16,
    fDelete: u8,
};

pub const SERVICE_TIMECHANGE_INFO = extern struct {
    liNewTime: LARGE_INTEGER,
    liOldTime: LARGE_INTEGER,
};

pub const SERVICE_LAUNCH_PROTECTED_INFO = extern struct {
    dwLaunchProtected: u32,
};

pub const SC_HANDLE__ = extern struct {
    unused: i32,
};

pub const SERVICE_STATUS_HANDLE__ = extern struct {
    unused: i32,
};

pub const SC_STATUS_TYPE = extern enum(i32) {
    SC_STATUS_PROCESS_INFO = 0,
};
pub const SC_STATUS_PROCESS_INFO = SC_STATUS_TYPE.SC_STATUS_PROCESS_INFO;

pub const SC_ENUM_TYPE = extern enum(i32) {
    SC_ENUM_PROCESS_INFO = 0,
};
pub const SC_ENUM_PROCESS_INFO = SC_ENUM_TYPE.SC_ENUM_PROCESS_INFO;

pub const SERVICE_STATUS = extern struct {
    dwServiceType: u32,
    dwCurrentState: u32,
    dwControlsAccepted: u32,
    dwWin32ExitCode: u32,
    dwServiceSpecificExitCode: u32,
    dwCheckPoint: u32,
    dwWaitHint: u32,
};

pub const SERVICE_STATUS_PROCESS = extern struct {
    dwServiceType: u32,
    dwCurrentState: u32,
    dwControlsAccepted: u32,
    dwWin32ExitCode: u32,
    dwServiceSpecificExitCode: u32,
    dwCheckPoint: u32,
    dwWaitHint: u32,
    dwProcessId: u32,
    dwServiceFlags: u32,
};

pub const ENUM_SERVICE_STATUSA = extern struct {
    lpServiceName: PSTR,
    lpDisplayName: PSTR,
    ServiceStatus: SERVICE_STATUS,
};

pub const ENUM_SERVICE_STATUSW = extern struct {
    lpServiceName: PWSTR,
    lpDisplayName: PWSTR,
    ServiceStatus: SERVICE_STATUS,
};

pub const ENUM_SERVICE_STATUS_PROCESSA = extern struct {
    lpServiceName: PSTR,
    lpDisplayName: PSTR,
    ServiceStatusProcess: SERVICE_STATUS_PROCESS,
};

pub const ENUM_SERVICE_STATUS_PROCESSW = extern struct {
    lpServiceName: PWSTR,
    lpDisplayName: PWSTR,
    ServiceStatusProcess: SERVICE_STATUS_PROCESS,
};

pub const QUERY_SERVICE_LOCK_STATUSA = extern struct {
    fIsLocked: u32,
    lpLockOwner: PSTR,
    dwLockDuration: u32,
};

pub const QUERY_SERVICE_LOCK_STATUSW = extern struct {
    fIsLocked: u32,
    lpLockOwner: PWSTR,
    dwLockDuration: u32,
};

pub const QUERY_SERVICE_CONFIGA = extern struct {
    dwServiceType: u32,
    dwStartType: u32,
    dwErrorControl: u32,
    lpBinaryPathName: PSTR,
    lpLoadOrderGroup: PSTR,
    dwTagId: u32,
    lpDependencies: PSTR,
    lpServiceStartName: PSTR,
    lpDisplayName: PSTR,
};

pub const QUERY_SERVICE_CONFIGW = extern struct {
    dwServiceType: u32,
    dwStartType: u32,
    dwErrorControl: u32,
    lpBinaryPathName: PWSTR,
    lpLoadOrderGroup: PWSTR,
    dwTagId: u32,
    lpDependencies: PWSTR,
    lpServiceStartName: PWSTR,
    lpDisplayName: PWSTR,
};

pub const SERVICE_MAIN_FUNCTIONW = fn(
    dwNumServicesArgs: u32,
    lpServiceArgVectors: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub const SERVICE_MAIN_FUNCTIONA = fn(
    dwNumServicesArgs: u32,
    lpServiceArgVectors: **i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LPSERVICE_MAIN_FUNCTIONW = fn(
    dwNumServicesArgs: u32,
    lpServiceArgVectors: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LPSERVICE_MAIN_FUNCTIONA = fn(
    dwNumServicesArgs: u32,
    lpServiceArgVectors: *PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub const SERVICE_TABLE_ENTRYA = extern struct {
    lpServiceName: PSTR,
    lpServiceProc: LPSERVICE_MAIN_FUNCTIONA,
};

pub const SERVICE_TABLE_ENTRYW = extern struct {
    lpServiceName: PWSTR,
    lpServiceProc: LPSERVICE_MAIN_FUNCTIONW,
};

pub const HANDLER_FUNCTION = fn(
    dwControl: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const HANDLER_FUNCTION_EX = fn(
    dwControl: u32,
    dwEventType: u32,
    lpEventData: *c_void,
    lpContext: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const LPHANDLER_FUNCTION = fn(
    dwControl: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LPHANDLER_FUNCTION_EX = fn(
    dwControl: u32,
    dwEventType: u32,
    lpEventData: *c_void,
    lpContext: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFN_SC_NOTIFY_CALLBACK = fn(
    pParameter: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const SERVICE_NOTIFY_1 = extern struct {
    dwVersion: u32,
    pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
    pContext: *c_void,
    dwNotificationStatus: u32,
    ServiceStatus: SERVICE_STATUS_PROCESS,
};

pub const SERVICE_NOTIFY_2A = extern struct {
    dwVersion: u32,
    pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
    pContext: *c_void,
    dwNotificationStatus: u32,
    ServiceStatus: SERVICE_STATUS_PROCESS,
    dwNotificationTriggered: u32,
    pszServiceNames: PSTR,
};

pub const SERVICE_NOTIFY_2W = extern struct {
    dwVersion: u32,
    pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
    pContext: *c_void,
    dwNotificationStatus: u32,
    ServiceStatus: SERVICE_STATUS_PROCESS,
    dwNotificationTriggered: u32,
    pszServiceNames: PWSTR,
};

pub const SERVICE_CONTROL_STATUS_REASON_PARAMSA = extern struct {
    dwReason: u32,
    pszComment: PSTR,
    ServiceStatus: SERVICE_STATUS_PROCESS,
};

pub const SERVICE_CONTROL_STATUS_REASON_PARAMSW = extern struct {
    dwReason: u32,
    pszComment: PWSTR,
    ServiceStatus: SERVICE_STATUS_PROCESS,
};

pub const SERVICE_START_REASON = extern struct {
    dwReason: u32,
};

pub const SC_EVENT_TYPE = extern enum(i32) {
    SC_EVENT_DATABASE_CHANGE = 0,
    SC_EVENT_PROPERTY_CHANGE = 1,
    SC_EVENT_STATUS_CHANGE = 2,
};
pub const SC_EVENT_DATABASE_CHANGE = SC_EVENT_TYPE.SC_EVENT_DATABASE_CHANGE;
pub const SC_EVENT_PROPERTY_CHANGE = SC_EVENT_TYPE.SC_EVENT_PROPERTY_CHANGE;
pub const SC_EVENT_STATUS_CHANGE = SC_EVENT_TYPE.SC_EVENT_STATUS_CHANGE;

pub const SC_NOTIFICATION_CALLBACK = fn(
    dwNotify: u32,
    pCallbackContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PSC_NOTIFICATION_CALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const _SC_NOTIFICATION_REGISTRATION = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const SERVICE_REGISTRY_STATE_TYPE = extern enum(i32) {
    ServiceRegistryStateParameters = 0,
    ServiceRegistryStatePersistent = 1,
    MaxServiceRegistryStateType = 2,
};
pub const ServiceRegistryStateParameters = SERVICE_REGISTRY_STATE_TYPE.ServiceRegistryStateParameters;
pub const ServiceRegistryStatePersistent = SERVICE_REGISTRY_STATE_TYPE.ServiceRegistryStatePersistent;
pub const MaxServiceRegistryStateType = SERVICE_REGISTRY_STATE_TYPE.MaxServiceRegistryStateType;

pub const SERVICE_DIRECTORY_TYPE = extern enum(i32) {
    ServiceDirectoryPersistentState = 0,
    ServiceDirectoryTypeMax = 1,
};
pub const ServiceDirectoryPersistentState = SERVICE_DIRECTORY_TYPE.ServiceDirectoryPersistentState;
pub const ServiceDirectoryTypeMax = SERVICE_DIRECTORY_TYPE.ServiceDirectoryTypeMax;

pub const LSA_TRUST_INFORMATION = extern struct {
    Name: UNICODE_STRING,
    Sid: *c_void,
};

pub const LSA_REFERENCED_DOMAIN_LIST = extern struct {
    Entries: u32,
    Domains: *LSA_TRUST_INFORMATION,
};

pub const LSA_TRANSLATED_SID2 = extern struct {
    Use: SID_NAME_USE,
    Sid: *c_void,
    DomainIndex: i32,
    Flags: u32,
};

pub const LSA_TRANSLATED_NAME = extern struct {
    Use: SID_NAME_USE,
    Name: UNICODE_STRING,
    DomainIndex: i32,
};

pub const POLICY_ACCOUNT_DOMAIN_INFO = extern struct {
    DomainName: UNICODE_STRING,
    DomainSid: *c_void,
};

pub const POLICY_DNS_DOMAIN_INFO = extern struct {
    Name: UNICODE_STRING,
    DnsDomainName: UNICODE_STRING,
    DnsForestName: UNICODE_STRING,
    DomainGuid: Guid,
    Sid: *c_void,
};

pub const LSA_LOOKUP_DOMAIN_INFO_CLASS = extern enum(i32) {
    AccountDomainInformation = 5,
    DnsDomainInformation = 12,
};
pub const AccountDomainInformation = LSA_LOOKUP_DOMAIN_INFO_CLASS.AccountDomainInformation;
pub const DnsDomainInformation = LSA_LOOKUP_DOMAIN_INFO_CLASS.DnsDomainInformation;

pub const SECURITY_LOGON_TYPE = extern enum(i32) {
    UndefinedLogonType = 0,
    Interactive = 2,
    Network = 3,
    Batch = 4,
    Service = 5,
    Proxy = 6,
    Unlock = 7,
    NetworkCleartext = 8,
    NewCredentials = 9,
    RemoteInteractive = 10,
    CachedInteractive = 11,
    CachedRemoteInteractive = 12,
    CachedUnlock = 13,
};
pub const UndefinedLogonType = SECURITY_LOGON_TYPE.UndefinedLogonType;
pub const Interactive = SECURITY_LOGON_TYPE.Interactive;
pub const Network = SECURITY_LOGON_TYPE.Network;
pub const Batch = SECURITY_LOGON_TYPE.Batch;
pub const Service = SECURITY_LOGON_TYPE.Service;
pub const Proxy = SECURITY_LOGON_TYPE.Proxy;
pub const Unlock = SECURITY_LOGON_TYPE.Unlock;
pub const NetworkCleartext = SECURITY_LOGON_TYPE.NetworkCleartext;
pub const NewCredentials = SECURITY_LOGON_TYPE.NewCredentials;
pub const RemoteInteractive = SECURITY_LOGON_TYPE.RemoteInteractive;
pub const CachedInteractive = SECURITY_LOGON_TYPE.CachedInteractive;
pub const CachedRemoteInteractive = SECURITY_LOGON_TYPE.CachedRemoteInteractive;
pub const CachedUnlock = SECURITY_LOGON_TYPE.CachedUnlock;

pub const SE_ADT_PARAMETER_TYPE = extern enum(i32) {
    SeAdtParmTypeNone = 0,
    SeAdtParmTypeString = 1,
    SeAdtParmTypeFileSpec = 2,
    SeAdtParmTypeUlong = 3,
    SeAdtParmTypeSid = 4,
    SeAdtParmTypeLogonId = 5,
    SeAdtParmTypeNoLogonId = 6,
    SeAdtParmTypeAccessMask = 7,
    SeAdtParmTypePrivs = 8,
    SeAdtParmTypeObjectTypes = 9,
    SeAdtParmTypeHexUlong = 10,
    SeAdtParmTypePtr = 11,
    SeAdtParmTypeTime = 12,
    SeAdtParmTypeGuid = 13,
    SeAdtParmTypeLuid = 14,
    SeAdtParmTypeHexInt64 = 15,
    SeAdtParmTypeStringList = 16,
    SeAdtParmTypeSidList = 17,
    SeAdtParmTypeDuration = 18,
    SeAdtParmTypeUserAccountControl = 19,
    SeAdtParmTypeNoUac = 20,
    SeAdtParmTypeMessage = 21,
    SeAdtParmTypeDateTime = 22,
    SeAdtParmTypeSockAddr = 23,
    SeAdtParmTypeSD = 24,
    SeAdtParmTypeLogonHours = 25,
    SeAdtParmTypeLogonIdNoSid = 26,
    SeAdtParmTypeUlongNoConv = 27,
    SeAdtParmTypeSockAddrNoPort = 28,
    SeAdtParmTypeAccessReason = 29,
    SeAdtParmTypeStagingReason = 30,
    SeAdtParmTypeResourceAttribute = 31,
    SeAdtParmTypeClaims = 32,
    SeAdtParmTypeLogonIdAsSid = 33,
    SeAdtParmTypeMultiSzString = 34,
    SeAdtParmTypeLogonIdEx = 35,
};
pub const SeAdtParmTypeNone = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeNone;
pub const SeAdtParmTypeString = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeString;
pub const SeAdtParmTypeFileSpec = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeFileSpec;
pub const SeAdtParmTypeUlong = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeUlong;
pub const SeAdtParmTypeSid = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeSid;
pub const SeAdtParmTypeLogonId = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeLogonId;
pub const SeAdtParmTypeNoLogonId = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeNoLogonId;
pub const SeAdtParmTypeAccessMask = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeAccessMask;
pub const SeAdtParmTypePrivs = SE_ADT_PARAMETER_TYPE.SeAdtParmTypePrivs;
pub const SeAdtParmTypeObjectTypes = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeObjectTypes;
pub const SeAdtParmTypeHexUlong = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeHexUlong;
pub const SeAdtParmTypePtr = SE_ADT_PARAMETER_TYPE.SeAdtParmTypePtr;
pub const SeAdtParmTypeTime = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeTime;
pub const SeAdtParmTypeGuid = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeGuid;
pub const SeAdtParmTypeLuid = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeLuid;
pub const SeAdtParmTypeHexInt64 = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeHexInt64;
pub const SeAdtParmTypeStringList = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeStringList;
pub const SeAdtParmTypeSidList = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeSidList;
pub const SeAdtParmTypeDuration = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeDuration;
pub const SeAdtParmTypeUserAccountControl = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeUserAccountControl;
pub const SeAdtParmTypeNoUac = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeNoUac;
pub const SeAdtParmTypeMessage = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeMessage;
pub const SeAdtParmTypeDateTime = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeDateTime;
pub const SeAdtParmTypeSockAddr = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeSockAddr;
pub const SeAdtParmTypeSD = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeSD;
pub const SeAdtParmTypeLogonHours = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeLogonHours;
pub const SeAdtParmTypeLogonIdNoSid = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeLogonIdNoSid;
pub const SeAdtParmTypeUlongNoConv = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeUlongNoConv;
pub const SeAdtParmTypeSockAddrNoPort = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeSockAddrNoPort;
pub const SeAdtParmTypeAccessReason = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeAccessReason;
pub const SeAdtParmTypeStagingReason = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeStagingReason;
pub const SeAdtParmTypeResourceAttribute = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeResourceAttribute;
pub const SeAdtParmTypeClaims = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeClaims;
pub const SeAdtParmTypeLogonIdAsSid = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeLogonIdAsSid;
pub const SeAdtParmTypeMultiSzString = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeMultiSzString;
pub const SeAdtParmTypeLogonIdEx = SE_ADT_PARAMETER_TYPE.SeAdtParmTypeLogonIdEx;

pub const SE_ADT_OBJECT_TYPE = extern struct {
    ObjectType: Guid,
    Flags: u16,
    Level: u16,
    AccessMask: u32,
};

pub const SE_ADT_PARAMETER_ARRAY_ENTRY = extern struct {
    Type: SE_ADT_PARAMETER_TYPE,
    Length: u32,
    Data: [2]?*c_void,
    Address: *c_void,
};

pub const SE_ADT_ACCESS_REASON = extern struct {
    AccessMask: u32,
    AccessReasons: [32]u32,
    ObjectTypeIndex: u32,
    AccessGranted: u32,
    SecurityDescriptor: *c_void,
};

pub const SE_ADT_CLAIMS = extern struct {
    Length: u32,
    Claims: *c_void,
};

pub const SE_ADT_PARAMETER_ARRAY = extern struct {
    CategoryId: u32,
    AuditId: u32,
    ParameterCount: u32,
    Length: u32,
    FlatSubCategoryId: u16,
    Type: u16,
    Flags: u32,
    Parameters: [32]SE_ADT_PARAMETER_ARRAY_ENTRY,
};

pub const SE_ADT_PARAMETER_ARRAY_EX = extern struct {
    CategoryId: u32,
    AuditId: u32,
    Version: u32,
    ParameterCount: u32,
    Length: u32,
    FlatSubCategoryId: u16,
    Type: u16,
    Flags: u32,
    Parameters: [32]SE_ADT_PARAMETER_ARRAY_ENTRY,
};

pub const POLICY_AUDIT_EVENT_TYPE = extern enum(i32) {
    AuditCategorySystem = 0,
    AuditCategoryLogon = 1,
    AuditCategoryObjectAccess = 2,
    AuditCategoryPrivilegeUse = 3,
    AuditCategoryDetailedTracking = 4,
    AuditCategoryPolicyChange = 5,
    AuditCategoryAccountManagement = 6,
    AuditCategoryDirectoryServiceAccess = 7,
    AuditCategoryAccountLogon = 8,
};
pub const AuditCategorySystem = POLICY_AUDIT_EVENT_TYPE.AuditCategorySystem;
pub const AuditCategoryLogon = POLICY_AUDIT_EVENT_TYPE.AuditCategoryLogon;
pub const AuditCategoryObjectAccess = POLICY_AUDIT_EVENT_TYPE.AuditCategoryObjectAccess;
pub const AuditCategoryPrivilegeUse = POLICY_AUDIT_EVENT_TYPE.AuditCategoryPrivilegeUse;
pub const AuditCategoryDetailedTracking = POLICY_AUDIT_EVENT_TYPE.AuditCategoryDetailedTracking;
pub const AuditCategoryPolicyChange = POLICY_AUDIT_EVENT_TYPE.AuditCategoryPolicyChange;
pub const AuditCategoryAccountManagement = POLICY_AUDIT_EVENT_TYPE.AuditCategoryAccountManagement;
pub const AuditCategoryDirectoryServiceAccess = POLICY_AUDIT_EVENT_TYPE.AuditCategoryDirectoryServiceAccess;
pub const AuditCategoryAccountLogon = POLICY_AUDIT_EVENT_TYPE.AuditCategoryAccountLogon;

pub const LSA_TRANSLATED_SID = extern struct {
    Use: SID_NAME_USE,
    RelativeId: u32,
    DomainIndex: i32,
};

pub const POLICY_LSA_SERVER_ROLE = extern enum(i32) {
    PolicyServerRoleBackup = 2,
    PolicyServerRolePrimary = 3,
};
pub const PolicyServerRoleBackup = POLICY_LSA_SERVER_ROLE.PolicyServerRoleBackup;
pub const PolicyServerRolePrimary = POLICY_LSA_SERVER_ROLE.PolicyServerRolePrimary;

pub const POLICY_INFORMATION_CLASS = extern enum(i32) {
    PolicyAuditLogInformation = 1,
    PolicyAuditEventsInformation = 2,
    PolicyPrimaryDomainInformation = 3,
    PolicyPdAccountInformation = 4,
    PolicyAccountDomainInformation = 5,
    PolicyLsaServerRoleInformation = 6,
    PolicyReplicaSourceInformation = 7,
    PolicyDefaultQuotaInformation = 8,
    PolicyModificationInformation = 9,
    PolicyAuditFullSetInformation = 10,
    PolicyAuditFullQueryInformation = 11,
    PolicyDnsDomainInformation = 12,
    PolicyDnsDomainInformationInt = 13,
    PolicyLocalAccountDomainInformation = 14,
    PolicyMachineAccountInformation = 15,
    PolicyLastEntry = 16,
};
pub const PolicyAuditLogInformation = POLICY_INFORMATION_CLASS.PolicyAuditLogInformation;
pub const PolicyAuditEventsInformation = POLICY_INFORMATION_CLASS.PolicyAuditEventsInformation;
pub const PolicyPrimaryDomainInformation = POLICY_INFORMATION_CLASS.PolicyPrimaryDomainInformation;
pub const PolicyPdAccountInformation = POLICY_INFORMATION_CLASS.PolicyPdAccountInformation;
pub const PolicyAccountDomainInformation = POLICY_INFORMATION_CLASS.PolicyAccountDomainInformation;
pub const PolicyLsaServerRoleInformation = POLICY_INFORMATION_CLASS.PolicyLsaServerRoleInformation;
pub const PolicyReplicaSourceInformation = POLICY_INFORMATION_CLASS.PolicyReplicaSourceInformation;
pub const PolicyDefaultQuotaInformation = POLICY_INFORMATION_CLASS.PolicyDefaultQuotaInformation;
pub const PolicyModificationInformation = POLICY_INFORMATION_CLASS.PolicyModificationInformation;
pub const PolicyAuditFullSetInformation = POLICY_INFORMATION_CLASS.PolicyAuditFullSetInformation;
pub const PolicyAuditFullQueryInformation = POLICY_INFORMATION_CLASS.PolicyAuditFullQueryInformation;
pub const PolicyDnsDomainInformation = POLICY_INFORMATION_CLASS.PolicyDnsDomainInformation;
pub const PolicyDnsDomainInformationInt = POLICY_INFORMATION_CLASS.PolicyDnsDomainInformationInt;
pub const PolicyLocalAccountDomainInformation = POLICY_INFORMATION_CLASS.PolicyLocalAccountDomainInformation;
pub const PolicyMachineAccountInformation = POLICY_INFORMATION_CLASS.PolicyMachineAccountInformation;
pub const PolicyLastEntry = POLICY_INFORMATION_CLASS.PolicyLastEntry;

pub const POLICY_AUDIT_LOG_INFO = extern struct {
    AuditLogPercentFull: u32,
    MaximumLogSize: u32,
    AuditRetentionPeriod: LARGE_INTEGER,
    AuditLogFullShutdownInProgress: u8,
    TimeToShutdown: LARGE_INTEGER,
    NextAuditRecordId: u32,
};

pub const POLICY_AUDIT_EVENTS_INFO = extern struct {
    AuditingMode: u8,
    EventAuditingOptions: *u32,
    MaximumAuditEventCount: u32,
};

pub const POLICY_AUDIT_SUBCATEGORIES_INFO = extern struct {
    MaximumSubCategoryCount: u32,
    EventAuditingOptions: *u32,
};

pub const POLICY_AUDIT_CATEGORIES_INFO = extern struct {
    MaximumCategoryCount: u32,
    SubCategoriesInfo: *POLICY_AUDIT_SUBCATEGORIES_INFO,
};

pub const POLICY_PRIMARY_DOMAIN_INFO = extern struct {
    Name: UNICODE_STRING,
    Sid: *c_void,
};

pub const POLICY_PD_ACCOUNT_INFO = extern struct {
    Name: UNICODE_STRING,
};

pub const POLICY_LSA_SERVER_ROLE_INFO = extern struct {
    LsaServerRole: POLICY_LSA_SERVER_ROLE,
};

pub const POLICY_REPLICA_SOURCE_INFO = extern struct {
    ReplicaSource: UNICODE_STRING,
    ReplicaAccountName: UNICODE_STRING,
};

pub const POLICY_DEFAULT_QUOTA_INFO = extern struct {
    QuotaLimits: QUOTA_LIMITS,
};

pub const POLICY_MODIFICATION_INFO = extern struct {
    ModifiedId: LARGE_INTEGER,
    DatabaseCreationTime: LARGE_INTEGER,
};

pub const POLICY_AUDIT_FULL_SET_INFO = extern struct {
    ShutDownOnFull: u8,
};

pub const POLICY_AUDIT_FULL_QUERY_INFO = extern struct {
    ShutDownOnFull: u8,
    LogIsFull: u8,
};

pub const POLICY_DOMAIN_INFORMATION_CLASS = extern enum(i32) {
    PolicyDomainEfsInformation = 2,
    PolicyDomainKerberosTicketInformation = 3,
};
pub const PolicyDomainEfsInformation = POLICY_DOMAIN_INFORMATION_CLASS.PolicyDomainEfsInformation;
pub const PolicyDomainKerberosTicketInformation = POLICY_DOMAIN_INFORMATION_CLASS.PolicyDomainKerberosTicketInformation;

pub const POLICY_DOMAIN_EFS_INFO = extern struct {
    InfoLength: u32,
    EfsBlob: *u8,
};

pub const POLICY_DOMAIN_KERBEROS_TICKET_INFO = extern struct {
    AuthenticationOptions: u32,
    MaxServiceTicketAge: LARGE_INTEGER,
    MaxTicketAge: LARGE_INTEGER,
    MaxRenewAge: LARGE_INTEGER,
    MaxClockSkew: LARGE_INTEGER,
    Reserved: LARGE_INTEGER,
};

pub const POLICY_MACHINE_ACCT_INFO = extern struct {
    Rid: u32,
    Sid: *c_void,
};

pub const POLICY_NOTIFICATION_INFORMATION_CLASS = extern enum(i32) {
    PolicyNotifyAuditEventsInformation = 1,
    PolicyNotifyAccountDomainInformation = 2,
    PolicyNotifyServerRoleInformation = 3,
    PolicyNotifyDnsDomainInformation = 4,
    PolicyNotifyDomainEfsInformation = 5,
    PolicyNotifyDomainKerberosTicketInformation = 6,
    PolicyNotifyMachineAccountPasswordInformation = 7,
    PolicyNotifyGlobalSaclInformation = 8,
    PolicyNotifyMax = 9,
};
pub const PolicyNotifyAuditEventsInformation = POLICY_NOTIFICATION_INFORMATION_CLASS.PolicyNotifyAuditEventsInformation;
pub const PolicyNotifyAccountDomainInformation = POLICY_NOTIFICATION_INFORMATION_CLASS.PolicyNotifyAccountDomainInformation;
pub const PolicyNotifyServerRoleInformation = POLICY_NOTIFICATION_INFORMATION_CLASS.PolicyNotifyServerRoleInformation;
pub const PolicyNotifyDnsDomainInformation = POLICY_NOTIFICATION_INFORMATION_CLASS.PolicyNotifyDnsDomainInformation;
pub const PolicyNotifyDomainEfsInformation = POLICY_NOTIFICATION_INFORMATION_CLASS.PolicyNotifyDomainEfsInformation;
pub const PolicyNotifyDomainKerberosTicketInformation = POLICY_NOTIFICATION_INFORMATION_CLASS.PolicyNotifyDomainKerberosTicketInformation;
pub const PolicyNotifyMachineAccountPasswordInformation = POLICY_NOTIFICATION_INFORMATION_CLASS.PolicyNotifyMachineAccountPasswordInformation;
pub const PolicyNotifyGlobalSaclInformation = POLICY_NOTIFICATION_INFORMATION_CLASS.PolicyNotifyGlobalSaclInformation;
pub const PolicyNotifyMax = POLICY_NOTIFICATION_INFORMATION_CLASS.PolicyNotifyMax;

pub const TRUSTED_INFORMATION_CLASS = extern enum(i32) {
    TrustedDomainNameInformation = 1,
    TrustedControllersInformation = 2,
    TrustedPosixOffsetInformation = 3,
    TrustedPasswordInformation = 4,
    TrustedDomainInformationBasic = 5,
    TrustedDomainInformationEx = 6,
    TrustedDomainAuthInformation = 7,
    TrustedDomainFullInformation = 8,
    TrustedDomainAuthInformationInternal = 9,
    TrustedDomainFullInformationInternal = 10,
    TrustedDomainInformationEx2Internal = 11,
    TrustedDomainFullInformation2Internal = 12,
    TrustedDomainSupportedEncryptionTypes = 13,
};
pub const TrustedDomainNameInformation = TRUSTED_INFORMATION_CLASS.TrustedDomainNameInformation;
pub const TrustedControllersInformation = TRUSTED_INFORMATION_CLASS.TrustedControllersInformation;
pub const TrustedPosixOffsetInformation = TRUSTED_INFORMATION_CLASS.TrustedPosixOffsetInformation;
pub const TrustedPasswordInformation = TRUSTED_INFORMATION_CLASS.TrustedPasswordInformation;
pub const TrustedDomainInformationBasic = TRUSTED_INFORMATION_CLASS.TrustedDomainInformationBasic;
pub const TrustedDomainInformationEx = TRUSTED_INFORMATION_CLASS.TrustedDomainInformationEx;
pub const TrustedDomainAuthInformation = TRUSTED_INFORMATION_CLASS.TrustedDomainAuthInformation;
pub const TrustedDomainFullInformation = TRUSTED_INFORMATION_CLASS.TrustedDomainFullInformation;
pub const TrustedDomainAuthInformationInternal = TRUSTED_INFORMATION_CLASS.TrustedDomainAuthInformationInternal;
pub const TrustedDomainFullInformationInternal = TRUSTED_INFORMATION_CLASS.TrustedDomainFullInformationInternal;
pub const TrustedDomainInformationEx2Internal = TRUSTED_INFORMATION_CLASS.TrustedDomainInformationEx2Internal;
pub const TrustedDomainFullInformation2Internal = TRUSTED_INFORMATION_CLASS.TrustedDomainFullInformation2Internal;
pub const TrustedDomainSupportedEncryptionTypes = TRUSTED_INFORMATION_CLASS.TrustedDomainSupportedEncryptionTypes;

pub const TRUSTED_DOMAIN_NAME_INFO = extern struct {
    Name: UNICODE_STRING,
};

pub const TRUSTED_CONTROLLERS_INFO = extern struct {
    Entries: u32,
    Names: *UNICODE_STRING,
};

pub const TRUSTED_POSIX_OFFSET_INFO = extern struct {
    Offset: u32,
};

pub const TRUSTED_PASSWORD_INFO = extern struct {
    Password: UNICODE_STRING,
    OldPassword: UNICODE_STRING,
};

pub const TRUSTED_DOMAIN_INFORMATION_EX = extern struct {
    Name: UNICODE_STRING,
    FlatName: UNICODE_STRING,
    Sid: *c_void,
    TrustDirection: u32,
    TrustType: u32,
    TrustAttributes: u32,
};

pub const TRUSTED_DOMAIN_INFORMATION_EX2 = extern struct {
    Name: UNICODE_STRING,
    FlatName: UNICODE_STRING,
    Sid: *c_void,
    TrustDirection: u32,
    TrustType: u32,
    TrustAttributes: u32,
    ForestTrustLength: u32,
    ForestTrustInfo: *u8,
};

pub const LSA_AUTH_INFORMATION = extern struct {
    LastUpdateTime: LARGE_INTEGER,
    AuthType: u32,
    AuthInfoLength: u32,
    AuthInfo: *u8,
};

pub const TRUSTED_DOMAIN_AUTH_INFORMATION = extern struct {
    IncomingAuthInfos: u32,
    IncomingAuthenticationInformation: *LSA_AUTH_INFORMATION,
    IncomingPreviousAuthenticationInformation: *LSA_AUTH_INFORMATION,
    OutgoingAuthInfos: u32,
    OutgoingAuthenticationInformation: *LSA_AUTH_INFORMATION,
    OutgoingPreviousAuthenticationInformation: *LSA_AUTH_INFORMATION,
};

pub const TRUSTED_DOMAIN_FULL_INFORMATION = extern struct {
    Information: TRUSTED_DOMAIN_INFORMATION_EX,
    PosixOffset: TRUSTED_POSIX_OFFSET_INFO,
    AuthInformation: TRUSTED_DOMAIN_AUTH_INFORMATION,
};

pub const TRUSTED_DOMAIN_FULL_INFORMATION2 = extern struct {
    Information: TRUSTED_DOMAIN_INFORMATION_EX2,
    PosixOffset: TRUSTED_POSIX_OFFSET_INFO,
    AuthInformation: TRUSTED_DOMAIN_AUTH_INFORMATION,
};

pub const TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES = extern struct {
    SupportedEncryptionTypes: u32,
};

pub const LSA_FOREST_TRUST_RECORD_TYPE = extern enum(i32) {
    ForestTrustTopLevelName = 0,
    ForestTrustTopLevelNameEx = 1,
    ForestTrustDomainInfo = 2,
    ForestTrustRecordTypeLast = 2,
};
pub const ForestTrustTopLevelName = LSA_FOREST_TRUST_RECORD_TYPE.ForestTrustTopLevelName;
pub const ForestTrustTopLevelNameEx = LSA_FOREST_TRUST_RECORD_TYPE.ForestTrustTopLevelNameEx;
pub const ForestTrustDomainInfo = LSA_FOREST_TRUST_RECORD_TYPE.ForestTrustDomainInfo;
pub const ForestTrustRecordTypeLast = LSA_FOREST_TRUST_RECORD_TYPE.ForestTrustRecordTypeLast;

pub const LSA_FOREST_TRUST_DOMAIN_INFO = extern struct {
    Sid: *c_void,
    DnsName: UNICODE_STRING,
    NetbiosName: UNICODE_STRING,
};

pub const LSA_FOREST_TRUST_BINARY_DATA = extern struct {
    Length: u32,
    Buffer: *u8,
};

pub const LSA_FOREST_TRUST_RECORD = extern struct {
    Flags: u32,
    ForestTrustType: LSA_FOREST_TRUST_RECORD_TYPE,
    Time: LARGE_INTEGER,
    ForestTrustData: LSA_FOREST_TRUST_RECORD._ForestTrustData_e__Union,
    const _ForestTrustData_e__Union = u32; // TODO: generate this nested type!
};

pub const LSA_FOREST_TRUST_INFORMATION = extern struct {
    RecordCount: u32,
    Entries: **LSA_FOREST_TRUST_RECORD,
};

pub const LSA_FOREST_TRUST_COLLISION_RECORD_TYPE = extern enum(i32) {
    CollisionTdo = 0,
    CollisionXref = 1,
    CollisionOther = 2,
};
pub const CollisionTdo = LSA_FOREST_TRUST_COLLISION_RECORD_TYPE.CollisionTdo;
pub const CollisionXref = LSA_FOREST_TRUST_COLLISION_RECORD_TYPE.CollisionXref;
pub const CollisionOther = LSA_FOREST_TRUST_COLLISION_RECORD_TYPE.CollisionOther;

pub const LSA_FOREST_TRUST_COLLISION_RECORD = extern struct {
    Index: u32,
    Type: LSA_FOREST_TRUST_COLLISION_RECORD_TYPE,
    Flags: u32,
    Name: UNICODE_STRING,
};

pub const LSA_FOREST_TRUST_COLLISION_INFORMATION = extern struct {
    RecordCount: u32,
    Entries: **LSA_FOREST_TRUST_COLLISION_RECORD,
};

pub const LSA_ENUMERATION_INFORMATION = extern struct {
    Sid: *c_void,
};

pub const LSA_LAST_INTER_LOGON_INFO = extern struct {
    LastSuccessfulLogon: LARGE_INTEGER,
    LastFailedLogon: LARGE_INTEGER,
    FailedAttemptCountSinceLastSuccessfulLogon: u32,
};

pub const SECURITY_LOGON_SESSION_DATA = extern struct {
    Size: u32,
    LogonId: LUID,
    UserName: UNICODE_STRING,
    LogonDomain: UNICODE_STRING,
    AuthenticationPackage: UNICODE_STRING,
    LogonType: u32,
    Session: u32,
    Sid: *c_void,
    LogonTime: LARGE_INTEGER,
    LogonServer: UNICODE_STRING,
    DnsDomainName: UNICODE_STRING,
    Upn: UNICODE_STRING,
    UserFlags: u32,
    LastLogonInfo: LSA_LAST_INTER_LOGON_INFO,
    LogonScript: UNICODE_STRING,
    ProfilePath: UNICODE_STRING,
    HomeDirectory: UNICODE_STRING,
    HomeDirectoryDrive: UNICODE_STRING,
    LogoffTime: LARGE_INTEGER,
    KickOffTime: LARGE_INTEGER,
    PasswordLastSet: LARGE_INTEGER,
    PasswordCanChange: LARGE_INTEGER,
    PasswordMustChange: LARGE_INTEGER,
};

pub const CENTRAL_ACCESS_POLICY_ENTRY = extern struct {
    Name: UNICODE_STRING,
    Description: UNICODE_STRING,
    ChangeId: UNICODE_STRING,
    LengthAppliesTo: u32,
    AppliesTo: *u8,
    LengthSD: u32,
    SD: *c_void,
    LengthStagedSD: u32,
    StagedSD: *c_void,
    Flags: u32,
};

pub const CENTRAL_ACCESS_POLICY = extern struct {
    CAPID: *c_void,
    Name: UNICODE_STRING,
    Description: UNICODE_STRING,
    ChangeId: UNICODE_STRING,
    Flags: u32,
    CAPECount: u32,
    CAPEs: **CENTRAL_ACCESS_POLICY_ENTRY,
};

pub const NEGOTIATE_MESSAGES = extern enum(i32) {
    NegEnumPackagePrefixes = 0,
    NegGetCallerName = 1,
    NegTransferCredentials = 2,
    NegMsgReserved1 = 3,
    NegCallPackageMax = 4,
};
pub const NegEnumPackagePrefixes = NEGOTIATE_MESSAGES.NegEnumPackagePrefixes;
pub const NegGetCallerName = NEGOTIATE_MESSAGES.NegGetCallerName;
pub const NegTransferCredentials = NEGOTIATE_MESSAGES.NegTransferCredentials;
pub const NegMsgReserved1 = NEGOTIATE_MESSAGES.NegMsgReserved1;
pub const NegCallPackageMax = NEGOTIATE_MESSAGES.NegCallPackageMax;

pub const NEGOTIATE_PACKAGE_PREFIX = extern struct {
    PackageId: ?*c_void,
    PackageDataA: *c_void,
    PackageDataW: *c_void,
    PrefixLen: ?*c_void,
    Prefix: [32]u8,
};

pub const NEGOTIATE_PACKAGE_PREFIXES = extern struct {
    MessageType: u32,
    PrefixCount: u32,
    Offset: u32,
    Pad: u32,
};

pub const NEGOTIATE_CALLER_NAME_REQUEST = extern struct {
    MessageType: u32,
    LogonId: LUID,
};

pub const NEGOTIATE_CALLER_NAME_RESPONSE = extern struct {
    MessageType: u32,
    CallerName: PWSTR,
};

pub const DOMAIN_PASSWORD_INFORMATION = extern struct {
    MinPasswordLength: u16,
    PasswordHistoryLength: u16,
    PasswordProperties: u32,
    MaxPasswordAge: LARGE_INTEGER,
    MinPasswordAge: LARGE_INTEGER,
};

pub const PSAM_PASSWORD_NOTIFICATION_ROUTINE = fn(
    UserName: *UNICODE_STRING,
    RelativeId: u32,
    NewPassword: *UNICODE_STRING,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PSAM_INIT_NOTIFICATION_ROUTINE = fn(
) callconv(@import("std").os.windows.WINAPI) u8;

pub const PSAM_PASSWORD_FILTER_ROUTINE = fn(
    AccountName: *UNICODE_STRING,
    FullName: *UNICODE_STRING,
    Password: *UNICODE_STRING,
    SetOperation: u8,
) callconv(@import("std").os.windows.WINAPI) u8;

pub const MSV1_0_LOGON_SUBMIT_TYPE = extern enum(i32) {
    MsV1_0InteractiveLogon = 2,
    MsV1_0Lm20Logon = 3,
    MsV1_0NetworkLogon = 4,
    MsV1_0SubAuthLogon = 5,
    MsV1_0WorkstationUnlockLogon = 7,
    MsV1_0S4ULogon = 12,
    MsV1_0VirtualLogon = 82,
    MsV1_0NoElevationLogon = 83,
    MsV1_0LuidLogon = 84,
};
pub const MsV1_0InteractiveLogon = MSV1_0_LOGON_SUBMIT_TYPE.MsV1_0InteractiveLogon;
pub const MsV1_0Lm20Logon = MSV1_0_LOGON_SUBMIT_TYPE.MsV1_0Lm20Logon;
pub const MsV1_0NetworkLogon = MSV1_0_LOGON_SUBMIT_TYPE.MsV1_0NetworkLogon;
pub const MsV1_0SubAuthLogon = MSV1_0_LOGON_SUBMIT_TYPE.MsV1_0SubAuthLogon;
pub const MsV1_0WorkstationUnlockLogon = MSV1_0_LOGON_SUBMIT_TYPE.MsV1_0WorkstationUnlockLogon;
pub const MsV1_0S4ULogon = MSV1_0_LOGON_SUBMIT_TYPE.MsV1_0S4ULogon;
pub const MsV1_0VirtualLogon = MSV1_0_LOGON_SUBMIT_TYPE.MsV1_0VirtualLogon;
pub const MsV1_0NoElevationLogon = MSV1_0_LOGON_SUBMIT_TYPE.MsV1_0NoElevationLogon;
pub const MsV1_0LuidLogon = MSV1_0_LOGON_SUBMIT_TYPE.MsV1_0LuidLogon;

pub const MSV1_0_PROFILE_BUFFER_TYPE = extern enum(i32) {
    MsV1_0InteractiveProfile = 2,
    MsV1_0Lm20LogonProfile = 3,
    MsV1_0SmartCardProfile = 4,
};
pub const MsV1_0InteractiveProfile = MSV1_0_PROFILE_BUFFER_TYPE.MsV1_0InteractiveProfile;
pub const MsV1_0Lm20LogonProfile = MSV1_0_PROFILE_BUFFER_TYPE.MsV1_0Lm20LogonProfile;
pub const MsV1_0SmartCardProfile = MSV1_0_PROFILE_BUFFER_TYPE.MsV1_0SmartCardProfile;

pub const MSV1_0_INTERACTIVE_LOGON = extern struct {
    MessageType: MSV1_0_LOGON_SUBMIT_TYPE,
    LogonDomainName: UNICODE_STRING,
    UserName: UNICODE_STRING,
    Password: UNICODE_STRING,
};

pub const MSV1_0_INTERACTIVE_PROFILE = extern struct {
    MessageType: MSV1_0_PROFILE_BUFFER_TYPE,
    LogonCount: u16,
    BadPasswordCount: u16,
    LogonTime: LARGE_INTEGER,
    LogoffTime: LARGE_INTEGER,
    KickOffTime: LARGE_INTEGER,
    PasswordLastSet: LARGE_INTEGER,
    PasswordCanChange: LARGE_INTEGER,
    PasswordMustChange: LARGE_INTEGER,
    LogonScript: UNICODE_STRING,
    HomeDirectory: UNICODE_STRING,
    FullName: UNICODE_STRING,
    ProfilePath: UNICODE_STRING,
    HomeDirectoryDrive: UNICODE_STRING,
    LogonServer: UNICODE_STRING,
    UserFlags: u32,
};

pub const MSV1_0_LM20_LOGON = extern struct {
    MessageType: MSV1_0_LOGON_SUBMIT_TYPE,
    LogonDomainName: UNICODE_STRING,
    UserName: UNICODE_STRING,
    Workstation: UNICODE_STRING,
    ChallengeToClient: [8]u8,
    CaseSensitiveChallengeResponse: STRING,
    CaseInsensitiveChallengeResponse: STRING,
    ParameterControl: u32,
};

pub const MSV1_0_SUBAUTH_LOGON = extern struct {
    MessageType: MSV1_0_LOGON_SUBMIT_TYPE,
    LogonDomainName: UNICODE_STRING,
    UserName: UNICODE_STRING,
    Workstation: UNICODE_STRING,
    ChallengeToClient: [8]u8,
    AuthenticationInfo1: STRING,
    AuthenticationInfo2: STRING,
    ParameterControl: u32,
    SubAuthPackageId: u32,
};

pub const MSV1_0_S4U_LOGON = extern struct {
    MessageType: MSV1_0_LOGON_SUBMIT_TYPE,
    Flags: u32,
    UserPrincipalName: UNICODE_STRING,
    DomainName: UNICODE_STRING,
};

pub const MSV1_0_LM20_LOGON_PROFILE = extern struct {
    MessageType: MSV1_0_PROFILE_BUFFER_TYPE,
    KickOffTime: LARGE_INTEGER,
    LogoffTime: LARGE_INTEGER,
    UserFlags: u32,
    UserSessionKey: [16]u8,
    LogonDomainName: UNICODE_STRING,
    LanmanSessionKey: [8]u8,
    LogonServer: UNICODE_STRING,
    UserParameters: UNICODE_STRING,
};

pub const MSV1_0_CREDENTIAL_KEY_TYPE = extern enum(i32) {
    InvalidCredKey = 0,
    DeprecatedIUMCredKey = 1,
    DomainUserCredKey = 2,
    LocalUserCredKey = 3,
    ExternallySuppliedCredKey = 4,
};
pub const InvalidCredKey = MSV1_0_CREDENTIAL_KEY_TYPE.InvalidCredKey;
pub const DeprecatedIUMCredKey = MSV1_0_CREDENTIAL_KEY_TYPE.DeprecatedIUMCredKey;
pub const DomainUserCredKey = MSV1_0_CREDENTIAL_KEY_TYPE.DomainUserCredKey;
pub const LocalUserCredKey = MSV1_0_CREDENTIAL_KEY_TYPE.LocalUserCredKey;
pub const ExternallySuppliedCredKey = MSV1_0_CREDENTIAL_KEY_TYPE.ExternallySuppliedCredKey;

pub const MSV1_0_CREDENTIAL_KEY = extern struct {
    Data: [20]u8,
};

pub const MSV1_0_SUPPLEMENTAL_CREDENTIAL = extern struct {
    Version: u32,
    Flags: u32,
    LmPassword: [16]u8,
    NtPassword: [16]u8,
};

pub const MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2 = extern struct {
    Version: u32,
    Flags: u32,
    NtPassword: [16]u8,
    CredentialKey: MSV1_0_CREDENTIAL_KEY,
};

pub const MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3 = extern struct {
    Version: u32,
    Flags: u32,
    CredentialKeyType: MSV1_0_CREDENTIAL_KEY_TYPE,
    NtPassword: [16]u8,
    CredentialKey: MSV1_0_CREDENTIAL_KEY,
    ShaPassword: [20]u8,
};

pub const MSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL = extern struct {
    Version: u32,
    EncryptedCredsSize: u32,
    EncryptedCreds: [1]u8,
};

pub const MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL = extern struct {
    Version: u32,
    Flags: u32,
    CredentialKey: MSV1_0_CREDENTIAL_KEY,
    CredentialKeyType: MSV1_0_CREDENTIAL_KEY_TYPE,
    EncryptedCredsSize: u32,
    EncryptedCreds: [1]u8,
};

pub const MSV1_0_NTLM3_RESPONSE = extern struct {
    Response: [16]u8,
    RespType: u8,
    HiRespType: u8,
    Flags: u16,
    MsgWord: u32,
    TimeStamp: u64,
    ChallengeFromClient: [8]u8,
    AvPairsOff: u32,
    Buffer: [1]u8,
};

pub const MSV1_0_AVID = extern enum(i32) {
    MsvAvEOL = 0,
    MsvAvNbComputerName = 1,
    MsvAvNbDomainName = 2,
    MsvAvDnsComputerName = 3,
    MsvAvDnsDomainName = 4,
    MsvAvDnsTreeName = 5,
    MsvAvFlags = 6,
    MsvAvTimestamp = 7,
    MsvAvRestrictions = 8,
    MsvAvTargetName = 9,
    MsvAvChannelBindings = 10,
};
pub const MsvAvEOL = MSV1_0_AVID.MsvAvEOL;
pub const MsvAvNbComputerName = MSV1_0_AVID.MsvAvNbComputerName;
pub const MsvAvNbDomainName = MSV1_0_AVID.MsvAvNbDomainName;
pub const MsvAvDnsComputerName = MSV1_0_AVID.MsvAvDnsComputerName;
pub const MsvAvDnsDomainName = MSV1_0_AVID.MsvAvDnsDomainName;
pub const MsvAvDnsTreeName = MSV1_0_AVID.MsvAvDnsTreeName;
pub const MsvAvFlags = MSV1_0_AVID.MsvAvFlags;
pub const MsvAvTimestamp = MSV1_0_AVID.MsvAvTimestamp;
pub const MsvAvRestrictions = MSV1_0_AVID.MsvAvRestrictions;
pub const MsvAvTargetName = MSV1_0_AVID.MsvAvTargetName;
pub const MsvAvChannelBindings = MSV1_0_AVID.MsvAvChannelBindings;

pub const MSV1_0_AV_PAIR = extern struct {
    AvId: u16,
    AvLen: u16,
};

pub const MSV1_0_PROTOCOL_MESSAGE_TYPE = extern enum(i32) {
    MsV1_0Lm20ChallengeRequest = 0,
    MsV1_0Lm20GetChallengeResponse = 1,
    MsV1_0EnumerateUsers = 2,
    MsV1_0GetUserInfo = 3,
    MsV1_0ReLogonUsers = 4,
    MsV1_0ChangePassword = 5,
    MsV1_0ChangeCachedPassword = 6,
    MsV1_0GenericPassthrough = 7,
    MsV1_0CacheLogon = 8,
    MsV1_0SubAuth = 9,
    MsV1_0DeriveCredential = 10,
    MsV1_0CacheLookup = 11,
    MsV1_0SetProcessOption = 12,
    MsV1_0ConfigLocalAliases = 13,
    MsV1_0ClearCachedCredentials = 14,
    MsV1_0LookupToken = 15,
    MsV1_0ValidateAuth = 16,
    MsV1_0CacheLookupEx = 17,
    MsV1_0GetCredentialKey = 18,
    MsV1_0SetThreadOption = 19,
    MsV1_0DecryptDpapiMasterKey = 20,
    MsV1_0GetStrongCredentialKey = 21,
    MsV1_0TransferCred = 22,
    MsV1_0ProvisionTbal = 23,
    MsV1_0DeleteTbalSecrets = 24,
};
pub const MsV1_0Lm20ChallengeRequest = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0Lm20ChallengeRequest;
pub const MsV1_0Lm20GetChallengeResponse = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0Lm20GetChallengeResponse;
pub const MsV1_0EnumerateUsers = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0EnumerateUsers;
pub const MsV1_0GetUserInfo = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0GetUserInfo;
pub const MsV1_0ReLogonUsers = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0ReLogonUsers;
pub const MsV1_0ChangePassword = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0ChangePassword;
pub const MsV1_0ChangeCachedPassword = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0ChangeCachedPassword;
pub const MsV1_0GenericPassthrough = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0GenericPassthrough;
pub const MsV1_0CacheLogon = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0CacheLogon;
pub const MsV1_0SubAuth = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0SubAuth;
pub const MsV1_0DeriveCredential = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0DeriveCredential;
pub const MsV1_0CacheLookup = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0CacheLookup;
pub const MsV1_0SetProcessOption = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0SetProcessOption;
pub const MsV1_0ConfigLocalAliases = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0ConfigLocalAliases;
pub const MsV1_0ClearCachedCredentials = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0ClearCachedCredentials;
pub const MsV1_0LookupToken = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0LookupToken;
pub const MsV1_0ValidateAuth = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0ValidateAuth;
pub const MsV1_0CacheLookupEx = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0CacheLookupEx;
pub const MsV1_0GetCredentialKey = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0GetCredentialKey;
pub const MsV1_0SetThreadOption = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0SetThreadOption;
pub const MsV1_0DecryptDpapiMasterKey = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0DecryptDpapiMasterKey;
pub const MsV1_0GetStrongCredentialKey = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0GetStrongCredentialKey;
pub const MsV1_0TransferCred = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0TransferCred;
pub const MsV1_0ProvisionTbal = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0ProvisionTbal;
pub const MsV1_0DeleteTbalSecrets = MSV1_0_PROTOCOL_MESSAGE_TYPE.MsV1_0DeleteTbalSecrets;

pub const MSV1_0_CHANGEPASSWORD_REQUEST = extern struct {
    MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE,
    DomainName: UNICODE_STRING,
    AccountName: UNICODE_STRING,
    OldPassword: UNICODE_STRING,
    NewPassword: UNICODE_STRING,
    Impersonating: u8,
};

pub const MSV1_0_CHANGEPASSWORD_RESPONSE = extern struct {
    MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE,
    PasswordInfoValid: u8,
    DomainPasswordInfo: DOMAIN_PASSWORD_INFORMATION,
};

pub const MSV1_0_PASSTHROUGH_REQUEST = extern struct {
    MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE,
    DomainName: UNICODE_STRING,
    PackageName: UNICODE_STRING,
    DataLength: u32,
    LogonData: *u8,
    Pad: u32,
};

pub const MSV1_0_PASSTHROUGH_RESPONSE = extern struct {
    MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE,
    Pad: u32,
    DataLength: u32,
    ValidationData: *u8,
};

pub const MSV1_0_SUBAUTH_REQUEST = extern struct {
    MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE,
    SubAuthPackageId: u32,
    SubAuthInfoLength: u32,
    SubAuthSubmitBuffer: *u8,
};

pub const MSV1_0_SUBAUTH_RESPONSE = extern struct {
    MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE,
    SubAuthInfoLength: u32,
    SubAuthReturnBuffer: *u8,
};

pub const KERB_LOGON_SUBMIT_TYPE = extern enum(i32) {
    KerbInteractiveLogon = 2,
    KerbSmartCardLogon = 6,
    KerbWorkstationUnlockLogon = 7,
    KerbSmartCardUnlockLogon = 8,
    KerbProxyLogon = 9,
    KerbTicketLogon = 10,
    KerbTicketUnlockLogon = 11,
    KerbS4ULogon = 12,
    KerbCertificateLogon = 13,
    KerbCertificateS4ULogon = 14,
    KerbCertificateUnlockLogon = 15,
    KerbNoElevationLogon = 83,
    KerbLuidLogon = 84,
};
pub const KerbInteractiveLogon = KERB_LOGON_SUBMIT_TYPE.KerbInteractiveLogon;
pub const KerbSmartCardLogon = KERB_LOGON_SUBMIT_TYPE.KerbSmartCardLogon;
pub const KerbWorkstationUnlockLogon = KERB_LOGON_SUBMIT_TYPE.KerbWorkstationUnlockLogon;
pub const KerbSmartCardUnlockLogon = KERB_LOGON_SUBMIT_TYPE.KerbSmartCardUnlockLogon;
pub const KerbProxyLogon = KERB_LOGON_SUBMIT_TYPE.KerbProxyLogon;
pub const KerbTicketLogon = KERB_LOGON_SUBMIT_TYPE.KerbTicketLogon;
pub const KerbTicketUnlockLogon = KERB_LOGON_SUBMIT_TYPE.KerbTicketUnlockLogon;
pub const KerbS4ULogon = KERB_LOGON_SUBMIT_TYPE.KerbS4ULogon;
pub const KerbCertificateLogon = KERB_LOGON_SUBMIT_TYPE.KerbCertificateLogon;
pub const KerbCertificateS4ULogon = KERB_LOGON_SUBMIT_TYPE.KerbCertificateS4ULogon;
pub const KerbCertificateUnlockLogon = KERB_LOGON_SUBMIT_TYPE.KerbCertificateUnlockLogon;
pub const KerbNoElevationLogon = KERB_LOGON_SUBMIT_TYPE.KerbNoElevationLogon;
pub const KerbLuidLogon = KERB_LOGON_SUBMIT_TYPE.KerbLuidLogon;

pub const KERB_INTERACTIVE_LOGON = extern struct {
    MessageType: KERB_LOGON_SUBMIT_TYPE,
    LogonDomainName: UNICODE_STRING,
    UserName: UNICODE_STRING,
    Password: UNICODE_STRING,
};

pub const KERB_INTERACTIVE_UNLOCK_LOGON = extern struct {
    Logon: KERB_INTERACTIVE_LOGON,
    LogonId: LUID,
};

pub const KERB_SMART_CARD_LOGON = extern struct {
    MessageType: KERB_LOGON_SUBMIT_TYPE,
    Pin: UNICODE_STRING,
    CspDataLength: u32,
    CspData: *u8,
};

pub const KERB_SMART_CARD_UNLOCK_LOGON = extern struct {
    Logon: KERB_SMART_CARD_LOGON,
    LogonId: LUID,
};

pub const KERB_CERTIFICATE_LOGON = extern struct {
    MessageType: KERB_LOGON_SUBMIT_TYPE,
    DomainName: UNICODE_STRING,
    UserName: UNICODE_STRING,
    Pin: UNICODE_STRING,
    Flags: u32,
    CspDataLength: u32,
    CspData: *u8,
};

pub const KERB_CERTIFICATE_UNLOCK_LOGON = extern struct {
    Logon: KERB_CERTIFICATE_LOGON,
    LogonId: LUID,
};

pub const KERB_CERTIFICATE_S4U_LOGON = extern struct {
    MessageType: KERB_LOGON_SUBMIT_TYPE,
    Flags: u32,
    UserPrincipalName: UNICODE_STRING,
    DomainName: UNICODE_STRING,
    CertificateLength: u32,
    Certificate: *u8,
};

pub const KERB_TICKET_LOGON = extern struct {
    MessageType: KERB_LOGON_SUBMIT_TYPE,
    Flags: u32,
    ServiceTicketLength: u32,
    TicketGrantingTicketLength: u32,
    ServiceTicket: *u8,
    TicketGrantingTicket: *u8,
};

pub const KERB_TICKET_UNLOCK_LOGON = extern struct {
    Logon: KERB_TICKET_LOGON,
    LogonId: LUID,
};

pub const KERB_S4U_LOGON = extern struct {
    MessageType: KERB_LOGON_SUBMIT_TYPE,
    Flags: u32,
    ClientUpn: UNICODE_STRING,
    ClientRealm: UNICODE_STRING,
};

pub const KERB_PROFILE_BUFFER_TYPE = extern enum(i32) {
    KerbInteractiveProfile = 2,
    KerbSmartCardProfile = 4,
    KerbTicketProfile = 6,
};
pub const KerbInteractiveProfile = KERB_PROFILE_BUFFER_TYPE.KerbInteractiveProfile;
pub const KerbSmartCardProfile = KERB_PROFILE_BUFFER_TYPE.KerbSmartCardProfile;
pub const KerbTicketProfile = KERB_PROFILE_BUFFER_TYPE.KerbTicketProfile;

pub const KERB_INTERACTIVE_PROFILE = extern struct {
    MessageType: KERB_PROFILE_BUFFER_TYPE,
    LogonCount: u16,
    BadPasswordCount: u16,
    LogonTime: LARGE_INTEGER,
    LogoffTime: LARGE_INTEGER,
    KickOffTime: LARGE_INTEGER,
    PasswordLastSet: LARGE_INTEGER,
    PasswordCanChange: LARGE_INTEGER,
    PasswordMustChange: LARGE_INTEGER,
    LogonScript: UNICODE_STRING,
    HomeDirectory: UNICODE_STRING,
    FullName: UNICODE_STRING,
    ProfilePath: UNICODE_STRING,
    HomeDirectoryDrive: UNICODE_STRING,
    LogonServer: UNICODE_STRING,
    UserFlags: u32,
};

pub const KERB_SMART_CARD_PROFILE = extern struct {
    Profile: KERB_INTERACTIVE_PROFILE,
    CertificateSize: u32,
    CertificateData: *u8,
};

pub const KERB_CRYPTO_KEY = extern struct {
    KeyType: i32,
    Length: u32,
    Value: *u8,
};

pub const KERB_CRYPTO_KEY32 = extern struct {
    KeyType: i32,
    Length: u32,
    Offset: u32,
};

pub const KERB_TICKET_PROFILE = extern struct {
    Profile: KERB_INTERACTIVE_PROFILE,
    SessionKey: KERB_CRYPTO_KEY,
};

pub const KERB_PROTOCOL_MESSAGE_TYPE = extern enum(i32) {
    KerbDebugRequestMessage = 0,
    KerbQueryTicketCacheMessage = 1,
    KerbChangeMachinePasswordMessage = 2,
    KerbVerifyPacMessage = 3,
    KerbRetrieveTicketMessage = 4,
    KerbUpdateAddressesMessage = 5,
    KerbPurgeTicketCacheMessage = 6,
    KerbChangePasswordMessage = 7,
    KerbRetrieveEncodedTicketMessage = 8,
    KerbDecryptDataMessage = 9,
    KerbAddBindingCacheEntryMessage = 10,
    KerbSetPasswordMessage = 11,
    KerbSetPasswordExMessage = 12,
    KerbVerifyCredentialsMessage = 13,
    KerbQueryTicketCacheExMessage = 14,
    KerbPurgeTicketCacheExMessage = 15,
    KerbRefreshSmartcardCredentialsMessage = 16,
    KerbAddExtraCredentialsMessage = 17,
    KerbQuerySupplementalCredentialsMessage = 18,
    KerbTransferCredentialsMessage = 19,
    KerbQueryTicketCacheEx2Message = 20,
    KerbSubmitTicketMessage = 21,
    KerbAddExtraCredentialsExMessage = 22,
    KerbQueryKdcProxyCacheMessage = 23,
    KerbPurgeKdcProxyCacheMessage = 24,
    KerbQueryTicketCacheEx3Message = 25,
    KerbCleanupMachinePkinitCredsMessage = 26,
    KerbAddBindingCacheEntryExMessage = 27,
    KerbQueryBindingCacheMessage = 28,
    KerbPurgeBindingCacheMessage = 29,
    KerbPinKdcMessage = 30,
    KerbUnpinAllKdcsMessage = 31,
    KerbQueryDomainExtendedPoliciesMessage = 32,
    KerbQueryS4U2ProxyCacheMessage = 33,
    KerbRetrieveKeyTabMessage = 34,
};
pub const KerbDebugRequestMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbDebugRequestMessage;
pub const KerbQueryTicketCacheMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbQueryTicketCacheMessage;
pub const KerbChangeMachinePasswordMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbChangeMachinePasswordMessage;
pub const KerbVerifyPacMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbVerifyPacMessage;
pub const KerbRetrieveTicketMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbRetrieveTicketMessage;
pub const KerbUpdateAddressesMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbUpdateAddressesMessage;
pub const KerbPurgeTicketCacheMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbPurgeTicketCacheMessage;
pub const KerbChangePasswordMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbChangePasswordMessage;
pub const KerbRetrieveEncodedTicketMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbRetrieveEncodedTicketMessage;
pub const KerbDecryptDataMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbDecryptDataMessage;
pub const KerbAddBindingCacheEntryMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbAddBindingCacheEntryMessage;
pub const KerbSetPasswordMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbSetPasswordMessage;
pub const KerbSetPasswordExMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbSetPasswordExMessage;
pub const KerbVerifyCredentialsMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbVerifyCredentialsMessage;
pub const KerbQueryTicketCacheExMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbQueryTicketCacheExMessage;
pub const KerbPurgeTicketCacheExMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbPurgeTicketCacheExMessage;
pub const KerbRefreshSmartcardCredentialsMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbRefreshSmartcardCredentialsMessage;
pub const KerbAddExtraCredentialsMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbAddExtraCredentialsMessage;
pub const KerbQuerySupplementalCredentialsMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbQuerySupplementalCredentialsMessage;
pub const KerbTransferCredentialsMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbTransferCredentialsMessage;
pub const KerbQueryTicketCacheEx2Message = KERB_PROTOCOL_MESSAGE_TYPE.KerbQueryTicketCacheEx2Message;
pub const KerbSubmitTicketMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbSubmitTicketMessage;
pub const KerbAddExtraCredentialsExMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbAddExtraCredentialsExMessage;
pub const KerbQueryKdcProxyCacheMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbQueryKdcProxyCacheMessage;
pub const KerbPurgeKdcProxyCacheMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbPurgeKdcProxyCacheMessage;
pub const KerbQueryTicketCacheEx3Message = KERB_PROTOCOL_MESSAGE_TYPE.KerbQueryTicketCacheEx3Message;
pub const KerbCleanupMachinePkinitCredsMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbCleanupMachinePkinitCredsMessage;
pub const KerbAddBindingCacheEntryExMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbAddBindingCacheEntryExMessage;
pub const KerbQueryBindingCacheMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbQueryBindingCacheMessage;
pub const KerbPurgeBindingCacheMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbPurgeBindingCacheMessage;
pub const KerbPinKdcMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbPinKdcMessage;
pub const KerbUnpinAllKdcsMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbUnpinAllKdcsMessage;
pub const KerbQueryDomainExtendedPoliciesMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbQueryDomainExtendedPoliciesMessage;
pub const KerbQueryS4U2ProxyCacheMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbQueryS4U2ProxyCacheMessage;
pub const KerbRetrieveKeyTabMessage = KERB_PROTOCOL_MESSAGE_TYPE.KerbRetrieveKeyTabMessage;

pub const KERB_QUERY_TKT_CACHE_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: LUID,
};

pub const KERB_TICKET_CACHE_INFO = extern struct {
    ServerName: UNICODE_STRING,
    RealmName: UNICODE_STRING,
    StartTime: LARGE_INTEGER,
    EndTime: LARGE_INTEGER,
    RenewTime: LARGE_INTEGER,
    EncryptionType: i32,
    TicketFlags: u32,
};

pub const KERB_TICKET_CACHE_INFO_EX = extern struct {
    ClientName: UNICODE_STRING,
    ClientRealm: UNICODE_STRING,
    ServerName: UNICODE_STRING,
    ServerRealm: UNICODE_STRING,
    StartTime: LARGE_INTEGER,
    EndTime: LARGE_INTEGER,
    RenewTime: LARGE_INTEGER,
    EncryptionType: i32,
    TicketFlags: u32,
};

pub const KERB_TICKET_CACHE_INFO_EX2 = extern struct {
    ClientName: UNICODE_STRING,
    ClientRealm: UNICODE_STRING,
    ServerName: UNICODE_STRING,
    ServerRealm: UNICODE_STRING,
    StartTime: LARGE_INTEGER,
    EndTime: LARGE_INTEGER,
    RenewTime: LARGE_INTEGER,
    EncryptionType: i32,
    TicketFlags: u32,
    SessionKeyType: u32,
    BranchId: u32,
};

pub const KERB_TICKET_CACHE_INFO_EX3 = extern struct {
    ClientName: UNICODE_STRING,
    ClientRealm: UNICODE_STRING,
    ServerName: UNICODE_STRING,
    ServerRealm: UNICODE_STRING,
    StartTime: LARGE_INTEGER,
    EndTime: LARGE_INTEGER,
    RenewTime: LARGE_INTEGER,
    EncryptionType: i32,
    TicketFlags: u32,
    SessionKeyType: u32,
    BranchId: u32,
    CacheFlags: u32,
    KdcCalled: UNICODE_STRING,
};

pub const KERB_QUERY_TKT_CACHE_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfTickets: u32,
    Tickets: [1]KERB_TICKET_CACHE_INFO,
};

pub const KERB_QUERY_TKT_CACHE_EX_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfTickets: u32,
    Tickets: [1]KERB_TICKET_CACHE_INFO_EX,
};

pub const KERB_QUERY_TKT_CACHE_EX2_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfTickets: u32,
    Tickets: [1]KERB_TICKET_CACHE_INFO_EX2,
};

pub const KERB_QUERY_TKT_CACHE_EX3_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfTickets: u32,
    Tickets: [1]KERB_TICKET_CACHE_INFO_EX3,
};

pub const SecHandle = extern struct {
    dwLower: ?*c_void,
    dwUpper: ?*c_void,
};

pub const KERB_AUTH_DATA = extern struct {
    Type: u32,
    Length: u32,
    Data: *u8,
};

pub const KERB_NET_ADDRESS = extern struct {
    Family: u32,
    Length: u32,
    Address: [*]u8,
};

pub const KERB_NET_ADDRESSES = extern struct {
    Number: u32,
    Addresses: [1]KERB_NET_ADDRESS,
};

pub const KERB_EXTERNAL_NAME = extern struct {
    NameType: i16,
    NameCount: u16,
    Names: [1]UNICODE_STRING,
};

pub const KERB_EXTERNAL_TICKET = extern struct {
    ServiceName: *KERB_EXTERNAL_NAME,
    TargetName: *KERB_EXTERNAL_NAME,
    ClientName: *KERB_EXTERNAL_NAME,
    DomainName: UNICODE_STRING,
    TargetDomainName: UNICODE_STRING,
    AltTargetDomainName: UNICODE_STRING,
    SessionKey: KERB_CRYPTO_KEY,
    TicketFlags: u32,
    Flags: u32,
    KeyExpirationTime: LARGE_INTEGER,
    StartTime: LARGE_INTEGER,
    EndTime: LARGE_INTEGER,
    RenewUntil: LARGE_INTEGER,
    TimeSkew: LARGE_INTEGER,
    EncodedTicketSize: u32,
    EncodedTicket: *u8,
};

pub const KERB_RETRIEVE_TKT_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: LUID,
    TargetName: UNICODE_STRING,
    TicketFlags: u32,
    CacheOptions: u32,
    EncryptionType: i32,
    CredentialsHandle: SecHandle,
};

pub const KERB_RETRIEVE_TKT_RESPONSE = extern struct {
    Ticket: KERB_EXTERNAL_TICKET,
};

pub const KERB_PURGE_TKT_CACHE_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: LUID,
    ServerName: UNICODE_STRING,
    RealmName: UNICODE_STRING,
};

pub const KERB_PURGE_TKT_CACHE_EX_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: LUID,
    Flags: u32,
    TicketTemplate: KERB_TICKET_CACHE_INFO_EX,
};

pub const KERB_SUBMIT_TKT_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: LUID,
    Flags: u32,
    Key: KERB_CRYPTO_KEY32,
    KerbCredSize: u32,
    KerbCredOffset: u32,
};

pub const KERB_QUERY_KDC_PROXY_CACHE_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    Flags: u32,
    LogonId: LUID,
};

pub const KDC_PROXY_CACHE_ENTRY_DATA = extern struct {
    SinceLastUsed: u64,
    DomainName: UNICODE_STRING,
    ProxyServerName: UNICODE_STRING,
    ProxyServerVdir: UNICODE_STRING,
    ProxyServerPort: u16,
    LogonId: LUID,
    CredUserName: UNICODE_STRING,
    CredDomainName: UNICODE_STRING,
    GlobalCache: u8,
};

pub const KERB_QUERY_KDC_PROXY_CACHE_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfEntries: u32,
    Entries: *KDC_PROXY_CACHE_ENTRY_DATA,
};

pub const KERB_PURGE_KDC_PROXY_CACHE_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    Flags: u32,
    LogonId: LUID,
};

pub const KERB_PURGE_KDC_PROXY_CACHE_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfPurged: u32,
};

pub const KERB_S4U2PROXY_CACHE_ENTRY_INFO = extern struct {
    ServerName: UNICODE_STRING,
    Flags: u32,
    LastStatus: NTSTATUS,
    Expiry: LARGE_INTEGER,
};

pub const KERB_S4U2PROXY_CRED = extern struct {
    UserName: UNICODE_STRING,
    DomainName: UNICODE_STRING,
    Flags: u32,
    LastStatus: NTSTATUS,
    Expiry: LARGE_INTEGER,
    CountOfEntries: u32,
    Entries: *KERB_S4U2PROXY_CACHE_ENTRY_INFO,
};

pub const KERB_QUERY_S4U2PROXY_CACHE_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    Flags: u32,
    LogonId: LUID,
};

pub const KERB_QUERY_S4U2PROXY_CACHE_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfCreds: u32,
    Creds: *KERB_S4U2PROXY_CRED,
};

pub const KERB_RETRIEVE_KEY_TAB_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    Flags: u32,
    UserName: UNICODE_STRING,
    DomainName: UNICODE_STRING,
    Password: UNICODE_STRING,
};

pub const KERB_RETRIEVE_KEY_TAB_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    KeyTabLength: u32,
    KeyTab: *u8,
};

pub const KERB_CHANGEPASSWORD_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    DomainName: UNICODE_STRING,
    AccountName: UNICODE_STRING,
    OldPassword: UNICODE_STRING,
    NewPassword: UNICODE_STRING,
    Impersonating: u8,
};

pub const KERB_SETPASSWORD_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: LUID,
    CredentialsHandle: SecHandle,
    Flags: u32,
    DomainName: UNICODE_STRING,
    AccountName: UNICODE_STRING,
    Password: UNICODE_STRING,
};

pub const KERB_SETPASSWORD_EX_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: LUID,
    CredentialsHandle: SecHandle,
    Flags: u32,
    AccountRealm: UNICODE_STRING,
    AccountName: UNICODE_STRING,
    Password: UNICODE_STRING,
    ClientRealm: UNICODE_STRING,
    ClientName: UNICODE_STRING,
    Impersonating: u8,
    KdcAddress: UNICODE_STRING,
    KdcAddressType: u32,
};

pub const KERB_DECRYPT_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: LUID,
    Flags: u32,
    CryptoType: i32,
    KeyUsage: i32,
    Key: KERB_CRYPTO_KEY,
    EncryptedDataSize: u32,
    InitialVectorSize: u32,
    InitialVector: *u8,
    EncryptedData: *u8,
};

pub const KERB_DECRYPT_RESPONSE = extern struct {
    DecryptedData: [1]u8,
};

pub const KERB_ADD_BINDING_CACHE_ENTRY_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    RealmName: UNICODE_STRING,
    KdcAddress: UNICODE_STRING,
    AddressType: u32,
};

pub const KERB_REFRESH_SCCRED_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    CredentialBlob: UNICODE_STRING,
    LogonId: LUID,
    Flags: u32,
};

pub const KERB_ADD_CREDENTIALS_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    UserName: UNICODE_STRING,
    DomainName: UNICODE_STRING,
    Password: UNICODE_STRING,
    LogonId: LUID,
    Flags: u32,
};

pub const KERB_ADD_CREDENTIALS_REQUEST_EX = extern struct {
    Credentials: KERB_ADD_CREDENTIALS_REQUEST,
    PrincipalNameCount: u32,
    PrincipalNames: [1]UNICODE_STRING,
};

pub const KERB_TRANSFER_CRED_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    OriginLogonId: LUID,
    DestinationLogonId: LUID,
    Flags: u32,
};

pub const KERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    LogonId: LUID,
};

pub const KERB_BINDING_CACHE_ENTRY_DATA = extern struct {
    DiscoveryTime: u64,
    RealmName: UNICODE_STRING,
    KdcAddress: UNICODE_STRING,
    AddressType: u32,
    Flags: u32,
    DcFlags: u32,
    CacheFlags: u32,
    KdcName: UNICODE_STRING,
};

pub const KERB_QUERY_BINDING_CACHE_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    CountOfEntries: u32,
    Entries: *KERB_BINDING_CACHE_ENTRY_DATA,
};

pub const KERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    RealmName: UNICODE_STRING,
    KdcAddress: UNICODE_STRING,
    AddressType: u32,
    DcFlags: u32,
};

pub const KERB_QUERY_BINDING_CACHE_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
};

pub const KERB_PURGE_BINDING_CACHE_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
};

pub const KERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    Flags: u32,
    DomainName: UNICODE_STRING,
};

pub const KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE = extern struct {
    MessageType: KERB_PROTOCOL_MESSAGE_TYPE,
    Flags: u32,
    ExtendedPolicies: u32,
    DsFlags: u32,
};

pub const KERB_CERTIFICATE_INFO_TYPE = extern enum(i32) {
    CertHashInfo = 1,
};
pub const CertHashInfo = KERB_CERTIFICATE_INFO_TYPE.CertHashInfo;

pub const KERB_CERTIFICATE_HASHINFO = extern struct {
    StoreNameLength: u16,
    HashLength: u16,
};

pub const KERB_CERTIFICATE_INFO = extern struct {
    CertInfoSize: u32,
    InfoType: u32,
};

pub const POLICY_AUDIT_SID_ARRAY = extern struct {
    UsersCount: u32,
    UserSidArray: **c_void,
};

pub const AUDIT_POLICY_INFORMATION = extern struct {
    AuditSubCategoryGuid: Guid,
    AuditingInformation: u32,
    AuditCategoryGuid: Guid,
};

pub const PKU2U_CERT_BLOB = extern struct {
    CertOffset: u32,
    CertLength: u16,
};

pub const PKU2U_CREDUI_CONTEXT = extern struct {
    Version: u64,
    cbHeaderLength: u16,
    cbStructureLength: u32,
    CertArrayCount: u16,
    CertArrayOffset: u32,
};

pub const PKU2U_LOGON_SUBMIT_TYPE = extern enum(i32) {
    Pku2uCertificateS4ULogon = 14,
};
pub const Pku2uCertificateS4ULogon = PKU2U_LOGON_SUBMIT_TYPE.Pku2uCertificateS4ULogon;

pub const PKU2U_CERTIFICATE_S4U_LOGON = extern struct {
    MessageType: PKU2U_LOGON_SUBMIT_TYPE,
    Flags: u32,
    UserPrincipalName: UNICODE_STRING,
    DomainName: UNICODE_STRING,
    CertificateLength: u32,
    Certificate: *u8,
};

pub const SecPkgInfoW = extern struct {
    fCapabilities: u32,
    wVersion: u16,
    wRPCID: u16,
    cbMaxToken: u32,
    Name: *u16,
    Comment: *u16,
};

pub const SecPkgInfoA = extern struct {
    fCapabilities: u32,
    wVersion: u16,
    wRPCID: u16,
    cbMaxToken: u32,
    Name: *i8,
    Comment: *i8,
};

pub const SecBuffer = extern struct {
    cbBuffer: u32,
    BufferType: u32,
    pvBuffer: *c_void,
};

pub const SecBufferDesc = extern struct {
    ulVersion: u32,
    cBuffers: u32,
    pBuffers: *SecBuffer,
};

pub const SEC_NEGOTIATION_INFO = extern struct {
    Size: u32,
    NameLength: u32,
    Name: *u16,
    Reserved: *c_void,
};

pub const SEC_CHANNEL_BINDINGS = extern struct {
    dwInitiatorAddrType: u32,
    cbInitiatorLength: u32,
    dwInitiatorOffset: u32,
    dwAcceptorAddrType: u32,
    cbAcceptorLength: u32,
    dwAcceptorOffset: u32,
    cbApplicationDataLength: u32,
    dwApplicationDataOffset: u32,
};

pub const SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT = extern enum(i32) {
    SecApplicationProtocolNegotiationExt_None = 0,
    SecApplicationProtocolNegotiationExt_NPN = 1,
    SecApplicationProtocolNegotiationExt_ALPN = 2,
};
pub const SecApplicationProtocolNegotiationExt_None = SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT.SecApplicationProtocolNegotiationExt_None;
pub const SecApplicationProtocolNegotiationExt_NPN = SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT.SecApplicationProtocolNegotiationExt_NPN;
pub const SecApplicationProtocolNegotiationExt_ALPN = SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT.SecApplicationProtocolNegotiationExt_ALPN;

pub const SEC_APPLICATION_PROTOCOL_LIST = extern struct {
    ProtoNegoExt: SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT,
    ProtocolListSize: u16,
    ProtocolList: [1]u8,
};

pub const SEC_APPLICATION_PROTOCOLS = extern struct {
    ProtocolListsSize: u32,
    ProtocolLists: [1]SEC_APPLICATION_PROTOCOL_LIST,
};

pub const SEC_SRTP_PROTECTION_PROFILES = extern struct {
    ProfilesSize: u16,
    ProfilesList: [1]u16,
};

pub const SEC_SRTP_MASTER_KEY_IDENTIFIER = extern struct {
    MasterKeyIdentifierSize: u8,
    MasterKeyIdentifier: [1]u8,
};

pub const SEC_TOKEN_BINDING = extern struct {
    MajorVersion: u8,
    MinorVersion: u8,
    KeyParametersSize: u16,
    KeyParameters: [1]u8,
};

pub const SEC_PRESHAREDKEY = extern struct {
    KeySize: u16,
    Key: [1]u8,
};

pub const SEC_PRESHAREDKEY_IDENTITY = extern struct {
    KeyIdentitySize: u16,
    KeyIdentity: [1]u8,
};

pub const SEC_DTLS_MTU = extern struct {
    PathMTU: u16,
};

pub const SEC_FLAGS = extern struct {
    Flags: u64,
};

pub const SEC_TRAFFIC_SECRET_TYPE = extern enum(i32) {
    SecTrafficSecret_None = 0,
    SecTrafficSecret_Client = 1,
    SecTrafficSecret_Server = 2,
};
pub const SecTrafficSecret_None = SEC_TRAFFIC_SECRET_TYPE.SecTrafficSecret_None;
pub const SecTrafficSecret_Client = SEC_TRAFFIC_SECRET_TYPE.SecTrafficSecret_Client;
pub const SecTrafficSecret_Server = SEC_TRAFFIC_SECRET_TYPE.SecTrafficSecret_Server;

pub const SEC_TRAFFIC_SECRETS = extern struct {
    SymmetricAlgId: [64]u16,
    ChainingMode: [64]u16,
    HashAlgId: [64]u16,
    KeySize: u16,
    IvSize: u16,
    MsgSequenceStart: u16,
    MsgSequenceEnd: u16,
    TrafficSecretType: SEC_TRAFFIC_SECRET_TYPE,
    TrafficSecretSize: u16,
    TrafficSecret: [1]u8,
};

pub const SecPkgCredentials_NamesW = extern struct {
    sUserName: *u16,
};

pub const SecPkgCredentials_NamesA = extern struct {
    sUserName: *i8,
};

pub const SecPkgCredentials_SSIProviderW = extern struct {
    sProviderName: *u16,
    ProviderInfoLength: u32,
    ProviderInfo: *i8,
};

pub const SecPkgCredentials_SSIProviderA = extern struct {
    sProviderName: *i8,
    ProviderInfoLength: u32,
    ProviderInfo: *i8,
};

pub const SecPkgCredentials_KdcProxySettingsW = extern struct {
    Version: u32,
    Flags: u32,
    ProxyServerOffset: u16,
    ProxyServerLength: u16,
    ClientTlsCredOffset: u16,
    ClientTlsCredLength: u16,
};

pub const SecPkgCredentials_Cert = extern struct {
    EncodedCertSize: u32,
    EncodedCert: *u8,
};

pub const SecPkgContext_SubjectAttributes = extern struct {
    AttributeInfo: *c_void,
};

pub const SECPKG_CRED_CLASS = extern enum(i32) {
    SecPkgCredClass_None = 0,
    SecPkgCredClass_Ephemeral = 10,
    SecPkgCredClass_PersistedGeneric = 20,
    SecPkgCredClass_PersistedSpecific = 30,
    SecPkgCredClass_Explicit = 40,
};
pub const SecPkgCredClass_None = SECPKG_CRED_CLASS.SecPkgCredClass_None;
pub const SecPkgCredClass_Ephemeral = SECPKG_CRED_CLASS.SecPkgCredClass_Ephemeral;
pub const SecPkgCredClass_PersistedGeneric = SECPKG_CRED_CLASS.SecPkgCredClass_PersistedGeneric;
pub const SecPkgCredClass_PersistedSpecific = SECPKG_CRED_CLASS.SecPkgCredClass_PersistedSpecific;
pub const SecPkgCredClass_Explicit = SECPKG_CRED_CLASS.SecPkgCredClass_Explicit;

pub const SecPkgContext_CredInfo = extern struct {
    CredClass: SECPKG_CRED_CLASS,
    IsPromptingNeeded: u32,
};

pub const SecPkgContext_NegoPackageInfo = extern struct {
    PackageMask: u32,
};

pub const SecPkgContext_NegoStatus = extern struct {
    LastStatus: u32,
};

pub const SecPkgContext_Sizes = extern struct {
    cbMaxToken: u32,
    cbMaxSignature: u32,
    cbBlockSize: u32,
    cbSecurityTrailer: u32,
};

pub const SecPkgContext_StreamSizes = extern struct {
    cbHeader: u32,
    cbTrailer: u32,
    cbMaximumMessage: u32,
    cBuffers: u32,
    cbBlockSize: u32,
};

pub const SecPkgContext_NamesW = extern struct {
    sUserName: *u16,
};

pub const SECPKG_ATTR_LCT_STATUS = extern enum(i32) {
    SecPkgAttrLastClientTokenYes = 0,
    SecPkgAttrLastClientTokenNo = 1,
    SecPkgAttrLastClientTokenMaybe = 2,
};
pub const SecPkgAttrLastClientTokenYes = SECPKG_ATTR_LCT_STATUS.SecPkgAttrLastClientTokenYes;
pub const SecPkgAttrLastClientTokenNo = SECPKG_ATTR_LCT_STATUS.SecPkgAttrLastClientTokenNo;
pub const SecPkgAttrLastClientTokenMaybe = SECPKG_ATTR_LCT_STATUS.SecPkgAttrLastClientTokenMaybe;

pub const SecPkgContext_LastClientTokenStatus = extern struct {
    LastClientTokenStatus: SECPKG_ATTR_LCT_STATUS,
};

pub const SecPkgContext_NamesA = extern struct {
    sUserName: *i8,
};

pub const SecPkgContext_Lifespan = extern struct {
    tsStart: LARGE_INTEGER,
    tsExpiry: LARGE_INTEGER,
};

pub const SecPkgContext_DceInfo = extern struct {
    AuthzSvc: u32,
    pPac: *c_void,
};

pub const SecPkgContext_KeyInfoA = extern struct {
    sSignatureAlgorithmName: *i8,
    sEncryptAlgorithmName: *i8,
    KeySize: u32,
    SignatureAlgorithm: u32,
    EncryptAlgorithm: u32,
};

pub const SecPkgContext_KeyInfoW = extern struct {
    sSignatureAlgorithmName: *u16,
    sEncryptAlgorithmName: *u16,
    KeySize: u32,
    SignatureAlgorithm: u32,
    EncryptAlgorithm: u32,
};

pub const SecPkgContext_AuthorityA = extern struct {
    sAuthorityName: *i8,
};

pub const SecPkgContext_AuthorityW = extern struct {
    sAuthorityName: *u16,
};

pub const SecPkgContext_ProtoInfoA = extern struct {
    sProtocolName: *i8,
    majorVersion: u32,
    minorVersion: u32,
};

pub const SecPkgContext_ProtoInfoW = extern struct {
    sProtocolName: *u16,
    majorVersion: u32,
    minorVersion: u32,
};

pub const SecPkgContext_PasswordExpiry = extern struct {
    tsPasswordExpires: LARGE_INTEGER,
};

pub const SecPkgContext_LogoffTime = extern struct {
    tsLogoffTime: LARGE_INTEGER,
};

pub const SecPkgContext_SessionKey = extern struct {
    SessionKeyLength: u32,
    SessionKey: *u8,
};

pub const SecPkgContext_NegoKeys = extern struct {
    KeyType: u32,
    KeyLength: u16,
    KeyValue: *u8,
    VerifyKeyType: u32,
    VerifyKeyLength: u16,
    VerifyKeyValue: *u8,
};

pub const SecPkgContext_PackageInfoW = extern struct {
    PackageInfo: *SecPkgInfoW,
};

pub const SecPkgContext_PackageInfoA = extern struct {
    PackageInfo: *SecPkgInfoA,
};

pub const SecPkgContext_UserFlags = extern struct {
    UserFlags: u32,
};

pub const SecPkgContext_Flags = extern struct {
    Flags: u32,
};

pub const SecPkgContext_NegotiationInfoA = extern struct {
    PackageInfo: *SecPkgInfoA,
    NegotiationState: u32,
};

pub const SecPkgContext_NegotiationInfoW = extern struct {
    PackageInfo: *SecPkgInfoW,
    NegotiationState: u32,
};

pub const SecPkgContext_NativeNamesW = extern struct {
    sClientName: *u16,
    sServerName: *u16,
};

pub const SecPkgContext_NativeNamesA = extern struct {
    sClientName: *i8,
    sServerName: *i8,
};

pub const SecPkgContext_CredentialNameW = extern struct {
    CredentialType: u32,
    sCredentialName: *u16,
};

pub const SecPkgContext_CredentialNameA = extern struct {
    CredentialType: u32,
    sCredentialName: *i8,
};

pub const SecPkgContext_AccessToken = extern struct {
    AccessToken: *c_void,
};

pub const SecPkgContext_TargetInformation = extern struct {
    MarshalledTargetInfoLength: u32,
    MarshalledTargetInfo: *u8,
};

pub const SecPkgContext_AuthzID = extern struct {
    AuthzIDLength: u32,
    AuthzID: *i8,
};

pub const SecPkgContext_Target = extern struct {
    TargetLength: u32,
    Target: *i8,
};

pub const SecPkgContext_ClientSpecifiedTarget = extern struct {
    sTargetName: *u16,
};

pub const SecPkgContext_Bindings = extern struct {
    BindingsLength: u32,
    Bindings: *SEC_CHANNEL_BINDINGS,
};

pub const SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS = extern enum(i32) {
    SecApplicationProtocolNegotiationStatus_None = 0,
    SecApplicationProtocolNegotiationStatus_Success = 1,
    SecApplicationProtocolNegotiationStatus_SelectedClientOnly = 2,
};
pub const SecApplicationProtocolNegotiationStatus_None = SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS.SecApplicationProtocolNegotiationStatus_None;
pub const SecApplicationProtocolNegotiationStatus_Success = SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS.SecApplicationProtocolNegotiationStatus_Success;
pub const SecApplicationProtocolNegotiationStatus_SelectedClientOnly = SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS.SecApplicationProtocolNegotiationStatus_SelectedClientOnly;

pub const SecPkgContext_ApplicationProtocol = extern struct {
    ProtoNegoStatus: SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS,
    ProtoNegoExt: SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT,
    ProtocolIdSize: u8,
    ProtocolId: [255]u8,
};

pub const SecPkgContext_NegotiatedTlsExtensions = extern struct {
    ExtensionsCount: u32,
    Extensions: *u16,
};

pub const SECPKG_APP_MODE_INFO = extern struct {
    UserFunction: u32,
    Argument1: ?*c_void,
    Argument2: ?*c_void,
    UserData: SecBuffer,
    ReturnToLsa: u8,
};

pub const SEC_GET_KEY_FN = fn(
    Arg: *c_void,
    Principal: *c_void,
    KeyVer: u32,
    Key: **c_void,
    Status: *i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const ACQUIRE_CREDENTIALS_HANDLE_FN_W = fn(
    param0: *u16,
    param1: *u16,
    param2: u32,
    param3: *c_void,
    param4: *c_void,
    param5: SEC_GET_KEY_FN,
    param6: *c_void,
    param7: *SecHandle,
    param8: *LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const ACQUIRE_CREDENTIALS_HANDLE_FN_A = fn(
    param0: *i8,
    param1: *i8,
    param2: u32,
    param3: *c_void,
    param4: *c_void,
    param5: SEC_GET_KEY_FN,
    param6: *c_void,
    param7: *SecHandle,
    param8: *LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const FREE_CREDENTIALS_HANDLE_FN = fn(
    param0: *SecHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const ADD_CREDENTIALS_FN_W = fn(
    param0: *SecHandle,
    param1: *u16,
    param2: *u16,
    param3: u32,
    param4: *c_void,
    param5: SEC_GET_KEY_FN,
    param6: *c_void,
    param7: *LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const ADD_CREDENTIALS_FN_A = fn(
    param0: *SecHandle,
    param1: *i8,
    param2: *i8,
    param3: u32,
    param4: *c_void,
    param5: SEC_GET_KEY_FN,
    param6: *c_void,
    param7: *LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const CHANGE_PASSWORD_FN_W = fn(
    param0: *u16,
    param1: *u16,
    param2: *u16,
    param3: *u16,
    param4: *u16,
    param5: u8,
    param6: u32,
    param7: *SecBufferDesc,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const CHANGE_PASSWORD_FN_A = fn(
    param0: *i8,
    param1: *i8,
    param2: *i8,
    param3: *i8,
    param4: *i8,
    param5: u8,
    param6: u32,
    param7: *SecBufferDesc,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const INITIALIZE_SECURITY_CONTEXT_FN_W = fn(
    param0: *SecHandle,
    param1: *SecHandle,
    param2: *u16,
    param3: u32,
    param4: u32,
    param5: u32,
    param6: *SecBufferDesc,
    param7: u32,
    param8: *SecHandle,
    param9: *SecBufferDesc,
    param10: *u32,
    param11: *LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const INITIALIZE_SECURITY_CONTEXT_FN_A = fn(
    param0: *SecHandle,
    param1: *SecHandle,
    param2: *i8,
    param3: u32,
    param4: u32,
    param5: u32,
    param6: *SecBufferDesc,
    param7: u32,
    param8: *SecHandle,
    param9: *SecBufferDesc,
    param10: *u32,
    param11: *LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const ACCEPT_SECURITY_CONTEXT_FN = fn(
    param0: *SecHandle,
    param1: *SecHandle,
    param2: *SecBufferDesc,
    param3: u32,
    param4: u32,
    param5: *SecHandle,
    param6: *SecBufferDesc,
    param7: *u32,
    param8: *LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const COMPLETE_AUTH_TOKEN_FN = fn(
    param0: *SecHandle,
    param1: *SecBufferDesc,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const IMPERSONATE_SECURITY_CONTEXT_FN = fn(
    param0: *SecHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const REVERT_SECURITY_CONTEXT_FN = fn(
    param0: *SecHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const QUERY_SECURITY_CONTEXT_TOKEN_FN = fn(
    param0: *SecHandle,
    param1: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const DELETE_SECURITY_CONTEXT_FN = fn(
    param0: *SecHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const APPLY_CONTROL_TOKEN_FN = fn(
    param0: *SecHandle,
    param1: *SecBufferDesc,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const QUERY_CONTEXT_ATTRIBUTES_FN_W = fn(
    param0: *SecHandle,
    param1: u32,
    param2: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const QUERY_CONTEXT_ATTRIBUTES_EX_FN_W = fn(
    param0: *SecHandle,
    param1: u32,
    param2: *c_void,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const QUERY_CONTEXT_ATTRIBUTES_FN_A = fn(
    param0: *SecHandle,
    param1: u32,
    param2: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const QUERY_CONTEXT_ATTRIBUTES_EX_FN_A = fn(
    param0: *SecHandle,
    param1: u32,
    param2: *c_void,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const SET_CONTEXT_ATTRIBUTES_FN_W = fn(
    param0: *SecHandle,
    param1: u32,
    param2: *c_void,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const SET_CONTEXT_ATTRIBUTES_FN_A = fn(
    param0: *SecHandle,
    param1: u32,
    param2: *c_void,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const QUERY_CREDENTIALS_ATTRIBUTES_FN_W = fn(
    param0: *SecHandle,
    param1: u32,
    param2: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W = fn(
    param0: *SecHandle,
    param1: u32,
    param2: *c_void,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const QUERY_CREDENTIALS_ATTRIBUTES_FN_A = fn(
    param0: *SecHandle,
    param1: u32,
    param2: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_A = fn(
    param0: *SecHandle,
    param1: u32,
    param2: *c_void,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const SET_CREDENTIALS_ATTRIBUTES_FN_W = fn(
    param0: *SecHandle,
    param1: u32,
    param2: *c_void,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const SET_CREDENTIALS_ATTRIBUTES_FN_A = fn(
    param0: *SecHandle,
    param1: u32,
    param2: *c_void,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const FREE_CONTEXT_BUFFER_FN = fn(
    param0: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const MAKE_SIGNATURE_FN = fn(
    param0: *SecHandle,
    param1: u32,
    param2: *SecBufferDesc,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const VERIFY_SIGNATURE_FN = fn(
    param0: *SecHandle,
    param1: *SecBufferDesc,
    param2: u32,
    param3: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const ENCRYPT_MESSAGE_FN = fn(
    param0: *SecHandle,
    param1: u32,
    param2: *SecBufferDesc,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const DECRYPT_MESSAGE_FN = fn(
    param0: *SecHandle,
    param1: *SecBufferDesc,
    param2: u32,
    param3: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const ENUMERATE_SECURITY_PACKAGES_FN_W = fn(
    param0: *u32,
    param1: **SecPkgInfoW,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const ENUMERATE_SECURITY_PACKAGES_FN_A = fn(
    param0: *u32,
    param1: **SecPkgInfoA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const QUERY_SECURITY_PACKAGE_INFO_FN_W = fn(
    param0: *u16,
    param1: **SecPkgInfoW,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const QUERY_SECURITY_PACKAGE_INFO_FN_A = fn(
    param0: *i8,
    param1: **SecPkgInfoA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const SecDelegationType = extern enum(i32) {
    SecFull = 0,
    SecService = 1,
    SecTree = 2,
    SecDirectory = 3,
    SecObject = 4,
};
pub const SecFull = SecDelegationType.SecFull;
pub const SecService = SecDelegationType.SecService;
pub const SecTree = SecDelegationType.SecTree;
pub const SecDirectory = SecDelegationType.SecDirectory;
pub const SecObject = SecDelegationType.SecObject;

pub const EXPORT_SECURITY_CONTEXT_FN = fn(
    param0: *SecHandle,
    param1: u32,
    param2: *SecBuffer,
    param3: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const IMPORT_SECURITY_CONTEXT_FN_W = fn(
    param0: *u16,
    param1: *SecBuffer,
    param2: *c_void,
    param3: *SecHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const IMPORT_SECURITY_CONTEXT_FN_A = fn(
    param0: *i8,
    param1: *SecBuffer,
    param2: *c_void,
    param3: *SecHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const SecurityFunctionTableW = extern struct {
    dwVersion: u32,
    EnumerateSecurityPackagesW: ENUMERATE_SECURITY_PACKAGES_FN_W,
    QueryCredentialsAttributesW: QUERY_CREDENTIALS_ATTRIBUTES_FN_W,
    AcquireCredentialsHandleW: ACQUIRE_CREDENTIALS_HANDLE_FN_W,
    FreeCredentialsHandle: FREE_CREDENTIALS_HANDLE_FN,
    Reserved2: *c_void,
    InitializeSecurityContextW: INITIALIZE_SECURITY_CONTEXT_FN_W,
    AcceptSecurityContext: ACCEPT_SECURITY_CONTEXT_FN,
    CompleteAuthToken: COMPLETE_AUTH_TOKEN_FN,
    DeleteSecurityContext: DELETE_SECURITY_CONTEXT_FN,
    ApplyControlToken: APPLY_CONTROL_TOKEN_FN,
    QueryContextAttributesW: QUERY_CONTEXT_ATTRIBUTES_FN_W,
    ImpersonateSecurityContext: IMPERSONATE_SECURITY_CONTEXT_FN,
    RevertSecurityContext: REVERT_SECURITY_CONTEXT_FN,
    MakeSignature: MAKE_SIGNATURE_FN,
    VerifySignature: VERIFY_SIGNATURE_FN,
    FreeContextBuffer: FREE_CONTEXT_BUFFER_FN,
    QuerySecurityPackageInfoW: QUERY_SECURITY_PACKAGE_INFO_FN_W,
    Reserved3: *c_void,
    Reserved4: *c_void,
    ExportSecurityContext: EXPORT_SECURITY_CONTEXT_FN,
    ImportSecurityContextW: IMPORT_SECURITY_CONTEXT_FN_W,
    AddCredentialsW: ADD_CREDENTIALS_FN_W,
    Reserved8: *c_void,
    QuerySecurityContextToken: QUERY_SECURITY_CONTEXT_TOKEN_FN,
    EncryptMessage: ENCRYPT_MESSAGE_FN,
    DecryptMessage: DECRYPT_MESSAGE_FN,
    SetContextAttributesW: SET_CONTEXT_ATTRIBUTES_FN_W,
    SetCredentialsAttributesW: SET_CREDENTIALS_ATTRIBUTES_FN_W,
    ChangeAccountPasswordW: CHANGE_PASSWORD_FN_W,
    QueryContextAttributesExW: QUERY_CONTEXT_ATTRIBUTES_EX_FN_W,
    QueryCredentialsAttributesExW: QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W,
};

pub const SecurityFunctionTableA = extern struct {
    dwVersion: u32,
    EnumerateSecurityPackagesA: ENUMERATE_SECURITY_PACKAGES_FN_A,
    QueryCredentialsAttributesA: QUERY_CREDENTIALS_ATTRIBUTES_FN_A,
    AcquireCredentialsHandleA: ACQUIRE_CREDENTIALS_HANDLE_FN_A,
    FreeCredentialsHandle: FREE_CREDENTIALS_HANDLE_FN,
    Reserved2: *c_void,
    InitializeSecurityContextA: INITIALIZE_SECURITY_CONTEXT_FN_A,
    AcceptSecurityContext: ACCEPT_SECURITY_CONTEXT_FN,
    CompleteAuthToken: COMPLETE_AUTH_TOKEN_FN,
    DeleteSecurityContext: DELETE_SECURITY_CONTEXT_FN,
    ApplyControlToken: APPLY_CONTROL_TOKEN_FN,
    QueryContextAttributesA: QUERY_CONTEXT_ATTRIBUTES_FN_A,
    ImpersonateSecurityContext: IMPERSONATE_SECURITY_CONTEXT_FN,
    RevertSecurityContext: REVERT_SECURITY_CONTEXT_FN,
    MakeSignature: MAKE_SIGNATURE_FN,
    VerifySignature: VERIFY_SIGNATURE_FN,
    FreeContextBuffer: FREE_CONTEXT_BUFFER_FN,
    QuerySecurityPackageInfoA: QUERY_SECURITY_PACKAGE_INFO_FN_A,
    Reserved3: *c_void,
    Reserved4: *c_void,
    ExportSecurityContext: EXPORT_SECURITY_CONTEXT_FN,
    ImportSecurityContextA: IMPORT_SECURITY_CONTEXT_FN_A,
    AddCredentialsA: ADD_CREDENTIALS_FN_A,
    Reserved8: *c_void,
    QuerySecurityContextToken: QUERY_SECURITY_CONTEXT_TOKEN_FN,
    EncryptMessage: ENCRYPT_MESSAGE_FN,
    DecryptMessage: DECRYPT_MESSAGE_FN,
    SetContextAttributesA: SET_CONTEXT_ATTRIBUTES_FN_A,
    SetCredentialsAttributesA: SET_CREDENTIALS_ATTRIBUTES_FN_A,
    ChangeAccountPasswordA: CHANGE_PASSWORD_FN_A,
    QueryContextAttributesExA: QUERY_CONTEXT_ATTRIBUTES_EX_FN_A,
    QueryCredentialsAttributesExA: QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_A,
};

pub const INIT_SECURITY_INTERFACE_A = fn(
) callconv(@import("std").os.windows.WINAPI) *SecurityFunctionTableA;

pub const INIT_SECURITY_INTERFACE_W = fn(
) callconv(@import("std").os.windows.WINAPI) *SecurityFunctionTableW;

pub const SASL_AUTHZID_STATE = extern enum(i32) {
    Sasl_AuthZIDForbidden = 0,
    Sasl_AuthZIDProcessed = 1,
};
pub const Sasl_AuthZIDForbidden = SASL_AUTHZID_STATE.Sasl_AuthZIDForbidden;
pub const Sasl_AuthZIDProcessed = SASL_AUTHZID_STATE.Sasl_AuthZIDProcessed;

pub const SEC_WINNT_AUTH_IDENTITY_EX2 = extern struct {
    Version: u32,
    cbHeaderLength: u16,
    cbStructureLength: u32,
    UserOffset: u32,
    UserLength: u16,
    DomainOffset: u32,
    DomainLength: u16,
    PackedCredentialsOffset: u32,
    PackedCredentialsLength: u16,
    Flags: u32,
    PackageListOffset: u32,
    PackageListLength: u16,
};

pub const SEC_WINNT_AUTH_IDENTITY_EXW = extern struct {
    Version: u32,
    Length: u32,
    User: *u16,
    UserLength: u32,
    Domain: *u16,
    DomainLength: u32,
    Password: *u16,
    PasswordLength: u32,
    Flags: u32,
    PackageList: *u16,
    PackageListLength: u32,
};

pub const SEC_WINNT_AUTH_IDENTITY_EXA = extern struct {
    Version: u32,
    Length: u32,
    User: *u8,
    UserLength: u32,
    Domain: *u8,
    DomainLength: u32,
    Password: *u8,
    PasswordLength: u32,
    Flags: u32,
    PackageList: *u8,
    PackageListLength: u32,
};

pub const SEC_WINNT_AUTH_IDENTITY_INFO = u32; // TODO: implement StructOrUnion types?

pub const SECURITY_PACKAGE_OPTIONS = extern struct {
    Size: u32,
    Type: u32,
    Flags: u32,
    SignatureSize: u32,
    Signature: *c_void,
};

pub const CREDENTIAL_ATTRIBUTEA = extern struct {
    Keyword: PSTR,
    Flags: u32,
    ValueSize: u32,
    Value: *u8,
};

pub const CREDENTIAL_ATTRIBUTEW = extern struct {
    Keyword: PWSTR,
    Flags: u32,
    ValueSize: u32,
    Value: *u8,
};

pub const CREDENTIALA = extern struct {
    Flags: u32,
    Type: u32,
    TargetName: PSTR,
    Comment: PSTR,
    LastWritten: FILETIME,
    CredentialBlobSize: u32,
    CredentialBlob: *u8,
    Persist: u32,
    AttributeCount: u32,
    Attributes: *CREDENTIAL_ATTRIBUTEA,
    TargetAlias: PSTR,
    UserName: PSTR,
};

pub const CREDENTIALW = extern struct {
    Flags: u32,
    Type: u32,
    TargetName: PWSTR,
    Comment: PWSTR,
    LastWritten: FILETIME,
    CredentialBlobSize: u32,
    CredentialBlob: *u8,
    Persist: u32,
    AttributeCount: u32,
    Attributes: *CREDENTIAL_ATTRIBUTEW,
    TargetAlias: PWSTR,
    UserName: PWSTR,
};

pub const CREDENTIAL_TARGET_INFORMATIONA = extern struct {
    TargetName: PSTR,
    NetbiosServerName: PSTR,
    DnsServerName: PSTR,
    NetbiosDomainName: PSTR,
    DnsDomainName: PSTR,
    DnsTreeName: PSTR,
    PackageName: PSTR,
    Flags: u32,
    CredTypeCount: u32,
    CredTypes: *u32,
};

pub const CREDENTIAL_TARGET_INFORMATIONW = extern struct {
    TargetName: PWSTR,
    NetbiosServerName: PWSTR,
    DnsServerName: PWSTR,
    NetbiosDomainName: PWSTR,
    DnsDomainName: PWSTR,
    DnsTreeName: PWSTR,
    PackageName: PWSTR,
    Flags: u32,
    CredTypeCount: u32,
    CredTypes: *u32,
};

pub const CERT_CREDENTIAL_INFO = extern struct {
    cbSize: u32,
    rgbHashOfCert: [20]u8,
};

pub const USERNAME_TARGET_CREDENTIAL_INFO = extern struct {
    UserName: PWSTR,
};

pub const BINARY_BLOB_CREDENTIAL_INFO = extern struct {
    cbBlob: u32,
    pbBlob: *u8,
};

pub const CRED_MARSHAL_TYPE = extern enum(i32) {
    CertCredential = 1,
    UsernameTargetCredential = 2,
    BinaryBlobCredential = 3,
    UsernameForPackedCredentials = 4,
    BinaryBlobForSystem = 5,
};
pub const CertCredential = CRED_MARSHAL_TYPE.CertCredential;
pub const UsernameTargetCredential = CRED_MARSHAL_TYPE.UsernameTargetCredential;
pub const BinaryBlobCredential = CRED_MARSHAL_TYPE.BinaryBlobCredential;
pub const UsernameForPackedCredentials = CRED_MARSHAL_TYPE.UsernameForPackedCredentials;
pub const BinaryBlobForSystem = CRED_MARSHAL_TYPE.BinaryBlobForSystem;

pub const CRED_PROTECTION_TYPE = extern enum(i32) {
    CredUnprotected = 0,
    CredUserProtection = 1,
    CredTrustedProtection = 2,
    CredForSystemProtection = 3,
};
pub const CredUnprotected = CRED_PROTECTION_TYPE.CredUnprotected;
pub const CredUserProtection = CRED_PROTECTION_TYPE.CredUserProtection;
pub const CredTrustedProtection = CRED_PROTECTION_TYPE.CredTrustedProtection;
pub const CredForSystemProtection = CRED_PROTECTION_TYPE.CredForSystemProtection;

pub const CREDUI_INFOA = extern struct {
    cbSize: u32,
    hwndParent: HWND,
    pszMessageText: [*:0]const u8,
    pszCaptionText: [*:0]const u8,
    hbmBanner: HBITMAP,
};

pub const CREDUI_INFOW = extern struct {
    cbSize: u32,
    hwndParent: HWND,
    pszMessageText: [*:0]const u16,
    pszCaptionText: [*:0]const u16,
    hbmBanner: HBITMAP,
};

pub const LSA_TOKEN_INFORMATION_TYPE = extern enum(i32) {
    LsaTokenInformationNull = 0,
    LsaTokenInformationV1 = 1,
    LsaTokenInformationV2 = 2,
    LsaTokenInformationV3 = 3,
};
pub const LsaTokenInformationNull = LSA_TOKEN_INFORMATION_TYPE.LsaTokenInformationNull;
pub const LsaTokenInformationV1 = LSA_TOKEN_INFORMATION_TYPE.LsaTokenInformationV1;
pub const LsaTokenInformationV2 = LSA_TOKEN_INFORMATION_TYPE.LsaTokenInformationV2;
pub const LsaTokenInformationV3 = LSA_TOKEN_INFORMATION_TYPE.LsaTokenInformationV3;

pub const LSA_TOKEN_INFORMATION_NULL = extern struct {
    ExpirationTime: LARGE_INTEGER,
    Groups: *TOKEN_GROUPS,
};

pub const LSA_TOKEN_INFORMATION_V1 = extern struct {
    ExpirationTime: LARGE_INTEGER,
    User: TOKEN_USER,
    Groups: *TOKEN_GROUPS,
    PrimaryGroup: TOKEN_PRIMARY_GROUP,
    Privileges: *TOKEN_PRIVILEGES,
    Owner: TOKEN_OWNER,
    DefaultDacl: TOKEN_DEFAULT_DACL,
};

pub const LSA_TOKEN_INFORMATION_V3 = extern struct {
    ExpirationTime: LARGE_INTEGER,
    User: TOKEN_USER,
    Groups: *TOKEN_GROUPS,
    PrimaryGroup: TOKEN_PRIMARY_GROUP,
    Privileges: *TOKEN_PRIVILEGES,
    Owner: TOKEN_OWNER,
    DefaultDacl: TOKEN_DEFAULT_DACL,
    UserClaims: TOKEN_USER_CLAIMS,
    DeviceClaims: TOKEN_DEVICE_CLAIMS,
    DeviceGroups: *TOKEN_GROUPS,
};

pub const LSA_CREATE_LOGON_SESSION = fn(
    LogonId: *LUID,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_DELETE_LOGON_SESSION = fn(
    LogonId: *LUID,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_ADD_CREDENTIAL = fn(
    LogonId: *LUID,
    AuthenticationPackage: u32,
    PrimaryKeyValue: *STRING,
    Credentials: *STRING,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_GET_CREDENTIALS = fn(
    LogonId: *LUID,
    AuthenticationPackage: u32,
    QueryContext: *u32,
    RetrieveAllCredentials: u8,
    PrimaryKeyValue: *STRING,
    PrimaryKeyLength: *u32,
    Credentials: *STRING,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_DELETE_CREDENTIAL = fn(
    LogonId: *LUID,
    AuthenticationPackage: u32,
    PrimaryKeyValue: *STRING,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_ALLOCATE_LSA_HEAP = fn(
    Length: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const LSA_FREE_LSA_HEAP = fn(
    Base: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LSA_ALLOCATE_PRIVATE_HEAP = fn(
    Length: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const LSA_FREE_PRIVATE_HEAP = fn(
    Base: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LSA_ALLOCATE_CLIENT_BUFFER = fn(
    ClientRequest: **c_void,
    LengthRequired: u32,
    ClientBaseAddress: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_FREE_CLIENT_BUFFER = fn(
    ClientRequest: **c_void,
    ClientBaseAddress: *c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_COPY_TO_CLIENT_BUFFER = fn(
    ClientRequest: **c_void,
    Length: u32,
    ClientBaseAddress: [*]u8,
    BufferToCopy: [*]u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_COPY_FROM_CLIENT_BUFFER = fn(
    ClientRequest: **c_void,
    Length: u32,
    BufferToCopy: [*]u8,
    ClientBaseAddress: [*]u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_CREATE_LOGON_SESSION = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_DELETE_LOGON_SESSION = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_ADD_CREDENTIAL = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_GET_CREDENTIALS = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_DELETE_CREDENTIAL = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_ALLOCATE_LSA_HEAP = fn(
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const PLSA_FREE_LSA_HEAP = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const PLSA_ALLOCATE_PRIVATE_HEAP = fn(
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const PLSA_FREE_PRIVATE_HEAP = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const PLSA_ALLOCATE_CLIENT_BUFFER = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_FREE_CLIENT_BUFFER = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_COPY_TO_CLIENT_BUFFER = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_COPY_FROM_CLIENT_BUFFER = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_DISPATCH_TABLE = extern struct {
    CreateLogonSession: PLSA_CREATE_LOGON_SESSION,
    DeleteLogonSession: PLSA_DELETE_LOGON_SESSION,
    AddCredential: PLSA_ADD_CREDENTIAL,
    GetCredentials: PLSA_GET_CREDENTIALS,
    DeleteCredential: PLSA_DELETE_CREDENTIAL,
    AllocateLsaHeap: PLSA_ALLOCATE_LSA_HEAP,
    FreeLsaHeap: PLSA_FREE_LSA_HEAP,
    AllocateClientBuffer: PLSA_ALLOCATE_CLIENT_BUFFER,
    FreeClientBuffer: PLSA_FREE_CLIENT_BUFFER,
    CopyToClientBuffer: PLSA_COPY_TO_CLIENT_BUFFER,
    CopyFromClientBuffer: PLSA_COPY_FROM_CLIENT_BUFFER,
};

pub const LSA_AP_INITIALIZE_PACKAGE = fn(
    AuthenticationPackageId: u32,
    LsaDispatchTable: *LSA_DISPATCH_TABLE,
    Database: ?*STRING,
    Confidentiality: ?*STRING,
    AuthenticationPackageName: **STRING,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_AP_LOGON_USER = fn(
    ClientRequest: **c_void,
    LogonType: SECURITY_LOGON_TYPE,
    AuthenticationInformation: [*]u8,
    ClientAuthenticationBase: *c_void,
    AuthenticationInformationLength: u32,
    ProfileBuffer: **c_void,
    ProfileBufferLength: *u32,
    LogonId: *LUID,
    SubStatus: *i32,
    TokenInformationType: *LSA_TOKEN_INFORMATION_TYPE,
    TokenInformation: **c_void,
    AccountName: **UNICODE_STRING,
    AuthenticatingAuthority: **UNICODE_STRING,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_AP_LOGON_USER_EX = fn(
    ClientRequest: **c_void,
    LogonType: SECURITY_LOGON_TYPE,
    AuthenticationInformation: [*]u8,
    ClientAuthenticationBase: *c_void,
    AuthenticationInformationLength: u32,
    ProfileBuffer: **c_void,
    ProfileBufferLength: *u32,
    LogonId: *LUID,
    SubStatus: *i32,
    TokenInformationType: *LSA_TOKEN_INFORMATION_TYPE,
    TokenInformation: **c_void,
    AccountName: **UNICODE_STRING,
    AuthenticatingAuthority: **UNICODE_STRING,
    MachineName: **UNICODE_STRING,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_AP_CALL_PACKAGE = fn(
    ClientRequest: **c_void,
    ProtocolSubmitBuffer: [*]u8,
    ClientBufferBase: *c_void,
    SubmitBufferLength: u32,
    ProtocolReturnBuffer: **c_void,
    ReturnBufferLength: *u32,
    ProtocolStatus: *i32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_AP_CALL_PACKAGE_PASSTHROUGH = fn(
    ClientRequest: **c_void,
    ProtocolSubmitBuffer: [*]u8,
    ClientBufferBase: *c_void,
    SubmitBufferLength: u32,
    ProtocolReturnBuffer: **c_void,
    ReturnBufferLength: *u32,
    ProtocolStatus: *i32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_AP_LOGON_TERMINATED = fn(
    LogonId: *LUID,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LSA_AP_CALL_PACKAGE_UNTRUSTED = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_AP_INITIALIZE_PACKAGE = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_AP_LOGON_USER = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_AP_LOGON_USER_EX = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_AP_CALL_PACKAGE = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_AP_CALL_PACKAGE_PASSTHROUGH = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_AP_LOGON_TERMINATED = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const PLSA_AP_CALL_PACKAGE_UNTRUSTED = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PSAM_CREDENTIAL_UPDATE_NOTIFY_ROUTINE = fn(
    ClearPassword: *UNICODE_STRING,
    OldCredentials: [*]u8,
    OldCredentialSize: u32,
    UserAccountControl: u32,
    UPN: ?*UNICODE_STRING,
    UserName: *UNICODE_STRING,
    NetbiosDomainName: *UNICODE_STRING,
    DnsDomainName: *UNICODE_STRING,
    NewCredentials: **c_void,
    NewCredentialSize: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PSAM_CREDENTIAL_UPDATE_REGISTER_ROUTINE = fn(
    CredentialName: *UNICODE_STRING,
) callconv(@import("std").os.windows.WINAPI) u8;

pub const PSAM_CREDENTIAL_UPDATE_FREE_ROUTINE = fn(
    p: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const SAM_REGISTER_MAPPING_ELEMENT = extern struct {
    Original: PSTR,
    Mapped: PSTR,
    Continuable: u8,
};

pub const SAM_REGISTER_MAPPING_LIST = extern struct {
    Count: u32,
    Elements: *SAM_REGISTER_MAPPING_ELEMENT,
};

pub const SAM_REGISTER_MAPPING_TABLE = extern struct {
    Count: u32,
    Lists: *SAM_REGISTER_MAPPING_LIST,
};

pub const PSAM_CREDENTIAL_UPDATE_REGISTER_MAPPED_ENTRYPOINTS_ROUTINE = fn(
    Table: *SAM_REGISTER_MAPPING_TABLE,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SEC_THREAD_START = fn(
) callconv(@import("std").os.windows.WINAPI) u32;

pub const SECPKG_CLIENT_INFO = extern struct {
    LogonId: LUID,
    ProcessID: u32,
    ThreadID: u32,
    HasTcbPrivilege: u8,
    Impersonating: u8,
    Restricted: u8,
    ClientFlags: u8,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    ClientToken: HANDLE,
};

pub const SECPKG_CALL_INFO = extern struct {
    ProcessId: u32,
    ThreadId: u32,
    Attributes: u32,
    CallCount: u32,
    MechOid: *c_void,
};

pub const SECPKG_SUPPLEMENTAL_CRED = extern struct {
    PackageName: UNICODE_STRING,
    CredentialSize: u32,
    Credentials: *u8,
};

pub const SECPKG_BYTE_VECTOR = extern struct {
    ByteArrayOffset: u32,
    ByteArrayLength: u16,
};

pub const SECPKG_SHORT_VECTOR = extern struct {
    ShortArrayOffset: u32,
    ShortArrayCount: u16,
};

pub const SECPKG_SUPPLIED_CREDENTIAL = extern struct {
    cbHeaderLength: u16,
    cbStructureLength: u16,
    UserName: SECPKG_SHORT_VECTOR,
    DomainName: SECPKG_SHORT_VECTOR,
    PackedCredentials: SECPKG_BYTE_VECTOR,
    CredFlags: u32,
};

pub const SECPKG_CREDENTIAL = extern struct {
    Version: u64,
    cbHeaderLength: u16,
    cbStructureLength: u32,
    ClientProcess: u32,
    ClientThread: u32,
    LogonId: LUID,
    ClientToken: HANDLE,
    SessionId: u32,
    ModifiedId: LUID,
    fCredentials: u32,
    Flags: u32,
    PrincipalName: SECPKG_BYTE_VECTOR,
    PackageList: SECPKG_BYTE_VECTOR,
    MarshaledSuppliedCreds: SECPKG_BYTE_VECTOR,
};

pub const SECPKG_SUPPLEMENTAL_CRED_ARRAY = extern struct {
    CredentialCount: u32,
    Credentials: [1]SECPKG_SUPPLEMENTAL_CRED,
};

pub const SECPKG_SURROGATE_LOGON_ENTRY = extern struct {
    Type: Guid,
    Data: *c_void,
};

pub const SECPKG_SURROGATE_LOGON = extern struct {
    Version: u32,
    SurrogateLogonID: LUID,
    EntryCount: u32,
    Entries: *SECPKG_SURROGATE_LOGON_ENTRY,
};

pub const LSA_CALLBACK_FUNCTION = fn(
    Argument1: ?*c_void,
    Argument2: ?*c_void,
    InputBuffer: *SecBuffer,
    OutputBuffer: *SecBuffer,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_CALLBACK_FUNCTION = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SECPKG_PRIMARY_CRED = extern struct {
    LogonId: LUID,
    DownlevelName: UNICODE_STRING,
    DomainName: UNICODE_STRING,
    Password: UNICODE_STRING,
    OldPassword: UNICODE_STRING,
    UserSid: *c_void,
    Flags: u32,
    DnsDomainName: UNICODE_STRING,
    Upn: UNICODE_STRING,
    LogonServer: UNICODE_STRING,
    Spare1: UNICODE_STRING,
    Spare2: UNICODE_STRING,
    Spare3: UNICODE_STRING,
    Spare4: UNICODE_STRING,
};

pub const SECPKG_PRIMARY_CRED_EX = extern struct {
    LogonId: LUID,
    DownlevelName: UNICODE_STRING,
    DomainName: UNICODE_STRING,
    Password: UNICODE_STRING,
    OldPassword: UNICODE_STRING,
    UserSid: *c_void,
    Flags: u32,
    DnsDomainName: UNICODE_STRING,
    Upn: UNICODE_STRING,
    LogonServer: UNICODE_STRING,
    Spare1: UNICODE_STRING,
    Spare2: UNICODE_STRING,
    Spare3: UNICODE_STRING,
    Spare4: UNICODE_STRING,
    PackageId: ?*c_void,
    PrevLogonId: LUID,
};

pub const SECPKG_PARAMETERS = extern struct {
    Version: u32,
    MachineState: u32,
    SetupMode: u32,
    DomainSid: *c_void,
    DomainName: UNICODE_STRING,
    DnsDomainName: UNICODE_STRING,
    DomainGuid: Guid,
};

pub const SECPKG_EXTENDED_INFORMATION_CLASS = extern enum(i32) {
    SecpkgGssInfo = 1,
    SecpkgContextThunks = 2,
    SecpkgMutualAuthLevel = 3,
    SecpkgWowClientDll = 4,
    SecpkgExtraOids = 5,
    SecpkgMaxInfo = 6,
    SecpkgNego2Info = 7,
};
pub const SecpkgGssInfo = SECPKG_EXTENDED_INFORMATION_CLASS.SecpkgGssInfo;
pub const SecpkgContextThunks = SECPKG_EXTENDED_INFORMATION_CLASS.SecpkgContextThunks;
pub const SecpkgMutualAuthLevel = SECPKG_EXTENDED_INFORMATION_CLASS.SecpkgMutualAuthLevel;
pub const SecpkgWowClientDll = SECPKG_EXTENDED_INFORMATION_CLASS.SecpkgWowClientDll;
pub const SecpkgExtraOids = SECPKG_EXTENDED_INFORMATION_CLASS.SecpkgExtraOids;
pub const SecpkgMaxInfo = SECPKG_EXTENDED_INFORMATION_CLASS.SecpkgMaxInfo;
pub const SecpkgNego2Info = SECPKG_EXTENDED_INFORMATION_CLASS.SecpkgNego2Info;

pub const SECPKG_GSS_INFO = extern struct {
    EncodedIdLength: u32,
    EncodedId: [4]u8,
};

pub const SECPKG_CONTEXT_THUNKS = extern struct {
    InfoLevelCount: u32,
    Levels: [1]u32,
};

pub const SECPKG_MUTUAL_AUTH_LEVEL = extern struct {
    MutualAuthLevel: u32,
};

pub const SECPKG_WOW_CLIENT_DLL = extern struct {
    WowClientDllPath: UNICODE_STRING,
};

pub const SECPKG_SERIALIZED_OID = extern struct {
    OidLength: u32,
    OidAttributes: u32,
    OidValue: [32]u8,
};

pub const SECPKG_EXTRA_OIDS = extern struct {
    OidCount: u32,
    Oids: [1]SECPKG_SERIALIZED_OID,
};

pub const SECPKG_NEGO2_INFO = extern struct {
    AuthScheme: [16]u8,
    PackageFlags: u32,
};

pub const SECPKG_EXTENDED_INFORMATION = extern struct {
    Class: SECPKG_EXTENDED_INFORMATION_CLASS,
    Info: SECPKG_EXTENDED_INFORMATION._Info_e__Union,
    const _Info_e__Union = u32; // TODO: generate this nested type!
};

pub const SECPKG_TARGETINFO = extern struct {
    DomainSid: *c_void,
    ComputerName: [*:0]const u16,
};

pub const SecPkgContext_SaslContext = extern struct {
    SaslContext: *c_void,
};

pub const SECURITY_USER_DATA = extern struct {
    UserName: UNICODE_STRING,
    LogonDomainName: UNICODE_STRING,
    LogonServer: UNICODE_STRING,
    pSid: *c_void,
};

pub const SECPKG_CALL_PACKAGE_MESSAGE_TYPE = extern enum(i32) {
    SecPkgCallPackageMinMessage = 1024,
    SecPkgCallPackagePinDcMessage = 1024,
    SecPkgCallPackageUnpinAllDcsMessage = 1025,
    SecPkgCallPackageTransferCredMessage = 1026,
    SecPkgCallPackageMaxMessage = 1026,
};
pub const SecPkgCallPackageMinMessage = SECPKG_CALL_PACKAGE_MESSAGE_TYPE.SecPkgCallPackageMinMessage;
pub const SecPkgCallPackagePinDcMessage = SECPKG_CALL_PACKAGE_MESSAGE_TYPE.SecPkgCallPackagePinDcMessage;
pub const SecPkgCallPackageUnpinAllDcsMessage = SECPKG_CALL_PACKAGE_MESSAGE_TYPE.SecPkgCallPackageUnpinAllDcsMessage;
pub const SecPkgCallPackageTransferCredMessage = SECPKG_CALL_PACKAGE_MESSAGE_TYPE.SecPkgCallPackageTransferCredMessage;
pub const SecPkgCallPackageMaxMessage = SECPKG_CALL_PACKAGE_MESSAGE_TYPE.SecPkgCallPackageMaxMessage;

pub const SECPKG_CALL_PACKAGE_PIN_DC_REQUEST = extern struct {
    MessageType: u32,
    Flags: u32,
    DomainName: UNICODE_STRING,
    DcName: UNICODE_STRING,
    DcFlags: u32,
};

pub const SECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST = extern struct {
    MessageType: u32,
    Flags: u32,
};

pub const SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST = extern struct {
    MessageType: u32,
    OriginLogonId: LUID,
    DestinationLogonId: LUID,
    Flags: u32,
};

pub const LSA_REDIRECTED_LOGON_INIT = fn(
    RedirectedLogonHandle: HANDLE,
    PackageName: *const UNICODE_STRING,
    SessionId: u32,
    LogonId: *const LUID,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_REDIRECTED_LOGON_CALLBACK = fn(
    RedirectedLogonHandle: HANDLE,
    Buffer: *c_void,
    BufferLength: u32,
    ReturnBuffer: **c_void,
    ReturnBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_REDIRECTED_LOGON_CLEANUP_CALLBACK = fn(
    RedirectedLogonHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LSA_REDIRECTED_LOGON_GET_LOGON_CREDS = fn(
    RedirectedLogonHandle: HANDLE,
    LogonBuffer: **u8,
    LogonBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_REDIRECTED_LOGON_GET_SUPP_CREDS = fn(
    RedirectedLogonHandle: HANDLE,
    SupplementalCredentials: **SECPKG_SUPPLEMENTAL_CRED_ARRAY,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_REDIRECTED_LOGON_INIT = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_REDIRECTED_LOGON_CALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_REDIRECTED_LOGON_GET_LOGON_CREDS = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_REDIRECTED_LOGON_GET_SUPP_CREDS = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const SECPKG_REDIRECTED_LOGON_BUFFER = extern struct {
    RedirectedLogonGuid: Guid,
    RedirectedLogonHandle: HANDLE,
    Init: PLSA_REDIRECTED_LOGON_INIT,
    Callback: PLSA_REDIRECTED_LOGON_CALLBACK,
    CleanupCallback: PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK,
    GetLogonCreds: PLSA_REDIRECTED_LOGON_GET_LOGON_CREDS,
    GetSupplementalCreds: PLSA_REDIRECTED_LOGON_GET_SUPP_CREDS,
};

pub const SECPKG_POST_LOGON_USER_INFO = extern struct {
    Flags: u32,
    LogonId: LUID,
    LinkedLogonId: LUID,
};

pub const LSA_IMPERSONATE_CLIENT = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_UNLOAD_PACKAGE = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_DUPLICATE_HANDLE = fn(
    SourceHandle: HANDLE,
    DestionationHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_SAVE_SUPPLEMENTAL_CREDENTIALS = fn(
    LogonId: *LUID,
    SupplementalCredSize: u32,
    SupplementalCreds: [*]u8,
    Synchronous: u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_CREATE_THREAD = fn(
    SecurityAttributes: *SECURITY_ATTRIBUTES,
    StackSize: u32,
    StartFunction: SEC_THREAD_START,
    ThreadParameter: *c_void,
    CreationFlags: u32,
    ThreadId: *u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub const LSA_GET_CLIENT_INFO = fn(
    ClientInfo: *SECPKG_CLIENT_INFO,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_REGISTER_NOTIFICATION = fn(
    StartFunction: SEC_THREAD_START,
    Parameter: ?*c_void,
    NotificationType: u32,
    NotificationClass: u32,
    NotificationFlags: u32,
    IntervalMinutes: u32,
    WaitEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub const LSA_CANCEL_NOTIFICATION = fn(
    NotifyHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_MAP_BUFFER = fn(
    InputBuffer: *SecBuffer,
    OutputBuffer: *SecBuffer,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_CREATE_TOKEN = fn(
    LogonId: *LUID,
    TokenSource: *TOKEN_SOURCE,
    LogonType: SECURITY_LOGON_TYPE,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    TokenInformationType: LSA_TOKEN_INFORMATION_TYPE,
    TokenInformation: *c_void,
    TokenGroups: ?*TOKEN_GROUPS,
    AccountName: *UNICODE_STRING,
    AuthorityName: *UNICODE_STRING,
    Workstation: ?*UNICODE_STRING,
    ProfilePath: ?*UNICODE_STRING,
    Token: *HANDLE,
    SubStatus: *i32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SECPKG_SESSIONINFO_TYPE = extern enum(i32) {
    SecSessionPrimaryCred = 0,
};
pub const SecSessionPrimaryCred = SECPKG_SESSIONINFO_TYPE.SecSessionPrimaryCred;

pub const LSA_CREATE_TOKEN_EX = fn(
    LogonId: *LUID,
    TokenSource: *TOKEN_SOURCE,
    LogonType: SECURITY_LOGON_TYPE,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    TokenInformationType: LSA_TOKEN_INFORMATION_TYPE,
    TokenInformation: *c_void,
    TokenGroups: ?*TOKEN_GROUPS,
    Workstation: ?*UNICODE_STRING,
    ProfilePath: ?*UNICODE_STRING,
    SessionInformation: *c_void,
    SessionInformationType: SECPKG_SESSIONINFO_TYPE,
    Token: *HANDLE,
    SubStatus: *i32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_AUDIT_LOGON = fn(
    Status: NTSTATUS,
    SubStatus: NTSTATUS,
    AccountName: ?*UNICODE_STRING,
    AuthenticatingAuthority: ?*UNICODE_STRING,
    WorkstationName: ?*UNICODE_STRING,
    UserSid: ?*c_void,
    LogonType: SECURITY_LOGON_TYPE,
    TokenSource: *TOKEN_SOURCE,
    LogonId: *LUID,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LSA_CALL_PACKAGE = fn(
    AuthenticationPackage: *UNICODE_STRING,
    ProtocolSubmitBuffer: [*]u8,
    SubmitBufferLength: u32,
    ProtocolReturnBuffer: **c_void,
    ReturnBufferLength: *u32,
    ProtocolStatus: *i32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_CALL_PACKAGEEX = fn(
    AuthenticationPackage: *UNICODE_STRING,
    ClientBufferBase: *c_void,
    ProtocolSubmitBuffer: [*]u8,
    SubmitBufferLength: u32,
    ProtocolReturnBuffer: **c_void,
    ReturnBufferLength: *u32,
    ProtocolStatus: *i32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_CALL_PACKAGE_PASSTHROUGH = fn(
    AuthenticationPackage: *UNICODE_STRING,
    ClientBufferBase: *c_void,
    ProtocolSubmitBuffer: [*]u8,
    SubmitBufferLength: u32,
    ProtocolReturnBuffer: **c_void,
    ReturnBufferLength: *u32,
    ProtocolStatus: *i32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_GET_CALL_INFO = fn(
    Info: *SECPKG_CALL_INFO,
) callconv(@import("std").os.windows.WINAPI) u8;

pub const LSA_CREATE_SHARED_MEMORY = fn(
    MaxSize: u32,
    InitialSize: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const LSA_ALLOCATE_SHARED_MEMORY = fn(
    SharedMem: *c_void,
    Size: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const LSA_FREE_SHARED_MEMORY = fn(
    SharedMem: *c_void,
    Memory: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LSA_DELETE_SHARED_MEMORY = fn(
    SharedMem: *c_void,
) callconv(@import("std").os.windows.WINAPI) u8;

pub const LSA_GET_APP_MODE_INFO = fn(
    UserFunction: ?*u32,
    Argument1: ?*u32,
    Argument2: ?*u32,
    UserData: ?*SecBuffer,
    ReturnToLsa: ?*u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_SET_APP_MODE_INFO = fn(
    UserFunction: u32,
    Argument1: ?*c_void,
    Argument2: ?*c_void,
    UserData: ?*SecBuffer,
    ReturnToLsa: u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SECPKG_NAME_TYPE = extern enum(i32) {
    SecNameSamCompatible = 0,
    SecNameAlternateId = 1,
    SecNameFlat = 2,
    SecNameDN = 3,
    SecNameSPN = 4,
};
pub const SecNameSamCompatible = SECPKG_NAME_TYPE.SecNameSamCompatible;
pub const SecNameAlternateId = SECPKG_NAME_TYPE.SecNameAlternateId;
pub const SecNameFlat = SECPKG_NAME_TYPE.SecNameFlat;
pub const SecNameDN = SECPKG_NAME_TYPE.SecNameDN;
pub const SecNameSPN = SECPKG_NAME_TYPE.SecNameSPN;

pub const LSA_OPEN_SAM_USER = fn(
    Name: *UNICODE_STRING,
    NameType: SECPKG_NAME_TYPE,
    Prefix: *UNICODE_STRING,
    AllowGuest: u8,
    Reserved: u32,
    UserHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_GET_USER_CREDENTIALS = fn(
    UserHandle: *c_void,
    PrimaryCreds: **c_void,
    PrimaryCredsSize: *u32,
    SupplementalCreds: **c_void,
    SupplementalCredsSize: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_GET_USER_AUTH_DATA = fn(
    UserHandle: *c_void,
    UserAuthData: **u8,
    UserAuthDataSize: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_CLOSE_SAM_USER = fn(
    UserHandle: *c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_GET_AUTH_DATA_FOR_USER = fn(
    Name: *UNICODE_STRING,
    NameType: SECPKG_NAME_TYPE,
    Prefix: ?*UNICODE_STRING,
    UserAuthData: **u8,
    UserAuthDataSize: *u32,
    UserFlatName: ?*UNICODE_STRING,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_CONVERT_AUTH_DATA_TO_TOKEN = fn(
    UserAuthData: *c_void,
    UserAuthDataSize: u32,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    TokenSource: *TOKEN_SOURCE,
    LogonType: SECURITY_LOGON_TYPE,
    AuthorityName: *UNICODE_STRING,
    Token: *HANDLE,
    LogonId: *LUID,
    AccountName: *UNICODE_STRING,
    SubStatus: *i32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_CRACK_SINGLE_NAME = fn(
    FormatOffered: u32,
    PerformAtGC: u8,
    NameInput: *UNICODE_STRING,
    Prefix: ?*UNICODE_STRING,
    RequestedFormat: u32,
    CrackedName: *UNICODE_STRING,
    DnsDomainName: *UNICODE_STRING,
    SubStatus: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_AUDIT_ACCOUNT_LOGON = fn(
    AuditId: u32,
    Success: u8,
    Source: ?*UNICODE_STRING,
    ClientName: ?*UNICODE_STRING,
    MappedName: ?*UNICODE_STRING,
    Status: NTSTATUS,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_CLIENT_CALLBACK = fn(
    Callback: [*]u8,
    Argument1: ?*c_void,
    Argument2: ?*c_void,
    Input: *SecBuffer,
    Output: *SecBuffer,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_REGISTER_CALLBACK = fn(
    CallbackId: u32,
    Callback: PLSA_CALLBACK_FUNCTION,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_GET_EXTENDED_CALL_FLAGS = fn(
    Flags: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SECPKG_EVENT_PACKAGE_CHANGE = extern struct {
    ChangeType: u32,
    PackageId: ?*c_void,
    PackageName: UNICODE_STRING,
};

pub const SECPKG_EVENT_ROLE_CHANGE = extern struct {
    PreviousRole: u32,
    NewRole: u32,
};

pub const SECPKG_EVENT_NOTIFY = extern struct {
    EventClass: u32,
    Reserved: u32,
    EventDataSize: u32,
    EventData: *c_void,
    PackageParameter: *c_void,
};

pub const LSA_UPDATE_PRIMARY_CREDENTIALS = fn(
    PrimaryCredentials: *SECPKG_PRIMARY_CRED,
    Credentials: ?*SECPKG_SUPPLEMENTAL_CRED_ARRAY,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_PROTECT_MEMORY = fn(
    Buffer: [*]u8,
    BufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LSA_OPEN_TOKEN_BY_LOGON_ID = fn(
    LogonId: *LUID,
    RetTokenHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_EXPAND_AUTH_DATA_FOR_DOMAIN = fn(
    UserAuthData: [*:0]u8,
    UserAuthDataSize: u32,
    Reserved: *c_void,
    ExpandedAuthData: **u8,
    ExpandedAuthDataSize: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const CRED_FETCH = extern enum(i32) {
    CredFetchDefault = 0,
    CredFetchDPAPI = 1,
    CredFetchForced = 2,
};
pub const CredFetchDefault = CRED_FETCH.CredFetchDefault;
pub const CredFetchDPAPI = CRED_FETCH.CredFetchDPAPI;
pub const CredFetchForced = CRED_FETCH.CredFetchForced;

pub const LSA_GET_SERVICE_ACCOUNT_PASSWORD = fn(
    AccountName: *UNICODE_STRING,
    DomainName: ?*UNICODE_STRING,
    CredFetch: CRED_FETCH,
    FileTimeExpiry: *FILETIME,
    CurrentPassword: *UNICODE_STRING,
    PreviousPassword: *UNICODE_STRING,
    FileTimeCurrPwdValidForOutbound: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_AUDIT_LOGON_EX = fn(
    Status: NTSTATUS,
    SubStatus: NTSTATUS,
    AccountName: ?*UNICODE_STRING,
    AuthenticatingAuthority: ?*UNICODE_STRING,
    WorkstationName: ?*UNICODE_STRING,
    UserSid: ?*c_void,
    LogonType: SECURITY_LOGON_TYPE,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    TokenSource: *TOKEN_SOURCE,
    LogonId: *LUID,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LSA_CHECK_PROTECTED_USER_BY_TOKEN = fn(
    UserToken: HANDLE,
    ProtectedUser: *u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_QUERY_CLIENT_REQUEST = fn(
    ClientRequest: **c_void,
    QueryType: u32,
    ReplyBuffer: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_IMPERSONATE_CLIENT = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_UNLOAD_PACKAGE = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_DUPLICATE_HANDLE = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_SAVE_SUPPLEMENTAL_CREDENTIALS = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_CREATE_THREAD = fn(
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub const PLSA_GET_CLIENT_INFO = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_REGISTER_NOTIFICATION = fn(
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub const PLSA_CANCEL_NOTIFICATION = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_MAP_BUFFER = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_CREATE_TOKEN = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_AUDIT_LOGON = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const PLSA_CALL_PACKAGE = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_CALL_PACKAGEEX = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_GET_CALL_INFO = fn(
) callconv(@import("std").os.windows.WINAPI) u8;

pub const PLSA_CREATE_SHARED_MEMORY = fn(
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const PLSA_ALLOCATE_SHARED_MEMORY = fn(
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const PLSA_FREE_SHARED_MEMORY = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const PLSA_DELETE_SHARED_MEMORY = fn(
) callconv(@import("std").os.windows.WINAPI) u8;

pub const PLSA_OPEN_SAM_USER = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_GET_USER_CREDENTIALS = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_GET_USER_AUTH_DATA = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_CLOSE_SAM_USER = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_CONVERT_AUTH_DATA_TO_TOKEN = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_CLIENT_CALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_REGISTER_CALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_UPDATE_PRIMARY_CREDENTIALS = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_GET_AUTH_DATA_FOR_USER = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_CRACK_SINGLE_NAME = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_AUDIT_ACCOUNT_LOGON = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_CALL_PACKAGE_PASSTHROUGH = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_PROTECT_MEMORY = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const PLSA_OPEN_TOKEN_BY_LOGON_ID = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_EXPAND_AUTH_DATA_FOR_DOMAIN = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_CREATE_TOKEN_EX = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_GET_EXTENDED_CALL_FLAGS = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_GET_SERVICE_ACCOUNT_PASSWORD = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_AUDIT_LOGON_EX = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const PLSA_CHECK_PROTECTED_USER_BY_TOKEN = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_QUERY_CLIENT_REQUEST = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_GET_APP_MODE_INFO = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_SET_APP_MODE_INFO = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const ENCRYPTED_CREDENTIALW = extern struct {
    Cred: CREDENTIALW,
    ClearCredentialBlobSize: u32,
};

pub const CredReadFn = fn(
    LogonId: *LUID,
    CredFlags: u32,
    TargetName: PWSTR,
    Type: u32,
    Flags: u32,
    Credential: **ENCRYPTED_CREDENTIALW,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const CredReadDomainCredentialsFn = fn(
    LogonId: *LUID,
    CredFlags: u32,
    TargetInfo: *CREDENTIAL_TARGET_INFORMATIONW,
    Flags: u32,
    Count: *u32,
    Credential: ***ENCRYPTED_CREDENTIALW,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const CredFreeCredentialsFn = fn(
    Count: u32,
    Credentials: ?[*]?*ENCRYPTED_CREDENTIALW,
) callconv(@import("std").os.windows.WINAPI) void;

pub const CredWriteFn = fn(
    LogonId: *LUID,
    CredFlags: u32,
    Credential: *ENCRYPTED_CREDENTIALW,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const CrediUnmarshalandDecodeStringFn = fn(
    MarshaledString: PWSTR,
    Blob: **u8,
    BlobSize: *u32,
    IsFailureFatal: *u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SEC_WINNT_AUTH_IDENTITY32 = extern struct {
    User: u32,
    UserLength: u32,
    Domain: u32,
    DomainLength: u32,
    Password: u32,
    PasswordLength: u32,
    Flags: u32,
};

pub const SEC_WINNT_AUTH_IDENTITY_EX32 = extern struct {
    Version: u32,
    Length: u32,
    User: u32,
    UserLength: u32,
    Domain: u32,
    DomainLength: u32,
    Password: u32,
    PasswordLength: u32,
    Flags: u32,
    PackageList: u32,
    PackageListLength: u32,
};

pub const LSA_SECPKG_FUNCTION_TABLE = extern struct {
    CreateLogonSession: PLSA_CREATE_LOGON_SESSION,
    DeleteLogonSession: PLSA_DELETE_LOGON_SESSION,
    AddCredential: PLSA_ADD_CREDENTIAL,
    GetCredentials: PLSA_GET_CREDENTIALS,
    DeleteCredential: PLSA_DELETE_CREDENTIAL,
    AllocateLsaHeap: PLSA_ALLOCATE_LSA_HEAP,
    FreeLsaHeap: PLSA_FREE_LSA_HEAP,
    AllocateClientBuffer: PLSA_ALLOCATE_CLIENT_BUFFER,
    FreeClientBuffer: PLSA_FREE_CLIENT_BUFFER,
    CopyToClientBuffer: PLSA_COPY_TO_CLIENT_BUFFER,
    CopyFromClientBuffer: PLSA_COPY_FROM_CLIENT_BUFFER,
    ImpersonateClient: PLSA_IMPERSONATE_CLIENT,
    UnloadPackage: PLSA_UNLOAD_PACKAGE,
    DuplicateHandle: PLSA_DUPLICATE_HANDLE,
    SaveSupplementalCredentials: PLSA_SAVE_SUPPLEMENTAL_CREDENTIALS,
    CreateThread: PLSA_CREATE_THREAD,
    GetClientInfo: PLSA_GET_CLIENT_INFO,
    RegisterNotification: PLSA_REGISTER_NOTIFICATION,
    CancelNotification: PLSA_CANCEL_NOTIFICATION,
    MapBuffer: PLSA_MAP_BUFFER,
    CreateToken: PLSA_CREATE_TOKEN,
    AuditLogon: PLSA_AUDIT_LOGON,
    CallPackage: PLSA_CALL_PACKAGE,
    FreeReturnBuffer: PLSA_FREE_LSA_HEAP,
    GetCallInfo: PLSA_GET_CALL_INFO,
    CallPackageEx: PLSA_CALL_PACKAGEEX,
    CreateSharedMemory: PLSA_CREATE_SHARED_MEMORY,
    AllocateSharedMemory: PLSA_ALLOCATE_SHARED_MEMORY,
    FreeSharedMemory: PLSA_FREE_SHARED_MEMORY,
    DeleteSharedMemory: PLSA_DELETE_SHARED_MEMORY,
    OpenSamUser: PLSA_OPEN_SAM_USER,
    GetUserCredentials: PLSA_GET_USER_CREDENTIALS,
    GetUserAuthData: PLSA_GET_USER_AUTH_DATA,
    CloseSamUser: PLSA_CLOSE_SAM_USER,
    ConvertAuthDataToToken: PLSA_CONVERT_AUTH_DATA_TO_TOKEN,
    ClientCallback: PLSA_CLIENT_CALLBACK,
    UpdateCredentials: PLSA_UPDATE_PRIMARY_CREDENTIALS,
    GetAuthDataForUser: PLSA_GET_AUTH_DATA_FOR_USER,
    CrackSingleName: PLSA_CRACK_SINGLE_NAME,
    AuditAccountLogon: PLSA_AUDIT_ACCOUNT_LOGON,
    CallPackagePassthrough: PLSA_CALL_PACKAGE_PASSTHROUGH,
    CrediRead: *CredReadFn,
    CrediReadDomainCredentials: *CredReadDomainCredentialsFn,
    CrediFreeCredentials: *CredFreeCredentialsFn,
    LsaProtectMemory: PLSA_PROTECT_MEMORY,
    LsaUnprotectMemory: PLSA_PROTECT_MEMORY,
    OpenTokenByLogonId: PLSA_OPEN_TOKEN_BY_LOGON_ID,
    ExpandAuthDataForDomain: PLSA_EXPAND_AUTH_DATA_FOR_DOMAIN,
    AllocatePrivateHeap: PLSA_ALLOCATE_PRIVATE_HEAP,
    FreePrivateHeap: PLSA_FREE_PRIVATE_HEAP,
    CreateTokenEx: PLSA_CREATE_TOKEN_EX,
    CrediWrite: *CredWriteFn,
    CrediUnmarshalandDecodeString: *CrediUnmarshalandDecodeStringFn,
    DummyFunction6: PLSA_PROTECT_MEMORY,
    GetExtendedCallFlags: PLSA_GET_EXTENDED_CALL_FLAGS,
    DuplicateTokenHandle: PLSA_DUPLICATE_HANDLE,
    GetServiceAccountPassword: PLSA_GET_SERVICE_ACCOUNT_PASSWORD,
    DummyFunction7: PLSA_PROTECT_MEMORY,
    AuditLogonEx: PLSA_AUDIT_LOGON_EX,
    CheckProtectedUserByToken: PLSA_CHECK_PROTECTED_USER_BY_TOKEN,
    QueryClientRequest: PLSA_QUERY_CLIENT_REQUEST,
    GetAppModeInfo: PLSA_GET_APP_MODE_INFO,
    SetAppModeInfo: PLSA_SET_APP_MODE_INFO,
};

pub const LSA_LOCATE_PKG_BY_ID = fn(
    PackgeId: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const PLSA_LOCATE_PKG_BY_ID = fn(
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const SECPKG_DLL_FUNCTIONS = extern struct {
    AllocateHeap: PLSA_ALLOCATE_LSA_HEAP,
    FreeHeap: PLSA_FREE_LSA_HEAP,
    RegisterCallback: PLSA_REGISTER_CALLBACK,
    LocatePackageById: PLSA_LOCATE_PKG_BY_ID,
};

pub const SpInitializeFn = fn(
    PackageId: ?*c_void,
    Parameters: *SECPKG_PARAMETERS,
    FunctionTable: *LSA_SECPKG_FUNCTION_TABLE,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpShutdownFn = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpGetInfoFn = fn(
    PackageInfo: *SecPkgInfoA,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpGetExtendedInformationFn = fn(
    Class: SECPKG_EXTENDED_INFORMATION_CLASS,
    ppInformation: **SECPKG_EXTENDED_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpSetExtendedInformationFn = fn(
    Class: SECPKG_EXTENDED_INFORMATION_CLASS,
    Info: *SECPKG_EXTENDED_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_AP_LOGON_USER_EX2 = fn(
    ClientRequest: **c_void,
    LogonType: SECURITY_LOGON_TYPE,
    ProtocolSubmitBuffer: [*]u8,
    ClientBufferBase: *c_void,
    SubmitBufferSize: u32,
    ProfileBuffer: **c_void,
    ProfileBufferSize: *u32,
    LogonId: *LUID,
    SubStatus: *i32,
    TokenInformationType: *LSA_TOKEN_INFORMATION_TYPE,
    TokenInformation: **c_void,
    AccountName: **UNICODE_STRING,
    AuthenticatingAuthority: **UNICODE_STRING,
    MachineName: **UNICODE_STRING,
    PrimaryCredentials: *SECPKG_PRIMARY_CRED,
    SupplementalCredentials: **SECPKG_SUPPLEMENTAL_CRED_ARRAY,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_AP_LOGON_USER_EX2 = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_AP_LOGON_USER_EX3 = fn(
    ClientRequest: **c_void,
    LogonType: SECURITY_LOGON_TYPE,
    ProtocolSubmitBuffer: [*]u8,
    ClientBufferBase: *c_void,
    SubmitBufferSize: u32,
    SurrogateLogon: *SECPKG_SURROGATE_LOGON,
    ProfileBuffer: **c_void,
    ProfileBufferSize: *u32,
    LogonId: *LUID,
    SubStatus: *i32,
    TokenInformationType: *LSA_TOKEN_INFORMATION_TYPE,
    TokenInformation: **c_void,
    AccountName: **UNICODE_STRING,
    AuthenticatingAuthority: **UNICODE_STRING,
    MachineName: **UNICODE_STRING,
    PrimaryCredentials: *SECPKG_PRIMARY_CRED,
    SupplementalCredentials: **SECPKG_SUPPLEMENTAL_CRED_ARRAY,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_AP_LOGON_USER_EX3 = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_AP_PRE_LOGON_USER_SURROGATE = fn(
    ClientRequest: **c_void,
    LogonType: SECURITY_LOGON_TYPE,
    ProtocolSubmitBuffer: [*]u8,
    ClientBufferBase: *c_void,
    SubmitBufferSize: u32,
    SurrogateLogon: *SECPKG_SURROGATE_LOGON,
    SubStatus: *i32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_AP_PRE_LOGON_USER_SURROGATE = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_AP_POST_LOGON_USER_SURROGATE = fn(
    ClientRequest: **c_void,
    LogonType: SECURITY_LOGON_TYPE,
    ProtocolSubmitBuffer: [*]u8,
    ClientBufferBase: *c_void,
    SubmitBufferSize: u32,
    SurrogateLogon: *SECPKG_SURROGATE_LOGON,
    ProfileBuffer: [*]u8,
    ProfileBufferSize: u32,
    LogonId: *LUID,
    Status: NTSTATUS,
    SubStatus: NTSTATUS,
    TokenInformationType: LSA_TOKEN_INFORMATION_TYPE,
    TokenInformation: *c_void,
    AccountName: *UNICODE_STRING,
    AuthenticatingAuthority: *UNICODE_STRING,
    MachineName: *UNICODE_STRING,
    PrimaryCredentials: *SECPKG_PRIMARY_CRED,
    SupplementalCredentials: *SECPKG_SUPPLEMENTAL_CRED_ARRAY,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PLSA_AP_POST_LOGON_USER_SURROGATE = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpAcceptCredentialsFn = fn(
    LogonType: SECURITY_LOGON_TYPE,
    AccountName: *UNICODE_STRING,
    PrimaryCredentials: ?*SECPKG_PRIMARY_CRED,
    SupplementalCredentials: ?*SECPKG_SUPPLEMENTAL_CRED,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpAcquireCredentialsHandleFn = fn(
    PrincipalName: ?*UNICODE_STRING,
    CredentialUseFlags: u32,
    LogonId: ?*LUID,
    AuthorizationData: ?*c_void,
    GetKeyFunciton: ?*c_void,
    GetKeyArgument: ?*c_void,
    CredentialHandle: *?*c_void,
    ExpirationTime: *LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpFreeCredentialsHandleFn = fn(
    CredentialHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpQueryCredentialsAttributesFn = fn(
    CredentialHandle: ?*c_void,
    CredentialAttribute: u32,
    Buffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpSetCredentialsAttributesFn = fn(
    CredentialHandle: ?*c_void,
    CredentialAttribute: u32,
    Buffer: [*]u8,
    BufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpAddCredentialsFn = fn(
    CredentialHandle: ?*c_void,
    PrincipalName: ?*UNICODE_STRING,
    Package: *UNICODE_STRING,
    CredentialUseFlags: u32,
    AuthorizationData: *c_void,
    GetKeyFunciton: *c_void,
    GetKeyArgument: *c_void,
    ExpirationTime: *LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpSaveCredentialsFn = fn(
    CredentialHandle: ?*c_void,
    Credentials: *SecBuffer,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpGetCredentialsFn = fn(
    CredentialHandle: ?*c_void,
    Credentials: *SecBuffer,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpDeleteCredentialsFn = fn(
    CredentialHandle: ?*c_void,
    Key: *SecBuffer,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpInitLsaModeContextFn = fn(
    CredentialHandle: ?*c_void,
    ContextHandle: ?*c_void,
    TargetName: ?*UNICODE_STRING,
    ContextRequirements: u32,
    TargetDataRep: u32,
    InputBuffers: *SecBufferDesc,
    NewContextHandle: *?*c_void,
    OutputBuffers: *SecBufferDesc,
    ContextAttributes: *u32,
    ExpirationTime: *LARGE_INTEGER,
    MappedContext: *u8,
    ContextData: *SecBuffer,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpDeleteContextFn = fn(
    ContextHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpApplyControlTokenFn = fn(
    ContextHandle: ?*c_void,
    ControlToken: *SecBufferDesc,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpAcceptLsaModeContextFn = fn(
    CredentialHandle: ?*c_void,
    ContextHandle: ?*c_void,
    InputBuffer: *SecBufferDesc,
    ContextRequirements: u32,
    TargetDataRep: u32,
    NewContextHandle: *?*c_void,
    OutputBuffer: *SecBufferDesc,
    ContextAttributes: *u32,
    ExpirationTime: *LARGE_INTEGER,
    MappedContext: *u8,
    ContextData: *SecBuffer,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpGetUserInfoFn = fn(
    LogonId: *LUID,
    Flags: u32,
    UserData: **SECURITY_USER_DATA,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpQueryContextAttributesFn = fn(
    ContextHandle: ?*c_void,
    ContextAttribute: u32,
    Buffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpSetContextAttributesFn = fn(
    ContextHandle: ?*c_void,
    ContextAttribute: u32,
    Buffer: [*]u8,
    BufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpChangeAccountPasswordFn = fn(
    pDomainName: *UNICODE_STRING,
    pAccountName: *UNICODE_STRING,
    pOldPassword: *UNICODE_STRING,
    pNewPassword: *UNICODE_STRING,
    Impersonating: u8,
    pOutput: *SecBufferDesc,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpQueryMetaDataFn = fn(
    CredentialHandle: ?*c_void,
    TargetName: ?*UNICODE_STRING,
    ContextRequirements: u32,
    MetaDataLength: *u32,
    MetaData: **u8,
    ContextHandle: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpExchangeMetaDataFn = fn(
    CredentialHandle: ?*c_void,
    TargetName: ?*UNICODE_STRING,
    ContextRequirements: u32,
    MetaDataLength: u32,
    MetaData: [*:0]u8,
    ContextHandle: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpGetCredUIContextFn = fn(
    ContextHandle: ?*c_void,
    CredType: *Guid,
    FlatCredUIContextLength: *u32,
    FlatCredUIContext: **u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpUpdateCredentialsFn = fn(
    ContextHandle: ?*c_void,
    CredType: *Guid,
    FlatCredUIContextLength: u32,
    FlatCredUIContext: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpValidateTargetInfoFn = fn(
    ClientRequest: ?*?*c_void,
    ProtocolSubmitBuffer: [*]u8,
    ClientBufferBase: *c_void,
    SubmitBufferLength: u32,
    TargetInfo: *SECPKG_TARGETINFO,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const LSA_AP_POST_LOGON_USER = fn(
    PostLogonUserInfo: *SECPKG_POST_LOGON_USER_INFO,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpGetRemoteCredGuardLogonBufferFn = fn(
    CredHandle: ?*c_void,
    ContextHandle: ?*c_void,
    TargetName: *const UNICODE_STRING,
    RedirectedLogonHandle: *HANDLE,
    Callback: *PLSA_REDIRECTED_LOGON_CALLBACK,
    CleanupCallback: *PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK,
    LogonBufferSize: *u32,
    LogonBuffer: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpGetRemoteCredGuardSupplementalCredsFn = fn(
    CredHandle: ?*c_void,
    TargetName: *const UNICODE_STRING,
    RedirectedLogonHandle: *HANDLE,
    Callback: *PLSA_REDIRECTED_LOGON_CALLBACK,
    CleanupCallback: *PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK,
    SupplementalCredsSize: *u32,
    SupplementalCreds: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpGetTbalSupplementalCredsFn = fn(
    LogonId: LUID,
    SupplementalCredsSize: *u32,
    SupplementalCreds: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SECPKG_FUNCTION_TABLE = extern struct {
    InitializePackage: PLSA_AP_INITIALIZE_PACKAGE,
    LogonUserA: PLSA_AP_LOGON_USER,
    CallPackage: PLSA_AP_CALL_PACKAGE,
    LogonTerminated: PLSA_AP_LOGON_TERMINATED,
    CallPackageUntrusted: PLSA_AP_CALL_PACKAGE_UNTRUSTED,
    CallPackagePassthrough: PLSA_AP_CALL_PACKAGE_PASSTHROUGH,
    LogonUserExA: PLSA_AP_LOGON_USER_EX,
    LogonUserEx2: PLSA_AP_LOGON_USER_EX2,
    Initialize: *SpInitializeFn,
    Shutdown: *SpShutdownFn,
    GetInfo: *SpGetInfoFn,
    AcceptCredentials: *SpAcceptCredentialsFn,
    AcquireCredentialsHandleA: *SpAcquireCredentialsHandleFn,
    QueryCredentialsAttributesA: *SpQueryCredentialsAttributesFn,
    FreeCredentialsHandle: *SpFreeCredentialsHandleFn,
    SaveCredentials: *SpSaveCredentialsFn,
    GetCredentials: *SpGetCredentialsFn,
    DeleteCredentials: *SpDeleteCredentialsFn,
    InitLsaModeContext: *SpInitLsaModeContextFn,
    AcceptLsaModeContext: *SpAcceptLsaModeContextFn,
    DeleteContext: *SpDeleteContextFn,
    ApplyControlToken: *SpApplyControlTokenFn,
    GetUserInfo: *SpGetUserInfoFn,
    GetExtendedInformation: *SpGetExtendedInformationFn,
    QueryContextAttributesA: *SpQueryContextAttributesFn,
    AddCredentialsA: *SpAddCredentialsFn,
    SetExtendedInformation: *SpSetExtendedInformationFn,
    SetContextAttributesA: *SpSetContextAttributesFn,
    SetCredentialsAttributesA: *SpSetCredentialsAttributesFn,
    ChangeAccountPasswordA: *SpChangeAccountPasswordFn,
    QueryMetaData: *SpQueryMetaDataFn,
    ExchangeMetaData: *SpExchangeMetaDataFn,
    GetCredUIContext: *SpGetCredUIContextFn,
    UpdateCredentials: *SpUpdateCredentialsFn,
    ValidateTargetInfo: *SpValidateTargetInfoFn,
    PostLogonUser: *LSA_AP_POST_LOGON_USER,
    GetRemoteCredGuardLogonBuffer: *SpGetRemoteCredGuardLogonBufferFn,
    GetRemoteCredGuardSupplementalCreds: *SpGetRemoteCredGuardSupplementalCredsFn,
    GetTbalSupplementalCreds: *SpGetTbalSupplementalCredsFn,
    LogonUserEx3: PLSA_AP_LOGON_USER_EX3,
    PreLogonUserSurrogate: PLSA_AP_PRE_LOGON_USER_SURROGATE,
    PostLogonUserSurrogate: PLSA_AP_POST_LOGON_USER_SURROGATE,
};

pub const SpInstanceInitFn = fn(
    Version: u32,
    FunctionTable: *SECPKG_DLL_FUNCTIONS,
    UserFunctions: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpInitUserModeContextFn = fn(
    ContextHandle: ?*c_void,
    PackedContext: *SecBuffer,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpMakeSignatureFn = fn(
    ContextHandle: ?*c_void,
    QualityOfProtection: u32,
    MessageBuffers: *SecBufferDesc,
    MessageSequenceNumber: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpVerifySignatureFn = fn(
    ContextHandle: ?*c_void,
    MessageBuffers: *SecBufferDesc,
    MessageSequenceNumber: u32,
    QualityOfProtection: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpSealMessageFn = fn(
    ContextHandle: ?*c_void,
    QualityOfProtection: u32,
    MessageBuffers: *SecBufferDesc,
    MessageSequenceNumber: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpUnsealMessageFn = fn(
    ContextHandle: ?*c_void,
    MessageBuffers: *SecBufferDesc,
    MessageSequenceNumber: u32,
    QualityOfProtection: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpGetContextTokenFn = fn(
    ContextHandle: ?*c_void,
    ImpersonationToken: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpExportSecurityContextFn = fn(
    phContext: ?*c_void,
    fFlags: u32,
    pPackedContext: *SecBuffer,
    pToken: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpImportSecurityContextFn = fn(
    pPackedContext: *SecBuffer,
    Token: HANDLE,
    phContext: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpCompleteAuthTokenFn = fn(
    ContextHandle: ?*c_void,
    InputBuffer: *SecBufferDesc,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpFormatCredentialsFn = fn(
    Credentials: *SecBuffer,
    FormattedCredentials: *SecBuffer,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpMarshallSupplementalCredsFn = fn(
    CredentialSize: u32,
    Credentials: [*:0]u8,
    MarshalledCredSize: *u32,
    MarshalledCreds: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SECPKG_USER_FUNCTION_TABLE = extern struct {
    InstanceInit: *SpInstanceInitFn,
    InitUserModeContext: *SpInitUserModeContextFn,
    MakeSignature: *SpMakeSignatureFn,
    VerifySignature: *SpVerifySignatureFn,
    SealMessage: *SpSealMessageFn,
    UnsealMessage: *SpUnsealMessageFn,
    GetContextToken: *SpGetContextTokenFn,
    QueryContextAttributesA: *SpQueryContextAttributesFn,
    CompleteAuthToken: *SpCompleteAuthTokenFn,
    DeleteUserModeContext: *SpDeleteContextFn,
    FormatCredentials: *SpFormatCredentialsFn,
    MarshallSupplementalCreds: *SpMarshallSupplementalCredsFn,
    ExportContext: *SpExportSecurityContextFn,
    ImportContext: *SpImportSecurityContextFn,
};

pub const SpLsaModeInitializeFn = fn(
    LsaVersion: u32,
    PackageVersion: *u32,
    ppTables: **SECPKG_FUNCTION_TABLE,
    pcTables: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SpUserModeInitializeFn = fn(
    LsaVersion: u32,
    PackageVersion: *u32,
    ppTables: **SECPKG_USER_FUNCTION_TABLE,
    pcTables: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const KSEC_CONTEXT_TYPE = extern enum(i32) {
    KSecPaged = 0,
    KSecNonPaged = 1,
};
pub const KSecPaged = KSEC_CONTEXT_TYPE.KSecPaged;
pub const KSecNonPaged = KSEC_CONTEXT_TYPE.KSecNonPaged;

pub const KSEC_LIST_ENTRY = extern struct {
    List: LIST_ENTRY,
    RefCount: i32,
    Signature: u32,
    OwningList: *c_void,
    Reserved: *c_void,
};

pub const KSEC_CREATE_CONTEXT_LIST = fn(
    Type: KSEC_CONTEXT_TYPE,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const KSEC_INSERT_LIST_ENTRY = fn(
    List: *c_void,
    Entry: *KSEC_LIST_ENTRY,
) callconv(@import("std").os.windows.WINAPI) void;

pub const KSEC_REFERENCE_LIST_ENTRY = fn(
    Entry: *KSEC_LIST_ENTRY,
    Signature: u32,
    RemoveNoRef: u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const KSEC_DEREFERENCE_LIST_ENTRY = fn(
    Entry: *KSEC_LIST_ENTRY,
    Delete: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub const KSEC_SERIALIZE_WINNT_AUTH_DATA = fn(
    pvAuthData: *c_void,
    Size: *u32,
    SerializedData: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const KSEC_SERIALIZE_SCHANNEL_AUTH_DATA = fn(
    pvAuthData: *c_void,
    Size: *u32,
    SerializedData: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PKSEC_CREATE_CONTEXT_LIST = fn(
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const PKSEC_INSERT_LIST_ENTRY = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const PKSEC_REFERENCE_LIST_ENTRY = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PKSEC_DEREFERENCE_LIST_ENTRY = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const PKSEC_SERIALIZE_WINNT_AUTH_DATA = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const PKSEC_SERIALIZE_SCHANNEL_AUTH_DATA = fn(
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const KSEC_LOCATE_PKG_BY_ID = fn(
    PackageId: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const PKSEC_LOCATE_PKG_BY_ID = fn(
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const SECPKG_KERNEL_FUNCTIONS = extern struct {
    AllocateHeap: PLSA_ALLOCATE_LSA_HEAP,
    FreeHeap: PLSA_FREE_LSA_HEAP,
    CreateContextList: PKSEC_CREATE_CONTEXT_LIST,
    InsertListEntry: PKSEC_INSERT_LIST_ENTRY,
    ReferenceListEntry: PKSEC_REFERENCE_LIST_ENTRY,
    DereferenceListEntry: PKSEC_DEREFERENCE_LIST_ENTRY,
    SerializeWinntAuthData: PKSEC_SERIALIZE_WINNT_AUTH_DATA,
    SerializeSchannelAuthData: PKSEC_SERIALIZE_SCHANNEL_AUTH_DATA,
    LocatePackageById: PKSEC_LOCATE_PKG_BY_ID,
};

pub const KspInitPackageFn = fn(
    FunctionTable: *SECPKG_KERNEL_FUNCTIONS,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const KspDeleteContextFn = fn(
    ContextId: ?*c_void,
    LsaContextId: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const KspInitContextFn = fn(
    ContextId: ?*c_void,
    ContextData: *SecBuffer,
    NewContextId: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const KspMakeSignatureFn = fn(
    ContextId: ?*c_void,
    fQOP: u32,
    Message: *SecBufferDesc,
    MessageSeqNo: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const KspVerifySignatureFn = fn(
    ContextId: ?*c_void,
    Message: *SecBufferDesc,
    MessageSeqNo: u32,
    pfQOP: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const KspSealMessageFn = fn(
    ContextId: ?*c_void,
    fQOP: u32,
    Message: *SecBufferDesc,
    MessageSeqNo: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const KspUnsealMessageFn = fn(
    ContextId: ?*c_void,
    Message: *SecBufferDesc,
    MessageSeqNo: u32,
    pfQOP: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const KspGetTokenFn = fn(
    ContextId: ?*c_void,
    ImpersonationToken: ?*HANDLE,
    RawToken: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const KspQueryAttributesFn = fn(
    ContextId: ?*c_void,
    Attribute: u32,
    Buffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const KspCompleteTokenFn = fn(
    ContextId: ?*c_void,
    Token: *SecBufferDesc,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const KspMapHandleFn = fn(
    ContextId: ?*c_void,
    LsaContextId: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const KspSetPagingModeFn = fn(
    PagingMode: u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const KspSerializeAuthDataFn = fn(
    pvAuthData: *c_void,
    Size: *u32,
    SerializedData: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub const SECPKG_KERNEL_FUNCTION_TABLE = extern struct {
    Initialize: *KspInitPackageFn,
    DeleteContext: *KspDeleteContextFn,
    InitContext: *KspInitContextFn,
    MapHandle: *KspMapHandleFn,
    Sign: *KspMakeSignatureFn,
    Verify: *KspVerifySignatureFn,
    Seal: *KspSealMessageFn,
    Unseal: *KspUnsealMessageFn,
    GetToken: *KspGetTokenFn,
    QueryAttributes: *KspQueryAttributesFn,
    CompleteToken: *KspCompleteTokenFn,
    ExportContext: *SpExportSecurityContextFn,
    ImportContext: *SpImportSecurityContextFn,
    SetPackagePagingMode: *KspSetPagingModeFn,
    SerializeAuthData: *KspSerializeAuthDataFn,
};

pub const SecPkgCred_SupportedAlgs = extern struct {
    cSupportedAlgs: u32,
    palgSupportedAlgs: *u32,
};

pub const SecPkgCred_CipherStrengths = extern struct {
    dwMinimumCipherStrength: u32,
    dwMaximumCipherStrength: u32,
};

pub const SecPkgCred_SupportedProtocols = extern struct {
    grbitProtocol: u32,
};

pub const SecPkgCred_ClientCertPolicy = extern struct {
    dwFlags: u32,
    guidPolicyId: Guid,
    dwCertFlags: u32,
    dwUrlRetrievalTimeout: u32,
    fCheckRevocationFreshnessTime: BOOL,
    dwRevocationFreshnessTime: u32,
    fOmitUsageCheck: BOOL,
    pwszSslCtlStoreName: PWSTR,
    pwszSslCtlIdentifier: PWSTR,
};

pub const eTlsSignatureAlgorithm = extern enum(i32) {
    TlsSignatureAlgorithm_Anonymous = 0,
    TlsSignatureAlgorithm_Rsa = 1,
    TlsSignatureAlgorithm_Dsa = 2,
    TlsSignatureAlgorithm_Ecdsa = 3,
};
pub const TlsSignatureAlgorithm_Anonymous = eTlsSignatureAlgorithm.TlsSignatureAlgorithm_Anonymous;
pub const TlsSignatureAlgorithm_Rsa = eTlsSignatureAlgorithm.TlsSignatureAlgorithm_Rsa;
pub const TlsSignatureAlgorithm_Dsa = eTlsSignatureAlgorithm.TlsSignatureAlgorithm_Dsa;
pub const TlsSignatureAlgorithm_Ecdsa = eTlsSignatureAlgorithm.TlsSignatureAlgorithm_Ecdsa;

pub const eTlsHashAlgorithm = extern enum(i32) {
    TlsHashAlgorithm_None = 0,
    TlsHashAlgorithm_Md5 = 1,
    TlsHashAlgorithm_Sha1 = 2,
    TlsHashAlgorithm_Sha224 = 3,
    TlsHashAlgorithm_Sha256 = 4,
    TlsHashAlgorithm_Sha384 = 5,
    TlsHashAlgorithm_Sha512 = 6,
};
pub const TlsHashAlgorithm_None = eTlsHashAlgorithm.TlsHashAlgorithm_None;
pub const TlsHashAlgorithm_Md5 = eTlsHashAlgorithm.TlsHashAlgorithm_Md5;
pub const TlsHashAlgorithm_Sha1 = eTlsHashAlgorithm.TlsHashAlgorithm_Sha1;
pub const TlsHashAlgorithm_Sha224 = eTlsHashAlgorithm.TlsHashAlgorithm_Sha224;
pub const TlsHashAlgorithm_Sha256 = eTlsHashAlgorithm.TlsHashAlgorithm_Sha256;
pub const TlsHashAlgorithm_Sha384 = eTlsHashAlgorithm.TlsHashAlgorithm_Sha384;
pub const TlsHashAlgorithm_Sha512 = eTlsHashAlgorithm.TlsHashAlgorithm_Sha512;

pub const SecPkgContext_RemoteCredentialInfo = extern struct {
    cbCertificateChain: u32,
    pbCertificateChain: *u8,
    cCertificates: u32,
    fFlags: u32,
    dwBits: u32,
};

pub const SecPkgContext_LocalCredentialInfo = extern struct {
    cbCertificateChain: u32,
    pbCertificateChain: *u8,
    cCertificates: u32,
    fFlags: u32,
    dwBits: u32,
};

pub const SecPkgContext_ClientCertPolicyResult = extern struct {
    dwPolicyResult: HRESULT,
    guidPolicyId: Guid,
};

pub const SecPkgContext_IssuerListInfoEx = extern struct {
    aIssuers: *CRYPTOAPI_BLOB,
    cIssuers: u32,
};

pub const SecPkgContext_ConnectionInfo = extern struct {
    dwProtocol: u32,
    aiCipher: u32,
    dwCipherStrength: u32,
    aiHash: u32,
    dwHashStrength: u32,
    aiExch: u32,
    dwExchStrength: u32,
};

pub const SecPkgContext_ConnectionInfoEx = extern struct {
    dwVersion: u32,
    dwProtocol: u32,
    szCipher: [64]u16,
    dwCipherStrength: u32,
    szHash: [64]u16,
    dwHashStrength: u32,
    szExchange: [64]u16,
    dwExchStrength: u32,
};

pub const SecPkgContext_CipherInfo = extern struct {
    dwVersion: u32,
    dwProtocol: u32,
    dwCipherSuite: u32,
    dwBaseCipherSuite: u32,
    szCipherSuite: [64]u16,
    szCipher: [64]u16,
    dwCipherLen: u32,
    dwCipherBlockLen: u32,
    szHash: [64]u16,
    dwHashLen: u32,
    szExchange: [64]u16,
    dwMinExchangeLen: u32,
    dwMaxExchangeLen: u32,
    szCertificate: [64]u16,
    dwKeyType: u32,
};

pub const SecPkgContext_EapKeyBlock = extern struct {
    rgbKeys: [128]u8,
    rgbIVs: [64]u8,
};

pub const SecPkgContext_MappedCredAttr = extern struct {
    dwAttribute: u32,
    pvBuffer: *c_void,
};

pub const SecPkgContext_SessionInfo = extern struct {
    dwFlags: u32,
    cbSessionId: u32,
    rgbSessionId: [32]u8,
};

pub const SecPkgContext_SessionAppData = extern struct {
    dwFlags: u32,
    cbAppData: u32,
    pbAppData: *u8,
};

pub const SecPkgContext_EapPrfInfo = extern struct {
    dwVersion: u32,
    cbPrfData: u32,
    pbPrfData: *u8,
};

pub const SecPkgContext_SupportedSignatures = extern struct {
    cSignatureAndHashAlgorithms: u16,
    pSignatureAndHashAlgorithms: *u16,
};

pub const SecPkgContext_Certificates = extern struct {
    cCertificates: u32,
    cbCertificateChain: u32,
    pbCertificateChain: *u8,
};

pub const SecPkgContext_CertInfo = extern struct {
    dwVersion: u32,
    cbSubjectName: u32,
    pwszSubjectName: PWSTR,
    cbIssuerName: u32,
    pwszIssuerName: PWSTR,
    dwKeySize: u32,
};

pub const SecPkgContext_UiInfo = extern struct {
    hParentWindow: HWND,
};

pub const SecPkgContext_EarlyStart = extern struct {
    dwEarlyStartFlags: u32,
};

pub const SecPkgContext_KeyingMaterialInfo = extern struct {
    cbLabel: u16,
    pszLabel: PSTR,
    cbContextValue: u16,
    pbContextValue: *u8,
    cbKeyingMaterial: u32,
};

pub const SecPkgContext_KeyingMaterial = extern struct {
    cbKeyingMaterial: u32,
    pbKeyingMaterial: *u8,
};

pub const SecPkgContext_KeyingMaterial_Inproc = extern struct {
    cbLabel: u16,
    pszLabel: PSTR,
    cbContextValue: u16,
    pbContextValue: *u8,
    cbKeyingMaterial: u32,
    pbKeyingMaterial: *u8,
};

pub const SecPkgContext_SrtpParameters = extern struct {
    ProtectionProfile: u16,
    MasterKeyIdentifierSize: u8,
    MasterKeyIdentifier: *u8,
};

pub const SecPkgContext_TokenBinding = extern struct {
    MajorVersion: u8,
    MinorVersion: u8,
    KeyParametersSize: u16,
    KeyParameters: *u8,
};

pub const _HMAPPER = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const SCHANNEL_CRED = extern struct {
    dwVersion: u32,
    cCreds: u32,
    paCred: **CERT_CONTEXT,
    hRootStore: *c_void,
    cMappers: u32,
    aphMappers: **_HMAPPER,
    cSupportedAlgs: u32,
    palgSupportedAlgs: *u32,
    grbitEnabledProtocols: u32,
    dwMinimumCipherStrength: u32,
    dwMaximumCipherStrength: u32,
    dwSessionLifespan: u32,
    dwFlags: u32,
    dwCredFormat: u32,
};

pub const SEND_GENERIC_TLS_EXTENSION = extern struct {
    ExtensionType: u16,
    HandshakeType: u16,
    Flags: u32,
    BufferSize: u16,
    Buffer: [1]u8,
};

pub const TLS_EXTENSION_SUBSCRIPTION = extern struct {
    ExtensionType: u16,
    HandshakeType: u16,
};

pub const SUBSCRIBE_GENERIC_TLS_EXTENSION = extern struct {
    Flags: u32,
    SubscriptionsCount: u32,
    Subscriptions: [1]TLS_EXTENSION_SUBSCRIPTION,
};

pub const SCHANNEL_CERT_HASH = extern struct {
    dwLength: u32,
    dwFlags: u32,
    hProv: ?*c_void,
    ShaHash: [20]u8,
};

pub const SCHANNEL_CERT_HASH_STORE = extern struct {
    dwLength: u32,
    dwFlags: u32,
    hProv: ?*c_void,
    ShaHash: [20]u8,
    pwszStoreName: [128]u16,
};

pub const SCHANNEL_ALERT_TOKEN = extern struct {
    dwTokenType: u32,
    dwAlertType: u32,
    dwAlertNumber: u32,
};

pub const SCHANNEL_SESSION_TOKEN = extern struct {
    dwTokenType: u32,
    dwFlags: u32,
};

pub const SCHANNEL_CLIENT_SIGNATURE = extern struct {
    cbLength: u32,
    aiHash: u32,
    cbHash: u32,
    HashValue: [36]u8,
    CertThumbprint: [20]u8,
};

pub const SSL_EMPTY_CACHE_FN_A = fn(
    pszTargetName: PSTR,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const SSL_EMPTY_CACHE_FN_W = fn(
    pszTargetName: PWSTR,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const SSL_CREDENTIAL_CERTIFICATE = extern struct {
    cbPrivateKey: u32,
    pPrivateKey: *u8,
    cbCertificate: u32,
    pCertificate: *u8,
    pszPassword: PSTR,
};

pub const SCH_CRED = extern struct {
    dwVersion: u32,
    cCreds: u32,
    paSecret: **c_void,
    paPublic: **c_void,
    cMappers: u32,
    aphMappers: **_HMAPPER,
};

pub const SCH_CRED_SECRET_CAPI = extern struct {
    dwType: u32,
    hProv: ?*c_void,
};

pub const SCH_CRED_SECRET_PRIVKEY = extern struct {
    dwType: u32,
    pPrivateKey: *u8,
    cbPrivateKey: u32,
    pszPassword: PSTR,
};

pub const SCH_CRED_PUBLIC_CERTCHAIN = extern struct {
    dwType: u32,
    cbCertChain: u32,
    pCertChain: *u8,
};

pub const PctPublicKey = extern struct {
    Type: u32,
    cbKey: u32,
    pKey: [1]u8,
};

pub const X509Certificate = extern struct {
    Version: u32,
    SerialNumber: [4]u32,
    SignatureAlgorithm: u32,
    ValidFrom: FILETIME,
    ValidUntil: FILETIME,
    pszIssuer: PSTR,
    pszSubject: PSTR,
    pPublicKey: *PctPublicKey,
};

pub const SSL_CRACK_CERTIFICATE_FN = fn(
    pbCertificate: *u8,
    cbCertificate: u32,
    VerifySignature: BOOL,
    ppCertificate: **X509Certificate,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const SSL_FREE_CERTIFICATE_FN = fn(
    pCertificate: *X509Certificate,
) callconv(@import("std").os.windows.WINAPI) void;

pub const SslGetServerIdentityFn = fn(
    ClientHello: [*:0]u8,
    ClientHelloSize: u32,
    ServerIdentity: **u8,
    ServerIdentitySize: *u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const SCH_EXTENSION_DATA = extern struct {
    ExtensionType: u16,
    pExtData: *const u8,
    cbExtData: u32,
};

pub const SchGetExtensionsOptions = extern enum(i32) {
    SCH_EXTENSIONS_OPTIONS_NONE = 0,
    SCH_NO_RECORD_HEADER = 1,
};
pub const SCH_EXTENSIONS_OPTIONS_NONE = SchGetExtensionsOptions.SCH_EXTENSIONS_OPTIONS_NONE;
pub const SCH_NO_RECORD_HEADER = SchGetExtensionsOptions.SCH_NO_RECORD_HEADER;

pub const SslGetExtensionsFn = fn(
    clientHello: [*:0]const u8,
    clientHelloByteSize: u32,
    genericExtensions: [*]SCH_EXTENSION_DATA,
    genericExtensionsCount: u8,
    bytesToRead: *u32,
    flags: SchGetExtensionsOptions,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const SE_OBJECT_TYPE = extern enum(i32) {
    SE_UNKNOWN_OBJECT_TYPE = 0,
    SE_FILE_OBJECT = 1,
    SE_SERVICE = 2,
    SE_PRINTER = 3,
    SE_REGISTRY_KEY = 4,
    SE_LMSHARE = 5,
    SE_KERNEL_OBJECT = 6,
    SE_WINDOW_OBJECT = 7,
    SE_DS_OBJECT = 8,
    SE_DS_OBJECT_ALL = 9,
    SE_PROVIDER_DEFINED_OBJECT = 10,
    SE_WMIGUID_OBJECT = 11,
    SE_REGISTRY_WOW64_32KEY = 12,
    SE_REGISTRY_WOW64_64KEY = 13,
};
pub const SE_UNKNOWN_OBJECT_TYPE = SE_OBJECT_TYPE.SE_UNKNOWN_OBJECT_TYPE;
pub const SE_FILE_OBJECT = SE_OBJECT_TYPE.SE_FILE_OBJECT;
pub const SE_SERVICE = SE_OBJECT_TYPE.SE_SERVICE;
pub const SE_PRINTER = SE_OBJECT_TYPE.SE_PRINTER;
pub const SE_REGISTRY_KEY = SE_OBJECT_TYPE.SE_REGISTRY_KEY;
pub const SE_LMSHARE = SE_OBJECT_TYPE.SE_LMSHARE;
pub const SE_KERNEL_OBJECT = SE_OBJECT_TYPE.SE_KERNEL_OBJECT;
pub const SE_WINDOW_OBJECT = SE_OBJECT_TYPE.SE_WINDOW_OBJECT;
pub const SE_DS_OBJECT = SE_OBJECT_TYPE.SE_DS_OBJECT;
pub const SE_DS_OBJECT_ALL = SE_OBJECT_TYPE.SE_DS_OBJECT_ALL;
pub const SE_PROVIDER_DEFINED_OBJECT = SE_OBJECT_TYPE.SE_PROVIDER_DEFINED_OBJECT;
pub const SE_WMIGUID_OBJECT = SE_OBJECT_TYPE.SE_WMIGUID_OBJECT;
pub const SE_REGISTRY_WOW64_32KEY = SE_OBJECT_TYPE.SE_REGISTRY_WOW64_32KEY;
pub const SE_REGISTRY_WOW64_64KEY = SE_OBJECT_TYPE.SE_REGISTRY_WOW64_64KEY;

pub const TRUSTEE_TYPE = extern enum(i32) {
    TRUSTEE_IS_UNKNOWN = 0,
    TRUSTEE_IS_USER = 1,
    TRUSTEE_IS_GROUP = 2,
    TRUSTEE_IS_DOMAIN = 3,
    TRUSTEE_IS_ALIAS = 4,
    TRUSTEE_IS_WELL_KNOWN_GROUP = 5,
    TRUSTEE_IS_DELETED = 6,
    TRUSTEE_IS_INVALID = 7,
    TRUSTEE_IS_COMPUTER = 8,
};
pub const TRUSTEE_IS_UNKNOWN = TRUSTEE_TYPE.TRUSTEE_IS_UNKNOWN;
pub const TRUSTEE_IS_USER = TRUSTEE_TYPE.TRUSTEE_IS_USER;
pub const TRUSTEE_IS_GROUP = TRUSTEE_TYPE.TRUSTEE_IS_GROUP;
pub const TRUSTEE_IS_DOMAIN = TRUSTEE_TYPE.TRUSTEE_IS_DOMAIN;
pub const TRUSTEE_IS_ALIAS = TRUSTEE_TYPE.TRUSTEE_IS_ALIAS;
pub const TRUSTEE_IS_WELL_KNOWN_GROUP = TRUSTEE_TYPE.TRUSTEE_IS_WELL_KNOWN_GROUP;
pub const TRUSTEE_IS_DELETED = TRUSTEE_TYPE.TRUSTEE_IS_DELETED;
pub const TRUSTEE_IS_INVALID = TRUSTEE_TYPE.TRUSTEE_IS_INVALID;
pub const TRUSTEE_IS_COMPUTER = TRUSTEE_TYPE.TRUSTEE_IS_COMPUTER;

pub const TRUSTEE_FORM = extern enum(i32) {
    TRUSTEE_IS_SID = 0,
    TRUSTEE_IS_NAME = 1,
    TRUSTEE_BAD_FORM = 2,
    TRUSTEE_IS_OBJECTS_AND_SID = 3,
    TRUSTEE_IS_OBJECTS_AND_NAME = 4,
};
pub const TRUSTEE_IS_SID = TRUSTEE_FORM.TRUSTEE_IS_SID;
pub const TRUSTEE_IS_NAME = TRUSTEE_FORM.TRUSTEE_IS_NAME;
pub const TRUSTEE_BAD_FORM = TRUSTEE_FORM.TRUSTEE_BAD_FORM;
pub const TRUSTEE_IS_OBJECTS_AND_SID = TRUSTEE_FORM.TRUSTEE_IS_OBJECTS_AND_SID;
pub const TRUSTEE_IS_OBJECTS_AND_NAME = TRUSTEE_FORM.TRUSTEE_IS_OBJECTS_AND_NAME;

pub const MULTIPLE_TRUSTEE_OPERATION = extern enum(i32) {
    NO_MULTIPLE_TRUSTEE = 0,
    TRUSTEE_IS_IMPERSONATE = 1,
};
pub const NO_MULTIPLE_TRUSTEE = MULTIPLE_TRUSTEE_OPERATION.NO_MULTIPLE_TRUSTEE;
pub const TRUSTEE_IS_IMPERSONATE = MULTIPLE_TRUSTEE_OPERATION.TRUSTEE_IS_IMPERSONATE;

pub const OBJECTS_AND_SID = extern struct {
    ObjectsPresent: u32,
    ObjectTypeGuid: Guid,
    InheritedObjectTypeGuid: Guid,
    pSid: *SID,
};

pub const OBJECTS_AND_NAME_A = extern struct {
    ObjectsPresent: u32,
    ObjectType: SE_OBJECT_TYPE,
    ObjectTypeName: PSTR,
    InheritedObjectTypeName: PSTR,
    ptstrName: PSTR,
};

pub const OBJECTS_AND_NAME_W = extern struct {
    ObjectsPresent: u32,
    ObjectType: SE_OBJECT_TYPE,
    ObjectTypeName: PWSTR,
    InheritedObjectTypeName: PWSTR,
    ptstrName: PWSTR,
};

pub const TRUSTEE_A = extern struct {
    pMultipleTrustee: *TRUSTEE_A,
    MultipleTrusteeOperation: MULTIPLE_TRUSTEE_OPERATION,
    TrusteeForm: TRUSTEE_FORM,
    TrusteeType: TRUSTEE_TYPE,
    ptstrName: [*]u8,
};

pub const TRUSTEE_W = extern struct {
    pMultipleTrustee: *TRUSTEE_W,
    MultipleTrusteeOperation: MULTIPLE_TRUSTEE_OPERATION,
    TrusteeForm: TRUSTEE_FORM,
    TrusteeType: TRUSTEE_TYPE,
    ptstrName: [*]u16,
};

pub const ACCESS_MODE = extern enum(i32) {
    NOT_USED_ACCESS = 0,
    GRANT_ACCESS = 1,
    SET_ACCESS = 2,
    DENY_ACCESS = 3,
    REVOKE_ACCESS = 4,
    SET_AUDIT_SUCCESS = 5,
    SET_AUDIT_FAILURE = 6,
};
pub const NOT_USED_ACCESS = ACCESS_MODE.NOT_USED_ACCESS;
pub const GRANT_ACCESS = ACCESS_MODE.GRANT_ACCESS;
pub const SET_ACCESS = ACCESS_MODE.SET_ACCESS;
pub const DENY_ACCESS = ACCESS_MODE.DENY_ACCESS;
pub const REVOKE_ACCESS = ACCESS_MODE.REVOKE_ACCESS;
pub const SET_AUDIT_SUCCESS = ACCESS_MODE.SET_AUDIT_SUCCESS;
pub const SET_AUDIT_FAILURE = ACCESS_MODE.SET_AUDIT_FAILURE;

pub const EXPLICIT_ACCESS_A = extern struct {
    grfAccessPermissions: u32,
    grfAccessMode: ACCESS_MODE,
    grfInheritance: u32,
    Trustee: TRUSTEE_A,
};

pub const EXPLICIT_ACCESS_W = extern struct {
    grfAccessPermissions: u32,
    grfAccessMode: ACCESS_MODE,
    grfInheritance: u32,
    Trustee: TRUSTEE_W,
};

pub const TRUSTEE_ACCESSA = extern struct {
    lpProperty: PSTR,
    Access: u32,
    fAccessFlags: u32,
    fReturnedAccess: u32,
};

pub const TRUSTEE_ACCESSW = extern struct {
    lpProperty: PWSTR,
    Access: u32,
    fAccessFlags: u32,
    fReturnedAccess: u32,
};

pub const ACTRL_OVERLAPPED = extern struct {
    Anonymous: ACTRL_OVERLAPPED._Anonymous_e__Union,
    Reserved2: u32,
    hEvent: HANDLE,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const ACTRL_ACCESS_INFOA = extern struct {
    fAccessPermission: u32,
    lpAccessPermissionName: PSTR,
};

pub const ACTRL_ACCESS_INFOW = extern struct {
    fAccessPermission: u32,
    lpAccessPermissionName: PWSTR,
};

pub const ACTRL_CONTROL_INFOA = extern struct {
    lpControlId: PSTR,
    lpControlName: PSTR,
};

pub const ACTRL_CONTROL_INFOW = extern struct {
    lpControlId: PWSTR,
    lpControlName: PWSTR,
};

pub const PROG_INVOKE_SETTING = extern enum(i32) {
    ProgressInvokeNever = 1,
    ProgressInvokeEveryObject = 2,
    ProgressInvokeOnError = 3,
    ProgressCancelOperation = 4,
    ProgressRetryOperation = 5,
    ProgressInvokePrePostError = 6,
};
pub const ProgressInvokeNever = PROG_INVOKE_SETTING.ProgressInvokeNever;
pub const ProgressInvokeEveryObject = PROG_INVOKE_SETTING.ProgressInvokeEveryObject;
pub const ProgressInvokeOnError = PROG_INVOKE_SETTING.ProgressInvokeOnError;
pub const ProgressCancelOperation = PROG_INVOKE_SETTING.ProgressCancelOperation;
pub const ProgressRetryOperation = PROG_INVOKE_SETTING.ProgressRetryOperation;
pub const ProgressInvokePrePostError = PROG_INVOKE_SETTING.ProgressInvokePrePostError;

pub const _FN_OBJECT_MGR_FUNCTIONS = extern struct {
    Placeholder: u32,
};

pub const INHERITED_FROMA = extern struct {
    GenerationGap: i32,
    AncestorName: PSTR,
};

pub const INHERITED_FROMW = extern struct {
    GenerationGap: i32,
    AncestorName: PWSTR,
};

pub const WLX_SC_NOTIFICATION_INFO = extern struct {
    pszCard: PWSTR,
    pszReader: PWSTR,
    pszContainer: PWSTR,
    pszCryptoProvider: PWSTR,
};

pub const WLX_PROFILE_V1_0 = extern struct {
    dwType: u32,
    pszProfile: PWSTR,
};

pub const WLX_PROFILE_V2_0 = extern struct {
    dwType: u32,
    pszProfile: PWSTR,
    pszPolicy: PWSTR,
    pszNetworkDefaultUserProfile: PWSTR,
    pszServerName: PWSTR,
    pszEnvironment: PWSTR,
};

pub const WLX_MPR_NOTIFY_INFO = extern struct {
    pszUserName: PWSTR,
    pszDomain: PWSTR,
    pszPassword: PWSTR,
    pszOldPassword: PWSTR,
};

pub const WLX_TERMINAL_SERVICES_DATA = extern struct {
    ProfilePath: [257]u16,
    HomeDir: [257]u16,
    HomeDirDrive: [4]u16,
};

pub const WLX_CLIENT_CREDENTIALS_INFO_V1_0 = extern struct {
    dwType: u32,
    pszUserName: PWSTR,
    pszDomain: PWSTR,
    pszPassword: PWSTR,
    fPromptForPassword: BOOL,
};

pub const WLX_CLIENT_CREDENTIALS_INFO_V2_0 = extern struct {
    dwType: u32,
    pszUserName: PWSTR,
    pszDomain: PWSTR,
    pszPassword: PWSTR,
    fPromptForPassword: BOOL,
    fDisconnectOnLogonFailure: BOOL,
};

pub const WLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0 = extern struct {
    dwType: u32,
    UserToken: HANDLE,
    LogonId: LUID,
    Quotas: QUOTA_LIMITS,
    UserName: PWSTR,
    Domain: PWSTR,
    LogonTime: LARGE_INTEGER,
    SmartCardLogon: BOOL,
    ProfileLength: u32,
    MessageType: u32,
    LogonCount: u16,
    BadPasswordCount: u16,
    ProfileLogonTime: LARGE_INTEGER,
    LogoffTime: LARGE_INTEGER,
    KickOffTime: LARGE_INTEGER,
    PasswordLastSet: LARGE_INTEGER,
    PasswordCanChange: LARGE_INTEGER,
    PasswordMustChange: LARGE_INTEGER,
    LogonScript: PWSTR,
    HomeDirectory: PWSTR,
    FullName: PWSTR,
    ProfilePath: PWSTR,
    HomeDirectoryDrive: PWSTR,
    LogonServer: PWSTR,
    UserFlags: u32,
    PrivateDataLen: u32,
    PrivateData: *u8,
};

pub const WLX_DESKTOP = extern struct {
    Size: u32,
    Flags: u32,
    hDesktop: HDESK,
    pszDesktopName: PWSTR,
};

pub const PWLX_USE_CTRL_ALT_DEL = fn(
    hWlx: HANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PWLX_SET_CONTEXT_POINTER = fn(
    hWlx: HANDLE,
    pWlxContext: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PWLX_SAS_NOTIFY = fn(
    hWlx: HANDLE,
    dwSasType: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PWLX_SET_TIMEOUT = fn(
    hWlx: HANDLE,
    Timeout: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PWLX_ASSIGN_SHELL_PROTECTION = fn(
    hWlx: HANDLE,
    hToken: HANDLE,
    hProcess: HANDLE,
    hThread: HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PWLX_MESSAGE_BOX = fn(
    hWlx: HANDLE,
    hwndOwner: HWND,
    lpszText: PWSTR,
    lpszTitle: PWSTR,
    fuStyle: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PWLX_DIALOG_BOX = fn(
    hWlx: HANDLE,
    hInst: HANDLE,
    lpszTemplate: PWSTR,
    hwndOwner: HWND,
    dlgprc: DLGPROC,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PWLX_DIALOG_BOX_INDIRECT = fn(
    hWlx: HANDLE,
    hInst: HANDLE,
    hDialogTemplate: *DLGTEMPLATE,
    hwndOwner: HWND,
    dlgprc: DLGPROC,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PWLX_DIALOG_BOX_PARAM = fn(
    hWlx: HANDLE,
    hInst: HANDLE,
    lpszTemplate: PWSTR,
    hwndOwner: HWND,
    dlgprc: DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PWLX_DIALOG_BOX_INDIRECT_PARAM = fn(
    hWlx: HANDLE,
    hInst: HANDLE,
    hDialogTemplate: *DLGTEMPLATE,
    hwndOwner: HWND,
    dlgprc: DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PWLX_SWITCH_DESKTOP_TO_USER = fn(
    hWlx: HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PWLX_SWITCH_DESKTOP_TO_WINLOGON = fn(
    hWlx: HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PWLX_CHANGE_PASSWORD_NOTIFY = fn(
    hWlx: HANDLE,
    pMprInfo: *WLX_MPR_NOTIFY_INFO,
    dwChangeInfo: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PWLX_GET_SOURCE_DESKTOP = fn(
    hWlx: HANDLE,
    ppDesktop: **WLX_DESKTOP,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PWLX_SET_RETURN_DESKTOP = fn(
    hWlx: HANDLE,
    pDesktop: *WLX_DESKTOP,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PWLX_CREATE_USER_DESKTOP = fn(
    hWlx: HANDLE,
    hToken: HANDLE,
    Flags: u32,
    pszDesktopName: PWSTR,
    ppDesktop: **WLX_DESKTOP,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PWLX_CHANGE_PASSWORD_NOTIFY_EX = fn(
    hWlx: HANDLE,
    pMprInfo: *WLX_MPR_NOTIFY_INFO,
    dwChangeInfo: u32,
    ProviderName: PWSTR,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PWLX_CLOSE_USER_DESKTOP = fn(
    hWlx: HANDLE,
    pDesktop: *WLX_DESKTOP,
    hToken: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PWLX_SET_OPTION = fn(
    hWlx: HANDLE,
    Option: u32,
    Value: ?*c_void,
    OldValue: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PWLX_GET_OPTION = fn(
    hWlx: HANDLE,
    Option: u32,
    Value: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PWLX_WIN31_MIGRATE = fn(
    hWlx: HANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PWLX_QUERY_CLIENT_CREDENTIALS = fn(
    pCred: *WLX_CLIENT_CREDENTIALS_INFO_V1_0,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PWLX_QUERY_IC_CREDENTIALS = fn(
    pCred: *WLX_CLIENT_CREDENTIALS_INFO_V1_0,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PWLX_QUERY_TS_LOGON_CREDENTIALS = fn(
    pCred: *WLX_CLIENT_CREDENTIALS_INFO_V2_0,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PWLX_DISCONNECT = fn(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PWLX_QUERY_TERMINAL_SERVICES_DATA = fn(
    hWlx: HANDLE,
    pTSData: *WLX_TERMINAL_SERVICES_DATA,
    UserName: PWSTR,
    Domain: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PWLX_QUERY_CONSOLESWITCH_CREDENTIALS = fn(
    pCred: *WLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const WLX_DISPATCH_VERSION_1_0 = extern struct {
    WlxUseCtrlAltDel: PWLX_USE_CTRL_ALT_DEL,
    WlxSetContextPointer: PWLX_SET_CONTEXT_POINTER,
    WlxSasNotify: PWLX_SAS_NOTIFY,
    WlxSetTimeout: PWLX_SET_TIMEOUT,
    WlxAssignShellProtection: PWLX_ASSIGN_SHELL_PROTECTION,
    WlxMessageBox: PWLX_MESSAGE_BOX,
    WlxDialogBox: PWLX_DIALOG_BOX,
    WlxDialogBoxParam: PWLX_DIALOG_BOX_PARAM,
    WlxDialogBoxIndirect: PWLX_DIALOG_BOX_INDIRECT,
    WlxDialogBoxIndirectParam: PWLX_DIALOG_BOX_INDIRECT_PARAM,
    WlxSwitchDesktopToUser: PWLX_SWITCH_DESKTOP_TO_USER,
    WlxSwitchDesktopToWinlogon: PWLX_SWITCH_DESKTOP_TO_WINLOGON,
    WlxChangePasswordNotify: PWLX_CHANGE_PASSWORD_NOTIFY,
};

pub const WLX_DISPATCH_VERSION_1_1 = extern struct {
    WlxUseCtrlAltDel: PWLX_USE_CTRL_ALT_DEL,
    WlxSetContextPointer: PWLX_SET_CONTEXT_POINTER,
    WlxSasNotify: PWLX_SAS_NOTIFY,
    WlxSetTimeout: PWLX_SET_TIMEOUT,
    WlxAssignShellProtection: PWLX_ASSIGN_SHELL_PROTECTION,
    WlxMessageBox: PWLX_MESSAGE_BOX,
    WlxDialogBox: PWLX_DIALOG_BOX,
    WlxDialogBoxParam: PWLX_DIALOG_BOX_PARAM,
    WlxDialogBoxIndirect: PWLX_DIALOG_BOX_INDIRECT,
    WlxDialogBoxIndirectParam: PWLX_DIALOG_BOX_INDIRECT_PARAM,
    WlxSwitchDesktopToUser: PWLX_SWITCH_DESKTOP_TO_USER,
    WlxSwitchDesktopToWinlogon: PWLX_SWITCH_DESKTOP_TO_WINLOGON,
    WlxChangePasswordNotify: PWLX_CHANGE_PASSWORD_NOTIFY,
    WlxGetSourceDesktop: PWLX_GET_SOURCE_DESKTOP,
    WlxSetReturnDesktop: PWLX_SET_RETURN_DESKTOP,
    WlxCreateUserDesktop: PWLX_CREATE_USER_DESKTOP,
    WlxChangePasswordNotifyEx: PWLX_CHANGE_PASSWORD_NOTIFY_EX,
};

pub const WLX_DISPATCH_VERSION_1_2 = extern struct {
    WlxUseCtrlAltDel: PWLX_USE_CTRL_ALT_DEL,
    WlxSetContextPointer: PWLX_SET_CONTEXT_POINTER,
    WlxSasNotify: PWLX_SAS_NOTIFY,
    WlxSetTimeout: PWLX_SET_TIMEOUT,
    WlxAssignShellProtection: PWLX_ASSIGN_SHELL_PROTECTION,
    WlxMessageBox: PWLX_MESSAGE_BOX,
    WlxDialogBox: PWLX_DIALOG_BOX,
    WlxDialogBoxParam: PWLX_DIALOG_BOX_PARAM,
    WlxDialogBoxIndirect: PWLX_DIALOG_BOX_INDIRECT,
    WlxDialogBoxIndirectParam: PWLX_DIALOG_BOX_INDIRECT_PARAM,
    WlxSwitchDesktopToUser: PWLX_SWITCH_DESKTOP_TO_USER,
    WlxSwitchDesktopToWinlogon: PWLX_SWITCH_DESKTOP_TO_WINLOGON,
    WlxChangePasswordNotify: PWLX_CHANGE_PASSWORD_NOTIFY,
    WlxGetSourceDesktop: PWLX_GET_SOURCE_DESKTOP,
    WlxSetReturnDesktop: PWLX_SET_RETURN_DESKTOP,
    WlxCreateUserDesktop: PWLX_CREATE_USER_DESKTOP,
    WlxChangePasswordNotifyEx: PWLX_CHANGE_PASSWORD_NOTIFY_EX,
    WlxCloseUserDesktop: PWLX_CLOSE_USER_DESKTOP,
};

pub const WLX_DISPATCH_VERSION_1_3 = extern struct {
    WlxUseCtrlAltDel: PWLX_USE_CTRL_ALT_DEL,
    WlxSetContextPointer: PWLX_SET_CONTEXT_POINTER,
    WlxSasNotify: PWLX_SAS_NOTIFY,
    WlxSetTimeout: PWLX_SET_TIMEOUT,
    WlxAssignShellProtection: PWLX_ASSIGN_SHELL_PROTECTION,
    WlxMessageBox: PWLX_MESSAGE_BOX,
    WlxDialogBox: PWLX_DIALOG_BOX,
    WlxDialogBoxParam: PWLX_DIALOG_BOX_PARAM,
    WlxDialogBoxIndirect: PWLX_DIALOG_BOX_INDIRECT,
    WlxDialogBoxIndirectParam: PWLX_DIALOG_BOX_INDIRECT_PARAM,
    WlxSwitchDesktopToUser: PWLX_SWITCH_DESKTOP_TO_USER,
    WlxSwitchDesktopToWinlogon: PWLX_SWITCH_DESKTOP_TO_WINLOGON,
    WlxChangePasswordNotify: PWLX_CHANGE_PASSWORD_NOTIFY,
    WlxGetSourceDesktop: PWLX_GET_SOURCE_DESKTOP,
    WlxSetReturnDesktop: PWLX_SET_RETURN_DESKTOP,
    WlxCreateUserDesktop: PWLX_CREATE_USER_DESKTOP,
    WlxChangePasswordNotifyEx: PWLX_CHANGE_PASSWORD_NOTIFY_EX,
    WlxCloseUserDesktop: PWLX_CLOSE_USER_DESKTOP,
    WlxSetOption: PWLX_SET_OPTION,
    WlxGetOption: PWLX_GET_OPTION,
    WlxWin31Migrate: PWLX_WIN31_MIGRATE,
    WlxQueryClientCredentials: PWLX_QUERY_CLIENT_CREDENTIALS,
    WlxQueryInetConnectorCredentials: PWLX_QUERY_IC_CREDENTIALS,
    WlxDisconnect: PWLX_DISCONNECT,
    WlxQueryTerminalServicesData: PWLX_QUERY_TERMINAL_SERVICES_DATA,
};

pub const WLX_DISPATCH_VERSION_1_4 = extern struct {
    WlxUseCtrlAltDel: PWLX_USE_CTRL_ALT_DEL,
    WlxSetContextPointer: PWLX_SET_CONTEXT_POINTER,
    WlxSasNotify: PWLX_SAS_NOTIFY,
    WlxSetTimeout: PWLX_SET_TIMEOUT,
    WlxAssignShellProtection: PWLX_ASSIGN_SHELL_PROTECTION,
    WlxMessageBox: PWLX_MESSAGE_BOX,
    WlxDialogBox: PWLX_DIALOG_BOX,
    WlxDialogBoxParam: PWLX_DIALOG_BOX_PARAM,
    WlxDialogBoxIndirect: PWLX_DIALOG_BOX_INDIRECT,
    WlxDialogBoxIndirectParam: PWLX_DIALOG_BOX_INDIRECT_PARAM,
    WlxSwitchDesktopToUser: PWLX_SWITCH_DESKTOP_TO_USER,
    WlxSwitchDesktopToWinlogon: PWLX_SWITCH_DESKTOP_TO_WINLOGON,
    WlxChangePasswordNotify: PWLX_CHANGE_PASSWORD_NOTIFY,
    WlxGetSourceDesktop: PWLX_GET_SOURCE_DESKTOP,
    WlxSetReturnDesktop: PWLX_SET_RETURN_DESKTOP,
    WlxCreateUserDesktop: PWLX_CREATE_USER_DESKTOP,
    WlxChangePasswordNotifyEx: PWLX_CHANGE_PASSWORD_NOTIFY_EX,
    WlxCloseUserDesktop: PWLX_CLOSE_USER_DESKTOP,
    WlxSetOption: PWLX_SET_OPTION,
    WlxGetOption: PWLX_GET_OPTION,
    WlxWin31Migrate: PWLX_WIN31_MIGRATE,
    WlxQueryClientCredentials: PWLX_QUERY_CLIENT_CREDENTIALS,
    WlxQueryInetConnectorCredentials: PWLX_QUERY_IC_CREDENTIALS,
    WlxDisconnect: PWLX_DISCONNECT,
    WlxQueryTerminalServicesData: PWLX_QUERY_TERMINAL_SERVICES_DATA,
    WlxQueryConsoleSwitchCredentials: PWLX_QUERY_CONSOLESWITCH_CREDENTIALS,
    WlxQueryTsLogonCredentials: PWLX_QUERY_TS_LOGON_CREDENTIALS,
};

pub const PFNMSGECALLBACK = fn(
    bVerbose: BOOL,
    lpMessage: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const WLX_NOTIFICATION_INFO = extern struct {
    Size: u32,
    Flags: u32,
    UserName: PWSTR,
    Domain: PWSTR,
    WindowStation: PWSTR,
    hToken: HANDLE,
    hDesktop: HDESK,
    pStatusCallback: PFNMSGECALLBACK,
};

const CLSID_TpmVirtualSmartCardManager_Value = @import("../zig.zig").Guid.initString("16A18E86-7F6E-4C20-AD89-4FFC0DB7A96A");
pub const CLSID_TpmVirtualSmartCardManager = &CLSID_TpmVirtualSmartCardManager_Value;

const CLSID_RemoteTpmVirtualSmartCardManager_Value = @import("../zig.zig").Guid.initString("152EA2A8-70DC-4C59-8B2A-32AA3CA0DCAC");
pub const CLSID_RemoteTpmVirtualSmartCardManager = &CLSID_RemoteTpmVirtualSmartCardManager_Value;

pub const TPMVSC_ATTESTATION_TYPE = extern enum(i32) {
    TPMVSC_ATTESTATION_NONE = 0,
    TPMVSC_ATTESTATION_AIK_ONLY = 1,
    TPMVSC_ATTESTATION_AIK_AND_CERTIFICATE = 2,
};
pub const TPMVSC_ATTESTATION_NONE = TPMVSC_ATTESTATION_TYPE.TPMVSC_ATTESTATION_NONE;
pub const TPMVSC_ATTESTATION_AIK_ONLY = TPMVSC_ATTESTATION_TYPE.TPMVSC_ATTESTATION_AIK_ONLY;
pub const TPMVSC_ATTESTATION_AIK_AND_CERTIFICATE = TPMVSC_ATTESTATION_TYPE.TPMVSC_ATTESTATION_AIK_AND_CERTIFICATE;

pub const TPMVSCMGR_STATUS = extern enum(i32) {
    VTPMSMARTCARD_INITIALIZING = 0,
    VTPMSMARTCARD_CREATING = 1,
    VTPMSMARTCARD_DESTROYING = 2,
    VGIDSSIMULATOR_INITIALIZING = 3,
    VGIDSSIMULATOR_CREATING = 4,
    VGIDSSIMULATOR_DESTROYING = 5,
    VREADER_INITIALIZING = 6,
    VREADER_CREATING = 7,
    VREADER_DESTROYING = 8,
    GENERATE_WAITING = 9,
    GENERATE_AUTHENTICATING = 10,
    GENERATE_RUNNING = 11,
    CARD_CREATED = 12,
    CARD_DESTROYED = 13,
};
pub const TPMVSCMGR_STATUS_VTPMSMARTCARD_INITIALIZING = TPMVSCMGR_STATUS.VTPMSMARTCARD_INITIALIZING;
pub const TPMVSCMGR_STATUS_VTPMSMARTCARD_CREATING = TPMVSCMGR_STATUS.VTPMSMARTCARD_CREATING;
pub const TPMVSCMGR_STATUS_VTPMSMARTCARD_DESTROYING = TPMVSCMGR_STATUS.VTPMSMARTCARD_DESTROYING;
pub const TPMVSCMGR_STATUS_VGIDSSIMULATOR_INITIALIZING = TPMVSCMGR_STATUS.VGIDSSIMULATOR_INITIALIZING;
pub const TPMVSCMGR_STATUS_VGIDSSIMULATOR_CREATING = TPMVSCMGR_STATUS.VGIDSSIMULATOR_CREATING;
pub const TPMVSCMGR_STATUS_VGIDSSIMULATOR_DESTROYING = TPMVSCMGR_STATUS.VGIDSSIMULATOR_DESTROYING;
pub const TPMVSCMGR_STATUS_VREADER_INITIALIZING = TPMVSCMGR_STATUS.VREADER_INITIALIZING;
pub const TPMVSCMGR_STATUS_VREADER_CREATING = TPMVSCMGR_STATUS.VREADER_CREATING;
pub const TPMVSCMGR_STATUS_VREADER_DESTROYING = TPMVSCMGR_STATUS.VREADER_DESTROYING;
pub const TPMVSCMGR_STATUS_GENERATE_WAITING = TPMVSCMGR_STATUS.GENERATE_WAITING;
pub const TPMVSCMGR_STATUS_GENERATE_AUTHENTICATING = TPMVSCMGR_STATUS.GENERATE_AUTHENTICATING;
pub const TPMVSCMGR_STATUS_GENERATE_RUNNING = TPMVSCMGR_STATUS.GENERATE_RUNNING;
pub const TPMVSCMGR_STATUS_CARD_CREATED = TPMVSCMGR_STATUS.CARD_CREATED;
pub const TPMVSCMGR_STATUS_CARD_DESTROYED = TPMVSCMGR_STATUS.CARD_DESTROYED;

pub const TPMVSCMGR_ERROR = extern enum(i32) {
    IMPERSONATION = 0,
    PIN_COMPLEXITY = 1,
    READER_COUNT_LIMIT = 2,
    TERMINAL_SERVICES_SESSION = 3,
    VTPMSMARTCARD_INITIALIZE = 4,
    VTPMSMARTCARD_CREATE = 5,
    VTPMSMARTCARD_DESTROY = 6,
    VGIDSSIMULATOR_INITIALIZE = 7,
    VGIDSSIMULATOR_CREATE = 8,
    VGIDSSIMULATOR_DESTROY = 9,
    VGIDSSIMULATOR_WRITE_PROPERTY = 10,
    VGIDSSIMULATOR_READ_PROPERTY = 11,
    VREADER_INITIALIZE = 12,
    VREADER_CREATE = 13,
    VREADER_DESTROY = 14,
    GENERATE_LOCATE_READER = 15,
    GENERATE_FILESYSTEM = 16,
    CARD_CREATE = 17,
    CARD_DESTROY = 18,
};
pub const TPMVSCMGR_ERROR_IMPERSONATION = TPMVSCMGR_ERROR.IMPERSONATION;
pub const TPMVSCMGR_ERROR_PIN_COMPLEXITY = TPMVSCMGR_ERROR.PIN_COMPLEXITY;
pub const TPMVSCMGR_ERROR_READER_COUNT_LIMIT = TPMVSCMGR_ERROR.READER_COUNT_LIMIT;
pub const TPMVSCMGR_ERROR_TERMINAL_SERVICES_SESSION = TPMVSCMGR_ERROR.TERMINAL_SERVICES_SESSION;
pub const TPMVSCMGR_ERROR_VTPMSMARTCARD_INITIALIZE = TPMVSCMGR_ERROR.VTPMSMARTCARD_INITIALIZE;
pub const TPMVSCMGR_ERROR_VTPMSMARTCARD_CREATE = TPMVSCMGR_ERROR.VTPMSMARTCARD_CREATE;
pub const TPMVSCMGR_ERROR_VTPMSMARTCARD_DESTROY = TPMVSCMGR_ERROR.VTPMSMARTCARD_DESTROY;
pub const TPMVSCMGR_ERROR_VGIDSSIMULATOR_INITIALIZE = TPMVSCMGR_ERROR.VGIDSSIMULATOR_INITIALIZE;
pub const TPMVSCMGR_ERROR_VGIDSSIMULATOR_CREATE = TPMVSCMGR_ERROR.VGIDSSIMULATOR_CREATE;
pub const TPMVSCMGR_ERROR_VGIDSSIMULATOR_DESTROY = TPMVSCMGR_ERROR.VGIDSSIMULATOR_DESTROY;
pub const TPMVSCMGR_ERROR_VGIDSSIMULATOR_WRITE_PROPERTY = TPMVSCMGR_ERROR.VGIDSSIMULATOR_WRITE_PROPERTY;
pub const TPMVSCMGR_ERROR_VGIDSSIMULATOR_READ_PROPERTY = TPMVSCMGR_ERROR.VGIDSSIMULATOR_READ_PROPERTY;
pub const TPMVSCMGR_ERROR_VREADER_INITIALIZE = TPMVSCMGR_ERROR.VREADER_INITIALIZE;
pub const TPMVSCMGR_ERROR_VREADER_CREATE = TPMVSCMGR_ERROR.VREADER_CREATE;
pub const TPMVSCMGR_ERROR_VREADER_DESTROY = TPMVSCMGR_ERROR.VREADER_DESTROY;
pub const TPMVSCMGR_ERROR_GENERATE_LOCATE_READER = TPMVSCMGR_ERROR.GENERATE_LOCATE_READER;
pub const TPMVSCMGR_ERROR_GENERATE_FILESYSTEM = TPMVSCMGR_ERROR.GENERATE_FILESYSTEM;
pub const TPMVSCMGR_ERROR_CARD_CREATE = TPMVSCMGR_ERROR.CARD_CREATE;
pub const TPMVSCMGR_ERROR_CARD_DESTROY = TPMVSCMGR_ERROR.CARD_DESTROY;

const IID_ITpmVirtualSmartCardManagerStatusCallback_Value = @import("../zig.zig").Guid.initString("1A1BB35F-ABB8-451C-A1AE-33D98F1BEF4A");
pub const IID_ITpmVirtualSmartCardManagerStatusCallback = &IID_ITpmVirtualSmartCardManagerStatusCallback_Value;
pub const ITpmVirtualSmartCardManagerStatusCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReportProgress: fn(
            self: *const ITpmVirtualSmartCardManagerStatusCallback,
            Status: TPMVSCMGR_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReportError: fn(
            self: *const ITpmVirtualSmartCardManagerStatusCallback,
            Error: TPMVSCMGR_ERROR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITpmVirtualSmartCardManagerStatusCallback_ReportProgress(self: *const T, Status: TPMVSCMGR_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITpmVirtualSmartCardManagerStatusCallback.VTable, self.vtable).ReportProgress(@ptrCast(*const ITpmVirtualSmartCardManagerStatusCallback, self), Status);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITpmVirtualSmartCardManagerStatusCallback_ReportError(self: *const T, Error: TPMVSCMGR_ERROR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITpmVirtualSmartCardManagerStatusCallback.VTable, self.vtable).ReportError(@ptrCast(*const ITpmVirtualSmartCardManagerStatusCallback, self), Error);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITpmVirtualSmartCardManager_Value = @import("../zig.zig").Guid.initString("112B1DFF-D9DC-41F7-869F-D67FEE7CB591");
pub const IID_ITpmVirtualSmartCardManager = &IID_ITpmVirtualSmartCardManager_Value;
pub const ITpmVirtualSmartCardManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateVirtualSmartCard: fn(
            self: *const ITpmVirtualSmartCardManager,
            pszFriendlyName: [*:0]const u16,
            bAdminAlgId: u8,
            pbAdminKey: [*:0]const u8,
            cbAdminKey: u32,
            pbAdminKcv: [*:0]const u8,
            cbAdminKcv: u32,
            pbPuk: [*:0]const u8,
            cbPuk: u32,
            pbPin: [*:0]const u8,
            cbPin: u32,
            fGenerate: BOOL,
            pStatusCallback: *ITpmVirtualSmartCardManagerStatusCallback,
            ppszInstanceId: *PWSTR,
            pfNeedReboot: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyVirtualSmartCard: fn(
            self: *const ITpmVirtualSmartCardManager,
            pszInstanceId: [*:0]const u16,
            pStatusCallback: *ITpmVirtualSmartCardManagerStatusCallback,
            pfNeedReboot: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITpmVirtualSmartCardManager_CreateVirtualSmartCard(self: *const T, pszFriendlyName: [*:0]const u16, bAdminAlgId: u8, pbAdminKey: [*:0]const u8, cbAdminKey: u32, pbAdminKcv: [*:0]const u8, cbAdminKcv: u32, pbPuk: [*:0]const u8, cbPuk: u32, pbPin: [*:0]const u8, cbPin: u32, fGenerate: BOOL, pStatusCallback: *ITpmVirtualSmartCardManagerStatusCallback, ppszInstanceId: *PWSTR, pfNeedReboot: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITpmVirtualSmartCardManager.VTable, self.vtable).CreateVirtualSmartCard(@ptrCast(*const ITpmVirtualSmartCardManager, self), pszFriendlyName, bAdminAlgId, pbAdminKey, cbAdminKey, pbAdminKcv, cbAdminKcv, pbPuk, cbPuk, pbPin, cbPin, fGenerate, pStatusCallback, ppszInstanceId, pfNeedReboot);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITpmVirtualSmartCardManager_DestroyVirtualSmartCard(self: *const T, pszInstanceId: [*:0]const u16, pStatusCallback: *ITpmVirtualSmartCardManagerStatusCallback, pfNeedReboot: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITpmVirtualSmartCardManager.VTable, self.vtable).DestroyVirtualSmartCard(@ptrCast(*const ITpmVirtualSmartCardManager, self), pszInstanceId, pStatusCallback, pfNeedReboot);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITpmVirtualSmartCardManager2_Value = @import("../zig.zig").Guid.initString("FDF8A2B9-02DE-47F4-BC26-AA85AB5E5267");
pub const IID_ITpmVirtualSmartCardManager2 = &IID_ITpmVirtualSmartCardManager2_Value;
pub const ITpmVirtualSmartCardManager2 = extern struct {
    pub const VTable = extern struct {
        base: ITpmVirtualSmartCardManager.VTable,
        CreateVirtualSmartCardWithPinPolicy: fn(
            self: *const ITpmVirtualSmartCardManager2,
            pszFriendlyName: [*:0]const u16,
            bAdminAlgId: u8,
            pbAdminKey: [*:0]const u8,
            cbAdminKey: u32,
            pbAdminKcv: [*:0]const u8,
            cbAdminKcv: u32,
            pbPuk: [*:0]const u8,
            cbPuk: u32,
            pbPin: [*:0]const u8,
            cbPin: u32,
            pbPinPolicy: [*:0]const u8,
            cbPinPolicy: u32,
            fGenerate: BOOL,
            pStatusCallback: *ITpmVirtualSmartCardManagerStatusCallback,
            ppszInstanceId: *PWSTR,
            pfNeedReboot: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ITpmVirtualSmartCardManager.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITpmVirtualSmartCardManager2_CreateVirtualSmartCardWithPinPolicy(self: *const T, pszFriendlyName: [*:0]const u16, bAdminAlgId: u8, pbAdminKey: [*:0]const u8, cbAdminKey: u32, pbAdminKcv: [*:0]const u8, cbAdminKcv: u32, pbPuk: [*:0]const u8, cbPuk: u32, pbPin: [*:0]const u8, cbPin: u32, pbPinPolicy: [*:0]const u8, cbPinPolicy: u32, fGenerate: BOOL, pStatusCallback: *ITpmVirtualSmartCardManagerStatusCallback, ppszInstanceId: *PWSTR, pfNeedReboot: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITpmVirtualSmartCardManager2.VTable, self.vtable).CreateVirtualSmartCardWithPinPolicy(@ptrCast(*const ITpmVirtualSmartCardManager2, self), pszFriendlyName, bAdminAlgId, pbAdminKey, cbAdminKey, pbAdminKcv, cbAdminKcv, pbPuk, cbPuk, pbPin, cbPin, pbPinPolicy, cbPinPolicy, fGenerate, pStatusCallback, ppszInstanceId, pfNeedReboot);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITpmVirtualSmartCardManager3_Value = @import("../zig.zig").Guid.initString("3C745A97-F375-4150-BE17-5950F694C699");
pub const IID_ITpmVirtualSmartCardManager3 = &IID_ITpmVirtualSmartCardManager3_Value;
pub const ITpmVirtualSmartCardManager3 = extern struct {
    pub const VTable = extern struct {
        base: ITpmVirtualSmartCardManager2.VTable,
        CreateVirtualSmartCardWithAttestation: fn(
            self: *const ITpmVirtualSmartCardManager3,
            pszFriendlyName: [*:0]const u16,
            bAdminAlgId: u8,
            pbAdminKey: [*:0]const u8,
            cbAdminKey: u32,
            pbAdminKcv: [*:0]const u8,
            cbAdminKcv: u32,
            pbPuk: [*:0]const u8,
            cbPuk: u32,
            pbPin: [*:0]const u8,
            cbPin: u32,
            pbPinPolicy: [*:0]const u8,
            cbPinPolicy: u32,
            attestationType: TPMVSC_ATTESTATION_TYPE,
            fGenerate: BOOL,
            pStatusCallback: *ITpmVirtualSmartCardManagerStatusCallback,
            ppszInstanceId: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ITpmVirtualSmartCardManager2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITpmVirtualSmartCardManager3_CreateVirtualSmartCardWithAttestation(self: *const T, pszFriendlyName: [*:0]const u16, bAdminAlgId: u8, pbAdminKey: [*:0]const u8, cbAdminKey: u32, pbAdminKcv: [*:0]const u8, cbAdminKcv: u32, pbPuk: [*:0]const u8, cbPuk: u32, pbPin: [*:0]const u8, cbPin: u32, pbPinPolicy: [*:0]const u8, cbPinPolicy: u32, attestationType: TPMVSC_ATTESTATION_TYPE, fGenerate: BOOL, pStatusCallback: *ITpmVirtualSmartCardManagerStatusCallback, ppszInstanceId: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITpmVirtualSmartCardManager3.VTable, self.vtable).CreateVirtualSmartCardWithAttestation(@ptrCast(*const ITpmVirtualSmartCardManager3, self), pszFriendlyName, bAdminAlgId, pbAdminKey, cbAdminKey, pbAdminKcv, cbAdminKcv, pbPuk, cbPuk, pbPin, cbPin, pbPinPolicy, cbPinPolicy, attestationType, fGenerate, pStatusCallback, ppszInstanceId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const KeyCredentialManagerOperationErrorStates = extern enum(i32) {
    KeyCredentialManagerOperationErrorStateNone = 0,
    KeyCredentialManagerOperationErrorStateDeviceJoinFailure = 1,
    KeyCredentialManagerOperationErrorStateTokenFailure = 2,
    KeyCredentialManagerOperationErrorStateCertificateFailure = 4,
    KeyCredentialManagerOperationErrorStateRemoteSessionFailure = 8,
    KeyCredentialManagerOperationErrorStatePolicyFailure = 16,
    KeyCredentialManagerOperationErrorStateHardwareFailure = 32,
    KeyCredentialManagerOperationErrorStatePinExistsFailure = 64,
};
pub const KeyCredentialManagerOperationErrorStateNone = KeyCredentialManagerOperationErrorStates.KeyCredentialManagerOperationErrorStateNone;
pub const KeyCredentialManagerOperationErrorStateDeviceJoinFailure = KeyCredentialManagerOperationErrorStates.KeyCredentialManagerOperationErrorStateDeviceJoinFailure;
pub const KeyCredentialManagerOperationErrorStateTokenFailure = KeyCredentialManagerOperationErrorStates.KeyCredentialManagerOperationErrorStateTokenFailure;
pub const KeyCredentialManagerOperationErrorStateCertificateFailure = KeyCredentialManagerOperationErrorStates.KeyCredentialManagerOperationErrorStateCertificateFailure;
pub const KeyCredentialManagerOperationErrorStateRemoteSessionFailure = KeyCredentialManagerOperationErrorStates.KeyCredentialManagerOperationErrorStateRemoteSessionFailure;
pub const KeyCredentialManagerOperationErrorStatePolicyFailure = KeyCredentialManagerOperationErrorStates.KeyCredentialManagerOperationErrorStatePolicyFailure;
pub const KeyCredentialManagerOperationErrorStateHardwareFailure = KeyCredentialManagerOperationErrorStates.KeyCredentialManagerOperationErrorStateHardwareFailure;
pub const KeyCredentialManagerOperationErrorStatePinExistsFailure = KeyCredentialManagerOperationErrorStates.KeyCredentialManagerOperationErrorStatePinExistsFailure;

pub const KeyCredentialManagerOperationType = extern enum(i32) {
    KeyCredentialManagerProvisioning = 0,
    KeyCredentialManagerPinChange = 1,
    KeyCredentialManagerPinReset = 2,
};
pub const KeyCredentialManagerProvisioning = KeyCredentialManagerOperationType.KeyCredentialManagerProvisioning;
pub const KeyCredentialManagerPinChange = KeyCredentialManagerOperationType.KeyCredentialManagerPinChange;
pub const KeyCredentialManagerPinReset = KeyCredentialManagerOperationType.KeyCredentialManagerPinReset;

pub const KeyCredentialManagerInfo = extern struct {
    containerId: Guid,
};

pub const IDENTITY_TYPE = extern enum(i32) {
    IDENTITIES_ALL = 0,
    IDENTITIES_ME_ONLY = 1,
};
pub const IDENTITIES_ALL = IDENTITY_TYPE.IDENTITIES_ALL;
pub const IDENTITIES_ME_ONLY = IDENTITY_TYPE.IDENTITIES_ME_ONLY;

pub const PF_NPAddConnection = fn(
    lpNetResource: *NETRESOURCEW,
    lpPassword: ?PWSTR,
    lpUserName: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPAddConnection3 = fn(
    hwndOwner: HWND,
    lpNetResource: *NETRESOURCEW,
    lpPassword: ?PWSTR,
    lpUserName: ?PWSTR,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPAddConnection4 = fn(
    hwndOwner: HWND,
    lpNetResource: *NETRESOURCEW,
    lpAuthBuffer: ?[*]u8,
    cbAuthBuffer: u32,
    dwFlags: u32,
    lpUseOptions: ?[*:0]u8,
    cbUseOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPCancelConnection = fn(
    lpName: PWSTR,
    fForce: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPGetConnection = fn(
    lpLocalName: PWSTR,
    lpRemoteName: ?[*:0]u16,
    lpnBufferLen: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPGetConnection3 = fn(
    lpLocalName: [*:0]const u16,
    dwLevel: u32,
    lpBuffer: [*]u8,
    lpBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPGetUniversalName = fn(
    lpLocalPath: [*:0]const u16,
    dwInfoLevel: u32,
    lpBuffer: [*]u8,
    lpnBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPGetConnectionPerformance = fn(
    lpRemoteName: [*:0]const u16,
    lpNetConnectInfo: *NETCONNECTINFOSTRUCT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPOpenEnum = fn(
    dwScope: u32,
    dwType: u32,
    dwUsage: u32,
    lpNetResource: ?*NETRESOURCEW,
    lphEnum: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPEnumResource = fn(
    hEnum: HANDLE,
    lpcCount: *u32,
    lpBuffer: *c_void,
    lpBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPCloseEnum = fn(
    hEnum: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPGetCaps = fn(
    ndex: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPGetUser = fn(
    lpName: PWSTR,
    lpUserName: [*:0]u16,
    lpnBufferLen: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPGetPersistentUseOptionsForConnection = fn(
    lpRemotePath: PWSTR,
    lpReadUseOptions: [*:0]u8,
    cbReadUseOptions: u32,
    lpWriteUseOptions: [*:0]u8,
    lpSizeWriteUseOptions: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPDeviceMode = fn(
    hParent: HWND,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPSearchDialog = fn(
    hwndParent: HWND,
    lpNetResource: ?*NETRESOURCEW,
    lpBuffer: [*]u8,
    cbBuffer: u32,
    lpnFlags: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPGetResourceParent = fn(
    lpNetResource: *NETRESOURCEW,
    lpBuffer: [*]u8,
    lpBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPGetResourceInformation = fn(
    lpNetResource: *NETRESOURCEW,
    lpBuffer: [*]u8,
    lpBufferSize: *u32,
    lplpSystem: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPFormatNetworkName = fn(
    lpRemoteName: PWSTR,
    lpFormattedName: [*:0]u16,
    lpnLength: *u32,
    dwFlags: u32,
    dwAveCharPerLine: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPGetPropertyText = fn(
    iButton: u32,
    nPropSel: u32,
    lpName: PWSTR,
    lpButtonName: [*:0]u16,
    nButtonNameLen: u32,
    nType: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPPropertyDialog = fn(
    hwndParent: HWND,
    iButtonDlg: u32,
    nPropSel: u32,
    lpFileName: PWSTR,
    nType: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPGetDirectoryType = fn(
    lpName: PWSTR,
    lpType: *i32,
    bFlushCache: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPDirectoryNotify = fn(
    hwnd: HWND,
    lpDir: PWSTR,
    dwOper: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPLogonNotify = fn(
    lpLogonId: *LUID,
    lpAuthentInfoType: [*:0]const u16,
    lpAuthentInfo: *c_void,
    lpPreviousAuthentInfoType: ?[*:0]const u16,
    lpPreviousAuthentInfo: ?*c_void,
    lpStationName: PWSTR,
    StationHandle: ?*c_void,
    lpLogonScript: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPPasswordChangeNotify = fn(
    lpAuthentInfoType: [*:0]const u16,
    lpAuthentInfo: *c_void,
    lpPreviousAuthentInfoType: [*:0]const u16,
    lpPreviousAuthentInfo: *c_void,
    lpStationName: PWSTR,
    StationHandle: ?*c_void,
    dwChangeInfo: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const NOTIFYINFO = extern struct {
    dwNotifyStatus: u32,
    dwOperationStatus: u32,
    lpContext: *c_void,
};

pub const NOTIFYADD = extern struct {
    hwndOwner: HWND,
    NetResource: NETRESOURCEA,
    dwAddFlags: u32,
};

pub const NOTIFYCANCEL = extern struct {
    lpName: PWSTR,
    lpProvider: PWSTR,
    dwFlags: u32,
    fForce: BOOL,
};

pub const PF_AddConnectNotify = fn(
    lpNotifyInfo: *NOTIFYINFO,
    lpAddInfo: *NOTIFYADD,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_CancelConnectNotify = fn(
    lpNotifyInfo: *NOTIFYINFO,
    lpCancelInfo: *NOTIFYCANCEL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPFMXGetPermCaps = fn(
    lpDriveName: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPFMXEditPerm = fn(
    lpDriveName: PWSTR,
    hwndFMX: HWND,
    nDialogType: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_NPFMXGetPermHelp = fn(
    lpDriveName: PWSTR,
    nDialogType: u32,
    fDirectory: BOOL,
    lpFileNameBuffer: [*]u8,
    lpBufferSize: *u32,
    lpnHelpContext: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const LOGON_HOURS = extern struct {
    UnitsPerWeek: u16,
    LogonHours: *u8,
};

pub const SR_SECURITY_DESCRIPTOR = extern struct {
    Length: u32,
    SecurityDescriptor: *u8,
};

pub const USER_ALL_INFORMATION = extern struct {
    LastLogon: LARGE_INTEGER,
    LastLogoff: LARGE_INTEGER,
    PasswordLastSet: LARGE_INTEGER,
    AccountExpires: LARGE_INTEGER,
    PasswordCanChange: LARGE_INTEGER,
    PasswordMustChange: LARGE_INTEGER,
    UserName: UNICODE_STRING,
    FullName: UNICODE_STRING,
    HomeDirectory: UNICODE_STRING,
    HomeDirectoryDrive: UNICODE_STRING,
    ScriptPath: UNICODE_STRING,
    ProfilePath: UNICODE_STRING,
    AdminComment: UNICODE_STRING,
    WorkStations: UNICODE_STRING,
    UserComment: UNICODE_STRING,
    Parameters: UNICODE_STRING,
    LmPassword: UNICODE_STRING,
    NtPassword: UNICODE_STRING,
    PrivateData: UNICODE_STRING,
    SecurityDescriptor: SR_SECURITY_DESCRIPTOR,
    UserId: u32,
    PrimaryGroupId: u32,
    UserAccountControl: u32,
    WhichFields: u32,
    LogonHours: LOGON_HOURS,
    BadPasswordCount: u16,
    LogonCount: u16,
    CountryCode: u16,
    CodePage: u16,
    LmPasswordPresent: u8,
    NtPasswordPresent: u8,
    PasswordExpired: u8,
    PrivateDataSensitive: u8,
};

pub const CLEAR_BLOCK = extern struct {
    data: [8]i8,
};

pub const USER_SESSION_KEY = extern struct {
    data: [2]CYPHER_BLOCK,
};

pub const NETLOGON_LOGON_INFO_CLASS = extern enum(i32) {
    NetlogonInteractiveInformation = 1,
    NetlogonNetworkInformation = 2,
    NetlogonServiceInformation = 3,
    NetlogonGenericInformation = 4,
    NetlogonInteractiveTransitiveInformation = 5,
    NetlogonNetworkTransitiveInformation = 6,
    NetlogonServiceTransitiveInformation = 7,
};
pub const NetlogonInteractiveInformation = NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation;
pub const NetlogonNetworkInformation = NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation;
pub const NetlogonServiceInformation = NETLOGON_LOGON_INFO_CLASS.NetlogonServiceInformation;
pub const NetlogonGenericInformation = NETLOGON_LOGON_INFO_CLASS.NetlogonGenericInformation;
pub const NetlogonInteractiveTransitiveInformation = NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveTransitiveInformation;
pub const NetlogonNetworkTransitiveInformation = NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkTransitiveInformation;
pub const NetlogonServiceTransitiveInformation = NETLOGON_LOGON_INFO_CLASS.NetlogonServiceTransitiveInformation;

pub const NETLOGON_LOGON_IDENTITY_INFO = extern struct {
    LogonDomainName: UNICODE_STRING,
    ParameterControl: u32,
    LogonId: LARGE_INTEGER,
    UserName: UNICODE_STRING,
    Workstation: UNICODE_STRING,
};

pub const NETLOGON_INTERACTIVE_INFO = extern struct {
    Identity: NETLOGON_LOGON_IDENTITY_INFO,
    LmOwfPassword: LM_OWF_PASSWORD,
    NtOwfPassword: LM_OWF_PASSWORD,
};

pub const NETLOGON_SERVICE_INFO = extern struct {
    Identity: NETLOGON_LOGON_IDENTITY_INFO,
    LmOwfPassword: LM_OWF_PASSWORD,
    NtOwfPassword: LM_OWF_PASSWORD,
};

pub const NETLOGON_NETWORK_INFO = extern struct {
    Identity: NETLOGON_LOGON_IDENTITY_INFO,
    LmChallenge: CLEAR_BLOCK,
    NtChallengeResponse: STRING,
    LmChallengeResponse: STRING,
};

pub const NETLOGON_GENERIC_INFO = extern struct {
    Identity: NETLOGON_LOGON_IDENTITY_INFO,
    PackageName: UNICODE_STRING,
    DataLength: u32,
    LogonData: *u8,
};

pub const MSV1_0_VALIDATION_INFO = extern struct {
    LogoffTime: LARGE_INTEGER,
    KickoffTime: LARGE_INTEGER,
    LogonServer: UNICODE_STRING,
    LogonDomainName: UNICODE_STRING,
    SessionKey: USER_SESSION_KEY,
    Authoritative: u8,
    UserFlags: u32,
    WhichFields: u32,
    UserId: u32,
};

pub const tag_IdentityUpdateEvent = extern enum(i32) {
    IDENTITY_ASSOCIATED = 1,
    IDENTITY_DISASSOCIATED = 2,
    IDENTITY_CREATED = 4,
    IDENTITY_IMPORTED = 8,
    IDENTITY_DELETED = 16,
    IDENTITY_PROPCHANGED = 32,
    IDENTITY_CONNECTED = 64,
    IDENTITY_DISCONNECTED = 128,
};
pub const IDENTITY_ASSOCIATED = tag_IdentityUpdateEvent.IDENTITY_ASSOCIATED;
pub const IDENTITY_DISASSOCIATED = tag_IdentityUpdateEvent.IDENTITY_DISASSOCIATED;
pub const IDENTITY_CREATED = tag_IdentityUpdateEvent.IDENTITY_CREATED;
pub const IDENTITY_IMPORTED = tag_IdentityUpdateEvent.IDENTITY_IMPORTED;
pub const IDENTITY_DELETED = tag_IdentityUpdateEvent.IDENTITY_DELETED;
pub const IDENTITY_PROPCHANGED = tag_IdentityUpdateEvent.IDENTITY_PROPCHANGED;
pub const IDENTITY_CONNECTED = tag_IdentityUpdateEvent.IDENTITY_CONNECTED;
pub const IDENTITY_DISCONNECTED = tag_IdentityUpdateEvent.IDENTITY_DISCONNECTED;

const IID_IIdentityAdvise_Value = @import("../zig.zig").Guid.initString("4E982FED-D14B-440C-B8D6-BB386453D386");
pub const IID_IIdentityAdvise = &IID_IIdentityAdvise_Value;
pub const IIdentityAdvise = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IdentityUpdated: fn(
            self: *const IIdentityAdvise,
            dwIdentityUpdateEvents: u32,
            lpszUniqueID: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityAdvise_IdentityUpdated(self: *const T, dwIdentityUpdateEvents: u32, lpszUniqueID: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityAdvise.VTable, self.vtable).IdentityUpdated(@ptrCast(*const IIdentityAdvise, self), dwIdentityUpdateEvents, lpszUniqueID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_AsyncIIdentityAdvise_Value = @import("../zig.zig").Guid.initString("3AB4C8DA-D038-4830-8DD9-3253C55A127F");
pub const IID_AsyncIIdentityAdvise = &IID_AsyncIIdentityAdvise_Value;
pub const AsyncIIdentityAdvise = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin_IdentityUpdated: fn(
            self: *const AsyncIIdentityAdvise,
            dwIdentityUpdateEvents: u32,
            lpszUniqueID: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_IdentityUpdated: fn(
            self: *const AsyncIIdentityAdvise,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityAdvise_Begin_IdentityUpdated(self: *const T, dwIdentityUpdateEvents: u32, lpszUniqueID: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityAdvise.VTable, self.vtable).Begin_IdentityUpdated(@ptrCast(*const AsyncIIdentityAdvise, self), dwIdentityUpdateEvents, lpszUniqueID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityAdvise_Finish_IdentityUpdated(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityAdvise.VTable, self.vtable).Finish_IdentityUpdated(@ptrCast(*const AsyncIIdentityAdvise, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IIdentityProvider_Value = @import("../zig.zig").Guid.initString("0D1B9E0C-E8BA-4F55-A81B-BCE934B948F5");
pub const IID_IIdentityProvider = &IID_IIdentityProvider_Value;
pub const IIdentityProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIdentityEnum: fn(
            self: *const IIdentityProvider,
            eIdentityType: IDENTITY_TYPE,
            pFilterkey: ?*const PROPERTYKEY,
            pFilterPropVarValue: ?*const PROPVARIANT,
            ppIdentityEnum: **IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: fn(
            self: *const IIdentityProvider,
            lpszUserName: [*:0]const u16,
            ppPropertyStore: **IPropertyStore,
            pKeywordsToAdd: *const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Import: fn(
            self: *const IIdentityProvider,
            pPropertyStore: ?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: fn(
            self: *const IIdentityProvider,
            lpszUniqueID: [*:0]const u16,
            pKeywordsToDelete: *const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindByUniqueID: fn(
            self: *const IIdentityProvider,
            lpszUniqueID: [*:0]const u16,
            ppPropertyStore: **IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProviderPropertyStore: fn(
            self: *const IIdentityProvider,
            ppPropertyStore: **IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: fn(
            self: *const IIdentityProvider,
            pIdentityAdvise: ?*IIdentityAdvise,
            dwIdentityUpdateEvents: u32,
            pdwCookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnAdvise: fn(
            self: *const IIdentityProvider,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityProvider_GetIdentityEnum(self: *const T, eIdentityType: IDENTITY_TYPE, pFilterkey: ?*const PROPERTYKEY, pFilterPropVarValue: ?*const PROPVARIANT, ppIdentityEnum: **IEnumUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityProvider.VTable, self.vtable).GetIdentityEnum(@ptrCast(*const IIdentityProvider, self), eIdentityType, pFilterkey, pFilterPropVarValue, ppIdentityEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityProvider_Create(self: *const T, lpszUserName: [*:0]const u16, ppPropertyStore: **IPropertyStore, pKeywordsToAdd: *const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityProvider.VTable, self.vtable).Create(@ptrCast(*const IIdentityProvider, self), lpszUserName, ppPropertyStore, pKeywordsToAdd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityProvider_Import(self: *const T, pPropertyStore: ?*IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityProvider.VTable, self.vtable).Import(@ptrCast(*const IIdentityProvider, self), pPropertyStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityProvider_Delete(self: *const T, lpszUniqueID: [*:0]const u16, pKeywordsToDelete: *const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityProvider.VTable, self.vtable).Delete(@ptrCast(*const IIdentityProvider, self), lpszUniqueID, pKeywordsToDelete);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityProvider_FindByUniqueID(self: *const T, lpszUniqueID: [*:0]const u16, ppPropertyStore: **IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityProvider.VTable, self.vtable).FindByUniqueID(@ptrCast(*const IIdentityProvider, self), lpszUniqueID, ppPropertyStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityProvider_GetProviderPropertyStore(self: *const T, ppPropertyStore: **IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityProvider.VTable, self.vtable).GetProviderPropertyStore(@ptrCast(*const IIdentityProvider, self), ppPropertyStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityProvider_Advise(self: *const T, pIdentityAdvise: ?*IIdentityAdvise, dwIdentityUpdateEvents: u32, pdwCookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityProvider.VTable, self.vtable).Advise(@ptrCast(*const IIdentityProvider, self), pIdentityAdvise, dwIdentityUpdateEvents, pdwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityProvider_UnAdvise(self: *const T, dwCookie: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityProvider.VTable, self.vtable).UnAdvise(@ptrCast(*const IIdentityProvider, self), dwCookie);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_AsyncIIdentityProvider_Value = @import("../zig.zig").Guid.initString("C6FC9901-C433-4646-8F48-4E4687AAE2A0");
pub const IID_AsyncIIdentityProvider = &IID_AsyncIIdentityProvider_Value;
pub const AsyncIIdentityProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin_GetIdentityEnum: fn(
            self: *const AsyncIIdentityProvider,
            eIdentityType: IDENTITY_TYPE,
            pFilterkey: ?*const PROPERTYKEY,
            pFilterPropVarValue: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_GetIdentityEnum: fn(
            self: *const AsyncIIdentityProvider,
            ppIdentityEnum: **IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_Create: fn(
            self: *const AsyncIIdentityProvider,
            lpszUserName: [*:0]const u16,
            pKeywordsToAdd: *const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_Create: fn(
            self: *const AsyncIIdentityProvider,
            ppPropertyStore: **IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_Import: fn(
            self: *const AsyncIIdentityProvider,
            pPropertyStore: ?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_Import: fn(
            self: *const AsyncIIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_Delete: fn(
            self: *const AsyncIIdentityProvider,
            lpszUniqueID: [*:0]const u16,
            pKeywordsToDelete: *const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_Delete: fn(
            self: *const AsyncIIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_FindByUniqueID: fn(
            self: *const AsyncIIdentityProvider,
            lpszUniqueID: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_FindByUniqueID: fn(
            self: *const AsyncIIdentityProvider,
            ppPropertyStore: **IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_GetProviderPropertyStore: fn(
            self: *const AsyncIIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_GetProviderPropertyStore: fn(
            self: *const AsyncIIdentityProvider,
            ppPropertyStore: **IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_Advise: fn(
            self: *const AsyncIIdentityProvider,
            pIdentityAdvise: ?*IIdentityAdvise,
            dwIdentityUpdateEvents: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_Advise: fn(
            self: *const AsyncIIdentityProvider,
            pdwCookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_UnAdvise: fn(
            self: *const AsyncIIdentityProvider,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_UnAdvise: fn(
            self: *const AsyncIIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityProvider_Begin_GetIdentityEnum(self: *const T, eIdentityType: IDENTITY_TYPE, pFilterkey: ?*const PROPERTYKEY, pFilterPropVarValue: ?*const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityProvider.VTable, self.vtable).Begin_GetIdentityEnum(@ptrCast(*const AsyncIIdentityProvider, self), eIdentityType, pFilterkey, pFilterPropVarValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityProvider_Finish_GetIdentityEnum(self: *const T, ppIdentityEnum: **IEnumUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityProvider.VTable, self.vtable).Finish_GetIdentityEnum(@ptrCast(*const AsyncIIdentityProvider, self), ppIdentityEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityProvider_Begin_Create(self: *const T, lpszUserName: [*:0]const u16, pKeywordsToAdd: *const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityProvider.VTable, self.vtable).Begin_Create(@ptrCast(*const AsyncIIdentityProvider, self), lpszUserName, pKeywordsToAdd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityProvider_Finish_Create(self: *const T, ppPropertyStore: **IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityProvider.VTable, self.vtable).Finish_Create(@ptrCast(*const AsyncIIdentityProvider, self), ppPropertyStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityProvider_Begin_Import(self: *const T, pPropertyStore: ?*IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityProvider.VTable, self.vtable).Begin_Import(@ptrCast(*const AsyncIIdentityProvider, self), pPropertyStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityProvider_Finish_Import(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityProvider.VTable, self.vtable).Finish_Import(@ptrCast(*const AsyncIIdentityProvider, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityProvider_Begin_Delete(self: *const T, lpszUniqueID: [*:0]const u16, pKeywordsToDelete: *const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityProvider.VTable, self.vtable).Begin_Delete(@ptrCast(*const AsyncIIdentityProvider, self), lpszUniqueID, pKeywordsToDelete);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityProvider_Finish_Delete(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityProvider.VTable, self.vtable).Finish_Delete(@ptrCast(*const AsyncIIdentityProvider, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityProvider_Begin_FindByUniqueID(self: *const T, lpszUniqueID: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityProvider.VTable, self.vtable).Begin_FindByUniqueID(@ptrCast(*const AsyncIIdentityProvider, self), lpszUniqueID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityProvider_Finish_FindByUniqueID(self: *const T, ppPropertyStore: **IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityProvider.VTable, self.vtable).Finish_FindByUniqueID(@ptrCast(*const AsyncIIdentityProvider, self), ppPropertyStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityProvider_Begin_GetProviderPropertyStore(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityProvider.VTable, self.vtable).Begin_GetProviderPropertyStore(@ptrCast(*const AsyncIIdentityProvider, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityProvider_Finish_GetProviderPropertyStore(self: *const T, ppPropertyStore: **IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityProvider.VTable, self.vtable).Finish_GetProviderPropertyStore(@ptrCast(*const AsyncIIdentityProvider, self), ppPropertyStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityProvider_Begin_Advise(self: *const T, pIdentityAdvise: ?*IIdentityAdvise, dwIdentityUpdateEvents: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityProvider.VTable, self.vtable).Begin_Advise(@ptrCast(*const AsyncIIdentityProvider, self), pIdentityAdvise, dwIdentityUpdateEvents);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityProvider_Finish_Advise(self: *const T, pdwCookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityProvider.VTable, self.vtable).Finish_Advise(@ptrCast(*const AsyncIIdentityProvider, self), pdwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityProvider_Begin_UnAdvise(self: *const T, dwCookie: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityProvider.VTable, self.vtable).Begin_UnAdvise(@ptrCast(*const AsyncIIdentityProvider, self), dwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityProvider_Finish_UnAdvise(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityProvider.VTable, self.vtable).Finish_UnAdvise(@ptrCast(*const AsyncIIdentityProvider, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAssociatedIdentityProvider_Value = @import("../zig.zig").Guid.initString("2AF066B3-4CBB-4CBA-A798-204B6AF68CC0");
pub const IID_IAssociatedIdentityProvider = &IID_IAssociatedIdentityProvider_Value;
pub const IAssociatedIdentityProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AssociateIdentity: fn(
            self: *const IAssociatedIdentityProvider,
            hwndParent: HWND,
            ppPropertyStore: **IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisassociateIdentity: fn(
            self: *const IAssociatedIdentityProvider,
            hwndParent: HWND,
            lpszUniqueID: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChangeCredential: fn(
            self: *const IAssociatedIdentityProvider,
            hwndParent: HWND,
            lpszUniqueID: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAssociatedIdentityProvider_AssociateIdentity(self: *const T, hwndParent: HWND, ppPropertyStore: **IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAssociatedIdentityProvider.VTable, self.vtable).AssociateIdentity(@ptrCast(*const IAssociatedIdentityProvider, self), hwndParent, ppPropertyStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAssociatedIdentityProvider_DisassociateIdentity(self: *const T, hwndParent: HWND, lpszUniqueID: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAssociatedIdentityProvider.VTable, self.vtable).DisassociateIdentity(@ptrCast(*const IAssociatedIdentityProvider, self), hwndParent, lpszUniqueID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAssociatedIdentityProvider_ChangeCredential(self: *const T, hwndParent: HWND, lpszUniqueID: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAssociatedIdentityProvider.VTable, self.vtable).ChangeCredential(@ptrCast(*const IAssociatedIdentityProvider, self), hwndParent, lpszUniqueID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_AsyncIAssociatedIdentityProvider_Value = @import("../zig.zig").Guid.initString("2834D6ED-297E-4E72-8A51-961E86F05152");
pub const IID_AsyncIAssociatedIdentityProvider = &IID_AsyncIAssociatedIdentityProvider_Value;
pub const AsyncIAssociatedIdentityProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin_AssociateIdentity: fn(
            self: *const AsyncIAssociatedIdentityProvider,
            hwndParent: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_AssociateIdentity: fn(
            self: *const AsyncIAssociatedIdentityProvider,
            ppPropertyStore: **IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_DisassociateIdentity: fn(
            self: *const AsyncIAssociatedIdentityProvider,
            hwndParent: HWND,
            lpszUniqueID: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_DisassociateIdentity: fn(
            self: *const AsyncIAssociatedIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_ChangeCredential: fn(
            self: *const AsyncIAssociatedIdentityProvider,
            hwndParent: HWND,
            lpszUniqueID: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_ChangeCredential: fn(
            self: *const AsyncIAssociatedIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIAssociatedIdentityProvider_Begin_AssociateIdentity(self: *const T, hwndParent: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIAssociatedIdentityProvider.VTable, self.vtable).Begin_AssociateIdentity(@ptrCast(*const AsyncIAssociatedIdentityProvider, self), hwndParent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIAssociatedIdentityProvider_Finish_AssociateIdentity(self: *const T, ppPropertyStore: **IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIAssociatedIdentityProvider.VTable, self.vtable).Finish_AssociateIdentity(@ptrCast(*const AsyncIAssociatedIdentityProvider, self), ppPropertyStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIAssociatedIdentityProvider_Begin_DisassociateIdentity(self: *const T, hwndParent: HWND, lpszUniqueID: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIAssociatedIdentityProvider.VTable, self.vtable).Begin_DisassociateIdentity(@ptrCast(*const AsyncIAssociatedIdentityProvider, self), hwndParent, lpszUniqueID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIAssociatedIdentityProvider_Finish_DisassociateIdentity(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIAssociatedIdentityProvider.VTable, self.vtable).Finish_DisassociateIdentity(@ptrCast(*const AsyncIAssociatedIdentityProvider, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIAssociatedIdentityProvider_Begin_ChangeCredential(self: *const T, hwndParent: HWND, lpszUniqueID: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIAssociatedIdentityProvider.VTable, self.vtable).Begin_ChangeCredential(@ptrCast(*const AsyncIAssociatedIdentityProvider, self), hwndParent, lpszUniqueID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIAssociatedIdentityProvider_Finish_ChangeCredential(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIAssociatedIdentityProvider.VTable, self.vtable).Finish_ChangeCredential(@ptrCast(*const AsyncIAssociatedIdentityProvider, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const __MIDL___MIDL_itf_identityprovider_0000_0003_0001 = extern enum(i32) {
    IDENTITY_URL_CREATE_ACCOUNT_WIZARD = 0,
    IDENTITY_URL_SIGN_IN_WIZARD = 1,
    IDENTITY_URL_CHANGE_PASSWORD_WIZARD = 2,
    IDENTITY_URL_IFEXISTS_WIZARD = 3,
    IDENTITY_URL_ACCOUNT_SETTINGS = 4,
    IDENTITY_URL_RESTORE_WIZARD = 5,
    IDENTITY_URL_CONNECT_WIZARD = 6,
};
pub const IDENTITY_URL_CREATE_ACCOUNT_WIZARD = __MIDL___MIDL_itf_identityprovider_0000_0003_0001.IDENTITY_URL_CREATE_ACCOUNT_WIZARD;
pub const IDENTITY_URL_SIGN_IN_WIZARD = __MIDL___MIDL_itf_identityprovider_0000_0003_0001.IDENTITY_URL_SIGN_IN_WIZARD;
pub const IDENTITY_URL_CHANGE_PASSWORD_WIZARD = __MIDL___MIDL_itf_identityprovider_0000_0003_0001.IDENTITY_URL_CHANGE_PASSWORD_WIZARD;
pub const IDENTITY_URL_IFEXISTS_WIZARD = __MIDL___MIDL_itf_identityprovider_0000_0003_0001.IDENTITY_URL_IFEXISTS_WIZARD;
pub const IDENTITY_URL_ACCOUNT_SETTINGS = __MIDL___MIDL_itf_identityprovider_0000_0003_0001.IDENTITY_URL_ACCOUNT_SETTINGS;
pub const IDENTITY_URL_RESTORE_WIZARD = __MIDL___MIDL_itf_identityprovider_0000_0003_0001.IDENTITY_URL_RESTORE_WIZARD;
pub const IDENTITY_URL_CONNECT_WIZARD = __MIDL___MIDL_itf_identityprovider_0000_0003_0001.IDENTITY_URL_CONNECT_WIZARD;

pub const __MIDL___MIDL_itf_identityprovider_0000_0003_0002 = extern enum(i32) {
    NOT_CONNECTED = 0,
    CONNECTING = 1,
    CONNECT_COMPLETED = 2,
};
pub const NOT_CONNECTED = __MIDL___MIDL_itf_identityprovider_0000_0003_0002.NOT_CONNECTED;
pub const CONNECTING = __MIDL___MIDL_itf_identityprovider_0000_0003_0002.CONNECTING;
pub const CONNECT_COMPLETED = __MIDL___MIDL_itf_identityprovider_0000_0003_0002.CONNECT_COMPLETED;

const IID_IConnectedIdentityProvider_Value = @import("../zig.zig").Guid.initString("B7417B54-E08C-429B-96C8-678D1369ECB1");
pub const IID_IConnectedIdentityProvider = &IID_IConnectedIdentityProvider_Value;
pub const IConnectedIdentityProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConnectIdentity: fn(
            self: *const IConnectedIdentityProvider,
            AuthBuffer: [*:0]u8,
            AuthBufferSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisconnectIdentity: fn(
            self: *const IConnectedIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsConnected: fn(
            self: *const IConnectedIdentityProvider,
            Connected: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUrl: fn(
            self: *const IConnectedIdentityProvider,
            Identifier: __MIDL___MIDL_itf_identityprovider_0000_0003_0001,
            Context: ?*IBindCtx,
            PostData: *VARIANT,
            Url: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccountState: fn(
            self: *const IConnectedIdentityProvider,
            pState: *__MIDL___MIDL_itf_identityprovider_0000_0003_0002,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConnectedIdentityProvider_ConnectIdentity(self: *const T, AuthBuffer: [*:0]u8, AuthBufferSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConnectedIdentityProvider.VTable, self.vtable).ConnectIdentity(@ptrCast(*const IConnectedIdentityProvider, self), AuthBuffer, AuthBufferSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConnectedIdentityProvider_DisconnectIdentity(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConnectedIdentityProvider.VTable, self.vtable).DisconnectIdentity(@ptrCast(*const IConnectedIdentityProvider, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConnectedIdentityProvider_IsConnected(self: *const T, Connected: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConnectedIdentityProvider.VTable, self.vtable).IsConnected(@ptrCast(*const IConnectedIdentityProvider, self), Connected);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConnectedIdentityProvider_GetUrl(self: *const T, Identifier: __MIDL___MIDL_itf_identityprovider_0000_0003_0001, Context: ?*IBindCtx, PostData: *VARIANT, Url: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConnectedIdentityProvider.VTable, self.vtable).GetUrl(@ptrCast(*const IConnectedIdentityProvider, self), Identifier, Context, PostData, Url);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConnectedIdentityProvider_GetAccountState(self: *const T, pState: *__MIDL___MIDL_itf_identityprovider_0000_0003_0002) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConnectedIdentityProvider.VTable, self.vtable).GetAccountState(@ptrCast(*const IConnectedIdentityProvider, self), pState);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_AsyncIConnectedIdentityProvider_Value = @import("../zig.zig").Guid.initString("9CE55141-BCE9-4E15-824D-43D79F512F93");
pub const IID_AsyncIConnectedIdentityProvider = &IID_AsyncIConnectedIdentityProvider_Value;
pub const AsyncIConnectedIdentityProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin_ConnectIdentity: fn(
            self: *const AsyncIConnectedIdentityProvider,
            AuthBuffer: [*:0]u8,
            AuthBufferSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_ConnectIdentity: fn(
            self: *const AsyncIConnectedIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_DisconnectIdentity: fn(
            self: *const AsyncIConnectedIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_DisconnectIdentity: fn(
            self: *const AsyncIConnectedIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_IsConnected: fn(
            self: *const AsyncIConnectedIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_IsConnected: fn(
            self: *const AsyncIConnectedIdentityProvider,
            Connected: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_GetUrl: fn(
            self: *const AsyncIConnectedIdentityProvider,
            Identifier: __MIDL___MIDL_itf_identityprovider_0000_0003_0001,
            Context: ?*IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_GetUrl: fn(
            self: *const AsyncIConnectedIdentityProvider,
            PostData: *VARIANT,
            Url: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_GetAccountState: fn(
            self: *const AsyncIConnectedIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_GetAccountState: fn(
            self: *const AsyncIConnectedIdentityProvider,
            pState: *__MIDL___MIDL_itf_identityprovider_0000_0003_0002,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIConnectedIdentityProvider_Begin_ConnectIdentity(self: *const T, AuthBuffer: [*:0]u8, AuthBufferSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIConnectedIdentityProvider.VTable, self.vtable).Begin_ConnectIdentity(@ptrCast(*const AsyncIConnectedIdentityProvider, self), AuthBuffer, AuthBufferSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIConnectedIdentityProvider_Finish_ConnectIdentity(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIConnectedIdentityProvider.VTable, self.vtable).Finish_ConnectIdentity(@ptrCast(*const AsyncIConnectedIdentityProvider, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIConnectedIdentityProvider_Begin_DisconnectIdentity(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIConnectedIdentityProvider.VTable, self.vtable).Begin_DisconnectIdentity(@ptrCast(*const AsyncIConnectedIdentityProvider, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIConnectedIdentityProvider_Finish_DisconnectIdentity(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIConnectedIdentityProvider.VTable, self.vtable).Finish_DisconnectIdentity(@ptrCast(*const AsyncIConnectedIdentityProvider, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIConnectedIdentityProvider_Begin_IsConnected(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIConnectedIdentityProvider.VTable, self.vtable).Begin_IsConnected(@ptrCast(*const AsyncIConnectedIdentityProvider, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIConnectedIdentityProvider_Finish_IsConnected(self: *const T, Connected: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIConnectedIdentityProvider.VTable, self.vtable).Finish_IsConnected(@ptrCast(*const AsyncIConnectedIdentityProvider, self), Connected);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIConnectedIdentityProvider_Begin_GetUrl(self: *const T, Identifier: __MIDL___MIDL_itf_identityprovider_0000_0003_0001, Context: ?*IBindCtx) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIConnectedIdentityProvider.VTable, self.vtable).Begin_GetUrl(@ptrCast(*const AsyncIConnectedIdentityProvider, self), Identifier, Context);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIConnectedIdentityProvider_Finish_GetUrl(self: *const T, PostData: *VARIANT, Url: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIConnectedIdentityProvider.VTable, self.vtable).Finish_GetUrl(@ptrCast(*const AsyncIConnectedIdentityProvider, self), PostData, Url);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIConnectedIdentityProvider_Begin_GetAccountState(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIConnectedIdentityProvider.VTable, self.vtable).Begin_GetAccountState(@ptrCast(*const AsyncIConnectedIdentityProvider, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIConnectedIdentityProvider_Finish_GetAccountState(self: *const T, pState: *__MIDL___MIDL_itf_identityprovider_0000_0003_0002) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIConnectedIdentityProvider.VTable, self.vtable).Finish_GetAccountState(@ptrCast(*const AsyncIConnectedIdentityProvider, self), pState);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IIdentityAuthentication_Value = @import("../zig.zig").Guid.initString("5E7EF254-979F-43B5-B74E-06E4EB7DF0F9");
pub const IID_IIdentityAuthentication = &IID_IIdentityAuthentication_Value;
pub const IIdentityAuthentication = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetIdentityCredential: fn(
            self: *const IIdentityAuthentication,
            CredBuffer: ?[*:0]u8,
            CredBufferLength: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ValidateIdentityCredential: fn(
            self: *const IIdentityAuthentication,
            CredBuffer: [*:0]u8,
            CredBufferLength: u32,
            ppIdentityProperties: ?*?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityAuthentication_SetIdentityCredential(self: *const T, CredBuffer: ?[*:0]u8, CredBufferLength: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityAuthentication.VTable, self.vtable).SetIdentityCredential(@ptrCast(*const IIdentityAuthentication, self), CredBuffer, CredBufferLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityAuthentication_ValidateIdentityCredential(self: *const T, CredBuffer: [*:0]u8, CredBufferLength: u32, ppIdentityProperties: ?*?*IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityAuthentication.VTable, self.vtable).ValidateIdentityCredential(@ptrCast(*const IIdentityAuthentication, self), CredBuffer, CredBufferLength, ppIdentityProperties);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_AsyncIIdentityAuthentication_Value = @import("../zig.zig").Guid.initString("F9A2F918-FECA-4E9C-9633-61CBF13ED34D");
pub const IID_AsyncIIdentityAuthentication = &IID_AsyncIIdentityAuthentication_Value;
pub const AsyncIIdentityAuthentication = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin_SetIdentityCredential: fn(
            self: *const AsyncIIdentityAuthentication,
            CredBuffer: ?[*:0]u8,
            CredBufferLength: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_SetIdentityCredential: fn(
            self: *const AsyncIIdentityAuthentication,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_ValidateIdentityCredential: fn(
            self: *const AsyncIIdentityAuthentication,
            CredBuffer: [*:0]u8,
            CredBufferLength: u32,
            ppIdentityProperties: ?*?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_ValidateIdentityCredential: fn(
            self: *const AsyncIIdentityAuthentication,
            ppIdentityProperties: ?*?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityAuthentication_Begin_SetIdentityCredential(self: *const T, CredBuffer: ?[*:0]u8, CredBufferLength: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityAuthentication.VTable, self.vtable).Begin_SetIdentityCredential(@ptrCast(*const AsyncIIdentityAuthentication, self), CredBuffer, CredBufferLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityAuthentication_Finish_SetIdentityCredential(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityAuthentication.VTable, self.vtable).Finish_SetIdentityCredential(@ptrCast(*const AsyncIIdentityAuthentication, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityAuthentication_Begin_ValidateIdentityCredential(self: *const T, CredBuffer: [*:0]u8, CredBufferLength: u32, ppIdentityProperties: ?*?*IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityAuthentication.VTable, self.vtable).Begin_ValidateIdentityCredential(@ptrCast(*const AsyncIIdentityAuthentication, self), CredBuffer, CredBufferLength, ppIdentityProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityAuthentication_Finish_ValidateIdentityCredential(self: *const T, ppIdentityProperties: ?*?*IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityAuthentication.VTable, self.vtable).Finish_ValidateIdentityCredential(@ptrCast(*const AsyncIIdentityAuthentication, self), ppIdentityProperties);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_CoClassIdentityStore_Value = @import("../zig.zig").Guid.initString("30D49246-D217-465F-B00B-AC9DDD652EB7");
pub const CLSID_CoClassIdentityStore = &CLSID_CoClassIdentityStore_Value;

const CLSID_CIdentityProfileHandler_Value = @import("../zig.zig").Guid.initString("ECF5BF46-E3B6-449A-B56B-43F58F867814");
pub const CLSID_CIdentityProfileHandler = &CLSID_CIdentityProfileHandler_Value;

const IID_IIdentityStore_Value = @import("../zig.zig").Guid.initString("DF586FA5-6F35-44F1-B209-B38E169772EB");
pub const IID_IIdentityStore = &IID_IIdentityStore_Value;
pub const IIdentityStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IIdentityStore,
            pdwProviders: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IIdentityStore,
            dwProvider: u32,
            pProvGuid: ?*Guid,
            ppIdentityProvider: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddToCache: fn(
            self: *const IIdentityStore,
            lpszUniqueID: [*:0]const u16,
            ProviderGUID: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertToSid: fn(
            self: *const IIdentityStore,
            lpszUniqueID: [*:0]const u16,
            ProviderGUID: *const Guid,
            cbSid: u16,
            pSid: ?[*:0]u8,
            pcbRequiredSid: *u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateIdentities: fn(
            self: *const IIdentityStore,
            eIdentityType: IDENTITY_TYPE,
            pFilterkey: ?*const PROPERTYKEY,
            pFilterPropVarValue: ?*const PROPVARIANT,
            ppIdentityEnum: **IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IIdentityStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityStore_GetCount(self: *const T, pdwProviders: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityStore.VTable, self.vtable).GetCount(@ptrCast(*const IIdentityStore, self), pdwProviders);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityStore_GetAt(self: *const T, dwProvider: u32, pProvGuid: ?*Guid, ppIdentityProvider: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityStore.VTable, self.vtable).GetAt(@ptrCast(*const IIdentityStore, self), dwProvider, pProvGuid, ppIdentityProvider);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityStore_AddToCache(self: *const T, lpszUniqueID: [*:0]const u16, ProviderGUID: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityStore.VTable, self.vtable).AddToCache(@ptrCast(*const IIdentityStore, self), lpszUniqueID, ProviderGUID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityStore_ConvertToSid(self: *const T, lpszUniqueID: [*:0]const u16, ProviderGUID: *const Guid, cbSid: u16, pSid: ?[*:0]u8, pcbRequiredSid: *u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityStore.VTable, self.vtable).ConvertToSid(@ptrCast(*const IIdentityStore, self), lpszUniqueID, ProviderGUID, cbSid, pSid, pcbRequiredSid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityStore_EnumerateIdentities(self: *const T, eIdentityType: IDENTITY_TYPE, pFilterkey: ?*const PROPERTYKEY, pFilterPropVarValue: ?*const PROPVARIANT, ppIdentityEnum: **IEnumUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityStore.VTable, self.vtable).EnumerateIdentities(@ptrCast(*const IIdentityStore, self), eIdentityType, pFilterkey, pFilterPropVarValue, ppIdentityEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityStore_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityStore.VTable, self.vtable).Reset(@ptrCast(*const IIdentityStore, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_AsyncIIdentityStore_Value = @import("../zig.zig").Guid.initString("EEFA1616-48DE-4872-AA64-6E6206535A51");
pub const IID_AsyncIIdentityStore = &IID_AsyncIIdentityStore_Value;
pub const AsyncIIdentityStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin_GetCount: fn(
            self: *const AsyncIIdentityStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_GetCount: fn(
            self: *const AsyncIIdentityStore,
            pdwProviders: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_GetAt: fn(
            self: *const AsyncIIdentityStore,
            dwProvider: u32,
            pProvGuid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_GetAt: fn(
            self: *const AsyncIIdentityStore,
            pProvGuid: ?*Guid,
            ppIdentityProvider: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_AddToCache: fn(
            self: *const AsyncIIdentityStore,
            lpszUniqueID: [*:0]const u16,
            ProviderGUID: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_AddToCache: fn(
            self: *const AsyncIIdentityStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_ConvertToSid: fn(
            self: *const AsyncIIdentityStore,
            lpszUniqueID: [*:0]const u16,
            ProviderGUID: *const Guid,
            cbSid: u16,
            pSid: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_ConvertToSid: fn(
            self: *const AsyncIIdentityStore,
            pSid: ?*u8,
            pcbRequiredSid: *u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_EnumerateIdentities: fn(
            self: *const AsyncIIdentityStore,
            eIdentityType: IDENTITY_TYPE,
            pFilterkey: ?*const PROPERTYKEY,
            pFilterPropVarValue: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_EnumerateIdentities: fn(
            self: *const AsyncIIdentityStore,
            ppIdentityEnum: **IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_Reset: fn(
            self: *const AsyncIIdentityStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_Reset: fn(
            self: *const AsyncIIdentityStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityStore_Begin_GetCount(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityStore.VTable, self.vtable).Begin_GetCount(@ptrCast(*const AsyncIIdentityStore, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityStore_Finish_GetCount(self: *const T, pdwProviders: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityStore.VTable, self.vtable).Finish_GetCount(@ptrCast(*const AsyncIIdentityStore, self), pdwProviders);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityStore_Begin_GetAt(self: *const T, dwProvider: u32, pProvGuid: ?*Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityStore.VTable, self.vtable).Begin_GetAt(@ptrCast(*const AsyncIIdentityStore, self), dwProvider, pProvGuid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityStore_Finish_GetAt(self: *const T, pProvGuid: ?*Guid, ppIdentityProvider: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityStore.VTable, self.vtable).Finish_GetAt(@ptrCast(*const AsyncIIdentityStore, self), pProvGuid, ppIdentityProvider);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityStore_Begin_AddToCache(self: *const T, lpszUniqueID: [*:0]const u16, ProviderGUID: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityStore.VTable, self.vtable).Begin_AddToCache(@ptrCast(*const AsyncIIdentityStore, self), lpszUniqueID, ProviderGUID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityStore_Finish_AddToCache(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityStore.VTable, self.vtable).Finish_AddToCache(@ptrCast(*const AsyncIIdentityStore, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityStore_Begin_ConvertToSid(self: *const T, lpszUniqueID: [*:0]const u16, ProviderGUID: *const Guid, cbSid: u16, pSid: ?*u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityStore.VTable, self.vtable).Begin_ConvertToSid(@ptrCast(*const AsyncIIdentityStore, self), lpszUniqueID, ProviderGUID, cbSid, pSid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityStore_Finish_ConvertToSid(self: *const T, pSid: ?*u8, pcbRequiredSid: *u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityStore.VTable, self.vtable).Finish_ConvertToSid(@ptrCast(*const AsyncIIdentityStore, self), pSid, pcbRequiredSid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityStore_Begin_EnumerateIdentities(self: *const T, eIdentityType: IDENTITY_TYPE, pFilterkey: ?*const PROPERTYKEY, pFilterPropVarValue: ?*const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityStore.VTable, self.vtable).Begin_EnumerateIdentities(@ptrCast(*const AsyncIIdentityStore, self), eIdentityType, pFilterkey, pFilterPropVarValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityStore_Finish_EnumerateIdentities(self: *const T, ppIdentityEnum: **IEnumUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityStore.VTable, self.vtable).Finish_EnumerateIdentities(@ptrCast(*const AsyncIIdentityStore, self), ppIdentityEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityStore_Begin_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityStore.VTable, self.vtable).Begin_Reset(@ptrCast(*const AsyncIIdentityStore, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityStore_Finish_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityStore.VTable, self.vtable).Finish_Reset(@ptrCast(*const AsyncIIdentityStore, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IIdentityStoreEx_Value = @import("../zig.zig").Guid.initString("F9F9EB98-8F7F-4E38-9577-6980114CE32B");
pub const IID_IIdentityStoreEx = &IID_IIdentityStoreEx_Value;
pub const IIdentityStoreEx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateConnectedIdentity: fn(
            self: *const IIdentityStoreEx,
            LocalName: ?[*:0]const u16,
            ConnectedName: [*:0]const u16,
            ProviderGUID: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteConnectedIdentity: fn(
            self: *const IIdentityStoreEx,
            ConnectedName: [*:0]const u16,
            ProviderGUID: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityStoreEx_CreateConnectedIdentity(self: *const T, LocalName: ?[*:0]const u16, ConnectedName: [*:0]const u16, ProviderGUID: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityStoreEx.VTable, self.vtable).CreateConnectedIdentity(@ptrCast(*const IIdentityStoreEx, self), LocalName, ConnectedName, ProviderGUID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIdentityStoreEx_DeleteConnectedIdentity(self: *const T, ConnectedName: [*:0]const u16, ProviderGUID: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIdentityStoreEx.VTable, self.vtable).DeleteConnectedIdentity(@ptrCast(*const IIdentityStoreEx, self), ConnectedName, ProviderGUID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_AsyncIIdentityStoreEx_Value = @import("../zig.zig").Guid.initString("FCA3AF9A-8A07-4EAE-8632-EC3DE658A36A");
pub const IID_AsyncIIdentityStoreEx = &IID_AsyncIIdentityStoreEx_Value;
pub const AsyncIIdentityStoreEx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin_CreateConnectedIdentity: fn(
            self: *const AsyncIIdentityStoreEx,
            LocalName: ?[*:0]const u16,
            ConnectedName: [*:0]const u16,
            ProviderGUID: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_CreateConnectedIdentity: fn(
            self: *const AsyncIIdentityStoreEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_DeleteConnectedIdentity: fn(
            self: *const AsyncIIdentityStoreEx,
            ConnectedName: [*:0]const u16,
            ProviderGUID: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_DeleteConnectedIdentity: fn(
            self: *const AsyncIIdentityStoreEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityStoreEx_Begin_CreateConnectedIdentity(self: *const T, LocalName: ?[*:0]const u16, ConnectedName: [*:0]const u16, ProviderGUID: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityStoreEx.VTable, self.vtable).Begin_CreateConnectedIdentity(@ptrCast(*const AsyncIIdentityStoreEx, self), LocalName, ConnectedName, ProviderGUID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityStoreEx_Finish_CreateConnectedIdentity(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityStoreEx.VTable, self.vtable).Finish_CreateConnectedIdentity(@ptrCast(*const AsyncIIdentityStoreEx, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityStoreEx_Begin_DeleteConnectedIdentity(self: *const T, ConnectedName: [*:0]const u16, ProviderGUID: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityStoreEx.VTable, self.vtable).Begin_DeleteConnectedIdentity(@ptrCast(*const AsyncIIdentityStoreEx, self), ConnectedName, ProviderGUID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn AsyncIIdentityStoreEx_Finish_DeleteConnectedIdentity(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const AsyncIIdentityStoreEx.VTable, self.vtable).Finish_DeleteConnectedIdentity(@ptrCast(*const AsyncIIdentityStoreEx, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const AUDIT_PARAM_TYPE = extern enum(i32) {
    APT_None = 1,
    APT_String = 2,
    APT_Ulong = 3,
    APT_Pointer = 4,
    APT_Sid = 5,
    APT_LogonId = 6,
    APT_ObjectTypeList = 7,
    APT_Luid = 8,
    APT_Guid = 9,
    APT_Time = 10,
    APT_Int64 = 11,
    APT_IpAddress = 12,
    APT_LogonIdWithSid = 13,
};
pub const APT_None = AUDIT_PARAM_TYPE.APT_None;
pub const APT_String = AUDIT_PARAM_TYPE.APT_String;
pub const APT_Ulong = AUDIT_PARAM_TYPE.APT_Ulong;
pub const APT_Pointer = AUDIT_PARAM_TYPE.APT_Pointer;
pub const APT_Sid = AUDIT_PARAM_TYPE.APT_Sid;
pub const APT_LogonId = AUDIT_PARAM_TYPE.APT_LogonId;
pub const APT_ObjectTypeList = AUDIT_PARAM_TYPE.APT_ObjectTypeList;
pub const APT_Luid = AUDIT_PARAM_TYPE.APT_Luid;
pub const APT_Guid = AUDIT_PARAM_TYPE.APT_Guid;
pub const APT_Time = AUDIT_PARAM_TYPE.APT_Time;
pub const APT_Int64 = AUDIT_PARAM_TYPE.APT_Int64;
pub const APT_IpAddress = AUDIT_PARAM_TYPE.APT_IpAddress;
pub const APT_LogonIdWithSid = AUDIT_PARAM_TYPE.APT_LogonIdWithSid;

pub const AUDIT_OBJECT_TYPE = extern struct {
    ObjectType: Guid,
    Flags: u16,
    Level: u16,
    AccessMask: u32,
};

pub const AUDIT_OBJECT_TYPES = extern struct {
    Count: u16,
    Flags: u16,
    pObjectTypes: *AUDIT_OBJECT_TYPE,
};

pub const AUDIT_IP_ADDRESS = extern struct {
    pIpAddress: [128]u8,
};

pub const AUDIT_PARAM = extern struct {
    Type: AUDIT_PARAM_TYPE,
    Length: u32,
    Flags: u32,
    Anonymous1: AUDIT_PARAM._Anonymous1_e__Union,
    Anonymous2: AUDIT_PARAM._Anonymous2_e__Union,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const AUDIT_PARAMS = extern struct {
    Length: u32,
    Flags: u32,
    Count: u16,
    Parameters: *AUDIT_PARAM,
};

pub const AUTHZ_AUDIT_EVENT_TYPE_LEGACY = extern struct {
    CategoryId: u16,
    AuditId: u16,
    ParameterCount: u16,
};

pub const AUTHZ_AUDIT_EVENT_TYPE_UNION = u32; // TODO: implement StructOrUnion types?

pub const AUTHZ_AUDIT_EVENT_TYPE_OLD = extern struct {
    Version: u32,
    dwFlags: u32,
    RefCount: i32,
    hAudit: ?*c_void,
    LinkId: LUID,
    u: AUTHZ_AUDIT_EVENT_TYPE_UNION,
};

pub const AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__ = extern struct {
    unused: i32,
};

pub const AUTHZ_CLIENT_CONTEXT_HANDLE__ = extern struct {
    unused: i32,
};

pub const AUTHZ_RESOURCE_MANAGER_HANDLE__ = extern struct {
    unused: i32,
};

pub const AUTHZ_AUDIT_EVENT_HANDLE__ = extern struct {
    unused: i32,
};

pub const AUTHZ_AUDIT_EVENT_TYPE_HANDLE__ = extern struct {
    unused: i32,
};

pub const AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__ = extern struct {
    unused: i32,
};

pub const AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__ = extern struct {
    unused: i32,
};

pub const AUTHZ_ACCESS_REQUEST = extern struct {
    DesiredAccess: u32,
    PrincipalSelfSid: *c_void,
    ObjectTypeList: *OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    OptionalArguments: *c_void,
};

pub const AUTHZ_ACCESS_REPLY = extern struct {
    ResultListLength: u32,
    GrantedAccessMask: *u32,
    SaclEvaluationResults: *u32,
    Error: *u32,
};

pub const PFN_AUTHZ_DYNAMIC_ACCESS_CHECK = fn(
    hAuthzClientContext: *AUTHZ_CLIENT_CONTEXT_HANDLE__,
    pAce: *ACE_HEADER,
    pArgs: ?*c_void,
    pbAceApplicable: *BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS = fn(
    hAuthzClientContext: *AUTHZ_CLIENT_CONTEXT_HANDLE__,
    Args: *c_void,
    pSidAttrArray: **SID_AND_ATTRIBUTES,
    pSidCount: *u32,
    pRestrictedSidAttrArray: **SID_AND_ATTRIBUTES,
    pRestrictedSidCount: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_AUTHZ_FREE_DYNAMIC_GROUPS = fn(
    pSidAttrArray: *SID_AND_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFN_AUTHZ_GET_CENTRAL_ACCESS_POLICY = fn(
    hAuthzClientContext: *AUTHZ_CLIENT_CONTEXT_HANDLE__,
    capid: *c_void,
    pArgs: ?*c_void,
    pCentralAccessPolicyApplicable: *BOOL,
    ppCentralAccessPolicy: **c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_AUTHZ_FREE_CENTRAL_ACCESS_POLICY = fn(
    pCentralAccessPolicy: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE = extern struct {
    Version: u64,
    pName: PWSTR,
};

pub const AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = extern struct {
    pValue: *c_void,
    ValueLength: u32,
};

pub const AUTHZ_SECURITY_ATTRIBUTE_OPERATION = extern enum(i32) {
    NONE = 0,
    REPLACE_ALL = 1,
    ADD = 2,
    DELETE = 3,
    REPLACE = 4,
};
pub const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_NONE = AUTHZ_SECURITY_ATTRIBUTE_OPERATION.NONE;
pub const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_REPLACE_ALL = AUTHZ_SECURITY_ATTRIBUTE_OPERATION.REPLACE_ALL;
pub const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_ADD = AUTHZ_SECURITY_ATTRIBUTE_OPERATION.ADD;
pub const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_DELETE = AUTHZ_SECURITY_ATTRIBUTE_OPERATION.DELETE;
pub const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_REPLACE = AUTHZ_SECURITY_ATTRIBUTE_OPERATION.REPLACE;

pub const AUTHZ_SID_OPERATION = extern enum(i32) {
    NONE = 0,
    REPLACE_ALL = 1,
    ADD = 2,
    DELETE = 3,
    REPLACE = 4,
};
pub const AUTHZ_SID_OPERATION_NONE = AUTHZ_SID_OPERATION.NONE;
pub const AUTHZ_SID_OPERATION_REPLACE_ALL = AUTHZ_SID_OPERATION.REPLACE_ALL;
pub const AUTHZ_SID_OPERATION_ADD = AUTHZ_SID_OPERATION.ADD;
pub const AUTHZ_SID_OPERATION_DELETE = AUTHZ_SID_OPERATION.DELETE;
pub const AUTHZ_SID_OPERATION_REPLACE = AUTHZ_SID_OPERATION.REPLACE;

pub const AUTHZ_SECURITY_ATTRIBUTE_V1 = extern struct {
    pName: PWSTR,
    ValueType: u16,
    Reserved: u16,
    Flags: u32,
    ValueCount: u32,
    Values: AUTHZ_SECURITY_ATTRIBUTE_V1._Values_e__Union,
    const _Values_e__Union = u32; // TODO: generate this nested type!
};

pub const AUTHZ_SECURITY_ATTRIBUTES_INFORMATION = extern struct {
    Version: u16,
    Reserved: u16,
    AttributeCount: u32,
    Attribute: AUTHZ_SECURITY_ATTRIBUTES_INFORMATION._Attribute_e__Union,
    const _Attribute_e__Union = u32; // TODO: generate this nested type!
};

pub const AUTHZ_RPC_INIT_INFO_CLIENT = extern struct {
    version: u16,
    ObjectUuid: PWSTR,
    ProtSeq: PWSTR,
    NetworkAddr: PWSTR,
    Endpoint: PWSTR,
    Options: PWSTR,
    ServerSpn: PWSTR,
};

pub const AUTHZ_INIT_INFO = extern struct {
    version: u16,
    szResourceManagerName: [*:0]const u16,
    pfnDynamicAccessCheck: PFN_AUTHZ_DYNAMIC_ACCESS_CHECK,
    pfnComputeDynamicGroups: PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS,
    pfnFreeDynamicGroups: PFN_AUTHZ_FREE_DYNAMIC_GROUPS,
    pfnGetCentralAccessPolicy: PFN_AUTHZ_GET_CENTRAL_ACCESS_POLICY,
    pfnFreeCentralAccessPolicy: PFN_AUTHZ_FREE_CENTRAL_ACCESS_POLICY,
};

pub const AUTHZ_CONTEXT_INFORMATION_CLASS = extern enum(i32) {
    AuthzContextInfoUserSid = 1,
    AuthzContextInfoGroupsSids = 2,
    AuthzContextInfoRestrictedSids = 3,
    AuthzContextInfoPrivileges = 4,
    AuthzContextInfoExpirationTime = 5,
    AuthzContextInfoServerContext = 6,
    AuthzContextInfoIdentifier = 7,
    AuthzContextInfoSource = 8,
    AuthzContextInfoAll = 9,
    AuthzContextInfoAuthenticationId = 10,
    AuthzContextInfoSecurityAttributes = 11,
    AuthzContextInfoDeviceSids = 12,
    AuthzContextInfoUserClaims = 13,
    AuthzContextInfoDeviceClaims = 14,
    AuthzContextInfoAppContainerSid = 15,
    AuthzContextInfoCapabilitySids = 16,
};
pub const AuthzContextInfoUserSid = AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoUserSid;
pub const AuthzContextInfoGroupsSids = AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoGroupsSids;
pub const AuthzContextInfoRestrictedSids = AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoRestrictedSids;
pub const AuthzContextInfoPrivileges = AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoPrivileges;
pub const AuthzContextInfoExpirationTime = AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoExpirationTime;
pub const AuthzContextInfoServerContext = AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoServerContext;
pub const AuthzContextInfoIdentifier = AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoIdentifier;
pub const AuthzContextInfoSource = AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoSource;
pub const AuthzContextInfoAll = AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoAll;
pub const AuthzContextInfoAuthenticationId = AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoAuthenticationId;
pub const AuthzContextInfoSecurityAttributes = AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoSecurityAttributes;
pub const AuthzContextInfoDeviceSids = AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoDeviceSids;
pub const AuthzContextInfoUserClaims = AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoUserClaims;
pub const AuthzContextInfoDeviceClaims = AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoDeviceClaims;
pub const AuthzContextInfoAppContainerSid = AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoAppContainerSid;
pub const AuthzContextInfoCapabilitySids = AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoCapabilitySids;

pub const AUTHZ_AUDIT_EVENT_INFORMATION_CLASS = extern enum(i32) {
    AuthzAuditEventInfoFlags = 1,
    AuthzAuditEventInfoOperationType = 2,
    AuthzAuditEventInfoObjectType = 3,
    AuthzAuditEventInfoObjectName = 4,
    AuthzAuditEventInfoAdditionalInfo = 5,
};
pub const AuthzAuditEventInfoFlags = AUTHZ_AUDIT_EVENT_INFORMATION_CLASS.AuthzAuditEventInfoFlags;
pub const AuthzAuditEventInfoOperationType = AUTHZ_AUDIT_EVENT_INFORMATION_CLASS.AuthzAuditEventInfoOperationType;
pub const AuthzAuditEventInfoObjectType = AUTHZ_AUDIT_EVENT_INFORMATION_CLASS.AuthzAuditEventInfoObjectType;
pub const AuthzAuditEventInfoObjectName = AUTHZ_AUDIT_EVENT_INFORMATION_CLASS.AuthzAuditEventInfoObjectName;
pub const AuthzAuditEventInfoAdditionalInfo = AUTHZ_AUDIT_EVENT_INFORMATION_CLASS.AuthzAuditEventInfoAdditionalInfo;

pub const AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET = extern struct {
    szObjectTypeName: PWSTR,
    dwOffset: u32,
};

pub const AUTHZ_SOURCE_SCHEMA_REGISTRATION = extern struct {
    dwFlags: u32,
    szEventSourceName: PWSTR,
    szEventMessageFile: PWSTR,
    szEventSourceXmlSchemaFile: PWSTR,
    szEventAccessStringsFile: PWSTR,
    szExecutableImagePath: PWSTR,
    Anonymous: AUTHZ_SOURCE_SCHEMA_REGISTRATION._Anonymous_e__Union,
    dwObjectTypeNameCount: u32,
    ObjectTypeNames: [1]AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

const CLSID_AzAuthorizationStore_Value = @import("../zig.zig").Guid.initString("B2BCFF59-A757-4B0B-A1BC-EA69981DA69E");
pub const CLSID_AzAuthorizationStore = &CLSID_AzAuthorizationStore_Value;

const CLSID_AzBizRuleContext_Value = @import("../zig.zig").Guid.initString("5C2DC96F-8D51-434B-B33C-379BCCAE77C3");
pub const CLSID_AzBizRuleContext = &CLSID_AzBizRuleContext_Value;

const CLSID_AzPrincipalLocator_Value = @import("../zig.zig").Guid.initString("483AFB5D-70DF-4E16-ABDC-A1DE4D015A3E");
pub const CLSID_AzPrincipalLocator = &CLSID_AzPrincipalLocator_Value;

const IID_IAzAuthorizationStore_Value = @import("../zig.zig").Guid.initString("EDBD9CA9-9B82-4F6A-9E8B-98301E450F14");
pub const IID_IAzAuthorizationStore = &IID_IAzAuthorizationStore_Value;
pub const IAzAuthorizationStore = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Description: fn(
            self: *const IAzAuthorizationStore,
            pbstrDescription: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Description: fn(
            self: *const IAzAuthorizationStore,
            bstrDescription: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ApplicationData: fn(
            self: *const IAzAuthorizationStore,
            pbstrApplicationData: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ApplicationData: fn(
            self: *const IAzAuthorizationStore,
            bstrApplicationData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DomainTimeout: fn(
            self: *const IAzAuthorizationStore,
            plProp: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DomainTimeout: fn(
            self: *const IAzAuthorizationStore,
            lProp: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ScriptEngineTimeout: fn(
            self: *const IAzAuthorizationStore,
            plProp: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ScriptEngineTimeout: fn(
            self: *const IAzAuthorizationStore,
            lProp: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MaxScriptEngines: fn(
            self: *const IAzAuthorizationStore,
            plProp: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MaxScriptEngines: fn(
            self: *const IAzAuthorizationStore,
            lProp: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_GenerateAudits: fn(
            self: *const IAzAuthorizationStore,
            pbProp: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_GenerateAudits: fn(
            self: *const IAzAuthorizationStore,
            bProp: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Writable: fn(
            self: *const IAzAuthorizationStore,
            pfProp: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IAzAuthorizationStore,
            lPropId: i32,
            varReserved: VARIANT,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IAzAuthorizationStore,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPropertyItem: fn(
            self: *const IAzAuthorizationStore,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePropertyItem: fn(
            self: *const IAzAuthorizationStore,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolicyAdministrators: fn(
            self: *const IAzAuthorizationStore,
            pvarAdmins: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolicyReaders: fn(
            self: *const IAzAuthorizationStore,
            pvarReaders: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyAdministrator: fn(
            self: *const IAzAuthorizationStore,
            bstrAdmin: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyAdministrator: fn(
            self: *const IAzAuthorizationStore,
            bstrAdmin: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyReader: fn(
            self: *const IAzAuthorizationStore,
            bstrReader: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyReader: fn(
            self: *const IAzAuthorizationStore,
            bstrReader: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IAzAuthorizationStore,
            lFlags: i32,
            bstrPolicyURL: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateCache: fn(
            self: *const IAzAuthorizationStore,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: fn(
            self: *const IAzAuthorizationStore,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Applications: fn(
            self: *const IAzAuthorizationStore,
            ppAppCollection: **IAzApplications,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenApplication: fn(
            self: *const IAzAuthorizationStore,
            bstrApplicationName: BSTR,
            varReserved: VARIANT,
            ppApplication: **IAzApplication,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateApplication: fn(
            self: *const IAzAuthorizationStore,
            bstrApplicationName: BSTR,
            varReserved: VARIANT,
            ppApplication: **IAzApplication,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteApplication: fn(
            self: *const IAzAuthorizationStore,
            bstrApplicationName: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ApplicationGroups: fn(
            self: *const IAzAuthorizationStore,
            ppGroupCollection: **IAzApplicationGroups,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateApplicationGroup: fn(
            self: *const IAzAuthorizationStore,
            bstrGroupName: BSTR,
            varReserved: VARIANT,
            ppGroup: **IAzApplicationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenApplicationGroup: fn(
            self: *const IAzAuthorizationStore,
            bstrGroupName: BSTR,
            varReserved: VARIANT,
            ppGroup: **IAzApplicationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteApplicationGroup: fn(
            self: *const IAzAuthorizationStore,
            bstrGroupName: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Submit: fn(
            self: *const IAzAuthorizationStore,
            lFlags: i32,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DelegatedPolicyUsers: fn(
            self: *const IAzAuthorizationStore,
            pvarDelegatedPolicyUsers: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDelegatedPolicyUser: fn(
            self: *const IAzAuthorizationStore,
            bstrDelegatedPolicyUser: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteDelegatedPolicyUser: fn(
            self: *const IAzAuthorizationStore,
            bstrDelegatedPolicyUser: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_TargetMachine: fn(
            self: *const IAzAuthorizationStore,
            pbstrTargetMachine: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ApplyStoreSacl: fn(
            self: *const IAzAuthorizationStore,
            pbApplyStoreSacl: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ApplyStoreSacl: fn(
            self: *const IAzAuthorizationStore,
            bApplyStoreSacl: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolicyAdministratorsName: fn(
            self: *const IAzAuthorizationStore,
            pvarAdmins: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolicyReadersName: fn(
            self: *const IAzAuthorizationStore,
            pvarReaders: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyAdministratorName: fn(
            self: *const IAzAuthorizationStore,
            bstrAdmin: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyAdministratorName: fn(
            self: *const IAzAuthorizationStore,
            bstrAdmin: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyReaderName: fn(
            self: *const IAzAuthorizationStore,
            bstrReader: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyReaderName: fn(
            self: *const IAzAuthorizationStore,
            bstrReader: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DelegatedPolicyUsersName: fn(
            self: *const IAzAuthorizationStore,
            pvarDelegatedPolicyUsers: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDelegatedPolicyUserName: fn(
            self: *const IAzAuthorizationStore,
            bstrDelegatedPolicyUser: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteDelegatedPolicyUserName: fn(
            self: *const IAzAuthorizationStore,
            bstrDelegatedPolicyUser: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseApplication: fn(
            self: *const IAzAuthorizationStore,
            bstrApplicationName: BSTR,
            lFlag: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_get_Description(self: *const T, pbstrDescription: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).get_Description(@ptrCast(*const IAzAuthorizationStore, self), pbstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_put_Description(self: *const T, bstrDescription: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).put_Description(@ptrCast(*const IAzAuthorizationStore, self), bstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_get_ApplicationData(self: *const T, pbstrApplicationData: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).get_ApplicationData(@ptrCast(*const IAzAuthorizationStore, self), pbstrApplicationData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_put_ApplicationData(self: *const T, bstrApplicationData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).put_ApplicationData(@ptrCast(*const IAzAuthorizationStore, self), bstrApplicationData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_get_DomainTimeout(self: *const T, plProp: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).get_DomainTimeout(@ptrCast(*const IAzAuthorizationStore, self), plProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_put_DomainTimeout(self: *const T, lProp: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).put_DomainTimeout(@ptrCast(*const IAzAuthorizationStore, self), lProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_get_ScriptEngineTimeout(self: *const T, plProp: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).get_ScriptEngineTimeout(@ptrCast(*const IAzAuthorizationStore, self), plProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_put_ScriptEngineTimeout(self: *const T, lProp: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).put_ScriptEngineTimeout(@ptrCast(*const IAzAuthorizationStore, self), lProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_get_MaxScriptEngines(self: *const T, plProp: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).get_MaxScriptEngines(@ptrCast(*const IAzAuthorizationStore, self), plProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_put_MaxScriptEngines(self: *const T, lProp: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).put_MaxScriptEngines(@ptrCast(*const IAzAuthorizationStore, self), lProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_get_GenerateAudits(self: *const T, pbProp: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).get_GenerateAudits(@ptrCast(*const IAzAuthorizationStore, self), pbProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_put_GenerateAudits(self: *const T, bProp: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).put_GenerateAudits(@ptrCast(*const IAzAuthorizationStore, self), bProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_get_Writable(self: *const T, pfProp: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).get_Writable(@ptrCast(*const IAzAuthorizationStore, self), pfProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_GetProperty(self: *const T, lPropId: i32, varReserved: VARIANT, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).GetProperty(@ptrCast(*const IAzAuthorizationStore, self), lPropId, varReserved, pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_SetProperty(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).SetProperty(@ptrCast(*const IAzAuthorizationStore, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_AddPropertyItem(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).AddPropertyItem(@ptrCast(*const IAzAuthorizationStore, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_DeletePropertyItem(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).DeletePropertyItem(@ptrCast(*const IAzAuthorizationStore, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_get_PolicyAdministrators(self: *const T, pvarAdmins: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).get_PolicyAdministrators(@ptrCast(*const IAzAuthorizationStore, self), pvarAdmins);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_get_PolicyReaders(self: *const T, pvarReaders: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).get_PolicyReaders(@ptrCast(*const IAzAuthorizationStore, self), pvarReaders);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_AddPolicyAdministrator(self: *const T, bstrAdmin: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).AddPolicyAdministrator(@ptrCast(*const IAzAuthorizationStore, self), bstrAdmin, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_DeletePolicyAdministrator(self: *const T, bstrAdmin: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).DeletePolicyAdministrator(@ptrCast(*const IAzAuthorizationStore, self), bstrAdmin, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_AddPolicyReader(self: *const T, bstrReader: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).AddPolicyReader(@ptrCast(*const IAzAuthorizationStore, self), bstrReader, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_DeletePolicyReader(self: *const T, bstrReader: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).DeletePolicyReader(@ptrCast(*const IAzAuthorizationStore, self), bstrReader, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_Initialize(self: *const T, lFlags: i32, bstrPolicyURL: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).Initialize(@ptrCast(*const IAzAuthorizationStore, self), lFlags, bstrPolicyURL, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_UpdateCache(self: *const T, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).UpdateCache(@ptrCast(*const IAzAuthorizationStore, self), varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_Delete(self: *const T, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).Delete(@ptrCast(*const IAzAuthorizationStore, self), varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_get_Applications(self: *const T, ppAppCollection: **IAzApplications) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).get_Applications(@ptrCast(*const IAzAuthorizationStore, self), ppAppCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_OpenApplication(self: *const T, bstrApplicationName: BSTR, varReserved: VARIANT, ppApplication: **IAzApplication) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).OpenApplication(@ptrCast(*const IAzAuthorizationStore, self), bstrApplicationName, varReserved, ppApplication);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_CreateApplication(self: *const T, bstrApplicationName: BSTR, varReserved: VARIANT, ppApplication: **IAzApplication) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).CreateApplication(@ptrCast(*const IAzAuthorizationStore, self), bstrApplicationName, varReserved, ppApplication);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_DeleteApplication(self: *const T, bstrApplicationName: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).DeleteApplication(@ptrCast(*const IAzAuthorizationStore, self), bstrApplicationName, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_get_ApplicationGroups(self: *const T, ppGroupCollection: **IAzApplicationGroups) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).get_ApplicationGroups(@ptrCast(*const IAzAuthorizationStore, self), ppGroupCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_CreateApplicationGroup(self: *const T, bstrGroupName: BSTR, varReserved: VARIANT, ppGroup: **IAzApplicationGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).CreateApplicationGroup(@ptrCast(*const IAzAuthorizationStore, self), bstrGroupName, varReserved, ppGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_OpenApplicationGroup(self: *const T, bstrGroupName: BSTR, varReserved: VARIANT, ppGroup: **IAzApplicationGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).OpenApplicationGroup(@ptrCast(*const IAzAuthorizationStore, self), bstrGroupName, varReserved, ppGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_DeleteApplicationGroup(self: *const T, bstrGroupName: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).DeleteApplicationGroup(@ptrCast(*const IAzAuthorizationStore, self), bstrGroupName, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_Submit(self: *const T, lFlags: i32, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).Submit(@ptrCast(*const IAzAuthorizationStore, self), lFlags, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_get_DelegatedPolicyUsers(self: *const T, pvarDelegatedPolicyUsers: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).get_DelegatedPolicyUsers(@ptrCast(*const IAzAuthorizationStore, self), pvarDelegatedPolicyUsers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_AddDelegatedPolicyUser(self: *const T, bstrDelegatedPolicyUser: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).AddDelegatedPolicyUser(@ptrCast(*const IAzAuthorizationStore, self), bstrDelegatedPolicyUser, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_DeleteDelegatedPolicyUser(self: *const T, bstrDelegatedPolicyUser: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).DeleteDelegatedPolicyUser(@ptrCast(*const IAzAuthorizationStore, self), bstrDelegatedPolicyUser, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_get_TargetMachine(self: *const T, pbstrTargetMachine: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).get_TargetMachine(@ptrCast(*const IAzAuthorizationStore, self), pbstrTargetMachine);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_get_ApplyStoreSacl(self: *const T, pbApplyStoreSacl: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).get_ApplyStoreSacl(@ptrCast(*const IAzAuthorizationStore, self), pbApplyStoreSacl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_put_ApplyStoreSacl(self: *const T, bApplyStoreSacl: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).put_ApplyStoreSacl(@ptrCast(*const IAzAuthorizationStore, self), bApplyStoreSacl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_get_PolicyAdministratorsName(self: *const T, pvarAdmins: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).get_PolicyAdministratorsName(@ptrCast(*const IAzAuthorizationStore, self), pvarAdmins);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_get_PolicyReadersName(self: *const T, pvarReaders: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).get_PolicyReadersName(@ptrCast(*const IAzAuthorizationStore, self), pvarReaders);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_AddPolicyAdministratorName(self: *const T, bstrAdmin: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).AddPolicyAdministratorName(@ptrCast(*const IAzAuthorizationStore, self), bstrAdmin, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_DeletePolicyAdministratorName(self: *const T, bstrAdmin: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).DeletePolicyAdministratorName(@ptrCast(*const IAzAuthorizationStore, self), bstrAdmin, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_AddPolicyReaderName(self: *const T, bstrReader: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).AddPolicyReaderName(@ptrCast(*const IAzAuthorizationStore, self), bstrReader, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_DeletePolicyReaderName(self: *const T, bstrReader: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).DeletePolicyReaderName(@ptrCast(*const IAzAuthorizationStore, self), bstrReader, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_get_DelegatedPolicyUsersName(self: *const T, pvarDelegatedPolicyUsers: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).get_DelegatedPolicyUsersName(@ptrCast(*const IAzAuthorizationStore, self), pvarDelegatedPolicyUsers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_AddDelegatedPolicyUserName(self: *const T, bstrDelegatedPolicyUser: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).AddDelegatedPolicyUserName(@ptrCast(*const IAzAuthorizationStore, self), bstrDelegatedPolicyUser, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_DeleteDelegatedPolicyUserName(self: *const T, bstrDelegatedPolicyUser: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).DeleteDelegatedPolicyUserName(@ptrCast(*const IAzAuthorizationStore, self), bstrDelegatedPolicyUser, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore_CloseApplication(self: *const T, bstrApplicationName: BSTR, lFlag: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore.VTable, self.vtable).CloseApplication(@ptrCast(*const IAzAuthorizationStore, self), bstrApplicationName, lFlag);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzAuthorizationStore2_Value = @import("../zig.zig").Guid.initString("B11E5584-D577-4273-B6C5-0973E0F8E80D");
pub const IID_IAzAuthorizationStore2 = &IID_IAzAuthorizationStore2_Value;
pub const IAzAuthorizationStore2 = extern struct {
    pub const VTable = extern struct {
        base: IAzAuthorizationStore.VTable,
        OpenApplication2: fn(
            self: *const IAzAuthorizationStore2,
            bstrApplicationName: BSTR,
            varReserved: VARIANT,
            ppApplication: **IAzApplication2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateApplication2: fn(
            self: *const IAzAuthorizationStore2,
            bstrApplicationName: BSTR,
            varReserved: VARIANT,
            ppApplication: **IAzApplication2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IAzAuthorizationStore.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore2_OpenApplication2(self: *const T, bstrApplicationName: BSTR, varReserved: VARIANT, ppApplication: **IAzApplication2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore2.VTable, self.vtable).OpenApplication2(@ptrCast(*const IAzAuthorizationStore2, self), bstrApplicationName, varReserved, ppApplication);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore2_CreateApplication2(self: *const T, bstrApplicationName: BSTR, varReserved: VARIANT, ppApplication: **IAzApplication2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore2.VTable, self.vtable).CreateApplication2(@ptrCast(*const IAzAuthorizationStore2, self), bstrApplicationName, varReserved, ppApplication);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzAuthorizationStore3_Value = @import("../zig.zig").Guid.initString("ABC08425-0C86-4FA0-9BE3-7189956C926E");
pub const IID_IAzAuthorizationStore3 = &IID_IAzAuthorizationStore3_Value;
pub const IAzAuthorizationStore3 = extern struct {
    pub const VTable = extern struct {
        base: IAzAuthorizationStore2.VTable,
        IsUpdateNeeded: fn(
            self: *const IAzAuthorizationStore3,
            pbIsUpdateNeeded: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BizruleGroupSupported: fn(
            self: *const IAzAuthorizationStore3,
            pbSupported: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpgradeStoresFunctionalLevel: fn(
            self: *const IAzAuthorizationStore3,
            lFunctionalLevel: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsFunctionalLevelUpgradeSupported: fn(
            self: *const IAzAuthorizationStore3,
            lFunctionalLevel: i32,
            pbSupported: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSchemaVersion: fn(
            self: *const IAzAuthorizationStore3,
            plMajorVersion: *i32,
            plMinorVersion: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IAzAuthorizationStore2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore3_IsUpdateNeeded(self: *const T, pbIsUpdateNeeded: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore3.VTable, self.vtable).IsUpdateNeeded(@ptrCast(*const IAzAuthorizationStore3, self), pbIsUpdateNeeded);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore3_BizruleGroupSupported(self: *const T, pbSupported: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore3.VTable, self.vtable).BizruleGroupSupported(@ptrCast(*const IAzAuthorizationStore3, self), pbSupported);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore3_UpgradeStoresFunctionalLevel(self: *const T, lFunctionalLevel: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore3.VTable, self.vtable).UpgradeStoresFunctionalLevel(@ptrCast(*const IAzAuthorizationStore3, self), lFunctionalLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore3_IsFunctionalLevelUpgradeSupported(self: *const T, lFunctionalLevel: i32, pbSupported: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore3.VTable, self.vtable).IsFunctionalLevelUpgradeSupported(@ptrCast(*const IAzAuthorizationStore3, self), lFunctionalLevel, pbSupported);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzAuthorizationStore3_GetSchemaVersion(self: *const T, plMajorVersion: *i32, plMinorVersion: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzAuthorizationStore3.VTable, self.vtable).GetSchemaVersion(@ptrCast(*const IAzAuthorizationStore3, self), plMajorVersion, plMinorVersion);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzApplication_Value = @import("../zig.zig").Guid.initString("987BC7C7-B813-4D27-BEDE-6BA5AE867E95");
pub const IID_IAzApplication = &IID_IAzApplication_Value;
pub const IAzApplication = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Name: fn(
            self: *const IAzApplication,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Name: fn(
            self: *const IAzApplication,
            bstrName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Description: fn(
            self: *const IAzApplication,
            pbstrDescription: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Description: fn(
            self: *const IAzApplication,
            bstrDescription: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ApplicationData: fn(
            self: *const IAzApplication,
            pbstrApplicationData: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ApplicationData: fn(
            self: *const IAzApplication,
            bstrApplicationData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AuthzInterfaceClsid: fn(
            self: *const IAzApplication,
            pbstrProp: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AuthzInterfaceClsid: fn(
            self: *const IAzApplication,
            bstrProp: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Version: fn(
            self: *const IAzApplication,
            pbstrProp: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Version: fn(
            self: *const IAzApplication,
            bstrProp: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_GenerateAudits: fn(
            self: *const IAzApplication,
            pbProp: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_GenerateAudits: fn(
            self: *const IAzApplication,
            bProp: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ApplyStoreSacl: fn(
            self: *const IAzApplication,
            pbProp: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ApplyStoreSacl: fn(
            self: *const IAzApplication,
            bProp: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Writable: fn(
            self: *const IAzApplication,
            pfProp: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IAzApplication,
            lPropId: i32,
            varReserved: VARIANT,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IAzApplication,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolicyAdministrators: fn(
            self: *const IAzApplication,
            pvarAdmins: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolicyReaders: fn(
            self: *const IAzApplication,
            pvarReaders: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyAdministrator: fn(
            self: *const IAzApplication,
            bstrAdmin: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyAdministrator: fn(
            self: *const IAzApplication,
            bstrAdmin: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyReader: fn(
            self: *const IAzApplication,
            bstrReader: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyReader: fn(
            self: *const IAzApplication,
            bstrReader: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Scopes: fn(
            self: *const IAzApplication,
            ppScopeCollection: **IAzScopes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenScope: fn(
            self: *const IAzApplication,
            bstrScopeName: BSTR,
            varReserved: VARIANT,
            ppScope: **IAzScope,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateScope: fn(
            self: *const IAzApplication,
            bstrScopeName: BSTR,
            varReserved: VARIANT,
            ppScope: **IAzScope,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteScope: fn(
            self: *const IAzApplication,
            bstrScopeName: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Operations: fn(
            self: *const IAzApplication,
            ppOperationCollection: **IAzOperations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenOperation: fn(
            self: *const IAzApplication,
            bstrOperationName: BSTR,
            varReserved: VARIANT,
            ppOperation: **IAzOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateOperation: fn(
            self: *const IAzApplication,
            bstrOperationName: BSTR,
            varReserved: VARIANT,
            ppOperation: **IAzOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteOperation: fn(
            self: *const IAzApplication,
            bstrOperationName: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Tasks: fn(
            self: *const IAzApplication,
            ppTaskCollection: **IAzTasks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenTask: fn(
            self: *const IAzApplication,
            bstrTaskName: BSTR,
            varReserved: VARIANT,
            ppTask: **IAzTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTask: fn(
            self: *const IAzApplication,
            bstrTaskName: BSTR,
            varReserved: VARIANT,
            ppTask: **IAzTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteTask: fn(
            self: *const IAzApplication,
            bstrTaskName: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ApplicationGroups: fn(
            self: *const IAzApplication,
            ppGroupCollection: **IAzApplicationGroups,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenApplicationGroup: fn(
            self: *const IAzApplication,
            bstrGroupName: BSTR,
            varReserved: VARIANT,
            ppGroup: **IAzApplicationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateApplicationGroup: fn(
            self: *const IAzApplication,
            bstrGroupName: BSTR,
            varReserved: VARIANT,
            ppGroup: **IAzApplicationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteApplicationGroup: fn(
            self: *const IAzApplication,
            bstrGroupName: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Roles: fn(
            self: *const IAzApplication,
            ppRoleCollection: **IAzRoles,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenRole: fn(
            self: *const IAzApplication,
            bstrRoleName: BSTR,
            varReserved: VARIANT,
            ppRole: **IAzRole,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRole: fn(
            self: *const IAzApplication,
            bstrRoleName: BSTR,
            varReserved: VARIANT,
            ppRole: **IAzRole,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRole: fn(
            self: *const IAzApplication,
            bstrRoleName: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeClientContextFromToken: fn(
            self: *const IAzApplication,
            ullTokenHandle: u64,
            varReserved: VARIANT,
            ppClientContext: **IAzClientContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPropertyItem: fn(
            self: *const IAzApplication,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePropertyItem: fn(
            self: *const IAzApplication,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Submit: fn(
            self: *const IAzApplication,
            lFlags: i32,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeClientContextFromName: fn(
            self: *const IAzApplication,
            ClientName: BSTR,
            DomainName: BSTR,
            varReserved: VARIANT,
            ppClientContext: **IAzClientContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DelegatedPolicyUsers: fn(
            self: *const IAzApplication,
            pvarDelegatedPolicyUsers: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDelegatedPolicyUser: fn(
            self: *const IAzApplication,
            bstrDelegatedPolicyUser: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteDelegatedPolicyUser: fn(
            self: *const IAzApplication,
            bstrDelegatedPolicyUser: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeClientContextFromStringSid: fn(
            self: *const IAzApplication,
            SidString: BSTR,
            lOptions: i32,
            varReserved: VARIANT,
            ppClientContext: **IAzClientContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolicyAdministratorsName: fn(
            self: *const IAzApplication,
            pvarAdmins: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolicyReadersName: fn(
            self: *const IAzApplication,
            pvarReaders: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyAdministratorName: fn(
            self: *const IAzApplication,
            bstrAdmin: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyAdministratorName: fn(
            self: *const IAzApplication,
            bstrAdmin: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyReaderName: fn(
            self: *const IAzApplication,
            bstrReader: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyReaderName: fn(
            self: *const IAzApplication,
            bstrReader: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DelegatedPolicyUsersName: fn(
            self: *const IAzApplication,
            pvarDelegatedPolicyUsers: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDelegatedPolicyUserName: fn(
            self: *const IAzApplication,
            bstrDelegatedPolicyUser: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteDelegatedPolicyUserName: fn(
            self: *const IAzApplication,
            bstrDelegatedPolicyUser: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_Name(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_Name(@ptrCast(*const IAzApplication, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_put_Name(self: *const T, bstrName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).put_Name(@ptrCast(*const IAzApplication, self), bstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_Description(self: *const T, pbstrDescription: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_Description(@ptrCast(*const IAzApplication, self), pbstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_put_Description(self: *const T, bstrDescription: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).put_Description(@ptrCast(*const IAzApplication, self), bstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_ApplicationData(self: *const T, pbstrApplicationData: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_ApplicationData(@ptrCast(*const IAzApplication, self), pbstrApplicationData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_put_ApplicationData(self: *const T, bstrApplicationData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).put_ApplicationData(@ptrCast(*const IAzApplication, self), bstrApplicationData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_AuthzInterfaceClsid(self: *const T, pbstrProp: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_AuthzInterfaceClsid(@ptrCast(*const IAzApplication, self), pbstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_put_AuthzInterfaceClsid(self: *const T, bstrProp: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).put_AuthzInterfaceClsid(@ptrCast(*const IAzApplication, self), bstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_Version(self: *const T, pbstrProp: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_Version(@ptrCast(*const IAzApplication, self), pbstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_put_Version(self: *const T, bstrProp: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).put_Version(@ptrCast(*const IAzApplication, self), bstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_GenerateAudits(self: *const T, pbProp: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_GenerateAudits(@ptrCast(*const IAzApplication, self), pbProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_put_GenerateAudits(self: *const T, bProp: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).put_GenerateAudits(@ptrCast(*const IAzApplication, self), bProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_ApplyStoreSacl(self: *const T, pbProp: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_ApplyStoreSacl(@ptrCast(*const IAzApplication, self), pbProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_put_ApplyStoreSacl(self: *const T, bProp: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).put_ApplyStoreSacl(@ptrCast(*const IAzApplication, self), bProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_Writable(self: *const T, pfProp: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_Writable(@ptrCast(*const IAzApplication, self), pfProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_GetProperty(self: *const T, lPropId: i32, varReserved: VARIANT, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).GetProperty(@ptrCast(*const IAzApplication, self), lPropId, varReserved, pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_SetProperty(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).SetProperty(@ptrCast(*const IAzApplication, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_PolicyAdministrators(self: *const T, pvarAdmins: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_PolicyAdministrators(@ptrCast(*const IAzApplication, self), pvarAdmins);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_PolicyReaders(self: *const T, pvarReaders: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_PolicyReaders(@ptrCast(*const IAzApplication, self), pvarReaders);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_AddPolicyAdministrator(self: *const T, bstrAdmin: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).AddPolicyAdministrator(@ptrCast(*const IAzApplication, self), bstrAdmin, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_DeletePolicyAdministrator(self: *const T, bstrAdmin: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).DeletePolicyAdministrator(@ptrCast(*const IAzApplication, self), bstrAdmin, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_AddPolicyReader(self: *const T, bstrReader: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).AddPolicyReader(@ptrCast(*const IAzApplication, self), bstrReader, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_DeletePolicyReader(self: *const T, bstrReader: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).DeletePolicyReader(@ptrCast(*const IAzApplication, self), bstrReader, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_Scopes(self: *const T, ppScopeCollection: **IAzScopes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_Scopes(@ptrCast(*const IAzApplication, self), ppScopeCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_OpenScope(self: *const T, bstrScopeName: BSTR, varReserved: VARIANT, ppScope: **IAzScope) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).OpenScope(@ptrCast(*const IAzApplication, self), bstrScopeName, varReserved, ppScope);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_CreateScope(self: *const T, bstrScopeName: BSTR, varReserved: VARIANT, ppScope: **IAzScope) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).CreateScope(@ptrCast(*const IAzApplication, self), bstrScopeName, varReserved, ppScope);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_DeleteScope(self: *const T, bstrScopeName: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).DeleteScope(@ptrCast(*const IAzApplication, self), bstrScopeName, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_Operations(self: *const T, ppOperationCollection: **IAzOperations) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_Operations(@ptrCast(*const IAzApplication, self), ppOperationCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_OpenOperation(self: *const T, bstrOperationName: BSTR, varReserved: VARIANT, ppOperation: **IAzOperation) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).OpenOperation(@ptrCast(*const IAzApplication, self), bstrOperationName, varReserved, ppOperation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_CreateOperation(self: *const T, bstrOperationName: BSTR, varReserved: VARIANT, ppOperation: **IAzOperation) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).CreateOperation(@ptrCast(*const IAzApplication, self), bstrOperationName, varReserved, ppOperation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_DeleteOperation(self: *const T, bstrOperationName: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).DeleteOperation(@ptrCast(*const IAzApplication, self), bstrOperationName, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_Tasks(self: *const T, ppTaskCollection: **IAzTasks) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_Tasks(@ptrCast(*const IAzApplication, self), ppTaskCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_OpenTask(self: *const T, bstrTaskName: BSTR, varReserved: VARIANT, ppTask: **IAzTask) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).OpenTask(@ptrCast(*const IAzApplication, self), bstrTaskName, varReserved, ppTask);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_CreateTask(self: *const T, bstrTaskName: BSTR, varReserved: VARIANT, ppTask: **IAzTask) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).CreateTask(@ptrCast(*const IAzApplication, self), bstrTaskName, varReserved, ppTask);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_DeleteTask(self: *const T, bstrTaskName: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).DeleteTask(@ptrCast(*const IAzApplication, self), bstrTaskName, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_ApplicationGroups(self: *const T, ppGroupCollection: **IAzApplicationGroups) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_ApplicationGroups(@ptrCast(*const IAzApplication, self), ppGroupCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_OpenApplicationGroup(self: *const T, bstrGroupName: BSTR, varReserved: VARIANT, ppGroup: **IAzApplicationGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).OpenApplicationGroup(@ptrCast(*const IAzApplication, self), bstrGroupName, varReserved, ppGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_CreateApplicationGroup(self: *const T, bstrGroupName: BSTR, varReserved: VARIANT, ppGroup: **IAzApplicationGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).CreateApplicationGroup(@ptrCast(*const IAzApplication, self), bstrGroupName, varReserved, ppGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_DeleteApplicationGroup(self: *const T, bstrGroupName: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).DeleteApplicationGroup(@ptrCast(*const IAzApplication, self), bstrGroupName, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_Roles(self: *const T, ppRoleCollection: **IAzRoles) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_Roles(@ptrCast(*const IAzApplication, self), ppRoleCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_OpenRole(self: *const T, bstrRoleName: BSTR, varReserved: VARIANT, ppRole: **IAzRole) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).OpenRole(@ptrCast(*const IAzApplication, self), bstrRoleName, varReserved, ppRole);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_CreateRole(self: *const T, bstrRoleName: BSTR, varReserved: VARIANT, ppRole: **IAzRole) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).CreateRole(@ptrCast(*const IAzApplication, self), bstrRoleName, varReserved, ppRole);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_DeleteRole(self: *const T, bstrRoleName: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).DeleteRole(@ptrCast(*const IAzApplication, self), bstrRoleName, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_InitializeClientContextFromToken(self: *const T, ullTokenHandle: u64, varReserved: VARIANT, ppClientContext: **IAzClientContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).InitializeClientContextFromToken(@ptrCast(*const IAzApplication, self), ullTokenHandle, varReserved, ppClientContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_AddPropertyItem(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).AddPropertyItem(@ptrCast(*const IAzApplication, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_DeletePropertyItem(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).DeletePropertyItem(@ptrCast(*const IAzApplication, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_Submit(self: *const T, lFlags: i32, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).Submit(@ptrCast(*const IAzApplication, self), lFlags, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_InitializeClientContextFromName(self: *const T, ClientName: BSTR, DomainName: BSTR, varReserved: VARIANT, ppClientContext: **IAzClientContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).InitializeClientContextFromName(@ptrCast(*const IAzApplication, self), ClientName, DomainName, varReserved, ppClientContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_DelegatedPolicyUsers(self: *const T, pvarDelegatedPolicyUsers: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_DelegatedPolicyUsers(@ptrCast(*const IAzApplication, self), pvarDelegatedPolicyUsers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_AddDelegatedPolicyUser(self: *const T, bstrDelegatedPolicyUser: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).AddDelegatedPolicyUser(@ptrCast(*const IAzApplication, self), bstrDelegatedPolicyUser, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_DeleteDelegatedPolicyUser(self: *const T, bstrDelegatedPolicyUser: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).DeleteDelegatedPolicyUser(@ptrCast(*const IAzApplication, self), bstrDelegatedPolicyUser, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_InitializeClientContextFromStringSid(self: *const T, SidString: BSTR, lOptions: i32, varReserved: VARIANT, ppClientContext: **IAzClientContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).InitializeClientContextFromStringSid(@ptrCast(*const IAzApplication, self), SidString, lOptions, varReserved, ppClientContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_PolicyAdministratorsName(self: *const T, pvarAdmins: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_PolicyAdministratorsName(@ptrCast(*const IAzApplication, self), pvarAdmins);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_PolicyReadersName(self: *const T, pvarReaders: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_PolicyReadersName(@ptrCast(*const IAzApplication, self), pvarReaders);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_AddPolicyAdministratorName(self: *const T, bstrAdmin: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).AddPolicyAdministratorName(@ptrCast(*const IAzApplication, self), bstrAdmin, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_DeletePolicyAdministratorName(self: *const T, bstrAdmin: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).DeletePolicyAdministratorName(@ptrCast(*const IAzApplication, self), bstrAdmin, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_AddPolicyReaderName(self: *const T, bstrReader: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).AddPolicyReaderName(@ptrCast(*const IAzApplication, self), bstrReader, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_DeletePolicyReaderName(self: *const T, bstrReader: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).DeletePolicyReaderName(@ptrCast(*const IAzApplication, self), bstrReader, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_get_DelegatedPolicyUsersName(self: *const T, pvarDelegatedPolicyUsers: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).get_DelegatedPolicyUsersName(@ptrCast(*const IAzApplication, self), pvarDelegatedPolicyUsers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_AddDelegatedPolicyUserName(self: *const T, bstrDelegatedPolicyUser: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).AddDelegatedPolicyUserName(@ptrCast(*const IAzApplication, self), bstrDelegatedPolicyUser, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication_DeleteDelegatedPolicyUserName(self: *const T, bstrDelegatedPolicyUser: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication.VTable, self.vtable).DeleteDelegatedPolicyUserName(@ptrCast(*const IAzApplication, self), bstrDelegatedPolicyUser, varReserved);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzApplication2_Value = @import("../zig.zig").Guid.initString("086A68AF-A249-437C-B18D-D4D86D6A9660");
pub const IID_IAzApplication2 = &IID_IAzApplication2_Value;
pub const IAzApplication2 = extern struct {
    pub const VTable = extern struct {
        base: IAzApplication.VTable,
        InitializeClientContextFromToken2: fn(
            self: *const IAzApplication2,
            ulTokenHandleLowPart: u32,
            ulTokenHandleHighPart: u32,
            varReserved: VARIANT,
            ppClientContext: **IAzClientContext2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeClientContext2: fn(
            self: *const IAzApplication2,
            IdentifyingString: BSTR,
            varReserved: VARIANT,
            ppClientContext: **IAzClientContext2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IAzApplication.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication2_InitializeClientContextFromToken2(self: *const T, ulTokenHandleLowPart: u32, ulTokenHandleHighPart: u32, varReserved: VARIANT, ppClientContext: **IAzClientContext2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication2.VTable, self.vtable).InitializeClientContextFromToken2(@ptrCast(*const IAzApplication2, self), ulTokenHandleLowPart, ulTokenHandleHighPart, varReserved, ppClientContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication2_InitializeClientContext2(self: *const T, IdentifyingString: BSTR, varReserved: VARIANT, ppClientContext: **IAzClientContext2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication2.VTable, self.vtable).InitializeClientContext2(@ptrCast(*const IAzApplication2, self), IdentifyingString, varReserved, ppClientContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzApplications_Value = @import("../zig.zig").Guid.initString("929B11A9-95C5-4A84-A29A-20AD42C2F16C");
pub const IID_IAzApplications = &IID_IAzApplications_Value;
pub const IAzApplications = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Item: fn(
            self: *const IAzApplications,
            Index: i32,
            pvarObtPtr: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IAzApplications,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IAzApplications,
            ppEnumPtr: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplications_get_Item(self: *const T, Index: i32, pvarObtPtr: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplications.VTable, self.vtable).get_Item(@ptrCast(*const IAzApplications, self), Index, pvarObtPtr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplications_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplications.VTable, self.vtable).get_Count(@ptrCast(*const IAzApplications, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplications_get__NewEnum(self: *const T, ppEnumPtr: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplications.VTable, self.vtable).get__NewEnum(@ptrCast(*const IAzApplications, self), ppEnumPtr);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzOperation_Value = @import("../zig.zig").Guid.initString("5E56B24F-EA01-4D61-BE44-C49B5E4EAF74");
pub const IID_IAzOperation = &IID_IAzOperation_Value;
pub const IAzOperation = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Name: fn(
            self: *const IAzOperation,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Name: fn(
            self: *const IAzOperation,
            bstrName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Description: fn(
            self: *const IAzOperation,
            pbstrDescription: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Description: fn(
            self: *const IAzOperation,
            bstrDescription: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ApplicationData: fn(
            self: *const IAzOperation,
            pbstrApplicationData: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ApplicationData: fn(
            self: *const IAzOperation,
            bstrApplicationData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_OperationID: fn(
            self: *const IAzOperation,
            plProp: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_OperationID: fn(
            self: *const IAzOperation,
            lProp: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Writable: fn(
            self: *const IAzOperation,
            pfProp: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IAzOperation,
            lPropId: i32,
            varReserved: VARIANT,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IAzOperation,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Submit: fn(
            self: *const IAzOperation,
            lFlags: i32,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzOperation_get_Name(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzOperation.VTable, self.vtable).get_Name(@ptrCast(*const IAzOperation, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzOperation_put_Name(self: *const T, bstrName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzOperation.VTable, self.vtable).put_Name(@ptrCast(*const IAzOperation, self), bstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzOperation_get_Description(self: *const T, pbstrDescription: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzOperation.VTable, self.vtable).get_Description(@ptrCast(*const IAzOperation, self), pbstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzOperation_put_Description(self: *const T, bstrDescription: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzOperation.VTable, self.vtable).put_Description(@ptrCast(*const IAzOperation, self), bstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzOperation_get_ApplicationData(self: *const T, pbstrApplicationData: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzOperation.VTable, self.vtable).get_ApplicationData(@ptrCast(*const IAzOperation, self), pbstrApplicationData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzOperation_put_ApplicationData(self: *const T, bstrApplicationData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzOperation.VTable, self.vtable).put_ApplicationData(@ptrCast(*const IAzOperation, self), bstrApplicationData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzOperation_get_OperationID(self: *const T, plProp: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzOperation.VTable, self.vtable).get_OperationID(@ptrCast(*const IAzOperation, self), plProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzOperation_put_OperationID(self: *const T, lProp: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzOperation.VTable, self.vtable).put_OperationID(@ptrCast(*const IAzOperation, self), lProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzOperation_get_Writable(self: *const T, pfProp: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzOperation.VTable, self.vtable).get_Writable(@ptrCast(*const IAzOperation, self), pfProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzOperation_GetProperty(self: *const T, lPropId: i32, varReserved: VARIANT, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzOperation.VTable, self.vtable).GetProperty(@ptrCast(*const IAzOperation, self), lPropId, varReserved, pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzOperation_SetProperty(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzOperation.VTable, self.vtable).SetProperty(@ptrCast(*const IAzOperation, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzOperation_Submit(self: *const T, lFlags: i32, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzOperation.VTable, self.vtable).Submit(@ptrCast(*const IAzOperation, self), lFlags, varReserved);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzOperations_Value = @import("../zig.zig").Guid.initString("90EF9C07-9706-49D9-AF80-0438A5F3EC35");
pub const IID_IAzOperations = &IID_IAzOperations_Value;
pub const IAzOperations = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Item: fn(
            self: *const IAzOperations,
            Index: i32,
            pvarObtPtr: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IAzOperations,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IAzOperations,
            ppEnumPtr: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzOperations_get_Item(self: *const T, Index: i32, pvarObtPtr: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzOperations.VTable, self.vtable).get_Item(@ptrCast(*const IAzOperations, self), Index, pvarObtPtr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzOperations_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzOperations.VTable, self.vtable).get_Count(@ptrCast(*const IAzOperations, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzOperations_get__NewEnum(self: *const T, ppEnumPtr: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzOperations.VTable, self.vtable).get__NewEnum(@ptrCast(*const IAzOperations, self), ppEnumPtr);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzTask_Value = @import("../zig.zig").Guid.initString("CB94E592-2E0E-4A6C-A336-B89A6DC1E388");
pub const IID_IAzTask = &IID_IAzTask_Value;
pub const IAzTask = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Name: fn(
            self: *const IAzTask,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Name: fn(
            self: *const IAzTask,
            bstrName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Description: fn(
            self: *const IAzTask,
            pbstrDescription: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Description: fn(
            self: *const IAzTask,
            bstrDescription: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ApplicationData: fn(
            self: *const IAzTask,
            pbstrApplicationData: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ApplicationData: fn(
            self: *const IAzTask,
            bstrApplicationData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BizRule: fn(
            self: *const IAzTask,
            pbstrProp: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_BizRule: fn(
            self: *const IAzTask,
            bstrProp: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BizRuleLanguage: fn(
            self: *const IAzTask,
            pbstrProp: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_BizRuleLanguage: fn(
            self: *const IAzTask,
            bstrProp: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BizRuleImportedPath: fn(
            self: *const IAzTask,
            pbstrProp: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_BizRuleImportedPath: fn(
            self: *const IAzTask,
            bstrProp: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsRoleDefinition: fn(
            self: *const IAzTask,
            pfProp: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_IsRoleDefinition: fn(
            self: *const IAzTask,
            fProp: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Operations: fn(
            self: *const IAzTask,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Tasks: fn(
            self: *const IAzTask,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddOperation: fn(
            self: *const IAzTask,
            bstrOp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteOperation: fn(
            self: *const IAzTask,
            bstrOp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTask: fn(
            self: *const IAzTask,
            bstrTask: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteTask: fn(
            self: *const IAzTask,
            bstrTask: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Writable: fn(
            self: *const IAzTask,
            pfProp: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IAzTask,
            lPropId: i32,
            varReserved: VARIANT,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IAzTask,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPropertyItem: fn(
            self: *const IAzTask,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePropertyItem: fn(
            self: *const IAzTask,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Submit: fn(
            self: *const IAzTask,
            lFlags: i32,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_get_Name(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).get_Name(@ptrCast(*const IAzTask, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_put_Name(self: *const T, bstrName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).put_Name(@ptrCast(*const IAzTask, self), bstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_get_Description(self: *const T, pbstrDescription: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).get_Description(@ptrCast(*const IAzTask, self), pbstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_put_Description(self: *const T, bstrDescription: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).put_Description(@ptrCast(*const IAzTask, self), bstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_get_ApplicationData(self: *const T, pbstrApplicationData: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).get_ApplicationData(@ptrCast(*const IAzTask, self), pbstrApplicationData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_put_ApplicationData(self: *const T, bstrApplicationData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).put_ApplicationData(@ptrCast(*const IAzTask, self), bstrApplicationData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_get_BizRule(self: *const T, pbstrProp: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).get_BizRule(@ptrCast(*const IAzTask, self), pbstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_put_BizRule(self: *const T, bstrProp: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).put_BizRule(@ptrCast(*const IAzTask, self), bstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_get_BizRuleLanguage(self: *const T, pbstrProp: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).get_BizRuleLanguage(@ptrCast(*const IAzTask, self), pbstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_put_BizRuleLanguage(self: *const T, bstrProp: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).put_BizRuleLanguage(@ptrCast(*const IAzTask, self), bstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_get_BizRuleImportedPath(self: *const T, pbstrProp: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).get_BizRuleImportedPath(@ptrCast(*const IAzTask, self), pbstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_put_BizRuleImportedPath(self: *const T, bstrProp: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).put_BizRuleImportedPath(@ptrCast(*const IAzTask, self), bstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_get_IsRoleDefinition(self: *const T, pfProp: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).get_IsRoleDefinition(@ptrCast(*const IAzTask, self), pfProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_put_IsRoleDefinition(self: *const T, fProp: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).put_IsRoleDefinition(@ptrCast(*const IAzTask, self), fProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_get_Operations(self: *const T, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).get_Operations(@ptrCast(*const IAzTask, self), pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_get_Tasks(self: *const T, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).get_Tasks(@ptrCast(*const IAzTask, self), pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_AddOperation(self: *const T, bstrOp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).AddOperation(@ptrCast(*const IAzTask, self), bstrOp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_DeleteOperation(self: *const T, bstrOp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).DeleteOperation(@ptrCast(*const IAzTask, self), bstrOp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_AddTask(self: *const T, bstrTask: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).AddTask(@ptrCast(*const IAzTask, self), bstrTask, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_DeleteTask(self: *const T, bstrTask: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).DeleteTask(@ptrCast(*const IAzTask, self), bstrTask, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_get_Writable(self: *const T, pfProp: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).get_Writable(@ptrCast(*const IAzTask, self), pfProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_GetProperty(self: *const T, lPropId: i32, varReserved: VARIANT, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).GetProperty(@ptrCast(*const IAzTask, self), lPropId, varReserved, pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_SetProperty(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).SetProperty(@ptrCast(*const IAzTask, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_AddPropertyItem(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).AddPropertyItem(@ptrCast(*const IAzTask, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_DeletePropertyItem(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).DeletePropertyItem(@ptrCast(*const IAzTask, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask_Submit(self: *const T, lFlags: i32, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask.VTable, self.vtable).Submit(@ptrCast(*const IAzTask, self), lFlags, varReserved);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzTasks_Value = @import("../zig.zig").Guid.initString("B338CCAB-4C85-4388-8C0A-C58592BAD398");
pub const IID_IAzTasks = &IID_IAzTasks_Value;
pub const IAzTasks = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Item: fn(
            self: *const IAzTasks,
            Index: i32,
            pvarObtPtr: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IAzTasks,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IAzTasks,
            ppEnumPtr: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTasks_get_Item(self: *const T, Index: i32, pvarObtPtr: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTasks.VTable, self.vtable).get_Item(@ptrCast(*const IAzTasks, self), Index, pvarObtPtr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTasks_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTasks.VTable, self.vtable).get_Count(@ptrCast(*const IAzTasks, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTasks_get__NewEnum(self: *const T, ppEnumPtr: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTasks.VTable, self.vtable).get__NewEnum(@ptrCast(*const IAzTasks, self), ppEnumPtr);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzScope_Value = @import("../zig.zig").Guid.initString("00E52487-E08D-4514-B62E-877D5645F5AB");
pub const IID_IAzScope = &IID_IAzScope_Value;
pub const IAzScope = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Name: fn(
            self: *const IAzScope,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Name: fn(
            self: *const IAzScope,
            bstrName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Description: fn(
            self: *const IAzScope,
            pbstrDescription: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Description: fn(
            self: *const IAzScope,
            bstrDescription: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ApplicationData: fn(
            self: *const IAzScope,
            pbstrApplicationData: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ApplicationData: fn(
            self: *const IAzScope,
            bstrApplicationData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Writable: fn(
            self: *const IAzScope,
            pfProp: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IAzScope,
            lPropId: i32,
            varReserved: VARIANT,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IAzScope,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPropertyItem: fn(
            self: *const IAzScope,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePropertyItem: fn(
            self: *const IAzScope,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolicyAdministrators: fn(
            self: *const IAzScope,
            pvarAdmins: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolicyReaders: fn(
            self: *const IAzScope,
            pvarReaders: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyAdministrator: fn(
            self: *const IAzScope,
            bstrAdmin: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyAdministrator: fn(
            self: *const IAzScope,
            bstrAdmin: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyReader: fn(
            self: *const IAzScope,
            bstrReader: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyReader: fn(
            self: *const IAzScope,
            bstrReader: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ApplicationGroups: fn(
            self: *const IAzScope,
            ppGroupCollection: **IAzApplicationGroups,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenApplicationGroup: fn(
            self: *const IAzScope,
            bstrGroupName: BSTR,
            varReserved: VARIANT,
            ppGroup: **IAzApplicationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateApplicationGroup: fn(
            self: *const IAzScope,
            bstrGroupName: BSTR,
            varReserved: VARIANT,
            ppGroup: **IAzApplicationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteApplicationGroup: fn(
            self: *const IAzScope,
            bstrGroupName: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Roles: fn(
            self: *const IAzScope,
            ppRoleCollection: **IAzRoles,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenRole: fn(
            self: *const IAzScope,
            bstrRoleName: BSTR,
            varReserved: VARIANT,
            ppRole: **IAzRole,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRole: fn(
            self: *const IAzScope,
            bstrRoleName: BSTR,
            varReserved: VARIANT,
            ppRole: **IAzRole,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRole: fn(
            self: *const IAzScope,
            bstrRoleName: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Tasks: fn(
            self: *const IAzScope,
            ppTaskCollection: **IAzTasks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenTask: fn(
            self: *const IAzScope,
            bstrTaskName: BSTR,
            varReserved: VARIANT,
            ppTask: **IAzTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTask: fn(
            self: *const IAzScope,
            bstrTaskName: BSTR,
            varReserved: VARIANT,
            ppTask: **IAzTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteTask: fn(
            self: *const IAzScope,
            bstrTaskName: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Submit: fn(
            self: *const IAzScope,
            lFlags: i32,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CanBeDelegated: fn(
            self: *const IAzScope,
            pfProp: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BizrulesWritable: fn(
            self: *const IAzScope,
            pfProp: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolicyAdministratorsName: fn(
            self: *const IAzScope,
            pvarAdmins: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolicyReadersName: fn(
            self: *const IAzScope,
            pvarReaders: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyAdministratorName: fn(
            self: *const IAzScope,
            bstrAdmin: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyAdministratorName: fn(
            self: *const IAzScope,
            bstrAdmin: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyReaderName: fn(
            self: *const IAzScope,
            bstrReader: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyReaderName: fn(
            self: *const IAzScope,
            bstrReader: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_get_Name(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).get_Name(@ptrCast(*const IAzScope, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_put_Name(self: *const T, bstrName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).put_Name(@ptrCast(*const IAzScope, self), bstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_get_Description(self: *const T, pbstrDescription: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).get_Description(@ptrCast(*const IAzScope, self), pbstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_put_Description(self: *const T, bstrDescription: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).put_Description(@ptrCast(*const IAzScope, self), bstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_get_ApplicationData(self: *const T, pbstrApplicationData: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).get_ApplicationData(@ptrCast(*const IAzScope, self), pbstrApplicationData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_put_ApplicationData(self: *const T, bstrApplicationData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).put_ApplicationData(@ptrCast(*const IAzScope, self), bstrApplicationData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_get_Writable(self: *const T, pfProp: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).get_Writable(@ptrCast(*const IAzScope, self), pfProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_GetProperty(self: *const T, lPropId: i32, varReserved: VARIANT, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).GetProperty(@ptrCast(*const IAzScope, self), lPropId, varReserved, pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_SetProperty(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).SetProperty(@ptrCast(*const IAzScope, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_AddPropertyItem(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).AddPropertyItem(@ptrCast(*const IAzScope, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_DeletePropertyItem(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).DeletePropertyItem(@ptrCast(*const IAzScope, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_get_PolicyAdministrators(self: *const T, pvarAdmins: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).get_PolicyAdministrators(@ptrCast(*const IAzScope, self), pvarAdmins);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_get_PolicyReaders(self: *const T, pvarReaders: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).get_PolicyReaders(@ptrCast(*const IAzScope, self), pvarReaders);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_AddPolicyAdministrator(self: *const T, bstrAdmin: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).AddPolicyAdministrator(@ptrCast(*const IAzScope, self), bstrAdmin, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_DeletePolicyAdministrator(self: *const T, bstrAdmin: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).DeletePolicyAdministrator(@ptrCast(*const IAzScope, self), bstrAdmin, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_AddPolicyReader(self: *const T, bstrReader: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).AddPolicyReader(@ptrCast(*const IAzScope, self), bstrReader, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_DeletePolicyReader(self: *const T, bstrReader: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).DeletePolicyReader(@ptrCast(*const IAzScope, self), bstrReader, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_get_ApplicationGroups(self: *const T, ppGroupCollection: **IAzApplicationGroups) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).get_ApplicationGroups(@ptrCast(*const IAzScope, self), ppGroupCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_OpenApplicationGroup(self: *const T, bstrGroupName: BSTR, varReserved: VARIANT, ppGroup: **IAzApplicationGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).OpenApplicationGroup(@ptrCast(*const IAzScope, self), bstrGroupName, varReserved, ppGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_CreateApplicationGroup(self: *const T, bstrGroupName: BSTR, varReserved: VARIANT, ppGroup: **IAzApplicationGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).CreateApplicationGroup(@ptrCast(*const IAzScope, self), bstrGroupName, varReserved, ppGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_DeleteApplicationGroup(self: *const T, bstrGroupName: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).DeleteApplicationGroup(@ptrCast(*const IAzScope, self), bstrGroupName, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_get_Roles(self: *const T, ppRoleCollection: **IAzRoles) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).get_Roles(@ptrCast(*const IAzScope, self), ppRoleCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_OpenRole(self: *const T, bstrRoleName: BSTR, varReserved: VARIANT, ppRole: **IAzRole) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).OpenRole(@ptrCast(*const IAzScope, self), bstrRoleName, varReserved, ppRole);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_CreateRole(self: *const T, bstrRoleName: BSTR, varReserved: VARIANT, ppRole: **IAzRole) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).CreateRole(@ptrCast(*const IAzScope, self), bstrRoleName, varReserved, ppRole);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_DeleteRole(self: *const T, bstrRoleName: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).DeleteRole(@ptrCast(*const IAzScope, self), bstrRoleName, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_get_Tasks(self: *const T, ppTaskCollection: **IAzTasks) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).get_Tasks(@ptrCast(*const IAzScope, self), ppTaskCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_OpenTask(self: *const T, bstrTaskName: BSTR, varReserved: VARIANT, ppTask: **IAzTask) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).OpenTask(@ptrCast(*const IAzScope, self), bstrTaskName, varReserved, ppTask);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_CreateTask(self: *const T, bstrTaskName: BSTR, varReserved: VARIANT, ppTask: **IAzTask) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).CreateTask(@ptrCast(*const IAzScope, self), bstrTaskName, varReserved, ppTask);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_DeleteTask(self: *const T, bstrTaskName: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).DeleteTask(@ptrCast(*const IAzScope, self), bstrTaskName, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_Submit(self: *const T, lFlags: i32, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).Submit(@ptrCast(*const IAzScope, self), lFlags, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_get_CanBeDelegated(self: *const T, pfProp: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).get_CanBeDelegated(@ptrCast(*const IAzScope, self), pfProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_get_BizrulesWritable(self: *const T, pfProp: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).get_BizrulesWritable(@ptrCast(*const IAzScope, self), pfProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_get_PolicyAdministratorsName(self: *const T, pvarAdmins: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).get_PolicyAdministratorsName(@ptrCast(*const IAzScope, self), pvarAdmins);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_get_PolicyReadersName(self: *const T, pvarReaders: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).get_PolicyReadersName(@ptrCast(*const IAzScope, self), pvarReaders);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_AddPolicyAdministratorName(self: *const T, bstrAdmin: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).AddPolicyAdministratorName(@ptrCast(*const IAzScope, self), bstrAdmin, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_DeletePolicyAdministratorName(self: *const T, bstrAdmin: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).DeletePolicyAdministratorName(@ptrCast(*const IAzScope, self), bstrAdmin, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_AddPolicyReaderName(self: *const T, bstrReader: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).AddPolicyReaderName(@ptrCast(*const IAzScope, self), bstrReader, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope_DeletePolicyReaderName(self: *const T, bstrReader: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope.VTable, self.vtable).DeletePolicyReaderName(@ptrCast(*const IAzScope, self), bstrReader, varReserved);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzScopes_Value = @import("../zig.zig").Guid.initString("78E14853-9F5E-406D-9B91-6BDBA6973510");
pub const IID_IAzScopes = &IID_IAzScopes_Value;
pub const IAzScopes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Item: fn(
            self: *const IAzScopes,
            Index: i32,
            pvarObtPtr: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IAzScopes,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IAzScopes,
            ppEnumPtr: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScopes_get_Item(self: *const T, Index: i32, pvarObtPtr: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScopes.VTable, self.vtable).get_Item(@ptrCast(*const IAzScopes, self), Index, pvarObtPtr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScopes_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScopes.VTable, self.vtable).get_Count(@ptrCast(*const IAzScopes, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScopes_get__NewEnum(self: *const T, ppEnumPtr: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScopes.VTable, self.vtable).get__NewEnum(@ptrCast(*const IAzScopes, self), ppEnumPtr);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzApplicationGroup_Value = @import("../zig.zig").Guid.initString("F1B744CD-58A6-4E06-9FBF-36F6D779E21E");
pub const IID_IAzApplicationGroup = &IID_IAzApplicationGroup_Value;
pub const IAzApplicationGroup = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Name: fn(
            self: *const IAzApplicationGroup,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Name: fn(
            self: *const IAzApplicationGroup,
            bstrName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Type: fn(
            self: *const IAzApplicationGroup,
            plProp: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Type: fn(
            self: *const IAzApplicationGroup,
            lProp: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_LdapQuery: fn(
            self: *const IAzApplicationGroup,
            pbstrProp: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_LdapQuery: fn(
            self: *const IAzApplicationGroup,
            bstrProp: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AppMembers: fn(
            self: *const IAzApplicationGroup,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AppNonMembers: fn(
            self: *const IAzApplicationGroup,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Members: fn(
            self: *const IAzApplicationGroup,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NonMembers: fn(
            self: *const IAzApplicationGroup,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Description: fn(
            self: *const IAzApplicationGroup,
            pbstrDescription: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Description: fn(
            self: *const IAzApplicationGroup,
            bstrDescription: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAppMember: fn(
            self: *const IAzApplicationGroup,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAppMember: fn(
            self: *const IAzApplicationGroup,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAppNonMember: fn(
            self: *const IAzApplicationGroup,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAppNonMember: fn(
            self: *const IAzApplicationGroup,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMember: fn(
            self: *const IAzApplicationGroup,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteMember: fn(
            self: *const IAzApplicationGroup,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddNonMember: fn(
            self: *const IAzApplicationGroup,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteNonMember: fn(
            self: *const IAzApplicationGroup,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Writable: fn(
            self: *const IAzApplicationGroup,
            pfProp: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IAzApplicationGroup,
            lPropId: i32,
            varReserved: VARIANT,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IAzApplicationGroup,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPropertyItem: fn(
            self: *const IAzApplicationGroup,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePropertyItem: fn(
            self: *const IAzApplicationGroup,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Submit: fn(
            self: *const IAzApplicationGroup,
            lFlags: i32,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMemberName: fn(
            self: *const IAzApplicationGroup,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteMemberName: fn(
            self: *const IAzApplicationGroup,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddNonMemberName: fn(
            self: *const IAzApplicationGroup,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteNonMemberName: fn(
            self: *const IAzApplicationGroup,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MembersName: fn(
            self: *const IAzApplicationGroup,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NonMembersName: fn(
            self: *const IAzApplicationGroup,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_get_Name(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).get_Name(@ptrCast(*const IAzApplicationGroup, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_put_Name(self: *const T, bstrName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).put_Name(@ptrCast(*const IAzApplicationGroup, self), bstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_get_Type(self: *const T, plProp: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).get_Type(@ptrCast(*const IAzApplicationGroup, self), plProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_put_Type(self: *const T, lProp: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).put_Type(@ptrCast(*const IAzApplicationGroup, self), lProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_get_LdapQuery(self: *const T, pbstrProp: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).get_LdapQuery(@ptrCast(*const IAzApplicationGroup, self), pbstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_put_LdapQuery(self: *const T, bstrProp: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).put_LdapQuery(@ptrCast(*const IAzApplicationGroup, self), bstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_get_AppMembers(self: *const T, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).get_AppMembers(@ptrCast(*const IAzApplicationGroup, self), pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_get_AppNonMembers(self: *const T, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).get_AppNonMembers(@ptrCast(*const IAzApplicationGroup, self), pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_get_Members(self: *const T, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).get_Members(@ptrCast(*const IAzApplicationGroup, self), pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_get_NonMembers(self: *const T, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).get_NonMembers(@ptrCast(*const IAzApplicationGroup, self), pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_get_Description(self: *const T, pbstrDescription: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).get_Description(@ptrCast(*const IAzApplicationGroup, self), pbstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_put_Description(self: *const T, bstrDescription: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).put_Description(@ptrCast(*const IAzApplicationGroup, self), bstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_AddAppMember(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).AddAppMember(@ptrCast(*const IAzApplicationGroup, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_DeleteAppMember(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).DeleteAppMember(@ptrCast(*const IAzApplicationGroup, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_AddAppNonMember(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).AddAppNonMember(@ptrCast(*const IAzApplicationGroup, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_DeleteAppNonMember(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).DeleteAppNonMember(@ptrCast(*const IAzApplicationGroup, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_AddMember(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).AddMember(@ptrCast(*const IAzApplicationGroup, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_DeleteMember(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).DeleteMember(@ptrCast(*const IAzApplicationGroup, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_AddNonMember(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).AddNonMember(@ptrCast(*const IAzApplicationGroup, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_DeleteNonMember(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).DeleteNonMember(@ptrCast(*const IAzApplicationGroup, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_get_Writable(self: *const T, pfProp: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).get_Writable(@ptrCast(*const IAzApplicationGroup, self), pfProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_GetProperty(self: *const T, lPropId: i32, varReserved: VARIANT, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).GetProperty(@ptrCast(*const IAzApplicationGroup, self), lPropId, varReserved, pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_SetProperty(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).SetProperty(@ptrCast(*const IAzApplicationGroup, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_AddPropertyItem(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).AddPropertyItem(@ptrCast(*const IAzApplicationGroup, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_DeletePropertyItem(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).DeletePropertyItem(@ptrCast(*const IAzApplicationGroup, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_Submit(self: *const T, lFlags: i32, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).Submit(@ptrCast(*const IAzApplicationGroup, self), lFlags, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_AddMemberName(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).AddMemberName(@ptrCast(*const IAzApplicationGroup, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_DeleteMemberName(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).DeleteMemberName(@ptrCast(*const IAzApplicationGroup, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_AddNonMemberName(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).AddNonMemberName(@ptrCast(*const IAzApplicationGroup, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_DeleteNonMemberName(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).DeleteNonMemberName(@ptrCast(*const IAzApplicationGroup, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_get_MembersName(self: *const T, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).get_MembersName(@ptrCast(*const IAzApplicationGroup, self), pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup_get_NonMembersName(self: *const T, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup.VTable, self.vtable).get_NonMembersName(@ptrCast(*const IAzApplicationGroup, self), pvarProp);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzApplicationGroups_Value = @import("../zig.zig").Guid.initString("4CE66AD5-9F3C-469D-A911-B99887A7E685");
pub const IID_IAzApplicationGroups = &IID_IAzApplicationGroups_Value;
pub const IAzApplicationGroups = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Item: fn(
            self: *const IAzApplicationGroups,
            Index: i32,
            pvarObtPtr: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IAzApplicationGroups,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IAzApplicationGroups,
            ppEnumPtr: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroups_get_Item(self: *const T, Index: i32, pvarObtPtr: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroups.VTable, self.vtable).get_Item(@ptrCast(*const IAzApplicationGroups, self), Index, pvarObtPtr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroups_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroups.VTable, self.vtable).get_Count(@ptrCast(*const IAzApplicationGroups, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroups_get__NewEnum(self: *const T, ppEnumPtr: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroups.VTable, self.vtable).get__NewEnum(@ptrCast(*const IAzApplicationGroups, self), ppEnumPtr);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzRole_Value = @import("../zig.zig").Guid.initString("859E0D8D-62D7-41D8-A034-C0CD5D43FDFA");
pub const IID_IAzRole = &IID_IAzRole_Value;
pub const IAzRole = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Name: fn(
            self: *const IAzRole,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Name: fn(
            self: *const IAzRole,
            bstrName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Description: fn(
            self: *const IAzRole,
            pbstrDescription: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Description: fn(
            self: *const IAzRole,
            bstrDescription: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ApplicationData: fn(
            self: *const IAzRole,
            pbstrApplicationData: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ApplicationData: fn(
            self: *const IAzRole,
            bstrApplicationData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAppMember: fn(
            self: *const IAzRole,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAppMember: fn(
            self: *const IAzRole,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTask: fn(
            self: *const IAzRole,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteTask: fn(
            self: *const IAzRole,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddOperation: fn(
            self: *const IAzRole,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteOperation: fn(
            self: *const IAzRole,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMember: fn(
            self: *const IAzRole,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteMember: fn(
            self: *const IAzRole,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Writable: fn(
            self: *const IAzRole,
            pfProp: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IAzRole,
            lPropId: i32,
            varReserved: VARIANT,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IAzRole,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AppMembers: fn(
            self: *const IAzRole,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Members: fn(
            self: *const IAzRole,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Operations: fn(
            self: *const IAzRole,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Tasks: fn(
            self: *const IAzRole,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPropertyItem: fn(
            self: *const IAzRole,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePropertyItem: fn(
            self: *const IAzRole,
            lPropId: i32,
            varProp: VARIANT,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Submit: fn(
            self: *const IAzRole,
            lFlags: i32,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMemberName: fn(
            self: *const IAzRole,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteMemberName: fn(
            self: *const IAzRole,
            bstrProp: BSTR,
            varReserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MembersName: fn(
            self: *const IAzRole,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_get_Name(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).get_Name(@ptrCast(*const IAzRole, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_put_Name(self: *const T, bstrName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).put_Name(@ptrCast(*const IAzRole, self), bstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_get_Description(self: *const T, pbstrDescription: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).get_Description(@ptrCast(*const IAzRole, self), pbstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_put_Description(self: *const T, bstrDescription: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).put_Description(@ptrCast(*const IAzRole, self), bstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_get_ApplicationData(self: *const T, pbstrApplicationData: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).get_ApplicationData(@ptrCast(*const IAzRole, self), pbstrApplicationData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_put_ApplicationData(self: *const T, bstrApplicationData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).put_ApplicationData(@ptrCast(*const IAzRole, self), bstrApplicationData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_AddAppMember(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).AddAppMember(@ptrCast(*const IAzRole, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_DeleteAppMember(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).DeleteAppMember(@ptrCast(*const IAzRole, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_AddTask(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).AddTask(@ptrCast(*const IAzRole, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_DeleteTask(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).DeleteTask(@ptrCast(*const IAzRole, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_AddOperation(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).AddOperation(@ptrCast(*const IAzRole, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_DeleteOperation(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).DeleteOperation(@ptrCast(*const IAzRole, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_AddMember(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).AddMember(@ptrCast(*const IAzRole, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_DeleteMember(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).DeleteMember(@ptrCast(*const IAzRole, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_get_Writable(self: *const T, pfProp: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).get_Writable(@ptrCast(*const IAzRole, self), pfProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_GetProperty(self: *const T, lPropId: i32, varReserved: VARIANT, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).GetProperty(@ptrCast(*const IAzRole, self), lPropId, varReserved, pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_SetProperty(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).SetProperty(@ptrCast(*const IAzRole, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_get_AppMembers(self: *const T, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).get_AppMembers(@ptrCast(*const IAzRole, self), pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_get_Members(self: *const T, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).get_Members(@ptrCast(*const IAzRole, self), pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_get_Operations(self: *const T, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).get_Operations(@ptrCast(*const IAzRole, self), pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_get_Tasks(self: *const T, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).get_Tasks(@ptrCast(*const IAzRole, self), pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_AddPropertyItem(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).AddPropertyItem(@ptrCast(*const IAzRole, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_DeletePropertyItem(self: *const T, lPropId: i32, varProp: VARIANT, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).DeletePropertyItem(@ptrCast(*const IAzRole, self), lPropId, varProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_Submit(self: *const T, lFlags: i32, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).Submit(@ptrCast(*const IAzRole, self), lFlags, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_AddMemberName(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).AddMemberName(@ptrCast(*const IAzRole, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_DeleteMemberName(self: *const T, bstrProp: BSTR, varReserved: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).DeleteMemberName(@ptrCast(*const IAzRole, self), bstrProp, varReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRole_get_MembersName(self: *const T, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRole.VTable, self.vtable).get_MembersName(@ptrCast(*const IAzRole, self), pvarProp);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzRoles_Value = @import("../zig.zig").Guid.initString("95E0F119-13B4-4DAE-B65F-2F7D60D822E4");
pub const IID_IAzRoles = &IID_IAzRoles_Value;
pub const IAzRoles = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Item: fn(
            self: *const IAzRoles,
            Index: i32,
            pvarObtPtr: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IAzRoles,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IAzRoles,
            ppEnumPtr: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRoles_get_Item(self: *const T, Index: i32, pvarObtPtr: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRoles.VTable, self.vtable).get_Item(@ptrCast(*const IAzRoles, self), Index, pvarObtPtr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRoles_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRoles.VTable, self.vtable).get_Count(@ptrCast(*const IAzRoles, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRoles_get__NewEnum(self: *const T, ppEnumPtr: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRoles.VTable, self.vtable).get__NewEnum(@ptrCast(*const IAzRoles, self), ppEnumPtr);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzClientContext_Value = @import("../zig.zig").Guid.initString("EFF1F00B-488A-466D-AFD9-A401C5F9EEF5");
pub const IID_IAzClientContext = &IID_IAzClientContext_Value;
pub const IAzClientContext = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        AccessCheck: fn(
            self: *const IAzClientContext,
            bstrObjectName: BSTR,
            varScopeNames: VARIANT,
            varOperations: VARIANT,
            varParameterNames: VARIANT,
            varParameterValues: VARIANT,
            varInterfaceNames: VARIANT,
            varInterfaceFlags: VARIANT,
            varInterfaces: VARIANT,
            pvarResults: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBusinessRuleString: fn(
            self: *const IAzClientContext,
            pbstrBusinessRuleString: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UserDn: fn(
            self: *const IAzClientContext,
            pbstrProp: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UserSamCompat: fn(
            self: *const IAzClientContext,
            pbstrProp: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UserDisplay: fn(
            self: *const IAzClientContext,
            pbstrProp: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UserGuid: fn(
            self: *const IAzClientContext,
            pbstrProp: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UserCanonical: fn(
            self: *const IAzClientContext,
            pbstrProp: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UserUpn: fn(
            self: *const IAzClientContext,
            pbstrProp: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UserDnsSamCompat: fn(
            self: *const IAzClientContext,
            pbstrProp: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IAzClientContext,
            lPropId: i32,
            varReserved: VARIANT,
            pvarProp: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRoles: fn(
            self: *const IAzClientContext,
            bstrScopeName: BSTR,
            pvarRoleNames: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RoleForAccessCheck: fn(
            self: *const IAzClientContext,
            pbstrProp: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RoleForAccessCheck: fn(
            self: *const IAzClientContext,
            bstrProp: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext_AccessCheck(self: *const T, bstrObjectName: BSTR, varScopeNames: VARIANT, varOperations: VARIANT, varParameterNames: VARIANT, varParameterValues: VARIANT, varInterfaceNames: VARIANT, varInterfaceFlags: VARIANT, varInterfaces: VARIANT, pvarResults: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext.VTable, self.vtable).AccessCheck(@ptrCast(*const IAzClientContext, self), bstrObjectName, varScopeNames, varOperations, varParameterNames, varParameterValues, varInterfaceNames, varInterfaceFlags, varInterfaces, pvarResults);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext_GetBusinessRuleString(self: *const T, pbstrBusinessRuleString: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext.VTable, self.vtable).GetBusinessRuleString(@ptrCast(*const IAzClientContext, self), pbstrBusinessRuleString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext_get_UserDn(self: *const T, pbstrProp: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext.VTable, self.vtable).get_UserDn(@ptrCast(*const IAzClientContext, self), pbstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext_get_UserSamCompat(self: *const T, pbstrProp: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext.VTable, self.vtable).get_UserSamCompat(@ptrCast(*const IAzClientContext, self), pbstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext_get_UserDisplay(self: *const T, pbstrProp: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext.VTable, self.vtable).get_UserDisplay(@ptrCast(*const IAzClientContext, self), pbstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext_get_UserGuid(self: *const T, pbstrProp: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext.VTable, self.vtable).get_UserGuid(@ptrCast(*const IAzClientContext, self), pbstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext_get_UserCanonical(self: *const T, pbstrProp: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext.VTable, self.vtable).get_UserCanonical(@ptrCast(*const IAzClientContext, self), pbstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext_get_UserUpn(self: *const T, pbstrProp: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext.VTable, self.vtable).get_UserUpn(@ptrCast(*const IAzClientContext, self), pbstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext_get_UserDnsSamCompat(self: *const T, pbstrProp: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext.VTable, self.vtable).get_UserDnsSamCompat(@ptrCast(*const IAzClientContext, self), pbstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext_GetProperty(self: *const T, lPropId: i32, varReserved: VARIANT, pvarProp: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext.VTable, self.vtable).GetProperty(@ptrCast(*const IAzClientContext, self), lPropId, varReserved, pvarProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext_GetRoles(self: *const T, bstrScopeName: BSTR, pvarRoleNames: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext.VTable, self.vtable).GetRoles(@ptrCast(*const IAzClientContext, self), bstrScopeName, pvarRoleNames);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext_get_RoleForAccessCheck(self: *const T, pbstrProp: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext.VTable, self.vtable).get_RoleForAccessCheck(@ptrCast(*const IAzClientContext, self), pbstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext_put_RoleForAccessCheck(self: *const T, bstrProp: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext.VTable, self.vtable).put_RoleForAccessCheck(@ptrCast(*const IAzClientContext, self), bstrProp);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzClientContext2_Value = @import("../zig.zig").Guid.initString("2B0C92B8-208A-488A-8F81-E4EDB22111CD");
pub const IID_IAzClientContext2 = &IID_IAzClientContext2_Value;
pub const IAzClientContext2 = extern struct {
    pub const VTable = extern struct {
        base: IAzClientContext.VTable,
        GetAssignedScopesPage: fn(
            self: *const IAzClientContext2,
            lOptions: i32,
            PageSize: i32,
            pvarCursor: *VARIANT,
            pvarScopeNames: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRoles: fn(
            self: *const IAzClientContext2,
            varRoles: VARIANT,
            bstrScopeName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddApplicationGroups: fn(
            self: *const IAzClientContext2,
            varApplicationGroups: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStringSids: fn(
            self: *const IAzClientContext2,
            varStringSids: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_LDAPQueryDN: fn(
            self: *const IAzClientContext2,
            bstrLDAPQueryDN: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_LDAPQueryDN: fn(
            self: *const IAzClientContext2,
            pbstrLDAPQueryDN: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IAzClientContext.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext2_GetAssignedScopesPage(self: *const T, lOptions: i32, PageSize: i32, pvarCursor: *VARIANT, pvarScopeNames: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext2.VTable, self.vtable).GetAssignedScopesPage(@ptrCast(*const IAzClientContext2, self), lOptions, PageSize, pvarCursor, pvarScopeNames);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext2_AddRoles(self: *const T, varRoles: VARIANT, bstrScopeName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext2.VTable, self.vtable).AddRoles(@ptrCast(*const IAzClientContext2, self), varRoles, bstrScopeName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext2_AddApplicationGroups(self: *const T, varApplicationGroups: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext2.VTable, self.vtable).AddApplicationGroups(@ptrCast(*const IAzClientContext2, self), varApplicationGroups);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext2_AddStringSids(self: *const T, varStringSids: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext2.VTable, self.vtable).AddStringSids(@ptrCast(*const IAzClientContext2, self), varStringSids);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext2_put_LDAPQueryDN(self: *const T, bstrLDAPQueryDN: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext2.VTable, self.vtable).put_LDAPQueryDN(@ptrCast(*const IAzClientContext2, self), bstrLDAPQueryDN);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext2_get_LDAPQueryDN(self: *const T, pbstrLDAPQueryDN: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext2.VTable, self.vtable).get_LDAPQueryDN(@ptrCast(*const IAzClientContext2, self), pbstrLDAPQueryDN);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzBizRuleContext_Value = @import("../zig.zig").Guid.initString("E192F17D-D59F-455E-A152-940316CD77B2");
pub const IID_IAzBizRuleContext = &IID_IAzBizRuleContext_Value;
pub const IAzBizRuleContext = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        put_BusinessRuleResult: fn(
            self: *const IAzBizRuleContext,
            bResult: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_BusinessRuleString: fn(
            self: *const IAzBizRuleContext,
            bstrBusinessRuleString: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BusinessRuleString: fn(
            self: *const IAzBizRuleContext,
            pbstrBusinessRuleString: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParameter: fn(
            self: *const IAzBizRuleContext,
            bstrParameterName: BSTR,
            pvarParameterValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzBizRuleContext_put_BusinessRuleResult(self: *const T, bResult: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzBizRuleContext.VTable, self.vtable).put_BusinessRuleResult(@ptrCast(*const IAzBizRuleContext, self), bResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzBizRuleContext_put_BusinessRuleString(self: *const T, bstrBusinessRuleString: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzBizRuleContext.VTable, self.vtable).put_BusinessRuleString(@ptrCast(*const IAzBizRuleContext, self), bstrBusinessRuleString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzBizRuleContext_get_BusinessRuleString(self: *const T, pbstrBusinessRuleString: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzBizRuleContext.VTable, self.vtable).get_BusinessRuleString(@ptrCast(*const IAzBizRuleContext, self), pbstrBusinessRuleString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzBizRuleContext_GetParameter(self: *const T, bstrParameterName: BSTR, pvarParameterValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzBizRuleContext.VTable, self.vtable).GetParameter(@ptrCast(*const IAzBizRuleContext, self), bstrParameterName, pvarParameterValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzBizRuleParameters_Value = @import("../zig.zig").Guid.initString("FC17685F-E25D-4DCD-BAE1-276EC9533CB5");
pub const IID_IAzBizRuleParameters = &IID_IAzBizRuleParameters_Value;
pub const IAzBizRuleParameters = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        AddParameter: fn(
            self: *const IAzBizRuleParameters,
            bstrParameterName: BSTR,
            varParameterValue: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddParameters: fn(
            self: *const IAzBizRuleParameters,
            varParameterNames: VARIANT,
            varParameterValues: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParameterValue: fn(
            self: *const IAzBizRuleParameters,
            bstrParameterName: BSTR,
            pvarParameterValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IAzBizRuleParameters,
            varParameterName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAll: fn(
            self: *const IAzBizRuleParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IAzBizRuleParameters,
            plCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzBizRuleParameters_AddParameter(self: *const T, bstrParameterName: BSTR, varParameterValue: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzBizRuleParameters.VTable, self.vtable).AddParameter(@ptrCast(*const IAzBizRuleParameters, self), bstrParameterName, varParameterValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzBizRuleParameters_AddParameters(self: *const T, varParameterNames: VARIANT, varParameterValues: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzBizRuleParameters.VTable, self.vtable).AddParameters(@ptrCast(*const IAzBizRuleParameters, self), varParameterNames, varParameterValues);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzBizRuleParameters_GetParameterValue(self: *const T, bstrParameterName: BSTR, pvarParameterValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzBizRuleParameters.VTable, self.vtable).GetParameterValue(@ptrCast(*const IAzBizRuleParameters, self), bstrParameterName, pvarParameterValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzBizRuleParameters_Remove(self: *const T, varParameterName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzBizRuleParameters.VTable, self.vtable).Remove(@ptrCast(*const IAzBizRuleParameters, self), varParameterName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzBizRuleParameters_RemoveAll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzBizRuleParameters.VTable, self.vtable).RemoveAll(@ptrCast(*const IAzBizRuleParameters, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzBizRuleParameters_get_Count(self: *const T, plCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzBizRuleParameters.VTable, self.vtable).get_Count(@ptrCast(*const IAzBizRuleParameters, self), plCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzBizRuleInterfaces_Value = @import("../zig.zig").Guid.initString("E94128C7-E9DA-44CC-B0BD-53036F3AAB3D");
pub const IID_IAzBizRuleInterfaces = &IID_IAzBizRuleInterfaces_Value;
pub const IAzBizRuleInterfaces = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        AddInterface: fn(
            self: *const IAzBizRuleInterfaces,
            bstrInterfaceName: BSTR,
            lInterfaceFlag: i32,
            varInterface: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddInterfaces: fn(
            self: *const IAzBizRuleInterfaces,
            varInterfaceNames: VARIANT,
            varInterfaceFlags: VARIANT,
            varInterfaces: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInterfaceValue: fn(
            self: *const IAzBizRuleInterfaces,
            bstrInterfaceName: BSTR,
            lInterfaceFlag: *i32,
            varInterface: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IAzBizRuleInterfaces,
            bstrInterfaceName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAll: fn(
            self: *const IAzBizRuleInterfaces,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IAzBizRuleInterfaces,
            plCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzBizRuleInterfaces_AddInterface(self: *const T, bstrInterfaceName: BSTR, lInterfaceFlag: i32, varInterface: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzBizRuleInterfaces.VTable, self.vtable).AddInterface(@ptrCast(*const IAzBizRuleInterfaces, self), bstrInterfaceName, lInterfaceFlag, varInterface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzBizRuleInterfaces_AddInterfaces(self: *const T, varInterfaceNames: VARIANT, varInterfaceFlags: VARIANT, varInterfaces: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzBizRuleInterfaces.VTable, self.vtable).AddInterfaces(@ptrCast(*const IAzBizRuleInterfaces, self), varInterfaceNames, varInterfaceFlags, varInterfaces);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzBizRuleInterfaces_GetInterfaceValue(self: *const T, bstrInterfaceName: BSTR, lInterfaceFlag: *i32, varInterface: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzBizRuleInterfaces.VTable, self.vtable).GetInterfaceValue(@ptrCast(*const IAzBizRuleInterfaces, self), bstrInterfaceName, lInterfaceFlag, varInterface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzBizRuleInterfaces_Remove(self: *const T, bstrInterfaceName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzBizRuleInterfaces.VTable, self.vtable).Remove(@ptrCast(*const IAzBizRuleInterfaces, self), bstrInterfaceName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzBizRuleInterfaces_RemoveAll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzBizRuleInterfaces.VTable, self.vtable).RemoveAll(@ptrCast(*const IAzBizRuleInterfaces, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzBizRuleInterfaces_get_Count(self: *const T, plCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzBizRuleInterfaces.VTable, self.vtable).get_Count(@ptrCast(*const IAzBizRuleInterfaces, self), plCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzClientContext3_Value = @import("../zig.zig").Guid.initString("11894FDE-1DEB-4B4B-8907-6D1CDA1F5D4F");
pub const IID_IAzClientContext3 = &IID_IAzClientContext3_Value;
pub const IAzClientContext3 = extern struct {
    pub const VTable = extern struct {
        base: IAzClientContext2.VTable,
        AccessCheck2: fn(
            self: *const IAzClientContext3,
            bstrObjectName: BSTR,
            bstrScopeName: BSTR,
            lOperation: i32,
            plResult: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsInRoleAssignment: fn(
            self: *const IAzClientContext3,
            bstrScopeName: BSTR,
            bstrRoleName: BSTR,
            pbIsInRole: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOperations: fn(
            self: *const IAzClientContext3,
            bstrScopeName: BSTR,
            ppOperationCollection: **IAzOperations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTasks: fn(
            self: *const IAzClientContext3,
            bstrScopeName: BSTR,
            ppTaskCollection: **IAzTasks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BizRuleParameters: fn(
            self: *const IAzClientContext3,
            ppBizRuleParam: **IAzBizRuleParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BizRuleInterfaces: fn(
            self: *const IAzClientContext3,
            ppBizRuleInterfaces: **IAzBizRuleInterfaces,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroups: fn(
            self: *const IAzClientContext3,
            bstrScopeName: BSTR,
            ulOptions: u32,
            pGroupArray: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Sids: fn(
            self: *const IAzClientContext3,
            pStringSidArray: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IAzClientContext2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext3_AccessCheck2(self: *const T, bstrObjectName: BSTR, bstrScopeName: BSTR, lOperation: i32, plResult: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext3.VTable, self.vtable).AccessCheck2(@ptrCast(*const IAzClientContext3, self), bstrObjectName, bstrScopeName, lOperation, plResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext3_IsInRoleAssignment(self: *const T, bstrScopeName: BSTR, bstrRoleName: BSTR, pbIsInRole: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext3.VTable, self.vtable).IsInRoleAssignment(@ptrCast(*const IAzClientContext3, self), bstrScopeName, bstrRoleName, pbIsInRole);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext3_GetOperations(self: *const T, bstrScopeName: BSTR, ppOperationCollection: **IAzOperations) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext3.VTable, self.vtable).GetOperations(@ptrCast(*const IAzClientContext3, self), bstrScopeName, ppOperationCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext3_GetTasks(self: *const T, bstrScopeName: BSTR, ppTaskCollection: **IAzTasks) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext3.VTable, self.vtable).GetTasks(@ptrCast(*const IAzClientContext3, self), bstrScopeName, ppTaskCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext3_get_BizRuleParameters(self: *const T, ppBizRuleParam: **IAzBizRuleParameters) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext3.VTable, self.vtable).get_BizRuleParameters(@ptrCast(*const IAzClientContext3, self), ppBizRuleParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext3_get_BizRuleInterfaces(self: *const T, ppBizRuleInterfaces: **IAzBizRuleInterfaces) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext3.VTable, self.vtable).get_BizRuleInterfaces(@ptrCast(*const IAzClientContext3, self), ppBizRuleInterfaces);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext3_GetGroups(self: *const T, bstrScopeName: BSTR, ulOptions: u32, pGroupArray: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext3.VTable, self.vtable).GetGroups(@ptrCast(*const IAzClientContext3, self), bstrScopeName, ulOptions, pGroupArray);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzClientContext3_get_Sids(self: *const T, pStringSidArray: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzClientContext3.VTable, self.vtable).get_Sids(@ptrCast(*const IAzClientContext3, self), pStringSidArray);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzScope2_Value = @import("../zig.zig").Guid.initString("EE9FE8C9-C9F3-40E2-AA12-D1D8599727FD");
pub const IID_IAzScope2 = &IID_IAzScope2_Value;
pub const IAzScope2 = extern struct {
    pub const VTable = extern struct {
        base: IAzScope.VTable,
        get_RoleDefinitions: fn(
            self: *const IAzScope2,
            ppRoleDefinitions: **IAzRoleDefinitions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRoleDefinition: fn(
            self: *const IAzScope2,
            bstrRoleDefinitionName: BSTR,
            ppRoleDefinitions: **IAzRoleDefinition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenRoleDefinition: fn(
            self: *const IAzScope2,
            bstrRoleDefinitionName: BSTR,
            ppRoleDefinitions: **IAzRoleDefinition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRoleDefinition: fn(
            self: *const IAzScope2,
            bstrRoleDefinitionName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RoleAssignments: fn(
            self: *const IAzScope2,
            ppRoleAssignments: **IAzRoleAssignments,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRoleAssignment: fn(
            self: *const IAzScope2,
            bstrRoleAssignmentName: BSTR,
            ppRoleAssignment: **IAzRoleAssignment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenRoleAssignment: fn(
            self: *const IAzScope2,
            bstrRoleAssignmentName: BSTR,
            ppRoleAssignment: **IAzRoleAssignment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRoleAssignment: fn(
            self: *const IAzScope2,
            bstrRoleAssignmentName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IAzScope.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope2_get_RoleDefinitions(self: *const T, ppRoleDefinitions: **IAzRoleDefinitions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope2.VTable, self.vtable).get_RoleDefinitions(@ptrCast(*const IAzScope2, self), ppRoleDefinitions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope2_CreateRoleDefinition(self: *const T, bstrRoleDefinitionName: BSTR, ppRoleDefinitions: **IAzRoleDefinition) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope2.VTable, self.vtable).CreateRoleDefinition(@ptrCast(*const IAzScope2, self), bstrRoleDefinitionName, ppRoleDefinitions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope2_OpenRoleDefinition(self: *const T, bstrRoleDefinitionName: BSTR, ppRoleDefinitions: **IAzRoleDefinition) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope2.VTable, self.vtable).OpenRoleDefinition(@ptrCast(*const IAzScope2, self), bstrRoleDefinitionName, ppRoleDefinitions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope2_DeleteRoleDefinition(self: *const T, bstrRoleDefinitionName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope2.VTable, self.vtable).DeleteRoleDefinition(@ptrCast(*const IAzScope2, self), bstrRoleDefinitionName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope2_get_RoleAssignments(self: *const T, ppRoleAssignments: **IAzRoleAssignments) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope2.VTable, self.vtable).get_RoleAssignments(@ptrCast(*const IAzScope2, self), ppRoleAssignments);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope2_CreateRoleAssignment(self: *const T, bstrRoleAssignmentName: BSTR, ppRoleAssignment: **IAzRoleAssignment) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope2.VTable, self.vtable).CreateRoleAssignment(@ptrCast(*const IAzScope2, self), bstrRoleAssignmentName, ppRoleAssignment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope2_OpenRoleAssignment(self: *const T, bstrRoleAssignmentName: BSTR, ppRoleAssignment: **IAzRoleAssignment) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope2.VTable, self.vtable).OpenRoleAssignment(@ptrCast(*const IAzScope2, self), bstrRoleAssignmentName, ppRoleAssignment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzScope2_DeleteRoleAssignment(self: *const T, bstrRoleAssignmentName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzScope2.VTable, self.vtable).DeleteRoleAssignment(@ptrCast(*const IAzScope2, self), bstrRoleAssignmentName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzApplication3_Value = @import("../zig.zig").Guid.initString("181C845E-7196-4A7D-AC2E-020C0BB7A303");
pub const IID_IAzApplication3 = &IID_IAzApplication3_Value;
pub const IAzApplication3 = extern struct {
    pub const VTable = extern struct {
        base: IAzApplication2.VTable,
        ScopeExists: fn(
            self: *const IAzApplication3,
            bstrScopeName: BSTR,
            pbExist: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenScope2: fn(
            self: *const IAzApplication3,
            bstrScopeName: BSTR,
            ppScope2: **IAzScope2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateScope2: fn(
            self: *const IAzApplication3,
            bstrScopeName: BSTR,
            ppScope2: **IAzScope2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteScope2: fn(
            self: *const IAzApplication3,
            bstrScopeName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RoleDefinitions: fn(
            self: *const IAzApplication3,
            ppRoleDefinitions: **IAzRoleDefinitions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRoleDefinition: fn(
            self: *const IAzApplication3,
            bstrRoleDefinitionName: BSTR,
            ppRoleDefinitions: **IAzRoleDefinition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenRoleDefinition: fn(
            self: *const IAzApplication3,
            bstrRoleDefinitionName: BSTR,
            ppRoleDefinitions: **IAzRoleDefinition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRoleDefinition: fn(
            self: *const IAzApplication3,
            bstrRoleDefinitionName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RoleAssignments: fn(
            self: *const IAzApplication3,
            ppRoleAssignments: **IAzRoleAssignments,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRoleAssignment: fn(
            self: *const IAzApplication3,
            bstrRoleAssignmentName: BSTR,
            ppRoleAssignment: **IAzRoleAssignment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenRoleAssignment: fn(
            self: *const IAzApplication3,
            bstrRoleAssignmentName: BSTR,
            ppRoleAssignment: **IAzRoleAssignment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRoleAssignment: fn(
            self: *const IAzApplication3,
            bstrRoleAssignmentName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BizRulesEnabled: fn(
            self: *const IAzApplication3,
            pbEnabled: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_BizRulesEnabled: fn(
            self: *const IAzApplication3,
            bEnabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IAzApplication2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication3_ScopeExists(self: *const T, bstrScopeName: BSTR, pbExist: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication3.VTable, self.vtable).ScopeExists(@ptrCast(*const IAzApplication3, self), bstrScopeName, pbExist);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication3_OpenScope2(self: *const T, bstrScopeName: BSTR, ppScope2: **IAzScope2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication3.VTable, self.vtable).OpenScope2(@ptrCast(*const IAzApplication3, self), bstrScopeName, ppScope2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication3_CreateScope2(self: *const T, bstrScopeName: BSTR, ppScope2: **IAzScope2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication3.VTable, self.vtable).CreateScope2(@ptrCast(*const IAzApplication3, self), bstrScopeName, ppScope2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication3_DeleteScope2(self: *const T, bstrScopeName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication3.VTable, self.vtable).DeleteScope2(@ptrCast(*const IAzApplication3, self), bstrScopeName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication3_get_RoleDefinitions(self: *const T, ppRoleDefinitions: **IAzRoleDefinitions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication3.VTable, self.vtable).get_RoleDefinitions(@ptrCast(*const IAzApplication3, self), ppRoleDefinitions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication3_CreateRoleDefinition(self: *const T, bstrRoleDefinitionName: BSTR, ppRoleDefinitions: **IAzRoleDefinition) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication3.VTable, self.vtable).CreateRoleDefinition(@ptrCast(*const IAzApplication3, self), bstrRoleDefinitionName, ppRoleDefinitions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication3_OpenRoleDefinition(self: *const T, bstrRoleDefinitionName: BSTR, ppRoleDefinitions: **IAzRoleDefinition) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication3.VTable, self.vtable).OpenRoleDefinition(@ptrCast(*const IAzApplication3, self), bstrRoleDefinitionName, ppRoleDefinitions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication3_DeleteRoleDefinition(self: *const T, bstrRoleDefinitionName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication3.VTable, self.vtable).DeleteRoleDefinition(@ptrCast(*const IAzApplication3, self), bstrRoleDefinitionName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication3_get_RoleAssignments(self: *const T, ppRoleAssignments: **IAzRoleAssignments) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication3.VTable, self.vtable).get_RoleAssignments(@ptrCast(*const IAzApplication3, self), ppRoleAssignments);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication3_CreateRoleAssignment(self: *const T, bstrRoleAssignmentName: BSTR, ppRoleAssignment: **IAzRoleAssignment) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication3.VTable, self.vtable).CreateRoleAssignment(@ptrCast(*const IAzApplication3, self), bstrRoleAssignmentName, ppRoleAssignment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication3_OpenRoleAssignment(self: *const T, bstrRoleAssignmentName: BSTR, ppRoleAssignment: **IAzRoleAssignment) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication3.VTable, self.vtable).OpenRoleAssignment(@ptrCast(*const IAzApplication3, self), bstrRoleAssignmentName, ppRoleAssignment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication3_DeleteRoleAssignment(self: *const T, bstrRoleAssignmentName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication3.VTable, self.vtable).DeleteRoleAssignment(@ptrCast(*const IAzApplication3, self), bstrRoleAssignmentName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication3_get_BizRulesEnabled(self: *const T, pbEnabled: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication3.VTable, self.vtable).get_BizRulesEnabled(@ptrCast(*const IAzApplication3, self), pbEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplication3_put_BizRulesEnabled(self: *const T, bEnabled: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplication3.VTable, self.vtable).put_BizRulesEnabled(@ptrCast(*const IAzApplication3, self), bEnabled);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzOperation2_Value = @import("../zig.zig").Guid.initString("1F5EA01F-44A2-4184-9C48-A75B4DCC8CCC");
pub const IID_IAzOperation2 = &IID_IAzOperation2_Value;
pub const IAzOperation2 = extern struct {
    pub const VTable = extern struct {
        base: IAzOperation.VTable,
        RoleAssignments: fn(
            self: *const IAzOperation2,
            bstrScopeName: BSTR,
            bRecursive: i16,
            ppRoleAssignments: **IAzRoleAssignments,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IAzOperation.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzOperation2_RoleAssignments(self: *const T, bstrScopeName: BSTR, bRecursive: i16, ppRoleAssignments: **IAzRoleAssignments) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzOperation2.VTable, self.vtable).RoleAssignments(@ptrCast(*const IAzOperation2, self), bstrScopeName, bRecursive, ppRoleAssignments);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzRoleDefinitions_Value = @import("../zig.zig").Guid.initString("881F25A5-D755-4550-957A-D503A3B34001");
pub const IID_IAzRoleDefinitions = &IID_IAzRoleDefinitions_Value;
pub const IAzRoleDefinitions = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Item: fn(
            self: *const IAzRoleDefinitions,
            Index: i32,
            pvarObtPtr: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IAzRoleDefinitions,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IAzRoleDefinitions,
            ppEnumPtr: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRoleDefinitions_get_Item(self: *const T, Index: i32, pvarObtPtr: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRoleDefinitions.VTable, self.vtable).get_Item(@ptrCast(*const IAzRoleDefinitions, self), Index, pvarObtPtr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRoleDefinitions_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRoleDefinitions.VTable, self.vtable).get_Count(@ptrCast(*const IAzRoleDefinitions, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRoleDefinitions_get__NewEnum(self: *const T, ppEnumPtr: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRoleDefinitions.VTable, self.vtable).get__NewEnum(@ptrCast(*const IAzRoleDefinitions, self), ppEnumPtr);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzRoleDefinition_Value = @import("../zig.zig").Guid.initString("D97FCEA1-2599-44F1-9FC3-58E9FBE09466");
pub const IID_IAzRoleDefinition = &IID_IAzRoleDefinition_Value;
pub const IAzRoleDefinition = extern struct {
    pub const VTable = extern struct {
        base: IAzTask.VTable,
        RoleAssignments: fn(
            self: *const IAzRoleDefinition,
            bstrScopeName: BSTR,
            bRecursive: i16,
            ppRoleAssignments: **IAzRoleAssignments,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRoleDefinition: fn(
            self: *const IAzRoleDefinition,
            bstrRoleDefinition: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRoleDefinition: fn(
            self: *const IAzRoleDefinition,
            bstrRoleDefinition: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RoleDefinitions: fn(
            self: *const IAzRoleDefinition,
            ppRoleDefinitions: **IAzRoleDefinitions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IAzTask.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRoleDefinition_RoleAssignments(self: *const T, bstrScopeName: BSTR, bRecursive: i16, ppRoleAssignments: **IAzRoleAssignments) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRoleDefinition.VTable, self.vtable).RoleAssignments(@ptrCast(*const IAzRoleDefinition, self), bstrScopeName, bRecursive, ppRoleAssignments);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRoleDefinition_AddRoleDefinition(self: *const T, bstrRoleDefinition: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRoleDefinition.VTable, self.vtable).AddRoleDefinition(@ptrCast(*const IAzRoleDefinition, self), bstrRoleDefinition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRoleDefinition_DeleteRoleDefinition(self: *const T, bstrRoleDefinition: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRoleDefinition.VTable, self.vtable).DeleteRoleDefinition(@ptrCast(*const IAzRoleDefinition, self), bstrRoleDefinition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRoleDefinition_get_RoleDefinitions(self: *const T, ppRoleDefinitions: **IAzRoleDefinitions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRoleDefinition.VTable, self.vtable).get_RoleDefinitions(@ptrCast(*const IAzRoleDefinition, self), ppRoleDefinitions);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzRoleAssignment_Value = @import("../zig.zig").Guid.initString("55647D31-0D5A-4FA3-B4AC-2B5F9AD5AB76");
pub const IID_IAzRoleAssignment = &IID_IAzRoleAssignment_Value;
pub const IAzRoleAssignment = extern struct {
    pub const VTable = extern struct {
        base: IAzRole.VTable,
        AddRoleDefinition: fn(
            self: *const IAzRoleAssignment,
            bstrRoleDefinition: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRoleDefinition: fn(
            self: *const IAzRoleAssignment,
            bstrRoleDefinition: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RoleDefinitions: fn(
            self: *const IAzRoleAssignment,
            ppRoleDefinitions: **IAzRoleDefinitions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Scope: fn(
            self: *const IAzRoleAssignment,
            ppScope: **IAzScope,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IAzRole.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRoleAssignment_AddRoleDefinition(self: *const T, bstrRoleDefinition: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRoleAssignment.VTable, self.vtable).AddRoleDefinition(@ptrCast(*const IAzRoleAssignment, self), bstrRoleDefinition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRoleAssignment_DeleteRoleDefinition(self: *const T, bstrRoleDefinition: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRoleAssignment.VTable, self.vtable).DeleteRoleDefinition(@ptrCast(*const IAzRoleAssignment, self), bstrRoleDefinition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRoleAssignment_get_RoleDefinitions(self: *const T, ppRoleDefinitions: **IAzRoleDefinitions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRoleAssignment.VTable, self.vtable).get_RoleDefinitions(@ptrCast(*const IAzRoleAssignment, self), ppRoleDefinitions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRoleAssignment_get_Scope(self: *const T, ppScope: **IAzScope) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRoleAssignment.VTable, self.vtable).get_Scope(@ptrCast(*const IAzRoleAssignment, self), ppScope);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzRoleAssignments_Value = @import("../zig.zig").Guid.initString("9C80B900-FCEB-4D73-A0F4-C83B0BBF2481");
pub const IID_IAzRoleAssignments = &IID_IAzRoleAssignments_Value;
pub const IAzRoleAssignments = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Item: fn(
            self: *const IAzRoleAssignments,
            Index: i32,
            pvarObtPtr: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IAzRoleAssignments,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IAzRoleAssignments,
            ppEnumPtr: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRoleAssignments_get_Item(self: *const T, Index: i32, pvarObtPtr: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRoleAssignments.VTable, self.vtable).get_Item(@ptrCast(*const IAzRoleAssignments, self), Index, pvarObtPtr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRoleAssignments_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRoleAssignments.VTable, self.vtable).get_Count(@ptrCast(*const IAzRoleAssignments, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzRoleAssignments_get__NewEnum(self: *const T, ppEnumPtr: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzRoleAssignments.VTable, self.vtable).get__NewEnum(@ptrCast(*const IAzRoleAssignments, self), ppEnumPtr);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzPrincipalLocator_Value = @import("../zig.zig").Guid.initString("E5C3507D-AD6A-4992-9C7F-74AB480B44CC");
pub const IID_IAzPrincipalLocator = &IID_IAzPrincipalLocator_Value;
pub const IAzPrincipalLocator = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_NameResolver: fn(
            self: *const IAzPrincipalLocator,
            ppNameResolver: **IAzNameResolver,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ObjectPicker: fn(
            self: *const IAzPrincipalLocator,
            ppObjectPicker: **IAzObjectPicker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzPrincipalLocator_get_NameResolver(self: *const T, ppNameResolver: **IAzNameResolver) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzPrincipalLocator.VTable, self.vtable).get_NameResolver(@ptrCast(*const IAzPrincipalLocator, self), ppNameResolver);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzPrincipalLocator_get_ObjectPicker(self: *const T, ppObjectPicker: **IAzObjectPicker) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzPrincipalLocator.VTable, self.vtable).get_ObjectPicker(@ptrCast(*const IAzPrincipalLocator, self), ppObjectPicker);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzNameResolver_Value = @import("../zig.zig").Guid.initString("504D0F15-73E2-43DF-A870-A64F40714F53");
pub const IID_IAzNameResolver = &IID_IAzNameResolver_Value;
pub const IAzNameResolver = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        NameFromSid: fn(
            self: *const IAzNameResolver,
            bstrSid: BSTR,
            pSidType: *i32,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NamesFromSids: fn(
            self: *const IAzNameResolver,
            vSids: VARIANT,
            pvSidTypes: *VARIANT,
            pvNames: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzNameResolver_NameFromSid(self: *const T, bstrSid: BSTR, pSidType: *i32, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzNameResolver.VTable, self.vtable).NameFromSid(@ptrCast(*const IAzNameResolver, self), bstrSid, pSidType, pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzNameResolver_NamesFromSids(self: *const T, vSids: VARIANT, pvSidTypes: *VARIANT, pvNames: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzNameResolver.VTable, self.vtable).NamesFromSids(@ptrCast(*const IAzNameResolver, self), vSids, pvSidTypes, pvNames);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzObjectPicker_Value = @import("../zig.zig").Guid.initString("63130A48-699A-42D8-BF01-C62AC3FB79F9");
pub const IID_IAzObjectPicker = &IID_IAzObjectPicker_Value;
pub const IAzObjectPicker = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetPrincipals: fn(
            self: *const IAzObjectPicker,
            hParentWnd: HWND,
            bstrTitle: BSTR,
            pvSidTypes: *VARIANT,
            pvNames: *VARIANT,
            pvSids: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const IAzObjectPicker,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzObjectPicker_GetPrincipals(self: *const T, hParentWnd: HWND, bstrTitle: BSTR, pvSidTypes: *VARIANT, pvNames: *VARIANT, pvSids: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzObjectPicker.VTable, self.vtable).GetPrincipals(@ptrCast(*const IAzObjectPicker, self), hParentWnd, bstrTitle, pvSidTypes, pvNames, pvSids);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzObjectPicker_get_Name(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzObjectPicker.VTable, self.vtable).get_Name(@ptrCast(*const IAzObjectPicker, self), pbstrName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzApplicationGroup2_Value = @import("../zig.zig").Guid.initString("3F0613FC-B71A-464E-A11D-5B881A56CEFA");
pub const IID_IAzApplicationGroup2 = &IID_IAzApplicationGroup2_Value;
pub const IAzApplicationGroup2 = extern struct {
    pub const VTable = extern struct {
        base: IAzApplicationGroup.VTable,
        get_BizRule: fn(
            self: *const IAzApplicationGroup2,
            pbstrProp: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_BizRule: fn(
            self: *const IAzApplicationGroup2,
            bstrProp: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BizRuleLanguage: fn(
            self: *const IAzApplicationGroup2,
            pbstrProp: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_BizRuleLanguage: fn(
            self: *const IAzApplicationGroup2,
            bstrProp: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BizRuleImportedPath: fn(
            self: *const IAzApplicationGroup2,
            pbstrProp: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_BizRuleImportedPath: fn(
            self: *const IAzApplicationGroup2,
            bstrProp: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RoleAssignments: fn(
            self: *const IAzApplicationGroup2,
            bstrScopeName: BSTR,
            bRecursive: i16,
            ppRoleAssignments: **IAzRoleAssignments,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IAzApplicationGroup.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup2_get_BizRule(self: *const T, pbstrProp: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup2.VTable, self.vtable).get_BizRule(@ptrCast(*const IAzApplicationGroup2, self), pbstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup2_put_BizRule(self: *const T, bstrProp: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup2.VTable, self.vtable).put_BizRule(@ptrCast(*const IAzApplicationGroup2, self), bstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup2_get_BizRuleLanguage(self: *const T, pbstrProp: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup2.VTable, self.vtable).get_BizRuleLanguage(@ptrCast(*const IAzApplicationGroup2, self), pbstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup2_put_BizRuleLanguage(self: *const T, bstrProp: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup2.VTable, self.vtable).put_BizRuleLanguage(@ptrCast(*const IAzApplicationGroup2, self), bstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup2_get_BizRuleImportedPath(self: *const T, pbstrProp: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup2.VTable, self.vtable).get_BizRuleImportedPath(@ptrCast(*const IAzApplicationGroup2, self), pbstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup2_put_BizRuleImportedPath(self: *const T, bstrProp: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup2.VTable, self.vtable).put_BizRuleImportedPath(@ptrCast(*const IAzApplicationGroup2, self), bstrProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzApplicationGroup2_RoleAssignments(self: *const T, bstrScopeName: BSTR, bRecursive: i16, ppRoleAssignments: **IAzRoleAssignments) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzApplicationGroup2.VTable, self.vtable).RoleAssignments(@ptrCast(*const IAzApplicationGroup2, self), bstrScopeName, bRecursive, ppRoleAssignments);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAzTask2_Value = @import("../zig.zig").Guid.initString("03A9A5EE-48C8-4832-9025-AAD503C46526");
pub const IID_IAzTask2 = &IID_IAzTask2_Value;
pub const IAzTask2 = extern struct {
    pub const VTable = extern struct {
        base: IAzTask.VTable,
        RoleAssignments: fn(
            self: *const IAzTask2,
            bstrScopeName: BSTR,
            bRecursive: i16,
            ppRoleAssignments: **IAzRoleAssignments,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IAzTask.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAzTask2_RoleAssignments(self: *const T, bstrScopeName: BSTR, bRecursive: i16, ppRoleAssignments: **IAzRoleAssignments) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAzTask2.VTable, self.vtable).RoleAssignments(@ptrCast(*const IAzTask2, self), bstrScopeName, bRecursive, ppRoleAssignments);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const AZ_PROP_CONSTANTS = extern enum(i32) {
    AZ_PROP_NAME = 1,
    AZ_PROP_DESCRIPTION = 2,
    AZ_PROP_WRITABLE = 3,
    AZ_PROP_APPLICATION_DATA = 4,
    AZ_PROP_CHILD_CREATE = 5,
    AZ_MAX_APPLICATION_NAME_LENGTH = 512,
    AZ_MAX_OPERATION_NAME_LENGTH = 64,
    AZ_MAX_TASK_NAME_LENGTH = 64,
    AZ_MAX_SCOPE_NAME_LENGTH = 65536,
    AZ_MAX_GROUP_NAME_LENGTH = 64,
    AZ_MAX_ROLE_NAME_LENGTH = 64,
    AZ_MAX_NAME_LENGTH = 65536,
    AZ_MAX_DESCRIPTION_LENGTH = 1024,
    AZ_MAX_APPLICATION_DATA_LENGTH = 4096,
    AZ_SUBMIT_FLAG_ABORT = 1,
    AZ_SUBMIT_FLAG_FLUSH = 2,
    AZ_MAX_POLICY_URL_LENGTH = 65536,
    AZ_AZSTORE_FLAG_CREATE = 1,
    AZ_AZSTORE_FLAG_MANAGE_STORE_ONLY = 2,
    AZ_AZSTORE_FLAG_BATCH_UPDATE = 4,
    AZ_AZSTORE_FLAG_AUDIT_IS_CRITICAL = 8,
    AZ_AZSTORE_FORCE_APPLICATION_CLOSE = 16,
    AZ_AZSTORE_NT6_FUNCTION_LEVEL = 32,
    AZ_AZSTORE_FLAG_MANAGE_ONLY_PASSIVE_SUBMIT = 32768,
    AZ_PROP_AZSTORE_DOMAIN_TIMEOUT = 100,
    AZ_AZSTORE_DEFAULT_DOMAIN_TIMEOUT = 15000,
    AZ_PROP_AZSTORE_SCRIPT_ENGINE_TIMEOUT = 101,
    AZ_AZSTORE_MIN_DOMAIN_TIMEOUT = 500,
    AZ_AZSTORE_MIN_SCRIPT_ENGINE_TIMEOUT = 5000,
    AZ_AZSTORE_DEFAULT_SCRIPT_ENGINE_TIMEOUT = 45000,
    AZ_PROP_AZSTORE_MAX_SCRIPT_ENGINES = 102,
    AZ_AZSTORE_DEFAULT_MAX_SCRIPT_ENGINES = 120,
    AZ_PROP_AZSTORE_MAJOR_VERSION = 103,
    AZ_PROP_AZSTORE_MINOR_VERSION = 104,
    AZ_PROP_AZSTORE_TARGET_MACHINE = 105,
    AZ_PROP_AZTORE_IS_ADAM_INSTANCE = 106,
    AZ_PROP_OPERATION_ID = 200,
    AZ_PROP_TASK_OPERATIONS = 300,
    AZ_PROP_TASK_BIZRULE = 301,
    AZ_PROP_TASK_BIZRULE_LANGUAGE = 302,
    AZ_PROP_TASK_TASKS = 303,
    AZ_PROP_TASK_BIZRULE_IMPORTED_PATH = 304,
    AZ_PROP_TASK_IS_ROLE_DEFINITION = 305,
    AZ_MAX_TASK_BIZRULE_LENGTH = 65536,
    AZ_MAX_TASK_BIZRULE_LANGUAGE_LENGTH = 64,
    AZ_MAX_TASK_BIZRULE_IMPORTED_PATH_LENGTH = 512,
    AZ_MAX_BIZRULE_STRING = 65536,
    AZ_PROP_GROUP_TYPE = 400,
    AZ_GROUPTYPE_LDAP_QUERY = 1,
    AZ_GROUPTYPE_BASIC = 2,
    AZ_GROUPTYPE_BIZRULE = 3,
    AZ_PROP_GROUP_APP_MEMBERS = 401,
    AZ_PROP_GROUP_APP_NON_MEMBERS = 402,
    AZ_PROP_GROUP_LDAP_QUERY = 403,
    AZ_MAX_GROUP_LDAP_QUERY_LENGTH = 4096,
    AZ_PROP_GROUP_MEMBERS = 404,
    AZ_PROP_GROUP_NON_MEMBERS = 405,
    AZ_PROP_GROUP_MEMBERS_NAME = 406,
    AZ_PROP_GROUP_NON_MEMBERS_NAME = 407,
    AZ_PROP_GROUP_BIZRULE = 408,
    AZ_PROP_GROUP_BIZRULE_LANGUAGE = 409,
    AZ_PROP_GROUP_BIZRULE_IMPORTED_PATH = 410,
    AZ_MAX_GROUP_BIZRULE_LENGTH = 65536,
    AZ_MAX_GROUP_BIZRULE_LANGUAGE_LENGTH = 64,
    AZ_MAX_GROUP_BIZRULE_IMPORTED_PATH_LENGTH = 512,
    AZ_PROP_ROLE_APP_MEMBERS = 500,
    AZ_PROP_ROLE_MEMBERS = 501,
    AZ_PROP_ROLE_OPERATIONS = 502,
    AZ_PROP_ROLE_TASKS = 504,
    AZ_PROP_ROLE_MEMBERS_NAME = 505,
    AZ_PROP_SCOPE_BIZRULES_WRITABLE = 600,
    AZ_PROP_SCOPE_CAN_BE_DELEGATED = 601,
    AZ_PROP_CLIENT_CONTEXT_USER_DN = 700,
    AZ_PROP_CLIENT_CONTEXT_USER_SAM_COMPAT = 701,
    AZ_PROP_CLIENT_CONTEXT_USER_DISPLAY = 702,
    AZ_PROP_CLIENT_CONTEXT_USER_GUID = 703,
    AZ_PROP_CLIENT_CONTEXT_USER_CANONICAL = 704,
    AZ_PROP_CLIENT_CONTEXT_USER_UPN = 705,
    AZ_PROP_CLIENT_CONTEXT_USER_DNS_SAM_COMPAT = 707,
    AZ_PROP_CLIENT_CONTEXT_ROLE_FOR_ACCESS_CHECK = 708,
    AZ_PROP_CLIENT_CONTEXT_LDAP_QUERY_DN = 709,
    AZ_PROP_APPLICATION_AUTHZ_INTERFACE_CLSID = 800,
    AZ_PROP_APPLICATION_VERSION = 801,
    AZ_MAX_APPLICATION_VERSION_LENGTH = 512,
    AZ_PROP_APPLICATION_NAME = 802,
    AZ_PROP_APPLICATION_BIZRULE_ENABLED = 803,
    AZ_PROP_APPLY_STORE_SACL = 900,
    AZ_PROP_GENERATE_AUDITS = 901,
    AZ_PROP_POLICY_ADMINS = 902,
    AZ_PROP_POLICY_READERS = 903,
    AZ_PROP_DELEGATED_POLICY_USERS = 904,
    AZ_PROP_POLICY_ADMINS_NAME = 905,
    AZ_PROP_POLICY_READERS_NAME = 906,
    AZ_PROP_DELEGATED_POLICY_USERS_NAME = 907,
    AZ_CLIENT_CONTEXT_SKIP_GROUP = 1,
    AZ_CLIENT_CONTEXT_SKIP_LDAP_QUERY = 1,
    AZ_CLIENT_CONTEXT_GET_GROUP_RECURSIVE = 2,
    AZ_CLIENT_CONTEXT_GET_GROUPS_STORE_LEVEL_ONLY = 2,
};
pub const AZ_PROP_NAME = AZ_PROP_CONSTANTS.AZ_PROP_NAME;
pub const AZ_PROP_DESCRIPTION = AZ_PROP_CONSTANTS.AZ_PROP_DESCRIPTION;
pub const AZ_PROP_WRITABLE = AZ_PROP_CONSTANTS.AZ_PROP_WRITABLE;
pub const AZ_PROP_APPLICATION_DATA = AZ_PROP_CONSTANTS.AZ_PROP_APPLICATION_DATA;
pub const AZ_PROP_CHILD_CREATE = AZ_PROP_CONSTANTS.AZ_PROP_CHILD_CREATE;
pub const AZ_MAX_APPLICATION_NAME_LENGTH = AZ_PROP_CONSTANTS.AZ_MAX_APPLICATION_NAME_LENGTH;
pub const AZ_MAX_OPERATION_NAME_LENGTH = AZ_PROP_CONSTANTS.AZ_MAX_OPERATION_NAME_LENGTH;
pub const AZ_MAX_TASK_NAME_LENGTH = AZ_PROP_CONSTANTS.AZ_MAX_TASK_NAME_LENGTH;
pub const AZ_MAX_SCOPE_NAME_LENGTH = AZ_PROP_CONSTANTS.AZ_MAX_SCOPE_NAME_LENGTH;
pub const AZ_MAX_GROUP_NAME_LENGTH = AZ_PROP_CONSTANTS.AZ_MAX_GROUP_NAME_LENGTH;
pub const AZ_MAX_ROLE_NAME_LENGTH = AZ_PROP_CONSTANTS.AZ_MAX_ROLE_NAME_LENGTH;
pub const AZ_MAX_NAME_LENGTH = AZ_PROP_CONSTANTS.AZ_MAX_NAME_LENGTH;
pub const AZ_MAX_DESCRIPTION_LENGTH = AZ_PROP_CONSTANTS.AZ_MAX_DESCRIPTION_LENGTH;
pub const AZ_MAX_APPLICATION_DATA_LENGTH = AZ_PROP_CONSTANTS.AZ_MAX_APPLICATION_DATA_LENGTH;
pub const AZ_SUBMIT_FLAG_ABORT = AZ_PROP_CONSTANTS.AZ_SUBMIT_FLAG_ABORT;
pub const AZ_SUBMIT_FLAG_FLUSH = AZ_PROP_CONSTANTS.AZ_SUBMIT_FLAG_FLUSH;
pub const AZ_MAX_POLICY_URL_LENGTH = AZ_PROP_CONSTANTS.AZ_MAX_POLICY_URL_LENGTH;
pub const AZ_AZSTORE_FLAG_CREATE = AZ_PROP_CONSTANTS.AZ_AZSTORE_FLAG_CREATE;
pub const AZ_AZSTORE_FLAG_MANAGE_STORE_ONLY = AZ_PROP_CONSTANTS.AZ_AZSTORE_FLAG_MANAGE_STORE_ONLY;
pub const AZ_AZSTORE_FLAG_BATCH_UPDATE = AZ_PROP_CONSTANTS.AZ_AZSTORE_FLAG_BATCH_UPDATE;
pub const AZ_AZSTORE_FLAG_AUDIT_IS_CRITICAL = AZ_PROP_CONSTANTS.AZ_AZSTORE_FLAG_AUDIT_IS_CRITICAL;
pub const AZ_AZSTORE_FORCE_APPLICATION_CLOSE = AZ_PROP_CONSTANTS.AZ_AZSTORE_FORCE_APPLICATION_CLOSE;
pub const AZ_AZSTORE_NT6_FUNCTION_LEVEL = AZ_PROP_CONSTANTS.AZ_AZSTORE_NT6_FUNCTION_LEVEL;
pub const AZ_AZSTORE_FLAG_MANAGE_ONLY_PASSIVE_SUBMIT = AZ_PROP_CONSTANTS.AZ_AZSTORE_FLAG_MANAGE_ONLY_PASSIVE_SUBMIT;
pub const AZ_PROP_AZSTORE_DOMAIN_TIMEOUT = AZ_PROP_CONSTANTS.AZ_PROP_AZSTORE_DOMAIN_TIMEOUT;
pub const AZ_AZSTORE_DEFAULT_DOMAIN_TIMEOUT = AZ_PROP_CONSTANTS.AZ_AZSTORE_DEFAULT_DOMAIN_TIMEOUT;
pub const AZ_PROP_AZSTORE_SCRIPT_ENGINE_TIMEOUT = AZ_PROP_CONSTANTS.AZ_PROP_AZSTORE_SCRIPT_ENGINE_TIMEOUT;
pub const AZ_AZSTORE_MIN_DOMAIN_TIMEOUT = AZ_PROP_CONSTANTS.AZ_AZSTORE_MIN_DOMAIN_TIMEOUT;
pub const AZ_AZSTORE_MIN_SCRIPT_ENGINE_TIMEOUT = AZ_PROP_CONSTANTS.AZ_AZSTORE_MIN_SCRIPT_ENGINE_TIMEOUT;
pub const AZ_AZSTORE_DEFAULT_SCRIPT_ENGINE_TIMEOUT = AZ_PROP_CONSTANTS.AZ_AZSTORE_DEFAULT_SCRIPT_ENGINE_TIMEOUT;
pub const AZ_PROP_AZSTORE_MAX_SCRIPT_ENGINES = AZ_PROP_CONSTANTS.AZ_PROP_AZSTORE_MAX_SCRIPT_ENGINES;
pub const AZ_AZSTORE_DEFAULT_MAX_SCRIPT_ENGINES = AZ_PROP_CONSTANTS.AZ_AZSTORE_DEFAULT_MAX_SCRIPT_ENGINES;
pub const AZ_PROP_AZSTORE_MAJOR_VERSION = AZ_PROP_CONSTANTS.AZ_PROP_AZSTORE_MAJOR_VERSION;
pub const AZ_PROP_AZSTORE_MINOR_VERSION = AZ_PROP_CONSTANTS.AZ_PROP_AZSTORE_MINOR_VERSION;
pub const AZ_PROP_AZSTORE_TARGET_MACHINE = AZ_PROP_CONSTANTS.AZ_PROP_AZSTORE_TARGET_MACHINE;
pub const AZ_PROP_AZTORE_IS_ADAM_INSTANCE = AZ_PROP_CONSTANTS.AZ_PROP_AZTORE_IS_ADAM_INSTANCE;
pub const AZ_PROP_OPERATION_ID = AZ_PROP_CONSTANTS.AZ_PROP_OPERATION_ID;
pub const AZ_PROP_TASK_OPERATIONS = AZ_PROP_CONSTANTS.AZ_PROP_TASK_OPERATIONS;
pub const AZ_PROP_TASK_BIZRULE = AZ_PROP_CONSTANTS.AZ_PROP_TASK_BIZRULE;
pub const AZ_PROP_TASK_BIZRULE_LANGUAGE = AZ_PROP_CONSTANTS.AZ_PROP_TASK_BIZRULE_LANGUAGE;
pub const AZ_PROP_TASK_TASKS = AZ_PROP_CONSTANTS.AZ_PROP_TASK_TASKS;
pub const AZ_PROP_TASK_BIZRULE_IMPORTED_PATH = AZ_PROP_CONSTANTS.AZ_PROP_TASK_BIZRULE_IMPORTED_PATH;
pub const AZ_PROP_TASK_IS_ROLE_DEFINITION = AZ_PROP_CONSTANTS.AZ_PROP_TASK_IS_ROLE_DEFINITION;
pub const AZ_MAX_TASK_BIZRULE_LENGTH = AZ_PROP_CONSTANTS.AZ_MAX_TASK_BIZRULE_LENGTH;
pub const AZ_MAX_TASK_BIZRULE_LANGUAGE_LENGTH = AZ_PROP_CONSTANTS.AZ_MAX_TASK_BIZRULE_LANGUAGE_LENGTH;
pub const AZ_MAX_TASK_BIZRULE_IMPORTED_PATH_LENGTH = AZ_PROP_CONSTANTS.AZ_MAX_TASK_BIZRULE_IMPORTED_PATH_LENGTH;
pub const AZ_MAX_BIZRULE_STRING = AZ_PROP_CONSTANTS.AZ_MAX_BIZRULE_STRING;
pub const AZ_PROP_GROUP_TYPE = AZ_PROP_CONSTANTS.AZ_PROP_GROUP_TYPE;
pub const AZ_GROUPTYPE_LDAP_QUERY = AZ_PROP_CONSTANTS.AZ_GROUPTYPE_LDAP_QUERY;
pub const AZ_GROUPTYPE_BASIC = AZ_PROP_CONSTANTS.AZ_GROUPTYPE_BASIC;
pub const AZ_GROUPTYPE_BIZRULE = AZ_PROP_CONSTANTS.AZ_GROUPTYPE_BIZRULE;
pub const AZ_PROP_GROUP_APP_MEMBERS = AZ_PROP_CONSTANTS.AZ_PROP_GROUP_APP_MEMBERS;
pub const AZ_PROP_GROUP_APP_NON_MEMBERS = AZ_PROP_CONSTANTS.AZ_PROP_GROUP_APP_NON_MEMBERS;
pub const AZ_PROP_GROUP_LDAP_QUERY = AZ_PROP_CONSTANTS.AZ_PROP_GROUP_LDAP_QUERY;
pub const AZ_MAX_GROUP_LDAP_QUERY_LENGTH = AZ_PROP_CONSTANTS.AZ_MAX_GROUP_LDAP_QUERY_LENGTH;
pub const AZ_PROP_GROUP_MEMBERS = AZ_PROP_CONSTANTS.AZ_PROP_GROUP_MEMBERS;
pub const AZ_PROP_GROUP_NON_MEMBERS = AZ_PROP_CONSTANTS.AZ_PROP_GROUP_NON_MEMBERS;
pub const AZ_PROP_GROUP_MEMBERS_NAME = AZ_PROP_CONSTANTS.AZ_PROP_GROUP_MEMBERS_NAME;
pub const AZ_PROP_GROUP_NON_MEMBERS_NAME = AZ_PROP_CONSTANTS.AZ_PROP_GROUP_NON_MEMBERS_NAME;
pub const AZ_PROP_GROUP_BIZRULE = AZ_PROP_CONSTANTS.AZ_PROP_GROUP_BIZRULE;
pub const AZ_PROP_GROUP_BIZRULE_LANGUAGE = AZ_PROP_CONSTANTS.AZ_PROP_GROUP_BIZRULE_LANGUAGE;
pub const AZ_PROP_GROUP_BIZRULE_IMPORTED_PATH = AZ_PROP_CONSTANTS.AZ_PROP_GROUP_BIZRULE_IMPORTED_PATH;
pub const AZ_MAX_GROUP_BIZRULE_LENGTH = AZ_PROP_CONSTANTS.AZ_MAX_GROUP_BIZRULE_LENGTH;
pub const AZ_MAX_GROUP_BIZRULE_LANGUAGE_LENGTH = AZ_PROP_CONSTANTS.AZ_MAX_GROUP_BIZRULE_LANGUAGE_LENGTH;
pub const AZ_MAX_GROUP_BIZRULE_IMPORTED_PATH_LENGTH = AZ_PROP_CONSTANTS.AZ_MAX_GROUP_BIZRULE_IMPORTED_PATH_LENGTH;
pub const AZ_PROP_ROLE_APP_MEMBERS = AZ_PROP_CONSTANTS.AZ_PROP_ROLE_APP_MEMBERS;
pub const AZ_PROP_ROLE_MEMBERS = AZ_PROP_CONSTANTS.AZ_PROP_ROLE_MEMBERS;
pub const AZ_PROP_ROLE_OPERATIONS = AZ_PROP_CONSTANTS.AZ_PROP_ROLE_OPERATIONS;
pub const AZ_PROP_ROLE_TASKS = AZ_PROP_CONSTANTS.AZ_PROP_ROLE_TASKS;
pub const AZ_PROP_ROLE_MEMBERS_NAME = AZ_PROP_CONSTANTS.AZ_PROP_ROLE_MEMBERS_NAME;
pub const AZ_PROP_SCOPE_BIZRULES_WRITABLE = AZ_PROP_CONSTANTS.AZ_PROP_SCOPE_BIZRULES_WRITABLE;
pub const AZ_PROP_SCOPE_CAN_BE_DELEGATED = AZ_PROP_CONSTANTS.AZ_PROP_SCOPE_CAN_BE_DELEGATED;
pub const AZ_PROP_CLIENT_CONTEXT_USER_DN = AZ_PROP_CONSTANTS.AZ_PROP_CLIENT_CONTEXT_USER_DN;
pub const AZ_PROP_CLIENT_CONTEXT_USER_SAM_COMPAT = AZ_PROP_CONSTANTS.AZ_PROP_CLIENT_CONTEXT_USER_SAM_COMPAT;
pub const AZ_PROP_CLIENT_CONTEXT_USER_DISPLAY = AZ_PROP_CONSTANTS.AZ_PROP_CLIENT_CONTEXT_USER_DISPLAY;
pub const AZ_PROP_CLIENT_CONTEXT_USER_GUID = AZ_PROP_CONSTANTS.AZ_PROP_CLIENT_CONTEXT_USER_GUID;
pub const AZ_PROP_CLIENT_CONTEXT_USER_CANONICAL = AZ_PROP_CONSTANTS.AZ_PROP_CLIENT_CONTEXT_USER_CANONICAL;
pub const AZ_PROP_CLIENT_CONTEXT_USER_UPN = AZ_PROP_CONSTANTS.AZ_PROP_CLIENT_CONTEXT_USER_UPN;
pub const AZ_PROP_CLIENT_CONTEXT_USER_DNS_SAM_COMPAT = AZ_PROP_CONSTANTS.AZ_PROP_CLIENT_CONTEXT_USER_DNS_SAM_COMPAT;
pub const AZ_PROP_CLIENT_CONTEXT_ROLE_FOR_ACCESS_CHECK = AZ_PROP_CONSTANTS.AZ_PROP_CLIENT_CONTEXT_ROLE_FOR_ACCESS_CHECK;
pub const AZ_PROP_CLIENT_CONTEXT_LDAP_QUERY_DN = AZ_PROP_CONSTANTS.AZ_PROP_CLIENT_CONTEXT_LDAP_QUERY_DN;
pub const AZ_PROP_APPLICATION_AUTHZ_INTERFACE_CLSID = AZ_PROP_CONSTANTS.AZ_PROP_APPLICATION_AUTHZ_INTERFACE_CLSID;
pub const AZ_PROP_APPLICATION_VERSION = AZ_PROP_CONSTANTS.AZ_PROP_APPLICATION_VERSION;
pub const AZ_MAX_APPLICATION_VERSION_LENGTH = AZ_PROP_CONSTANTS.AZ_MAX_APPLICATION_VERSION_LENGTH;
pub const AZ_PROP_APPLICATION_NAME = AZ_PROP_CONSTANTS.AZ_PROP_APPLICATION_NAME;
pub const AZ_PROP_APPLICATION_BIZRULE_ENABLED = AZ_PROP_CONSTANTS.AZ_PROP_APPLICATION_BIZRULE_ENABLED;
pub const AZ_PROP_APPLY_STORE_SACL = AZ_PROP_CONSTANTS.AZ_PROP_APPLY_STORE_SACL;
pub const AZ_PROP_GENERATE_AUDITS = AZ_PROP_CONSTANTS.AZ_PROP_GENERATE_AUDITS;
pub const AZ_PROP_POLICY_ADMINS = AZ_PROP_CONSTANTS.AZ_PROP_POLICY_ADMINS;
pub const AZ_PROP_POLICY_READERS = AZ_PROP_CONSTANTS.AZ_PROP_POLICY_READERS;
pub const AZ_PROP_DELEGATED_POLICY_USERS = AZ_PROP_CONSTANTS.AZ_PROP_DELEGATED_POLICY_USERS;
pub const AZ_PROP_POLICY_ADMINS_NAME = AZ_PROP_CONSTANTS.AZ_PROP_POLICY_ADMINS_NAME;
pub const AZ_PROP_POLICY_READERS_NAME = AZ_PROP_CONSTANTS.AZ_PROP_POLICY_READERS_NAME;
pub const AZ_PROP_DELEGATED_POLICY_USERS_NAME = AZ_PROP_CONSTANTS.AZ_PROP_DELEGATED_POLICY_USERS_NAME;
pub const AZ_CLIENT_CONTEXT_SKIP_GROUP = AZ_PROP_CONSTANTS.AZ_CLIENT_CONTEXT_SKIP_GROUP;
pub const AZ_CLIENT_CONTEXT_SKIP_LDAP_QUERY = AZ_PROP_CONSTANTS.AZ_CLIENT_CONTEXT_SKIP_LDAP_QUERY;
pub const AZ_CLIENT_CONTEXT_GET_GROUP_RECURSIVE = AZ_PROP_CONSTANTS.AZ_CLIENT_CONTEXT_GET_GROUP_RECURSIVE;
pub const AZ_CLIENT_CONTEXT_GET_GROUPS_STORE_LEVEL_ONLY = AZ_PROP_CONSTANTS.AZ_CLIENT_CONTEXT_GET_GROUPS_STORE_LEVEL_ONLY;

pub const SI_OBJECT_INFO = extern struct {
    dwFlags: u32,
    hInstance: HINSTANCE,
    pszServerName: PWSTR,
    pszObjectName: PWSTR,
    pszPageTitle: PWSTR,
    guidObjectType: Guid,
};

pub const SI_ACCESS = extern struct {
    pguid: *const Guid,
    mask: u32,
    pszName: [*:0]const u16,
    dwFlags: u32,
};

pub const SI_INHERIT_TYPE = extern struct {
    pguid: *const Guid,
    dwFlags: u32,
    pszName: [*:0]const u16,
};

pub const SI_PAGE_TYPE = extern enum(i32) {
    SI_PAGE_PERM = 0,
    SI_PAGE_ADVPERM = 1,
    SI_PAGE_AUDIT = 2,
    SI_PAGE_OWNER = 3,
    SI_PAGE_EFFECTIVE = 4,
    SI_PAGE_TAKEOWNERSHIP = 5,
    SI_PAGE_SHARE = 6,
};
pub const SI_PAGE_PERM = SI_PAGE_TYPE.SI_PAGE_PERM;
pub const SI_PAGE_ADVPERM = SI_PAGE_TYPE.SI_PAGE_ADVPERM;
pub const SI_PAGE_AUDIT = SI_PAGE_TYPE.SI_PAGE_AUDIT;
pub const SI_PAGE_OWNER = SI_PAGE_TYPE.SI_PAGE_OWNER;
pub const SI_PAGE_EFFECTIVE = SI_PAGE_TYPE.SI_PAGE_EFFECTIVE;
pub const SI_PAGE_TAKEOWNERSHIP = SI_PAGE_TYPE.SI_PAGE_TAKEOWNERSHIP;
pub const SI_PAGE_SHARE = SI_PAGE_TYPE.SI_PAGE_SHARE;

pub const SI_PAGE_ACTIVATED = extern enum(i32) {
    SI_SHOW_DEFAULT = 0,
    SI_SHOW_PERM_ACTIVATED = 1,
    SI_SHOW_AUDIT_ACTIVATED = 2,
    SI_SHOW_OWNER_ACTIVATED = 3,
    SI_SHOW_EFFECTIVE_ACTIVATED = 4,
    SI_SHOW_SHARE_ACTIVATED = 5,
    SI_SHOW_CENTRAL_POLICY_ACTIVATED = 6,
};
pub const SI_SHOW_DEFAULT = SI_PAGE_ACTIVATED.SI_SHOW_DEFAULT;
pub const SI_SHOW_PERM_ACTIVATED = SI_PAGE_ACTIVATED.SI_SHOW_PERM_ACTIVATED;
pub const SI_SHOW_AUDIT_ACTIVATED = SI_PAGE_ACTIVATED.SI_SHOW_AUDIT_ACTIVATED;
pub const SI_SHOW_OWNER_ACTIVATED = SI_PAGE_ACTIVATED.SI_SHOW_OWNER_ACTIVATED;
pub const SI_SHOW_EFFECTIVE_ACTIVATED = SI_PAGE_ACTIVATED.SI_SHOW_EFFECTIVE_ACTIVATED;
pub const SI_SHOW_SHARE_ACTIVATED = SI_PAGE_ACTIVATED.SI_SHOW_SHARE_ACTIVATED;
pub const SI_SHOW_CENTRAL_POLICY_ACTIVATED = SI_PAGE_ACTIVATED.SI_SHOW_CENTRAL_POLICY_ACTIVATED;

const IID_ISecurityInformation_Value = @import("../zig.zig").Guid.initString("965FC360-16FF-11D0-91CB-00AA00BBB723");
pub const IID_ISecurityInformation = &IID_ISecurityInformation_Value;
pub const ISecurityInformation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetObjectInformation: fn(
            self: *const ISecurityInformation,
            pObjectInfo: *SI_OBJECT_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecurity: fn(
            self: *const ISecurityInformation,
            RequestedInformation: u32,
            ppSecurityDescriptor: **c_void,
            fDefault: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecurity: fn(
            self: *const ISecurityInformation,
            SecurityInformation: u32,
            pSecurityDescriptor: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccessRights: fn(
            self: *const ISecurityInformation,
            pguidObjectType: *const Guid,
            dwFlags: u32,
            ppAccess: **SI_ACCESS,
            pcAccesses: *u32,
            piDefaultAccess: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MapGeneric: fn(
            self: *const ISecurityInformation,
            pguidObjectType: *const Guid,
            pAceFlags: *u8,
            pMask: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInheritTypes: fn(
            self: *const ISecurityInformation,
            ppInheritTypes: **SI_INHERIT_TYPE,
            pcInheritTypes: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PropertySheetPageCallback: fn(
            self: *const ISecurityInformation,
            hwnd: HWND,
            uMsg: u32,
            uPage: SI_PAGE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityInformation_GetObjectInformation(self: *const T, pObjectInfo: *SI_OBJECT_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityInformation.VTable, self.vtable).GetObjectInformation(@ptrCast(*const ISecurityInformation, self), pObjectInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityInformation_GetSecurity(self: *const T, RequestedInformation: u32, ppSecurityDescriptor: **c_void, fDefault: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityInformation.VTable, self.vtable).GetSecurity(@ptrCast(*const ISecurityInformation, self), RequestedInformation, ppSecurityDescriptor, fDefault);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityInformation_SetSecurity(self: *const T, SecurityInformation: u32, pSecurityDescriptor: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityInformation.VTable, self.vtable).SetSecurity(@ptrCast(*const ISecurityInformation, self), SecurityInformation, pSecurityDescriptor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityInformation_GetAccessRights(self: *const T, pguidObjectType: *const Guid, dwFlags: u32, ppAccess: **SI_ACCESS, pcAccesses: *u32, piDefaultAccess: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityInformation.VTable, self.vtable).GetAccessRights(@ptrCast(*const ISecurityInformation, self), pguidObjectType, dwFlags, ppAccess, pcAccesses, piDefaultAccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityInformation_MapGeneric(self: *const T, pguidObjectType: *const Guid, pAceFlags: *u8, pMask: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityInformation.VTable, self.vtable).MapGeneric(@ptrCast(*const ISecurityInformation, self), pguidObjectType, pAceFlags, pMask);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityInformation_GetInheritTypes(self: *const T, ppInheritTypes: **SI_INHERIT_TYPE, pcInheritTypes: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityInformation.VTable, self.vtable).GetInheritTypes(@ptrCast(*const ISecurityInformation, self), ppInheritTypes, pcInheritTypes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityInformation_PropertySheetPageCallback(self: *const T, hwnd: HWND, uMsg: u32, uPage: SI_PAGE_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityInformation.VTable, self.vtable).PropertySheetPageCallback(@ptrCast(*const ISecurityInformation, self), hwnd, uMsg, uPage);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISecurityInformation2_Value = @import("../zig.zig").Guid.initString("C3CCFDB4-6F88-11D2-A3CE-00C04FB1782A");
pub const IID_ISecurityInformation2 = &IID_ISecurityInformation2_Value;
pub const ISecurityInformation2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsDaclCanonical: fn(
            self: *const ISecurityInformation2,
            pDacl: *ACL,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        LookupSids: fn(
            self: *const ISecurityInformation2,
            cSids: u32,
            rgpSids: **c_void,
            ppdo: **IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityInformation2_IsDaclCanonical(self: *const T, pDacl: *ACL) callconv(.Inline) BOOL {
            return @ptrCast(*const ISecurityInformation2.VTable, self.vtable).IsDaclCanonical(@ptrCast(*const ISecurityInformation2, self), pDacl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityInformation2_LookupSids(self: *const T, cSids: u32, rgpSids: **c_void, ppdo: **IDataObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityInformation2.VTable, self.vtable).LookupSids(@ptrCast(*const ISecurityInformation2, self), cSids, rgpSids, ppdo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SID_INFO = extern struct {
    pSid: *c_void,
    pwzCommonName: PWSTR,
    pwzClass: PWSTR,
    pwzUPN: PWSTR,
};

pub const SID_INFO_LIST = extern struct {
    cItems: u32,
    aSidInfo: [1]SID_INFO,
};

const IID_IEffectivePermission_Value = @import("../zig.zig").Guid.initString("3853DC76-9F35-407C-88A1-D19344365FBC");
pub const IID_IEffectivePermission = &IID_IEffectivePermission_Value;
pub const IEffectivePermission = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetEffectivePermission: fn(
            self: *const IEffectivePermission,
            pguidObjectType: *const Guid,
            pUserSid: *c_void,
            pszServerName: [*:0]const u16,
            pSD: *c_void,
            ppObjectTypeList: **OBJECT_TYPE_LIST,
            pcObjectTypeListLength: *u32,
            ppGrantedAccessList: **u32,
            pcGrantedAccessListLength: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEffectivePermission_GetEffectivePermission(self: *const T, pguidObjectType: *const Guid, pUserSid: *c_void, pszServerName: [*:0]const u16, pSD: *c_void, ppObjectTypeList: **OBJECT_TYPE_LIST, pcObjectTypeListLength: *u32, ppGrantedAccessList: **u32, pcGrantedAccessListLength: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEffectivePermission.VTable, self.vtable).GetEffectivePermission(@ptrCast(*const IEffectivePermission, self), pguidObjectType, pUserSid, pszServerName, pSD, ppObjectTypeList, pcObjectTypeListLength, ppGrantedAccessList, pcGrantedAccessListLength);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISecurityObjectTypeInfo_Value = @import("../zig.zig").Guid.initString("FC3066EB-79EF-444B-9111-D18A75EBF2FA");
pub const IID_ISecurityObjectTypeInfo = &IID_ISecurityObjectTypeInfo_Value;
pub const ISecurityObjectTypeInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInheritSource: fn(
            self: *const ISecurityObjectTypeInfo,
            si: u32,
            pACL: *ACL,
            ppInheritArray: **INHERITED_FROMA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityObjectTypeInfo_GetInheritSource(self: *const T, si: u32, pACL: *ACL, ppInheritArray: **INHERITED_FROMA) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityObjectTypeInfo.VTable, self.vtable).GetInheritSource(@ptrCast(*const ISecurityObjectTypeInfo, self), si, pACL, ppInheritArray);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISecurityInformation3_Value = @import("../zig.zig").Guid.initString("E2CDC9CC-31BD-4F8F-8C8B-B641AF516A1A");
pub const IID_ISecurityInformation3 = &IID_ISecurityInformation3_Value;
pub const ISecurityInformation3 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFullResourceName: fn(
            self: *const ISecurityInformation3,
            ppszResourceName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenElevatedEditor: fn(
            self: *const ISecurityInformation3,
            hWnd: HWND,
            uPage: SI_PAGE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityInformation3_GetFullResourceName(self: *const T, ppszResourceName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityInformation3.VTable, self.vtable).GetFullResourceName(@ptrCast(*const ISecurityInformation3, self), ppszResourceName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityInformation3_OpenElevatedEditor(self: *const T, hWnd: HWND, uPage: SI_PAGE_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityInformation3.VTable, self.vtable).OpenElevatedEditor(@ptrCast(*const ISecurityInformation3, self), hWnd, uPage);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SECURITY_OBJECT = extern struct {
    pwszName: PWSTR,
    pData: *c_void,
    cbData: u32,
    pData2: *c_void,
    cbData2: u32,
    Id: u32,
    fWellKnown: u8,
};

pub const EFFPERM_RESULT_LIST = extern struct {
    fEvaluated: u8,
    cObjectTypeListLength: u32,
    pObjectTypeList: *OBJECT_TYPE_LIST,
    pGrantedAccessList: *u32,
};

const IID_ISecurityInformation4_Value = @import("../zig.zig").Guid.initString("EA961070-CD14-4621-ACE4-F63C03E583E4");
pub const IID_ISecurityInformation4 = &IID_ISecurityInformation4_Value;
pub const ISecurityInformation4 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSecondarySecurity: fn(
            self: *const ISecurityInformation4,
            pSecurityObjects: **SECURITY_OBJECT,
            pSecurityObjectCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityInformation4_GetSecondarySecurity(self: *const T, pSecurityObjects: **SECURITY_OBJECT, pSecurityObjectCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityInformation4.VTable, self.vtable).GetSecondarySecurity(@ptrCast(*const ISecurityInformation4, self), pSecurityObjects, pSecurityObjectCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEffectivePermission2_Value = @import("../zig.zig").Guid.initString("941FABCA-DD47-4FCA-90BB-B0E10255F20D");
pub const IID_IEffectivePermission2 = &IID_IEffectivePermission2_Value;
pub const IEffectivePermission2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ComputeEffectivePermissionWithSecondarySecurity: fn(
            self: *const IEffectivePermission2,
            pSid: *c_void,
            pDeviceSid: ?*c_void,
            pszServerName: [*:0]const u16,
            pSecurityObjects: [*]SECURITY_OBJECT,
            dwSecurityObjectCount: u32,
            pUserGroups: ?*TOKEN_GROUPS,
            pAuthzUserGroupsOperations: ?*AUTHZ_SID_OPERATION,
            pDeviceGroups: ?*TOKEN_GROUPS,
            pAuthzDeviceGroupsOperations: ?*AUTHZ_SID_OPERATION,
            pAuthzUserClaims: ?*AUTHZ_SECURITY_ATTRIBUTES_INFORMATION,
            pAuthzUserClaimsOperations: ?*AUTHZ_SECURITY_ATTRIBUTE_OPERATION,
            pAuthzDeviceClaims: ?*AUTHZ_SECURITY_ATTRIBUTES_INFORMATION,
            pAuthzDeviceClaimsOperations: ?*AUTHZ_SECURITY_ATTRIBUTE_OPERATION,
            pEffpermResultLists: [*]EFFPERM_RESULT_LIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEffectivePermission2_ComputeEffectivePermissionWithSecondarySecurity(self: *const T, pSid: *c_void, pDeviceSid: ?*c_void, pszServerName: [*:0]const u16, pSecurityObjects: [*]SECURITY_OBJECT, dwSecurityObjectCount: u32, pUserGroups: ?*TOKEN_GROUPS, pAuthzUserGroupsOperations: ?*AUTHZ_SID_OPERATION, pDeviceGroups: ?*TOKEN_GROUPS, pAuthzDeviceGroupsOperations: ?*AUTHZ_SID_OPERATION, pAuthzUserClaims: ?*AUTHZ_SECURITY_ATTRIBUTES_INFORMATION, pAuthzUserClaimsOperations: ?*AUTHZ_SECURITY_ATTRIBUTE_OPERATION, pAuthzDeviceClaims: ?*AUTHZ_SECURITY_ATTRIBUTES_INFORMATION, pAuthzDeviceClaimsOperations: ?*AUTHZ_SECURITY_ATTRIBUTE_OPERATION, pEffpermResultLists: [*]EFFPERM_RESULT_LIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEffectivePermission2.VTable, self.vtable).ComputeEffectivePermissionWithSecondarySecurity(@ptrCast(*const IEffectivePermission2, self), pSid, pDeviceSid, pszServerName, pSecurityObjects, dwSecurityObjectCount, pUserGroups, pAuthzUserGroupsOperations, pDeviceGroups, pAuthzDeviceGroupsOperations, pAuthzUserClaims, pAuthzUserClaimsOperations, pAuthzDeviceClaims, pAuthzDeviceClaimsOperations, pEffpermResultLists);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const FN_PROGRESS = fn(
    pObjectName: PWSTR,
    Status: u32,
    pInvokeSetting: *PROG_INVOKE_SETTING,
    Args: *c_void,
    SecuritySet: BOOL,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFNREADOBJECTSECURITY = fn(
    param0: [*:0]const u16,
    param1: u32,
    param2: **c_void,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFNWRITEOBJECTSECURITY = fn(
    param0: [*:0]const u16,
    param1: u32,
    param2: *c_void,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFNDSCREATEISECINFO = fn(
    param0: [*:0]const u16,
    param1: [*:0]const u16,
    param2: u32,
    param3: **ISecurityInformation,
    param4: PFNREADOBJECTSECURITY,
    param5: PFNWRITEOBJECTSECURITY,
    param6: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFNDSCREATEISECINFOEX = fn(
    param0: [*:0]const u16,
    param1: [*:0]const u16,
    param2: [*:0]const u16,
    param3: [*:0]const u16,
    param4: [*:0]const u16,
    param5: u32,
    param6: **ISecurityInformation,
    param7: PFNREADOBJECTSECURITY,
    param8: PFNWRITEOBJECTSECURITY,
    param9: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFNDSCREATESECPAGE = fn(
    param0: [*:0]const u16,
    param1: [*:0]const u16,
    param2: u32,
    param3: *HPROPSHEETPAGE,
    param4: PFNREADOBJECTSECURITY,
    param5: PFNWRITEOBJECTSECURITY,
    param6: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFNDSEDITSECURITY = fn(
    param0: HWND,
    param1: [*:0]const u16,
    param2: [*:0]const u16,
    param3: u32,
    param4: [*:0]const u16,
    param5: PFNREADOBJECTSECURITY,
    param6: PFNWRITEOBJECTSECURITY,
    param7: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

const CLSID_CObjectId_Value = @import("../zig.zig").Guid.initString("884E2000-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CObjectId = &CLSID_CObjectId_Value;

const CLSID_CObjectIds_Value = @import("../zig.zig").Guid.initString("884E2001-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CObjectIds = &CLSID_CObjectIds_Value;

const CLSID_CBinaryConverter_Value = @import("../zig.zig").Guid.initString("884E2002-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CBinaryConverter = &CLSID_CBinaryConverter_Value;

const CLSID_CX500DistinguishedName_Value = @import("../zig.zig").Guid.initString("884E2003-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX500DistinguishedName = &CLSID_CX500DistinguishedName_Value;

const CLSID_CCspInformation_Value = @import("../zig.zig").Guid.initString("884E2007-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCspInformation = &CLSID_CCspInformation_Value;

const CLSID_CCspInformations_Value = @import("../zig.zig").Guid.initString("884E2008-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCspInformations = &CLSID_CCspInformations_Value;

const CLSID_CCspStatus_Value = @import("../zig.zig").Guid.initString("884E2009-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCspStatus = &CLSID_CCspStatus_Value;

const CLSID_CX509PublicKey_Value = @import("../zig.zig").Guid.initString("884E200B-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509PublicKey = &CLSID_CX509PublicKey_Value;

const CLSID_CX509PrivateKey_Value = @import("../zig.zig").Guid.initString("884E200C-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509PrivateKey = &CLSID_CX509PrivateKey_Value;

const CLSID_CX509EndorsementKey_Value = @import("../zig.zig").Guid.initString("11A25A1D-B9A3-4EDD-AF83-3B59ADBED361");
pub const CLSID_CX509EndorsementKey = &CLSID_CX509EndorsementKey_Value;

const CLSID_CX509Extension_Value = @import("../zig.zig").Guid.initString("884E200D-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509Extension = &CLSID_CX509Extension_Value;

const CLSID_CX509Extensions_Value = @import("../zig.zig").Guid.initString("884E200E-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509Extensions = &CLSID_CX509Extensions_Value;

const CLSID_CX509ExtensionKeyUsage_Value = @import("../zig.zig").Guid.initString("884E200F-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509ExtensionKeyUsage = &CLSID_CX509ExtensionKeyUsage_Value;

const CLSID_CX509ExtensionEnhancedKeyUsage_Value = @import("../zig.zig").Guid.initString("884E2010-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509ExtensionEnhancedKeyUsage = &CLSID_CX509ExtensionEnhancedKeyUsage_Value;

const CLSID_CX509ExtensionTemplateName_Value = @import("../zig.zig").Guid.initString("884E2011-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509ExtensionTemplateName = &CLSID_CX509ExtensionTemplateName_Value;

const CLSID_CX509ExtensionTemplate_Value = @import("../zig.zig").Guid.initString("884E2012-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509ExtensionTemplate = &CLSID_CX509ExtensionTemplate_Value;

const CLSID_CAlternativeName_Value = @import("../zig.zig").Guid.initString("884E2013-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CAlternativeName = &CLSID_CAlternativeName_Value;

const CLSID_CAlternativeNames_Value = @import("../zig.zig").Guid.initString("884E2014-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CAlternativeNames = &CLSID_CAlternativeNames_Value;

const CLSID_CX509ExtensionAlternativeNames_Value = @import("../zig.zig").Guid.initString("884E2015-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509ExtensionAlternativeNames = &CLSID_CX509ExtensionAlternativeNames_Value;

const CLSID_CX509ExtensionBasicConstraints_Value = @import("../zig.zig").Guid.initString("884E2016-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509ExtensionBasicConstraints = &CLSID_CX509ExtensionBasicConstraints_Value;

const CLSID_CX509ExtensionSubjectKeyIdentifier_Value = @import("../zig.zig").Guid.initString("884E2017-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509ExtensionSubjectKeyIdentifier = &CLSID_CX509ExtensionSubjectKeyIdentifier_Value;

const CLSID_CX509ExtensionAuthorityKeyIdentifier_Value = @import("../zig.zig").Guid.initString("884E2018-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509ExtensionAuthorityKeyIdentifier = &CLSID_CX509ExtensionAuthorityKeyIdentifier_Value;

const CLSID_CSmimeCapability_Value = @import("../zig.zig").Guid.initString("884E2019-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CSmimeCapability = &CLSID_CSmimeCapability_Value;

const CLSID_CSmimeCapabilities_Value = @import("../zig.zig").Guid.initString("884E201A-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CSmimeCapabilities = &CLSID_CSmimeCapabilities_Value;

const CLSID_CX509ExtensionSmimeCapabilities_Value = @import("../zig.zig").Guid.initString("884E201B-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509ExtensionSmimeCapabilities = &CLSID_CX509ExtensionSmimeCapabilities_Value;

const CLSID_CPolicyQualifier_Value = @import("../zig.zig").Guid.initString("884E201C-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CPolicyQualifier = &CLSID_CPolicyQualifier_Value;

const CLSID_CPolicyQualifiers_Value = @import("../zig.zig").Guid.initString("884E201D-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CPolicyQualifiers = &CLSID_CPolicyQualifiers_Value;

const CLSID_CCertificatePolicy_Value = @import("../zig.zig").Guid.initString("884E201E-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCertificatePolicy = &CLSID_CCertificatePolicy_Value;

const CLSID_CCertificatePolicies_Value = @import("../zig.zig").Guid.initString("884E201F-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCertificatePolicies = &CLSID_CCertificatePolicies_Value;

const CLSID_CX509ExtensionCertificatePolicies_Value = @import("../zig.zig").Guid.initString("884E2020-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509ExtensionCertificatePolicies = &CLSID_CX509ExtensionCertificatePolicies_Value;

const CLSID_CX509ExtensionMSApplicationPolicies_Value = @import("../zig.zig").Guid.initString("884E2021-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509ExtensionMSApplicationPolicies = &CLSID_CX509ExtensionMSApplicationPolicies_Value;

const CLSID_CX509Attribute_Value = @import("../zig.zig").Guid.initString("884E2022-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509Attribute = &CLSID_CX509Attribute_Value;

const CLSID_CX509Attributes_Value = @import("../zig.zig").Guid.initString("884E2023-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509Attributes = &CLSID_CX509Attributes_Value;

const CLSID_CX509AttributeExtensions_Value = @import("../zig.zig").Guid.initString("884E2024-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509AttributeExtensions = &CLSID_CX509AttributeExtensions_Value;

const CLSID_CX509AttributeClientId_Value = @import("../zig.zig").Guid.initString("884E2025-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509AttributeClientId = &CLSID_CX509AttributeClientId_Value;

const CLSID_CX509AttributeRenewalCertificate_Value = @import("../zig.zig").Guid.initString("884E2026-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509AttributeRenewalCertificate = &CLSID_CX509AttributeRenewalCertificate_Value;

const CLSID_CX509AttributeArchiveKey_Value = @import("../zig.zig").Guid.initString("884E2027-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509AttributeArchiveKey = &CLSID_CX509AttributeArchiveKey_Value;

const CLSID_CX509AttributeArchiveKeyHash_Value = @import("../zig.zig").Guid.initString("884E2028-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509AttributeArchiveKeyHash = &CLSID_CX509AttributeArchiveKeyHash_Value;

const CLSID_CX509AttributeOSVersion_Value = @import("../zig.zig").Guid.initString("884E202A-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509AttributeOSVersion = &CLSID_CX509AttributeOSVersion_Value;

const CLSID_CX509AttributeCspProvider_Value = @import("../zig.zig").Guid.initString("884E202B-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509AttributeCspProvider = &CLSID_CX509AttributeCspProvider_Value;

const CLSID_CCryptAttribute_Value = @import("../zig.zig").Guid.initString("884E202C-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCryptAttribute = &CLSID_CCryptAttribute_Value;

const CLSID_CCryptAttributes_Value = @import("../zig.zig").Guid.initString("884E202D-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCryptAttributes = &CLSID_CCryptAttributes_Value;

const CLSID_CCertProperty_Value = @import("../zig.zig").Guid.initString("884E202E-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCertProperty = &CLSID_CCertProperty_Value;

const CLSID_CCertProperties_Value = @import("../zig.zig").Guid.initString("884E202F-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCertProperties = &CLSID_CCertProperties_Value;

const CLSID_CCertPropertyFriendlyName_Value = @import("../zig.zig").Guid.initString("884E2030-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCertPropertyFriendlyName = &CLSID_CCertPropertyFriendlyName_Value;

const CLSID_CCertPropertyDescription_Value = @import("../zig.zig").Guid.initString("884E2031-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCertPropertyDescription = &CLSID_CCertPropertyDescription_Value;

const CLSID_CCertPropertyAutoEnroll_Value = @import("../zig.zig").Guid.initString("884E2032-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCertPropertyAutoEnroll = &CLSID_CCertPropertyAutoEnroll_Value;

const CLSID_CCertPropertyRequestOriginator_Value = @import("../zig.zig").Guid.initString("884E2033-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCertPropertyRequestOriginator = &CLSID_CCertPropertyRequestOriginator_Value;

const CLSID_CCertPropertySHA1Hash_Value = @import("../zig.zig").Guid.initString("884E2034-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCertPropertySHA1Hash = &CLSID_CCertPropertySHA1Hash_Value;

const CLSID_CCertPropertyKeyProvInfo_Value = @import("../zig.zig").Guid.initString("884E2036-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCertPropertyKeyProvInfo = &CLSID_CCertPropertyKeyProvInfo_Value;

const CLSID_CCertPropertyArchived_Value = @import("../zig.zig").Guid.initString("884E2037-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCertPropertyArchived = &CLSID_CCertPropertyArchived_Value;

const CLSID_CCertPropertyBackedUp_Value = @import("../zig.zig").Guid.initString("884E2038-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCertPropertyBackedUp = &CLSID_CCertPropertyBackedUp_Value;

const CLSID_CCertPropertyEnrollment_Value = @import("../zig.zig").Guid.initString("884E2039-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCertPropertyEnrollment = &CLSID_CCertPropertyEnrollment_Value;

const CLSID_CCertPropertyRenewal_Value = @import("../zig.zig").Guid.initString("884E203A-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCertPropertyRenewal = &CLSID_CCertPropertyRenewal_Value;

const CLSID_CCertPropertyArchivedKeyHash_Value = @import("../zig.zig").Guid.initString("884E203B-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCertPropertyArchivedKeyHash = &CLSID_CCertPropertyArchivedKeyHash_Value;

const CLSID_CCertPropertyEnrollmentPolicyServer_Value = @import("../zig.zig").Guid.initString("884E204C-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CCertPropertyEnrollmentPolicyServer = &CLSID_CCertPropertyEnrollmentPolicyServer_Value;

const CLSID_CSignerCertificate_Value = @import("../zig.zig").Guid.initString("884E203D-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CSignerCertificate = &CLSID_CSignerCertificate_Value;

const CLSID_CX509NameValuePair_Value = @import("../zig.zig").Guid.initString("884E203F-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509NameValuePair = &CLSID_CX509NameValuePair_Value;

const CLSID_CCertificateAttestationChallenge_Value = @import("../zig.zig").Guid.initString("1362ADA1-EB60-456A-B6E1-118050DB741B");
pub const CLSID_CCertificateAttestationChallenge = &CLSID_CCertificateAttestationChallenge_Value;

const CLSID_CX509CertificateRequestPkcs10_Value = @import("../zig.zig").Guid.initString("884E2042-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509CertificateRequestPkcs10 = &CLSID_CX509CertificateRequestPkcs10_Value;

const CLSID_CX509CertificateRequestCertificate_Value = @import("../zig.zig").Guid.initString("884E2043-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509CertificateRequestCertificate = &CLSID_CX509CertificateRequestCertificate_Value;

const CLSID_CX509CertificateRequestPkcs7_Value = @import("../zig.zig").Guid.initString("884E2044-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509CertificateRequestPkcs7 = &CLSID_CX509CertificateRequestPkcs7_Value;

const CLSID_CX509CertificateRequestCmc_Value = @import("../zig.zig").Guid.initString("884E2045-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509CertificateRequestCmc = &CLSID_CX509CertificateRequestCmc_Value;

const CLSID_CX509Enrollment_Value = @import("../zig.zig").Guid.initString("884E2046-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509Enrollment = &CLSID_CX509Enrollment_Value;

const CLSID_CX509EnrollmentWebClassFactory_Value = @import("../zig.zig").Guid.initString("884E2049-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509EnrollmentWebClassFactory = &CLSID_CX509EnrollmentWebClassFactory_Value;

const CLSID_CX509EnrollmentHelper_Value = @import("../zig.zig").Guid.initString("884E2050-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509EnrollmentHelper = &CLSID_CX509EnrollmentHelper_Value;

const CLSID_CX509MachineEnrollmentFactory_Value = @import("../zig.zig").Guid.initString("884E2051-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509MachineEnrollmentFactory = &CLSID_CX509MachineEnrollmentFactory_Value;

const CLSID_CX509EnrollmentPolicyActiveDirectory_Value = @import("../zig.zig").Guid.initString("91F39027-217F-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509EnrollmentPolicyActiveDirectory = &CLSID_CX509EnrollmentPolicyActiveDirectory_Value;

const CLSID_CX509EnrollmentPolicyWebService_Value = @import("../zig.zig").Guid.initString("91F39028-217F-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509EnrollmentPolicyWebService = &CLSID_CX509EnrollmentPolicyWebService_Value;

const CLSID_CX509PolicyServerListManager_Value = @import("../zig.zig").Guid.initString("91F39029-217F-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509PolicyServerListManager = &CLSID_CX509PolicyServerListManager_Value;

const CLSID_CX509PolicyServerUrl_Value = @import("../zig.zig").Guid.initString("91F3902A-217F-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509PolicyServerUrl = &CLSID_CX509PolicyServerUrl_Value;

const CLSID_CX509CertificateTemplateADWritable_Value = @import("../zig.zig").Guid.initString("8336E323-2E6A-4A04-937C-548F681839B3");
pub const CLSID_CX509CertificateTemplateADWritable = &CLSID_CX509CertificateTemplateADWritable_Value;

const CLSID_CX509CertificateRevocationListEntry_Value = @import("../zig.zig").Guid.initString("884E205E-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509CertificateRevocationListEntry = &CLSID_CX509CertificateRevocationListEntry_Value;

const CLSID_CX509CertificateRevocationListEntries_Value = @import("../zig.zig").Guid.initString("884E205F-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509CertificateRevocationListEntries = &CLSID_CX509CertificateRevocationListEntries_Value;

const CLSID_CX509CertificateRevocationList_Value = @import("../zig.zig").Guid.initString("884E2060-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509CertificateRevocationList = &CLSID_CX509CertificateRevocationList_Value;

const CLSID_CX509SCEPEnrollment_Value = @import("../zig.zig").Guid.initString("884E2061-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509SCEPEnrollment = &CLSID_CX509SCEPEnrollment_Value;

const CLSID_CX509SCEPEnrollmentHelper_Value = @import("../zig.zig").Guid.initString("884E2062-217D-11DA-B2A4-000E7BBB2B09");
pub const CLSID_CX509SCEPEnrollmentHelper = &CLSID_CX509SCEPEnrollmentHelper_Value;

const CLSID_CCertGetConfig_Value = @import("../zig.zig").Guid.initString("C6CC49B0-CE17-11D0-8833-00A0C903B83C");
pub const CLSID_CCertGetConfig = &CLSID_CCertGetConfig_Value;

const CLSID_CCertConfig_Value = @import("../zig.zig").Guid.initString("372FCE38-4324-11D0-8810-00A0C903B83C");
pub const CLSID_CCertConfig = &CLSID_CCertConfig_Value;

const CLSID_CCertRequest_Value = @import("../zig.zig").Guid.initString("98AFF3F0-5524-11D0-8812-00A0C903B83C");
pub const CLSID_CCertRequest = &CLSID_CCertRequest_Value;

const CLSID_CCertServerPolicy_Value = @import("../zig.zig").Guid.initString("AA000926-FFBE-11CF-8800-00A0C903B83C");
pub const CLSID_CCertServerPolicy = &CLSID_CCertServerPolicy_Value;

const CLSID_CCertServerExit_Value = @import("../zig.zig").Guid.initString("4C4A5E40-732C-11D0-8816-00A0C903B83C");
pub const CLSID_CCertServerExit = &CLSID_CCertServerExit_Value;

const IID_ICertServerPolicy_Value = @import("../zig.zig").Guid.initString("AA000922-FFBE-11CF-8800-00A0C903B83C");
pub const IID_ICertServerPolicy = &IID_ICertServerPolicy_Value;
pub const ICertServerPolicy = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SetContext: fn(
            self: *const ICertServerPolicy,
            Context: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestProperty: fn(
            self: *const ICertServerPolicy,
            strPropertyName: BSTR,
            PropertyType: i32,
            pvarPropertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestAttribute: fn(
            self: *const ICertServerPolicy,
            strAttributeName: BSTR,
            pstrAttributeValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateProperty: fn(
            self: *const ICertServerPolicy,
            strPropertyName: BSTR,
            PropertyType: i32,
            pvarPropertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCertificateProperty: fn(
            self: *const ICertServerPolicy,
            strPropertyName: BSTR,
            PropertyType: i32,
            pvarPropertyValue: *const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateExtension: fn(
            self: *const ICertServerPolicy,
            strExtensionName: BSTR,
            Type: i32,
            pvarValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateExtensionFlags: fn(
            self: *const ICertServerPolicy,
            pExtFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCertificateExtension: fn(
            self: *const ICertServerPolicy,
            strExtensionName: BSTR,
            Type: i32,
            ExtFlags: i32,
            pvarValue: *const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateExtensionsSetup: fn(
            self: *const ICertServerPolicy,
            Flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateExtensions: fn(
            self: *const ICertServerPolicy,
            pstrExtensionName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateExtensionsClose: fn(
            self: *const ICertServerPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAttributesSetup: fn(
            self: *const ICertServerPolicy,
            Flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAttributes: fn(
            self: *const ICertServerPolicy,
            pstrAttributeName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAttributesClose: fn(
            self: *const ICertServerPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerPolicy_SetContext(self: *const T, Context: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerPolicy.VTable, self.vtable).SetContext(@ptrCast(*const ICertServerPolicy, self), Context);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerPolicy_GetRequestProperty(self: *const T, strPropertyName: BSTR, PropertyType: i32, pvarPropertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerPolicy.VTable, self.vtable).GetRequestProperty(@ptrCast(*const ICertServerPolicy, self), strPropertyName, PropertyType, pvarPropertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerPolicy_GetRequestAttribute(self: *const T, strAttributeName: BSTR, pstrAttributeValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerPolicy.VTable, self.vtable).GetRequestAttribute(@ptrCast(*const ICertServerPolicy, self), strAttributeName, pstrAttributeValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerPolicy_GetCertificateProperty(self: *const T, strPropertyName: BSTR, PropertyType: i32, pvarPropertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerPolicy.VTable, self.vtable).GetCertificateProperty(@ptrCast(*const ICertServerPolicy, self), strPropertyName, PropertyType, pvarPropertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerPolicy_SetCertificateProperty(self: *const T, strPropertyName: BSTR, PropertyType: i32, pvarPropertyValue: *const VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerPolicy.VTable, self.vtable).SetCertificateProperty(@ptrCast(*const ICertServerPolicy, self), strPropertyName, PropertyType, pvarPropertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerPolicy_GetCertificateExtension(self: *const T, strExtensionName: BSTR, Type: i32, pvarValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerPolicy.VTable, self.vtable).GetCertificateExtension(@ptrCast(*const ICertServerPolicy, self), strExtensionName, Type, pvarValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerPolicy_GetCertificateExtensionFlags(self: *const T, pExtFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerPolicy.VTable, self.vtable).GetCertificateExtensionFlags(@ptrCast(*const ICertServerPolicy, self), pExtFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerPolicy_SetCertificateExtension(self: *const T, strExtensionName: BSTR, Type: i32, ExtFlags: i32, pvarValue: *const VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerPolicy.VTable, self.vtable).SetCertificateExtension(@ptrCast(*const ICertServerPolicy, self), strExtensionName, Type, ExtFlags, pvarValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerPolicy_EnumerateExtensionsSetup(self: *const T, Flags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerPolicy.VTable, self.vtable).EnumerateExtensionsSetup(@ptrCast(*const ICertServerPolicy, self), Flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerPolicy_EnumerateExtensions(self: *const T, pstrExtensionName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerPolicy.VTable, self.vtable).EnumerateExtensions(@ptrCast(*const ICertServerPolicy, self), pstrExtensionName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerPolicy_EnumerateExtensionsClose(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerPolicy.VTable, self.vtable).EnumerateExtensionsClose(@ptrCast(*const ICertServerPolicy, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerPolicy_EnumerateAttributesSetup(self: *const T, Flags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerPolicy.VTable, self.vtable).EnumerateAttributesSetup(@ptrCast(*const ICertServerPolicy, self), Flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerPolicy_EnumerateAttributes(self: *const T, pstrAttributeName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerPolicy.VTable, self.vtable).EnumerateAttributes(@ptrCast(*const ICertServerPolicy, self), pstrAttributeName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerPolicy_EnumerateAttributesClose(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerPolicy.VTable, self.vtable).EnumerateAttributesClose(@ptrCast(*const ICertServerPolicy, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertServerExit_Value = @import("../zig.zig").Guid.initString("4BA9EB90-732C-11D0-8816-00A0C903B83C");
pub const IID_ICertServerExit = &IID_ICertServerExit_Value;
pub const ICertServerExit = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SetContext: fn(
            self: *const ICertServerExit,
            Context: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestProperty: fn(
            self: *const ICertServerExit,
            strPropertyName: BSTR,
            PropertyType: i32,
            pvarPropertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestAttribute: fn(
            self: *const ICertServerExit,
            strAttributeName: BSTR,
            pstrAttributeValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateProperty: fn(
            self: *const ICertServerExit,
            strPropertyName: BSTR,
            PropertyType: i32,
            pvarPropertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateExtension: fn(
            self: *const ICertServerExit,
            strExtensionName: BSTR,
            Type: i32,
            pvarValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateExtensionFlags: fn(
            self: *const ICertServerExit,
            pExtFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateExtensionsSetup: fn(
            self: *const ICertServerExit,
            Flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateExtensions: fn(
            self: *const ICertServerExit,
            pstrExtensionName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateExtensionsClose: fn(
            self: *const ICertServerExit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAttributesSetup: fn(
            self: *const ICertServerExit,
            Flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAttributes: fn(
            self: *const ICertServerExit,
            pstrAttributeName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAttributesClose: fn(
            self: *const ICertServerExit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerExit_SetContext(self: *const T, Context: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerExit.VTable, self.vtable).SetContext(@ptrCast(*const ICertServerExit, self), Context);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerExit_GetRequestProperty(self: *const T, strPropertyName: BSTR, PropertyType: i32, pvarPropertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerExit.VTable, self.vtable).GetRequestProperty(@ptrCast(*const ICertServerExit, self), strPropertyName, PropertyType, pvarPropertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerExit_GetRequestAttribute(self: *const T, strAttributeName: BSTR, pstrAttributeValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerExit.VTable, self.vtable).GetRequestAttribute(@ptrCast(*const ICertServerExit, self), strAttributeName, pstrAttributeValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerExit_GetCertificateProperty(self: *const T, strPropertyName: BSTR, PropertyType: i32, pvarPropertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerExit.VTable, self.vtable).GetCertificateProperty(@ptrCast(*const ICertServerExit, self), strPropertyName, PropertyType, pvarPropertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerExit_GetCertificateExtension(self: *const T, strExtensionName: BSTR, Type: i32, pvarValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerExit.VTable, self.vtable).GetCertificateExtension(@ptrCast(*const ICertServerExit, self), strExtensionName, Type, pvarValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerExit_GetCertificateExtensionFlags(self: *const T, pExtFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerExit.VTable, self.vtable).GetCertificateExtensionFlags(@ptrCast(*const ICertServerExit, self), pExtFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerExit_EnumerateExtensionsSetup(self: *const T, Flags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerExit.VTable, self.vtable).EnumerateExtensionsSetup(@ptrCast(*const ICertServerExit, self), Flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerExit_EnumerateExtensions(self: *const T, pstrExtensionName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerExit.VTable, self.vtable).EnumerateExtensions(@ptrCast(*const ICertServerExit, self), pstrExtensionName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerExit_EnumerateExtensionsClose(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerExit.VTable, self.vtable).EnumerateExtensionsClose(@ptrCast(*const ICertServerExit, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerExit_EnumerateAttributesSetup(self: *const T, Flags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerExit.VTable, self.vtable).EnumerateAttributesSetup(@ptrCast(*const ICertServerExit, self), Flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerExit_EnumerateAttributes(self: *const T, pstrAttributeName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerExit.VTable, self.vtable).EnumerateAttributes(@ptrCast(*const ICertServerExit, self), pstrAttributeName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertServerExit_EnumerateAttributesClose(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertServerExit.VTable, self.vtable).EnumerateAttributesClose(@ptrCast(*const ICertServerExit, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertGetConfig_Value = @import("../zig.zig").Guid.initString("C7EA09C0-CE17-11D0-8833-00A0C903B83C");
pub const IID_ICertGetConfig = &IID_ICertGetConfig_Value;
pub const ICertGetConfig = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetConfig: fn(
            self: *const ICertGetConfig,
            Flags: i32,
            pstrOut: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertGetConfig_GetConfig(self: *const T, Flags: i32, pstrOut: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertGetConfig.VTable, self.vtable).GetConfig(@ptrCast(*const ICertGetConfig, self), Flags, pstrOut);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertConfig_Value = @import("../zig.zig").Guid.initString("372FCE34-4324-11D0-8810-00A0C903B83C");
pub const IID_ICertConfig = &IID_ICertConfig_Value;
pub const ICertConfig = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Reset: fn(
            self: *const ICertConfig,
            Index: i32,
            pCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: fn(
            self: *const ICertConfig,
            pIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetField: fn(
            self: *const ICertConfig,
            strFieldName: BSTR,
            pstrOut: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConfig: fn(
            self: *const ICertConfig,
            Flags: i32,
            pstrOut: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertConfig_Reset(self: *const T, Index: i32, pCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertConfig.VTable, self.vtable).Reset(@ptrCast(*const ICertConfig, self), Index, pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertConfig_Next(self: *const T, pIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertConfig.VTable, self.vtable).Next(@ptrCast(*const ICertConfig, self), pIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertConfig_GetField(self: *const T, strFieldName: BSTR, pstrOut: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertConfig.VTable, self.vtable).GetField(@ptrCast(*const ICertConfig, self), strFieldName, pstrOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertConfig_GetConfig(self: *const T, Flags: i32, pstrOut: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertConfig.VTable, self.vtable).GetConfig(@ptrCast(*const ICertConfig, self), Flags, pstrOut);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertConfig2_Value = @import("../zig.zig").Guid.initString("7A18EDDE-7E78-4163-8DED-78E2C9CEE924");
pub const IID_ICertConfig2 = &IID_ICertConfig2_Value;
pub const ICertConfig2 = extern struct {
    pub const VTable = extern struct {
        base: ICertConfig.VTable,
        SetSharedFolder: fn(
            self: *const ICertConfig2,
            strSharedFolder: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertConfig.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertConfig2_SetSharedFolder(self: *const T, strSharedFolder: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertConfig2.VTable, self.vtable).SetSharedFolder(@ptrCast(*const ICertConfig2, self), strSharedFolder);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertRequest_Value = @import("../zig.zig").Guid.initString("014E4840-5523-11D0-8812-00A0C903B83C");
pub const IID_ICertRequest = &IID_ICertRequest_Value;
pub const ICertRequest = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Submit: fn(
            self: *const ICertRequest,
            Flags: i32,
            strRequest: BSTR,
            strAttributes: BSTR,
            strConfig: BSTR,
            pDisposition: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RetrievePending: fn(
            self: *const ICertRequest,
            RequestId: i32,
            strConfig: BSTR,
            pDisposition: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastStatus: fn(
            self: *const ICertRequest,
            pStatus: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestId: fn(
            self: *const ICertRequest,
            pRequestId: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDispositionMessage: fn(
            self: *const ICertRequest,
            pstrDispositionMessage: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCACertificate: fn(
            self: *const ICertRequest,
            fExchangeCertificate: i32,
            strConfig: BSTR,
            Flags: i32,
            pstrCertificate: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificate: fn(
            self: *const ICertRequest,
            Flags: i32,
            pstrCertificate: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertRequest_Submit(self: *const T, Flags: i32, strRequest: BSTR, strAttributes: BSTR, strConfig: BSTR, pDisposition: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertRequest.VTable, self.vtable).Submit(@ptrCast(*const ICertRequest, self), Flags, strRequest, strAttributes, strConfig, pDisposition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertRequest_RetrievePending(self: *const T, RequestId: i32, strConfig: BSTR, pDisposition: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertRequest.VTable, self.vtable).RetrievePending(@ptrCast(*const ICertRequest, self), RequestId, strConfig, pDisposition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertRequest_GetLastStatus(self: *const T, pStatus: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertRequest.VTable, self.vtable).GetLastStatus(@ptrCast(*const ICertRequest, self), pStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertRequest_GetRequestId(self: *const T, pRequestId: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertRequest.VTable, self.vtable).GetRequestId(@ptrCast(*const ICertRequest, self), pRequestId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertRequest_GetDispositionMessage(self: *const T, pstrDispositionMessage: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertRequest.VTable, self.vtable).GetDispositionMessage(@ptrCast(*const ICertRequest, self), pstrDispositionMessage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertRequest_GetCACertificate(self: *const T, fExchangeCertificate: i32, strConfig: BSTR, Flags: i32, pstrCertificate: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertRequest.VTable, self.vtable).GetCACertificate(@ptrCast(*const ICertRequest, self), fExchangeCertificate, strConfig, Flags, pstrCertificate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertRequest_GetCertificate(self: *const T, Flags: i32, pstrCertificate: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertRequest.VTable, self.vtable).GetCertificate(@ptrCast(*const ICertRequest, self), Flags, pstrCertificate);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertRequest2_Value = @import("../zig.zig").Guid.initString("A4772988-4A85-4FA9-824E-B5CF5C16405A");
pub const IID_ICertRequest2 = &IID_ICertRequest2_Value;
pub const ICertRequest2 = extern struct {
    pub const VTable = extern struct {
        base: ICertRequest.VTable,
        GetIssuedCertificate: fn(
            self: *const ICertRequest2,
            strConfig: BSTR,
            RequestId: i32,
            strSerialNumber: BSTR,
            pDisposition: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorMessageText: fn(
            self: *const ICertRequest2,
            hrMessage: i32,
            Flags: i32,
            pstrErrorMessageText: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAProperty: fn(
            self: *const ICertRequest2,
            strConfig: BSTR,
            PropId: i32,
            PropIndex: i32,
            PropType: i32,
            Flags: i32,
            pvarPropertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAPropertyFlags: fn(
            self: *const ICertRequest2,
            strConfig: BSTR,
            PropId: i32,
            pPropFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAPropertyDisplayName: fn(
            self: *const ICertRequest2,
            strConfig: BSTR,
            PropId: i32,
            pstrDisplayName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFullResponseProperty: fn(
            self: *const ICertRequest2,
            PropId: i32,
            PropIndex: i32,
            PropType: i32,
            Flags: i32,
            pvarPropertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertRequest.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertRequest2_GetIssuedCertificate(self: *const T, strConfig: BSTR, RequestId: i32, strSerialNumber: BSTR, pDisposition: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertRequest2.VTable, self.vtable).GetIssuedCertificate(@ptrCast(*const ICertRequest2, self), strConfig, RequestId, strSerialNumber, pDisposition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertRequest2_GetErrorMessageText(self: *const T, hrMessage: i32, Flags: i32, pstrErrorMessageText: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertRequest2.VTable, self.vtable).GetErrorMessageText(@ptrCast(*const ICertRequest2, self), hrMessage, Flags, pstrErrorMessageText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertRequest2_GetCAProperty(self: *const T, strConfig: BSTR, PropId: i32, PropIndex: i32, PropType: i32, Flags: i32, pvarPropertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertRequest2.VTable, self.vtable).GetCAProperty(@ptrCast(*const ICertRequest2, self), strConfig, PropId, PropIndex, PropType, Flags, pvarPropertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertRequest2_GetCAPropertyFlags(self: *const T, strConfig: BSTR, PropId: i32, pPropFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertRequest2.VTable, self.vtable).GetCAPropertyFlags(@ptrCast(*const ICertRequest2, self), strConfig, PropId, pPropFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertRequest2_GetCAPropertyDisplayName(self: *const T, strConfig: BSTR, PropId: i32, pstrDisplayName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertRequest2.VTable, self.vtable).GetCAPropertyDisplayName(@ptrCast(*const ICertRequest2, self), strConfig, PropId, pstrDisplayName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertRequest2_GetFullResponseProperty(self: *const T, PropId: i32, PropIndex: i32, PropType: i32, Flags: i32, pvarPropertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertRequest2.VTable, self.vtable).GetFullResponseProperty(@ptrCast(*const ICertRequest2, self), PropId, PropIndex, PropType, Flags, pvarPropertyValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const X509EnrollmentAuthFlags = extern enum(i32) {
    X509AuthNone = 0,
    X509AuthAnonymous = 1,
    X509AuthKerberos = 2,
    X509AuthUsername = 4,
    X509AuthCertificate = 8,
};
pub const X509AuthNone = X509EnrollmentAuthFlags.X509AuthNone;
pub const X509AuthAnonymous = X509EnrollmentAuthFlags.X509AuthAnonymous;
pub const X509AuthKerberos = X509EnrollmentAuthFlags.X509AuthKerberos;
pub const X509AuthUsername = X509EnrollmentAuthFlags.X509AuthUsername;
pub const X509AuthCertificate = X509EnrollmentAuthFlags.X509AuthCertificate;

const IID_ICertRequest3_Value = @import("../zig.zig").Guid.initString("AFC8F92B-33A2-4861-BF36-2933B7CD67B3");
pub const IID_ICertRequest3 = &IID_ICertRequest3_Value;
pub const ICertRequest3 = extern struct {
    pub const VTable = extern struct {
        base: ICertRequest2.VTable,
        SetCredential: fn(
            self: *const ICertRequest3,
            hWnd: i32,
            AuthType: X509EnrollmentAuthFlags,
            strCredential: BSTR,
            strPassword: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestIdString: fn(
            self: *const ICertRequest3,
            pstrRequestId: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIssuedCertificate2: fn(
            self: *const ICertRequest3,
            strConfig: BSTR,
            strRequestId: BSTR,
            strSerialNumber: BSTR,
            pDisposition: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRefreshPolicy: fn(
            self: *const ICertRequest3,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertRequest2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertRequest3_SetCredential(self: *const T, hWnd: i32, AuthType: X509EnrollmentAuthFlags, strCredential: BSTR, strPassword: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertRequest3.VTable, self.vtable).SetCredential(@ptrCast(*const ICertRequest3, self), hWnd, AuthType, strCredential, strPassword);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertRequest3_GetRequestIdString(self: *const T, pstrRequestId: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertRequest3.VTable, self.vtable).GetRequestIdString(@ptrCast(*const ICertRequest3, self), pstrRequestId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertRequest3_GetIssuedCertificate2(self: *const T, strConfig: BSTR, strRequestId: BSTR, strSerialNumber: BSTR, pDisposition: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertRequest3.VTable, self.vtable).GetIssuedCertificate2(@ptrCast(*const ICertRequest3, self), strConfig, strRequestId, strSerialNumber, pDisposition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertRequest3_GetRefreshPolicy(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertRequest3.VTable, self.vtable).GetRefreshPolicy(@ptrCast(*const ICertRequest3, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertManageModule_Value = @import("../zig.zig").Guid.initString("E7D7AD42-BD3D-11D1-9A4D-00C04FC297EB");
pub const IID_ICertManageModule = &IID_ICertManageModule_Value;
pub const ICertManageModule = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetProperty: fn(
            self: *const ICertManageModule,
            strConfig: BSTR,
            strStorageLocation: BSTR,
            strPropertyName: BSTR,
            Flags: i32,
            pvarProperty: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const ICertManageModule,
            strConfig: BSTR,
            strStorageLocation: BSTR,
            strPropertyName: BSTR,
            Flags: i32,
            pvarProperty: *const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Configure: fn(
            self: *const ICertManageModule,
            strConfig: BSTR,
            strStorageLocation: BSTR,
            Flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertManageModule_GetProperty(self: *const T, strConfig: BSTR, strStorageLocation: BSTR, strPropertyName: BSTR, Flags: i32, pvarProperty: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertManageModule.VTable, self.vtable).GetProperty(@ptrCast(*const ICertManageModule, self), strConfig, strStorageLocation, strPropertyName, Flags, pvarProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertManageModule_SetProperty(self: *const T, strConfig: BSTR, strStorageLocation: BSTR, strPropertyName: BSTR, Flags: i32, pvarProperty: *const VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertManageModule.VTable, self.vtable).SetProperty(@ptrCast(*const ICertManageModule, self), strConfig, strStorageLocation, strPropertyName, Flags, pvarProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertManageModule_Configure(self: *const T, strConfig: BSTR, strStorageLocation: BSTR, Flags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertManageModule.VTable, self.vtable).Configure(@ptrCast(*const ICertManageModule, self), strConfig, strStorageLocation, Flags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CERTTRANSBLOB = extern struct {
    cb: u32,
    pb: *u8,
};

pub const CERTVIEWRESTRICTION = extern struct {
    ColumnIndex: u32,
    SeekOperator: i32,
    SortOrder: i32,
    pbValue: *u8,
    cbValue: u32,
};

pub const CSEDB_RSTMAPW = extern struct {
    pwszDatabaseName: PWSTR,
    pwszNewDatabaseName: PWSTR,
};

pub const FNCERTSRVISSERVERONLINEW = fn(
    pwszServerName: [*:0]const u16,
    pfServerOnline: *BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPGETDYNAMICFILELISTW = fn(
    hbc: *c_void,
    ppwszzFileList: **u16,
    pcbSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPPREPAREW = fn(
    pwszServerName: [*:0]const u16,
    grbitJet: u32,
    dwBackupFlags: u32,
    phbc: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPGETDATABASENAMESW = fn(
    hbc: *c_void,
    ppwszzAttachmentInformation: **u16,
    pcbSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPOPENFILEW = fn(
    hbc: *c_void,
    pwszAttachmentName: [*:0]const u16,
    cbReadHintSize: u32,
    pliFileSize: *LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPREAD = fn(
    hbc: *c_void,
    pvBuffer: *c_void,
    cbBuffer: u32,
    pcbRead: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPCLOSE = fn(
    hbc: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPGETBACKUPLOGSW = fn(
    hbc: *c_void,
    ppwszzBackupLogFiles: **u16,
    pcbSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPTRUNCATELOGS = fn(
    hbc: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPEND = fn(
    hbc: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPFREE = fn(
    pv: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FNCERTSRVRESTOREGETDATABASELOCATIONSW = fn(
    hbc: *c_void,
    ppwszzDatabaseLocationList: **u16,
    pcbSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVRESTOREPREPAREW = fn(
    pwszServerName: [*:0]const u16,
    dwRestoreFlags: u32,
    phbc: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVRESTOREREGISTERW = fn(
    hbc: *c_void,
    pwszCheckPointFilePath: [*:0]const u16,
    pwszLogPath: [*:0]const u16,
    rgrstmap: *CSEDB_RSTMAPW,
    crstmap: i32,
    pwszBackupLogPath: [*:0]const u16,
    genLow: u32,
    genHigh: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVRESTOREREGISTERCOMPLETE = fn(
    hbc: *c_void,
    hrRestoreState: HRESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVRESTOREEND = fn(
    hbc: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVSERVERCONTROLW = fn(
    pwszServerName: [*:0]const u16,
    dwControlFlags: u32,
    pcbOut: *u32,
    ppbOut: **u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

const IID_ICertPolicy_Value = @import("../zig.zig").Guid.initString("38BB5A00-7636-11D0-B413-00A0C91BBF8C");
pub const IID_ICertPolicy = &IID_ICertPolicy_Value;
pub const ICertPolicy = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const ICertPolicy,
            strConfig: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        VerifyRequest: fn(
            self: *const ICertPolicy,
            strConfig: BSTR,
            Context: i32,
            bNewRequest: i32,
            Flags: i32,
            pDisposition: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: fn(
            self: *const ICertPolicy,
            pstrDescription: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShutDown: fn(
            self: *const ICertPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPolicy_Initialize(self: *const T, strConfig: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPolicy.VTable, self.vtable).Initialize(@ptrCast(*const ICertPolicy, self), strConfig);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPolicy_VerifyRequest(self: *const T, strConfig: BSTR, Context: i32, bNewRequest: i32, Flags: i32, pDisposition: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPolicy.VTable, self.vtable).VerifyRequest(@ptrCast(*const ICertPolicy, self), strConfig, Context, bNewRequest, Flags, pDisposition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPolicy_GetDescription(self: *const T, pstrDescription: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPolicy.VTable, self.vtable).GetDescription(@ptrCast(*const ICertPolicy, self), pstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPolicy_ShutDown(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPolicy.VTable, self.vtable).ShutDown(@ptrCast(*const ICertPolicy, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertPolicy2_Value = @import("../zig.zig").Guid.initString("3DB4910E-8001-4BF1-AA1B-F43A808317A0");
pub const IID_ICertPolicy2 = &IID_ICertPolicy2_Value;
pub const ICertPolicy2 = extern struct {
    pub const VTable = extern struct {
        base: ICertPolicy.VTable,
        GetManageModule: fn(
            self: *const ICertPolicy2,
            ppManageModule: **ICertManageModule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertPolicy.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPolicy2_GetManageModule(self: *const T, ppManageModule: **ICertManageModule) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPolicy2.VTable, self.vtable).GetManageModule(@ptrCast(*const ICertPolicy2, self), ppManageModule);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const X509SCEPMessageType = extern enum(i32) {
    SCEPMessageUnknown = -1,
    SCEPMessageCertResponse = 3,
    SCEPMessagePKCSRequest = 19,
    SCEPMessageGetCertInitial = 20,
    SCEPMessageGetCert = 21,
    SCEPMessageGetCRL = 22,
    SCEPMessageClaimChallengeAnswer = 41,
};
pub const SCEPMessageUnknown = X509SCEPMessageType.SCEPMessageUnknown;
pub const SCEPMessageCertResponse = X509SCEPMessageType.SCEPMessageCertResponse;
pub const SCEPMessagePKCSRequest = X509SCEPMessageType.SCEPMessagePKCSRequest;
pub const SCEPMessageGetCertInitial = X509SCEPMessageType.SCEPMessageGetCertInitial;
pub const SCEPMessageGetCert = X509SCEPMessageType.SCEPMessageGetCert;
pub const SCEPMessageGetCRL = X509SCEPMessageType.SCEPMessageGetCRL;
pub const SCEPMessageClaimChallengeAnswer = X509SCEPMessageType.SCEPMessageClaimChallengeAnswer;

pub const X509SCEPDisposition = extern enum(i32) {
    SCEPDispositionUnknown = -1,
    SCEPDispositionSuccess = 0,
    SCEPDispositionFailure = 2,
    SCEPDispositionPending = 3,
    SCEPDispositionPendingChallenge = 11,
};
pub const SCEPDispositionUnknown = X509SCEPDisposition.SCEPDispositionUnknown;
pub const SCEPDispositionSuccess = X509SCEPDisposition.SCEPDispositionSuccess;
pub const SCEPDispositionFailure = X509SCEPDisposition.SCEPDispositionFailure;
pub const SCEPDispositionPending = X509SCEPDisposition.SCEPDispositionPending;
pub const SCEPDispositionPendingChallenge = X509SCEPDisposition.SCEPDispositionPendingChallenge;

pub const X509SCEPFailInfo = extern enum(i32) {
    SCEPFailUnknown = -1,
    SCEPFailBadAlgorithm = 0,
    SCEPFailBadMessageCheck = 1,
    SCEPFailBadRequest = 2,
    SCEPFailBadTime = 3,
    SCEPFailBadCertId = 4,
};
pub const SCEPFailUnknown = X509SCEPFailInfo.SCEPFailUnknown;
pub const SCEPFailBadAlgorithm = X509SCEPFailInfo.SCEPFailBadAlgorithm;
pub const SCEPFailBadMessageCheck = X509SCEPFailInfo.SCEPFailBadMessageCheck;
pub const SCEPFailBadRequest = X509SCEPFailInfo.SCEPFailBadRequest;
pub const SCEPFailBadTime = X509SCEPFailInfo.SCEPFailBadTime;
pub const SCEPFailBadCertId = X509SCEPFailInfo.SCEPFailBadCertId;

const IID_INDESPolicy_Value = @import("../zig.zig").Guid.initString("13CA515D-431D-46CC-8C2E-1DA269BBD625");
pub const IID_INDESPolicy = &IID_INDESPolicy_Value;
pub const INDESPolicy = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const INDESPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Uninitialize: fn(
            self: *const INDESPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateChallenge: fn(
            self: *const INDESPolicy,
            pwszTemplate: [*:0]const u16,
            pwszParams: [*:0]const u16,
            ppwszResponse: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        VerifyRequest: fn(
            self: *const INDESPolicy,
            pctbRequest: *CERTTRANSBLOB,
            pctbSigningCertEncoded: *CERTTRANSBLOB,
            pwszTemplate: [*:0]const u16,
            pwszTransactionId: [*:0]const u16,
            pfVerified: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Notify: fn(
            self: *const INDESPolicy,
            pwszChallenge: [*:0]const u16,
            pwszTransactionId: [*:0]const u16,
            disposition: X509SCEPDisposition,
            lastHResult: i32,
            pctbIssuedCertEncoded: *CERTTRANSBLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INDESPolicy_Initialize(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const INDESPolicy.VTable, self.vtable).Initialize(@ptrCast(*const INDESPolicy, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INDESPolicy_Uninitialize(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const INDESPolicy.VTable, self.vtable).Uninitialize(@ptrCast(*const INDESPolicy, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INDESPolicy_GenerateChallenge(self: *const T, pwszTemplate: [*:0]const u16, pwszParams: [*:0]const u16, ppwszResponse: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const INDESPolicy.VTable, self.vtable).GenerateChallenge(@ptrCast(*const INDESPolicy, self), pwszTemplate, pwszParams, ppwszResponse);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INDESPolicy_VerifyRequest(self: *const T, pctbRequest: *CERTTRANSBLOB, pctbSigningCertEncoded: *CERTTRANSBLOB, pwszTemplate: [*:0]const u16, pwszTransactionId: [*:0]const u16, pfVerified: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const INDESPolicy.VTable, self.vtable).VerifyRequest(@ptrCast(*const INDESPolicy, self), pctbRequest, pctbSigningCertEncoded, pwszTemplate, pwszTransactionId, pfVerified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INDESPolicy_Notify(self: *const T, pwszChallenge: [*:0]const u16, pwszTransactionId: [*:0]const u16, disposition: X509SCEPDisposition, lastHResult: i32, pctbIssuedCertEncoded: *CERTTRANSBLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const INDESPolicy.VTable, self.vtable).Notify(@ptrCast(*const INDESPolicy, self), pwszChallenge, pwszTransactionId, disposition, lastHResult, pctbIssuedCertEncoded);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CERTENROLL_OBJECTID = extern enum(i32) {
    XCN_OID_NONE = 0,
    XCN_OID_RSA = 1,
    XCN_OID_PKCS = 2,
    XCN_OID_RSA_HASH = 3,
    XCN_OID_RSA_ENCRYPT = 4,
    XCN_OID_PKCS_1 = 5,
    XCN_OID_PKCS_2 = 6,
    XCN_OID_PKCS_3 = 7,
    XCN_OID_PKCS_4 = 8,
    XCN_OID_PKCS_5 = 9,
    XCN_OID_PKCS_6 = 10,
    XCN_OID_PKCS_7 = 11,
    XCN_OID_PKCS_8 = 12,
    XCN_OID_PKCS_9 = 13,
    XCN_OID_PKCS_10 = 14,
    XCN_OID_PKCS_12 = 15,
    XCN_OID_RSA_RSA = 16,
    XCN_OID_RSA_MD2RSA = 17,
    XCN_OID_RSA_MD4RSA = 18,
    XCN_OID_RSA_MD5RSA = 19,
    XCN_OID_RSA_SHA1RSA = 20,
    XCN_OID_RSA_SETOAEP_RSA = 21,
    XCN_OID_RSA_DH = 22,
    XCN_OID_RSA_data = 23,
    XCN_OID_RSA_signedData = 24,
    XCN_OID_RSA_envelopedData = 25,
    XCN_OID_RSA_signEnvData = 26,
    XCN_OID_RSA_digestedData = 27,
    XCN_OID_RSA_hashedData = 28,
    XCN_OID_RSA_encryptedData = 29,
    XCN_OID_RSA_emailAddr = 30,
    XCN_OID_RSA_unstructName = 31,
    XCN_OID_RSA_contentType = 32,
    XCN_OID_RSA_messageDigest = 33,
    XCN_OID_RSA_signingTime = 34,
    XCN_OID_RSA_counterSign = 35,
    XCN_OID_RSA_challengePwd = 36,
    XCN_OID_RSA_unstructAddr = 37,
    XCN_OID_RSA_extCertAttrs = 38,
    XCN_OID_RSA_certExtensions = 39,
    XCN_OID_RSA_SMIMECapabilities = 40,
    XCN_OID_RSA_preferSignedData = 41,
    XCN_OID_RSA_SMIMEalg = 42,
    XCN_OID_RSA_SMIMEalgESDH = 43,
    XCN_OID_RSA_SMIMEalgCMS3DESwrap = 44,
    XCN_OID_RSA_SMIMEalgCMSRC2wrap = 45,
    XCN_OID_RSA_MD2 = 46,
    XCN_OID_RSA_MD4 = 47,
    XCN_OID_RSA_MD5 = 48,
    XCN_OID_RSA_RC2CBC = 49,
    XCN_OID_RSA_RC4 = 50,
    XCN_OID_RSA_DES_EDE3_CBC = 51,
    XCN_OID_RSA_RC5_CBCPad = 52,
    XCN_OID_ANSI_X942 = 53,
    XCN_OID_ANSI_X942_DH = 54,
    XCN_OID_X957 = 55,
    XCN_OID_X957_DSA = 56,
    XCN_OID_X957_SHA1DSA = 57,
    XCN_OID_DS = 58,
    XCN_OID_DSALG = 59,
    XCN_OID_DSALG_CRPT = 60,
    XCN_OID_DSALG_HASH = 61,
    XCN_OID_DSALG_SIGN = 62,
    XCN_OID_DSALG_RSA = 63,
    XCN_OID_OIW = 64,
    XCN_OID_OIWSEC = 65,
    XCN_OID_OIWSEC_md4RSA = 66,
    XCN_OID_OIWSEC_md5RSA = 67,
    XCN_OID_OIWSEC_md4RSA2 = 68,
    XCN_OID_OIWSEC_desECB = 69,
    XCN_OID_OIWSEC_desCBC = 70,
    XCN_OID_OIWSEC_desOFB = 71,
    XCN_OID_OIWSEC_desCFB = 72,
    XCN_OID_OIWSEC_desMAC = 73,
    XCN_OID_OIWSEC_rsaSign = 74,
    XCN_OID_OIWSEC_dsa = 75,
    XCN_OID_OIWSEC_shaDSA = 76,
    XCN_OID_OIWSEC_mdc2RSA = 77,
    XCN_OID_OIWSEC_shaRSA = 78,
    XCN_OID_OIWSEC_dhCommMod = 79,
    XCN_OID_OIWSEC_desEDE = 80,
    XCN_OID_OIWSEC_sha = 81,
    XCN_OID_OIWSEC_mdc2 = 82,
    XCN_OID_OIWSEC_dsaComm = 83,
    XCN_OID_OIWSEC_dsaCommSHA = 84,
    XCN_OID_OIWSEC_rsaXchg = 85,
    XCN_OID_OIWSEC_keyHashSeal = 86,
    XCN_OID_OIWSEC_md2RSASign = 87,
    XCN_OID_OIWSEC_md5RSASign = 88,
    XCN_OID_OIWSEC_sha1 = 89,
    XCN_OID_OIWSEC_dsaSHA1 = 90,
    XCN_OID_OIWSEC_dsaCommSHA1 = 91,
    XCN_OID_OIWSEC_sha1RSASign = 92,
    XCN_OID_OIWDIR = 93,
    XCN_OID_OIWDIR_CRPT = 94,
    XCN_OID_OIWDIR_HASH = 95,
    XCN_OID_OIWDIR_SIGN = 96,
    XCN_OID_OIWDIR_md2 = 97,
    XCN_OID_OIWDIR_md2RSA = 98,
    XCN_OID_INFOSEC = 99,
    XCN_OID_INFOSEC_sdnsSignature = 100,
    XCN_OID_INFOSEC_mosaicSignature = 101,
    XCN_OID_INFOSEC_sdnsConfidentiality = 102,
    XCN_OID_INFOSEC_mosaicConfidentiality = 103,
    XCN_OID_INFOSEC_sdnsIntegrity = 104,
    XCN_OID_INFOSEC_mosaicIntegrity = 105,
    XCN_OID_INFOSEC_sdnsTokenProtection = 106,
    XCN_OID_INFOSEC_mosaicTokenProtection = 107,
    XCN_OID_INFOSEC_sdnsKeyManagement = 108,
    XCN_OID_INFOSEC_mosaicKeyManagement = 109,
    XCN_OID_INFOSEC_sdnsKMandSig = 110,
    XCN_OID_INFOSEC_mosaicKMandSig = 111,
    XCN_OID_INFOSEC_SuiteASignature = 112,
    XCN_OID_INFOSEC_SuiteAConfidentiality = 113,
    XCN_OID_INFOSEC_SuiteAIntegrity = 114,
    XCN_OID_INFOSEC_SuiteATokenProtection = 115,
    XCN_OID_INFOSEC_SuiteAKeyManagement = 116,
    XCN_OID_INFOSEC_SuiteAKMandSig = 117,
    XCN_OID_INFOSEC_mosaicUpdatedSig = 118,
    XCN_OID_INFOSEC_mosaicKMandUpdSig = 119,
    XCN_OID_INFOSEC_mosaicUpdatedInteg = 120,
    XCN_OID_COMMON_NAME = 121,
    XCN_OID_SUR_NAME = 122,
    XCN_OID_DEVICE_SERIAL_NUMBER = 123,
    XCN_OID_COUNTRY_NAME = 124,
    XCN_OID_LOCALITY_NAME = 125,
    XCN_OID_STATE_OR_PROVINCE_NAME = 126,
    XCN_OID_STREET_ADDRESS = 127,
    XCN_OID_ORGANIZATION_NAME = 128,
    XCN_OID_ORGANIZATIONAL_UNIT_NAME = 129,
    XCN_OID_TITLE = 130,
    XCN_OID_DESCRIPTION = 131,
    XCN_OID_SEARCH_GUIDE = 132,
    XCN_OID_BUSINESS_CATEGORY = 133,
    XCN_OID_POSTAL_ADDRESS = 134,
    XCN_OID_POSTAL_CODE = 135,
    XCN_OID_POST_OFFICE_BOX = 136,
    XCN_OID_PHYSICAL_DELIVERY_OFFICE_NAME = 137,
    XCN_OID_TELEPHONE_NUMBER = 138,
    XCN_OID_TELEX_NUMBER = 139,
    XCN_OID_TELETEXT_TERMINAL_IDENTIFIER = 140,
    XCN_OID_FACSIMILE_TELEPHONE_NUMBER = 141,
    XCN_OID_X21_ADDRESS = 142,
    XCN_OID_INTERNATIONAL_ISDN_NUMBER = 143,
    XCN_OID_REGISTERED_ADDRESS = 144,
    XCN_OID_DESTINATION_INDICATOR = 145,
    XCN_OID_PREFERRED_DELIVERY_METHOD = 146,
    XCN_OID_PRESENTATION_ADDRESS = 147,
    XCN_OID_SUPPORTED_APPLICATION_CONTEXT = 148,
    XCN_OID_MEMBER = 149,
    XCN_OID_OWNER = 150,
    XCN_OID_ROLE_OCCUPANT = 151,
    XCN_OID_SEE_ALSO = 152,
    XCN_OID_USER_PASSWORD = 153,
    XCN_OID_USER_CERTIFICATE = 154,
    XCN_OID_CA_CERTIFICATE = 155,
    XCN_OID_AUTHORITY_REVOCATION_LIST = 156,
    XCN_OID_CERTIFICATE_REVOCATION_LIST = 157,
    XCN_OID_CROSS_CERTIFICATE_PAIR = 158,
    XCN_OID_GIVEN_NAME = 159,
    XCN_OID_INITIALS = 160,
    XCN_OID_DN_QUALIFIER = 161,
    XCN_OID_DOMAIN_COMPONENT = 162,
    XCN_OID_PKCS_12_FRIENDLY_NAME_ATTR = 163,
    XCN_OID_PKCS_12_LOCAL_KEY_ID = 164,
    XCN_OID_PKCS_12_KEY_PROVIDER_NAME_ATTR = 165,
    XCN_OID_LOCAL_MACHINE_KEYSET = 166,
    XCN_OID_PKCS_12_EXTENDED_ATTRIBUTES = 167,
    XCN_OID_KEYID_RDN = 168,
    XCN_OID_AUTHORITY_KEY_IDENTIFIER = 169,
    XCN_OID_KEY_ATTRIBUTES = 170,
    XCN_OID_CERT_POLICIES_95 = 171,
    XCN_OID_KEY_USAGE_RESTRICTION = 172,
    XCN_OID_SUBJECT_ALT_NAME = 173,
    XCN_OID_ISSUER_ALT_NAME = 174,
    XCN_OID_BASIC_CONSTRAINTS = 175,
    XCN_OID_KEY_USAGE = 176,
    XCN_OID_PRIVATEKEY_USAGE_PERIOD = 177,
    XCN_OID_BASIC_CONSTRAINTS2 = 178,
    XCN_OID_CERT_POLICIES = 179,
    XCN_OID_ANY_CERT_POLICY = 180,
    XCN_OID_AUTHORITY_KEY_IDENTIFIER2 = 181,
    XCN_OID_SUBJECT_KEY_IDENTIFIER = 182,
    XCN_OID_SUBJECT_ALT_NAME2 = 183,
    XCN_OID_ISSUER_ALT_NAME2 = 184,
    XCN_OID_CRL_REASON_CODE = 185,
    XCN_OID_REASON_CODE_HOLD = 186,
    XCN_OID_CRL_DIST_POINTS = 187,
    XCN_OID_ENHANCED_KEY_USAGE = 188,
    XCN_OID_CRL_NUMBER = 189,
    XCN_OID_DELTA_CRL_INDICATOR = 190,
    XCN_OID_ISSUING_DIST_POINT = 191,
    XCN_OID_FRESHEST_CRL = 192,
    XCN_OID_NAME_CONSTRAINTS = 193,
    XCN_OID_POLICY_MAPPINGS = 194,
    XCN_OID_LEGACY_POLICY_MAPPINGS = 195,
    XCN_OID_POLICY_CONSTRAINTS = 196,
    XCN_OID_RENEWAL_CERTIFICATE = 197,
    XCN_OID_ENROLLMENT_NAME_VALUE_PAIR = 198,
    XCN_OID_ENROLLMENT_CSP_PROVIDER = 199,
    XCN_OID_OS_VERSION = 200,
    XCN_OID_ENROLLMENT_AGENT = 201,
    XCN_OID_PKIX = 202,
    XCN_OID_PKIX_PE = 203,
    XCN_OID_AUTHORITY_INFO_ACCESS = 204,
    XCN_OID_BIOMETRIC_EXT = 205,
    XCN_OID_LOGOTYPE_EXT = 206,
    XCN_OID_CERT_EXTENSIONS = 207,
    XCN_OID_NEXT_UPDATE_LOCATION = 208,
    XCN_OID_REMOVE_CERTIFICATE = 209,
    XCN_OID_CROSS_CERT_DIST_POINTS = 210,
    XCN_OID_CTL = 211,
    XCN_OID_SORTED_CTL = 212,
    XCN_OID_SERIALIZED = 213,
    XCN_OID_NT_PRINCIPAL_NAME = 214,
    XCN_OID_PRODUCT_UPDATE = 215,
    XCN_OID_ANY_APPLICATION_POLICY = 216,
    XCN_OID_AUTO_ENROLL_CTL_USAGE = 217,
    XCN_OID_ENROLL_CERTTYPE_EXTENSION = 218,
    XCN_OID_CERT_MANIFOLD = 219,
    XCN_OID_CERTSRV_CA_VERSION = 220,
    XCN_OID_CERTSRV_PREVIOUS_CERT_HASH = 221,
    XCN_OID_CRL_VIRTUAL_BASE = 222,
    XCN_OID_CRL_NEXT_PUBLISH = 223,
    XCN_OID_KP_CA_EXCHANGE = 224,
    XCN_OID_KP_KEY_RECOVERY_AGENT = 225,
    XCN_OID_CERTIFICATE_TEMPLATE = 226,
    XCN_OID_ENTERPRISE_OID_ROOT = 227,
    XCN_OID_RDN_DUMMY_SIGNER = 228,
    XCN_OID_APPLICATION_CERT_POLICIES = 229,
    XCN_OID_APPLICATION_POLICY_MAPPINGS = 230,
    XCN_OID_APPLICATION_POLICY_CONSTRAINTS = 231,
    XCN_OID_ARCHIVED_KEY_ATTR = 232,
    XCN_OID_CRL_SELF_CDP = 233,
    XCN_OID_REQUIRE_CERT_CHAIN_POLICY = 234,
    XCN_OID_ARCHIVED_KEY_CERT_HASH = 235,
    XCN_OID_ISSUED_CERT_HASH = 236,
    XCN_OID_DS_EMAIL_REPLICATION = 237,
    XCN_OID_REQUEST_CLIENT_INFO = 238,
    XCN_OID_ENCRYPTED_KEY_HASH = 239,
    XCN_OID_CERTSRV_CROSSCA_VERSION = 240,
    XCN_OID_NTDS_REPLICATION = 241,
    XCN_OID_SUBJECT_DIR_ATTRS = 242,
    XCN_OID_PKIX_KP = 243,
    XCN_OID_PKIX_KP_SERVER_AUTH = 244,
    XCN_OID_PKIX_KP_CLIENT_AUTH = 245,
    XCN_OID_PKIX_KP_CODE_SIGNING = 246,
    XCN_OID_PKIX_KP_EMAIL_PROTECTION = 247,
    XCN_OID_PKIX_KP_IPSEC_END_SYSTEM = 248,
    XCN_OID_PKIX_KP_IPSEC_TUNNEL = 249,
    XCN_OID_PKIX_KP_IPSEC_USER = 250,
    XCN_OID_PKIX_KP_TIMESTAMP_SIGNING = 251,
    XCN_OID_PKIX_KP_OCSP_SIGNING = 252,
    XCN_OID_PKIX_OCSP_NOCHECK = 253,
    XCN_OID_IPSEC_KP_IKE_INTERMEDIATE = 254,
    XCN_OID_KP_CTL_USAGE_SIGNING = 255,
    XCN_OID_KP_TIME_STAMP_SIGNING = 256,
    XCN_OID_SERVER_GATED_CRYPTO = 257,
    XCN_OID_SGC_NETSCAPE = 258,
    XCN_OID_KP_EFS = 259,
    XCN_OID_EFS_RECOVERY = 260,
    XCN_OID_WHQL_CRYPTO = 261,
    XCN_OID_NT5_CRYPTO = 262,
    XCN_OID_OEM_WHQL_CRYPTO = 263,
    XCN_OID_EMBEDDED_NT_CRYPTO = 264,
    XCN_OID_ROOT_LIST_SIGNER = 265,
    XCN_OID_KP_QUALIFIED_SUBORDINATION = 266,
    XCN_OID_KP_KEY_RECOVERY = 267,
    XCN_OID_KP_DOCUMENT_SIGNING = 268,
    XCN_OID_KP_LIFETIME_SIGNING = 269,
    XCN_OID_KP_MOBILE_DEVICE_SOFTWARE = 270,
    XCN_OID_KP_SMART_DISPLAY = 271,
    XCN_OID_KP_CSP_SIGNATURE = 272,
    XCN_OID_DRM = 273,
    XCN_OID_DRM_INDIVIDUALIZATION = 274,
    XCN_OID_LICENSES = 275,
    XCN_OID_LICENSE_SERVER = 276,
    XCN_OID_KP_SMARTCARD_LOGON = 277,
    XCN_OID_YESNO_TRUST_ATTR = 278,
    XCN_OID_PKIX_POLICY_QUALIFIER_CPS = 279,
    XCN_OID_PKIX_POLICY_QUALIFIER_USERNOTICE = 280,
    XCN_OID_CERT_POLICIES_95_QUALIFIER1 = 281,
    XCN_OID_PKIX_ACC_DESCR = 282,
    XCN_OID_PKIX_OCSP = 283,
    XCN_OID_PKIX_CA_ISSUERS = 284,
    XCN_OID_VERISIGN_PRIVATE_6_9 = 285,
    XCN_OID_VERISIGN_ONSITE_JURISDICTION_HASH = 286,
    XCN_OID_VERISIGN_BITSTRING_6_13 = 287,
    XCN_OID_VERISIGN_ISS_STRONG_CRYPTO = 288,
    XCN_OID_NETSCAPE = 289,
    XCN_OID_NETSCAPE_CERT_EXTENSION = 290,
    XCN_OID_NETSCAPE_CERT_TYPE = 291,
    XCN_OID_NETSCAPE_BASE_URL = 292,
    XCN_OID_NETSCAPE_REVOCATION_URL = 293,
    XCN_OID_NETSCAPE_CA_REVOCATION_URL = 294,
    XCN_OID_NETSCAPE_CERT_RENEWAL_URL = 295,
    XCN_OID_NETSCAPE_CA_POLICY_URL = 296,
    XCN_OID_NETSCAPE_SSL_SERVER_NAME = 297,
    XCN_OID_NETSCAPE_COMMENT = 298,
    XCN_OID_NETSCAPE_DATA_TYPE = 299,
    XCN_OID_NETSCAPE_CERT_SEQUENCE = 300,
    XCN_OID_CT_PKI_DATA = 301,
    XCN_OID_CT_PKI_RESPONSE = 302,
    XCN_OID_PKIX_NO_SIGNATURE = 303,
    XCN_OID_CMC = 304,
    XCN_OID_CMC_STATUS_INFO = 305,
    XCN_OID_CMC_IDENTIFICATION = 306,
    XCN_OID_CMC_IDENTITY_PROOF = 307,
    XCN_OID_CMC_DATA_RETURN = 308,
    XCN_OID_CMC_TRANSACTION_ID = 309,
    XCN_OID_CMC_SENDER_NONCE = 310,
    XCN_OID_CMC_RECIPIENT_NONCE = 311,
    XCN_OID_CMC_ADD_EXTENSIONS = 312,
    XCN_OID_CMC_ENCRYPTED_POP = 313,
    XCN_OID_CMC_DECRYPTED_POP = 314,
    XCN_OID_CMC_LRA_POP_WITNESS = 315,
    XCN_OID_CMC_GET_CERT = 316,
    XCN_OID_CMC_GET_CRL = 317,
    XCN_OID_CMC_REVOKE_REQUEST = 318,
    XCN_OID_CMC_REG_INFO = 319,
    XCN_OID_CMC_RESPONSE_INFO = 320,
    XCN_OID_CMC_QUERY_PENDING = 321,
    XCN_OID_CMC_ID_POP_LINK_RANDOM = 322,
    XCN_OID_CMC_ID_POP_LINK_WITNESS = 323,
    XCN_OID_CMC_ID_CONFIRM_CERT_ACCEPTANCE = 324,
    XCN_OID_CMC_ADD_ATTRIBUTES = 325,
    XCN_OID_LOYALTY_OTHER_LOGOTYPE = 326,
    XCN_OID_BACKGROUND_OTHER_LOGOTYPE = 327,
    XCN_OID_PKIX_OCSP_BASIC_SIGNED_RESPONSE = 328,
    XCN_OID_PKCS_7_DATA = 329,
    XCN_OID_PKCS_7_SIGNED = 330,
    XCN_OID_PKCS_7_ENVELOPED = 331,
    XCN_OID_PKCS_7_SIGNEDANDENVELOPED = 332,
    XCN_OID_PKCS_7_DIGESTED = 333,
    XCN_OID_PKCS_7_ENCRYPTED = 334,
    XCN_OID_PKCS_9_CONTENT_TYPE = 335,
    XCN_OID_PKCS_9_MESSAGE_DIGEST = 336,
    XCN_OID_CERT_PROP_ID_PREFIX = 337,
    XCN_OID_CERT_KEY_IDENTIFIER_PROP_ID = 338,
    XCN_OID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 339,
    XCN_OID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 340,
    XCN_OID_CERT_MD5_HASH_PROP_ID = 341,
    XCN_OID_RSA_SHA256RSA = 342,
    XCN_OID_RSA_SHA384RSA = 343,
    XCN_OID_RSA_SHA512RSA = 344,
    XCN_OID_NIST_sha256 = 345,
    XCN_OID_NIST_sha384 = 346,
    XCN_OID_NIST_sha512 = 347,
    XCN_OID_RSA_MGF1 = 348,
    XCN_OID_ECC_PUBLIC_KEY = 349,
    XCN_OID_ECDSA_SHA1 = 350,
    XCN_OID_ECDSA_SPECIFIED = 351,
    XCN_OID_ANY_ENHANCED_KEY_USAGE = 352,
    XCN_OID_RSA_SSA_PSS = 353,
    XCN_OID_ATTR_SUPPORTED_ALGORITHMS = 355,
    XCN_OID_ATTR_TPM_SECURITY_ASSERTIONS = 356,
    XCN_OID_ATTR_TPM_SPECIFICATION = 357,
    XCN_OID_CERT_DISALLOWED_FILETIME_PROP_ID = 358,
    XCN_OID_CERT_SIGNATURE_HASH_PROP_ID = 359,
    XCN_OID_CERT_STRONG_KEY_OS_1 = 360,
    XCN_OID_CERT_STRONG_KEY_OS_CURRENT = 361,
    XCN_OID_CERT_STRONG_KEY_OS_PREFIX = 362,
    XCN_OID_CERT_STRONG_SIGN_OS_1 = 363,
    XCN_OID_CERT_STRONG_SIGN_OS_CURRENT = 364,
    XCN_OID_CERT_STRONG_SIGN_OS_PREFIX = 365,
    XCN_OID_DH_SINGLE_PASS_STDDH_SHA1_KDF = 366,
    XCN_OID_DH_SINGLE_PASS_STDDH_SHA256_KDF = 367,
    XCN_OID_DH_SINGLE_PASS_STDDH_SHA384_KDF = 368,
    XCN_OID_DISALLOWED_HASH = 369,
    XCN_OID_DISALLOWED_LIST = 370,
    XCN_OID_ECC_CURVE_P256 = 371,
    XCN_OID_ECC_CURVE_P384 = 372,
    XCN_OID_ECC_CURVE_P521 = 373,
    XCN_OID_ECDSA_SHA256 = 374,
    XCN_OID_ECDSA_SHA384 = 375,
    XCN_OID_ECDSA_SHA512 = 376,
    XCN_OID_ENROLL_CAXCHGCERT_HASH = 377,
    XCN_OID_ENROLL_EK_INFO = 378,
    XCN_OID_ENROLL_EKPUB_CHALLENGE = 379,
    XCN_OID_ENROLL_EKVERIFYCERT = 380,
    XCN_OID_ENROLL_EKVERIFYCREDS = 381,
    XCN_OID_ENROLL_EKVERIFYKEY = 382,
    XCN_OID_EV_RDN_COUNTRY = 383,
    XCN_OID_EV_RDN_LOCALE = 384,
    XCN_OID_EV_RDN_STATE_OR_PROVINCE = 385,
    XCN_OID_INHIBIT_ANY_POLICY = 386,
    XCN_OID_INTERNATIONALIZED_EMAIL_ADDRESS = 387,
    XCN_OID_KP_KERNEL_MODE_CODE_SIGNING = 388,
    XCN_OID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING = 389,
    XCN_OID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING = 390,
    XCN_OID_KP_TPM_AIK_CERTIFICATE = 391,
    XCN_OID_KP_TPM_EK_CERTIFICATE = 392,
    XCN_OID_KP_TPM_PLATFORM_CERTIFICATE = 393,
    XCN_OID_NIST_AES128_CBC = 394,
    XCN_OID_NIST_AES128_WRAP = 395,
    XCN_OID_NIST_AES192_CBC = 396,
    XCN_OID_NIST_AES192_WRAP = 397,
    XCN_OID_NIST_AES256_CBC = 398,
    XCN_OID_NIST_AES256_WRAP = 399,
    XCN_OID_PKCS_12_PbeIds = 400,
    XCN_OID_PKCS_12_pbeWithSHA1And128BitRC2 = 401,
    XCN_OID_PKCS_12_pbeWithSHA1And128BitRC4 = 402,
    XCN_OID_PKCS_12_pbeWithSHA1And2KeyTripleDES = 403,
    XCN_OID_PKCS_12_pbeWithSHA1And3KeyTripleDES = 404,
    XCN_OID_PKCS_12_pbeWithSHA1And40BitRC2 = 405,
    XCN_OID_PKCS_12_pbeWithSHA1And40BitRC4 = 406,
    XCN_OID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID = 407,
    XCN_OID_PKINIT_KP_KDC = 408,
    XCN_OID_PKIX_CA_REPOSITORY = 409,
    XCN_OID_PKIX_OCSP_NONCE = 410,
    XCN_OID_PKIX_TIME_STAMPING = 411,
    XCN_OID_QC_EU_COMPLIANCE = 412,
    XCN_OID_QC_SSCD = 413,
    XCN_OID_QC_STATEMENTS_EXT = 414,
    XCN_OID_RDN_TPM_MANUFACTURER = 415,
    XCN_OID_RDN_TPM_MODEL = 416,
    XCN_OID_RDN_TPM_VERSION = 417,
    XCN_OID_REVOKED_LIST_SIGNER = 418,
    XCN_OID_RFC3161_counterSign = 419,
    XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION = 420,
    XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION = 421,
    XCN_OID_ROOT_PROGRAM_FLAGS = 422,
    XCN_OID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL = 423,
    XCN_OID_RSA_PSPECIFIED = 424,
    XCN_OID_RSAES_OAEP = 425,
    XCN_OID_SUBJECT_INFO_ACCESS = 426,
    XCN_OID_TIMESTAMP_TOKEN = 427,
    XCN_OID_ENROLL_SCEP_ERROR = 428,
    XCN_OIDVerisign_MessageType = 429,
    XCN_OIDVerisign_PkiStatus = 430,
    XCN_OIDVerisign_FailInfo = 431,
    XCN_OIDVerisign_SenderNonce = 432,
    XCN_OIDVerisign_RecipientNonce = 433,
    XCN_OIDVerisign_TransactionID = 434,
    XCN_OID_ENROLL_ATTESTATION_CHALLENGE = 435,
    XCN_OID_ENROLL_ATTESTATION_STATEMENT = 436,
    XCN_OID_ENROLL_ENCRYPTION_ALGORITHM = 437,
    XCN_OID_ENROLL_KSP_NAME = 438,
};
pub const XCN_OID_NONE = CERTENROLL_OBJECTID.XCN_OID_NONE;
pub const XCN_OID_RSA = CERTENROLL_OBJECTID.XCN_OID_RSA;
pub const XCN_OID_PKCS = CERTENROLL_OBJECTID.XCN_OID_PKCS;
pub const XCN_OID_RSA_HASH = CERTENROLL_OBJECTID.XCN_OID_RSA_HASH;
pub const XCN_OID_RSA_ENCRYPT = CERTENROLL_OBJECTID.XCN_OID_RSA_ENCRYPT;
pub const XCN_OID_PKCS_1 = CERTENROLL_OBJECTID.XCN_OID_PKCS_1;
pub const XCN_OID_PKCS_2 = CERTENROLL_OBJECTID.XCN_OID_PKCS_2;
pub const XCN_OID_PKCS_3 = CERTENROLL_OBJECTID.XCN_OID_PKCS_3;
pub const XCN_OID_PKCS_4 = CERTENROLL_OBJECTID.XCN_OID_PKCS_4;
pub const XCN_OID_PKCS_5 = CERTENROLL_OBJECTID.XCN_OID_PKCS_5;
pub const XCN_OID_PKCS_6 = CERTENROLL_OBJECTID.XCN_OID_PKCS_6;
pub const XCN_OID_PKCS_7 = CERTENROLL_OBJECTID.XCN_OID_PKCS_7;
pub const XCN_OID_PKCS_8 = CERTENROLL_OBJECTID.XCN_OID_PKCS_8;
pub const XCN_OID_PKCS_9 = CERTENROLL_OBJECTID.XCN_OID_PKCS_9;
pub const XCN_OID_PKCS_10 = CERTENROLL_OBJECTID.XCN_OID_PKCS_10;
pub const XCN_OID_PKCS_12 = CERTENROLL_OBJECTID.XCN_OID_PKCS_12;
pub const XCN_OID_RSA_RSA = CERTENROLL_OBJECTID.XCN_OID_RSA_RSA;
pub const XCN_OID_RSA_MD2RSA = CERTENROLL_OBJECTID.XCN_OID_RSA_MD2RSA;
pub const XCN_OID_RSA_MD4RSA = CERTENROLL_OBJECTID.XCN_OID_RSA_MD4RSA;
pub const XCN_OID_RSA_MD5RSA = CERTENROLL_OBJECTID.XCN_OID_RSA_MD5RSA;
pub const XCN_OID_RSA_SHA1RSA = CERTENROLL_OBJECTID.XCN_OID_RSA_SHA1RSA;
pub const XCN_OID_RSA_SETOAEP_RSA = CERTENROLL_OBJECTID.XCN_OID_RSA_SETOAEP_RSA;
pub const XCN_OID_RSA_DH = CERTENROLL_OBJECTID.XCN_OID_RSA_DH;
pub const XCN_OID_RSA_data = CERTENROLL_OBJECTID.XCN_OID_RSA_data;
pub const XCN_OID_RSA_signedData = CERTENROLL_OBJECTID.XCN_OID_RSA_signedData;
pub const XCN_OID_RSA_envelopedData = CERTENROLL_OBJECTID.XCN_OID_RSA_envelopedData;
pub const XCN_OID_RSA_signEnvData = CERTENROLL_OBJECTID.XCN_OID_RSA_signEnvData;
pub const XCN_OID_RSA_digestedData = CERTENROLL_OBJECTID.XCN_OID_RSA_digestedData;
pub const XCN_OID_RSA_hashedData = CERTENROLL_OBJECTID.XCN_OID_RSA_hashedData;
pub const XCN_OID_RSA_encryptedData = CERTENROLL_OBJECTID.XCN_OID_RSA_encryptedData;
pub const XCN_OID_RSA_emailAddr = CERTENROLL_OBJECTID.XCN_OID_RSA_emailAddr;
pub const XCN_OID_RSA_unstructName = CERTENROLL_OBJECTID.XCN_OID_RSA_unstructName;
pub const XCN_OID_RSA_contentType = CERTENROLL_OBJECTID.XCN_OID_RSA_contentType;
pub const XCN_OID_RSA_messageDigest = CERTENROLL_OBJECTID.XCN_OID_RSA_messageDigest;
pub const XCN_OID_RSA_signingTime = CERTENROLL_OBJECTID.XCN_OID_RSA_signingTime;
pub const XCN_OID_RSA_counterSign = CERTENROLL_OBJECTID.XCN_OID_RSA_counterSign;
pub const XCN_OID_RSA_challengePwd = CERTENROLL_OBJECTID.XCN_OID_RSA_challengePwd;
pub const XCN_OID_RSA_unstructAddr = CERTENROLL_OBJECTID.XCN_OID_RSA_unstructAddr;
pub const XCN_OID_RSA_extCertAttrs = CERTENROLL_OBJECTID.XCN_OID_RSA_extCertAttrs;
pub const XCN_OID_RSA_certExtensions = CERTENROLL_OBJECTID.XCN_OID_RSA_certExtensions;
pub const XCN_OID_RSA_SMIMECapabilities = CERTENROLL_OBJECTID.XCN_OID_RSA_SMIMECapabilities;
pub const XCN_OID_RSA_preferSignedData = CERTENROLL_OBJECTID.XCN_OID_RSA_preferSignedData;
pub const XCN_OID_RSA_SMIMEalg = CERTENROLL_OBJECTID.XCN_OID_RSA_SMIMEalg;
pub const XCN_OID_RSA_SMIMEalgESDH = CERTENROLL_OBJECTID.XCN_OID_RSA_SMIMEalgESDH;
pub const XCN_OID_RSA_SMIMEalgCMS3DESwrap = CERTENROLL_OBJECTID.XCN_OID_RSA_SMIMEalgCMS3DESwrap;
pub const XCN_OID_RSA_SMIMEalgCMSRC2wrap = CERTENROLL_OBJECTID.XCN_OID_RSA_SMIMEalgCMSRC2wrap;
pub const XCN_OID_RSA_MD2 = CERTENROLL_OBJECTID.XCN_OID_RSA_MD2;
pub const XCN_OID_RSA_MD4 = CERTENROLL_OBJECTID.XCN_OID_RSA_MD4;
pub const XCN_OID_RSA_MD5 = CERTENROLL_OBJECTID.XCN_OID_RSA_MD5;
pub const XCN_OID_RSA_RC2CBC = CERTENROLL_OBJECTID.XCN_OID_RSA_RC2CBC;
pub const XCN_OID_RSA_RC4 = CERTENROLL_OBJECTID.XCN_OID_RSA_RC4;
pub const XCN_OID_RSA_DES_EDE3_CBC = CERTENROLL_OBJECTID.XCN_OID_RSA_DES_EDE3_CBC;
pub const XCN_OID_RSA_RC5_CBCPad = CERTENROLL_OBJECTID.XCN_OID_RSA_RC5_CBCPad;
pub const XCN_OID_ANSI_X942 = CERTENROLL_OBJECTID.XCN_OID_ANSI_X942;
pub const XCN_OID_ANSI_X942_DH = CERTENROLL_OBJECTID.XCN_OID_ANSI_X942_DH;
pub const XCN_OID_X957 = CERTENROLL_OBJECTID.XCN_OID_X957;
pub const XCN_OID_X957_DSA = CERTENROLL_OBJECTID.XCN_OID_X957_DSA;
pub const XCN_OID_X957_SHA1DSA = CERTENROLL_OBJECTID.XCN_OID_X957_SHA1DSA;
pub const XCN_OID_DS = CERTENROLL_OBJECTID.XCN_OID_DS;
pub const XCN_OID_DSALG = CERTENROLL_OBJECTID.XCN_OID_DSALG;
pub const XCN_OID_DSALG_CRPT = CERTENROLL_OBJECTID.XCN_OID_DSALG_CRPT;
pub const XCN_OID_DSALG_HASH = CERTENROLL_OBJECTID.XCN_OID_DSALG_HASH;
pub const XCN_OID_DSALG_SIGN = CERTENROLL_OBJECTID.XCN_OID_DSALG_SIGN;
pub const XCN_OID_DSALG_RSA = CERTENROLL_OBJECTID.XCN_OID_DSALG_RSA;
pub const XCN_OID_OIW = CERTENROLL_OBJECTID.XCN_OID_OIW;
pub const XCN_OID_OIWSEC = CERTENROLL_OBJECTID.XCN_OID_OIWSEC;
pub const XCN_OID_OIWSEC_md4RSA = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_md4RSA;
pub const XCN_OID_OIWSEC_md5RSA = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_md5RSA;
pub const XCN_OID_OIWSEC_md4RSA2 = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_md4RSA2;
pub const XCN_OID_OIWSEC_desECB = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_desECB;
pub const XCN_OID_OIWSEC_desCBC = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_desCBC;
pub const XCN_OID_OIWSEC_desOFB = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_desOFB;
pub const XCN_OID_OIWSEC_desCFB = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_desCFB;
pub const XCN_OID_OIWSEC_desMAC = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_desMAC;
pub const XCN_OID_OIWSEC_rsaSign = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_rsaSign;
pub const XCN_OID_OIWSEC_dsa = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_dsa;
pub const XCN_OID_OIWSEC_shaDSA = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_shaDSA;
pub const XCN_OID_OIWSEC_mdc2RSA = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_mdc2RSA;
pub const XCN_OID_OIWSEC_shaRSA = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_shaRSA;
pub const XCN_OID_OIWSEC_dhCommMod = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_dhCommMod;
pub const XCN_OID_OIWSEC_desEDE = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_desEDE;
pub const XCN_OID_OIWSEC_sha = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_sha;
pub const XCN_OID_OIWSEC_mdc2 = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_mdc2;
pub const XCN_OID_OIWSEC_dsaComm = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_dsaComm;
pub const XCN_OID_OIWSEC_dsaCommSHA = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_dsaCommSHA;
pub const XCN_OID_OIWSEC_rsaXchg = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_rsaXchg;
pub const XCN_OID_OIWSEC_keyHashSeal = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_keyHashSeal;
pub const XCN_OID_OIWSEC_md2RSASign = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_md2RSASign;
pub const XCN_OID_OIWSEC_md5RSASign = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_md5RSASign;
pub const XCN_OID_OIWSEC_sha1 = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_sha1;
pub const XCN_OID_OIWSEC_dsaSHA1 = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_dsaSHA1;
pub const XCN_OID_OIWSEC_dsaCommSHA1 = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_dsaCommSHA1;
pub const XCN_OID_OIWSEC_sha1RSASign = CERTENROLL_OBJECTID.XCN_OID_OIWSEC_sha1RSASign;
pub const XCN_OID_OIWDIR = CERTENROLL_OBJECTID.XCN_OID_OIWDIR;
pub const XCN_OID_OIWDIR_CRPT = CERTENROLL_OBJECTID.XCN_OID_OIWDIR_CRPT;
pub const XCN_OID_OIWDIR_HASH = CERTENROLL_OBJECTID.XCN_OID_OIWDIR_HASH;
pub const XCN_OID_OIWDIR_SIGN = CERTENROLL_OBJECTID.XCN_OID_OIWDIR_SIGN;
pub const XCN_OID_OIWDIR_md2 = CERTENROLL_OBJECTID.XCN_OID_OIWDIR_md2;
pub const XCN_OID_OIWDIR_md2RSA = CERTENROLL_OBJECTID.XCN_OID_OIWDIR_md2RSA;
pub const XCN_OID_INFOSEC = CERTENROLL_OBJECTID.XCN_OID_INFOSEC;
pub const XCN_OID_INFOSEC_sdnsSignature = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_sdnsSignature;
pub const XCN_OID_INFOSEC_mosaicSignature = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_mosaicSignature;
pub const XCN_OID_INFOSEC_sdnsConfidentiality = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_sdnsConfidentiality;
pub const XCN_OID_INFOSEC_mosaicConfidentiality = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_mosaicConfidentiality;
pub const XCN_OID_INFOSEC_sdnsIntegrity = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_sdnsIntegrity;
pub const XCN_OID_INFOSEC_mosaicIntegrity = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_mosaicIntegrity;
pub const XCN_OID_INFOSEC_sdnsTokenProtection = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_sdnsTokenProtection;
pub const XCN_OID_INFOSEC_mosaicTokenProtection = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_mosaicTokenProtection;
pub const XCN_OID_INFOSEC_sdnsKeyManagement = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_sdnsKeyManagement;
pub const XCN_OID_INFOSEC_mosaicKeyManagement = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_mosaicKeyManagement;
pub const XCN_OID_INFOSEC_sdnsKMandSig = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_sdnsKMandSig;
pub const XCN_OID_INFOSEC_mosaicKMandSig = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_mosaicKMandSig;
pub const XCN_OID_INFOSEC_SuiteASignature = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_SuiteASignature;
pub const XCN_OID_INFOSEC_SuiteAConfidentiality = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_SuiteAConfidentiality;
pub const XCN_OID_INFOSEC_SuiteAIntegrity = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_SuiteAIntegrity;
pub const XCN_OID_INFOSEC_SuiteATokenProtection = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_SuiteATokenProtection;
pub const XCN_OID_INFOSEC_SuiteAKeyManagement = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_SuiteAKeyManagement;
pub const XCN_OID_INFOSEC_SuiteAKMandSig = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_SuiteAKMandSig;
pub const XCN_OID_INFOSEC_mosaicUpdatedSig = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_mosaicUpdatedSig;
pub const XCN_OID_INFOSEC_mosaicKMandUpdSig = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_mosaicKMandUpdSig;
pub const XCN_OID_INFOSEC_mosaicUpdatedInteg = CERTENROLL_OBJECTID.XCN_OID_INFOSEC_mosaicUpdatedInteg;
pub const XCN_OID_COMMON_NAME = CERTENROLL_OBJECTID.XCN_OID_COMMON_NAME;
pub const XCN_OID_SUR_NAME = CERTENROLL_OBJECTID.XCN_OID_SUR_NAME;
pub const XCN_OID_DEVICE_SERIAL_NUMBER = CERTENROLL_OBJECTID.XCN_OID_DEVICE_SERIAL_NUMBER;
pub const XCN_OID_COUNTRY_NAME = CERTENROLL_OBJECTID.XCN_OID_COUNTRY_NAME;
pub const XCN_OID_LOCALITY_NAME = CERTENROLL_OBJECTID.XCN_OID_LOCALITY_NAME;
pub const XCN_OID_STATE_OR_PROVINCE_NAME = CERTENROLL_OBJECTID.XCN_OID_STATE_OR_PROVINCE_NAME;
pub const XCN_OID_STREET_ADDRESS = CERTENROLL_OBJECTID.XCN_OID_STREET_ADDRESS;
pub const XCN_OID_ORGANIZATION_NAME = CERTENROLL_OBJECTID.XCN_OID_ORGANIZATION_NAME;
pub const XCN_OID_ORGANIZATIONAL_UNIT_NAME = CERTENROLL_OBJECTID.XCN_OID_ORGANIZATIONAL_UNIT_NAME;
pub const XCN_OID_TITLE = CERTENROLL_OBJECTID.XCN_OID_TITLE;
pub const XCN_OID_DESCRIPTION = CERTENROLL_OBJECTID.XCN_OID_DESCRIPTION;
pub const XCN_OID_SEARCH_GUIDE = CERTENROLL_OBJECTID.XCN_OID_SEARCH_GUIDE;
pub const XCN_OID_BUSINESS_CATEGORY = CERTENROLL_OBJECTID.XCN_OID_BUSINESS_CATEGORY;
pub const XCN_OID_POSTAL_ADDRESS = CERTENROLL_OBJECTID.XCN_OID_POSTAL_ADDRESS;
pub const XCN_OID_POSTAL_CODE = CERTENROLL_OBJECTID.XCN_OID_POSTAL_CODE;
pub const XCN_OID_POST_OFFICE_BOX = CERTENROLL_OBJECTID.XCN_OID_POST_OFFICE_BOX;
pub const XCN_OID_PHYSICAL_DELIVERY_OFFICE_NAME = CERTENROLL_OBJECTID.XCN_OID_PHYSICAL_DELIVERY_OFFICE_NAME;
pub const XCN_OID_TELEPHONE_NUMBER = CERTENROLL_OBJECTID.XCN_OID_TELEPHONE_NUMBER;
pub const XCN_OID_TELEX_NUMBER = CERTENROLL_OBJECTID.XCN_OID_TELEX_NUMBER;
pub const XCN_OID_TELETEXT_TERMINAL_IDENTIFIER = CERTENROLL_OBJECTID.XCN_OID_TELETEXT_TERMINAL_IDENTIFIER;
pub const XCN_OID_FACSIMILE_TELEPHONE_NUMBER = CERTENROLL_OBJECTID.XCN_OID_FACSIMILE_TELEPHONE_NUMBER;
pub const XCN_OID_X21_ADDRESS = CERTENROLL_OBJECTID.XCN_OID_X21_ADDRESS;
pub const XCN_OID_INTERNATIONAL_ISDN_NUMBER = CERTENROLL_OBJECTID.XCN_OID_INTERNATIONAL_ISDN_NUMBER;
pub const XCN_OID_REGISTERED_ADDRESS = CERTENROLL_OBJECTID.XCN_OID_REGISTERED_ADDRESS;
pub const XCN_OID_DESTINATION_INDICATOR = CERTENROLL_OBJECTID.XCN_OID_DESTINATION_INDICATOR;
pub const XCN_OID_PREFERRED_DELIVERY_METHOD = CERTENROLL_OBJECTID.XCN_OID_PREFERRED_DELIVERY_METHOD;
pub const XCN_OID_PRESENTATION_ADDRESS = CERTENROLL_OBJECTID.XCN_OID_PRESENTATION_ADDRESS;
pub const XCN_OID_SUPPORTED_APPLICATION_CONTEXT = CERTENROLL_OBJECTID.XCN_OID_SUPPORTED_APPLICATION_CONTEXT;
pub const XCN_OID_MEMBER = CERTENROLL_OBJECTID.XCN_OID_MEMBER;
pub const XCN_OID_OWNER = CERTENROLL_OBJECTID.XCN_OID_OWNER;
pub const XCN_OID_ROLE_OCCUPANT = CERTENROLL_OBJECTID.XCN_OID_ROLE_OCCUPANT;
pub const XCN_OID_SEE_ALSO = CERTENROLL_OBJECTID.XCN_OID_SEE_ALSO;
pub const XCN_OID_USER_PASSWORD = CERTENROLL_OBJECTID.XCN_OID_USER_PASSWORD;
pub const XCN_OID_USER_CERTIFICATE = CERTENROLL_OBJECTID.XCN_OID_USER_CERTIFICATE;
pub const XCN_OID_CA_CERTIFICATE = CERTENROLL_OBJECTID.XCN_OID_CA_CERTIFICATE;
pub const XCN_OID_AUTHORITY_REVOCATION_LIST = CERTENROLL_OBJECTID.XCN_OID_AUTHORITY_REVOCATION_LIST;
pub const XCN_OID_CERTIFICATE_REVOCATION_LIST = CERTENROLL_OBJECTID.XCN_OID_CERTIFICATE_REVOCATION_LIST;
pub const XCN_OID_CROSS_CERTIFICATE_PAIR = CERTENROLL_OBJECTID.XCN_OID_CROSS_CERTIFICATE_PAIR;
pub const XCN_OID_GIVEN_NAME = CERTENROLL_OBJECTID.XCN_OID_GIVEN_NAME;
pub const XCN_OID_INITIALS = CERTENROLL_OBJECTID.XCN_OID_INITIALS;
pub const XCN_OID_DN_QUALIFIER = CERTENROLL_OBJECTID.XCN_OID_DN_QUALIFIER;
pub const XCN_OID_DOMAIN_COMPONENT = CERTENROLL_OBJECTID.XCN_OID_DOMAIN_COMPONENT;
pub const XCN_OID_PKCS_12_FRIENDLY_NAME_ATTR = CERTENROLL_OBJECTID.XCN_OID_PKCS_12_FRIENDLY_NAME_ATTR;
pub const XCN_OID_PKCS_12_LOCAL_KEY_ID = CERTENROLL_OBJECTID.XCN_OID_PKCS_12_LOCAL_KEY_ID;
pub const XCN_OID_PKCS_12_KEY_PROVIDER_NAME_ATTR = CERTENROLL_OBJECTID.XCN_OID_PKCS_12_KEY_PROVIDER_NAME_ATTR;
pub const XCN_OID_LOCAL_MACHINE_KEYSET = CERTENROLL_OBJECTID.XCN_OID_LOCAL_MACHINE_KEYSET;
pub const XCN_OID_PKCS_12_EXTENDED_ATTRIBUTES = CERTENROLL_OBJECTID.XCN_OID_PKCS_12_EXTENDED_ATTRIBUTES;
pub const XCN_OID_KEYID_RDN = CERTENROLL_OBJECTID.XCN_OID_KEYID_RDN;
pub const XCN_OID_AUTHORITY_KEY_IDENTIFIER = CERTENROLL_OBJECTID.XCN_OID_AUTHORITY_KEY_IDENTIFIER;
pub const XCN_OID_KEY_ATTRIBUTES = CERTENROLL_OBJECTID.XCN_OID_KEY_ATTRIBUTES;
pub const XCN_OID_CERT_POLICIES_95 = CERTENROLL_OBJECTID.XCN_OID_CERT_POLICIES_95;
pub const XCN_OID_KEY_USAGE_RESTRICTION = CERTENROLL_OBJECTID.XCN_OID_KEY_USAGE_RESTRICTION;
pub const XCN_OID_SUBJECT_ALT_NAME = CERTENROLL_OBJECTID.XCN_OID_SUBJECT_ALT_NAME;
pub const XCN_OID_ISSUER_ALT_NAME = CERTENROLL_OBJECTID.XCN_OID_ISSUER_ALT_NAME;
pub const XCN_OID_BASIC_CONSTRAINTS = CERTENROLL_OBJECTID.XCN_OID_BASIC_CONSTRAINTS;
pub const XCN_OID_KEY_USAGE = CERTENROLL_OBJECTID.XCN_OID_KEY_USAGE;
pub const XCN_OID_PRIVATEKEY_USAGE_PERIOD = CERTENROLL_OBJECTID.XCN_OID_PRIVATEKEY_USAGE_PERIOD;
pub const XCN_OID_BASIC_CONSTRAINTS2 = CERTENROLL_OBJECTID.XCN_OID_BASIC_CONSTRAINTS2;
pub const XCN_OID_CERT_POLICIES = CERTENROLL_OBJECTID.XCN_OID_CERT_POLICIES;
pub const XCN_OID_ANY_CERT_POLICY = CERTENROLL_OBJECTID.XCN_OID_ANY_CERT_POLICY;
pub const XCN_OID_AUTHORITY_KEY_IDENTIFIER2 = CERTENROLL_OBJECTID.XCN_OID_AUTHORITY_KEY_IDENTIFIER2;
pub const XCN_OID_SUBJECT_KEY_IDENTIFIER = CERTENROLL_OBJECTID.XCN_OID_SUBJECT_KEY_IDENTIFIER;
pub const XCN_OID_SUBJECT_ALT_NAME2 = CERTENROLL_OBJECTID.XCN_OID_SUBJECT_ALT_NAME2;
pub const XCN_OID_ISSUER_ALT_NAME2 = CERTENROLL_OBJECTID.XCN_OID_ISSUER_ALT_NAME2;
pub const XCN_OID_CRL_REASON_CODE = CERTENROLL_OBJECTID.XCN_OID_CRL_REASON_CODE;
pub const XCN_OID_REASON_CODE_HOLD = CERTENROLL_OBJECTID.XCN_OID_REASON_CODE_HOLD;
pub const XCN_OID_CRL_DIST_POINTS = CERTENROLL_OBJECTID.XCN_OID_CRL_DIST_POINTS;
pub const XCN_OID_ENHANCED_KEY_USAGE = CERTENROLL_OBJECTID.XCN_OID_ENHANCED_KEY_USAGE;
pub const XCN_OID_CRL_NUMBER = CERTENROLL_OBJECTID.XCN_OID_CRL_NUMBER;
pub const XCN_OID_DELTA_CRL_INDICATOR = CERTENROLL_OBJECTID.XCN_OID_DELTA_CRL_INDICATOR;
pub const XCN_OID_ISSUING_DIST_POINT = CERTENROLL_OBJECTID.XCN_OID_ISSUING_DIST_POINT;
pub const XCN_OID_FRESHEST_CRL = CERTENROLL_OBJECTID.XCN_OID_FRESHEST_CRL;
pub const XCN_OID_NAME_CONSTRAINTS = CERTENROLL_OBJECTID.XCN_OID_NAME_CONSTRAINTS;
pub const XCN_OID_POLICY_MAPPINGS = CERTENROLL_OBJECTID.XCN_OID_POLICY_MAPPINGS;
pub const XCN_OID_LEGACY_POLICY_MAPPINGS = CERTENROLL_OBJECTID.XCN_OID_LEGACY_POLICY_MAPPINGS;
pub const XCN_OID_POLICY_CONSTRAINTS = CERTENROLL_OBJECTID.XCN_OID_POLICY_CONSTRAINTS;
pub const XCN_OID_RENEWAL_CERTIFICATE = CERTENROLL_OBJECTID.XCN_OID_RENEWAL_CERTIFICATE;
pub const XCN_OID_ENROLLMENT_NAME_VALUE_PAIR = CERTENROLL_OBJECTID.XCN_OID_ENROLLMENT_NAME_VALUE_PAIR;
pub const XCN_OID_ENROLLMENT_CSP_PROVIDER = CERTENROLL_OBJECTID.XCN_OID_ENROLLMENT_CSP_PROVIDER;
pub const XCN_OID_OS_VERSION = CERTENROLL_OBJECTID.XCN_OID_OS_VERSION;
pub const XCN_OID_ENROLLMENT_AGENT = CERTENROLL_OBJECTID.XCN_OID_ENROLLMENT_AGENT;
pub const XCN_OID_PKIX = CERTENROLL_OBJECTID.XCN_OID_PKIX;
pub const XCN_OID_PKIX_PE = CERTENROLL_OBJECTID.XCN_OID_PKIX_PE;
pub const XCN_OID_AUTHORITY_INFO_ACCESS = CERTENROLL_OBJECTID.XCN_OID_AUTHORITY_INFO_ACCESS;
pub const XCN_OID_BIOMETRIC_EXT = CERTENROLL_OBJECTID.XCN_OID_BIOMETRIC_EXT;
pub const XCN_OID_LOGOTYPE_EXT = CERTENROLL_OBJECTID.XCN_OID_LOGOTYPE_EXT;
pub const XCN_OID_CERT_EXTENSIONS = CERTENROLL_OBJECTID.XCN_OID_CERT_EXTENSIONS;
pub const XCN_OID_NEXT_UPDATE_LOCATION = CERTENROLL_OBJECTID.XCN_OID_NEXT_UPDATE_LOCATION;
pub const XCN_OID_REMOVE_CERTIFICATE = CERTENROLL_OBJECTID.XCN_OID_REMOVE_CERTIFICATE;
pub const XCN_OID_CROSS_CERT_DIST_POINTS = CERTENROLL_OBJECTID.XCN_OID_CROSS_CERT_DIST_POINTS;
pub const XCN_OID_CTL = CERTENROLL_OBJECTID.XCN_OID_CTL;
pub const XCN_OID_SORTED_CTL = CERTENROLL_OBJECTID.XCN_OID_SORTED_CTL;
pub const XCN_OID_SERIALIZED = CERTENROLL_OBJECTID.XCN_OID_SERIALIZED;
pub const XCN_OID_NT_PRINCIPAL_NAME = CERTENROLL_OBJECTID.XCN_OID_NT_PRINCIPAL_NAME;
pub const XCN_OID_PRODUCT_UPDATE = CERTENROLL_OBJECTID.XCN_OID_PRODUCT_UPDATE;
pub const XCN_OID_ANY_APPLICATION_POLICY = CERTENROLL_OBJECTID.XCN_OID_ANY_APPLICATION_POLICY;
pub const XCN_OID_AUTO_ENROLL_CTL_USAGE = CERTENROLL_OBJECTID.XCN_OID_AUTO_ENROLL_CTL_USAGE;
pub const XCN_OID_ENROLL_CERTTYPE_EXTENSION = CERTENROLL_OBJECTID.XCN_OID_ENROLL_CERTTYPE_EXTENSION;
pub const XCN_OID_CERT_MANIFOLD = CERTENROLL_OBJECTID.XCN_OID_CERT_MANIFOLD;
pub const XCN_OID_CERTSRV_CA_VERSION = CERTENROLL_OBJECTID.XCN_OID_CERTSRV_CA_VERSION;
pub const XCN_OID_CERTSRV_PREVIOUS_CERT_HASH = CERTENROLL_OBJECTID.XCN_OID_CERTSRV_PREVIOUS_CERT_HASH;
pub const XCN_OID_CRL_VIRTUAL_BASE = CERTENROLL_OBJECTID.XCN_OID_CRL_VIRTUAL_BASE;
pub const XCN_OID_CRL_NEXT_PUBLISH = CERTENROLL_OBJECTID.XCN_OID_CRL_NEXT_PUBLISH;
pub const XCN_OID_KP_CA_EXCHANGE = CERTENROLL_OBJECTID.XCN_OID_KP_CA_EXCHANGE;
pub const XCN_OID_KP_KEY_RECOVERY_AGENT = CERTENROLL_OBJECTID.XCN_OID_KP_KEY_RECOVERY_AGENT;
pub const XCN_OID_CERTIFICATE_TEMPLATE = CERTENROLL_OBJECTID.XCN_OID_CERTIFICATE_TEMPLATE;
pub const XCN_OID_ENTERPRISE_OID_ROOT = CERTENROLL_OBJECTID.XCN_OID_ENTERPRISE_OID_ROOT;
pub const XCN_OID_RDN_DUMMY_SIGNER = CERTENROLL_OBJECTID.XCN_OID_RDN_DUMMY_SIGNER;
pub const XCN_OID_APPLICATION_CERT_POLICIES = CERTENROLL_OBJECTID.XCN_OID_APPLICATION_CERT_POLICIES;
pub const XCN_OID_APPLICATION_POLICY_MAPPINGS = CERTENROLL_OBJECTID.XCN_OID_APPLICATION_POLICY_MAPPINGS;
pub const XCN_OID_APPLICATION_POLICY_CONSTRAINTS = CERTENROLL_OBJECTID.XCN_OID_APPLICATION_POLICY_CONSTRAINTS;
pub const XCN_OID_ARCHIVED_KEY_ATTR = CERTENROLL_OBJECTID.XCN_OID_ARCHIVED_KEY_ATTR;
pub const XCN_OID_CRL_SELF_CDP = CERTENROLL_OBJECTID.XCN_OID_CRL_SELF_CDP;
pub const XCN_OID_REQUIRE_CERT_CHAIN_POLICY = CERTENROLL_OBJECTID.XCN_OID_REQUIRE_CERT_CHAIN_POLICY;
pub const XCN_OID_ARCHIVED_KEY_CERT_HASH = CERTENROLL_OBJECTID.XCN_OID_ARCHIVED_KEY_CERT_HASH;
pub const XCN_OID_ISSUED_CERT_HASH = CERTENROLL_OBJECTID.XCN_OID_ISSUED_CERT_HASH;
pub const XCN_OID_DS_EMAIL_REPLICATION = CERTENROLL_OBJECTID.XCN_OID_DS_EMAIL_REPLICATION;
pub const XCN_OID_REQUEST_CLIENT_INFO = CERTENROLL_OBJECTID.XCN_OID_REQUEST_CLIENT_INFO;
pub const XCN_OID_ENCRYPTED_KEY_HASH = CERTENROLL_OBJECTID.XCN_OID_ENCRYPTED_KEY_HASH;
pub const XCN_OID_CERTSRV_CROSSCA_VERSION = CERTENROLL_OBJECTID.XCN_OID_CERTSRV_CROSSCA_VERSION;
pub const XCN_OID_NTDS_REPLICATION = CERTENROLL_OBJECTID.XCN_OID_NTDS_REPLICATION;
pub const XCN_OID_SUBJECT_DIR_ATTRS = CERTENROLL_OBJECTID.XCN_OID_SUBJECT_DIR_ATTRS;
pub const XCN_OID_PKIX_KP = CERTENROLL_OBJECTID.XCN_OID_PKIX_KP;
pub const XCN_OID_PKIX_KP_SERVER_AUTH = CERTENROLL_OBJECTID.XCN_OID_PKIX_KP_SERVER_AUTH;
pub const XCN_OID_PKIX_KP_CLIENT_AUTH = CERTENROLL_OBJECTID.XCN_OID_PKIX_KP_CLIENT_AUTH;
pub const XCN_OID_PKIX_KP_CODE_SIGNING = CERTENROLL_OBJECTID.XCN_OID_PKIX_KP_CODE_SIGNING;
pub const XCN_OID_PKIX_KP_EMAIL_PROTECTION = CERTENROLL_OBJECTID.XCN_OID_PKIX_KP_EMAIL_PROTECTION;
pub const XCN_OID_PKIX_KP_IPSEC_END_SYSTEM = CERTENROLL_OBJECTID.XCN_OID_PKIX_KP_IPSEC_END_SYSTEM;
pub const XCN_OID_PKIX_KP_IPSEC_TUNNEL = CERTENROLL_OBJECTID.XCN_OID_PKIX_KP_IPSEC_TUNNEL;
pub const XCN_OID_PKIX_KP_IPSEC_USER = CERTENROLL_OBJECTID.XCN_OID_PKIX_KP_IPSEC_USER;
pub const XCN_OID_PKIX_KP_TIMESTAMP_SIGNING = CERTENROLL_OBJECTID.XCN_OID_PKIX_KP_TIMESTAMP_SIGNING;
pub const XCN_OID_PKIX_KP_OCSP_SIGNING = CERTENROLL_OBJECTID.XCN_OID_PKIX_KP_OCSP_SIGNING;
pub const XCN_OID_PKIX_OCSP_NOCHECK = CERTENROLL_OBJECTID.XCN_OID_PKIX_OCSP_NOCHECK;
pub const XCN_OID_IPSEC_KP_IKE_INTERMEDIATE = CERTENROLL_OBJECTID.XCN_OID_IPSEC_KP_IKE_INTERMEDIATE;
pub const XCN_OID_KP_CTL_USAGE_SIGNING = CERTENROLL_OBJECTID.XCN_OID_KP_CTL_USAGE_SIGNING;
pub const XCN_OID_KP_TIME_STAMP_SIGNING = CERTENROLL_OBJECTID.XCN_OID_KP_TIME_STAMP_SIGNING;
pub const XCN_OID_SERVER_GATED_CRYPTO = CERTENROLL_OBJECTID.XCN_OID_SERVER_GATED_CRYPTO;
pub const XCN_OID_SGC_NETSCAPE = CERTENROLL_OBJECTID.XCN_OID_SGC_NETSCAPE;
pub const XCN_OID_KP_EFS = CERTENROLL_OBJECTID.XCN_OID_KP_EFS;
pub const XCN_OID_EFS_RECOVERY = CERTENROLL_OBJECTID.XCN_OID_EFS_RECOVERY;
pub const XCN_OID_WHQL_CRYPTO = CERTENROLL_OBJECTID.XCN_OID_WHQL_CRYPTO;
pub const XCN_OID_NT5_CRYPTO = CERTENROLL_OBJECTID.XCN_OID_NT5_CRYPTO;
pub const XCN_OID_OEM_WHQL_CRYPTO = CERTENROLL_OBJECTID.XCN_OID_OEM_WHQL_CRYPTO;
pub const XCN_OID_EMBEDDED_NT_CRYPTO = CERTENROLL_OBJECTID.XCN_OID_EMBEDDED_NT_CRYPTO;
pub const XCN_OID_ROOT_LIST_SIGNER = CERTENROLL_OBJECTID.XCN_OID_ROOT_LIST_SIGNER;
pub const XCN_OID_KP_QUALIFIED_SUBORDINATION = CERTENROLL_OBJECTID.XCN_OID_KP_QUALIFIED_SUBORDINATION;
pub const XCN_OID_KP_KEY_RECOVERY = CERTENROLL_OBJECTID.XCN_OID_KP_KEY_RECOVERY;
pub const XCN_OID_KP_DOCUMENT_SIGNING = CERTENROLL_OBJECTID.XCN_OID_KP_DOCUMENT_SIGNING;
pub const XCN_OID_KP_LIFETIME_SIGNING = CERTENROLL_OBJECTID.XCN_OID_KP_LIFETIME_SIGNING;
pub const XCN_OID_KP_MOBILE_DEVICE_SOFTWARE = CERTENROLL_OBJECTID.XCN_OID_KP_MOBILE_DEVICE_SOFTWARE;
pub const XCN_OID_KP_SMART_DISPLAY = CERTENROLL_OBJECTID.XCN_OID_KP_SMART_DISPLAY;
pub const XCN_OID_KP_CSP_SIGNATURE = CERTENROLL_OBJECTID.XCN_OID_KP_CSP_SIGNATURE;
pub const XCN_OID_DRM = CERTENROLL_OBJECTID.XCN_OID_DRM;
pub const XCN_OID_DRM_INDIVIDUALIZATION = CERTENROLL_OBJECTID.XCN_OID_DRM_INDIVIDUALIZATION;
pub const XCN_OID_LICENSES = CERTENROLL_OBJECTID.XCN_OID_LICENSES;
pub const XCN_OID_LICENSE_SERVER = CERTENROLL_OBJECTID.XCN_OID_LICENSE_SERVER;
pub const XCN_OID_KP_SMARTCARD_LOGON = CERTENROLL_OBJECTID.XCN_OID_KP_SMARTCARD_LOGON;
pub const XCN_OID_YESNO_TRUST_ATTR = CERTENROLL_OBJECTID.XCN_OID_YESNO_TRUST_ATTR;
pub const XCN_OID_PKIX_POLICY_QUALIFIER_CPS = CERTENROLL_OBJECTID.XCN_OID_PKIX_POLICY_QUALIFIER_CPS;
pub const XCN_OID_PKIX_POLICY_QUALIFIER_USERNOTICE = CERTENROLL_OBJECTID.XCN_OID_PKIX_POLICY_QUALIFIER_USERNOTICE;
pub const XCN_OID_CERT_POLICIES_95_QUALIFIER1 = CERTENROLL_OBJECTID.XCN_OID_CERT_POLICIES_95_QUALIFIER1;
pub const XCN_OID_PKIX_ACC_DESCR = CERTENROLL_OBJECTID.XCN_OID_PKIX_ACC_DESCR;
pub const XCN_OID_PKIX_OCSP = CERTENROLL_OBJECTID.XCN_OID_PKIX_OCSP;
pub const XCN_OID_PKIX_CA_ISSUERS = CERTENROLL_OBJECTID.XCN_OID_PKIX_CA_ISSUERS;
pub const XCN_OID_VERISIGN_PRIVATE_6_9 = CERTENROLL_OBJECTID.XCN_OID_VERISIGN_PRIVATE_6_9;
pub const XCN_OID_VERISIGN_ONSITE_JURISDICTION_HASH = CERTENROLL_OBJECTID.XCN_OID_VERISIGN_ONSITE_JURISDICTION_HASH;
pub const XCN_OID_VERISIGN_BITSTRING_6_13 = CERTENROLL_OBJECTID.XCN_OID_VERISIGN_BITSTRING_6_13;
pub const XCN_OID_VERISIGN_ISS_STRONG_CRYPTO = CERTENROLL_OBJECTID.XCN_OID_VERISIGN_ISS_STRONG_CRYPTO;
pub const XCN_OID_NETSCAPE = CERTENROLL_OBJECTID.XCN_OID_NETSCAPE;
pub const XCN_OID_NETSCAPE_CERT_EXTENSION = CERTENROLL_OBJECTID.XCN_OID_NETSCAPE_CERT_EXTENSION;
pub const XCN_OID_NETSCAPE_CERT_TYPE = CERTENROLL_OBJECTID.XCN_OID_NETSCAPE_CERT_TYPE;
pub const XCN_OID_NETSCAPE_BASE_URL = CERTENROLL_OBJECTID.XCN_OID_NETSCAPE_BASE_URL;
pub const XCN_OID_NETSCAPE_REVOCATION_URL = CERTENROLL_OBJECTID.XCN_OID_NETSCAPE_REVOCATION_URL;
pub const XCN_OID_NETSCAPE_CA_REVOCATION_URL = CERTENROLL_OBJECTID.XCN_OID_NETSCAPE_CA_REVOCATION_URL;
pub const XCN_OID_NETSCAPE_CERT_RENEWAL_URL = CERTENROLL_OBJECTID.XCN_OID_NETSCAPE_CERT_RENEWAL_URL;
pub const XCN_OID_NETSCAPE_CA_POLICY_URL = CERTENROLL_OBJECTID.XCN_OID_NETSCAPE_CA_POLICY_URL;
pub const XCN_OID_NETSCAPE_SSL_SERVER_NAME = CERTENROLL_OBJECTID.XCN_OID_NETSCAPE_SSL_SERVER_NAME;
pub const XCN_OID_NETSCAPE_COMMENT = CERTENROLL_OBJECTID.XCN_OID_NETSCAPE_COMMENT;
pub const XCN_OID_NETSCAPE_DATA_TYPE = CERTENROLL_OBJECTID.XCN_OID_NETSCAPE_DATA_TYPE;
pub const XCN_OID_NETSCAPE_CERT_SEQUENCE = CERTENROLL_OBJECTID.XCN_OID_NETSCAPE_CERT_SEQUENCE;
pub const XCN_OID_CT_PKI_DATA = CERTENROLL_OBJECTID.XCN_OID_CT_PKI_DATA;
pub const XCN_OID_CT_PKI_RESPONSE = CERTENROLL_OBJECTID.XCN_OID_CT_PKI_RESPONSE;
pub const XCN_OID_PKIX_NO_SIGNATURE = CERTENROLL_OBJECTID.XCN_OID_PKIX_NO_SIGNATURE;
pub const XCN_OID_CMC = CERTENROLL_OBJECTID.XCN_OID_CMC;
pub const XCN_OID_CMC_STATUS_INFO = CERTENROLL_OBJECTID.XCN_OID_CMC_STATUS_INFO;
pub const XCN_OID_CMC_IDENTIFICATION = CERTENROLL_OBJECTID.XCN_OID_CMC_IDENTIFICATION;
pub const XCN_OID_CMC_IDENTITY_PROOF = CERTENROLL_OBJECTID.XCN_OID_CMC_IDENTITY_PROOF;
pub const XCN_OID_CMC_DATA_RETURN = CERTENROLL_OBJECTID.XCN_OID_CMC_DATA_RETURN;
pub const XCN_OID_CMC_TRANSACTION_ID = CERTENROLL_OBJECTID.XCN_OID_CMC_TRANSACTION_ID;
pub const XCN_OID_CMC_SENDER_NONCE = CERTENROLL_OBJECTID.XCN_OID_CMC_SENDER_NONCE;
pub const XCN_OID_CMC_RECIPIENT_NONCE = CERTENROLL_OBJECTID.XCN_OID_CMC_RECIPIENT_NONCE;
pub const XCN_OID_CMC_ADD_EXTENSIONS = CERTENROLL_OBJECTID.XCN_OID_CMC_ADD_EXTENSIONS;
pub const XCN_OID_CMC_ENCRYPTED_POP = CERTENROLL_OBJECTID.XCN_OID_CMC_ENCRYPTED_POP;
pub const XCN_OID_CMC_DECRYPTED_POP = CERTENROLL_OBJECTID.XCN_OID_CMC_DECRYPTED_POP;
pub const XCN_OID_CMC_LRA_POP_WITNESS = CERTENROLL_OBJECTID.XCN_OID_CMC_LRA_POP_WITNESS;
pub const XCN_OID_CMC_GET_CERT = CERTENROLL_OBJECTID.XCN_OID_CMC_GET_CERT;
pub const XCN_OID_CMC_GET_CRL = CERTENROLL_OBJECTID.XCN_OID_CMC_GET_CRL;
pub const XCN_OID_CMC_REVOKE_REQUEST = CERTENROLL_OBJECTID.XCN_OID_CMC_REVOKE_REQUEST;
pub const XCN_OID_CMC_REG_INFO = CERTENROLL_OBJECTID.XCN_OID_CMC_REG_INFO;
pub const XCN_OID_CMC_RESPONSE_INFO = CERTENROLL_OBJECTID.XCN_OID_CMC_RESPONSE_INFO;
pub const XCN_OID_CMC_QUERY_PENDING = CERTENROLL_OBJECTID.XCN_OID_CMC_QUERY_PENDING;
pub const XCN_OID_CMC_ID_POP_LINK_RANDOM = CERTENROLL_OBJECTID.XCN_OID_CMC_ID_POP_LINK_RANDOM;
pub const XCN_OID_CMC_ID_POP_LINK_WITNESS = CERTENROLL_OBJECTID.XCN_OID_CMC_ID_POP_LINK_WITNESS;
pub const XCN_OID_CMC_ID_CONFIRM_CERT_ACCEPTANCE = CERTENROLL_OBJECTID.XCN_OID_CMC_ID_CONFIRM_CERT_ACCEPTANCE;
pub const XCN_OID_CMC_ADD_ATTRIBUTES = CERTENROLL_OBJECTID.XCN_OID_CMC_ADD_ATTRIBUTES;
pub const XCN_OID_LOYALTY_OTHER_LOGOTYPE = CERTENROLL_OBJECTID.XCN_OID_LOYALTY_OTHER_LOGOTYPE;
pub const XCN_OID_BACKGROUND_OTHER_LOGOTYPE = CERTENROLL_OBJECTID.XCN_OID_BACKGROUND_OTHER_LOGOTYPE;
pub const XCN_OID_PKIX_OCSP_BASIC_SIGNED_RESPONSE = CERTENROLL_OBJECTID.XCN_OID_PKIX_OCSP_BASIC_SIGNED_RESPONSE;
pub const XCN_OID_PKCS_7_DATA = CERTENROLL_OBJECTID.XCN_OID_PKCS_7_DATA;
pub const XCN_OID_PKCS_7_SIGNED = CERTENROLL_OBJECTID.XCN_OID_PKCS_7_SIGNED;
pub const XCN_OID_PKCS_7_ENVELOPED = CERTENROLL_OBJECTID.XCN_OID_PKCS_7_ENVELOPED;
pub const XCN_OID_PKCS_7_SIGNEDANDENVELOPED = CERTENROLL_OBJECTID.XCN_OID_PKCS_7_SIGNEDANDENVELOPED;
pub const XCN_OID_PKCS_7_DIGESTED = CERTENROLL_OBJECTID.XCN_OID_PKCS_7_DIGESTED;
pub const XCN_OID_PKCS_7_ENCRYPTED = CERTENROLL_OBJECTID.XCN_OID_PKCS_7_ENCRYPTED;
pub const XCN_OID_PKCS_9_CONTENT_TYPE = CERTENROLL_OBJECTID.XCN_OID_PKCS_9_CONTENT_TYPE;
pub const XCN_OID_PKCS_9_MESSAGE_DIGEST = CERTENROLL_OBJECTID.XCN_OID_PKCS_9_MESSAGE_DIGEST;
pub const XCN_OID_CERT_PROP_ID_PREFIX = CERTENROLL_OBJECTID.XCN_OID_CERT_PROP_ID_PREFIX;
pub const XCN_OID_CERT_KEY_IDENTIFIER_PROP_ID = CERTENROLL_OBJECTID.XCN_OID_CERT_KEY_IDENTIFIER_PROP_ID;
pub const XCN_OID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = CERTENROLL_OBJECTID.XCN_OID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID;
pub const XCN_OID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = CERTENROLL_OBJECTID.XCN_OID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID;
pub const XCN_OID_CERT_MD5_HASH_PROP_ID = CERTENROLL_OBJECTID.XCN_OID_CERT_MD5_HASH_PROP_ID;
pub const XCN_OID_RSA_SHA256RSA = CERTENROLL_OBJECTID.XCN_OID_RSA_SHA256RSA;
pub const XCN_OID_RSA_SHA384RSA = CERTENROLL_OBJECTID.XCN_OID_RSA_SHA384RSA;
pub const XCN_OID_RSA_SHA512RSA = CERTENROLL_OBJECTID.XCN_OID_RSA_SHA512RSA;
pub const XCN_OID_NIST_sha256 = CERTENROLL_OBJECTID.XCN_OID_NIST_sha256;
pub const XCN_OID_NIST_sha384 = CERTENROLL_OBJECTID.XCN_OID_NIST_sha384;
pub const XCN_OID_NIST_sha512 = CERTENROLL_OBJECTID.XCN_OID_NIST_sha512;
pub const XCN_OID_RSA_MGF1 = CERTENROLL_OBJECTID.XCN_OID_RSA_MGF1;
pub const XCN_OID_ECC_PUBLIC_KEY = CERTENROLL_OBJECTID.XCN_OID_ECC_PUBLIC_KEY;
pub const XCN_OID_ECDSA_SHA1 = CERTENROLL_OBJECTID.XCN_OID_ECDSA_SHA1;
pub const XCN_OID_ECDSA_SPECIFIED = CERTENROLL_OBJECTID.XCN_OID_ECDSA_SPECIFIED;
pub const XCN_OID_ANY_ENHANCED_KEY_USAGE = CERTENROLL_OBJECTID.XCN_OID_ANY_ENHANCED_KEY_USAGE;
pub const XCN_OID_RSA_SSA_PSS = CERTENROLL_OBJECTID.XCN_OID_RSA_SSA_PSS;
pub const XCN_OID_ATTR_SUPPORTED_ALGORITHMS = CERTENROLL_OBJECTID.XCN_OID_ATTR_SUPPORTED_ALGORITHMS;
pub const XCN_OID_ATTR_TPM_SECURITY_ASSERTIONS = CERTENROLL_OBJECTID.XCN_OID_ATTR_TPM_SECURITY_ASSERTIONS;
pub const XCN_OID_ATTR_TPM_SPECIFICATION = CERTENROLL_OBJECTID.XCN_OID_ATTR_TPM_SPECIFICATION;
pub const XCN_OID_CERT_DISALLOWED_FILETIME_PROP_ID = CERTENROLL_OBJECTID.XCN_OID_CERT_DISALLOWED_FILETIME_PROP_ID;
pub const XCN_OID_CERT_SIGNATURE_HASH_PROP_ID = CERTENROLL_OBJECTID.XCN_OID_CERT_SIGNATURE_HASH_PROP_ID;
pub const XCN_OID_CERT_STRONG_KEY_OS_1 = CERTENROLL_OBJECTID.XCN_OID_CERT_STRONG_KEY_OS_1;
pub const XCN_OID_CERT_STRONG_KEY_OS_CURRENT = CERTENROLL_OBJECTID.XCN_OID_CERT_STRONG_KEY_OS_CURRENT;
pub const XCN_OID_CERT_STRONG_KEY_OS_PREFIX = CERTENROLL_OBJECTID.XCN_OID_CERT_STRONG_KEY_OS_PREFIX;
pub const XCN_OID_CERT_STRONG_SIGN_OS_1 = CERTENROLL_OBJECTID.XCN_OID_CERT_STRONG_SIGN_OS_1;
pub const XCN_OID_CERT_STRONG_SIGN_OS_CURRENT = CERTENROLL_OBJECTID.XCN_OID_CERT_STRONG_SIGN_OS_CURRENT;
pub const XCN_OID_CERT_STRONG_SIGN_OS_PREFIX = CERTENROLL_OBJECTID.XCN_OID_CERT_STRONG_SIGN_OS_PREFIX;
pub const XCN_OID_DH_SINGLE_PASS_STDDH_SHA1_KDF = CERTENROLL_OBJECTID.XCN_OID_DH_SINGLE_PASS_STDDH_SHA1_KDF;
pub const XCN_OID_DH_SINGLE_PASS_STDDH_SHA256_KDF = CERTENROLL_OBJECTID.XCN_OID_DH_SINGLE_PASS_STDDH_SHA256_KDF;
pub const XCN_OID_DH_SINGLE_PASS_STDDH_SHA384_KDF = CERTENROLL_OBJECTID.XCN_OID_DH_SINGLE_PASS_STDDH_SHA384_KDF;
pub const XCN_OID_DISALLOWED_HASH = CERTENROLL_OBJECTID.XCN_OID_DISALLOWED_HASH;
pub const XCN_OID_DISALLOWED_LIST = CERTENROLL_OBJECTID.XCN_OID_DISALLOWED_LIST;
pub const XCN_OID_ECC_CURVE_P256 = CERTENROLL_OBJECTID.XCN_OID_ECC_CURVE_P256;
pub const XCN_OID_ECC_CURVE_P384 = CERTENROLL_OBJECTID.XCN_OID_ECC_CURVE_P384;
pub const XCN_OID_ECC_CURVE_P521 = CERTENROLL_OBJECTID.XCN_OID_ECC_CURVE_P521;
pub const XCN_OID_ECDSA_SHA256 = CERTENROLL_OBJECTID.XCN_OID_ECDSA_SHA256;
pub const XCN_OID_ECDSA_SHA384 = CERTENROLL_OBJECTID.XCN_OID_ECDSA_SHA384;
pub const XCN_OID_ECDSA_SHA512 = CERTENROLL_OBJECTID.XCN_OID_ECDSA_SHA512;
pub const XCN_OID_ENROLL_CAXCHGCERT_HASH = CERTENROLL_OBJECTID.XCN_OID_ENROLL_CAXCHGCERT_HASH;
pub const XCN_OID_ENROLL_EK_INFO = CERTENROLL_OBJECTID.XCN_OID_ENROLL_EK_INFO;
pub const XCN_OID_ENROLL_EKPUB_CHALLENGE = CERTENROLL_OBJECTID.XCN_OID_ENROLL_EKPUB_CHALLENGE;
pub const XCN_OID_ENROLL_EKVERIFYCERT = CERTENROLL_OBJECTID.XCN_OID_ENROLL_EKVERIFYCERT;
pub const XCN_OID_ENROLL_EKVERIFYCREDS = CERTENROLL_OBJECTID.XCN_OID_ENROLL_EKVERIFYCREDS;
pub const XCN_OID_ENROLL_EKVERIFYKEY = CERTENROLL_OBJECTID.XCN_OID_ENROLL_EKVERIFYKEY;
pub const XCN_OID_EV_RDN_COUNTRY = CERTENROLL_OBJECTID.XCN_OID_EV_RDN_COUNTRY;
pub const XCN_OID_EV_RDN_LOCALE = CERTENROLL_OBJECTID.XCN_OID_EV_RDN_LOCALE;
pub const XCN_OID_EV_RDN_STATE_OR_PROVINCE = CERTENROLL_OBJECTID.XCN_OID_EV_RDN_STATE_OR_PROVINCE;
pub const XCN_OID_INHIBIT_ANY_POLICY = CERTENROLL_OBJECTID.XCN_OID_INHIBIT_ANY_POLICY;
pub const XCN_OID_INTERNATIONALIZED_EMAIL_ADDRESS = CERTENROLL_OBJECTID.XCN_OID_INTERNATIONALIZED_EMAIL_ADDRESS;
pub const XCN_OID_KP_KERNEL_MODE_CODE_SIGNING = CERTENROLL_OBJECTID.XCN_OID_KP_KERNEL_MODE_CODE_SIGNING;
pub const XCN_OID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING = CERTENROLL_OBJECTID.XCN_OID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING;
pub const XCN_OID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING = CERTENROLL_OBJECTID.XCN_OID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING;
pub const XCN_OID_KP_TPM_AIK_CERTIFICATE = CERTENROLL_OBJECTID.XCN_OID_KP_TPM_AIK_CERTIFICATE;
pub const XCN_OID_KP_TPM_EK_CERTIFICATE = CERTENROLL_OBJECTID.XCN_OID_KP_TPM_EK_CERTIFICATE;
pub const XCN_OID_KP_TPM_PLATFORM_CERTIFICATE = CERTENROLL_OBJECTID.XCN_OID_KP_TPM_PLATFORM_CERTIFICATE;
pub const XCN_OID_NIST_AES128_CBC = CERTENROLL_OBJECTID.XCN_OID_NIST_AES128_CBC;
pub const XCN_OID_NIST_AES128_WRAP = CERTENROLL_OBJECTID.XCN_OID_NIST_AES128_WRAP;
pub const XCN_OID_NIST_AES192_CBC = CERTENROLL_OBJECTID.XCN_OID_NIST_AES192_CBC;
pub const XCN_OID_NIST_AES192_WRAP = CERTENROLL_OBJECTID.XCN_OID_NIST_AES192_WRAP;
pub const XCN_OID_NIST_AES256_CBC = CERTENROLL_OBJECTID.XCN_OID_NIST_AES256_CBC;
pub const XCN_OID_NIST_AES256_WRAP = CERTENROLL_OBJECTID.XCN_OID_NIST_AES256_WRAP;
pub const XCN_OID_PKCS_12_PbeIds = CERTENROLL_OBJECTID.XCN_OID_PKCS_12_PbeIds;
pub const XCN_OID_PKCS_12_pbeWithSHA1And128BitRC2 = CERTENROLL_OBJECTID.XCN_OID_PKCS_12_pbeWithSHA1And128BitRC2;
pub const XCN_OID_PKCS_12_pbeWithSHA1And128BitRC4 = CERTENROLL_OBJECTID.XCN_OID_PKCS_12_pbeWithSHA1And128BitRC4;
pub const XCN_OID_PKCS_12_pbeWithSHA1And2KeyTripleDES = CERTENROLL_OBJECTID.XCN_OID_PKCS_12_pbeWithSHA1And2KeyTripleDES;
pub const XCN_OID_PKCS_12_pbeWithSHA1And3KeyTripleDES = CERTENROLL_OBJECTID.XCN_OID_PKCS_12_pbeWithSHA1And3KeyTripleDES;
pub const XCN_OID_PKCS_12_pbeWithSHA1And40BitRC2 = CERTENROLL_OBJECTID.XCN_OID_PKCS_12_pbeWithSHA1And40BitRC2;
pub const XCN_OID_PKCS_12_pbeWithSHA1And40BitRC4 = CERTENROLL_OBJECTID.XCN_OID_PKCS_12_pbeWithSHA1And40BitRC4;
pub const XCN_OID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID = CERTENROLL_OBJECTID.XCN_OID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID;
pub const XCN_OID_PKINIT_KP_KDC = CERTENROLL_OBJECTID.XCN_OID_PKINIT_KP_KDC;
pub const XCN_OID_PKIX_CA_REPOSITORY = CERTENROLL_OBJECTID.XCN_OID_PKIX_CA_REPOSITORY;
pub const XCN_OID_PKIX_OCSP_NONCE = CERTENROLL_OBJECTID.XCN_OID_PKIX_OCSP_NONCE;
pub const XCN_OID_PKIX_TIME_STAMPING = CERTENROLL_OBJECTID.XCN_OID_PKIX_TIME_STAMPING;
pub const XCN_OID_QC_EU_COMPLIANCE = CERTENROLL_OBJECTID.XCN_OID_QC_EU_COMPLIANCE;
pub const XCN_OID_QC_SSCD = CERTENROLL_OBJECTID.XCN_OID_QC_SSCD;
pub const XCN_OID_QC_STATEMENTS_EXT = CERTENROLL_OBJECTID.XCN_OID_QC_STATEMENTS_EXT;
pub const XCN_OID_RDN_TPM_MANUFACTURER = CERTENROLL_OBJECTID.XCN_OID_RDN_TPM_MANUFACTURER;
pub const XCN_OID_RDN_TPM_MODEL = CERTENROLL_OBJECTID.XCN_OID_RDN_TPM_MODEL;
pub const XCN_OID_RDN_TPM_VERSION = CERTENROLL_OBJECTID.XCN_OID_RDN_TPM_VERSION;
pub const XCN_OID_REVOKED_LIST_SIGNER = CERTENROLL_OBJECTID.XCN_OID_REVOKED_LIST_SIGNER;
pub const XCN_OID_RFC3161_counterSign = CERTENROLL_OBJECTID.XCN_OID_RFC3161_counterSign;
pub const XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION = CERTENROLL_OBJECTID.XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION;
pub const XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION = CERTENROLL_OBJECTID.XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION;
pub const XCN_OID_ROOT_PROGRAM_FLAGS = CERTENROLL_OBJECTID.XCN_OID_ROOT_PROGRAM_FLAGS;
pub const XCN_OID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL = CERTENROLL_OBJECTID.XCN_OID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL;
pub const XCN_OID_RSA_PSPECIFIED = CERTENROLL_OBJECTID.XCN_OID_RSA_PSPECIFIED;
pub const XCN_OID_RSAES_OAEP = CERTENROLL_OBJECTID.XCN_OID_RSAES_OAEP;
pub const XCN_OID_SUBJECT_INFO_ACCESS = CERTENROLL_OBJECTID.XCN_OID_SUBJECT_INFO_ACCESS;
pub const XCN_OID_TIMESTAMP_TOKEN = CERTENROLL_OBJECTID.XCN_OID_TIMESTAMP_TOKEN;
pub const XCN_OID_ENROLL_SCEP_ERROR = CERTENROLL_OBJECTID.XCN_OID_ENROLL_SCEP_ERROR;
pub const XCN_OIDVerisign_MessageType = CERTENROLL_OBJECTID.XCN_OIDVerisign_MessageType;
pub const XCN_OIDVerisign_PkiStatus = CERTENROLL_OBJECTID.XCN_OIDVerisign_PkiStatus;
pub const XCN_OIDVerisign_FailInfo = CERTENROLL_OBJECTID.XCN_OIDVerisign_FailInfo;
pub const XCN_OIDVerisign_SenderNonce = CERTENROLL_OBJECTID.XCN_OIDVerisign_SenderNonce;
pub const XCN_OIDVerisign_RecipientNonce = CERTENROLL_OBJECTID.XCN_OIDVerisign_RecipientNonce;
pub const XCN_OIDVerisign_TransactionID = CERTENROLL_OBJECTID.XCN_OIDVerisign_TransactionID;
pub const XCN_OID_ENROLL_ATTESTATION_CHALLENGE = CERTENROLL_OBJECTID.XCN_OID_ENROLL_ATTESTATION_CHALLENGE;
pub const XCN_OID_ENROLL_ATTESTATION_STATEMENT = CERTENROLL_OBJECTID.XCN_OID_ENROLL_ATTESTATION_STATEMENT;
pub const XCN_OID_ENROLL_ENCRYPTION_ALGORITHM = CERTENROLL_OBJECTID.XCN_OID_ENROLL_ENCRYPTION_ALGORITHM;
pub const XCN_OID_ENROLL_KSP_NAME = CERTENROLL_OBJECTID.XCN_OID_ENROLL_KSP_NAME;

pub const WebSecurityLevel = extern enum(i32) {
    LevelUnsafe = 0,
    LevelSafe = 1,
};
pub const LevelUnsafe = WebSecurityLevel.LevelUnsafe;
pub const LevelSafe = WebSecurityLevel.LevelSafe;

pub const EncodingType = extern enum(i32) {
    XCN_CRYPT_STRING_BASE64HEADER = 0,
    XCN_CRYPT_STRING_BASE64 = 1,
    XCN_CRYPT_STRING_BINARY = 2,
    XCN_CRYPT_STRING_BASE64REQUESTHEADER = 3,
    XCN_CRYPT_STRING_HEX = 4,
    XCN_CRYPT_STRING_HEXASCII = 5,
    XCN_CRYPT_STRING_BASE64_ANY = 6,
    XCN_CRYPT_STRING_ANY = 7,
    XCN_CRYPT_STRING_HEX_ANY = 8,
    XCN_CRYPT_STRING_BASE64X509CRLHEADER = 9,
    XCN_CRYPT_STRING_HEXADDR = 10,
    XCN_CRYPT_STRING_HEXASCIIADDR = 11,
    XCN_CRYPT_STRING_HEXRAW = 12,
    XCN_CRYPT_STRING_BASE64URI = 13,
    XCN_CRYPT_STRING_ENCODEMASK = 255,
    XCN_CRYPT_STRING_CHAIN = 256,
    XCN_CRYPT_STRING_TEXT = 512,
    XCN_CRYPT_STRING_PERCENTESCAPE = 134217728,
    XCN_CRYPT_STRING_HASHDATA = 268435456,
    XCN_CRYPT_STRING_STRICT = 536870912,
    XCN_CRYPT_STRING_NOCRLF = 1073741824,
    XCN_CRYPT_STRING_NOCR = -2147483648,
};
pub const XCN_CRYPT_STRING_BASE64HEADER = EncodingType.XCN_CRYPT_STRING_BASE64HEADER;
pub const XCN_CRYPT_STRING_BASE64 = EncodingType.XCN_CRYPT_STRING_BASE64;
pub const XCN_CRYPT_STRING_BINARY = EncodingType.XCN_CRYPT_STRING_BINARY;
pub const XCN_CRYPT_STRING_BASE64REQUESTHEADER = EncodingType.XCN_CRYPT_STRING_BASE64REQUESTHEADER;
pub const XCN_CRYPT_STRING_HEX = EncodingType.XCN_CRYPT_STRING_HEX;
pub const XCN_CRYPT_STRING_HEXASCII = EncodingType.XCN_CRYPT_STRING_HEXASCII;
pub const XCN_CRYPT_STRING_BASE64_ANY = EncodingType.XCN_CRYPT_STRING_BASE64_ANY;
pub const XCN_CRYPT_STRING_ANY = EncodingType.XCN_CRYPT_STRING_ANY;
pub const XCN_CRYPT_STRING_HEX_ANY = EncodingType.XCN_CRYPT_STRING_HEX_ANY;
pub const XCN_CRYPT_STRING_BASE64X509CRLHEADER = EncodingType.XCN_CRYPT_STRING_BASE64X509CRLHEADER;
pub const XCN_CRYPT_STRING_HEXADDR = EncodingType.XCN_CRYPT_STRING_HEXADDR;
pub const XCN_CRYPT_STRING_HEXASCIIADDR = EncodingType.XCN_CRYPT_STRING_HEXASCIIADDR;
pub const XCN_CRYPT_STRING_HEXRAW = EncodingType.XCN_CRYPT_STRING_HEXRAW;
pub const XCN_CRYPT_STRING_BASE64URI = EncodingType.XCN_CRYPT_STRING_BASE64URI;
pub const XCN_CRYPT_STRING_ENCODEMASK = EncodingType.XCN_CRYPT_STRING_ENCODEMASK;
pub const XCN_CRYPT_STRING_CHAIN = EncodingType.XCN_CRYPT_STRING_CHAIN;
pub const XCN_CRYPT_STRING_TEXT = EncodingType.XCN_CRYPT_STRING_TEXT;
pub const XCN_CRYPT_STRING_PERCENTESCAPE = EncodingType.XCN_CRYPT_STRING_PERCENTESCAPE;
pub const XCN_CRYPT_STRING_HASHDATA = EncodingType.XCN_CRYPT_STRING_HASHDATA;
pub const XCN_CRYPT_STRING_STRICT = EncodingType.XCN_CRYPT_STRING_STRICT;
pub const XCN_CRYPT_STRING_NOCRLF = EncodingType.XCN_CRYPT_STRING_NOCRLF;
pub const XCN_CRYPT_STRING_NOCR = EncodingType.XCN_CRYPT_STRING_NOCR;

pub const PFXExportOptions = extern enum(i32) {
    PFXExportEEOnly = 0,
    PFXExportChainNoRoot = 1,
    PFXExportChainWithRoot = 2,
};
pub const PFXExportEEOnly = PFXExportOptions.PFXExportEEOnly;
pub const PFXExportChainNoRoot = PFXExportOptions.PFXExportChainNoRoot;
pub const PFXExportChainWithRoot = PFXExportOptions.PFXExportChainWithRoot;

pub const ObjectIdGroupId = extern enum(i32) {
    XCN_CRYPT_ANY_GROUP_ID = 0,
    XCN_CRYPT_HASH_ALG_OID_GROUP_ID = 1,
    XCN_CRYPT_ENCRYPT_ALG_OID_GROUP_ID = 2,
    XCN_CRYPT_PUBKEY_ALG_OID_GROUP_ID = 3,
    XCN_CRYPT_SIGN_ALG_OID_GROUP_ID = 4,
    XCN_CRYPT_RDN_ATTR_OID_GROUP_ID = 5,
    XCN_CRYPT_EXT_OR_ATTR_OID_GROUP_ID = 6,
    XCN_CRYPT_ENHKEY_USAGE_OID_GROUP_ID = 7,
    XCN_CRYPT_POLICY_OID_GROUP_ID = 8,
    XCN_CRYPT_TEMPLATE_OID_GROUP_ID = 9,
    XCN_CRYPT_KDF_OID_GROUP_ID = 10,
    XCN_CRYPT_LAST_OID_GROUP_ID = 10,
    XCN_CRYPT_FIRST_ALG_OID_GROUP_ID = 1,
    XCN_CRYPT_LAST_ALG_OID_GROUP_ID = 4,
    XCN_CRYPT_GROUP_ID_MASK = 65535,
    XCN_CRYPT_OID_PREFER_CNG_ALGID_FLAG = 1073741824,
    XCN_CRYPT_OID_DISABLE_SEARCH_DS_FLAG = -2147483648,
    XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK = 268369920,
    XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT = 16,
    XCN_CRYPT_KEY_LENGTH_MASK = 268369920,
};
pub const XCN_CRYPT_ANY_GROUP_ID = ObjectIdGroupId.XCN_CRYPT_ANY_GROUP_ID;
pub const XCN_CRYPT_HASH_ALG_OID_GROUP_ID = ObjectIdGroupId.XCN_CRYPT_HASH_ALG_OID_GROUP_ID;
pub const XCN_CRYPT_ENCRYPT_ALG_OID_GROUP_ID = ObjectIdGroupId.XCN_CRYPT_ENCRYPT_ALG_OID_GROUP_ID;
pub const XCN_CRYPT_PUBKEY_ALG_OID_GROUP_ID = ObjectIdGroupId.XCN_CRYPT_PUBKEY_ALG_OID_GROUP_ID;
pub const XCN_CRYPT_SIGN_ALG_OID_GROUP_ID = ObjectIdGroupId.XCN_CRYPT_SIGN_ALG_OID_GROUP_ID;
pub const XCN_CRYPT_RDN_ATTR_OID_GROUP_ID = ObjectIdGroupId.XCN_CRYPT_RDN_ATTR_OID_GROUP_ID;
pub const XCN_CRYPT_EXT_OR_ATTR_OID_GROUP_ID = ObjectIdGroupId.XCN_CRYPT_EXT_OR_ATTR_OID_GROUP_ID;
pub const XCN_CRYPT_ENHKEY_USAGE_OID_GROUP_ID = ObjectIdGroupId.XCN_CRYPT_ENHKEY_USAGE_OID_GROUP_ID;
pub const XCN_CRYPT_POLICY_OID_GROUP_ID = ObjectIdGroupId.XCN_CRYPT_POLICY_OID_GROUP_ID;
pub const XCN_CRYPT_TEMPLATE_OID_GROUP_ID = ObjectIdGroupId.XCN_CRYPT_TEMPLATE_OID_GROUP_ID;
pub const XCN_CRYPT_KDF_OID_GROUP_ID = ObjectIdGroupId.XCN_CRYPT_KDF_OID_GROUP_ID;
pub const XCN_CRYPT_LAST_OID_GROUP_ID = ObjectIdGroupId.XCN_CRYPT_LAST_OID_GROUP_ID;
pub const XCN_CRYPT_FIRST_ALG_OID_GROUP_ID = ObjectIdGroupId.XCN_CRYPT_FIRST_ALG_OID_GROUP_ID;
pub const XCN_CRYPT_LAST_ALG_OID_GROUP_ID = ObjectIdGroupId.XCN_CRYPT_LAST_ALG_OID_GROUP_ID;
pub const XCN_CRYPT_GROUP_ID_MASK = ObjectIdGroupId.XCN_CRYPT_GROUP_ID_MASK;
pub const XCN_CRYPT_OID_PREFER_CNG_ALGID_FLAG = ObjectIdGroupId.XCN_CRYPT_OID_PREFER_CNG_ALGID_FLAG;
pub const XCN_CRYPT_OID_DISABLE_SEARCH_DS_FLAG = ObjectIdGroupId.XCN_CRYPT_OID_DISABLE_SEARCH_DS_FLAG;
pub const XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK = ObjectIdGroupId.XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK;
pub const XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT = ObjectIdGroupId.XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT;
pub const XCN_CRYPT_KEY_LENGTH_MASK = ObjectIdGroupId.XCN_CRYPT_KEY_LENGTH_MASK;

pub const ObjectIdPublicKeyFlags = extern enum(i32) {
    XCN_CRYPT_OID_INFO_PUBKEY_ANY = 0,
    XCN_CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG = -2147483648,
    XCN_CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = 1073741824,
};
pub const XCN_CRYPT_OID_INFO_PUBKEY_ANY = ObjectIdPublicKeyFlags.XCN_CRYPT_OID_INFO_PUBKEY_ANY;
pub const XCN_CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG = ObjectIdPublicKeyFlags.XCN_CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG;
pub const XCN_CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = ObjectIdPublicKeyFlags.XCN_CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG;

pub const AlgorithmFlags = extern enum(i32) {
    AlgorithmFlagsNone = 0,
    AlgorithmFlagsWrap = 1,
};
pub const AlgorithmFlagsNone = AlgorithmFlags.AlgorithmFlagsNone;
pub const AlgorithmFlagsWrap = AlgorithmFlags.AlgorithmFlagsWrap;

const IID_IObjectId_Value = @import("../zig.zig").Guid.initString("728AB300-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IObjectId = &IID_IObjectId_Value;
pub const IObjectId = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InitializeFromName: fn(
            self: *const IObjectId,
            Name: CERTENROLL_OBJECTID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromValue: fn(
            self: *const IObjectId,
            strValue: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromAlgorithmName: fn(
            self: *const IObjectId,
            GroupId: ObjectIdGroupId,
            KeyFlags: ObjectIdPublicKeyFlags,
            AlgFlags: AlgorithmFlags,
            strAlgorithmName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const IObjectId,
            pValue: *CERTENROLL_OBJECTID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_FriendlyName: fn(
            self: *const IObjectId,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_FriendlyName: fn(
            self: *const IObjectId,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Value: fn(
            self: *const IObjectId,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAlgorithmName: fn(
            self: *const IObjectId,
            GroupId: ObjectIdGroupId,
            KeyFlags: ObjectIdPublicKeyFlags,
            pstrAlgorithmName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectId_InitializeFromName(self: *const T, Name: CERTENROLL_OBJECTID) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectId.VTable, self.vtable).InitializeFromName(@ptrCast(*const IObjectId, self), Name);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectId_InitializeFromValue(self: *const T, strValue: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectId.VTable, self.vtable).InitializeFromValue(@ptrCast(*const IObjectId, self), strValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectId_InitializeFromAlgorithmName(self: *const T, GroupId: ObjectIdGroupId, KeyFlags: ObjectIdPublicKeyFlags, AlgFlags: AlgorithmFlags, strAlgorithmName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectId.VTable, self.vtable).InitializeFromAlgorithmName(@ptrCast(*const IObjectId, self), GroupId, KeyFlags, AlgFlags, strAlgorithmName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectId_get_Name(self: *const T, pValue: *CERTENROLL_OBJECTID) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectId.VTable, self.vtable).get_Name(@ptrCast(*const IObjectId, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectId_get_FriendlyName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectId.VTable, self.vtable).get_FriendlyName(@ptrCast(*const IObjectId, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectId_put_FriendlyName(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectId.VTable, self.vtable).put_FriendlyName(@ptrCast(*const IObjectId, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectId_get_Value(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectId.VTable, self.vtable).get_Value(@ptrCast(*const IObjectId, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectId_GetAlgorithmName(self: *const T, GroupId: ObjectIdGroupId, KeyFlags: ObjectIdPublicKeyFlags, pstrAlgorithmName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectId.VTable, self.vtable).GetAlgorithmName(@ptrCast(*const IObjectId, self), GroupId, KeyFlags, pstrAlgorithmName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjectIds_Value = @import("../zig.zig").Guid.initString("728AB301-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IObjectIds = &IID_IObjectIds_Value;
pub const IObjectIds = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: fn(
            self: *const IObjectIds,
            Index: i32,
            pVal: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IObjectIds,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IObjectIds,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IObjectIds,
            pVal: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IObjectIds,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: fn(
            self: *const IObjectIds,
            pValue: ?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectIds_get_ItemByIndex(self: *const T, Index: i32, pVal: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectIds.VTable, self.vtable).get_ItemByIndex(@ptrCast(*const IObjectIds, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectIds_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectIds.VTable, self.vtable).get_Count(@ptrCast(*const IObjectIds, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectIds_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectIds.VTable, self.vtable).get__NewEnum(@ptrCast(*const IObjectIds, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectIds_Add(self: *const T, pVal: ?*IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectIds.VTable, self.vtable).Add(@ptrCast(*const IObjectIds, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectIds_Remove(self: *const T, Index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectIds.VTable, self.vtable).Remove(@ptrCast(*const IObjectIds, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectIds_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectIds.VTable, self.vtable).Clear(@ptrCast(*const IObjectIds, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectIds_AddRange(self: *const T, pValue: ?*IObjectIds) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectIds.VTable, self.vtable).AddRange(@ptrCast(*const IObjectIds, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IBinaryConverter_Value = @import("../zig.zig").Guid.initString("728AB302-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IBinaryConverter = &IID_IBinaryConverter_Value;
pub const IBinaryConverter = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        StringToString: fn(
            self: *const IBinaryConverter,
            strEncodedIn: BSTR,
            EncodingIn: EncodingType,
            Encoding: EncodingType,
            pstrEncoded: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        VariantByteArrayToString: fn(
            self: *const IBinaryConverter,
            pvarByteArray: *VARIANT,
            Encoding: EncodingType,
            pstrEncoded: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StringToVariantByteArray: fn(
            self: *const IBinaryConverter,
            strEncoded: BSTR,
            Encoding: EncodingType,
            pvarByteArray: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBinaryConverter_StringToString(self: *const T, strEncodedIn: BSTR, EncodingIn: EncodingType, Encoding: EncodingType, pstrEncoded: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBinaryConverter.VTable, self.vtable).StringToString(@ptrCast(*const IBinaryConverter, self), strEncodedIn, EncodingIn, Encoding, pstrEncoded);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBinaryConverter_VariantByteArrayToString(self: *const T, pvarByteArray: *VARIANT, Encoding: EncodingType, pstrEncoded: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBinaryConverter.VTable, self.vtable).VariantByteArrayToString(@ptrCast(*const IBinaryConverter, self), pvarByteArray, Encoding, pstrEncoded);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBinaryConverter_StringToVariantByteArray(self: *const T, strEncoded: BSTR, Encoding: EncodingType, pvarByteArray: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBinaryConverter.VTable, self.vtable).StringToVariantByteArray(@ptrCast(*const IBinaryConverter, self), strEncoded, Encoding, pvarByteArray);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IBinaryConverter2_Value = @import("../zig.zig").Guid.initString("8D7928B4-4E17-428D-9A17-728DF00D1B2B");
pub const IID_IBinaryConverter2 = &IID_IBinaryConverter2_Value;
pub const IBinaryConverter2 = extern struct {
    pub const VTable = extern struct {
        base: IBinaryConverter.VTable,
        StringArrayToVariantArray: fn(
            self: *const IBinaryConverter2,
            pvarStringArray: *VARIANT,
            pvarVariantArray: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        VariantArrayToStringArray: fn(
            self: *const IBinaryConverter2,
            pvarVariantArray: *VARIANT,
            pvarStringArray: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IBinaryConverter.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBinaryConverter2_StringArrayToVariantArray(self: *const T, pvarStringArray: *VARIANT, pvarVariantArray: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBinaryConverter2.VTable, self.vtable).StringArrayToVariantArray(@ptrCast(*const IBinaryConverter2, self), pvarStringArray, pvarVariantArray);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBinaryConverter2_VariantArrayToStringArray(self: *const T, pvarVariantArray: *VARIANT, pvarStringArray: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBinaryConverter2.VTable, self.vtable).VariantArrayToStringArray(@ptrCast(*const IBinaryConverter2, self), pvarVariantArray, pvarStringArray);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const X500NameFlags = extern enum(i32) {
    XCN_CERT_NAME_STR_NONE = 0,
    XCN_CERT_SIMPLE_NAME_STR = 1,
    XCN_CERT_OID_NAME_STR = 2,
    XCN_CERT_X500_NAME_STR = 3,
    XCN_CERT_XML_NAME_STR = 4,
    XCN_CERT_NAME_STR_SEMICOLON_FLAG = 1073741824,
    XCN_CERT_NAME_STR_NO_PLUS_FLAG = 536870912,
    XCN_CERT_NAME_STR_NO_QUOTING_FLAG = 268435456,
    XCN_CERT_NAME_STR_CRLF_FLAG = 134217728,
    XCN_CERT_NAME_STR_COMMA_FLAG = 67108864,
    XCN_CERT_NAME_STR_REVERSE_FLAG = 33554432,
    XCN_CERT_NAME_STR_FORWARD_FLAG = 16777216,
    XCN_CERT_NAME_STR_AMBIGUOUS_SEPARATOR_FLAGS = 1275068416,
    XCN_CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = 65536,
    XCN_CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = 131072,
    XCN_CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = 262144,
    XCN_CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG = 524288,
    XCN_CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = 1048576,
    XCN_CERT_NAME_STR_ENABLE_PUNYCODE_FLAG = 2097152,
    XCN_CERT_NAME_STR_DS_ESCAPED = 8388608,
};
pub const XCN_CERT_NAME_STR_NONE = X500NameFlags.XCN_CERT_NAME_STR_NONE;
pub const XCN_CERT_SIMPLE_NAME_STR = X500NameFlags.XCN_CERT_SIMPLE_NAME_STR;
pub const XCN_CERT_OID_NAME_STR = X500NameFlags.XCN_CERT_OID_NAME_STR;
pub const XCN_CERT_X500_NAME_STR = X500NameFlags.XCN_CERT_X500_NAME_STR;
pub const XCN_CERT_XML_NAME_STR = X500NameFlags.XCN_CERT_XML_NAME_STR;
pub const XCN_CERT_NAME_STR_SEMICOLON_FLAG = X500NameFlags.XCN_CERT_NAME_STR_SEMICOLON_FLAG;
pub const XCN_CERT_NAME_STR_NO_PLUS_FLAG = X500NameFlags.XCN_CERT_NAME_STR_NO_PLUS_FLAG;
pub const XCN_CERT_NAME_STR_NO_QUOTING_FLAG = X500NameFlags.XCN_CERT_NAME_STR_NO_QUOTING_FLAG;
pub const XCN_CERT_NAME_STR_CRLF_FLAG = X500NameFlags.XCN_CERT_NAME_STR_CRLF_FLAG;
pub const XCN_CERT_NAME_STR_COMMA_FLAG = X500NameFlags.XCN_CERT_NAME_STR_COMMA_FLAG;
pub const XCN_CERT_NAME_STR_REVERSE_FLAG = X500NameFlags.XCN_CERT_NAME_STR_REVERSE_FLAG;
pub const XCN_CERT_NAME_STR_FORWARD_FLAG = X500NameFlags.XCN_CERT_NAME_STR_FORWARD_FLAG;
pub const XCN_CERT_NAME_STR_AMBIGUOUS_SEPARATOR_FLAGS = X500NameFlags.XCN_CERT_NAME_STR_AMBIGUOUS_SEPARATOR_FLAGS;
pub const XCN_CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = X500NameFlags.XCN_CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG;
pub const XCN_CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = X500NameFlags.XCN_CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG;
pub const XCN_CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = X500NameFlags.XCN_CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG;
pub const XCN_CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG = X500NameFlags.XCN_CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG;
pub const XCN_CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = X500NameFlags.XCN_CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG;
pub const XCN_CERT_NAME_STR_ENABLE_PUNYCODE_FLAG = X500NameFlags.XCN_CERT_NAME_STR_ENABLE_PUNYCODE_FLAG;
pub const XCN_CERT_NAME_STR_DS_ESCAPED = X500NameFlags.XCN_CERT_NAME_STR_DS_ESCAPED;

const IID_IX500DistinguishedName_Value = @import("../zig.zig").Guid.initString("728AB303-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX500DistinguishedName = &IID_IX500DistinguishedName_Value;
pub const IX500DistinguishedName = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: fn(
            self: *const IX500DistinguishedName,
            strEncodedName: BSTR,
            Encoding: EncodingType,
            NameFlags: X500NameFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: fn(
            self: *const IX500DistinguishedName,
            strName: BSTR,
            NameFlags: X500NameFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const IX500DistinguishedName,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EncodedName: fn(
            self: *const IX500DistinguishedName,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX500DistinguishedName_Decode(self: *const T, strEncodedName: BSTR, Encoding: EncodingType, NameFlags: X500NameFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX500DistinguishedName.VTable, self.vtable).Decode(@ptrCast(*const IX500DistinguishedName, self), strEncodedName, Encoding, NameFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX500DistinguishedName_Encode(self: *const T, strName: BSTR, NameFlags: X500NameFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX500DistinguishedName.VTable, self.vtable).Encode(@ptrCast(*const IX500DistinguishedName, self), strName, NameFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX500DistinguishedName_get_Name(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX500DistinguishedName.VTable, self.vtable).get_Name(@ptrCast(*const IX500DistinguishedName, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX500DistinguishedName_get_EncodedName(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX500DistinguishedName.VTable, self.vtable).get_EncodedName(@ptrCast(*const IX500DistinguishedName, self), Encoding, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const X509CertificateEnrollmentContext = extern enum(i32) {
    ContextNone = 0,
    ContextUser = 1,
    ContextMachine = 2,
    ContextAdministratorForceMachine = 3,
};
pub const ContextNone = X509CertificateEnrollmentContext.ContextNone;
pub const ContextUser = X509CertificateEnrollmentContext.ContextUser;
pub const ContextMachine = X509CertificateEnrollmentContext.ContextMachine;
pub const ContextAdministratorForceMachine = X509CertificateEnrollmentContext.ContextAdministratorForceMachine;

pub const EnrollmentEnrollStatus = extern enum(i32) {
    Enrolled = 1,
    EnrollPended = 2,
    EnrollUIDeferredEnrollmentRequired = 4,
    EnrollError = 16,
    EnrollUnknown = 32,
    EnrollSkipped = 64,
    EnrollDenied = 256,
};
pub const Enrolled = EnrollmentEnrollStatus.Enrolled;
pub const EnrollPended = EnrollmentEnrollStatus.EnrollPended;
pub const EnrollUIDeferredEnrollmentRequired = EnrollmentEnrollStatus.EnrollUIDeferredEnrollmentRequired;
pub const EnrollError = EnrollmentEnrollStatus.EnrollError;
pub const EnrollUnknown = EnrollmentEnrollStatus.EnrollUnknown;
pub const EnrollSkipped = EnrollmentEnrollStatus.EnrollSkipped;
pub const EnrollDenied = EnrollmentEnrollStatus.EnrollDenied;

pub const EnrollmentSelectionStatus = extern enum(i32) {
    SelectedNo = 0,
    SelectedYes = 1,
};
pub const SelectedNo = EnrollmentSelectionStatus.SelectedNo;
pub const SelectedYes = EnrollmentSelectionStatus.SelectedYes;

pub const EnrollmentDisplayStatus = extern enum(i32) {
    DisplayNo = 0,
    DisplayYes = 1,
};
pub const DisplayNo = EnrollmentDisplayStatus.DisplayNo;
pub const DisplayYes = EnrollmentDisplayStatus.DisplayYes;

const IID_IX509EnrollmentStatus_Value = @import("../zig.zig").Guid.initString("728AB304-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509EnrollmentStatus = &IID_IX509EnrollmentStatus_Value;
pub const IX509EnrollmentStatus = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        AppendText: fn(
            self: *const IX509EnrollmentStatus,
            strText: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Text: fn(
            self: *const IX509EnrollmentStatus,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Text: fn(
            self: *const IX509EnrollmentStatus,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Selected: fn(
            self: *const IX509EnrollmentStatus,
            pValue: *EnrollmentSelectionStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Selected: fn(
            self: *const IX509EnrollmentStatus,
            Value: EnrollmentSelectionStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Display: fn(
            self: *const IX509EnrollmentStatus,
            pValue: *EnrollmentDisplayStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Display: fn(
            self: *const IX509EnrollmentStatus,
            Value: EnrollmentDisplayStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Status: fn(
            self: *const IX509EnrollmentStatus,
            pValue: *EnrollmentEnrollStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Status: fn(
            self: *const IX509EnrollmentStatus,
            Value: EnrollmentEnrollStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Error: fn(
            self: *const IX509EnrollmentStatus,
            pValue: *HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Error: fn(
            self: *const IX509EnrollmentStatus,
            Value: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ErrorText: fn(
            self: *const IX509EnrollmentStatus,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentStatus_AppendText(self: *const T, strText: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentStatus.VTable, self.vtable).AppendText(@ptrCast(*const IX509EnrollmentStatus, self), strText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentStatus_get_Text(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentStatus.VTable, self.vtable).get_Text(@ptrCast(*const IX509EnrollmentStatus, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentStatus_put_Text(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentStatus.VTable, self.vtable).put_Text(@ptrCast(*const IX509EnrollmentStatus, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentStatus_get_Selected(self: *const T, pValue: *EnrollmentSelectionStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentStatus.VTable, self.vtable).get_Selected(@ptrCast(*const IX509EnrollmentStatus, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentStatus_put_Selected(self: *const T, Value: EnrollmentSelectionStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentStatus.VTable, self.vtable).put_Selected(@ptrCast(*const IX509EnrollmentStatus, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentStatus_get_Display(self: *const T, pValue: *EnrollmentDisplayStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentStatus.VTable, self.vtable).get_Display(@ptrCast(*const IX509EnrollmentStatus, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentStatus_put_Display(self: *const T, Value: EnrollmentDisplayStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentStatus.VTable, self.vtable).put_Display(@ptrCast(*const IX509EnrollmentStatus, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentStatus_get_Status(self: *const T, pValue: *EnrollmentEnrollStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentStatus.VTable, self.vtable).get_Status(@ptrCast(*const IX509EnrollmentStatus, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentStatus_put_Status(self: *const T, Value: EnrollmentEnrollStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentStatus.VTable, self.vtable).put_Status(@ptrCast(*const IX509EnrollmentStatus, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentStatus_get_Error(self: *const T, pValue: *HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentStatus.VTable, self.vtable).get_Error(@ptrCast(*const IX509EnrollmentStatus, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentStatus_put_Error(self: *const T, Value: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentStatus.VTable, self.vtable).put_Error(@ptrCast(*const IX509EnrollmentStatus, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentStatus_get_ErrorText(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentStatus.VTable, self.vtable).get_ErrorText(@ptrCast(*const IX509EnrollmentStatus, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const X509ProviderType = extern enum(i32) {
    XCN_PROV_NONE = 0,
    XCN_PROV_RSA_FULL = 1,
    XCN_PROV_RSA_SIG = 2,
    XCN_PROV_DSS = 3,
    XCN_PROV_FORTEZZA = 4,
    XCN_PROV_MS_EXCHANGE = 5,
    XCN_PROV_SSL = 6,
    XCN_PROV_RSA_SCHANNEL = 12,
    XCN_PROV_DSS_DH = 13,
    XCN_PROV_EC_ECDSA_SIG = 14,
    XCN_PROV_EC_ECNRA_SIG = 15,
    XCN_PROV_EC_ECDSA_FULL = 16,
    XCN_PROV_EC_ECNRA_FULL = 17,
    XCN_PROV_DH_SCHANNEL = 18,
    XCN_PROV_SPYRUS_LYNKS = 20,
    XCN_PROV_RNG = 21,
    XCN_PROV_INTEL_SEC = 22,
    XCN_PROV_REPLACE_OWF = 23,
    XCN_PROV_RSA_AES = 24,
};
pub const XCN_PROV_NONE = X509ProviderType.XCN_PROV_NONE;
pub const XCN_PROV_RSA_FULL = X509ProviderType.XCN_PROV_RSA_FULL;
pub const XCN_PROV_RSA_SIG = X509ProviderType.XCN_PROV_RSA_SIG;
pub const XCN_PROV_DSS = X509ProviderType.XCN_PROV_DSS;
pub const XCN_PROV_FORTEZZA = X509ProviderType.XCN_PROV_FORTEZZA;
pub const XCN_PROV_MS_EXCHANGE = X509ProviderType.XCN_PROV_MS_EXCHANGE;
pub const XCN_PROV_SSL = X509ProviderType.XCN_PROV_SSL;
pub const XCN_PROV_RSA_SCHANNEL = X509ProviderType.XCN_PROV_RSA_SCHANNEL;
pub const XCN_PROV_DSS_DH = X509ProviderType.XCN_PROV_DSS_DH;
pub const XCN_PROV_EC_ECDSA_SIG = X509ProviderType.XCN_PROV_EC_ECDSA_SIG;
pub const XCN_PROV_EC_ECNRA_SIG = X509ProviderType.XCN_PROV_EC_ECNRA_SIG;
pub const XCN_PROV_EC_ECDSA_FULL = X509ProviderType.XCN_PROV_EC_ECDSA_FULL;
pub const XCN_PROV_EC_ECNRA_FULL = X509ProviderType.XCN_PROV_EC_ECNRA_FULL;
pub const XCN_PROV_DH_SCHANNEL = X509ProviderType.XCN_PROV_DH_SCHANNEL;
pub const XCN_PROV_SPYRUS_LYNKS = X509ProviderType.XCN_PROV_SPYRUS_LYNKS;
pub const XCN_PROV_RNG = X509ProviderType.XCN_PROV_RNG;
pub const XCN_PROV_INTEL_SEC = X509ProviderType.XCN_PROV_INTEL_SEC;
pub const XCN_PROV_REPLACE_OWF = X509ProviderType.XCN_PROV_REPLACE_OWF;
pub const XCN_PROV_RSA_AES = X509ProviderType.XCN_PROV_RSA_AES;

pub const AlgorithmType = extern enum(i32) {
    XCN_BCRYPT_UNKNOWN_INTERFACE = 0,
    XCN_BCRYPT_CIPHER_INTERFACE = 1,
    XCN_BCRYPT_HASH_INTERFACE = 2,
    XCN_BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 3,
    XCN_BCRYPT_SIGNATURE_INTERFACE = 5,
    XCN_BCRYPT_SECRET_AGREEMENT_INTERFACE = 4,
    XCN_BCRYPT_RNG_INTERFACE = 6,
    XCN_BCRYPT_KEY_DERIVATION_INTERFACE = 7,
};
pub const XCN_BCRYPT_UNKNOWN_INTERFACE = AlgorithmType.XCN_BCRYPT_UNKNOWN_INTERFACE;
pub const XCN_BCRYPT_CIPHER_INTERFACE = AlgorithmType.XCN_BCRYPT_CIPHER_INTERFACE;
pub const XCN_BCRYPT_HASH_INTERFACE = AlgorithmType.XCN_BCRYPT_HASH_INTERFACE;
pub const XCN_BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = AlgorithmType.XCN_BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE;
pub const XCN_BCRYPT_SIGNATURE_INTERFACE = AlgorithmType.XCN_BCRYPT_SIGNATURE_INTERFACE;
pub const XCN_BCRYPT_SECRET_AGREEMENT_INTERFACE = AlgorithmType.XCN_BCRYPT_SECRET_AGREEMENT_INTERFACE;
pub const XCN_BCRYPT_RNG_INTERFACE = AlgorithmType.XCN_BCRYPT_RNG_INTERFACE;
pub const XCN_BCRYPT_KEY_DERIVATION_INTERFACE = AlgorithmType.XCN_BCRYPT_KEY_DERIVATION_INTERFACE;

pub const AlgorithmOperationFlags = extern enum(i32) {
    XCN_NCRYPT_NO_OPERATION = 0,
    XCN_NCRYPT_CIPHER_OPERATION = 1,
    XCN_NCRYPT_HASH_OPERATION = 2,
    XCN_NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 4,
    XCN_NCRYPT_SECRET_AGREEMENT_OPERATION = 8,
    XCN_NCRYPT_SIGNATURE_OPERATION = 16,
    XCN_NCRYPT_RNG_OPERATION = 32,
    XCN_NCRYPT_KEY_DERIVATION_OPERATION = 64,
    XCN_NCRYPT_ANY_ASYMMETRIC_OPERATION = 28,
    XCN_NCRYPT_PREFER_SIGNATURE_ONLY_OPERATION = 2097152,
    XCN_NCRYPT_PREFER_NON_SIGNATURE_OPERATION = 4194304,
    XCN_NCRYPT_EXACT_MATCH_OPERATION = 8388608,
    XCN_NCRYPT_PREFERENCE_MASK_OPERATION = 14680064,
};
pub const XCN_NCRYPT_NO_OPERATION = AlgorithmOperationFlags.XCN_NCRYPT_NO_OPERATION;
pub const XCN_NCRYPT_CIPHER_OPERATION = AlgorithmOperationFlags.XCN_NCRYPT_CIPHER_OPERATION;
pub const XCN_NCRYPT_HASH_OPERATION = AlgorithmOperationFlags.XCN_NCRYPT_HASH_OPERATION;
pub const XCN_NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = AlgorithmOperationFlags.XCN_NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION;
pub const XCN_NCRYPT_SECRET_AGREEMENT_OPERATION = AlgorithmOperationFlags.XCN_NCRYPT_SECRET_AGREEMENT_OPERATION;
pub const XCN_NCRYPT_SIGNATURE_OPERATION = AlgorithmOperationFlags.XCN_NCRYPT_SIGNATURE_OPERATION;
pub const XCN_NCRYPT_RNG_OPERATION = AlgorithmOperationFlags.XCN_NCRYPT_RNG_OPERATION;
pub const XCN_NCRYPT_KEY_DERIVATION_OPERATION = AlgorithmOperationFlags.XCN_NCRYPT_KEY_DERIVATION_OPERATION;
pub const XCN_NCRYPT_ANY_ASYMMETRIC_OPERATION = AlgorithmOperationFlags.XCN_NCRYPT_ANY_ASYMMETRIC_OPERATION;
pub const XCN_NCRYPT_PREFER_SIGNATURE_ONLY_OPERATION = AlgorithmOperationFlags.XCN_NCRYPT_PREFER_SIGNATURE_ONLY_OPERATION;
pub const XCN_NCRYPT_PREFER_NON_SIGNATURE_OPERATION = AlgorithmOperationFlags.XCN_NCRYPT_PREFER_NON_SIGNATURE_OPERATION;
pub const XCN_NCRYPT_EXACT_MATCH_OPERATION = AlgorithmOperationFlags.XCN_NCRYPT_EXACT_MATCH_OPERATION;
pub const XCN_NCRYPT_PREFERENCE_MASK_OPERATION = AlgorithmOperationFlags.XCN_NCRYPT_PREFERENCE_MASK_OPERATION;

const IID_ICspAlgorithm_Value = @import("../zig.zig").Guid.initString("728AB305-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICspAlgorithm = &IID_ICspAlgorithm_Value;
pub const ICspAlgorithm = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetAlgorithmOid: fn(
            self: *const ICspAlgorithm,
            Length: i32,
            AlgFlags: AlgorithmFlags,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DefaultLength: fn(
            self: *const ICspAlgorithm,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IncrementLength: fn(
            self: *const ICspAlgorithm,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_LongName: fn(
            self: *const ICspAlgorithm,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Valid: fn(
            self: *const ICspAlgorithm,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MaxLength: fn(
            self: *const ICspAlgorithm,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MinLength: fn(
            self: *const ICspAlgorithm,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const ICspAlgorithm,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Type: fn(
            self: *const ICspAlgorithm,
            pValue: *AlgorithmType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Operations: fn(
            self: *const ICspAlgorithm,
            pValue: *AlgorithmOperationFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspAlgorithm_GetAlgorithmOid(self: *const T, Length: i32, AlgFlags: AlgorithmFlags, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspAlgorithm.VTable, self.vtable).GetAlgorithmOid(@ptrCast(*const ICspAlgorithm, self), Length, AlgFlags, ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspAlgorithm_get_DefaultLength(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspAlgorithm.VTable, self.vtable).get_DefaultLength(@ptrCast(*const ICspAlgorithm, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspAlgorithm_get_IncrementLength(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspAlgorithm.VTable, self.vtable).get_IncrementLength(@ptrCast(*const ICspAlgorithm, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspAlgorithm_get_LongName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspAlgorithm.VTable, self.vtable).get_LongName(@ptrCast(*const ICspAlgorithm, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspAlgorithm_get_Valid(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspAlgorithm.VTable, self.vtable).get_Valid(@ptrCast(*const ICspAlgorithm, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspAlgorithm_get_MaxLength(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspAlgorithm.VTable, self.vtable).get_MaxLength(@ptrCast(*const ICspAlgorithm, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspAlgorithm_get_MinLength(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspAlgorithm.VTable, self.vtable).get_MinLength(@ptrCast(*const ICspAlgorithm, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspAlgorithm_get_Name(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspAlgorithm.VTable, self.vtable).get_Name(@ptrCast(*const ICspAlgorithm, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspAlgorithm_get_Type(self: *const T, pValue: *AlgorithmType) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspAlgorithm.VTable, self.vtable).get_Type(@ptrCast(*const ICspAlgorithm, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspAlgorithm_get_Operations(self: *const T, pValue: *AlgorithmOperationFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspAlgorithm.VTable, self.vtable).get_Operations(@ptrCast(*const ICspAlgorithm, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICspAlgorithms_Value = @import("../zig.zig").Guid.initString("728AB306-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICspAlgorithms = &IID_ICspAlgorithms_Value;
pub const ICspAlgorithms = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: fn(
            self: *const ICspAlgorithms,
            Index: i32,
            pVal: **ICspAlgorithm,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ICspAlgorithms,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ICspAlgorithms,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ICspAlgorithms,
            pVal: ?*ICspAlgorithm,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ICspAlgorithms,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const ICspAlgorithms,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByName: fn(
            self: *const ICspAlgorithms,
            strName: BSTR,
            ppValue: **ICspAlgorithm,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IndexByObjectId: fn(
            self: *const ICspAlgorithms,
            pObjectId: ?*IObjectId,
            pIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspAlgorithms_get_ItemByIndex(self: *const T, Index: i32, pVal: **ICspAlgorithm) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspAlgorithms.VTable, self.vtable).get_ItemByIndex(@ptrCast(*const ICspAlgorithms, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspAlgorithms_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspAlgorithms.VTable, self.vtable).get_Count(@ptrCast(*const ICspAlgorithms, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspAlgorithms_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspAlgorithms.VTable, self.vtable).get__NewEnum(@ptrCast(*const ICspAlgorithms, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspAlgorithms_Add(self: *const T, pVal: ?*ICspAlgorithm) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspAlgorithms.VTable, self.vtable).Add(@ptrCast(*const ICspAlgorithms, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspAlgorithms_Remove(self: *const T, Index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspAlgorithms.VTable, self.vtable).Remove(@ptrCast(*const ICspAlgorithms, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspAlgorithms_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspAlgorithms.VTable, self.vtable).Clear(@ptrCast(*const ICspAlgorithms, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspAlgorithms_get_ItemByName(self: *const T, strName: BSTR, ppValue: **ICspAlgorithm) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspAlgorithms.VTable, self.vtable).get_ItemByName(@ptrCast(*const ICspAlgorithms, self), strName, ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspAlgorithms_get_IndexByObjectId(self: *const T, pObjectId: ?*IObjectId, pIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspAlgorithms.VTable, self.vtable).get_IndexByObjectId(@ptrCast(*const ICspAlgorithms, self), pObjectId, pIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const X509KeySpec = extern enum(i32) {
    XCN_AT_NONE = 0,
    XCN_AT_KEYEXCHANGE = 1,
    XCN_AT_SIGNATURE = 2,
};
pub const XCN_AT_NONE = X509KeySpec.XCN_AT_NONE;
pub const XCN_AT_KEYEXCHANGE = X509KeySpec.XCN_AT_KEYEXCHANGE;
pub const XCN_AT_SIGNATURE = X509KeySpec.XCN_AT_SIGNATURE;

const IID_ICspInformation_Value = @import("../zig.zig").Guid.initString("728AB307-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICspInformation = &IID_ICspInformation_Value;
pub const ICspInformation = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InitializeFromName: fn(
            self: *const ICspInformation,
            strName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromType: fn(
            self: *const ICspInformation,
            Type: X509ProviderType,
            pAlgorithm: ?*IObjectId,
            MachineContext: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CspAlgorithms: fn(
            self: *const ICspInformation,
            ppValue: **ICspAlgorithms,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_HasHardwareRandomNumberGenerator: fn(
            self: *const ICspInformation,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsHardwareDevice: fn(
            self: *const ICspInformation,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsRemovable: fn(
            self: *const ICspInformation,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsSoftwareDevice: fn(
            self: *const ICspInformation,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Valid: fn(
            self: *const ICspInformation,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MaxKeyContainerNameLength: fn(
            self: *const ICspInformation,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const ICspInformation,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Type: fn(
            self: *const ICspInformation,
            pValue: *X509ProviderType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Version: fn(
            self: *const ICspInformation,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_KeySpec: fn(
            self: *const ICspInformation,
            pValue: *X509KeySpec,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsSmartCard: fn(
            self: *const ICspInformation,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultSecurityDescriptor: fn(
            self: *const ICspInformation,
            MachineContext: i16,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_LegacyCsp: fn(
            self: *const ICspInformation,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCspStatusFromOperations: fn(
            self: *const ICspInformation,
            pAlgorithm: ?*IObjectId,
            Operations: AlgorithmOperationFlags,
            ppValue: **ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformation_InitializeFromName(self: *const T, strName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformation.VTable, self.vtable).InitializeFromName(@ptrCast(*const ICspInformation, self), strName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformation_InitializeFromType(self: *const T, Type: X509ProviderType, pAlgorithm: ?*IObjectId, MachineContext: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformation.VTable, self.vtable).InitializeFromType(@ptrCast(*const ICspInformation, self), Type, pAlgorithm, MachineContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformation_get_CspAlgorithms(self: *const T, ppValue: **ICspAlgorithms) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformation.VTable, self.vtable).get_CspAlgorithms(@ptrCast(*const ICspInformation, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformation_get_HasHardwareRandomNumberGenerator(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformation.VTable, self.vtable).get_HasHardwareRandomNumberGenerator(@ptrCast(*const ICspInformation, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformation_get_IsHardwareDevice(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformation.VTable, self.vtable).get_IsHardwareDevice(@ptrCast(*const ICspInformation, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformation_get_IsRemovable(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformation.VTable, self.vtable).get_IsRemovable(@ptrCast(*const ICspInformation, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformation_get_IsSoftwareDevice(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformation.VTable, self.vtable).get_IsSoftwareDevice(@ptrCast(*const ICspInformation, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformation_get_Valid(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformation.VTable, self.vtable).get_Valid(@ptrCast(*const ICspInformation, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformation_get_MaxKeyContainerNameLength(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformation.VTable, self.vtable).get_MaxKeyContainerNameLength(@ptrCast(*const ICspInformation, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformation_get_Name(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformation.VTable, self.vtable).get_Name(@ptrCast(*const ICspInformation, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformation_get_Type(self: *const T, pValue: *X509ProviderType) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformation.VTable, self.vtable).get_Type(@ptrCast(*const ICspInformation, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformation_get_Version(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformation.VTable, self.vtable).get_Version(@ptrCast(*const ICspInformation, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformation_get_KeySpec(self: *const T, pValue: *X509KeySpec) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformation.VTable, self.vtable).get_KeySpec(@ptrCast(*const ICspInformation, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformation_get_IsSmartCard(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformation.VTable, self.vtable).get_IsSmartCard(@ptrCast(*const ICspInformation, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformation_GetDefaultSecurityDescriptor(self: *const T, MachineContext: i16, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformation.VTable, self.vtable).GetDefaultSecurityDescriptor(@ptrCast(*const ICspInformation, self), MachineContext, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformation_get_LegacyCsp(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformation.VTable, self.vtable).get_LegacyCsp(@ptrCast(*const ICspInformation, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformation_GetCspStatusFromOperations(self: *const T, pAlgorithm: ?*IObjectId, Operations: AlgorithmOperationFlags, ppValue: **ICspStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformation.VTable, self.vtable).GetCspStatusFromOperations(@ptrCast(*const ICspInformation, self), pAlgorithm, Operations, ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICspInformations_Value = @import("../zig.zig").Guid.initString("728AB308-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICspInformations = &IID_ICspInformations_Value;
pub const ICspInformations = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: fn(
            self: *const ICspInformations,
            Index: i32,
            pVal: **ICspInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ICspInformations,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ICspInformations,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ICspInformations,
            pVal: ?*ICspInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ICspInformations,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const ICspInformations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAvailableCsps: fn(
            self: *const ICspInformations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByName: fn(
            self: *const ICspInformations,
            strName: BSTR,
            ppCspInformation: **ICspInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCspStatusFromProviderName: fn(
            self: *const ICspInformations,
            strProviderName: BSTR,
            LegacyKeySpec: X509KeySpec,
            ppValue: **ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCspStatusesFromOperations: fn(
            self: *const ICspInformations,
            Operations: AlgorithmOperationFlags,
            pCspInformation: ?*ICspInformation,
            ppValue: **ICspStatuses,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEncryptionCspAlgorithms: fn(
            self: *const ICspInformations,
            pCspInformation: ?*ICspInformation,
            ppValue: **ICspAlgorithms,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHashAlgorithms: fn(
            self: *const ICspInformations,
            pCspInformation: ?*ICspInformation,
            ppValue: **IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformations_get_ItemByIndex(self: *const T, Index: i32, pVal: **ICspInformation) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformations.VTable, self.vtable).get_ItemByIndex(@ptrCast(*const ICspInformations, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformations_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformations.VTable, self.vtable).get_Count(@ptrCast(*const ICspInformations, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformations_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformations.VTable, self.vtable).get__NewEnum(@ptrCast(*const ICspInformations, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformations_Add(self: *const T, pVal: ?*ICspInformation) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformations.VTable, self.vtable).Add(@ptrCast(*const ICspInformations, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformations_Remove(self: *const T, Index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformations.VTable, self.vtable).Remove(@ptrCast(*const ICspInformations, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformations_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformations.VTable, self.vtable).Clear(@ptrCast(*const ICspInformations, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformations_AddAvailableCsps(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformations.VTable, self.vtable).AddAvailableCsps(@ptrCast(*const ICspInformations, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformations_get_ItemByName(self: *const T, strName: BSTR, ppCspInformation: **ICspInformation) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformations.VTable, self.vtable).get_ItemByName(@ptrCast(*const ICspInformations, self), strName, ppCspInformation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformations_GetCspStatusFromProviderName(self: *const T, strProviderName: BSTR, LegacyKeySpec: X509KeySpec, ppValue: **ICspStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformations.VTable, self.vtable).GetCspStatusFromProviderName(@ptrCast(*const ICspInformations, self), strProviderName, LegacyKeySpec, ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformations_GetCspStatusesFromOperations(self: *const T, Operations: AlgorithmOperationFlags, pCspInformation: ?*ICspInformation, ppValue: **ICspStatuses) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformations.VTable, self.vtable).GetCspStatusesFromOperations(@ptrCast(*const ICspInformations, self), Operations, pCspInformation, ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformations_GetEncryptionCspAlgorithms(self: *const T, pCspInformation: ?*ICspInformation, ppValue: **ICspAlgorithms) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformations.VTable, self.vtable).GetEncryptionCspAlgorithms(@ptrCast(*const ICspInformations, self), pCspInformation, ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspInformations_GetHashAlgorithms(self: *const T, pCspInformation: ?*ICspInformation, ppValue: **IObjectIds) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspInformations.VTable, self.vtable).GetHashAlgorithms(@ptrCast(*const ICspInformations, self), pCspInformation, ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICspStatus_Value = @import("../zig.zig").Guid.initString("728AB309-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICspStatus = &IID_ICspStatus_Value;
pub const ICspStatus = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const ICspStatus,
            pCsp: ?*ICspInformation,
            pAlgorithm: ?*ICspAlgorithm,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Ordinal: fn(
            self: *const ICspStatus,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Ordinal: fn(
            self: *const ICspStatus,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CspAlgorithm: fn(
            self: *const ICspStatus,
            ppValue: **ICspAlgorithm,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CspInformation: fn(
            self: *const ICspStatus,
            ppValue: **ICspInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EnrollmentStatus: fn(
            self: *const ICspStatus,
            ppValue: **IX509EnrollmentStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DisplayName: fn(
            self: *const ICspStatus,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspStatus_Initialize(self: *const T, pCsp: ?*ICspInformation, pAlgorithm: ?*ICspAlgorithm) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspStatus.VTable, self.vtable).Initialize(@ptrCast(*const ICspStatus, self), pCsp, pAlgorithm);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspStatus_get_Ordinal(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspStatus.VTable, self.vtable).get_Ordinal(@ptrCast(*const ICspStatus, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspStatus_put_Ordinal(self: *const T, Value: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspStatus.VTable, self.vtable).put_Ordinal(@ptrCast(*const ICspStatus, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspStatus_get_CspAlgorithm(self: *const T, ppValue: **ICspAlgorithm) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspStatus.VTable, self.vtable).get_CspAlgorithm(@ptrCast(*const ICspStatus, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspStatus_get_CspInformation(self: *const T, ppValue: **ICspInformation) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspStatus.VTable, self.vtable).get_CspInformation(@ptrCast(*const ICspStatus, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspStatus_get_EnrollmentStatus(self: *const T, ppValue: **IX509EnrollmentStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspStatus.VTable, self.vtable).get_EnrollmentStatus(@ptrCast(*const ICspStatus, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspStatus_get_DisplayName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspStatus.VTable, self.vtable).get_DisplayName(@ptrCast(*const ICspStatus, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICspStatuses_Value = @import("../zig.zig").Guid.initString("728AB30A-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICspStatuses = &IID_ICspStatuses_Value;
pub const ICspStatuses = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: fn(
            self: *const ICspStatuses,
            Index: i32,
            pVal: **ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ICspStatuses,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ICspStatuses,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ICspStatuses,
            pVal: ?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ICspStatuses,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const ICspStatuses,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByName: fn(
            self: *const ICspStatuses,
            strCspName: BSTR,
            strAlgorithmName: BSTR,
            ppValue: **ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByOrdinal: fn(
            self: *const ICspStatuses,
            Ordinal: i32,
            ppValue: **ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByOperations: fn(
            self: *const ICspStatuses,
            strCspName: BSTR,
            strAlgorithmName: BSTR,
            Operations: AlgorithmOperationFlags,
            ppValue: **ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByProvider: fn(
            self: *const ICspStatuses,
            pCspStatus: ?*ICspStatus,
            ppValue: **ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspStatuses_get_ItemByIndex(self: *const T, Index: i32, pVal: **ICspStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspStatuses.VTable, self.vtable).get_ItemByIndex(@ptrCast(*const ICspStatuses, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspStatuses_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspStatuses.VTable, self.vtable).get_Count(@ptrCast(*const ICspStatuses, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspStatuses_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspStatuses.VTable, self.vtable).get__NewEnum(@ptrCast(*const ICspStatuses, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspStatuses_Add(self: *const T, pVal: ?*ICspStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspStatuses.VTable, self.vtable).Add(@ptrCast(*const ICspStatuses, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspStatuses_Remove(self: *const T, Index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspStatuses.VTable, self.vtable).Remove(@ptrCast(*const ICspStatuses, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspStatuses_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspStatuses.VTable, self.vtable).Clear(@ptrCast(*const ICspStatuses, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspStatuses_get_ItemByName(self: *const T, strCspName: BSTR, strAlgorithmName: BSTR, ppValue: **ICspStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspStatuses.VTable, self.vtable).get_ItemByName(@ptrCast(*const ICspStatuses, self), strCspName, strAlgorithmName, ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspStatuses_get_ItemByOrdinal(self: *const T, Ordinal: i32, ppValue: **ICspStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspStatuses.VTable, self.vtable).get_ItemByOrdinal(@ptrCast(*const ICspStatuses, self), Ordinal, ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspStatuses_get_ItemByOperations(self: *const T, strCspName: BSTR, strAlgorithmName: BSTR, Operations: AlgorithmOperationFlags, ppValue: **ICspStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspStatuses.VTable, self.vtable).get_ItemByOperations(@ptrCast(*const ICspStatuses, self), strCspName, strAlgorithmName, Operations, ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICspStatuses_get_ItemByProvider(self: *const T, pCspStatus: ?*ICspStatus, ppValue: **ICspStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICspStatuses.VTable, self.vtable).get_ItemByProvider(@ptrCast(*const ICspStatuses, self), pCspStatus, ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const KeyIdentifierHashAlgorithm = extern enum(i32) {
    SKIHashDefault = 0,
    SKIHashSha1 = 1,
    SKIHashCapiSha1 = 2,
    SKIHashSha256 = 3,
    SKIHashHPKP = 5,
};
pub const SKIHashDefault = KeyIdentifierHashAlgorithm.SKIHashDefault;
pub const SKIHashSha1 = KeyIdentifierHashAlgorithm.SKIHashSha1;
pub const SKIHashCapiSha1 = KeyIdentifierHashAlgorithm.SKIHashCapiSha1;
pub const SKIHashSha256 = KeyIdentifierHashAlgorithm.SKIHashSha256;
pub const SKIHashHPKP = KeyIdentifierHashAlgorithm.SKIHashHPKP;

const IID_IX509PublicKey_Value = @import("../zig.zig").Guid.initString("728AB30B-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509PublicKey = &IID_IX509PublicKey_Value;
pub const IX509PublicKey = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const IX509PublicKey,
            pObjectId: ?*IObjectId,
            strEncodedKey: BSTR,
            strEncodedParameters: BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromEncodedPublicKeyInfo: fn(
            self: *const IX509PublicKey,
            strEncodedPublicKeyInfo: BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Algorithm: fn(
            self: *const IX509PublicKey,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Length: fn(
            self: *const IX509PublicKey,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EncodedKey: fn(
            self: *const IX509PublicKey,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EncodedParameters: fn(
            self: *const IX509PublicKey,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ComputeKeyIdentifier: fn(
            self: *const IX509PublicKey,
            Algorithm: KeyIdentifierHashAlgorithm,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PublicKey_Initialize(self: *const T, pObjectId: ?*IObjectId, strEncodedKey: BSTR, strEncodedParameters: BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PublicKey.VTable, self.vtable).Initialize(@ptrCast(*const IX509PublicKey, self), pObjectId, strEncodedKey, strEncodedParameters, Encoding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PublicKey_InitializeFromEncodedPublicKeyInfo(self: *const T, strEncodedPublicKeyInfo: BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PublicKey.VTable, self.vtable).InitializeFromEncodedPublicKeyInfo(@ptrCast(*const IX509PublicKey, self), strEncodedPublicKeyInfo, Encoding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PublicKey_get_Algorithm(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PublicKey.VTable, self.vtable).get_Algorithm(@ptrCast(*const IX509PublicKey, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PublicKey_get_Length(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PublicKey.VTable, self.vtable).get_Length(@ptrCast(*const IX509PublicKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PublicKey_get_EncodedKey(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PublicKey.VTable, self.vtable).get_EncodedKey(@ptrCast(*const IX509PublicKey, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PublicKey_get_EncodedParameters(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PublicKey.VTable, self.vtable).get_EncodedParameters(@ptrCast(*const IX509PublicKey, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PublicKey_ComputeKeyIdentifier(self: *const T, Algorithm: KeyIdentifierHashAlgorithm, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PublicKey.VTable, self.vtable).ComputeKeyIdentifier(@ptrCast(*const IX509PublicKey, self), Algorithm, Encoding, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const X509PrivateKeyExportFlags = extern enum(i32) {
    XCN_NCRYPT_ALLOW_EXPORT_NONE = 0,
    XCN_NCRYPT_ALLOW_EXPORT_FLAG = 1,
    XCN_NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG = 2,
    XCN_NCRYPT_ALLOW_ARCHIVING_FLAG = 4,
    XCN_NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG = 8,
};
pub const XCN_NCRYPT_ALLOW_EXPORT_NONE = X509PrivateKeyExportFlags.XCN_NCRYPT_ALLOW_EXPORT_NONE;
pub const XCN_NCRYPT_ALLOW_EXPORT_FLAG = X509PrivateKeyExportFlags.XCN_NCRYPT_ALLOW_EXPORT_FLAG;
pub const XCN_NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG = X509PrivateKeyExportFlags.XCN_NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG;
pub const XCN_NCRYPT_ALLOW_ARCHIVING_FLAG = X509PrivateKeyExportFlags.XCN_NCRYPT_ALLOW_ARCHIVING_FLAG;
pub const XCN_NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG = X509PrivateKeyExportFlags.XCN_NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG;

pub const X509PrivateKeyUsageFlags = extern enum(i32) {
    XCN_NCRYPT_ALLOW_USAGES_NONE = 0,
    XCN_NCRYPT_ALLOW_DECRYPT_FLAG = 1,
    XCN_NCRYPT_ALLOW_SIGNING_FLAG = 2,
    XCN_NCRYPT_ALLOW_KEY_AGREEMENT_FLAG = 4,
    XCN_NCRYPT_ALLOW_KEY_IMPORT_FLAG = 8,
    XCN_NCRYPT_ALLOW_ALL_USAGES = 16777215,
};
pub const XCN_NCRYPT_ALLOW_USAGES_NONE = X509PrivateKeyUsageFlags.XCN_NCRYPT_ALLOW_USAGES_NONE;
pub const XCN_NCRYPT_ALLOW_DECRYPT_FLAG = X509PrivateKeyUsageFlags.XCN_NCRYPT_ALLOW_DECRYPT_FLAG;
pub const XCN_NCRYPT_ALLOW_SIGNING_FLAG = X509PrivateKeyUsageFlags.XCN_NCRYPT_ALLOW_SIGNING_FLAG;
pub const XCN_NCRYPT_ALLOW_KEY_AGREEMENT_FLAG = X509PrivateKeyUsageFlags.XCN_NCRYPT_ALLOW_KEY_AGREEMENT_FLAG;
pub const XCN_NCRYPT_ALLOW_KEY_IMPORT_FLAG = X509PrivateKeyUsageFlags.XCN_NCRYPT_ALLOW_KEY_IMPORT_FLAG;
pub const XCN_NCRYPT_ALLOW_ALL_USAGES = X509PrivateKeyUsageFlags.XCN_NCRYPT_ALLOW_ALL_USAGES;

pub const X509PrivateKeyProtection = extern enum(i32) {
    XCN_NCRYPT_UI_NO_PROTECTION_FLAG = 0,
    XCN_NCRYPT_UI_PROTECT_KEY_FLAG = 1,
    XCN_NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG = 2,
    XCN_NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG = 4,
    XCN_NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG = 8,
};
pub const XCN_NCRYPT_UI_NO_PROTECTION_FLAG = X509PrivateKeyProtection.XCN_NCRYPT_UI_NO_PROTECTION_FLAG;
pub const XCN_NCRYPT_UI_PROTECT_KEY_FLAG = X509PrivateKeyProtection.XCN_NCRYPT_UI_PROTECT_KEY_FLAG;
pub const XCN_NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG = X509PrivateKeyProtection.XCN_NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG;
pub const XCN_NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG = X509PrivateKeyProtection.XCN_NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG;
pub const XCN_NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG = X509PrivateKeyProtection.XCN_NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG;

pub const X509PrivateKeyVerify = extern enum(i32) {
    VerifyNone = 0,
    VerifySilent = 1,
    VerifySmartCardNone = 2,
    VerifySmartCardSilent = 3,
    VerifyAllowUI = 4,
};
pub const VerifyNone = X509PrivateKeyVerify.VerifyNone;
pub const VerifySilent = X509PrivateKeyVerify.VerifySilent;
pub const VerifySmartCardNone = X509PrivateKeyVerify.VerifySmartCardNone;
pub const VerifySmartCardSilent = X509PrivateKeyVerify.VerifySmartCardSilent;
pub const VerifyAllowUI = X509PrivateKeyVerify.VerifyAllowUI;

const IID_IX509PrivateKey_Value = @import("../zig.zig").Guid.initString("728AB30C-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509PrivateKey = &IID_IX509PrivateKey_Value;
pub const IX509PrivateKey = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Open: fn(
            self: *const IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: fn(
            self: *const IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: fn(
            self: *const IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Verify: fn(
            self: *const IX509PrivateKey,
            VerifyType: X509PrivateKeyVerify,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Import: fn(
            self: *const IX509PrivateKey,
            strExportType: BSTR,
            strEncodedKey: BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Export: fn(
            self: *const IX509PrivateKey,
            strExportType: BSTR,
            Encoding: EncodingType,
            pstrEncodedKey: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExportPublicKey: fn(
            self: *const IX509PrivateKey,
            ppPublicKey: **IX509PublicKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ContainerName: fn(
            self: *const IX509PrivateKey,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ContainerName: fn(
            self: *const IX509PrivateKey,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ContainerNamePrefix: fn(
            self: *const IX509PrivateKey,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ContainerNamePrefix: fn(
            self: *const IX509PrivateKey,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ReaderName: fn(
            self: *const IX509PrivateKey,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ReaderName: fn(
            self: *const IX509PrivateKey,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CspInformations: fn(
            self: *const IX509PrivateKey,
            ppValue: **ICspInformations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CspInformations: fn(
            self: *const IX509PrivateKey,
            pValue: ?*ICspInformations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CspStatus: fn(
            self: *const IX509PrivateKey,
            ppValue: **ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CspStatus: fn(
            self: *const IX509PrivateKey,
            pValue: ?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ProviderName: fn(
            self: *const IX509PrivateKey,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ProviderName: fn(
            self: *const IX509PrivateKey,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ProviderType: fn(
            self: *const IX509PrivateKey,
            pValue: *X509ProviderType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ProviderType: fn(
            self: *const IX509PrivateKey,
            Value: X509ProviderType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_LegacyCsp: fn(
            self: *const IX509PrivateKey,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_LegacyCsp: fn(
            self: *const IX509PrivateKey,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Algorithm: fn(
            self: *const IX509PrivateKey,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Algorithm: fn(
            self: *const IX509PrivateKey,
            pValue: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_KeySpec: fn(
            self: *const IX509PrivateKey,
            pValue: *X509KeySpec,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_KeySpec: fn(
            self: *const IX509PrivateKey,
            Value: X509KeySpec,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Length: fn(
            self: *const IX509PrivateKey,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Length: fn(
            self: *const IX509PrivateKey,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ExportPolicy: fn(
            self: *const IX509PrivateKey,
            pValue: *X509PrivateKeyExportFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ExportPolicy: fn(
            self: *const IX509PrivateKey,
            Value: X509PrivateKeyExportFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_KeyUsage: fn(
            self: *const IX509PrivateKey,
            pValue: *X509PrivateKeyUsageFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_KeyUsage: fn(
            self: *const IX509PrivateKey,
            Value: X509PrivateKeyUsageFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_KeyProtection: fn(
            self: *const IX509PrivateKey,
            pValue: *X509PrivateKeyProtection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_KeyProtection: fn(
            self: *const IX509PrivateKey,
            Value: X509PrivateKeyProtection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MachineContext: fn(
            self: *const IX509PrivateKey,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MachineContext: fn(
            self: *const IX509PrivateKey,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SecurityDescriptor: fn(
            self: *const IX509PrivateKey,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SecurityDescriptor: fn(
            self: *const IX509PrivateKey,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Certificate: fn(
            self: *const IX509PrivateKey,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Certificate: fn(
            self: *const IX509PrivateKey,
            Encoding: EncodingType,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UniqueContainerName: fn(
            self: *const IX509PrivateKey,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Opened: fn(
            self: *const IX509PrivateKey,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DefaultContainer: fn(
            self: *const IX509PrivateKey,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Existing: fn(
            self: *const IX509PrivateKey,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Existing: fn(
            self: *const IX509PrivateKey,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Silent: fn(
            self: *const IX509PrivateKey,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Silent: fn(
            self: *const IX509PrivateKey,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ParentWindow: fn(
            self: *const IX509PrivateKey,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ParentWindow: fn(
            self: *const IX509PrivateKey,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UIContextMessage: fn(
            self: *const IX509PrivateKey,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_UIContextMessage: fn(
            self: *const IX509PrivateKey,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Pin: fn(
            self: *const IX509PrivateKey,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_FriendlyName: fn(
            self: *const IX509PrivateKey,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_FriendlyName: fn(
            self: *const IX509PrivateKey,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Description: fn(
            self: *const IX509PrivateKey,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Description: fn(
            self: *const IX509PrivateKey,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_Open(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).Open(@ptrCast(*const IX509PrivateKey, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_Create(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).Create(@ptrCast(*const IX509PrivateKey, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_Close(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).Close(@ptrCast(*const IX509PrivateKey, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_Delete(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).Delete(@ptrCast(*const IX509PrivateKey, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_Verify(self: *const T, VerifyType: X509PrivateKeyVerify) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).Verify(@ptrCast(*const IX509PrivateKey, self), VerifyType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_Import(self: *const T, strExportType: BSTR, strEncodedKey: BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).Import(@ptrCast(*const IX509PrivateKey, self), strExportType, strEncodedKey, Encoding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_Export(self: *const T, strExportType: BSTR, Encoding: EncodingType, pstrEncodedKey: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).Export(@ptrCast(*const IX509PrivateKey, self), strExportType, Encoding, pstrEncodedKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_ExportPublicKey(self: *const T, ppPublicKey: **IX509PublicKey) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).ExportPublicKey(@ptrCast(*const IX509PrivateKey, self), ppPublicKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_ContainerName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_ContainerName(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_ContainerName(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_ContainerName(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_ContainerNamePrefix(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_ContainerNamePrefix(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_ContainerNamePrefix(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_ContainerNamePrefix(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_ReaderName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_ReaderName(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_ReaderName(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_ReaderName(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_CspInformations(self: *const T, ppValue: **ICspInformations) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_CspInformations(@ptrCast(*const IX509PrivateKey, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_CspInformations(self: *const T, pValue: ?*ICspInformations) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_CspInformations(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_CspStatus(self: *const T, ppValue: **ICspStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_CspStatus(@ptrCast(*const IX509PrivateKey, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_CspStatus(self: *const T, pValue: ?*ICspStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_CspStatus(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_ProviderName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_ProviderName(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_ProviderName(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_ProviderName(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_ProviderType(self: *const T, pValue: *X509ProviderType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_ProviderType(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_ProviderType(self: *const T, Value: X509ProviderType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_ProviderType(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_LegacyCsp(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_LegacyCsp(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_LegacyCsp(self: *const T, Value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_LegacyCsp(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_Algorithm(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_Algorithm(@ptrCast(*const IX509PrivateKey, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_Algorithm(self: *const T, pValue: ?*IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_Algorithm(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_KeySpec(self: *const T, pValue: *X509KeySpec) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_KeySpec(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_KeySpec(self: *const T, Value: X509KeySpec) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_KeySpec(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_Length(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_Length(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_Length(self: *const T, Value: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_Length(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_ExportPolicy(self: *const T, pValue: *X509PrivateKeyExportFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_ExportPolicy(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_ExportPolicy(self: *const T, Value: X509PrivateKeyExportFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_ExportPolicy(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_KeyUsage(self: *const T, pValue: *X509PrivateKeyUsageFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_KeyUsage(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_KeyUsage(self: *const T, Value: X509PrivateKeyUsageFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_KeyUsage(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_KeyProtection(self: *const T, pValue: *X509PrivateKeyProtection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_KeyProtection(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_KeyProtection(self: *const T, Value: X509PrivateKeyProtection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_KeyProtection(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_MachineContext(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_MachineContext(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_MachineContext(self: *const T, Value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_MachineContext(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_SecurityDescriptor(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_SecurityDescriptor(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_SecurityDescriptor(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_SecurityDescriptor(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_Certificate(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_Certificate(@ptrCast(*const IX509PrivateKey, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_Certificate(self: *const T, Encoding: EncodingType, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_Certificate(@ptrCast(*const IX509PrivateKey, self), Encoding, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_UniqueContainerName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_UniqueContainerName(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_Opened(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_Opened(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_DefaultContainer(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_DefaultContainer(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_Existing(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_Existing(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_Existing(self: *const T, Value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_Existing(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_Silent(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_Silent(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_Silent(self: *const T, Value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_Silent(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_ParentWindow(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_ParentWindow(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_ParentWindow(self: *const T, Value: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_ParentWindow(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_UIContextMessage(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_UIContextMessage(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_UIContextMessage(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_UIContextMessage(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_Pin(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_Pin(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_FriendlyName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_FriendlyName(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_FriendlyName(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_FriendlyName(@ptrCast(*const IX509PrivateKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_get_Description(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).get_Description(@ptrCast(*const IX509PrivateKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey_put_Description(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey.VTable, self.vtable).put_Description(@ptrCast(*const IX509PrivateKey, self), Value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const X509HardwareKeyUsageFlags = extern enum(i32) {
    XCN_NCRYPT_PCP_NONE = 0,
    XCN_NCRYPT_TPM12_PROVIDER = 65536,
    XCN_NCRYPT_PCP_SIGNATURE_KEY = 1,
    XCN_NCRYPT_PCP_ENCRYPTION_KEY = 2,
    XCN_NCRYPT_PCP_GENERIC_KEY = 3,
    XCN_NCRYPT_PCP_STORAGE_KEY = 4,
    XCN_NCRYPT_PCP_IDENTITY_KEY = 8,
};
pub const XCN_NCRYPT_PCP_NONE = X509HardwareKeyUsageFlags.XCN_NCRYPT_PCP_NONE;
pub const XCN_NCRYPT_TPM12_PROVIDER = X509HardwareKeyUsageFlags.XCN_NCRYPT_TPM12_PROVIDER;
pub const XCN_NCRYPT_PCP_SIGNATURE_KEY = X509HardwareKeyUsageFlags.XCN_NCRYPT_PCP_SIGNATURE_KEY;
pub const XCN_NCRYPT_PCP_ENCRYPTION_KEY = X509HardwareKeyUsageFlags.XCN_NCRYPT_PCP_ENCRYPTION_KEY;
pub const XCN_NCRYPT_PCP_GENERIC_KEY = X509HardwareKeyUsageFlags.XCN_NCRYPT_PCP_GENERIC_KEY;
pub const XCN_NCRYPT_PCP_STORAGE_KEY = X509HardwareKeyUsageFlags.XCN_NCRYPT_PCP_STORAGE_KEY;
pub const XCN_NCRYPT_PCP_IDENTITY_KEY = X509HardwareKeyUsageFlags.XCN_NCRYPT_PCP_IDENTITY_KEY;

pub const X509KeyParametersExportType = extern enum(i32) {
    XCN_CRYPT_OID_USE_CURVE_NONE = 0,
    XCN_CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG = 536870912,
    XCN_CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG = 268435456,
};
pub const XCN_CRYPT_OID_USE_CURVE_NONE = X509KeyParametersExportType.XCN_CRYPT_OID_USE_CURVE_NONE;
pub const XCN_CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG = X509KeyParametersExportType.XCN_CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG;
pub const XCN_CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG = X509KeyParametersExportType.XCN_CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG;

const IID_IX509PrivateKey2_Value = @import("../zig.zig").Guid.initString("728AB362-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509PrivateKey2 = &IID_IX509PrivateKey2_Value;
pub const IX509PrivateKey2 = extern struct {
    pub const VTable = extern struct {
        base: IX509PrivateKey.VTable,
        get_HardwareKeyUsage: fn(
            self: *const IX509PrivateKey2,
            pValue: *X509HardwareKeyUsageFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_HardwareKeyUsage: fn(
            self: *const IX509PrivateKey2,
            Value: X509HardwareKeyUsageFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AlternateStorageLocation: fn(
            self: *const IX509PrivateKey2,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AlternateStorageLocation: fn(
            self: *const IX509PrivateKey2,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AlgorithmName: fn(
            self: *const IX509PrivateKey2,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AlgorithmName: fn(
            self: *const IX509PrivateKey2,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AlgorithmParameters: fn(
            self: *const IX509PrivateKey2,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AlgorithmParameters: fn(
            self: *const IX509PrivateKey2,
            Encoding: EncodingType,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ParametersExportType: fn(
            self: *const IX509PrivateKey2,
            pValue: *X509KeyParametersExportType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ParametersExportType: fn(
            self: *const IX509PrivateKey2,
            Value: X509KeyParametersExportType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509PrivateKey.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey2_get_HardwareKeyUsage(self: *const T, pValue: *X509HardwareKeyUsageFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey2.VTable, self.vtable).get_HardwareKeyUsage(@ptrCast(*const IX509PrivateKey2, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey2_put_HardwareKeyUsage(self: *const T, Value: X509HardwareKeyUsageFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey2.VTable, self.vtable).put_HardwareKeyUsage(@ptrCast(*const IX509PrivateKey2, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey2_get_AlternateStorageLocation(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey2.VTable, self.vtable).get_AlternateStorageLocation(@ptrCast(*const IX509PrivateKey2, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey2_put_AlternateStorageLocation(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey2.VTable, self.vtable).put_AlternateStorageLocation(@ptrCast(*const IX509PrivateKey2, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey2_get_AlgorithmName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey2.VTable, self.vtable).get_AlgorithmName(@ptrCast(*const IX509PrivateKey2, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey2_put_AlgorithmName(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey2.VTable, self.vtable).put_AlgorithmName(@ptrCast(*const IX509PrivateKey2, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey2_get_AlgorithmParameters(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey2.VTable, self.vtable).get_AlgorithmParameters(@ptrCast(*const IX509PrivateKey2, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey2_put_AlgorithmParameters(self: *const T, Encoding: EncodingType, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey2.VTable, self.vtable).put_AlgorithmParameters(@ptrCast(*const IX509PrivateKey2, self), Encoding, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey2_get_ParametersExportType(self: *const T, pValue: *X509KeyParametersExportType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey2.VTable, self.vtable).get_ParametersExportType(@ptrCast(*const IX509PrivateKey2, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PrivateKey2_put_ParametersExportType(self: *const T, Value: X509KeyParametersExportType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PrivateKey2.VTable, self.vtable).put_ParametersExportType(@ptrCast(*const IX509PrivateKey2, self), Value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509EndorsementKey_Value = @import("../zig.zig").Guid.initString("B11CD855-F4C4-4FC6-B710-4422237F09E9");
pub const IID_IX509EndorsementKey = &IID_IX509EndorsementKey_Value;
pub const IX509EndorsementKey = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ProviderName: fn(
            self: *const IX509EndorsementKey,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ProviderName: fn(
            self: *const IX509EndorsementKey,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Length: fn(
            self: *const IX509EndorsementKey,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Opened: fn(
            self: *const IX509EndorsementKey,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCertificate: fn(
            self: *const IX509EndorsementKey,
            Encoding: EncodingType,
            strCertificate: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveCertificate: fn(
            self: *const IX509EndorsementKey,
            Encoding: EncodingType,
            strCertificate: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateByIndex: fn(
            self: *const IX509EndorsementKey,
            ManufacturerOnly: i16,
            dwIndex: i32,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateCount: fn(
            self: *const IX509EndorsementKey,
            ManufacturerOnly: i16,
            pCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExportPublicKey: fn(
            self: *const IX509EndorsementKey,
            ppPublicKey: **IX509PublicKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: fn(
            self: *const IX509EndorsementKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IX509EndorsementKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EndorsementKey_get_ProviderName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EndorsementKey.VTable, self.vtable).get_ProviderName(@ptrCast(*const IX509EndorsementKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EndorsementKey_put_ProviderName(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EndorsementKey.VTable, self.vtable).put_ProviderName(@ptrCast(*const IX509EndorsementKey, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EndorsementKey_get_Length(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EndorsementKey.VTable, self.vtable).get_Length(@ptrCast(*const IX509EndorsementKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EndorsementKey_get_Opened(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EndorsementKey.VTable, self.vtable).get_Opened(@ptrCast(*const IX509EndorsementKey, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EndorsementKey_AddCertificate(self: *const T, Encoding: EncodingType, strCertificate: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EndorsementKey.VTable, self.vtable).AddCertificate(@ptrCast(*const IX509EndorsementKey, self), Encoding, strCertificate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EndorsementKey_RemoveCertificate(self: *const T, Encoding: EncodingType, strCertificate: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EndorsementKey.VTable, self.vtable).RemoveCertificate(@ptrCast(*const IX509EndorsementKey, self), Encoding, strCertificate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EndorsementKey_GetCertificateByIndex(self: *const T, ManufacturerOnly: i16, dwIndex: i32, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EndorsementKey.VTable, self.vtable).GetCertificateByIndex(@ptrCast(*const IX509EndorsementKey, self), ManufacturerOnly, dwIndex, Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EndorsementKey_GetCertificateCount(self: *const T, ManufacturerOnly: i16, pCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EndorsementKey.VTable, self.vtable).GetCertificateCount(@ptrCast(*const IX509EndorsementKey, self), ManufacturerOnly, pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EndorsementKey_ExportPublicKey(self: *const T, ppPublicKey: **IX509PublicKey) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EndorsementKey.VTable, self.vtable).ExportPublicKey(@ptrCast(*const IX509EndorsementKey, self), ppPublicKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EndorsementKey_Open(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EndorsementKey.VTable, self.vtable).Open(@ptrCast(*const IX509EndorsementKey, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EndorsementKey_Close(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EndorsementKey.VTable, self.vtable).Close(@ptrCast(*const IX509EndorsementKey, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509Extension_Value = @import("../zig.zig").Guid.initString("728AB30D-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509Extension = &IID_IX509Extension_Value;
pub const IX509Extension = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const IX509Extension,
            pObjectId: ?*IObjectId,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ObjectId: fn(
            self: *const IX509Extension,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RawData: fn(
            self: *const IX509Extension,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Critical: fn(
            self: *const IX509Extension,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Critical: fn(
            self: *const IX509Extension,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Extension_Initialize(self: *const T, pObjectId: ?*IObjectId, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Extension.VTable, self.vtable).Initialize(@ptrCast(*const IX509Extension, self), pObjectId, Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Extension_get_ObjectId(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Extension.VTable, self.vtable).get_ObjectId(@ptrCast(*const IX509Extension, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Extension_get_RawData(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Extension.VTable, self.vtable).get_RawData(@ptrCast(*const IX509Extension, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Extension_get_Critical(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Extension.VTable, self.vtable).get_Critical(@ptrCast(*const IX509Extension, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Extension_put_Critical(self: *const T, Value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Extension.VTable, self.vtable).put_Critical(@ptrCast(*const IX509Extension, self), Value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509Extensions_Value = @import("../zig.zig").Guid.initString("728AB30E-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509Extensions = &IID_IX509Extensions_Value;
pub const IX509Extensions = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: fn(
            self: *const IX509Extensions,
            Index: i32,
            pVal: **IX509Extension,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IX509Extensions,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IX509Extensions,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IX509Extensions,
            pVal: ?*IX509Extension,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IX509Extensions,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IndexByObjectId: fn(
            self: *const IX509Extensions,
            pObjectId: ?*IObjectId,
            pIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: fn(
            self: *const IX509Extensions,
            pValue: ?*IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Extensions_get_ItemByIndex(self: *const T, Index: i32, pVal: **IX509Extension) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Extensions.VTable, self.vtable).get_ItemByIndex(@ptrCast(*const IX509Extensions, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Extensions_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Extensions.VTable, self.vtable).get_Count(@ptrCast(*const IX509Extensions, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Extensions_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Extensions.VTable, self.vtable).get__NewEnum(@ptrCast(*const IX509Extensions, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Extensions_Add(self: *const T, pVal: ?*IX509Extension) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Extensions.VTable, self.vtable).Add(@ptrCast(*const IX509Extensions, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Extensions_Remove(self: *const T, Index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Extensions.VTable, self.vtable).Remove(@ptrCast(*const IX509Extensions, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Extensions_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Extensions.VTable, self.vtable).Clear(@ptrCast(*const IX509Extensions, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Extensions_get_IndexByObjectId(self: *const T, pObjectId: ?*IObjectId, pIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Extensions.VTable, self.vtable).get_IndexByObjectId(@ptrCast(*const IX509Extensions, self), pObjectId, pIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Extensions_AddRange(self: *const T, pValue: ?*IX509Extensions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Extensions.VTable, self.vtable).AddRange(@ptrCast(*const IX509Extensions, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const X509KeyUsageFlags = extern enum(i32) {
    XCN_CERT_NO_KEY_USAGE = 0,
    XCN_CERT_DIGITAL_SIGNATURE_KEY_USAGE = 128,
    XCN_CERT_NON_REPUDIATION_KEY_USAGE = 64,
    XCN_CERT_KEY_ENCIPHERMENT_KEY_USAGE = 32,
    XCN_CERT_DATA_ENCIPHERMENT_KEY_USAGE = 16,
    XCN_CERT_KEY_AGREEMENT_KEY_USAGE = 8,
    XCN_CERT_KEY_CERT_SIGN_KEY_USAGE = 4,
    XCN_CERT_OFFLINE_CRL_SIGN_KEY_USAGE = 2,
    XCN_CERT_CRL_SIGN_KEY_USAGE = 2,
    XCN_CERT_ENCIPHER_ONLY_KEY_USAGE = 1,
    XCN_CERT_DECIPHER_ONLY_KEY_USAGE = 32768,
};
pub const XCN_CERT_NO_KEY_USAGE = X509KeyUsageFlags.XCN_CERT_NO_KEY_USAGE;
pub const XCN_CERT_DIGITAL_SIGNATURE_KEY_USAGE = X509KeyUsageFlags.XCN_CERT_DIGITAL_SIGNATURE_KEY_USAGE;
pub const XCN_CERT_NON_REPUDIATION_KEY_USAGE = X509KeyUsageFlags.XCN_CERT_NON_REPUDIATION_KEY_USAGE;
pub const XCN_CERT_KEY_ENCIPHERMENT_KEY_USAGE = X509KeyUsageFlags.XCN_CERT_KEY_ENCIPHERMENT_KEY_USAGE;
pub const XCN_CERT_DATA_ENCIPHERMENT_KEY_USAGE = X509KeyUsageFlags.XCN_CERT_DATA_ENCIPHERMENT_KEY_USAGE;
pub const XCN_CERT_KEY_AGREEMENT_KEY_USAGE = X509KeyUsageFlags.XCN_CERT_KEY_AGREEMENT_KEY_USAGE;
pub const XCN_CERT_KEY_CERT_SIGN_KEY_USAGE = X509KeyUsageFlags.XCN_CERT_KEY_CERT_SIGN_KEY_USAGE;
pub const XCN_CERT_OFFLINE_CRL_SIGN_KEY_USAGE = X509KeyUsageFlags.XCN_CERT_OFFLINE_CRL_SIGN_KEY_USAGE;
pub const XCN_CERT_CRL_SIGN_KEY_USAGE = X509KeyUsageFlags.XCN_CERT_CRL_SIGN_KEY_USAGE;
pub const XCN_CERT_ENCIPHER_ONLY_KEY_USAGE = X509KeyUsageFlags.XCN_CERT_ENCIPHER_ONLY_KEY_USAGE;
pub const XCN_CERT_DECIPHER_ONLY_KEY_USAGE = X509KeyUsageFlags.XCN_CERT_DECIPHER_ONLY_KEY_USAGE;

const IID_IX509ExtensionKeyUsage_Value = @import("../zig.zig").Guid.initString("728AB30F-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509ExtensionKeyUsage = &IID_IX509ExtensionKeyUsage_Value;
pub const IX509ExtensionKeyUsage = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: fn(
            self: *const IX509ExtensionKeyUsage,
            UsageFlags: X509KeyUsageFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509ExtensionKeyUsage,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_KeyUsage: fn(
            self: *const IX509ExtensionKeyUsage,
            pValue: *X509KeyUsageFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Extension.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionKeyUsage_InitializeEncode(self: *const T, UsageFlags: X509KeyUsageFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionKeyUsage.VTable, self.vtable).InitializeEncode(@ptrCast(*const IX509ExtensionKeyUsage, self), UsageFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionKeyUsage_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionKeyUsage.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509ExtensionKeyUsage, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionKeyUsage_get_KeyUsage(self: *const T, pValue: *X509KeyUsageFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionKeyUsage.VTable, self.vtable).get_KeyUsage(@ptrCast(*const IX509ExtensionKeyUsage, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509ExtensionEnhancedKeyUsage_Value = @import("../zig.zig").Guid.initString("728AB310-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509ExtensionEnhancedKeyUsage = &IID_IX509ExtensionEnhancedKeyUsage_Value;
pub const IX509ExtensionEnhancedKeyUsage = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: fn(
            self: *const IX509ExtensionEnhancedKeyUsage,
            pValue: ?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509ExtensionEnhancedKeyUsage,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EnhancedKeyUsage: fn(
            self: *const IX509ExtensionEnhancedKeyUsage,
            ppValue: **IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Extension.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionEnhancedKeyUsage_InitializeEncode(self: *const T, pValue: ?*IObjectIds) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionEnhancedKeyUsage.VTable, self.vtable).InitializeEncode(@ptrCast(*const IX509ExtensionEnhancedKeyUsage, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionEnhancedKeyUsage_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionEnhancedKeyUsage.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509ExtensionEnhancedKeyUsage, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionEnhancedKeyUsage_get_EnhancedKeyUsage(self: *const T, ppValue: **IObjectIds) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionEnhancedKeyUsage.VTable, self.vtable).get_EnhancedKeyUsage(@ptrCast(*const IX509ExtensionEnhancedKeyUsage, self), ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509ExtensionTemplateName_Value = @import("../zig.zig").Guid.initString("728AB311-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509ExtensionTemplateName = &IID_IX509ExtensionTemplateName_Value;
pub const IX509ExtensionTemplateName = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: fn(
            self: *const IX509ExtensionTemplateName,
            strTemplateName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509ExtensionTemplateName,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_TemplateName: fn(
            self: *const IX509ExtensionTemplateName,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Extension.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionTemplateName_InitializeEncode(self: *const T, strTemplateName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionTemplateName.VTable, self.vtable).InitializeEncode(@ptrCast(*const IX509ExtensionTemplateName, self), strTemplateName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionTemplateName_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionTemplateName.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509ExtensionTemplateName, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionTemplateName_get_TemplateName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionTemplateName.VTable, self.vtable).get_TemplateName(@ptrCast(*const IX509ExtensionTemplateName, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509ExtensionTemplate_Value = @import("../zig.zig").Guid.initString("728AB312-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509ExtensionTemplate = &IID_IX509ExtensionTemplate_Value;
pub const IX509ExtensionTemplate = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: fn(
            self: *const IX509ExtensionTemplate,
            pTemplateOid: ?*IObjectId,
            MajorVersion: i32,
            MinorVersion: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509ExtensionTemplate,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_TemplateOid: fn(
            self: *const IX509ExtensionTemplate,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MajorVersion: fn(
            self: *const IX509ExtensionTemplate,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MinorVersion: fn(
            self: *const IX509ExtensionTemplate,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Extension.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionTemplate_InitializeEncode(self: *const T, pTemplateOid: ?*IObjectId, MajorVersion: i32, MinorVersion: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionTemplate.VTable, self.vtable).InitializeEncode(@ptrCast(*const IX509ExtensionTemplate, self), pTemplateOid, MajorVersion, MinorVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionTemplate_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionTemplate.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509ExtensionTemplate, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionTemplate_get_TemplateOid(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionTemplate.VTable, self.vtable).get_TemplateOid(@ptrCast(*const IX509ExtensionTemplate, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionTemplate_get_MajorVersion(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionTemplate.VTable, self.vtable).get_MajorVersion(@ptrCast(*const IX509ExtensionTemplate, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionTemplate_get_MinorVersion(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionTemplate.VTable, self.vtable).get_MinorVersion(@ptrCast(*const IX509ExtensionTemplate, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const AlternativeNameType = extern enum(i32) {
    XCN_CERT_ALT_NAME_UNKNOWN = 0,
    XCN_CERT_ALT_NAME_OTHER_NAME = 1,
    XCN_CERT_ALT_NAME_RFC822_NAME = 2,
    XCN_CERT_ALT_NAME_DNS_NAME = 3,
    XCN_CERT_ALT_NAME_X400_ADDRESS = 4,
    XCN_CERT_ALT_NAME_DIRECTORY_NAME = 5,
    XCN_CERT_ALT_NAME_EDI_PARTY_NAME = 6,
    XCN_CERT_ALT_NAME_URL = 7,
    XCN_CERT_ALT_NAME_IP_ADDRESS = 8,
    XCN_CERT_ALT_NAME_REGISTERED_ID = 9,
    XCN_CERT_ALT_NAME_GUID = 10,
    XCN_CERT_ALT_NAME_USER_PRINCIPLE_NAME = 11,
};
pub const XCN_CERT_ALT_NAME_UNKNOWN = AlternativeNameType.XCN_CERT_ALT_NAME_UNKNOWN;
pub const XCN_CERT_ALT_NAME_OTHER_NAME = AlternativeNameType.XCN_CERT_ALT_NAME_OTHER_NAME;
pub const XCN_CERT_ALT_NAME_RFC822_NAME = AlternativeNameType.XCN_CERT_ALT_NAME_RFC822_NAME;
pub const XCN_CERT_ALT_NAME_DNS_NAME = AlternativeNameType.XCN_CERT_ALT_NAME_DNS_NAME;
pub const XCN_CERT_ALT_NAME_X400_ADDRESS = AlternativeNameType.XCN_CERT_ALT_NAME_X400_ADDRESS;
pub const XCN_CERT_ALT_NAME_DIRECTORY_NAME = AlternativeNameType.XCN_CERT_ALT_NAME_DIRECTORY_NAME;
pub const XCN_CERT_ALT_NAME_EDI_PARTY_NAME = AlternativeNameType.XCN_CERT_ALT_NAME_EDI_PARTY_NAME;
pub const XCN_CERT_ALT_NAME_URL = AlternativeNameType.XCN_CERT_ALT_NAME_URL;
pub const XCN_CERT_ALT_NAME_IP_ADDRESS = AlternativeNameType.XCN_CERT_ALT_NAME_IP_ADDRESS;
pub const XCN_CERT_ALT_NAME_REGISTERED_ID = AlternativeNameType.XCN_CERT_ALT_NAME_REGISTERED_ID;
pub const XCN_CERT_ALT_NAME_GUID = AlternativeNameType.XCN_CERT_ALT_NAME_GUID;
pub const XCN_CERT_ALT_NAME_USER_PRINCIPLE_NAME = AlternativeNameType.XCN_CERT_ALT_NAME_USER_PRINCIPLE_NAME;

const IID_IAlternativeName_Value = @import("../zig.zig").Guid.initString("728AB313-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IAlternativeName = &IID_IAlternativeName_Value;
pub const IAlternativeName = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InitializeFromString: fn(
            self: *const IAlternativeName,
            Type: AlternativeNameType,
            strValue: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromRawData: fn(
            self: *const IAlternativeName,
            Type: AlternativeNameType,
            Encoding: EncodingType,
            strRawData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromOtherName: fn(
            self: *const IAlternativeName,
            pObjectId: ?*IObjectId,
            Encoding: EncodingType,
            strRawData: BSTR,
            ToBeWrapped: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Type: fn(
            self: *const IAlternativeName,
            pValue: *AlternativeNameType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_StrValue: fn(
            self: *const IAlternativeName,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ObjectId: fn(
            self: *const IAlternativeName,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RawData: fn(
            self: *const IAlternativeName,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlternativeName_InitializeFromString(self: *const T, Type: AlternativeNameType, strValue: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlternativeName.VTable, self.vtable).InitializeFromString(@ptrCast(*const IAlternativeName, self), Type, strValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlternativeName_InitializeFromRawData(self: *const T, Type: AlternativeNameType, Encoding: EncodingType, strRawData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlternativeName.VTable, self.vtable).InitializeFromRawData(@ptrCast(*const IAlternativeName, self), Type, Encoding, strRawData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlternativeName_InitializeFromOtherName(self: *const T, pObjectId: ?*IObjectId, Encoding: EncodingType, strRawData: BSTR, ToBeWrapped: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlternativeName.VTable, self.vtable).InitializeFromOtherName(@ptrCast(*const IAlternativeName, self), pObjectId, Encoding, strRawData, ToBeWrapped);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlternativeName_get_Type(self: *const T, pValue: *AlternativeNameType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlternativeName.VTable, self.vtable).get_Type(@ptrCast(*const IAlternativeName, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlternativeName_get_StrValue(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlternativeName.VTable, self.vtable).get_StrValue(@ptrCast(*const IAlternativeName, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlternativeName_get_ObjectId(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlternativeName.VTable, self.vtable).get_ObjectId(@ptrCast(*const IAlternativeName, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlternativeName_get_RawData(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlternativeName.VTable, self.vtable).get_RawData(@ptrCast(*const IAlternativeName, self), Encoding, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAlternativeNames_Value = @import("../zig.zig").Guid.initString("728AB314-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IAlternativeNames = &IID_IAlternativeNames_Value;
pub const IAlternativeNames = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: fn(
            self: *const IAlternativeNames,
            Index: i32,
            pVal: **IAlternativeName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IAlternativeNames,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IAlternativeNames,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IAlternativeNames,
            pVal: ?*IAlternativeName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IAlternativeNames,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IAlternativeNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlternativeNames_get_ItemByIndex(self: *const T, Index: i32, pVal: **IAlternativeName) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlternativeNames.VTable, self.vtable).get_ItemByIndex(@ptrCast(*const IAlternativeNames, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlternativeNames_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlternativeNames.VTable, self.vtable).get_Count(@ptrCast(*const IAlternativeNames, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlternativeNames_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlternativeNames.VTable, self.vtable).get__NewEnum(@ptrCast(*const IAlternativeNames, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlternativeNames_Add(self: *const T, pVal: ?*IAlternativeName) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlternativeNames.VTable, self.vtable).Add(@ptrCast(*const IAlternativeNames, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlternativeNames_Remove(self: *const T, Index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlternativeNames.VTable, self.vtable).Remove(@ptrCast(*const IAlternativeNames, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAlternativeNames_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAlternativeNames.VTable, self.vtable).Clear(@ptrCast(*const IAlternativeNames, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509ExtensionAlternativeNames_Value = @import("../zig.zig").Guid.initString("728AB315-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509ExtensionAlternativeNames = &IID_IX509ExtensionAlternativeNames_Value;
pub const IX509ExtensionAlternativeNames = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: fn(
            self: *const IX509ExtensionAlternativeNames,
            pValue: ?*IAlternativeNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509ExtensionAlternativeNames,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AlternativeNames: fn(
            self: *const IX509ExtensionAlternativeNames,
            ppValue: **IAlternativeNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Extension.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionAlternativeNames_InitializeEncode(self: *const T, pValue: ?*IAlternativeNames) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionAlternativeNames.VTable, self.vtable).InitializeEncode(@ptrCast(*const IX509ExtensionAlternativeNames, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionAlternativeNames_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionAlternativeNames.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509ExtensionAlternativeNames, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionAlternativeNames_get_AlternativeNames(self: *const T, ppValue: **IAlternativeNames) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionAlternativeNames.VTable, self.vtable).get_AlternativeNames(@ptrCast(*const IX509ExtensionAlternativeNames, self), ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509ExtensionBasicConstraints_Value = @import("../zig.zig").Guid.initString("728AB316-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509ExtensionBasicConstraints = &IID_IX509ExtensionBasicConstraints_Value;
pub const IX509ExtensionBasicConstraints = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: fn(
            self: *const IX509ExtensionBasicConstraints,
            IsCA: i16,
            PathLenConstraint: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509ExtensionBasicConstraints,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsCA: fn(
            self: *const IX509ExtensionBasicConstraints,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PathLenConstraint: fn(
            self: *const IX509ExtensionBasicConstraints,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Extension.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionBasicConstraints_InitializeEncode(self: *const T, IsCA: i16, PathLenConstraint: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionBasicConstraints.VTable, self.vtable).InitializeEncode(@ptrCast(*const IX509ExtensionBasicConstraints, self), IsCA, PathLenConstraint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionBasicConstraints_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionBasicConstraints.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509ExtensionBasicConstraints, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionBasicConstraints_get_IsCA(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionBasicConstraints.VTable, self.vtable).get_IsCA(@ptrCast(*const IX509ExtensionBasicConstraints, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionBasicConstraints_get_PathLenConstraint(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionBasicConstraints.VTable, self.vtable).get_PathLenConstraint(@ptrCast(*const IX509ExtensionBasicConstraints, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509ExtensionSubjectKeyIdentifier_Value = @import("../zig.zig").Guid.initString("728AB317-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509ExtensionSubjectKeyIdentifier = &IID_IX509ExtensionSubjectKeyIdentifier_Value;
pub const IX509ExtensionSubjectKeyIdentifier = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: fn(
            self: *const IX509ExtensionSubjectKeyIdentifier,
            Encoding: EncodingType,
            strKeyIdentifier: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509ExtensionSubjectKeyIdentifier,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SubjectKeyIdentifier: fn(
            self: *const IX509ExtensionSubjectKeyIdentifier,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Extension.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionSubjectKeyIdentifier_InitializeEncode(self: *const T, Encoding: EncodingType, strKeyIdentifier: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionSubjectKeyIdentifier.VTable, self.vtable).InitializeEncode(@ptrCast(*const IX509ExtensionSubjectKeyIdentifier, self), Encoding, strKeyIdentifier);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionSubjectKeyIdentifier_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionSubjectKeyIdentifier.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509ExtensionSubjectKeyIdentifier, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionSubjectKeyIdentifier_get_SubjectKeyIdentifier(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionSubjectKeyIdentifier.VTable, self.vtable).get_SubjectKeyIdentifier(@ptrCast(*const IX509ExtensionSubjectKeyIdentifier, self), Encoding, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509ExtensionAuthorityKeyIdentifier_Value = @import("../zig.zig").Guid.initString("728AB318-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509ExtensionAuthorityKeyIdentifier = &IID_IX509ExtensionAuthorityKeyIdentifier_Value;
pub const IX509ExtensionAuthorityKeyIdentifier = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: fn(
            self: *const IX509ExtensionAuthorityKeyIdentifier,
            Encoding: EncodingType,
            strKeyIdentifier: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509ExtensionAuthorityKeyIdentifier,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AuthorityKeyIdentifier: fn(
            self: *const IX509ExtensionAuthorityKeyIdentifier,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Extension.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionAuthorityKeyIdentifier_InitializeEncode(self: *const T, Encoding: EncodingType, strKeyIdentifier: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionAuthorityKeyIdentifier.VTable, self.vtable).InitializeEncode(@ptrCast(*const IX509ExtensionAuthorityKeyIdentifier, self), Encoding, strKeyIdentifier);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionAuthorityKeyIdentifier_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionAuthorityKeyIdentifier.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509ExtensionAuthorityKeyIdentifier, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionAuthorityKeyIdentifier_get_AuthorityKeyIdentifier(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionAuthorityKeyIdentifier.VTable, self.vtable).get_AuthorityKeyIdentifier(@ptrCast(*const IX509ExtensionAuthorityKeyIdentifier, self), Encoding, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISmimeCapability_Value = @import("../zig.zig").Guid.initString("728AB319-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ISmimeCapability = &IID_ISmimeCapability_Value;
pub const ISmimeCapability = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const ISmimeCapability,
            pObjectId: ?*IObjectId,
            BitCount: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ObjectId: fn(
            self: *const ISmimeCapability,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BitCount: fn(
            self: *const ISmimeCapability,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISmimeCapability_Initialize(self: *const T, pObjectId: ?*IObjectId, BitCount: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISmimeCapability.VTable, self.vtable).Initialize(@ptrCast(*const ISmimeCapability, self), pObjectId, BitCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISmimeCapability_get_ObjectId(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISmimeCapability.VTable, self.vtable).get_ObjectId(@ptrCast(*const ISmimeCapability, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISmimeCapability_get_BitCount(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISmimeCapability.VTable, self.vtable).get_BitCount(@ptrCast(*const ISmimeCapability, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISmimeCapabilities_Value = @import("../zig.zig").Guid.initString("728AB31A-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ISmimeCapabilities = &IID_ISmimeCapabilities_Value;
pub const ISmimeCapabilities = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: fn(
            self: *const ISmimeCapabilities,
            Index: i32,
            pVal: **ISmimeCapability,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ISmimeCapabilities,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISmimeCapabilities,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ISmimeCapabilities,
            pVal: ?*ISmimeCapability,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ISmimeCapabilities,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const ISmimeCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFromCsp: fn(
            self: *const ISmimeCapabilities,
            pValue: ?*ICspInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAvailableSmimeCapabilities: fn(
            self: *const ISmimeCapabilities,
            MachineContext: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISmimeCapabilities_get_ItemByIndex(self: *const T, Index: i32, pVal: **ISmimeCapability) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISmimeCapabilities.VTable, self.vtable).get_ItemByIndex(@ptrCast(*const ISmimeCapabilities, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISmimeCapabilities_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISmimeCapabilities.VTable, self.vtable).get_Count(@ptrCast(*const ISmimeCapabilities, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISmimeCapabilities_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISmimeCapabilities.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISmimeCapabilities, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISmimeCapabilities_Add(self: *const T, pVal: ?*ISmimeCapability) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISmimeCapabilities.VTable, self.vtable).Add(@ptrCast(*const ISmimeCapabilities, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISmimeCapabilities_Remove(self: *const T, Index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISmimeCapabilities.VTable, self.vtable).Remove(@ptrCast(*const ISmimeCapabilities, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISmimeCapabilities_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISmimeCapabilities.VTable, self.vtable).Clear(@ptrCast(*const ISmimeCapabilities, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISmimeCapabilities_AddFromCsp(self: *const T, pValue: ?*ICspInformation) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISmimeCapabilities.VTable, self.vtable).AddFromCsp(@ptrCast(*const ISmimeCapabilities, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISmimeCapabilities_AddAvailableSmimeCapabilities(self: *const T, MachineContext: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISmimeCapabilities.VTable, self.vtable).AddAvailableSmimeCapabilities(@ptrCast(*const ISmimeCapabilities, self), MachineContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509ExtensionSmimeCapabilities_Value = @import("../zig.zig").Guid.initString("728AB31B-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509ExtensionSmimeCapabilities = &IID_IX509ExtensionSmimeCapabilities_Value;
pub const IX509ExtensionSmimeCapabilities = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: fn(
            self: *const IX509ExtensionSmimeCapabilities,
            pValue: ?*ISmimeCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509ExtensionSmimeCapabilities,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SmimeCapabilities: fn(
            self: *const IX509ExtensionSmimeCapabilities,
            ppValue: **ISmimeCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Extension.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionSmimeCapabilities_InitializeEncode(self: *const T, pValue: ?*ISmimeCapabilities) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionSmimeCapabilities.VTable, self.vtable).InitializeEncode(@ptrCast(*const IX509ExtensionSmimeCapabilities, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionSmimeCapabilities_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionSmimeCapabilities.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509ExtensionSmimeCapabilities, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionSmimeCapabilities_get_SmimeCapabilities(self: *const T, ppValue: **ISmimeCapabilities) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionSmimeCapabilities.VTable, self.vtable).get_SmimeCapabilities(@ptrCast(*const IX509ExtensionSmimeCapabilities, self), ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PolicyQualifierType = extern enum(i32) {
    PolicyQualifierTypeUnknown = 0,
    PolicyQualifierTypeUrl = 1,
    PolicyQualifierTypeUserNotice = 2,
    PolicyQualifierTypeFlags = 3,
};
pub const PolicyQualifierTypeUnknown = PolicyQualifierType.PolicyQualifierTypeUnknown;
pub const PolicyQualifierTypeUrl = PolicyQualifierType.PolicyQualifierTypeUrl;
pub const PolicyQualifierTypeUserNotice = PolicyQualifierType.PolicyQualifierTypeUserNotice;
pub const PolicyQualifierTypeFlags = PolicyQualifierType.PolicyQualifierTypeFlags;

const IID_IPolicyQualifier_Value = @import("../zig.zig").Guid.initString("728AB31C-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IPolicyQualifier = &IID_IPolicyQualifier_Value;
pub const IPolicyQualifier = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InitializeEncode: fn(
            self: *const IPolicyQualifier,
            strQualifier: BSTR,
            Type: PolicyQualifierType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ObjectId: fn(
            self: *const IPolicyQualifier,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Qualifier: fn(
            self: *const IPolicyQualifier,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Type: fn(
            self: *const IPolicyQualifier,
            pValue: *PolicyQualifierType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RawData: fn(
            self: *const IPolicyQualifier,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPolicyQualifier_InitializeEncode(self: *const T, strQualifier: BSTR, Type: PolicyQualifierType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPolicyQualifier.VTable, self.vtable).InitializeEncode(@ptrCast(*const IPolicyQualifier, self), strQualifier, Type);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPolicyQualifier_get_ObjectId(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPolicyQualifier.VTable, self.vtable).get_ObjectId(@ptrCast(*const IPolicyQualifier, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPolicyQualifier_get_Qualifier(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPolicyQualifier.VTable, self.vtable).get_Qualifier(@ptrCast(*const IPolicyQualifier, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPolicyQualifier_get_Type(self: *const T, pValue: *PolicyQualifierType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPolicyQualifier.VTable, self.vtable).get_Type(@ptrCast(*const IPolicyQualifier, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPolicyQualifier_get_RawData(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPolicyQualifier.VTable, self.vtable).get_RawData(@ptrCast(*const IPolicyQualifier, self), Encoding, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPolicyQualifiers_Value = @import("../zig.zig").Guid.initString("728AB31D-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IPolicyQualifiers = &IID_IPolicyQualifiers_Value;
pub const IPolicyQualifiers = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: fn(
            self: *const IPolicyQualifiers,
            Index: i32,
            pVal: **IPolicyQualifier,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IPolicyQualifiers,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IPolicyQualifiers,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IPolicyQualifiers,
            pVal: ?*IPolicyQualifier,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IPolicyQualifiers,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IPolicyQualifiers,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPolicyQualifiers_get_ItemByIndex(self: *const T, Index: i32, pVal: **IPolicyQualifier) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPolicyQualifiers.VTable, self.vtable).get_ItemByIndex(@ptrCast(*const IPolicyQualifiers, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPolicyQualifiers_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPolicyQualifiers.VTable, self.vtable).get_Count(@ptrCast(*const IPolicyQualifiers, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPolicyQualifiers_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPolicyQualifiers.VTable, self.vtable).get__NewEnum(@ptrCast(*const IPolicyQualifiers, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPolicyQualifiers_Add(self: *const T, pVal: ?*IPolicyQualifier) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPolicyQualifiers.VTable, self.vtable).Add(@ptrCast(*const IPolicyQualifiers, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPolicyQualifiers_Remove(self: *const T, Index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPolicyQualifiers.VTable, self.vtable).Remove(@ptrCast(*const IPolicyQualifiers, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPolicyQualifiers_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPolicyQualifiers.VTable, self.vtable).Clear(@ptrCast(*const IPolicyQualifiers, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertificatePolicy_Value = @import("../zig.zig").Guid.initString("728AB31E-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICertificatePolicy = &IID_ICertificatePolicy_Value;
pub const ICertificatePolicy = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const ICertificatePolicy,
            pValue: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ObjectId: fn(
            self: *const ICertificatePolicy,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolicyQualifiers: fn(
            self: *const ICertificatePolicy,
            ppValue: **IPolicyQualifiers,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificatePolicy_Initialize(self: *const T, pValue: ?*IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificatePolicy.VTable, self.vtable).Initialize(@ptrCast(*const ICertificatePolicy, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificatePolicy_get_ObjectId(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificatePolicy.VTable, self.vtable).get_ObjectId(@ptrCast(*const ICertificatePolicy, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificatePolicy_get_PolicyQualifiers(self: *const T, ppValue: **IPolicyQualifiers) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificatePolicy.VTable, self.vtable).get_PolicyQualifiers(@ptrCast(*const ICertificatePolicy, self), ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertificatePolicies_Value = @import("../zig.zig").Guid.initString("728AB31F-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICertificatePolicies = &IID_ICertificatePolicies_Value;
pub const ICertificatePolicies = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: fn(
            self: *const ICertificatePolicies,
            Index: i32,
            pVal: **ICertificatePolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ICertificatePolicies,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ICertificatePolicies,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ICertificatePolicies,
            pVal: ?*ICertificatePolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ICertificatePolicies,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const ICertificatePolicies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificatePolicies_get_ItemByIndex(self: *const T, Index: i32, pVal: **ICertificatePolicy) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificatePolicies.VTable, self.vtable).get_ItemByIndex(@ptrCast(*const ICertificatePolicies, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificatePolicies_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificatePolicies.VTable, self.vtable).get_Count(@ptrCast(*const ICertificatePolicies, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificatePolicies_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificatePolicies.VTable, self.vtable).get__NewEnum(@ptrCast(*const ICertificatePolicies, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificatePolicies_Add(self: *const T, pVal: ?*ICertificatePolicy) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificatePolicies.VTable, self.vtable).Add(@ptrCast(*const ICertificatePolicies, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificatePolicies_Remove(self: *const T, Index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificatePolicies.VTable, self.vtable).Remove(@ptrCast(*const ICertificatePolicies, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificatePolicies_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificatePolicies.VTable, self.vtable).Clear(@ptrCast(*const ICertificatePolicies, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509ExtensionCertificatePolicies_Value = @import("../zig.zig").Guid.initString("728AB320-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509ExtensionCertificatePolicies = &IID_IX509ExtensionCertificatePolicies_Value;
pub const IX509ExtensionCertificatePolicies = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: fn(
            self: *const IX509ExtensionCertificatePolicies,
            pValue: ?*ICertificatePolicies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509ExtensionCertificatePolicies,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Policies: fn(
            self: *const IX509ExtensionCertificatePolicies,
            ppValue: **ICertificatePolicies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Extension.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionCertificatePolicies_InitializeEncode(self: *const T, pValue: ?*ICertificatePolicies) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionCertificatePolicies.VTable, self.vtable).InitializeEncode(@ptrCast(*const IX509ExtensionCertificatePolicies, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionCertificatePolicies_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionCertificatePolicies.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509ExtensionCertificatePolicies, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionCertificatePolicies_get_Policies(self: *const T, ppValue: **ICertificatePolicies) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionCertificatePolicies.VTable, self.vtable).get_Policies(@ptrCast(*const IX509ExtensionCertificatePolicies, self), ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509ExtensionMSApplicationPolicies_Value = @import("../zig.zig").Guid.initString("728AB321-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509ExtensionMSApplicationPolicies = &IID_IX509ExtensionMSApplicationPolicies_Value;
pub const IX509ExtensionMSApplicationPolicies = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: fn(
            self: *const IX509ExtensionMSApplicationPolicies,
            pValue: ?*ICertificatePolicies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509ExtensionMSApplicationPolicies,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Policies: fn(
            self: *const IX509ExtensionMSApplicationPolicies,
            ppValue: **ICertificatePolicies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Extension.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionMSApplicationPolicies_InitializeEncode(self: *const T, pValue: ?*ICertificatePolicies) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionMSApplicationPolicies.VTable, self.vtable).InitializeEncode(@ptrCast(*const IX509ExtensionMSApplicationPolicies, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionMSApplicationPolicies_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionMSApplicationPolicies.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509ExtensionMSApplicationPolicies, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509ExtensionMSApplicationPolicies_get_Policies(self: *const T, ppValue: **ICertificatePolicies) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509ExtensionMSApplicationPolicies.VTable, self.vtable).get_Policies(@ptrCast(*const IX509ExtensionMSApplicationPolicies, self), ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509Attribute_Value = @import("../zig.zig").Guid.initString("728AB322-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509Attribute = &IID_IX509Attribute_Value;
pub const IX509Attribute = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const IX509Attribute,
            pObjectId: ?*IObjectId,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ObjectId: fn(
            self: *const IX509Attribute,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RawData: fn(
            self: *const IX509Attribute,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Attribute_Initialize(self: *const T, pObjectId: ?*IObjectId, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Attribute.VTable, self.vtable).Initialize(@ptrCast(*const IX509Attribute, self), pObjectId, Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Attribute_get_ObjectId(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Attribute.VTable, self.vtable).get_ObjectId(@ptrCast(*const IX509Attribute, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Attribute_get_RawData(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Attribute.VTable, self.vtable).get_RawData(@ptrCast(*const IX509Attribute, self), Encoding, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509Attributes_Value = @import("../zig.zig").Guid.initString("728AB323-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509Attributes = &IID_IX509Attributes_Value;
pub const IX509Attributes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: fn(
            self: *const IX509Attributes,
            Index: i32,
            pVal: **IX509Attribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IX509Attributes,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IX509Attributes,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IX509Attributes,
            pVal: ?*IX509Attribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IX509Attributes,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IX509Attributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Attributes_get_ItemByIndex(self: *const T, Index: i32, pVal: **IX509Attribute) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Attributes.VTable, self.vtable).get_ItemByIndex(@ptrCast(*const IX509Attributes, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Attributes_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Attributes.VTable, self.vtable).get_Count(@ptrCast(*const IX509Attributes, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Attributes_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Attributes.VTable, self.vtable).get__NewEnum(@ptrCast(*const IX509Attributes, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Attributes_Add(self: *const T, pVal: ?*IX509Attribute) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Attributes.VTable, self.vtable).Add(@ptrCast(*const IX509Attributes, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Attributes_Remove(self: *const T, Index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Attributes.VTable, self.vtable).Remove(@ptrCast(*const IX509Attributes, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Attributes_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Attributes.VTable, self.vtable).Clear(@ptrCast(*const IX509Attributes, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509AttributeExtensions_Value = @import("../zig.zig").Guid.initString("728AB324-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509AttributeExtensions = &IID_IX509AttributeExtensions_Value;
pub const IX509AttributeExtensions = extern struct {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncode: fn(
            self: *const IX509AttributeExtensions,
            pExtensions: ?*IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509AttributeExtensions,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_X509Extensions: fn(
            self: *const IX509AttributeExtensions,
            ppValue: **IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Attribute.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeExtensions_InitializeEncode(self: *const T, pExtensions: ?*IX509Extensions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeExtensions.VTable, self.vtable).InitializeEncode(@ptrCast(*const IX509AttributeExtensions, self), pExtensions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeExtensions_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeExtensions.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509AttributeExtensions, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeExtensions_get_X509Extensions(self: *const T, ppValue: **IX509Extensions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeExtensions.VTable, self.vtable).get_X509Extensions(@ptrCast(*const IX509AttributeExtensions, self), ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const RequestClientInfoClientId = extern enum(i32) {
    ClientIdNone = 0,
    ClientIdXEnroll2003 = 1,
    ClientIdAutoEnroll2003 = 2,
    ClientIdWizard2003 = 3,
    ClientIdCertReq2003 = 4,
    ClientIdDefaultRequest = 5,
    ClientIdAutoEnroll = 6,
    ClientIdRequestWizard = 7,
    ClientIdEOBO = 8,
    ClientIdCertReq = 9,
    ClientIdTest = 10,
    ClientIdWinRT = 11,
    ClientIdUserStart = 1000,
};
pub const ClientIdNone = RequestClientInfoClientId.ClientIdNone;
pub const ClientIdXEnroll2003 = RequestClientInfoClientId.ClientIdXEnroll2003;
pub const ClientIdAutoEnroll2003 = RequestClientInfoClientId.ClientIdAutoEnroll2003;
pub const ClientIdWizard2003 = RequestClientInfoClientId.ClientIdWizard2003;
pub const ClientIdCertReq2003 = RequestClientInfoClientId.ClientIdCertReq2003;
pub const ClientIdDefaultRequest = RequestClientInfoClientId.ClientIdDefaultRequest;
pub const ClientIdAutoEnroll = RequestClientInfoClientId.ClientIdAutoEnroll;
pub const ClientIdRequestWizard = RequestClientInfoClientId.ClientIdRequestWizard;
pub const ClientIdEOBO = RequestClientInfoClientId.ClientIdEOBO;
pub const ClientIdCertReq = RequestClientInfoClientId.ClientIdCertReq;
pub const ClientIdTest = RequestClientInfoClientId.ClientIdTest;
pub const ClientIdWinRT = RequestClientInfoClientId.ClientIdWinRT;
pub const ClientIdUserStart = RequestClientInfoClientId.ClientIdUserStart;

const IID_IX509AttributeClientId_Value = @import("../zig.zig").Guid.initString("728AB325-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509AttributeClientId = &IID_IX509AttributeClientId_Value;
pub const IX509AttributeClientId = extern struct {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncode: fn(
            self: *const IX509AttributeClientId,
            ClientId: RequestClientInfoClientId,
            strMachineDnsName: BSTR,
            strUserSamName: BSTR,
            strProcessName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509AttributeClientId,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ClientId: fn(
            self: *const IX509AttributeClientId,
            pValue: *RequestClientInfoClientId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MachineDnsName: fn(
            self: *const IX509AttributeClientId,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UserSamName: fn(
            self: *const IX509AttributeClientId,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ProcessName: fn(
            self: *const IX509AttributeClientId,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Attribute.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeClientId_InitializeEncode(self: *const T, ClientId: RequestClientInfoClientId, strMachineDnsName: BSTR, strUserSamName: BSTR, strProcessName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeClientId.VTable, self.vtable).InitializeEncode(@ptrCast(*const IX509AttributeClientId, self), ClientId, strMachineDnsName, strUserSamName, strProcessName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeClientId_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeClientId.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509AttributeClientId, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeClientId_get_ClientId(self: *const T, pValue: *RequestClientInfoClientId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeClientId.VTable, self.vtable).get_ClientId(@ptrCast(*const IX509AttributeClientId, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeClientId_get_MachineDnsName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeClientId.VTable, self.vtable).get_MachineDnsName(@ptrCast(*const IX509AttributeClientId, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeClientId_get_UserSamName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeClientId.VTable, self.vtable).get_UserSamName(@ptrCast(*const IX509AttributeClientId, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeClientId_get_ProcessName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeClientId.VTable, self.vtable).get_ProcessName(@ptrCast(*const IX509AttributeClientId, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509AttributeRenewalCertificate_Value = @import("../zig.zig").Guid.initString("728AB326-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509AttributeRenewalCertificate = &IID_IX509AttributeRenewalCertificate_Value;
pub const IX509AttributeRenewalCertificate = extern struct {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncode: fn(
            self: *const IX509AttributeRenewalCertificate,
            Encoding: EncodingType,
            strCert: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509AttributeRenewalCertificate,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RenewalCertificate: fn(
            self: *const IX509AttributeRenewalCertificate,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Attribute.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeRenewalCertificate_InitializeEncode(self: *const T, Encoding: EncodingType, strCert: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeRenewalCertificate.VTable, self.vtable).InitializeEncode(@ptrCast(*const IX509AttributeRenewalCertificate, self), Encoding, strCert);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeRenewalCertificate_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeRenewalCertificate.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509AttributeRenewalCertificate, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeRenewalCertificate_get_RenewalCertificate(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeRenewalCertificate.VTable, self.vtable).get_RenewalCertificate(@ptrCast(*const IX509AttributeRenewalCertificate, self), Encoding, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509AttributeArchiveKey_Value = @import("../zig.zig").Guid.initString("728AB327-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509AttributeArchiveKey = &IID_IX509AttributeArchiveKey_Value;
pub const IX509AttributeArchiveKey = extern struct {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncode: fn(
            self: *const IX509AttributeArchiveKey,
            pKey: ?*IX509PrivateKey,
            Encoding: EncodingType,
            strCAXCert: BSTR,
            pAlgorithm: ?*IObjectId,
            EncryptionStrength: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509AttributeArchiveKey,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EncryptedKeyBlob: fn(
            self: *const IX509AttributeArchiveKey,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EncryptionAlgorithm: fn(
            self: *const IX509AttributeArchiveKey,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EncryptionStrength: fn(
            self: *const IX509AttributeArchiveKey,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Attribute.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeArchiveKey_InitializeEncode(self: *const T, pKey: ?*IX509PrivateKey, Encoding: EncodingType, strCAXCert: BSTR, pAlgorithm: ?*IObjectId, EncryptionStrength: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeArchiveKey.VTable, self.vtable).InitializeEncode(@ptrCast(*const IX509AttributeArchiveKey, self), pKey, Encoding, strCAXCert, pAlgorithm, EncryptionStrength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeArchiveKey_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeArchiveKey.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509AttributeArchiveKey, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeArchiveKey_get_EncryptedKeyBlob(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeArchiveKey.VTable, self.vtable).get_EncryptedKeyBlob(@ptrCast(*const IX509AttributeArchiveKey, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeArchiveKey_get_EncryptionAlgorithm(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeArchiveKey.VTable, self.vtable).get_EncryptionAlgorithm(@ptrCast(*const IX509AttributeArchiveKey, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeArchiveKey_get_EncryptionStrength(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeArchiveKey.VTable, self.vtable).get_EncryptionStrength(@ptrCast(*const IX509AttributeArchiveKey, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509AttributeArchiveKeyHash_Value = @import("../zig.zig").Guid.initString("728AB328-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509AttributeArchiveKeyHash = &IID_IX509AttributeArchiveKeyHash_Value;
pub const IX509AttributeArchiveKeyHash = extern struct {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncodeFromEncryptedKeyBlob: fn(
            self: *const IX509AttributeArchiveKeyHash,
            Encoding: EncodingType,
            strEncryptedKeyBlob: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509AttributeArchiveKeyHash,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EncryptedKeyHashBlob: fn(
            self: *const IX509AttributeArchiveKeyHash,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Attribute.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeArchiveKeyHash_InitializeEncodeFromEncryptedKeyBlob(self: *const T, Encoding: EncodingType, strEncryptedKeyBlob: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeArchiveKeyHash.VTable, self.vtable).InitializeEncodeFromEncryptedKeyBlob(@ptrCast(*const IX509AttributeArchiveKeyHash, self), Encoding, strEncryptedKeyBlob);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeArchiveKeyHash_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeArchiveKeyHash.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509AttributeArchiveKeyHash, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeArchiveKeyHash_get_EncryptedKeyHashBlob(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeArchiveKeyHash.VTable, self.vtable).get_EncryptedKeyHashBlob(@ptrCast(*const IX509AttributeArchiveKeyHash, self), Encoding, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509AttributeOSVersion_Value = @import("../zig.zig").Guid.initString("728AB32A-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509AttributeOSVersion = &IID_IX509AttributeOSVersion_Value;
pub const IX509AttributeOSVersion = extern struct {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncode: fn(
            self: *const IX509AttributeOSVersion,
            strOSVersion: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509AttributeOSVersion,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_OSVersion: fn(
            self: *const IX509AttributeOSVersion,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Attribute.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeOSVersion_InitializeEncode(self: *const T, strOSVersion: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeOSVersion.VTable, self.vtable).InitializeEncode(@ptrCast(*const IX509AttributeOSVersion, self), strOSVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeOSVersion_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeOSVersion.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509AttributeOSVersion, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeOSVersion_get_OSVersion(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeOSVersion.VTable, self.vtable).get_OSVersion(@ptrCast(*const IX509AttributeOSVersion, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509AttributeCspProvider_Value = @import("../zig.zig").Guid.initString("728AB32B-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509AttributeCspProvider = &IID_IX509AttributeCspProvider_Value;
pub const IX509AttributeCspProvider = extern struct {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncode: fn(
            self: *const IX509AttributeCspProvider,
            KeySpec: X509KeySpec,
            strProviderName: BSTR,
            Encoding: EncodingType,
            strSignature: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509AttributeCspProvider,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_KeySpec: fn(
            self: *const IX509AttributeCspProvider,
            pValue: *X509KeySpec,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ProviderName: fn(
            self: *const IX509AttributeCspProvider,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Signature: fn(
            self: *const IX509AttributeCspProvider,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Attribute.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeCspProvider_InitializeEncode(self: *const T, KeySpec: X509KeySpec, strProviderName: BSTR, Encoding: EncodingType, strSignature: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeCspProvider.VTable, self.vtable).InitializeEncode(@ptrCast(*const IX509AttributeCspProvider, self), KeySpec, strProviderName, Encoding, strSignature);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeCspProvider_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeCspProvider.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509AttributeCspProvider, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeCspProvider_get_KeySpec(self: *const T, pValue: *X509KeySpec) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeCspProvider.VTable, self.vtable).get_KeySpec(@ptrCast(*const IX509AttributeCspProvider, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeCspProvider_get_ProviderName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeCspProvider.VTable, self.vtable).get_ProviderName(@ptrCast(*const IX509AttributeCspProvider, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509AttributeCspProvider_get_Signature(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509AttributeCspProvider.VTable, self.vtable).get_Signature(@ptrCast(*const IX509AttributeCspProvider, self), Encoding, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICryptAttribute_Value = @import("../zig.zig").Guid.initString("728AB32C-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICryptAttribute = &IID_ICryptAttribute_Value;
pub const ICryptAttribute = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InitializeFromObjectId: fn(
            self: *const ICryptAttribute,
            pObjectId: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromValues: fn(
            self: *const ICryptAttribute,
            pAttributes: ?*IX509Attributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ObjectId: fn(
            self: *const ICryptAttribute,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Values: fn(
            self: *const ICryptAttribute,
            ppValue: **IX509Attributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICryptAttribute_InitializeFromObjectId(self: *const T, pObjectId: ?*IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICryptAttribute.VTable, self.vtable).InitializeFromObjectId(@ptrCast(*const ICryptAttribute, self), pObjectId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICryptAttribute_InitializeFromValues(self: *const T, pAttributes: ?*IX509Attributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICryptAttribute.VTable, self.vtable).InitializeFromValues(@ptrCast(*const ICryptAttribute, self), pAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICryptAttribute_get_ObjectId(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICryptAttribute.VTable, self.vtable).get_ObjectId(@ptrCast(*const ICryptAttribute, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICryptAttribute_get_Values(self: *const T, ppValue: **IX509Attributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICryptAttribute.VTable, self.vtable).get_Values(@ptrCast(*const ICryptAttribute, self), ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICryptAttributes_Value = @import("../zig.zig").Guid.initString("728AB32D-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICryptAttributes = &IID_ICryptAttributes_Value;
pub const ICryptAttributes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: fn(
            self: *const ICryptAttributes,
            Index: i32,
            pVal: **ICryptAttribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ICryptAttributes,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ICryptAttributes,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ICryptAttributes,
            pVal: ?*ICryptAttribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ICryptAttributes,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const ICryptAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IndexByObjectId: fn(
            self: *const ICryptAttributes,
            pObjectId: ?*IObjectId,
            pIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: fn(
            self: *const ICryptAttributes,
            pValue: ?*ICryptAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICryptAttributes_get_ItemByIndex(self: *const T, Index: i32, pVal: **ICryptAttribute) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICryptAttributes.VTable, self.vtable).get_ItemByIndex(@ptrCast(*const ICryptAttributes, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICryptAttributes_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICryptAttributes.VTable, self.vtable).get_Count(@ptrCast(*const ICryptAttributes, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICryptAttributes_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICryptAttributes.VTable, self.vtable).get__NewEnum(@ptrCast(*const ICryptAttributes, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICryptAttributes_Add(self: *const T, pVal: ?*ICryptAttribute) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICryptAttributes.VTable, self.vtable).Add(@ptrCast(*const ICryptAttributes, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICryptAttributes_Remove(self: *const T, Index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICryptAttributes.VTable, self.vtable).Remove(@ptrCast(*const ICryptAttributes, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICryptAttributes_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICryptAttributes.VTable, self.vtable).Clear(@ptrCast(*const ICryptAttributes, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICryptAttributes_get_IndexByObjectId(self: *const T, pObjectId: ?*IObjectId, pIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICryptAttributes.VTable, self.vtable).get_IndexByObjectId(@ptrCast(*const ICryptAttributes, self), pObjectId, pIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICryptAttributes_AddRange(self: *const T, pValue: ?*ICryptAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICryptAttributes.VTable, self.vtable).AddRange(@ptrCast(*const ICryptAttributes, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CERTENROLL_PROPERTYID = extern enum(i32) {
    XCN_PROPERTYID_NONE = 0,
    XCN_CERT_KEY_PROV_HANDLE_PROP_ID = 1,
    XCN_CERT_KEY_PROV_INFO_PROP_ID = 2,
    XCN_CERT_SHA1_HASH_PROP_ID = 3,
    XCN_CERT_MD5_HASH_PROP_ID = 4,
    XCN_CERT_HASH_PROP_ID = 3,
    XCN_CERT_KEY_CONTEXT_PROP_ID = 5,
    XCN_CERT_KEY_SPEC_PROP_ID = 6,
    XCN_CERT_IE30_RESERVED_PROP_ID = 7,
    XCN_CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8,
    XCN_CERT_ENHKEY_USAGE_PROP_ID = 9,
    XCN_CERT_CTL_USAGE_PROP_ID = 9,
    XCN_CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10,
    XCN_CERT_FRIENDLY_NAME_PROP_ID = 11,
    XCN_CERT_PVK_FILE_PROP_ID = 12,
    XCN_CERT_DESCRIPTION_PROP_ID = 13,
    XCN_CERT_ACCESS_STATE_PROP_ID = 14,
    XCN_CERT_SIGNATURE_HASH_PROP_ID = 15,
    XCN_CERT_SMART_CARD_DATA_PROP_ID = 16,
    XCN_CERT_EFS_PROP_ID = 17,
    XCN_CERT_FORTEZZA_DATA_PROP_ID = 18,
    XCN_CERT_ARCHIVED_PROP_ID = 19,
    XCN_CERT_KEY_IDENTIFIER_PROP_ID = 20,
    XCN_CERT_AUTO_ENROLL_PROP_ID = 21,
    XCN_CERT_PUBKEY_ALG_PARA_PROP_ID = 22,
    XCN_CERT_CROSS_CERT_DIST_POINTS_PROP_ID = 23,
    XCN_CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = 24,
    XCN_CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = 25,
    XCN_CERT_ENROLLMENT_PROP_ID = 26,
    XCN_CERT_DATE_STAMP_PROP_ID = 27,
    XCN_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 28,
    XCN_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 29,
    XCN_CERT_EXTENDED_ERROR_INFO_PROP_ID = 30,
    XCN_CERT_RENEWAL_PROP_ID = 64,
    XCN_CERT_ARCHIVED_KEY_HASH_PROP_ID = 65,
    XCN_CERT_AUTO_ENROLL_RETRY_PROP_ID = 66,
    XCN_CERT_AIA_URL_RETRIEVED_PROP_ID = 67,
    XCN_CERT_AUTHORITY_INFO_ACCESS_PROP_ID = 68,
    XCN_CERT_BACKED_UP_PROP_ID = 69,
    XCN_CERT_OCSP_RESPONSE_PROP_ID = 70,
    XCN_CERT_REQUEST_ORIGINATOR_PROP_ID = 71,
    XCN_CERT_SOURCE_LOCATION_PROP_ID = 72,
    XCN_CERT_SOURCE_URL_PROP_ID = 73,
    XCN_CERT_NEW_KEY_PROP_ID = 74,
    XCN_CERT_OCSP_CACHE_PREFIX_PROP_ID = 75,
    XCN_CERT_SMART_CARD_ROOT_INFO_PROP_ID = 76,
    XCN_CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID = 77,
    XCN_CERT_NCRYPT_KEY_HANDLE_PROP_ID = 78,
    XCN_CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID = 79,
    XCN_CERT_SUBJECT_INFO_ACCESS_PROP_ID = 80,
    XCN_CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 81,
    XCN_CERT_CA_DISABLE_CRL_PROP_ID = 82,
    XCN_CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID = 83,
    XCN_CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID = 84,
    XCN_CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 85,
    XCN_CERT_SUBJECT_DISABLE_CRL_PROP_ID = 86,
    XCN_CERT_CEP_PROP_ID = 87,
    XCN_CERT_SIGN_HASH_CNG_ALG_PROP_ID = 89,
    XCN_CERT_SCARD_PIN_ID_PROP_ID = 90,
    XCN_CERT_SCARD_PIN_INFO_PROP_ID = 91,
    XCN_CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = 92,
    XCN_CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 93,
    XCN_CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID = 94,
    XCN_CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID = 95,
    XCN_CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 96,
    XCN_CERT_NO_EXPIRE_NOTIFICATION_PROP_ID = 97,
    XCN_CERT_AUTH_ROOT_SHA256_HASH_PROP_ID = 98,
    XCN_CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID = 99,
    XCN_CERT_HCRYPTPROV_TRANSFER_PROP_ID = 100,
    XCN_CERT_SMART_CARD_READER_PROP_ID = 101,
    XCN_CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID = 102,
    XCN_CERT_KEY_REPAIR_ATTEMPTED_PROP_ID = 103,
    XCN_CERT_DISALLOWED_FILETIME_PROP_ID = 104,
    XCN_CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID = 105,
    XCN_CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID = 106,
    XCN_CERT_SHA256_HASH_PROP_ID = 107,
    XCN_CERT_SCEP_SERVER_CERTS_PROP_ID = 108,
    XCN_CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID = 109,
    XCN_CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID = 110,
    XCN_CERT_SCEP_CA_CERT_PROP_ID = 111,
    XCN_CERT_SCEP_SIGNER_CERT_PROP_ID = 112,
    XCN_CERT_SCEP_NONCE_PROP_ID = 113,
    XCN_CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID = 114,
    XCN_CERT_SCEP_FLAGS_PROP_ID = 115,
    XCN_CERT_SCEP_GUID_PROP_ID = 116,
    XCN_CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID = 117,
    XCN_CERT_ISOLATED_KEY_PROP_ID = 118,
    XCN_CERT_SERIAL_CHAIN_PROP_ID = 119,
    XCN_CERT_KEY_CLASSIFICATION_PROP_ID = 120,
    XCN_CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID = 122,
    XCN_CERT_NONCOMPLIANT_ROOT_URL_PROP_ID = 123,
    XCN_CERT_PIN_SHA256_HASH_PROP_ID = 124,
    XCN_CERT_CLR_DELETE_KEY_PROP_ID = 125,
    XCN_CERT_NOT_BEFORE_FILETIME_PROP_ID = 126,
    XCN_CERT_CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID = 127,
    XCN_CERT_FIRST_RESERVED_PROP_ID = 128,
    XCN_CERT_LAST_RESERVED_PROP_ID = 32767,
    XCN_CERT_FIRST_USER_PROP_ID = 32768,
    XCN_CERT_LAST_USER_PROP_ID = 65535,
    XCN_CERT_STORE_LOCALIZED_NAME_PROP_ID = 4096,
};
pub const XCN_PROPERTYID_NONE = CERTENROLL_PROPERTYID.XCN_PROPERTYID_NONE;
pub const XCN_CERT_KEY_PROV_HANDLE_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_KEY_PROV_HANDLE_PROP_ID;
pub const XCN_CERT_KEY_PROV_INFO_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_KEY_PROV_INFO_PROP_ID;
pub const XCN_CERT_SHA1_HASH_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SHA1_HASH_PROP_ID;
pub const XCN_CERT_MD5_HASH_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_MD5_HASH_PROP_ID;
pub const XCN_CERT_HASH_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_HASH_PROP_ID;
pub const XCN_CERT_KEY_CONTEXT_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_KEY_CONTEXT_PROP_ID;
pub const XCN_CERT_KEY_SPEC_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_KEY_SPEC_PROP_ID;
pub const XCN_CERT_IE30_RESERVED_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_IE30_RESERVED_PROP_ID;
pub const XCN_CERT_PUBKEY_HASH_RESERVED_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_PUBKEY_HASH_RESERVED_PROP_ID;
pub const XCN_CERT_ENHKEY_USAGE_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_ENHKEY_USAGE_PROP_ID;
pub const XCN_CERT_CTL_USAGE_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_CTL_USAGE_PROP_ID;
pub const XCN_CERT_NEXT_UPDATE_LOCATION_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_NEXT_UPDATE_LOCATION_PROP_ID;
pub const XCN_CERT_FRIENDLY_NAME_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_FRIENDLY_NAME_PROP_ID;
pub const XCN_CERT_PVK_FILE_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_PVK_FILE_PROP_ID;
pub const XCN_CERT_DESCRIPTION_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_DESCRIPTION_PROP_ID;
pub const XCN_CERT_ACCESS_STATE_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_ACCESS_STATE_PROP_ID;
pub const XCN_CERT_SIGNATURE_HASH_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SIGNATURE_HASH_PROP_ID;
pub const XCN_CERT_SMART_CARD_DATA_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SMART_CARD_DATA_PROP_ID;
pub const XCN_CERT_EFS_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_EFS_PROP_ID;
pub const XCN_CERT_FORTEZZA_DATA_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_FORTEZZA_DATA_PROP_ID;
pub const XCN_CERT_ARCHIVED_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_ARCHIVED_PROP_ID;
pub const XCN_CERT_KEY_IDENTIFIER_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_KEY_IDENTIFIER_PROP_ID;
pub const XCN_CERT_AUTO_ENROLL_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_AUTO_ENROLL_PROP_ID;
pub const XCN_CERT_PUBKEY_ALG_PARA_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_PUBKEY_ALG_PARA_PROP_ID;
pub const XCN_CERT_CROSS_CERT_DIST_POINTS_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_CROSS_CERT_DIST_POINTS_PROP_ID;
pub const XCN_CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID;
pub const XCN_CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID;
pub const XCN_CERT_ENROLLMENT_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_ENROLLMENT_PROP_ID;
pub const XCN_CERT_DATE_STAMP_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_DATE_STAMP_PROP_ID;
pub const XCN_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID;
pub const XCN_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID;
pub const XCN_CERT_EXTENDED_ERROR_INFO_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_EXTENDED_ERROR_INFO_PROP_ID;
pub const XCN_CERT_RENEWAL_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_RENEWAL_PROP_ID;
pub const XCN_CERT_ARCHIVED_KEY_HASH_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_ARCHIVED_KEY_HASH_PROP_ID;
pub const XCN_CERT_AUTO_ENROLL_RETRY_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_AUTO_ENROLL_RETRY_PROP_ID;
pub const XCN_CERT_AIA_URL_RETRIEVED_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_AIA_URL_RETRIEVED_PROP_ID;
pub const XCN_CERT_AUTHORITY_INFO_ACCESS_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_AUTHORITY_INFO_ACCESS_PROP_ID;
pub const XCN_CERT_BACKED_UP_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_BACKED_UP_PROP_ID;
pub const XCN_CERT_OCSP_RESPONSE_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_OCSP_RESPONSE_PROP_ID;
pub const XCN_CERT_REQUEST_ORIGINATOR_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_REQUEST_ORIGINATOR_PROP_ID;
pub const XCN_CERT_SOURCE_LOCATION_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SOURCE_LOCATION_PROP_ID;
pub const XCN_CERT_SOURCE_URL_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SOURCE_URL_PROP_ID;
pub const XCN_CERT_NEW_KEY_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_NEW_KEY_PROP_ID;
pub const XCN_CERT_OCSP_CACHE_PREFIX_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_OCSP_CACHE_PREFIX_PROP_ID;
pub const XCN_CERT_SMART_CARD_ROOT_INFO_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SMART_CARD_ROOT_INFO_PROP_ID;
pub const XCN_CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID;
pub const XCN_CERT_NCRYPT_KEY_HANDLE_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_NCRYPT_KEY_HANDLE_PROP_ID;
pub const XCN_CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID;
pub const XCN_CERT_SUBJECT_INFO_ACCESS_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SUBJECT_INFO_ACCESS_PROP_ID;
pub const XCN_CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID;
pub const XCN_CERT_CA_DISABLE_CRL_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_CA_DISABLE_CRL_PROP_ID;
pub const XCN_CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID;
pub const XCN_CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID;
pub const XCN_CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID;
pub const XCN_CERT_SUBJECT_DISABLE_CRL_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SUBJECT_DISABLE_CRL_PROP_ID;
pub const XCN_CERT_CEP_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_CEP_PROP_ID;
pub const XCN_CERT_SIGN_HASH_CNG_ALG_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SIGN_HASH_CNG_ALG_PROP_ID;
pub const XCN_CERT_SCARD_PIN_ID_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SCARD_PIN_ID_PROP_ID;
pub const XCN_CERT_SCARD_PIN_INFO_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SCARD_PIN_INFO_PROP_ID;
pub const XCN_CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID;
pub const XCN_CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID;
pub const XCN_CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID;
pub const XCN_CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID;
pub const XCN_CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID;
pub const XCN_CERT_NO_EXPIRE_NOTIFICATION_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_NO_EXPIRE_NOTIFICATION_PROP_ID;
pub const XCN_CERT_AUTH_ROOT_SHA256_HASH_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_AUTH_ROOT_SHA256_HASH_PROP_ID;
pub const XCN_CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID;
pub const XCN_CERT_HCRYPTPROV_TRANSFER_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_HCRYPTPROV_TRANSFER_PROP_ID;
pub const XCN_CERT_SMART_CARD_READER_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SMART_CARD_READER_PROP_ID;
pub const XCN_CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID;
pub const XCN_CERT_KEY_REPAIR_ATTEMPTED_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_KEY_REPAIR_ATTEMPTED_PROP_ID;
pub const XCN_CERT_DISALLOWED_FILETIME_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_DISALLOWED_FILETIME_PROP_ID;
pub const XCN_CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID;
pub const XCN_CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID;
pub const XCN_CERT_SHA256_HASH_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SHA256_HASH_PROP_ID;
pub const XCN_CERT_SCEP_SERVER_CERTS_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SCEP_SERVER_CERTS_PROP_ID;
pub const XCN_CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID;
pub const XCN_CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID;
pub const XCN_CERT_SCEP_CA_CERT_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SCEP_CA_CERT_PROP_ID;
pub const XCN_CERT_SCEP_SIGNER_CERT_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SCEP_SIGNER_CERT_PROP_ID;
pub const XCN_CERT_SCEP_NONCE_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SCEP_NONCE_PROP_ID;
pub const XCN_CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID;
pub const XCN_CERT_SCEP_FLAGS_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SCEP_FLAGS_PROP_ID;
pub const XCN_CERT_SCEP_GUID_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SCEP_GUID_PROP_ID;
pub const XCN_CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID;
pub const XCN_CERT_ISOLATED_KEY_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_ISOLATED_KEY_PROP_ID;
pub const XCN_CERT_SERIAL_CHAIN_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_SERIAL_CHAIN_PROP_ID;
pub const XCN_CERT_KEY_CLASSIFICATION_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_KEY_CLASSIFICATION_PROP_ID;
pub const XCN_CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID;
pub const XCN_CERT_NONCOMPLIANT_ROOT_URL_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_NONCOMPLIANT_ROOT_URL_PROP_ID;
pub const XCN_CERT_PIN_SHA256_HASH_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_PIN_SHA256_HASH_PROP_ID;
pub const XCN_CERT_CLR_DELETE_KEY_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_CLR_DELETE_KEY_PROP_ID;
pub const XCN_CERT_NOT_BEFORE_FILETIME_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_NOT_BEFORE_FILETIME_PROP_ID;
pub const XCN_CERT_CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID;
pub const XCN_CERT_FIRST_RESERVED_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_FIRST_RESERVED_PROP_ID;
pub const XCN_CERT_LAST_RESERVED_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_LAST_RESERVED_PROP_ID;
pub const XCN_CERT_FIRST_USER_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_FIRST_USER_PROP_ID;
pub const XCN_CERT_LAST_USER_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_LAST_USER_PROP_ID;
pub const XCN_CERT_STORE_LOCALIZED_NAME_PROP_ID = CERTENROLL_PROPERTYID.XCN_CERT_STORE_LOCALIZED_NAME_PROP_ID;

const IID_ICertProperty_Value = @import("../zig.zig").Guid.initString("728AB32E-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICertProperty = &IID_ICertProperty_Value;
pub const ICertProperty = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InitializeFromCertificate: fn(
            self: *const ICertProperty,
            MachineContext: i16,
            Encoding: EncodingType,
            strCertificate: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const ICertProperty,
            Encoding: EncodingType,
            strEncodedData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PropertyId: fn(
            self: *const ICertProperty,
            pValue: *CERTENROLL_PROPERTYID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_PropertyId: fn(
            self: *const ICertProperty,
            Value: CERTENROLL_PROPERTYID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RawData: fn(
            self: *const ICertProperty,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveFromCertificate: fn(
            self: *const ICertProperty,
            MachineContext: i16,
            Encoding: EncodingType,
            strCertificate: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValueOnCertificate: fn(
            self: *const ICertProperty,
            MachineContext: i16,
            Encoding: EncodingType,
            strCertificate: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertProperty_InitializeFromCertificate(self: *const T, MachineContext: i16, Encoding: EncodingType, strCertificate: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertProperty.VTable, self.vtable).InitializeFromCertificate(@ptrCast(*const ICertProperty, self), MachineContext, Encoding, strCertificate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertProperty_InitializeDecode(self: *const T, Encoding: EncodingType, strEncodedData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertProperty.VTable, self.vtable).InitializeDecode(@ptrCast(*const ICertProperty, self), Encoding, strEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertProperty_get_PropertyId(self: *const T, pValue: *CERTENROLL_PROPERTYID) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertProperty.VTable, self.vtable).get_PropertyId(@ptrCast(*const ICertProperty, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertProperty_put_PropertyId(self: *const T, Value: CERTENROLL_PROPERTYID) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertProperty.VTable, self.vtable).put_PropertyId(@ptrCast(*const ICertProperty, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertProperty_get_RawData(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertProperty.VTable, self.vtable).get_RawData(@ptrCast(*const ICertProperty, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertProperty_RemoveFromCertificate(self: *const T, MachineContext: i16, Encoding: EncodingType, strCertificate: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertProperty.VTable, self.vtable).RemoveFromCertificate(@ptrCast(*const ICertProperty, self), MachineContext, Encoding, strCertificate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertProperty_SetValueOnCertificate(self: *const T, MachineContext: i16, Encoding: EncodingType, strCertificate: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertProperty.VTable, self.vtable).SetValueOnCertificate(@ptrCast(*const ICertProperty, self), MachineContext, Encoding, strCertificate);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertProperties_Value = @import("../zig.zig").Guid.initString("728AB32F-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICertProperties = &IID_ICertProperties_Value;
pub const ICertProperties = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: fn(
            self: *const ICertProperties,
            Index: i32,
            pVal: **ICertProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ICertProperties,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ICertProperties,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ICertProperties,
            pVal: ?*ICertProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ICertProperties,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const ICertProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromCertificate: fn(
            self: *const ICertProperties,
            MachineContext: i16,
            Encoding: EncodingType,
            strCertificate: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertProperties_get_ItemByIndex(self: *const T, Index: i32, pVal: **ICertProperty) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertProperties.VTable, self.vtable).get_ItemByIndex(@ptrCast(*const ICertProperties, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertProperties_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertProperties.VTable, self.vtable).get_Count(@ptrCast(*const ICertProperties, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertProperties_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertProperties.VTable, self.vtable).get__NewEnum(@ptrCast(*const ICertProperties, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertProperties_Add(self: *const T, pVal: ?*ICertProperty) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertProperties.VTable, self.vtable).Add(@ptrCast(*const ICertProperties, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertProperties_Remove(self: *const T, Index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertProperties.VTable, self.vtable).Remove(@ptrCast(*const ICertProperties, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertProperties_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertProperties.VTable, self.vtable).Clear(@ptrCast(*const ICertProperties, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertProperties_InitializeFromCertificate(self: *const T, MachineContext: i16, Encoding: EncodingType, strCertificate: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertProperties.VTable, self.vtable).InitializeFromCertificate(@ptrCast(*const ICertProperties, self), MachineContext, Encoding, strCertificate);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertPropertyFriendlyName_Value = @import("../zig.zig").Guid.initString("728AB330-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICertPropertyFriendlyName = &IID_ICertPropertyFriendlyName_Value;
pub const ICertPropertyFriendlyName = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: fn(
            self: *const ICertPropertyFriendlyName,
            strFriendlyName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_FriendlyName: fn(
            self: *const ICertPropertyFriendlyName,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertProperty.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyFriendlyName_Initialize(self: *const T, strFriendlyName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyFriendlyName.VTable, self.vtable).Initialize(@ptrCast(*const ICertPropertyFriendlyName, self), strFriendlyName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyFriendlyName_get_FriendlyName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyFriendlyName.VTable, self.vtable).get_FriendlyName(@ptrCast(*const ICertPropertyFriendlyName, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertPropertyDescription_Value = @import("../zig.zig").Guid.initString("728AB331-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICertPropertyDescription = &IID_ICertPropertyDescription_Value;
pub const ICertPropertyDescription = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: fn(
            self: *const ICertPropertyDescription,
            strDescription: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Description: fn(
            self: *const ICertPropertyDescription,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertProperty.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyDescription_Initialize(self: *const T, strDescription: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyDescription.VTable, self.vtable).Initialize(@ptrCast(*const ICertPropertyDescription, self), strDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyDescription_get_Description(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyDescription.VTable, self.vtable).get_Description(@ptrCast(*const ICertPropertyDescription, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertPropertyAutoEnroll_Value = @import("../zig.zig").Guid.initString("728AB332-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICertPropertyAutoEnroll = &IID_ICertPropertyAutoEnroll_Value;
pub const ICertPropertyAutoEnroll = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: fn(
            self: *const ICertPropertyAutoEnroll,
            strTemplateName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_TemplateName: fn(
            self: *const ICertPropertyAutoEnroll,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertProperty.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyAutoEnroll_Initialize(self: *const T, strTemplateName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyAutoEnroll.VTable, self.vtable).Initialize(@ptrCast(*const ICertPropertyAutoEnroll, self), strTemplateName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyAutoEnroll_get_TemplateName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyAutoEnroll.VTable, self.vtable).get_TemplateName(@ptrCast(*const ICertPropertyAutoEnroll, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertPropertyRequestOriginator_Value = @import("../zig.zig").Guid.initString("728AB333-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICertPropertyRequestOriginator = &IID_ICertPropertyRequestOriginator_Value;
pub const ICertPropertyRequestOriginator = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: fn(
            self: *const ICertPropertyRequestOriginator,
            strRequestOriginator: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromLocalRequestOriginator: fn(
            self: *const ICertPropertyRequestOriginator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RequestOriginator: fn(
            self: *const ICertPropertyRequestOriginator,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertProperty.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyRequestOriginator_Initialize(self: *const T, strRequestOriginator: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyRequestOriginator.VTable, self.vtable).Initialize(@ptrCast(*const ICertPropertyRequestOriginator, self), strRequestOriginator);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyRequestOriginator_InitializeFromLocalRequestOriginator(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyRequestOriginator.VTable, self.vtable).InitializeFromLocalRequestOriginator(@ptrCast(*const ICertPropertyRequestOriginator, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyRequestOriginator_get_RequestOriginator(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyRequestOriginator.VTable, self.vtable).get_RequestOriginator(@ptrCast(*const ICertPropertyRequestOriginator, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertPropertySHA1Hash_Value = @import("../zig.zig").Guid.initString("728AB334-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICertPropertySHA1Hash = &IID_ICertPropertySHA1Hash_Value;
pub const ICertPropertySHA1Hash = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: fn(
            self: *const ICertPropertySHA1Hash,
            Encoding: EncodingType,
            strRenewalValue: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SHA1Hash: fn(
            self: *const ICertPropertySHA1Hash,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertProperty.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertySHA1Hash_Initialize(self: *const T, Encoding: EncodingType, strRenewalValue: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertySHA1Hash.VTable, self.vtable).Initialize(@ptrCast(*const ICertPropertySHA1Hash, self), Encoding, strRenewalValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertySHA1Hash_get_SHA1Hash(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertySHA1Hash.VTable, self.vtable).get_SHA1Hash(@ptrCast(*const ICertPropertySHA1Hash, self), Encoding, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertPropertyKeyProvInfo_Value = @import("../zig.zig").Guid.initString("728AB336-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICertPropertyKeyProvInfo = &IID_ICertPropertyKeyProvInfo_Value;
pub const ICertPropertyKeyProvInfo = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: fn(
            self: *const ICertPropertyKeyProvInfo,
            pValue: ?*IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrivateKey: fn(
            self: *const ICertPropertyKeyProvInfo,
            ppValue: **IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertProperty.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyKeyProvInfo_Initialize(self: *const T, pValue: ?*IX509PrivateKey) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyKeyProvInfo.VTable, self.vtable).Initialize(@ptrCast(*const ICertPropertyKeyProvInfo, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyKeyProvInfo_get_PrivateKey(self: *const T, ppValue: **IX509PrivateKey) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyKeyProvInfo.VTable, self.vtable).get_PrivateKey(@ptrCast(*const ICertPropertyKeyProvInfo, self), ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertPropertyArchived_Value = @import("../zig.zig").Guid.initString("728AB337-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICertPropertyArchived = &IID_ICertPropertyArchived_Value;
pub const ICertPropertyArchived = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: fn(
            self: *const ICertPropertyArchived,
            ArchivedValue: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Archived: fn(
            self: *const ICertPropertyArchived,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertProperty.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyArchived_Initialize(self: *const T, ArchivedValue: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyArchived.VTable, self.vtable).Initialize(@ptrCast(*const ICertPropertyArchived, self), ArchivedValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyArchived_get_Archived(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyArchived.VTable, self.vtable).get_Archived(@ptrCast(*const ICertPropertyArchived, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertPropertyBackedUp_Value = @import("../zig.zig").Guid.initString("728AB338-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICertPropertyBackedUp = &IID_ICertPropertyBackedUp_Value;
pub const ICertPropertyBackedUp = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        InitializeFromCurrentTime: fn(
            self: *const ICertPropertyBackedUp,
            BackedUpValue: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const ICertPropertyBackedUp,
            BackedUpValue: i16,
            Date: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BackedUpValue: fn(
            self: *const ICertPropertyBackedUp,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BackedUpTime: fn(
            self: *const ICertPropertyBackedUp,
            pDate: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertProperty.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyBackedUp_InitializeFromCurrentTime(self: *const T, BackedUpValue: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyBackedUp.VTable, self.vtable).InitializeFromCurrentTime(@ptrCast(*const ICertPropertyBackedUp, self), BackedUpValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyBackedUp_Initialize(self: *const T, BackedUpValue: i16, Date: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyBackedUp.VTable, self.vtable).Initialize(@ptrCast(*const ICertPropertyBackedUp, self), BackedUpValue, Date);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyBackedUp_get_BackedUpValue(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyBackedUp.VTable, self.vtable).get_BackedUpValue(@ptrCast(*const ICertPropertyBackedUp, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyBackedUp_get_BackedUpTime(self: *const T, pDate: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyBackedUp.VTable, self.vtable).get_BackedUpTime(@ptrCast(*const ICertPropertyBackedUp, self), pDate);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertPropertyEnrollment_Value = @import("../zig.zig").Guid.initString("728AB339-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICertPropertyEnrollment = &IID_ICertPropertyEnrollment_Value;
pub const ICertPropertyEnrollment = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: fn(
            self: *const ICertPropertyEnrollment,
            RequestId: i32,
            strCADnsName: BSTR,
            strCAName: BSTR,
            strFriendlyName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RequestId: fn(
            self: *const ICertPropertyEnrollment,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CADnsName: fn(
            self: *const ICertPropertyEnrollment,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CAName: fn(
            self: *const ICertPropertyEnrollment,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_FriendlyName: fn(
            self: *const ICertPropertyEnrollment,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertProperty.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyEnrollment_Initialize(self: *const T, RequestId: i32, strCADnsName: BSTR, strCAName: BSTR, strFriendlyName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyEnrollment.VTable, self.vtable).Initialize(@ptrCast(*const ICertPropertyEnrollment, self), RequestId, strCADnsName, strCAName, strFriendlyName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyEnrollment_get_RequestId(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyEnrollment.VTable, self.vtable).get_RequestId(@ptrCast(*const ICertPropertyEnrollment, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyEnrollment_get_CADnsName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyEnrollment.VTable, self.vtable).get_CADnsName(@ptrCast(*const ICertPropertyEnrollment, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyEnrollment_get_CAName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyEnrollment.VTable, self.vtable).get_CAName(@ptrCast(*const ICertPropertyEnrollment, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyEnrollment_get_FriendlyName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyEnrollment.VTable, self.vtable).get_FriendlyName(@ptrCast(*const ICertPropertyEnrollment, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertPropertyRenewal_Value = @import("../zig.zig").Guid.initString("728AB33A-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICertPropertyRenewal = &IID_ICertPropertyRenewal_Value;
pub const ICertPropertyRenewal = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: fn(
            self: *const ICertPropertyRenewal,
            Encoding: EncodingType,
            strRenewalValue: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromCertificateHash: fn(
            self: *const ICertPropertyRenewal,
            MachineContext: i16,
            Encoding: EncodingType,
            strCertificate: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Renewal: fn(
            self: *const ICertPropertyRenewal,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertProperty.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyRenewal_Initialize(self: *const T, Encoding: EncodingType, strRenewalValue: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyRenewal.VTable, self.vtable).Initialize(@ptrCast(*const ICertPropertyRenewal, self), Encoding, strRenewalValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyRenewal_InitializeFromCertificateHash(self: *const T, MachineContext: i16, Encoding: EncodingType, strCertificate: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyRenewal.VTable, self.vtable).InitializeFromCertificateHash(@ptrCast(*const ICertPropertyRenewal, self), MachineContext, Encoding, strCertificate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyRenewal_get_Renewal(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyRenewal.VTable, self.vtable).get_Renewal(@ptrCast(*const ICertPropertyRenewal, self), Encoding, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertPropertyArchivedKeyHash_Value = @import("../zig.zig").Guid.initString("728AB33B-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICertPropertyArchivedKeyHash = &IID_ICertPropertyArchivedKeyHash_Value;
pub const ICertPropertyArchivedKeyHash = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: fn(
            self: *const ICertPropertyArchivedKeyHash,
            Encoding: EncodingType,
            strArchivedKeyHashValue: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ArchivedKeyHash: fn(
            self: *const ICertPropertyArchivedKeyHash,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertProperty.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyArchivedKeyHash_Initialize(self: *const T, Encoding: EncodingType, strArchivedKeyHashValue: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyArchivedKeyHash.VTable, self.vtable).Initialize(@ptrCast(*const ICertPropertyArchivedKeyHash, self), Encoding, strArchivedKeyHashValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyArchivedKeyHash_get_ArchivedKeyHash(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyArchivedKeyHash.VTable, self.vtable).get_ArchivedKeyHash(@ptrCast(*const ICertPropertyArchivedKeyHash, self), Encoding, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const EnrollmentPolicyServerPropertyFlags = extern enum(i32) {
    DefaultNone = 0,
    DefaultPolicyServer = 1,
};
pub const DefaultNone = EnrollmentPolicyServerPropertyFlags.DefaultNone;
pub const DefaultPolicyServer = EnrollmentPolicyServerPropertyFlags.DefaultPolicyServer;

pub const PolicyServerUrlFlags = extern enum(i32) {
    PsfNone = 0,
    PsfLocationGroupPolicy = 1,
    PsfLocationRegistry = 2,
    PsfUseClientId = 4,
    PsfAutoEnrollmentEnabled = 16,
    PsfAllowUnTrustedCA = 32,
};
pub const PsfNone = PolicyServerUrlFlags.PsfNone;
pub const PsfLocationGroupPolicy = PolicyServerUrlFlags.PsfLocationGroupPolicy;
pub const PsfLocationRegistry = PolicyServerUrlFlags.PsfLocationRegistry;
pub const PsfUseClientId = PolicyServerUrlFlags.PsfUseClientId;
pub const PsfAutoEnrollmentEnabled = PolicyServerUrlFlags.PsfAutoEnrollmentEnabled;
pub const PsfAllowUnTrustedCA = PolicyServerUrlFlags.PsfAllowUnTrustedCA;

const IID_ICertPropertyEnrollmentPolicyServer_Value = @import("../zig.zig").Guid.initString("728AB34A-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ICertPropertyEnrollmentPolicyServer = &IID_ICertPropertyEnrollmentPolicyServer_Value;
pub const ICertPropertyEnrollmentPolicyServer = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: fn(
            self: *const ICertPropertyEnrollmentPolicyServer,
            PropertyFlags: EnrollmentPolicyServerPropertyFlags,
            AuthFlags: X509EnrollmentAuthFlags,
            EnrollmentServerAuthFlags: X509EnrollmentAuthFlags,
            UrlFlags: PolicyServerUrlFlags,
            strRequestId: BSTR,
            strUrl: BSTR,
            strId: BSTR,
            strEnrollmentServerUrl: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicyServerUrl: fn(
            self: *const ICertPropertyEnrollmentPolicyServer,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicyServerId: fn(
            self: *const ICertPropertyEnrollmentPolicyServer,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnrollmentServerUrl: fn(
            self: *const ICertPropertyEnrollmentPolicyServer,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestIdString: fn(
            self: *const ICertPropertyEnrollmentPolicyServer,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyFlags: fn(
            self: *const ICertPropertyEnrollmentPolicyServer,
            pValue: *EnrollmentPolicyServerPropertyFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUrlFlags: fn(
            self: *const ICertPropertyEnrollmentPolicyServer,
            pValue: *PolicyServerUrlFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAuthentication: fn(
            self: *const ICertPropertyEnrollmentPolicyServer,
            pValue: *X509EnrollmentAuthFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnrollmentServerAuthentication: fn(
            self: *const ICertPropertyEnrollmentPolicyServer,
            pValue: *X509EnrollmentAuthFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertProperty.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyEnrollmentPolicyServer_Initialize(self: *const T, PropertyFlags: EnrollmentPolicyServerPropertyFlags, AuthFlags: X509EnrollmentAuthFlags, EnrollmentServerAuthFlags: X509EnrollmentAuthFlags, UrlFlags: PolicyServerUrlFlags, strRequestId: BSTR, strUrl: BSTR, strId: BSTR, strEnrollmentServerUrl: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyEnrollmentPolicyServer.VTable, self.vtable).Initialize(@ptrCast(*const ICertPropertyEnrollmentPolicyServer, self), PropertyFlags, AuthFlags, EnrollmentServerAuthFlags, UrlFlags, strRequestId, strUrl, strId, strEnrollmentServerUrl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyEnrollmentPolicyServer_GetPolicyServerUrl(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyEnrollmentPolicyServer.VTable, self.vtable).GetPolicyServerUrl(@ptrCast(*const ICertPropertyEnrollmentPolicyServer, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyEnrollmentPolicyServer_GetPolicyServerId(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyEnrollmentPolicyServer.VTable, self.vtable).GetPolicyServerId(@ptrCast(*const ICertPropertyEnrollmentPolicyServer, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyEnrollmentPolicyServer_GetEnrollmentServerUrl(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyEnrollmentPolicyServer.VTable, self.vtable).GetEnrollmentServerUrl(@ptrCast(*const ICertPropertyEnrollmentPolicyServer, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyEnrollmentPolicyServer_GetRequestIdString(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyEnrollmentPolicyServer.VTable, self.vtable).GetRequestIdString(@ptrCast(*const ICertPropertyEnrollmentPolicyServer, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyEnrollmentPolicyServer_GetPropertyFlags(self: *const T, pValue: *EnrollmentPolicyServerPropertyFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyEnrollmentPolicyServer.VTable, self.vtable).GetPropertyFlags(@ptrCast(*const ICertPropertyEnrollmentPolicyServer, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyEnrollmentPolicyServer_GetUrlFlags(self: *const T, pValue: *PolicyServerUrlFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyEnrollmentPolicyServer.VTable, self.vtable).GetUrlFlags(@ptrCast(*const ICertPropertyEnrollmentPolicyServer, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyEnrollmentPolicyServer_GetAuthentication(self: *const T, pValue: *X509EnrollmentAuthFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyEnrollmentPolicyServer.VTable, self.vtable).GetAuthentication(@ptrCast(*const ICertPropertyEnrollmentPolicyServer, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertPropertyEnrollmentPolicyServer_GetEnrollmentServerAuthentication(self: *const T, pValue: *X509EnrollmentAuthFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertPropertyEnrollmentPolicyServer.VTable, self.vtable).GetEnrollmentServerAuthentication(@ptrCast(*const ICertPropertyEnrollmentPolicyServer, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509SignatureInformation_Value = @import("../zig.zig").Guid.initString("728AB33C-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509SignatureInformation = &IID_IX509SignatureInformation_Value;
pub const IX509SignatureInformation = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_HashAlgorithm: fn(
            self: *const IX509SignatureInformation,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_HashAlgorithm: fn(
            self: *const IX509SignatureInformation,
            pValue: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PublicKeyAlgorithm: fn(
            self: *const IX509SignatureInformation,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_PublicKeyAlgorithm: fn(
            self: *const IX509SignatureInformation,
            pValue: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Parameters: fn(
            self: *const IX509SignatureInformation,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Parameters: fn(
            self: *const IX509SignatureInformation,
            Encoding: EncodingType,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AlternateSignatureAlgorithm: fn(
            self: *const IX509SignatureInformation,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AlternateSignatureAlgorithm: fn(
            self: *const IX509SignatureInformation,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AlternateSignatureAlgorithmSet: fn(
            self: *const IX509SignatureInformation,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NullSigned: fn(
            self: *const IX509SignatureInformation,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_NullSigned: fn(
            self: *const IX509SignatureInformation,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureAlgorithm: fn(
            self: *const IX509SignatureInformation,
            Pkcs7Signature: i16,
            SignatureKey: i16,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultValues: fn(
            self: *const IX509SignatureInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SignatureInformation_get_HashAlgorithm(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SignatureInformation.VTable, self.vtable).get_HashAlgorithm(@ptrCast(*const IX509SignatureInformation, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SignatureInformation_put_HashAlgorithm(self: *const T, pValue: ?*IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SignatureInformation.VTable, self.vtable).put_HashAlgorithm(@ptrCast(*const IX509SignatureInformation, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SignatureInformation_get_PublicKeyAlgorithm(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SignatureInformation.VTable, self.vtable).get_PublicKeyAlgorithm(@ptrCast(*const IX509SignatureInformation, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SignatureInformation_put_PublicKeyAlgorithm(self: *const T, pValue: ?*IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SignatureInformation.VTable, self.vtable).put_PublicKeyAlgorithm(@ptrCast(*const IX509SignatureInformation, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SignatureInformation_get_Parameters(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SignatureInformation.VTable, self.vtable).get_Parameters(@ptrCast(*const IX509SignatureInformation, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SignatureInformation_put_Parameters(self: *const T, Encoding: EncodingType, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SignatureInformation.VTable, self.vtable).put_Parameters(@ptrCast(*const IX509SignatureInformation, self), Encoding, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SignatureInformation_get_AlternateSignatureAlgorithm(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SignatureInformation.VTable, self.vtable).get_AlternateSignatureAlgorithm(@ptrCast(*const IX509SignatureInformation, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SignatureInformation_put_AlternateSignatureAlgorithm(self: *const T, Value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SignatureInformation.VTable, self.vtable).put_AlternateSignatureAlgorithm(@ptrCast(*const IX509SignatureInformation, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SignatureInformation_get_AlternateSignatureAlgorithmSet(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SignatureInformation.VTable, self.vtable).get_AlternateSignatureAlgorithmSet(@ptrCast(*const IX509SignatureInformation, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SignatureInformation_get_NullSigned(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SignatureInformation.VTable, self.vtable).get_NullSigned(@ptrCast(*const IX509SignatureInformation, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SignatureInformation_put_NullSigned(self: *const T, Value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SignatureInformation.VTable, self.vtable).put_NullSigned(@ptrCast(*const IX509SignatureInformation, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SignatureInformation_GetSignatureAlgorithm(self: *const T, Pkcs7Signature: i16, SignatureKey: i16, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SignatureInformation.VTable, self.vtable).GetSignatureAlgorithm(@ptrCast(*const IX509SignatureInformation, self), Pkcs7Signature, SignatureKey, ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SignatureInformation_SetDefaultValues(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SignatureInformation.VTable, self.vtable).SetDefaultValues(@ptrCast(*const IX509SignatureInformation, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISignerCertificate_Value = @import("../zig.zig").Guid.initString("728AB33D-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ISignerCertificate = &IID_ISignerCertificate_Value;
pub const ISignerCertificate = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const ISignerCertificate,
            MachineContext: i16,
            VerifyType: X509PrivateKeyVerify,
            Encoding: EncodingType,
            strCertificate: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Certificate: fn(
            self: *const ISignerCertificate,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrivateKey: fn(
            self: *const ISignerCertificate,
            ppValue: **IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Silent: fn(
            self: *const ISignerCertificate,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Silent: fn(
            self: *const ISignerCertificate,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ParentWindow: fn(
            self: *const ISignerCertificate,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ParentWindow: fn(
            self: *const ISignerCertificate,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UIContextMessage: fn(
            self: *const ISignerCertificate,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_UIContextMessage: fn(
            self: *const ISignerCertificate,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Pin: fn(
            self: *const ISignerCertificate,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SignatureInformation: fn(
            self: *const ISignerCertificate,
            ppValue: **IX509SignatureInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISignerCertificate_Initialize(self: *const T, MachineContext: i16, VerifyType: X509PrivateKeyVerify, Encoding: EncodingType, strCertificate: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISignerCertificate.VTable, self.vtable).Initialize(@ptrCast(*const ISignerCertificate, self), MachineContext, VerifyType, Encoding, strCertificate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISignerCertificate_get_Certificate(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISignerCertificate.VTable, self.vtable).get_Certificate(@ptrCast(*const ISignerCertificate, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISignerCertificate_get_PrivateKey(self: *const T, ppValue: **IX509PrivateKey) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISignerCertificate.VTable, self.vtable).get_PrivateKey(@ptrCast(*const ISignerCertificate, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISignerCertificate_get_Silent(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISignerCertificate.VTable, self.vtable).get_Silent(@ptrCast(*const ISignerCertificate, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISignerCertificate_put_Silent(self: *const T, Value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISignerCertificate.VTable, self.vtable).put_Silent(@ptrCast(*const ISignerCertificate, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISignerCertificate_get_ParentWindow(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISignerCertificate.VTable, self.vtable).get_ParentWindow(@ptrCast(*const ISignerCertificate, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISignerCertificate_put_ParentWindow(self: *const T, Value: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISignerCertificate.VTable, self.vtable).put_ParentWindow(@ptrCast(*const ISignerCertificate, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISignerCertificate_get_UIContextMessage(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISignerCertificate.VTable, self.vtable).get_UIContextMessage(@ptrCast(*const ISignerCertificate, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISignerCertificate_put_UIContextMessage(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISignerCertificate.VTable, self.vtable).put_UIContextMessage(@ptrCast(*const ISignerCertificate, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISignerCertificate_put_Pin(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISignerCertificate.VTable, self.vtable).put_Pin(@ptrCast(*const ISignerCertificate, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISignerCertificate_get_SignatureInformation(self: *const T, ppValue: **IX509SignatureInformation) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISignerCertificate.VTable, self.vtable).get_SignatureInformation(@ptrCast(*const ISignerCertificate, self), ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISignerCertificates_Value = @import("../zig.zig").Guid.initString("728AB33E-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_ISignerCertificates = &IID_ISignerCertificates_Value;
pub const ISignerCertificates = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: fn(
            self: *const ISignerCertificates,
            Index: i32,
            pVal: **ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ISignerCertificates,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISignerCertificates,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ISignerCertificates,
            pVal: ?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ISignerCertificates,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const ISignerCertificates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Find: fn(
            self: *const ISignerCertificates,
            pSignerCert: ?*ISignerCertificate,
            piSignerCert: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISignerCertificates_get_ItemByIndex(self: *const T, Index: i32, pVal: **ISignerCertificate) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISignerCertificates.VTable, self.vtable).get_ItemByIndex(@ptrCast(*const ISignerCertificates, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISignerCertificates_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISignerCertificates.VTable, self.vtable).get_Count(@ptrCast(*const ISignerCertificates, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISignerCertificates_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISignerCertificates.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISignerCertificates, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISignerCertificates_Add(self: *const T, pVal: ?*ISignerCertificate) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISignerCertificates.VTable, self.vtable).Add(@ptrCast(*const ISignerCertificates, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISignerCertificates_Remove(self: *const T, Index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISignerCertificates.VTable, self.vtable).Remove(@ptrCast(*const ISignerCertificates, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISignerCertificates_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISignerCertificates.VTable, self.vtable).Clear(@ptrCast(*const ISignerCertificates, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISignerCertificates_Find(self: *const T, pSignerCert: ?*ISignerCertificate, piSignerCert: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISignerCertificates.VTable, self.vtable).Find(@ptrCast(*const ISignerCertificates, self), pSignerCert, piSignerCert);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509NameValuePair_Value = @import("../zig.zig").Guid.initString("728AB33F-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509NameValuePair = &IID_IX509NameValuePair_Value;
pub const IX509NameValuePair = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const IX509NameValuePair,
            strName: BSTR,
            strValue: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Value: fn(
            self: *const IX509NameValuePair,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const IX509NameValuePair,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509NameValuePair_Initialize(self: *const T, strName: BSTR, strValue: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509NameValuePair.VTable, self.vtable).Initialize(@ptrCast(*const IX509NameValuePair, self), strName, strValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509NameValuePair_get_Value(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509NameValuePair.VTable, self.vtable).get_Value(@ptrCast(*const IX509NameValuePair, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509NameValuePair_get_Name(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509NameValuePair.VTable, self.vtable).get_Name(@ptrCast(*const IX509NameValuePair, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509NameValuePairs_Value = @import("../zig.zig").Guid.initString("728AB340-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509NameValuePairs = &IID_IX509NameValuePairs_Value;
pub const IX509NameValuePairs = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: fn(
            self: *const IX509NameValuePairs,
            Index: i32,
            pVal: **IX509NameValuePair,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IX509NameValuePairs,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IX509NameValuePairs,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IX509NameValuePairs,
            pVal: ?*IX509NameValuePair,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IX509NameValuePairs,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IX509NameValuePairs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509NameValuePairs_get_ItemByIndex(self: *const T, Index: i32, pVal: **IX509NameValuePair) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509NameValuePairs.VTable, self.vtable).get_ItemByIndex(@ptrCast(*const IX509NameValuePairs, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509NameValuePairs_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509NameValuePairs.VTable, self.vtable).get_Count(@ptrCast(*const IX509NameValuePairs, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509NameValuePairs_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509NameValuePairs.VTable, self.vtable).get__NewEnum(@ptrCast(*const IX509NameValuePairs, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509NameValuePairs_Add(self: *const T, pVal: ?*IX509NameValuePair) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509NameValuePairs.VTable, self.vtable).Add(@ptrCast(*const IX509NameValuePairs, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509NameValuePairs_Remove(self: *const T, Index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509NameValuePairs.VTable, self.vtable).Remove(@ptrCast(*const IX509NameValuePairs, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509NameValuePairs_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509NameValuePairs.VTable, self.vtable).Clear(@ptrCast(*const IX509NameValuePairs, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const EnrollmentTemplateProperty = extern enum(i32) {
    TemplatePropCommonName = 1,
    TemplatePropFriendlyName = 2,
    TemplatePropEKUs = 3,
    TemplatePropCryptoProviders = 4,
    TemplatePropMajorRevision = 5,
    TemplatePropDescription = 6,
    TemplatePropKeySpec = 7,
    TemplatePropSchemaVersion = 8,
    TemplatePropMinorRevision = 9,
    TemplatePropRASignatureCount = 10,
    TemplatePropMinimumKeySize = 11,
    TemplatePropOID = 12,
    TemplatePropSupersede = 13,
    TemplatePropRACertificatePolicies = 14,
    TemplatePropRAEKUs = 15,
    TemplatePropCertificatePolicies = 16,
    TemplatePropV1ApplicationPolicy = 17,
    TemplatePropAsymmetricAlgorithm = 18,
    TemplatePropKeySecurityDescriptor = 19,
    TemplatePropSymmetricAlgorithm = 20,
    TemplatePropSymmetricKeyLength = 21,
    TemplatePropHashAlgorithm = 22,
    TemplatePropKeyUsage = 23,
    TemplatePropEnrollmentFlags = 24,
    TemplatePropSubjectNameFlags = 25,
    TemplatePropPrivateKeyFlags = 26,
    TemplatePropGeneralFlags = 27,
    TemplatePropSecurityDescriptor = 28,
    TemplatePropExtensions = 29,
    TemplatePropValidityPeriod = 30,
    TemplatePropRenewalPeriod = 31,
};
pub const TemplatePropCommonName = EnrollmentTemplateProperty.TemplatePropCommonName;
pub const TemplatePropFriendlyName = EnrollmentTemplateProperty.TemplatePropFriendlyName;
pub const TemplatePropEKUs = EnrollmentTemplateProperty.TemplatePropEKUs;
pub const TemplatePropCryptoProviders = EnrollmentTemplateProperty.TemplatePropCryptoProviders;
pub const TemplatePropMajorRevision = EnrollmentTemplateProperty.TemplatePropMajorRevision;
pub const TemplatePropDescription = EnrollmentTemplateProperty.TemplatePropDescription;
pub const TemplatePropKeySpec = EnrollmentTemplateProperty.TemplatePropKeySpec;
pub const TemplatePropSchemaVersion = EnrollmentTemplateProperty.TemplatePropSchemaVersion;
pub const TemplatePropMinorRevision = EnrollmentTemplateProperty.TemplatePropMinorRevision;
pub const TemplatePropRASignatureCount = EnrollmentTemplateProperty.TemplatePropRASignatureCount;
pub const TemplatePropMinimumKeySize = EnrollmentTemplateProperty.TemplatePropMinimumKeySize;
pub const TemplatePropOID = EnrollmentTemplateProperty.TemplatePropOID;
pub const TemplatePropSupersede = EnrollmentTemplateProperty.TemplatePropSupersede;
pub const TemplatePropRACertificatePolicies = EnrollmentTemplateProperty.TemplatePropRACertificatePolicies;
pub const TemplatePropRAEKUs = EnrollmentTemplateProperty.TemplatePropRAEKUs;
pub const TemplatePropCertificatePolicies = EnrollmentTemplateProperty.TemplatePropCertificatePolicies;
pub const TemplatePropV1ApplicationPolicy = EnrollmentTemplateProperty.TemplatePropV1ApplicationPolicy;
pub const TemplatePropAsymmetricAlgorithm = EnrollmentTemplateProperty.TemplatePropAsymmetricAlgorithm;
pub const TemplatePropKeySecurityDescriptor = EnrollmentTemplateProperty.TemplatePropKeySecurityDescriptor;
pub const TemplatePropSymmetricAlgorithm = EnrollmentTemplateProperty.TemplatePropSymmetricAlgorithm;
pub const TemplatePropSymmetricKeyLength = EnrollmentTemplateProperty.TemplatePropSymmetricKeyLength;
pub const TemplatePropHashAlgorithm = EnrollmentTemplateProperty.TemplatePropHashAlgorithm;
pub const TemplatePropKeyUsage = EnrollmentTemplateProperty.TemplatePropKeyUsage;
pub const TemplatePropEnrollmentFlags = EnrollmentTemplateProperty.TemplatePropEnrollmentFlags;
pub const TemplatePropSubjectNameFlags = EnrollmentTemplateProperty.TemplatePropSubjectNameFlags;
pub const TemplatePropPrivateKeyFlags = EnrollmentTemplateProperty.TemplatePropPrivateKeyFlags;
pub const TemplatePropGeneralFlags = EnrollmentTemplateProperty.TemplatePropGeneralFlags;
pub const TemplatePropSecurityDescriptor = EnrollmentTemplateProperty.TemplatePropSecurityDescriptor;
pub const TemplatePropExtensions = EnrollmentTemplateProperty.TemplatePropExtensions;
pub const TemplatePropValidityPeriod = EnrollmentTemplateProperty.TemplatePropValidityPeriod;
pub const TemplatePropRenewalPeriod = EnrollmentTemplateProperty.TemplatePropRenewalPeriod;

const IID_IX509CertificateTemplate_Value = @import("../zig.zig").Guid.initString("54244A13-555A-4E22-896D-1B0E52F76406");
pub const IID_IX509CertificateTemplate = &IID_IX509CertificateTemplate_Value;
pub const IX509CertificateTemplate = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Property: fn(
            self: *const IX509CertificateTemplate,
            property: EnrollmentTemplateProperty,
            pValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateTemplate_get_Property(self: *const T, property: EnrollmentTemplateProperty, pValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateTemplate.VTable, self.vtable).get_Property(@ptrCast(*const IX509CertificateTemplate, self), property, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509CertificateTemplates_Value = @import("../zig.zig").Guid.initString("13B79003-2181-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509CertificateTemplates = &IID_IX509CertificateTemplates_Value;
pub const IX509CertificateTemplates = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: fn(
            self: *const IX509CertificateTemplates,
            Index: i32,
            pVal: **IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IX509CertificateTemplates,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IX509CertificateTemplates,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IX509CertificateTemplates,
            pVal: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IX509CertificateTemplates,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IX509CertificateTemplates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByName: fn(
            self: *const IX509CertificateTemplates,
            bstrName: BSTR,
            ppValue: **IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByOid: fn(
            self: *const IX509CertificateTemplates,
            pOid: ?*IObjectId,
            ppValue: **IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateTemplates_get_ItemByIndex(self: *const T, Index: i32, pVal: **IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateTemplates.VTable, self.vtable).get_ItemByIndex(@ptrCast(*const IX509CertificateTemplates, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateTemplates_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateTemplates.VTable, self.vtable).get_Count(@ptrCast(*const IX509CertificateTemplates, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateTemplates_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateTemplates.VTable, self.vtable).get__NewEnum(@ptrCast(*const IX509CertificateTemplates, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateTemplates_Add(self: *const T, pVal: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateTemplates.VTable, self.vtable).Add(@ptrCast(*const IX509CertificateTemplates, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateTemplates_Remove(self: *const T, Index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateTemplates.VTable, self.vtable).Remove(@ptrCast(*const IX509CertificateTemplates, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateTemplates_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateTemplates.VTable, self.vtable).Clear(@ptrCast(*const IX509CertificateTemplates, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateTemplates_get_ItemByName(self: *const T, bstrName: BSTR, ppValue: **IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateTemplates.VTable, self.vtable).get_ItemByName(@ptrCast(*const IX509CertificateTemplates, self), bstrName, ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateTemplates_get_ItemByOid(self: *const T, pOid: ?*IObjectId, ppValue: **IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateTemplates.VTable, self.vtable).get_ItemByOid(@ptrCast(*const IX509CertificateTemplates, self), pOid, ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CommitTemplateFlags = extern enum(i32) {
    CommitFlagSaveTemplateGenerateOID = 1,
    CommitFlagSaveTemplateUseCurrentOID = 2,
    CommitFlagSaveTemplateOverwrite = 3,
    CommitFlagDeleteTemplate = 4,
};
pub const CommitFlagSaveTemplateGenerateOID = CommitTemplateFlags.CommitFlagSaveTemplateGenerateOID;
pub const CommitFlagSaveTemplateUseCurrentOID = CommitTemplateFlags.CommitFlagSaveTemplateUseCurrentOID;
pub const CommitFlagSaveTemplateOverwrite = CommitTemplateFlags.CommitFlagSaveTemplateOverwrite;
pub const CommitFlagDeleteTemplate = CommitTemplateFlags.CommitFlagDeleteTemplate;

const IID_IX509CertificateTemplateWritable_Value = @import("../zig.zig").Guid.initString("F49466A7-395A-4E9E-B6E7-32B331600DC0");
pub const IID_IX509CertificateTemplateWritable = &IID_IX509CertificateTemplateWritable_Value;
pub const IX509CertificateTemplateWritable = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const IX509CertificateTemplateWritable,
            pValue: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: fn(
            self: *const IX509CertificateTemplateWritable,
            commitFlags: CommitTemplateFlags,
            strServerContext: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Property: fn(
            self: *const IX509CertificateTemplateWritable,
            property: EnrollmentTemplateProperty,
            pValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Property: fn(
            self: *const IX509CertificateTemplateWritable,
            property: EnrollmentTemplateProperty,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Template: fn(
            self: *const IX509CertificateTemplateWritable,
            ppValue: **IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateTemplateWritable_Initialize(self: *const T, pValue: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateTemplateWritable.VTable, self.vtable).Initialize(@ptrCast(*const IX509CertificateTemplateWritable, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateTemplateWritable_Commit(self: *const T, commitFlags: CommitTemplateFlags, strServerContext: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateTemplateWritable.VTable, self.vtable).Commit(@ptrCast(*const IX509CertificateTemplateWritable, self), commitFlags, strServerContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateTemplateWritable_get_Property(self: *const T, property: EnrollmentTemplateProperty, pValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateTemplateWritable.VTable, self.vtable).get_Property(@ptrCast(*const IX509CertificateTemplateWritable, self), property, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateTemplateWritable_put_Property(self: *const T, property: EnrollmentTemplateProperty, value: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateTemplateWritable.VTable, self.vtable).put_Property(@ptrCast(*const IX509CertificateTemplateWritable, self), property, value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateTemplateWritable_get_Template(self: *const T, ppValue: **IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateTemplateWritable.VTable, self.vtable).get_Template(@ptrCast(*const IX509CertificateTemplateWritable, self), ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const EnrollmentCAProperty = extern enum(i32) {
    CAPropCommonName = 1,
    CAPropDistinguishedName = 2,
    CAPropSanitizedName = 3,
    CAPropSanitizedShortName = 4,
    CAPropDNSName = 5,
    CAPropCertificateTypes = 6,
    CAPropCertificate = 7,
    CAPropDescription = 8,
    CAPropWebServers = 9,
    CAPropSiteName = 10,
    CAPropSecurity = 11,
    CAPropRenewalOnly = 12,
};
pub const CAPropCommonName = EnrollmentCAProperty.CAPropCommonName;
pub const CAPropDistinguishedName = EnrollmentCAProperty.CAPropDistinguishedName;
pub const CAPropSanitizedName = EnrollmentCAProperty.CAPropSanitizedName;
pub const CAPropSanitizedShortName = EnrollmentCAProperty.CAPropSanitizedShortName;
pub const CAPropDNSName = EnrollmentCAProperty.CAPropDNSName;
pub const CAPropCertificateTypes = EnrollmentCAProperty.CAPropCertificateTypes;
pub const CAPropCertificate = EnrollmentCAProperty.CAPropCertificate;
pub const CAPropDescription = EnrollmentCAProperty.CAPropDescription;
pub const CAPropWebServers = EnrollmentCAProperty.CAPropWebServers;
pub const CAPropSiteName = EnrollmentCAProperty.CAPropSiteName;
pub const CAPropSecurity = EnrollmentCAProperty.CAPropSecurity;
pub const CAPropRenewalOnly = EnrollmentCAProperty.CAPropRenewalOnly;

const IID_ICertificationAuthority_Value = @import("../zig.zig").Guid.initString("835D1F61-1E95-4BC8-B4D3-976C42B968F7");
pub const IID_ICertificationAuthority = &IID_ICertificationAuthority_Value;
pub const ICertificationAuthority = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Property: fn(
            self: *const ICertificationAuthority,
            property: EnrollmentCAProperty,
            pValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificationAuthority_get_Property(self: *const T, property: EnrollmentCAProperty, pValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificationAuthority.VTable, self.vtable).get_Property(@ptrCast(*const ICertificationAuthority, self), property, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertificationAuthorities_Value = @import("../zig.zig").Guid.initString("13B79005-2181-11DA-B2A4-000E7BBB2B09");
pub const IID_ICertificationAuthorities = &IID_ICertificationAuthorities_Value;
pub const ICertificationAuthorities = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: fn(
            self: *const ICertificationAuthorities,
            Index: i32,
            pVal: **ICertificationAuthority,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ICertificationAuthorities,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ICertificationAuthorities,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ICertificationAuthorities,
            pVal: ?*ICertificationAuthority,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ICertificationAuthorities,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const ICertificationAuthorities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ComputeSiteCosts: fn(
            self: *const ICertificationAuthorities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByName: fn(
            self: *const ICertificationAuthorities,
            strName: BSTR,
            ppValue: **ICertificationAuthority,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificationAuthorities_get_ItemByIndex(self: *const T, Index: i32, pVal: **ICertificationAuthority) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificationAuthorities.VTable, self.vtable).get_ItemByIndex(@ptrCast(*const ICertificationAuthorities, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificationAuthorities_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificationAuthorities.VTable, self.vtable).get_Count(@ptrCast(*const ICertificationAuthorities, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificationAuthorities_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificationAuthorities.VTable, self.vtable).get__NewEnum(@ptrCast(*const ICertificationAuthorities, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificationAuthorities_Add(self: *const T, pVal: ?*ICertificationAuthority) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificationAuthorities.VTable, self.vtable).Add(@ptrCast(*const ICertificationAuthorities, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificationAuthorities_Remove(self: *const T, Index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificationAuthorities.VTable, self.vtable).Remove(@ptrCast(*const ICertificationAuthorities, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificationAuthorities_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificationAuthorities.VTable, self.vtable).Clear(@ptrCast(*const ICertificationAuthorities, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificationAuthorities_ComputeSiteCosts(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificationAuthorities.VTable, self.vtable).ComputeSiteCosts(@ptrCast(*const ICertificationAuthorities, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificationAuthorities_get_ItemByName(self: *const T, strName: BSTR, ppValue: **ICertificationAuthority) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificationAuthorities.VTable, self.vtable).get_ItemByName(@ptrCast(*const ICertificationAuthorities, self), strName, ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const X509EnrollmentPolicyLoadOption = extern enum(i32) {
    LoadOptionDefault = 0,
    LoadOptionCacheOnly = 1,
    LoadOptionReload = 2,
    LoadOptionRegisterForADChanges = 4,
};
pub const LoadOptionDefault = X509EnrollmentPolicyLoadOption.LoadOptionDefault;
pub const LoadOptionCacheOnly = X509EnrollmentPolicyLoadOption.LoadOptionCacheOnly;
pub const LoadOptionReload = X509EnrollmentPolicyLoadOption.LoadOptionReload;
pub const LoadOptionRegisterForADChanges = X509EnrollmentPolicyLoadOption.LoadOptionRegisterForADChanges;

pub const EnrollmentPolicyFlags = extern enum(i32) {
    DisableGroupPolicyList = 2,
    DisableUserServerList = 4,
};
pub const DisableGroupPolicyList = EnrollmentPolicyFlags.DisableGroupPolicyList;
pub const DisableUserServerList = EnrollmentPolicyFlags.DisableUserServerList;

pub const PolicyServerUrlPropertyID = extern enum(i32) {
    PsPolicyID = 0,
    PsFriendlyName = 1,
};
pub const PsPolicyID = PolicyServerUrlPropertyID.PsPolicyID;
pub const PsFriendlyName = PolicyServerUrlPropertyID.PsFriendlyName;

pub const X509EnrollmentPolicyExportFlags = extern enum(i32) {
    ExportTemplates = 1,
    ExportOIDs = 2,
    ExportCAs = 4,
};
pub const ExportTemplates = X509EnrollmentPolicyExportFlags.ExportTemplates;
pub const ExportOIDs = X509EnrollmentPolicyExportFlags.ExportOIDs;
pub const ExportCAs = X509EnrollmentPolicyExportFlags.ExportCAs;

const IID_IX509EnrollmentPolicyServer_Value = @import("../zig.zig").Guid.initString("13B79026-2181-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509EnrollmentPolicyServer = &IID_IX509EnrollmentPolicyServer_Value;
pub const IX509EnrollmentPolicyServer = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const IX509EnrollmentPolicyServer,
            bstrPolicyServerUrl: BSTR,
            bstrPolicyServerId: BSTR,
            authFlags: X509EnrollmentAuthFlags,
            fIsUnTrusted: i16,
            context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadPolicy: fn(
            self: *const IX509EnrollmentPolicyServer,
            option: X509EnrollmentPolicyLoadOption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTemplates: fn(
            self: *const IX509EnrollmentPolicyServer,
            pTemplates: **IX509CertificateTemplates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAsForTemplate: fn(
            self: *const IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
            ppCAs: **ICertificationAuthorities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAs: fn(
            self: *const IX509EnrollmentPolicyServer,
            ppCAs: **ICertificationAuthorities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Validate: fn(
            self: *const IX509EnrollmentPolicyServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCustomOids: fn(
            self: *const IX509EnrollmentPolicyServer,
            ppObjectIds: **IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextUpdateTime: fn(
            self: *const IX509EnrollmentPolicyServer,
            pDate: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastUpdateTime: fn(
            self: *const IX509EnrollmentPolicyServer,
            pDate: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicyServerUrl: fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicyServerId: fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFriendlyName: fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsDefaultCEP: fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUseClientId: fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllowUnTrustedCA: fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCachePath: fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCacheDir: fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAuthFlags: fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: *X509EnrollmentAuthFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCredential: fn(
            self: *const IX509EnrollmentPolicyServer,
            hWndParent: i32,
            flag: X509EnrollmentAuthFlags,
            strCredential: BSTR,
            strPassword: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryChanges: fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeImport: fn(
            self: *const IX509EnrollmentPolicyServer,
            val: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Export: fn(
            self: *const IX509EnrollmentPolicyServer,
            exportFlags: X509EnrollmentPolicyExportFlags,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Cost: fn(
            self: *const IX509EnrollmentPolicyServer,
            pValue: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Cost: fn(
            self: *const IX509EnrollmentPolicyServer,
            value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_Initialize(self: *const T, bstrPolicyServerUrl: BSTR, bstrPolicyServerId: BSTR, authFlags: X509EnrollmentAuthFlags, fIsUnTrusted: i16, context: X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).Initialize(@ptrCast(*const IX509EnrollmentPolicyServer, self), bstrPolicyServerUrl, bstrPolicyServerId, authFlags, fIsUnTrusted, context);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_LoadPolicy(self: *const T, option: X509EnrollmentPolicyLoadOption) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).LoadPolicy(@ptrCast(*const IX509EnrollmentPolicyServer, self), option);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_GetTemplates(self: *const T, pTemplates: **IX509CertificateTemplates) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).GetTemplates(@ptrCast(*const IX509EnrollmentPolicyServer, self), pTemplates);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_GetCAsForTemplate(self: *const T, pTemplate: ?*IX509CertificateTemplate, ppCAs: **ICertificationAuthorities) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).GetCAsForTemplate(@ptrCast(*const IX509EnrollmentPolicyServer, self), pTemplate, ppCAs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_GetCAs(self: *const T, ppCAs: **ICertificationAuthorities) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).GetCAs(@ptrCast(*const IX509EnrollmentPolicyServer, self), ppCAs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_Validate(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).Validate(@ptrCast(*const IX509EnrollmentPolicyServer, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_GetCustomOids(self: *const T, ppObjectIds: **IObjectIds) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).GetCustomOids(@ptrCast(*const IX509EnrollmentPolicyServer, self), ppObjectIds);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_GetNextUpdateTime(self: *const T, pDate: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).GetNextUpdateTime(@ptrCast(*const IX509EnrollmentPolicyServer, self), pDate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_GetLastUpdateTime(self: *const T, pDate: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).GetLastUpdateTime(@ptrCast(*const IX509EnrollmentPolicyServer, self), pDate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_GetPolicyServerUrl(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).GetPolicyServerUrl(@ptrCast(*const IX509EnrollmentPolicyServer, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_GetPolicyServerId(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).GetPolicyServerId(@ptrCast(*const IX509EnrollmentPolicyServer, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_GetFriendlyName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).GetFriendlyName(@ptrCast(*const IX509EnrollmentPolicyServer, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_GetIsDefaultCEP(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).GetIsDefaultCEP(@ptrCast(*const IX509EnrollmentPolicyServer, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_GetUseClientId(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).GetUseClientId(@ptrCast(*const IX509EnrollmentPolicyServer, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_GetAllowUnTrustedCA(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).GetAllowUnTrustedCA(@ptrCast(*const IX509EnrollmentPolicyServer, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_GetCachePath(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).GetCachePath(@ptrCast(*const IX509EnrollmentPolicyServer, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_GetCacheDir(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).GetCacheDir(@ptrCast(*const IX509EnrollmentPolicyServer, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_GetAuthFlags(self: *const T, pValue: *X509EnrollmentAuthFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).GetAuthFlags(@ptrCast(*const IX509EnrollmentPolicyServer, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_SetCredential(self: *const T, hWndParent: i32, flag: X509EnrollmentAuthFlags, strCredential: BSTR, strPassword: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).SetCredential(@ptrCast(*const IX509EnrollmentPolicyServer, self), hWndParent, flag, strCredential, strPassword);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_QueryChanges(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).QueryChanges(@ptrCast(*const IX509EnrollmentPolicyServer, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_InitializeImport(self: *const T, val: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).InitializeImport(@ptrCast(*const IX509EnrollmentPolicyServer, self), val);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_Export(self: *const T, exportFlags: X509EnrollmentPolicyExportFlags, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).Export(@ptrCast(*const IX509EnrollmentPolicyServer, self), exportFlags, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_get_Cost(self: *const T, pValue: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).get_Cost(@ptrCast(*const IX509EnrollmentPolicyServer, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentPolicyServer_put_Cost(self: *const T, value: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentPolicyServer.VTable, self.vtable).put_Cost(@ptrCast(*const IX509EnrollmentPolicyServer, self), value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509PolicyServerUrl_Value = @import("../zig.zig").Guid.initString("884E204A-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509PolicyServerUrl = &IID_IX509PolicyServerUrl_Value;
pub const IX509PolicyServerUrl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const IX509PolicyServerUrl,
            context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Url: fn(
            self: *const IX509PolicyServerUrl,
            ppValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Url: fn(
            self: *const IX509PolicyServerUrl,
            pValue: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Default: fn(
            self: *const IX509PolicyServerUrl,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Default: fn(
            self: *const IX509PolicyServerUrl,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Flags: fn(
            self: *const IX509PolicyServerUrl,
            pValue: *PolicyServerUrlFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Flags: fn(
            self: *const IX509PolicyServerUrl,
            Flags: PolicyServerUrlFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AuthFlags: fn(
            self: *const IX509PolicyServerUrl,
            pValue: *X509EnrollmentAuthFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AuthFlags: fn(
            self: *const IX509PolicyServerUrl,
            Flags: X509EnrollmentAuthFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Cost: fn(
            self: *const IX509PolicyServerUrl,
            pValue: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Cost: fn(
            self: *const IX509PolicyServerUrl,
            value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringProperty: fn(
            self: *const IX509PolicyServerUrl,
            propertyId: PolicyServerUrlPropertyID,
            ppValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStringProperty: fn(
            self: *const IX509PolicyServerUrl,
            propertyId: PolicyServerUrlPropertyID,
            pValue: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateRegistry: fn(
            self: *const IX509PolicyServerUrl,
            context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveFromRegistry: fn(
            self: *const IX509PolicyServerUrl,
            context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerUrl_Initialize(self: *const T, context: X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerUrl.VTable, self.vtable).Initialize(@ptrCast(*const IX509PolicyServerUrl, self), context);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerUrl_get_Url(self: *const T, ppValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerUrl.VTable, self.vtable).get_Url(@ptrCast(*const IX509PolicyServerUrl, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerUrl_put_Url(self: *const T, pValue: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerUrl.VTable, self.vtable).put_Url(@ptrCast(*const IX509PolicyServerUrl, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerUrl_get_Default(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerUrl.VTable, self.vtable).get_Default(@ptrCast(*const IX509PolicyServerUrl, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerUrl_put_Default(self: *const T, value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerUrl.VTable, self.vtable).put_Default(@ptrCast(*const IX509PolicyServerUrl, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerUrl_get_Flags(self: *const T, pValue: *PolicyServerUrlFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerUrl.VTable, self.vtable).get_Flags(@ptrCast(*const IX509PolicyServerUrl, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerUrl_put_Flags(self: *const T, Flags: PolicyServerUrlFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerUrl.VTable, self.vtable).put_Flags(@ptrCast(*const IX509PolicyServerUrl, self), Flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerUrl_get_AuthFlags(self: *const T, pValue: *X509EnrollmentAuthFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerUrl.VTable, self.vtable).get_AuthFlags(@ptrCast(*const IX509PolicyServerUrl, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerUrl_put_AuthFlags(self: *const T, Flags: X509EnrollmentAuthFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerUrl.VTable, self.vtable).put_AuthFlags(@ptrCast(*const IX509PolicyServerUrl, self), Flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerUrl_get_Cost(self: *const T, pValue: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerUrl.VTable, self.vtable).get_Cost(@ptrCast(*const IX509PolicyServerUrl, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerUrl_put_Cost(self: *const T, value: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerUrl.VTable, self.vtable).put_Cost(@ptrCast(*const IX509PolicyServerUrl, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerUrl_GetStringProperty(self: *const T, propertyId: PolicyServerUrlPropertyID, ppValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerUrl.VTable, self.vtable).GetStringProperty(@ptrCast(*const IX509PolicyServerUrl, self), propertyId, ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerUrl_SetStringProperty(self: *const T, propertyId: PolicyServerUrlPropertyID, pValue: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerUrl.VTable, self.vtable).SetStringProperty(@ptrCast(*const IX509PolicyServerUrl, self), propertyId, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerUrl_UpdateRegistry(self: *const T, context: X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerUrl.VTable, self.vtable).UpdateRegistry(@ptrCast(*const IX509PolicyServerUrl, self), context);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerUrl_RemoveFromRegistry(self: *const T, context: X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerUrl.VTable, self.vtable).RemoveFromRegistry(@ptrCast(*const IX509PolicyServerUrl, self), context);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509PolicyServerListManager_Value = @import("../zig.zig").Guid.initString("884E204B-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509PolicyServerListManager = &IID_IX509PolicyServerListManager_Value;
pub const IX509PolicyServerListManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: fn(
            self: *const IX509PolicyServerListManager,
            Index: i32,
            pVal: **IX509PolicyServerUrl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IX509PolicyServerListManager,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IX509PolicyServerListManager,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IX509PolicyServerListManager,
            pVal: ?*IX509PolicyServerUrl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IX509PolicyServerListManager,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IX509PolicyServerListManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IX509PolicyServerListManager,
            context: X509CertificateEnrollmentContext,
            Flags: PolicyServerUrlFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerListManager_get_ItemByIndex(self: *const T, Index: i32, pVal: **IX509PolicyServerUrl) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerListManager.VTable, self.vtable).get_ItemByIndex(@ptrCast(*const IX509PolicyServerListManager, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerListManager_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerListManager.VTable, self.vtable).get_Count(@ptrCast(*const IX509PolicyServerListManager, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerListManager_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerListManager.VTable, self.vtable).get__NewEnum(@ptrCast(*const IX509PolicyServerListManager, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerListManager_Add(self: *const T, pVal: ?*IX509PolicyServerUrl) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerListManager.VTable, self.vtable).Add(@ptrCast(*const IX509PolicyServerListManager, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerListManager_Remove(self: *const T, Index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerListManager.VTable, self.vtable).Remove(@ptrCast(*const IX509PolicyServerListManager, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerListManager_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerListManager.VTable, self.vtable).Clear(@ptrCast(*const IX509PolicyServerListManager, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509PolicyServerListManager_Initialize(self: *const T, context: X509CertificateEnrollmentContext, Flags: PolicyServerUrlFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509PolicyServerListManager.VTable, self.vtable).Initialize(@ptrCast(*const IX509PolicyServerListManager, self), context, Flags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const X509RequestType = extern enum(i32) {
    TypeAny = 0,
    TypePkcs10 = 1,
    TypePkcs7 = 2,
    TypeCmc = 3,
    TypeCertificate = 4,
};
pub const TypeAny = X509RequestType.TypeAny;
pub const TypePkcs10 = X509RequestType.TypePkcs10;
pub const TypePkcs7 = X509RequestType.TypePkcs7;
pub const TypeCmc = X509RequestType.TypeCmc;
pub const TypeCertificate = X509RequestType.TypeCertificate;

pub const X509RequestInheritOptions = extern enum(i32) {
    InheritDefault = 0,
    InheritNewDefaultKey = 1,
    InheritNewSimilarKey = 2,
    InheritPrivateKey = 3,
    InheritPublicKey = 4,
    InheritKeyMask = 15,
    InheritNone = 16,
    InheritRenewalCertificateFlag = 32,
    InheritTemplateFlag = 64,
    InheritSubjectFlag = 128,
    InheritExtensionsFlag = 256,
    InheritSubjectAltNameFlag = 512,
    InheritValidityPeriodFlag = 1024,
    InheritReserved80000000 = -2147483648,
};
pub const InheritDefault = X509RequestInheritOptions.InheritDefault;
pub const InheritNewDefaultKey = X509RequestInheritOptions.InheritNewDefaultKey;
pub const InheritNewSimilarKey = X509RequestInheritOptions.InheritNewSimilarKey;
pub const InheritPrivateKey = X509RequestInheritOptions.InheritPrivateKey;
pub const InheritPublicKey = X509RequestInheritOptions.InheritPublicKey;
pub const InheritKeyMask = X509RequestInheritOptions.InheritKeyMask;
pub const InheritNone = X509RequestInheritOptions.InheritNone;
pub const InheritRenewalCertificateFlag = X509RequestInheritOptions.InheritRenewalCertificateFlag;
pub const InheritTemplateFlag = X509RequestInheritOptions.InheritTemplateFlag;
pub const InheritSubjectFlag = X509RequestInheritOptions.InheritSubjectFlag;
pub const InheritExtensionsFlag = X509RequestInheritOptions.InheritExtensionsFlag;
pub const InheritSubjectAltNameFlag = X509RequestInheritOptions.InheritSubjectAltNameFlag;
pub const InheritValidityPeriodFlag = X509RequestInheritOptions.InheritValidityPeriodFlag;
pub const InheritReserved80000000 = X509RequestInheritOptions.InheritReserved80000000;

pub const InnerRequestLevel = extern enum(i32) {
    LevelInnermost = 0,
    LevelNext = 1,
};
pub const LevelInnermost = InnerRequestLevel.LevelInnermost;
pub const LevelNext = InnerRequestLevel.LevelNext;

const IID_IX509CertificateRequest_Value = @import("../zig.zig").Guid.initString("728AB341-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509CertificateRequest = &IID_IX509CertificateRequest_Value;
pub const IX509CertificateRequest = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const IX509CertificateRequest,
            Context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: fn(
            self: *const IX509CertificateRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetForEncode: fn(
            self: *const IX509CertificateRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInnerRequest: fn(
            self: *const IX509CertificateRequest,
            Level: InnerRequestLevel,
            ppValue: **IX509CertificateRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Type: fn(
            self: *const IX509CertificateRequest,
            pValue: *X509RequestType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EnrollmentContext: fn(
            self: *const IX509CertificateRequest,
            pValue: *X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Silent: fn(
            self: *const IX509CertificateRequest,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Silent: fn(
            self: *const IX509CertificateRequest,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ParentWindow: fn(
            self: *const IX509CertificateRequest,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ParentWindow: fn(
            self: *const IX509CertificateRequest,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UIContextMessage: fn(
            self: *const IX509CertificateRequest,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_UIContextMessage: fn(
            self: *const IX509CertificateRequest,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SuppressDefaults: fn(
            self: *const IX509CertificateRequest,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SuppressDefaults: fn(
            self: *const IX509CertificateRequest,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RenewalCertificate: fn(
            self: *const IX509CertificateRequest,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RenewalCertificate: fn(
            self: *const IX509CertificateRequest,
            Encoding: EncodingType,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ClientId: fn(
            self: *const IX509CertificateRequest,
            pValue: *RequestClientInfoClientId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ClientId: fn(
            self: *const IX509CertificateRequest,
            Value: RequestClientInfoClientId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CspInformations: fn(
            self: *const IX509CertificateRequest,
            ppValue: **ICspInformations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CspInformations: fn(
            self: *const IX509CertificateRequest,
            pValue: ?*ICspInformations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_HashAlgorithm: fn(
            self: *const IX509CertificateRequest,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_HashAlgorithm: fn(
            self: *const IX509CertificateRequest,
            pValue: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AlternateSignatureAlgorithm: fn(
            self: *const IX509CertificateRequest,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AlternateSignatureAlgorithm: fn(
            self: *const IX509CertificateRequest,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RawData: fn(
            self: *const IX509CertificateRequest,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_Initialize(self: *const T, Context: X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).Initialize(@ptrCast(*const IX509CertificateRequest, self), Context);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_Encode(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).Encode(@ptrCast(*const IX509CertificateRequest, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_ResetForEncode(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).ResetForEncode(@ptrCast(*const IX509CertificateRequest, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_GetInnerRequest(self: *const T, Level: InnerRequestLevel, ppValue: **IX509CertificateRequest) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).GetInnerRequest(@ptrCast(*const IX509CertificateRequest, self), Level, ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_get_Type(self: *const T, pValue: *X509RequestType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).get_Type(@ptrCast(*const IX509CertificateRequest, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_get_EnrollmentContext(self: *const T, pValue: *X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).get_EnrollmentContext(@ptrCast(*const IX509CertificateRequest, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_get_Silent(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).get_Silent(@ptrCast(*const IX509CertificateRequest, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_put_Silent(self: *const T, Value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).put_Silent(@ptrCast(*const IX509CertificateRequest, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_get_ParentWindow(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).get_ParentWindow(@ptrCast(*const IX509CertificateRequest, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_put_ParentWindow(self: *const T, Value: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).put_ParentWindow(@ptrCast(*const IX509CertificateRequest, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_get_UIContextMessage(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).get_UIContextMessage(@ptrCast(*const IX509CertificateRequest, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_put_UIContextMessage(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).put_UIContextMessage(@ptrCast(*const IX509CertificateRequest, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_get_SuppressDefaults(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).get_SuppressDefaults(@ptrCast(*const IX509CertificateRequest, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_put_SuppressDefaults(self: *const T, Value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).put_SuppressDefaults(@ptrCast(*const IX509CertificateRequest, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_get_RenewalCertificate(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).get_RenewalCertificate(@ptrCast(*const IX509CertificateRequest, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_put_RenewalCertificate(self: *const T, Encoding: EncodingType, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).put_RenewalCertificate(@ptrCast(*const IX509CertificateRequest, self), Encoding, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_get_ClientId(self: *const T, pValue: *RequestClientInfoClientId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).get_ClientId(@ptrCast(*const IX509CertificateRequest, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_put_ClientId(self: *const T, Value: RequestClientInfoClientId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).put_ClientId(@ptrCast(*const IX509CertificateRequest, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_get_CspInformations(self: *const T, ppValue: **ICspInformations) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).get_CspInformations(@ptrCast(*const IX509CertificateRequest, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_put_CspInformations(self: *const T, pValue: ?*ICspInformations) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).put_CspInformations(@ptrCast(*const IX509CertificateRequest, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_get_HashAlgorithm(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).get_HashAlgorithm(@ptrCast(*const IX509CertificateRequest, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_put_HashAlgorithm(self: *const T, pValue: ?*IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).put_HashAlgorithm(@ptrCast(*const IX509CertificateRequest, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_get_AlternateSignatureAlgorithm(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).get_AlternateSignatureAlgorithm(@ptrCast(*const IX509CertificateRequest, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_put_AlternateSignatureAlgorithm(self: *const T, Value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).put_AlternateSignatureAlgorithm(@ptrCast(*const IX509CertificateRequest, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequest_get_RawData(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequest.VTable, self.vtable).get_RawData(@ptrCast(*const IX509CertificateRequest, self), Encoding, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const Pkcs10AllowedSignatureTypes = extern enum(i32) {
    AllowedKeySignature = 1,
    AllowedNullSignature = 2,
};
pub const AllowedKeySignature = Pkcs10AllowedSignatureTypes.AllowedKeySignature;
pub const AllowedNullSignature = Pkcs10AllowedSignatureTypes.AllowedNullSignature;

const IID_IX509CertificateRequestPkcs10_Value = @import("../zig.zig").Guid.initString("728AB342-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509CertificateRequestPkcs10 = &IID_IX509CertificateRequestPkcs10_Value;
pub const IX509CertificateRequestPkcs10 = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequest.VTable,
        InitializeFromTemplateName: fn(
            self: *const IX509CertificateRequestPkcs10,
            Context: X509CertificateEnrollmentContext,
            strTemplateName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromPrivateKey: fn(
            self: *const IX509CertificateRequestPkcs10,
            Context: X509CertificateEnrollmentContext,
            pPrivateKey: ?*IX509PrivateKey,
            strTemplateName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromPublicKey: fn(
            self: *const IX509CertificateRequestPkcs10,
            Context: X509CertificateEnrollmentContext,
            pPublicKey: ?*IX509PublicKey,
            strTemplateName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromCertificate: fn(
            self: *const IX509CertificateRequestPkcs10,
            Context: X509CertificateEnrollmentContext,
            strCertificate: BSTR,
            Encoding: EncodingType,
            InheritOptions: X509RequestInheritOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509CertificateRequestPkcs10,
            strEncodedData: BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckSignature: fn(
            self: *const IX509CertificateRequestPkcs10,
            AllowedSignatureTypes: Pkcs10AllowedSignatureTypes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSmartCard: fn(
            self: *const IX509CertificateRequestPkcs10,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_TemplateObjectId: fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PublicKey: fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: **IX509PublicKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrivateKey: fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: **IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NullSigned: fn(
            self: *const IX509CertificateRequestPkcs10,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ReuseKey: fn(
            self: *const IX509CertificateRequestPkcs10,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_OldCertificate: fn(
            self: *const IX509CertificateRequestPkcs10,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Subject: fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: **IX500DistinguishedName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Subject: fn(
            self: *const IX509CertificateRequestPkcs10,
            pValue: ?*IX500DistinguishedName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CspStatuses: fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: **ICspStatuses,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SmimeCapabilities: fn(
            self: *const IX509CertificateRequestPkcs10,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SmimeCapabilities: fn(
            self: *const IX509CertificateRequestPkcs10,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SignatureInformation: fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: **IX509SignatureInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_KeyContainerNamePrefix: fn(
            self: *const IX509CertificateRequestPkcs10,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_KeyContainerNamePrefix: fn(
            self: *const IX509CertificateRequestPkcs10,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CryptAttributes: fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: **ICryptAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_X509Extensions: fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: **IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CriticalExtensions: fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: **IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SuppressOids: fn(
            self: *const IX509CertificateRequestPkcs10,
            ppValue: **IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RawDataToBeSigned: fn(
            self: *const IX509CertificateRequestPkcs10,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Signature: fn(
            self: *const IX509CertificateRequestPkcs10,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCspStatuses: fn(
            self: *const IX509CertificateRequestPkcs10,
            KeySpec: X509KeySpec,
            ppCspStatuses: **ICspStatuses,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509CertificateRequest.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_InitializeFromTemplateName(self: *const T, Context: X509CertificateEnrollmentContext, strTemplateName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).InitializeFromTemplateName(@ptrCast(*const IX509CertificateRequestPkcs10, self), Context, strTemplateName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_InitializeFromPrivateKey(self: *const T, Context: X509CertificateEnrollmentContext, pPrivateKey: ?*IX509PrivateKey, strTemplateName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).InitializeFromPrivateKey(@ptrCast(*const IX509CertificateRequestPkcs10, self), Context, pPrivateKey, strTemplateName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_InitializeFromPublicKey(self: *const T, Context: X509CertificateEnrollmentContext, pPublicKey: ?*IX509PublicKey, strTemplateName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).InitializeFromPublicKey(@ptrCast(*const IX509CertificateRequestPkcs10, self), Context, pPublicKey, strTemplateName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_InitializeFromCertificate(self: *const T, Context: X509CertificateEnrollmentContext, strCertificate: BSTR, Encoding: EncodingType, InheritOptions: X509RequestInheritOptions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).InitializeFromCertificate(@ptrCast(*const IX509CertificateRequestPkcs10, self), Context, strCertificate, Encoding, InheritOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_InitializeDecode(self: *const T, strEncodedData: BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509CertificateRequestPkcs10, self), strEncodedData, Encoding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_CheckSignature(self: *const T, AllowedSignatureTypes: Pkcs10AllowedSignatureTypes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).CheckSignature(@ptrCast(*const IX509CertificateRequestPkcs10, self), AllowedSignatureTypes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_IsSmartCard(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).IsSmartCard(@ptrCast(*const IX509CertificateRequestPkcs10, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_get_TemplateObjectId(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).get_TemplateObjectId(@ptrCast(*const IX509CertificateRequestPkcs10, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_get_PublicKey(self: *const T, ppValue: **IX509PublicKey) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).get_PublicKey(@ptrCast(*const IX509CertificateRequestPkcs10, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_get_PrivateKey(self: *const T, ppValue: **IX509PrivateKey) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).get_PrivateKey(@ptrCast(*const IX509CertificateRequestPkcs10, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_get_NullSigned(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).get_NullSigned(@ptrCast(*const IX509CertificateRequestPkcs10, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_get_ReuseKey(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).get_ReuseKey(@ptrCast(*const IX509CertificateRequestPkcs10, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_get_OldCertificate(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).get_OldCertificate(@ptrCast(*const IX509CertificateRequestPkcs10, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_get_Subject(self: *const T, ppValue: **IX500DistinguishedName) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).get_Subject(@ptrCast(*const IX509CertificateRequestPkcs10, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_put_Subject(self: *const T, pValue: ?*IX500DistinguishedName) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).put_Subject(@ptrCast(*const IX509CertificateRequestPkcs10, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_get_CspStatuses(self: *const T, ppValue: **ICspStatuses) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).get_CspStatuses(@ptrCast(*const IX509CertificateRequestPkcs10, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_get_SmimeCapabilities(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).get_SmimeCapabilities(@ptrCast(*const IX509CertificateRequestPkcs10, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_put_SmimeCapabilities(self: *const T, Value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).put_SmimeCapabilities(@ptrCast(*const IX509CertificateRequestPkcs10, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_get_SignatureInformation(self: *const T, ppValue: **IX509SignatureInformation) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).get_SignatureInformation(@ptrCast(*const IX509CertificateRequestPkcs10, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_get_KeyContainerNamePrefix(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).get_KeyContainerNamePrefix(@ptrCast(*const IX509CertificateRequestPkcs10, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_put_KeyContainerNamePrefix(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).put_KeyContainerNamePrefix(@ptrCast(*const IX509CertificateRequestPkcs10, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_get_CryptAttributes(self: *const T, ppValue: **ICryptAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).get_CryptAttributes(@ptrCast(*const IX509CertificateRequestPkcs10, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_get_X509Extensions(self: *const T, ppValue: **IX509Extensions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).get_X509Extensions(@ptrCast(*const IX509CertificateRequestPkcs10, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_get_CriticalExtensions(self: *const T, ppValue: **IObjectIds) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).get_CriticalExtensions(@ptrCast(*const IX509CertificateRequestPkcs10, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_get_SuppressOids(self: *const T, ppValue: **IObjectIds) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).get_SuppressOids(@ptrCast(*const IX509CertificateRequestPkcs10, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_get_RawDataToBeSigned(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).get_RawDataToBeSigned(@ptrCast(*const IX509CertificateRequestPkcs10, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_get_Signature(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).get_Signature(@ptrCast(*const IX509CertificateRequestPkcs10, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10_GetCspStatuses(self: *const T, KeySpec: X509KeySpec, ppCspStatuses: **ICspStatuses) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10.VTable, self.vtable).GetCspStatuses(@ptrCast(*const IX509CertificateRequestPkcs10, self), KeySpec, ppCspStatuses);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509CertificateRequestPkcs10V2_Value = @import("../zig.zig").Guid.initString("728AB35B-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509CertificateRequestPkcs10V2 = &IID_IX509CertificateRequestPkcs10V2_Value;
pub const IX509CertificateRequestPkcs10V2 = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequestPkcs10.VTable,
        InitializeFromTemplate: fn(
            self: *const IX509CertificateRequestPkcs10V2,
            context: X509CertificateEnrollmentContext,
            pPolicyServer: ?*IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromPrivateKeyTemplate: fn(
            self: *const IX509CertificateRequestPkcs10V2,
            Context: X509CertificateEnrollmentContext,
            pPrivateKey: ?*IX509PrivateKey,
            pPolicyServer: ?*IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromPublicKeyTemplate: fn(
            self: *const IX509CertificateRequestPkcs10V2,
            Context: X509CertificateEnrollmentContext,
            pPublicKey: ?*IX509PublicKey,
            pPolicyServer: ?*IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolicyServer: fn(
            self: *const IX509CertificateRequestPkcs10V2,
            ppPolicyServer: **IX509EnrollmentPolicyServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Template: fn(
            self: *const IX509CertificateRequestPkcs10V2,
            ppTemplate: **IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509CertificateRequestPkcs10.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V2_InitializeFromTemplate(self: *const T, context: X509CertificateEnrollmentContext, pPolicyServer: ?*IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V2.VTable, self.vtable).InitializeFromTemplate(@ptrCast(*const IX509CertificateRequestPkcs10V2, self), context, pPolicyServer, pTemplate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V2_InitializeFromPrivateKeyTemplate(self: *const T, Context: X509CertificateEnrollmentContext, pPrivateKey: ?*IX509PrivateKey, pPolicyServer: ?*IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V2.VTable, self.vtable).InitializeFromPrivateKeyTemplate(@ptrCast(*const IX509CertificateRequestPkcs10V2, self), Context, pPrivateKey, pPolicyServer, pTemplate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V2_InitializeFromPublicKeyTemplate(self: *const T, Context: X509CertificateEnrollmentContext, pPublicKey: ?*IX509PublicKey, pPolicyServer: ?*IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V2.VTable, self.vtable).InitializeFromPublicKeyTemplate(@ptrCast(*const IX509CertificateRequestPkcs10V2, self), Context, pPublicKey, pPolicyServer, pTemplate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V2_get_PolicyServer(self: *const T, ppPolicyServer: **IX509EnrollmentPolicyServer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V2.VTable, self.vtable).get_PolicyServer(@ptrCast(*const IX509CertificateRequestPkcs10V2, self), ppPolicyServer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V2_get_Template(self: *const T, ppTemplate: **IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V2.VTable, self.vtable).get_Template(@ptrCast(*const IX509CertificateRequestPkcs10V2, self), ppTemplate);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509CertificateRequestPkcs10V3_Value = @import("../zig.zig").Guid.initString("54EA9942-3D66-4530-B76E-7C9170D3EC52");
pub const IID_IX509CertificateRequestPkcs10V3 = &IID_IX509CertificateRequestPkcs10V3_Value;
pub const IX509CertificateRequestPkcs10V3 = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequestPkcs10V2.VTable,
        get_AttestPrivateKey: fn(
            self: *const IX509CertificateRequestPkcs10V3,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AttestPrivateKey: fn(
            self: *const IX509CertificateRequestPkcs10V3,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AttestationEncryptionCertificate: fn(
            self: *const IX509CertificateRequestPkcs10V3,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AttestationEncryptionCertificate: fn(
            self: *const IX509CertificateRequestPkcs10V3,
            Encoding: EncodingType,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EncryptionAlgorithm: fn(
            self: *const IX509CertificateRequestPkcs10V3,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_EncryptionAlgorithm: fn(
            self: *const IX509CertificateRequestPkcs10V3,
            pValue: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EncryptionStrength: fn(
            self: *const IX509CertificateRequestPkcs10V3,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_EncryptionStrength: fn(
            self: *const IX509CertificateRequestPkcs10V3,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ChallengePassword: fn(
            self: *const IX509CertificateRequestPkcs10V3,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ChallengePassword: fn(
            self: *const IX509CertificateRequestPkcs10V3,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NameValuePairs: fn(
            self: *const IX509CertificateRequestPkcs10V3,
            ppValue: **IX509NameValuePairs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509CertificateRequestPkcs10V2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V3_get_AttestPrivateKey(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V3.VTable, self.vtable).get_AttestPrivateKey(@ptrCast(*const IX509CertificateRequestPkcs10V3, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V3_put_AttestPrivateKey(self: *const T, Value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V3.VTable, self.vtable).put_AttestPrivateKey(@ptrCast(*const IX509CertificateRequestPkcs10V3, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V3_get_AttestationEncryptionCertificate(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V3.VTable, self.vtable).get_AttestationEncryptionCertificate(@ptrCast(*const IX509CertificateRequestPkcs10V3, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V3_put_AttestationEncryptionCertificate(self: *const T, Encoding: EncodingType, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V3.VTable, self.vtable).put_AttestationEncryptionCertificate(@ptrCast(*const IX509CertificateRequestPkcs10V3, self), Encoding, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V3_get_EncryptionAlgorithm(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V3.VTable, self.vtable).get_EncryptionAlgorithm(@ptrCast(*const IX509CertificateRequestPkcs10V3, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V3_put_EncryptionAlgorithm(self: *const T, pValue: ?*IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V3.VTable, self.vtable).put_EncryptionAlgorithm(@ptrCast(*const IX509CertificateRequestPkcs10V3, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V3_get_EncryptionStrength(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V3.VTable, self.vtable).get_EncryptionStrength(@ptrCast(*const IX509CertificateRequestPkcs10V3, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V3_put_EncryptionStrength(self: *const T, Value: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V3.VTable, self.vtable).put_EncryptionStrength(@ptrCast(*const IX509CertificateRequestPkcs10V3, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V3_get_ChallengePassword(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V3.VTable, self.vtable).get_ChallengePassword(@ptrCast(*const IX509CertificateRequestPkcs10V3, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V3_put_ChallengePassword(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V3.VTable, self.vtable).put_ChallengePassword(@ptrCast(*const IX509CertificateRequestPkcs10V3, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V3_get_NameValuePairs(self: *const T, ppValue: **IX509NameValuePairs) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V3.VTable, self.vtable).get_NameValuePairs(@ptrCast(*const IX509CertificateRequestPkcs10V3, self), ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const KeyAttestationClaimType = extern enum(i32) {
    XCN_NCRYPT_CLAIM_NONE = 0,
    XCN_NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT = 3,
    XCN_NCRYPT_CLAIM_AUTHORITY_ONLY = 1,
    XCN_NCRYPT_CLAIM_SUBJECT_ONLY = 2,
    XCN_NCRYPT_CLAIM_UNKNOWN = 4096,
};
pub const XCN_NCRYPT_CLAIM_NONE = KeyAttestationClaimType.XCN_NCRYPT_CLAIM_NONE;
pub const XCN_NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT = KeyAttestationClaimType.XCN_NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT;
pub const XCN_NCRYPT_CLAIM_AUTHORITY_ONLY = KeyAttestationClaimType.XCN_NCRYPT_CLAIM_AUTHORITY_ONLY;
pub const XCN_NCRYPT_CLAIM_SUBJECT_ONLY = KeyAttestationClaimType.XCN_NCRYPT_CLAIM_SUBJECT_ONLY;
pub const XCN_NCRYPT_CLAIM_UNKNOWN = KeyAttestationClaimType.XCN_NCRYPT_CLAIM_UNKNOWN;

const IID_IX509CertificateRequestPkcs10V4_Value = @import("../zig.zig").Guid.initString("728AB363-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509CertificateRequestPkcs10V4 = &IID_IX509CertificateRequestPkcs10V4_Value;
pub const IX509CertificateRequestPkcs10V4 = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequestPkcs10V3.VTable,
        get_ClaimType: fn(
            self: *const IX509CertificateRequestPkcs10V4,
            pValue: *KeyAttestationClaimType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ClaimType: fn(
            self: *const IX509CertificateRequestPkcs10V4,
            Value: KeyAttestationClaimType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AttestPrivateKeyPreferred: fn(
            self: *const IX509CertificateRequestPkcs10V4,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AttestPrivateKeyPreferred: fn(
            self: *const IX509CertificateRequestPkcs10V4,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509CertificateRequestPkcs10V3.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V4_get_ClaimType(self: *const T, pValue: *KeyAttestationClaimType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V4.VTable, self.vtable).get_ClaimType(@ptrCast(*const IX509CertificateRequestPkcs10V4, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V4_put_ClaimType(self: *const T, Value: KeyAttestationClaimType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V4.VTable, self.vtable).put_ClaimType(@ptrCast(*const IX509CertificateRequestPkcs10V4, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V4_get_AttestPrivateKeyPreferred(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V4.VTable, self.vtable).get_AttestPrivateKeyPreferred(@ptrCast(*const IX509CertificateRequestPkcs10V4, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs10V4_put_AttestPrivateKeyPreferred(self: *const T, Value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs10V4.VTable, self.vtable).put_AttestPrivateKeyPreferred(@ptrCast(*const IX509CertificateRequestPkcs10V4, self), Value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509CertificateRequestCertificate_Value = @import("../zig.zig").Guid.initString("728AB343-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509CertificateRequestCertificate = &IID_IX509CertificateRequestCertificate_Value;
pub const IX509CertificateRequestCertificate = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequestPkcs10.VTable,
        CheckPublicKeySignature: fn(
            self: *const IX509CertificateRequestCertificate,
            pPublicKey: ?*IX509PublicKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Issuer: fn(
            self: *const IX509CertificateRequestCertificate,
            ppValue: **IX500DistinguishedName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Issuer: fn(
            self: *const IX509CertificateRequestCertificate,
            pValue: ?*IX500DistinguishedName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NotBefore: fn(
            self: *const IX509CertificateRequestCertificate,
            pValue: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_NotBefore: fn(
            self: *const IX509CertificateRequestCertificate,
            Value: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NotAfter: fn(
            self: *const IX509CertificateRequestCertificate,
            pValue: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_NotAfter: fn(
            self: *const IX509CertificateRequestCertificate,
            Value: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SerialNumber: fn(
            self: *const IX509CertificateRequestCertificate,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SerialNumber: fn(
            self: *const IX509CertificateRequestCertificate,
            Encoding: EncodingType,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SignerCertificate: fn(
            self: *const IX509CertificateRequestCertificate,
            ppValue: **ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SignerCertificate: fn(
            self: *const IX509CertificateRequestCertificate,
            pValue: ?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509CertificateRequestPkcs10.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCertificate_CheckPublicKeySignature(self: *const T, pPublicKey: ?*IX509PublicKey) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCertificate.VTable, self.vtable).CheckPublicKeySignature(@ptrCast(*const IX509CertificateRequestCertificate, self), pPublicKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCertificate_get_Issuer(self: *const T, ppValue: **IX500DistinguishedName) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCertificate.VTable, self.vtable).get_Issuer(@ptrCast(*const IX509CertificateRequestCertificate, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCertificate_put_Issuer(self: *const T, pValue: ?*IX500DistinguishedName) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCertificate.VTable, self.vtable).put_Issuer(@ptrCast(*const IX509CertificateRequestCertificate, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCertificate_get_NotBefore(self: *const T, pValue: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCertificate.VTable, self.vtable).get_NotBefore(@ptrCast(*const IX509CertificateRequestCertificate, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCertificate_put_NotBefore(self: *const T, Value: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCertificate.VTable, self.vtable).put_NotBefore(@ptrCast(*const IX509CertificateRequestCertificate, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCertificate_get_NotAfter(self: *const T, pValue: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCertificate.VTable, self.vtable).get_NotAfter(@ptrCast(*const IX509CertificateRequestCertificate, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCertificate_put_NotAfter(self: *const T, Value: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCertificate.VTable, self.vtable).put_NotAfter(@ptrCast(*const IX509CertificateRequestCertificate, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCertificate_get_SerialNumber(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCertificate.VTable, self.vtable).get_SerialNumber(@ptrCast(*const IX509CertificateRequestCertificate, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCertificate_put_SerialNumber(self: *const T, Encoding: EncodingType, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCertificate.VTable, self.vtable).put_SerialNumber(@ptrCast(*const IX509CertificateRequestCertificate, self), Encoding, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCertificate_get_SignerCertificate(self: *const T, ppValue: **ISignerCertificate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCertificate.VTable, self.vtable).get_SignerCertificate(@ptrCast(*const IX509CertificateRequestCertificate, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCertificate_put_SignerCertificate(self: *const T, pValue: ?*ISignerCertificate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCertificate.VTable, self.vtable).put_SignerCertificate(@ptrCast(*const IX509CertificateRequestCertificate, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509CertificateRequestCertificate2_Value = @import("../zig.zig").Guid.initString("728AB35A-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509CertificateRequestCertificate2 = &IID_IX509CertificateRequestCertificate2_Value;
pub const IX509CertificateRequestCertificate2 = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequestCertificate.VTable,
        InitializeFromTemplate: fn(
            self: *const IX509CertificateRequestCertificate2,
            context: X509CertificateEnrollmentContext,
            pPolicyServer: ?*IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromPrivateKeyTemplate: fn(
            self: *const IX509CertificateRequestCertificate2,
            Context: X509CertificateEnrollmentContext,
            pPrivateKey: ?*IX509PrivateKey,
            pPolicyServer: ?*IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolicyServer: fn(
            self: *const IX509CertificateRequestCertificate2,
            ppPolicyServer: **IX509EnrollmentPolicyServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Template: fn(
            self: *const IX509CertificateRequestCertificate2,
            ppTemplate: **IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509CertificateRequestCertificate.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCertificate2_InitializeFromTemplate(self: *const T, context: X509CertificateEnrollmentContext, pPolicyServer: ?*IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCertificate2.VTable, self.vtable).InitializeFromTemplate(@ptrCast(*const IX509CertificateRequestCertificate2, self), context, pPolicyServer, pTemplate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCertificate2_InitializeFromPrivateKeyTemplate(self: *const T, Context: X509CertificateEnrollmentContext, pPrivateKey: ?*IX509PrivateKey, pPolicyServer: ?*IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCertificate2.VTable, self.vtable).InitializeFromPrivateKeyTemplate(@ptrCast(*const IX509CertificateRequestCertificate2, self), Context, pPrivateKey, pPolicyServer, pTemplate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCertificate2_get_PolicyServer(self: *const T, ppPolicyServer: **IX509EnrollmentPolicyServer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCertificate2.VTable, self.vtable).get_PolicyServer(@ptrCast(*const IX509CertificateRequestCertificate2, self), ppPolicyServer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCertificate2_get_Template(self: *const T, ppTemplate: **IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCertificate2.VTable, self.vtable).get_Template(@ptrCast(*const IX509CertificateRequestCertificate2, self), ppTemplate);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509CertificateRequestPkcs7_Value = @import("../zig.zig").Guid.initString("728AB344-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509CertificateRequestPkcs7 = &IID_IX509CertificateRequestPkcs7_Value;
pub const IX509CertificateRequestPkcs7 = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequest.VTable,
        InitializeFromTemplateName: fn(
            self: *const IX509CertificateRequestPkcs7,
            Context: X509CertificateEnrollmentContext,
            strTemplateName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromCertificate: fn(
            self: *const IX509CertificateRequestPkcs7,
            Context: X509CertificateEnrollmentContext,
            RenewalRequest: i16,
            strCertificate: BSTR,
            Encoding: EncodingType,
            InheritOptions: X509RequestInheritOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromInnerRequest: fn(
            self: *const IX509CertificateRequestPkcs7,
            pInnerRequest: ?*IX509CertificateRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509CertificateRequestPkcs7,
            strEncodedData: BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RequesterName: fn(
            self: *const IX509CertificateRequestPkcs7,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RequesterName: fn(
            self: *const IX509CertificateRequestPkcs7,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SignerCertificate: fn(
            self: *const IX509CertificateRequestPkcs7,
            ppValue: **ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SignerCertificate: fn(
            self: *const IX509CertificateRequestPkcs7,
            pValue: ?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509CertificateRequest.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs7_InitializeFromTemplateName(self: *const T, Context: X509CertificateEnrollmentContext, strTemplateName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs7.VTable, self.vtable).InitializeFromTemplateName(@ptrCast(*const IX509CertificateRequestPkcs7, self), Context, strTemplateName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs7_InitializeFromCertificate(self: *const T, Context: X509CertificateEnrollmentContext, RenewalRequest: i16, strCertificate: BSTR, Encoding: EncodingType, InheritOptions: X509RequestInheritOptions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs7.VTable, self.vtable).InitializeFromCertificate(@ptrCast(*const IX509CertificateRequestPkcs7, self), Context, RenewalRequest, strCertificate, Encoding, InheritOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs7_InitializeFromInnerRequest(self: *const T, pInnerRequest: ?*IX509CertificateRequest) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs7.VTable, self.vtable).InitializeFromInnerRequest(@ptrCast(*const IX509CertificateRequestPkcs7, self), pInnerRequest);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs7_InitializeDecode(self: *const T, strEncodedData: BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs7.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509CertificateRequestPkcs7, self), strEncodedData, Encoding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs7_get_RequesterName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs7.VTable, self.vtable).get_RequesterName(@ptrCast(*const IX509CertificateRequestPkcs7, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs7_put_RequesterName(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs7.VTable, self.vtable).put_RequesterName(@ptrCast(*const IX509CertificateRequestPkcs7, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs7_get_SignerCertificate(self: *const T, ppValue: **ISignerCertificate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs7.VTable, self.vtable).get_SignerCertificate(@ptrCast(*const IX509CertificateRequestPkcs7, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs7_put_SignerCertificate(self: *const T, pValue: ?*ISignerCertificate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs7.VTable, self.vtable).put_SignerCertificate(@ptrCast(*const IX509CertificateRequestPkcs7, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509CertificateRequestPkcs7V2_Value = @import("../zig.zig").Guid.initString("728AB35C-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509CertificateRequestPkcs7V2 = &IID_IX509CertificateRequestPkcs7V2_Value;
pub const IX509CertificateRequestPkcs7V2 = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequestPkcs7.VTable,
        InitializeFromTemplate: fn(
            self: *const IX509CertificateRequestPkcs7V2,
            context: X509CertificateEnrollmentContext,
            pPolicyServer: ?*IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolicyServer: fn(
            self: *const IX509CertificateRequestPkcs7V2,
            ppPolicyServer: **IX509EnrollmentPolicyServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Template: fn(
            self: *const IX509CertificateRequestPkcs7V2,
            ppTemplate: **IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckCertificateSignature: fn(
            self: *const IX509CertificateRequestPkcs7V2,
            ValidateCertificateChain: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509CertificateRequestPkcs7.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs7V2_InitializeFromTemplate(self: *const T, context: X509CertificateEnrollmentContext, pPolicyServer: ?*IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs7V2.VTable, self.vtable).InitializeFromTemplate(@ptrCast(*const IX509CertificateRequestPkcs7V2, self), context, pPolicyServer, pTemplate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs7V2_get_PolicyServer(self: *const T, ppPolicyServer: **IX509EnrollmentPolicyServer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs7V2.VTable, self.vtable).get_PolicyServer(@ptrCast(*const IX509CertificateRequestPkcs7V2, self), ppPolicyServer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs7V2_get_Template(self: *const T, ppTemplate: **IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs7V2.VTable, self.vtable).get_Template(@ptrCast(*const IX509CertificateRequestPkcs7V2, self), ppTemplate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestPkcs7V2_CheckCertificateSignature(self: *const T, ValidateCertificateChain: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestPkcs7V2.VTable, self.vtable).CheckCertificateSignature(@ptrCast(*const IX509CertificateRequestPkcs7V2, self), ValidateCertificateChain);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509CertificateRequestCmc_Value = @import("../zig.zig").Guid.initString("728AB345-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509CertificateRequestCmc = &IID_IX509CertificateRequestCmc_Value;
pub const IX509CertificateRequestCmc = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequestPkcs7.VTable,
        InitializeFromInnerRequestTemplateName: fn(
            self: *const IX509CertificateRequestCmc,
            pInnerRequest: ?*IX509CertificateRequest,
            strTemplateName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_TemplateObjectId: fn(
            self: *const IX509CertificateRequestCmc,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NullSigned: fn(
            self: *const IX509CertificateRequestCmc,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CryptAttributes: fn(
            self: *const IX509CertificateRequestCmc,
            ppValue: **ICryptAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NameValuePairs: fn(
            self: *const IX509CertificateRequestCmc,
            ppValue: **IX509NameValuePairs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_X509Extensions: fn(
            self: *const IX509CertificateRequestCmc,
            ppValue: **IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CriticalExtensions: fn(
            self: *const IX509CertificateRequestCmc,
            ppValue: **IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SuppressOids: fn(
            self: *const IX509CertificateRequestCmc,
            ppValue: **IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_TransactionId: fn(
            self: *const IX509CertificateRequestCmc,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_TransactionId: fn(
            self: *const IX509CertificateRequestCmc,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SenderNonce: fn(
            self: *const IX509CertificateRequestCmc,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SenderNonce: fn(
            self: *const IX509CertificateRequestCmc,
            Encoding: EncodingType,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SignatureInformation: fn(
            self: *const IX509CertificateRequestCmc,
            ppValue: **IX509SignatureInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ArchivePrivateKey: fn(
            self: *const IX509CertificateRequestCmc,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ArchivePrivateKey: fn(
            self: *const IX509CertificateRequestCmc,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_KeyArchivalCertificate: fn(
            self: *const IX509CertificateRequestCmc,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_KeyArchivalCertificate: fn(
            self: *const IX509CertificateRequestCmc,
            Encoding: EncodingType,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EncryptionAlgorithm: fn(
            self: *const IX509CertificateRequestCmc,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_EncryptionAlgorithm: fn(
            self: *const IX509CertificateRequestCmc,
            pValue: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EncryptionStrength: fn(
            self: *const IX509CertificateRequestCmc,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_EncryptionStrength: fn(
            self: *const IX509CertificateRequestCmc,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EncryptedKeyHash: fn(
            self: *const IX509CertificateRequestCmc,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SignerCertificates: fn(
            self: *const IX509CertificateRequestCmc,
            ppValue: **ISignerCertificates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509CertificateRequestPkcs7.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_InitializeFromInnerRequestTemplateName(self: *const T, pInnerRequest: ?*IX509CertificateRequest, strTemplateName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).InitializeFromInnerRequestTemplateName(@ptrCast(*const IX509CertificateRequestCmc, self), pInnerRequest, strTemplateName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_get_TemplateObjectId(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).get_TemplateObjectId(@ptrCast(*const IX509CertificateRequestCmc, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_get_NullSigned(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).get_NullSigned(@ptrCast(*const IX509CertificateRequestCmc, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_get_CryptAttributes(self: *const T, ppValue: **ICryptAttributes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).get_CryptAttributes(@ptrCast(*const IX509CertificateRequestCmc, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_get_NameValuePairs(self: *const T, ppValue: **IX509NameValuePairs) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).get_NameValuePairs(@ptrCast(*const IX509CertificateRequestCmc, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_get_X509Extensions(self: *const T, ppValue: **IX509Extensions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).get_X509Extensions(@ptrCast(*const IX509CertificateRequestCmc, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_get_CriticalExtensions(self: *const T, ppValue: **IObjectIds) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).get_CriticalExtensions(@ptrCast(*const IX509CertificateRequestCmc, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_get_SuppressOids(self: *const T, ppValue: **IObjectIds) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).get_SuppressOids(@ptrCast(*const IX509CertificateRequestCmc, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_get_TransactionId(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).get_TransactionId(@ptrCast(*const IX509CertificateRequestCmc, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_put_TransactionId(self: *const T, Value: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).put_TransactionId(@ptrCast(*const IX509CertificateRequestCmc, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_get_SenderNonce(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).get_SenderNonce(@ptrCast(*const IX509CertificateRequestCmc, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_put_SenderNonce(self: *const T, Encoding: EncodingType, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).put_SenderNonce(@ptrCast(*const IX509CertificateRequestCmc, self), Encoding, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_get_SignatureInformation(self: *const T, ppValue: **IX509SignatureInformation) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).get_SignatureInformation(@ptrCast(*const IX509CertificateRequestCmc, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_get_ArchivePrivateKey(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).get_ArchivePrivateKey(@ptrCast(*const IX509CertificateRequestCmc, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_put_ArchivePrivateKey(self: *const T, Value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).put_ArchivePrivateKey(@ptrCast(*const IX509CertificateRequestCmc, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_get_KeyArchivalCertificate(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).get_KeyArchivalCertificate(@ptrCast(*const IX509CertificateRequestCmc, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_put_KeyArchivalCertificate(self: *const T, Encoding: EncodingType, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).put_KeyArchivalCertificate(@ptrCast(*const IX509CertificateRequestCmc, self), Encoding, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_get_EncryptionAlgorithm(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).get_EncryptionAlgorithm(@ptrCast(*const IX509CertificateRequestCmc, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_put_EncryptionAlgorithm(self: *const T, pValue: ?*IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).put_EncryptionAlgorithm(@ptrCast(*const IX509CertificateRequestCmc, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_get_EncryptionStrength(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).get_EncryptionStrength(@ptrCast(*const IX509CertificateRequestCmc, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_put_EncryptionStrength(self: *const T, Value: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).put_EncryptionStrength(@ptrCast(*const IX509CertificateRequestCmc, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_get_EncryptedKeyHash(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).get_EncryptedKeyHash(@ptrCast(*const IX509CertificateRequestCmc, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc_get_SignerCertificates(self: *const T, ppValue: **ISignerCertificates) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc.VTable, self.vtable).get_SignerCertificates(@ptrCast(*const IX509CertificateRequestCmc, self), ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509CertificateRequestCmc2_Value = @import("../zig.zig").Guid.initString("728AB35D-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509CertificateRequestCmc2 = &IID_IX509CertificateRequestCmc2_Value;
pub const IX509CertificateRequestCmc2 = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequestCmc.VTable,
        InitializeFromTemplate: fn(
            self: *const IX509CertificateRequestCmc2,
            context: X509CertificateEnrollmentContext,
            pPolicyServer: ?*IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromInnerRequestTemplate: fn(
            self: *const IX509CertificateRequestCmc2,
            pInnerRequest: ?*IX509CertificateRequest,
            pPolicyServer: ?*IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolicyServer: fn(
            self: *const IX509CertificateRequestCmc2,
            ppPolicyServer: **IX509EnrollmentPolicyServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Template: fn(
            self: *const IX509CertificateRequestCmc2,
            ppTemplate: **IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckSignature: fn(
            self: *const IX509CertificateRequestCmc2,
            AllowedSignatureTypes: Pkcs10AllowedSignatureTypes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckCertificateSignature: fn(
            self: *const IX509CertificateRequestCmc2,
            pSignerCertificate: ?*ISignerCertificate,
            ValidateCertificateChain: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509CertificateRequestCmc.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc2_InitializeFromTemplate(self: *const T, context: X509CertificateEnrollmentContext, pPolicyServer: ?*IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc2.VTable, self.vtable).InitializeFromTemplate(@ptrCast(*const IX509CertificateRequestCmc2, self), context, pPolicyServer, pTemplate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc2_InitializeFromInnerRequestTemplate(self: *const T, pInnerRequest: ?*IX509CertificateRequest, pPolicyServer: ?*IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc2.VTable, self.vtable).InitializeFromInnerRequestTemplate(@ptrCast(*const IX509CertificateRequestCmc2, self), pInnerRequest, pPolicyServer, pTemplate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc2_get_PolicyServer(self: *const T, ppPolicyServer: **IX509EnrollmentPolicyServer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc2.VTable, self.vtable).get_PolicyServer(@ptrCast(*const IX509CertificateRequestCmc2, self), ppPolicyServer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc2_get_Template(self: *const T, ppTemplate: **IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc2.VTable, self.vtable).get_Template(@ptrCast(*const IX509CertificateRequestCmc2, self), ppTemplate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc2_CheckSignature(self: *const T, AllowedSignatureTypes: Pkcs10AllowedSignatureTypes) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc2.VTable, self.vtable).CheckSignature(@ptrCast(*const IX509CertificateRequestCmc2, self), AllowedSignatureTypes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRequestCmc2_CheckCertificateSignature(self: *const T, pSignerCertificate: ?*ISignerCertificate, ValidateCertificateChain: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRequestCmc2.VTable, self.vtable).CheckCertificateSignature(@ptrCast(*const IX509CertificateRequestCmc2, self), pSignerCertificate, ValidateCertificateChain);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const InstallResponseRestrictionFlags = extern enum(i32) {
    AllowNone = 0,
    AllowNoOutstandingRequest = 1,
    AllowUntrustedCertificate = 2,
    AllowUntrustedRoot = 4,
};
pub const AllowNone = InstallResponseRestrictionFlags.AllowNone;
pub const AllowNoOutstandingRequest = InstallResponseRestrictionFlags.AllowNoOutstandingRequest;
pub const AllowUntrustedCertificate = InstallResponseRestrictionFlags.AllowUntrustedCertificate;
pub const AllowUntrustedRoot = InstallResponseRestrictionFlags.AllowUntrustedRoot;

const IID_IX509Enrollment_Value = @import("../zig.zig").Guid.initString("728AB346-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509Enrollment = &IID_IX509Enrollment_Value;
pub const IX509Enrollment = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const IX509Enrollment,
            Context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromTemplateName: fn(
            self: *const IX509Enrollment,
            Context: X509CertificateEnrollmentContext,
            strTemplateName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromRequest: fn(
            self: *const IX509Enrollment,
            pRequest: ?*IX509CertificateRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRequest: fn(
            self: *const IX509Enrollment,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enroll: fn(
            self: *const IX509Enrollment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallResponse: fn(
            self: *const IX509Enrollment,
            Restrictions: InstallResponseRestrictionFlags,
            strResponse: BSTR,
            Encoding: EncodingType,
            strPassword: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePFX: fn(
            self: *const IX509Enrollment,
            strPassword: BSTR,
            ExportOptions: PFXExportOptions,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Request: fn(
            self: *const IX509Enrollment,
            pValue: **IX509CertificateRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Silent: fn(
            self: *const IX509Enrollment,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Silent: fn(
            self: *const IX509Enrollment,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ParentWindow: fn(
            self: *const IX509Enrollment,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ParentWindow: fn(
            self: *const IX509Enrollment,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NameValuePairs: fn(
            self: *const IX509Enrollment,
            ppValue: **IX509NameValuePairs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EnrollmentContext: fn(
            self: *const IX509Enrollment,
            pValue: *X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Status: fn(
            self: *const IX509Enrollment,
            ppValue: **IX509EnrollmentStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Certificate: fn(
            self: *const IX509Enrollment,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Response: fn(
            self: *const IX509Enrollment,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CertificateFriendlyName: fn(
            self: *const IX509Enrollment,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CertificateFriendlyName: fn(
            self: *const IX509Enrollment,
            strValue: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CertificateDescription: fn(
            self: *const IX509Enrollment,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CertificateDescription: fn(
            self: *const IX509Enrollment,
            strValue: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RequestId: fn(
            self: *const IX509Enrollment,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CAConfigString: fn(
            self: *const IX509Enrollment,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_Initialize(self: *const T, Context: X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).Initialize(@ptrCast(*const IX509Enrollment, self), Context);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_InitializeFromTemplateName(self: *const T, Context: X509CertificateEnrollmentContext, strTemplateName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).InitializeFromTemplateName(@ptrCast(*const IX509Enrollment, self), Context, strTemplateName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_InitializeFromRequest(self: *const T, pRequest: ?*IX509CertificateRequest) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).InitializeFromRequest(@ptrCast(*const IX509Enrollment, self), pRequest);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_CreateRequest(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).CreateRequest(@ptrCast(*const IX509Enrollment, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_Enroll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).Enroll(@ptrCast(*const IX509Enrollment, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_InstallResponse(self: *const T, Restrictions: InstallResponseRestrictionFlags, strResponse: BSTR, Encoding: EncodingType, strPassword: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).InstallResponse(@ptrCast(*const IX509Enrollment, self), Restrictions, strResponse, Encoding, strPassword);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_CreatePFX(self: *const T, strPassword: BSTR, ExportOptions: PFXExportOptions, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).CreatePFX(@ptrCast(*const IX509Enrollment, self), strPassword, ExportOptions, Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_get_Request(self: *const T, pValue: **IX509CertificateRequest) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).get_Request(@ptrCast(*const IX509Enrollment, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_get_Silent(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).get_Silent(@ptrCast(*const IX509Enrollment, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_put_Silent(self: *const T, Value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).put_Silent(@ptrCast(*const IX509Enrollment, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_get_ParentWindow(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).get_ParentWindow(@ptrCast(*const IX509Enrollment, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_put_ParentWindow(self: *const T, Value: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).put_ParentWindow(@ptrCast(*const IX509Enrollment, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_get_NameValuePairs(self: *const T, ppValue: **IX509NameValuePairs) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).get_NameValuePairs(@ptrCast(*const IX509Enrollment, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_get_EnrollmentContext(self: *const T, pValue: *X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).get_EnrollmentContext(@ptrCast(*const IX509Enrollment, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_get_Status(self: *const T, ppValue: **IX509EnrollmentStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).get_Status(@ptrCast(*const IX509Enrollment, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_get_Certificate(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).get_Certificate(@ptrCast(*const IX509Enrollment, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_get_Response(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).get_Response(@ptrCast(*const IX509Enrollment, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_get_CertificateFriendlyName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).get_CertificateFriendlyName(@ptrCast(*const IX509Enrollment, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_put_CertificateFriendlyName(self: *const T, strValue: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).put_CertificateFriendlyName(@ptrCast(*const IX509Enrollment, self), strValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_get_CertificateDescription(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).get_CertificateDescription(@ptrCast(*const IX509Enrollment, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_put_CertificateDescription(self: *const T, strValue: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).put_CertificateDescription(@ptrCast(*const IX509Enrollment, self), strValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_get_RequestId(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).get_RequestId(@ptrCast(*const IX509Enrollment, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment_get_CAConfigString(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment.VTable, self.vtable).get_CAConfigString(@ptrCast(*const IX509Enrollment, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509Enrollment2_Value = @import("../zig.zig").Guid.initString("728AB350-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509Enrollment2 = &IID_IX509Enrollment2_Value;
pub const IX509Enrollment2 = extern struct {
    pub const VTable = extern struct {
        base: IX509Enrollment.VTable,
        InitializeFromTemplate: fn(
            self: *const IX509Enrollment2,
            context: X509CertificateEnrollmentContext,
            pPolicyServer: ?*IX509EnrollmentPolicyServer,
            pTemplate: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallResponse2: fn(
            self: *const IX509Enrollment2,
            Restrictions: InstallResponseRestrictionFlags,
            strResponse: BSTR,
            Encoding: EncodingType,
            strPassword: BSTR,
            strEnrollmentPolicyServerUrl: BSTR,
            strEnrollmentPolicyServerID: BSTR,
            EnrollmentPolicyServerFlags: PolicyServerUrlFlags,
            authFlags: X509EnrollmentAuthFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PolicyServer: fn(
            self: *const IX509Enrollment2,
            ppPolicyServer: **IX509EnrollmentPolicyServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Template: fn(
            self: *const IX509Enrollment2,
            ppTemplate: **IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RequestIdString: fn(
            self: *const IX509Enrollment2,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509Enrollment.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment2_InitializeFromTemplate(self: *const T, context: X509CertificateEnrollmentContext, pPolicyServer: ?*IX509EnrollmentPolicyServer, pTemplate: ?*IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment2.VTable, self.vtable).InitializeFromTemplate(@ptrCast(*const IX509Enrollment2, self), context, pPolicyServer, pTemplate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment2_InstallResponse2(self: *const T, Restrictions: InstallResponseRestrictionFlags, strResponse: BSTR, Encoding: EncodingType, strPassword: BSTR, strEnrollmentPolicyServerUrl: BSTR, strEnrollmentPolicyServerID: BSTR, EnrollmentPolicyServerFlags: PolicyServerUrlFlags, authFlags: X509EnrollmentAuthFlags) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment2.VTable, self.vtable).InstallResponse2(@ptrCast(*const IX509Enrollment2, self), Restrictions, strResponse, Encoding, strPassword, strEnrollmentPolicyServerUrl, strEnrollmentPolicyServerID, EnrollmentPolicyServerFlags, authFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment2_get_PolicyServer(self: *const T, ppPolicyServer: **IX509EnrollmentPolicyServer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment2.VTable, self.vtable).get_PolicyServer(@ptrCast(*const IX509Enrollment2, self), ppPolicyServer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment2_get_Template(self: *const T, ppTemplate: **IX509CertificateTemplate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment2.VTable, self.vtable).get_Template(@ptrCast(*const IX509Enrollment2, self), ppTemplate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509Enrollment2_get_RequestIdString(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509Enrollment2.VTable, self.vtable).get_RequestIdString(@ptrCast(*const IX509Enrollment2, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WebEnrollmentFlags = extern enum(i32) {
    EnrollPrompt = 1,
};
pub const EnrollPrompt = WebEnrollmentFlags.EnrollPrompt;

const IID_IX509EnrollmentHelper_Value = @import("../zig.zig").Guid.initString("728AB351-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509EnrollmentHelper = &IID_IX509EnrollmentHelper_Value;
pub const IX509EnrollmentHelper = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        AddPolicyServer: fn(
            self: *const IX509EnrollmentHelper,
            strEnrollmentPolicyServerURI: BSTR,
            strEnrollmentPolicyID: BSTR,
            EnrollmentPolicyServerFlags: PolicyServerUrlFlags,
            authFlags: X509EnrollmentAuthFlags,
            strCredential: BSTR,
            strPassword: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddEnrollmentServer: fn(
            self: *const IX509EnrollmentHelper,
            strEnrollmentServerURI: BSTR,
            authFlags: X509EnrollmentAuthFlags,
            strCredential: BSTR,
            strPassword: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enroll: fn(
            self: *const IX509EnrollmentHelper,
            strEnrollmentPolicyServerURI: BSTR,
            strTemplateName: BSTR,
            Encoding: EncodingType,
            enrollFlags: WebEnrollmentFlags,
            pstrCertificate: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IX509EnrollmentHelper,
            Context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentHelper_AddPolicyServer(self: *const T, strEnrollmentPolicyServerURI: BSTR, strEnrollmentPolicyID: BSTR, EnrollmentPolicyServerFlags: PolicyServerUrlFlags, authFlags: X509EnrollmentAuthFlags, strCredential: BSTR, strPassword: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentHelper.VTable, self.vtable).AddPolicyServer(@ptrCast(*const IX509EnrollmentHelper, self), strEnrollmentPolicyServerURI, strEnrollmentPolicyID, EnrollmentPolicyServerFlags, authFlags, strCredential, strPassword);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentHelper_AddEnrollmentServer(self: *const T, strEnrollmentServerURI: BSTR, authFlags: X509EnrollmentAuthFlags, strCredential: BSTR, strPassword: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentHelper.VTable, self.vtable).AddEnrollmentServer(@ptrCast(*const IX509EnrollmentHelper, self), strEnrollmentServerURI, authFlags, strCredential, strPassword);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentHelper_Enroll(self: *const T, strEnrollmentPolicyServerURI: BSTR, strTemplateName: BSTR, Encoding: EncodingType, enrollFlags: WebEnrollmentFlags, pstrCertificate: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentHelper.VTable, self.vtable).Enroll(@ptrCast(*const IX509EnrollmentHelper, self), strEnrollmentPolicyServerURI, strTemplateName, Encoding, enrollFlags, pstrCertificate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentHelper_Initialize(self: *const T, Context: X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentHelper.VTable, self.vtable).Initialize(@ptrCast(*const IX509EnrollmentHelper, self), Context);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509EnrollmentWebClassFactory_Value = @import("../zig.zig").Guid.initString("728AB349-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509EnrollmentWebClassFactory = &IID_IX509EnrollmentWebClassFactory_Value;
pub const IX509EnrollmentWebClassFactory = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreateObject: fn(
            self: *const IX509EnrollmentWebClassFactory,
            strProgID: BSTR,
            ppIUnknown: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509EnrollmentWebClassFactory_CreateObject(self: *const T, strProgID: BSTR, ppIUnknown: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509EnrollmentWebClassFactory.VTable, self.vtable).CreateObject(@ptrCast(*const IX509EnrollmentWebClassFactory, self), strProgID, ppIUnknown);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509MachineEnrollmentFactory_Value = @import("../zig.zig").Guid.initString("728AB352-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509MachineEnrollmentFactory = &IID_IX509MachineEnrollmentFactory_Value;
pub const IX509MachineEnrollmentFactory = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreateObject: fn(
            self: *const IX509MachineEnrollmentFactory,
            strProgID: BSTR,
            ppIHelper: **IX509EnrollmentHelper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509MachineEnrollmentFactory_CreateObject(self: *const T, strProgID: BSTR, ppIHelper: **IX509EnrollmentHelper) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509MachineEnrollmentFactory.VTable, self.vtable).CreateObject(@ptrCast(*const IX509MachineEnrollmentFactory, self), strProgID, ppIHelper);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CRLRevocationReason = extern enum(i32) {
    XCN_CRL_REASON_UNSPECIFIED = 0,
    XCN_CRL_REASON_KEY_COMPROMISE = 1,
    XCN_CRL_REASON_CA_COMPROMISE = 2,
    XCN_CRL_REASON_AFFILIATION_CHANGED = 3,
    XCN_CRL_REASON_SUPERSEDED = 4,
    XCN_CRL_REASON_CESSATION_OF_OPERATION = 5,
    XCN_CRL_REASON_CERTIFICATE_HOLD = 6,
    XCN_CRL_REASON_REMOVE_FROM_CRL = 8,
    XCN_CRL_REASON_PRIVILEGE_WITHDRAWN = 9,
    XCN_CRL_REASON_AA_COMPROMISE = 10,
};
pub const XCN_CRL_REASON_UNSPECIFIED = CRLRevocationReason.XCN_CRL_REASON_UNSPECIFIED;
pub const XCN_CRL_REASON_KEY_COMPROMISE = CRLRevocationReason.XCN_CRL_REASON_KEY_COMPROMISE;
pub const XCN_CRL_REASON_CA_COMPROMISE = CRLRevocationReason.XCN_CRL_REASON_CA_COMPROMISE;
pub const XCN_CRL_REASON_AFFILIATION_CHANGED = CRLRevocationReason.XCN_CRL_REASON_AFFILIATION_CHANGED;
pub const XCN_CRL_REASON_SUPERSEDED = CRLRevocationReason.XCN_CRL_REASON_SUPERSEDED;
pub const XCN_CRL_REASON_CESSATION_OF_OPERATION = CRLRevocationReason.XCN_CRL_REASON_CESSATION_OF_OPERATION;
pub const XCN_CRL_REASON_CERTIFICATE_HOLD = CRLRevocationReason.XCN_CRL_REASON_CERTIFICATE_HOLD;
pub const XCN_CRL_REASON_REMOVE_FROM_CRL = CRLRevocationReason.XCN_CRL_REASON_REMOVE_FROM_CRL;
pub const XCN_CRL_REASON_PRIVILEGE_WITHDRAWN = CRLRevocationReason.XCN_CRL_REASON_PRIVILEGE_WITHDRAWN;
pub const XCN_CRL_REASON_AA_COMPROMISE = CRLRevocationReason.XCN_CRL_REASON_AA_COMPROMISE;

const IID_IX509CertificateRevocationListEntry_Value = @import("../zig.zig").Guid.initString("728AB35E-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509CertificateRevocationListEntry = &IID_IX509CertificateRevocationListEntry_Value;
pub const IX509CertificateRevocationListEntry = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const IX509CertificateRevocationListEntry,
            Encoding: EncodingType,
            SerialNumber: BSTR,
            RevocationDate: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SerialNumber: fn(
            self: *const IX509CertificateRevocationListEntry,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RevocationDate: fn(
            self: *const IX509CertificateRevocationListEntry,
            pValue: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RevocationReason: fn(
            self: *const IX509CertificateRevocationListEntry,
            pValue: *CRLRevocationReason,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RevocationReason: fn(
            self: *const IX509CertificateRevocationListEntry,
            Value: CRLRevocationReason,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_X509Extensions: fn(
            self: *const IX509CertificateRevocationListEntry,
            ppValue: **IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CriticalExtensions: fn(
            self: *const IX509CertificateRevocationListEntry,
            ppValue: **IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationListEntry_Initialize(self: *const T, Encoding: EncodingType, SerialNumber: BSTR, RevocationDate: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationListEntry.VTable, self.vtable).Initialize(@ptrCast(*const IX509CertificateRevocationListEntry, self), Encoding, SerialNumber, RevocationDate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationListEntry_get_SerialNumber(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationListEntry.VTable, self.vtable).get_SerialNumber(@ptrCast(*const IX509CertificateRevocationListEntry, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationListEntry_get_RevocationDate(self: *const T, pValue: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationListEntry.VTable, self.vtable).get_RevocationDate(@ptrCast(*const IX509CertificateRevocationListEntry, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationListEntry_get_RevocationReason(self: *const T, pValue: *CRLRevocationReason) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationListEntry.VTable, self.vtable).get_RevocationReason(@ptrCast(*const IX509CertificateRevocationListEntry, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationListEntry_put_RevocationReason(self: *const T, Value: CRLRevocationReason) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationListEntry.VTable, self.vtable).put_RevocationReason(@ptrCast(*const IX509CertificateRevocationListEntry, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationListEntry_get_X509Extensions(self: *const T, ppValue: **IX509Extensions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationListEntry.VTable, self.vtable).get_X509Extensions(@ptrCast(*const IX509CertificateRevocationListEntry, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationListEntry_get_CriticalExtensions(self: *const T, ppValue: **IObjectIds) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationListEntry.VTable, self.vtable).get_CriticalExtensions(@ptrCast(*const IX509CertificateRevocationListEntry, self), ppValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509CertificateRevocationListEntries_Value = @import("../zig.zig").Guid.initString("728AB35F-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509CertificateRevocationListEntries = &IID_IX509CertificateRevocationListEntries_Value;
pub const IX509CertificateRevocationListEntries = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ItemByIndex: fn(
            self: *const IX509CertificateRevocationListEntries,
            Index: i32,
            pVal: **IX509CertificateRevocationListEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IX509CertificateRevocationListEntries,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IX509CertificateRevocationListEntries,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IX509CertificateRevocationListEntries,
            pVal: ?*IX509CertificateRevocationListEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IX509CertificateRevocationListEntries,
            Index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IX509CertificateRevocationListEntries,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IndexBySerialNumber: fn(
            self: *const IX509CertificateRevocationListEntries,
            Encoding: EncodingType,
            SerialNumber: BSTR,
            pIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: fn(
            self: *const IX509CertificateRevocationListEntries,
            pValue: ?*IX509CertificateRevocationListEntries,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationListEntries_get_ItemByIndex(self: *const T, Index: i32, pVal: **IX509CertificateRevocationListEntry) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationListEntries.VTable, self.vtable).get_ItemByIndex(@ptrCast(*const IX509CertificateRevocationListEntries, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationListEntries_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationListEntries.VTable, self.vtable).get_Count(@ptrCast(*const IX509CertificateRevocationListEntries, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationListEntries_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationListEntries.VTable, self.vtable).get__NewEnum(@ptrCast(*const IX509CertificateRevocationListEntries, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationListEntries_Add(self: *const T, pVal: ?*IX509CertificateRevocationListEntry) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationListEntries.VTable, self.vtable).Add(@ptrCast(*const IX509CertificateRevocationListEntries, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationListEntries_Remove(self: *const T, Index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationListEntries.VTable, self.vtable).Remove(@ptrCast(*const IX509CertificateRevocationListEntries, self), Index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationListEntries_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationListEntries.VTable, self.vtable).Clear(@ptrCast(*const IX509CertificateRevocationListEntries, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationListEntries_get_IndexBySerialNumber(self: *const T, Encoding: EncodingType, SerialNumber: BSTR, pIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationListEntries.VTable, self.vtable).get_IndexBySerialNumber(@ptrCast(*const IX509CertificateRevocationListEntries, self), Encoding, SerialNumber, pIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationListEntries_AddRange(self: *const T, pValue: ?*IX509CertificateRevocationListEntries) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationListEntries.VTable, self.vtable).AddRange(@ptrCast(*const IX509CertificateRevocationListEntries, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509CertificateRevocationList_Value = @import("../zig.zig").Guid.initString("728AB360-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509CertificateRevocationList = &IID_IX509CertificateRevocationList_Value;
pub const IX509CertificateRevocationList = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const IX509CertificateRevocationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: fn(
            self: *const IX509CertificateRevocationList,
            strEncodedData: BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: fn(
            self: *const IX509CertificateRevocationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetForEncode: fn(
            self: *const IX509CertificateRevocationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckPublicKeySignature: fn(
            self: *const IX509CertificateRevocationList,
            pPublicKey: ?*IX509PublicKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckSignature: fn(
            self: *const IX509CertificateRevocationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Issuer: fn(
            self: *const IX509CertificateRevocationList,
            ppValue: **IX500DistinguishedName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Issuer: fn(
            self: *const IX509CertificateRevocationList,
            pValue: ?*IX500DistinguishedName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ThisUpdate: fn(
            self: *const IX509CertificateRevocationList,
            pValue: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ThisUpdate: fn(
            self: *const IX509CertificateRevocationList,
            Value: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NextUpdate: fn(
            self: *const IX509CertificateRevocationList,
            pValue: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_NextUpdate: fn(
            self: *const IX509CertificateRevocationList,
            Value: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_X509CRLEntries: fn(
            self: *const IX509CertificateRevocationList,
            ppValue: **IX509CertificateRevocationListEntries,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_X509Extensions: fn(
            self: *const IX509CertificateRevocationList,
            ppValue: **IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CriticalExtensions: fn(
            self: *const IX509CertificateRevocationList,
            ppValue: **IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SignerCertificate: fn(
            self: *const IX509CertificateRevocationList,
            ppValue: **ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SignerCertificate: fn(
            self: *const IX509CertificateRevocationList,
            pValue: ?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CRLNumber: fn(
            self: *const IX509CertificateRevocationList,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CRLNumber: fn(
            self: *const IX509CertificateRevocationList,
            Encoding: EncodingType,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CAVersion: fn(
            self: *const IX509CertificateRevocationList,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CAVersion: fn(
            self: *const IX509CertificateRevocationList,
            pValue: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BaseCRL: fn(
            self: *const IX509CertificateRevocationList,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NullSigned: fn(
            self: *const IX509CertificateRevocationList,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_HashAlgorithm: fn(
            self: *const IX509CertificateRevocationList,
            ppValue: **IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_HashAlgorithm: fn(
            self: *const IX509CertificateRevocationList,
            pValue: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AlternateSignatureAlgorithm: fn(
            self: *const IX509CertificateRevocationList,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AlternateSignatureAlgorithm: fn(
            self: *const IX509CertificateRevocationList,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SignatureInformation: fn(
            self: *const IX509CertificateRevocationList,
            ppValue: **IX509SignatureInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RawData: fn(
            self: *const IX509CertificateRevocationList,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RawDataToBeSigned: fn(
            self: *const IX509CertificateRevocationList,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Signature: fn(
            self: *const IX509CertificateRevocationList,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_Initialize(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).Initialize(@ptrCast(*const IX509CertificateRevocationList, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_InitializeDecode(self: *const T, strEncodedData: BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).InitializeDecode(@ptrCast(*const IX509CertificateRevocationList, self), strEncodedData, Encoding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_Encode(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).Encode(@ptrCast(*const IX509CertificateRevocationList, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_ResetForEncode(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).ResetForEncode(@ptrCast(*const IX509CertificateRevocationList, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_CheckPublicKeySignature(self: *const T, pPublicKey: ?*IX509PublicKey) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).CheckPublicKeySignature(@ptrCast(*const IX509CertificateRevocationList, self), pPublicKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_CheckSignature(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).CheckSignature(@ptrCast(*const IX509CertificateRevocationList, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_get_Issuer(self: *const T, ppValue: **IX500DistinguishedName) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).get_Issuer(@ptrCast(*const IX509CertificateRevocationList, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_put_Issuer(self: *const T, pValue: ?*IX500DistinguishedName) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).put_Issuer(@ptrCast(*const IX509CertificateRevocationList, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_get_ThisUpdate(self: *const T, pValue: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).get_ThisUpdate(@ptrCast(*const IX509CertificateRevocationList, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_put_ThisUpdate(self: *const T, Value: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).put_ThisUpdate(@ptrCast(*const IX509CertificateRevocationList, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_get_NextUpdate(self: *const T, pValue: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).get_NextUpdate(@ptrCast(*const IX509CertificateRevocationList, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_put_NextUpdate(self: *const T, Value: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).put_NextUpdate(@ptrCast(*const IX509CertificateRevocationList, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_get_X509CRLEntries(self: *const T, ppValue: **IX509CertificateRevocationListEntries) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).get_X509CRLEntries(@ptrCast(*const IX509CertificateRevocationList, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_get_X509Extensions(self: *const T, ppValue: **IX509Extensions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).get_X509Extensions(@ptrCast(*const IX509CertificateRevocationList, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_get_CriticalExtensions(self: *const T, ppValue: **IObjectIds) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).get_CriticalExtensions(@ptrCast(*const IX509CertificateRevocationList, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_get_SignerCertificate(self: *const T, ppValue: **ISignerCertificate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).get_SignerCertificate(@ptrCast(*const IX509CertificateRevocationList, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_put_SignerCertificate(self: *const T, pValue: ?*ISignerCertificate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).put_SignerCertificate(@ptrCast(*const IX509CertificateRevocationList, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_get_CRLNumber(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).get_CRLNumber(@ptrCast(*const IX509CertificateRevocationList, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_put_CRLNumber(self: *const T, Encoding: EncodingType, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).put_CRLNumber(@ptrCast(*const IX509CertificateRevocationList, self), Encoding, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_get_CAVersion(self: *const T, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).get_CAVersion(@ptrCast(*const IX509CertificateRevocationList, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_put_CAVersion(self: *const T, pValue: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).put_CAVersion(@ptrCast(*const IX509CertificateRevocationList, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_get_BaseCRL(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).get_BaseCRL(@ptrCast(*const IX509CertificateRevocationList, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_get_NullSigned(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).get_NullSigned(@ptrCast(*const IX509CertificateRevocationList, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_get_HashAlgorithm(self: *const T, ppValue: **IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).get_HashAlgorithm(@ptrCast(*const IX509CertificateRevocationList, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_put_HashAlgorithm(self: *const T, pValue: ?*IObjectId) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).put_HashAlgorithm(@ptrCast(*const IX509CertificateRevocationList, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_get_AlternateSignatureAlgorithm(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).get_AlternateSignatureAlgorithm(@ptrCast(*const IX509CertificateRevocationList, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_put_AlternateSignatureAlgorithm(self: *const T, Value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).put_AlternateSignatureAlgorithm(@ptrCast(*const IX509CertificateRevocationList, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_get_SignatureInformation(self: *const T, ppValue: **IX509SignatureInformation) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).get_SignatureInformation(@ptrCast(*const IX509CertificateRevocationList, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_get_RawData(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).get_RawData(@ptrCast(*const IX509CertificateRevocationList, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_get_RawDataToBeSigned(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).get_RawDataToBeSigned(@ptrCast(*const IX509CertificateRevocationList, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509CertificateRevocationList_get_Signature(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509CertificateRevocationList.VTable, self.vtable).get_Signature(@ptrCast(*const IX509CertificateRevocationList, self), Encoding, pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertificateAttestationChallenge_Value = @import("../zig.zig").Guid.initString("6F175A7C-4A3A-40AE-9DBA-592FD6BBF9B8");
pub const IID_ICertificateAttestationChallenge = &IID_ICertificateAttestationChallenge_Value;
pub const ICertificateAttestationChallenge = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const ICertificateAttestationChallenge,
            Encoding: EncodingType,
            strPendingFullCmcResponseWithChallenge: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DecryptChallenge: fn(
            self: *const ICertificateAttestationChallenge,
            Encoding: EncodingType,
            pstrEnvelopedPkcs7ReencryptedToCA: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RequestID: fn(
            self: *const ICertificateAttestationChallenge,
            pstrRequestID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificateAttestationChallenge_Initialize(self: *const T, Encoding: EncodingType, strPendingFullCmcResponseWithChallenge: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificateAttestationChallenge.VTable, self.vtable).Initialize(@ptrCast(*const ICertificateAttestationChallenge, self), Encoding, strPendingFullCmcResponseWithChallenge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificateAttestationChallenge_DecryptChallenge(self: *const T, Encoding: EncodingType, pstrEnvelopedPkcs7ReencryptedToCA: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificateAttestationChallenge.VTable, self.vtable).DecryptChallenge(@ptrCast(*const ICertificateAttestationChallenge, self), Encoding, pstrEnvelopedPkcs7ReencryptedToCA);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificateAttestationChallenge_get_RequestID(self: *const T, pstrRequestID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificateAttestationChallenge.VTable, self.vtable).get_RequestID(@ptrCast(*const ICertificateAttestationChallenge, self), pstrRequestID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertificateAttestationChallenge2_Value = @import("../zig.zig").Guid.initString("4631334D-E266-47D6-BD79-BE53CB2E2753");
pub const IID_ICertificateAttestationChallenge2 = &IID_ICertificateAttestationChallenge2_Value;
pub const ICertificateAttestationChallenge2 = extern struct {
    pub const VTable = extern struct {
        base: ICertificateAttestationChallenge.VTable,
        put_KeyContainerName: fn(
            self: *const ICertificateAttestationChallenge2,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_KeyBlob: fn(
            self: *const ICertificateAttestationChallenge2,
            Encoding: EncodingType,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertificateAttestationChallenge.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificateAttestationChallenge2_put_KeyContainerName(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificateAttestationChallenge2.VTable, self.vtable).put_KeyContainerName(@ptrCast(*const ICertificateAttestationChallenge2, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificateAttestationChallenge2_put_KeyBlob(self: *const T, Encoding: EncodingType, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificateAttestationChallenge2.VTable, self.vtable).put_KeyBlob(@ptrCast(*const ICertificateAttestationChallenge2, self), Encoding, Value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509SCEPEnrollment_Value = @import("../zig.zig").Guid.initString("728AB361-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509SCEPEnrollment = &IID_IX509SCEPEnrollment_Value;
pub const IX509SCEPEnrollment = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const IX509SCEPEnrollment,
            pRequest: ?*IX509CertificateRequestPkcs10,
            strThumbprint: BSTR,
            ThumprintEncoding: EncodingType,
            strServerCertificates: BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeForPending: fn(
            self: *const IX509SCEPEnrollment,
            Context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRequestMessage: fn(
            self: *const IX509SCEPEnrollment,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRetrievePendingMessage: fn(
            self: *const IX509SCEPEnrollment,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRetrieveCertificateMessage: fn(
            self: *const IX509SCEPEnrollment,
            Context: X509CertificateEnrollmentContext,
            strIssuer: BSTR,
            IssuerEncoding: EncodingType,
            strSerialNumber: BSTR,
            SerialNumberEncoding: EncodingType,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessResponseMessage: fn(
            self: *const IX509SCEPEnrollment,
            strResponse: BSTR,
            Encoding: EncodingType,
            pDisposition: *X509SCEPDisposition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ServerCapabilities: fn(
            self: *const IX509SCEPEnrollment,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_FailInfo: fn(
            self: *const IX509SCEPEnrollment,
            pValue: *X509SCEPFailInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SignerCertificate: fn(
            self: *const IX509SCEPEnrollment,
            ppValue: **ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SignerCertificate: fn(
            self: *const IX509SCEPEnrollment,
            pValue: ?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_OldCertificate: fn(
            self: *const IX509SCEPEnrollment,
            ppValue: **ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_OldCertificate: fn(
            self: *const IX509SCEPEnrollment,
            pValue: ?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_TransactionId: fn(
            self: *const IX509SCEPEnrollment,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_TransactionId: fn(
            self: *const IX509SCEPEnrollment,
            Encoding: EncodingType,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Request: fn(
            self: *const IX509SCEPEnrollment,
            ppValue: **IX509CertificateRequestPkcs10,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CertificateFriendlyName: fn(
            self: *const IX509SCEPEnrollment,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CertificateFriendlyName: fn(
            self: *const IX509SCEPEnrollment,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Status: fn(
            self: *const IX509SCEPEnrollment,
            ppValue: **IX509EnrollmentStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Certificate: fn(
            self: *const IX509SCEPEnrollment,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Silent: fn(
            self: *const IX509SCEPEnrollment,
            pValue: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Silent: fn(
            self: *const IX509SCEPEnrollment,
            Value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRequest: fn(
            self: *const IX509SCEPEnrollment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_Initialize(self: *const T, pRequest: ?*IX509CertificateRequestPkcs10, strThumbprint: BSTR, ThumprintEncoding: EncodingType, strServerCertificates: BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).Initialize(@ptrCast(*const IX509SCEPEnrollment, self), pRequest, strThumbprint, ThumprintEncoding, strServerCertificates, Encoding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_InitializeForPending(self: *const T, Context: X509CertificateEnrollmentContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).InitializeForPending(@ptrCast(*const IX509SCEPEnrollment, self), Context);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_CreateRequestMessage(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).CreateRequestMessage(@ptrCast(*const IX509SCEPEnrollment, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_CreateRetrievePendingMessage(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).CreateRetrievePendingMessage(@ptrCast(*const IX509SCEPEnrollment, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_CreateRetrieveCertificateMessage(self: *const T, Context: X509CertificateEnrollmentContext, strIssuer: BSTR, IssuerEncoding: EncodingType, strSerialNumber: BSTR, SerialNumberEncoding: EncodingType, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).CreateRetrieveCertificateMessage(@ptrCast(*const IX509SCEPEnrollment, self), Context, strIssuer, IssuerEncoding, strSerialNumber, SerialNumberEncoding, Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_ProcessResponseMessage(self: *const T, strResponse: BSTR, Encoding: EncodingType, pDisposition: *X509SCEPDisposition) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).ProcessResponseMessage(@ptrCast(*const IX509SCEPEnrollment, self), strResponse, Encoding, pDisposition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_put_ServerCapabilities(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).put_ServerCapabilities(@ptrCast(*const IX509SCEPEnrollment, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_get_FailInfo(self: *const T, pValue: *X509SCEPFailInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).get_FailInfo(@ptrCast(*const IX509SCEPEnrollment, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_get_SignerCertificate(self: *const T, ppValue: **ISignerCertificate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).get_SignerCertificate(@ptrCast(*const IX509SCEPEnrollment, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_put_SignerCertificate(self: *const T, pValue: ?*ISignerCertificate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).put_SignerCertificate(@ptrCast(*const IX509SCEPEnrollment, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_get_OldCertificate(self: *const T, ppValue: **ISignerCertificate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).get_OldCertificate(@ptrCast(*const IX509SCEPEnrollment, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_put_OldCertificate(self: *const T, pValue: ?*ISignerCertificate) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).put_OldCertificate(@ptrCast(*const IX509SCEPEnrollment, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_get_TransactionId(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).get_TransactionId(@ptrCast(*const IX509SCEPEnrollment, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_put_TransactionId(self: *const T, Encoding: EncodingType, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).put_TransactionId(@ptrCast(*const IX509SCEPEnrollment, self), Encoding, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_get_Request(self: *const T, ppValue: **IX509CertificateRequestPkcs10) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).get_Request(@ptrCast(*const IX509SCEPEnrollment, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_get_CertificateFriendlyName(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).get_CertificateFriendlyName(@ptrCast(*const IX509SCEPEnrollment, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_put_CertificateFriendlyName(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).put_CertificateFriendlyName(@ptrCast(*const IX509SCEPEnrollment, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_get_Status(self: *const T, ppValue: **IX509EnrollmentStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).get_Status(@ptrCast(*const IX509SCEPEnrollment, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_get_Certificate(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).get_Certificate(@ptrCast(*const IX509SCEPEnrollment, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_get_Silent(self: *const T, pValue: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).get_Silent(@ptrCast(*const IX509SCEPEnrollment, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_put_Silent(self: *const T, Value: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).put_Silent(@ptrCast(*const IX509SCEPEnrollment, self), Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment_DeleteRequest(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment.VTable, self.vtable).DeleteRequest(@ptrCast(*const IX509SCEPEnrollment, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const X509SCEPProcessMessageFlags = extern enum(i32) {
    SCEPProcessDefault = 0,
    SCEPProcessSkipCertInstall = 1,
};
pub const SCEPProcessDefault = X509SCEPProcessMessageFlags.SCEPProcessDefault;
pub const SCEPProcessSkipCertInstall = X509SCEPProcessMessageFlags.SCEPProcessSkipCertInstall;

pub const DelayRetryAction = extern enum(i32) {
    DelayRetryUnknown = 0,
    DelayRetryNone = 1,
    DelayRetryShort = 2,
    DelayRetryLong = 3,
    DelayRetrySuccess = 4,
    DelayRetryPastSuccess = 5,
};
pub const DelayRetryUnknown = DelayRetryAction.DelayRetryUnknown;
pub const DelayRetryNone = DelayRetryAction.DelayRetryNone;
pub const DelayRetryShort = DelayRetryAction.DelayRetryShort;
pub const DelayRetryLong = DelayRetryAction.DelayRetryLong;
pub const DelayRetrySuccess = DelayRetryAction.DelayRetrySuccess;
pub const DelayRetryPastSuccess = DelayRetryAction.DelayRetryPastSuccess;

const IID_IX509SCEPEnrollment2_Value = @import("../zig.zig").Guid.initString("728AB364-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509SCEPEnrollment2 = &IID_IX509SCEPEnrollment2_Value;
pub const IX509SCEPEnrollment2 = extern struct {
    pub const VTable = extern struct {
        base: IX509SCEPEnrollment.VTable,
        CreateChallengeAnswerMessage: fn(
            self: *const IX509SCEPEnrollment2,
            Encoding: EncodingType,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessResponseMessage2: fn(
            self: *const IX509SCEPEnrollment2,
            Flags: X509SCEPProcessMessageFlags,
            strResponse: BSTR,
            Encoding: EncodingType,
            pDisposition: *X509SCEPDisposition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ResultMessageText: fn(
            self: *const IX509SCEPEnrollment2,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DelayRetry: fn(
            self: *const IX509SCEPEnrollment2,
            pValue: *DelayRetryAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ActivityId: fn(
            self: *const IX509SCEPEnrollment2,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ActivityId: fn(
            self: *const IX509SCEPEnrollment2,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IX509SCEPEnrollment.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment2_CreateChallengeAnswerMessage(self: *const T, Encoding: EncodingType, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment2.VTable, self.vtable).CreateChallengeAnswerMessage(@ptrCast(*const IX509SCEPEnrollment2, self), Encoding, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment2_ProcessResponseMessage2(self: *const T, Flags: X509SCEPProcessMessageFlags, strResponse: BSTR, Encoding: EncodingType, pDisposition: *X509SCEPDisposition) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment2.VTable, self.vtable).ProcessResponseMessage2(@ptrCast(*const IX509SCEPEnrollment2, self), Flags, strResponse, Encoding, pDisposition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment2_get_ResultMessageText(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment2.VTable, self.vtable).get_ResultMessageText(@ptrCast(*const IX509SCEPEnrollment2, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment2_get_DelayRetry(self: *const T, pValue: *DelayRetryAction) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment2.VTable, self.vtable).get_DelayRetry(@ptrCast(*const IX509SCEPEnrollment2, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment2_get_ActivityId(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment2.VTable, self.vtable).get_ActivityId(@ptrCast(*const IX509SCEPEnrollment2, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollment2_put_ActivityId(self: *const T, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollment2.VTable, self.vtable).put_ActivityId(@ptrCast(*const IX509SCEPEnrollment2, self), Value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509SCEPEnrollmentHelper_Value = @import("../zig.zig").Guid.initString("728AB365-217D-11DA-B2A4-000E7BBB2B09");
pub const IID_IX509SCEPEnrollmentHelper = &IID_IX509SCEPEnrollmentHelper_Value;
pub const IX509SCEPEnrollmentHelper = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const IX509SCEPEnrollmentHelper,
            strServerUrl: BSTR,
            strRequestHeaders: BSTR,
            pRequest: ?*IX509CertificateRequestPkcs10,
            strCACertificateThumbprint: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeForPending: fn(
            self: *const IX509SCEPEnrollmentHelper,
            strServerUrl: BSTR,
            strRequestHeaders: BSTR,
            Context: X509CertificateEnrollmentContext,
            strTransactionId: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enroll: fn(
            self: *const IX509SCEPEnrollmentHelper,
            ProcessFlags: X509SCEPProcessMessageFlags,
            pDisposition: *X509SCEPDisposition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FetchPending: fn(
            self: *const IX509SCEPEnrollmentHelper,
            ProcessFlags: X509SCEPProcessMessageFlags,
            pDisposition: *X509SCEPDisposition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_X509SCEPEnrollment: fn(
            self: *const IX509SCEPEnrollmentHelper,
            ppValue: **IX509SCEPEnrollment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ResultMessageText: fn(
            self: *const IX509SCEPEnrollmentHelper,
            pValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollmentHelper_Initialize(self: *const T, strServerUrl: BSTR, strRequestHeaders: BSTR, pRequest: ?*IX509CertificateRequestPkcs10, strCACertificateThumbprint: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollmentHelper.VTable, self.vtable).Initialize(@ptrCast(*const IX509SCEPEnrollmentHelper, self), strServerUrl, strRequestHeaders, pRequest, strCACertificateThumbprint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollmentHelper_InitializeForPending(self: *const T, strServerUrl: BSTR, strRequestHeaders: BSTR, Context: X509CertificateEnrollmentContext, strTransactionId: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollmentHelper.VTable, self.vtable).InitializeForPending(@ptrCast(*const IX509SCEPEnrollmentHelper, self), strServerUrl, strRequestHeaders, Context, strTransactionId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollmentHelper_Enroll(self: *const T, ProcessFlags: X509SCEPProcessMessageFlags, pDisposition: *X509SCEPDisposition) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollmentHelper.VTable, self.vtable).Enroll(@ptrCast(*const IX509SCEPEnrollmentHelper, self), ProcessFlags, pDisposition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollmentHelper_FetchPending(self: *const T, ProcessFlags: X509SCEPProcessMessageFlags, pDisposition: *X509SCEPDisposition) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollmentHelper.VTable, self.vtable).FetchPending(@ptrCast(*const IX509SCEPEnrollmentHelper, self), ProcessFlags, pDisposition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollmentHelper_get_X509SCEPEnrollment(self: *const T, ppValue: **IX509SCEPEnrollment) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollmentHelper.VTable, self.vtable).get_X509SCEPEnrollment(@ptrCast(*const IX509SCEPEnrollmentHelper, self), ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IX509SCEPEnrollmentHelper_get_ResultMessageText(self: *const T, pValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IX509SCEPEnrollmentHelper.VTable, self.vtable).get_ResultMessageText(@ptrCast(*const IX509SCEPEnrollmentHelper, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const X509CertificateTemplateGeneralFlag = extern enum(i32) {
    GeneralMachineType = 64,
    GeneralCA = 128,
    GeneralCrossCA = 2048,
    GeneralDefault = 65536,
    GeneralModified = 131072,
    GeneralDonotPersist = 4096,
};
pub const GeneralMachineType = X509CertificateTemplateGeneralFlag.GeneralMachineType;
pub const GeneralCA = X509CertificateTemplateGeneralFlag.GeneralCA;
pub const GeneralCrossCA = X509CertificateTemplateGeneralFlag.GeneralCrossCA;
pub const GeneralDefault = X509CertificateTemplateGeneralFlag.GeneralDefault;
pub const GeneralModified = X509CertificateTemplateGeneralFlag.GeneralModified;
pub const GeneralDonotPersist = X509CertificateTemplateGeneralFlag.GeneralDonotPersist;

pub const X509CertificateTemplateEnrollmentFlag = extern enum(i32) {
    EnrollmentIncludeSymmetricAlgorithms = 1,
    EnrollmentPendAllRequests = 2,
    EnrollmentPublishToKRAContainer = 4,
    EnrollmentPublishToDS = 8,
    EnrollmentAutoEnrollmentCheckUserDSCertificate = 16,
    EnrollmentAutoEnrollment = 32,
    EnrollmentDomainAuthenticationNotRequired = 128,
    EnrollmentPreviousApprovalValidateReenrollment = 64,
    EnrollmentUserInteractionRequired = 256,
    EnrollmentAddTemplateName = 512,
    EnrollmentRemoveInvalidCertificateFromPersonalStore = 1024,
    EnrollmentAllowEnrollOnBehalfOf = 2048,
    EnrollmentAddOCSPNoCheck = 4096,
    EnrollmentReuseKeyOnFullSmartCard = 8192,
    EnrollmentNoRevocationInfoInCerts = 16384,
    EnrollmentIncludeBasicConstraintsForEECerts = 32768,
    EnrollmentPreviousApprovalKeyBasedValidateReenrollment = 65536,
    EnrollmentCertificateIssuancePoliciesFromRequest = 131072,
    EnrollmentSkipAutoRenewal = 262144,
};
pub const EnrollmentIncludeSymmetricAlgorithms = X509CertificateTemplateEnrollmentFlag.EnrollmentIncludeSymmetricAlgorithms;
pub const EnrollmentPendAllRequests = X509CertificateTemplateEnrollmentFlag.EnrollmentPendAllRequests;
pub const EnrollmentPublishToKRAContainer = X509CertificateTemplateEnrollmentFlag.EnrollmentPublishToKRAContainer;
pub const EnrollmentPublishToDS = X509CertificateTemplateEnrollmentFlag.EnrollmentPublishToDS;
pub const EnrollmentAutoEnrollmentCheckUserDSCertificate = X509CertificateTemplateEnrollmentFlag.EnrollmentAutoEnrollmentCheckUserDSCertificate;
pub const EnrollmentAutoEnrollment = X509CertificateTemplateEnrollmentFlag.EnrollmentAutoEnrollment;
pub const EnrollmentDomainAuthenticationNotRequired = X509CertificateTemplateEnrollmentFlag.EnrollmentDomainAuthenticationNotRequired;
pub const EnrollmentPreviousApprovalValidateReenrollment = X509CertificateTemplateEnrollmentFlag.EnrollmentPreviousApprovalValidateReenrollment;
pub const EnrollmentUserInteractionRequired = X509CertificateTemplateEnrollmentFlag.EnrollmentUserInteractionRequired;
pub const EnrollmentAddTemplateName = X509CertificateTemplateEnrollmentFlag.EnrollmentAddTemplateName;
pub const EnrollmentRemoveInvalidCertificateFromPersonalStore = X509CertificateTemplateEnrollmentFlag.EnrollmentRemoveInvalidCertificateFromPersonalStore;
pub const EnrollmentAllowEnrollOnBehalfOf = X509CertificateTemplateEnrollmentFlag.EnrollmentAllowEnrollOnBehalfOf;
pub const EnrollmentAddOCSPNoCheck = X509CertificateTemplateEnrollmentFlag.EnrollmentAddOCSPNoCheck;
pub const EnrollmentReuseKeyOnFullSmartCard = X509CertificateTemplateEnrollmentFlag.EnrollmentReuseKeyOnFullSmartCard;
pub const EnrollmentNoRevocationInfoInCerts = X509CertificateTemplateEnrollmentFlag.EnrollmentNoRevocationInfoInCerts;
pub const EnrollmentIncludeBasicConstraintsForEECerts = X509CertificateTemplateEnrollmentFlag.EnrollmentIncludeBasicConstraintsForEECerts;
pub const EnrollmentPreviousApprovalKeyBasedValidateReenrollment = X509CertificateTemplateEnrollmentFlag.EnrollmentPreviousApprovalKeyBasedValidateReenrollment;
pub const EnrollmentCertificateIssuancePoliciesFromRequest = X509CertificateTemplateEnrollmentFlag.EnrollmentCertificateIssuancePoliciesFromRequest;
pub const EnrollmentSkipAutoRenewal = X509CertificateTemplateEnrollmentFlag.EnrollmentSkipAutoRenewal;

pub const X509CertificateTemplateSubjectNameFlag = extern enum(i32) {
    SubjectNameEnrolleeSupplies = 1,
    SubjectNameRequireDirectoryPath = -2147483648,
    SubjectNameRequireCommonName = 1073741824,
    SubjectNameRequireEmail = 536870912,
    SubjectNameRequireDNS = 268435456,
    SubjectNameAndAlternativeNameOldCertSupplies = 8,
    SubjectAlternativeNameEnrolleeSupplies = 65536,
    SubjectAlternativeNameRequireDirectoryGUID = 16777216,
    SubjectAlternativeNameRequireUPN = 33554432,
    SubjectAlternativeNameRequireEmail = 67108864,
    SubjectAlternativeNameRequireSPN = 8388608,
    SubjectAlternativeNameRequireDNS = 134217728,
    SubjectAlternativeNameRequireDomainDNS = 4194304,
};
pub const SubjectNameEnrolleeSupplies = X509CertificateTemplateSubjectNameFlag.SubjectNameEnrolleeSupplies;
pub const SubjectNameRequireDirectoryPath = X509CertificateTemplateSubjectNameFlag.SubjectNameRequireDirectoryPath;
pub const SubjectNameRequireCommonName = X509CertificateTemplateSubjectNameFlag.SubjectNameRequireCommonName;
pub const SubjectNameRequireEmail = X509CertificateTemplateSubjectNameFlag.SubjectNameRequireEmail;
pub const SubjectNameRequireDNS = X509CertificateTemplateSubjectNameFlag.SubjectNameRequireDNS;
pub const SubjectNameAndAlternativeNameOldCertSupplies = X509CertificateTemplateSubjectNameFlag.SubjectNameAndAlternativeNameOldCertSupplies;
pub const SubjectAlternativeNameEnrolleeSupplies = X509CertificateTemplateSubjectNameFlag.SubjectAlternativeNameEnrolleeSupplies;
pub const SubjectAlternativeNameRequireDirectoryGUID = X509CertificateTemplateSubjectNameFlag.SubjectAlternativeNameRequireDirectoryGUID;
pub const SubjectAlternativeNameRequireUPN = X509CertificateTemplateSubjectNameFlag.SubjectAlternativeNameRequireUPN;
pub const SubjectAlternativeNameRequireEmail = X509CertificateTemplateSubjectNameFlag.SubjectAlternativeNameRequireEmail;
pub const SubjectAlternativeNameRequireSPN = X509CertificateTemplateSubjectNameFlag.SubjectAlternativeNameRequireSPN;
pub const SubjectAlternativeNameRequireDNS = X509CertificateTemplateSubjectNameFlag.SubjectAlternativeNameRequireDNS;
pub const SubjectAlternativeNameRequireDomainDNS = X509CertificateTemplateSubjectNameFlag.SubjectAlternativeNameRequireDomainDNS;

pub const X509CertificateTemplatePrivateKeyFlag = extern enum(i32) {
    PrivateKeyRequireArchival = 1,
    PrivateKeyExportable = 16,
    PrivateKeyRequireStrongKeyProtection = 32,
    PrivateKeyRequireAlternateSignatureAlgorithm = 64,
    PrivateKeyRequireSameKeyRenewal = 128,
    PrivateKeyUseLegacyProvider = 256,
    PrivateKeyEKTrustOnUse = 512,
    PrivateKeyEKValidateCert = 1024,
    PrivateKeyEKValidateKey = 2048,
    PrivateKeyAttestNone = 0,
    PrivateKeyAttestPreferred = 4096,
    PrivateKeyAttestRequired = 8192,
    PrivateKeyAttestMask = 12288,
    PrivateKeyAttestWithoutPolicy = 16384,
    PrivateKeyServerVersionMask = 983040,
    PrivateKeyServerVersionShift = 16,
    PrivateKeyHelloKspKey = 1048576,
    PrivateKeyHelloLogonKey = 2097152,
    PrivateKeyClientVersionMask = 251658240,
    PrivateKeyClientVersionShift = 24,
};
pub const PrivateKeyRequireArchival = X509CertificateTemplatePrivateKeyFlag.PrivateKeyRequireArchival;
pub const PrivateKeyExportable = X509CertificateTemplatePrivateKeyFlag.PrivateKeyExportable;
pub const PrivateKeyRequireStrongKeyProtection = X509CertificateTemplatePrivateKeyFlag.PrivateKeyRequireStrongKeyProtection;
pub const PrivateKeyRequireAlternateSignatureAlgorithm = X509CertificateTemplatePrivateKeyFlag.PrivateKeyRequireAlternateSignatureAlgorithm;
pub const PrivateKeyRequireSameKeyRenewal = X509CertificateTemplatePrivateKeyFlag.PrivateKeyRequireSameKeyRenewal;
pub const PrivateKeyUseLegacyProvider = X509CertificateTemplatePrivateKeyFlag.PrivateKeyUseLegacyProvider;
pub const PrivateKeyEKTrustOnUse = X509CertificateTemplatePrivateKeyFlag.PrivateKeyEKTrustOnUse;
pub const PrivateKeyEKValidateCert = X509CertificateTemplatePrivateKeyFlag.PrivateKeyEKValidateCert;
pub const PrivateKeyEKValidateKey = X509CertificateTemplatePrivateKeyFlag.PrivateKeyEKValidateKey;
pub const PrivateKeyAttestNone = X509CertificateTemplatePrivateKeyFlag.PrivateKeyAttestNone;
pub const PrivateKeyAttestPreferred = X509CertificateTemplatePrivateKeyFlag.PrivateKeyAttestPreferred;
pub const PrivateKeyAttestRequired = X509CertificateTemplatePrivateKeyFlag.PrivateKeyAttestRequired;
pub const PrivateKeyAttestMask = X509CertificateTemplatePrivateKeyFlag.PrivateKeyAttestMask;
pub const PrivateKeyAttestWithoutPolicy = X509CertificateTemplatePrivateKeyFlag.PrivateKeyAttestWithoutPolicy;
pub const PrivateKeyServerVersionMask = X509CertificateTemplatePrivateKeyFlag.PrivateKeyServerVersionMask;
pub const PrivateKeyServerVersionShift = X509CertificateTemplatePrivateKeyFlag.PrivateKeyServerVersionShift;
pub const PrivateKeyHelloKspKey = X509CertificateTemplatePrivateKeyFlag.PrivateKeyHelloKspKey;
pub const PrivateKeyHelloLogonKey = X509CertificateTemplatePrivateKeyFlag.PrivateKeyHelloLogonKey;
pub const PrivateKeyClientVersionMask = X509CertificateTemplatePrivateKeyFlag.PrivateKeyClientVersionMask;
pub const PrivateKeyClientVersionShift = X509CertificateTemplatePrivateKeyFlag.PrivateKeyClientVersionShift;

pub const ImportPFXFlags = extern enum(i32) {
    ImportNone = 0,
    ImportMachineContext = 1,
    ImportForceOverwrite = 2,
    ImportSilent = 4,
    ImportSaveProperties = 8,
    ImportExportable = 16,
    ImportExportableEncrypted = 32,
    ImportNoUserProtected = 64,
    ImportUserProtected = 128,
    ImportUserProtectedHigh = 256,
    ImportInstallCertificate = 512,
    ImportInstallChain = 1024,
    ImportInstallChainAndRoot = 2048,
};
pub const ImportNone = ImportPFXFlags.ImportNone;
pub const ImportMachineContext = ImportPFXFlags.ImportMachineContext;
pub const ImportForceOverwrite = ImportPFXFlags.ImportForceOverwrite;
pub const ImportSilent = ImportPFXFlags.ImportSilent;
pub const ImportSaveProperties = ImportPFXFlags.ImportSaveProperties;
pub const ImportExportable = ImportPFXFlags.ImportExportable;
pub const ImportExportableEncrypted = ImportPFXFlags.ImportExportableEncrypted;
pub const ImportNoUserProtected = ImportPFXFlags.ImportNoUserProtected;
pub const ImportUserProtected = ImportPFXFlags.ImportUserProtected;
pub const ImportUserProtectedHigh = ImportPFXFlags.ImportUserProtectedHigh;
pub const ImportInstallCertificate = ImportPFXFlags.ImportInstallCertificate;
pub const ImportInstallChain = ImportPFXFlags.ImportInstallChain;
pub const ImportInstallChainAndRoot = ImportPFXFlags.ImportInstallChainAndRoot;

pub const FNIMPORTPFXTOPROVIDER = fn(
    hWndParent: HWND,
    pbPFX: [*:0]const u8,
    cbPFX: u32,
    ImportFlags: ImportPFXFlags,
    pwszPassword: ?[*:0]const u16,
    pwszProviderName: ?[*:0]const u16,
    pwszReaderName: ?[*:0]const u16,
    pwszContainerNamePrefix: ?[*:0]const u16,
    pwszPin: ?[*:0]const u16,
    pwszFriendlyName: ?[*:0]const u16,
    pcCertOut: ?*u32,
    prgpCertOut: ?*?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNIMPORTPFXTOPROVIDERFREEDATA = fn(
    cCert: u32,
    rgpCert: ?[*]?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) void;

pub const NCRYPT_DESCRIPTOR_HANDLE__ = extern struct {
    unused: i32,
};

pub const NCRYPT_STREAM_HANDLE__ = extern struct {
    unused: i32,
};

pub const PFNCryptStreamOutputCallback = fn(
    pvCallbackCtxt: *c_void,
    pbData: [*:0]const u8,
    cbData: ?*c_void,
    fFinal: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const NCRYPT_PROTECT_STREAM_INFO = extern struct {
    pfnStreamOutput: PFNCryptStreamOutputCallback,
    pvCallbackCtxt: *c_void,
};

pub const PFNCryptStreamOutputCallbackEx = fn(
    pvCallbackCtxt: *c_void,
    pbData: ?[*:0]const u8,
    cbData: ?*c_void,
    hDescriptor: *NCRYPT_DESCRIPTOR_HANDLE__,
    fFinal: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const NCRYPT_PROTECT_STREAM_INFO_EX = extern struct {
    pfnStreamOutput: PFNCryptStreamOutputCallbackEx,
    pvCallbackCtxt: *c_void,
};

pub const TOKENBINDING_TYPE = extern enum(i32) {
    PROVIDED = 0,
    REFERRED = 1,
};
pub const TOKENBINDING_TYPE_PROVIDED = TOKENBINDING_TYPE.PROVIDED;
pub const TOKENBINDING_TYPE_REFERRED = TOKENBINDING_TYPE.REFERRED;

pub const TOKENBINDING_EXTENSION_FORMAT = extern enum(i32) {
    UNDEFINED = 0,
};
pub const TOKENBINDING_EXTENSION_FORMAT_UNDEFINED = TOKENBINDING_EXTENSION_FORMAT.UNDEFINED;

pub const TOKENBINDING_KEY_PARAMETERS_TYPE = extern enum(i32) {
    RSA2048_PKCS = 0,
    RSA2048_PSS = 1,
    ECDSAP256 = 2,
    ANYEXISTING = 255,
};
pub const TOKENBINDING_KEY_PARAMETERS_TYPE_RSA2048_PKCS = TOKENBINDING_KEY_PARAMETERS_TYPE.RSA2048_PKCS;
pub const TOKENBINDING_KEY_PARAMETERS_TYPE_RSA2048_PSS = TOKENBINDING_KEY_PARAMETERS_TYPE.RSA2048_PSS;
pub const TOKENBINDING_KEY_PARAMETERS_TYPE_ECDSAP256 = TOKENBINDING_KEY_PARAMETERS_TYPE.ECDSAP256;
pub const TOKENBINDING_KEY_PARAMETERS_TYPE_ANYEXISTING = TOKENBINDING_KEY_PARAMETERS_TYPE.ANYEXISTING;

pub const TOKENBINDING_IDENTIFIER = extern struct {
    keyType: u8,
};

pub const TOKENBINDING_RESULT_DATA = extern struct {
    bindingType: TOKENBINDING_TYPE,
    identifierSize: u32,
    identifierData: *TOKENBINDING_IDENTIFIER,
    extensionFormat: TOKENBINDING_EXTENSION_FORMAT,
    extensionSize: u32,
    extensionData: *c_void,
};

pub const TOKENBINDING_RESULT_LIST = extern struct {
    resultCount: u32,
    resultData: *TOKENBINDING_RESULT_DATA,
};

pub const TOKENBINDING_KEY_TYPES = extern struct {
    keyCount: u32,
    keyType: *TOKENBINDING_KEY_PARAMETERS_TYPE,
};

pub const CRYPT_XML_CHARSET = extern enum(i32) {
    AUTO = 0,
    UTF8 = 1,
    UTF16LE = 2,
    UTF16BE = 3,
};
pub const CRYPT_XML_CHARSET_AUTO = CRYPT_XML_CHARSET.AUTO;
pub const CRYPT_XML_CHARSET_UTF8 = CRYPT_XML_CHARSET.UTF8;
pub const CRYPT_XML_CHARSET_UTF16LE = CRYPT_XML_CHARSET.UTF16LE;
pub const CRYPT_XML_CHARSET_UTF16BE = CRYPT_XML_CHARSET.UTF16BE;

pub const CRYPT_XML_BLOB = extern struct {
    dwCharset: CRYPT_XML_CHARSET,
    cbData: u32,
    pbData: *u8,
};

pub const CRYPT_XML_DATA_BLOB = extern struct {
    cbData: u32,
    pbData: *u8,
};

pub const CRYPT_XML_PROPERTY_ID = extern enum(i32) {
    CRYPT_XML_PROPERTY_MAX_HEAP_SIZE = 1,
    CRYPT_XML_PROPERTY_SIGNATURE_LOCATION = 2,
    CRYPT_XML_PROPERTY_MAX_SIGNATURES = 3,
    CRYPT_XML_PROPERTY_DOC_DECLARATION = 4,
    CRYPT_XML_PROPERTY_XML_OUTPUT_CHARSET = 5,
};
pub const CRYPT_XML_PROPERTY_MAX_HEAP_SIZE = CRYPT_XML_PROPERTY_ID.CRYPT_XML_PROPERTY_MAX_HEAP_SIZE;
pub const CRYPT_XML_PROPERTY_SIGNATURE_LOCATION = CRYPT_XML_PROPERTY_ID.CRYPT_XML_PROPERTY_SIGNATURE_LOCATION;
pub const CRYPT_XML_PROPERTY_MAX_SIGNATURES = CRYPT_XML_PROPERTY_ID.CRYPT_XML_PROPERTY_MAX_SIGNATURES;
pub const CRYPT_XML_PROPERTY_DOC_DECLARATION = CRYPT_XML_PROPERTY_ID.CRYPT_XML_PROPERTY_DOC_DECLARATION;
pub const CRYPT_XML_PROPERTY_XML_OUTPUT_CHARSET = CRYPT_XML_PROPERTY_ID.CRYPT_XML_PROPERTY_XML_OUTPUT_CHARSET;

pub const CRYPT_XML_PROPERTY = extern struct {
    dwPropId: CRYPT_XML_PROPERTY_ID,
    pvValue: *const c_void,
    cbValue: u32,
};

pub const PFN_CRYPT_XML_WRITE_CALLBACK = fn(
    pvCallbackState: *c_void,
    pbData: [*:0]const u8,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFN_CRYPT_XML_DATA_PROVIDER_READ = fn(
    pvCallbackState: *c_void,
    pbData: [*:0]u8,
    cbData: u32,
    pcbRead: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFN_CRYPT_XML_DATA_PROVIDER_CLOSE = fn(
    pvCallbackState: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const CRYPT_XML_DATA_PROVIDER = extern struct {
    pvCallbackState: *c_void,
    cbBufferSize: u32,
    pfnRead: PFN_CRYPT_XML_DATA_PROVIDER_READ,
    pfnClose: PFN_CRYPT_XML_DATA_PROVIDER_CLOSE,
};

pub const PFN_CRYPT_XML_CREATE_TRANSFORM = fn(
    pTransform: *const CRYPT_XML_ALGORITHM,
    pProviderIn: *CRYPT_XML_DATA_PROVIDER,
    pProviderOut: *CRYPT_XML_DATA_PROVIDER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const CRYPT_XML_STATUS = extern struct {
    cbSize: u32,
    dwErrorStatus: u32,
    dwInfoStatus: u32,
};

pub const CRYPT_XML_ALGORITHM = extern struct {
    cbSize: u32,
    wszAlgorithm: [*:0]const u16,
    Encoded: CRYPT_XML_BLOB,
};

pub const CRYPT_XML_TRANSFORM_INFO = extern struct {
    cbSize: u32,
    wszAlgorithm: [*:0]const u16,
    cbBufferSize: u32,
    dwFlags: u32,
    pfnCreateTransform: PFN_CRYPT_XML_CREATE_TRANSFORM,
};

pub const CRYPT_XML_TRANSFORM_CHAIN_CONFIG = extern struct {
    cbSize: u32,
    cTransformInfo: u32,
    rgpTransformInfo: **CRYPT_XML_TRANSFORM_INFO,
};

pub const CRYPT_XML_KEY_DSA_KEY_VALUE = extern struct {
    P: CRYPT_XML_DATA_BLOB,
    Q: CRYPT_XML_DATA_BLOB,
    G: CRYPT_XML_DATA_BLOB,
    Y: CRYPT_XML_DATA_BLOB,
    J: CRYPT_XML_DATA_BLOB,
    Seed: CRYPT_XML_DATA_BLOB,
    Counter: CRYPT_XML_DATA_BLOB,
};

pub const CRYPT_XML_KEY_ECDSA_KEY_VALUE = extern struct {
    wszNamedCurve: [*:0]const u16,
    X: CRYPT_XML_DATA_BLOB,
    Y: CRYPT_XML_DATA_BLOB,
    ExplicitPara: CRYPT_XML_BLOB,
};

pub const CRYPT_XML_KEY_RSA_KEY_VALUE = extern struct {
    Modulus: CRYPT_XML_DATA_BLOB,
    Exponent: CRYPT_XML_DATA_BLOB,
};

pub const CRYPT_XML_KEY_VALUE = extern struct {
    dwType: u32,
    Anonymous: CRYPT_XML_KEY_VALUE._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CRYPT_XML_ISSUER_SERIAL = extern struct {
    wszIssuer: [*:0]const u16,
    wszSerial: [*:0]const u16,
};

pub const CRYPT_XML_X509DATA_ITEM = extern struct {
    dwType: u32,
    Anonymous: CRYPT_XML_X509DATA_ITEM._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CRYPT_XML_X509DATA = extern struct {
    cX509Data: u32,
    rgX509Data: *CRYPT_XML_X509DATA_ITEM,
};

pub const CRYPT_XML_KEY_INFO_ITEM = extern struct {
    dwType: u32,
    Anonymous: CRYPT_XML_KEY_INFO_ITEM._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CRYPT_XML_KEY_INFO = extern struct {
    cbSize: u32,
    wszId: [*:0]const u16,
    cKeyInfo: u32,
    rgKeyInfo: *CRYPT_XML_KEY_INFO_ITEM,
    hVerifyKey: *c_void,
};

pub const CRYPT_XML_REFERENCE = extern struct {
    cbSize: u32,
    hReference: *c_void,
    wszId: [*:0]const u16,
    wszUri: [*:0]const u16,
    wszType: [*:0]const u16,
    DigestMethod: CRYPT_XML_ALGORITHM,
    DigestValue: CRYPTOAPI_BLOB,
    cTransform: u32,
    rgTransform: *CRYPT_XML_ALGORITHM,
};

pub const CRYPT_XML_REFERENCES = extern struct {
    cReference: u32,
    rgpReference: **CRYPT_XML_REFERENCE,
};

pub const CRYPT_XML_SIGNED_INFO = extern struct {
    cbSize: u32,
    wszId: [*:0]const u16,
    Canonicalization: CRYPT_XML_ALGORITHM,
    SignatureMethod: CRYPT_XML_ALGORITHM,
    cReference: u32,
    rgpReference: **CRYPT_XML_REFERENCE,
    Encoded: CRYPT_XML_BLOB,
};

pub const CRYPT_XML_OBJECT = extern struct {
    cbSize: u32,
    hObject: *c_void,
    wszId: [*:0]const u16,
    wszMimeType: [*:0]const u16,
    wszEncoding: [*:0]const u16,
    Manifest: CRYPT_XML_REFERENCES,
    Encoded: CRYPT_XML_BLOB,
};

pub const CRYPT_XML_SIGNATURE = extern struct {
    cbSize: u32,
    hSignature: *c_void,
    wszId: [*:0]const u16,
    SignedInfo: CRYPT_XML_SIGNED_INFO,
    SignatureValue: CRYPTOAPI_BLOB,
    pKeyInfo: *CRYPT_XML_KEY_INFO,
    cObject: u32,
    rgpObject: **CRYPT_XML_OBJECT,
};

pub const CRYPT_XML_DOC_CTXT = extern struct {
    cbSize: u32,
    hDocCtxt: *c_void,
    pTransformsConfig: *CRYPT_XML_TRANSFORM_CHAIN_CONFIG,
    cSignature: u32,
    rgpSignature: **CRYPT_XML_SIGNATURE,
};

pub const CRYPT_XML_KEYINFO_PARAM = extern struct {
    wszId: [*:0]const u16,
    wszKeyName: [*:0]const u16,
    SKI: CRYPTOAPI_BLOB,
    wszSubjectName: [*:0]const u16,
    cCertificate: u32,
    rgCertificate: *CRYPTOAPI_BLOB,
    cCRL: u32,
    rgCRL: *CRYPTOAPI_BLOB,
};

pub const CRYPT_XML_KEYINFO_SPEC = extern enum(i32) {
    NONE = 0,
    ENCODED = 1,
    PARAM = 2,
};
pub const CRYPT_XML_KEYINFO_SPEC_NONE = CRYPT_XML_KEYINFO_SPEC.NONE;
pub const CRYPT_XML_KEYINFO_SPEC_ENCODED = CRYPT_XML_KEYINFO_SPEC.ENCODED;
pub const CRYPT_XML_KEYINFO_SPEC_PARAM = CRYPT_XML_KEYINFO_SPEC.PARAM;

pub const CRYPT_XML_ALGORITHM_INFO = extern struct {
    cbSize: u32,
    wszAlgorithmURI: PWSTR,
    wszName: PWSTR,
    dwGroupId: u32,
    wszCNGAlgid: PWSTR,
    wszCNGExtraAlgid: PWSTR,
    dwSignFlags: u32,
    dwVerifyFlags: u32,
    pvPaddingInfo: *c_void,
    pvExtraInfo: *c_void,
};

pub const PFN_CRYPT_XML_ENUM_ALG_INFO = fn(
    pInfo: *const CRYPT_XML_ALGORITHM_INFO,
    pvArg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CryptXmlDllGetInterface = fn(
    dwFlags: u32,
    pMethod: *const CRYPT_XML_ALGORITHM_INFO,
    pInterface: *CRYPT_XML_CRYPTOGRAPHIC_INTERFACE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const CryptXmlDllEncodeAlgorithm = fn(
    pAlgInfo: *const CRYPT_XML_ALGORITHM_INFO,
    dwCharset: CRYPT_XML_CHARSET,
    pvCallbackState: *c_void,
    pfnWrite: PFN_CRYPT_XML_WRITE_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const CryptXmlDllCreateDigest = fn(
    pDigestMethod: *const CRYPT_XML_ALGORITHM,
    pcbSize: *u32,
    phDigest: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const CryptXmlDllDigestData = fn(
    hDigest: *c_void,
    pbData: [*:0]const u8,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const CryptXmlDllFinalizeDigest = fn(
    hDigest: *c_void,
    pbDigest: [*:0]u8,
    cbDigest: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const CryptXmlDllCloseDigest = fn(
    hDigest: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const CryptXmlDllSignData = fn(
    pSignatureMethod: *const CRYPT_XML_ALGORITHM,
    hCryptProvOrNCryptKey: ?*c_void,
    dwKeySpec: u32,
    pbInput: [*:0]const u8,
    cbInput: u32,
    pbOutput: ?[*:0]u8,
    cbOutput: u32,
    pcbResult: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const CryptXmlDllVerifySignature = fn(
    pSignatureMethod: *const CRYPT_XML_ALGORITHM,
    hKey: *c_void,
    pbInput: [*:0]const u8,
    cbInput: u32,
    pbSignature: [*:0]const u8,
    cbSignature: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const CryptXmlDllGetAlgorithmInfo = fn(
    pXmlAlgorithm: *const CRYPT_XML_ALGORITHM,
    ppAlgInfo: **CRYPT_XML_ALGORITHM_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const CRYPT_XML_CRYPTOGRAPHIC_INTERFACE = extern struct {
    cbSize: u32,
    fpCryptXmlEncodeAlgorithm: CryptXmlDllEncodeAlgorithm,
    fpCryptXmlCreateDigest: CryptXmlDllCreateDigest,
    fpCryptXmlDigestData: CryptXmlDllDigestData,
    fpCryptXmlFinalizeDigest: CryptXmlDllFinalizeDigest,
    fpCryptXmlCloseDigest: CryptXmlDllCloseDigest,
    fpCryptXmlSignData: CryptXmlDllSignData,
    fpCryptXmlVerifySignature: CryptXmlDllVerifySignature,
    fpCryptXmlGetAlgorithmInfo: CryptXmlDllGetAlgorithmInfo,
};

pub const CryptXmlDllEncodeKeyValue = fn(
    hKey: ?*c_void,
    dwCharset: CRYPT_XML_CHARSET,
    pvCallbackState: *c_void,
    pfnWrite: PFN_CRYPT_XML_WRITE_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const CryptXmlDllCreateKey = fn(
    pEncoded: *const CRYPT_XML_BLOB,
    phKey: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

const CLSID_CCertSrvSetupKeyInformation_Value = @import("../zig.zig").Guid.initString("38373906-5433-4633-B0FB-29B7E78262E1");
pub const CLSID_CCertSrvSetupKeyInformation = &CLSID_CCertSrvSetupKeyInformation_Value;

const CLSID_CCertSrvSetup_Value = @import("../zig.zig").Guid.initString("961F180F-F55C-413D-A9B3-7D2AF4D8E42F");
pub const CLSID_CCertSrvSetup = &CLSID_CCertSrvSetup_Value;

const CLSID_CMSCEPSetup_Value = @import("../zig.zig").Guid.initString("AA4F5C02-8E7C-49C4-94FA-67A5CC5EADB4");
pub const CLSID_CMSCEPSetup = &CLSID_CMSCEPSetup_Value;

const CLSID_CCertificateEnrollmentServerSetup_Value = @import("../zig.zig").Guid.initString("9902F3BC-88AF-4CF8-AE62-7140531552B6");
pub const CLSID_CCertificateEnrollmentServerSetup = &CLSID_CCertificateEnrollmentServerSetup_Value;

const CLSID_CCertificateEnrollmentPolicyServerSetup_Value = @import("../zig.zig").Guid.initString("AFE2FA32-41B1-459D-A5DE-49ADD8A72182");
pub const CLSID_CCertificateEnrollmentPolicyServerSetup = &CLSID_CCertificateEnrollmentPolicyServerSetup_Value;

const IID_ICertSrvSetupKeyInformation_Value = @import("../zig.zig").Guid.initString("6BA73778-36DA-4C39-8A85-BCFA7D000793");
pub const IID_ICertSrvSetupKeyInformation = &IID_ICertSrvSetupKeyInformation_Value;
pub const ICertSrvSetupKeyInformation = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ProviderName: fn(
            self: *const ICertSrvSetupKeyInformation,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ProviderName: fn(
            self: *const ICertSrvSetupKeyInformation,
            bstrVal: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Length: fn(
            self: *const ICertSrvSetupKeyInformation,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Length: fn(
            self: *const ICertSrvSetupKeyInformation,
            lVal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Existing: fn(
            self: *const ICertSrvSetupKeyInformation,
            pVal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Existing: fn(
            self: *const ICertSrvSetupKeyInformation,
            bVal: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ContainerName: fn(
            self: *const ICertSrvSetupKeyInformation,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ContainerName: fn(
            self: *const ICertSrvSetupKeyInformation,
            bstrVal: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_HashAlgorithm: fn(
            self: *const ICertSrvSetupKeyInformation,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_HashAlgorithm: fn(
            self: *const ICertSrvSetupKeyInformation,
            bstrVal: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ExistingCACertificate: fn(
            self: *const ICertSrvSetupKeyInformation,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ExistingCACertificate: fn(
            self: *const ICertSrvSetupKeyInformation,
            varVal: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetupKeyInformation_get_ProviderName(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetupKeyInformation.VTable, self.vtable).get_ProviderName(@ptrCast(*const ICertSrvSetupKeyInformation, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetupKeyInformation_put_ProviderName(self: *const T, bstrVal: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetupKeyInformation.VTable, self.vtable).put_ProviderName(@ptrCast(*const ICertSrvSetupKeyInformation, self), bstrVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetupKeyInformation_get_Length(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetupKeyInformation.VTable, self.vtable).get_Length(@ptrCast(*const ICertSrvSetupKeyInformation, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetupKeyInformation_put_Length(self: *const T, lVal: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetupKeyInformation.VTable, self.vtable).put_Length(@ptrCast(*const ICertSrvSetupKeyInformation, self), lVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetupKeyInformation_get_Existing(self: *const T, pVal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetupKeyInformation.VTable, self.vtable).get_Existing(@ptrCast(*const ICertSrvSetupKeyInformation, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetupKeyInformation_put_Existing(self: *const T, bVal: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetupKeyInformation.VTable, self.vtable).put_Existing(@ptrCast(*const ICertSrvSetupKeyInformation, self), bVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetupKeyInformation_get_ContainerName(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetupKeyInformation.VTable, self.vtable).get_ContainerName(@ptrCast(*const ICertSrvSetupKeyInformation, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetupKeyInformation_put_ContainerName(self: *const T, bstrVal: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetupKeyInformation.VTable, self.vtable).put_ContainerName(@ptrCast(*const ICertSrvSetupKeyInformation, self), bstrVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetupKeyInformation_get_HashAlgorithm(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetupKeyInformation.VTable, self.vtable).get_HashAlgorithm(@ptrCast(*const ICertSrvSetupKeyInformation, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetupKeyInformation_put_HashAlgorithm(self: *const T, bstrVal: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetupKeyInformation.VTable, self.vtable).put_HashAlgorithm(@ptrCast(*const ICertSrvSetupKeyInformation, self), bstrVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetupKeyInformation_get_ExistingCACertificate(self: *const T, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetupKeyInformation.VTable, self.vtable).get_ExistingCACertificate(@ptrCast(*const ICertSrvSetupKeyInformation, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetupKeyInformation_put_ExistingCACertificate(self: *const T, varVal: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetupKeyInformation.VTable, self.vtable).put_ExistingCACertificate(@ptrCast(*const ICertSrvSetupKeyInformation, self), varVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertSrvSetupKeyInformationCollection_Value = @import("../zig.zig").Guid.initString("E65C8B00-E58F-41F9-A9EC-A28D7427C844");
pub const IID_ICertSrvSetupKeyInformationCollection = &IID_ICertSrvSetupKeyInformationCollection_Value;
pub const ICertSrvSetupKeyInformationCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get__NewEnum: fn(
            self: *const ICertSrvSetupKeyInformationCollection,
            ppVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ICertSrvSetupKeyInformationCollection,
            Index: i32,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ICertSrvSetupKeyInformationCollection,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ICertSrvSetupKeyInformationCollection,
            pIKeyInformation: *ICertSrvSetupKeyInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetupKeyInformationCollection_get__NewEnum(self: *const T, ppVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetupKeyInformationCollection.VTable, self.vtable).get__NewEnum(@ptrCast(*const ICertSrvSetupKeyInformationCollection, self), ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetupKeyInformationCollection_get_Item(self: *const T, Index: i32, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetupKeyInformationCollection.VTable, self.vtable).get_Item(@ptrCast(*const ICertSrvSetupKeyInformationCollection, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetupKeyInformationCollection_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetupKeyInformationCollection.VTable, self.vtable).get_Count(@ptrCast(*const ICertSrvSetupKeyInformationCollection, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetupKeyInformationCollection_Add(self: *const T, pIKeyInformation: *ICertSrvSetupKeyInformation) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetupKeyInformationCollection.VTable, self.vtable).Add(@ptrCast(*const ICertSrvSetupKeyInformationCollection, self), pIKeyInformation);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CASetupProperty = extern enum(i32) {
    ENUM_SETUPPROP_INVALID = -1,
    ENUM_SETUPPROP_CATYPE = 0,
    ENUM_SETUPPROP_CAKEYINFORMATION = 1,
    ENUM_SETUPPROP_INTERACTIVE = 2,
    ENUM_SETUPPROP_CANAME = 3,
    ENUM_SETUPPROP_CADSSUFFIX = 4,
    ENUM_SETUPPROP_VALIDITYPERIOD = 5,
    ENUM_SETUPPROP_VALIDITYPERIODUNIT = 6,
    ENUM_SETUPPROP_EXPIRATIONDATE = 7,
    ENUM_SETUPPROP_PRESERVEDATABASE = 8,
    ENUM_SETUPPROP_DATABASEDIRECTORY = 9,
    ENUM_SETUPPROP_LOGDIRECTORY = 10,
    ENUM_SETUPPROP_SHAREDFOLDER = 11,
    ENUM_SETUPPROP_PARENTCAMACHINE = 12,
    ENUM_SETUPPROP_PARENTCANAME = 13,
    ENUM_SETUPPROP_REQUESTFILE = 14,
    ENUM_SETUPPROP_WEBCAMACHINE = 15,
    ENUM_SETUPPROP_WEBCANAME = 16,
};
pub const ENUM_SETUPPROP_INVALID = CASetupProperty.ENUM_SETUPPROP_INVALID;
pub const ENUM_SETUPPROP_CATYPE = CASetupProperty.ENUM_SETUPPROP_CATYPE;
pub const ENUM_SETUPPROP_CAKEYINFORMATION = CASetupProperty.ENUM_SETUPPROP_CAKEYINFORMATION;
pub const ENUM_SETUPPROP_INTERACTIVE = CASetupProperty.ENUM_SETUPPROP_INTERACTIVE;
pub const ENUM_SETUPPROP_CANAME = CASetupProperty.ENUM_SETUPPROP_CANAME;
pub const ENUM_SETUPPROP_CADSSUFFIX = CASetupProperty.ENUM_SETUPPROP_CADSSUFFIX;
pub const ENUM_SETUPPROP_VALIDITYPERIOD = CASetupProperty.ENUM_SETUPPROP_VALIDITYPERIOD;
pub const ENUM_SETUPPROP_VALIDITYPERIODUNIT = CASetupProperty.ENUM_SETUPPROP_VALIDITYPERIODUNIT;
pub const ENUM_SETUPPROP_EXPIRATIONDATE = CASetupProperty.ENUM_SETUPPROP_EXPIRATIONDATE;
pub const ENUM_SETUPPROP_PRESERVEDATABASE = CASetupProperty.ENUM_SETUPPROP_PRESERVEDATABASE;
pub const ENUM_SETUPPROP_DATABASEDIRECTORY = CASetupProperty.ENUM_SETUPPROP_DATABASEDIRECTORY;
pub const ENUM_SETUPPROP_LOGDIRECTORY = CASetupProperty.ENUM_SETUPPROP_LOGDIRECTORY;
pub const ENUM_SETUPPROP_SHAREDFOLDER = CASetupProperty.ENUM_SETUPPROP_SHAREDFOLDER;
pub const ENUM_SETUPPROP_PARENTCAMACHINE = CASetupProperty.ENUM_SETUPPROP_PARENTCAMACHINE;
pub const ENUM_SETUPPROP_PARENTCANAME = CASetupProperty.ENUM_SETUPPROP_PARENTCANAME;
pub const ENUM_SETUPPROP_REQUESTFILE = CASetupProperty.ENUM_SETUPPROP_REQUESTFILE;
pub const ENUM_SETUPPROP_WEBCAMACHINE = CASetupProperty.ENUM_SETUPPROP_WEBCAMACHINE;
pub const ENUM_SETUPPROP_WEBCANAME = CASetupProperty.ENUM_SETUPPROP_WEBCANAME;

const IID_ICertSrvSetup_Value = @import("../zig.zig").Guid.initString("B760A1BB-4784-44C0-8F12-555F0780FF25");
pub const IID_ICertSrvSetup = &IID_ICertSrvSetup_Value;
pub const ICertSrvSetup = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_CAErrorId: fn(
            self: *const ICertSrvSetup,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CAErrorString: fn(
            self: *const ICertSrvSetup,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDefaults: fn(
            self: *const ICertSrvSetup,
            bServer: i16,
            bClient: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCASetupProperty: fn(
            self: *const ICertSrvSetup,
            propertyId: CASetupProperty,
            pPropertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCASetupProperty: fn(
            self: *const ICertSrvSetup,
            propertyId: CASetupProperty,
            pPropertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPropertyEditable: fn(
            self: *const ICertSrvSetup,
            propertyId: CASetupProperty,
            pbEditable: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedCATypes: fn(
            self: *const ICertSrvSetup,
            pCATypes: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProviderNameList: fn(
            self: *const ICertSrvSetup,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyLengthList: fn(
            self: *const ICertSrvSetup,
            bstrProviderName: BSTR,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHashAlgorithmList: fn(
            self: *const ICertSrvSetup,
            bstrProviderName: BSTR,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrivateKeyContainerList: fn(
            self: *const ICertSrvSetup,
            bstrProviderName: BSTR,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExistingCACertificates: fn(
            self: *const ICertSrvSetup,
            ppVal: **ICertSrvSetupKeyInformationCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CAImportPFX: fn(
            self: *const ICertSrvSetup,
            bstrFileName: BSTR,
            bstrPasswd: BSTR,
            bOverwriteExistingKey: i16,
            ppVal: **ICertSrvSetupKeyInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCADistinguishedName: fn(
            self: *const ICertSrvSetup,
            bstrCADN: BSTR,
            bIgnoreUnicode: i16,
            bOverwriteExistingKey: i16,
            bOverwriteExistingCAInDS: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDatabaseInformation: fn(
            self: *const ICertSrvSetup,
            bstrDBDirectory: BSTR,
            bstrLogDirectory: BSTR,
            bstrSharedFolder: BSTR,
            bForceOverwrite: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParentCAInformation: fn(
            self: *const ICertSrvSetup,
            bstrCAConfiguration: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWebCAInformation: fn(
            self: *const ICertSrvSetup,
            bstrCAConfiguration: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Install: fn(
            self: *const ICertSrvSetup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreUnInstall: fn(
            self: *const ICertSrvSetup,
            bClientOnly: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostUnInstall: fn(
            self: *const ICertSrvSetup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_get_CAErrorId(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).get_CAErrorId(@ptrCast(*const ICertSrvSetup, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_get_CAErrorString(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).get_CAErrorString(@ptrCast(*const ICertSrvSetup, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_InitializeDefaults(self: *const T, bServer: i16, bClient: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).InitializeDefaults(@ptrCast(*const ICertSrvSetup, self), bServer, bClient);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_GetCASetupProperty(self: *const T, propertyId: CASetupProperty, pPropertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).GetCASetupProperty(@ptrCast(*const ICertSrvSetup, self), propertyId, pPropertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_SetCASetupProperty(self: *const T, propertyId: CASetupProperty, pPropertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).SetCASetupProperty(@ptrCast(*const ICertSrvSetup, self), propertyId, pPropertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_IsPropertyEditable(self: *const T, propertyId: CASetupProperty, pbEditable: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).IsPropertyEditable(@ptrCast(*const ICertSrvSetup, self), propertyId, pbEditable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_GetSupportedCATypes(self: *const T, pCATypes: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).GetSupportedCATypes(@ptrCast(*const ICertSrvSetup, self), pCATypes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_GetProviderNameList(self: *const T, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).GetProviderNameList(@ptrCast(*const ICertSrvSetup, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_GetKeyLengthList(self: *const T, bstrProviderName: BSTR, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).GetKeyLengthList(@ptrCast(*const ICertSrvSetup, self), bstrProviderName, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_GetHashAlgorithmList(self: *const T, bstrProviderName: BSTR, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).GetHashAlgorithmList(@ptrCast(*const ICertSrvSetup, self), bstrProviderName, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_GetPrivateKeyContainerList(self: *const T, bstrProviderName: BSTR, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).GetPrivateKeyContainerList(@ptrCast(*const ICertSrvSetup, self), bstrProviderName, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_GetExistingCACertificates(self: *const T, ppVal: **ICertSrvSetupKeyInformationCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).GetExistingCACertificates(@ptrCast(*const ICertSrvSetup, self), ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_CAImportPFX(self: *const T, bstrFileName: BSTR, bstrPasswd: BSTR, bOverwriteExistingKey: i16, ppVal: **ICertSrvSetupKeyInformation) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).CAImportPFX(@ptrCast(*const ICertSrvSetup, self), bstrFileName, bstrPasswd, bOverwriteExistingKey, ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_SetCADistinguishedName(self: *const T, bstrCADN: BSTR, bIgnoreUnicode: i16, bOverwriteExistingKey: i16, bOverwriteExistingCAInDS: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).SetCADistinguishedName(@ptrCast(*const ICertSrvSetup, self), bstrCADN, bIgnoreUnicode, bOverwriteExistingKey, bOverwriteExistingCAInDS);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_SetDatabaseInformation(self: *const T, bstrDBDirectory: BSTR, bstrLogDirectory: BSTR, bstrSharedFolder: BSTR, bForceOverwrite: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).SetDatabaseInformation(@ptrCast(*const ICertSrvSetup, self), bstrDBDirectory, bstrLogDirectory, bstrSharedFolder, bForceOverwrite);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_SetParentCAInformation(self: *const T, bstrCAConfiguration: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).SetParentCAInformation(@ptrCast(*const ICertSrvSetup, self), bstrCAConfiguration);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_SetWebCAInformation(self: *const T, bstrCAConfiguration: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).SetWebCAInformation(@ptrCast(*const ICertSrvSetup, self), bstrCAConfiguration);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_Install(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).Install(@ptrCast(*const ICertSrvSetup, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_PreUnInstall(self: *const T, bClientOnly: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).PreUnInstall(@ptrCast(*const ICertSrvSetup, self), bClientOnly);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertSrvSetup_PostUnInstall(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertSrvSetup.VTable, self.vtable).PostUnInstall(@ptrCast(*const ICertSrvSetup, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const MSCEPSetupProperty = extern enum(i32) {
    ENUM_CEPSETUPPROP_USELOCALSYSTEM = 0,
    ENUM_CEPSETUPPROP_USECHALLENGE = 1,
    ENUM_CEPSETUPPROP_RANAME_CN = 2,
    ENUM_CEPSETUPPROP_RANAME_EMAIL = 3,
    ENUM_CEPSETUPPROP_RANAME_COMPANY = 4,
    ENUM_CEPSETUPPROP_RANAME_DEPT = 5,
    ENUM_CEPSETUPPROP_RANAME_CITY = 6,
    ENUM_CEPSETUPPROP_RANAME_STATE = 7,
    ENUM_CEPSETUPPROP_RANAME_COUNTRY = 8,
    ENUM_CEPSETUPPROP_SIGNINGKEYINFORMATION = 9,
    ENUM_CEPSETUPPROP_EXCHANGEKEYINFORMATION = 10,
    ENUM_CEPSETUPPROP_CAINFORMATION = 11,
    ENUM_CEPSETUPPROP_MSCEPURL = 12,
    ENUM_CEPSETUPPROP_CHALLENGEURL = 13,
};
pub const ENUM_CEPSETUPPROP_USELOCALSYSTEM = MSCEPSetupProperty.ENUM_CEPSETUPPROP_USELOCALSYSTEM;
pub const ENUM_CEPSETUPPROP_USECHALLENGE = MSCEPSetupProperty.ENUM_CEPSETUPPROP_USECHALLENGE;
pub const ENUM_CEPSETUPPROP_RANAME_CN = MSCEPSetupProperty.ENUM_CEPSETUPPROP_RANAME_CN;
pub const ENUM_CEPSETUPPROP_RANAME_EMAIL = MSCEPSetupProperty.ENUM_CEPSETUPPROP_RANAME_EMAIL;
pub const ENUM_CEPSETUPPROP_RANAME_COMPANY = MSCEPSetupProperty.ENUM_CEPSETUPPROP_RANAME_COMPANY;
pub const ENUM_CEPSETUPPROP_RANAME_DEPT = MSCEPSetupProperty.ENUM_CEPSETUPPROP_RANAME_DEPT;
pub const ENUM_CEPSETUPPROP_RANAME_CITY = MSCEPSetupProperty.ENUM_CEPSETUPPROP_RANAME_CITY;
pub const ENUM_CEPSETUPPROP_RANAME_STATE = MSCEPSetupProperty.ENUM_CEPSETUPPROP_RANAME_STATE;
pub const ENUM_CEPSETUPPROP_RANAME_COUNTRY = MSCEPSetupProperty.ENUM_CEPSETUPPROP_RANAME_COUNTRY;
pub const ENUM_CEPSETUPPROP_SIGNINGKEYINFORMATION = MSCEPSetupProperty.ENUM_CEPSETUPPROP_SIGNINGKEYINFORMATION;
pub const ENUM_CEPSETUPPROP_EXCHANGEKEYINFORMATION = MSCEPSetupProperty.ENUM_CEPSETUPPROP_EXCHANGEKEYINFORMATION;
pub const ENUM_CEPSETUPPROP_CAINFORMATION = MSCEPSetupProperty.ENUM_CEPSETUPPROP_CAINFORMATION;
pub const ENUM_CEPSETUPPROP_MSCEPURL = MSCEPSetupProperty.ENUM_CEPSETUPPROP_MSCEPURL;
pub const ENUM_CEPSETUPPROP_CHALLENGEURL = MSCEPSetupProperty.ENUM_CEPSETUPPROP_CHALLENGEURL;

const IID_IMSCEPSetup_Value = @import("../zig.zig").Guid.initString("4F7761BB-9F3B-4592-9EE0-9A73259C313E");
pub const IID_IMSCEPSetup = &IID_IMSCEPSetup_Value;
pub const IMSCEPSetup = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_MSCEPErrorId: fn(
            self: *const IMSCEPSetup,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MSCEPErrorString: fn(
            self: *const IMSCEPSetup,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDefaults: fn(
            self: *const IMSCEPSetup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMSCEPSetupProperty: fn(
            self: *const IMSCEPSetup,
            propertyId: MSCEPSetupProperty,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMSCEPSetupProperty: fn(
            self: *const IMSCEPSetup,
            propertyId: MSCEPSetupProperty,
            pPropertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAccountInformation: fn(
            self: *const IMSCEPSetup,
            bstrUserName: BSTR,
            bstrPassword: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsMSCEPStoreEmpty: fn(
            self: *const IMSCEPSetup,
            pbEmpty: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProviderNameList: fn(
            self: *const IMSCEPSetup,
            bExchange: i16,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyLengthList: fn(
            self: *const IMSCEPSetup,
            bExchange: i16,
            bstrProviderName: BSTR,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Install: fn(
            self: *const IMSCEPSetup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreUnInstall: fn(
            self: *const IMSCEPSetup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostUnInstall: fn(
            self: *const IMSCEPSetup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMSCEPSetup_get_MSCEPErrorId(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMSCEPSetup.VTable, self.vtable).get_MSCEPErrorId(@ptrCast(*const IMSCEPSetup, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMSCEPSetup_get_MSCEPErrorString(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMSCEPSetup.VTable, self.vtable).get_MSCEPErrorString(@ptrCast(*const IMSCEPSetup, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMSCEPSetup_InitializeDefaults(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMSCEPSetup.VTable, self.vtable).InitializeDefaults(@ptrCast(*const IMSCEPSetup, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMSCEPSetup_GetMSCEPSetupProperty(self: *const T, propertyId: MSCEPSetupProperty, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMSCEPSetup.VTable, self.vtable).GetMSCEPSetupProperty(@ptrCast(*const IMSCEPSetup, self), propertyId, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMSCEPSetup_SetMSCEPSetupProperty(self: *const T, propertyId: MSCEPSetupProperty, pPropertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMSCEPSetup.VTable, self.vtable).SetMSCEPSetupProperty(@ptrCast(*const IMSCEPSetup, self), propertyId, pPropertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMSCEPSetup_SetAccountInformation(self: *const T, bstrUserName: BSTR, bstrPassword: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMSCEPSetup.VTable, self.vtable).SetAccountInformation(@ptrCast(*const IMSCEPSetup, self), bstrUserName, bstrPassword);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMSCEPSetup_IsMSCEPStoreEmpty(self: *const T, pbEmpty: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMSCEPSetup.VTable, self.vtable).IsMSCEPStoreEmpty(@ptrCast(*const IMSCEPSetup, self), pbEmpty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMSCEPSetup_GetProviderNameList(self: *const T, bExchange: i16, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMSCEPSetup.VTable, self.vtable).GetProviderNameList(@ptrCast(*const IMSCEPSetup, self), bExchange, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMSCEPSetup_GetKeyLengthList(self: *const T, bExchange: i16, bstrProviderName: BSTR, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMSCEPSetup.VTable, self.vtable).GetKeyLengthList(@ptrCast(*const IMSCEPSetup, self), bExchange, bstrProviderName, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMSCEPSetup_Install(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMSCEPSetup.VTable, self.vtable).Install(@ptrCast(*const IMSCEPSetup, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMSCEPSetup_PreUnInstall(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMSCEPSetup.VTable, self.vtable).PreUnInstall(@ptrCast(*const IMSCEPSetup, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMSCEPSetup_PostUnInstall(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMSCEPSetup.VTable, self.vtable).PostUnInstall(@ptrCast(*const IMSCEPSetup, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CESSetupProperty = extern enum(i32) {
    ENUM_CESSETUPPROP_USE_IISAPPPOOLIDENTITY = 0,
    ENUM_CESSETUPPROP_CACONFIG = 1,
    ENUM_CESSETUPPROP_AUTHENTICATION = 2,
    ENUM_CESSETUPPROP_SSLCERTHASH = 3,
    ENUM_CESSETUPPROP_URL = 4,
    ENUM_CESSETUPPROP_RENEWALONLY = 5,
    ENUM_CESSETUPPROP_ALLOW_KEYBASED_RENEWAL = 6,
};
pub const ENUM_CESSETUPPROP_USE_IISAPPPOOLIDENTITY = CESSetupProperty.ENUM_CESSETUPPROP_USE_IISAPPPOOLIDENTITY;
pub const ENUM_CESSETUPPROP_CACONFIG = CESSetupProperty.ENUM_CESSETUPPROP_CACONFIG;
pub const ENUM_CESSETUPPROP_AUTHENTICATION = CESSetupProperty.ENUM_CESSETUPPROP_AUTHENTICATION;
pub const ENUM_CESSETUPPROP_SSLCERTHASH = CESSetupProperty.ENUM_CESSETUPPROP_SSLCERTHASH;
pub const ENUM_CESSETUPPROP_URL = CESSetupProperty.ENUM_CESSETUPPROP_URL;
pub const ENUM_CESSETUPPROP_RENEWALONLY = CESSetupProperty.ENUM_CESSETUPPROP_RENEWALONLY;
pub const ENUM_CESSETUPPROP_ALLOW_KEYBASED_RENEWAL = CESSetupProperty.ENUM_CESSETUPPROP_ALLOW_KEYBASED_RENEWAL;

const IID_ICertificateEnrollmentServerSetup_Value = @import("../zig.zig").Guid.initString("70027FDB-9DD9-4921-8944-B35CB31BD2EC");
pub const IID_ICertificateEnrollmentServerSetup = &IID_ICertificateEnrollmentServerSetup_Value;
pub const ICertificateEnrollmentServerSetup = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ErrorString: fn(
            self: *const ICertificateEnrollmentServerSetup,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeInstallDefaults: fn(
            self: *const ICertificateEnrollmentServerSetup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const ICertificateEnrollmentServerSetup,
            propertyId: CESSetupProperty,
            pPropertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const ICertificateEnrollmentServerSetup,
            propertyId: CESSetupProperty,
            pPropertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetApplicationPoolCredentials: fn(
            self: *const ICertificateEnrollmentServerSetup,
            bstrUsername: BSTR,
            bstrPassword: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Install: fn(
            self: *const ICertificateEnrollmentServerSetup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnInstall: fn(
            self: *const ICertificateEnrollmentServerSetup,
            pCAConfig: *VARIANT,
            pAuthentication: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificateEnrollmentServerSetup_get_ErrorString(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificateEnrollmentServerSetup.VTable, self.vtable).get_ErrorString(@ptrCast(*const ICertificateEnrollmentServerSetup, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificateEnrollmentServerSetup_InitializeInstallDefaults(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificateEnrollmentServerSetup.VTable, self.vtable).InitializeInstallDefaults(@ptrCast(*const ICertificateEnrollmentServerSetup, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificateEnrollmentServerSetup_GetProperty(self: *const T, propertyId: CESSetupProperty, pPropertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificateEnrollmentServerSetup.VTable, self.vtable).GetProperty(@ptrCast(*const ICertificateEnrollmentServerSetup, self), propertyId, pPropertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificateEnrollmentServerSetup_SetProperty(self: *const T, propertyId: CESSetupProperty, pPropertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificateEnrollmentServerSetup.VTable, self.vtable).SetProperty(@ptrCast(*const ICertificateEnrollmentServerSetup, self), propertyId, pPropertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificateEnrollmentServerSetup_SetApplicationPoolCredentials(self: *const T, bstrUsername: BSTR, bstrPassword: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificateEnrollmentServerSetup.VTable, self.vtable).SetApplicationPoolCredentials(@ptrCast(*const ICertificateEnrollmentServerSetup, self), bstrUsername, bstrPassword);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificateEnrollmentServerSetup_Install(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificateEnrollmentServerSetup.VTable, self.vtable).Install(@ptrCast(*const ICertificateEnrollmentServerSetup, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificateEnrollmentServerSetup_UnInstall(self: *const T, pCAConfig: *VARIANT, pAuthentication: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificateEnrollmentServerSetup.VTable, self.vtable).UnInstall(@ptrCast(*const ICertificateEnrollmentServerSetup, self), pCAConfig, pAuthentication);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CEPSetupProperty = extern enum(i32) {
    ENUM_CEPSETUPPROP_AUTHENTICATION = 0,
    ENUM_CEPSETUPPROP_SSLCERTHASH = 1,
    ENUM_CEPSETUPPROP_URL = 2,
    ENUM_CEPSETUPPROP_KEYBASED_RENEWAL = 3,
};
pub const ENUM_CEPSETUPPROP_AUTHENTICATION = CEPSetupProperty.ENUM_CEPSETUPPROP_AUTHENTICATION;
pub const ENUM_CEPSETUPPROP_SSLCERTHASH = CEPSetupProperty.ENUM_CEPSETUPPROP_SSLCERTHASH;
pub const ENUM_CEPSETUPPROP_URL = CEPSetupProperty.ENUM_CEPSETUPPROP_URL;
pub const ENUM_CEPSETUPPROP_KEYBASED_RENEWAL = CEPSetupProperty.ENUM_CEPSETUPPROP_KEYBASED_RENEWAL;

const IID_ICertificateEnrollmentPolicyServerSetup_Value = @import("../zig.zig").Guid.initString("859252CC-238C-4A88-B8FD-A37E7D04E68B");
pub const IID_ICertificateEnrollmentPolicyServerSetup = &IID_ICertificateEnrollmentPolicyServerSetup_Value;
pub const ICertificateEnrollmentPolicyServerSetup = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ErrorString: fn(
            self: *const ICertificateEnrollmentPolicyServerSetup,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeInstallDefaults: fn(
            self: *const ICertificateEnrollmentPolicyServerSetup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const ICertificateEnrollmentPolicyServerSetup,
            propertyId: CEPSetupProperty,
            pPropertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const ICertificateEnrollmentPolicyServerSetup,
            propertyId: CEPSetupProperty,
            pPropertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Install: fn(
            self: *const ICertificateEnrollmentPolicyServerSetup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnInstall: fn(
            self: *const ICertificateEnrollmentPolicyServerSetup,
            pAuthKeyBasedRenewal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificateEnrollmentPolicyServerSetup_get_ErrorString(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificateEnrollmentPolicyServerSetup.VTable, self.vtable).get_ErrorString(@ptrCast(*const ICertificateEnrollmentPolicyServerSetup, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificateEnrollmentPolicyServerSetup_InitializeInstallDefaults(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificateEnrollmentPolicyServerSetup.VTable, self.vtable).InitializeInstallDefaults(@ptrCast(*const ICertificateEnrollmentPolicyServerSetup, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificateEnrollmentPolicyServerSetup_GetProperty(self: *const T, propertyId: CEPSetupProperty, pPropertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificateEnrollmentPolicyServerSetup.VTable, self.vtable).GetProperty(@ptrCast(*const ICertificateEnrollmentPolicyServerSetup, self), propertyId, pPropertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificateEnrollmentPolicyServerSetup_SetProperty(self: *const T, propertyId: CEPSetupProperty, pPropertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificateEnrollmentPolicyServerSetup.VTable, self.vtable).SetProperty(@ptrCast(*const ICertificateEnrollmentPolicyServerSetup, self), propertyId, pPropertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificateEnrollmentPolicyServerSetup_Install(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificateEnrollmentPolicyServerSetup.VTable, self.vtable).Install(@ptrCast(*const ICertificateEnrollmentPolicyServerSetup, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertificateEnrollmentPolicyServerSetup_UnInstall(self: *const T, pAuthKeyBasedRenewal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertificateEnrollmentPolicyServerSetup.VTable, self.vtable).UnInstall(@ptrCast(*const ICertificateEnrollmentPolicyServerSetup, self), pAuthKeyBasedRenewal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_CCertAdmin_Value = @import("../zig.zig").Guid.initString("37EABAF0-7FB6-11D0-8817-00A0C903B83C");
pub const CLSID_CCertAdmin = &CLSID_CCertAdmin_Value;

const CLSID_CCertView_Value = @import("../zig.zig").Guid.initString("A12D0F7A-1E84-11D1-9BD6-00C04FB683FA");
pub const CLSID_CCertView = &CLSID_CCertView_Value;

const CLSID_OCSPPropertyCollection_Value = @import("../zig.zig").Guid.initString("F935A528-BA8A-4DD9-BA79-F283275CB2DE");
pub const CLSID_OCSPPropertyCollection = &CLSID_OCSPPropertyCollection_Value;

const CLSID_OCSPAdmin_Value = @import("../zig.zig").Guid.initString("D3F73511-92C9-47CB-8FF2-8D891A7C4DE4");
pub const CLSID_OCSPAdmin = &CLSID_OCSPAdmin_Value;

const IID_IEnumCERTVIEWCOLUMN_Value = @import("../zig.zig").Guid.initString("9C735BE2-57A5-11D1-9BDB-00C04FB683FA");
pub const IID_IEnumCERTVIEWCOLUMN = &IID_IEnumCERTVIEWCOLUMN_Value;
pub const IEnumCERTVIEWCOLUMN = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Next: fn(
            self: *const IEnumCERTVIEWCOLUMN,
            pIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: fn(
            self: *const IEnumCERTVIEWCOLUMN,
            pstrOut: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayName: fn(
            self: *const IEnumCERTVIEWCOLUMN,
            pstrOut: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: fn(
            self: *const IEnumCERTVIEWCOLUMN,
            pType: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsIndexed: fn(
            self: *const IEnumCERTVIEWCOLUMN,
            pIndexed: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxLength: fn(
            self: *const IEnumCERTVIEWCOLUMN,
            pMaxLength: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const IEnumCERTVIEWCOLUMN,
            Flags: i32,
            pvarValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumCERTVIEWCOLUMN,
            celt: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumCERTVIEWCOLUMN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumCERTVIEWCOLUMN,
            ppenum: **IEnumCERTVIEWCOLUMN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWCOLUMN_Next(self: *const T, pIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWCOLUMN.VTable, self.vtable).Next(@ptrCast(*const IEnumCERTVIEWCOLUMN, self), pIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWCOLUMN_GetName(self: *const T, pstrOut: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWCOLUMN.VTable, self.vtable).GetName(@ptrCast(*const IEnumCERTVIEWCOLUMN, self), pstrOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWCOLUMN_GetDisplayName(self: *const T, pstrOut: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWCOLUMN.VTable, self.vtable).GetDisplayName(@ptrCast(*const IEnumCERTVIEWCOLUMN, self), pstrOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWCOLUMN_GetType(self: *const T, pType: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWCOLUMN.VTable, self.vtable).GetType(@ptrCast(*const IEnumCERTVIEWCOLUMN, self), pType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWCOLUMN_IsIndexed(self: *const T, pIndexed: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWCOLUMN.VTable, self.vtable).IsIndexed(@ptrCast(*const IEnumCERTVIEWCOLUMN, self), pIndexed);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWCOLUMN_GetMaxLength(self: *const T, pMaxLength: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWCOLUMN.VTable, self.vtable).GetMaxLength(@ptrCast(*const IEnumCERTVIEWCOLUMN, self), pMaxLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWCOLUMN_GetValue(self: *const T, Flags: i32, pvarValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWCOLUMN.VTable, self.vtable).GetValue(@ptrCast(*const IEnumCERTVIEWCOLUMN, self), Flags, pvarValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWCOLUMN_Skip(self: *const T, celt: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWCOLUMN.VTable, self.vtable).Skip(@ptrCast(*const IEnumCERTVIEWCOLUMN, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWCOLUMN_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWCOLUMN.VTable, self.vtable).Reset(@ptrCast(*const IEnumCERTVIEWCOLUMN, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWCOLUMN_Clone(self: *const T, ppenum: **IEnumCERTVIEWCOLUMN) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWCOLUMN.VTable, self.vtable).Clone(@ptrCast(*const IEnumCERTVIEWCOLUMN, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumCERTVIEWATTRIBUTE_Value = @import("../zig.zig").Guid.initString("E77DB656-7653-11D1-9BDE-00C04FB683FA");
pub const IID_IEnumCERTVIEWATTRIBUTE = &IID_IEnumCERTVIEWATTRIBUTE_Value;
pub const IEnumCERTVIEWATTRIBUTE = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Next: fn(
            self: *const IEnumCERTVIEWATTRIBUTE,
            pIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: fn(
            self: *const IEnumCERTVIEWATTRIBUTE,
            pstrOut: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const IEnumCERTVIEWATTRIBUTE,
            pstrOut: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumCERTVIEWATTRIBUTE,
            celt: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumCERTVIEWATTRIBUTE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumCERTVIEWATTRIBUTE,
            ppenum: **IEnumCERTVIEWATTRIBUTE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWATTRIBUTE_Next(self: *const T, pIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWATTRIBUTE.VTable, self.vtable).Next(@ptrCast(*const IEnumCERTVIEWATTRIBUTE, self), pIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWATTRIBUTE_GetName(self: *const T, pstrOut: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWATTRIBUTE.VTable, self.vtable).GetName(@ptrCast(*const IEnumCERTVIEWATTRIBUTE, self), pstrOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWATTRIBUTE_GetValue(self: *const T, pstrOut: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWATTRIBUTE.VTable, self.vtable).GetValue(@ptrCast(*const IEnumCERTVIEWATTRIBUTE, self), pstrOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWATTRIBUTE_Skip(self: *const T, celt: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWATTRIBUTE.VTable, self.vtable).Skip(@ptrCast(*const IEnumCERTVIEWATTRIBUTE, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWATTRIBUTE_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWATTRIBUTE.VTable, self.vtable).Reset(@ptrCast(*const IEnumCERTVIEWATTRIBUTE, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWATTRIBUTE_Clone(self: *const T, ppenum: **IEnumCERTVIEWATTRIBUTE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWATTRIBUTE.VTable, self.vtable).Clone(@ptrCast(*const IEnumCERTVIEWATTRIBUTE, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumCERTVIEWEXTENSION_Value = @import("../zig.zig").Guid.initString("E7DD1466-7653-11D1-9BDE-00C04FB683FA");
pub const IID_IEnumCERTVIEWEXTENSION = &IID_IEnumCERTVIEWEXTENSION_Value;
pub const IEnumCERTVIEWEXTENSION = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Next: fn(
            self: *const IEnumCERTVIEWEXTENSION,
            pIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: fn(
            self: *const IEnumCERTVIEWEXTENSION,
            pstrOut: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: fn(
            self: *const IEnumCERTVIEWEXTENSION,
            pFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const IEnumCERTVIEWEXTENSION,
            Type: i32,
            Flags: i32,
            pvarValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumCERTVIEWEXTENSION,
            celt: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumCERTVIEWEXTENSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumCERTVIEWEXTENSION,
            ppenum: **IEnumCERTVIEWEXTENSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWEXTENSION_Next(self: *const T, pIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWEXTENSION.VTable, self.vtable).Next(@ptrCast(*const IEnumCERTVIEWEXTENSION, self), pIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWEXTENSION_GetName(self: *const T, pstrOut: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWEXTENSION.VTable, self.vtable).GetName(@ptrCast(*const IEnumCERTVIEWEXTENSION, self), pstrOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWEXTENSION_GetFlags(self: *const T, pFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWEXTENSION.VTable, self.vtable).GetFlags(@ptrCast(*const IEnumCERTVIEWEXTENSION, self), pFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWEXTENSION_GetValue(self: *const T, Type: i32, Flags: i32, pvarValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWEXTENSION.VTable, self.vtable).GetValue(@ptrCast(*const IEnumCERTVIEWEXTENSION, self), Type, Flags, pvarValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWEXTENSION_Skip(self: *const T, celt: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWEXTENSION.VTable, self.vtable).Skip(@ptrCast(*const IEnumCERTVIEWEXTENSION, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWEXTENSION_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWEXTENSION.VTable, self.vtable).Reset(@ptrCast(*const IEnumCERTVIEWEXTENSION, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWEXTENSION_Clone(self: *const T, ppenum: **IEnumCERTVIEWEXTENSION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWEXTENSION.VTable, self.vtable).Clone(@ptrCast(*const IEnumCERTVIEWEXTENSION, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumCERTVIEWROW_Value = @import("../zig.zig").Guid.initString("D1157F4C-5AF2-11D1-9BDC-00C04FB683FA");
pub const IID_IEnumCERTVIEWROW = &IID_IEnumCERTVIEWROW_Value;
pub const IEnumCERTVIEWROW = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Next: fn(
            self: *const IEnumCERTVIEWROW,
            pIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCertViewColumn: fn(
            self: *const IEnumCERTVIEWROW,
            ppenum: **IEnumCERTVIEWCOLUMN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCertViewAttribute: fn(
            self: *const IEnumCERTVIEWROW,
            Flags: i32,
            ppenum: **IEnumCERTVIEWATTRIBUTE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCertViewExtension: fn(
            self: *const IEnumCERTVIEWROW,
            Flags: i32,
            ppenum: **IEnumCERTVIEWEXTENSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumCERTVIEWROW,
            celt: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumCERTVIEWROW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumCERTVIEWROW,
            ppenum: **IEnumCERTVIEWROW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxIndex: fn(
            self: *const IEnumCERTVIEWROW,
            pIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWROW_Next(self: *const T, pIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWROW.VTable, self.vtable).Next(@ptrCast(*const IEnumCERTVIEWROW, self), pIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWROW_EnumCertViewColumn(self: *const T, ppenum: **IEnumCERTVIEWCOLUMN) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWROW.VTable, self.vtable).EnumCertViewColumn(@ptrCast(*const IEnumCERTVIEWROW, self), ppenum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWROW_EnumCertViewAttribute(self: *const T, Flags: i32, ppenum: **IEnumCERTVIEWATTRIBUTE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWROW.VTable, self.vtable).EnumCertViewAttribute(@ptrCast(*const IEnumCERTVIEWROW, self), Flags, ppenum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWROW_EnumCertViewExtension(self: *const T, Flags: i32, ppenum: **IEnumCERTVIEWEXTENSION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWROW.VTable, self.vtable).EnumCertViewExtension(@ptrCast(*const IEnumCERTVIEWROW, self), Flags, ppenum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWROW_Skip(self: *const T, celt: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWROW.VTable, self.vtable).Skip(@ptrCast(*const IEnumCERTVIEWROW, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWROW_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWROW.VTable, self.vtable).Reset(@ptrCast(*const IEnumCERTVIEWROW, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWROW_Clone(self: *const T, ppenum: **IEnumCERTVIEWROW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWROW.VTable, self.vtable).Clone(@ptrCast(*const IEnumCERTVIEWROW, self), ppenum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumCERTVIEWROW_GetMaxIndex(self: *const T, pIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumCERTVIEWROW.VTable, self.vtable).GetMaxIndex(@ptrCast(*const IEnumCERTVIEWROW, self), pIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertView_Value = @import("../zig.zig").Guid.initString("C3FAC344-1E84-11D1-9BD6-00C04FB683FA");
pub const IID_ICertView = &IID_ICertView_Value;
pub const ICertView = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        OpenConnection: fn(
            self: *const ICertView,
            strConfig: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCertViewColumn: fn(
            self: *const ICertView,
            fResultColumn: i32,
            ppenum: **IEnumCERTVIEWCOLUMN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnCount: fn(
            self: *const ICertView,
            fResultColumn: i32,
            pcColumn: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnIndex: fn(
            self: *const ICertView,
            fResultColumn: i32,
            strColumnName: BSTR,
            pColumnIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetResultColumnCount: fn(
            self: *const ICertView,
            cResultColumn: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetResultColumn: fn(
            self: *const ICertView,
            ColumnIndex: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRestriction: fn(
            self: *const ICertView,
            ColumnIndex: i32,
            SeekOperator: i32,
            SortOrder: i32,
            pvarValue: *const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenView: fn(
            self: *const ICertView,
            ppenum: **IEnumCERTVIEWROW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertView_OpenConnection(self: *const T, strConfig: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertView.VTable, self.vtable).OpenConnection(@ptrCast(*const ICertView, self), strConfig);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertView_EnumCertViewColumn(self: *const T, fResultColumn: i32, ppenum: **IEnumCERTVIEWCOLUMN) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertView.VTable, self.vtable).EnumCertViewColumn(@ptrCast(*const ICertView, self), fResultColumn, ppenum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertView_GetColumnCount(self: *const T, fResultColumn: i32, pcColumn: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertView.VTable, self.vtable).GetColumnCount(@ptrCast(*const ICertView, self), fResultColumn, pcColumn);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertView_GetColumnIndex(self: *const T, fResultColumn: i32, strColumnName: BSTR, pColumnIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertView.VTable, self.vtable).GetColumnIndex(@ptrCast(*const ICertView, self), fResultColumn, strColumnName, pColumnIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertView_SetResultColumnCount(self: *const T, cResultColumn: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertView.VTable, self.vtable).SetResultColumnCount(@ptrCast(*const ICertView, self), cResultColumn);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertView_SetResultColumn(self: *const T, ColumnIndex: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertView.VTable, self.vtable).SetResultColumn(@ptrCast(*const ICertView, self), ColumnIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertView_SetRestriction(self: *const T, ColumnIndex: i32, SeekOperator: i32, SortOrder: i32, pvarValue: *const VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertView.VTable, self.vtable).SetRestriction(@ptrCast(*const ICertView, self), ColumnIndex, SeekOperator, SortOrder, pvarValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertView_OpenView(self: *const T, ppenum: **IEnumCERTVIEWROW) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertView.VTable, self.vtable).OpenView(@ptrCast(*const ICertView, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertView2_Value = @import("../zig.zig").Guid.initString("D594B282-8851-4B61-9C66-3EDADF848863");
pub const IID_ICertView2 = &IID_ICertView2_Value;
pub const ICertView2 = extern struct {
    pub const VTable = extern struct {
        base: ICertView.VTable,
        SetTable: fn(
            self: *const ICertView2,
            Table: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertView.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertView2_SetTable(self: *const T, Table: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertView2.VTable, self.vtable).SetTable(@ptrCast(*const ICertView2, self), Table);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertAdmin_Value = @import("../zig.zig").Guid.initString("34DF6950-7FB6-11D0-8817-00A0C903B83C");
pub const IID_ICertAdmin = &IID_ICertAdmin_Value;
pub const ICertAdmin = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        IsValidCertificate: fn(
            self: *const ICertAdmin,
            strConfig: BSTR,
            strSerialNumber: BSTR,
            pDisposition: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRevocationReason: fn(
            self: *const ICertAdmin,
            pReason: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RevokeCertificate: fn(
            self: *const ICertAdmin,
            strConfig: BSTR,
            strSerialNumber: BSTR,
            Reason: i32,
            Date: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRequestAttributes: fn(
            self: *const ICertAdmin,
            strConfig: BSTR,
            RequestId: i32,
            strAttributes: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCertificateExtension: fn(
            self: *const ICertAdmin,
            strConfig: BSTR,
            RequestId: i32,
            strExtensionName: BSTR,
            Type: i32,
            Flags: i32,
            pvarValue: *const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DenyRequest: fn(
            self: *const ICertAdmin,
            strConfig: BSTR,
            RequestId: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResubmitRequest: fn(
            self: *const ICertAdmin,
            strConfig: BSTR,
            RequestId: i32,
            pDisposition: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PublishCRL: fn(
            self: *const ICertAdmin,
            strConfig: BSTR,
            Date: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCRL: fn(
            self: *const ICertAdmin,
            strConfig: BSTR,
            Flags: i32,
            pstrCRL: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportCertificate: fn(
            self: *const ICertAdmin,
            strConfig: BSTR,
            strCertificate: BSTR,
            Flags: i32,
            pRequestId: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin_IsValidCertificate(self: *const T, strConfig: BSTR, strSerialNumber: BSTR, pDisposition: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin.VTable, self.vtable).IsValidCertificate(@ptrCast(*const ICertAdmin, self), strConfig, strSerialNumber, pDisposition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin_GetRevocationReason(self: *const T, pReason: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin.VTable, self.vtable).GetRevocationReason(@ptrCast(*const ICertAdmin, self), pReason);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin_RevokeCertificate(self: *const T, strConfig: BSTR, strSerialNumber: BSTR, Reason: i32, Date: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin.VTable, self.vtable).RevokeCertificate(@ptrCast(*const ICertAdmin, self), strConfig, strSerialNumber, Reason, Date);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin_SetRequestAttributes(self: *const T, strConfig: BSTR, RequestId: i32, strAttributes: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin.VTable, self.vtable).SetRequestAttributes(@ptrCast(*const ICertAdmin, self), strConfig, RequestId, strAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin_SetCertificateExtension(self: *const T, strConfig: BSTR, RequestId: i32, strExtensionName: BSTR, Type: i32, Flags: i32, pvarValue: *const VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin.VTable, self.vtable).SetCertificateExtension(@ptrCast(*const ICertAdmin, self), strConfig, RequestId, strExtensionName, Type, Flags, pvarValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin_DenyRequest(self: *const T, strConfig: BSTR, RequestId: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin.VTable, self.vtable).DenyRequest(@ptrCast(*const ICertAdmin, self), strConfig, RequestId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin_ResubmitRequest(self: *const T, strConfig: BSTR, RequestId: i32, pDisposition: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin.VTable, self.vtable).ResubmitRequest(@ptrCast(*const ICertAdmin, self), strConfig, RequestId, pDisposition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin_PublishCRL(self: *const T, strConfig: BSTR, Date: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin.VTable, self.vtable).PublishCRL(@ptrCast(*const ICertAdmin, self), strConfig, Date);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin_GetCRL(self: *const T, strConfig: BSTR, Flags: i32, pstrCRL: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin.VTable, self.vtable).GetCRL(@ptrCast(*const ICertAdmin, self), strConfig, Flags, pstrCRL);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin_ImportCertificate(self: *const T, strConfig: BSTR, strCertificate: BSTR, Flags: i32, pRequestId: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin.VTable, self.vtable).ImportCertificate(@ptrCast(*const ICertAdmin, self), strConfig, strCertificate, Flags, pRequestId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertAdmin2_Value = @import("../zig.zig").Guid.initString("F7C3AC41-B8CE-4FB4-AA58-3D1DC0E36B39");
pub const IID_ICertAdmin2 = &IID_ICertAdmin2_Value;
pub const ICertAdmin2 = extern struct {
    pub const VTable = extern struct {
        base: ICertAdmin.VTable,
        PublishCRLs: fn(
            self: *const ICertAdmin2,
            strConfig: BSTR,
            Date: f64,
            CRLFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAProperty: fn(
            self: *const ICertAdmin2,
            strConfig: BSTR,
            PropId: i32,
            PropIndex: i32,
            PropType: i32,
            Flags: i32,
            pvarPropertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCAProperty: fn(
            self: *const ICertAdmin2,
            strConfig: BSTR,
            PropId: i32,
            PropIndex: i32,
            PropType: i32,
            pvarPropertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAPropertyFlags: fn(
            self: *const ICertAdmin2,
            strConfig: BSTR,
            PropId: i32,
            pPropFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAPropertyDisplayName: fn(
            self: *const ICertAdmin2,
            strConfig: BSTR,
            PropId: i32,
            pstrDisplayName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetArchivedKey: fn(
            self: *const ICertAdmin2,
            strConfig: BSTR,
            RequestId: i32,
            Flags: i32,
            pstrArchivedKey: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConfigEntry: fn(
            self: *const ICertAdmin2,
            strConfig: BSTR,
            strNodePath: BSTR,
            strEntryName: BSTR,
            pvarEntry: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConfigEntry: fn(
            self: *const ICertAdmin2,
            strConfig: BSTR,
            strNodePath: BSTR,
            strEntryName: BSTR,
            pvarEntry: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportKey: fn(
            self: *const ICertAdmin2,
            strConfig: BSTR,
            RequestId: i32,
            strCertHash: BSTR,
            Flags: i32,
            strKey: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMyRoles: fn(
            self: *const ICertAdmin2,
            strConfig: BSTR,
            pRoles: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRow: fn(
            self: *const ICertAdmin2,
            strConfig: BSTR,
            Flags: i32,
            Date: f64,
            Table: i32,
            RowId: i32,
            pcDeleted: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertAdmin.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin2_PublishCRLs(self: *const T, strConfig: BSTR, Date: f64, CRLFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin2.VTable, self.vtable).PublishCRLs(@ptrCast(*const ICertAdmin2, self), strConfig, Date, CRLFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin2_GetCAProperty(self: *const T, strConfig: BSTR, PropId: i32, PropIndex: i32, PropType: i32, Flags: i32, pvarPropertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin2.VTable, self.vtable).GetCAProperty(@ptrCast(*const ICertAdmin2, self), strConfig, PropId, PropIndex, PropType, Flags, pvarPropertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin2_SetCAProperty(self: *const T, strConfig: BSTR, PropId: i32, PropIndex: i32, PropType: i32, pvarPropertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin2.VTable, self.vtable).SetCAProperty(@ptrCast(*const ICertAdmin2, self), strConfig, PropId, PropIndex, PropType, pvarPropertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin2_GetCAPropertyFlags(self: *const T, strConfig: BSTR, PropId: i32, pPropFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin2.VTable, self.vtable).GetCAPropertyFlags(@ptrCast(*const ICertAdmin2, self), strConfig, PropId, pPropFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin2_GetCAPropertyDisplayName(self: *const T, strConfig: BSTR, PropId: i32, pstrDisplayName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin2.VTable, self.vtable).GetCAPropertyDisplayName(@ptrCast(*const ICertAdmin2, self), strConfig, PropId, pstrDisplayName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin2_GetArchivedKey(self: *const T, strConfig: BSTR, RequestId: i32, Flags: i32, pstrArchivedKey: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin2.VTable, self.vtable).GetArchivedKey(@ptrCast(*const ICertAdmin2, self), strConfig, RequestId, Flags, pstrArchivedKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin2_GetConfigEntry(self: *const T, strConfig: BSTR, strNodePath: BSTR, strEntryName: BSTR, pvarEntry: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin2.VTable, self.vtable).GetConfigEntry(@ptrCast(*const ICertAdmin2, self), strConfig, strNodePath, strEntryName, pvarEntry);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin2_SetConfigEntry(self: *const T, strConfig: BSTR, strNodePath: BSTR, strEntryName: BSTR, pvarEntry: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin2.VTable, self.vtable).SetConfigEntry(@ptrCast(*const ICertAdmin2, self), strConfig, strNodePath, strEntryName, pvarEntry);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin2_ImportKey(self: *const T, strConfig: BSTR, RequestId: i32, strCertHash: BSTR, Flags: i32, strKey: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin2.VTable, self.vtable).ImportKey(@ptrCast(*const ICertAdmin2, self), strConfig, RequestId, strCertHash, Flags, strKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin2_GetMyRoles(self: *const T, strConfig: BSTR, pRoles: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin2.VTable, self.vtable).GetMyRoles(@ptrCast(*const ICertAdmin2, self), strConfig, pRoles);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertAdmin2_DeleteRow(self: *const T, strConfig: BSTR, Flags: i32, Date: f64, Table: i32, RowId: i32, pcDeleted: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertAdmin2.VTable, self.vtable).DeleteRow(@ptrCast(*const ICertAdmin2, self), strConfig, Flags, Date, Table, RowId, pcDeleted);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOCSPProperty_Value = @import("../zig.zig").Guid.initString("66FB7839-5F04-4C25-AD18-9FF1A8376EE0");
pub const IID_IOCSPProperty = &IID_IOCSPProperty_Value;
pub const IOCSPProperty = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Name: fn(
            self: *const IOCSPProperty,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Value: fn(
            self: *const IOCSPProperty,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Value: fn(
            self: *const IOCSPProperty,
            newVal: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Modified: fn(
            self: *const IOCSPProperty,
            pVal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPProperty_get_Name(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPProperty.VTable, self.vtable).get_Name(@ptrCast(*const IOCSPProperty, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPProperty_get_Value(self: *const T, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPProperty.VTable, self.vtable).get_Value(@ptrCast(*const IOCSPProperty, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPProperty_put_Value(self: *const T, newVal: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPProperty.VTable, self.vtable).put_Value(@ptrCast(*const IOCSPProperty, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPProperty_get_Modified(self: *const T, pVal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPProperty.VTable, self.vtable).get_Modified(@ptrCast(*const IOCSPProperty, self), pVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOCSPPropertyCollection_Value = @import("../zig.zig").Guid.initString("2597C18D-54E6-4B74-9FA9-A6BFDA99CBBE");
pub const IID_IOCSPPropertyCollection = &IID_IOCSPPropertyCollection_Value;
pub const IOCSPPropertyCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get__NewEnum: fn(
            self: *const IOCSPPropertyCollection,
            ppVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const IOCSPPropertyCollection,
            Index: i32,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IOCSPPropertyCollection,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByName: fn(
            self: *const IOCSPPropertyCollection,
            bstrPropName: BSTR,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateProperty: fn(
            self: *const IOCSPPropertyCollection,
            bstrPropName: BSTR,
            pVarPropValue: *const VARIANT,
            ppVal: **IOCSPProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteProperty: fn(
            self: *const IOCSPPropertyCollection,
            bstrPropName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromProperties: fn(
            self: *const IOCSPPropertyCollection,
            pVarProperties: *const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllProperties: fn(
            self: *const IOCSPPropertyCollection,
            pVarProperties: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPPropertyCollection_get__NewEnum(self: *const T, ppVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPPropertyCollection.VTable, self.vtable).get__NewEnum(@ptrCast(*const IOCSPPropertyCollection, self), ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPPropertyCollection_get_Item(self: *const T, Index: i32, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPPropertyCollection.VTable, self.vtable).get_Item(@ptrCast(*const IOCSPPropertyCollection, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPPropertyCollection_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPPropertyCollection.VTable, self.vtable).get_Count(@ptrCast(*const IOCSPPropertyCollection, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPPropertyCollection_get_ItemByName(self: *const T, bstrPropName: BSTR, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPPropertyCollection.VTable, self.vtable).get_ItemByName(@ptrCast(*const IOCSPPropertyCollection, self), bstrPropName, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPPropertyCollection_CreateProperty(self: *const T, bstrPropName: BSTR, pVarPropValue: *const VARIANT, ppVal: **IOCSPProperty) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPPropertyCollection.VTable, self.vtable).CreateProperty(@ptrCast(*const IOCSPPropertyCollection, self), bstrPropName, pVarPropValue, ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPPropertyCollection_DeleteProperty(self: *const T, bstrPropName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPPropertyCollection.VTable, self.vtable).DeleteProperty(@ptrCast(*const IOCSPPropertyCollection, self), bstrPropName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPPropertyCollection_InitializeFromProperties(self: *const T, pVarProperties: *const VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPPropertyCollection.VTable, self.vtable).InitializeFromProperties(@ptrCast(*const IOCSPPropertyCollection, self), pVarProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPPropertyCollection_GetAllProperties(self: *const T, pVarProperties: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPPropertyCollection.VTable, self.vtable).GetAllProperties(@ptrCast(*const IOCSPPropertyCollection, self), pVarProperties);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOCSPCAConfiguration_Value = @import("../zig.zig").Guid.initString("AEC92B40-3D46-433F-87D1-B84D5C1E790D");
pub const IID_IOCSPCAConfiguration = &IID_IOCSPCAConfiguration_Value;
pub const IOCSPCAConfiguration = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Identifier: fn(
            self: *const IOCSPCAConfiguration,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CACertificate: fn(
            self: *const IOCSPCAConfiguration,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_HashAlgorithm: fn(
            self: *const IOCSPCAConfiguration,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_HashAlgorithm: fn(
            self: *const IOCSPCAConfiguration,
            newVal: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SigningFlags: fn(
            self: *const IOCSPCAConfiguration,
            pVal: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SigningFlags: fn(
            self: *const IOCSPCAConfiguration,
            newVal: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SigningCertificate: fn(
            self: *const IOCSPCAConfiguration,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SigningCertificate: fn(
            self: *const IOCSPCAConfiguration,
            newVal: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ReminderDuration: fn(
            self: *const IOCSPCAConfiguration,
            pVal: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ReminderDuration: fn(
            self: *const IOCSPCAConfiguration,
            newVal: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ErrorCode: fn(
            self: *const IOCSPCAConfiguration,
            pVal: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CSPName: fn(
            self: *const IOCSPCAConfiguration,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_KeySpec: fn(
            self: *const IOCSPCAConfiguration,
            pVal: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ProviderCLSID: fn(
            self: *const IOCSPCAConfiguration,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ProviderCLSID: fn(
            self: *const IOCSPCAConfiguration,
            newVal: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ProviderProperties: fn(
            self: *const IOCSPCAConfiguration,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ProviderProperties: fn(
            self: *const IOCSPCAConfiguration,
            newVal: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Modified: fn(
            self: *const IOCSPCAConfiguration,
            pVal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_LocalRevocationInformation: fn(
            self: *const IOCSPCAConfiguration,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_LocalRevocationInformation: fn(
            self: *const IOCSPCAConfiguration,
            newVal: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SigningCertificateTemplate: fn(
            self: *const IOCSPCAConfiguration,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SigningCertificateTemplate: fn(
            self: *const IOCSPCAConfiguration,
            newVal: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CAConfig: fn(
            self: *const IOCSPCAConfiguration,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CAConfig: fn(
            self: *const IOCSPCAConfiguration,
            newVal: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_get_Identifier(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).get_Identifier(@ptrCast(*const IOCSPCAConfiguration, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_get_CACertificate(self: *const T, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).get_CACertificate(@ptrCast(*const IOCSPCAConfiguration, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_get_HashAlgorithm(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).get_HashAlgorithm(@ptrCast(*const IOCSPCAConfiguration, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_put_HashAlgorithm(self: *const T, newVal: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).put_HashAlgorithm(@ptrCast(*const IOCSPCAConfiguration, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_get_SigningFlags(self: *const T, pVal: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).get_SigningFlags(@ptrCast(*const IOCSPCAConfiguration, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_put_SigningFlags(self: *const T, newVal: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).put_SigningFlags(@ptrCast(*const IOCSPCAConfiguration, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_get_SigningCertificate(self: *const T, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).get_SigningCertificate(@ptrCast(*const IOCSPCAConfiguration, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_put_SigningCertificate(self: *const T, newVal: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).put_SigningCertificate(@ptrCast(*const IOCSPCAConfiguration, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_get_ReminderDuration(self: *const T, pVal: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).get_ReminderDuration(@ptrCast(*const IOCSPCAConfiguration, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_put_ReminderDuration(self: *const T, newVal: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).put_ReminderDuration(@ptrCast(*const IOCSPCAConfiguration, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_get_ErrorCode(self: *const T, pVal: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).get_ErrorCode(@ptrCast(*const IOCSPCAConfiguration, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_get_CSPName(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).get_CSPName(@ptrCast(*const IOCSPCAConfiguration, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_get_KeySpec(self: *const T, pVal: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).get_KeySpec(@ptrCast(*const IOCSPCAConfiguration, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_get_ProviderCLSID(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).get_ProviderCLSID(@ptrCast(*const IOCSPCAConfiguration, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_put_ProviderCLSID(self: *const T, newVal: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).put_ProviderCLSID(@ptrCast(*const IOCSPCAConfiguration, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_get_ProviderProperties(self: *const T, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).get_ProviderProperties(@ptrCast(*const IOCSPCAConfiguration, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_put_ProviderProperties(self: *const T, newVal: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).put_ProviderProperties(@ptrCast(*const IOCSPCAConfiguration, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_get_Modified(self: *const T, pVal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).get_Modified(@ptrCast(*const IOCSPCAConfiguration, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_get_LocalRevocationInformation(self: *const T, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).get_LocalRevocationInformation(@ptrCast(*const IOCSPCAConfiguration, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_put_LocalRevocationInformation(self: *const T, newVal: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).put_LocalRevocationInformation(@ptrCast(*const IOCSPCAConfiguration, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_get_SigningCertificateTemplate(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).get_SigningCertificateTemplate(@ptrCast(*const IOCSPCAConfiguration, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_put_SigningCertificateTemplate(self: *const T, newVal: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).put_SigningCertificateTemplate(@ptrCast(*const IOCSPCAConfiguration, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_get_CAConfig(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).get_CAConfig(@ptrCast(*const IOCSPCAConfiguration, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfiguration_put_CAConfig(self: *const T, newVal: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfiguration.VTable, self.vtable).put_CAConfig(@ptrCast(*const IOCSPCAConfiguration, self), newVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOCSPCAConfigurationCollection_Value = @import("../zig.zig").Guid.initString("2BEBEA0B-5ECE-4F28-A91C-86B4BB20F0D3");
pub const IID_IOCSPCAConfigurationCollection = &IID_IOCSPCAConfigurationCollection_Value;
pub const IOCSPCAConfigurationCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get__NewEnum: fn(
            self: *const IOCSPCAConfigurationCollection,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const IOCSPCAConfigurationCollection,
            Index: i32,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IOCSPCAConfigurationCollection,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ItemByName: fn(
            self: *const IOCSPCAConfigurationCollection,
            bstrIdentifier: BSTR,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCAConfiguration: fn(
            self: *const IOCSPCAConfigurationCollection,
            bstrIdentifier: BSTR,
            varCACert: VARIANT,
            ppVal: **IOCSPCAConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteCAConfiguration: fn(
            self: *const IOCSPCAConfigurationCollection,
            bstrIdentifier: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfigurationCollection_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfigurationCollection.VTable, self.vtable).get__NewEnum(@ptrCast(*const IOCSPCAConfigurationCollection, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfigurationCollection_get_Item(self: *const T, Index: i32, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfigurationCollection.VTable, self.vtable).get_Item(@ptrCast(*const IOCSPCAConfigurationCollection, self), Index, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfigurationCollection_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfigurationCollection.VTable, self.vtable).get_Count(@ptrCast(*const IOCSPCAConfigurationCollection, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfigurationCollection_get_ItemByName(self: *const T, bstrIdentifier: BSTR, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfigurationCollection.VTable, self.vtable).get_ItemByName(@ptrCast(*const IOCSPCAConfigurationCollection, self), bstrIdentifier, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfigurationCollection_CreateCAConfiguration(self: *const T, bstrIdentifier: BSTR, varCACert: VARIANT, ppVal: **IOCSPCAConfiguration) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfigurationCollection.VTable, self.vtable).CreateCAConfiguration(@ptrCast(*const IOCSPCAConfigurationCollection, self), bstrIdentifier, varCACert, ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPCAConfigurationCollection_DeleteCAConfiguration(self: *const T, bstrIdentifier: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPCAConfigurationCollection.VTable, self.vtable).DeleteCAConfiguration(@ptrCast(*const IOCSPCAConfigurationCollection, self), bstrIdentifier);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOCSPAdmin_Value = @import("../zig.zig").Guid.initString("322E830D-67DB-4FE9-9577-4596D9F09294");
pub const IID_IOCSPAdmin = &IID_IOCSPAdmin_Value;
pub const IOCSPAdmin = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_OCSPServiceProperties: fn(
            self: *const IOCSPAdmin,
            ppVal: **IOCSPPropertyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_OCSPCAConfigurationCollection: fn(
            self: *const IOCSPAdmin,
            pVal: **IOCSPCAConfigurationCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConfiguration: fn(
            self: *const IOCSPAdmin,
            bstrServerName: BSTR,
            bForce: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConfiguration: fn(
            self: *const IOCSPAdmin,
            bstrServerName: BSTR,
            bForce: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMyRoles: fn(
            self: *const IOCSPAdmin,
            bstrServerName: BSTR,
            pRoles: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Ping: fn(
            self: *const IOCSPAdmin,
            bstrServerName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecurity: fn(
            self: *const IOCSPAdmin,
            bstrServerName: BSTR,
            bstrVal: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecurity: fn(
            self: *const IOCSPAdmin,
            bstrServerName: BSTR,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSigningCertificates: fn(
            self: *const IOCSPAdmin,
            bstrServerName: BSTR,
            pCACertVar: *const VARIANT,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHashAlgorithms: fn(
            self: *const IOCSPAdmin,
            bstrServerName: BSTR,
            bstrCAId: BSTR,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPAdmin_get_OCSPServiceProperties(self: *const T, ppVal: **IOCSPPropertyCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPAdmin.VTable, self.vtable).get_OCSPServiceProperties(@ptrCast(*const IOCSPAdmin, self), ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPAdmin_get_OCSPCAConfigurationCollection(self: *const T, pVal: **IOCSPCAConfigurationCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPAdmin.VTable, self.vtable).get_OCSPCAConfigurationCollection(@ptrCast(*const IOCSPAdmin, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPAdmin_GetConfiguration(self: *const T, bstrServerName: BSTR, bForce: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPAdmin.VTable, self.vtable).GetConfiguration(@ptrCast(*const IOCSPAdmin, self), bstrServerName, bForce);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPAdmin_SetConfiguration(self: *const T, bstrServerName: BSTR, bForce: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPAdmin.VTable, self.vtable).SetConfiguration(@ptrCast(*const IOCSPAdmin, self), bstrServerName, bForce);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPAdmin_GetMyRoles(self: *const T, bstrServerName: BSTR, pRoles: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPAdmin.VTable, self.vtable).GetMyRoles(@ptrCast(*const IOCSPAdmin, self), bstrServerName, pRoles);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPAdmin_Ping(self: *const T, bstrServerName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPAdmin.VTable, self.vtable).Ping(@ptrCast(*const IOCSPAdmin, self), bstrServerName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPAdmin_SetSecurity(self: *const T, bstrServerName: BSTR, bstrVal: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPAdmin.VTable, self.vtable).SetSecurity(@ptrCast(*const IOCSPAdmin, self), bstrServerName, bstrVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPAdmin_GetSecurity(self: *const T, bstrServerName: BSTR, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPAdmin.VTable, self.vtable).GetSecurity(@ptrCast(*const IOCSPAdmin, self), bstrServerName, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPAdmin_GetSigningCertificates(self: *const T, bstrServerName: BSTR, pCACertVar: *const VARIANT, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPAdmin.VTable, self.vtable).GetSigningCertificates(@ptrCast(*const IOCSPAdmin, self), bstrServerName, pCACertVar, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOCSPAdmin_GetHashAlgorithms(self: *const T, bstrServerName: BSTR, bstrCAId: BSTR, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOCSPAdmin.VTable, self.vtable).GetHashAlgorithms(@ptrCast(*const IOCSPAdmin, self), bstrServerName, bstrCAId, pVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const OCSPSigningFlag = extern enum(i32) {
    OCSP_SF_SILENT = 1,
    OCSP_SF_USE_CACERT = 2,
    OCSP_SF_ALLOW_SIGNINGCERT_AUTORENEWAL = 4,
    OCSP_SF_FORCE_SIGNINGCERT_ISSUER_ISCA = 8,
    OCSP_SF_AUTODISCOVER_SIGNINGCERT = 16,
    OCSP_SF_MANUAL_ASSIGN_SIGNINGCERT = 32,
    OCSP_SF_RESPONDER_ID_KEYHASH = 64,
    OCSP_SF_RESPONDER_ID_NAME = 128,
    OCSP_SF_ALLOW_NONCE_EXTENSION = 256,
    OCSP_SF_ALLOW_SIGNINGCERT_AUTOENROLLMENT = 512,
};
pub const OCSP_SF_SILENT = OCSPSigningFlag.OCSP_SF_SILENT;
pub const OCSP_SF_USE_CACERT = OCSPSigningFlag.OCSP_SF_USE_CACERT;
pub const OCSP_SF_ALLOW_SIGNINGCERT_AUTORENEWAL = OCSPSigningFlag.OCSP_SF_ALLOW_SIGNINGCERT_AUTORENEWAL;
pub const OCSP_SF_FORCE_SIGNINGCERT_ISSUER_ISCA = OCSPSigningFlag.OCSP_SF_FORCE_SIGNINGCERT_ISSUER_ISCA;
pub const OCSP_SF_AUTODISCOVER_SIGNINGCERT = OCSPSigningFlag.OCSP_SF_AUTODISCOVER_SIGNINGCERT;
pub const OCSP_SF_MANUAL_ASSIGN_SIGNINGCERT = OCSPSigningFlag.OCSP_SF_MANUAL_ASSIGN_SIGNINGCERT;
pub const OCSP_SF_RESPONDER_ID_KEYHASH = OCSPSigningFlag.OCSP_SF_RESPONDER_ID_KEYHASH;
pub const OCSP_SF_RESPONDER_ID_NAME = OCSPSigningFlag.OCSP_SF_RESPONDER_ID_NAME;
pub const OCSP_SF_ALLOW_NONCE_EXTENSION = OCSPSigningFlag.OCSP_SF_ALLOW_NONCE_EXTENSION;
pub const OCSP_SF_ALLOW_SIGNINGCERT_AUTOENROLLMENT = OCSPSigningFlag.OCSP_SF_ALLOW_SIGNINGCERT_AUTOENROLLMENT;

pub const OCSPRequestFlag = extern enum(i32) {
    OCSP_RF_REJECT_SIGNED_REQUESTS = 1,
};
pub const OCSP_RF_REJECT_SIGNED_REQUESTS = OCSPRequestFlag.OCSP_RF_REJECT_SIGNED_REQUESTS;

const CLSID_CCertEncodeStringArray_Value = @import("../zig.zig").Guid.initString("19A76FE0-7494-11D0-8816-00A0C903B83C");
pub const CLSID_CCertEncodeStringArray = &CLSID_CCertEncodeStringArray_Value;

const CLSID_CCertEncodeLongArray_Value = @import("../zig.zig").Guid.initString("4E0680A0-A0A2-11D0-8821-00A0C903B83C");
pub const CLSID_CCertEncodeLongArray = &CLSID_CCertEncodeLongArray_Value;

const CLSID_CCertEncodeDateArray_Value = @import("../zig.zig").Guid.initString("301F77B0-A470-11D0-8821-00A0C903B83C");
pub const CLSID_CCertEncodeDateArray = &CLSID_CCertEncodeDateArray_Value;

const CLSID_CCertEncodeCRLDistInfo_Value = @import("../zig.zig").Guid.initString("01FA60A0-BBFF-11D0-8825-00A0C903B83C");
pub const CLSID_CCertEncodeCRLDistInfo = &CLSID_CCertEncodeCRLDistInfo_Value;

const CLSID_CCertEncodeAltName_Value = @import("../zig.zig").Guid.initString("1CFC4CDA-1271-11D1-9BD4-00C04FB683FA");
pub const CLSID_CCertEncodeAltName = &CLSID_CCertEncodeAltName_Value;

const CLSID_CCertEncodeBitString_Value = @import("../zig.zig").Guid.initString("6D6B3CD8-1278-11D1-9BD4-00C04FB683FA");
pub const CLSID_CCertEncodeBitString = &CLSID_CCertEncodeBitString_Value;

const IID_ICertEncodeStringArray_Value = @import("../zig.zig").Guid.initString("12A88820-7494-11D0-8816-00A0C903B83C");
pub const IID_ICertEncodeStringArray = &IID_ICertEncodeStringArray_Value;
pub const ICertEncodeStringArray = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: fn(
            self: *const ICertEncodeStringArray,
            strBinary: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringType: fn(
            self: *const ICertEncodeStringArray,
            pStringType: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: fn(
            self: *const ICertEncodeStringArray,
            pCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const ICertEncodeStringArray,
            Index: i32,
            pstr: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const ICertEncodeStringArray,
            Count: i32,
            StringType: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: fn(
            self: *const ICertEncodeStringArray,
            Index: i32,
            str: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: fn(
            self: *const ICertEncodeStringArray,
            pstrBinary: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeStringArray_Decode(self: *const T, strBinary: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeStringArray.VTable, self.vtable).Decode(@ptrCast(*const ICertEncodeStringArray, self), strBinary);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeStringArray_GetStringType(self: *const T, pStringType: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeStringArray.VTable, self.vtable).GetStringType(@ptrCast(*const ICertEncodeStringArray, self), pStringType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeStringArray_GetCount(self: *const T, pCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeStringArray.VTable, self.vtable).GetCount(@ptrCast(*const ICertEncodeStringArray, self), pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeStringArray_GetValue(self: *const T, Index: i32, pstr: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeStringArray.VTable, self.vtable).GetValue(@ptrCast(*const ICertEncodeStringArray, self), Index, pstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeStringArray_Reset(self: *const T, Count: i32, StringType: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeStringArray.VTable, self.vtable).Reset(@ptrCast(*const ICertEncodeStringArray, self), Count, StringType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeStringArray_SetValue(self: *const T, Index: i32, str: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeStringArray.VTable, self.vtable).SetValue(@ptrCast(*const ICertEncodeStringArray, self), Index, str);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeStringArray_Encode(self: *const T, pstrBinary: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeStringArray.VTable, self.vtable).Encode(@ptrCast(*const ICertEncodeStringArray, self), pstrBinary);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertEncodeStringArray2_Value = @import("../zig.zig").Guid.initString("9C680D93-9B7D-4E95-9018-4FFE10BA5ADA");
pub const IID_ICertEncodeStringArray2 = &IID_ICertEncodeStringArray2_Value;
pub const ICertEncodeStringArray2 = extern struct {
    pub const VTable = extern struct {
        base: ICertEncodeStringArray.VTable,
        DecodeBlob: fn(
            self: *const ICertEncodeStringArray2,
            strEncodedData: BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeBlob: fn(
            self: *const ICertEncodeStringArray2,
            Encoding: EncodingType,
            pstrEncodedData: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertEncodeStringArray.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeStringArray2_DecodeBlob(self: *const T, strEncodedData: BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeStringArray2.VTable, self.vtable).DecodeBlob(@ptrCast(*const ICertEncodeStringArray2, self), strEncodedData, Encoding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeStringArray2_EncodeBlob(self: *const T, Encoding: EncodingType, pstrEncodedData: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeStringArray2.VTable, self.vtable).EncodeBlob(@ptrCast(*const ICertEncodeStringArray2, self), Encoding, pstrEncodedData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertEncodeLongArray_Value = @import("../zig.zig").Guid.initString("15E2F230-A0A2-11D0-8821-00A0C903B83C");
pub const IID_ICertEncodeLongArray = &IID_ICertEncodeLongArray_Value;
pub const ICertEncodeLongArray = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: fn(
            self: *const ICertEncodeLongArray,
            strBinary: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: fn(
            self: *const ICertEncodeLongArray,
            pCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const ICertEncodeLongArray,
            Index: i32,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const ICertEncodeLongArray,
            Count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: fn(
            self: *const ICertEncodeLongArray,
            Index: i32,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: fn(
            self: *const ICertEncodeLongArray,
            pstrBinary: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeLongArray_Decode(self: *const T, strBinary: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeLongArray.VTable, self.vtable).Decode(@ptrCast(*const ICertEncodeLongArray, self), strBinary);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeLongArray_GetCount(self: *const T, pCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeLongArray.VTable, self.vtable).GetCount(@ptrCast(*const ICertEncodeLongArray, self), pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeLongArray_GetValue(self: *const T, Index: i32, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeLongArray.VTable, self.vtable).GetValue(@ptrCast(*const ICertEncodeLongArray, self), Index, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeLongArray_Reset(self: *const T, Count: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeLongArray.VTable, self.vtable).Reset(@ptrCast(*const ICertEncodeLongArray, self), Count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeLongArray_SetValue(self: *const T, Index: i32, Value: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeLongArray.VTable, self.vtable).SetValue(@ptrCast(*const ICertEncodeLongArray, self), Index, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeLongArray_Encode(self: *const T, pstrBinary: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeLongArray.VTable, self.vtable).Encode(@ptrCast(*const ICertEncodeLongArray, self), pstrBinary);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertEncodeLongArray2_Value = @import("../zig.zig").Guid.initString("4EFDE84A-BD9B-4FC2-A108-C347D478840F");
pub const IID_ICertEncodeLongArray2 = &IID_ICertEncodeLongArray2_Value;
pub const ICertEncodeLongArray2 = extern struct {
    pub const VTable = extern struct {
        base: ICertEncodeLongArray.VTable,
        DecodeBlob: fn(
            self: *const ICertEncodeLongArray2,
            strEncodedData: BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeBlob: fn(
            self: *const ICertEncodeLongArray2,
            Encoding: EncodingType,
            pstrEncodedData: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertEncodeLongArray.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeLongArray2_DecodeBlob(self: *const T, strEncodedData: BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeLongArray2.VTable, self.vtable).DecodeBlob(@ptrCast(*const ICertEncodeLongArray2, self), strEncodedData, Encoding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeLongArray2_EncodeBlob(self: *const T, Encoding: EncodingType, pstrEncodedData: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeLongArray2.VTable, self.vtable).EncodeBlob(@ptrCast(*const ICertEncodeLongArray2, self), Encoding, pstrEncodedData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertEncodeDateArray_Value = @import("../zig.zig").Guid.initString("2F9469A0-A470-11D0-8821-00A0C903B83C");
pub const IID_ICertEncodeDateArray = &IID_ICertEncodeDateArray_Value;
pub const ICertEncodeDateArray = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: fn(
            self: *const ICertEncodeDateArray,
            strBinary: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: fn(
            self: *const ICertEncodeDateArray,
            pCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const ICertEncodeDateArray,
            Index: i32,
            pValue: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const ICertEncodeDateArray,
            Count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: fn(
            self: *const ICertEncodeDateArray,
            Index: i32,
            Value: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: fn(
            self: *const ICertEncodeDateArray,
            pstrBinary: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeDateArray_Decode(self: *const T, strBinary: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeDateArray.VTable, self.vtable).Decode(@ptrCast(*const ICertEncodeDateArray, self), strBinary);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeDateArray_GetCount(self: *const T, pCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeDateArray.VTable, self.vtable).GetCount(@ptrCast(*const ICertEncodeDateArray, self), pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeDateArray_GetValue(self: *const T, Index: i32, pValue: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeDateArray.VTable, self.vtable).GetValue(@ptrCast(*const ICertEncodeDateArray, self), Index, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeDateArray_Reset(self: *const T, Count: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeDateArray.VTable, self.vtable).Reset(@ptrCast(*const ICertEncodeDateArray, self), Count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeDateArray_SetValue(self: *const T, Index: i32, Value: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeDateArray.VTable, self.vtable).SetValue(@ptrCast(*const ICertEncodeDateArray, self), Index, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeDateArray_Encode(self: *const T, pstrBinary: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeDateArray.VTable, self.vtable).Encode(@ptrCast(*const ICertEncodeDateArray, self), pstrBinary);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertEncodeDateArray2_Value = @import("../zig.zig").Guid.initString("99A4EDB5-2B8E-448D-BF95-BBA8D7789DC8");
pub const IID_ICertEncodeDateArray2 = &IID_ICertEncodeDateArray2_Value;
pub const ICertEncodeDateArray2 = extern struct {
    pub const VTable = extern struct {
        base: ICertEncodeDateArray.VTable,
        DecodeBlob: fn(
            self: *const ICertEncodeDateArray2,
            strEncodedData: BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeBlob: fn(
            self: *const ICertEncodeDateArray2,
            Encoding: EncodingType,
            pstrEncodedData: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertEncodeDateArray.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeDateArray2_DecodeBlob(self: *const T, strEncodedData: BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeDateArray2.VTable, self.vtable).DecodeBlob(@ptrCast(*const ICertEncodeDateArray2, self), strEncodedData, Encoding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeDateArray2_EncodeBlob(self: *const T, Encoding: EncodingType, pstrEncodedData: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeDateArray2.VTable, self.vtable).EncodeBlob(@ptrCast(*const ICertEncodeDateArray2, self), Encoding, pstrEncodedData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertEncodeCRLDistInfo_Value = @import("../zig.zig").Guid.initString("01958640-BBFF-11D0-8825-00A0C903B83C");
pub const IID_ICertEncodeCRLDistInfo = &IID_ICertEncodeCRLDistInfo_Value;
pub const ICertEncodeCRLDistInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: fn(
            self: *const ICertEncodeCRLDistInfo,
            strBinary: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDistPointCount: fn(
            self: *const ICertEncodeCRLDistInfo,
            pDistPointCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameCount: fn(
            self: *const ICertEncodeCRLDistInfo,
            DistPointIndex: i32,
            pNameCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameChoice: fn(
            self: *const ICertEncodeCRLDistInfo,
            DistPointIndex: i32,
            NameIndex: i32,
            pNameChoice: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: fn(
            self: *const ICertEncodeCRLDistInfo,
            DistPointIndex: i32,
            NameIndex: i32,
            pstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const ICertEncodeCRLDistInfo,
            DistPointCount: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNameCount: fn(
            self: *const ICertEncodeCRLDistInfo,
            DistPointIndex: i32,
            NameCount: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNameEntry: fn(
            self: *const ICertEncodeCRLDistInfo,
            DistPointIndex: i32,
            NameIndex: i32,
            NameChoice: i32,
            strName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: fn(
            self: *const ICertEncodeCRLDistInfo,
            pstrBinary: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeCRLDistInfo_Decode(self: *const T, strBinary: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeCRLDistInfo.VTable, self.vtable).Decode(@ptrCast(*const ICertEncodeCRLDistInfo, self), strBinary);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeCRLDistInfo_GetDistPointCount(self: *const T, pDistPointCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeCRLDistInfo.VTable, self.vtable).GetDistPointCount(@ptrCast(*const ICertEncodeCRLDistInfo, self), pDistPointCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeCRLDistInfo_GetNameCount(self: *const T, DistPointIndex: i32, pNameCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeCRLDistInfo.VTable, self.vtable).GetNameCount(@ptrCast(*const ICertEncodeCRLDistInfo, self), DistPointIndex, pNameCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeCRLDistInfo_GetNameChoice(self: *const T, DistPointIndex: i32, NameIndex: i32, pNameChoice: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeCRLDistInfo.VTable, self.vtable).GetNameChoice(@ptrCast(*const ICertEncodeCRLDistInfo, self), DistPointIndex, NameIndex, pNameChoice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeCRLDistInfo_GetName(self: *const T, DistPointIndex: i32, NameIndex: i32, pstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeCRLDistInfo.VTable, self.vtable).GetName(@ptrCast(*const ICertEncodeCRLDistInfo, self), DistPointIndex, NameIndex, pstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeCRLDistInfo_Reset(self: *const T, DistPointCount: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeCRLDistInfo.VTable, self.vtable).Reset(@ptrCast(*const ICertEncodeCRLDistInfo, self), DistPointCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeCRLDistInfo_SetNameCount(self: *const T, DistPointIndex: i32, NameCount: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeCRLDistInfo.VTable, self.vtable).SetNameCount(@ptrCast(*const ICertEncodeCRLDistInfo, self), DistPointIndex, NameCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeCRLDistInfo_SetNameEntry(self: *const T, DistPointIndex: i32, NameIndex: i32, NameChoice: i32, strName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeCRLDistInfo.VTable, self.vtable).SetNameEntry(@ptrCast(*const ICertEncodeCRLDistInfo, self), DistPointIndex, NameIndex, NameChoice, strName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeCRLDistInfo_Encode(self: *const T, pstrBinary: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeCRLDistInfo.VTable, self.vtable).Encode(@ptrCast(*const ICertEncodeCRLDistInfo, self), pstrBinary);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertEncodeCRLDistInfo2_Value = @import("../zig.zig").Guid.initString("B4275D4B-3E30-446F-AD36-09D03120B078");
pub const IID_ICertEncodeCRLDistInfo2 = &IID_ICertEncodeCRLDistInfo2_Value;
pub const ICertEncodeCRLDistInfo2 = extern struct {
    pub const VTable = extern struct {
        base: ICertEncodeCRLDistInfo.VTable,
        DecodeBlob: fn(
            self: *const ICertEncodeCRLDistInfo2,
            strEncodedData: BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeBlob: fn(
            self: *const ICertEncodeCRLDistInfo2,
            Encoding: EncodingType,
            pstrEncodedData: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertEncodeCRLDistInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeCRLDistInfo2_DecodeBlob(self: *const T, strEncodedData: BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeCRLDistInfo2.VTable, self.vtable).DecodeBlob(@ptrCast(*const ICertEncodeCRLDistInfo2, self), strEncodedData, Encoding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeCRLDistInfo2_EncodeBlob(self: *const T, Encoding: EncodingType, pstrEncodedData: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeCRLDistInfo2.VTable, self.vtable).EncodeBlob(@ptrCast(*const ICertEncodeCRLDistInfo2, self), Encoding, pstrEncodedData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertEncodeAltName_Value = @import("../zig.zig").Guid.initString("1C9A8C70-1271-11D1-9BD4-00C04FB683FA");
pub const IID_ICertEncodeAltName = &IID_ICertEncodeAltName_Value;
pub const ICertEncodeAltName = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: fn(
            self: *const ICertEncodeAltName,
            strBinary: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameCount: fn(
            self: *const ICertEncodeAltName,
            pNameCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameChoice: fn(
            self: *const ICertEncodeAltName,
            NameIndex: i32,
            pNameChoice: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: fn(
            self: *const ICertEncodeAltName,
            NameIndex: i32,
            pstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const ICertEncodeAltName,
            NameCount: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNameEntry: fn(
            self: *const ICertEncodeAltName,
            NameIndex: i32,
            NameChoice: i32,
            strName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: fn(
            self: *const ICertEncodeAltName,
            pstrBinary: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeAltName_Decode(self: *const T, strBinary: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeAltName.VTable, self.vtable).Decode(@ptrCast(*const ICertEncodeAltName, self), strBinary);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeAltName_GetNameCount(self: *const T, pNameCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeAltName.VTable, self.vtable).GetNameCount(@ptrCast(*const ICertEncodeAltName, self), pNameCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeAltName_GetNameChoice(self: *const T, NameIndex: i32, pNameChoice: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeAltName.VTable, self.vtable).GetNameChoice(@ptrCast(*const ICertEncodeAltName, self), NameIndex, pNameChoice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeAltName_GetName(self: *const T, NameIndex: i32, pstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeAltName.VTable, self.vtable).GetName(@ptrCast(*const ICertEncodeAltName, self), NameIndex, pstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeAltName_Reset(self: *const T, NameCount: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeAltName.VTable, self.vtable).Reset(@ptrCast(*const ICertEncodeAltName, self), NameCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeAltName_SetNameEntry(self: *const T, NameIndex: i32, NameChoice: i32, strName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeAltName.VTable, self.vtable).SetNameEntry(@ptrCast(*const ICertEncodeAltName, self), NameIndex, NameChoice, strName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeAltName_Encode(self: *const T, pstrBinary: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeAltName.VTable, self.vtable).Encode(@ptrCast(*const ICertEncodeAltName, self), pstrBinary);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertEncodeAltName2_Value = @import("../zig.zig").Guid.initString("F67FE177-5EF1-4535-B4CE-29DF15E2E0C3");
pub const IID_ICertEncodeAltName2 = &IID_ICertEncodeAltName2_Value;
pub const ICertEncodeAltName2 = extern struct {
    pub const VTable = extern struct {
        base: ICertEncodeAltName.VTable,
        DecodeBlob: fn(
            self: *const ICertEncodeAltName2,
            strEncodedData: BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeBlob: fn(
            self: *const ICertEncodeAltName2,
            Encoding: EncodingType,
            pstrEncodedData: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameBlob: fn(
            self: *const ICertEncodeAltName2,
            NameIndex: i32,
            Encoding: EncodingType,
            pstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNameEntryBlob: fn(
            self: *const ICertEncodeAltName2,
            NameIndex: i32,
            NameChoice: i32,
            strName: BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertEncodeAltName.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeAltName2_DecodeBlob(self: *const T, strEncodedData: BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeAltName2.VTable, self.vtable).DecodeBlob(@ptrCast(*const ICertEncodeAltName2, self), strEncodedData, Encoding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeAltName2_EncodeBlob(self: *const T, Encoding: EncodingType, pstrEncodedData: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeAltName2.VTable, self.vtable).EncodeBlob(@ptrCast(*const ICertEncodeAltName2, self), Encoding, pstrEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeAltName2_GetNameBlob(self: *const T, NameIndex: i32, Encoding: EncodingType, pstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeAltName2.VTable, self.vtable).GetNameBlob(@ptrCast(*const ICertEncodeAltName2, self), NameIndex, Encoding, pstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeAltName2_SetNameEntryBlob(self: *const T, NameIndex: i32, NameChoice: i32, strName: BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeAltName2.VTable, self.vtable).SetNameEntryBlob(@ptrCast(*const ICertEncodeAltName2, self), NameIndex, NameChoice, strName, Encoding);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertEncodeBitString_Value = @import("../zig.zig").Guid.initString("6DB525BE-1278-11D1-9BD4-00C04FB683FA");
pub const IID_ICertEncodeBitString = &IID_ICertEncodeBitString_Value;
pub const ICertEncodeBitString = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: fn(
            self: *const ICertEncodeBitString,
            strBinary: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitCount: fn(
            self: *const ICertEncodeBitString,
            pBitCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitString: fn(
            self: *const ICertEncodeBitString,
            pstrBitString: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: fn(
            self: *const ICertEncodeBitString,
            BitCount: i32,
            strBitString: BSTR,
            pstrBinary: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeBitString_Decode(self: *const T, strBinary: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeBitString.VTable, self.vtable).Decode(@ptrCast(*const ICertEncodeBitString, self), strBinary);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeBitString_GetBitCount(self: *const T, pBitCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeBitString.VTable, self.vtable).GetBitCount(@ptrCast(*const ICertEncodeBitString, self), pBitCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeBitString_GetBitString(self: *const T, pstrBitString: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeBitString.VTable, self.vtable).GetBitString(@ptrCast(*const ICertEncodeBitString, self), pstrBitString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeBitString_Encode(self: *const T, BitCount: i32, strBitString: BSTR, pstrBinary: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeBitString.VTable, self.vtable).Encode(@ptrCast(*const ICertEncodeBitString, self), BitCount, strBitString, pstrBinary);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertEncodeBitString2_Value = @import("../zig.zig").Guid.initString("E070D6E7-23EF-4DD2-8242-EBD9C928CB30");
pub const IID_ICertEncodeBitString2 = &IID_ICertEncodeBitString2_Value;
pub const ICertEncodeBitString2 = extern struct {
    pub const VTable = extern struct {
        base: ICertEncodeBitString.VTable,
        DecodeBlob: fn(
            self: *const ICertEncodeBitString2,
            strEncodedData: BSTR,
            Encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeBlob: fn(
            self: *const ICertEncodeBitString2,
            BitCount: i32,
            strBitString: BSTR,
            EncodingIn: EncodingType,
            Encoding: EncodingType,
            pstrEncodedData: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitStringBlob: fn(
            self: *const ICertEncodeBitString2,
            Encoding: EncodingType,
            pstrBitString: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertEncodeBitString.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeBitString2_DecodeBlob(self: *const T, strEncodedData: BSTR, Encoding: EncodingType) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeBitString2.VTable, self.vtable).DecodeBlob(@ptrCast(*const ICertEncodeBitString2, self), strEncodedData, Encoding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeBitString2_EncodeBlob(self: *const T, BitCount: i32, strBitString: BSTR, EncodingIn: EncodingType, Encoding: EncodingType, pstrEncodedData: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeBitString2.VTable, self.vtable).EncodeBlob(@ptrCast(*const ICertEncodeBitString2, self), BitCount, strBitString, EncodingIn, Encoding, pstrEncodedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertEncodeBitString2_GetBitStringBlob(self: *const T, Encoding: EncodingType, pstrBitString: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertEncodeBitString2.VTable, self.vtable).GetBitStringBlob(@ptrCast(*const ICertEncodeBitString2, self), Encoding, pstrBitString);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertExit_Value = @import("../zig.zig").Guid.initString("E19AE1A0-7364-11D0-8816-00A0C903B83C");
pub const IID_ICertExit = &IID_ICertExit_Value;
pub const ICertExit = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const ICertExit,
            strConfig: BSTR,
            pEventMask: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Notify: fn(
            self: *const ICertExit,
            ExitEvent: i32,
            Context: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: fn(
            self: *const ICertExit,
            pstrDescription: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertExit_Initialize(self: *const T, strConfig: BSTR, pEventMask: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertExit.VTable, self.vtable).Initialize(@ptrCast(*const ICertExit, self), strConfig, pEventMask);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertExit_Notify(self: *const T, ExitEvent: i32, Context: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertExit.VTable, self.vtable).Notify(@ptrCast(*const ICertExit, self), ExitEvent, Context);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertExit_GetDescription(self: *const T, pstrDescription: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertExit.VTable, self.vtable).GetDescription(@ptrCast(*const ICertExit, self), pstrDescription);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertExit2_Value = @import("../zig.zig").Guid.initString("0ABF484B-D049-464D-A7ED-552E7529B0FF");
pub const IID_ICertExit2 = &IID_ICertExit2_Value;
pub const ICertExit2 = extern struct {
    pub const VTable = extern struct {
        base: ICertExit.VTable,
        GetManageModule: fn(
            self: *const ICertExit2,
            ppManageModule: **ICertManageModule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICertExit.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICertExit2_GetManageModule(self: *const T, ppManageModule: **ICertManageModule) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICertExit2.VTable, self.vtable).GetManageModule(@ptrCast(*const ICertExit2, self), ppManageModule);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const ENUM_CATYPES = extern enum(i32) {
    ENUM_ENTERPRISE_ROOTCA = 0,
    ENUM_ENTERPRISE_SUBCA = 1,
    ENUM_STANDALONE_ROOTCA = 3,
    ENUM_STANDALONE_SUBCA = 4,
    ENUM_UNKNOWN_CA = 5,
};
pub const ENUM_ENTERPRISE_ROOTCA = ENUM_CATYPES.ENUM_ENTERPRISE_ROOTCA;
pub const ENUM_ENTERPRISE_SUBCA = ENUM_CATYPES.ENUM_ENTERPRISE_SUBCA;
pub const ENUM_STANDALONE_ROOTCA = ENUM_CATYPES.ENUM_STANDALONE_ROOTCA;
pub const ENUM_STANDALONE_SUBCA = ENUM_CATYPES.ENUM_STANDALONE_SUBCA;
pub const ENUM_UNKNOWN_CA = ENUM_CATYPES.ENUM_UNKNOWN_CA;

pub const CAINFO = extern struct {
    cbSize: u32,
    CAType: ENUM_CATYPES,
    cCASignatureCerts: u32,
    cCAExchangeCerts: u32,
    cExitModules: u32,
    lPropIdMax: i32,
    lRoleSeparationEnabled: i32,
    cKRACertUsedCount: u32,
    cKRACertCount: u32,
    fAdvancedServer: u32,
};

pub const ENUM_PERIOD = extern enum(i32) {
    INVALID = -1,
    SECONDS = 0,
    MINUTES = 1,
    HOURS = 2,
    DAYS = 3,
    WEEKS = 4,
    MONTHS = 5,
    YEARS = 6,
};
pub const ENUM_PERIOD_INVALID = ENUM_PERIOD.INVALID;
pub const ENUM_PERIOD_SECONDS = ENUM_PERIOD.SECONDS;
pub const ENUM_PERIOD_MINUTES = ENUM_PERIOD.MINUTES;
pub const ENUM_PERIOD_HOURS = ENUM_PERIOD.HOURS;
pub const ENUM_PERIOD_DAYS = ENUM_PERIOD.DAYS;
pub const ENUM_PERIOD_WEEKS = ENUM_PERIOD.WEEKS;
pub const ENUM_PERIOD_MONTHS = ENUM_PERIOD.MONTHS;
pub const ENUM_PERIOD_YEARS = ENUM_PERIOD.YEARS;

pub const LLFILETIME = extern struct {
    Anonymous: LLFILETIME._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PFNCMFILTERPROC = fn(
    pCertContext: *CERT_CONTEXT,
    param1: LPARAM,
    param2: u32,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFNCMHOOKPROC = fn(
    hwndDialog: HWND,
    message: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const CERT_SELECT_STRUCT_A = extern struct {
    dwSize: u32,
    hwndParent: HWND,
    hInstance: HINSTANCE,
    pTemplateName: [*:0]const u8,
    dwFlags: u32,
    szTitle: [*:0]const u8,
    cCertStore: u32,
    arrayCertStore: **c_void,
    szPurposeOid: [*:0]const u8,
    cCertContext: u32,
    arrayCertContext: **CERT_CONTEXT,
    lCustData: LPARAM,
    pfnHook: PFNCMHOOKPROC,
    pfnFilter: PFNCMFILTERPROC,
    szHelpFileName: [*:0]const u8,
    dwHelpId: u32,
    hprov: ?*c_void,
};

pub const CERT_SELECT_STRUCT_W = extern struct {
    dwSize: u32,
    hwndParent: HWND,
    hInstance: HINSTANCE,
    pTemplateName: [*:0]const u16,
    dwFlags: u32,
    szTitle: [*:0]const u16,
    cCertStore: u32,
    arrayCertStore: **c_void,
    szPurposeOid: [*:0]const u8,
    cCertContext: u32,
    arrayCertContext: **CERT_CONTEXT,
    lCustData: LPARAM,
    pfnHook: PFNCMHOOKPROC,
    pfnFilter: PFNCMFILTERPROC,
    szHelpFileName: [*:0]const u16,
    dwHelpId: u32,
    hprov: ?*c_void,
};

pub const CERT_VIEWPROPERTIES_STRUCT_A = extern struct {
    dwSize: u32,
    hwndParent: HWND,
    hInstance: HINSTANCE,
    dwFlags: u32,
    szTitle: [*:0]const u8,
    pCertContext: *CERT_CONTEXT,
    arrayPurposes: *PSTR,
    cArrayPurposes: u32,
    cRootStores: u32,
    rghstoreRoots: **c_void,
    cStores: u32,
    rghstoreCAs: **c_void,
    cTrustStores: u32,
    rghstoreTrust: **c_void,
    hprov: ?*c_void,
    lCustData: LPARAM,
    dwPad: u32,
    szHelpFileName: [*:0]const u8,
    dwHelpId: u32,
    nStartPage: u32,
    cArrayPropSheetPages: u32,
    arrayPropSheetPages: *PROPSHEETPAGEA,
};

pub const CERT_VIEWPROPERTIES_STRUCT_W = extern struct {
    dwSize: u32,
    hwndParent: HWND,
    hInstance: HINSTANCE,
    dwFlags: u32,
    szTitle: [*:0]const u16,
    pCertContext: *CERT_CONTEXT,
    arrayPurposes: *PSTR,
    cArrayPurposes: u32,
    cRootStores: u32,
    rghstoreRoots: **c_void,
    cStores: u32,
    rghstoreCAs: **c_void,
    cTrustStores: u32,
    rghstoreTrust: **c_void,
    hprov: ?*c_void,
    lCustData: LPARAM,
    dwPad: u32,
    szHelpFileName: [*:0]const u16,
    dwHelpId: u32,
    nStartPage: u32,
    cArrayPropSheetPages: u32,
    arrayPropSheetPages: *PROPSHEETPAGEA,
};

pub const tagCMOID = extern struct {
    szExtensionOID: [*:0]const u8,
    dwTestOperation: u32,
    pbTestData: *u8,
    cbTestData: u32,
};

pub const tagCMFLTR = extern struct {
    dwSize: u32,
    cExtensionChecks: u32,
    arrayExtensionChecks: *tagCMOID,
    dwCheckingFlags: u32,
};

pub const PFNTRUSTHELPER = fn(
    pCertContext: *CERT_CONTEXT,
    lCustData: LPARAM,
    fLeafCertificate: BOOL,
    pbTrustBlob: *u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const CERT_VERIFY_CERTIFICATE_TRUST = extern struct {
    cbSize: u32,
    pccert: *CERT_CONTEXT,
    dwFlags: u32,
    dwIgnoreErr: u32,
    pdwErrors: *u32,
    pszUsageOid: PSTR,
    hprov: ?*c_void,
    cRootStores: u32,
    rghstoreRoots: **c_void,
    cStores: u32,
    rghstoreCAs: **c_void,
    cTrustStores: u32,
    rghstoreTrust: **c_void,
    lCustData: LPARAM,
    pfnTrustHelper: PFNTRUSTHELPER,
    pcChain: *u32,
    prgChain: ***CERT_CONTEXT,
    prgdwErrors: **u32,
    prgpbTrustInfo: **CRYPTOAPI_BLOB,
};

pub const CTL_MODIFY_REQUEST = extern struct {
    pccert: *CERT_CONTEXT,
    dwOperation: u32,
    dwError: u32,
};

pub const WINTRUST_DATA = extern struct {
    cbStruct: u32,
    pPolicyCallbackData: *c_void,
    pSIPClientData: *c_void,
    dwUIChoice: u32,
    fdwRevocationChecks: u32,
    dwUnionChoice: u32,
    Anonymous: WINTRUST_DATA._Anonymous_e__Union,
    dwStateAction: u32,
    hWVTStateData: HANDLE,
    pwszURLReference: PWSTR,
    dwProvFlags: u32,
    dwUIContext: u32,
    pSignatureSettings: *WINTRUST_SIGNATURE_SETTINGS,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const WINTRUST_SIGNATURE_SETTINGS = extern struct {
    cbStruct: u32,
    dwIndex: u32,
    dwFlags: u32,
    cSecondarySigs: u32,
    dwVerifiedSigIndex: u32,
    pCryptoPolicy: *CERT_STRONG_SIGN_PARA,
};

pub const WINTRUST_FILE_INFO = extern struct {
    cbStruct: u32,
    pcwszFilePath: [*:0]const u16,
    hFile: HANDLE,
    pgKnownSubject: *Guid,
};

pub const WINTRUST_CATALOG_INFO = extern struct {
    cbStruct: u32,
    dwCatalogVersion: u32,
    pcwszCatalogFilePath: [*:0]const u16,
    pcwszMemberTag: [*:0]const u16,
    pcwszMemberFilePath: [*:0]const u16,
    hMemberFile: HANDLE,
    pbCalculatedFileHash: *u8,
    cbCalculatedFileHash: u32,
    pcCatalogContext: *CTL_CONTEXT,
    hCatAdmin: ?*c_void,
};

pub const WINTRUST_BLOB_INFO = extern struct {
    cbStruct: u32,
    gSubject: Guid,
    pcwszDisplayName: [*:0]const u16,
    cbMemObject: u32,
    pbMemObject: *u8,
    cbMemSignedMsg: u32,
    pbMemSignedMsg: *u8,
};

pub const WINTRUST_SGNR_INFO = extern struct {
    cbStruct: u32,
    pcwszDisplayName: [*:0]const u16,
    psSignerInfo: *CMSG_SIGNER_INFO,
    chStores: u32,
    pahStores: **c_void,
};

pub const WINTRUST_CERT_INFO = extern struct {
    cbStruct: u32,
    pcwszDisplayName: [*:0]const u16,
    psCertContext: *CERT_CONTEXT,
    chStores: u32,
    pahStores: **c_void,
    dwFlags: u32,
    psftVerifyAsOf: *FILETIME,
};

pub const PFN_CPD_MEM_ALLOC = fn(
    cbSize: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const PFN_CPD_MEM_FREE = fn(
    pvMem2Free: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFN_CPD_ADD_STORE = fn(
    pProvData: *CRYPT_PROVIDER_DATA,
    hStore2Add: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CPD_ADD_SGNR = fn(
    pProvData: *CRYPT_PROVIDER_DATA,
    fCounterSigner: BOOL,
    idxSigner: u32,
    pSgnr2Add: *CRYPT_PROVIDER_SGNR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CPD_ADD_CERT = fn(
    pProvData: *CRYPT_PROVIDER_DATA,
    idxSigner: u32,
    fCounterSigner: BOOL,
    idxCounterSigner: u32,
    pCert2Add: *CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_CPD_ADD_PRIVDATA = fn(
    pProvData: *CRYPT_PROVIDER_DATA,
    pPrivData2Add: *CRYPT_PROVIDER_PRIVDATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_PROVIDER_INIT_CALL = fn(
    pProvData: *CRYPT_PROVIDER_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFN_PROVIDER_OBJTRUST_CALL = fn(
    pProvData: *CRYPT_PROVIDER_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFN_PROVIDER_SIGTRUST_CALL = fn(
    pProvData: *CRYPT_PROVIDER_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFN_PROVIDER_CERTTRUST_CALL = fn(
    pProvData: *CRYPT_PROVIDER_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFN_PROVIDER_FINALPOLICY_CALL = fn(
    pProvData: *CRYPT_PROVIDER_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFN_PROVIDER_TESTFINALPOLICY_CALL = fn(
    pProvData: *CRYPT_PROVIDER_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFN_PROVIDER_CLEANUP_CALL = fn(
    pProvData: *CRYPT_PROVIDER_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFN_PROVIDER_CERTCHKPOLICY_CALL = fn(
    pProvData: *CRYPT_PROVIDER_DATA,
    idxSigner: u32,
    fCounterSignerChain: BOOL,
    idxCounterSigner: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CRYPT_PROVIDER_DATA = extern struct {
    cbStruct: u32,
    pWintrustData: *WINTRUST_DATA,
    fOpenedFile: BOOL,
    hWndParent: HWND,
    pgActionID: *Guid,
    hProv: ?*c_void,
    dwError: u32,
    dwRegSecuritySettings: u32,
    dwRegPolicySettings: u32,
    psPfns: *CRYPT_PROVIDER_FUNCTIONS,
    cdwTrustStepErrors: u32,
    padwTrustStepErrors: *u32,
    chStores: u32,
    pahStores: **c_void,
    dwEncoding: u32,
    hMsg: *c_void,
    csSigners: u32,
    pasSigners: *CRYPT_PROVIDER_SGNR,
    csProvPrivData: u32,
    pasProvPrivData: *CRYPT_PROVIDER_PRIVDATA,
    dwSubjectChoice: u32,
    Anonymous: CRYPT_PROVIDER_DATA._Anonymous_e__Union,
    pszUsageOID: *i8,
    fRecallWithState: BOOL,
    sftSystemTime: FILETIME,
    pszCTLSignerUsageOID: *i8,
    dwProvFlags: u32,
    dwFinalError: u32,
    pRequestUsage: *CERT_USAGE_MATCH,
    dwTrustPubSettings: u32,
    dwUIStateFlags: u32,
    pSigState: *CRYPT_PROVIDER_SIGSTATE,
    pSigSettings: *WINTRUST_SIGNATURE_SETTINGS,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CRYPT_PROVIDER_SIGSTATE = extern struct {
    cbStruct: u32,
    rhSecondarySigs: **c_void,
    hPrimarySig: *c_void,
    fFirstAttemptMade: BOOL,
    fNoMoreSigs: BOOL,
    cSecondarySigs: u32,
    dwCurrentIndex: u32,
    fSupportMultiSig: BOOL,
    dwCryptoPolicySupport: u32,
    iAttemptCount: u32,
    fCheckedSealing: BOOL,
    pSealingSignature: *SEALING_SIGNATURE_ATTRIBUTE,
};

pub const CRYPT_PROVIDER_FUNCTIONS = extern struct {
    cbStruct: u32,
    pfnAlloc: PFN_CPD_MEM_ALLOC,
    pfnFree: PFN_CPD_MEM_FREE,
    pfnAddStore2Chain: PFN_CPD_ADD_STORE,
    pfnAddSgnr2Chain: PFN_CPD_ADD_SGNR,
    pfnAddCert2Chain: PFN_CPD_ADD_CERT,
    pfnAddPrivData2Chain: PFN_CPD_ADD_PRIVDATA,
    pfnInitialize: PFN_PROVIDER_INIT_CALL,
    pfnObjectTrust: PFN_PROVIDER_OBJTRUST_CALL,
    pfnSignatureTrust: PFN_PROVIDER_SIGTRUST_CALL,
    pfnCertificateTrust: PFN_PROVIDER_CERTTRUST_CALL,
    pfnFinalPolicy: PFN_PROVIDER_FINALPOLICY_CALL,
    pfnCertCheckPolicy: PFN_PROVIDER_CERTCHKPOLICY_CALL,
    pfnTestFinalPolicy: PFN_PROVIDER_TESTFINALPOLICY_CALL,
    psUIpfns: *CRYPT_PROVUI_FUNCS,
    pfnCleanupPolicy: PFN_PROVIDER_CLEANUP_CALL,
};

pub const PFN_PROVUI_CALL = fn(
    hWndSecurityDialog: HWND,
    pProvData: *CRYPT_PROVIDER_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CRYPT_PROVUI_FUNCS = extern struct {
    cbStruct: u32,
    psUIData: *CRYPT_PROVUI_DATA,
    pfnOnMoreInfoClick: PFN_PROVUI_CALL,
    pfnOnMoreInfoClickDefault: PFN_PROVUI_CALL,
    pfnOnAdvancedClick: PFN_PROVUI_CALL,
    pfnOnAdvancedClickDefault: PFN_PROVUI_CALL,
};

pub const CRYPT_PROVUI_DATA = extern struct {
    cbStruct: u32,
    dwFinalError: u32,
    pYesButtonText: PWSTR,
    pNoButtonText: PWSTR,
    pMoreInfoButtonText: PWSTR,
    pAdvancedLinkText: PWSTR,
    pCopyActionText: PWSTR,
    pCopyActionTextNoTS: PWSTR,
    pCopyActionTextNotSigned: PWSTR,
};

pub const CRYPT_PROVIDER_SGNR = extern struct {
    cbStruct: u32,
    sftVerifyAsOf: FILETIME,
    csCertChain: u32,
    pasCertChain: *CRYPT_PROVIDER_CERT,
    dwSignerType: u32,
    psSigner: *CMSG_SIGNER_INFO,
    dwError: u32,
    csCounterSigners: u32,
    pasCounterSigners: *CRYPT_PROVIDER_SGNR,
    pChainContext: *CERT_CHAIN_CONTEXT,
};

pub const CRYPT_PROVIDER_CERT = extern struct {
    cbStruct: u32,
    pCert: *CERT_CONTEXT,
    fCommercial: BOOL,
    fTrustedRoot: BOOL,
    fSelfSigned: BOOL,
    fTestCert: BOOL,
    dwRevokedReason: u32,
    dwConfidence: u32,
    dwError: u32,
    pTrustListContext: *CTL_CONTEXT,
    fTrustListSignerCert: BOOL,
    pCtlContext: *CTL_CONTEXT,
    dwCtlError: u32,
    fIsCyclic: BOOL,
    pChainElement: *CERT_CHAIN_ELEMENT,
};

pub const CRYPT_PROVIDER_PRIVDATA = extern struct {
    cbStruct: u32,
    gProviderID: Guid,
    cbProvData: u32,
    pvProvData: *c_void,
};

pub const PROVDATA_SIP = extern struct {
    cbStruct: u32,
    gSubject: Guid,
    pSip: *SIP_DISPATCH_INFO,
    pCATSip: *SIP_DISPATCH_INFO,
    psSipSubjectInfo: *SIP_SUBJECTINFO,
    psSipCATSubjectInfo: *SIP_SUBJECTINFO,
    psIndirectData: *SIP_INDIRECT_DATA,
};

pub const CRYPT_TRUST_REG_ENTRY = extern struct {
    cbStruct: u32,
    pwszDLLName: PWSTR,
    pwszFunctionName: PWSTR,
};

pub const CRYPT_REGISTER_ACTIONID = extern struct {
    cbStruct: u32,
    sInitProvider: CRYPT_TRUST_REG_ENTRY,
    sObjectProvider: CRYPT_TRUST_REG_ENTRY,
    sSignatureProvider: CRYPT_TRUST_REG_ENTRY,
    sCertificateProvider: CRYPT_TRUST_REG_ENTRY,
    sCertificatePolicyProvider: CRYPT_TRUST_REG_ENTRY,
    sFinalPolicyProvider: CRYPT_TRUST_REG_ENTRY,
    sTestPolicyProvider: CRYPT_TRUST_REG_ENTRY,
    sCleanupProvider: CRYPT_TRUST_REG_ENTRY,
};

pub const PFN_ALLOCANDFILLDEFUSAGE = fn(
    pszUsageOID: *const i8,
    psDefUsage: *CRYPT_PROVIDER_DEFUSAGE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_FREEDEFUSAGE = fn(
    pszUsageOID: *const i8,
    psDefUsage: *CRYPT_PROVIDER_DEFUSAGE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CRYPT_PROVIDER_REGDEFUSAGE = extern struct {
    cbStruct: u32,
    pgActionID: *Guid,
    pwszDllName: PWSTR,
    pwszLoadCallbackDataFunctionName: *i8,
    pwszFreeCallbackDataFunctionName: *i8,
};

pub const CRYPT_PROVIDER_DEFUSAGE = extern struct {
    cbStruct: u32,
    gActionID: Guid,
    pDefPolicyCallbackData: *c_void,
    pDefSIPClientData: *c_void,
};

pub const SPC_SERIALIZED_OBJECT = extern struct {
    ClassId: [16]u8,
    SerializedData: CRYPTOAPI_BLOB,
};

pub const SPC_SIGINFO = extern struct {
    dwSipVersion: u32,
    gSIPGuid: Guid,
    dwReserved1: u32,
    dwReserved2: u32,
    dwReserved3: u32,
    dwReserved4: u32,
    dwReserved5: u32,
};

pub const SPC_LINK = extern struct {
    dwLinkChoice: u32,
    Anonymous: SPC_LINK._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const SPC_PE_IMAGE_DATA = extern struct {
    Flags: CRYPT_BIT_BLOB,
    pFile: *SPC_LINK,
};

pub const SPC_INDIRECT_DATA_CONTENT = extern struct {
    Data: CRYPT_ATTRIBUTE_TYPE_VALUE,
    DigestAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    Digest: CRYPTOAPI_BLOB,
};

pub const SPC_FINANCIAL_CRITERIA = extern struct {
    fFinancialInfoAvailable: BOOL,
    fMeetsCriteria: BOOL,
};

pub const SPC_IMAGE = extern struct {
    pImageLink: *SPC_LINK,
    Bitmap: CRYPTOAPI_BLOB,
    Metafile: CRYPTOAPI_BLOB,
    EnhancedMetafile: CRYPTOAPI_BLOB,
    GifFile: CRYPTOAPI_BLOB,
};

pub const SPC_SP_AGENCY_INFO = extern struct {
    pPolicyInformation: *SPC_LINK,
    pwszPolicyDisplayText: PWSTR,
    pLogoImage: *SPC_IMAGE,
    pLogoLink: *SPC_LINK,
};

pub const SPC_STATEMENT_TYPE = extern struct {
    cKeyPurposeId: u32,
    rgpszKeyPurposeId: *PSTR,
};

pub const SPC_SP_OPUS_INFO = extern struct {
    pwszProgramName: [*:0]const u16,
    pMoreInfo: *SPC_LINK,
    pPublisherInfo: *SPC_LINK,
};

pub const CAT_NAMEVALUE = extern struct {
    pwszTag: PWSTR,
    fdwFlags: u32,
    Value: CRYPTOAPI_BLOB,
};

pub const CAT_MEMBERINFO = extern struct {
    pwszSubjGuid: PWSTR,
    dwCertVersion: u32,
};

pub const CAT_MEMBERINFO2 = extern struct {
    SubjectGuid: Guid,
    dwCertVersion: u32,
};

pub const INTENT_TO_SEAL_ATTRIBUTE = extern struct {
    version: u32,
    seal: u8,
};

pub const SEALING_SIGNATURE_ATTRIBUTE = extern struct {
    version: u32,
    signerIndex: u32,
    signatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    encryptedDigest: CRYPTOAPI_BLOB,
};

pub const SEALING_TIMESTAMP_ATTRIBUTE = extern struct {
    version: u32,
    signerIndex: u32,
    sealTimeStampToken: CRYPTOAPI_BLOB,
};

pub const WIN_CERTIFICATE = extern struct {
    dwLength: u32,
    wRevision: u16,
    wCertificateType: u16,
    bCertificate: [1]u8,
};

pub const WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT = extern struct {
    hClientToken: HANDLE,
    SubjectType: *Guid,
    Subject: *c_void,
};

pub const WIN_TRUST_ACTDATA_SUBJECT_ONLY = extern struct {
    SubjectType: *Guid,
    Subject: *c_void,
};

pub const WIN_TRUST_SUBJECT_FILE = extern struct {
    hFile: HANDLE,
    lpPath: [*:0]const u16,
};

pub const WIN_TRUST_SUBJECT_FILE_AND_DISPLAY = extern struct {
    hFile: HANDLE,
    lpPath: [*:0]const u16,
    lpDisplayName: [*:0]const u16,
};

pub const WIN_SPUB_TRUSTED_PUBLISHER_DATA = extern struct {
    hClientToken: HANDLE,
    lpCertificate: *WIN_CERTIFICATE,
};

pub const PFNCFILTERPROC = fn(
    pCertContext: *CERT_CONTEXT,
    pfInitialSelectedCert: *BOOL,
    pvCallbackData: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CERT_SELECTUI_INPUT = extern struct {
    hStore: *c_void,
    prgpChain: **CERT_CHAIN_CONTEXT,
    cChain: u32,
};

pub const CRYPTUI_CERT_MGR_STRUCT = extern struct {
    dwSize: u32,
    hwndParent: HWND,
    dwFlags: u32,
    pwszTitle: [*:0]const u16,
    pszInitUsageOID: [*:0]const u8,
};

pub const CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO = extern struct {
    dwSize: u32,
    pGuidSubject: *Guid,
    cbBlob: u32,
    pbBlob: *u8,
    pwszDisplayName: [*:0]const u16,
};

pub const CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO = extern struct {
    dwSize: u32,
    cCertStore: u32,
    rghCertStore: **c_void,
    pFilterCallback: PFNCFILTERPROC,
    pvCallbackData: *c_void,
};

pub const CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO = extern struct {
    dwSize: u32,
    pwszPvkFileName: PWSTR,
    pwszProvName: PWSTR,
    dwProvType: u32,
};

pub const CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO = extern struct {
    dwSize: u32,
    pwszSigningCertFileName: PWSTR,
    dwPvkChoice: u32,
    Anonymous: CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO = extern struct {
    dwSize: u32,
    dwAttrFlags: u32,
    pwszDescription: [*:0]const u16,
    pwszMoreInfoLocation: [*:0]const u16,
    pszHashAlg: [*:0]const u8,
    pwszSigningCertDisplayString: [*:0]const u16,
    hAdditionalCertStore: *c_void,
    psAuthenticated: *CRYPT_ATTRIBUTES,
    psUnauthenticated: *CRYPT_ATTRIBUTES,
};

pub const CRYPTUI_WIZ_DIGITAL_SIGN_INFO = extern struct {
    dwSize: u32,
    dwSubjectChoice: u32,
    Anonymous1: CRYPTUI_WIZ_DIGITAL_SIGN_INFO._Anonymous1_e__Union,
    dwSigningCertChoice: u32,
    Anonymous2: CRYPTUI_WIZ_DIGITAL_SIGN_INFO._Anonymous2_e__Union,
    pwszTimestampURL: [*:0]const u16,
    dwAdditionalCertChoice: u32,
    pSignExtInfo: *CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT = extern struct {
    dwSize: u32,
    cbBlob: u32,
    pbBlob: *u8,
};

pub const CRYPTUI_INITDIALOG_STRUCT = extern struct {
    lParam: LPARAM,
    pCertContext: *CERT_CONTEXT,
};

pub const CRYPTUI_VIEWCERTIFICATE_STRUCTW = extern struct {
    dwSize: u32,
    hwndParent: HWND,
    dwFlags: u32,
    szTitle: [*:0]const u16,
    pCertContext: *CERT_CONTEXT,
    rgszPurposes: *PSTR,
    cPurposes: u32,
    Anonymous: CRYPTUI_VIEWCERTIFICATE_STRUCTW._Anonymous_e__Union,
    fpCryptProviderDataTrustedUsage: BOOL,
    idxSigner: u32,
    idxCert: u32,
    fCounterSigner: BOOL,
    idxCounterSigner: u32,
    cStores: u32,
    rghStores: **c_void,
    cPropSheetPages: u32,
    rgPropSheetPages: *PROPSHEETPAGEW,
    nStartPage: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CRYPTUI_VIEWCERTIFICATE_STRUCTA = extern struct {
    dwSize: u32,
    hwndParent: HWND,
    dwFlags: u32,
    szTitle: [*:0]const u8,
    pCertContext: *CERT_CONTEXT,
    rgszPurposes: *PSTR,
    cPurposes: u32,
    Anonymous: CRYPTUI_VIEWCERTIFICATE_STRUCTA._Anonymous_e__Union,
    fpCryptProviderDataTrustedUsage: BOOL,
    idxSigner: u32,
    idxCert: u32,
    fCounterSigner: BOOL,
    idxCounterSigner: u32,
    cStores: u32,
    rghStores: **c_void,
    cPropSheetPages: u32,
    rgPropSheetPages: *PROPSHEETPAGEA,
    nStartPage: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CRYPTUI_WIZ_EXPORT_INFO = extern struct {
    dwSize: u32,
    pwszExportFileName: [*:0]const u16,
    dwSubjectChoice: u32,
    Anonymous: CRYPTUI_WIZ_EXPORT_INFO._Anonymous_e__Union,
    cStores: u32,
    rghStores: **c_void,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO = extern struct {
    dwSize: u32,
    dwExportFormat: u32,
    fExportChain: BOOL,
    fExportPrivateKeys: BOOL,
    pwszPassword: [*:0]const u16,
    fStrongEncryption: BOOL,
};

pub const CRYPTUI_WIZ_IMPORT_SRC_INFO = extern struct {
    dwSize: u32,
    dwSubjectChoice: u32,
    Anonymous: CRYPTUI_WIZ_IMPORT_SRC_INFO._Anonymous_e__Union,
    dwFlags: u32,
    pwszPassword: [*:0]const u16,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const SIP_SUBJECTINFO = extern struct {
    cbSize: u32,
    pgSubjectType: *Guid,
    hFile: HANDLE,
    pwsFileName: [*:0]const u16,
    pwsDisplayName: [*:0]const u16,
    dwReserved1: u32,
    dwIntVersion: u32,
    hProv: ?*c_void,
    DigestAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    dwFlags: u32,
    dwEncodingType: u32,
    dwReserved2: u32,
    fdwCAPISettings: u32,
    fdwSecuritySettings: u32,
    dwIndex: u32,
    dwUnionChoice: u32,
    Anonymous: SIP_SUBJECTINFO._Anonymous_e__Union,
    pClientData: *c_void,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const MS_ADDINFO_FLAT = extern struct {
    cbStruct: u32,
    pIndirectData: *SIP_INDIRECT_DATA,
};

pub const MS_ADDINFO_CATALOGMEMBER = extern struct {
    cbStruct: u32,
    pStore: *CRYPTCATSTORE,
    pMember: *CRYPTCATMEMBER,
};

pub const MS_ADDINFO_BLOB = extern struct {
    cbStruct: u32,
    cbMemObject: u32,
    pbMemObject: *u8,
    cbMemSignedMsg: u32,
    pbMemSignedMsg: *u8,
};

pub const SIP_CAP_SET_V2 = extern struct {
    cbSize: u32,
    dwVersion: u32,
    isMultiSign: BOOL,
    dwReserved: u32,
};

pub const SIP_CAP_SET_V3 = extern struct {
    cbSize: u32,
    dwVersion: u32,
    isMultiSign: BOOL,
    Anonymous: SIP_CAP_SET_V3._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const SIP_INDIRECT_DATA = extern struct {
    Data: CRYPT_ATTRIBUTE_TYPE_VALUE,
    DigestAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    Digest: CRYPTOAPI_BLOB,
};

pub const pCryptSIPGetSignedDataMsg = fn(
    pSubjectInfo: *SIP_SUBJECTINFO,
    pdwEncodingType: *u32,
    dwIndex: u32,
    pcbSignedDataMsg: *u32,
    pbSignedDataMsg: *u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const pCryptSIPPutSignedDataMsg = fn(
    pSubjectInfo: *SIP_SUBJECTINFO,
    dwEncodingType: u32,
    pdwIndex: *u32,
    cbSignedDataMsg: u32,
    pbSignedDataMsg: *u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const pCryptSIPCreateIndirectData = fn(
    pSubjectInfo: *SIP_SUBJECTINFO,
    pcbIndirectData: *u32,
    pIndirectData: *SIP_INDIRECT_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const pCryptSIPVerifyIndirectData = fn(
    pSubjectInfo: *SIP_SUBJECTINFO,
    pIndirectData: *SIP_INDIRECT_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const pCryptSIPRemoveSignedDataMsg = fn(
    pSubjectInfo: *SIP_SUBJECTINFO,
    dwIndex: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const SIP_DISPATCH_INFO = extern struct {
    cbSize: u32,
    hSIP: HANDLE,
    pfGet: pCryptSIPGetSignedDataMsg,
    pfPut: pCryptSIPPutSignedDataMsg,
    pfCreate: pCryptSIPCreateIndirectData,
    pfVerify: pCryptSIPVerifyIndirectData,
    pfRemove: pCryptSIPRemoveSignedDataMsg,
};

pub const pfnIsFileSupported = fn(
    hFile: HANDLE,
    pgSubject: *Guid,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const pfnIsFileSupportedName = fn(
    pwszFileName: PWSTR,
    pgSubject: *Guid,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const SIP_ADD_NEWPROVIDER = extern struct {
    cbStruct: u32,
    pgSubject: *Guid,
    pwszDLLFileName: PWSTR,
    pwszMagicNumber: PWSTR,
    pwszIsFunctionName: PWSTR,
    pwszGetFuncName: PWSTR,
    pwszPutFuncName: PWSTR,
    pwszCreateFuncName: PWSTR,
    pwszVerifyFuncName: PWSTR,
    pwszRemoveFuncName: PWSTR,
    pwszIsFunctionNameFmt2: PWSTR,
    pwszGetCapFuncName: PWSTR,
};

pub const pCryptSIPGetCaps = fn(
    pSubjInfo: *SIP_SUBJECTINFO,
    pCaps: *SIP_CAP_SET_V3,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const pCryptSIPGetSealedDigest = fn(
    pSubjectInfo: *SIP_SUBJECTINFO,
    pSig: ?[*:0]const u8,
    dwSig: u32,
    pbDigest: ?[*:0]u8,
    pcbDigest: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CRYPTCATSTORE = extern struct {
    cbStruct: u32,
    dwPublicVersion: u32,
    pwszP7File: PWSTR,
    hProv: ?*c_void,
    dwEncodingType: u32,
    fdwStoreFlags: u32,
    hReserved: HANDLE,
    hAttrs: HANDLE,
    hCryptMsg: *c_void,
    hSorted: HANDLE,
};

pub const CRYPTCATMEMBER = extern struct {
    cbStruct: u32,
    pwszReferenceTag: PWSTR,
    pwszFileName: PWSTR,
    gSubjectType: Guid,
    fdwMemberFlags: u32,
    pIndirectData: *SIP_INDIRECT_DATA,
    dwCertVersion: u32,
    dwReserved: u32,
    hReserved: HANDLE,
    sEncodedIndirectData: CRYPTOAPI_BLOB,
    sEncodedMemberInfo: CRYPTOAPI_BLOB,
};

pub const CRYPTCATATTRIBUTE = extern struct {
    cbStruct: u32,
    pwszReferenceTag: PWSTR,
    dwAttrTypeAndAction: u32,
    cbValue: u32,
    pbValue: *u8,
    dwReserved: u32,
};

pub const CRYPTCATCDF = extern struct {
    cbStruct: u32,
    hFile: HANDLE,
    dwCurFilePos: u32,
    dwLastMemberOffset: u32,
    fEOF: BOOL,
    pwszResultDir: PWSTR,
    hCATStore: HANDLE,
};

pub const CATALOG_INFO = extern struct {
    cbStruct: u32,
    wszCatalogFile: [260]u16,
};

pub const PFN_CDF_PARSE_ERROR_CALLBACK = fn(
    dwErrorArea: u32,
    dwLocalError: u32,
    pwszLine: PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

const CLSID_CEnroll2_Value = @import("../zig.zig").Guid.initString("127698E4-E730-4E5C-A2B1-21490A70C8A1");
pub const CLSID_CEnroll2 = &CLSID_CEnroll2_Value;

const CLSID_CEnroll_Value = @import("../zig.zig").Guid.initString("43F8F289-7A20-11D0-8F06-00C04FC295E1");
pub const CLSID_CEnroll = &CLSID_CEnroll_Value;

const IID_ICEnroll_Value = @import("../zig.zig").Guid.initString("43F8F288-7A20-11D0-8F06-00C04FC295E1");
pub const IID_ICEnroll = &IID_ICEnroll_Value;
pub const ICEnroll = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        createFilePKCS10: fn(
            self: *const ICEnroll,
            DNName: BSTR,
            Usage: BSTR,
            wszPKCS10FileName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptFilePKCS7: fn(
            self: *const ICEnroll,
            wszPKCS7FileName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createPKCS10: fn(
            self: *const ICEnroll,
            DNName: BSTR,
            Usage: BSTR,
            pPKCS10: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptPKCS7: fn(
            self: *const ICEnroll,
            PKCS7: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getCertFromPKCS7: fn(
            self: *const ICEnroll,
            wszPKCS7: BSTR,
            pbstrCert: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        enumProviders: fn(
            self: *const ICEnroll,
            dwIndex: i32,
            dwFlags: i32,
            pbstrProvName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        enumContainers: fn(
            self: *const ICEnroll,
            dwIndex: i32,
            pbstr: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        freeRequestInfo: fn(
            self: *const ICEnroll,
            PKCS7OrPKCS10: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MyStoreName: fn(
            self: *const ICEnroll,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MyStoreName: fn(
            self: *const ICEnroll,
            bstrName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MyStoreType: fn(
            self: *const ICEnroll,
            pbstrType: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MyStoreType: fn(
            self: *const ICEnroll,
            bstrType: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MyStoreFlags: fn(
            self: *const ICEnroll,
            pdwFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MyStoreFlags: fn(
            self: *const ICEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CAStoreName: fn(
            self: *const ICEnroll,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CAStoreName: fn(
            self: *const ICEnroll,
            bstrName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CAStoreType: fn(
            self: *const ICEnroll,
            pbstrType: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CAStoreType: fn(
            self: *const ICEnroll,
            bstrType: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CAStoreFlags: fn(
            self: *const ICEnroll,
            pdwFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CAStoreFlags: fn(
            self: *const ICEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RootStoreName: fn(
            self: *const ICEnroll,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RootStoreName: fn(
            self: *const ICEnroll,
            bstrName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RootStoreType: fn(
            self: *const ICEnroll,
            pbstrType: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RootStoreType: fn(
            self: *const ICEnroll,
            bstrType: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RootStoreFlags: fn(
            self: *const ICEnroll,
            pdwFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RootStoreFlags: fn(
            self: *const ICEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RequestStoreName: fn(
            self: *const ICEnroll,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RequestStoreName: fn(
            self: *const ICEnroll,
            bstrName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RequestStoreType: fn(
            self: *const ICEnroll,
            pbstrType: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RequestStoreType: fn(
            self: *const ICEnroll,
            bstrType: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RequestStoreFlags: fn(
            self: *const ICEnroll,
            pdwFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RequestStoreFlags: fn(
            self: *const ICEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ContainerName: fn(
            self: *const ICEnroll,
            pbstrContainer: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ContainerName: fn(
            self: *const ICEnroll,
            bstrContainer: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ProviderName: fn(
            self: *const ICEnroll,
            pbstrProvider: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ProviderName: fn(
            self: *const ICEnroll,
            bstrProvider: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ProviderType: fn(
            self: *const ICEnroll,
            pdwType: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ProviderType: fn(
            self: *const ICEnroll,
            dwType: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_KeySpec: fn(
            self: *const ICEnroll,
            pdw: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_KeySpec: fn(
            self: *const ICEnroll,
            dw: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ProviderFlags: fn(
            self: *const ICEnroll,
            pdwFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ProviderFlags: fn(
            self: *const ICEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UseExistingKeySet: fn(
            self: *const ICEnroll,
            fUseExistingKeys: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_UseExistingKeySet: fn(
            self: *const ICEnroll,
            fUseExistingKeys: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_GenKeyFlags: fn(
            self: *const ICEnroll,
            pdwFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_GenKeyFlags: fn(
            self: *const ICEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DeleteRequestCert: fn(
            self: *const ICEnroll,
            fDelete: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DeleteRequestCert: fn(
            self: *const ICEnroll,
            fDelete: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_WriteCertToCSP: fn(
            self: *const ICEnroll,
            fBool: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_WriteCertToCSP: fn(
            self: *const ICEnroll,
            fBool: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SPCFileName: fn(
            self: *const ICEnroll,
            pbstr: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SPCFileName: fn(
            self: *const ICEnroll,
            bstr: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PVKFileName: fn(
            self: *const ICEnroll,
            pbstr: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_PVKFileName: fn(
            self: *const ICEnroll,
            bstr: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_HashAlgorithm: fn(
            self: *const ICEnroll,
            pbstr: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_HashAlgorithm: fn(
            self: *const ICEnroll,
            bstr: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_createFilePKCS10(self: *const T, DNName: BSTR, Usage: BSTR, wszPKCS10FileName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).createFilePKCS10(@ptrCast(*const ICEnroll, self), DNName, Usage, wszPKCS10FileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_acceptFilePKCS7(self: *const T, wszPKCS7FileName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).acceptFilePKCS7(@ptrCast(*const ICEnroll, self), wszPKCS7FileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_createPKCS10(self: *const T, DNName: BSTR, Usage: BSTR, pPKCS10: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).createPKCS10(@ptrCast(*const ICEnroll, self), DNName, Usage, pPKCS10);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_acceptPKCS7(self: *const T, PKCS7: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).acceptPKCS7(@ptrCast(*const ICEnroll, self), PKCS7);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_getCertFromPKCS7(self: *const T, wszPKCS7: BSTR, pbstrCert: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).getCertFromPKCS7(@ptrCast(*const ICEnroll, self), wszPKCS7, pbstrCert);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_enumProviders(self: *const T, dwIndex: i32, dwFlags: i32, pbstrProvName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).enumProviders(@ptrCast(*const ICEnroll, self), dwIndex, dwFlags, pbstrProvName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_enumContainers(self: *const T, dwIndex: i32, pbstr: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).enumContainers(@ptrCast(*const ICEnroll, self), dwIndex, pbstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_freeRequestInfo(self: *const T, PKCS7OrPKCS10: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).freeRequestInfo(@ptrCast(*const ICEnroll, self), PKCS7OrPKCS10);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_MyStoreName(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_MyStoreName(@ptrCast(*const ICEnroll, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_MyStoreName(self: *const T, bstrName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_MyStoreName(@ptrCast(*const ICEnroll, self), bstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_MyStoreType(self: *const T, pbstrType: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_MyStoreType(@ptrCast(*const ICEnroll, self), pbstrType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_MyStoreType(self: *const T, bstrType: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_MyStoreType(@ptrCast(*const ICEnroll, self), bstrType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_MyStoreFlags(self: *const T, pdwFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_MyStoreFlags(@ptrCast(*const ICEnroll, self), pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_MyStoreFlags(self: *const T, dwFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_MyStoreFlags(@ptrCast(*const ICEnroll, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_CAStoreName(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_CAStoreName(@ptrCast(*const ICEnroll, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_CAStoreName(self: *const T, bstrName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_CAStoreName(@ptrCast(*const ICEnroll, self), bstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_CAStoreType(self: *const T, pbstrType: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_CAStoreType(@ptrCast(*const ICEnroll, self), pbstrType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_CAStoreType(self: *const T, bstrType: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_CAStoreType(@ptrCast(*const ICEnroll, self), bstrType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_CAStoreFlags(self: *const T, pdwFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_CAStoreFlags(@ptrCast(*const ICEnroll, self), pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_CAStoreFlags(self: *const T, dwFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_CAStoreFlags(@ptrCast(*const ICEnroll, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_RootStoreName(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_RootStoreName(@ptrCast(*const ICEnroll, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_RootStoreName(self: *const T, bstrName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_RootStoreName(@ptrCast(*const ICEnroll, self), bstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_RootStoreType(self: *const T, pbstrType: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_RootStoreType(@ptrCast(*const ICEnroll, self), pbstrType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_RootStoreType(self: *const T, bstrType: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_RootStoreType(@ptrCast(*const ICEnroll, self), bstrType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_RootStoreFlags(self: *const T, pdwFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_RootStoreFlags(@ptrCast(*const ICEnroll, self), pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_RootStoreFlags(self: *const T, dwFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_RootStoreFlags(@ptrCast(*const ICEnroll, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_RequestStoreName(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_RequestStoreName(@ptrCast(*const ICEnroll, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_RequestStoreName(self: *const T, bstrName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_RequestStoreName(@ptrCast(*const ICEnroll, self), bstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_RequestStoreType(self: *const T, pbstrType: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_RequestStoreType(@ptrCast(*const ICEnroll, self), pbstrType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_RequestStoreType(self: *const T, bstrType: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_RequestStoreType(@ptrCast(*const ICEnroll, self), bstrType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_RequestStoreFlags(self: *const T, pdwFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_RequestStoreFlags(@ptrCast(*const ICEnroll, self), pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_RequestStoreFlags(self: *const T, dwFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_RequestStoreFlags(@ptrCast(*const ICEnroll, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_ContainerName(self: *const T, pbstrContainer: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_ContainerName(@ptrCast(*const ICEnroll, self), pbstrContainer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_ContainerName(self: *const T, bstrContainer: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_ContainerName(@ptrCast(*const ICEnroll, self), bstrContainer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_ProviderName(self: *const T, pbstrProvider: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_ProviderName(@ptrCast(*const ICEnroll, self), pbstrProvider);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_ProviderName(self: *const T, bstrProvider: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_ProviderName(@ptrCast(*const ICEnroll, self), bstrProvider);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_ProviderType(self: *const T, pdwType: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_ProviderType(@ptrCast(*const ICEnroll, self), pdwType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_ProviderType(self: *const T, dwType: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_ProviderType(@ptrCast(*const ICEnroll, self), dwType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_KeySpec(self: *const T, pdw: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_KeySpec(@ptrCast(*const ICEnroll, self), pdw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_KeySpec(self: *const T, dw: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_KeySpec(@ptrCast(*const ICEnroll, self), dw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_ProviderFlags(self: *const T, pdwFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_ProviderFlags(@ptrCast(*const ICEnroll, self), pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_ProviderFlags(self: *const T, dwFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_ProviderFlags(@ptrCast(*const ICEnroll, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_UseExistingKeySet(self: *const T, fUseExistingKeys: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_UseExistingKeySet(@ptrCast(*const ICEnroll, self), fUseExistingKeys);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_UseExistingKeySet(self: *const T, fUseExistingKeys: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_UseExistingKeySet(@ptrCast(*const ICEnroll, self), fUseExistingKeys);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_GenKeyFlags(self: *const T, pdwFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_GenKeyFlags(@ptrCast(*const ICEnroll, self), pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_GenKeyFlags(self: *const T, dwFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_GenKeyFlags(@ptrCast(*const ICEnroll, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_DeleteRequestCert(self: *const T, fDelete: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_DeleteRequestCert(@ptrCast(*const ICEnroll, self), fDelete);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_DeleteRequestCert(self: *const T, fDelete: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_DeleteRequestCert(@ptrCast(*const ICEnroll, self), fDelete);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_WriteCertToCSP(self: *const T, fBool: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_WriteCertToCSP(@ptrCast(*const ICEnroll, self), fBool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_WriteCertToCSP(self: *const T, fBool: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_WriteCertToCSP(@ptrCast(*const ICEnroll, self), fBool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_SPCFileName(self: *const T, pbstr: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_SPCFileName(@ptrCast(*const ICEnroll, self), pbstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_SPCFileName(self: *const T, bstr: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_SPCFileName(@ptrCast(*const ICEnroll, self), bstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_PVKFileName(self: *const T, pbstr: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_PVKFileName(@ptrCast(*const ICEnroll, self), pbstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_PVKFileName(self: *const T, bstr: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_PVKFileName(@ptrCast(*const ICEnroll, self), bstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_get_HashAlgorithm(self: *const T, pbstr: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).get_HashAlgorithm(@ptrCast(*const ICEnroll, self), pbstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll_put_HashAlgorithm(self: *const T, bstr: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll.VTable, self.vtable).put_HashAlgorithm(@ptrCast(*const ICEnroll, self), bstr);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICEnroll2_Value = @import("../zig.zig").Guid.initString("704CA730-C90B-11D1-9BEC-00C04FC295E1");
pub const IID_ICEnroll2 = &IID_ICEnroll2_Value;
pub const ICEnroll2 = extern struct {
    pub const VTable = extern struct {
        base: ICEnroll.VTable,
        addCertTypeToRequest: fn(
            self: *const ICEnroll2,
            CertType: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addNameValuePairToSignature: fn(
            self: *const ICEnroll2,
            Name: BSTR,
            Value: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_WriteCertToUserDS: fn(
            self: *const ICEnroll2,
            fBool: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_WriteCertToUserDS: fn(
            self: *const ICEnroll2,
            fBool: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EnableT61DNEncoding: fn(
            self: *const ICEnroll2,
            fBool: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_EnableT61DNEncoding: fn(
            self: *const ICEnroll2,
            fBool: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICEnroll.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll2_addCertTypeToRequest(self: *const T, CertType: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll2.VTable, self.vtable).addCertTypeToRequest(@ptrCast(*const ICEnroll2, self), CertType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll2_addNameValuePairToSignature(self: *const T, Name: BSTR, Value: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll2.VTable, self.vtable).addNameValuePairToSignature(@ptrCast(*const ICEnroll2, self), Name, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll2_get_WriteCertToUserDS(self: *const T, fBool: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll2.VTable, self.vtable).get_WriteCertToUserDS(@ptrCast(*const ICEnroll2, self), fBool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll2_put_WriteCertToUserDS(self: *const T, fBool: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll2.VTable, self.vtable).put_WriteCertToUserDS(@ptrCast(*const ICEnroll2, self), fBool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll2_get_EnableT61DNEncoding(self: *const T, fBool: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll2.VTable, self.vtable).get_EnableT61DNEncoding(@ptrCast(*const ICEnroll2, self), fBool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll2_put_EnableT61DNEncoding(self: *const T, fBool: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll2.VTable, self.vtable).put_EnableT61DNEncoding(@ptrCast(*const ICEnroll2, self), fBool);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICEnroll3_Value = @import("../zig.zig").Guid.initString("C28C2D95-B7DE-11D2-A421-00C04F79FE8E");
pub const IID_ICEnroll3 = &IID_ICEnroll3_Value;
pub const ICEnroll3 = extern struct {
    pub const VTable = extern struct {
        base: ICEnroll2.VTable,
        InstallPKCS7: fn(
            self: *const ICEnroll3,
            PKCS7: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const ICEnroll3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedKeySpec: fn(
            self: *const ICEnroll3,
            pdwKeySpec: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyLen: fn(
            self: *const ICEnroll3,
            fMin: BOOL,
            fExchange: BOOL,
            pdwKeySize: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumAlgs: fn(
            self: *const ICEnroll3,
            dwIndex: i32,
            algClass: i32,
            pdwAlgID: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAlgName: fn(
            self: *const ICEnroll3,
            algID: i32,
            pbstr: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ReuseHardwareKeyIfUnableToGenNew: fn(
            self: *const ICEnroll3,
            fReuseHardwareKeyIfUnableToGenNew: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ReuseHardwareKeyIfUnableToGenNew: fn(
            self: *const ICEnroll3,
            fReuseHardwareKeyIfUnableToGenNew: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_HashAlgID: fn(
            self: *const ICEnroll3,
            hashAlgID: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_HashAlgID: fn(
            self: *const ICEnroll3,
            hashAlgID: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_LimitExchangeKeyToEncipherment: fn(
            self: *const ICEnroll3,
            fLimitExchangeKeyToEncipherment: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_LimitExchangeKeyToEncipherment: fn(
            self: *const ICEnroll3,
            fLimitExchangeKeyToEncipherment: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_EnableSMIMECapabilities: fn(
            self: *const ICEnroll3,
            fEnableSMIMECapabilities: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EnableSMIMECapabilities: fn(
            self: *const ICEnroll3,
            fEnableSMIMECapabilities: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICEnroll2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll3_InstallPKCS7(self: *const T, PKCS7: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll3.VTable, self.vtable).InstallPKCS7(@ptrCast(*const ICEnroll3, self), PKCS7);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll3_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll3.VTable, self.vtable).Reset(@ptrCast(*const ICEnroll3, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll3_GetSupportedKeySpec(self: *const T, pdwKeySpec: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll3.VTable, self.vtable).GetSupportedKeySpec(@ptrCast(*const ICEnroll3, self), pdwKeySpec);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll3_GetKeyLen(self: *const T, fMin: BOOL, fExchange: BOOL, pdwKeySize: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll3.VTable, self.vtable).GetKeyLen(@ptrCast(*const ICEnroll3, self), fMin, fExchange, pdwKeySize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll3_EnumAlgs(self: *const T, dwIndex: i32, algClass: i32, pdwAlgID: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll3.VTable, self.vtable).EnumAlgs(@ptrCast(*const ICEnroll3, self), dwIndex, algClass, pdwAlgID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll3_GetAlgName(self: *const T, algID: i32, pbstr: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll3.VTable, self.vtable).GetAlgName(@ptrCast(*const ICEnroll3, self), algID, pbstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll3_put_ReuseHardwareKeyIfUnableToGenNew(self: *const T, fReuseHardwareKeyIfUnableToGenNew: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll3.VTable, self.vtable).put_ReuseHardwareKeyIfUnableToGenNew(@ptrCast(*const ICEnroll3, self), fReuseHardwareKeyIfUnableToGenNew);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll3_get_ReuseHardwareKeyIfUnableToGenNew(self: *const T, fReuseHardwareKeyIfUnableToGenNew: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll3.VTable, self.vtable).get_ReuseHardwareKeyIfUnableToGenNew(@ptrCast(*const ICEnroll3, self), fReuseHardwareKeyIfUnableToGenNew);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll3_put_HashAlgID(self: *const T, hashAlgID: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll3.VTable, self.vtable).put_HashAlgID(@ptrCast(*const ICEnroll3, self), hashAlgID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll3_get_HashAlgID(self: *const T, hashAlgID: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll3.VTable, self.vtable).get_HashAlgID(@ptrCast(*const ICEnroll3, self), hashAlgID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll3_put_LimitExchangeKeyToEncipherment(self: *const T, fLimitExchangeKeyToEncipherment: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll3.VTable, self.vtable).put_LimitExchangeKeyToEncipherment(@ptrCast(*const ICEnroll3, self), fLimitExchangeKeyToEncipherment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll3_get_LimitExchangeKeyToEncipherment(self: *const T, fLimitExchangeKeyToEncipherment: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll3.VTable, self.vtable).get_LimitExchangeKeyToEncipherment(@ptrCast(*const ICEnroll3, self), fLimitExchangeKeyToEncipherment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll3_put_EnableSMIMECapabilities(self: *const T, fEnableSMIMECapabilities: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll3.VTable, self.vtable).put_EnableSMIMECapabilities(@ptrCast(*const ICEnroll3, self), fEnableSMIMECapabilities);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll3_get_EnableSMIMECapabilities(self: *const T, fEnableSMIMECapabilities: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll3.VTable, self.vtable).get_EnableSMIMECapabilities(@ptrCast(*const ICEnroll3, self), fEnableSMIMECapabilities);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICEnroll4_Value = @import("../zig.zig").Guid.initString("C1F1188A-2EB5-4A80-841B-7E729A356D90");
pub const IID_ICEnroll4 = &IID_ICEnroll4_Value;
pub const ICEnroll4 = extern struct {
    pub const VTable = extern struct {
        base: ICEnroll3.VTable,
        put_PrivateKeyArchiveCertificate: fn(
            self: *const ICEnroll4,
            bstrCert: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrivateKeyArchiveCertificate: fn(
            self: *const ICEnroll4,
            pbstrCert: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ThumbPrint: fn(
            self: *const ICEnroll4,
            bstrThumbPrint: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ThumbPrint: fn(
            self: *const ICEnroll4,
            pbstrThumbPrint: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        binaryToString: fn(
            self: *const ICEnroll4,
            Flags: i32,
            strBinary: BSTR,
            pstrEncoded: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        stringToBinary: fn(
            self: *const ICEnroll4,
            Flags: i32,
            strEncoded: BSTR,
            pstrBinary: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addExtensionToRequest: fn(
            self: *const ICEnroll4,
            Flags: i32,
            strName: BSTR,
            strValue: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addAttributeToRequest: fn(
            self: *const ICEnroll4,
            Flags: i32,
            strName: BSTR,
            strValue: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addNameValuePairToRequest: fn(
            self: *const ICEnroll4,
            Flags: i32,
            strName: BSTR,
            strValue: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        resetExtensions: fn(
            self: *const ICEnroll4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        resetAttributes: fn(
            self: *const ICEnroll4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createRequest: fn(
            self: *const ICEnroll4,
            Flags: i32,
            strDNName: BSTR,
            Usage: BSTR,
            pstrRequest: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createFileRequest: fn(
            self: *const ICEnroll4,
            Flags: i32,
            strDNName: BSTR,
            strUsage: BSTR,
            strRequestFileName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptResponse: fn(
            self: *const ICEnroll4,
            strResponse: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptFileResponse: fn(
            self: *const ICEnroll4,
            strResponseFileName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getCertFromResponse: fn(
            self: *const ICEnroll4,
            strResponse: BSTR,
            pstrCert: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getCertFromFileResponse: fn(
            self: *const ICEnroll4,
            strResponseFileName: BSTR,
            pstrCert: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createPFX: fn(
            self: *const ICEnroll4,
            strPassword: BSTR,
            pstrPFX: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createFilePFX: fn(
            self: *const ICEnroll4,
            strPassword: BSTR,
            strPFXFileName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setPendingRequestInfo: fn(
            self: *const ICEnroll4,
            lRequestID: i32,
            strCADNS: BSTR,
            strCAName: BSTR,
            strFriendlyName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        enumPendingRequest: fn(
            self: *const ICEnroll4,
            lIndex: i32,
            lDesiredProperty: i32,
            pvarProperty: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removePendingRequest: fn(
            self: *const ICEnroll4,
            strThumbprint: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyLenEx: fn(
            self: *const ICEnroll4,
            lSizeSpec: i32,
            lKeySpec: i32,
            pdwKeySize: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallPKCS7Ex: fn(
            self: *const ICEnroll4,
            PKCS7: BSTR,
            plCertInstalled: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addCertTypeToRequestEx: fn(
            self: *const ICEnroll4,
            lType: i32,
            bstrOIDOrName: BSTR,
            lMajorVersion: i32,
            fMinorVersion: BOOL,
            lMinorVersion: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProviderType: fn(
            self: *const ICEnroll4,
            strProvName: BSTR,
            plProvType: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SignerCertificate: fn(
            self: *const ICEnroll4,
            bstrCert: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ClientId: fn(
            self: *const ICEnroll4,
            lClientId: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ClientId: fn(
            self: *const ICEnroll4,
            plClientId: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addBlobPropertyToCertificate: fn(
            self: *const ICEnroll4,
            lPropertyId: i32,
            lReserved: i32,
            bstrProperty: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        resetBlobProperties: fn(
            self: *const ICEnroll4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_IncludeSubjectKeyID: fn(
            self: *const ICEnroll4,
            fInclude: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IncludeSubjectKeyID: fn(
            self: *const ICEnroll4,
            pfInclude: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICEnroll3.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_put_PrivateKeyArchiveCertificate(self: *const T, bstrCert: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).put_PrivateKeyArchiveCertificate(@ptrCast(*const ICEnroll4, self), bstrCert);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_get_PrivateKeyArchiveCertificate(self: *const T, pbstrCert: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).get_PrivateKeyArchiveCertificate(@ptrCast(*const ICEnroll4, self), pbstrCert);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_put_ThumbPrint(self: *const T, bstrThumbPrint: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).put_ThumbPrint(@ptrCast(*const ICEnroll4, self), bstrThumbPrint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_get_ThumbPrint(self: *const T, pbstrThumbPrint: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).get_ThumbPrint(@ptrCast(*const ICEnroll4, self), pbstrThumbPrint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_binaryToString(self: *const T, Flags: i32, strBinary: BSTR, pstrEncoded: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).binaryToString(@ptrCast(*const ICEnroll4, self), Flags, strBinary, pstrEncoded);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_stringToBinary(self: *const T, Flags: i32, strEncoded: BSTR, pstrBinary: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).stringToBinary(@ptrCast(*const ICEnroll4, self), Flags, strEncoded, pstrBinary);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_addExtensionToRequest(self: *const T, Flags: i32, strName: BSTR, strValue: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).addExtensionToRequest(@ptrCast(*const ICEnroll4, self), Flags, strName, strValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_addAttributeToRequest(self: *const T, Flags: i32, strName: BSTR, strValue: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).addAttributeToRequest(@ptrCast(*const ICEnroll4, self), Flags, strName, strValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_addNameValuePairToRequest(self: *const T, Flags: i32, strName: BSTR, strValue: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).addNameValuePairToRequest(@ptrCast(*const ICEnroll4, self), Flags, strName, strValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_resetExtensions(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).resetExtensions(@ptrCast(*const ICEnroll4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_resetAttributes(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).resetAttributes(@ptrCast(*const ICEnroll4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_createRequest(self: *const T, Flags: i32, strDNName: BSTR, Usage: BSTR, pstrRequest: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).createRequest(@ptrCast(*const ICEnroll4, self), Flags, strDNName, Usage, pstrRequest);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_createFileRequest(self: *const T, Flags: i32, strDNName: BSTR, strUsage: BSTR, strRequestFileName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).createFileRequest(@ptrCast(*const ICEnroll4, self), Flags, strDNName, strUsage, strRequestFileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_acceptResponse(self: *const T, strResponse: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).acceptResponse(@ptrCast(*const ICEnroll4, self), strResponse);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_acceptFileResponse(self: *const T, strResponseFileName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).acceptFileResponse(@ptrCast(*const ICEnroll4, self), strResponseFileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_getCertFromResponse(self: *const T, strResponse: BSTR, pstrCert: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).getCertFromResponse(@ptrCast(*const ICEnroll4, self), strResponse, pstrCert);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_getCertFromFileResponse(self: *const T, strResponseFileName: BSTR, pstrCert: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).getCertFromFileResponse(@ptrCast(*const ICEnroll4, self), strResponseFileName, pstrCert);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_createPFX(self: *const T, strPassword: BSTR, pstrPFX: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).createPFX(@ptrCast(*const ICEnroll4, self), strPassword, pstrPFX);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_createFilePFX(self: *const T, strPassword: BSTR, strPFXFileName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).createFilePFX(@ptrCast(*const ICEnroll4, self), strPassword, strPFXFileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_setPendingRequestInfo(self: *const T, lRequestID: i32, strCADNS: BSTR, strCAName: BSTR, strFriendlyName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).setPendingRequestInfo(@ptrCast(*const ICEnroll4, self), lRequestID, strCADNS, strCAName, strFriendlyName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_enumPendingRequest(self: *const T, lIndex: i32, lDesiredProperty: i32, pvarProperty: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).enumPendingRequest(@ptrCast(*const ICEnroll4, self), lIndex, lDesiredProperty, pvarProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_removePendingRequest(self: *const T, strThumbprint: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).removePendingRequest(@ptrCast(*const ICEnroll4, self), strThumbprint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_GetKeyLenEx(self: *const T, lSizeSpec: i32, lKeySpec: i32, pdwKeySize: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).GetKeyLenEx(@ptrCast(*const ICEnroll4, self), lSizeSpec, lKeySpec, pdwKeySize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_InstallPKCS7Ex(self: *const T, PKCS7: BSTR, plCertInstalled: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).InstallPKCS7Ex(@ptrCast(*const ICEnroll4, self), PKCS7, plCertInstalled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_addCertTypeToRequestEx(self: *const T, lType: i32, bstrOIDOrName: BSTR, lMajorVersion: i32, fMinorVersion: BOOL, lMinorVersion: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).addCertTypeToRequestEx(@ptrCast(*const ICEnroll4, self), lType, bstrOIDOrName, lMajorVersion, fMinorVersion, lMinorVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_getProviderType(self: *const T, strProvName: BSTR, plProvType: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).getProviderType(@ptrCast(*const ICEnroll4, self), strProvName, plProvType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_put_SignerCertificate(self: *const T, bstrCert: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).put_SignerCertificate(@ptrCast(*const ICEnroll4, self), bstrCert);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_put_ClientId(self: *const T, lClientId: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).put_ClientId(@ptrCast(*const ICEnroll4, self), lClientId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_get_ClientId(self: *const T, plClientId: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).get_ClientId(@ptrCast(*const ICEnroll4, self), plClientId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_addBlobPropertyToCertificate(self: *const T, lPropertyId: i32, lReserved: i32, bstrProperty: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).addBlobPropertyToCertificate(@ptrCast(*const ICEnroll4, self), lPropertyId, lReserved, bstrProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_resetBlobProperties(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).resetBlobProperties(@ptrCast(*const ICEnroll4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_put_IncludeSubjectKeyID(self: *const T, fInclude: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).put_IncludeSubjectKeyID(@ptrCast(*const ICEnroll4, self), fInclude);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICEnroll4_get_IncludeSubjectKeyID(self: *const T, pfInclude: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICEnroll4.VTable, self.vtable).get_IncludeSubjectKeyID(@ptrCast(*const ICEnroll4, self), pfInclude);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnroll_Value = @import("../zig.zig").Guid.initString("ACAA7838-4585-11D1-AB57-00C04FC295E1");
pub const IID_IEnroll = &IID_IEnroll_Value;
pub const IEnroll = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        createFilePKCS10WStr: fn(
            self: *const IEnroll,
            DNName: [*:0]const u16,
            Usage: [*:0]const u16,
            wszPKCS10FileName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptFilePKCS7WStr: fn(
            self: *const IEnroll,
            wszPKCS7FileName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createPKCS10WStr: fn(
            self: *const IEnroll,
            DNName: [*:0]const u16,
            Usage: [*:0]const u16,
            pPkcs10Blob: *CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptPKCS7Blob: fn(
            self: *const IEnroll,
            pBlobPKCS7: *CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getCertContextFromPKCS7: fn(
            self: *const IEnroll,
            pBlobPKCS7: *CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) *CERT_CONTEXT,
        getMyStore: fn(
            self: *const IEnroll,
        ) callconv(@import("std").os.windows.WINAPI) *c_void,
        getCAStore: fn(
            self: *const IEnroll,
        ) callconv(@import("std").os.windows.WINAPI) *c_void,
        getROOTHStore: fn(
            self: *const IEnroll,
        ) callconv(@import("std").os.windows.WINAPI) *c_void,
        enumProvidersWStr: fn(
            self: *const IEnroll,
            dwIndex: i32,
            dwFlags: i32,
            pbstrProvName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        enumContainersWStr: fn(
            self: *const IEnroll,
            dwIndex: i32,
            pbstr: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        freeRequestInfoBlob: fn(
            self: *const IEnroll,
            pkcs7OrPkcs10: CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MyStoreNameWStr: fn(
            self: *const IEnroll,
            szwName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MyStoreNameWStr: fn(
            self: *const IEnroll,
            szwName: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MyStoreTypeWStr: fn(
            self: *const IEnroll,
            szwType: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MyStoreTypeWStr: fn(
            self: *const IEnroll,
            szwType: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MyStoreFlags: fn(
            self: *const IEnroll,
            pdwFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MyStoreFlags: fn(
            self: *const IEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CAStoreNameWStr: fn(
            self: *const IEnroll,
            szwName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CAStoreNameWStr: fn(
            self: *const IEnroll,
            szwName: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CAStoreTypeWStr: fn(
            self: *const IEnroll,
            szwType: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CAStoreTypeWStr: fn(
            self: *const IEnroll,
            szwType: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CAStoreFlags: fn(
            self: *const IEnroll,
            pdwFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CAStoreFlags: fn(
            self: *const IEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RootStoreNameWStr: fn(
            self: *const IEnroll,
            szwName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RootStoreNameWStr: fn(
            self: *const IEnroll,
            szwName: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RootStoreTypeWStr: fn(
            self: *const IEnroll,
            szwType: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RootStoreTypeWStr: fn(
            self: *const IEnroll,
            szwType: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RootStoreFlags: fn(
            self: *const IEnroll,
            pdwFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RootStoreFlags: fn(
            self: *const IEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RequestStoreNameWStr: fn(
            self: *const IEnroll,
            szwName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RequestStoreNameWStr: fn(
            self: *const IEnroll,
            szwName: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RequestStoreTypeWStr: fn(
            self: *const IEnroll,
            szwType: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RequestStoreTypeWStr: fn(
            self: *const IEnroll,
            szwType: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RequestStoreFlags: fn(
            self: *const IEnroll,
            pdwFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RequestStoreFlags: fn(
            self: *const IEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ContainerNameWStr: fn(
            self: *const IEnroll,
            szwContainer: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ContainerNameWStr: fn(
            self: *const IEnroll,
            szwContainer: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ProviderNameWStr: fn(
            self: *const IEnroll,
            szwProvider: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ProviderNameWStr: fn(
            self: *const IEnroll,
            szwProvider: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ProviderType: fn(
            self: *const IEnroll,
            pdwType: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ProviderType: fn(
            self: *const IEnroll,
            dwType: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_KeySpec: fn(
            self: *const IEnroll,
            pdw: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_KeySpec: fn(
            self: *const IEnroll,
            dw: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ProviderFlags: fn(
            self: *const IEnroll,
            pdwFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ProviderFlags: fn(
            self: *const IEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UseExistingKeySet: fn(
            self: *const IEnroll,
            fUseExistingKeys: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_UseExistingKeySet: fn(
            self: *const IEnroll,
            fUseExistingKeys: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_GenKeyFlags: fn(
            self: *const IEnroll,
            pdwFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_GenKeyFlags: fn(
            self: *const IEnroll,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DeleteRequestCert: fn(
            self: *const IEnroll,
            fDelete: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DeleteRequestCert: fn(
            self: *const IEnroll,
            fDelete: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_WriteCertToUserDS: fn(
            self: *const IEnroll,
            fBool: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_WriteCertToUserDS: fn(
            self: *const IEnroll,
            fBool: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EnableT61DNEncoding: fn(
            self: *const IEnroll,
            fBool: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_EnableT61DNEncoding: fn(
            self: *const IEnroll,
            fBool: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_WriteCertToCSP: fn(
            self: *const IEnroll,
            fBool: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_WriteCertToCSP: fn(
            self: *const IEnroll,
            fBool: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SPCFileNameWStr: fn(
            self: *const IEnroll,
            szw: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SPCFileNameWStr: fn(
            self: *const IEnroll,
            szw: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PVKFileNameWStr: fn(
            self: *const IEnroll,
            szw: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_PVKFileNameWStr: fn(
            self: *const IEnroll,
            szw: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_HashAlgorithmWStr: fn(
            self: *const IEnroll,
            szw: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_HashAlgorithmWStr: fn(
            self: *const IEnroll,
            szw: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RenewalCertificate: fn(
            self: *const IEnroll,
            ppCertContext: **CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_RenewalCertificate: fn(
            self: *const IEnroll,
            pCertContext: *CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCertTypeToRequestWStr: fn(
            self: *const IEnroll,
            szw: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddNameValuePairToSignatureWStr: fn(
            self: *const IEnroll,
            Name: PWSTR,
            Value: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddExtensionsToRequest: fn(
            self: *const IEnroll,
            pCertExtensions: *CERT_EXTENSIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAuthenticatedAttributesToPKCS7Request: fn(
            self: *const IEnroll,
            pAttributes: *CRYPT_ATTRIBUTES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePKCS7RequestFromRequest: fn(
            self: *const IEnroll,
            pRequest: *CRYPTOAPI_BLOB,
            pSigningCertContext: *CERT_CONTEXT,
            pPkcs7Blob: *CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_createFilePKCS10WStr(self: *const T, DNName: [*:0]const u16, Usage: [*:0]const u16, wszPKCS10FileName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).createFilePKCS10WStr(@ptrCast(*const IEnroll, self), DNName, Usage, wszPKCS10FileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_acceptFilePKCS7WStr(self: *const T, wszPKCS7FileName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).acceptFilePKCS7WStr(@ptrCast(*const IEnroll, self), wszPKCS7FileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_createPKCS10WStr(self: *const T, DNName: [*:0]const u16, Usage: [*:0]const u16, pPkcs10Blob: *CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).createPKCS10WStr(@ptrCast(*const IEnroll, self), DNName, Usage, pPkcs10Blob);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_acceptPKCS7Blob(self: *const T, pBlobPKCS7: *CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).acceptPKCS7Blob(@ptrCast(*const IEnroll, self), pBlobPKCS7);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_getCertContextFromPKCS7(self: *const T, pBlobPKCS7: *CRYPTOAPI_BLOB) callconv(.Inline) *CERT_CONTEXT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).getCertContextFromPKCS7(@ptrCast(*const IEnroll, self), pBlobPKCS7);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_getMyStore(self: *const T) callconv(.Inline) *c_void {
            return @ptrCast(*const IEnroll.VTable, self.vtable).getMyStore(@ptrCast(*const IEnroll, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_getCAStore(self: *const T) callconv(.Inline) *c_void {
            return @ptrCast(*const IEnroll.VTable, self.vtable).getCAStore(@ptrCast(*const IEnroll, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_getROOTHStore(self: *const T) callconv(.Inline) *c_void {
            return @ptrCast(*const IEnroll.VTable, self.vtable).getROOTHStore(@ptrCast(*const IEnroll, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_enumProvidersWStr(self: *const T, dwIndex: i32, dwFlags: i32, pbstrProvName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).enumProvidersWStr(@ptrCast(*const IEnroll, self), dwIndex, dwFlags, pbstrProvName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_enumContainersWStr(self: *const T, dwIndex: i32, pbstr: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).enumContainersWStr(@ptrCast(*const IEnroll, self), dwIndex, pbstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_freeRequestInfoBlob(self: *const T, pkcs7OrPkcs10: CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).freeRequestInfoBlob(@ptrCast(*const IEnroll, self), pkcs7OrPkcs10);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_MyStoreNameWStr(self: *const T, szwName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_MyStoreNameWStr(@ptrCast(*const IEnroll, self), szwName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_MyStoreNameWStr(self: *const T, szwName: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_MyStoreNameWStr(@ptrCast(*const IEnroll, self), szwName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_MyStoreTypeWStr(self: *const T, szwType: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_MyStoreTypeWStr(@ptrCast(*const IEnroll, self), szwType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_MyStoreTypeWStr(self: *const T, szwType: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_MyStoreTypeWStr(@ptrCast(*const IEnroll, self), szwType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_MyStoreFlags(self: *const T, pdwFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_MyStoreFlags(@ptrCast(*const IEnroll, self), pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_MyStoreFlags(self: *const T, dwFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_MyStoreFlags(@ptrCast(*const IEnroll, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_CAStoreNameWStr(self: *const T, szwName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_CAStoreNameWStr(@ptrCast(*const IEnroll, self), szwName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_CAStoreNameWStr(self: *const T, szwName: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_CAStoreNameWStr(@ptrCast(*const IEnroll, self), szwName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_CAStoreTypeWStr(self: *const T, szwType: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_CAStoreTypeWStr(@ptrCast(*const IEnroll, self), szwType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_CAStoreTypeWStr(self: *const T, szwType: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_CAStoreTypeWStr(@ptrCast(*const IEnroll, self), szwType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_CAStoreFlags(self: *const T, pdwFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_CAStoreFlags(@ptrCast(*const IEnroll, self), pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_CAStoreFlags(self: *const T, dwFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_CAStoreFlags(@ptrCast(*const IEnroll, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_RootStoreNameWStr(self: *const T, szwName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_RootStoreNameWStr(@ptrCast(*const IEnroll, self), szwName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_RootStoreNameWStr(self: *const T, szwName: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_RootStoreNameWStr(@ptrCast(*const IEnroll, self), szwName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_RootStoreTypeWStr(self: *const T, szwType: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_RootStoreTypeWStr(@ptrCast(*const IEnroll, self), szwType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_RootStoreTypeWStr(self: *const T, szwType: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_RootStoreTypeWStr(@ptrCast(*const IEnroll, self), szwType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_RootStoreFlags(self: *const T, pdwFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_RootStoreFlags(@ptrCast(*const IEnroll, self), pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_RootStoreFlags(self: *const T, dwFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_RootStoreFlags(@ptrCast(*const IEnroll, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_RequestStoreNameWStr(self: *const T, szwName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_RequestStoreNameWStr(@ptrCast(*const IEnroll, self), szwName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_RequestStoreNameWStr(self: *const T, szwName: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_RequestStoreNameWStr(@ptrCast(*const IEnroll, self), szwName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_RequestStoreTypeWStr(self: *const T, szwType: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_RequestStoreTypeWStr(@ptrCast(*const IEnroll, self), szwType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_RequestStoreTypeWStr(self: *const T, szwType: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_RequestStoreTypeWStr(@ptrCast(*const IEnroll, self), szwType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_RequestStoreFlags(self: *const T, pdwFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_RequestStoreFlags(@ptrCast(*const IEnroll, self), pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_RequestStoreFlags(self: *const T, dwFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_RequestStoreFlags(@ptrCast(*const IEnroll, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_ContainerNameWStr(self: *const T, szwContainer: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_ContainerNameWStr(@ptrCast(*const IEnroll, self), szwContainer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_ContainerNameWStr(self: *const T, szwContainer: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_ContainerNameWStr(@ptrCast(*const IEnroll, self), szwContainer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_ProviderNameWStr(self: *const T, szwProvider: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_ProviderNameWStr(@ptrCast(*const IEnroll, self), szwProvider);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_ProviderNameWStr(self: *const T, szwProvider: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_ProviderNameWStr(@ptrCast(*const IEnroll, self), szwProvider);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_ProviderType(self: *const T, pdwType: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_ProviderType(@ptrCast(*const IEnroll, self), pdwType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_ProviderType(self: *const T, dwType: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_ProviderType(@ptrCast(*const IEnroll, self), dwType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_KeySpec(self: *const T, pdw: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_KeySpec(@ptrCast(*const IEnroll, self), pdw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_KeySpec(self: *const T, dw: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_KeySpec(@ptrCast(*const IEnroll, self), dw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_ProviderFlags(self: *const T, pdwFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_ProviderFlags(@ptrCast(*const IEnroll, self), pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_ProviderFlags(self: *const T, dwFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_ProviderFlags(@ptrCast(*const IEnroll, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_UseExistingKeySet(self: *const T, fUseExistingKeys: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_UseExistingKeySet(@ptrCast(*const IEnroll, self), fUseExistingKeys);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_UseExistingKeySet(self: *const T, fUseExistingKeys: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_UseExistingKeySet(@ptrCast(*const IEnroll, self), fUseExistingKeys);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_GenKeyFlags(self: *const T, pdwFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_GenKeyFlags(@ptrCast(*const IEnroll, self), pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_GenKeyFlags(self: *const T, dwFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_GenKeyFlags(@ptrCast(*const IEnroll, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_DeleteRequestCert(self: *const T, fDelete: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_DeleteRequestCert(@ptrCast(*const IEnroll, self), fDelete);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_DeleteRequestCert(self: *const T, fDelete: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_DeleteRequestCert(@ptrCast(*const IEnroll, self), fDelete);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_WriteCertToUserDS(self: *const T, fBool: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_WriteCertToUserDS(@ptrCast(*const IEnroll, self), fBool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_WriteCertToUserDS(self: *const T, fBool: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_WriteCertToUserDS(@ptrCast(*const IEnroll, self), fBool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_EnableT61DNEncoding(self: *const T, fBool: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_EnableT61DNEncoding(@ptrCast(*const IEnroll, self), fBool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_EnableT61DNEncoding(self: *const T, fBool: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_EnableT61DNEncoding(@ptrCast(*const IEnroll, self), fBool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_WriteCertToCSP(self: *const T, fBool: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_WriteCertToCSP(@ptrCast(*const IEnroll, self), fBool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_WriteCertToCSP(self: *const T, fBool: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_WriteCertToCSP(@ptrCast(*const IEnroll, self), fBool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_SPCFileNameWStr(self: *const T, szw: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_SPCFileNameWStr(@ptrCast(*const IEnroll, self), szw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_SPCFileNameWStr(self: *const T, szw: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_SPCFileNameWStr(@ptrCast(*const IEnroll, self), szw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_PVKFileNameWStr(self: *const T, szw: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_PVKFileNameWStr(@ptrCast(*const IEnroll, self), szw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_PVKFileNameWStr(self: *const T, szw: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_PVKFileNameWStr(@ptrCast(*const IEnroll, self), szw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_HashAlgorithmWStr(self: *const T, szw: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_HashAlgorithmWStr(@ptrCast(*const IEnroll, self), szw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_HashAlgorithmWStr(self: *const T, szw: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_HashAlgorithmWStr(@ptrCast(*const IEnroll, self), szw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_get_RenewalCertificate(self: *const T, ppCertContext: **CERT_CONTEXT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).get_RenewalCertificate(@ptrCast(*const IEnroll, self), ppCertContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_put_RenewalCertificate(self: *const T, pCertContext: *CERT_CONTEXT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).put_RenewalCertificate(@ptrCast(*const IEnroll, self), pCertContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_AddCertTypeToRequestWStr(self: *const T, szw: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).AddCertTypeToRequestWStr(@ptrCast(*const IEnroll, self), szw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_AddNameValuePairToSignatureWStr(self: *const T, Name: PWSTR, Value: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).AddNameValuePairToSignatureWStr(@ptrCast(*const IEnroll, self), Name, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_AddExtensionsToRequest(self: *const T, pCertExtensions: *CERT_EXTENSIONS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).AddExtensionsToRequest(@ptrCast(*const IEnroll, self), pCertExtensions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_AddAuthenticatedAttributesToPKCS7Request(self: *const T, pAttributes: *CRYPT_ATTRIBUTES) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).AddAuthenticatedAttributesToPKCS7Request(@ptrCast(*const IEnroll, self), pAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll_CreatePKCS7RequestFromRequest(self: *const T, pRequest: *CRYPTOAPI_BLOB, pSigningCertContext: *CERT_CONTEXT, pPkcs7Blob: *CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll.VTable, self.vtable).CreatePKCS7RequestFromRequest(@ptrCast(*const IEnroll, self), pRequest, pSigningCertContext, pPkcs7Blob);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnroll2_Value = @import("../zig.zig").Guid.initString("C080E199-B7DF-11D2-A421-00C04F79FE8E");
pub const IID_IEnroll2 = &IID_IEnroll2_Value;
pub const IEnroll2 = extern struct {
    pub const VTable = extern struct {
        base: IEnroll.VTable,
        InstallPKCS7Blob: fn(
            self: *const IEnroll2,
            pBlobPKCS7: *CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnroll2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedKeySpec: fn(
            self: *const IEnroll2,
            pdwKeySpec: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyLen: fn(
            self: *const IEnroll2,
            fMin: BOOL,
            fExchange: BOOL,
            pdwKeySize: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumAlgs: fn(
            self: *const IEnroll2,
            dwIndex: i32,
            algClass: i32,
            pdwAlgID: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAlgNameWStr: fn(
            self: *const IEnroll2,
            algID: i32,
            ppwsz: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ReuseHardwareKeyIfUnableToGenNew: fn(
            self: *const IEnroll2,
            fReuseHardwareKeyIfUnableToGenNew: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ReuseHardwareKeyIfUnableToGenNew: fn(
            self: *const IEnroll2,
            fReuseHardwareKeyIfUnableToGenNew: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_HashAlgID: fn(
            self: *const IEnroll2,
            hashAlgID: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_HashAlgID: fn(
            self: *const IEnroll2,
            hashAlgID: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHStoreMy: fn(
            self: *const IEnroll2,
            hStore: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHStoreCA: fn(
            self: *const IEnroll2,
            hStore: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHStoreROOT: fn(
            self: *const IEnroll2,
            hStore: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHStoreRequest: fn(
            self: *const IEnroll2,
            hStore: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_LimitExchangeKeyToEncipherment: fn(
            self: *const IEnroll2,
            fLimitExchangeKeyToEncipherment: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_LimitExchangeKeyToEncipherment: fn(
            self: *const IEnroll2,
            fLimitExchangeKeyToEncipherment: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_EnableSMIMECapabilities: fn(
            self: *const IEnroll2,
            fEnableSMIMECapabilities: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EnableSMIMECapabilities: fn(
            self: *const IEnroll2,
            fEnableSMIMECapabilities: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IEnroll.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll2_InstallPKCS7Blob(self: *const T, pBlobPKCS7: *CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll2.VTable, self.vtable).InstallPKCS7Blob(@ptrCast(*const IEnroll2, self), pBlobPKCS7);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll2_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll2.VTable, self.vtable).Reset(@ptrCast(*const IEnroll2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll2_GetSupportedKeySpec(self: *const T, pdwKeySpec: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll2.VTable, self.vtable).GetSupportedKeySpec(@ptrCast(*const IEnroll2, self), pdwKeySpec);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll2_GetKeyLen(self: *const T, fMin: BOOL, fExchange: BOOL, pdwKeySize: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll2.VTable, self.vtable).GetKeyLen(@ptrCast(*const IEnroll2, self), fMin, fExchange, pdwKeySize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll2_EnumAlgs(self: *const T, dwIndex: i32, algClass: i32, pdwAlgID: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll2.VTable, self.vtable).EnumAlgs(@ptrCast(*const IEnroll2, self), dwIndex, algClass, pdwAlgID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll2_GetAlgNameWStr(self: *const T, algID: i32, ppwsz: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll2.VTable, self.vtable).GetAlgNameWStr(@ptrCast(*const IEnroll2, self), algID, ppwsz);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll2_put_ReuseHardwareKeyIfUnableToGenNew(self: *const T, fReuseHardwareKeyIfUnableToGenNew: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll2.VTable, self.vtable).put_ReuseHardwareKeyIfUnableToGenNew(@ptrCast(*const IEnroll2, self), fReuseHardwareKeyIfUnableToGenNew);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll2_get_ReuseHardwareKeyIfUnableToGenNew(self: *const T, fReuseHardwareKeyIfUnableToGenNew: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll2.VTable, self.vtable).get_ReuseHardwareKeyIfUnableToGenNew(@ptrCast(*const IEnroll2, self), fReuseHardwareKeyIfUnableToGenNew);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll2_put_HashAlgID(self: *const T, hashAlgID: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll2.VTable, self.vtable).put_HashAlgID(@ptrCast(*const IEnroll2, self), hashAlgID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll2_get_HashAlgID(self: *const T, hashAlgID: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll2.VTable, self.vtable).get_HashAlgID(@ptrCast(*const IEnroll2, self), hashAlgID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll2_SetHStoreMy(self: *const T, hStore: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll2.VTable, self.vtable).SetHStoreMy(@ptrCast(*const IEnroll2, self), hStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll2_SetHStoreCA(self: *const T, hStore: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll2.VTable, self.vtable).SetHStoreCA(@ptrCast(*const IEnroll2, self), hStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll2_SetHStoreROOT(self: *const T, hStore: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll2.VTable, self.vtable).SetHStoreROOT(@ptrCast(*const IEnroll2, self), hStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll2_SetHStoreRequest(self: *const T, hStore: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll2.VTable, self.vtable).SetHStoreRequest(@ptrCast(*const IEnroll2, self), hStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll2_put_LimitExchangeKeyToEncipherment(self: *const T, fLimitExchangeKeyToEncipherment: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll2.VTable, self.vtable).put_LimitExchangeKeyToEncipherment(@ptrCast(*const IEnroll2, self), fLimitExchangeKeyToEncipherment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll2_get_LimitExchangeKeyToEncipherment(self: *const T, fLimitExchangeKeyToEncipherment: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll2.VTable, self.vtable).get_LimitExchangeKeyToEncipherment(@ptrCast(*const IEnroll2, self), fLimitExchangeKeyToEncipherment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll2_put_EnableSMIMECapabilities(self: *const T, fEnableSMIMECapabilities: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll2.VTable, self.vtable).put_EnableSMIMECapabilities(@ptrCast(*const IEnroll2, self), fEnableSMIMECapabilities);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll2_get_EnableSMIMECapabilities(self: *const T, fEnableSMIMECapabilities: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll2.VTable, self.vtable).get_EnableSMIMECapabilities(@ptrCast(*const IEnroll2, self), fEnableSMIMECapabilities);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnroll4_Value = @import("../zig.zig").Guid.initString("F8053FE5-78F4-448F-A0DB-41D61B73446B");
pub const IID_IEnroll4 = &IID_IEnroll4_Value;
pub const IEnroll4 = extern struct {
    pub const VTable = extern struct {
        base: IEnroll2.VTable,
        put_ThumbPrintWStr: fn(
            self: *const IEnroll4,
            thumbPrintBlob: CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ThumbPrintWStr: fn(
            self: *const IEnroll4,
            thumbPrintBlob: *CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrivateKeyArchiveCertificate: fn(
            self: *const IEnroll4,
            pPrivateKeyArchiveCert: *CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrivateKeyArchiveCertificate: fn(
            self: *const IEnroll4,
        ) callconv(@import("std").os.windows.WINAPI) *CERT_CONTEXT,
        binaryBlobToString: fn(
            self: *const IEnroll4,
            Flags: i32,
            pblobBinary: *CRYPTOAPI_BLOB,
            ppwszString: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        stringToBinaryBlob: fn(
            self: *const IEnroll4,
            Flags: i32,
            pwszString: [*:0]const u16,
            pblobBinary: *CRYPTOAPI_BLOB,
            pdwSkip: *i32,
            pdwFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addExtensionToRequestWStr: fn(
            self: *const IEnroll4,
            Flags: i32,
            pwszName: [*:0]const u16,
            pblobValue: *CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addAttributeToRequestWStr: fn(
            self: *const IEnroll4,
            Flags: i32,
            pwszName: [*:0]const u16,
            pblobValue: *CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addNameValuePairToRequestWStr: fn(
            self: *const IEnroll4,
            Flags: i32,
            pwszName: [*:0]const u16,
            pwszValue: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        resetExtensions: fn(
            self: *const IEnroll4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        resetAttributes: fn(
            self: *const IEnroll4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createRequestWStr: fn(
            self: *const IEnroll4,
            Flags: i32,
            pwszDNName: [*:0]const u16,
            pwszUsage: [*:0]const u16,
            pblobRequest: *CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createFileRequestWStr: fn(
            self: *const IEnroll4,
            Flags: i32,
            pwszDNName: [*:0]const u16,
            pwszUsage: [*:0]const u16,
            pwszRequestFileName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptResponseBlob: fn(
            self: *const IEnroll4,
            pblobResponse: *CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptFileResponseWStr: fn(
            self: *const IEnroll4,
            pwszResponseFileName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getCertContextFromResponseBlob: fn(
            self: *const IEnroll4,
            pblobResponse: *CRYPTOAPI_BLOB,
            ppCertContext: **CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getCertContextFromFileResponseWStr: fn(
            self: *const IEnroll4,
            pwszResponseFileName: [*:0]const u16,
            ppCertContext: **CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createPFXWStr: fn(
            self: *const IEnroll4,
            pwszPassword: [*:0]const u16,
            pblobPFX: *CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createFilePFXWStr: fn(
            self: *const IEnroll4,
            pwszPassword: [*:0]const u16,
            pwszPFXFileName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setPendingRequestInfoWStr: fn(
            self: *const IEnroll4,
            lRequestID: i32,
            pwszCADNS: [*:0]const u16,
            pwszCAName: [*:0]const u16,
            pwszFriendlyName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        enumPendingRequestWStr: fn(
            self: *const IEnroll4,
            lIndex: i32,
            lDesiredProperty: i32,
            ppProperty: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removePendingRequestWStr: fn(
            self: *const IEnroll4,
            thumbPrintBlob: CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyLenEx: fn(
            self: *const IEnroll4,
            lSizeSpec: i32,
            lKeySpec: i32,
            pdwKeySize: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallPKCS7BlobEx: fn(
            self: *const IEnroll4,
            pBlobPKCS7: *CRYPTOAPI_BLOB,
            plCertInstalled: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCertTypeToRequestWStrEx: fn(
            self: *const IEnroll4,
            lType: i32,
            pwszOIDOrName: [*:0]const u16,
            lMajorVersion: i32,
            fMinorVersion: BOOL,
            lMinorVersion: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProviderTypeWStr: fn(
            self: *const IEnroll4,
            pwszProvName: [*:0]const u16,
            plProvType: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addBlobPropertyToCertificateWStr: fn(
            self: *const IEnroll4,
            lPropertyId: i32,
            lReserved: i32,
            pBlobProperty: *CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignerCertificate: fn(
            self: *const IEnroll4,
            pSignerCert: *CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ClientId: fn(
            self: *const IEnroll4,
            lClientId: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ClientId: fn(
            self: *const IEnroll4,
            plClientId: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_IncludeSubjectKeyID: fn(
            self: *const IEnroll4,
            fInclude: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IncludeSubjectKeyID: fn(
            self: *const IEnroll4,
            pfInclude: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IEnroll2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_put_ThumbPrintWStr(self: *const T, thumbPrintBlob: CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).put_ThumbPrintWStr(@ptrCast(*const IEnroll4, self), thumbPrintBlob);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_get_ThumbPrintWStr(self: *const T, thumbPrintBlob: *CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).get_ThumbPrintWStr(@ptrCast(*const IEnroll4, self), thumbPrintBlob);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_SetPrivateKeyArchiveCertificate(self: *const T, pPrivateKeyArchiveCert: *CERT_CONTEXT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).SetPrivateKeyArchiveCertificate(@ptrCast(*const IEnroll4, self), pPrivateKeyArchiveCert);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_GetPrivateKeyArchiveCertificate(self: *const T) callconv(.Inline) *CERT_CONTEXT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).GetPrivateKeyArchiveCertificate(@ptrCast(*const IEnroll4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_binaryBlobToString(self: *const T, Flags: i32, pblobBinary: *CRYPTOAPI_BLOB, ppwszString: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).binaryBlobToString(@ptrCast(*const IEnroll4, self), Flags, pblobBinary, ppwszString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_stringToBinaryBlob(self: *const T, Flags: i32, pwszString: [*:0]const u16, pblobBinary: *CRYPTOAPI_BLOB, pdwSkip: *i32, pdwFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).stringToBinaryBlob(@ptrCast(*const IEnroll4, self), Flags, pwszString, pblobBinary, pdwSkip, pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_addExtensionToRequestWStr(self: *const T, Flags: i32, pwszName: [*:0]const u16, pblobValue: *CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).addExtensionToRequestWStr(@ptrCast(*const IEnroll4, self), Flags, pwszName, pblobValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_addAttributeToRequestWStr(self: *const T, Flags: i32, pwszName: [*:0]const u16, pblobValue: *CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).addAttributeToRequestWStr(@ptrCast(*const IEnroll4, self), Flags, pwszName, pblobValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_addNameValuePairToRequestWStr(self: *const T, Flags: i32, pwszName: [*:0]const u16, pwszValue: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).addNameValuePairToRequestWStr(@ptrCast(*const IEnroll4, self), Flags, pwszName, pwszValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_resetExtensions(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).resetExtensions(@ptrCast(*const IEnroll4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_resetAttributes(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).resetAttributes(@ptrCast(*const IEnroll4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_createRequestWStr(self: *const T, Flags: i32, pwszDNName: [*:0]const u16, pwszUsage: [*:0]const u16, pblobRequest: *CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).createRequestWStr(@ptrCast(*const IEnroll4, self), Flags, pwszDNName, pwszUsage, pblobRequest);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_createFileRequestWStr(self: *const T, Flags: i32, pwszDNName: [*:0]const u16, pwszUsage: [*:0]const u16, pwszRequestFileName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).createFileRequestWStr(@ptrCast(*const IEnroll4, self), Flags, pwszDNName, pwszUsage, pwszRequestFileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_acceptResponseBlob(self: *const T, pblobResponse: *CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).acceptResponseBlob(@ptrCast(*const IEnroll4, self), pblobResponse);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_acceptFileResponseWStr(self: *const T, pwszResponseFileName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).acceptFileResponseWStr(@ptrCast(*const IEnroll4, self), pwszResponseFileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_getCertContextFromResponseBlob(self: *const T, pblobResponse: *CRYPTOAPI_BLOB, ppCertContext: **CERT_CONTEXT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).getCertContextFromResponseBlob(@ptrCast(*const IEnroll4, self), pblobResponse, ppCertContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_getCertContextFromFileResponseWStr(self: *const T, pwszResponseFileName: [*:0]const u16, ppCertContext: **CERT_CONTEXT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).getCertContextFromFileResponseWStr(@ptrCast(*const IEnroll4, self), pwszResponseFileName, ppCertContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_createPFXWStr(self: *const T, pwszPassword: [*:0]const u16, pblobPFX: *CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).createPFXWStr(@ptrCast(*const IEnroll4, self), pwszPassword, pblobPFX);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_createFilePFXWStr(self: *const T, pwszPassword: [*:0]const u16, pwszPFXFileName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).createFilePFXWStr(@ptrCast(*const IEnroll4, self), pwszPassword, pwszPFXFileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_setPendingRequestInfoWStr(self: *const T, lRequestID: i32, pwszCADNS: [*:0]const u16, pwszCAName: [*:0]const u16, pwszFriendlyName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).setPendingRequestInfoWStr(@ptrCast(*const IEnroll4, self), lRequestID, pwszCADNS, pwszCAName, pwszFriendlyName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_enumPendingRequestWStr(self: *const T, lIndex: i32, lDesiredProperty: i32, ppProperty: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).enumPendingRequestWStr(@ptrCast(*const IEnroll4, self), lIndex, lDesiredProperty, ppProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_removePendingRequestWStr(self: *const T, thumbPrintBlob: CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).removePendingRequestWStr(@ptrCast(*const IEnroll4, self), thumbPrintBlob);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_GetKeyLenEx(self: *const T, lSizeSpec: i32, lKeySpec: i32, pdwKeySize: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).GetKeyLenEx(@ptrCast(*const IEnroll4, self), lSizeSpec, lKeySpec, pdwKeySize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_InstallPKCS7BlobEx(self: *const T, pBlobPKCS7: *CRYPTOAPI_BLOB, plCertInstalled: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).InstallPKCS7BlobEx(@ptrCast(*const IEnroll4, self), pBlobPKCS7, plCertInstalled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_AddCertTypeToRequestWStrEx(self: *const T, lType: i32, pwszOIDOrName: [*:0]const u16, lMajorVersion: i32, fMinorVersion: BOOL, lMinorVersion: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).AddCertTypeToRequestWStrEx(@ptrCast(*const IEnroll4, self), lType, pwszOIDOrName, lMajorVersion, fMinorVersion, lMinorVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_getProviderTypeWStr(self: *const T, pwszProvName: [*:0]const u16, plProvType: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).getProviderTypeWStr(@ptrCast(*const IEnroll4, self), pwszProvName, plProvType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_addBlobPropertyToCertificateWStr(self: *const T, lPropertyId: i32, lReserved: i32, pBlobProperty: *CRYPTOAPI_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).addBlobPropertyToCertificateWStr(@ptrCast(*const IEnroll4, self), lPropertyId, lReserved, pBlobProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_SetSignerCertificate(self: *const T, pSignerCert: *CERT_CONTEXT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).SetSignerCertificate(@ptrCast(*const IEnroll4, self), pSignerCert);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_put_ClientId(self: *const T, lClientId: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).put_ClientId(@ptrCast(*const IEnroll4, self), lClientId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_get_ClientId(self: *const T, plClientId: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).get_ClientId(@ptrCast(*const IEnroll4, self), plClientId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_put_IncludeSubjectKeyID(self: *const T, fInclude: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).put_IncludeSubjectKeyID(@ptrCast(*const IEnroll4, self), fInclude);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnroll4_get_IncludeSubjectKeyID(self: *const T, pfInclude: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnroll4.VTable, self.vtable).get_IncludeSubjectKeyID(@ptrCast(*const IEnroll4, self), pfInclude);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SCESVC_CONFIGURATION_LINE = extern struct {
    Key: *i8,
    Value: *i8,
    ValueLen: u32,
};

pub const SCESVC_CONFIGURATION_INFO = extern struct {
    Count: u32,
    Lines: *SCESVC_CONFIGURATION_LINE,
};

pub const SCESVC_INFO_TYPE = extern enum(i32) {
    SceSvcConfigurationInfo = 0,
    SceSvcMergedPolicyInfo = 1,
    SceSvcAnalysisInfo = 2,
    SceSvcInternalUse = 3,
};
pub const SceSvcConfigurationInfo = SCESVC_INFO_TYPE.SceSvcConfigurationInfo;
pub const SceSvcMergedPolicyInfo = SCESVC_INFO_TYPE.SceSvcMergedPolicyInfo;
pub const SceSvcAnalysisInfo = SCESVC_INFO_TYPE.SceSvcAnalysisInfo;
pub const SceSvcInternalUse = SCESVC_INFO_TYPE.SceSvcInternalUse;

pub const SCESVC_ANALYSIS_LINE = extern struct {
    Key: *i8,
    Value: *u8,
    ValueLen: u32,
};

pub const SCESVC_ANALYSIS_INFO = extern struct {
    Count: u32,
    Lines: *SCESVC_ANALYSIS_LINE,
};

pub const PFSCE_QUERY_INFO = fn(
    sceHandle: *c_void,
    sceType: SCESVC_INFO_TYPE,
    lpPrefix: *i8,
    bExact: BOOL,
    ppvInfo: **c_void,
    psceEnumHandle: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFSCE_SET_INFO = fn(
    sceHandle: *c_void,
    sceType: SCESVC_INFO_TYPE,
    lpPrefix: *i8,
    bExact: BOOL,
    pvInfo: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFSCE_FREE_INFO = fn(
    pvServiceInfo: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFSCE_LOG_INFO = fn(
    ErrLevel: i32,
    Win32rc: u32,
    pErrFmt: *i8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const SCESVC_CALLBACK_INFO = extern struct {
    sceHandle: *c_void,
    pfQueryInfo: PFSCE_QUERY_INFO,
    pfSetInfo: PFSCE_SET_INFO,
    pfFreeInfo: PFSCE_FREE_INFO,
    pfLogInfo: PFSCE_LOG_INFO,
};

pub const PF_ConfigAnalyzeService = fn(
    pSceCbInfo: *SCESVC_CALLBACK_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PF_UpdateService = fn(
    pSceCbInfo: *SCESVC_CALLBACK_INFO,
    ServiceInfo: *SCESVC_CONFIGURATION_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

const IID_ISceSvcAttachmentPersistInfo_Value = @import("../zig.zig").Guid.initString("6D90E0D0-200D-11D1-AFFB-00C04FB984F9");
pub const IID_ISceSvcAttachmentPersistInfo = &IID_ISceSvcAttachmentPersistInfo_Value;
pub const ISceSvcAttachmentPersistInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Save: fn(
            self: *const ISceSvcAttachmentPersistInfo,
            lpTemplateName: *i8,
            scesvcHandle: **c_void,
            ppvData: **c_void,
            pbOverwriteAll: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDirty: fn(
            self: *const ISceSvcAttachmentPersistInfo,
            lpTemplateName: *i8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FreeBuffer: fn(
            self: *const ISceSvcAttachmentPersistInfo,
            pvData: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISceSvcAttachmentPersistInfo_Save(self: *const T, lpTemplateName: *i8, scesvcHandle: **c_void, ppvData: **c_void, pbOverwriteAll: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISceSvcAttachmentPersistInfo.VTable, self.vtable).Save(@ptrCast(*const ISceSvcAttachmentPersistInfo, self), lpTemplateName, scesvcHandle, ppvData, pbOverwriteAll);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISceSvcAttachmentPersistInfo_IsDirty(self: *const T, lpTemplateName: *i8) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISceSvcAttachmentPersistInfo.VTable, self.vtable).IsDirty(@ptrCast(*const ISceSvcAttachmentPersistInfo, self), lpTemplateName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISceSvcAttachmentPersistInfo_FreeBuffer(self: *const T, pvData: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISceSvcAttachmentPersistInfo.VTable, self.vtable).FreeBuffer(@ptrCast(*const ISceSvcAttachmentPersistInfo, self), pvData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISceSvcAttachmentData_Value = @import("../zig.zig").Guid.initString("17C35FDE-200D-11D1-AFFB-00C04FB984F9");
pub const IID_ISceSvcAttachmentData = &IID_ISceSvcAttachmentData_Value;
pub const ISceSvcAttachmentData = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetData: fn(
            self: *const ISceSvcAttachmentData,
            scesvcHandle: *c_void,
            sceType: SCESVC_INFO_TYPE,
            ppvData: **c_void,
            psceEnumHandle: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const ISceSvcAttachmentData,
            lpServiceName: *i8,
            lpTemplateName: *i8,
            lpSceSvcPersistInfo: *ISceSvcAttachmentPersistInfo,
            pscesvcHandle: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FreeBuffer: fn(
            self: *const ISceSvcAttachmentData,
            pvData: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseHandle: fn(
            self: *const ISceSvcAttachmentData,
            scesvcHandle: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISceSvcAttachmentData_GetData(self: *const T, scesvcHandle: *c_void, sceType: SCESVC_INFO_TYPE, ppvData: **c_void, psceEnumHandle: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISceSvcAttachmentData.VTable, self.vtable).GetData(@ptrCast(*const ISceSvcAttachmentData, self), scesvcHandle, sceType, ppvData, psceEnumHandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISceSvcAttachmentData_Initialize(self: *const T, lpServiceName: *i8, lpTemplateName: *i8, lpSceSvcPersistInfo: *ISceSvcAttachmentPersistInfo, pscesvcHandle: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISceSvcAttachmentData.VTable, self.vtable).Initialize(@ptrCast(*const ISceSvcAttachmentData, self), lpServiceName, lpTemplateName, lpSceSvcPersistInfo, pscesvcHandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISceSvcAttachmentData_FreeBuffer(self: *const T, pvData: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISceSvcAttachmentData.VTable, self.vtable).FreeBuffer(@ptrCast(*const ISceSvcAttachmentData, self), pvData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISceSvcAttachmentData_CloseHandle(self: *const T, scesvcHandle: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISceSvcAttachmentData.VTable, self.vtable).CloseHandle(@ptrCast(*const ISceSvcAttachmentData, self), scesvcHandle);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SAFER_LEVEL_HANDLE__ = extern struct {
    unused: i32,
};

pub const SAFER_CODE_PROPERTIES_V1 = extern struct {
    cbSize: u32,
    dwCheckFlags: u32,
    ImagePath: [*:0]const u16,
    hImageFileHandle: HANDLE,
    UrlZoneId: u32,
    ImageHash: [64]u8,
    dwImageHashSize: u32,
    ImageSize: LARGE_INTEGER,
    HashAlgorithm: u32,
    pByteBlock: *u8,
    hWndParent: HWND,
    dwWVTUIChoice: u32,
};

pub const SAFER_CODE_PROPERTIES_V2 = extern struct {
    cbSize: u32,
    dwCheckFlags: u32,
    ImagePath: [*:0]const u16,
    hImageFileHandle: HANDLE,
    UrlZoneId: u32,
    ImageHash: [64]u8,
    dwImageHashSize: u32,
    ImageSize: LARGE_INTEGER,
    HashAlgorithm: u32,
    pByteBlock: *u8,
    hWndParent: HWND,
    dwWVTUIChoice: u32,
    PackageMoniker: [*:0]const u16,
    PackagePublisher: [*:0]const u16,
    PackageName: [*:0]const u16,
    PackageVersion: u64,
    PackageIsFramework: BOOL,
};

pub const SAFER_POLICY_INFO_CLASS = extern enum(i32) {
    SaferPolicyLevelList = 1,
    SaferPolicyEnableTransparentEnforcement = 2,
    SaferPolicyDefaultLevel = 3,
    SaferPolicyEvaluateUserScope = 4,
    SaferPolicyScopeFlags = 5,
    SaferPolicyDefaultLevelFlags = 6,
    SaferPolicyAuthenticodeEnabled = 7,
};
pub const SaferPolicyLevelList = SAFER_POLICY_INFO_CLASS.SaferPolicyLevelList;
pub const SaferPolicyEnableTransparentEnforcement = SAFER_POLICY_INFO_CLASS.SaferPolicyEnableTransparentEnforcement;
pub const SaferPolicyDefaultLevel = SAFER_POLICY_INFO_CLASS.SaferPolicyDefaultLevel;
pub const SaferPolicyEvaluateUserScope = SAFER_POLICY_INFO_CLASS.SaferPolicyEvaluateUserScope;
pub const SaferPolicyScopeFlags = SAFER_POLICY_INFO_CLASS.SaferPolicyScopeFlags;
pub const SaferPolicyDefaultLevelFlags = SAFER_POLICY_INFO_CLASS.SaferPolicyDefaultLevelFlags;
pub const SaferPolicyAuthenticodeEnabled = SAFER_POLICY_INFO_CLASS.SaferPolicyAuthenticodeEnabled;

pub const SAFER_OBJECT_INFO_CLASS = extern enum(i32) {
    SaferObjectLevelId = 1,
    SaferObjectScopeId = 2,
    SaferObjectFriendlyName = 3,
    SaferObjectDescription = 4,
    SaferObjectBuiltin = 5,
    SaferObjectDisallowed = 6,
    SaferObjectDisableMaxPrivilege = 7,
    SaferObjectInvertDeletedPrivileges = 8,
    SaferObjectDeletedPrivileges = 9,
    SaferObjectDefaultOwner = 10,
    SaferObjectSidsToDisable = 11,
    SaferObjectRestrictedSidsInverted = 12,
    SaferObjectRestrictedSidsAdded = 13,
    SaferObjectAllIdentificationGuids = 14,
    SaferObjectSingleIdentification = 15,
    SaferObjectExtendedError = 16,
};
pub const SaferObjectLevelId = SAFER_OBJECT_INFO_CLASS.SaferObjectLevelId;
pub const SaferObjectScopeId = SAFER_OBJECT_INFO_CLASS.SaferObjectScopeId;
pub const SaferObjectFriendlyName = SAFER_OBJECT_INFO_CLASS.SaferObjectFriendlyName;
pub const SaferObjectDescription = SAFER_OBJECT_INFO_CLASS.SaferObjectDescription;
pub const SaferObjectBuiltin = SAFER_OBJECT_INFO_CLASS.SaferObjectBuiltin;
pub const SaferObjectDisallowed = SAFER_OBJECT_INFO_CLASS.SaferObjectDisallowed;
pub const SaferObjectDisableMaxPrivilege = SAFER_OBJECT_INFO_CLASS.SaferObjectDisableMaxPrivilege;
pub const SaferObjectInvertDeletedPrivileges = SAFER_OBJECT_INFO_CLASS.SaferObjectInvertDeletedPrivileges;
pub const SaferObjectDeletedPrivileges = SAFER_OBJECT_INFO_CLASS.SaferObjectDeletedPrivileges;
pub const SaferObjectDefaultOwner = SAFER_OBJECT_INFO_CLASS.SaferObjectDefaultOwner;
pub const SaferObjectSidsToDisable = SAFER_OBJECT_INFO_CLASS.SaferObjectSidsToDisable;
pub const SaferObjectRestrictedSidsInverted = SAFER_OBJECT_INFO_CLASS.SaferObjectRestrictedSidsInverted;
pub const SaferObjectRestrictedSidsAdded = SAFER_OBJECT_INFO_CLASS.SaferObjectRestrictedSidsAdded;
pub const SaferObjectAllIdentificationGuids = SAFER_OBJECT_INFO_CLASS.SaferObjectAllIdentificationGuids;
pub const SaferObjectSingleIdentification = SAFER_OBJECT_INFO_CLASS.SaferObjectSingleIdentification;
pub const SaferObjectExtendedError = SAFER_OBJECT_INFO_CLASS.SaferObjectExtendedError;

pub const SAFER_IDENTIFICATION_TYPES = extern enum(i32) {
    SaferIdentityDefault = 0,
    SaferIdentityTypeImageName = 1,
    SaferIdentityTypeImageHash = 2,
    SaferIdentityTypeUrlZone = 3,
    SaferIdentityTypeCertificate = 4,
};
pub const SaferIdentityDefault = SAFER_IDENTIFICATION_TYPES.SaferIdentityDefault;
pub const SaferIdentityTypeImageName = SAFER_IDENTIFICATION_TYPES.SaferIdentityTypeImageName;
pub const SaferIdentityTypeImageHash = SAFER_IDENTIFICATION_TYPES.SaferIdentityTypeImageHash;
pub const SaferIdentityTypeUrlZone = SAFER_IDENTIFICATION_TYPES.SaferIdentityTypeUrlZone;
pub const SaferIdentityTypeCertificate = SAFER_IDENTIFICATION_TYPES.SaferIdentityTypeCertificate;

pub const SAFER_IDENTIFICATION_HEADER = extern struct {
    dwIdentificationType: SAFER_IDENTIFICATION_TYPES,
    cbStructSize: u32,
    IdentificationGuid: Guid,
    lastModified: FILETIME,
};

pub const SAFER_PATHNAME_IDENTIFICATION = extern struct {
    header: SAFER_IDENTIFICATION_HEADER,
    Description: [256]u16,
    ImageName: [*]u16,
    dwSaferFlags: u32,
};

pub const SAFER_HASH_IDENTIFICATION = extern struct {
    header: SAFER_IDENTIFICATION_HEADER,
    Description: [256]u16,
    FriendlyName: [256]u16,
    HashSize: u32,
    ImageHash: [64]u8,
    HashAlgorithm: u32,
    ImageSize: LARGE_INTEGER,
    dwSaferFlags: u32,
};

pub const SAFER_HASH_IDENTIFICATION2 = extern struct {
    hashIdentification: SAFER_HASH_IDENTIFICATION,
    HashSize: u32,
    ImageHash: [64]u8,
    HashAlgorithm: u32,
};

pub const SAFER_URLZONE_IDENTIFICATION = extern struct {
    header: SAFER_IDENTIFICATION_HEADER,
    UrlZoneId: u32,
    dwSaferFlags: u32,
};

pub const SLDATATYPE = extern enum(u32) {
    SL_DATA_NONE = 0,
    SL_DATA_SZ = 1,
    SL_DATA_DWORD = 4,
    SL_DATA_BINARY = 3,
    SL_DATA_MULTI_SZ = 7,
    SL_DATA_SUM = 100,
};
pub const SL_DATA_NONE = SLDATATYPE.SL_DATA_NONE;
pub const SL_DATA_SZ = SLDATATYPE.SL_DATA_SZ;
pub const SL_DATA_DWORD = SLDATATYPE.SL_DATA_DWORD;
pub const SL_DATA_BINARY = SLDATATYPE.SL_DATA_BINARY;
pub const SL_DATA_MULTI_SZ = SLDATATYPE.SL_DATA_MULTI_SZ;
pub const SL_DATA_SUM = SLDATATYPE.SL_DATA_SUM;

pub const SLIDTYPE = extern enum(i32) {
    SL_ID_APPLICATION = 0,
    SL_ID_PRODUCT_SKU = 1,
    SL_ID_LICENSE_FILE = 2,
    SL_ID_LICENSE = 3,
    SL_ID_PKEY = 4,
    SL_ID_ALL_LICENSES = 5,
    SL_ID_ALL_LICENSE_FILES = 6,
    SL_ID_STORE_TOKEN = 7,
    SL_ID_LAST = 8,
};
pub const SL_ID_APPLICATION = SLIDTYPE.SL_ID_APPLICATION;
pub const SL_ID_PRODUCT_SKU = SLIDTYPE.SL_ID_PRODUCT_SKU;
pub const SL_ID_LICENSE_FILE = SLIDTYPE.SL_ID_LICENSE_FILE;
pub const SL_ID_LICENSE = SLIDTYPE.SL_ID_LICENSE;
pub const SL_ID_PKEY = SLIDTYPE.SL_ID_PKEY;
pub const SL_ID_ALL_LICENSES = SLIDTYPE.SL_ID_ALL_LICENSES;
pub const SL_ID_ALL_LICENSE_FILES = SLIDTYPE.SL_ID_ALL_LICENSE_FILES;
pub const SL_ID_STORE_TOKEN = SLIDTYPE.SL_ID_STORE_TOKEN;
pub const SL_ID_LAST = SLIDTYPE.SL_ID_LAST;

pub const SLLICENSINGSTATUS = extern enum(i32) {
    SL_LICENSING_STATUS_UNLICENSED = 0,
    SL_LICENSING_STATUS_LICENSED = 1,
    SL_LICENSING_STATUS_IN_GRACE_PERIOD = 2,
    SL_LICENSING_STATUS_NOTIFICATION = 3,
    SL_LICENSING_STATUS_LAST = 4,
};
pub const SL_LICENSING_STATUS_UNLICENSED = SLLICENSINGSTATUS.SL_LICENSING_STATUS_UNLICENSED;
pub const SL_LICENSING_STATUS_LICENSED = SLLICENSINGSTATUS.SL_LICENSING_STATUS_LICENSED;
pub const SL_LICENSING_STATUS_IN_GRACE_PERIOD = SLLICENSINGSTATUS.SL_LICENSING_STATUS_IN_GRACE_PERIOD;
pub const SL_LICENSING_STATUS_NOTIFICATION = SLLICENSINGSTATUS.SL_LICENSING_STATUS_NOTIFICATION;
pub const SL_LICENSING_STATUS_LAST = SLLICENSINGSTATUS.SL_LICENSING_STATUS_LAST;

pub const SL_LICENSING_STATUS = extern struct {
    SkuId: Guid,
    eStatus: SLLICENSINGSTATUS,
    dwGraceTime: u32,
    dwTotalGraceDays: u32,
    hrReason: HRESULT,
    qwValidityExpiration: u64,
};

pub const SL_ACTIVATION_TYPE = extern enum(i32) {
    DEFAULT = 0,
    ACTIVE_DIRECTORY = 1,
};
pub const SL_ACTIVATION_TYPE_DEFAULT = SL_ACTIVATION_TYPE.DEFAULT;
pub const SL_ACTIVATION_TYPE_ACTIVE_DIRECTORY = SL_ACTIVATION_TYPE.ACTIVE_DIRECTORY;

pub const SL_ACTIVATION_INFO_HEADER = extern struct {
    cbSize: u32,
    type: SL_ACTIVATION_TYPE,
};

pub const SL_AD_ACTIVATION_INFO = extern struct {
    header: SL_ACTIVATION_INFO_HEADER,
    pwszProductKey: [*:0]const u16,
    pwszActivationObjectName: [*:0]const u16,
};

pub const SLREFERRALTYPE = extern enum(i32) {
    SL_REFERRALTYPE_SKUID = 0,
    SL_REFERRALTYPE_APPID = 1,
    SL_REFERRALTYPE_OVERRIDE_SKUID = 2,
    SL_REFERRALTYPE_OVERRIDE_APPID = 3,
    SL_REFERRALTYPE_BEST_MATCH = 4,
};
pub const SL_REFERRALTYPE_SKUID = SLREFERRALTYPE.SL_REFERRALTYPE_SKUID;
pub const SL_REFERRALTYPE_APPID = SLREFERRALTYPE.SL_REFERRALTYPE_APPID;
pub const SL_REFERRALTYPE_OVERRIDE_SKUID = SLREFERRALTYPE.SL_REFERRALTYPE_OVERRIDE_SKUID;
pub const SL_REFERRALTYPE_OVERRIDE_APPID = SLREFERRALTYPE.SL_REFERRALTYPE_OVERRIDE_APPID;
pub const SL_REFERRALTYPE_BEST_MATCH = SLREFERRALTYPE.SL_REFERRALTYPE_BEST_MATCH;

pub const SL_GENUINE_STATE = extern enum(i32) {
    SL_GEN_STATE_IS_GENUINE = 0,
    SL_GEN_STATE_INVALID_LICENSE = 1,
    SL_GEN_STATE_TAMPERED = 2,
    SL_GEN_STATE_OFFLINE = 3,
    SL_GEN_STATE_LAST = 4,
};
pub const SL_GEN_STATE_IS_GENUINE = SL_GENUINE_STATE.SL_GEN_STATE_IS_GENUINE;
pub const SL_GEN_STATE_INVALID_LICENSE = SL_GENUINE_STATE.SL_GEN_STATE_INVALID_LICENSE;
pub const SL_GEN_STATE_TAMPERED = SL_GENUINE_STATE.SL_GEN_STATE_TAMPERED;
pub const SL_GEN_STATE_OFFLINE = SL_GENUINE_STATE.SL_GEN_STATE_OFFLINE;
pub const SL_GEN_STATE_LAST = SL_GENUINE_STATE.SL_GEN_STATE_LAST;

pub const SL_NONGENUINE_UI_OPTIONS = extern struct {
    cbSize: u32,
    pComponentId: *const Guid,
    hResultUI: HRESULT,
};

pub const SL_SYSTEM_POLICY_INFORMATION = extern struct {
    Reserved1: [2]*c_void,
    Reserved2: [3]u32,
};

pub const DdqAccessLevel = extern enum(i32) {
    NoData = 0,
    CurrentUserData = 1,
    AllUserData = 2,
};
pub const NoData = DdqAccessLevel.NoData;
pub const CurrentUserData = DdqAccessLevel.CurrentUserData;
pub const AllUserData = DdqAccessLevel.AllUserData;

pub const DIAGNOSTIC_DATA_RECORD = extern struct {
    rowId: i64,
    timestamp: u64,
    eventKeywords: u64,
    fullEventName: PWSTR,
    providerGroupGuid: PWSTR,
    producerName: PWSTR,
    privacyTags: *i32,
    privacyTagCount: u32,
    categoryIds: *i32,
    categoryIdCount: u32,
    isCoreData: BOOL,
    extra1: PWSTR,
    extra2: PWSTR,
    extra3: PWSTR,
};

pub const DIAGNOSTIC_DATA_SEARCH_CRITERIA = extern struct {
    producerNames: *PWSTR,
    producerNameCount: u32,
    textToMatch: [*:0]const u16,
    categoryIds: *const i32,
    categoryIdCount: u32,
    privacyTags: *const i32,
    privacyTagCount: u32,
    coreDataOnly: BOOL,
};

pub const DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION = extern struct {
    privacyTag: i32,
    name: PWSTR,
    description: PWSTR,
};

pub const DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION = extern struct {
    name: PWSTR,
};

pub const DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION = extern struct {
    id: i32,
    name: PWSTR,
};

pub const DIAGNOSTIC_DATA_EVENT_TAG_STATS = extern struct {
    privacyTag: i32,
    eventCount: u32,
};

pub const DIAGNOSTIC_DATA_EVENT_BINARY_STATS = extern struct {
    moduleName: PWSTR,
    friendlyModuleName: PWSTR,
    eventCount: u32,
    uploadSizeBytes: u64,
};

pub const DIAGNOSTIC_DATA_GENERAL_STATS = extern struct {
    optInLevel: u32,
    transcriptSizeBytes: u64,
    oldestEventTimestamp: u64,
    totalEventCountLast24Hours: u32,
    averageDailyEvents: f32,
};

pub const DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION = extern struct {
    hoursOfHistoryToKeep: u32,
    maxStoreMegabytes: u32,
    requestedMaxStoreMegabytes: u32,
};

pub const DIAGNOSTIC_REPORT_PARAMETER = extern struct {
    name: [129]u16,
    value: [260]u16,
};

pub const DIAGNOSTIC_REPORT_SIGNATURE = extern struct {
    eventName: [65]u16,
    parameters: [10]DIAGNOSTIC_REPORT_PARAMETER,
};

pub const DIAGNOSTIC_REPORT_DATA = extern struct {
    signature: DIAGNOSTIC_REPORT_SIGNATURE,
    bucketId: Guid,
    reportId: Guid,
    creationTime: FILETIME,
    sizeInBytes: u64,
    cabId: PWSTR,
    reportStatus: u32,
    reportIntegratorId: Guid,
    fileNames: *PWSTR,
    fileCount: u32,
    friendlyEventName: PWSTR,
    applicationName: PWSTR,
    applicationPath: PWSTR,
    description: PWSTR,
    bucketIdString: PWSTR,
    legacyBucketId: u64,
    reportKey: PWSTR,
};

pub const HDIAGNOSTIC_DATA_QUERY_SESSION__ = extern struct {
    unused: i32,
};

pub const HDIAGNOSTIC_REPORT__ = extern struct {
    unused: i32,
};

pub const HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__ = extern struct {
    unused: i32,
};

pub const HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__ = extern struct {
    unused: i32,
};

pub const HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__ = extern struct {
    unused: i32,
};

pub const HDIAGNOSTIC_RECORD__ = extern struct {
    unused: i32,
};

pub const MSA_INFO_LEVEL = extern enum(i32) {
    MsaInfoLevel0 = 0,
    MsaInfoLevelMax = 1,
};
pub const MsaInfoLevel0 = MSA_INFO_LEVEL.MsaInfoLevel0;
pub const MsaInfoLevelMax = MSA_INFO_LEVEL.MsaInfoLevelMax;

pub const MSA_INFO_STATE = extern enum(i32) {
    MsaInfoNotExist = 1,
    MsaInfoNotService = 2,
    MsaInfoCannotInstall = 3,
    MsaInfoCanInstall = 4,
    MsaInfoInstalled = 5,
};
pub const MsaInfoNotExist = MSA_INFO_STATE.MsaInfoNotExist;
pub const MsaInfoNotService = MSA_INFO_STATE.MsaInfoNotService;
pub const MsaInfoCannotInstall = MSA_INFO_STATE.MsaInfoCannotInstall;
pub const MsaInfoCanInstall = MSA_INFO_STATE.MsaInfoCanInstall;
pub const MsaInfoInstalled = MSA_INFO_STATE.MsaInfoInstalled;

pub const MSA_INFO_0 = extern struct {
    State: MSA_INFO_STATE,
};

// TODO: this type has a FreeFunc 'CertFreeCertificateChainEngine', what can Zig do with this information?
pub const HCERTCHAINENGINE = ?*c_void;

// TODO: this type has a FreeFunc 'CryptCloseAsyncHandle', what can Zig do with this information?
pub const HCRYPTASYNC = ?*c_void;

// TODO: this type has a FreeFunc 'LsaDeregisterLogonProcess', what can Zig do with this information?
pub const LsaHandle = ?*c_void;

pub const GENERIC_MAPPING = extern struct {
    GenericRead: u32,
    GenericWrite: u32,
    GenericExecute: u32,
    GenericAll: u32,
};

pub const LUID_AND_ATTRIBUTES = extern struct {
    Luid: LUID,
    Attributes: u32,
};

pub const SID_IDENTIFIER_AUTHORITY = extern struct {
    Value: [6]u8,
};

pub const SID = extern struct {
    Revision: u8,
    SubAuthorityCount: u8,
    IdentifierAuthority: SID_IDENTIFIER_AUTHORITY,
    SubAuthority: [1]u32,
};

pub const SID_NAME_USE = extern enum(i32) {
    SidTypeUser = 1,
    SidTypeGroup = 2,
    SidTypeDomain = 3,
    SidTypeAlias = 4,
    SidTypeWellKnownGroup = 5,
    SidTypeDeletedAccount = 6,
    SidTypeInvalid = 7,
    SidTypeUnknown = 8,
    SidTypeComputer = 9,
    SidTypeLabel = 10,
    SidTypeLogonSession = 11,
};
pub const SidTypeUser = SID_NAME_USE.SidTypeUser;
pub const SidTypeGroup = SID_NAME_USE.SidTypeGroup;
pub const SidTypeDomain = SID_NAME_USE.SidTypeDomain;
pub const SidTypeAlias = SID_NAME_USE.SidTypeAlias;
pub const SidTypeWellKnownGroup = SID_NAME_USE.SidTypeWellKnownGroup;
pub const SidTypeDeletedAccount = SID_NAME_USE.SidTypeDeletedAccount;
pub const SidTypeInvalid = SID_NAME_USE.SidTypeInvalid;
pub const SidTypeUnknown = SID_NAME_USE.SidTypeUnknown;
pub const SidTypeComputer = SID_NAME_USE.SidTypeComputer;
pub const SidTypeLabel = SID_NAME_USE.SidTypeLabel;
pub const SidTypeLogonSession = SID_NAME_USE.SidTypeLogonSession;

pub const SID_AND_ATTRIBUTES = extern struct {
    Sid: *c_void,
    Attributes: u32,
};

pub const SID_AND_ATTRIBUTES_HASH = extern struct {
    SidCount: u32,
    SidAttr: *SID_AND_ATTRIBUTES,
    Hash: [32]?*c_void,
};

pub const WELL_KNOWN_SID_TYPE = extern enum(i32) {
    WinNullSid = 0,
    WinWorldSid = 1,
    WinLocalSid = 2,
    WinCreatorOwnerSid = 3,
    WinCreatorGroupSid = 4,
    WinCreatorOwnerServerSid = 5,
    WinCreatorGroupServerSid = 6,
    WinNtAuthoritySid = 7,
    WinDialupSid = 8,
    WinNetworkSid = 9,
    WinBatchSid = 10,
    WinInteractiveSid = 11,
    WinServiceSid = 12,
    WinAnonymousSid = 13,
    WinProxySid = 14,
    WinEnterpriseControllersSid = 15,
    WinSelfSid = 16,
    WinAuthenticatedUserSid = 17,
    WinRestrictedCodeSid = 18,
    WinTerminalServerSid = 19,
    WinRemoteLogonIdSid = 20,
    WinLogonIdsSid = 21,
    WinLocalSystemSid = 22,
    WinLocalServiceSid = 23,
    WinNetworkServiceSid = 24,
    WinBuiltinDomainSid = 25,
    WinBuiltinAdministratorsSid = 26,
    WinBuiltinUsersSid = 27,
    WinBuiltinGuestsSid = 28,
    WinBuiltinPowerUsersSid = 29,
    WinBuiltinAccountOperatorsSid = 30,
    WinBuiltinSystemOperatorsSid = 31,
    WinBuiltinPrintOperatorsSid = 32,
    WinBuiltinBackupOperatorsSid = 33,
    WinBuiltinReplicatorSid = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid = 36,
    WinBuiltinNetworkConfigurationOperatorsSid = 37,
    WinAccountAdministratorSid = 38,
    WinAccountGuestSid = 39,
    WinAccountKrbtgtSid = 40,
    WinAccountDomainAdminsSid = 41,
    WinAccountDomainUsersSid = 42,
    WinAccountDomainGuestsSid = 43,
    WinAccountComputersSid = 44,
    WinAccountControllersSid = 45,
    WinAccountCertAdminsSid = 46,
    WinAccountSchemaAdminsSid = 47,
    WinAccountEnterpriseAdminsSid = 48,
    WinAccountPolicyAdminsSid = 49,
    WinAccountRasAndIasServersSid = 50,
    WinNTLMAuthenticationSid = 51,
    WinDigestAuthenticationSid = 52,
    WinSChannelAuthenticationSid = 53,
    WinThisOrganizationSid = 54,
    WinOtherOrganizationSid = 55,
    WinBuiltinIncomingForestTrustBuildersSid = 56,
    WinBuiltinPerfMonitoringUsersSid = 57,
    WinBuiltinPerfLoggingUsersSid = 58,
    WinBuiltinAuthorizationAccessSid = 59,
    WinBuiltinTerminalServerLicenseServersSid = 60,
    WinBuiltinDCOMUsersSid = 61,
    WinBuiltinIUsersSid = 62,
    WinIUserSid = 63,
    WinBuiltinCryptoOperatorsSid = 64,
    WinUntrustedLabelSid = 65,
    WinLowLabelSid = 66,
    WinMediumLabelSid = 67,
    WinHighLabelSid = 68,
    WinSystemLabelSid = 69,
    WinWriteRestrictedCodeSid = 70,
    WinCreatorOwnerRightsSid = 71,
    WinCacheablePrincipalsGroupSid = 72,
    WinNonCacheablePrincipalsGroupSid = 73,
    WinEnterpriseReadonlyControllersSid = 74,
    WinAccountReadonlyControllersSid = 75,
    WinBuiltinEventLogReadersGroup = 76,
    WinNewEnterpriseReadonlyControllersSid = 77,
    WinBuiltinCertSvcDComAccessGroup = 78,
    WinMediumPlusLabelSid = 79,
    WinLocalLogonSid = 80,
    WinConsoleLogonSid = 81,
    WinThisOrganizationCertificateSid = 82,
    WinApplicationPackageAuthoritySid = 83,
    WinBuiltinAnyPackageSid = 84,
    WinCapabilityInternetClientSid = 85,
    WinCapabilityInternetClientServerSid = 86,
    WinCapabilityPrivateNetworkClientServerSid = 87,
    WinCapabilityPicturesLibrarySid = 88,
    WinCapabilityVideosLibrarySid = 89,
    WinCapabilityMusicLibrarySid = 90,
    WinCapabilityDocumentsLibrarySid = 91,
    WinCapabilitySharedUserCertificatesSid = 92,
    WinCapabilityEnterpriseAuthenticationSid = 93,
    WinCapabilityRemovableStorageSid = 94,
    WinBuiltinRDSRemoteAccessServersSid = 95,
    WinBuiltinRDSEndpointServersSid = 96,
    WinBuiltinRDSManagementServersSid = 97,
    WinUserModeDriversSid = 98,
    WinBuiltinHyperVAdminsSid = 99,
    WinAccountCloneableControllersSid = 100,
    WinBuiltinAccessControlAssistanceOperatorsSid = 101,
    WinBuiltinRemoteManagementUsersSid = 102,
    WinAuthenticationAuthorityAssertedSid = 103,
    WinAuthenticationServiceAssertedSid = 104,
    WinLocalAccountSid = 105,
    WinLocalAccountAndAdministratorSid = 106,
    WinAccountProtectedUsersSid = 107,
    WinCapabilityAppointmentsSid = 108,
    WinCapabilityContactsSid = 109,
    WinAccountDefaultSystemManagedSid = 110,
    WinBuiltinDefaultSystemManagedGroupSid = 111,
    WinBuiltinStorageReplicaAdminsSid = 112,
    WinAccountKeyAdminsSid = 113,
    WinAccountEnterpriseKeyAdminsSid = 114,
    WinAuthenticationKeyTrustSid = 115,
    WinAuthenticationKeyPropertyMFASid = 116,
    WinAuthenticationKeyPropertyAttestationSid = 117,
    WinAuthenticationFreshKeyAuthSid = 118,
    WinBuiltinDeviceOwnersSid = 119,
};
pub const WinNullSid = WELL_KNOWN_SID_TYPE.WinNullSid;
pub const WinWorldSid = WELL_KNOWN_SID_TYPE.WinWorldSid;
pub const WinLocalSid = WELL_KNOWN_SID_TYPE.WinLocalSid;
pub const WinCreatorOwnerSid = WELL_KNOWN_SID_TYPE.WinCreatorOwnerSid;
pub const WinCreatorGroupSid = WELL_KNOWN_SID_TYPE.WinCreatorGroupSid;
pub const WinCreatorOwnerServerSid = WELL_KNOWN_SID_TYPE.WinCreatorOwnerServerSid;
pub const WinCreatorGroupServerSid = WELL_KNOWN_SID_TYPE.WinCreatorGroupServerSid;
pub const WinNtAuthoritySid = WELL_KNOWN_SID_TYPE.WinNtAuthoritySid;
pub const WinDialupSid = WELL_KNOWN_SID_TYPE.WinDialupSid;
pub const WinNetworkSid = WELL_KNOWN_SID_TYPE.WinNetworkSid;
pub const WinBatchSid = WELL_KNOWN_SID_TYPE.WinBatchSid;
pub const WinInteractiveSid = WELL_KNOWN_SID_TYPE.WinInteractiveSid;
pub const WinServiceSid = WELL_KNOWN_SID_TYPE.WinServiceSid;
pub const WinAnonymousSid = WELL_KNOWN_SID_TYPE.WinAnonymousSid;
pub const WinProxySid = WELL_KNOWN_SID_TYPE.WinProxySid;
pub const WinEnterpriseControllersSid = WELL_KNOWN_SID_TYPE.WinEnterpriseControllersSid;
pub const WinSelfSid = WELL_KNOWN_SID_TYPE.WinSelfSid;
pub const WinAuthenticatedUserSid = WELL_KNOWN_SID_TYPE.WinAuthenticatedUserSid;
pub const WinRestrictedCodeSid = WELL_KNOWN_SID_TYPE.WinRestrictedCodeSid;
pub const WinTerminalServerSid = WELL_KNOWN_SID_TYPE.WinTerminalServerSid;
pub const WinRemoteLogonIdSid = WELL_KNOWN_SID_TYPE.WinRemoteLogonIdSid;
pub const WinLogonIdsSid = WELL_KNOWN_SID_TYPE.WinLogonIdsSid;
pub const WinLocalSystemSid = WELL_KNOWN_SID_TYPE.WinLocalSystemSid;
pub const WinLocalServiceSid = WELL_KNOWN_SID_TYPE.WinLocalServiceSid;
pub const WinNetworkServiceSid = WELL_KNOWN_SID_TYPE.WinNetworkServiceSid;
pub const WinBuiltinDomainSid = WELL_KNOWN_SID_TYPE.WinBuiltinDomainSid;
pub const WinBuiltinAdministratorsSid = WELL_KNOWN_SID_TYPE.WinBuiltinAdministratorsSid;
pub const WinBuiltinUsersSid = WELL_KNOWN_SID_TYPE.WinBuiltinUsersSid;
pub const WinBuiltinGuestsSid = WELL_KNOWN_SID_TYPE.WinBuiltinGuestsSid;
pub const WinBuiltinPowerUsersSid = WELL_KNOWN_SID_TYPE.WinBuiltinPowerUsersSid;
pub const WinBuiltinAccountOperatorsSid = WELL_KNOWN_SID_TYPE.WinBuiltinAccountOperatorsSid;
pub const WinBuiltinSystemOperatorsSid = WELL_KNOWN_SID_TYPE.WinBuiltinSystemOperatorsSid;
pub const WinBuiltinPrintOperatorsSid = WELL_KNOWN_SID_TYPE.WinBuiltinPrintOperatorsSid;
pub const WinBuiltinBackupOperatorsSid = WELL_KNOWN_SID_TYPE.WinBuiltinBackupOperatorsSid;
pub const WinBuiltinReplicatorSid = WELL_KNOWN_SID_TYPE.WinBuiltinReplicatorSid;
pub const WinBuiltinPreWindows2000CompatibleAccessSid = WELL_KNOWN_SID_TYPE.WinBuiltinPreWindows2000CompatibleAccessSid;
pub const WinBuiltinRemoteDesktopUsersSid = WELL_KNOWN_SID_TYPE.WinBuiltinRemoteDesktopUsersSid;
pub const WinBuiltinNetworkConfigurationOperatorsSid = WELL_KNOWN_SID_TYPE.WinBuiltinNetworkConfigurationOperatorsSid;
pub const WinAccountAdministratorSid = WELL_KNOWN_SID_TYPE.WinAccountAdministratorSid;
pub const WinAccountGuestSid = WELL_KNOWN_SID_TYPE.WinAccountGuestSid;
pub const WinAccountKrbtgtSid = WELL_KNOWN_SID_TYPE.WinAccountKrbtgtSid;
pub const WinAccountDomainAdminsSid = WELL_KNOWN_SID_TYPE.WinAccountDomainAdminsSid;
pub const WinAccountDomainUsersSid = WELL_KNOWN_SID_TYPE.WinAccountDomainUsersSid;
pub const WinAccountDomainGuestsSid = WELL_KNOWN_SID_TYPE.WinAccountDomainGuestsSid;
pub const WinAccountComputersSid = WELL_KNOWN_SID_TYPE.WinAccountComputersSid;
pub const WinAccountControllersSid = WELL_KNOWN_SID_TYPE.WinAccountControllersSid;
pub const WinAccountCertAdminsSid = WELL_KNOWN_SID_TYPE.WinAccountCertAdminsSid;
pub const WinAccountSchemaAdminsSid = WELL_KNOWN_SID_TYPE.WinAccountSchemaAdminsSid;
pub const WinAccountEnterpriseAdminsSid = WELL_KNOWN_SID_TYPE.WinAccountEnterpriseAdminsSid;
pub const WinAccountPolicyAdminsSid = WELL_KNOWN_SID_TYPE.WinAccountPolicyAdminsSid;
pub const WinAccountRasAndIasServersSid = WELL_KNOWN_SID_TYPE.WinAccountRasAndIasServersSid;
pub const WinNTLMAuthenticationSid = WELL_KNOWN_SID_TYPE.WinNTLMAuthenticationSid;
pub const WinDigestAuthenticationSid = WELL_KNOWN_SID_TYPE.WinDigestAuthenticationSid;
pub const WinSChannelAuthenticationSid = WELL_KNOWN_SID_TYPE.WinSChannelAuthenticationSid;
pub const WinThisOrganizationSid = WELL_KNOWN_SID_TYPE.WinThisOrganizationSid;
pub const WinOtherOrganizationSid = WELL_KNOWN_SID_TYPE.WinOtherOrganizationSid;
pub const WinBuiltinIncomingForestTrustBuildersSid = WELL_KNOWN_SID_TYPE.WinBuiltinIncomingForestTrustBuildersSid;
pub const WinBuiltinPerfMonitoringUsersSid = WELL_KNOWN_SID_TYPE.WinBuiltinPerfMonitoringUsersSid;
pub const WinBuiltinPerfLoggingUsersSid = WELL_KNOWN_SID_TYPE.WinBuiltinPerfLoggingUsersSid;
pub const WinBuiltinAuthorizationAccessSid = WELL_KNOWN_SID_TYPE.WinBuiltinAuthorizationAccessSid;
pub const WinBuiltinTerminalServerLicenseServersSid = WELL_KNOWN_SID_TYPE.WinBuiltinTerminalServerLicenseServersSid;
pub const WinBuiltinDCOMUsersSid = WELL_KNOWN_SID_TYPE.WinBuiltinDCOMUsersSid;
pub const WinBuiltinIUsersSid = WELL_KNOWN_SID_TYPE.WinBuiltinIUsersSid;
pub const WinIUserSid = WELL_KNOWN_SID_TYPE.WinIUserSid;
pub const WinBuiltinCryptoOperatorsSid = WELL_KNOWN_SID_TYPE.WinBuiltinCryptoOperatorsSid;
pub const WinUntrustedLabelSid = WELL_KNOWN_SID_TYPE.WinUntrustedLabelSid;
pub const WinLowLabelSid = WELL_KNOWN_SID_TYPE.WinLowLabelSid;
pub const WinMediumLabelSid = WELL_KNOWN_SID_TYPE.WinMediumLabelSid;
pub const WinHighLabelSid = WELL_KNOWN_SID_TYPE.WinHighLabelSid;
pub const WinSystemLabelSid = WELL_KNOWN_SID_TYPE.WinSystemLabelSid;
pub const WinWriteRestrictedCodeSid = WELL_KNOWN_SID_TYPE.WinWriteRestrictedCodeSid;
pub const WinCreatorOwnerRightsSid = WELL_KNOWN_SID_TYPE.WinCreatorOwnerRightsSid;
pub const WinCacheablePrincipalsGroupSid = WELL_KNOWN_SID_TYPE.WinCacheablePrincipalsGroupSid;
pub const WinNonCacheablePrincipalsGroupSid = WELL_KNOWN_SID_TYPE.WinNonCacheablePrincipalsGroupSid;
pub const WinEnterpriseReadonlyControllersSid = WELL_KNOWN_SID_TYPE.WinEnterpriseReadonlyControllersSid;
pub const WinAccountReadonlyControllersSid = WELL_KNOWN_SID_TYPE.WinAccountReadonlyControllersSid;
pub const WinBuiltinEventLogReadersGroup = WELL_KNOWN_SID_TYPE.WinBuiltinEventLogReadersGroup;
pub const WinNewEnterpriseReadonlyControllersSid = WELL_KNOWN_SID_TYPE.WinNewEnterpriseReadonlyControllersSid;
pub const WinBuiltinCertSvcDComAccessGroup = WELL_KNOWN_SID_TYPE.WinBuiltinCertSvcDComAccessGroup;
pub const WinMediumPlusLabelSid = WELL_KNOWN_SID_TYPE.WinMediumPlusLabelSid;
pub const WinLocalLogonSid = WELL_KNOWN_SID_TYPE.WinLocalLogonSid;
pub const WinConsoleLogonSid = WELL_KNOWN_SID_TYPE.WinConsoleLogonSid;
pub const WinThisOrganizationCertificateSid = WELL_KNOWN_SID_TYPE.WinThisOrganizationCertificateSid;
pub const WinApplicationPackageAuthoritySid = WELL_KNOWN_SID_TYPE.WinApplicationPackageAuthoritySid;
pub const WinBuiltinAnyPackageSid = WELL_KNOWN_SID_TYPE.WinBuiltinAnyPackageSid;
pub const WinCapabilityInternetClientSid = WELL_KNOWN_SID_TYPE.WinCapabilityInternetClientSid;
pub const WinCapabilityInternetClientServerSid = WELL_KNOWN_SID_TYPE.WinCapabilityInternetClientServerSid;
pub const WinCapabilityPrivateNetworkClientServerSid = WELL_KNOWN_SID_TYPE.WinCapabilityPrivateNetworkClientServerSid;
pub const WinCapabilityPicturesLibrarySid = WELL_KNOWN_SID_TYPE.WinCapabilityPicturesLibrarySid;
pub const WinCapabilityVideosLibrarySid = WELL_KNOWN_SID_TYPE.WinCapabilityVideosLibrarySid;
pub const WinCapabilityMusicLibrarySid = WELL_KNOWN_SID_TYPE.WinCapabilityMusicLibrarySid;
pub const WinCapabilityDocumentsLibrarySid = WELL_KNOWN_SID_TYPE.WinCapabilityDocumentsLibrarySid;
pub const WinCapabilitySharedUserCertificatesSid = WELL_KNOWN_SID_TYPE.WinCapabilitySharedUserCertificatesSid;
pub const WinCapabilityEnterpriseAuthenticationSid = WELL_KNOWN_SID_TYPE.WinCapabilityEnterpriseAuthenticationSid;
pub const WinCapabilityRemovableStorageSid = WELL_KNOWN_SID_TYPE.WinCapabilityRemovableStorageSid;
pub const WinBuiltinRDSRemoteAccessServersSid = WELL_KNOWN_SID_TYPE.WinBuiltinRDSRemoteAccessServersSid;
pub const WinBuiltinRDSEndpointServersSid = WELL_KNOWN_SID_TYPE.WinBuiltinRDSEndpointServersSid;
pub const WinBuiltinRDSManagementServersSid = WELL_KNOWN_SID_TYPE.WinBuiltinRDSManagementServersSid;
pub const WinUserModeDriversSid = WELL_KNOWN_SID_TYPE.WinUserModeDriversSid;
pub const WinBuiltinHyperVAdminsSid = WELL_KNOWN_SID_TYPE.WinBuiltinHyperVAdminsSid;
pub const WinAccountCloneableControllersSid = WELL_KNOWN_SID_TYPE.WinAccountCloneableControllersSid;
pub const WinBuiltinAccessControlAssistanceOperatorsSid = WELL_KNOWN_SID_TYPE.WinBuiltinAccessControlAssistanceOperatorsSid;
pub const WinBuiltinRemoteManagementUsersSid = WELL_KNOWN_SID_TYPE.WinBuiltinRemoteManagementUsersSid;
pub const WinAuthenticationAuthorityAssertedSid = WELL_KNOWN_SID_TYPE.WinAuthenticationAuthorityAssertedSid;
pub const WinAuthenticationServiceAssertedSid = WELL_KNOWN_SID_TYPE.WinAuthenticationServiceAssertedSid;
pub const WinLocalAccountSid = WELL_KNOWN_SID_TYPE.WinLocalAccountSid;
pub const WinLocalAccountAndAdministratorSid = WELL_KNOWN_SID_TYPE.WinLocalAccountAndAdministratorSid;
pub const WinAccountProtectedUsersSid = WELL_KNOWN_SID_TYPE.WinAccountProtectedUsersSid;
pub const WinCapabilityAppointmentsSid = WELL_KNOWN_SID_TYPE.WinCapabilityAppointmentsSid;
pub const WinCapabilityContactsSid = WELL_KNOWN_SID_TYPE.WinCapabilityContactsSid;
pub const WinAccountDefaultSystemManagedSid = WELL_KNOWN_SID_TYPE.WinAccountDefaultSystemManagedSid;
pub const WinBuiltinDefaultSystemManagedGroupSid = WELL_KNOWN_SID_TYPE.WinBuiltinDefaultSystemManagedGroupSid;
pub const WinBuiltinStorageReplicaAdminsSid = WELL_KNOWN_SID_TYPE.WinBuiltinStorageReplicaAdminsSid;
pub const WinAccountKeyAdminsSid = WELL_KNOWN_SID_TYPE.WinAccountKeyAdminsSid;
pub const WinAccountEnterpriseKeyAdminsSid = WELL_KNOWN_SID_TYPE.WinAccountEnterpriseKeyAdminsSid;
pub const WinAuthenticationKeyTrustSid = WELL_KNOWN_SID_TYPE.WinAuthenticationKeyTrustSid;
pub const WinAuthenticationKeyPropertyMFASid = WELL_KNOWN_SID_TYPE.WinAuthenticationKeyPropertyMFASid;
pub const WinAuthenticationKeyPropertyAttestationSid = WELL_KNOWN_SID_TYPE.WinAuthenticationKeyPropertyAttestationSid;
pub const WinAuthenticationFreshKeyAuthSid = WELL_KNOWN_SID_TYPE.WinAuthenticationFreshKeyAuthSid;
pub const WinBuiltinDeviceOwnersSid = WELL_KNOWN_SID_TYPE.WinBuiltinDeviceOwnersSid;

pub const ACL = extern struct {
    AclRevision: u8,
    Sbz1: u8,
    AclSize: u16,
    AceCount: u16,
    Sbz2: u16,
};

pub const ACE_HEADER = extern struct {
    AceType: u8,
    AceFlags: u8,
    AceSize: u16,
};

pub const ACCESS_ALLOWED_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};

pub const ACCESS_DENIED_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};

pub const SYSTEM_AUDIT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};

pub const SYSTEM_ALARM_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};

pub const SYSTEM_RESOURCE_ATTRIBUTE_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};

pub const SYSTEM_SCOPED_POLICY_ID_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};

pub const SYSTEM_MANDATORY_LABEL_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};

pub const ACCESS_ALLOWED_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    Flags: u32,
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: u32,
};

pub const ACCESS_DENIED_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    Flags: u32,
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: u32,
};

pub const SYSTEM_AUDIT_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    Flags: u32,
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: u32,
};

pub const SYSTEM_ALARM_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    Flags: u32,
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: u32,
};

pub const ACCESS_ALLOWED_CALLBACK_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};

pub const ACCESS_DENIED_CALLBACK_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};

pub const SYSTEM_AUDIT_CALLBACK_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};

pub const SYSTEM_ALARM_CALLBACK_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    SidStart: u32,
};

pub const ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    Flags: u32,
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: u32,
};

pub const ACCESS_DENIED_CALLBACK_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    Flags: u32,
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: u32,
};

pub const SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    Flags: u32,
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: u32,
};

pub const SYSTEM_ALARM_CALLBACK_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: u32,
    Flags: u32,
    ObjectType: Guid,
    InheritedObjectType: Guid,
    SidStart: u32,
};

pub const ACL_INFORMATION_CLASS = extern enum(i32) {
    AclRevisionInformation = 1,
    AclSizeInformation = 2,
};
pub const AclRevisionInformation = ACL_INFORMATION_CLASS.AclRevisionInformation;
pub const AclSizeInformation = ACL_INFORMATION_CLASS.AclSizeInformation;

pub const ACL_REVISION_INFORMATION = extern struct {
    AclRevision: u32,
};

pub const ACL_SIZE_INFORMATION = extern struct {
    AceCount: u32,
    AclBytesInUse: u32,
    AclBytesFree: u32,
};

pub const SECURITY_DESCRIPTOR = extern struct {
    Revision: u8,
    Sbz1: u8,
    Control: u16,
    Owner: *c_void,
    Group: *c_void,
    Sacl: *ACL,
    Dacl: *ACL,
};

pub const OBJECT_TYPE_LIST = extern struct {
    Level: u16,
    Sbz: u16,
    ObjectType: *Guid,
};

pub const AUDIT_EVENT_TYPE = extern enum(i32) {
    AuditEventObjectAccess = 0,
    AuditEventDirectoryServiceAccess = 1,
};
pub const AuditEventObjectAccess = AUDIT_EVENT_TYPE.AuditEventObjectAccess;
pub const AuditEventDirectoryServiceAccess = AUDIT_EVENT_TYPE.AuditEventDirectoryServiceAccess;

pub const PRIVILEGE_SET = extern struct {
    PrivilegeCount: u32,
    Control: u32,
    Privilege: [1]LUID_AND_ATTRIBUTES,
};

pub const SECURITY_IMPERSONATION_LEVEL = extern enum(i32) {
    SecurityAnonymous = 0,
    SecurityIdentification = 1,
    SecurityImpersonation = 2,
    SecurityDelegation = 3,
};
pub const SecurityAnonymous = SECURITY_IMPERSONATION_LEVEL.SecurityAnonymous;
pub const SecurityIdentification = SECURITY_IMPERSONATION_LEVEL.SecurityIdentification;
pub const SecurityImpersonation = SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation;
pub const SecurityDelegation = SECURITY_IMPERSONATION_LEVEL.SecurityDelegation;

pub const TOKEN_TYPE = extern enum(i32) {
    TokenPrimary = 1,
    TokenImpersonation = 2,
};
pub const TokenPrimary = TOKEN_TYPE.TokenPrimary;
pub const TokenImpersonation = TOKEN_TYPE.TokenImpersonation;

pub const TOKEN_ELEVATION_TYPE = extern enum(i32) {
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull = 2,
    TokenElevationTypeLimited = 3,
};
pub const TokenElevationTypeDefault = TOKEN_ELEVATION_TYPE.TokenElevationTypeDefault;
pub const TokenElevationTypeFull = TOKEN_ELEVATION_TYPE.TokenElevationTypeFull;
pub const TokenElevationTypeLimited = TOKEN_ELEVATION_TYPE.TokenElevationTypeLimited;

pub const TOKEN_INFORMATION_CLASS = extern enum(i32) {
    TokenUser = 1,
    TokenGroups = 2,
    TokenPrivileges = 3,
    TokenOwner = 4,
    TokenPrimaryGroup = 5,
    TokenDefaultDacl = 6,
    TokenSource = 7,
    TokenType = 8,
    TokenImpersonationLevel = 9,
    TokenStatistics = 10,
    TokenRestrictedSids = 11,
    TokenSessionId = 12,
    TokenGroupsAndPrivileges = 13,
    TokenSessionReference = 14,
    TokenSandBoxInert = 15,
    TokenAuditPolicy = 16,
    TokenOrigin = 17,
    TokenElevationType = 18,
    TokenLinkedToken = 19,
    TokenElevation = 20,
    TokenHasRestrictions = 21,
    TokenAccessInformation = 22,
    TokenVirtualizationAllowed = 23,
    TokenVirtualizationEnabled = 24,
    TokenIntegrityLevel = 25,
    TokenUIAccess = 26,
    TokenMandatoryPolicy = 27,
    TokenLogonSid = 28,
    TokenIsAppContainer = 29,
    TokenCapabilities = 30,
    TokenAppContainerSid = 31,
    TokenAppContainerNumber = 32,
    TokenUserClaimAttributes = 33,
    TokenDeviceClaimAttributes = 34,
    TokenRestrictedUserClaimAttributes = 35,
    TokenRestrictedDeviceClaimAttributes = 36,
    TokenDeviceGroups = 37,
    TokenRestrictedDeviceGroups = 38,
    TokenSecurityAttributes = 39,
    TokenIsRestricted = 40,
    TokenProcessTrustLevel = 41,
    TokenPrivateNameSpace = 42,
    TokenSingletonAttributes = 43,
    TokenBnoIsolation = 44,
    TokenChildProcessFlags = 45,
    TokenIsLessPrivilegedAppContainer = 46,
    TokenIsSandboxed = 47,
    TokenOriginatingProcessTrustLevel = 48,
    MaxTokenInfoClass = 49,
};
pub const TokenUser = TOKEN_INFORMATION_CLASS.TokenUser;
pub const TokenGroups = TOKEN_INFORMATION_CLASS.TokenGroups;
pub const TokenPrivileges = TOKEN_INFORMATION_CLASS.TokenPrivileges;
pub const TokenOwner = TOKEN_INFORMATION_CLASS.TokenOwner;
pub const TokenPrimaryGroup = TOKEN_INFORMATION_CLASS.TokenPrimaryGroup;
pub const TokenDefaultDacl = TOKEN_INFORMATION_CLASS.TokenDefaultDacl;
pub const TokenSource = TOKEN_INFORMATION_CLASS.TokenSource;
pub const TokenType = TOKEN_INFORMATION_CLASS.TokenType;
pub const TokenImpersonationLevel = TOKEN_INFORMATION_CLASS.TokenImpersonationLevel;
pub const TokenStatistics = TOKEN_INFORMATION_CLASS.TokenStatistics;
pub const TokenRestrictedSids = TOKEN_INFORMATION_CLASS.TokenRestrictedSids;
pub const TokenSessionId = TOKEN_INFORMATION_CLASS.TokenSessionId;
pub const TokenGroupsAndPrivileges = TOKEN_INFORMATION_CLASS.TokenGroupsAndPrivileges;
pub const TokenSessionReference = TOKEN_INFORMATION_CLASS.TokenSessionReference;
pub const TokenSandBoxInert = TOKEN_INFORMATION_CLASS.TokenSandBoxInert;
pub const TokenAuditPolicy = TOKEN_INFORMATION_CLASS.TokenAuditPolicy;
pub const TokenOrigin = TOKEN_INFORMATION_CLASS.TokenOrigin;
pub const TokenElevationType = TOKEN_INFORMATION_CLASS.TokenElevationType;
pub const TokenLinkedToken = TOKEN_INFORMATION_CLASS.TokenLinkedToken;
pub const TokenElevation = TOKEN_INFORMATION_CLASS.TokenElevation;
pub const TokenHasRestrictions = TOKEN_INFORMATION_CLASS.TokenHasRestrictions;
pub const TokenAccessInformation = TOKEN_INFORMATION_CLASS.TokenAccessInformation;
pub const TokenVirtualizationAllowed = TOKEN_INFORMATION_CLASS.TokenVirtualizationAllowed;
pub const TokenVirtualizationEnabled = TOKEN_INFORMATION_CLASS.TokenVirtualizationEnabled;
pub const TokenIntegrityLevel = TOKEN_INFORMATION_CLASS.TokenIntegrityLevel;
pub const TokenUIAccess = TOKEN_INFORMATION_CLASS.TokenUIAccess;
pub const TokenMandatoryPolicy = TOKEN_INFORMATION_CLASS.TokenMandatoryPolicy;
pub const TokenLogonSid = TOKEN_INFORMATION_CLASS.TokenLogonSid;
pub const TokenIsAppContainer = TOKEN_INFORMATION_CLASS.TokenIsAppContainer;
pub const TokenCapabilities = TOKEN_INFORMATION_CLASS.TokenCapabilities;
pub const TokenAppContainerSid = TOKEN_INFORMATION_CLASS.TokenAppContainerSid;
pub const TokenAppContainerNumber = TOKEN_INFORMATION_CLASS.TokenAppContainerNumber;
pub const TokenUserClaimAttributes = TOKEN_INFORMATION_CLASS.TokenUserClaimAttributes;
pub const TokenDeviceClaimAttributes = TOKEN_INFORMATION_CLASS.TokenDeviceClaimAttributes;
pub const TokenRestrictedUserClaimAttributes = TOKEN_INFORMATION_CLASS.TokenRestrictedUserClaimAttributes;
pub const TokenRestrictedDeviceClaimAttributes = TOKEN_INFORMATION_CLASS.TokenRestrictedDeviceClaimAttributes;
pub const TokenDeviceGroups = TOKEN_INFORMATION_CLASS.TokenDeviceGroups;
pub const TokenRestrictedDeviceGroups = TOKEN_INFORMATION_CLASS.TokenRestrictedDeviceGroups;
pub const TokenSecurityAttributes = TOKEN_INFORMATION_CLASS.TokenSecurityAttributes;
pub const TokenIsRestricted = TOKEN_INFORMATION_CLASS.TokenIsRestricted;
pub const TokenProcessTrustLevel = TOKEN_INFORMATION_CLASS.TokenProcessTrustLevel;
pub const TokenPrivateNameSpace = TOKEN_INFORMATION_CLASS.TokenPrivateNameSpace;
pub const TokenSingletonAttributes = TOKEN_INFORMATION_CLASS.TokenSingletonAttributes;
pub const TokenBnoIsolation = TOKEN_INFORMATION_CLASS.TokenBnoIsolation;
pub const TokenChildProcessFlags = TOKEN_INFORMATION_CLASS.TokenChildProcessFlags;
pub const TokenIsLessPrivilegedAppContainer = TOKEN_INFORMATION_CLASS.TokenIsLessPrivilegedAppContainer;
pub const TokenIsSandboxed = TOKEN_INFORMATION_CLASS.TokenIsSandboxed;
pub const TokenOriginatingProcessTrustLevel = TOKEN_INFORMATION_CLASS.TokenOriginatingProcessTrustLevel;
pub const MaxTokenInfoClass = TOKEN_INFORMATION_CLASS.MaxTokenInfoClass;

pub const TOKEN_USER = extern struct {
    User: SID_AND_ATTRIBUTES,
};

pub const TOKEN_GROUPS = extern struct {
    GroupCount: u32,
    Groups: [1]SID_AND_ATTRIBUTES,
};

pub const TOKEN_PRIVILEGES = extern struct {
    PrivilegeCount: u32,
    Privileges: [1]LUID_AND_ATTRIBUTES,
};

pub const TOKEN_OWNER = extern struct {
    Owner: *c_void,
};

pub const TOKEN_PRIMARY_GROUP = extern struct {
    PrimaryGroup: *c_void,
};

pub const TOKEN_DEFAULT_DACL = extern struct {
    DefaultDacl: *ACL,
};

pub const TOKEN_USER_CLAIMS = extern struct {
    UserClaims: *c_void,
};

pub const TOKEN_DEVICE_CLAIMS = extern struct {
    DeviceClaims: *c_void,
};

pub const TOKEN_GROUPS_AND_PRIVILEGES = extern struct {
    SidCount: u32,
    SidLength: u32,
    Sids: *SID_AND_ATTRIBUTES,
    RestrictedSidCount: u32,
    RestrictedSidLength: u32,
    RestrictedSids: *SID_AND_ATTRIBUTES,
    PrivilegeCount: u32,
    PrivilegeLength: u32,
    Privileges: *LUID_AND_ATTRIBUTES,
    AuthenticationId: LUID,
};

pub const TOKEN_LINKED_TOKEN = extern struct {
    LinkedToken: HANDLE,
};

pub const TOKEN_ELEVATION = extern struct {
    TokenIsElevated: u32,
};

pub const TOKEN_MANDATORY_LABEL = extern struct {
    Label: SID_AND_ATTRIBUTES,
};

pub const TOKEN_MANDATORY_POLICY = extern struct {
    Policy: u32,
};

pub const TOKEN_ACCESS_INFORMATION = extern struct {
    SidHash: *SID_AND_ATTRIBUTES_HASH,
    RestrictedSidHash: *SID_AND_ATTRIBUTES_HASH,
    Privileges: *TOKEN_PRIVILEGES,
    AuthenticationId: LUID,
    TokenType: TOKEN_TYPE,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    MandatoryPolicy: TOKEN_MANDATORY_POLICY,
    Flags: u32,
    AppContainerNumber: u32,
    PackageSid: *c_void,
    CapabilitiesHash: *SID_AND_ATTRIBUTES_HASH,
    TrustLevelSid: *c_void,
    SecurityAttributes: *c_void,
};

pub const TOKEN_AUDIT_POLICY = extern struct {
    PerUserPolicy: [30]u8,
};

pub const TOKEN_SOURCE = extern struct {
    SourceName: [8]i8,
    SourceIdentifier: LUID,
};

pub const TOKEN_STATISTICS = extern struct {
    TokenId: LUID,
    AuthenticationId: LUID,
    ExpirationTime: LARGE_INTEGER,
    TokenType: TOKEN_TYPE,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    DynamicCharged: u32,
    DynamicAvailable: u32,
    GroupCount: u32,
    PrivilegeCount: u32,
    ModifiedId: LUID,
};

pub const TOKEN_CONTROL = extern struct {
    TokenId: LUID,
    AuthenticationId: LUID,
    ModifiedId: LUID,
    TokenSource: TOKEN_SOURCE,
};

pub const TOKEN_ORIGIN = extern struct {
    OriginatingLogonSession: LUID,
};

pub const MANDATORY_LEVEL = extern enum(i32) {
    MandatoryLevelUntrusted = 0,
    MandatoryLevelLow = 1,
    MandatoryLevelMedium = 2,
    MandatoryLevelHigh = 3,
    MandatoryLevelSystem = 4,
    MandatoryLevelSecureProcess = 5,
    MandatoryLevelCount = 6,
};
pub const MandatoryLevelUntrusted = MANDATORY_LEVEL.MandatoryLevelUntrusted;
pub const MandatoryLevelLow = MANDATORY_LEVEL.MandatoryLevelLow;
pub const MandatoryLevelMedium = MANDATORY_LEVEL.MandatoryLevelMedium;
pub const MandatoryLevelHigh = MANDATORY_LEVEL.MandatoryLevelHigh;
pub const MandatoryLevelSystem = MANDATORY_LEVEL.MandatoryLevelSystem;
pub const MandatoryLevelSecureProcess = MANDATORY_LEVEL.MandatoryLevelSecureProcess;
pub const MandatoryLevelCount = MANDATORY_LEVEL.MandatoryLevelCount;

pub const TOKEN_APPCONTAINER_INFORMATION = extern struct {
    TokenAppContainer: *c_void,
};

pub const CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = extern struct {
    Version: u64,
    Name: PWSTR,
};

pub const CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = extern struct {
    pValue: *c_void,
    ValueLength: u32,
};

pub const CLAIM_SECURITY_ATTRIBUTE_V1 = extern struct {
    Name: PWSTR,
    ValueType: u16,
    Reserved: u16,
    Flags: u32,
    ValueCount: u32,
    Values: CLAIM_SECURITY_ATTRIBUTE_V1._Values_e__Union,
    const _Values_e__Union = u32; // TODO: generate this nested type!
};

pub const CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = extern struct {
    Name: u32,
    ValueType: u16,
    Reserved: u16,
    Flags: u32,
    ValueCount: u32,
    Values: CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1._Values_e__Union,
    const _Values_e__Union = u32; // TODO: generate this nested type!
};

pub const CLAIM_SECURITY_ATTRIBUTES_INFORMATION = extern struct {
    Version: u16,
    Reserved: u16,
    AttributeCount: u32,
    Attribute: CLAIM_SECURITY_ATTRIBUTES_INFORMATION._Attribute_e__Union,
    const _Attribute_e__Union = u32; // TODO: generate this nested type!
};

pub const SECURITY_QUALITY_OF_SERVICE = extern struct {
    Length: u32,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    ContextTrackingMode: u8,
    EffectiveOnly: u8,
};

pub const SECURITY_CAPABILITIES = extern struct {
    AppContainerSid: *c_void,
    Capabilities: *SID_AND_ATTRIBUTES,
    CapabilityCount: u32,
    Reserved: u32,
};

pub const QUOTA_LIMITS = extern struct {
    PagedPoolLimit: ?*c_void,
    NonPagedPoolLimit: ?*c_void,
    MinimumWorkingSetSize: ?*c_void,
    MaximumWorkingSetSize: ?*c_void,
    PagefileLimit: ?*c_void,
    TimeLimit: LARGE_INTEGER,
};

pub const NETRESOURCEA = extern struct {
    dwScope: u32,
    dwType: u32,
    dwDisplayType: u32,
    dwUsage: u32,
    lpLocalName: PSTR,
    lpRemoteName: PSTR,
    lpComment: PSTR,
    lpProvider: PSTR,
};

pub const NETRESOURCEW = extern struct {
    dwScope: u32,
    dwType: u32,
    dwDisplayType: u32,
    dwUsage: u32,
    lpLocalName: PWSTR,
    lpRemoteName: PWSTR,
    lpComment: PWSTR,
    lpProvider: PWSTR,
};

pub const UNIVERSAL_NAME_INFOA = extern struct {
    lpUniversalName: PSTR,
};

pub const UNIVERSAL_NAME_INFOW = extern struct {
    lpUniversalName: PWSTR,
};

pub const REMOTE_NAME_INFOA = extern struct {
    lpUniversalName: PSTR,
    lpConnectionName: PSTR,
    lpRemainingPath: PSTR,
};

pub const REMOTE_NAME_INFOW = extern struct {
    lpUniversalName: PWSTR,
    lpConnectionName: PWSTR,
    lpRemainingPath: PWSTR,
};

pub const NETCONNECTINFOSTRUCT = extern struct {
    cbStructure: u32,
    dwFlags: u32,
    dwSpeed: u32,
    dwDelay: u32,
    dwOptDataSize: u32,
};

pub const PROCESS_INFORMATION_CLASS = extern enum(i32) {
    ProcessMemoryPriority = 0,
    ProcessMemoryExhaustionInfo = 1,
    ProcessAppMemoryInfo = 2,
    ProcessInPrivateInfo = 3,
    ProcessPowerThrottling = 4,
    ProcessReservedValue1 = 5,
    ProcessTelemetryCoverageInfo = 6,
    ProcessProtectionLevelInfo = 7,
    ProcessLeapSecondInfo = 8,
    ProcessInformationClassMax = 9,
};
pub const ProcessMemoryPriority = PROCESS_INFORMATION_CLASS.ProcessMemoryPriority;
pub const ProcessMemoryExhaustionInfo = PROCESS_INFORMATION_CLASS.ProcessMemoryExhaustionInfo;
pub const ProcessAppMemoryInfo = PROCESS_INFORMATION_CLASS.ProcessAppMemoryInfo;
pub const ProcessInPrivateInfo = PROCESS_INFORMATION_CLASS.ProcessInPrivateInfo;
pub const ProcessPowerThrottling = PROCESS_INFORMATION_CLASS.ProcessPowerThrottling;
pub const ProcessReservedValue1 = PROCESS_INFORMATION_CLASS.ProcessReservedValue1;
pub const ProcessTelemetryCoverageInfo = PROCESS_INFORMATION_CLASS.ProcessTelemetryCoverageInfo;
pub const ProcessProtectionLevelInfo = PROCESS_INFORMATION_CLASS.ProcessProtectionLevelInfo;
pub const ProcessLeapSecondInfo = PROCESS_INFORMATION_CLASS.ProcessLeapSecondInfo;
pub const ProcessInformationClassMax = PROCESS_INFORMATION_CLASS.ProcessInformationClassMax;


//--------------------------------------------------------------------------------
// Section: Functions (1169)
//--------------------------------------------------------------------------------
pub extern "ADVAPI32" fn AccessCheck(
    pSecurityDescriptor: *c_void,
    ClientToken: HANDLE,
    DesiredAccess: u32,
    GenericMapping: *GENERIC_MAPPING,
    PrivilegeSet: ?[*]PRIVILEGE_SET,
    PrivilegeSetLength: *u32,
    GrantedAccess: *u32,
    AccessStatus: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AccessCheckAndAuditAlarmW(
    SubsystemName: [*:0]const u16,
    HandleId: ?*c_void,
    ObjectTypeName: PWSTR,
    ObjectName: ?PWSTR,
    SecurityDescriptor: *c_void,
    DesiredAccess: u32,
    GenericMapping: *GENERIC_MAPPING,
    ObjectCreation: BOOL,
    GrantedAccess: *u32,
    AccessStatus: *i32,
    pfGenerateOnClose: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AccessCheckByType(
    pSecurityDescriptor: *c_void,
    PrincipalSelfSid: ?*c_void,
    ClientToken: HANDLE,
    DesiredAccess: u32,
    ObjectTypeList: ?[*]OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    GenericMapping: *GENERIC_MAPPING,
    PrivilegeSet: ?[*]PRIVILEGE_SET,
    PrivilegeSetLength: *u32,
    GrantedAccess: *u32,
    AccessStatus: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AccessCheckByTypeResultList(
    pSecurityDescriptor: *c_void,
    PrincipalSelfSid: ?*c_void,
    ClientToken: HANDLE,
    DesiredAccess: u32,
    ObjectTypeList: ?[*]OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    GenericMapping: *GENERIC_MAPPING,
    PrivilegeSet: ?[*]PRIVILEGE_SET,
    PrivilegeSetLength: *u32,
    GrantedAccessList: [*]u32,
    AccessStatusList: [*]u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AccessCheckByTypeAndAuditAlarmW(
    SubsystemName: [*:0]const u16,
    HandleId: *c_void,
    ObjectTypeName: [*:0]const u16,
    ObjectName: ?[*:0]const u16,
    SecurityDescriptor: *c_void,
    PrincipalSelfSid: ?*c_void,
    DesiredAccess: u32,
    AuditType: AUDIT_EVENT_TYPE,
    Flags: u32,
    ObjectTypeList: ?[*]OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    GenericMapping: *GENERIC_MAPPING,
    ObjectCreation: BOOL,
    GrantedAccess: *u32,
    AccessStatus: *i32,
    pfGenerateOnClose: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AccessCheckByTypeResultListAndAuditAlarmW(
    SubsystemName: [*:0]const u16,
    HandleId: *c_void,
    ObjectTypeName: [*:0]const u16,
    ObjectName: ?[*:0]const u16,
    SecurityDescriptor: *c_void,
    PrincipalSelfSid: ?*c_void,
    DesiredAccess: u32,
    AuditType: AUDIT_EVENT_TYPE,
    Flags: u32,
    ObjectTypeList: ?[*]OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    GenericMapping: *GENERIC_MAPPING,
    ObjectCreation: BOOL,
    GrantedAccessList: [*]u32,
    AccessStatusList: [*]u32,
    pfGenerateOnClose: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AccessCheckByTypeResultListAndAuditAlarmByHandleW(
    SubsystemName: [*:0]const u16,
    HandleId: *c_void,
    ClientToken: HANDLE,
    ObjectTypeName: [*:0]const u16,
    ObjectName: ?[*:0]const u16,
    SecurityDescriptor: *c_void,
    PrincipalSelfSid: ?*c_void,
    DesiredAccess: u32,
    AuditType: AUDIT_EVENT_TYPE,
    Flags: u32,
    ObjectTypeList: ?[*]OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    GenericMapping: *GENERIC_MAPPING,
    ObjectCreation: BOOL,
    GrantedAccessList: [*]u32,
    AccessStatusList: [*]u32,
    pfGenerateOnClose: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AddAccessAllowedAce(
    pAcl: *ACL,
    dwAceRevision: u32,
    AccessMask: u32,
    pSid: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AddAccessAllowedAceEx(
    pAcl: *ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    AccessMask: u32,
    pSid: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AddAccessAllowedObjectAce(
    pAcl: *ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    AccessMask: u32,
    ObjectTypeGuid: ?*Guid,
    InheritedObjectTypeGuid: ?*Guid,
    pSid: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AddAccessDeniedAce(
    pAcl: *ACL,
    dwAceRevision: u32,
    AccessMask: u32,
    pSid: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AddAccessDeniedAceEx(
    pAcl: *ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    AccessMask: u32,
    pSid: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AddAccessDeniedObjectAce(
    pAcl: *ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    AccessMask: u32,
    ObjectTypeGuid: ?*Guid,
    InheritedObjectTypeGuid: ?*Guid,
    pSid: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AddAce(
    pAcl: *ACL,
    dwAceRevision: u32,
    dwStartingAceIndex: u32,
    pAceList: [*]u8,
    nAceListLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AddAuditAccessAce(
    pAcl: *ACL,
    dwAceRevision: u32,
    dwAccessMask: u32,
    pSid: *c_void,
    bAuditSuccess: BOOL,
    bAuditFailure: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AddAuditAccessAceEx(
    pAcl: *ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    dwAccessMask: u32,
    pSid: *c_void,
    bAuditSuccess: BOOL,
    bAuditFailure: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AddAuditAccessObjectAce(
    pAcl: *ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    AccessMask: u32,
    ObjectTypeGuid: ?*Guid,
    InheritedObjectTypeGuid: ?*Guid,
    pSid: *c_void,
    bAuditSuccess: BOOL,
    bAuditFailure: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AddMandatoryAce(
    pAcl: *ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    MandatoryPolicy: u32,
    pLabelSid: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn AddResourceAttributeAce(
    pAcl: *ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    AccessMask: u32,
    pSid: *c_void,
    pAttributeInfo: *CLAIM_SECURITY_ATTRIBUTES_INFORMATION,
    pReturnLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn AddScopedPolicyIDAce(
    pAcl: *ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    AccessMask: u32,
    pSid: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AdjustTokenGroups(
    TokenHandle: HANDLE,
    ResetToDefault: BOOL,
    NewState: ?*TOKEN_GROUPS,
    BufferLength: u32,
    PreviousState: ?[*]TOKEN_GROUPS,
    ReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AdjustTokenPrivileges(
    TokenHandle: HANDLE,
    DisableAllPrivileges: BOOL,
    NewState: ?*TOKEN_PRIVILEGES,
    BufferLength: u32,
    PreviousState: ?[*]TOKEN_PRIVILEGES,
    ReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AllocateAndInitializeSid(
    pIdentifierAuthority: *SID_IDENTIFIER_AUTHORITY,
    nSubAuthorityCount: u8,
    nSubAuthority0: u32,
    nSubAuthority1: u32,
    nSubAuthority2: u32,
    nSubAuthority3: u32,
    nSubAuthority4: u32,
    nSubAuthority5: u32,
    nSubAuthority6: u32,
    nSubAuthority7: u32,
    pSid: **c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AllocateLocallyUniqueId(
    Luid: *LUID,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AreAllAccessesGranted(
    GrantedAccess: u32,
    DesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AreAnyAccessesGranted(
    GrantedAccess: u32,
    DesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CheckTokenMembership(
    TokenHandle: HANDLE,
    SidToCheck: *c_void,
    IsMember: *BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn CheckTokenCapability(
    TokenHandle: HANDLE,
    CapabilitySidToCheck: *c_void,
    HasCapability: *BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetAppContainerAce(
    Acl: *ACL,
    StartingAceIndex: u32,
    AppContainerAce: **c_void,
    AppContainerAceIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn CheckTokenMembershipEx(
    TokenHandle: HANDLE,
    SidToCheck: *c_void,
    Flags: u32,
    IsMember: *BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ConvertToAutoInheritPrivateObjectSecurity(
    ParentDescriptor: ?*c_void,
    CurrentSecurityDescriptor: *c_void,
    NewSecurityDescriptor: **c_void,
    ObjectType: ?*Guid,
    IsDirectoryObject: u8,
    GenericMapping: *GENERIC_MAPPING,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CopySid(
    nDestinationSidLength: u32,
    pDestinationSid: [*]u8,
    pSourceSid: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CreatePrivateObjectSecurity(
    ParentDescriptor: ?*c_void,
    CreatorDescriptor: ?*c_void,
    NewDescriptor: **c_void,
    IsDirectoryObject: BOOL,
    Token: HANDLE,
    GenericMapping: *GENERIC_MAPPING,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CreatePrivateObjectSecurityEx(
    ParentDescriptor: ?*c_void,
    CreatorDescriptor: ?*c_void,
    NewDescriptor: **c_void,
    ObjectType: ?*Guid,
    IsContainerObject: BOOL,
    AutoInheritFlags: u32,
    Token: HANDLE,
    GenericMapping: *GENERIC_MAPPING,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CreatePrivateObjectSecurityWithMultipleInheritance(
    ParentDescriptor: ?*c_void,
    CreatorDescriptor: ?*c_void,
    NewDescriptor: **c_void,
    ObjectTypes: ?[*]?*Guid,
    GuidCount: u32,
    IsContainerObject: BOOL,
    AutoInheritFlags: u32,
    Token: HANDLE,
    GenericMapping: *GENERIC_MAPPING,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CreateRestrictedToken(
    ExistingTokenHandle: HANDLE,
    Flags: u32,
    DisableSidCount: u32,
    SidsToDisable: ?[*]SID_AND_ATTRIBUTES,
    DeletePrivilegeCount: u32,
    PrivilegesToDelete: ?[*]LUID_AND_ATTRIBUTES,
    RestrictedSidCount: u32,
    SidsToRestrict: ?[*]SID_AND_ATTRIBUTES,
    NewTokenHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CreateWellKnownSid(
    WellKnownSidType: WELL_KNOWN_SID_TYPE,
    DomainSid: ?*c_void,
    pSid: ?[*]u8,
    cbSid: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn EqualDomainSid(
    pSid1: *c_void,
    pSid2: *c_void,
    pfEqual: *BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn DeleteAce(
    pAcl: *ACL,
    dwAceIndex: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn DestroyPrivateObjectSecurity(
    ObjectDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn DuplicateToken(
    ExistingTokenHandle: HANDLE,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    DuplicateTokenHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn DuplicateTokenEx(
    hExistingToken: HANDLE,
    dwDesiredAccess: u32,
    lpTokenAttributes: ?*SECURITY_ATTRIBUTES,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    TokenType: TOKEN_TYPE,
    phNewToken: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn EqualPrefixSid(
    pSid1: *c_void,
    pSid2: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn EqualSid(
    pSid1: *c_void,
    pSid2: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn FindFirstFreeAce(
    pAcl: *ACL,
    pAce: **c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn FreeSid(
    pSid: *c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "ADVAPI32" fn GetAce(
    pAcl: *ACL,
    dwAceIndex: u32,
    pAce: **c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn GetAclInformation(
    pAcl: *ACL,
    pAclInformation: [*]u8,
    nAclInformationLength: u32,
    dwAclInformationClass: ACL_INFORMATION_CLASS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn GetFileSecurityW(
    lpFileName: [*:0]const u16,
    RequestedInformation: u32,
    pSecurityDescriptor: ?[*]u8,
    nLength: u32,
    lpnLengthNeeded: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn GetKernelObjectSecurity(
    Handle: HANDLE,
    RequestedInformation: u32,
    pSecurityDescriptor: ?[*]u8,
    nLength: u32,
    lpnLengthNeeded: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn GetLengthSid(
    pSid: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn GetPrivateObjectSecurity(
    ObjectDescriptor: *c_void,
    SecurityInformation: u32,
    ResultantDescriptor: ?[*]u8,
    DescriptorLength: u32,
    ReturnLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn GetSecurityDescriptorControl(
    pSecurityDescriptor: *c_void,
    pControl: *u16,
    lpdwRevision: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn GetSecurityDescriptorDacl(
    pSecurityDescriptor: *c_void,
    lpbDaclPresent: *i32,
    pDacl: **ACL,
    lpbDaclDefaulted: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn GetSecurityDescriptorGroup(
    pSecurityDescriptor: *c_void,
    pGroup: **c_void,
    lpbGroupDefaulted: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn GetSecurityDescriptorLength(
    pSecurityDescriptor: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn GetSecurityDescriptorOwner(
    pSecurityDescriptor: *c_void,
    pOwner: **c_void,
    lpbOwnerDefaulted: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn GetSecurityDescriptorRMControl(
    SecurityDescriptor: *c_void,
    RMControl: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn GetSecurityDescriptorSacl(
    pSecurityDescriptor: *c_void,
    lpbSaclPresent: *i32,
    pSacl: **ACL,
    lpbSaclDefaulted: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn GetSidIdentifierAuthority(
    pSid: *c_void,
) callconv(@import("std").os.windows.WINAPI) *SID_IDENTIFIER_AUTHORITY;

pub extern "ADVAPI32" fn GetSidLengthRequired(
    nSubAuthorityCount: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn GetSidSubAuthority(
    pSid: *c_void,
    nSubAuthority: u32,
) callconv(@import("std").os.windows.WINAPI) *u32;

pub extern "ADVAPI32" fn GetSidSubAuthorityCount(
    pSid: *c_void,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "ADVAPI32" fn GetTokenInformation(
    TokenHandle: HANDLE,
    TokenInformationClass: TOKEN_INFORMATION_CLASS,
    TokenInformation: ?[*]u8,
    TokenInformationLength: u32,
    ReturnLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn GetWindowsAccountDomainSid(
    pSid: *c_void,
    pDomainSid: ?[*]u8,
    cbDomainSid: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ImpersonateAnonymousToken(
    ThreadHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ImpersonateLoggedOnUser(
    hToken: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ImpersonateSelf(
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn InitializeAcl(
    pAcl: [*]ACL,
    nAclLength: u32,
    dwAclRevision: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn InitializeSecurityDescriptor(
    pSecurityDescriptor: *c_void,
    dwRevision: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn InitializeSid(
    Sid: *c_void,
    pIdentifierAuthority: *SID_IDENTIFIER_AUTHORITY,
    nSubAuthorityCount: u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn IsTokenRestricted(
    TokenHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn IsValidAcl(
    pAcl: *ACL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn IsValidSecurityDescriptor(
    pSecurityDescriptor: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn IsValidSid(
    pSid: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn IsWellKnownSid(
    pSid: *c_void,
    WellKnownSidType: WELL_KNOWN_SID_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn MakeAbsoluteSD(
    pSelfRelativeSecurityDescriptor: *c_void,
    pAbsoluteSecurityDescriptor: ?[*]u8,
    lpdwAbsoluteSecurityDescriptorSize: *u32,
    pDacl: ?[*]ACL,
    lpdwDaclSize: *u32,
    pSacl: ?[*]ACL,
    lpdwSaclSize: *u32,
    pOwner: ?[*]u8,
    lpdwOwnerSize: *u32,
    pPrimaryGroup: ?[*]u8,
    lpdwPrimaryGroupSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn MakeSelfRelativeSD(
    pAbsoluteSecurityDescriptor: *c_void,
    pSelfRelativeSecurityDescriptor: ?[*]u8,
    lpdwBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn MapGenericMask(
    AccessMask: *u32,
    GenericMapping: *GENERIC_MAPPING,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ADVAPI32" fn ObjectCloseAuditAlarmW(
    SubsystemName: [*:0]const u16,
    HandleId: *c_void,
    GenerateOnClose: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ObjectDeleteAuditAlarmW(
    SubsystemName: [*:0]const u16,
    HandleId: *c_void,
    GenerateOnClose: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ObjectOpenAuditAlarmW(
    SubsystemName: [*:0]const u16,
    HandleId: *c_void,
    ObjectTypeName: PWSTR,
    ObjectName: ?PWSTR,
    pSecurityDescriptor: *c_void,
    ClientToken: HANDLE,
    DesiredAccess: u32,
    GrantedAccess: u32,
    Privileges: ?*PRIVILEGE_SET,
    ObjectCreation: BOOL,
    AccessGranted: BOOL,
    GenerateOnClose: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ObjectPrivilegeAuditAlarmW(
    SubsystemName: [*:0]const u16,
    HandleId: *c_void,
    ClientToken: HANDLE,
    DesiredAccess: u32,
    Privileges: *PRIVILEGE_SET,
    AccessGranted: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn PrivilegeCheck(
    ClientToken: HANDLE,
    RequiredPrivileges: *PRIVILEGE_SET,
    pfResult: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn PrivilegedServiceAuditAlarmW(
    SubsystemName: [*:0]const u16,
    ServiceName: [*:0]const u16,
    ClientToken: HANDLE,
    Privileges: *PRIVILEGE_SET,
    AccessGranted: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn QuerySecurityAccessMask(
    SecurityInformation: u32,
    DesiredAccess: *u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ADVAPI32" fn RevertToSelf(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SetAclInformation(
    pAcl: *ACL,
    pAclInformation: [*]u8,
    nAclInformationLength: u32,
    dwAclInformationClass: ACL_INFORMATION_CLASS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SetFileSecurityW(
    lpFileName: [*:0]const u16,
    SecurityInformation: u32,
    pSecurityDescriptor: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SetKernelObjectSecurity(
    Handle: HANDLE,
    SecurityInformation: u32,
    SecurityDescriptor: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SetPrivateObjectSecurity(
    SecurityInformation: u32,
    ModificationDescriptor: *c_void,
    ObjectsSecurityDescriptor: **c_void,
    GenericMapping: *GENERIC_MAPPING,
    Token: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SetPrivateObjectSecurityEx(
    SecurityInformation: u32,
    ModificationDescriptor: *c_void,
    ObjectsSecurityDescriptor: **c_void,
    AutoInheritFlags: u32,
    GenericMapping: *GENERIC_MAPPING,
    Token: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SetSecurityAccessMask(
    SecurityInformation: u32,
    DesiredAccess: *u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ADVAPI32" fn SetSecurityDescriptorControl(
    pSecurityDescriptor: *c_void,
    ControlBitsOfInterest: u16,
    ControlBitsToSet: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SetSecurityDescriptorDacl(
    pSecurityDescriptor: *c_void,
    bDaclPresent: BOOL,
    pDacl: ?*ACL,
    bDaclDefaulted: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SetSecurityDescriptorGroup(
    pSecurityDescriptor: *c_void,
    pGroup: ?*c_void,
    bGroupDefaulted: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SetSecurityDescriptorOwner(
    pSecurityDescriptor: *c_void,
    pOwner: ?*c_void,
    bOwnerDefaulted: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SetSecurityDescriptorRMControl(
    SecurityDescriptor: *c_void,
    RMControl: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn SetSecurityDescriptorSacl(
    pSecurityDescriptor: *c_void,
    bSaclPresent: BOOL,
    pSacl: ?*ACL,
    bSaclDefaulted: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SetTokenInformation(
    TokenHandle: HANDLE,
    TokenInformationClass: TOKEN_INFORMATION_CLASS,
    TokenInformation: [*]u8,
    TokenInformationLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn SetCachedSigningLevel(
    SourceFiles: [*]HANDLE,
    SourceFileCount: u32,
    Flags: u32,
    TargetFile: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetCachedSigningLevel(
    File: HANDLE,
    Flags: *u32,
    SigningLevel: *u32,
    Thumbprint: ?[*:0]u8,
    ThumbprintSize: ?*u32,
    ThumbprintAlgorithm: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "api-ms-win-security-base-l1-2-2" fn DeriveCapabilitySidsFromName(
    CapName: [*:0]const u16,
    CapabilityGroupSids: ?*?*?*c_void,
    CapabilityGroupSidCount: *u32,
    CapabilitySids: ?*?*?*c_void,
    CapabilitySidCount: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetAppContainerNamedObjectPath(
    Token: HANDLE,
    AppContainerSid: ?*c_void,
    ObjectPathLength: u32,
    ObjectPath: ?[*:0]u16,
    ReturnLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptAcquireContextA(
    phProv: *?*c_void,
    szContainer: ?[*:0]const u8,
    szProvider: ?[*:0]const u8,
    dwProvType: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptAcquireContextW(
    phProv: *?*c_void,
    szContainer: ?[*:0]const u16,
    szProvider: ?[*:0]const u16,
    dwProvType: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptReleaseContext(
    hProv: ?*c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptGenKey(
    hProv: ?*c_void,
    Algid: u32,
    dwFlags: u32,
    phKey: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptDeriveKey(
    hProv: ?*c_void,
    Algid: u32,
    hBaseData: ?*c_void,
    dwFlags: u32,
    phKey: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptDestroyKey(
    hKey: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptSetKeyParam(
    hKey: ?*c_void,
    dwParam: u32,
    pbData: *const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptGetKeyParam(
    hKey: ?*c_void,
    dwParam: u32,
    pbData: ?[*:0]u8,
    pdwDataLen: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptSetHashParam(
    hHash: ?*c_void,
    dwParam: u32,
    pbData: *const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptGetHashParam(
    hHash: ?*c_void,
    dwParam: u32,
    pbData: ?[*:0]u8,
    pdwDataLen: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptSetProvParam(
    hProv: ?*c_void,
    dwParam: u32,
    pbData: *const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptGetProvParam(
    hProv: ?*c_void,
    dwParam: u32,
    pbData: ?[*:0]u8,
    pdwDataLen: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptGenRandom(
    hProv: ?*c_void,
    dwLen: u32,
    pbBuffer: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptGetUserKey(
    hProv: ?*c_void,
    dwKeySpec: u32,
    phUserKey: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptExportKey(
    hKey: ?*c_void,
    hExpKey: ?*c_void,
    dwBlobType: u32,
    dwFlags: u32,
    pbData: ?[*:0]u8,
    pdwDataLen: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptImportKey(
    hProv: ?*c_void,
    pbData: [*:0]const u8,
    dwDataLen: u32,
    hPubKey: ?*c_void,
    dwFlags: u32,
    phKey: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptEncrypt(
    hKey: ?*c_void,
    hHash: ?*c_void,
    Final: BOOL,
    dwFlags: u32,
    pbData: ?[*:0]u8,
    pdwDataLen: *u32,
    dwBufLen: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptDecrypt(
    hKey: ?*c_void,
    hHash: ?*c_void,
    Final: BOOL,
    dwFlags: u32,
    pbData: [*:0]u8,
    pdwDataLen: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptCreateHash(
    hProv: ?*c_void,
    Algid: u32,
    hKey: ?*c_void,
    dwFlags: u32,
    phHash: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptHashData(
    hHash: ?*c_void,
    pbData: [*:0]const u8,
    dwDataLen: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptHashSessionKey(
    hHash: ?*c_void,
    hKey: ?*c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptDestroyHash(
    hHash: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptSignHashA(
    hHash: ?*c_void,
    dwKeySpec: u32,
    szDescription: ?[*:0]const u8,
    dwFlags: u32,
    pbSignature: ?[*:0]u8,
    pdwSigLen: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptSignHashW(
    hHash: ?*c_void,
    dwKeySpec: u32,
    szDescription: ?[*:0]const u16,
    dwFlags: u32,
    pbSignature: ?[*:0]u8,
    pdwSigLen: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptVerifySignatureA(
    hHash: ?*c_void,
    pbSignature: [*:0]const u8,
    dwSigLen: u32,
    hPubKey: ?*c_void,
    szDescription: ?[*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptVerifySignatureW(
    hHash: ?*c_void,
    pbSignature: [*:0]const u8,
    dwSigLen: u32,
    hPubKey: ?*c_void,
    szDescription: ?[*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptSetProviderA(
    pszProvName: [*:0]const u8,
    dwProvType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptSetProviderW(
    pszProvName: [*:0]const u16,
    dwProvType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptSetProviderExA(
    pszProvName: [*:0]const u8,
    dwProvType: u32,
    pdwReserved: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptSetProviderExW(
    pszProvName: [*:0]const u16,
    dwProvType: u32,
    pdwReserved: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptGetDefaultProviderA(
    dwProvType: u32,
    pdwReserved: *u32,
    dwFlags: u32,
    pszProvName: ?[*:0]u8,
    pcbProvName: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptGetDefaultProviderW(
    dwProvType: u32,
    pdwReserved: *u32,
    dwFlags: u32,
    pszProvName: ?[*:0]u16,
    pcbProvName: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptEnumProviderTypesA(
    dwIndex: u32,
    pdwReserved: *u32,
    dwFlags: u32,
    pdwProvType: *u32,
    szTypeName: ?[*:0]u8,
    pcbTypeName: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptEnumProviderTypesW(
    dwIndex: u32,
    pdwReserved: *u32,
    dwFlags: u32,
    pdwProvType: *u32,
    szTypeName: ?[*:0]u16,
    pcbTypeName: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptEnumProvidersA(
    dwIndex: u32,
    pdwReserved: *u32,
    dwFlags: u32,
    pdwProvType: *u32,
    szProvName: ?[*:0]u8,
    pcbProvName: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptEnumProvidersW(
    dwIndex: u32,
    pdwReserved: *u32,
    dwFlags: u32,
    pdwProvType: *u32,
    szProvName: ?[*:0]u16,
    pcbProvName: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptContextAddRef(
    hProv: ?*c_void,
    pdwReserved: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptDuplicateKey(
    hKey: ?*c_void,
    pdwReserved: *u32,
    dwFlags: u32,
    phKey: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CryptDuplicateHash(
    hHash: ?*c_void,
    pdwReserved: *u32,
    dwFlags: u32,
    phHash: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "bcrypt" fn BCryptOpenAlgorithmProvider(
    phAlgorithm: **c_void,
    pszAlgId: [*:0]const u16,
    pszImplementation: ?[*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptEnumAlgorithms(
    dwAlgOperations: u32,
    pAlgCount: *u32,
    ppAlgList: **BCRYPT_ALGORITHM_IDENTIFIER,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptEnumProviders(
    pszAlgId: [*:0]const u16,
    pImplCount: *u32,
    ppImplList: **BCRYPT_PROVIDER_NAME,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptGetProperty(
    hObject: *c_void,
    pszProperty: [*:0]const u16,
    pbOutput: ?[*:0]u8,
    cbOutput: u32,
    pcbResult: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptSetProperty(
    hObject: *c_void,
    pszProperty: [*:0]const u16,
    pbInput: [*:0]u8,
    cbInput: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptCloseAlgorithmProvider(
    hAlgorithm: *c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptFreeBuffer(
    pvBuffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "bcrypt" fn BCryptGenerateSymmetricKey(
    hAlgorithm: *c_void,
    phKey: **c_void,
    pbKeyObject: ?*u8,
    cbKeyObject: u32,
    pbSecret: [*:0]u8,
    cbSecret: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptGenerateKeyPair(
    hAlgorithm: *c_void,
    phKey: **c_void,
    dwLength: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptEncrypt(
    hKey: *c_void,
    pbInput: ?[*:0]u8,
    cbInput: u32,
    pPaddingInfo: ?*c_void,
    pbIV: ?[*:0]u8,
    cbIV: u32,
    pbOutput: ?[*:0]u8,
    cbOutput: u32,
    pcbResult: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptDecrypt(
    hKey: *c_void,
    pbInput: ?[*:0]u8,
    cbInput: u32,
    pPaddingInfo: ?*c_void,
    pbIV: ?[*:0]u8,
    cbIV: u32,
    pbOutput: ?[*:0]u8,
    cbOutput: u32,
    pcbResult: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptExportKey(
    hKey: *c_void,
    hExportKey: ?*c_void,
    pszBlobType: [*:0]const u16,
    pbOutput: ?[*:0]u8,
    cbOutput: u32,
    pcbResult: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptImportKey(
    hAlgorithm: *c_void,
    hImportKey: ?*c_void,
    pszBlobType: [*:0]const u16,
    phKey: **c_void,
    pbKeyObject: ?*u8,
    cbKeyObject: u32,
    pbInput: [*:0]u8,
    cbInput: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptImportKeyPair(
    hAlgorithm: *c_void,
    hImportKey: ?*c_void,
    pszBlobType: [*:0]const u16,
    phKey: **c_void,
    pbInput: [*:0]u8,
    cbInput: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptDuplicateKey(
    hKey: *c_void,
    phNewKey: **c_void,
    pbKeyObject: ?*u8,
    cbKeyObject: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptFinalizeKeyPair(
    hKey: *c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptDestroyKey(
    hKey: *c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptDestroySecret(
    hSecret: *c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptSignHash(
    hKey: *c_void,
    pPaddingInfo: ?*c_void,
    pbInput: [*:0]u8,
    cbInput: u32,
    pbOutput: ?[*:0]u8,
    cbOutput: u32,
    pcbResult: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptVerifySignature(
    hKey: *c_void,
    pPaddingInfo: ?*c_void,
    pbHash: [*:0]u8,
    cbHash: u32,
    pbSignature: [*:0]u8,
    cbSignature: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptSecretAgreement(
    hPrivKey: *c_void,
    hPubKey: *c_void,
    phAgreedSecret: **c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptDeriveKey(
    hSharedSecret: *c_void,
    pwszKDF: [*:0]const u16,
    pParameterList: ?*BCryptBufferDesc,
    pbDerivedKey: ?[*:0]u8,
    cbDerivedKey: u32,
    pcbResult: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptKeyDerivation(
    hKey: *c_void,
    pParameterList: ?*BCryptBufferDesc,
    pbDerivedKey: [*:0]u8,
    cbDerivedKey: u32,
    pcbResult: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptCreateHash(
    hAlgorithm: *c_void,
    phHash: **c_void,
    pbHashObject: ?*u8,
    cbHashObject: u32,
    pbSecret: ?[*:0]u8,
    cbSecret: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptHashData(
    hHash: *c_void,
    pbInput: [*:0]u8,
    cbInput: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptFinishHash(
    hHash: *c_void,
    pbOutput: *u8,
    cbOutput: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptCreateMultiHash(
    hAlgorithm: *c_void,
    phHash: **c_void,
    nHashes: u32,
    pbHashObject: ?*u8,
    cbHashObject: u32,
    pbSecret: ?[*:0]u8,
    cbSecret: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptProcessMultiOperations(
    hObject: *c_void,
    operationType: BCRYPT_MULTI_OPERATION_TYPE,
    pOperations: [*]u8,
    cbOperations: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptDuplicateHash(
    hHash: *c_void,
    phNewHash: **c_void,
    pbHashObject: ?*u8,
    cbHashObject: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptDestroyHash(
    hHash: *c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptHash(
    hAlgorithm: *c_void,
    pbSecret: ?[*:0]u8,
    cbSecret: u32,
    pbInput: [*:0]u8,
    cbInput: u32,
    pbOutput: *u8,
    cbOutput: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptGenRandom(
    hAlgorithm: ?*c_void,
    pbBuffer: [*:0]u8,
    cbBuffer: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptDeriveKeyCapi(
    hHash: *c_void,
    hTargetAlg: ?*c_void,
    pbDerivedKey: [*:0]u8,
    cbDerivedKey: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptDeriveKeyPBKDF2(
    hPrf: *c_void,
    pbPassword: ?[*:0]u8,
    cbPassword: u32,
    pbSalt: ?[*:0]u8,
    cbSalt: u32,
    cIterations: u64,
    pbDerivedKey: [*:0]u8,
    cbDerivedKey: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptQueryProviderRegistration(
    pszProvider: [*:0]const u16,
    dwMode: u32,
    dwInterface: u32,
    pcbBuffer: *u32,
    ppBuffer: [*]*CRYPT_PROVIDER_REG,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptEnumRegisteredProviders(
    pcbBuffer: *u32,
    ppBuffer: [*]*CRYPT_PROVIDERS,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptCreateContext(
    dwTable: u32,
    pszContext: [*:0]const u16,
    pConfig: ?*CRYPT_CONTEXT_CONFIG,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptDeleteContext(
    dwTable: u32,
    pszContext: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptEnumContexts(
    dwTable: u32,
    pcbBuffer: *u32,
    ppBuffer: [*]*CRYPT_CONTEXTS,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptConfigureContext(
    dwTable: u32,
    pszContext: [*:0]const u16,
    pConfig: *CRYPT_CONTEXT_CONFIG,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptQueryContextConfiguration(
    dwTable: u32,
    pszContext: [*:0]const u16,
    pcbBuffer: *u32,
    ppBuffer: [*]*CRYPT_CONTEXT_CONFIG,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptAddContextFunction(
    dwTable: u32,
    pszContext: [*:0]const u16,
    dwInterface: u32,
    pszFunction: [*:0]const u16,
    dwPosition: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptRemoveContextFunction(
    dwTable: u32,
    pszContext: [*:0]const u16,
    dwInterface: u32,
    pszFunction: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptEnumContextFunctions(
    dwTable: u32,
    pszContext: [*:0]const u16,
    dwInterface: u32,
    pcbBuffer: *u32,
    ppBuffer: [*]*CRYPT_CONTEXT_FUNCTIONS,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptConfigureContextFunction(
    dwTable: u32,
    pszContext: [*:0]const u16,
    dwInterface: u32,
    pszFunction: [*:0]const u16,
    pConfig: *CRYPT_CONTEXT_FUNCTION_CONFIG,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptQueryContextFunctionConfiguration(
    dwTable: u32,
    pszContext: [*:0]const u16,
    dwInterface: u32,
    pszFunction: [*:0]const u16,
    pcbBuffer: *u32,
    ppBuffer: [*]*CRYPT_CONTEXT_FUNCTION_CONFIG,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptEnumContextFunctionProviders(
    dwTable: u32,
    pszContext: [*:0]const u16,
    dwInterface: u32,
    pszFunction: [*:0]const u16,
    pcbBuffer: *u32,
    ppBuffer: [*]*CRYPT_CONTEXT_FUNCTION_PROVIDERS,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptSetContextFunctionProperty(
    dwTable: u32,
    pszContext: [*:0]const u16,
    dwInterface: u32,
    pszFunction: [*:0]const u16,
    pszProperty: [*:0]const u16,
    cbValue: u32,
    pbValue: ?[*:0]u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptQueryContextFunctionProperty(
    dwTable: u32,
    pszContext: [*:0]const u16,
    dwInterface: u32,
    pszFunction: [*:0]const u16,
    pszProperty: [*:0]const u16,
    pcbValue: *u32,
    ppbValue: [*]*u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptRegisterConfigChangeNotify(
    phEvent: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptUnregisterConfigChangeNotify(
    hEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptResolveProviders(
    pszContext: ?[*:0]const u16,
    dwInterface: u32,
    pszFunction: ?[*:0]const u16,
    pszProvider: ?[*:0]const u16,
    dwMode: u32,
    dwFlags: u32,
    pcbBuffer: *u32,
    ppBuffer: [*]*CRYPT_PROVIDER_REFS,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "bcrypt" fn BCryptGetFipsAlgorithmMode(
    pfEnabled: *u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ncrypt" fn NCryptOpenStorageProvider(
    phProvider: *?*c_void,
    pszProviderName: ?[*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptEnumAlgorithms(
    hProvider: ?*c_void,
    dwAlgOperations: u32,
    pdwAlgCount: *u32,
    ppAlgList: **NCryptAlgorithmName,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptIsAlgSupported(
    hProvider: ?*c_void,
    pszAlgId: [*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptEnumKeys(
    hProvider: ?*c_void,
    pszScope: ?[*:0]const u16,
    ppKeyName: **NCryptKeyName,
    ppEnumState: **c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptEnumStorageProviders(
    pdwProviderCount: *u32,
    ppProviderList: **NCryptProviderName,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptFreeBuffer(
    pvInput: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptOpenKey(
    hProvider: ?*c_void,
    phKey: *?*c_void,
    pszKeyName: [*:0]const u16,
    dwLegacyKeySpec: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptCreatePersistedKey(
    hProvider: ?*c_void,
    phKey: *?*c_void,
    pszAlgId: [*:0]const u16,
    pszKeyName: ?[*:0]const u16,
    dwLegacyKeySpec: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptGetProperty(
    hObject: ?*c_void,
    pszProperty: [*:0]const u16,
    pbOutput: ?[*:0]u8,
    cbOutput: u32,
    pcbResult: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptSetProperty(
    hObject: ?*c_void,
    pszProperty: [*:0]const u16,
    pbInput: [*:0]u8,
    cbInput: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptFinalizeKey(
    hKey: ?*c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptEncrypt(
    hKey: ?*c_void,
    pbInput: ?[*:0]u8,
    cbInput: u32,
    pPaddingInfo: ?*c_void,
    pbOutput: ?[*:0]u8,
    cbOutput: u32,
    pcbResult: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptDecrypt(
    hKey: ?*c_void,
    pbInput: ?[*:0]u8,
    cbInput: u32,
    pPaddingInfo: ?*c_void,
    pbOutput: ?[*:0]u8,
    cbOutput: u32,
    pcbResult: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptImportKey(
    hProvider: ?*c_void,
    hImportKey: ?*c_void,
    pszBlobType: [*:0]const u16,
    pParameterList: ?*BCryptBufferDesc,
    phKey: *?*c_void,
    pbData: [*:0]u8,
    cbData: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptExportKey(
    hKey: ?*c_void,
    hExportKey: ?*c_void,
    pszBlobType: [*:0]const u16,
    pParameterList: ?*BCryptBufferDesc,
    pbOutput: ?[*:0]u8,
    cbOutput: u32,
    pcbResult: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptSignHash(
    hKey: ?*c_void,
    pPaddingInfo: ?*c_void,
    pbHashValue: [*:0]u8,
    cbHashValue: u32,
    pbSignature: ?[*:0]u8,
    cbSignature: u32,
    pcbResult: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptVerifySignature(
    hKey: ?*c_void,
    pPaddingInfo: ?*c_void,
    pbHashValue: [*:0]u8,
    cbHashValue: u32,
    pbSignature: [*:0]u8,
    cbSignature: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptDeleteKey(
    hKey: ?*c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptFreeObject(
    hObject: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptIsKeyHandle(
    hKey: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ncrypt" fn NCryptTranslateHandle(
    phProvider: ?*?*c_void,
    phKey: *?*c_void,
    hLegacyProv: ?*c_void,
    hLegacyKey: ?*c_void,
    dwLegacyKeySpec: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptNotifyChangeKey(
    hProvider: ?*c_void,
    phEvent: *HANDLE,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptSecretAgreement(
    hPrivKey: ?*c_void,
    hPubKey: ?*c_void,
    phAgreedSecret: *?*c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptDeriveKey(
    hSharedSecret: ?*c_void,
    pwszKDF: [*:0]const u16,
    pParameterList: ?*BCryptBufferDesc,
    pbDerivedKey: ?[*:0]u8,
    cbDerivedKey: u32,
    pcbResult: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptKeyDerivation(
    hKey: ?*c_void,
    pParameterList: ?*BCryptBufferDesc,
    pbDerivedKey: [*:0]u8,
    cbDerivedKey: u32,
    pcbResult: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptCreateClaim(
    hSubjectKey: ?*c_void,
    hAuthorityKey: ?*c_void,
    dwClaimType: u32,
    pParameterList: ?*BCryptBufferDesc,
    pbClaimBlob: ?[*:0]u8,
    cbClaimBlob: u32,
    pcbResult: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptVerifyClaim(
    hSubjectKey: ?*c_void,
    hAuthorityKey: ?*c_void,
    dwClaimType: u32,
    pParameterList: ?*BCryptBufferDesc,
    pbClaimBlob: [*:0]u8,
    cbClaimBlob: u32,
    pOutput: *BCryptBufferDesc,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CRYPT32" fn CryptFormatObject(
    dwCertEncodingType: u32,
    dwFormatType: u32,
    dwFormatStrType: u32,
    pFormatStruct: ?*c_void,
    lpszStructType: ?[*:0]const u8,
    pbEncoded: [*:0]const u8,
    cbEncoded: u32,
    pbFormat: ?[*]u8,
    pcbFormat: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptEncodeObjectEx(
    dwCertEncodingType: u32,
    lpszStructType: [*:0]const u8,
    pvStructInfo: *const c_void,
    dwFlags: u32,
    pEncodePara: ?*CRYPT_ENCODE_PARA,
    pvEncoded: ?*c_void,
    pcbEncoded: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptEncodeObject(
    dwCertEncodingType: u32,
    lpszStructType: [*:0]const u8,
    pvStructInfo: *const c_void,
    pbEncoded: ?[*:0]u8,
    pcbEncoded: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptDecodeObjectEx(
    dwCertEncodingType: u32,
    lpszStructType: [*:0]const u8,
    pbEncoded: [*:0]const u8,
    cbEncoded: u32,
    dwFlags: u32,
    pDecodePara: ?*CRYPT_DECODE_PARA,
    pvStructInfo: ?*c_void,
    pcbStructInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptDecodeObject(
    dwCertEncodingType: u32,
    lpszStructType: [*:0]const u8,
    pbEncoded: [*:0]const u8,
    cbEncoded: u32,
    dwFlags: u32,
    pvStructInfo: ?[*]u8,
    pcbStructInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptInstallOIDFunctionAddress(
    hModule: ?*c_void,
    dwEncodingType: u32,
    pszFuncName: [*:0]const u8,
    cFuncEntry: u32,
    rgFuncEntry: [*]const CRYPT_OID_FUNC_ENTRY,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptInitOIDFunctionSet(
    pszFuncName: [*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "CRYPT32" fn CryptGetOIDFunctionAddress(
    hFuncSet: *c_void,
    dwEncodingType: u32,
    pszOID: [*:0]const u8,
    dwFlags: u32,
    ppvFuncAddr: **c_void,
    phFuncAddr: **c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptGetDefaultOIDDllList(
    hFuncSet: *c_void,
    dwEncodingType: u32,
    pwszDllList: ?[*:0]u16,
    pcchDllList: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptGetDefaultOIDFunctionAddress(
    hFuncSet: *c_void,
    dwEncodingType: u32,
    pwszDll: ?[*:0]const u16,
    dwFlags: u32,
    ppvFuncAddr: **c_void,
    phFuncAddr: **c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptFreeOIDFunctionAddress(
    hFuncAddr: *c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptRegisterOIDFunction(
    dwEncodingType: u32,
    pszFuncName: [*:0]const u8,
    pszOID: [*:0]const u8,
    pwszDll: ?[*:0]const u16,
    pszOverrideFuncName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptUnregisterOIDFunction(
    dwEncodingType: u32,
    pszFuncName: [*:0]const u8,
    pszOID: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptRegisterDefaultOIDFunction(
    dwEncodingType: u32,
    pszFuncName: [*:0]const u8,
    dwIndex: u32,
    pwszDll: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptUnregisterDefaultOIDFunction(
    dwEncodingType: u32,
    pszFuncName: [*:0]const u8,
    pwszDll: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSetOIDFunctionValue(
    dwEncodingType: u32,
    pszFuncName: [*:0]const u8,
    pszOID: [*:0]const u8,
    pwszValueName: ?[*:0]const u16,
    dwValueType: u32,
    pbValueData: ?[*:0]const u8,
    cbValueData: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptGetOIDFunctionValue(
    dwEncodingType: u32,
    pszFuncName: [*:0]const u8,
    pszOID: [*:0]const u8,
    pwszValueName: ?[*:0]const u16,
    pdwValueType: ?*u32,
    pbValueData: ?[*:0]u8,
    pcbValueData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptEnumOIDFunction(
    dwEncodingType: u32,
    pszFuncName: ?[*:0]const u8,
    pszOID: ?[*:0]const u8,
    dwFlags: u32,
    pvArg: ?*c_void,
    pfnEnumOIDFunc: PFN_CRYPT_ENUM_OID_FUNC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptFindOIDInfo(
    dwKeyType: u32,
    pvKey: *c_void,
    dwGroupId: u32,
) callconv(@import("std").os.windows.WINAPI) *CRYPT_OID_INFO;

pub extern "CRYPT32" fn CryptRegisterOIDInfo(
    pInfo: *CRYPT_OID_INFO,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptUnregisterOIDInfo(
    pInfo: *CRYPT_OID_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptEnumOIDInfo(
    dwGroupId: u32,
    dwFlags: u32,
    pvArg: ?*c_void,
    pfnEnumOIDInfo: PFN_CRYPT_ENUM_OID_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptFindLocalizedName(
    pwszCryptName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "CRYPT32" fn CryptMsgOpenToEncode(
    dwMsgEncodingType: u32,
    dwFlags: u32,
    dwMsgType: u32,
    pvMsgEncodeInfo: *const c_void,
    pszInnerContentObjID: ?PSTR,
    pStreamInfo: ?*CMSG_STREAM_INFO,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "CRYPT32" fn CryptMsgCalculateEncodedLength(
    dwMsgEncodingType: u32,
    dwFlags: u32,
    dwMsgType: u32,
    pvMsgEncodeInfo: *const c_void,
    pszInnerContentObjID: ?PSTR,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CRYPT32" fn CryptMsgOpenToDecode(
    dwMsgEncodingType: u32,
    dwFlags: u32,
    dwMsgType: u32,
    hCryptProv: ?*c_void,
    pRecipientInfo: *CERT_INFO,
    pStreamInfo: ?*CMSG_STREAM_INFO,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "CRYPT32" fn CryptMsgDuplicate(
    hCryptMsg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "CRYPT32" fn CryptMsgClose(
    hCryptMsg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptMsgUpdate(
    hCryptMsg: *c_void,
    pbData: ?[*:0]const u8,
    cbData: u32,
    fFinal: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptMsgGetParam(
    hCryptMsg: *c_void,
    dwParamType: u32,
    dwIndex: u32,
    pvData: ?[*]u8,
    pcbData: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptMsgControl(
    hCryptMsg: *c_void,
    dwFlags: u32,
    dwCtrlType: u32,
    pvCtrlPara: ?*const c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptMsgVerifyCountersignatureEncoded(
    hCryptProv: ?*c_void,
    dwEncodingType: u32,
    pbSignerInfo: [*:0]u8,
    cbSignerInfo: u32,
    pbSignerInfoCountersignature: [*:0]u8,
    cbSignerInfoCountersignature: u32,
    pciCountersigner: *CERT_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptMsgVerifyCountersignatureEncodedEx(
    hCryptProv: ?*c_void,
    dwEncodingType: u32,
    pbSignerInfo: [*:0]u8,
    cbSignerInfo: u32,
    pbSignerInfoCountersignature: [*:0]u8,
    cbSignerInfoCountersignature: u32,
    dwSignerType: u32,
    pvSigner: *c_void,
    dwFlags: u32,
    pvExtra: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptMsgCountersign(
    hCryptMsg: *c_void,
    dwIndex: u32,
    cCountersigners: u32,
    rgCountersigners: [*]CMSG_SIGNER_ENCODE_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptMsgCountersignEncoded(
    dwEncodingType: u32,
    pbSignerInfo: [*:0]u8,
    cbSignerInfo: u32,
    cCountersigners: u32,
    rgCountersigners: [*]CMSG_SIGNER_ENCODE_INFO,
    pbCountersignature: ?[*:0]u8,
    pcbCountersignature: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertOpenStore(
    lpszStoreProvider: [*:0]const u8,
    dwEncodingType: u32,
    hCryptProv: ?*c_void,
    dwFlags: u32,
    pvPara: ?*const c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "CRYPT32" fn CertDuplicateStore(
    hCertStore: *c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "CRYPT32" fn CertSaveStore(
    hCertStore: *c_void,
    dwEncodingType: u32,
    dwSaveAs: u32,
    dwSaveTo: u32,
    pvSaveToPara: *c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertCloseStore(
    hCertStore: ?*c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertGetSubjectCertificateFromStore(
    hCertStore: *c_void,
    dwCertEncodingType: u32,
    pCertId: *CERT_INFO,
) callconv(@import("std").os.windows.WINAPI) *CERT_CONTEXT;

pub extern "CRYPT32" fn CertEnumCertificatesInStore(
    hCertStore: *c_void,
    pPrevCertContext: ?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) *CERT_CONTEXT;

pub extern "CRYPT32" fn CertFindCertificateInStore(
    hCertStore: *c_void,
    dwCertEncodingType: u32,
    dwFindFlags: u32,
    dwFindType: u32,
    pvFindPara: ?*const c_void,
    pPrevCertContext: ?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) *CERT_CONTEXT;

pub extern "CRYPT32" fn CertGetIssuerCertificateFromStore(
    hCertStore: *c_void,
    pSubjectContext: *CERT_CONTEXT,
    pPrevIssuerContext: ?*CERT_CONTEXT,
    pdwFlags: *u32,
) callconv(@import("std").os.windows.WINAPI) *CERT_CONTEXT;

pub extern "CRYPT32" fn CertVerifySubjectCertificateContext(
    pSubject: *CERT_CONTEXT,
    pIssuer: ?*CERT_CONTEXT,
    pdwFlags: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertDuplicateCertificateContext(
    pCertContext: ?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) *CERT_CONTEXT;

pub extern "CRYPT32" fn CertCreateCertificateContext(
    dwCertEncodingType: u32,
    pbCertEncoded: [*:0]const u8,
    cbCertEncoded: u32,
) callconv(@import("std").os.windows.WINAPI) *CERT_CONTEXT;

pub extern "CRYPT32" fn CertFreeCertificateContext(
    pCertContext: ?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertSetCertificateContextProperty(
    pCertContext: *CERT_CONTEXT,
    dwPropId: u32,
    dwFlags: u32,
    pvData: ?*const c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertGetCertificateContextProperty(
    pCertContext: *CERT_CONTEXT,
    dwPropId: u32,
    pvData: ?[*]u8,
    pcbData: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertEnumCertificateContextProperties(
    pCertContext: *CERT_CONTEXT,
    dwPropId: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CRYPT32" fn CertCreateCTLEntryFromCertificateContextProperties(
    pCertContext: *CERT_CONTEXT,
    cOptAttr: u32,
    rgOptAttr: ?[*]CRYPT_ATTRIBUTE,
    dwFlags: u32,
    pvReserved: *c_void,
    pCtlEntry: ?[*]CTL_ENTRY,
    pcbCtlEntry: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertSetCertificateContextPropertiesFromCTLEntry(
    pCertContext: *CERT_CONTEXT,
    pCtlEntry: *CTL_ENTRY,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertGetCRLFromStore(
    hCertStore: *c_void,
    pIssuerContext: ?*CERT_CONTEXT,
    pPrevCrlContext: ?*CRL_CONTEXT,
    pdwFlags: *u32,
) callconv(@import("std").os.windows.WINAPI) *CRL_CONTEXT;

pub extern "CRYPT32" fn CertEnumCRLsInStore(
    hCertStore: *c_void,
    pPrevCrlContext: ?*CRL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) *CRL_CONTEXT;

pub extern "CRYPT32" fn CertFindCRLInStore(
    hCertStore: *c_void,
    dwCertEncodingType: u32,
    dwFindFlags: u32,
    dwFindType: u32,
    pvFindPara: ?*const c_void,
    pPrevCrlContext: ?*CRL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) *CRL_CONTEXT;

pub extern "CRYPT32" fn CertDuplicateCRLContext(
    pCrlContext: ?*CRL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) *CRL_CONTEXT;

pub extern "CRYPT32" fn CertCreateCRLContext(
    dwCertEncodingType: u32,
    pbCrlEncoded: [*:0]const u8,
    cbCrlEncoded: u32,
) callconv(@import("std").os.windows.WINAPI) *CRL_CONTEXT;

pub extern "CRYPT32" fn CertFreeCRLContext(
    pCrlContext: ?*CRL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertSetCRLContextProperty(
    pCrlContext: *CRL_CONTEXT,
    dwPropId: u32,
    dwFlags: u32,
    pvData: ?*const c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertGetCRLContextProperty(
    pCrlContext: *CRL_CONTEXT,
    dwPropId: u32,
    pvData: ?[*]u8,
    pcbData: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertEnumCRLContextProperties(
    pCrlContext: *CRL_CONTEXT,
    dwPropId: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CRYPT32" fn CertFindCertificateInCRL(
    pCert: *CERT_CONTEXT,
    pCrlContext: *CRL_CONTEXT,
    dwFlags: u32,
    pvReserved: *c_void,
    ppCrlEntry: ?*?*CRL_ENTRY,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertIsValidCRLForCertificate(
    pCert: *CERT_CONTEXT,
    pCrl: *CRL_CONTEXT,
    dwFlags: u32,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertAddEncodedCertificateToStore(
    hCertStore: ?*c_void,
    dwCertEncodingType: u32,
    pbCertEncoded: [*:0]const u8,
    cbCertEncoded: u32,
    dwAddDisposition: u32,
    ppCertContext: ?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertAddCertificateContextToStore(
    hCertStore: ?*c_void,
    pCertContext: *CERT_CONTEXT,
    dwAddDisposition: u32,
    ppStoreContext: ?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertAddSerializedElementToStore(
    hCertStore: ?*c_void,
    pbElement: [*:0]const u8,
    cbElement: u32,
    dwAddDisposition: u32,
    dwFlags: u32,
    dwContextTypeFlags: u32,
    pdwContextType: ?*u32,
    ppvContext: ?*const ?*const c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertDeleteCertificateFromStore(
    pCertContext: *CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertAddEncodedCRLToStore(
    hCertStore: ?*c_void,
    dwCertEncodingType: u32,
    pbCrlEncoded: [*:0]const u8,
    cbCrlEncoded: u32,
    dwAddDisposition: u32,
    ppCrlContext: ?*?*CRL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertAddCRLContextToStore(
    hCertStore: ?*c_void,
    pCrlContext: *CRL_CONTEXT,
    dwAddDisposition: u32,
    ppStoreContext: ?*?*CRL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertDeleteCRLFromStore(
    pCrlContext: *CRL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertSerializeCertificateStoreElement(
    pCertContext: *CERT_CONTEXT,
    dwFlags: u32,
    pbElement: ?[*:0]u8,
    pcbElement: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertSerializeCRLStoreElement(
    pCrlContext: *CRL_CONTEXT,
    dwFlags: u32,
    pbElement: ?[*:0]u8,
    pcbElement: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertDuplicateCTLContext(
    pCtlContext: ?*CTL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) *CTL_CONTEXT;

pub extern "CRYPT32" fn CertCreateCTLContext(
    dwMsgAndCertEncodingType: u32,
    pbCtlEncoded: [*:0]const u8,
    cbCtlEncoded: u32,
) callconv(@import("std").os.windows.WINAPI) *CTL_CONTEXT;

pub extern "CRYPT32" fn CertFreeCTLContext(
    pCtlContext: ?*CTL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertSetCTLContextProperty(
    pCtlContext: *CTL_CONTEXT,
    dwPropId: u32,
    dwFlags: u32,
    pvData: ?*const c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertGetCTLContextProperty(
    pCtlContext: *CTL_CONTEXT,
    dwPropId: u32,
    pvData: ?[*]u8,
    pcbData: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertEnumCTLContextProperties(
    pCtlContext: *CTL_CONTEXT,
    dwPropId: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CRYPT32" fn CertEnumCTLsInStore(
    hCertStore: *c_void,
    pPrevCtlContext: ?*CTL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) *CTL_CONTEXT;

pub extern "CRYPT32" fn CertFindSubjectInCTL(
    dwEncodingType: u32,
    dwSubjectType: u32,
    pvSubject: *c_void,
    pCtlContext: *CTL_CONTEXT,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *CTL_ENTRY;

pub extern "CRYPT32" fn CertFindCTLInStore(
    hCertStore: *c_void,
    dwMsgAndCertEncodingType: u32,
    dwFindFlags: u32,
    dwFindType: u32,
    pvFindPara: ?*const c_void,
    pPrevCtlContext: ?*CTL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) *CTL_CONTEXT;

pub extern "CRYPT32" fn CertAddEncodedCTLToStore(
    hCertStore: ?*c_void,
    dwMsgAndCertEncodingType: u32,
    pbCtlEncoded: [*:0]const u8,
    cbCtlEncoded: u32,
    dwAddDisposition: u32,
    ppCtlContext: ?*?*CTL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertAddCTLContextToStore(
    hCertStore: ?*c_void,
    pCtlContext: *CTL_CONTEXT,
    dwAddDisposition: u32,
    ppStoreContext: ?*?*CTL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertSerializeCTLStoreElement(
    pCtlContext: *CTL_CONTEXT,
    dwFlags: u32,
    pbElement: ?[*:0]u8,
    pcbElement: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertDeleteCTLFromStore(
    pCtlContext: *CTL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertAddCertificateLinkToStore(
    hCertStore: *c_void,
    pCertContext: *CERT_CONTEXT,
    dwAddDisposition: u32,
    ppStoreContext: ?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertAddCRLLinkToStore(
    hCertStore: *c_void,
    pCrlContext: *CRL_CONTEXT,
    dwAddDisposition: u32,
    ppStoreContext: ?*?*CRL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertAddCTLLinkToStore(
    hCertStore: *c_void,
    pCtlContext: *CTL_CONTEXT,
    dwAddDisposition: u32,
    ppStoreContext: ?*?*CTL_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertAddStoreToCollection(
    hCollectionStore: *c_void,
    hSiblingStore: ?*c_void,
    dwUpdateFlags: u32,
    dwPriority: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertRemoveStoreFromCollection(
    hCollectionStore: *c_void,
    hSiblingStore: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "CRYPT32" fn CertControlStore(
    hCertStore: *c_void,
    dwFlags: u32,
    dwCtrlType: u32,
    pvCtrlPara: ?*const c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertSetStoreProperty(
    hCertStore: *c_void,
    dwPropId: u32,
    dwFlags: u32,
    pvData: ?*const c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertGetStoreProperty(
    hCertStore: *c_void,
    dwPropId: u32,
    pvData: ?[*]u8,
    pcbData: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertCreateContext(
    dwContextType: u32,
    dwEncodingType: u32,
    pbEncoded: [*:0]const u8,
    cbEncoded: u32,
    dwFlags: u32,
    pCreatePara: ?*CERT_CREATE_CONTEXT_PARA,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "CRYPT32" fn CertRegisterSystemStore(
    pvSystemStore: *const c_void,
    dwFlags: u32,
    pStoreInfo: ?*CERT_SYSTEM_STORE_INFO,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertRegisterPhysicalStore(
    pvSystemStore: *const c_void,
    dwFlags: u32,
    pwszStoreName: [*:0]const u16,
    pStoreInfo: *CERT_PHYSICAL_STORE_INFO,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertUnregisterSystemStore(
    pvSystemStore: *const c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertUnregisterPhysicalStore(
    pvSystemStore: *const c_void,
    dwFlags: u32,
    pwszStoreName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertEnumSystemStoreLocation(
    dwFlags: u32,
    pvArg: ?*c_void,
    pfnEnum: PFN_CERT_ENUM_SYSTEM_STORE_LOCATION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertEnumSystemStore(
    dwFlags: u32,
    pvSystemStoreLocationPara: ?*c_void,
    pvArg: ?*c_void,
    pfnEnum: PFN_CERT_ENUM_SYSTEM_STORE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertEnumPhysicalStore(
    pvSystemStore: *const c_void,
    dwFlags: u32,
    pvArg: ?*c_void,
    pfnEnum: PFN_CERT_ENUM_PHYSICAL_STORE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertGetEnhancedKeyUsage(
    pCertContext: *CERT_CONTEXT,
    dwFlags: u32,
    pUsage: ?[*]CTL_USAGE,
    pcbUsage: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertSetEnhancedKeyUsage(
    pCertContext: *CERT_CONTEXT,
    pUsage: ?*CTL_USAGE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertAddEnhancedKeyUsageIdentifier(
    pCertContext: *CERT_CONTEXT,
    pszUsageIdentifier: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertRemoveEnhancedKeyUsageIdentifier(
    pCertContext: *CERT_CONTEXT,
    pszUsageIdentifier: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertGetValidUsages(
    cCerts: u32,
    rghCerts: [*]*CERT_CONTEXT,
    cNumOIDs: *i32,
    rghOIDs: ?[*]?PSTR,
    pcbOIDs: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptMsgGetAndVerifySigner(
    hCryptMsg: *c_void,
    cSignerStore: u32,
    rghSignerStore: ?[*]?*c_void,
    dwFlags: u32,
    ppSigner: ?*?*CERT_CONTEXT,
    pdwSignerIndex: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptMsgSignCTL(
    dwMsgEncodingType: u32,
    pbCtlContent: [*:0]u8,
    cbCtlContent: u32,
    pSignInfo: *CMSG_SIGNED_ENCODE_INFO,
    dwFlags: u32,
    pbEncoded: ?[*:0]u8,
    pcbEncoded: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptMsgEncodeAndSignCTL(
    dwMsgEncodingType: u32,
    pCtlInfo: *CTL_INFO,
    pSignInfo: *CMSG_SIGNED_ENCODE_INFO,
    dwFlags: u32,
    pbEncoded: ?[*:0]u8,
    pcbEncoded: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertFindSubjectInSortedCTL(
    pSubjectIdentifier: *CRYPTOAPI_BLOB,
    pCtlContext: *CTL_CONTEXT,
    dwFlags: u32,
    pvReserved: *c_void,
    pEncodedAttributes: ?*CRYPTOAPI_BLOB,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertEnumSubjectInSortedCTL(
    pCtlContext: *CTL_CONTEXT,
    ppvNextSubject: **c_void,
    pSubjectIdentifier: ?*CRYPTOAPI_BLOB,
    pEncodedAttributes: ?*CRYPTOAPI_BLOB,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertVerifyCTLUsage(
    dwEncodingType: u32,
    dwSubjectType: u32,
    pvSubject: *c_void,
    pSubjectUsage: *CTL_USAGE,
    dwFlags: u32,
    pVerifyUsagePara: ?*CTL_VERIFY_USAGE_PARA,
    pVerifyUsageStatus: *CTL_VERIFY_USAGE_STATUS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertVerifyRevocation(
    dwEncodingType: u32,
    dwRevType: u32,
    cContext: u32,
    rgpvContext: [*]*c_void,
    dwFlags: u32,
    pRevPara: ?*CERT_REVOCATION_PARA,
    pRevStatus: *CERT_REVOCATION_STATUS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertCompareIntegerBlob(
    pInt1: *CRYPTOAPI_BLOB,
    pInt2: *CRYPTOAPI_BLOB,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertCompareCertificate(
    dwCertEncodingType: u32,
    pCertId1: *CERT_INFO,
    pCertId2: *CERT_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertCompareCertificateName(
    dwCertEncodingType: u32,
    pCertName1: *CRYPTOAPI_BLOB,
    pCertName2: *CRYPTOAPI_BLOB,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertIsRDNAttrsInCertificateName(
    dwCertEncodingType: u32,
    dwFlags: u32,
    pCertName: *CRYPTOAPI_BLOB,
    pRDN: *CERT_RDN,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertComparePublicKeyInfo(
    dwCertEncodingType: u32,
    pPublicKey1: *CERT_PUBLIC_KEY_INFO,
    pPublicKey2: *CERT_PUBLIC_KEY_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertGetPublicKeyLength(
    dwCertEncodingType: u32,
    pPublicKey: *CERT_PUBLIC_KEY_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CRYPT32" fn CryptVerifyCertificateSignature(
    hCryptProv: ?*c_void,
    dwCertEncodingType: u32,
    pbEncoded: [*:0]const u8,
    cbEncoded: u32,
    pPublicKey: *CERT_PUBLIC_KEY_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptVerifyCertificateSignatureEx(
    hCryptProv: ?*c_void,
    dwCertEncodingType: u32,
    dwSubjectType: u32,
    pvSubject: *c_void,
    dwIssuerType: u32,
    pvIssuer: ?*c_void,
    dwFlags: u32,
    pvExtra: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertIsStrongHashToSign(
    pStrongSignPara: *CERT_STRONG_SIGN_PARA,
    pwszCNGHashAlgid: [*:0]const u16,
    pSigningCert: ?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptHashToBeSigned(
    hCryptProv: ?*c_void,
    dwCertEncodingType: u32,
    pbEncoded: [*:0]const u8,
    cbEncoded: u32,
    pbComputedHash: ?[*:0]u8,
    pcbComputedHash: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptHashCertificate(
    hCryptProv: ?*c_void,
    Algid: u32,
    dwFlags: u32,
    pbEncoded: [*:0]const u8,
    cbEncoded: u32,
    pbComputedHash: ?[*:0]u8,
    pcbComputedHash: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptHashCertificate2(
    pwszCNGHashAlgid: [*:0]const u16,
    dwFlags: u32,
    pvReserved: *c_void,
    pbEncoded: ?[*:0]const u8,
    cbEncoded: u32,
    pbComputedHash: ?[*:0]u8,
    pcbComputedHash: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSignCertificate(
    hCryptProvOrNCryptKey: ?*c_void,
    dwKeySpec: u32,
    dwCertEncodingType: u32,
    pbEncodedToBeSigned: [*:0]const u8,
    cbEncodedToBeSigned: u32,
    pSignatureAlgorithm: *CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: ?*const c_void,
    pbSignature: ?[*:0]u8,
    pcbSignature: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSignAndEncodeCertificate(
    hCryptProvOrNCryptKey: ?*c_void,
    dwKeySpec: u32,
    dwCertEncodingType: u32,
    lpszStructType: [*:0]const u8,
    pvStructInfo: *const c_void,
    pSignatureAlgorithm: *CRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: ?*const c_void,
    pbEncoded: ?[*:0]u8,
    pcbEncoded: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertVerifyTimeValidity(
    pTimeToVerify: ?*FILETIME,
    pCertInfo: *CERT_INFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CRYPT32" fn CertVerifyCRLTimeValidity(
    pTimeToVerify: ?*FILETIME,
    pCrlInfo: *CRL_INFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CRYPT32" fn CertVerifyValidityNesting(
    pSubjectInfo: *CERT_INFO,
    pIssuerInfo: *CERT_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertVerifyCRLRevocation(
    dwCertEncodingType: u32,
    pCertId: *CERT_INFO,
    cCrlInfo: u32,
    rgpCrlInfo: [*]*CRL_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertAlgIdToOID(
    dwAlgId: u32,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "CRYPT32" fn CertOIDToAlgId(
    pszObjId: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CRYPT32" fn CertFindExtension(
    pszObjId: [*:0]const u8,
    cExtensions: u32,
    rgExtensions: [*]CERT_EXTENSION,
) callconv(@import("std").os.windows.WINAPI) *CERT_EXTENSION;

pub extern "CRYPT32" fn CertFindAttribute(
    pszObjId: [*:0]const u8,
    cAttr: u32,
    rgAttr: [*]CRYPT_ATTRIBUTE,
) callconv(@import("std").os.windows.WINAPI) *CRYPT_ATTRIBUTE;

pub extern "CRYPT32" fn CertFindRDNAttr(
    pszObjId: [*:0]const u8,
    pName: *CERT_NAME_INFO,
) callconv(@import("std").os.windows.WINAPI) *CERT_RDN_ATTR;

pub extern "CRYPT32" fn CertGetIntendedKeyUsage(
    dwCertEncodingType: u32,
    pCertInfo: *CERT_INFO,
    pbKeyUsage: *u8,
    cbKeyUsage: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptInstallDefaultContext(
    hCryptProv: ?*c_void,
    dwDefaultType: u32,
    pvDefaultPara: ?*const c_void,
    dwFlags: u32,
    pvReserved: *c_void,
    phDefaultContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptUninstallDefaultContext(
    hDefaultContext: ?*c_void,
    dwFlags: u32,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptExportPublicKeyInfo(
    hCryptProvOrNCryptKey: ?*c_void,
    dwKeySpec: u32,
    dwCertEncodingType: u32,
    pInfo: ?[*]CERT_PUBLIC_KEY_INFO,
    pcbInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptExportPublicKeyInfoEx(
    hCryptProvOrNCryptKey: ?*c_void,
    dwKeySpec: u32,
    dwCertEncodingType: u32,
    pszPublicKeyObjId: ?PSTR,
    dwFlags: u32,
    pvAuxInfo: ?*c_void,
    pInfo: ?[*]CERT_PUBLIC_KEY_INFO,
    pcbInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptExportPublicKeyInfoFromBCryptKeyHandle(
    hBCryptKey: *c_void,
    dwCertEncodingType: u32,
    pszPublicKeyObjId: ?PSTR,
    dwFlags: u32,
    pvAuxInfo: ?*c_void,
    pInfo: ?[*]CERT_PUBLIC_KEY_INFO,
    pcbInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptImportPublicKeyInfo(
    hCryptProv: ?*c_void,
    dwCertEncodingType: u32,
    pInfo: *CERT_PUBLIC_KEY_INFO,
    phKey: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptImportPublicKeyInfoEx(
    hCryptProv: ?*c_void,
    dwCertEncodingType: u32,
    pInfo: *CERT_PUBLIC_KEY_INFO,
    aiKeyAlg: u32,
    dwFlags: u32,
    pvAuxInfo: ?*c_void,
    phKey: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptImportPublicKeyInfoEx2(
    dwCertEncodingType: u32,
    pInfo: *CERT_PUBLIC_KEY_INFO,
    dwFlags: u32,
    pvAuxInfo: ?*c_void,
    phKey: **c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptAcquireCertificatePrivateKey(
    pCert: *CERT_CONTEXT,
    dwFlags: u32,
    pvParameters: ?*c_void,
    phCryptProvOrNCryptKey: *?*c_void,
    pdwKeySpec: ?*u32,
    pfCallerFreeProvOrNCryptKey: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptFindCertificateKeyProvInfo(
    pCert: *CERT_CONTEXT,
    dwFlags: u32,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptImportPKCS8(
    sPrivateKeyAndParams: CRYPT_PKCS8_IMPORT_PARAMS,
    dwFlags: u32,
    phCryptProv: ?*?*c_void,
    pvAuxInfo: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptExportPKCS8(
    hCryptProv: ?*c_void,
    dwKeySpec: u32,
    pszPrivateKeyObjId: PSTR,
    dwFlags: u32,
    pvAuxInfo: ?*c_void,
    pbPrivateKeyBlob: ?[*:0]u8,
    pcbPrivateKeyBlob: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptHashPublicKeyInfo(
    hCryptProv: ?*c_void,
    Algid: u32,
    dwFlags: u32,
    dwCertEncodingType: u32,
    pInfo: *CERT_PUBLIC_KEY_INFO,
    pbComputedHash: ?[*:0]u8,
    pcbComputedHash: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertRDNValueToStrA(
    dwValueType: u32,
    pValue: *CRYPTOAPI_BLOB,
    psz: ?[*:0]u8,
    csz: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CRYPT32" fn CertRDNValueToStrW(
    dwValueType: u32,
    pValue: *CRYPTOAPI_BLOB,
    psz: ?[*:0]u16,
    csz: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CRYPT32" fn CertNameToStrA(
    dwCertEncodingType: u32,
    pName: *CRYPTOAPI_BLOB,
    dwStrType: u32,
    psz: ?[*:0]u8,
    csz: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CRYPT32" fn CertNameToStrW(
    dwCertEncodingType: u32,
    pName: *CRYPTOAPI_BLOB,
    dwStrType: u32,
    psz: ?[*:0]u16,
    csz: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CRYPT32" fn CertStrToNameA(
    dwCertEncodingType: u32,
    pszX500: [*:0]const u8,
    dwStrType: u32,
    pvReserved: *c_void,
    pbEncoded: ?[*:0]u8,
    pcbEncoded: *u32,
    ppszError: ?*?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertStrToNameW(
    dwCertEncodingType: u32,
    pszX500: [*:0]const u16,
    dwStrType: u32,
    pvReserved: *c_void,
    pbEncoded: ?[*:0]u8,
    pcbEncoded: *u32,
    ppszError: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertGetNameStringA(
    pCertContext: *CERT_CONTEXT,
    dwType: u32,
    dwFlags: u32,
    pvTypePara: ?*c_void,
    pszNameString: ?[*:0]u8,
    cchNameString: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CRYPT32" fn CertGetNameStringW(
    pCertContext: *CERT_CONTEXT,
    dwType: u32,
    dwFlags: u32,
    pvTypePara: ?*c_void,
    pszNameString: ?[*:0]u16,
    cchNameString: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CRYPT32" fn CryptSignMessage(
    pSignPara: *CRYPT_SIGN_MESSAGE_PARA,
    fDetachedSignature: BOOL,
    cToBeSigned: u32,
    rgpbToBeSigned: ?[*]const ?*const u8,
    rgcbToBeSigned: [*]u32,
    pbSignedBlob: ?[*:0]u8,
    pcbSignedBlob: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptVerifyMessageSignature(
    pVerifyPara: *CRYPT_VERIFY_MESSAGE_PARA,
    dwSignerIndex: u32,
    pbSignedBlob: [*:0]const u8,
    cbSignedBlob: u32,
    pbDecoded: ?[*:0]u8,
    pcbDecoded: ?*u32,
    ppSignerCert: ?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptGetMessageSignerCount(
    dwMsgEncodingType: u32,
    pbSignedBlob: [*:0]const u8,
    cbSignedBlob: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CRYPT32" fn CryptGetMessageCertificates(
    dwMsgAndCertEncodingType: u32,
    hCryptProv: ?*c_void,
    dwFlags: u32,
    pbSignedBlob: [*:0]const u8,
    cbSignedBlob: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "CRYPT32" fn CryptVerifyDetachedMessageSignature(
    pVerifyPara: *CRYPT_VERIFY_MESSAGE_PARA,
    dwSignerIndex: u32,
    pbDetachedSignBlob: [*:0]const u8,
    cbDetachedSignBlob: u32,
    cToBeSigned: u32,
    rgpbToBeSigned: [*]const *const u8,
    rgcbToBeSigned: [*]u32,
    ppSignerCert: ?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptEncryptMessage(
    pEncryptPara: *CRYPT_ENCRYPT_MESSAGE_PARA,
    cRecipientCert: u32,
    rgpRecipientCert: [*]*CERT_CONTEXT,
    pbToBeEncrypted: ?[*:0]const u8,
    cbToBeEncrypted: u32,
    pbEncryptedBlob: ?[*:0]u8,
    pcbEncryptedBlob: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptDecryptMessage(
    pDecryptPara: *CRYPT_DECRYPT_MESSAGE_PARA,
    pbEncryptedBlob: [*:0]const u8,
    cbEncryptedBlob: u32,
    pbDecrypted: ?[*:0]u8,
    pcbDecrypted: ?*u32,
    ppXchgCert: ?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSignAndEncryptMessage(
    pSignPara: *CRYPT_SIGN_MESSAGE_PARA,
    pEncryptPara: *CRYPT_ENCRYPT_MESSAGE_PARA,
    cRecipientCert: u32,
    rgpRecipientCert: [*]*CERT_CONTEXT,
    pbToBeSignedAndEncrypted: [*:0]const u8,
    cbToBeSignedAndEncrypted: u32,
    pbSignedAndEncryptedBlob: ?[*:0]u8,
    pcbSignedAndEncryptedBlob: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptDecryptAndVerifyMessageSignature(
    pDecryptPara: *CRYPT_DECRYPT_MESSAGE_PARA,
    pVerifyPara: *CRYPT_VERIFY_MESSAGE_PARA,
    dwSignerIndex: u32,
    pbEncryptedBlob: [*:0]const u8,
    cbEncryptedBlob: u32,
    pbDecrypted: ?[*:0]u8,
    pcbDecrypted: ?*u32,
    ppXchgCert: ?*?*CERT_CONTEXT,
    ppSignerCert: ?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptDecodeMessage(
    dwMsgTypeFlags: u32,
    pDecryptPara: ?*CRYPT_DECRYPT_MESSAGE_PARA,
    pVerifyPara: ?*CRYPT_VERIFY_MESSAGE_PARA,
    dwSignerIndex: u32,
    pbEncodedBlob: [*:0]const u8,
    cbEncodedBlob: u32,
    dwPrevInnerContentType: u32,
    pdwMsgType: ?*u32,
    pdwInnerContentType: ?*u32,
    pbDecoded: ?[*:0]u8,
    pcbDecoded: ?*u32,
    ppXchgCert: ?*?*CERT_CONTEXT,
    ppSignerCert: ?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptHashMessage(
    pHashPara: *CRYPT_HASH_MESSAGE_PARA,
    fDetachedHash: BOOL,
    cToBeHashed: u32,
    rgpbToBeHashed: [*]const *const u8,
    rgcbToBeHashed: [*]u32,
    pbHashedBlob: ?[*:0]u8,
    pcbHashedBlob: ?*u32,
    pbComputedHash: ?[*:0]u8,
    pcbComputedHash: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptVerifyMessageHash(
    pHashPara: *CRYPT_HASH_MESSAGE_PARA,
    pbHashedBlob: [*:0]u8,
    cbHashedBlob: u32,
    pbToBeHashed: ?[*:0]u8,
    pcbToBeHashed: ?*u32,
    pbComputedHash: ?[*:0]u8,
    pcbComputedHash: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptVerifyDetachedMessageHash(
    pHashPara: *CRYPT_HASH_MESSAGE_PARA,
    pbDetachedHashBlob: [*:0]u8,
    cbDetachedHashBlob: u32,
    cToBeHashed: u32,
    rgpbToBeHashed: [*]const *const u8,
    rgcbToBeHashed: [*]u32,
    pbComputedHash: ?[*:0]u8,
    pcbComputedHash: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSignMessageWithKey(
    pSignPara: *CRYPT_KEY_SIGN_MESSAGE_PARA,
    pbToBeSigned: [*:0]const u8,
    cbToBeSigned: u32,
    pbSignedBlob: ?[*:0]u8,
    pcbSignedBlob: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptVerifyMessageSignatureWithKey(
    pVerifyPara: *CRYPT_KEY_VERIFY_MESSAGE_PARA,
    pPublicKeyInfo: ?*CERT_PUBLIC_KEY_INFO,
    pbSignedBlob: [*:0]const u8,
    cbSignedBlob: u32,
    pbDecoded: ?[*:0]u8,
    pcbDecoded: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertOpenSystemStoreA(
    hProv: ?*c_void,
    szSubsystemProtocol: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "CRYPT32" fn CertOpenSystemStoreW(
    hProv: ?*c_void,
    szSubsystemProtocol: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "CRYPT32" fn CertAddEncodedCertificateToSystemStoreA(
    szCertStoreName: [*:0]const u8,
    pbCertEncoded: [*:0]const u8,
    cbCertEncoded: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertAddEncodedCertificateToSystemStoreW(
    szCertStoreName: [*:0]const u16,
    pbCertEncoded: [*:0]const u8,
    cbCertEncoded: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn FindCertsByIssuer(
    pCertChains: ?[*]CERT_CHAIN,
    pcbCertChains: *u32,
    pcCertChains: *u32,
    pbEncodedIssuerName: ?[*:0]u8,
    cbEncodedIssuerName: u32,
    pwszPurpose: ?[*:0]const u16,
    dwKeySpec: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPT32" fn CryptQueryObject(
    dwObjectType: u32,
    pvObject: *const c_void,
    dwExpectedContentTypeFlags: u32,
    dwExpectedFormatTypeFlags: u32,
    dwFlags: u32,
    pdwMsgAndCertEncodingType: ?*u32,
    pdwContentType: ?*u32,
    pdwFormatType: ?*u32,
    phCertStore: ?*?*c_void,
    phMsg: ?*?*c_void,
    ppvContext: ?*const ?*const c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptMemAlloc(
    cbSize: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "CRYPT32" fn CryptMemRealloc(
    pv: ?*c_void,
    cbSize: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "CRYPT32" fn CryptMemFree(
    pv: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "CRYPT32" fn CryptCreateAsyncHandle(
    dwFlags: u32,
    phAsync: *HCRYPTASYNC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSetAsyncParam(
    hAsync: HCRYPTASYNC,
    pszParamOid: PSTR,
    pvParam: ?*c_void,
    pfnFree: PFN_CRYPT_ASYNC_PARAM_FREE_FUNC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptGetAsyncParam(
    hAsync: HCRYPTASYNC,
    pszParamOid: PSTR,
    ppvParam: ?*?*c_void,
    ppfnFree: ?*?PFN_CRYPT_ASYNC_PARAM_FREE_FUNC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptCloseAsyncHandle(
    hAsync: HCRYPTASYNC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPTNET" fn CryptRetrieveObjectByUrlA(
    pszUrl: [*:0]const u8,
    pszObjectOid: ?[*:0]const u8,
    dwRetrievalFlags: u32,
    dwTimeout: u32,
    ppvObject: **c_void,
    hAsyncRetrieve: HCRYPTASYNC,
    pCredentials: ?*CRYPT_CREDENTIALS,
    pvVerify: ?*c_void,
    pAuxInfo: ?*CRYPT_RETRIEVE_AUX_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPTNET" fn CryptRetrieveObjectByUrlW(
    pszUrl: [*:0]const u16,
    pszObjectOid: ?[*:0]const u8,
    dwRetrievalFlags: u32,
    dwTimeout: u32,
    ppvObject: **c_void,
    hAsyncRetrieve: HCRYPTASYNC,
    pCredentials: ?*CRYPT_CREDENTIALS,
    pvVerify: ?*c_void,
    pAuxInfo: ?*CRYPT_RETRIEVE_AUX_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPTNET" fn CryptInstallCancelRetrieval(
    pfnCancel: PFN_CRYPT_CANCEL_RETRIEVAL,
    pvArg: ?*const c_void,
    dwFlags: u32,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPTNET" fn CryptUninstallCancelRetrieval(
    dwFlags: u32,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPTNET" fn CryptGetObjectUrl(
    pszUrlOid: [*:0]const u8,
    pvPara: *c_void,
    dwFlags: u32,
    pUrlArray: ?[*]CRYPT_URL_ARRAY,
    pcbUrlArray: *u32,
    pUrlInfo: ?[*]CRYPT_URL_INFO,
    pcbUrlInfo: ?*u32,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertCreateSelfSignCertificate(
    hCryptProvOrNCryptKey: ?*c_void,
    pSubjectIssuerBlob: *CRYPTOAPI_BLOB,
    dwFlags: u32,
    pKeyProvInfo: ?*CRYPT_KEY_PROV_INFO,
    pSignatureAlgorithm: ?*CRYPT_ALGORITHM_IDENTIFIER,
    pStartTime: ?*SYSTEMTIME,
    pEndTime: ?*SYSTEMTIME,
    pExtensions: ?*CERT_EXTENSIONS,
) callconv(@import("std").os.windows.WINAPI) *CERT_CONTEXT;

pub extern "CRYPT32" fn CryptGetKeyIdentifierProperty(
    pKeyIdentifier: *const CRYPTOAPI_BLOB,
    dwPropId: u32,
    dwFlags: u32,
    pwszComputerName: ?[*:0]const u16,
    pvReserved: *c_void,
    pvData: ?[*]u8,
    pcbData: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSetKeyIdentifierProperty(
    pKeyIdentifier: *const CRYPTOAPI_BLOB,
    dwPropId: u32,
    dwFlags: u32,
    pwszComputerName: ?[*:0]const u16,
    pvReserved: *c_void,
    pvData: ?*const c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptEnumKeyIdentifierProperties(
    pKeyIdentifier: ?*const CRYPTOAPI_BLOB,
    dwPropId: u32,
    dwFlags: u32,
    pwszComputerName: ?[*:0]const u16,
    pvReserved: *c_void,
    pvArg: ?*c_void,
    pfnEnum: PFN_CRYPT_ENUM_KEYID_PROP,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptCreateKeyIdentifierFromCSP(
    dwCertEncodingType: u32,
    pszPubKeyOID: ?[*:0]const u8,
    pPubKeyStruc: [*]const PUBLICKEYSTRUC,
    cbPubKeyStruc: u32,
    dwFlags: u32,
    pvReserved: *c_void,
    pbHash: ?[*:0]u8,
    pcbHash: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertCreateCertificateChainEngine(
    pConfig: *CERT_CHAIN_ENGINE_CONFIG,
    phChainEngine: *HCERTCHAINENGINE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertFreeCertificateChainEngine(
    hChainEngine: HCERTCHAINENGINE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "CRYPT32" fn CertResyncCertificateChainEngine(
    hChainEngine: HCERTCHAINENGINE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertGetCertificateChain(
    hChainEngine: HCERTCHAINENGINE,
    pCertContext: *CERT_CONTEXT,
    pTime: ?*FILETIME,
    hAdditionalStore: ?*c_void,
    pChainPara: *CERT_CHAIN_PARA,
    dwFlags: u32,
    pvReserved: *c_void,
    ppChainContext: **CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertFreeCertificateChain(
    pChainContext: *CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "CRYPT32" fn CertDuplicateCertificateChain(
    pChainContext: *CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) *CERT_CHAIN_CONTEXT;

pub extern "CRYPT32" fn CertFindChainInStore(
    hCertStore: *c_void,
    dwCertEncodingType: u32,
    dwFindFlags: u32,
    dwFindType: u32,
    pvFindPara: ?*const c_void,
    pPrevChainContext: ?*CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) *CERT_CHAIN_CONTEXT;

pub extern "CRYPT32" fn CertVerifyCertificateChainPolicy(
    pszPolicyOID: [*:0]const u8,
    pChainContext: *CERT_CHAIN_CONTEXT,
    pPolicyPara: *CERT_CHAIN_POLICY_PARA,
    pPolicyStatus: *CERT_CHAIN_POLICY_STATUS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptStringToBinaryA(
    pszString: [*:0]const u8,
    cchString: u32,
    dwFlags: u32,
    pbBinary: ?[*:0]u8,
    pcbBinary: *u32,
    pdwSkip: ?*u32,
    pdwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptStringToBinaryW(
    pszString: [*:0]const u16,
    cchString: u32,
    dwFlags: u32,
    pbBinary: ?[*:0]u8,
    pcbBinary: *u32,
    pdwSkip: ?*u32,
    pdwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptBinaryToStringA(
    pbBinary: [*:0]const u8,
    cbBinary: u32,
    dwFlags: u32,
    pszString: ?[*:0]u8,
    pcchString: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptBinaryToStringW(
    pbBinary: [*:0]const u8,
    cbBinary: u32,
    dwFlags: u32,
    pszString: ?[*:0]u16,
    pcchString: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn PFXImportCertStore(
    pPFX: *CRYPTOAPI_BLOB,
    szPassword: [*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "CRYPT32" fn PFXIsPFXBlob(
    pPFX: *CRYPTOAPI_BLOB,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn PFXVerifyPassword(
    pPFX: *CRYPTOAPI_BLOB,
    szPassword: [*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn PFXExportCertStoreEx(
    hStore: *c_void,
    pPFX: *CRYPTOAPI_BLOB,
    szPassword: [*:0]const u16,
    pvPara: *c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn PFXExportCertStore(
    hStore: *c_void,
    pPFX: *CRYPTOAPI_BLOB,
    szPassword: [*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertOpenServerOcspResponse(
    pChainContext: *CERT_CHAIN_CONTEXT,
    dwFlags: u32,
    pOpenPara: ?*CERT_SERVER_OCSP_RESPONSE_OPEN_PARA,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "CRYPT32" fn CertAddRefServerOcspResponse(
    hServerOcspResponse: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "CRYPT32" fn CertCloseServerOcspResponse(
    hServerOcspResponse: ?*c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "CRYPT32" fn CertGetServerOcspResponseContext(
    hServerOcspResponse: *c_void,
    dwFlags: u32,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) *CERT_SERVER_OCSP_RESPONSE_CONTEXT;

pub extern "CRYPT32" fn CertAddRefServerOcspResponseContext(
    pServerOcspResponseContext: ?*CERT_SERVER_OCSP_RESPONSE_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "CRYPT32" fn CertFreeServerOcspResponseContext(
    pServerOcspResponseContext: ?*CERT_SERVER_OCSP_RESPONSE_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "CRYPT32" fn CertRetrieveLogoOrBiometricInfo(
    pCertContext: *CERT_CONTEXT,
    lpszLogoOrBiometricType: [*:0]const u8,
    dwRetrievalFlags: u32,
    dwTimeout: u32,
    dwFlags: u32,
    pvReserved: *c_void,
    ppbData: **u8,
    pcbData: *u32,
    ppwszMimeType: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertSelectCertificateChains(
    pSelectionContext: ?*Guid,
    dwFlags: u32,
    pChainParameters: ?*CERT_SELECT_CHAIN_PARA,
    cCriteria: u32,
    rgpCriteria: ?[*]CERT_SELECT_CRITERIA,
    hStore: *c_void,
    pcSelection: *u32,
    pprgpSelection: ***CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertFreeCertificateChainList(
    prgpSelection: **CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "CRYPT32" fn CryptRetrieveTimeStamp(
    wszUrl: [*:0]const u16,
    dwRetrievalFlags: u32,
    dwTimeout: u32,
    pszHashId: [*:0]const u8,
    pPara: ?*const CRYPT_TIMESTAMP_PARA,
    pbData: [*:0]const u8,
    cbData: u32,
    ppTsContext: **CRYPT_TIMESTAMP_CONTEXT,
    ppTsSigner: ?*?*CERT_CONTEXT,
    phStore: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptVerifyTimeStampSignature(
    pbTSContentInfo: [*:0]const u8,
    cbTSContentInfo: u32,
    pbData: ?[*:0]const u8,
    cbData: u32,
    hAdditionalStore: ?*c_void,
    ppTsContext: **CRYPT_TIMESTAMP_CONTEXT,
    ppTsSigner: ?*?*CERT_CONTEXT,
    phStore: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CertIsWeakHash(
    dwHashUseType: u32,
    pwszCNGHashAlgid: [*:0]const u16,
    dwChainFlags: u32,
    pSignerChainContext: ?*CERT_CHAIN_CONTEXT,
    pTimeStamp: ?*FILETIME,
    pwszFileName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptProtectData(
    pDataIn: *CRYPTOAPI_BLOB,
    szDataDescr: ?[*:0]const u16,
    pOptionalEntropy: ?*CRYPTOAPI_BLOB,
    pvReserved: *c_void,
    pPromptStruct: ?*CRYPTPROTECT_PROMPTSTRUCT,
    dwFlags: u32,
    pDataOut: *CRYPTOAPI_BLOB,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptUnprotectData(
    pDataIn: *CRYPTOAPI_BLOB,
    ppszDataDescr: ?*?PWSTR,
    pOptionalEntropy: ?*CRYPTOAPI_BLOB,
    pvReserved: *c_void,
    pPromptStruct: ?*CRYPTPROTECT_PROMPTSTRUCT,
    dwFlags: u32,
    pDataOut: *CRYPTOAPI_BLOB,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptUpdateProtectedState(
    pOldSid: ?*c_void,
    pwszOldPassword: ?[*:0]const u16,
    dwFlags: u32,
    pdwSuccessCount: ?*u32,
    pdwFailureCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptProtectMemory(
    pDataIn: *c_void,
    cbDataIn: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptUnprotectMemory(
    pDataIn: *c_void,
    cbDataIn: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WinSCard" fn SCardEstablishContext(
    dwScope: u32,
    pvReserved1: *const c_void,
    pvReserved2: *const c_void,
    phContext: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardReleaseContext(
    hContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardIsValidContext(
    hContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardListReaderGroupsA(
    hContext: ?*c_void,
    mszGroups: ?[*:0]u8,
    pcchGroups: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardListReaderGroupsW(
    hContext: ?*c_void,
    mszGroups: ?[*:0]u16,
    pcchGroups: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardListReadersA(
    hContext: ?*c_void,
    mszGroups: ?[*:0]const u8,
    mszReaders: ?PSTR,
    pcchReaders: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardListReadersW(
    hContext: ?*c_void,
    mszGroups: ?[*:0]const u16,
    mszReaders: ?PWSTR,
    pcchReaders: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardListCardsA(
    hContext: ?*c_void,
    pbAtr: ?*u8,
    rgquidInterfaces: ?[*]Guid,
    cguidInterfaceCount: u32,
    mszCards: ?*i8,
    pcchCards: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardListCardsW(
    hContext: ?*c_void,
    pbAtr: ?*u8,
    rgquidInterfaces: ?[*]Guid,
    cguidInterfaceCount: u32,
    mszCards: ?PWSTR,
    pcchCards: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardListInterfacesA(
    hContext: ?*c_void,
    szCard: [*:0]const u8,
    pguidInterfaces: *Guid,
    pcguidInterfaces: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardListInterfacesW(
    hContext: ?*c_void,
    szCard: [*:0]const u16,
    pguidInterfaces: *Guid,
    pcguidInterfaces: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardGetProviderIdA(
    hContext: ?*c_void,
    szCard: [*:0]const u8,
    pguidProviderId: *Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardGetProviderIdW(
    hContext: ?*c_void,
    szCard: [*:0]const u16,
    pguidProviderId: *Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardGetCardTypeProviderNameA(
    hContext: ?*c_void,
    szCardName: [*:0]const u8,
    dwProviderId: u32,
    szProvider: [*]i8,
    pcchProvider: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardGetCardTypeProviderNameW(
    hContext: ?*c_void,
    szCardName: [*:0]const u16,
    dwProviderId: u32,
    szProvider: [*:0]u16,
    pcchProvider: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardIntroduceReaderGroupA(
    hContext: ?*c_void,
    szGroupName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardIntroduceReaderGroupW(
    hContext: ?*c_void,
    szGroupName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardForgetReaderGroupA(
    hContext: ?*c_void,
    szGroupName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardForgetReaderGroupW(
    hContext: ?*c_void,
    szGroupName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardIntroduceReaderA(
    hContext: ?*c_void,
    szReaderName: [*:0]const u8,
    szDeviceName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardIntroduceReaderW(
    hContext: ?*c_void,
    szReaderName: [*:0]const u16,
    szDeviceName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardForgetReaderA(
    hContext: ?*c_void,
    szReaderName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardForgetReaderW(
    hContext: ?*c_void,
    szReaderName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardAddReaderToGroupA(
    hContext: ?*c_void,
    szReaderName: [*:0]const u8,
    szGroupName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardAddReaderToGroupW(
    hContext: ?*c_void,
    szReaderName: [*:0]const u16,
    szGroupName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardRemoveReaderFromGroupA(
    hContext: ?*c_void,
    szReaderName: [*:0]const u8,
    szGroupName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardRemoveReaderFromGroupW(
    hContext: ?*c_void,
    szReaderName: [*:0]const u16,
    szGroupName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardIntroduceCardTypeA(
    hContext: ?*c_void,
    szCardName: [*:0]const u8,
    pguidPrimaryProvider: ?*Guid,
    rgguidInterfaces: ?*Guid,
    dwInterfaceCount: u32,
    pbAtr: *u8,
    pbAtrMask: *u8,
    cbAtrLen: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardIntroduceCardTypeW(
    hContext: ?*c_void,
    szCardName: [*:0]const u16,
    pguidPrimaryProvider: ?*Guid,
    rgguidInterfaces: ?*Guid,
    dwInterfaceCount: u32,
    pbAtr: *u8,
    pbAtrMask: *u8,
    cbAtrLen: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardSetCardTypeProviderNameA(
    hContext: ?*c_void,
    szCardName: [*:0]const u8,
    dwProviderId: u32,
    szProvider: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardSetCardTypeProviderNameW(
    hContext: ?*c_void,
    szCardName: [*:0]const u16,
    dwProviderId: u32,
    szProvider: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardForgetCardTypeA(
    hContext: ?*c_void,
    szCardName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardForgetCardTypeW(
    hContext: ?*c_void,
    szCardName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardFreeMemory(
    hContext: ?*c_void,
    pvMem: *const c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardAccessStartedEvent(
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WinSCard" fn SCardReleaseStartedEvent(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WinSCard" fn SCardLocateCardsA(
    hContext: ?*c_void,
    mszCards: [*:0]const u8,
    rgReaderStates: *SCARD_READERSTATEA,
    cReaders: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardLocateCardsW(
    hContext: ?*c_void,
    mszCards: [*:0]const u16,
    rgReaderStates: *SCARD_READERSTATEW,
    cReaders: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardLocateCardsByATRA(
    hContext: ?*c_void,
    rgAtrMasks: *SCARD_ATRMASK,
    cAtrs: u32,
    rgReaderStates: *SCARD_READERSTATEA,
    cReaders: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardLocateCardsByATRW(
    hContext: ?*c_void,
    rgAtrMasks: *SCARD_ATRMASK,
    cAtrs: u32,
    rgReaderStates: *SCARD_READERSTATEW,
    cReaders: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardGetStatusChangeA(
    hContext: ?*c_void,
    dwTimeout: u32,
    rgReaderStates: *SCARD_READERSTATEA,
    cReaders: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardGetStatusChangeW(
    hContext: ?*c_void,
    dwTimeout: u32,
    rgReaderStates: *SCARD_READERSTATEW,
    cReaders: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardCancel(
    hContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardConnectA(
    hContext: ?*c_void,
    szReader: [*:0]const u8,
    dwShareMode: u32,
    dwPreferredProtocols: u32,
    phCard: *?*c_void,
    pdwActiveProtocol: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardConnectW(
    hContext: ?*c_void,
    szReader: [*:0]const u16,
    dwShareMode: u32,
    dwPreferredProtocols: u32,
    phCard: *?*c_void,
    pdwActiveProtocol: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardReconnect(
    hCard: ?*c_void,
    dwShareMode: u32,
    dwPreferredProtocols: u32,
    dwInitialization: u32,
    pdwActiveProtocol: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardDisconnect(
    hCard: ?*c_void,
    dwDisposition: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardBeginTransaction(
    hCard: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardEndTransaction(
    hCard: ?*c_void,
    dwDisposition: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardState(
    hCard: ?*c_void,
    pdwState: *u32,
    pdwProtocol: *u32,
    pbAtr: [*:0]u8,
    pcbAtrLen: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardStatusA(
    hCard: ?*c_void,
    mszReaderNames: ?PSTR,
    pcchReaderLen: ?*u32,
    pdwState: ?*u32,
    pdwProtocol: ?*u32,
    pbAtr: ?*u8,
    pcbAtrLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardStatusW(
    hCard: ?*c_void,
    mszReaderNames: ?PWSTR,
    pcchReaderLen: ?*u32,
    pdwState: ?*u32,
    pdwProtocol: ?*u32,
    pbAtr: ?*u8,
    pcbAtrLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardTransmit(
    hCard: ?*c_void,
    pioSendPci: *SCARD_IO_REQUEST,
    pbSendBuffer: [*:0]u8,
    cbSendLength: u32,
    pioRecvPci: ?*SCARD_IO_REQUEST,
    pbRecvBuffer: [*:0]u8,
    pcbRecvLength: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardGetTransmitCount(
    hCard: ?*c_void,
    pcTransmitCount: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardControl(
    hCard: ?*c_void,
    dwControlCode: u32,
    lpInBuffer: [*]const u8,
    cbInBufferSize: u32,
    lpOutBuffer: [*]u8,
    cbOutBufferSize: u32,
    lpBytesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardGetAttrib(
    hCard: ?*c_void,
    dwAttrId: u32,
    pbAttr: ?[*:0]u8,
    pcbAttrLen: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardSetAttrib(
    hCard: ?*c_void,
    dwAttrId: u32,
    pbAttr: [*:0]u8,
    cbAttrLen: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SCARDDLG" fn SCardUIDlgSelectCardA(
    param0: *OPENCARDNAME_EXA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SCARDDLG" fn SCardUIDlgSelectCardW(
    param0: *OPENCARDNAME_EXW,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SCARDDLG" fn GetOpenCardNameA(
    param0: *OPENCARDNAMEA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SCARDDLG" fn GetOpenCardNameW(
    param0: *OPENCARDNAMEW,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SCARDDLG" fn SCardDlgExtendedError(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardReadCacheA(
    hContext: ?*c_void,
    CardIdentifier: *Guid,
    FreshnessCounter: u32,
    LookupName: PSTR,
    Data: [*:0]u8,
    DataLen: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardReadCacheW(
    hContext: ?*c_void,
    CardIdentifier: *Guid,
    FreshnessCounter: u32,
    LookupName: PWSTR,
    Data: [*:0]u8,
    DataLen: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardWriteCacheA(
    hContext: ?*c_void,
    CardIdentifier: *Guid,
    FreshnessCounter: u32,
    LookupName: PSTR,
    Data: [*:0]u8,
    DataLen: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardWriteCacheW(
    hContext: ?*c_void,
    CardIdentifier: *Guid,
    FreshnessCounter: u32,
    LookupName: PWSTR,
    Data: [*:0]u8,
    DataLen: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardGetReaderIconA(
    hContext: ?*c_void,
    szReaderName: [*:0]const u8,
    pbIcon: ?[*:0]u8,
    pcbIcon: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardGetReaderIconW(
    hContext: ?*c_void,
    szReaderName: [*:0]const u16,
    pbIcon: ?[*:0]u8,
    pcbIcon: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardGetDeviceTypeIdA(
    hContext: ?*c_void,
    szReaderName: [*:0]const u8,
    pdwDeviceTypeId: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardGetDeviceTypeIdW(
    hContext: ?*c_void,
    szReaderName: [*:0]const u16,
    pdwDeviceTypeId: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardGetReaderDeviceInstanceIdA(
    hContext: ?*c_void,
    szReaderName: [*:0]const u8,
    szDeviceInstanceId: ?PSTR,
    pcchDeviceInstanceId: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardGetReaderDeviceInstanceIdW(
    hContext: ?*c_void,
    szReaderName: [*:0]const u16,
    szDeviceInstanceId: ?PWSTR,
    pcchDeviceInstanceId: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardListReadersWithDeviceInstanceIdA(
    hContext: ?*c_void,
    szDeviceInstanceId: [*:0]const u8,
    mszReaders: ?PSTR,
    pcchReaders: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardListReadersWithDeviceInstanceIdW(
    hContext: ?*c_void,
    szDeviceInstanceId: [*:0]const u16,
    mszReaders: ?PWSTR,
    pcchReaders: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WinSCard" fn SCardAudit(
    hContext: ?*c_void,
    dwEvent: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ADVAPI32" fn ChangeServiceConfig2A(
    hService: *SC_HANDLE__,
    dwInfoLevel: u32,
    lpInfo: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ChangeServiceConfig2W(
    hService: *SC_HANDLE__,
    dwInfoLevel: u32,
    lpInfo: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CloseServiceHandle(
    hSCObject: *SC_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ControlService(
    hService: *SC_HANDLE__,
    dwControl: u32,
    lpServiceStatus: *SERVICE_STATUS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn DeleteService(
    hService: *SC_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn EnumDependentServicesA(
    hService: *SC_HANDLE__,
    dwServiceState: u32,
    lpServices: ?[*]ENUM_SERVICE_STATUSA,
    cbBufSize: u32,
    pcbBytesNeeded: *u32,
    lpServicesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn EnumDependentServicesW(
    hService: *SC_HANDLE__,
    dwServiceState: u32,
    lpServices: ?[*]ENUM_SERVICE_STATUSW,
    cbBufSize: u32,
    pcbBytesNeeded: *u32,
    lpServicesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn EnumServicesStatusA(
    hSCManager: *SC_HANDLE__,
    dwServiceType: u32,
    dwServiceState: u32,
    lpServices: ?[*]ENUM_SERVICE_STATUSA,
    cbBufSize: u32,
    pcbBytesNeeded: *u32,
    lpServicesReturned: *u32,
    lpResumeHandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn EnumServicesStatusW(
    hSCManager: *SC_HANDLE__,
    dwServiceType: u32,
    dwServiceState: u32,
    lpServices: ?[*]ENUM_SERVICE_STATUSW,
    cbBufSize: u32,
    pcbBytesNeeded: *u32,
    lpServicesReturned: *u32,
    lpResumeHandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn EnumServicesStatusExA(
    hSCManager: *SC_HANDLE__,
    InfoLevel: SC_ENUM_TYPE,
    dwServiceType: u32,
    dwServiceState: u32,
    lpServices: ?[*:0]u8,
    cbBufSize: u32,
    pcbBytesNeeded: *u32,
    lpServicesReturned: *u32,
    lpResumeHandle: ?*u32,
    pszGroupName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn EnumServicesStatusExW(
    hSCManager: *SC_HANDLE__,
    InfoLevel: SC_ENUM_TYPE,
    dwServiceType: u32,
    dwServiceState: u32,
    lpServices: ?[*:0]u8,
    cbBufSize: u32,
    pcbBytesNeeded: *u32,
    lpServicesReturned: *u32,
    lpResumeHandle: ?*u32,
    pszGroupName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn GetServiceKeyNameA(
    hSCManager: *SC_HANDLE__,
    lpDisplayName: [*:0]const u8,
    lpServiceName: ?[*:0]u8,
    lpcchBuffer: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn GetServiceKeyNameW(
    hSCManager: *SC_HANDLE__,
    lpDisplayName: [*:0]const u16,
    lpServiceName: ?[*:0]u16,
    lpcchBuffer: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn GetServiceDisplayNameA(
    hSCManager: *SC_HANDLE__,
    lpServiceName: [*:0]const u8,
    lpDisplayName: ?[*:0]u8,
    lpcchBuffer: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn GetServiceDisplayNameW(
    hSCManager: *SC_HANDLE__,
    lpServiceName: [*:0]const u16,
    lpDisplayName: ?[*:0]u16,
    lpcchBuffer: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn LockServiceDatabase(
    hSCManager: *SC_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "ADVAPI32" fn NotifyBootConfigStatus(
    BootAcceptable: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn OpenSCManagerA(
    lpMachineName: ?[*:0]const u8,
    lpDatabaseName: ?[*:0]const u8,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) *SC_HANDLE__;

pub extern "ADVAPI32" fn OpenSCManagerW(
    lpMachineName: ?[*:0]const u16,
    lpDatabaseName: ?[*:0]const u16,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) *SC_HANDLE__;

pub extern "ADVAPI32" fn OpenServiceA(
    hSCManager: *SC_HANDLE__,
    lpServiceName: [*:0]const u8,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) *SC_HANDLE__;

pub extern "ADVAPI32" fn OpenServiceW(
    hSCManager: *SC_HANDLE__,
    lpServiceName: [*:0]const u16,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) *SC_HANDLE__;

pub extern "ADVAPI32" fn QueryServiceConfigA(
    hService: *SC_HANDLE__,
    lpServiceConfig: ?[*]QUERY_SERVICE_CONFIGA,
    cbBufSize: u32,
    pcbBytesNeeded: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn QueryServiceConfigW(
    hService: *SC_HANDLE__,
    lpServiceConfig: ?[*]QUERY_SERVICE_CONFIGW,
    cbBufSize: u32,
    pcbBytesNeeded: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn QueryServiceConfig2A(
    hService: *SC_HANDLE__,
    dwInfoLevel: u32,
    lpBuffer: ?[*:0]u8,
    cbBufSize: u32,
    pcbBytesNeeded: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn QueryServiceConfig2W(
    hService: *SC_HANDLE__,
    dwInfoLevel: u32,
    lpBuffer: ?[*:0]u8,
    cbBufSize: u32,
    pcbBytesNeeded: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn QueryServiceLockStatusA(
    hSCManager: *SC_HANDLE__,
    lpLockStatus: ?[*]QUERY_SERVICE_LOCK_STATUSA,
    cbBufSize: u32,
    pcbBytesNeeded: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn QueryServiceLockStatusW(
    hSCManager: *SC_HANDLE__,
    lpLockStatus: ?[*]QUERY_SERVICE_LOCK_STATUSW,
    cbBufSize: u32,
    pcbBytesNeeded: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn QueryServiceObjectSecurity(
    hService: *SC_HANDLE__,
    dwSecurityInformation: u32,
    lpSecurityDescriptor: ?[*]u8,
    cbBufSize: u32,
    pcbBytesNeeded: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn QueryServiceStatus(
    hService: *SC_HANDLE__,
    lpServiceStatus: *SERVICE_STATUS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn QueryServiceStatusEx(
    hService: *SC_HANDLE__,
    InfoLevel: SC_STATUS_TYPE,
    lpBuffer: ?[*:0]u8,
    cbBufSize: u32,
    pcbBytesNeeded: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn RegisterServiceCtrlHandlerA(
    lpServiceName: [*:0]const u8,
    lpHandlerProc: LPHANDLER_FUNCTION,
) callconv(@import("std").os.windows.WINAPI) *SERVICE_STATUS_HANDLE__;

pub extern "ADVAPI32" fn RegisterServiceCtrlHandlerW(
    lpServiceName: [*:0]const u16,
    lpHandlerProc: LPHANDLER_FUNCTION,
) callconv(@import("std").os.windows.WINAPI) *SERVICE_STATUS_HANDLE__;

pub extern "ADVAPI32" fn RegisterServiceCtrlHandlerExA(
    lpServiceName: [*:0]const u8,
    lpHandlerProc: LPHANDLER_FUNCTION_EX,
    lpContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *SERVICE_STATUS_HANDLE__;

pub extern "ADVAPI32" fn RegisterServiceCtrlHandlerExW(
    lpServiceName: [*:0]const u16,
    lpHandlerProc: LPHANDLER_FUNCTION_EX,
    lpContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *SERVICE_STATUS_HANDLE__;

pub extern "ADVAPI32" fn SetServiceObjectSecurity(
    hService: *SC_HANDLE__,
    dwSecurityInformation: u32,
    lpSecurityDescriptor: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SetServiceStatus(
    hServiceStatus: *SERVICE_STATUS_HANDLE__,
    lpServiceStatus: *SERVICE_STATUS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn StartServiceCtrlDispatcherA(
    lpServiceStartTable: *const SERVICE_TABLE_ENTRYA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn StartServiceCtrlDispatcherW(
    lpServiceStartTable: *const SERVICE_TABLE_ENTRYW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn StartServiceA(
    hService: *SC_HANDLE__,
    dwNumServiceArgs: u32,
    lpServiceArgVectors: ?[*]?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn StartServiceW(
    hService: *SC_HANDLE__,
    dwNumServiceArgs: u32,
    lpServiceArgVectors: ?[*]?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn UnlockServiceDatabase(
    ScLock: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn NotifyServiceStatusChangeA(
    hService: *SC_HANDLE__,
    dwNotifyMask: u32,
    pNotifyBuffer: *SERVICE_NOTIFY_2A,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn NotifyServiceStatusChangeW(
    hService: *SC_HANDLE__,
    dwNotifyMask: u32,
    pNotifyBuffer: *SERVICE_NOTIFY_2W,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn ControlServiceExA(
    hService: *SC_HANDLE__,
    dwControl: u32,
    dwInfoLevel: u32,
    pControlParams: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ControlServiceExW(
    hService: *SC_HANDLE__,
    dwControl: u32,
    dwInfoLevel: u32,
    pControlParams: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn QueryServiceDynamicInformation(
    hServiceStatus: *SERVICE_STATUS_HANDLE__,
    dwInfoLevel: u32,
    ppDynamicInfo: **c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn WaitServiceState(
    hService: *SC_HANDLE__,
    dwNotify: u32,
    dwTimeout: u32,
    hCancelEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "api-ms-win-service-core-l1-1-3" fn GetServiceRegistryStateKey(
    ServiceStatusHandle: *SERVICE_STATUS_HANDLE__,
    StateType: SERVICE_REGISTRY_STATE_TYPE,
    AccessMask: u32,
    ServiceStateKey: *HKEY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "api-ms-win-service-core-l1-1-4" fn GetServiceDirectory(
    hServiceStatus: *SERVICE_STATUS_HANDLE__,
    eDirectoryType: SERVICE_DIRECTORY_TYPE,
    lpPathBuffer: ?[*]u16,
    cchPathBufferLength: u32,
    lpcchRequiredBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SspiCli" fn LsaRegisterLogonProcess(
    LogonProcessName: *STRING,
    LsaHandle: *LsaHandle,
    SecurityMode: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "SspiCli" fn LsaLogonUser(
    LsaHandle: HANDLE,
    OriginName: *STRING,
    LogonType: SECURITY_LOGON_TYPE,
    AuthenticationPackage: u32,
    AuthenticationInformation: [*]u8,
    AuthenticationInformationLength: u32,
    LocalGroups: ?*TOKEN_GROUPS,
    SourceContext: *TOKEN_SOURCE,
    ProfileBuffer: **c_void,
    ProfileBufferLength: *u32,
    LogonId: *LUID,
    Token: *HANDLE,
    Quotas: *QUOTA_LIMITS,
    SubStatus: *i32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "SspiCli" fn LsaLookupAuthenticationPackage(
    LsaHandle: HANDLE,
    PackageName: *STRING,
    AuthenticationPackage: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "SspiCli" fn LsaFreeReturnBuffer(
    Buffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "SspiCli" fn LsaCallAuthenticationPackage(
    LsaHandle: HANDLE,
    AuthenticationPackage: u32,
    ProtocolSubmitBuffer: [*]u8,
    SubmitBufferLength: u32,
    ProtocolReturnBuffer: ?*?*c_void,
    ReturnBufferLength: ?*u32,
    ProtocolStatus: ?*i32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "SspiCli" fn LsaDeregisterLogonProcess(
    LsaHandle: LsaHandle,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "SspiCli" fn LsaConnectUntrusted(
    LsaHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaFreeMemory(
    Buffer: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaClose(
    ObjectHandle: *c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "SspiCli" fn LsaEnumerateLogonSessions(
    LogonSessionCount: *u32,
    LogonSessionList: **LUID,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "SspiCli" fn LsaGetLogonSessionData(
    LogonId: *LUID,
    ppLogonSessionData: **SECURITY_LOGON_SESSION_DATA,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaOpenPolicy(
    SystemName: ?*UNICODE_STRING,
    ObjectAttributes: *OBJECT_ATTRIBUTES,
    DesiredAccess: u32,
    PolicyHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaSetCAPs(
    CAPDNs: ?[*]UNICODE_STRING,
    CAPDNCount: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaGetAppliedCAPIDs(
    SystemName: ?*UNICODE_STRING,
    CAPIDs: ***c_void,
    CAPIDCount: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaQueryCAPs(
    CAPIDs: ?[*]?*c_void,
    CAPIDCount: u32,
    CAPs: **CENTRAL_ACCESS_POLICY,
    CAPCount: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaQueryInformationPolicy(
    PolicyHandle: *c_void,
    InformationClass: POLICY_INFORMATION_CLASS,
    Buffer: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaSetInformationPolicy(
    PolicyHandle: *c_void,
    InformationClass: POLICY_INFORMATION_CLASS,
    Buffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaQueryDomainInformationPolicy(
    PolicyHandle: *c_void,
    InformationClass: POLICY_DOMAIN_INFORMATION_CLASS,
    Buffer: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaSetDomainInformationPolicy(
    PolicyHandle: *c_void,
    InformationClass: POLICY_DOMAIN_INFORMATION_CLASS,
    Buffer: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "SspiCli" fn LsaRegisterPolicyChangeNotification(
    InformationClass: POLICY_NOTIFICATION_INFORMATION_CLASS,
    NotificationEventHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "SspiCli" fn LsaUnregisterPolicyChangeNotification(
    InformationClass: POLICY_NOTIFICATION_INFORMATION_CLASS,
    NotificationEventHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaEnumerateTrustedDomains(
    PolicyHandle: *c_void,
    EnumerationContext: *u32,
    Buffer: **c_void,
    PreferedMaximumLength: u32,
    CountReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaLookupNames(
    PolicyHandle: *c_void,
    Count: u32,
    Names: *UNICODE_STRING,
    ReferencedDomains: **LSA_REFERENCED_DOMAIN_LIST,
    Sids: **LSA_TRANSLATED_SID,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaLookupNames2(
    PolicyHandle: *c_void,
    Flags: u32,
    Count: u32,
    Names: *UNICODE_STRING,
    ReferencedDomains: **LSA_REFERENCED_DOMAIN_LIST,
    Sids: **LSA_TRANSLATED_SID2,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaLookupSids(
    PolicyHandle: *c_void,
    Count: u32,
    Sids: **c_void,
    ReferencedDomains: **LSA_REFERENCED_DOMAIN_LIST,
    Names: **LSA_TRANSLATED_NAME,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaLookupSids2(
    PolicyHandle: *c_void,
    LookupOptions: u32,
    Count: u32,
    Sids: **c_void,
    ReferencedDomains: **LSA_REFERENCED_DOMAIN_LIST,
    Names: **LSA_TRANSLATED_NAME,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaEnumerateAccountsWithUserRight(
    PolicyHandle: *c_void,
    UserRight: ?*UNICODE_STRING,
    Buffer: **c_void,
    CountReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaEnumerateAccountRights(
    PolicyHandle: *c_void,
    AccountSid: *c_void,
    UserRights: **UNICODE_STRING,
    CountOfRights: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaAddAccountRights(
    PolicyHandle: *c_void,
    AccountSid: *c_void,
    UserRights: [*]UNICODE_STRING,
    CountOfRights: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaRemoveAccountRights(
    PolicyHandle: *c_void,
    AccountSid: *c_void,
    AllRights: u8,
    UserRights: ?[*]UNICODE_STRING,
    CountOfRights: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaOpenTrustedDomainByName(
    PolicyHandle: *c_void,
    TrustedDomainName: *UNICODE_STRING,
    DesiredAccess: u32,
    TrustedDomainHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaQueryTrustedDomainInfo(
    PolicyHandle: *c_void,
    TrustedDomainSid: *c_void,
    InformationClass: TRUSTED_INFORMATION_CLASS,
    Buffer: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaSetTrustedDomainInformation(
    PolicyHandle: *c_void,
    TrustedDomainSid: *c_void,
    InformationClass: TRUSTED_INFORMATION_CLASS,
    Buffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaDeleteTrustedDomain(
    PolicyHandle: *c_void,
    TrustedDomainSid: *c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaQueryTrustedDomainInfoByName(
    PolicyHandle: *c_void,
    TrustedDomainName: *UNICODE_STRING,
    InformationClass: TRUSTED_INFORMATION_CLASS,
    Buffer: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaSetTrustedDomainInfoByName(
    PolicyHandle: *c_void,
    TrustedDomainName: *UNICODE_STRING,
    InformationClass: TRUSTED_INFORMATION_CLASS,
    Buffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaEnumerateTrustedDomainsEx(
    PolicyHandle: *c_void,
    EnumerationContext: *u32,
    Buffer: **c_void,
    PreferedMaximumLength: u32,
    CountReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaCreateTrustedDomainEx(
    PolicyHandle: *c_void,
    TrustedDomainInformation: *TRUSTED_DOMAIN_INFORMATION_EX,
    AuthenticationInformation: *TRUSTED_DOMAIN_AUTH_INFORMATION,
    DesiredAccess: u32,
    TrustedDomainHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaQueryForestTrustInformation(
    PolicyHandle: *c_void,
    TrustedDomainName: *UNICODE_STRING,
    ForestTrustInfo: **LSA_FOREST_TRUST_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaSetForestTrustInformation(
    PolicyHandle: *c_void,
    TrustedDomainName: *UNICODE_STRING,
    ForestTrustInfo: *LSA_FOREST_TRUST_INFORMATION,
    CheckOnly: u8,
    CollisionInfo: **LSA_FOREST_TRUST_COLLISION_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaStorePrivateData(
    PolicyHandle: *c_void,
    KeyName: *UNICODE_STRING,
    PrivateData: ?*UNICODE_STRING,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaRetrievePrivateData(
    PolicyHandle: *c_void,
    KeyName: *UNICODE_STRING,
    PrivateData: **UNICODE_STRING,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn LsaNtStatusToWinError(
    Status: NTSTATUS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn SystemFunction036(
    RandomBuffer: [*]u8,
    RandomBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn SystemFunction040(
    Memory: [*]u8,
    MemorySize: u32,
    OptionFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn SystemFunction041(
    Memory: [*]u8,
    MemorySize: u32,
    OptionFlags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn AuditSetSystemPolicy(
    pAuditPolicy: [*]AUDIT_POLICY_INFORMATION,
    dwPolicyCount: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditSetPerUserPolicy(
    pSid: *const c_void,
    pAuditPolicy: [*]AUDIT_POLICY_INFORMATION,
    dwPolicyCount: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditQuerySystemPolicy(
    pSubCategoryGuids: [*]const Guid,
    dwPolicyCount: u32,
    ppAuditPolicy: **AUDIT_POLICY_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditQueryPerUserPolicy(
    pSid: *const c_void,
    pSubCategoryGuids: [*]const Guid,
    dwPolicyCount: u32,
    ppAuditPolicy: **AUDIT_POLICY_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditEnumeratePerUserPolicy(
    ppAuditSidArray: **POLICY_AUDIT_SID_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditComputeEffectivePolicyBySid(
    pSid: *const c_void,
    pSubCategoryGuids: [*]const Guid,
    dwPolicyCount: u32,
    ppAuditPolicy: **AUDIT_POLICY_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditComputeEffectivePolicyByToken(
    hTokenHandle: HANDLE,
    pSubCategoryGuids: [*]const Guid,
    dwPolicyCount: u32,
    ppAuditPolicy: **AUDIT_POLICY_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditEnumerateCategories(
    ppAuditCategoriesArray: **Guid,
    pdwCountReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditEnumerateSubCategories(
    pAuditCategoryGuid: ?*const Guid,
    bRetrieveAllSubCategories: u8,
    ppAuditSubCategoriesArray: **Guid,
    pdwCountReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditLookupCategoryNameW(
    pAuditCategoryGuid: *const Guid,
    ppszCategoryName: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditLookupCategoryNameA(
    pAuditCategoryGuid: *const Guid,
    ppszCategoryName: *PSTR,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditLookupSubCategoryNameW(
    pAuditSubCategoryGuid: *const Guid,
    ppszSubCategoryName: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditLookupSubCategoryNameA(
    pAuditSubCategoryGuid: *const Guid,
    ppszSubCategoryName: *PSTR,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditLookupCategoryIdFromCategoryGuid(
    pAuditCategoryGuid: *const Guid,
    pAuditCategoryId: *POLICY_AUDIT_EVENT_TYPE,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditLookupCategoryGuidFromCategoryId(
    AuditCategoryId: POLICY_AUDIT_EVENT_TYPE,
    pAuditCategoryGuid: *Guid,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditSetSecurity(
    SecurityInformation: u32,
    pSecurityDescriptor: *c_void,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditQuerySecurity(
    SecurityInformation: u32,
    ppSecurityDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditSetGlobalSaclW(
    ObjectTypeName: [*:0]const u16,
    Acl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditSetGlobalSaclA(
    ObjectTypeName: [*:0]const u8,
    Acl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditQueryGlobalSaclW(
    ObjectTypeName: [*:0]const u16,
    Acl: **ACL,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditQueryGlobalSaclA(
    ObjectTypeName: [*:0]const u8,
    Acl: **ACL,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn AuditFree(
    Buffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SspiCli" fn AcquireCredentialsHandleW(
    pszPrincipal: ?PWSTR,
    pszPackage: PWSTR,
    fCredentialUse: u32,
    pvLogonId: ?*c_void,
    pAuthData: ?*c_void,
    pGetKeyFn: ?SEC_GET_KEY_FN,
    pvGetKeyArgument: ?*c_void,
    phCredential: *SecHandle,
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn AcquireCredentialsHandleA(
    pszPrincipal: ?PSTR,
    pszPackage: PSTR,
    fCredentialUse: u32,
    pvLogonId: ?*c_void,
    pAuthData: ?*c_void,
    pGetKeyFn: ?SEC_GET_KEY_FN,
    pvGetKeyArgument: ?*c_void,
    phCredential: *SecHandle,
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn FreeCredentialsHandle(
    phCredential: *SecHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn AddCredentialsW(
    hCredentials: *SecHandle,
    pszPrincipal: ?PWSTR,
    pszPackage: PWSTR,
    fCredentialUse: u32,
    pAuthData: ?*c_void,
    pGetKeyFn: ?SEC_GET_KEY_FN,
    pvGetKeyArgument: ?*c_void,
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn AddCredentialsA(
    hCredentials: *SecHandle,
    pszPrincipal: ?PSTR,
    pszPackage: PSTR,
    fCredentialUse: u32,
    pAuthData: ?*c_void,
    pGetKeyFn: ?SEC_GET_KEY_FN,
    pvGetKeyArgument: ?*c_void,
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn ChangeAccountPasswordW(
    pszPackageName: *u16,
    pszDomainName: *u16,
    pszAccountName: *u16,
    pszOldPassword: *u16,
    pszNewPassword: *u16,
    bImpersonating: u8,
    dwReserved: u32,
    pOutput: *SecBufferDesc,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn ChangeAccountPasswordA(
    pszPackageName: *i8,
    pszDomainName: *i8,
    pszAccountName: *i8,
    pszOldPassword: *i8,
    pszNewPassword: *i8,
    bImpersonating: u8,
    dwReserved: u32,
    pOutput: *SecBufferDesc,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn InitializeSecurityContextW(
    phCredential: ?*SecHandle,
    phContext: ?*SecHandle,
    pszTargetName: ?*u16,
    fContextReq: u32,
    Reserved1: u32,
    TargetDataRep: u32,
    pInput: ?*SecBufferDesc,
    Reserved2: u32,
    phNewContext: ?*SecHandle,
    pOutput: ?*SecBufferDesc,
    pfContextAttr: *u32,
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn InitializeSecurityContextA(
    phCredential: ?*SecHandle,
    phContext: ?*SecHandle,
    pszTargetName: ?*i8,
    fContextReq: u32,
    Reserved1: u32,
    TargetDataRep: u32,
    pInput: ?*SecBufferDesc,
    Reserved2: u32,
    phNewContext: ?*SecHandle,
    pOutput: ?*SecBufferDesc,
    pfContextAttr: *u32,
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn AcceptSecurityContext(
    phCredential: ?*SecHandle,
    phContext: ?*SecHandle,
    pInput: ?*SecBufferDesc,
    fContextReq: u32,
    TargetDataRep: u32,
    phNewContext: ?*SecHandle,
    pOutput: ?*SecBufferDesc,
    pfContextAttr: *u32,
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn CompleteAuthToken(
    phContext: *SecHandle,
    pToken: *SecBufferDesc,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn ImpersonateSecurityContext(
    phContext: *SecHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn RevertSecurityContext(
    phContext: *SecHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn QuerySecurityContextToken(
    phContext: *SecHandle,
    Token: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn DeleteSecurityContext(
    phContext: *SecHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn ApplyControlToken(
    phContext: *SecHandle,
    pInput: *SecBufferDesc,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn QueryContextAttributesW(
    phContext: *SecHandle,
    ulAttribute: u32,
    pBuffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn QueryContextAttributesExW(
    phContext: *SecHandle,
    ulAttribute: u32,
    pBuffer: [*]u8,
    cbBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn QueryContextAttributesA(
    phContext: *SecHandle,
    ulAttribute: u32,
    pBuffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn QueryContextAttributesExA(
    phContext: *SecHandle,
    ulAttribute: u32,
    pBuffer: [*]u8,
    cbBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SetContextAttributesW(
    phContext: *SecHandle,
    ulAttribute: u32,
    pBuffer: [*]u8,
    cbBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SetContextAttributesA(
    phContext: *SecHandle,
    ulAttribute: u32,
    pBuffer: [*]u8,
    cbBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn QueryCredentialsAttributesW(
    phCredential: *SecHandle,
    ulAttribute: u32,
    pBuffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn QueryCredentialsAttributesExW(
    phCredential: *SecHandle,
    ulAttribute: u32,
    pBuffer: [*]u8,
    cbBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn QueryCredentialsAttributesA(
    phCredential: *SecHandle,
    ulAttribute: u32,
    pBuffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn QueryCredentialsAttributesExA(
    phCredential: *SecHandle,
    ulAttribute: u32,
    pBuffer: [*]u8,
    cbBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SetCredentialsAttributesW(
    phCredential: *SecHandle,
    ulAttribute: u32,
    pBuffer: [*]u8,
    cbBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SetCredentialsAttributesA(
    phCredential: *SecHandle,
    ulAttribute: u32,
    pBuffer: [*]u8,
    cbBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn FreeContextBuffer(
    pvContextBuffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn MakeSignature(
    phContext: *SecHandle,
    fQOP: u32,
    pMessage: *SecBufferDesc,
    MessageSeqNo: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn VerifySignature(
    phContext: *SecHandle,
    pMessage: *SecBufferDesc,
    MessageSeqNo: u32,
    pfQOP: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn EncryptMessage(
    phContext: *SecHandle,
    fQOP: u32,
    pMessage: *SecBufferDesc,
    MessageSeqNo: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn DecryptMessage(
    phContext: *SecHandle,
    pMessage: *SecBufferDesc,
    MessageSeqNo: u32,
    pfQOP: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn EnumerateSecurityPackagesW(
    pcPackages: *u32,
    ppPackageInfo: **SecPkgInfoW,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn EnumerateSecurityPackagesA(
    pcPackages: *u32,
    ppPackageInfo: **SecPkgInfoA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn QuerySecurityPackageInfoW(
    pszPackageName: PWSTR,
    ppPackageInfo: **SecPkgInfoW,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn QuerySecurityPackageInfoA(
    pszPackageName: PSTR,
    ppPackageInfo: **SecPkgInfoA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn ExportSecurityContext(
    phContext: *SecHandle,
    fFlags: u32,
    pPackedContext: *SecBuffer,
    pToken: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn ImportSecurityContextW(
    pszPackage: PWSTR,
    pPackedContext: *SecBuffer,
    Token: *c_void,
    phContext: *SecHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn ImportSecurityContextA(
    pszPackage: PSTR,
    pPackedContext: *SecBuffer,
    Token: *c_void,
    phContext: *SecHandle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn InitSecurityInterfaceA(
) callconv(@import("std").os.windows.WINAPI) *SecurityFunctionTableA;

pub extern "SspiCli" fn InitSecurityInterfaceW(
) callconv(@import("std").os.windows.WINAPI) *SecurityFunctionTableW;

pub extern "SspiCli" fn SaslEnumerateProfilesA(
    ProfileList: *PSTR,
    ProfileCount: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SaslEnumerateProfilesW(
    ProfileList: *PWSTR,
    ProfileCount: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SaslGetProfilePackageA(
    ProfileName: PSTR,
    PackageInfo: **SecPkgInfoA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SaslGetProfilePackageW(
    ProfileName: PWSTR,
    PackageInfo: **SecPkgInfoW,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SaslIdentifyPackageA(
    pInput: *SecBufferDesc,
    PackageInfo: **SecPkgInfoA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SaslIdentifyPackageW(
    pInput: *SecBufferDesc,
    PackageInfo: **SecPkgInfoW,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SaslInitializeSecurityContextW(
    phCredential: ?*SecHandle,
    phContext: ?*SecHandle,
    pszTargetName: ?PWSTR,
    fContextReq: u32,
    Reserved1: u32,
    TargetDataRep: u32,
    pInput: ?*SecBufferDesc,
    Reserved2: u32,
    phNewContext: ?*SecHandle,
    pOutput: ?*SecBufferDesc,
    pfContextAttr: *u32,
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SaslInitializeSecurityContextA(
    phCredential: ?*SecHandle,
    phContext: ?*SecHandle,
    pszTargetName: ?PSTR,
    fContextReq: u32,
    Reserved1: u32,
    TargetDataRep: u32,
    pInput: ?*SecBufferDesc,
    Reserved2: u32,
    phNewContext: ?*SecHandle,
    pOutput: ?*SecBufferDesc,
    pfContextAttr: *u32,
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SaslAcceptSecurityContext(
    phCredential: ?*SecHandle,
    phContext: ?*SecHandle,
    pInput: ?*SecBufferDesc,
    fContextReq: u32,
    TargetDataRep: u32,
    phNewContext: ?*SecHandle,
    pOutput: ?*SecBufferDesc,
    pfContextAttr: *u32,
    ptsExpiry: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SaslSetContextOption(
    ContextHandle: *SecHandle,
    Option: u32,
    Value: *c_void,
    Size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SaslGetContextOption(
    ContextHandle: *SecHandle,
    Option: u32,
    Value: *c_void,
    Size: u32,
    Needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "credui" fn SspiPromptForCredentialsW(
    pszTargetName: [*:0]const u16,
    pUiInfo: ?*c_void,
    dwAuthError: u32,
    pszPackage: [*:0]const u16,
    pInputAuthIdentity: ?*c_void,
    ppAuthIdentity: **c_void,
    pfSave: ?*i32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "credui" fn SspiPromptForCredentialsA(
    pszTargetName: [*:0]const u8,
    pUiInfo: ?*c_void,
    dwAuthError: u32,
    pszPackage: [*:0]const u8,
    pInputAuthIdentity: ?*c_void,
    ppAuthIdentity: **c_void,
    pfSave: ?*i32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SspiCli" fn SspiPrepareForCredRead(
    AuthIdentity: *c_void,
    pszTargetName: [*:0]const u16,
    pCredmanCredentialType: *u32,
    ppszCredmanTargetName: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SspiPrepareForCredWrite(
    AuthIdentity: *c_void,
    pszTargetName: ?[*:0]const u16,
    pCredmanCredentialType: *u32,
    ppszCredmanTargetName: *PWSTR,
    ppszCredmanUserName: *PWSTR,
    ppCredentialBlob: **u8,
    pCredentialBlobSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SspiEncryptAuthIdentity(
    AuthData: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SspiEncryptAuthIdentityEx(
    Options: u32,
    AuthData: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SspiDecryptAuthIdentity(
    EncryptedAuthData: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SspiDecryptAuthIdentityEx(
    Options: u32,
    EncryptedAuthData: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SspiIsAuthIdentityEncrypted(
    EncryptedAuthData: *c_void,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "SspiCli" fn SspiEncodeAuthIdentityAsStrings(
    pAuthIdentity: *c_void,
    ppszUserName: ?*?PWSTR,
    ppszDomainName: ?*?PWSTR,
    ppszPackedCredentialsString: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SspiValidateAuthIdentity(
    AuthData: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SspiCopyAuthIdentity(
    AuthData: *c_void,
    AuthDataCopy: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SspiFreeAuthIdentity(
    AuthData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SspiCli" fn SspiZeroAuthIdentity(
    AuthData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SspiCli" fn SspiLocalFree(
    DataBuffer: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SspiCli" fn SspiEncodeStringsAsAuthIdentity(
    pszUserName: ?[*:0]const u16,
    pszDomainName: ?[*:0]const u16,
    pszPackedCredentialsString: ?[*:0]const u16,
    ppAuthIdentity: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SspiCompareAuthIdentities(
    AuthIdentity1: ?*c_void,
    AuthIdentity2: ?*c_void,
    SameSuppliedUser: ?*u8,
    SameSuppliedIdentity: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SspiMarshalAuthIdentity(
    AuthIdentity: *c_void,
    AuthIdentityLength: *u32,
    AuthIdentityByteArray: **i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SspiUnmarshalAuthIdentity(
    AuthIdentityLength: u32,
    AuthIdentityByteArray: [*]i8,
    ppAuthIdentity: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "credui" fn SspiIsPromptingNeeded(
    ErrorOrNtStatus: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "SspiCli" fn SspiGetTargetHostName(
    pszTargetName: [*:0]const u16,
    pszHostName: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn SspiExcludePackage(
    AuthIdentity: ?*c_void,
    pszPackageName: [*:0]const u16,
    ppNewAuthIdentity: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn AddSecurityPackageA(
    pszPackageName: PSTR,
    pOptions: ?*SECURITY_PACKAGE_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn AddSecurityPackageW(
    pszPackageName: PWSTR,
    pOptions: ?*SECURITY_PACKAGE_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn DeleteSecurityPackageA(
    pszPackageName: PSTR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SspiCli" fn DeleteSecurityPackageW(
    pszPackageName: PWSTR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ADVAPI32" fn CredWriteW(
    Credential: *CREDENTIALW,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredWriteA(
    Credential: *CREDENTIALA,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredReadW(
    TargetName: [*:0]const u16,
    Type: u32,
    Flags: u32,
    Credential: **CREDENTIALW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredReadA(
    TargetName: [*:0]const u8,
    Type: u32,
    Flags: u32,
    Credential: **CREDENTIALA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredEnumerateW(
    Filter: ?[*:0]const u16,
    Flags: u32,
    Count: *u32,
    Credential: ***CREDENTIALW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredEnumerateA(
    Filter: ?[*:0]const u8,
    Flags: u32,
    Count: *u32,
    Credential: ***CREDENTIALA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredWriteDomainCredentialsW(
    TargetInfo: *CREDENTIAL_TARGET_INFORMATIONW,
    Credential: *CREDENTIALW,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredWriteDomainCredentialsA(
    TargetInfo: *CREDENTIAL_TARGET_INFORMATIONA,
    Credential: *CREDENTIALA,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredReadDomainCredentialsW(
    TargetInfo: *CREDENTIAL_TARGET_INFORMATIONW,
    Flags: u32,
    Count: *u32,
    Credential: ***CREDENTIALW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredReadDomainCredentialsA(
    TargetInfo: *CREDENTIAL_TARGET_INFORMATIONA,
    Flags: u32,
    Count: *u32,
    Credential: ***CREDENTIALA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredDeleteW(
    TargetName: [*:0]const u16,
    Type: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredDeleteA(
    TargetName: [*:0]const u8,
    Type: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredRenameW(
    OldTargetName: [*:0]const u16,
    NewTargetName: [*:0]const u16,
    Type: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredRenameA(
    OldTargetName: [*:0]const u8,
    NewTargetName: [*:0]const u8,
    Type: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredGetTargetInfoW(
    TargetName: [*:0]const u16,
    Flags: u32,
    TargetInfo: **CREDENTIAL_TARGET_INFORMATIONW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredGetTargetInfoA(
    TargetName: [*:0]const u8,
    Flags: u32,
    TargetInfo: **CREDENTIAL_TARGET_INFORMATIONA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredMarshalCredentialW(
    CredType: CRED_MARSHAL_TYPE,
    Credential: *c_void,
    MarshaledCredential: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredMarshalCredentialA(
    CredType: CRED_MARSHAL_TYPE,
    Credential: *c_void,
    MarshaledCredential: *PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredUnmarshalCredentialW(
    MarshaledCredential: [*:0]const u16,
    CredType: *CRED_MARSHAL_TYPE,
    Credential: **c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredUnmarshalCredentialA(
    MarshaledCredential: [*:0]const u8,
    CredType: *CRED_MARSHAL_TYPE,
    Credential: **c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredIsMarshaledCredentialW(
    MarshaledCredential: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredIsMarshaledCredentialA(
    MarshaledCredential: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "credui" fn CredUnPackAuthenticationBufferW(
    dwFlags: u32,
    pAuthBuffer: [*]u8,
    cbAuthBuffer: u32,
    pszUserName: ?[*:0]u16,
    pcchMaxUserName: *u32,
    pszDomainName: ?[*:0]u16,
    pcchMaxDomainName: ?*u32,
    pszPassword: ?[*:0]u16,
    pcchMaxPassword: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "credui" fn CredUnPackAuthenticationBufferA(
    dwFlags: u32,
    pAuthBuffer: [*]u8,
    cbAuthBuffer: u32,
    pszUserName: ?[*:0]u8,
    pcchlMaxUserName: *u32,
    pszDomainName: ?[*:0]u8,
    pcchMaxDomainName: ?*u32,
    pszPassword: ?[*:0]u8,
    pcchMaxPassword: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "credui" fn CredPackAuthenticationBufferW(
    dwFlags: u32,
    pszUserName: PWSTR,
    pszPassword: PWSTR,
    pPackedCredentials: ?[*:0]u8,
    pcbPackedCredentials: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "credui" fn CredPackAuthenticationBufferA(
    dwFlags: u32,
    pszUserName: PSTR,
    pszPassword: PSTR,
    pPackedCredentials: ?[*:0]u8,
    pcbPackedCredentials: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredProtectW(
    fAsSelf: BOOL,
    pszCredentials: [*:0]u16,
    cchCredentials: u32,
    pszProtectedCredentials: [*:0]u16,
    pcchMaxChars: *u32,
    ProtectionType: ?*CRED_PROTECTION_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredProtectA(
    fAsSelf: BOOL,
    pszCredentials: [*:0]u8,
    cchCredentials: u32,
    pszProtectedCredentials: [*:0]u8,
    pcchMaxChars: *u32,
    ProtectionType: ?*CRED_PROTECTION_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredUnprotectW(
    fAsSelf: BOOL,
    pszProtectedCredentials: [*:0]u16,
    cchProtectedCredentials: u32,
    pszCredentials: ?[*:0]u16,
    pcchMaxChars: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredUnprotectA(
    fAsSelf: BOOL,
    pszProtectedCredentials: [*:0]u8,
    cchProtectedCredentials: u32,
    pszCredentials: ?[*:0]u8,
    pcchMaxChars: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredIsProtectedW(
    pszProtectedCredentials: PWSTR,
    pProtectionType: *CRED_PROTECTION_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredIsProtectedA(
    pszProtectedCredentials: PSTR,
    pProtectionType: *CRED_PROTECTION_TYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredFindBestCredentialW(
    TargetName: [*:0]const u16,
    Type: u32,
    Flags: u32,
    Credential: **CREDENTIALW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredFindBestCredentialA(
    TargetName: [*:0]const u8,
    Type: u32,
    Flags: u32,
    Credential: **CREDENTIALA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredGetSessionTypes(
    MaximumPersistCount: u32,
    MaximumPersist: [*]u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn CredFree(
    Buffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "credui" fn CredUIPromptForCredentialsW(
    pUiInfo: ?*CREDUI_INFOW,
    pszTargetName: ?[*:0]const u16,
    pContext: *SecHandle,
    dwAuthError: u32,
    pszUserName: [*:0]u16,
    ulUserNameBufferSize: u32,
    pszPassword: [*:0]u16,
    ulPasswordBufferSize: u32,
    save: ?*BOOL,
    dwFlags: CREDUI_FLAGS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "credui" fn CredUIPromptForCredentialsA(
    pUiInfo: ?*CREDUI_INFOA,
    pszTargetName: ?[*:0]const u8,
    pContext: *SecHandle,
    dwAuthError: u32,
    pszUserName: [*:0]u8,
    ulUserNameBufferSize: u32,
    pszPassword: [*:0]u8,
    ulPasswordBufferSize: u32,
    save: ?*BOOL,
    dwFlags: CREDUI_FLAGS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "credui" fn CredUIPromptForWindowsCredentialsW(
    pUiInfo: ?*CREDUI_INFOW,
    dwAuthError: u32,
    pulAuthPackage: *u32,
    pvInAuthBuffer: ?[*]const u8,
    ulInAuthBufferSize: u32,
    ppvOutAuthBuffer: [*]*c_void,
    pulOutAuthBufferSize: *u32,
    pfSave: ?*BOOL,
    dwFlags: CREDUIWIN,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "credui" fn CredUIPromptForWindowsCredentialsA(
    pUiInfo: ?*CREDUI_INFOA,
    dwAuthError: u32,
    pulAuthPackage: *u32,
    pvInAuthBuffer: ?[*]const u8,
    ulInAuthBufferSize: u32,
    ppvOutAuthBuffer: [*]*c_void,
    pulOutAuthBufferSize: *u32,
    pfSave: ?*BOOL,
    dwFlags: CREDUIWIN,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "credui" fn CredUIParseUserNameW(
    UserName: [*:0]const u16,
    user: [*:0]u16,
    userBufferSize: u32,
    domain: [*:0]u16,
    domainBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "credui" fn CredUIParseUserNameA(
    userName: [*:0]const u8,
    user: [*]i8,
    userBufferSize: u32,
    domain: [*]i8,
    domainBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "credui" fn CredUICmdLinePromptForCredentialsW(
    pszTargetName: ?[*:0]const u16,
    pContext: *SecHandle,
    dwAuthError: u32,
    UserName: [*:0]u16,
    ulUserBufferSize: u32,
    pszPassword: [*:0]u16,
    ulPasswordBufferSize: u32,
    pfSave: ?*BOOL,
    dwFlags: CREDUI_FLAGS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "credui" fn CredUICmdLinePromptForCredentialsA(
    pszTargetName: ?[*:0]const u8,
    pContext: *SecHandle,
    dwAuthError: u32,
    UserName: [*:0]u8,
    ulUserBufferSize: u32,
    pszPassword: [*:0]u8,
    ulPasswordBufferSize: u32,
    pfSave: ?*BOOL,
    dwFlags: CREDUI_FLAGS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "credui" fn CredUIConfirmCredentialsW(
    pszTargetName: [*:0]const u16,
    bConfirm: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "credui" fn CredUIConfirmCredentialsA(
    pszTargetName: [*:0]const u8,
    bConfirm: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "credui" fn CredUIStoreSSOCredW(
    pszRealm: ?[*:0]const u16,
    pszUsername: [*:0]const u16,
    pszPassword: [*:0]const u16,
    bPersist: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "credui" fn CredUIReadSSOCredW(
    pszRealm: ?[*:0]const u16,
    ppszUsername: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SECUR32" fn CredMarshalTargetInfo(
    InTargetInfo: *CREDENTIAL_TARGET_INFORMATIONW,
    Buffer: **u16,
    BufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "SECUR32" fn CredUnmarshalTargetInfo(
    Buffer: [*:0]u16,
    BufferSize: u32,
    RetTargetInfo: ?*?*CREDENTIAL_TARGET_INFORMATIONW,
    RetActualSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "SCHANNEL" fn SslEmptyCacheA(
    pszTargetName: PSTR,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SCHANNEL" fn SslEmptyCacheW(
    pszTargetName: PWSTR,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SCHANNEL" fn SslGenerateRandomBits(
    pRandomData: *u8,
    cRandomData: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SCHANNEL" fn SslCrackCertificate(
    pbCertificate: *u8,
    cbCertificate: u32,
    dwFlags: u32,
    ppCertificate: **X509Certificate,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SCHANNEL" fn SslFreeCertificate(
    pCertificate: *X509Certificate,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SCHANNEL" fn SslGetMaximumKeySize(
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SCHANNEL" fn SslGetServerIdentity(
    ClientHello: [*:0]u8,
    ClientHelloSize: u32,
    ServerIdentity: **u8,
    ServerIdentitySize: *u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SCHANNEL" fn SslGetExtensions(
    clientHello: [*:0]const u8,
    clientHelloByteSize: u32,
    genericExtensions: [*]SCH_EXTENSION_DATA,
    genericExtensionsCount: u8,
    bytesToRead: *u32,
    flags: SchGetExtensionsOptions,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KeyCredMgr" fn KeyCredentialManagerGetOperationErrorStates(
    keyCredentialManagerOperationType: KeyCredentialManagerOperationType,
    isReady: *BOOL,
    keyCredentialManagerOperationErrorStates: *KeyCredentialManagerOperationErrorStates,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "KeyCredMgr" fn KeyCredentialManagerShowUIOperation(
    hWndOwner: HWND,
    keyCredentialManagerOperationType: KeyCredentialManagerOperationType,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "KeyCredMgr" fn KeyCredentialManagerGetInformation(
    keyCredentialManagerInfo: **KeyCredentialManagerInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "KeyCredMgr" fn KeyCredentialManagerFreeInformation(
    keyCredentialManagerInfo: *KeyCredentialManagerInfo,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "davclnt" fn NPAddConnection(
    lpNetResource: *NETRESOURCEW,
    lpPassword: ?PWSTR,
    lpUserName: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "davclnt" fn NPAddConnection3(
    hwndOwner: HWND,
    lpNetResource: *NETRESOURCEW,
    lpPassword: ?PWSTR,
    lpUserName: ?PWSTR,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NTLANMAN" fn NPAddConnection4(
    hwndOwner: HWND,
    lpNetResource: *NETRESOURCEW,
    lpAuthBuffer: ?[*]u8,
    cbAuthBuffer: u32,
    dwFlags: u32,
    lpUseOptions: ?[*:0]u8,
    cbUseOptions: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "davclnt" fn NPCancelConnection(
    lpName: PWSTR,
    fForce: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "davclnt" fn NPGetConnection(
    lpLocalName: PWSTR,
    lpRemoteName: ?[*:0]u16,
    lpnBufferLen: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NTLANMAN" fn NPGetConnection3(
    lpLocalName: [*:0]const u16,
    dwLevel: u32,
    lpBuffer: [*]u8,
    lpBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "davclnt" fn NPGetUniversalName(
    lpLocalPath: [*:0]const u16,
    dwInfoLevel: u32,
    lpBuffer: [*]u8,
    lpBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NTLANMAN" fn NPGetConnectionPerformance(
    lpRemoteName: [*:0]const u16,
    lpNetConnectInfo: *NETCONNECTINFOSTRUCT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "davclnt" fn NPOpenEnum(
    dwScope: u32,
    dwType: u32,
    dwUsage: u32,
    lpNetResource: ?*NETRESOURCEW,
    lphEnum: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "davclnt" fn NPEnumResource(
    hEnum: HANDLE,
    lpcCount: *u32,
    lpBuffer: [*]u8,
    lpBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "davclnt" fn NPCloseEnum(
    hEnum: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "davclnt" fn NPGetCaps(
    ndex: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "davclnt" fn NPGetUser(
    lpName: PWSTR,
    lpUserName: [*:0]u16,
    lpnBufferLen: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NTLANMAN" fn NPGetPersistentUseOptionsForConnection(
    lpRemotePath: PWSTR,
    lpReadUseOptions: ?[*:0]u8,
    cbReadUseOptions: u32,
    lpWriteUseOptions: [*:0]u8,
    lpSizeWriteUseOptions: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "davclnt" fn NPGetResourceParent(
    lpNetResource: *NETRESOURCEW,
    lpBuffer: [*]u8,
    lpBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "davclnt" fn NPGetResourceInformation(
    lpNetResource: *NETRESOURCEW,
    lpBuffer: [*]u8,
    lpBufferSize: *u32,
    lplpSystem: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "davclnt" fn NPFormatNetworkName(
    lpRemoteName: PWSTR,
    lpFormattedName: [*:0]u16,
    lpnLength: *u32,
    dwFlags: u32,
    dwAveCharPerLine: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MPR" fn WNetSetLastErrorA(
    err: u32,
    lpError: PSTR,
    lpProviders: PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MPR" fn WNetSetLastErrorW(
    err: u32,
    lpError: PWSTR,
    lpProviders: PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "certpoleng" fn PstGetTrustAnchors(
    pTargetName: *UNICODE_STRING,
    cCriteria: u32,
    rgpCriteria: ?[*]CERT_SELECT_CRITERIA,
    ppTrustedIssuers: **SecPkgContext_IssuerListInfoEx,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "certpoleng" fn PstGetTrustAnchorsEx(
    pTargetName: *UNICODE_STRING,
    cCriteria: u32,
    rgpCriteria: ?[*]CERT_SELECT_CRITERIA,
    pCertContext: ?*CERT_CONTEXT,
    ppTrustedIssuers: **SecPkgContext_IssuerListInfoEx,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "certpoleng" fn PstGetCertificateChain(
    pCert: *CERT_CONTEXT,
    pTrustedIssuers: *SecPkgContext_IssuerListInfoEx,
    ppCertChainContext: **CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "certpoleng" fn PstGetCertificates(
    pTargetName: *UNICODE_STRING,
    cCriteria: u32,
    rgpCriteria: ?[*]CERT_SELECT_CRITERIA,
    bIsClient: BOOL,
    pdwCertChainContextCount: *u32,
    ppCertChainContexts: ***CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "certpoleng" fn PstAcquirePrivateKey(
    pCert: *CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "certpoleng" fn PstValidate(
    pTargetName: ?*UNICODE_STRING,
    bIsClient: BOOL,
    pRequestedIssuancePolicy: ?*CERT_USAGE_MATCH,
    phAdditionalCertStore: ?*?*c_void,
    pCert: *CERT_CONTEXT,
    pProvGUID: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "certpoleng" fn PstMapCertificate(
    pCert: *CERT_CONTEXT,
    pTokenInformationType: *LSA_TOKEN_INFORMATION_TYPE,
    ppTokenInformation: **c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "certpoleng" fn PstGetUserNameForCertificate(
    pCertContext: *CERT_CONTEXT,
    UserName: *UNICODE_STRING,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "SAS" fn SendSAS(
    AsUser: BOOL,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "AUTHZ" fn AuthzAccessCheck(
    Flags: u32,
    hAuthzClientContext: *AUTHZ_CLIENT_CONTEXT_HANDLE__,
    pRequest: *AUTHZ_ACCESS_REQUEST,
    hAuditEvent: ?*AUTHZ_AUDIT_EVENT_HANDLE__,
    pSecurityDescriptor: *c_void,
    OptionalSecurityDescriptorArray: ?[*]?*c_void,
    OptionalSecurityDescriptorCount: u32,
    pReply: *AUTHZ_ACCESS_REPLY,
    phAccessCheckResults: ?*?*AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzCachedAccessCheck(
    Flags: u32,
    hAccessCheckResults: *AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__,
    pRequest: *AUTHZ_ACCESS_REQUEST,
    hAuditEvent: ?*AUTHZ_AUDIT_EVENT_HANDLE__,
    pReply: *AUTHZ_ACCESS_REPLY,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzOpenObjectAudit(
    Flags: u32,
    hAuthzClientContext: *AUTHZ_CLIENT_CONTEXT_HANDLE__,
    pRequest: *AUTHZ_ACCESS_REQUEST,
    hAuditEvent: *AUTHZ_AUDIT_EVENT_HANDLE__,
    pSecurityDescriptor: *c_void,
    OptionalSecurityDescriptorArray: ?[*]?*c_void,
    OptionalSecurityDescriptorCount: u32,
    pReply: *AUTHZ_ACCESS_REPLY,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzFreeHandle(
    hAccessCheckResults: *AUTHZ_ACCESS_CHECK_RESULTS_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzInitializeResourceManager(
    Flags: u32,
    pfnDynamicAccessCheck: ?PFN_AUTHZ_DYNAMIC_ACCESS_CHECK,
    pfnComputeDynamicGroups: ?PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS,
    pfnFreeDynamicGroups: ?PFN_AUTHZ_FREE_DYNAMIC_GROUPS,
    szResourceManagerName: ?[*:0]const u16,
    phAuthzResourceManager: **AUTHZ_RESOURCE_MANAGER_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzInitializeResourceManagerEx(
    Flags: u32,
    pAuthzInitInfo: ?*AUTHZ_INIT_INFO,
    phAuthzResourceManager: **AUTHZ_RESOURCE_MANAGER_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzInitializeRemoteResourceManager(
    pRpcInitInfo: *AUTHZ_RPC_INIT_INFO_CLIENT,
    phAuthzResourceManager: **AUTHZ_RESOURCE_MANAGER_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzFreeResourceManager(
    hAuthzResourceManager: *AUTHZ_RESOURCE_MANAGER_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzInitializeContextFromToken(
    Flags: u32,
    TokenHandle: HANDLE,
    hAuthzResourceManager: *AUTHZ_RESOURCE_MANAGER_HANDLE__,
    pExpirationTime: ?*LARGE_INTEGER,
    Identifier: LUID,
    DynamicGroupArgs: ?*c_void,
    phAuthzClientContext: **AUTHZ_CLIENT_CONTEXT_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzInitializeContextFromSid(
    Flags: u32,
    UserSid: *c_void,
    hAuthzResourceManager: *AUTHZ_RESOURCE_MANAGER_HANDLE__,
    pExpirationTime: ?*LARGE_INTEGER,
    Identifier: LUID,
    DynamicGroupArgs: ?*c_void,
    phAuthzClientContext: **AUTHZ_CLIENT_CONTEXT_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzInitializeContextFromAuthzContext(
    Flags: u32,
    hAuthzClientContext: *AUTHZ_CLIENT_CONTEXT_HANDLE__,
    pExpirationTime: ?*LARGE_INTEGER,
    Identifier: LUID,
    DynamicGroupArgs: *c_void,
    phNewAuthzClientContext: **AUTHZ_CLIENT_CONTEXT_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzInitializeCompoundContext(
    UserContext: *AUTHZ_CLIENT_CONTEXT_HANDLE__,
    DeviceContext: *AUTHZ_CLIENT_CONTEXT_HANDLE__,
    phCompoundContext: **AUTHZ_CLIENT_CONTEXT_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzAddSidsToContext(
    hAuthzClientContext: *AUTHZ_CLIENT_CONTEXT_HANDLE__,
    Sids: ?*SID_AND_ATTRIBUTES,
    SidCount: u32,
    RestrictedSids: ?*SID_AND_ATTRIBUTES,
    RestrictedSidCount: u32,
    phNewAuthzClientContext: **AUTHZ_CLIENT_CONTEXT_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzModifySecurityAttributes(
    hAuthzClientContext: *AUTHZ_CLIENT_CONTEXT_HANDLE__,
    pOperations: *AUTHZ_SECURITY_ATTRIBUTE_OPERATION,
    pAttributes: ?*AUTHZ_SECURITY_ATTRIBUTES_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzModifyClaims(
    hAuthzClientContext: *AUTHZ_CLIENT_CONTEXT_HANDLE__,
    ClaimClass: AUTHZ_CONTEXT_INFORMATION_CLASS,
    pClaimOperations: *AUTHZ_SECURITY_ATTRIBUTE_OPERATION,
    pClaims: ?*AUTHZ_SECURITY_ATTRIBUTES_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzModifySids(
    hAuthzClientContext: *AUTHZ_CLIENT_CONTEXT_HANDLE__,
    SidClass: AUTHZ_CONTEXT_INFORMATION_CLASS,
    pSidOperations: *AUTHZ_SID_OPERATION,
    pSids: ?*TOKEN_GROUPS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzSetAppContainerInformation(
    hAuthzClientContext: *AUTHZ_CLIENT_CONTEXT_HANDLE__,
    pAppContainerSid: *c_void,
    CapabilityCount: u32,
    pCapabilitySids: ?[*]SID_AND_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzGetInformationFromContext(
    hAuthzClientContext: *AUTHZ_CLIENT_CONTEXT_HANDLE__,
    InfoClass: AUTHZ_CONTEXT_INFORMATION_CLASS,
    BufferSize: u32,
    pSizeRequired: *u32,
    Buffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzFreeContext(
    hAuthzClientContext: *AUTHZ_CLIENT_CONTEXT_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzInitializeObjectAccessAuditEvent(
    Flags: u32,
    hAuditEventType: *AUTHZ_AUDIT_EVENT_TYPE_HANDLE__,
    szOperationType: PWSTR,
    szObjectType: PWSTR,
    szObjectName: PWSTR,
    szAdditionalInfo: PWSTR,
    phAuditEvent: **AUTHZ_AUDIT_EVENT_HANDLE__,
    dwAdditionalParameterCount: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzInitializeObjectAccessAuditEvent2(
    Flags: u32,
    hAuditEventType: *AUTHZ_AUDIT_EVENT_TYPE_HANDLE__,
    szOperationType: PWSTR,
    szObjectType: PWSTR,
    szObjectName: PWSTR,
    szAdditionalInfo: PWSTR,
    szAdditionalInfo2: PWSTR,
    phAuditEvent: **AUTHZ_AUDIT_EVENT_HANDLE__,
    dwAdditionalParameterCount: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzFreeAuditEvent(
    hAuditEvent: *AUTHZ_AUDIT_EVENT_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzEvaluateSacl(
    AuthzClientContext: *AUTHZ_CLIENT_CONTEXT_HANDLE__,
    pRequest: *AUTHZ_ACCESS_REQUEST,
    Sacl: *ACL,
    GrantedAccess: u32,
    AccessGranted: BOOL,
    pbGenerateAudit: *BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzInstallSecurityEventSource(
    dwFlags: u32,
    pRegistration: *AUTHZ_SOURCE_SCHEMA_REGISTRATION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzUninstallSecurityEventSource(
    dwFlags: u32,
    szEventSourceName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzEnumerateSecurityEventSources(
    dwFlags: u32,
    Buffer: *AUTHZ_SOURCE_SCHEMA_REGISTRATION,
    pdwCount: *u32,
    pdwLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzRegisterSecurityEventSource(
    dwFlags: u32,
    szEventSourceName: [*:0]const u16,
    phEventProvider: **AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzUnregisterSecurityEventSource(
    dwFlags: u32,
    phEventProvider: **AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzReportSecurityEvent(
    dwFlags: u32,
    hEventProvider: *AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__,
    dwAuditId: u32,
    pUserSid: ?*c_void,
    dwCount: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzReportSecurityEventFromParams(
    dwFlags: u32,
    hEventProvider: *AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE__,
    dwAuditId: u32,
    pUserSid: ?*c_void,
    pParams: *AUDIT_PARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzRegisterCapChangeNotification(
    phCapChangeSubscription: **AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__,
    pfnCapChangeCallback: LPTHREAD_START_ROUTINE,
    pCallbackContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzUnregisterCapChangeNotification(
    hCapChangeSubscription: *AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "AUTHZ" fn AuthzFreeCentralAccessPolicyCache(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ACLUI" fn CreateSecurityPage(
    psi: *ISecurityInformation,
) callconv(@import("std").os.windows.WINAPI) HPROPSHEETPAGE;

pub extern "ACLUI" fn EditSecurity(
    hwndOwner: HWND,
    psi: *ISecurityInformation,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ACLUI" fn EditSecurityAdvanced(
    hwndOwner: HWND,
    psi: *ISecurityInformation,
    uSIPage: SI_PAGE_TYPE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "ADVAPI32" fn SetEntriesInAclA(
    cCountOfExplicitEntries: u32,
    pListOfExplicitEntries: ?[*]EXPLICIT_ACCESS_A,
    OldAcl: ?*ACL,
    NewAcl: **ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn SetEntriesInAclW(
    cCountOfExplicitEntries: u32,
    pListOfExplicitEntries: ?[*]EXPLICIT_ACCESS_W,
    OldAcl: ?*ACL,
    NewAcl: **ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn GetExplicitEntriesFromAclA(
    pacl: *ACL,
    pcCountOfExplicitEntries: *u32,
    pListOfExplicitEntries: **EXPLICIT_ACCESS_A,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn GetExplicitEntriesFromAclW(
    pacl: *ACL,
    pcCountOfExplicitEntries: *u32,
    pListOfExplicitEntries: **EXPLICIT_ACCESS_W,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn GetEffectiveRightsFromAclA(
    pacl: *ACL,
    pTrustee: *TRUSTEE_A,
    pAccessRights: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn GetEffectiveRightsFromAclW(
    pacl: *ACL,
    pTrustee: *TRUSTEE_W,
    pAccessRights: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn GetAuditedPermissionsFromAclA(
    pacl: *ACL,
    pTrustee: *TRUSTEE_A,
    pSuccessfulAuditedRights: *u32,
    pFailedAuditRights: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn GetAuditedPermissionsFromAclW(
    pacl: *ACL,
    pTrustee: *TRUSTEE_W,
    pSuccessfulAuditedRights: *u32,
    pFailedAuditRights: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn GetNamedSecurityInfoA(
    pObjectName: [*:0]const u8,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    ppsidOwner: ?*?*c_void,
    ppsidGroup: ?*?*c_void,
    ppDacl: ?*?*ACL,
    ppSacl: ?*?*ACL,
    ppSecurityDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn GetNamedSecurityInfoW(
    pObjectName: [*:0]const u16,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    ppsidOwner: ?*?*c_void,
    ppsidGroup: ?*?*c_void,
    ppDacl: ?*?*ACL,
    ppSacl: ?*?*ACL,
    ppSecurityDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn GetSecurityInfo(
    handle: HANDLE,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    ppsidOwner: ?*?*c_void,
    ppsidGroup: ?*?*c_void,
    ppDacl: ?*?*ACL,
    ppSacl: ?*?*ACL,
    ppSecurityDescriptor: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn SetNamedSecurityInfoA(
    pObjectName: PSTR,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    psidOwner: ?*c_void,
    psidGroup: ?*c_void,
    pDacl: ?*ACL,
    pSacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn SetNamedSecurityInfoW(
    pObjectName: PWSTR,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    psidOwner: ?*c_void,
    psidGroup: ?*c_void,
    pDacl: ?*ACL,
    pSacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn SetSecurityInfo(
    handle: HANDLE,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    psidOwner: ?*c_void,
    psidGroup: ?*c_void,
    pDacl: ?*ACL,
    pSacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn GetInheritanceSourceA(
    pObjectName: PSTR,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    Container: BOOL,
    pObjectClassGuids: ?[*]?*Guid,
    GuidCount: u32,
    pAcl: *ACL,
    pfnArray: ?*_FN_OBJECT_MGR_FUNCTIONS,
    pGenericMapping: *GENERIC_MAPPING,
    pInheritArray: *INHERITED_FROMA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn GetInheritanceSourceW(
    pObjectName: PWSTR,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    Container: BOOL,
    pObjectClassGuids: ?[*]?*Guid,
    GuidCount: u32,
    pAcl: *ACL,
    pfnArray: ?*_FN_OBJECT_MGR_FUNCTIONS,
    pGenericMapping: *GENERIC_MAPPING,
    pInheritArray: *INHERITED_FROMW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn FreeInheritedFromArray(
    pInheritArray: [*]INHERITED_FROMW,
    AceCnt: u16,
    pfnArray: ?*_FN_OBJECT_MGR_FUNCTIONS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn TreeResetNamedSecurityInfoA(
    pObjectName: PSTR,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    pOwner: ?*c_void,
    pGroup: ?*c_void,
    pDacl: ?*ACL,
    pSacl: ?*ACL,
    KeepExplicit: BOOL,
    fnProgress: ?FN_PROGRESS,
    ProgressInvokeSetting: PROG_INVOKE_SETTING,
    Args: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn TreeResetNamedSecurityInfoW(
    pObjectName: PWSTR,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    pOwner: ?*c_void,
    pGroup: ?*c_void,
    pDacl: ?*ACL,
    pSacl: ?*ACL,
    KeepExplicit: BOOL,
    fnProgress: ?FN_PROGRESS,
    ProgressInvokeSetting: PROG_INVOKE_SETTING,
    Args: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn TreeSetNamedSecurityInfoA(
    pObjectName: PSTR,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    pOwner: ?*c_void,
    pGroup: ?*c_void,
    pDacl: ?*ACL,
    pSacl: ?*ACL,
    dwAction: u32,
    fnProgress: ?FN_PROGRESS,
    ProgressInvokeSetting: PROG_INVOKE_SETTING,
    Args: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn TreeSetNamedSecurityInfoW(
    pObjectName: PWSTR,
    ObjectType: SE_OBJECT_TYPE,
    SecurityInfo: u32,
    pOwner: ?*c_void,
    pGroup: ?*c_void,
    pDacl: ?*ACL,
    pSacl: ?*ACL,
    dwAction: u32,
    fnProgress: ?FN_PROGRESS,
    ProgressInvokeSetting: PROG_INVOKE_SETTING,
    Args: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn BuildSecurityDescriptorA(
    pOwner: ?*TRUSTEE_A,
    pGroup: ?*TRUSTEE_A,
    cCountOfAccessEntries: u32,
    pListOfAccessEntries: ?[*]EXPLICIT_ACCESS_A,
    cCountOfAuditEntries: u32,
    pListOfAuditEntries: ?[*]EXPLICIT_ACCESS_A,
    pOldSD: ?*c_void,
    pSizeNewSD: *u32,
    pNewSD: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn BuildSecurityDescriptorW(
    pOwner: ?*TRUSTEE_W,
    pGroup: ?*TRUSTEE_W,
    cCountOfAccessEntries: u32,
    pListOfAccessEntries: ?[*]EXPLICIT_ACCESS_W,
    cCountOfAuditEntries: u32,
    pListOfAuditEntries: ?[*]EXPLICIT_ACCESS_W,
    pOldSD: ?*c_void,
    pSizeNewSD: *u32,
    pNewSD: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn LookupSecurityDescriptorPartsA(
    ppOwner: ?*?*TRUSTEE_A,
    ppGroup: ?*?*TRUSTEE_A,
    pcCountOfAccessEntries: ?*u32,
    ppListOfAccessEntries: ?*?*EXPLICIT_ACCESS_A,
    pcCountOfAuditEntries: ?*u32,
    ppListOfAuditEntries: ?*?*EXPLICIT_ACCESS_A,
    pSD: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn LookupSecurityDescriptorPartsW(
    ppOwner: ?*?*TRUSTEE_W,
    ppGroup: ?*?*TRUSTEE_W,
    pcCountOfAccessEntries: ?*u32,
    ppListOfAccessEntries: ?*?*EXPLICIT_ACCESS_W,
    pcCountOfAuditEntries: ?*u32,
    ppListOfAuditEntries: ?*?*EXPLICIT_ACCESS_W,
    pSD: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn BuildExplicitAccessWithNameA(
    pExplicitAccess: *EXPLICIT_ACCESS_A,
    pTrusteeName: ?PSTR,
    AccessPermissions: u32,
    AccessMode: ACCESS_MODE,
    Inheritance: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ADVAPI32" fn BuildExplicitAccessWithNameW(
    pExplicitAccess: *EXPLICIT_ACCESS_W,
    pTrusteeName: ?PWSTR,
    AccessPermissions: u32,
    AccessMode: ACCESS_MODE,
    Inheritance: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ADVAPI32" fn BuildImpersonateExplicitAccessWithNameA(
    pExplicitAccess: *EXPLICIT_ACCESS_A,
    pTrusteeName: ?PSTR,
    pTrustee: ?*TRUSTEE_A,
    AccessPermissions: u32,
    AccessMode: ACCESS_MODE,
    Inheritance: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ADVAPI32" fn BuildImpersonateExplicitAccessWithNameW(
    pExplicitAccess: *EXPLICIT_ACCESS_W,
    pTrusteeName: ?PWSTR,
    pTrustee: ?*TRUSTEE_W,
    AccessPermissions: u32,
    AccessMode: ACCESS_MODE,
    Inheritance: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ADVAPI32" fn BuildTrusteeWithNameA(
    pTrustee: *TRUSTEE_A,
    pName: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ADVAPI32" fn BuildTrusteeWithNameW(
    pTrustee: *TRUSTEE_W,
    pName: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ADVAPI32" fn BuildImpersonateTrusteeA(
    pTrustee: *TRUSTEE_A,
    pImpersonateTrustee: ?*TRUSTEE_A,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ADVAPI32" fn BuildImpersonateTrusteeW(
    pTrustee: *TRUSTEE_W,
    pImpersonateTrustee: ?*TRUSTEE_W,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ADVAPI32" fn BuildTrusteeWithSidA(
    pTrustee: *TRUSTEE_A,
    pSid: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ADVAPI32" fn BuildTrusteeWithSidW(
    pTrustee: *TRUSTEE_W,
    pSid: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ADVAPI32" fn BuildTrusteeWithObjectsAndSidA(
    pTrustee: *TRUSTEE_A,
    pObjSid: ?*OBJECTS_AND_SID,
    pObjectGuid: ?*Guid,
    pInheritedObjectGuid: ?*Guid,
    pSid: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ADVAPI32" fn BuildTrusteeWithObjectsAndSidW(
    pTrustee: *TRUSTEE_W,
    pObjSid: ?*OBJECTS_AND_SID,
    pObjectGuid: ?*Guid,
    pInheritedObjectGuid: ?*Guid,
    pSid: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ADVAPI32" fn BuildTrusteeWithObjectsAndNameA(
    pTrustee: *TRUSTEE_A,
    pObjName: ?*OBJECTS_AND_NAME_A,
    ObjectType: SE_OBJECT_TYPE,
    ObjectTypeName: ?PSTR,
    InheritedObjectTypeName: ?PSTR,
    Name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ADVAPI32" fn BuildTrusteeWithObjectsAndNameW(
    pTrustee: *TRUSTEE_W,
    pObjName: ?*OBJECTS_AND_NAME_W,
    ObjectType: SE_OBJECT_TYPE,
    ObjectTypeName: ?PWSTR,
    InheritedObjectTypeName: ?PWSTR,
    Name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ADVAPI32" fn GetTrusteeNameA(
    pTrustee: *TRUSTEE_A,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "ADVAPI32" fn GetTrusteeNameW(
    pTrustee: *TRUSTEE_W,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "ADVAPI32" fn GetTrusteeTypeA(
    pTrustee: ?*TRUSTEE_A,
) callconv(@import("std").os.windows.WINAPI) TRUSTEE_TYPE;

pub extern "ADVAPI32" fn GetTrusteeTypeW(
    pTrustee: ?*TRUSTEE_W,
) callconv(@import("std").os.windows.WINAPI) TRUSTEE_TYPE;

pub extern "ADVAPI32" fn GetTrusteeFormA(
    pTrustee: *TRUSTEE_A,
) callconv(@import("std").os.windows.WINAPI) TRUSTEE_FORM;

pub extern "ADVAPI32" fn GetTrusteeFormW(
    pTrustee: *TRUSTEE_W,
) callconv(@import("std").os.windows.WINAPI) TRUSTEE_FORM;

pub extern "ADVAPI32" fn GetMultipleTrusteeOperationA(
    pTrustee: ?*TRUSTEE_A,
) callconv(@import("std").os.windows.WINAPI) MULTIPLE_TRUSTEE_OPERATION;

pub extern "ADVAPI32" fn GetMultipleTrusteeOperationW(
    pTrustee: ?*TRUSTEE_W,
) callconv(@import("std").os.windows.WINAPI) MULTIPLE_TRUSTEE_OPERATION;

pub extern "ADVAPI32" fn GetMultipleTrusteeA(
    pTrustee: ?*TRUSTEE_A,
) callconv(@import("std").os.windows.WINAPI) *TRUSTEE_A;

pub extern "ADVAPI32" fn GetMultipleTrusteeW(
    pTrustee: ?*TRUSTEE_W,
) callconv(@import("std").os.windows.WINAPI) *TRUSTEE_W;

pub extern "ADVAPI32" fn ConvertSidToStringSidA(
    Sid: *c_void,
    StringSid: *PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ConvertSidToStringSidW(
    Sid: *c_void,
    StringSid: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ConvertStringSidToSidA(
    StringSid: [*:0]const u8,
    Sid: **c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ConvertStringSidToSidW(
    StringSid: [*:0]const u16,
    Sid: **c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ConvertStringSecurityDescriptorToSecurityDescriptorA(
    StringSecurityDescriptor: [*:0]const u8,
    StringSDRevision: u32,
    SecurityDescriptor: **c_void,
    SecurityDescriptorSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ConvertStringSecurityDescriptorToSecurityDescriptorW(
    StringSecurityDescriptor: [*:0]const u16,
    StringSDRevision: u32,
    SecurityDescriptor: **c_void,
    SecurityDescriptorSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ConvertSecurityDescriptorToStringSecurityDescriptorA(
    SecurityDescriptor: *c_void,
    RequestedStringSDRevision: u32,
    SecurityInformation: u32,
    StringSecurityDescriptor: *PSTR,
    StringSecurityDescriptorLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ConvertSecurityDescriptorToStringSecurityDescriptorW(
    SecurityDescriptor: *c_void,
    RequestedStringSDRevision: u32,
    SecurityInformation: u32,
    StringSecurityDescriptor: *PWSTR,
    StringSecurityDescriptorLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "DSSEC" fn DSCreateISecurityInfoObject(
    pwszObjectPath: [*:0]const u16,
    pwszObjectClass: [*:0]const u16,
    dwFlags: u32,
    ppSI: **ISecurityInformation,
    pfnReadSD: ?PFNREADOBJECTSECURITY,
    pfnWriteSD: ?PFNWRITEOBJECTSECURITY,
    lpContext: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DSSEC" fn DSCreateISecurityInfoObjectEx(
    pwszObjectPath: [*:0]const u16,
    pwszObjectClass: [*:0]const u16,
    pwszServer: [*:0]const u16,
    pwszUserName: [*:0]const u16,
    pwszPassword: [*:0]const u16,
    dwFlags: u32,
    ppSI: **ISecurityInformation,
    pfnReadSD: ?PFNREADOBJECTSECURITY,
    pfnWriteSD: ?PFNWRITEOBJECTSECURITY,
    lpContext: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DSSEC" fn DSCreateSecurityPage(
    pwszObjectPath: [*:0]const u16,
    pwszObjectClass: [*:0]const u16,
    dwFlags: u32,
    phPage: *HPROPSHEETPAGE,
    pfnReadSD: ?PFNREADOBJECTSECURITY,
    pfnWriteSD: ?PFNWRITEOBJECTSECURITY,
    lpContext: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DSSEC" fn DSEditSecurity(
    hwndOwner: HWND,
    pwszObjectPath: [*:0]const u16,
    pwszObjectClass: [*:0]const u16,
    dwFlags: u32,
    pwszCaption: [*:0]const u16,
    pfnReadSD: ?PFNREADOBJECTSECURITY,
    pfnWriteSD: ?PFNWRITEOBJECTSECURITY,
    lpContext: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "certadm" fn CertSrvIsServerOnlineW(
    pwszServerName: [*:0]const u16,
    pfServerOnline: *BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "certadm" fn CertSrvBackupGetDynamicFileListW(
    hbc: *c_void,
    ppwszzFileList: *PWSTR,
    pcbSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "certadm" fn CertSrvBackupPrepareW(
    pwszServerName: [*:0]const u16,
    grbitJet: u32,
    dwBackupFlags: u32,
    phbc: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "certadm" fn CertSrvBackupGetDatabaseNamesW(
    hbc: *c_void,
    ppwszzAttachmentInformation: *PWSTR,
    pcbSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "certadm" fn CertSrvBackupOpenFileW(
    hbc: *c_void,
    pwszAttachmentName: [*:0]const u16,
    cbReadHintSize: u32,
    pliFileSize: *LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "certadm" fn CertSrvBackupRead(
    hbc: *c_void,
    pvBuffer: *c_void,
    cbBuffer: u32,
    pcbRead: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "certadm" fn CertSrvBackupClose(
    hbc: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "certadm" fn CertSrvBackupGetBackupLogsW(
    hbc: *c_void,
    ppwszzBackupLogFiles: *PWSTR,
    pcbSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "certadm" fn CertSrvBackupTruncateLogs(
    hbc: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "certadm" fn CertSrvBackupEnd(
    hbc: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "certadm" fn CertSrvBackupFree(
    pv: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "certadm" fn CertSrvRestoreGetDatabaseLocationsW(
    hbc: *c_void,
    ppwszzDatabaseLocationList: *PWSTR,
    pcbSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "certadm" fn CertSrvRestorePrepareW(
    pwszServerName: [*:0]const u16,
    dwRestoreFlags: u32,
    phbc: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "certadm" fn CertSrvRestoreRegisterW(
    hbc: *c_void,
    pwszCheckPointFilePath: [*:0]const u16,
    pwszLogPath: [*:0]const u16,
    rgrstmap: *CSEDB_RSTMAPW,
    crstmap: i32,
    pwszBackupLogPath: [*:0]const u16,
    genLow: u32,
    genHigh: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "certadm" fn CertSrvRestoreRegisterThroughFile(
    hbc: *c_void,
    pwszCheckPointFilePath: [*:0]const u16,
    pwszLogPath: [*:0]const u16,
    rgrstmap: *CSEDB_RSTMAPW,
    crstmap: i32,
    pwszBackupLogPath: [*:0]const u16,
    genLow: u32,
    genHigh: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "certadm" fn CertSrvRestoreRegisterComplete(
    hbc: *c_void,
    hrRestoreState: HRESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "certadm" fn CertSrvRestoreEnd(
    hbc: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "certadm" fn CertSrvServerControlW(
    pwszServerName: [*:0]const u16,
    dwControlFlags: u32,
    pcbOut: *u32,
    ppbOut: **u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "ncrypt" fn NCryptRegisterProtectionDescriptorName(
    pwszName: [*:0]const u16,
    pwszDescriptorString: ?[*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptQueryProtectionDescriptorName(
    pwszName: [*:0]const u16,
    pwszDescriptorString: ?[*:0]u16,
    pcDescriptorString: *?*c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptCreateProtectionDescriptor(
    pwszDescriptorString: [*:0]const u16,
    dwFlags: u32,
    phDescriptor: **NCRYPT_DESCRIPTOR_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptCloseProtectionDescriptor(
    hDescriptor: *NCRYPT_DESCRIPTOR_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptGetProtectionDescriptorInfo(
    hDescriptor: *NCRYPT_DESCRIPTOR_HANDLE__,
    pMemPara: ?*const NCRYPT_ALLOC_PARA,
    dwInfoType: u32,
    ppvInfo: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptProtectSecret(
    hDescriptor: *NCRYPT_DESCRIPTOR_HANDLE__,
    dwFlags: u32,
    pbData: [*:0]const u8,
    cbData: u32,
    pMemPara: ?*const NCRYPT_ALLOC_PARA,
    hWnd: HWND,
    ppbProtectedBlob: **u8,
    pcbProtectedBlob: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptUnprotectSecret(
    phDescriptor: ?*?*NCRYPT_DESCRIPTOR_HANDLE__,
    dwFlags: u32,
    pbProtectedBlob: [*:0]const u8,
    cbProtectedBlob: u32,
    pMemPara: ?*const NCRYPT_ALLOC_PARA,
    hWnd: HWND,
    ppbData: **u8,
    pcbData: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptStreamOpenToProtect(
    hDescriptor: *NCRYPT_DESCRIPTOR_HANDLE__,
    dwFlags: u32,
    hWnd: HWND,
    pStreamInfo: *NCRYPT_PROTECT_STREAM_INFO,
    phStream: **NCRYPT_STREAM_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptStreamOpenToUnprotect(
    pStreamInfo: *NCRYPT_PROTECT_STREAM_INFO,
    dwFlags: u32,
    hWnd: HWND,
    phStream: **NCRYPT_STREAM_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptStreamOpenToUnprotectEx(
    pStreamInfo: *NCRYPT_PROTECT_STREAM_INFO_EX,
    dwFlags: u32,
    hWnd: HWND,
    phStream: **NCRYPT_STREAM_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptStreamUpdate(
    hStream: *NCRYPT_STREAM_HANDLE__,
    pbData: [*:0]const u8,
    cbData: ?*c_void,
    fFinal: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "ncrypt" fn NCryptStreamClose(
    hStream: *NCRYPT_STREAM_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "TOKENBINDING" fn TokenBindingGenerateBinding(
    keyType: TOKENBINDING_KEY_PARAMETERS_TYPE,
    targetURL: [*:0]const u16,
    bindingType: TOKENBINDING_TYPE,
    tlsEKM: [*]const u8,
    tlsEKMSize: u32,
    extensionFormat: TOKENBINDING_EXTENSION_FORMAT,
    extensionData: *const c_void,
    tokenBinding: **c_void,
    tokenBindingSize: *u32,
    resultData: ?*?*TOKENBINDING_RESULT_DATA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "TOKENBINDING" fn TokenBindingGenerateMessage(
    tokenBindings: [*]const *const c_void,
    tokenBindingsSize: [*]const u32,
    tokenBindingsCount: u32,
    tokenBindingMessage: **c_void,
    tokenBindingMessageSize: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "TOKENBINDING" fn TokenBindingVerifyMessage(
    tokenBindingMessage: [*]const u8,
    tokenBindingMessageSize: u32,
    keyType: TOKENBINDING_KEY_PARAMETERS_TYPE,
    tlsEKM: [*]const u8,
    tlsEKMSize: u32,
    resultList: **TOKENBINDING_RESULT_LIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "TOKENBINDING" fn TokenBindingGetKeyTypesClient(
    keyTypes: **TOKENBINDING_KEY_TYPES,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "TOKENBINDING" fn TokenBindingGetKeyTypesServer(
    keyTypes: **TOKENBINDING_KEY_TYPES,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "TOKENBINDING" fn TokenBindingDeleteBinding(
    targetURL: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "TOKENBINDING" fn TokenBindingDeleteAllBindings(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "TOKENBINDING" fn TokenBindingGenerateID(
    keyType: TOKENBINDING_KEY_PARAMETERS_TYPE,
    publicKey: [*]const u8,
    publicKeySize: u32,
    resultData: **TOKENBINDING_RESULT_DATA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "TOKENBINDING" fn TokenBindingGenerateIDForUri(
    keyType: TOKENBINDING_KEY_PARAMETERS_TYPE,
    targetUri: [*:0]const u16,
    resultData: **TOKENBINDING_RESULT_DATA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "TOKENBINDING" fn TokenBindingGetHighestSupportedVersion(
    majorVersion: *u8,
    minorVersion: *u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CRYPTXML" fn CryptXmlClose(
    hCryptXml: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPTXML" fn CryptXmlGetTransforms(
    ppConfig: *const *const CRYPT_XML_TRANSFORM_CHAIN_CONFIG,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPTXML" fn CryptXmlOpenToEncode(
    pConfig: ?*const CRYPT_XML_TRANSFORM_CHAIN_CONFIG,
    dwFlags: u32,
    wszId: ?[*:0]const u16,
    rgProperty: ?[*]const CRYPT_XML_PROPERTY,
    cProperty: u32,
    pEncoded: ?*const CRYPT_XML_BLOB,
    phSignature: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPTXML" fn CryptXmlOpenToDecode(
    pConfig: ?*const CRYPT_XML_TRANSFORM_CHAIN_CONFIG,
    dwFlags: u32,
    rgProperty: ?[*]const CRYPT_XML_PROPERTY,
    cProperty: u32,
    pEncoded: *const CRYPT_XML_BLOB,
    phCryptXml: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPTXML" fn CryptXmlAddObject(
    hSignatureOrObject: *c_void,
    dwFlags: u32,
    rgProperty: ?[*]const CRYPT_XML_PROPERTY,
    cProperty: u32,
    pEncoded: *const CRYPT_XML_BLOB,
    ppObject: ?*const ?*const CRYPT_XML_OBJECT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPTXML" fn CryptXmlCreateReference(
    hCryptXml: *c_void,
    dwFlags: u32,
    wszId: ?[*:0]const u16,
    wszURI: ?[*:0]const u16,
    wszType: ?[*:0]const u16,
    pDigestMethod: *const CRYPT_XML_ALGORITHM,
    cTransform: u32,
    rgTransform: ?[*]const CRYPT_XML_ALGORITHM,
    phReference: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPTXML" fn CryptXmlDigestReference(
    hReference: *c_void,
    dwFlags: u32,
    pDataProviderIn: *CRYPT_XML_DATA_PROVIDER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPTXML" fn CryptXmlSetHMACSecret(
    hSignature: *c_void,
    pbSecret: [*:0]const u8,
    cbSecret: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPTXML" fn CryptXmlSign(
    hSignature: *c_void,
    hKey: ?*c_void,
    dwKeySpec: u32,
    dwFlags: u32,
    dwKeyInfoSpec: CRYPT_XML_KEYINFO_SPEC,
    pvKeyInfoSpec: ?*const c_void,
    pSignatureMethod: *const CRYPT_XML_ALGORITHM,
    pCanonicalization: *const CRYPT_XML_ALGORITHM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPTXML" fn CryptXmlImportPublicKey(
    dwFlags: u32,
    pKeyValue: *const CRYPT_XML_KEY_VALUE,
    phKey: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPTXML" fn CryptXmlVerifySignature(
    hSignature: *c_void,
    hKey: ?*c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPTXML" fn CryptXmlGetDocContext(
    hCryptXml: *c_void,
    ppStruct: *const *const CRYPT_XML_DOC_CTXT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPTXML" fn CryptXmlGetSignature(
    hCryptXml: *c_void,
    ppStruct: *const *const CRYPT_XML_SIGNATURE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPTXML" fn CryptXmlGetReference(
    hCryptXml: *c_void,
    ppStruct: *const *const CRYPT_XML_REFERENCE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPTXML" fn CryptXmlGetStatus(
    hCryptXml: *c_void,
    pStatus: *CRYPT_XML_STATUS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPTXML" fn CryptXmlEncode(
    hCryptXml: *c_void,
    dwCharset: CRYPT_XML_CHARSET,
    rgProperty: ?[*]const CRYPT_XML_PROPERTY,
    cProperty: u32,
    pvCallbackState: *c_void,
    pfnWrite: PFN_CRYPT_XML_WRITE_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPTXML" fn CryptXmlGetAlgorithmInfo(
    pXmlAlgorithm: *const CRYPT_XML_ALGORITHM,
    dwFlags: u32,
    ppAlgInfo: **CRYPT_XML_ALGORITHM_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPTXML" fn CryptXmlFindAlgorithmInfo(
    dwFindByType: u32,
    pvFindBy: *const c_void,
    dwGroupId: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *CRYPT_XML_ALGORITHM_INFO;

pub extern "CRYPTXML" fn CryptXmlEnumAlgorithmInfo(
    dwGroupId: u32,
    dwFlags: u32,
    pvArg: ?*c_void,
    pfnEnumAlgInfo: PFN_CRYPT_XML_ENUM_ALG_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WINTRUST" fn WinVerifyTrust(
    hwnd: HWND,
    pgActionID: *Guid,
    pWVTData: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "WINTRUST" fn WinVerifyTrustEx(
    hwnd: HWND,
    pgActionID: *Guid,
    pWinTrustData: *WINTRUST_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WINTRUST" fn WintrustGetRegPolicyFlags(
    pdwPolicyFlags: *u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WINTRUST" fn WintrustSetRegPolicyFlags(
    dwPolicyFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn WintrustAddActionID(
    pgActionID: *Guid,
    fdwFlags: u32,
    psProvInfo: *CRYPT_REGISTER_ACTIONID,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn WintrustRemoveActionID(
    pgActionID: *Guid,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn WintrustLoadFunctionPointers(
    pgActionID: *Guid,
    pPfns: *CRYPT_PROVIDER_FUNCTIONS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn WintrustAddDefaultForUsage(
    pszUsageOID: *const i8,
    psDefUsage: *CRYPT_PROVIDER_REGDEFUSAGE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn WintrustGetDefaultForUsage(
    dwAction: u32,
    pszUsageOID: *const i8,
    psUsage: *CRYPT_PROVIDER_DEFUSAGE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn WTHelperGetProvSignerFromChain(
    pProvData: *CRYPT_PROVIDER_DATA,
    idxSigner: u32,
    fCounterSigner: BOOL,
    idxCounterSigner: u32,
) callconv(@import("std").os.windows.WINAPI) *CRYPT_PROVIDER_SGNR;

pub extern "WINTRUST" fn WTHelperGetProvCertFromChain(
    pSgnr: *CRYPT_PROVIDER_SGNR,
    idxCert: u32,
) callconv(@import("std").os.windows.WINAPI) *CRYPT_PROVIDER_CERT;

pub extern "WINTRUST" fn WTHelperProvDataFromStateData(
    hStateData: HANDLE,
) callconv(@import("std").os.windows.WINAPI) *CRYPT_PROVIDER_DATA;

pub extern "WINTRUST" fn WTHelperGetProvPrivateDataFromChain(
    pProvData: *CRYPT_PROVIDER_DATA,
    pgProviderID: *Guid,
) callconv(@import("std").os.windows.WINAPI) *CRYPT_PROVIDER_PRIVDATA;

pub extern "WINTRUST" fn WTHelperCertIsSelfSigned(
    dwEncoding: u32,
    pCert: *CERT_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn WTHelperCertCheckValidSignature(
    pProvData: *CRYPT_PROVIDER_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WINTRUST" fn OpenPersonalTrustDBDialogEx(
    hwndParent: HWND,
    dwFlags: u32,
    pvReserved: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn OpenPersonalTrustDBDialog(
    hwndParent: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn WintrustSetDefaultIncludePEPageHashes(
    fIncludePEPageHashes: BOOL,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "CRYPTUI" fn CryptUIDlgViewContext(
    dwContextType: u32,
    pvContext: *const c_void,
    hwnd: HWND,
    pwszTitle: ?[*:0]const u16,
    dwFlags: u32,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPTUI" fn CryptUIDlgSelectCertificateFromStore(
    hCertStore: *c_void,
    hwnd: HWND,
    pwszTitle: ?[*:0]const u16,
    pwszDisplayString: ?[*:0]const u16,
    dwDontUseColumn: u32,
    dwFlags: u32,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) *CERT_CONTEXT;

pub extern "CRYPTUI" fn CertSelectionGetSerializedBlob(
    pcsi: *CERT_SELECTUI_INPUT,
    ppOutBuffer: ?*?*c_void,
    pulOutBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "CRYPTUI" fn CryptUIDlgCertMgr(
    pCryptUICertMgr: *CRYPTUI_CERT_MGR_STRUCT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPTUI" fn CryptUIWizDigitalSign(
    dwFlags: u32,
    hwndParent: HWND,
    pwszWizardTitle: ?[*:0]const u16,
    pDigitalSignInfo: *CRYPTUI_WIZ_DIGITAL_SIGN_INFO,
    ppSignContext: ?*?*CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPTUI" fn CryptUIWizFreeDigitalSignContext(
    pSignContext: *CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPTUI" fn CryptUIDlgViewCertificateW(
    pCertViewInfo: *CRYPTUI_VIEWCERTIFICATE_STRUCTW,
    pfPropertiesChanged: *BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPTUI" fn CryptUIDlgViewCertificateA(
    pCertViewInfo: *CRYPTUI_VIEWCERTIFICATE_STRUCTA,
    pfPropertiesChanged: *BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPTUI" fn CryptUIWizExport(
    dwFlags: u32,
    hwndParent: HWND,
    pwszWizardTitle: ?[*:0]const u16,
    pExportInfo: *CRYPTUI_WIZ_EXPORT_INFO,
    pvoid: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPTUI" fn CryptUIWizImport(
    dwFlags: u32,
    hwndParent: HWND,
    pwszWizardTitle: ?[*:0]const u16,
    pImportSrc: ?*CRYPTUI_WIZ_IMPORT_SRC_INFO,
    hDestCertStore: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSIPGetSignedDataMsg(
    pSubjectInfo: *SIP_SUBJECTINFO,
    pdwEncodingType: *u32,
    dwIndex: u32,
    pcbSignedDataMsg: *u32,
    pbSignedDataMsg: *u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSIPPutSignedDataMsg(
    pSubjectInfo: *SIP_SUBJECTINFO,
    dwEncodingType: u32,
    pdwIndex: *u32,
    cbSignedDataMsg: u32,
    pbSignedDataMsg: *u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSIPCreateIndirectData(
    pSubjectInfo: *SIP_SUBJECTINFO,
    pcbIndirectData: *u32,
    pIndirectData: *SIP_INDIRECT_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSIPVerifyIndirectData(
    pSubjectInfo: *SIP_SUBJECTINFO,
    pIndirectData: *SIP_INDIRECT_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSIPRemoveSignedDataMsg(
    pSubjectInfo: *SIP_SUBJECTINFO,
    dwIndex: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSIPLoad(
    pgSubject: *const Guid,
    dwFlags: u32,
    pSipDispatch: *SIP_DISPATCH_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSIPRetrieveSubjectGuid(
    FileName: [*:0]const u16,
    hFileIn: HANDLE,
    pgSubject: *Guid,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSIPRetrieveSubjectGuidForCatalogFile(
    FileName: [*:0]const u16,
    hFileIn: HANDLE,
    pgSubject: *Guid,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSIPAddProvider(
    psNewProv: *SIP_ADD_NEWPROVIDER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSIPRemoveProvider(
    pgProv: *Guid,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSIPGetCaps(
    pSubjInfo: *SIP_SUBJECTINFO,
    pCaps: *SIP_CAP_SET_V3,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CRYPT32" fn CryptSIPGetSealedDigest(
    pSubjectInfo: *SIP_SUBJECTINFO,
    pSig: ?[*:0]const u8,
    dwSig: u32,
    pbDigest: ?[*:0]u8,
    pcbDigest: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn CryptCATOpen(
    pwszFileName: PWSTR,
    fdwOpenFlags: u32,
    hProv: ?*c_void,
    dwPublicVersion: u32,
    dwEncodingType: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WINTRUST" fn CryptCATClose(
    hCatalog: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn CryptCATStoreFromHandle(
    hCatalog: HANDLE,
) callconv(@import("std").os.windows.WINAPI) *CRYPTCATSTORE;

pub extern "WINTRUST" fn CryptCATHandleFromStore(
    pCatStore: *CRYPTCATSTORE,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "WINTRUST" fn CryptCATPersistStore(
    hCatalog: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn CryptCATGetCatAttrInfo(
    hCatalog: HANDLE,
    pwszReferenceTag: PWSTR,
) callconv(@import("std").os.windows.WINAPI) *CRYPTCATATTRIBUTE;

pub extern "WINTRUST" fn CryptCATPutCatAttrInfo(
    hCatalog: HANDLE,
    pwszReferenceTag: PWSTR,
    dwAttrTypeAndAction: u32,
    cbData: u32,
    pbData: *u8,
) callconv(@import("std").os.windows.WINAPI) *CRYPTCATATTRIBUTE;

pub extern "WINTRUST" fn CryptCATEnumerateCatAttr(
    hCatalog: HANDLE,
    pPrevAttr: *CRYPTCATATTRIBUTE,
) callconv(@import("std").os.windows.WINAPI) *CRYPTCATATTRIBUTE;

pub extern "WINTRUST" fn CryptCATGetMemberInfo(
    hCatalog: HANDLE,
    pwszReferenceTag: PWSTR,
) callconv(@import("std").os.windows.WINAPI) *CRYPTCATMEMBER;

pub extern "WINTRUST" fn CryptCATAllocSortedMemberInfo(
    hCatalog: HANDLE,
    pwszReferenceTag: PWSTR,
) callconv(@import("std").os.windows.WINAPI) *CRYPTCATMEMBER;

pub extern "WINTRUST" fn CryptCATFreeSortedMemberInfo(
    hCatalog: HANDLE,
    pCatMember: *CRYPTCATMEMBER,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WINTRUST" fn CryptCATGetAttrInfo(
    hCatalog: HANDLE,
    pCatMember: *CRYPTCATMEMBER,
    pwszReferenceTag: PWSTR,
) callconv(@import("std").os.windows.WINAPI) *CRYPTCATATTRIBUTE;

pub extern "WINTRUST" fn CryptCATPutMemberInfo(
    hCatalog: HANDLE,
    pwszFileName: ?PWSTR,
    pwszReferenceTag: PWSTR,
    pgSubjectType: *Guid,
    dwCertVersion: u32,
    cbSIPIndirectData: u32,
    pbSIPIndirectData: *u8,
) callconv(@import("std").os.windows.WINAPI) *CRYPTCATMEMBER;

pub extern "WINTRUST" fn CryptCATPutAttrInfo(
    hCatalog: HANDLE,
    pCatMember: *CRYPTCATMEMBER,
    pwszReferenceTag: PWSTR,
    dwAttrTypeAndAction: u32,
    cbData: u32,
    pbData: *u8,
) callconv(@import("std").os.windows.WINAPI) *CRYPTCATATTRIBUTE;

pub extern "WINTRUST" fn CryptCATEnumerateMember(
    hCatalog: HANDLE,
    pPrevMember: *CRYPTCATMEMBER,
) callconv(@import("std").os.windows.WINAPI) *CRYPTCATMEMBER;

pub extern "WINTRUST" fn CryptCATEnumerateAttr(
    hCatalog: HANDLE,
    pCatMember: *CRYPTCATMEMBER,
    pPrevAttr: *CRYPTCATATTRIBUTE,
) callconv(@import("std").os.windows.WINAPI) *CRYPTCATATTRIBUTE;

pub extern "WINTRUST" fn CryptCATCDFOpen(
    pwszFilePath: PWSTR,
    pfnParseError: ?PFN_CDF_PARSE_ERROR_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) *CRYPTCATCDF;

pub extern "WINTRUST" fn CryptCATCDFClose(
    pCDF: *CRYPTCATCDF,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn CryptCATCDFEnumCatAttributes(
    pCDF: *CRYPTCATCDF,
    pPrevAttr: *CRYPTCATATTRIBUTE,
    pfnParseError: PFN_CDF_PARSE_ERROR_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) *CRYPTCATATTRIBUTE;

pub extern "WINTRUST" fn CryptCATCDFEnumMembers(
    pCDF: *CRYPTCATCDF,
    pPrevMember: *CRYPTCATMEMBER,
    pfnParseError: PFN_CDF_PARSE_ERROR_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) *CRYPTCATMEMBER;

pub extern "WINTRUST" fn CryptCATCDFEnumAttributes(
    pCDF: *CRYPTCATCDF,
    pMember: *CRYPTCATMEMBER,
    pPrevAttr: *CRYPTCATATTRIBUTE,
    pfnParseError: PFN_CDF_PARSE_ERROR_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) *CRYPTCATATTRIBUTE;

pub extern "WINTRUST" fn IsCatalogFile(
    hFile: HANDLE,
    pwszFileName: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn CryptCATAdminAcquireContext(
    phCatAdmin: *?*c_void,
    pgSubsystem: ?*const Guid,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn CryptCATAdminAcquireContext2(
    phCatAdmin: *?*c_void,
    pgSubsystem: ?*const Guid,
    pwszHashAlgorithm: ?[*:0]const u16,
    pStrongHashPolicy: ?*CERT_STRONG_SIGN_PARA,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn CryptCATAdminReleaseContext(
    hCatAdmin: ?*c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn CryptCATAdminReleaseCatalogContext(
    hCatAdmin: ?*c_void,
    hCatInfo: ?*c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn CryptCATAdminEnumCatalogFromHash(
    hCatAdmin: ?*c_void,
    pbHash: [*:0]u8,
    cbHash: u32,
    dwFlags: u32,
    phPrevCatInfo: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "WINTRUST" fn CryptCATAdminCalcHashFromFileHandle(
    hFile: HANDLE,
    pcbHash: *u32,
    pbHash: ?[*:0]u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn CryptCATAdminCalcHashFromFileHandle2(
    hCatAdmin: ?*c_void,
    hFile: HANDLE,
    pcbHash: *u32,
    pbHash: ?[*:0]u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn CryptCATAdminAddCatalog(
    hCatAdmin: ?*c_void,
    pwszCatalogFile: PWSTR,
    pwszSelectBaseName: ?PWSTR,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "WINTRUST" fn CryptCATAdminRemoveCatalog(
    hCatAdmin: ?*c_void,
    pwszCatalogFile: [*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn CryptCATCatalogInfoFromContext(
    hCatInfo: ?*c_void,
    psCatInfo: *CATALOG_INFO,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn CryptCATAdminResolveCatalogPath(
    hCatAdmin: ?*c_void,
    pwszCatalogFile: PWSTR,
    psCatInfo: *CATALOG_INFO,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINTRUST" fn CryptCATAdminPauseServiceForBackup(
    dwFlags: u32,
    fResume: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SaferGetPolicyInformation(
    dwScopeId: u32,
    SaferPolicyInfoClass: SAFER_POLICY_INFO_CLASS,
    InfoBufferSize: u32,
    InfoBuffer: [*]u8,
    InfoBufferRetSize: *u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SaferSetPolicyInformation(
    dwScopeId: u32,
    SaferPolicyInfoClass: SAFER_POLICY_INFO_CLASS,
    InfoBufferSize: u32,
    InfoBuffer: [*]u8,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SaferCreateLevel(
    dwScopeId: u32,
    dwLevelId: u32,
    OpenFlags: u32,
    pLevelHandle: **SAFER_LEVEL_HANDLE__,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SaferCloseLevel(
    hLevelHandle: *SAFER_LEVEL_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SaferIdentifyLevel(
    dwNumProperties: u32,
    pCodeProperties: ?[*]SAFER_CODE_PROPERTIES_V2,
    pLevelHandle: **SAFER_LEVEL_HANDLE__,
    lpReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SaferComputeTokenFromLevel(
    LevelHandle: *SAFER_LEVEL_HANDLE__,
    InAccessToken: HANDLE,
    OutAccessToken: *HANDLE,
    dwFlags: u32,
    lpReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SaferGetLevelInformation(
    LevelHandle: *SAFER_LEVEL_HANDLE__,
    dwInfoType: SAFER_OBJECT_INFO_CLASS,
    lpQueryBuffer: ?[*]u8,
    dwInBufferSize: u32,
    lpdwOutBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SaferSetLevelInformation(
    LevelHandle: *SAFER_LEVEL_HANDLE__,
    dwInfoType: SAFER_OBJECT_INFO_CLASS,
    lpQueryBuffer: [*]u8,
    dwInBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SaferRecordEventLogEntry(
    hLevel: *SAFER_LEVEL_HANDLE__,
    szTargetPath: [*:0]const u16,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SaferiIsExecutableFileType(
    szFullPathname: [*:0]const u16,
    bFromShellExecute: u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SLC" fn SLOpen(
    phSLC: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLClose(
    hSLC: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLInstallProofOfPurchase(
    hSLC: *c_void,
    pwszPKeyAlgorithm: [*:0]const u16,
    pwszPKeyString: [*:0]const u16,
    cbPKeySpecificData: u32,
    pbPKeySpecificData: ?[*:0]u8,
    pPkeyId: *Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLUninstallProofOfPurchase(
    hSLC: *c_void,
    pPKeyId: *const Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLInstallLicense(
    hSLC: *c_void,
    cbLicenseBlob: u32,
    pbLicenseBlob: [*:0]const u8,
    pLicenseFileId: *Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLUninstallLicense(
    hSLC: *c_void,
    pLicenseFileId: *const Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLConsumeRight(
    hSLC: *c_void,
    pAppId: *const Guid,
    pProductSkuId: ?*const Guid,
    pwszRightName: ?[*:0]const u16,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLGetProductSkuInformation(
    hSLC: *c_void,
    pProductSkuId: *const Guid,
    pwszValueName: [*:0]const u16,
    peDataType: ?*SLDATATYPE,
    pcbValue: *u32,
    ppbValue: **u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLGetPKeyInformation(
    hSLC: *c_void,
    pPKeyId: *const Guid,
    pwszValueName: [*:0]const u16,
    peDataType: ?*SLDATATYPE,
    pcbValue: *u32,
    ppbValue: **u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLGetLicenseInformation(
    hSLC: *c_void,
    pSLLicenseId: *const Guid,
    pwszValueName: [*:0]const u16,
    peDataType: ?*SLDATATYPE,
    pcbValue: *u32,
    ppbValue: **u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLGetLicensingStatusInformation(
    hSLC: *c_void,
    pAppID: ?*const Guid,
    pProductSkuId: ?*const Guid,
    pwszRightName: ?[*:0]const u16,
    pnStatusCount: *u32,
    ppLicensingStatus: **SL_LICENSING_STATUS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLGetPolicyInformation(
    hSLC: *c_void,
    pwszValueName: [*:0]const u16,
    peDataType: ?*SLDATATYPE,
    pcbValue: *u32,
    ppbValue: **u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLGetPolicyInformationDWORD(
    hSLC: *c_void,
    pwszValueName: [*:0]const u16,
    pdwValue: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLGetServiceInformation(
    hSLC: *c_void,
    pwszValueName: [*:0]const u16,
    peDataType: ?*SLDATATYPE,
    pcbValue: *u32,
    ppbValue: **u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLGetApplicationInformation(
    hSLC: *c_void,
    pApplicationId: *const Guid,
    pwszValueName: [*:0]const u16,
    peDataType: ?*SLDATATYPE,
    pcbValue: *u32,
    ppbValue: **u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "slcext" fn SLActivateProduct(
    hSLC: *c_void,
    pProductSkuId: *const Guid,
    cbAppSpecificData: u32,
    pvAppSpecificData: ?*const c_void,
    pActivationInfo: ?*const SL_ACTIVATION_INFO_HEADER,
    pwszProxyServer: ?[*:0]const u16,
    wProxyPort: u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "slcext" fn SLGetServerStatus(
    pwszServerURL: [*:0]const u16,
    pwszAcquisitionType: [*:0]const u16,
    pwszProxyServer: ?[*:0]const u16,
    wProxyPort: u16,
    phrStatus: *HRESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLGenerateOfflineInstallationId(
    hSLC: *c_void,
    pProductSkuId: *const Guid,
    ppwszInstallationId: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLGenerateOfflineInstallationIdEx(
    hSLC: *c_void,
    pProductSkuId: ?*const Guid,
    pActivationInfo: ?*const SL_ACTIVATION_INFO_HEADER,
    ppwszInstallationId: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLDepositOfflineConfirmationId(
    hSLC: *c_void,
    pProductSkuId: *const Guid,
    pwszInstallationId: [*:0]const u16,
    pwszConfirmationId: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLDepositOfflineConfirmationIdEx(
    hSLC: *c_void,
    pProductSkuId: ?*const Guid,
    pActivationInfo: ?*const SL_ACTIVATION_INFO_HEADER,
    pwszInstallationId: [*:0]const u16,
    pwszConfirmationId: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLGetPKeyId(
    hSLC: *c_void,
    pwszPKeyAlgorithm: [*:0]const u16,
    pwszPKeyString: [*:0]const u16,
    cbPKeySpecificData: u32,
    pbPKeySpecificData: ?[*:0]const u8,
    pPKeyId: *Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLGetInstalledProductKeyIds(
    hSLC: *c_void,
    pProductSkuId: *const Guid,
    pnProductKeyIds: *u32,
    ppProductKeyIds: **Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLSetCurrentProductKey(
    hSLC: *c_void,
    pProductSkuId: *const Guid,
    pProductKeyId: *const Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLGetSLIDList(
    hSLC: *c_void,
    eQueryIdType: SLIDTYPE,
    pQueryId: ?*const Guid,
    eReturnIdType: SLIDTYPE,
    pnReturnIds: *u32,
    ppReturnIds: **Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLGetLicenseFileId(
    hSLC: *c_void,
    cbLicenseBlob: u32,
    pbLicenseBlob: [*:0]const u8,
    pLicenseFileId: *Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLGetLicense(
    hSLC: *c_void,
    pLicenseFileId: *const Guid,
    pcbLicenseFile: *u32,
    ppbLicenseFile: **u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLFireEvent(
    hSLC: *c_void,
    pwszEventId: [*:0]const u16,
    pApplicationId: *const Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLRegisterEvent(
    hSLC: ?*c_void,
    pwszEventId: [*:0]const u16,
    pApplicationId: *const Guid,
    hEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLUnregisterEvent(
    hSLC: ?*c_void,
    pwszEventId: [*:0]const u16,
    pApplicationId: *const Guid,
    hEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLGetWindowsInformation(
    pwszValueName: [*:0]const u16,
    peDataType: ?*SLDATATYPE,
    pcbValue: *u32,
    ppbValue: **u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLGetWindowsInformationDWORD(
    pwszValueName: [*:0]const u16,
    pdwValue: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLWGA" fn SLIsGenuineLocal(
    pAppId: *const Guid,
    pGenuineState: *SL_GENUINE_STATE,
    pUIOptions: ?*SL_NONGENUINE_UI_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "slcext" fn SLAcquireGenuineTicket(
    ppTicketBlob: **c_void,
    pcbTicketBlob: *u32,
    pwszTemplateId: [*:0]const u16,
    pwszServerUrl: [*:0]const u16,
    pwszClientToken: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLSetGenuineInformation(
    pQueryId: *const Guid,
    pwszValueName: [*:0]const u16,
    eDataType: SLDATATYPE,
    cbValue: u32,
    pbValue: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "slcext" fn SLGetReferralInformation(
    hSLC: *c_void,
    eReferralType: SLREFERRALTYPE,
    pSkuOrAppId: *const Guid,
    pwszValueName: [*:0]const u16,
    ppwszValue: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SLC" fn SLGetGenuineInformation(
    pQueryId: *const Guid,
    pwszValueName: [*:0]const u16,
    peDataType: ?*SLDATATYPE,
    pcbValue: *u32,
    ppbValue: **u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-slapi-l1-1-0" fn SLQueryLicenseValueFromApp(
    valueName: [*:0]const u16,
    valueType: ?*u32,
    dataBuffer: ?[*]u8,
    dataSize: u32,
    resultDataSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqCreateSession(
    accessLevel: DdqAccessLevel,
    hSession: **HDIAGNOSTIC_DATA_QUERY_SESSION__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqCloseSession(
    hSession: *HDIAGNOSTIC_DATA_QUERY_SESSION__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetSessionAccessLevel(
    hSession: *HDIAGNOSTIC_DATA_QUERY_SESSION__,
    accessLevel: *DdqAccessLevel,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticDataAccessLevelAllowed(
    accessLevel: *DdqAccessLevel,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordStats(
    hSession: *HDIAGNOSTIC_DATA_QUERY_SESSION__,
    searchCriteria: *const DIAGNOSTIC_DATA_SEARCH_CRITERIA,
    recordCount: *u32,
    minRowId: *i64,
    maxRowId: *i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordPayload(
    hSession: *HDIAGNOSTIC_DATA_QUERY_SESSION__,
    rowId: i64,
    payload: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordLocaleTags(
    hSession: *HDIAGNOSTIC_DATA_QUERY_SESSION__,
    locale: [*:0]const u16,
    hTagDescription: **HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqFreeDiagnosticRecordLocaleTags(
    hTagDescription: *HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordLocaleTagAtIndex(
    hTagDescription: *HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__,
    index: u32,
    tagDescription: *DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordLocaleTagCount(
    hTagDescription: *HDIAGNOSTIC_EVENT_TAG_DESCRIPTION__,
    tagDescriptionCount: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordProducers(
    hSession: *HDIAGNOSTIC_DATA_QUERY_SESSION__,
    hProducerDescription: **HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqFreeDiagnosticRecordProducers(
    hProducerDescription: *HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordProducerAtIndex(
    hProducerDescription: *HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__,
    index: u32,
    producerDescription: *DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordProducerCount(
    hProducerDescription: *HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION__,
    producerDescriptionCount: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordProducerCategories(
    hSession: *HDIAGNOSTIC_DATA_QUERY_SESSION__,
    producerName: [*:0]const u16,
    hCategoryDescription: **HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqFreeDiagnosticRecordProducerCategories(
    hCategoryDescription: *HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordCategoryAtIndex(
    hCategoryDescription: *HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__,
    index: u32,
    categoryDescription: *DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordCategoryCount(
    hCategoryDescription: *HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION__,
    categoryDescriptionCount: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqIsDiagnosticRecordSampledIn(
    hSession: *HDIAGNOSTIC_DATA_QUERY_SESSION__,
    providerGroup: *const Guid,
    providerId: ?*const Guid,
    providerName: [*:0]const u16,
    eventId: ?*const u32,
    eventName: [*:0]const u16,
    eventVersion: ?*const u32,
    eventKeywords: ?*const u64,
    isSampledIn: *BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordPage(
    hSession: *HDIAGNOSTIC_DATA_QUERY_SESSION__,
    searchCriteria: *DIAGNOSTIC_DATA_SEARCH_CRITERIA,
    offset: u32,
    pageRecordCount: u32,
    baseRowId: i64,
    hRecord: **HDIAGNOSTIC_RECORD__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqFreeDiagnosticRecordPage(
    hRecord: *HDIAGNOSTIC_RECORD__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordAtIndex(
    hRecord: *HDIAGNOSTIC_RECORD__,
    index: u32,
    record: *DIAGNOSTIC_DATA_RECORD,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordCount(
    hRecord: *HDIAGNOSTIC_RECORD__,
    recordCount: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticReportStoreReportCount(
    hSession: *HDIAGNOSTIC_DATA_QUERY_SESSION__,
    reportStoreType: u32,
    reportCount: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqCancelDiagnosticRecordOperation(
    hSession: *HDIAGNOSTIC_DATA_QUERY_SESSION__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticReport(
    hSession: *HDIAGNOSTIC_DATA_QUERY_SESSION__,
    reportStoreType: u32,
    hReport: **HDIAGNOSTIC_REPORT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqFreeDiagnosticReport(
    hReport: *HDIAGNOSTIC_REPORT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticReportAtIndex(
    hReport: *HDIAGNOSTIC_REPORT__,
    index: u32,
    report: *DIAGNOSTIC_REPORT_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticReportCount(
    hReport: *HDIAGNOSTIC_REPORT__,
    reportCount: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqExtractDiagnosticReport(
    hSession: *HDIAGNOSTIC_DATA_QUERY_SESSION__,
    reportStoreType: u32,
    reportKey: [*:0]const u16,
    destinationPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordTagDistribution(
    hSession: *HDIAGNOSTIC_DATA_QUERY_SESSION__,
    producerNames: [*]PWSTR,
    producerNameCount: u32,
    tagStats: [*]*DIAGNOSTIC_DATA_EVENT_TAG_STATS,
    statCount: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordBinaryDistribution(
    hSession: *HDIAGNOSTIC_DATA_QUERY_SESSION__,
    producerNames: [*]PWSTR,
    producerNameCount: u32,
    topNBinaries: u32,
    binaryStats: [*]*DIAGNOSTIC_DATA_EVENT_BINARY_STATS,
    statCount: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetDiagnosticRecordSummary(
    hSession: *HDIAGNOSTIC_DATA_QUERY_SESSION__,
    producerNames: [*]const [*:0]const u16,
    producerNameCount: u32,
    generalStats: *DIAGNOSTIC_DATA_GENERAL_STATS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqSetTranscriptConfiguration(
    hSession: *HDIAGNOSTIC_DATA_QUERY_SESSION__,
    desiredConfig: *const DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "DiagnosticDataQuery" fn DdqGetTranscriptConfiguration(
    hSession: *HDIAGNOSTIC_DATA_QUERY_SESSION__,
    currentConfig: *DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USER32" fn SetUserObjectSecurity(
    hObj: HANDLE,
    pSIRequested: *u32,
    pSID: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetUserObjectSecurity(
    hObj: HANDLE,
    pSIRequested: *u32,
    pSID: ?[*]u8,
    nLength: u32,
    lpnLengthNeeded: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "logoncli" fn NetAddServiceAccount(
    ServerName: ?PWSTR,
    AccountName: PWSTR,
    Password: PWSTR,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "logoncli" fn NetRemoveServiceAccount(
    ServerName: ?PWSTR,
    AccountName: PWSTR,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "logoncli" fn NetEnumerateServiceAccounts(
    ServerName: ?PWSTR,
    Flags: u32,
    AccountsCount: *u32,
    Accounts: ***u16,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "logoncli" fn NetIsServiceAccount(
    ServerName: ?PWSTR,
    AccountName: PWSTR,
    IsService: *BOOL,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "logoncli" fn NetQueryServiceAccount(
    ServerName: ?PWSTR,
    AccountName: PWSTR,
    InfoLevel: u32,
    Buffer: **u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "ADVAPI32" fn SetServiceBits(
    hServiceStatus: *SERVICE_STATUS_HANDLE__,
    dwServiceBits: u32,
    bSetBitsOn: BOOL,
    bUpdateImmediately: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ImpersonateNamedPipeClient(
    hNamedPipe: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SetThreadToken(
    Thread: ?*HANDLE,
    Token: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn OpenProcessToken(
    ProcessHandle: HANDLE,
    DesiredAccess: u32,
    TokenHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn OpenThreadToken(
    ThreadHandle: HANDLE,
    DesiredAccess: u32,
    OpenAsSelf: BOOL,
    TokenHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn InstallELAMCertificateInfo(
    ELAMFile: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AccessCheckAndAuditAlarmA(
    SubsystemName: [*:0]const u8,
    HandleId: ?*c_void,
    ObjectTypeName: PSTR,
    ObjectName: ?PSTR,
    SecurityDescriptor: *c_void,
    DesiredAccess: u32,
    GenericMapping: *GENERIC_MAPPING,
    ObjectCreation: BOOL,
    GrantedAccess: *u32,
    AccessStatus: *i32,
    pfGenerateOnClose: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AccessCheckByTypeAndAuditAlarmA(
    SubsystemName: [*:0]const u8,
    HandleId: *c_void,
    ObjectTypeName: [*:0]const u8,
    ObjectName: ?[*:0]const u8,
    SecurityDescriptor: *c_void,
    PrincipalSelfSid: ?*c_void,
    DesiredAccess: u32,
    AuditType: AUDIT_EVENT_TYPE,
    Flags: u32,
    ObjectTypeList: ?[*]OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    GenericMapping: *GENERIC_MAPPING,
    ObjectCreation: BOOL,
    GrantedAccess: *u32,
    AccessStatus: *i32,
    pfGenerateOnClose: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AccessCheckByTypeResultListAndAuditAlarmA(
    SubsystemName: [*:0]const u8,
    HandleId: *c_void,
    ObjectTypeName: [*:0]const u8,
    ObjectName: ?[*:0]const u8,
    SecurityDescriptor: *c_void,
    PrincipalSelfSid: ?*c_void,
    DesiredAccess: u32,
    AuditType: AUDIT_EVENT_TYPE,
    Flags: u32,
    ObjectTypeList: ?[*]OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    GenericMapping: *GENERIC_MAPPING,
    ObjectCreation: BOOL,
    GrantedAccess: [*]u32,
    AccessStatusList: [*]u32,
    pfGenerateOnClose: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AccessCheckByTypeResultListAndAuditAlarmByHandleA(
    SubsystemName: [*:0]const u8,
    HandleId: *c_void,
    ClientToken: HANDLE,
    ObjectTypeName: [*:0]const u8,
    ObjectName: ?[*:0]const u8,
    SecurityDescriptor: *c_void,
    PrincipalSelfSid: ?*c_void,
    DesiredAccess: u32,
    AuditType: AUDIT_EVENT_TYPE,
    Flags: u32,
    ObjectTypeList: ?[*]OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    GenericMapping: *GENERIC_MAPPING,
    ObjectCreation: BOOL,
    GrantedAccess: [*]u32,
    AccessStatusList: [*]u32,
    pfGenerateOnClose: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ObjectOpenAuditAlarmA(
    SubsystemName: [*:0]const u8,
    HandleId: *c_void,
    ObjectTypeName: PSTR,
    ObjectName: ?PSTR,
    pSecurityDescriptor: *c_void,
    ClientToken: HANDLE,
    DesiredAccess: u32,
    GrantedAccess: u32,
    Privileges: ?*PRIVILEGE_SET,
    ObjectCreation: BOOL,
    AccessGranted: BOOL,
    GenerateOnClose: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ObjectPrivilegeAuditAlarmA(
    SubsystemName: [*:0]const u8,
    HandleId: *c_void,
    ClientToken: HANDLE,
    DesiredAccess: u32,
    Privileges: *PRIVILEGE_SET,
    AccessGranted: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ObjectCloseAuditAlarmA(
    SubsystemName: [*:0]const u8,
    HandleId: *c_void,
    GenerateOnClose: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn ObjectDeleteAuditAlarmA(
    SubsystemName: [*:0]const u8,
    HandleId: *c_void,
    GenerateOnClose: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn PrivilegedServiceAuditAlarmA(
    SubsystemName: [*:0]const u8,
    ServiceName: [*:0]const u8,
    ClientToken: HANDLE,
    Privileges: *PRIVILEGE_SET,
    AccessGranted: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn AddConditionalAce(
    pAcl: *ACL,
    dwAceRevision: u32,
    AceFlags: u32,
    AceType: u8,
    AccessMask: u32,
    pSid: *c_void,
    ConditionStr: [*]u16,
    ReturnLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn SetFileSecurityA(
    lpFileName: [*:0]const u8,
    SecurityInformation: u32,
    pSecurityDescriptor: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn GetFileSecurityA(
    lpFileName: [*:0]const u8,
    RequestedInformation: u32,
    pSecurityDescriptor: ?[*]u8,
    nLength: u32,
    lpnLengthNeeded: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn LookupAccountSidA(
    lpSystemName: ?[*:0]const u8,
    Sid: *c_void,
    Name: ?[*:0]u8,
    cchName: *u32,
    ReferencedDomainName: ?[*:0]u8,
    cchReferencedDomainName: *u32,
    peUse: *SID_NAME_USE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn LookupAccountSidW(
    lpSystemName: ?[*:0]const u16,
    Sid: *c_void,
    Name: ?[*:0]u16,
    cchName: *u32,
    ReferencedDomainName: ?[*:0]u16,
    cchReferencedDomainName: *u32,
    peUse: *SID_NAME_USE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn LookupAccountNameA(
    lpSystemName: ?[*:0]const u8,
    lpAccountName: [*:0]const u8,
    Sid: ?[*]u8,
    cbSid: *u32,
    ReferencedDomainName: ?[*:0]u8,
    cchReferencedDomainName: *u32,
    peUse: *SID_NAME_USE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn LookupAccountNameW(
    lpSystemName: ?[*:0]const u16,
    lpAccountName: [*:0]const u16,
    Sid: ?[*]u8,
    cbSid: *u32,
    ReferencedDomainName: ?[*:0]u16,
    cchReferencedDomainName: *u32,
    peUse: *SID_NAME_USE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn LookupPrivilegeValueA(
    lpSystemName: ?[*:0]const u8,
    lpName: [*:0]const u8,
    lpLuid: *LUID,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn LookupPrivilegeValueW(
    lpSystemName: ?[*:0]const u16,
    lpName: [*:0]const u16,
    lpLuid: *LUID,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn LookupPrivilegeNameA(
    lpSystemName: ?[*:0]const u8,
    lpLuid: *LUID,
    lpName: ?[*:0]u8,
    cchName: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn LookupPrivilegeNameW(
    lpSystemName: ?[*:0]const u16,
    lpLuid: *LUID,
    lpName: ?[*:0]u16,
    cchName: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn LookupPrivilegeDisplayNameA(
    lpSystemName: ?[*:0]const u8,
    lpName: [*:0]const u8,
    lpDisplayName: ?[*:0]u8,
    cchDisplayName: *u32,
    lpLanguageId: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn LookupPrivilegeDisplayNameW(
    lpSystemName: ?[*:0]const u16,
    lpName: [*:0]const u16,
    lpDisplayName: ?[*:0]u16,
    cchDisplayName: *u32,
    lpLanguageId: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn LogonUserA(
    lpszUsername: [*:0]const u8,
    lpszDomain: ?[*:0]const u8,
    lpszPassword: ?[*:0]const u8,
    dwLogonType: u32,
    dwLogonProvider: u32,
    phToken: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn LogonUserW(
    lpszUsername: [*:0]const u16,
    lpszDomain: ?[*:0]const u16,
    lpszPassword: ?[*:0]const u16,
    dwLogonType: u32,
    dwLogonProvider: u32,
    phToken: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn LogonUserExA(
    lpszUsername: [*:0]const u8,
    lpszDomain: ?[*:0]const u8,
    lpszPassword: ?[*:0]const u8,
    dwLogonType: u32,
    dwLogonProvider: u32,
    phToken: ?*HANDLE,
    ppLogonSid: ?*?*c_void,
    ppProfileBuffer: ?[*]?*c_void,
    pdwProfileLength: ?*u32,
    pQuotaLimits: ?*QUOTA_LIMITS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn LogonUserExW(
    lpszUsername: [*:0]const u16,
    lpszDomain: ?[*:0]const u16,
    lpszPassword: ?[*:0]const u16,
    dwLogonType: u32,
    dwLogonProvider: u32,
    phToken: ?*HANDLE,
    ppLogonSid: ?*?*c_void,
    ppProfileBuffer: ?[*]?*c_void,
    pdwProfileLength: ?*u32,
    pQuotaLimits: ?*QUOTA_LIMITS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn RegGetKeySecurity(
    hKey: HKEY,
    SecurityInformation: u32,
    pSecurityDescriptor: ?[*]u8,
    lpcbSecurityDescriptor: *u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "ADVAPI32" fn RegSetKeySecurity(
    hKey: HKEY,
    SecurityInformation: u32,
    pSecurityDescriptor: *c_void,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "ntdll" fn RtlConvertSidToUnicodeString(
    UnicodeString: *UNICODE_STRING,
    Sid: *c_void,
    AllocateDestinationString: u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (221)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const SEC_WINNT_AUTH_IDENTITY_ = SEC_WINNT_AUTH_IDENTITY_A;
        pub const CRYPT_PASSWORD_CREDENTIALS = CRYPT_PASSWORD_CREDENTIALSA;
        pub const SCARD_READERSTATE = SCARD_READERSTATEA;
        pub const LPOCNCONNPROC = LPOCNCONNPROCA;
        pub const OPENCARD_SEARCH_CRITERIA = OPENCARD_SEARCH_CRITERIAA;
        pub const OPENCARDNAME_EX = OPENCARDNAME_EXA;
        pub const OPENCARDNAME = OPENCARDNAMEA;
        pub const SERVICE_DESCRIPTION = SERVICE_DESCRIPTIONA;
        pub const SERVICE_FAILURE_ACTIONS = SERVICE_FAILURE_ACTIONSA;
        pub const SERVICE_REQUIRED_PRIVILEGES_INFO = SERVICE_REQUIRED_PRIVILEGES_INFOA;
        pub const ENUM_SERVICE_STATUS = ENUM_SERVICE_STATUSA;
        pub const ENUM_SERVICE_STATUS_PROCESS = ENUM_SERVICE_STATUS_PROCESSA;
        pub const QUERY_SERVICE_LOCK_STATUS = QUERY_SERVICE_LOCK_STATUSA;
        pub const QUERY_SERVICE_CONFIG = QUERY_SERVICE_CONFIGA;
        pub const SERVICE_MAIN_FUNCTION = SERVICE_MAIN_FUNCTIONA;
        pub const LPSERVICE_MAIN_FUNCTION = LPSERVICE_MAIN_FUNCTIONA;
        pub const SERVICE_TABLE_ENTRY = SERVICE_TABLE_ENTRYA;
        pub const SERVICE_NOTIFY_2 = SERVICE_NOTIFY_2A;
        pub const SERVICE_CONTROL_STATUS_REASON_PARAMS = SERVICE_CONTROL_STATUS_REASON_PARAMSA;
        pub const SecPkgInfo = SecPkgInfoA;
        pub const SecPkgCredentials_Names = SecPkgCredentials_NamesA;
        pub const SecPkgCredentials_SSIProvider = SecPkgCredentials_SSIProviderA;
        pub const SecPkgContext_Names = SecPkgContext_NamesA;
        pub const SecPkgContext_KeyInfo = SecPkgContext_KeyInfoA;
        pub const SecPkgContext_Authority = SecPkgContext_AuthorityA;
        pub const SecPkgContext_ProtoInfo = SecPkgContext_ProtoInfoA;
        pub const SecPkgContext_PackageInfo = SecPkgContext_PackageInfoA;
        pub const SecPkgContext_NegotiationInfo = SecPkgContext_NegotiationInfoA;
        pub const SecPkgContext_NativeNames = SecPkgContext_NativeNamesA;
        pub const SecPkgContext_CredentialName = SecPkgContext_CredentialNameA;
        pub const ACQUIRE_CREDENTIALS_HANDLE_FN_ = ACQUIRE_CREDENTIALS_HANDLE_FN_A;
        pub const ADD_CREDENTIALS_FN_ = ADD_CREDENTIALS_FN_A;
        pub const CHANGE_PASSWORD_FN_ = CHANGE_PASSWORD_FN_A;
        pub const INITIALIZE_SECURITY_CONTEXT_FN_ = INITIALIZE_SECURITY_CONTEXT_FN_A;
        pub const QUERY_CONTEXT_ATTRIBUTES_FN_ = QUERY_CONTEXT_ATTRIBUTES_FN_A;
        pub const QUERY_CONTEXT_ATTRIBUTES_EX_FN_ = QUERY_CONTEXT_ATTRIBUTES_EX_FN_A;
        pub const SET_CONTEXT_ATTRIBUTES_FN_ = SET_CONTEXT_ATTRIBUTES_FN_A;
        pub const QUERY_CREDENTIALS_ATTRIBUTES_FN_ = QUERY_CREDENTIALS_ATTRIBUTES_FN_A;
        pub const QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_ = QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_A;
        pub const SET_CREDENTIALS_ATTRIBUTES_FN_ = SET_CREDENTIALS_ATTRIBUTES_FN_A;
        pub const ENUMERATE_SECURITY_PACKAGES_FN_ = ENUMERATE_SECURITY_PACKAGES_FN_A;
        pub const QUERY_SECURITY_PACKAGE_INFO_FN_ = QUERY_SECURITY_PACKAGE_INFO_FN_A;
        pub const IMPORT_SECURITY_CONTEXT_FN_ = IMPORT_SECURITY_CONTEXT_FN_A;
        pub const SecurityFunctionTable = SecurityFunctionTableA;
        pub const INIT_SECURITY_INTERFACE_ = INIT_SECURITY_INTERFACE_A;
        pub const SEC_WINNT_AUTH_IDENTITY_EX = SEC_WINNT_AUTH_IDENTITY_EXA;
        pub const CREDENTIAL_ATTRIBUTE = CREDENTIAL_ATTRIBUTEA;
        pub const CREDENTIAL = CREDENTIALA;
        pub const CREDENTIAL_TARGET_INFORMATION = CREDENTIAL_TARGET_INFORMATIONA;
        pub const CREDUI_INFO = CREDUI_INFOA;
        pub const SSL_EMPTY_CACHE_FN_ = SSL_EMPTY_CACHE_FN_A;
        pub const OBJECTS_AND_NAME_ = OBJECTS_AND_NAME_A;
        pub const TRUSTEE_ = TRUSTEE_A;
        pub const EXPLICIT_ACCESS_ = EXPLICIT_ACCESS_A;
        pub const TRUSTEE_ACCESS = TRUSTEE_ACCESSA;
        pub const ACTRL_ACCESS_INFO = ACTRL_ACCESS_INFOA;
        pub const ACTRL_CONTROL_INFO = ACTRL_CONTROL_INFOA;
        pub const INHERITED_FROM = INHERITED_FROMA;
        pub const CERT_SELECT_STRUCT_ = CERT_SELECT_STRUCT_A;
        pub const CERT_VIEWPROPERTIES_STRUCT_ = CERT_VIEWPROPERTIES_STRUCT_A;
        pub const CRYPTUI_VIEWCERTIFICATE_STRUCT = CRYPTUI_VIEWCERTIFICATE_STRUCTA;
        pub const NETRESOURCE = NETRESOURCEA;
        pub const UNIVERSAL_NAME_INFO = UNIVERSAL_NAME_INFOA;
        pub const REMOTE_NAME_INFO = REMOTE_NAME_INFOA;
        pub const AccessCheckAndAuditAlarm = AccessCheckAndAuditAlarmA;
        pub const AccessCheckByTypeAndAuditAlarm = AccessCheckByTypeAndAuditAlarmA;
        pub const AccessCheckByTypeResultListAndAuditAlarm = AccessCheckByTypeResultListAndAuditAlarmA;
        pub const AccessCheckByTypeResultListAndAuditAlarmByHandle = AccessCheckByTypeResultListAndAuditAlarmByHandleA;
        pub const GetFileSecurity = GetFileSecurityA;
        pub const ObjectCloseAuditAlarm = ObjectCloseAuditAlarmA;
        pub const ObjectDeleteAuditAlarm = ObjectDeleteAuditAlarmA;
        pub const ObjectOpenAuditAlarm = ObjectOpenAuditAlarmA;
        pub const ObjectPrivilegeAuditAlarm = ObjectPrivilegeAuditAlarmA;
        pub const PrivilegedServiceAuditAlarm = PrivilegedServiceAuditAlarmA;
        pub const SetFileSecurity = SetFileSecurityA;
        pub const CryptAcquireContext = CryptAcquireContextA;
        pub const CryptSignHash = CryptSignHashA;
        pub const CryptVerifySignature = CryptVerifySignatureA;
        pub const CryptSetProvider = CryptSetProviderA;
        pub const CryptSetProviderEx = CryptSetProviderExA;
        pub const CryptGetDefaultProvider = CryptGetDefaultProviderA;
        pub const CryptEnumProviderTypes = CryptEnumProviderTypesA;
        pub const CryptEnumProviders = CryptEnumProvidersA;
        pub const CertRDNValueToStr = CertRDNValueToStrA;
        pub const CertNameToStr = CertNameToStrA;
        pub const CertStrToName = CertStrToNameA;
        pub const CertGetNameString = CertGetNameStringA;
        pub const CertOpenSystemStore = CertOpenSystemStoreA;
        pub const CertAddEncodedCertificateToSystemStore = CertAddEncodedCertificateToSystemStoreA;
        pub const CryptRetrieveObjectByUrl = CryptRetrieveObjectByUrlA;
        pub const CryptStringToBinary = CryptStringToBinaryA;
        pub const CryptBinaryToString = CryptBinaryToStringA;
        pub const SCardListReaderGroups = SCardListReaderGroupsA;
        pub const SCardListReaders = SCardListReadersA;
        pub const SCardListCards = SCardListCardsA;
        pub const SCardListInterfaces = SCardListInterfacesA;
        pub const SCardGetProviderId = SCardGetProviderIdA;
        pub const SCardGetCardTypeProviderName = SCardGetCardTypeProviderNameA;
        pub const SCardIntroduceReaderGroup = SCardIntroduceReaderGroupA;
        pub const SCardForgetReaderGroup = SCardForgetReaderGroupA;
        pub const SCardIntroduceReader = SCardIntroduceReaderA;
        pub const SCardForgetReader = SCardForgetReaderA;
        pub const SCardAddReaderToGroup = SCardAddReaderToGroupA;
        pub const SCardRemoveReaderFromGroup = SCardRemoveReaderFromGroupA;
        pub const SCardIntroduceCardType = SCardIntroduceCardTypeA;
        pub const SCardSetCardTypeProviderName = SCardSetCardTypeProviderNameA;
        pub const SCardForgetCardType = SCardForgetCardTypeA;
        pub const SCardLocateCards = SCardLocateCardsA;
        pub const SCardLocateCardsByATR = SCardLocateCardsByATRA;
        pub const SCardGetStatusChange = SCardGetStatusChangeA;
        pub const SCardConnect = SCardConnectA;
        pub const SCardStatus = SCardStatusA;
        pub const SCardUIDlgSelectCard = SCardUIDlgSelectCardA;
        pub const GetOpenCardName = GetOpenCardNameA;
        pub const SCardReadCache = SCardReadCacheA;
        pub const SCardWriteCache = SCardWriteCacheA;
        pub const SCardGetReaderIcon = SCardGetReaderIconA;
        pub const SCardGetDeviceTypeId = SCardGetDeviceTypeIdA;
        pub const SCardGetReaderDeviceInstanceId = SCardGetReaderDeviceInstanceIdA;
        pub const SCardListReadersWithDeviceInstanceId = SCardListReadersWithDeviceInstanceIdA;
        pub const ChangeServiceConfig2 = ChangeServiceConfig2A;
        pub const EnumDependentServices = EnumDependentServicesA;
        pub const EnumServicesStatus = EnumServicesStatusA;
        pub const EnumServicesStatusEx = EnumServicesStatusExA;
        pub const GetServiceKeyName = GetServiceKeyNameA;
        pub const GetServiceDisplayName = GetServiceDisplayNameA;
        pub const OpenSCManager = OpenSCManagerA;
        pub const OpenService = OpenServiceA;
        pub const QueryServiceConfig = QueryServiceConfigA;
        pub const QueryServiceConfig2 = QueryServiceConfig2A;
        pub const QueryServiceLockStatus = QueryServiceLockStatusA;
        pub const RegisterServiceCtrlHandler = RegisterServiceCtrlHandlerA;
        pub const RegisterServiceCtrlHandlerEx = RegisterServiceCtrlHandlerExA;
        pub const StartServiceCtrlDispatcher = StartServiceCtrlDispatcherA;
        pub const StartService = StartServiceA;
        pub const NotifyServiceStatusChange = NotifyServiceStatusChangeA;
        pub const ControlServiceEx = ControlServiceExA;
        pub const AuditLookupCategoryName = AuditLookupCategoryNameA;
        pub const AuditLookupSubCategoryName = AuditLookupSubCategoryNameA;
        pub const AuditSetGlobalSacl = AuditSetGlobalSaclA;
        pub const AuditQueryGlobalSacl = AuditQueryGlobalSaclA;
        pub const AcquireCredentialsHandle = AcquireCredentialsHandleA;
        pub const AddCredentials = AddCredentialsA;
        pub const ChangeAccountPassword = ChangeAccountPasswordA;
        pub const InitializeSecurityContext = InitializeSecurityContextA;
        pub const QueryContextAttributes = QueryContextAttributesA;
        pub const QueryContextAttributesEx = QueryContextAttributesExA;
        pub const SetContextAttributes = SetContextAttributesA;
        pub const QueryCredentialsAttributes = QueryCredentialsAttributesA;
        pub const QueryCredentialsAttributesEx = QueryCredentialsAttributesExA;
        pub const SetCredentialsAttributes = SetCredentialsAttributesA;
        pub const EnumerateSecurityPackages = EnumerateSecurityPackagesA;
        pub const QuerySecurityPackageInfo = QuerySecurityPackageInfoA;
        pub const ImportSecurityContext = ImportSecurityContextA;
        pub const InitSecurityInterface = InitSecurityInterfaceA;
        pub const SaslEnumerateProfiles = SaslEnumerateProfilesA;
        pub const SaslGetProfilePackage = SaslGetProfilePackageA;
        pub const SaslIdentifyPackage = SaslIdentifyPackageA;
        pub const SaslInitializeSecurityContext = SaslInitializeSecurityContextA;
        pub const SspiPromptForCredentials = SspiPromptForCredentialsA;
        pub const AddSecurityPackage = AddSecurityPackageA;
        pub const DeleteSecurityPackage = DeleteSecurityPackageA;
        pub const CredWrite = CredWriteA;
        pub const CredRead = CredReadA;
        pub const CredEnumerate = CredEnumerateA;
        pub const CredWriteDomainCredentials = CredWriteDomainCredentialsA;
        pub const CredReadDomainCredentials = CredReadDomainCredentialsA;
        pub const CredDelete = CredDeleteA;
        pub const CredRename = CredRenameA;
        pub const CredGetTargetInfo = CredGetTargetInfoA;
        pub const CredMarshalCredential = CredMarshalCredentialA;
        pub const CredUnmarshalCredential = CredUnmarshalCredentialA;
        pub const CredIsMarshaledCredential = CredIsMarshaledCredentialA;
        pub const CredUnPackAuthenticationBuffer = CredUnPackAuthenticationBufferA;
        pub const CredPackAuthenticationBuffer = CredPackAuthenticationBufferA;
        pub const CredProtect = CredProtectA;
        pub const CredUnprotect = CredUnprotectA;
        pub const CredIsProtected = CredIsProtectedA;
        pub const CredFindBestCredential = CredFindBestCredentialA;
        pub const CredUIPromptForCredentials = CredUIPromptForCredentialsA;
        pub const CredUIPromptForWindowsCredentials = CredUIPromptForWindowsCredentialsA;
        pub const CredUIParseUserName = CredUIParseUserNameA;
        pub const CredUICmdLinePromptForCredentials = CredUICmdLinePromptForCredentialsA;
        pub const CredUIConfirmCredentials = CredUIConfirmCredentialsA;
        pub const SslEmptyCache = SslEmptyCacheA;
        pub const WNetSetLastError = WNetSetLastErrorA;
        pub const SetEntriesInAcl = SetEntriesInAclA;
        pub const GetExplicitEntriesFromAcl = GetExplicitEntriesFromAclA;
        pub const GetEffectiveRightsFromAcl = GetEffectiveRightsFromAclA;
        pub const GetAuditedPermissionsFromAcl = GetAuditedPermissionsFromAclA;
        pub const GetNamedSecurityInfo = GetNamedSecurityInfoA;
        pub const SetNamedSecurityInfo = SetNamedSecurityInfoA;
        pub const GetInheritanceSource = GetInheritanceSourceA;
        pub const TreeResetNamedSecurityInfo = TreeResetNamedSecurityInfoA;
        pub const TreeSetNamedSecurityInfo = TreeSetNamedSecurityInfoA;
        pub const BuildSecurityDescriptor = BuildSecurityDescriptorA;
        pub const LookupSecurityDescriptorParts = LookupSecurityDescriptorPartsA;
        pub const BuildExplicitAccessWithName = BuildExplicitAccessWithNameA;
        pub const BuildImpersonateExplicitAccessWithName = BuildImpersonateExplicitAccessWithNameA;
        pub const BuildTrusteeWithName = BuildTrusteeWithNameA;
        pub const BuildImpersonateTrustee = BuildImpersonateTrusteeA;
        pub const BuildTrusteeWithSid = BuildTrusteeWithSidA;
        pub const BuildTrusteeWithObjectsAndSid = BuildTrusteeWithObjectsAndSidA;
        pub const BuildTrusteeWithObjectsAndName = BuildTrusteeWithObjectsAndNameA;
        pub const GetTrusteeName = GetTrusteeNameA;
        pub const GetTrusteeType = GetTrusteeTypeA;
        pub const GetTrusteeForm = GetTrusteeFormA;
        pub const GetMultipleTrusteeOperation = GetMultipleTrusteeOperationA;
        pub const GetMultipleTrustee = GetMultipleTrusteeA;
        pub const ConvertSidToStringSid = ConvertSidToStringSidA;
        pub const ConvertStringSidToSid = ConvertStringSidToSidA;
        pub const ConvertStringSecurityDescriptorToSecurityDescriptor = ConvertStringSecurityDescriptorToSecurityDescriptorA;
        pub const ConvertSecurityDescriptorToStringSecurityDescriptor = ConvertSecurityDescriptorToStringSecurityDescriptorA;
        pub const CryptUIDlgViewCertificate = CryptUIDlgViewCertificateA;
        pub const LookupAccountSid = LookupAccountSidA;
        pub const LookupAccountName = LookupAccountNameA;
        pub const LookupPrivilegeValue = LookupPrivilegeValueA;
        pub const LookupPrivilegeName = LookupPrivilegeNameA;
        pub const LookupPrivilegeDisplayName = LookupPrivilegeDisplayNameA;
        pub const LogonUser = LogonUserA;
        pub const LogonUserEx = LogonUserExA;
    },
    .wide => struct {
        pub const SEC_WINNT_AUTH_IDENTITY_ = SEC_WINNT_AUTH_IDENTITY_W;
        pub const CRYPT_PASSWORD_CREDENTIALS = CRYPT_PASSWORD_CREDENTIALSW;
        pub const SCARD_READERSTATE = SCARD_READERSTATEW;
        pub const LPOCNCONNPROC = LPOCNCONNPROCW;
        pub const OPENCARD_SEARCH_CRITERIA = OPENCARD_SEARCH_CRITERIAW;
        pub const OPENCARDNAME_EX = OPENCARDNAME_EXW;
        pub const OPENCARDNAME = OPENCARDNAMEW;
        pub const SERVICE_DESCRIPTION = SERVICE_DESCRIPTIONW;
        pub const SERVICE_FAILURE_ACTIONS = SERVICE_FAILURE_ACTIONSW;
        pub const SERVICE_REQUIRED_PRIVILEGES_INFO = SERVICE_REQUIRED_PRIVILEGES_INFOW;
        pub const ENUM_SERVICE_STATUS = ENUM_SERVICE_STATUSW;
        pub const ENUM_SERVICE_STATUS_PROCESS = ENUM_SERVICE_STATUS_PROCESSW;
        pub const QUERY_SERVICE_LOCK_STATUS = QUERY_SERVICE_LOCK_STATUSW;
        pub const QUERY_SERVICE_CONFIG = QUERY_SERVICE_CONFIGW;
        pub const SERVICE_MAIN_FUNCTION = SERVICE_MAIN_FUNCTIONW;
        pub const LPSERVICE_MAIN_FUNCTION = LPSERVICE_MAIN_FUNCTIONW;
        pub const SERVICE_TABLE_ENTRY = SERVICE_TABLE_ENTRYW;
        pub const SERVICE_NOTIFY_2 = SERVICE_NOTIFY_2W;
        pub const SERVICE_CONTROL_STATUS_REASON_PARAMS = SERVICE_CONTROL_STATUS_REASON_PARAMSW;
        pub const SecPkgInfo = SecPkgInfoW;
        pub const SecPkgCredentials_Names = SecPkgCredentials_NamesW;
        pub const SecPkgCredentials_SSIProvider = SecPkgCredentials_SSIProviderW;
        pub const SecPkgContext_Names = SecPkgContext_NamesW;
        pub const SecPkgContext_KeyInfo = SecPkgContext_KeyInfoW;
        pub const SecPkgContext_Authority = SecPkgContext_AuthorityW;
        pub const SecPkgContext_ProtoInfo = SecPkgContext_ProtoInfoW;
        pub const SecPkgContext_PackageInfo = SecPkgContext_PackageInfoW;
        pub const SecPkgContext_NegotiationInfo = SecPkgContext_NegotiationInfoW;
        pub const SecPkgContext_NativeNames = SecPkgContext_NativeNamesW;
        pub const SecPkgContext_CredentialName = SecPkgContext_CredentialNameW;
        pub const ACQUIRE_CREDENTIALS_HANDLE_FN_ = ACQUIRE_CREDENTIALS_HANDLE_FN_W;
        pub const ADD_CREDENTIALS_FN_ = ADD_CREDENTIALS_FN_W;
        pub const CHANGE_PASSWORD_FN_ = CHANGE_PASSWORD_FN_W;
        pub const INITIALIZE_SECURITY_CONTEXT_FN_ = INITIALIZE_SECURITY_CONTEXT_FN_W;
        pub const QUERY_CONTEXT_ATTRIBUTES_FN_ = QUERY_CONTEXT_ATTRIBUTES_FN_W;
        pub const QUERY_CONTEXT_ATTRIBUTES_EX_FN_ = QUERY_CONTEXT_ATTRIBUTES_EX_FN_W;
        pub const SET_CONTEXT_ATTRIBUTES_FN_ = SET_CONTEXT_ATTRIBUTES_FN_W;
        pub const QUERY_CREDENTIALS_ATTRIBUTES_FN_ = QUERY_CREDENTIALS_ATTRIBUTES_FN_W;
        pub const QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_ = QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W;
        pub const SET_CREDENTIALS_ATTRIBUTES_FN_ = SET_CREDENTIALS_ATTRIBUTES_FN_W;
        pub const ENUMERATE_SECURITY_PACKAGES_FN_ = ENUMERATE_SECURITY_PACKAGES_FN_W;
        pub const QUERY_SECURITY_PACKAGE_INFO_FN_ = QUERY_SECURITY_PACKAGE_INFO_FN_W;
        pub const IMPORT_SECURITY_CONTEXT_FN_ = IMPORT_SECURITY_CONTEXT_FN_W;
        pub const SecurityFunctionTable = SecurityFunctionTableW;
        pub const INIT_SECURITY_INTERFACE_ = INIT_SECURITY_INTERFACE_W;
        pub const SEC_WINNT_AUTH_IDENTITY_EX = SEC_WINNT_AUTH_IDENTITY_EXW;
        pub const CREDENTIAL_ATTRIBUTE = CREDENTIAL_ATTRIBUTEW;
        pub const CREDENTIAL = CREDENTIALW;
        pub const CREDENTIAL_TARGET_INFORMATION = CREDENTIAL_TARGET_INFORMATIONW;
        pub const CREDUI_INFO = CREDUI_INFOW;
        pub const SSL_EMPTY_CACHE_FN_ = SSL_EMPTY_CACHE_FN_W;
        pub const OBJECTS_AND_NAME_ = OBJECTS_AND_NAME_W;
        pub const TRUSTEE_ = TRUSTEE_W;
        pub const EXPLICIT_ACCESS_ = EXPLICIT_ACCESS_W;
        pub const TRUSTEE_ACCESS = TRUSTEE_ACCESSW;
        pub const ACTRL_ACCESS_INFO = ACTRL_ACCESS_INFOW;
        pub const ACTRL_CONTROL_INFO = ACTRL_CONTROL_INFOW;
        pub const INHERITED_FROM = INHERITED_FROMW;
        pub const CERT_SELECT_STRUCT_ = CERT_SELECT_STRUCT_W;
        pub const CERT_VIEWPROPERTIES_STRUCT_ = CERT_VIEWPROPERTIES_STRUCT_W;
        pub const CRYPTUI_VIEWCERTIFICATE_STRUCT = CRYPTUI_VIEWCERTIFICATE_STRUCTW;
        pub const NETRESOURCE = NETRESOURCEW;
        pub const UNIVERSAL_NAME_INFO = UNIVERSAL_NAME_INFOW;
        pub const REMOTE_NAME_INFO = REMOTE_NAME_INFOW;
        pub const AccessCheckAndAuditAlarm = AccessCheckAndAuditAlarmW;
        pub const AccessCheckByTypeAndAuditAlarm = AccessCheckByTypeAndAuditAlarmW;
        pub const AccessCheckByTypeResultListAndAuditAlarm = AccessCheckByTypeResultListAndAuditAlarmW;
        pub const AccessCheckByTypeResultListAndAuditAlarmByHandle = AccessCheckByTypeResultListAndAuditAlarmByHandleW;
        pub const GetFileSecurity = GetFileSecurityW;
        pub const ObjectCloseAuditAlarm = ObjectCloseAuditAlarmW;
        pub const ObjectDeleteAuditAlarm = ObjectDeleteAuditAlarmW;
        pub const ObjectOpenAuditAlarm = ObjectOpenAuditAlarmW;
        pub const ObjectPrivilegeAuditAlarm = ObjectPrivilegeAuditAlarmW;
        pub const PrivilegedServiceAuditAlarm = PrivilegedServiceAuditAlarmW;
        pub const SetFileSecurity = SetFileSecurityW;
        pub const CryptAcquireContext = CryptAcquireContextW;
        pub const CryptSignHash = CryptSignHashW;
        pub const CryptVerifySignature = CryptVerifySignatureW;
        pub const CryptSetProvider = CryptSetProviderW;
        pub const CryptSetProviderEx = CryptSetProviderExW;
        pub const CryptGetDefaultProvider = CryptGetDefaultProviderW;
        pub const CryptEnumProviderTypes = CryptEnumProviderTypesW;
        pub const CryptEnumProviders = CryptEnumProvidersW;
        pub const CertRDNValueToStr = CertRDNValueToStrW;
        pub const CertNameToStr = CertNameToStrW;
        pub const CertStrToName = CertStrToNameW;
        pub const CertGetNameString = CertGetNameStringW;
        pub const CertOpenSystemStore = CertOpenSystemStoreW;
        pub const CertAddEncodedCertificateToSystemStore = CertAddEncodedCertificateToSystemStoreW;
        pub const CryptRetrieveObjectByUrl = CryptRetrieveObjectByUrlW;
        pub const CryptStringToBinary = CryptStringToBinaryW;
        pub const CryptBinaryToString = CryptBinaryToStringW;
        pub const SCardListReaderGroups = SCardListReaderGroupsW;
        pub const SCardListReaders = SCardListReadersW;
        pub const SCardListCards = SCardListCardsW;
        pub const SCardListInterfaces = SCardListInterfacesW;
        pub const SCardGetProviderId = SCardGetProviderIdW;
        pub const SCardGetCardTypeProviderName = SCardGetCardTypeProviderNameW;
        pub const SCardIntroduceReaderGroup = SCardIntroduceReaderGroupW;
        pub const SCardForgetReaderGroup = SCardForgetReaderGroupW;
        pub const SCardIntroduceReader = SCardIntroduceReaderW;
        pub const SCardForgetReader = SCardForgetReaderW;
        pub const SCardAddReaderToGroup = SCardAddReaderToGroupW;
        pub const SCardRemoveReaderFromGroup = SCardRemoveReaderFromGroupW;
        pub const SCardIntroduceCardType = SCardIntroduceCardTypeW;
        pub const SCardSetCardTypeProviderName = SCardSetCardTypeProviderNameW;
        pub const SCardForgetCardType = SCardForgetCardTypeW;
        pub const SCardLocateCards = SCardLocateCardsW;
        pub const SCardLocateCardsByATR = SCardLocateCardsByATRW;
        pub const SCardGetStatusChange = SCardGetStatusChangeW;
        pub const SCardConnect = SCardConnectW;
        pub const SCardStatus = SCardStatusW;
        pub const SCardUIDlgSelectCard = SCardUIDlgSelectCardW;
        pub const GetOpenCardName = GetOpenCardNameW;
        pub const SCardReadCache = SCardReadCacheW;
        pub const SCardWriteCache = SCardWriteCacheW;
        pub const SCardGetReaderIcon = SCardGetReaderIconW;
        pub const SCardGetDeviceTypeId = SCardGetDeviceTypeIdW;
        pub const SCardGetReaderDeviceInstanceId = SCardGetReaderDeviceInstanceIdW;
        pub const SCardListReadersWithDeviceInstanceId = SCardListReadersWithDeviceInstanceIdW;
        pub const ChangeServiceConfig2 = ChangeServiceConfig2W;
        pub const EnumDependentServices = EnumDependentServicesW;
        pub const EnumServicesStatus = EnumServicesStatusW;
        pub const EnumServicesStatusEx = EnumServicesStatusExW;
        pub const GetServiceKeyName = GetServiceKeyNameW;
        pub const GetServiceDisplayName = GetServiceDisplayNameW;
        pub const OpenSCManager = OpenSCManagerW;
        pub const OpenService = OpenServiceW;
        pub const QueryServiceConfig = QueryServiceConfigW;
        pub const QueryServiceConfig2 = QueryServiceConfig2W;
        pub const QueryServiceLockStatus = QueryServiceLockStatusW;
        pub const RegisterServiceCtrlHandler = RegisterServiceCtrlHandlerW;
        pub const RegisterServiceCtrlHandlerEx = RegisterServiceCtrlHandlerExW;
        pub const StartServiceCtrlDispatcher = StartServiceCtrlDispatcherW;
        pub const StartService = StartServiceW;
        pub const NotifyServiceStatusChange = NotifyServiceStatusChangeW;
        pub const ControlServiceEx = ControlServiceExW;
        pub const AuditLookupCategoryName = AuditLookupCategoryNameW;
        pub const AuditLookupSubCategoryName = AuditLookupSubCategoryNameW;
        pub const AuditSetGlobalSacl = AuditSetGlobalSaclW;
        pub const AuditQueryGlobalSacl = AuditQueryGlobalSaclW;
        pub const AcquireCredentialsHandle = AcquireCredentialsHandleW;
        pub const AddCredentials = AddCredentialsW;
        pub const ChangeAccountPassword = ChangeAccountPasswordW;
        pub const InitializeSecurityContext = InitializeSecurityContextW;
        pub const QueryContextAttributes = QueryContextAttributesW;
        pub const QueryContextAttributesEx = QueryContextAttributesExW;
        pub const SetContextAttributes = SetContextAttributesW;
        pub const QueryCredentialsAttributes = QueryCredentialsAttributesW;
        pub const QueryCredentialsAttributesEx = QueryCredentialsAttributesExW;
        pub const SetCredentialsAttributes = SetCredentialsAttributesW;
        pub const EnumerateSecurityPackages = EnumerateSecurityPackagesW;
        pub const QuerySecurityPackageInfo = QuerySecurityPackageInfoW;
        pub const ImportSecurityContext = ImportSecurityContextW;
        pub const InitSecurityInterface = InitSecurityInterfaceW;
        pub const SaslEnumerateProfiles = SaslEnumerateProfilesW;
        pub const SaslGetProfilePackage = SaslGetProfilePackageW;
        pub const SaslIdentifyPackage = SaslIdentifyPackageW;
        pub const SaslInitializeSecurityContext = SaslInitializeSecurityContextW;
        pub const SspiPromptForCredentials = SspiPromptForCredentialsW;
        pub const AddSecurityPackage = AddSecurityPackageW;
        pub const DeleteSecurityPackage = DeleteSecurityPackageW;
        pub const CredWrite = CredWriteW;
        pub const CredRead = CredReadW;
        pub const CredEnumerate = CredEnumerateW;
        pub const CredWriteDomainCredentials = CredWriteDomainCredentialsW;
        pub const CredReadDomainCredentials = CredReadDomainCredentialsW;
        pub const CredDelete = CredDeleteW;
        pub const CredRename = CredRenameW;
        pub const CredGetTargetInfo = CredGetTargetInfoW;
        pub const CredMarshalCredential = CredMarshalCredentialW;
        pub const CredUnmarshalCredential = CredUnmarshalCredentialW;
        pub const CredIsMarshaledCredential = CredIsMarshaledCredentialW;
        pub const CredUnPackAuthenticationBuffer = CredUnPackAuthenticationBufferW;
        pub const CredPackAuthenticationBuffer = CredPackAuthenticationBufferW;
        pub const CredProtect = CredProtectW;
        pub const CredUnprotect = CredUnprotectW;
        pub const CredIsProtected = CredIsProtectedW;
        pub const CredFindBestCredential = CredFindBestCredentialW;
        pub const CredUIPromptForCredentials = CredUIPromptForCredentialsW;
        pub const CredUIPromptForWindowsCredentials = CredUIPromptForWindowsCredentialsW;
        pub const CredUIParseUserName = CredUIParseUserNameW;
        pub const CredUICmdLinePromptForCredentials = CredUICmdLinePromptForCredentialsW;
        pub const CredUIConfirmCredentials = CredUIConfirmCredentialsW;
        pub const SslEmptyCache = SslEmptyCacheW;
        pub const WNetSetLastError = WNetSetLastErrorW;
        pub const SetEntriesInAcl = SetEntriesInAclW;
        pub const GetExplicitEntriesFromAcl = GetExplicitEntriesFromAclW;
        pub const GetEffectiveRightsFromAcl = GetEffectiveRightsFromAclW;
        pub const GetAuditedPermissionsFromAcl = GetAuditedPermissionsFromAclW;
        pub const GetNamedSecurityInfo = GetNamedSecurityInfoW;
        pub const SetNamedSecurityInfo = SetNamedSecurityInfoW;
        pub const GetInheritanceSource = GetInheritanceSourceW;
        pub const TreeResetNamedSecurityInfo = TreeResetNamedSecurityInfoW;
        pub const TreeSetNamedSecurityInfo = TreeSetNamedSecurityInfoW;
        pub const BuildSecurityDescriptor = BuildSecurityDescriptorW;
        pub const LookupSecurityDescriptorParts = LookupSecurityDescriptorPartsW;
        pub const BuildExplicitAccessWithName = BuildExplicitAccessWithNameW;
        pub const BuildImpersonateExplicitAccessWithName = BuildImpersonateExplicitAccessWithNameW;
        pub const BuildTrusteeWithName = BuildTrusteeWithNameW;
        pub const BuildImpersonateTrustee = BuildImpersonateTrusteeW;
        pub const BuildTrusteeWithSid = BuildTrusteeWithSidW;
        pub const BuildTrusteeWithObjectsAndSid = BuildTrusteeWithObjectsAndSidW;
        pub const BuildTrusteeWithObjectsAndName = BuildTrusteeWithObjectsAndNameW;
        pub const GetTrusteeName = GetTrusteeNameW;
        pub const GetTrusteeType = GetTrusteeTypeW;
        pub const GetTrusteeForm = GetTrusteeFormW;
        pub const GetMultipleTrusteeOperation = GetMultipleTrusteeOperationW;
        pub const GetMultipleTrustee = GetMultipleTrusteeW;
        pub const ConvertSidToStringSid = ConvertSidToStringSidW;
        pub const ConvertStringSidToSid = ConvertStringSidToSidW;
        pub const ConvertStringSecurityDescriptorToSecurityDescriptor = ConvertStringSecurityDescriptorToSecurityDescriptorW;
        pub const ConvertSecurityDescriptorToStringSecurityDescriptor = ConvertSecurityDescriptorToStringSecurityDescriptorW;
        pub const CryptUIDlgViewCertificate = CryptUIDlgViewCertificateW;
        pub const LookupAccountSid = LookupAccountSidW;
        pub const LookupAccountName = LookupAccountNameW;
        pub const LookupPrivilegeValue = LookupPrivilegeValueW;
        pub const LookupPrivilegeName = LookupPrivilegeNameW;
        pub const LookupPrivilegeDisplayName = LookupPrivilegeDisplayNameW;
        pub const LogonUser = LogonUserW;
        pub const LogonUserEx = LogonUserExW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const SEC_WINNT_AUTH_IDENTITY_ = *opaque{};
        pub const CRYPT_PASSWORD_CREDENTIALS = *opaque{};
        pub const SCARD_READERSTATE = *opaque{};
        pub const LPOCNCONNPROC = *opaque{};
        pub const OPENCARD_SEARCH_CRITERIA = *opaque{};
        pub const OPENCARDNAME_EX = *opaque{};
        pub const OPENCARDNAME = *opaque{};
        pub const SERVICE_DESCRIPTION = *opaque{};
        pub const SERVICE_FAILURE_ACTIONS = *opaque{};
        pub const SERVICE_REQUIRED_PRIVILEGES_INFO = *opaque{};
        pub const ENUM_SERVICE_STATUS = *opaque{};
        pub const ENUM_SERVICE_STATUS_PROCESS = *opaque{};
        pub const QUERY_SERVICE_LOCK_STATUS = *opaque{};
        pub const QUERY_SERVICE_CONFIG = *opaque{};
        pub const SERVICE_MAIN_FUNCTION = *opaque{};
        pub const LPSERVICE_MAIN_FUNCTION = *opaque{};
        pub const SERVICE_TABLE_ENTRY = *opaque{};
        pub const SERVICE_NOTIFY_2 = *opaque{};
        pub const SERVICE_CONTROL_STATUS_REASON_PARAMS = *opaque{};
        pub const SecPkgInfo = *opaque{};
        pub const SecPkgCredentials_Names = *opaque{};
        pub const SecPkgCredentials_SSIProvider = *opaque{};
        pub const SecPkgContext_Names = *opaque{};
        pub const SecPkgContext_KeyInfo = *opaque{};
        pub const SecPkgContext_Authority = *opaque{};
        pub const SecPkgContext_ProtoInfo = *opaque{};
        pub const SecPkgContext_PackageInfo = *opaque{};
        pub const SecPkgContext_NegotiationInfo = *opaque{};
        pub const SecPkgContext_NativeNames = *opaque{};
        pub const SecPkgContext_CredentialName = *opaque{};
        pub const ACQUIRE_CREDENTIALS_HANDLE_FN_ = *opaque{};
        pub const ADD_CREDENTIALS_FN_ = *opaque{};
        pub const CHANGE_PASSWORD_FN_ = *opaque{};
        pub const INITIALIZE_SECURITY_CONTEXT_FN_ = *opaque{};
        pub const QUERY_CONTEXT_ATTRIBUTES_FN_ = *opaque{};
        pub const QUERY_CONTEXT_ATTRIBUTES_EX_FN_ = *opaque{};
        pub const SET_CONTEXT_ATTRIBUTES_FN_ = *opaque{};
        pub const QUERY_CREDENTIALS_ATTRIBUTES_FN_ = *opaque{};
        pub const QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_ = *opaque{};
        pub const SET_CREDENTIALS_ATTRIBUTES_FN_ = *opaque{};
        pub const ENUMERATE_SECURITY_PACKAGES_FN_ = *opaque{};
        pub const QUERY_SECURITY_PACKAGE_INFO_FN_ = *opaque{};
        pub const IMPORT_SECURITY_CONTEXT_FN_ = *opaque{};
        pub const SecurityFunctionTable = *opaque{};
        pub const INIT_SECURITY_INTERFACE_ = *opaque{};
        pub const SEC_WINNT_AUTH_IDENTITY_EX = *opaque{};
        pub const CREDENTIAL_ATTRIBUTE = *opaque{};
        pub const CREDENTIAL = *opaque{};
        pub const CREDENTIAL_TARGET_INFORMATION = *opaque{};
        pub const CREDUI_INFO = *opaque{};
        pub const SSL_EMPTY_CACHE_FN_ = *opaque{};
        pub const OBJECTS_AND_NAME_ = *opaque{};
        pub const TRUSTEE_ = *opaque{};
        pub const EXPLICIT_ACCESS_ = *opaque{};
        pub const TRUSTEE_ACCESS = *opaque{};
        pub const ACTRL_ACCESS_INFO = *opaque{};
        pub const ACTRL_CONTROL_INFO = *opaque{};
        pub const INHERITED_FROM = *opaque{};
        pub const CERT_SELECT_STRUCT_ = *opaque{};
        pub const CERT_VIEWPROPERTIES_STRUCT_ = *opaque{};
        pub const CRYPTUI_VIEWCERTIFICATE_STRUCT = *opaque{};
        pub const NETRESOURCE = *opaque{};
        pub const UNIVERSAL_NAME_INFO = *opaque{};
        pub const REMOTE_NAME_INFO = *opaque{};
        pub const AccessCheckAndAuditAlarm = *opaque{};
        pub const AccessCheckByTypeAndAuditAlarm = *opaque{};
        pub const AccessCheckByTypeResultListAndAuditAlarm = *opaque{};
        pub const AccessCheckByTypeResultListAndAuditAlarmByHandle = *opaque{};
        pub const GetFileSecurity = *opaque{};
        pub const ObjectCloseAuditAlarm = *opaque{};
        pub const ObjectDeleteAuditAlarm = *opaque{};
        pub const ObjectOpenAuditAlarm = *opaque{};
        pub const ObjectPrivilegeAuditAlarm = *opaque{};
        pub const PrivilegedServiceAuditAlarm = *opaque{};
        pub const SetFileSecurity = *opaque{};
        pub const CryptAcquireContext = *opaque{};
        pub const CryptSignHash = *opaque{};
        pub const CryptVerifySignature = *opaque{};
        pub const CryptSetProvider = *opaque{};
        pub const CryptSetProviderEx = *opaque{};
        pub const CryptGetDefaultProvider = *opaque{};
        pub const CryptEnumProviderTypes = *opaque{};
        pub const CryptEnumProviders = *opaque{};
        pub const CertRDNValueToStr = *opaque{};
        pub const CertNameToStr = *opaque{};
        pub const CertStrToName = *opaque{};
        pub const CertGetNameString = *opaque{};
        pub const CertOpenSystemStore = *opaque{};
        pub const CertAddEncodedCertificateToSystemStore = *opaque{};
        pub const CryptRetrieveObjectByUrl = *opaque{};
        pub const CryptStringToBinary = *opaque{};
        pub const CryptBinaryToString = *opaque{};
        pub const SCardListReaderGroups = *opaque{};
        pub const SCardListReaders = *opaque{};
        pub const SCardListCards = *opaque{};
        pub const SCardListInterfaces = *opaque{};
        pub const SCardGetProviderId = *opaque{};
        pub const SCardGetCardTypeProviderName = *opaque{};
        pub const SCardIntroduceReaderGroup = *opaque{};
        pub const SCardForgetReaderGroup = *opaque{};
        pub const SCardIntroduceReader = *opaque{};
        pub const SCardForgetReader = *opaque{};
        pub const SCardAddReaderToGroup = *opaque{};
        pub const SCardRemoveReaderFromGroup = *opaque{};
        pub const SCardIntroduceCardType = *opaque{};
        pub const SCardSetCardTypeProviderName = *opaque{};
        pub const SCardForgetCardType = *opaque{};
        pub const SCardLocateCards = *opaque{};
        pub const SCardLocateCardsByATR = *opaque{};
        pub const SCardGetStatusChange = *opaque{};
        pub const SCardConnect = *opaque{};
        pub const SCardStatus = *opaque{};
        pub const SCardUIDlgSelectCard = *opaque{};
        pub const GetOpenCardName = *opaque{};
        pub const SCardReadCache = *opaque{};
        pub const SCardWriteCache = *opaque{};
        pub const SCardGetReaderIcon = *opaque{};
        pub const SCardGetDeviceTypeId = *opaque{};
        pub const SCardGetReaderDeviceInstanceId = *opaque{};
        pub const SCardListReadersWithDeviceInstanceId = *opaque{};
        pub const ChangeServiceConfig2 = *opaque{};
        pub const EnumDependentServices = *opaque{};
        pub const EnumServicesStatus = *opaque{};
        pub const EnumServicesStatusEx = *opaque{};
        pub const GetServiceKeyName = *opaque{};
        pub const GetServiceDisplayName = *opaque{};
        pub const OpenSCManager = *opaque{};
        pub const OpenService = *opaque{};
        pub const QueryServiceConfig = *opaque{};
        pub const QueryServiceConfig2 = *opaque{};
        pub const QueryServiceLockStatus = *opaque{};
        pub const RegisterServiceCtrlHandler = *opaque{};
        pub const RegisterServiceCtrlHandlerEx = *opaque{};
        pub const StartServiceCtrlDispatcher = *opaque{};
        pub const StartService = *opaque{};
        pub const NotifyServiceStatusChange = *opaque{};
        pub const ControlServiceEx = *opaque{};
        pub const AuditLookupCategoryName = *opaque{};
        pub const AuditLookupSubCategoryName = *opaque{};
        pub const AuditSetGlobalSacl = *opaque{};
        pub const AuditQueryGlobalSacl = *opaque{};
        pub const AcquireCredentialsHandle = *opaque{};
        pub const AddCredentials = *opaque{};
        pub const ChangeAccountPassword = *opaque{};
        pub const InitializeSecurityContext = *opaque{};
        pub const QueryContextAttributes = *opaque{};
        pub const QueryContextAttributesEx = *opaque{};
        pub const SetContextAttributes = *opaque{};
        pub const QueryCredentialsAttributes = *opaque{};
        pub const QueryCredentialsAttributesEx = *opaque{};
        pub const SetCredentialsAttributes = *opaque{};
        pub const EnumerateSecurityPackages = *opaque{};
        pub const QuerySecurityPackageInfo = *opaque{};
        pub const ImportSecurityContext = *opaque{};
        pub const InitSecurityInterface = *opaque{};
        pub const SaslEnumerateProfiles = *opaque{};
        pub const SaslGetProfilePackage = *opaque{};
        pub const SaslIdentifyPackage = *opaque{};
        pub const SaslInitializeSecurityContext = *opaque{};
        pub const SspiPromptForCredentials = *opaque{};
        pub const AddSecurityPackage = *opaque{};
        pub const DeleteSecurityPackage = *opaque{};
        pub const CredWrite = *opaque{};
        pub const CredRead = *opaque{};
        pub const CredEnumerate = *opaque{};
        pub const CredWriteDomainCredentials = *opaque{};
        pub const CredReadDomainCredentials = *opaque{};
        pub const CredDelete = *opaque{};
        pub const CredRename = *opaque{};
        pub const CredGetTargetInfo = *opaque{};
        pub const CredMarshalCredential = *opaque{};
        pub const CredUnmarshalCredential = *opaque{};
        pub const CredIsMarshaledCredential = *opaque{};
        pub const CredUnPackAuthenticationBuffer = *opaque{};
        pub const CredPackAuthenticationBuffer = *opaque{};
        pub const CredProtect = *opaque{};
        pub const CredUnprotect = *opaque{};
        pub const CredIsProtected = *opaque{};
        pub const CredFindBestCredential = *opaque{};
        pub const CredUIPromptForCredentials = *opaque{};
        pub const CredUIPromptForWindowsCredentials = *opaque{};
        pub const CredUIParseUserName = *opaque{};
        pub const CredUICmdLinePromptForCredentials = *opaque{};
        pub const CredUIConfirmCredentials = *opaque{};
        pub const SslEmptyCache = *opaque{};
        pub const WNetSetLastError = *opaque{};
        pub const SetEntriesInAcl = *opaque{};
        pub const GetExplicitEntriesFromAcl = *opaque{};
        pub const GetEffectiveRightsFromAcl = *opaque{};
        pub const GetAuditedPermissionsFromAcl = *opaque{};
        pub const GetNamedSecurityInfo = *opaque{};
        pub const SetNamedSecurityInfo = *opaque{};
        pub const GetInheritanceSource = *opaque{};
        pub const TreeResetNamedSecurityInfo = *opaque{};
        pub const TreeSetNamedSecurityInfo = *opaque{};
        pub const BuildSecurityDescriptor = *opaque{};
        pub const LookupSecurityDescriptorParts = *opaque{};
        pub const BuildExplicitAccessWithName = *opaque{};
        pub const BuildImpersonateExplicitAccessWithName = *opaque{};
        pub const BuildTrusteeWithName = *opaque{};
        pub const BuildImpersonateTrustee = *opaque{};
        pub const BuildTrusteeWithSid = *opaque{};
        pub const BuildTrusteeWithObjectsAndSid = *opaque{};
        pub const BuildTrusteeWithObjectsAndName = *opaque{};
        pub const GetTrusteeName = *opaque{};
        pub const GetTrusteeType = *opaque{};
        pub const GetTrusteeForm = *opaque{};
        pub const GetMultipleTrusteeOperation = *opaque{};
        pub const GetMultipleTrustee = *opaque{};
        pub const ConvertSidToStringSid = *opaque{};
        pub const ConvertStringSidToSid = *opaque{};
        pub const ConvertStringSecurityDescriptorToSecurityDescriptor = *opaque{};
        pub const ConvertSecurityDescriptorToStringSecurityDescriptor = *opaque{};
        pub const CryptUIDlgViewCertificate = *opaque{};
        pub const LookupAccountSid = *opaque{};
        pub const LookupAccountName = *opaque{};
        pub const LookupPrivilegeValue = *opaque{};
        pub const LookupPrivilegeName = *opaque{};
        pub const LookupPrivilegeDisplayName = *opaque{};
        pub const LogonUser = *opaque{};
        pub const LogonUserEx = *opaque{};
    } else struct {
        pub const SEC_WINNT_AUTH_IDENTITY_ = @compileError("'SEC_WINNT_AUTH_IDENTITY_' requires that UNICODE be set to true or false in the root module");
        pub const CRYPT_PASSWORD_CREDENTIALS = @compileError("'CRYPT_PASSWORD_CREDENTIALS' requires that UNICODE be set to true or false in the root module");
        pub const SCARD_READERSTATE = @compileError("'SCARD_READERSTATE' requires that UNICODE be set to true or false in the root module");
        pub const LPOCNCONNPROC = @compileError("'LPOCNCONNPROC' requires that UNICODE be set to true or false in the root module");
        pub const OPENCARD_SEARCH_CRITERIA = @compileError("'OPENCARD_SEARCH_CRITERIA' requires that UNICODE be set to true or false in the root module");
        pub const OPENCARDNAME_EX = @compileError("'OPENCARDNAME_EX' requires that UNICODE be set to true or false in the root module");
        pub const OPENCARDNAME = @compileError("'OPENCARDNAME' requires that UNICODE be set to true or false in the root module");
        pub const SERVICE_DESCRIPTION = @compileError("'SERVICE_DESCRIPTION' requires that UNICODE be set to true or false in the root module");
        pub const SERVICE_FAILURE_ACTIONS = @compileError("'SERVICE_FAILURE_ACTIONS' requires that UNICODE be set to true or false in the root module");
        pub const SERVICE_REQUIRED_PRIVILEGES_INFO = @compileError("'SERVICE_REQUIRED_PRIVILEGES_INFO' requires that UNICODE be set to true or false in the root module");
        pub const ENUM_SERVICE_STATUS = @compileError("'ENUM_SERVICE_STATUS' requires that UNICODE be set to true or false in the root module");
        pub const ENUM_SERVICE_STATUS_PROCESS = @compileError("'ENUM_SERVICE_STATUS_PROCESS' requires that UNICODE be set to true or false in the root module");
        pub const QUERY_SERVICE_LOCK_STATUS = @compileError("'QUERY_SERVICE_LOCK_STATUS' requires that UNICODE be set to true or false in the root module");
        pub const QUERY_SERVICE_CONFIG = @compileError("'QUERY_SERVICE_CONFIG' requires that UNICODE be set to true or false in the root module");
        pub const SERVICE_MAIN_FUNCTION = @compileError("'SERVICE_MAIN_FUNCTION' requires that UNICODE be set to true or false in the root module");
        pub const LPSERVICE_MAIN_FUNCTION = @compileError("'LPSERVICE_MAIN_FUNCTION' requires that UNICODE be set to true or false in the root module");
        pub const SERVICE_TABLE_ENTRY = @compileError("'SERVICE_TABLE_ENTRY' requires that UNICODE be set to true or false in the root module");
        pub const SERVICE_NOTIFY_2 = @compileError("'SERVICE_NOTIFY_2' requires that UNICODE be set to true or false in the root module");
        pub const SERVICE_CONTROL_STATUS_REASON_PARAMS = @compileError("'SERVICE_CONTROL_STATUS_REASON_PARAMS' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgInfo = @compileError("'SecPkgInfo' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgCredentials_Names = @compileError("'SecPkgCredentials_Names' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgCredentials_SSIProvider = @compileError("'SecPkgCredentials_SSIProvider' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgContext_Names = @compileError("'SecPkgContext_Names' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgContext_KeyInfo = @compileError("'SecPkgContext_KeyInfo' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgContext_Authority = @compileError("'SecPkgContext_Authority' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgContext_ProtoInfo = @compileError("'SecPkgContext_ProtoInfo' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgContext_PackageInfo = @compileError("'SecPkgContext_PackageInfo' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgContext_NegotiationInfo = @compileError("'SecPkgContext_NegotiationInfo' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgContext_NativeNames = @compileError("'SecPkgContext_NativeNames' requires that UNICODE be set to true or false in the root module");
        pub const SecPkgContext_CredentialName = @compileError("'SecPkgContext_CredentialName' requires that UNICODE be set to true or false in the root module");
        pub const ACQUIRE_CREDENTIALS_HANDLE_FN_ = @compileError("'ACQUIRE_CREDENTIALS_HANDLE_FN_' requires that UNICODE be set to true or false in the root module");
        pub const ADD_CREDENTIALS_FN_ = @compileError("'ADD_CREDENTIALS_FN_' requires that UNICODE be set to true or false in the root module");
        pub const CHANGE_PASSWORD_FN_ = @compileError("'CHANGE_PASSWORD_FN_' requires that UNICODE be set to true or false in the root module");
        pub const INITIALIZE_SECURITY_CONTEXT_FN_ = @compileError("'INITIALIZE_SECURITY_CONTEXT_FN_' requires that UNICODE be set to true or false in the root module");
        pub const QUERY_CONTEXT_ATTRIBUTES_FN_ = @compileError("'QUERY_CONTEXT_ATTRIBUTES_FN_' requires that UNICODE be set to true or false in the root module");
        pub const QUERY_CONTEXT_ATTRIBUTES_EX_FN_ = @compileError("'QUERY_CONTEXT_ATTRIBUTES_EX_FN_' requires that UNICODE be set to true or false in the root module");
        pub const SET_CONTEXT_ATTRIBUTES_FN_ = @compileError("'SET_CONTEXT_ATTRIBUTES_FN_' requires that UNICODE be set to true or false in the root module");
        pub const QUERY_CREDENTIALS_ATTRIBUTES_FN_ = @compileError("'QUERY_CREDENTIALS_ATTRIBUTES_FN_' requires that UNICODE be set to true or false in the root module");
        pub const QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_ = @compileError("'QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_' requires that UNICODE be set to true or false in the root module");
        pub const SET_CREDENTIALS_ATTRIBUTES_FN_ = @compileError("'SET_CREDENTIALS_ATTRIBUTES_FN_' requires that UNICODE be set to true or false in the root module");
        pub const ENUMERATE_SECURITY_PACKAGES_FN_ = @compileError("'ENUMERATE_SECURITY_PACKAGES_FN_' requires that UNICODE be set to true or false in the root module");
        pub const QUERY_SECURITY_PACKAGE_INFO_FN_ = @compileError("'QUERY_SECURITY_PACKAGE_INFO_FN_' requires that UNICODE be set to true or false in the root module");
        pub const IMPORT_SECURITY_CONTEXT_FN_ = @compileError("'IMPORT_SECURITY_CONTEXT_FN_' requires that UNICODE be set to true or false in the root module");
        pub const SecurityFunctionTable = @compileError("'SecurityFunctionTable' requires that UNICODE be set to true or false in the root module");
        pub const INIT_SECURITY_INTERFACE_ = @compileError("'INIT_SECURITY_INTERFACE_' requires that UNICODE be set to true or false in the root module");
        pub const SEC_WINNT_AUTH_IDENTITY_EX = @compileError("'SEC_WINNT_AUTH_IDENTITY_EX' requires that UNICODE be set to true or false in the root module");
        pub const CREDENTIAL_ATTRIBUTE = @compileError("'CREDENTIAL_ATTRIBUTE' requires that UNICODE be set to true or false in the root module");
        pub const CREDENTIAL = @compileError("'CREDENTIAL' requires that UNICODE be set to true or false in the root module");
        pub const CREDENTIAL_TARGET_INFORMATION = @compileError("'CREDENTIAL_TARGET_INFORMATION' requires that UNICODE be set to true or false in the root module");
        pub const CREDUI_INFO = @compileError("'CREDUI_INFO' requires that UNICODE be set to true or false in the root module");
        pub const SSL_EMPTY_CACHE_FN_ = @compileError("'SSL_EMPTY_CACHE_FN_' requires that UNICODE be set to true or false in the root module");
        pub const OBJECTS_AND_NAME_ = @compileError("'OBJECTS_AND_NAME_' requires that UNICODE be set to true or false in the root module");
        pub const TRUSTEE_ = @compileError("'TRUSTEE_' requires that UNICODE be set to true or false in the root module");
        pub const EXPLICIT_ACCESS_ = @compileError("'EXPLICIT_ACCESS_' requires that UNICODE be set to true or false in the root module");
        pub const TRUSTEE_ACCESS = @compileError("'TRUSTEE_ACCESS' requires that UNICODE be set to true or false in the root module");
        pub const ACTRL_ACCESS_INFO = @compileError("'ACTRL_ACCESS_INFO' requires that UNICODE be set to true or false in the root module");
        pub const ACTRL_CONTROL_INFO = @compileError("'ACTRL_CONTROL_INFO' requires that UNICODE be set to true or false in the root module");
        pub const INHERITED_FROM = @compileError("'INHERITED_FROM' requires that UNICODE be set to true or false in the root module");
        pub const CERT_SELECT_STRUCT_ = @compileError("'CERT_SELECT_STRUCT_' requires that UNICODE be set to true or false in the root module");
        pub const CERT_VIEWPROPERTIES_STRUCT_ = @compileError("'CERT_VIEWPROPERTIES_STRUCT_' requires that UNICODE be set to true or false in the root module");
        pub const CRYPTUI_VIEWCERTIFICATE_STRUCT = @compileError("'CRYPTUI_VIEWCERTIFICATE_STRUCT' requires that UNICODE be set to true or false in the root module");
        pub const NETRESOURCE = @compileError("'NETRESOURCE' requires that UNICODE be set to true or false in the root module");
        pub const UNIVERSAL_NAME_INFO = @compileError("'UNIVERSAL_NAME_INFO' requires that UNICODE be set to true or false in the root module");
        pub const REMOTE_NAME_INFO = @compileError("'REMOTE_NAME_INFO' requires that UNICODE be set to true or false in the root module");
        pub const AccessCheckAndAuditAlarm = @compileError("'AccessCheckAndAuditAlarm' requires that UNICODE be set to true or false in the root module");
        pub const AccessCheckByTypeAndAuditAlarm = @compileError("'AccessCheckByTypeAndAuditAlarm' requires that UNICODE be set to true or false in the root module");
        pub const AccessCheckByTypeResultListAndAuditAlarm = @compileError("'AccessCheckByTypeResultListAndAuditAlarm' requires that UNICODE be set to true or false in the root module");
        pub const AccessCheckByTypeResultListAndAuditAlarmByHandle = @compileError("'AccessCheckByTypeResultListAndAuditAlarmByHandle' requires that UNICODE be set to true or false in the root module");
        pub const GetFileSecurity = @compileError("'GetFileSecurity' requires that UNICODE be set to true or false in the root module");
        pub const ObjectCloseAuditAlarm = @compileError("'ObjectCloseAuditAlarm' requires that UNICODE be set to true or false in the root module");
        pub const ObjectDeleteAuditAlarm = @compileError("'ObjectDeleteAuditAlarm' requires that UNICODE be set to true or false in the root module");
        pub const ObjectOpenAuditAlarm = @compileError("'ObjectOpenAuditAlarm' requires that UNICODE be set to true or false in the root module");
        pub const ObjectPrivilegeAuditAlarm = @compileError("'ObjectPrivilegeAuditAlarm' requires that UNICODE be set to true or false in the root module");
        pub const PrivilegedServiceAuditAlarm = @compileError("'PrivilegedServiceAuditAlarm' requires that UNICODE be set to true or false in the root module");
        pub const SetFileSecurity = @compileError("'SetFileSecurity' requires that UNICODE be set to true or false in the root module");
        pub const CryptAcquireContext = @compileError("'CryptAcquireContext' requires that UNICODE be set to true or false in the root module");
        pub const CryptSignHash = @compileError("'CryptSignHash' requires that UNICODE be set to true or false in the root module");
        pub const CryptVerifySignature = @compileError("'CryptVerifySignature' requires that UNICODE be set to true or false in the root module");
        pub const CryptSetProvider = @compileError("'CryptSetProvider' requires that UNICODE be set to true or false in the root module");
        pub const CryptSetProviderEx = @compileError("'CryptSetProviderEx' requires that UNICODE be set to true or false in the root module");
        pub const CryptGetDefaultProvider = @compileError("'CryptGetDefaultProvider' requires that UNICODE be set to true or false in the root module");
        pub const CryptEnumProviderTypes = @compileError("'CryptEnumProviderTypes' requires that UNICODE be set to true or false in the root module");
        pub const CryptEnumProviders = @compileError("'CryptEnumProviders' requires that UNICODE be set to true or false in the root module");
        pub const CertRDNValueToStr = @compileError("'CertRDNValueToStr' requires that UNICODE be set to true or false in the root module");
        pub const CertNameToStr = @compileError("'CertNameToStr' requires that UNICODE be set to true or false in the root module");
        pub const CertStrToName = @compileError("'CertStrToName' requires that UNICODE be set to true or false in the root module");
        pub const CertGetNameString = @compileError("'CertGetNameString' requires that UNICODE be set to true or false in the root module");
        pub const CertOpenSystemStore = @compileError("'CertOpenSystemStore' requires that UNICODE be set to true or false in the root module");
        pub const CertAddEncodedCertificateToSystemStore = @compileError("'CertAddEncodedCertificateToSystemStore' requires that UNICODE be set to true or false in the root module");
        pub const CryptRetrieveObjectByUrl = @compileError("'CryptRetrieveObjectByUrl' requires that UNICODE be set to true or false in the root module");
        pub const CryptStringToBinary = @compileError("'CryptStringToBinary' requires that UNICODE be set to true or false in the root module");
        pub const CryptBinaryToString = @compileError("'CryptBinaryToString' requires that UNICODE be set to true or false in the root module");
        pub const SCardListReaderGroups = @compileError("'SCardListReaderGroups' requires that UNICODE be set to true or false in the root module");
        pub const SCardListReaders = @compileError("'SCardListReaders' requires that UNICODE be set to true or false in the root module");
        pub const SCardListCards = @compileError("'SCardListCards' requires that UNICODE be set to true or false in the root module");
        pub const SCardListInterfaces = @compileError("'SCardListInterfaces' requires that UNICODE be set to true or false in the root module");
        pub const SCardGetProviderId = @compileError("'SCardGetProviderId' requires that UNICODE be set to true or false in the root module");
        pub const SCardGetCardTypeProviderName = @compileError("'SCardGetCardTypeProviderName' requires that UNICODE be set to true or false in the root module");
        pub const SCardIntroduceReaderGroup = @compileError("'SCardIntroduceReaderGroup' requires that UNICODE be set to true or false in the root module");
        pub const SCardForgetReaderGroup = @compileError("'SCardForgetReaderGroup' requires that UNICODE be set to true or false in the root module");
        pub const SCardIntroduceReader = @compileError("'SCardIntroduceReader' requires that UNICODE be set to true or false in the root module");
        pub const SCardForgetReader = @compileError("'SCardForgetReader' requires that UNICODE be set to true or false in the root module");
        pub const SCardAddReaderToGroup = @compileError("'SCardAddReaderToGroup' requires that UNICODE be set to true or false in the root module");
        pub const SCardRemoveReaderFromGroup = @compileError("'SCardRemoveReaderFromGroup' requires that UNICODE be set to true or false in the root module");
        pub const SCardIntroduceCardType = @compileError("'SCardIntroduceCardType' requires that UNICODE be set to true or false in the root module");
        pub const SCardSetCardTypeProviderName = @compileError("'SCardSetCardTypeProviderName' requires that UNICODE be set to true or false in the root module");
        pub const SCardForgetCardType = @compileError("'SCardForgetCardType' requires that UNICODE be set to true or false in the root module");
        pub const SCardLocateCards = @compileError("'SCardLocateCards' requires that UNICODE be set to true or false in the root module");
        pub const SCardLocateCardsByATR = @compileError("'SCardLocateCardsByATR' requires that UNICODE be set to true or false in the root module");
        pub const SCardGetStatusChange = @compileError("'SCardGetStatusChange' requires that UNICODE be set to true or false in the root module");
        pub const SCardConnect = @compileError("'SCardConnect' requires that UNICODE be set to true or false in the root module");
        pub const SCardStatus = @compileError("'SCardStatus' requires that UNICODE be set to true or false in the root module");
        pub const SCardUIDlgSelectCard = @compileError("'SCardUIDlgSelectCard' requires that UNICODE be set to true or false in the root module");
        pub const GetOpenCardName = @compileError("'GetOpenCardName' requires that UNICODE be set to true or false in the root module");
        pub const SCardReadCache = @compileError("'SCardReadCache' requires that UNICODE be set to true or false in the root module");
        pub const SCardWriteCache = @compileError("'SCardWriteCache' requires that UNICODE be set to true or false in the root module");
        pub const SCardGetReaderIcon = @compileError("'SCardGetReaderIcon' requires that UNICODE be set to true or false in the root module");
        pub const SCardGetDeviceTypeId = @compileError("'SCardGetDeviceTypeId' requires that UNICODE be set to true or false in the root module");
        pub const SCardGetReaderDeviceInstanceId = @compileError("'SCardGetReaderDeviceInstanceId' requires that UNICODE be set to true or false in the root module");
        pub const SCardListReadersWithDeviceInstanceId = @compileError("'SCardListReadersWithDeviceInstanceId' requires that UNICODE be set to true or false in the root module");
        pub const ChangeServiceConfig2 = @compileError("'ChangeServiceConfig2' requires that UNICODE be set to true or false in the root module");
        pub const EnumDependentServices = @compileError("'EnumDependentServices' requires that UNICODE be set to true or false in the root module");
        pub const EnumServicesStatus = @compileError("'EnumServicesStatus' requires that UNICODE be set to true or false in the root module");
        pub const EnumServicesStatusEx = @compileError("'EnumServicesStatusEx' requires that UNICODE be set to true or false in the root module");
        pub const GetServiceKeyName = @compileError("'GetServiceKeyName' requires that UNICODE be set to true or false in the root module");
        pub const GetServiceDisplayName = @compileError("'GetServiceDisplayName' requires that UNICODE be set to true or false in the root module");
        pub const OpenSCManager = @compileError("'OpenSCManager' requires that UNICODE be set to true or false in the root module");
        pub const OpenService = @compileError("'OpenService' requires that UNICODE be set to true or false in the root module");
        pub const QueryServiceConfig = @compileError("'QueryServiceConfig' requires that UNICODE be set to true or false in the root module");
        pub const QueryServiceConfig2 = @compileError("'QueryServiceConfig2' requires that UNICODE be set to true or false in the root module");
        pub const QueryServiceLockStatus = @compileError("'QueryServiceLockStatus' requires that UNICODE be set to true or false in the root module");
        pub const RegisterServiceCtrlHandler = @compileError("'RegisterServiceCtrlHandler' requires that UNICODE be set to true or false in the root module");
        pub const RegisterServiceCtrlHandlerEx = @compileError("'RegisterServiceCtrlHandlerEx' requires that UNICODE be set to true or false in the root module");
        pub const StartServiceCtrlDispatcher = @compileError("'StartServiceCtrlDispatcher' requires that UNICODE be set to true or false in the root module");
        pub const StartService = @compileError("'StartService' requires that UNICODE be set to true or false in the root module");
        pub const NotifyServiceStatusChange = @compileError("'NotifyServiceStatusChange' requires that UNICODE be set to true or false in the root module");
        pub const ControlServiceEx = @compileError("'ControlServiceEx' requires that UNICODE be set to true or false in the root module");
        pub const AuditLookupCategoryName = @compileError("'AuditLookupCategoryName' requires that UNICODE be set to true or false in the root module");
        pub const AuditLookupSubCategoryName = @compileError("'AuditLookupSubCategoryName' requires that UNICODE be set to true or false in the root module");
        pub const AuditSetGlobalSacl = @compileError("'AuditSetGlobalSacl' requires that UNICODE be set to true or false in the root module");
        pub const AuditQueryGlobalSacl = @compileError("'AuditQueryGlobalSacl' requires that UNICODE be set to true or false in the root module");
        pub const AcquireCredentialsHandle = @compileError("'AcquireCredentialsHandle' requires that UNICODE be set to true or false in the root module");
        pub const AddCredentials = @compileError("'AddCredentials' requires that UNICODE be set to true or false in the root module");
        pub const ChangeAccountPassword = @compileError("'ChangeAccountPassword' requires that UNICODE be set to true or false in the root module");
        pub const InitializeSecurityContext = @compileError("'InitializeSecurityContext' requires that UNICODE be set to true or false in the root module");
        pub const QueryContextAttributes = @compileError("'QueryContextAttributes' requires that UNICODE be set to true or false in the root module");
        pub const QueryContextAttributesEx = @compileError("'QueryContextAttributesEx' requires that UNICODE be set to true or false in the root module");
        pub const SetContextAttributes = @compileError("'SetContextAttributes' requires that UNICODE be set to true or false in the root module");
        pub const QueryCredentialsAttributes = @compileError("'QueryCredentialsAttributes' requires that UNICODE be set to true or false in the root module");
        pub const QueryCredentialsAttributesEx = @compileError("'QueryCredentialsAttributesEx' requires that UNICODE be set to true or false in the root module");
        pub const SetCredentialsAttributes = @compileError("'SetCredentialsAttributes' requires that UNICODE be set to true or false in the root module");
        pub const EnumerateSecurityPackages = @compileError("'EnumerateSecurityPackages' requires that UNICODE be set to true or false in the root module");
        pub const QuerySecurityPackageInfo = @compileError("'QuerySecurityPackageInfo' requires that UNICODE be set to true or false in the root module");
        pub const ImportSecurityContext = @compileError("'ImportSecurityContext' requires that UNICODE be set to true or false in the root module");
        pub const InitSecurityInterface = @compileError("'InitSecurityInterface' requires that UNICODE be set to true or false in the root module");
        pub const SaslEnumerateProfiles = @compileError("'SaslEnumerateProfiles' requires that UNICODE be set to true or false in the root module");
        pub const SaslGetProfilePackage = @compileError("'SaslGetProfilePackage' requires that UNICODE be set to true or false in the root module");
        pub const SaslIdentifyPackage = @compileError("'SaslIdentifyPackage' requires that UNICODE be set to true or false in the root module");
        pub const SaslInitializeSecurityContext = @compileError("'SaslInitializeSecurityContext' requires that UNICODE be set to true or false in the root module");
        pub const SspiPromptForCredentials = @compileError("'SspiPromptForCredentials' requires that UNICODE be set to true or false in the root module");
        pub const AddSecurityPackage = @compileError("'AddSecurityPackage' requires that UNICODE be set to true or false in the root module");
        pub const DeleteSecurityPackage = @compileError("'DeleteSecurityPackage' requires that UNICODE be set to true or false in the root module");
        pub const CredWrite = @compileError("'CredWrite' requires that UNICODE be set to true or false in the root module");
        pub const CredRead = @compileError("'CredRead' requires that UNICODE be set to true or false in the root module");
        pub const CredEnumerate = @compileError("'CredEnumerate' requires that UNICODE be set to true or false in the root module");
        pub const CredWriteDomainCredentials = @compileError("'CredWriteDomainCredentials' requires that UNICODE be set to true or false in the root module");
        pub const CredReadDomainCredentials = @compileError("'CredReadDomainCredentials' requires that UNICODE be set to true or false in the root module");
        pub const CredDelete = @compileError("'CredDelete' requires that UNICODE be set to true or false in the root module");
        pub const CredRename = @compileError("'CredRename' requires that UNICODE be set to true or false in the root module");
        pub const CredGetTargetInfo = @compileError("'CredGetTargetInfo' requires that UNICODE be set to true or false in the root module");
        pub const CredMarshalCredential = @compileError("'CredMarshalCredential' requires that UNICODE be set to true or false in the root module");
        pub const CredUnmarshalCredential = @compileError("'CredUnmarshalCredential' requires that UNICODE be set to true or false in the root module");
        pub const CredIsMarshaledCredential = @compileError("'CredIsMarshaledCredential' requires that UNICODE be set to true or false in the root module");
        pub const CredUnPackAuthenticationBuffer = @compileError("'CredUnPackAuthenticationBuffer' requires that UNICODE be set to true or false in the root module");
        pub const CredPackAuthenticationBuffer = @compileError("'CredPackAuthenticationBuffer' requires that UNICODE be set to true or false in the root module");
        pub const CredProtect = @compileError("'CredProtect' requires that UNICODE be set to true or false in the root module");
        pub const CredUnprotect = @compileError("'CredUnprotect' requires that UNICODE be set to true or false in the root module");
        pub const CredIsProtected = @compileError("'CredIsProtected' requires that UNICODE be set to true or false in the root module");
        pub const CredFindBestCredential = @compileError("'CredFindBestCredential' requires that UNICODE be set to true or false in the root module");
        pub const CredUIPromptForCredentials = @compileError("'CredUIPromptForCredentials' requires that UNICODE be set to true or false in the root module");
        pub const CredUIPromptForWindowsCredentials = @compileError("'CredUIPromptForWindowsCredentials' requires that UNICODE be set to true or false in the root module");
        pub const CredUIParseUserName = @compileError("'CredUIParseUserName' requires that UNICODE be set to true or false in the root module");
        pub const CredUICmdLinePromptForCredentials = @compileError("'CredUICmdLinePromptForCredentials' requires that UNICODE be set to true or false in the root module");
        pub const CredUIConfirmCredentials = @compileError("'CredUIConfirmCredentials' requires that UNICODE be set to true or false in the root module");
        pub const SslEmptyCache = @compileError("'SslEmptyCache' requires that UNICODE be set to true or false in the root module");
        pub const WNetSetLastError = @compileError("'WNetSetLastError' requires that UNICODE be set to true or false in the root module");
        pub const SetEntriesInAcl = @compileError("'SetEntriesInAcl' requires that UNICODE be set to true or false in the root module");
        pub const GetExplicitEntriesFromAcl = @compileError("'GetExplicitEntriesFromAcl' requires that UNICODE be set to true or false in the root module");
        pub const GetEffectiveRightsFromAcl = @compileError("'GetEffectiveRightsFromAcl' requires that UNICODE be set to true or false in the root module");
        pub const GetAuditedPermissionsFromAcl = @compileError("'GetAuditedPermissionsFromAcl' requires that UNICODE be set to true or false in the root module");
        pub const GetNamedSecurityInfo = @compileError("'GetNamedSecurityInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetNamedSecurityInfo = @compileError("'SetNamedSecurityInfo' requires that UNICODE be set to true or false in the root module");
        pub const GetInheritanceSource = @compileError("'GetInheritanceSource' requires that UNICODE be set to true or false in the root module");
        pub const TreeResetNamedSecurityInfo = @compileError("'TreeResetNamedSecurityInfo' requires that UNICODE be set to true or false in the root module");
        pub const TreeSetNamedSecurityInfo = @compileError("'TreeSetNamedSecurityInfo' requires that UNICODE be set to true or false in the root module");
        pub const BuildSecurityDescriptor = @compileError("'BuildSecurityDescriptor' requires that UNICODE be set to true or false in the root module");
        pub const LookupSecurityDescriptorParts = @compileError("'LookupSecurityDescriptorParts' requires that UNICODE be set to true or false in the root module");
        pub const BuildExplicitAccessWithName = @compileError("'BuildExplicitAccessWithName' requires that UNICODE be set to true or false in the root module");
        pub const BuildImpersonateExplicitAccessWithName = @compileError("'BuildImpersonateExplicitAccessWithName' requires that UNICODE be set to true or false in the root module");
        pub const BuildTrusteeWithName = @compileError("'BuildTrusteeWithName' requires that UNICODE be set to true or false in the root module");
        pub const BuildImpersonateTrustee = @compileError("'BuildImpersonateTrustee' requires that UNICODE be set to true or false in the root module");
        pub const BuildTrusteeWithSid = @compileError("'BuildTrusteeWithSid' requires that UNICODE be set to true or false in the root module");
        pub const BuildTrusteeWithObjectsAndSid = @compileError("'BuildTrusteeWithObjectsAndSid' requires that UNICODE be set to true or false in the root module");
        pub const BuildTrusteeWithObjectsAndName = @compileError("'BuildTrusteeWithObjectsAndName' requires that UNICODE be set to true or false in the root module");
        pub const GetTrusteeName = @compileError("'GetTrusteeName' requires that UNICODE be set to true or false in the root module");
        pub const GetTrusteeType = @compileError("'GetTrusteeType' requires that UNICODE be set to true or false in the root module");
        pub const GetTrusteeForm = @compileError("'GetTrusteeForm' requires that UNICODE be set to true or false in the root module");
        pub const GetMultipleTrusteeOperation = @compileError("'GetMultipleTrusteeOperation' requires that UNICODE be set to true or false in the root module");
        pub const GetMultipleTrustee = @compileError("'GetMultipleTrustee' requires that UNICODE be set to true or false in the root module");
        pub const ConvertSidToStringSid = @compileError("'ConvertSidToStringSid' requires that UNICODE be set to true or false in the root module");
        pub const ConvertStringSidToSid = @compileError("'ConvertStringSidToSid' requires that UNICODE be set to true or false in the root module");
        pub const ConvertStringSecurityDescriptorToSecurityDescriptor = @compileError("'ConvertStringSecurityDescriptorToSecurityDescriptor' requires that UNICODE be set to true or false in the root module");
        pub const ConvertSecurityDescriptorToStringSecurityDescriptor = @compileError("'ConvertSecurityDescriptorToStringSecurityDescriptor' requires that UNICODE be set to true or false in the root module");
        pub const CryptUIDlgViewCertificate = @compileError("'CryptUIDlgViewCertificate' requires that UNICODE be set to true or false in the root module");
        pub const LookupAccountSid = @compileError("'LookupAccountSid' requires that UNICODE be set to true or false in the root module");
        pub const LookupAccountName = @compileError("'LookupAccountName' requires that UNICODE be set to true or false in the root module");
        pub const LookupPrivilegeValue = @compileError("'LookupPrivilegeValue' requires that UNICODE be set to true or false in the root module");
        pub const LookupPrivilegeName = @compileError("'LookupPrivilegeName' requires that UNICODE be set to true or false in the root module");
        pub const LookupPrivilegeDisplayName = @compileError("'LookupPrivilegeDisplayName' requires that UNICODE be set to true or false in the root module");
        pub const LogonUser = @compileError("'LogonUser' requires that UNICODE be set to true or false in the root module");
        pub const LogonUserEx = @compileError("'LogonUserEx' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (43)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const HKEY = @import("windows_programming.zig").HKEY;
const LPARAM = @import("windows_and_messaging.zig").LPARAM;
const FILETIME = @import("windows_programming.zig").FILETIME;
const LM_OWF_PASSWORD = @import("password_management.zig").LM_OWF_PASSWORD;
const IDispatch = @import("automation.zig").IDispatch;
const HINSTANCE = @import("system_services.zig").HINSTANCE;
const OBJECT_ATTRIBUTES = @import("windows_programming.zig").OBJECT_ATTRIBUTES;
const HRESULT = @import("com.zig").HRESULT;
const IEnumUnknown = @import("com.zig").IEnumUnknown;
const SCARD_IO_REQUEST = @import("system_services.zig").SCARD_IO_REQUEST;
const BOOL = @import("system_services.zig").BOOL;
const LUID = @import("kernel.zig").LUID;
const WPARAM = @import("windows_and_messaging.zig").WPARAM;
const DLGPROC = @import("windows_and_messaging.zig").DLGPROC;
const PROPSHEETPAGEW = @import("controls.zig").PROPSHEETPAGEW;
const LIST_ENTRY = @import("kernel.zig").LIST_ENTRY;
const PROPERTYKEY = @import("windows_properties_system.zig").PROPERTYKEY;
const IPropertyStore = @import("audio.zig").IPropertyStore;
const HICON = @import("menus_and_resources.zig").HICON;
const PWSTR = @import("system_services.zig").PWSTR;
const IBindCtx = @import("com.zig").IBindCtx;
const HDESK = @import("windows_stations_and_desktops.zig").HDESK;
const DLGTEMPLATE = @import("windows_and_messaging.zig").DLGTEMPLATE;
const IUnknown = @import("com.zig").IUnknown;
const PROPSHEETPAGEA = @import("controls.zig").PROPSHEETPAGEA;
const LSTATUS = @import("system_services.zig").LSTATUS;
const SECURITY_ATTRIBUTES = @import("system_services.zig").SECURITY_ATTRIBUTES;
const PROPVARIANT = @import("structured_storage.zig").PROPVARIANT;
const PSTR = @import("system_services.zig").PSTR;
const HBITMAP = @import("gdi.zig").HBITMAP;
const BSTR = @import("automation.zig").BSTR;
const HWND = @import("windows_and_messaging.zig").HWND;
const LPTHREAD_START_ROUTINE = @import("system_services.zig").LPTHREAD_START_ROUTINE;
const LARGE_INTEGER = @import("system_services.zig").LARGE_INTEGER;
const CYPHER_BLOCK = @import("password_management.zig").CYPHER_BLOCK;
const VARIANT = @import("automation.zig").VARIANT;
const IDataObject = @import("com.zig").IDataObject;
const STRING = @import("windows_programming.zig").STRING;
const SYSTEMTIME = @import("windows_programming.zig").SYSTEMTIME;
const HANDLE = @import("system_services.zig").HANDLE;
const HPROPSHEETPAGE = @import("controls.zig").HPROPSHEETPAGE;
const NTSTATUS = @import("system_services.zig").NTSTATUS;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = PFN_NCRYPT_ALLOC;
    _ = PFN_NCRYPT_FREE;
    _ = PCRYPT_DECRYPT_PRIVATE_KEY_FUNC;
    _ = PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC;
    _ = PCRYPT_RESOLVE_HCRYPTPROV_FUNC;
    _ = PFN_CRYPT_ALLOC;
    _ = PFN_CRYPT_FREE;
    _ = PFN_CRYPT_ENUM_OID_FUNC;
    _ = PFN_CRYPT_ENUM_OID_INFO;
    _ = PFN_CMSG_STREAM_OUTPUT;
    _ = PFN_CMSG_ALLOC;
    _ = PFN_CMSG_FREE;
    _ = PFN_CMSG_GEN_ENCRYPT_KEY;
    _ = PFN_CMSG_EXPORT_ENCRYPT_KEY;
    _ = PFN_CMSG_IMPORT_ENCRYPT_KEY;
    _ = PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY;
    _ = PFN_CMSG_EXPORT_KEY_TRANS;
    _ = PFN_CMSG_EXPORT_KEY_AGREE;
    _ = PFN_CMSG_EXPORT_MAIL_LIST;
    _ = PFN_CMSG_IMPORT_KEY_TRANS;
    _ = PFN_CMSG_IMPORT_KEY_AGREE;
    _ = PFN_CMSG_IMPORT_MAIL_LIST;
    _ = PFN_CMSG_CNG_IMPORT_KEY_TRANS;
    _ = PFN_CMSG_CNG_IMPORT_KEY_AGREE;
    _ = PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY;
    _ = PFN_CERT_DLL_OPEN_STORE_PROV_FUNC;
    _ = PFN_CERT_STORE_PROV_CLOSE;
    _ = PFN_CERT_STORE_PROV_READ_CERT;
    _ = PFN_CERT_STORE_PROV_WRITE_CERT;
    _ = PFN_CERT_STORE_PROV_DELETE_CERT;
    _ = PFN_CERT_STORE_PROV_SET_CERT_PROPERTY;
    _ = PFN_CERT_STORE_PROV_READ_CRL;
    _ = PFN_CERT_STORE_PROV_WRITE_CRL;
    _ = PFN_CERT_STORE_PROV_DELETE_CRL;
    _ = PFN_CERT_STORE_PROV_SET_CRL_PROPERTY;
    _ = PFN_CERT_STORE_PROV_READ_CTL;
    _ = PFN_CERT_STORE_PROV_WRITE_CTL;
    _ = PFN_CERT_STORE_PROV_DELETE_CTL;
    _ = PFN_CERT_STORE_PROV_SET_CTL_PROPERTY;
    _ = PFN_CERT_STORE_PROV_CONTROL;
    _ = PFN_CERT_STORE_PROV_FIND_CERT;
    _ = PFN_CERT_STORE_PROV_FREE_FIND_CERT;
    _ = PFN_CERT_STORE_PROV_GET_CERT_PROPERTY;
    _ = PFN_CERT_STORE_PROV_FIND_CRL;
    _ = PFN_CERT_STORE_PROV_FREE_FIND_CRL;
    _ = PFN_CERT_STORE_PROV_GET_CRL_PROPERTY;
    _ = PFN_CERT_STORE_PROV_FIND_CTL;
    _ = PFN_CERT_STORE_PROV_FREE_FIND_CTL;
    _ = PFN_CERT_STORE_PROV_GET_CTL_PROPERTY;
    _ = PFN_CERT_CREATE_CONTEXT_SORT_FUNC;
    _ = PFN_CERT_ENUM_SYSTEM_STORE_LOCATION;
    _ = PFN_CERT_ENUM_SYSTEM_STORE;
    _ = PFN_CERT_ENUM_PHYSICAL_STORE;
    _ = PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC;
    _ = PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC;
    _ = PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC;
    _ = PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC;
    _ = PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC;
    _ = PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC;
    _ = PFN_IMPORT_PRIV_KEY_FUNC;
    _ = PFN_EXPORT_PRIV_KEY_FUNC;
    _ = PFN_CRYPT_GET_SIGNER_CERTIFICATE;
    _ = PFN_CRYPT_ASYNC_PARAM_FREE_FUNC;
    _ = PFN_FREE_ENCODED_OBJECT_FUNC;
    _ = PFN_CRYPT_CANCEL_RETRIEVAL;
    _ = PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC;
    _ = PFN_CANCEL_ASYNC_RETRIEVAL_FUNC;
    _ = PFN_CRYPT_ENUM_KEYID_PROP;
    _ = PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK;
    _ = PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK;
    _ = PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH;
    _ = PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET;
    _ = PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE;
    _ = PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD;
    _ = PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE;
    _ = PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER;
    _ = PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE;
    _ = PFN_CERT_IS_WEAK_HASH;
    _ = LPOCNCONNPROCA;
    _ = LPOCNCONNPROCW;
    _ = LPOCNCHKPROC;
    _ = LPOCNDSCPROC;
    _ = SERVICE_MAIN_FUNCTIONW;
    _ = SERVICE_MAIN_FUNCTIONA;
    _ = LPSERVICE_MAIN_FUNCTIONW;
    _ = LPSERVICE_MAIN_FUNCTIONA;
    _ = HANDLER_FUNCTION;
    _ = HANDLER_FUNCTION_EX;
    _ = LPHANDLER_FUNCTION;
    _ = LPHANDLER_FUNCTION_EX;
    _ = PFN_SC_NOTIFY_CALLBACK;
    _ = SC_NOTIFICATION_CALLBACK;
    _ = PSC_NOTIFICATION_CALLBACK;
    _ = PSAM_PASSWORD_NOTIFICATION_ROUTINE;
    _ = PSAM_INIT_NOTIFICATION_ROUTINE;
    _ = PSAM_PASSWORD_FILTER_ROUTINE;
    _ = SEC_GET_KEY_FN;
    _ = ACQUIRE_CREDENTIALS_HANDLE_FN_W;
    _ = ACQUIRE_CREDENTIALS_HANDLE_FN_A;
    _ = FREE_CREDENTIALS_HANDLE_FN;
    _ = ADD_CREDENTIALS_FN_W;
    _ = ADD_CREDENTIALS_FN_A;
    _ = CHANGE_PASSWORD_FN_W;
    _ = CHANGE_PASSWORD_FN_A;
    _ = INITIALIZE_SECURITY_CONTEXT_FN_W;
    _ = INITIALIZE_SECURITY_CONTEXT_FN_A;
    _ = ACCEPT_SECURITY_CONTEXT_FN;
    _ = COMPLETE_AUTH_TOKEN_FN;
    _ = IMPERSONATE_SECURITY_CONTEXT_FN;
    _ = REVERT_SECURITY_CONTEXT_FN;
    _ = QUERY_SECURITY_CONTEXT_TOKEN_FN;
    _ = DELETE_SECURITY_CONTEXT_FN;
    _ = APPLY_CONTROL_TOKEN_FN;
    _ = QUERY_CONTEXT_ATTRIBUTES_FN_W;
    _ = QUERY_CONTEXT_ATTRIBUTES_EX_FN_W;
    _ = QUERY_CONTEXT_ATTRIBUTES_FN_A;
    _ = QUERY_CONTEXT_ATTRIBUTES_EX_FN_A;
    _ = SET_CONTEXT_ATTRIBUTES_FN_W;
    _ = SET_CONTEXT_ATTRIBUTES_FN_A;
    _ = QUERY_CREDENTIALS_ATTRIBUTES_FN_W;
    _ = QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W;
    _ = QUERY_CREDENTIALS_ATTRIBUTES_FN_A;
    _ = QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_A;
    _ = SET_CREDENTIALS_ATTRIBUTES_FN_W;
    _ = SET_CREDENTIALS_ATTRIBUTES_FN_A;
    _ = FREE_CONTEXT_BUFFER_FN;
    _ = MAKE_SIGNATURE_FN;
    _ = VERIFY_SIGNATURE_FN;
    _ = ENCRYPT_MESSAGE_FN;
    _ = DECRYPT_MESSAGE_FN;
    _ = ENUMERATE_SECURITY_PACKAGES_FN_W;
    _ = ENUMERATE_SECURITY_PACKAGES_FN_A;
    _ = QUERY_SECURITY_PACKAGE_INFO_FN_W;
    _ = QUERY_SECURITY_PACKAGE_INFO_FN_A;
    _ = EXPORT_SECURITY_CONTEXT_FN;
    _ = IMPORT_SECURITY_CONTEXT_FN_W;
    _ = IMPORT_SECURITY_CONTEXT_FN_A;
    _ = INIT_SECURITY_INTERFACE_A;
    _ = INIT_SECURITY_INTERFACE_W;
    _ = LSA_CREATE_LOGON_SESSION;
    _ = LSA_DELETE_LOGON_SESSION;
    _ = LSA_ADD_CREDENTIAL;
    _ = LSA_GET_CREDENTIALS;
    _ = LSA_DELETE_CREDENTIAL;
    _ = LSA_ALLOCATE_LSA_HEAP;
    _ = LSA_FREE_LSA_HEAP;
    _ = LSA_ALLOCATE_PRIVATE_HEAP;
    _ = LSA_FREE_PRIVATE_HEAP;
    _ = LSA_ALLOCATE_CLIENT_BUFFER;
    _ = LSA_FREE_CLIENT_BUFFER;
    _ = LSA_COPY_TO_CLIENT_BUFFER;
    _ = LSA_COPY_FROM_CLIENT_BUFFER;
    _ = PLSA_CREATE_LOGON_SESSION;
    _ = PLSA_DELETE_LOGON_SESSION;
    _ = PLSA_ADD_CREDENTIAL;
    _ = PLSA_GET_CREDENTIALS;
    _ = PLSA_DELETE_CREDENTIAL;
    _ = PLSA_ALLOCATE_LSA_HEAP;
    _ = PLSA_FREE_LSA_HEAP;
    _ = PLSA_ALLOCATE_PRIVATE_HEAP;
    _ = PLSA_FREE_PRIVATE_HEAP;
    _ = PLSA_ALLOCATE_CLIENT_BUFFER;
    _ = PLSA_FREE_CLIENT_BUFFER;
    _ = PLSA_COPY_TO_CLIENT_BUFFER;
    _ = PLSA_COPY_FROM_CLIENT_BUFFER;
    _ = LSA_AP_INITIALIZE_PACKAGE;
    _ = LSA_AP_LOGON_USER;
    _ = LSA_AP_LOGON_USER_EX;
    _ = LSA_AP_CALL_PACKAGE;
    _ = LSA_AP_CALL_PACKAGE_PASSTHROUGH;
    _ = LSA_AP_LOGON_TERMINATED;
    _ = LSA_AP_CALL_PACKAGE_UNTRUSTED;
    _ = PLSA_AP_INITIALIZE_PACKAGE;
    _ = PLSA_AP_LOGON_USER;
    _ = PLSA_AP_LOGON_USER_EX;
    _ = PLSA_AP_CALL_PACKAGE;
    _ = PLSA_AP_CALL_PACKAGE_PASSTHROUGH;
    _ = PLSA_AP_LOGON_TERMINATED;
    _ = PLSA_AP_CALL_PACKAGE_UNTRUSTED;
    _ = PSAM_CREDENTIAL_UPDATE_NOTIFY_ROUTINE;
    _ = PSAM_CREDENTIAL_UPDATE_REGISTER_ROUTINE;
    _ = PSAM_CREDENTIAL_UPDATE_FREE_ROUTINE;
    _ = PSAM_CREDENTIAL_UPDATE_REGISTER_MAPPED_ENTRYPOINTS_ROUTINE;
    _ = SEC_THREAD_START;
    _ = LSA_CALLBACK_FUNCTION;
    _ = PLSA_CALLBACK_FUNCTION;
    _ = LSA_REDIRECTED_LOGON_INIT;
    _ = LSA_REDIRECTED_LOGON_CALLBACK;
    _ = LSA_REDIRECTED_LOGON_CLEANUP_CALLBACK;
    _ = LSA_REDIRECTED_LOGON_GET_LOGON_CREDS;
    _ = LSA_REDIRECTED_LOGON_GET_SUPP_CREDS;
    _ = PLSA_REDIRECTED_LOGON_INIT;
    _ = PLSA_REDIRECTED_LOGON_CALLBACK;
    _ = PLSA_REDIRECTED_LOGON_GET_LOGON_CREDS;
    _ = PLSA_REDIRECTED_LOGON_GET_SUPP_CREDS;
    _ = PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK;
    _ = LSA_IMPERSONATE_CLIENT;
    _ = LSA_UNLOAD_PACKAGE;
    _ = LSA_DUPLICATE_HANDLE;
    _ = LSA_SAVE_SUPPLEMENTAL_CREDENTIALS;
    _ = LSA_CREATE_THREAD;
    _ = LSA_GET_CLIENT_INFO;
    _ = LSA_REGISTER_NOTIFICATION;
    _ = LSA_CANCEL_NOTIFICATION;
    _ = LSA_MAP_BUFFER;
    _ = LSA_CREATE_TOKEN;
    _ = LSA_CREATE_TOKEN_EX;
    _ = LSA_AUDIT_LOGON;
    _ = LSA_CALL_PACKAGE;
    _ = LSA_CALL_PACKAGEEX;
    _ = LSA_CALL_PACKAGE_PASSTHROUGH;
    _ = LSA_GET_CALL_INFO;
    _ = LSA_CREATE_SHARED_MEMORY;
    _ = LSA_ALLOCATE_SHARED_MEMORY;
    _ = LSA_FREE_SHARED_MEMORY;
    _ = LSA_DELETE_SHARED_MEMORY;
    _ = LSA_GET_APP_MODE_INFO;
    _ = LSA_SET_APP_MODE_INFO;
    _ = LSA_OPEN_SAM_USER;
    _ = LSA_GET_USER_CREDENTIALS;
    _ = LSA_GET_USER_AUTH_DATA;
    _ = LSA_CLOSE_SAM_USER;
    _ = LSA_GET_AUTH_DATA_FOR_USER;
    _ = LSA_CONVERT_AUTH_DATA_TO_TOKEN;
    _ = LSA_CRACK_SINGLE_NAME;
    _ = LSA_AUDIT_ACCOUNT_LOGON;
    _ = LSA_CLIENT_CALLBACK;
    _ = LSA_REGISTER_CALLBACK;
    _ = LSA_GET_EXTENDED_CALL_FLAGS;
    _ = LSA_UPDATE_PRIMARY_CREDENTIALS;
    _ = LSA_PROTECT_MEMORY;
    _ = LSA_OPEN_TOKEN_BY_LOGON_ID;
    _ = LSA_EXPAND_AUTH_DATA_FOR_DOMAIN;
    _ = LSA_GET_SERVICE_ACCOUNT_PASSWORD;
    _ = LSA_AUDIT_LOGON_EX;
    _ = LSA_CHECK_PROTECTED_USER_BY_TOKEN;
    _ = LSA_QUERY_CLIENT_REQUEST;
    _ = PLSA_IMPERSONATE_CLIENT;
    _ = PLSA_UNLOAD_PACKAGE;
    _ = PLSA_DUPLICATE_HANDLE;
    _ = PLSA_SAVE_SUPPLEMENTAL_CREDENTIALS;
    _ = PLSA_CREATE_THREAD;
    _ = PLSA_GET_CLIENT_INFO;
    _ = PLSA_REGISTER_NOTIFICATION;
    _ = PLSA_CANCEL_NOTIFICATION;
    _ = PLSA_MAP_BUFFER;
    _ = PLSA_CREATE_TOKEN;
    _ = PLSA_AUDIT_LOGON;
    _ = PLSA_CALL_PACKAGE;
    _ = PLSA_CALL_PACKAGEEX;
    _ = PLSA_GET_CALL_INFO;
    _ = PLSA_CREATE_SHARED_MEMORY;
    _ = PLSA_ALLOCATE_SHARED_MEMORY;
    _ = PLSA_FREE_SHARED_MEMORY;
    _ = PLSA_DELETE_SHARED_MEMORY;
    _ = PLSA_OPEN_SAM_USER;
    _ = PLSA_GET_USER_CREDENTIALS;
    _ = PLSA_GET_USER_AUTH_DATA;
    _ = PLSA_CLOSE_SAM_USER;
    _ = PLSA_CONVERT_AUTH_DATA_TO_TOKEN;
    _ = PLSA_CLIENT_CALLBACK;
    _ = PLSA_REGISTER_CALLBACK;
    _ = PLSA_UPDATE_PRIMARY_CREDENTIALS;
    _ = PLSA_GET_AUTH_DATA_FOR_USER;
    _ = PLSA_CRACK_SINGLE_NAME;
    _ = PLSA_AUDIT_ACCOUNT_LOGON;
    _ = PLSA_CALL_PACKAGE_PASSTHROUGH;
    _ = PLSA_PROTECT_MEMORY;
    _ = PLSA_OPEN_TOKEN_BY_LOGON_ID;
    _ = PLSA_EXPAND_AUTH_DATA_FOR_DOMAIN;
    _ = PLSA_CREATE_TOKEN_EX;
    _ = PLSA_GET_EXTENDED_CALL_FLAGS;
    _ = PLSA_GET_SERVICE_ACCOUNT_PASSWORD;
    _ = PLSA_AUDIT_LOGON_EX;
    _ = PLSA_CHECK_PROTECTED_USER_BY_TOKEN;
    _ = PLSA_QUERY_CLIENT_REQUEST;
    _ = PLSA_GET_APP_MODE_INFO;
    _ = PLSA_SET_APP_MODE_INFO;
    _ = CredReadFn;
    _ = CredReadDomainCredentialsFn;
    _ = CredFreeCredentialsFn;
    _ = CredWriteFn;
    _ = CrediUnmarshalandDecodeStringFn;
    _ = LSA_LOCATE_PKG_BY_ID;
    _ = PLSA_LOCATE_PKG_BY_ID;
    _ = SpInitializeFn;
    _ = SpShutdownFn;
    _ = SpGetInfoFn;
    _ = SpGetExtendedInformationFn;
    _ = SpSetExtendedInformationFn;
    _ = LSA_AP_LOGON_USER_EX2;
    _ = PLSA_AP_LOGON_USER_EX2;
    _ = LSA_AP_LOGON_USER_EX3;
    _ = PLSA_AP_LOGON_USER_EX3;
    _ = LSA_AP_PRE_LOGON_USER_SURROGATE;
    _ = PLSA_AP_PRE_LOGON_USER_SURROGATE;
    _ = LSA_AP_POST_LOGON_USER_SURROGATE;
    _ = PLSA_AP_POST_LOGON_USER_SURROGATE;
    _ = SpAcceptCredentialsFn;
    _ = SpAcquireCredentialsHandleFn;
    _ = SpFreeCredentialsHandleFn;
    _ = SpQueryCredentialsAttributesFn;
    _ = SpSetCredentialsAttributesFn;
    _ = SpAddCredentialsFn;
    _ = SpSaveCredentialsFn;
    _ = SpGetCredentialsFn;
    _ = SpDeleteCredentialsFn;
    _ = SpInitLsaModeContextFn;
    _ = SpDeleteContextFn;
    _ = SpApplyControlTokenFn;
    _ = SpAcceptLsaModeContextFn;
    _ = SpGetUserInfoFn;
    _ = SpQueryContextAttributesFn;
    _ = SpSetContextAttributesFn;
    _ = SpChangeAccountPasswordFn;
    _ = SpQueryMetaDataFn;
    _ = SpExchangeMetaDataFn;
    _ = SpGetCredUIContextFn;
    _ = SpUpdateCredentialsFn;
    _ = SpValidateTargetInfoFn;
    _ = LSA_AP_POST_LOGON_USER;
    _ = SpGetRemoteCredGuardLogonBufferFn;
    _ = SpGetRemoteCredGuardSupplementalCredsFn;
    _ = SpGetTbalSupplementalCredsFn;
    _ = SpInstanceInitFn;
    _ = SpInitUserModeContextFn;
    _ = SpMakeSignatureFn;
    _ = SpVerifySignatureFn;
    _ = SpSealMessageFn;
    _ = SpUnsealMessageFn;
    _ = SpGetContextTokenFn;
    _ = SpExportSecurityContextFn;
    _ = SpImportSecurityContextFn;
    _ = SpCompleteAuthTokenFn;
    _ = SpFormatCredentialsFn;
    _ = SpMarshallSupplementalCredsFn;
    _ = SpLsaModeInitializeFn;
    _ = SpUserModeInitializeFn;
    _ = KSEC_CREATE_CONTEXT_LIST;
    _ = KSEC_INSERT_LIST_ENTRY;
    _ = KSEC_REFERENCE_LIST_ENTRY;
    _ = KSEC_DEREFERENCE_LIST_ENTRY;
    _ = KSEC_SERIALIZE_WINNT_AUTH_DATA;
    _ = KSEC_SERIALIZE_SCHANNEL_AUTH_DATA;
    _ = PKSEC_CREATE_CONTEXT_LIST;
    _ = PKSEC_INSERT_LIST_ENTRY;
    _ = PKSEC_REFERENCE_LIST_ENTRY;
    _ = PKSEC_DEREFERENCE_LIST_ENTRY;
    _ = PKSEC_SERIALIZE_WINNT_AUTH_DATA;
    _ = PKSEC_SERIALIZE_SCHANNEL_AUTH_DATA;
    _ = KSEC_LOCATE_PKG_BY_ID;
    _ = PKSEC_LOCATE_PKG_BY_ID;
    _ = KspInitPackageFn;
    _ = KspDeleteContextFn;
    _ = KspInitContextFn;
    _ = KspMakeSignatureFn;
    _ = KspVerifySignatureFn;
    _ = KspSealMessageFn;
    _ = KspUnsealMessageFn;
    _ = KspGetTokenFn;
    _ = KspQueryAttributesFn;
    _ = KspCompleteTokenFn;
    _ = KspMapHandleFn;
    _ = KspSetPagingModeFn;
    _ = KspSerializeAuthDataFn;
    _ = SSL_EMPTY_CACHE_FN_A;
    _ = SSL_EMPTY_CACHE_FN_W;
    _ = SSL_CRACK_CERTIFICATE_FN;
    _ = SSL_FREE_CERTIFICATE_FN;
    _ = SslGetServerIdentityFn;
    _ = SslGetExtensionsFn;
    _ = PWLX_USE_CTRL_ALT_DEL;
    _ = PWLX_SET_CONTEXT_POINTER;
    _ = PWLX_SAS_NOTIFY;
    _ = PWLX_SET_TIMEOUT;
    _ = PWLX_ASSIGN_SHELL_PROTECTION;
    _ = PWLX_MESSAGE_BOX;
    _ = PWLX_DIALOG_BOX;
    _ = PWLX_DIALOG_BOX_INDIRECT;
    _ = PWLX_DIALOG_BOX_PARAM;
    _ = PWLX_DIALOG_BOX_INDIRECT_PARAM;
    _ = PWLX_SWITCH_DESKTOP_TO_USER;
    _ = PWLX_SWITCH_DESKTOP_TO_WINLOGON;
    _ = PWLX_CHANGE_PASSWORD_NOTIFY;
    _ = PWLX_GET_SOURCE_DESKTOP;
    _ = PWLX_SET_RETURN_DESKTOP;
    _ = PWLX_CREATE_USER_DESKTOP;
    _ = PWLX_CHANGE_PASSWORD_NOTIFY_EX;
    _ = PWLX_CLOSE_USER_DESKTOP;
    _ = PWLX_SET_OPTION;
    _ = PWLX_GET_OPTION;
    _ = PWLX_WIN31_MIGRATE;
    _ = PWLX_QUERY_CLIENT_CREDENTIALS;
    _ = PWLX_QUERY_IC_CREDENTIALS;
    _ = PWLX_QUERY_TS_LOGON_CREDENTIALS;
    _ = PWLX_DISCONNECT;
    _ = PWLX_QUERY_TERMINAL_SERVICES_DATA;
    _ = PWLX_QUERY_CONSOLESWITCH_CREDENTIALS;
    _ = PFNMSGECALLBACK;
    _ = PF_NPAddConnection;
    _ = PF_NPAddConnection3;
    _ = PF_NPAddConnection4;
    _ = PF_NPCancelConnection;
    _ = PF_NPGetConnection;
    _ = PF_NPGetConnection3;
    _ = PF_NPGetUniversalName;
    _ = PF_NPGetConnectionPerformance;
    _ = PF_NPOpenEnum;
    _ = PF_NPEnumResource;
    _ = PF_NPCloseEnum;
    _ = PF_NPGetCaps;
    _ = PF_NPGetUser;
    _ = PF_NPGetPersistentUseOptionsForConnection;
    _ = PF_NPDeviceMode;
    _ = PF_NPSearchDialog;
    _ = PF_NPGetResourceParent;
    _ = PF_NPGetResourceInformation;
    _ = PF_NPFormatNetworkName;
    _ = PF_NPGetPropertyText;
    _ = PF_NPPropertyDialog;
    _ = PF_NPGetDirectoryType;
    _ = PF_NPDirectoryNotify;
    _ = PF_NPLogonNotify;
    _ = PF_NPPasswordChangeNotify;
    _ = PF_AddConnectNotify;
    _ = PF_CancelConnectNotify;
    _ = PF_NPFMXGetPermCaps;
    _ = PF_NPFMXEditPerm;
    _ = PF_NPFMXGetPermHelp;
    _ = PFN_AUTHZ_DYNAMIC_ACCESS_CHECK;
    _ = PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS;
    _ = PFN_AUTHZ_FREE_DYNAMIC_GROUPS;
    _ = PFN_AUTHZ_GET_CENTRAL_ACCESS_POLICY;
    _ = PFN_AUTHZ_FREE_CENTRAL_ACCESS_POLICY;
    _ = FN_PROGRESS;
    _ = PFNREADOBJECTSECURITY;
    _ = PFNWRITEOBJECTSECURITY;
    _ = PFNDSCREATEISECINFO;
    _ = PFNDSCREATEISECINFOEX;
    _ = PFNDSCREATESECPAGE;
    _ = PFNDSEDITSECURITY;
    _ = FNCERTSRVISSERVERONLINEW;
    _ = FNCERTSRVBACKUPGETDYNAMICFILELISTW;
    _ = FNCERTSRVBACKUPPREPAREW;
    _ = FNCERTSRVBACKUPGETDATABASENAMESW;
    _ = FNCERTSRVBACKUPOPENFILEW;
    _ = FNCERTSRVBACKUPREAD;
    _ = FNCERTSRVBACKUPCLOSE;
    _ = FNCERTSRVBACKUPGETBACKUPLOGSW;
    _ = FNCERTSRVBACKUPTRUNCATELOGS;
    _ = FNCERTSRVBACKUPEND;
    _ = FNCERTSRVBACKUPFREE;
    _ = FNCERTSRVRESTOREGETDATABASELOCATIONSW;
    _ = FNCERTSRVRESTOREPREPAREW;
    _ = FNCERTSRVRESTOREREGISTERW;
    _ = FNCERTSRVRESTOREREGISTERCOMPLETE;
    _ = FNCERTSRVRESTOREEND;
    _ = FNCERTSRVSERVERCONTROLW;
    _ = FNIMPORTPFXTOPROVIDER;
    _ = FNIMPORTPFXTOPROVIDERFREEDATA;
    _ = PFNCryptStreamOutputCallback;
    _ = PFNCryptStreamOutputCallbackEx;
    _ = PFN_CRYPT_XML_WRITE_CALLBACK;
    _ = PFN_CRYPT_XML_DATA_PROVIDER_READ;
    _ = PFN_CRYPT_XML_DATA_PROVIDER_CLOSE;
    _ = PFN_CRYPT_XML_CREATE_TRANSFORM;
    _ = PFN_CRYPT_XML_ENUM_ALG_INFO;
    _ = CryptXmlDllGetInterface;
    _ = CryptXmlDllEncodeAlgorithm;
    _ = CryptXmlDllCreateDigest;
    _ = CryptXmlDllDigestData;
    _ = CryptXmlDllFinalizeDigest;
    _ = CryptXmlDllCloseDigest;
    _ = CryptXmlDllSignData;
    _ = CryptXmlDllVerifySignature;
    _ = CryptXmlDllGetAlgorithmInfo;
    _ = CryptXmlDllEncodeKeyValue;
    _ = CryptXmlDllCreateKey;
    _ = PFNCMFILTERPROC;
    _ = PFNCMHOOKPROC;
    _ = PFNTRUSTHELPER;
    _ = PFN_CPD_MEM_ALLOC;
    _ = PFN_CPD_MEM_FREE;
    _ = PFN_CPD_ADD_STORE;
    _ = PFN_CPD_ADD_SGNR;
    _ = PFN_CPD_ADD_CERT;
    _ = PFN_CPD_ADD_PRIVDATA;
    _ = PFN_PROVIDER_INIT_CALL;
    _ = PFN_PROVIDER_OBJTRUST_CALL;
    _ = PFN_PROVIDER_SIGTRUST_CALL;
    _ = PFN_PROVIDER_CERTTRUST_CALL;
    _ = PFN_PROVIDER_FINALPOLICY_CALL;
    _ = PFN_PROVIDER_TESTFINALPOLICY_CALL;
    _ = PFN_PROVIDER_CLEANUP_CALL;
    _ = PFN_PROVIDER_CERTCHKPOLICY_CALL;
    _ = PFN_PROVUI_CALL;
    _ = PFN_ALLOCANDFILLDEFUSAGE;
    _ = PFN_FREEDEFUSAGE;
    _ = PFNCFILTERPROC;
    _ = pCryptSIPGetSignedDataMsg;
    _ = pCryptSIPPutSignedDataMsg;
    _ = pCryptSIPCreateIndirectData;
    _ = pCryptSIPVerifyIndirectData;
    _ = pCryptSIPRemoveSignedDataMsg;
    _ = pfnIsFileSupported;
    _ = pfnIsFileSupportedName;
    _ = pCryptSIPGetCaps;
    _ = pCryptSIPGetSealedDigest;
    _ = PFN_CDF_PARSE_ERROR_CALLBACK;
    _ = PFSCE_QUERY_INFO;
    _ = PFSCE_SET_INFO;
    _ = PFSCE_FREE_INFO;
    _ = PFSCE_LOG_INFO;
    _ = PF_ConfigAnalyzeService;
    _ = PF_UpdateService;

    const constant_export_count = 7;
    const type_export_count = 1912;
    const enum_value_export_count = 1956;
    const com_iface_id_export_count = 212;
    const com_class_id_export_count = 106;
    const func_export_count = 1169;
    const unicode_alias_count = 221;
    const import_count = 43;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

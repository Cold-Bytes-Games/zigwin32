//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (10)
//--------------------------------------------------------------------------------
pub const EC_SUBSCRIPTION_PROPERTY_ID = extern enum(i32) {
    EcSubscriptionEnabled = 0,
    EcSubscriptionEventSources = 1,
    EcSubscriptionEventSourceAddress = 2,
    EcSubscriptionEventSourceEnabled = 3,
    EcSubscriptionEventSourceUserName = 4,
    EcSubscriptionEventSourcePassword = 5,
    EcSubscriptionDescription = 6,
    EcSubscriptionURI = 7,
    EcSubscriptionConfigurationMode = 8,
    EcSubscriptionExpires = 9,
    EcSubscriptionQuery = 10,
    EcSubscriptionTransportName = 11,
    EcSubscriptionTransportPort = 12,
    EcSubscriptionDeliveryMode = 13,
    EcSubscriptionDeliveryMaxItems = 14,
    EcSubscriptionDeliveryMaxLatencyTime = 15,
    EcSubscriptionHeartbeatInterval = 16,
    EcSubscriptionLocale = 17,
    EcSubscriptionContentFormat = 18,
    EcSubscriptionLogFile = 19,
    EcSubscriptionPublisherName = 20,
    EcSubscriptionCredentialsType = 21,
    EcSubscriptionCommonUserName = 22,
    EcSubscriptionCommonPassword = 23,
    EcSubscriptionHostName = 24,
    EcSubscriptionReadExistingEvents = 25,
    EcSubscriptionDialect = 26,
    EcSubscriptionType = 27,
    EcSubscriptionAllowedIssuerCAs = 28,
    EcSubscriptionAllowedSubjects = 29,
    EcSubscriptionDeniedSubjects = 30,
    EcSubscriptionAllowedSourceDomainComputers = 31,
    EcSubscriptionPropertyIdEND = 32,
};
pub const EcSubscriptionEnabled = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionEnabled;
pub const EcSubscriptionEventSources = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionEventSources;
pub const EcSubscriptionEventSourceAddress = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionEventSourceAddress;
pub const EcSubscriptionEventSourceEnabled = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionEventSourceEnabled;
pub const EcSubscriptionEventSourceUserName = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionEventSourceUserName;
pub const EcSubscriptionEventSourcePassword = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionEventSourcePassword;
pub const EcSubscriptionDescription = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionDescription;
pub const EcSubscriptionURI = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionURI;
pub const EcSubscriptionConfigurationMode = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionConfigurationMode;
pub const EcSubscriptionExpires = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionExpires;
pub const EcSubscriptionQuery = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionQuery;
pub const EcSubscriptionTransportName = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionTransportName;
pub const EcSubscriptionTransportPort = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionTransportPort;
pub const EcSubscriptionDeliveryMode = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionDeliveryMode;
pub const EcSubscriptionDeliveryMaxItems = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionDeliveryMaxItems;
pub const EcSubscriptionDeliveryMaxLatencyTime = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionDeliveryMaxLatencyTime;
pub const EcSubscriptionHeartbeatInterval = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionHeartbeatInterval;
pub const EcSubscriptionLocale = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionLocale;
pub const EcSubscriptionContentFormat = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionContentFormat;
pub const EcSubscriptionLogFile = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionLogFile;
pub const EcSubscriptionPublisherName = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionPublisherName;
pub const EcSubscriptionCredentialsType = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionCredentialsType;
pub const EcSubscriptionCommonUserName = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionCommonUserName;
pub const EcSubscriptionCommonPassword = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionCommonPassword;
pub const EcSubscriptionHostName = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionHostName;
pub const EcSubscriptionReadExistingEvents = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionReadExistingEvents;
pub const EcSubscriptionDialect = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionDialect;
pub const EcSubscriptionType = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionType;
pub const EcSubscriptionAllowedIssuerCAs = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionAllowedIssuerCAs;
pub const EcSubscriptionAllowedSubjects = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionAllowedSubjects;
pub const EcSubscriptionDeniedSubjects = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionDeniedSubjects;
pub const EcSubscriptionAllowedSourceDomainComputers = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionAllowedSourceDomainComputers;
pub const EcSubscriptionPropertyIdEND = EC_SUBSCRIPTION_PROPERTY_ID.EcSubscriptionPropertyIdEND;

pub const EC_SUBSCRIPTION_CREDENTIALS_TYPE = extern enum(i32) {
    EcSubscriptionCredDefault = 0,
    EcSubscriptionCredNegotiate = 1,
    EcSubscriptionCredDigest = 2,
    EcSubscriptionCredBasic = 3,
    EcSubscriptionCredLocalMachine = 4,
};
pub const EcSubscriptionCredDefault = EC_SUBSCRIPTION_CREDENTIALS_TYPE.EcSubscriptionCredDefault;
pub const EcSubscriptionCredNegotiate = EC_SUBSCRIPTION_CREDENTIALS_TYPE.EcSubscriptionCredNegotiate;
pub const EcSubscriptionCredDigest = EC_SUBSCRIPTION_CREDENTIALS_TYPE.EcSubscriptionCredDigest;
pub const EcSubscriptionCredBasic = EC_SUBSCRIPTION_CREDENTIALS_TYPE.EcSubscriptionCredBasic;
pub const EcSubscriptionCredLocalMachine = EC_SUBSCRIPTION_CREDENTIALS_TYPE.EcSubscriptionCredLocalMachine;

pub const EC_SUBSCRIPTION_TYPE = extern enum(i32) {
    EcSubscriptionTypeSourceInitiated = 0,
    EcSubscriptionTypeCollectorInitiated = 1,
};
pub const EcSubscriptionTypeSourceInitiated = EC_SUBSCRIPTION_TYPE.EcSubscriptionTypeSourceInitiated;
pub const EcSubscriptionTypeCollectorInitiated = EC_SUBSCRIPTION_TYPE.EcSubscriptionTypeCollectorInitiated;

pub const EC_SUBSCRIPTION_RUNTIME_STATUS_INFO_ID = extern enum(i32) {
    EcSubscriptionRunTimeStatusActive = 0,
    EcSubscriptionRunTimeStatusLastError = 1,
    EcSubscriptionRunTimeStatusLastErrorMessage = 2,
    EcSubscriptionRunTimeStatusLastErrorTime = 3,
    EcSubscriptionRunTimeStatusNextRetryTime = 4,
    EcSubscriptionRunTimeStatusEventSources = 5,
    EcSubscriptionRunTimeStatusLastHeartbeatTime = 6,
    EcSubscriptionRunTimeStatusInfoIdEND = 7,
};
pub const EcSubscriptionRunTimeStatusActive = EC_SUBSCRIPTION_RUNTIME_STATUS_INFO_ID.EcSubscriptionRunTimeStatusActive;
pub const EcSubscriptionRunTimeStatusLastError = EC_SUBSCRIPTION_RUNTIME_STATUS_INFO_ID.EcSubscriptionRunTimeStatusLastError;
pub const EcSubscriptionRunTimeStatusLastErrorMessage = EC_SUBSCRIPTION_RUNTIME_STATUS_INFO_ID.EcSubscriptionRunTimeStatusLastErrorMessage;
pub const EcSubscriptionRunTimeStatusLastErrorTime = EC_SUBSCRIPTION_RUNTIME_STATUS_INFO_ID.EcSubscriptionRunTimeStatusLastErrorTime;
pub const EcSubscriptionRunTimeStatusNextRetryTime = EC_SUBSCRIPTION_RUNTIME_STATUS_INFO_ID.EcSubscriptionRunTimeStatusNextRetryTime;
pub const EcSubscriptionRunTimeStatusEventSources = EC_SUBSCRIPTION_RUNTIME_STATUS_INFO_ID.EcSubscriptionRunTimeStatusEventSources;
pub const EcSubscriptionRunTimeStatusLastHeartbeatTime = EC_SUBSCRIPTION_RUNTIME_STATUS_INFO_ID.EcSubscriptionRunTimeStatusLastHeartbeatTime;
pub const EcSubscriptionRunTimeStatusInfoIdEND = EC_SUBSCRIPTION_RUNTIME_STATUS_INFO_ID.EcSubscriptionRunTimeStatusInfoIdEND;

pub const EC_VARIANT_TYPE = extern enum(i32) {
    EcVarTypeNull = 0,
    EcVarTypeBoolean = 1,
    EcVarTypeUInt32 = 2,
    EcVarTypeDateTime = 3,
    EcVarTypeString = 4,
    EcVarObjectArrayPropertyHandle = 5,
};
pub const EcVarTypeNull = EC_VARIANT_TYPE.EcVarTypeNull;
pub const EcVarTypeBoolean = EC_VARIANT_TYPE.EcVarTypeBoolean;
pub const EcVarTypeUInt32 = EC_VARIANT_TYPE.EcVarTypeUInt32;
pub const EcVarTypeDateTime = EC_VARIANT_TYPE.EcVarTypeDateTime;
pub const EcVarTypeString = EC_VARIANT_TYPE.EcVarTypeString;
pub const EcVarObjectArrayPropertyHandle = EC_VARIANT_TYPE.EcVarObjectArrayPropertyHandle;

pub const EC_VARIANT = extern struct {
    Anonymous: EC_VARIANT._Anonymous_e__Union,
    Count: u32,
    Type: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const EC_SUBSCRIPTION_CONFIGURATION_MODE = extern enum(i32) {
    EcConfigurationModeNormal = 0,
    EcConfigurationModeCustom = 1,
    EcConfigurationModeMinLatency = 2,
    EcConfigurationModeMinBandwidth = 3,
};
pub const EcConfigurationModeNormal = EC_SUBSCRIPTION_CONFIGURATION_MODE.EcConfigurationModeNormal;
pub const EcConfigurationModeCustom = EC_SUBSCRIPTION_CONFIGURATION_MODE.EcConfigurationModeCustom;
pub const EcConfigurationModeMinLatency = EC_SUBSCRIPTION_CONFIGURATION_MODE.EcConfigurationModeMinLatency;
pub const EcConfigurationModeMinBandwidth = EC_SUBSCRIPTION_CONFIGURATION_MODE.EcConfigurationModeMinBandwidth;

pub const EC_SUBSCRIPTION_DELIVERY_MODE = extern enum(i32) {
    EcDeliveryModePull = 1,
    EcDeliveryModePush = 2,
};
pub const EcDeliveryModePull = EC_SUBSCRIPTION_DELIVERY_MODE.EcDeliveryModePull;
pub const EcDeliveryModePush = EC_SUBSCRIPTION_DELIVERY_MODE.EcDeliveryModePush;

pub const EC_SUBSCRIPTION_CONTENT_FORMAT = extern enum(i32) {
    EcContentFormatEvents = 1,
    EcContentFormatRenderedText = 2,
};
pub const EcContentFormatEvents = EC_SUBSCRIPTION_CONTENT_FORMAT.EcContentFormatEvents;
pub const EcContentFormatRenderedText = EC_SUBSCRIPTION_CONTENT_FORMAT.EcContentFormatRenderedText;

pub const EC_SUBSCRIPTION_RUNTIME_STATUS_ACTIVE_STATUS = extern enum(i32) {
    EcRuntimeStatusActiveStatusDisabled = 1,
    EcRuntimeStatusActiveStatusActive = 2,
    EcRuntimeStatusActiveStatusInactive = 3,
    EcRuntimeStatusActiveStatusTrying = 4,
};
pub const EcRuntimeStatusActiveStatusDisabled = EC_SUBSCRIPTION_RUNTIME_STATUS_ACTIVE_STATUS.EcRuntimeStatusActiveStatusDisabled;
pub const EcRuntimeStatusActiveStatusActive = EC_SUBSCRIPTION_RUNTIME_STATUS_ACTIVE_STATUS.EcRuntimeStatusActiveStatusActive;
pub const EcRuntimeStatusActiveStatusInactive = EC_SUBSCRIPTION_RUNTIME_STATUS_ACTIVE_STATUS.EcRuntimeStatusActiveStatusInactive;
pub const EcRuntimeStatusActiveStatusTrying = EC_SUBSCRIPTION_RUNTIME_STATUS_ACTIVE_STATUS.EcRuntimeStatusActiveStatusTrying;


//--------------------------------------------------------------------------------
// Section: Functions (15)
//--------------------------------------------------------------------------------
pub extern "WecApi" fn EcOpenSubscriptionEnum(
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "WecApi" fn EcEnumNextSubscription(
    SubscriptionEnum: ?*c_void,
    SubscriptionNameBufferSize: u32,
    SubscriptionNameBuffer: ?[*:0]u16,
    SubscriptionNameBufferUsed: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WecApi" fn EcOpenSubscription(
    SubscriptionName: [*:0]const u16,
    AccessMask: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "WecApi" fn EcSetSubscriptionProperty(
    Subscription: ?*c_void,
    PropertyId: EC_SUBSCRIPTION_PROPERTY_ID,
    Flags: u32,
    PropertyValue: *EC_VARIANT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WecApi" fn EcGetSubscriptionProperty(
    Subscription: ?*c_void,
    PropertyId: EC_SUBSCRIPTION_PROPERTY_ID,
    Flags: u32,
    PropertyValueBufferSize: u32,
    PropertyValueBuffer: *EC_VARIANT,
    PropertyValueBufferUsed: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WecApi" fn EcSaveSubscription(
    Subscription: ?*c_void,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WecApi" fn EcDeleteSubscription(
    SubscriptionName: [*:0]const u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WecApi" fn EcGetObjectArraySize(
    ObjectArray: ?*c_void,
    ObjectArraySize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WecApi" fn EcSetObjectArrayProperty(
    ObjectArray: ?*c_void,
    PropertyId: EC_SUBSCRIPTION_PROPERTY_ID,
    ArrayIndex: u32,
    Flags: u32,
    PropertyValue: *EC_VARIANT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WecApi" fn EcGetObjectArrayProperty(
    ObjectArray: ?*c_void,
    PropertyId: EC_SUBSCRIPTION_PROPERTY_ID,
    ArrayIndex: u32,
    Flags: u32,
    PropertyValueBufferSize: u32,
    PropertyValueBuffer: *EC_VARIANT,
    PropertyValueBufferUsed: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WecApi" fn EcInsertObjectArrayElement(
    ObjectArray: ?*c_void,
    ArrayIndex: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WecApi" fn EcRemoveObjectArrayElement(
    ObjectArray: ?*c_void,
    ArrayIndex: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WecApi" fn EcGetSubscriptionRunTimeStatus(
    SubscriptionName: [*:0]const u16,
    StatusInfoId: EC_SUBSCRIPTION_RUNTIME_STATUS_INFO_ID,
    EventSourceName: [*:0]const u16,
    Flags: u32,
    StatusValueBufferSize: u32,
    StatusValueBuffer: *EC_VARIANT,
    StatusValueBufferUsed: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WecApi" fn EcRetrySubscription(
    SubscriptionName: [*:0]const u16,
    EventSourceName: [*:0]const u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WecApi" fn EcClose(
    Object: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (2)
//--------------------------------------------------------------------------------
const PWSTR = @import("system_services.zig").PWSTR;
const BOOL = @import("system_services.zig").BOOL;

test {
    const constant_export_count = 0;
    const type_export_count = 10;
    const enum_value_export_count = 66;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 15;
    const unicode_alias_count = 0;
    const import_count = 2;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (163)
//--------------------------------------------------------------------------------
pub const DHCPV6CAPI_PARAMS = extern struct {
    Flags: u32,
    OptionId: u32,
    IsVendor: BOOL,
    Data: *u8,
    nBytesData: u32,
};

pub const DHCPV6CAPI_PARAMS_ARRAY = extern struct {
    nParams: u32,
    Params: *DHCPV6CAPI_PARAMS,
};

pub const DHCPV6CAPI_CLASSID = extern struct {
    Flags: u32,
    Data: *u8,
    nBytesData: u32,
};

pub const StatusCode = extern enum(i32) {
    STATUS_NO_ERROR = 0,
    STATUS_UNSPECIFIED_FAILURE = 1,
    STATUS_NO_BINDING = 3,
    STATUS_NOPREFIX_AVAIL = 6,
};
pub const STATUS_NO_ERROR = StatusCode.STATUS_NO_ERROR;
pub const STATUS_UNSPECIFIED_FAILURE = StatusCode.STATUS_UNSPECIFIED_FAILURE;
pub const STATUS_NO_BINDING = StatusCode.STATUS_NO_BINDING;
pub const STATUS_NOPREFIX_AVAIL = StatusCode.STATUS_NOPREFIX_AVAIL;

pub const DHCPV6Prefix = extern struct {
    prefix: [16]u8,
    prefixLength: u32,
    preferredLifeTime: u32,
    validLifeTime: u32,
    status: StatusCode,
};

pub const DHCPV6PrefixLeaseInformation = extern struct {
    nPrefixes: u32,
    prefixArray: *DHCPV6Prefix,
    iaid: u32,
    T1: i64,
    T2: i64,
    MaxLeaseExpirationTime: i64,
    LastRenewalTime: i64,
    status: StatusCode,
    ServerId: *u8,
    ServerIdLen: u32,
};

pub const DHCPAPI_PARAMS = extern struct {
    Flags: u32,
    OptionId: u32,
    IsVendor: BOOL,
    Data: *u8,
    nBytesData: u32,
};

pub const DHCPCAPI_PARAMS_ARRAY = extern struct {
    nParams: u32,
    Params: *DHCPAPI_PARAMS,
};

pub const DHCPCAPI_CLASSID = extern struct {
    Flags: u32,
    Data: *u8,
    nBytesData: u32,
};

pub const DHCP_SERVER_OPTIONS = extern struct {
    MessageType: *u8,
    SubnetMask: *u32,
    RequestedAddress: *u32,
    RequestLeaseTime: *u32,
    OverlayFields: *u8,
    RouterAddress: *u32,
    Server: *u32,
    ParameterRequestList: *u8,
    ParameterRequestListLength: u32,
    MachineName: *i8,
    MachineNameLength: u32,
    ClientHardwareAddressType: u8,
    ClientHardwareAddressLength: u8,
    ClientHardwareAddress: *u8,
    ClassIdentifier: *i8,
    ClassIdentifierLength: u32,
    VendorClass: *u8,
    VendorClassLength: u32,
    DNSFlags: u32,
    DNSNameLength: u32,
    DNSName: *u8,
    DSDomainNameRequested: u8,
    DSDomainName: *i8,
    DSDomainNameLen: u32,
    ScopeId: *u32,
};

pub const LPDHCP_CONTROL = fn(
    dwControlCode: u32,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const LPDHCP_NEWPKT = fn(
    Packet: **u8,
    PacketSize: *u32,
    IpAddress: u32,
    Reserved: *c_void,
    PktContext: **c_void,
    ProcessIt: *i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const LPDHCP_DROP_SEND = fn(
    Packet: **u8,
    PacketSize: *u32,
    ControlCode: u32,
    IpAddress: u32,
    Reserved: *c_void,
    PktContext: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const LPDHCP_PROB = fn(
    Packet: *u8,
    PacketSize: u32,
    ControlCode: u32,
    IpAddress: u32,
    AltAddress: u32,
    Reserved: *c_void,
    PktContext: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const LPDHCP_GIVE_ADDRESS = fn(
    Packet: *u8,
    PacketSize: u32,
    ControlCode: u32,
    IpAddress: u32,
    AltAddress: u32,
    AddrType: u32,
    LeaseTime: u32,
    Reserved: *c_void,
    PktContext: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const LPDHCP_HANDLE_OPTIONS = fn(
    Packet: *u8,
    PacketSize: u32,
    Reserved: *c_void,
    PktContext: *c_void,
    ServerOptions: *DHCP_SERVER_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const LPDHCP_DELETE_CLIENT = fn(
    IpAddress: u32,
    HwAddress: *u8,
    HwAddressLength: u32,
    Reserved: u32,
    ClientType: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const DHCP_CALLOUT_TABLE = extern struct {
    DhcpControlHook: LPDHCP_CONTROL,
    DhcpNewPktHook: LPDHCP_NEWPKT,
    DhcpPktDropHook: LPDHCP_DROP_SEND,
    DhcpPktSendHook: LPDHCP_DROP_SEND,
    DhcpAddressDelHook: LPDHCP_PROB,
    DhcpAddressOfferHook: LPDHCP_GIVE_ADDRESS,
    DhcpHandleOptionsHook: LPDHCP_HANDLE_OPTIONS,
    DhcpDeleteClientHook: LPDHCP_DELETE_CLIENT,
    DhcpExtensionHook: *c_void,
    DhcpReservedHook: *c_void,
};

pub const LPDHCP_ENTRY_POINT_FUNC = fn(
    ChainDlls: PWSTR,
    CalloutVersion: u32,
    CalloutTbl: *DHCP_CALLOUT_TABLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const DATE_TIME = extern struct {
    dwLowDateTime: u32,
    dwHighDateTime: u32,
};

pub const DHCP_IP_RANGE = extern struct {
    StartAddress: u32,
    EndAddress: u32,
};

pub const DHCP_BINARY_DATA = extern struct {
    DataLength: u32,
    Data: *u8,
};

pub const DHCP_HOST_INFO = extern struct {
    IpAddress: u32,
    NetBiosName: PWSTR,
    HostName: PWSTR,
};

pub const DHCP_FORCE_FLAG = extern enum(i32) {
    DhcpFullForce = 0,
    DhcpNoForce = 1,
    DhcpFailoverForce = 2,
};
pub const DhcpFullForce = DHCP_FORCE_FLAG.DhcpFullForce;
pub const DhcpNoForce = DHCP_FORCE_FLAG.DhcpNoForce;
pub const DhcpFailoverForce = DHCP_FORCE_FLAG.DhcpFailoverForce;

pub const DWORD_DWORD = extern struct {
    DWord1: u32,
    DWord2: u32,
};

pub const DHCP_SUBNET_STATE = extern enum(i32) {
    DhcpSubnetEnabled = 0,
    DhcpSubnetDisabled = 1,
    DhcpSubnetEnabledSwitched = 2,
    DhcpSubnetDisabledSwitched = 3,
    DhcpSubnetInvalidState = 4,
};
pub const DhcpSubnetEnabled = DHCP_SUBNET_STATE.DhcpSubnetEnabled;
pub const DhcpSubnetDisabled = DHCP_SUBNET_STATE.DhcpSubnetDisabled;
pub const DhcpSubnetEnabledSwitched = DHCP_SUBNET_STATE.DhcpSubnetEnabledSwitched;
pub const DhcpSubnetDisabledSwitched = DHCP_SUBNET_STATE.DhcpSubnetDisabledSwitched;
pub const DhcpSubnetInvalidState = DHCP_SUBNET_STATE.DhcpSubnetInvalidState;

pub const DHCP_SUBNET_INFO = extern struct {
    SubnetAddress: u32,
    SubnetMask: u32,
    SubnetName: PWSTR,
    SubnetComment: PWSTR,
    PrimaryHost: DHCP_HOST_INFO,
    SubnetState: DHCP_SUBNET_STATE,
};

pub const DHCP_SUBNET_INFO_VQ = extern struct {
    SubnetAddress: u32,
    SubnetMask: u32,
    SubnetName: PWSTR,
    SubnetComment: PWSTR,
    PrimaryHost: DHCP_HOST_INFO,
    SubnetState: DHCP_SUBNET_STATE,
    QuarantineOn: u32,
    Reserved1: u32,
    Reserved2: u32,
    Reserved3: i64,
    Reserved4: i64,
};

pub const DHCP_IP_ARRAY = extern struct {
    NumElements: u32,
    Elements: *u32,
};

pub const DHCP_IP_CLUSTER = extern struct {
    ClusterAddress: u32,
    ClusterMask: u32,
};

pub const DHCP_IP_RESERVATION = extern struct {
    ReservedIpAddress: u32,
    ReservedForClient: *DHCP_BINARY_DATA,
};

pub const DHCP_SUBNET_ELEMENT_TYPE = extern enum(i32) {
    DhcpIpRanges = 0,
    DhcpSecondaryHosts = 1,
    DhcpReservedIps = 2,
    DhcpExcludedIpRanges = 3,
    DhcpIpUsedClusters = 4,
    DhcpIpRangesDhcpOnly = 5,
    DhcpIpRangesDhcpBootp = 6,
    DhcpIpRangesBootpOnly = 7,
};
pub const DhcpIpRanges = DHCP_SUBNET_ELEMENT_TYPE.DhcpIpRanges;
pub const DhcpSecondaryHosts = DHCP_SUBNET_ELEMENT_TYPE.DhcpSecondaryHosts;
pub const DhcpReservedIps = DHCP_SUBNET_ELEMENT_TYPE.DhcpReservedIps;
pub const DhcpExcludedIpRanges = DHCP_SUBNET_ELEMENT_TYPE.DhcpExcludedIpRanges;
pub const DhcpIpUsedClusters = DHCP_SUBNET_ELEMENT_TYPE.DhcpIpUsedClusters;
pub const DhcpIpRangesDhcpOnly = DHCP_SUBNET_ELEMENT_TYPE.DhcpIpRangesDhcpOnly;
pub const DhcpIpRangesDhcpBootp = DHCP_SUBNET_ELEMENT_TYPE.DhcpIpRangesDhcpBootp;
pub const DhcpIpRangesBootpOnly = DHCP_SUBNET_ELEMENT_TYPE.DhcpIpRangesBootpOnly;

pub const DHCP_SUBNET_ELEMENT_DATA = extern struct {
    ElementType: DHCP_SUBNET_ELEMENT_TYPE,
    Element: DHCP_SUBNET_ELEMENT_DATA.DHCP_SUBNET_ELEMENT_UNION,
    const DHCP_SUBNET_ELEMENT_UNION = u32; // TODO: generate this nested type!
};

// TODO: this dhcp type has been removed because it conflicts with a nested type 'DHCP_SUBNET_ELEMENT_UNION'

pub const DHCP_SUBNET_ELEMENT_INFO_ARRAY = extern struct {
    NumElements: u32,
    Elements: *DHCP_SUBNET_ELEMENT_DATA,
};

pub const DHCP_IPV6_ADDRESS = extern struct {
    HighOrderBits: u64,
    LowOrderBits: u64,
};

pub const DHCP_FILTER_LIST_TYPE = extern enum(i32) {
    Deny = 0,
    Allow = 1,
};
pub const Deny = DHCP_FILTER_LIST_TYPE.Deny;
pub const Allow = DHCP_FILTER_LIST_TYPE.Allow;

pub const DHCP_ADDR_PATTERN = extern struct {
    MatchHWType: BOOL,
    HWType: u8,
    IsWildcard: BOOL,
    Length: u8,
    Pattern: [255]u8,
};

pub const DHCP_FILTER_ADD_INFO = extern struct {
    AddrPatt: DHCP_ADDR_PATTERN,
    Comment: PWSTR,
    ListType: DHCP_FILTER_LIST_TYPE,
};

pub const DHCP_FILTER_GLOBAL_INFO = extern struct {
    EnforceAllowList: BOOL,
    EnforceDenyList: BOOL,
};

pub const DHCP_FILTER_RECORD = extern struct {
    AddrPatt: DHCP_ADDR_PATTERN,
    Comment: PWSTR,
};

pub const DHCP_FILTER_ENUM_INFO = extern struct {
    NumElements: u32,
    pEnumRecords: *DHCP_FILTER_RECORD,
};

pub const DHCP_OPTION_DATA_TYPE = extern enum(i32) {
    DhcpByteOption = 0,
    DhcpWordOption = 1,
    DhcpDWordOption = 2,
    DhcpDWordDWordOption = 3,
    DhcpIpAddressOption = 4,
    DhcpStringDataOption = 5,
    DhcpBinaryDataOption = 6,
    DhcpEncapsulatedDataOption = 7,
    DhcpIpv6AddressOption = 8,
};
pub const DhcpByteOption = DHCP_OPTION_DATA_TYPE.DhcpByteOption;
pub const DhcpWordOption = DHCP_OPTION_DATA_TYPE.DhcpWordOption;
pub const DhcpDWordOption = DHCP_OPTION_DATA_TYPE.DhcpDWordOption;
pub const DhcpDWordDWordOption = DHCP_OPTION_DATA_TYPE.DhcpDWordDWordOption;
pub const DhcpIpAddressOption = DHCP_OPTION_DATA_TYPE.DhcpIpAddressOption;
pub const DhcpStringDataOption = DHCP_OPTION_DATA_TYPE.DhcpStringDataOption;
pub const DhcpBinaryDataOption = DHCP_OPTION_DATA_TYPE.DhcpBinaryDataOption;
pub const DhcpEncapsulatedDataOption = DHCP_OPTION_DATA_TYPE.DhcpEncapsulatedDataOption;
pub const DhcpIpv6AddressOption = DHCP_OPTION_DATA_TYPE.DhcpIpv6AddressOption;

pub const DHCP_OPTION_DATA_ELEMENT = extern struct {
    OptionType: DHCP_OPTION_DATA_TYPE,
    Element: DHCP_OPTION_DATA_ELEMENT.DHCP_OPTION_ELEMENT_UNION,
    const DHCP_OPTION_ELEMENT_UNION = u32; // TODO: generate this nested type!
};

// TODO: this dhcp type has been removed because it conflicts with a nested type 'DHCP_OPTION_ELEMENT_UNION'

pub const DHCP_OPTION_DATA = extern struct {
    NumElements: u32,
    Elements: *DHCP_OPTION_DATA_ELEMENT,
};

pub const DHCP_OPTION_TYPE = extern enum(i32) {
    DhcpUnaryElementTypeOption = 0,
    DhcpArrayTypeOption = 1,
};
pub const DhcpUnaryElementTypeOption = DHCP_OPTION_TYPE.DhcpUnaryElementTypeOption;
pub const DhcpArrayTypeOption = DHCP_OPTION_TYPE.DhcpArrayTypeOption;

pub const DHCP_OPTION = extern struct {
    OptionID: u32,
    OptionName: PWSTR,
    OptionComment: PWSTR,
    DefaultValue: DHCP_OPTION_DATA,
    OptionType: DHCP_OPTION_TYPE,
};

pub const DHCP_OPTION_ARRAY = extern struct {
    NumElements: u32,
    Options: *DHCP_OPTION,
};

pub const DHCP_OPTION_VALUE = extern struct {
    OptionID: u32,
    Value: DHCP_OPTION_DATA,
};

pub const DHCP_OPTION_VALUE_ARRAY = extern struct {
    NumElements: u32,
    Values: *DHCP_OPTION_VALUE,
};

pub const DHCP_OPTION_SCOPE_TYPE = extern enum(i32) {
    DhcpDefaultOptions = 0,
    DhcpGlobalOptions = 1,
    DhcpSubnetOptions = 2,
    DhcpReservedOptions = 3,
    DhcpMScopeOptions = 4,
};
pub const DhcpDefaultOptions = DHCP_OPTION_SCOPE_TYPE.DhcpDefaultOptions;
pub const DhcpGlobalOptions = DHCP_OPTION_SCOPE_TYPE.DhcpGlobalOptions;
pub const DhcpSubnetOptions = DHCP_OPTION_SCOPE_TYPE.DhcpSubnetOptions;
pub const DhcpReservedOptions = DHCP_OPTION_SCOPE_TYPE.DhcpReservedOptions;
pub const DhcpMScopeOptions = DHCP_OPTION_SCOPE_TYPE.DhcpMScopeOptions;

pub const DHCP_RESERVED_SCOPE = extern struct {
    ReservedIpAddress: u32,
    ReservedIpSubnetAddress: u32,
};

pub const DHCP_OPTION_SCOPE_INFO = extern struct {
    ScopeType: DHCP_OPTION_SCOPE_TYPE,
    ScopeInfo: DHCP_OPTION_SCOPE_INFO._DHCP_OPTION_SCOPE_UNION,
    const _DHCP_OPTION_SCOPE_UNION = u32; // TODO: generate this nested type!
};

pub const DHCP_OPTION_SCOPE_TYPE6 = extern enum(i32) {
    DhcpDefaultOptions6 = 0,
    DhcpScopeOptions6 = 1,
    DhcpReservedOptions6 = 2,
    DhcpGlobalOptions6 = 3,
};
pub const DhcpDefaultOptions6 = DHCP_OPTION_SCOPE_TYPE6.DhcpDefaultOptions6;
pub const DhcpScopeOptions6 = DHCP_OPTION_SCOPE_TYPE6.DhcpScopeOptions6;
pub const DhcpReservedOptions6 = DHCP_OPTION_SCOPE_TYPE6.DhcpReservedOptions6;
pub const DhcpGlobalOptions6 = DHCP_OPTION_SCOPE_TYPE6.DhcpGlobalOptions6;

pub const DHCP_RESERVED_SCOPE6 = extern struct {
    ReservedIpAddress: DHCP_IPV6_ADDRESS,
    ReservedIpSubnetAddress: DHCP_IPV6_ADDRESS,
};

pub const DHCP_OPTION_SCOPE_INFO6 = extern struct {
    ScopeType: DHCP_OPTION_SCOPE_TYPE6,
    ScopeInfo: DHCP_OPTION_SCOPE_INFO6.DHCP_OPTION_SCOPE_UNION6,
    const DHCP_OPTION_SCOPE_UNION6 = u32; // TODO: generate this nested type!
};

// TODO: this dhcp type has been removed because it conflicts with a nested type 'DHCP_OPTION_SCOPE_UNION6'

pub const DHCP_OPTION_LIST = extern struct {
    NumOptions: u32,
    Options: *DHCP_OPTION_VALUE,
};

pub const DHCP_CLIENT_INFO = extern struct {
    ClientIpAddress: u32,
    SubnetMask: u32,
    ClientHardwareAddress: DHCP_BINARY_DATA,
    ClientName: PWSTR,
    ClientComment: PWSTR,
    ClientLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO,
};

pub const DHCP_CLIENT_INFO_ARRAY = extern struct {
    NumElements: u32,
    Clients: **DHCP_CLIENT_INFO,
};

pub const QuarantineStatus = extern enum(i32) {
    NOQUARANTINE = 0,
    RESTRICTEDACCESS = 1,
    DROPPACKET = 2,
    PROBATION = 3,
    EXEMPT = 4,
    DEFAULTQUARSETTING = 5,
    NOQUARINFO = 6,
};
pub const NOQUARANTINE = QuarantineStatus.NOQUARANTINE;
pub const RESTRICTEDACCESS = QuarantineStatus.RESTRICTEDACCESS;
pub const DROPPACKET = QuarantineStatus.DROPPACKET;
pub const PROBATION = QuarantineStatus.PROBATION;
pub const EXEMPT = QuarantineStatus.EXEMPT;
pub const DEFAULTQUARSETTING = QuarantineStatus.DEFAULTQUARSETTING;
pub const NOQUARINFO = QuarantineStatus.NOQUARINFO;

pub const DHCP_CLIENT_INFO_VQ = extern struct {
    ClientIpAddress: u32,
    SubnetMask: u32,
    ClientHardwareAddress: DHCP_BINARY_DATA,
    ClientName: PWSTR,
    ClientComment: PWSTR,
    ClientLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO,
    bClientType: u8,
    AddressState: u8,
    Status: QuarantineStatus,
    ProbationEnds: DATE_TIME,
    QuarantineCapable: BOOL,
};

pub const DHCP_CLIENT_INFO_ARRAY_VQ = extern struct {
    NumElements: u32,
    Clients: **DHCP_CLIENT_INFO_VQ,
};

pub const DHCP_CLIENT_FILTER_STATUS_INFO = extern struct {
    ClientIpAddress: u32,
    SubnetMask: u32,
    ClientHardwareAddress: DHCP_BINARY_DATA,
    ClientName: PWSTR,
    ClientComment: PWSTR,
    ClientLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO,
    bClientType: u8,
    AddressState: u8,
    Status: QuarantineStatus,
    ProbationEnds: DATE_TIME,
    QuarantineCapable: BOOL,
    FilterStatus: u32,
};

pub const DHCP_CLIENT_FILTER_STATUS_INFO_ARRAY = extern struct {
    NumElements: u32,
    Clients: **DHCP_CLIENT_FILTER_STATUS_INFO,
};

pub const DHCP_CLIENT_INFO_PB = extern struct {
    ClientIpAddress: u32,
    SubnetMask: u32,
    ClientHardwareAddress: DHCP_BINARY_DATA,
    ClientName: PWSTR,
    ClientComment: PWSTR,
    ClientLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO,
    bClientType: u8,
    AddressState: u8,
    Status: QuarantineStatus,
    ProbationEnds: DATE_TIME,
    QuarantineCapable: BOOL,
    FilterStatus: u32,
    PolicyName: PWSTR,
};

pub const DHCP_CLIENT_INFO_PB_ARRAY = extern struct {
    NumElements: u32,
    Clients: **DHCP_CLIENT_INFO_PB,
};

pub const DHCP_SEARCH_INFO_TYPE = extern enum(i32) {
    DhcpClientIpAddress = 0,
    DhcpClientHardwareAddress = 1,
    DhcpClientName = 2,
};
pub const DhcpClientIpAddress = DHCP_SEARCH_INFO_TYPE.DhcpClientIpAddress;
pub const DhcpClientHardwareAddress = DHCP_SEARCH_INFO_TYPE.DhcpClientHardwareAddress;
pub const DhcpClientName = DHCP_SEARCH_INFO_TYPE.DhcpClientName;

pub const DHCP_SEARCH_INFO = extern struct {
    SearchType: DHCP_SEARCH_INFO_TYPE,
    SearchInfo: DHCP_SEARCH_INFO.DHCP_CLIENT_SEARCH_UNION,
    const DHCP_CLIENT_SEARCH_UNION = u32; // TODO: generate this nested type!
};

// TODO: this dhcp type has been removed because it conflicts with a nested type 'DHCP_CLIENT_SEARCH_UNION'

pub const DHCP_PROPERTY_TYPE = extern enum(i32) {
    DhcpPropTypeByte = 0,
    DhcpPropTypeWord = 1,
    DhcpPropTypeDword = 2,
    DhcpPropTypeString = 3,
    DhcpPropTypeBinary = 4,
};
pub const DhcpPropTypeByte = DHCP_PROPERTY_TYPE.DhcpPropTypeByte;
pub const DhcpPropTypeWord = DHCP_PROPERTY_TYPE.DhcpPropTypeWord;
pub const DhcpPropTypeDword = DHCP_PROPERTY_TYPE.DhcpPropTypeDword;
pub const DhcpPropTypeString = DHCP_PROPERTY_TYPE.DhcpPropTypeString;
pub const DhcpPropTypeBinary = DHCP_PROPERTY_TYPE.DhcpPropTypeBinary;

pub const DHCP_PROPERTY_ID = extern enum(i32) {
    DhcpPropIdPolicyDnsSuffix = 0,
    DhcpPropIdClientAddressStateEx = 1,
};
pub const DhcpPropIdPolicyDnsSuffix = DHCP_PROPERTY_ID.DhcpPropIdPolicyDnsSuffix;
pub const DhcpPropIdClientAddressStateEx = DHCP_PROPERTY_ID.DhcpPropIdClientAddressStateEx;

pub const DHCP_PROPERTY = extern struct {
    ID: DHCP_PROPERTY_ID,
    Type: DHCP_PROPERTY_TYPE,
    Value: DHCP_PROPERTY._DHCP_PROPERTY_VALUE_UNION,
    const _DHCP_PROPERTY_VALUE_UNION = u32; // TODO: generate this nested type!
};

pub const DHCP_PROPERTY_ARRAY = extern struct {
    NumElements: u32,
    Elements: *DHCP_PROPERTY,
};

pub const DHCP_CLIENT_INFO_EX = extern struct {
    ClientIpAddress: u32,
    SubnetMask: u32,
    ClientHardwareAddress: DHCP_BINARY_DATA,
    ClientName: PWSTR,
    ClientComment: PWSTR,
    ClientLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO,
    bClientType: u8,
    AddressState: u8,
    Status: QuarantineStatus,
    ProbationEnds: DATE_TIME,
    QuarantineCapable: BOOL,
    FilterStatus: u32,
    PolicyName: PWSTR,
    Properties: *DHCP_PROPERTY_ARRAY,
};

pub const DHCP_CLIENT_INFO_EX_ARRAY = extern struct {
    NumElements: u32,
    Clients: **DHCP_CLIENT_INFO_EX,
};

pub const SCOPE_MIB_INFO = extern struct {
    Subnet: u32,
    NumAddressesInuse: u32,
    NumAddressesFree: u32,
    NumPendingOffers: u32,
};

pub const DHCP_MIB_INFO = extern struct {
    Discovers: u32,
    Offers: u32,
    Requests: u32,
    Acks: u32,
    Naks: u32,
    Declines: u32,
    Releases: u32,
    ServerStartTime: DATE_TIME,
    Scopes: u32,
    ScopeInfo: *SCOPE_MIB_INFO,
};

pub const SCOPE_MIB_INFO_VQ = extern struct {
    Subnet: u32,
    NumAddressesInuse: u32,
    NumAddressesFree: u32,
    NumPendingOffers: u32,
    QtnNumLeases: u32,
    QtnPctQtnLeases: u32,
    QtnProbationLeases: u32,
    QtnNonQtnLeases: u32,
    QtnExemptLeases: u32,
    QtnCapableClients: u32,
};

pub const DHCP_MIB_INFO_VQ = extern struct {
    Discovers: u32,
    Offers: u32,
    Requests: u32,
    Acks: u32,
    Naks: u32,
    Declines: u32,
    Releases: u32,
    ServerStartTime: DATE_TIME,
    QtnNumLeases: u32,
    QtnPctQtnLeases: u32,
    QtnProbationLeases: u32,
    QtnNonQtnLeases: u32,
    QtnExemptLeases: u32,
    QtnCapableClients: u32,
    QtnIASErrors: u32,
    Scopes: u32,
    ScopeInfo: *SCOPE_MIB_INFO_VQ,
};

pub const SCOPE_MIB_INFO_V5 = extern struct {
    Subnet: u32,
    NumAddressesInuse: u32,
    NumAddressesFree: u32,
    NumPendingOffers: u32,
};

pub const DHCP_MIB_INFO_V5 = extern struct {
    Discovers: u32,
    Offers: u32,
    Requests: u32,
    Acks: u32,
    Naks: u32,
    Declines: u32,
    Releases: u32,
    ServerStartTime: DATE_TIME,
    QtnNumLeases: u32,
    QtnPctQtnLeases: u32,
    QtnProbationLeases: u32,
    QtnNonQtnLeases: u32,
    QtnExemptLeases: u32,
    QtnCapableClients: u32,
    QtnIASErrors: u32,
    DelayedOffers: u32,
    ScopesWithDelayedOffers: u32,
    Scopes: u32,
    ScopeInfo: *SCOPE_MIB_INFO_V5,
};

pub const DHCP_SERVER_CONFIG_INFO = extern struct {
    APIProtocolSupport: u32,
    DatabaseName: PWSTR,
    DatabasePath: PWSTR,
    BackupPath: PWSTR,
    BackupInterval: u32,
    DatabaseLoggingFlag: u32,
    RestoreFlag: u32,
    DatabaseCleanupInterval: u32,
    DebugFlag: u32,
};

pub const DHCP_SCAN_FLAG = extern enum(i32) {
    DhcpRegistryFix = 0,
    DhcpDatabaseFix = 1,
};
pub const DhcpRegistryFix = DHCP_SCAN_FLAG.DhcpRegistryFix;
pub const DhcpDatabaseFix = DHCP_SCAN_FLAG.DhcpDatabaseFix;

pub const DHCP_SCAN_ITEM = extern struct {
    IpAddress: u32,
    ScanFlag: DHCP_SCAN_FLAG,
};

pub const DHCP_SCAN_LIST = extern struct {
    NumScanItems: u32,
    ScanItems: *DHCP_SCAN_ITEM,
};

pub const DHCP_CLASS_INFO = extern struct {
    ClassName: PWSTR,
    ClassComment: PWSTR,
    ClassDataLength: u32,
    IsVendor: BOOL,
    Flags: u32,
    ClassData: *u8,
};

pub const DHCP_CLASS_INFO_ARRAY = extern struct {
    NumElements: u32,
    Classes: *DHCP_CLASS_INFO,
};

pub const DHCP_CLASS_INFO_V6 = extern struct {
    ClassName: PWSTR,
    ClassComment: PWSTR,
    ClassDataLength: u32,
    IsVendor: BOOL,
    EnterpriseNumber: u32,
    Flags: u32,
    ClassData: *u8,
};

pub const DHCP_CLASS_INFO_ARRAY_V6 = extern struct {
    NumElements: u32,
    Classes: *DHCP_CLASS_INFO_V6,
};

pub const DHCP_SERVER_SPECIFIC_STRINGS = extern struct {
    DefaultVendorClassName: PWSTR,
    DefaultUserClassName: PWSTR,
};

pub const DHCP_IP_RESERVATION_V4 = extern struct {
    ReservedIpAddress: u32,
    ReservedForClient: *DHCP_BINARY_DATA,
    bAllowedClientTypes: u8,
};

pub const DHCP_IP_RESERVATION_INFO = extern struct {
    ReservedIpAddress: u32,
    ReservedForClient: DHCP_BINARY_DATA,
    ReservedClientName: PWSTR,
    ReservedClientDesc: PWSTR,
    bAllowedClientTypes: u8,
    fOptionsPresent: u8,
};

pub const DHCP_RESERVATION_INFO_ARRAY = extern struct {
    NumElements: u32,
    Elements: **DHCP_IP_RESERVATION_INFO,
};

pub const DHCP_SUBNET_ELEMENT_DATA_V4 = extern struct {
    ElementType: DHCP_SUBNET_ELEMENT_TYPE,
    Element: DHCP_SUBNET_ELEMENT_DATA_V4.DHCP_SUBNET_ELEMENT_UNION_V4,
    const DHCP_SUBNET_ELEMENT_UNION_V4 = u32; // TODO: generate this nested type!
};

// TODO: this dhcp type has been removed because it conflicts with a nested type 'DHCP_SUBNET_ELEMENT_UNION_V4'

pub const DHCP_SUBNET_ELEMENT_INFO_ARRAY_V4 = extern struct {
    NumElements: u32,
    Elements: *DHCP_SUBNET_ELEMENT_DATA_V4,
};

pub const DHCP_CLIENT_INFO_V4 = extern struct {
    ClientIpAddress: u32,
    SubnetMask: u32,
    ClientHardwareAddress: DHCP_BINARY_DATA,
    ClientName: PWSTR,
    ClientComment: PWSTR,
    ClientLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO,
    bClientType: u8,
};

pub const DHCP_CLIENT_INFO_ARRAY_V4 = extern struct {
    NumElements: u32,
    Clients: **DHCP_CLIENT_INFO_V4,
};

pub const DHCP_SERVER_CONFIG_INFO_V4 = extern struct {
    APIProtocolSupport: u32,
    DatabaseName: PWSTR,
    DatabasePath: PWSTR,
    BackupPath: PWSTR,
    BackupInterval: u32,
    DatabaseLoggingFlag: u32,
    RestoreFlag: u32,
    DatabaseCleanupInterval: u32,
    DebugFlag: u32,
    dwPingRetries: u32,
    cbBootTableString: u32,
    wszBootTableString: PWSTR,
    fAuditLog: BOOL,
};

pub const DHCP_SERVER_CONFIG_INFO_VQ = extern struct {
    APIProtocolSupport: u32,
    DatabaseName: PWSTR,
    DatabasePath: PWSTR,
    BackupPath: PWSTR,
    BackupInterval: u32,
    DatabaseLoggingFlag: u32,
    RestoreFlag: u32,
    DatabaseCleanupInterval: u32,
    DebugFlag: u32,
    dwPingRetries: u32,
    cbBootTableString: u32,
    wszBootTableString: PWSTR,
    fAuditLog: BOOL,
    QuarantineOn: BOOL,
    QuarDefFail: u32,
    QuarRuntimeStatus: BOOL,
};

pub const DHCP_SERVER_CONFIG_INFO_V6 = extern struct {
    UnicastFlag: BOOL,
    RapidCommitFlag: BOOL,
    PreferredLifetime: u32,
    ValidLifetime: u32,
    T1: u32,
    T2: u32,
    PreferredLifetimeIATA: u32,
    ValidLifetimeIATA: u32,
    fAuditLog: BOOL,
};

pub const DHCP_SUPER_SCOPE_TABLE_ENTRY = extern struct {
    SubnetAddress: u32,
    SuperScopeNumber: u32,
    NextInSuperScope: u32,
    SuperScopeName: PWSTR,
};

pub const DHCP_SUPER_SCOPE_TABLE = extern struct {
    cEntries: u32,
    pEntries: *DHCP_SUPER_SCOPE_TABLE_ENTRY,
};

pub const DHCP_CLIENT_INFO_V5 = extern struct {
    ClientIpAddress: u32,
    SubnetMask: u32,
    ClientHardwareAddress: DHCP_BINARY_DATA,
    ClientName: PWSTR,
    ClientComment: PWSTR,
    ClientLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO,
    bClientType: u8,
    AddressState: u8,
};

pub const DHCP_CLIENT_INFO_ARRAY_V5 = extern struct {
    NumElements: u32,
    Clients: **DHCP_CLIENT_INFO_V5,
};

pub const DHCP_ALL_OPTIONS = extern struct {
    Flags: u32,
    NonVendorOptions: *DHCP_OPTION_ARRAY,
    NumVendorOptions: u32,
    VendorOptions: *DHCP_ALL_OPTIONS._Anonymous_e__Struct,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const DHCP_ALL_OPTION_VALUES = extern struct {
    Flags: u32,
    NumElements: u32,
    Options: *DHCP_ALL_OPTION_VALUES._Anonymous_e__Struct,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const DHCP_ALL_OPTION_VALUES_PB = extern struct {
    Flags: u32,
    NumElements: u32,
    Options: *DHCP_ALL_OPTION_VALUES_PB._Anonymous_e__Struct,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const DHCPDS_SERVER = extern struct {
    Version: u32,
    ServerName: PWSTR,
    ServerAddress: u32,
    Flags: u32,
    State: u32,
    DsLocation: PWSTR,
    DsLocType: u32,
};

pub const DHCPDS_SERVERS = extern struct {
    Flags: u32,
    NumElements: u32,
    Servers: *DHCPDS_SERVER,
};

pub const DHCP_ATTRIB = extern struct {
    DhcpAttribId: u32,
    DhcpAttribType: u32,
    Anonymous: DHCP_ATTRIB._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DHCP_ATTRIB_ARRAY = extern struct {
    NumElements: u32,
    DhcpAttribs: *DHCP_ATTRIB,
};

pub const DHCP_BOOTP_IP_RANGE = extern struct {
    StartAddress: u32,
    EndAddress: u32,
    BootpAllocated: u32,
    MaxBootpAllowed: u32,
};

pub const DHCP_SUBNET_ELEMENT_DATA_V5 = extern struct {
    ElementType: DHCP_SUBNET_ELEMENT_TYPE,
    Element: DHCP_SUBNET_ELEMENT_DATA_V5._DHCP_SUBNET_ELEMENT_UNION_V5,
    const _DHCP_SUBNET_ELEMENT_UNION_V5 = u32; // TODO: generate this nested type!
};

pub const DHCP_SUBNET_ELEMENT_INFO_ARRAY_V5 = extern struct {
    NumElements: u32,
    Elements: *DHCP_SUBNET_ELEMENT_DATA_V5,
};

pub const DHCP_PERF_STATS = extern struct {
    dwNumPacketsReceived: u32,
    dwNumPacketsDuplicate: u32,
    dwNumPacketsExpired: u32,
    dwNumMilliSecondsProcessed: u32,
    dwNumPacketsInActiveQueue: u32,
    dwNumPacketsInPingQueue: u32,
    dwNumDiscoversReceived: u32,
    dwNumOffersSent: u32,
    dwNumRequestsReceived: u32,
    dwNumInformsReceived: u32,
    dwNumAcksSent: u32,
    dwNumNacksSent: u32,
    dwNumDeclinesReceived: u32,
    dwNumReleasesReceived: u32,
    dwNumDelayedOfferInQueue: u32,
    dwNumPacketsProcessed: u32,
    dwNumPacketsInQuarWaitingQueue: u32,
    dwNumPacketsInQuarReadyQueue: u32,
    dwNumPacketsInQuarDecisionQueue: u32,
};

pub const DHCP_BIND_ELEMENT = extern struct {
    Flags: u32,
    fBoundToDHCPServer: BOOL,
    AdapterPrimaryAddress: u32,
    AdapterSubnetAddress: u32,
    IfDescription: PWSTR,
    IfIdSize: u32,
    IfId: *u8,
};

pub const DHCP_BIND_ELEMENT_ARRAY = extern struct {
    NumElements: u32,
    Elements: *DHCP_BIND_ELEMENT,
};

pub const DHCPV6_BIND_ELEMENT = extern struct {
    Flags: u32,
    fBoundToDHCPServer: BOOL,
    AdapterPrimaryAddress: DHCP_IPV6_ADDRESS,
    AdapterSubnetAddress: DHCP_IPV6_ADDRESS,
    IfDescription: PWSTR,
    IpV6IfIndex: u32,
    IfIdSize: u32,
    IfId: *u8,
};

pub const DHCPV6_BIND_ELEMENT_ARRAY = extern struct {
    NumElements: u32,
    Elements: *DHCPV6_BIND_ELEMENT,
};

pub const DHCP_IP_RANGE_V6 = extern struct {
    StartAddress: DHCP_IPV6_ADDRESS,
    EndAddress: DHCP_IPV6_ADDRESS,
};

pub const DHCP_HOST_INFO_V6 = extern struct {
    IpAddress: DHCP_IPV6_ADDRESS,
    NetBiosName: PWSTR,
    HostName: PWSTR,
};

pub const DHCP_SUBNET_INFO_V6 = extern struct {
    SubnetAddress: DHCP_IPV6_ADDRESS,
    Prefix: u32,
    Preference: u16,
    SubnetName: PWSTR,
    SubnetComment: PWSTR,
    State: u32,
    ScopeId: u32,
};

pub const SCOPE_MIB_INFO_V6 = extern struct {
    Subnet: DHCP_IPV6_ADDRESS,
    NumAddressesInuse: u64,
    NumAddressesFree: u64,
    NumPendingAdvertises: u64,
};

pub const DHCP_MIB_INFO_V6 = extern struct {
    Solicits: u32,
    Advertises: u32,
    Requests: u32,
    Renews: u32,
    Rebinds: u32,
    Replies: u32,
    Confirms: u32,
    Declines: u32,
    Releases: u32,
    Informs: u32,
    ServerStartTime: DATE_TIME,
    Scopes: u32,
    ScopeInfo: *SCOPE_MIB_INFO_V6,
};

pub const DHCP_IP_RESERVATION_V6 = extern struct {
    ReservedIpAddress: DHCP_IPV6_ADDRESS,
    ReservedForClient: *DHCP_BINARY_DATA,
    InterfaceId: u32,
};

pub const DHCP_SUBNET_ELEMENT_TYPE_V6 = extern enum(i32) {
    Dhcpv6IpRanges = 0,
    Dhcpv6ReservedIps = 1,
    Dhcpv6ExcludedIpRanges = 2,
};
pub const Dhcpv6IpRanges = DHCP_SUBNET_ELEMENT_TYPE_V6.Dhcpv6IpRanges;
pub const Dhcpv6ReservedIps = DHCP_SUBNET_ELEMENT_TYPE_V6.Dhcpv6ReservedIps;
pub const Dhcpv6ExcludedIpRanges = DHCP_SUBNET_ELEMENT_TYPE_V6.Dhcpv6ExcludedIpRanges;

pub const DHCP_SUBNET_ELEMENT_DATA_V6 = extern struct {
    ElementType: DHCP_SUBNET_ELEMENT_TYPE_V6,
    Element: DHCP_SUBNET_ELEMENT_DATA_V6.DHCP_SUBNET_ELEMENT_UNION_V6,
    const DHCP_SUBNET_ELEMENT_UNION_V6 = u32; // TODO: generate this nested type!
};

// TODO: this dhcp type has been removed because it conflicts with a nested type 'DHCP_SUBNET_ELEMENT_UNION_V6'

pub const DHCP_SUBNET_ELEMENT_INFO_ARRAY_V6 = extern struct {
    NumElements: u32,
    Elements: *DHCP_SUBNET_ELEMENT_DATA_V6,
};

pub const DHCP_CLIENT_INFO_V6 = extern struct {
    ClientIpAddress: DHCP_IPV6_ADDRESS,
    ClientDUID: DHCP_BINARY_DATA,
    AddressType: u32,
    IAID: u32,
    ClientName: PWSTR,
    ClientComment: PWSTR,
    ClientValidLeaseExpires: DATE_TIME,
    ClientPrefLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO_V6,
};

pub const DHCPV6_IP_ARRAY = extern struct {
    NumElements: u32,
    Elements: *DHCP_IPV6_ADDRESS,
};

pub const DHCP_CLIENT_INFO_ARRAY_V6 = extern struct {
    NumElements: u32,
    Clients: **DHCP_CLIENT_INFO_V6,
};

pub const DHCP_SEARCH_INFO_TYPE_V6 = extern enum(i32) {
    Dhcpv6ClientIpAddress = 0,
    Dhcpv6ClientDUID = 1,
    Dhcpv6ClientName = 2,
};
pub const Dhcpv6ClientIpAddress = DHCP_SEARCH_INFO_TYPE_V6.Dhcpv6ClientIpAddress;
pub const Dhcpv6ClientDUID = DHCP_SEARCH_INFO_TYPE_V6.Dhcpv6ClientDUID;
pub const Dhcpv6ClientName = DHCP_SEARCH_INFO_TYPE_V6.Dhcpv6ClientName;

pub const DHCP_SEARCH_INFO_V6 = extern struct {
    SearchType: DHCP_SEARCH_INFO_TYPE_V6,
    SearchInfo: DHCP_SEARCH_INFO_V6._DHCP_CLIENT_SEARCH_UNION_V6,
    const _DHCP_CLIENT_SEARCH_UNION_V6 = u32; // TODO: generate this nested type!
};

pub const DHCP_POL_ATTR_TYPE = extern enum(i32) {
    DhcpAttrHWAddr = 0,
    DhcpAttrOption = 1,
    DhcpAttrSubOption = 2,
    DhcpAttrFqdn = 3,
    DhcpAttrFqdnSingleLabel = 4,
};
pub const DhcpAttrHWAddr = DHCP_POL_ATTR_TYPE.DhcpAttrHWAddr;
pub const DhcpAttrOption = DHCP_POL_ATTR_TYPE.DhcpAttrOption;
pub const DhcpAttrSubOption = DHCP_POL_ATTR_TYPE.DhcpAttrSubOption;
pub const DhcpAttrFqdn = DHCP_POL_ATTR_TYPE.DhcpAttrFqdn;
pub const DhcpAttrFqdnSingleLabel = DHCP_POL_ATTR_TYPE.DhcpAttrFqdnSingleLabel;

pub const DHCP_POL_COMPARATOR = extern enum(i32) {
    DhcpCompEqual = 0,
    DhcpCompNotEqual = 1,
    DhcpCompBeginsWith = 2,
    DhcpCompNotBeginWith = 3,
    DhcpCompEndsWith = 4,
    DhcpCompNotEndWith = 5,
};
pub const DhcpCompEqual = DHCP_POL_COMPARATOR.DhcpCompEqual;
pub const DhcpCompNotEqual = DHCP_POL_COMPARATOR.DhcpCompNotEqual;
pub const DhcpCompBeginsWith = DHCP_POL_COMPARATOR.DhcpCompBeginsWith;
pub const DhcpCompNotBeginWith = DHCP_POL_COMPARATOR.DhcpCompNotBeginWith;
pub const DhcpCompEndsWith = DHCP_POL_COMPARATOR.DhcpCompEndsWith;
pub const DhcpCompNotEndWith = DHCP_POL_COMPARATOR.DhcpCompNotEndWith;

pub const DHCP_POL_LOGIC_OPER = extern enum(i32) {
    DhcpLogicalOr = 0,
    DhcpLogicalAnd = 1,
};
pub const DhcpLogicalOr = DHCP_POL_LOGIC_OPER.DhcpLogicalOr;
pub const DhcpLogicalAnd = DHCP_POL_LOGIC_OPER.DhcpLogicalAnd;

pub const DHCP_POLICY_FIELDS_TO_UPDATE = extern enum(i32) {
    DhcpUpdatePolicyName = 1,
    DhcpUpdatePolicyOrder = 2,
    DhcpUpdatePolicyExpr = 4,
    DhcpUpdatePolicyRanges = 8,
    DhcpUpdatePolicyDescr = 16,
    DhcpUpdatePolicyStatus = 32,
    DhcpUpdatePolicyDnsSuffix = 64,
};
pub const DhcpUpdatePolicyName = DHCP_POLICY_FIELDS_TO_UPDATE.DhcpUpdatePolicyName;
pub const DhcpUpdatePolicyOrder = DHCP_POLICY_FIELDS_TO_UPDATE.DhcpUpdatePolicyOrder;
pub const DhcpUpdatePolicyExpr = DHCP_POLICY_FIELDS_TO_UPDATE.DhcpUpdatePolicyExpr;
pub const DhcpUpdatePolicyRanges = DHCP_POLICY_FIELDS_TO_UPDATE.DhcpUpdatePolicyRanges;
pub const DhcpUpdatePolicyDescr = DHCP_POLICY_FIELDS_TO_UPDATE.DhcpUpdatePolicyDescr;
pub const DhcpUpdatePolicyStatus = DHCP_POLICY_FIELDS_TO_UPDATE.DhcpUpdatePolicyStatus;
pub const DhcpUpdatePolicyDnsSuffix = DHCP_POLICY_FIELDS_TO_UPDATE.DhcpUpdatePolicyDnsSuffix;

pub const DHCP_POL_COND = extern struct {
    ParentExpr: u32,
    Type: DHCP_POL_ATTR_TYPE,
    OptionID: u32,
    SubOptionID: u32,
    VendorName: PWSTR,
    Operator: DHCP_POL_COMPARATOR,
    Value: *u8,
    ValueLength: u32,
};

pub const DHCP_POL_COND_ARRAY = extern struct {
    NumElements: u32,
    Elements: *DHCP_POL_COND,
};

pub const DHCP_POL_EXPR = extern struct {
    ParentExpr: u32,
    Operator: DHCP_POL_LOGIC_OPER,
};

pub const DHCP_POL_EXPR_ARRAY = extern struct {
    NumElements: u32,
    Elements: *DHCP_POL_EXPR,
};

pub const DHCP_IP_RANGE_ARRAY = extern struct {
    NumElements: u32,
    Elements: *DHCP_IP_RANGE,
};

pub const DHCP_POLICY = extern struct {
    PolicyName: PWSTR,
    IsGlobalPolicy: BOOL,
    Subnet: u32,
    ProcessingOrder: u32,
    Conditions: *DHCP_POL_COND_ARRAY,
    Expressions: *DHCP_POL_EXPR_ARRAY,
    Ranges: *DHCP_IP_RANGE_ARRAY,
    Description: PWSTR,
    Enabled: BOOL,
};

pub const DHCP_POLICY_ARRAY = extern struct {
    NumElements: u32,
    Elements: *DHCP_POLICY,
};

pub const DHCP_POLICY_EX = extern struct {
    PolicyName: PWSTR,
    IsGlobalPolicy: BOOL,
    Subnet: u32,
    ProcessingOrder: u32,
    Conditions: *DHCP_POL_COND_ARRAY,
    Expressions: *DHCP_POL_EXPR_ARRAY,
    Ranges: *DHCP_IP_RANGE_ARRAY,
    Description: PWSTR,
    Enabled: BOOL,
    Properties: *DHCP_PROPERTY_ARRAY,
};

pub const DHCP_POLICY_EX_ARRAY = extern struct {
    NumElements: u32,
    Elements: *DHCP_POLICY_EX,
};

pub const DHCPV6_STATELESS_PARAM_TYPE = extern enum(i32) {
    DhcpStatelessPurgeInterval = 1,
    DhcpStatelessStatus = 2,
};
pub const DhcpStatelessPurgeInterval = DHCPV6_STATELESS_PARAM_TYPE.DhcpStatelessPurgeInterval;
pub const DhcpStatelessStatus = DHCPV6_STATELESS_PARAM_TYPE.DhcpStatelessStatus;

pub const DHCPV6_STATELESS_PARAMS = extern struct {
    Status: BOOL,
    PurgeInterval: u32,
};

pub const DHCPV6_STATELESS_SCOPE_STATS = extern struct {
    SubnetAddress: DHCP_IPV6_ADDRESS,
    NumStatelessClientsAdded: u64,
    NumStatelessClientsRemoved: u64,
};

pub const DHCPV6_STATELESS_STATS = extern struct {
    NumScopes: u32,
    ScopeStats: *DHCPV6_STATELESS_SCOPE_STATS,
};

pub const DHCP_FAILOVER_MODE = extern enum(i32) {
    LoadBalance = 0,
    HotStandby = 1,
};
pub const LoadBalance = DHCP_FAILOVER_MODE.LoadBalance;
pub const HotStandby = DHCP_FAILOVER_MODE.HotStandby;

pub const DHCP_FAILOVER_SERVER = extern enum(i32) {
    PrimaryServer = 0,
    SecondaryServer = 1,
};
pub const PrimaryServer = DHCP_FAILOVER_SERVER.PrimaryServer;
pub const SecondaryServer = DHCP_FAILOVER_SERVER.SecondaryServer;

pub const FSM_STATE = extern enum(i32) {
    NO_STATE = 0,
    INIT = 1,
    STARTUP = 2,
    NORMAL = 3,
    COMMUNICATION_INT = 4,
    PARTNER_DOWN = 5,
    POTENTIAL_CONFLICT = 6,
    CONFLICT_DONE = 7,
    RESOLUTION_INT = 8,
    RECOVER = 9,
    RECOVER_WAIT = 10,
    RECOVER_DONE = 11,
    PAUSED = 12,
    SHUTDOWN = 13,
};
pub const NO_STATE = FSM_STATE.NO_STATE;
pub const INIT = FSM_STATE.INIT;
pub const STARTUP = FSM_STATE.STARTUP;
pub const NORMAL = FSM_STATE.NORMAL;
pub const COMMUNICATION_INT = FSM_STATE.COMMUNICATION_INT;
pub const PARTNER_DOWN = FSM_STATE.PARTNER_DOWN;
pub const POTENTIAL_CONFLICT = FSM_STATE.POTENTIAL_CONFLICT;
pub const CONFLICT_DONE = FSM_STATE.CONFLICT_DONE;
pub const RESOLUTION_INT = FSM_STATE.RESOLUTION_INT;
pub const RECOVER = FSM_STATE.RECOVER;
pub const RECOVER_WAIT = FSM_STATE.RECOVER_WAIT;
pub const RECOVER_DONE = FSM_STATE.RECOVER_DONE;
pub const PAUSED = FSM_STATE.PAUSED;
pub const SHUTDOWN = FSM_STATE.SHUTDOWN;

pub const DHCP_FAILOVER_RELATIONSHIP = extern struct {
    PrimaryServer: u32,
    SecondaryServer: u32,
    Mode: DHCP_FAILOVER_MODE,
    ServerType: DHCP_FAILOVER_SERVER,
    State: FSM_STATE,
    PrevState: FSM_STATE,
    Mclt: u32,
    SafePeriod: u32,
    RelationshipName: PWSTR,
    PrimaryServerName: PWSTR,
    SecondaryServerName: PWSTR,
    pScopes: *DHCP_IP_ARRAY,
    Percentage: u8,
    SharedSecret: PWSTR,
};

pub const DHCP_FAILOVER_RELATIONSHIP_ARRAY = extern struct {
    NumElements: u32,
    pRelationships: *DHCP_FAILOVER_RELATIONSHIP,
};

pub const DHCPV4_FAILOVER_CLIENT_INFO = extern struct {
    ClientIpAddress: u32,
    SubnetMask: u32,
    ClientHardwareAddress: DHCP_BINARY_DATA,
    ClientName: PWSTR,
    ClientComment: PWSTR,
    ClientLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO,
    bClientType: u8,
    AddressState: u8,
    Status: QuarantineStatus,
    ProbationEnds: DATE_TIME,
    QuarantineCapable: BOOL,
    SentPotExpTime: u32,
    AckPotExpTime: u32,
    RecvPotExpTime: u32,
    StartTime: u32,
    CltLastTransTime: u32,
    LastBndUpdTime: u32,
    BndMsgStatus: u32,
    PolicyName: PWSTR,
    Flags: u8,
};

pub const DHCPV4_FAILOVER_CLIENT_INFO_ARRAY = extern struct {
    NumElements: u32,
    Clients: **DHCPV4_FAILOVER_CLIENT_INFO,
};

pub const DHCPV4_FAILOVER_CLIENT_INFO_EX = extern struct {
    ClientIpAddress: u32,
    SubnetMask: u32,
    ClientHardwareAddress: DHCP_BINARY_DATA,
    ClientName: PWSTR,
    ClientComment: PWSTR,
    ClientLeaseExpires: DATE_TIME,
    OwnerHost: DHCP_HOST_INFO,
    bClientType: u8,
    AddressState: u8,
    Status: QuarantineStatus,
    ProbationEnds: DATE_TIME,
    QuarantineCapable: BOOL,
    SentPotExpTime: u32,
    AckPotExpTime: u32,
    RecvPotExpTime: u32,
    StartTime: u32,
    CltLastTransTime: u32,
    LastBndUpdTime: u32,
    BndMsgStatus: u32,
    PolicyName: PWSTR,
    Flags: u8,
    AddressStateEx: u32,
};

pub const DHCP_FAILOVER_STATISTICS = extern struct {
    NumAddr: u32,
    AddrFree: u32,
    AddrInUse: u32,
    PartnerAddrFree: u32,
    ThisAddrFree: u32,
    PartnerAddrInUse: u32,
    ThisAddrInUse: u32,
};


//--------------------------------------------------------------------------------
// Section: Functions (210)
//--------------------------------------------------------------------------------
pub extern "dhcpcsvc6" fn Dhcpv6CApiInitialize(
    Version: *u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "dhcpcsvc6" fn Dhcpv6CApiCleanup(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "dhcpcsvc6" fn Dhcpv6RequestParams(
    forceNewInform: BOOL,
    reserved: *c_void,
    adapterName: PWSTR,
    classId: *DHCPV6CAPI_CLASSID,
    recdParams: DHCPV6CAPI_PARAMS_ARRAY,
    buffer: *u8,
    pSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dhcpcsvc6" fn Dhcpv6RequestPrefix(
    adapterName: PWSTR,
    pclassId: *DHCPV6CAPI_CLASSID,
    prefixleaseInfo: *DHCPV6PrefixLeaseInformation,
    pdwTimeToWait: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dhcpcsvc6" fn Dhcpv6RenewPrefix(
    adapterName: PWSTR,
    pclassId: *DHCPV6CAPI_CLASSID,
    prefixleaseInfo: *DHCPV6PrefixLeaseInformation,
    pdwTimeToWait: *u32,
    bValidatePrefix: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dhcpcsvc6" fn Dhcpv6ReleasePrefix(
    adapterName: PWSTR,
    classId: *DHCPV6CAPI_CLASSID,
    leaseInfo: *DHCPV6PrefixLeaseInformation,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dhcpcsvc" fn DhcpCApiInitialize(
    Version: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dhcpcsvc" fn DhcpCApiCleanup(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "dhcpcsvc" fn DhcpRequestParams(
    Flags: u32,
    Reserved: *c_void,
    AdapterName: PWSTR,
    ClassId: *DHCPCAPI_CLASSID,
    SendParams: DHCPCAPI_PARAMS_ARRAY,
    RecdParams: DHCPCAPI_PARAMS_ARRAY,
    Buffer: [*:0]u8,
    pSize: *u32,
    RequestIdStr: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dhcpcsvc" fn DhcpUndoRequestParams(
    Flags: u32,
    Reserved: *c_void,
    AdapterName: PWSTR,
    RequestIdStr: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dhcpcsvc" fn DhcpRegisterParamChange(
    Flags: u32,
    Reserved: *c_void,
    AdapterName: PWSTR,
    ClassId: *DHCPCAPI_CLASSID,
    Params: DHCPCAPI_PARAMS_ARRAY,
    Handle: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dhcpcsvc" fn DhcpDeRegisterParamChange(
    Flags: u32,
    Reserved: *c_void,
    Event: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dhcpcsvc" fn DhcpRemoveDNSRegistrations(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dhcpcsvc" fn DhcpGetOriginalSubnetMask(
    sAdapterName: [*:0]const u16,
    dwSubnetMask: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpAddFilterV4(
    ServerIpAddress: ?[*:0]const u16,
    AddFilterInfo: *DHCP_FILTER_ADD_INFO,
    ForceFlag: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpDeleteFilterV4(
    ServerIpAddress: ?[*:0]const u16,
    DeleteFilterInfo: *DHCP_ADDR_PATTERN,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetFilterV4(
    ServerIpAddress: ?[*:0]const u16,
    GlobalFilterInfo: *DHCP_FILTER_GLOBAL_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetFilterV4(
    ServerIpAddress: ?[*:0]const u16,
    GlobalFilterInfo: *DHCP_FILTER_GLOBAL_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumFilterV4(
    ServerIpAddress: ?[*:0]const u16,
    ResumeHandle: *DHCP_ADDR_PATTERN,
    PreferredMaximum: u32,
    ListType: DHCP_FILTER_LIST_TYPE,
    EnumFilterInfo: **DHCP_FILTER_ENUM_INFO,
    ElementsRead: *u32,
    ElementsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpCreateSubnet(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    SubnetInfo: *const DHCP_SUBNET_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetSubnetInfo(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    SubnetInfo: *const DHCP_SUBNET_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetSubnetInfo(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    SubnetInfo: **DHCP_SUBNET_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumSubnets(
    ServerIpAddress: ?[*:0]const u16,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    EnumInfo: **DHCP_IP_ARRAY,
    ElementsRead: *u32,
    ElementsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpAddSubnetElement(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    AddElementInfo: *const DHCP_SUBNET_ELEMENT_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumSubnetElements(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    EnumElementType: DHCP_SUBNET_ELEMENT_TYPE,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    EnumElementInfo: **DHCP_SUBNET_ELEMENT_INFO_ARRAY,
    ElementsRead: *u32,
    ElementsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpRemoveSubnetElement(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    RemoveElementInfo: *const DHCP_SUBNET_ELEMENT_DATA,
    ForceFlag: DHCP_FORCE_FLAG,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpDeleteSubnet(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    ForceFlag: DHCP_FORCE_FLAG,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpCreateOption(
    ServerIpAddress: ?[*:0]const u16,
    OptionID: u32,
    OptionInfo: *const DHCP_OPTION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetOptionInfo(
    ServerIpAddress: ?[*:0]const u16,
    OptionID: u32,
    OptionInfo: *const DHCP_OPTION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetOptionInfo(
    ServerIpAddress: ?[*:0]const u16,
    OptionID: u32,
    OptionInfo: **DHCP_OPTION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumOptions(
    ServerIpAddress: ?[*:0]const u16,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    Options: **DHCP_OPTION_ARRAY,
    OptionsRead: *u32,
    OptionsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpRemoveOption(
    ServerIpAddress: ?[*:0]const u16,
    OptionID: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetOptionValue(
    ServerIpAddress: ?[*:0]const u16,
    OptionID: u32,
    ScopeInfo: *const DHCP_OPTION_SCOPE_INFO,
    OptionValue: *const DHCP_OPTION_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetOptionValues(
    ServerIpAddress: ?[*:0]const u16,
    ScopeInfo: *const DHCP_OPTION_SCOPE_INFO,
    OptionValues: *const DHCP_OPTION_VALUE_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetOptionValue(
    ServerIpAddress: ?[*:0]const u16,
    OptionID: u32,
    ScopeInfo: *const DHCP_OPTION_SCOPE_INFO,
    OptionValue: **DHCP_OPTION_VALUE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumOptionValues(
    ServerIpAddress: ?[*:0]const u16,
    ScopeInfo: *const DHCP_OPTION_SCOPE_INFO,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    OptionValues: **DHCP_OPTION_VALUE_ARRAY,
    OptionsRead: *u32,
    OptionsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpRemoveOptionValue(
    ServerIpAddress: ?[*:0]const u16,
    OptionID: u32,
    ScopeInfo: *const DHCP_OPTION_SCOPE_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpCreateClientInfoVQ(
    ServerIpAddress: ?[*:0]const u16,
    ClientInfo: *const DHCP_CLIENT_INFO_VQ,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetClientInfoVQ(
    ServerIpAddress: ?[*:0]const u16,
    ClientInfo: *const DHCP_CLIENT_INFO_VQ,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetClientInfoVQ(
    ServerIpAddress: ?[*:0]const u16,
    SearchInfo: *const DHCP_SEARCH_INFO,
    ClientInfo: **DHCP_CLIENT_INFO_VQ,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumSubnetClientsVQ(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    ClientInfo: **DHCP_CLIENT_INFO_ARRAY_VQ,
    ClientsRead: *u32,
    ClientsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumSubnetClientsFilterStatusInfo(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    ClientInfo: **DHCP_CLIENT_FILTER_STATUS_INFO_ARRAY,
    ClientsRead: *u32,
    ClientsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpCreateClientInfo(
    ServerIpAddress: ?[*:0]const u16,
    ClientInfo: *const DHCP_CLIENT_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetClientInfo(
    ServerIpAddress: ?[*:0]const u16,
    ClientInfo: *const DHCP_CLIENT_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetClientInfo(
    ServerIpAddress: ?[*:0]const u16,
    SearchInfo: *const DHCP_SEARCH_INFO,
    ClientInfo: **DHCP_CLIENT_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpDeleteClientInfo(
    ServerIpAddress: ?[*:0]const u16,
    ClientInfo: *const DHCP_SEARCH_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumSubnetClients(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    ClientInfo: **DHCP_CLIENT_INFO_ARRAY,
    ClientsRead: *u32,
    ClientsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetClientOptions(
    ServerIpAddress: ?[*:0]const u16,
    ClientIpAddress: u32,
    ClientSubnetMask: u32,
    ClientOptions: **DHCP_OPTION_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetMibInfo(
    ServerIpAddress: ?[*:0]const u16,
    MibInfo: **DHCP_MIB_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpServerSetConfig(
    ServerIpAddress: ?[*:0]const u16,
    FieldsToSet: u32,
    ConfigInfo: *DHCP_SERVER_CONFIG_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpServerGetConfig(
    ServerIpAddress: ?[*:0]const u16,
    ConfigInfo: **DHCP_SERVER_CONFIG_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpScanDatabase(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    FixFlag: u32,
    ScanList: **DHCP_SCAN_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpRpcFreeMemory(
    BufferPointer: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "DHCPSAPI" fn DhcpGetVersion(
    ServerIpAddress: ?PWSTR,
    MajorVersion: *u32,
    MinorVersion: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpAddSubnetElementV4(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    AddElementInfo: *const DHCP_SUBNET_ELEMENT_DATA_V4,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumSubnetElementsV4(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    EnumElementType: DHCP_SUBNET_ELEMENT_TYPE,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    EnumElementInfo: **DHCP_SUBNET_ELEMENT_INFO_ARRAY_V4,
    ElementsRead: *u32,
    ElementsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpRemoveSubnetElementV4(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    RemoveElementInfo: *const DHCP_SUBNET_ELEMENT_DATA_V4,
    ForceFlag: DHCP_FORCE_FLAG,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpCreateClientInfoV4(
    ServerIpAddress: ?[*:0]const u16,
    ClientInfo: *const DHCP_CLIENT_INFO_V4,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetClientInfoV4(
    ServerIpAddress: ?[*:0]const u16,
    ClientInfo: *const DHCP_CLIENT_INFO_V4,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetClientInfoV4(
    ServerIpAddress: ?[*:0]const u16,
    SearchInfo: *const DHCP_SEARCH_INFO,
    ClientInfo: **DHCP_CLIENT_INFO_V4,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumSubnetClientsV4(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    ClientInfo: **DHCP_CLIENT_INFO_ARRAY_V4,
    ClientsRead: *u32,
    ClientsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpServerSetConfigV4(
    ServerIpAddress: ?[*:0]const u16,
    FieldsToSet: u32,
    ConfigInfo: *DHCP_SERVER_CONFIG_INFO_V4,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpServerGetConfigV4(
    ServerIpAddress: ?[*:0]const u16,
    ConfigInfo: **DHCP_SERVER_CONFIG_INFO_V4,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetSuperScopeV4(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    SuperScopeName: ?[*:0]const u16,
    ChangeExisting: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpDeleteSuperScopeV4(
    ServerIpAddress: ?[*:0]const u16,
    SuperScopeName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetSuperScopeInfoV4(
    ServerIpAddress: ?[*:0]const u16,
    SuperScopeTable: **DHCP_SUPER_SCOPE_TABLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumSubnetClientsV5(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    ClientInfo: **DHCP_CLIENT_INFO_ARRAY_V5,
    ClientsRead: *u32,
    ClientsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpCreateOptionV5(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionId: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
    OptionInfo: *DHCP_OPTION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetOptionInfoV5(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionID: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
    OptionInfo: *DHCP_OPTION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetOptionInfoV5(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionID: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
    OptionInfo: **DHCP_OPTION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumOptionsV5(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    Options: **DHCP_OPTION_ARRAY,
    OptionsRead: *u32,
    OptionsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpRemoveOptionV5(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionID: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetOptionValueV5(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionId: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
    ScopeInfo: *DHCP_OPTION_SCOPE_INFO,
    OptionValue: *DHCP_OPTION_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetOptionValuesV5(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
    ScopeInfo: *DHCP_OPTION_SCOPE_INFO,
    OptionValues: *DHCP_OPTION_VALUE_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetOptionValueV5(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionID: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
    ScopeInfo: *DHCP_OPTION_SCOPE_INFO,
    OptionValue: **DHCP_OPTION_VALUE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetOptionValueV6(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionID: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
    ScopeInfo: *DHCP_OPTION_SCOPE_INFO6,
    OptionValue: **DHCP_OPTION_VALUE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumOptionValuesV5(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
    ScopeInfo: *DHCP_OPTION_SCOPE_INFO,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    OptionValues: **DHCP_OPTION_VALUE_ARRAY,
    OptionsRead: *u32,
    OptionsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpRemoveOptionValueV5(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionID: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
    ScopeInfo: *DHCP_OPTION_SCOPE_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpCreateClass(
    ServerIpAddress: ?PWSTR,
    ReservedMustBeZero: u32,
    ClassInfo: *DHCP_CLASS_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpModifyClass(
    ServerIpAddress: ?PWSTR,
    ReservedMustBeZero: u32,
    ClassInfo: *DHCP_CLASS_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpDeleteClass(
    ServerIpAddress: ?PWSTR,
    ReservedMustBeZero: u32,
    ClassName: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetClassInfo(
    ServerIpAddress: ?PWSTR,
    ReservedMustBeZero: u32,
    PartialClassInfo: *DHCP_CLASS_INFO,
    FilledClassInfo: **DHCP_CLASS_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dhcpcsvc" fn DhcpEnumClasses(
    ServerIpAddress: ?PWSTR,
    ReservedMustBeZero: u32,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    ClassInfoArray: **DHCP_CLASS_INFO_ARRAY,
    nRead: *u32,
    nTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetAllOptions(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionStruct: **DHCP_ALL_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetAllOptionsV6(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionStruct: **DHCP_ALL_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetAllOptionValues(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    ScopeInfo: *DHCP_OPTION_SCOPE_INFO,
    Values: **DHCP_ALL_OPTION_VALUES,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetAllOptionValuesV6(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    ScopeInfo: *DHCP_OPTION_SCOPE_INFO6,
    Values: **DHCP_ALL_OPTION_VALUES,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumServers(
    Flags: u32,
    IdInfo: *c_void,
    Servers: **DHCPDS_SERVERS,
    CallbackFn: *c_void,
    CallbackData: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpAddServer(
    Flags: u32,
    IdInfo: *c_void,
    NewServer: *DHCPDS_SERVER,
    CallbackFn: *c_void,
    CallbackData: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpDeleteServer(
    Flags: u32,
    IdInfo: *c_void,
    NewServer: *DHCPDS_SERVER,
    CallbackFn: *c_void,
    CallbackData: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetServerBindingInfo(
    ServerIpAddress: ?[*:0]const u16,
    Flags: u32,
    BindElementsInfo: **DHCP_BIND_ELEMENT_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetServerBindingInfo(
    ServerIpAddress: ?[*:0]const u16,
    Flags: u32,
    BindElementInfo: *DHCP_BIND_ELEMENT_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpAddSubnetElementV5(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    AddElementInfo: *const DHCP_SUBNET_ELEMENT_DATA_V5,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumSubnetElementsV5(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    EnumElementType: DHCP_SUBNET_ELEMENT_TYPE,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    EnumElementInfo: **DHCP_SUBNET_ELEMENT_INFO_ARRAY_V5,
    ElementsRead: *u32,
    ElementsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpRemoveSubnetElementV5(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    RemoveElementInfo: *const DHCP_SUBNET_ELEMENT_DATA_V5,
    ForceFlag: DHCP_FORCE_FLAG,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4EnumSubnetReservations(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    EnumElementInfo: **DHCP_RESERVATION_INFO_ARRAY,
    ElementsRead: *u32,
    ElementsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpCreateOptionV6(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionId: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
    OptionInfo: *DHCP_OPTION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpRemoveOptionV6(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionID: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumOptionsV6(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    Options: **DHCP_OPTION_ARRAY,
    OptionsRead: *u32,
    OptionsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpRemoveOptionValueV6(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionID: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
    ScopeInfo: *DHCP_OPTION_SCOPE_INFO6,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetOptionInfoV6(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionID: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
    OptionInfo: **DHCP_OPTION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetOptionInfoV6(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionID: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
    OptionInfo: *DHCP_OPTION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetOptionValueV6(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionId: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
    ScopeInfo: *DHCP_OPTION_SCOPE_INFO6,
    OptionValue: *DHCP_OPTION_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetSubnetInfoVQ(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    SubnetInfo: **DHCP_SUBNET_INFO_VQ,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpCreateSubnetVQ(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    SubnetInfo: *const DHCP_SUBNET_INFO_VQ,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetSubnetInfoVQ(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    SubnetInfo: *const DHCP_SUBNET_INFO_VQ,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumOptionValuesV6(
    ServerIpAddress: ?[*:0]const u16,
    Flags: u32,
    ClassName: ?PWSTR,
    VendorName: ?PWSTR,
    ScopeInfo: *DHCP_OPTION_SCOPE_INFO6,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    OptionValues: **DHCP_OPTION_VALUE_ARRAY,
    OptionsRead: *u32,
    OptionsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpDsInit(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpDsCleanup(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "DHCPSAPI" fn DhcpSetThreadOptions(
    Flags: u32,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetThreadOptions(
    pFlags: *u32,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpServerQueryAttribute(
    ServerIpAddr: ?PWSTR,
    dwReserved: u32,
    DhcpAttribId: u32,
    pDhcpAttrib: **DHCP_ATTRIB,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpServerQueryAttributes(
    ServerIpAddr: ?PWSTR,
    dwReserved: u32,
    dwAttribCount: u32,
    pDhcpAttribs: *u32,
    pDhcpAttribArr: **DHCP_ATTRIB_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpServerRedoAuthorization(
    ServerIpAddr: ?PWSTR,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpAuditLogSetParams(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    AuditLogDir: ?PWSTR,
    DiskCheckInterval: u32,
    MaxLogFilesSize: u32,
    MinSpaceOnDisk: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpAuditLogGetParams(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    AuditLogDir: ?*?PWSTR,
    DiskCheckInterval: *u32,
    MaxLogFilesSize: *u32,
    MinSpaceOnDisk: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpServerQueryDnsRegCredentials(
    ServerIpAddress: ?PWSTR,
    UnameSize: u32,
    Uname: [*:0]u16,
    DomainSize: u32,
    Domain: [*:0]u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpServerSetDnsRegCredentials(
    ServerIpAddress: ?PWSTR,
    Uname: ?PWSTR,
    Domain: ?PWSTR,
    Passwd: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpServerSetDnsRegCredentialsV5(
    ServerIpAddress: ?PWSTR,
    Uname: ?PWSTR,
    Domain: ?PWSTR,
    Passwd: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpServerBackupDatabase(
    ServerIpAddress: ?PWSTR,
    Path: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpServerRestoreDatabase(
    ServerIpAddress: ?PWSTR,
    Path: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpServerSetConfigVQ(
    ServerIpAddress: ?[*:0]const u16,
    FieldsToSet: u32,
    ConfigInfo: *DHCP_SERVER_CONFIG_INFO_VQ,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpServerGetConfigVQ(
    ServerIpAddress: ?[*:0]const u16,
    ConfigInfo: **DHCP_SERVER_CONFIG_INFO_VQ,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetServerSpecificStrings(
    ServerIpAddress: ?[*:0]const u16,
    ServerSpecificStrings: **DHCP_SERVER_SPECIFIC_STRINGS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpServerAuditlogParamsFree(
    ConfigInfo: *DHCP_SERVER_CONFIG_INFO_VQ,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "DHCPSAPI" fn DhcpCreateSubnetV6(
    ServerIpAddress: ?PWSTR,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    SubnetInfo: *DHCP_SUBNET_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpDeleteSubnetV6(
    ServerIpAddress: ?PWSTR,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    ForceFlag: DHCP_FORCE_FLAG,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumSubnetsV6(
    ServerIpAddress: ?[*:0]const u16,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    EnumInfo: **DHCPV6_IP_ARRAY,
    ElementsRead: *u32,
    ElementsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpAddSubnetElementV6(
    ServerIpAddress: ?PWSTR,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    AddElementInfo: *DHCP_SUBNET_ELEMENT_DATA_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpRemoveSubnetElementV6(
    ServerIpAddress: ?PWSTR,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    RemoveElementInfo: *DHCP_SUBNET_ELEMENT_DATA_V6,
    ForceFlag: DHCP_FORCE_FLAG,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumSubnetElementsV6(
    ServerIpAddress: ?PWSTR,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    EnumElementType: DHCP_SUBNET_ELEMENT_TYPE_V6,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    EnumElementInfo: **DHCP_SUBNET_ELEMENT_INFO_ARRAY_V6,
    ElementsRead: *u32,
    ElementsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetSubnetInfoV6(
    ServerIpAddress: ?PWSTR,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    SubnetInfo: **DHCP_SUBNET_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumSubnetClientsV6(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    ResumeHandle: *DHCP_IPV6_ADDRESS,
    PreferredMaximum: u32,
    ClientInfo: **DHCP_CLIENT_INFO_ARRAY_V6,
    ClientsRead: *u32,
    ClientsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpServerGetConfigV6(
    ServerIpAddress: ?[*:0]const u16,
    ScopeInfo: *DHCP_OPTION_SCOPE_INFO6,
    ConfigInfo: **DHCP_SERVER_CONFIG_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpServerSetConfigV6(
    ServerIpAddress: ?[*:0]const u16,
    ScopeInfo: *DHCP_OPTION_SCOPE_INFO6,
    FieldsToSet: u32,
    ConfigInfo: *DHCP_SERVER_CONFIG_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetSubnetInfoV6(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    SubnetInfo: *DHCP_SUBNET_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetMibInfoV6(
    ServerIpAddress: ?[*:0]const u16,
    MibInfo: **DHCP_MIB_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetServerBindingInfoV6(
    ServerIpAddress: ?[*:0]const u16,
    Flags: u32,
    BindElementsInfo: **DHCPV6_BIND_ELEMENT_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetServerBindingInfoV6(
    ServerIpAddress: ?[*:0]const u16,
    Flags: u32,
    BindElementInfo: *DHCPV6_BIND_ELEMENT_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetClientInfoV6(
    ServerIpAddress: ?[*:0]const u16,
    ClientInfo: *const DHCP_CLIENT_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetClientInfoV6(
    ServerIpAddress: ?[*:0]const u16,
    SearchInfo: *const DHCP_SEARCH_INFO_V6,
    ClientInfo: **DHCP_CLIENT_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpDeleteClientInfoV6(
    ServerIpAddress: ?[*:0]const u16,
    ClientInfo: *const DHCP_SEARCH_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpCreateClassV6(
    ServerIpAddress: ?PWSTR,
    ReservedMustBeZero: u32,
    ClassInfo: *DHCP_CLASS_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpModifyClassV6(
    ServerIpAddress: ?PWSTR,
    ReservedMustBeZero: u32,
    ClassInfo: *DHCP_CLASS_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpDeleteClassV6(
    ServerIpAddress: ?PWSTR,
    ReservedMustBeZero: u32,
    ClassName: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpEnumClassesV6(
    ServerIpAddress: ?PWSTR,
    ReservedMustBeZero: u32,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    ClassInfoArray: **DHCP_CLASS_INFO_ARRAY_V6,
    nRead: *u32,
    nTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpSetSubnetDelayOffer(
    ServerIpAddress: ?PWSTR,
    SubnetAddress: u32,
    TimeDelayInMilliseconds: u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetSubnetDelayOffer(
    ServerIpAddress: ?PWSTR,
    SubnetAddress: u32,
    TimeDelayInMilliseconds: *u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpGetMibInfoV5(
    ServerIpAddress: ?[*:0]const u16,
    MibInfo: **DHCP_MIB_INFO_V5,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpAddSecurityGroup(
    pServer: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4GetOptionValue(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionID: u32,
    PolicyName: ?PWSTR,
    VendorName: ?PWSTR,
    ScopeInfo: *DHCP_OPTION_SCOPE_INFO,
    OptionValue: **DHCP_OPTION_VALUE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4SetOptionValue(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionId: u32,
    PolicyName: ?PWSTR,
    VendorName: ?PWSTR,
    ScopeInfo: *DHCP_OPTION_SCOPE_INFO,
    OptionValue: *DHCP_OPTION_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4SetOptionValues(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    PolicyName: ?PWSTR,
    VendorName: ?PWSTR,
    ScopeInfo: *DHCP_OPTION_SCOPE_INFO,
    OptionValues: *DHCP_OPTION_VALUE_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4RemoveOptionValue(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    OptionID: u32,
    PolicyName: ?PWSTR,
    VendorName: ?PWSTR,
    ScopeInfo: *DHCP_OPTION_SCOPE_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4GetAllOptionValues(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    ScopeInfo: *DHCP_OPTION_SCOPE_INFO,
    Values: **DHCP_ALL_OPTION_VALUES_PB,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4FailoverCreateRelationship(
    ServerIpAddress: ?PWSTR,
    pRelationship: *DHCP_FAILOVER_RELATIONSHIP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4FailoverSetRelationship(
    ServerIpAddress: ?PWSTR,
    Flags: u32,
    pRelationship: *DHCP_FAILOVER_RELATIONSHIP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4FailoverDeleteRelationship(
    ServerIpAddress: ?PWSTR,
    pRelationshipName: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4FailoverGetRelationship(
    ServerIpAddress: ?PWSTR,
    pRelationshipName: PWSTR,
    pRelationship: **DHCP_FAILOVER_RELATIONSHIP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4FailoverEnumRelationship(
    ServerIpAddress: ?PWSTR,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    pRelationship: **DHCP_FAILOVER_RELATIONSHIP_ARRAY,
    RelationshipRead: *u32,
    RelationshipTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4FailoverAddScopeToRelationship(
    ServerIpAddress: ?PWSTR,
    pRelationship: *DHCP_FAILOVER_RELATIONSHIP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4FailoverDeleteScopeFromRelationship(
    ServerIpAddress: ?PWSTR,
    pRelationship: *DHCP_FAILOVER_RELATIONSHIP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4FailoverGetScopeRelationship(
    ServerIpAddress: ?PWSTR,
    ScopeId: u32,
    pRelationship: **DHCP_FAILOVER_RELATIONSHIP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4FailoverGetScopeStatistics(
    ServerIpAddress: ?PWSTR,
    ScopeId: u32,
    pStats: **DHCP_FAILOVER_STATISTICS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4FailoverGetClientInfo(
    ServerIpAddress: ?PWSTR,
    SearchInfo: *const DHCP_SEARCH_INFO,
    ClientInfo: **DHCPV4_FAILOVER_CLIENT_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4FailoverGetSystemTime(
    ServerIpAddress: ?PWSTR,
    pTime: *u32,
    pMaxAllowedDeltaTime: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4FailoverGetAddressStatus(
    ServerIpAddress: ?PWSTR,
    SubnetAddress: u32,
    pStatus: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4FailoverTriggerAddrAllocation(
    ServerIpAddress: ?PWSTR,
    pFailRelName: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpHlprCreateV4Policy(
    PolicyName: PWSTR,
    fGlobalPolicy: BOOL,
    Subnet: u32,
    ProcessingOrder: u32,
    RootOperator: DHCP_POL_LOGIC_OPER,
    Description: PWSTR,
    Enabled: BOOL,
    Policy: **DHCP_POLICY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpHlprCreateV4PolicyEx(
    PolicyName: PWSTR,
    fGlobalPolicy: BOOL,
    Subnet: u32,
    ProcessingOrder: u32,
    RootOperator: DHCP_POL_LOGIC_OPER,
    Description: PWSTR,
    Enabled: BOOL,
    Policy: **DHCP_POLICY_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpHlprAddV4PolicyExpr(
    Policy: *DHCP_POLICY,
    ParentExpr: u32,
    Operator: DHCP_POL_LOGIC_OPER,
    ExprIndex: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpHlprAddV4PolicyCondition(
    Policy: *DHCP_POLICY,
    ParentExpr: u32,
    Type: DHCP_POL_ATTR_TYPE,
    OptionID: u32,
    SubOptionID: u32,
    VendorName: ?PWSTR,
    Operator: DHCP_POL_COMPARATOR,
    Value: [*:0]u8,
    ValueLength: u32,
    ConditionIndex: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpHlprAddV4PolicyRange(
    Policy: *DHCP_POLICY,
    Range: *DHCP_IP_RANGE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpHlprResetV4PolicyExpr(
    Policy: *DHCP_POLICY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpHlprModifyV4PolicyExpr(
    Policy: *DHCP_POLICY,
    Operator: DHCP_POL_LOGIC_OPER,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpHlprFreeV4Policy(
    Policy: *DHCP_POLICY,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "DHCPSAPI" fn DhcpHlprFreeV4PolicyArray(
    PolicyArray: *DHCP_POLICY_ARRAY,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "DHCPSAPI" fn DhcpHlprFreeV4PolicyEx(
    PolicyEx: *DHCP_POLICY_EX,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "DHCPSAPI" fn DhcpHlprFreeV4PolicyExArray(
    PolicyExArray: *DHCP_POLICY_EX_ARRAY,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "DHCPSAPI" fn DhcpHlprFreeV4DhcpProperty(
    Property: *DHCP_PROPERTY,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "DHCPSAPI" fn DhcpHlprFreeV4DhcpPropertyArray(
    PropertyArray: *DHCP_PROPERTY_ARRAY,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "DHCPSAPI" fn DhcpHlprFindV4DhcpProperty(
    PropertyArray: *DHCP_PROPERTY_ARRAY,
    ID: DHCP_PROPERTY_ID,
    Type: DHCP_PROPERTY_TYPE,
) callconv(@import("std").os.windows.WINAPI) *DHCP_PROPERTY;

pub extern "DHCPSAPI" fn DhcpHlprIsV4PolicySingleUC(
    Policy: *DHCP_POLICY,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "DHCPSAPI" fn DhcpV4QueryPolicyEnforcement(
    ServerIpAddress: ?PWSTR,
    fGlobalPolicy: BOOL,
    SubnetAddress: u32,
    Enabled: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4SetPolicyEnforcement(
    ServerIpAddress: ?PWSTR,
    fGlobalPolicy: BOOL,
    SubnetAddress: u32,
    Enable: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpHlprIsV4PolicyWellFormed(
    pPolicy: *DHCP_POLICY,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "DHCPSAPI" fn DhcpHlprIsV4PolicyValid(
    pPolicy: *DHCP_POLICY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4CreatePolicy(
    ServerIpAddress: ?PWSTR,
    pPolicy: *DHCP_POLICY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4GetPolicy(
    ServerIpAddress: ?PWSTR,
    fGlobalPolicy: BOOL,
    SubnetAddress: u32,
    PolicyName: PWSTR,
    Policy: **DHCP_POLICY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4SetPolicy(
    ServerIpAddress: ?PWSTR,
    FieldsModified: u32,
    fGlobalPolicy: BOOL,
    SubnetAddress: u32,
    PolicyName: PWSTR,
    Policy: *DHCP_POLICY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4DeletePolicy(
    ServerIpAddress: ?PWSTR,
    fGlobalPolicy: BOOL,
    SubnetAddress: u32,
    PolicyName: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4EnumPolicies(
    ServerIpAddress: ?PWSTR,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    fGlobalPolicy: BOOL,
    SubnetAddress: u32,
    EnumInfo: **DHCP_POLICY_ARRAY,
    ElementsRead: *u32,
    ElementsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4AddPolicyRange(
    ServerIpAddress: ?PWSTR,
    SubnetAddress: u32,
    PolicyName: PWSTR,
    Range: *DHCP_IP_RANGE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4RemovePolicyRange(
    ServerIpAddress: ?PWSTR,
    SubnetAddress: u32,
    PolicyName: PWSTR,
    Range: *DHCP_IP_RANGE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV6SetStatelessStoreParams(
    ServerIpAddress: ?PWSTR,
    fServerLevel: BOOL,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    FieldModified: u32,
    Params: *DHCPV6_STATELESS_PARAMS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV6GetStatelessStoreParams(
    ServerIpAddress: ?PWSTR,
    fServerLevel: BOOL,
    SubnetAddress: DHCP_IPV6_ADDRESS,
    Params: **DHCPV6_STATELESS_PARAMS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV6GetStatelessStatistics(
    ServerIpAddress: ?PWSTR,
    StatelessStats: **DHCPV6_STATELESS_STATS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4CreateClientInfo(
    ServerIpAddress: ?[*:0]const u16,
    ClientInfo: *const DHCP_CLIENT_INFO_PB,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4EnumSubnetClients(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    ClientInfo: **DHCP_CLIENT_INFO_PB_ARRAY,
    ClientsRead: *u32,
    ClientsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4GetClientInfo(
    ServerIpAddress: ?[*:0]const u16,
    SearchInfo: *const DHCP_SEARCH_INFO,
    ClientInfo: **DHCP_CLIENT_INFO_PB,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV6CreateClientInfo(
    ServerIpAddress: ?[*:0]const u16,
    ClientInfo: *const DHCP_CLIENT_INFO_V6,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4GetFreeIPAddress(
    ServerIpAddress: ?PWSTR,
    ScopeId: u32,
    StartIP: u32,
    EndIP: u32,
    NumFreeAddrReq: u32,
    IPAddrList: **DHCP_IP_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV6GetFreeIPAddress(
    ServerIpAddress: ?PWSTR,
    ScopeId: DHCP_IPV6_ADDRESS,
    StartIP: DHCP_IPV6_ADDRESS,
    EndIP: DHCP_IPV6_ADDRESS,
    NumFreeAddrReq: u32,
    IPAddrList: **DHCPV6_IP_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4CreateClientInfoEx(
    ServerIpAddress: ?[*:0]const u16,
    ClientInfo: *const DHCP_CLIENT_INFO_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4EnumSubnetClientsEx(
    ServerIpAddress: ?[*:0]const u16,
    SubnetAddress: u32,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    ClientInfo: **DHCP_CLIENT_INFO_EX_ARRAY,
    ClientsRead: *u32,
    ClientsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4GetClientInfoEx(
    ServerIpAddress: ?[*:0]const u16,
    SearchInfo: *const DHCP_SEARCH_INFO,
    ClientInfo: **DHCP_CLIENT_INFO_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4CreatePolicyEx(
    ServerIpAddress: ?PWSTR,
    PolicyEx: *DHCP_POLICY_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4GetPolicyEx(
    ServerIpAddress: ?PWSTR,
    GlobalPolicy: BOOL,
    SubnetAddress: u32,
    PolicyName: PWSTR,
    Policy: **DHCP_POLICY_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4SetPolicyEx(
    ServerIpAddress: ?PWSTR,
    FieldsModified: u32,
    GlobalPolicy: BOOL,
    SubnetAddress: u32,
    PolicyName: PWSTR,
    Policy: *DHCP_POLICY_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "DHCPSAPI" fn DhcpV4EnumPoliciesEx(
    ServerIpAddress: ?PWSTR,
    ResumeHandle: *u32,
    PreferredMaximum: u32,
    GlobalPolicy: BOOL,
    SubnetAddress: u32,
    EnumInfo: **DHCP_POLICY_EX_ARRAY,
    ElementsRead: *u32,
    ElementsTotal: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (2)
//--------------------------------------------------------------------------------
const PWSTR = @import("system_services.zig").PWSTR;
const BOOL = @import("system_services.zig").BOOL;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = LPDHCP_CONTROL;
    _ = LPDHCP_NEWPKT;
    _ = LPDHCP_DROP_SEND;
    _ = LPDHCP_PROB;
    _ = LPDHCP_GIVE_ADDRESS;
    _ = LPDHCP_HANDLE_OPTIONS;
    _ = LPDHCP_DELETE_CLIENT;
    _ = LPDHCP_ENTRY_POINT_FUNC;

    const constant_export_count = 0;
    const type_export_count = 163;
    const enum_value_export_count = 107;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 210;
    const unicode_alias_count = 0;
    const import_count = 2;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (1260)
//--------------------------------------------------------------------------------
pub const MXDC_ESCAPE : u32 = 4122;
pub const MXDCOP_GET_FILENAME : u32 = 14;
pub const MXDCOP_PRINTTICKET_FIXED_DOC_SEQ : u32 = 22;
pub const MXDCOP_PRINTTICKET_FIXED_DOC : u32 = 24;
pub const MXDCOP_PRINTTICKET_FIXED_PAGE : u32 = 26;
pub const MXDCOP_SET_S0PAGE : u32 = 28;
pub const MXDCOP_SET_S0PAGE_RESOURCE : u32 = 30;
pub const MXDCOP_SET_XPSPASSTHRU_MODE : u32 = 32;
pub const GDI_ERROR : i32 = -1;
pub const ERROR : u32 = 0;
pub const NULLREGION : u32 = 1;
pub const SIMPLEREGION : u32 = 2;
pub const COMPLEXREGION : u32 = 3;
pub const MAXSTRETCHBLTMODE : u32 = 4;
pub const POLYFILL_LAST : u32 = 2;
pub const LAYOUT_BTT : u32 = 2;
pub const LAYOUT_VBH : u32 = 4;
pub const TA_NOUPDATECP : u32 = 0;
pub const TA_UPDATECP : u32 = 1;
pub const TA_LEFT : u32 = 0;
pub const TA_RIGHT : u32 = 2;
pub const TA_CENTER : u32 = 6;
pub const TA_RTLREADING : u32 = 256;
pub const ASPECT_FILTERING : u32 = 1;
pub const META_SETBKCOLOR : u32 = 513;
pub const META_SETBKMODE : u32 = 258;
pub const META_SETMAPMODE : u32 = 259;
pub const META_SETROP2 : u32 = 260;
pub const META_SETRELABS : u32 = 261;
pub const META_SETPOLYFILLMODE : u32 = 262;
pub const META_SETSTRETCHBLTMODE : u32 = 263;
pub const META_SETTEXTCHAREXTRA : u32 = 264;
pub const META_SETTEXTCOLOR : u32 = 521;
pub const META_SETTEXTJUSTIFICATION : u32 = 522;
pub const META_SETWINDOWORG : u32 = 523;
pub const META_SETWINDOWEXT : u32 = 524;
pub const META_SETVIEWPORTORG : u32 = 525;
pub const META_SETVIEWPORTEXT : u32 = 526;
pub const META_OFFSETWINDOWORG : u32 = 527;
pub const META_SCALEWINDOWEXT : u32 = 1040;
pub const META_OFFSETVIEWPORTORG : u32 = 529;
pub const META_SCALEVIEWPORTEXT : u32 = 1042;
pub const META_LINETO : u32 = 531;
pub const META_MOVETO : u32 = 532;
pub const META_EXCLUDECLIPRECT : u32 = 1045;
pub const META_INTERSECTCLIPRECT : u32 = 1046;
pub const META_ARC : u32 = 2071;
pub const META_ELLIPSE : u32 = 1048;
pub const META_FLOODFILL : u32 = 1049;
pub const META_PIE : u32 = 2074;
pub const META_RECTANGLE : u32 = 1051;
pub const META_ROUNDRECT : u32 = 1564;
pub const META_PATBLT : u32 = 1565;
pub const META_SAVEDC : u32 = 30;
pub const META_SETPIXEL : u32 = 1055;
pub const META_OFFSETCLIPRGN : u32 = 544;
pub const META_TEXTOUT : u32 = 1313;
pub const META_BITBLT : u32 = 2338;
pub const META_STRETCHBLT : u32 = 2851;
pub const META_POLYGON : u32 = 804;
pub const META_POLYLINE : u32 = 805;
pub const META_ESCAPE : u32 = 1574;
pub const META_RESTOREDC : u32 = 295;
pub const META_FILLREGION : u32 = 552;
pub const META_FRAMEREGION : u32 = 1065;
pub const META_INVERTREGION : u32 = 298;
pub const META_PAINTREGION : u32 = 299;
pub const META_SELECTCLIPREGION : u32 = 300;
pub const META_SELECTOBJECT : u32 = 301;
pub const META_SETTEXTALIGN : u32 = 302;
pub const META_CHORD : u32 = 2096;
pub const META_SETMAPPERFLAGS : u32 = 561;
pub const META_EXTTEXTOUT : u32 = 2610;
pub const META_SETDIBTODEV : u32 = 3379;
pub const META_SELECTPALETTE : u32 = 564;
pub const META_REALIZEPALETTE : u32 = 53;
pub const META_ANIMATEPALETTE : u32 = 1078;
pub const META_SETPALENTRIES : u32 = 55;
pub const META_POLYPOLYGON : u32 = 1336;
pub const META_RESIZEPALETTE : u32 = 313;
pub const META_DIBBITBLT : u32 = 2368;
pub const META_DIBSTRETCHBLT : u32 = 2881;
pub const META_DIBCREATEPATTERNBRUSH : u32 = 322;
pub const META_STRETCHDIB : u32 = 3907;
pub const META_EXTFLOODFILL : u32 = 1352;
pub const META_SETLAYOUT : u32 = 329;
pub const META_DELETEOBJECT : u32 = 496;
pub const META_CREATEPALETTE : u32 = 247;
pub const META_CREATEPATTERNBRUSH : u32 = 505;
pub const META_CREATEPENINDIRECT : u32 = 762;
pub const META_CREATEFONTINDIRECT : u32 = 763;
pub const META_CREATEBRUSHINDIRECT : u32 = 764;
pub const META_CREATEREGION : u32 = 1791;
pub const NEWFRAME : u32 = 1;
pub const ABORTDOC : u32 = 2;
pub const NEXTBAND : u32 = 3;
pub const SETCOLORTABLE : u32 = 4;
pub const GETCOLORTABLE : u32 = 5;
pub const FLUSHOUTPUT : u32 = 6;
pub const DRAFTMODE : u32 = 7;
pub const QUERYESCSUPPORT : u32 = 8;
pub const SETABORTPROC : u32 = 9;
pub const STARTDOC : u32 = 10;
pub const ENDDOC : u32 = 11;
pub const GETPHYSPAGESIZE : u32 = 12;
pub const GETPRINTINGOFFSET : u32 = 13;
pub const GETSCALINGFACTOR : u32 = 14;
pub const MFCOMMENT : u32 = 15;
pub const GETPENWIDTH : u32 = 16;
pub const SETCOPYCOUNT : u32 = 17;
pub const SELECTPAPERSOURCE : u32 = 18;
pub const DEVICEDATA : u32 = 19;
pub const PASSTHROUGH : u32 = 19;
pub const GETTECHNOLGY : u32 = 20;
pub const GETTECHNOLOGY : u32 = 20;
pub const SETLINECAP : u32 = 21;
pub const SETLINEJOIN : u32 = 22;
pub const SETMITERLIMIT : u32 = 23;
pub const BANDINFO : u32 = 24;
pub const DRAWPATTERNRECT : u32 = 25;
pub const GETVECTORPENSIZE : u32 = 26;
pub const GETVECTORBRUSHSIZE : u32 = 27;
pub const ENABLEDUPLEX : u32 = 28;
pub const GETSETPAPERBINS : u32 = 29;
pub const GETSETPRINTORIENT : u32 = 30;
pub const ENUMPAPERBINS : u32 = 31;
pub const SETDIBSCALING : u32 = 32;
pub const EPSPRINTING : u32 = 33;
pub const ENUMPAPERMETRICS : u32 = 34;
pub const GETSETPAPERMETRICS : u32 = 35;
pub const POSTSCRIPT_DATA : u32 = 37;
pub const POSTSCRIPT_IGNORE : u32 = 38;
pub const MOUSETRAILS : u32 = 39;
pub const GETDEVICEUNITS : u32 = 42;
pub const GETEXTENDEDTEXTMETRICS : u32 = 256;
pub const GETEXTENTTABLE : u32 = 257;
pub const GETPAIRKERNTABLE : u32 = 258;
pub const GETTRACKKERNTABLE : u32 = 259;
pub const EXTTEXTOUT : u32 = 512;
pub const GETFACENAME : u32 = 513;
pub const DOWNLOADFACE : u32 = 514;
pub const ENABLERELATIVEWIDTHS : u32 = 768;
pub const ENABLEPAIRKERNING : u32 = 769;
pub const SETKERNTRACK : u32 = 770;
pub const SETALLJUSTVALUES : u32 = 771;
pub const SETCHARSET : u32 = 772;
pub const STRETCHBLT : u32 = 2048;
pub const METAFILE_DRIVER : u32 = 2049;
pub const GETSETSCREENPARAMS : u32 = 3072;
pub const QUERYDIBSUPPORT : u32 = 3073;
pub const BEGIN_PATH : u32 = 4096;
pub const CLIP_TO_PATH : u32 = 4097;
pub const END_PATH : u32 = 4098;
pub const EXT_DEVICE_CAPS : u32 = 4099;
pub const RESTORE_CTM : u32 = 4100;
pub const SAVE_CTM : u32 = 4101;
pub const SET_ARC_DIRECTION : u32 = 4102;
pub const SET_BACKGROUND_COLOR : u32 = 4103;
pub const SET_POLY_MODE : u32 = 4104;
pub const SET_SCREEN_ANGLE : u32 = 4105;
pub const SET_SPREAD : u32 = 4106;
pub const TRANSFORM_CTM : u32 = 4107;
pub const SET_CLIP_BOX : u32 = 4108;
pub const SET_BOUNDS : u32 = 4109;
pub const SET_MIRROR_MODE : u32 = 4110;
pub const OPENCHANNEL : u32 = 4110;
pub const DOWNLOADHEADER : u32 = 4111;
pub const CLOSECHANNEL : u32 = 4112;
pub const POSTSCRIPT_PASSTHROUGH : u32 = 4115;
pub const ENCAPSULATED_POSTSCRIPT : u32 = 4116;
pub const POSTSCRIPT_IDENTIFY : u32 = 4117;
pub const POSTSCRIPT_INJECTION : u32 = 4118;
pub const CHECKJPEGFORMAT : u32 = 4119;
pub const CHECKPNGFORMAT : u32 = 4120;
pub const GET_PS_FEATURESETTING : u32 = 4121;
pub const GDIPLUS_TS_QUERYVER : u32 = 4122;
pub const GDIPLUS_TS_RECORD : u32 = 4123;
pub const MILCORE_TS_QUERYVER_RESULT_FALSE : u32 = 0;
pub const MILCORE_TS_QUERYVER_RESULT_TRUE : u32 = 2147483647;
pub const SPCLPASSTHROUGH2 : u32 = 4568;
pub const PSIDENT_GDICENTRIC : u32 = 0;
pub const PSIDENT_PSCENTRIC : u32 = 1;
pub const PSINJECT_DLFONT : u32 = 3722304989;
pub const FEATURESETTING_NUP : u32 = 0;
pub const FEATURESETTING_OUTPUT : u32 = 1;
pub const FEATURESETTING_PSLEVEL : u32 = 2;
pub const FEATURESETTING_CUSTPAPER : u32 = 3;
pub const FEATURESETTING_MIRROR : u32 = 4;
pub const FEATURESETTING_NEGATIVE : u32 = 5;
pub const FEATURESETTING_PROTOCOL : u32 = 6;
pub const FEATURESETTING_PRIVATE_BEGIN : u32 = 4096;
pub const FEATURESETTING_PRIVATE_END : u32 = 8191;
pub const PSPROTOCOL_ASCII : u32 = 0;
pub const PSPROTOCOL_BCP : u32 = 1;
pub const PSPROTOCOL_TBCP : u32 = 2;
pub const PSPROTOCOL_BINARY : u32 = 3;
pub const QDI_SETDIBITS : u32 = 1;
pub const QDI_GETDIBITS : u32 = 2;
pub const QDI_DIBTOSCREEN : u32 = 4;
pub const QDI_STRETCHDIB : u32 = 8;
pub const SP_NOTREPORTED : u32 = 16384;
pub const SP_ERROR : i32 = -1;
pub const SP_APPABORT : i32 = -2;
pub const SP_USERABORT : i32 = -3;
pub const SP_OUTOFDISK : i32 = -4;
pub const SP_OUTOFMEMORY : i32 = -5;
pub const PR_JOBSTATUS : u32 = 0;
pub const LCS_CALIBRATED_RGB : i32 = 0;
pub const LCS_GM_BUSINESS : i32 = 1;
pub const LCS_GM_GRAPHICS : i32 = 2;
pub const LCS_GM_IMAGES : i32 = 4;
pub const LCS_GM_ABS_COLORIMETRIC : i32 = 8;
pub const CM_OUT_OF_GAMUT : u32 = 255;
pub const CM_IN_GAMUT : u32 = 0;
pub const BI_RGB : i32 = 0;
pub const BI_RLE8 : i32 = 1;
pub const BI_RLE4 : i32 = 2;
pub const BI_BITFIELDS : i32 = 3;
pub const BI_JPEG : i32 = 4;
pub const BI_PNG : i32 = 5;
pub const TMPF_FIXED_PITCH : u32 = 1;
pub const TMPF_VECTOR : u32 = 2;
pub const TMPF_DEVICE : u32 = 8;
pub const TMPF_TRUETYPE : u32 = 4;
pub const NTM_REGULAR : i32 = 64;
pub const NTM_BOLD : i32 = 32;
pub const NTM_ITALIC : i32 = 1;
pub const NTM_NONNEGATIVE_AC : u32 = 65536;
pub const NTM_PS_OPENTYPE : u32 = 131072;
pub const NTM_TT_OPENTYPE : u32 = 262144;
pub const NTM_MULTIPLEMASTER : u32 = 524288;
pub const NTM_TYPE1 : u32 = 1048576;
pub const NTM_DSIG : u32 = 2097152;
pub const LF_FACESIZE : u32 = 32;
pub const LF_FULLFACESIZE : u32 = 64;
pub const OUT_SCREEN_OUTLINE_PRECIS : u32 = 9;
pub const CLEARTYPE_NATURAL_QUALITY : u32 = 6;
pub const DEFAULT_PITCH : u32 = 0;
pub const FIXED_PITCH : u32 = 1;
pub const VARIABLE_PITCH : u32 = 2;
pub const MONO_FONT : u32 = 8;
pub const ANSI_CHARSET : u32 = 0;
pub const DEFAULT_CHARSET : u32 = 1;
pub const SYMBOL_CHARSET : u32 = 2;
pub const SHIFTJIS_CHARSET : u32 = 128;
pub const HANGEUL_CHARSET : u32 = 129;
pub const HANGUL_CHARSET : u32 = 129;
pub const GB2312_CHARSET : u32 = 134;
pub const CHINESEBIG5_CHARSET : u32 = 136;
pub const OEM_CHARSET : u32 = 255;
pub const JOHAB_CHARSET : u32 = 130;
pub const HEBREW_CHARSET : u32 = 177;
pub const ARABIC_CHARSET : u32 = 178;
pub const GREEK_CHARSET : u32 = 161;
pub const TURKISH_CHARSET : u32 = 162;
pub const VIETNAMESE_CHARSET : u32 = 163;
pub const THAI_CHARSET : u32 = 222;
pub const EASTEUROPE_CHARSET : u32 = 238;
pub const RUSSIAN_CHARSET : u32 = 204;
pub const MAC_CHARSET : u32 = 77;
pub const BALTIC_CHARSET : u32 = 186;
pub const FS_LATIN1 : i32 = 1;
pub const FS_LATIN2 : i32 = 2;
pub const FS_CYRILLIC : i32 = 4;
pub const FS_GREEK : i32 = 8;
pub const FS_TURKISH : i32 = 16;
pub const FS_HEBREW : i32 = 32;
pub const FS_ARABIC : i32 = 64;
pub const FS_BALTIC : i32 = 128;
pub const FS_VIETNAMESE : i32 = 256;
pub const FS_THAI : i32 = 65536;
pub const FS_JISJAPAN : i32 = 131072;
pub const FS_CHINESESIMP : i32 = 262144;
pub const FS_WANSUNG : i32 = 524288;
pub const FS_CHINESETRAD : i32 = 1048576;
pub const FS_JOHAB : i32 = 2097152;
pub const FS_SYMBOL : i32 = -2147483648;
pub const FW_DONTCARE : u32 = 0;
pub const FW_THIN : u32 = 100;
pub const FW_EXTRALIGHT : u32 = 200;
pub const FW_LIGHT : u32 = 300;
pub const FW_NORMAL : u32 = 400;
pub const FW_MEDIUM : u32 = 500;
pub const FW_SEMIBOLD : u32 = 600;
pub const FW_BOLD : u32 = 700;
pub const FW_EXTRABOLD : u32 = 800;
pub const FW_HEAVY : u32 = 900;
pub const PANOSE_COUNT : u32 = 10;
pub const PAN_FAMILYTYPE_INDEX : u32 = 0;
pub const PAN_SERIFSTYLE_INDEX : u32 = 1;
pub const PAN_WEIGHT_INDEX : u32 = 2;
pub const PAN_PROPORTION_INDEX : u32 = 3;
pub const PAN_CONTRAST_INDEX : u32 = 4;
pub const PAN_STROKEVARIATION_INDEX : u32 = 5;
pub const PAN_ARMSTYLE_INDEX : u32 = 6;
pub const PAN_LETTERFORM_INDEX : u32 = 7;
pub const PAN_MIDLINE_INDEX : u32 = 8;
pub const PAN_XHEIGHT_INDEX : u32 = 9;
pub const PAN_CULTURE_LATIN : u32 = 0;
pub const PAN_ANY : u32 = 0;
pub const PAN_NO_FIT : u32 = 1;
pub const PAN_FAMILY_TEXT_DISPLAY : u32 = 2;
pub const PAN_FAMILY_SCRIPT : u32 = 3;
pub const PAN_FAMILY_DECORATIVE : u32 = 4;
pub const PAN_FAMILY_PICTORIAL : u32 = 5;
pub const PAN_SERIF_COVE : u32 = 2;
pub const PAN_SERIF_OBTUSE_COVE : u32 = 3;
pub const PAN_SERIF_SQUARE_COVE : u32 = 4;
pub const PAN_SERIF_OBTUSE_SQUARE_COVE : u32 = 5;
pub const PAN_SERIF_SQUARE : u32 = 6;
pub const PAN_SERIF_THIN : u32 = 7;
pub const PAN_SERIF_BONE : u32 = 8;
pub const PAN_SERIF_EXAGGERATED : u32 = 9;
pub const PAN_SERIF_TRIANGLE : u32 = 10;
pub const PAN_SERIF_NORMAL_SANS : u32 = 11;
pub const PAN_SERIF_OBTUSE_SANS : u32 = 12;
pub const PAN_SERIF_PERP_SANS : u32 = 13;
pub const PAN_SERIF_FLARED : u32 = 14;
pub const PAN_SERIF_ROUNDED : u32 = 15;
pub const PAN_WEIGHT_VERY_LIGHT : u32 = 2;
pub const PAN_WEIGHT_LIGHT : u32 = 3;
pub const PAN_WEIGHT_THIN : u32 = 4;
pub const PAN_WEIGHT_BOOK : u32 = 5;
pub const PAN_WEIGHT_MEDIUM : u32 = 6;
pub const PAN_WEIGHT_DEMI : u32 = 7;
pub const PAN_WEIGHT_BOLD : u32 = 8;
pub const PAN_WEIGHT_HEAVY : u32 = 9;
pub const PAN_WEIGHT_BLACK : u32 = 10;
pub const PAN_WEIGHT_NORD : u32 = 11;
pub const PAN_PROP_OLD_STYLE : u32 = 2;
pub const PAN_PROP_MODERN : u32 = 3;
pub const PAN_PROP_EVEN_WIDTH : u32 = 4;
pub const PAN_PROP_EXPANDED : u32 = 5;
pub const PAN_PROP_CONDENSED : u32 = 6;
pub const PAN_PROP_VERY_EXPANDED : u32 = 7;
pub const PAN_PROP_VERY_CONDENSED : u32 = 8;
pub const PAN_PROP_MONOSPACED : u32 = 9;
pub const PAN_CONTRAST_NONE : u32 = 2;
pub const PAN_CONTRAST_VERY_LOW : u32 = 3;
pub const PAN_CONTRAST_LOW : u32 = 4;
pub const PAN_CONTRAST_MEDIUM_LOW : u32 = 5;
pub const PAN_CONTRAST_MEDIUM : u32 = 6;
pub const PAN_CONTRAST_MEDIUM_HIGH : u32 = 7;
pub const PAN_CONTRAST_HIGH : u32 = 8;
pub const PAN_CONTRAST_VERY_HIGH : u32 = 9;
pub const PAN_STROKE_GRADUAL_DIAG : u32 = 2;
pub const PAN_STROKE_GRADUAL_TRAN : u32 = 3;
pub const PAN_STROKE_GRADUAL_VERT : u32 = 4;
pub const PAN_STROKE_GRADUAL_HORZ : u32 = 5;
pub const PAN_STROKE_RAPID_VERT : u32 = 6;
pub const PAN_STROKE_RAPID_HORZ : u32 = 7;
pub const PAN_STROKE_INSTANT_VERT : u32 = 8;
pub const PAN_STRAIGHT_ARMS_HORZ : u32 = 2;
pub const PAN_STRAIGHT_ARMS_WEDGE : u32 = 3;
pub const PAN_STRAIGHT_ARMS_VERT : u32 = 4;
pub const PAN_STRAIGHT_ARMS_SINGLE_SERIF : u32 = 5;
pub const PAN_STRAIGHT_ARMS_DOUBLE_SERIF : u32 = 6;
pub const PAN_BENT_ARMS_HORZ : u32 = 7;
pub const PAN_BENT_ARMS_WEDGE : u32 = 8;
pub const PAN_BENT_ARMS_VERT : u32 = 9;
pub const PAN_BENT_ARMS_SINGLE_SERIF : u32 = 10;
pub const PAN_BENT_ARMS_DOUBLE_SERIF : u32 = 11;
pub const PAN_LETT_NORMAL_CONTACT : u32 = 2;
pub const PAN_LETT_NORMAL_WEIGHTED : u32 = 3;
pub const PAN_LETT_NORMAL_BOXED : u32 = 4;
pub const PAN_LETT_NORMAL_FLATTENED : u32 = 5;
pub const PAN_LETT_NORMAL_ROUNDED : u32 = 6;
pub const PAN_LETT_NORMAL_OFF_CENTER : u32 = 7;
pub const PAN_LETT_NORMAL_SQUARE : u32 = 8;
pub const PAN_LETT_OBLIQUE_CONTACT : u32 = 9;
pub const PAN_LETT_OBLIQUE_WEIGHTED : u32 = 10;
pub const PAN_LETT_OBLIQUE_BOXED : u32 = 11;
pub const PAN_LETT_OBLIQUE_FLATTENED : u32 = 12;
pub const PAN_LETT_OBLIQUE_ROUNDED : u32 = 13;
pub const PAN_LETT_OBLIQUE_OFF_CENTER : u32 = 14;
pub const PAN_LETT_OBLIQUE_SQUARE : u32 = 15;
pub const PAN_MIDLINE_STANDARD_TRIMMED : u32 = 2;
pub const PAN_MIDLINE_STANDARD_POINTED : u32 = 3;
pub const PAN_MIDLINE_STANDARD_SERIFED : u32 = 4;
pub const PAN_MIDLINE_HIGH_TRIMMED : u32 = 5;
pub const PAN_MIDLINE_HIGH_POINTED : u32 = 6;
pub const PAN_MIDLINE_HIGH_SERIFED : u32 = 7;
pub const PAN_MIDLINE_CONSTANT_TRIMMED : u32 = 8;
pub const PAN_MIDLINE_CONSTANT_POINTED : u32 = 9;
pub const PAN_MIDLINE_CONSTANT_SERIFED : u32 = 10;
pub const PAN_MIDLINE_LOW_TRIMMED : u32 = 11;
pub const PAN_MIDLINE_LOW_POINTED : u32 = 12;
pub const PAN_MIDLINE_LOW_SERIFED : u32 = 13;
pub const PAN_XHEIGHT_CONSTANT_SMALL : u32 = 2;
pub const PAN_XHEIGHT_CONSTANT_STD : u32 = 3;
pub const PAN_XHEIGHT_CONSTANT_LARGE : u32 = 4;
pub const PAN_XHEIGHT_DUCKING_SMALL : u32 = 5;
pub const PAN_XHEIGHT_DUCKING_STD : u32 = 6;
pub const PAN_XHEIGHT_DUCKING_LARGE : u32 = 7;
pub const ELF_VENDOR_SIZE : u32 = 4;
pub const ELF_VERSION : u32 = 0;
pub const ELF_CULTURE_LATIN : u32 = 0;
pub const RASTER_FONTTYPE : u32 = 1;
pub const DEVICE_FONTTYPE : u32 = 2;
pub const TRUETYPE_FONTTYPE : u32 = 4;
pub const PC_RESERVED : u32 = 1;
pub const PC_EXPLICIT : u32 = 2;
pub const PC_NOCOLLAPSE : u32 = 4;
pub const BKMODE_LAST : u32 = 2;
pub const GM_LAST : u32 = 2;
pub const PT_CLOSEFIGURE : u32 = 1;
pub const ABSOLUTE : u32 = 1;
pub const RELATIVE : u32 = 2;
pub const STOCK_LAST : u32 = 19;
pub const CLR_INVALID : u32 = 4294967295;
pub const BS_SOLID : u32 = 0;
pub const BS_NULL : u32 = 1;
pub const BS_HATCHED : u32 = 2;
pub const BS_PATTERN : u32 = 3;
pub const BS_INDEXED : u32 = 4;
pub const BS_DIBPATTERN : u32 = 5;
pub const BS_DIBPATTERNPT : u32 = 6;
pub const BS_PATTERN8X8 : u32 = 7;
pub const BS_DIBPATTERN8X8 : u32 = 8;
pub const BS_MONOPATTERN : u32 = 9;
pub const HS_API_MAX : u32 = 12;
pub const PS_USERSTYLE : u32 = 7;
pub const PS_ALTERNATE : u32 = 8;
pub const PS_STYLE_MASK : u32 = 15;
pub const PS_ENDCAP_ROUND : u32 = 0;
pub const PS_ENDCAP_SQUARE : u32 = 256;
pub const PS_ENDCAP_FLAT : u32 = 512;
pub const PS_ENDCAP_MASK : u32 = 3840;
pub const PS_JOIN_ROUND : u32 = 0;
pub const PS_JOIN_BEVEL : u32 = 4096;
pub const PS_JOIN_MITER : u32 = 8192;
pub const PS_JOIN_MASK : u32 = 61440;
pub const PS_TYPE_MASK : u32 = 983040;
pub const TECHNOLOGY : u32 = 2;
pub const HORZSIZE : u32 = 4;
pub const VERTSIZE : u32 = 6;
pub const HORZRES : u32 = 8;
pub const VERTRES : u32 = 10;
pub const BITSPIXEL : u32 = 12;
pub const PLANES : u32 = 14;
pub const NUMBRUSHES : u32 = 16;
pub const NUMPENS : u32 = 18;
pub const NUMMARKERS : u32 = 20;
pub const NUMFONTS : u32 = 22;
pub const NUMCOLORS : u32 = 24;
pub const PDEVICESIZE : u32 = 26;
pub const CURVECAPS : u32 = 28;
pub const LINECAPS : u32 = 30;
pub const POLYGONALCAPS : u32 = 32;
pub const TEXTCAPS : u32 = 34;
pub const CLIPCAPS : u32 = 36;
pub const RASTERCAPS : u32 = 38;
pub const ASPECTX : u32 = 40;
pub const ASPECTY : u32 = 42;
pub const ASPECTXY : u32 = 44;
pub const LOGPIXELSX : u32 = 88;
pub const LOGPIXELSY : u32 = 90;
pub const SIZEPALETTE : u32 = 104;
pub const NUMRESERVED : u32 = 106;
pub const COLORRES : u32 = 108;
pub const PHYSICALWIDTH : u32 = 110;
pub const PHYSICALHEIGHT : u32 = 111;
pub const PHYSICALOFFSETX : u32 = 112;
pub const PHYSICALOFFSETY : u32 = 113;
pub const SCALINGFACTORX : u32 = 114;
pub const SCALINGFACTORY : u32 = 115;
pub const VREFRESH : u32 = 116;
pub const DESKTOPVERTRES : u32 = 117;
pub const DESKTOPHORZRES : u32 = 118;
pub const BLTALIGNMENT : u32 = 119;
pub const SHADEBLENDCAPS : u32 = 120;
pub const COLORMGMTCAPS : u32 = 121;
pub const DT_PLOTTER : u32 = 0;
pub const DT_RASDISPLAY : u32 = 1;
pub const DT_RASPRINTER : u32 = 2;
pub const DT_RASCAMERA : u32 = 3;
pub const DT_CHARSTREAM : u32 = 4;
pub const DT_METAFILE : u32 = 5;
pub const DT_DISPFILE : u32 = 6;
pub const CC_NONE : u32 = 0;
pub const CC_CIRCLES : u32 = 1;
pub const CC_PIE : u32 = 2;
pub const CC_CHORD : u32 = 4;
pub const CC_ELLIPSES : u32 = 8;
pub const CC_WIDE : u32 = 16;
pub const CC_STYLED : u32 = 32;
pub const CC_WIDESTYLED : u32 = 64;
pub const CC_INTERIORS : u32 = 128;
pub const CC_ROUNDRECT : u32 = 256;
pub const LC_NONE : u32 = 0;
pub const LC_POLYLINE : u32 = 2;
pub const LC_MARKER : u32 = 4;
pub const LC_POLYMARKER : u32 = 8;
pub const LC_WIDE : u32 = 16;
pub const LC_STYLED : u32 = 32;
pub const LC_WIDESTYLED : u32 = 64;
pub const LC_INTERIORS : u32 = 128;
pub const PC_NONE : u32 = 0;
pub const PC_POLYGON : u32 = 1;
pub const PC_RECTANGLE : u32 = 2;
pub const PC_WINDPOLYGON : u32 = 4;
pub const PC_TRAPEZOID : u32 = 4;
pub const PC_SCANLINE : u32 = 8;
pub const PC_WIDE : u32 = 16;
pub const PC_STYLED : u32 = 32;
pub const PC_WIDESTYLED : u32 = 64;
pub const PC_INTERIORS : u32 = 128;
pub const PC_POLYPOLYGON : u32 = 256;
pub const PC_PATHS : u32 = 512;
pub const CP_NONE : u32 = 0;
pub const CP_RECTANGLE : u32 = 1;
pub const CP_REGION : u32 = 2;
pub const TC_OP_CHARACTER : u32 = 1;
pub const TC_OP_STROKE : u32 = 2;
pub const TC_CP_STROKE : u32 = 4;
pub const TC_CR_90 : u32 = 8;
pub const TC_CR_ANY : u32 = 16;
pub const TC_SF_X_YINDEP : u32 = 32;
pub const TC_SA_DOUBLE : u32 = 64;
pub const TC_SA_INTEGER : u32 = 128;
pub const TC_SA_CONTIN : u32 = 256;
pub const TC_EA_DOUBLE : u32 = 512;
pub const TC_IA_ABLE : u32 = 1024;
pub const TC_UA_ABLE : u32 = 2048;
pub const TC_SO_ABLE : u32 = 4096;
pub const TC_RA_ABLE : u32 = 8192;
pub const TC_VA_ABLE : u32 = 16384;
pub const TC_RESERVED : u32 = 32768;
pub const TC_SCROLLBLT : u32 = 65536;
pub const RC_BITBLT : u32 = 1;
pub const RC_BANDING : u32 = 2;
pub const RC_SCALING : u32 = 4;
pub const RC_BITMAP64 : u32 = 8;
pub const RC_GDI20_OUTPUT : u32 = 16;
pub const RC_GDI20_STATE : u32 = 32;
pub const RC_SAVEBITMAP : u32 = 64;
pub const RC_DI_BITMAP : u32 = 128;
pub const RC_PALETTE : u32 = 256;
pub const RC_DIBTODEV : u32 = 512;
pub const RC_BIGFONT : u32 = 1024;
pub const RC_STRETCHBLT : u32 = 2048;
pub const RC_FLOODFILL : u32 = 4096;
pub const RC_STRETCHDIB : u32 = 8192;
pub const RC_OP_DX_OUTPUT : u32 = 16384;
pub const RC_DEVBITS : u32 = 32768;
pub const SB_NONE : u32 = 0;
pub const SB_CONST_ALPHA : u32 = 1;
pub const SB_PIXEL_ALPHA : u32 = 2;
pub const SB_PREMULT_ALPHA : u32 = 4;
pub const SB_GRAD_RECT : u32 = 16;
pub const SB_GRAD_TRI : u32 = 32;
pub const CM_NONE : u32 = 0;
pub const CM_DEVICE_ICM : u32 = 1;
pub const CM_GAMMA_RAMP : u32 = 2;
pub const CM_CMYK_COLOR : u32 = 4;
pub const SYSPAL_ERROR : u32 = 0;
pub const CBM_INIT : i32 = 4;
pub const CCHDEVICENAME : u32 = 32;
pub const CCHFORMNAME : u32 = 32;
pub const DM_SPECVERSION : u32 = 1025;
pub const DM_ORIENTATION : i32 = 1;
pub const DM_PAPERSIZE : i32 = 2;
pub const DM_PAPERLENGTH : i32 = 4;
pub const DM_PAPERWIDTH : i32 = 8;
pub const DM_SCALE : i32 = 16;
pub const DM_POSITION : i32 = 32;
pub const DM_NUP : i32 = 64;
pub const DM_DISPLAYORIENTATION : i32 = 128;
pub const DM_COPIES : i32 = 256;
pub const DM_DEFAULTSOURCE : i32 = 512;
pub const DM_PRINTQUALITY : i32 = 1024;
pub const DM_COLOR : i32 = 2048;
pub const DM_DUPLEX : i32 = 4096;
pub const DM_YRESOLUTION : i32 = 8192;
pub const DM_TTOPTION : i32 = 16384;
pub const DM_COLLATE : i32 = 32768;
pub const DM_FORMNAME : i32 = 65536;
pub const DM_LOGPIXELS : i32 = 131072;
pub const DM_BITSPERPEL : i32 = 262144;
pub const DM_PELSWIDTH : i32 = 524288;
pub const DM_PELSHEIGHT : i32 = 1048576;
pub const DM_DISPLAYFLAGS : i32 = 2097152;
pub const DM_DISPLAYFREQUENCY : i32 = 4194304;
pub const DM_ICMMETHOD : i32 = 8388608;
pub const DM_ICMINTENT : i32 = 16777216;
pub const DM_MEDIATYPE : i32 = 33554432;
pub const DM_DITHERTYPE : i32 = 67108864;
pub const DM_PANNINGWIDTH : i32 = 134217728;
pub const DM_PANNINGHEIGHT : i32 = 268435456;
pub const DM_DISPLAYFIXEDOUTPUT : i32 = 536870912;
pub const DMORIENT_PORTRAIT : u32 = 1;
pub const DMORIENT_LANDSCAPE : u32 = 2;
pub const DMPAPER_LETTER : u32 = 1;
pub const DMPAPER_LETTERSMALL : u32 = 2;
pub const DMPAPER_TABLOID : u32 = 3;
pub const DMPAPER_LEDGER : u32 = 4;
pub const DMPAPER_LEGAL : u32 = 5;
pub const DMPAPER_STATEMENT : u32 = 6;
pub const DMPAPER_EXECUTIVE : u32 = 7;
pub const DMPAPER_A3 : u32 = 8;
pub const DMPAPER_A4 : u32 = 9;
pub const DMPAPER_A4SMALL : u32 = 10;
pub const DMPAPER_A5 : u32 = 11;
pub const DMPAPER_B4 : u32 = 12;
pub const DMPAPER_B5 : u32 = 13;
pub const DMPAPER_FOLIO : u32 = 14;
pub const DMPAPER_QUARTO : u32 = 15;
pub const DMPAPER_10X14 : u32 = 16;
pub const DMPAPER_11X17 : u32 = 17;
pub const DMPAPER_NOTE : u32 = 18;
pub const DMPAPER_ENV_9 : u32 = 19;
pub const DMPAPER_ENV_10 : u32 = 20;
pub const DMPAPER_ENV_11 : u32 = 21;
pub const DMPAPER_ENV_12 : u32 = 22;
pub const DMPAPER_ENV_14 : u32 = 23;
pub const DMPAPER_CSHEET : u32 = 24;
pub const DMPAPER_DSHEET : u32 = 25;
pub const DMPAPER_ESHEET : u32 = 26;
pub const DMPAPER_ENV_DL : u32 = 27;
pub const DMPAPER_ENV_C5 : u32 = 28;
pub const DMPAPER_ENV_C3 : u32 = 29;
pub const DMPAPER_ENV_C4 : u32 = 30;
pub const DMPAPER_ENV_C6 : u32 = 31;
pub const DMPAPER_ENV_C65 : u32 = 32;
pub const DMPAPER_ENV_B4 : u32 = 33;
pub const DMPAPER_ENV_B5 : u32 = 34;
pub const DMPAPER_ENV_B6 : u32 = 35;
pub const DMPAPER_ENV_ITALY : u32 = 36;
pub const DMPAPER_ENV_MONARCH : u32 = 37;
pub const DMPAPER_ENV_PERSONAL : u32 = 38;
pub const DMPAPER_FANFOLD_US : u32 = 39;
pub const DMPAPER_FANFOLD_STD_GERMAN : u32 = 40;
pub const DMPAPER_FANFOLD_LGL_GERMAN : u32 = 41;
pub const DMPAPER_ISO_B4 : u32 = 42;
pub const DMPAPER_JAPANESE_POSTCARD : u32 = 43;
pub const DMPAPER_9X11 : u32 = 44;
pub const DMPAPER_10X11 : u32 = 45;
pub const DMPAPER_15X11 : u32 = 46;
pub const DMPAPER_ENV_INVITE : u32 = 47;
pub const DMPAPER_RESERVED_48 : u32 = 48;
pub const DMPAPER_RESERVED_49 : u32 = 49;
pub const DMPAPER_LETTER_EXTRA : u32 = 50;
pub const DMPAPER_LEGAL_EXTRA : u32 = 51;
pub const DMPAPER_TABLOID_EXTRA : u32 = 52;
pub const DMPAPER_A4_EXTRA : u32 = 53;
pub const DMPAPER_LETTER_TRANSVERSE : u32 = 54;
pub const DMPAPER_A4_TRANSVERSE : u32 = 55;
pub const DMPAPER_LETTER_EXTRA_TRANSVERSE : u32 = 56;
pub const DMPAPER_A_PLUS : u32 = 57;
pub const DMPAPER_B_PLUS : u32 = 58;
pub const DMPAPER_LETTER_PLUS : u32 = 59;
pub const DMPAPER_A4_PLUS : u32 = 60;
pub const DMPAPER_A5_TRANSVERSE : u32 = 61;
pub const DMPAPER_B5_TRANSVERSE : u32 = 62;
pub const DMPAPER_A3_EXTRA : u32 = 63;
pub const DMPAPER_A5_EXTRA : u32 = 64;
pub const DMPAPER_B5_EXTRA : u32 = 65;
pub const DMPAPER_A2 : u32 = 66;
pub const DMPAPER_A3_TRANSVERSE : u32 = 67;
pub const DMPAPER_A3_EXTRA_TRANSVERSE : u32 = 68;
pub const DMPAPER_DBL_JAPANESE_POSTCARD : u32 = 69;
pub const DMPAPER_A6 : u32 = 70;
pub const DMPAPER_JENV_KAKU2 : u32 = 71;
pub const DMPAPER_JENV_KAKU3 : u32 = 72;
pub const DMPAPER_JENV_CHOU3 : u32 = 73;
pub const DMPAPER_JENV_CHOU4 : u32 = 74;
pub const DMPAPER_LETTER_ROTATED : u32 = 75;
pub const DMPAPER_A3_ROTATED : u32 = 76;
pub const DMPAPER_A4_ROTATED : u32 = 77;
pub const DMPAPER_A5_ROTATED : u32 = 78;
pub const DMPAPER_B4_JIS_ROTATED : u32 = 79;
pub const DMPAPER_B5_JIS_ROTATED : u32 = 80;
pub const DMPAPER_JAPANESE_POSTCARD_ROTATED : u32 = 81;
pub const DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED : u32 = 82;
pub const DMPAPER_A6_ROTATED : u32 = 83;
pub const DMPAPER_JENV_KAKU2_ROTATED : u32 = 84;
pub const DMPAPER_JENV_KAKU3_ROTATED : u32 = 85;
pub const DMPAPER_JENV_CHOU3_ROTATED : u32 = 86;
pub const DMPAPER_JENV_CHOU4_ROTATED : u32 = 87;
pub const DMPAPER_B6_JIS : u32 = 88;
pub const DMPAPER_B6_JIS_ROTATED : u32 = 89;
pub const DMPAPER_12X11 : u32 = 90;
pub const DMPAPER_JENV_YOU4 : u32 = 91;
pub const DMPAPER_JENV_YOU4_ROTATED : u32 = 92;
pub const DMPAPER_P16K : u32 = 93;
pub const DMPAPER_P32K : u32 = 94;
pub const DMPAPER_P32KBIG : u32 = 95;
pub const DMPAPER_PENV_1 : u32 = 96;
pub const DMPAPER_PENV_2 : u32 = 97;
pub const DMPAPER_PENV_3 : u32 = 98;
pub const DMPAPER_PENV_4 : u32 = 99;
pub const DMPAPER_PENV_5 : u32 = 100;
pub const DMPAPER_PENV_6 : u32 = 101;
pub const DMPAPER_PENV_7 : u32 = 102;
pub const DMPAPER_PENV_8 : u32 = 103;
pub const DMPAPER_PENV_9 : u32 = 104;
pub const DMPAPER_PENV_10 : u32 = 105;
pub const DMPAPER_P16K_ROTATED : u32 = 106;
pub const DMPAPER_P32K_ROTATED : u32 = 107;
pub const DMPAPER_P32KBIG_ROTATED : u32 = 108;
pub const DMPAPER_PENV_1_ROTATED : u32 = 109;
pub const DMPAPER_PENV_2_ROTATED : u32 = 110;
pub const DMPAPER_PENV_3_ROTATED : u32 = 111;
pub const DMPAPER_PENV_4_ROTATED : u32 = 112;
pub const DMPAPER_PENV_5_ROTATED : u32 = 113;
pub const DMPAPER_PENV_6_ROTATED : u32 = 114;
pub const DMPAPER_PENV_7_ROTATED : u32 = 115;
pub const DMPAPER_PENV_8_ROTATED : u32 = 116;
pub const DMPAPER_PENV_9_ROTATED : u32 = 117;
pub const DMPAPER_PENV_10_ROTATED : u32 = 118;
pub const DMPAPER_USER : u32 = 256;
pub const DMBIN_UPPER : u32 = 1;
pub const DMBIN_ONLYONE : u32 = 1;
pub const DMBIN_LOWER : u32 = 2;
pub const DMBIN_MIDDLE : u32 = 3;
pub const DMBIN_MANUAL : u32 = 4;
pub const DMBIN_ENVELOPE : u32 = 5;
pub const DMBIN_ENVMANUAL : u32 = 6;
pub const DMBIN_AUTO : u32 = 7;
pub const DMBIN_TRACTOR : u32 = 8;
pub const DMBIN_SMALLFMT : u32 = 9;
pub const DMBIN_LARGEFMT : u32 = 10;
pub const DMBIN_LARGECAPACITY : u32 = 11;
pub const DMBIN_CASSETTE : u32 = 14;
pub const DMBIN_FORMSOURCE : u32 = 15;
pub const DMBIN_USER : u32 = 256;
pub const DMRES_DRAFT : i32 = -1;
pub const DMRES_LOW : i32 = -2;
pub const DMRES_MEDIUM : i32 = -3;
pub const DMRES_HIGH : i32 = -4;
pub const DMCOLOR_MONOCHROME : u32 = 1;
pub const DMCOLOR_COLOR : u32 = 2;
pub const DMDUP_SIMPLEX : u32 = 1;
pub const DMDUP_VERTICAL : u32 = 2;
pub const DMDUP_HORIZONTAL : u32 = 3;
pub const DMTT_BITMAP : u32 = 1;
pub const DMTT_DOWNLOAD : u32 = 2;
pub const DMTT_SUBDEV : u32 = 3;
pub const DMTT_DOWNLOAD_OUTLINE : u32 = 4;
pub const DMCOLLATE_FALSE : u32 = 0;
pub const DMCOLLATE_TRUE : u32 = 1;
pub const DMDO_DEFAULT : u32 = 0;
pub const DMDO_90 : u32 = 1;
pub const DMDO_180 : u32 = 2;
pub const DMDO_270 : u32 = 3;
pub const DMDFO_DEFAULT : u32 = 0;
pub const DMDFO_STRETCH : u32 = 1;
pub const DMDFO_CENTER : u32 = 2;
pub const DM_INTERLACED : u32 = 2;
pub const DMDISPLAYFLAGS_TEXTMODE : u32 = 4;
pub const DMNUP_SYSTEM : u32 = 1;
pub const DMNUP_ONEUP : u32 = 2;
pub const DMICMMETHOD_NONE : u32 = 1;
pub const DMICMMETHOD_SYSTEM : u32 = 2;
pub const DMICMMETHOD_DRIVER : u32 = 3;
pub const DMICMMETHOD_DEVICE : u32 = 4;
pub const DMICMMETHOD_USER : u32 = 256;
pub const DMICM_SATURATE : u32 = 1;
pub const DMICM_CONTRAST : u32 = 2;
pub const DMICM_COLORIMETRIC : u32 = 3;
pub const DMICM_ABS_COLORIMETRIC : u32 = 4;
pub const DMICM_USER : u32 = 256;
pub const DMMEDIA_STANDARD : u32 = 1;
pub const DMMEDIA_TRANSPARENCY : u32 = 2;
pub const DMMEDIA_GLOSSY : u32 = 3;
pub const DMMEDIA_USER : u32 = 256;
pub const DMDITHER_NONE : u32 = 1;
pub const DMDITHER_COARSE : u32 = 2;
pub const DMDITHER_FINE : u32 = 3;
pub const DMDITHER_LINEART : u32 = 4;
pub const DMDITHER_ERRORDIFFUSION : u32 = 5;
pub const DMDITHER_RESERVED6 : u32 = 6;
pub const DMDITHER_RESERVED7 : u32 = 7;
pub const DMDITHER_RESERVED8 : u32 = 8;
pub const DMDITHER_RESERVED9 : u32 = 9;
pub const DMDITHER_GRAYSCALE : u32 = 10;
pub const DMDITHER_USER : u32 = 256;
pub const DISPLAY_DEVICE_ATTACHED_TO_DESKTOP : u32 = 1;
pub const DISPLAY_DEVICE_MULTI_DRIVER : u32 = 2;
pub const DISPLAY_DEVICE_PRIMARY_DEVICE : u32 = 4;
pub const DISPLAY_DEVICE_MIRRORING_DRIVER : u32 = 8;
pub const DISPLAY_DEVICE_VGA_COMPATIBLE : u32 = 16;
pub const DISPLAY_DEVICE_REMOVABLE : u32 = 32;
pub const DISPLAY_DEVICE_ACC_DRIVER : u32 = 64;
pub const DISPLAY_DEVICE_MODESPRUNED : u32 = 134217728;
pub const DISPLAY_DEVICE_RDPUDD : u32 = 16777216;
pub const DISPLAY_DEVICE_REMOTE : u32 = 67108864;
pub const DISPLAY_DEVICE_DISCONNECT : u32 = 33554432;
pub const DISPLAY_DEVICE_TS_COMPATIBLE : u32 = 2097152;
pub const DISPLAY_DEVICE_UNSAFE_MODES_ON : u32 = 524288;
pub const DISPLAY_DEVICE_ACTIVE : u32 = 1;
pub const DISPLAY_DEVICE_ATTACHED : u32 = 2;
pub const DISPLAYCONFIG_MAXPATH : u32 = 1024;
pub const DISPLAYCONFIG_PATH_MODE_IDX_INVALID : u32 = 4294967295;
pub const DISPLAYCONFIG_PATH_TARGET_MODE_IDX_INVALID : u32 = 65535;
pub const DISPLAYCONFIG_PATH_DESKTOP_IMAGE_IDX_INVALID : u32 = 65535;
pub const DISPLAYCONFIG_PATH_SOURCE_MODE_IDX_INVALID : u32 = 65535;
pub const DISPLAYCONFIG_PATH_CLONE_GROUP_INVALID : u32 = 65535;
pub const DISPLAYCONFIG_SOURCE_IN_USE : u32 = 1;
pub const DISPLAYCONFIG_TARGET_IN_USE : u32 = 1;
pub const DISPLAYCONFIG_TARGET_FORCIBLE : u32 = 2;
pub const DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_BOOT : u32 = 4;
pub const DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_PATH : u32 = 8;
pub const DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_SYSTEM : u32 = 16;
pub const DISPLAYCONFIG_TARGET_IS_HMD : u32 = 32;
pub const DISPLAYCONFIG_PATH_ACTIVE : u32 = 1;
pub const DISPLAYCONFIG_PATH_PREFERRED_UNSCALED : u32 = 4;
pub const DISPLAYCONFIG_PATH_SUPPORT_VIRTUAL_MODE : u32 = 8;
pub const DISPLAYCONFIG_PATH_VALID_FLAGS : u32 = 13;
pub const QDC_ALL_PATHS : u32 = 1;
pub const QDC_ONLY_ACTIVE_PATHS : u32 = 2;
pub const QDC_DATABASE_CURRENT : u32 = 4;
pub const QDC_VIRTUAL_MODE_AWARE : u32 = 16;
pub const QDC_INCLUDE_HMD : u32 = 32;
pub const SDC_TOPOLOGY_INTERNAL : u32 = 1;
pub const SDC_TOPOLOGY_CLONE : u32 = 2;
pub const SDC_TOPOLOGY_EXTEND : u32 = 4;
pub const SDC_TOPOLOGY_EXTERNAL : u32 = 8;
pub const SDC_TOPOLOGY_SUPPLIED : u32 = 16;
pub const SDC_USE_SUPPLIED_DISPLAY_CONFIG : u32 = 32;
pub const SDC_VALIDATE : u32 = 64;
pub const SDC_APPLY : u32 = 128;
pub const SDC_NO_OPTIMIZATION : u32 = 256;
pub const SDC_SAVE_TO_DATABASE : u32 = 512;
pub const SDC_ALLOW_CHANGES : u32 = 1024;
pub const SDC_PATH_PERSIST_IF_REQUIRED : u32 = 2048;
pub const SDC_FORCE_MODE_ENUMERATION : u32 = 4096;
pub const SDC_ALLOW_PATH_ORDER_CHANGES : u32 = 8192;
pub const SDC_VIRTUAL_MODE_AWARE : u32 = 32768;
pub const RDH_RECTANGLES : u32 = 1;
pub const SYSRGN : u32 = 4;
pub const TT_POLYGON_TYPE : u32 = 24;
pub const TT_PRIM_LINE : u32 = 1;
pub const TT_PRIM_QSPLINE : u32 = 2;
pub const TT_PRIM_CSPLINE : u32 = 3;
pub const GCP_DBCS : u32 = 1;
pub const GCP_ERROR : u32 = 32768;
pub const FLI_MASK : u32 = 4155;
pub const FLI_GLYPHS : i32 = 262144;
pub const GCP_JUSTIFYIN : i32 = 2097152;
pub const GCPCLASS_NEUTRAL : u32 = 3;
pub const GCPCLASS_LATINNUMERICTERMINATOR : u32 = 6;
pub const GCPCLASS_LATINNUMERICSEPARATOR : u32 = 7;
pub const GCPCLASS_NUMERICSEPARATOR : u32 = 8;
pub const GCPCLASS_PREBOUNDLTR : u32 = 128;
pub const GCPCLASS_PREBOUNDRTL : u32 = 64;
pub const GCPCLASS_POSTBOUNDLTR : u32 = 32;
pub const GCPCLASS_POSTBOUNDRTL : u32 = 16;
pub const GCPGLYPH_LINKBEFORE : u32 = 32768;
pub const GCPGLYPH_LINKAFTER : u32 = 16384;
pub const TT_AVAILABLE : u32 = 1;
pub const TT_ENABLED : u32 = 2;
pub const PFD_TYPE_RGBA : u32 = 0;
pub const PFD_TYPE_COLORINDEX : u32 = 1;
pub const PFD_MAIN_PLANE : u32 = 0;
pub const PFD_OVERLAY_PLANE : u32 = 1;
pub const PFD_UNDERLAY_PLANE : i32 = -1;
pub const PFD_DOUBLEBUFFER : u32 = 1;
pub const PFD_STEREO : u32 = 2;
pub const PFD_DRAW_TO_WINDOW : u32 = 4;
pub const PFD_DRAW_TO_BITMAP : u32 = 8;
pub const PFD_SUPPORT_GDI : u32 = 16;
pub const PFD_SUPPORT_OPENGL : u32 = 32;
pub const PFD_GENERIC_FORMAT : u32 = 64;
pub const PFD_NEED_PALETTE : u32 = 128;
pub const PFD_NEED_SYSTEM_PALETTE : u32 = 256;
pub const PFD_SWAP_EXCHANGE : u32 = 512;
pub const PFD_SWAP_COPY : u32 = 1024;
pub const PFD_SWAP_LAYER_BUFFERS : u32 = 2048;
pub const PFD_GENERIC_ACCELERATED : u32 = 4096;
pub const PFD_SUPPORT_DIRECTDRAW : u32 = 8192;
pub const PFD_DIRECT3D_ACCELERATED : u32 = 16384;
pub const PFD_SUPPORT_COMPOSITION : u32 = 32768;
pub const PFD_DEPTH_DONTCARE : u32 = 536870912;
pub const PFD_DOUBLEBUFFER_DONTCARE : u32 = 1073741824;
pub const PFD_STEREO_DONTCARE : u32 = 2147483648;
pub const DC_BINADJUST : u32 = 19;
pub const DC_EMF_COMPLIANT : u32 = 20;
pub const DC_DATATYPE_PRODUCED : u32 = 21;
pub const DC_MANUFACTURER : u32 = 23;
pub const DC_MODEL : u32 = 24;
pub const PRINTRATEUNIT_PPM : u32 = 1;
pub const PRINTRATEUNIT_CPS : u32 = 2;
pub const PRINTRATEUNIT_LPM : u32 = 3;
pub const PRINTRATEUNIT_IPM : u32 = 4;
pub const DCTT_BITMAP : i32 = 1;
pub const DCTT_DOWNLOAD : i32 = 2;
pub const DCTT_SUBDEV : i32 = 4;
pub const DCTT_DOWNLOAD_OUTLINE : i32 = 8;
pub const DCBA_FACEUPNONE : u32 = 0;
pub const DCBA_FACEUPCENTER : u32 = 1;
pub const DCBA_FACEUPLEFT : u32 = 2;
pub const DCBA_FACEUPRIGHT : u32 = 3;
pub const DCBA_FACEDOWNNONE : u32 = 256;
pub const DCBA_FACEDOWNCENTER : u32 = 257;
pub const DCBA_FACEDOWNLEFT : u32 = 258;
pub const DCBA_FACEDOWNRIGHT : u32 = 259;
pub const GS_8BIT_INDICES : u32 = 1;
pub const GGI_MARK_NONEXISTING_GLYPHS : u32 = 1;
pub const MM_MAX_NUMAXES : u32 = 16;
pub const MM_MAX_AXES_NAMELEN : u32 = 16;
pub const GDIREGISTERDDRAWPACKETVERSION : u32 = 1;
pub const AC_SRC_OVER : u32 = 0;
pub const AC_SRC_ALPHA : u32 = 1;
pub const GRADIENT_FILL_OP_FLAG : u32 = 255;
pub const CA_NEGATIVE : u32 = 1;
pub const CA_LOG_FILTER : u32 = 2;
pub const ILLUMINANT_DEVICE_DEFAULT : u32 = 0;
pub const ILLUMINANT_A : u32 = 1;
pub const ILLUMINANT_B : u32 = 2;
pub const ILLUMINANT_C : u32 = 3;
pub const ILLUMINANT_D50 : u32 = 4;
pub const ILLUMINANT_D55 : u32 = 5;
pub const ILLUMINANT_D65 : u32 = 6;
pub const ILLUMINANT_D75 : u32 = 7;
pub const ILLUMINANT_F2 : u32 = 8;
pub const DI_APPBANDING : u32 = 1;
pub const DI_ROPS_READ_DESTINATION : u32 = 2;
pub const FONTMAPPER_MAX : u32 = 10;
pub const ICM_OFF : u32 = 1;
pub const ICM_ON : u32 = 2;
pub const ICM_QUERY : u32 = 3;
pub const ICM_DONE_OUTSIDEDC : u32 = 4;
pub const ENHMETA_SIGNATURE : u32 = 1179469088;
pub const ENHMETA_STOCK_OBJECT : u32 = 2147483648;
pub const EMR_HEADER : u32 = 1;
pub const EMR_POLYBEZIER : u32 = 2;
pub const EMR_POLYGON : u32 = 3;
pub const EMR_POLYLINE : u32 = 4;
pub const EMR_POLYBEZIERTO : u32 = 5;
pub const EMR_POLYLINETO : u32 = 6;
pub const EMR_POLYPOLYLINE : u32 = 7;
pub const EMR_POLYPOLYGON : u32 = 8;
pub const EMR_SETWINDOWEXTEX : u32 = 9;
pub const EMR_SETWINDOWORGEX : u32 = 10;
pub const EMR_SETVIEWPORTEXTEX : u32 = 11;
pub const EMR_SETVIEWPORTORGEX : u32 = 12;
pub const EMR_SETBRUSHORGEX : u32 = 13;
pub const EMR_EOF : u32 = 14;
pub const EMR_SETPIXELV : u32 = 15;
pub const EMR_SETMAPPERFLAGS : u32 = 16;
pub const EMR_SETMAPMODE : u32 = 17;
pub const EMR_SETBKMODE : u32 = 18;
pub const EMR_SETPOLYFILLMODE : u32 = 19;
pub const EMR_SETROP2 : u32 = 20;
pub const EMR_SETSTRETCHBLTMODE : u32 = 21;
pub const EMR_SETTEXTALIGN : u32 = 22;
pub const EMR_SETCOLORADJUSTMENT : u32 = 23;
pub const EMR_SETTEXTCOLOR : u32 = 24;
pub const EMR_SETBKCOLOR : u32 = 25;
pub const EMR_OFFSETCLIPRGN : u32 = 26;
pub const EMR_MOVETOEX : u32 = 27;
pub const EMR_SETMETARGN : u32 = 28;
pub const EMR_EXCLUDECLIPRECT : u32 = 29;
pub const EMR_INTERSECTCLIPRECT : u32 = 30;
pub const EMR_SCALEVIEWPORTEXTEX : u32 = 31;
pub const EMR_SCALEWINDOWEXTEX : u32 = 32;
pub const EMR_SAVEDC : u32 = 33;
pub const EMR_RESTOREDC : u32 = 34;
pub const EMR_SETWORLDTRANSFORM : u32 = 35;
pub const EMR_MODIFYWORLDTRANSFORM : u32 = 36;
pub const EMR_SELECTOBJECT : u32 = 37;
pub const EMR_CREATEPEN : u32 = 38;
pub const EMR_CREATEBRUSHINDIRECT : u32 = 39;
pub const EMR_DELETEOBJECT : u32 = 40;
pub const EMR_ANGLEARC : u32 = 41;
pub const EMR_ELLIPSE : u32 = 42;
pub const EMR_RECTANGLE : u32 = 43;
pub const EMR_ROUNDRECT : u32 = 44;
pub const EMR_ARC : u32 = 45;
pub const EMR_CHORD : u32 = 46;
pub const EMR_PIE : u32 = 47;
pub const EMR_SELECTPALETTE : u32 = 48;
pub const EMR_CREATEPALETTE : u32 = 49;
pub const EMR_SETPALETTEENTRIES : u32 = 50;
pub const EMR_RESIZEPALETTE : u32 = 51;
pub const EMR_REALIZEPALETTE : u32 = 52;
pub const EMR_EXTFLOODFILL : u32 = 53;
pub const EMR_LINETO : u32 = 54;
pub const EMR_ARCTO : u32 = 55;
pub const EMR_POLYDRAW : u32 = 56;
pub const EMR_SETARCDIRECTION : u32 = 57;
pub const EMR_SETMITERLIMIT : u32 = 58;
pub const EMR_BEGINPATH : u32 = 59;
pub const EMR_ENDPATH : u32 = 60;
pub const EMR_CLOSEFIGURE : u32 = 61;
pub const EMR_FILLPATH : u32 = 62;
pub const EMR_STROKEANDFILLPATH : u32 = 63;
pub const EMR_STROKEPATH : u32 = 64;
pub const EMR_FLATTENPATH : u32 = 65;
pub const EMR_WIDENPATH : u32 = 66;
pub const EMR_SELECTCLIPPATH : u32 = 67;
pub const EMR_ABORTPATH : u32 = 68;
pub const EMR_GDICOMMENT : u32 = 70;
pub const EMR_FILLRGN : u32 = 71;
pub const EMR_FRAMERGN : u32 = 72;
pub const EMR_INVERTRGN : u32 = 73;
pub const EMR_PAINTRGN : u32 = 74;
pub const EMR_EXTSELECTCLIPRGN : u32 = 75;
pub const EMR_BITBLT : u32 = 76;
pub const EMR_STRETCHBLT : u32 = 77;
pub const EMR_MASKBLT : u32 = 78;
pub const EMR_PLGBLT : u32 = 79;
pub const EMR_SETDIBITSTODEVICE : u32 = 80;
pub const EMR_STRETCHDIBITS : u32 = 81;
pub const EMR_EXTCREATEFONTINDIRECTW : u32 = 82;
pub const EMR_EXTTEXTOUTA : u32 = 83;
pub const EMR_EXTTEXTOUTW : u32 = 84;
pub const EMR_POLYBEZIER16 : u32 = 85;
pub const EMR_POLYGON16 : u32 = 86;
pub const EMR_POLYLINE16 : u32 = 87;
pub const EMR_POLYBEZIERTO16 : u32 = 88;
pub const EMR_POLYLINETO16 : u32 = 89;
pub const EMR_POLYPOLYLINE16 : u32 = 90;
pub const EMR_POLYPOLYGON16 : u32 = 91;
pub const EMR_POLYDRAW16 : u32 = 92;
pub const EMR_CREATEMONOBRUSH : u32 = 93;
pub const EMR_CREATEDIBPATTERNBRUSHPT : u32 = 94;
pub const EMR_EXTCREATEPEN : u32 = 95;
pub const EMR_POLYTEXTOUTA : u32 = 96;
pub const EMR_POLYTEXTOUTW : u32 = 97;
pub const EMR_SETICMMODE : u32 = 98;
pub const EMR_CREATECOLORSPACE : u32 = 99;
pub const EMR_SETCOLORSPACE : u32 = 100;
pub const EMR_DELETECOLORSPACE : u32 = 101;
pub const EMR_GLSRECORD : u32 = 102;
pub const EMR_GLSBOUNDEDRECORD : u32 = 103;
pub const EMR_PIXELFORMAT : u32 = 104;
pub const EMR_RESERVED_105 : u32 = 105;
pub const EMR_RESERVED_106 : u32 = 106;
pub const EMR_RESERVED_107 : u32 = 107;
pub const EMR_RESERVED_108 : u32 = 108;
pub const EMR_RESERVED_109 : u32 = 109;
pub const EMR_RESERVED_110 : u32 = 110;
pub const EMR_COLORCORRECTPALETTE : u32 = 111;
pub const EMR_SETICMPROFILEA : u32 = 112;
pub const EMR_SETICMPROFILEW : u32 = 113;
pub const EMR_ALPHABLEND : u32 = 114;
pub const EMR_SETLAYOUT : u32 = 115;
pub const EMR_TRANSPARENTBLT : u32 = 116;
pub const EMR_RESERVED_117 : u32 = 117;
pub const EMR_GRADIENTFILL : u32 = 118;
pub const EMR_RESERVED_119 : u32 = 119;
pub const EMR_RESERVED_120 : u32 = 120;
pub const EMR_COLORMATCHTOTARGETW : u32 = 121;
pub const EMR_CREATECOLORSPACEW : u32 = 122;
pub const EMR_MIN : u32 = 1;
pub const EMR_MAX : u32 = 122;
pub const SETICMPROFILE_EMBEDED : u32 = 1;
pub const CREATECOLORSPACE_EMBEDED : u32 = 1;
pub const COLORMATCHTOTARGET_EMBEDED : u32 = 1;
pub const GDICOMMENT_IDENTIFIER : u32 = 1128875079;
pub const GDICOMMENT_WINDOWS_METAFILE : u32 = 2147483649;
pub const GDICOMMENT_BEGINGROUP : u32 = 2;
pub const GDICOMMENT_ENDGROUP : u32 = 3;
pub const GDICOMMENT_MULTIFORMATS : u32 = 1073741828;
pub const EPS_SIGNATURE : u32 = 1179865157;
pub const GDICOMMENT_UNICODE_STRING : u32 = 64;
pub const GDICOMMENT_UNICODE_END : u32 = 128;
pub const WGL_FONT_LINES : u32 = 0;
pub const WGL_FONT_POLYGONS : u32 = 1;
pub const LPD_DOUBLEBUFFER : u32 = 1;
pub const LPD_STEREO : u32 = 2;
pub const LPD_SUPPORT_GDI : u32 = 16;
pub const LPD_SUPPORT_OPENGL : u32 = 32;
pub const LPD_SHARE_DEPTH : u32 = 64;
pub const LPD_SHARE_STENCIL : u32 = 128;
pub const LPD_SHARE_ACCUM : u32 = 256;
pub const LPD_SWAP_EXCHANGE : u32 = 512;
pub const LPD_SWAP_COPY : u32 = 1024;
pub const LPD_TRANSPARENT : u32 = 4096;
pub const LPD_TYPE_RGBA : u32 = 0;
pub const LPD_TYPE_COLORINDEX : u32 = 1;
pub const WGL_SWAP_OVERLAY1 : u32 = 2;
pub const WGL_SWAP_OVERLAY2 : u32 = 4;
pub const WGL_SWAP_OVERLAY3 : u32 = 8;
pub const WGL_SWAP_OVERLAY4 : u32 = 16;
pub const WGL_SWAP_OVERLAY5 : u32 = 32;
pub const WGL_SWAP_OVERLAY6 : u32 = 64;
pub const WGL_SWAP_OVERLAY7 : u32 = 128;
pub const WGL_SWAP_OVERLAY8 : u32 = 256;
pub const WGL_SWAP_OVERLAY9 : u32 = 512;
pub const WGL_SWAP_OVERLAY10 : u32 = 1024;
pub const WGL_SWAP_OVERLAY11 : u32 = 2048;
pub const WGL_SWAP_OVERLAY12 : u32 = 4096;
pub const WGL_SWAP_OVERLAY13 : u32 = 8192;
pub const WGL_SWAP_OVERLAY14 : u32 = 16384;
pub const WGL_SWAP_OVERLAY15 : u32 = 32768;
pub const WGL_SWAP_UNDERLAY1 : u32 = 65536;
pub const WGL_SWAP_UNDERLAY2 : u32 = 131072;
pub const WGL_SWAP_UNDERLAY3 : u32 = 262144;
pub const WGL_SWAP_UNDERLAY4 : u32 = 524288;
pub const WGL_SWAP_UNDERLAY5 : u32 = 1048576;
pub const WGL_SWAP_UNDERLAY6 : u32 = 2097152;
pub const WGL_SWAP_UNDERLAY7 : u32 = 4194304;
pub const WGL_SWAP_UNDERLAY8 : u32 = 8388608;
pub const WGL_SWAP_UNDERLAY9 : u32 = 16777216;
pub const WGL_SWAP_UNDERLAY10 : u32 = 33554432;
pub const WGL_SWAP_UNDERLAY11 : u32 = 67108864;
pub const WGL_SWAP_UNDERLAY12 : u32 = 134217728;
pub const WGL_SWAP_UNDERLAY13 : u32 = 268435456;
pub const WGL_SWAP_UNDERLAY14 : u32 = 536870912;
pub const WGL_SWAP_UNDERLAY15 : u32 = 1073741824;
pub const WGL_SWAPMULTIPLE_MAX : u32 = 16;
pub const SELECTDIB : u32 = 41;
pub const TTFCFP_SUBSET : u32 = 0;
pub const TTFCFP_SUBSET1 : u32 = 1;
pub const TTFCFP_DELTA : u32 = 2;
pub const TTFCFP_APPLE_PLATFORMID : u32 = 1;
pub const TTFCFP_MS_PLATFORMID : u32 = 3;
pub const TTFCFP_DONT_CARE : u32 = 65535;
pub const TTFCFP_LANG_KEEP_ALL : u32 = 0;
pub const TTFCFP_FLAGS_SUBSET : u32 = 1;
pub const TTFCFP_FLAGS_COMPRESS : u32 = 2;
pub const TTFCFP_FLAGS_TTC : u32 = 4;
pub const TTFCFP_FLAGS_GLYPHLIST : u32 = 8;
pub const TTFMFP_SUBSET : u32 = 0;
pub const TTFMFP_SUBSET1 : u32 = 1;
pub const TTFMFP_DELTA : u32 = 2;
pub const ERR_GENERIC : u32 = 1000;
pub const ERR_READOUTOFBOUNDS : u32 = 1001;
pub const ERR_WRITEOUTOFBOUNDS : u32 = 1002;
pub const ERR_READCONTROL : u32 = 1003;
pub const ERR_WRITECONTROL : u32 = 1004;
pub const ERR_MEM : u32 = 1005;
pub const ERR_FORMAT : u32 = 1006;
pub const ERR_WOULD_GROW : u32 = 1007;
pub const ERR_VERSION : u32 = 1008;
pub const ERR_NO_GLYPHS : u32 = 1009;
pub const ERR_INVALID_MERGE_FORMATS : u32 = 1010;
pub const ERR_INVALID_MERGE_CHECKSUMS : u32 = 1011;
pub const ERR_INVALID_MERGE_NUMGLYPHS : u32 = 1012;
pub const ERR_INVALID_DELTA_FORMAT : u32 = 1013;
pub const ERR_NOT_TTC : u32 = 1014;
pub const ERR_INVALID_TTC_INDEX : u32 = 1015;
pub const ERR_MISSING_CMAP : u32 = 1030;
pub const ERR_MISSING_GLYF : u32 = 1031;
pub const ERR_MISSING_HEAD : u32 = 1032;
pub const ERR_MISSING_HHEA : u32 = 1033;
pub const ERR_MISSING_HMTX : u32 = 1034;
pub const ERR_MISSING_LOCA : u32 = 1035;
pub const ERR_MISSING_MAXP : u32 = 1036;
pub const ERR_MISSING_NAME : u32 = 1037;
pub const ERR_MISSING_POST : u32 = 1038;
pub const ERR_MISSING_OS2 : u32 = 1039;
pub const ERR_MISSING_VHEA : u32 = 1040;
pub const ERR_MISSING_VMTX : u32 = 1041;
pub const ERR_MISSING_HHEA_OR_VHEA : u32 = 1042;
pub const ERR_MISSING_HMTX_OR_VMTX : u32 = 1043;
pub const ERR_MISSING_EBDT : u32 = 1044;
pub const ERR_INVALID_CMAP : u32 = 1060;
pub const ERR_INVALID_GLYF : u32 = 1061;
pub const ERR_INVALID_HEAD : u32 = 1062;
pub const ERR_INVALID_HHEA : u32 = 1063;
pub const ERR_INVALID_HMTX : u32 = 1064;
pub const ERR_INVALID_LOCA : u32 = 1065;
pub const ERR_INVALID_MAXP : u32 = 1066;
pub const ERR_INVALID_NAME : u32 = 1067;
pub const ERR_INVALID_POST : u32 = 1068;
pub const ERR_INVALID_OS2 : u32 = 1069;
pub const ERR_INVALID_VHEA : u32 = 1070;
pub const ERR_INVALID_VMTX : u32 = 1071;
pub const ERR_INVALID_HHEA_OR_VHEA : u32 = 1072;
pub const ERR_INVALID_HMTX_OR_VMTX : u32 = 1073;
pub const ERR_INVALID_TTO : u32 = 1080;
pub const ERR_INVALID_GSUB : u32 = 1081;
pub const ERR_INVALID_GPOS : u32 = 1082;
pub const ERR_INVALID_GDEF : u32 = 1083;
pub const ERR_INVALID_JSTF : u32 = 1084;
pub const ERR_INVALID_BASE : u32 = 1085;
pub const ERR_INVALID_EBLC : u32 = 1086;
pub const ERR_INVALID_LTSH : u32 = 1087;
pub const ERR_INVALID_VDMX : u32 = 1088;
pub const ERR_INVALID_HDMX : u32 = 1089;
pub const ERR_PARAMETER0 : u32 = 1100;
pub const ERR_PARAMETER1 : u32 = 1101;
pub const ERR_PARAMETER2 : u32 = 1102;
pub const ERR_PARAMETER3 : u32 = 1103;
pub const ERR_PARAMETER4 : u32 = 1104;
pub const ERR_PARAMETER5 : u32 = 1105;
pub const ERR_PARAMETER6 : u32 = 1106;
pub const ERR_PARAMETER7 : u32 = 1107;
pub const ERR_PARAMETER8 : u32 = 1108;
pub const ERR_PARAMETER9 : u32 = 1109;
pub const ERR_PARAMETER10 : u32 = 1110;
pub const ERR_PARAMETER11 : u32 = 1111;
pub const ERR_PARAMETER12 : u32 = 1112;
pub const ERR_PARAMETER13 : u32 = 1113;
pub const ERR_PARAMETER14 : u32 = 1114;
pub const ERR_PARAMETER15 : u32 = 1115;
pub const ERR_PARAMETER16 : u32 = 1116;
pub const CHARSET_DEFAULT : u32 = 1;
pub const CHARSET_GLYPHIDX : u32 = 3;
pub const TTEMBED_FAILIFVARIATIONSIMULATED : u32 = 16;
pub const TTEMBED_WEBOBJECT : u32 = 128;
pub const TTEMBED_XORENCRYPTDATA : u32 = 268435456;
pub const TTEMBED_VARIATIONSIMULATED : u32 = 1;
pub const TTEMBED_EUDCEMBEDDED : u32 = 2;
pub const TTEMBED_SUBSETCANCEL : u32 = 4;
pub const TTLOAD_PRIVATE : u32 = 1;
pub const TTLOAD_EUDC_OVERWRITE : u32 = 2;
pub const TTLOAD_EUDC_SET : u32 = 4;
pub const TTDELETE_DONTREMOVEFONT : u32 = 1;
pub const E_NONE : i32 = 0;
pub const E_API_NOTIMPL : i32 = 1;
pub const E_CHARCODECOUNTINVALID : i32 = 2;
pub const E_CHARCODESETINVALID : i32 = 3;
pub const E_DEVICETRUETYPEFONT : i32 = 4;
pub const E_HDCINVALID : i32 = 6;
pub const E_NOFREEMEMORY : i32 = 7;
pub const E_FONTREFERENCEINVALID : i32 = 8;
pub const E_NOTATRUETYPEFONT : i32 = 10;
pub const E_ERRORACCESSINGFONTDATA : i32 = 12;
pub const E_ERRORACCESSINGFACENAME : i32 = 13;
pub const E_ERRORUNICODECONVERSION : i32 = 17;
pub const E_ERRORCONVERTINGCHARS : i32 = 18;
pub const E_EXCEPTION : i32 = 19;
pub const E_RESERVEDPARAMNOTNULL : i32 = 20;
pub const E_CHARSETINVALID : i32 = 21;
pub const E_FILE_NOT_FOUND : i32 = 23;
pub const E_TTC_INDEX_OUT_OF_RANGE : i32 = 24;
pub const E_INPUTPARAMINVALID : i32 = 25;
pub const E_ERRORCOMPRESSINGFONTDATA : i32 = 256;
pub const E_FONTDATAINVALID : i32 = 258;
pub const E_NAMECHANGEFAILED : i32 = 259;
pub const E_FONTNOTEMBEDDABLE : i32 = 260;
pub const E_PRIVSINVALID : i32 = 261;
pub const E_SUBSETTINGFAILED : i32 = 262;
pub const E_READFROMSTREAMFAILED : i32 = 263;
pub const E_SAVETOSTREAMFAILED : i32 = 264;
pub const E_NOOS2 : i32 = 265;
pub const E_T2NOFREEMEMORY : i32 = 266;
pub const E_ERRORREADINGFONTDATA : i32 = 267;
pub const E_FLAGSINVALID : i32 = 268;
pub const E_ERRORCREATINGFONTFILE : i32 = 269;
pub const E_FONTALREADYEXISTS : i32 = 270;
pub const E_FONTNAMEALREADYEXISTS : i32 = 271;
pub const E_FONTINSTALLFAILED : i32 = 272;
pub const E_ERRORDECOMPRESSINGFONTDATA : i32 = 273;
pub const E_ERRORACCESSINGEXCLUDELIST : i32 = 274;
pub const E_FACENAMEINVALID : i32 = 275;
pub const E_STREAMINVALID : i32 = 276;
pub const E_STATUSINVALID : i32 = 277;
pub const E_PRIVSTATUSINVALID : i32 = 278;
pub const E_PERMISSIONSINVALID : i32 = 279;
pub const E_PBENABLEDINVALID : i32 = 280;
pub const E_SUBSETTINGEXCEPTION : i32 = 281;
pub const E_SUBSTRING_TEST_FAIL : i32 = 282;
pub const E_FONTVARIATIONSIMULATED : i32 = 283;
pub const E_FONTFAMILYNAMENOTINFULL : i32 = 285;
pub const E_ADDFONTFAILED : i32 = 512;
pub const E_COULDNTCREATETEMPFILE : i32 = 513;
pub const E_FONTFILECREATEFAILED : i32 = 515;
pub const E_WINDOWSAPI : i32 = 516;
pub const E_FONTFILENOTFOUND : i32 = 517;
pub const E_RESOURCEFILECREATEFAILED : i32 = 518;
pub const E_ERROREXPANDINGFONTDATA : i32 = 519;
pub const E_ERRORGETTINGDC : i32 = 520;
pub const E_EXCEPTIONINDECOMPRESSION : i32 = 521;
pub const E_EXCEPTIONINCOMPRESSION : i32 = 522;

//--------------------------------------------------------------------------------
// Section: Types (255)
//--------------------------------------------------------------------------------
// TODO: this type has a FreeFunc 'DeleteObject', what can Zig do with this information?
pub const HBITMAP = ?*c_void;

// TODO: this type has a FreeFunc 'DeleteObject', what can Zig do with this information?
pub const HBRUSH = ?*c_void;

// TODO: this type has a FreeFunc 'DeleteDC', what can Zig do with this information?
pub const HDC = ?*c_void;

// TODO: this type has a FreeFunc 'DeleteEnhMetaFile', what can Zig do with this information?
pub const HdcMetdataEnhFileHandle = ?*c_void;

// TODO: this type has a FreeFunc 'DeleteMetaFile', what can Zig do with this information?
pub const HdcMetdataFileHandle = ?*c_void;

// TODO: this type has a FreeFunc 'DeleteEnhMetaFile', what can Zig do with this information?
pub const HENHMETAFILE = ?*c_void;

// TODO: this type has a FreeFunc 'DeleteObject', what can Zig do with this information?
pub const HFONT = ?*c_void;

pub const HGDIOBJ = ?*c_void;

// TODO: this type has a FreeFunc 'DeleteMetaFile', what can Zig do with this information?
pub const HMETAFILE = ?*c_void;

pub const HMONITOR = ?*c_void;

// TODO: this type has a FreeFunc 'DeleteObject', what can Zig do with this information?
pub const HPALETTE = ?*c_void;

// TODO: this type has a FreeFunc 'DeleteObject', what can Zig do with this information?
pub const HPEN = ?*c_void;

// TODO: this type has a FreeFunc 'DeleteObject', what can Zig do with this information?
pub const HRGN = ?*c_void;

pub const R2_MODE = extern enum(i32) {
    BLACK = 1,
    NOTMERGEPEN = 2,
    MASKNOTPEN = 3,
    NOTCOPYPEN = 4,
    MASKPENNOT = 5,
    NOT = 6,
    XORPEN = 7,
    NOTMASKPEN = 8,
    MASKPEN = 9,
    NOTXORPEN = 10,
    NOP = 11,
    MERGENOTPEN = 12,
    COPYPEN = 13,
    MERGEPENNOT = 14,
    MERGEPEN = 15,
    WHITE = 16,
    LAST = 16,
};
pub const R2_BLACK = R2_MODE.BLACK;
pub const R2_NOTMERGEPEN = R2_MODE.NOTMERGEPEN;
pub const R2_MASKNOTPEN = R2_MODE.MASKNOTPEN;
pub const R2_NOTCOPYPEN = R2_MODE.NOTCOPYPEN;
pub const R2_MASKPENNOT = R2_MODE.MASKPENNOT;
pub const R2_NOT = R2_MODE.NOT;
pub const R2_XORPEN = R2_MODE.XORPEN;
pub const R2_NOTMASKPEN = R2_MODE.NOTMASKPEN;
pub const R2_MASKPEN = R2_MODE.MASKPEN;
pub const R2_NOTXORPEN = R2_MODE.NOTXORPEN;
pub const R2_NOP = R2_MODE.NOP;
pub const R2_MERGENOTPEN = R2_MODE.MERGENOTPEN;
pub const R2_COPYPEN = R2_MODE.COPYPEN;
pub const R2_MERGEPENNOT = R2_MODE.MERGEPENNOT;
pub const R2_MERGEPEN = R2_MODE.MERGEPEN;
pub const R2_WHITE = R2_MODE.WHITE;
pub const R2_LAST = R2_MODE.LAST;

pub const RGN_COMBINE_MODE = extern enum(i32) {
    AND = 1,
    OR = 2,
    XOR = 3,
    DIFF = 4,
    COPY = 5,
    MIN = 1,
    MAX = 5,
};
pub const RGN_AND = RGN_COMBINE_MODE.AND;
pub const RGN_OR = RGN_COMBINE_MODE.OR;
pub const RGN_XOR = RGN_COMBINE_MODE.XOR;
pub const RGN_DIFF = RGN_COMBINE_MODE.DIFF;
pub const RGN_COPY = RGN_COMBINE_MODE.COPY;
pub const RGN_MIN = RGN_COMBINE_MODE.MIN;
pub const RGN_MAX = RGN_COMBINE_MODE.MAX;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const ETO_OPTIONS = extern enum(u32) {
    OPAQUE = 2,
    CLIPPED = 4,
    GLYPH_INDEX = 16,
    RTLREADING = 128,
    NUMERICSLOCAL = 1024,
    NUMERICSLATIN = 2048,
    IGNORELANGUAGE = 4096,
    PDY = 8192,
    REVERSE_INDEX_MAP = 65536,
    _,
};
pub const ETO_OPAQUE = ETO_OPTIONS.OPAQUE;
pub const ETO_CLIPPED = ETO_OPTIONS.CLIPPED;
pub const ETO_GLYPH_INDEX = ETO_OPTIONS.GLYPH_INDEX;
pub const ETO_RTLREADING = ETO_OPTIONS.RTLREADING;
pub const ETO_NUMERICSLOCAL = ETO_OPTIONS.NUMERICSLOCAL;
pub const ETO_NUMERICSLATIN = ETO_OPTIONS.NUMERICSLATIN;
pub const ETO_IGNORELANGUAGE = ETO_OPTIONS.IGNORELANGUAGE;
pub const ETO_PDY = ETO_OPTIONS.PDY;
pub const ETO_REVERSE_INDEX_MAP = ETO_OPTIONS.REVERSE_INDEX_MAP;

pub const OBJ_TYPE = extern enum(i32) {
    PEN = 1,
    BRUSH = 2,
    DC = 3,
    METADC = 4,
    PAL = 5,
    FONT = 6,
    BITMAP = 7,
    REGION = 8,
    METAFILE = 9,
    MEMDC = 10,
    EXTPEN = 11,
    ENHMETADC = 12,
    ENHMETAFILE = 13,
    COLORSPACE = 14,
};
pub const OBJ_PEN = OBJ_TYPE.PEN;
pub const OBJ_BRUSH = OBJ_TYPE.BRUSH;
pub const OBJ_DC = OBJ_TYPE.DC;
pub const OBJ_METADC = OBJ_TYPE.METADC;
pub const OBJ_PAL = OBJ_TYPE.PAL;
pub const OBJ_FONT = OBJ_TYPE.FONT;
pub const OBJ_BITMAP = OBJ_TYPE.BITMAP;
pub const OBJ_REGION = OBJ_TYPE.REGION;
pub const OBJ_METAFILE = OBJ_TYPE.METAFILE;
pub const OBJ_MEMDC = OBJ_TYPE.MEMDC;
pub const OBJ_EXTPEN = OBJ_TYPE.EXTPEN;
pub const OBJ_ENHMETADC = OBJ_TYPE.ENHMETADC;
pub const OBJ_ENHMETAFILE = OBJ_TYPE.ENHMETAFILE;
pub const OBJ_COLORSPACE = OBJ_TYPE.COLORSPACE;

pub const ROP_CODE = extern enum(u32) {
    SRCCOPY = 13369376,
    SRCPAINT = 15597702,
    SRCAND = 8913094,
    SRCINVERT = 6684742,
    SRCERASE = 4457256,
    NOTSRCCOPY = 3342344,
    NOTSRCERASE = 1114278,
    MERGECOPY = 12583114,
    MERGEPAINT = 12255782,
    PATCOPY = 15728673,
    PATPAINT = 16452105,
    PATINVERT = 5898313,
    DSTINVERT = 5570569,
    BLACKNESS = 66,
    WHITENESS = 16711778,
    NOMIRRORBITMAP = 2147483648,
    CAPTUREBLT = 1073741824,
};
pub const SRCCOPY = ROP_CODE.SRCCOPY;
pub const SRCPAINT = ROP_CODE.SRCPAINT;
pub const SRCAND = ROP_CODE.SRCAND;
pub const SRCINVERT = ROP_CODE.SRCINVERT;
pub const SRCERASE = ROP_CODE.SRCERASE;
pub const NOTSRCCOPY = ROP_CODE.NOTSRCCOPY;
pub const NOTSRCERASE = ROP_CODE.NOTSRCERASE;
pub const MERGECOPY = ROP_CODE.MERGECOPY;
pub const MERGEPAINT = ROP_CODE.MERGEPAINT;
pub const PATCOPY = ROP_CODE.PATCOPY;
pub const PATPAINT = ROP_CODE.PATPAINT;
pub const PATINVERT = ROP_CODE.PATINVERT;
pub const DSTINVERT = ROP_CODE.DSTINVERT;
pub const BLACKNESS = ROP_CODE.BLACKNESS;
pub const WHITENESS = ROP_CODE.WHITENESS;
pub const NOMIRRORBITMAP = ROP_CODE.NOMIRRORBITMAP;
pub const CAPTUREBLT = ROP_CODE.CAPTUREBLT;

pub const DIB_USAGE = extern enum(u32) {
    RGB_COLORS = 0,
    PAL_COLORS = 1,
};
pub const DIB_RGB_COLORS = DIB_USAGE.RGB_COLORS;
pub const DIB_PAL_COLORS = DIB_USAGE.PAL_COLORS;

pub const XFORM = extern struct {
    eM11: f32,
    eM12: f32,
    eM21: f32,
    eM22: f32,
    eDx: f32,
    eDy: f32,
};

pub const BITMAP = extern struct {
    bmType: i32,
    bmWidth: i32,
    bmHeight: i32,
    bmWidthBytes: i32,
    bmPlanes: u16,
    bmBitsPixel: u16,
    bmBits: *c_void,
};

pub const RGBTRIPLE = extern struct {
    rgbtBlue: u8,
    rgbtGreen: u8,
    rgbtRed: u8,
};

pub const RGBQUAD = extern struct {
    rgbBlue: u8,
    rgbGreen: u8,
    rgbRed: u8,
    rgbReserved: u8,
};

pub const BITMAPCOREHEADER = extern struct {
    bcSize: u32,
    bcWidth: u16,
    bcHeight: u16,
    bcPlanes: u16,
    bcBitCount: u16,
};

pub const BITMAPV4HEADER = extern struct {
    bV4Size: u32,
    bV4Width: i32,
    bV4Height: i32,
    bV4Planes: u16,
    bV4BitCount: u16,
    bV4V4Compression: u32,
    bV4SizeImage: u32,
    bV4XPelsPerMeter: i32,
    bV4YPelsPerMeter: i32,
    bV4ClrUsed: u32,
    bV4ClrImportant: u32,
    bV4RedMask: u32,
    bV4GreenMask: u32,
    bV4BlueMask: u32,
    bV4AlphaMask: u32,
    bV4CSType: u32,
    bV4Endpoints: CIEXYZTRIPLE,
    bV4GammaRed: u32,
    bV4GammaGreen: u32,
    bV4GammaBlue: u32,
};

pub const BITMAPV5HEADER = extern struct {
    bV5Size: u32,
    bV5Width: i32,
    bV5Height: i32,
    bV5Planes: u16,
    bV5BitCount: u16,
    bV5Compression: u32,
    bV5SizeImage: u32,
    bV5XPelsPerMeter: i32,
    bV5YPelsPerMeter: i32,
    bV5ClrUsed: u32,
    bV5ClrImportant: u32,
    bV5RedMask: u32,
    bV5GreenMask: u32,
    bV5BlueMask: u32,
    bV5AlphaMask: u32,
    bV5CSType: u32,
    bV5Endpoints: CIEXYZTRIPLE,
    bV5GammaRed: u32,
    bV5GammaGreen: u32,
    bV5GammaBlue: u32,
    bV5Intent: u32,
    bV5ProfileData: u32,
    bV5ProfileSize: u32,
    bV5Reserved: u32,
};

pub const BITMAPINFO = extern struct {
    bmiHeader: BITMAPINFOHEADER,
    bmiColors: [1]RGBQUAD,
};

pub const BITMAPCOREINFO = extern struct {
    bmciHeader: BITMAPCOREHEADER,
    bmciColors: [1]RGBTRIPLE,
};

pub const BITMAPFILEHEADER = extern struct {
    bfType: u16,
    bfSize: u32,
    bfReserved1: u16,
    bfReserved2: u16,
    bfOffBits: u32,
};

pub const HANDLETABLE = extern struct {
    objectHandle: [1]?*c_void,
};

pub const METARECORD = extern struct {
    rdSize: u32,
    rdFunction: u16,
    rdParm: [1]u16,
};

pub const METAHEADER = extern struct {
    mtType: u16,
    mtHeaderSize: u16,
    mtVersion: u16,
    mtSize: u32,
    mtNoObjects: u16,
    mtMaxRecord: u32,
    mtNoParameters: u16,
};

pub const ENHMETARECORD = extern struct {
    iType: u32,
    nSize: u32,
    dParm: [1]u32,
};

pub const ENHMETAHEADER = extern struct {
    iType: u32,
    nSize: u32,
    rclBounds: RECTL,
    rclFrame: RECTL,
    dSignature: u32,
    nVersion: u32,
    nBytes: u32,
    nRecords: u32,
    nHandles: u16,
    sReserved: u16,
    nDescription: u32,
    offDescription: u32,
    nPalEntries: u32,
    szlDevice: SIZE,
    szlMillimeters: SIZE,
    cbPixelFormat: u32,
    offPixelFormat: u32,
    bOpenGL: u32,
    szlMicrometers: SIZE,
};

pub const TEXTMETRICA = extern struct {
    tmHeight: i32,
    tmAscent: i32,
    tmDescent: i32,
    tmInternalLeading: i32,
    tmExternalLeading: i32,
    tmAveCharWidth: i32,
    tmMaxCharWidth: i32,
    tmWeight: i32,
    tmOverhang: i32,
    tmDigitizedAspectX: i32,
    tmDigitizedAspectY: i32,
    tmFirstChar: u8,
    tmLastChar: u8,
    tmDefaultChar: u8,
    tmBreakChar: u8,
    tmItalic: u8,
    tmUnderlined: u8,
    tmStruckOut: u8,
    tmPitchAndFamily: u8,
    tmCharSet: u8,
};

pub const TEXTMETRICW = extern struct {
    tmHeight: i32,
    tmAscent: i32,
    tmDescent: i32,
    tmInternalLeading: i32,
    tmExternalLeading: i32,
    tmAveCharWidth: i32,
    tmMaxCharWidth: i32,
    tmWeight: i32,
    tmOverhang: i32,
    tmDigitizedAspectX: i32,
    tmDigitizedAspectY: i32,
    tmFirstChar: u16,
    tmLastChar: u16,
    tmDefaultChar: u16,
    tmBreakChar: u16,
    tmItalic: u8,
    tmUnderlined: u8,
    tmStruckOut: u8,
    tmPitchAndFamily: u8,
    tmCharSet: u8,
};

pub const NEWTEXTMETRICA = extern struct {
    tmHeight: i32,
    tmAscent: i32,
    tmDescent: i32,
    tmInternalLeading: i32,
    tmExternalLeading: i32,
    tmAveCharWidth: i32,
    tmMaxCharWidth: i32,
    tmWeight: i32,
    tmOverhang: i32,
    tmDigitizedAspectX: i32,
    tmDigitizedAspectY: i32,
    tmFirstChar: u8,
    tmLastChar: u8,
    tmDefaultChar: u8,
    tmBreakChar: u8,
    tmItalic: u8,
    tmUnderlined: u8,
    tmStruckOut: u8,
    tmPitchAndFamily: u8,
    tmCharSet: u8,
    ntmFlags: u32,
    ntmSizeEM: u32,
    ntmCellHeight: u32,
    ntmAvgWidth: u32,
};

pub const NEWTEXTMETRICW = extern struct {
    tmHeight: i32,
    tmAscent: i32,
    tmDescent: i32,
    tmInternalLeading: i32,
    tmExternalLeading: i32,
    tmAveCharWidth: i32,
    tmMaxCharWidth: i32,
    tmWeight: i32,
    tmOverhang: i32,
    tmDigitizedAspectX: i32,
    tmDigitizedAspectY: i32,
    tmFirstChar: u16,
    tmLastChar: u16,
    tmDefaultChar: u16,
    tmBreakChar: u16,
    tmItalic: u8,
    tmUnderlined: u8,
    tmStruckOut: u8,
    tmPitchAndFamily: u8,
    tmCharSet: u8,
    ntmFlags: u32,
    ntmSizeEM: u32,
    ntmCellHeight: u32,
    ntmAvgWidth: u32,
};

pub const NEWTEXTMETRICEXA = extern struct {
    ntmTm: NEWTEXTMETRICA,
    ntmFontSig: FONTSIGNATURE,
};

pub const NEWTEXTMETRICEXW = extern struct {
    ntmTm: NEWTEXTMETRICW,
    ntmFontSig: FONTSIGNATURE,
};

pub const PELARRAY = extern struct {
    paXCount: i32,
    paYCount: i32,
    paXExt: i32,
    paYExt: i32,
    paRGBs: u8,
};

pub const LOGBRUSH = extern struct {
    lbStyle: u32,
    lbColor: u32,
    lbHatch: ?*c_void,
};

pub const LOGBRUSH32 = extern struct {
    lbStyle: u32,
    lbColor: u32,
    lbHatch: u32,
};

pub const LOGPEN = extern struct {
    lopnStyle: u32,
    lopnWidth: POINT,
    lopnColor: u32,
};

pub const EXTLOGPEN = extern struct {
    elpPenStyle: u32,
    elpWidth: u32,
    elpBrushStyle: u32,
    elpColor: u32,
    elpHatch: ?*c_void,
    elpNumEntries: u32,
    elpStyleEntry: [1]u32,
};

pub const EXTLOGPEN32 = extern struct {
    elpPenStyle: u32,
    elpWidth: u32,
    elpBrushStyle: u32,
    elpColor: u32,
    elpHatch: u32,
    elpNumEntries: u32,
    elpStyleEntry: [1]u32,
};

pub const PALETTEENTRY = extern struct {
    peRed: u8,
    peGreen: u8,
    peBlue: u8,
    peFlags: u8,
};

pub const LOGPALETTE = extern struct {
    palVersion: u16,
    palNumEntries: u16,
    palPalEntry: [1]PALETTEENTRY,
};

pub const ENUMLOGFONTA = extern struct {
    elfLogFont: LOGFONTA,
    elfFullName: [64]u8,
    elfStyle: [32]u8,
};

pub const ENUMLOGFONTW = extern struct {
    elfLogFont: LOGFONTW,
    elfFullName: [64]u16,
    elfStyle: [32]u16,
};

pub const ENUMLOGFONTEXA = extern struct {
    elfLogFont: LOGFONTA,
    elfFullName: [64]u8,
    elfStyle: [32]u8,
    elfScript: [32]u8,
};

pub const ENUMLOGFONTEXW = extern struct {
    elfLogFont: LOGFONTW,
    elfFullName: [64]u16,
    elfStyle: [32]u16,
    elfScript: [32]u16,
};

pub const PANOSE = extern struct {
    bFamilyType: u8,
    bSerifStyle: u8,
    bWeight: u8,
    bProportion: u8,
    bContrast: u8,
    bStrokeVariation: u8,
    bArmStyle: u8,
    bLetterform: u8,
    bMidline: u8,
    bXHeight: u8,
};

pub const EXTLOGFONTA = extern struct {
    elfLogFont: LOGFONTA,
    elfFullName: [64]u8,
    elfStyle: [32]u8,
    elfVersion: u32,
    elfStyleSize: u32,
    elfMatch: u32,
    elfReserved: u32,
    elfVendorId: [4]u8,
    elfCulture: u32,
    elfPanose: PANOSE,
};

pub const EXTLOGFONTW = extern struct {
    elfLogFont: LOGFONTW,
    elfFullName: [64]u16,
    elfStyle: [32]u16,
    elfVersion: u32,
    elfStyleSize: u32,
    elfMatch: u32,
    elfReserved: u32,
    elfVendorId: [4]u8,
    elfCulture: u32,
    elfPanose: PANOSE,
};

pub const DISPLAY_DEVICEA = extern struct {
    cb: u32,
    DeviceName: [32]i8,
    DeviceString: [128]i8,
    StateFlags: u32,
    DeviceID: [128]i8,
    DeviceKey: [128]i8,
};

pub const DISPLAY_DEVICEW = extern struct {
    cb: u32,
    DeviceName: [32]u16,
    DeviceString: [128]u16,
    StateFlags: u32,
    DeviceID: [128]u16,
    DeviceKey: [128]u16,
};

pub const DISPLAYCONFIG_COLOR_ENCODING = extern enum(i32) {
    RGB = 0,
    YCBCR444 = 1,
    YCBCR422 = 2,
    YCBCR420 = 3,
    INTENSITY = 4,
    FORCE_UINT32 = -1,
};
pub const DISPLAYCONFIG_COLOR_ENCODING_RGB = DISPLAYCONFIG_COLOR_ENCODING.RGB;
pub const DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = DISPLAYCONFIG_COLOR_ENCODING.YCBCR444;
pub const DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = DISPLAYCONFIG_COLOR_ENCODING.YCBCR422;
pub const DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = DISPLAYCONFIG_COLOR_ENCODING.YCBCR420;
pub const DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = DISPLAYCONFIG_COLOR_ENCODING.INTENSITY;
pub const DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = DISPLAYCONFIG_COLOR_ENCODING.FORCE_UINT32;

pub const DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    Anonymous: DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO._Anonymous_e__Union,
    colorEncoding: DISPLAYCONFIG_COLOR_ENCODING,
    bitsPerColorChannel: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    Anonymous: DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DISPLAYCONFIG_SDR_WHITE_LEVEL = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    SDRWhiteLevel: u32,
};

pub const RGNDATAHEADER = extern struct {
    dwSize: u32,
    iType: u32,
    nCount: u32,
    nRgnSize: u32,
    rcBound: RECT,
};

pub const RGNDATA = extern struct {
    rdh: RGNDATAHEADER,
    Buffer: [1]i8,
};

pub const ABC = extern struct {
    abcA: i32,
    abcB: u32,
    abcC: i32,
};

pub const ABCFLOAT = extern struct {
    abcfA: f32,
    abcfB: f32,
    abcfC: f32,
};

pub const OUTLINETEXTMETRICA = extern struct {
    otmSize: u32,
    otmTextMetrics: TEXTMETRICA,
    otmFiller: u8,
    otmPanoseNumber: PANOSE,
    otmfsSelection: u32,
    otmfsType: u32,
    otmsCharSlopeRise: i32,
    otmsCharSlopeRun: i32,
    otmItalicAngle: i32,
    otmEMSquare: u32,
    otmAscent: i32,
    otmDescent: i32,
    otmLineGap: u32,
    otmsCapEmHeight: u32,
    otmsXHeight: u32,
    otmrcFontBox: RECT,
    otmMacAscent: i32,
    otmMacDescent: i32,
    otmMacLineGap: u32,
    otmusMinimumPPEM: u32,
    otmptSubscriptSize: POINT,
    otmptSubscriptOffset: POINT,
    otmptSuperscriptSize: POINT,
    otmptSuperscriptOffset: POINT,
    otmsStrikeoutSize: u32,
    otmsStrikeoutPosition: i32,
    otmsUnderscoreSize: i32,
    otmsUnderscorePosition: i32,
    otmpFamilyName: PSTR,
    otmpFaceName: PSTR,
    otmpStyleName: PSTR,
    otmpFullName: PSTR,
};

pub const OUTLINETEXTMETRICW = extern struct {
    otmSize: u32,
    otmTextMetrics: TEXTMETRICW,
    otmFiller: u8,
    otmPanoseNumber: PANOSE,
    otmfsSelection: u32,
    otmfsType: u32,
    otmsCharSlopeRise: i32,
    otmsCharSlopeRun: i32,
    otmItalicAngle: i32,
    otmEMSquare: u32,
    otmAscent: i32,
    otmDescent: i32,
    otmLineGap: u32,
    otmsCapEmHeight: u32,
    otmsXHeight: u32,
    otmrcFontBox: RECT,
    otmMacAscent: i32,
    otmMacDescent: i32,
    otmMacLineGap: u32,
    otmusMinimumPPEM: u32,
    otmptSubscriptSize: POINT,
    otmptSubscriptOffset: POINT,
    otmptSuperscriptSize: POINT,
    otmptSuperscriptOffset: POINT,
    otmsStrikeoutSize: u32,
    otmsStrikeoutPosition: i32,
    otmsUnderscoreSize: i32,
    otmsUnderscorePosition: i32,
    otmpFamilyName: PSTR,
    otmpFaceName: PSTR,
    otmpStyleName: PSTR,
    otmpFullName: PSTR,
};

pub const POLYTEXTA = extern struct {
    x: i32,
    y: i32,
    n: u32,
    lpstr: [*:0]const u8,
    uiFlags: u32,
    rcl: RECT,
    pdx: *i32,
};

pub const POLYTEXTW = extern struct {
    x: i32,
    y: i32,
    n: u32,
    lpstr: [*:0]const u16,
    uiFlags: u32,
    rcl: RECT,
    pdx: *i32,
};

pub const FIXED = extern struct {
    fract: u16,
    value: i16,
};

pub const MAT2 = extern struct {
    eM11: FIXED,
    eM12: FIXED,
    eM21: FIXED,
    eM22: FIXED,
};

pub const GLYPHMETRICS = extern struct {
    gmBlackBoxX: u32,
    gmBlackBoxY: u32,
    gmptGlyphOrigin: POINT,
    gmCellIncX: i16,
    gmCellIncY: i16,
};

pub const POINTFX = extern struct {
    x: FIXED,
    y: FIXED,
};

pub const TTPOLYCURVE = extern struct {
    wType: u16,
    cpfx: u16,
    apfx: [1]POINTFX,
};

pub const TTPOLYGONHEADER = extern struct {
    cb: u32,
    dwType: u32,
    pfxStart: POINTFX,
};

pub const GCP_RESULTSA = extern struct {
    lStructSize: u32,
    lpOutString: PSTR,
    lpOrder: *u32,
    lpDx: *i32,
    lpCaretPos: *i32,
    lpClass: GCP_RESULTSW_lpClass,
    lpGlyphs: PWSTR,
    nGlyphs: u32,
    nMaxFit: i32,
};

pub const GCP_RESULTSW = extern struct {
    lStructSize: u32,
    lpOutString: PWSTR,
    lpOrder: *u32,
    lpDx: *i32,
    lpCaretPos: *i32,
    lpClass: GCP_RESULTSW_lpClass,
    lpGlyphs: PWSTR,
    nGlyphs: u32,
    nMaxFit: i32,
};

pub const RASTERIZER_STATUS = extern struct {
    nSize: i16,
    wFlags: i16,
    nLanguageID: i16,
};

pub const OLDFONTENUMPROCA = fn(
    param0: *const LOGFONTA,
    param1: *const TEXTMETRICA,
    param2: u32,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const OLDFONTENUMPROCW = fn(
    param0: *const LOGFONTW,
    param1: *const TEXTMETRICW,
    param2: u32,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const FONTENUMPROCA = fn(
) callconv(@import("std").os.windows.WINAPI) i32;

pub const FONTENUMPROCW = fn(
) callconv(@import("std").os.windows.WINAPI) i32;

pub const FONTENUMPROC = fn(
) callconv(@import("std").os.windows.WINAPI) i32;

pub const GOBJENUMPROC = fn(
    param0: *c_void,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const LINEDDAPROC = fn(
    param0: i32,
    param1: i32,
    param2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LPFNDEVMODE = fn(
    param0: HWND,
    param1: ?*c_void,
    param2: *DEVMODEA,
    param3: PSTR,
    param4: PSTR,
    param5: *DEVMODEA,
    param6: PSTR,
    param7: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const LPFNDEVCAPS = fn(
    param0: PSTR,
    param1: PSTR,
    param2: u32,
    param3: PSTR,
    param4: *DEVMODEA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const WCRANGE = extern struct {
    wcLow: u16,
    cGlyphs: u16,
};

pub const GLYPHSET = extern struct {
    cbThis: u32,
    flAccel: u32,
    cGlyphsSupported: u32,
    cRanges: u32,
    ranges: [1]WCRANGE,
};

pub const DESIGNVECTOR = extern struct {
    dvReserved: u32,
    dvNumAxes: u32,
    dvValues: [16]i32,
};

pub const AXISINFOA = extern struct {
    axMinValue: i32,
    axMaxValue: i32,
    axAxisName: [16]u8,
};

pub const AXISINFOW = extern struct {
    axMinValue: i32,
    axMaxValue: i32,
    axAxisName: [16]u16,
};

pub const AXESLISTA = extern struct {
    axlReserved: u32,
    axlNumAxes: u32,
    axlAxisInfo: [16]AXISINFOA,
};

pub const AXESLISTW = extern struct {
    axlReserved: u32,
    axlNumAxes: u32,
    axlAxisInfo: [16]AXISINFOW,
};

pub const ENUMLOGFONTEXDVA = extern struct {
    elfEnumLogfontEx: ENUMLOGFONTEXA,
    elfDesignVector: DESIGNVECTOR,
};

pub const ENUMLOGFONTEXDVW = extern struct {
    elfEnumLogfontEx: ENUMLOGFONTEXW,
    elfDesignVector: DESIGNVECTOR,
};

pub const ENUMTEXTMETRICA = extern struct {
    etmNewTextMetricEx: NEWTEXTMETRICEXA,
    etmAxesList: AXESLISTA,
};

pub const ENUMTEXTMETRICW = extern struct {
    etmNewTextMetricEx: NEWTEXTMETRICEXW,
    etmAxesList: AXESLISTW,
};

pub const TRIVERTEX = extern struct {
    x: i32,
    y: i32,
    Red: u16,
    Green: u16,
    Blue: u16,
    Alpha: u16,
};

pub const GRADIENT_TRIANGLE = extern struct {
    Vertex1: u32,
    Vertex2: u32,
    Vertex3: u32,
};

pub const GRADIENT_RECT = extern struct {
    UpperLeft: u32,
    LowerRight: u32,
};

pub const BLENDFUNCTION = extern struct {
    BlendOp: u8,
    BlendFlags: u8,
    SourceConstantAlpha: u8,
    AlphaFormat: u8,
};

pub const MFENUMPROC = fn(
    hdc: HDC,
    lpht: [*]HANDLETABLE,
    lpMR: *METARECORD,
    nObj: i32,
    param4: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const ENHMFENUMPROC = fn(
    hdc: HDC,
    lpht: [*]HANDLETABLE,
    lpmr: *const ENHMETARECORD,
    nHandles: i32,
    data: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const DIBSECTION = extern struct {
    dsBm: BITMAP,
    dsBmih: BITMAPINFOHEADER,
    dsBitfields: [3]u32,
    dshSection: HANDLE,
    dsOffset: u32,
};

pub const COLORADJUSTMENT = extern struct {
    caSize: u16,
    caFlags: u16,
    caIlluminantIndex: u16,
    caRedGamma: u16,
    caGreenGamma: u16,
    caBlueGamma: u16,
    caReferenceBlack: u16,
    caReferenceWhite: u16,
    caContrast: i16,
    caBrightness: i16,
    caColorfulness: i16,
    caRedGreenTint: i16,
};

pub const KERNINGPAIR = extern struct {
    wFirst: u16,
    wSecond: u16,
    iKernAmount: i32,
};

pub const EMR = extern struct {
    iType: u32,
    nSize: u32,
};

pub const EMRTEXT = extern struct {
    ptlReference: POINTL,
    nChars: u32,
    offString: u32,
    fOptions: u32,
    rcl: RECTL,
    offDx: u32,
};

pub const ABORTPATH = extern struct {
    emr: EMR,
};

pub const EMRSELECTCLIPPATH = extern struct {
    emr: EMR,
    iMode: u32,
};

pub const EMRSETMITERLIMIT = extern struct {
    emr: EMR,
    eMiterLimit: f32,
};

pub const EMRRESTOREDC = extern struct {
    emr: EMR,
    iRelative: i32,
};

pub const EMRSETARCDIRECTION = extern struct {
    emr: EMR,
    iArcDirection: u32,
};

pub const EMRSETMAPPERFLAGS = extern struct {
    emr: EMR,
    dwFlags: u32,
};

pub const EMRSETTEXTCOLOR = extern struct {
    emr: EMR,
    crColor: u32,
};

pub const EMRSELECTOBJECT = extern struct {
    emr: EMR,
    ihObject: u32,
};

pub const EMRSELECTPALETTE = extern struct {
    emr: EMR,
    ihPal: u32,
};

pub const EMRRESIZEPALETTE = extern struct {
    emr: EMR,
    ihPal: u32,
    cEntries: u32,
};

pub const EMRSETPALETTEENTRIES = extern struct {
    emr: EMR,
    ihPal: u32,
    iStart: u32,
    cEntries: u32,
    aPalEntries: [1]PALETTEENTRY,
};

pub const EMRSETCOLORADJUSTMENT = extern struct {
    emr: EMR,
    ColorAdjustment: COLORADJUSTMENT,
};

pub const EMRGDICOMMENT = extern struct {
    emr: EMR,
    cbData: u32,
    Data: [1]u8,
};

pub const EMREOF = extern struct {
    emr: EMR,
    nPalEntries: u32,
    offPalEntries: u32,
    nSizeLast: u32,
};

pub const EMRLINETO = extern struct {
    emr: EMR,
    ptl: POINTL,
};

pub const EMROFFSETCLIPRGN = extern struct {
    emr: EMR,
    ptlOffset: POINTL,
};

pub const EMRFILLPATH = extern struct {
    emr: EMR,
    rclBounds: RECTL,
};

pub const EMREXCLUDECLIPRECT = extern struct {
    emr: EMR,
    rclClip: RECTL,
};

pub const EMRSETVIEWPORTORGEX = extern struct {
    emr: EMR,
    ptlOrigin: POINTL,
};

pub const EMRSETVIEWPORTEXTEX = extern struct {
    emr: EMR,
    szlExtent: SIZE,
};

pub const EMRSCALEVIEWPORTEXTEX = extern struct {
    emr: EMR,
    xNum: i32,
    xDenom: i32,
    yNum: i32,
    yDenom: i32,
};

pub const EMRSETWORLDTRANSFORM = extern struct {
    emr: EMR,
    xform: XFORM,
};

pub const EMRMODIFYWORLDTRANSFORM = extern struct {
    emr: EMR,
    xform: XFORM,
    iMode: u32,
};

pub const EMRSETPIXELV = extern struct {
    emr: EMR,
    ptlPixel: POINTL,
    crColor: u32,
};

pub const EMREXTFLOODFILL = extern struct {
    emr: EMR,
    ptlStart: POINTL,
    crColor: u32,
    iMode: u32,
};

pub const EMRELLIPSE = extern struct {
    emr: EMR,
    rclBox: RECTL,
};

pub const EMRROUNDRECT = extern struct {
    emr: EMR,
    rclBox: RECTL,
    szlCorner: SIZE,
};

pub const EMRARC = extern struct {
    emr: EMR,
    rclBox: RECTL,
    ptlStart: POINTL,
    ptlEnd: POINTL,
};

pub const EMRANGLEARC = extern struct {
    emr: EMR,
    ptlCenter: POINTL,
    nRadius: u32,
    eStartAngle: f32,
    eSweepAngle: f32,
};

pub const EMRPOLYLINE = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cptl: u32,
    aptl: [1]POINTL,
};

pub const EMRPOLYLINE16 = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cpts: u32,
    apts: [1]POINTS,
};

pub const EMRPOLYDRAW = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cptl: u32,
    aptl: [1]POINTL,
    abTypes: [1]u8,
};

pub const EMRPOLYDRAW16 = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cpts: u32,
    apts: [1]POINTS,
    abTypes: [1]u8,
};

pub const EMRPOLYPOLYLINE = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    nPolys: u32,
    cptl: u32,
    aPolyCounts: [1]u32,
    aptl: [1]POINTL,
};

pub const EMRPOLYPOLYLINE16 = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    nPolys: u32,
    cpts: u32,
    aPolyCounts: [1]u32,
    apts: [1]POINTS,
};

pub const EMRINVERTRGN = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cbRgnData: u32,
    RgnData: [1]u8,
};

pub const EMRFILLRGN = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cbRgnData: u32,
    ihBrush: u32,
    RgnData: [1]u8,
};

pub const EMRFRAMERGN = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cbRgnData: u32,
    ihBrush: u32,
    szlStroke: SIZE,
    RgnData: [1]u8,
};

pub const EMREXTSELECTCLIPRGN = extern struct {
    emr: EMR,
    cbRgnData: u32,
    iMode: u32,
    RgnData: [1]u8,
};

pub const EMREXTTEXTOUTA = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    iGraphicsMode: u32,
    exScale: f32,
    eyScale: f32,
    emrtext: EMRTEXT,
};

pub const EMRPOLYTEXTOUTA = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    iGraphicsMode: u32,
    exScale: f32,
    eyScale: f32,
    cStrings: i32,
    aemrtext: [1]EMRTEXT,
};

pub const EMRBITBLT = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: i32,
    yDest: i32,
    cxDest: i32,
    cyDest: i32,
    dwRop: u32,
    xSrc: i32,
    ySrc: i32,
    xformSrc: XFORM,
    crBkColorSrc: u32,
    iUsageSrc: u32,
    offBmiSrc: u32,
    cbBmiSrc: u32,
    offBitsSrc: u32,
    cbBitsSrc: u32,
};

pub const EMRSTRETCHBLT = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: i32,
    yDest: i32,
    cxDest: i32,
    cyDest: i32,
    dwRop: u32,
    xSrc: i32,
    ySrc: i32,
    xformSrc: XFORM,
    crBkColorSrc: u32,
    iUsageSrc: u32,
    offBmiSrc: u32,
    cbBmiSrc: u32,
    offBitsSrc: u32,
    cbBitsSrc: u32,
    cxSrc: i32,
    cySrc: i32,
};

pub const EMRMASKBLT = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: i32,
    yDest: i32,
    cxDest: i32,
    cyDest: i32,
    dwRop: u32,
    xSrc: i32,
    ySrc: i32,
    xformSrc: XFORM,
    crBkColorSrc: u32,
    iUsageSrc: u32,
    offBmiSrc: u32,
    cbBmiSrc: u32,
    offBitsSrc: u32,
    cbBitsSrc: u32,
    xMask: i32,
    yMask: i32,
    iUsageMask: u32,
    offBmiMask: u32,
    cbBmiMask: u32,
    offBitsMask: u32,
    cbBitsMask: u32,
};

pub const EMRPLGBLT = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    aptlDest: [3]POINTL,
    xSrc: i32,
    ySrc: i32,
    cxSrc: i32,
    cySrc: i32,
    xformSrc: XFORM,
    crBkColorSrc: u32,
    iUsageSrc: u32,
    offBmiSrc: u32,
    cbBmiSrc: u32,
    offBitsSrc: u32,
    cbBitsSrc: u32,
    xMask: i32,
    yMask: i32,
    iUsageMask: u32,
    offBmiMask: u32,
    cbBmiMask: u32,
    offBitsMask: u32,
    cbBitsMask: u32,
};

pub const EMRSETDIBITSTODEVICE = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: i32,
    yDest: i32,
    xSrc: i32,
    ySrc: i32,
    cxSrc: i32,
    cySrc: i32,
    offBmiSrc: u32,
    cbBmiSrc: u32,
    offBitsSrc: u32,
    cbBitsSrc: u32,
    iUsageSrc: u32,
    iStartScan: u32,
    cScans: u32,
};

pub const EMRSTRETCHDIBITS = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: i32,
    yDest: i32,
    xSrc: i32,
    ySrc: i32,
    cxSrc: i32,
    cySrc: i32,
    offBmiSrc: u32,
    cbBmiSrc: u32,
    offBitsSrc: u32,
    cbBitsSrc: u32,
    iUsageSrc: u32,
    dwRop: u32,
    cxDest: i32,
    cyDest: i32,
};

pub const EMREXTCREATEFONTINDIRECTW = extern struct {
    emr: EMR,
    ihFont: u32,
    elfw: EXTLOGFONTW,
};

pub const EMRCREATEPALETTE = extern struct {
    emr: EMR,
    ihPal: u32,
    lgpl: LOGPALETTE,
};

pub const EMRCREATEPEN = extern struct {
    emr: EMR,
    ihPen: u32,
    lopn: LOGPEN,
};

pub const EMREXTCREATEPEN = extern struct {
    emr: EMR,
    ihPen: u32,
    offBmi: u32,
    cbBmi: u32,
    offBits: u32,
    cbBits: u32,
    elp: EXTLOGPEN32,
};

pub const EMRCREATEBRUSHINDIRECT = extern struct {
    emr: EMR,
    ihBrush: u32,
    lb: LOGBRUSH32,
};

pub const EMRCREATEMONOBRUSH = extern struct {
    emr: EMR,
    ihBrush: u32,
    iUsage: u32,
    offBmi: u32,
    cbBmi: u32,
    offBits: u32,
    cbBits: u32,
};

pub const EMRCREATEDIBPATTERNBRUSHPT = extern struct {
    emr: EMR,
    ihBrush: u32,
    iUsage: u32,
    offBmi: u32,
    cbBmi: u32,
    offBits: u32,
    cbBits: u32,
};

pub const EMRFORMAT = extern struct {
    dSignature: u32,
    nVersion: u32,
    cbData: u32,
    offData: u32,
};

pub const EMRGLSRECORD = extern struct {
    emr: EMR,
    cbData: u32,
    Data: [1]u8,
};

pub const EMRGLSBOUNDEDRECORD = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cbData: u32,
    Data: [1]u8,
};

pub const EMRPIXELFORMAT = extern struct {
    emr: EMR,
    pfd: PIXELFORMATDESCRIPTOR,
};

pub const EMRCREATECOLORSPACE = extern struct {
    emr: EMR,
    ihCS: u32,
    lcs: LOGCOLORSPACEA,
};

pub const EMRSETCOLORSPACE = extern struct {
    emr: EMR,
    ihCS: u32,
};

pub const EMREXTESCAPE = extern struct {
    emr: EMR,
    iEscape: i32,
    cbEscData: i32,
    EscData: [1]u8,
};

pub const EMRNAMEDESCAPE = extern struct {
    emr: EMR,
    iEscape: i32,
    cbDriver: i32,
    cbEscData: i32,
    EscData: [1]u8,
};

pub const EMRSETICMPROFILE = extern struct {
    emr: EMR,
    dwFlags: u32,
    cbName: u32,
    cbData: u32,
    Data: [1]u8,
};

pub const EMRCREATECOLORSPACEW = extern struct {
    emr: EMR,
    ihCS: u32,
    lcs: LOGCOLORSPACEW,
    dwFlags: u32,
    cbData: u32,
    Data: [1]u8,
};

pub const COLORMATCHTOTARGET = extern struct {
    emr: EMR,
    dwAction: u32,
    dwFlags: u32,
    cbName: u32,
    cbData: u32,
    Data: [1]u8,
};

pub const COLORCORRECTPALETTE = extern struct {
    emr: EMR,
    ihPalette: u32,
    nFirstEntry: u32,
    nPalEntries: u32,
    nReserved: u32,
};

pub const EMRALPHABLEND = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: i32,
    yDest: i32,
    cxDest: i32,
    cyDest: i32,
    dwRop: u32,
    xSrc: i32,
    ySrc: i32,
    xformSrc: XFORM,
    crBkColorSrc: u32,
    iUsageSrc: u32,
    offBmiSrc: u32,
    cbBmiSrc: u32,
    offBitsSrc: u32,
    cbBitsSrc: u32,
    cxSrc: i32,
    cySrc: i32,
};

pub const EMRGRADIENTFILL = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    nVer: u32,
    nTri: u32,
    ulMode: GRADIENT_FILL,
    Ver: [1]TRIVERTEX,
};

pub const EMRTRANSPARENTBLT = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: i32,
    yDest: i32,
    cxDest: i32,
    cyDest: i32,
    dwRop: u32,
    xSrc: i32,
    ySrc: i32,
    xformSrc: XFORM,
    crBkColorSrc: u32,
    iUsageSrc: u32,
    offBmiSrc: u32,
    cbBmiSrc: u32,
    offBitsSrc: u32,
    cbBitsSrc: u32,
    cxSrc: i32,
    cySrc: i32,
};

pub const WGLSWAP = extern struct {
    hdc: HDC,
    uiFlags: u32,
};

pub const CFP_ALLOCPROC = fn(
    param0: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const CFP_REALLOCPROC = fn(
    param0: *c_void,
    param1: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const CFP_FREEPROC = fn(
    param0: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const READEMBEDPROC = fn(
    param0: *c_void,
    param1: *c_void,
    param2: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const WRITEEMBEDPROC = fn(
    param0: *c_void,
    param1: *const c_void,
    param2: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const TTLOADINFO = extern struct {
    usStructSize: u16,
    usRefStrSize: u16,
    pusRefStr: *u16,
};

pub const TTEMBEDINFO = extern struct {
    usStructSize: u16,
    usRootStrSize: u16,
    pusRootStr: *u16,
};

pub const TTVALIDATIONTESTSPARAMS = extern struct {
    ulStructSize: u32,
    lTestFromSize: i32,
    lTestToSize: i32,
    ulCharSet: u32,
    usReserved1: u16,
    usCharCodeCount: u16,
    pusCharCodeSet: *u16,
};

pub const TTVALIDATIONTESTSPARAMSEX = extern struct {
    ulStructSize: u32,
    lTestFromSize: i32,
    lTestToSize: i32,
    ulCharSet: u32,
    usReserved1: u16,
    usCharCodeCount: u16,
    pulCharCodeSet: *u32,
};

pub const MxdcLandscapeRotationEnums = extern enum(i32) {
    COUNTERCLOCKWISE_90_DEGREES = 90,
    NONE = 0,
    COUNTERCLOCKWISE_270_DEGREES = -90,
};
pub const MXDC_LANDSCAPE_ROTATE_COUNTERCLOCKWISE_90_DEGREES = MxdcLandscapeRotationEnums.COUNTERCLOCKWISE_90_DEGREES;
pub const MXDC_LANDSCAPE_ROTATE_NONE = MxdcLandscapeRotationEnums.NONE;
pub const MXDC_LANDSCAPE_ROTATE_COUNTERCLOCKWISE_270_DEGREES = MxdcLandscapeRotationEnums.COUNTERCLOCKWISE_270_DEGREES;

pub const MxdcImageTypeEnums = extern enum(i32) {
    JPEGHIGH_COMPRESSION = 1,
    JPEGMEDIUM_COMPRESSION = 2,
    JPEGLOW_COMPRESSION = 3,
    PNG = 4,
};
pub const MXDC_IMAGETYPE_JPEGHIGH_COMPRESSION = MxdcImageTypeEnums.JPEGHIGH_COMPRESSION;
pub const MXDC_IMAGETYPE_JPEGMEDIUM_COMPRESSION = MxdcImageTypeEnums.JPEGMEDIUM_COMPRESSION;
pub const MXDC_IMAGETYPE_JPEGLOW_COMPRESSION = MxdcImageTypeEnums.JPEGLOW_COMPRESSION;
pub const MXDC_IMAGETYPE_PNG = MxdcImageTypeEnums.PNG;

pub const MxdcEscapeHeader = extern struct {
    cbInput: u32,
    cbOutput: u32,
    opCode: u32,
};

pub const MxdcGetFileNameData = extern struct {
    cbOutput: u32,
    wszData: [1]u16,
};

pub const MxdcS0PageData = extern struct {
    dwSize: u32,
    bData: [1]u8,
};

pub const MxdcS0PageEnums = extern enum(i32) {
    TTF = 0,
    JPEG = 1,
    PNG = 2,
    TIFF = 3,
    WDP = 4,
    DICTIONARY = 5,
    ICC_PROFILE = 6,
    JPEG_THUMBNAIL = 7,
    PNG_THUMBNAIL = 8,
    MAX = 9,
};
pub const MXDC_RESOURCE_TTF = MxdcS0PageEnums.TTF;
pub const MXDC_RESOURCE_JPEG = MxdcS0PageEnums.JPEG;
pub const MXDC_RESOURCE_PNG = MxdcS0PageEnums.PNG;
pub const MXDC_RESOURCE_TIFF = MxdcS0PageEnums.TIFF;
pub const MXDC_RESOURCE_WDP = MxdcS0PageEnums.WDP;
pub const MXDC_RESOURCE_DICTIONARY = MxdcS0PageEnums.DICTIONARY;
pub const MXDC_RESOURCE_ICC_PROFILE = MxdcS0PageEnums.ICC_PROFILE;
pub const MXDC_RESOURCE_JPEG_THUMBNAIL = MxdcS0PageEnums.JPEG_THUMBNAIL;
pub const MXDC_RESOURCE_PNG_THUMBNAIL = MxdcS0PageEnums.PNG_THUMBNAIL;
pub const MXDC_RESOURCE_MAX = MxdcS0PageEnums.MAX;

pub const MxdcXpsS0PageResource = extern struct {
    dwSize: u32,
    dwResourceType: u32,
    szUri: [260]u8,
    dwDataSize: u32,
    bData: [1]u8,
};

pub const MxdcPrintTicketPassthrough = extern struct {
    dwDataSize: u32,
    bData: [1]u8,
};

pub const MxdcPrintTicketEscape = extern struct {
    mxdcEscape: MxdcEscapeHeader,
    printTicketData: MxdcPrintTicketPassthrough,
};

pub const MxdcS0PagePassthroughEscape = extern struct {
    mxdcEscape: MxdcEscapeHeader,
    xpsS0PageData: MxdcS0PageData,
};

pub const MxdcS0PageResourceEscape = extern struct {
    mxdcEscape: MxdcEscapeHeader,
    xpsS0PageResourcePassthrough: MxdcXpsS0PageResource,
};

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const DRAWEDGE_FLAGS = extern enum(u32) {
    BDR_RAISEDOUTER = 1,
    BDR_SUNKENOUTER = 2,
    BDR_RAISEDINNER = 4,
    BDR_SUNKENINNER = 8,
    BDR_OUTER = 3,
    BDR_INNER = 12,
    BDR_RAISED = 5,
    BDR_SUNKEN = 10,
    EDGE_RAISED = 5,
    EDGE_SUNKEN = 10,
    EDGE_ETCHED = 6,
    EDGE_BUMP = 9,
    _,
};
pub const BDR_RAISEDOUTER = DRAWEDGE_FLAGS.BDR_RAISEDOUTER;
pub const BDR_SUNKENOUTER = DRAWEDGE_FLAGS.BDR_SUNKENOUTER;
pub const BDR_RAISEDINNER = DRAWEDGE_FLAGS.BDR_RAISEDINNER;
pub const BDR_SUNKENINNER = DRAWEDGE_FLAGS.BDR_SUNKENINNER;
pub const BDR_OUTER = DRAWEDGE_FLAGS.BDR_OUTER;
pub const BDR_INNER = DRAWEDGE_FLAGS.BDR_INNER;
pub const BDR_RAISED = DRAWEDGE_FLAGS.BDR_RAISED;
pub const BDR_SUNKEN = DRAWEDGE_FLAGS.BDR_SUNKEN;
pub const EDGE_RAISED = DRAWEDGE_FLAGS.EDGE_RAISED;
pub const EDGE_SUNKEN = DRAWEDGE_FLAGS.EDGE_SUNKEN;
pub const EDGE_ETCHED = DRAWEDGE_FLAGS.EDGE_ETCHED;
pub const EDGE_BUMP = DRAWEDGE_FLAGS.EDGE_BUMP;

pub const DFC_TYPE = extern enum(u32) {
    CAPTION = 1,
    BUTTON = 4,
    MENU = 2,
    POPUPMENU = 5,
    SCROLL = 3,
};
pub const DFC_CAPTION = DFC_TYPE.CAPTION;
pub const DFC_BUTTON = DFC_TYPE.BUTTON;
pub const DFC_MENU = DFC_TYPE.MENU;
pub const DFC_POPUPMENU = DFC_TYPE.POPUPMENU;
pub const DFC_SCROLL = DFC_TYPE.SCROLL;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const DFCS_STATE = extern enum(u32) {
    CAPTIONCLOSE = 0,
    CAPTIONMIN = 1,
    CAPTIONMAX = 2,
    CAPTIONRESTORE = 3,
    CAPTIONHELP = 4,
    MENUARROW = 0,
    MENUCHECK = 1,
    MENUBULLET = 2,
    MENUARROWRIGHT = 4,
    SCROLLUP = 0,
    SCROLLDOWN = 1,
    SCROLLLEFT = 2,
    SCROLLRIGHT = 3,
    SCROLLCOMBOBOX = 5,
    SCROLLSIZEGRIP = 8,
    SCROLLSIZEGRIPRIGHT = 16,
    BUTTONCHECK = 0,
    BUTTON3STATE = 8,
    BUTTONPUSH = 16,
    BUTTONRADIO = 4,
    BUTTONRADIOIMAGE = 1,
    BUTTONRADIOMASK = 2,
    INACTIVE = 256,
    PUSHED = 512,
    CHECKED = 1024,
    TRANSPARENT = 2048,
    HOT = 4096,
    ADJUSTRECT = 8192,
    FLAT = 16384,
    MONO = 32768,
    _,
};
pub const DFCS_CAPTIONCLOSE = DFCS_STATE.CAPTIONCLOSE;
pub const DFCS_CAPTIONMIN = DFCS_STATE.CAPTIONMIN;
pub const DFCS_CAPTIONMAX = DFCS_STATE.CAPTIONMAX;
pub const DFCS_CAPTIONRESTORE = DFCS_STATE.CAPTIONRESTORE;
pub const DFCS_CAPTIONHELP = DFCS_STATE.CAPTIONHELP;
pub const DFCS_MENUARROW = DFCS_STATE.MENUARROW;
pub const DFCS_MENUCHECK = DFCS_STATE.MENUCHECK;
pub const DFCS_MENUBULLET = DFCS_STATE.MENUBULLET;
pub const DFCS_MENUARROWRIGHT = DFCS_STATE.MENUARROWRIGHT;
pub const DFCS_SCROLLUP = DFCS_STATE.SCROLLUP;
pub const DFCS_SCROLLDOWN = DFCS_STATE.SCROLLDOWN;
pub const DFCS_SCROLLLEFT = DFCS_STATE.SCROLLLEFT;
pub const DFCS_SCROLLRIGHT = DFCS_STATE.SCROLLRIGHT;
pub const DFCS_SCROLLCOMBOBOX = DFCS_STATE.SCROLLCOMBOBOX;
pub const DFCS_SCROLLSIZEGRIP = DFCS_STATE.SCROLLSIZEGRIP;
pub const DFCS_SCROLLSIZEGRIPRIGHT = DFCS_STATE.SCROLLSIZEGRIPRIGHT;
pub const DFCS_BUTTONCHECK = DFCS_STATE.BUTTONCHECK;
pub const DFCS_BUTTON3STATE = DFCS_STATE.BUTTON3STATE;
pub const DFCS_BUTTONPUSH = DFCS_STATE.BUTTONPUSH;
pub const DFCS_BUTTONRADIO = DFCS_STATE.BUTTONRADIO;
pub const DFCS_BUTTONRADIOIMAGE = DFCS_STATE.BUTTONRADIOIMAGE;
pub const DFCS_BUTTONRADIOMASK = DFCS_STATE.BUTTONRADIOMASK;
pub const DFCS_INACTIVE = DFCS_STATE.INACTIVE;
pub const DFCS_PUSHED = DFCS_STATE.PUSHED;
pub const DFCS_CHECKED = DFCS_STATE.CHECKED;
pub const DFCS_TRANSPARENT = DFCS_STATE.TRANSPARENT;
pub const DFCS_HOT = DFCS_STATE.HOT;
pub const DFCS_ADJUSTRECT = DFCS_STATE.ADJUSTRECT;
pub const DFCS_FLAT = DFCS_STATE.FLAT;
pub const DFCS_MONO = DFCS_STATE.MONO;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const CDS_TYPE = extern enum(u32) {
    UPDATEREGISTRY = 1,
    FULLSCREEN = 4,
    GLOBAL = 8,
    NORESET = 268435456,
    RESET = 1073741824,
    SET_PRIMARY = 16,
    TEST = 2,
    VIDEOPARAMETERS = 32,
    ENABLE_UNSAFE_MODES = 256,
    DISABLE_UNSAFE_MODES = 512,
    RESET_EX = 536870912,
    _,
};
pub const CDS_UPDATEREGISTRY = CDS_TYPE.UPDATEREGISTRY;
pub const CDS_FULLSCREEN = CDS_TYPE.FULLSCREEN;
pub const CDS_GLOBAL = CDS_TYPE.GLOBAL;
pub const CDS_NORESET = CDS_TYPE.NORESET;
pub const CDS_RESET = CDS_TYPE.RESET;
pub const CDS_SET_PRIMARY = CDS_TYPE.SET_PRIMARY;
pub const CDS_TEST = CDS_TYPE.TEST;
pub const CDS_VIDEOPARAMETERS = CDS_TYPE.VIDEOPARAMETERS;
pub const CDS_ENABLE_UNSAFE_MODES = CDS_TYPE.ENABLE_UNSAFE_MODES;
pub const CDS_DISABLE_UNSAFE_MODES = CDS_TYPE.DISABLE_UNSAFE_MODES;
pub const CDS_RESET_EX = CDS_TYPE.RESET_EX;

pub const DISP_CHANGE = extern enum(i32) {
    SUCCESSFUL = 0,
    RESTART = 1,
    FAILED = -1,
    BADMODE = -2,
    NOTUPDATED = -3,
    BADFLAGS = -4,
    BADPARAM = -5,
    BADDUALVIEW = -6,
};
pub const DISP_CHANGE_SUCCESSFUL = DISP_CHANGE.SUCCESSFUL;
pub const DISP_CHANGE_RESTART = DISP_CHANGE.RESTART;
pub const DISP_CHANGE_FAILED = DISP_CHANGE.FAILED;
pub const DISP_CHANGE_BADMODE = DISP_CHANGE.BADMODE;
pub const DISP_CHANGE_NOTUPDATED = DISP_CHANGE.NOTUPDATED;
pub const DISP_CHANGE_BADFLAGS = DISP_CHANGE.BADFLAGS;
pub const DISP_CHANGE_BADPARAM = DISP_CHANGE.BADPARAM;
pub const DISP_CHANGE_BADDUALVIEW = DISP_CHANGE.BADDUALVIEW;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const DRAWSTATE_FLAGS = extern enum(u32) {
    T_COMPLEX = 0,
    T_TEXT = 1,
    T_PREFIXTEXT = 2,
    T_ICON = 3,
    T_BITMAP = 4,
    S_NORMAL = 0,
    S_UNION = 16,
    S_DISABLED = 32,
    S_MONO = 128,
    S_HIDEPREFIX = 512,
    S_PREFIXONLY = 1024,
    S_RIGHT = 32768,
    _,
};
pub const DST_COMPLEX = DRAWSTATE_FLAGS.T_COMPLEX;
pub const DST_TEXT = DRAWSTATE_FLAGS.T_TEXT;
pub const DST_PREFIXTEXT = DRAWSTATE_FLAGS.T_PREFIXTEXT;
pub const DST_ICON = DRAWSTATE_FLAGS.T_ICON;
pub const DST_BITMAP = DRAWSTATE_FLAGS.T_BITMAP;
pub const DSS_NORMAL = DRAWSTATE_FLAGS.S_NORMAL;
pub const DSS_UNION = DRAWSTATE_FLAGS.S_UNION;
pub const DSS_DISABLED = DRAWSTATE_FLAGS.S_DISABLED;
pub const DSS_MONO = DRAWSTATE_FLAGS.S_MONO;
pub const DSS_HIDEPREFIX = DRAWSTATE_FLAGS.S_HIDEPREFIX;
pub const DSS_PREFIXONLY = DRAWSTATE_FLAGS.S_PREFIXONLY;
pub const DSS_RIGHT = DRAWSTATE_FLAGS.S_RIGHT;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const REDRAW_WINDOW_FLAGS = extern enum(u32) {
    INVALIDATE = 1,
    INTERNALPAINT = 2,
    ERASE = 4,
    VALIDATE = 8,
    NOINTERNALPAINT = 16,
    NOERASE = 32,
    NOCHILDREN = 64,
    ALLCHILDREN = 128,
    UPDATENOW = 256,
    ERASENOW = 512,
    FRAME = 1024,
    NOFRAME = 2048,
    _,
};
pub const RDW_INVALIDATE = REDRAW_WINDOW_FLAGS.INVALIDATE;
pub const RDW_INTERNALPAINT = REDRAW_WINDOW_FLAGS.INTERNALPAINT;
pub const RDW_ERASE = REDRAW_WINDOW_FLAGS.ERASE;
pub const RDW_VALIDATE = REDRAW_WINDOW_FLAGS.VALIDATE;
pub const RDW_NOINTERNALPAINT = REDRAW_WINDOW_FLAGS.NOINTERNALPAINT;
pub const RDW_NOERASE = REDRAW_WINDOW_FLAGS.NOERASE;
pub const RDW_NOCHILDREN = REDRAW_WINDOW_FLAGS.NOCHILDREN;
pub const RDW_ALLCHILDREN = REDRAW_WINDOW_FLAGS.ALLCHILDREN;
pub const RDW_UPDATENOW = REDRAW_WINDOW_FLAGS.UPDATENOW;
pub const RDW_ERASENOW = REDRAW_WINDOW_FLAGS.ERASENOW;
pub const RDW_FRAME = REDRAW_WINDOW_FLAGS.FRAME;
pub const RDW_NOFRAME = REDRAW_WINDOW_FLAGS.NOFRAME;

pub const ENUM_DISPLAY_SETTINGS_MODE = extern enum(u32) {
    CURRENT_SETTINGS = 4294967295,
    REGISTRY_SETTINGS = 4294967294,
};
pub const ENUM_CURRENT_SETTINGS = ENUM_DISPLAY_SETTINGS_MODE.CURRENT_SETTINGS;
pub const ENUM_REGISTRY_SETTINGS = ENUM_DISPLAY_SETTINGS_MODE.REGISTRY_SETTINGS;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const TT_ulFlags = extern enum(u32) {
    EMBEDEUDC = 32,
    RAW = 0,
    SUBSET = 1,
    TTCOMPRESSED = 4,
    _,
};
pub const TTEMBED_EMBEDEUDC = TT_ulFlags.EMBEDEUDC;
pub const TTEMBED_RAW = TT_ulFlags.RAW;
pub const TTEMBED_SUBSET = TT_ulFlags.SUBSET;
pub const TTEMBED_TTCOMPRESSED = TT_ulFlags.TTCOMPRESSED;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const DrawText_format = extern enum(u32) {
    BOTTOM = 8,
    CALCRECT = 1024,
    CENTER = 1,
    EDITCONTROL = 8192,
    END_ELLIPSIS = 32768,
    EXPANDTABS = 64,
    EXTERNALLEADING = 512,
    HIDEPREFIX = 1048576,
    INTERNAL = 4096,
    LEFT = 0,
    MODIFYSTRING = 65536,
    NOCLIP = 256,
    NOFULLWIDTHCHARBREAK = 524288,
    NOPREFIX = 2048,
    PATH_ELLIPSIS = 16384,
    PREFIXONLY = 2097152,
    RIGHT = 2,
    RTLREADING = 131072,
    SINGLELINE = 32,
    TABSTOP = 128,
    TOP = 0,
    VCENTER = 4,
    WORDBREAK = 16,
    WORD_ELLIPSIS = 262144,
    _,
};
pub const DT_BOTTOM = DrawText_format.BOTTOM;
pub const DT_CALCRECT = DrawText_format.CALCRECT;
pub const DT_CENTER = DrawText_format.CENTER;
pub const DT_EDITCONTROL = DrawText_format.EDITCONTROL;
pub const DT_END_ELLIPSIS = DrawText_format.END_ELLIPSIS;
pub const DT_EXPANDTABS = DrawText_format.EXPANDTABS;
pub const DT_EXTERNALLEADING = DrawText_format.EXTERNALLEADING;
pub const DT_HIDEPREFIX = DrawText_format.HIDEPREFIX;
pub const DT_INTERNAL = DrawText_format.INTERNAL;
pub const DT_LEFT = DrawText_format.LEFT;
pub const DT_MODIFYSTRING = DrawText_format.MODIFYSTRING;
pub const DT_NOCLIP = DrawText_format.NOCLIP;
pub const DT_NOFULLWIDTHCHARBREAK = DrawText_format.NOFULLWIDTHCHARBREAK;
pub const DT_NOPREFIX = DrawText_format.NOPREFIX;
pub const DT_PATH_ELLIPSIS = DrawText_format.PATH_ELLIPSIS;
pub const DT_PREFIXONLY = DrawText_format.PREFIXONLY;
pub const DT_RIGHT = DrawText_format.RIGHT;
pub const DT_RTLREADING = DrawText_format.RTLREADING;
pub const DT_SINGLELINE = DrawText_format.SINGLELINE;
pub const DT_TABSTOP = DrawText_format.TABSTOP;
pub const DT_TOP = DrawText_format.TOP;
pub const DT_VCENTER = DrawText_format.VCENTER;
pub const DT_WORDBREAK = DrawText_format.WORDBREAK;
pub const DT_WORD_ELLIPSIS = DrawText_format.WORD_ELLIPSIS;

pub const TTEmbedFont_ulCharSet = extern enum(u32) {
    UNICODE = 1,
    SYMBOL = 2,
};
pub const CHARSET_UNICODE = TTEmbedFont_ulCharSet.UNICODE;
pub const CHARSET_SYMBOL = TTEmbedFont_ulCharSet.SYMBOL;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const GetDCEx_flags = extern enum(u32) {
    WINDOW = 1,
    CACHE = 2,
    PARENTCLIP = 32,
    CLIPSIBLINGS = 16,
    CLIPCHILDREN = 8,
    NORESETATTRS = 4,
    LOCKWINDOWUPDATE = 1024,
    EXCLUDERGN = 64,
    INTERSECTRGN = 128,
    INTERSECTUPDATE = 512,
    VALIDATE = 2097152,
    _,
};
pub const DCX_WINDOW = GetDCEx_flags.WINDOW;
pub const DCX_CACHE = GetDCEx_flags.CACHE;
pub const DCX_PARENTCLIP = GetDCEx_flags.PARENTCLIP;
pub const DCX_CLIPSIBLINGS = GetDCEx_flags.CLIPSIBLINGS;
pub const DCX_CLIPCHILDREN = GetDCEx_flags.CLIPCHILDREN;
pub const DCX_NORESETATTRS = GetDCEx_flags.NORESETATTRS;
pub const DCX_LOCKWINDOWUPDATE = GetDCEx_flags.LOCKWINDOWUPDATE;
pub const DCX_EXCLUDERGN = GetDCEx_flags.EXCLUDERGN;
pub const DCX_INTERSECTRGN = GetDCEx_flags.INTERSECTRGN;
pub const DCX_INTERSECTUPDATE = GetDCEx_flags.INTERSECTUPDATE;
pub const DCX_VALIDATE = GetDCEx_flags.VALIDATE;

pub const GetGlyphOutline_fuFormat = extern enum(u32) {
    BEZIER = 3,
    BITMAP = 1,
    GLYPH_INDEX = 128,
    GRAY2_BITMAP = 4,
    GRAY4_BITMAP = 5,
    GRAY8_BITMAP = 6,
    METRICS = 0,
    NATIVE = 2,
    UNHINTED = 256,
};
pub const GGO_BEZIER = GetGlyphOutline_fuFormat.BEZIER;
pub const GGO_BITMAP = GetGlyphOutline_fuFormat.BITMAP;
pub const GGO_GLYPH_INDEX = GetGlyphOutline_fuFormat.GLYPH_INDEX;
pub const GGO_GRAY2_BITMAP = GetGlyphOutline_fuFormat.GRAY2_BITMAP;
pub const GGO_GRAY4_BITMAP = GetGlyphOutline_fuFormat.GRAY4_BITMAP;
pub const GGO_GRAY8_BITMAP = GetGlyphOutline_fuFormat.GRAY8_BITMAP;
pub const GGO_METRICS = GetGlyphOutline_fuFormat.METRICS;
pub const GGO_NATIVE = GetGlyphOutline_fuFormat.NATIVE;
pub const GGO_UNHINTED = GetGlyphOutline_fuFormat.UNHINTED;

pub const SetBoundsRect_flags = extern enum(u32) {
    ACCUMULATE = 2,
    DISABLE = 8,
    ENABLE = 4,
    RESET = 1,
};
pub const DCB_ACCUMULATE = SetBoundsRect_flags.ACCUMULATE;
pub const DCB_DISABLE = SetBoundsRect_flags.DISABLE;
pub const DCB_ENABLE = SetBoundsRect_flags.ENABLE;
pub const DCB_RESET = SetBoundsRect_flags.RESET;

pub const GetStockObject_iFlags = extern enum(u32) {
    BLACK_BRUSH = 4,
    DKGRAY_BRUSH = 3,
    DC_BRUSH = 18,
    GRAY_BRUSH = 2,
    HOLLOW_BRUSH = 5,
    LTGRAY_BRUSH = 1,
    NULL_BRUSH = 5,
    WHITE_BRUSH = 0,
    BLACK_PEN = 7,
    DC_PEN = 19,
    NULL_PEN = 8,
    WHITE_PEN = 6,
    ANSI_FIXED_FONT = 11,
    ANSI_VAR_FONT = 12,
    DEVICE_DEFAULT_FONT = 14,
    DEFAULT_GUI_FONT = 17,
    OEM_FIXED_FONT = 10,
    SYSTEM_FONT = 13,
    SYSTEM_FIXED_FONT = 16,
    DEFAULT_PALETTE = 15,
};
pub const BLACK_BRUSH = GetStockObject_iFlags.BLACK_BRUSH;
pub const DKGRAY_BRUSH = GetStockObject_iFlags.DKGRAY_BRUSH;
pub const DC_BRUSH = GetStockObject_iFlags.DC_BRUSH;
pub const GRAY_BRUSH = GetStockObject_iFlags.GRAY_BRUSH;
pub const HOLLOW_BRUSH = GetStockObject_iFlags.HOLLOW_BRUSH;
pub const LTGRAY_BRUSH = GetStockObject_iFlags.LTGRAY_BRUSH;
pub const NULL_BRUSH = GetStockObject_iFlags.NULL_BRUSH;
pub const WHITE_BRUSH = GetStockObject_iFlags.WHITE_BRUSH;
pub const BLACK_PEN = GetStockObject_iFlags.BLACK_PEN;
pub const DC_PEN = GetStockObject_iFlags.DC_PEN;
pub const NULL_PEN = GetStockObject_iFlags.NULL_PEN;
pub const WHITE_PEN = GetStockObject_iFlags.WHITE_PEN;
pub const ANSI_FIXED_FONT = GetStockObject_iFlags.ANSI_FIXED_FONT;
pub const ANSI_VAR_FONT = GetStockObject_iFlags.ANSI_VAR_FONT;
pub const DEVICE_DEFAULT_FONT = GetStockObject_iFlags.DEVICE_DEFAULT_FONT;
pub const DEFAULT_GUI_FONT = GetStockObject_iFlags.DEFAULT_GUI_FONT;
pub const OEM_FIXED_FONT = GetStockObject_iFlags.OEM_FIXED_FONT;
pub const SYSTEM_FONT = GetStockObject_iFlags.SYSTEM_FONT;
pub const SYSTEM_FIXED_FONT = GetStockObject_iFlags.SYSTEM_FIXED_FONT;
pub const DEFAULT_PALETTE = GetStockObject_iFlags.DEFAULT_PALETTE;

pub const CombineRgn_iMode = extern enum(u32) {
    AND = 1,
    COPY = 5,
    DIFF = 4,
    OR = 2,
    XOR = 3,
};
// TODO: enum 'CombineRgn_iMode' has known issues with its value aliases

pub const ModifyWorldTransform_modeFlags = extern enum(u32) {
    IDENTITY = 1,
    LEFTMULTIPLY = 2,
    RIGHTMULTIPLY = 3,
};
pub const MWT_IDENTITY = ModifyWorldTransform_modeFlags.IDENTITY;
pub const MWT_LEFTMULTIPLY = ModifyWorldTransform_modeFlags.LEFTMULTIPLY;
pub const MWT_RIGHTMULTIPLY = ModifyWorldTransform_modeFlags.RIGHTMULTIPLY;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const CreateFont_iClipPrecision = extern enum(u32) {
    CHARACTER_PRECIS = 1,
    DEFAULT_PRECIS = 0,
    DFA_DISABLE = 64,
    EMBEDDED = 128,
    LH_ANGLES = 16,
    MASK = 15,
    STROKE_PRECIS = 2,
    TT_ALWAYS = 32,
    _,
};
pub const CLIP_CHARACTER_PRECIS = CreateFont_iClipPrecision.CHARACTER_PRECIS;
pub const CLIP_DEFAULT_PRECIS = CreateFont_iClipPrecision.DEFAULT_PRECIS;
pub const CLIP_DFA_DISABLE = CreateFont_iClipPrecision.DFA_DISABLE;
pub const CLIP_EMBEDDED = CreateFont_iClipPrecision.EMBEDDED;
pub const CLIP_LH_ANGLES = CreateFont_iClipPrecision.LH_ANGLES;
pub const CLIP_MASK = CreateFont_iClipPrecision.MASK;
pub const CLIP_STROKE_PRECIS = CreateFont_iClipPrecision.STROKE_PRECIS;
pub const CLIP_TT_ALWAYS = CreateFont_iClipPrecision.TT_ALWAYS;

pub const CreatePolygonRgn_iMode = extern enum(u32) {
    ALTERNATE = 1,
    WINDING = 2,
};
pub const ALTERNATE = CreatePolygonRgn_iMode.ALTERNATE;
pub const WINDING = CreatePolygonRgn_iMode.WINDING;

pub const CreateDIBitmap_iUsage = extern enum(u32) {
    PAL_COLORS = 1,
    RGB_COLORS = 0,
};
// TODO: enum 'CreateDIBitmap_iUsage' has known issues with its value aliases

pub const TT_pulPrivStatus = extern enum(u32) {
    PREVIEWPRINT = 1,
    EDITABLE = 2,
    INSTALLABLE = 3,
    NOEMBEDDING = 4,
};
pub const EMBED_PREVIEWPRINT = TT_pulPrivStatus.PREVIEWPRINT;
pub const EMBED_EDITABLE = TT_pulPrivStatus.EDITABLE;
pub const EMBED_INSTALLABLE = TT_pulPrivStatus.INSTALLABLE;
pub const EMBED_NOEMBEDDING = TT_pulPrivStatus.NOEMBEDDING;

pub const MonitorFrom_dwFlags = extern enum(u32) {
    NEAREST = 2,
    NULL = 0,
    PRIMARY = 1,
};
pub const MONITOR_DEFAULTTONEAREST = MonitorFrom_dwFlags.NEAREST;
pub const MONITOR_DEFAULTTONULL = MonitorFrom_dwFlags.NULL;
pub const MONITOR_DEFAULTTOPRIMARY = MonitorFrom_dwFlags.PRIMARY;

pub const ExtCreatePen_iPenStyleFlags = extern enum(u32) {
    GEOMETRIC = 65536,
    COSMETIC = 0,
};
pub const PS_GEOMETRIC = ExtCreatePen_iPenStyleFlags.GEOMETRIC;
pub const PS_COSMETIC = ExtCreatePen_iPenStyleFlags.COSMETIC;

pub const AddFontResourceEx_fl = extern enum(u32) {
    PRIVATE = 16,
    NOT_ENUM = 32,
};
pub const FR_PRIVATE = AddFontResourceEx_fl.PRIVATE;
pub const FR_NOT_ENUM = AddFontResourceEx_fl.NOT_ENUM;

pub const GetPath_aj = extern enum(u32) {
    MOVETO = 6,
    LINETO = 2,
    BEZIERTO = 4,
};
pub const PT_MOVETO = GetPath_aj.MOVETO;
pub const PT_LINETO = GetPath_aj.LINETO;
pub const PT_BEZIERTO = GetPath_aj.BEZIERTO;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const SetLayout_lFlags = extern enum(u32) {
    BITMAPORIENTATIONPRESERVED = 8,
    RTL = 1,
    _,
};
pub const LAYOUT_BITMAPORIENTATIONPRESERVED = SetLayout_lFlags.BITMAPORIENTATIONPRESERVED;
pub const LAYOUT_RTL = SetLayout_lFlags.RTL;

pub const GetDeviceCaps_indexFlags = extern enum(u32) {
    N = 0,
};
pub const DRIVERVERSION = GetDeviceCaps_indexFlags.N;

pub const CreateFont_iOutPrecision = extern enum(u32) {
    CHARACTER_PRECIS = 2,
    DEFAULT_PRECIS = 0,
    DEVICE_PRECIS = 5,
    OUTLINE_PRECIS = 8,
    PS_ONLY_PRECIS = 10,
    RASTER_PRECIS = 6,
    STRING_PRECIS = 1,
    STROKE_PRECIS = 3,
    TT_ONLY_PRECIS = 7,
    TT_PRECIS = 4,
};
pub const OUT_CHARACTER_PRECIS = CreateFont_iOutPrecision.CHARACTER_PRECIS;
pub const OUT_DEFAULT_PRECIS = CreateFont_iOutPrecision.DEFAULT_PRECIS;
pub const OUT_DEVICE_PRECIS = CreateFont_iOutPrecision.DEVICE_PRECIS;
pub const OUT_OUTLINE_PRECIS = CreateFont_iOutPrecision.OUTLINE_PRECIS;
pub const OUT_PS_ONLY_PRECIS = CreateFont_iOutPrecision.PS_ONLY_PRECIS;
pub const OUT_RASTER_PRECIS = CreateFont_iOutPrecision.RASTER_PRECIS;
pub const OUT_STRING_PRECIS = CreateFont_iOutPrecision.STRING_PRECIS;
pub const OUT_STROKE_PRECIS = CreateFont_iOutPrecision.STROKE_PRECIS;
pub const OUT_TT_ONLY_PRECIS = CreateFont_iOutPrecision.TT_ONLY_PRECIS;
pub const OUT_TT_PRECIS = CreateFont_iOutPrecision.TT_PRECIS;

pub const SetArcDirection_dirFlags = extern enum(u32) {
    OUNTERCLOCKWISE = 1,
    LOCKWISE = 2,
};
pub const AD_COUNTERCLOCKWISE = SetArcDirection_dirFlags.OUNTERCLOCKWISE;
pub const AD_CLOCKWISE = SetArcDirection_dirFlags.LOCKWISE;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const TTLoadEmbeddedFont_pulStatusFlags = extern enum(u32) {
    SUBSETTED = 1,
    IN_SYSSTARTUP = 2,
    _,
};
pub const TTLOAD_FONT_SUBSETTED = TTLoadEmbeddedFont_pulStatusFlags.SUBSETTED;
pub const TTLOAD_FONT_IN_SYSSTARTUP = TTLoadEmbeddedFont_pulStatusFlags.IN_SYSSTARTUP;

pub const SetStretchBltMode_modeFlags = extern enum(u32) {
    BLACKONWHITE = 1,
    COLORONCOLOR = 3,
    HALFTONE = 4,
    STRETCH_ANDSCANS = 1,
    STRETCH_DELETESCANS = 3,
    STRETCH_HALFTONE = 4,
    STRETCH_ORSCANS = 2,
    WHITEONBLACK = 2,
};
pub const BLACKONWHITE = SetStretchBltMode_modeFlags.BLACKONWHITE;
pub const COLORONCOLOR = SetStretchBltMode_modeFlags.COLORONCOLOR;
pub const HALFTONE = SetStretchBltMode_modeFlags.HALFTONE;
pub const STRETCH_ANDSCANS = SetStretchBltMode_modeFlags.STRETCH_ANDSCANS;
pub const STRETCH_DELETESCANS = SetStretchBltMode_modeFlags.STRETCH_DELETESCANS;
pub const STRETCH_HALFTONE = SetStretchBltMode_modeFlags.STRETCH_HALFTONE;
pub const STRETCH_ORSCANS = SetStretchBltMode_modeFlags.STRETCH_ORSCANS;
pub const WHITEONBLACK = SetStretchBltMode_modeFlags.WHITEONBLACK;

pub const CreateFont_iQuality = extern enum(u32) {
    ANTIALIASED_QUALITY = 4,
    CLEARTYPE_QUALITY = 5,
    DEFAULT_QUALITY = 0,
    DRAFT_QUALITY = 1,
    NONANTIALIASED_QUALITY = 3,
    PROOF_QUALITY = 2,
};
pub const ANTIALIASED_QUALITY = CreateFont_iQuality.ANTIALIASED_QUALITY;
pub const CLEARTYPE_QUALITY = CreateFont_iQuality.CLEARTYPE_QUALITY;
pub const DEFAULT_QUALITY = CreateFont_iQuality.DEFAULT_QUALITY;
pub const DRAFT_QUALITY = CreateFont_iQuality.DRAFT_QUALITY;
pub const NONANTIALIASED_QUALITY = CreateFont_iQuality.NONANTIALIASED_QUALITY;
pub const PROOF_QUALITY = CreateFont_iQuality.PROOF_QUALITY;

pub const SetBkMode_modeFlags = extern enum(u32) {
    OPAQUE = 2,
    TRANSPARENT = 1,
};
pub const OPAQUE = SetBkMode_modeFlags.OPAQUE;
pub const TRANSPARENT = SetBkMode_modeFlags.TRANSPARENT;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const GetCharacterPlacement_dwFlags = extern enum(u32) {
    CLASSIN = 524288,
    DIACRITIC = 256,
    DISPLAYZWG = 4194304,
    GLYPHSHAPE = 16,
    JUSTIFY = 65536,
    KASHIDA = 1024,
    LIGATE = 32,
    MAXEXTENT = 1048576,
    NEUTRALOVERRIDE = 33554432,
    NUMERICOVERRIDE = 16777216,
    NUMERICSLATIN = 67108864,
    NUMERICSLOCAL = 134217728,
    REORDER = 2,
    SYMSWAPOFF = 8388608,
    USEKERNING = 8,
    _,
};
pub const GCP_CLASSIN = GetCharacterPlacement_dwFlags.CLASSIN;
pub const GCP_DIACRITIC = GetCharacterPlacement_dwFlags.DIACRITIC;
pub const GCP_DISPLAYZWG = GetCharacterPlacement_dwFlags.DISPLAYZWG;
pub const GCP_GLYPHSHAPE = GetCharacterPlacement_dwFlags.GLYPHSHAPE;
pub const GCP_JUSTIFY = GetCharacterPlacement_dwFlags.JUSTIFY;
pub const GCP_KASHIDA = GetCharacterPlacement_dwFlags.KASHIDA;
pub const GCP_LIGATE = GetCharacterPlacement_dwFlags.LIGATE;
pub const GCP_MAXEXTENT = GetCharacterPlacement_dwFlags.MAXEXTENT;
pub const GCP_NEUTRALOVERRIDE = GetCharacterPlacement_dwFlags.NEUTRALOVERRIDE;
pub const GCP_NUMERICOVERRIDE = GetCharacterPlacement_dwFlags.NUMERICOVERRIDE;
pub const GCP_NUMERICSLATIN = GetCharacterPlacement_dwFlags.NUMERICSLATIN;
pub const GCP_NUMERICSLOCAL = GetCharacterPlacement_dwFlags.NUMERICSLOCAL;
pub const GCP_REORDER = GetCharacterPlacement_dwFlags.REORDER;
pub const GCP_SYMSWAPOFF = GetCharacterPlacement_dwFlags.SYMSWAPOFF;
pub const GCP_USEKERNING = GetCharacterPlacement_dwFlags.USEKERNING;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const DrawEdge_grfFlags = extern enum(u32) {
    ADJUST = 8192,
    BOTTOM = 8,
    BOTTOMLEFT = 9,
    BOTTOMRIGHT = 12,
    DIAGONAL = 16,
    DIAGONAL_ENDBOTTOMLEFT = 25,
    DIAGONAL_ENDBOTTOMRIGHT = 28,
    DIAGONAL_ENDTOPLEFT = 19,
    DIAGONAL_ENDTOPRIGHT = 22,
    FLAT = 16384,
    LEFT = 1,
    MIDDLE = 2048,
    MONO = 32768,
    RECT = 15,
    RIGHT = 4,
    SOFT = 4096,
    TOP = 2,
    TOPLEFT = 3,
    TOPRIGHT = 6,
    _,
};
pub const BF_ADJUST = DrawEdge_grfFlags.ADJUST;
pub const BF_BOTTOM = DrawEdge_grfFlags.BOTTOM;
pub const BF_BOTTOMLEFT = DrawEdge_grfFlags.BOTTOMLEFT;
pub const BF_BOTTOMRIGHT = DrawEdge_grfFlags.BOTTOMRIGHT;
pub const BF_DIAGONAL = DrawEdge_grfFlags.DIAGONAL;
pub const BF_DIAGONAL_ENDBOTTOMLEFT = DrawEdge_grfFlags.DIAGONAL_ENDBOTTOMLEFT;
pub const BF_DIAGONAL_ENDBOTTOMRIGHT = DrawEdge_grfFlags.DIAGONAL_ENDBOTTOMRIGHT;
pub const BF_DIAGONAL_ENDTOPLEFT = DrawEdge_grfFlags.DIAGONAL_ENDTOPLEFT;
pub const BF_DIAGONAL_ENDTOPRIGHT = DrawEdge_grfFlags.DIAGONAL_ENDTOPRIGHT;
pub const BF_FLAT = DrawEdge_grfFlags.FLAT;
pub const BF_LEFT = DrawEdge_grfFlags.LEFT;
pub const BF_MIDDLE = DrawEdge_grfFlags.MIDDLE;
pub const BF_MONO = DrawEdge_grfFlags.MONO;
pub const BF_RECT = DrawEdge_grfFlags.RECT;
pub const BF_RIGHT = DrawEdge_grfFlags.RIGHT;
pub const BF_SOFT = DrawEdge_grfFlags.SOFT;
pub const BF_TOP = DrawEdge_grfFlags.TOP;
pub const BF_TOPLEFT = DrawEdge_grfFlags.TOPLEFT;
pub const BF_TOPRIGHT = DrawEdge_grfFlags.TOPRIGHT;

pub const TT_ulPrivs = extern enum(u32) {
    PREVIEWPRINT = 4,
    EDITABLE = 8,
    INSTALLABLE = 0,
    NOEMBEDDING = 2,
    DEFAULT = 0,
};
pub const LICENSE_PREVIEWPRINT = TT_ulPrivs.PREVIEWPRINT;
pub const LICENSE_EDITABLE = TT_ulPrivs.EDITABLE;
pub const LICENSE_INSTALLABLE = TT_ulPrivs.INSTALLABLE;
pub const LICENSE_NOEMBEDDING = TT_ulPrivs.NOEMBEDDING;
pub const LICENSE_DEFAULT = TT_ulPrivs.DEFAULT;

pub const GRADIENT_FILL = extern enum(u32) {
    RECT_H = 0,
    RECT_V = 1,
    TRIANGLE = 2,
};
pub const GRADIENT_FILL_RECT_H = GRADIENT_FILL.RECT_H;
pub const GRADIENT_FILL_RECT_V = GRADIENT_FILL.RECT_V;
pub const GRADIENT_FILL_TRIANGLE = GRADIENT_FILL.TRIANGLE;

pub const CreateFontPackage_usSubsetEncodingFlags = extern enum(u32) {
    STD_MAC_CHAR_SET = 0,
    SYMBOL_CHAR_SET = 0,
    UNICODE_CHAR_SET = 1,
};
pub const TTFCFP_STD_MAC_CHAR_SET = CreateFontPackage_usSubsetEncodingFlags.STD_MAC_CHAR_SET;
pub const TTFCFP_SYMBOL_CHAR_SET = CreateFontPackage_usSubsetEncodingFlags.SYMBOL_CHAR_SET;
pub const TTFCFP_UNICODE_CHAR_SET = CreateFontPackage_usSubsetEncodingFlags.UNICODE_CHAR_SET;

pub const ExtFloodFill_typeFlags = extern enum(u32) {
    BORDER = 0,
    SURFACE = 1,
};
pub const FLOODFILLBORDER = ExtFloodFill_typeFlags.BORDER;
pub const FLOODFILLSURFACE = ExtFloodFill_typeFlags.SURFACE;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const DrawCaption_flags = extern enum(u32) {
    ACTIVE = 1,
    BUTTONS = 4096,
    GRADIENT = 32,
    ICON = 4,
    INBUTTON = 16,
    SMALLCAP = 2,
    TEXT = 8,
    _,
};
pub const DC_ACTIVE = DrawCaption_flags.ACTIVE;
pub const DC_BUTTONS = DrawCaption_flags.BUTTONS;
pub const DC_GRADIENT = DrawCaption_flags.GRADIENT;
pub const DC_ICON = DrawCaption_flags.ICON;
pub const DC_INBUTTON = DrawCaption_flags.INBUTTON;
pub const DC_SMALLCAP = DrawCaption_flags.SMALLCAP;
pub const DC_TEXT = DrawCaption_flags.TEXT;

pub const SetSystemPaletteUse_useFlags = extern enum(u32) {
    NOSTATIC = 2,
    NOSTATIC256 = 3,
    STATIC = 1,
};
pub const SYSPAL_NOSTATIC = SetSystemPaletteUse_useFlags.NOSTATIC;
pub const SYSPAL_NOSTATIC256 = SetSystemPaletteUse_useFlags.NOSTATIC256;
pub const SYSPAL_STATIC = SetSystemPaletteUse_useFlags.STATIC;

pub const SetGraphicsMode_iModeFlags = extern enum(u32) {
    COMPATIBLE = 1,
    ADVANCED = 2,
};
pub const GM_COMPATIBLE = SetGraphicsMode_iModeFlags.COMPATIBLE;
pub const GM_ADVANCED = SetGraphicsMode_iModeFlags.ADVANCED;

pub const CreateFont_iPitchAndFamily = extern enum(u32) {
    DECORATIVE = 80,
    DONTCARE = 0,
    MODERN = 48,
    ROMAN = 16,
    SCRIPT = 64,
    SWISS = 32,
};
pub const FF_DECORATIVE = CreateFont_iPitchAndFamily.DECORATIVE;
pub const FF_DONTCARE = CreateFont_iPitchAndFamily.DONTCARE;
pub const FF_MODERN = CreateFont_iPitchAndFamily.MODERN;
pub const FF_ROMAN = CreateFont_iPitchAndFamily.ROMAN;
pub const FF_SCRIPT = CreateFont_iPitchAndFamily.SCRIPT;
pub const FF_SWISS = CreateFont_iPitchAndFamily.SWISS;

pub const CreatePen_iStyleFlags = extern enum(u32) {
    SOLID = 0,
    DASH = 1,
    DOT = 2,
    DASHDOT = 3,
    DASHDOTDOT = 4,
    NULL = 5,
    INSIDEFRAME = 6,
};
pub const PS_SOLID = CreatePen_iStyleFlags.SOLID;
pub const PS_DASH = CreatePen_iStyleFlags.DASH;
pub const PS_DOT = CreatePen_iStyleFlags.DOT;
pub const PS_DASHDOT = CreatePen_iStyleFlags.DASHDOT;
pub const PS_DASHDOTDOT = CreatePen_iStyleFlags.DASHDOTDOT;
pub const PS_NULL = CreatePen_iStyleFlags.NULL;
pub const PS_INSIDEFRAME = CreatePen_iStyleFlags.INSIDEFRAME;

pub const PatBlt_ropFlags = extern enum(u32) {
    PATCOPY = 15728673,
    PATINVERT = 5898313,
    DSTINVERT = 5570569,
    BLACKNESS = 66,
    WHITENESS = 16711778,
};
// TODO: enum 'PatBlt_ropFlags' has known issues with its value aliases

pub const CreateFontPackage_usSubsetPlatformFlags = extern enum(u32) {
    UNICODE_PLATFORMID = 0,
    ISO_PLATFORMID = 2,
};
pub const TTFCFP_UNICODE_PLATFORMID = CreateFontPackage_usSubsetPlatformFlags.UNICODE_PLATFORMID;
pub const TTFCFP_ISO_PLATFORMID = CreateFontPackage_usSubsetPlatformFlags.ISO_PLATFORMID;

pub const SetMapMode_iModeFlags = extern enum(u32) {
    ANISOTROPIC = 8,
    HIENGLISH = 5,
    HIMETRIC = 3,
    ISOTROPIC = 7,
    LOENGLISH = 4,
    LOMETRIC = 2,
    TEXT = 1,
    TWIPS = 6,
};
pub const MM_ANISOTROPIC = SetMapMode_iModeFlags.ANISOTROPIC;
pub const MM_HIENGLISH = SetMapMode_iModeFlags.HIENGLISH;
pub const MM_HIMETRIC = SetMapMode_iModeFlags.HIMETRIC;
pub const MM_ISOTROPIC = SetMapMode_iModeFlags.ISOTROPIC;
pub const MM_LOENGLISH = SetMapMode_iModeFlags.LOENGLISH;
pub const MM_LOMETRIC = SetMapMode_iModeFlags.LOMETRIC;
pub const MM_TEXT = SetMapMode_iModeFlags.TEXT;
pub const MM_TWIPS = SetMapMode_iModeFlags.TWIPS;

pub const GCP_RESULTSW_lpClass = extern enum(u32) {
    ARABIC = 2,
    HEBREW = 2,
    LATIN = 1,
    LATINNUMBER = 5,
    LOCALNUMBER = 4,
};
pub const GCPCLASS_ARABIC = GCP_RESULTSW_lpClass.ARABIC;
pub const GCPCLASS_HEBREW = GCP_RESULTSW_lpClass.HEBREW;
pub const GCPCLASS_LATIN = GCP_RESULTSW_lpClass.LATIN;
pub const GCPCLASS_LATINNUMBER = GCP_RESULTSW_lpClass.LATINNUMBER;
pub const GCPCLASS_LOCALNUMBER = GCP_RESULTSW_lpClass.LOCALNUMBER;

pub const GRAYSTRINGPROC = fn(
    param0: HDC,
    param1: LPARAM,
    param2: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DRAWSTATEPROC = fn(
    hdc: HDC,
    lData: LPARAM,
    wData: WPARAM,
    cx: i32,
    cy: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PAINTSTRUCT = extern struct {
    hdc: HDC,
    fErase: BOOL,
    rcPaint: RECT,
    fRestore: BOOL,
    fIncUpdate: BOOL,
    rgbReserved: [32]u8,
};

pub const DRAWTEXTPARAMS = extern struct {
    cbSize: u32,
    iTabLength: i32,
    iLeftMargin: i32,
    iRightMargin: i32,
    uiLengthDrawn: u32,
};

pub const MONITORINFO = extern struct {
    cbSize: u32,
    rcMonitor: RECT,
    rcWork: RECT,
    dwFlags: u32,
};

pub const MONITORINFOEXA = extern struct {
    __AnonymousBase_winuser_L13554_C43: MONITORINFO,
    szDevice: [32]i8,
};

pub const MONITORINFOEXW = extern struct {
    __AnonymousBase_winuser_L13558_C43: MONITORINFO,
    szDevice: [32]u16,
};

pub const MONITORENUMPROC = fn(
    param0: HMONITOR,
    param1: HDC,
    param2: *RECT,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Functions (395)
//--------------------------------------------------------------------------------
pub extern "GDI32" fn GetObjectA(
    h: HANDLE,
    c: i32,
    pv: ?[*]u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn AddFontResourceA(
    param0: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn AddFontResourceW(
    param0: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn AnimatePalette(
    hPal: HPALETTE,
    iStartIndex: u32,
    cEntries: u32,
    ppe: [*]const PALETTEENTRY,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn Arc(
    hdc: HDC,
    x1: i32,
    y1: i32,
    x2: i32,
    y2: i32,
    x3: i32,
    y3: i32,
    x4: i32,
    y4: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn BitBlt(
    hdc: HDC,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    hdcSrc: HDC,
    x1: i32,
    y1: i32,
    rop: ROP_CODE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn CancelDC(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn Chord(
    hdc: HDC,
    x1: i32,
    y1: i32,
    x2: i32,
    y2: i32,
    x3: i32,
    y3: i32,
    x4: i32,
    y4: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn CloseMetaFile(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) HMETAFILE;

pub extern "GDI32" fn CombineRgn(
    hrgnDst: HRGN,
    hrgnSrc1: HRGN,
    hrgnSrc2: HRGN,
    iMode: RGN_COMBINE_MODE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn CopyMetaFileA(
    param0: HMETAFILE,
    param1: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HMETAFILE;

pub extern "GDI32" fn CopyMetaFileW(
    param0: HMETAFILE,
    param1: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HMETAFILE;

pub extern "GDI32" fn CreateBitmap(
    nWidth: i32,
    nHeight: i32,
    nPlanes: u32,
    nBitCount: u32,
    lpBits: ?*const c_void,
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

pub extern "GDI32" fn CreateBitmapIndirect(
    pbm: *const BITMAP,
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

pub extern "GDI32" fn CreateBrushIndirect(
    plbrush: *const LOGBRUSH,
) callconv(@import("std").os.windows.WINAPI) HBRUSH;

pub extern "GDI32" fn CreateCompatibleBitmap(
    hdc: HDC,
    cx: i32,
    cy: i32,
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

pub extern "GDI32" fn CreateDiscardableBitmap(
    hdc: HDC,
    cx: i32,
    cy: i32,
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

pub extern "GDI32" fn CreateCompatibleDC(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) HDC;

pub extern "GDI32" fn CreateDCA(
    pwszDriver: ?[*:0]const u8,
    pwszDevice: ?[*:0]const u8,
    pszPort: ?[*:0]const u8,
    pdm: ?*const DEVMODEA,
) callconv(@import("std").os.windows.WINAPI) HDC;

pub extern "GDI32" fn CreateDCW(
    pwszDriver: ?[*:0]const u16,
    pwszDevice: ?[*:0]const u16,
    pszPort: ?[*:0]const u16,
    pdm: ?*const DEVMODEW,
) callconv(@import("std").os.windows.WINAPI) HDC;

pub extern "GDI32" fn CreateDIBitmap(
    hdc: HDC,
    pbmih: ?*const BITMAPINFOHEADER,
    flInit: u32,
    pjBits: ?*const c_void,
    pbmi: ?*const BITMAPINFO,
    iUsage: CreateDIBitmap_iUsage,
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

pub extern "GDI32" fn CreateDIBPatternBrush(
    h: ?*c_void,
    iUsage: CreateDIBitmap_iUsage,
) callconv(@import("std").os.windows.WINAPI) HBRUSH;

pub extern "GDI32" fn CreateDIBPatternBrushPt(
    lpPackedDIB: *const c_void,
    iUsage: CreateDIBitmap_iUsage,
) callconv(@import("std").os.windows.WINAPI) HBRUSH;

pub extern "GDI32" fn CreateEllipticRgn(
    x1: i32,
    y1: i32,
    x2: i32,
    y2: i32,
) callconv(@import("std").os.windows.WINAPI) HRGN;

pub extern "GDI32" fn CreateEllipticRgnIndirect(
    lprect: *const RECT,
) callconv(@import("std").os.windows.WINAPI) HRGN;

pub extern "GDI32" fn CreateFontIndirectA(
    lplf: *const LOGFONTA,
) callconv(@import("std").os.windows.WINAPI) HFONT;

pub extern "GDI32" fn CreateFontIndirectW(
    lplf: *const LOGFONTW,
) callconv(@import("std").os.windows.WINAPI) HFONT;

pub extern "GDI32" fn CreateFontA(
    cHeight: i32,
    cWidth: i32,
    cEscapement: i32,
    cOrientation: i32,
    cWeight: i32,
    bItalic: u32,
    bUnderline: u32,
    bStrikeOut: u32,
    iCharSet: u32,
    iOutPrecision: CreateFont_iOutPrecision,
    iClipPrecision: CreateFont_iClipPrecision,
    iQuality: CreateFont_iQuality,
    iPitchAndFamily: CreateFont_iPitchAndFamily,
    pszFaceName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HFONT;

pub extern "GDI32" fn CreateFontW(
    cHeight: i32,
    cWidth: i32,
    cEscapement: i32,
    cOrientation: i32,
    cWeight: i32,
    bItalic: u32,
    bUnderline: u32,
    bStrikeOut: u32,
    iCharSet: u32,
    iOutPrecision: CreateFont_iOutPrecision,
    iClipPrecision: CreateFont_iClipPrecision,
    iQuality: CreateFont_iQuality,
    iPitchAndFamily: CreateFont_iPitchAndFamily,
    pszFaceName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HFONT;

pub extern "GDI32" fn CreateHatchBrush(
    iHatch: CreateHatchBrush_iHatchFlags,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) HBRUSH;

pub extern "GDI32" fn CreateICA(
    pszDriver: ?[*:0]const u8,
    pszDevice: ?[*:0]const u8,
    pszPort: ?[*:0]const u8,
    pdm: ?*const DEVMODEA,
) callconv(@import("std").os.windows.WINAPI) HDC;

pub extern "GDI32" fn CreateICW(
    pszDriver: ?[*:0]const u16,
    pszDevice: ?[*:0]const u16,
    pszPort: ?[*:0]const u16,
    pdm: ?*const DEVMODEW,
) callconv(@import("std").os.windows.WINAPI) HDC;

pub extern "GDI32" fn CreateMetaFileA(
    pszFile: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HdcMetdataFileHandle;

pub extern "GDI32" fn CreateMetaFileW(
    pszFile: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HdcMetdataFileHandle;

pub extern "GDI32" fn CreatePalette(
    plpal: *const LOGPALETTE,
) callconv(@import("std").os.windows.WINAPI) HPALETTE;

pub extern "GDI32" fn CreatePen(
    iStyle: CreatePen_iStyleFlags,
    cWidth: i32,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) HPEN;

pub extern "GDI32" fn CreatePenIndirect(
    plpen: *const LOGPEN,
) callconv(@import("std").os.windows.WINAPI) HPEN;

pub extern "GDI32" fn CreatePolyPolygonRgn(
    pptl: *const POINT,
    pc: [*]const i32,
    cPoly: i32,
    iMode: CreatePolygonRgn_iMode,
) callconv(@import("std").os.windows.WINAPI) HRGN;

pub extern "GDI32" fn CreatePatternBrush(
    hbm: HBITMAP,
) callconv(@import("std").os.windows.WINAPI) HBRUSH;

pub extern "GDI32" fn CreateRectRgn(
    x1: i32,
    y1: i32,
    x2: i32,
    y2: i32,
) callconv(@import("std").os.windows.WINAPI) HRGN;

pub extern "GDI32" fn CreateRectRgnIndirect(
    lprect: *const RECT,
) callconv(@import("std").os.windows.WINAPI) HRGN;

pub extern "GDI32" fn CreateRoundRectRgn(
    x1: i32,
    y1: i32,
    x2: i32,
    y2: i32,
    w: i32,
    h: i32,
) callconv(@import("std").os.windows.WINAPI) HRGN;

pub extern "GDI32" fn CreateScalableFontResourceA(
    fdwHidden: Net_level,
    lpszFont: [*:0]const u8,
    lpszFile: [*:0]const u8,
    lpszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn CreateScalableFontResourceW(
    fdwHidden: Net_level,
    lpszFont: [*:0]const u16,
    lpszFile: [*:0]const u16,
    lpszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn CreateSolidBrush(
    color: u32,
) callconv(@import("std").os.windows.WINAPI) HBRUSH;

pub extern "GDI32" fn DeleteDC(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn DeleteMetaFile(
    hmf: HMETAFILE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn DeleteObject(
    ho: HGDIOBJ,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn DrawEscape(
    hdc: HDC,
    iEscape: i32,
    cjIn: i32,
    lpIn: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn Ellipse(
    hdc: HDC,
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn EnumFontFamiliesExA(
    hdc: HDC,
    lpLogfont: *LOGFONTA,
    lpProc: FONTENUMPROCA,
    lParam: LPARAM,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn EnumFontFamiliesExW(
    hdc: HDC,
    lpLogfont: *LOGFONTW,
    lpProc: FONTENUMPROCW,
    lParam: LPARAM,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn EnumFontFamiliesA(
    hdc: HDC,
    lpLogfont: ?[*:0]const u8,
    lpProc: FONTENUMPROCA,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn EnumFontFamiliesW(
    hdc: HDC,
    lpLogfont: ?[*:0]const u16,
    lpProc: FONTENUMPROCW,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn EnumFontsA(
    hdc: HDC,
    lpLogfont: ?[*:0]const u8,
    lpProc: FONTENUMPROCA,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn EnumFontsW(
    hdc: HDC,
    lpLogfont: ?[*:0]const u16,
    lpProc: FONTENUMPROCW,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn EnumObjects(
    hdc: HDC,
    nType: OBJ_TYPE,
    lpFunc: GOBJENUMPROC,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn EqualRgn(
    hrgn1: HRGN,
    hrgn2: HRGN,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn ExcludeClipRect(
    hdc: HDC,
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn ExtCreateRegion(
    lpx: ?*const XFORM,
    nCount: u32,
    lpData: [*]const RGNDATA,
) callconv(@import("std").os.windows.WINAPI) HRGN;

pub extern "GDI32" fn ExtFloodFill(
    hdc: HDC,
    x: i32,
    y: i32,
    color: u32,
    type: ExtFloodFill_typeFlags,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn FillRgn(
    hdc: HDC,
    hrgn: HRGN,
    hbr: HBRUSH,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn FloodFill(
    hdc: HDC,
    x: i32,
    y: i32,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn FrameRgn(
    hdc: HDC,
    hrgn: HRGN,
    hbr: HBRUSH,
    w: i32,
    h: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetROP2(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetAspectRatioFilterEx(
    hdc: HDC,
    lpsize: *SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetBkColor(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetDCBrushColor(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetDCPenColor(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetBkMode(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetBitmapBits(
    hbit: HBITMAP,
    cb: i32,
    lpvBits: [*]u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetBitmapDimensionEx(
    hbit: HBITMAP,
    lpsize: *SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetBoundsRect(
    hdc: HDC,
    lprect: *RECT,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetBrushOrgEx(
    hdc: HDC,
    lppt: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetCharWidthA(
    hdc: HDC,
    iFirst: u32,
    iLast: u32,
    lpBuffer: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetCharWidthW(
    hdc: HDC,
    iFirst: u32,
    iLast: u32,
    lpBuffer: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetCharWidth32A(
    hdc: HDC,
    iFirst: u32,
    iLast: u32,
    lpBuffer: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetCharWidth32W(
    hdc: HDC,
    iFirst: u32,
    iLast: u32,
    lpBuffer: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetCharWidthFloatA(
    hdc: HDC,
    iFirst: u32,
    iLast: u32,
    lpBuffer: *f32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetCharWidthFloatW(
    hdc: HDC,
    iFirst: u32,
    iLast: u32,
    lpBuffer: *f32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetCharABCWidthsA(
    hdc: HDC,
    wFirst: u32,
    wLast: u32,
    lpABC: *ABC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetCharABCWidthsW(
    hdc: HDC,
    wFirst: u32,
    wLast: u32,
    lpABC: *ABC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetCharABCWidthsFloatA(
    hdc: HDC,
    iFirst: u32,
    iLast: u32,
    lpABC: *ABCFLOAT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetCharABCWidthsFloatW(
    hdc: HDC,
    iFirst: u32,
    iLast: u32,
    lpABC: *ABCFLOAT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetClipBox(
    hdc: HDC,
    lprect: *RECT,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetClipRgn(
    hdc: HDC,
    hrgn: HRGN,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetMetaRgn(
    hdc: HDC,
    hrgn: HRGN,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetCurrentObject(
    hdc: HDC,
    type: OBJ_TYPE,
) callconv(@import("std").os.windows.WINAPI) HGDIOBJ;

pub extern "GDI32" fn GetCurrentPositionEx(
    hdc: HDC,
    lppt: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetDeviceCaps(
    hdc: HDC,
    index: GetDeviceCaps_indexFlags,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetDIBits(
    hdc: HDC,
    hbm: HBITMAP,
    start: u32,
    cLines: u32,
    lpvBits: ?*c_void,
    lpbmi: *BITMAPINFO,
    usage: CreateDIBitmap_iUsage,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetFontData(
    hdc: HDC,
    dwTable: u32,
    dwOffset: u32,
    pvBuffer: ?[*]u8,
    cjBuffer: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetGlyphOutlineA(
    hdc: HDC,
    uChar: u32,
    fuFormat: GetGlyphOutline_fuFormat,
    lpgm: *GLYPHMETRICS,
    cjBuffer: u32,
    pvBuffer: ?[*]u8,
    lpmat2: *const MAT2,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetGlyphOutlineW(
    hdc: HDC,
    uChar: u32,
    fuFormat: GetGlyphOutline_fuFormat,
    lpgm: *GLYPHMETRICS,
    cjBuffer: u32,
    pvBuffer: ?[*]u8,
    lpmat2: *const MAT2,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetGraphicsMode(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetMapMode(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetMetaFileBitsEx(
    hMF: HMETAFILE,
    cbBuffer: u32,
    lpData: ?[*]u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetMetaFileA(
    lpName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HMETAFILE;

pub extern "GDI32" fn GetMetaFileW(
    lpName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HMETAFILE;

pub extern "GDI32" fn GetNearestColor(
    hdc: HDC,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetNearestPaletteIndex(
    h: HPALETTE,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetObjectType(
    h: HGDIOBJ,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetOutlineTextMetricsA(
    hdc: HDC,
    cjCopy: u32,
    potm: ?[*]OUTLINETEXTMETRICA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetOutlineTextMetricsW(
    hdc: HDC,
    cjCopy: u32,
    potm: ?[*]OUTLINETEXTMETRICW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetPaletteEntries(
    hpal: HPALETTE,
    iStart: u32,
    cEntries: u32,
    pPalEntries: ?[*]PALETTEENTRY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetPixel(
    hdc: HDC,
    x: i32,
    y: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetPolyFillMode(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetRasterizerCaps(
    lpraststat: [*]RASTERIZER_STATUS,
    cjBytes: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetRandomRgn(
    hdc: HDC,
    hrgn: HRGN,
    i: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetRegionData(
    hrgn: HRGN,
    nCount: u32,
    lpRgnData: ?[*]RGNDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetRgnBox(
    hrgn: HRGN,
    lprc: *RECT,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetStockObject(
    i: GetStockObject_iFlags,
) callconv(@import("std").os.windows.WINAPI) HGDIOBJ;

pub extern "GDI32" fn GetStretchBltMode(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetSystemPaletteEntries(
    hdc: HDC,
    iStart: u32,
    cEntries: u32,
    pPalEntries: ?[*]PALETTEENTRY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetSystemPaletteUse(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetTextCharacterExtra(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetTextAlign(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetTextColor(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetTextExtentPointA(
    hdc: HDC,
    lpString: [*:0]const u8,
    c: i32,
    lpsz: *SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetTextExtentPointW(
    hdc: HDC,
    lpString: [*:0]const u16,
    c: i32,
    lpsz: *SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetTextExtentPoint32A(
    hdc: HDC,
    lpString: [*:0]const u8,
    c: i32,
    psizl: *SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetTextExtentPoint32W(
    hdc: HDC,
    lpString: [*:0]const u16,
    c: i32,
    psizl: *SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetTextExtentExPointA(
    hdc: HDC,
    lpszString: [*:0]const u8,
    cchString: i32,
    nMaxExtent: i32,
    lpnFit: ?*i32,
    lpnDx: ?[*]i32,
    lpSize: *SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetTextExtentExPointW(
    hdc: HDC,
    lpszString: [*:0]const u16,
    cchString: i32,
    nMaxExtent: i32,
    lpnFit: ?*i32,
    lpnDx: ?[*]i32,
    lpSize: *SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetFontLanguageInfo(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetCharacterPlacementA(
    hdc: HDC,
    lpString: [*:0]const u8,
    nCount: i32,
    nMexExtent: i32,
    lpResults: *GCP_RESULTSA,
    dwFlags: GetCharacterPlacement_dwFlags,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetCharacterPlacementW(
    hdc: HDC,
    lpString: [*:0]const u16,
    nCount: i32,
    nMexExtent: i32,
    lpResults: *GCP_RESULTSW,
    dwFlags: GetCharacterPlacement_dwFlags,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetFontUnicodeRanges(
    hdc: HDC,
    lpgs: ?*GLYPHSET,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetGlyphIndicesA(
    hdc: HDC,
    lpstr: [*:0]const u8,
    c: i32,
    pgi: [*:0]u16,
    fl: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetGlyphIndicesW(
    hdc: HDC,
    lpstr: [*:0]const u16,
    c: i32,
    pgi: [*:0]u16,
    fl: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetTextExtentPointI(
    hdc: HDC,
    pgiIn: [*:0]u16,
    cgi: i32,
    psize: *SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetTextExtentExPointI(
    hdc: HDC,
    lpwszString: [*:0]u16,
    cwchString: i32,
    nMaxExtent: i32,
    lpnFit: ?*i32,
    lpnDx: ?[*]i32,
    lpSize: *SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetCharWidthI(
    hdc: HDC,
    giFirst: u32,
    cgi: u32,
    pgi: ?[*:0]u16,
    piWidths: [*]i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetCharABCWidthsI(
    hdc: HDC,
    giFirst: u32,
    cgi: u32,
    pgi: ?[*:0]u16,
    pabc: [*]ABC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn AddFontResourceExA(
    name: [*:0]const u8,
    fl: AddFontResourceEx_fl,
    res: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn AddFontResourceExW(
    name: [*:0]const u16,
    fl: AddFontResourceEx_fl,
    res: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn RemoveFontResourceExA(
    name: [*:0]const u8,
    fl: u32,
    pdv: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn RemoveFontResourceExW(
    name: [*:0]const u16,
    fl: u32,
    pdv: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn AddFontMemResourceEx(
    pFileView: [*]u8,
    cjSize: u32,
    pvResrved: *c_void,
    pNumFonts: *u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "GDI32" fn RemoveFontMemResourceEx(
    h: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn CreateFontIndirectExA(
    param0: *const ENUMLOGFONTEXDVA,
) callconv(@import("std").os.windows.WINAPI) HFONT;

pub extern "GDI32" fn CreateFontIndirectExW(
    param0: *const ENUMLOGFONTEXDVW,
) callconv(@import("std").os.windows.WINAPI) HFONT;

pub extern "GDI32" fn GetViewportExtEx(
    hdc: HDC,
    lpsize: *SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetViewportOrgEx(
    hdc: HDC,
    lppoint: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetWindowExtEx(
    hdc: HDC,
    lpsize: *SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetWindowOrgEx(
    hdc: HDC,
    lppoint: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn IntersectClipRect(
    hdc: HDC,
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn InvertRgn(
    hdc: HDC,
    hrgn: HRGN,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn LineDDA(
    xStart: i32,
    yStart: i32,
    xEnd: i32,
    yEnd: i32,
    lpProc: LINEDDAPROC,
    data: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn LineTo(
    hdc: HDC,
    x: i32,
    y: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn MaskBlt(
    hdcDest: HDC,
    xDest: i32,
    yDest: i32,
    width: i32,
    height: i32,
    hdcSrc: HDC,
    xSrc: i32,
    ySrc: i32,
    hbmMask: HBITMAP,
    xMask: i32,
    yMask: i32,
    rop: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn PlgBlt(
    hdcDest: HDC,
    lpPoint: *[3]POINT,
    hdcSrc: HDC,
    xSrc: i32,
    ySrc: i32,
    width: i32,
    height: i32,
    hbmMask: HBITMAP,
    xMask: i32,
    yMask: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn OffsetClipRgn(
    hdc: HDC,
    x: i32,
    y: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn OffsetRgn(
    hrgn: HRGN,
    x: i32,
    y: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn PatBlt(
    hdc: HDC,
    x: i32,
    y: i32,
    w: i32,
    h: i32,
    rop: PatBlt_ropFlags,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn Pie(
    hdc: HDC,
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
    xr1: i32,
    yr1: i32,
    xr2: i32,
    yr2: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn PlayMetaFile(
    hdc: HDC,
    hmf: HMETAFILE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn PaintRgn(
    hdc: HDC,
    hrgn: HRGN,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn PolyPolygon(
    hdc: HDC,
    apt: *const POINT,
    asz: [*]const i32,
    csz: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn PtInRegion(
    hrgn: HRGN,
    x: i32,
    y: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn PtVisible(
    hdc: HDC,
    x: i32,
    y: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn RectInRegion(
    hrgn: HRGN,
    lprect: *const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn RectVisible(
    hdc: HDC,
    lprect: *const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn Rectangle(
    hdc: HDC,
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn RestoreDC(
    hdc: HDC,
    nSavedDC: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn ResetDCA(
    hdc: HDC,
    lpdm: *const DEVMODEA,
) callconv(@import("std").os.windows.WINAPI) HDC;

pub extern "GDI32" fn ResetDCW(
    hdc: HDC,
    lpdm: *const DEVMODEW,
) callconv(@import("std").os.windows.WINAPI) HDC;

pub extern "GDI32" fn RealizePalette(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn RemoveFontResourceA(
    lpFileName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn RemoveFontResourceW(
    lpFileName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn RoundRect(
    hdc: HDC,
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
    width: i32,
    height: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn ResizePalette(
    hpal: HPALETTE,
    n: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn SaveDC(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn SelectClipRgn(
    hdc: HDC,
    hrgn: HRGN,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn ExtSelectClipRgn(
    hdc: HDC,
    hrgn: HRGN,
    mode: CombineRgn_iMode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn SetMetaRgn(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn SelectObject(
    hdc: HDC,
    h: HGDIOBJ,
) callconv(@import("std").os.windows.WINAPI) HGDIOBJ;

pub extern "GDI32" fn SelectPalette(
    hdc: HDC,
    hPal: HPALETTE,
    bForceBkgd: BOOL,
) callconv(@import("std").os.windows.WINAPI) HPALETTE;

pub extern "GDI32" fn SetBkColor(
    hdc: HDC,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn SetDCBrushColor(
    hdc: HDC,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn SetDCPenColor(
    hdc: HDC,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn SetBkMode(
    hdc: HDC,
    mode: SetBkMode_modeFlags,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn SetBitmapBits(
    hbm: HBITMAP,
    cb: u32,
    pvBits: [*]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn SetBoundsRect(
    hdc: HDC,
    lprect: ?*const RECT,
    flags: SetBoundsRect_flags,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn SetDIBits(
    hdc: HDC,
    hbm: HBITMAP,
    start: u32,
    cLines: u32,
    lpBits: *const c_void,
    lpbmi: *const BITMAPINFO,
    ColorUse: DIB_USAGE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn SetDIBitsToDevice(
    hdc: HDC,
    xDest: i32,
    yDest: i32,
    w: u32,
    h: u32,
    xSrc: i32,
    ySrc: i32,
    StartScan: u32,
    cLines: u32,
    lpvBits: *const c_void,
    lpbmi: *const BITMAPINFO,
    ColorUse: DIB_USAGE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn SetMapperFlags(
    hdc: HDC,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn SetGraphicsMode(
    hdc: HDC,
    iMode: SetGraphicsMode_iModeFlags,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn SetMapMode(
    hdc: HDC,
    iMode: SetMapMode_iModeFlags,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn SetLayout(
    hdc: HDC,
    l: SetLayout_lFlags,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetLayout(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn SetMetaFileBitsEx(
    cbBuffer: u32,
    lpData: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HMETAFILE;

pub extern "GDI32" fn SetPaletteEntries(
    hpal: HPALETTE,
    iStart: u32,
    cEntries: u32,
    pPalEntries: [*]const PALETTEENTRY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn SetPixel(
    hdc: HDC,
    x: i32,
    y: i32,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn SetPixelV(
    hdc: HDC,
    x: i32,
    y: i32,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn SetPolyFillMode(
    hdc: HDC,
    mode: CreatePolygonRgn_iMode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn StretchBlt(
    hdcDest: HDC,
    xDest: i32,
    yDest: i32,
    wDest: i32,
    hDest: i32,
    hdcSrc: HDC,
    xSrc: i32,
    ySrc: i32,
    wSrc: i32,
    hSrc: i32,
    rop: ROP_CODE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn SetRectRgn(
    hrgn: HRGN,
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn StretchDIBits(
    hdc: HDC,
    xDest: i32,
    yDest: i32,
    DestWidth: i32,
    DestHeight: i32,
    xSrc: i32,
    ySrc: i32,
    SrcWidth: i32,
    SrcHeight: i32,
    lpBits: ?*const c_void,
    lpbmi: *const BITMAPINFO,
    iUsage: DIB_USAGE,
    rop: ROP_CODE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn SetROP2(
    hdc: HDC,
    rop2: R2_MODE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn SetStretchBltMode(
    hdc: HDC,
    mode: SetStretchBltMode_modeFlags,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn SetSystemPaletteUse(
    hdc: HDC,
    use: SetSystemPaletteUse_useFlags,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn SetTextCharacterExtra(
    hdc: HDC,
    extra: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn SetTextColor(
    hdc: HDC,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn SetTextAlign(
    hdc: HDC,
    @"align": u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn SetTextJustification(
    hdc: HDC,
    extra: i32,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn UpdateColors(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSIMG32" fn AlphaBlend(
    hdcDest: HDC,
    xoriginDest: i32,
    yoriginDest: i32,
    wDest: i32,
    hDest: i32,
    hdcSrc: HDC,
    xoriginSrc: i32,
    yoriginSrc: i32,
    wSrc: i32,
    hSrc: i32,
    ftn: BLENDFUNCTION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSIMG32" fn TransparentBlt(
    hdcDest: HDC,
    xoriginDest: i32,
    yoriginDest: i32,
    wDest: i32,
    hDest: i32,
    hdcSrc: HDC,
    xoriginSrc: i32,
    yoriginSrc: i32,
    wSrc: i32,
    hSrc: i32,
    crTransparent: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSIMG32" fn GradientFill(
    hdc: HDC,
    pVertex: [*]TRIVERTEX,
    nVertex: u32,
    pMesh: *c_void,
    nMesh: u32,
    ulMode: GRADIENT_FILL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GdiAlphaBlend(
    hdcDest: HDC,
    xoriginDest: i32,
    yoriginDest: i32,
    wDest: i32,
    hDest: i32,
    hdcSrc: HDC,
    xoriginSrc: i32,
    yoriginSrc: i32,
    wSrc: i32,
    hSrc: i32,
    ftn: BLENDFUNCTION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GdiTransparentBlt(
    hdcDest: HDC,
    xoriginDest: i32,
    yoriginDest: i32,
    wDest: i32,
    hDest: i32,
    hdcSrc: HDC,
    xoriginSrc: i32,
    yoriginSrc: i32,
    wSrc: i32,
    hSrc: i32,
    crTransparent: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GdiGradientFill(
    hdc: HDC,
    pVertex: [*]TRIVERTEX,
    nVertex: u32,
    pMesh: *c_void,
    nCount: u32,
    ulMode: GRADIENT_FILL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn PlayMetaFileRecord(
    hdc: HDC,
    lpHandleTable: [*]HANDLETABLE,
    lpMR: *METARECORD,
    noObjs: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn EnumMetaFile(
    hdc: HDC,
    hmf: HMETAFILE,
    proc: MFENUMPROC,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn CloseEnhMetaFile(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) HENHMETAFILE;

pub extern "GDI32" fn CopyEnhMetaFileA(
    hEnh: HENHMETAFILE,
    lpFileName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HENHMETAFILE;

pub extern "GDI32" fn CopyEnhMetaFileW(
    hEnh: HENHMETAFILE,
    lpFileName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HENHMETAFILE;

pub extern "GDI32" fn CreateEnhMetaFileA(
    hdc: HDC,
    lpFilename: ?[*:0]const u8,
    lprc: ?*const RECT,
    lpDesc: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HdcMetdataEnhFileHandle;

pub extern "GDI32" fn CreateEnhMetaFileW(
    hdc: HDC,
    lpFilename: ?[*:0]const u16,
    lprc: ?*const RECT,
    lpDesc: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HdcMetdataEnhFileHandle;

pub extern "GDI32" fn DeleteEnhMetaFile(
    hmf: HENHMETAFILE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn EnumEnhMetaFile(
    hdc: HDC,
    hmf: HENHMETAFILE,
    proc: ENHMFENUMPROC,
    param3: ?*c_void,
    lpRect: ?*const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetEnhMetaFileA(
    lpName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HENHMETAFILE;

pub extern "GDI32" fn GetEnhMetaFileW(
    lpName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HENHMETAFILE;

pub extern "GDI32" fn GetEnhMetaFileBits(
    hEMF: HENHMETAFILE,
    nSize: u32,
    lpData: ?[*:0]u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetEnhMetaFileDescriptionA(
    hemf: HENHMETAFILE,
    cchBuffer: u32,
    lpDescription: ?[*:0]u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetEnhMetaFileDescriptionW(
    hemf: HENHMETAFILE,
    cchBuffer: u32,
    lpDescription: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetEnhMetaFileHeader(
    hemf: HENHMETAFILE,
    nSize: u32,
    lpEnhMetaHeader: ?[*]ENHMETAHEADER,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetEnhMetaFilePaletteEntries(
    hemf: HENHMETAFILE,
    nNumEntries: u32,
    lpPaletteEntries: ?[*]PALETTEENTRY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetWinMetaFileBits(
    hemf: HENHMETAFILE,
    cbData16: u32,
    pData16: ?[*:0]u8,
    iMapMode: i32,
    hdcRef: HDC,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn PlayEnhMetaFile(
    hdc: HDC,
    hmf: HENHMETAFILE,
    lprect: *const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn PlayEnhMetaFileRecord(
    hdc: HDC,
    pht: [*]HANDLETABLE,
    pmr: *const ENHMETARECORD,
    cht: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn SetEnhMetaFileBits(
    nSize: u32,
    pb: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HENHMETAFILE;

pub extern "GDI32" fn SetWinMetaFileBits(
    nSize: u32,
    lpMeta16Data: [*:0]const u8,
    hdcRef: HDC,
    lpMFP: ?*const METAFILEPICT,
) callconv(@import("std").os.windows.WINAPI) HENHMETAFILE;

pub extern "GDI32" fn GdiComment(
    hdc: HDC,
    nSize: u32,
    lpData: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetTextMetricsA(
    hdc: HDC,
    lptm: *TEXTMETRICA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetTextMetricsW(
    hdc: HDC,
    lptm: *TEXTMETRICW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn AngleArc(
    hdc: HDC,
    x: i32,
    y: i32,
    r: u32,
    StartAngle: f32,
    SweepAngle: f32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn PolyPolyline(
    hdc: HDC,
    apt: *const POINT,
    asz: [*]const u32,
    csz: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetWorldTransform(
    hdc: HDC,
    lpxf: *XFORM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn SetWorldTransform(
    hdc: HDC,
    lpxf: *const XFORM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn ModifyWorldTransform(
    hdc: HDC,
    lpxf: ?*const XFORM,
    mode: ModifyWorldTransform_modeFlags,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn CombineTransform(
    lpxfOut: *XFORM,
    lpxf1: *const XFORM,
    lpxf2: *const XFORM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn CreateDIBSection(
    hdc: HDC,
    pbmi: *const BITMAPINFO,
    usage: DIB_USAGE,
    ppvBits: **c_void,
    hSection: HANDLE,
    offset: u32,
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

pub extern "GDI32" fn GetDIBColorTable(
    hdc: HDC,
    iStart: u32,
    cEntries: u32,
    prgbq: [*]RGBQUAD,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn SetDIBColorTable(
    hdc: HDC,
    iStart: u32,
    cEntries: u32,
    prgbq: [*]const RGBQUAD,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn SetColorAdjustment(
    hdc: HDC,
    lpca: *const COLORADJUSTMENT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetColorAdjustment(
    hdc: HDC,
    lpca: *COLORADJUSTMENT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn CreateHalftonePalette(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) HPALETTE;

pub extern "GDI32" fn AbortPath(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn ArcTo(
    hdc: HDC,
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
    xr1: i32,
    yr1: i32,
    xr2: i32,
    yr2: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn BeginPath(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn CloseFigure(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn EndPath(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn FillPath(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn FlattenPath(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetPath(
    hdc: HDC,
    apt: ?[*]POINT,
    aj: ?[*:0]u8,
    cpt: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn PathToRegion(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) HRGN;

pub extern "GDI32" fn PolyDraw(
    hdc: HDC,
    apt: [*]const POINT,
    aj: [*:0]const u8,
    cpt: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn SelectClipPath(
    hdc: HDC,
    mode: CombineRgn_iMode,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn SetArcDirection(
    hdc: HDC,
    dir: SetArcDirection_dirFlags,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn SetMiterLimit(
    hdc: HDC,
    limit: f32,
    old: ?*f32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn StrokeAndFillPath(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn StrokePath(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn WidenPath(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn ExtCreatePen(
    iPenStyle: ExtCreatePen_iPenStyleFlags,
    cWidth: u32,
    plbrush: *const LOGBRUSH,
    cStyle: u32,
    pstyle: ?[*]const u32,
) callconv(@import("std").os.windows.WINAPI) HPEN;

pub extern "GDI32" fn GetMiterLimit(
    hdc: HDC,
    plimit: *f32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetArcDirection(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetObjectW(
    h: HANDLE,
    c: i32,
    pv: ?[*]u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn MoveToEx(
    hdc: HDC,
    x: i32,
    y: i32,
    lppt: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn TextOutA(
    hdc: HDC,
    x: i32,
    y: i32,
    lpString: [*:0]const u8,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn TextOutW(
    hdc: HDC,
    x: i32,
    y: i32,
    lpString: [*:0]const u16,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn ExtTextOutA(
    hdc: HDC,
    x: i32,
    y: i32,
    options: ETO_OPTIONS,
    lprect: ?*const RECT,
    lpString: ?[*:0]const u8,
    c: u32,
    lpDx: ?[*]const i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn ExtTextOutW(
    hdc: HDC,
    x: i32,
    y: i32,
    options: ScriptStringOut_uOptionsFlags,
    lprect: ?*const RECT,
    lpString: ?[*:0]const u16,
    c: u32,
    lpDx: ?[*]const i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn PolyTextOutA(
    hdc: HDC,
    ppt: [*]const POLYTEXTA,
    nstrings: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn PolyTextOutW(
    hdc: HDC,
    ppt: [*]const POLYTEXTW,
    nstrings: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn CreatePolygonRgn(
    pptl: [*]const POINT,
    cPoint: i32,
    iMode: CreatePolygonRgn_iMode,
) callconv(@import("std").os.windows.WINAPI) HRGN;

pub extern "GDI32" fn DPtoLP(
    hdc: HDC,
    lppt: [*]POINT,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn LPtoDP(
    hdc: HDC,
    lppt: [*]POINT,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn Polygon(
    hdc: HDC,
    apt: [*]const POINT,
    cpt: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn Polyline(
    hdc: HDC,
    apt: [*]const POINT,
    cpt: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn PolyBezier(
    hdc: HDC,
    apt: [*]const POINT,
    cpt: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn PolyBezierTo(
    hdc: HDC,
    apt: [*]const POINT,
    cpt: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn PolylineTo(
    hdc: HDC,
    apt: [*]const POINT,
    cpt: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn SetViewportExtEx(
    hdc: HDC,
    x: i32,
    y: i32,
    lpsz: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn SetViewportOrgEx(
    hdc: HDC,
    x: i32,
    y: i32,
    lppt: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn SetWindowExtEx(
    hdc: HDC,
    x: i32,
    y: i32,
    lpsz: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn SetWindowOrgEx(
    hdc: HDC,
    x: i32,
    y: i32,
    lppt: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn OffsetViewportOrgEx(
    hdc: HDC,
    x: i32,
    y: i32,
    lppt: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn OffsetWindowOrgEx(
    hdc: HDC,
    x: i32,
    y: i32,
    lppt: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn ScaleViewportExtEx(
    hdc: HDC,
    xn: i32,
    dx: i32,
    yn: i32,
    yd: i32,
    lpsz: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn ScaleWindowExtEx(
    hdc: HDC,
    xn: i32,
    xd: i32,
    yn: i32,
    yd: i32,
    lpsz: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn SetBitmapDimensionEx(
    hbm: HBITMAP,
    w: i32,
    h: i32,
    lpsz: ?*SIZE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn SetBrushOrgEx(
    hdc: HDC,
    x: i32,
    y: i32,
    lppt: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GetTextFaceA(
    hdc: HDC,
    c: i32,
    lpName: ?[*:0]u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetTextFaceW(
    hdc: HDC,
    c: i32,
    lpName: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetKerningPairsA(
    hdc: HDC,
    nPairs: u32,
    lpKernPair: ?[*]KERNINGPAIR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetKerningPairsW(
    hdc: HDC,
    nPairs: u32,
    lpKernPair: ?[*]KERNINGPAIR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GetDCOrgEx(
    hdc: HDC,
    lppt: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn FixBrushOrgEx(
    hdc: HDC,
    x: i32,
    y: i32,
    ptl: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn UnrealizeObject(
    h: HGDIOBJ,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GdiFlush(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "GDI32" fn GdiSetBatchLimit(
    dw: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "GDI32" fn GdiGetBatchLimit(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "OPENGL32" fn wglSwapMultipleBuffers(
    param0: u32,
    param1: *const WGLSWAP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "FONTSUB" fn CreateFontPackage(
    puchSrcBuffer: *const u8,
    ulSrcBufferSize: u32,
    ppuchFontPackageBuffer: **u8,
    pulFontPackageBufferSize: *u32,
    pulBytesWritten: *u32,
    usFlag: u16,
    usTTCIndex: u16,
    usSubsetFormat: u16,
    usSubsetLanguage: u16,
    usSubsetPlatform: CreateFontPackage_usSubsetPlatformFlags,
    usSubsetEncoding: CreateFontPackage_usSubsetEncodingFlags,
    pusSubsetKeepList: *const u16,
    usSubsetListCount: u16,
    lpfnAllocate: CFP_ALLOCPROC,
    lpfnReAllocate: CFP_REALLOCPROC,
    lpfnFree: CFP_FREEPROC,
    lpvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "FONTSUB" fn MergeFontPackage(
    puchMergeFontBuffer: *const u8,
    ulMergeFontBufferSize: u32,
    puchFontPackageBuffer: *const u8,
    ulFontPackageBufferSize: u32,
    ppuchDestBuffer: **u8,
    pulDestBufferSize: *u32,
    pulBytesWritten: *u32,
    usMode: u16,
    lpfnAllocate: CFP_ALLOCPROC,
    lpfnReAllocate: CFP_REALLOCPROC,
    lpfnFree: CFP_FREEPROC,
    lpvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "t2embed" fn TTEmbedFont(
    hDC: HDC,
    ulFlags: TT_ulFlags,
    ulCharSet: TTEmbedFont_ulCharSet,
    pulPrivStatus: *TT_pulPrivStatus,
    pulStatus: *u32,
    lpfnWriteToStream: WRITEEMBEDPROC,
    lpvWriteStream: *c_void,
    pusCharCodeSet: [*:0]u16,
    usCharCodeCount: u16,
    usLanguage: u16,
    pTTEmbedInfo: ?*TTEMBEDINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "t2embed" fn TTEmbedFontFromFileA(
    hDC: HDC,
    szFontFileName: [*:0]const u8,
    usTTCIndex: u16,
    ulFlags: TT_ulFlags,
    ulCharSet: TTEmbedFont_ulCharSet,
    pulPrivStatus: *TT_pulPrivStatus,
    pulStatus: *u32,
    lpfnWriteToStream: WRITEEMBEDPROC,
    lpvWriteStream: *c_void,
    pusCharCodeSet: [*:0]u16,
    usCharCodeCount: u16,
    usLanguage: u16,
    pTTEmbedInfo: ?*TTEMBEDINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "t2embed" fn TTLoadEmbeddedFont(
    phFontReference: *HANDLE,
    ulFlags: u32,
    pulPrivStatus: *TT_pulPrivStatus,
    ulPrivs: TT_ulPrivs,
    pulStatus: *TTLoadEmbeddedFont_pulStatusFlags,
    lpfnReadFromStream: READEMBEDPROC,
    lpvReadStream: *c_void,
    szWinFamilyName: ?PWSTR,
    szMacFamilyName: ?PSTR,
    pTTLoadInfo: ?*TTLOADINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "t2embed" fn TTGetEmbeddedFontInfo(
    ulFlags: TT_ulFlags,
    pulPrivStatus: *u32,
    ulPrivs: TT_ulPrivs,
    pulStatus: *u32,
    lpfnReadFromStream: READEMBEDPROC,
    lpvReadStream: *c_void,
    pTTLoadInfo: ?*TTLOADINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "t2embed" fn TTDeleteEmbeddedFont(
    hFontReference: HANDLE,
    ulFlags: u32,
    pulStatus: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "t2embed" fn TTGetEmbeddingType(
    hDC: HDC,
    pulEmbedType: *TT_pulPrivStatus,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "t2embed" fn TTCharToUnicode(
    hDC: HDC,
    pucCharCodes: [*:0]u8,
    ulCharCodeSize: u32,
    pusShortCodes: [*:0]u16,
    ulShortCodeSize: u32,
    ulFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "t2embed" fn TTRunValidationTests(
    hDC: HDC,
    pTestParam: *TTVALIDATIONTESTSPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "t2embed" fn TTIsEmbeddingEnabled(
    hDC: HDC,
    pbEnabled: *BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "t2embed" fn TTIsEmbeddingEnabledForFacename(
    lpszFacename: [*:0]const u8,
    pbEnabled: *BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "t2embed" fn TTEnableEmbeddingForFacename(
    lpszFacename: [*:0]const u8,
    bEnable: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "t2embed" fn TTEmbedFontEx(
    hDC: HDC,
    ulFlags: TT_ulFlags,
    ulCharSet: TTEmbedFont_ulCharSet,
    pulPrivStatus: *TT_pulPrivStatus,
    pulStatus: *u32,
    lpfnWriteToStream: WRITEEMBEDPROC,
    lpvWriteStream: *c_void,
    pulCharCodeSet: [*]u32,
    usCharCodeCount: u16,
    usLanguage: u16,
    pTTEmbedInfo: ?*TTEMBEDINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "t2embed" fn TTRunValidationTestsEx(
    hDC: HDC,
    pTestParam: *TTVALIDATIONTESTSPARAMSEX,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "t2embed" fn TTGetNewFontName(
    phFontReference: *HANDLE,
    wzWinFamilyName: [*:0]u16,
    cchMaxWinName: i32,
    szMacFamilyName: [*:0]u8,
    cchMaxMacName: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn DrawEdge(
    hdc: HDC,
    qrc: *RECT,
    edge: DRAWEDGE_FLAGS,
    grfFlags: DrawEdge_grfFlags,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DrawFrameControl(
    param0: HDC,
    param1: *RECT,
    param2: DFC_TYPE,
    param3: DFCS_STATE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DrawCaption(
    hwnd: HWND,
    hdc: HDC,
    lprect: *const RECT,
    flags: DrawCaption_flags,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DrawAnimatedRects(
    hwnd: HWND,
    idAni: i32,
    lprcFrom: *const RECT,
    lprcTo: *const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DrawTextA(
    hdc: HDC,
    lpchText: [*:0]const u8,
    cchText: i32,
    lprc: *RECT,
    format: DrawText_format,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn DrawTextW(
    hdc: HDC,
    lpchText: [*:0]const u16,
    cchText: i32,
    lprc: *RECT,
    format: DrawText_format,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn DrawTextExA(
    hdc: HDC,
    lpchText: [*:0]u8,
    cchText: i32,
    lprc: *RECT,
    format: DrawText_format,
    lpdtp: ?*DRAWTEXTPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn DrawTextExW(
    hdc: HDC,
    lpchText: [*:0]u16,
    cchText: i32,
    lprc: *RECT,
    format: DrawText_format,
    lpdtp: ?*DRAWTEXTPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GrayStringA(
    hDC: HDC,
    hBrush: HBRUSH,
    lpOutputFunc: ?GRAYSTRINGPROC,
    lpData: LPARAM,
    nCount: i32,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GrayStringW(
    hDC: HDC,
    hBrush: HBRUSH,
    lpOutputFunc: ?GRAYSTRINGPROC,
    lpData: LPARAM,
    nCount: i32,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DrawStateA(
    hdc: HDC,
    hbrFore: HBRUSH,
    qfnCallBack: ?DRAWSTATEPROC,
    lData: LPARAM,
    wData: WPARAM,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    uFlags: DRAWSTATE_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DrawStateW(
    hdc: HDC,
    hbrFore: HBRUSH,
    qfnCallBack: ?DRAWSTATEPROC,
    lData: LPARAM,
    wData: WPARAM,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    uFlags: DRAWSTATE_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn TabbedTextOutA(
    hdc: HDC,
    x: i32,
    y: i32,
    lpString: [*:0]const u8,
    chCount: i32,
    nTabPositions: i32,
    lpnTabStopPositions: ?[*]const i32,
    nTabOrigin: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn TabbedTextOutW(
    hdc: HDC,
    x: i32,
    y: i32,
    lpString: [*:0]const u16,
    chCount: i32,
    nTabPositions: i32,
    lpnTabStopPositions: ?[*]const i32,
    nTabOrigin: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetTabbedTextExtentA(
    hdc: HDC,
    lpString: [*:0]const u8,
    chCount: i32,
    nTabPositions: i32,
    lpnTabStopPositions: ?[*]const i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetTabbedTextExtentW(
    hdc: HDC,
    lpString: [*:0]const u16,
    chCount: i32,
    nTabPositions: i32,
    lpnTabStopPositions: ?[*]const i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn UpdateWindow(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn PaintDesktop(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn WindowFromDC(
    hDC: HDC,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetDC(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HDC;

pub extern "USER32" fn GetDCEx(
    hWnd: HWND,
    hrgnClip: HRGN,
    flags: GetDCEx_flags,
) callconv(@import("std").os.windows.WINAPI) HDC;

pub extern "USER32" fn GetWindowDC(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HDC;

pub extern "USER32" fn ReleaseDC(
    hWnd: HWND,
    hDC: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn BeginPaint(
    hWnd: HWND,
    lpPaint: *PAINTSTRUCT,
) callconv(@import("std").os.windows.WINAPI) HDC;

pub extern "USER32" fn EndPaint(
    hWnd: HWND,
    lpPaint: *const PAINTSTRUCT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetUpdateRect(
    hWnd: HWND,
    lpRect: ?*RECT,
    bErase: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetUpdateRgn(
    hWnd: HWND,
    hRgn: HRGN,
    bErase: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn SetWindowRgn(
    hWnd: HWND,
    hRgn: HRGN,
    bRedraw: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetWindowRgn(
    hWnd: HWND,
    hRgn: HRGN,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetWindowRgnBox(
    hWnd: HWND,
    lprc: *RECT,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn ExcludeUpdateRgn(
    hDC: HDC,
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn InvalidateRect(
    hWnd: HWND,
    lpRect: ?*const RECT,
    bErase: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ValidateRect(
    hWnd: HWND,
    lpRect: ?*const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn InvalidateRgn(
    hWnd: HWND,
    hRgn: HRGN,
    bErase: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ValidateRgn(
    hWnd: HWND,
    hRgn: HRGN,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn RedrawWindow(
    hWnd: HWND,
    lprcUpdate: ?*const RECT,
    hrgnUpdate: HRGN,
    flags: REDRAW_WINDOW_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn LockWindowUpdate(
    hWndLock: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ClientToScreen(
    hWnd: HWND,
    lpPoint: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ScreenToClient(
    hWnd: HWND,
    lpPoint: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn MapWindowPoints(
    hWndFrom: HWND,
    hWndTo: HWND,
    lpPoints: [*]POINT,
    cPoints: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetSysColorBrush(
    nIndex: i32,
) callconv(@import("std").os.windows.WINAPI) HBRUSH;

pub extern "USER32" fn DrawFocusRect(
    hDC: HDC,
    lprc: *const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn FillRect(
    hDC: HDC,
    lprc: *const RECT,
    hbr: HBRUSH,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn FrameRect(
    hDC: HDC,
    lprc: *const RECT,
    hbr: HBRUSH,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn InvertRect(
    hDC: HDC,
    lprc: *const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetRect(
    lprc: *RECT,
    xLeft: i32,
    yTop: i32,
    xRight: i32,
    yBottom: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetRectEmpty(
    lprc: *RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CopyRect(
    lprcDst: *RECT,
    lprcSrc: *const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn InflateRect(
    lprc: *RECT,
    dx: i32,
    dy: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IntersectRect(
    lprcDst: *RECT,
    lprcSrc1: *const RECT,
    lprcSrc2: *const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn UnionRect(
    lprcDst: *RECT,
    lprcSrc1: *const RECT,
    lprcSrc2: *const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SubtractRect(
    lprcDst: *RECT,
    lprcSrc1: *const RECT,
    lprcSrc2: *const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn OffsetRect(
    lprc: *RECT,
    dx: i32,
    dy: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsRectEmpty(
    lprc: *const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn EqualRect(
    lprc1: *const RECT,
    lprc2: *const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn PtInRect(
    lprc: *const RECT,
    pt: POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn LoadBitmapA(
    hInstance: HINSTANCE,
    lpBitmapName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

pub extern "USER32" fn LoadBitmapW(
    hInstance: HINSTANCE,
    lpBitmapName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HBITMAP;

pub extern "USER32" fn ChangeDisplaySettingsA(
    lpDevMode: ?*DEVMODEA,
    dwFlags: CDS_TYPE,
) callconv(@import("std").os.windows.WINAPI) DISP_CHANGE;

pub extern "USER32" fn ChangeDisplaySettingsW(
    lpDevMode: ?*DEVMODEW,
    dwFlags: CDS_TYPE,
) callconv(@import("std").os.windows.WINAPI) DISP_CHANGE;

pub extern "USER32" fn ChangeDisplaySettingsExA(
    lpszDeviceName: ?[*:0]const u8,
    lpDevMode: ?*DEVMODEA,
    hwnd: HWND,
    dwflags: CDS_TYPE,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) DISP_CHANGE;

pub extern "USER32" fn ChangeDisplaySettingsExW(
    lpszDeviceName: ?[*:0]const u16,
    lpDevMode: ?*DEVMODEW,
    hwnd: HWND,
    dwflags: CDS_TYPE,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) DISP_CHANGE;

pub extern "USER32" fn EnumDisplaySettingsA(
    lpszDeviceName: ?[*:0]const u8,
    iModeNum: ENUM_DISPLAY_SETTINGS_MODE,
    lpDevMode: *DEVMODEA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn EnumDisplaySettingsW(
    lpszDeviceName: ?[*:0]const u16,
    iModeNum: ENUM_DISPLAY_SETTINGS_MODE,
    lpDevMode: *DEVMODEW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn EnumDisplaySettingsExA(
    lpszDeviceName: ?[*:0]const u8,
    iModeNum: ENUM_DISPLAY_SETTINGS_MODE,
    lpDevMode: *DEVMODEA,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn EnumDisplaySettingsExW(
    lpszDeviceName: ?[*:0]const u16,
    iModeNum: ENUM_DISPLAY_SETTINGS_MODE,
    lpDevMode: *DEVMODEW,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn EnumDisplayDevicesA(
    lpDevice: ?[*:0]const u8,
    iDevNum: u32,
    lpDisplayDevice: *DISPLAY_DEVICEA,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn EnumDisplayDevicesW(
    lpDevice: ?[*:0]const u16,
    iDevNum: u32,
    lpDisplayDevice: *DISPLAY_DEVICEW,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn MonitorFromPoint(
    pt: POINT,
    dwFlags: MonitorFrom_dwFlags,
) callconv(@import("std").os.windows.WINAPI) HMONITOR;

pub extern "USER32" fn MonitorFromRect(
    lprc: *RECT,
    dwFlags: MonitorFrom_dwFlags,
) callconv(@import("std").os.windows.WINAPI) HMONITOR;

pub extern "USER32" fn MonitorFromWindow(
    hwnd: HWND,
    dwFlags: MonitorFrom_dwFlags,
) callconv(@import("std").os.windows.WINAPI) HMONITOR;

pub extern "USER32" fn GetMonitorInfoA(
    hMonitor: HMONITOR,
    lpmi: *MONITORINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMonitorInfoW(
    hMonitor: HMONITOR,
    lpmi: *MONITORINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn EnumDisplayMonitors(
    hdc: HDC,
    lprcClip: ?*RECT,
    lpfnEnum: MONITORENUMPROC,
    dwData: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (69)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const TEXTMETRIC = TEXTMETRICA;
        pub const NEWTEXTMETRIC = NEWTEXTMETRICA;
        pub const NEWTEXTMETRICEX = NEWTEXTMETRICEXA;
        pub const ENUMLOGFONT = ENUMLOGFONTA;
        pub const ENUMLOGFONTEX = ENUMLOGFONTEXA;
        pub const EXTLOGFONT = EXTLOGFONTA;
        pub const DISPLAY_DEVICE = DISPLAY_DEVICEA;
        pub const OUTLINETEXTMETRIC = OUTLINETEXTMETRICA;
        pub const POLYTEXT = POLYTEXTA;
        pub const GCP_RESULTS = GCP_RESULTSA;
        pub const OLDFONTENUMPROC = OLDFONTENUMPROCA;
        pub const AXISINFO = AXISINFOA;
        pub const AXESLIST = AXESLISTA;
        pub const ENUMLOGFONTEXDV = ENUMLOGFONTEXDVA;
        pub const ENUMTEXTMETRIC = ENUMTEXTMETRICA;
        pub const MONITORINFOEX = MONITORINFOEXA;
        pub const GetObject = GetObjectA;
        pub const AddFontResource = AddFontResourceA;
        pub const CopyMetaFile = CopyMetaFileA;
        pub const CreateDC = CreateDCA;
        pub const CreateFontIndirect = CreateFontIndirectA;
        pub const CreateFont = CreateFontA;
        pub const CreateIC = CreateICA;
        pub const CreateMetaFile = CreateMetaFileA;
        pub const CreateScalableFontResource = CreateScalableFontResourceA;
        pub const EnumFontFamiliesEx = EnumFontFamiliesExA;
        pub const EnumFontFamilies = EnumFontFamiliesA;
        pub const EnumFonts = EnumFontsA;
        pub const GetCharWidth = GetCharWidthA;
        pub const GetCharWidth32 = GetCharWidth32A;
        pub const GetCharWidthFloat = GetCharWidthFloatA;
        pub const GetCharABCWidths = GetCharABCWidthsA;
        pub const GetCharABCWidthsFloat = GetCharABCWidthsFloatA;
        pub const GetGlyphOutline = GetGlyphOutlineA;
        pub const GetMetaFile = GetMetaFileA;
        pub const GetOutlineTextMetrics = GetOutlineTextMetricsA;
        pub const GetTextExtentPoint = GetTextExtentPointA;
        pub const GetTextExtentPoint32 = GetTextExtentPoint32A;
        pub const GetTextExtentExPoint = GetTextExtentExPointA;
        pub const GetCharacterPlacement = GetCharacterPlacementA;
        pub const GetGlyphIndices = GetGlyphIndicesA;
        pub const AddFontResourceEx = AddFontResourceExA;
        pub const RemoveFontResourceEx = RemoveFontResourceExA;
        pub const CreateFontIndirectEx = CreateFontIndirectExA;
        pub const ResetDC = ResetDCA;
        pub const RemoveFontResource = RemoveFontResourceA;
        pub const CopyEnhMetaFile = CopyEnhMetaFileA;
        pub const CreateEnhMetaFile = CreateEnhMetaFileA;
        pub const GetEnhMetaFile = GetEnhMetaFileA;
        pub const GetEnhMetaFileDescription = GetEnhMetaFileDescriptionA;
        pub const GetTextMetrics = GetTextMetricsA;
        pub const TextOut = TextOutA;
        pub const ExtTextOut = ExtTextOutA;
        pub const PolyTextOut = PolyTextOutA;
        pub const GetTextFace = GetTextFaceA;
        pub const GetKerningPairs = GetKerningPairsA;
        pub const DrawText = DrawTextA;
        pub const DrawTextEx = DrawTextExA;
        pub const GrayString = GrayStringA;
        pub const DrawState = DrawStateA;
        pub const TabbedTextOut = TabbedTextOutA;
        pub const GetTabbedTextExtent = GetTabbedTextExtentA;
        pub const LoadBitmap = LoadBitmapA;
        pub const ChangeDisplaySettings = ChangeDisplaySettingsA;
        pub const ChangeDisplaySettingsEx = ChangeDisplaySettingsExA;
        pub const EnumDisplaySettings = EnumDisplaySettingsA;
        pub const EnumDisplaySettingsEx = EnumDisplaySettingsExA;
        pub const EnumDisplayDevices = EnumDisplayDevicesA;
        pub const GetMonitorInfo = GetMonitorInfoA;
    },
    .wide => struct {
        pub const TEXTMETRIC = TEXTMETRICW;
        pub const NEWTEXTMETRIC = NEWTEXTMETRICW;
        pub const NEWTEXTMETRICEX = NEWTEXTMETRICEXW;
        pub const ENUMLOGFONT = ENUMLOGFONTW;
        pub const ENUMLOGFONTEX = ENUMLOGFONTEXW;
        pub const EXTLOGFONT = EXTLOGFONTW;
        pub const DISPLAY_DEVICE = DISPLAY_DEVICEW;
        pub const OUTLINETEXTMETRIC = OUTLINETEXTMETRICW;
        pub const POLYTEXT = POLYTEXTW;
        pub const GCP_RESULTS = GCP_RESULTSW;
        pub const OLDFONTENUMPROC = OLDFONTENUMPROCW;
        pub const AXISINFO = AXISINFOW;
        pub const AXESLIST = AXESLISTW;
        pub const ENUMLOGFONTEXDV = ENUMLOGFONTEXDVW;
        pub const ENUMTEXTMETRIC = ENUMTEXTMETRICW;
        pub const MONITORINFOEX = MONITORINFOEXW;
        pub const GetObject = GetObjectW;
        pub const AddFontResource = AddFontResourceW;
        pub const CopyMetaFile = CopyMetaFileW;
        pub const CreateDC = CreateDCW;
        pub const CreateFontIndirect = CreateFontIndirectW;
        pub const CreateFont = CreateFontW;
        pub const CreateIC = CreateICW;
        pub const CreateMetaFile = CreateMetaFileW;
        pub const CreateScalableFontResource = CreateScalableFontResourceW;
        pub const EnumFontFamiliesEx = EnumFontFamiliesExW;
        pub const EnumFontFamilies = EnumFontFamiliesW;
        pub const EnumFonts = EnumFontsW;
        pub const GetCharWidth = GetCharWidthW;
        pub const GetCharWidth32 = GetCharWidth32W;
        pub const GetCharWidthFloat = GetCharWidthFloatW;
        pub const GetCharABCWidths = GetCharABCWidthsW;
        pub const GetCharABCWidthsFloat = GetCharABCWidthsFloatW;
        pub const GetGlyphOutline = GetGlyphOutlineW;
        pub const GetMetaFile = GetMetaFileW;
        pub const GetOutlineTextMetrics = GetOutlineTextMetricsW;
        pub const GetTextExtentPoint = GetTextExtentPointW;
        pub const GetTextExtentPoint32 = GetTextExtentPoint32W;
        pub const GetTextExtentExPoint = GetTextExtentExPointW;
        pub const GetCharacterPlacement = GetCharacterPlacementW;
        pub const GetGlyphIndices = GetGlyphIndicesW;
        pub const AddFontResourceEx = AddFontResourceExW;
        pub const RemoveFontResourceEx = RemoveFontResourceExW;
        pub const CreateFontIndirectEx = CreateFontIndirectExW;
        pub const ResetDC = ResetDCW;
        pub const RemoveFontResource = RemoveFontResourceW;
        pub const CopyEnhMetaFile = CopyEnhMetaFileW;
        pub const CreateEnhMetaFile = CreateEnhMetaFileW;
        pub const GetEnhMetaFile = GetEnhMetaFileW;
        pub const GetEnhMetaFileDescription = GetEnhMetaFileDescriptionW;
        pub const GetTextMetrics = GetTextMetricsW;
        pub const TextOut = TextOutW;
        pub const ExtTextOut = ExtTextOutW;
        pub const PolyTextOut = PolyTextOutW;
        pub const GetTextFace = GetTextFaceW;
        pub const GetKerningPairs = GetKerningPairsW;
        pub const DrawText = DrawTextW;
        pub const DrawTextEx = DrawTextExW;
        pub const GrayString = GrayStringW;
        pub const DrawState = DrawStateW;
        pub const TabbedTextOut = TabbedTextOutW;
        pub const GetTabbedTextExtent = GetTabbedTextExtentW;
        pub const LoadBitmap = LoadBitmapW;
        pub const ChangeDisplaySettings = ChangeDisplaySettingsW;
        pub const ChangeDisplaySettingsEx = ChangeDisplaySettingsExW;
        pub const EnumDisplaySettings = EnumDisplaySettingsW;
        pub const EnumDisplaySettingsEx = EnumDisplaySettingsExW;
        pub const EnumDisplayDevices = EnumDisplayDevicesW;
        pub const GetMonitorInfo = GetMonitorInfoW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const TEXTMETRIC = *opaque{};
        pub const NEWTEXTMETRIC = *opaque{};
        pub const NEWTEXTMETRICEX = *opaque{};
        pub const ENUMLOGFONT = *opaque{};
        pub const ENUMLOGFONTEX = *opaque{};
        pub const EXTLOGFONT = *opaque{};
        pub const DISPLAY_DEVICE = *opaque{};
        pub const OUTLINETEXTMETRIC = *opaque{};
        pub const POLYTEXT = *opaque{};
        pub const GCP_RESULTS = *opaque{};
        pub const OLDFONTENUMPROC = *opaque{};
        pub const AXISINFO = *opaque{};
        pub const AXESLIST = *opaque{};
        pub const ENUMLOGFONTEXDV = *opaque{};
        pub const ENUMTEXTMETRIC = *opaque{};
        pub const MONITORINFOEX = *opaque{};
        pub const GetObject = *opaque{};
        pub const AddFontResource = *opaque{};
        pub const CopyMetaFile = *opaque{};
        pub const CreateDC = *opaque{};
        pub const CreateFontIndirect = *opaque{};
        pub const CreateFont = *opaque{};
        pub const CreateIC = *opaque{};
        pub const CreateMetaFile = *opaque{};
        pub const CreateScalableFontResource = *opaque{};
        pub const EnumFontFamiliesEx = *opaque{};
        pub const EnumFontFamilies = *opaque{};
        pub const EnumFonts = *opaque{};
        pub const GetCharWidth = *opaque{};
        pub const GetCharWidth32 = *opaque{};
        pub const GetCharWidthFloat = *opaque{};
        pub const GetCharABCWidths = *opaque{};
        pub const GetCharABCWidthsFloat = *opaque{};
        pub const GetGlyphOutline = *opaque{};
        pub const GetMetaFile = *opaque{};
        pub const GetOutlineTextMetrics = *opaque{};
        pub const GetTextExtentPoint = *opaque{};
        pub const GetTextExtentPoint32 = *opaque{};
        pub const GetTextExtentExPoint = *opaque{};
        pub const GetCharacterPlacement = *opaque{};
        pub const GetGlyphIndices = *opaque{};
        pub const AddFontResourceEx = *opaque{};
        pub const RemoveFontResourceEx = *opaque{};
        pub const CreateFontIndirectEx = *opaque{};
        pub const ResetDC = *opaque{};
        pub const RemoveFontResource = *opaque{};
        pub const CopyEnhMetaFile = *opaque{};
        pub const CreateEnhMetaFile = *opaque{};
        pub const GetEnhMetaFile = *opaque{};
        pub const GetEnhMetaFileDescription = *opaque{};
        pub const GetTextMetrics = *opaque{};
        pub const TextOut = *opaque{};
        pub const ExtTextOut = *opaque{};
        pub const PolyTextOut = *opaque{};
        pub const GetTextFace = *opaque{};
        pub const GetKerningPairs = *opaque{};
        pub const DrawText = *opaque{};
        pub const DrawTextEx = *opaque{};
        pub const GrayString = *opaque{};
        pub const DrawState = *opaque{};
        pub const TabbedTextOut = *opaque{};
        pub const GetTabbedTextExtent = *opaque{};
        pub const LoadBitmap = *opaque{};
        pub const ChangeDisplaySettings = *opaque{};
        pub const ChangeDisplaySettingsEx = *opaque{};
        pub const EnumDisplaySettings = *opaque{};
        pub const EnumDisplaySettingsEx = *opaque{};
        pub const EnumDisplayDevices = *opaque{};
        pub const GetMonitorInfo = *opaque{};
    } else struct {
        pub const TEXTMETRIC = @compileError("'TEXTMETRIC' requires that UNICODE be set to true or false in the root module");
        pub const NEWTEXTMETRIC = @compileError("'NEWTEXTMETRIC' requires that UNICODE be set to true or false in the root module");
        pub const NEWTEXTMETRICEX = @compileError("'NEWTEXTMETRICEX' requires that UNICODE be set to true or false in the root module");
        pub const ENUMLOGFONT = @compileError("'ENUMLOGFONT' requires that UNICODE be set to true or false in the root module");
        pub const ENUMLOGFONTEX = @compileError("'ENUMLOGFONTEX' requires that UNICODE be set to true or false in the root module");
        pub const EXTLOGFONT = @compileError("'EXTLOGFONT' requires that UNICODE be set to true or false in the root module");
        pub const DISPLAY_DEVICE = @compileError("'DISPLAY_DEVICE' requires that UNICODE be set to true or false in the root module");
        pub const OUTLINETEXTMETRIC = @compileError("'OUTLINETEXTMETRIC' requires that UNICODE be set to true or false in the root module");
        pub const POLYTEXT = @compileError("'POLYTEXT' requires that UNICODE be set to true or false in the root module");
        pub const GCP_RESULTS = @compileError("'GCP_RESULTS' requires that UNICODE be set to true or false in the root module");
        pub const OLDFONTENUMPROC = @compileError("'OLDFONTENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const AXISINFO = @compileError("'AXISINFO' requires that UNICODE be set to true or false in the root module");
        pub const AXESLIST = @compileError("'AXESLIST' requires that UNICODE be set to true or false in the root module");
        pub const ENUMLOGFONTEXDV = @compileError("'ENUMLOGFONTEXDV' requires that UNICODE be set to true or false in the root module");
        pub const ENUMTEXTMETRIC = @compileError("'ENUMTEXTMETRIC' requires that UNICODE be set to true or false in the root module");
        pub const MONITORINFOEX = @compileError("'MONITORINFOEX' requires that UNICODE be set to true or false in the root module");
        pub const GetObject = @compileError("'GetObject' requires that UNICODE be set to true or false in the root module");
        pub const AddFontResource = @compileError("'AddFontResource' requires that UNICODE be set to true or false in the root module");
        pub const CopyMetaFile = @compileError("'CopyMetaFile' requires that UNICODE be set to true or false in the root module");
        pub const CreateDC = @compileError("'CreateDC' requires that UNICODE be set to true or false in the root module");
        pub const CreateFontIndirect = @compileError("'CreateFontIndirect' requires that UNICODE be set to true or false in the root module");
        pub const CreateFont = @compileError("'CreateFont' requires that UNICODE be set to true or false in the root module");
        pub const CreateIC = @compileError("'CreateIC' requires that UNICODE be set to true or false in the root module");
        pub const CreateMetaFile = @compileError("'CreateMetaFile' requires that UNICODE be set to true or false in the root module");
        pub const CreateScalableFontResource = @compileError("'CreateScalableFontResource' requires that UNICODE be set to true or false in the root module");
        pub const EnumFontFamiliesEx = @compileError("'EnumFontFamiliesEx' requires that UNICODE be set to true or false in the root module");
        pub const EnumFontFamilies = @compileError("'EnumFontFamilies' requires that UNICODE be set to true or false in the root module");
        pub const EnumFonts = @compileError("'EnumFonts' requires that UNICODE be set to true or false in the root module");
        pub const GetCharWidth = @compileError("'GetCharWidth' requires that UNICODE be set to true or false in the root module");
        pub const GetCharWidth32 = @compileError("'GetCharWidth32' requires that UNICODE be set to true or false in the root module");
        pub const GetCharWidthFloat = @compileError("'GetCharWidthFloat' requires that UNICODE be set to true or false in the root module");
        pub const GetCharABCWidths = @compileError("'GetCharABCWidths' requires that UNICODE be set to true or false in the root module");
        pub const GetCharABCWidthsFloat = @compileError("'GetCharABCWidthsFloat' requires that UNICODE be set to true or false in the root module");
        pub const GetGlyphOutline = @compileError("'GetGlyphOutline' requires that UNICODE be set to true or false in the root module");
        pub const GetMetaFile = @compileError("'GetMetaFile' requires that UNICODE be set to true or false in the root module");
        pub const GetOutlineTextMetrics = @compileError("'GetOutlineTextMetrics' requires that UNICODE be set to true or false in the root module");
        pub const GetTextExtentPoint = @compileError("'GetTextExtentPoint' requires that UNICODE be set to true or false in the root module");
        pub const GetTextExtentPoint32 = @compileError("'GetTextExtentPoint32' requires that UNICODE be set to true or false in the root module");
        pub const GetTextExtentExPoint = @compileError("'GetTextExtentExPoint' requires that UNICODE be set to true or false in the root module");
        pub const GetCharacterPlacement = @compileError("'GetCharacterPlacement' requires that UNICODE be set to true or false in the root module");
        pub const GetGlyphIndices = @compileError("'GetGlyphIndices' requires that UNICODE be set to true or false in the root module");
        pub const AddFontResourceEx = @compileError("'AddFontResourceEx' requires that UNICODE be set to true or false in the root module");
        pub const RemoveFontResourceEx = @compileError("'RemoveFontResourceEx' requires that UNICODE be set to true or false in the root module");
        pub const CreateFontIndirectEx = @compileError("'CreateFontIndirectEx' requires that UNICODE be set to true or false in the root module");
        pub const ResetDC = @compileError("'ResetDC' requires that UNICODE be set to true or false in the root module");
        pub const RemoveFontResource = @compileError("'RemoveFontResource' requires that UNICODE be set to true or false in the root module");
        pub const CopyEnhMetaFile = @compileError("'CopyEnhMetaFile' requires that UNICODE be set to true or false in the root module");
        pub const CreateEnhMetaFile = @compileError("'CreateEnhMetaFile' requires that UNICODE be set to true or false in the root module");
        pub const GetEnhMetaFile = @compileError("'GetEnhMetaFile' requires that UNICODE be set to true or false in the root module");
        pub const GetEnhMetaFileDescription = @compileError("'GetEnhMetaFileDescription' requires that UNICODE be set to true or false in the root module");
        pub const GetTextMetrics = @compileError("'GetTextMetrics' requires that UNICODE be set to true or false in the root module");
        pub const TextOut = @compileError("'TextOut' requires that UNICODE be set to true or false in the root module");
        pub const ExtTextOut = @compileError("'ExtTextOut' requires that UNICODE be set to true or false in the root module");
        pub const PolyTextOut = @compileError("'PolyTextOut' requires that UNICODE be set to true or false in the root module");
        pub const GetTextFace = @compileError("'GetTextFace' requires that UNICODE be set to true or false in the root module");
        pub const GetKerningPairs = @compileError("'GetKerningPairs' requires that UNICODE be set to true or false in the root module");
        pub const DrawText = @compileError("'DrawText' requires that UNICODE be set to true or false in the root module");
        pub const DrawTextEx = @compileError("'DrawTextEx' requires that UNICODE be set to true or false in the root module");
        pub const GrayString = @compileError("'GrayString' requires that UNICODE be set to true or false in the root module");
        pub const DrawState = @compileError("'DrawState' requires that UNICODE be set to true or false in the root module");
        pub const TabbedTextOut = @compileError("'TabbedTextOut' requires that UNICODE be set to true or false in the root module");
        pub const GetTabbedTextExtent = @compileError("'GetTabbedTextExtent' requires that UNICODE be set to true or false in the root module");
        pub const LoadBitmap = @compileError("'LoadBitmap' requires that UNICODE be set to true or false in the root module");
        pub const ChangeDisplaySettings = @compileError("'ChangeDisplaySettings' requires that UNICODE be set to true or false in the root module");
        pub const ChangeDisplaySettingsEx = @compileError("'ChangeDisplaySettingsEx' requires that UNICODE be set to true or false in the root module");
        pub const EnumDisplaySettings = @compileError("'EnumDisplaySettings' requires that UNICODE be set to true or false in the root module");
        pub const EnumDisplaySettingsEx = @compileError("'EnumDisplaySettingsEx' requires that UNICODE be set to true or false in the root module");
        pub const EnumDisplayDevices = @compileError("'EnumDisplayDevices' requires that UNICODE be set to true or false in the root module");
        pub const GetMonitorInfo = @compileError("'GetMonitorInfo' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (29)
//--------------------------------------------------------------------------------
const LPARAM = @import("windows_and_messaging.zig").LPARAM;
const PIXELFORMATDESCRIPTOR = @import("open_gl.zig").PIXELFORMATDESCRIPTOR;
const LOGCOLORSPACEW = @import("windows_color_system.zig").LOGCOLORSPACEW;
const POINTL = @import("display_devices.zig").POINTL;
const HINSTANCE = @import("system_services.zig").HINSTANCE;
const Net_level = @import("net_management.zig").Net_level;
const LOGFONTW = @import("shell.zig").LOGFONTW;
const BITMAPINFOHEADER = @import("direct_show.zig").BITMAPINFOHEADER;
const POINTS = @import("display_devices.zig").POINTS;
const DEVMODEA = @import("xps.zig").DEVMODEA;
const BOOL = @import("system_services.zig").BOOL;
const WPARAM = @import("windows_and_messaging.zig").WPARAM;
const CIEXYZTRIPLE = @import("windows_color_system.zig").CIEXYZTRIPLE;
const PWSTR = @import("system_services.zig").PWSTR;
const FONTSIGNATURE = @import("intl.zig").FONTSIGNATURE;
const DEVMODEW = @import("display_devices.zig").DEVMODEW;
const DISPLAYCONFIG_DEVICE_INFO_HEADER = @import("display_devices.zig").DISPLAYCONFIG_DEVICE_INFO_HEADER;
const ScriptStringOut_uOptionsFlags = @import("intl.zig").ScriptStringOut_uOptionsFlags;
const METAFILEPICT = @import("data_exchange.zig").METAFILEPICT;
const RECT = @import("display_devices.zig").RECT;
const PSTR = @import("system_services.zig").PSTR;
const HWND = @import("windows_and_messaging.zig").HWND;
const CreateHatchBrush_iHatchFlags = @import("system_services.zig").CreateHatchBrush_iHatchFlags;
const LOGCOLORSPACEA = @import("windows_color_system.zig").LOGCOLORSPACEA;
const POINT = @import("display_devices.zig").POINT;
const RECTL = @import("display_devices.zig").RECTL;
const SIZE = @import("display_devices.zig").SIZE;
const LOGFONTA = @import("shell.zig").LOGFONTA;
const HANDLE = @import("system_services.zig").HANDLE;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = OLDFONTENUMPROCA;
    _ = OLDFONTENUMPROCW;
    _ = FONTENUMPROCA;
    _ = FONTENUMPROCW;
    _ = FONTENUMPROC;
    _ = GOBJENUMPROC;
    _ = LINEDDAPROC;
    _ = LPFNDEVMODE;
    _ = LPFNDEVCAPS;
    _ = MFENUMPROC;
    _ = ENHMFENUMPROC;
    _ = CFP_ALLOCPROC;
    _ = CFP_REALLOCPROC;
    _ = CFP_FREEPROC;
    _ = READEMBEDPROC;
    _ = WRITEEMBEDPROC;
    _ = GRAYSTRINGPROC;
    _ = DRAWSTATEPROC;
    _ = MONITORENUMPROC;

    const constant_export_count = 1260;
    const type_export_count = 255;
    const enum_value_export_count = 402;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 395;
    const unicode_alias_count = 69;
    const import_count = 29;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

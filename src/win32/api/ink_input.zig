//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (9)
//--------------------------------------------------------------------------------
const CLSID_InkDesktopHost_Value = @import("../zig.zig").Guid.initString("062584A6-F830-4BDC-A4D2-0A10AB062B1D");
pub const CLSID_InkDesktopHost = &CLSID_InkDesktopHost_Value;

const IID_IInkCommitRequestHandler_Value = @import("../zig.zig").Guid.initString("FABEA3FC-B108-45B6-A9FC-8D08FA9F85CF");
pub const IID_IInkCommitRequestHandler = &IID_IInkCommitRequestHandler_Value;
pub const IInkCommitRequestHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnCommitRequested: fn(
            self: *const IInkCommitRequestHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkCommitRequestHandler_OnCommitRequested(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkCommitRequestHandler.VTable, self.vtable).OnCommitRequested(@ptrCast(*const IInkCommitRequestHandler, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkPresenterDesktop_Value = @import("../zig.zig").Guid.initString("73F3C0D9-2E8B-48F3-895E-20CBD27B723B");
pub const IID_IInkPresenterDesktop = &IID_IInkPresenterDesktop_Value;
pub const IInkPresenterDesktop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetRootVisual: fn(
            self: *const IInkPresenterDesktop,
            rootVisual: *IUnknown,
            device: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCommitRequestHandler: fn(
            self: *const IInkPresenterDesktop,
            handler: *IInkCommitRequestHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: fn(
            self: *const IInkPresenterDesktop,
            width: *f32,
            height: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSize: fn(
            self: *const IInkPresenterDesktop,
            width: f32,
            height: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnHighContrastChanged: fn(
            self: *const IInkPresenterDesktop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPresenterDesktop_SetRootVisual(self: *const T, rootVisual: *IUnknown, device: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPresenterDesktop.VTable, self.vtable).SetRootVisual(@ptrCast(*const IInkPresenterDesktop, self), rootVisual, device);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPresenterDesktop_SetCommitRequestHandler(self: *const T, handler: *IInkCommitRequestHandler) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPresenterDesktop.VTable, self.vtable).SetCommitRequestHandler(@ptrCast(*const IInkPresenterDesktop, self), handler);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPresenterDesktop_GetSize(self: *const T, width: *f32, height: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPresenterDesktop.VTable, self.vtable).GetSize(@ptrCast(*const IInkPresenterDesktop, self), width, height);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPresenterDesktop_SetSize(self: *const T, width: f32, height: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPresenterDesktop.VTable, self.vtable).SetSize(@ptrCast(*const IInkPresenterDesktop, self), width, height);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkPresenterDesktop_OnHighContrastChanged(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkPresenterDesktop.VTable, self.vtable).OnHighContrastChanged(@ptrCast(*const IInkPresenterDesktop, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkHostWorkItem_Value = @import("../zig.zig").Guid.initString("CCDA0A9A-1B78-4632-BB96-97800662E26C");
pub const IID_IInkHostWorkItem = &IID_IInkHostWorkItem_Value;
pub const IInkHostWorkItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Invoke: fn(
            self: *const IInkHostWorkItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkHostWorkItem_Invoke(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkHostWorkItem.VTable, self.vtable).Invoke(@ptrCast(*const IInkHostWorkItem, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkDesktopHost_Value = @import("../zig.zig").Guid.initString("4CE7D875-A981-4140-A1FF-AD93258E8D59");
pub const IID_IInkDesktopHost = &IID_IInkDesktopHost_Value;
pub const IInkDesktopHost = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueueWorkItem: fn(
            self: *const IInkDesktopHost,
            workItem: *IInkHostWorkItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInkPresenter: fn(
            self: *const IInkDesktopHost,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAndInitializeInkPresenter: fn(
            self: *const IInkDesktopHost,
            rootVisual: *IUnknown,
            width: f32,
            height: f32,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDesktopHost_QueueWorkItem(self: *const T, workItem: *IInkHostWorkItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDesktopHost.VTable, self.vtable).QueueWorkItem(@ptrCast(*const IInkDesktopHost, self), workItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDesktopHost_CreateInkPresenter(self: *const T, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDesktopHost.VTable, self.vtable).CreateInkPresenter(@ptrCast(*const IInkDesktopHost, self), riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkDesktopHost_CreateAndInitializeInkPresenter(self: *const T, rootVisual: *IUnknown, width: f32, height: f32, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkDesktopHost.VTable, self.vtable).CreateAndInitializeInkPresenter(@ptrCast(*const IInkDesktopHost, self), rootVisual, width, height, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_InkD2DRenderer_Value = @import("../zig.zig").Guid.initString("4044E60C-7B01-4671-A97C-04E0210A07A5");
pub const CLSID_InkD2DRenderer = &CLSID_InkD2DRenderer_Value;

pub const __MIDL___MIDL_itf_inkrenderer_0000_0000_0001 = extern enum(i32) {
    USE_SYSTEM_COLORS_WHEN_NECESSARY = 0,
    USE_SYSTEM_COLORS = 1,
    USE_ORIGINAL_COLORS = 2,
};
pub const USE_SYSTEM_COLORS_WHEN_NECESSARY = __MIDL___MIDL_itf_inkrenderer_0000_0000_0001.USE_SYSTEM_COLORS_WHEN_NECESSARY;
pub const USE_SYSTEM_COLORS = __MIDL___MIDL_itf_inkrenderer_0000_0000_0001.USE_SYSTEM_COLORS;
pub const USE_ORIGINAL_COLORS = __MIDL___MIDL_itf_inkrenderer_0000_0000_0001.USE_ORIGINAL_COLORS;

const IID_IInkD2DRenderer_Value = @import("../zig.zig").Guid.initString("407FB1DE-F85A-4150-97CF-B7FB274FB4F8");
pub const IID_IInkD2DRenderer = &IID_IInkD2DRenderer_Value;
pub const IInkD2DRenderer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Draw: fn(
            self: *const IInkD2DRenderer,
            pD2D1DeviceContext: *IUnknown,
            pInkStrokeIterable: *IUnknown,
            fHighContrast: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkD2DRenderer_Draw(self: *const T, pD2D1DeviceContext: *IUnknown, pInkStrokeIterable: *IUnknown, fHighContrast: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkD2DRenderer.VTable, self.vtable).Draw(@ptrCast(*const IInkD2DRenderer, self), pD2D1DeviceContext, pInkStrokeIterable, fHighContrast);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkD2DRenderer2_Value = @import("../zig.zig").Guid.initString("0A95DCD9-4578-4B71-B20B-BF664D4BFEEE");
pub const IID_IInkD2DRenderer2 = &IID_IInkD2DRenderer2_Value;
pub const IInkD2DRenderer2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Draw: fn(
            self: *const IInkD2DRenderer2,
            pD2D1DeviceContext: *IUnknown,
            pInkStrokeIterable: *IUnknown,
            highContrastAdjustment: __MIDL___MIDL_itf_inkrenderer_0000_0000_0001,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInkD2DRenderer2_Draw(self: *const T, pD2D1DeviceContext: *IUnknown, pInkStrokeIterable: *IUnknown, highContrastAdjustment: __MIDL___MIDL_itf_inkrenderer_0000_0000_0001) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInkD2DRenderer2.VTable, self.vtable).Draw(@ptrCast(*const IInkD2DRenderer2, self), pD2D1DeviceContext, pInkStrokeIterable, highContrastAdjustment);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (4)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const IUnknown = @import("com.zig").IUnknown;
const BOOL = @import("system_services.zig").BOOL;
const HRESULT = @import("com.zig").HRESULT;

test {
    const constant_export_count = 0;
    const type_export_count = 7;
    const enum_value_export_count = 3;
    const com_iface_id_export_count = 6;
    const com_class_id_export_count = 2;
    const func_export_count = 0;
    const unicode_alias_count = 0;
    const import_count = 4;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

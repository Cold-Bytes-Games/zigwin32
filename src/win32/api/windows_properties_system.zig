//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (50)
//--------------------------------------------------------------------------------
pub const PROPERTYKEY = extern struct {
    fmtid: Guid,
    pid: u32,
};

pub const SYNC_TRANSFER_STATUS = extern enum(i32) {
    STS_NONE = 0,
    STS_NEEDSUPLOAD = 1,
    STS_NEEDSDOWNLOAD = 2,
    STS_TRANSFERRING = 4,
    STS_PAUSED = 8,
    STS_HASERROR = 16,
    STS_FETCHING_METADATA = 32,
    STS_USER_REQUESTED_REFRESH = 64,
    STS_HASWARNING = 128,
    STS_EXCLUDED = 256,
    STS_INCOMPLETE = 512,
    STS_PLACEHOLDER_IFEMPTY = 1024,
};
pub const STS_NONE = SYNC_TRANSFER_STATUS.STS_NONE;
pub const STS_NEEDSUPLOAD = SYNC_TRANSFER_STATUS.STS_NEEDSUPLOAD;
pub const STS_NEEDSDOWNLOAD = SYNC_TRANSFER_STATUS.STS_NEEDSDOWNLOAD;
pub const STS_TRANSFERRING = SYNC_TRANSFER_STATUS.STS_TRANSFERRING;
pub const STS_PAUSED = SYNC_TRANSFER_STATUS.STS_PAUSED;
pub const STS_HASERROR = SYNC_TRANSFER_STATUS.STS_HASERROR;
pub const STS_FETCHING_METADATA = SYNC_TRANSFER_STATUS.STS_FETCHING_METADATA;
pub const STS_USER_REQUESTED_REFRESH = SYNC_TRANSFER_STATUS.STS_USER_REQUESTED_REFRESH;
pub const STS_HASWARNING = SYNC_TRANSFER_STATUS.STS_HASWARNING;
pub const STS_EXCLUDED = SYNC_TRANSFER_STATUS.STS_EXCLUDED;
pub const STS_INCOMPLETE = SYNC_TRANSFER_STATUS.STS_INCOMPLETE;
pub const STS_PLACEHOLDER_IFEMPTY = SYNC_TRANSFER_STATUS.STS_PLACEHOLDER_IFEMPTY;

pub const PLACEHOLDER_STATES = extern enum(i32) {
    PS_NONE = 0,
    PS_MARKED_FOR_OFFLINE_AVAILABILITY = 1,
    PS_FULL_PRIMARY_STREAM_AVAILABLE = 2,
    PS_CREATE_FILE_ACCESSIBLE = 4,
    PS_CLOUDFILE_PLACEHOLDER = 8,
    PS_DEFAULT = 7,
    PS_ALL = 15,
};
pub const PS_NONE = PLACEHOLDER_STATES.PS_NONE;
pub const PS_MARKED_FOR_OFFLINE_AVAILABILITY = PLACEHOLDER_STATES.PS_MARKED_FOR_OFFLINE_AVAILABILITY;
pub const PS_FULL_PRIMARY_STREAM_AVAILABLE = PLACEHOLDER_STATES.PS_FULL_PRIMARY_STREAM_AVAILABLE;
pub const PS_CREATE_FILE_ACCESSIBLE = PLACEHOLDER_STATES.PS_CREATE_FILE_ACCESSIBLE;
pub const PS_CLOUDFILE_PLACEHOLDER = PLACEHOLDER_STATES.PS_CLOUDFILE_PLACEHOLDER;
pub const PS_DEFAULT = PLACEHOLDER_STATES.PS_DEFAULT;
pub const PS_ALL = PLACEHOLDER_STATES.PS_ALL;

pub const _PROPERTYUI_FLAGS = extern enum(i32) {
    PUIF_DEFAULT = 0,
    PUIF_RIGHTALIGN = 1,
    PUIF_NOLABELININFOTIP = 2,
};
pub const PUIF_DEFAULT = _PROPERTYUI_FLAGS.PUIF_DEFAULT;
pub const PUIF_RIGHTALIGN = _PROPERTYUI_FLAGS.PUIF_RIGHTALIGN;
pub const PUIF_NOLABELININFOTIP = _PROPERTYUI_FLAGS.PUIF_NOLABELININFOTIP;

const IID_IPropertyUI_Value = @import("../zig.zig").Guid.initString("757A7D9F-919A-4118-99D7-DBB208C8CC66");
pub const IID_IPropertyUI = &IID_IPropertyUI_Value;
pub const IPropertyUI = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ParsePropertyName: fn(
            self: *const IPropertyUI,
            pszName: [*:0]const u16,
            pfmtid: *Guid,
            ppid: *u32,
            pchEaten: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCannonicalName: fn(
            self: *const IPropertyUI,
            fmtid: *const Guid,
            pid: u32,
            pwszText: [*:0]u16,
            cchText: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayName: fn(
            self: *const IPropertyUI,
            fmtid: *const Guid,
            pid: u32,
            flags: u32,
            pwszText: [*:0]u16,
            cchText: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyDescription: fn(
            self: *const IPropertyUI,
            fmtid: *const Guid,
            pid: u32,
            pwszText: [*:0]u16,
            cchText: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultWidth: fn(
            self: *const IPropertyUI,
            fmtid: *const Guid,
            pid: u32,
            pcxChars: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: fn(
            self: *const IPropertyUI,
            fmtid: *const Guid,
            pid: u32,
            pflags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FormatForDisplay: fn(
            self: *const IPropertyUI,
            fmtid: *const Guid,
            pid: u32,
            ppropvar: *const PROPVARIANT,
            puiff: u32,
            pwszText: [*:0]u16,
            cchText: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHelpInfo: fn(
            self: *const IPropertyUI,
            fmtid: *const Guid,
            pid: u32,
            pwszHelpFile: [*:0]u16,
            cch: u32,
            puHelpID: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyUI_ParsePropertyName(self: *const T, pszName: [*:0]const u16, pfmtid: *Guid, ppid: *u32, pchEaten: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyUI.VTable, self.vtable).ParsePropertyName(@ptrCast(*const IPropertyUI, self), pszName, pfmtid, ppid, pchEaten);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyUI_GetCannonicalName(self: *const T, fmtid: *const Guid, pid: u32, pwszText: [*:0]u16, cchText: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyUI.VTable, self.vtable).GetCannonicalName(@ptrCast(*const IPropertyUI, self), fmtid, pid, pwszText, cchText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyUI_GetDisplayName(self: *const T, fmtid: *const Guid, pid: u32, flags: u32, pwszText: [*:0]u16, cchText: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyUI.VTable, self.vtable).GetDisplayName(@ptrCast(*const IPropertyUI, self), fmtid, pid, flags, pwszText, cchText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyUI_GetPropertyDescription(self: *const T, fmtid: *const Guid, pid: u32, pwszText: [*:0]u16, cchText: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyUI.VTable, self.vtable).GetPropertyDescription(@ptrCast(*const IPropertyUI, self), fmtid, pid, pwszText, cchText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyUI_GetDefaultWidth(self: *const T, fmtid: *const Guid, pid: u32, pcxChars: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyUI.VTable, self.vtable).GetDefaultWidth(@ptrCast(*const IPropertyUI, self), fmtid, pid, pcxChars);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyUI_GetFlags(self: *const T, fmtid: *const Guid, pid: u32, pflags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyUI.VTable, self.vtable).GetFlags(@ptrCast(*const IPropertyUI, self), fmtid, pid, pflags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyUI_FormatForDisplay(self: *const T, fmtid: *const Guid, pid: u32, ppropvar: *const PROPVARIANT, puiff: u32, pwszText: [*:0]u16, cchText: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyUI.VTable, self.vtable).FormatForDisplay(@ptrCast(*const IPropertyUI, self), fmtid, pid, ppropvar, puiff, pwszText, cchText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyUI_GetHelpInfo(self: *const T, fmtid: *const Guid, pid: u32, pwszHelpFile: [*:0]u16, cch: u32, puHelpID: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyUI.VTable, self.vtable).GetHelpInfo(@ptrCast(*const IPropertyUI, self), fmtid, pid, pwszHelpFile, cch, puHelpID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PDOPSTATUS = extern enum(i32) {
    PDOPS_RUNNING = 1,
    PDOPS_PAUSED = 2,
    PDOPS_CANCELLED = 3,
    PDOPS_STOPPED = 4,
    PDOPS_ERRORS = 5,
};
pub const PDOPS_RUNNING = PDOPSTATUS.PDOPS_RUNNING;
pub const PDOPS_PAUSED = PDOPSTATUS.PDOPS_PAUSED;
pub const PDOPS_CANCELLED = PDOPSTATUS.PDOPS_CANCELLED;
pub const PDOPS_STOPPED = PDOPSTATUS.PDOPS_STOPPED;
pub const PDOPS_ERRORS = PDOPSTATUS.PDOPS_ERRORS;

pub const SYNC_ENGINE_STATE_FLAGS = extern enum(i32) {
    SESF_NONE = 0,
    SESF_SERVICE_QUOTA_NEARING_LIMIT = 1,
    SESF_SERVICE_QUOTA_EXCEEDED_LIMIT = 2,
    SESF_AUTHENTICATION_ERROR = 4,
    SESF_PAUSED_DUE_TO_METERED_NETWORK = 8,
    SESF_PAUSED_DUE_TO_DISK_SPACE_FULL = 16,
    SESF_PAUSED_DUE_TO_CLIENT_POLICY = 32,
    SESF_PAUSED_DUE_TO_SERVICE_POLICY = 64,
    SESF_SERVICE_UNAVAILABLE = 128,
    SESF_PAUSED_DUE_TO_USER_REQUEST = 256,
    SESF_ALL_FLAGS = 511,
};
pub const SESF_NONE = SYNC_ENGINE_STATE_FLAGS.SESF_NONE;
pub const SESF_SERVICE_QUOTA_NEARING_LIMIT = SYNC_ENGINE_STATE_FLAGS.SESF_SERVICE_QUOTA_NEARING_LIMIT;
pub const SESF_SERVICE_QUOTA_EXCEEDED_LIMIT = SYNC_ENGINE_STATE_FLAGS.SESF_SERVICE_QUOTA_EXCEEDED_LIMIT;
pub const SESF_AUTHENTICATION_ERROR = SYNC_ENGINE_STATE_FLAGS.SESF_AUTHENTICATION_ERROR;
pub const SESF_PAUSED_DUE_TO_METERED_NETWORK = SYNC_ENGINE_STATE_FLAGS.SESF_PAUSED_DUE_TO_METERED_NETWORK;
pub const SESF_PAUSED_DUE_TO_DISK_SPACE_FULL = SYNC_ENGINE_STATE_FLAGS.SESF_PAUSED_DUE_TO_DISK_SPACE_FULL;
pub const SESF_PAUSED_DUE_TO_CLIENT_POLICY = SYNC_ENGINE_STATE_FLAGS.SESF_PAUSED_DUE_TO_CLIENT_POLICY;
pub const SESF_PAUSED_DUE_TO_SERVICE_POLICY = SYNC_ENGINE_STATE_FLAGS.SESF_PAUSED_DUE_TO_SERVICE_POLICY;
pub const SESF_SERVICE_UNAVAILABLE = SYNC_ENGINE_STATE_FLAGS.SESF_SERVICE_UNAVAILABLE;
pub const SESF_PAUSED_DUE_TO_USER_REQUEST = SYNC_ENGINE_STATE_FLAGS.SESF_PAUSED_DUE_TO_USER_REQUEST;
pub const SESF_ALL_FLAGS = SYNC_ENGINE_STATE_FLAGS.SESF_ALL_FLAGS;

pub const PROPPRG = extern struct {
    flPrg: u16,
    flPrgInit: u16,
    achTitle: [30]i8,
    achCmdLine: [128]i8,
    achWorkDir: [64]i8,
    wHotKey: u16,
    achIconFile: [80]i8,
    wIconIndex: u16,
    dwEnhModeFlags: u32,
    dwRealModeFlags: u32,
    achOtherFile: [80]i8,
    achPIFFile: [260]i8,
};

const CLSID_InMemoryPropertyStore_Value = @import("../zig.zig").Guid.initString("9A02E012-6303-4E1E-B9A1-630F802592C5");
pub const CLSID_InMemoryPropertyStore = &CLSID_InMemoryPropertyStore_Value;

const CLSID_InMemoryPropertyStoreMarshalByValue_Value = @import("../zig.zig").Guid.initString("D4CA0E2D-6DA7-4B75-A97C-5F306F0EAEDC");
pub const CLSID_InMemoryPropertyStoreMarshalByValue = &CLSID_InMemoryPropertyStoreMarshalByValue_Value;

const CLSID_PropertySystem_Value = @import("../zig.zig").Guid.initString("B8967F85-58AE-4F46-9FB2-5D7904798F4B");
pub const CLSID_PropertySystem = &CLSID_PropertySystem_Value;

pub const GETPROPERTYSTOREFLAGS = extern enum(i32) {
    GPS_DEFAULT = 0,
    GPS_HANDLERPROPERTIESONLY = 1,
    GPS_READWRITE = 2,
    GPS_TEMPORARY = 4,
    GPS_FASTPROPERTIESONLY = 8,
    GPS_OPENSLOWITEM = 16,
    GPS_DELAYCREATION = 32,
    GPS_BESTEFFORT = 64,
    GPS_NO_OPLOCK = 128,
    GPS_PREFERQUERYPROPERTIES = 256,
    GPS_EXTRINSICPROPERTIES = 512,
    GPS_EXTRINSICPROPERTIESONLY = 1024,
    GPS_VOLATILEPROPERTIES = 2048,
    GPS_VOLATILEPROPERTIESONLY = 4096,
    GPS_MASK_VALID = 8191,
};
pub const GPS_DEFAULT = GETPROPERTYSTOREFLAGS.GPS_DEFAULT;
pub const GPS_HANDLERPROPERTIESONLY = GETPROPERTYSTOREFLAGS.GPS_HANDLERPROPERTIESONLY;
pub const GPS_READWRITE = GETPROPERTYSTOREFLAGS.GPS_READWRITE;
pub const GPS_TEMPORARY = GETPROPERTYSTOREFLAGS.GPS_TEMPORARY;
pub const GPS_FASTPROPERTIESONLY = GETPROPERTYSTOREFLAGS.GPS_FASTPROPERTIESONLY;
pub const GPS_OPENSLOWITEM = GETPROPERTYSTOREFLAGS.GPS_OPENSLOWITEM;
pub const GPS_DELAYCREATION = GETPROPERTYSTOREFLAGS.GPS_DELAYCREATION;
pub const GPS_BESTEFFORT = GETPROPERTYSTOREFLAGS.GPS_BESTEFFORT;
pub const GPS_NO_OPLOCK = GETPROPERTYSTOREFLAGS.GPS_NO_OPLOCK;
pub const GPS_PREFERQUERYPROPERTIES = GETPROPERTYSTOREFLAGS.GPS_PREFERQUERYPROPERTIES;
pub const GPS_EXTRINSICPROPERTIES = GETPROPERTYSTOREFLAGS.GPS_EXTRINSICPROPERTIES;
pub const GPS_EXTRINSICPROPERTIESONLY = GETPROPERTYSTOREFLAGS.GPS_EXTRINSICPROPERTIESONLY;
pub const GPS_VOLATILEPROPERTIES = GETPROPERTYSTOREFLAGS.GPS_VOLATILEPROPERTIES;
pub const GPS_VOLATILEPROPERTIESONLY = GETPROPERTYSTOREFLAGS.GPS_VOLATILEPROPERTIESONLY;
pub const GPS_MASK_VALID = GETPROPERTYSTOREFLAGS.GPS_MASK_VALID;

pub const PKA_FLAGS = extern enum(i32) {
    PKA_SET = 0,
    PKA_APPEND = 1,
    PKA_DELETE = 2,
};
pub const PKA_SET = PKA_FLAGS.PKA_SET;
pub const PKA_APPEND = PKA_FLAGS.PKA_APPEND;
pub const PKA_DELETE = PKA_FLAGS.PKA_DELETE;

const IID_IPropertyChange_Value = @import("../zig.zig").Guid.initString("F917BC8A-1BBA-4478-A245-1BDE03EB9431");
pub const IID_IPropertyChange = &IID_IPropertyChange_Value;
pub const IPropertyChange = extern struct {
    pub const VTable = extern struct {
        base: IObjectWithPropertyKey.VTable,
        ApplyToPropVariant: fn(
            self: *const IPropertyChange,
            propvarIn: *const PROPVARIANT,
            ppropvarOut: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IObjectWithPropertyKey.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyChange_ApplyToPropVariant(self: *const T, propvarIn: *const PROPVARIANT, ppropvarOut: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyChange.VTable, self.vtable).ApplyToPropVariant(@ptrCast(*const IPropertyChange, self), propvarIn, ppropvarOut);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPropertyChangeArray_Value = @import("../zig.zig").Guid.initString("380F5CAD-1B5E-42F2-805D-637FD392D31E");
pub const IID_IPropertyChangeArray = &IID_IPropertyChangeArray_Value;
pub const IPropertyChangeArray = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IPropertyChangeArray,
            pcOperations: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IPropertyChangeArray,
            iIndex: u32,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: fn(
            self: *const IPropertyChangeArray,
            iIndex: u32,
            ppropChange: *IPropertyChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: fn(
            self: *const IPropertyChangeArray,
            ppropChange: *IPropertyChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendOrReplace: fn(
            self: *const IPropertyChangeArray,
            ppropChange: *IPropertyChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IPropertyChangeArray,
            iIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsKeyInArray: fn(
            self: *const IPropertyChangeArray,
            key: *const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyChangeArray_GetCount(self: *const T, pcOperations: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyChangeArray.VTable, self.vtable).GetCount(@ptrCast(*const IPropertyChangeArray, self), pcOperations);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyChangeArray_GetAt(self: *const T, iIndex: u32, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyChangeArray.VTable, self.vtable).GetAt(@ptrCast(*const IPropertyChangeArray, self), iIndex, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyChangeArray_InsertAt(self: *const T, iIndex: u32, ppropChange: *IPropertyChange) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyChangeArray.VTable, self.vtable).InsertAt(@ptrCast(*const IPropertyChangeArray, self), iIndex, ppropChange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyChangeArray_Append(self: *const T, ppropChange: *IPropertyChange) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyChangeArray.VTable, self.vtable).Append(@ptrCast(*const IPropertyChangeArray, self), ppropChange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyChangeArray_AppendOrReplace(self: *const T, ppropChange: *IPropertyChange) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyChangeArray.VTable, self.vtable).AppendOrReplace(@ptrCast(*const IPropertyChangeArray, self), ppropChange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyChangeArray_RemoveAt(self: *const T, iIndex: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyChangeArray.VTable, self.vtable).RemoveAt(@ptrCast(*const IPropertyChangeArray, self), iIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyChangeArray_IsKeyInArray(self: *const T, key: *const PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyChangeArray.VTable, self.vtable).IsKeyInArray(@ptrCast(*const IPropertyChangeArray, self), key);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPropertyStoreCapabilities_Value = @import("../zig.zig").Guid.initString("C8E2D566-186E-4D49-BF41-6909EAD56ACC");
pub const IID_IPropertyStoreCapabilities = &IID_IPropertyStoreCapabilities_Value;
pub const IPropertyStoreCapabilities = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsPropertyWritable: fn(
            self: *const IPropertyStoreCapabilities,
            key: *const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStoreCapabilities_IsPropertyWritable(self: *const T, key: *const PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStoreCapabilities.VTable, self.vtable).IsPropertyWritable(@ptrCast(*const IPropertyStoreCapabilities, self), key);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PSC_STATE = extern enum(i32) {
    PSC_NORMAL = 0,
    PSC_NOTINSOURCE = 1,
    PSC_DIRTY = 2,
    PSC_READONLY = 3,
};
pub const PSC_NORMAL = PSC_STATE.PSC_NORMAL;
pub const PSC_NOTINSOURCE = PSC_STATE.PSC_NOTINSOURCE;
pub const PSC_DIRTY = PSC_STATE.PSC_DIRTY;
pub const PSC_READONLY = PSC_STATE.PSC_READONLY;

const IID_IPropertyStoreCache_Value = @import("../zig.zig").Guid.initString("3017056D-9A91-4E90-937D-746C72ABBF4F");
pub const IID_IPropertyStoreCache = &IID_IPropertyStoreCache_Value;
pub const IPropertyStoreCache = extern struct {
    pub const VTable = extern struct {
        base: IPropertyStore.VTable,
        GetState: fn(
            self: *const IPropertyStoreCache,
            key: *const PROPERTYKEY,
            pstate: *PSC_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValueAndState: fn(
            self: *const IPropertyStoreCache,
            key: *const PROPERTYKEY,
            ppropvar: *PROPVARIANT,
            pstate: *PSC_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetState: fn(
            self: *const IPropertyStoreCache,
            key: *const PROPERTYKEY,
            state: PSC_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValueAndState: fn(
            self: *const IPropertyStoreCache,
            key: *const PROPERTYKEY,
            ppropvar: *const PROPVARIANT,
            state: PSC_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPropertyStore.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStoreCache_GetState(self: *const T, key: *const PROPERTYKEY, pstate: *PSC_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStoreCache.VTable, self.vtable).GetState(@ptrCast(*const IPropertyStoreCache, self), key, pstate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStoreCache_GetValueAndState(self: *const T, key: *const PROPERTYKEY, ppropvar: *PROPVARIANT, pstate: *PSC_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStoreCache.VTable, self.vtable).GetValueAndState(@ptrCast(*const IPropertyStoreCache, self), key, ppropvar, pstate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStoreCache_SetState(self: *const T, key: *const PROPERTYKEY, state: PSC_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStoreCache.VTable, self.vtable).SetState(@ptrCast(*const IPropertyStoreCache, self), key, state);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStoreCache_SetValueAndState(self: *const T, key: *const PROPERTYKEY, ppropvar: *const PROPVARIANT, state: PSC_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStoreCache.VTable, self.vtable).SetValueAndState(@ptrCast(*const IPropertyStoreCache, self), key, ppropvar, state);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PROPENUMTYPE = extern enum(i32) {
    PET_DISCRETEVALUE = 0,
    PET_RANGEDVALUE = 1,
    PET_DEFAULTVALUE = 2,
    PET_ENDRANGE = 3,
};
pub const PET_DISCRETEVALUE = PROPENUMTYPE.PET_DISCRETEVALUE;
pub const PET_RANGEDVALUE = PROPENUMTYPE.PET_RANGEDVALUE;
pub const PET_DEFAULTVALUE = PROPENUMTYPE.PET_DEFAULTVALUE;
pub const PET_ENDRANGE = PROPENUMTYPE.PET_ENDRANGE;

const IID_IPropertyEnumType_Value = @import("../zig.zig").Guid.initString("11E1FBF9-2D56-4A6B-8DB3-7CD193A471F2");
pub const IID_IPropertyEnumType = &IID_IPropertyEnumType_Value;
pub const IPropertyEnumType = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetEnumType: fn(
            self: *const IPropertyEnumType,
            penumtype: *PROPENUMTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const IPropertyEnumType,
            ppropvar: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRangeMinValue: fn(
            self: *const IPropertyEnumType,
            ppropvarMin: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRangeSetValue: fn(
            self: *const IPropertyEnumType,
            ppropvarSet: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayText: fn(
            self: *const IPropertyEnumType,
            ppszDisplay: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumType_GetEnumType(self: *const T, penumtype: *PROPENUMTYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumType.VTable, self.vtable).GetEnumType(@ptrCast(*const IPropertyEnumType, self), penumtype);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumType_GetValue(self: *const T, ppropvar: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumType.VTable, self.vtable).GetValue(@ptrCast(*const IPropertyEnumType, self), ppropvar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumType_GetRangeMinValue(self: *const T, ppropvarMin: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumType.VTable, self.vtable).GetRangeMinValue(@ptrCast(*const IPropertyEnumType, self), ppropvarMin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumType_GetRangeSetValue(self: *const T, ppropvarSet: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumType.VTable, self.vtable).GetRangeSetValue(@ptrCast(*const IPropertyEnumType, self), ppropvarSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumType_GetDisplayText(self: *const T, ppszDisplay: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumType.VTable, self.vtable).GetDisplayText(@ptrCast(*const IPropertyEnumType, self), ppszDisplay);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPropertyEnumType2_Value = @import("../zig.zig").Guid.initString("9B6E051C-5DDD-4321-9070-FE2ACB55E794");
pub const IID_IPropertyEnumType2 = &IID_IPropertyEnumType2_Value;
pub const IPropertyEnumType2 = extern struct {
    pub const VTable = extern struct {
        base: IPropertyEnumType.VTable,
        GetImageReference: fn(
            self: *const IPropertyEnumType2,
            ppszImageRes: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPropertyEnumType.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumType2_GetImageReference(self: *const T, ppszImageRes: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumType2.VTable, self.vtable).GetImageReference(@ptrCast(*const IPropertyEnumType2, self), ppszImageRes);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPropertyEnumTypeList_Value = @import("../zig.zig").Guid.initString("A99400F4-3D84-4557-94BA-1242FB2CC9A6");
pub const IID_IPropertyEnumTypeList = &IID_IPropertyEnumTypeList_Value;
pub const IPropertyEnumTypeList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IPropertyEnumTypeList,
            pctypes: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IPropertyEnumTypeList,
            itype: u32,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConditionAt: fn(
            self: *const IPropertyEnumTypeList,
            nIndex: u32,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindMatchingIndex: fn(
            self: *const IPropertyEnumTypeList,
            propvarCmp: *const PROPVARIANT,
            pnIndex: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumTypeList_GetCount(self: *const T, pctypes: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumTypeList.VTable, self.vtable).GetCount(@ptrCast(*const IPropertyEnumTypeList, self), pctypes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumTypeList_GetAt(self: *const T, itype: u32, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumTypeList.VTable, self.vtable).GetAt(@ptrCast(*const IPropertyEnumTypeList, self), itype, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumTypeList_GetConditionAt(self: *const T, nIndex: u32, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumTypeList.VTable, self.vtable).GetConditionAt(@ptrCast(*const IPropertyEnumTypeList, self), nIndex, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyEnumTypeList_FindMatchingIndex(self: *const T, propvarCmp: *const PROPVARIANT, pnIndex: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyEnumTypeList.VTable, self.vtable).FindMatchingIndex(@ptrCast(*const IPropertyEnumTypeList, self), propvarCmp, pnIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PROPDESC_TYPE_FLAGS = extern enum(i32) {
    PDTF_DEFAULT = 0,
    PDTF_MULTIPLEVALUES = 1,
    PDTF_ISINNATE = 2,
    PDTF_ISGROUP = 4,
    PDTF_CANGROUPBY = 8,
    PDTF_CANSTACKBY = 16,
    PDTF_ISTREEPROPERTY = 32,
    PDTF_INCLUDEINFULLTEXTQUERY = 64,
    PDTF_ISVIEWABLE = 128,
    PDTF_ISQUERYABLE = 256,
    PDTF_CANBEPURGED = 512,
    PDTF_SEARCHRAWVALUE = 1024,
    PDTF_DONTCOERCEEMPTYSTRINGS = 2048,
    PDTF_ALWAYSINSUPPLEMENTALSTORE = 4096,
    PDTF_ISSYSTEMPROPERTY = -2147483648,
    PDTF_MASK_ALL = -2147475457,
};
pub const PDTF_DEFAULT = PROPDESC_TYPE_FLAGS.PDTF_DEFAULT;
pub const PDTF_MULTIPLEVALUES = PROPDESC_TYPE_FLAGS.PDTF_MULTIPLEVALUES;
pub const PDTF_ISINNATE = PROPDESC_TYPE_FLAGS.PDTF_ISINNATE;
pub const PDTF_ISGROUP = PROPDESC_TYPE_FLAGS.PDTF_ISGROUP;
pub const PDTF_CANGROUPBY = PROPDESC_TYPE_FLAGS.PDTF_CANGROUPBY;
pub const PDTF_CANSTACKBY = PROPDESC_TYPE_FLAGS.PDTF_CANSTACKBY;
pub const PDTF_ISTREEPROPERTY = PROPDESC_TYPE_FLAGS.PDTF_ISTREEPROPERTY;
pub const PDTF_INCLUDEINFULLTEXTQUERY = PROPDESC_TYPE_FLAGS.PDTF_INCLUDEINFULLTEXTQUERY;
pub const PDTF_ISVIEWABLE = PROPDESC_TYPE_FLAGS.PDTF_ISVIEWABLE;
pub const PDTF_ISQUERYABLE = PROPDESC_TYPE_FLAGS.PDTF_ISQUERYABLE;
pub const PDTF_CANBEPURGED = PROPDESC_TYPE_FLAGS.PDTF_CANBEPURGED;
pub const PDTF_SEARCHRAWVALUE = PROPDESC_TYPE_FLAGS.PDTF_SEARCHRAWVALUE;
pub const PDTF_DONTCOERCEEMPTYSTRINGS = PROPDESC_TYPE_FLAGS.PDTF_DONTCOERCEEMPTYSTRINGS;
pub const PDTF_ALWAYSINSUPPLEMENTALSTORE = PROPDESC_TYPE_FLAGS.PDTF_ALWAYSINSUPPLEMENTALSTORE;
pub const PDTF_ISSYSTEMPROPERTY = PROPDESC_TYPE_FLAGS.PDTF_ISSYSTEMPROPERTY;
pub const PDTF_MASK_ALL = PROPDESC_TYPE_FLAGS.PDTF_MASK_ALL;

pub const PROPDESC_VIEW_FLAGS = extern enum(i32) {
    PDVF_DEFAULT = 0,
    PDVF_CENTERALIGN = 1,
    PDVF_RIGHTALIGN = 2,
    PDVF_BEGINNEWGROUP = 4,
    PDVF_FILLAREA = 8,
    PDVF_SORTDESCENDING = 16,
    PDVF_SHOWONLYIFPRESENT = 32,
    PDVF_SHOWBYDEFAULT = 64,
    PDVF_SHOWINPRIMARYLIST = 128,
    PDVF_SHOWINSECONDARYLIST = 256,
    PDVF_HIDELABEL = 512,
    PDVF_HIDDEN = 2048,
    PDVF_CANWRAP = 4096,
    PDVF_MASK_ALL = 7167,
};
pub const PDVF_DEFAULT = PROPDESC_VIEW_FLAGS.PDVF_DEFAULT;
pub const PDVF_CENTERALIGN = PROPDESC_VIEW_FLAGS.PDVF_CENTERALIGN;
pub const PDVF_RIGHTALIGN = PROPDESC_VIEW_FLAGS.PDVF_RIGHTALIGN;
pub const PDVF_BEGINNEWGROUP = PROPDESC_VIEW_FLAGS.PDVF_BEGINNEWGROUP;
pub const PDVF_FILLAREA = PROPDESC_VIEW_FLAGS.PDVF_FILLAREA;
pub const PDVF_SORTDESCENDING = PROPDESC_VIEW_FLAGS.PDVF_SORTDESCENDING;
pub const PDVF_SHOWONLYIFPRESENT = PROPDESC_VIEW_FLAGS.PDVF_SHOWONLYIFPRESENT;
pub const PDVF_SHOWBYDEFAULT = PROPDESC_VIEW_FLAGS.PDVF_SHOWBYDEFAULT;
pub const PDVF_SHOWINPRIMARYLIST = PROPDESC_VIEW_FLAGS.PDVF_SHOWINPRIMARYLIST;
pub const PDVF_SHOWINSECONDARYLIST = PROPDESC_VIEW_FLAGS.PDVF_SHOWINSECONDARYLIST;
pub const PDVF_HIDELABEL = PROPDESC_VIEW_FLAGS.PDVF_HIDELABEL;
pub const PDVF_HIDDEN = PROPDESC_VIEW_FLAGS.PDVF_HIDDEN;
pub const PDVF_CANWRAP = PROPDESC_VIEW_FLAGS.PDVF_CANWRAP;
pub const PDVF_MASK_ALL = PROPDESC_VIEW_FLAGS.PDVF_MASK_ALL;

pub const PROPDESC_DISPLAYTYPE = extern enum(i32) {
    PDDT_STRING = 0,
    PDDT_NUMBER = 1,
    PDDT_BOOLEAN = 2,
    PDDT_DATETIME = 3,
    PDDT_ENUMERATED = 4,
};
pub const PDDT_STRING = PROPDESC_DISPLAYTYPE.PDDT_STRING;
pub const PDDT_NUMBER = PROPDESC_DISPLAYTYPE.PDDT_NUMBER;
pub const PDDT_BOOLEAN = PROPDESC_DISPLAYTYPE.PDDT_BOOLEAN;
pub const PDDT_DATETIME = PROPDESC_DISPLAYTYPE.PDDT_DATETIME;
pub const PDDT_ENUMERATED = PROPDESC_DISPLAYTYPE.PDDT_ENUMERATED;

pub const PROPDESC_GROUPING_RANGE = extern enum(i32) {
    PDGR_DISCRETE = 0,
    PDGR_ALPHANUMERIC = 1,
    PDGR_SIZE = 2,
    PDGR_DYNAMIC = 3,
    PDGR_DATE = 4,
    PDGR_PERCENT = 5,
    PDGR_ENUMERATED = 6,
};
pub const PDGR_DISCRETE = PROPDESC_GROUPING_RANGE.PDGR_DISCRETE;
pub const PDGR_ALPHANUMERIC = PROPDESC_GROUPING_RANGE.PDGR_ALPHANUMERIC;
pub const PDGR_SIZE = PROPDESC_GROUPING_RANGE.PDGR_SIZE;
pub const PDGR_DYNAMIC = PROPDESC_GROUPING_RANGE.PDGR_DYNAMIC;
pub const PDGR_DATE = PROPDESC_GROUPING_RANGE.PDGR_DATE;
pub const PDGR_PERCENT = PROPDESC_GROUPING_RANGE.PDGR_PERCENT;
pub const PDGR_ENUMERATED = PROPDESC_GROUPING_RANGE.PDGR_ENUMERATED;

pub const PROPDESC_FORMAT_FLAGS = extern enum(i32) {
    PDFF_DEFAULT = 0,
    PDFF_PREFIXNAME = 1,
    PDFF_FILENAME = 2,
    PDFF_ALWAYSKB = 4,
    PDFF_RESERVED_RIGHTTOLEFT = 8,
    PDFF_SHORTTIME = 16,
    PDFF_LONGTIME = 32,
    PDFF_HIDETIME = 64,
    PDFF_SHORTDATE = 128,
    PDFF_LONGDATE = 256,
    PDFF_HIDEDATE = 512,
    PDFF_RELATIVEDATE = 1024,
    PDFF_USEEDITINVITATION = 2048,
    PDFF_READONLY = 4096,
    PDFF_NOAUTOREADINGORDER = 8192,
};
pub const PDFF_DEFAULT = PROPDESC_FORMAT_FLAGS.PDFF_DEFAULT;
pub const PDFF_PREFIXNAME = PROPDESC_FORMAT_FLAGS.PDFF_PREFIXNAME;
pub const PDFF_FILENAME = PROPDESC_FORMAT_FLAGS.PDFF_FILENAME;
pub const PDFF_ALWAYSKB = PROPDESC_FORMAT_FLAGS.PDFF_ALWAYSKB;
pub const PDFF_RESERVED_RIGHTTOLEFT = PROPDESC_FORMAT_FLAGS.PDFF_RESERVED_RIGHTTOLEFT;
pub const PDFF_SHORTTIME = PROPDESC_FORMAT_FLAGS.PDFF_SHORTTIME;
pub const PDFF_LONGTIME = PROPDESC_FORMAT_FLAGS.PDFF_LONGTIME;
pub const PDFF_HIDETIME = PROPDESC_FORMAT_FLAGS.PDFF_HIDETIME;
pub const PDFF_SHORTDATE = PROPDESC_FORMAT_FLAGS.PDFF_SHORTDATE;
pub const PDFF_LONGDATE = PROPDESC_FORMAT_FLAGS.PDFF_LONGDATE;
pub const PDFF_HIDEDATE = PROPDESC_FORMAT_FLAGS.PDFF_HIDEDATE;
pub const PDFF_RELATIVEDATE = PROPDESC_FORMAT_FLAGS.PDFF_RELATIVEDATE;
pub const PDFF_USEEDITINVITATION = PROPDESC_FORMAT_FLAGS.PDFF_USEEDITINVITATION;
pub const PDFF_READONLY = PROPDESC_FORMAT_FLAGS.PDFF_READONLY;
pub const PDFF_NOAUTOREADINGORDER = PROPDESC_FORMAT_FLAGS.PDFF_NOAUTOREADINGORDER;

pub const PROPDESC_SORTDESCRIPTION = extern enum(i32) {
    PDSD_GENERAL = 0,
    PDSD_A_Z = 1,
    PDSD_LOWEST_HIGHEST = 2,
    PDSD_SMALLEST_BIGGEST = 3,
    PDSD_OLDEST_NEWEST = 4,
};
pub const PDSD_GENERAL = PROPDESC_SORTDESCRIPTION.PDSD_GENERAL;
pub const PDSD_A_Z = PROPDESC_SORTDESCRIPTION.PDSD_A_Z;
pub const PDSD_LOWEST_HIGHEST = PROPDESC_SORTDESCRIPTION.PDSD_LOWEST_HIGHEST;
pub const PDSD_SMALLEST_BIGGEST = PROPDESC_SORTDESCRIPTION.PDSD_SMALLEST_BIGGEST;
pub const PDSD_OLDEST_NEWEST = PROPDESC_SORTDESCRIPTION.PDSD_OLDEST_NEWEST;

pub const PROPDESC_RELATIVEDESCRIPTION_TYPE = extern enum(i32) {
    PDRDT_GENERAL = 0,
    PDRDT_DATE = 1,
    PDRDT_SIZE = 2,
    PDRDT_COUNT = 3,
    PDRDT_REVISION = 4,
    PDRDT_LENGTH = 5,
    PDRDT_DURATION = 6,
    PDRDT_SPEED = 7,
    PDRDT_RATE = 8,
    PDRDT_RATING = 9,
    PDRDT_PRIORITY = 10,
};
pub const PDRDT_GENERAL = PROPDESC_RELATIVEDESCRIPTION_TYPE.PDRDT_GENERAL;
pub const PDRDT_DATE = PROPDESC_RELATIVEDESCRIPTION_TYPE.PDRDT_DATE;
pub const PDRDT_SIZE = PROPDESC_RELATIVEDESCRIPTION_TYPE.PDRDT_SIZE;
pub const PDRDT_COUNT = PROPDESC_RELATIVEDESCRIPTION_TYPE.PDRDT_COUNT;
pub const PDRDT_REVISION = PROPDESC_RELATIVEDESCRIPTION_TYPE.PDRDT_REVISION;
pub const PDRDT_LENGTH = PROPDESC_RELATIVEDESCRIPTION_TYPE.PDRDT_LENGTH;
pub const PDRDT_DURATION = PROPDESC_RELATIVEDESCRIPTION_TYPE.PDRDT_DURATION;
pub const PDRDT_SPEED = PROPDESC_RELATIVEDESCRIPTION_TYPE.PDRDT_SPEED;
pub const PDRDT_RATE = PROPDESC_RELATIVEDESCRIPTION_TYPE.PDRDT_RATE;
pub const PDRDT_RATING = PROPDESC_RELATIVEDESCRIPTION_TYPE.PDRDT_RATING;
pub const PDRDT_PRIORITY = PROPDESC_RELATIVEDESCRIPTION_TYPE.PDRDT_PRIORITY;

pub const PROPDESC_AGGREGATION_TYPE = extern enum(i32) {
    PDAT_DEFAULT = 0,
    PDAT_FIRST = 1,
    PDAT_SUM = 2,
    PDAT_AVERAGE = 3,
    PDAT_DATERANGE = 4,
    PDAT_UNION = 5,
    PDAT_MAX = 6,
    PDAT_MIN = 7,
};
pub const PDAT_DEFAULT = PROPDESC_AGGREGATION_TYPE.PDAT_DEFAULT;
pub const PDAT_FIRST = PROPDESC_AGGREGATION_TYPE.PDAT_FIRST;
pub const PDAT_SUM = PROPDESC_AGGREGATION_TYPE.PDAT_SUM;
pub const PDAT_AVERAGE = PROPDESC_AGGREGATION_TYPE.PDAT_AVERAGE;
pub const PDAT_DATERANGE = PROPDESC_AGGREGATION_TYPE.PDAT_DATERANGE;
pub const PDAT_UNION = PROPDESC_AGGREGATION_TYPE.PDAT_UNION;
pub const PDAT_MAX = PROPDESC_AGGREGATION_TYPE.PDAT_MAX;
pub const PDAT_MIN = PROPDESC_AGGREGATION_TYPE.PDAT_MIN;

pub const PROPDESC_CONDITION_TYPE = extern enum(i32) {
    PDCOT_NONE = 0,
    PDCOT_STRING = 1,
    PDCOT_SIZE = 2,
    PDCOT_DATETIME = 3,
    PDCOT_BOOLEAN = 4,
    PDCOT_NUMBER = 5,
};
pub const PDCOT_NONE = PROPDESC_CONDITION_TYPE.PDCOT_NONE;
pub const PDCOT_STRING = PROPDESC_CONDITION_TYPE.PDCOT_STRING;
pub const PDCOT_SIZE = PROPDESC_CONDITION_TYPE.PDCOT_SIZE;
pub const PDCOT_DATETIME = PROPDESC_CONDITION_TYPE.PDCOT_DATETIME;
pub const PDCOT_BOOLEAN = PROPDESC_CONDITION_TYPE.PDCOT_BOOLEAN;
pub const PDCOT_NUMBER = PROPDESC_CONDITION_TYPE.PDCOT_NUMBER;

const IID_IPropertyDescription_Value = @import("../zig.zig").Guid.initString("6F79D558-3E96-4549-A1D1-7D75D2288814");
pub const IID_IPropertyDescription = &IID_IPropertyDescription_Value;
pub const IPropertyDescription = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPropertyKey: fn(
            self: *const IPropertyDescription,
            pkey: *PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCanonicalName: fn(
            self: *const IPropertyDescription,
            ppszName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyType: fn(
            self: *const IPropertyDescription,
            pvartype: *u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayName: fn(
            self: *const IPropertyDescription,
            ppszName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEditInvitation: fn(
            self: *const IPropertyDescription,
            ppszInvite: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTypeFlags: fn(
            self: *const IPropertyDescription,
            mask: PROPDESC_TYPE_FLAGS,
            ppdtFlags: *PROPDESC_TYPE_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewFlags: fn(
            self: *const IPropertyDescription,
            ppdvFlags: *PROPDESC_VIEW_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultColumnWidth: fn(
            self: *const IPropertyDescription,
            pcxChars: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayType: fn(
            self: *const IPropertyDescription,
            pdisplaytype: *PROPDESC_DISPLAYTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnState: fn(
            self: *const IPropertyDescription,
            pcsFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupingRange: fn(
            self: *const IPropertyDescription,
            pgr: *PROPDESC_GROUPING_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRelativeDescriptionType: fn(
            self: *const IPropertyDescription,
            prdt: *PROPDESC_RELATIVEDESCRIPTION_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRelativeDescription: fn(
            self: *const IPropertyDescription,
            propvar1: *const PROPVARIANT,
            propvar2: *const PROPVARIANT,
            ppszDesc1: *PWSTR,
            ppszDesc2: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSortDescription: fn(
            self: *const IPropertyDescription,
            psd: *PROPDESC_SORTDESCRIPTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSortDescriptionLabel: fn(
            self: *const IPropertyDescription,
            fDescending: BOOL,
            ppszDescription: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAggregationType: fn(
            self: *const IPropertyDescription,
            paggtype: *PROPDESC_AGGREGATION_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConditionType: fn(
            self: *const IPropertyDescription,
            pcontype: *PROPDESC_CONDITION_TYPE,
            popDefault: *CONDITION_OPERATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumTypeList: fn(
            self: *const IPropertyDescription,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CoerceToCanonicalValue: fn(
            self: *const IPropertyDescription,
            ppropvar: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FormatForDisplay: fn(
            self: *const IPropertyDescription,
            propvar: *const PROPVARIANT,
            pdfFlags: PROPDESC_FORMAT_FLAGS,
            ppszDisplay: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsValueCanonical: fn(
            self: *const IPropertyDescription,
            propvar: *const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetPropertyKey(self: *const T, pkey: *PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetPropertyKey(@ptrCast(*const IPropertyDescription, self), pkey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetCanonicalName(self: *const T, ppszName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetCanonicalName(@ptrCast(*const IPropertyDescription, self), ppszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetPropertyType(self: *const T, pvartype: *u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetPropertyType(@ptrCast(*const IPropertyDescription, self), pvartype);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetDisplayName(self: *const T, ppszName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetDisplayName(@ptrCast(*const IPropertyDescription, self), ppszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetEditInvitation(self: *const T, ppszInvite: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetEditInvitation(@ptrCast(*const IPropertyDescription, self), ppszInvite);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetTypeFlags(self: *const T, mask: PROPDESC_TYPE_FLAGS, ppdtFlags: *PROPDESC_TYPE_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetTypeFlags(@ptrCast(*const IPropertyDescription, self), mask, ppdtFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetViewFlags(self: *const T, ppdvFlags: *PROPDESC_VIEW_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetViewFlags(@ptrCast(*const IPropertyDescription, self), ppdvFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetDefaultColumnWidth(self: *const T, pcxChars: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetDefaultColumnWidth(@ptrCast(*const IPropertyDescription, self), pcxChars);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetDisplayType(self: *const T, pdisplaytype: *PROPDESC_DISPLAYTYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetDisplayType(@ptrCast(*const IPropertyDescription, self), pdisplaytype);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetColumnState(self: *const T, pcsFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetColumnState(@ptrCast(*const IPropertyDescription, self), pcsFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetGroupingRange(self: *const T, pgr: *PROPDESC_GROUPING_RANGE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetGroupingRange(@ptrCast(*const IPropertyDescription, self), pgr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetRelativeDescriptionType(self: *const T, prdt: *PROPDESC_RELATIVEDESCRIPTION_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetRelativeDescriptionType(@ptrCast(*const IPropertyDescription, self), prdt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetRelativeDescription(self: *const T, propvar1: *const PROPVARIANT, propvar2: *const PROPVARIANT, ppszDesc1: *PWSTR, ppszDesc2: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetRelativeDescription(@ptrCast(*const IPropertyDescription, self), propvar1, propvar2, ppszDesc1, ppszDesc2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetSortDescription(self: *const T, psd: *PROPDESC_SORTDESCRIPTION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetSortDescription(@ptrCast(*const IPropertyDescription, self), psd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetSortDescriptionLabel(self: *const T, fDescending: BOOL, ppszDescription: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetSortDescriptionLabel(@ptrCast(*const IPropertyDescription, self), fDescending, ppszDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetAggregationType(self: *const T, paggtype: *PROPDESC_AGGREGATION_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetAggregationType(@ptrCast(*const IPropertyDescription, self), paggtype);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetConditionType(self: *const T, pcontype: *PROPDESC_CONDITION_TYPE, popDefault: *CONDITION_OPERATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetConditionType(@ptrCast(*const IPropertyDescription, self), pcontype, popDefault);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_GetEnumTypeList(self: *const T, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).GetEnumTypeList(@ptrCast(*const IPropertyDescription, self), riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_CoerceToCanonicalValue(self: *const T, ppropvar: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).CoerceToCanonicalValue(@ptrCast(*const IPropertyDescription, self), ppropvar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_FormatForDisplay(self: *const T, propvar: *const PROPVARIANT, pdfFlags: PROPDESC_FORMAT_FLAGS, ppszDisplay: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).FormatForDisplay(@ptrCast(*const IPropertyDescription, self), propvar, pdfFlags, ppszDisplay);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription_IsValueCanonical(self: *const T, propvar: *const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription.VTable, self.vtable).IsValueCanonical(@ptrCast(*const IPropertyDescription, self), propvar);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPropertyDescription2_Value = @import("../zig.zig").Guid.initString("57D2EDED-5062-400E-B107-5DAE79FE57A6");
pub const IID_IPropertyDescription2 = &IID_IPropertyDescription2_Value;
pub const IPropertyDescription2 = extern struct {
    pub const VTable = extern struct {
        base: IPropertyDescription.VTable,
        GetImageReferenceForValue: fn(
            self: *const IPropertyDescription2,
            propvar: *const PROPVARIANT,
            ppszImageRes: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPropertyDescription.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescription2_GetImageReferenceForValue(self: *const T, propvar: *const PROPVARIANT, ppszImageRes: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescription2.VTable, self.vtable).GetImageReferenceForValue(@ptrCast(*const IPropertyDescription2, self), propvar, ppszImageRes);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPropertyDescriptionAliasInfo_Value = @import("../zig.zig").Guid.initString("F67104FC-2AF9-46FD-B32D-243C1404F3D1");
pub const IID_IPropertyDescriptionAliasInfo = &IID_IPropertyDescriptionAliasInfo_Value;
pub const IPropertyDescriptionAliasInfo = extern struct {
    pub const VTable = extern struct {
        base: IPropertyDescription.VTable,
        GetSortByAlias: fn(
            self: *const IPropertyDescriptionAliasInfo,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAdditionalSortByAliases: fn(
            self: *const IPropertyDescriptionAliasInfo,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPropertyDescription.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescriptionAliasInfo_GetSortByAlias(self: *const T, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescriptionAliasInfo.VTable, self.vtable).GetSortByAlias(@ptrCast(*const IPropertyDescriptionAliasInfo, self), riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescriptionAliasInfo_GetAdditionalSortByAliases(self: *const T, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescriptionAliasInfo.VTable, self.vtable).GetAdditionalSortByAliases(@ptrCast(*const IPropertyDescriptionAliasInfo, self), riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PROPDESC_SEARCHINFO_FLAGS = extern enum(i32) {
    PDSIF_DEFAULT = 0,
    PDSIF_ININVERTEDINDEX = 1,
    PDSIF_ISCOLUMN = 2,
    PDSIF_ISCOLUMNSPARSE = 4,
    PDSIF_ALWAYSINCLUDE = 8,
    PDSIF_USEFORTYPEAHEAD = 16,
};
pub const PDSIF_DEFAULT = PROPDESC_SEARCHINFO_FLAGS.PDSIF_DEFAULT;
pub const PDSIF_ININVERTEDINDEX = PROPDESC_SEARCHINFO_FLAGS.PDSIF_ININVERTEDINDEX;
pub const PDSIF_ISCOLUMN = PROPDESC_SEARCHINFO_FLAGS.PDSIF_ISCOLUMN;
pub const PDSIF_ISCOLUMNSPARSE = PROPDESC_SEARCHINFO_FLAGS.PDSIF_ISCOLUMNSPARSE;
pub const PDSIF_ALWAYSINCLUDE = PROPDESC_SEARCHINFO_FLAGS.PDSIF_ALWAYSINCLUDE;
pub const PDSIF_USEFORTYPEAHEAD = PROPDESC_SEARCHINFO_FLAGS.PDSIF_USEFORTYPEAHEAD;

pub const PROPDESC_COLUMNINDEX_TYPE = extern enum(i32) {
    PDCIT_NONE = 0,
    PDCIT_ONDISK = 1,
    PDCIT_INMEMORY = 2,
    PDCIT_ONDEMAND = 3,
    PDCIT_ONDISKALL = 4,
    PDCIT_ONDISKVECTOR = 5,
};
pub const PDCIT_NONE = PROPDESC_COLUMNINDEX_TYPE.PDCIT_NONE;
pub const PDCIT_ONDISK = PROPDESC_COLUMNINDEX_TYPE.PDCIT_ONDISK;
pub const PDCIT_INMEMORY = PROPDESC_COLUMNINDEX_TYPE.PDCIT_INMEMORY;
pub const PDCIT_ONDEMAND = PROPDESC_COLUMNINDEX_TYPE.PDCIT_ONDEMAND;
pub const PDCIT_ONDISKALL = PROPDESC_COLUMNINDEX_TYPE.PDCIT_ONDISKALL;
pub const PDCIT_ONDISKVECTOR = PROPDESC_COLUMNINDEX_TYPE.PDCIT_ONDISKVECTOR;

const IID_IPropertyDescriptionSearchInfo_Value = @import("../zig.zig").Guid.initString("078F91BD-29A2-440F-924E-46A291524520");
pub const IID_IPropertyDescriptionSearchInfo = &IID_IPropertyDescriptionSearchInfo_Value;
pub const IPropertyDescriptionSearchInfo = extern struct {
    pub const VTable = extern struct {
        base: IPropertyDescription.VTable,
        GetSearchInfoFlags: fn(
            self: *const IPropertyDescriptionSearchInfo,
            ppdsiFlags: *PROPDESC_SEARCHINFO_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnIndexType: fn(
            self: *const IPropertyDescriptionSearchInfo,
            ppdciType: *PROPDESC_COLUMNINDEX_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProjectionString: fn(
            self: *const IPropertyDescriptionSearchInfo,
            ppszProjection: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxSize: fn(
            self: *const IPropertyDescriptionSearchInfo,
            pcbMaxSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPropertyDescription.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescriptionSearchInfo_GetSearchInfoFlags(self: *const T, ppdsiFlags: *PROPDESC_SEARCHINFO_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescriptionSearchInfo.VTable, self.vtable).GetSearchInfoFlags(@ptrCast(*const IPropertyDescriptionSearchInfo, self), ppdsiFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescriptionSearchInfo_GetColumnIndexType(self: *const T, ppdciType: *PROPDESC_COLUMNINDEX_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescriptionSearchInfo.VTable, self.vtable).GetColumnIndexType(@ptrCast(*const IPropertyDescriptionSearchInfo, self), ppdciType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescriptionSearchInfo_GetProjectionString(self: *const T, ppszProjection: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescriptionSearchInfo.VTable, self.vtable).GetProjectionString(@ptrCast(*const IPropertyDescriptionSearchInfo, self), ppszProjection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescriptionSearchInfo_GetMaxSize(self: *const T, pcbMaxSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescriptionSearchInfo.VTable, self.vtable).GetMaxSize(@ptrCast(*const IPropertyDescriptionSearchInfo, self), pcbMaxSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPropertyDescriptionRelatedPropertyInfo_Value = @import("../zig.zig").Guid.initString("507393F4-2A3D-4A60-B59E-D9C75716C2DD");
pub const IID_IPropertyDescriptionRelatedPropertyInfo = &IID_IPropertyDescriptionRelatedPropertyInfo_Value;
pub const IPropertyDescriptionRelatedPropertyInfo = extern struct {
    pub const VTable = extern struct {
        base: IPropertyDescription.VTable,
        GetRelatedProperty: fn(
            self: *const IPropertyDescriptionRelatedPropertyInfo,
            pszRelationshipName: [*:0]const u16,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPropertyDescription.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescriptionRelatedPropertyInfo_GetRelatedProperty(self: *const T, pszRelationshipName: [*:0]const u16, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescriptionRelatedPropertyInfo.VTable, self.vtable).GetRelatedProperty(@ptrCast(*const IPropertyDescriptionRelatedPropertyInfo, self), pszRelationshipName, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PROPDESC_ENUMFILTER = extern enum(i32) {
    PDEF_ALL = 0,
    PDEF_SYSTEM = 1,
    PDEF_NONSYSTEM = 2,
    PDEF_VIEWABLE = 3,
    PDEF_QUERYABLE = 4,
    PDEF_INFULLTEXTQUERY = 5,
    PDEF_COLUMN = 6,
};
pub const PDEF_ALL = PROPDESC_ENUMFILTER.PDEF_ALL;
pub const PDEF_SYSTEM = PROPDESC_ENUMFILTER.PDEF_SYSTEM;
pub const PDEF_NONSYSTEM = PROPDESC_ENUMFILTER.PDEF_NONSYSTEM;
pub const PDEF_VIEWABLE = PROPDESC_ENUMFILTER.PDEF_VIEWABLE;
pub const PDEF_QUERYABLE = PROPDESC_ENUMFILTER.PDEF_QUERYABLE;
pub const PDEF_INFULLTEXTQUERY = PROPDESC_ENUMFILTER.PDEF_INFULLTEXTQUERY;
pub const PDEF_COLUMN = PROPDESC_ENUMFILTER.PDEF_COLUMN;

const IID_IPropertySystem_Value = @import("../zig.zig").Guid.initString("CA724E8A-C3E6-442B-88A4-6FB0DB8035A3");
pub const IID_IPropertySystem = &IID_IPropertySystem_Value;
pub const IPropertySystem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPropertyDescription: fn(
            self: *const IPropertySystem,
            propkey: *const PROPERTYKEY,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyDescriptionByName: fn(
            self: *const IPropertySystem,
            pszCanonicalName: [*:0]const u16,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyDescriptionListFromString: fn(
            self: *const IPropertySystem,
            pszPropList: [*:0]const u16,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumeratePropertyDescriptions: fn(
            self: *const IPropertySystem,
            filterOn: PROPDESC_ENUMFILTER,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FormatForDisplay: fn(
            self: *const IPropertySystem,
            key: *const PROPERTYKEY,
            propvar: *const PROPVARIANT,
            pdff: PROPDESC_FORMAT_FLAGS,
            pszText: [*:0]u16,
            cchText: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FormatForDisplayAlloc: fn(
            self: *const IPropertySystem,
            key: *const PROPERTYKEY,
            propvar: *const PROPVARIANT,
            pdff: PROPDESC_FORMAT_FLAGS,
            ppszDisplay: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterPropertySchema: fn(
            self: *const IPropertySystem,
            pszPath: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterPropertySchema: fn(
            self: *const IPropertySystem,
            pszPath: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshPropertySchema: fn(
            self: *const IPropertySystem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystem_GetPropertyDescription(self: *const T, propkey: *const PROPERTYKEY, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystem.VTable, self.vtable).GetPropertyDescription(@ptrCast(*const IPropertySystem, self), propkey, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystem_GetPropertyDescriptionByName(self: *const T, pszCanonicalName: [*:0]const u16, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystem.VTable, self.vtable).GetPropertyDescriptionByName(@ptrCast(*const IPropertySystem, self), pszCanonicalName, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystem_GetPropertyDescriptionListFromString(self: *const T, pszPropList: [*:0]const u16, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystem.VTable, self.vtable).GetPropertyDescriptionListFromString(@ptrCast(*const IPropertySystem, self), pszPropList, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystem_EnumeratePropertyDescriptions(self: *const T, filterOn: PROPDESC_ENUMFILTER, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystem.VTable, self.vtable).EnumeratePropertyDescriptions(@ptrCast(*const IPropertySystem, self), filterOn, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystem_FormatForDisplay(self: *const T, key: *const PROPERTYKEY, propvar: *const PROPVARIANT, pdff: PROPDESC_FORMAT_FLAGS, pszText: [*:0]u16, cchText: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystem.VTable, self.vtable).FormatForDisplay(@ptrCast(*const IPropertySystem, self), key, propvar, pdff, pszText, cchText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystem_FormatForDisplayAlloc(self: *const T, key: *const PROPERTYKEY, propvar: *const PROPVARIANT, pdff: PROPDESC_FORMAT_FLAGS, ppszDisplay: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystem.VTable, self.vtable).FormatForDisplayAlloc(@ptrCast(*const IPropertySystem, self), key, propvar, pdff, ppszDisplay);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystem_RegisterPropertySchema(self: *const T, pszPath: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystem.VTable, self.vtable).RegisterPropertySchema(@ptrCast(*const IPropertySystem, self), pszPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystem_UnregisterPropertySchema(self: *const T, pszPath: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystem.VTable, self.vtable).UnregisterPropertySchema(@ptrCast(*const IPropertySystem, self), pszPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystem_RefreshPropertySchema(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystem.VTable, self.vtable).RefreshPropertySchema(@ptrCast(*const IPropertySystem, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPropertyDescriptionList_Value = @import("../zig.zig").Guid.initString("1F9FC1D0-C39B-4B26-817F-011967D3440E");
pub const IID_IPropertyDescriptionList = &IID_IPropertyDescriptionList_Value;
pub const IPropertyDescriptionList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IPropertyDescriptionList,
            pcElem: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IPropertyDescriptionList,
            iElem: u32,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescriptionList_GetCount(self: *const T, pcElem: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescriptionList.VTable, self.vtable).GetCount(@ptrCast(*const IPropertyDescriptionList, self), pcElem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyDescriptionList_GetAt(self: *const T, iElem: u32, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyDescriptionList.VTable, self.vtable).GetAt(@ptrCast(*const IPropertyDescriptionList, self), iElem, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPropertyStoreFactory_Value = @import("../zig.zig").Guid.initString("BC110B6D-57E8-4148-A9C6-91015AB2F3A5");
pub const IID_IPropertyStoreFactory = &IID_IPropertyStoreFactory_Value;
pub const IPropertyStoreFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPropertyStore: fn(
            self: *const IPropertyStoreFactory,
            flags: GETPROPERTYSTOREFLAGS,
            pUnkFactory: *IUnknown,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStoreForKeys: fn(
            self: *const IPropertyStoreFactory,
            rgKeys: *const PROPERTYKEY,
            cKeys: u32,
            flags: GETPROPERTYSTOREFLAGS,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStoreFactory_GetPropertyStore(self: *const T, flags: GETPROPERTYSTOREFLAGS, pUnkFactory: *IUnknown, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStoreFactory.VTable, self.vtable).GetPropertyStore(@ptrCast(*const IPropertyStoreFactory, self), flags, pUnkFactory, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyStoreFactory_GetPropertyStoreForKeys(self: *const T, rgKeys: *const PROPERTYKEY, cKeys: u32, flags: GETPROPERTYSTOREFLAGS, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyStoreFactory.VTable, self.vtable).GetPropertyStoreForKeys(@ptrCast(*const IPropertyStoreFactory, self), rgKeys, cKeys, flags, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _PERSIST_SPROPSTORE_FLAGS = extern enum(i32) {
    FPSPS_DEFAULT = 0,
    FPSPS_READONLY = 1,
    FPSPS_TREAT_NEW_VALUES_AS_DIRTY = 2,
};
pub const FPSPS_DEFAULT = _PERSIST_SPROPSTORE_FLAGS.FPSPS_DEFAULT;
pub const FPSPS_READONLY = _PERSIST_SPROPSTORE_FLAGS.FPSPS_READONLY;
pub const FPSPS_TREAT_NEW_VALUES_AS_DIRTY = _PERSIST_SPROPSTORE_FLAGS.FPSPS_TREAT_NEW_VALUES_AS_DIRTY;

pub const SERIALIZEDPROPSTORAGE = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

const IID_IPropertySystemChangeNotify_Value = @import("../zig.zig").Guid.initString("FA955FD9-38BE-4879-A6CE-824CF52D609F");
pub const IID_IPropertySystemChangeNotify = &IID_IPropertySystemChangeNotify_Value;
pub const IPropertySystemChangeNotify = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SchemaRefreshed: fn(
            self: *const IPropertySystemChangeNotify,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertySystemChangeNotify_SchemaRefreshed(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertySystemChangeNotify.VTable, self.vtable).SchemaRefreshed(@ptrCast(*const IPropertySystemChangeNotify, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const tagPSTIME_FLAGS = extern enum(i32) {
    PSTF_UTC = 0,
    PSTF_LOCAL = 1,
};
pub const PSTF_UTC = tagPSTIME_FLAGS.PSTF_UTC;
pub const PSTF_LOCAL = tagPSTIME_FLAGS.PSTF_LOCAL;

pub const PROPVAR_COMPARE_UNIT = extern enum(i32) {
    PVCU_DEFAULT = 0,
    PVCU_SECOND = 1,
    PVCU_MINUTE = 2,
    PVCU_HOUR = 3,
    PVCU_DAY = 4,
    PVCU_MONTH = 5,
    PVCU_YEAR = 6,
};
pub const PVCU_DEFAULT = PROPVAR_COMPARE_UNIT.PVCU_DEFAULT;
pub const PVCU_SECOND = PROPVAR_COMPARE_UNIT.PVCU_SECOND;
pub const PVCU_MINUTE = PROPVAR_COMPARE_UNIT.PVCU_MINUTE;
pub const PVCU_HOUR = PROPVAR_COMPARE_UNIT.PVCU_HOUR;
pub const PVCU_DAY = PROPVAR_COMPARE_UNIT.PVCU_DAY;
pub const PVCU_MONTH = PROPVAR_COMPARE_UNIT.PVCU_MONTH;
pub const PVCU_YEAR = PROPVAR_COMPARE_UNIT.PVCU_YEAR;

pub const tagPROPVAR_COMPARE_FLAGS = extern enum(i32) {
    PVCF_DEFAULT = 0,
    PVCF_TREATEMPTYASGREATERTHAN = 1,
    PVCF_USESTRCMP = 2,
    PVCF_USESTRCMPC = 4,
    PVCF_USESTRCMPI = 8,
    PVCF_USESTRCMPIC = 16,
    PVCF_DIGITSASNUMBERS_CASESENSITIVE = 32,
};
pub const PVCF_DEFAULT = tagPROPVAR_COMPARE_FLAGS.PVCF_DEFAULT;
pub const PVCF_TREATEMPTYASGREATERTHAN = tagPROPVAR_COMPARE_FLAGS.PVCF_TREATEMPTYASGREATERTHAN;
pub const PVCF_USESTRCMP = tagPROPVAR_COMPARE_FLAGS.PVCF_USESTRCMP;
pub const PVCF_USESTRCMPC = tagPROPVAR_COMPARE_FLAGS.PVCF_USESTRCMPC;
pub const PVCF_USESTRCMPI = tagPROPVAR_COMPARE_FLAGS.PVCF_USESTRCMPI;
pub const PVCF_USESTRCMPIC = tagPROPVAR_COMPARE_FLAGS.PVCF_USESTRCMPIC;
pub const PVCF_DIGITSASNUMBERS_CASESENSITIVE = tagPROPVAR_COMPARE_FLAGS.PVCF_DIGITSASNUMBERS_CASESENSITIVE;

pub const tagPROPVAR_CHANGE_FLAGS = extern enum(i32) {
    PVCHF_DEFAULT = 0,
    PVCHF_NOVALUEPROP = 1,
    PVCHF_ALPHABOOL = 2,
    PVCHF_NOUSEROVERRIDE = 4,
    PVCHF_LOCALBOOL = 8,
    PVCHF_NOHEXSTRING = 16,
};
pub const PVCHF_DEFAULT = tagPROPVAR_CHANGE_FLAGS.PVCHF_DEFAULT;
pub const PVCHF_NOVALUEPROP = tagPROPVAR_CHANGE_FLAGS.PVCHF_NOVALUEPROP;
pub const PVCHF_ALPHABOOL = tagPROPVAR_CHANGE_FLAGS.PVCHF_ALPHABOOL;
pub const PVCHF_NOUSEROVERRIDE = tagPROPVAR_CHANGE_FLAGS.PVCHF_NOUSEROVERRIDE;
pub const PVCHF_LOCALBOOL = tagPROPVAR_CHANGE_FLAGS.PVCHF_LOCALBOOL;
pub const PVCHF_NOHEXSTRING = tagPROPVAR_CHANGE_FLAGS.PVCHF_NOHEXSTRING;

pub const DRAWPROGRESSFLAGS = extern enum(i32) {
    DPF_NONE = 0,
    DPF_MARQUEE = 1,
    DPF_MARQUEE_COMPLETE = 2,
    DPF_ERROR = 4,
    DPF_WARNING = 8,
    DPF_STOPPED = 16,
};
pub const DPF_NONE = DRAWPROGRESSFLAGS.DPF_NONE;
pub const DPF_MARQUEE = DRAWPROGRESSFLAGS.DPF_MARQUEE;
pub const DPF_MARQUEE_COMPLETE = DRAWPROGRESSFLAGS.DPF_MARQUEE_COMPLETE;
pub const DPF_ERROR = DRAWPROGRESSFLAGS.DPF_ERROR;
pub const DPF_WARNING = DRAWPROGRESSFLAGS.DPF_WARNING;
pub const DPF_STOPPED = DRAWPROGRESSFLAGS.DPF_STOPPED;


//--------------------------------------------------------------------------------
// Section: Functions (227)
//--------------------------------------------------------------------------------
pub extern "SHELL32" fn SHGetPropertyStoreForWindow(
    hwnd: HWND,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetPropertyStoreFromIDList(
    pidl: *ITEMIDLIST,
    flags: GETPROPERTYSTOREFLAGS,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetPropertyStoreFromParsingName(
    pszPath: [*:0]const u16,
    pbc: ?*IBindCtx,
    flags: GETPROPERTYSTOREFLAGS,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHAddDefaultPropertiesByExt(
    pszExt: [*:0]const u16,
    pPropStore: *IPropertyStore,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn PifMgr_OpenProperties(
    pszApp: [*:0]const u16,
    pszPIF: ?[*:0]const u16,
    hInf: u32,
    flOpt: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "SHELL32" fn PifMgr_GetProperties(
    hProps: HANDLE,
    pszGroup: ?[*:0]const u8,
    lpProps: ?[*]u8,
    cbProps: i32,
    flOpt: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn PifMgr_SetProperties(
    hProps: HANDLE,
    pszGroup: ?[*:0]const u8,
    lpProps: [*]const u8,
    cbProps: i32,
    flOpt: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn PifMgr_CloseProperties(
    hProps: HANDLE,
    flOpt: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "SHELL32" fn SHPropStgCreate(
    psstg: *IPropertySetStorage,
    fmtid: *const Guid,
    pclsid: ?*const Guid,
    grfFlags: u32,
    grfMode: u32,
    dwDisposition: u32,
    ppstg: **IPropertyStorage,
    puCodePage: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHPropStgReadMultiple(
    pps: *IPropertyStorage,
    uCodePage: u32,
    cpspec: u32,
    rgpspec: [*]const PROPSPEC,
    rgvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHPropStgWriteMultiple(
    pps: *IPropertyStorage,
    puCodePage: ?*u32,
    cpspec: u32,
    rgpspec: [*]const PROPSPEC,
    rgvar: [*]PROPVARIANT,
    propidNameFirst: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToWinRTPropertyValue(
    propvar: *const PROPVARIANT,
    riid: *const Guid,
    ppv: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn WinRTPropertyValueToPropVariant(
    punkPropertyValue: ?*IUnknown,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSFormatForDisplay(
    propkey: *const PROPERTYKEY,
    propvar: *const PROPVARIANT,
    pdfFlags: PROPDESC_FORMAT_FLAGS,
    pwszText: [*:0]u16,
    cchText: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSFormatForDisplayAlloc(
    key: *const PROPERTYKEY,
    propvar: *const PROPVARIANT,
    pdff: PROPDESC_FORMAT_FLAGS,
    ppszDisplay: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSFormatPropertyValue(
    pps: *IPropertyStore,
    ppd: *IPropertyDescription,
    pdff: PROPDESC_FORMAT_FLAGS,
    ppszDisplay: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSGetImageReferenceForValue(
    propkey: *const PROPERTYKEY,
    propvar: *const PROPVARIANT,
    ppszImageRes: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSStringFromPropertyKey(
    pkey: *const PROPERTYKEY,
    psz: [*:0]u16,
    cch: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyKeyFromString(
    pszString: [*:0]const u16,
    pkey: *PROPERTYKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSCreateMemoryPropertyStore(
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSCreateDelayedMultiplexPropertyStore(
    flags: GETPROPERTYSTOREFLAGS,
    pdpsf: *IDelayedPropertyStoreFactory,
    rgStoreIds: [*]const u32,
    cStores: u32,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSCreateMultiplexPropertyStore(
    prgpunkStores: [*]*IUnknown,
    cStores: u32,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSCreatePropertyChangeArray(
    rgpropkey: ?[*]const PROPERTYKEY,
    rgflags: ?[*]const PKA_FLAGS,
    rgpropvar: ?[*]const PROPVARIANT,
    cChanges: u32,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSCreateSimplePropertyChange(
    flags: PKA_FLAGS,
    key: *const PROPERTYKEY,
    propvar: *const PROPVARIANT,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSGetPropertyDescription(
    propkey: *const PROPERTYKEY,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSGetPropertyDescriptionByName(
    pszCanonicalName: [*:0]const u16,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSLookupPropertyHandlerCLSID(
    pszFilePath: [*:0]const u16,
    pclsid: *Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSGetItemPropertyHandler(
    punkItem: *IUnknown,
    fReadWrite: BOOL,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSGetItemPropertyHandlerWithCreateObject(
    punkItem: *IUnknown,
    fReadWrite: BOOL,
    punkCreateObject: *IUnknown,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSGetPropertyValue(
    pps: *IPropertyStore,
    ppd: *IPropertyDescription,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSSetPropertyValue(
    pps: *IPropertyStore,
    ppd: *IPropertyDescription,
    propvar: *const PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSRegisterPropertySchema(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSUnregisterPropertySchema(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSRefreshPropertySchema(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSEnumeratePropertyDescriptions(
    filterOn: PROPDESC_ENUMFILTER,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSGetPropertyKeyFromName(
    pszName: [*:0]const u16,
    ppropkey: *PROPERTYKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSGetNameFromPropertyKey(
    propkey: *const PROPERTYKEY,
    ppszCanonicalName: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSCoerceToCanonicalValue(
    key: *const PROPERTYKEY,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSGetPropertyDescriptionListFromString(
    pszPropList: [*:0]const u16,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSCreatePropertyStoreFromPropertySetStorage(
    ppss: *IPropertySetStorage,
    grfMode: u32,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSCreatePropertyStoreFromObject(
    punk: *IUnknown,
    grfMode: u32,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSCreateAdapterFromPropertyStore(
    pps: *IPropertyStore,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSGetPropertySystem(
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSGetPropertyFromPropertyStorage(
    psps: [*]SERIALIZEDPROPSTORAGE,
    cb: u32,
    rpkey: *const PROPERTYKEY,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSGetNamedPropertyFromPropertyStorage(
    psps: [*]SERIALIZEDPROPSTORAGE,
    cb: u32,
    pszName: [*:0]const u16,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_ReadType(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    @"var": *VARIANT,
    type: u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_ReadStr(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: [*:0]u16,
    characterCount: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_ReadStrAlloc(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_ReadBSTR(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_WriteStr(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_WriteBSTR(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_ReadInt(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_WriteInt(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_ReadSHORT(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_WriteSHORT(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_ReadLONG(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_WriteLONG(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_ReadDWORD(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_WriteDWORD(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_ReadBOOL(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_WriteBOOL(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_ReadPOINTL(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *POINTL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_WritePOINTL(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *const POINTL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_ReadPOINTS(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *POINTS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_WritePOINTS(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *const POINTS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_ReadRECTL(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *RECTL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_WriteRECTL(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *const RECTL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_ReadStream(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: **IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_WriteStream(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_Delete(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_ReadULONGLONG(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_WriteULONGLONG(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_ReadUnknown(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_WriteUnknown(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    punk: *IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_ReadGUID(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_WriteGUID(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *const Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_ReadPropertyKey(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *PROPERTYKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PSPropertyBag_WritePropertyKey(
    propBag: *IPropertyBag,
    propName: [*:0]const u16,
    value: *const PROPERTYKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantFromResource(
    hinst: HINSTANCE,
    id: u32,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantFromBuffer(
    pv: [*]const u8,
    cb: u32,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantFromCLSID(
    clsid: *const Guid,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantFromGUIDAsString(
    guid: *const Guid,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantFromFileTime(
    pftIn: *const FILETIME,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantFromPropVariantVectorElem(
    propvarIn: *const PROPVARIANT,
    iElem: u32,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantVectorFromPropVariant(
    propvarSingle: *const PROPVARIANT,
    ppropvarVector: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantFromStrRet(
    pstrret: *STRRET,
    pidl: ?*ITEMIDLIST,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantFromBooleanVector(
    prgf: ?[*]const BOOL,
    cElems: u32,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantFromInt16Vector(
    prgn: ?[*]const i16,
    cElems: u32,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantFromUInt16Vector(
    prgn: ?[*:0]const u16,
    cElems: u32,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantFromInt32Vector(
    prgn: ?[*]const i32,
    cElems: u32,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantFromUInt32Vector(
    prgn: ?[*]const u32,
    cElems: u32,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantFromInt64Vector(
    prgn: ?[*]const i64,
    cElems: u32,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantFromUInt64Vector(
    prgn: ?[*]const u64,
    cElems: u32,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantFromDoubleVector(
    prgn: ?[*]const f64,
    cElems: u32,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantFromFileTimeVector(
    prgft: ?[*]const FILETIME,
    cElems: u32,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantFromStringVector(
    prgsz: ?[*]?PWSTR,
    cElems: u32,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitPropVariantFromStringAsVector(
    psz: ?[*:0]const u16,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToBooleanWithDefault(
    propvarIn: *const PROPVARIANT,
    fDefault: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "PROPSYS" fn PropVariantToInt16WithDefault(
    propvarIn: *const PROPVARIANT,
    iDefault: i16,
) callconv(@import("std").os.windows.WINAPI) i16;

pub extern "PROPSYS" fn PropVariantToUInt16WithDefault(
    propvarIn: *const PROPVARIANT,
    uiDefault: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "PROPSYS" fn PropVariantToInt32WithDefault(
    propvarIn: *const PROPVARIANT,
    lDefault: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "PROPSYS" fn PropVariantToUInt32WithDefault(
    propvarIn: *const PROPVARIANT,
    ulDefault: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PROPSYS" fn PropVariantToInt64WithDefault(
    propvarIn: *const PROPVARIANT,
    llDefault: i64,
) callconv(@import("std").os.windows.WINAPI) i64;

pub extern "PROPSYS" fn PropVariantToUInt64WithDefault(
    propvarIn: *const PROPVARIANT,
    ullDefault: u64,
) callconv(@import("std").os.windows.WINAPI) u64;

pub extern "PROPSYS" fn PropVariantToDoubleWithDefault(
    propvarIn: *const PROPVARIANT,
    dblDefault: f64,
) callconv(@import("std").os.windows.WINAPI) f64;

pub extern "PROPSYS" fn PropVariantToStringWithDefault(
    propvarIn: *const PROPVARIANT,
    pszDefault: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "PROPSYS" fn PropVariantToBoolean(
    propvarIn: *const PROPVARIANT,
    pfRet: *BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToInt16(
    propvarIn: *const PROPVARIANT,
    piRet: *i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToUInt16(
    propvarIn: *const PROPVARIANT,
    puiRet: *u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToInt32(
    propvarIn: *const PROPVARIANT,
    plRet: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToUInt32(
    propvarIn: *const PROPVARIANT,
    pulRet: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToInt64(
    propvarIn: *const PROPVARIANT,
    pllRet: *i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToUInt64(
    propvarIn: *const PROPVARIANT,
    pullRet: *u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToDouble(
    propvarIn: *const PROPVARIANT,
    pdblRet: *f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToBuffer(
    propvar: *const PROPVARIANT,
    pv: [*]u8,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToString(
    propvar: *const PROPVARIANT,
    psz: [*:0]u16,
    cch: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToGUID(
    propvar: *const PROPVARIANT,
    pguid: *Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToStringAlloc(
    propvar: *const PROPVARIANT,
    ppszOut: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToBSTR(
    propvar: *const PROPVARIANT,
    pbstrOut: *BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToStrRet(
    propvar: *const PROPVARIANT,
    pstrret: *STRRET,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToFileTime(
    propvar: *const PROPVARIANT,
    pstfOut: i32,
    pftOut: *FILETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantGetElementCount(
    propvar: *const PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PROPSYS" fn PropVariantToBooleanVector(
    propvar: *const PROPVARIANT,
    prgf: [*]BOOL,
    crgf: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToInt16Vector(
    propvar: *const PROPVARIANT,
    prgn: [*]i16,
    crgn: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToUInt16Vector(
    propvar: *const PROPVARIANT,
    prgn: [*:0]u16,
    crgn: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToInt32Vector(
    propvar: *const PROPVARIANT,
    prgn: [*]i32,
    crgn: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToUInt32Vector(
    propvar: *const PROPVARIANT,
    prgn: [*]u32,
    crgn: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToInt64Vector(
    propvar: *const PROPVARIANT,
    prgn: [*]i64,
    crgn: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToUInt64Vector(
    propvar: *const PROPVARIANT,
    prgn: [*]u64,
    crgn: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToDoubleVector(
    propvar: *const PROPVARIANT,
    prgn: [*]f64,
    crgn: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToFileTimeVector(
    propvar: *const PROPVARIANT,
    prgft: [*]FILETIME,
    crgft: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToStringVector(
    propvar: *const PROPVARIANT,
    prgsz: [*]PWSTR,
    crgsz: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToBooleanVectorAlloc(
    propvar: *const PROPVARIANT,
    pprgf: **BOOL,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToInt16VectorAlloc(
    propvar: *const PROPVARIANT,
    pprgn: **i16,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToUInt16VectorAlloc(
    propvar: *const PROPVARIANT,
    pprgn: **u16,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToInt32VectorAlloc(
    propvar: *const PROPVARIANT,
    pprgn: **i32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToUInt32VectorAlloc(
    propvar: *const PROPVARIANT,
    pprgn: **u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToInt64VectorAlloc(
    propvar: *const PROPVARIANT,
    pprgn: **i64,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToUInt64VectorAlloc(
    propvar: *const PROPVARIANT,
    pprgn: **u64,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToDoubleVectorAlloc(
    propvar: *const PROPVARIANT,
    pprgn: **f64,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToFileTimeVectorAlloc(
    propvar: *const PROPVARIANT,
    pprgft: **FILETIME,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToStringVectorAlloc(
    propvar: *const PROPVARIANT,
    pprgsz: **PWSTR,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantGetBooleanElem(
    propvar: *const PROPVARIANT,
    iElem: u32,
    pfVal: *BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantGetInt16Elem(
    propvar: *const PROPVARIANT,
    iElem: u32,
    pnVal: *i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantGetUInt16Elem(
    propvar: *const PROPVARIANT,
    iElem: u32,
    pnVal: *u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantGetInt32Elem(
    propvar: *const PROPVARIANT,
    iElem: u32,
    pnVal: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantGetUInt32Elem(
    propvar: *const PROPVARIANT,
    iElem: u32,
    pnVal: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantGetInt64Elem(
    propvar: *const PROPVARIANT,
    iElem: u32,
    pnVal: *i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantGetUInt64Elem(
    propvar: *const PROPVARIANT,
    iElem: u32,
    pnVal: *u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantGetDoubleElem(
    propvar: *const PROPVARIANT,
    iElem: u32,
    pnVal: *f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantGetFileTimeElem(
    propvar: *const PROPVARIANT,
    iElem: u32,
    pftVal: *FILETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantGetStringElem(
    propvar: *const PROPVARIANT,
    iElem: u32,
    ppszVal: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn ClearPropVariantArray(
    rgPropVar: [*]PROPVARIANT,
    cVars: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "PROPSYS" fn PropVariantCompareEx(
    propvar1: *const PROPVARIANT,
    propvar2: *const PROPVARIANT,
    unit: PROPVAR_COMPARE_UNIT,
    flags: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "PROPSYS" fn PropVariantChangeType(
    ppropvarDest: *PROPVARIANT,
    propvarSrc: *const PROPVARIANT,
    flags: i32,
    vt: u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn PropVariantToVariant(
    pPropVar: *const PROPVARIANT,
    pVar: *VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToPropVariant(
    pVar: *const VARIANT,
    pPropVar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitVariantFromResource(
    hinst: HINSTANCE,
    id: u32,
    pvar: *VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitVariantFromBuffer(
    pv: [*]const u8,
    cb: u32,
    pvar: *VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitVariantFromGUIDAsString(
    guid: *const Guid,
    pvar: *VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitVariantFromFileTime(
    pft: *const FILETIME,
    pvar: *VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitVariantFromFileTimeArray(
    prgft: ?[*]const FILETIME,
    cElems: u32,
    pvar: *VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitVariantFromStrRet(
    pstrret: *STRRET,
    pidl: *ITEMIDLIST,
    pvar: *VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitVariantFromVariantArrayElem(
    varIn: *const VARIANT,
    iElem: u32,
    pvar: *VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitVariantFromBooleanArray(
    prgf: [*]const BOOL,
    cElems: u32,
    pvar: *VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitVariantFromInt16Array(
    prgn: [*]const i16,
    cElems: u32,
    pvar: *VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitVariantFromUInt16Array(
    prgn: [*:0]const u16,
    cElems: u32,
    pvar: *VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitVariantFromInt32Array(
    prgn: [*]const i32,
    cElems: u32,
    pvar: *VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitVariantFromUInt32Array(
    prgn: [*]const u32,
    cElems: u32,
    pvar: *VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitVariantFromInt64Array(
    prgn: [*]const i64,
    cElems: u32,
    pvar: *VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitVariantFromUInt64Array(
    prgn: [*]const u64,
    cElems: u32,
    pvar: *VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitVariantFromDoubleArray(
    prgn: [*]const f64,
    cElems: u32,
    pvar: *VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn InitVariantFromStringArray(
    prgsz: [*]PWSTR,
    cElems: u32,
    pvar: *VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToBooleanWithDefault(
    varIn: *const VARIANT,
    fDefault: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "PROPSYS" fn VariantToInt16WithDefault(
    varIn: *const VARIANT,
    iDefault: i16,
) callconv(@import("std").os.windows.WINAPI) i16;

pub extern "PROPSYS" fn VariantToUInt16WithDefault(
    varIn: *const VARIANT,
    uiDefault: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "PROPSYS" fn VariantToInt32WithDefault(
    varIn: *const VARIANT,
    lDefault: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "PROPSYS" fn VariantToUInt32WithDefault(
    varIn: *const VARIANT,
    ulDefault: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PROPSYS" fn VariantToInt64WithDefault(
    varIn: *const VARIANT,
    llDefault: i64,
) callconv(@import("std").os.windows.WINAPI) i64;

pub extern "PROPSYS" fn VariantToUInt64WithDefault(
    varIn: *const VARIANT,
    ullDefault: u64,
) callconv(@import("std").os.windows.WINAPI) u64;

pub extern "PROPSYS" fn VariantToDoubleWithDefault(
    varIn: *const VARIANT,
    dblDefault: f64,
) callconv(@import("std").os.windows.WINAPI) f64;

pub extern "PROPSYS" fn VariantToStringWithDefault(
    varIn: *const VARIANT,
    pszDefault: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "PROPSYS" fn VariantToBoolean(
    varIn: *const VARIANT,
    pfRet: *BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToInt16(
    varIn: *const VARIANT,
    piRet: *i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToUInt16(
    varIn: *const VARIANT,
    puiRet: *u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToInt32(
    varIn: *const VARIANT,
    plRet: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToUInt32(
    varIn: *const VARIANT,
    pulRet: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToInt64(
    varIn: *const VARIANT,
    pllRet: *i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToUInt64(
    varIn: *const VARIANT,
    pullRet: *u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToDouble(
    varIn: *const VARIANT,
    pdblRet: *f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToBuffer(
    varIn: *const VARIANT,
    pv: [*]u8,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToGUID(
    varIn: *const VARIANT,
    pguid: *Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToString(
    varIn: *const VARIANT,
    pszBuf: [*:0]u16,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToStringAlloc(
    varIn: *const VARIANT,
    ppszBuf: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToDosDateTime(
    varIn: *const VARIANT,
    pwDate: *u16,
    pwTime: *u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToStrRet(
    varIn: *const VARIANT,
    pstrret: *STRRET,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToFileTime(
    varIn: *const VARIANT,
    stfOut: i32,
    pftOut: *FILETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantGetElementCount(
    varIn: *const VARIANT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PROPSYS" fn VariantToBooleanArray(
    @"var": *const VARIANT,
    prgf: [*]BOOL,
    crgn: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToInt16Array(
    @"var": *const VARIANT,
    prgn: [*]i16,
    crgn: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToUInt16Array(
    @"var": *const VARIANT,
    prgn: [*:0]u16,
    crgn: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToInt32Array(
    @"var": *const VARIANT,
    prgn: [*]i32,
    crgn: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToUInt32Array(
    @"var": *const VARIANT,
    prgn: [*]u32,
    crgn: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToInt64Array(
    @"var": *const VARIANT,
    prgn: [*]i64,
    crgn: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToUInt64Array(
    @"var": *const VARIANT,
    prgn: [*]u64,
    crgn: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToDoubleArray(
    @"var": *const VARIANT,
    prgn: [*]f64,
    crgn: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToStringArray(
    @"var": *const VARIANT,
    prgsz: [*]PWSTR,
    crgsz: u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToBooleanArrayAlloc(
    @"var": *const VARIANT,
    pprgf: **BOOL,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToInt16ArrayAlloc(
    @"var": *const VARIANT,
    pprgn: **i16,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToUInt16ArrayAlloc(
    @"var": *const VARIANT,
    pprgn: **u16,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToInt32ArrayAlloc(
    @"var": *const VARIANT,
    pprgn: **i32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToUInt32ArrayAlloc(
    @"var": *const VARIANT,
    pprgn: **u32,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToInt64ArrayAlloc(
    @"var": *const VARIANT,
    pprgn: **i64,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToUInt64ArrayAlloc(
    @"var": *const VARIANT,
    pprgn: **u64,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToDoubleArrayAlloc(
    @"var": *const VARIANT,
    pprgn: **f64,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantToStringArrayAlloc(
    @"var": *const VARIANT,
    pprgsz: **PWSTR,
    pcElem: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantGetBooleanElem(
    @"var": *const VARIANT,
    iElem: u32,
    pfVal: *BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantGetInt16Elem(
    @"var": *const VARIANT,
    iElem: u32,
    pnVal: *i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantGetUInt16Elem(
    @"var": *const VARIANT,
    iElem: u32,
    pnVal: *u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantGetInt32Elem(
    @"var": *const VARIANT,
    iElem: u32,
    pnVal: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantGetUInt32Elem(
    @"var": *const VARIANT,
    iElem: u32,
    pnVal: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantGetInt64Elem(
    @"var": *const VARIANT,
    iElem: u32,
    pnVal: *i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantGetUInt64Elem(
    @"var": *const VARIANT,
    iElem: u32,
    pnVal: *u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantGetDoubleElem(
    @"var": *const VARIANT,
    iElem: u32,
    pnVal: *f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn VariantGetStringElem(
    @"var": *const VARIANT,
    iElem: u32,
    ppszVal: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PROPSYS" fn ClearVariantArray(
    pvars: [*]VARIANT,
    cvars: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "PROPSYS" fn VariantCompare(
    var1: *const VARIANT,
    var2: *const VARIANT,
) callconv(@import("std").os.windows.WINAPI) i32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (28)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const HINSTANCE = @import("system_services.zig").HINSTANCE;
const POINTL = @import("display_devices.zig").POINTL;
const FILETIME = @import("windows_programming.zig").FILETIME;
const HRESULT = @import("com.zig").HRESULT;
const BOOL = @import("system_services.zig").BOOL;
const POINTS = @import("display_devices.zig").POINTS;
const PROPSPEC = @import("structured_storage.zig").PROPSPEC;
const IPropertyStore = @import("audio.zig").IPropertyStore;
const IObjectWithPropertyKey = @import("shell.zig").IObjectWithPropertyKey;
const IPropertyStorage = @import("structured_storage.zig").IPropertyStorage;
const IStream = @import("structured_storage.zig").IStream;
const PWSTR = @import("system_services.zig").PWSTR;
const IBindCtx = @import("com.zig").IBindCtx;
const IUnknown = @import("com.zig").IUnknown;
const PROPVARIANT = @import("structured_storage.zig").PROPVARIANT;
const ITEMIDLIST = @import("shell.zig").ITEMIDLIST;
const PSTR = @import("system_services.zig").PSTR;
const BSTR = @import("automation.zig").BSTR;
const HWND = @import("windows_and_messaging.zig").HWND;
const IPropertyBag = @import("automation.zig").IPropertyBag;
const IPropertySetStorage = @import("structured_storage.zig").IPropertySetStorage;
const VARIANT = @import("automation.zig").VARIANT;
const STRRET = @import("shell.zig").STRRET;
const HANDLE = @import("system_services.zig").HANDLE;
const RECTL = @import("display_devices.zig").RECTL;
const IDelayedPropertyStoreFactory = @import("shell.zig").IDelayedPropertyStoreFactory;
const CONDITION_OPERATION = @import("search.zig").CONDITION_OPERATION;

test {
    const constant_export_count = 0;
    const type_export_count = 47;
    const enum_value_export_count = 201;
    const com_iface_id_export_count = 17;
    const com_class_id_export_count = 3;
    const func_export_count = 227;
    const unicode_alias_count = 0;
    const import_count = 28;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

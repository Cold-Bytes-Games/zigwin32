//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (1)
//--------------------------------------------------------------------------------
pub const CLSID_TraceRelogger = @import("../zig.zig").Guid.initString("7b40792d-05ff-44c4-9058-f440c71f17d4");

//--------------------------------------------------------------------------------
// Section: Types (98)
//--------------------------------------------------------------------------------
// TODO: this type has a FreeFunc 'TdhCloseDecodingHandle', what can Zig do with this information?
pub const TDH_HANDLE = ?*c_void;

pub const WNODE_HEADER = extern struct {
    BufferSize: u32,
    ProviderId: u32,
    Anonymous1: WNODE_HEADER._Anonymous1_e__Union,
    Anonymous2: WNODE_HEADER._Anonymous2_e__Union,
    Guid: Guid,
    ClientContext: u32,
    Flags: u32,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const OFFSETINSTANCEDATAANDLENGTH = extern struct {
    OffsetInstanceData: u32,
    LengthInstanceData: u32,
};

pub const WNODE_ALL_DATA = extern struct {
    WnodeHeader: WNODE_HEADER,
    DataBlockOffset: u32,
    InstanceCount: u32,
    OffsetInstanceNameOffsets: u32,
    Anonymous: WNODE_ALL_DATA._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const WNODE_SINGLE_INSTANCE = extern struct {
    WnodeHeader: WNODE_HEADER,
    OffsetInstanceName: u32,
    InstanceIndex: u32,
    DataBlockOffset: u32,
    SizeDataBlock: u32,
    VariableData: u8,
};

pub const WNODE_SINGLE_ITEM = extern struct {
    WnodeHeader: WNODE_HEADER,
    OffsetInstanceName: u32,
    InstanceIndex: u32,
    ItemId: u32,
    DataBlockOffset: u32,
    SizeDataItem: u32,
    VariableData: u8,
};

pub const WNODE_METHOD_ITEM = extern struct {
    WnodeHeader: WNODE_HEADER,
    OffsetInstanceName: u32,
    InstanceIndex: u32,
    MethodId: u32,
    DataBlockOffset: u32,
    SizeDataBlock: u32,
    VariableData: u8,
};

pub const WNODE_EVENT_ITEM = extern struct {
    WnodeHeader: WNODE_HEADER,
};

pub const WNODE_EVENT_REFERENCE = extern struct {
    WnodeHeader: WNODE_HEADER,
    TargetGuid: Guid,
    TargetDataBlockSize: u32,
    Anonymous: WNODE_EVENT_REFERENCE._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const WNODE_TOO_SMALL = extern struct {
    WnodeHeader: WNODE_HEADER,
    SizeNeeded: u32,
};

pub const WMIREGGUIDW = extern struct {
    Guid: Guid,
    Flags: u32,
    InstanceCount: u32,
    Anonymous: WMIREGGUIDW._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const WMIREGINFOW = extern struct {
    BufferSize: u32,
    NextWmiRegInfo: u32,
    RegistryPath: u32,
    MofResourceName: u32,
    GuidCount: u32,
    WmiRegGuid: WMIREGGUIDW,
};

pub const WMIDPREQUESTCODE = extern enum(i32) {
    WMI_GET_ALL_DATA = 0,
    WMI_GET_SINGLE_INSTANCE = 1,
    WMI_SET_SINGLE_INSTANCE = 2,
    WMI_SET_SINGLE_ITEM = 3,
    WMI_ENABLE_EVENTS = 4,
    WMI_DISABLE_EVENTS = 5,
    WMI_ENABLE_COLLECTION = 6,
    WMI_DISABLE_COLLECTION = 7,
    WMI_REGINFO = 8,
    WMI_EXECUTE_METHOD = 9,
    WMI_CAPTURE_STATE = 10,
};
pub const WMI_GET_ALL_DATA = WMIDPREQUESTCODE.WMI_GET_ALL_DATA;
pub const WMI_GET_SINGLE_INSTANCE = WMIDPREQUESTCODE.WMI_GET_SINGLE_INSTANCE;
pub const WMI_SET_SINGLE_INSTANCE = WMIDPREQUESTCODE.WMI_SET_SINGLE_INSTANCE;
pub const WMI_SET_SINGLE_ITEM = WMIDPREQUESTCODE.WMI_SET_SINGLE_ITEM;
pub const WMI_ENABLE_EVENTS = WMIDPREQUESTCODE.WMI_ENABLE_EVENTS;
pub const WMI_DISABLE_EVENTS = WMIDPREQUESTCODE.WMI_DISABLE_EVENTS;
pub const WMI_ENABLE_COLLECTION = WMIDPREQUESTCODE.WMI_ENABLE_COLLECTION;
pub const WMI_DISABLE_COLLECTION = WMIDPREQUESTCODE.WMI_DISABLE_COLLECTION;
pub const WMI_REGINFO = WMIDPREQUESTCODE.WMI_REGINFO;
pub const WMI_EXECUTE_METHOD = WMIDPREQUESTCODE.WMI_EXECUTE_METHOD;
pub const WMI_CAPTURE_STATE = WMIDPREQUESTCODE.WMI_CAPTURE_STATE;

pub const ETW_COMPRESSION_RESUMPTION_MODE = extern enum(i32) {
    EtwCompressionModeRestart = 0,
    EtwCompressionModeNoDisable = 1,
    EtwCompressionModeNoRestart = 2,
};
pub const EtwCompressionModeRestart = ETW_COMPRESSION_RESUMPTION_MODE.EtwCompressionModeRestart;
pub const EtwCompressionModeNoDisable = ETW_COMPRESSION_RESUMPTION_MODE.EtwCompressionModeNoDisable;
pub const EtwCompressionModeNoRestart = ETW_COMPRESSION_RESUMPTION_MODE.EtwCompressionModeNoRestart;

pub const EVENT_TRACE_HEADER = extern struct {
    Size: u16,
    Anonymous1: EVENT_TRACE_HEADER._Anonymous1_e__Union,
    Anonymous2: EVENT_TRACE_HEADER._Anonymous2_e__Union,
    ThreadId: u32,
    ProcessId: u32,
    TimeStamp: LARGE_INTEGER,
    Anonymous3: EVENT_TRACE_HEADER._Anonymous3_e__Union,
    Anonymous4: EVENT_TRACE_HEADER._Anonymous4_e__Union,
    const _Anonymous4_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous3_e__Union = u32; // TODO: generate this nested type!
};

pub const EVENT_INSTANCE_HEADER = extern struct {
    Size: u16,
    Anonymous1: EVENT_INSTANCE_HEADER._Anonymous1_e__Union,
    Anonymous2: EVENT_INSTANCE_HEADER._Anonymous2_e__Union,
    ThreadId: u32,
    ProcessId: u32,
    TimeStamp: LARGE_INTEGER,
    RegHandle: u64,
    InstanceId: u32,
    ParentInstanceId: u32,
    Anonymous3: EVENT_INSTANCE_HEADER._Anonymous3_e__Union,
    ParentRegHandle: u64,
    const _Anonymous3_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const MOF_FIELD = extern struct {
    DataPtr: u64,
    Length: u32,
    DataType: u32,
};

pub const TRACE_LOGFILE_HEADER = extern struct {
    BufferSize: u32,
    Anonymous1: TRACE_LOGFILE_HEADER._Anonymous1_e__Union,
    ProviderVersion: u32,
    NumberOfProcessors: u32,
    EndTime: LARGE_INTEGER,
    TimerResolution: u32,
    MaximumFileSize: u32,
    LogFileMode: u32,
    BuffersWritten: u32,
    Anonymous2: TRACE_LOGFILE_HEADER._Anonymous2_e__Union,
    LoggerName: PWSTR,
    LogFileName: PWSTR,
    TimeZone: TIME_ZONE_INFORMATION,
    BootTime: LARGE_INTEGER,
    PerfFreq: LARGE_INTEGER,
    StartTime: LARGE_INTEGER,
    ReservedFlags: u32,
    BuffersLost: u32,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const TRACE_LOGFILE_HEADER32 = extern struct {
    BufferSize: u32,
    Anonymous1: TRACE_LOGFILE_HEADER32._Anonymous1_e__Union,
    ProviderVersion: u32,
    NumberOfProcessors: u32,
    EndTime: LARGE_INTEGER,
    TimerResolution: u32,
    MaximumFileSize: u32,
    LogFileMode: u32,
    BuffersWritten: u32,
    Anonymous2: TRACE_LOGFILE_HEADER32._Anonymous2_e__Union,
    LoggerName: u32,
    LogFileName: u32,
    TimeZone: TIME_ZONE_INFORMATION,
    BootTime: LARGE_INTEGER,
    PerfFreq: LARGE_INTEGER,
    StartTime: LARGE_INTEGER,
    ReservedFlags: u32,
    BuffersLost: u32,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const TRACE_LOGFILE_HEADER64 = extern struct {
    BufferSize: u32,
    Anonymous1: TRACE_LOGFILE_HEADER64._Anonymous1_e__Union,
    ProviderVersion: u32,
    NumberOfProcessors: u32,
    EndTime: LARGE_INTEGER,
    TimerResolution: u32,
    MaximumFileSize: u32,
    LogFileMode: u32,
    BuffersWritten: u32,
    Anonymous2: TRACE_LOGFILE_HEADER64._Anonymous2_e__Union,
    LoggerName: u64,
    LogFileName: u64,
    TimeZone: TIME_ZONE_INFORMATION,
    BootTime: LARGE_INTEGER,
    PerfFreq: LARGE_INTEGER,
    StartTime: LARGE_INTEGER,
    ReservedFlags: u32,
    BuffersLost: u32,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const EVENT_INSTANCE_INFO = extern struct {
    RegHandle: HANDLE,
    InstanceId: u32,
};

pub const EVENT_TRACE_PROPERTIES = extern struct {
    Wnode: WNODE_HEADER,
    BufferSize: u32,
    MinimumBuffers: u32,
    MaximumBuffers: u32,
    MaximumFileSize: u32,
    LogFileMode: u32,
    FlushTimer: u32,
    EnableFlags: u32,
    Anonymous: EVENT_TRACE_PROPERTIES._Anonymous_e__Union,
    NumberOfBuffers: u32,
    FreeBuffers: u32,
    EventsLost: u32,
    BuffersWritten: u32,
    LogBuffersLost: u32,
    RealTimeBuffersLost: u32,
    LoggerThreadId: HANDLE,
    LogFileNameOffset: u32,
    LoggerNameOffset: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const EVENT_TRACE_PROPERTIES_V2 = extern struct {
    Wnode: WNODE_HEADER,
    BufferSize: u32,
    MinimumBuffers: u32,
    MaximumBuffers: u32,
    MaximumFileSize: u32,
    LogFileMode: u32,
    FlushTimer: u32,
    EnableFlags: u32,
    Anonymous1: EVENT_TRACE_PROPERTIES_V2._Anonymous1_e__Union,
    NumberOfBuffers: u32,
    FreeBuffers: u32,
    EventsLost: u32,
    BuffersWritten: u32,
    LogBuffersLost: u32,
    RealTimeBuffersLost: u32,
    LoggerThreadId: HANDLE,
    LogFileNameOffset: u32,
    LoggerNameOffset: u32,
    Anonymous2: EVENT_TRACE_PROPERTIES_V2._Anonymous2_e__Union,
    FilterDescCount: u32,
    FilterDesc: *EVENT_FILTER_DESCRIPTOR,
    Anonymous3: EVENT_TRACE_PROPERTIES_V2._Anonymous3_e__Union,
    const _Anonymous3_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const TRACE_GUID_REGISTRATION = extern struct {
    Guid: *Guid,
    RegHandle: HANDLE,
};

pub const TRACE_GUID_PROPERTIES = extern struct {
    Guid: Guid,
    GuidType: u32,
    LoggerId: u32,
    EnableLevel: u32,
    EnableFlags: u32,
    IsEnable: u8,
};

pub const ETW_BUFFER_CONTEXT = extern struct {
    Anonymous: ETW_BUFFER_CONTEXT._Anonymous_e__Union,
    LoggerId: u16,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const TRACE_ENABLE_INFO = extern struct {
    IsEnabled: u32,
    Level: u8,
    Reserved1: u8,
    LoggerId: u16,
    EnableProperty: u32,
    Reserved2: u32,
    MatchAnyKeyword: u64,
    MatchAllKeyword: u64,
};

pub const TRACE_PROVIDER_INSTANCE_INFO = extern struct {
    NextOffset: u32,
    EnableCount: u32,
    Pid: u32,
    Flags: u32,
};

pub const TRACE_GUID_INFO = extern struct {
    InstanceCount: u32,
    Reserved: u32,
};

pub const PROFILE_SOURCE_INFO = extern struct {
    NextEntryOffset: u32,
    Source: u32,
    MinInterval: u32,
    MaxInterval: u32,
    Reserved: u64,
    Description: [1]u16,
};

pub const EVENT_TRACE = extern struct {
    Header: EVENT_TRACE_HEADER,
    InstanceId: u32,
    ParentInstanceId: u32,
    ParentGuid: Guid,
    MofData: *c_void,
    MofLength: u32,
    Anonymous: EVENT_TRACE._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PEVENT_TRACE_BUFFER_CALLBACKW = fn(
    Logfile: *EVENT_TRACE_LOGFILEW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PEVENT_TRACE_BUFFER_CALLBACKA = fn(
    Logfile: *EVENT_TRACE_LOGFILEA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PEVENT_CALLBACK = fn(
    pEvent: *EVENT_TRACE,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PEVENT_RECORD_CALLBACK = fn(
    EventRecord: *EVENT_RECORD,
) callconv(@import("std").os.windows.WINAPI) void;

pub const WMIDPREQUEST = fn(
    RequestCode: WMIDPREQUESTCODE,
    RequestContext: *c_void,
    BufferSize: *u32,
    Buffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const EVENT_TRACE_LOGFILEW = extern struct {
    LogFileName: PWSTR,
    LoggerName: PWSTR,
    CurrentTime: i64,
    BuffersRead: u32,
    Anonymous1: EVENT_TRACE_LOGFILEW._Anonymous1_e__Union,
    CurrentEvent: EVENT_TRACE,
    LogfileHeader: TRACE_LOGFILE_HEADER,
    BufferCallback: PEVENT_TRACE_BUFFER_CALLBACKW,
    BufferSize: u32,
    Filled: u32,
    EventsLost: u32,
    Anonymous2: EVENT_TRACE_LOGFILEW._Anonymous2_e__Union,
    IsKernelTrace: u32,
    Context: *c_void,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const EVENT_TRACE_LOGFILEA = extern struct {
    LogFileName: PSTR,
    LoggerName: PSTR,
    CurrentTime: i64,
    BuffersRead: u32,
    Anonymous1: EVENT_TRACE_LOGFILEA._Anonymous1_e__Union,
    CurrentEvent: EVENT_TRACE,
    LogfileHeader: TRACE_LOGFILE_HEADER,
    BufferCallback: PEVENT_TRACE_BUFFER_CALLBACKA,
    BufferSize: u32,
    Filled: u32,
    EventsLost: u32,
    Anonymous2: EVENT_TRACE_LOGFILEA._Anonymous2_e__Union,
    IsKernelTrace: u32,
    Context: *c_void,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const ENABLE_TRACE_PARAMETERS_V1 = extern struct {
    Version: u32,
    EnableProperty: u32,
    ControlFlags: u32,
    SourceId: Guid,
    EnableFilterDesc: *EVENT_FILTER_DESCRIPTOR,
};

pub const ENABLE_TRACE_PARAMETERS = extern struct {
    Version: u32,
    EnableProperty: u32,
    ControlFlags: u32,
    SourceId: Guid,
    EnableFilterDesc: *EVENT_FILTER_DESCRIPTOR,
    FilterDescCount: u32,
};

pub const TRACE_QUERY_INFO_CLASS = extern enum(i32) {
    TraceGuidQueryList = 0,
    TraceGuidQueryInfo = 1,
    TraceGuidQueryProcess = 2,
    TraceStackTracingInfo = 3,
    TraceSystemTraceEnableFlagsInfo = 4,
    TraceSampledProfileIntervalInfo = 5,
    TraceProfileSourceConfigInfo = 6,
    TraceProfileSourceListInfo = 7,
    TracePmcEventListInfo = 8,
    TracePmcCounterListInfo = 9,
    TraceSetDisallowList = 10,
    TraceVersionInfo = 11,
    TraceGroupQueryList = 12,
    TraceGroupQueryInfo = 13,
    TraceDisallowListQuery = 14,
    TraceInfoReserved15 = 15,
    TracePeriodicCaptureStateListInfo = 16,
    TracePeriodicCaptureStateInfo = 17,
    TraceProviderBinaryTracking = 18,
    TraceMaxLoggersQuery = 19,
    TraceLbrConfigurationInfo = 20,
    TraceLbrEventListInfo = 21,
    TraceMaxPmcCounterQuery = 22,
    MaxTraceSetInfoClass = 23,
};
pub const TraceGuidQueryList = TRACE_QUERY_INFO_CLASS.TraceGuidQueryList;
pub const TraceGuidQueryInfo = TRACE_QUERY_INFO_CLASS.TraceGuidQueryInfo;
pub const TraceGuidQueryProcess = TRACE_QUERY_INFO_CLASS.TraceGuidQueryProcess;
pub const TraceStackTracingInfo = TRACE_QUERY_INFO_CLASS.TraceStackTracingInfo;
pub const TraceSystemTraceEnableFlagsInfo = TRACE_QUERY_INFO_CLASS.TraceSystemTraceEnableFlagsInfo;
pub const TraceSampledProfileIntervalInfo = TRACE_QUERY_INFO_CLASS.TraceSampledProfileIntervalInfo;
pub const TraceProfileSourceConfigInfo = TRACE_QUERY_INFO_CLASS.TraceProfileSourceConfigInfo;
pub const TraceProfileSourceListInfo = TRACE_QUERY_INFO_CLASS.TraceProfileSourceListInfo;
pub const TracePmcEventListInfo = TRACE_QUERY_INFO_CLASS.TracePmcEventListInfo;
pub const TracePmcCounterListInfo = TRACE_QUERY_INFO_CLASS.TracePmcCounterListInfo;
pub const TraceSetDisallowList = TRACE_QUERY_INFO_CLASS.TraceSetDisallowList;
pub const TraceVersionInfo = TRACE_QUERY_INFO_CLASS.TraceVersionInfo;
pub const TraceGroupQueryList = TRACE_QUERY_INFO_CLASS.TraceGroupQueryList;
pub const TraceGroupQueryInfo = TRACE_QUERY_INFO_CLASS.TraceGroupQueryInfo;
pub const TraceDisallowListQuery = TRACE_QUERY_INFO_CLASS.TraceDisallowListQuery;
pub const TraceInfoReserved15 = TRACE_QUERY_INFO_CLASS.TraceInfoReserved15;
pub const TracePeriodicCaptureStateListInfo = TRACE_QUERY_INFO_CLASS.TracePeriodicCaptureStateListInfo;
pub const TracePeriodicCaptureStateInfo = TRACE_QUERY_INFO_CLASS.TracePeriodicCaptureStateInfo;
pub const TraceProviderBinaryTracking = TRACE_QUERY_INFO_CLASS.TraceProviderBinaryTracking;
pub const TraceMaxLoggersQuery = TRACE_QUERY_INFO_CLASS.TraceMaxLoggersQuery;
pub const TraceLbrConfigurationInfo = TRACE_QUERY_INFO_CLASS.TraceLbrConfigurationInfo;
pub const TraceLbrEventListInfo = TRACE_QUERY_INFO_CLASS.TraceLbrEventListInfo;
pub const TraceMaxPmcCounterQuery = TRACE_QUERY_INFO_CLASS.TraceMaxPmcCounterQuery;
pub const MaxTraceSetInfoClass = TRACE_QUERY_INFO_CLASS.MaxTraceSetInfoClass;

pub const CLASSIC_EVENT_ID = extern struct {
    EventGuid: Guid,
    Type: u8,
    Reserved: [7]u8,
};

pub const TRACE_PROFILE_INTERVAL = extern struct {
    Source: u32,
    Interval: u32,
};

pub const TRACE_VERSION_INFO = extern struct {
    EtwTraceProcessingVersion: u32,
    Reserved: u32,
};

pub const TRACE_PERIODIC_CAPTURE_STATE_INFO = extern struct {
    CaptureStateFrequencyInSeconds: u32,
    ProviderCount: u16,
    Reserved: u16,
};

pub const ETW_PROCESS_HANDLE_INFO_TYPE = extern enum(i32) {
    EtwQueryPartitionInformation = 1,
    EtwQueryPartitionInformationV2 = 2,
    EtwQueryLastDroppedTimes = 3,
    EtwQueryProcessHandleInfoMax = 4,
};
pub const EtwQueryPartitionInformation = ETW_PROCESS_HANDLE_INFO_TYPE.EtwQueryPartitionInformation;
pub const EtwQueryPartitionInformationV2 = ETW_PROCESS_HANDLE_INFO_TYPE.EtwQueryPartitionInformationV2;
pub const EtwQueryLastDroppedTimes = ETW_PROCESS_HANDLE_INFO_TYPE.EtwQueryLastDroppedTimes;
pub const EtwQueryProcessHandleInfoMax = ETW_PROCESS_HANDLE_INFO_TYPE.EtwQueryProcessHandleInfoMax;

pub const ETW_TRACE_PARTITION_INFORMATION = extern struct {
    PartitionId: Guid,
    ParentId: Guid,
    QpcOffsetFromRoot: i64,
    PartitionType: u32,
};

pub const ETW_TRACE_PARTITION_INFORMATION_V2 = extern struct {
    QpcOffsetFromRoot: i64,
    PartitionType: u32,
    PartitionId: PWSTR,
    ParentId: PWSTR,
};

pub const EVENT_DATA_DESCRIPTOR = extern struct {
    Ptr: u64,
    Size: u32,
    Anonymous: EVENT_DATA_DESCRIPTOR._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const EVENT_DESCRIPTOR = extern struct {
    Id: u16,
    Version: u8,
    Channel: u8,
    Level: u8,
    Opcode: u8,
    Task: u16,
    Keyword: u64,
};

pub const EVENT_FILTER_DESCRIPTOR = extern struct {
    Ptr: u64,
    Size: u32,
    Type: u32,
};

pub const EVENT_FILTER_HEADER = extern struct {
    Id: u16,
    Version: u8,
    Reserved: [5]u8,
    InstanceId: u64,
    Size: u32,
    NextOffset: u32,
};

pub const EVENT_FILTER_EVENT_ID = extern struct {
    FilterIn: u8,
    Reserved: u8,
    Count: u16,
    Events: [1]u16,
};

pub const EVENT_FILTER_EVENT_NAME = extern struct {
    MatchAnyKeyword: u64,
    MatchAllKeyword: u64,
    Level: u8,
    FilterIn: u8,
    NameCount: u16,
    Names: [1]u8,
};

pub const EVENT_FILTER_LEVEL_KW = extern struct {
    MatchAnyKeyword: u64,
    MatchAllKeyword: u64,
    Level: u8,
    FilterIn: u8,
};

pub const EVENT_INFO_CLASS = extern enum(i32) {
    EventProviderBinaryTrackInfo = 0,
    EventProviderSetReserved1 = 1,
    EventProviderSetTraits = 2,
    EventProviderUseDescriptorType = 3,
    MaxEventInfo = 4,
};
pub const EventProviderBinaryTrackInfo = EVENT_INFO_CLASS.EventProviderBinaryTrackInfo;
pub const EventProviderSetReserved1 = EVENT_INFO_CLASS.EventProviderSetReserved1;
pub const EventProviderSetTraits = EVENT_INFO_CLASS.EventProviderSetTraits;
pub const EventProviderUseDescriptorType = EVENT_INFO_CLASS.EventProviderUseDescriptorType;
pub const MaxEventInfo = EVENT_INFO_CLASS.MaxEventInfo;

pub const PENABLECALLBACK = fn(
    SourceId: *Guid,
    IsEnabled: u32,
    Level: u8,
    MatchAnyKeyword: u64,
    MatchAllKeyword: u64,
    FilterData: ?*EVENT_FILTER_DESCRIPTOR,
    CallbackContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const EVENT_HEADER_EXTENDED_DATA_ITEM = extern struct {
    Reserved1: u16,
    ExtType: u16,
    Anonymous: EVENT_HEADER_EXTENDED_DATA_ITEM._Anonymous_e__Struct,
    DataSize: u16,
    DataPtr: u64,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const EVENT_EXTENDED_ITEM_INSTANCE = extern struct {
    InstanceId: u32,
    ParentInstanceId: u32,
    ParentGuid: Guid,
};

pub const EVENT_EXTENDED_ITEM_RELATED_ACTIVITYID = extern struct {
    RelatedActivityId: Guid,
};

pub const EVENT_EXTENDED_ITEM_TS_ID = extern struct {
    SessionId: u32,
};

pub const EVENT_EXTENDED_ITEM_STACK_TRACE32 = extern struct {
    MatchId: u64,
    Address: [1]u32,
};

pub const EVENT_EXTENDED_ITEM_STACK_TRACE64 = extern struct {
    MatchId: u64,
    Address: [1]u64,
};

pub const EVENT_EXTENDED_ITEM_PEBS_INDEX = extern struct {
    PebsIndex: u64,
};

pub const EVENT_EXTENDED_ITEM_PMC_COUNTERS = extern struct {
    Counter: [1]u64,
};

pub const EVENT_EXTENDED_ITEM_PROCESS_START_KEY = extern struct {
    ProcessStartKey: u64,
};

pub const EVENT_EXTENDED_ITEM_EVENT_KEY = extern struct {
    Key: u64,
};

pub const EVENT_HEADER = extern struct {
    Size: u16,
    HeaderType: u16,
    Flags: u16,
    EventProperty: u16,
    ThreadId: u32,
    ProcessId: u32,
    TimeStamp: LARGE_INTEGER,
    ProviderId: Guid,
    EventDescriptor: EVENT_DESCRIPTOR,
    Anonymous: EVENT_HEADER._Anonymous_e__Union,
    ActivityId: Guid,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const EVENT_RECORD = extern struct {
    EventHeader: EVENT_HEADER,
    BufferContext: ETW_BUFFER_CONTEXT,
    ExtendedDataCount: u16,
    UserDataLength: u16,
    ExtendedData: *EVENT_HEADER_EXTENDED_DATA_ITEM,
    UserData: *c_void,
    UserContext: *c_void,
};

pub const ETW_PROVIDER_TRAIT_TYPE = extern enum(i32) {
    EtwProviderTraitTypeGroup = 1,
    EtwProviderTraitDecodeGuid = 2,
    EtwProviderTraitTypeMax = 3,
};
pub const EtwProviderTraitTypeGroup = ETW_PROVIDER_TRAIT_TYPE.EtwProviderTraitTypeGroup;
pub const EtwProviderTraitDecodeGuid = ETW_PROVIDER_TRAIT_TYPE.EtwProviderTraitDecodeGuid;
pub const EtwProviderTraitTypeMax = ETW_PROVIDER_TRAIT_TYPE.EtwProviderTraitTypeMax;

pub const EVENTSECURITYOPERATION = extern enum(i32) {
    EventSecuritySetDACL = 0,
    EventSecuritySetSACL = 1,
    EventSecurityAddDACL = 2,
    EventSecurityAddSACL = 3,
    EventSecurityMax = 4,
};
pub const EventSecuritySetDACL = EVENTSECURITYOPERATION.EventSecuritySetDACL;
pub const EventSecuritySetSACL = EVENTSECURITYOPERATION.EventSecuritySetSACL;
pub const EventSecurityAddDACL = EVENTSECURITYOPERATION.EventSecurityAddDACL;
pub const EventSecurityAddSACL = EVENTSECURITYOPERATION.EventSecurityAddSACL;
pub const EventSecurityMax = EVENTSECURITYOPERATION.EventSecurityMax;

pub const EVENT_MAP_ENTRY = extern struct {
    OutputOffset: u32,
    Anonymous: EVENT_MAP_ENTRY._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const MAP_FLAGS = extern enum(i32) {
    EVENTMAP_INFO_FLAG_MANIFEST_VALUEMAP = 1,
    EVENTMAP_INFO_FLAG_MANIFEST_BITMAP = 2,
    EVENTMAP_INFO_FLAG_MANIFEST_PATTERNMAP = 4,
    EVENTMAP_INFO_FLAG_WBEM_VALUEMAP = 8,
    EVENTMAP_INFO_FLAG_WBEM_BITMAP = 16,
    EVENTMAP_INFO_FLAG_WBEM_FLAG = 32,
    EVENTMAP_INFO_FLAG_WBEM_NO_MAP = 64,
};
pub const EVENTMAP_INFO_FLAG_MANIFEST_VALUEMAP = MAP_FLAGS.EVENTMAP_INFO_FLAG_MANIFEST_VALUEMAP;
pub const EVENTMAP_INFO_FLAG_MANIFEST_BITMAP = MAP_FLAGS.EVENTMAP_INFO_FLAG_MANIFEST_BITMAP;
pub const EVENTMAP_INFO_FLAG_MANIFEST_PATTERNMAP = MAP_FLAGS.EVENTMAP_INFO_FLAG_MANIFEST_PATTERNMAP;
pub const EVENTMAP_INFO_FLAG_WBEM_VALUEMAP = MAP_FLAGS.EVENTMAP_INFO_FLAG_WBEM_VALUEMAP;
pub const EVENTMAP_INFO_FLAG_WBEM_BITMAP = MAP_FLAGS.EVENTMAP_INFO_FLAG_WBEM_BITMAP;
pub const EVENTMAP_INFO_FLAG_WBEM_FLAG = MAP_FLAGS.EVENTMAP_INFO_FLAG_WBEM_FLAG;
pub const EVENTMAP_INFO_FLAG_WBEM_NO_MAP = MAP_FLAGS.EVENTMAP_INFO_FLAG_WBEM_NO_MAP;

pub const MAP_VALUETYPE = extern enum(i32) {
    EVENTMAP_ENTRY_VALUETYPE_ULONG = 0,
    EVENTMAP_ENTRY_VALUETYPE_STRING = 1,
};
pub const EVENTMAP_ENTRY_VALUETYPE_ULONG = MAP_VALUETYPE.EVENTMAP_ENTRY_VALUETYPE_ULONG;
pub const EVENTMAP_ENTRY_VALUETYPE_STRING = MAP_VALUETYPE.EVENTMAP_ENTRY_VALUETYPE_STRING;

pub const EVENT_MAP_INFO = extern struct {
    NameOffset: u32,
    Flag: MAP_FLAGS,
    EntryCount: u32,
    Anonymous: EVENT_MAP_INFO._Anonymous_e__Union,
    MapEntryArray: [1]EVENT_MAP_ENTRY,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const _TDH_IN_TYPE = extern enum(i32) {
    TDH_INTYPE_NULL = 0,
    TDH_INTYPE_UNICODESTRING = 1,
    TDH_INTYPE_ANSISTRING = 2,
    TDH_INTYPE_INT8 = 3,
    TDH_INTYPE_UINT8 = 4,
    TDH_INTYPE_INT16 = 5,
    TDH_INTYPE_UINT16 = 6,
    TDH_INTYPE_INT32 = 7,
    TDH_INTYPE_UINT32 = 8,
    TDH_INTYPE_INT64 = 9,
    TDH_INTYPE_UINT64 = 10,
    TDH_INTYPE_FLOAT = 11,
    TDH_INTYPE_DOUBLE = 12,
    TDH_INTYPE_BOOLEAN = 13,
    TDH_INTYPE_BINARY = 14,
    TDH_INTYPE_GUID = 15,
    TDH_INTYPE_POINTER = 16,
    TDH_INTYPE_FILETIME = 17,
    TDH_INTYPE_SYSTEMTIME = 18,
    TDH_INTYPE_SID = 19,
    TDH_INTYPE_HEXINT32 = 20,
    TDH_INTYPE_HEXINT64 = 21,
    TDH_INTYPE_MANIFEST_COUNTEDSTRING = 22,
    TDH_INTYPE_MANIFEST_COUNTEDANSISTRING = 23,
    TDH_INTYPE_RESERVED24 = 24,
    TDH_INTYPE_MANIFEST_COUNTEDBINARY = 25,
    TDH_INTYPE_COUNTEDSTRING = 300,
    TDH_INTYPE_COUNTEDANSISTRING = 301,
    TDH_INTYPE_REVERSEDCOUNTEDSTRING = 302,
    TDH_INTYPE_REVERSEDCOUNTEDANSISTRING = 303,
    TDH_INTYPE_NONNULLTERMINATEDSTRING = 304,
    TDH_INTYPE_NONNULLTERMINATEDANSISTRING = 305,
    TDH_INTYPE_UNICODECHAR = 306,
    TDH_INTYPE_ANSICHAR = 307,
    TDH_INTYPE_SIZET = 308,
    TDH_INTYPE_HEXDUMP = 309,
    TDH_INTYPE_WBEMSID = 310,
};
pub const TDH_INTYPE_NULL = _TDH_IN_TYPE.TDH_INTYPE_NULL;
pub const TDH_INTYPE_UNICODESTRING = _TDH_IN_TYPE.TDH_INTYPE_UNICODESTRING;
pub const TDH_INTYPE_ANSISTRING = _TDH_IN_TYPE.TDH_INTYPE_ANSISTRING;
pub const TDH_INTYPE_INT8 = _TDH_IN_TYPE.TDH_INTYPE_INT8;
pub const TDH_INTYPE_UINT8 = _TDH_IN_TYPE.TDH_INTYPE_UINT8;
pub const TDH_INTYPE_INT16 = _TDH_IN_TYPE.TDH_INTYPE_INT16;
pub const TDH_INTYPE_UINT16 = _TDH_IN_TYPE.TDH_INTYPE_UINT16;
pub const TDH_INTYPE_INT32 = _TDH_IN_TYPE.TDH_INTYPE_INT32;
pub const TDH_INTYPE_UINT32 = _TDH_IN_TYPE.TDH_INTYPE_UINT32;
pub const TDH_INTYPE_INT64 = _TDH_IN_TYPE.TDH_INTYPE_INT64;
pub const TDH_INTYPE_UINT64 = _TDH_IN_TYPE.TDH_INTYPE_UINT64;
pub const TDH_INTYPE_FLOAT = _TDH_IN_TYPE.TDH_INTYPE_FLOAT;
pub const TDH_INTYPE_DOUBLE = _TDH_IN_TYPE.TDH_INTYPE_DOUBLE;
pub const TDH_INTYPE_BOOLEAN = _TDH_IN_TYPE.TDH_INTYPE_BOOLEAN;
pub const TDH_INTYPE_BINARY = _TDH_IN_TYPE.TDH_INTYPE_BINARY;
pub const TDH_INTYPE_GUID = _TDH_IN_TYPE.TDH_INTYPE_GUID;
pub const TDH_INTYPE_POINTER = _TDH_IN_TYPE.TDH_INTYPE_POINTER;
pub const TDH_INTYPE_FILETIME = _TDH_IN_TYPE.TDH_INTYPE_FILETIME;
pub const TDH_INTYPE_SYSTEMTIME = _TDH_IN_TYPE.TDH_INTYPE_SYSTEMTIME;
pub const TDH_INTYPE_SID = _TDH_IN_TYPE.TDH_INTYPE_SID;
pub const TDH_INTYPE_HEXINT32 = _TDH_IN_TYPE.TDH_INTYPE_HEXINT32;
pub const TDH_INTYPE_HEXINT64 = _TDH_IN_TYPE.TDH_INTYPE_HEXINT64;
pub const TDH_INTYPE_MANIFEST_COUNTEDSTRING = _TDH_IN_TYPE.TDH_INTYPE_MANIFEST_COUNTEDSTRING;
pub const TDH_INTYPE_MANIFEST_COUNTEDANSISTRING = _TDH_IN_TYPE.TDH_INTYPE_MANIFEST_COUNTEDANSISTRING;
pub const TDH_INTYPE_RESERVED24 = _TDH_IN_TYPE.TDH_INTYPE_RESERVED24;
pub const TDH_INTYPE_MANIFEST_COUNTEDBINARY = _TDH_IN_TYPE.TDH_INTYPE_MANIFEST_COUNTEDBINARY;
pub const TDH_INTYPE_COUNTEDSTRING = _TDH_IN_TYPE.TDH_INTYPE_COUNTEDSTRING;
pub const TDH_INTYPE_COUNTEDANSISTRING = _TDH_IN_TYPE.TDH_INTYPE_COUNTEDANSISTRING;
pub const TDH_INTYPE_REVERSEDCOUNTEDSTRING = _TDH_IN_TYPE.TDH_INTYPE_REVERSEDCOUNTEDSTRING;
pub const TDH_INTYPE_REVERSEDCOUNTEDANSISTRING = _TDH_IN_TYPE.TDH_INTYPE_REVERSEDCOUNTEDANSISTRING;
pub const TDH_INTYPE_NONNULLTERMINATEDSTRING = _TDH_IN_TYPE.TDH_INTYPE_NONNULLTERMINATEDSTRING;
pub const TDH_INTYPE_NONNULLTERMINATEDANSISTRING = _TDH_IN_TYPE.TDH_INTYPE_NONNULLTERMINATEDANSISTRING;
pub const TDH_INTYPE_UNICODECHAR = _TDH_IN_TYPE.TDH_INTYPE_UNICODECHAR;
pub const TDH_INTYPE_ANSICHAR = _TDH_IN_TYPE.TDH_INTYPE_ANSICHAR;
pub const TDH_INTYPE_SIZET = _TDH_IN_TYPE.TDH_INTYPE_SIZET;
pub const TDH_INTYPE_HEXDUMP = _TDH_IN_TYPE.TDH_INTYPE_HEXDUMP;
pub const TDH_INTYPE_WBEMSID = _TDH_IN_TYPE.TDH_INTYPE_WBEMSID;

pub const _TDH_OUT_TYPE = extern enum(i32) {
    TDH_OUTTYPE_NULL = 0,
    TDH_OUTTYPE_STRING = 1,
    TDH_OUTTYPE_DATETIME = 2,
    TDH_OUTTYPE_BYTE = 3,
    TDH_OUTTYPE_UNSIGNEDBYTE = 4,
    TDH_OUTTYPE_SHORT = 5,
    TDH_OUTTYPE_UNSIGNEDSHORT = 6,
    TDH_OUTTYPE_INT = 7,
    TDH_OUTTYPE_UNSIGNEDINT = 8,
    TDH_OUTTYPE_LONG = 9,
    TDH_OUTTYPE_UNSIGNEDLONG = 10,
    TDH_OUTTYPE_FLOAT = 11,
    TDH_OUTTYPE_DOUBLE = 12,
    TDH_OUTTYPE_BOOLEAN = 13,
    TDH_OUTTYPE_GUID = 14,
    TDH_OUTTYPE_HEXBINARY = 15,
    TDH_OUTTYPE_HEXINT8 = 16,
    TDH_OUTTYPE_HEXINT16 = 17,
    TDH_OUTTYPE_HEXINT32 = 18,
    TDH_OUTTYPE_HEXINT64 = 19,
    TDH_OUTTYPE_PID = 20,
    TDH_OUTTYPE_TID = 21,
    TDH_OUTTYPE_PORT = 22,
    TDH_OUTTYPE_IPV4 = 23,
    TDH_OUTTYPE_IPV6 = 24,
    TDH_OUTTYPE_SOCKETADDRESS = 25,
    TDH_OUTTYPE_CIMDATETIME = 26,
    TDH_OUTTYPE_ETWTIME = 27,
    TDH_OUTTYPE_XML = 28,
    TDH_OUTTYPE_ERRORCODE = 29,
    TDH_OUTTYPE_WIN32ERROR = 30,
    TDH_OUTTYPE_NTSTATUS = 31,
    TDH_OUTTYPE_HRESULT = 32,
    TDH_OUTTYPE_CULTURE_INSENSITIVE_DATETIME = 33,
    TDH_OUTTYPE_JSON = 34,
    TDH_OUTTYPE_UTF8 = 35,
    TDH_OUTTYPE_PKCS7_WITH_TYPE_INFO = 36,
    TDH_OUTTYPE_CODE_POINTER = 37,
    TDH_OUTTYPE_DATETIME_UTC = 38,
    TDH_OUTTYPE_REDUCEDSTRING = 300,
    TDH_OUTTYPE_NOPRINT = 301,
};
pub const TDH_OUTTYPE_NULL = _TDH_OUT_TYPE.TDH_OUTTYPE_NULL;
pub const TDH_OUTTYPE_STRING = _TDH_OUT_TYPE.TDH_OUTTYPE_STRING;
pub const TDH_OUTTYPE_DATETIME = _TDH_OUT_TYPE.TDH_OUTTYPE_DATETIME;
pub const TDH_OUTTYPE_BYTE = _TDH_OUT_TYPE.TDH_OUTTYPE_BYTE;
pub const TDH_OUTTYPE_UNSIGNEDBYTE = _TDH_OUT_TYPE.TDH_OUTTYPE_UNSIGNEDBYTE;
pub const TDH_OUTTYPE_SHORT = _TDH_OUT_TYPE.TDH_OUTTYPE_SHORT;
pub const TDH_OUTTYPE_UNSIGNEDSHORT = _TDH_OUT_TYPE.TDH_OUTTYPE_UNSIGNEDSHORT;
pub const TDH_OUTTYPE_INT = _TDH_OUT_TYPE.TDH_OUTTYPE_INT;
pub const TDH_OUTTYPE_UNSIGNEDINT = _TDH_OUT_TYPE.TDH_OUTTYPE_UNSIGNEDINT;
pub const TDH_OUTTYPE_LONG = _TDH_OUT_TYPE.TDH_OUTTYPE_LONG;
pub const TDH_OUTTYPE_UNSIGNEDLONG = _TDH_OUT_TYPE.TDH_OUTTYPE_UNSIGNEDLONG;
pub const TDH_OUTTYPE_FLOAT = _TDH_OUT_TYPE.TDH_OUTTYPE_FLOAT;
pub const TDH_OUTTYPE_DOUBLE = _TDH_OUT_TYPE.TDH_OUTTYPE_DOUBLE;
pub const TDH_OUTTYPE_BOOLEAN = _TDH_OUT_TYPE.TDH_OUTTYPE_BOOLEAN;
pub const TDH_OUTTYPE_GUID = _TDH_OUT_TYPE.TDH_OUTTYPE_GUID;
pub const TDH_OUTTYPE_HEXBINARY = _TDH_OUT_TYPE.TDH_OUTTYPE_HEXBINARY;
pub const TDH_OUTTYPE_HEXINT8 = _TDH_OUT_TYPE.TDH_OUTTYPE_HEXINT8;
pub const TDH_OUTTYPE_HEXINT16 = _TDH_OUT_TYPE.TDH_OUTTYPE_HEXINT16;
pub const TDH_OUTTYPE_HEXINT32 = _TDH_OUT_TYPE.TDH_OUTTYPE_HEXINT32;
pub const TDH_OUTTYPE_HEXINT64 = _TDH_OUT_TYPE.TDH_OUTTYPE_HEXINT64;
pub const TDH_OUTTYPE_PID = _TDH_OUT_TYPE.TDH_OUTTYPE_PID;
pub const TDH_OUTTYPE_TID = _TDH_OUT_TYPE.TDH_OUTTYPE_TID;
pub const TDH_OUTTYPE_PORT = _TDH_OUT_TYPE.TDH_OUTTYPE_PORT;
pub const TDH_OUTTYPE_IPV4 = _TDH_OUT_TYPE.TDH_OUTTYPE_IPV4;
pub const TDH_OUTTYPE_IPV6 = _TDH_OUT_TYPE.TDH_OUTTYPE_IPV6;
pub const TDH_OUTTYPE_SOCKETADDRESS = _TDH_OUT_TYPE.TDH_OUTTYPE_SOCKETADDRESS;
pub const TDH_OUTTYPE_CIMDATETIME = _TDH_OUT_TYPE.TDH_OUTTYPE_CIMDATETIME;
pub const TDH_OUTTYPE_ETWTIME = _TDH_OUT_TYPE.TDH_OUTTYPE_ETWTIME;
pub const TDH_OUTTYPE_XML = _TDH_OUT_TYPE.TDH_OUTTYPE_XML;
pub const TDH_OUTTYPE_ERRORCODE = _TDH_OUT_TYPE.TDH_OUTTYPE_ERRORCODE;
pub const TDH_OUTTYPE_WIN32ERROR = _TDH_OUT_TYPE.TDH_OUTTYPE_WIN32ERROR;
pub const TDH_OUTTYPE_NTSTATUS = _TDH_OUT_TYPE.TDH_OUTTYPE_NTSTATUS;
pub const TDH_OUTTYPE_HRESULT = _TDH_OUT_TYPE.TDH_OUTTYPE_HRESULT;
pub const TDH_OUTTYPE_CULTURE_INSENSITIVE_DATETIME = _TDH_OUT_TYPE.TDH_OUTTYPE_CULTURE_INSENSITIVE_DATETIME;
pub const TDH_OUTTYPE_JSON = _TDH_OUT_TYPE.TDH_OUTTYPE_JSON;
pub const TDH_OUTTYPE_UTF8 = _TDH_OUT_TYPE.TDH_OUTTYPE_UTF8;
pub const TDH_OUTTYPE_PKCS7_WITH_TYPE_INFO = _TDH_OUT_TYPE.TDH_OUTTYPE_PKCS7_WITH_TYPE_INFO;
pub const TDH_OUTTYPE_CODE_POINTER = _TDH_OUT_TYPE.TDH_OUTTYPE_CODE_POINTER;
pub const TDH_OUTTYPE_DATETIME_UTC = _TDH_OUT_TYPE.TDH_OUTTYPE_DATETIME_UTC;
pub const TDH_OUTTYPE_REDUCEDSTRING = _TDH_OUT_TYPE.TDH_OUTTYPE_REDUCEDSTRING;
pub const TDH_OUTTYPE_NOPRINT = _TDH_OUT_TYPE.TDH_OUTTYPE_NOPRINT;

pub const PROPERTY_FLAGS = extern enum(i32) {
    PropertyStruct = 1,
    PropertyParamLength = 2,
    PropertyParamCount = 4,
    PropertyWBEMXmlFragment = 8,
    PropertyParamFixedLength = 16,
    PropertyParamFixedCount = 32,
    PropertyHasTags = 64,
    PropertyHasCustomSchema = 128,
};
pub const PropertyStruct = PROPERTY_FLAGS.PropertyStruct;
pub const PropertyParamLength = PROPERTY_FLAGS.PropertyParamLength;
pub const PropertyParamCount = PROPERTY_FLAGS.PropertyParamCount;
pub const PropertyWBEMXmlFragment = PROPERTY_FLAGS.PropertyWBEMXmlFragment;
pub const PropertyParamFixedLength = PROPERTY_FLAGS.PropertyParamFixedLength;
pub const PropertyParamFixedCount = PROPERTY_FLAGS.PropertyParamFixedCount;
pub const PropertyHasTags = PROPERTY_FLAGS.PropertyHasTags;
pub const PropertyHasCustomSchema = PROPERTY_FLAGS.PropertyHasCustomSchema;

pub const EVENT_PROPERTY_INFO = extern struct {
    Flags: PROPERTY_FLAGS,
    NameOffset: u32,
    Anonymous1: EVENT_PROPERTY_INFO._Anonymous1_e__Union,
    Anonymous2: EVENT_PROPERTY_INFO._Anonymous2_e__Union,
    Anonymous3: EVENT_PROPERTY_INFO._Anonymous3_e__Union,
    Anonymous4: EVENT_PROPERTY_INFO._Anonymous4_e__Union,
    const _Anonymous4_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous3_e__Union = u32; // TODO: generate this nested type!
};

pub const DECODING_SOURCE = extern enum(i32) {
    DecodingSourceXMLFile = 0,
    DecodingSourceWbem = 1,
    DecodingSourceWPP = 2,
    DecodingSourceTlg = 3,
    DecodingSourceMax = 4,
};
pub const DecodingSourceXMLFile = DECODING_SOURCE.DecodingSourceXMLFile;
pub const DecodingSourceWbem = DECODING_SOURCE.DecodingSourceWbem;
pub const DecodingSourceWPP = DECODING_SOURCE.DecodingSourceWPP;
pub const DecodingSourceTlg = DECODING_SOURCE.DecodingSourceTlg;
pub const DecodingSourceMax = DECODING_SOURCE.DecodingSourceMax;

pub const TEMPLATE_FLAGS = extern enum(i32) {
    TEMPLATE_EVENT_DATA = 1,
    TEMPLATE_USER_DATA = 2,
    TEMPLATE_CONTROL_GUID = 4,
};
pub const TEMPLATE_EVENT_DATA = TEMPLATE_FLAGS.TEMPLATE_EVENT_DATA;
pub const TEMPLATE_USER_DATA = TEMPLATE_FLAGS.TEMPLATE_USER_DATA;
pub const TEMPLATE_CONTROL_GUID = TEMPLATE_FLAGS.TEMPLATE_CONTROL_GUID;

pub const TRACE_EVENT_INFO = extern struct {
    ProviderGuid: Guid,
    EventGuid: Guid,
    EventDescriptor: EVENT_DESCRIPTOR,
    DecodingSource: DECODING_SOURCE,
    ProviderNameOffset: u32,
    LevelNameOffset: u32,
    ChannelNameOffset: u32,
    KeywordsNameOffset: u32,
    TaskNameOffset: u32,
    OpcodeNameOffset: u32,
    EventMessageOffset: u32,
    ProviderMessageOffset: u32,
    BinaryXMLOffset: u32,
    BinaryXMLSize: u32,
    Anonymous1: TRACE_EVENT_INFO._Anonymous1_e__Union,
    Anonymous2: TRACE_EVENT_INFO._Anonymous2_e__Union,
    PropertyCount: u32,
    TopLevelPropertyCount: u32,
    Anonymous3: TRACE_EVENT_INFO._Anonymous3_e__Union,
    EventPropertyInfoArray: [1]EVENT_PROPERTY_INFO,
    const _Anonymous3_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const PROPERTY_DATA_DESCRIPTOR = extern struct {
    PropertyName: u64,
    ArrayIndex: u32,
    Reserved: u32,
};

pub const PAYLOAD_OPERATOR = extern enum(i32) {
    PAYLOADFIELD_EQ = 0,
    PAYLOADFIELD_NE = 1,
    PAYLOADFIELD_LE = 2,
    PAYLOADFIELD_GT = 3,
    PAYLOADFIELD_LT = 4,
    PAYLOADFIELD_GE = 5,
    PAYLOADFIELD_BETWEEN = 6,
    PAYLOADFIELD_NOTBETWEEN = 7,
    PAYLOADFIELD_MODULO = 8,
    PAYLOADFIELD_CONTAINS = 20,
    PAYLOADFIELD_DOESNTCONTAIN = 21,
    PAYLOADFIELD_IS = 30,
    PAYLOADFIELD_ISNOT = 31,
    PAYLOADFIELD_INVALID = 32,
};
pub const PAYLOADFIELD_EQ = PAYLOAD_OPERATOR.PAYLOADFIELD_EQ;
pub const PAYLOADFIELD_NE = PAYLOAD_OPERATOR.PAYLOADFIELD_NE;
pub const PAYLOADFIELD_LE = PAYLOAD_OPERATOR.PAYLOADFIELD_LE;
pub const PAYLOADFIELD_GT = PAYLOAD_OPERATOR.PAYLOADFIELD_GT;
pub const PAYLOADFIELD_LT = PAYLOAD_OPERATOR.PAYLOADFIELD_LT;
pub const PAYLOADFIELD_GE = PAYLOAD_OPERATOR.PAYLOADFIELD_GE;
pub const PAYLOADFIELD_BETWEEN = PAYLOAD_OPERATOR.PAYLOADFIELD_BETWEEN;
pub const PAYLOADFIELD_NOTBETWEEN = PAYLOAD_OPERATOR.PAYLOADFIELD_NOTBETWEEN;
pub const PAYLOADFIELD_MODULO = PAYLOAD_OPERATOR.PAYLOADFIELD_MODULO;
pub const PAYLOADFIELD_CONTAINS = PAYLOAD_OPERATOR.PAYLOADFIELD_CONTAINS;
pub const PAYLOADFIELD_DOESNTCONTAIN = PAYLOAD_OPERATOR.PAYLOADFIELD_DOESNTCONTAIN;
pub const PAYLOADFIELD_IS = PAYLOAD_OPERATOR.PAYLOADFIELD_IS;
pub const PAYLOADFIELD_ISNOT = PAYLOAD_OPERATOR.PAYLOADFIELD_ISNOT;
pub const PAYLOADFIELD_INVALID = PAYLOAD_OPERATOR.PAYLOADFIELD_INVALID;

pub const PAYLOAD_FILTER_PREDICATE = extern struct {
    FieldName: PWSTR,
    CompareOp: u16,
    Value: PWSTR,
};

pub const PROVIDER_FILTER_INFO = extern struct {
    Id: u8,
    Version: u8,
    MessageOffset: u32,
    Reserved: u32,
    PropertyCount: u32,
    EventPropertyInfoArray: [1]EVENT_PROPERTY_INFO,
};

pub const EVENT_FIELD_TYPE = extern enum(i32) {
    EventKeywordInformation = 0,
    EventLevelInformation = 1,
    EventChannelInformation = 2,
    EventTaskInformation = 3,
    EventOpcodeInformation = 4,
    EventInformationMax = 5,
};
pub const EventKeywordInformation = EVENT_FIELD_TYPE.EventKeywordInformation;
pub const EventLevelInformation = EVENT_FIELD_TYPE.EventLevelInformation;
pub const EventChannelInformation = EVENT_FIELD_TYPE.EventChannelInformation;
pub const EventTaskInformation = EVENT_FIELD_TYPE.EventTaskInformation;
pub const EventOpcodeInformation = EVENT_FIELD_TYPE.EventOpcodeInformation;
pub const EventInformationMax = EVENT_FIELD_TYPE.EventInformationMax;

pub const PROVIDER_FIELD_INFO = extern struct {
    NameOffset: u32,
    DescriptionOffset: u32,
    Value: u64,
};

pub const PROVIDER_FIELD_INFOARRAY = extern struct {
    NumberOfElements: u32,
    FieldType: EVENT_FIELD_TYPE,
    FieldInfoArray: [1]PROVIDER_FIELD_INFO,
};

pub const TRACE_PROVIDER_INFO = extern struct {
    ProviderGuid: Guid,
    SchemaSource: u32,
    ProviderNameOffset: u32,
};

pub const PROVIDER_ENUMERATION_INFO = extern struct {
    NumberOfProviders: u32,
    Reserved: u32,
    TraceProviderInfoArray: [1]TRACE_PROVIDER_INFO,
};

pub const PROVIDER_EVENT_INFO = extern struct {
    NumberOfEvents: u32,
    Reserved: u32,
    EventDescriptorsArray: [1]EVENT_DESCRIPTOR,
};

pub const TDH_CONTEXT_TYPE = extern enum(i32) {
    TDH_CONTEXT_WPP_TMFFILE = 0,
    TDH_CONTEXT_WPP_TMFSEARCHPATH = 1,
    TDH_CONTEXT_WPP_GMT = 2,
    TDH_CONTEXT_POINTERSIZE = 3,
    TDH_CONTEXT_PDB_PATH = 4,
    TDH_CONTEXT_MAXIMUM = 5,
};
pub const TDH_CONTEXT_WPP_TMFFILE = TDH_CONTEXT_TYPE.TDH_CONTEXT_WPP_TMFFILE;
pub const TDH_CONTEXT_WPP_TMFSEARCHPATH = TDH_CONTEXT_TYPE.TDH_CONTEXT_WPP_TMFSEARCHPATH;
pub const TDH_CONTEXT_WPP_GMT = TDH_CONTEXT_TYPE.TDH_CONTEXT_WPP_GMT;
pub const TDH_CONTEXT_POINTERSIZE = TDH_CONTEXT_TYPE.TDH_CONTEXT_POINTERSIZE;
pub const TDH_CONTEXT_PDB_PATH = TDH_CONTEXT_TYPE.TDH_CONTEXT_PDB_PATH;
pub const TDH_CONTEXT_MAXIMUM = TDH_CONTEXT_TYPE.TDH_CONTEXT_MAXIMUM;

pub const TDH_CONTEXT = extern struct {
    ParameterValue: u64,
    ParameterType: TDH_CONTEXT_TYPE,
    ParameterSize: u32,
};

const CLSID_CTraceRelogger_Value = @import("../zig.zig").Guid.initString("7b40792d-05ff-44c4-9058-f440c71f17d4");
pub const CLSID_CTraceRelogger = &CLSID_CTraceRelogger_Value;

const IID_ITraceEvent_Value = @import("../zig.zig").Guid.initString("8cc97f40-9028-4ff3-9b62-7d1f79ca7bcb");
pub const IID_ITraceEvent = &IID_ITraceEvent_Value;
pub const ITraceEvent = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Clone: fn(
            self: *const ITraceEvent,
            NewEvent: **ITraceEvent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserContext: fn(
            self: *const ITraceEvent,
            UserContext: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventRecord: fn(
            self: *const ITraceEvent,
            EventRecord: **EVENT_RECORD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPayload: fn(
            self: *const ITraceEvent,
            Payload: [*:0]u8,
            PayloadSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEventDescriptor: fn(
            self: *const ITraceEvent,
            EventDescriptor: *EVENT_DESCRIPTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProcessId: fn(
            self: *const ITraceEvent,
            ProcessId: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProcessorIndex: fn(
            self: *const ITraceEvent,
            ProcessorIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThreadId: fn(
            self: *const ITraceEvent,
            ThreadId: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThreadTimes: fn(
            self: *const ITraceEvent,
            KernelTime: u32,
            UserTime: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActivityId: fn(
            self: *const ITraceEvent,
            ActivityId: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTimeStamp: fn(
            self: *const ITraceEvent,
            TimeStamp: *LARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProviderId: fn(
            self: *const ITraceEvent,
            ProviderId: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceEvent_Clone(self: *const T, NewEvent: **ITraceEvent) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceEvent.VTable, self.vtable).Clone(@ptrCast(*const ITraceEvent, self), NewEvent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceEvent_GetUserContext(self: *const T, UserContext: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceEvent.VTable, self.vtable).GetUserContext(@ptrCast(*const ITraceEvent, self), UserContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceEvent_GetEventRecord(self: *const T, EventRecord: **EVENT_RECORD) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceEvent.VTable, self.vtable).GetEventRecord(@ptrCast(*const ITraceEvent, self), EventRecord);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceEvent_SetPayload(self: *const T, Payload: [*:0]u8, PayloadSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceEvent.VTable, self.vtable).SetPayload(@ptrCast(*const ITraceEvent, self), Payload, PayloadSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceEvent_SetEventDescriptor(self: *const T, EventDescriptor: *EVENT_DESCRIPTOR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceEvent.VTable, self.vtable).SetEventDescriptor(@ptrCast(*const ITraceEvent, self), EventDescriptor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceEvent_SetProcessId(self: *const T, ProcessId: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceEvent.VTable, self.vtable).SetProcessId(@ptrCast(*const ITraceEvent, self), ProcessId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceEvent_SetProcessorIndex(self: *const T, ProcessorIndex: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceEvent.VTable, self.vtable).SetProcessorIndex(@ptrCast(*const ITraceEvent, self), ProcessorIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceEvent_SetThreadId(self: *const T, ThreadId: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceEvent.VTable, self.vtable).SetThreadId(@ptrCast(*const ITraceEvent, self), ThreadId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceEvent_SetThreadTimes(self: *const T, KernelTime: u32, UserTime: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceEvent.VTable, self.vtable).SetThreadTimes(@ptrCast(*const ITraceEvent, self), KernelTime, UserTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceEvent_SetActivityId(self: *const T, ActivityId: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceEvent.VTable, self.vtable).SetActivityId(@ptrCast(*const ITraceEvent, self), ActivityId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceEvent_SetTimeStamp(self: *const T, TimeStamp: *LARGE_INTEGER) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceEvent.VTable, self.vtable).SetTimeStamp(@ptrCast(*const ITraceEvent, self), TimeStamp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceEvent_SetProviderId(self: *const T, ProviderId: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceEvent.VTable, self.vtable).SetProviderId(@ptrCast(*const ITraceEvent, self), ProviderId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITraceEventCallback_Value = @import("../zig.zig").Guid.initString("3ed25501-593f-43e9-8f38-3ab46f5a4a52");
pub const IID_ITraceEventCallback = &IID_ITraceEventCallback_Value;
pub const ITraceEventCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnBeginProcessTrace: fn(
            self: *const ITraceEventCallback,
            HeaderEvent: *ITraceEvent,
            Relogger: *ITraceRelogger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnFinalizeProcessTrace: fn(
            self: *const ITraceEventCallback,
            Relogger: *ITraceRelogger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnEvent: fn(
            self: *const ITraceEventCallback,
            Event: *ITraceEvent,
            Relogger: *ITraceRelogger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceEventCallback_OnBeginProcessTrace(self: *const T, HeaderEvent: *ITraceEvent, Relogger: *ITraceRelogger) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceEventCallback.VTable, self.vtable).OnBeginProcessTrace(@ptrCast(*const ITraceEventCallback, self), HeaderEvent, Relogger);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceEventCallback_OnFinalizeProcessTrace(self: *const T, Relogger: *ITraceRelogger) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceEventCallback.VTable, self.vtable).OnFinalizeProcessTrace(@ptrCast(*const ITraceEventCallback, self), Relogger);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceEventCallback_OnEvent(self: *const T, Event: *ITraceEvent, Relogger: *ITraceRelogger) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceEventCallback.VTable, self.vtable).OnEvent(@ptrCast(*const ITraceEventCallback, self), Event, Relogger);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITraceRelogger_Value = @import("../zig.zig").Guid.initString("f754ad43-3bcc-4286-8009-9c5da214e84e");
pub const IID_ITraceRelogger = &IID_ITraceRelogger_Value;
pub const ITraceRelogger = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddLogfileTraceStream: fn(
            self: *const ITraceRelogger,
            LogfileName: BSTR,
            UserContext: *c_void,
            TraceHandle: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRealtimeTraceStream: fn(
            self: *const ITraceRelogger,
            LoggerName: BSTR,
            UserContext: *c_void,
            TraceHandle: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterCallback: fn(
            self: *const ITraceRelogger,
            Callback: *ITraceEventCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Inject: fn(
            self: *const ITraceRelogger,
            Event: *ITraceEvent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEventInstance: fn(
            self: *const ITraceRelogger,
            TraceHandle: u64,
            Flags: u32,
            Event: **ITraceEvent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessTrace: fn(
            self: *const ITraceRelogger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputFilename: fn(
            self: *const ITraceRelogger,
            LogfileName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompressionMode: fn(
            self: *const ITraceRelogger,
            CompressionMode: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: fn(
            self: *const ITraceRelogger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceRelogger_AddLogfileTraceStream(self: *const T, LogfileName: BSTR, UserContext: *c_void, TraceHandle: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceRelogger.VTable, self.vtable).AddLogfileTraceStream(@ptrCast(*const ITraceRelogger, self), LogfileName, UserContext, TraceHandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceRelogger_AddRealtimeTraceStream(self: *const T, LoggerName: BSTR, UserContext: *c_void, TraceHandle: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceRelogger.VTable, self.vtable).AddRealtimeTraceStream(@ptrCast(*const ITraceRelogger, self), LoggerName, UserContext, TraceHandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceRelogger_RegisterCallback(self: *const T, Callback: *ITraceEventCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceRelogger.VTable, self.vtable).RegisterCallback(@ptrCast(*const ITraceRelogger, self), Callback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceRelogger_Inject(self: *const T, Event: *ITraceEvent) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceRelogger.VTable, self.vtable).Inject(@ptrCast(*const ITraceRelogger, self), Event);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceRelogger_CreateEventInstance(self: *const T, TraceHandle: u64, Flags: u32, Event: **ITraceEvent) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceRelogger.VTable, self.vtable).CreateEventInstance(@ptrCast(*const ITraceRelogger, self), TraceHandle, Flags, Event);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceRelogger_ProcessTrace(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceRelogger.VTable, self.vtable).ProcessTrace(@ptrCast(*const ITraceRelogger, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceRelogger_SetOutputFilename(self: *const T, LogfileName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceRelogger.VTable, self.vtable).SetOutputFilename(@ptrCast(*const ITraceRelogger, self), LogfileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceRelogger_SetCompressionMode(self: *const T, CompressionMode: u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceRelogger.VTable, self.vtable).SetCompressionMode(@ptrCast(*const ITraceRelogger, self), CompressionMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITraceRelogger_Cancel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITraceRelogger.VTable, self.vtable).Cancel(@ptrCast(*const ITraceRelogger, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (79)
//--------------------------------------------------------------------------------
pub extern "ADVAPI32" fn StartTraceW(
    TraceHandle: *u64,
    InstanceName: [*:0]const u16,
    Properties: *EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn StartTraceA(
    TraceHandle: *u64,
    InstanceName: [*:0]const u8,
    Properties: *EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn StopTraceW(
    TraceHandle: u64,
    InstanceName: ?[*:0]const u16,
    Properties: *EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn StopTraceA(
    TraceHandle: u64,
    InstanceName: ?[*:0]const u8,
    Properties: *EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn QueryTraceW(
    TraceHandle: u64,
    InstanceName: ?[*:0]const u16,
    Properties: *EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn QueryTraceA(
    TraceHandle: u64,
    InstanceName: ?[*:0]const u8,
    Properties: *EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn UpdateTraceW(
    TraceHandle: u64,
    InstanceName: ?[*:0]const u16,
    Properties: *EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn UpdateTraceA(
    TraceHandle: u64,
    InstanceName: ?[*:0]const u8,
    Properties: *EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn FlushTraceW(
    TraceHandle: u64,
    InstanceName: ?[*:0]const u16,
    Properties: *EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn FlushTraceA(
    TraceHandle: u64,
    InstanceName: ?[*:0]const u8,
    Properties: *EVENT_TRACE_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn ControlTraceW(
    TraceHandle: u64,
    InstanceName: ?[*:0]const u16,
    Properties: *EVENT_TRACE_PROPERTIES,
    ControlCode: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn ControlTraceA(
    TraceHandle: u64,
    InstanceName: ?[*:0]const u8,
    Properties: *EVENT_TRACE_PROPERTIES,
    ControlCode: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn QueryAllTracesW(
    PropertyArray: [*]*EVENT_TRACE_PROPERTIES,
    PropertyArrayCount: u32,
    LoggerCount: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn QueryAllTracesA(
    PropertyArray: [*]*EVENT_TRACE_PROPERTIES,
    PropertyArrayCount: u32,
    LoggerCount: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn EnableTrace(
    Enable: u32,
    EnableFlag: u32,
    EnableLevel: u32,
    ControlGuid: *Guid,
    TraceHandle: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn EnableTraceEx(
    ProviderId: *Guid,
    SourceId: ?*Guid,
    TraceHandle: u64,
    IsEnabled: u32,
    Level: u8,
    MatchAnyKeyword: u64,
    MatchAllKeyword: u64,
    EnableProperty: u32,
    EnableFilterDesc: ?*EVENT_FILTER_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn EnableTraceEx2(
    TraceHandle: u64,
    ProviderId: *Guid,
    ControlCode: u32,
    Level: u8,
    MatchAnyKeyword: u64,
    MatchAllKeyword: u64,
    Timeout: u32,
    EnableParameters: ?*ENABLE_TRACE_PARAMETERS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn EnumerateTraceGuidsEx(
    TraceQueryInfoClass: TRACE_QUERY_INFO_CLASS,
    InBuffer: ?[*]u8,
    InBufferSize: u32,
    OutBuffer: ?[*]u8,
    OutBufferSize: u32,
    ReturnLength: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn TraceSetInformation(
    SessionHandle: u64,
    InformationClass: TRACE_QUERY_INFO_CLASS,
    TraceInformation: [*]u8,
    InformationLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn TraceQueryInformation(
    SessionHandle: u64,
    InformationClass: TRACE_QUERY_INFO_CLASS,
    TraceInformation: [*]u8,
    InformationLength: u32,
    ReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn CreateTraceInstanceId(
    RegHandle: HANDLE,
    InstInfo: *EVENT_INSTANCE_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn TraceEvent(
    TraceHandle: u64,
    EventTrace: *EVENT_TRACE_HEADER,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn TraceEventInstance(
    TraceHandle: u64,
    EventTrace: *EVENT_INSTANCE_HEADER,
    InstInfo: *EVENT_INSTANCE_INFO,
    ParentInstInfo: ?*EVENT_INSTANCE_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn RegisterTraceGuidsW(
    RequestAddress: WMIDPREQUEST,
    RequestContext: ?*c_void,
    ControlGuid: *Guid,
    GuidCount: u32,
    TraceGuidReg: ?[*]TRACE_GUID_REGISTRATION,
    MofImagePath: ?[*:0]const u16,
    MofResourceName: ?[*:0]const u16,
    RegistrationHandle: *u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn RegisterTraceGuidsA(
    RequestAddress: WMIDPREQUEST,
    RequestContext: ?*c_void,
    ControlGuid: *Guid,
    GuidCount: u32,
    TraceGuidReg: ?[*]TRACE_GUID_REGISTRATION,
    MofImagePath: ?[*:0]const u8,
    MofResourceName: ?[*:0]const u8,
    RegistrationHandle: *u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn EnumerateTraceGuids(
    GuidPropertiesArray: [*]*TRACE_GUID_PROPERTIES,
    PropertyArrayCount: u32,
    GuidCount: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn UnregisterTraceGuids(
    RegistrationHandle: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn GetTraceLoggerHandle(
    Buffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) u64;

pub extern "ADVAPI32" fn GetTraceEnableLevel(
    TraceHandle: u64,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn GetTraceEnableFlags(
    TraceHandle: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn OpenTraceW(
    Logfile: *EVENT_TRACE_LOGFILEW,
) callconv(@import("std").os.windows.WINAPI) u64;

pub extern "ADVAPI32" fn ProcessTrace(
    HandleArray: [*]u64,
    HandleCount: u32,
    StartTime: ?*FILETIME,
    EndTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn CloseTrace(
    TraceHandle: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn QueryTraceProcessingHandle(
    ProcessingHandle: u64,
    InformationClass: ETW_PROCESS_HANDLE_INFO_TYPE,
    InBuffer: ?*c_void,
    InBufferSize: u32,
    OutBuffer: ?*c_void,
    OutBufferSize: u32,
    ReturnLength: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn OpenTraceA(
    Logfile: *EVENT_TRACE_LOGFILEA,
) callconv(@import("std").os.windows.WINAPI) u64;

pub extern "ADVAPI32" fn SetTraceCallback(
    pGuid: *Guid,
    EventCallback: PEVENT_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn RemoveTraceCallback(
    pGuid: *Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn TraceMessage(
    LoggerHandle: u64,
    MessageFlags: u32,
    MessageGuid: *Guid,
    MessageNumber: u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn TraceMessageVa(
    LoggerHandle: u64,
    MessageFlags: u32,
    MessageGuid: *Guid,
    MessageNumber: u16,
    MessageArgList: *i8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn EventRegister(
    ProviderId: *Guid,
    EnableCallback: ?PENABLECALLBACK,
    CallbackContext: ?*c_void,
    RegHandle: *u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn EventUnregister(
    RegHandle: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn EventSetInformation(
    RegHandle: u64,
    InformationClass: EVENT_INFO_CLASS,
    EventInformation: [*]u8,
    InformationLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn EventEnabled(
    RegHandle: u64,
    EventDescriptor: *EVENT_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn EventProviderEnabled(
    RegHandle: u64,
    Level: u8,
    Keyword: u64,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "ADVAPI32" fn EventWrite(
    RegHandle: u64,
    EventDescriptor: *EVENT_DESCRIPTOR,
    UserDataCount: u32,
    UserData: ?[*]EVENT_DATA_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn EventWriteTransfer(
    RegHandle: u64,
    EventDescriptor: *EVENT_DESCRIPTOR,
    ActivityId: ?*Guid,
    RelatedActivityId: ?*Guid,
    UserDataCount: u32,
    UserData: ?[*]EVENT_DATA_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn EventWriteEx(
    RegHandle: u64,
    EventDescriptor: *EVENT_DESCRIPTOR,
    Filter: u64,
    Flags: u32,
    ActivityId: ?*Guid,
    RelatedActivityId: ?*Guid,
    UserDataCount: u32,
    UserData: ?[*]EVENT_DATA_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn EventWriteString(
    RegHandle: u64,
    Level: u8,
    Keyword: u64,
    String: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn EventActivityIdControl(
    ControlCode: u32,
    ActivityId: *Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn EventAccessControl(
    Guid: *Guid,
    Operation: u32,
    Sid: *c_void,
    Rights: u32,
    AllowOrDeny: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn EventAccessQuery(
    Guid: *Guid,
    Buffer: ?[*]u8,
    BufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn EventAccessRemove(
    Guid: *Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "tdh" fn TdhCreatePayloadFilter(
    ProviderGuid: *Guid,
    EventDescriptor: *EVENT_DESCRIPTOR,
    EventMatchANY: u8,
    PayloadPredicateCount: u32,
    PayloadPredicates: [*]PAYLOAD_FILTER_PREDICATE,
    PayloadFilter: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "tdh" fn TdhDeletePayloadFilter(
    PayloadFilter: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "tdh" fn TdhAggregatePayloadFilters(
    PayloadFilterCount: u32,
    PayloadFilterPtrs: [*]*c_void,
    EventMatchALLFlags: ?[*:0]u8,
    EventFilterDescriptor: *EVENT_FILTER_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "tdh" fn TdhCleanupPayloadEventFilterDescriptor(
    EventFilterDescriptor: *EVENT_FILTER_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "TDH" fn TdhGetEventInformation(
    Event: *EVENT_RECORD,
    TdhContextCount: u32,
    TdhContext: ?[*]TDH_CONTEXT,
    Buffer: ?[*]TRACE_EVENT_INFO,
    BufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "TDH" fn TdhGetEventMapInformation(
    pEvent: *EVENT_RECORD,
    pMapName: PWSTR,
    pBuffer: ?[*]EVENT_MAP_INFO,
    pBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "TDH" fn TdhGetPropertySize(
    pEvent: *EVENT_RECORD,
    TdhContextCount: u32,
    pTdhContext: ?[*]TDH_CONTEXT,
    PropertyDataCount: u32,
    pPropertyData: [*]PROPERTY_DATA_DESCRIPTOR,
    pPropertySize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "TDH" fn TdhGetProperty(
    pEvent: *EVENT_RECORD,
    TdhContextCount: u32,
    pTdhContext: ?[*]TDH_CONTEXT,
    PropertyDataCount: u32,
    pPropertyData: [*]PROPERTY_DATA_DESCRIPTOR,
    BufferSize: u32,
    pBuffer: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "TDH" fn TdhEnumerateProviders(
    pBuffer: ?[*]PROVIDER_ENUMERATION_INFO,
    pBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "TDH" fn TdhQueryProviderFieldInformation(
    pGuid: *Guid,
    EventFieldValue: u64,
    EventFieldType: EVENT_FIELD_TYPE,
    pBuffer: ?[*]PROVIDER_FIELD_INFOARRAY,
    pBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "TDH" fn TdhEnumerateProviderFieldInformation(
    pGuid: *Guid,
    EventFieldType: EVENT_FIELD_TYPE,
    pBuffer: ?[*]PROVIDER_FIELD_INFOARRAY,
    pBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "tdh" fn TdhEnumerateProviderFilters(
    Guid: *Guid,
    TdhContextCount: u32,
    TdhContext: ?[*]TDH_CONTEXT,
    FilterCount: *u32,
    Buffer: ?[*]?*PROVIDER_FILTER_INFO,
    BufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "TDH" fn TdhLoadManifest(
    Manifest: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "TDH" fn TdhLoadManifestFromMemory(
    pData: [*]const u8,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "TDH" fn TdhUnloadManifest(
    Manifest: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "TDH" fn TdhUnloadManifestFromMemory(
    pData: [*]const u8,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "TDH" fn TdhFormatProperty(
    EventInfo: *TRACE_EVENT_INFO,
    MapInfo: ?*EVENT_MAP_INFO,
    PointerSize: u32,
    PropertyInType: u16,
    PropertyOutType: u16,
    PropertyLength: u16,
    UserDataLength: u16,
    UserData: [*:0]u8,
    BufferSize: *u32,
    Buffer: ?[*]u16,
    UserDataConsumed: *u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "tdh" fn TdhOpenDecodingHandle(
    Handle: *TDH_HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "tdh" fn TdhSetDecodingParameter(
    Handle: TDH_HANDLE,
    TdhContext: *TDH_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "tdh" fn TdhGetDecodingParameter(
    Handle: TDH_HANDLE,
    TdhContext: *TDH_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "tdh" fn TdhGetWppProperty(
    Handle: TDH_HANDLE,
    EventRecord: *EVENT_RECORD,
    PropertyName: PWSTR,
    BufferSize: *u32,
    Buffer: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "tdh" fn TdhGetWppMessage(
    Handle: TDH_HANDLE,
    EventRecord: *EVENT_RECORD,
    BufferSize: *u32,
    Buffer: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "tdh" fn TdhCloseDecodingHandle(
    Handle: TDH_HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "tdh" fn TdhLoadManifestFromBinary(
    BinaryPath: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "TDH" fn TdhEnumerateManifestProviderEvents(
    ProviderGuid: *Guid,
    Buffer: ?[*]PROVIDER_EVENT_INFO,
    BufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "TDH" fn TdhGetManifestEventInformation(
    ProviderGuid: *Guid,
    EventDescriptor: *EVENT_DESCRIPTOR,
    Buffer: ?[*]TRACE_EVENT_INFO,
    BufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ADVAPI32" fn CveEventWrite(
    CveId: [*:0]const u16,
    AdditionalDetails: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (11)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const PEVENT_TRACE_BUFFER_CALLBACK = PEVENT_TRACE_BUFFER_CALLBACKA;
        pub const EVENT_TRACE_LOGFILE = EVENT_TRACE_LOGFILEA;
        pub const StartTrace = StartTraceA;
        pub const StopTrace = StopTraceA;
        pub const QueryTrace = QueryTraceA;
        pub const UpdateTrace = UpdateTraceA;
        pub const FlushTrace = FlushTraceA;
        pub const ControlTrace = ControlTraceA;
        pub const QueryAllTraces = QueryAllTracesA;
        pub const RegisterTraceGuids = RegisterTraceGuidsA;
        pub const OpenTrace = OpenTraceA;
    },
    .wide => struct {
        pub const PEVENT_TRACE_BUFFER_CALLBACK = PEVENT_TRACE_BUFFER_CALLBACKW;
        pub const EVENT_TRACE_LOGFILE = EVENT_TRACE_LOGFILEW;
        pub const StartTrace = StartTraceW;
        pub const StopTrace = StopTraceW;
        pub const QueryTrace = QueryTraceW;
        pub const UpdateTrace = UpdateTraceW;
        pub const FlushTrace = FlushTraceW;
        pub const ControlTrace = ControlTraceW;
        pub const QueryAllTraces = QueryAllTracesW;
        pub const RegisterTraceGuids = RegisterTraceGuidsW;
        pub const OpenTrace = OpenTraceW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const PEVENT_TRACE_BUFFER_CALLBACK = *opaque{};
        pub const EVENT_TRACE_LOGFILE = *opaque{};
        pub const StartTrace = *opaque{};
        pub const StopTrace = *opaque{};
        pub const QueryTrace = *opaque{};
        pub const UpdateTrace = *opaque{};
        pub const FlushTrace = *opaque{};
        pub const ControlTrace = *opaque{};
        pub const QueryAllTraces = *opaque{};
        pub const RegisterTraceGuids = *opaque{};
        pub const OpenTrace = *opaque{};
    } else struct {
        pub const PEVENT_TRACE_BUFFER_CALLBACK = @compileError("'PEVENT_TRACE_BUFFER_CALLBACK' requires that UNICODE be set to true or false in the root module");
        pub const EVENT_TRACE_LOGFILE = @compileError("'EVENT_TRACE_LOGFILE' requires that UNICODE be set to true or false in the root module");
        pub const StartTrace = @compileError("'StartTrace' requires that UNICODE be set to true or false in the root module");
        pub const StopTrace = @compileError("'StopTrace' requires that UNICODE be set to true or false in the root module");
        pub const QueryTrace = @compileError("'QueryTrace' requires that UNICODE be set to true or false in the root module");
        pub const UpdateTrace = @compileError("'UpdateTrace' requires that UNICODE be set to true or false in the root module");
        pub const FlushTrace = @compileError("'FlushTrace' requires that UNICODE be set to true or false in the root module");
        pub const ControlTrace = @compileError("'ControlTrace' requires that UNICODE be set to true or false in the root module");
        pub const QueryAllTraces = @compileError("'QueryAllTraces' requires that UNICODE be set to true or false in the root module");
        pub const RegisterTraceGuids = @compileError("'RegisterTraceGuids' requires that UNICODE be set to true or false in the root module");
        pub const OpenTrace = @compileError("'OpenTrace' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (10)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const TIME_ZONE_INFORMATION = @import("windows_programming.zig").TIME_ZONE_INFORMATION;
const LARGE_INTEGER = @import("system_services.zig").LARGE_INTEGER;
const PWSTR = @import("system_services.zig").PWSTR;
const FILETIME = @import("windows_programming.zig").FILETIME;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const HANDLE = @import("system_services.zig").HANDLE;
const PSTR = @import("system_services.zig").PSTR;
const BSTR = @import("automation.zig").BSTR;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = PEVENT_TRACE_BUFFER_CALLBACKW;
    _ = PEVENT_TRACE_BUFFER_CALLBACKA;
    _ = PEVENT_CALLBACK;
    _ = PEVENT_RECORD_CALLBACK;
    _ = WMIDPREQUEST;
    _ = PENABLECALLBACK;

    const constant_export_count = 1;
    const type_export_count = 97;
    const enum_value_export_count = 184;
    const com_iface_id_export_count = 3;
    const com_class_id_export_count = 1;
    const func_export_count = 79;
    const unicode_alias_count = 11;
    const import_count = 10;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

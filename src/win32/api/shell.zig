//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (49)
//--------------------------------------------------------------------------------
pub const GPFIDL_DEFAULT : i32 = 0;
pub const GPFIDL_ALTNAME : i32 = 1;
pub const GPFIDL_UNCPRINTER : i32 = 2;
pub const ISHCUTCMDID_DOWNLOADICON : i32 = 0;
pub const ISHCUTCMDID_INTSHORTCUTCREATE : i32 = 1;
pub const ISHCUTCMDID_COMMITHISTORY : i32 = 2;
pub const ISHCUTCMDID_SETUSERAWURL : i32 = 3;
pub const SFBID_PIDLCHANGED : i32 = 0;
pub const DBCID_EMPTY : i32 = 0;
pub const DBCID_ONDRAG : i32 = 1;
pub const DBCID_CLSIDOFBAR : i32 = 2;
pub const DBCID_RESIZE : i32 = 3;
pub const DBCID_GETBAR : i32 = 4;
pub const BMICON_LARGE : i32 = 0;
pub const BMICON_SMALL : i32 = 1;
pub const ASSOCF_NONE : i32 = 0;
pub const ASSOCF_INIT_NOREMAPCLSID : i32 = 1;
pub const ASSOCF_INIT_BYEXENAME : i32 = 2;
pub const ASSOCF_OPEN_BYEXENAME : i32 = 2;
pub const ASSOCF_INIT_DEFAULTTOSTAR : i32 = 4;
pub const ASSOCF_INIT_DEFAULTTOFOLDER : i32 = 8;
pub const ASSOCF_NOUSERSETTINGS : i32 = 16;
pub const ASSOCF_NOTRUNCATE : i32 = 32;
pub const ASSOCF_VERIFY : i32 = 64;
pub const ASSOCF_REMAPRUNDLL : i32 = 128;
pub const ASSOCF_NOFIXUPS : i32 = 256;
pub const ASSOCF_IGNOREBASECLASS : i32 = 512;
pub const ASSOCF_INIT_IGNOREUNKNOWN : i32 = 1024;
pub const ASSOCF_INIT_FIXED_PROGID : i32 = 2048;
pub const ASSOCF_IS_PROTOCOL : i32 = 4096;
pub const ASSOCF_INIT_FOR_FILE : i32 = 8192;
pub const ASSOCF_IS_FULL_URI : i32 = 16384;
pub const ASSOCF_PER_MACHINE_ONLY : i32 = 32768;
pub const ASSOCF_APP_TO_APP : i32 = 65536;
pub const CTF_INSIST : i32 = 1;
pub const CTF_THREAD_REF : i32 = 2;
pub const CTF_PROCESS_REF : i32 = 4;
pub const CTF_COINIT_STA : i32 = 8;
pub const CTF_COINIT : i32 = 8;
pub const CTF_FREELIBANDEXIT : i32 = 16;
pub const CTF_REF_COUNTED : i32 = 32;
pub const CTF_WAIT_ALLOWCOM : i32 = 64;
pub const CTF_UNUSED : i32 = 128;
pub const CTF_INHERITWOW64 : i32 = 256;
pub const CTF_WAIT_NO_REENTRANCY : i32 = 512;
pub const CTF_KEYBOARD_LOCALE : i32 = 1024;
pub const CTF_OLEINITIALIZE : i32 = 2048;
pub const CTF_COINIT_MTA : i32 = 4096;
pub const CTF_NOADDREFLIB : i32 = 8192;

//--------------------------------------------------------------------------------
// Section: Types (941)
//--------------------------------------------------------------------------------
// TODO: This Enum is marked as [Flags], what do I do with this?
pub const SHGFI_FLAGS = extern enum(i32) {
    SHGFI_ADDOVERLAYS = 32,
    SHGFI_ATTR_SPECIFIED = 131072,
    SHGFI_ATTRIBUTES = 2048,
    SHGFI_DISPLAYNAME = 512,
    SHGFI_EXETYPE = 8192,
    SHGFI_ICON = 256,
    SHGFI_ICONLOCATION = 4096,
    SHGFI_LARGEICON = 0,
    SHGFI_LINKOVERLAY = 32768,
    SHGFI_OPENICON = 2,
    SHGFI_OVERLAYINDEX = 64,
    SHGFI_PIDL = 8,
    SHGFI_SELECTED = 65536,
    SHGFI_SHELLICONSIZE = 4,
    SHGFI_SMALLICON = 1,
    SHGFI_SYSICONINDEX = 16384,
    SHGFI_TYPENAME = 1024,
    SHGFI_USEFILEATTRIBUTES = 16,
};
pub const SHGFI_ADDOVERLAYS = SHGFI_FLAGS.SHGFI_ADDOVERLAYS;
pub const SHGFI_ATTR_SPECIFIED = SHGFI_FLAGS.SHGFI_ATTR_SPECIFIED;
pub const SHGFI_ATTRIBUTES = SHGFI_FLAGS.SHGFI_ATTRIBUTES;
pub const SHGFI_DISPLAYNAME = SHGFI_FLAGS.SHGFI_DISPLAYNAME;
pub const SHGFI_EXETYPE = SHGFI_FLAGS.SHGFI_EXETYPE;
pub const SHGFI_ICON = SHGFI_FLAGS.SHGFI_ICON;
pub const SHGFI_ICONLOCATION = SHGFI_FLAGS.SHGFI_ICONLOCATION;
pub const SHGFI_LARGEICON = SHGFI_FLAGS.SHGFI_LARGEICON;
pub const SHGFI_LINKOVERLAY = SHGFI_FLAGS.SHGFI_LINKOVERLAY;
pub const SHGFI_OPENICON = SHGFI_FLAGS.SHGFI_OPENICON;
pub const SHGFI_OVERLAYINDEX = SHGFI_FLAGS.SHGFI_OVERLAYINDEX;
pub const SHGFI_PIDL = SHGFI_FLAGS.SHGFI_PIDL;
pub const SHGFI_SELECTED = SHGFI_FLAGS.SHGFI_SELECTED;
pub const SHGFI_SHELLICONSIZE = SHGFI_FLAGS.SHGFI_SHELLICONSIZE;
pub const SHGFI_SMALLICON = SHGFI_FLAGS.SHGFI_SMALLICON;
pub const SHGFI_SYSICONINDEX = SHGFI_FLAGS.SHGFI_SYSICONINDEX;
pub const SHGFI_TYPENAME = SHGFI_FLAGS.SHGFI_TYPENAME;
pub const SHGFI_USEFILEATTRIBUTES = SHGFI_FLAGS.SHGFI_USEFILEATTRIBUTES;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const SHCNE_ID = extern enum(u32) {
    SHCNE_RENAMEITEM = 1,
    SHCNE_CREATE = 2,
    SHCNE_DELETE = 4,
    SHCNE_MKDIR = 8,
    SHCNE_RMDIR = 16,
    SHCNE_MEDIAINSERTED = 32,
    SHCNE_MEDIAREMOVED = 64,
    SHCNE_DRIVEREMOVED = 128,
    SHCNE_DRIVEADD = 256,
    SHCNE_NETSHARE = 512,
    SHCNE_NETUNSHARE = 1024,
    SHCNE_ATTRIBUTES = 2048,
    SHCNE_UPDATEDIR = 4096,
    SHCNE_UPDATEITEM = 8192,
    SHCNE_SERVERDISCONNECT = 16384,
    SHCNE_UPDATEIMAGE = 32768,
    SHCNE_DRIVEADDGUI = 65536,
    SHCNE_RENAMEFOLDER = 131072,
    SHCNE_FREESPACE = 262144,
    SHCNE_EXTENDED_EVENT = 67108864,
    SHCNE_ASSOCCHANGED = 134217728,
    SHCNE_DISKEVENTS = 145439,
    SHCNE_GLOBALEVENTS = 201687520,
    SHCNE_ALLEVENTS = 2147483647,
    SHCNE_INTERRUPT = 2147483648,
};
pub const SHCNE_RENAMEITEM = SHCNE_ID.SHCNE_RENAMEITEM;
pub const SHCNE_CREATE = SHCNE_ID.SHCNE_CREATE;
pub const SHCNE_DELETE = SHCNE_ID.SHCNE_DELETE;
pub const SHCNE_MKDIR = SHCNE_ID.SHCNE_MKDIR;
pub const SHCNE_RMDIR = SHCNE_ID.SHCNE_RMDIR;
pub const SHCNE_MEDIAINSERTED = SHCNE_ID.SHCNE_MEDIAINSERTED;
pub const SHCNE_MEDIAREMOVED = SHCNE_ID.SHCNE_MEDIAREMOVED;
pub const SHCNE_DRIVEREMOVED = SHCNE_ID.SHCNE_DRIVEREMOVED;
pub const SHCNE_DRIVEADD = SHCNE_ID.SHCNE_DRIVEADD;
pub const SHCNE_NETSHARE = SHCNE_ID.SHCNE_NETSHARE;
pub const SHCNE_NETUNSHARE = SHCNE_ID.SHCNE_NETUNSHARE;
pub const SHCNE_ATTRIBUTES = SHCNE_ID.SHCNE_ATTRIBUTES;
pub const SHCNE_UPDATEDIR = SHCNE_ID.SHCNE_UPDATEDIR;
pub const SHCNE_UPDATEITEM = SHCNE_ID.SHCNE_UPDATEITEM;
pub const SHCNE_SERVERDISCONNECT = SHCNE_ID.SHCNE_SERVERDISCONNECT;
pub const SHCNE_UPDATEIMAGE = SHCNE_ID.SHCNE_UPDATEIMAGE;
pub const SHCNE_DRIVEADDGUI = SHCNE_ID.SHCNE_DRIVEADDGUI;
pub const SHCNE_RENAMEFOLDER = SHCNE_ID.SHCNE_RENAMEFOLDER;
pub const SHCNE_FREESPACE = SHCNE_ID.SHCNE_FREESPACE;
pub const SHCNE_EXTENDED_EVENT = SHCNE_ID.SHCNE_EXTENDED_EVENT;
pub const SHCNE_ASSOCCHANGED = SHCNE_ID.SHCNE_ASSOCCHANGED;
pub const SHCNE_DISKEVENTS = SHCNE_ID.SHCNE_DISKEVENTS;
pub const SHCNE_GLOBALEVENTS = SHCNE_ID.SHCNE_GLOBALEVENTS;
pub const SHCNE_ALLEVENTS = SHCNE_ID.SHCNE_ALLEVENTS;
pub const SHCNE_INTERRUPT = SHCNE_ID.SHCNE_INTERRUPT;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const SHCNRF_SOURCE = extern enum(i32) {
    SHCNRF_InterruptLevel = 1,
    SHCNRF_ShellLevel = 2,
    SHCNRF_RecursiveInterrupt = 4096,
    SHCNRF_NewDelivery = 32768,
};
pub const SHCNRF_InterruptLevel = SHCNRF_SOURCE.SHCNRF_InterruptLevel;
pub const SHCNRF_ShellLevel = SHCNRF_SOURCE.SHCNRF_ShellLevel;
pub const SHCNRF_RecursiveInterrupt = SHCNRF_SOURCE.SHCNRF_RecursiveInterrupt;
pub const SHCNRF_NewDelivery = SHCNRF_SOURCE.SHCNRF_NewDelivery;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const SHCNF_FLAGS = extern enum(u32) {
    SHCNF_IDLIST = 0,
    SHCNF_PATHA = 1,
    SHCNF_PRINTERA = 2,
    SHCNF_DWORD = 3,
    SHCNF_PATHW = 5,
    SHCNF_PRINTERW = 6,
    SHCNF_TYPE = 255,
    SHCNF_FLUSH = 4096,
    SHCNF_FLUSHNOWAIT = 12288,
    SHCNF_NOTIFYRECURSIVE = 65536,
    SHCNF_PATH = 5,
    SHCNF_PRINTER = 6,
};
pub const SHCNF_IDLIST = SHCNF_FLAGS.SHCNF_IDLIST;
pub const SHCNF_PATHA = SHCNF_FLAGS.SHCNF_PATHA;
pub const SHCNF_PRINTERA = SHCNF_FLAGS.SHCNF_PRINTERA;
pub const SHCNF_DWORD = SHCNF_FLAGS.SHCNF_DWORD;
pub const SHCNF_PATHW = SHCNF_FLAGS.SHCNF_PATHW;
pub const SHCNF_PRINTERW = SHCNF_FLAGS.SHCNF_PRINTERW;
pub const SHCNF_TYPE = SHCNF_FLAGS.SHCNF_TYPE;
pub const SHCNF_FLUSH = SHCNF_FLAGS.SHCNF_FLUSH;
pub const SHCNF_FLUSHNOWAIT = SHCNF_FLAGS.SHCNF_FLUSHNOWAIT;
pub const SHCNF_NOTIFYRECURSIVE = SHCNF_FLAGS.SHCNF_NOTIFYRECURSIVE;
pub const SHCNF_PATH = SHCNF_FLAGS.SHCNF_PATH;
pub const SHCNF_PRINTER = SHCNF_FLAGS.SHCNF_PRINTER;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const QITIPF_FLAGS = extern enum(i32) {
    QITIPF_DEFAULT = 0,
    QITIPF_USENAME = 1,
    QITIPF_LINKNOTARGET = 2,
    QITIPF_LINKUSETARGET = 4,
    QITIPF_USESLOWTIP = 8,
    QITIPF_SINGLELINE = 16,
    QIF_CACHED = 1,
    QIF_DONTEXPANDFOLDER = 2,
};
pub const QITIPF_DEFAULT = QITIPF_FLAGS.QITIPF_DEFAULT;
pub const QITIPF_USENAME = QITIPF_FLAGS.QITIPF_USENAME;
pub const QITIPF_LINKNOTARGET = QITIPF_FLAGS.QITIPF_LINKNOTARGET;
pub const QITIPF_LINKUSETARGET = QITIPF_FLAGS.QITIPF_LINKUSETARGET;
pub const QITIPF_USESLOWTIP = QITIPF_FLAGS.QITIPF_USESLOWTIP;
pub const QITIPF_SINGLELINE = QITIPF_FLAGS.QITIPF_SINGLELINE;
pub const QIF_CACHED = QITIPF_FLAGS.QIF_CACHED;
pub const QIF_DONTEXPANDFOLDER = QITIPF_FLAGS.QIF_DONTEXPANDFOLDER;

pub const SHDID_ID = extern enum(i32) {
    SHDID_ROOT_REGITEM = 1,
    SHDID_FS_FILE = 2,
    SHDID_FS_DIRECTORY = 3,
    SHDID_FS_OTHER = 4,
    SHDID_COMPUTER_DRIVE35 = 5,
    SHDID_COMPUTER_DRIVE525 = 6,
    SHDID_COMPUTER_REMOVABLE = 7,
    SHDID_COMPUTER_FIXED = 8,
    SHDID_COMPUTER_NETDRIVE = 9,
    SHDID_COMPUTER_CDROM = 10,
    SHDID_COMPUTER_RAMDISK = 11,
    SHDID_COMPUTER_OTHER = 12,
    SHDID_NET_DOMAIN = 13,
    SHDID_NET_SERVER = 14,
    SHDID_NET_SHARE = 15,
    SHDID_NET_RESTOFNET = 16,
    SHDID_NET_OTHER = 17,
    SHDID_COMPUTER_IMAGING = 18,
    SHDID_COMPUTER_AUDIO = 19,
    SHDID_COMPUTER_SHAREDDOCS = 20,
    SHDID_MOBILE_DEVICE = 21,
    SHDID_REMOTE_DESKTOP_DRIVE = 22,
};
pub const SHDID_ROOT_REGITEM = SHDID_ID.SHDID_ROOT_REGITEM;
pub const SHDID_FS_FILE = SHDID_ID.SHDID_FS_FILE;
pub const SHDID_FS_DIRECTORY = SHDID_ID.SHDID_FS_DIRECTORY;
pub const SHDID_FS_OTHER = SHDID_ID.SHDID_FS_OTHER;
pub const SHDID_COMPUTER_DRIVE35 = SHDID_ID.SHDID_COMPUTER_DRIVE35;
pub const SHDID_COMPUTER_DRIVE525 = SHDID_ID.SHDID_COMPUTER_DRIVE525;
pub const SHDID_COMPUTER_REMOVABLE = SHDID_ID.SHDID_COMPUTER_REMOVABLE;
pub const SHDID_COMPUTER_FIXED = SHDID_ID.SHDID_COMPUTER_FIXED;
pub const SHDID_COMPUTER_NETDRIVE = SHDID_ID.SHDID_COMPUTER_NETDRIVE;
pub const SHDID_COMPUTER_CDROM = SHDID_ID.SHDID_COMPUTER_CDROM;
pub const SHDID_COMPUTER_RAMDISK = SHDID_ID.SHDID_COMPUTER_RAMDISK;
pub const SHDID_COMPUTER_OTHER = SHDID_ID.SHDID_COMPUTER_OTHER;
pub const SHDID_NET_DOMAIN = SHDID_ID.SHDID_NET_DOMAIN;
pub const SHDID_NET_SERVER = SHDID_ID.SHDID_NET_SERVER;
pub const SHDID_NET_SHARE = SHDID_ID.SHDID_NET_SHARE;
pub const SHDID_NET_RESTOFNET = SHDID_ID.SHDID_NET_RESTOFNET;
pub const SHDID_NET_OTHER = SHDID_ID.SHDID_NET_OTHER;
pub const SHDID_COMPUTER_IMAGING = SHDID_ID.SHDID_COMPUTER_IMAGING;
pub const SHDID_COMPUTER_AUDIO = SHDID_ID.SHDID_COMPUTER_AUDIO;
pub const SHDID_COMPUTER_SHAREDDOCS = SHDID_ID.SHDID_COMPUTER_SHAREDDOCS;
pub const SHDID_MOBILE_DEVICE = SHDID_ID.SHDID_MOBILE_DEVICE;
pub const SHDID_REMOTE_DESKTOP_DRIVE = SHDID_ID.SHDID_REMOTE_DESKTOP_DRIVE;

pub const SHGDFIL_FORMAT = extern enum(i32) {
    SHGDFIL_FINDDATA = 1,
    SHGDFIL_NETRESOURCE = 2,
    SHGDFIL_DESCRIPTIONID = 3,
};
pub const SHGDFIL_FINDDATA = SHGDFIL_FORMAT.SHGDFIL_FINDDATA;
pub const SHGDFIL_NETRESOURCE = SHGDFIL_FORMAT.SHGDFIL_NETRESOURCE;
pub const SHGDFIL_DESCRIPTIONID = SHGDFIL_FORMAT.SHGDFIL_DESCRIPTIONID;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const PRF_FLAGS = extern enum(i32) {
    PRF_VERIFYEXISTS = 1,
    PRF_TRYPROGRAMEXTENSIONS = 3,
    PRF_FIRSTDIRDEF = 4,
    PRF_DONTFINDLNK = 8,
    PRF_REQUIREABSOLUTE = 16,
};
pub const PRF_VERIFYEXISTS = PRF_FLAGS.PRF_VERIFYEXISTS;
pub const PRF_TRYPROGRAMEXTENSIONS = PRF_FLAGS.PRF_TRYPROGRAMEXTENSIONS;
pub const PRF_FIRSTDIRDEF = PRF_FLAGS.PRF_FIRSTDIRDEF;
pub const PRF_DONTFINDLNK = PRF_FLAGS.PRF_DONTFINDLNK;
pub const PRF_REQUIREABSOLUTE = PRF_FLAGS.PRF_REQUIREABSOLUTE;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const PCS_RET = extern enum(u32) {
    PCS_FATAL = 2147483648,
    PCS_REPLACEDCHAR = 1,
    PCS_REMOVEDCHAR = 2,
    PCS_TRUNCATED = 4,
    PCS_PATHTOOLONG = 8,
};
pub const PCS_FATAL = PCS_RET.PCS_FATAL;
pub const PCS_REPLACEDCHAR = PCS_RET.PCS_REPLACEDCHAR;
pub const PCS_REMOVEDCHAR = PCS_RET.PCS_REMOVEDCHAR;
pub const PCS_TRUNCATED = PCS_RET.PCS_TRUNCATED;
pub const PCS_PATHTOOLONG = PCS_RET.PCS_PATHTOOLONG;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const MM_FLAGS = extern enum(u32) {
    MM_ADDSEPARATOR = 1,
    MM_SUBMENUSHAVEIDS = 2,
    MM_DONTREMOVESEPS = 4,
};
pub const MM_ADDSEPARATOR = MM_FLAGS.MM_ADDSEPARATOR;
pub const MM_SUBMENUSHAVEIDS = MM_FLAGS.MM_SUBMENUSHAVEIDS;
pub const MM_DONTREMOVESEPS = MM_FLAGS.MM_DONTREMOVESEPS;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const SHOP_TYPE = extern enum(i32) {
    SHOP_PRINTERNAME = 1,
    SHOP_FILEPATH = 2,
    SHOP_VOLUMEGUID = 4,
};
pub const SHOP_PRINTERNAME = SHOP_TYPE.SHOP_PRINTERNAME;
pub const SHOP_FILEPATH = SHOP_TYPE.SHOP_FILEPATH;
pub const SHOP_VOLUMEGUID = SHOP_TYPE.SHOP_VOLUMEGUID;

pub const SHFMT_ID = extern enum(u32) {
    DEFAULT = 65535,
};
pub const SHFMT_ID_DEFAULT = SHFMT_ID.DEFAULT;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const SHFMT_OPT = extern enum(i32) {
    NONE = 0,
    FULL = 1,
    SYSONLY = 2,
};
pub const SHFMT_OPT_NONE = SHFMT_OPT.NONE;
pub const SHFMT_OPT_FULL = SHFMT_OPT.FULL;
pub const SHFMT_OPT_SYSONLY = SHFMT_OPT.SYSONLY;

pub const SHFMT_RET = extern enum(u32) {
    SHFMT_ERROR = 4294967295,
    SHFMT_CANCEL = 4294967294,
    SHFMT_NOFORMAT = 4294967293,
};
pub const SHFMT_ERROR = SHFMT_RET.SHFMT_ERROR;
pub const SHFMT_CANCEL = SHFMT_RET.SHFMT_CANCEL;
pub const SHFMT_NOFORMAT = SHFMT_RET.SHFMT_NOFORMAT;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const VALIDATEUNC_OPTION = extern enum(i32) {
    VALIDATEUNC_CONNECT = 1,
    VALIDATEUNC_NOUI = 2,
    VALIDATEUNC_PRINT = 4,
    VALIDATEUNC_PERSIST = 8,
    VALIDATEUNC_VALID = 15,
};
pub const VALIDATEUNC_CONNECT = VALIDATEUNC_OPTION.VALIDATEUNC_CONNECT;
pub const VALIDATEUNC_NOUI = VALIDATEUNC_OPTION.VALIDATEUNC_NOUI;
pub const VALIDATEUNC_PRINT = VALIDATEUNC_OPTION.VALIDATEUNC_PRINT;
pub const VALIDATEUNC_PERSIST = VALIDATEUNC_OPTION.VALIDATEUNC_PERSIST;
pub const VALIDATEUNC_VALID = VALIDATEUNC_OPTION.VALIDATEUNC_VALID;

pub const SFVM_MESSAGE_ID = extern enum(i32) {
    SFVM_MERGEMENU = 1,
    SFVM_INVOKECOMMAND = 2,
    SFVM_GETHELPTEXT = 3,
    SFVM_GETTOOLTIPTEXT = 4,
    SFVM_GETBUTTONINFO = 5,
    SFVM_GETBUTTONS = 6,
    SFVM_INITMENUPOPUP = 7,
    SFVM_FSNOTIFY = 14,
    SFVM_WINDOWCREATED = 15,
    SFVM_GETDETAILSOF = 23,
    SFVM_COLUMNCLICK = 24,
    SFVM_QUERYFSNOTIFY = 25,
    SFVM_DEFITEMCOUNT = 26,
    SFVM_DEFVIEWMODE = 27,
    SFVM_UNMERGEMENU = 28,
    SFVM_UPDATESTATUSBAR = 31,
    SFVM_BACKGROUNDENUM = 32,
    SFVM_DIDDRAGDROP = 36,
    SFVM_SETISFV = 39,
    SFVM_THISIDLIST = 41,
    SFVM_ADDPROPERTYPAGES = 47,
    SFVM_BACKGROUNDENUMDONE = 48,
    SFVM_GETNOTIFY = 49,
    SFVM_GETSORTDEFAULTS = 53,
    SFVM_SIZE = 57,
    SFVM_GETZONE = 58,
    SFVM_GETPANE = 59,
    SFVM_GETHELPTOPIC = 63,
    SFVM_GETANIMATION = 68,
};
pub const SFVM_MERGEMENU = SFVM_MESSAGE_ID.SFVM_MERGEMENU;
pub const SFVM_INVOKECOMMAND = SFVM_MESSAGE_ID.SFVM_INVOKECOMMAND;
pub const SFVM_GETHELPTEXT = SFVM_MESSAGE_ID.SFVM_GETHELPTEXT;
pub const SFVM_GETTOOLTIPTEXT = SFVM_MESSAGE_ID.SFVM_GETTOOLTIPTEXT;
pub const SFVM_GETBUTTONINFO = SFVM_MESSAGE_ID.SFVM_GETBUTTONINFO;
pub const SFVM_GETBUTTONS = SFVM_MESSAGE_ID.SFVM_GETBUTTONS;
pub const SFVM_INITMENUPOPUP = SFVM_MESSAGE_ID.SFVM_INITMENUPOPUP;
pub const SFVM_FSNOTIFY = SFVM_MESSAGE_ID.SFVM_FSNOTIFY;
pub const SFVM_WINDOWCREATED = SFVM_MESSAGE_ID.SFVM_WINDOWCREATED;
pub const SFVM_GETDETAILSOF = SFVM_MESSAGE_ID.SFVM_GETDETAILSOF;
pub const SFVM_COLUMNCLICK = SFVM_MESSAGE_ID.SFVM_COLUMNCLICK;
pub const SFVM_QUERYFSNOTIFY = SFVM_MESSAGE_ID.SFVM_QUERYFSNOTIFY;
pub const SFVM_DEFITEMCOUNT = SFVM_MESSAGE_ID.SFVM_DEFITEMCOUNT;
pub const SFVM_DEFVIEWMODE = SFVM_MESSAGE_ID.SFVM_DEFVIEWMODE;
pub const SFVM_UNMERGEMENU = SFVM_MESSAGE_ID.SFVM_UNMERGEMENU;
pub const SFVM_UPDATESTATUSBAR = SFVM_MESSAGE_ID.SFVM_UPDATESTATUSBAR;
pub const SFVM_BACKGROUNDENUM = SFVM_MESSAGE_ID.SFVM_BACKGROUNDENUM;
pub const SFVM_DIDDRAGDROP = SFVM_MESSAGE_ID.SFVM_DIDDRAGDROP;
pub const SFVM_SETISFV = SFVM_MESSAGE_ID.SFVM_SETISFV;
pub const SFVM_THISIDLIST = SFVM_MESSAGE_ID.SFVM_THISIDLIST;
pub const SFVM_ADDPROPERTYPAGES = SFVM_MESSAGE_ID.SFVM_ADDPROPERTYPAGES;
pub const SFVM_BACKGROUNDENUMDONE = SFVM_MESSAGE_ID.SFVM_BACKGROUNDENUMDONE;
pub const SFVM_GETNOTIFY = SFVM_MESSAGE_ID.SFVM_GETNOTIFY;
pub const SFVM_GETSORTDEFAULTS = SFVM_MESSAGE_ID.SFVM_GETSORTDEFAULTS;
pub const SFVM_SIZE = SFVM_MESSAGE_ID.SFVM_SIZE;
pub const SFVM_GETZONE = SFVM_MESSAGE_ID.SFVM_GETZONE;
pub const SFVM_GETPANE = SFVM_MESSAGE_ID.SFVM_GETPANE;
pub const SFVM_GETHELPTOPIC = SFVM_MESSAGE_ID.SFVM_GETHELPTOPIC;
pub const SFVM_GETANIMATION = SFVM_MESSAGE_ID.SFVM_GETANIMATION;

pub const SFVS_SELECT = extern enum(i32) {
    NONE = 0,
    ALLITEMS = 1,
    INVERT = 2,
};
pub const SFVS_SELECT_NONE = SFVS_SELECT.NONE;
pub const SFVS_SELECT_ALLITEMS = SFVS_SELECT.ALLITEMS;
pub const SFVS_SELECT_INVERT = SFVS_SELECT.INVERT;

pub const DFM_MESSAGE_ID = extern enum(i32) {
    DFM_MERGECONTEXTMENU = 1,
    DFM_INVOKECOMMAND = 2,
    DFM_GETHELPTEXT = 5,
    DFM_WM_MEASUREITEM = 6,
    DFM_WM_DRAWITEM = 7,
    DFM_WM_INITMENUPOPUP = 8,
    DFM_VALIDATECMD = 9,
    DFM_MERGECONTEXTMENU_TOP = 10,
    DFM_GETHELPTEXTW = 11,
    DFM_INVOKECOMMANDEX = 12,
    DFM_MAPCOMMANDNAME = 13,
    DFM_GETDEFSTATICID = 14,
    DFM_GETVERBW = 15,
    DFM_GETVERBA = 16,
    DFM_MERGECONTEXTMENU_BOTTOM = 17,
    DFM_MODIFYQCMFLAGS = 18,
};
pub const DFM_MERGECONTEXTMENU = DFM_MESSAGE_ID.DFM_MERGECONTEXTMENU;
pub const DFM_INVOKECOMMAND = DFM_MESSAGE_ID.DFM_INVOKECOMMAND;
pub const DFM_GETHELPTEXT = DFM_MESSAGE_ID.DFM_GETHELPTEXT;
pub const DFM_WM_MEASUREITEM = DFM_MESSAGE_ID.DFM_WM_MEASUREITEM;
pub const DFM_WM_DRAWITEM = DFM_MESSAGE_ID.DFM_WM_DRAWITEM;
pub const DFM_WM_INITMENUPOPUP = DFM_MESSAGE_ID.DFM_WM_INITMENUPOPUP;
pub const DFM_VALIDATECMD = DFM_MESSAGE_ID.DFM_VALIDATECMD;
pub const DFM_MERGECONTEXTMENU_TOP = DFM_MESSAGE_ID.DFM_MERGECONTEXTMENU_TOP;
pub const DFM_GETHELPTEXTW = DFM_MESSAGE_ID.DFM_GETHELPTEXTW;
pub const DFM_INVOKECOMMANDEX = DFM_MESSAGE_ID.DFM_INVOKECOMMANDEX;
pub const DFM_MAPCOMMANDNAME = DFM_MESSAGE_ID.DFM_MAPCOMMANDNAME;
pub const DFM_GETDEFSTATICID = DFM_MESSAGE_ID.DFM_GETDEFSTATICID;
pub const DFM_GETVERBW = DFM_MESSAGE_ID.DFM_GETVERBW;
pub const DFM_GETVERBA = DFM_MESSAGE_ID.DFM_GETVERBA;
pub const DFM_MERGECONTEXTMENU_BOTTOM = DFM_MESSAGE_ID.DFM_MERGECONTEXTMENU_BOTTOM;
pub const DFM_MODIFYQCMFLAGS = DFM_MESSAGE_ID.DFM_MODIFYQCMFLAGS;

pub const DFM_CMD = extern enum(i32) {
    DELETE = -1,
    MOVE = -2,
    COPY = -3,
    LINK = -4,
    PROPERTIES = -5,
    NEWFOLDER = -6,
    PASTE = -7,
    VIEWLIST = -8,
    VIEWDETAILS = -9,
    PASTELINK = -10,
    PASTESPECIAL = -11,
    MODALPROP = -12,
    RENAME = -13,
};
pub const DFM_CMD_DELETE = DFM_CMD.DELETE;
pub const DFM_CMD_MOVE = DFM_CMD.MOVE;
pub const DFM_CMD_COPY = DFM_CMD.COPY;
pub const DFM_CMD_LINK = DFM_CMD.LINK;
pub const DFM_CMD_PROPERTIES = DFM_CMD.PROPERTIES;
pub const DFM_CMD_NEWFOLDER = DFM_CMD.NEWFOLDER;
pub const DFM_CMD_PASTE = DFM_CMD.PASTE;
pub const DFM_CMD_VIEWLIST = DFM_CMD.VIEWLIST;
pub const DFM_CMD_VIEWDETAILS = DFM_CMD.VIEWDETAILS;
pub const DFM_CMD_PASTELINK = DFM_CMD.PASTELINK;
pub const DFM_CMD_PASTESPECIAL = DFM_CMD.PASTESPECIAL;
pub const DFM_CMD_MODALPROP = DFM_CMD.MODALPROP;
pub const DFM_CMD_RENAME = DFM_CMD.RENAME;

pub const PID_IS = extern enum(i32) {
    URL = 2,
    NAME = 4,
    WORKINGDIR = 5,
    HOTKEY = 6,
    SHOWCMD = 7,
    ICONINDEX = 8,
    ICONFILE = 9,
    WHATSNEW = 10,
    AUTHOR = 11,
    DESCRIPTION = 12,
    COMMENT = 13,
    ROAMED = 15,
};
pub const PID_IS_URL = PID_IS.URL;
pub const PID_IS_NAME = PID_IS.NAME;
pub const PID_IS_WORKINGDIR = PID_IS.WORKINGDIR;
pub const PID_IS_HOTKEY = PID_IS.HOTKEY;
pub const PID_IS_SHOWCMD = PID_IS.SHOWCMD;
pub const PID_IS_ICONINDEX = PID_IS.ICONINDEX;
pub const PID_IS_ICONFILE = PID_IS.ICONFILE;
pub const PID_IS_WHATSNEW = PID_IS.WHATSNEW;
pub const PID_IS_AUTHOR = PID_IS.AUTHOR;
pub const PID_IS_DESCRIPTION = PID_IS.DESCRIPTION;
pub const PID_IS_COMMENT = PID_IS.COMMENT;
pub const PID_IS_ROAMED = PID_IS.ROAMED;

pub const PID_INTSITE = extern enum(i32) {
    WHATSNEW = 2,
    AUTHOR = 3,
    LASTVISIT = 4,
    LASTMOD = 5,
    VISITCOUNT = 6,
    DESCRIPTION = 7,
    COMMENT = 8,
    FLAGS = 9,
    CONTENTLEN = 10,
    CONTENTCODE = 11,
    RECURSE = 12,
    WATCH = 13,
    SUBSCRIPTION = 14,
    URL = 15,
    TITLE = 16,
    CODEPAGE = 18,
    TRACKING = 19,
    ICONINDEX = 20,
    ICONFILE = 21,
    ROAMED = 34,
};
pub const PID_INTSITE_WHATSNEW = PID_INTSITE.WHATSNEW;
pub const PID_INTSITE_AUTHOR = PID_INTSITE.AUTHOR;
pub const PID_INTSITE_LASTVISIT = PID_INTSITE.LASTVISIT;
pub const PID_INTSITE_LASTMOD = PID_INTSITE.LASTMOD;
pub const PID_INTSITE_VISITCOUNT = PID_INTSITE.VISITCOUNT;
pub const PID_INTSITE_DESCRIPTION = PID_INTSITE.DESCRIPTION;
pub const PID_INTSITE_COMMENT = PID_INTSITE.COMMENT;
pub const PID_INTSITE_FLAGS = PID_INTSITE.FLAGS;
pub const PID_INTSITE_CONTENTLEN = PID_INTSITE.CONTENTLEN;
pub const PID_INTSITE_CONTENTCODE = PID_INTSITE.CONTENTCODE;
pub const PID_INTSITE_RECURSE = PID_INTSITE.RECURSE;
pub const PID_INTSITE_WATCH = PID_INTSITE.WATCH;
pub const PID_INTSITE_SUBSCRIPTION = PID_INTSITE.SUBSCRIPTION;
pub const PID_INTSITE_URL = PID_INTSITE.URL;
pub const PID_INTSITE_TITLE = PID_INTSITE.TITLE;
pub const PID_INTSITE_CODEPAGE = PID_INTSITE.CODEPAGE;
pub const PID_INTSITE_TRACKING = PID_INTSITE.TRACKING;
pub const PID_INTSITE_ICONINDEX = PID_INTSITE.ICONINDEX;
pub const PID_INTSITE_ICONFILE = PID_INTSITE.ICONFILE;
pub const PID_INTSITE_ROAMED = PID_INTSITE.ROAMED;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const PIDISF_FLAGS = extern enum(i32) {
    PIDISF_RECENTLYCHANGED = 1,
    PIDISF_CACHEDSTICKY = 2,
    PIDISF_CACHEIMAGES = 16,
    PIDISF_FOLLOWALLLINKS = 32,
};
pub const PIDISF_RECENTLYCHANGED = PIDISF_FLAGS.PIDISF_RECENTLYCHANGED;
pub const PIDISF_CACHEDSTICKY = PIDISF_FLAGS.PIDISF_CACHEDSTICKY;
pub const PIDISF_CACHEIMAGES = PIDISF_FLAGS.PIDISF_CACHEIMAGES;
pub const PIDISF_FOLLOWALLLINKS = PIDISF_FLAGS.PIDISF_FOLLOWALLLINKS;

pub const PIDISM_OPTIONS = extern enum(i32) {
    PIDISM_GLOBAL = 0,
    PIDISM_WATCH = 1,
    PIDISM_DONTWATCH = 2,
};
pub const PIDISM_GLOBAL = PIDISM_OPTIONS.PIDISM_GLOBAL;
pub const PIDISM_WATCH = PIDISM_OPTIONS.PIDISM_WATCH;
pub const PIDISM_DONTWATCH = PIDISM_OPTIONS.PIDISM_DONTWATCH;

pub const PIDISR_INFO = extern enum(i32) {
    PIDISR_UP_TO_DATE = 0,
    PIDISR_NEEDS_ADD = 1,
    PIDISR_NEEDS_UPDATE = 2,
    PIDISR_NEEDS_DELETE = 3,
};
pub const PIDISR_UP_TO_DATE = PIDISR_INFO.PIDISR_UP_TO_DATE;
pub const PIDISR_NEEDS_ADD = PIDISR_INFO.PIDISR_NEEDS_ADD;
pub const PIDISR_NEEDS_UPDATE = PIDISR_INFO.PIDISR_NEEDS_UPDATE;
pub const PIDISR_NEEDS_DELETE = PIDISR_INFO.PIDISR_NEEDS_DELETE;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const SSF_MASK = extern enum(u32) {
    SSF_SHOWALLOBJECTS = 1,
    SSF_SHOWEXTENSIONS = 2,
    SSF_HIDDENFILEEXTS = 4,
    SSF_SERVERADMINUI = 4,
    SSF_SHOWCOMPCOLOR = 8,
    SSF_SORTCOLUMNS = 16,
    SSF_SHOWSYSFILES = 32,
    SSF_DOUBLECLICKINWEBVIEW = 128,
    SSF_SHOWATTRIBCOL = 256,
    SSF_DESKTOPHTML = 512,
    SSF_WIN95CLASSIC = 1024,
    SSF_DONTPRETTYPATH = 2048,
    SSF_SHOWINFOTIP = 8192,
    SSF_MAPNETDRVBUTTON = 4096,
    SSF_NOCONFIRMRECYCLE = 32768,
    SSF_HIDEICONS = 16384,
    SSF_FILTER = 65536,
    SSF_WEBVIEW = 131072,
    SSF_SHOWSUPERHIDDEN = 262144,
    SSF_SEPPROCESS = 524288,
    SSF_NONETCRAWLING = 1048576,
    SSF_STARTPANELON = 2097152,
    SSF_SHOWSTARTPAGE = 4194304,
    SSF_AUTOCHECKSELECT = 8388608,
    SSF_ICONSONLY = 16777216,
    SSF_SHOWTYPEOVERLAY = 33554432,
    SSF_SHOWSTATUSBAR = 67108864,
};
pub const SSF_SHOWALLOBJECTS = SSF_MASK.SSF_SHOWALLOBJECTS;
pub const SSF_SHOWEXTENSIONS = SSF_MASK.SSF_SHOWEXTENSIONS;
pub const SSF_HIDDENFILEEXTS = SSF_MASK.SSF_HIDDENFILEEXTS;
pub const SSF_SERVERADMINUI = SSF_MASK.SSF_SERVERADMINUI;
pub const SSF_SHOWCOMPCOLOR = SSF_MASK.SSF_SHOWCOMPCOLOR;
pub const SSF_SORTCOLUMNS = SSF_MASK.SSF_SORTCOLUMNS;
pub const SSF_SHOWSYSFILES = SSF_MASK.SSF_SHOWSYSFILES;
pub const SSF_DOUBLECLICKINWEBVIEW = SSF_MASK.SSF_DOUBLECLICKINWEBVIEW;
pub const SSF_SHOWATTRIBCOL = SSF_MASK.SSF_SHOWATTRIBCOL;
pub const SSF_DESKTOPHTML = SSF_MASK.SSF_DESKTOPHTML;
pub const SSF_WIN95CLASSIC = SSF_MASK.SSF_WIN95CLASSIC;
pub const SSF_DONTPRETTYPATH = SSF_MASK.SSF_DONTPRETTYPATH;
pub const SSF_SHOWINFOTIP = SSF_MASK.SSF_SHOWINFOTIP;
pub const SSF_MAPNETDRVBUTTON = SSF_MASK.SSF_MAPNETDRVBUTTON;
pub const SSF_NOCONFIRMRECYCLE = SSF_MASK.SSF_NOCONFIRMRECYCLE;
pub const SSF_HIDEICONS = SSF_MASK.SSF_HIDEICONS;
pub const SSF_FILTER = SSF_MASK.SSF_FILTER;
pub const SSF_WEBVIEW = SSF_MASK.SSF_WEBVIEW;
pub const SSF_SHOWSUPERHIDDEN = SSF_MASK.SSF_SHOWSUPERHIDDEN;
pub const SSF_SEPPROCESS = SSF_MASK.SSF_SEPPROCESS;
pub const SSF_NONETCRAWLING = SSF_MASK.SSF_NONETCRAWLING;
pub const SSF_STARTPANELON = SSF_MASK.SSF_STARTPANELON;
pub const SSF_SHOWSTARTPAGE = SSF_MASK.SSF_SHOWSTARTPAGE;
pub const SSF_AUTOCHECKSELECT = SSF_MASK.SSF_AUTOCHECKSELECT;
pub const SSF_ICONSONLY = SSF_MASK.SSF_ICONSONLY;
pub const SSF_SHOWTYPEOVERLAY = SSF_MASK.SSF_SHOWTYPEOVERLAY;
pub const SSF_SHOWSTATUSBAR = SSF_MASK.SSF_SHOWSTATUSBAR;

const IID_INotifyReplica_Value = @import("../zig.zig").Guid.initString("99180163-DA16-101A-935C-444553540000");
pub const IID_INotifyReplica = &IID_INotifyReplica_Value;
pub const INotifyReplica = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        YouAreAReplica: fn(
            self: *const INotifyReplica,
            ulcOtherReplicas: u32,
            rgpmkOtherReplicas: [*]*IMoniker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INotifyReplica_YouAreAReplica(self: *const T, ulcOtherReplicas: u32, rgpmkOtherReplicas: [*]*IMoniker) callconv(.Inline) HRESULT {
            return @ptrCast(*const INotifyReplica.VTable, self.vtable).YouAreAReplica(@ptrCast(*const INotifyReplica, self), ulcOtherReplicas, rgpmkOtherReplicas);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const HELPINFO = extern struct {
    cbSize: u32,
    iContextType: i32,
    iCtrlId: i32,
    hItemHandle: HANDLE,
    dwContextId: ?*c_void,
    MousePos: POINT,
};

pub const MULTIKEYHELPA = extern struct {
    mkSize: u32,
    mkKeylist: i8,
    szKeyphrase: [1]i8,
};

pub const MULTIKEYHELPW = extern struct {
    mkSize: u32,
    mkKeylist: u16,
    szKeyphrase: [1]u16,
};

pub const HELPWININFOA = extern struct {
    wStructSize: i32,
    x: i32,
    y: i32,
    dx: i32,
    dy: i32,
    wMax: i32,
    rgchMember: [2]i8,
};

pub const HELPWININFOW = extern struct {
    wStructSize: i32,
    x: i32,
    y: i32,
    dx: i32,
    dy: i32,
    wMax: i32,
    rgchMember: [2]u16,
};

// TODO: this type has a FreeFunc 'SHChangeNotification_Unlock', what can Zig do with this information?
pub const ShFindChangeNotifcationHandle = ?*c_void;

pub const SOFTDISTINFO = extern struct {
    cbSize: u32,
    dwFlags: u32,
    dwAdState: u32,
    szTitle: PWSTR,
    szAbstract: PWSTR,
    szHREF: PWSTR,
    dwInstalledVersionMS: u32,
    dwInstalledVersionLS: u32,
    dwUpdateVersionMS: u32,
    dwUpdateVersionLS: u32,
    dwAdvertisedVersionMS: u32,
    dwAdvertisedVersionLS: u32,
    dwReserved: u32,
};

pub const LOGFONTA = extern struct {
    lfHeight: i32,
    lfWidth: i32,
    lfEscapement: i32,
    lfOrientation: i32,
    lfWeight: i32,
    lfItalic: u8,
    lfUnderline: u8,
    lfStrikeOut: u8,
    lfCharSet: u8,
    lfOutPrecision: u8,
    lfClipPrecision: u8,
    lfQuality: u8,
    lfPitchAndFamily: u8,
    lfFaceName: [32]i8,
};

pub const LOGFONTW = extern struct {
    lfHeight: i32,
    lfWidth: i32,
    lfEscapement: i32,
    lfOrientation: i32,
    lfWeight: i32,
    lfItalic: u8,
    lfUnderline: u8,
    lfStrikeOut: u8,
    lfCharSet: u8,
    lfOutPrecision: u8,
    lfClipPrecision: u8,
    lfQuality: u8,
    lfPitchAndFamily: u8,
    lfFaceName: [32]u16,
};

pub const SUBCLASSPROC = fn(
    hWnd: HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    uIdSubclass: ?*c_void,
    dwRefData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const HDROP__ = extern struct {
    unused: i32,
};

pub const DRAGINFOA = extern struct {
    uSize: u32,
    pt: POINT,
    fNC: BOOL,
    lpFileList: [*]u8,
    grfKeyState: u32,
};

pub const DRAGINFOW = extern struct {
    uSize: u32,
    pt: POINT,
    fNC: BOOL,
    lpFileList: [*]u16,
    grfKeyState: u32,
};

pub const APPBARDATA = extern struct {
    cbSize: u32,
    hWnd: HWND,
    uCallbackMessage: u32,
    uEdge: u32,
    rc: RECT,
    lParam: LPARAM,
};

pub const SHFILEOPSTRUCTA = extern struct {
    hwnd: HWND,
    wFunc: u32,
    pFrom: *i8,
    pTo: *i8,
    fFlags: u16,
    fAnyOperationsAborted: BOOL,
    hNameMappings: *c_void,
    lpszProgressTitle: [*:0]const u8,
};

pub const SHFILEOPSTRUCTW = extern struct {
    hwnd: HWND,
    wFunc: u32,
    pFrom: [*]const u16,
    pTo: [*]const u16,
    fFlags: u16,
    fAnyOperationsAborted: BOOL,
    hNameMappings: *c_void,
    lpszProgressTitle: [*:0]const u16,
};

pub const SHNAMEMAPPINGA = extern struct {
    pszOldPath: PSTR,
    pszNewPath: PSTR,
    cchOldPath: i32,
    cchNewPath: i32,
};

pub const SHNAMEMAPPINGW = extern struct {
    pszOldPath: PWSTR,
    pszNewPath: PWSTR,
    cchOldPath: i32,
    cchNewPath: i32,
};

pub const SHELLEXECUTEINFOA = extern struct {
    cbSize: u32,
    fMask: u32,
    hwnd: HWND,
    lpVerb: [*:0]const u8,
    lpFile: [*:0]const u8,
    lpParameters: [*:0]const u8,
    lpDirectory: [*:0]const u8,
    nShow: i32,
    hInstApp: HINSTANCE,
    lpIDList: *c_void,
    lpClass: [*:0]const u8,
    hkeyClass: HKEY,
    dwHotKey: u32,
    Anonymous: SHELLEXECUTEINFOA._Anonymous_e__Union,
    hProcess: HANDLE,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const SHELLEXECUTEINFOW = extern struct {
    cbSize: u32,
    fMask: u32,
    hwnd: HWND,
    lpVerb: [*:0]const u16,
    lpFile: [*:0]const u16,
    lpParameters: [*:0]const u16,
    lpDirectory: [*:0]const u16,
    nShow: i32,
    hInstApp: HINSTANCE,
    lpIDList: *c_void,
    lpClass: [*:0]const u16,
    hkeyClass: HKEY,
    dwHotKey: u32,
    Anonymous: SHELLEXECUTEINFOW._Anonymous_e__Union,
    hProcess: HANDLE,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const SHCREATEPROCESSINFOW = extern struct {
    cbSize: u32,
    fMask: u32,
    hwnd: HWND,
    pszFile: [*:0]const u16,
    pszParameters: [*:0]const u16,
    pszCurrentDirectory: [*:0]const u16,
    hUserToken: HANDLE,
    lpProcessAttributes: *SECURITY_ATTRIBUTES,
    lpThreadAttributes: *SECURITY_ATTRIBUTES,
    bInheritHandles: BOOL,
    dwCreationFlags: u32,
    lpStartupInfo: *STARTUPINFOW,
    lpProcessInformation: *PROCESS_INFORMATION,
};

pub const ASSOCCLASS = extern enum(i32) {
    SHELL_KEY = 0,
    PROGID_KEY = 1,
    PROGID_STR = 2,
    CLSID_KEY = 3,
    CLSID_STR = 4,
    APP_KEY = 5,
    APP_STR = 6,
    SYSTEM_STR = 7,
    FOLDER = 8,
    STAR = 9,
    FIXED_PROGID_STR = 10,
    PROTOCOL_STR = 11,
};
pub const ASSOCCLASS_SHELL_KEY = ASSOCCLASS.SHELL_KEY;
pub const ASSOCCLASS_PROGID_KEY = ASSOCCLASS.PROGID_KEY;
pub const ASSOCCLASS_PROGID_STR = ASSOCCLASS.PROGID_STR;
pub const ASSOCCLASS_CLSID_KEY = ASSOCCLASS.CLSID_KEY;
pub const ASSOCCLASS_CLSID_STR = ASSOCCLASS.CLSID_STR;
pub const ASSOCCLASS_APP_KEY = ASSOCCLASS.APP_KEY;
pub const ASSOCCLASS_APP_STR = ASSOCCLASS.APP_STR;
pub const ASSOCCLASS_SYSTEM_STR = ASSOCCLASS.SYSTEM_STR;
pub const ASSOCCLASS_FOLDER = ASSOCCLASS.FOLDER;
pub const ASSOCCLASS_STAR = ASSOCCLASS.STAR;
pub const ASSOCCLASS_FIXED_PROGID_STR = ASSOCCLASS.FIXED_PROGID_STR;
pub const ASSOCCLASS_PROTOCOL_STR = ASSOCCLASS.PROTOCOL_STR;

pub const ASSOCIATIONELEMENT = extern struct {
    ac: ASSOCCLASS,
    hkClass: HKEY,
    pszClass: [*:0]const u16,
};

pub const SHQUERYRBINFO = extern struct {
    cbSize: u32,
    i64Size: i64,
    i64NumItems: i64,
};

pub const QUERY_USER_NOTIFICATION_STATE = extern enum(i32) {
    QUNS_NOT_PRESENT = 1,
    QUNS_BUSY = 2,
    QUNS_RUNNING_D3D_FULL_SCREEN = 3,
    QUNS_PRESENTATION_MODE = 4,
    QUNS_ACCEPTS_NOTIFICATIONS = 5,
    QUNS_QUIET_TIME = 6,
    QUNS_APP = 7,
};
pub const QUNS_NOT_PRESENT = QUERY_USER_NOTIFICATION_STATE.QUNS_NOT_PRESENT;
pub const QUNS_BUSY = QUERY_USER_NOTIFICATION_STATE.QUNS_BUSY;
pub const QUNS_RUNNING_D3D_FULL_SCREEN = QUERY_USER_NOTIFICATION_STATE.QUNS_RUNNING_D3D_FULL_SCREEN;
pub const QUNS_PRESENTATION_MODE = QUERY_USER_NOTIFICATION_STATE.QUNS_PRESENTATION_MODE;
pub const QUNS_ACCEPTS_NOTIFICATIONS = QUERY_USER_NOTIFICATION_STATE.QUNS_ACCEPTS_NOTIFICATIONS;
pub const QUNS_QUIET_TIME = QUERY_USER_NOTIFICATION_STATE.QUNS_QUIET_TIME;
pub const QUNS_APP = QUERY_USER_NOTIFICATION_STATE.QUNS_APP;

pub const NOTIFYICONDATAA = extern struct {
    cbSize: u32,
    hWnd: HWND,
    uID: u32,
    uFlags: u32,
    uCallbackMessage: u32,
    hIcon: HICON,
    szTip: [128]i8,
    dwState: u32,
    dwStateMask: u32,
    szInfo: [256]i8,
    Anonymous: NOTIFYICONDATAA._Anonymous_e__Union,
    szInfoTitle: [64]i8,
    dwInfoFlags: u32,
    guidItem: Guid,
    hBalloonIcon: HICON,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const NOTIFYICONDATAW = extern struct {
    cbSize: u32,
    hWnd: HWND,
    uID: u32,
    uFlags: u32,
    uCallbackMessage: u32,
    hIcon: HICON,
    szTip: [128]u16,
    dwState: u32,
    dwStateMask: u32,
    szInfo: [256]u16,
    Anonymous: NOTIFYICONDATAW._Anonymous_e__Union,
    szInfoTitle: [64]u16,
    dwInfoFlags: u32,
    guidItem: Guid,
    hBalloonIcon: HICON,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const NOTIFYICONIDENTIFIER = extern struct {
    cbSize: u32,
    hWnd: HWND,
    uID: u32,
    guidItem: Guid,
};

pub const SHFILEINFOA = extern struct {
    hIcon: HICON,
    iIcon: i32,
    dwAttributes: u32,
    szDisplayName: [260]i8,
    szTypeName: [80]i8,
};

pub const SHFILEINFOW = extern struct {
    hIcon: HICON,
    iIcon: i32,
    dwAttributes: u32,
    szDisplayName: [260]u16,
    szTypeName: [80]u16,
};

pub const SHSTOCKICONINFO = extern struct {
    cbSize: u32,
    hIcon: HICON,
    iSysImageIndex: i32,
    iIcon: i32,
    szPath: [260]u16,
};

pub const SHSTOCKICONID = extern enum(i32) {
    SIID_DOCNOASSOC = 0,
    SIID_DOCASSOC = 1,
    SIID_APPLICATION = 2,
    SIID_FOLDER = 3,
    SIID_FOLDEROPEN = 4,
    SIID_DRIVE525 = 5,
    SIID_DRIVE35 = 6,
    SIID_DRIVEREMOVE = 7,
    SIID_DRIVEFIXED = 8,
    SIID_DRIVENET = 9,
    SIID_DRIVENETDISABLED = 10,
    SIID_DRIVECD = 11,
    SIID_DRIVERAM = 12,
    SIID_WORLD = 13,
    SIID_SERVER = 15,
    SIID_PRINTER = 16,
    SIID_MYNETWORK = 17,
    SIID_FIND = 22,
    SIID_HELP = 23,
    SIID_SHARE = 28,
    SIID_LINK = 29,
    SIID_SLOWFILE = 30,
    SIID_RECYCLER = 31,
    SIID_RECYCLERFULL = 32,
    SIID_MEDIACDAUDIO = 40,
    SIID_LOCK = 47,
    SIID_AUTOLIST = 49,
    SIID_PRINTERNET = 50,
    SIID_SERVERSHARE = 51,
    SIID_PRINTERFAX = 52,
    SIID_PRINTERFAXNET = 53,
    SIID_PRINTERFILE = 54,
    SIID_STACK = 55,
    SIID_MEDIASVCD = 56,
    SIID_STUFFEDFOLDER = 57,
    SIID_DRIVEUNKNOWN = 58,
    SIID_DRIVEDVD = 59,
    SIID_MEDIADVD = 60,
    SIID_MEDIADVDRAM = 61,
    SIID_MEDIADVDRW = 62,
    SIID_MEDIADVDR = 63,
    SIID_MEDIADVDROM = 64,
    SIID_MEDIACDAUDIOPLUS = 65,
    SIID_MEDIACDRW = 66,
    SIID_MEDIACDR = 67,
    SIID_MEDIACDBURN = 68,
    SIID_MEDIABLANKCD = 69,
    SIID_MEDIACDROM = 70,
    SIID_AUDIOFILES = 71,
    SIID_IMAGEFILES = 72,
    SIID_VIDEOFILES = 73,
    SIID_MIXEDFILES = 74,
    SIID_FOLDERBACK = 75,
    SIID_FOLDERFRONT = 76,
    SIID_SHIELD = 77,
    SIID_WARNING = 78,
    SIID_INFO = 79,
    SIID_ERROR = 80,
    SIID_KEY = 81,
    SIID_SOFTWARE = 82,
    SIID_RENAME = 83,
    SIID_DELETE = 84,
    SIID_MEDIAAUDIODVD = 85,
    SIID_MEDIAMOVIEDVD = 86,
    SIID_MEDIAENHANCEDCD = 87,
    SIID_MEDIAENHANCEDDVD = 88,
    SIID_MEDIAHDDVD = 89,
    SIID_MEDIABLURAY = 90,
    SIID_MEDIAVCD = 91,
    SIID_MEDIADVDPLUSR = 92,
    SIID_MEDIADVDPLUSRW = 93,
    SIID_DESKTOPPC = 94,
    SIID_MOBILEPC = 95,
    SIID_USERS = 96,
    SIID_MEDIASMARTMEDIA = 97,
    SIID_MEDIACOMPACTFLASH = 98,
    SIID_DEVICECELLPHONE = 99,
    SIID_DEVICECAMERA = 100,
    SIID_DEVICEVIDEOCAMERA = 101,
    SIID_DEVICEAUDIOPLAYER = 102,
    SIID_NETWORKCONNECT = 103,
    SIID_INTERNET = 104,
    SIID_ZIPFILE = 105,
    SIID_SETTINGS = 106,
    SIID_DRIVEHDDVD = 132,
    SIID_DRIVEBD = 133,
    SIID_MEDIAHDDVDROM = 134,
    SIID_MEDIAHDDVDR = 135,
    SIID_MEDIAHDDVDRAM = 136,
    SIID_MEDIABDROM = 137,
    SIID_MEDIABDR = 138,
    SIID_MEDIABDRE = 139,
    SIID_CLUSTEREDDRIVE = 140,
    SIID_MAX_ICONS = 181,
};
pub const SIID_DOCNOASSOC = SHSTOCKICONID.SIID_DOCNOASSOC;
pub const SIID_DOCASSOC = SHSTOCKICONID.SIID_DOCASSOC;
pub const SIID_APPLICATION = SHSTOCKICONID.SIID_APPLICATION;
pub const SIID_FOLDER = SHSTOCKICONID.SIID_FOLDER;
pub const SIID_FOLDEROPEN = SHSTOCKICONID.SIID_FOLDEROPEN;
pub const SIID_DRIVE525 = SHSTOCKICONID.SIID_DRIVE525;
pub const SIID_DRIVE35 = SHSTOCKICONID.SIID_DRIVE35;
pub const SIID_DRIVEREMOVE = SHSTOCKICONID.SIID_DRIVEREMOVE;
pub const SIID_DRIVEFIXED = SHSTOCKICONID.SIID_DRIVEFIXED;
pub const SIID_DRIVENET = SHSTOCKICONID.SIID_DRIVENET;
pub const SIID_DRIVENETDISABLED = SHSTOCKICONID.SIID_DRIVENETDISABLED;
pub const SIID_DRIVECD = SHSTOCKICONID.SIID_DRIVECD;
pub const SIID_DRIVERAM = SHSTOCKICONID.SIID_DRIVERAM;
pub const SIID_WORLD = SHSTOCKICONID.SIID_WORLD;
pub const SIID_SERVER = SHSTOCKICONID.SIID_SERVER;
pub const SIID_PRINTER = SHSTOCKICONID.SIID_PRINTER;
pub const SIID_MYNETWORK = SHSTOCKICONID.SIID_MYNETWORK;
pub const SIID_FIND = SHSTOCKICONID.SIID_FIND;
pub const SIID_HELP = SHSTOCKICONID.SIID_HELP;
pub const SIID_SHARE = SHSTOCKICONID.SIID_SHARE;
pub const SIID_LINK = SHSTOCKICONID.SIID_LINK;
pub const SIID_SLOWFILE = SHSTOCKICONID.SIID_SLOWFILE;
pub const SIID_RECYCLER = SHSTOCKICONID.SIID_RECYCLER;
pub const SIID_RECYCLERFULL = SHSTOCKICONID.SIID_RECYCLERFULL;
pub const SIID_MEDIACDAUDIO = SHSTOCKICONID.SIID_MEDIACDAUDIO;
pub const SIID_LOCK = SHSTOCKICONID.SIID_LOCK;
pub const SIID_AUTOLIST = SHSTOCKICONID.SIID_AUTOLIST;
pub const SIID_PRINTERNET = SHSTOCKICONID.SIID_PRINTERNET;
pub const SIID_SERVERSHARE = SHSTOCKICONID.SIID_SERVERSHARE;
pub const SIID_PRINTERFAX = SHSTOCKICONID.SIID_PRINTERFAX;
pub const SIID_PRINTERFAXNET = SHSTOCKICONID.SIID_PRINTERFAXNET;
pub const SIID_PRINTERFILE = SHSTOCKICONID.SIID_PRINTERFILE;
pub const SIID_STACK = SHSTOCKICONID.SIID_STACK;
pub const SIID_MEDIASVCD = SHSTOCKICONID.SIID_MEDIASVCD;
pub const SIID_STUFFEDFOLDER = SHSTOCKICONID.SIID_STUFFEDFOLDER;
pub const SIID_DRIVEUNKNOWN = SHSTOCKICONID.SIID_DRIVEUNKNOWN;
pub const SIID_DRIVEDVD = SHSTOCKICONID.SIID_DRIVEDVD;
pub const SIID_MEDIADVD = SHSTOCKICONID.SIID_MEDIADVD;
pub const SIID_MEDIADVDRAM = SHSTOCKICONID.SIID_MEDIADVDRAM;
pub const SIID_MEDIADVDRW = SHSTOCKICONID.SIID_MEDIADVDRW;
pub const SIID_MEDIADVDR = SHSTOCKICONID.SIID_MEDIADVDR;
pub const SIID_MEDIADVDROM = SHSTOCKICONID.SIID_MEDIADVDROM;
pub const SIID_MEDIACDAUDIOPLUS = SHSTOCKICONID.SIID_MEDIACDAUDIOPLUS;
pub const SIID_MEDIACDRW = SHSTOCKICONID.SIID_MEDIACDRW;
pub const SIID_MEDIACDR = SHSTOCKICONID.SIID_MEDIACDR;
pub const SIID_MEDIACDBURN = SHSTOCKICONID.SIID_MEDIACDBURN;
pub const SIID_MEDIABLANKCD = SHSTOCKICONID.SIID_MEDIABLANKCD;
pub const SIID_MEDIACDROM = SHSTOCKICONID.SIID_MEDIACDROM;
pub const SIID_AUDIOFILES = SHSTOCKICONID.SIID_AUDIOFILES;
pub const SIID_IMAGEFILES = SHSTOCKICONID.SIID_IMAGEFILES;
pub const SIID_VIDEOFILES = SHSTOCKICONID.SIID_VIDEOFILES;
pub const SIID_MIXEDFILES = SHSTOCKICONID.SIID_MIXEDFILES;
pub const SIID_FOLDERBACK = SHSTOCKICONID.SIID_FOLDERBACK;
pub const SIID_FOLDERFRONT = SHSTOCKICONID.SIID_FOLDERFRONT;
pub const SIID_SHIELD = SHSTOCKICONID.SIID_SHIELD;
pub const SIID_WARNING = SHSTOCKICONID.SIID_WARNING;
pub const SIID_INFO = SHSTOCKICONID.SIID_INFO;
pub const SIID_ERROR = SHSTOCKICONID.SIID_ERROR;
pub const SIID_KEY = SHSTOCKICONID.SIID_KEY;
pub const SIID_SOFTWARE = SHSTOCKICONID.SIID_SOFTWARE;
pub const SIID_RENAME = SHSTOCKICONID.SIID_RENAME;
pub const SIID_DELETE = SHSTOCKICONID.SIID_DELETE;
pub const SIID_MEDIAAUDIODVD = SHSTOCKICONID.SIID_MEDIAAUDIODVD;
pub const SIID_MEDIAMOVIEDVD = SHSTOCKICONID.SIID_MEDIAMOVIEDVD;
pub const SIID_MEDIAENHANCEDCD = SHSTOCKICONID.SIID_MEDIAENHANCEDCD;
pub const SIID_MEDIAENHANCEDDVD = SHSTOCKICONID.SIID_MEDIAENHANCEDDVD;
pub const SIID_MEDIAHDDVD = SHSTOCKICONID.SIID_MEDIAHDDVD;
pub const SIID_MEDIABLURAY = SHSTOCKICONID.SIID_MEDIABLURAY;
pub const SIID_MEDIAVCD = SHSTOCKICONID.SIID_MEDIAVCD;
pub const SIID_MEDIADVDPLUSR = SHSTOCKICONID.SIID_MEDIADVDPLUSR;
pub const SIID_MEDIADVDPLUSRW = SHSTOCKICONID.SIID_MEDIADVDPLUSRW;
pub const SIID_DESKTOPPC = SHSTOCKICONID.SIID_DESKTOPPC;
pub const SIID_MOBILEPC = SHSTOCKICONID.SIID_MOBILEPC;
pub const SIID_USERS = SHSTOCKICONID.SIID_USERS;
pub const SIID_MEDIASMARTMEDIA = SHSTOCKICONID.SIID_MEDIASMARTMEDIA;
pub const SIID_MEDIACOMPACTFLASH = SHSTOCKICONID.SIID_MEDIACOMPACTFLASH;
pub const SIID_DEVICECELLPHONE = SHSTOCKICONID.SIID_DEVICECELLPHONE;
pub const SIID_DEVICECAMERA = SHSTOCKICONID.SIID_DEVICECAMERA;
pub const SIID_DEVICEVIDEOCAMERA = SHSTOCKICONID.SIID_DEVICEVIDEOCAMERA;
pub const SIID_DEVICEAUDIOPLAYER = SHSTOCKICONID.SIID_DEVICEAUDIOPLAYER;
pub const SIID_NETWORKCONNECT = SHSTOCKICONID.SIID_NETWORKCONNECT;
pub const SIID_INTERNET = SHSTOCKICONID.SIID_INTERNET;
pub const SIID_ZIPFILE = SHSTOCKICONID.SIID_ZIPFILE;
pub const SIID_SETTINGS = SHSTOCKICONID.SIID_SETTINGS;
pub const SIID_DRIVEHDDVD = SHSTOCKICONID.SIID_DRIVEHDDVD;
pub const SIID_DRIVEBD = SHSTOCKICONID.SIID_DRIVEBD;
pub const SIID_MEDIAHDDVDROM = SHSTOCKICONID.SIID_MEDIAHDDVDROM;
pub const SIID_MEDIAHDDVDR = SHSTOCKICONID.SIID_MEDIAHDDVDR;
pub const SIID_MEDIAHDDVDRAM = SHSTOCKICONID.SIID_MEDIAHDDVDRAM;
pub const SIID_MEDIABDROM = SHSTOCKICONID.SIID_MEDIABDROM;
pub const SIID_MEDIABDR = SHSTOCKICONID.SIID_MEDIABDR;
pub const SIID_MEDIABDRE = SHSTOCKICONID.SIID_MEDIABDRE;
pub const SIID_CLUSTEREDDRIVE = SHSTOCKICONID.SIID_CLUSTEREDDRIVE;
pub const SIID_MAX_ICONS = SHSTOCKICONID.SIID_MAX_ICONS;

pub const OPEN_PRINTER_PROPS_INFOA = extern struct {
    dwSize: u32,
    pszSheetName: PSTR,
    uSheetIndex: u32,
    dwFlags: u32,
    bModal: BOOL,
};

pub const OPEN_PRINTER_PROPS_INFOW = extern struct {
    dwSize: u32,
    pszSheetName: PWSTR,
    uSheetIndex: u32,
    dwFlags: u32,
    bModal: BOOL,
};

pub const PFNCANSHAREFOLDERW = fn(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFNSHOWSHAREFOLDERUIW = fn(
    hwndParent: HWND,
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

const CLSID_QueryCancelAutoPlay_Value = @import("../zig.zig").Guid.initString("331F1768-05A9-4DDD-B86E-DAE34DDC998A");
pub const CLSID_QueryCancelAutoPlay = &CLSID_QueryCancelAutoPlay_Value;

const CLSID_TimeCategorizer_Value = @import("../zig.zig").Guid.initString("3BB4118F-DDFD-4D30-A348-9FB5D6BF1AFE");
pub const CLSID_TimeCategorizer = &CLSID_TimeCategorizer_Value;

const CLSID_AlphabeticalCategorizer_Value = @import("../zig.zig").Guid.initString("3C2654C6-7372-4F6B-B310-55D6128F49D2");
pub const CLSID_AlphabeticalCategorizer = &CLSID_AlphabeticalCategorizer_Value;

const CLSID_MergedCategorizer_Value = @import("../zig.zig").Guid.initString("8E827C11-33E7-4BC1-B242-8CD9A1C2B304");
pub const CLSID_MergedCategorizer = &CLSID_MergedCategorizer_Value;

const CLSID_ImageProperties_Value = @import("../zig.zig").Guid.initString("7AB770C7-0E23-4D7A-8AA2-19BFAD479829");
pub const CLSID_ImageProperties = &CLSID_ImageProperties_Value;

const CLSID_CDBurn_Value = @import("../zig.zig").Guid.initString("FBEB8A05-BEEE-4442-804E-409D6C4515E9");
pub const CLSID_CDBurn = &CLSID_CDBurn_Value;

const CLSID_StartMenuPin_Value = @import("../zig.zig").Guid.initString("A2A9545D-A0C2-42B4-9708-A0B2BADD77C8");
pub const CLSID_StartMenuPin = &CLSID_StartMenuPin_Value;

const CLSID_WebWizardHost_Value = @import("../zig.zig").Guid.initString("C827F149-55C1-4D28-935E-57E47CAED973");
pub const CLSID_WebWizardHost = &CLSID_WebWizardHost_Value;

const CLSID_PublishDropTarget_Value = @import("../zig.zig").Guid.initString("CC6EEFFB-43F6-46C5-9619-51D571967F7D");
pub const CLSID_PublishDropTarget = &CLSID_PublishDropTarget_Value;

const CLSID_PublishingWizard_Value = @import("../zig.zig").Guid.initString("6B33163C-76A5-4B6C-BF21-45DE9CD503A1");
pub const CLSID_PublishingWizard = &CLSID_PublishingWizard_Value;

const CLSID_InternetPrintOrdering_Value = @import("../zig.zig").Guid.initString("ADD36AA8-751A-4579-A266-D66F5202CCBB");
pub const CLSID_InternetPrintOrdering = &CLSID_InternetPrintOrdering_Value;

const CLSID_FolderViewHost_Value = @import("../zig.zig").Guid.initString("20B1CB23-6968-4EB9-B7D4-A66D00D07CEE");
pub const CLSID_FolderViewHost = &CLSID_FolderViewHost_Value;

const CLSID_ExplorerBrowser_Value = @import("../zig.zig").Guid.initString("71F96385-DDD6-48D3-A0C1-AE06E8B055FB");
pub const CLSID_ExplorerBrowser = &CLSID_ExplorerBrowser_Value;

const CLSID_ImageRecompress_Value = @import("../zig.zig").Guid.initString("6E33091C-D2F8-4740-B55E-2E11D1477A2C");
pub const CLSID_ImageRecompress = &CLSID_ImageRecompress_Value;

const CLSID_TrayBandSiteService_Value = @import("../zig.zig").Guid.initString("F60AD0A0-E5E1-45CB-B51A-E15B9F8B2934");
pub const CLSID_TrayBandSiteService = &CLSID_TrayBandSiteService_Value;

const CLSID_TrayDeskBand_Value = @import("../zig.zig").Guid.initString("E6442437-6C68-4F52-94DD-2CFED267EFB9");
pub const CLSID_TrayDeskBand = &CLSID_TrayDeskBand_Value;

const CLSID_AttachmentServices_Value = @import("../zig.zig").Guid.initString("4125DD96-E03A-4103-8F70-E0597D803B9C");
pub const CLSID_AttachmentServices = &CLSID_AttachmentServices_Value;

const CLSID_DocPropShellExtension_Value = @import("../zig.zig").Guid.initString("883373C3-BF89-11D1-BE35-080036B11A03");
pub const CLSID_DocPropShellExtension = &CLSID_DocPropShellExtension_Value;

const CLSID_FSCopyHandler_Value = @import("../zig.zig").Guid.initString("D197380A-0A79-4DC8-A033-ED882C2FA14B");
pub const CLSID_FSCopyHandler = &CLSID_FSCopyHandler_Value;

const CLSID_PreviousVersions_Value = @import("../zig.zig").Guid.initString("596AB062-B4D2-4215-9F74-E9109B0A8153");
pub const CLSID_PreviousVersions = &CLSID_PreviousVersions_Value;

const CLSID_NamespaceTreeControl_Value = @import("../zig.zig").Guid.initString("AE054212-3535-4430-83ED-D501AA6680E6");
pub const CLSID_NamespaceTreeControl = &CLSID_NamespaceTreeControl_Value;

const CLSID_IENamespaceTreeControl_Value = @import("../zig.zig").Guid.initString("ACE52D03-E5CD-4B20-82FF-E71B11BEAE1D");
pub const CLSID_IENamespaceTreeControl = &CLSID_IENamespaceTreeControl_Value;

const CLSID_ApplicationAssociationRegistrationUI_Value = @import("../zig.zig").Guid.initString("1968106D-F3B5-44CF-890E-116FCB9ECEF1");
pub const CLSID_ApplicationAssociationRegistrationUI = &CLSID_ApplicationAssociationRegistrationUI_Value;

const CLSID_DesktopGadget_Value = @import("../zig.zig").Guid.initString("924CCC1B-6562-4C85-8657-D177925222B6");
pub const CLSID_DesktopGadget = &CLSID_DesktopGadget_Value;

const CLSID_AccessibilityDockingService_Value = @import("../zig.zig").Guid.initString("29CE1D46-B481-4AA0-A08A-D3EBC8ACA402");
pub const CLSID_AccessibilityDockingService = &CLSID_AccessibilityDockingService_Value;

const CLSID_ExecuteFolder_Value = @import("../zig.zig").Guid.initString("11DBB47C-A525-400B-9E80-A54615A090C0");
pub const CLSID_ExecuteFolder = &CLSID_ExecuteFolder_Value;

const CLSID_VirtualDesktopManager_Value = @import("../zig.zig").Guid.initString("AA509086-5CA9-4C25-8F95-589D3C07B48A");
pub const CLSID_VirtualDesktopManager = &CLSID_VirtualDesktopManager_Value;

const CLSID_StorageProviderBanners_Value = @import("../zig.zig").Guid.initString("7CCDF9F4-E576-455A-8BC7-F6EC68D6F063");
pub const CLSID_StorageProviderBanners = &CLSID_StorageProviderBanners_Value;

pub const SHITEMID = extern struct {
    cb: u16,
    abID: [1]u8,
};

pub const ITEMIDLIST = extern struct {
    mkid: SHITEMID,
};

pub const STRRET_TYPE = extern enum(i32) {
    STRRET_WSTR = 0,
    STRRET_OFFSET = 1,
    STRRET_CSTR = 2,
};
pub const STRRET_WSTR = STRRET_TYPE.STRRET_WSTR;
pub const STRRET_OFFSET = STRRET_TYPE.STRRET_OFFSET;
pub const STRRET_CSTR = STRRET_TYPE.STRRET_CSTR;

pub const STRRET = extern struct {
    uType: u32,
    Anonymous: STRRET._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const SHELLDETAILS = extern struct {
    fmt: i32,
    cxChar: i32,
    str: STRRET,
};

pub const PERCEIVED = extern enum(i32) {
    TYPE_FIRST = -3,
    TYPE_CUSTOM = -3,
    TYPE_UNSPECIFIED = -2,
    TYPE_FOLDER = -1,
    TYPE_UNKNOWN = 0,
    TYPE_TEXT = 1,
    TYPE_IMAGE = 2,
    TYPE_AUDIO = 3,
    TYPE_VIDEO = 4,
    TYPE_COMPRESSED = 5,
    TYPE_DOCUMENT = 6,
    TYPE_SYSTEM = 7,
    TYPE_APPLICATION = 8,
    TYPE_GAMEMEDIA = 9,
    TYPE_CONTACTS = 10,
    TYPE_LAST = 10,
};
pub const PERCEIVED_TYPE_FIRST = PERCEIVED.TYPE_FIRST;
pub const PERCEIVED_TYPE_CUSTOM = PERCEIVED.TYPE_CUSTOM;
pub const PERCEIVED_TYPE_UNSPECIFIED = PERCEIVED.TYPE_UNSPECIFIED;
pub const PERCEIVED_TYPE_FOLDER = PERCEIVED.TYPE_FOLDER;
pub const PERCEIVED_TYPE_UNKNOWN = PERCEIVED.TYPE_UNKNOWN;
pub const PERCEIVED_TYPE_TEXT = PERCEIVED.TYPE_TEXT;
pub const PERCEIVED_TYPE_IMAGE = PERCEIVED.TYPE_IMAGE;
pub const PERCEIVED_TYPE_AUDIO = PERCEIVED.TYPE_AUDIO;
pub const PERCEIVED_TYPE_VIDEO = PERCEIVED.TYPE_VIDEO;
pub const PERCEIVED_TYPE_COMPRESSED = PERCEIVED.TYPE_COMPRESSED;
pub const PERCEIVED_TYPE_DOCUMENT = PERCEIVED.TYPE_DOCUMENT;
pub const PERCEIVED_TYPE_SYSTEM = PERCEIVED.TYPE_SYSTEM;
pub const PERCEIVED_TYPE_APPLICATION = PERCEIVED.TYPE_APPLICATION;
pub const PERCEIVED_TYPE_GAMEMEDIA = PERCEIVED.TYPE_GAMEMEDIA;
pub const PERCEIVED_TYPE_CONTACTS = PERCEIVED.TYPE_CONTACTS;
pub const PERCEIVED_TYPE_LAST = PERCEIVED.TYPE_LAST;

pub const COMDLG_FILTERSPEC = extern struct {
    pszName: [*:0]const u16,
    pszSpec: [*:0]const u16,
};

pub const SHCOLSTATE = extern enum(i32) {
    DEFAULT = 0,
    TYPE_STR = 1,
    TYPE_INT = 2,
    TYPE_DATE = 3,
    TYPEMASK = 15,
    ONBYDEFAULT = 16,
    SLOW = 32,
    EXTENDED = 64,
    SECONDARYUI = 128,
    HIDDEN = 256,
    PREFER_VARCMP = 512,
    PREFER_FMTCMP = 1024,
    NOSORTBYFOLDERNESS = 2048,
    VIEWONLY = 65536,
    BATCHREAD = 131072,
    NO_GROUPBY = 262144,
    FIXED_WIDTH = 4096,
    NODPISCALE = 8192,
    FIXED_RATIO = 16384,
    DISPLAYMASK = 61440,
};
pub const SHCOLSTATE_DEFAULT = SHCOLSTATE.DEFAULT;
pub const SHCOLSTATE_TYPE_STR = SHCOLSTATE.TYPE_STR;
pub const SHCOLSTATE_TYPE_INT = SHCOLSTATE.TYPE_INT;
pub const SHCOLSTATE_TYPE_DATE = SHCOLSTATE.TYPE_DATE;
pub const SHCOLSTATE_TYPEMASK = SHCOLSTATE.TYPEMASK;
pub const SHCOLSTATE_ONBYDEFAULT = SHCOLSTATE.ONBYDEFAULT;
pub const SHCOLSTATE_SLOW = SHCOLSTATE.SLOW;
pub const SHCOLSTATE_EXTENDED = SHCOLSTATE.EXTENDED;
pub const SHCOLSTATE_SECONDARYUI = SHCOLSTATE.SECONDARYUI;
pub const SHCOLSTATE_HIDDEN = SHCOLSTATE.HIDDEN;
pub const SHCOLSTATE_PREFER_VARCMP = SHCOLSTATE.PREFER_VARCMP;
pub const SHCOLSTATE_PREFER_FMTCMP = SHCOLSTATE.PREFER_FMTCMP;
pub const SHCOLSTATE_NOSORTBYFOLDERNESS = SHCOLSTATE.NOSORTBYFOLDERNESS;
pub const SHCOLSTATE_VIEWONLY = SHCOLSTATE.VIEWONLY;
pub const SHCOLSTATE_BATCHREAD = SHCOLSTATE.BATCHREAD;
pub const SHCOLSTATE_NO_GROUPBY = SHCOLSTATE.NO_GROUPBY;
pub const SHCOLSTATE_FIXED_WIDTH = SHCOLSTATE.FIXED_WIDTH;
pub const SHCOLSTATE_NODPISCALE = SHCOLSTATE.NODPISCALE;
pub const SHCOLSTATE_FIXED_RATIO = SHCOLSTATE.FIXED_RATIO;
pub const SHCOLSTATE_DISPLAYMASK = SHCOLSTATE.DISPLAYMASK;

pub const DEVICE_SCALE_FACTOR = extern enum(i32) {
    INVALID = 0,
    SCALE_100_PERCENT = 100,
    SCALE_120_PERCENT = 120,
    SCALE_125_PERCENT = 125,
    SCALE_140_PERCENT = 140,
    SCALE_150_PERCENT = 150,
    SCALE_160_PERCENT = 160,
    SCALE_175_PERCENT = 175,
    SCALE_180_PERCENT = 180,
    SCALE_200_PERCENT = 200,
    SCALE_225_PERCENT = 225,
    SCALE_250_PERCENT = 250,
    SCALE_300_PERCENT = 300,
    SCALE_350_PERCENT = 350,
    SCALE_400_PERCENT = 400,
    SCALE_450_PERCENT = 450,
    SCALE_500_PERCENT = 500,
};
pub const DEVICE_SCALE_FACTOR_INVALID = DEVICE_SCALE_FACTOR.INVALID;
pub const SCALE_100_PERCENT = DEVICE_SCALE_FACTOR.SCALE_100_PERCENT;
pub const SCALE_120_PERCENT = DEVICE_SCALE_FACTOR.SCALE_120_PERCENT;
pub const SCALE_125_PERCENT = DEVICE_SCALE_FACTOR.SCALE_125_PERCENT;
pub const SCALE_140_PERCENT = DEVICE_SCALE_FACTOR.SCALE_140_PERCENT;
pub const SCALE_150_PERCENT = DEVICE_SCALE_FACTOR.SCALE_150_PERCENT;
pub const SCALE_160_PERCENT = DEVICE_SCALE_FACTOR.SCALE_160_PERCENT;
pub const SCALE_175_PERCENT = DEVICE_SCALE_FACTOR.SCALE_175_PERCENT;
pub const SCALE_180_PERCENT = DEVICE_SCALE_FACTOR.SCALE_180_PERCENT;
pub const SCALE_200_PERCENT = DEVICE_SCALE_FACTOR.SCALE_200_PERCENT;
pub const SCALE_225_PERCENT = DEVICE_SCALE_FACTOR.SCALE_225_PERCENT;
pub const SCALE_250_PERCENT = DEVICE_SCALE_FACTOR.SCALE_250_PERCENT;
pub const SCALE_300_PERCENT = DEVICE_SCALE_FACTOR.SCALE_300_PERCENT;
pub const SCALE_350_PERCENT = DEVICE_SCALE_FACTOR.SCALE_350_PERCENT;
pub const SCALE_400_PERCENT = DEVICE_SCALE_FACTOR.SCALE_400_PERCENT;
pub const SCALE_450_PERCENT = DEVICE_SCALE_FACTOR.SCALE_450_PERCENT;
pub const SCALE_500_PERCENT = DEVICE_SCALE_FACTOR.SCALE_500_PERCENT;

const IID_IObjectArray_Value = @import("../zig.zig").Guid.initString("92CA9DCD-5622-4BBA-A805-5E9F541BD8C9");
pub const IID_IObjectArray = &IID_IObjectArray_Value;
pub const IObjectArray = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IObjectArray,
            pcObjects: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IObjectArray,
            uiIndex: u32,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectArray_GetCount(self: *const T, pcObjects: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectArray.VTable, self.vtable).GetCount(@ptrCast(*const IObjectArray, self), pcObjects);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectArray_GetAt(self: *const T, uiIndex: u32, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectArray.VTable, self.vtable).GetAt(@ptrCast(*const IObjectArray, self), uiIndex, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjectCollection_Value = @import("../zig.zig").Guid.initString("5632B1A4-E38A-400A-928A-D4CD63230295");
pub const IID_IObjectCollection = &IID_IObjectCollection_Value;
pub const IObjectCollection = extern struct {
    pub const VTable = extern struct {
        base: IObjectArray.VTable,
        AddObject: fn(
            self: *const IObjectCollection,
            punk: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFromArray: fn(
            self: *const IObjectCollection,
            poaSource: *IObjectArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveObjectAt: fn(
            self: *const IObjectCollection,
            uiIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IObjectCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IObjectArray.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectCollection_AddObject(self: *const T, punk: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectCollection.VTable, self.vtable).AddObject(@ptrCast(*const IObjectCollection, self), punk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectCollection_AddFromArray(self: *const T, poaSource: *IObjectArray) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectCollection.VTable, self.vtable).AddFromArray(@ptrCast(*const IObjectCollection, self), poaSource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectCollection_RemoveObjectAt(self: *const T, uiIndex: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectCollection.VTable, self.vtable).RemoveObjectAt(@ptrCast(*const IObjectCollection, self), uiIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectCollection_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectCollection.VTable, self.vtable).Clear(@ptrCast(*const IObjectCollection, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_DesktopWallpaper_Value = @import("../zig.zig").Guid.initString("C2CF3110-460E-4FC1-B9D0-8A1C0C9CC4BD");
pub const CLSID_DesktopWallpaper = &CLSID_DesktopWallpaper_Value;

const CLSID_ShellDesktop_Value = @import("../zig.zig").Guid.initString("00021400-0000-0000-C000-000000000046");
pub const CLSID_ShellDesktop = &CLSID_ShellDesktop_Value;

const CLSID_ShellFSFolder_Value = @import("../zig.zig").Guid.initString("F3364BA0-65B9-11CE-A9BA-00AA004AE837");
pub const CLSID_ShellFSFolder = &CLSID_ShellFSFolder_Value;

const CLSID_NetworkPlaces_Value = @import("../zig.zig").Guid.initString("208D2C60-3AEA-1069-A2D7-08002B30309D");
pub const CLSID_NetworkPlaces = &CLSID_NetworkPlaces_Value;

const CLSID_ShellLink_Value = @import("../zig.zig").Guid.initString("00021401-0000-0000-C000-000000000046");
pub const CLSID_ShellLink = &CLSID_ShellLink_Value;

const CLSID_DriveSizeCategorizer_Value = @import("../zig.zig").Guid.initString("94357B53-CA29-4B78-83AE-E8FE7409134F");
pub const CLSID_DriveSizeCategorizer = &CLSID_DriveSizeCategorizer_Value;

const CLSID_DriveTypeCategorizer_Value = @import("../zig.zig").Guid.initString("B0A8F3CF-4333-4BAB-8873-1CCB1CADA48B");
pub const CLSID_DriveTypeCategorizer = &CLSID_DriveTypeCategorizer_Value;

const CLSID_FreeSpaceCategorizer_Value = @import("../zig.zig").Guid.initString("B5607793-24AC-44C7-82E2-831726AA6CB7");
pub const CLSID_FreeSpaceCategorizer = &CLSID_FreeSpaceCategorizer_Value;

const CLSID_SizeCategorizer_Value = @import("../zig.zig").Guid.initString("55D7B852-F6D1-42F2-AA75-8728A1B2D264");
pub const CLSID_SizeCategorizer = &CLSID_SizeCategorizer_Value;

const CLSID_PropertiesUI_Value = @import("../zig.zig").Guid.initString("D912F8CF-0396-4915-884E-FB425D32943B");
pub const CLSID_PropertiesUI = &CLSID_PropertiesUI_Value;

const CLSID_UserNotification_Value = @import("../zig.zig").Guid.initString("0010890E-8789-413C-ADBC-48F5B511B3AF");
pub const CLSID_UserNotification = &CLSID_UserNotification_Value;

const CLSID_TaskbarList_Value = @import("../zig.zig").Guid.initString("56FDF344-FD6D-11D0-958A-006097C9A090");
pub const CLSID_TaskbarList = &CLSID_TaskbarList_Value;

const CLSID_ShellItem_Value = @import("../zig.zig").Guid.initString("9AC9FBE1-E0A2-4AD6-B4EE-E212013EA917");
pub const CLSID_ShellItem = &CLSID_ShellItem_Value;

const CLSID_NamespaceWalker_Value = @import("../zig.zig").Guid.initString("72EB61E0-8672-4303-9175-F2E4C68B2E7C");
pub const CLSID_NamespaceWalker = &CLSID_NamespaceWalker_Value;

const CLSID_FileOperation_Value = @import("../zig.zig").Guid.initString("3AD05575-8857-4850-9277-11B85BDB8E09");
pub const CLSID_FileOperation = &CLSID_FileOperation_Value;

const CLSID_FileOpenDialog_Value = @import("../zig.zig").Guid.initString("DC1C5A9C-E88A-4DDE-A5A1-60F82A20AEF7");
pub const CLSID_FileOpenDialog = &CLSID_FileOpenDialog_Value;

const CLSID_FileSaveDialog_Value = @import("../zig.zig").Guid.initString("C0B4E2F3-BA21-4773-8DBA-335EC946EB8B");
pub const CLSID_FileSaveDialog = &CLSID_FileSaveDialog_Value;

const CLSID_KnownFolderManager_Value = @import("../zig.zig").Guid.initString("4DF0C730-DF9D-4AE3-9153-AA6B82E9795A");
pub const CLSID_KnownFolderManager = &CLSID_KnownFolderManager_Value;

const CLSID_SharingConfigurationManager_Value = @import("../zig.zig").Guid.initString("49F371E1-8C5C-4D9C-9A3B-54A6827F513C");
pub const CLSID_SharingConfigurationManager = &CLSID_SharingConfigurationManager_Value;

const CLSID_NetworkConnections_Value = @import("../zig.zig").Guid.initString("7007ACC7-3202-11D1-AAD2-00805FC1270E");
pub const CLSID_NetworkConnections = &CLSID_NetworkConnections_Value;

const CLSID_ScheduledTasks_Value = @import("../zig.zig").Guid.initString("D6277990-4C6A-11CF-8D87-00AA0060F5BF");
pub const CLSID_ScheduledTasks = &CLSID_ScheduledTasks_Value;

const CLSID_ApplicationAssociationRegistration_Value = @import("../zig.zig").Guid.initString("591209C7-767B-42B2-9FBA-44EE4615F2C7");
pub const CLSID_ApplicationAssociationRegistration = &CLSID_ApplicationAssociationRegistration_Value;

const CLSID_SearchFolderItemFactory_Value = @import("../zig.zig").Guid.initString("14010E02-BBBD-41F0-88E3-EDA371216584");
pub const CLSID_SearchFolderItemFactory = &CLSID_SearchFolderItemFactory_Value;

const CLSID_OpenControlPanel_Value = @import("../zig.zig").Guid.initString("06622D85-6856-4460-8DE1-A81921B41C4B");
pub const CLSID_OpenControlPanel = &CLSID_OpenControlPanel_Value;

const CLSID_MailRecipient_Value = @import("../zig.zig").Guid.initString("9E56BE60-C50F-11CF-9A2C-00A0C90A90CE");
pub const CLSID_MailRecipient = &CLSID_MailRecipient_Value;

const CLSID_NetworkExplorerFolder_Value = @import("../zig.zig").Guid.initString("F02C1A0D-BE21-4350-88B0-7367FC96EF3C");
pub const CLSID_NetworkExplorerFolder = &CLSID_NetworkExplorerFolder_Value;

const CLSID_DestinationList_Value = @import("../zig.zig").Guid.initString("77F10CF0-3DB5-4966-B520-B7C54FD35ED6");
pub const CLSID_DestinationList = &CLSID_DestinationList_Value;

const CLSID_ApplicationDestinations_Value = @import("../zig.zig").Guid.initString("86C14003-4D6B-4EF3-A7B4-0506663B2E68");
pub const CLSID_ApplicationDestinations = &CLSID_ApplicationDestinations_Value;

const CLSID_ApplicationDocumentLists_Value = @import("../zig.zig").Guid.initString("86BEC222-30F2-47E0-9F25-60D11CD75C28");
pub const CLSID_ApplicationDocumentLists = &CLSID_ApplicationDocumentLists_Value;

const CLSID_HomeGroup_Value = @import("../zig.zig").Guid.initString("DE77BA04-3C92-4D11-A1A5-42352A53E0E3");
pub const CLSID_HomeGroup = &CLSID_HomeGroup_Value;

const CLSID_ShellLibrary_Value = @import("../zig.zig").Guid.initString("D9B3211D-E57F-4426-AAEF-30A806ADD397");
pub const CLSID_ShellLibrary = &CLSID_ShellLibrary_Value;

const CLSID_AppStartupLink_Value = @import("../zig.zig").Guid.initString("273EB5E7-88B0-4843-BFEF-E2C81D43AAE5");
pub const CLSID_AppStartupLink = &CLSID_AppStartupLink_Value;

const CLSID_EnumerableObjectCollection_Value = @import("../zig.zig").Guid.initString("2D3468C1-36A7-43B6-AC24-D3F02FD9607A");
pub const CLSID_EnumerableObjectCollection = &CLSID_EnumerableObjectCollection_Value;

const CLSID_FrameworkInputPane_Value = @import("../zig.zig").Guid.initString("D5120AA3-46BA-44C5-822D-CA8092C1FC72");
pub const CLSID_FrameworkInputPane = &CLSID_FrameworkInputPane_Value;

const CLSID_DefFolderMenu_Value = @import("../zig.zig").Guid.initString("C63382BE-7933-48D0-9AC8-85FB46BE2FDD");
pub const CLSID_DefFolderMenu = &CLSID_DefFolderMenu_Value;

const CLSID_AppVisibility_Value = @import("../zig.zig").Guid.initString("7E5FE3D9-985F-4908-91F9-EE19F9FD1514");
pub const CLSID_AppVisibility = &CLSID_AppVisibility_Value;

const CLSID_AppShellVerbHandler_Value = @import("../zig.zig").Guid.initString("4ED3A719-CEA8-4BD9-910D-E252F997AFC2");
pub const CLSID_AppShellVerbHandler = &CLSID_AppShellVerbHandler_Value;

const CLSID_ExecuteUnknown_Value = @import("../zig.zig").Guid.initString("E44E9428-BDBC-4987-A099-40DC8FD255E7");
pub const CLSID_ExecuteUnknown = &CLSID_ExecuteUnknown_Value;

const CLSID_PackageDebugSettings_Value = @import("../zig.zig").Guid.initString("B1AEC16F-2383-4852-B0E9-8F0B1DC66B4D");
pub const CLSID_PackageDebugSettings = &CLSID_PackageDebugSettings_Value;

const CLSID_SuspensionDependencyManager_Value = @import("../zig.zig").Guid.initString("6B273FC5-61FD-4918-95A2-C3B5E9D7F581");
pub const CLSID_SuspensionDependencyManager = &CLSID_SuspensionDependencyManager_Value;

const CLSID_ApplicationActivationManager_Value = @import("../zig.zig").Guid.initString("45BA127D-10A8-46EA-8AB7-56EA9078943C");
pub const CLSID_ApplicationActivationManager = &CLSID_ApplicationActivationManager_Value;

const CLSID_ApplicationDesignModeSettings_Value = @import("../zig.zig").Guid.initString("958A6FB5-DCB2-4FAF-AAFD-7FB054AD1A3B");
pub const CLSID_ApplicationDesignModeSettings = &CLSID_ApplicationDesignModeSettings_Value;

pub const CMINVOKECOMMANDINFO = extern struct {
    cbSize: u32,
    fMask: u32,
    hwnd: HWND,
    lpVerb: [*:0]const u8,
    lpParameters: [*:0]const u8,
    lpDirectory: [*:0]const u8,
    nShow: i32,
    dwHotKey: u32,
    hIcon: HANDLE,
};

pub const CMINVOKECOMMANDINFOEX = extern struct {
    cbSize: u32,
    fMask: u32,
    hwnd: HWND,
    lpVerb: [*:0]const u8,
    lpParameters: [*:0]const u8,
    lpDirectory: [*:0]const u8,
    nShow: i32,
    dwHotKey: u32,
    hIcon: HANDLE,
    lpTitle: [*:0]const u8,
    lpVerbW: [*:0]const u16,
    lpParametersW: [*:0]const u16,
    lpDirectoryW: [*:0]const u16,
    lpTitleW: [*:0]const u16,
    ptInvoke: POINT,
};

const IID_IContextMenu_Value = @import("../zig.zig").Guid.initString("000214E4-0000-0000-C000-000000000046");
pub const IID_IContextMenu = &IID_IContextMenu_Value;
pub const IContextMenu = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryContextMenu: fn(
            self: *const IContextMenu,
            hmenu: HMENU,
            indexMenu: u32,
            idCmdFirst: u32,
            idCmdLast: u32,
            uFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeCommand: fn(
            self: *const IContextMenu,
            pici: *CMINVOKECOMMANDINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCommandString: fn(
            self: *const IContextMenu,
            idCmd: ?*c_void,
            uType: u32,
            pReserved: *u32,
            pszName: *i8,
            cchMax: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContextMenu_QueryContextMenu(self: *const T, hmenu: HMENU, indexMenu: u32, idCmdFirst: u32, idCmdLast: u32, uFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContextMenu.VTable, self.vtable).QueryContextMenu(@ptrCast(*const IContextMenu, self), hmenu, indexMenu, idCmdFirst, idCmdLast, uFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContextMenu_InvokeCommand(self: *const T, pici: *CMINVOKECOMMANDINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContextMenu.VTable, self.vtable).InvokeCommand(@ptrCast(*const IContextMenu, self), pici);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContextMenu_GetCommandString(self: *const T, idCmd: ?*c_void, uType: u32, pReserved: *u32, pszName: *i8, cchMax: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContextMenu.VTable, self.vtable).GetCommandString(@ptrCast(*const IContextMenu, self), idCmd, uType, pReserved, pszName, cchMax);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IContextMenu2_Value = @import("../zig.zig").Guid.initString("000214F4-0000-0000-C000-000000000046");
pub const IID_IContextMenu2 = &IID_IContextMenu2_Value;
pub const IContextMenu2 = extern struct {
    pub const VTable = extern struct {
        base: IContextMenu.VTable,
        HandleMenuMsg: fn(
            self: *const IContextMenu2,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IContextMenu.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContextMenu2_HandleMenuMsg(self: *const T, uMsg: u32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContextMenu2.VTable, self.vtable).HandleMenuMsg(@ptrCast(*const IContextMenu2, self), uMsg, wParam, lParam);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IContextMenu3_Value = @import("../zig.zig").Guid.initString("BCFCE0A0-EC17-11D0-8D10-00A0C90F2719");
pub const IID_IContextMenu3 = &IID_IContextMenu3_Value;
pub const IContextMenu3 = extern struct {
    pub const VTable = extern struct {
        base: IContextMenu2.VTable,
        HandleMenuMsg2: fn(
            self: *const IContextMenu3,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
            plResult: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IContextMenu2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContextMenu3_HandleMenuMsg2(self: *const T, uMsg: u32, wParam: WPARAM, lParam: LPARAM, plResult: ?*LRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContextMenu3.VTable, self.vtable).HandleMenuMsg2(@ptrCast(*const IContextMenu3, self), uMsg, wParam, lParam, plResult);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IExecuteCommand_Value = @import("../zig.zig").Guid.initString("7F9185B0-CB92-43C5-80A9-92277A4F7B54");
pub const IID_IExecuteCommand = &IID_IExecuteCommand_Value;
pub const IExecuteCommand = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetKeyState: fn(
            self: *const IExecuteCommand,
            grfKeyState: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParameters: fn(
            self: *const IExecuteCommand,
            pszParameters: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPosition: fn(
            self: *const IExecuteCommand,
            pt: POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetShowWindow: fn(
            self: *const IExecuteCommand,
            nShow: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNoShowUI: fn(
            self: *const IExecuteCommand,
            fNoShowUI: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDirectory: fn(
            self: *const IExecuteCommand,
            pszDirectory: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Execute: fn(
            self: *const IExecuteCommand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExecuteCommand_SetKeyState(self: *const T, grfKeyState: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExecuteCommand.VTable, self.vtable).SetKeyState(@ptrCast(*const IExecuteCommand, self), grfKeyState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExecuteCommand_SetParameters(self: *const T, pszParameters: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExecuteCommand.VTable, self.vtable).SetParameters(@ptrCast(*const IExecuteCommand, self), pszParameters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExecuteCommand_SetPosition(self: *const T, pt: POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExecuteCommand.VTable, self.vtable).SetPosition(@ptrCast(*const IExecuteCommand, self), pt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExecuteCommand_SetShowWindow(self: *const T, nShow: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExecuteCommand.VTable, self.vtable).SetShowWindow(@ptrCast(*const IExecuteCommand, self), nShow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExecuteCommand_SetNoShowUI(self: *const T, fNoShowUI: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExecuteCommand.VTable, self.vtable).SetNoShowUI(@ptrCast(*const IExecuteCommand, self), fNoShowUI);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExecuteCommand_SetDirectory(self: *const T, pszDirectory: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExecuteCommand.VTable, self.vtable).SetDirectory(@ptrCast(*const IExecuteCommand, self), pszDirectory);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExecuteCommand_Execute(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExecuteCommand.VTable, self.vtable).Execute(@ptrCast(*const IExecuteCommand, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPersistFolder_Value = @import("../zig.zig").Guid.initString("000214EA-0000-0000-C000-000000000046");
pub const IID_IPersistFolder = &IID_IPersistFolder_Value;
pub const IPersistFolder = extern struct {
    pub const VTable = extern struct {
        base: IPersist.VTable,
        Initialize: fn(
            self: *const IPersistFolder,
            pidl: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPersist.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPersistFolder_Initialize(self: *const T, pidl: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPersistFolder.VTable, self.vtable).Initialize(@ptrCast(*const IPersistFolder, self), pidl);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRunnableTask_Value = @import("../zig.zig").Guid.initString("85788D00-6807-11D0-B810-00C04FD706EC");
pub const IID_IRunnableTask = &IID_IRunnableTask_Value;
pub const IRunnableTask = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Run: fn(
            self: *const IRunnableTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Kill: fn(
            self: *const IRunnableTask,
            bWait: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Suspend: fn(
            self: *const IRunnableTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: fn(
            self: *const IRunnableTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRunning: fn(
            self: *const IRunnableTask,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRunnableTask_Run(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRunnableTask.VTable, self.vtable).Run(@ptrCast(*const IRunnableTask, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRunnableTask_Kill(self: *const T, bWait: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRunnableTask.VTable, self.vtable).Kill(@ptrCast(*const IRunnableTask, self), bWait);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRunnableTask_Suspend(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRunnableTask.VTable, self.vtable).Suspend(@ptrCast(*const IRunnableTask, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRunnableTask_Resume(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRunnableTask.VTable, self.vtable).Resume(@ptrCast(*const IRunnableTask, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRunnableTask_IsRunning(self: *const T) callconv(.Inline) u32 {
            return @ptrCast(*const IRunnableTask.VTable, self.vtable).IsRunning(@ptrCast(*const IRunnableTask, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellTaskScheduler_Value = @import("../zig.zig").Guid.initString("6CCB7BE0-6807-11D0-B810-00C04FD706EC");
pub const IID_IShellTaskScheduler = &IID_IShellTaskScheduler_Value;
pub const IShellTaskScheduler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddTask: fn(
            self: *const IShellTaskScheduler,
            prt: *IRunnableTask,
            rtoid: *const Guid,
            lParam: ?*c_void,
            dwPriority: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveTasks: fn(
            self: *const IShellTaskScheduler,
            rtoid: *const Guid,
            lParam: ?*c_void,
            bWaitIfRunning: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CountTasks: fn(
            self: *const IShellTaskScheduler,
            rtoid: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        Status: fn(
            self: *const IShellTaskScheduler,
            dwReleaseStatus: u32,
            dwThreadTimeout: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellTaskScheduler_AddTask(self: *const T, prt: *IRunnableTask, rtoid: *const Guid, lParam: ?*c_void, dwPriority: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellTaskScheduler.VTable, self.vtable).AddTask(@ptrCast(*const IShellTaskScheduler, self), prt, rtoid, lParam, dwPriority);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellTaskScheduler_RemoveTasks(self: *const T, rtoid: *const Guid, lParam: ?*c_void, bWaitIfRunning: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellTaskScheduler.VTable, self.vtable).RemoveTasks(@ptrCast(*const IShellTaskScheduler, self), rtoid, lParam, bWaitIfRunning);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellTaskScheduler_CountTasks(self: *const T, rtoid: *const Guid) callconv(.Inline) u32 {
            return @ptrCast(*const IShellTaskScheduler.VTable, self.vtable).CountTasks(@ptrCast(*const IShellTaskScheduler, self), rtoid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellTaskScheduler_Status(self: *const T, dwReleaseStatus: u32, dwThreadTimeout: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellTaskScheduler.VTable, self.vtable).Status(@ptrCast(*const IShellTaskScheduler, self), dwReleaseStatus, dwThreadTimeout);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPersistFolder2_Value = @import("../zig.zig").Guid.initString("1AC3D9F0-175C-11D1-95BE-00609797EA4F");
pub const IID_IPersistFolder2 = &IID_IPersistFolder2_Value;
pub const IPersistFolder2 = extern struct {
    pub const VTable = extern struct {
        base: IPersistFolder.VTable,
        GetCurFolder: fn(
            self: *const IPersistFolder2,
            ppidl: **ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPersistFolder.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPersistFolder2_GetCurFolder(self: *const T, ppidl: **ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPersistFolder2.VTable, self.vtable).GetCurFolder(@ptrCast(*const IPersistFolder2, self), ppidl);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PERSIST_FOLDER_TARGET_INFO = extern struct {
    pidlTargetFolder: *ITEMIDLIST,
    szTargetParsingName: [260]u16,
    szNetworkProvider: [260]u16,
    dwAttributes: u32,
    csidl: i32,
};

const IID_IPersistFolder3_Value = @import("../zig.zig").Guid.initString("CEF04FDF-FE72-11D2-87A5-00C04F6837CF");
pub const IID_IPersistFolder3 = &IID_IPersistFolder3_Value;
pub const IPersistFolder3 = extern struct {
    pub const VTable = extern struct {
        base: IPersistFolder2.VTable,
        InitializeEx: fn(
            self: *const IPersistFolder3,
            pbc: *IBindCtx,
            pidlRoot: *ITEMIDLIST,
            ppfti: *const PERSIST_FOLDER_TARGET_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderTargetInfo: fn(
            self: *const IPersistFolder3,
            ppfti: *PERSIST_FOLDER_TARGET_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPersistFolder2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPersistFolder3_InitializeEx(self: *const T, pbc: *IBindCtx, pidlRoot: *ITEMIDLIST, ppfti: *const PERSIST_FOLDER_TARGET_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPersistFolder3.VTable, self.vtable).InitializeEx(@ptrCast(*const IPersistFolder3, self), pbc, pidlRoot, ppfti);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPersistFolder3_GetFolderTargetInfo(self: *const T, ppfti: *PERSIST_FOLDER_TARGET_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPersistFolder3.VTable, self.vtable).GetFolderTargetInfo(@ptrCast(*const IPersistFolder3, self), ppfti);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPersistIDList_Value = @import("../zig.zig").Guid.initString("1079ACFC-29BD-11D3-8E0D-00C04F6837D5");
pub const IID_IPersistIDList = &IID_IPersistIDList_Value;
pub const IPersistIDList = extern struct {
    pub const VTable = extern struct {
        base: IPersist.VTable,
        SetIDList: fn(
            self: *const IPersistIDList,
            pidl: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDList: fn(
            self: *const IPersistIDList,
            ppidl: **ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPersist.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPersistIDList_SetIDList(self: *const T, pidl: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPersistIDList.VTable, self.vtable).SetIDList(@ptrCast(*const IPersistIDList, self), pidl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPersistIDList_GetIDList(self: *const T, ppidl: **ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPersistIDList.VTable, self.vtable).GetIDList(@ptrCast(*const IPersistIDList, self), ppidl);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumIDList_Value = @import("../zig.zig").Guid.initString("000214F2-0000-0000-C000-000000000046");
pub const IID_IEnumIDList = &IID_IEnumIDList_Value;
pub const IEnumIDList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumIDList,
            celt: u32,
            rgelt: [*]*ITEMIDLIST,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumIDList,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumIDList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumIDList,
            ppenum: **IEnumIDList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumIDList_Next(self: *const T, celt: u32, rgelt: [*]*ITEMIDLIST, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumIDList.VTable, self.vtable).Next(@ptrCast(*const IEnumIDList, self), celt, rgelt, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumIDList_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumIDList.VTable, self.vtable).Skip(@ptrCast(*const IEnumIDList, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumIDList_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumIDList.VTable, self.vtable).Reset(@ptrCast(*const IEnumIDList, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumIDList_Clone(self: *const T, ppenum: **IEnumIDList) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumIDList.VTable, self.vtable).Clone(@ptrCast(*const IEnumIDList, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumFullIDList_Value = @import("../zig.zig").Guid.initString("D0191542-7954-4908-BC06-B2360BBE45BA");
pub const IID_IEnumFullIDList = &IID_IEnumFullIDList_Value;
pub const IEnumFullIDList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumFullIDList,
            celt: u32,
            rgelt: [*]*ITEMIDLIST,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumFullIDList,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumFullIDList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumFullIDList,
            ppenum: **IEnumFullIDList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumFullIDList_Next(self: *const T, celt: u32, rgelt: [*]*ITEMIDLIST, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumFullIDList.VTable, self.vtable).Next(@ptrCast(*const IEnumFullIDList, self), celt, rgelt, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumFullIDList_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumFullIDList.VTable, self.vtable).Skip(@ptrCast(*const IEnumFullIDList, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumFullIDList_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumFullIDList.VTable, self.vtable).Reset(@ptrCast(*const IEnumFullIDList, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumFullIDList_Clone(self: *const T, ppenum: **IEnumFullIDList) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumFullIDList.VTable, self.vtable).Clone(@ptrCast(*const IEnumFullIDList, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _SHGDNF = extern enum(i32) {
    SHGDN_NORMAL = 0,
    SHGDN_INFOLDER = 1,
    SHGDN_FOREDITING = 4096,
    SHGDN_FORADDRESSBAR = 16384,
    SHGDN_FORPARSING = 32768,
};
pub const SHGDN_NORMAL = _SHGDNF.SHGDN_NORMAL;
pub const SHGDN_INFOLDER = _SHGDNF.SHGDN_INFOLDER;
pub const SHGDN_FOREDITING = _SHGDNF.SHGDN_FOREDITING;
pub const SHGDN_FORADDRESSBAR = _SHGDNF.SHGDN_FORADDRESSBAR;
pub const SHGDN_FORPARSING = _SHGDNF.SHGDN_FORPARSING;

pub const _SHCONTF = extern enum(i32) {
    SHCONTF_CHECKING_FOR_CHILDREN = 16,
    SHCONTF_FOLDERS = 32,
    SHCONTF_NONFOLDERS = 64,
    SHCONTF_INCLUDEHIDDEN = 128,
    SHCONTF_INIT_ON_FIRST_NEXT = 256,
    SHCONTF_NETPRINTERSRCH = 512,
    SHCONTF_SHAREABLE = 1024,
    SHCONTF_STORAGE = 2048,
    SHCONTF_NAVIGATION_ENUM = 4096,
    SHCONTF_FASTITEMS = 8192,
    SHCONTF_FLATLIST = 16384,
    SHCONTF_ENABLE_ASYNC = 32768,
    SHCONTF_INCLUDESUPERHIDDEN = 65536,
};
pub const SHCONTF_CHECKING_FOR_CHILDREN = _SHCONTF.SHCONTF_CHECKING_FOR_CHILDREN;
pub const SHCONTF_FOLDERS = _SHCONTF.SHCONTF_FOLDERS;
pub const SHCONTF_NONFOLDERS = _SHCONTF.SHCONTF_NONFOLDERS;
pub const SHCONTF_INCLUDEHIDDEN = _SHCONTF.SHCONTF_INCLUDEHIDDEN;
pub const SHCONTF_INIT_ON_FIRST_NEXT = _SHCONTF.SHCONTF_INIT_ON_FIRST_NEXT;
pub const SHCONTF_NETPRINTERSRCH = _SHCONTF.SHCONTF_NETPRINTERSRCH;
pub const SHCONTF_SHAREABLE = _SHCONTF.SHCONTF_SHAREABLE;
pub const SHCONTF_STORAGE = _SHCONTF.SHCONTF_STORAGE;
pub const SHCONTF_NAVIGATION_ENUM = _SHCONTF.SHCONTF_NAVIGATION_ENUM;
pub const SHCONTF_FASTITEMS = _SHCONTF.SHCONTF_FASTITEMS;
pub const SHCONTF_FLATLIST = _SHCONTF.SHCONTF_FLATLIST;
pub const SHCONTF_ENABLE_ASYNC = _SHCONTF.SHCONTF_ENABLE_ASYNC;
pub const SHCONTF_INCLUDESUPERHIDDEN = _SHCONTF.SHCONTF_INCLUDESUPERHIDDEN;

pub const STORAGE_PROVIDER_FILE_FLAGS = extern enum(i32) {
    SPFF_NONE = 0,
    SPFF_DOWNLOAD_BY_DEFAULT = 1,
    SPFF_CREATED_ON_THIS_DEVICE = 2,
};
pub const SPFF_NONE = STORAGE_PROVIDER_FILE_FLAGS.SPFF_NONE;
pub const SPFF_DOWNLOAD_BY_DEFAULT = STORAGE_PROVIDER_FILE_FLAGS.SPFF_DOWNLOAD_BY_DEFAULT;
pub const SPFF_CREATED_ON_THIS_DEVICE = STORAGE_PROVIDER_FILE_FLAGS.SPFF_CREATED_ON_THIS_DEVICE;

pub const MERGE_UPDATE_STATUS = extern enum(i32) {
    MUS_COMPLETE = 0,
    MUS_USERINPUTNEEDED = 1,
    MUS_FAILED = 2,
};
pub const MUS_COMPLETE = MERGE_UPDATE_STATUS.MUS_COMPLETE;
pub const MUS_USERINPUTNEEDED = MERGE_UPDATE_STATUS.MUS_USERINPUTNEEDED;
pub const MUS_FAILED = MERGE_UPDATE_STATUS.MUS_FAILED;

const IID_IFileSyncMergeHandler_Value = @import("../zig.zig").Guid.initString("D97B5AAC-C792-433C-975D-35C4EADC7A9D");
pub const IID_IFileSyncMergeHandler = &IID_IFileSyncMergeHandler_Value;
pub const IFileSyncMergeHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Merge: fn(
            self: *const IFileSyncMergeHandler,
            localFilePath: [*:0]const u16,
            serverFilePath: [*:0]const u16,
            updateStatus: *MERGE_UPDATE_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowResolveConflictUIAsync: fn(
            self: *const IFileSyncMergeHandler,
            localFilePath: [*:0]const u16,
            monitorToDisplayOn: HMONITOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileSyncMergeHandler_Merge(self: *const T, localFilePath: [*:0]const u16, serverFilePath: [*:0]const u16, updateStatus: *MERGE_UPDATE_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileSyncMergeHandler.VTable, self.vtable).Merge(@ptrCast(*const IFileSyncMergeHandler, self), localFilePath, serverFilePath, updateStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileSyncMergeHandler_ShowResolveConflictUIAsync(self: *const T, localFilePath: [*:0]const u16, monitorToDisplayOn: HMONITOR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileSyncMergeHandler.VTable, self.vtable).ShowResolveConflictUIAsync(@ptrCast(*const IFileSyncMergeHandler, self), localFilePath, monitorToDisplayOn);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const FOLDER_ENUM_MODE = extern enum(i32) {
    FEM_VIEWRESULT = 0,
    FEM_NAVIGATION = 1,
};
pub const FEM_VIEWRESULT = FOLDER_ENUM_MODE.FEM_VIEWRESULT;
pub const FEM_NAVIGATION = FOLDER_ENUM_MODE.FEM_NAVIGATION;

const IID_IObjectWithFolderEnumMode_Value = @import("../zig.zig").Guid.initString("6A9D9026-0E6E-464C-B000-42ECC07DE673");
pub const IID_IObjectWithFolderEnumMode = &IID_IObjectWithFolderEnumMode_Value;
pub const IObjectWithFolderEnumMode = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetMode: fn(
            self: *const IObjectWithFolderEnumMode,
            feMode: FOLDER_ENUM_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMode: fn(
            self: *const IObjectWithFolderEnumMode,
            pfeMode: *FOLDER_ENUM_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectWithFolderEnumMode_SetMode(self: *const T, feMode: FOLDER_ENUM_MODE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectWithFolderEnumMode.VTable, self.vtable).SetMode(@ptrCast(*const IObjectWithFolderEnumMode, self), feMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectWithFolderEnumMode_GetMode(self: *const T, pfeMode: *FOLDER_ENUM_MODE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectWithFolderEnumMode.VTable, self.vtable).GetMode(@ptrCast(*const IObjectWithFolderEnumMode, self), pfeMode);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IParseAndCreateItem_Value = @import("../zig.zig").Guid.initString("67EFED0E-E827-4408-B493-78F3982B685C");
pub const IID_IParseAndCreateItem = &IID_IParseAndCreateItem_Value;
pub const IParseAndCreateItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetItem: fn(
            self: *const IParseAndCreateItem,
            psi: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: fn(
            self: *const IParseAndCreateItem,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IParseAndCreateItem_SetItem(self: *const T, psi: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IParseAndCreateItem.VTable, self.vtable).SetItem(@ptrCast(*const IParseAndCreateItem, self), psi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IParseAndCreateItem_GetItem(self: *const T, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IParseAndCreateItem.VTable, self.vtable).GetItem(@ptrCast(*const IParseAndCreateItem, self), riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellFolder_Value = @import("../zig.zig").Guid.initString("000214E6-0000-0000-C000-000000000046");
pub const IID_IShellFolder = &IID_IShellFolder_Value;
pub const IShellFolder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ParseDisplayName: fn(
            self: *const IShellFolder,
            hwnd: HWND,
            pbc: *IBindCtx,
            pszDisplayName: PWSTR,
            pchEaten: *u32,
            ppidl: **ITEMIDLIST,
            pdwAttributes: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumObjects: fn(
            self: *const IShellFolder,
            hwnd: HWND,
            grfFlags: u32,
            ppenumIDList: **IEnumIDList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindToObject: fn(
            self: *const IShellFolder,
            pidl: *ITEMIDLIST,
            pbc: *IBindCtx,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindToStorage: fn(
            self: *const IShellFolder,
            pidl: *ITEMIDLIST,
            pbc: *IBindCtx,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompareIDs: fn(
            self: *const IShellFolder,
            lParam: LPARAM,
            pidl1: *ITEMIDLIST,
            pidl2: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateViewObject: fn(
            self: *const IShellFolder,
            hwndOwner: HWND,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributesOf: fn(
            self: *const IShellFolder,
            cidl: u32,
            apidl: [*]*ITEMIDLIST,
            rgfInOut: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUIObjectOf: fn(
            self: *const IShellFolder,
            hwndOwner: HWND,
            cidl: u32,
            apidl: [*]*ITEMIDLIST,
            riid: *const Guid,
            rgfReserved: *u32,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayNameOf: fn(
            self: *const IShellFolder,
            pidl: *ITEMIDLIST,
            uFlags: u32,
            pName: *STRRET,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNameOf: fn(
            self: *const IShellFolder,
            hwnd: HWND,
            pidl: *ITEMIDLIST,
            pszName: [*:0]const u16,
            uFlags: u32,
            ppidlOut: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolder_ParseDisplayName(self: *const T, hwnd: HWND, pbc: *IBindCtx, pszDisplayName: PWSTR, pchEaten: *u32, ppidl: **ITEMIDLIST, pdwAttributes: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolder.VTable, self.vtable).ParseDisplayName(@ptrCast(*const IShellFolder, self), hwnd, pbc, pszDisplayName, pchEaten, ppidl, pdwAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolder_EnumObjects(self: *const T, hwnd: HWND, grfFlags: u32, ppenumIDList: **IEnumIDList) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolder.VTable, self.vtable).EnumObjects(@ptrCast(*const IShellFolder, self), hwnd, grfFlags, ppenumIDList);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolder_BindToObject(self: *const T, pidl: *ITEMIDLIST, pbc: *IBindCtx, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolder.VTable, self.vtable).BindToObject(@ptrCast(*const IShellFolder, self), pidl, pbc, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolder_BindToStorage(self: *const T, pidl: *ITEMIDLIST, pbc: *IBindCtx, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolder.VTable, self.vtable).BindToStorage(@ptrCast(*const IShellFolder, self), pidl, pbc, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolder_CompareIDs(self: *const T, lParam: LPARAM, pidl1: *ITEMIDLIST, pidl2: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolder.VTable, self.vtable).CompareIDs(@ptrCast(*const IShellFolder, self), lParam, pidl1, pidl2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolder_CreateViewObject(self: *const T, hwndOwner: HWND, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolder.VTable, self.vtable).CreateViewObject(@ptrCast(*const IShellFolder, self), hwndOwner, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolder_GetAttributesOf(self: *const T, cidl: u32, apidl: [*]*ITEMIDLIST, rgfInOut: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolder.VTable, self.vtable).GetAttributesOf(@ptrCast(*const IShellFolder, self), cidl, apidl, rgfInOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolder_GetUIObjectOf(self: *const T, hwndOwner: HWND, cidl: u32, apidl: [*]*ITEMIDLIST, riid: *const Guid, rgfReserved: *u32, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolder.VTable, self.vtable).GetUIObjectOf(@ptrCast(*const IShellFolder, self), hwndOwner, cidl, apidl, riid, rgfReserved, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolder_GetDisplayNameOf(self: *const T, pidl: *ITEMIDLIST, uFlags: u32, pName: *STRRET) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolder.VTable, self.vtable).GetDisplayNameOf(@ptrCast(*const IShellFolder, self), pidl, uFlags, pName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolder_SetNameOf(self: *const T, hwnd: HWND, pidl: *ITEMIDLIST, pszName: [*:0]const u16, uFlags: u32, ppidlOut: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolder.VTable, self.vtable).SetNameOf(@ptrCast(*const IShellFolder, self), hwnd, pidl, pszName, uFlags, ppidlOut);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const EXTRASEARCH = extern struct {
    guidSearch: Guid,
    wszFriendlyName: [80]u16,
    wszUrl: [2084]u16,
};

const IID_IEnumExtraSearch_Value = @import("../zig.zig").Guid.initString("0E700BE1-9DB6-11D1-A1CE-00C04FD75D13");
pub const IID_IEnumExtraSearch = &IID_IEnumExtraSearch_Value;
pub const IEnumExtraSearch = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumExtraSearch,
            celt: u32,
            rgelt: [*]EXTRASEARCH,
            pceltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumExtraSearch,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumExtraSearch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumExtraSearch,
            ppenum: **IEnumExtraSearch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumExtraSearch_Next(self: *const T, celt: u32, rgelt: [*]EXTRASEARCH, pceltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumExtraSearch.VTable, self.vtable).Next(@ptrCast(*const IEnumExtraSearch, self), celt, rgelt, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumExtraSearch_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumExtraSearch.VTable, self.vtable).Skip(@ptrCast(*const IEnumExtraSearch, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumExtraSearch_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumExtraSearch.VTable, self.vtable).Reset(@ptrCast(*const IEnumExtraSearch, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumExtraSearch_Clone(self: *const T, ppenum: **IEnumExtraSearch) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumExtraSearch.VTable, self.vtable).Clone(@ptrCast(*const IEnumExtraSearch, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellFolder2_Value = @import("../zig.zig").Guid.initString("93F2F68C-1D1B-11D3-A30E-00C04F79ABD1");
pub const IID_IShellFolder2 = &IID_IShellFolder2_Value;
pub const IShellFolder2 = extern struct {
    pub const VTable = extern struct {
        base: IShellFolder.VTable,
        GetDefaultSearchGUID: fn(
            self: *const IShellFolder2,
            pguid: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumSearches: fn(
            self: *const IShellFolder2,
            ppenum: **IEnumExtraSearch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultColumn: fn(
            self: *const IShellFolder2,
            dwRes: u32,
            pSort: *u32,
            pDisplay: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultColumnState: fn(
            self: *const IShellFolder2,
            iColumn: u32,
            pcsFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDetailsEx: fn(
            self: *const IShellFolder2,
            pidl: *ITEMIDLIST,
            pscid: *const PROPERTYKEY,
            pv: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDetailsOf: fn(
            self: *const IShellFolder2,
            pidl: *ITEMIDLIST,
            iColumn: u32,
            psd: *SHELLDETAILS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MapColumnToSCID: fn(
            self: *const IShellFolder2,
            iColumn: u32,
            pscid: *PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IShellFolder.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolder2_GetDefaultSearchGUID(self: *const T, pguid: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolder2.VTable, self.vtable).GetDefaultSearchGUID(@ptrCast(*const IShellFolder2, self), pguid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolder2_EnumSearches(self: *const T, ppenum: **IEnumExtraSearch) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolder2.VTable, self.vtable).EnumSearches(@ptrCast(*const IShellFolder2, self), ppenum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolder2_GetDefaultColumn(self: *const T, dwRes: u32, pSort: *u32, pDisplay: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolder2.VTable, self.vtable).GetDefaultColumn(@ptrCast(*const IShellFolder2, self), dwRes, pSort, pDisplay);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolder2_GetDefaultColumnState(self: *const T, iColumn: u32, pcsFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolder2.VTable, self.vtable).GetDefaultColumnState(@ptrCast(*const IShellFolder2, self), iColumn, pcsFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolder2_GetDetailsEx(self: *const T, pidl: *ITEMIDLIST, pscid: *const PROPERTYKEY, pv: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolder2.VTable, self.vtable).GetDetailsEx(@ptrCast(*const IShellFolder2, self), pidl, pscid, pv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolder2_GetDetailsOf(self: *const T, pidl: *ITEMIDLIST, iColumn: u32, psd: *SHELLDETAILS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolder2.VTable, self.vtable).GetDetailsOf(@ptrCast(*const IShellFolder2, self), pidl, iColumn, psd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolder2_MapColumnToSCID(self: *const T, iColumn: u32, pscid: *PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolder2.VTable, self.vtable).MapColumnToSCID(@ptrCast(*const IShellFolder2, self), iColumn, pscid);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const FOLDERFLAGS = extern enum(i32) {
    FWF_NONE = 0,
    FWF_AUTOARRANGE = 1,
    FWF_ABBREVIATEDNAMES = 2,
    FWF_SNAPTOGRID = 4,
    FWF_OWNERDATA = 8,
    FWF_BESTFITWINDOW = 16,
    FWF_DESKTOP = 32,
    FWF_SINGLESEL = 64,
    FWF_NOSUBFOLDERS = 128,
    FWF_TRANSPARENT = 256,
    FWF_NOCLIENTEDGE = 512,
    FWF_NOSCROLL = 1024,
    FWF_ALIGNLEFT = 2048,
    FWF_NOICONS = 4096,
    FWF_SHOWSELALWAYS = 8192,
    FWF_NOVISIBLE = 16384,
    FWF_SINGLECLICKACTIVATE = 32768,
    FWF_NOWEBVIEW = 65536,
    FWF_HIDEFILENAMES = 131072,
    FWF_CHECKSELECT = 262144,
    FWF_NOENUMREFRESH = 524288,
    FWF_NOGROUPING = 1048576,
    FWF_FULLROWSELECT = 2097152,
    FWF_NOFILTERS = 4194304,
    FWF_NOCOLUMNHEADER = 8388608,
    FWF_NOHEADERINALLVIEWS = 16777216,
    FWF_EXTENDEDTILES = 33554432,
    FWF_TRICHECKSELECT = 67108864,
    FWF_AUTOCHECKSELECT = 134217728,
    FWF_NOBROWSERVIEWSTATE = 268435456,
    FWF_SUBSETGROUPS = 536870912,
    FWF_USESEARCHFOLDER = 1073741824,
    FWF_ALLOWRTLREADING = -2147483648,
};
pub const FWF_NONE = FOLDERFLAGS.FWF_NONE;
pub const FWF_AUTOARRANGE = FOLDERFLAGS.FWF_AUTOARRANGE;
pub const FWF_ABBREVIATEDNAMES = FOLDERFLAGS.FWF_ABBREVIATEDNAMES;
pub const FWF_SNAPTOGRID = FOLDERFLAGS.FWF_SNAPTOGRID;
pub const FWF_OWNERDATA = FOLDERFLAGS.FWF_OWNERDATA;
pub const FWF_BESTFITWINDOW = FOLDERFLAGS.FWF_BESTFITWINDOW;
pub const FWF_DESKTOP = FOLDERFLAGS.FWF_DESKTOP;
pub const FWF_SINGLESEL = FOLDERFLAGS.FWF_SINGLESEL;
pub const FWF_NOSUBFOLDERS = FOLDERFLAGS.FWF_NOSUBFOLDERS;
pub const FWF_TRANSPARENT = FOLDERFLAGS.FWF_TRANSPARENT;
pub const FWF_NOCLIENTEDGE = FOLDERFLAGS.FWF_NOCLIENTEDGE;
pub const FWF_NOSCROLL = FOLDERFLAGS.FWF_NOSCROLL;
pub const FWF_ALIGNLEFT = FOLDERFLAGS.FWF_ALIGNLEFT;
pub const FWF_NOICONS = FOLDERFLAGS.FWF_NOICONS;
pub const FWF_SHOWSELALWAYS = FOLDERFLAGS.FWF_SHOWSELALWAYS;
pub const FWF_NOVISIBLE = FOLDERFLAGS.FWF_NOVISIBLE;
pub const FWF_SINGLECLICKACTIVATE = FOLDERFLAGS.FWF_SINGLECLICKACTIVATE;
pub const FWF_NOWEBVIEW = FOLDERFLAGS.FWF_NOWEBVIEW;
pub const FWF_HIDEFILENAMES = FOLDERFLAGS.FWF_HIDEFILENAMES;
pub const FWF_CHECKSELECT = FOLDERFLAGS.FWF_CHECKSELECT;
pub const FWF_NOENUMREFRESH = FOLDERFLAGS.FWF_NOENUMREFRESH;
pub const FWF_NOGROUPING = FOLDERFLAGS.FWF_NOGROUPING;
pub const FWF_FULLROWSELECT = FOLDERFLAGS.FWF_FULLROWSELECT;
pub const FWF_NOFILTERS = FOLDERFLAGS.FWF_NOFILTERS;
pub const FWF_NOCOLUMNHEADER = FOLDERFLAGS.FWF_NOCOLUMNHEADER;
pub const FWF_NOHEADERINALLVIEWS = FOLDERFLAGS.FWF_NOHEADERINALLVIEWS;
pub const FWF_EXTENDEDTILES = FOLDERFLAGS.FWF_EXTENDEDTILES;
pub const FWF_TRICHECKSELECT = FOLDERFLAGS.FWF_TRICHECKSELECT;
pub const FWF_AUTOCHECKSELECT = FOLDERFLAGS.FWF_AUTOCHECKSELECT;
pub const FWF_NOBROWSERVIEWSTATE = FOLDERFLAGS.FWF_NOBROWSERVIEWSTATE;
pub const FWF_SUBSETGROUPS = FOLDERFLAGS.FWF_SUBSETGROUPS;
pub const FWF_USESEARCHFOLDER = FOLDERFLAGS.FWF_USESEARCHFOLDER;
pub const FWF_ALLOWRTLREADING = FOLDERFLAGS.FWF_ALLOWRTLREADING;

pub const FOLDERVIEWMODE = extern enum(i32) {
    FVM_AUTO = -1,
    FVM_FIRST = 1,
    FVM_ICON = 1,
    FVM_SMALLICON = 2,
    FVM_LIST = 3,
    FVM_DETAILS = 4,
    FVM_THUMBNAIL = 5,
    FVM_TILE = 6,
    FVM_THUMBSTRIP = 7,
    FVM_CONTENT = 8,
    FVM_LAST = 8,
};
pub const FVM_AUTO = FOLDERVIEWMODE.FVM_AUTO;
pub const FVM_FIRST = FOLDERVIEWMODE.FVM_FIRST;
pub const FVM_ICON = FOLDERVIEWMODE.FVM_ICON;
pub const FVM_SMALLICON = FOLDERVIEWMODE.FVM_SMALLICON;
pub const FVM_LIST = FOLDERVIEWMODE.FVM_LIST;
pub const FVM_DETAILS = FOLDERVIEWMODE.FVM_DETAILS;
pub const FVM_THUMBNAIL = FOLDERVIEWMODE.FVM_THUMBNAIL;
pub const FVM_TILE = FOLDERVIEWMODE.FVM_TILE;
pub const FVM_THUMBSTRIP = FOLDERVIEWMODE.FVM_THUMBSTRIP;
pub const FVM_CONTENT = FOLDERVIEWMODE.FVM_CONTENT;
pub const FVM_LAST = FOLDERVIEWMODE.FVM_LAST;

pub const FOLDERLOGICALVIEWMODE = extern enum(i32) {
    FLVM_UNSPECIFIED = -1,
    FLVM_FIRST = 1,
    FLVM_DETAILS = 1,
    FLVM_TILES = 2,
    FLVM_ICONS = 3,
    FLVM_LIST = 4,
    FLVM_CONTENT = 5,
    FLVM_LAST = 5,
};
pub const FLVM_UNSPECIFIED = FOLDERLOGICALVIEWMODE.FLVM_UNSPECIFIED;
pub const FLVM_FIRST = FOLDERLOGICALVIEWMODE.FLVM_FIRST;
pub const FLVM_DETAILS = FOLDERLOGICALVIEWMODE.FLVM_DETAILS;
pub const FLVM_TILES = FOLDERLOGICALVIEWMODE.FLVM_TILES;
pub const FLVM_ICONS = FOLDERLOGICALVIEWMODE.FLVM_ICONS;
pub const FLVM_LIST = FOLDERLOGICALVIEWMODE.FLVM_LIST;
pub const FLVM_CONTENT = FOLDERLOGICALVIEWMODE.FLVM_CONTENT;
pub const FLVM_LAST = FOLDERLOGICALVIEWMODE.FLVM_LAST;

pub const FOLDERSETTINGS = extern struct {
    ViewMode: u32,
    fFlags: u32,
};

pub const _SVSIF = extern enum(i32) {
    SVSI_DESELECT = 0,
    SVSI_SELECT = 1,
    SVSI_EDIT = 3,
    SVSI_DESELECTOTHERS = 4,
    SVSI_ENSUREVISIBLE = 8,
    SVSI_FOCUSED = 16,
    SVSI_TRANSLATEPT = 32,
    SVSI_SELECTIONMARK = 64,
    SVSI_POSITIONITEM = 128,
    SVSI_CHECK = 256,
    SVSI_CHECK2 = 512,
    SVSI_KEYBOARDSELECT = 1025,
    SVSI_NOTAKEFOCUS = 1073741824,
};
pub const SVSI_DESELECT = _SVSIF.SVSI_DESELECT;
pub const SVSI_SELECT = _SVSIF.SVSI_SELECT;
pub const SVSI_EDIT = _SVSIF.SVSI_EDIT;
pub const SVSI_DESELECTOTHERS = _SVSIF.SVSI_DESELECTOTHERS;
pub const SVSI_ENSUREVISIBLE = _SVSIF.SVSI_ENSUREVISIBLE;
pub const SVSI_FOCUSED = _SVSIF.SVSI_FOCUSED;
pub const SVSI_TRANSLATEPT = _SVSIF.SVSI_TRANSLATEPT;
pub const SVSI_SELECTIONMARK = _SVSIF.SVSI_SELECTIONMARK;
pub const SVSI_POSITIONITEM = _SVSIF.SVSI_POSITIONITEM;
pub const SVSI_CHECK = _SVSIF.SVSI_CHECK;
pub const SVSI_CHECK2 = _SVSIF.SVSI_CHECK2;
pub const SVSI_KEYBOARDSELECT = _SVSIF.SVSI_KEYBOARDSELECT;
pub const SVSI_NOTAKEFOCUS = _SVSIF.SVSI_NOTAKEFOCUS;

pub const _SVGIO = extern enum(i32) {
    SVGIO_BACKGROUND = 0,
    SVGIO_SELECTION = 1,
    SVGIO_ALLVIEW = 2,
    SVGIO_CHECKED = 3,
    SVGIO_TYPE_MASK = 15,
    SVGIO_FLAG_VIEWORDER = -2147483648,
};
pub const SVGIO_BACKGROUND = _SVGIO.SVGIO_BACKGROUND;
pub const SVGIO_SELECTION = _SVGIO.SVGIO_SELECTION;
pub const SVGIO_ALLVIEW = _SVGIO.SVGIO_ALLVIEW;
pub const SVGIO_CHECKED = _SVGIO.SVGIO_CHECKED;
pub const SVGIO_TYPE_MASK = _SVGIO.SVGIO_TYPE_MASK;
pub const SVGIO_FLAG_VIEWORDER = _SVGIO.SVGIO_FLAG_VIEWORDER;

pub const SVUIA_STATUS = extern enum(i32) {
    SVUIA_DEACTIVATE = 0,
    SVUIA_ACTIVATE_NOFOCUS = 1,
    SVUIA_ACTIVATE_FOCUS = 2,
    SVUIA_INPLACEACTIVATE = 3,
};
pub const SVUIA_DEACTIVATE = SVUIA_STATUS.SVUIA_DEACTIVATE;
pub const SVUIA_ACTIVATE_NOFOCUS = SVUIA_STATUS.SVUIA_ACTIVATE_NOFOCUS;
pub const SVUIA_ACTIVATE_FOCUS = SVUIA_STATUS.SVUIA_ACTIVATE_FOCUS;
pub const SVUIA_INPLACEACTIVATE = SVUIA_STATUS.SVUIA_INPLACEACTIVATE;

pub const LPFNSVADDPROPSHEETPAGE = fn(
) callconv(@import("std").os.windows.WINAPI) BOOL;

const IID_IShellView_Value = @import("../zig.zig").Guid.initString("000214E3-0000-0000-C000-000000000046");
pub const IID_IShellView = &IID_IShellView_Value;
pub const IShellView = extern struct {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        TranslateAcceleratorA: fn(
            self: *const IShellView,
            pmsg: *MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableModeless: fn(
            self: *const IShellView,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UIActivate: fn(
            self: *const IShellView,
            uState: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateViewWindow: fn(
            self: *const IShellView,
            psvPrevious: *IShellView,
            pfs: *FOLDERSETTINGS,
            psb: *IShellBrowser,
            prcView: *RECT,
            phWnd: *HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyViewWindow: fn(
            self: *const IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentInfo: fn(
            self: *const IShellView,
            pfs: *FOLDERSETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPropertySheetPages: fn(
            self: *const IShellView,
            dwReserved: u32,
            pfn: LPFNSVADDPROPSHEETPAGE,
            lparam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveViewState: fn(
            self: *const IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectItem: fn(
            self: *const IShellView,
            pidlItem: *ITEMIDLIST,
            uFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemObject: fn(
            self: *const IShellView,
            uItem: u32,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOleWindow.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellView_TranslateAcceleratorA(self: *const T, pmsg: *MSG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellView.VTable, self.vtable).TranslateAcceleratorA(@ptrCast(*const IShellView, self), pmsg);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellView_EnableModeless(self: *const T, fEnable: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellView.VTable, self.vtable).EnableModeless(@ptrCast(*const IShellView, self), fEnable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellView_UIActivate(self: *const T, uState: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellView.VTable, self.vtable).UIActivate(@ptrCast(*const IShellView, self), uState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellView_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellView.VTable, self.vtable).Refresh(@ptrCast(*const IShellView, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellView_CreateViewWindow(self: *const T, psvPrevious: *IShellView, pfs: *FOLDERSETTINGS, psb: *IShellBrowser, prcView: *RECT, phWnd: *HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellView.VTable, self.vtable).CreateViewWindow(@ptrCast(*const IShellView, self), psvPrevious, pfs, psb, prcView, phWnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellView_DestroyViewWindow(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellView.VTable, self.vtable).DestroyViewWindow(@ptrCast(*const IShellView, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellView_GetCurrentInfo(self: *const T, pfs: *FOLDERSETTINGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellView.VTable, self.vtable).GetCurrentInfo(@ptrCast(*const IShellView, self), pfs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellView_AddPropertySheetPages(self: *const T, dwReserved: u32, pfn: LPFNSVADDPROPSHEETPAGE, lparam: LPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellView.VTable, self.vtable).AddPropertySheetPages(@ptrCast(*const IShellView, self), dwReserved, pfn, lparam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellView_SaveViewState(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellView.VTable, self.vtable).SaveViewState(@ptrCast(*const IShellView, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellView_SelectItem(self: *const T, pidlItem: *ITEMIDLIST, uFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellView.VTable, self.vtable).SelectItem(@ptrCast(*const IShellView, self), pidlItem, uFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellView_GetItemObject(self: *const T, uItem: u32, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellView.VTable, self.vtable).GetItemObject(@ptrCast(*const IShellView, self), uItem, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SV2CVW2_PARAMS = extern struct {
    cbSize: u32,
    psvPrev: *IShellView,
    pfs: *FOLDERSETTINGS,
    psbOwner: *IShellBrowser,
    prcView: *RECT,
    pvid: *const Guid,
    hwndView: HWND,
};

const IID_IShellView2_Value = @import("../zig.zig").Guid.initString("88E39E80-3578-11CF-AE69-08002B2E1262");
pub const IID_IShellView2 = &IID_IShellView2_Value;
pub const IShellView2 = extern struct {
    pub const VTable = extern struct {
        base: IShellView.VTable,
        GetView: fn(
            self: *const IShellView2,
            pvid: *Guid,
            uView: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateViewWindow2: fn(
            self: *const IShellView2,
            lpParams: *SV2CVW2_PARAMS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleRename: fn(
            self: *const IShellView2,
            pidlNew: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectAndPositionItem: fn(
            self: *const IShellView2,
            pidlItem: *ITEMIDLIST,
            uFlags: u32,
            ppt: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IShellView.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellView2_GetView(self: *const T, pvid: *Guid, uView: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellView2.VTable, self.vtable).GetView(@ptrCast(*const IShellView2, self), pvid, uView);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellView2_CreateViewWindow2(self: *const T, lpParams: *SV2CVW2_PARAMS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellView2.VTable, self.vtable).CreateViewWindow2(@ptrCast(*const IShellView2, self), lpParams);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellView2_HandleRename(self: *const T, pidlNew: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellView2.VTable, self.vtable).HandleRename(@ptrCast(*const IShellView2, self), pidlNew);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellView2_SelectAndPositionItem(self: *const T, pidlItem: *ITEMIDLIST, uFlags: u32, ppt: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellView2.VTable, self.vtable).SelectAndPositionItem(@ptrCast(*const IShellView2, self), pidlItem, uFlags, ppt);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFolderView_Value = @import("../zig.zig").Guid.initString("CDE725B0-CCC9-4519-917E-325D72FAB4CE");
pub const IID_IFolderView = &IID_IFolderView_Value;
pub const IFolderView = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCurrentViewMode: fn(
            self: *const IFolderView,
            pViewMode: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCurrentViewMode: fn(
            self: *const IFolderView,
            ViewMode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: fn(
            self: *const IFolderView,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const IFolderView,
            iItemIndex: i32,
            ppidl: **ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemCount: fn(
            self: *const IFolderView,
            uFlags: u32,
            pcItems: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Items: fn(
            self: *const IFolderView,
            uFlags: u32,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectionMarkedItem: fn(
            self: *const IFolderView,
            piItem: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFocusedItem: fn(
            self: *const IFolderView,
            piItem: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemPosition: fn(
            self: *const IFolderView,
            pidl: *ITEMIDLIST,
            ppt: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpacing: fn(
            self: *const IFolderView,
            ppt: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultSpacing: fn(
            self: *const IFolderView,
            ppt: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutoArrange: fn(
            self: *const IFolderView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectItem: fn(
            self: *const IFolderView,
            iItem: i32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectAndPositionItems: fn(
            self: *const IFolderView,
            cidl: u32,
            apidl: [*]*ITEMIDLIST,
            apt: ?[*]POINT,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView_GetCurrentViewMode(self: *const T, pViewMode: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView.VTable, self.vtable).GetCurrentViewMode(@ptrCast(*const IFolderView, self), pViewMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView_SetCurrentViewMode(self: *const T, ViewMode: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView.VTable, self.vtable).SetCurrentViewMode(@ptrCast(*const IFolderView, self), ViewMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView_GetFolder(self: *const T, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView.VTable, self.vtable).GetFolder(@ptrCast(*const IFolderView, self), riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView_Item(self: *const T, iItemIndex: i32, ppidl: **ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView.VTable, self.vtable).Item(@ptrCast(*const IFolderView, self), iItemIndex, ppidl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView_ItemCount(self: *const T, uFlags: u32, pcItems: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView.VTable, self.vtable).ItemCount(@ptrCast(*const IFolderView, self), uFlags, pcItems);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView_Items(self: *const T, uFlags: u32, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView.VTable, self.vtable).Items(@ptrCast(*const IFolderView, self), uFlags, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView_GetSelectionMarkedItem(self: *const T, piItem: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView.VTable, self.vtable).GetSelectionMarkedItem(@ptrCast(*const IFolderView, self), piItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView_GetFocusedItem(self: *const T, piItem: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView.VTable, self.vtable).GetFocusedItem(@ptrCast(*const IFolderView, self), piItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView_GetItemPosition(self: *const T, pidl: *ITEMIDLIST, ppt: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView.VTable, self.vtable).GetItemPosition(@ptrCast(*const IFolderView, self), pidl, ppt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView_GetSpacing(self: *const T, ppt: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView.VTable, self.vtable).GetSpacing(@ptrCast(*const IFolderView, self), ppt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView_GetDefaultSpacing(self: *const T, ppt: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView.VTable, self.vtable).GetDefaultSpacing(@ptrCast(*const IFolderView, self), ppt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView_GetAutoArrange(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView.VTable, self.vtable).GetAutoArrange(@ptrCast(*const IFolderView, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView_SelectItem(self: *const T, iItem: i32, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView.VTable, self.vtable).SelectItem(@ptrCast(*const IFolderView, self), iItem, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView_SelectAndPositionItems(self: *const T, cidl: u32, apidl: [*]*ITEMIDLIST, apt: ?[*]POINT, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView.VTable, self.vtable).SelectAndPositionItems(@ptrCast(*const IFolderView, self), cidl, apidl, apt, dwFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const tagSORTDIRECTION = extern enum(i32) {
    SORT_DESCENDING = -1,
    SORT_ASCENDING = 1,
};
pub const SORT_DESCENDING = tagSORTDIRECTION.SORT_DESCENDING;
pub const SORT_ASCENDING = tagSORTDIRECTION.SORT_ASCENDING;

pub const SORTCOLUMN = extern struct {
    propkey: PROPERTYKEY,
    direction: i32,
};

pub const FVTEXTTYPE = extern enum(i32) {
    FVST_EMPTYTEXT = 0,
};
pub const FVST_EMPTYTEXT = FVTEXTTYPE.FVST_EMPTYTEXT;

const IID_IFolderView2_Value = @import("../zig.zig").Guid.initString("1AF3A467-214F-4298-908E-06B03E0B39F9");
pub const IID_IFolderView2 = &IID_IFolderView2_Value;
pub const IFolderView2 = extern struct {
    pub const VTable = extern struct {
        base: IFolderView.VTable,
        SetGroupBy: fn(
            self: *const IFolderView2,
            key: *const PROPERTYKEY,
            fAscending: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupBy: fn(
            self: *const IFolderView2,
            pkey: *PROPERTYKEY,
            pfAscending: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewProperty: fn(
            self: *const IFolderView2,
            pidl: *ITEMIDLIST,
            propkey: *const PROPERTYKEY,
            propvar: *const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewProperty: fn(
            self: *const IFolderView2,
            pidl: *ITEMIDLIST,
            propkey: *const PROPERTYKEY,
            ppropvar: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTileViewProperties: fn(
            self: *const IFolderView2,
            pidl: *ITEMIDLIST,
            pszPropList: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetExtendedTileViewProperties: fn(
            self: *const IFolderView2,
            pidl: *ITEMIDLIST,
            pszPropList: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetText: fn(
            self: *const IFolderView2,
            iType: FVTEXTTYPE,
            pwszText: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCurrentFolderFlags: fn(
            self: *const IFolderView2,
            dwMask: u32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentFolderFlags: fn(
            self: *const IFolderView2,
            pdwFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSortColumnCount: fn(
            self: *const IFolderView2,
            pcColumns: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSortColumns: fn(
            self: *const IFolderView2,
            rgSortColumns: [*]const SORTCOLUMN,
            cColumns: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSortColumns: fn(
            self: *const IFolderView2,
            rgSortColumns: [*]SORTCOLUMN,
            cColumns: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: fn(
            self: *const IFolderView2,
            iItem: i32,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVisibleItem: fn(
            self: *const IFolderView2,
            iStart: i32,
            fPrevious: BOOL,
            piItem: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedItem: fn(
            self: *const IFolderView2,
            iStart: i32,
            piItem: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelection: fn(
            self: *const IFolderView2,
            fNoneImpliesFolder: BOOL,
            ppsia: **IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectionState: fn(
            self: *const IFolderView2,
            pidl: *ITEMIDLIST,
            pdwFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeVerbOnSelection: fn(
            self: *const IFolderView2,
            pszVerb: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewModeAndIconSize: fn(
            self: *const IFolderView2,
            uViewMode: FOLDERVIEWMODE,
            iImageSize: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewModeAndIconSize: fn(
            self: *const IFolderView2,
            puViewMode: *FOLDERVIEWMODE,
            piImageSize: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGroupSubsetCount: fn(
            self: *const IFolderView2,
            cVisibleRows: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupSubsetCount: fn(
            self: *const IFolderView2,
            pcVisibleRows: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedraw: fn(
            self: *const IFolderView2,
            fRedrawOn: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsMoveInSameFolder: fn(
            self: *const IFolderView2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoRename: fn(
            self: *const IFolderView2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IFolderView.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_SetGroupBy(self: *const T, key: *const PROPERTYKEY, fAscending: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).SetGroupBy(@ptrCast(*const IFolderView2, self), key, fAscending);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_GetGroupBy(self: *const T, pkey: *PROPERTYKEY, pfAscending: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).GetGroupBy(@ptrCast(*const IFolderView2, self), pkey, pfAscending);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_SetViewProperty(self: *const T, pidl: *ITEMIDLIST, propkey: *const PROPERTYKEY, propvar: *const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).SetViewProperty(@ptrCast(*const IFolderView2, self), pidl, propkey, propvar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_GetViewProperty(self: *const T, pidl: *ITEMIDLIST, propkey: *const PROPERTYKEY, ppropvar: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).GetViewProperty(@ptrCast(*const IFolderView2, self), pidl, propkey, ppropvar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_SetTileViewProperties(self: *const T, pidl: *ITEMIDLIST, pszPropList: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).SetTileViewProperties(@ptrCast(*const IFolderView2, self), pidl, pszPropList);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_SetExtendedTileViewProperties(self: *const T, pidl: *ITEMIDLIST, pszPropList: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).SetExtendedTileViewProperties(@ptrCast(*const IFolderView2, self), pidl, pszPropList);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_SetText(self: *const T, iType: FVTEXTTYPE, pwszText: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).SetText(@ptrCast(*const IFolderView2, self), iType, pwszText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_SetCurrentFolderFlags(self: *const T, dwMask: u32, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).SetCurrentFolderFlags(@ptrCast(*const IFolderView2, self), dwMask, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_GetCurrentFolderFlags(self: *const T, pdwFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).GetCurrentFolderFlags(@ptrCast(*const IFolderView2, self), pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_GetSortColumnCount(self: *const T, pcColumns: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).GetSortColumnCount(@ptrCast(*const IFolderView2, self), pcColumns);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_SetSortColumns(self: *const T, rgSortColumns: [*]const SORTCOLUMN, cColumns: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).SetSortColumns(@ptrCast(*const IFolderView2, self), rgSortColumns, cColumns);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_GetSortColumns(self: *const T, rgSortColumns: [*]SORTCOLUMN, cColumns: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).GetSortColumns(@ptrCast(*const IFolderView2, self), rgSortColumns, cColumns);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_GetItem(self: *const T, iItem: i32, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).GetItem(@ptrCast(*const IFolderView2, self), iItem, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_GetVisibleItem(self: *const T, iStart: i32, fPrevious: BOOL, piItem: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).GetVisibleItem(@ptrCast(*const IFolderView2, self), iStart, fPrevious, piItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_GetSelectedItem(self: *const T, iStart: i32, piItem: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).GetSelectedItem(@ptrCast(*const IFolderView2, self), iStart, piItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_GetSelection(self: *const T, fNoneImpliesFolder: BOOL, ppsia: **IShellItemArray) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).GetSelection(@ptrCast(*const IFolderView2, self), fNoneImpliesFolder, ppsia);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_GetSelectionState(self: *const T, pidl: *ITEMIDLIST, pdwFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).GetSelectionState(@ptrCast(*const IFolderView2, self), pidl, pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_InvokeVerbOnSelection(self: *const T, pszVerb: [*:0]const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).InvokeVerbOnSelection(@ptrCast(*const IFolderView2, self), pszVerb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_SetViewModeAndIconSize(self: *const T, uViewMode: FOLDERVIEWMODE, iImageSize: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).SetViewModeAndIconSize(@ptrCast(*const IFolderView2, self), uViewMode, iImageSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_GetViewModeAndIconSize(self: *const T, puViewMode: *FOLDERVIEWMODE, piImageSize: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).GetViewModeAndIconSize(@ptrCast(*const IFolderView2, self), puViewMode, piImageSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_SetGroupSubsetCount(self: *const T, cVisibleRows: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).SetGroupSubsetCount(@ptrCast(*const IFolderView2, self), cVisibleRows);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_GetGroupSubsetCount(self: *const T, pcVisibleRows: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).GetGroupSubsetCount(@ptrCast(*const IFolderView2, self), pcVisibleRows);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_SetRedraw(self: *const T, fRedrawOn: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).SetRedraw(@ptrCast(*const IFolderView2, self), fRedrawOn);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_IsMoveInSameFolder(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).IsMoveInSameFolder(@ptrCast(*const IFolderView2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderView2_DoRename(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderView2.VTable, self.vtable).DoRename(@ptrCast(*const IFolderView2, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFolderViewSettings_Value = @import("../zig.zig").Guid.initString("AE8C987D-8797-4ED3-BE72-2A47DD938DB0");
pub const IID_IFolderViewSettings = &IID_IFolderViewSettings_Value;
pub const IFolderViewSettings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetColumnPropertyList: fn(
            self: *const IFolderViewSettings,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupByProperty: fn(
            self: *const IFolderViewSettings,
            pkey: *PROPERTYKEY,
            pfGroupAscending: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewMode: fn(
            self: *const IFolderViewSettings,
            plvm: *FOLDERLOGICALVIEWMODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconSize: fn(
            self: *const IFolderViewSettings,
            puIconSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderFlags: fn(
            self: *const IFolderViewSettings,
            pfolderMask: *FOLDERFLAGS,
            pfolderFlags: *FOLDERFLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSortColumns: fn(
            self: *const IFolderViewSettings,
            rgSortColumns: [*]SORTCOLUMN,
            cColumnsIn: u32,
            pcColumnsOut: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupSubsetCount: fn(
            self: *const IFolderViewSettings,
            pcVisibleRows: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderViewSettings_GetColumnPropertyList(self: *const T, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderViewSettings.VTable, self.vtable).GetColumnPropertyList(@ptrCast(*const IFolderViewSettings, self), riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderViewSettings_GetGroupByProperty(self: *const T, pkey: *PROPERTYKEY, pfGroupAscending: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderViewSettings.VTable, self.vtable).GetGroupByProperty(@ptrCast(*const IFolderViewSettings, self), pkey, pfGroupAscending);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderViewSettings_GetViewMode(self: *const T, plvm: *FOLDERLOGICALVIEWMODE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderViewSettings.VTable, self.vtable).GetViewMode(@ptrCast(*const IFolderViewSettings, self), plvm);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderViewSettings_GetIconSize(self: *const T, puIconSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderViewSettings.VTable, self.vtable).GetIconSize(@ptrCast(*const IFolderViewSettings, self), puIconSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderViewSettings_GetFolderFlags(self: *const T, pfolderMask: *FOLDERFLAGS, pfolderFlags: *FOLDERFLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderViewSettings.VTable, self.vtable).GetFolderFlags(@ptrCast(*const IFolderViewSettings, self), pfolderMask, pfolderFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderViewSettings_GetSortColumns(self: *const T, rgSortColumns: [*]SORTCOLUMN, cColumnsIn: u32, pcColumnsOut: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderViewSettings.VTable, self.vtable).GetSortColumns(@ptrCast(*const IFolderViewSettings, self), rgSortColumns, cColumnsIn, pcColumnsOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderViewSettings_GetGroupSubsetCount(self: *const T, pcVisibleRows: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderViewSettings.VTable, self.vtable).GetGroupSubsetCount(@ptrCast(*const IFolderViewSettings, self), pcVisibleRows);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInitializeNetworkFolder_Value = @import("../zig.zig").Guid.initString("6E0F9881-42A8-4F2A-97F8-8AF4E026D92D");
pub const IID_IInitializeNetworkFolder = &IID_IInitializeNetworkFolder_Value;
pub const IInitializeNetworkFolder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IInitializeNetworkFolder,
            pidl: *ITEMIDLIST,
            pidlTarget: *ITEMIDLIST,
            uDisplayType: u32,
            pszResName: [*:0]const u16,
            pszProvider: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInitializeNetworkFolder_Initialize(self: *const T, pidl: *ITEMIDLIST, pidlTarget: *ITEMIDLIST, uDisplayType: u32, pszResName: [*:0]const u16, pszProvider: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInitializeNetworkFolder.VTable, self.vtable).Initialize(@ptrCast(*const IInitializeNetworkFolder, self), pidl, pidlTarget, uDisplayType, pszResName, pszProvider);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_INetworkFolderInternal_Value = @import("../zig.zig").Guid.initString("CEB38218-C971-47BB-A703-F0BC99CCDB81");
pub const IID_INetworkFolderInternal = &IID_INetworkFolderInternal_Value;
pub const INetworkFolderInternal = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetResourceDisplayType: fn(
            self: *const INetworkFolderInternal,
            displayType: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDList: fn(
            self: *const INetworkFolderInternal,
            idList: **ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProvider: fn(
            self: *const INetworkFolderInternal,
            itemIdCount: u32,
            itemIds: [*]*ITEMIDLIST,
            providerMaxLength: u32,
            provider: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetworkFolderInternal_GetResourceDisplayType(self: *const T, displayType: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetworkFolderInternal.VTable, self.vtable).GetResourceDisplayType(@ptrCast(*const INetworkFolderInternal, self), displayType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetworkFolderInternal_GetIDList(self: *const T, idList: **ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetworkFolderInternal.VTable, self.vtable).GetIDList(@ptrCast(*const INetworkFolderInternal, self), idList);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INetworkFolderInternal_GetProvider(self: *const T, itemIdCount: u32, itemIds: [*]*ITEMIDLIST, providerMaxLength: u32, provider: [*:0]u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const INetworkFolderInternal.VTable, self.vtable).GetProvider(@ptrCast(*const INetworkFolderInternal, self), itemIdCount, itemIds, providerMaxLength, provider);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPreviewHandlerVisuals_Value = @import("../zig.zig").Guid.initString("196BF9A5-B346-4EF0-AA1E-5DCDB76768B1");
pub const IID_IPreviewHandlerVisuals = &IID_IPreviewHandlerVisuals_Value;
pub const IPreviewHandlerVisuals = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBackgroundColor: fn(
            self: *const IPreviewHandlerVisuals,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFont: fn(
            self: *const IPreviewHandlerVisuals,
            plf: *const LOGFONTW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTextColor: fn(
            self: *const IPreviewHandlerVisuals,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPreviewHandlerVisuals_SetBackgroundColor(self: *const T, color: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPreviewHandlerVisuals.VTable, self.vtable).SetBackgroundColor(@ptrCast(*const IPreviewHandlerVisuals, self), color);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPreviewHandlerVisuals_SetFont(self: *const T, plf: *const LOGFONTW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPreviewHandlerVisuals.VTable, self.vtable).SetFont(@ptrCast(*const IPreviewHandlerVisuals, self), plf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPreviewHandlerVisuals_SetTextColor(self: *const T, color: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPreviewHandlerVisuals.VTable, self.vtable).SetTextColor(@ptrCast(*const IPreviewHandlerVisuals, self), color);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICommDlgBrowser_Value = @import("../zig.zig").Guid.initString("000214F1-0000-0000-C000-000000000046");
pub const IID_ICommDlgBrowser = &IID_ICommDlgBrowser_Value;
pub const ICommDlgBrowser = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnDefaultCommand: fn(
            self: *const ICommDlgBrowser,
            ppshv: *IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnStateChange: fn(
            self: *const ICommDlgBrowser,
            ppshv: *IShellView,
            uChange: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IncludeObject: fn(
            self: *const ICommDlgBrowser,
            ppshv: *IShellView,
            pidl: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICommDlgBrowser_OnDefaultCommand(self: *const T, ppshv: *IShellView) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICommDlgBrowser.VTable, self.vtable).OnDefaultCommand(@ptrCast(*const ICommDlgBrowser, self), ppshv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICommDlgBrowser_OnStateChange(self: *const T, ppshv: *IShellView, uChange: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICommDlgBrowser.VTable, self.vtable).OnStateChange(@ptrCast(*const ICommDlgBrowser, self), ppshv, uChange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICommDlgBrowser_IncludeObject(self: *const T, ppshv: *IShellView, pidl: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICommDlgBrowser.VTable, self.vtable).IncludeObject(@ptrCast(*const ICommDlgBrowser, self), ppshv, pidl);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICommDlgBrowser2_Value = @import("../zig.zig").Guid.initString("10339516-2894-11D2-9039-00C04F8EEB3E");
pub const IID_ICommDlgBrowser2 = &IID_ICommDlgBrowser2_Value;
pub const ICommDlgBrowser2 = extern struct {
    pub const VTable = extern struct {
        base: ICommDlgBrowser.VTable,
        Notify: fn(
            self: *const ICommDlgBrowser2,
            ppshv: *IShellView,
            dwNotifyType: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultMenuText: fn(
            self: *const ICommDlgBrowser2,
            ppshv: *IShellView,
            pszText: [*:0]u16,
            cchMax: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewFlags: fn(
            self: *const ICommDlgBrowser2,
            pdwFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICommDlgBrowser.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICommDlgBrowser2_Notify(self: *const T, ppshv: *IShellView, dwNotifyType: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICommDlgBrowser2.VTable, self.vtable).Notify(@ptrCast(*const ICommDlgBrowser2, self), ppshv, dwNotifyType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICommDlgBrowser2_GetDefaultMenuText(self: *const T, ppshv: *IShellView, pszText: [*:0]u16, cchMax: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICommDlgBrowser2.VTable, self.vtable).GetDefaultMenuText(@ptrCast(*const ICommDlgBrowser2, self), ppshv, pszText, cchMax);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICommDlgBrowser2_GetViewFlags(self: *const T, pdwFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICommDlgBrowser2.VTable, self.vtable).GetViewFlags(@ptrCast(*const ICommDlgBrowser2, self), pdwFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CM_MASK = extern enum(i32) {
    WIDTH = 1,
    DEFAULTWIDTH = 2,
    IDEALWIDTH = 4,
    NAME = 8,
    STATE = 16,
};
pub const CM_MASK_WIDTH = CM_MASK.WIDTH;
pub const CM_MASK_DEFAULTWIDTH = CM_MASK.DEFAULTWIDTH;
pub const CM_MASK_IDEALWIDTH = CM_MASK.IDEALWIDTH;
pub const CM_MASK_NAME = CM_MASK.NAME;
pub const CM_MASK_STATE = CM_MASK.STATE;

pub const CM_STATE = extern enum(i32) {
    NONE = 0,
    VISIBLE = 1,
    FIXEDWIDTH = 2,
    NOSORTBYFOLDERNESS = 4,
    ALWAYSVISIBLE = 8,
};
pub const CM_STATE_NONE = CM_STATE.NONE;
pub const CM_STATE_VISIBLE = CM_STATE.VISIBLE;
pub const CM_STATE_FIXEDWIDTH = CM_STATE.FIXEDWIDTH;
pub const CM_STATE_NOSORTBYFOLDERNESS = CM_STATE.NOSORTBYFOLDERNESS;
pub const CM_STATE_ALWAYSVISIBLE = CM_STATE.ALWAYSVISIBLE;

pub const CM_ENUM_FLAGS = extern enum(i32) {
    CM_ENUM_ALL = 1,
    CM_ENUM_VISIBLE = 2,
};
pub const CM_ENUM_ALL = CM_ENUM_FLAGS.CM_ENUM_ALL;
pub const CM_ENUM_VISIBLE = CM_ENUM_FLAGS.CM_ENUM_VISIBLE;

pub const CM_SET_WIDTH_VALUE = extern enum(i32) {
    CM_WIDTH_USEDEFAULT = -1,
    CM_WIDTH_AUTOSIZE = -2,
};
pub const CM_WIDTH_USEDEFAULT = CM_SET_WIDTH_VALUE.CM_WIDTH_USEDEFAULT;
pub const CM_WIDTH_AUTOSIZE = CM_SET_WIDTH_VALUE.CM_WIDTH_AUTOSIZE;

pub const CM_COLUMNINFO = extern struct {
    cbSize: u32,
    dwMask: u32,
    dwState: u32,
    uWidth: u32,
    uDefaultWidth: u32,
    uIdealWidth: u32,
    wszName: [80]u16,
};

const IID_IColumnManager_Value = @import("../zig.zig").Guid.initString("D8EC27BB-3F3B-4042-B10A-4ACFD924D453");
pub const IID_IColumnManager = &IID_IColumnManager_Value;
pub const IColumnManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetColumnInfo: fn(
            self: *const IColumnManager,
            propkey: *const PROPERTYKEY,
            pcmci: *const CM_COLUMNINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnInfo: fn(
            self: *const IColumnManager,
            propkey: *const PROPERTYKEY,
            pcmci: *CM_COLUMNINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnCount: fn(
            self: *const IColumnManager,
            dwFlags: CM_ENUM_FLAGS,
            puCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumns: fn(
            self: *const IColumnManager,
            dwFlags: CM_ENUM_FLAGS,
            rgkeyOrder: [*]PROPERTYKEY,
            cColumns: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColumns: fn(
            self: *const IColumnManager,
            rgkeyOrder: [*]const PROPERTYKEY,
            cVisible: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IColumnManager_SetColumnInfo(self: *const T, propkey: *const PROPERTYKEY, pcmci: *const CM_COLUMNINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IColumnManager.VTable, self.vtable).SetColumnInfo(@ptrCast(*const IColumnManager, self), propkey, pcmci);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IColumnManager_GetColumnInfo(self: *const T, propkey: *const PROPERTYKEY, pcmci: *CM_COLUMNINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IColumnManager.VTable, self.vtable).GetColumnInfo(@ptrCast(*const IColumnManager, self), propkey, pcmci);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IColumnManager_GetColumnCount(self: *const T, dwFlags: CM_ENUM_FLAGS, puCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IColumnManager.VTable, self.vtable).GetColumnCount(@ptrCast(*const IColumnManager, self), dwFlags, puCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IColumnManager_GetColumns(self: *const T, dwFlags: CM_ENUM_FLAGS, rgkeyOrder: [*]PROPERTYKEY, cColumns: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IColumnManager.VTable, self.vtable).GetColumns(@ptrCast(*const IColumnManager, self), dwFlags, rgkeyOrder, cColumns);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IColumnManager_SetColumns(self: *const T, rgkeyOrder: [*]const PROPERTYKEY, cVisible: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IColumnManager.VTable, self.vtable).SetColumns(@ptrCast(*const IColumnManager, self), rgkeyOrder, cVisible);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFolderFilterSite_Value = @import("../zig.zig").Guid.initString("C0A651F5-B48B-11D2-B5ED-006097C686F6");
pub const IID_IFolderFilterSite = &IID_IFolderFilterSite_Value;
pub const IFolderFilterSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFilter: fn(
            self: *const IFolderFilterSite,
            punk: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderFilterSite_SetFilter(self: *const T, punk: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderFilterSite.VTable, self.vtable).SetFilter(@ptrCast(*const IFolderFilterSite, self), punk);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFolderFilter_Value = @import("../zig.zig").Guid.initString("9CC22886-DC8E-11D2-B1D0-00C04F8EEB3E");
pub const IID_IFolderFilter = &IID_IFolderFilter_Value;
pub const IFolderFilter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ShouldShow: fn(
            self: *const IFolderFilter,
            psf: *IShellFolder,
            pidlFolder: *ITEMIDLIST,
            pidlItem: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumFlags: fn(
            self: *const IFolderFilter,
            psf: *IShellFolder,
            pidlFolder: *ITEMIDLIST,
            phwnd: *HWND,
            pgrfFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderFilter_ShouldShow(self: *const T, psf: *IShellFolder, pidlFolder: *ITEMIDLIST, pidlItem: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderFilter.VTable, self.vtable).ShouldShow(@ptrCast(*const IFolderFilter, self), psf, pidlFolder, pidlItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderFilter_GetEnumFlags(self: *const T, psf: *IShellFolder, pidlFolder: *ITEMIDLIST, phwnd: *HWND, pgrfFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderFilter.VTable, self.vtable).GetEnumFlags(@ptrCast(*const IFolderFilter, self), psf, pidlFolder, phwnd, pgrfFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInputObjectSite_Value = @import("../zig.zig").Guid.initString("F1DB8392-7331-11D0-8C99-00A0C92DBFE8");
pub const IID_IInputObjectSite = &IID_IInputObjectSite_Value;
pub const IInputObjectSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnFocusChangeIS: fn(
            self: *const IInputObjectSite,
            punkObj: *IUnknown,
            fSetFocus: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInputObjectSite_OnFocusChangeIS(self: *const T, punkObj: *IUnknown, fSetFocus: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInputObjectSite.VTable, self.vtable).OnFocusChangeIS(@ptrCast(*const IInputObjectSite, self), punkObj, fSetFocus);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInputObject_Value = @import("../zig.zig").Guid.initString("68284FAA-6A48-11D0-8C78-00C04FD918B4");
pub const IID_IInputObject = &IID_IInputObject_Value;
pub const IInputObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UIActivateIO: fn(
            self: *const IInputObject,
            fActivate: BOOL,
            pMsg: *MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasFocusIO: fn(
            self: *const IInputObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateAcceleratorIO: fn(
            self: *const IInputObject,
            pMsg: *MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInputObject_UIActivateIO(self: *const T, fActivate: BOOL, pMsg: *MSG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInputObject.VTable, self.vtable).UIActivateIO(@ptrCast(*const IInputObject, self), fActivate, pMsg);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInputObject_HasFocusIO(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInputObject.VTable, self.vtable).HasFocusIO(@ptrCast(*const IInputObject, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInputObject_TranslateAcceleratorIO(self: *const T, pMsg: *MSG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInputObject.VTable, self.vtable).TranslateAcceleratorIO(@ptrCast(*const IInputObject, self), pMsg);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInputObject2_Value = @import("../zig.zig").Guid.initString("6915C085-510B-44CD-94AF-28DFA56CF92B");
pub const IID_IInputObject2 = &IID_IInputObject2_Value;
pub const IInputObject2 = extern struct {
    pub const VTable = extern struct {
        base: IInputObject.VTable,
        TranslateAcceleratorGlobal: fn(
            self: *const IInputObject2,
            pMsg: *MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IInputObject.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInputObject2_TranslateAcceleratorGlobal(self: *const T, pMsg: *MSG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInputObject2.VTable, self.vtable).TranslateAcceleratorGlobal(@ptrCast(*const IInputObject2, self), pMsg);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellIcon_Value = @import("../zig.zig").Guid.initString("000214E5-0000-0000-C000-000000000046");
pub const IID_IShellIcon = &IID_IShellIcon_Value;
pub const IShellIcon = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIconOf: fn(
            self: *const IShellIcon,
            pidl: *ITEMIDLIST,
            flags: u32,
            pIconIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellIcon_GetIconOf(self: *const T, pidl: *ITEMIDLIST, flags: u32, pIconIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellIcon.VTable, self.vtable).GetIconOf(@ptrCast(*const IShellIcon, self), pidl, flags, pIconIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellBrowser_Value = @import("../zig.zig").Guid.initString("000214E2-0000-0000-C000-000000000046");
pub const IID_IShellBrowser = &IID_IShellBrowser_Value;
pub const IShellBrowser = extern struct {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        InsertMenusSB: fn(
            self: *const IShellBrowser,
            hmenuShared: HMENU,
            lpMenuWidths: *OleMenuGroupWidths,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMenuSB: fn(
            self: *const IShellBrowser,
            hmenuShared: HMENU,
            holemenuRes: ?*c_void,
            hwndActiveObject: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveMenusSB: fn(
            self: *const IShellBrowser,
            hmenuShared: HMENU,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStatusTextSB: fn(
            self: *const IShellBrowser,
            pszStatusText: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableModelessSB: fn(
            self: *const IShellBrowser,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateAcceleratorSB: fn(
            self: *const IShellBrowser,
            pmsg: *MSG,
            wID: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrowseObject: fn(
            self: *const IShellBrowser,
            pidl: *ITEMIDLIST,
            wFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewStateStream: fn(
            self: *const IShellBrowser,
            grfMode: u32,
            ppStrm: **IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetControlWindow: fn(
            self: *const IShellBrowser,
            id: u32,
            phwnd: *HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendControlMsg: fn(
            self: *const IShellBrowser,
            id: u32,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
            pret: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryActiveShellView: fn(
            self: *const IShellBrowser,
            ppshv: **IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnViewWindowActive: fn(
            self: *const IShellBrowser,
            pshv: *IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetToolbarItems: fn(
            self: *const IShellBrowser,
            lpButtons: ?[*]TBBUTTON,
            nButtons: u32,
            uFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOleWindow.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellBrowser_InsertMenusSB(self: *const T, hmenuShared: HMENU, lpMenuWidths: *OleMenuGroupWidths) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellBrowser.VTable, self.vtable).InsertMenusSB(@ptrCast(*const IShellBrowser, self), hmenuShared, lpMenuWidths);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellBrowser_SetMenuSB(self: *const T, hmenuShared: HMENU, holemenuRes: ?*c_void, hwndActiveObject: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellBrowser.VTable, self.vtable).SetMenuSB(@ptrCast(*const IShellBrowser, self), hmenuShared, holemenuRes, hwndActiveObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellBrowser_RemoveMenusSB(self: *const T, hmenuShared: HMENU) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellBrowser.VTable, self.vtable).RemoveMenusSB(@ptrCast(*const IShellBrowser, self), hmenuShared);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellBrowser_SetStatusTextSB(self: *const T, pszStatusText: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellBrowser.VTable, self.vtable).SetStatusTextSB(@ptrCast(*const IShellBrowser, self), pszStatusText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellBrowser_EnableModelessSB(self: *const T, fEnable: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellBrowser.VTable, self.vtable).EnableModelessSB(@ptrCast(*const IShellBrowser, self), fEnable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellBrowser_TranslateAcceleratorSB(self: *const T, pmsg: *MSG, wID: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellBrowser.VTable, self.vtable).TranslateAcceleratorSB(@ptrCast(*const IShellBrowser, self), pmsg, wID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellBrowser_BrowseObject(self: *const T, pidl: *ITEMIDLIST, wFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellBrowser.VTable, self.vtable).BrowseObject(@ptrCast(*const IShellBrowser, self), pidl, wFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellBrowser_GetViewStateStream(self: *const T, grfMode: u32, ppStrm: **IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellBrowser.VTable, self.vtable).GetViewStateStream(@ptrCast(*const IShellBrowser, self), grfMode, ppStrm);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellBrowser_GetControlWindow(self: *const T, id: u32, phwnd: *HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellBrowser.VTable, self.vtable).GetControlWindow(@ptrCast(*const IShellBrowser, self), id, phwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellBrowser_SendControlMsg(self: *const T, id: u32, uMsg: u32, wParam: WPARAM, lParam: LPARAM, pret: ?*LRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellBrowser.VTable, self.vtable).SendControlMsg(@ptrCast(*const IShellBrowser, self), id, uMsg, wParam, lParam, pret);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellBrowser_QueryActiveShellView(self: *const T, ppshv: **IShellView) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellBrowser.VTable, self.vtable).QueryActiveShellView(@ptrCast(*const IShellBrowser, self), ppshv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellBrowser_OnViewWindowActive(self: *const T, pshv: *IShellView) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellBrowser.VTable, self.vtable).OnViewWindowActive(@ptrCast(*const IShellBrowser, self), pshv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellBrowser_SetToolbarItems(self: *const T, lpButtons: ?[*]TBBUTTON, nButtons: u32, uFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellBrowser.VTable, self.vtable).SetToolbarItems(@ptrCast(*const IShellBrowser, self), lpButtons, nButtons, uFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IProfferService_Value = @import("../zig.zig").Guid.initString("CB728B20-F786-11CE-92AD-00AA00A74CD0");
pub const IID_IProfferService = &IID_IProfferService_Value;
pub const IProfferService = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ProfferService: fn(
            self: *const IProfferService,
            guidService: *const Guid,
            psp: *IServiceProvider,
            pdwCookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RevokeService: fn(
            self: *const IProfferService,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProfferService_ProfferService(self: *const T, guidService: *const Guid, psp: *IServiceProvider, pdwCookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProfferService.VTable, self.vtable).ProfferService(@ptrCast(*const IProfferService, self), guidService, psp, pdwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProfferService_RevokeService(self: *const T, dwCookie: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProfferService.VTable, self.vtable).RevokeService(@ptrCast(*const IProfferService, self), dwCookie);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SIGDN = extern enum(i32) {
    NORMALDISPLAY = 0,
    PARENTRELATIVEPARSING = -2147385343,
    DESKTOPABSOLUTEPARSING = -2147319808,
    PARENTRELATIVEEDITING = -2147282943,
    DESKTOPABSOLUTEEDITING = -2147172352,
    FILESYSPATH = -2147123200,
    URL = -2147057664,
    PARENTRELATIVEFORADDRESSBAR = -2146975743,
    PARENTRELATIVE = -2146959359,
    PARENTRELATIVEFORUI = -2146877439,
};
pub const SIGDN_NORMALDISPLAY = SIGDN.NORMALDISPLAY;
pub const SIGDN_PARENTRELATIVEPARSING = SIGDN.PARENTRELATIVEPARSING;
pub const SIGDN_DESKTOPABSOLUTEPARSING = SIGDN.DESKTOPABSOLUTEPARSING;
pub const SIGDN_PARENTRELATIVEEDITING = SIGDN.PARENTRELATIVEEDITING;
pub const SIGDN_DESKTOPABSOLUTEEDITING = SIGDN.DESKTOPABSOLUTEEDITING;
pub const SIGDN_FILESYSPATH = SIGDN.FILESYSPATH;
pub const SIGDN_URL = SIGDN.URL;
pub const SIGDN_PARENTRELATIVEFORADDRESSBAR = SIGDN.PARENTRELATIVEFORADDRESSBAR;
pub const SIGDN_PARENTRELATIVE = SIGDN.PARENTRELATIVE;
pub const SIGDN_PARENTRELATIVEFORUI = SIGDN.PARENTRELATIVEFORUI;

pub const _SICHINTF = extern enum(i32) {
    SICHINT_DISPLAY = 0,
    SICHINT_ALLFIELDS = -2147483648,
    SICHINT_CANONICAL = 268435456,
    SICHINT_TEST_FILESYSPATH_IF_NOT_EQUAL = 536870912,
};
pub const SICHINT_DISPLAY = _SICHINTF.SICHINT_DISPLAY;
pub const SICHINT_ALLFIELDS = _SICHINTF.SICHINT_ALLFIELDS;
pub const SICHINT_CANONICAL = _SICHINTF.SICHINT_CANONICAL;
pub const SICHINT_TEST_FILESYSPATH_IF_NOT_EQUAL = _SICHINTF.SICHINT_TEST_FILESYSPATH_IF_NOT_EQUAL;

const IID_IShellItem_Value = @import("../zig.zig").Guid.initString("43826D1E-E718-42EE-BC55-A1E261C37BFE");
pub const IID_IShellItem = &IID_IShellItem_Value;
pub const IShellItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BindToHandler: fn(
            self: *const IShellItem,
            pbc: *IBindCtx,
            bhid: *const Guid,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParent: fn(
            self: *const IShellItem,
            ppsi: **IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayName: fn(
            self: *const IShellItem,
            sigdnName: SIGDN,
            ppszName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributes: fn(
            self: *const IShellItem,
            sfgaoMask: u32,
            psfgaoAttribs: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Compare: fn(
            self: *const IShellItem,
            psi: *IShellItem,
            hint: u32,
            piOrder: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItem_BindToHandler(self: *const T, pbc: *IBindCtx, bhid: *const Guid, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItem.VTable, self.vtable).BindToHandler(@ptrCast(*const IShellItem, self), pbc, bhid, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItem_GetParent(self: *const T, ppsi: **IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItem.VTable, self.vtable).GetParent(@ptrCast(*const IShellItem, self), ppsi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItem_GetDisplayName(self: *const T, sigdnName: SIGDN, ppszName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItem.VTable, self.vtable).GetDisplayName(@ptrCast(*const IShellItem, self), sigdnName, ppszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItem_GetAttributes(self: *const T, sfgaoMask: u32, psfgaoAttribs: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItem.VTable, self.vtable).GetAttributes(@ptrCast(*const IShellItem, self), sfgaoMask, psfgaoAttribs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItem_Compare(self: *const T, psi: *IShellItem, hint: u32, piOrder: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItem.VTable, self.vtable).Compare(@ptrCast(*const IShellItem, self), psi, hint, piOrder);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DATAOBJ_GET_ITEM_FLAGS = extern enum(i32) {
    DOGIF_DEFAULT = 0,
    DOGIF_TRAVERSE_LINK = 1,
    DOGIF_NO_HDROP = 2,
    DOGIF_NO_URL = 4,
    DOGIF_ONLY_IF_ONE = 8,
};
pub const DOGIF_DEFAULT = DATAOBJ_GET_ITEM_FLAGS.DOGIF_DEFAULT;
pub const DOGIF_TRAVERSE_LINK = DATAOBJ_GET_ITEM_FLAGS.DOGIF_TRAVERSE_LINK;
pub const DOGIF_NO_HDROP = DATAOBJ_GET_ITEM_FLAGS.DOGIF_NO_HDROP;
pub const DOGIF_NO_URL = DATAOBJ_GET_ITEM_FLAGS.DOGIF_NO_URL;
pub const DOGIF_ONLY_IF_ONE = DATAOBJ_GET_ITEM_FLAGS.DOGIF_ONLY_IF_ONE;

const IID_IShellItem2_Value = @import("../zig.zig").Guid.initString("7E9FB0D3-919F-4307-AB2E-9B1860310C93");
pub const IID_IShellItem2 = &IID_IShellItem2_Value;
pub const IShellItem2 = extern struct {
    pub const VTable = extern struct {
        base: IShellItem.VTable,
        GetPropertyStore: fn(
            self: *const IShellItem2,
            flags: GETPROPERTYSTOREFLAGS,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStoreWithCreateObject: fn(
            self: *const IShellItem2,
            flags: GETPROPERTYSTOREFLAGS,
            punkCreateObject: *IUnknown,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStoreForKeys: fn(
            self: *const IShellItem2,
            rgKeys: [*]const PROPERTYKEY,
            cKeys: u32,
            flags: GETPROPERTYSTOREFLAGS,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyDescriptionList: fn(
            self: *const IShellItem2,
            keyType: *const PROPERTYKEY,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: fn(
            self: *const IShellItem2,
            pbc: *IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IShellItem2,
            key: *const PROPERTYKEY,
            ppropvar: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCLSID: fn(
            self: *const IShellItem2,
            key: *const PROPERTYKEY,
            pclsid: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileTime: fn(
            self: *const IShellItem2,
            key: *const PROPERTYKEY,
            pft: *FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInt32: fn(
            self: *const IShellItem2,
            key: *const PROPERTYKEY,
            pi: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetString: fn(
            self: *const IShellItem2,
            key: *const PROPERTYKEY,
            ppsz: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUInt32: fn(
            self: *const IShellItem2,
            key: *const PROPERTYKEY,
            pui: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUInt64: fn(
            self: *const IShellItem2,
            key: *const PROPERTYKEY,
            pull: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBool: fn(
            self: *const IShellItem2,
            key: *const PROPERTYKEY,
            pf: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IShellItem.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItem2_GetPropertyStore(self: *const T, flags: GETPROPERTYSTOREFLAGS, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItem2.VTable, self.vtable).GetPropertyStore(@ptrCast(*const IShellItem2, self), flags, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItem2_GetPropertyStoreWithCreateObject(self: *const T, flags: GETPROPERTYSTOREFLAGS, punkCreateObject: *IUnknown, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItem2.VTable, self.vtable).GetPropertyStoreWithCreateObject(@ptrCast(*const IShellItem2, self), flags, punkCreateObject, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItem2_GetPropertyStoreForKeys(self: *const T, rgKeys: [*]const PROPERTYKEY, cKeys: u32, flags: GETPROPERTYSTOREFLAGS, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItem2.VTable, self.vtable).GetPropertyStoreForKeys(@ptrCast(*const IShellItem2, self), rgKeys, cKeys, flags, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItem2_GetPropertyDescriptionList(self: *const T, keyType: *const PROPERTYKEY, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItem2.VTable, self.vtable).GetPropertyDescriptionList(@ptrCast(*const IShellItem2, self), keyType, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItem2_Update(self: *const T, pbc: *IBindCtx) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItem2.VTable, self.vtable).Update(@ptrCast(*const IShellItem2, self), pbc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItem2_GetProperty(self: *const T, key: *const PROPERTYKEY, ppropvar: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItem2.VTable, self.vtable).GetProperty(@ptrCast(*const IShellItem2, self), key, ppropvar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItem2_GetCLSID(self: *const T, key: *const PROPERTYKEY, pclsid: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItem2.VTable, self.vtable).GetCLSID(@ptrCast(*const IShellItem2, self), key, pclsid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItem2_GetFileTime(self: *const T, key: *const PROPERTYKEY, pft: *FILETIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItem2.VTable, self.vtable).GetFileTime(@ptrCast(*const IShellItem2, self), key, pft);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItem2_GetInt32(self: *const T, key: *const PROPERTYKEY, pi: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItem2.VTable, self.vtable).GetInt32(@ptrCast(*const IShellItem2, self), key, pi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItem2_GetString(self: *const T, key: *const PROPERTYKEY, ppsz: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItem2.VTable, self.vtable).GetString(@ptrCast(*const IShellItem2, self), key, ppsz);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItem2_GetUInt32(self: *const T, key: *const PROPERTYKEY, pui: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItem2.VTable, self.vtable).GetUInt32(@ptrCast(*const IShellItem2, self), key, pui);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItem2_GetUInt64(self: *const T, key: *const PROPERTYKEY, pull: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItem2.VTable, self.vtable).GetUInt64(@ptrCast(*const IShellItem2, self), key, pull);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItem2_GetBool(self: *const T, key: *const PROPERTYKEY, pf: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItem2.VTable, self.vtable).GetBool(@ptrCast(*const IShellItem2, self), key, pf);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _SIIGBF = extern enum(i32) {
    SIIGBF_RESIZETOFIT = 0,
    SIIGBF_BIGGERSIZEOK = 1,
    SIIGBF_MEMORYONLY = 2,
    SIIGBF_ICONONLY = 4,
    SIIGBF_THUMBNAILONLY = 8,
    SIIGBF_INCACHEONLY = 16,
    SIIGBF_CROPTOSQUARE = 32,
    SIIGBF_WIDETHUMBNAILS = 64,
    SIIGBF_ICONBACKGROUND = 128,
    SIIGBF_SCALEUP = 256,
};
pub const SIIGBF_RESIZETOFIT = _SIIGBF.SIIGBF_RESIZETOFIT;
pub const SIIGBF_BIGGERSIZEOK = _SIIGBF.SIIGBF_BIGGERSIZEOK;
pub const SIIGBF_MEMORYONLY = _SIIGBF.SIIGBF_MEMORYONLY;
pub const SIIGBF_ICONONLY = _SIIGBF.SIIGBF_ICONONLY;
pub const SIIGBF_THUMBNAILONLY = _SIIGBF.SIIGBF_THUMBNAILONLY;
pub const SIIGBF_INCACHEONLY = _SIIGBF.SIIGBF_INCACHEONLY;
pub const SIIGBF_CROPTOSQUARE = _SIIGBF.SIIGBF_CROPTOSQUARE;
pub const SIIGBF_WIDETHUMBNAILS = _SIIGBF.SIIGBF_WIDETHUMBNAILS;
pub const SIIGBF_ICONBACKGROUND = _SIIGBF.SIIGBF_ICONBACKGROUND;
pub const SIIGBF_SCALEUP = _SIIGBF.SIIGBF_SCALEUP;

const IID_IShellItemImageFactory_Value = @import("../zig.zig").Guid.initString("BCC18B79-BA16-442F-80C4-8A59C30C463B");
pub const IID_IShellItemImageFactory = &IID_IShellItemImageFactory_Value;
pub const IShellItemImageFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetImage: fn(
            self: *const IShellItemImageFactory,
            size: SIZE,
            flags: i32,
            phbm: *HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemImageFactory_GetImage(self: *const T, size: SIZE, flags: i32, phbm: *HBITMAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemImageFactory.VTable, self.vtable).GetImage(@ptrCast(*const IShellItemImageFactory, self), size, flags, phbm);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumShellItems_Value = @import("../zig.zig").Guid.initString("70629033-E363-4A28-A567-0DB78006E6D7");
pub const IID_IEnumShellItems = &IID_IEnumShellItems_Value;
pub const IEnumShellItems = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumShellItems,
            celt: u32,
            rgelt: [*]*IShellItem,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumShellItems,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumShellItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumShellItems,
            ppenum: **IEnumShellItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumShellItems_Next(self: *const T, celt: u32, rgelt: [*]*IShellItem, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumShellItems.VTable, self.vtable).Next(@ptrCast(*const IEnumShellItems, self), celt, rgelt, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumShellItems_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumShellItems.VTable, self.vtable).Skip(@ptrCast(*const IEnumShellItems, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumShellItems_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumShellItems.VTable, self.vtable).Reset(@ptrCast(*const IEnumShellItems, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumShellItems_Clone(self: *const T, ppenum: **IEnumShellItems) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumShellItems.VTable, self.vtable).Clone(@ptrCast(*const IEnumShellItems, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const STGOP = extern enum(i32) {
    MOVE = 1,
    COPY = 2,
    SYNC = 3,
    REMOVE = 5,
    RENAME = 6,
    APPLYPROPERTIES = 8,
    NEW = 10,
};
pub const STGOP_MOVE = STGOP.MOVE;
pub const STGOP_COPY = STGOP.COPY;
pub const STGOP_SYNC = STGOP.SYNC;
pub const STGOP_REMOVE = STGOP.REMOVE;
pub const STGOP_RENAME = STGOP.RENAME;
pub const STGOP_APPLYPROPERTIES = STGOP.APPLYPROPERTIES;
pub const STGOP_NEW = STGOP.NEW;

pub const _TRANSFER_SOURCE_FLAGS = extern enum(i32) {
    TSF_NORMAL = 0,
    TSF_FAIL_EXIST = 0,
    TSF_RENAME_EXIST = 1,
    TSF_OVERWRITE_EXIST = 2,
    TSF_ALLOW_DECRYPTION = 4,
    TSF_NO_SECURITY = 8,
    TSF_COPY_CREATION_TIME = 16,
    TSF_COPY_WRITE_TIME = 32,
    TSF_USE_FULL_ACCESS = 64,
    TSF_DELETE_RECYCLE_IF_POSSIBLE = 128,
    TSF_COPY_HARD_LINK = 256,
    TSF_COPY_LOCALIZED_NAME = 512,
    TSF_MOVE_AS_COPY_DELETE = 1024,
    TSF_SUSPEND_SHELLEVENTS = 2048,
};
pub const TSF_NORMAL = _TRANSFER_SOURCE_FLAGS.TSF_NORMAL;
pub const TSF_FAIL_EXIST = _TRANSFER_SOURCE_FLAGS.TSF_FAIL_EXIST;
pub const TSF_RENAME_EXIST = _TRANSFER_SOURCE_FLAGS.TSF_RENAME_EXIST;
pub const TSF_OVERWRITE_EXIST = _TRANSFER_SOURCE_FLAGS.TSF_OVERWRITE_EXIST;
pub const TSF_ALLOW_DECRYPTION = _TRANSFER_SOURCE_FLAGS.TSF_ALLOW_DECRYPTION;
pub const TSF_NO_SECURITY = _TRANSFER_SOURCE_FLAGS.TSF_NO_SECURITY;
pub const TSF_COPY_CREATION_TIME = _TRANSFER_SOURCE_FLAGS.TSF_COPY_CREATION_TIME;
pub const TSF_COPY_WRITE_TIME = _TRANSFER_SOURCE_FLAGS.TSF_COPY_WRITE_TIME;
pub const TSF_USE_FULL_ACCESS = _TRANSFER_SOURCE_FLAGS.TSF_USE_FULL_ACCESS;
pub const TSF_DELETE_RECYCLE_IF_POSSIBLE = _TRANSFER_SOURCE_FLAGS.TSF_DELETE_RECYCLE_IF_POSSIBLE;
pub const TSF_COPY_HARD_LINK = _TRANSFER_SOURCE_FLAGS.TSF_COPY_HARD_LINK;
pub const TSF_COPY_LOCALIZED_NAME = _TRANSFER_SOURCE_FLAGS.TSF_COPY_LOCALIZED_NAME;
pub const TSF_MOVE_AS_COPY_DELETE = _TRANSFER_SOURCE_FLAGS.TSF_MOVE_AS_COPY_DELETE;
pub const TSF_SUSPEND_SHELLEVENTS = _TRANSFER_SOURCE_FLAGS.TSF_SUSPEND_SHELLEVENTS;

pub const _TRANSFER_ADVISE_STATE = extern enum(i32) {
    TS_NONE = 0,
    TS_PERFORMING = 1,
    TS_PREPARING = 2,
    TS_INDETERMINATE = 4,
};
pub const TS_NONE = _TRANSFER_ADVISE_STATE.TS_NONE;
pub const TS_PERFORMING = _TRANSFER_ADVISE_STATE.TS_PERFORMING;
pub const TS_PREPARING = _TRANSFER_ADVISE_STATE.TS_PREPARING;
pub const TS_INDETERMINATE = _TRANSFER_ADVISE_STATE.TS_INDETERMINATE;

const IID_ITransferAdviseSink_Value = @import("../zig.zig").Guid.initString("D594D0D8-8DA7-457B-B3B4-CE5DBAAC0B88");
pub const IID_ITransferAdviseSink = &IID_ITransferAdviseSink_Value;
pub const ITransferAdviseSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UpdateProgress: fn(
            self: *const ITransferAdviseSink,
            ullSizeCurrent: u64,
            ullSizeTotal: u64,
            nFilesCurrent: i32,
            nFilesTotal: i32,
            nFoldersCurrent: i32,
            nFoldersTotal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateTransferState: fn(
            self: *const ITransferAdviseSink,
            ts: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConfirmOverwrite: fn(
            self: *const ITransferAdviseSink,
            psiSource: *IShellItem,
            psiDestParent: *IShellItem,
            pszName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConfirmEncryptionLoss: fn(
            self: *const ITransferAdviseSink,
            psiSource: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FileFailure: fn(
            self: *const ITransferAdviseSink,
            psi: *IShellItem,
            pszItem: [*:0]const u16,
            hrError: HRESULT,
            pszRename: [*:0]u16,
            cchRename: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SubStreamFailure: fn(
            self: *const ITransferAdviseSink,
            psi: *IShellItem,
            pszStreamName: [*:0]const u16,
            hrError: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PropertyFailure: fn(
            self: *const ITransferAdviseSink,
            psi: *IShellItem,
            pkey: *const PROPERTYKEY,
            hrError: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferAdviseSink_UpdateProgress(self: *const T, ullSizeCurrent: u64, ullSizeTotal: u64, nFilesCurrent: i32, nFilesTotal: i32, nFoldersCurrent: i32, nFoldersTotal: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferAdviseSink.VTable, self.vtable).UpdateProgress(@ptrCast(*const ITransferAdviseSink, self), ullSizeCurrent, ullSizeTotal, nFilesCurrent, nFilesTotal, nFoldersCurrent, nFoldersTotal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferAdviseSink_UpdateTransferState(self: *const T, ts: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferAdviseSink.VTable, self.vtable).UpdateTransferState(@ptrCast(*const ITransferAdviseSink, self), ts);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferAdviseSink_ConfirmOverwrite(self: *const T, psiSource: *IShellItem, psiDestParent: *IShellItem, pszName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferAdviseSink.VTable, self.vtable).ConfirmOverwrite(@ptrCast(*const ITransferAdviseSink, self), psiSource, psiDestParent, pszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferAdviseSink_ConfirmEncryptionLoss(self: *const T, psiSource: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferAdviseSink.VTable, self.vtable).ConfirmEncryptionLoss(@ptrCast(*const ITransferAdviseSink, self), psiSource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferAdviseSink_FileFailure(self: *const T, psi: *IShellItem, pszItem: [*:0]const u16, hrError: HRESULT, pszRename: [*:0]u16, cchRename: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferAdviseSink.VTable, self.vtable).FileFailure(@ptrCast(*const ITransferAdviseSink, self), psi, pszItem, hrError, pszRename, cchRename);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferAdviseSink_SubStreamFailure(self: *const T, psi: *IShellItem, pszStreamName: [*:0]const u16, hrError: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferAdviseSink.VTable, self.vtable).SubStreamFailure(@ptrCast(*const ITransferAdviseSink, self), psi, pszStreamName, hrError);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferAdviseSink_PropertyFailure(self: *const T, psi: *IShellItem, pkey: *const PROPERTYKEY, hrError: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferAdviseSink.VTable, self.vtable).PropertyFailure(@ptrCast(*const ITransferAdviseSink, self), psi, pkey, hrError);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransferSource_Value = @import("../zig.zig").Guid.initString("00ADB003-BDE9-45C6-8E29-D09F9353E108");
pub const IID_ITransferSource = &IID_ITransferSource_Value;
pub const ITransferSource = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: fn(
            self: *const ITransferSource,
            psink: *ITransferAdviseSink,
            pdwCookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: fn(
            self: *const ITransferSource,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperties: fn(
            self: *const ITransferSource,
            pproparray: *IPropertyChangeArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenItem: fn(
            self: *const ITransferSource,
            psi: *IShellItem,
            flags: u32,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveItem: fn(
            self: *const ITransferSource,
            psi: *IShellItem,
            psiParentDst: *IShellItem,
            pszNameDst: [*:0]const u16,
            flags: u32,
            ppsiNew: **IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RecycleItem: fn(
            self: *const ITransferSource,
            psiSource: *IShellItem,
            psiParentDest: *IShellItem,
            flags: u32,
            ppsiNewDest: **IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveItem: fn(
            self: *const ITransferSource,
            psiSource: *IShellItem,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenameItem: fn(
            self: *const ITransferSource,
            psiSource: *IShellItem,
            pszNewName: [*:0]const u16,
            flags: u32,
            ppsiNewDest: **IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LinkItem: fn(
            self: *const ITransferSource,
            psiSource: *IShellItem,
            psiParentDest: *IShellItem,
            pszNewName: ?[*:0]const u16,
            flags: u32,
            ppsiNewDest: **IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ApplyPropertiesToItem: fn(
            self: *const ITransferSource,
            psiSource: *IShellItem,
            ppsiNew: **IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultDestinationName: fn(
            self: *const ITransferSource,
            psiSource: *IShellItem,
            psiParentDest: *IShellItem,
            ppszDestinationName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnterFolder: fn(
            self: *const ITransferSource,
            psiChildFolderDest: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LeaveFolder: fn(
            self: *const ITransferSource,
            psiChildFolderDest: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferSource_Advise(self: *const T, psink: *ITransferAdviseSink, pdwCookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferSource.VTable, self.vtable).Advise(@ptrCast(*const ITransferSource, self), psink, pdwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferSource_Unadvise(self: *const T, dwCookie: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferSource.VTable, self.vtable).Unadvise(@ptrCast(*const ITransferSource, self), dwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferSource_SetProperties(self: *const T, pproparray: *IPropertyChangeArray) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferSource.VTable, self.vtable).SetProperties(@ptrCast(*const ITransferSource, self), pproparray);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferSource_OpenItem(self: *const T, psi: *IShellItem, flags: u32, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferSource.VTable, self.vtable).OpenItem(@ptrCast(*const ITransferSource, self), psi, flags, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferSource_MoveItem(self: *const T, psi: *IShellItem, psiParentDst: *IShellItem, pszNameDst: [*:0]const u16, flags: u32, ppsiNew: **IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferSource.VTable, self.vtable).MoveItem(@ptrCast(*const ITransferSource, self), psi, psiParentDst, pszNameDst, flags, ppsiNew);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferSource_RecycleItem(self: *const T, psiSource: *IShellItem, psiParentDest: *IShellItem, flags: u32, ppsiNewDest: **IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferSource.VTable, self.vtable).RecycleItem(@ptrCast(*const ITransferSource, self), psiSource, psiParentDest, flags, ppsiNewDest);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferSource_RemoveItem(self: *const T, psiSource: *IShellItem, flags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferSource.VTable, self.vtable).RemoveItem(@ptrCast(*const ITransferSource, self), psiSource, flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferSource_RenameItem(self: *const T, psiSource: *IShellItem, pszNewName: [*:0]const u16, flags: u32, ppsiNewDest: **IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferSource.VTable, self.vtable).RenameItem(@ptrCast(*const ITransferSource, self), psiSource, pszNewName, flags, ppsiNewDest);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferSource_LinkItem(self: *const T, psiSource: *IShellItem, psiParentDest: *IShellItem, pszNewName: ?[*:0]const u16, flags: u32, ppsiNewDest: **IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferSource.VTable, self.vtable).LinkItem(@ptrCast(*const ITransferSource, self), psiSource, psiParentDest, pszNewName, flags, ppsiNewDest);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferSource_ApplyPropertiesToItem(self: *const T, psiSource: *IShellItem, ppsiNew: **IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferSource.VTable, self.vtable).ApplyPropertiesToItem(@ptrCast(*const ITransferSource, self), psiSource, ppsiNew);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferSource_GetDefaultDestinationName(self: *const T, psiSource: *IShellItem, psiParentDest: *IShellItem, ppszDestinationName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferSource.VTable, self.vtable).GetDefaultDestinationName(@ptrCast(*const ITransferSource, self), psiSource, psiParentDest, ppszDestinationName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferSource_EnterFolder(self: *const T, psiChildFolderDest: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferSource.VTable, self.vtable).EnterFolder(@ptrCast(*const ITransferSource, self), psiChildFolderDest);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferSource_LeaveFolder(self: *const T, psiChildFolderDest: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferSource.VTable, self.vtable).LeaveFolder(@ptrCast(*const ITransferSource, self), psiChildFolderDest);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SHELL_ITEM_RESOURCE = extern struct {
    guidType: Guid,
    szName: [260]u16,
};

const IID_IEnumResources_Value = @import("../zig.zig").Guid.initString("2DD81FE3-A83C-4DA9-A330-47249D345BA1");
pub const IID_IEnumResources = &IID_IEnumResources_Value;
pub const IEnumResources = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumResources,
            celt: u32,
            psir: [*]SHELL_ITEM_RESOURCE,
            pceltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumResources,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumResources,
            ppenumr: **IEnumResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumResources_Next(self: *const T, celt: u32, psir: [*]SHELL_ITEM_RESOURCE, pceltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumResources.VTable, self.vtable).Next(@ptrCast(*const IEnumResources, self), celt, psir, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumResources_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumResources.VTable, self.vtable).Skip(@ptrCast(*const IEnumResources, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumResources_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumResources.VTable, self.vtable).Reset(@ptrCast(*const IEnumResources, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumResources_Clone(self: *const T, ppenumr: **IEnumResources) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumResources.VTable, self.vtable).Clone(@ptrCast(*const IEnumResources, self), ppenumr);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellItemResources_Value = @import("../zig.zig").Guid.initString("FF5693BE-2CE0-4D48-B5C5-40817D1ACDB9");
pub const IID_IShellItemResources = &IID_IShellItemResources_Value;
pub const IShellItemResources = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAttributes: fn(
            self: *const IShellItemResources,
            pdwAttributes: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: fn(
            self: *const IShellItemResources,
            pullSize: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTimes: fn(
            self: *const IShellItemResources,
            pftCreation: *FILETIME,
            pftWrite: *FILETIME,
            pftAccess: *FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTimes: fn(
            self: *const IShellItemResources,
            pftCreation: *const FILETIME,
            pftWrite: *const FILETIME,
            pftAccess: *const FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResourceDescription: fn(
            self: *const IShellItemResources,
            pcsir: *const SHELL_ITEM_RESOURCE,
            ppszDescription: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumResources: fn(
            self: *const IShellItemResources,
            ppenumr: **IEnumResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SupportsResource: fn(
            self: *const IShellItemResources,
            pcsir: *const SHELL_ITEM_RESOURCE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenResource: fn(
            self: *const IShellItemResources,
            pcsir: *const SHELL_ITEM_RESOURCE,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateResource: fn(
            self: *const IShellItemResources,
            pcsir: *const SHELL_ITEM_RESOURCE,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MarkForDelete: fn(
            self: *const IShellItemResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemResources_GetAttributes(self: *const T, pdwAttributes: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemResources.VTable, self.vtable).GetAttributes(@ptrCast(*const IShellItemResources, self), pdwAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemResources_GetSize(self: *const T, pullSize: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemResources.VTable, self.vtable).GetSize(@ptrCast(*const IShellItemResources, self), pullSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemResources_GetTimes(self: *const T, pftCreation: *FILETIME, pftWrite: *FILETIME, pftAccess: *FILETIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemResources.VTable, self.vtable).GetTimes(@ptrCast(*const IShellItemResources, self), pftCreation, pftWrite, pftAccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemResources_SetTimes(self: *const T, pftCreation: *const FILETIME, pftWrite: *const FILETIME, pftAccess: *const FILETIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemResources.VTable, self.vtable).SetTimes(@ptrCast(*const IShellItemResources, self), pftCreation, pftWrite, pftAccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemResources_GetResourceDescription(self: *const T, pcsir: *const SHELL_ITEM_RESOURCE, ppszDescription: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemResources.VTable, self.vtable).GetResourceDescription(@ptrCast(*const IShellItemResources, self), pcsir, ppszDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemResources_EnumResources(self: *const T, ppenumr: **IEnumResources) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemResources.VTable, self.vtable).EnumResources(@ptrCast(*const IShellItemResources, self), ppenumr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemResources_SupportsResource(self: *const T, pcsir: *const SHELL_ITEM_RESOURCE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemResources.VTable, self.vtable).SupportsResource(@ptrCast(*const IShellItemResources, self), pcsir);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemResources_OpenResource(self: *const T, pcsir: *const SHELL_ITEM_RESOURCE, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemResources.VTable, self.vtable).OpenResource(@ptrCast(*const IShellItemResources, self), pcsir, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemResources_CreateResource(self: *const T, pcsir: *const SHELL_ITEM_RESOURCE, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemResources.VTable, self.vtable).CreateResource(@ptrCast(*const IShellItemResources, self), pcsir, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemResources_MarkForDelete(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemResources.VTable, self.vtable).MarkForDelete(@ptrCast(*const IShellItemResources, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransferDestination_Value = @import("../zig.zig").Guid.initString("48ADDD32-3CA5-4124-ABE3-B5A72531B207");
pub const IID_ITransferDestination = &IID_ITransferDestination_Value;
pub const ITransferDestination = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: fn(
            self: *const ITransferDestination,
            psink: *ITransferAdviseSink,
            pdwCookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: fn(
            self: *const ITransferDestination,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateItem: fn(
            self: *const ITransferDestination,
            pszName: [*:0]const u16,
            dwAttributes: u32,
            ullSize: u64,
            flags: u32,
            riidItem: *const Guid,
            ppvItem: **c_void,
            riidResources: *const Guid,
            ppvResources: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferDestination_Advise(self: *const T, psink: *ITransferAdviseSink, pdwCookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferDestination.VTable, self.vtable).Advise(@ptrCast(*const ITransferDestination, self), psink, pdwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferDestination_Unadvise(self: *const T, dwCookie: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferDestination.VTable, self.vtable).Unadvise(@ptrCast(*const ITransferDestination, self), dwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransferDestination_CreateItem(self: *const T, pszName: [*:0]const u16, dwAttributes: u32, ullSize: u64, flags: u32, riidItem: *const Guid, ppvItem: **c_void, riidResources: *const Guid, ppvResources: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransferDestination.VTable, self.vtable).CreateItem(@ptrCast(*const ITransferDestination, self), pszName, dwAttributes, ullSize, flags, riidItem, ppvItem, riidResources, ppvResources);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFileOperationProgressSink_Value = @import("../zig.zig").Guid.initString("04B0F1A7-9490-44BC-96E1-4296A31252E2");
pub const IID_IFileOperationProgressSink = &IID_IFileOperationProgressSink_Value;
pub const IFileOperationProgressSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartOperations: fn(
            self: *const IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FinishOperations: fn(
            self: *const IFileOperationProgressSink,
            hrResult: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreRenameItem: fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiItem: *IShellItem,
            pszNewName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostRenameItem: fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiItem: *IShellItem,
            pszNewName: [*:0]const u16,
            hrRename: HRESULT,
            psiNewlyCreated: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreMoveItem: fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiItem: *IShellItem,
            psiDestinationFolder: *IShellItem,
            pszNewName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostMoveItem: fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiItem: *IShellItem,
            psiDestinationFolder: *IShellItem,
            pszNewName: [*:0]const u16,
            hrMove: HRESULT,
            psiNewlyCreated: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreCopyItem: fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiItem: *IShellItem,
            psiDestinationFolder: *IShellItem,
            pszNewName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostCopyItem: fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiItem: *IShellItem,
            psiDestinationFolder: *IShellItem,
            pszNewName: [*:0]const u16,
            hrCopy: HRESULT,
            psiNewlyCreated: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreDeleteItem: fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiItem: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostDeleteItem: fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiItem: *IShellItem,
            hrDelete: HRESULT,
            psiNewlyCreated: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreNewItem: fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiDestinationFolder: *IShellItem,
            pszNewName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostNewItem: fn(
            self: *const IFileOperationProgressSink,
            dwFlags: u32,
            psiDestinationFolder: *IShellItem,
            pszNewName: [*:0]const u16,
            pszTemplateName: [*:0]const u16,
            dwFileAttributes: u32,
            hrNew: HRESULT,
            psiNewItem: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateProgress: fn(
            self: *const IFileOperationProgressSink,
            iWorkTotal: u32,
            iWorkSoFar: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetTimer: fn(
            self: *const IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PauseTimer: fn(
            self: *const IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResumeTimer: fn(
            self: *const IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperationProgressSink_StartOperations(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperationProgressSink.VTable, self.vtable).StartOperations(@ptrCast(*const IFileOperationProgressSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperationProgressSink_FinishOperations(self: *const T, hrResult: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperationProgressSink.VTable, self.vtable).FinishOperations(@ptrCast(*const IFileOperationProgressSink, self), hrResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperationProgressSink_PreRenameItem(self: *const T, dwFlags: u32, psiItem: *IShellItem, pszNewName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperationProgressSink.VTable, self.vtable).PreRenameItem(@ptrCast(*const IFileOperationProgressSink, self), dwFlags, psiItem, pszNewName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperationProgressSink_PostRenameItem(self: *const T, dwFlags: u32, psiItem: *IShellItem, pszNewName: [*:0]const u16, hrRename: HRESULT, psiNewlyCreated: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperationProgressSink.VTable, self.vtable).PostRenameItem(@ptrCast(*const IFileOperationProgressSink, self), dwFlags, psiItem, pszNewName, hrRename, psiNewlyCreated);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperationProgressSink_PreMoveItem(self: *const T, dwFlags: u32, psiItem: *IShellItem, psiDestinationFolder: *IShellItem, pszNewName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperationProgressSink.VTable, self.vtable).PreMoveItem(@ptrCast(*const IFileOperationProgressSink, self), dwFlags, psiItem, psiDestinationFolder, pszNewName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperationProgressSink_PostMoveItem(self: *const T, dwFlags: u32, psiItem: *IShellItem, psiDestinationFolder: *IShellItem, pszNewName: [*:0]const u16, hrMove: HRESULT, psiNewlyCreated: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperationProgressSink.VTable, self.vtable).PostMoveItem(@ptrCast(*const IFileOperationProgressSink, self), dwFlags, psiItem, psiDestinationFolder, pszNewName, hrMove, psiNewlyCreated);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperationProgressSink_PreCopyItem(self: *const T, dwFlags: u32, psiItem: *IShellItem, psiDestinationFolder: *IShellItem, pszNewName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperationProgressSink.VTable, self.vtable).PreCopyItem(@ptrCast(*const IFileOperationProgressSink, self), dwFlags, psiItem, psiDestinationFolder, pszNewName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperationProgressSink_PostCopyItem(self: *const T, dwFlags: u32, psiItem: *IShellItem, psiDestinationFolder: *IShellItem, pszNewName: [*:0]const u16, hrCopy: HRESULT, psiNewlyCreated: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperationProgressSink.VTable, self.vtable).PostCopyItem(@ptrCast(*const IFileOperationProgressSink, self), dwFlags, psiItem, psiDestinationFolder, pszNewName, hrCopy, psiNewlyCreated);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperationProgressSink_PreDeleteItem(self: *const T, dwFlags: u32, psiItem: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperationProgressSink.VTable, self.vtable).PreDeleteItem(@ptrCast(*const IFileOperationProgressSink, self), dwFlags, psiItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperationProgressSink_PostDeleteItem(self: *const T, dwFlags: u32, psiItem: *IShellItem, hrDelete: HRESULT, psiNewlyCreated: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperationProgressSink.VTable, self.vtable).PostDeleteItem(@ptrCast(*const IFileOperationProgressSink, self), dwFlags, psiItem, hrDelete, psiNewlyCreated);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperationProgressSink_PreNewItem(self: *const T, dwFlags: u32, psiDestinationFolder: *IShellItem, pszNewName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperationProgressSink.VTable, self.vtable).PreNewItem(@ptrCast(*const IFileOperationProgressSink, self), dwFlags, psiDestinationFolder, pszNewName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperationProgressSink_PostNewItem(self: *const T, dwFlags: u32, psiDestinationFolder: *IShellItem, pszNewName: [*:0]const u16, pszTemplateName: [*:0]const u16, dwFileAttributes: u32, hrNew: HRESULT, psiNewItem: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperationProgressSink.VTable, self.vtable).PostNewItem(@ptrCast(*const IFileOperationProgressSink, self), dwFlags, psiDestinationFolder, pszNewName, pszTemplateName, dwFileAttributes, hrNew, psiNewItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperationProgressSink_UpdateProgress(self: *const T, iWorkTotal: u32, iWorkSoFar: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperationProgressSink.VTable, self.vtable).UpdateProgress(@ptrCast(*const IFileOperationProgressSink, self), iWorkTotal, iWorkSoFar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperationProgressSink_ResetTimer(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperationProgressSink.VTable, self.vtable).ResetTimer(@ptrCast(*const IFileOperationProgressSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperationProgressSink_PauseTimer(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperationProgressSink.VTable, self.vtable).PauseTimer(@ptrCast(*const IFileOperationProgressSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperationProgressSink_ResumeTimer(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperationProgressSink.VTable, self.vtable).ResumeTimer(@ptrCast(*const IFileOperationProgressSink, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SIATTRIBFLAGS = extern enum(i32) {
    AND = 1,
    OR = 2,
    APPCOMPAT = 3,
    MASK = 3,
    ALLITEMS = 16384,
};
pub const SIATTRIBFLAGS_AND = SIATTRIBFLAGS.AND;
pub const SIATTRIBFLAGS_OR = SIATTRIBFLAGS.OR;
pub const SIATTRIBFLAGS_APPCOMPAT = SIATTRIBFLAGS.APPCOMPAT;
pub const SIATTRIBFLAGS_MASK = SIATTRIBFLAGS.MASK;
pub const SIATTRIBFLAGS_ALLITEMS = SIATTRIBFLAGS.ALLITEMS;

const IID_IShellItemArray_Value = @import("../zig.zig").Guid.initString("B63EA76D-1F85-456F-A19C-48159EFA858B");
pub const IID_IShellItemArray = &IID_IShellItemArray_Value;
pub const IShellItemArray = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BindToHandler: fn(
            self: *const IShellItemArray,
            pbc: *IBindCtx,
            bhid: *const Guid,
            riid: *const Guid,
            ppvOut: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStore: fn(
            self: *const IShellItemArray,
            flags: GETPROPERTYSTOREFLAGS,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyDescriptionList: fn(
            self: *const IShellItemArray,
            keyType: *const PROPERTYKEY,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributes: fn(
            self: *const IShellItemArray,
            AttribFlags: SIATTRIBFLAGS,
            sfgaoMask: u32,
            psfgaoAttribs: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: fn(
            self: *const IShellItemArray,
            pdwNumItems: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemAt: fn(
            self: *const IShellItemArray,
            dwIndex: u32,
            ppsi: **IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumItems: fn(
            self: *const IShellItemArray,
            ppenumShellItems: **IEnumShellItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemArray_BindToHandler(self: *const T, pbc: *IBindCtx, bhid: *const Guid, riid: *const Guid, ppvOut: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemArray.VTable, self.vtable).BindToHandler(@ptrCast(*const IShellItemArray, self), pbc, bhid, riid, ppvOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemArray_GetPropertyStore(self: *const T, flags: GETPROPERTYSTOREFLAGS, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemArray.VTable, self.vtable).GetPropertyStore(@ptrCast(*const IShellItemArray, self), flags, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemArray_GetPropertyDescriptionList(self: *const T, keyType: *const PROPERTYKEY, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemArray.VTable, self.vtable).GetPropertyDescriptionList(@ptrCast(*const IShellItemArray, self), keyType, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemArray_GetAttributes(self: *const T, AttribFlags: SIATTRIBFLAGS, sfgaoMask: u32, psfgaoAttribs: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemArray.VTable, self.vtable).GetAttributes(@ptrCast(*const IShellItemArray, self), AttribFlags, sfgaoMask, psfgaoAttribs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemArray_GetCount(self: *const T, pdwNumItems: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemArray.VTable, self.vtable).GetCount(@ptrCast(*const IShellItemArray, self), pdwNumItems);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemArray_GetItemAt(self: *const T, dwIndex: u32, ppsi: **IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemArray.VTable, self.vtable).GetItemAt(@ptrCast(*const IShellItemArray, self), dwIndex, ppsi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemArray_EnumItems(self: *const T, ppenumShellItems: **IEnumShellItems) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemArray.VTable, self.vtable).EnumItems(@ptrCast(*const IShellItemArray, self), ppenumShellItems);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInitializeWithItem_Value = @import("../zig.zig").Guid.initString("7F73BE3F-FB79-493C-A6C7-7EE14E245841");
pub const IID_IInitializeWithItem = &IID_IInitializeWithItem_Value;
pub const IInitializeWithItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IInitializeWithItem,
            psi: *IShellItem,
            grfMode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInitializeWithItem_Initialize(self: *const T, psi: *IShellItem, grfMode: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInitializeWithItem.VTable, self.vtable).Initialize(@ptrCast(*const IInitializeWithItem, self), psi, grfMode);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjectWithSelection_Value = @import("../zig.zig").Guid.initString("1C9CD5BB-98E9-4491-A60F-31AACC72B83C");
pub const IID_IObjectWithSelection = &IID_IObjectWithSelection_Value;
pub const IObjectWithSelection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetSelection: fn(
            self: *const IObjectWithSelection,
            psia: *IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelection: fn(
            self: *const IObjectWithSelection,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectWithSelection_SetSelection(self: *const T, psia: *IShellItemArray) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectWithSelection.VTable, self.vtable).SetSelection(@ptrCast(*const IObjectWithSelection, self), psia);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectWithSelection_GetSelection(self: *const T, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectWithSelection.VTable, self.vtable).GetSelection(@ptrCast(*const IObjectWithSelection, self), riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjectWithBackReferences_Value = @import("../zig.zig").Guid.initString("321A6A6A-D61F-4BF3-97AE-14BE2986BB36");
pub const IID_IObjectWithBackReferences = &IID_IObjectWithBackReferences_Value;
pub const IObjectWithBackReferences = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RemoveBackReferences: fn(
            self: *const IObjectWithBackReferences,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectWithBackReferences_RemoveBackReferences(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectWithBackReferences.VTable, self.vtable).RemoveBackReferences(@ptrCast(*const IObjectWithBackReferences, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _PROPERTYUI_NAME_FLAGS = extern enum(i32) {
    PUIFNF_DEFAULT = 0,
    PUIFNF_MNEMONIC = 1,
};
pub const PUIFNF_DEFAULT = _PROPERTYUI_NAME_FLAGS.PUIFNF_DEFAULT;
pub const PUIFNF_MNEMONIC = _PROPERTYUI_NAME_FLAGS.PUIFNF_MNEMONIC;

pub const _PROPERTYUI_FORMAT_FLAGS = extern enum(i32) {
    PUIFFDF_DEFAULT = 0,
    PUIFFDF_RIGHTTOLEFT = 1,
    PUIFFDF_SHORTFORMAT = 2,
    PUIFFDF_NOTIME = 4,
    PUIFFDF_FRIENDLYDATE = 8,
};
pub const PUIFFDF_DEFAULT = _PROPERTYUI_FORMAT_FLAGS.PUIFFDF_DEFAULT;
pub const PUIFFDF_RIGHTTOLEFT = _PROPERTYUI_FORMAT_FLAGS.PUIFFDF_RIGHTTOLEFT;
pub const PUIFFDF_SHORTFORMAT = _PROPERTYUI_FORMAT_FLAGS.PUIFFDF_SHORTFORMAT;
pub const PUIFFDF_NOTIME = _PROPERTYUI_FORMAT_FLAGS.PUIFFDF_NOTIME;
pub const PUIFFDF_FRIENDLYDATE = _PROPERTYUI_FORMAT_FLAGS.PUIFFDF_FRIENDLYDATE;

const IID_ICategoryProvider_Value = @import("../zig.zig").Guid.initString("9AF64809-5864-4C26-A720-C1F78C086EE3");
pub const IID_ICategoryProvider = &IID_ICategoryProvider_Value;
pub const ICategoryProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CanCategorizeOnSCID: fn(
            self: *const ICategoryProvider,
            pscid: *const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultCategory: fn(
            self: *const ICategoryProvider,
            pguid: *Guid,
            pscid: *PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategoryForSCID: fn(
            self: *const ICategoryProvider,
            pscid: *const PROPERTYKEY,
            pguid: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCategories: fn(
            self: *const ICategoryProvider,
            penum: **IEnumGUID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategoryName: fn(
            self: *const ICategoryProvider,
            pguid: *const Guid,
            pszName: [*:0]u16,
            cch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCategory: fn(
            self: *const ICategoryProvider,
            pguid: *const Guid,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICategoryProvider_CanCategorizeOnSCID(self: *const T, pscid: *const PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICategoryProvider.VTable, self.vtable).CanCategorizeOnSCID(@ptrCast(*const ICategoryProvider, self), pscid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICategoryProvider_GetDefaultCategory(self: *const T, pguid: *Guid, pscid: *PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICategoryProvider.VTable, self.vtable).GetDefaultCategory(@ptrCast(*const ICategoryProvider, self), pguid, pscid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICategoryProvider_GetCategoryForSCID(self: *const T, pscid: *const PROPERTYKEY, pguid: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICategoryProvider.VTable, self.vtable).GetCategoryForSCID(@ptrCast(*const ICategoryProvider, self), pscid, pguid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICategoryProvider_EnumCategories(self: *const T, penum: **IEnumGUID) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICategoryProvider.VTable, self.vtable).EnumCategories(@ptrCast(*const ICategoryProvider, self), penum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICategoryProvider_GetCategoryName(self: *const T, pguid: *const Guid, pszName: [*:0]u16, cch: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICategoryProvider.VTable, self.vtable).GetCategoryName(@ptrCast(*const ICategoryProvider, self), pguid, pszName, cch);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICategoryProvider_CreateCategory(self: *const T, pguid: *const Guid, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICategoryProvider.VTable, self.vtable).CreateCategory(@ptrCast(*const ICategoryProvider, self), pguid, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CATEGORYINFO_FLAGS = extern enum(i32) {
    CATINFO_NORMAL = 0,
    CATINFO_COLLAPSED = 1,
    CATINFO_HIDDEN = 2,
    CATINFO_EXPANDED = 4,
    CATINFO_NOHEADER = 8,
    CATINFO_NOTCOLLAPSIBLE = 16,
    CATINFO_NOHEADERCOUNT = 32,
    CATINFO_SUBSETTED = 64,
    CATINFO_SEPARATE_IMAGES = 128,
    CATINFO_SHOWEMPTY = 256,
};
pub const CATINFO_NORMAL = CATEGORYINFO_FLAGS.CATINFO_NORMAL;
pub const CATINFO_COLLAPSED = CATEGORYINFO_FLAGS.CATINFO_COLLAPSED;
pub const CATINFO_HIDDEN = CATEGORYINFO_FLAGS.CATINFO_HIDDEN;
pub const CATINFO_EXPANDED = CATEGORYINFO_FLAGS.CATINFO_EXPANDED;
pub const CATINFO_NOHEADER = CATEGORYINFO_FLAGS.CATINFO_NOHEADER;
pub const CATINFO_NOTCOLLAPSIBLE = CATEGORYINFO_FLAGS.CATINFO_NOTCOLLAPSIBLE;
pub const CATINFO_NOHEADERCOUNT = CATEGORYINFO_FLAGS.CATINFO_NOHEADERCOUNT;
pub const CATINFO_SUBSETTED = CATEGORYINFO_FLAGS.CATINFO_SUBSETTED;
pub const CATINFO_SEPARATE_IMAGES = CATEGORYINFO_FLAGS.CATINFO_SEPARATE_IMAGES;
pub const CATINFO_SHOWEMPTY = CATEGORYINFO_FLAGS.CATINFO_SHOWEMPTY;

pub const CATSORT_FLAGS = extern enum(i32) {
    CATSORT_DEFAULT = 0,
    CATSORT_NAME = 1,
};
pub const CATSORT_DEFAULT = CATSORT_FLAGS.CATSORT_DEFAULT;
pub const CATSORT_NAME = CATSORT_FLAGS.CATSORT_NAME;

pub const CATEGORY_INFO = extern struct {
    cif: CATEGORYINFO_FLAGS,
    wszName: [260]u16,
};

const IID_ICategorizer_Value = @import("../zig.zig").Guid.initString("A3B14589-9174-49A8-89A3-06A1AE2B9BA7");
pub const IID_ICategorizer = &IID_ICategorizer_Value;
pub const ICategorizer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDescription: fn(
            self: *const ICategorizer,
            pszDesc: [*:0]u16,
            cch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategory: fn(
            self: *const ICategorizer,
            cidl: u32,
            apidl: [*]*ITEMIDLIST,
            rgCategoryIds: [*]u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategoryInfo: fn(
            self: *const ICategorizer,
            dwCategoryId: u32,
            pci: *CATEGORY_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompareCategory: fn(
            self: *const ICategorizer,
            csfFlags: CATSORT_FLAGS,
            dwCategoryId1: u32,
            dwCategoryId2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICategorizer_GetDescription(self: *const T, pszDesc: [*:0]u16, cch: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICategorizer.VTable, self.vtable).GetDescription(@ptrCast(*const ICategorizer, self), pszDesc, cch);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICategorizer_GetCategory(self: *const T, cidl: u32, apidl: [*]*ITEMIDLIST, rgCategoryIds: [*]u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICategorizer.VTable, self.vtable).GetCategory(@ptrCast(*const ICategorizer, self), cidl, apidl, rgCategoryIds);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICategorizer_GetCategoryInfo(self: *const T, dwCategoryId: u32, pci: *CATEGORY_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICategorizer.VTable, self.vtable).GetCategoryInfo(@ptrCast(*const ICategorizer, self), dwCategoryId, pci);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICategorizer_CompareCategory(self: *const T, csfFlags: CATSORT_FLAGS, dwCategoryId1: u32, dwCategoryId2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICategorizer.VTable, self.vtable).CompareCategory(@ptrCast(*const ICategorizer, self), csfFlags, dwCategoryId1, dwCategoryId2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SHDRAGIMAGE = extern struct {
    sizeDragImage: SIZE,
    ptOffset: POINT,
    hbmpDragImage: HBITMAP,
    crColorKey: u32,
};

const IID_IDropTargetHelper_Value = @import("../zig.zig").Guid.initString("4657278B-411B-11D2-839A-00C04FD918D0");
pub const IID_IDropTargetHelper = &IID_IDropTargetHelper_Value;
pub const IDropTargetHelper = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DragEnter: fn(
            self: *const IDropTargetHelper,
            hwndTarget: HWND,
            pDataObject: *IDataObject,
            ppt: *POINT,
            dwEffect: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DragLeave: fn(
            self: *const IDropTargetHelper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DragOver: fn(
            self: *const IDropTargetHelper,
            ppt: *POINT,
            dwEffect: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Drop: fn(
            self: *const IDropTargetHelper,
            pDataObject: *IDataObject,
            ppt: *POINT,
            dwEffect: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Show: fn(
            self: *const IDropTargetHelper,
            fShow: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDropTargetHelper_DragEnter(self: *const T, hwndTarget: HWND, pDataObject: *IDataObject, ppt: *POINT, dwEffect: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDropTargetHelper.VTable, self.vtable).DragEnter(@ptrCast(*const IDropTargetHelper, self), hwndTarget, pDataObject, ppt, dwEffect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDropTargetHelper_DragLeave(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDropTargetHelper.VTable, self.vtable).DragLeave(@ptrCast(*const IDropTargetHelper, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDropTargetHelper_DragOver(self: *const T, ppt: *POINT, dwEffect: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDropTargetHelper.VTable, self.vtable).DragOver(@ptrCast(*const IDropTargetHelper, self), ppt, dwEffect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDropTargetHelper_Drop(self: *const T, pDataObject: *IDataObject, ppt: *POINT, dwEffect: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDropTargetHelper.VTable, self.vtable).Drop(@ptrCast(*const IDropTargetHelper, self), pDataObject, ppt, dwEffect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDropTargetHelper_Show(self: *const T, fShow: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDropTargetHelper.VTable, self.vtable).Show(@ptrCast(*const IDropTargetHelper, self), fShow);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDragSourceHelper_Value = @import("../zig.zig").Guid.initString("DE5BF786-477A-11D2-839D-00C04FD918D0");
pub const IID_IDragSourceHelper = &IID_IDragSourceHelper_Value;
pub const IDragSourceHelper = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitializeFromBitmap: fn(
            self: *const IDragSourceHelper,
            pshdi: *SHDRAGIMAGE,
            pDataObject: *IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromWindow: fn(
            self: *const IDragSourceHelper,
            hwnd: HWND,
            ppt: ?*POINT,
            pDataObject: *IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDragSourceHelper_InitializeFromBitmap(self: *const T, pshdi: *SHDRAGIMAGE, pDataObject: *IDataObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDragSourceHelper.VTable, self.vtable).InitializeFromBitmap(@ptrCast(*const IDragSourceHelper, self), pshdi, pDataObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDragSourceHelper_InitializeFromWindow(self: *const T, hwnd: HWND, ppt: ?*POINT, pDataObject: *IDataObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDragSourceHelper.VTable, self.vtable).InitializeFromWindow(@ptrCast(*const IDragSourceHelper, self), hwnd, ppt, pDataObject);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SLR_FLAGS = extern enum(i32) {
    SLR_NONE = 0,
    SLR_NO_UI = 1,
    SLR_ANY_MATCH = 2,
    SLR_UPDATE = 4,
    SLR_NOUPDATE = 8,
    SLR_NOSEARCH = 16,
    SLR_NOTRACK = 32,
    SLR_NOLINKINFO = 64,
    SLR_INVOKE_MSI = 128,
    SLR_NO_UI_WITH_MSG_PUMP = 257,
    SLR_OFFER_DELETE_WITHOUT_FILE = 512,
    SLR_KNOWNFOLDER = 1024,
    SLR_MACHINE_IN_LOCAL_TARGET = 2048,
    SLR_UPDATE_MACHINE_AND_SID = 4096,
    SLR_NO_OBJECT_ID = 8192,
};
pub const SLR_NONE = SLR_FLAGS.SLR_NONE;
pub const SLR_NO_UI = SLR_FLAGS.SLR_NO_UI;
pub const SLR_ANY_MATCH = SLR_FLAGS.SLR_ANY_MATCH;
pub const SLR_UPDATE = SLR_FLAGS.SLR_UPDATE;
pub const SLR_NOUPDATE = SLR_FLAGS.SLR_NOUPDATE;
pub const SLR_NOSEARCH = SLR_FLAGS.SLR_NOSEARCH;
pub const SLR_NOTRACK = SLR_FLAGS.SLR_NOTRACK;
pub const SLR_NOLINKINFO = SLR_FLAGS.SLR_NOLINKINFO;
pub const SLR_INVOKE_MSI = SLR_FLAGS.SLR_INVOKE_MSI;
pub const SLR_NO_UI_WITH_MSG_PUMP = SLR_FLAGS.SLR_NO_UI_WITH_MSG_PUMP;
pub const SLR_OFFER_DELETE_WITHOUT_FILE = SLR_FLAGS.SLR_OFFER_DELETE_WITHOUT_FILE;
pub const SLR_KNOWNFOLDER = SLR_FLAGS.SLR_KNOWNFOLDER;
pub const SLR_MACHINE_IN_LOCAL_TARGET = SLR_FLAGS.SLR_MACHINE_IN_LOCAL_TARGET;
pub const SLR_UPDATE_MACHINE_AND_SID = SLR_FLAGS.SLR_UPDATE_MACHINE_AND_SID;
pub const SLR_NO_OBJECT_ID = SLR_FLAGS.SLR_NO_OBJECT_ID;

pub const SLGP_FLAGS = extern enum(i32) {
    SLGP_SHORTPATH = 1,
    SLGP_UNCPRIORITY = 2,
    SLGP_RAWPATH = 4,
    SLGP_RELATIVEPRIORITY = 8,
};
pub const SLGP_SHORTPATH = SLGP_FLAGS.SLGP_SHORTPATH;
pub const SLGP_UNCPRIORITY = SLGP_FLAGS.SLGP_UNCPRIORITY;
pub const SLGP_RAWPATH = SLGP_FLAGS.SLGP_RAWPATH;
pub const SLGP_RELATIVEPRIORITY = SLGP_FLAGS.SLGP_RELATIVEPRIORITY;

const IID_IShellLinkA_Value = @import("../zig.zig").Guid.initString("000214EE-0000-0000-C000-000000000046");
pub const IID_IShellLinkA = &IID_IShellLinkA_Value;
pub const IShellLinkA = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPath: fn(
            self: *const IShellLinkA,
            pszFile: [*:0]u8,
            cch: i32,
            pfd: *WIN32_FIND_DATAA,
            fFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDList: fn(
            self: *const IShellLinkA,
            ppidl: **ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIDList: fn(
            self: *const IShellLinkA,
            pidl: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: fn(
            self: *const IShellLinkA,
            pszName: [*:0]u8,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDescription: fn(
            self: *const IShellLinkA,
            pszName: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWorkingDirectory: fn(
            self: *const IShellLinkA,
            pszDir: [*:0]u8,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWorkingDirectory: fn(
            self: *const IShellLinkA,
            pszDir: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetArguments: fn(
            self: *const IShellLinkA,
            pszArgs: [*:0]u8,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetArguments: fn(
            self: *const IShellLinkA,
            pszArgs: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHotkey: fn(
            self: *const IShellLinkA,
            pwHotkey: *u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHotkey: fn(
            self: *const IShellLinkA,
            wHotkey: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShowCmd: fn(
            self: *const IShellLinkA,
            piShowCmd: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetShowCmd: fn(
            self: *const IShellLinkA,
            iShowCmd: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconLocation: fn(
            self: *const IShellLinkA,
            pszIconPath: [*:0]u8,
            cch: i32,
            piIcon: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIconLocation: fn(
            self: *const IShellLinkA,
            pszIconPath: [*:0]const u8,
            iIcon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRelativePath: fn(
            self: *const IShellLinkA,
            pszPathRel: [*:0]const u8,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resolve: fn(
            self: *const IShellLinkA,
            hwnd: HWND,
            fFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPath: fn(
            self: *const IShellLinkA,
            pszFile: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkA_GetPath(self: *const T, pszFile: [*:0]u8, cch: i32, pfd: *WIN32_FIND_DATAA, fFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkA.VTable, self.vtable).GetPath(@ptrCast(*const IShellLinkA, self), pszFile, cch, pfd, fFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkA_GetIDList(self: *const T, ppidl: **ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkA.VTable, self.vtable).GetIDList(@ptrCast(*const IShellLinkA, self), ppidl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkA_SetIDList(self: *const T, pidl: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkA.VTable, self.vtable).SetIDList(@ptrCast(*const IShellLinkA, self), pidl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkA_GetDescription(self: *const T, pszName: [*:0]u8, cch: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkA.VTable, self.vtable).GetDescription(@ptrCast(*const IShellLinkA, self), pszName, cch);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkA_SetDescription(self: *const T, pszName: [*:0]const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkA.VTable, self.vtable).SetDescription(@ptrCast(*const IShellLinkA, self), pszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkA_GetWorkingDirectory(self: *const T, pszDir: [*:0]u8, cch: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkA.VTable, self.vtable).GetWorkingDirectory(@ptrCast(*const IShellLinkA, self), pszDir, cch);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkA_SetWorkingDirectory(self: *const T, pszDir: [*:0]const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkA.VTable, self.vtable).SetWorkingDirectory(@ptrCast(*const IShellLinkA, self), pszDir);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkA_GetArguments(self: *const T, pszArgs: [*:0]u8, cch: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkA.VTable, self.vtable).GetArguments(@ptrCast(*const IShellLinkA, self), pszArgs, cch);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkA_SetArguments(self: *const T, pszArgs: [*:0]const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkA.VTable, self.vtable).SetArguments(@ptrCast(*const IShellLinkA, self), pszArgs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkA_GetHotkey(self: *const T, pwHotkey: *u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkA.VTable, self.vtable).GetHotkey(@ptrCast(*const IShellLinkA, self), pwHotkey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkA_SetHotkey(self: *const T, wHotkey: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkA.VTable, self.vtable).SetHotkey(@ptrCast(*const IShellLinkA, self), wHotkey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkA_GetShowCmd(self: *const T, piShowCmd: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkA.VTable, self.vtable).GetShowCmd(@ptrCast(*const IShellLinkA, self), piShowCmd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkA_SetShowCmd(self: *const T, iShowCmd: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkA.VTable, self.vtable).SetShowCmd(@ptrCast(*const IShellLinkA, self), iShowCmd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkA_GetIconLocation(self: *const T, pszIconPath: [*:0]u8, cch: i32, piIcon: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkA.VTable, self.vtable).GetIconLocation(@ptrCast(*const IShellLinkA, self), pszIconPath, cch, piIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkA_SetIconLocation(self: *const T, pszIconPath: [*:0]const u8, iIcon: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkA.VTable, self.vtable).SetIconLocation(@ptrCast(*const IShellLinkA, self), pszIconPath, iIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkA_SetRelativePath(self: *const T, pszPathRel: [*:0]const u8, dwReserved: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkA.VTable, self.vtable).SetRelativePath(@ptrCast(*const IShellLinkA, self), pszPathRel, dwReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkA_Resolve(self: *const T, hwnd: HWND, fFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkA.VTable, self.vtable).Resolve(@ptrCast(*const IShellLinkA, self), hwnd, fFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkA_SetPath(self: *const T, pszFile: [*:0]const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkA.VTable, self.vtable).SetPath(@ptrCast(*const IShellLinkA, self), pszFile);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellLinkW_Value = @import("../zig.zig").Guid.initString("000214F9-0000-0000-C000-000000000046");
pub const IID_IShellLinkW = &IID_IShellLinkW_Value;
pub const IShellLinkW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPath: fn(
            self: *const IShellLinkW,
            pszFile: [*:0]u16,
            cch: i32,
            pfd: *WIN32_FIND_DATAW,
            fFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDList: fn(
            self: *const IShellLinkW,
            ppidl: **ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIDList: fn(
            self: *const IShellLinkW,
            pidl: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: fn(
            self: *const IShellLinkW,
            pszName: [*:0]u16,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDescription: fn(
            self: *const IShellLinkW,
            pszName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWorkingDirectory: fn(
            self: *const IShellLinkW,
            pszDir: [*:0]u16,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWorkingDirectory: fn(
            self: *const IShellLinkW,
            pszDir: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetArguments: fn(
            self: *const IShellLinkW,
            pszArgs: [*:0]u16,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetArguments: fn(
            self: *const IShellLinkW,
            pszArgs: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHotkey: fn(
            self: *const IShellLinkW,
            pwHotkey: *u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHotkey: fn(
            self: *const IShellLinkW,
            wHotkey: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShowCmd: fn(
            self: *const IShellLinkW,
            piShowCmd: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetShowCmd: fn(
            self: *const IShellLinkW,
            iShowCmd: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconLocation: fn(
            self: *const IShellLinkW,
            pszIconPath: [*:0]u16,
            cch: i32,
            piIcon: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIconLocation: fn(
            self: *const IShellLinkW,
            pszIconPath: [*:0]const u16,
            iIcon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRelativePath: fn(
            self: *const IShellLinkW,
            pszPathRel: [*:0]const u16,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resolve: fn(
            self: *const IShellLinkW,
            hwnd: HWND,
            fFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPath: fn(
            self: *const IShellLinkW,
            pszFile: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkW_GetPath(self: *const T, pszFile: [*:0]u16, cch: i32, pfd: *WIN32_FIND_DATAW, fFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkW.VTable, self.vtable).GetPath(@ptrCast(*const IShellLinkW, self), pszFile, cch, pfd, fFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkW_GetIDList(self: *const T, ppidl: **ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkW.VTable, self.vtable).GetIDList(@ptrCast(*const IShellLinkW, self), ppidl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkW_SetIDList(self: *const T, pidl: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkW.VTable, self.vtable).SetIDList(@ptrCast(*const IShellLinkW, self), pidl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkW_GetDescription(self: *const T, pszName: [*:0]u16, cch: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkW.VTable, self.vtable).GetDescription(@ptrCast(*const IShellLinkW, self), pszName, cch);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkW_SetDescription(self: *const T, pszName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkW.VTable, self.vtable).SetDescription(@ptrCast(*const IShellLinkW, self), pszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkW_GetWorkingDirectory(self: *const T, pszDir: [*:0]u16, cch: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkW.VTable, self.vtable).GetWorkingDirectory(@ptrCast(*const IShellLinkW, self), pszDir, cch);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkW_SetWorkingDirectory(self: *const T, pszDir: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkW.VTable, self.vtable).SetWorkingDirectory(@ptrCast(*const IShellLinkW, self), pszDir);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkW_GetArguments(self: *const T, pszArgs: [*:0]u16, cch: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkW.VTable, self.vtable).GetArguments(@ptrCast(*const IShellLinkW, self), pszArgs, cch);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkW_SetArguments(self: *const T, pszArgs: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkW.VTable, self.vtable).SetArguments(@ptrCast(*const IShellLinkW, self), pszArgs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkW_GetHotkey(self: *const T, pwHotkey: *u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkW.VTable, self.vtable).GetHotkey(@ptrCast(*const IShellLinkW, self), pwHotkey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkW_SetHotkey(self: *const T, wHotkey: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkW.VTable, self.vtable).SetHotkey(@ptrCast(*const IShellLinkW, self), wHotkey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkW_GetShowCmd(self: *const T, piShowCmd: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkW.VTable, self.vtable).GetShowCmd(@ptrCast(*const IShellLinkW, self), piShowCmd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkW_SetShowCmd(self: *const T, iShowCmd: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkW.VTable, self.vtable).SetShowCmd(@ptrCast(*const IShellLinkW, self), iShowCmd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkW_GetIconLocation(self: *const T, pszIconPath: [*:0]u16, cch: i32, piIcon: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkW.VTable, self.vtable).GetIconLocation(@ptrCast(*const IShellLinkW, self), pszIconPath, cch, piIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkW_SetIconLocation(self: *const T, pszIconPath: [*:0]const u16, iIcon: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkW.VTable, self.vtable).SetIconLocation(@ptrCast(*const IShellLinkW, self), pszIconPath, iIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkW_SetRelativePath(self: *const T, pszPathRel: [*:0]const u16, dwReserved: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkW.VTable, self.vtable).SetRelativePath(@ptrCast(*const IShellLinkW, self), pszPathRel, dwReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkW_Resolve(self: *const T, hwnd: HWND, fFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkW.VTable, self.vtable).Resolve(@ptrCast(*const IShellLinkW, self), hwnd, fFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkW_SetPath(self: *const T, pszFile: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkW.VTable, self.vtable).SetPath(@ptrCast(*const IShellLinkW, self), pszFile);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellLinkDataList_Value = @import("../zig.zig").Guid.initString("45E2B4AE-B1C3-11D0-B92F-00A0C90312E1");
pub const IID_IShellLinkDataList = &IID_IShellLinkDataList_Value;
pub const IShellLinkDataList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddDataBlock: fn(
            self: *const IShellLinkDataList,
            pDataBlock: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyDataBlock: fn(
            self: *const IShellLinkDataList,
            dwSig: u32,
            ppDataBlock: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveDataBlock: fn(
            self: *const IShellLinkDataList,
            dwSig: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: fn(
            self: *const IShellLinkDataList,
            pdwFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFlags: fn(
            self: *const IShellLinkDataList,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDataList_AddDataBlock(self: *const T, pDataBlock: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDataList.VTable, self.vtable).AddDataBlock(@ptrCast(*const IShellLinkDataList, self), pDataBlock);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDataList_CopyDataBlock(self: *const T, dwSig: u32, ppDataBlock: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDataList.VTable, self.vtable).CopyDataBlock(@ptrCast(*const IShellLinkDataList, self), dwSig, ppDataBlock);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDataList_RemoveDataBlock(self: *const T, dwSig: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDataList.VTable, self.vtable).RemoveDataBlock(@ptrCast(*const IShellLinkDataList, self), dwSig);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDataList_GetFlags(self: *const T, pdwFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDataList.VTable, self.vtable).GetFlags(@ptrCast(*const IShellLinkDataList, self), pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDataList_SetFlags(self: *const T, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDataList.VTable, self.vtable).SetFlags(@ptrCast(*const IShellLinkDataList, self), dwFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IResolveShellLink_Value = @import("../zig.zig").Guid.initString("5CD52983-9449-11D2-963A-00C04F79ADF0");
pub const IID_IResolveShellLink = &IID_IResolveShellLink_Value;
pub const IResolveShellLink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ResolveShellLink: fn(
            self: *const IResolveShellLink,
            punkLink: *IUnknown,
            hwnd: HWND,
            fFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IResolveShellLink_ResolveShellLink(self: *const T, punkLink: *IUnknown, hwnd: HWND, fFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IResolveShellLink.VTable, self.vtable).ResolveShellLink(@ptrCast(*const IResolveShellLink, self), punkLink, hwnd, fFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _SPINITF = extern enum(i32) {
    SPINITF_NORMAL = 0,
    SPINITF_MODAL = 1,
    SPINITF_NOMINIMIZE = 8,
};
pub const SPINITF_NORMAL = _SPINITF.SPINITF_NORMAL;
pub const SPINITF_MODAL = _SPINITF.SPINITF_MODAL;
pub const SPINITF_NOMINIMIZE = _SPINITF.SPINITF_NOMINIMIZE;

const IID_IActionProgressDialog_Value = @import("../zig.zig").Guid.initString("49FF1172-EADC-446D-9285-156453A6431C");
pub const IID_IActionProgressDialog = &IID_IActionProgressDialog_Value;
pub const IActionProgressDialog = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IActionProgressDialog,
            flags: u32,
            pszTitle: [*:0]const u16,
            pszCancel: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: fn(
            self: *const IActionProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActionProgressDialog_Initialize(self: *const T, flags: u32, pszTitle: [*:0]const u16, pszCancel: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActionProgressDialog.VTable, self.vtable).Initialize(@ptrCast(*const IActionProgressDialog, self), flags, pszTitle, pszCancel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActionProgressDialog_Stop(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActionProgressDialog.VTable, self.vtable).Stop(@ptrCast(*const IActionProgressDialog, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _SPBEGINF = extern enum(i32) {
    SPBEGINF_NORMAL = 0,
    SPBEGINF_AUTOTIME = 2,
    SPBEGINF_NOPROGRESSBAR = 16,
    SPBEGINF_MARQUEEPROGRESS = 32,
    SPBEGINF_NOCANCELBUTTON = 64,
};
pub const SPBEGINF_NORMAL = _SPBEGINF.SPBEGINF_NORMAL;
pub const SPBEGINF_AUTOTIME = _SPBEGINF.SPBEGINF_AUTOTIME;
pub const SPBEGINF_NOPROGRESSBAR = _SPBEGINF.SPBEGINF_NOPROGRESSBAR;
pub const SPBEGINF_MARQUEEPROGRESS = _SPBEGINF.SPBEGINF_MARQUEEPROGRESS;
pub const SPBEGINF_NOCANCELBUTTON = _SPBEGINF.SPBEGINF_NOCANCELBUTTON;

pub const SPACTION = extern enum(i32) {
    NONE = 0,
    MOVING = 1,
    COPYING = 2,
    RECYCLING = 3,
    APPLYINGATTRIBS = 4,
    DOWNLOADING = 5,
    SEARCHING_INTERNET = 6,
    CALCULATING = 7,
    UPLOADING = 8,
    SEARCHING_FILES = 9,
    DELETING = 10,
    RENAMING = 11,
    FORMATTING = 12,
    COPY_MOVING = 13,
};
pub const SPACTION_NONE = SPACTION.NONE;
pub const SPACTION_MOVING = SPACTION.MOVING;
pub const SPACTION_COPYING = SPACTION.COPYING;
pub const SPACTION_RECYCLING = SPACTION.RECYCLING;
pub const SPACTION_APPLYINGATTRIBS = SPACTION.APPLYINGATTRIBS;
pub const SPACTION_DOWNLOADING = SPACTION.DOWNLOADING;
pub const SPACTION_SEARCHING_INTERNET = SPACTION.SEARCHING_INTERNET;
pub const SPACTION_CALCULATING = SPACTION.CALCULATING;
pub const SPACTION_UPLOADING = SPACTION.UPLOADING;
pub const SPACTION_SEARCHING_FILES = SPACTION.SEARCHING_FILES;
pub const SPACTION_DELETING = SPACTION.DELETING;
pub const SPACTION_RENAMING = SPACTION.RENAMING;
pub const SPACTION_FORMATTING = SPACTION.FORMATTING;
pub const SPACTION_COPY_MOVING = SPACTION.COPY_MOVING;

pub const SPTEXT = extern enum(i32) {
    ACTIONDESCRIPTION = 1,
    ACTIONDETAIL = 2,
};
pub const SPTEXT_ACTIONDESCRIPTION = SPTEXT.ACTIONDESCRIPTION;
pub const SPTEXT_ACTIONDETAIL = SPTEXT.ACTIONDETAIL;

const IID_IActionProgress_Value = @import("../zig.zig").Guid.initString("49FF1173-EADC-446D-9285-156453A6431C");
pub const IID_IActionProgress = &IID_IActionProgress_Value;
pub const IActionProgress = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin: fn(
            self: *const IActionProgress,
            action: SPACTION,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateProgress: fn(
            self: *const IActionProgress,
            ulCompleted: u64,
            ulTotal: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateText: fn(
            self: *const IActionProgress,
            sptext: SPTEXT,
            pszText: [*:0]const u16,
            fMayCompact: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryCancel: fn(
            self: *const IActionProgress,
            pfCancelled: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetCancel: fn(
            self: *const IActionProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        End: fn(
            self: *const IActionProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActionProgress_Begin(self: *const T, action: SPACTION, flags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActionProgress.VTable, self.vtable).Begin(@ptrCast(*const IActionProgress, self), action, flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActionProgress_UpdateProgress(self: *const T, ulCompleted: u64, ulTotal: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActionProgress.VTable, self.vtable).UpdateProgress(@ptrCast(*const IActionProgress, self), ulCompleted, ulTotal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActionProgress_UpdateText(self: *const T, sptext: SPTEXT, pszText: [*:0]const u16, fMayCompact: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActionProgress.VTable, self.vtable).UpdateText(@ptrCast(*const IActionProgress, self), sptext, pszText, fMayCompact);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActionProgress_QueryCancel(self: *const T, pfCancelled: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActionProgress.VTable, self.vtable).QueryCancel(@ptrCast(*const IActionProgress, self), pfCancelled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActionProgress_ResetCancel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActionProgress.VTable, self.vtable).ResetCancel(@ptrCast(*const IActionProgress, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActionProgress_End(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActionProgress.VTable, self.vtable).End(@ptrCast(*const IActionProgress, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellExtInit_Value = @import("../zig.zig").Guid.initString("000214E8-0000-0000-C000-000000000046");
pub const IID_IShellExtInit = &IID_IShellExtInit_Value;
pub const IShellExtInit = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IShellExtInit,
            pidlFolder: ?*ITEMIDLIST,
            pdtobj: ?*IDataObject,
            hkeyProgID: HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellExtInit_Initialize(self: *const T, pidlFolder: ?*ITEMIDLIST, pdtobj: ?*IDataObject, hkeyProgID: HKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellExtInit.VTable, self.vtable).Initialize(@ptrCast(*const IShellExtInit, self), pidlFolder, pdtobj, hkeyProgID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _EXPPS = extern enum(i32) {
    EXPPS_FILETYPES = 1,
};
pub const EXPPS_FILETYPES = _EXPPS.EXPPS_FILETYPES;

const IID_IShellPropSheetExt_Value = @import("../zig.zig").Guid.initString("000214E9-0000-0000-C000-000000000046");
pub const IID_IShellPropSheetExt = &IID_IShellPropSheetExt_Value;
pub const IShellPropSheetExt = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddPages: fn(
            self: *const IShellPropSheetExt,
            pfnAddPage: LPFNSVADDPROPSHEETPAGE,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReplacePage: fn(
            self: *const IShellPropSheetExt,
            uPageID: u32,
            pfnReplaceWith: LPFNSVADDPROPSHEETPAGE,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellPropSheetExt_AddPages(self: *const T, pfnAddPage: LPFNSVADDPROPSHEETPAGE, lParam: LPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellPropSheetExt.VTable, self.vtable).AddPages(@ptrCast(*const IShellPropSheetExt, self), pfnAddPage, lParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellPropSheetExt_ReplacePage(self: *const T, uPageID: u32, pfnReplaceWith: LPFNSVADDPROPSHEETPAGE, lParam: LPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellPropSheetExt.VTable, self.vtable).ReplacePage(@ptrCast(*const IShellPropSheetExt, self), uPageID, pfnReplaceWith, lParam);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRemoteComputer_Value = @import("../zig.zig").Guid.initString("000214FE-0000-0000-C000-000000000046");
pub const IID_IRemoteComputer = &IID_IRemoteComputer_Value;
pub const IRemoteComputer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IRemoteComputer,
            pszMachine: [*:0]const u16,
            bEnumerating: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRemoteComputer_Initialize(self: *const T, pszMachine: [*:0]const u16, bEnumerating: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRemoteComputer.VTable, self.vtable).Initialize(@ptrCast(*const IRemoteComputer, self), pszMachine, bEnumerating);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IQueryContinue_Value = @import("../zig.zig").Guid.initString("7307055C-B24A-486B-9F25-163E597A28A9");
pub const IID_IQueryContinue = &IID_IQueryContinue_Value;
pub const IQueryContinue = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryContinue: fn(
            self: *const IQueryContinue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IQueryContinue_QueryContinue(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IQueryContinue.VTable, self.vtable).QueryContinue(@ptrCast(*const IQueryContinue, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjectWithCancelEvent_Value = @import("../zig.zig").Guid.initString("F279B885-0AE9-4B85-AC06-DDECF9408941");
pub const IID_IObjectWithCancelEvent = &IID_IObjectWithCancelEvent_Value;
pub const IObjectWithCancelEvent = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCancelEvent: fn(
            self: *const IObjectWithCancelEvent,
            phEvent: *HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectWithCancelEvent_GetCancelEvent(self: *const T, phEvent: *HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectWithCancelEvent.VTable, self.vtable).GetCancelEvent(@ptrCast(*const IObjectWithCancelEvent, self), phEvent);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUserNotification_Value = @import("../zig.zig").Guid.initString("BA9711BA-5893-4787-A7E1-41277151550B");
pub const IID_IUserNotification = &IID_IUserNotification_Value;
pub const IUserNotification = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBalloonInfo: fn(
            self: *const IUserNotification,
            pszTitle: [*:0]const u16,
            pszText: [*:0]const u16,
            dwInfoFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBalloonRetry: fn(
            self: *const IUserNotification,
            dwShowTime: u32,
            dwInterval: u32,
            cRetryCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIconInfo: fn(
            self: *const IUserNotification,
            hIcon: HICON,
            pszToolTip: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Show: fn(
            self: *const IUserNotification,
            pqc: *IQueryContinue,
            dwContinuePollInterval: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PlaySoundA: fn(
            self: *const IUserNotification,
            pszSoundName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserNotification_SetBalloonInfo(self: *const T, pszTitle: [*:0]const u16, pszText: [*:0]const u16, dwInfoFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserNotification.VTable, self.vtable).SetBalloonInfo(@ptrCast(*const IUserNotification, self), pszTitle, pszText, dwInfoFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserNotification_SetBalloonRetry(self: *const T, dwShowTime: u32, dwInterval: u32, cRetryCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserNotification.VTable, self.vtable).SetBalloonRetry(@ptrCast(*const IUserNotification, self), dwShowTime, dwInterval, cRetryCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserNotification_SetIconInfo(self: *const T, hIcon: HICON, pszToolTip: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserNotification.VTable, self.vtable).SetIconInfo(@ptrCast(*const IUserNotification, self), hIcon, pszToolTip);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserNotification_Show(self: *const T, pqc: *IQueryContinue, dwContinuePollInterval: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserNotification.VTable, self.vtable).Show(@ptrCast(*const IUserNotification, self), pqc, dwContinuePollInterval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserNotification_PlaySoundA(self: *const T, pszSoundName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserNotification.VTable, self.vtable).PlaySoundA(@ptrCast(*const IUserNotification, self), pszSoundName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IItemNameLimits_Value = @import("../zig.zig").Guid.initString("1DF0D7F1-B267-4D28-8B10-12E23202A5C4");
pub const IID_IItemNameLimits = &IID_IItemNameLimits_Value;
pub const IItemNameLimits = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetValidCharacters: fn(
            self: *const IItemNameLimits,
            ppwszValidChars: *PWSTR,
            ppwszInvalidChars: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxLength: fn(
            self: *const IItemNameLimits,
            pszName: [*:0]const u16,
            piMaxNameLen: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IItemNameLimits_GetValidCharacters(self: *const T, ppwszValidChars: *PWSTR, ppwszInvalidChars: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IItemNameLimits.VTable, self.vtable).GetValidCharacters(@ptrCast(*const IItemNameLimits, self), ppwszValidChars, ppwszInvalidChars);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IItemNameLimits_GetMaxLength(self: *const T, pszName: [*:0]const u16, piMaxNameLen: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IItemNameLimits.VTable, self.vtable).GetMaxLength(@ptrCast(*const IItemNameLimits, self), pszName, piMaxNameLen);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISearchFolderItemFactory_Value = @import("../zig.zig").Guid.initString("A0FFBC28-5482-4366-BE27-3E81E78E06C2");
pub const IID_ISearchFolderItemFactory = &IID_ISearchFolderItemFactory_Value;
pub const ISearchFolderItemFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetDisplayName: fn(
            self: *const ISearchFolderItemFactory,
            pszDisplayName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolderTypeID: fn(
            self: *const ISearchFolderItemFactory,
            ftid: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolderLogicalViewMode: fn(
            self: *const ISearchFolderItemFactory,
            flvm: FOLDERLOGICALVIEWMODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIconSize: fn(
            self: *const ISearchFolderItemFactory,
            iIconSize: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVisibleColumns: fn(
            self: *const ISearchFolderItemFactory,
            cVisibleColumns: u32,
            rgKey: [*]const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSortColumns: fn(
            self: *const ISearchFolderItemFactory,
            cSortColumns: u32,
            rgSortColumns: [*]SORTCOLUMN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGroupColumn: fn(
            self: *const ISearchFolderItemFactory,
            keyGroup: *const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStacks: fn(
            self: *const ISearchFolderItemFactory,
            cStackKeys: u32,
            rgStackKeys: [*]PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScope: fn(
            self: *const ISearchFolderItemFactory,
            psiaScope: *IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCondition: fn(
            self: *const ISearchFolderItemFactory,
            pCondition: *ICondition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShellItem: fn(
            self: *const ISearchFolderItemFactory,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDList: fn(
            self: *const ISearchFolderItemFactory,
            ppidl: **ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISearchFolderItemFactory_SetDisplayName(self: *const T, pszDisplayName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISearchFolderItemFactory.VTable, self.vtable).SetDisplayName(@ptrCast(*const ISearchFolderItemFactory, self), pszDisplayName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISearchFolderItemFactory_SetFolderTypeID(self: *const T, ftid: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISearchFolderItemFactory.VTable, self.vtable).SetFolderTypeID(@ptrCast(*const ISearchFolderItemFactory, self), ftid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISearchFolderItemFactory_SetFolderLogicalViewMode(self: *const T, flvm: FOLDERLOGICALVIEWMODE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISearchFolderItemFactory.VTable, self.vtable).SetFolderLogicalViewMode(@ptrCast(*const ISearchFolderItemFactory, self), flvm);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISearchFolderItemFactory_SetIconSize(self: *const T, iIconSize: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISearchFolderItemFactory.VTable, self.vtable).SetIconSize(@ptrCast(*const ISearchFolderItemFactory, self), iIconSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISearchFolderItemFactory_SetVisibleColumns(self: *const T, cVisibleColumns: u32, rgKey: [*]const PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISearchFolderItemFactory.VTable, self.vtable).SetVisibleColumns(@ptrCast(*const ISearchFolderItemFactory, self), cVisibleColumns, rgKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISearchFolderItemFactory_SetSortColumns(self: *const T, cSortColumns: u32, rgSortColumns: [*]SORTCOLUMN) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISearchFolderItemFactory.VTable, self.vtable).SetSortColumns(@ptrCast(*const ISearchFolderItemFactory, self), cSortColumns, rgSortColumns);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISearchFolderItemFactory_SetGroupColumn(self: *const T, keyGroup: *const PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISearchFolderItemFactory.VTable, self.vtable).SetGroupColumn(@ptrCast(*const ISearchFolderItemFactory, self), keyGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISearchFolderItemFactory_SetStacks(self: *const T, cStackKeys: u32, rgStackKeys: [*]PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISearchFolderItemFactory.VTable, self.vtable).SetStacks(@ptrCast(*const ISearchFolderItemFactory, self), cStackKeys, rgStackKeys);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISearchFolderItemFactory_SetScope(self: *const T, psiaScope: *IShellItemArray) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISearchFolderItemFactory.VTable, self.vtable).SetScope(@ptrCast(*const ISearchFolderItemFactory, self), psiaScope);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISearchFolderItemFactory_SetCondition(self: *const T, pCondition: *ICondition) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISearchFolderItemFactory.VTable, self.vtable).SetCondition(@ptrCast(*const ISearchFolderItemFactory, self), pCondition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISearchFolderItemFactory_GetShellItem(self: *const T, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISearchFolderItemFactory.VTable, self.vtable).GetShellItem(@ptrCast(*const ISearchFolderItemFactory, self), riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISearchFolderItemFactory_GetIDList(self: *const T, ppidl: **ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISearchFolderItemFactory.VTable, self.vtable).GetIDList(@ptrCast(*const ISearchFolderItemFactory, self), ppidl);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IExtractImage_Value = @import("../zig.zig").Guid.initString("BB2E617C-0920-11D1-9A0B-00C04FC2D6C1");
pub const IID_IExtractImage = &IID_IExtractImage_Value;
pub const IExtractImage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLocation: fn(
            self: *const IExtractImage,
            pszPathBuffer: [*:0]u16,
            cch: u32,
            pdwPriority: *u32,
            prgSize: *const SIZE,
            dwRecClrDepth: u32,
            pdwFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Extract: fn(
            self: *const IExtractImage,
            phBmpThumbnail: *HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExtractImage_GetLocation(self: *const T, pszPathBuffer: [*:0]u16, cch: u32, pdwPriority: *u32, prgSize: *const SIZE, dwRecClrDepth: u32, pdwFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExtractImage.VTable, self.vtable).GetLocation(@ptrCast(*const IExtractImage, self), pszPathBuffer, cch, pdwPriority, prgSize, dwRecClrDepth, pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExtractImage_Extract(self: *const T, phBmpThumbnail: *HBITMAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExtractImage.VTable, self.vtable).Extract(@ptrCast(*const IExtractImage, self), phBmpThumbnail);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IExtractImage2_Value = @import("../zig.zig").Guid.initString("953BB1EE-93B4-11D1-98A3-00C04FB687DA");
pub const IID_IExtractImage2 = &IID_IExtractImage2_Value;
pub const IExtractImage2 = extern struct {
    pub const VTable = extern struct {
        base: IExtractImage.VTable,
        GetDateStamp: fn(
            self: *const IExtractImage2,
            pDateStamp: *FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IExtractImage.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExtractImage2_GetDateStamp(self: *const T, pDateStamp: *FILETIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExtractImage2.VTable, self.vtable).GetDateStamp(@ptrCast(*const IExtractImage2, self), pDateStamp);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IThumbnailHandlerFactory_Value = @import("../zig.zig").Guid.initString("E35B4B2E-00DA-4BC1-9F13-38BC11F5D417");
pub const IID_IThumbnailHandlerFactory = &IID_IThumbnailHandlerFactory_Value;
pub const IThumbnailHandlerFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetThumbnailHandler: fn(
            self: *const IThumbnailHandlerFactory,
            pidlChild: *ITEMIDLIST,
            pbc: *IBindCtx,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThumbnailHandlerFactory_GetThumbnailHandler(self: *const T, pidlChild: *ITEMIDLIST, pbc: *IBindCtx, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThumbnailHandlerFactory.VTable, self.vtable).GetThumbnailHandler(@ptrCast(*const IThumbnailHandlerFactory, self), pidlChild, pbc, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IParentAndItem_Value = @import("../zig.zig").Guid.initString("B3A4B685-B685-4805-99D9-5DEAD2873236");
pub const IID_IParentAndItem = &IID_IParentAndItem_Value;
pub const IParentAndItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetParentAndItem: fn(
            self: *const IParentAndItem,
            pidlParent: *ITEMIDLIST,
            psf: *IShellFolder,
            pidlChild: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParentAndItem: fn(
            self: *const IParentAndItem,
            ppidlParent: ?*?*ITEMIDLIST,
            ppsf: ?*?*IShellFolder,
            ppidlChild: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IParentAndItem_SetParentAndItem(self: *const T, pidlParent: *ITEMIDLIST, psf: *IShellFolder, pidlChild: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IParentAndItem.VTable, self.vtable).SetParentAndItem(@ptrCast(*const IParentAndItem, self), pidlParent, psf, pidlChild);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IParentAndItem_GetParentAndItem(self: *const T, ppidlParent: ?*?*ITEMIDLIST, ppsf: ?*?*IShellFolder, ppidlChild: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IParentAndItem.VTable, self.vtable).GetParentAndItem(@ptrCast(*const IParentAndItem, self), ppidlParent, ppsf, ppidlChild);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDockingWindow_Value = @import("../zig.zig").Guid.initString("012DD920-7B26-11D0-8CA9-00A0C92DBFE8");
pub const IID_IDockingWindow = &IID_IDockingWindow_Value;
pub const IDockingWindow = extern struct {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        ShowDW: fn(
            self: *const IDockingWindow,
            fShow: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseDW: fn(
            self: *const IDockingWindow,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResizeBorderDW: fn(
            self: *const IDockingWindow,
            prcBorder: *RECT,
            punkToolbarSite: *IUnknown,
            fReserved: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOleWindow.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDockingWindow_ShowDW(self: *const T, fShow: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDockingWindow.VTable, self.vtable).ShowDW(@ptrCast(*const IDockingWindow, self), fShow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDockingWindow_CloseDW(self: *const T, dwReserved: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDockingWindow.VTable, self.vtable).CloseDW(@ptrCast(*const IDockingWindow, self), dwReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDockingWindow_ResizeBorderDW(self: *const T, prcBorder: *RECT, punkToolbarSite: *IUnknown, fReserved: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDockingWindow.VTable, self.vtable).ResizeBorderDW(@ptrCast(*const IDockingWindow, self), prcBorder, punkToolbarSite, fReserved);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DESKBANDINFO = extern struct {
    dwMask: u32,
    ptMinSize: POINTL,
    ptMaxSize: POINTL,
    ptIntegral: POINTL,
    ptActual: POINTL,
    wszTitle: [256]u16,
    dwModeFlags: u32,
    crBkgnd: u32,
};

pub const tagDESKBANDCID = extern enum(i32) {
    DBID_BANDINFOCHANGED = 0,
    DBID_SHOWONLY = 1,
    DBID_MAXIMIZEBAND = 2,
    DBID_PUSHCHEVRON = 3,
    DBID_DELAYINIT = 4,
    DBID_FINISHINIT = 5,
    DBID_SETWINDOWTHEME = 6,
    DBID_PERMITAUTOHIDE = 7,
};
pub const DBID_BANDINFOCHANGED = tagDESKBANDCID.DBID_BANDINFOCHANGED;
pub const DBID_SHOWONLY = tagDESKBANDCID.DBID_SHOWONLY;
pub const DBID_MAXIMIZEBAND = tagDESKBANDCID.DBID_MAXIMIZEBAND;
pub const DBID_PUSHCHEVRON = tagDESKBANDCID.DBID_PUSHCHEVRON;
pub const DBID_DELAYINIT = tagDESKBANDCID.DBID_DELAYINIT;
pub const DBID_FINISHINIT = tagDESKBANDCID.DBID_FINISHINIT;
pub const DBID_SETWINDOWTHEME = tagDESKBANDCID.DBID_SETWINDOWTHEME;
pub const DBID_PERMITAUTOHIDE = tagDESKBANDCID.DBID_PERMITAUTOHIDE;

const IID_IDeskBand_Value = @import("../zig.zig").Guid.initString("EB0FE172-1A3A-11D0-89B3-00A0C90A90AC");
pub const IID_IDeskBand = &IID_IDeskBand_Value;
pub const IDeskBand = extern struct {
    pub const VTable = extern struct {
        base: IDockingWindow.VTable,
        GetBandInfo: fn(
            self: *const IDeskBand,
            dwBandID: u32,
            dwViewMode: u32,
            pdbi: *DESKBANDINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDockingWindow.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDeskBand_GetBandInfo(self: *const T, dwBandID: u32, dwViewMode: u32, pdbi: *DESKBANDINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDeskBand.VTable, self.vtable).GetBandInfo(@ptrCast(*const IDeskBand, self), dwBandID, dwViewMode, pdbi);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDeskBandInfo_Value = @import("../zig.zig").Guid.initString("77E425FC-CBF9-4307-BA6A-BB5727745661");
pub const IID_IDeskBandInfo = &IID_IDeskBandInfo_Value;
pub const IDeskBandInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDefaultBandWidth: fn(
            self: *const IDeskBandInfo,
            dwBandID: u32,
            dwViewMode: u32,
            pnWidth: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDeskBandInfo_GetDefaultBandWidth(self: *const T, dwBandID: u32, dwViewMode: u32, pnWidth: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDeskBandInfo.VTable, self.vtable).GetDefaultBandWidth(@ptrCast(*const IDeskBandInfo, self), dwBandID, dwViewMode, pnWidth);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITaskbarList_Value = @import("../zig.zig").Guid.initString("56FDF342-FD6D-11D0-958A-006097C9A090");
pub const IID_ITaskbarList = &IID_ITaskbarList_Value;
pub const ITaskbarList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        HrInit: fn(
            self: *const ITaskbarList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTab: fn(
            self: *const ITaskbarList,
            hwnd: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteTab: fn(
            self: *const ITaskbarList,
            hwnd: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivateTab: fn(
            self: *const ITaskbarList,
            hwnd: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActiveAlt: fn(
            self: *const ITaskbarList,
            hwnd: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList_HrInit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList.VTable, self.vtable).HrInit(@ptrCast(*const ITaskbarList, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList_AddTab(self: *const T, hwnd: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList.VTable, self.vtable).AddTab(@ptrCast(*const ITaskbarList, self), hwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList_DeleteTab(self: *const T, hwnd: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList.VTable, self.vtable).DeleteTab(@ptrCast(*const ITaskbarList, self), hwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList_ActivateTab(self: *const T, hwnd: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList.VTable, self.vtable).ActivateTab(@ptrCast(*const ITaskbarList, self), hwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList_SetActiveAlt(self: *const T, hwnd: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList.VTable, self.vtable).SetActiveAlt(@ptrCast(*const ITaskbarList, self), hwnd);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITaskbarList2_Value = @import("../zig.zig").Guid.initString("602D4995-B13A-429B-A66E-1935E44F4317");
pub const IID_ITaskbarList2 = &IID_ITaskbarList2_Value;
pub const ITaskbarList2 = extern struct {
    pub const VTable = extern struct {
        base: ITaskbarList.VTable,
        MarkFullscreenWindow: fn(
            self: *const ITaskbarList2,
            hwnd: HWND,
            fFullscreen: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ITaskbarList.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList2_MarkFullscreenWindow(self: *const T, hwnd: HWND, fFullscreen: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList2.VTable, self.vtable).MarkFullscreenWindow(@ptrCast(*const ITaskbarList2, self), hwnd, fFullscreen);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const THUMBBUTTONFLAGS = extern enum(i32) {
    THBF_ENABLED = 0,
    THBF_DISABLED = 1,
    THBF_DISMISSONCLICK = 2,
    THBF_NOBACKGROUND = 4,
    THBF_HIDDEN = 8,
    THBF_NONINTERACTIVE = 16,
};
pub const THBF_ENABLED = THUMBBUTTONFLAGS.THBF_ENABLED;
pub const THBF_DISABLED = THUMBBUTTONFLAGS.THBF_DISABLED;
pub const THBF_DISMISSONCLICK = THUMBBUTTONFLAGS.THBF_DISMISSONCLICK;
pub const THBF_NOBACKGROUND = THUMBBUTTONFLAGS.THBF_NOBACKGROUND;
pub const THBF_HIDDEN = THUMBBUTTONFLAGS.THBF_HIDDEN;
pub const THBF_NONINTERACTIVE = THUMBBUTTONFLAGS.THBF_NONINTERACTIVE;

pub const THUMBBUTTONMASK = extern enum(i32) {
    THB_BITMAP = 1,
    THB_ICON = 2,
    THB_TOOLTIP = 4,
    THB_FLAGS = 8,
};
pub const THB_BITMAP = THUMBBUTTONMASK.THB_BITMAP;
pub const THB_ICON = THUMBBUTTONMASK.THB_ICON;
pub const THB_TOOLTIP = THUMBBUTTONMASK.THB_TOOLTIP;
pub const THB_FLAGS = THUMBBUTTONMASK.THB_FLAGS;

pub const THUMBBUTTON = extern struct {
    dwMask: THUMBBUTTONMASK,
    iId: u32,
    iBitmap: u32,
    hIcon: HICON,
    szTip: [260]u16,
    dwFlags: THUMBBUTTONFLAGS,
};

pub const TBPFLAG = extern enum(i32) {
    TBPF_NOPROGRESS = 0,
    TBPF_INDETERMINATE = 1,
    TBPF_NORMAL = 2,
    TBPF_ERROR = 4,
    TBPF_PAUSED = 8,
};
pub const TBPF_NOPROGRESS = TBPFLAG.TBPF_NOPROGRESS;
pub const TBPF_INDETERMINATE = TBPFLAG.TBPF_INDETERMINATE;
pub const TBPF_NORMAL = TBPFLAG.TBPF_NORMAL;
pub const TBPF_ERROR = TBPFLAG.TBPF_ERROR;
pub const TBPF_PAUSED = TBPFLAG.TBPF_PAUSED;

const IID_ITaskbarList3_Value = @import("../zig.zig").Guid.initString("EA1AFB91-9E28-4B86-90E9-9E9F8A5EEFAF");
pub const IID_ITaskbarList3 = &IID_ITaskbarList3_Value;
pub const ITaskbarList3 = extern struct {
    pub const VTable = extern struct {
        base: ITaskbarList2.VTable,
        SetProgressValue: fn(
            self: *const ITaskbarList3,
            hwnd: HWND,
            ullCompleted: u64,
            ullTotal: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProgressState: fn(
            self: *const ITaskbarList3,
            hwnd: HWND,
            tbpFlags: TBPFLAG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterTab: fn(
            self: *const ITaskbarList3,
            hwndTab: HWND,
            hwndMDI: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterTab: fn(
            self: *const ITaskbarList3,
            hwndTab: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTabOrder: fn(
            self: *const ITaskbarList3,
            hwndTab: HWND,
            hwndInsertBefore: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTabActive: fn(
            self: *const ITaskbarList3,
            hwndTab: HWND,
            hwndMDI: HWND,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ThumbBarAddButtons: fn(
            self: *const ITaskbarList3,
            hwnd: HWND,
            cButtons: u32,
            pButton: [*]THUMBBUTTON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ThumbBarUpdateButtons: fn(
            self: *const ITaskbarList3,
            hwnd: HWND,
            cButtons: u32,
            pButton: [*]THUMBBUTTON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ThumbBarSetImageList: fn(
            self: *const ITaskbarList3,
            hwnd: HWND,
            himl: HIMAGELIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOverlayIcon: fn(
            self: *const ITaskbarList3,
            hwnd: HWND,
            hIcon: HICON,
            pszDescription: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnailTooltip: fn(
            self: *const ITaskbarList3,
            hwnd: HWND,
            pszTip: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnailClip: fn(
            self: *const ITaskbarList3,
            hwnd: HWND,
            prcClip: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ITaskbarList2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList3_SetProgressValue(self: *const T, hwnd: HWND, ullCompleted: u64, ullTotal: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList3.VTable, self.vtable).SetProgressValue(@ptrCast(*const ITaskbarList3, self), hwnd, ullCompleted, ullTotal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList3_SetProgressState(self: *const T, hwnd: HWND, tbpFlags: TBPFLAG) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList3.VTable, self.vtable).SetProgressState(@ptrCast(*const ITaskbarList3, self), hwnd, tbpFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList3_RegisterTab(self: *const T, hwndTab: HWND, hwndMDI: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList3.VTable, self.vtable).RegisterTab(@ptrCast(*const ITaskbarList3, self), hwndTab, hwndMDI);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList3_UnregisterTab(self: *const T, hwndTab: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList3.VTable, self.vtable).UnregisterTab(@ptrCast(*const ITaskbarList3, self), hwndTab);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList3_SetTabOrder(self: *const T, hwndTab: HWND, hwndInsertBefore: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList3.VTable, self.vtable).SetTabOrder(@ptrCast(*const ITaskbarList3, self), hwndTab, hwndInsertBefore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList3_SetTabActive(self: *const T, hwndTab: HWND, hwndMDI: HWND, dwReserved: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList3.VTable, self.vtable).SetTabActive(@ptrCast(*const ITaskbarList3, self), hwndTab, hwndMDI, dwReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList3_ThumbBarAddButtons(self: *const T, hwnd: HWND, cButtons: u32, pButton: [*]THUMBBUTTON) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList3.VTable, self.vtable).ThumbBarAddButtons(@ptrCast(*const ITaskbarList3, self), hwnd, cButtons, pButton);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList3_ThumbBarUpdateButtons(self: *const T, hwnd: HWND, cButtons: u32, pButton: [*]THUMBBUTTON) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList3.VTable, self.vtable).ThumbBarUpdateButtons(@ptrCast(*const ITaskbarList3, self), hwnd, cButtons, pButton);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList3_ThumbBarSetImageList(self: *const T, hwnd: HWND, himl: HIMAGELIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList3.VTable, self.vtable).ThumbBarSetImageList(@ptrCast(*const ITaskbarList3, self), hwnd, himl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList3_SetOverlayIcon(self: *const T, hwnd: HWND, hIcon: HICON, pszDescription: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList3.VTable, self.vtable).SetOverlayIcon(@ptrCast(*const ITaskbarList3, self), hwnd, hIcon, pszDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList3_SetThumbnailTooltip(self: *const T, hwnd: HWND, pszTip: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList3.VTable, self.vtable).SetThumbnailTooltip(@ptrCast(*const ITaskbarList3, self), hwnd, pszTip);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList3_SetThumbnailClip(self: *const T, hwnd: HWND, prcClip: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList3.VTable, self.vtable).SetThumbnailClip(@ptrCast(*const ITaskbarList3, self), hwnd, prcClip);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const STPFLAG = extern enum(i32) {
    STPF_NONE = 0,
    STPF_USEAPPTHUMBNAILALWAYS = 1,
    STPF_USEAPPTHUMBNAILWHENACTIVE = 2,
    STPF_USEAPPPEEKALWAYS = 4,
    STPF_USEAPPPEEKWHENACTIVE = 8,
};
pub const STPF_NONE = STPFLAG.STPF_NONE;
pub const STPF_USEAPPTHUMBNAILALWAYS = STPFLAG.STPF_USEAPPTHUMBNAILALWAYS;
pub const STPF_USEAPPTHUMBNAILWHENACTIVE = STPFLAG.STPF_USEAPPTHUMBNAILWHENACTIVE;
pub const STPF_USEAPPPEEKALWAYS = STPFLAG.STPF_USEAPPPEEKALWAYS;
pub const STPF_USEAPPPEEKWHENACTIVE = STPFLAG.STPF_USEAPPPEEKWHENACTIVE;

const IID_ITaskbarList4_Value = @import("../zig.zig").Guid.initString("C43DC798-95D1-4BEA-9030-BB99E2983A1A");
pub const IID_ITaskbarList4 = &IID_ITaskbarList4_Value;
pub const ITaskbarList4 = extern struct {
    pub const VTable = extern struct {
        base: ITaskbarList3.VTable,
        SetTabProperties: fn(
            self: *const ITaskbarList4,
            hwndTab: HWND,
            stpFlags: STPFLAG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ITaskbarList3.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITaskbarList4_SetTabProperties(self: *const T, hwndTab: HWND, stpFlags: STPFLAG) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITaskbarList4.VTable, self.vtable).SetTabProperties(@ptrCast(*const ITaskbarList4, self), hwndTab, stpFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IExplorerBrowserEvents_Value = @import("../zig.zig").Guid.initString("361BBDC7-E6EE-4E13-BE58-58E2240C810F");
pub const IID_IExplorerBrowserEvents = &IID_IExplorerBrowserEvents_Value;
pub const IExplorerBrowserEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnNavigationPending: fn(
            self: *const IExplorerBrowserEvents,
            pidlFolder: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnViewCreated: fn(
            self: *const IExplorerBrowserEvents,
            psv: *IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNavigationComplete: fn(
            self: *const IExplorerBrowserEvents,
            pidlFolder: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNavigationFailed: fn(
            self: *const IExplorerBrowserEvents,
            pidlFolder: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowserEvents_OnNavigationPending(self: *const T, pidlFolder: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowserEvents.VTable, self.vtable).OnNavigationPending(@ptrCast(*const IExplorerBrowserEvents, self), pidlFolder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowserEvents_OnViewCreated(self: *const T, psv: *IShellView) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowserEvents.VTable, self.vtable).OnViewCreated(@ptrCast(*const IExplorerBrowserEvents, self), psv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowserEvents_OnNavigationComplete(self: *const T, pidlFolder: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowserEvents.VTable, self.vtable).OnNavigationComplete(@ptrCast(*const IExplorerBrowserEvents, self), pidlFolder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowserEvents_OnNavigationFailed(self: *const T, pidlFolder: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowserEvents.VTable, self.vtable).OnNavigationFailed(@ptrCast(*const IExplorerBrowserEvents, self), pidlFolder);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const EXPLORER_BROWSER_OPTIONS = extern enum(i32) {
    EBO_NONE = 0,
    EBO_NAVIGATEONCE = 1,
    EBO_SHOWFRAMES = 2,
    EBO_ALWAYSNAVIGATE = 4,
    EBO_NOTRAVELLOG = 8,
    EBO_NOWRAPPERWINDOW = 16,
    EBO_HTMLSHAREPOINTVIEW = 32,
    EBO_NOBORDER = 64,
    EBO_NOPERSISTVIEWSTATE = 128,
};
pub const EBO_NONE = EXPLORER_BROWSER_OPTIONS.EBO_NONE;
pub const EBO_NAVIGATEONCE = EXPLORER_BROWSER_OPTIONS.EBO_NAVIGATEONCE;
pub const EBO_SHOWFRAMES = EXPLORER_BROWSER_OPTIONS.EBO_SHOWFRAMES;
pub const EBO_ALWAYSNAVIGATE = EXPLORER_BROWSER_OPTIONS.EBO_ALWAYSNAVIGATE;
pub const EBO_NOTRAVELLOG = EXPLORER_BROWSER_OPTIONS.EBO_NOTRAVELLOG;
pub const EBO_NOWRAPPERWINDOW = EXPLORER_BROWSER_OPTIONS.EBO_NOWRAPPERWINDOW;
pub const EBO_HTMLSHAREPOINTVIEW = EXPLORER_BROWSER_OPTIONS.EBO_HTMLSHAREPOINTVIEW;
pub const EBO_NOBORDER = EXPLORER_BROWSER_OPTIONS.EBO_NOBORDER;
pub const EBO_NOPERSISTVIEWSTATE = EXPLORER_BROWSER_OPTIONS.EBO_NOPERSISTVIEWSTATE;

pub const EXPLORER_BROWSER_FILL_FLAGS = extern enum(i32) {
    EBF_NONE = 0,
    EBF_SELECTFROMDATAOBJECT = 256,
    EBF_NODROPTARGET = 512,
};
pub const EBF_NONE = EXPLORER_BROWSER_FILL_FLAGS.EBF_NONE;
pub const EBF_SELECTFROMDATAOBJECT = EXPLORER_BROWSER_FILL_FLAGS.EBF_SELECTFROMDATAOBJECT;
pub const EBF_NODROPTARGET = EXPLORER_BROWSER_FILL_FLAGS.EBF_NODROPTARGET;

const IID_IExplorerBrowser_Value = @import("../zig.zig").Guid.initString("DFD3B6B5-C10C-4BE9-85F6-A66969F402F6");
pub const IID_IExplorerBrowser = &IID_IExplorerBrowser_Value;
pub const IExplorerBrowser = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IExplorerBrowser,
            hwndParent: HWND,
            prc: *const RECT,
            pfs: ?*const FOLDERSETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Destroy: fn(
            self: *const IExplorerBrowser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRect: fn(
            self: *const IExplorerBrowser,
            phdwp: ?*?*c_void,
            rcBrowser: RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPropertyBag: fn(
            self: *const IExplorerBrowser,
            pszPropertyBag: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEmptyText: fn(
            self: *const IExplorerBrowser,
            pszEmptyText: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolderSettings: fn(
            self: *const IExplorerBrowser,
            pfs: *const FOLDERSETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: fn(
            self: *const IExplorerBrowser,
            psbe: *IExplorerBrowserEvents,
            pdwCookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: fn(
            self: *const IExplorerBrowser,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOptions: fn(
            self: *const IExplorerBrowser,
            dwFlag: EXPLORER_BROWSER_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: fn(
            self: *const IExplorerBrowser,
            pdwFlag: *EXPLORER_BROWSER_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrowseToIDList: fn(
            self: *const IExplorerBrowser,
            pidl: *ITEMIDLIST,
            uFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrowseToObject: fn(
            self: *const IExplorerBrowser,
            punk: *IUnknown,
            uFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FillFromObject: fn(
            self: *const IExplorerBrowser,
            punk: *IUnknown,
            dwFlags: EXPLORER_BROWSER_FILL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAll: fn(
            self: *const IExplorerBrowser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentView: fn(
            self: *const IExplorerBrowser,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowser_Initialize(self: *const T, hwndParent: HWND, prc: *const RECT, pfs: ?*const FOLDERSETTINGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowser.VTable, self.vtable).Initialize(@ptrCast(*const IExplorerBrowser, self), hwndParent, prc, pfs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowser_Destroy(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowser.VTable, self.vtable).Destroy(@ptrCast(*const IExplorerBrowser, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowser_SetRect(self: *const T, phdwp: ?*?*c_void, rcBrowser: RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowser.VTable, self.vtable).SetRect(@ptrCast(*const IExplorerBrowser, self), phdwp, rcBrowser);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowser_SetPropertyBag(self: *const T, pszPropertyBag: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowser.VTable, self.vtable).SetPropertyBag(@ptrCast(*const IExplorerBrowser, self), pszPropertyBag);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowser_SetEmptyText(self: *const T, pszEmptyText: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowser.VTable, self.vtable).SetEmptyText(@ptrCast(*const IExplorerBrowser, self), pszEmptyText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowser_SetFolderSettings(self: *const T, pfs: *const FOLDERSETTINGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowser.VTable, self.vtable).SetFolderSettings(@ptrCast(*const IExplorerBrowser, self), pfs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowser_Advise(self: *const T, psbe: *IExplorerBrowserEvents, pdwCookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowser.VTable, self.vtable).Advise(@ptrCast(*const IExplorerBrowser, self), psbe, pdwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowser_Unadvise(self: *const T, dwCookie: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowser.VTable, self.vtable).Unadvise(@ptrCast(*const IExplorerBrowser, self), dwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowser_SetOptions(self: *const T, dwFlag: EXPLORER_BROWSER_OPTIONS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowser.VTable, self.vtable).SetOptions(@ptrCast(*const IExplorerBrowser, self), dwFlag);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowser_GetOptions(self: *const T, pdwFlag: *EXPLORER_BROWSER_OPTIONS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowser.VTable, self.vtable).GetOptions(@ptrCast(*const IExplorerBrowser, self), pdwFlag);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowser_BrowseToIDList(self: *const T, pidl: *ITEMIDLIST, uFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowser.VTable, self.vtable).BrowseToIDList(@ptrCast(*const IExplorerBrowser, self), pidl, uFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowser_BrowseToObject(self: *const T, punk: *IUnknown, uFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowser.VTable, self.vtable).BrowseToObject(@ptrCast(*const IExplorerBrowser, self), punk, uFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowser_FillFromObject(self: *const T, punk: *IUnknown, dwFlags: EXPLORER_BROWSER_FILL_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowser.VTable, self.vtable).FillFromObject(@ptrCast(*const IExplorerBrowser, self), punk, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowser_RemoveAll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowser.VTable, self.vtable).RemoveAll(@ptrCast(*const IExplorerBrowser, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerBrowser_GetCurrentView(self: *const T, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerBrowser.VTable, self.vtable).GetCurrentView(@ptrCast(*const IExplorerBrowser, self), riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumObjects_Value = @import("../zig.zig").Guid.initString("2C1C7E2E-2D0E-4059-831E-1E6F82335C2E");
pub const IID_IEnumObjects = &IID_IEnumObjects_Value;
pub const IEnumObjects = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumObjects,
            celt: u32,
            riid: *const Guid,
            rgelt: [*]*c_void,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumObjects,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumObjects,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumObjects,
            ppenum: **IEnumObjects,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumObjects_Next(self: *const T, celt: u32, riid: *const Guid, rgelt: [*]*c_void, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumObjects.VTable, self.vtable).Next(@ptrCast(*const IEnumObjects, self), celt, riid, rgelt, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumObjects_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumObjects.VTable, self.vtable).Skip(@ptrCast(*const IEnumObjects, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumObjects_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumObjects.VTable, self.vtable).Reset(@ptrCast(*const IEnumObjects, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumObjects_Clone(self: *const T, ppenum: **IEnumObjects) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumObjects.VTable, self.vtable).Clone(@ptrCast(*const IEnumObjects, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _OPPROGDLGF = extern enum(i32) {
    OPPROGDLG_DEFAULT = 0,
    OPPROGDLG_ENABLEPAUSE = 128,
    OPPROGDLG_ALLOWUNDO = 256,
    OPPROGDLG_DONTDISPLAYSOURCEPATH = 512,
    OPPROGDLG_DONTDISPLAYDESTPATH = 1024,
    OPPROGDLG_NOMULTIDAYESTIMATES = 2048,
    OPPROGDLG_DONTDISPLAYLOCATIONS = 4096,
};
pub const OPPROGDLG_DEFAULT = _OPPROGDLGF.OPPROGDLG_DEFAULT;
pub const OPPROGDLG_ENABLEPAUSE = _OPPROGDLGF.OPPROGDLG_ENABLEPAUSE;
pub const OPPROGDLG_ALLOWUNDO = _OPPROGDLGF.OPPROGDLG_ALLOWUNDO;
pub const OPPROGDLG_DONTDISPLAYSOURCEPATH = _OPPROGDLGF.OPPROGDLG_DONTDISPLAYSOURCEPATH;
pub const OPPROGDLG_DONTDISPLAYDESTPATH = _OPPROGDLGF.OPPROGDLG_DONTDISPLAYDESTPATH;
pub const OPPROGDLG_NOMULTIDAYESTIMATES = _OPPROGDLGF.OPPROGDLG_NOMULTIDAYESTIMATES;
pub const OPPROGDLG_DONTDISPLAYLOCATIONS = _OPPROGDLGF.OPPROGDLG_DONTDISPLAYLOCATIONS;

pub const _PDMODE = extern enum(i32) {
    PDM_DEFAULT = 0,
    PDM_RUN = 1,
    PDM_PREFLIGHT = 2,
    PDM_UNDOING = 4,
    PDM_ERRORSBLOCKING = 8,
    PDM_INDETERMINATE = 16,
};
pub const PDM_DEFAULT = _PDMODE.PDM_DEFAULT;
pub const PDM_RUN = _PDMODE.PDM_RUN;
pub const PDM_PREFLIGHT = _PDMODE.PDM_PREFLIGHT;
pub const PDM_UNDOING = _PDMODE.PDM_UNDOING;
pub const PDM_ERRORSBLOCKING = _PDMODE.PDM_ERRORSBLOCKING;
pub const PDM_INDETERMINATE = _PDMODE.PDM_INDETERMINATE;

const IID_IOperationsProgressDialog_Value = @import("../zig.zig").Guid.initString("0C9FB851-E5C9-43EB-A370-F0677B13874C");
pub const IID_IOperationsProgressDialog = &IID_IOperationsProgressDialog_Value;
pub const IOperationsProgressDialog = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartProgressDialog: fn(
            self: *const IOperationsProgressDialog,
            hwndOwner: HWND,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopProgressDialog: fn(
            self: *const IOperationsProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOperation: fn(
            self: *const IOperationsProgressDialog,
            action: SPACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMode: fn(
            self: *const IOperationsProgressDialog,
            mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateProgress: fn(
            self: *const IOperationsProgressDialog,
            ullPointsCurrent: u64,
            ullPointsTotal: u64,
            ullSizeCurrent: u64,
            ullSizeTotal: u64,
            ullItemsCurrent: u64,
            ullItemsTotal: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateLocations: fn(
            self: *const IOperationsProgressDialog,
            psiSource: *IShellItem,
            psiTarget: *IShellItem,
            psiItem: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetTimer: fn(
            self: *const IOperationsProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PauseTimer: fn(
            self: *const IOperationsProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResumeTimer: fn(
            self: *const IOperationsProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMilliseconds: fn(
            self: *const IOperationsProgressDialog,
            pullElapsed: *u64,
            pullRemaining: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOperationStatus: fn(
            self: *const IOperationsProgressDialog,
            popstatus: *PDOPSTATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOperationsProgressDialog_StartProgressDialog(self: *const T, hwndOwner: HWND, flags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOperationsProgressDialog.VTable, self.vtable).StartProgressDialog(@ptrCast(*const IOperationsProgressDialog, self), hwndOwner, flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOperationsProgressDialog_StopProgressDialog(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOperationsProgressDialog.VTable, self.vtable).StopProgressDialog(@ptrCast(*const IOperationsProgressDialog, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOperationsProgressDialog_SetOperation(self: *const T, action: SPACTION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOperationsProgressDialog.VTable, self.vtable).SetOperation(@ptrCast(*const IOperationsProgressDialog, self), action);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOperationsProgressDialog_SetMode(self: *const T, mode: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOperationsProgressDialog.VTable, self.vtable).SetMode(@ptrCast(*const IOperationsProgressDialog, self), mode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOperationsProgressDialog_UpdateProgress(self: *const T, ullPointsCurrent: u64, ullPointsTotal: u64, ullSizeCurrent: u64, ullSizeTotal: u64, ullItemsCurrent: u64, ullItemsTotal: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOperationsProgressDialog.VTable, self.vtable).UpdateProgress(@ptrCast(*const IOperationsProgressDialog, self), ullPointsCurrent, ullPointsTotal, ullSizeCurrent, ullSizeTotal, ullItemsCurrent, ullItemsTotal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOperationsProgressDialog_UpdateLocations(self: *const T, psiSource: *IShellItem, psiTarget: *IShellItem, psiItem: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOperationsProgressDialog.VTable, self.vtable).UpdateLocations(@ptrCast(*const IOperationsProgressDialog, self), psiSource, psiTarget, psiItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOperationsProgressDialog_ResetTimer(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOperationsProgressDialog.VTable, self.vtable).ResetTimer(@ptrCast(*const IOperationsProgressDialog, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOperationsProgressDialog_PauseTimer(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOperationsProgressDialog.VTable, self.vtable).PauseTimer(@ptrCast(*const IOperationsProgressDialog, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOperationsProgressDialog_ResumeTimer(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOperationsProgressDialog.VTable, self.vtable).ResumeTimer(@ptrCast(*const IOperationsProgressDialog, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOperationsProgressDialog_GetMilliseconds(self: *const T, pullElapsed: *u64, pullRemaining: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOperationsProgressDialog.VTable, self.vtable).GetMilliseconds(@ptrCast(*const IOperationsProgressDialog, self), pullElapsed, pullRemaining);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOperationsProgressDialog_GetOperationStatus(self: *const T, popstatus: *PDOPSTATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOperationsProgressDialog.VTable, self.vtable).GetOperationStatus(@ptrCast(*const IOperationsProgressDialog, self), popstatus);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IIOCancelInformation_Value = @import("../zig.zig").Guid.initString("F5B0BF81-8CB5-4B1B-9449-1A159E0C733C");
pub const IID_IIOCancelInformation = &IID_IIOCancelInformation_Value;
pub const IIOCancelInformation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetCancelInformation: fn(
            self: *const IIOCancelInformation,
            dwThreadID: u32,
            uMsgCancel: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCancelInformation: fn(
            self: *const IIOCancelInformation,
            pdwThreadID: ?*u32,
            puMsgCancel: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIOCancelInformation_SetCancelInformation(self: *const T, dwThreadID: u32, uMsgCancel: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIOCancelInformation.VTable, self.vtable).SetCancelInformation(@ptrCast(*const IIOCancelInformation, self), dwThreadID, uMsgCancel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IIOCancelInformation_GetCancelInformation(self: *const T, pdwThreadID: ?*u32, puMsgCancel: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IIOCancelInformation.VTable, self.vtable).GetCancelInformation(@ptrCast(*const IIOCancelInformation, self), pdwThreadID, puMsgCancel);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFileOperation_Value = @import("../zig.zig").Guid.initString("947AAB5F-0A5C-4C13-B4D6-4BF7836FC9F8");
pub const IID_IFileOperation = &IID_IFileOperation_Value;
pub const IFileOperation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: fn(
            self: *const IFileOperation,
            pfops: *IFileOperationProgressSink,
            pdwCookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: fn(
            self: *const IFileOperation,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOperationFlags: fn(
            self: *const IFileOperation,
            dwOperationFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProgressMessage: fn(
            self: *const IFileOperation,
            pszMessage: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProgressDialog: fn(
            self: *const IFileOperation,
            popd: *IOperationsProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperties: fn(
            self: *const IFileOperation,
            pproparray: *IPropertyChangeArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOwnerWindow: fn(
            self: *const IFileOperation,
            hwndOwner: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ApplyPropertiesToItem: fn(
            self: *const IFileOperation,
            psiItem: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ApplyPropertiesToItems: fn(
            self: *const IFileOperation,
            punkItems: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenameItem: fn(
            self: *const IFileOperation,
            psiItem: *IShellItem,
            pszNewName: [*:0]const u16,
            pfopsItem: *IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenameItems: fn(
            self: *const IFileOperation,
            pUnkItems: *IUnknown,
            pszNewName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveItem: fn(
            self: *const IFileOperation,
            psiItem: *IShellItem,
            psiDestinationFolder: *IShellItem,
            pszNewName: [*:0]const u16,
            pfopsItem: *IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveItems: fn(
            self: *const IFileOperation,
            punkItems: *IUnknown,
            psiDestinationFolder: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyItem: fn(
            self: *const IFileOperation,
            psiItem: *IShellItem,
            psiDestinationFolder: *IShellItem,
            pszCopyName: [*:0]const u16,
            pfopsItem: *IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyItems: fn(
            self: *const IFileOperation,
            punkItems: *IUnknown,
            psiDestinationFolder: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItem: fn(
            self: *const IFileOperation,
            psiItem: *IShellItem,
            pfopsItem: *IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItems: fn(
            self: *const IFileOperation,
            punkItems: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NewItem: fn(
            self: *const IFileOperation,
            psiDestinationFolder: *IShellItem,
            dwFileAttributes: u32,
            pszName: [*:0]const u16,
            pszTemplateName: [*:0]const u16,
            pfopsItem: *IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PerformOperations: fn(
            self: *const IFileOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAnyOperationsAborted: fn(
            self: *const IFileOperation,
            pfAnyOperationsAborted: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_Advise(self: *const T, pfops: *IFileOperationProgressSink, pdwCookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).Advise(@ptrCast(*const IFileOperation, self), pfops, pdwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_Unadvise(self: *const T, dwCookie: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).Unadvise(@ptrCast(*const IFileOperation, self), dwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_SetOperationFlags(self: *const T, dwOperationFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).SetOperationFlags(@ptrCast(*const IFileOperation, self), dwOperationFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_SetProgressMessage(self: *const T, pszMessage: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).SetProgressMessage(@ptrCast(*const IFileOperation, self), pszMessage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_SetProgressDialog(self: *const T, popd: *IOperationsProgressDialog) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).SetProgressDialog(@ptrCast(*const IFileOperation, self), popd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_SetProperties(self: *const T, pproparray: *IPropertyChangeArray) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).SetProperties(@ptrCast(*const IFileOperation, self), pproparray);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_SetOwnerWindow(self: *const T, hwndOwner: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).SetOwnerWindow(@ptrCast(*const IFileOperation, self), hwndOwner);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_ApplyPropertiesToItem(self: *const T, psiItem: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).ApplyPropertiesToItem(@ptrCast(*const IFileOperation, self), psiItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_ApplyPropertiesToItems(self: *const T, punkItems: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).ApplyPropertiesToItems(@ptrCast(*const IFileOperation, self), punkItems);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_RenameItem(self: *const T, psiItem: *IShellItem, pszNewName: [*:0]const u16, pfopsItem: *IFileOperationProgressSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).RenameItem(@ptrCast(*const IFileOperation, self), psiItem, pszNewName, pfopsItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_RenameItems(self: *const T, pUnkItems: *IUnknown, pszNewName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).RenameItems(@ptrCast(*const IFileOperation, self), pUnkItems, pszNewName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_MoveItem(self: *const T, psiItem: *IShellItem, psiDestinationFolder: *IShellItem, pszNewName: [*:0]const u16, pfopsItem: *IFileOperationProgressSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).MoveItem(@ptrCast(*const IFileOperation, self), psiItem, psiDestinationFolder, pszNewName, pfopsItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_MoveItems(self: *const T, punkItems: *IUnknown, psiDestinationFolder: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).MoveItems(@ptrCast(*const IFileOperation, self), punkItems, psiDestinationFolder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_CopyItem(self: *const T, psiItem: *IShellItem, psiDestinationFolder: *IShellItem, pszCopyName: [*:0]const u16, pfopsItem: *IFileOperationProgressSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).CopyItem(@ptrCast(*const IFileOperation, self), psiItem, psiDestinationFolder, pszCopyName, pfopsItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_CopyItems(self: *const T, punkItems: *IUnknown, psiDestinationFolder: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).CopyItems(@ptrCast(*const IFileOperation, self), punkItems, psiDestinationFolder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_DeleteItem(self: *const T, psiItem: *IShellItem, pfopsItem: *IFileOperationProgressSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).DeleteItem(@ptrCast(*const IFileOperation, self), psiItem, pfopsItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_DeleteItems(self: *const T, punkItems: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).DeleteItems(@ptrCast(*const IFileOperation, self), punkItems);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_NewItem(self: *const T, psiDestinationFolder: *IShellItem, dwFileAttributes: u32, pszName: [*:0]const u16, pszTemplateName: [*:0]const u16, pfopsItem: *IFileOperationProgressSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).NewItem(@ptrCast(*const IFileOperation, self), psiDestinationFolder, dwFileAttributes, pszName, pszTemplateName, pfopsItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_PerformOperations(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).PerformOperations(@ptrCast(*const IFileOperation, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation_GetAnyOperationsAborted(self: *const T, pfAnyOperationsAborted: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation.VTable, self.vtable).GetAnyOperationsAborted(@ptrCast(*const IFileOperation, self), pfAnyOperationsAborted);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const FILE_OPERATION_FLAGS2 = extern enum(i32) {
    FOF2_NONE = 0,
    FOF2_MERGEFOLDERSONCOLLISION = 1,
};
pub const FOF2_NONE = FILE_OPERATION_FLAGS2.FOF2_NONE;
pub const FOF2_MERGEFOLDERSONCOLLISION = FILE_OPERATION_FLAGS2.FOF2_MERGEFOLDERSONCOLLISION;

const IID_IFileOperation2_Value = @import("../zig.zig").Guid.initString("CD8F23C1-8F61-4916-909D-55BDD0918753");
pub const IID_IFileOperation2 = &IID_IFileOperation2_Value;
pub const IFileOperation2 = extern struct {
    pub const VTable = extern struct {
        base: IFileOperation.VTable,
        SetOperationFlags2: fn(
            self: *const IFileOperation2,
            operationFlags2: FILE_OPERATION_FLAGS2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IFileOperation.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOperation2_SetOperationFlags2(self: *const T, operationFlags2: FILE_OPERATION_FLAGS2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOperation2.VTable, self.vtable).SetOperationFlags2(@ptrCast(*const IFileOperation2, self), operationFlags2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjectProvider_Value = @import("../zig.zig").Guid.initString("A6087428-3BE3-4D73-B308-7C04A540BF1A");
pub const IID_IObjectProvider = &IID_IObjectProvider_Value;
pub const IObjectProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryObject: fn(
            self: *const IObjectProvider,
            guidObject: *const Guid,
            riid: *const Guid,
            ppvOut: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectProvider_QueryObject(self: *const T, guidObject: *const Guid, riid: *const Guid, ppvOut: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectProvider.VTable, self.vtable).QueryObject(@ptrCast(*const IObjectProvider, self), guidObject, riid, ppvOut);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_INamespaceWalkCB_Value = @import("../zig.zig").Guid.initString("D92995F8-CF5E-4A76-BF59-EAD39EA2B97E");
pub const IID_INamespaceWalkCB = &IID_INamespaceWalkCB_Value;
pub const INamespaceWalkCB = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FoundItem: fn(
            self: *const INamespaceWalkCB,
            psf: *IShellFolder,
            pidl: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnterFolder: fn(
            self: *const INamespaceWalkCB,
            psf: *IShellFolder,
            pidl: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LeaveFolder: fn(
            self: *const INamespaceWalkCB,
            psf: *IShellFolder,
            pidl: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeProgressDialog: fn(
            self: *const INamespaceWalkCB,
            ppszTitle: *PWSTR,
            ppszCancel: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INamespaceWalkCB_FoundItem(self: *const T, psf: *IShellFolder, pidl: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const INamespaceWalkCB.VTable, self.vtable).FoundItem(@ptrCast(*const INamespaceWalkCB, self), psf, pidl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INamespaceWalkCB_EnterFolder(self: *const T, psf: *IShellFolder, pidl: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const INamespaceWalkCB.VTable, self.vtable).EnterFolder(@ptrCast(*const INamespaceWalkCB, self), psf, pidl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INamespaceWalkCB_LeaveFolder(self: *const T, psf: *IShellFolder, pidl: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const INamespaceWalkCB.VTable, self.vtable).LeaveFolder(@ptrCast(*const INamespaceWalkCB, self), psf, pidl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INamespaceWalkCB_InitializeProgressDialog(self: *const T, ppszTitle: *PWSTR, ppszCancel: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const INamespaceWalkCB.VTable, self.vtable).InitializeProgressDialog(@ptrCast(*const INamespaceWalkCB, self), ppszTitle, ppszCancel);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_INamespaceWalkCB2_Value = @import("../zig.zig").Guid.initString("7AC7492B-C38E-438A-87DB-68737844FF70");
pub const IID_INamespaceWalkCB2 = &IID_INamespaceWalkCB2_Value;
pub const INamespaceWalkCB2 = extern struct {
    pub const VTable = extern struct {
        base: INamespaceWalkCB.VTable,
        WalkComplete: fn(
            self: *const INamespaceWalkCB2,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace INamespaceWalkCB.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INamespaceWalkCB2_WalkComplete(self: *const T, hr: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const INamespaceWalkCB2.VTable, self.vtable).WalkComplete(@ptrCast(*const INamespaceWalkCB2, self), hr);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const NAMESPACEWALKFLAG = extern enum(i32) {
    NSWF_DEFAULT = 0,
    NSWF_NONE_IMPLIES_ALL = 1,
    NSWF_ONE_IMPLIES_ALL = 2,
    NSWF_DONT_TRAVERSE_LINKS = 4,
    NSWF_DONT_ACCUMULATE_RESULT = 8,
    NSWF_TRAVERSE_STREAM_JUNCTIONS = 16,
    NSWF_FILESYSTEM_ONLY = 32,
    NSWF_SHOW_PROGRESS = 64,
    NSWF_FLAG_VIEWORDER = 128,
    NSWF_IGNORE_AUTOPLAY_HIDA = 256,
    NSWF_ASYNC = 512,
    NSWF_DONT_RESOLVE_LINKS = 1024,
    NSWF_ACCUMULATE_FOLDERS = 2048,
    NSWF_DONT_SORT = 4096,
    NSWF_USE_TRANSFER_MEDIUM = 8192,
    NSWF_DONT_TRAVERSE_STREAM_JUNCTIONS = 16384,
    NSWF_ANY_IMPLIES_ALL = 32768,
};
pub const NSWF_DEFAULT = NAMESPACEWALKFLAG.NSWF_DEFAULT;
pub const NSWF_NONE_IMPLIES_ALL = NAMESPACEWALKFLAG.NSWF_NONE_IMPLIES_ALL;
pub const NSWF_ONE_IMPLIES_ALL = NAMESPACEWALKFLAG.NSWF_ONE_IMPLIES_ALL;
pub const NSWF_DONT_TRAVERSE_LINKS = NAMESPACEWALKFLAG.NSWF_DONT_TRAVERSE_LINKS;
pub const NSWF_DONT_ACCUMULATE_RESULT = NAMESPACEWALKFLAG.NSWF_DONT_ACCUMULATE_RESULT;
pub const NSWF_TRAVERSE_STREAM_JUNCTIONS = NAMESPACEWALKFLAG.NSWF_TRAVERSE_STREAM_JUNCTIONS;
pub const NSWF_FILESYSTEM_ONLY = NAMESPACEWALKFLAG.NSWF_FILESYSTEM_ONLY;
pub const NSWF_SHOW_PROGRESS = NAMESPACEWALKFLAG.NSWF_SHOW_PROGRESS;
pub const NSWF_FLAG_VIEWORDER = NAMESPACEWALKFLAG.NSWF_FLAG_VIEWORDER;
pub const NSWF_IGNORE_AUTOPLAY_HIDA = NAMESPACEWALKFLAG.NSWF_IGNORE_AUTOPLAY_HIDA;
pub const NSWF_ASYNC = NAMESPACEWALKFLAG.NSWF_ASYNC;
pub const NSWF_DONT_RESOLVE_LINKS = NAMESPACEWALKFLAG.NSWF_DONT_RESOLVE_LINKS;
pub const NSWF_ACCUMULATE_FOLDERS = NAMESPACEWALKFLAG.NSWF_ACCUMULATE_FOLDERS;
pub const NSWF_DONT_SORT = NAMESPACEWALKFLAG.NSWF_DONT_SORT;
pub const NSWF_USE_TRANSFER_MEDIUM = NAMESPACEWALKFLAG.NSWF_USE_TRANSFER_MEDIUM;
pub const NSWF_DONT_TRAVERSE_STREAM_JUNCTIONS = NAMESPACEWALKFLAG.NSWF_DONT_TRAVERSE_STREAM_JUNCTIONS;
pub const NSWF_ANY_IMPLIES_ALL = NAMESPACEWALKFLAG.NSWF_ANY_IMPLIES_ALL;

const IID_INamespaceWalk_Value = @import("../zig.zig").Guid.initString("57CED8A7-3F4A-432C-9350-30F24483F74F");
pub const IID_INamespaceWalk = &IID_INamespaceWalk_Value;
pub const INamespaceWalk = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Walk: fn(
            self: *const INamespaceWalk,
            punkToWalk: *IUnknown,
            dwFlags: u32,
            cDepth: i32,
            pnswcb: *INamespaceWalkCB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDArrayResult: fn(
            self: *const INamespaceWalk,
            pcItems: *u32,
            prgpidl: [*]**ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INamespaceWalk_Walk(self: *const T, punkToWalk: *IUnknown, dwFlags: u32, cDepth: i32, pnswcb: *INamespaceWalkCB) callconv(.Inline) HRESULT {
            return @ptrCast(*const INamespaceWalk.VTable, self.vtable).Walk(@ptrCast(*const INamespaceWalk, self), punkToWalk, dwFlags, cDepth, pnswcb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INamespaceWalk_GetIDArrayResult(self: *const T, pcItems: *u32, prgpidl: [*]**ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const INamespaceWalk.VTable, self.vtable).GetIDArrayResult(@ptrCast(*const INamespaceWalk, self), pcItems, prgpidl);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const BANDSITEINFO = extern struct {
    dwMask: u32,
    dwState: u32,
    dwStyle: u32,
};

pub const tagBANDSITECID = extern enum(i32) {
    BSID_BANDADDED = 0,
    BSID_BANDREMOVED = 1,
};
pub const BSID_BANDADDED = tagBANDSITECID.BSID_BANDADDED;
pub const BSID_BANDREMOVED = tagBANDSITECID.BSID_BANDREMOVED;

const IID_IBandSite_Value = @import("../zig.zig").Guid.initString("4CF504B0-DE96-11D0-8B3F-00A0C911E8E5");
pub const IID_IBandSite = &IID_IBandSite_Value;
pub const IBandSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddBand: fn(
            self: *const IBandSite,
            punk: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumBands: fn(
            self: *const IBandSite,
            uBand: u32,
            pdwBandID: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryBand: fn(
            self: *const IBandSite,
            dwBandID: u32,
            ppstb: ?*?*IDeskBand,
            pdwState: ?*u32,
            pszName: ?[*:0]u16,
            cchName: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBandState: fn(
            self: *const IBandSite,
            dwBandID: u32,
            dwMask: u32,
            dwState: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveBand: fn(
            self: *const IBandSite,
            dwBandID: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBandObject: fn(
            self: *const IBandSite,
            dwBandID: u32,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBandSiteInfo: fn(
            self: *const IBandSite,
            pbsinfo: *const BANDSITEINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBandSiteInfo: fn(
            self: *const IBandSite,
            pbsinfo: *BANDSITEINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBandSite_AddBand(self: *const T, punk: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBandSite.VTable, self.vtable).AddBand(@ptrCast(*const IBandSite, self), punk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBandSite_EnumBands(self: *const T, uBand: u32, pdwBandID: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBandSite.VTable, self.vtable).EnumBands(@ptrCast(*const IBandSite, self), uBand, pdwBandID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBandSite_QueryBand(self: *const T, dwBandID: u32, ppstb: ?*?*IDeskBand, pdwState: ?*u32, pszName: ?[*:0]u16, cchName: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBandSite.VTable, self.vtable).QueryBand(@ptrCast(*const IBandSite, self), dwBandID, ppstb, pdwState, pszName, cchName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBandSite_SetBandState(self: *const T, dwBandID: u32, dwMask: u32, dwState: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBandSite.VTable, self.vtable).SetBandState(@ptrCast(*const IBandSite, self), dwBandID, dwMask, dwState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBandSite_RemoveBand(self: *const T, dwBandID: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBandSite.VTable, self.vtable).RemoveBand(@ptrCast(*const IBandSite, self), dwBandID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBandSite_GetBandObject(self: *const T, dwBandID: u32, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBandSite.VTable, self.vtable).GetBandObject(@ptrCast(*const IBandSite, self), dwBandID, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBandSite_SetBandSiteInfo(self: *const T, pbsinfo: *const BANDSITEINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBandSite.VTable, self.vtable).SetBandSiteInfo(@ptrCast(*const IBandSite, self), pbsinfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBandSite_GetBandSiteInfo(self: *const T, pbsinfo: *BANDSITEINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBandSite.VTable, self.vtable).GetBandSiteInfo(@ptrCast(*const IBandSite, self), pbsinfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IModalWindow_Value = @import("../zig.zig").Guid.initString("B4DB1657-70D7-485E-8E3E-6FCB5A5C1802");
pub const IID_IModalWindow = &IID_IModalWindow_Value;
pub const IModalWindow = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Show: fn(
            self: *const IModalWindow,
            hwndOwner: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IModalWindow_Show(self: *const T, hwndOwner: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IModalWindow.VTable, self.vtable).Show(@ptrCast(*const IModalWindow, self), hwndOwner);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IContextMenuSite_Value = @import("../zig.zig").Guid.initString("0811AEBE-0B87-4C54-9E72-548CF649016B");
pub const IID_IContextMenuSite = &IID_IContextMenuSite_Value;
pub const IContextMenuSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DoContextMenuPopup: fn(
            self: *const IContextMenuSite,
            punkContextMenu: *IUnknown,
            fFlags: u32,
            pt: POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContextMenuSite_DoContextMenuPopup(self: *const T, punkContextMenu: *IUnknown, fFlags: u32, pt: POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContextMenuSite.VTable, self.vtable).DoContextMenuPopup(@ptrCast(*const IContextMenuSite, self), punkContextMenu, fFlags, pt);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const tagMENUBANDHANDLERCID = extern enum(i32) {
    MBHANDCID_PIDLSELECT = 0,
};
pub const MBHANDCID_PIDLSELECT = tagMENUBANDHANDLERCID.MBHANDCID_PIDLSELECT;

const IID_IMenuBand_Value = @import("../zig.zig").Guid.initString("568804CD-CBD7-11D0-9816-00C04FD91972");
pub const IID_IMenuBand = &IID_IMenuBand_Value;
pub const IMenuBand = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsMenuMessage: fn(
            self: *const IMenuBand,
            pmsg: *MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateMenuMessage: fn(
            self: *const IMenuBand,
            pmsg: *MSG,
            plRet: *LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMenuBand_IsMenuMessage(self: *const T, pmsg: *MSG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMenuBand.VTable, self.vtable).IsMenuMessage(@ptrCast(*const IMenuBand, self), pmsg);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMenuBand_TranslateMenuMessage(self: *const T, pmsg: *MSG, plRet: *LRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMenuBand.VTable, self.vtable).TranslateMenuMessage(@ptrCast(*const IMenuBand, self), pmsg, plRet);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRegTreeItem_Value = @import("../zig.zig").Guid.initString("A9521922-0812-4D44-9EC3-7FD38C726F3D");
pub const IID_IRegTreeItem = &IID_IRegTreeItem_Value;
pub const IRegTreeItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCheckState: fn(
            self: *const IRegTreeItem,
            pbCheck: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCheckState: fn(
            self: *const IRegTreeItem,
            bCheck: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRegTreeItem_GetCheckState(self: *const T, pbCheck: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRegTreeItem.VTable, self.vtable).GetCheckState(@ptrCast(*const IRegTreeItem, self), pbCheck);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRegTreeItem_SetCheckState(self: *const T, bCheck: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRegTreeItem.VTable, self.vtable).SetCheckState(@ptrCast(*const IRegTreeItem, self), bCheck);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDeskBar_Value = @import("../zig.zig").Guid.initString("EB0FE173-1A3A-11D0-89B3-00A0C90A90AC");
pub const IID_IDeskBar = &IID_IDeskBar_Value;
pub const IDeskBar = extern struct {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        SetClient: fn(
            self: *const IDeskBar,
            punkClient: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClient: fn(
            self: *const IDeskBar,
            ppunkClient: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnPosRectChangeDB: fn(
            self: *const IDeskBar,
            prc: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOleWindow.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDeskBar_SetClient(self: *const T, punkClient: ?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDeskBar.VTable, self.vtable).SetClient(@ptrCast(*const IDeskBar, self), punkClient);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDeskBar_GetClient(self: *const T, ppunkClient: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDeskBar.VTable, self.vtable).GetClient(@ptrCast(*const IDeskBar, self), ppunkClient);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDeskBar_OnPosRectChangeDB(self: *const T, prc: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDeskBar.VTable, self.vtable).OnPosRectChangeDB(@ptrCast(*const IDeskBar, self), prc);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const tagMENUPOPUPSELECT = extern enum(i32) {
    MPOS_EXECUTE = 0,
    MPOS_FULLCANCEL = 1,
    MPOS_CANCELLEVEL = 2,
    MPOS_SELECTLEFT = 3,
    MPOS_SELECTRIGHT = 4,
    MPOS_CHILDTRACKING = 5,
};
pub const MPOS_EXECUTE = tagMENUPOPUPSELECT.MPOS_EXECUTE;
pub const MPOS_FULLCANCEL = tagMENUPOPUPSELECT.MPOS_FULLCANCEL;
pub const MPOS_CANCELLEVEL = tagMENUPOPUPSELECT.MPOS_CANCELLEVEL;
pub const MPOS_SELECTLEFT = tagMENUPOPUPSELECT.MPOS_SELECTLEFT;
pub const MPOS_SELECTRIGHT = tagMENUPOPUPSELECT.MPOS_SELECTRIGHT;
pub const MPOS_CHILDTRACKING = tagMENUPOPUPSELECT.MPOS_CHILDTRACKING;

pub const tagMENUPOPUPPOPUPFLAGS = extern enum(i32) {
    MPPF_SETFOCUS = 1,
    MPPF_INITIALSELECT = 2,
    MPPF_NOANIMATE = 4,
    MPPF_KEYBOARD = 16,
    MPPF_REPOSITION = 32,
    MPPF_FORCEZORDER = 64,
    MPPF_FINALSELECT = 128,
    MPPF_TOP = 536870912,
    MPPF_LEFT = 1073741824,
    MPPF_RIGHT = 1610612736,
    MPPF_BOTTOM = -2147483648,
    MPPF_POS_MASK = -536870912,
    MPPF_ALIGN_LEFT = 33554432,
    MPPF_ALIGN_RIGHT = 67108864,
};
pub const MPPF_SETFOCUS = tagMENUPOPUPPOPUPFLAGS.MPPF_SETFOCUS;
pub const MPPF_INITIALSELECT = tagMENUPOPUPPOPUPFLAGS.MPPF_INITIALSELECT;
pub const MPPF_NOANIMATE = tagMENUPOPUPPOPUPFLAGS.MPPF_NOANIMATE;
pub const MPPF_KEYBOARD = tagMENUPOPUPPOPUPFLAGS.MPPF_KEYBOARD;
pub const MPPF_REPOSITION = tagMENUPOPUPPOPUPFLAGS.MPPF_REPOSITION;
pub const MPPF_FORCEZORDER = tagMENUPOPUPPOPUPFLAGS.MPPF_FORCEZORDER;
pub const MPPF_FINALSELECT = tagMENUPOPUPPOPUPFLAGS.MPPF_FINALSELECT;
pub const MPPF_TOP = tagMENUPOPUPPOPUPFLAGS.MPPF_TOP;
pub const MPPF_LEFT = tagMENUPOPUPPOPUPFLAGS.MPPF_LEFT;
pub const MPPF_RIGHT = tagMENUPOPUPPOPUPFLAGS.MPPF_RIGHT;
pub const MPPF_BOTTOM = tagMENUPOPUPPOPUPFLAGS.MPPF_BOTTOM;
pub const MPPF_POS_MASK = tagMENUPOPUPPOPUPFLAGS.MPPF_POS_MASK;
pub const MPPF_ALIGN_LEFT = tagMENUPOPUPPOPUPFLAGS.MPPF_ALIGN_LEFT;
pub const MPPF_ALIGN_RIGHT = tagMENUPOPUPPOPUPFLAGS.MPPF_ALIGN_RIGHT;

const IID_IMenuPopup_Value = @import("../zig.zig").Guid.initString("D1E7AFEB-6A2E-11D0-8C78-00C04FD918B4");
pub const IID_IMenuPopup = &IID_IMenuPopup_Value;
pub const IMenuPopup = extern struct {
    pub const VTable = extern struct {
        base: IDeskBar.VTable,
        Popup: fn(
            self: *const IMenuPopup,
            ppt: *POINTL,
            prcExclude: ?*RECTL,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSelect: fn(
            self: *const IMenuPopup,
            dwSelectType: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSubMenu: fn(
            self: *const IMenuPopup,
            pmp: *IMenuPopup,
            fSet: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDeskBar.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMenuPopup_Popup(self: *const T, ppt: *POINTL, prcExclude: ?*RECTL, dwFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMenuPopup.VTable, self.vtable).Popup(@ptrCast(*const IMenuPopup, self), ppt, prcExclude, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMenuPopup_OnSelect(self: *const T, dwSelectType: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMenuPopup.VTable, self.vtable).OnSelect(@ptrCast(*const IMenuPopup, self), dwSelectType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMenuPopup_SetSubMenu(self: *const T, pmp: *IMenuPopup, fSet: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMenuPopup.VTable, self.vtable).SetSubMenu(@ptrCast(*const IMenuPopup, self), pmp, fSet);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const FILE_USAGE_TYPE = extern enum(i32) {
    FUT_PLAYING = 0,
    FUT_EDITING = 1,
    FUT_GENERIC = 2,
};
pub const FUT_PLAYING = FILE_USAGE_TYPE.FUT_PLAYING;
pub const FUT_EDITING = FILE_USAGE_TYPE.FUT_EDITING;
pub const FUT_GENERIC = FILE_USAGE_TYPE.FUT_GENERIC;

const IID_IFileIsInUse_Value = @import("../zig.zig").Guid.initString("64A1CBF0-3A1A-4461-9158-376969693950");
pub const IID_IFileIsInUse = &IID_IFileIsInUse_Value;
pub const IFileIsInUse = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAppName: fn(
            self: *const IFileIsInUse,
            ppszName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUsage: fn(
            self: *const IFileIsInUse,
            pfut: *FILE_USAGE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCapabilities: fn(
            self: *const IFileIsInUse,
            pdwCapFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSwitchToHWND: fn(
            self: *const IFileIsInUse,
            phwnd: *HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseFile: fn(
            self: *const IFileIsInUse,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileIsInUse_GetAppName(self: *const T, ppszName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileIsInUse.VTable, self.vtable).GetAppName(@ptrCast(*const IFileIsInUse, self), ppszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileIsInUse_GetUsage(self: *const T, pfut: *FILE_USAGE_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileIsInUse.VTable, self.vtable).GetUsage(@ptrCast(*const IFileIsInUse, self), pfut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileIsInUse_GetCapabilities(self: *const T, pdwCapFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileIsInUse.VTable, self.vtable).GetCapabilities(@ptrCast(*const IFileIsInUse, self), pdwCapFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileIsInUse_GetSwitchToHWND(self: *const T, phwnd: *HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileIsInUse.VTable, self.vtable).GetSwitchToHWND(@ptrCast(*const IFileIsInUse, self), phwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileIsInUse_CloseFile(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileIsInUse.VTable, self.vtable).CloseFile(@ptrCast(*const IFileIsInUse, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const FDE_OVERWRITE_RESPONSE = extern enum(i32) {
    FDEOR_DEFAULT = 0,
    FDEOR_ACCEPT = 1,
    FDEOR_REFUSE = 2,
};
pub const FDEOR_DEFAULT = FDE_OVERWRITE_RESPONSE.FDEOR_DEFAULT;
pub const FDEOR_ACCEPT = FDE_OVERWRITE_RESPONSE.FDEOR_ACCEPT;
pub const FDEOR_REFUSE = FDE_OVERWRITE_RESPONSE.FDEOR_REFUSE;

pub const FDE_SHAREVIOLATION_RESPONSE = extern enum(i32) {
    FDESVR_DEFAULT = 0,
    FDESVR_ACCEPT = 1,
    FDESVR_REFUSE = 2,
};
pub const FDESVR_DEFAULT = FDE_SHAREVIOLATION_RESPONSE.FDESVR_DEFAULT;
pub const FDESVR_ACCEPT = FDE_SHAREVIOLATION_RESPONSE.FDESVR_ACCEPT;
pub const FDESVR_REFUSE = FDE_SHAREVIOLATION_RESPONSE.FDESVR_REFUSE;

pub const FDAP = extern enum(i32) {
    BOTTOM = 0,
    TOP = 1,
};
pub const FDAP_BOTTOM = FDAP.BOTTOM;
pub const FDAP_TOP = FDAP.TOP;

const IID_IFileDialogEvents_Value = @import("../zig.zig").Guid.initString("973510DB-7D7F-452B-8975-74A85828D354");
pub const IID_IFileDialogEvents = &IID_IFileDialogEvents_Value;
pub const IFileDialogEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnFileOk: fn(
            self: *const IFileDialogEvents,
            pfd: *IFileDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnFolderChanging: fn(
            self: *const IFileDialogEvents,
            pfd: *IFileDialog,
            psiFolder: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnFolderChange: fn(
            self: *const IFileDialogEvents,
            pfd: *IFileDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSelectionChange: fn(
            self: *const IFileDialogEvents,
            pfd: *IFileDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnShareViolation: fn(
            self: *const IFileDialogEvents,
            pfd: *IFileDialog,
            psi: *IShellItem,
            pResponse: *FDE_SHAREVIOLATION_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTypeChange: fn(
            self: *const IFileDialogEvents,
            pfd: *IFileDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOverwrite: fn(
            self: *const IFileDialogEvents,
            pfd: *IFileDialog,
            psi: *IShellItem,
            pResponse: *FDE_OVERWRITE_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogEvents_OnFileOk(self: *const T, pfd: *IFileDialog) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogEvents.VTable, self.vtable).OnFileOk(@ptrCast(*const IFileDialogEvents, self), pfd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogEvents_OnFolderChanging(self: *const T, pfd: *IFileDialog, psiFolder: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogEvents.VTable, self.vtable).OnFolderChanging(@ptrCast(*const IFileDialogEvents, self), pfd, psiFolder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogEvents_OnFolderChange(self: *const T, pfd: *IFileDialog) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogEvents.VTable, self.vtable).OnFolderChange(@ptrCast(*const IFileDialogEvents, self), pfd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogEvents_OnSelectionChange(self: *const T, pfd: *IFileDialog) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogEvents.VTable, self.vtable).OnSelectionChange(@ptrCast(*const IFileDialogEvents, self), pfd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogEvents_OnShareViolation(self: *const T, pfd: *IFileDialog, psi: *IShellItem, pResponse: *FDE_SHAREVIOLATION_RESPONSE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogEvents.VTable, self.vtable).OnShareViolation(@ptrCast(*const IFileDialogEvents, self), pfd, psi, pResponse);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogEvents_OnTypeChange(self: *const T, pfd: *IFileDialog) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogEvents.VTable, self.vtable).OnTypeChange(@ptrCast(*const IFileDialogEvents, self), pfd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogEvents_OnOverwrite(self: *const T, pfd: *IFileDialog, psi: *IShellItem, pResponse: *FDE_OVERWRITE_RESPONSE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogEvents.VTable, self.vtable).OnOverwrite(@ptrCast(*const IFileDialogEvents, self), pfd, psi, pResponse);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _FILEOPENDIALOGOPTIONS = extern enum(i32) {
    FOS_OVERWRITEPROMPT = 2,
    FOS_STRICTFILETYPES = 4,
    FOS_NOCHANGEDIR = 8,
    FOS_PICKFOLDERS = 32,
    FOS_FORCEFILESYSTEM = 64,
    FOS_ALLNONSTORAGEITEMS = 128,
    FOS_NOVALIDATE = 256,
    FOS_ALLOWMULTISELECT = 512,
    FOS_PATHMUSTEXIST = 2048,
    FOS_FILEMUSTEXIST = 4096,
    FOS_CREATEPROMPT = 8192,
    FOS_SHAREAWARE = 16384,
    FOS_NOREADONLYRETURN = 32768,
    FOS_NOTESTFILECREATE = 65536,
    FOS_HIDEMRUPLACES = 131072,
    FOS_HIDEPINNEDPLACES = 262144,
    FOS_NODEREFERENCELINKS = 1048576,
    FOS_OKBUTTONNEEDSINTERACTION = 2097152,
    FOS_DONTADDTORECENT = 33554432,
    FOS_FORCESHOWHIDDEN = 268435456,
    FOS_DEFAULTNOMINIMODE = 536870912,
    FOS_FORCEPREVIEWPANEON = 1073741824,
    FOS_SUPPORTSTREAMABLEITEMS = -2147483648,
};
pub const FOS_OVERWRITEPROMPT = _FILEOPENDIALOGOPTIONS.FOS_OVERWRITEPROMPT;
pub const FOS_STRICTFILETYPES = _FILEOPENDIALOGOPTIONS.FOS_STRICTFILETYPES;
pub const FOS_NOCHANGEDIR = _FILEOPENDIALOGOPTIONS.FOS_NOCHANGEDIR;
pub const FOS_PICKFOLDERS = _FILEOPENDIALOGOPTIONS.FOS_PICKFOLDERS;
pub const FOS_FORCEFILESYSTEM = _FILEOPENDIALOGOPTIONS.FOS_FORCEFILESYSTEM;
pub const FOS_ALLNONSTORAGEITEMS = _FILEOPENDIALOGOPTIONS.FOS_ALLNONSTORAGEITEMS;
pub const FOS_NOVALIDATE = _FILEOPENDIALOGOPTIONS.FOS_NOVALIDATE;
pub const FOS_ALLOWMULTISELECT = _FILEOPENDIALOGOPTIONS.FOS_ALLOWMULTISELECT;
pub const FOS_PATHMUSTEXIST = _FILEOPENDIALOGOPTIONS.FOS_PATHMUSTEXIST;
pub const FOS_FILEMUSTEXIST = _FILEOPENDIALOGOPTIONS.FOS_FILEMUSTEXIST;
pub const FOS_CREATEPROMPT = _FILEOPENDIALOGOPTIONS.FOS_CREATEPROMPT;
pub const FOS_SHAREAWARE = _FILEOPENDIALOGOPTIONS.FOS_SHAREAWARE;
pub const FOS_NOREADONLYRETURN = _FILEOPENDIALOGOPTIONS.FOS_NOREADONLYRETURN;
pub const FOS_NOTESTFILECREATE = _FILEOPENDIALOGOPTIONS.FOS_NOTESTFILECREATE;
pub const FOS_HIDEMRUPLACES = _FILEOPENDIALOGOPTIONS.FOS_HIDEMRUPLACES;
pub const FOS_HIDEPINNEDPLACES = _FILEOPENDIALOGOPTIONS.FOS_HIDEPINNEDPLACES;
pub const FOS_NODEREFERENCELINKS = _FILEOPENDIALOGOPTIONS.FOS_NODEREFERENCELINKS;
pub const FOS_OKBUTTONNEEDSINTERACTION = _FILEOPENDIALOGOPTIONS.FOS_OKBUTTONNEEDSINTERACTION;
pub const FOS_DONTADDTORECENT = _FILEOPENDIALOGOPTIONS.FOS_DONTADDTORECENT;
pub const FOS_FORCESHOWHIDDEN = _FILEOPENDIALOGOPTIONS.FOS_FORCESHOWHIDDEN;
pub const FOS_DEFAULTNOMINIMODE = _FILEOPENDIALOGOPTIONS.FOS_DEFAULTNOMINIMODE;
pub const FOS_FORCEPREVIEWPANEON = _FILEOPENDIALOGOPTIONS.FOS_FORCEPREVIEWPANEON;
pub const FOS_SUPPORTSTREAMABLEITEMS = _FILEOPENDIALOGOPTIONS.FOS_SUPPORTSTREAMABLEITEMS;

const IID_IFileDialog_Value = @import("../zig.zig").Guid.initString("42F85136-DB7E-439C-85F1-E4075D135FC8");
pub const IID_IFileDialog = &IID_IFileDialog_Value;
pub const IFileDialog = extern struct {
    pub const VTable = extern struct {
        base: IModalWindow.VTable,
        SetFileTypes: fn(
            self: *const IFileDialog,
            cFileTypes: u32,
            rgFilterSpec: [*]const COMDLG_FILTERSPEC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFileTypeIndex: fn(
            self: *const IFileDialog,
            iFileType: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileTypeIndex: fn(
            self: *const IFileDialog,
            piFileType: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: fn(
            self: *const IFileDialog,
            pfde: *IFileDialogEvents,
            pdwCookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: fn(
            self: *const IFileDialog,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOptions: fn(
            self: *const IFileDialog,
            fos: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: fn(
            self: *const IFileDialog,
            pfos: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultFolder: fn(
            self: *const IFileDialog,
            psi: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolder: fn(
            self: *const IFileDialog,
            psi: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: fn(
            self: *const IFileDialog,
            ppsi: **IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentSelection: fn(
            self: *const IFileDialog,
            ppsi: **IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFileName: fn(
            self: *const IFileDialog,
            pszName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileName: fn(
            self: *const IFileDialog,
            pszName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTitle: fn(
            self: *const IFileDialog,
            pszTitle: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOkButtonLabel: fn(
            self: *const IFileDialog,
            pszText: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFileNameLabel: fn(
            self: *const IFileDialog,
            pszLabel: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResult: fn(
            self: *const IFileDialog,
            ppsi: **IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPlace: fn(
            self: *const IFileDialog,
            psi: *IShellItem,
            fdap: FDAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultExtension: fn(
            self: *const IFileDialog,
            pszDefaultExtension: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IFileDialog,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClientGuid: fn(
            self: *const IFileDialog,
            guid: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearClientData: fn(
            self: *const IFileDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFilter: fn(
            self: *const IFileDialog,
            pFilter: *IShellItemFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IModalWindow.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_SetFileTypes(self: *const T, cFileTypes: u32, rgFilterSpec: [*]const COMDLG_FILTERSPEC) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).SetFileTypes(@ptrCast(*const IFileDialog, self), cFileTypes, rgFilterSpec);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_SetFileTypeIndex(self: *const T, iFileType: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).SetFileTypeIndex(@ptrCast(*const IFileDialog, self), iFileType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_GetFileTypeIndex(self: *const T, piFileType: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).GetFileTypeIndex(@ptrCast(*const IFileDialog, self), piFileType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_Advise(self: *const T, pfde: *IFileDialogEvents, pdwCookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).Advise(@ptrCast(*const IFileDialog, self), pfde, pdwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_Unadvise(self: *const T, dwCookie: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).Unadvise(@ptrCast(*const IFileDialog, self), dwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_SetOptions(self: *const T, fos: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).SetOptions(@ptrCast(*const IFileDialog, self), fos);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_GetOptions(self: *const T, pfos: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).GetOptions(@ptrCast(*const IFileDialog, self), pfos);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_SetDefaultFolder(self: *const T, psi: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).SetDefaultFolder(@ptrCast(*const IFileDialog, self), psi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_SetFolder(self: *const T, psi: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).SetFolder(@ptrCast(*const IFileDialog, self), psi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_GetFolder(self: *const T, ppsi: **IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).GetFolder(@ptrCast(*const IFileDialog, self), ppsi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_GetCurrentSelection(self: *const T, ppsi: **IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).GetCurrentSelection(@ptrCast(*const IFileDialog, self), ppsi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_SetFileName(self: *const T, pszName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).SetFileName(@ptrCast(*const IFileDialog, self), pszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_GetFileName(self: *const T, pszName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).GetFileName(@ptrCast(*const IFileDialog, self), pszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_SetTitle(self: *const T, pszTitle: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).SetTitle(@ptrCast(*const IFileDialog, self), pszTitle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_SetOkButtonLabel(self: *const T, pszText: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).SetOkButtonLabel(@ptrCast(*const IFileDialog, self), pszText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_SetFileNameLabel(self: *const T, pszLabel: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).SetFileNameLabel(@ptrCast(*const IFileDialog, self), pszLabel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_GetResult(self: *const T, ppsi: **IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).GetResult(@ptrCast(*const IFileDialog, self), ppsi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_AddPlace(self: *const T, psi: *IShellItem, fdap: FDAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).AddPlace(@ptrCast(*const IFileDialog, self), psi, fdap);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_SetDefaultExtension(self: *const T, pszDefaultExtension: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).SetDefaultExtension(@ptrCast(*const IFileDialog, self), pszDefaultExtension);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_Close(self: *const T, hr: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).Close(@ptrCast(*const IFileDialog, self), hr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_SetClientGuid(self: *const T, guid: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).SetClientGuid(@ptrCast(*const IFileDialog, self), guid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_ClearClientData(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).ClearClientData(@ptrCast(*const IFileDialog, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog_SetFilter(self: *const T, pFilter: *IShellItemFilter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog.VTable, self.vtable).SetFilter(@ptrCast(*const IFileDialog, self), pFilter);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFileSaveDialog_Value = @import("../zig.zig").Guid.initString("84BCCD23-5FDE-4CDB-AEA4-AF64B83D78AB");
pub const IID_IFileSaveDialog = &IID_IFileSaveDialog_Value;
pub const IFileSaveDialog = extern struct {
    pub const VTable = extern struct {
        base: IFileDialog.VTable,
        SetSaveAsItem: fn(
            self: *const IFileSaveDialog,
            psi: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperties: fn(
            self: *const IFileSaveDialog,
            pStore: *IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCollectedProperties: fn(
            self: *const IFileSaveDialog,
            pList: *IPropertyDescriptionList,
            fAppendDefault: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperties: fn(
            self: *const IFileSaveDialog,
            ppStore: **IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ApplyProperties: fn(
            self: *const IFileSaveDialog,
            psi: *IShellItem,
            pStore: *IPropertyStore,
            hwnd: HWND,
            pSink: *IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IFileDialog.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileSaveDialog_SetSaveAsItem(self: *const T, psi: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileSaveDialog.VTable, self.vtable).SetSaveAsItem(@ptrCast(*const IFileSaveDialog, self), psi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileSaveDialog_SetProperties(self: *const T, pStore: *IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileSaveDialog.VTable, self.vtable).SetProperties(@ptrCast(*const IFileSaveDialog, self), pStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileSaveDialog_SetCollectedProperties(self: *const T, pList: *IPropertyDescriptionList, fAppendDefault: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileSaveDialog.VTable, self.vtable).SetCollectedProperties(@ptrCast(*const IFileSaveDialog, self), pList, fAppendDefault);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileSaveDialog_GetProperties(self: *const T, ppStore: **IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileSaveDialog.VTable, self.vtable).GetProperties(@ptrCast(*const IFileSaveDialog, self), ppStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileSaveDialog_ApplyProperties(self: *const T, psi: *IShellItem, pStore: *IPropertyStore, hwnd: HWND, pSink: *IFileOperationProgressSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileSaveDialog.VTable, self.vtable).ApplyProperties(@ptrCast(*const IFileSaveDialog, self), psi, pStore, hwnd, pSink);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFileOpenDialog_Value = @import("../zig.zig").Guid.initString("D57C7288-D4AD-4768-BE02-9D969532D960");
pub const IID_IFileOpenDialog = &IID_IFileOpenDialog_Value;
pub const IFileOpenDialog = extern struct {
    pub const VTable = extern struct {
        base: IFileDialog.VTable,
        GetResults: fn(
            self: *const IFileOpenDialog,
            ppenum: **IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedItems: fn(
            self: *const IFileOpenDialog,
            ppsai: **IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IFileDialog.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOpenDialog_GetResults(self: *const T, ppenum: **IShellItemArray) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOpenDialog.VTable, self.vtable).GetResults(@ptrCast(*const IFileOpenDialog, self), ppenum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileOpenDialog_GetSelectedItems(self: *const T, ppsai: **IShellItemArray) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileOpenDialog.VTable, self.vtable).GetSelectedItems(@ptrCast(*const IFileOpenDialog, self), ppsai);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CDCONTROLSTATEF = extern enum(i32) {
    CDCS_INACTIVE = 0,
    CDCS_ENABLED = 1,
    CDCS_VISIBLE = 2,
    CDCS_ENABLEDVISIBLE = 3,
};
pub const CDCS_INACTIVE = CDCONTROLSTATEF.CDCS_INACTIVE;
pub const CDCS_ENABLED = CDCONTROLSTATEF.CDCS_ENABLED;
pub const CDCS_VISIBLE = CDCONTROLSTATEF.CDCS_VISIBLE;
pub const CDCS_ENABLEDVISIBLE = CDCONTROLSTATEF.CDCS_ENABLEDVISIBLE;

const IID_IFileDialogCustomize_Value = @import("../zig.zig").Guid.initString("E6FDD21A-163F-4975-9C8C-A69F1BA37034");
pub const IID_IFileDialogCustomize = &IID_IFileDialogCustomize_Value;
pub const IFileDialogCustomize = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnableOpenDropDown: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMenu: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pszLabel: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPushButton: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pszLabel: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddComboBox: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRadioButtonList: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCheckButton: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pszLabel: [*:0]const u16,
            bChecked: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddEditBox: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pszText: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddSeparator: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddText: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pszText: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetControlLabel: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pszLabel: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetControlState: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pdwState: *CDCONTROLSTATEF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetControlState: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            dwState: CDCONTROLSTATEF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEditBoxText: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            ppszText: **u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEditBoxText: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pszText: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCheckButtonState: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pbChecked: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCheckButtonState: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            bChecked: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddControlItem: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            dwIDItem: u32,
            pszLabel: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveControlItem: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            dwIDItem: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllControlItems: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetControlItemState: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            dwIDItem: u32,
            pdwState: *CDCONTROLSTATEF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetControlItemState: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            dwIDItem: u32,
            dwState: CDCONTROLSTATEF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedControlItem: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pdwIDItem: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSelectedControlItem: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            dwIDItem: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartVisualGroup: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            pszLabel: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndVisualGroup: fn(
            self: *const IFileDialogCustomize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MakeProminent: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetControlItemText: fn(
            self: *const IFileDialogCustomize,
            dwIDCtl: u32,
            dwIDItem: u32,
            pszLabel: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_EnableOpenDropDown(self: *const T, dwIDCtl: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).EnableOpenDropDown(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_AddMenu(self: *const T, dwIDCtl: u32, pszLabel: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).AddMenu(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, pszLabel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_AddPushButton(self: *const T, dwIDCtl: u32, pszLabel: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).AddPushButton(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, pszLabel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_AddComboBox(self: *const T, dwIDCtl: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).AddComboBox(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_AddRadioButtonList(self: *const T, dwIDCtl: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).AddRadioButtonList(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_AddCheckButton(self: *const T, dwIDCtl: u32, pszLabel: [*:0]const u16, bChecked: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).AddCheckButton(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, pszLabel, bChecked);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_AddEditBox(self: *const T, dwIDCtl: u32, pszText: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).AddEditBox(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, pszText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_AddSeparator(self: *const T, dwIDCtl: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).AddSeparator(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_AddText(self: *const T, dwIDCtl: u32, pszText: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).AddText(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, pszText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_SetControlLabel(self: *const T, dwIDCtl: u32, pszLabel: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).SetControlLabel(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, pszLabel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_GetControlState(self: *const T, dwIDCtl: u32, pdwState: *CDCONTROLSTATEF) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).GetControlState(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, pdwState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_SetControlState(self: *const T, dwIDCtl: u32, dwState: CDCONTROLSTATEF) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).SetControlState(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, dwState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_GetEditBoxText(self: *const T, dwIDCtl: u32, ppszText: **u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).GetEditBoxText(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, ppszText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_SetEditBoxText(self: *const T, dwIDCtl: u32, pszText: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).SetEditBoxText(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, pszText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_GetCheckButtonState(self: *const T, dwIDCtl: u32, pbChecked: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).GetCheckButtonState(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, pbChecked);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_SetCheckButtonState(self: *const T, dwIDCtl: u32, bChecked: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).SetCheckButtonState(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, bChecked);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_AddControlItem(self: *const T, dwIDCtl: u32, dwIDItem: u32, pszLabel: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).AddControlItem(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, dwIDItem, pszLabel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_RemoveControlItem(self: *const T, dwIDCtl: u32, dwIDItem: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).RemoveControlItem(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, dwIDItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_RemoveAllControlItems(self: *const T, dwIDCtl: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).RemoveAllControlItems(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_GetControlItemState(self: *const T, dwIDCtl: u32, dwIDItem: u32, pdwState: *CDCONTROLSTATEF) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).GetControlItemState(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, dwIDItem, pdwState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_SetControlItemState(self: *const T, dwIDCtl: u32, dwIDItem: u32, dwState: CDCONTROLSTATEF) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).SetControlItemState(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, dwIDItem, dwState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_GetSelectedControlItem(self: *const T, dwIDCtl: u32, pdwIDItem: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).GetSelectedControlItem(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, pdwIDItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_SetSelectedControlItem(self: *const T, dwIDCtl: u32, dwIDItem: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).SetSelectedControlItem(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, dwIDItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_StartVisualGroup(self: *const T, dwIDCtl: u32, pszLabel: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).StartVisualGroup(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, pszLabel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_EndVisualGroup(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).EndVisualGroup(@ptrCast(*const IFileDialogCustomize, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_MakeProminent(self: *const T, dwIDCtl: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).MakeProminent(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogCustomize_SetControlItemText(self: *const T, dwIDCtl: u32, dwIDItem: u32, pszLabel: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogCustomize.VTable, self.vtable).SetControlItemText(@ptrCast(*const IFileDialogCustomize, self), dwIDCtl, dwIDItem, pszLabel);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const ASSOCIATIONLEVEL = extern enum(i32) {
    AL_MACHINE = 0,
    AL_EFFECTIVE = 1,
    AL_USER = 2,
};
pub const AL_MACHINE = ASSOCIATIONLEVEL.AL_MACHINE;
pub const AL_EFFECTIVE = ASSOCIATIONLEVEL.AL_EFFECTIVE;
pub const AL_USER = ASSOCIATIONLEVEL.AL_USER;

pub const ASSOCIATIONTYPE = extern enum(i32) {
    AT_FILEEXTENSION = 0,
    AT_URLPROTOCOL = 1,
    AT_STARTMENUCLIENT = 2,
    AT_MIMETYPE = 3,
};
pub const AT_FILEEXTENSION = ASSOCIATIONTYPE.AT_FILEEXTENSION;
pub const AT_URLPROTOCOL = ASSOCIATIONTYPE.AT_URLPROTOCOL;
pub const AT_STARTMENUCLIENT = ASSOCIATIONTYPE.AT_STARTMENUCLIENT;
pub const AT_MIMETYPE = ASSOCIATIONTYPE.AT_MIMETYPE;

const IID_IApplicationAssociationRegistration_Value = @import("../zig.zig").Guid.initString("4E530B0A-E611-4C77-A3AC-9031D022281B");
pub const IID_IApplicationAssociationRegistration = &IID_IApplicationAssociationRegistration_Value;
pub const IApplicationAssociationRegistration = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryCurrentDefault: fn(
            self: *const IApplicationAssociationRegistration,
            pszQuery: [*:0]const u16,
            atQueryType: ASSOCIATIONTYPE,
            alQueryLevel: ASSOCIATIONLEVEL,
            ppszAssociation: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryAppIsDefault: fn(
            self: *const IApplicationAssociationRegistration,
            pszQuery: [*:0]const u16,
            atQueryType: ASSOCIATIONTYPE,
            alQueryLevel: ASSOCIATIONLEVEL,
            pszAppRegistryName: [*:0]const u16,
            pfDefault: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryAppIsDefaultAll: fn(
            self: *const IApplicationAssociationRegistration,
            alQueryLevel: ASSOCIATIONLEVEL,
            pszAppRegistryName: [*:0]const u16,
            pfDefault: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAppAsDefault: fn(
            self: *const IApplicationAssociationRegistration,
            pszAppRegistryName: [*:0]const u16,
            pszSet: [*:0]const u16,
            atSetType: ASSOCIATIONTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAppAsDefaultAll: fn(
            self: *const IApplicationAssociationRegistration,
            pszAppRegistryName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearUserAssociations: fn(
            self: *const IApplicationAssociationRegistration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationAssociationRegistration_QueryCurrentDefault(self: *const T, pszQuery: [*:0]const u16, atQueryType: ASSOCIATIONTYPE, alQueryLevel: ASSOCIATIONLEVEL, ppszAssociation: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationAssociationRegistration.VTable, self.vtable).QueryCurrentDefault(@ptrCast(*const IApplicationAssociationRegistration, self), pszQuery, atQueryType, alQueryLevel, ppszAssociation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationAssociationRegistration_QueryAppIsDefault(self: *const T, pszQuery: [*:0]const u16, atQueryType: ASSOCIATIONTYPE, alQueryLevel: ASSOCIATIONLEVEL, pszAppRegistryName: [*:0]const u16, pfDefault: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationAssociationRegistration.VTable, self.vtable).QueryAppIsDefault(@ptrCast(*const IApplicationAssociationRegistration, self), pszQuery, atQueryType, alQueryLevel, pszAppRegistryName, pfDefault);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationAssociationRegistration_QueryAppIsDefaultAll(self: *const T, alQueryLevel: ASSOCIATIONLEVEL, pszAppRegistryName: [*:0]const u16, pfDefault: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationAssociationRegistration.VTable, self.vtable).QueryAppIsDefaultAll(@ptrCast(*const IApplicationAssociationRegistration, self), alQueryLevel, pszAppRegistryName, pfDefault);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationAssociationRegistration_SetAppAsDefault(self: *const T, pszAppRegistryName: [*:0]const u16, pszSet: [*:0]const u16, atSetType: ASSOCIATIONTYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationAssociationRegistration.VTable, self.vtable).SetAppAsDefault(@ptrCast(*const IApplicationAssociationRegistration, self), pszAppRegistryName, pszSet, atSetType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationAssociationRegistration_SetAppAsDefaultAll(self: *const T, pszAppRegistryName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationAssociationRegistration.VTable, self.vtable).SetAppAsDefaultAll(@ptrCast(*const IApplicationAssociationRegistration, self), pszAppRegistryName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationAssociationRegistration_ClearUserAssociations(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationAssociationRegistration.VTable, self.vtable).ClearUserAssociations(@ptrCast(*const IApplicationAssociationRegistration, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DELEGATEITEMID = extern struct {
    cbSize: u16,
    wOuter: u16,
    cbInner: u16,
    rgb: [1]u8,
};

const IID_IDelegateFolder_Value = @import("../zig.zig").Guid.initString("ADD8BA80-002B-11D0-8F0F-00C04FD7D062");
pub const IID_IDelegateFolder = &IID_IDelegateFolder_Value;
pub const IDelegateFolder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetItemAlloc: fn(
            self: *const IDelegateFolder,
            pmalloc: *IMalloc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDelegateFolder_SetItemAlloc(self: *const T, pmalloc: *IMalloc) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDelegateFolder.VTable, self.vtable).SetItemAlloc(@ptrCast(*const IDelegateFolder, self), pmalloc);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _BROWSERFRAMEOPTIONS = extern enum(i32) {
    BFO_NONE = 0,
    BFO_BROWSER_PERSIST_SETTINGS = 1,
    BFO_RENAME_FOLDER_OPTIONS_TOINTERNET = 2,
    BFO_BOTH_OPTIONS = 4,
    BIF_PREFER_INTERNET_SHORTCUT = 8,
    BFO_BROWSE_NO_IN_NEW_PROCESS = 16,
    BFO_ENABLE_HYPERLINK_TRACKING = 32,
    BFO_USE_IE_OFFLINE_SUPPORT = 64,
    BFO_SUBSTITUE_INTERNET_START_PAGE = 128,
    BFO_USE_IE_LOGOBANDING = 256,
    BFO_ADD_IE_TOCAPTIONBAR = 512,
    BFO_USE_DIALUP_REF = 1024,
    BFO_USE_IE_TOOLBAR = 2048,
    BFO_NO_PARENT_FOLDER_SUPPORT = 4096,
    BFO_NO_REOPEN_NEXT_RESTART = 8192,
    BFO_GO_HOME_PAGE = 16384,
    BFO_PREFER_IEPROCESS = 32768,
    BFO_SHOW_NAVIGATION_CANCELLED = 65536,
    BFO_USE_IE_STATUSBAR = 131072,
    BFO_QUERY_ALL = -1,
};
pub const BFO_NONE = _BROWSERFRAMEOPTIONS.BFO_NONE;
pub const BFO_BROWSER_PERSIST_SETTINGS = _BROWSERFRAMEOPTIONS.BFO_BROWSER_PERSIST_SETTINGS;
pub const BFO_RENAME_FOLDER_OPTIONS_TOINTERNET = _BROWSERFRAMEOPTIONS.BFO_RENAME_FOLDER_OPTIONS_TOINTERNET;
pub const BFO_BOTH_OPTIONS = _BROWSERFRAMEOPTIONS.BFO_BOTH_OPTIONS;
pub const BIF_PREFER_INTERNET_SHORTCUT = _BROWSERFRAMEOPTIONS.BIF_PREFER_INTERNET_SHORTCUT;
pub const BFO_BROWSE_NO_IN_NEW_PROCESS = _BROWSERFRAMEOPTIONS.BFO_BROWSE_NO_IN_NEW_PROCESS;
pub const BFO_ENABLE_HYPERLINK_TRACKING = _BROWSERFRAMEOPTIONS.BFO_ENABLE_HYPERLINK_TRACKING;
pub const BFO_USE_IE_OFFLINE_SUPPORT = _BROWSERFRAMEOPTIONS.BFO_USE_IE_OFFLINE_SUPPORT;
pub const BFO_SUBSTITUE_INTERNET_START_PAGE = _BROWSERFRAMEOPTIONS.BFO_SUBSTITUE_INTERNET_START_PAGE;
pub const BFO_USE_IE_LOGOBANDING = _BROWSERFRAMEOPTIONS.BFO_USE_IE_LOGOBANDING;
pub const BFO_ADD_IE_TOCAPTIONBAR = _BROWSERFRAMEOPTIONS.BFO_ADD_IE_TOCAPTIONBAR;
pub const BFO_USE_DIALUP_REF = _BROWSERFRAMEOPTIONS.BFO_USE_DIALUP_REF;
pub const BFO_USE_IE_TOOLBAR = _BROWSERFRAMEOPTIONS.BFO_USE_IE_TOOLBAR;
pub const BFO_NO_PARENT_FOLDER_SUPPORT = _BROWSERFRAMEOPTIONS.BFO_NO_PARENT_FOLDER_SUPPORT;
pub const BFO_NO_REOPEN_NEXT_RESTART = _BROWSERFRAMEOPTIONS.BFO_NO_REOPEN_NEXT_RESTART;
pub const BFO_GO_HOME_PAGE = _BROWSERFRAMEOPTIONS.BFO_GO_HOME_PAGE;
pub const BFO_PREFER_IEPROCESS = _BROWSERFRAMEOPTIONS.BFO_PREFER_IEPROCESS;
pub const BFO_SHOW_NAVIGATION_CANCELLED = _BROWSERFRAMEOPTIONS.BFO_SHOW_NAVIGATION_CANCELLED;
pub const BFO_USE_IE_STATUSBAR = _BROWSERFRAMEOPTIONS.BFO_USE_IE_STATUSBAR;
pub const BFO_QUERY_ALL = _BROWSERFRAMEOPTIONS.BFO_QUERY_ALL;

const IID_IBrowserFrameOptions_Value = @import("../zig.zig").Guid.initString("10DF43C8-1DBE-11D3-8B34-006097DF5BD4");
pub const IID_IBrowserFrameOptions = &IID_IBrowserFrameOptions_Value;
pub const IBrowserFrameOptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFrameOptions: fn(
            self: *const IBrowserFrameOptions,
            dwMask: u32,
            pdwOptions: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserFrameOptions_GetFrameOptions(self: *const T, dwMask: u32, pdwOptions: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserFrameOptions.VTable, self.vtable).GetFrameOptions(@ptrCast(*const IBrowserFrameOptions, self), dwMask, pdwOptions);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const NWMF = extern enum(i32) {
    UNLOADING = 1,
    USERINITED = 2,
    FIRST = 4,
    OVERRIDEKEY = 8,
    SHOWHELP = 16,
    HTMLDIALOG = 32,
    FROMDIALOGCHILD = 64,
    USERREQUESTED = 128,
    USERALLOWED = 256,
    FORCEWINDOW = 65536,
    FORCETAB = 131072,
    SUGGESTWINDOW = 262144,
    SUGGESTTAB = 524288,
    INACTIVETAB = 1048576,
};
pub const NWMF_UNLOADING = NWMF.UNLOADING;
pub const NWMF_USERINITED = NWMF.USERINITED;
pub const NWMF_FIRST = NWMF.FIRST;
pub const NWMF_OVERRIDEKEY = NWMF.OVERRIDEKEY;
pub const NWMF_SHOWHELP = NWMF.SHOWHELP;
pub const NWMF_HTMLDIALOG = NWMF.HTMLDIALOG;
pub const NWMF_FROMDIALOGCHILD = NWMF.FROMDIALOGCHILD;
pub const NWMF_USERREQUESTED = NWMF.USERREQUESTED;
pub const NWMF_USERALLOWED = NWMF.USERALLOWED;
pub const NWMF_FORCEWINDOW = NWMF.FORCEWINDOW;
pub const NWMF_FORCETAB = NWMF.FORCETAB;
pub const NWMF_SUGGESTWINDOW = NWMF.SUGGESTWINDOW;
pub const NWMF_SUGGESTTAB = NWMF.SUGGESTTAB;
pub const NWMF_INACTIVETAB = NWMF.INACTIVETAB;

const IID_INewWindowManager_Value = @import("../zig.zig").Guid.initString("D2BC4C84-3F72-4A52-A604-7BCBF3982CBB");
pub const IID_INewWindowManager = &IID_INewWindowManager_Value;
pub const INewWindowManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EvaluateNewWindow: fn(
            self: *const INewWindowManager,
            pszUrl: [*:0]const u16,
            pszName: [*:0]const u16,
            pszUrlContext: [*:0]const u16,
            pszFeatures: [*:0]const u16,
            fReplace: BOOL,
            dwFlags: u32,
            dwUserActionTime: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INewWindowManager_EvaluateNewWindow(self: *const T, pszUrl: [*:0]const u16, pszName: [*:0]const u16, pszUrlContext: [*:0]const u16, pszFeatures: [*:0]const u16, fReplace: BOOL, dwFlags: u32, dwUserActionTime: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INewWindowManager.VTable, self.vtable).EvaluateNewWindow(@ptrCast(*const INewWindowManager, self), pszUrl, pszName, pszUrlContext, pszFeatures, fReplace, dwFlags, dwUserActionTime);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const ATTACHMENT_PROMPT = extern enum(i32) {
    NONE = 0,
    SAVE = 1,
    EXEC = 2,
    EXEC_OR_SAVE = 3,
};
pub const ATTACHMENT_PROMPT_NONE = ATTACHMENT_PROMPT.NONE;
pub const ATTACHMENT_PROMPT_SAVE = ATTACHMENT_PROMPT.SAVE;
pub const ATTACHMENT_PROMPT_EXEC = ATTACHMENT_PROMPT.EXEC;
pub const ATTACHMENT_PROMPT_EXEC_OR_SAVE = ATTACHMENT_PROMPT.EXEC_OR_SAVE;

pub const ATTACHMENT_ACTION = extern enum(i32) {
    CANCEL = 0,
    SAVE = 1,
    EXEC = 2,
};
pub const ATTACHMENT_ACTION_CANCEL = ATTACHMENT_ACTION.CANCEL;
pub const ATTACHMENT_ACTION_SAVE = ATTACHMENT_ACTION.SAVE;
pub const ATTACHMENT_ACTION_EXEC = ATTACHMENT_ACTION.EXEC;

const IID_IAttachmentExecute_Value = @import("../zig.zig").Guid.initString("73DB1241-1E85-4581-8E4F-A81E1D0F8C57");
pub const IID_IAttachmentExecute = &IID_IAttachmentExecute_Value;
pub const IAttachmentExecute = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetClientTitle: fn(
            self: *const IAttachmentExecute,
            pszTitle: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClientGuid: fn(
            self: *const IAttachmentExecute,
            guid: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLocalPath: fn(
            self: *const IAttachmentExecute,
            pszLocalPath: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFileName: fn(
            self: *const IAttachmentExecute,
            pszFileName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSource: fn(
            self: *const IAttachmentExecute,
            pszSource: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReferrer: fn(
            self: *const IAttachmentExecute,
            pszReferrer: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckPolicy: fn(
            self: *const IAttachmentExecute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Prompt: fn(
            self: *const IAttachmentExecute,
            hwnd: HWND,
            prompt: ATTACHMENT_PROMPT,
            paction: *ATTACHMENT_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: fn(
            self: *const IAttachmentExecute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Execute: fn(
            self: *const IAttachmentExecute,
            hwnd: HWND,
            pszVerb: ?[*:0]const u16,
            phProcess: ?*HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveWithUI: fn(
            self: *const IAttachmentExecute,
            hwnd: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearClientState: fn(
            self: *const IAttachmentExecute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAttachmentExecute_SetClientTitle(self: *const T, pszTitle: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAttachmentExecute.VTable, self.vtable).SetClientTitle(@ptrCast(*const IAttachmentExecute, self), pszTitle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAttachmentExecute_SetClientGuid(self: *const T, guid: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAttachmentExecute.VTable, self.vtable).SetClientGuid(@ptrCast(*const IAttachmentExecute, self), guid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAttachmentExecute_SetLocalPath(self: *const T, pszLocalPath: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAttachmentExecute.VTable, self.vtable).SetLocalPath(@ptrCast(*const IAttachmentExecute, self), pszLocalPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAttachmentExecute_SetFileName(self: *const T, pszFileName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAttachmentExecute.VTable, self.vtable).SetFileName(@ptrCast(*const IAttachmentExecute, self), pszFileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAttachmentExecute_SetSource(self: *const T, pszSource: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAttachmentExecute.VTable, self.vtable).SetSource(@ptrCast(*const IAttachmentExecute, self), pszSource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAttachmentExecute_SetReferrer(self: *const T, pszReferrer: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAttachmentExecute.VTable, self.vtable).SetReferrer(@ptrCast(*const IAttachmentExecute, self), pszReferrer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAttachmentExecute_CheckPolicy(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAttachmentExecute.VTable, self.vtable).CheckPolicy(@ptrCast(*const IAttachmentExecute, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAttachmentExecute_Prompt(self: *const T, hwnd: HWND, prompt: ATTACHMENT_PROMPT, paction: *ATTACHMENT_ACTION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAttachmentExecute.VTable, self.vtable).Prompt(@ptrCast(*const IAttachmentExecute, self), hwnd, prompt, paction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAttachmentExecute_Save(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAttachmentExecute.VTable, self.vtable).Save(@ptrCast(*const IAttachmentExecute, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAttachmentExecute_Execute(self: *const T, hwnd: HWND, pszVerb: ?[*:0]const u16, phProcess: ?*HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAttachmentExecute.VTable, self.vtable).Execute(@ptrCast(*const IAttachmentExecute, self), hwnd, pszVerb, phProcess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAttachmentExecute_SaveWithUI(self: *const T, hwnd: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAttachmentExecute.VTable, self.vtable).SaveWithUI(@ptrCast(*const IAttachmentExecute, self), hwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAttachmentExecute_ClearClientState(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAttachmentExecute.VTable, self.vtable).ClearClientState(@ptrCast(*const IAttachmentExecute, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SMDATA = extern struct {
    dwMask: u32,
    dwFlags: u32,
    hmenu: HMENU,
    hwnd: HWND,
    uId: u32,
    uIdParent: u32,
    uIdAncestor: u32,
    punk: *IUnknown,
    pidlFolder: *ITEMIDLIST,
    pidlItem: *ITEMIDLIST,
    psf: *IShellFolder,
    pvUserData: *c_void,
};

pub const SMINFO = extern struct {
    dwMask: u32,
    dwType: u32,
    dwFlags: u32,
    iIcon: i32,
};

pub const SMCSHCHANGENOTIFYSTRUCT = extern struct {
    lEvent: i32,
    pidl1: *ITEMIDLIST,
    pidl2: *ITEMIDLIST,
};

pub const tagSMINFOMASK = extern enum(i32) {
    SMIM_TYPE = 1,
    SMIM_FLAGS = 2,
    SMIM_ICON = 4,
};
pub const SMIM_TYPE = tagSMINFOMASK.SMIM_TYPE;
pub const SMIM_FLAGS = tagSMINFOMASK.SMIM_FLAGS;
pub const SMIM_ICON = tagSMINFOMASK.SMIM_ICON;

pub const tagSMINFOTYPE = extern enum(i32) {
    SMIT_SEPARATOR = 1,
    SMIT_STRING = 2,
};
pub const SMIT_SEPARATOR = tagSMINFOTYPE.SMIT_SEPARATOR;
pub const SMIT_STRING = tagSMINFOTYPE.SMIT_STRING;

pub const tagSMINFOFLAGS = extern enum(i32) {
    SMIF_ICON = 1,
    SMIF_ACCELERATOR = 2,
    SMIF_DROPTARGET = 4,
    SMIF_SUBMENU = 8,
    SMIF_CHECKED = 32,
    SMIF_DROPCASCADE = 64,
    SMIF_HIDDEN = 128,
    SMIF_DISABLED = 256,
    SMIF_TRACKPOPUP = 512,
    SMIF_DEMOTED = 1024,
    SMIF_ALTSTATE = 2048,
    SMIF_DRAGNDROP = 4096,
    SMIF_NEW = 8192,
};
pub const SMIF_ICON = tagSMINFOFLAGS.SMIF_ICON;
pub const SMIF_ACCELERATOR = tagSMINFOFLAGS.SMIF_ACCELERATOR;
pub const SMIF_DROPTARGET = tagSMINFOFLAGS.SMIF_DROPTARGET;
pub const SMIF_SUBMENU = tagSMINFOFLAGS.SMIF_SUBMENU;
pub const SMIF_CHECKED = tagSMINFOFLAGS.SMIF_CHECKED;
pub const SMIF_DROPCASCADE = tagSMINFOFLAGS.SMIF_DROPCASCADE;
pub const SMIF_HIDDEN = tagSMINFOFLAGS.SMIF_HIDDEN;
pub const SMIF_DISABLED = tagSMINFOFLAGS.SMIF_DISABLED;
pub const SMIF_TRACKPOPUP = tagSMINFOFLAGS.SMIF_TRACKPOPUP;
pub const SMIF_DEMOTED = tagSMINFOFLAGS.SMIF_DEMOTED;
pub const SMIF_ALTSTATE = tagSMINFOFLAGS.SMIF_ALTSTATE;
pub const SMIF_DRAGNDROP = tagSMINFOFLAGS.SMIF_DRAGNDROP;
pub const SMIF_NEW = tagSMINFOFLAGS.SMIF_NEW;

const IID_IShellMenuCallback_Value = @import("../zig.zig").Guid.initString("4CA300A1-9B8D-11D1-8B22-00C04FD918D0");
pub const IID_IShellMenuCallback = &IID_IShellMenuCallback_Value;
pub const IShellMenuCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CallbackSM: fn(
            self: *const IShellMenuCallback,
            psmd: *SMDATA,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellMenuCallback_CallbackSM(self: *const T, psmd: *SMDATA, uMsg: u32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellMenuCallback.VTable, self.vtable).CallbackSM(@ptrCast(*const IShellMenuCallback, self), psmd, uMsg, wParam, lParam);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellMenu_Value = @import("../zig.zig").Guid.initString("EE1F7637-E138-11D1-8379-00C04FD918D0");
pub const IID_IShellMenu = &IID_IShellMenu_Value;
pub const IShellMenu = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IShellMenu,
            psmc: ?*IShellMenuCallback,
            uId: u32,
            uIdAncestor: u32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMenuInfo: fn(
            self: *const IShellMenu,
            ppsmc: ?*?*IShellMenuCallback,
            puId: ?*u32,
            puIdAncestor: ?*u32,
            pdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetShellFolder: fn(
            self: *const IShellMenu,
            psf: ?*IShellFolder,
            pidlFolder: ?*ITEMIDLIST,
            hKey: HKEY,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShellFolder: fn(
            self: *const IShellMenu,
            pdwFlags: *u32,
            ppidl: **ITEMIDLIST,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMenu: fn(
            self: *const IShellMenu,
            hmenu: HMENU,
            hwnd: HWND,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMenu: fn(
            self: *const IShellMenu,
            phmenu: ?*HMENU,
            phwnd: ?*HWND,
            pdwFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvalidateItem: fn(
            self: *const IShellMenu,
            psmd: ?*SMDATA,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetState: fn(
            self: *const IShellMenu,
            psmd: *SMDATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMenuToolbar: fn(
            self: *const IShellMenu,
            punk: *IUnknown,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellMenu_Initialize(self: *const T, psmc: ?*IShellMenuCallback, uId: u32, uIdAncestor: u32, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellMenu.VTable, self.vtable).Initialize(@ptrCast(*const IShellMenu, self), psmc, uId, uIdAncestor, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellMenu_GetMenuInfo(self: *const T, ppsmc: ?*?*IShellMenuCallback, puId: ?*u32, puIdAncestor: ?*u32, pdwFlags: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellMenu.VTable, self.vtable).GetMenuInfo(@ptrCast(*const IShellMenu, self), ppsmc, puId, puIdAncestor, pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellMenu_SetShellFolder(self: *const T, psf: ?*IShellFolder, pidlFolder: ?*ITEMIDLIST, hKey: HKEY, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellMenu.VTable, self.vtable).SetShellFolder(@ptrCast(*const IShellMenu, self), psf, pidlFolder, hKey, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellMenu_GetShellFolder(self: *const T, pdwFlags: *u32, ppidl: **ITEMIDLIST, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellMenu.VTable, self.vtable).GetShellFolder(@ptrCast(*const IShellMenu, self), pdwFlags, ppidl, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellMenu_SetMenu(self: *const T, hmenu: HMENU, hwnd: HWND, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellMenu.VTable, self.vtable).SetMenu(@ptrCast(*const IShellMenu, self), hmenu, hwnd, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellMenu_GetMenu(self: *const T, phmenu: ?*HMENU, phwnd: ?*HWND, pdwFlags: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellMenu.VTable, self.vtable).GetMenu(@ptrCast(*const IShellMenu, self), phmenu, phwnd, pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellMenu_InvalidateItem(self: *const T, psmd: ?*SMDATA, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellMenu.VTable, self.vtable).InvalidateItem(@ptrCast(*const IShellMenu, self), psmd, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellMenu_GetState(self: *const T, psmd: *SMDATA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellMenu.VTable, self.vtable).GetState(@ptrCast(*const IShellMenu, self), psmd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellMenu_SetMenuToolbar(self: *const T, punk: *IUnknown, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellMenu.VTable, self.vtable).SetMenuToolbar(@ptrCast(*const IShellMenu, self), punk, dwFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const KF_CATEGORY = extern enum(i32) {
    VIRTUAL = 1,
    FIXED = 2,
    COMMON = 3,
    PERUSER = 4,
};
pub const KF_CATEGORY_VIRTUAL = KF_CATEGORY.VIRTUAL;
pub const KF_CATEGORY_FIXED = KF_CATEGORY.FIXED;
pub const KF_CATEGORY_COMMON = KF_CATEGORY.COMMON;
pub const KF_CATEGORY_PERUSER = KF_CATEGORY.PERUSER;

pub const _KF_DEFINITION_FLAGS = extern enum(i32) {
    KFDF_LOCAL_REDIRECT_ONLY = 2,
    KFDF_ROAMABLE = 4,
    KFDF_PRECREATE = 8,
    KFDF_STREAM = 16,
    KFDF_PUBLISHEXPANDEDPATH = 32,
    KFDF_NO_REDIRECT_UI = 64,
};
pub const KFDF_LOCAL_REDIRECT_ONLY = _KF_DEFINITION_FLAGS.KFDF_LOCAL_REDIRECT_ONLY;
pub const KFDF_ROAMABLE = _KF_DEFINITION_FLAGS.KFDF_ROAMABLE;
pub const KFDF_PRECREATE = _KF_DEFINITION_FLAGS.KFDF_PRECREATE;
pub const KFDF_STREAM = _KF_DEFINITION_FLAGS.KFDF_STREAM;
pub const KFDF_PUBLISHEXPANDEDPATH = _KF_DEFINITION_FLAGS.KFDF_PUBLISHEXPANDEDPATH;
pub const KFDF_NO_REDIRECT_UI = _KF_DEFINITION_FLAGS.KFDF_NO_REDIRECT_UI;

pub const _KF_REDIRECT_FLAGS = extern enum(i32) {
    KF_REDIRECT_USER_EXCLUSIVE = 1,
    KF_REDIRECT_COPY_SOURCE_DACL = 2,
    KF_REDIRECT_OWNER_USER = 4,
    KF_REDIRECT_SET_OWNER_EXPLICIT = 8,
    KF_REDIRECT_CHECK_ONLY = 16,
    KF_REDIRECT_WITH_UI = 32,
    KF_REDIRECT_UNPIN = 64,
    KF_REDIRECT_PIN = 128,
    KF_REDIRECT_COPY_CONTENTS = 512,
    KF_REDIRECT_DEL_SOURCE_CONTENTS = 1024,
    KF_REDIRECT_EXCLUDE_ALL_KNOWN_SUBFOLDERS = 2048,
};
pub const KF_REDIRECT_USER_EXCLUSIVE = _KF_REDIRECT_FLAGS.KF_REDIRECT_USER_EXCLUSIVE;
pub const KF_REDIRECT_COPY_SOURCE_DACL = _KF_REDIRECT_FLAGS.KF_REDIRECT_COPY_SOURCE_DACL;
pub const KF_REDIRECT_OWNER_USER = _KF_REDIRECT_FLAGS.KF_REDIRECT_OWNER_USER;
pub const KF_REDIRECT_SET_OWNER_EXPLICIT = _KF_REDIRECT_FLAGS.KF_REDIRECT_SET_OWNER_EXPLICIT;
pub const KF_REDIRECT_CHECK_ONLY = _KF_REDIRECT_FLAGS.KF_REDIRECT_CHECK_ONLY;
pub const KF_REDIRECT_WITH_UI = _KF_REDIRECT_FLAGS.KF_REDIRECT_WITH_UI;
pub const KF_REDIRECT_UNPIN = _KF_REDIRECT_FLAGS.KF_REDIRECT_UNPIN;
pub const KF_REDIRECT_PIN = _KF_REDIRECT_FLAGS.KF_REDIRECT_PIN;
pub const KF_REDIRECT_COPY_CONTENTS = _KF_REDIRECT_FLAGS.KF_REDIRECT_COPY_CONTENTS;
pub const KF_REDIRECT_DEL_SOURCE_CONTENTS = _KF_REDIRECT_FLAGS.KF_REDIRECT_DEL_SOURCE_CONTENTS;
pub const KF_REDIRECT_EXCLUDE_ALL_KNOWN_SUBFOLDERS = _KF_REDIRECT_FLAGS.KF_REDIRECT_EXCLUDE_ALL_KNOWN_SUBFOLDERS;

pub const _KF_REDIRECTION_CAPABILITIES = extern enum(i32) {
    KF_REDIRECTION_CAPABILITIES_ALLOW_ALL = 255,
    KF_REDIRECTION_CAPABILITIES_REDIRECTABLE = 1,
    KF_REDIRECTION_CAPABILITIES_DENY_ALL = 1048320,
    KF_REDIRECTION_CAPABILITIES_DENY_POLICY_REDIRECTED = 256,
    KF_REDIRECTION_CAPABILITIES_DENY_POLICY = 512,
    KF_REDIRECTION_CAPABILITIES_DENY_PERMISSIONS = 1024,
};
pub const KF_REDIRECTION_CAPABILITIES_ALLOW_ALL = _KF_REDIRECTION_CAPABILITIES.KF_REDIRECTION_CAPABILITIES_ALLOW_ALL;
pub const KF_REDIRECTION_CAPABILITIES_REDIRECTABLE = _KF_REDIRECTION_CAPABILITIES.KF_REDIRECTION_CAPABILITIES_REDIRECTABLE;
pub const KF_REDIRECTION_CAPABILITIES_DENY_ALL = _KF_REDIRECTION_CAPABILITIES.KF_REDIRECTION_CAPABILITIES_DENY_ALL;
pub const KF_REDIRECTION_CAPABILITIES_DENY_POLICY_REDIRECTED = _KF_REDIRECTION_CAPABILITIES.KF_REDIRECTION_CAPABILITIES_DENY_POLICY_REDIRECTED;
pub const KF_REDIRECTION_CAPABILITIES_DENY_POLICY = _KF_REDIRECTION_CAPABILITIES.KF_REDIRECTION_CAPABILITIES_DENY_POLICY;
pub const KF_REDIRECTION_CAPABILITIES_DENY_PERMISSIONS = _KF_REDIRECTION_CAPABILITIES.KF_REDIRECTION_CAPABILITIES_DENY_PERMISSIONS;

pub const KNOWNFOLDER_DEFINITION = extern struct {
    category: KF_CATEGORY,
    pszName: PWSTR,
    pszDescription: PWSTR,
    fidParent: Guid,
    pszRelativePath: PWSTR,
    pszParsingName: PWSTR,
    pszTooltip: PWSTR,
    pszLocalizedName: PWSTR,
    pszIcon: PWSTR,
    pszSecurity: PWSTR,
    dwAttributes: u32,
    kfdFlags: u32,
    ftidType: Guid,
};

const IID_IKnownFolder_Value = @import("../zig.zig").Guid.initString("3AA7AF7E-9B36-420C-A8E3-F77D4674A488");
pub const IID_IKnownFolder = &IID_IKnownFolder_Value;
pub const IKnownFolder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetId: fn(
            self: *const IKnownFolder,
            pkfid: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategory: fn(
            self: *const IKnownFolder,
            pCategory: *KF_CATEGORY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShellItem: fn(
            self: *const IKnownFolder,
            dwFlags: u32,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPath: fn(
            self: *const IKnownFolder,
            dwFlags: u32,
            ppszPath: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPath: fn(
            self: *const IKnownFolder,
            dwFlags: u32,
            pszPath: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDList: fn(
            self: *const IKnownFolder,
            dwFlags: u32,
            ppidl: **ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderType: fn(
            self: *const IKnownFolder,
            pftid: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRedirectionCapabilities: fn(
            self: *const IKnownFolder,
            pCapabilities: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderDefinition: fn(
            self: *const IKnownFolder,
            pKFD: *KNOWNFOLDER_DEFINITION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolder_GetId(self: *const T, pkfid: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolder.VTable, self.vtable).GetId(@ptrCast(*const IKnownFolder, self), pkfid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolder_GetCategory(self: *const T, pCategory: *KF_CATEGORY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolder.VTable, self.vtable).GetCategory(@ptrCast(*const IKnownFolder, self), pCategory);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolder_GetShellItem(self: *const T, dwFlags: u32, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolder.VTable, self.vtable).GetShellItem(@ptrCast(*const IKnownFolder, self), dwFlags, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolder_GetPath(self: *const T, dwFlags: u32, ppszPath: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolder.VTable, self.vtable).GetPath(@ptrCast(*const IKnownFolder, self), dwFlags, ppszPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolder_SetPath(self: *const T, dwFlags: u32, pszPath: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolder.VTable, self.vtable).SetPath(@ptrCast(*const IKnownFolder, self), dwFlags, pszPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolder_GetIDList(self: *const T, dwFlags: u32, ppidl: **ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolder.VTable, self.vtable).GetIDList(@ptrCast(*const IKnownFolder, self), dwFlags, ppidl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolder_GetFolderType(self: *const T, pftid: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolder.VTable, self.vtable).GetFolderType(@ptrCast(*const IKnownFolder, self), pftid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolder_GetRedirectionCapabilities(self: *const T, pCapabilities: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolder.VTable, self.vtable).GetRedirectionCapabilities(@ptrCast(*const IKnownFolder, self), pCapabilities);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolder_GetFolderDefinition(self: *const T, pKFD: *KNOWNFOLDER_DEFINITION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolder.VTable, self.vtable).GetFolderDefinition(@ptrCast(*const IKnownFolder, self), pKFD);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const FFFP_MODE = extern enum(i32) {
    FFFP_EXACTMATCH = 0,
    FFFP_NEARESTPARENTMATCH = 1,
};
pub const FFFP_EXACTMATCH = FFFP_MODE.FFFP_EXACTMATCH;
pub const FFFP_NEARESTPARENTMATCH = FFFP_MODE.FFFP_NEARESTPARENTMATCH;

const IID_IKnownFolderManager_Value = @import("../zig.zig").Guid.initString("8BE2D872-86AA-4D47-B776-32CCA40C7018");
pub const IID_IKnownFolderManager = &IID_IKnownFolderManager_Value;
pub const IKnownFolderManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FolderIdFromCsidl: fn(
            self: *const IKnownFolderManager,
            nCsidl: i32,
            pfid: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FolderIdToCsidl: fn(
            self: *const IKnownFolderManager,
            rfid: *const Guid,
            pnCsidl: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderIds: fn(
            self: *const IKnownFolderManager,
            ppKFId: [*]*Guid,
            pCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: fn(
            self: *const IKnownFolderManager,
            rfid: *const Guid,
            ppkf: **IKnownFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderByName: fn(
            self: *const IKnownFolderManager,
            pszCanonicalName: [*:0]const u16,
            ppkf: **IKnownFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterFolder: fn(
            self: *const IKnownFolderManager,
            rfid: *const Guid,
            pKFD: *const KNOWNFOLDER_DEFINITION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterFolder: fn(
            self: *const IKnownFolderManager,
            rfid: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFolderFromPath: fn(
            self: *const IKnownFolderManager,
            pszPath: [*:0]const u16,
            mode: FFFP_MODE,
            ppkf: **IKnownFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFolderFromIDList: fn(
            self: *const IKnownFolderManager,
            pidl: *ITEMIDLIST,
            ppkf: **IKnownFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Redirect: fn(
            self: *const IKnownFolderManager,
            rfid: *const Guid,
            hwnd: HWND,
            flags: u32,
            pszTargetPath: ?[*:0]const u16,
            cFolders: u32,
            pExclusion: ?[*]const Guid,
            ppszError: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolderManager_FolderIdFromCsidl(self: *const T, nCsidl: i32, pfid: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolderManager.VTable, self.vtable).FolderIdFromCsidl(@ptrCast(*const IKnownFolderManager, self), nCsidl, pfid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolderManager_FolderIdToCsidl(self: *const T, rfid: *const Guid, pnCsidl: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolderManager.VTable, self.vtable).FolderIdToCsidl(@ptrCast(*const IKnownFolderManager, self), rfid, pnCsidl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolderManager_GetFolderIds(self: *const T, ppKFId: [*]*Guid, pCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolderManager.VTable, self.vtable).GetFolderIds(@ptrCast(*const IKnownFolderManager, self), ppKFId, pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolderManager_GetFolder(self: *const T, rfid: *const Guid, ppkf: **IKnownFolder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolderManager.VTable, self.vtable).GetFolder(@ptrCast(*const IKnownFolderManager, self), rfid, ppkf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolderManager_GetFolderByName(self: *const T, pszCanonicalName: [*:0]const u16, ppkf: **IKnownFolder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolderManager.VTable, self.vtable).GetFolderByName(@ptrCast(*const IKnownFolderManager, self), pszCanonicalName, ppkf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolderManager_RegisterFolder(self: *const T, rfid: *const Guid, pKFD: *const KNOWNFOLDER_DEFINITION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolderManager.VTable, self.vtable).RegisterFolder(@ptrCast(*const IKnownFolderManager, self), rfid, pKFD);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolderManager_UnregisterFolder(self: *const T, rfid: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolderManager.VTable, self.vtable).UnregisterFolder(@ptrCast(*const IKnownFolderManager, self), rfid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolderManager_FindFolderFromPath(self: *const T, pszPath: [*:0]const u16, mode: FFFP_MODE, ppkf: **IKnownFolder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolderManager.VTable, self.vtable).FindFolderFromPath(@ptrCast(*const IKnownFolderManager, self), pszPath, mode, ppkf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolderManager_FindFolderFromIDList(self: *const T, pidl: *ITEMIDLIST, ppkf: **IKnownFolder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolderManager.VTable, self.vtable).FindFolderFromIDList(@ptrCast(*const IKnownFolderManager, self), pidl, ppkf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnownFolderManager_Redirect(self: *const T, rfid: *const Guid, hwnd: HWND, flags: u32, pszTargetPath: ?[*:0]const u16, cFolders: u32, pExclusion: ?[*]const Guid, ppszError: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnownFolderManager.VTable, self.vtable).Redirect(@ptrCast(*const IKnownFolderManager, self), rfid, hwnd, flags, pszTargetPath, cFolders, pExclusion, ppszError);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SHARE_ROLE = extern enum(i32) {
    INVALID = -1,
    READER = 0,
    CONTRIBUTOR = 1,
    CO_OWNER = 2,
    OWNER = 3,
    CUSTOM = 4,
    MIXED = 5,
};
pub const SHARE_ROLE_INVALID = SHARE_ROLE.INVALID;
pub const SHARE_ROLE_READER = SHARE_ROLE.READER;
pub const SHARE_ROLE_CONTRIBUTOR = SHARE_ROLE.CONTRIBUTOR;
pub const SHARE_ROLE_CO_OWNER = SHARE_ROLE.CO_OWNER;
pub const SHARE_ROLE_OWNER = SHARE_ROLE.OWNER;
pub const SHARE_ROLE_CUSTOM = SHARE_ROLE.CUSTOM;
pub const SHARE_ROLE_MIXED = SHARE_ROLE.MIXED;

pub const DEF_SHARE_ID = extern enum(i32) {
    DEFSHAREID_USERS = 1,
    DEFSHAREID_PUBLIC = 2,
};
pub const DEFSHAREID_USERS = DEF_SHARE_ID.DEFSHAREID_USERS;
pub const DEFSHAREID_PUBLIC = DEF_SHARE_ID.DEFSHAREID_PUBLIC;

const IID_ISharingConfigurationManager_Value = @import("../zig.zig").Guid.initString("B4CD448A-9C86-4466-9201-2E62105B87AE");
pub const IID_ISharingConfigurationManager = &IID_ISharingConfigurationManager_Value;
pub const ISharingConfigurationManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateShare: fn(
            self: *const ISharingConfigurationManager,
            dsid: DEF_SHARE_ID,
            role: SHARE_ROLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteShare: fn(
            self: *const ISharingConfigurationManager,
            dsid: DEF_SHARE_ID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShareExists: fn(
            self: *const ISharingConfigurationManager,
            dsid: DEF_SHARE_ID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSharePermissions: fn(
            self: *const ISharingConfigurationManager,
            dsid: DEF_SHARE_ID,
            pRole: *SHARE_ROLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SharePrinters: fn(
            self: *const ISharingConfigurationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopSharingPrinters: fn(
            self: *const ISharingConfigurationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ArePrintersShared: fn(
            self: *const ISharingConfigurationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharingConfigurationManager_CreateShare(self: *const T, dsid: DEF_SHARE_ID, role: SHARE_ROLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharingConfigurationManager.VTable, self.vtable).CreateShare(@ptrCast(*const ISharingConfigurationManager, self), dsid, role);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharingConfigurationManager_DeleteShare(self: *const T, dsid: DEF_SHARE_ID) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharingConfigurationManager.VTable, self.vtable).DeleteShare(@ptrCast(*const ISharingConfigurationManager, self), dsid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharingConfigurationManager_ShareExists(self: *const T, dsid: DEF_SHARE_ID) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharingConfigurationManager.VTable, self.vtable).ShareExists(@ptrCast(*const ISharingConfigurationManager, self), dsid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharingConfigurationManager_GetSharePermissions(self: *const T, dsid: DEF_SHARE_ID, pRole: *SHARE_ROLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharingConfigurationManager.VTable, self.vtable).GetSharePermissions(@ptrCast(*const ISharingConfigurationManager, self), dsid, pRole);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharingConfigurationManager_SharePrinters(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharingConfigurationManager.VTable, self.vtable).SharePrinters(@ptrCast(*const ISharingConfigurationManager, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharingConfigurationManager_StopSharingPrinters(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharingConfigurationManager.VTable, self.vtable).StopSharingPrinters(@ptrCast(*const ISharingConfigurationManager, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharingConfigurationManager_ArePrintersShared(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharingConfigurationManager.VTable, self.vtable).ArePrintersShared(@ptrCast(*const ISharingConfigurationManager, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRelatedItem_Value = @import("../zig.zig").Guid.initString("A73CE67A-8AB1-44F1-8D43-D2FCBF6B1CD0");
pub const IID_IRelatedItem = &IID_IRelatedItem_Value;
pub const IRelatedItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemIDList: fn(
            self: *const IRelatedItem,
            ppidl: **ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: fn(
            self: *const IRelatedItem,
            ppsi: **IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRelatedItem_GetItemIDList(self: *const T, ppidl: **ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRelatedItem.VTable, self.vtable).GetItemIDList(@ptrCast(*const IRelatedItem, self), ppidl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRelatedItem_GetItem(self: *const T, ppsi: **IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRelatedItem.VTable, self.vtable).GetItem(@ptrCast(*const IRelatedItem, self), ppsi);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IIdentityName_Value = @import("../zig.zig").Guid.initString("7D903FCA-D6F9-4810-8332-946C0177E247");
pub const IID_IIdentityName = &IID_IIdentityName_Value;
pub const IIdentityName = extern struct {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IRelatedItem.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDelegateItem_Value = @import("../zig.zig").Guid.initString("3C5A1C94-C951-4CB7-BB6D-3B93F30CCE93");
pub const IID_IDelegateItem = &IID_IDelegateItem_Value;
pub const IDelegateItem = extern struct {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IRelatedItem.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICurrentItem_Value = @import("../zig.zig").Guid.initString("240A7174-D653-4A1D-A6D3-D4943CFBFE3D");
pub const IID_ICurrentItem = &IID_ICurrentItem_Value;
pub const ICurrentItem = extern struct {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IRelatedItem.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransferMediumItem_Value = @import("../zig.zig").Guid.initString("77F295D5-2D6F-4E19-B8AE-322F3E721AB5");
pub const IID_ITransferMediumItem = &IID_ITransferMediumItem_Value;
pub const ITransferMediumItem = extern struct {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IRelatedItem.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDisplayItem_Value = @import("../zig.zig").Guid.initString("C6FD5997-9F6B-4888-8703-94E80E8CDE3F");
pub const IID_IDisplayItem = &IID_IDisplayItem_Value;
pub const IDisplayItem = extern struct {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IRelatedItem.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IViewStateIdentityItem_Value = @import("../zig.zig").Guid.initString("9D264146-A94F-4195-9F9F-3BB12CE0C955");
pub const IID_IViewStateIdentityItem = &IID_IViewStateIdentityItem_Value;
pub const IViewStateIdentityItem = extern struct {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IRelatedItem.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPreviewItem_Value = @import("../zig.zig").Guid.initString("36149969-0A8F-49C8-8B00-4AECB20222FB");
pub const IID_IPreviewItem = &IID_IPreviewItem_Value;
pub const IPreviewItem = extern struct {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IRelatedItem.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDestinationStreamFactory_Value = @import("../zig.zig").Guid.initString("8A87781B-39A7-4A1F-AAB3-A39B9C34A7D9");
pub const IID_IDestinationStreamFactory = &IID_IDestinationStreamFactory_Value;
pub const IDestinationStreamFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDestinationStream: fn(
            self: *const IDestinationStreamFactory,
            ppstm: **IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDestinationStreamFactory_GetDestinationStream(self: *const T, ppstm: **IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDestinationStreamFactory.VTable, self.vtable).GetDestinationStream(@ptrCast(*const IDestinationStreamFactory, self), ppstm);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICreateProcessInputs_Value = @import("../zig.zig").Guid.initString("F6EF6140-E26F-4D82-BAC4-E9BA5FD239A8");
pub const IID_ICreateProcessInputs = &IID_ICreateProcessInputs_Value;
pub const ICreateProcessInputs = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCreateFlags: fn(
            self: *const ICreateProcessInputs,
            pdwCreationFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCreateFlags: fn(
            self: *const ICreateProcessInputs,
            dwCreationFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCreateFlags: fn(
            self: *const ICreateProcessInputs,
            dwCreationFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHotKey: fn(
            self: *const ICreateProcessInputs,
            wHotKey: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStartupFlags: fn(
            self: *const ICreateProcessInputs,
            dwStartupInfoFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTitle: fn(
            self: *const ICreateProcessInputs,
            pszTitle: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnvironmentVariableA: fn(
            self: *const ICreateProcessInputs,
            pszName: [*:0]const u16,
            pszValue: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICreateProcessInputs_GetCreateFlags(self: *const T, pdwCreationFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICreateProcessInputs.VTable, self.vtable).GetCreateFlags(@ptrCast(*const ICreateProcessInputs, self), pdwCreationFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICreateProcessInputs_SetCreateFlags(self: *const T, dwCreationFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICreateProcessInputs.VTable, self.vtable).SetCreateFlags(@ptrCast(*const ICreateProcessInputs, self), dwCreationFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICreateProcessInputs_AddCreateFlags(self: *const T, dwCreationFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICreateProcessInputs.VTable, self.vtable).AddCreateFlags(@ptrCast(*const ICreateProcessInputs, self), dwCreationFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICreateProcessInputs_SetHotKey(self: *const T, wHotKey: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICreateProcessInputs.VTable, self.vtable).SetHotKey(@ptrCast(*const ICreateProcessInputs, self), wHotKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICreateProcessInputs_AddStartupFlags(self: *const T, dwStartupInfoFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICreateProcessInputs.VTable, self.vtable).AddStartupFlags(@ptrCast(*const ICreateProcessInputs, self), dwStartupInfoFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICreateProcessInputs_SetTitle(self: *const T, pszTitle: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICreateProcessInputs.VTable, self.vtable).SetTitle(@ptrCast(*const ICreateProcessInputs, self), pszTitle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICreateProcessInputs_SetEnvironmentVariableA(self: *const T, pszName: [*:0]const u16, pszValue: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICreateProcessInputs.VTable, self.vtable).SetEnvironmentVariableA(@ptrCast(*const ICreateProcessInputs, self), pszName, pszValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICreatingProcess_Value = @import("../zig.zig").Guid.initString("C2B937A9-3110-4398-8A56-F34C6342D244");
pub const IID_ICreatingProcess = &IID_ICreatingProcess_Value;
pub const ICreatingProcess = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnCreating: fn(
            self: *const ICreatingProcess,
            pcpi: *ICreateProcessInputs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICreatingProcess_OnCreating(self: *const T, pcpi: *ICreateProcessInputs) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICreatingProcess.VTable, self.vtable).OnCreating(@ptrCast(*const ICreatingProcess, self), pcpi);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILaunchUIContext_Value = @import("../zig.zig").Guid.initString("1791E8F6-21C7-4340-882A-A6A93E3FD73B");
pub const IID_ILaunchUIContext = &IID_ILaunchUIContext_Value;
pub const ILaunchUIContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAssociatedWindow: fn(
            self: *const ILaunchUIContext,
            value: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTabGroupingPreference: fn(
            self: *const ILaunchUIContext,
            value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILaunchUIContext_SetAssociatedWindow(self: *const T, value: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILaunchUIContext.VTable, self.vtable).SetAssociatedWindow(@ptrCast(*const ILaunchUIContext, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILaunchUIContext_SetTabGroupingPreference(self: *const T, value: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILaunchUIContext.VTable, self.vtable).SetTabGroupingPreference(@ptrCast(*const ILaunchUIContext, self), value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILaunchUIContextProvider_Value = @import("../zig.zig").Guid.initString("0D12C4C8-A3D9-4E24-94C1-0E20C5A956C4");
pub const IID_ILaunchUIContextProvider = &IID_ILaunchUIContextProvider_Value;
pub const ILaunchUIContextProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UpdateContext: fn(
            self: *const ILaunchUIContextProvider,
            context: *ILaunchUIContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILaunchUIContextProvider_UpdateContext(self: *const T, context: *ILaunchUIContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILaunchUIContextProvider.VTable, self.vtable).UpdateContext(@ptrCast(*const ILaunchUIContextProvider, self), context);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _NMCII_FLAGS = extern enum(i32) {
    NMCII_NONE = 0,
    NMCII_ITEMS = 1,
    NMCII_FOLDERS = 2,
};
pub const NMCII_NONE = _NMCII_FLAGS.NMCII_NONE;
pub const NMCII_ITEMS = _NMCII_FLAGS.NMCII_ITEMS;
pub const NMCII_FOLDERS = _NMCII_FLAGS.NMCII_FOLDERS;

pub const _NMCSAEI_FLAGS = extern enum(i32) {
    NMCSAEI_SELECT = 0,
    NMCSAEI_EDIT = 1,
};
pub const NMCSAEI_SELECT = _NMCSAEI_FLAGS.NMCSAEI_SELECT;
pub const NMCSAEI_EDIT = _NMCSAEI_FLAGS.NMCSAEI_EDIT;

const IID_INewMenuClient_Value = @import("../zig.zig").Guid.initString("DCB07FDC-3BB5-451C-90BE-966644FED7B0");
pub const IID_INewMenuClient = &IID_INewMenuClient_Value;
pub const INewMenuClient = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IncludeItems: fn(
            self: *const INewMenuClient,
            pflags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectAndEditItem: fn(
            self: *const INewMenuClient,
            pidlItem: *ITEMIDLIST,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INewMenuClient_IncludeItems(self: *const T, pflags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INewMenuClient.VTable, self.vtable).IncludeItems(@ptrCast(*const INewMenuClient, self), pflags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INewMenuClient_SelectAndEditItem(self: *const T, pidlItem: *ITEMIDLIST, flags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INewMenuClient.VTable, self.vtable).SelectAndEditItem(@ptrCast(*const INewMenuClient, self), pidlItem, flags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInitializeWithBindCtx_Value = @import("../zig.zig").Guid.initString("71C0D2BC-726D-45CC-A6C0-2E31C1DB2159");
pub const IID_IInitializeWithBindCtx = &IID_IInitializeWithBindCtx_Value;
pub const IInitializeWithBindCtx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IInitializeWithBindCtx,
            pbc: *IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInitializeWithBindCtx_Initialize(self: *const T, pbc: *IBindCtx) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInitializeWithBindCtx.VTable, self.vtable).Initialize(@ptrCast(*const IInitializeWithBindCtx, self), pbc);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellItemFilter_Value = @import("../zig.zig").Guid.initString("2659B475-EEB8-48B7-8F07-B378810F48CF");
pub const IID_IShellItemFilter = &IID_IShellItemFilter_Value;
pub const IShellItemFilter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IncludeItem: fn(
            self: *const IShellItemFilter,
            psi: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumFlagsForItem: fn(
            self: *const IShellItemFilter,
            psi: *IShellItem,
            pgrfFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemFilter_IncludeItem(self: *const T, psi: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemFilter.VTable, self.vtable).IncludeItem(@ptrCast(*const IShellItemFilter, self), psi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellItemFilter_GetEnumFlagsForItem(self: *const T, psi: *IShellItem, pgrfFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellItemFilter.VTable, self.vtable).GetEnumFlagsForItem(@ptrCast(*const IShellItemFilter, self), psi, pgrfFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _NSTCSTYLE = extern enum(i32) {
    NSTCS_HASEXPANDOS = 1,
    NSTCS_HASLINES = 2,
    NSTCS_SINGLECLICKEXPAND = 4,
    NSTCS_FULLROWSELECT = 8,
    NSTCS_SPRINGEXPAND = 16,
    NSTCS_HORIZONTALSCROLL = 32,
    NSTCS_ROOTHASEXPANDO = 64,
    NSTCS_SHOWSELECTIONALWAYS = 128,
    NSTCS_NOINFOTIP = 512,
    NSTCS_EVENHEIGHT = 1024,
    NSTCS_NOREPLACEOPEN = 2048,
    NSTCS_DISABLEDRAGDROP = 4096,
    NSTCS_NOORDERSTREAM = 8192,
    NSTCS_RICHTOOLTIP = 16384,
    NSTCS_BORDER = 32768,
    NSTCS_NOEDITLABELS = 65536,
    NSTCS_TABSTOP = 131072,
    NSTCS_FAVORITESMODE = 524288,
    NSTCS_AUTOHSCROLL = 1048576,
    NSTCS_FADEINOUTEXPANDOS = 2097152,
    NSTCS_EMPTYTEXT = 4194304,
    NSTCS_CHECKBOXES = 8388608,
    NSTCS_PARTIALCHECKBOXES = 16777216,
    NSTCS_EXCLUSIONCHECKBOXES = 33554432,
    NSTCS_DIMMEDCHECKBOXES = 67108864,
    NSTCS_NOINDENTCHECKS = 134217728,
    NSTCS_ALLOWJUNCTIONS = 268435456,
    NSTCS_SHOWTABSBUTTON = 536870912,
    NSTCS_SHOWDELETEBUTTON = 1073741824,
    NSTCS_SHOWREFRESHBUTTON = -2147483648,
};
pub const NSTCS_HASEXPANDOS = _NSTCSTYLE.NSTCS_HASEXPANDOS;
pub const NSTCS_HASLINES = _NSTCSTYLE.NSTCS_HASLINES;
pub const NSTCS_SINGLECLICKEXPAND = _NSTCSTYLE.NSTCS_SINGLECLICKEXPAND;
pub const NSTCS_FULLROWSELECT = _NSTCSTYLE.NSTCS_FULLROWSELECT;
pub const NSTCS_SPRINGEXPAND = _NSTCSTYLE.NSTCS_SPRINGEXPAND;
pub const NSTCS_HORIZONTALSCROLL = _NSTCSTYLE.NSTCS_HORIZONTALSCROLL;
pub const NSTCS_ROOTHASEXPANDO = _NSTCSTYLE.NSTCS_ROOTHASEXPANDO;
pub const NSTCS_SHOWSELECTIONALWAYS = _NSTCSTYLE.NSTCS_SHOWSELECTIONALWAYS;
pub const NSTCS_NOINFOTIP = _NSTCSTYLE.NSTCS_NOINFOTIP;
pub const NSTCS_EVENHEIGHT = _NSTCSTYLE.NSTCS_EVENHEIGHT;
pub const NSTCS_NOREPLACEOPEN = _NSTCSTYLE.NSTCS_NOREPLACEOPEN;
pub const NSTCS_DISABLEDRAGDROP = _NSTCSTYLE.NSTCS_DISABLEDRAGDROP;
pub const NSTCS_NOORDERSTREAM = _NSTCSTYLE.NSTCS_NOORDERSTREAM;
pub const NSTCS_RICHTOOLTIP = _NSTCSTYLE.NSTCS_RICHTOOLTIP;
pub const NSTCS_BORDER = _NSTCSTYLE.NSTCS_BORDER;
pub const NSTCS_NOEDITLABELS = _NSTCSTYLE.NSTCS_NOEDITLABELS;
pub const NSTCS_TABSTOP = _NSTCSTYLE.NSTCS_TABSTOP;
pub const NSTCS_FAVORITESMODE = _NSTCSTYLE.NSTCS_FAVORITESMODE;
pub const NSTCS_AUTOHSCROLL = _NSTCSTYLE.NSTCS_AUTOHSCROLL;
pub const NSTCS_FADEINOUTEXPANDOS = _NSTCSTYLE.NSTCS_FADEINOUTEXPANDOS;
pub const NSTCS_EMPTYTEXT = _NSTCSTYLE.NSTCS_EMPTYTEXT;
pub const NSTCS_CHECKBOXES = _NSTCSTYLE.NSTCS_CHECKBOXES;
pub const NSTCS_PARTIALCHECKBOXES = _NSTCSTYLE.NSTCS_PARTIALCHECKBOXES;
pub const NSTCS_EXCLUSIONCHECKBOXES = _NSTCSTYLE.NSTCS_EXCLUSIONCHECKBOXES;
pub const NSTCS_DIMMEDCHECKBOXES = _NSTCSTYLE.NSTCS_DIMMEDCHECKBOXES;
pub const NSTCS_NOINDENTCHECKS = _NSTCSTYLE.NSTCS_NOINDENTCHECKS;
pub const NSTCS_ALLOWJUNCTIONS = _NSTCSTYLE.NSTCS_ALLOWJUNCTIONS;
pub const NSTCS_SHOWTABSBUTTON = _NSTCSTYLE.NSTCS_SHOWTABSBUTTON;
pub const NSTCS_SHOWDELETEBUTTON = _NSTCSTYLE.NSTCS_SHOWDELETEBUTTON;
pub const NSTCS_SHOWREFRESHBUTTON = _NSTCSTYLE.NSTCS_SHOWREFRESHBUTTON;

pub const _NSTCROOTSTYLE = extern enum(i32) {
    NSTCRS_VISIBLE = 0,
    NSTCRS_HIDDEN = 1,
    NSTCRS_EXPANDED = 2,
};
pub const NSTCRS_VISIBLE = _NSTCROOTSTYLE.NSTCRS_VISIBLE;
pub const NSTCRS_HIDDEN = _NSTCROOTSTYLE.NSTCRS_HIDDEN;
pub const NSTCRS_EXPANDED = _NSTCROOTSTYLE.NSTCRS_EXPANDED;

pub const _NSTCITEMSTATE = extern enum(i32) {
    NSTCIS_NONE = 0,
    NSTCIS_SELECTED = 1,
    NSTCIS_EXPANDED = 2,
    NSTCIS_BOLD = 4,
    NSTCIS_DISABLED = 8,
    NSTCIS_SELECTEDNOEXPAND = 16,
};
pub const NSTCIS_NONE = _NSTCITEMSTATE.NSTCIS_NONE;
pub const NSTCIS_SELECTED = _NSTCITEMSTATE.NSTCIS_SELECTED;
pub const NSTCIS_EXPANDED = _NSTCITEMSTATE.NSTCIS_EXPANDED;
pub const NSTCIS_BOLD = _NSTCITEMSTATE.NSTCIS_BOLD;
pub const NSTCIS_DISABLED = _NSTCITEMSTATE.NSTCIS_DISABLED;
pub const NSTCIS_SELECTEDNOEXPAND = _NSTCITEMSTATE.NSTCIS_SELECTEDNOEXPAND;

pub const NSTCGNI = extern enum(i32) {
    NEXT = 0,
    NEXTVISIBLE = 1,
    PREV = 2,
    PREVVISIBLE = 3,
    PARENT = 4,
    CHILD = 5,
    FIRSTVISIBLE = 6,
    LASTVISIBLE = 7,
};
pub const NSTCGNI_NEXT = NSTCGNI.NEXT;
pub const NSTCGNI_NEXTVISIBLE = NSTCGNI.NEXTVISIBLE;
pub const NSTCGNI_PREV = NSTCGNI.PREV;
pub const NSTCGNI_PREVVISIBLE = NSTCGNI.PREVVISIBLE;
pub const NSTCGNI_PARENT = NSTCGNI.PARENT;
pub const NSTCGNI_CHILD = NSTCGNI.CHILD;
pub const NSTCGNI_FIRSTVISIBLE = NSTCGNI.FIRSTVISIBLE;
pub const NSTCGNI_LASTVISIBLE = NSTCGNI.LASTVISIBLE;

const IID_INameSpaceTreeControl_Value = @import("../zig.zig").Guid.initString("028212A3-B627-47E9-8856-C14265554E4F");
pub const IID_INameSpaceTreeControl = &IID_INameSpaceTreeControl_Value;
pub const INameSpaceTreeControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const INameSpaceTreeControl,
            hwndParent: HWND,
            prc: *RECT,
            nsctsFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TreeAdvise: fn(
            self: *const INameSpaceTreeControl,
            punk: *IUnknown,
            pdwCookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TreeUnadvise: fn(
            self: *const INameSpaceTreeControl,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendRoot: fn(
            self: *const INameSpaceTreeControl,
            psiRoot: *IShellItem,
            grfEnumFlags: u32,
            grfRootStyle: u32,
            pif: *IShellItemFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertRoot: fn(
            self: *const INameSpaceTreeControl,
            iIndex: i32,
            psiRoot: *IShellItem,
            grfEnumFlags: u32,
            grfRootStyle: u32,
            pif: *IShellItemFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveRoot: fn(
            self: *const INameSpaceTreeControl,
            psiRoot: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllRoots: fn(
            self: *const INameSpaceTreeControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRootItems: fn(
            self: *const INameSpaceTreeControl,
            ppsiaRootItems: **IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemState: fn(
            self: *const INameSpaceTreeControl,
            psi: *IShellItem,
            nstcisMask: u32,
            nstcisFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemState: fn(
            self: *const INameSpaceTreeControl,
            psi: *IShellItem,
            nstcisMask: u32,
            pnstcisFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedItems: fn(
            self: *const INameSpaceTreeControl,
            psiaItems: **IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemCustomState: fn(
            self: *const INameSpaceTreeControl,
            psi: *IShellItem,
            piStateNumber: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemCustomState: fn(
            self: *const INameSpaceTreeControl,
            psi: *IShellItem,
            iStateNumber: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnsureItemVisible: fn(
            self: *const INameSpaceTreeControl,
            psi: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTheme: fn(
            self: *const INameSpaceTreeControl,
            pszTheme: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextItem: fn(
            self: *const INameSpaceTreeControl,
            psi: *IShellItem,
            nstcgi: NSTCGNI,
            ppsiNext: **IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTest: fn(
            self: *const INameSpaceTreeControl,
            ppt: *POINT,
            ppsiOut: **IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemRect: fn(
            self: *const INameSpaceTreeControl,
            psi: *IShellItem,
            prect: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CollapseAll: fn(
            self: *const INameSpaceTreeControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_Initialize(self: *const T, hwndParent: HWND, prc: *RECT, nsctsFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).Initialize(@ptrCast(*const INameSpaceTreeControl, self), hwndParent, prc, nsctsFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_TreeAdvise(self: *const T, punk: *IUnknown, pdwCookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).TreeAdvise(@ptrCast(*const INameSpaceTreeControl, self), punk, pdwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_TreeUnadvise(self: *const T, dwCookie: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).TreeUnadvise(@ptrCast(*const INameSpaceTreeControl, self), dwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_AppendRoot(self: *const T, psiRoot: *IShellItem, grfEnumFlags: u32, grfRootStyle: u32, pif: *IShellItemFilter) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).AppendRoot(@ptrCast(*const INameSpaceTreeControl, self), psiRoot, grfEnumFlags, grfRootStyle, pif);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_InsertRoot(self: *const T, iIndex: i32, psiRoot: *IShellItem, grfEnumFlags: u32, grfRootStyle: u32, pif: *IShellItemFilter) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).InsertRoot(@ptrCast(*const INameSpaceTreeControl, self), iIndex, psiRoot, grfEnumFlags, grfRootStyle, pif);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_RemoveRoot(self: *const T, psiRoot: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).RemoveRoot(@ptrCast(*const INameSpaceTreeControl, self), psiRoot);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_RemoveAllRoots(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).RemoveAllRoots(@ptrCast(*const INameSpaceTreeControl, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_GetRootItems(self: *const T, ppsiaRootItems: **IShellItemArray) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).GetRootItems(@ptrCast(*const INameSpaceTreeControl, self), ppsiaRootItems);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_SetItemState(self: *const T, psi: *IShellItem, nstcisMask: u32, nstcisFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).SetItemState(@ptrCast(*const INameSpaceTreeControl, self), psi, nstcisMask, nstcisFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_GetItemState(self: *const T, psi: *IShellItem, nstcisMask: u32, pnstcisFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).GetItemState(@ptrCast(*const INameSpaceTreeControl, self), psi, nstcisMask, pnstcisFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_GetSelectedItems(self: *const T, psiaItems: **IShellItemArray) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).GetSelectedItems(@ptrCast(*const INameSpaceTreeControl, self), psiaItems);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_GetItemCustomState(self: *const T, psi: *IShellItem, piStateNumber: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).GetItemCustomState(@ptrCast(*const INameSpaceTreeControl, self), psi, piStateNumber);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_SetItemCustomState(self: *const T, psi: *IShellItem, iStateNumber: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).SetItemCustomState(@ptrCast(*const INameSpaceTreeControl, self), psi, iStateNumber);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_EnsureItemVisible(self: *const T, psi: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).EnsureItemVisible(@ptrCast(*const INameSpaceTreeControl, self), psi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_SetTheme(self: *const T, pszTheme: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).SetTheme(@ptrCast(*const INameSpaceTreeControl, self), pszTheme);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_GetNextItem(self: *const T, psi: *IShellItem, nstcgi: NSTCGNI, ppsiNext: **IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).GetNextItem(@ptrCast(*const INameSpaceTreeControl, self), psi, nstcgi, ppsiNext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_HitTest(self: *const T, ppt: *POINT, ppsiOut: **IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).HitTest(@ptrCast(*const INameSpaceTreeControl, self), ppt, ppsiOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_GetItemRect(self: *const T, psi: *IShellItem, prect: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).GetItemRect(@ptrCast(*const INameSpaceTreeControl, self), psi, prect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl_CollapseAll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl.VTable, self.vtable).CollapseAll(@ptrCast(*const INameSpaceTreeControl, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const NSTCFOLDERCAPABILITIES = extern enum(i32) {
    NSTCFC_NONE = 0,
    NSTCFC_PINNEDITEMFILTERING = 1,
    NSTCFC_DELAY_REGISTER_NOTIFY = 2,
};
pub const NSTCFC_NONE = NSTCFOLDERCAPABILITIES.NSTCFC_NONE;
pub const NSTCFC_PINNEDITEMFILTERING = NSTCFOLDERCAPABILITIES.NSTCFC_PINNEDITEMFILTERING;
pub const NSTCFC_DELAY_REGISTER_NOTIFY = NSTCFOLDERCAPABILITIES.NSTCFC_DELAY_REGISTER_NOTIFY;

const IID_INameSpaceTreeControlFolderCapabilities_Value = @import("../zig.zig").Guid.initString("E9701183-E6B3-4FF2-8568-813615FEC7BE");
pub const IID_INameSpaceTreeControlFolderCapabilities = &IID_INameSpaceTreeControlFolderCapabilities_Value;
pub const INameSpaceTreeControlFolderCapabilities = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFolderCapabilities: fn(
            self: *const INameSpaceTreeControlFolderCapabilities,
            nfcMask: NSTCFOLDERCAPABILITIES,
            pnfcValue: *NSTCFOLDERCAPABILITIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlFolderCapabilities_GetFolderCapabilities(self: *const T, nfcMask: NSTCFOLDERCAPABILITIES, pnfcValue: *NSTCFOLDERCAPABILITIES) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlFolderCapabilities.VTable, self.vtable).GetFolderCapabilities(@ptrCast(*const INameSpaceTreeControlFolderCapabilities, self), nfcMask, pnfcValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPreviewHandler_Value = @import("../zig.zig").Guid.initString("8895B1C6-B41F-4C1C-A562-0D564250836F");
pub const IID_IPreviewHandler = &IID_IPreviewHandler_Value;
pub const IPreviewHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetWindow: fn(
            self: *const IPreviewHandler,
            hwnd: HWND,
            prc: *const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRect: fn(
            self: *const IPreviewHandler,
            prc: *const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoPreview: fn(
            self: *const IPreviewHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unload: fn(
            self: *const IPreviewHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFocus: fn(
            self: *const IPreviewHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryFocus: fn(
            self: *const IPreviewHandler,
            phwnd: *HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateAcceleratorA: fn(
            self: *const IPreviewHandler,
            pmsg: *MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPreviewHandler_SetWindow(self: *const T, hwnd: HWND, prc: *const RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPreviewHandler.VTable, self.vtable).SetWindow(@ptrCast(*const IPreviewHandler, self), hwnd, prc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPreviewHandler_SetRect(self: *const T, prc: *const RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPreviewHandler.VTable, self.vtable).SetRect(@ptrCast(*const IPreviewHandler, self), prc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPreviewHandler_DoPreview(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPreviewHandler.VTable, self.vtable).DoPreview(@ptrCast(*const IPreviewHandler, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPreviewHandler_Unload(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPreviewHandler.VTable, self.vtable).Unload(@ptrCast(*const IPreviewHandler, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPreviewHandler_SetFocus(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPreviewHandler.VTable, self.vtable).SetFocus(@ptrCast(*const IPreviewHandler, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPreviewHandler_QueryFocus(self: *const T, phwnd: *HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPreviewHandler.VTable, self.vtable).QueryFocus(@ptrCast(*const IPreviewHandler, self), phwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPreviewHandler_TranslateAcceleratorA(self: *const T, pmsg: *MSG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPreviewHandler.VTable, self.vtable).TranslateAcceleratorA(@ptrCast(*const IPreviewHandler, self), pmsg);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PREVIEWHANDLERFRAMEINFO = extern struct {
    haccel: HACCEL,
    cAccelEntries: u32,
};

const IID_IPreviewHandlerFrame_Value = @import("../zig.zig").Guid.initString("FEC87AAF-35F9-447A-ADB7-20234491401A");
pub const IID_IPreviewHandlerFrame = &IID_IPreviewHandlerFrame_Value;
pub const IPreviewHandlerFrame = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetWindowContext: fn(
            self: *const IPreviewHandlerFrame,
            pinfo: *PREVIEWHANDLERFRAMEINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateAcceleratorA: fn(
            self: *const IPreviewHandlerFrame,
            pmsg: *MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPreviewHandlerFrame_GetWindowContext(self: *const T, pinfo: *PREVIEWHANDLERFRAMEINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPreviewHandlerFrame.VTable, self.vtable).GetWindowContext(@ptrCast(*const IPreviewHandlerFrame, self), pinfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPreviewHandlerFrame_TranslateAcceleratorA(self: *const T, pmsg: *MSG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPreviewHandlerFrame.VTable, self.vtable).TranslateAcceleratorA(@ptrCast(*const IPreviewHandlerFrame, self), pmsg);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _EXPLORERPANESTATE = extern enum(i32) {
    EPS_DONTCARE = 0,
    EPS_DEFAULT_ON = 1,
    EPS_DEFAULT_OFF = 2,
    EPS_STATEMASK = 65535,
    EPS_INITIALSTATE = 65536,
    EPS_FORCE = 131072,
};
pub const EPS_DONTCARE = _EXPLORERPANESTATE.EPS_DONTCARE;
pub const EPS_DEFAULT_ON = _EXPLORERPANESTATE.EPS_DEFAULT_ON;
pub const EPS_DEFAULT_OFF = _EXPLORERPANESTATE.EPS_DEFAULT_OFF;
pub const EPS_STATEMASK = _EXPLORERPANESTATE.EPS_STATEMASK;
pub const EPS_INITIALSTATE = _EXPLORERPANESTATE.EPS_INITIALSTATE;
pub const EPS_FORCE = _EXPLORERPANESTATE.EPS_FORCE;

const IID_IExplorerPaneVisibility_Value = @import("../zig.zig").Guid.initString("E07010EC-BC17-44C0-97B0-46C7C95B9EDC");
pub const IID_IExplorerPaneVisibility = &IID_IExplorerPaneVisibility_Value;
pub const IExplorerPaneVisibility = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPaneState: fn(
            self: *const IExplorerPaneVisibility,
            ep: *const Guid,
            peps: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerPaneVisibility_GetPaneState(self: *const T, ep: *const Guid, peps: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerPaneVisibility.VTable, self.vtable).GetPaneState(@ptrCast(*const IExplorerPaneVisibility, self), ep, peps);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IContextMenuCB_Value = @import("../zig.zig").Guid.initString("3409E930-5A39-11D1-83FA-00A0C90DC849");
pub const IID_IContextMenuCB = &IID_IContextMenuCB_Value;
pub const IContextMenuCB = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CallBack: fn(
            self: *const IContextMenuCB,
            psf: ?*IShellFolder,
            hwndOwner: HWND,
            pdtobj: ?*IDataObject,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContextMenuCB_CallBack(self: *const T, psf: ?*IShellFolder, hwndOwner: HWND, pdtobj: ?*IDataObject, uMsg: u32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContextMenuCB.VTable, self.vtable).CallBack(@ptrCast(*const IContextMenuCB, self), psf, hwndOwner, pdtobj, uMsg, wParam, lParam);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDefaultExtractIconInit_Value = @import("../zig.zig").Guid.initString("41DED17D-D6B3-4261-997D-88C60E4B1D58");
pub const IID_IDefaultExtractIconInit = &IID_IDefaultExtractIconInit_Value;
pub const IDefaultExtractIconInit = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFlags: fn(
            self: *const IDefaultExtractIconInit,
            uFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetKey: fn(
            self: *const IDefaultExtractIconInit,
            hkey: HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNormalIcon: fn(
            self: *const IDefaultExtractIconInit,
            pszFile: ?[*:0]const u16,
            iIcon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpenIcon: fn(
            self: *const IDefaultExtractIconInit,
            pszFile: ?[*:0]const u16,
            iIcon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetShortcutIcon: fn(
            self: *const IDefaultExtractIconInit,
            pszFile: ?[*:0]const u16,
            iIcon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultIcon: fn(
            self: *const IDefaultExtractIconInit,
            pszFile: ?[*:0]const u16,
            iIcon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDefaultExtractIconInit_SetFlags(self: *const T, uFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDefaultExtractIconInit.VTable, self.vtable).SetFlags(@ptrCast(*const IDefaultExtractIconInit, self), uFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDefaultExtractIconInit_SetKey(self: *const T, hkey: HKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDefaultExtractIconInit.VTable, self.vtable).SetKey(@ptrCast(*const IDefaultExtractIconInit, self), hkey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDefaultExtractIconInit_SetNormalIcon(self: *const T, pszFile: ?[*:0]const u16, iIcon: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDefaultExtractIconInit.VTable, self.vtable).SetNormalIcon(@ptrCast(*const IDefaultExtractIconInit, self), pszFile, iIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDefaultExtractIconInit_SetOpenIcon(self: *const T, pszFile: ?[*:0]const u16, iIcon: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDefaultExtractIconInit.VTable, self.vtable).SetOpenIcon(@ptrCast(*const IDefaultExtractIconInit, self), pszFile, iIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDefaultExtractIconInit_SetShortcutIcon(self: *const T, pszFile: ?[*:0]const u16, iIcon: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDefaultExtractIconInit.VTable, self.vtable).SetShortcutIcon(@ptrCast(*const IDefaultExtractIconInit, self), pszFile, iIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDefaultExtractIconInit_SetDefaultIcon(self: *const T, pszFile: ?[*:0]const u16, iIcon: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDefaultExtractIconInit.VTable, self.vtable).SetDefaultIcon(@ptrCast(*const IDefaultExtractIconInit, self), pszFile, iIcon);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _EXPCMDSTATE = extern enum(i32) {
    ECS_ENABLED = 0,
    ECS_DISABLED = 1,
    ECS_HIDDEN = 2,
    ECS_CHECKBOX = 4,
    ECS_CHECKED = 8,
    ECS_RADIOCHECK = 16,
};
pub const ECS_ENABLED = _EXPCMDSTATE.ECS_ENABLED;
pub const ECS_DISABLED = _EXPCMDSTATE.ECS_DISABLED;
pub const ECS_HIDDEN = _EXPCMDSTATE.ECS_HIDDEN;
pub const ECS_CHECKBOX = _EXPCMDSTATE.ECS_CHECKBOX;
pub const ECS_CHECKED = _EXPCMDSTATE.ECS_CHECKED;
pub const ECS_RADIOCHECK = _EXPCMDSTATE.ECS_RADIOCHECK;

pub const _EXPCMDFLAGS = extern enum(i32) {
    ECF_DEFAULT = 0,
    ECF_HASSUBCOMMANDS = 1,
    ECF_HASSPLITBUTTON = 2,
    ECF_HIDELABEL = 4,
    ECF_ISSEPARATOR = 8,
    ECF_HASLUASHIELD = 16,
    ECF_SEPARATORBEFORE = 32,
    ECF_SEPARATORAFTER = 64,
    ECF_ISDROPDOWN = 128,
    ECF_TOGGLEABLE = 256,
    ECF_AUTOMENUICONS = 512,
};
pub const ECF_DEFAULT = _EXPCMDFLAGS.ECF_DEFAULT;
pub const ECF_HASSUBCOMMANDS = _EXPCMDFLAGS.ECF_HASSUBCOMMANDS;
pub const ECF_HASSPLITBUTTON = _EXPCMDFLAGS.ECF_HASSPLITBUTTON;
pub const ECF_HIDELABEL = _EXPCMDFLAGS.ECF_HIDELABEL;
pub const ECF_ISSEPARATOR = _EXPCMDFLAGS.ECF_ISSEPARATOR;
pub const ECF_HASLUASHIELD = _EXPCMDFLAGS.ECF_HASLUASHIELD;
pub const ECF_SEPARATORBEFORE = _EXPCMDFLAGS.ECF_SEPARATORBEFORE;
pub const ECF_SEPARATORAFTER = _EXPCMDFLAGS.ECF_SEPARATORAFTER;
pub const ECF_ISDROPDOWN = _EXPCMDFLAGS.ECF_ISDROPDOWN;
pub const ECF_TOGGLEABLE = _EXPCMDFLAGS.ECF_TOGGLEABLE;
pub const ECF_AUTOMENUICONS = _EXPCMDFLAGS.ECF_AUTOMENUICONS;

const IID_IExplorerCommand_Value = @import("../zig.zig").Guid.initString("A08CE4D0-FA25-44AB-B57C-C7B1C323E0B9");
pub const IID_IExplorerCommand = &IID_IExplorerCommand_Value;
pub const IExplorerCommand = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTitle: fn(
            self: *const IExplorerCommand,
            psiItemArray: *IShellItemArray,
            ppszName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIcon: fn(
            self: *const IExplorerCommand,
            psiItemArray: *IShellItemArray,
            ppszIcon: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetToolTip: fn(
            self: *const IExplorerCommand,
            psiItemArray: *IShellItemArray,
            ppszInfotip: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCanonicalName: fn(
            self: *const IExplorerCommand,
            pguidCommandName: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetState: fn(
            self: *const IExplorerCommand,
            psiItemArray: *IShellItemArray,
            fOkToBeSlow: BOOL,
            pCmdState: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Invoke: fn(
            self: *const IExplorerCommand,
            psiItemArray: *IShellItemArray,
            pbc: *IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: fn(
            self: *const IExplorerCommand,
            pFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumSubCommands: fn(
            self: *const IExplorerCommand,
            ppEnum: **IEnumExplorerCommand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerCommand_GetTitle(self: *const T, psiItemArray: *IShellItemArray, ppszName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerCommand.VTable, self.vtable).GetTitle(@ptrCast(*const IExplorerCommand, self), psiItemArray, ppszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerCommand_GetIcon(self: *const T, psiItemArray: *IShellItemArray, ppszIcon: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerCommand.VTable, self.vtable).GetIcon(@ptrCast(*const IExplorerCommand, self), psiItemArray, ppszIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerCommand_GetToolTip(self: *const T, psiItemArray: *IShellItemArray, ppszInfotip: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerCommand.VTable, self.vtable).GetToolTip(@ptrCast(*const IExplorerCommand, self), psiItemArray, ppszInfotip);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerCommand_GetCanonicalName(self: *const T, pguidCommandName: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerCommand.VTable, self.vtable).GetCanonicalName(@ptrCast(*const IExplorerCommand, self), pguidCommandName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerCommand_GetState(self: *const T, psiItemArray: *IShellItemArray, fOkToBeSlow: BOOL, pCmdState: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerCommand.VTable, self.vtable).GetState(@ptrCast(*const IExplorerCommand, self), psiItemArray, fOkToBeSlow, pCmdState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerCommand_Invoke(self: *const T, psiItemArray: *IShellItemArray, pbc: *IBindCtx) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerCommand.VTable, self.vtable).Invoke(@ptrCast(*const IExplorerCommand, self), psiItemArray, pbc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerCommand_GetFlags(self: *const T, pFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerCommand.VTable, self.vtable).GetFlags(@ptrCast(*const IExplorerCommand, self), pFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerCommand_EnumSubCommands(self: *const T, ppEnum: **IEnumExplorerCommand) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerCommand.VTable, self.vtable).EnumSubCommands(@ptrCast(*const IExplorerCommand, self), ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IExplorerCommandState_Value = @import("../zig.zig").Guid.initString("BDDACB60-7657-47AE-8445-D23E1ACF82AE");
pub const IID_IExplorerCommandState = &IID_IExplorerCommandState_Value;
pub const IExplorerCommandState = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetState: fn(
            self: *const IExplorerCommandState,
            psiItemArray: *IShellItemArray,
            fOkToBeSlow: BOOL,
            pCmdState: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerCommandState_GetState(self: *const T, psiItemArray: *IShellItemArray, fOkToBeSlow: BOOL, pCmdState: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerCommandState.VTable, self.vtable).GetState(@ptrCast(*const IExplorerCommandState, self), psiItemArray, fOkToBeSlow, pCmdState);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInitializeCommand_Value = @import("../zig.zig").Guid.initString("85075ACF-231F-40EA-9610-D26B7B58F638");
pub const IID_IInitializeCommand = &IID_IInitializeCommand_Value;
pub const IInitializeCommand = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IInitializeCommand,
            pszCommandName: [*:0]const u16,
            ppb: *IPropertyBag,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInitializeCommand_Initialize(self: *const T, pszCommandName: [*:0]const u16, ppb: *IPropertyBag) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInitializeCommand.VTable, self.vtable).Initialize(@ptrCast(*const IInitializeCommand, self), pszCommandName, ppb);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumExplorerCommand_Value = @import("../zig.zig").Guid.initString("A88826F8-186F-4987-AADE-EA0CEF8FBFE8");
pub const IID_IEnumExplorerCommand = &IID_IEnumExplorerCommand_Value;
pub const IEnumExplorerCommand = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumExplorerCommand,
            celt: u32,
            pUICommand: [*]*IExplorerCommand,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumExplorerCommand,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumExplorerCommand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumExplorerCommand,
            ppenum: **IEnumExplorerCommand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumExplorerCommand_Next(self: *const T, celt: u32, pUICommand: [*]*IExplorerCommand, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumExplorerCommand.VTable, self.vtable).Next(@ptrCast(*const IEnumExplorerCommand, self), celt, pUICommand, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumExplorerCommand_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumExplorerCommand.VTable, self.vtable).Skip(@ptrCast(*const IEnumExplorerCommand, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumExplorerCommand_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumExplorerCommand.VTable, self.vtable).Reset(@ptrCast(*const IEnumExplorerCommand, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumExplorerCommand_Clone(self: *const T, ppenum: **IEnumExplorerCommand) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumExplorerCommand.VTable, self.vtable).Clone(@ptrCast(*const IEnumExplorerCommand, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IExplorerCommandProvider_Value = @import("../zig.zig").Guid.initString("64961751-0835-43C0-8FFE-D57686530E64");
pub const IID_IExplorerCommandProvider = &IID_IExplorerCommandProvider_Value;
pub const IExplorerCommandProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCommands: fn(
            self: *const IExplorerCommandProvider,
            punkSite: *IUnknown,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCommand: fn(
            self: *const IExplorerCommandProvider,
            rguidCommandId: *const Guid,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerCommandProvider_GetCommands(self: *const T, punkSite: *IUnknown, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerCommandProvider.VTable, self.vtable).GetCommands(@ptrCast(*const IExplorerCommandProvider, self), punkSite, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExplorerCommandProvider_GetCommand(self: *const T, rguidCommandId: *const Guid, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExplorerCommandProvider.VTable, self.vtable).GetCommand(@ptrCast(*const IExplorerCommandProvider, self), rguidCommandId, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CPVIEW = extern enum(i32) {
    CLASSIC = 0,
    ALLITEMS = 0,
    CATEGORY = 1,
    HOME = 1,
};
pub const CPVIEW_CLASSIC = CPVIEW.CLASSIC;
pub const CPVIEW_ALLITEMS = CPVIEW.ALLITEMS;
pub const CPVIEW_CATEGORY = CPVIEW.CATEGORY;
pub const CPVIEW_HOME = CPVIEW.HOME;

const IID_IOpenControlPanel_Value = @import("../zig.zig").Guid.initString("D11AD862-66DE-4DF4-BF6C-1F5621996AF1");
pub const IID_IOpenControlPanel = &IID_IOpenControlPanel_Value;
pub const IOpenControlPanel = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: fn(
            self: *const IOpenControlPanel,
            pszName: [*:0]const u16,
            pszPage: [*:0]const u16,
            punkSite: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPath: fn(
            self: *const IOpenControlPanel,
            pszName: [*:0]const u16,
            pszPath: [*:0]u16,
            cchPath: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentView: fn(
            self: *const IOpenControlPanel,
            pView: *CPVIEW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOpenControlPanel_Open(self: *const T, pszName: [*:0]const u16, pszPage: [*:0]const u16, punkSite: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOpenControlPanel.VTable, self.vtable).Open(@ptrCast(*const IOpenControlPanel, self), pszName, pszPage, punkSite);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOpenControlPanel_GetPath(self: *const T, pszName: [*:0]const u16, pszPath: [*:0]u16, cchPath: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOpenControlPanel.VTable, self.vtable).GetPath(@ptrCast(*const IOpenControlPanel, self), pszName, pszPath, cchPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOpenControlPanel_GetCurrentView(self: *const T, pView: *CPVIEW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOpenControlPanel.VTable, self.vtable).GetCurrentView(@ptrCast(*const IOpenControlPanel, self), pView);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFileSystemBindData_Value = @import("../zig.zig").Guid.initString("01E18D10-4D8B-11D2-855D-006008059367");
pub const IID_IFileSystemBindData = &IID_IFileSystemBindData_Value;
pub const IFileSystemBindData = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFindData: fn(
            self: *const IFileSystemBindData,
            pfd: *const WIN32_FIND_DATAW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFindData: fn(
            self: *const IFileSystemBindData,
            pfd: *WIN32_FIND_DATAW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileSystemBindData_SetFindData(self: *const T, pfd: *const WIN32_FIND_DATAW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileSystemBindData.VTable, self.vtable).SetFindData(@ptrCast(*const IFileSystemBindData, self), pfd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileSystemBindData_GetFindData(self: *const T, pfd: *WIN32_FIND_DATAW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileSystemBindData.VTable, self.vtable).GetFindData(@ptrCast(*const IFileSystemBindData, self), pfd);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFileSystemBindData2_Value = @import("../zig.zig").Guid.initString("3ACF075F-71DB-4AFA-81F0-3FC4FDF2A5B8");
pub const IID_IFileSystemBindData2 = &IID_IFileSystemBindData2_Value;
pub const IFileSystemBindData2 = extern struct {
    pub const VTable = extern struct {
        base: IFileSystemBindData.VTable,
        SetFileID: fn(
            self: *const IFileSystemBindData2,
            liFileID: LARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileID: fn(
            self: *const IFileSystemBindData2,
            pliFileID: *LARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetJunctionCLSID: fn(
            self: *const IFileSystemBindData2,
            clsid: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetJunctionCLSID: fn(
            self: *const IFileSystemBindData2,
            pclsid: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IFileSystemBindData.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileSystemBindData2_SetFileID(self: *const T, liFileID: LARGE_INTEGER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileSystemBindData2.VTable, self.vtable).SetFileID(@ptrCast(*const IFileSystemBindData2, self), liFileID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileSystemBindData2_GetFileID(self: *const T, pliFileID: *LARGE_INTEGER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileSystemBindData2.VTable, self.vtable).GetFileID(@ptrCast(*const IFileSystemBindData2, self), pliFileID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileSystemBindData2_SetJunctionCLSID(self: *const T, clsid: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileSystemBindData2.VTable, self.vtable).SetJunctionCLSID(@ptrCast(*const IFileSystemBindData2, self), clsid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileSystemBindData2_GetJunctionCLSID(self: *const T, pclsid: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileSystemBindData2.VTable, self.vtable).GetJunctionCLSID(@ptrCast(*const IFileSystemBindData2, self), pclsid);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const KNOWNDESTCATEGORY = extern enum(i32) {
    KDC_FREQUENT = 1,
    KDC_RECENT = 2,
};
pub const KDC_FREQUENT = KNOWNDESTCATEGORY.KDC_FREQUENT;
pub const KDC_RECENT = KNOWNDESTCATEGORY.KDC_RECENT;

const IID_ICustomDestinationList_Value = @import("../zig.zig").Guid.initString("6332DEBF-87B5-4670-90C0-5E57B408A49E");
pub const IID_ICustomDestinationList = &IID_ICustomDestinationList_Value;
pub const ICustomDestinationList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAppID: fn(
            self: *const ICustomDestinationList,
            pszAppID: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginList: fn(
            self: *const ICustomDestinationList,
            pcMinSlots: *u32,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendCategory: fn(
            self: *const ICustomDestinationList,
            pszCategory: [*:0]const u16,
            poa: *IObjectArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendKnownCategory: fn(
            self: *const ICustomDestinationList,
            category: KNOWNDESTCATEGORY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddUserTasks: fn(
            self: *const ICustomDestinationList,
            poa: *IObjectArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitList: fn(
            self: *const ICustomDestinationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRemovedDestinations: fn(
            self: *const ICustomDestinationList,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteList: fn(
            self: *const ICustomDestinationList,
            pszAppID: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbortList: fn(
            self: *const ICustomDestinationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICustomDestinationList_SetAppID(self: *const T, pszAppID: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICustomDestinationList.VTable, self.vtable).SetAppID(@ptrCast(*const ICustomDestinationList, self), pszAppID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICustomDestinationList_BeginList(self: *const T, pcMinSlots: *u32, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICustomDestinationList.VTable, self.vtable).BeginList(@ptrCast(*const ICustomDestinationList, self), pcMinSlots, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICustomDestinationList_AppendCategory(self: *const T, pszCategory: [*:0]const u16, poa: *IObjectArray) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICustomDestinationList.VTable, self.vtable).AppendCategory(@ptrCast(*const ICustomDestinationList, self), pszCategory, poa);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICustomDestinationList_AppendKnownCategory(self: *const T, category: KNOWNDESTCATEGORY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICustomDestinationList.VTable, self.vtable).AppendKnownCategory(@ptrCast(*const ICustomDestinationList, self), category);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICustomDestinationList_AddUserTasks(self: *const T, poa: *IObjectArray) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICustomDestinationList.VTable, self.vtable).AddUserTasks(@ptrCast(*const ICustomDestinationList, self), poa);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICustomDestinationList_CommitList(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICustomDestinationList.VTable, self.vtable).CommitList(@ptrCast(*const ICustomDestinationList, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICustomDestinationList_GetRemovedDestinations(self: *const T, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICustomDestinationList.VTable, self.vtable).GetRemovedDestinations(@ptrCast(*const ICustomDestinationList, self), riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICustomDestinationList_DeleteList(self: *const T, pszAppID: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICustomDestinationList.VTable, self.vtable).DeleteList(@ptrCast(*const ICustomDestinationList, self), pszAppID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICustomDestinationList_AbortList(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICustomDestinationList.VTable, self.vtable).AbortList(@ptrCast(*const ICustomDestinationList, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IApplicationDestinations_Value = @import("../zig.zig").Guid.initString("12337D35-94C6-48A0-BCE7-6A9C69D4D600");
pub const IID_IApplicationDestinations = &IID_IApplicationDestinations_Value;
pub const IApplicationDestinations = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAppID: fn(
            self: *const IApplicationDestinations,
            pszAppID: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveDestination: fn(
            self: *const IApplicationDestinations,
            punk: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllDestinations: fn(
            self: *const IApplicationDestinations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationDestinations_SetAppID(self: *const T, pszAppID: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationDestinations.VTable, self.vtable).SetAppID(@ptrCast(*const IApplicationDestinations, self), pszAppID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationDestinations_RemoveDestination(self: *const T, punk: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationDestinations.VTable, self.vtable).RemoveDestination(@ptrCast(*const IApplicationDestinations, self), punk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationDestinations_RemoveAllDestinations(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationDestinations.VTable, self.vtable).RemoveAllDestinations(@ptrCast(*const IApplicationDestinations, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const APPDOCLISTTYPE = extern enum(i32) {
    ADLT_RECENT = 0,
    ADLT_FREQUENT = 1,
};
pub const ADLT_RECENT = APPDOCLISTTYPE.ADLT_RECENT;
pub const ADLT_FREQUENT = APPDOCLISTTYPE.ADLT_FREQUENT;

const IID_IApplicationDocumentLists_Value = @import("../zig.zig").Guid.initString("3C594F9F-9F30-47A1-979A-C9E83D3D0A06");
pub const IID_IApplicationDocumentLists = &IID_IApplicationDocumentLists_Value;
pub const IApplicationDocumentLists = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAppID: fn(
            self: *const IApplicationDocumentLists,
            pszAppID: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetList: fn(
            self: *const IApplicationDocumentLists,
            listtype: APPDOCLISTTYPE,
            cItemsDesired: u32,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationDocumentLists_SetAppID(self: *const T, pszAppID: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationDocumentLists.VTable, self.vtable).SetAppID(@ptrCast(*const IApplicationDocumentLists, self), pszAppID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationDocumentLists_GetList(self: *const T, listtype: APPDOCLISTTYPE, cItemsDesired: u32, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationDocumentLists.VTable, self.vtable).GetList(@ptrCast(*const IApplicationDocumentLists, self), listtype, cItemsDesired, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjectWithAppUserModelID_Value = @import("../zig.zig").Guid.initString("36DB0196-9665-46D1-9BA7-D3709EECF9ED");
pub const IID_IObjectWithAppUserModelID = &IID_IObjectWithAppUserModelID_Value;
pub const IObjectWithAppUserModelID = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAppID: fn(
            self: *const IObjectWithAppUserModelID,
            pszAppID: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAppID: fn(
            self: *const IObjectWithAppUserModelID,
            ppszAppID: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectWithAppUserModelID_SetAppID(self: *const T, pszAppID: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectWithAppUserModelID.VTable, self.vtable).SetAppID(@ptrCast(*const IObjectWithAppUserModelID, self), pszAppID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectWithAppUserModelID_GetAppID(self: *const T, ppszAppID: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectWithAppUserModelID.VTable, self.vtable).GetAppID(@ptrCast(*const IObjectWithAppUserModelID, self), ppszAppID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjectWithProgID_Value = @import("../zig.zig").Guid.initString("71E806FB-8DEE-46FC-BF8C-7748A8A1AE13");
pub const IID_IObjectWithProgID = &IID_IObjectWithProgID_Value;
pub const IObjectWithProgID = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetProgID: fn(
            self: *const IObjectWithProgID,
            pszProgID: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProgID: fn(
            self: *const IObjectWithProgID,
            ppszProgID: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectWithProgID_SetProgID(self: *const T, pszProgID: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectWithProgID.VTable, self.vtable).SetProgID(@ptrCast(*const IObjectWithProgID, self), pszProgID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectWithProgID_GetProgID(self: *const T, ppszProgID: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectWithProgID.VTable, self.vtable).GetProgID(@ptrCast(*const IObjectWithProgID, self), ppszProgID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUpdateIDList_Value = @import("../zig.zig").Guid.initString("6589B6D2-5F8D-4B9E-B7E0-23CDD9717D8C");
pub const IID_IUpdateIDList = &IID_IUpdateIDList_Value;
pub const IUpdateIDList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Update: fn(
            self: *const IUpdateIDList,
            pbc: ?*IBindCtx,
            pidlIn: *ITEMIDLIST,
            ppidlOut: **ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUpdateIDList_Update(self: *const T, pbc: ?*IBindCtx, pidlIn: *ITEMIDLIST, ppidlOut: **ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUpdateIDList.VTable, self.vtable).Update(@ptrCast(*const IUpdateIDList, self), pbc, pidlIn, ppidlOut);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DESKTOP_SLIDESHOW_OPTIONS = extern enum(i32) {
    DSO_SHUFFLEIMAGES = 1,
};
pub const DSO_SHUFFLEIMAGES = DESKTOP_SLIDESHOW_OPTIONS.DSO_SHUFFLEIMAGES;

pub const DESKTOP_SLIDESHOW_STATE = extern enum(i32) {
    DSS_ENABLED = 1,
    DSS_SLIDESHOW = 2,
    DSS_DISABLED_BY_REMOTE_SESSION = 4,
};
pub const DSS_ENABLED = DESKTOP_SLIDESHOW_STATE.DSS_ENABLED;
pub const DSS_SLIDESHOW = DESKTOP_SLIDESHOW_STATE.DSS_SLIDESHOW;
pub const DSS_DISABLED_BY_REMOTE_SESSION = DESKTOP_SLIDESHOW_STATE.DSS_DISABLED_BY_REMOTE_SESSION;

pub const DESKTOP_SLIDESHOW_DIRECTION = extern enum(i32) {
    DSD_FORWARD = 0,
    DSD_BACKWARD = 1,
};
pub const DSD_FORWARD = DESKTOP_SLIDESHOW_DIRECTION.DSD_FORWARD;
pub const DSD_BACKWARD = DESKTOP_SLIDESHOW_DIRECTION.DSD_BACKWARD;

pub const DESKTOP_WALLPAPER_POSITION = extern enum(i32) {
    DWPOS_CENTER = 0,
    DWPOS_TILE = 1,
    DWPOS_STRETCH = 2,
    DWPOS_FIT = 3,
    DWPOS_FILL = 4,
    DWPOS_SPAN = 5,
};
pub const DWPOS_CENTER = DESKTOP_WALLPAPER_POSITION.DWPOS_CENTER;
pub const DWPOS_TILE = DESKTOP_WALLPAPER_POSITION.DWPOS_TILE;
pub const DWPOS_STRETCH = DESKTOP_WALLPAPER_POSITION.DWPOS_STRETCH;
pub const DWPOS_FIT = DESKTOP_WALLPAPER_POSITION.DWPOS_FIT;
pub const DWPOS_FILL = DESKTOP_WALLPAPER_POSITION.DWPOS_FILL;
pub const DWPOS_SPAN = DESKTOP_WALLPAPER_POSITION.DWPOS_SPAN;

const IID_IDesktopWallpaper_Value = @import("../zig.zig").Guid.initString("B92B56A9-8B55-4E14-9A89-0199BBB6F93B");
pub const IID_IDesktopWallpaper = &IID_IDesktopWallpaper_Value;
pub const IDesktopWallpaper = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetWallpaper: fn(
            self: *const IDesktopWallpaper,
            monitorID: [*:0]const u16,
            wallpaper: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWallpaper: fn(
            self: *const IDesktopWallpaper,
            monitorID: [*:0]const u16,
            wallpaper: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMonitorDevicePathAt: fn(
            self: *const IDesktopWallpaper,
            monitorIndex: u32,
            monitorID: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMonitorDevicePathCount: fn(
            self: *const IDesktopWallpaper,
            count: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMonitorRECT: fn(
            self: *const IDesktopWallpaper,
            monitorID: [*:0]const u16,
            displayRect: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBackgroundColor: fn(
            self: *const IDesktopWallpaper,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBackgroundColor: fn(
            self: *const IDesktopWallpaper,
            color: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPosition: fn(
            self: *const IDesktopWallpaper,
            position: DESKTOP_WALLPAPER_POSITION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPosition: fn(
            self: *const IDesktopWallpaper,
            position: *DESKTOP_WALLPAPER_POSITION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSlideshow: fn(
            self: *const IDesktopWallpaper,
            items: *IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSlideshow: fn(
            self: *const IDesktopWallpaper,
            items: **IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSlideshowOptions: fn(
            self: *const IDesktopWallpaper,
            options: DESKTOP_SLIDESHOW_OPTIONS,
            slideshowTick: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSlideshowOptions: fn(
            self: *const IDesktopWallpaper,
            options: *DESKTOP_SLIDESHOW_OPTIONS,
            slideshowTick: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AdvanceSlideshow: fn(
            self: *const IDesktopWallpaper,
            monitorID: [*:0]const u16,
            direction: DESKTOP_SLIDESHOW_DIRECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: fn(
            self: *const IDesktopWallpaper,
            state: *DESKTOP_SLIDESHOW_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: fn(
            self: *const IDesktopWallpaper,
            enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWallpaper_SetWallpaper(self: *const T, monitorID: [*:0]const u16, wallpaper: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWallpaper.VTable, self.vtable).SetWallpaper(@ptrCast(*const IDesktopWallpaper, self), monitorID, wallpaper);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWallpaper_GetWallpaper(self: *const T, monitorID: [*:0]const u16, wallpaper: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWallpaper.VTable, self.vtable).GetWallpaper(@ptrCast(*const IDesktopWallpaper, self), monitorID, wallpaper);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWallpaper_GetMonitorDevicePathAt(self: *const T, monitorIndex: u32, monitorID: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWallpaper.VTable, self.vtable).GetMonitorDevicePathAt(@ptrCast(*const IDesktopWallpaper, self), monitorIndex, monitorID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWallpaper_GetMonitorDevicePathCount(self: *const T, count: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWallpaper.VTable, self.vtable).GetMonitorDevicePathCount(@ptrCast(*const IDesktopWallpaper, self), count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWallpaper_GetMonitorRECT(self: *const T, monitorID: [*:0]const u16, displayRect: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWallpaper.VTable, self.vtable).GetMonitorRECT(@ptrCast(*const IDesktopWallpaper, self), monitorID, displayRect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWallpaper_SetBackgroundColor(self: *const T, color: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWallpaper.VTable, self.vtable).SetBackgroundColor(@ptrCast(*const IDesktopWallpaper, self), color);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWallpaper_GetBackgroundColor(self: *const T, color: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWallpaper.VTable, self.vtable).GetBackgroundColor(@ptrCast(*const IDesktopWallpaper, self), color);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWallpaper_SetPosition(self: *const T, position: DESKTOP_WALLPAPER_POSITION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWallpaper.VTable, self.vtable).SetPosition(@ptrCast(*const IDesktopWallpaper, self), position);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWallpaper_GetPosition(self: *const T, position: *DESKTOP_WALLPAPER_POSITION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWallpaper.VTable, self.vtable).GetPosition(@ptrCast(*const IDesktopWallpaper, self), position);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWallpaper_SetSlideshow(self: *const T, items: *IShellItemArray) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWallpaper.VTable, self.vtable).SetSlideshow(@ptrCast(*const IDesktopWallpaper, self), items);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWallpaper_GetSlideshow(self: *const T, items: **IShellItemArray) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWallpaper.VTable, self.vtable).GetSlideshow(@ptrCast(*const IDesktopWallpaper, self), items);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWallpaper_SetSlideshowOptions(self: *const T, options: DESKTOP_SLIDESHOW_OPTIONS, slideshowTick: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWallpaper.VTable, self.vtable).SetSlideshowOptions(@ptrCast(*const IDesktopWallpaper, self), options, slideshowTick);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWallpaper_GetSlideshowOptions(self: *const T, options: *DESKTOP_SLIDESHOW_OPTIONS, slideshowTick: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWallpaper.VTable, self.vtable).GetSlideshowOptions(@ptrCast(*const IDesktopWallpaper, self), options, slideshowTick);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWallpaper_AdvanceSlideshow(self: *const T, monitorID: [*:0]const u16, direction: DESKTOP_SLIDESHOW_DIRECTION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWallpaper.VTable, self.vtable).AdvanceSlideshow(@ptrCast(*const IDesktopWallpaper, self), monitorID, direction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWallpaper_GetStatus(self: *const T, state: *DESKTOP_SLIDESHOW_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWallpaper.VTable, self.vtable).GetStatus(@ptrCast(*const IDesktopWallpaper, self), state);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopWallpaper_Enable(self: *const T, enable: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopWallpaper.VTable, self.vtable).Enable(@ptrCast(*const IDesktopWallpaper, self), enable);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const HOMEGROUPSHARINGCHOICES = extern enum(i32) {
    HGSC_NONE = 0,
    HGSC_MUSICLIBRARY = 1,
    HGSC_PICTURESLIBRARY = 2,
    HGSC_VIDEOSLIBRARY = 4,
    HGSC_DOCUMENTSLIBRARY = 8,
    HGSC_PRINTERS = 16,
};
pub const HGSC_NONE = HOMEGROUPSHARINGCHOICES.HGSC_NONE;
pub const HGSC_MUSICLIBRARY = HOMEGROUPSHARINGCHOICES.HGSC_MUSICLIBRARY;
pub const HGSC_PICTURESLIBRARY = HOMEGROUPSHARINGCHOICES.HGSC_PICTURESLIBRARY;
pub const HGSC_VIDEOSLIBRARY = HOMEGROUPSHARINGCHOICES.HGSC_VIDEOSLIBRARY;
pub const HGSC_DOCUMENTSLIBRARY = HOMEGROUPSHARINGCHOICES.HGSC_DOCUMENTSLIBRARY;
pub const HGSC_PRINTERS = HOMEGROUPSHARINGCHOICES.HGSC_PRINTERS;

const IID_IHomeGroup_Value = @import("../zig.zig").Guid.initString("7A3BD1D9-35A9-4FB3-A467-F48CAC35E2D0");
pub const IID_IHomeGroup = &IID_IHomeGroup_Value;
pub const IHomeGroup = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsMember: fn(
            self: *const IHomeGroup,
            member: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowSharingWizard: fn(
            self: *const IHomeGroup,
            owner: HWND,
            sharingchoices: *HOMEGROUPSHARINGCHOICES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHomeGroup_IsMember(self: *const T, member: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHomeGroup.VTable, self.vtable).IsMember(@ptrCast(*const IHomeGroup, self), member);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHomeGroup_ShowSharingWizard(self: *const T, owner: HWND, sharingchoices: *HOMEGROUPSHARINGCHOICES) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHomeGroup.VTable, self.vtable).ShowSharingWizard(@ptrCast(*const IHomeGroup, self), owner, sharingchoices);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInitializeWithPropertyStore_Value = @import("../zig.zig").Guid.initString("C3E12EB5-7D8D-44F8-B6DD-0E77B34D6DE4");
pub const IID_IInitializeWithPropertyStore = &IID_IInitializeWithPropertyStore_Value;
pub const IInitializeWithPropertyStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IInitializeWithPropertyStore,
            pps: *IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInitializeWithPropertyStore_Initialize(self: *const T, pps: *IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInitializeWithPropertyStore.VTable, self.vtable).Initialize(@ptrCast(*const IInitializeWithPropertyStore, self), pps);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOpenSearchSource_Value = @import("../zig.zig").Guid.initString("F0EE7333-E6FC-479B-9F25-A860C234A38E");
pub const IID_IOpenSearchSource = &IID_IOpenSearchSource_Value;
pub const IOpenSearchSource = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetResults: fn(
            self: *const IOpenSearchSource,
            hwnd: HWND,
            pszQuery: [*:0]const u16,
            dwStartIndex: u32,
            dwCount: u32,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOpenSearchSource_GetResults(self: *const T, hwnd: HWND, pszQuery: [*:0]const u16, dwStartIndex: u32, dwCount: u32, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOpenSearchSource.VTable, self.vtable).GetResults(@ptrCast(*const IOpenSearchSource, self), hwnd, pszQuery, dwStartIndex, dwCount, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const LIBRARYFOLDERFILTER = extern enum(i32) {
    LFF_FORCEFILESYSTEM = 1,
    LFF_STORAGEITEMS = 2,
    LFF_ALLITEMS = 3,
};
pub const LFF_FORCEFILESYSTEM = LIBRARYFOLDERFILTER.LFF_FORCEFILESYSTEM;
pub const LFF_STORAGEITEMS = LIBRARYFOLDERFILTER.LFF_STORAGEITEMS;
pub const LFF_ALLITEMS = LIBRARYFOLDERFILTER.LFF_ALLITEMS;

pub const LIBRARYOPTIONFLAGS = extern enum(i32) {
    LOF_DEFAULT = 0,
    LOF_PINNEDTONAVPANE = 1,
    LOF_MASK_ALL = 1,
};
pub const LOF_DEFAULT = LIBRARYOPTIONFLAGS.LOF_DEFAULT;
pub const LOF_PINNEDTONAVPANE = LIBRARYOPTIONFLAGS.LOF_PINNEDTONAVPANE;
pub const LOF_MASK_ALL = LIBRARYOPTIONFLAGS.LOF_MASK_ALL;

pub const DEFAULTSAVEFOLDERTYPE = extern enum(i32) {
    DSFT_DETECT = 1,
    DSFT_PRIVATE = 2,
    DSFT_PUBLIC = 3,
};
pub const DSFT_DETECT = DEFAULTSAVEFOLDERTYPE.DSFT_DETECT;
pub const DSFT_PRIVATE = DEFAULTSAVEFOLDERTYPE.DSFT_PRIVATE;
pub const DSFT_PUBLIC = DEFAULTSAVEFOLDERTYPE.DSFT_PUBLIC;

pub const LIBRARYSAVEFLAGS = extern enum(i32) {
    LSF_FAILIFTHERE = 0,
    LSF_OVERRIDEEXISTING = 1,
    LSF_MAKEUNIQUENAME = 2,
};
pub const LSF_FAILIFTHERE = LIBRARYSAVEFLAGS.LSF_FAILIFTHERE;
pub const LSF_OVERRIDEEXISTING = LIBRARYSAVEFLAGS.LSF_OVERRIDEEXISTING;
pub const LSF_MAKEUNIQUENAME = LIBRARYSAVEFLAGS.LSF_MAKEUNIQUENAME;

const IID_IShellLibrary_Value = @import("../zig.zig").Guid.initString("11A66EFA-382E-451A-9234-1E0E12EF3085");
pub const IID_IShellLibrary = &IID_IShellLibrary_Value;
pub const IShellLibrary = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LoadLibraryFromItem: fn(
            self: *const IShellLibrary,
            psiLibrary: *IShellItem,
            grfMode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadLibraryFromKnownFolder: fn(
            self: *const IShellLibrary,
            kfidLibrary: *const Guid,
            grfMode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFolder: fn(
            self: *const IShellLibrary,
            psiLocation: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveFolder: fn(
            self: *const IShellLibrary,
            psiLocation: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolders: fn(
            self: *const IShellLibrary,
            lff: LIBRARYFOLDERFILTER,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResolveFolder: fn(
            self: *const IShellLibrary,
            psiFolderToResolve: *IShellItem,
            dwTimeout: u32,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultSaveFolder: fn(
            self: *const IShellLibrary,
            dsft: DEFAULTSAVEFOLDERTYPE,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultSaveFolder: fn(
            self: *const IShellLibrary,
            dsft: DEFAULTSAVEFOLDERTYPE,
            psi: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: fn(
            self: *const IShellLibrary,
            plofOptions: *LIBRARYOPTIONFLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOptions: fn(
            self: *const IShellLibrary,
            lofMask: LIBRARYOPTIONFLAGS,
            lofOptions: LIBRARYOPTIONFLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderType: fn(
            self: *const IShellLibrary,
            pftid: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolderType: fn(
            self: *const IShellLibrary,
            ftid: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIcon: fn(
            self: *const IShellLibrary,
            ppszIcon: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIcon: fn(
            self: *const IShellLibrary,
            pszIcon: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: fn(
            self: *const IShellLibrary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: fn(
            self: *const IShellLibrary,
            psiFolderToSaveIn: *IShellItem,
            pszLibraryName: [*:0]const u16,
            lsf: LIBRARYSAVEFLAGS,
            ppsiSavedTo: **IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveInKnownFolder: fn(
            self: *const IShellLibrary,
            kfidToSaveIn: *const Guid,
            pszLibraryName: [*:0]const u16,
            lsf: LIBRARYSAVEFLAGS,
            ppsiSavedTo: **IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLibrary_LoadLibraryFromItem(self: *const T, psiLibrary: *IShellItem, grfMode: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLibrary.VTable, self.vtable).LoadLibraryFromItem(@ptrCast(*const IShellLibrary, self), psiLibrary, grfMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLibrary_LoadLibraryFromKnownFolder(self: *const T, kfidLibrary: *const Guid, grfMode: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLibrary.VTable, self.vtable).LoadLibraryFromKnownFolder(@ptrCast(*const IShellLibrary, self), kfidLibrary, grfMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLibrary_AddFolder(self: *const T, psiLocation: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLibrary.VTable, self.vtable).AddFolder(@ptrCast(*const IShellLibrary, self), psiLocation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLibrary_RemoveFolder(self: *const T, psiLocation: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLibrary.VTable, self.vtable).RemoveFolder(@ptrCast(*const IShellLibrary, self), psiLocation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLibrary_GetFolders(self: *const T, lff: LIBRARYFOLDERFILTER, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLibrary.VTable, self.vtable).GetFolders(@ptrCast(*const IShellLibrary, self), lff, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLibrary_ResolveFolder(self: *const T, psiFolderToResolve: *IShellItem, dwTimeout: u32, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLibrary.VTable, self.vtable).ResolveFolder(@ptrCast(*const IShellLibrary, self), psiFolderToResolve, dwTimeout, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLibrary_GetDefaultSaveFolder(self: *const T, dsft: DEFAULTSAVEFOLDERTYPE, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLibrary.VTable, self.vtable).GetDefaultSaveFolder(@ptrCast(*const IShellLibrary, self), dsft, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLibrary_SetDefaultSaveFolder(self: *const T, dsft: DEFAULTSAVEFOLDERTYPE, psi: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLibrary.VTable, self.vtable).SetDefaultSaveFolder(@ptrCast(*const IShellLibrary, self), dsft, psi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLibrary_GetOptions(self: *const T, plofOptions: *LIBRARYOPTIONFLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLibrary.VTable, self.vtable).GetOptions(@ptrCast(*const IShellLibrary, self), plofOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLibrary_SetOptions(self: *const T, lofMask: LIBRARYOPTIONFLAGS, lofOptions: LIBRARYOPTIONFLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLibrary.VTable, self.vtable).SetOptions(@ptrCast(*const IShellLibrary, self), lofMask, lofOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLibrary_GetFolderType(self: *const T, pftid: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLibrary.VTable, self.vtable).GetFolderType(@ptrCast(*const IShellLibrary, self), pftid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLibrary_SetFolderType(self: *const T, ftid: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLibrary.VTable, self.vtable).SetFolderType(@ptrCast(*const IShellLibrary, self), ftid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLibrary_GetIcon(self: *const T, ppszIcon: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLibrary.VTable, self.vtable).GetIcon(@ptrCast(*const IShellLibrary, self), ppszIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLibrary_SetIcon(self: *const T, pszIcon: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLibrary.VTable, self.vtable).SetIcon(@ptrCast(*const IShellLibrary, self), pszIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLibrary_Commit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLibrary.VTable, self.vtable).Commit(@ptrCast(*const IShellLibrary, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLibrary_Save(self: *const T, psiFolderToSaveIn: *IShellItem, pszLibraryName: [*:0]const u16, lsf: LIBRARYSAVEFLAGS, ppsiSavedTo: **IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLibrary.VTable, self.vtable).Save(@ptrCast(*const IShellLibrary, self), psiFolderToSaveIn, pszLibraryName, lsf, ppsiSavedTo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLibrary_SaveInKnownFolder(self: *const T, kfidToSaveIn: *const Guid, pszLibraryName: [*:0]const u16, lsf: LIBRARYSAVEFLAGS, ppsiSavedTo: **IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLibrary.VTable, self.vtable).SaveInKnownFolder(@ptrCast(*const IShellLibrary, self), kfidToSaveIn, pszLibraryName, lsf, ppsiSavedTo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DEFAULT_FOLDER_MENU_RESTRICTIONS = extern enum(i32) {
    DFMR_DEFAULT = 0,
    DFMR_NO_STATIC_VERBS = 8,
    DFMR_STATIC_VERBS_ONLY = 16,
    DFMR_NO_RESOURCE_VERBS = 32,
    DFMR_OPTIN_HANDLERS_ONLY = 64,
    DFMR_RESOURCE_AND_FOLDER_VERBS_ONLY = 128,
    DFMR_USE_SPECIFIED_HANDLERS = 256,
    DFMR_USE_SPECIFIED_VERBS = 512,
    DFMR_NO_ASYNC_VERBS = 1024,
    DFMR_NO_NATIVECPU_VERBS = 2048,
};
pub const DFMR_DEFAULT = DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_DEFAULT;
pub const DFMR_NO_STATIC_VERBS = DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_NO_STATIC_VERBS;
pub const DFMR_STATIC_VERBS_ONLY = DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_STATIC_VERBS_ONLY;
pub const DFMR_NO_RESOURCE_VERBS = DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_NO_RESOURCE_VERBS;
pub const DFMR_OPTIN_HANDLERS_ONLY = DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_OPTIN_HANDLERS_ONLY;
pub const DFMR_RESOURCE_AND_FOLDER_VERBS_ONLY = DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_RESOURCE_AND_FOLDER_VERBS_ONLY;
pub const DFMR_USE_SPECIFIED_HANDLERS = DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_USE_SPECIFIED_HANDLERS;
pub const DFMR_USE_SPECIFIED_VERBS = DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_USE_SPECIFIED_VERBS;
pub const DFMR_NO_ASYNC_VERBS = DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_NO_ASYNC_VERBS;
pub const DFMR_NO_NATIVECPU_VERBS = DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_NO_NATIVECPU_VERBS;

const IID_IDefaultFolderMenuInitialize_Value = @import("../zig.zig").Guid.initString("7690AA79-F8FC-4615-A327-36F7D18F5D91");
pub const IID_IDefaultFolderMenuInitialize = &IID_IDefaultFolderMenuInitialize_Value;
pub const IDefaultFolderMenuInitialize = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IDefaultFolderMenuInitialize,
            hwnd: HWND,
            pcmcb: ?*IContextMenuCB,
            pidlFolder: ?*ITEMIDLIST,
            psf: ?*IShellFolder,
            cidl: u32,
            apidl: [*]*ITEMIDLIST,
            punkAssociation: ?*IUnknown,
            cKeys: u32,
            aKeys: ?*const HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMenuRestrictions: fn(
            self: *const IDefaultFolderMenuInitialize,
            dfmrValues: DEFAULT_FOLDER_MENU_RESTRICTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMenuRestrictions: fn(
            self: *const IDefaultFolderMenuInitialize,
            dfmrMask: DEFAULT_FOLDER_MENU_RESTRICTIONS,
            pdfmrValues: *DEFAULT_FOLDER_MENU_RESTRICTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHandlerClsid: fn(
            self: *const IDefaultFolderMenuInitialize,
            rclsid: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDefaultFolderMenuInitialize_Initialize(self: *const T, hwnd: HWND, pcmcb: ?*IContextMenuCB, pidlFolder: ?*ITEMIDLIST, psf: ?*IShellFolder, cidl: u32, apidl: [*]*ITEMIDLIST, punkAssociation: ?*IUnknown, cKeys: u32, aKeys: ?*const HKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDefaultFolderMenuInitialize.VTable, self.vtable).Initialize(@ptrCast(*const IDefaultFolderMenuInitialize, self), hwnd, pcmcb, pidlFolder, psf, cidl, apidl, punkAssociation, cKeys, aKeys);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDefaultFolderMenuInitialize_SetMenuRestrictions(self: *const T, dfmrValues: DEFAULT_FOLDER_MENU_RESTRICTIONS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDefaultFolderMenuInitialize.VTable, self.vtable).SetMenuRestrictions(@ptrCast(*const IDefaultFolderMenuInitialize, self), dfmrValues);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDefaultFolderMenuInitialize_GetMenuRestrictions(self: *const T, dfmrMask: DEFAULT_FOLDER_MENU_RESTRICTIONS, pdfmrValues: *DEFAULT_FOLDER_MENU_RESTRICTIONS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDefaultFolderMenuInitialize.VTable, self.vtable).GetMenuRestrictions(@ptrCast(*const IDefaultFolderMenuInitialize, self), dfmrMask, pdfmrValues);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDefaultFolderMenuInitialize_SetHandlerClsid(self: *const T, rclsid: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDefaultFolderMenuInitialize.VTable, self.vtable).SetHandlerClsid(@ptrCast(*const IDefaultFolderMenuInitialize, self), rclsid);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const ACTIVATEOPTIONS = extern enum(i32) {
    AO_NONE = 0,
    AO_DESIGNMODE = 1,
    AO_NOERRORUI = 2,
    AO_NOSPLASHSCREEN = 4,
    AO_PRELAUNCH = 33554432,
};
pub const AO_NONE = ACTIVATEOPTIONS.AO_NONE;
pub const AO_DESIGNMODE = ACTIVATEOPTIONS.AO_DESIGNMODE;
pub const AO_NOERRORUI = ACTIVATEOPTIONS.AO_NOERRORUI;
pub const AO_NOSPLASHSCREEN = ACTIVATEOPTIONS.AO_NOSPLASHSCREEN;
pub const AO_PRELAUNCH = ACTIVATEOPTIONS.AO_PRELAUNCH;

const IID_IApplicationActivationManager_Value = @import("../zig.zig").Guid.initString("2E941141-7F97-4756-BA1D-9DECDE894A3D");
pub const IID_IApplicationActivationManager = &IID_IApplicationActivationManager_Value;
pub const IApplicationActivationManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ActivateApplication: fn(
            self: *const IApplicationActivationManager,
            appUserModelId: [*:0]const u16,
            arguments: [*:0]const u16,
            options: ACTIVATEOPTIONS,
            processId: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivateForFile: fn(
            self: *const IApplicationActivationManager,
            appUserModelId: [*:0]const u16,
            itemArray: *IShellItemArray,
            verb: [*:0]const u16,
            processId: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivateForProtocol: fn(
            self: *const IApplicationActivationManager,
            appUserModelId: [*:0]const u16,
            itemArray: *IShellItemArray,
            processId: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationActivationManager_ActivateApplication(self: *const T, appUserModelId: [*:0]const u16, arguments: [*:0]const u16, options: ACTIVATEOPTIONS, processId: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationActivationManager.VTable, self.vtable).ActivateApplication(@ptrCast(*const IApplicationActivationManager, self), appUserModelId, arguments, options, processId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationActivationManager_ActivateForFile(self: *const T, appUserModelId: [*:0]const u16, itemArray: *IShellItemArray, verb: [*:0]const u16, processId: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationActivationManager.VTable, self.vtable).ActivateForFile(@ptrCast(*const IApplicationActivationManager, self), appUserModelId, itemArray, verb, processId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationActivationManager_ActivateForProtocol(self: *const T, appUserModelId: [*:0]const u16, itemArray: *IShellItemArray, processId: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationActivationManager.VTable, self.vtable).ActivateForProtocol(@ptrCast(*const IApplicationActivationManager, self), appUserModelId, itemArray, processId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IVirtualDesktopManager_Value = @import("../zig.zig").Guid.initString("A5CD92FF-29BE-454C-8D04-D82879FB3F1B");
pub const IID_IVirtualDesktopManager = &IID_IVirtualDesktopManager_Value;
pub const IVirtualDesktopManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsWindowOnCurrentVirtualDesktop: fn(
            self: *const IVirtualDesktopManager,
            topLevelWindow: HWND,
            onCurrentDesktop: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWindowDesktopId: fn(
            self: *const IVirtualDesktopManager,
            topLevelWindow: HWND,
            desktopId: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveWindowToDesktop: fn(
            self: *const IVirtualDesktopManager,
            topLevelWindow: HWND,
            desktopId: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVirtualDesktopManager_IsWindowOnCurrentVirtualDesktop(self: *const T, topLevelWindow: HWND, onCurrentDesktop: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVirtualDesktopManager.VTable, self.vtable).IsWindowOnCurrentVirtualDesktop(@ptrCast(*const IVirtualDesktopManager, self), topLevelWindow, onCurrentDesktop);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVirtualDesktopManager_GetWindowDesktopId(self: *const T, topLevelWindow: HWND, desktopId: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVirtualDesktopManager.VTable, self.vtable).GetWindowDesktopId(@ptrCast(*const IVirtualDesktopManager, self), topLevelWindow, desktopId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVirtualDesktopManager_MoveWindowToDesktop(self: *const T, topLevelWindow: HWND, desktopId: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVirtualDesktopManager.VTable, self.vtable).MoveWindowToDesktop(@ptrCast(*const IVirtualDesktopManager, self), topLevelWindow, desktopId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const LIBRARYMANAGEDIALOGOPTIONS = extern enum(i32) {
    LMD_DEFAULT = 0,
    LMD_ALLOWUNINDEXABLENETWORKLOCATIONS = 1,
};
pub const LMD_DEFAULT = LIBRARYMANAGEDIALOGOPTIONS.LMD_DEFAULT;
pub const LMD_ALLOWUNINDEXABLENETWORKLOCATIONS = LIBRARYMANAGEDIALOGOPTIONS.LMD_ALLOWUNINDEXABLENETWORKLOCATIONS;

const IID_IAssocHandlerInvoker_Value = @import("../zig.zig").Guid.initString("92218CAB-ECAA-4335-8133-807FD234C2EE");
pub const IID_IAssocHandlerInvoker = &IID_IAssocHandlerInvoker_Value;
pub const IAssocHandlerInvoker = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SupportsSelection: fn(
            self: *const IAssocHandlerInvoker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Invoke: fn(
            self: *const IAssocHandlerInvoker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAssocHandlerInvoker_SupportsSelection(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAssocHandlerInvoker.VTable, self.vtable).SupportsSelection(@ptrCast(*const IAssocHandlerInvoker, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAssocHandlerInvoker_Invoke(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAssocHandlerInvoker.VTable, self.vtable).Invoke(@ptrCast(*const IAssocHandlerInvoker, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const AHTYPE = extern enum(i32) {
    UNDEFINED = 0,
    USER_APPLICATION = 8,
    ANY_APPLICATION = 16,
    MACHINEDEFAULT = 32,
    PROGID = 64,
    APPLICATION = 128,
    CLASS_APPLICATION = 256,
    ANY_PROGID = 512,
};
pub const AHTYPE_UNDEFINED = AHTYPE.UNDEFINED;
pub const AHTYPE_USER_APPLICATION = AHTYPE.USER_APPLICATION;
pub const AHTYPE_ANY_APPLICATION = AHTYPE.ANY_APPLICATION;
pub const AHTYPE_MACHINEDEFAULT = AHTYPE.MACHINEDEFAULT;
pub const AHTYPE_PROGID = AHTYPE.PROGID;
pub const AHTYPE_APPLICATION = AHTYPE.APPLICATION;
pub const AHTYPE_CLASS_APPLICATION = AHTYPE.CLASS_APPLICATION;
pub const AHTYPE_ANY_PROGID = AHTYPE.ANY_PROGID;

const IID_IAssocHandler_Value = @import("../zig.zig").Guid.initString("F04061AC-1659-4A3F-A954-775AA57FC083");
pub const IID_IAssocHandler = &IID_IAssocHandler_Value;
pub const IAssocHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetName: fn(
            self: *const IAssocHandler,
            ppsz: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUIName: fn(
            self: *const IAssocHandler,
            ppsz: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconLocation: fn(
            self: *const IAssocHandler,
            ppszPath: *PWSTR,
            pIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRecommended: fn(
            self: *const IAssocHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MakeDefault: fn(
            self: *const IAssocHandler,
            pszDescription: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Invoke: fn(
            self: *const IAssocHandler,
            pdo: *IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInvoker: fn(
            self: *const IAssocHandler,
            pdo: *IDataObject,
            ppInvoker: **IAssocHandlerInvoker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAssocHandler_GetName(self: *const T, ppsz: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAssocHandler.VTable, self.vtable).GetName(@ptrCast(*const IAssocHandler, self), ppsz);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAssocHandler_GetUIName(self: *const T, ppsz: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAssocHandler.VTable, self.vtable).GetUIName(@ptrCast(*const IAssocHandler, self), ppsz);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAssocHandler_GetIconLocation(self: *const T, ppszPath: *PWSTR, pIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAssocHandler.VTable, self.vtable).GetIconLocation(@ptrCast(*const IAssocHandler, self), ppszPath, pIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAssocHandler_IsRecommended(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAssocHandler.VTable, self.vtable).IsRecommended(@ptrCast(*const IAssocHandler, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAssocHandler_MakeDefault(self: *const T, pszDescription: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAssocHandler.VTable, self.vtable).MakeDefault(@ptrCast(*const IAssocHandler, self), pszDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAssocHandler_Invoke(self: *const T, pdo: *IDataObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAssocHandler.VTable, self.vtable).Invoke(@ptrCast(*const IAssocHandler, self), pdo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAssocHandler_CreateInvoker(self: *const T, pdo: *IDataObject, ppInvoker: **IAssocHandlerInvoker) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAssocHandler.VTable, self.vtable).CreateInvoker(@ptrCast(*const IAssocHandler, self), pdo, ppInvoker);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumAssocHandlers_Value = @import("../zig.zig").Guid.initString("973810AE-9599-4B88-9E4D-6EE98C9552DA");
pub const IID_IEnumAssocHandlers = &IID_IEnumAssocHandlers_Value;
pub const IEnumAssocHandlers = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumAssocHandlers,
            celt: u32,
            rgelt: [*]*IAssocHandler,
            pceltFetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumAssocHandlers_Next(self: *const T, celt: u32, rgelt: [*]*IAssocHandler, pceltFetched: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumAssocHandlers.VTable, self.vtable).Next(@ptrCast(*const IEnumAssocHandlers, self), celt, rgelt, pceltFetched);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const ASSOC_FILTER = extern enum(i32) {
    NONE = 0,
    RECOMMENDED = 1,
};
pub const ASSOC_FILTER_NONE = ASSOC_FILTER.NONE;
pub const ASSOC_FILTER_RECOMMENDED = ASSOC_FILTER.RECOMMENDED;

const IID_IDataObjectProvider_Value = @import("../zig.zig").Guid.initString("3D25F6D6-4B2A-433C-9184-7C33AD35D001");
pub const IID_IDataObjectProvider = &IID_IDataObjectProvider_Value;
pub const IDataObjectProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDataObject: fn(
            self: *const IDataObjectProvider,
            dataObject: **IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDataObject: fn(
            self: *const IDataObjectProvider,
            dataObject: *IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataObjectProvider_GetDataObject(self: *const T, dataObject: **IDataObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataObjectProvider.VTable, self.vtable).GetDataObject(@ptrCast(*const IDataObjectProvider, self), dataObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataObjectProvider_SetDataObject(self: *const T, dataObject: *IDataObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataObjectProvider.VTable, self.vtable).SetDataObject(@ptrCast(*const IDataObjectProvider, self), dataObject);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDataTransferManagerInterop_Value = @import("../zig.zig").Guid.initString("3A3DCD6C-3EAB-43DC-BCDE-45671CE800C8");
pub const IID_IDataTransferManagerInterop = &IID_IDataTransferManagerInterop_Value;
pub const IDataTransferManagerInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetForWindow: fn(
            self: *const IDataTransferManagerInterop,
            appWindow: HWND,
            riid: *const Guid,
            dataTransferManager: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowShareUIForWindow: fn(
            self: *const IDataTransferManagerInterop,
            appWindow: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataTransferManagerInterop_GetForWindow(self: *const T, appWindow: HWND, riid: *const Guid, dataTransferManager: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataTransferManagerInterop.VTable, self.vtable).GetForWindow(@ptrCast(*const IDataTransferManagerInterop, self), appWindow, riid, dataTransferManager);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataTransferManagerInterop_ShowShareUIForWindow(self: *const T, appWindow: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataTransferManagerInterop.VTable, self.vtable).ShowShareUIForWindow(@ptrCast(*const IDataTransferManagerInterop, self), appWindow);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFrameworkInputPaneHandler_Value = @import("../zig.zig").Guid.initString("226C537B-1E76-4D9E-A760-33DB29922F18");
pub const IID_IFrameworkInputPaneHandler = &IID_IFrameworkInputPaneHandler_Value;
pub const IFrameworkInputPaneHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Showing: fn(
            self: *const IFrameworkInputPaneHandler,
            prcInputPaneScreenLocation: *RECT,
            fEnsureFocusedElementInView: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Hiding: fn(
            self: *const IFrameworkInputPaneHandler,
            fEnsureFocusedElementInView: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFrameworkInputPaneHandler_Showing(self: *const T, prcInputPaneScreenLocation: *RECT, fEnsureFocusedElementInView: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFrameworkInputPaneHandler.VTable, self.vtable).Showing(@ptrCast(*const IFrameworkInputPaneHandler, self), prcInputPaneScreenLocation, fEnsureFocusedElementInView);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFrameworkInputPaneHandler_Hiding(self: *const T, fEnsureFocusedElementInView: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFrameworkInputPaneHandler.VTable, self.vtable).Hiding(@ptrCast(*const IFrameworkInputPaneHandler, self), fEnsureFocusedElementInView);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFrameworkInputPane_Value = @import("../zig.zig").Guid.initString("5752238B-24F0-495A-82F1-2FD593056796");
pub const IID_IFrameworkInputPane = &IID_IFrameworkInputPane_Value;
pub const IFrameworkInputPane = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: fn(
            self: *const IFrameworkInputPane,
            pWindow: *IUnknown,
            pHandler: *IFrameworkInputPaneHandler,
            pdwCookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AdviseWithHWND: fn(
            self: *const IFrameworkInputPane,
            hwnd: HWND,
            pHandler: *IFrameworkInputPaneHandler,
            pdwCookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: fn(
            self: *const IFrameworkInputPane,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Location: fn(
            self: *const IFrameworkInputPane,
            prcInputPaneScreenLocation: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFrameworkInputPane_Advise(self: *const T, pWindow: *IUnknown, pHandler: *IFrameworkInputPaneHandler, pdwCookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFrameworkInputPane.VTable, self.vtable).Advise(@ptrCast(*const IFrameworkInputPane, self), pWindow, pHandler, pdwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFrameworkInputPane_AdviseWithHWND(self: *const T, hwnd: HWND, pHandler: *IFrameworkInputPaneHandler, pdwCookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFrameworkInputPane.VTable, self.vtable).AdviseWithHWND(@ptrCast(*const IFrameworkInputPane, self), hwnd, pHandler, pdwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFrameworkInputPane_Unadvise(self: *const T, dwCookie: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFrameworkInputPane.VTable, self.vtable).Unadvise(@ptrCast(*const IFrameworkInputPane, self), dwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFrameworkInputPane_Location(self: *const T, prcInputPaneScreenLocation: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFrameworkInputPane.VTable, self.vtable).Location(@ptrCast(*const IFrameworkInputPane, self), prcInputPaneScreenLocation);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const MONITOR_APP_VISIBILITY = extern enum(i32) {
    MAV_UNKNOWN = 0,
    MAV_NO_APP_VISIBLE = 1,
    MAV_APP_VISIBLE = 2,
};
pub const MAV_UNKNOWN = MONITOR_APP_VISIBILITY.MAV_UNKNOWN;
pub const MAV_NO_APP_VISIBLE = MONITOR_APP_VISIBILITY.MAV_NO_APP_VISIBLE;
pub const MAV_APP_VISIBLE = MONITOR_APP_VISIBILITY.MAV_APP_VISIBLE;

const IID_IAppVisibilityEvents_Value = @import("../zig.zig").Guid.initString("6584CE6B-7D82-49C2-89C9-C6BC02BA8C38");
pub const IID_IAppVisibilityEvents = &IID_IAppVisibilityEvents_Value;
pub const IAppVisibilityEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AppVisibilityOnMonitorChanged: fn(
            self: *const IAppVisibilityEvents,
            hMonitor: HMONITOR,
            previousMode: MONITOR_APP_VISIBILITY,
            currentMode: MONITOR_APP_VISIBILITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LauncherVisibilityChange: fn(
            self: *const IAppVisibilityEvents,
            currentVisibleState: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAppVisibilityEvents_AppVisibilityOnMonitorChanged(self: *const T, hMonitor: HMONITOR, previousMode: MONITOR_APP_VISIBILITY, currentMode: MONITOR_APP_VISIBILITY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAppVisibilityEvents.VTable, self.vtable).AppVisibilityOnMonitorChanged(@ptrCast(*const IAppVisibilityEvents, self), hMonitor, previousMode, currentMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAppVisibilityEvents_LauncherVisibilityChange(self: *const T, currentVisibleState: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAppVisibilityEvents.VTable, self.vtable).LauncherVisibilityChange(@ptrCast(*const IAppVisibilityEvents, self), currentVisibleState);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAppVisibility_Value = @import("../zig.zig").Guid.initString("2246EA2D-CAEA-4444-A3C4-6DE827E44313");
pub const IID_IAppVisibility = &IID_IAppVisibility_Value;
pub const IAppVisibility = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAppVisibilityOnMonitor: fn(
            self: *const IAppVisibility,
            hMonitor: HMONITOR,
            pMode: *MONITOR_APP_VISIBILITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsLauncherVisible: fn(
            self: *const IAppVisibility,
            pfVisible: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: fn(
            self: *const IAppVisibility,
            pCallback: *IAppVisibilityEvents,
            pdwCookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: fn(
            self: *const IAppVisibility,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAppVisibility_GetAppVisibilityOnMonitor(self: *const T, hMonitor: HMONITOR, pMode: *MONITOR_APP_VISIBILITY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAppVisibility.VTable, self.vtable).GetAppVisibilityOnMonitor(@ptrCast(*const IAppVisibility, self), hMonitor, pMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAppVisibility_IsLauncherVisible(self: *const T, pfVisible: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAppVisibility.VTable, self.vtable).IsLauncherVisible(@ptrCast(*const IAppVisibility, self), pfVisible);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAppVisibility_Advise(self: *const T, pCallback: *IAppVisibilityEvents, pdwCookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAppVisibility.VTable, self.vtable).Advise(@ptrCast(*const IAppVisibility, self), pCallback, pdwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAppVisibility_Unadvise(self: *const T, dwCookie: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAppVisibility.VTable, self.vtable).Unadvise(@ptrCast(*const IAppVisibility, self), dwCookie);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PACKAGE_EXECUTION_STATE = extern enum(i32) {
    PES_UNKNOWN = 0,
    PES_RUNNING = 1,
    PES_SUSPENDING = 2,
    PES_SUSPENDED = 3,
    PES_TERMINATED = 4,
};
pub const PES_UNKNOWN = PACKAGE_EXECUTION_STATE.PES_UNKNOWN;
pub const PES_RUNNING = PACKAGE_EXECUTION_STATE.PES_RUNNING;
pub const PES_SUSPENDING = PACKAGE_EXECUTION_STATE.PES_SUSPENDING;
pub const PES_SUSPENDED = PACKAGE_EXECUTION_STATE.PES_SUSPENDED;
pub const PES_TERMINATED = PACKAGE_EXECUTION_STATE.PES_TERMINATED;

const IID_IPackageExecutionStateChangeNotification_Value = @import("../zig.zig").Guid.initString("1BB12A62-2AD8-432B-8CCF-0C2C52AFCD5B");
pub const IID_IPackageExecutionStateChangeNotification = &IID_IPackageExecutionStateChangeNotification_Value;
pub const IPackageExecutionStateChangeNotification = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStateChanged: fn(
            self: *const IPackageExecutionStateChangeNotification,
            pszPackageFullName: [*:0]const u16,
            pesNewState: PACKAGE_EXECUTION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPackageExecutionStateChangeNotification_OnStateChanged(self: *const T, pszPackageFullName: [*:0]const u16, pesNewState: PACKAGE_EXECUTION_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPackageExecutionStateChangeNotification.VTable, self.vtable).OnStateChanged(@ptrCast(*const IPackageExecutionStateChangeNotification, self), pszPackageFullName, pesNewState);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPackageDebugSettings_Value = @import("../zig.zig").Guid.initString("F27C3930-8029-4AD1-94E3-3DBA417810C1");
pub const IID_IPackageDebugSettings = &IID_IPackageDebugSettings_Value;
pub const IPackageDebugSettings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnableDebugging: fn(
            self: *const IPackageDebugSettings,
            packageFullName: [*:0]const u16,
            debuggerCommandLine: ?[*:0]const u16,
            environment: ?[*]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableDebugging: fn(
            self: *const IPackageDebugSettings,
            packageFullName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Suspend: fn(
            self: *const IPackageDebugSettings,
            packageFullName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: fn(
            self: *const IPackageDebugSettings,
            packageFullName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TerminateAllProcesses: fn(
            self: *const IPackageDebugSettings,
            packageFullName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTargetSessionId: fn(
            self: *const IPackageDebugSettings,
            sessionId: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateBackgroundTasks: fn(
            self: *const IPackageDebugSettings,
            packageFullName: [*:0]const u16,
            taskCount: *u32,
            taskIds: **Guid,
            taskNames: **PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivateBackgroundTask: fn(
            self: *const IPackageDebugSettings,
            taskId: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartServicing: fn(
            self: *const IPackageDebugSettings,
            packageFullName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopServicing: fn(
            self: *const IPackageDebugSettings,
            packageFullName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartSessionRedirection: fn(
            self: *const IPackageDebugSettings,
            packageFullName: [*:0]const u16,
            sessionId: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopSessionRedirection: fn(
            self: *const IPackageDebugSettings,
            packageFullName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPackageExecutionState: fn(
            self: *const IPackageDebugSettings,
            packageFullName: [*:0]const u16,
            packageExecutionState: *PACKAGE_EXECUTION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterForPackageStateChanges: fn(
            self: *const IPackageDebugSettings,
            packageFullName: [*:0]const u16,
            pPackageExecutionStateChangeNotification: *IPackageExecutionStateChangeNotification,
            pdwCookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterForPackageStateChanges: fn(
            self: *const IPackageDebugSettings,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPackageDebugSettings_EnableDebugging(self: *const T, packageFullName: [*:0]const u16, debuggerCommandLine: ?[*:0]const u16, environment: ?[*]u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPackageDebugSettings.VTable, self.vtable).EnableDebugging(@ptrCast(*const IPackageDebugSettings, self), packageFullName, debuggerCommandLine, environment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPackageDebugSettings_DisableDebugging(self: *const T, packageFullName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPackageDebugSettings.VTable, self.vtable).DisableDebugging(@ptrCast(*const IPackageDebugSettings, self), packageFullName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPackageDebugSettings_Suspend(self: *const T, packageFullName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPackageDebugSettings.VTable, self.vtable).Suspend(@ptrCast(*const IPackageDebugSettings, self), packageFullName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPackageDebugSettings_Resume(self: *const T, packageFullName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPackageDebugSettings.VTable, self.vtable).Resume(@ptrCast(*const IPackageDebugSettings, self), packageFullName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPackageDebugSettings_TerminateAllProcesses(self: *const T, packageFullName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPackageDebugSettings.VTable, self.vtable).TerminateAllProcesses(@ptrCast(*const IPackageDebugSettings, self), packageFullName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPackageDebugSettings_SetTargetSessionId(self: *const T, sessionId: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPackageDebugSettings.VTable, self.vtable).SetTargetSessionId(@ptrCast(*const IPackageDebugSettings, self), sessionId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPackageDebugSettings_EnumerateBackgroundTasks(self: *const T, packageFullName: [*:0]const u16, taskCount: *u32, taskIds: **Guid, taskNames: **PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPackageDebugSettings.VTable, self.vtable).EnumerateBackgroundTasks(@ptrCast(*const IPackageDebugSettings, self), packageFullName, taskCount, taskIds, taskNames);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPackageDebugSettings_ActivateBackgroundTask(self: *const T, taskId: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPackageDebugSettings.VTable, self.vtable).ActivateBackgroundTask(@ptrCast(*const IPackageDebugSettings, self), taskId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPackageDebugSettings_StartServicing(self: *const T, packageFullName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPackageDebugSettings.VTable, self.vtable).StartServicing(@ptrCast(*const IPackageDebugSettings, self), packageFullName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPackageDebugSettings_StopServicing(self: *const T, packageFullName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPackageDebugSettings.VTable, self.vtable).StopServicing(@ptrCast(*const IPackageDebugSettings, self), packageFullName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPackageDebugSettings_StartSessionRedirection(self: *const T, packageFullName: [*:0]const u16, sessionId: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPackageDebugSettings.VTable, self.vtable).StartSessionRedirection(@ptrCast(*const IPackageDebugSettings, self), packageFullName, sessionId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPackageDebugSettings_StopSessionRedirection(self: *const T, packageFullName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPackageDebugSettings.VTable, self.vtable).StopSessionRedirection(@ptrCast(*const IPackageDebugSettings, self), packageFullName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPackageDebugSettings_GetPackageExecutionState(self: *const T, packageFullName: [*:0]const u16, packageExecutionState: *PACKAGE_EXECUTION_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPackageDebugSettings.VTable, self.vtable).GetPackageExecutionState(@ptrCast(*const IPackageDebugSettings, self), packageFullName, packageExecutionState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPackageDebugSettings_RegisterForPackageStateChanges(self: *const T, packageFullName: [*:0]const u16, pPackageExecutionStateChangeNotification: *IPackageExecutionStateChangeNotification, pdwCookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPackageDebugSettings.VTable, self.vtable).RegisterForPackageStateChanges(@ptrCast(*const IPackageDebugSettings, self), packageFullName, pPackageExecutionStateChangeNotification, pdwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPackageDebugSettings_UnregisterForPackageStateChanges(self: *const T, dwCookie: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPackageDebugSettings.VTable, self.vtable).UnregisterForPackageStateChanges(@ptrCast(*const IPackageDebugSettings, self), dwCookie);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPackageDebugSettings2_Value = @import("../zig.zig").Guid.initString("6E3194BB-AB82-4D22-93F5-FABDA40E7B16");
pub const IID_IPackageDebugSettings2 = &IID_IPackageDebugSettings2_Value;
pub const IPackageDebugSettings2 = extern struct {
    pub const VTable = extern struct {
        base: IPackageDebugSettings.VTable,
        EnumerateApps: fn(
            self: *const IPackageDebugSettings2,
            packageFullName: [*:0]const u16,
            appCount: *u32,
            appUserModelIds: **PWSTR,
            appDisplayNames: **PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPackageDebugSettings.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPackageDebugSettings2_EnumerateApps(self: *const T, packageFullName: [*:0]const u16, appCount: *u32, appUserModelIds: **PWSTR, appDisplayNames: **PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPackageDebugSettings2.VTable, self.vtable).EnumerateApps(@ptrCast(*const IPackageDebugSettings2, self), packageFullName, appCount, appUserModelIds, appDisplayNames);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISuspensionDependencyManager_Value = @import("../zig.zig").Guid.initString("52B83A42-2543-416A-81D9-C0DE7969C8B3");
pub const IID_ISuspensionDependencyManager = &IID_ISuspensionDependencyManager_Value;
pub const ISuspensionDependencyManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterAsChild: fn(
            self: *const ISuspensionDependencyManager,
            processHandle: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GroupChildWithParent: fn(
            self: *const ISuspensionDependencyManager,
            childProcessHandle: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UngroupChildFromParent: fn(
            self: *const ISuspensionDependencyManager,
            childProcessHandle: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISuspensionDependencyManager_RegisterAsChild(self: *const T, processHandle: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISuspensionDependencyManager.VTable, self.vtable).RegisterAsChild(@ptrCast(*const ISuspensionDependencyManager, self), processHandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISuspensionDependencyManager_GroupChildWithParent(self: *const T, childProcessHandle: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISuspensionDependencyManager.VTable, self.vtable).GroupChildWithParent(@ptrCast(*const ISuspensionDependencyManager, self), childProcessHandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISuspensionDependencyManager_UngroupChildFromParent(self: *const T, childProcessHandle: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISuspensionDependencyManager.VTable, self.vtable).UngroupChildFromParent(@ptrCast(*const ISuspensionDependencyManager, self), childProcessHandle);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const AHE_TYPE = extern enum(i32) {
    AHE_DESKTOP = 0,
    AHE_IMMERSIVE = 1,
};
pub const AHE_DESKTOP = AHE_TYPE.AHE_DESKTOP;
pub const AHE_IMMERSIVE = AHE_TYPE.AHE_IMMERSIVE;

const IID_IExecuteCommandApplicationHostEnvironment_Value = @import("../zig.zig").Guid.initString("18B21AA9-E184-4FF0-9F5E-F882D03771B3");
pub const IID_IExecuteCommandApplicationHostEnvironment = &IID_IExecuteCommandApplicationHostEnvironment_Value;
pub const IExecuteCommandApplicationHostEnvironment = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetValue: fn(
            self: *const IExecuteCommandApplicationHostEnvironment,
            pahe: *AHE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExecuteCommandApplicationHostEnvironment_GetValue(self: *const T, pahe: *AHE_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExecuteCommandApplicationHostEnvironment.VTable, self.vtable).GetValue(@ptrCast(*const IExecuteCommandApplicationHostEnvironment, self), pahe);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const EC_HOST_UI_MODE = extern enum(i32) {
    ECHUIM_DESKTOP = 0,
    ECHUIM_IMMERSIVE = 1,
    ECHUIM_SYSTEM_LAUNCHER = 2,
};
pub const ECHUIM_DESKTOP = EC_HOST_UI_MODE.ECHUIM_DESKTOP;
pub const ECHUIM_IMMERSIVE = EC_HOST_UI_MODE.ECHUIM_IMMERSIVE;
pub const ECHUIM_SYSTEM_LAUNCHER = EC_HOST_UI_MODE.ECHUIM_SYSTEM_LAUNCHER;

const IID_IExecuteCommandHost_Value = @import("../zig.zig").Guid.initString("4B6832A2-5F04-4C9D-B89D-727A15D103E7");
pub const IID_IExecuteCommandHost = &IID_IExecuteCommandHost_Value;
pub const IExecuteCommandHost = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetUIMode: fn(
            self: *const IExecuteCommandHost,
            pUIMode: *EC_HOST_UI_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExecuteCommandHost_GetUIMode(self: *const T, pUIMode: *EC_HOST_UI_MODE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExecuteCommandHost.VTable, self.vtable).GetUIMode(@ptrCast(*const IExecuteCommandHost, self), pUIMode);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const APPLICATION_VIEW_STATE = extern enum(i32) {
    AVS_FULLSCREEN_LANDSCAPE = 0,
    AVS_FILLED = 1,
    AVS_SNAPPED = 2,
    AVS_FULLSCREEN_PORTRAIT = 3,
};
pub const AVS_FULLSCREEN_LANDSCAPE = APPLICATION_VIEW_STATE.AVS_FULLSCREEN_LANDSCAPE;
pub const AVS_FILLED = APPLICATION_VIEW_STATE.AVS_FILLED;
pub const AVS_SNAPPED = APPLICATION_VIEW_STATE.AVS_SNAPPED;
pub const AVS_FULLSCREEN_PORTRAIT = APPLICATION_VIEW_STATE.AVS_FULLSCREEN_PORTRAIT;

pub const EDGE_GESTURE_KIND = extern enum(i32) {
    EGK_TOUCH = 0,
    EGK_KEYBOARD = 1,
    EGK_MOUSE = 2,
};
pub const EGK_TOUCH = EDGE_GESTURE_KIND.EGK_TOUCH;
pub const EGK_KEYBOARD = EDGE_GESTURE_KIND.EGK_KEYBOARD;
pub const EGK_MOUSE = EDGE_GESTURE_KIND.EGK_MOUSE;

const IID_IApplicationDesignModeSettings_Value = @import("../zig.zig").Guid.initString("2A3DEE9A-E31D-46D6-8508-BCC597DB3557");
pub const IID_IApplicationDesignModeSettings = &IID_IApplicationDesignModeSettings_Value;
pub const IApplicationDesignModeSettings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetNativeDisplaySize: fn(
            self: *const IApplicationDesignModeSettings,
            nativeDisplaySizePixels: SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleFactor: fn(
            self: *const IApplicationDesignModeSettings,
            scaleFactor: DEVICE_SCALE_FACTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetApplicationViewState: fn(
            self: *const IApplicationDesignModeSettings,
            viewState: APPLICATION_VIEW_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ComputeApplicationSize: fn(
            self: *const IApplicationDesignModeSettings,
            applicationSizePixels: *SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsApplicationViewStateSupported: fn(
            self: *const IApplicationDesignModeSettings,
            viewState: APPLICATION_VIEW_STATE,
            nativeDisplaySizePixels: SIZE,
            scaleFactor: DEVICE_SCALE_FACTOR,
            supported: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TriggerEdgeGesture: fn(
            self: *const IApplicationDesignModeSettings,
            edgeGestureKind: EDGE_GESTURE_KIND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationDesignModeSettings_SetNativeDisplaySize(self: *const T, nativeDisplaySizePixels: SIZE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationDesignModeSettings.VTable, self.vtable).SetNativeDisplaySize(@ptrCast(*const IApplicationDesignModeSettings, self), nativeDisplaySizePixels);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationDesignModeSettings_SetScaleFactor(self: *const T, scaleFactor: DEVICE_SCALE_FACTOR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationDesignModeSettings.VTable, self.vtable).SetScaleFactor(@ptrCast(*const IApplicationDesignModeSettings, self), scaleFactor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationDesignModeSettings_SetApplicationViewState(self: *const T, viewState: APPLICATION_VIEW_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationDesignModeSettings.VTable, self.vtable).SetApplicationViewState(@ptrCast(*const IApplicationDesignModeSettings, self), viewState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationDesignModeSettings_ComputeApplicationSize(self: *const T, applicationSizePixels: *SIZE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationDesignModeSettings.VTable, self.vtable).ComputeApplicationSize(@ptrCast(*const IApplicationDesignModeSettings, self), applicationSizePixels);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationDesignModeSettings_IsApplicationViewStateSupported(self: *const T, viewState: APPLICATION_VIEW_STATE, nativeDisplaySizePixels: SIZE, scaleFactor: DEVICE_SCALE_FACTOR, supported: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationDesignModeSettings.VTable, self.vtable).IsApplicationViewStateSupported(@ptrCast(*const IApplicationDesignModeSettings, self), viewState, nativeDisplaySizePixels, scaleFactor, supported);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationDesignModeSettings_TriggerEdgeGesture(self: *const T, edgeGestureKind: EDGE_GESTURE_KIND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationDesignModeSettings.VTable, self.vtable).TriggerEdgeGesture(@ptrCast(*const IApplicationDesignModeSettings, self), edgeGestureKind);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const NATIVE_DISPLAY_ORIENTATION = extern enum(i32) {
    NDO_LANDSCAPE = 0,
    NDO_PORTRAIT = 1,
};
pub const NDO_LANDSCAPE = NATIVE_DISPLAY_ORIENTATION.NDO_LANDSCAPE;
pub const NDO_PORTRAIT = NATIVE_DISPLAY_ORIENTATION.NDO_PORTRAIT;

pub const APPLICATION_VIEW_ORIENTATION = extern enum(i32) {
    AVO_LANDSCAPE = 0,
    AVO_PORTRAIT = 1,
};
pub const AVO_LANDSCAPE = APPLICATION_VIEW_ORIENTATION.AVO_LANDSCAPE;
pub const AVO_PORTRAIT = APPLICATION_VIEW_ORIENTATION.AVO_PORTRAIT;

pub const ADJACENT_DISPLAY_EDGES = extern enum(i32) {
    ADE_NONE = 0,
    ADE_LEFT = 1,
    ADE_RIGHT = 2,
};
pub const ADE_NONE = ADJACENT_DISPLAY_EDGES.ADE_NONE;
pub const ADE_LEFT = ADJACENT_DISPLAY_EDGES.ADE_LEFT;
pub const ADE_RIGHT = ADJACENT_DISPLAY_EDGES.ADE_RIGHT;

pub const APPLICATION_VIEW_MIN_WIDTH = extern enum(i32) {
    AVMW_DEFAULT = 0,
    AVMW_320 = 1,
    AVMW_500 = 2,
};
pub const AVMW_DEFAULT = APPLICATION_VIEW_MIN_WIDTH.AVMW_DEFAULT;
pub const AVMW_320 = APPLICATION_VIEW_MIN_WIDTH.AVMW_320;
pub const AVMW_500 = APPLICATION_VIEW_MIN_WIDTH.AVMW_500;

const IID_IApplicationDesignModeSettings2_Value = @import("../zig.zig").Guid.initString("490514E1-675A-4D6E-A58D-E54901B4CA2F");
pub const IID_IApplicationDesignModeSettings2 = &IID_IApplicationDesignModeSettings2_Value;
pub const IApplicationDesignModeSettings2 = extern struct {
    pub const VTable = extern struct {
        base: IApplicationDesignModeSettings.VTable,
        SetNativeDisplayOrientation: fn(
            self: *const IApplicationDesignModeSettings2,
            nativeDisplayOrientation: NATIVE_DISPLAY_ORIENTATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetApplicationViewOrientation: fn(
            self: *const IApplicationDesignModeSettings2,
            viewOrientation: APPLICATION_VIEW_ORIENTATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAdjacentDisplayEdges: fn(
            self: *const IApplicationDesignModeSettings2,
            adjacentDisplayEdges: ADJACENT_DISPLAY_EDGES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIsOnLockScreen: fn(
            self: *const IApplicationDesignModeSettings2,
            isOnLockScreen: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetApplicationViewMinWidth: fn(
            self: *const IApplicationDesignModeSettings2,
            viewMinWidth: APPLICATION_VIEW_MIN_WIDTH,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationSizeBounds: fn(
            self: *const IApplicationDesignModeSettings2,
            minApplicationSizePixels: *SIZE,
            maxApplicationSizePixels: *SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationViewOrientation: fn(
            self: *const IApplicationDesignModeSettings2,
            applicationSizePixels: SIZE,
            viewOrientation: *APPLICATION_VIEW_ORIENTATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IApplicationDesignModeSettings.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationDesignModeSettings2_SetNativeDisplayOrientation(self: *const T, nativeDisplayOrientation: NATIVE_DISPLAY_ORIENTATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationDesignModeSettings2.VTable, self.vtable).SetNativeDisplayOrientation(@ptrCast(*const IApplicationDesignModeSettings2, self), nativeDisplayOrientation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationDesignModeSettings2_SetApplicationViewOrientation(self: *const T, viewOrientation: APPLICATION_VIEW_ORIENTATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationDesignModeSettings2.VTable, self.vtable).SetApplicationViewOrientation(@ptrCast(*const IApplicationDesignModeSettings2, self), viewOrientation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationDesignModeSettings2_SetAdjacentDisplayEdges(self: *const T, adjacentDisplayEdges: ADJACENT_DISPLAY_EDGES) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationDesignModeSettings2.VTable, self.vtable).SetAdjacentDisplayEdges(@ptrCast(*const IApplicationDesignModeSettings2, self), adjacentDisplayEdges);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationDesignModeSettings2_SetIsOnLockScreen(self: *const T, isOnLockScreen: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationDesignModeSettings2.VTable, self.vtable).SetIsOnLockScreen(@ptrCast(*const IApplicationDesignModeSettings2, self), isOnLockScreen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationDesignModeSettings2_SetApplicationViewMinWidth(self: *const T, viewMinWidth: APPLICATION_VIEW_MIN_WIDTH) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationDesignModeSettings2.VTable, self.vtable).SetApplicationViewMinWidth(@ptrCast(*const IApplicationDesignModeSettings2, self), viewMinWidth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationDesignModeSettings2_GetApplicationSizeBounds(self: *const T, minApplicationSizePixels: *SIZE, maxApplicationSizePixels: *SIZE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationDesignModeSettings2.VTable, self.vtable).GetApplicationSizeBounds(@ptrCast(*const IApplicationDesignModeSettings2, self), minApplicationSizePixels, maxApplicationSizePixels);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationDesignModeSettings2_GetApplicationViewOrientation(self: *const T, applicationSizePixels: SIZE, viewOrientation: *APPLICATION_VIEW_ORIENTATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationDesignModeSettings2.VTable, self.vtable).GetApplicationViewOrientation(@ptrCast(*const IApplicationDesignModeSettings2, self), applicationSizePixels, viewOrientation);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILaunchTargetMonitor_Value = @import("../zig.zig").Guid.initString("266FBC7E-490D-46ED-A96B-2274DB252003");
pub const IID_ILaunchTargetMonitor = &IID_ILaunchTargetMonitor_Value;
pub const ILaunchTargetMonitor = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMonitor: fn(
            self: *const ILaunchTargetMonitor,
            monitor: *HMONITOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILaunchTargetMonitor_GetMonitor(self: *const T, monitor: *HMONITOR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILaunchTargetMonitor.VTable, self.vtable).GetMonitor(@ptrCast(*const ILaunchTargetMonitor, self), monitor);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const APPLICATION_VIEW_SIZE_PREFERENCE = extern enum(i32) {
    AVSP_DEFAULT = 0,
    AVSP_USE_LESS = 1,
    AVSP_USE_HALF = 2,
    AVSP_USE_MORE = 3,
    AVSP_USE_MINIMUM = 4,
    AVSP_USE_NONE = 5,
    AVSP_CUSTOM = 6,
};
pub const AVSP_DEFAULT = APPLICATION_VIEW_SIZE_PREFERENCE.AVSP_DEFAULT;
pub const AVSP_USE_LESS = APPLICATION_VIEW_SIZE_PREFERENCE.AVSP_USE_LESS;
pub const AVSP_USE_HALF = APPLICATION_VIEW_SIZE_PREFERENCE.AVSP_USE_HALF;
pub const AVSP_USE_MORE = APPLICATION_VIEW_SIZE_PREFERENCE.AVSP_USE_MORE;
pub const AVSP_USE_MINIMUM = APPLICATION_VIEW_SIZE_PREFERENCE.AVSP_USE_MINIMUM;
pub const AVSP_USE_NONE = APPLICATION_VIEW_SIZE_PREFERENCE.AVSP_USE_NONE;
pub const AVSP_CUSTOM = APPLICATION_VIEW_SIZE_PREFERENCE.AVSP_CUSTOM;

const IID_ILaunchSourceViewSizePreference_Value = @import("../zig.zig").Guid.initString("E5AA01F7-1FB8-4830-8720-4E6734CBD5F3");
pub const IID_ILaunchSourceViewSizePreference = &IID_ILaunchSourceViewSizePreference_Value;
pub const ILaunchSourceViewSizePreference = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSourceViewToPosition: fn(
            self: *const ILaunchSourceViewSizePreference,
            hwnd: *HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceViewSizePreference: fn(
            self: *const ILaunchSourceViewSizePreference,
            sourceSizeAfterLaunch: *APPLICATION_VIEW_SIZE_PREFERENCE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILaunchSourceViewSizePreference_GetSourceViewToPosition(self: *const T, hwnd: *HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILaunchSourceViewSizePreference.VTable, self.vtable).GetSourceViewToPosition(@ptrCast(*const ILaunchSourceViewSizePreference, self), hwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILaunchSourceViewSizePreference_GetSourceViewSizePreference(self: *const T, sourceSizeAfterLaunch: *APPLICATION_VIEW_SIZE_PREFERENCE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILaunchSourceViewSizePreference.VTable, self.vtable).GetSourceViewSizePreference(@ptrCast(*const ILaunchSourceViewSizePreference, self), sourceSizeAfterLaunch);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILaunchTargetViewSizePreference_Value = @import("../zig.zig").Guid.initString("2F0666C6-12F7-4360-B511-A394A0553725");
pub const IID_ILaunchTargetViewSizePreference = &IID_ILaunchTargetViewSizePreference_Value;
pub const ILaunchTargetViewSizePreference = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTargetViewSizePreference: fn(
            self: *const ILaunchTargetViewSizePreference,
            targetSizeOnLaunch: *APPLICATION_VIEW_SIZE_PREFERENCE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILaunchTargetViewSizePreference_GetTargetViewSizePreference(self: *const T, targetSizeOnLaunch: *APPLICATION_VIEW_SIZE_PREFERENCE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILaunchTargetViewSizePreference.VTable, self.vtable).GetTargetViewSizePreference(@ptrCast(*const ILaunchTargetViewSizePreference, self), targetSizeOnLaunch);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILaunchSourceAppUserModelId_Value = @import("../zig.zig").Guid.initString("989191AC-28FF-4CF0-9584-E0D078BC2396");
pub const IID_ILaunchSourceAppUserModelId = &IID_ILaunchSourceAppUserModelId_Value;
pub const ILaunchSourceAppUserModelId = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAppUserModelId: fn(
            self: *const ILaunchSourceAppUserModelId,
            launchingApp: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILaunchSourceAppUserModelId_GetAppUserModelId(self: *const T, launchingApp: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILaunchSourceAppUserModelId.VTable, self.vtable).GetAppUserModelId(@ptrCast(*const ILaunchSourceAppUserModelId, self), launchingApp);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInitializeWithWindow_Value = @import("../zig.zig").Guid.initString("3E68D4BD-7135-4D10-8018-9FB6D9F33FA1");
pub const IID_IInitializeWithWindow = &IID_IInitializeWithWindow_Value;
pub const IInitializeWithWindow = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IInitializeWithWindow,
            hwnd: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInitializeWithWindow_Initialize(self: *const T, hwnd: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInitializeWithWindow.VTable, self.vtable).Initialize(@ptrCast(*const IInitializeWithWindow, self), hwnd);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IHandlerInfo_Value = @import("../zig.zig").Guid.initString("997706EF-F880-453B-8118-39E1A2D2655A");
pub const IID_IHandlerInfo = &IID_IHandlerInfo_Value;
pub const IHandlerInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetApplicationDisplayName: fn(
            self: *const IHandlerInfo,
            value: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationPublisher: fn(
            self: *const IHandlerInfo,
            value: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationIconReference: fn(
            self: *const IHandlerInfo,
            value: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHandlerInfo_GetApplicationDisplayName(self: *const T, value: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHandlerInfo.VTable, self.vtable).GetApplicationDisplayName(@ptrCast(*const IHandlerInfo, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHandlerInfo_GetApplicationPublisher(self: *const T, value: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHandlerInfo.VTable, self.vtable).GetApplicationPublisher(@ptrCast(*const IHandlerInfo, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHandlerInfo_GetApplicationIconReference(self: *const T, value: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHandlerInfo.VTable, self.vtable).GetApplicationIconReference(@ptrCast(*const IHandlerInfo, self), value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IHandlerInfo2_Value = @import("../zig.zig").Guid.initString("31CCA04C-04D3-4EA9-90DE-97B15E87A532");
pub const IID_IHandlerInfo2 = &IID_IHandlerInfo2_Value;
pub const IHandlerInfo2 = extern struct {
    pub const VTable = extern struct {
        base: IHandlerInfo.VTable,
        GetApplicationId: fn(
            self: *const IHandlerInfo2,
            value: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IHandlerInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHandlerInfo2_GetApplicationId(self: *const T, value: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHandlerInfo2.VTable, self.vtable).GetApplicationId(@ptrCast(*const IHandlerInfo2, self), value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IHandlerActivationHost_Value = @import("../zig.zig").Guid.initString("35094A87-8BB1-4237-96C6-C417EEBDB078");
pub const IID_IHandlerActivationHost = &IID_IHandlerActivationHost_Value;
pub const IHandlerActivationHost = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BeforeCoCreateInstance: fn(
            self: *const IHandlerActivationHost,
            clsidHandler: *const Guid,
            itemsBeingActivated: *IShellItemArray,
            handlerInfo: *IHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeforeCreateProcess: fn(
            self: *const IHandlerActivationHost,
            applicationPath: [*:0]const u16,
            commandLine: [*:0]const u16,
            handlerInfo: *IHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHandlerActivationHost_BeforeCoCreateInstance(self: *const T, clsidHandler: *const Guid, itemsBeingActivated: *IShellItemArray, handlerInfo: *IHandlerInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHandlerActivationHost.VTable, self.vtable).BeforeCoCreateInstance(@ptrCast(*const IHandlerActivationHost, self), clsidHandler, itemsBeingActivated, handlerInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHandlerActivationHost_BeforeCreateProcess(self: *const T, applicationPath: [*:0]const u16, commandLine: [*:0]const u16, handlerInfo: *IHandlerInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHandlerActivationHost.VTable, self.vtable).BeforeCreateProcess(@ptrCast(*const IHandlerActivationHost, self), applicationPath, commandLine, handlerInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAppActivationUIInfo_Value = @import("../zig.zig").Guid.initString("ABAD189D-9FA3-4278-B3CA-8CA448A88DCB");
pub const IID_IAppActivationUIInfo = &IID_IAppActivationUIInfo_Value;
pub const IAppActivationUIInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMonitor: fn(
            self: *const IAppActivationUIInfo,
            value: *HMONITOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInvokePoint: fn(
            self: *const IAppActivationUIInfo,
            value: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShowCommand: fn(
            self: *const IAppActivationUIInfo,
            value: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShowUI: fn(
            self: *const IAppActivationUIInfo,
            value: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyState: fn(
            self: *const IAppActivationUIInfo,
            value: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAppActivationUIInfo_GetMonitor(self: *const T, value: *HMONITOR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAppActivationUIInfo.VTable, self.vtable).GetMonitor(@ptrCast(*const IAppActivationUIInfo, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAppActivationUIInfo_GetInvokePoint(self: *const T, value: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAppActivationUIInfo.VTable, self.vtable).GetInvokePoint(@ptrCast(*const IAppActivationUIInfo, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAppActivationUIInfo_GetShowCommand(self: *const T, value: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAppActivationUIInfo.VTable, self.vtable).GetShowCommand(@ptrCast(*const IAppActivationUIInfo, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAppActivationUIInfo_GetShowUI(self: *const T, value: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAppActivationUIInfo.VTable, self.vtable).GetShowUI(@ptrCast(*const IAppActivationUIInfo, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAppActivationUIInfo_GetKeyState(self: *const T, value: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAppActivationUIInfo.VTable, self.vtable).GetKeyState(@ptrCast(*const IAppActivationUIInfo, self), value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const FLYOUT_PLACEMENT = extern enum(i32) {
    FP_DEFAULT = 0,
    FP_ABOVE = 1,
    FP_BELOW = 2,
    FP_LEFT = 3,
    FP_RIGHT = 4,
};
pub const FP_DEFAULT = FLYOUT_PLACEMENT.FP_DEFAULT;
pub const FP_ABOVE = FLYOUT_PLACEMENT.FP_ABOVE;
pub const FP_BELOW = FLYOUT_PLACEMENT.FP_BELOW;
pub const FP_LEFT = FLYOUT_PLACEMENT.FP_LEFT;
pub const FP_RIGHT = FLYOUT_PLACEMENT.FP_RIGHT;

const IID_IContactManagerInterop_Value = @import("../zig.zig").Guid.initString("99EACBA7-E073-43B6-A896-55AFE48A0833");
pub const IID_IContactManagerInterop = &IID_IContactManagerInterop_Value;
pub const IContactManagerInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ShowContactCardForWindow: fn(
            self: *const IContactManagerInterop,
            appWindow: HWND,
            contact: *IUnknown,
            selection: *const RECT,
            preferredPlacement: FLYOUT_PLACEMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactManagerInterop_ShowContactCardForWindow(self: *const T, appWindow: HWND, contact: *IUnknown, selection: *const RECT, preferredPlacement: FLYOUT_PLACEMENT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContactManagerInterop.VTable, self.vtable).ShowContactCardForWindow(@ptrCast(*const IContactManagerInterop, self), appWindow, contact, selection, preferredPlacement);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellIconOverlayIdentifier_Value = @import("../zig.zig").Guid.initString("0C6C4200-C589-11D0-999A-00C04FD655E1");
pub const IID_IShellIconOverlayIdentifier = &IID_IShellIconOverlayIdentifier_Value;
pub const IShellIconOverlayIdentifier = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsMemberOf: fn(
            self: *const IShellIconOverlayIdentifier,
            pwszPath: [*:0]const u16,
            dwAttrib: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOverlayInfo: fn(
            self: *const IShellIconOverlayIdentifier,
            pwszIconFile: [*:0]u16,
            cchMax: i32,
            pIndex: *i32,
            pdwFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPriority: fn(
            self: *const IShellIconOverlayIdentifier,
            pPriority: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellIconOverlayIdentifier_IsMemberOf(self: *const T, pwszPath: [*:0]const u16, dwAttrib: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellIconOverlayIdentifier.VTable, self.vtable).IsMemberOf(@ptrCast(*const IShellIconOverlayIdentifier, self), pwszPath, dwAttrib);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellIconOverlayIdentifier_GetOverlayInfo(self: *const T, pwszIconFile: [*:0]u16, cchMax: i32, pIndex: *i32, pdwFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellIconOverlayIdentifier.VTable, self.vtable).GetOverlayInfo(@ptrCast(*const IShellIconOverlayIdentifier, self), pwszIconFile, cchMax, pIndex, pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellIconOverlayIdentifier_GetPriority(self: *const T, pPriority: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellIconOverlayIdentifier.VTable, self.vtable).GetPriority(@ptrCast(*const IShellIconOverlayIdentifier, self), pPriority);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const BANNER_NOTIFICATION_EVENT = extern enum(i32) {
    BNE_Rendered = 0,
    BNE_Hovered = 1,
    BNE_Closed = 2,
    BNE_Dismissed = 3,
    BNE_Button1Clicked = 4,
    BNE_Button2Clicked = 5,
};
pub const BNE_Rendered = BANNER_NOTIFICATION_EVENT.BNE_Rendered;
pub const BNE_Hovered = BANNER_NOTIFICATION_EVENT.BNE_Hovered;
pub const BNE_Closed = BANNER_NOTIFICATION_EVENT.BNE_Closed;
pub const BNE_Dismissed = BANNER_NOTIFICATION_EVENT.BNE_Dismissed;
pub const BNE_Button1Clicked = BANNER_NOTIFICATION_EVENT.BNE_Button1Clicked;
pub const BNE_Button2Clicked = BANNER_NOTIFICATION_EVENT.BNE_Button2Clicked;

pub const BANNER_NOTIFICATION = extern struct {
    event: BANNER_NOTIFICATION_EVENT,
    providerIdentity: [*:0]const u16,
    contentId: [*:0]const u16,
};

const IID_IBannerNotificationHandler_Value = @import("../zig.zig").Guid.initString("8D7B2BA7-DB05-46A8-823C-D2B6DE08EE91");
pub const IID_IBannerNotificationHandler = &IID_IBannerNotificationHandler_Value;
pub const IBannerNotificationHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnBannerEvent: fn(
            self: *const IBannerNotificationHandler,
            notification: *const BANNER_NOTIFICATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBannerNotificationHandler_OnBannerEvent(self: *const T, notification: *const BANNER_NOTIFICATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBannerNotificationHandler.VTable, self.vtable).OnBannerEvent(@ptrCast(*const IBannerNotificationHandler, self), notification);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SORT_ORDER_TYPE = extern enum(i32) {
    SOT_DEFAULT = 0,
    SOT_IGNORE_FOLDERNESS = 1,
};
pub const SOT_DEFAULT = SORT_ORDER_TYPE.SOT_DEFAULT;
pub const SOT_IGNORE_FOLDERNESS = SORT_ORDER_TYPE.SOT_IGNORE_FOLDERNESS;

const IID_ISortColumnArray_Value = @import("../zig.zig").Guid.initString("6DFC60FB-F2E9-459B-BEB5-288F1A7C7D54");
pub const IID_ISortColumnArray = &IID_ISortColumnArray_Value;
pub const ISortColumnArray = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const ISortColumnArray,
            columnCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const ISortColumnArray,
            index: u32,
            sortcolumn: *SORTCOLUMN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSortType: fn(
            self: *const ISortColumnArray,
            type: *SORT_ORDER_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISortColumnArray_GetCount(self: *const T, columnCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISortColumnArray.VTable, self.vtable).GetCount(@ptrCast(*const ISortColumnArray, self), columnCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISortColumnArray_GetAt(self: *const T, index: u32, sortcolumn: *SORTCOLUMN) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISortColumnArray.VTable, self.vtable).GetAt(@ptrCast(*const ISortColumnArray, self), index, sortcolumn);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISortColumnArray_GetSortType(self: *const T, type: *SORT_ORDER_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISortColumnArray.VTable, self.vtable).GetSortType(@ptrCast(*const ISortColumnArray, self), type);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPropertyKeyStore_Value = @import("../zig.zig").Guid.initString("75BD59AA-F23B-4963-ABA4-0B355752A91B");
pub const IID_IPropertyKeyStore = &IID_IPropertyKeyStore_Value;
pub const IPropertyKeyStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetKeyCount: fn(
            self: *const IPropertyKeyStore,
            keyCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyAt: fn(
            self: *const IPropertyKeyStore,
            index: i32,
            pkey: *PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendKey: fn(
            self: *const IPropertyKeyStore,
            key: *const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteKey: fn(
            self: *const IPropertyKeyStore,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsKeyInStore: fn(
            self: *const IPropertyKeyStore,
            key: *const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveKey: fn(
            self: *const IPropertyKeyStore,
            key: *const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyKeyStore_GetKeyCount(self: *const T, keyCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyKeyStore.VTable, self.vtable).GetKeyCount(@ptrCast(*const IPropertyKeyStore, self), keyCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyKeyStore_GetKeyAt(self: *const T, index: i32, pkey: *PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyKeyStore.VTable, self.vtable).GetKeyAt(@ptrCast(*const IPropertyKeyStore, self), index, pkey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyKeyStore_AppendKey(self: *const T, key: *const PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyKeyStore.VTable, self.vtable).AppendKey(@ptrCast(*const IPropertyKeyStore, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyKeyStore_DeleteKey(self: *const T, index: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyKeyStore.VTable, self.vtable).DeleteKey(@ptrCast(*const IPropertyKeyStore, self), index);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyKeyStore_IsKeyInStore(self: *const T, key: *const PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyKeyStore.VTable, self.vtable).IsKeyInStore(@ptrCast(*const IPropertyKeyStore, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPropertyKeyStore_RemoveKey(self: *const T, key: *const PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPropertyKeyStore.VTable, self.vtable).RemoveKey(@ptrCast(*const IPropertyKeyStore, self), key);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IQueryCodePage_Value = @import("../zig.zig").Guid.initString("C7B236CE-EE80-11D0-985F-006008059382");
pub const IID_IQueryCodePage = &IID_IQueryCodePage_Value;
pub const IQueryCodePage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCodePage: fn(
            self: *const IQueryCodePage,
            puiCodePage: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCodePage: fn(
            self: *const IQueryCodePage,
            uiCodePage: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IQueryCodePage_GetCodePage(self: *const T, puiCodePage: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IQueryCodePage.VTable, self.vtable).GetCodePage(@ptrCast(*const IQueryCodePage, self), puiCodePage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IQueryCodePage_SetCodePage(self: *const T, uiCodePage: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IQueryCodePage.VTable, self.vtable).SetCodePage(@ptrCast(*const IQueryCodePage, self), uiCodePage);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const FOLDERVIEWOPTIONS = extern enum(i32) {
    FVO_DEFAULT = 0,
    FVO_VISTALAYOUT = 1,
    FVO_CUSTOMPOSITION = 2,
    FVO_CUSTOMORDERING = 4,
    FVO_SUPPORTHYPERLINKS = 8,
    FVO_NOANIMATIONS = 16,
    FVO_NOSCROLLTIPS = 32,
};
pub const FVO_DEFAULT = FOLDERVIEWOPTIONS.FVO_DEFAULT;
pub const FVO_VISTALAYOUT = FOLDERVIEWOPTIONS.FVO_VISTALAYOUT;
pub const FVO_CUSTOMPOSITION = FOLDERVIEWOPTIONS.FVO_CUSTOMPOSITION;
pub const FVO_CUSTOMORDERING = FOLDERVIEWOPTIONS.FVO_CUSTOMORDERING;
pub const FVO_SUPPORTHYPERLINKS = FOLDERVIEWOPTIONS.FVO_SUPPORTHYPERLINKS;
pub const FVO_NOANIMATIONS = FOLDERVIEWOPTIONS.FVO_NOANIMATIONS;
pub const FVO_NOSCROLLTIPS = FOLDERVIEWOPTIONS.FVO_NOSCROLLTIPS;

const IID_IFolderViewOptions_Value = @import("../zig.zig").Guid.initString("3CC974D2-B302-4D36-AD3E-06D93F695D3F");
pub const IID_IFolderViewOptions = &IID_IFolderViewOptions_Value;
pub const IFolderViewOptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFolderViewOptions: fn(
            self: *const IFolderViewOptions,
            fvoMask: FOLDERVIEWOPTIONS,
            fvoFlags: FOLDERVIEWOPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderViewOptions: fn(
            self: *const IFolderViewOptions,
            pfvoFlags: *FOLDERVIEWOPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderViewOptions_SetFolderViewOptions(self: *const T, fvoMask: FOLDERVIEWOPTIONS, fvoFlags: FOLDERVIEWOPTIONS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderViewOptions.VTable, self.vtable).SetFolderViewOptions(@ptrCast(*const IFolderViewOptions, self), fvoMask, fvoFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderViewOptions_GetFolderViewOptions(self: *const T, pfvoFlags: *FOLDERVIEWOPTIONS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderViewOptions.VTable, self.vtable).GetFolderViewOptions(@ptrCast(*const IFolderViewOptions, self), pfvoFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _SV3CVW3_FLAGS = extern enum(i32) {
    SV3CVW3_DEFAULT = 0,
    SV3CVW3_NONINTERACTIVE = 1,
    SV3CVW3_FORCEVIEWMODE = 2,
    SV3CVW3_FORCEFOLDERFLAGS = 4,
};
pub const SV3CVW3_DEFAULT = _SV3CVW3_FLAGS.SV3CVW3_DEFAULT;
pub const SV3CVW3_NONINTERACTIVE = _SV3CVW3_FLAGS.SV3CVW3_NONINTERACTIVE;
pub const SV3CVW3_FORCEVIEWMODE = _SV3CVW3_FLAGS.SV3CVW3_FORCEVIEWMODE;
pub const SV3CVW3_FORCEFOLDERFLAGS = _SV3CVW3_FLAGS.SV3CVW3_FORCEFOLDERFLAGS;

const IID_IShellView3_Value = @import("../zig.zig").Guid.initString("EC39FA88-F8AF-41C5-8421-38BED28F4673");
pub const IID_IShellView3 = &IID_IShellView3_Value;
pub const IShellView3 = extern struct {
    pub const VTable = extern struct {
        base: IShellView2.VTable,
        CreateViewWindow3: fn(
            self: *const IShellView3,
            psbOwner: *IShellBrowser,
            psvPrev: *IShellView,
            dwViewFlags: u32,
            dwMask: FOLDERFLAGS,
            dwFlags: FOLDERFLAGS,
            fvMode: FOLDERVIEWMODE,
            pvid: *const Guid,
            prcView: *const RECT,
            phwndView: *HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IShellView2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellView3_CreateViewWindow3(self: *const T, psbOwner: *IShellBrowser, psvPrev: *IShellView, dwViewFlags: u32, dwMask: FOLDERFLAGS, dwFlags: FOLDERFLAGS, fvMode: FOLDERVIEWMODE, pvid: *const Guid, prcView: *const RECT, phwndView: *HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellView3.VTable, self.vtable).CreateViewWindow3(@ptrCast(*const IShellView3, self), psbOwner, psvPrev, dwViewFlags, dwMask, dwFlags, fvMode, pvid, prcView, phwndView);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISearchBoxInfo_Value = @import("../zig.zig").Guid.initString("6AF6E03F-D664-4EF4-9626-F7E0ED36755E");
pub const IID_ISearchBoxInfo = &IID_ISearchBoxInfo_Value;
pub const ISearchBoxInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCondition: fn(
            self: *const ISearchBoxInfo,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetText: fn(
            self: *const ISearchBoxInfo,
            ppsz: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISearchBoxInfo_GetCondition(self: *const T, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISearchBoxInfo.VTable, self.vtable).GetCondition(@ptrCast(*const ISearchBoxInfo, self), riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISearchBoxInfo_GetText(self: *const T, ppsz: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISearchBoxInfo.VTable, self.vtable).GetText(@ptrCast(*const ISearchBoxInfo, self), ppsz);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const VPWATERMARKFLAGS = extern enum(i32) {
    VPWF_DEFAULT = 0,
    VPWF_ALPHABLEND = 1,
};
pub const VPWF_DEFAULT = VPWATERMARKFLAGS.VPWF_DEFAULT;
pub const VPWF_ALPHABLEND = VPWATERMARKFLAGS.VPWF_ALPHABLEND;

pub const VPCOLORFLAGS = extern enum(i32) {
    VPCF_TEXT = 1,
    VPCF_BACKGROUND = 2,
    VPCF_SORTCOLUMN = 3,
    VPCF_SUBTEXT = 4,
    VPCF_TEXTBACKGROUND = 5,
};
pub const VPCF_TEXT = VPCOLORFLAGS.VPCF_TEXT;
pub const VPCF_BACKGROUND = VPCOLORFLAGS.VPCF_BACKGROUND;
pub const VPCF_SORTCOLUMN = VPCOLORFLAGS.VPCF_SORTCOLUMN;
pub const VPCF_SUBTEXT = VPCOLORFLAGS.VPCF_SUBTEXT;
pub const VPCF_TEXTBACKGROUND = VPCOLORFLAGS.VPCF_TEXTBACKGROUND;

const IID_IVisualProperties_Value = @import("../zig.zig").Guid.initString("E693CF68-D967-4112-8763-99172AEE5E5A");
pub const IID_IVisualProperties = &IID_IVisualProperties_Value;
pub const IVisualProperties = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetWatermark: fn(
            self: *const IVisualProperties,
            hbmp: HBITMAP,
            vpwf: VPWATERMARKFLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColor: fn(
            self: *const IVisualProperties,
            vpcf: VPCOLORFLAGS,
            cr: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColor: fn(
            self: *const IVisualProperties,
            vpcf: VPCOLORFLAGS,
            pcr: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemHeight: fn(
            self: *const IVisualProperties,
            cyItemInPixels: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemHeight: fn(
            self: *const IVisualProperties,
            cyItemInPixels: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFont: fn(
            self: *const IVisualProperties,
            plf: *const LOGFONTW,
            bRedraw: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFont: fn(
            self: *const IVisualProperties,
            plf: *LOGFONTW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTheme: fn(
            self: *const IVisualProperties,
            pszSubAppName: [*:0]const u16,
            pszSubIdList: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVisualProperties_SetWatermark(self: *const T, hbmp: HBITMAP, vpwf: VPWATERMARKFLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVisualProperties.VTable, self.vtable).SetWatermark(@ptrCast(*const IVisualProperties, self), hbmp, vpwf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVisualProperties_SetColor(self: *const T, vpcf: VPCOLORFLAGS, cr: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVisualProperties.VTable, self.vtable).SetColor(@ptrCast(*const IVisualProperties, self), vpcf, cr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVisualProperties_GetColor(self: *const T, vpcf: VPCOLORFLAGS, pcr: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVisualProperties.VTable, self.vtable).GetColor(@ptrCast(*const IVisualProperties, self), vpcf, pcr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVisualProperties_SetItemHeight(self: *const T, cyItemInPixels: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVisualProperties.VTable, self.vtable).SetItemHeight(@ptrCast(*const IVisualProperties, self), cyItemInPixels);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVisualProperties_GetItemHeight(self: *const T, cyItemInPixels: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVisualProperties.VTable, self.vtable).GetItemHeight(@ptrCast(*const IVisualProperties, self), cyItemInPixels);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVisualProperties_SetFont(self: *const T, plf: *const LOGFONTW, bRedraw: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVisualProperties.VTable, self.vtable).SetFont(@ptrCast(*const IVisualProperties, self), plf, bRedraw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVisualProperties_GetFont(self: *const T, plf: *LOGFONTW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVisualProperties.VTable, self.vtable).GetFont(@ptrCast(*const IVisualProperties, self), plf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IVisualProperties_SetTheme(self: *const T, pszSubAppName: [*:0]const u16, pszSubIdList: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IVisualProperties.VTable, self.vtable).SetTheme(@ptrCast(*const IVisualProperties, self), pszSubAppName, pszSubIdList);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICommDlgBrowser3_Value = @import("../zig.zig").Guid.initString("C8AD25A1-3294-41EE-8165-71174BD01C57");
pub const IID_ICommDlgBrowser3 = &IID_ICommDlgBrowser3_Value;
pub const ICommDlgBrowser3 = extern struct {
    pub const VTable = extern struct {
        base: ICommDlgBrowser2.VTable,
        OnColumnClicked: fn(
            self: *const ICommDlgBrowser3,
            ppshv: *IShellView,
            iColumn: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentFilter: fn(
            self: *const ICommDlgBrowser3,
            pszFileSpec: [*:0]u16,
            cchFileSpec: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnPreViewCreated: fn(
            self: *const ICommDlgBrowser3,
            ppshv: *IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICommDlgBrowser2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICommDlgBrowser3_OnColumnClicked(self: *const T, ppshv: *IShellView, iColumn: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICommDlgBrowser3.VTable, self.vtable).OnColumnClicked(@ptrCast(*const ICommDlgBrowser3, self), ppshv, iColumn);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICommDlgBrowser3_GetCurrentFilter(self: *const T, pszFileSpec: [*:0]u16, cchFileSpec: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICommDlgBrowser3.VTable, self.vtable).GetCurrentFilter(@ptrCast(*const ICommDlgBrowser3, self), pszFileSpec, cchFileSpec);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICommDlgBrowser3_OnPreViewCreated(self: *const T, ppshv: *IShellView) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICommDlgBrowser3.VTable, self.vtable).OnPreViewCreated(@ptrCast(*const ICommDlgBrowser3, self), ppshv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUserAccountChangeCallback_Value = @import("../zig.zig").Guid.initString("A561E69A-B4B8-4113-91A5-64C6BCCA3430");
pub const IID_IUserAccountChangeCallback = &IID_IUserAccountChangeCallback_Value;
pub const IUserAccountChangeCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnPictureChange: fn(
            self: *const IUserAccountChangeCallback,
            pszUserName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserAccountChangeCallback_OnPictureChange(self: *const T, pszUserName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserAccountChangeCallback.VTable, self.vtable).OnPictureChange(@ptrCast(*const IUserAccountChangeCallback, self), pszUserName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IStreamAsync_Value = @import("../zig.zig").Guid.initString("FE0B6665-E0CA-49B9-A178-2B5CB48D92A5");
pub const IID_IStreamAsync = &IID_IStreamAsync_Value;
pub const IStreamAsync = extern struct {
    pub const VTable = extern struct {
        base: IStream.VTable,
        ReadAsync: fn(
            self: *const IStreamAsync,
            pv: [*]u8,
            cb: u32,
            pcbRead: ?*u32,
            lpOverlapped: *OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteAsync: fn(
            self: *const IStreamAsync,
            lpBuffer: [*]const u8,
            cb: u32,
            pcbWritten: ?*u32,
            lpOverlapped: *OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OverlappedResult: fn(
            self: *const IStreamAsync,
            lpOverlapped: *OVERLAPPED,
            lpNumberOfBytesTransferred: *u32,
            bWait: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelIo: fn(
            self: *const IStreamAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IStream.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStreamAsync_ReadAsync(self: *const T, pv: [*]u8, cb: u32, pcbRead: ?*u32, lpOverlapped: *OVERLAPPED) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStreamAsync.VTable, self.vtable).ReadAsync(@ptrCast(*const IStreamAsync, self), pv, cb, pcbRead, lpOverlapped);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStreamAsync_WriteAsync(self: *const T, lpBuffer: [*]const u8, cb: u32, pcbWritten: ?*u32, lpOverlapped: *OVERLAPPED) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStreamAsync.VTable, self.vtable).WriteAsync(@ptrCast(*const IStreamAsync, self), lpBuffer, cb, pcbWritten, lpOverlapped);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStreamAsync_OverlappedResult(self: *const T, lpOverlapped: *OVERLAPPED, lpNumberOfBytesTransferred: *u32, bWait: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStreamAsync.VTable, self.vtable).OverlappedResult(@ptrCast(*const IStreamAsync, self), lpOverlapped, lpNumberOfBytesTransferred, bWait);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStreamAsync_CancelIo(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStreamAsync.VTable, self.vtable).CancelIo(@ptrCast(*const IStreamAsync, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IStreamUnbufferedInfo_Value = @import("../zig.zig").Guid.initString("8A68FDDA-1FDC-4C20-8CEB-416643B5A625");
pub const IID_IStreamUnbufferedInfo = &IID_IStreamUnbufferedInfo_Value;
pub const IStreamUnbufferedInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSectorSize: fn(
            self: *const IStreamUnbufferedInfo,
            pcbSectorSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStreamUnbufferedInfo_GetSectorSize(self: *const T, pcbSectorSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStreamUnbufferedInfo.VTable, self.vtable).GetSectorSize(@ptrCast(*const IStreamUnbufferedInfo, self), pcbSectorSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DSH_FLAGS = extern enum(i32) {
    DSH_ALLOWDROPDESCRIPTIONTEXT = 1,
};
pub const DSH_ALLOWDROPDESCRIPTIONTEXT = DSH_FLAGS.DSH_ALLOWDROPDESCRIPTIONTEXT;

const IID_IDragSourceHelper2_Value = @import("../zig.zig").Guid.initString("83E07D0D-0C5F-4163-BF1A-60B274051E40");
pub const IID_IDragSourceHelper2 = &IID_IDragSourceHelper2_Value;
pub const IDragSourceHelper2 = extern struct {
    pub const VTable = extern struct {
        base: IDragSourceHelper.VTable,
        SetFlags: fn(
            self: *const IDragSourceHelper2,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDragSourceHelper.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDragSourceHelper2_SetFlags(self: *const T, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDragSourceHelper2.VTable, self.vtable).SetFlags(@ptrCast(*const IDragSourceHelper2, self), dwFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IHWEventHandler_Value = @import("../zig.zig").Guid.initString("C1FB73D0-EC3A-4BA2-B512-8CDB9187B6D1");
pub const IID_IHWEventHandler = &IID_IHWEventHandler_Value;
pub const IHWEventHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IHWEventHandler,
            pszParams: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleEvent: fn(
            self: *const IHWEventHandler,
            pszDeviceID: [*:0]const u16,
            pszAltDeviceID: [*:0]const u16,
            pszEventType: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleEventWithContent: fn(
            self: *const IHWEventHandler,
            pszDeviceID: [*:0]const u16,
            pszAltDeviceID: [*:0]const u16,
            pszEventType: [*:0]const u16,
            pszContentTypeHandler: [*:0]const u16,
            pdataobject: *IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHWEventHandler_Initialize(self: *const T, pszParams: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHWEventHandler.VTable, self.vtable).Initialize(@ptrCast(*const IHWEventHandler, self), pszParams);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHWEventHandler_HandleEvent(self: *const T, pszDeviceID: [*:0]const u16, pszAltDeviceID: [*:0]const u16, pszEventType: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHWEventHandler.VTable, self.vtable).HandleEvent(@ptrCast(*const IHWEventHandler, self), pszDeviceID, pszAltDeviceID, pszEventType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHWEventHandler_HandleEventWithContent(self: *const T, pszDeviceID: [*:0]const u16, pszAltDeviceID: [*:0]const u16, pszEventType: [*:0]const u16, pszContentTypeHandler: [*:0]const u16, pdataobject: *IDataObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHWEventHandler.VTable, self.vtable).HandleEventWithContent(@ptrCast(*const IHWEventHandler, self), pszDeviceID, pszAltDeviceID, pszEventType, pszContentTypeHandler, pdataobject);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IHWEventHandler2_Value = @import("../zig.zig").Guid.initString("CFCC809F-295D-42E8-9FFC-424B33C487E6");
pub const IID_IHWEventHandler2 = &IID_IHWEventHandler2_Value;
pub const IHWEventHandler2 = extern struct {
    pub const VTable = extern struct {
        base: IHWEventHandler.VTable,
        HandleEventWithHWND: fn(
            self: *const IHWEventHandler2,
            pszDeviceID: [*:0]const u16,
            pszAltDeviceID: [*:0]const u16,
            pszEventType: [*:0]const u16,
            hwndOwner: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IHWEventHandler.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHWEventHandler2_HandleEventWithHWND(self: *const T, pszDeviceID: [*:0]const u16, pszAltDeviceID: [*:0]const u16, pszEventType: [*:0]const u16, hwndOwner: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHWEventHandler2.VTable, self.vtable).HandleEventWithHWND(@ptrCast(*const IHWEventHandler2, self), pszDeviceID, pszAltDeviceID, pszEventType, hwndOwner);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IQueryCancelAutoPlay_Value = @import("../zig.zig").Guid.initString("DDEFE873-6997-4E68-BE26-39B633ADBE12");
pub const IID_IQueryCancelAutoPlay = &IID_IQueryCancelAutoPlay_Value;
pub const IQueryCancelAutoPlay = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AllowAutoPlay: fn(
            self: *const IQueryCancelAutoPlay,
            pszPath: [*:0]const u16,
            dwContentType: u32,
            pszLabel: [*:0]const u16,
            dwSerialNumber: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IQueryCancelAutoPlay_AllowAutoPlay(self: *const T, pszPath: [*:0]const u16, dwContentType: u32, pszLabel: [*:0]const u16, dwSerialNumber: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IQueryCancelAutoPlay.VTable, self.vtable).AllowAutoPlay(@ptrCast(*const IQueryCancelAutoPlay, self), pszPath, dwContentType, pszLabel, dwSerialNumber);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDynamicHWHandler_Value = @import("../zig.zig").Guid.initString("DC2601D7-059E-42FC-A09D-2AFD21B6D5F7");
pub const IID_IDynamicHWHandler = &IID_IDynamicHWHandler_Value;
pub const IDynamicHWHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDynamicInfo: fn(
            self: *const IDynamicHWHandler,
            pszDeviceID: [*:0]const u16,
            dwContentType: u32,
            ppszAction: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDynamicHWHandler_GetDynamicInfo(self: *const T, pszDeviceID: [*:0]const u16, dwContentType: u32, ppszAction: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDynamicHWHandler.VTable, self.vtable).GetDynamicInfo(@ptrCast(*const IDynamicHWHandler, self), pszDeviceID, dwContentType, ppszAction);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUserNotificationCallback_Value = @import("../zig.zig").Guid.initString("19108294-0441-4AFF-8013-FA0A730B0BEA");
pub const IID_IUserNotificationCallback = &IID_IUserNotificationCallback_Value;
pub const IUserNotificationCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnBalloonUserClick: fn(
            self: *const IUserNotificationCallback,
            pt: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnLeftClick: fn(
            self: *const IUserNotificationCallback,
            pt: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnContextMenu: fn(
            self: *const IUserNotificationCallback,
            pt: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserNotificationCallback_OnBalloonUserClick(self: *const T, pt: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserNotificationCallback.VTable, self.vtable).OnBalloonUserClick(@ptrCast(*const IUserNotificationCallback, self), pt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserNotificationCallback_OnLeftClick(self: *const T, pt: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserNotificationCallback.VTable, self.vtable).OnLeftClick(@ptrCast(*const IUserNotificationCallback, self), pt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserNotificationCallback_OnContextMenu(self: *const T, pt: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserNotificationCallback.VTable, self.vtable).OnContextMenu(@ptrCast(*const IUserNotificationCallback, self), pt);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUserNotification2_Value = @import("../zig.zig").Guid.initString("215913CC-57EB-4FAB-AB5A-E5FA7BEA2A6C");
pub const IID_IUserNotification2 = &IID_IUserNotification2_Value;
pub const IUserNotification2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBalloonInfo: fn(
            self: *const IUserNotification2,
            pszTitle: [*:0]const u16,
            pszText: [*:0]const u16,
            dwInfoFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBalloonRetry: fn(
            self: *const IUserNotification2,
            dwShowTime: u32,
            dwInterval: u32,
            cRetryCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIconInfo: fn(
            self: *const IUserNotification2,
            hIcon: HICON,
            pszToolTip: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Show: fn(
            self: *const IUserNotification2,
            pqc: *IQueryContinue,
            dwContinuePollInterval: u32,
            pSink: *IUserNotificationCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PlaySoundA: fn(
            self: *const IUserNotification2,
            pszSoundName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserNotification2_SetBalloonInfo(self: *const T, pszTitle: [*:0]const u16, pszText: [*:0]const u16, dwInfoFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserNotification2.VTable, self.vtable).SetBalloonInfo(@ptrCast(*const IUserNotification2, self), pszTitle, pszText, dwInfoFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserNotification2_SetBalloonRetry(self: *const T, dwShowTime: u32, dwInterval: u32, cRetryCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserNotification2.VTable, self.vtable).SetBalloonRetry(@ptrCast(*const IUserNotification2, self), dwShowTime, dwInterval, cRetryCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserNotification2_SetIconInfo(self: *const T, hIcon: HICON, pszToolTip: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserNotification2.VTable, self.vtable).SetIconInfo(@ptrCast(*const IUserNotification2, self), hIcon, pszToolTip);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserNotification2_Show(self: *const T, pqc: *IQueryContinue, dwContinuePollInterval: u32, pSink: *IUserNotificationCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserNotification2.VTable, self.vtable).Show(@ptrCast(*const IUserNotification2, self), pqc, dwContinuePollInterval, pSink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserNotification2_PlaySoundA(self: *const T, pszSoundName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserNotification2.VTable, self.vtable).PlaySoundA(@ptrCast(*const IUserNotification2, self), pszSoundName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDeskBand2_Value = @import("../zig.zig").Guid.initString("79D16DE4-ABEE-4021-8D9D-9169B261D657");
pub const IID_IDeskBand2 = &IID_IDeskBand2_Value;
pub const IDeskBand2 = extern struct {
    pub const VTable = extern struct {
        base: IDeskBand.VTable,
        CanRenderComposited: fn(
            self: *const IDeskBand2,
            pfCanRenderComposited: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompositionState: fn(
            self: *const IDeskBand2,
            fCompositionEnabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCompositionState: fn(
            self: *const IDeskBand2,
            pfCompositionEnabled: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDeskBand.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDeskBand2_CanRenderComposited(self: *const T, pfCanRenderComposited: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDeskBand2.VTable, self.vtable).CanRenderComposited(@ptrCast(*const IDeskBand2, self), pfCanRenderComposited);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDeskBand2_SetCompositionState(self: *const T, fCompositionEnabled: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDeskBand2.VTable, self.vtable).SetCompositionState(@ptrCast(*const IDeskBand2, self), fCompositionEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDeskBand2_GetCompositionState(self: *const T, pfCompositionEnabled: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDeskBand2.VTable, self.vtable).GetCompositionState(@ptrCast(*const IDeskBand2, self), pfCompositionEnabled);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IStartMenuPinnedList_Value = @import("../zig.zig").Guid.initString("4CD19ADA-25A5-4A32-B3B7-347BEE5BE36B");
pub const IID_IStartMenuPinnedList = &IID_IStartMenuPinnedList_Value;
pub const IStartMenuPinnedList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RemoveFromList: fn(
            self: *const IStartMenuPinnedList,
            pitem: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStartMenuPinnedList_RemoveFromList(self: *const T, pitem: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStartMenuPinnedList.VTable, self.vtable).RemoveFromList(@ptrCast(*const IStartMenuPinnedList, self), pitem);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICDBurn_Value = @import("../zig.zig").Guid.initString("3D73A659-E5D0-4D42-AFC0-5121BA425C8D");
pub const IID_ICDBurn = &IID_ICDBurn_Value;
pub const ICDBurn = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRecorderDriveLetter: fn(
            self: *const ICDBurn,
            pszDrive: [*:0]u16,
            cch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Burn: fn(
            self: *const ICDBurn,
            hwnd: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasRecordableDrive: fn(
            self: *const ICDBurn,
            pfHasRecorder: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICDBurn_GetRecorderDriveLetter(self: *const T, pszDrive: [*:0]u16, cch: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICDBurn.VTable, self.vtable).GetRecorderDriveLetter(@ptrCast(*const ICDBurn, self), pszDrive, cch);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICDBurn_Burn(self: *const T, hwnd: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICDBurn.VTable, self.vtable).Burn(@ptrCast(*const ICDBurn, self), hwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICDBurn_HasRecordableDrive(self: *const T, pfHasRecorder: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICDBurn.VTable, self.vtable).HasRecordableDrive(@ptrCast(*const ICDBurn, self), pfHasRecorder);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWizardSite_Value = @import("../zig.zig").Guid.initString("88960F5B-422F-4E7B-8013-73415381C3C3");
pub const IID_IWizardSite = &IID_IWizardSite_Value;
pub const IWizardSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPreviousPage: fn(
            self: *const IWizardSite,
            phpage: *HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextPage: fn(
            self: *const IWizardSite,
            phpage: *HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCancelledPage: fn(
            self: *const IWizardSite,
            phpage: *HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWizardSite_GetPreviousPage(self: *const T, phpage: *HPROPSHEETPAGE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWizardSite.VTable, self.vtable).GetPreviousPage(@ptrCast(*const IWizardSite, self), phpage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWizardSite_GetNextPage(self: *const T, phpage: *HPROPSHEETPAGE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWizardSite.VTable, self.vtable).GetNextPage(@ptrCast(*const IWizardSite, self), phpage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWizardSite_GetCancelledPage(self: *const T, phpage: *HPROPSHEETPAGE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWizardSite.VTable, self.vtable).GetCancelledPage(@ptrCast(*const IWizardSite, self), phpage);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWizardExtension_Value = @import("../zig.zig").Guid.initString("C02EA696-86CC-491E-9B23-74394A0444A8");
pub const IID_IWizardExtension = &IID_IWizardExtension_Value;
pub const IWizardExtension = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddPages: fn(
            self: *const IWizardExtension,
            aPages: [*]HPROPSHEETPAGE,
            cPages: u32,
            pnPagesAdded: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFirstPage: fn(
            self: *const IWizardExtension,
            phpage: *HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastPage: fn(
            self: *const IWizardExtension,
            phpage: *HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWizardExtension_AddPages(self: *const T, aPages: [*]HPROPSHEETPAGE, cPages: u32, pnPagesAdded: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWizardExtension.VTable, self.vtable).AddPages(@ptrCast(*const IWizardExtension, self), aPages, cPages, pnPagesAdded);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWizardExtension_GetFirstPage(self: *const T, phpage: *HPROPSHEETPAGE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWizardExtension.VTable, self.vtable).GetFirstPage(@ptrCast(*const IWizardExtension, self), phpage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWizardExtension_GetLastPage(self: *const T, phpage: *HPROPSHEETPAGE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWizardExtension.VTable, self.vtable).GetLastPage(@ptrCast(*const IWizardExtension, self), phpage);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWebWizardExtension_Value = @import("../zig.zig").Guid.initString("0E6B3F66-98D1-48C0-A222-FBDE74E2FBC5");
pub const IID_IWebWizardExtension = &IID_IWebWizardExtension_Value;
pub const IWebWizardExtension = extern struct {
    pub const VTable = extern struct {
        base: IWizardExtension.VTable,
        SetInitialURL: fn(
            self: *const IWebWizardExtension,
            pszURL: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetErrorURL: fn(
            self: *const IWebWizardExtension,
            pszErrorURL: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWizardExtension.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWebWizardExtension_SetInitialURL(self: *const T, pszURL: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWebWizardExtension.VTable, self.vtable).SetInitialURL(@ptrCast(*const IWebWizardExtension, self), pszURL);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWebWizardExtension_SetErrorURL(self: *const T, pszErrorURL: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWebWizardExtension.VTable, self.vtable).SetErrorURL(@ptrCast(*const IWebWizardExtension, self), pszErrorURL);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPublishingWizard_Value = @import("../zig.zig").Guid.initString("AA9198BB-CCEC-472D-BEED-19A4F6733F7A");
pub const IID_IPublishingWizard = &IID_IPublishingWizard_Value;
pub const IPublishingWizard = extern struct {
    pub const VTable = extern struct {
        base: IWizardExtension.VTable,
        Initialize: fn(
            self: *const IPublishingWizard,
            pdo: ?*IDataObject,
            dwOptions: u32,
            pszServiceScope: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransferManifest: fn(
            self: *const IPublishingWizard,
            phrFromTransfer: ?*HRESULT,
            pdocManifest: ?*?*IXMLDOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWizardExtension.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPublishingWizard_Initialize(self: *const T, pdo: ?*IDataObject, dwOptions: u32, pszServiceScope: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPublishingWizard.VTable, self.vtable).Initialize(@ptrCast(*const IPublishingWizard, self), pdo, dwOptions, pszServiceScope);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPublishingWizard_GetTransferManifest(self: *const T, phrFromTransfer: ?*HRESULT, pdocManifest: ?*?*IXMLDOMDocument) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPublishingWizard.VTable, self.vtable).GetTransferManifest(@ptrCast(*const IPublishingWizard, self), phrFromTransfer, pdocManifest);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFolderViewHost_Value = @import("../zig.zig").Guid.initString("1EA58F02-D55A-411D-B09E-9E65AC21605B");
pub const IID_IFolderViewHost = &IID_IFolderViewHost_Value;
pub const IFolderViewHost = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IFolderViewHost,
            hwndParent: HWND,
            pdo: *IDataObject,
            prc: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderViewHost_Initialize(self: *const T, hwndParent: HWND, pdo: *IDataObject, prc: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderViewHost.VTable, self.vtable).Initialize(@ptrCast(*const IFolderViewHost, self), hwndParent, pdo, prc);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAccessibleObject_Value = @import("../zig.zig").Guid.initString("95A391C5-9ED4-4C28-8401-AB9E06719E11");
pub const IID_IAccessibleObject = &IID_IAccessibleObject_Value;
pub const IAccessibleObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAccessibleName: fn(
            self: *const IAccessibleObject,
            pszName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAccessibleObject_SetAccessibleName(self: *const T, pszName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAccessibleObject.VTable, self.vtable).SetAccessibleName(@ptrCast(*const IAccessibleObject, self), pszName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IResultsFolder_Value = @import("../zig.zig").Guid.initString("96E5AE6D-6AE1-4B1C-900C-C6480EAA8828");
pub const IID_IResultsFolder = &IID_IResultsFolder_Value;
pub const IResultsFolder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddItem: fn(
            self: *const IResultsFolder,
            psi: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddIDList: fn(
            self: *const IResultsFolder,
            pidl: *ITEMIDLIST,
            ppidlAdded: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveItem: fn(
            self: *const IResultsFolder,
            psi: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveIDList: fn(
            self: *const IResultsFolder,
            pidl: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAll: fn(
            self: *const IResultsFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IResultsFolder_AddItem(self: *const T, psi: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IResultsFolder.VTable, self.vtable).AddItem(@ptrCast(*const IResultsFolder, self), psi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IResultsFolder_AddIDList(self: *const T, pidl: *ITEMIDLIST, ppidlAdded: ?*?*ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IResultsFolder.VTable, self.vtable).AddIDList(@ptrCast(*const IResultsFolder, self), pidl, ppidlAdded);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IResultsFolder_RemoveItem(self: *const T, psi: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IResultsFolder.VTable, self.vtable).RemoveItem(@ptrCast(*const IResultsFolder, self), psi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IResultsFolder_RemoveIDList(self: *const T, pidl: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IResultsFolder.VTable, self.vtable).RemoveIDList(@ptrCast(*const IResultsFolder, self), pidl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IResultsFolder_RemoveAll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IResultsFolder.VTable, self.vtable).RemoveAll(@ptrCast(*const IResultsFolder, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAutoCompleteDropDown_Value = @import("../zig.zig").Guid.initString("3CD141F4-3C6A-11D2-BCAA-00C04FD929DB");
pub const IID_IAutoCompleteDropDown = &IID_IAutoCompleteDropDown_Value;
pub const IAutoCompleteDropDown = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDropDownStatus: fn(
            self: *const IAutoCompleteDropDown,
            pdwFlags: *u32,
            ppwszString: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetEnumerator: fn(
            self: *const IAutoCompleteDropDown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAutoCompleteDropDown_GetDropDownStatus(self: *const T, pdwFlags: *u32, ppwszString: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAutoCompleteDropDown.VTable, self.vtable).GetDropDownStatus(@ptrCast(*const IAutoCompleteDropDown, self), pdwFlags, ppwszString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAutoCompleteDropDown_ResetEnumerator(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAutoCompleteDropDown.VTable, self.vtable).ResetEnumerator(@ptrCast(*const IAutoCompleteDropDown, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const tagCDBURNINGEXTENSIONRET = extern enum(i32) {
    CDBE_RET_DEFAULT = 0,
    CDBE_RET_DONTRUNOTHEREXTS = 1,
    CDBE_RET_STOPWIZARD = 2,
};
pub const CDBE_RET_DEFAULT = tagCDBURNINGEXTENSIONRET.CDBE_RET_DEFAULT;
pub const CDBE_RET_DONTRUNOTHEREXTS = tagCDBURNINGEXTENSIONRET.CDBE_RET_DONTRUNOTHEREXTS;
pub const CDBE_RET_STOPWIZARD = tagCDBURNINGEXTENSIONRET.CDBE_RET_STOPWIZARD;

pub const _CDBE_ACTIONS = extern enum(i32) {
    CDBE_TYPE_MUSIC = 1,
    CDBE_TYPE_DATA = 2,
    CDBE_TYPE_ALL = -1,
};
pub const CDBE_TYPE_MUSIC = _CDBE_ACTIONS.CDBE_TYPE_MUSIC;
pub const CDBE_TYPE_DATA = _CDBE_ACTIONS.CDBE_TYPE_DATA;
pub const CDBE_TYPE_ALL = _CDBE_ACTIONS.CDBE_TYPE_ALL;

const IID_ICDBurnExt_Value = @import("../zig.zig").Guid.initString("2271DCCA-74FC-4414-8FB7-C56B05ACE2D7");
pub const IID_ICDBurnExt = &IID_ICDBurnExt_Value;
pub const ICDBurnExt = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSupportedActionTypes: fn(
            self: *const ICDBurnExt,
            pdwActions: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICDBurnExt_GetSupportedActionTypes(self: *const T, pdwActions: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICDBurnExt.VTable, self.vtable).GetSupportedActionTypes(@ptrCast(*const ICDBurnExt, self), pdwActions);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumReadyCallback_Value = @import("../zig.zig").Guid.initString("61E00D45-8FFF-4E60-924E-6537B61612DD");
pub const IID_IEnumReadyCallback = &IID_IEnumReadyCallback_Value;
pub const IEnumReadyCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumReady: fn(
            self: *const IEnumReadyCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumReadyCallback_EnumReady(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumReadyCallback.VTable, self.vtable).EnumReady(@ptrCast(*const IEnumReadyCallback, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumerableView_Value = @import("../zig.zig").Guid.initString("8C8BF236-1AEC-495F-9894-91D57C3C686F");
pub const IID_IEnumerableView = &IID_IEnumerableView_Value;
pub const IEnumerableView = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetEnumReadyCallback: fn(
            self: *const IEnumerableView,
            percb: *IEnumReadyCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEnumIDListFromContents: fn(
            self: *const IEnumerableView,
            pidlFolder: *ITEMIDLIST,
            dwEnumFlags: u32,
            ppEnumIDList: **IEnumIDList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumerableView_SetEnumReadyCallback(self: *const T, percb: *IEnumReadyCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumerableView.VTable, self.vtable).SetEnumReadyCallback(@ptrCast(*const IEnumerableView, self), percb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumerableView_CreateEnumIDListFromContents(self: *const T, pidlFolder: *ITEMIDLIST, dwEnumFlags: u32, ppEnumIDList: **IEnumIDList) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumerableView.VTable, self.vtable).CreateEnumIDListFromContents(@ptrCast(*const IEnumerableView, self), pidlFolder, dwEnumFlags, ppEnumIDList);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInsertItem_Value = @import("../zig.zig").Guid.initString("D2B57227-3D23-4B95-93C0-492BD454C356");
pub const IID_IInsertItem = &IID_IInsertItem_Value;
pub const IInsertItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InsertItem: fn(
            self: *const IInsertItem,
            pidl: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInsertItem_InsertItem(self: *const T, pidl: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInsertItem.VTable, self.vtable).InsertItem(@ptrCast(*const IInsertItem, self), pidl);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFolderBandPriv_Value = @import("../zig.zig").Guid.initString("47C01F95-E185-412C-B5C5-4F27DF965AEA");
pub const IID_IFolderBandPriv = &IID_IFolderBandPriv_Value;
pub const IFolderBandPriv = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetCascade: fn(
            self: *const IFolderBandPriv,
            fCascade: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAccelerators: fn(
            self: *const IFolderBandPriv,
            fAccelerators: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNoIcons: fn(
            self: *const IFolderBandPriv,
            fNoIcons: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNoText: fn(
            self: *const IFolderBandPriv,
            fNoText: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderBandPriv_SetCascade(self: *const T, fCascade: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderBandPriv.VTable, self.vtable).SetCascade(@ptrCast(*const IFolderBandPriv, self), fCascade);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderBandPriv_SetAccelerators(self: *const T, fAccelerators: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderBandPriv.VTable, self.vtable).SetAccelerators(@ptrCast(*const IFolderBandPriv, self), fAccelerators);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderBandPriv_SetNoIcons(self: *const T, fNoIcons: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderBandPriv.VTable, self.vtable).SetNoIcons(@ptrCast(*const IFolderBandPriv, self), fNoIcons);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderBandPriv_SetNoText(self: *const T, fNoText: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderBandPriv.VTable, self.vtable).SetNoText(@ptrCast(*const IFolderBandPriv, self), fNoText);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IImageRecompress_Value = @import("../zig.zig").Guid.initString("505F1513-6B3E-4892-A272-59F8889A4D3E");
pub const IID_IImageRecompress = &IID_IImageRecompress_Value;
pub const IImageRecompress = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RecompressImage: fn(
            self: *const IImageRecompress,
            psi: *IShellItem,
            cx: i32,
            cy: i32,
            iQuality: i32,
            pstg: *IStorage,
            ppstrmOut: **IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IImageRecompress_RecompressImage(self: *const T, psi: *IShellItem, cx: i32, cy: i32, iQuality: i32, pstg: *IStorage, ppstrmOut: **IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IImageRecompress.VTable, self.vtable).RecompressImage(@ptrCast(*const IImageRecompress, self), psi, cx, cy, iQuality, pstg, ppstrmOut);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFileDialogControlEvents_Value = @import("../zig.zig").Guid.initString("36116642-D713-4B97-9B83-7484A9D00433");
pub const IID_IFileDialogControlEvents = &IID_IFileDialogControlEvents_Value;
pub const IFileDialogControlEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnItemSelected: fn(
            self: *const IFileDialogControlEvents,
            pfdc: *IFileDialogCustomize,
            dwIDCtl: u32,
            dwIDItem: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnButtonClicked: fn(
            self: *const IFileDialogControlEvents,
            pfdc: *IFileDialogCustomize,
            dwIDCtl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCheckButtonToggled: fn(
            self: *const IFileDialogControlEvents,
            pfdc: *IFileDialogCustomize,
            dwIDCtl: u32,
            bChecked: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnControlActivating: fn(
            self: *const IFileDialogControlEvents,
            pfdc: *IFileDialogCustomize,
            dwIDCtl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogControlEvents_OnItemSelected(self: *const T, pfdc: *IFileDialogCustomize, dwIDCtl: u32, dwIDItem: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogControlEvents.VTable, self.vtable).OnItemSelected(@ptrCast(*const IFileDialogControlEvents, self), pfdc, dwIDCtl, dwIDItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogControlEvents_OnButtonClicked(self: *const T, pfdc: *IFileDialogCustomize, dwIDCtl: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogControlEvents.VTable, self.vtable).OnButtonClicked(@ptrCast(*const IFileDialogControlEvents, self), pfdc, dwIDCtl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogControlEvents_OnCheckButtonToggled(self: *const T, pfdc: *IFileDialogCustomize, dwIDCtl: u32, bChecked: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogControlEvents.VTable, self.vtable).OnCheckButtonToggled(@ptrCast(*const IFileDialogControlEvents, self), pfdc, dwIDCtl, bChecked);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialogControlEvents_OnControlActivating(self: *const T, pfdc: *IFileDialogCustomize, dwIDCtl: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialogControlEvents.VTable, self.vtable).OnControlActivating(@ptrCast(*const IFileDialogControlEvents, self), pfdc, dwIDCtl);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFileDialog2_Value = @import("../zig.zig").Guid.initString("61744FC7-85B5-4791-A9B0-272276309B13");
pub const IID_IFileDialog2 = &IID_IFileDialog2_Value;
pub const IFileDialog2 = extern struct {
    pub const VTable = extern struct {
        base: IFileDialog.VTable,
        SetCancelButtonLabel: fn(
            self: *const IFileDialog2,
            pszLabel: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNavigationRoot: fn(
            self: *const IFileDialog2,
            psi: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IFileDialog.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog2_SetCancelButtonLabel(self: *const T, pszLabel: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog2.VTable, self.vtable).SetCancelButtonLabel(@ptrCast(*const IFileDialog2, self), pszLabel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileDialog2_SetNavigationRoot(self: *const T, psi: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileDialog2.VTable, self.vtable).SetNavigationRoot(@ptrCast(*const IFileDialog2, self), psi);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IApplicationAssociationRegistrationUI_Value = @import("../zig.zig").Guid.initString("1F76A169-F994-40AC-8FC8-0959E8874710");
pub const IID_IApplicationAssociationRegistrationUI = &IID_IApplicationAssociationRegistrationUI_Value;
pub const IApplicationAssociationRegistrationUI = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LaunchAdvancedAssociationUI: fn(
            self: *const IApplicationAssociationRegistrationUI,
            pszAppRegistryName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IApplicationAssociationRegistrationUI_LaunchAdvancedAssociationUI(self: *const T, pszAppRegistryName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IApplicationAssociationRegistrationUI.VTable, self.vtable).LaunchAdvancedAssociationUI(@ptrCast(*const IApplicationAssociationRegistrationUI, self), pszAppRegistryName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellRunDll_Value = @import("../zig.zig").Guid.initString("FCE4BDE0-4B68-4B80-8E9C-7426315A7388");
pub const IID_IShellRunDll = &IID_IShellRunDll_Value;
pub const IShellRunDll = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Run: fn(
            self: *const IShellRunDll,
            pszArgs: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellRunDll_Run(self: *const T, pszArgs: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellRunDll.VTable, self.vtable).Run(@ptrCast(*const IShellRunDll, self), pszArgs);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPreviousVersionsInfo_Value = @import("../zig.zig").Guid.initString("76E54780-AD74-48E3-A695-3BA9A0AFF10D");
pub const IID_IPreviousVersionsInfo = &IID_IPreviousVersionsInfo_Value;
pub const IPreviousVersionsInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AreSnapshotsAvailable: fn(
            self: *const IPreviousVersionsInfo,
            pszPath: [*:0]const u16,
            fOkToBeSlow: BOOL,
            pfAvailable: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPreviousVersionsInfo_AreSnapshotsAvailable(self: *const T, pszPath: [*:0]const u16, fOkToBeSlow: BOOL, pfAvailable: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPreviousVersionsInfo.VTable, self.vtable).AreSnapshotsAvailable(@ptrCast(*const IPreviousVersionsInfo, self), pszPath, fOkToBeSlow, pfAvailable);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUseToBrowseItem_Value = @import("../zig.zig").Guid.initString("05EDDA5C-98A3-4717-8ADB-C5E7DA991EB1");
pub const IID_IUseToBrowseItem = &IID_IUseToBrowseItem_Value;
pub const IUseToBrowseItem = extern struct {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IRelatedItem.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const NSTCSTYLE2 = extern enum(i32) {
    NSTCS2_DEFAULT = 0,
    NSTCS2_INTERRUPTNOTIFICATIONS = 1,
    NSTCS2_SHOWNULLSPACEMENU = 2,
    NSTCS2_DISPLAYPADDING = 4,
    NSTCS2_DISPLAYPINNEDONLY = 8,
    NTSCS2_NOSINGLETONAUTOEXPAND = 16,
    NTSCS2_NEVERINSERTNONENUMERATED = 32,
};
pub const NSTCS2_DEFAULT = NSTCSTYLE2.NSTCS2_DEFAULT;
pub const NSTCS2_INTERRUPTNOTIFICATIONS = NSTCSTYLE2.NSTCS2_INTERRUPTNOTIFICATIONS;
pub const NSTCS2_SHOWNULLSPACEMENU = NSTCSTYLE2.NSTCS2_SHOWNULLSPACEMENU;
pub const NSTCS2_DISPLAYPADDING = NSTCSTYLE2.NSTCS2_DISPLAYPADDING;
pub const NSTCS2_DISPLAYPINNEDONLY = NSTCSTYLE2.NSTCS2_DISPLAYPINNEDONLY;
pub const NTSCS2_NOSINGLETONAUTOEXPAND = NSTCSTYLE2.NTSCS2_NOSINGLETONAUTOEXPAND;
pub const NTSCS2_NEVERINSERTNONENUMERATED = NSTCSTYLE2.NTSCS2_NEVERINSERTNONENUMERATED;

const IID_INameSpaceTreeControl2_Value = @import("../zig.zig").Guid.initString("7CC7AED8-290E-49BC-8945-C1401CC9306C");
pub const IID_INameSpaceTreeControl2 = &IID_INameSpaceTreeControl2_Value;
pub const INameSpaceTreeControl2 = extern struct {
    pub const VTable = extern struct {
        base: INameSpaceTreeControl.VTable,
        SetControlStyle: fn(
            self: *const INameSpaceTreeControl2,
            nstcsMask: u32,
            nstcsStyle: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetControlStyle: fn(
            self: *const INameSpaceTreeControl2,
            nstcsMask: u32,
            pnstcsStyle: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetControlStyle2: fn(
            self: *const INameSpaceTreeControl2,
            nstcsMask: NSTCSTYLE2,
            nstcsStyle: NSTCSTYLE2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetControlStyle2: fn(
            self: *const INameSpaceTreeControl2,
            nstcsMask: NSTCSTYLE2,
            pnstcsStyle: *NSTCSTYLE2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace INameSpaceTreeControl.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl2_SetControlStyle(self: *const T, nstcsMask: u32, nstcsStyle: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl2.VTable, self.vtable).SetControlStyle(@ptrCast(*const INameSpaceTreeControl2, self), nstcsMask, nstcsStyle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl2_GetControlStyle(self: *const T, nstcsMask: u32, pnstcsStyle: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl2.VTable, self.vtable).GetControlStyle(@ptrCast(*const INameSpaceTreeControl2, self), nstcsMask, pnstcsStyle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl2_SetControlStyle2(self: *const T, nstcsMask: NSTCSTYLE2, nstcsStyle: NSTCSTYLE2) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl2.VTable, self.vtable).SetControlStyle2(@ptrCast(*const INameSpaceTreeControl2, self), nstcsMask, nstcsStyle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControl2_GetControlStyle2(self: *const T, nstcsMask: NSTCSTYLE2, pnstcsStyle: *NSTCSTYLE2) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControl2.VTable, self.vtable).GetControlStyle2(@ptrCast(*const INameSpaceTreeControl2, self), nstcsMask, pnstcsStyle);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _NSTCEHITTEST = extern enum(i32) {
    NSTCEHT_NOWHERE = 1,
    NSTCEHT_ONITEMICON = 2,
    NSTCEHT_ONITEMLABEL = 4,
    NSTCEHT_ONITEMINDENT = 8,
    NSTCEHT_ONITEMBUTTON = 16,
    NSTCEHT_ONITEMRIGHT = 32,
    NSTCEHT_ONITEMSTATEICON = 64,
    NSTCEHT_ONITEM = 70,
    NSTCEHT_ONITEMTABBUTTON = 4096,
};
pub const NSTCEHT_NOWHERE = _NSTCEHITTEST.NSTCEHT_NOWHERE;
pub const NSTCEHT_ONITEMICON = _NSTCEHITTEST.NSTCEHT_ONITEMICON;
pub const NSTCEHT_ONITEMLABEL = _NSTCEHITTEST.NSTCEHT_ONITEMLABEL;
pub const NSTCEHT_ONITEMINDENT = _NSTCEHITTEST.NSTCEHT_ONITEMINDENT;
pub const NSTCEHT_ONITEMBUTTON = _NSTCEHITTEST.NSTCEHT_ONITEMBUTTON;
pub const NSTCEHT_ONITEMRIGHT = _NSTCEHITTEST.NSTCEHT_ONITEMRIGHT;
pub const NSTCEHT_ONITEMSTATEICON = _NSTCEHITTEST.NSTCEHT_ONITEMSTATEICON;
pub const NSTCEHT_ONITEM = _NSTCEHITTEST.NSTCEHT_ONITEM;
pub const NSTCEHT_ONITEMTABBUTTON = _NSTCEHITTEST.NSTCEHT_ONITEMTABBUTTON;

pub const _NSTCECLICKTYPE = extern enum(i32) {
    NSTCECT_LBUTTON = 1,
    NSTCECT_MBUTTON = 2,
    NSTCECT_RBUTTON = 3,
    NSTCECT_BUTTON = 3,
    NSTCECT_DBLCLICK = 4,
};
pub const NSTCECT_LBUTTON = _NSTCECLICKTYPE.NSTCECT_LBUTTON;
pub const NSTCECT_MBUTTON = _NSTCECLICKTYPE.NSTCECT_MBUTTON;
pub const NSTCECT_RBUTTON = _NSTCECLICKTYPE.NSTCECT_RBUTTON;
pub const NSTCECT_BUTTON = _NSTCECLICKTYPE.NSTCECT_BUTTON;
pub const NSTCECT_DBLCLICK = _NSTCECLICKTYPE.NSTCECT_DBLCLICK;

const IID_INameSpaceTreeControlEvents_Value = @import("../zig.zig").Guid.initString("93D77985-B3D8-4484-8318-672CDDA002CE");
pub const IID_INameSpaceTreeControlEvents = &IID_INameSpaceTreeControlEvents_Value;
pub const INameSpaceTreeControlEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnItemClick: fn(
            self: *const INameSpaceTreeControlEvents,
            psi: *IShellItem,
            nstceHitTest: u32,
            nstceClickType: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnPropertyItemCommit: fn(
            self: *const INameSpaceTreeControlEvents,
            psi: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnItemStateChanging: fn(
            self: *const INameSpaceTreeControlEvents,
            psi: *IShellItem,
            nstcisMask: u32,
            nstcisState: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnItemStateChanged: fn(
            self: *const INameSpaceTreeControlEvents,
            psi: *IShellItem,
            nstcisMask: u32,
            nstcisState: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSelectionChanged: fn(
            self: *const INameSpaceTreeControlEvents,
            psiaSelection: *IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnKeyboardInput: fn(
            self: *const INameSpaceTreeControlEvents,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnBeforeExpand: fn(
            self: *const INameSpaceTreeControlEvents,
            psi: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAfterExpand: fn(
            self: *const INameSpaceTreeControlEvents,
            psi: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnBeginLabelEdit: fn(
            self: *const INameSpaceTreeControlEvents,
            psi: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnEndLabelEdit: fn(
            self: *const INameSpaceTreeControlEvents,
            psi: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnGetToolTip: fn(
            self: *const INameSpaceTreeControlEvents,
            psi: *IShellItem,
            pszTip: [*:0]u16,
            cchTip: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnBeforeItemDelete: fn(
            self: *const INameSpaceTreeControlEvents,
            psi: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnItemAdded: fn(
            self: *const INameSpaceTreeControlEvents,
            psi: *IShellItem,
            fIsRoot: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnItemDeleted: fn(
            self: *const INameSpaceTreeControlEvents,
            psi: *IShellItem,
            fIsRoot: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnBeforeContextMenu: fn(
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAfterContextMenu: fn(
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            pcmIn: *IContextMenu,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnBeforeStateImageChange: fn(
            self: *const INameSpaceTreeControlEvents,
            psi: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnGetDefaultIconIndex: fn(
            self: *const INameSpaceTreeControlEvents,
            psi: *IShellItem,
            piDefaultIcon: *i32,
            piOpenIcon: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlEvents_OnItemClick(self: *const T, psi: *IShellItem, nstceHitTest: u32, nstceClickType: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlEvents.VTable, self.vtable).OnItemClick(@ptrCast(*const INameSpaceTreeControlEvents, self), psi, nstceHitTest, nstceClickType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlEvents_OnPropertyItemCommit(self: *const T, psi: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlEvents.VTable, self.vtable).OnPropertyItemCommit(@ptrCast(*const INameSpaceTreeControlEvents, self), psi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlEvents_OnItemStateChanging(self: *const T, psi: *IShellItem, nstcisMask: u32, nstcisState: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlEvents.VTable, self.vtable).OnItemStateChanging(@ptrCast(*const INameSpaceTreeControlEvents, self), psi, nstcisMask, nstcisState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlEvents_OnItemStateChanged(self: *const T, psi: *IShellItem, nstcisMask: u32, nstcisState: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlEvents.VTable, self.vtable).OnItemStateChanged(@ptrCast(*const INameSpaceTreeControlEvents, self), psi, nstcisMask, nstcisState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlEvents_OnSelectionChanged(self: *const T, psiaSelection: *IShellItemArray) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlEvents.VTable, self.vtable).OnSelectionChanged(@ptrCast(*const INameSpaceTreeControlEvents, self), psiaSelection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlEvents_OnKeyboardInput(self: *const T, uMsg: u32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlEvents.VTable, self.vtable).OnKeyboardInput(@ptrCast(*const INameSpaceTreeControlEvents, self), uMsg, wParam, lParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlEvents_OnBeforeExpand(self: *const T, psi: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlEvents.VTable, self.vtable).OnBeforeExpand(@ptrCast(*const INameSpaceTreeControlEvents, self), psi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlEvents_OnAfterExpand(self: *const T, psi: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlEvents.VTable, self.vtable).OnAfterExpand(@ptrCast(*const INameSpaceTreeControlEvents, self), psi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlEvents_OnBeginLabelEdit(self: *const T, psi: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlEvents.VTable, self.vtable).OnBeginLabelEdit(@ptrCast(*const INameSpaceTreeControlEvents, self), psi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlEvents_OnEndLabelEdit(self: *const T, psi: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlEvents.VTable, self.vtable).OnEndLabelEdit(@ptrCast(*const INameSpaceTreeControlEvents, self), psi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlEvents_OnGetToolTip(self: *const T, psi: *IShellItem, pszTip: [*:0]u16, cchTip: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlEvents.VTable, self.vtable).OnGetToolTip(@ptrCast(*const INameSpaceTreeControlEvents, self), psi, pszTip, cchTip);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlEvents_OnBeforeItemDelete(self: *const T, psi: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlEvents.VTable, self.vtable).OnBeforeItemDelete(@ptrCast(*const INameSpaceTreeControlEvents, self), psi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlEvents_OnItemAdded(self: *const T, psi: *IShellItem, fIsRoot: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlEvents.VTable, self.vtable).OnItemAdded(@ptrCast(*const INameSpaceTreeControlEvents, self), psi, fIsRoot);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlEvents_OnItemDeleted(self: *const T, psi: *IShellItem, fIsRoot: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlEvents.VTable, self.vtable).OnItemDeleted(@ptrCast(*const INameSpaceTreeControlEvents, self), psi, fIsRoot);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlEvents_OnBeforeContextMenu(self: *const T, psi: ?*IShellItem, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlEvents.VTable, self.vtable).OnBeforeContextMenu(@ptrCast(*const INameSpaceTreeControlEvents, self), psi, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlEvents_OnAfterContextMenu(self: *const T, psi: ?*IShellItem, pcmIn: *IContextMenu, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlEvents.VTable, self.vtable).OnAfterContextMenu(@ptrCast(*const INameSpaceTreeControlEvents, self), psi, pcmIn, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlEvents_OnBeforeStateImageChange(self: *const T, psi: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlEvents.VTable, self.vtable).OnBeforeStateImageChange(@ptrCast(*const INameSpaceTreeControlEvents, self), psi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlEvents_OnGetDefaultIconIndex(self: *const T, psi: *IShellItem, piDefaultIcon: *i32, piOpenIcon: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlEvents.VTable, self.vtable).OnGetDefaultIconIndex(@ptrCast(*const INameSpaceTreeControlEvents, self), psi, piDefaultIcon, piOpenIcon);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_INameSpaceTreeControlDropHandler_Value = @import("../zig.zig").Guid.initString("F9C665D6-C2F2-4C19-BF33-8322D7352F51");
pub const IID_INameSpaceTreeControlDropHandler = &IID_INameSpaceTreeControlDropHandler_Value;
pub const INameSpaceTreeControlDropHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnDragEnter: fn(
            self: *const INameSpaceTreeControlDropHandler,
            psiOver: ?*IShellItem,
            psiaData: *IShellItemArray,
            fOutsideSource: BOOL,
            grfKeyState: u32,
            pdwEffect: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDragOver: fn(
            self: *const INameSpaceTreeControlDropHandler,
            psiOver: ?*IShellItem,
            psiaData: *IShellItemArray,
            grfKeyState: u32,
            pdwEffect: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDragPosition: fn(
            self: *const INameSpaceTreeControlDropHandler,
            psiOver: ?*IShellItem,
            psiaData: *IShellItemArray,
            iNewPosition: i32,
            iOldPosition: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDrop: fn(
            self: *const INameSpaceTreeControlDropHandler,
            psiOver: ?*IShellItem,
            psiaData: *IShellItemArray,
            iPosition: i32,
            grfKeyState: u32,
            pdwEffect: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDropPosition: fn(
            self: *const INameSpaceTreeControlDropHandler,
            psiOver: ?*IShellItem,
            psiaData: *IShellItemArray,
            iNewPosition: i32,
            iOldPosition: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDragLeave: fn(
            self: *const INameSpaceTreeControlDropHandler,
            psiOver: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlDropHandler_OnDragEnter(self: *const T, psiOver: ?*IShellItem, psiaData: *IShellItemArray, fOutsideSource: BOOL, grfKeyState: u32, pdwEffect: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlDropHandler.VTable, self.vtable).OnDragEnter(@ptrCast(*const INameSpaceTreeControlDropHandler, self), psiOver, psiaData, fOutsideSource, grfKeyState, pdwEffect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlDropHandler_OnDragOver(self: *const T, psiOver: ?*IShellItem, psiaData: *IShellItemArray, grfKeyState: u32, pdwEffect: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlDropHandler.VTable, self.vtable).OnDragOver(@ptrCast(*const INameSpaceTreeControlDropHandler, self), psiOver, psiaData, grfKeyState, pdwEffect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlDropHandler_OnDragPosition(self: *const T, psiOver: ?*IShellItem, psiaData: *IShellItemArray, iNewPosition: i32, iOldPosition: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlDropHandler.VTable, self.vtable).OnDragPosition(@ptrCast(*const INameSpaceTreeControlDropHandler, self), psiOver, psiaData, iNewPosition, iOldPosition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlDropHandler_OnDrop(self: *const T, psiOver: ?*IShellItem, psiaData: *IShellItemArray, iPosition: i32, grfKeyState: u32, pdwEffect: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlDropHandler.VTable, self.vtable).OnDrop(@ptrCast(*const INameSpaceTreeControlDropHandler, self), psiOver, psiaData, iPosition, grfKeyState, pdwEffect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlDropHandler_OnDropPosition(self: *const T, psiOver: ?*IShellItem, psiaData: *IShellItemArray, iNewPosition: i32, iOldPosition: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlDropHandler.VTable, self.vtable).OnDropPosition(@ptrCast(*const INameSpaceTreeControlDropHandler, self), psiOver, psiaData, iNewPosition, iOldPosition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlDropHandler_OnDragLeave(self: *const T, psiOver: ?*IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlDropHandler.VTable, self.vtable).OnDragLeave(@ptrCast(*const INameSpaceTreeControlDropHandler, self), psiOver);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_INameSpaceTreeAccessible_Value = @import("../zig.zig").Guid.initString("71F312DE-43ED-4190-8477-E9536B82350B");
pub const IID_INameSpaceTreeAccessible = &IID_INameSpaceTreeAccessible_Value;
pub const INameSpaceTreeAccessible = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnGetDefaultAccessibilityAction: fn(
            self: *const INameSpaceTreeAccessible,
            psi: *IShellItem,
            pbstrDefaultAction: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDoDefaultAccessibilityAction: fn(
            self: *const INameSpaceTreeAccessible,
            psi: *IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnGetAccessibilityRole: fn(
            self: *const INameSpaceTreeAccessible,
            psi: *IShellItem,
            pvarRole: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeAccessible_OnGetDefaultAccessibilityAction(self: *const T, psi: *IShellItem, pbstrDefaultAction: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeAccessible.VTable, self.vtable).OnGetDefaultAccessibilityAction(@ptrCast(*const INameSpaceTreeAccessible, self), psi, pbstrDefaultAction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeAccessible_OnDoDefaultAccessibilityAction(self: *const T, psi: *IShellItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeAccessible.VTable, self.vtable).OnDoDefaultAccessibilityAction(@ptrCast(*const INameSpaceTreeAccessible, self), psi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeAccessible_OnGetAccessibilityRole(self: *const T, psi: *IShellItem, pvarRole: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeAccessible.VTable, self.vtable).OnGetAccessibilityRole(@ptrCast(*const INameSpaceTreeAccessible, self), psi, pvarRole);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const NSTCCUSTOMDRAW = extern struct {
    psi: *IShellItem,
    uItemState: u32,
    nstcis: u32,
    pszText: [*:0]const u16,
    iImage: i32,
    himl: HIMAGELIST,
    iLevel: i32,
    iIndent: i32,
};

const IID_INameSpaceTreeControlCustomDraw_Value = @import("../zig.zig").Guid.initString("2D3BA758-33EE-42D5-BB7B-5F3431D86C78");
pub const IID_INameSpaceTreeControlCustomDraw = &IID_INameSpaceTreeControlCustomDraw_Value;
pub const INameSpaceTreeControlCustomDraw = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PrePaint: fn(
            self: *const INameSpaceTreeControlCustomDraw,
            hdc: HDC,
            prc: *RECT,
            plres: *LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostPaint: fn(
            self: *const INameSpaceTreeControlCustomDraw,
            hdc: HDC,
            prc: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemPrePaint: fn(
            self: *const INameSpaceTreeControlCustomDraw,
            hdc: HDC,
            prc: *RECT,
            pnstccdItem: *NSTCCUSTOMDRAW,
            pclrText: *u32,
            pclrTextBk: *u32,
            plres: *LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemPostPaint: fn(
            self: *const INameSpaceTreeControlCustomDraw,
            hdc: HDC,
            prc: *RECT,
            pnstccdItem: *NSTCCUSTOMDRAW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlCustomDraw_PrePaint(self: *const T, hdc: HDC, prc: *RECT, plres: *LRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlCustomDraw.VTable, self.vtable).PrePaint(@ptrCast(*const INameSpaceTreeControlCustomDraw, self), hdc, prc, plres);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlCustomDraw_PostPaint(self: *const T, hdc: HDC, prc: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlCustomDraw.VTable, self.vtable).PostPaint(@ptrCast(*const INameSpaceTreeControlCustomDraw, self), hdc, prc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlCustomDraw_ItemPrePaint(self: *const T, hdc: HDC, prc: *RECT, pnstccdItem: *NSTCCUSTOMDRAW, pclrText: *u32, pclrTextBk: *u32, plres: *LRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlCustomDraw.VTable, self.vtable).ItemPrePaint(@ptrCast(*const INameSpaceTreeControlCustomDraw, self), hdc, prc, pnstccdItem, pclrText, pclrTextBk, plres);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INameSpaceTreeControlCustomDraw_ItemPostPaint(self: *const T, hdc: HDC, prc: *RECT, pnstccdItem: *NSTCCUSTOMDRAW) callconv(.Inline) HRESULT {
            return @ptrCast(*const INameSpaceTreeControlCustomDraw.VTable, self.vtable).ItemPostPaint(@ptrCast(*const INameSpaceTreeControlCustomDraw, self), hdc, prc, pnstccdItem);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITrayDeskBand_Value = @import("../zig.zig").Guid.initString("6D67E846-5B9C-4DB8-9CBC-DDE12F4254F1");
pub const IID_ITrayDeskBand = &IID_ITrayDeskBand_Value;
pub const ITrayDeskBand = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ShowDeskBand: fn(
            self: *const ITrayDeskBand,
            clsid: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HideDeskBand: fn(
            self: *const ITrayDeskBand,
            clsid: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDeskBandShown: fn(
            self: *const ITrayDeskBand,
            clsid: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeskBandRegistrationChanged: fn(
            self: *const ITrayDeskBand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITrayDeskBand_ShowDeskBand(self: *const T, clsid: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITrayDeskBand.VTable, self.vtable).ShowDeskBand(@ptrCast(*const ITrayDeskBand, self), clsid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITrayDeskBand_HideDeskBand(self: *const T, clsid: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITrayDeskBand.VTable, self.vtable).HideDeskBand(@ptrCast(*const ITrayDeskBand, self), clsid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITrayDeskBand_IsDeskBandShown(self: *const T, clsid: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITrayDeskBand.VTable, self.vtable).IsDeskBandShown(@ptrCast(*const ITrayDeskBand, self), clsid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITrayDeskBand_DeskBandRegistrationChanged(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITrayDeskBand.VTable, self.vtable).DeskBandRegistrationChanged(@ptrCast(*const ITrayDeskBand, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IBandHost_Value = @import("../zig.zig").Guid.initString("B9075C7C-D48E-403F-AB99-D6C77A1084AC");
pub const IID_IBandHost = &IID_IBandHost_Value;
pub const IBandHost = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateBand: fn(
            self: *const IBandHost,
            rclsidBand: *const Guid,
            fAvailable: BOOL,
            fVisible: BOOL,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBandAvailability: fn(
            self: *const IBandHost,
            rclsidBand: *const Guid,
            fAvailable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyBand: fn(
            self: *const IBandHost,
            rclsidBand: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBandHost_CreateBand(self: *const T, rclsidBand: *const Guid, fAvailable: BOOL, fVisible: BOOL, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBandHost.VTable, self.vtable).CreateBand(@ptrCast(*const IBandHost, self), rclsidBand, fAvailable, fVisible, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBandHost_SetBandAvailability(self: *const T, rclsidBand: *const Guid, fAvailable: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBandHost.VTable, self.vtable).SetBandAvailability(@ptrCast(*const IBandHost, self), rclsidBand, fAvailable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBandHost_DestroyBand(self: *const T, rclsidBand: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBandHost.VTable, self.vtable).DestroyBand(@ptrCast(*const IBandHost, self), rclsidBand);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComputerInfoChangeNotify_Value = @import("../zig.zig").Guid.initString("0DF60D92-6818-46D6-B358-D66170DDE466");
pub const IID_IComputerInfoChangeNotify = &IID_IComputerInfoChangeNotify_Value;
pub const IComputerInfoChangeNotify = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ComputerInfoChanged: fn(
            self: *const IComputerInfoChangeNotify,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComputerInfoChangeNotify_ComputerInfoChanged(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComputerInfoChangeNotify.VTable, self.vtable).ComputerInfoChanged(@ptrCast(*const IComputerInfoChangeNotify, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDesktopGadget_Value = @import("../zig.zig").Guid.initString("C1646BC4-F298-4F91-A204-EB2DD1709D1A");
pub const IID_IDesktopGadget = &IID_IDesktopGadget_Value;
pub const IDesktopGadget = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RunGadget: fn(
            self: *const IDesktopGadget,
            gadgetPath: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDesktopGadget_RunGadget(self: *const T, gadgetPath: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDesktopGadget.VTable, self.vtable).RunGadget(@ptrCast(*const IDesktopGadget, self), gadgetPath);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const UNDOCK_REASON = extern enum(i32) {
    UR_RESOLUTION_CHANGE = 0,
    UR_MONITOR_DISCONNECT = 1,
};
pub const UR_RESOLUTION_CHANGE = UNDOCK_REASON.UR_RESOLUTION_CHANGE;
pub const UR_MONITOR_DISCONNECT = UNDOCK_REASON.UR_MONITOR_DISCONNECT;

const IID_IStorageProviderBanners_Value = @import("../zig.zig").Guid.initString("5EFB46D7-47C0-4B68-ACDA-DED47C90EC91");
pub const IID_IStorageProviderBanners = &IID_IStorageProviderBanners_Value;
pub const IStorageProviderBanners = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBanner: fn(
            self: *const IStorageProviderBanners,
            providerIdentity: [*:0]const u16,
            subscriptionId: [*:0]const u16,
            contentId: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearBanner: fn(
            self: *const IStorageProviderBanners,
            providerIdentity: [*:0]const u16,
            subscriptionId: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearAllBanners: fn(
            self: *const IStorageProviderBanners,
            providerIdentity: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBanner: fn(
            self: *const IStorageProviderBanners,
            providerIdentity: [*:0]const u16,
            subscriptionId: [*:0]const u16,
            contentId: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorageProviderBanners_SetBanner(self: *const T, providerIdentity: [*:0]const u16, subscriptionId: [*:0]const u16, contentId: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorageProviderBanners.VTable, self.vtable).SetBanner(@ptrCast(*const IStorageProviderBanners, self), providerIdentity, subscriptionId, contentId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorageProviderBanners_ClearBanner(self: *const T, providerIdentity: [*:0]const u16, subscriptionId: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorageProviderBanners.VTable, self.vtable).ClearBanner(@ptrCast(*const IStorageProviderBanners, self), providerIdentity, subscriptionId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorageProviderBanners_ClearAllBanners(self: *const T, providerIdentity: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorageProviderBanners.VTable, self.vtable).ClearAllBanners(@ptrCast(*const IStorageProviderBanners, self), providerIdentity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorageProviderBanners_GetBanner(self: *const T, providerIdentity: [*:0]const u16, subscriptionId: [*:0]const u16, contentId: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorageProviderBanners.VTable, self.vtable).GetBanner(@ptrCast(*const IStorageProviderBanners, self), providerIdentity, subscriptionId, contentId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_ShellFolderViewOC_Value = @import("../zig.zig").Guid.initString("9BA05971-F6A8-11CF-A442-00A0C90A8F39");
pub const CLSID_ShellFolderViewOC = &CLSID_ShellFolderViewOC_Value;

const CLSID_ShellFolderItem_Value = @import("../zig.zig").Guid.initString("2FE352EA-FD1F-11D2-B1F4-00C04F8EEB3E");
pub const CLSID_ShellFolderItem = &CLSID_ShellFolderItem_Value;

const CLSID_ShellLinkObject_Value = @import("../zig.zig").Guid.initString("11219420-1768-11D1-95BE-00609797EA4F");
pub const CLSID_ShellLinkObject = &CLSID_ShellLinkObject_Value;

const CLSID_ShellFolderView_Value = @import("../zig.zig").Guid.initString("62112AA1-EBE4-11CF-A5FB-0020AFE7292D");
pub const CLSID_ShellFolderView = &CLSID_ShellFolderView_Value;

const CLSID_Shell_Value = @import("../zig.zig").Guid.initString("13709620-C279-11CE-A49E-444553540000");
pub const CLSID_Shell = &CLSID_Shell_Value;

const CLSID_ShellDispatchInproc_Value = @import("../zig.zig").Guid.initString("0A89A860-D7B1-11CE-8350-444553540000");
pub const CLSID_ShellDispatchInproc = &CLSID_ShellDispatchInproc_Value;

const CLSID_FileSearchBand_Value = @import("../zig.zig").Guid.initString("C4EE31F3-4768-11D2-BE5C-00A0C9A83DA1");
pub const CLSID_FileSearchBand = &CLSID_FileSearchBand_Value;

pub const OfflineFolderStatus = extern enum(i32) {
    OFS_INACTIVE = -1,
    OFS_ONLINE = 0,
    OFS_OFFLINE = 1,
    OFS_SERVERBACK = 2,
    OFS_DIRTYCACHE = 3,
};
pub const OFS_INACTIVE = OfflineFolderStatus.OFS_INACTIVE;
pub const OFS_ONLINE = OfflineFolderStatus.OFS_ONLINE;
pub const OFS_OFFLINE = OfflineFolderStatus.OFS_OFFLINE;
pub const OFS_SERVERBACK = OfflineFolderStatus.OFS_SERVERBACK;
pub const OFS_DIRTYCACHE = OfflineFolderStatus.OFS_DIRTYCACHE;

pub const ShellFolderViewOptions = extern enum(i32) {
    SFVVO_SHOWALLOBJECTS = 1,
    SFVVO_SHOWEXTENSIONS = 2,
    SFVVO_SHOWCOMPCOLOR = 8,
    SFVVO_SHOWSYSFILES = 32,
    SFVVO_WIN95CLASSIC = 64,
    SFVVO_DOUBLECLICKINWEBVIEW = 128,
    SFVVO_DESKTOPHTML = 512,
};
pub const SFVVO_SHOWALLOBJECTS = ShellFolderViewOptions.SFVVO_SHOWALLOBJECTS;
pub const SFVVO_SHOWEXTENSIONS = ShellFolderViewOptions.SFVVO_SHOWEXTENSIONS;
pub const SFVVO_SHOWCOMPCOLOR = ShellFolderViewOptions.SFVVO_SHOWCOMPCOLOR;
pub const SFVVO_SHOWSYSFILES = ShellFolderViewOptions.SFVVO_SHOWSYSFILES;
pub const SFVVO_WIN95CLASSIC = ShellFolderViewOptions.SFVVO_WIN95CLASSIC;
pub const SFVVO_DOUBLECLICKINWEBVIEW = ShellFolderViewOptions.SFVVO_DOUBLECLICKINWEBVIEW;
pub const SFVVO_DESKTOPHTML = ShellFolderViewOptions.SFVVO_DESKTOPHTML;

pub const ShellSpecialFolderConstants = extern enum(i32) {
    ssfDESKTOP = 0,
    ssfPROGRAMS = 2,
    ssfCONTROLS = 3,
    ssfPRINTERS = 4,
    ssfPERSONAL = 5,
    ssfFAVORITES = 6,
    ssfSTARTUP = 7,
    ssfRECENT = 8,
    ssfSENDTO = 9,
    ssfBITBUCKET = 10,
    ssfSTARTMENU = 11,
    ssfDESKTOPDIRECTORY = 16,
    ssfDRIVES = 17,
    ssfNETWORK = 18,
    ssfNETHOOD = 19,
    ssfFONTS = 20,
    ssfTEMPLATES = 21,
    ssfCOMMONSTARTMENU = 22,
    ssfCOMMONPROGRAMS = 23,
    ssfCOMMONSTARTUP = 24,
    ssfCOMMONDESKTOPDIR = 25,
    ssfAPPDATA = 26,
    ssfPRINTHOOD = 27,
    ssfLOCALAPPDATA = 28,
    ssfALTSTARTUP = 29,
    ssfCOMMONALTSTARTUP = 30,
    ssfCOMMONFAVORITES = 31,
    ssfINTERNETCACHE = 32,
    ssfCOOKIES = 33,
    ssfHISTORY = 34,
    ssfCOMMONAPPDATA = 35,
    ssfWINDOWS = 36,
    ssfSYSTEM = 37,
    ssfPROGRAMFILES = 38,
    ssfMYPICTURES = 39,
    ssfPROFILE = 40,
    ssfSYSTEMx86 = 41,
    ssfPROGRAMFILESx86 = 48,
};
pub const ssfDESKTOP = ShellSpecialFolderConstants.ssfDESKTOP;
pub const ssfPROGRAMS = ShellSpecialFolderConstants.ssfPROGRAMS;
pub const ssfCONTROLS = ShellSpecialFolderConstants.ssfCONTROLS;
pub const ssfPRINTERS = ShellSpecialFolderConstants.ssfPRINTERS;
pub const ssfPERSONAL = ShellSpecialFolderConstants.ssfPERSONAL;
pub const ssfFAVORITES = ShellSpecialFolderConstants.ssfFAVORITES;
pub const ssfSTARTUP = ShellSpecialFolderConstants.ssfSTARTUP;
pub const ssfRECENT = ShellSpecialFolderConstants.ssfRECENT;
pub const ssfSENDTO = ShellSpecialFolderConstants.ssfSENDTO;
pub const ssfBITBUCKET = ShellSpecialFolderConstants.ssfBITBUCKET;
pub const ssfSTARTMENU = ShellSpecialFolderConstants.ssfSTARTMENU;
pub const ssfDESKTOPDIRECTORY = ShellSpecialFolderConstants.ssfDESKTOPDIRECTORY;
pub const ssfDRIVES = ShellSpecialFolderConstants.ssfDRIVES;
pub const ssfNETWORK = ShellSpecialFolderConstants.ssfNETWORK;
pub const ssfNETHOOD = ShellSpecialFolderConstants.ssfNETHOOD;
pub const ssfFONTS = ShellSpecialFolderConstants.ssfFONTS;
pub const ssfTEMPLATES = ShellSpecialFolderConstants.ssfTEMPLATES;
pub const ssfCOMMONSTARTMENU = ShellSpecialFolderConstants.ssfCOMMONSTARTMENU;
pub const ssfCOMMONPROGRAMS = ShellSpecialFolderConstants.ssfCOMMONPROGRAMS;
pub const ssfCOMMONSTARTUP = ShellSpecialFolderConstants.ssfCOMMONSTARTUP;
pub const ssfCOMMONDESKTOPDIR = ShellSpecialFolderConstants.ssfCOMMONDESKTOPDIR;
pub const ssfAPPDATA = ShellSpecialFolderConstants.ssfAPPDATA;
pub const ssfPRINTHOOD = ShellSpecialFolderConstants.ssfPRINTHOOD;
pub const ssfLOCALAPPDATA = ShellSpecialFolderConstants.ssfLOCALAPPDATA;
pub const ssfALTSTARTUP = ShellSpecialFolderConstants.ssfALTSTARTUP;
pub const ssfCOMMONALTSTARTUP = ShellSpecialFolderConstants.ssfCOMMONALTSTARTUP;
pub const ssfCOMMONFAVORITES = ShellSpecialFolderConstants.ssfCOMMONFAVORITES;
pub const ssfINTERNETCACHE = ShellSpecialFolderConstants.ssfINTERNETCACHE;
pub const ssfCOOKIES = ShellSpecialFolderConstants.ssfCOOKIES;
pub const ssfHISTORY = ShellSpecialFolderConstants.ssfHISTORY;
pub const ssfCOMMONAPPDATA = ShellSpecialFolderConstants.ssfCOMMONAPPDATA;
pub const ssfWINDOWS = ShellSpecialFolderConstants.ssfWINDOWS;
pub const ssfSYSTEM = ShellSpecialFolderConstants.ssfSYSTEM;
pub const ssfPROGRAMFILES = ShellSpecialFolderConstants.ssfPROGRAMFILES;
pub const ssfMYPICTURES = ShellSpecialFolderConstants.ssfMYPICTURES;
pub const ssfPROFILE = ShellSpecialFolderConstants.ssfPROFILE;
pub const ssfSYSTEMx86 = ShellSpecialFolderConstants.ssfSYSTEMx86;
pub const ssfPROGRAMFILESx86 = ShellSpecialFolderConstants.ssfPROGRAMFILESx86;

const IID_IFolderViewOC_Value = @import("../zig.zig").Guid.initString("9BA05970-F6A8-11CF-A442-00A0C90A8F39");
pub const IID_IFolderViewOC = &IID_IFolderViewOC_Value;
pub const IFolderViewOC = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SetFolderView: fn(
            self: *const IFolderViewOC,
            pdisp: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFolderViewOC_SetFolderView(self: *const T, pdisp: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFolderViewOC.VTable, self.vtable).SetFolderView(@ptrCast(*const IFolderViewOC, self), pdisp);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_DShellFolderViewEvents_Value = @import("../zig.zig").Guid.initString("62112AA2-EBE4-11CF-A5FB-0020AFE7292D");
pub const IID_DShellFolderViewEvents = &IID_DShellFolderViewEvents_Value;
pub const DShellFolderViewEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_DFConstraint_Value = @import("../zig.zig").Guid.initString("4A3DF050-23BD-11D2-939F-00A0C91EEDBA");
pub const IID_DFConstraint = &IID_DFConstraint_Value;
pub const DFConstraint = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Name: fn(
            self: *const DFConstraint,
            pbs: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Value: fn(
            self: *const DFConstraint,
            pv: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn DFConstraint_get_Name(self: *const T, pbs: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const DFConstraint.VTable, self.vtable).get_Name(@ptrCast(*const DFConstraint, self), pbs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn DFConstraint_get_Value(self: *const T, pv: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const DFConstraint.VTable, self.vtable).get_Value(@ptrCast(*const DFConstraint, self), pv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_FolderItem_Value = @import("../zig.zig").Guid.initString("FAC32C80-CBE4-11CE-8350-444553540000");
pub const IID_FolderItem = &IID_FolderItem_Value;
pub const FolderItem = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Application: fn(
            self: *const FolderItem,
            ppid: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Parent: fn(
            self: *const FolderItem,
            ppid: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const FolderItem,
            pbs: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Name: fn(
            self: *const FolderItem,
            bs: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Path: fn(
            self: *const FolderItem,
            pbs: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_GetLink: fn(
            self: *const FolderItem,
            ppid: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_GetFolder: fn(
            self: *const FolderItem,
            ppid: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsLink: fn(
            self: *const FolderItem,
            pb: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsFolder: fn(
            self: *const FolderItem,
            pb: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsFileSystem: fn(
            self: *const FolderItem,
            pb: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsBrowsable: fn(
            self: *const FolderItem,
            pb: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ModifyDate: fn(
            self: *const FolderItem,
            pdt: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ModifyDate: fn(
            self: *const FolderItem,
            dt: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Size: fn(
            self: *const FolderItem,
            pul: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Type: fn(
            self: *const FolderItem,
            pbs: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Verbs: fn(
            self: *const FolderItem,
            ppfic: **FolderItemVerbs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeVerb: fn(
            self: *const FolderItem,
            vVerb: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem_get_Application(self: *const T, ppid: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem.VTable, self.vtable).get_Application(@ptrCast(*const FolderItem, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem_get_Parent(self: *const T, ppid: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem.VTable, self.vtable).get_Parent(@ptrCast(*const FolderItem, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem_get_Name(self: *const T, pbs: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem.VTable, self.vtable).get_Name(@ptrCast(*const FolderItem, self), pbs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem_put_Name(self: *const T, bs: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem.VTable, self.vtable).put_Name(@ptrCast(*const FolderItem, self), bs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem_get_Path(self: *const T, pbs: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem.VTable, self.vtable).get_Path(@ptrCast(*const FolderItem, self), pbs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem_get_GetLink(self: *const T, ppid: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem.VTable, self.vtable).get_GetLink(@ptrCast(*const FolderItem, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem_get_GetFolder(self: *const T, ppid: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem.VTable, self.vtable).get_GetFolder(@ptrCast(*const FolderItem, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem_get_IsLink(self: *const T, pb: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem.VTable, self.vtable).get_IsLink(@ptrCast(*const FolderItem, self), pb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem_get_IsFolder(self: *const T, pb: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem.VTable, self.vtable).get_IsFolder(@ptrCast(*const FolderItem, self), pb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem_get_IsFileSystem(self: *const T, pb: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem.VTable, self.vtable).get_IsFileSystem(@ptrCast(*const FolderItem, self), pb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem_get_IsBrowsable(self: *const T, pb: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem.VTable, self.vtable).get_IsBrowsable(@ptrCast(*const FolderItem, self), pb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem_get_ModifyDate(self: *const T, pdt: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem.VTable, self.vtable).get_ModifyDate(@ptrCast(*const FolderItem, self), pdt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem_put_ModifyDate(self: *const T, dt: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem.VTable, self.vtable).put_ModifyDate(@ptrCast(*const FolderItem, self), dt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem_get_Size(self: *const T, pul: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem.VTable, self.vtable).get_Size(@ptrCast(*const FolderItem, self), pul);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem_get_Type(self: *const T, pbs: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem.VTable, self.vtable).get_Type(@ptrCast(*const FolderItem, self), pbs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem_Verbs(self: *const T, ppfic: **FolderItemVerbs) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem.VTable, self.vtable).Verbs(@ptrCast(*const FolderItem, self), ppfic);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem_InvokeVerb(self: *const T, vVerb: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem.VTable, self.vtable).InvokeVerb(@ptrCast(*const FolderItem, self), vVerb);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_FolderItems_Value = @import("../zig.zig").Guid.initString("744129E0-CBE5-11CE-8350-444553540000");
pub const IID_FolderItems = &IID_FolderItems_Value;
pub const FolderItems = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const FolderItems,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Application: fn(
            self: *const FolderItems,
            ppid: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Parent: fn(
            self: *const FolderItems,
            ppid: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const FolderItems,
            index: VARIANT,
            ppid: **FolderItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _NewEnum: fn(
            self: *const FolderItems,
            ppunk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItems_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItems.VTable, self.vtable).get_Count(@ptrCast(*const FolderItems, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItems_get_Application(self: *const T, ppid: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItems.VTable, self.vtable).get_Application(@ptrCast(*const FolderItems, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItems_get_Parent(self: *const T, ppid: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItems.VTable, self.vtable).get_Parent(@ptrCast(*const FolderItems, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItems_Item(self: *const T, index: VARIANT, ppid: **FolderItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItems.VTable, self.vtable).Item(@ptrCast(*const FolderItems, self), index, ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItems__NewEnum(self: *const T, ppunk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItems.VTable, self.vtable)._NewEnum(@ptrCast(*const FolderItems, self), ppunk);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_FolderItemVerb_Value = @import("../zig.zig").Guid.initString("08EC3E00-50B0-11CF-960C-0080C7F4EE85");
pub const IID_FolderItemVerb = &IID_FolderItemVerb_Value;
pub const FolderItemVerb = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Application: fn(
            self: *const FolderItemVerb,
            ppid: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Parent: fn(
            self: *const FolderItemVerb,
            ppid: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const FolderItemVerb,
            pbs: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoIt: fn(
            self: *const FolderItemVerb,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItemVerb_get_Application(self: *const T, ppid: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItemVerb.VTable, self.vtable).get_Application(@ptrCast(*const FolderItemVerb, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItemVerb_get_Parent(self: *const T, ppid: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItemVerb.VTable, self.vtable).get_Parent(@ptrCast(*const FolderItemVerb, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItemVerb_get_Name(self: *const T, pbs: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItemVerb.VTable, self.vtable).get_Name(@ptrCast(*const FolderItemVerb, self), pbs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItemVerb_DoIt(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItemVerb.VTable, self.vtable).DoIt(@ptrCast(*const FolderItemVerb, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_FolderItemVerbs_Value = @import("../zig.zig").Guid.initString("1F8352C0-50B0-11CF-960C-0080C7F4EE85");
pub const IID_FolderItemVerbs = &IID_FolderItemVerbs_Value;
pub const FolderItemVerbs = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const FolderItemVerbs,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Application: fn(
            self: *const FolderItemVerbs,
            ppid: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Parent: fn(
            self: *const FolderItemVerbs,
            ppid: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const FolderItemVerbs,
            index: VARIANT,
            ppid: **FolderItemVerb,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _NewEnum: fn(
            self: *const FolderItemVerbs,
            ppunk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItemVerbs_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItemVerbs.VTable, self.vtable).get_Count(@ptrCast(*const FolderItemVerbs, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItemVerbs_get_Application(self: *const T, ppid: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItemVerbs.VTable, self.vtable).get_Application(@ptrCast(*const FolderItemVerbs, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItemVerbs_get_Parent(self: *const T, ppid: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItemVerbs.VTable, self.vtable).get_Parent(@ptrCast(*const FolderItemVerbs, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItemVerbs_Item(self: *const T, index: VARIANT, ppid: **FolderItemVerb) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItemVerbs.VTable, self.vtable).Item(@ptrCast(*const FolderItemVerbs, self), index, ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItemVerbs__NewEnum(self: *const T, ppunk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItemVerbs.VTable, self.vtable)._NewEnum(@ptrCast(*const FolderItemVerbs, self), ppunk);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_Folder_Value = @import("../zig.zig").Guid.initString("BBCBDE60-C3FF-11CE-8350-444553540000");
pub const IID_Folder = &IID_Folder_Value;
pub const Folder = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Title: fn(
            self: *const Folder,
            pbs: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Application: fn(
            self: *const Folder,
            ppid: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Parent: fn(
            self: *const Folder,
            ppid: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ParentFolder: fn(
            self: *const Folder,
            ppsf: **Folder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Items: fn(
            self: *const Folder,
            ppid: **FolderItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ParseName: fn(
            self: *const Folder,
            bName: BSTR,
            ppid: **FolderItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NewFolder: fn(
            self: *const Folder,
            bName: BSTR,
            vOptions: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveHere: fn(
            self: *const Folder,
            vItem: VARIANT,
            vOptions: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyHere: fn(
            self: *const Folder,
            vItem: VARIANT,
            vOptions: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDetailsOf: fn(
            self: *const Folder,
            vItem: VARIANT,
            iColumn: i32,
            pbs: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn Folder_get_Title(self: *const T, pbs: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const Folder.VTable, self.vtable).get_Title(@ptrCast(*const Folder, self), pbs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn Folder_get_Application(self: *const T, ppid: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const Folder.VTable, self.vtable).get_Application(@ptrCast(*const Folder, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn Folder_get_Parent(self: *const T, ppid: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const Folder.VTable, self.vtable).get_Parent(@ptrCast(*const Folder, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn Folder_get_ParentFolder(self: *const T, ppsf: **Folder) callconv(.Inline) HRESULT {
            return @ptrCast(*const Folder.VTable, self.vtable).get_ParentFolder(@ptrCast(*const Folder, self), ppsf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn Folder_Items(self: *const T, ppid: **FolderItems) callconv(.Inline) HRESULT {
            return @ptrCast(*const Folder.VTable, self.vtable).Items(@ptrCast(*const Folder, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn Folder_ParseName(self: *const T, bName: BSTR, ppid: **FolderItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const Folder.VTable, self.vtable).ParseName(@ptrCast(*const Folder, self), bName, ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn Folder_NewFolder(self: *const T, bName: BSTR, vOptions: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const Folder.VTable, self.vtable).NewFolder(@ptrCast(*const Folder, self), bName, vOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn Folder_MoveHere(self: *const T, vItem: VARIANT, vOptions: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const Folder.VTable, self.vtable).MoveHere(@ptrCast(*const Folder, self), vItem, vOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn Folder_CopyHere(self: *const T, vItem: VARIANT, vOptions: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const Folder.VTable, self.vtable).CopyHere(@ptrCast(*const Folder, self), vItem, vOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn Folder_GetDetailsOf(self: *const T, vItem: VARIANT, iColumn: i32, pbs: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const Folder.VTable, self.vtable).GetDetailsOf(@ptrCast(*const Folder, self), vItem, iColumn, pbs);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_Folder2_Value = @import("../zig.zig").Guid.initString("F0D2D8EF-3890-11D2-BF8B-00C04FB93661");
pub const IID_Folder2 = &IID_Folder2_Value;
pub const Folder2 = extern struct {
    pub const VTable = extern struct {
        base: Folder.VTable,
        get_Self: fn(
            self: *const Folder2,
            ppfi: **FolderItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_OfflineStatus: fn(
            self: *const Folder2,
            pul: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Synchronize: fn(
            self: *const Folder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_HaveToShowWebViewBarricade: fn(
            self: *const Folder2,
            pbHaveToShowWebViewBarricade: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DismissedWebViewBarricade: fn(
            self: *const Folder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace Folder.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn Folder2_get_Self(self: *const T, ppfi: **FolderItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const Folder2.VTable, self.vtable).get_Self(@ptrCast(*const Folder2, self), ppfi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn Folder2_get_OfflineStatus(self: *const T, pul: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const Folder2.VTable, self.vtable).get_OfflineStatus(@ptrCast(*const Folder2, self), pul);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn Folder2_Synchronize(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const Folder2.VTable, self.vtable).Synchronize(@ptrCast(*const Folder2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn Folder2_get_HaveToShowWebViewBarricade(self: *const T, pbHaveToShowWebViewBarricade: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const Folder2.VTable, self.vtable).get_HaveToShowWebViewBarricade(@ptrCast(*const Folder2, self), pbHaveToShowWebViewBarricade);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn Folder2_DismissedWebViewBarricade(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const Folder2.VTable, self.vtable).DismissedWebViewBarricade(@ptrCast(*const Folder2, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_Folder3_Value = @import("../zig.zig").Guid.initString("A7AE5F64-C4D7-4D7F-9307-4D24EE54B841");
pub const IID_Folder3 = &IID_Folder3_Value;
pub const Folder3 = extern struct {
    pub const VTable = extern struct {
        base: Folder2.VTable,
        get_ShowWebViewBarricade: fn(
            self: *const Folder3,
            pbShowWebViewBarricade: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ShowWebViewBarricade: fn(
            self: *const Folder3,
            bShowWebViewBarricade: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace Folder2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn Folder3_get_ShowWebViewBarricade(self: *const T, pbShowWebViewBarricade: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const Folder3.VTable, self.vtable).get_ShowWebViewBarricade(@ptrCast(*const Folder3, self), pbShowWebViewBarricade);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn Folder3_put_ShowWebViewBarricade(self: *const T, bShowWebViewBarricade: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const Folder3.VTable, self.vtable).put_ShowWebViewBarricade(@ptrCast(*const Folder3, self), bShowWebViewBarricade);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_FolderItem2_Value = @import("../zig.zig").Guid.initString("EDC817AA-92B8-11D1-B075-00C04FC33AA5");
pub const IID_FolderItem2 = &IID_FolderItem2_Value;
pub const FolderItem2 = extern struct {
    pub const VTable = extern struct {
        base: FolderItem.VTable,
        InvokeVerbEx: fn(
            self: *const FolderItem2,
            vVerb: VARIANT,
            vArgs: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExtendedProperty: fn(
            self: *const FolderItem2,
            bstrPropName: BSTR,
            pvRet: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace FolderItem.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem2_InvokeVerbEx(self: *const T, vVerb: VARIANT, vArgs: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem2.VTable, self.vtable).InvokeVerbEx(@ptrCast(*const FolderItem2, self), vVerb, vArgs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItem2_ExtendedProperty(self: *const T, bstrPropName: BSTR, pvRet: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItem2.VTable, self.vtable).ExtendedProperty(@ptrCast(*const FolderItem2, self), bstrPropName, pvRet);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_FolderItems2_Value = @import("../zig.zig").Guid.initString("C94F0AD0-F363-11D2-A327-00C04F8EEC7F");
pub const IID_FolderItems2 = &IID_FolderItems2_Value;
pub const FolderItems2 = extern struct {
    pub const VTable = extern struct {
        base: FolderItems.VTable,
        InvokeVerbEx: fn(
            self: *const FolderItems2,
            vVerb: VARIANT,
            vArgs: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace FolderItems.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItems2_InvokeVerbEx(self: *const T, vVerb: VARIANT, vArgs: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItems2.VTable, self.vtable).InvokeVerbEx(@ptrCast(*const FolderItems2, self), vVerb, vArgs);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_FolderItems3_Value = @import("../zig.zig").Guid.initString("EAA7C309-BBEC-49D5-821D-64D966CB667F");
pub const IID_FolderItems3 = &IID_FolderItems3_Value;
pub const FolderItems3 = extern struct {
    pub const VTable = extern struct {
        base: FolderItems2.VTable,
        Filter: fn(
            self: *const FolderItems3,
            grfFlags: i32,
            bstrFileSpec: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Verbs: fn(
            self: *const FolderItems3,
            ppfic: **FolderItemVerbs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace FolderItems2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItems3_Filter(self: *const T, grfFlags: i32, bstrFileSpec: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItems3.VTable, self.vtable).Filter(@ptrCast(*const FolderItems3, self), grfFlags, bstrFileSpec);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn FolderItems3_get_Verbs(self: *const T, ppfic: **FolderItemVerbs) callconv(.Inline) HRESULT {
            return @ptrCast(*const FolderItems3.VTable, self.vtable).get_Verbs(@ptrCast(*const FolderItems3, self), ppfic);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellLinkDual_Value = @import("../zig.zig").Guid.initString("88A05C00-F000-11CE-8350-444553540000");
pub const IID_IShellLinkDual = &IID_IShellLinkDual_Value;
pub const IShellLinkDual = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Path: fn(
            self: *const IShellLinkDual,
            pbs: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Path: fn(
            self: *const IShellLinkDual,
            bs: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Description: fn(
            self: *const IShellLinkDual,
            pbs: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Description: fn(
            self: *const IShellLinkDual,
            bs: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_WorkingDirectory: fn(
            self: *const IShellLinkDual,
            pbs: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_WorkingDirectory: fn(
            self: *const IShellLinkDual,
            bs: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Arguments: fn(
            self: *const IShellLinkDual,
            pbs: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Arguments: fn(
            self: *const IShellLinkDual,
            bs: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Hotkey: fn(
            self: *const IShellLinkDual,
            piHK: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Hotkey: fn(
            self: *const IShellLinkDual,
            iHK: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ShowCommand: fn(
            self: *const IShellLinkDual,
            piShowCommand: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ShowCommand: fn(
            self: *const IShellLinkDual,
            iShowCommand: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resolve: fn(
            self: *const IShellLinkDual,
            fFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconLocation: fn(
            self: *const IShellLinkDual,
            pbs: *BSTR,
            piIcon: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIconLocation: fn(
            self: *const IShellLinkDual,
            bs: BSTR,
            iIcon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: fn(
            self: *const IShellLinkDual,
            vWhere: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDual_get_Path(self: *const T, pbs: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDual.VTable, self.vtable).get_Path(@ptrCast(*const IShellLinkDual, self), pbs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDual_put_Path(self: *const T, bs: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDual.VTable, self.vtable).put_Path(@ptrCast(*const IShellLinkDual, self), bs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDual_get_Description(self: *const T, pbs: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDual.VTable, self.vtable).get_Description(@ptrCast(*const IShellLinkDual, self), pbs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDual_put_Description(self: *const T, bs: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDual.VTable, self.vtable).put_Description(@ptrCast(*const IShellLinkDual, self), bs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDual_get_WorkingDirectory(self: *const T, pbs: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDual.VTable, self.vtable).get_WorkingDirectory(@ptrCast(*const IShellLinkDual, self), pbs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDual_put_WorkingDirectory(self: *const T, bs: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDual.VTable, self.vtable).put_WorkingDirectory(@ptrCast(*const IShellLinkDual, self), bs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDual_get_Arguments(self: *const T, pbs: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDual.VTable, self.vtable).get_Arguments(@ptrCast(*const IShellLinkDual, self), pbs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDual_put_Arguments(self: *const T, bs: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDual.VTable, self.vtable).put_Arguments(@ptrCast(*const IShellLinkDual, self), bs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDual_get_Hotkey(self: *const T, piHK: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDual.VTable, self.vtable).get_Hotkey(@ptrCast(*const IShellLinkDual, self), piHK);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDual_put_Hotkey(self: *const T, iHK: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDual.VTable, self.vtable).put_Hotkey(@ptrCast(*const IShellLinkDual, self), iHK);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDual_get_ShowCommand(self: *const T, piShowCommand: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDual.VTable, self.vtable).get_ShowCommand(@ptrCast(*const IShellLinkDual, self), piShowCommand);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDual_put_ShowCommand(self: *const T, iShowCommand: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDual.VTable, self.vtable).put_ShowCommand(@ptrCast(*const IShellLinkDual, self), iShowCommand);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDual_Resolve(self: *const T, fFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDual.VTable, self.vtable).Resolve(@ptrCast(*const IShellLinkDual, self), fFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDual_GetIconLocation(self: *const T, pbs: *BSTR, piIcon: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDual.VTable, self.vtable).GetIconLocation(@ptrCast(*const IShellLinkDual, self), pbs, piIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDual_SetIconLocation(self: *const T, bs: BSTR, iIcon: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDual.VTable, self.vtable).SetIconLocation(@ptrCast(*const IShellLinkDual, self), bs, iIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDual_Save(self: *const T, vWhere: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDual.VTable, self.vtable).Save(@ptrCast(*const IShellLinkDual, self), vWhere);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellLinkDual2_Value = @import("../zig.zig").Guid.initString("317EE249-F12E-11D2-B1E4-00C04F8EEB3E");
pub const IID_IShellLinkDual2 = &IID_IShellLinkDual2_Value;
pub const IShellLinkDual2 = extern struct {
    pub const VTable = extern struct {
        base: IShellLinkDual.VTable,
        get_Target: fn(
            self: *const IShellLinkDual2,
            ppfi: **FolderItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IShellLinkDual.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellLinkDual2_get_Target(self: *const T, ppfi: **FolderItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellLinkDual2.VTable, self.vtable).get_Target(@ptrCast(*const IShellLinkDual2, self), ppfi);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellFolderViewDual_Value = @import("../zig.zig").Guid.initString("E7A1AF80-4D96-11CF-960C-0080C7F4EE85");
pub const IID_IShellFolderViewDual = &IID_IShellFolderViewDual_Value;
pub const IShellFolderViewDual = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Application: fn(
            self: *const IShellFolderViewDual,
            ppid: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Parent: fn(
            self: *const IShellFolderViewDual,
            ppid: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Folder: fn(
            self: *const IShellFolderViewDual,
            ppid: **Folder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectedItems: fn(
            self: *const IShellFolderViewDual,
            ppid: **FolderItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_FocusedItem: fn(
            self: *const IShellFolderViewDual,
            ppid: **FolderItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectItem: fn(
            self: *const IShellFolderViewDual,
            pvfi: *VARIANT,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PopupItemMenu: fn(
            self: *const IShellFolderViewDual,
            pfi: *FolderItem,
            vx: VARIANT,
            vy: VARIANT,
            pbs: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Script: fn(
            self: *const IShellFolderViewDual,
            ppDisp: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ViewOptions: fn(
            self: *const IShellFolderViewDual,
            plViewOptions: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual_get_Application(self: *const T, ppid: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual.VTable, self.vtable).get_Application(@ptrCast(*const IShellFolderViewDual, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual_get_Parent(self: *const T, ppid: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual.VTable, self.vtable).get_Parent(@ptrCast(*const IShellFolderViewDual, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual_get_Folder(self: *const T, ppid: **Folder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual.VTable, self.vtable).get_Folder(@ptrCast(*const IShellFolderViewDual, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual_SelectedItems(self: *const T, ppid: **FolderItems) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual.VTable, self.vtable).SelectedItems(@ptrCast(*const IShellFolderViewDual, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual_get_FocusedItem(self: *const T, ppid: **FolderItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual.VTable, self.vtable).get_FocusedItem(@ptrCast(*const IShellFolderViewDual, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual_SelectItem(self: *const T, pvfi: *VARIANT, dwFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual.VTable, self.vtable).SelectItem(@ptrCast(*const IShellFolderViewDual, self), pvfi, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual_PopupItemMenu(self: *const T, pfi: *FolderItem, vx: VARIANT, vy: VARIANT, pbs: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual.VTable, self.vtable).PopupItemMenu(@ptrCast(*const IShellFolderViewDual, self), pfi, vx, vy, pbs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual_get_Script(self: *const T, ppDisp: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual.VTable, self.vtable).get_Script(@ptrCast(*const IShellFolderViewDual, self), ppDisp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual_get_ViewOptions(self: *const T, plViewOptions: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual.VTable, self.vtable).get_ViewOptions(@ptrCast(*const IShellFolderViewDual, self), plViewOptions);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellFolderViewDual2_Value = @import("../zig.zig").Guid.initString("31C147B6-0ADE-4A3C-B514-DDF932EF6D17");
pub const IID_IShellFolderViewDual2 = &IID_IShellFolderViewDual2_Value;
pub const IShellFolderViewDual2 = extern struct {
    pub const VTable = extern struct {
        base: IShellFolderViewDual.VTable,
        get_CurrentViewMode: fn(
            self: *const IShellFolderViewDual2,
            pViewMode: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CurrentViewMode: fn(
            self: *const IShellFolderViewDual2,
            ViewMode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectItemRelative: fn(
            self: *const IShellFolderViewDual2,
            iRelative: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IShellFolderViewDual.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual2_get_CurrentViewMode(self: *const T, pViewMode: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual2.VTable, self.vtable).get_CurrentViewMode(@ptrCast(*const IShellFolderViewDual2, self), pViewMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual2_put_CurrentViewMode(self: *const T, ViewMode: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual2.VTable, self.vtable).put_CurrentViewMode(@ptrCast(*const IShellFolderViewDual2, self), ViewMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual2_SelectItemRelative(self: *const T, iRelative: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual2.VTable, self.vtable).SelectItemRelative(@ptrCast(*const IShellFolderViewDual2, self), iRelative);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellFolderViewDual3_Value = @import("../zig.zig").Guid.initString("29EC8E6C-46D3-411F-BAAA-611A6C9CAC66");
pub const IID_IShellFolderViewDual3 = &IID_IShellFolderViewDual3_Value;
pub const IShellFolderViewDual3 = extern struct {
    pub const VTable = extern struct {
        base: IShellFolderViewDual2.VTable,
        get_GroupBy: fn(
            self: *const IShellFolderViewDual3,
            pbstrGroupBy: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_GroupBy: fn(
            self: *const IShellFolderViewDual3,
            bstrGroupBy: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_FolderFlags: fn(
            self: *const IShellFolderViewDual3,
            pdwFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_FolderFlags: fn(
            self: *const IShellFolderViewDual3,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SortColumns: fn(
            self: *const IShellFolderViewDual3,
            pbstrSortColumns: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SortColumns: fn(
            self: *const IShellFolderViewDual3,
            bstrSortColumns: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_IconSize: fn(
            self: *const IShellFolderViewDual3,
            iIconSize: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IconSize: fn(
            self: *const IShellFolderViewDual3,
            piIconSize: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FilterView: fn(
            self: *const IShellFolderViewDual3,
            bstrFilterText: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IShellFolderViewDual2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual3_get_GroupBy(self: *const T, pbstrGroupBy: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual3.VTable, self.vtable).get_GroupBy(@ptrCast(*const IShellFolderViewDual3, self), pbstrGroupBy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual3_put_GroupBy(self: *const T, bstrGroupBy: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual3.VTable, self.vtable).put_GroupBy(@ptrCast(*const IShellFolderViewDual3, self), bstrGroupBy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual3_get_FolderFlags(self: *const T, pdwFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual3.VTable, self.vtable).get_FolderFlags(@ptrCast(*const IShellFolderViewDual3, self), pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual3_put_FolderFlags(self: *const T, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual3.VTable, self.vtable).put_FolderFlags(@ptrCast(*const IShellFolderViewDual3, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual3_get_SortColumns(self: *const T, pbstrSortColumns: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual3.VTable, self.vtable).get_SortColumns(@ptrCast(*const IShellFolderViewDual3, self), pbstrSortColumns);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual3_put_SortColumns(self: *const T, bstrSortColumns: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual3.VTable, self.vtable).put_SortColumns(@ptrCast(*const IShellFolderViewDual3, self), bstrSortColumns);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual3_put_IconSize(self: *const T, iIconSize: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual3.VTable, self.vtable).put_IconSize(@ptrCast(*const IShellFolderViewDual3, self), iIconSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual3_get_IconSize(self: *const T, piIconSize: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual3.VTable, self.vtable).get_IconSize(@ptrCast(*const IShellFolderViewDual3, self), piIconSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewDual3_FilterView(self: *const T, bstrFilterText: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewDual3.VTable, self.vtable).FilterView(@ptrCast(*const IShellFolderViewDual3, self), bstrFilterText);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellDispatch_Value = @import("../zig.zig").Guid.initString("D8F015C0-C278-11CE-A49E-444553540000");
pub const IID_IShellDispatch = &IID_IShellDispatch_Value;
pub const IShellDispatch = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Application: fn(
            self: *const IShellDispatch,
            ppid: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Parent: fn(
            self: *const IShellDispatch,
            ppid: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NameSpace: fn(
            self: *const IShellDispatch,
            vDir: VARIANT,
            ppsdf: **Folder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrowseForFolder: fn(
            self: *const IShellDispatch,
            Hwnd: i32,
            Title: BSTR,
            Options: i32,
            RootFolder: VARIANT,
            ppsdf: **Folder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Windows: fn(
            self: *const IShellDispatch,
            ppid: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: fn(
            self: *const IShellDispatch,
            vDir: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Explore: fn(
            self: *const IShellDispatch,
            vDir: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MinimizeAll: fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UndoMinimizeALL: fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FileRun: fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CascadeWindows: fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TileVertically: fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TileHorizontally: fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShutdownWindows: fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Suspend: fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EjectPC: fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTime: fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TrayProperties: fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Help: fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFiles: fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindComputer: fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshMenu: fn(
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ControlPanelItem: fn(
            self: *const IShellDispatch,
            bstrDir: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_get_Application(self: *const T, ppid: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).get_Application(@ptrCast(*const IShellDispatch, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_get_Parent(self: *const T, ppid: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).get_Parent(@ptrCast(*const IShellDispatch, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_NameSpace(self: *const T, vDir: VARIANT, ppsdf: **Folder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).NameSpace(@ptrCast(*const IShellDispatch, self), vDir, ppsdf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_BrowseForFolder(self: *const T, Hwnd: i32, Title: BSTR, Options: i32, RootFolder: VARIANT, ppsdf: **Folder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).BrowseForFolder(@ptrCast(*const IShellDispatch, self), Hwnd, Title, Options, RootFolder, ppsdf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_Windows(self: *const T, ppid: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).Windows(@ptrCast(*const IShellDispatch, self), ppid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_Open(self: *const T, vDir: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).Open(@ptrCast(*const IShellDispatch, self), vDir);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_Explore(self: *const T, vDir: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).Explore(@ptrCast(*const IShellDispatch, self), vDir);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_MinimizeAll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).MinimizeAll(@ptrCast(*const IShellDispatch, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_UndoMinimizeALL(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).UndoMinimizeALL(@ptrCast(*const IShellDispatch, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_FileRun(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).FileRun(@ptrCast(*const IShellDispatch, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_CascadeWindows(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).CascadeWindows(@ptrCast(*const IShellDispatch, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_TileVertically(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).TileVertically(@ptrCast(*const IShellDispatch, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_TileHorizontally(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).TileHorizontally(@ptrCast(*const IShellDispatch, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_ShutdownWindows(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).ShutdownWindows(@ptrCast(*const IShellDispatch, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_Suspend(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).Suspend(@ptrCast(*const IShellDispatch, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_EjectPC(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).EjectPC(@ptrCast(*const IShellDispatch, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_SetTime(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).SetTime(@ptrCast(*const IShellDispatch, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_TrayProperties(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).TrayProperties(@ptrCast(*const IShellDispatch, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_Help(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).Help(@ptrCast(*const IShellDispatch, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_FindFiles(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).FindFiles(@ptrCast(*const IShellDispatch, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_FindComputer(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).FindComputer(@ptrCast(*const IShellDispatch, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_RefreshMenu(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).RefreshMenu(@ptrCast(*const IShellDispatch, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch_ControlPanelItem(self: *const T, bstrDir: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch.VTable, self.vtable).ControlPanelItem(@ptrCast(*const IShellDispatch, self), bstrDir);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellDispatch2_Value = @import("../zig.zig").Guid.initString("A4C6892C-3BA9-11D2-9DEA-00C04FB16162");
pub const IID_IShellDispatch2 = &IID_IShellDispatch2_Value;
pub const IShellDispatch2 = extern struct {
    pub const VTable = extern struct {
        base: IShellDispatch.VTable,
        IsRestricted: fn(
            self: *const IShellDispatch2,
            Group: BSTR,
            Restriction: BSTR,
            plRestrictValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShellExecuteA: fn(
            self: *const IShellDispatch2,
            File: BSTR,
            vArgs: VARIANT,
            vDir: VARIANT,
            vOperation: VARIANT,
            vShow: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindPrinter: fn(
            self: *const IShellDispatch2,
            name: BSTR,
            location: BSTR,
            model: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSystemInformation: fn(
            self: *const IShellDispatch2,
            name: BSTR,
            pv: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ServiceStart: fn(
            self: *const IShellDispatch2,
            ServiceName: BSTR,
            Persistent: VARIANT,
            pSuccess: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ServiceStop: fn(
            self: *const IShellDispatch2,
            ServiceName: BSTR,
            Persistent: VARIANT,
            pSuccess: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsServiceRunning: fn(
            self: *const IShellDispatch2,
            ServiceName: BSTR,
            pRunning: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanStartStopService: fn(
            self: *const IShellDispatch2,
            ServiceName: BSTR,
            pCanStartStop: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowBrowserBar: fn(
            self: *const IShellDispatch2,
            bstrClsid: BSTR,
            bShow: VARIANT,
            pSuccess: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IShellDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch2_IsRestricted(self: *const T, Group: BSTR, Restriction: BSTR, plRestrictValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch2.VTable, self.vtable).IsRestricted(@ptrCast(*const IShellDispatch2, self), Group, Restriction, plRestrictValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch2_ShellExecuteA(self: *const T, File: BSTR, vArgs: VARIANT, vDir: VARIANT, vOperation: VARIANT, vShow: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch2.VTable, self.vtable).ShellExecuteA(@ptrCast(*const IShellDispatch2, self), File, vArgs, vDir, vOperation, vShow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch2_FindPrinter(self: *const T, name: BSTR, location: BSTR, model: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch2.VTable, self.vtable).FindPrinter(@ptrCast(*const IShellDispatch2, self), name, location, model);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch2_GetSystemInformation(self: *const T, name: BSTR, pv: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch2.VTable, self.vtable).GetSystemInformation(@ptrCast(*const IShellDispatch2, self), name, pv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch2_ServiceStart(self: *const T, ServiceName: BSTR, Persistent: VARIANT, pSuccess: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch2.VTable, self.vtable).ServiceStart(@ptrCast(*const IShellDispatch2, self), ServiceName, Persistent, pSuccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch2_ServiceStop(self: *const T, ServiceName: BSTR, Persistent: VARIANT, pSuccess: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch2.VTable, self.vtable).ServiceStop(@ptrCast(*const IShellDispatch2, self), ServiceName, Persistent, pSuccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch2_IsServiceRunning(self: *const T, ServiceName: BSTR, pRunning: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch2.VTable, self.vtable).IsServiceRunning(@ptrCast(*const IShellDispatch2, self), ServiceName, pRunning);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch2_CanStartStopService(self: *const T, ServiceName: BSTR, pCanStartStop: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch2.VTable, self.vtable).CanStartStopService(@ptrCast(*const IShellDispatch2, self), ServiceName, pCanStartStop);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch2_ShowBrowserBar(self: *const T, bstrClsid: BSTR, bShow: VARIANT, pSuccess: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch2.VTable, self.vtable).ShowBrowserBar(@ptrCast(*const IShellDispatch2, self), bstrClsid, bShow, pSuccess);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellDispatch3_Value = @import("../zig.zig").Guid.initString("177160CA-BB5A-411C-841D-BD38FACDEAA0");
pub const IID_IShellDispatch3 = &IID_IShellDispatch3_Value;
pub const IShellDispatch3 = extern struct {
    pub const VTable = extern struct {
        base: IShellDispatch2.VTable,
        AddToRecent: fn(
            self: *const IShellDispatch3,
            varFile: VARIANT,
            bstrCategory: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IShellDispatch2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch3_AddToRecent(self: *const T, varFile: VARIANT, bstrCategory: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch3.VTable, self.vtable).AddToRecent(@ptrCast(*const IShellDispatch3, self), varFile, bstrCategory);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellDispatch4_Value = @import("../zig.zig").Guid.initString("EFD84B2D-4BCF-4298-BE25-EB542A59FBDA");
pub const IID_IShellDispatch4 = &IID_IShellDispatch4_Value;
pub const IShellDispatch4 = extern struct {
    pub const VTable = extern struct {
        base: IShellDispatch3.VTable,
        WindowsSecurity: fn(
            self: *const IShellDispatch4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ToggleDesktop: fn(
            self: *const IShellDispatch4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExplorerPolicy: fn(
            self: *const IShellDispatch4,
            bstrPolicyName: BSTR,
            pValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSetting: fn(
            self: *const IShellDispatch4,
            lSetting: i32,
            pResult: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IShellDispatch3.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch4_WindowsSecurity(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch4.VTable, self.vtable).WindowsSecurity(@ptrCast(*const IShellDispatch4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch4_ToggleDesktop(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch4.VTable, self.vtable).ToggleDesktop(@ptrCast(*const IShellDispatch4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch4_ExplorerPolicy(self: *const T, bstrPolicyName: BSTR, pValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch4.VTable, self.vtable).ExplorerPolicy(@ptrCast(*const IShellDispatch4, self), bstrPolicyName, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch4_GetSetting(self: *const T, lSetting: i32, pResult: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch4.VTable, self.vtable).GetSetting(@ptrCast(*const IShellDispatch4, self), lSetting, pResult);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellDispatch5_Value = @import("../zig.zig").Guid.initString("866738B9-6CF2-4DE8-8767-F794EBE74F4E");
pub const IID_IShellDispatch5 = &IID_IShellDispatch5_Value;
pub const IShellDispatch5 = extern struct {
    pub const VTable = extern struct {
        base: IShellDispatch4.VTable,
        WindowSwitcher: fn(
            self: *const IShellDispatch5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IShellDispatch4.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch5_WindowSwitcher(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch5.VTable, self.vtable).WindowSwitcher(@ptrCast(*const IShellDispatch5, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellDispatch6_Value = @import("../zig.zig").Guid.initString("286E6F1B-7113-4355-9562-96B7E9D64C54");
pub const IID_IShellDispatch6 = &IID_IShellDispatch6_Value;
pub const IShellDispatch6 = extern struct {
    pub const VTable = extern struct {
        base: IShellDispatch5.VTable,
        SearchCommand: fn(
            self: *const IShellDispatch6,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IShellDispatch5.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDispatch6_SearchCommand(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDispatch6.VTable, self.vtable).SearchCommand(@ptrCast(*const IShellDispatch6, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFileSearchBand_Value = @import("../zig.zig").Guid.initString("2D91EEA1-9932-11D2-BE86-00A0C9A83DA1");
pub const IID_IFileSearchBand = &IID_IFileSearchBand_Value;
pub const IFileSearchBand = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SetFocus: fn(
            self: *const IFileSearchBand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSearchParameters: fn(
            self: *const IFileSearchBand,
            pbstrSearchID: *BSTR,
            bNavToResults: i16,
            pvarScope: *VARIANT,
            pvarQueryFile: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SearchID: fn(
            self: *const IFileSearchBand,
            pbstrSearchID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Scope: fn(
            self: *const IFileSearchBand,
            pvarScope: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_QueryFile: fn(
            self: *const IFileSearchBand,
            pvarFile: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileSearchBand_SetFocus(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileSearchBand.VTable, self.vtable).SetFocus(@ptrCast(*const IFileSearchBand, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileSearchBand_SetSearchParameters(self: *const T, pbstrSearchID: *BSTR, bNavToResults: i16, pvarScope: *VARIANT, pvarQueryFile: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileSearchBand.VTable, self.vtable).SetSearchParameters(@ptrCast(*const IFileSearchBand, self), pbstrSearchID, bNavToResults, pvarScope, pvarQueryFile);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileSearchBand_get_SearchID(self: *const T, pbstrSearchID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileSearchBand.VTable, self.vtable).get_SearchID(@ptrCast(*const IFileSearchBand, self), pbstrSearchID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileSearchBand_get_Scope(self: *const T, pvarScope: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileSearchBand.VTable, self.vtable).get_Scope(@ptrCast(*const IFileSearchBand, self), pvarScope);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFileSearchBand_get_QueryFile(self: *const T, pvarFile: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFileSearchBand.VTable, self.vtable).get_QueryFile(@ptrCast(*const IFileSearchBand, self), pvarFile);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWebWizardHost_Value = @import("../zig.zig").Guid.initString("18BCC359-4990-4BFB-B951-3C83702BE5F9");
pub const IID_IWebWizardHost = &IID_IWebWizardHost_Value;
pub const IWebWizardHost = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        FinalBack: fn(
            self: *const IWebWizardHost,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FinalNext: fn(
            self: *const IWebWizardHost,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: fn(
            self: *const IWebWizardHost,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Caption: fn(
            self: *const IWebWizardHost,
            bstrCaption: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Caption: fn(
            self: *const IWebWizardHost,
            pbstrCaption: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Property: fn(
            self: *const IWebWizardHost,
            bstrPropertyName: BSTR,
            pvProperty: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Property: fn(
            self: *const IWebWizardHost,
            bstrPropertyName: BSTR,
            pvProperty: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWizardButtons: fn(
            self: *const IWebWizardHost,
            vfEnableBack: i16,
            vfEnableNext: i16,
            vfLastPage: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHeaderText: fn(
            self: *const IWebWizardHost,
            bstrHeaderTitle: BSTR,
            bstrHeaderSubtitle: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWebWizardHost_FinalBack(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWebWizardHost.VTable, self.vtable).FinalBack(@ptrCast(*const IWebWizardHost, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWebWizardHost_FinalNext(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWebWizardHost.VTable, self.vtable).FinalNext(@ptrCast(*const IWebWizardHost, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWebWizardHost_Cancel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWebWizardHost.VTable, self.vtable).Cancel(@ptrCast(*const IWebWizardHost, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWebWizardHost_put_Caption(self: *const T, bstrCaption: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWebWizardHost.VTable, self.vtable).put_Caption(@ptrCast(*const IWebWizardHost, self), bstrCaption);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWebWizardHost_get_Caption(self: *const T, pbstrCaption: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWebWizardHost.VTable, self.vtable).get_Caption(@ptrCast(*const IWebWizardHost, self), pbstrCaption);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWebWizardHost_put_Property(self: *const T, bstrPropertyName: BSTR, pvProperty: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWebWizardHost.VTable, self.vtable).put_Property(@ptrCast(*const IWebWizardHost, self), bstrPropertyName, pvProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWebWizardHost_get_Property(self: *const T, bstrPropertyName: BSTR, pvProperty: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWebWizardHost.VTable, self.vtable).get_Property(@ptrCast(*const IWebWizardHost, self), bstrPropertyName, pvProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWebWizardHost_SetWizardButtons(self: *const T, vfEnableBack: i16, vfEnableNext: i16, vfLastPage: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWebWizardHost.VTable, self.vtable).SetWizardButtons(@ptrCast(*const IWebWizardHost, self), vfEnableBack, vfEnableNext, vfLastPage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWebWizardHost_SetHeaderText(self: *const T, bstrHeaderTitle: BSTR, bstrHeaderSubtitle: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWebWizardHost.VTable, self.vtable).SetHeaderText(@ptrCast(*const IWebWizardHost, self), bstrHeaderTitle, bstrHeaderSubtitle);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWebWizardHost2_Value = @import("../zig.zig").Guid.initString("F9C013DC-3C23-4041-8E39-CFB402F7EA59");
pub const IID_IWebWizardHost2 = &IID_IWebWizardHost2_Value;
pub const IWebWizardHost2 = extern struct {
    pub const VTable = extern struct {
        base: IWebWizardHost.VTable,
        SignString: fn(
            self: *const IWebWizardHost2,
            value: BSTR,
            signedValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWebWizardHost.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWebWizardHost2_SignString(self: *const T, value: BSTR, signedValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWebWizardHost2.VTable, self.vtable).SignString(@ptrCast(*const IWebWizardHost2, self), value, signedValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_INewWDEvents_Value = @import("../zig.zig").Guid.initString("0751C551-7568-41C9-8E5B-E22E38919236");
pub const IID_INewWDEvents = &IID_INewWDEvents_Value;
pub const INewWDEvents = extern struct {
    pub const VTable = extern struct {
        base: IWebWizardHost.VTable,
        PassportAuthenticate: fn(
            self: *const INewWDEvents,
            bstrSignInUrl: BSTR,
            pvfAuthenitcated: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWebWizardHost.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INewWDEvents_PassportAuthenticate(self: *const T, bstrSignInUrl: BSTR, pvfAuthenitcated: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const INewWDEvents.VTable, self.vtable).PassportAuthenticate(@ptrCast(*const INewWDEvents, self), bstrSignInUrl, pvfAuthenitcated);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAutoComplete_Value = @import("../zig.zig").Guid.initString("00BB2762-6A77-11D0-A535-00C04FD7D062");
pub const IID_IAutoComplete = &IID_IAutoComplete_Value;
pub const IAutoComplete = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: fn(
            self: *const IAutoComplete,
            hwndEdit: HWND,
            punkACL: *IUnknown,
            pwszRegKeyPath: ?[*:0]const u16,
            pwszQuickComplete: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: fn(
            self: *const IAutoComplete,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAutoComplete_Init(self: *const T, hwndEdit: HWND, punkACL: *IUnknown, pwszRegKeyPath: ?[*:0]const u16, pwszQuickComplete: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAutoComplete.VTable, self.vtable).Init(@ptrCast(*const IAutoComplete, self), hwndEdit, punkACL, pwszRegKeyPath, pwszQuickComplete);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAutoComplete_Enable(self: *const T, fEnable: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAutoComplete.VTable, self.vtable).Enable(@ptrCast(*const IAutoComplete, self), fEnable);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const AUTOCOMPLETEOPTIONS = extern enum(i32) {
    ACO_NONE = 0,
    ACO_AUTOSUGGEST = 1,
    ACO_AUTOAPPEND = 2,
    ACO_SEARCH = 4,
    ACO_FILTERPREFIXES = 8,
    ACO_USETAB = 16,
    ACO_UPDOWNKEYDROPSLIST = 32,
    ACO_RTLREADING = 64,
    ACO_WORD_FILTER = 128,
    ACO_NOPREFIXFILTERING = 256,
};
pub const ACO_NONE = AUTOCOMPLETEOPTIONS.ACO_NONE;
pub const ACO_AUTOSUGGEST = AUTOCOMPLETEOPTIONS.ACO_AUTOSUGGEST;
pub const ACO_AUTOAPPEND = AUTOCOMPLETEOPTIONS.ACO_AUTOAPPEND;
pub const ACO_SEARCH = AUTOCOMPLETEOPTIONS.ACO_SEARCH;
pub const ACO_FILTERPREFIXES = AUTOCOMPLETEOPTIONS.ACO_FILTERPREFIXES;
pub const ACO_USETAB = AUTOCOMPLETEOPTIONS.ACO_USETAB;
pub const ACO_UPDOWNKEYDROPSLIST = AUTOCOMPLETEOPTIONS.ACO_UPDOWNKEYDROPSLIST;
pub const ACO_RTLREADING = AUTOCOMPLETEOPTIONS.ACO_RTLREADING;
pub const ACO_WORD_FILTER = AUTOCOMPLETEOPTIONS.ACO_WORD_FILTER;
pub const ACO_NOPREFIXFILTERING = AUTOCOMPLETEOPTIONS.ACO_NOPREFIXFILTERING;

const IID_IAutoComplete2_Value = @import("../zig.zig").Guid.initString("EAC04BC0-3791-11D2-BB95-0060977B464C");
pub const IID_IAutoComplete2 = &IID_IAutoComplete2_Value;
pub const IAutoComplete2 = extern struct {
    pub const VTable = extern struct {
        base: IAutoComplete.VTable,
        SetOptions: fn(
            self: *const IAutoComplete2,
            dwFlag: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: fn(
            self: *const IAutoComplete2,
            pdwFlag: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IAutoComplete.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAutoComplete2_SetOptions(self: *const T, dwFlag: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAutoComplete2.VTable, self.vtable).SetOptions(@ptrCast(*const IAutoComplete2, self), dwFlag);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAutoComplete2_GetOptions(self: *const T, pdwFlag: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAutoComplete2.VTable, self.vtable).GetOptions(@ptrCast(*const IAutoComplete2, self), pdwFlag);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const ACENUMOPTION = extern enum(i32) {
    ACEO_NONE = 0,
    ACEO_MOSTRECENTFIRST = 1,
    ACEO_FIRSTUNUSED = 65536,
};
pub const ACEO_NONE = ACENUMOPTION.ACEO_NONE;
pub const ACEO_MOSTRECENTFIRST = ACENUMOPTION.ACEO_MOSTRECENTFIRST;
pub const ACEO_FIRSTUNUSED = ACENUMOPTION.ACEO_FIRSTUNUSED;

const IID_IEnumACString_Value = @import("../zig.zig").Guid.initString("8E74C210-CF9D-4EAF-A403-7356428F0A5A");
pub const IID_IEnumACString = &IID_IEnumACString_Value;
pub const IEnumACString = extern struct {
    pub const VTable = extern struct {
        base: IEnumString.VTable,
        NextItem: fn(
            self: *const IEnumACString,
            pszUrl: ?[*:0]u16,
            cchMax: u32,
            pulSortIndex: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnumOptions: fn(
            self: *const IEnumACString,
            dwOptions: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumOptions: fn(
            self: *const IEnumACString,
            pdwOptions: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IEnumString.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumACString_NextItem(self: *const T, pszUrl: ?[*:0]u16, cchMax: u32, pulSortIndex: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumACString.VTable, self.vtable).NextItem(@ptrCast(*const IEnumACString, self), pszUrl, cchMax, pulSortIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumACString_SetEnumOptions(self: *const T, dwOptions: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumACString.VTable, self.vtable).SetEnumOptions(@ptrCast(*const IEnumACString, self), dwOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumACString_GetEnumOptions(self: *const T, pdwOptions: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumACString.VTable, self.vtable).GetEnumOptions(@ptrCast(*const IEnumACString, self), pdwOptions);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDataObjectAsyncCapability_Value = @import("../zig.zig").Guid.initString("3D8B0590-F691-11D2-8EA9-006097DF5BD4");
pub const IID_IDataObjectAsyncCapability = &IID_IDataObjectAsyncCapability_Value;
pub const IDataObjectAsyncCapability = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAsyncMode: fn(
            self: *const IDataObjectAsyncCapability,
            fDoOpAsync: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAsyncMode: fn(
            self: *const IDataObjectAsyncCapability,
            pfIsOpAsync: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartOperation: fn(
            self: *const IDataObjectAsyncCapability,
            pbcReserved: ?*IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InOperation: fn(
            self: *const IDataObjectAsyncCapability,
            pfInAsyncOp: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndOperation: fn(
            self: *const IDataObjectAsyncCapability,
            hResult: HRESULT,
            pbcReserved: *IBindCtx,
            dwEffects: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataObjectAsyncCapability_SetAsyncMode(self: *const T, fDoOpAsync: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataObjectAsyncCapability.VTable, self.vtable).SetAsyncMode(@ptrCast(*const IDataObjectAsyncCapability, self), fDoOpAsync);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataObjectAsyncCapability_GetAsyncMode(self: *const T, pfIsOpAsync: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataObjectAsyncCapability.VTable, self.vtable).GetAsyncMode(@ptrCast(*const IDataObjectAsyncCapability, self), pfIsOpAsync);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataObjectAsyncCapability_StartOperation(self: *const T, pbcReserved: ?*IBindCtx) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataObjectAsyncCapability.VTable, self.vtable).StartOperation(@ptrCast(*const IDataObjectAsyncCapability, self), pbcReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataObjectAsyncCapability_InOperation(self: *const T, pfInAsyncOp: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataObjectAsyncCapability.VTable, self.vtable).InOperation(@ptrCast(*const IDataObjectAsyncCapability, self), pfInAsyncOp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataObjectAsyncCapability_EndOperation(self: *const T, hResult: HRESULT, pbcReserved: *IBindCtx, dwEffects: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataObjectAsyncCapability.VTable, self.vtable).EndOperation(@ptrCast(*const IDataObjectAsyncCapability, self), hResult, pbcReserved, dwEffects);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IExtractIconA_Value = @import("../zig.zig").Guid.initString("000214EB-0000-0000-C000-000000000046");
pub const IID_IExtractIconA = &IID_IExtractIconA_Value;
pub const IExtractIconA = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIconLocation: fn(
            self: *const IExtractIconA,
            uFlags: u32,
            pszIconFile: [*:0]u8,
            cchMax: u32,
            piIndex: *i32,
            pwFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Extract: fn(
            self: *const IExtractIconA,
            pszFile: [*:0]const u8,
            nIconIndex: u32,
            phiconLarge: ?*HICON,
            phiconSmall: ?*HICON,
            nIconSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExtractIconA_GetIconLocation(self: *const T, uFlags: u32, pszIconFile: [*:0]u8, cchMax: u32, piIndex: *i32, pwFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExtractIconA.VTable, self.vtable).GetIconLocation(@ptrCast(*const IExtractIconA, self), uFlags, pszIconFile, cchMax, piIndex, pwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExtractIconA_Extract(self: *const T, pszFile: [*:0]const u8, nIconIndex: u32, phiconLarge: ?*HICON, phiconSmall: ?*HICON, nIconSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExtractIconA.VTable, self.vtable).Extract(@ptrCast(*const IExtractIconA, self), pszFile, nIconIndex, phiconLarge, phiconSmall, nIconSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IExtractIconW_Value = @import("../zig.zig").Guid.initString("000214FA-0000-0000-C000-000000000046");
pub const IID_IExtractIconW = &IID_IExtractIconW_Value;
pub const IExtractIconW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIconLocation: fn(
            self: *const IExtractIconW,
            uFlags: u32,
            pszIconFile: [*:0]u16,
            cchMax: u32,
            piIndex: *i32,
            pwFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Extract: fn(
            self: *const IExtractIconW,
            pszFile: [*:0]const u16,
            nIconIndex: u32,
            phiconLarge: ?*HICON,
            phiconSmall: ?*HICON,
            nIconSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExtractIconW_GetIconLocation(self: *const T, uFlags: u32, pszIconFile: [*:0]u16, cchMax: u32, piIndex: *i32, pwFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExtractIconW.VTable, self.vtable).GetIconLocation(@ptrCast(*const IExtractIconW, self), uFlags, pszIconFile, cchMax, piIndex, pwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExtractIconW_Extract(self: *const T, pszFile: [*:0]const u16, nIconIndex: u32, phiconLarge: ?*HICON, phiconSmall: ?*HICON, nIconSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExtractIconW.VTable, self.vtable).Extract(@ptrCast(*const IExtractIconW, self), pszFile, nIconIndex, phiconLarge, phiconSmall, nIconSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellIconOverlayManager_Value = @import("../zig.zig").Guid.initString("F10B5E34-DD3B-42A7-AA7D-2F4EC54BB09B");
pub const IID_IShellIconOverlayManager = &IID_IShellIconOverlayManager_Value;
pub const IShellIconOverlayManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFileOverlayInfo: fn(
            self: *const IShellIconOverlayManager,
            pwszPath: [*:0]const u16,
            dwAttrib: u32,
            pIndex: *i32,
            dwflags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReservedOverlayInfo: fn(
            self: *const IShellIconOverlayManager,
            pwszPath: ?[*:0]const u16,
            dwAttrib: u32,
            pIndex: *i32,
            dwflags: u32,
            iReservedID: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshOverlayImages: fn(
            self: *const IShellIconOverlayManager,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadNonloadedOverlayIdentifiers: fn(
            self: *const IShellIconOverlayManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OverlayIndexFromImageIndex: fn(
            self: *const IShellIconOverlayManager,
            iImage: i32,
            piIndex: *i32,
            fAdd: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellIconOverlayManager_GetFileOverlayInfo(self: *const T, pwszPath: [*:0]const u16, dwAttrib: u32, pIndex: *i32, dwflags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellIconOverlayManager.VTable, self.vtable).GetFileOverlayInfo(@ptrCast(*const IShellIconOverlayManager, self), pwszPath, dwAttrib, pIndex, dwflags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellIconOverlayManager_GetReservedOverlayInfo(self: *const T, pwszPath: ?[*:0]const u16, dwAttrib: u32, pIndex: *i32, dwflags: u32, iReservedID: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellIconOverlayManager.VTable, self.vtable).GetReservedOverlayInfo(@ptrCast(*const IShellIconOverlayManager, self), pwszPath, dwAttrib, pIndex, dwflags, iReservedID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellIconOverlayManager_RefreshOverlayImages(self: *const T, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellIconOverlayManager.VTable, self.vtable).RefreshOverlayImages(@ptrCast(*const IShellIconOverlayManager, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellIconOverlayManager_LoadNonloadedOverlayIdentifiers(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellIconOverlayManager.VTable, self.vtable).LoadNonloadedOverlayIdentifiers(@ptrCast(*const IShellIconOverlayManager, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellIconOverlayManager_OverlayIndexFromImageIndex(self: *const T, iImage: i32, piIndex: *i32, fAdd: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellIconOverlayManager.VTable, self.vtable).OverlayIndexFromImageIndex(@ptrCast(*const IShellIconOverlayManager, self), iImage, piIndex, fAdd);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellIconOverlay_Value = @import("../zig.zig").Guid.initString("7D688A70-C613-11D0-999B-00C04FD655E1");
pub const IID_IShellIconOverlay = &IID_IShellIconOverlay_Value;
pub const IShellIconOverlay = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOverlayIndex: fn(
            self: *const IShellIconOverlay,
            pidl: *ITEMIDLIST,
            pIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOverlayIconIndex: fn(
            self: *const IShellIconOverlay,
            pidl: *ITEMIDLIST,
            pIconIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellIconOverlay_GetOverlayIndex(self: *const T, pidl: *ITEMIDLIST, pIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellIconOverlay.VTable, self.vtable).GetOverlayIndex(@ptrCast(*const IShellIconOverlay, self), pidl, pIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellIconOverlay_GetOverlayIconIndex(self: *const T, pidl: *ITEMIDLIST, pIconIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellIconOverlay.VTable, self.vtable).GetOverlayIconIndex(@ptrCast(*const IShellIconOverlay, self), pidl, pIconIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SHELL_LINK_DATA_FLAGS = extern enum(i32) {
    SLDF_DEFAULT = 0,
    SLDF_HAS_ID_LIST = 1,
    SLDF_HAS_LINK_INFO = 2,
    SLDF_HAS_NAME = 4,
    SLDF_HAS_RELPATH = 8,
    SLDF_HAS_WORKINGDIR = 16,
    SLDF_HAS_ARGS = 32,
    SLDF_HAS_ICONLOCATION = 64,
    SLDF_UNICODE = 128,
    SLDF_FORCE_NO_LINKINFO = 256,
    SLDF_HAS_EXP_SZ = 512,
    SLDF_RUN_IN_SEPARATE = 1024,
    SLDF_HAS_DARWINID = 4096,
    SLDF_RUNAS_USER = 8192,
    SLDF_HAS_EXP_ICON_SZ = 16384,
    SLDF_NO_PIDL_ALIAS = 32768,
    SLDF_FORCE_UNCNAME = 65536,
    SLDF_RUN_WITH_SHIMLAYER = 131072,
    SLDF_FORCE_NO_LINKTRACK = 262144,
    SLDF_ENABLE_TARGET_METADATA = 524288,
    SLDF_DISABLE_LINK_PATH_TRACKING = 1048576,
    SLDF_DISABLE_KNOWNFOLDER_RELATIVE_TRACKING = 2097152,
    SLDF_NO_KF_ALIAS = 4194304,
    SLDF_ALLOW_LINK_TO_LINK = 8388608,
    SLDF_UNALIAS_ON_SAVE = 16777216,
    SLDF_PREFER_ENVIRONMENT_PATH = 33554432,
    SLDF_KEEP_LOCAL_IDLIST_FOR_UNC_TARGET = 67108864,
    SLDF_PERSIST_VOLUME_ID_RELATIVE = 134217728,
    SLDF_VALID = 268433407,
    SLDF_RESERVED = -2147483648,
};
pub const SLDF_DEFAULT = SHELL_LINK_DATA_FLAGS.SLDF_DEFAULT;
pub const SLDF_HAS_ID_LIST = SHELL_LINK_DATA_FLAGS.SLDF_HAS_ID_LIST;
pub const SLDF_HAS_LINK_INFO = SHELL_LINK_DATA_FLAGS.SLDF_HAS_LINK_INFO;
pub const SLDF_HAS_NAME = SHELL_LINK_DATA_FLAGS.SLDF_HAS_NAME;
pub const SLDF_HAS_RELPATH = SHELL_LINK_DATA_FLAGS.SLDF_HAS_RELPATH;
pub const SLDF_HAS_WORKINGDIR = SHELL_LINK_DATA_FLAGS.SLDF_HAS_WORKINGDIR;
pub const SLDF_HAS_ARGS = SHELL_LINK_DATA_FLAGS.SLDF_HAS_ARGS;
pub const SLDF_HAS_ICONLOCATION = SHELL_LINK_DATA_FLAGS.SLDF_HAS_ICONLOCATION;
pub const SLDF_UNICODE = SHELL_LINK_DATA_FLAGS.SLDF_UNICODE;
pub const SLDF_FORCE_NO_LINKINFO = SHELL_LINK_DATA_FLAGS.SLDF_FORCE_NO_LINKINFO;
pub const SLDF_HAS_EXP_SZ = SHELL_LINK_DATA_FLAGS.SLDF_HAS_EXP_SZ;
pub const SLDF_RUN_IN_SEPARATE = SHELL_LINK_DATA_FLAGS.SLDF_RUN_IN_SEPARATE;
pub const SLDF_HAS_DARWINID = SHELL_LINK_DATA_FLAGS.SLDF_HAS_DARWINID;
pub const SLDF_RUNAS_USER = SHELL_LINK_DATA_FLAGS.SLDF_RUNAS_USER;
pub const SLDF_HAS_EXP_ICON_SZ = SHELL_LINK_DATA_FLAGS.SLDF_HAS_EXP_ICON_SZ;
pub const SLDF_NO_PIDL_ALIAS = SHELL_LINK_DATA_FLAGS.SLDF_NO_PIDL_ALIAS;
pub const SLDF_FORCE_UNCNAME = SHELL_LINK_DATA_FLAGS.SLDF_FORCE_UNCNAME;
pub const SLDF_RUN_WITH_SHIMLAYER = SHELL_LINK_DATA_FLAGS.SLDF_RUN_WITH_SHIMLAYER;
pub const SLDF_FORCE_NO_LINKTRACK = SHELL_LINK_DATA_FLAGS.SLDF_FORCE_NO_LINKTRACK;
pub const SLDF_ENABLE_TARGET_METADATA = SHELL_LINK_DATA_FLAGS.SLDF_ENABLE_TARGET_METADATA;
pub const SLDF_DISABLE_LINK_PATH_TRACKING = SHELL_LINK_DATA_FLAGS.SLDF_DISABLE_LINK_PATH_TRACKING;
pub const SLDF_DISABLE_KNOWNFOLDER_RELATIVE_TRACKING = SHELL_LINK_DATA_FLAGS.SLDF_DISABLE_KNOWNFOLDER_RELATIVE_TRACKING;
pub const SLDF_NO_KF_ALIAS = SHELL_LINK_DATA_FLAGS.SLDF_NO_KF_ALIAS;
pub const SLDF_ALLOW_LINK_TO_LINK = SHELL_LINK_DATA_FLAGS.SLDF_ALLOW_LINK_TO_LINK;
pub const SLDF_UNALIAS_ON_SAVE = SHELL_LINK_DATA_FLAGS.SLDF_UNALIAS_ON_SAVE;
pub const SLDF_PREFER_ENVIRONMENT_PATH = SHELL_LINK_DATA_FLAGS.SLDF_PREFER_ENVIRONMENT_PATH;
pub const SLDF_KEEP_LOCAL_IDLIST_FOR_UNC_TARGET = SHELL_LINK_DATA_FLAGS.SLDF_KEEP_LOCAL_IDLIST_FOR_UNC_TARGET;
pub const SLDF_PERSIST_VOLUME_ID_RELATIVE = SHELL_LINK_DATA_FLAGS.SLDF_PERSIST_VOLUME_ID_RELATIVE;
pub const SLDF_VALID = SHELL_LINK_DATA_FLAGS.SLDF_VALID;
pub const SLDF_RESERVED = SHELL_LINK_DATA_FLAGS.SLDF_RESERVED;

pub const DATABLOCK_HEADER = extern struct {
    cbSize: u32,
    dwSignature: u32,
};

pub const NT_CONSOLE_PROPS = extern struct {
    dbh: DATABLOCK_HEADER,
    wFillAttribute: u16,
    wPopupFillAttribute: u16,
    dwScreenBufferSize: COORD,
    dwWindowSize: COORD,
    dwWindowOrigin: COORD,
    nFont: u32,
    nInputBufferSize: u32,
    dwFontSize: COORD,
    uFontFamily: u32,
    uFontWeight: u32,
    FaceName: [32]u16,
    uCursorSize: u32,
    bFullScreen: BOOL,
    bQuickEdit: BOOL,
    bInsertMode: BOOL,
    bAutoPosition: BOOL,
    uHistoryBufferSize: u32,
    uNumberOfHistoryBuffers: u32,
    bHistoryNoDup: BOOL,
    ColorTable: [16]u32,
};

pub const NT_FE_CONSOLE_PROPS = extern struct {
    dbh: DATABLOCK_HEADER,
    uCodePage: u32,
};

pub const EXP_DARWIN_LINK = extern struct {
    dbh: DATABLOCK_HEADER,
    szDarwinID: [260]i8,
    szwDarwinID: [260]u16,
};

pub const EXP_SPECIAL_FOLDER = extern struct {
    cbSize: u32,
    dwSignature: u32,
    idSpecialFolder: u32,
    cbOffset: u32,
};

pub const EXP_SZ_LINK = extern struct {
    cbSize: u32,
    dwSignature: u32,
    szTarget: [260]i8,
    swzTarget: [260]u16,
};

pub const EXP_PROPERTYSTORAGE = extern struct {
    cbSize: u32,
    dwSignature: u32,
    abPropertyStorage: [1]u8,
};

const IID_IShellExecuteHookA_Value = @import("../zig.zig").Guid.initString("000214F5-0000-0000-C000-000000000046");
pub const IID_IShellExecuteHookA = &IID_IShellExecuteHookA_Value;
pub const IShellExecuteHookA = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Execute: fn(
            self: *const IShellExecuteHookA,
            pei: *SHELLEXECUTEINFOA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellExecuteHookA_Execute(self: *const T, pei: *SHELLEXECUTEINFOA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellExecuteHookA.VTable, self.vtable).Execute(@ptrCast(*const IShellExecuteHookA, self), pei);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellExecuteHookW_Value = @import("../zig.zig").Guid.initString("000214FB-0000-0000-C000-000000000046");
pub const IID_IShellExecuteHookW = &IID_IShellExecuteHookW_Value;
pub const IShellExecuteHookW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Execute: fn(
            self: *const IShellExecuteHookW,
            pei: *SHELLEXECUTEINFOW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellExecuteHookW_Execute(self: *const T, pei: *SHELLEXECUTEINFOW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellExecuteHookW.VTable, self.vtable).Execute(@ptrCast(*const IShellExecuteHookW, self), pei);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IURLSearchHook_Value = @import("../zig.zig").Guid.initString("AC60F6A0-0FD9-11D0-99CB-00C04FD64497");
pub const IID_IURLSearchHook = &IID_IURLSearchHook_Value;
pub const IURLSearchHook = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Translate: fn(
            self: *const IURLSearchHook,
            pwszSearchURL: [*:0]u16,
            cchBufferSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IURLSearchHook_Translate(self: *const T, pwszSearchURL: [*:0]u16, cchBufferSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IURLSearchHook.VTable, self.vtable).Translate(@ptrCast(*const IURLSearchHook, self), pwszSearchURL, cchBufferSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISearchContext_Value = @import("../zig.zig").Guid.initString("09F656A2-41AF-480C-88F7-16CC0D164615");
pub const IID_ISearchContext = &IID_ISearchContext_Value;
pub const ISearchContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSearchUrl: fn(
            self: *const ISearchContext,
            pbstrSearchUrl: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSearchText: fn(
            self: *const ISearchContext,
            pbstrSearchText: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSearchStyle: fn(
            self: *const ISearchContext,
            pdwSearchStyle: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISearchContext_GetSearchUrl(self: *const T, pbstrSearchUrl: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISearchContext.VTable, self.vtable).GetSearchUrl(@ptrCast(*const ISearchContext, self), pbstrSearchUrl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISearchContext_GetSearchText(self: *const T, pbstrSearchText: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISearchContext.VTable, self.vtable).GetSearchText(@ptrCast(*const ISearchContext, self), pbstrSearchText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISearchContext_GetSearchStyle(self: *const T, pdwSearchStyle: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISearchContext.VTable, self.vtable).GetSearchStyle(@ptrCast(*const ISearchContext, self), pdwSearchStyle);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IURLSearchHook2_Value = @import("../zig.zig").Guid.initString("5EE44DA4-6D32-46E3-86BC-07540DEDD0E0");
pub const IID_IURLSearchHook2 = &IID_IURLSearchHook2_Value;
pub const IURLSearchHook2 = extern struct {
    pub const VTable = extern struct {
        base: IURLSearchHook.VTable,
        TranslateWithSearchContext: fn(
            self: *const IURLSearchHook2,
            pwszSearchURL: [*:0]u16,
            cchBufferSize: u32,
            pSearchContext: ?*ISearchContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IURLSearchHook.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IURLSearchHook2_TranslateWithSearchContext(self: *const T, pwszSearchURL: [*:0]u16, cchBufferSize: u32, pSearchContext: ?*ISearchContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IURLSearchHook2.VTable, self.vtable).TranslateWithSearchContext(@ptrCast(*const IURLSearchHook2, self), pwszSearchURL, cchBufferSize, pSearchContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SHGFP_TYPE = extern enum(i32) {
    CURRENT = 0,
    DEFAULT = 1,
};
pub const SHGFP_TYPE_CURRENT = SHGFP_TYPE.CURRENT;
pub const SHGFP_TYPE_DEFAULT = SHGFP_TYPE.DEFAULT;

pub const KNOWN_FOLDER_FLAG = extern enum(i32) {
    KF_FLAG_DEFAULT = 0,
    KF_FLAG_FORCE_APP_DATA_REDIRECTION = 524288,
    KF_FLAG_RETURN_FILTER_REDIRECTION_TARGET = 262144,
    KF_FLAG_FORCE_PACKAGE_REDIRECTION = 131072,
    KF_FLAG_NO_PACKAGE_REDIRECTION = 65536,
    KF_FLAG_FORCE_APPCONTAINER_REDIRECTION = 131072,
    KF_FLAG_NO_APPCONTAINER_REDIRECTION = 65536,
    KF_FLAG_CREATE = 32768,
    KF_FLAG_DONT_VERIFY = 16384,
    KF_FLAG_DONT_UNEXPAND = 8192,
    KF_FLAG_NO_ALIAS = 4096,
    KF_FLAG_INIT = 2048,
    KF_FLAG_DEFAULT_PATH = 1024,
    KF_FLAG_NOT_PARENT_RELATIVE = 512,
    KF_FLAG_SIMPLE_IDLIST = 256,
    KF_FLAG_ALIAS_ONLY = -2147483648,
};
pub const KF_FLAG_DEFAULT = KNOWN_FOLDER_FLAG.KF_FLAG_DEFAULT;
pub const KF_FLAG_FORCE_APP_DATA_REDIRECTION = KNOWN_FOLDER_FLAG.KF_FLAG_FORCE_APP_DATA_REDIRECTION;
pub const KF_FLAG_RETURN_FILTER_REDIRECTION_TARGET = KNOWN_FOLDER_FLAG.KF_FLAG_RETURN_FILTER_REDIRECTION_TARGET;
pub const KF_FLAG_FORCE_PACKAGE_REDIRECTION = KNOWN_FOLDER_FLAG.KF_FLAG_FORCE_PACKAGE_REDIRECTION;
pub const KF_FLAG_NO_PACKAGE_REDIRECTION = KNOWN_FOLDER_FLAG.KF_FLAG_NO_PACKAGE_REDIRECTION;
pub const KF_FLAG_FORCE_APPCONTAINER_REDIRECTION = KNOWN_FOLDER_FLAG.KF_FLAG_FORCE_APPCONTAINER_REDIRECTION;
pub const KF_FLAG_NO_APPCONTAINER_REDIRECTION = KNOWN_FOLDER_FLAG.KF_FLAG_NO_APPCONTAINER_REDIRECTION;
pub const KF_FLAG_CREATE = KNOWN_FOLDER_FLAG.KF_FLAG_CREATE;
pub const KF_FLAG_DONT_VERIFY = KNOWN_FOLDER_FLAG.KF_FLAG_DONT_VERIFY;
pub const KF_FLAG_DONT_UNEXPAND = KNOWN_FOLDER_FLAG.KF_FLAG_DONT_UNEXPAND;
pub const KF_FLAG_NO_ALIAS = KNOWN_FOLDER_FLAG.KF_FLAG_NO_ALIAS;
pub const KF_FLAG_INIT = KNOWN_FOLDER_FLAG.KF_FLAG_INIT;
pub const KF_FLAG_DEFAULT_PATH = KNOWN_FOLDER_FLAG.KF_FLAG_DEFAULT_PATH;
pub const KF_FLAG_NOT_PARENT_RELATIVE = KNOWN_FOLDER_FLAG.KF_FLAG_NOT_PARENT_RELATIVE;
pub const KF_FLAG_SIMPLE_IDLIST = KNOWN_FOLDER_FLAG.KF_FLAG_SIMPLE_IDLIST;
pub const KF_FLAG_ALIAS_ONLY = KNOWN_FOLDER_FLAG.KF_FLAG_ALIAS_ONLY;

pub const SHFOLDERCUSTOMSETTINGS = extern struct {
    dwSize: u32,
    dwMask: u32,
    pvid: *Guid,
    pszWebViewTemplate: PWSTR,
    cchWebViewTemplate: u32,
    pszWebViewTemplateVersion: PWSTR,
    pszInfoTip: PWSTR,
    cchInfoTip: u32,
    pclsid: *Guid,
    dwFlags: u32,
    pszIconFile: PWSTR,
    cchIconFile: u32,
    iIconIndex: i32,
    pszLogo: PWSTR,
    cchLogo: u32,
};

pub const BROWSEINFOA = extern struct {
    hwndOwner: HWND,
    pidlRoot: *ITEMIDLIST,
    pszDisplayName: PSTR,
    lpszTitle: [*:0]const u8,
    ulFlags: u32,
    lpfn: BFFCALLBACK,
    lParam: LPARAM,
    iImage: i32,
};

pub const BROWSEINFOW = extern struct {
    hwndOwner: HWND,
    pidlRoot: *ITEMIDLIST,
    pszDisplayName: PWSTR,
    lpszTitle: [*:0]const u16,
    ulFlags: u32,
    lpfn: BFFCALLBACK,
    lParam: LPARAM,
    iImage: i32,
};

const IID_IShellDetails_Value = @import("../zig.zig").Guid.initString("000214EC-0000-0000-C000-000000000046");
pub const IID_IShellDetails = &IID_IShellDetails_Value;
pub const IShellDetails = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDetailsOf: fn(
            self: *const IShellDetails,
            pidl: ?*ITEMIDLIST,
            iColumn: u32,
            pDetails: *SHELLDETAILS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ColumnClick: fn(
            self: *const IShellDetails,
            iColumn: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDetails_GetDetailsOf(self: *const T, pidl: ?*ITEMIDLIST, iColumn: u32, pDetails: *SHELLDETAILS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDetails.VTable, self.vtable).GetDetailsOf(@ptrCast(*const IShellDetails, self), pidl, iColumn, pDetails);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellDetails_ColumnClick(self: *const T, iColumn: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellDetails.VTable, self.vtable).ColumnClick(@ptrCast(*const IShellDetails, self), iColumn);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjMgr_Value = @import("../zig.zig").Guid.initString("00BB2761-6A77-11D0-A535-00C04FD7D062");
pub const IID_IObjMgr = &IID_IObjMgr_Value;
pub const IObjMgr = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Append: fn(
            self: *const IObjMgr,
            punk: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IObjMgr,
            punk: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjMgr_Append(self: *const T, punk: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjMgr.VTable, self.vtable).Append(@ptrCast(*const IObjMgr, self), punk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjMgr_Remove(self: *const T, punk: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjMgr.VTable, self.vtable).Remove(@ptrCast(*const IObjMgr, self), punk);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IACList_Value = @import("../zig.zig").Guid.initString("77A130B0-94FD-11D0-A544-00C04FD7D062");
pub const IID_IACList = &IID_IACList_Value;
pub const IACList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Expand: fn(
            self: *const IACList,
            pszExpand: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IACList_Expand(self: *const T, pszExpand: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IACList.VTable, self.vtable).Expand(@ptrCast(*const IACList, self), pszExpand);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const AUTOCOMPLETELISTOPTIONS = extern enum(i32) {
    ACLO_NONE = 0,
    ACLO_CURRENTDIR = 1,
    ACLO_MYCOMPUTER = 2,
    ACLO_DESKTOP = 4,
    ACLO_FAVORITES = 8,
    ACLO_FILESYSONLY = 16,
    ACLO_FILESYSDIRS = 32,
    ACLO_VIRTUALNAMESPACE = 64,
};
pub const ACLO_NONE = AUTOCOMPLETELISTOPTIONS.ACLO_NONE;
pub const ACLO_CURRENTDIR = AUTOCOMPLETELISTOPTIONS.ACLO_CURRENTDIR;
pub const ACLO_MYCOMPUTER = AUTOCOMPLETELISTOPTIONS.ACLO_MYCOMPUTER;
pub const ACLO_DESKTOP = AUTOCOMPLETELISTOPTIONS.ACLO_DESKTOP;
pub const ACLO_FAVORITES = AUTOCOMPLETELISTOPTIONS.ACLO_FAVORITES;
pub const ACLO_FILESYSONLY = AUTOCOMPLETELISTOPTIONS.ACLO_FILESYSONLY;
pub const ACLO_FILESYSDIRS = AUTOCOMPLETELISTOPTIONS.ACLO_FILESYSDIRS;
pub const ACLO_VIRTUALNAMESPACE = AUTOCOMPLETELISTOPTIONS.ACLO_VIRTUALNAMESPACE;

const IID_IACList2_Value = @import("../zig.zig").Guid.initString("470141A0-5186-11D2-BBB6-0060977B464C");
pub const IID_IACList2 = &IID_IACList2_Value;
pub const IACList2 = extern struct {
    pub const VTable = extern struct {
        base: IACList.VTable,
        SetOptions: fn(
            self: *const IACList2,
            dwFlag: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: fn(
            self: *const IACList2,
            pdwFlag: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IACList.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IACList2_SetOptions(self: *const T, dwFlag: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IACList2.VTable, self.vtable).SetOptions(@ptrCast(*const IACList2, self), dwFlag);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IACList2_GetOptions(self: *const T, pdwFlag: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IACList2.VTable, self.vtable).GetOptions(@ptrCast(*const IACList2, self), pdwFlag);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IProgressDialog_Value = @import("../zig.zig").Guid.initString("EBBC7C04-315E-11D2-B62F-006097DF5BD4");
pub const IID_IProgressDialog = &IID_IProgressDialog_Value;
pub const IProgressDialog = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartProgressDialog: fn(
            self: *const IProgressDialog,
            hwndParent: HWND,
            punkEnableModless: ?*IUnknown,
            dwFlags: u32,
            pvResevered: *const c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopProgressDialog: fn(
            self: *const IProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTitle: fn(
            self: *const IProgressDialog,
            pwzTitle: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAnimation: fn(
            self: *const IProgressDialog,
            hInstAnimation: HINSTANCE,
            idAnimation: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasUserCancelled: fn(
            self: *const IProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        SetProgress: fn(
            self: *const IProgressDialog,
            dwCompleted: u32,
            dwTotal: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProgress64: fn(
            self: *const IProgressDialog,
            ullCompleted: u64,
            ullTotal: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLine: fn(
            self: *const IProgressDialog,
            dwLineNum: u32,
            pwzString: [*:0]const u16,
            fCompactPath: BOOL,
            pvResevered: *const c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCancelMsg: fn(
            self: *const IProgressDialog,
            pwzCancelMsg: [*:0]const u16,
            pvResevered: *const c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Timer: fn(
            self: *const IProgressDialog,
            dwTimerAction: u32,
            pvResevered: *const c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProgressDialog_StartProgressDialog(self: *const T, hwndParent: HWND, punkEnableModless: ?*IUnknown, dwFlags: u32, pvResevered: *const c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProgressDialog.VTable, self.vtable).StartProgressDialog(@ptrCast(*const IProgressDialog, self), hwndParent, punkEnableModless, dwFlags, pvResevered);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProgressDialog_StopProgressDialog(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProgressDialog.VTable, self.vtable).StopProgressDialog(@ptrCast(*const IProgressDialog, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProgressDialog_SetTitle(self: *const T, pwzTitle: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProgressDialog.VTable, self.vtable).SetTitle(@ptrCast(*const IProgressDialog, self), pwzTitle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProgressDialog_SetAnimation(self: *const T, hInstAnimation: HINSTANCE, idAnimation: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProgressDialog.VTable, self.vtable).SetAnimation(@ptrCast(*const IProgressDialog, self), hInstAnimation, idAnimation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProgressDialog_HasUserCancelled(self: *const T) callconv(.Inline) BOOL {
            return @ptrCast(*const IProgressDialog.VTable, self.vtable).HasUserCancelled(@ptrCast(*const IProgressDialog, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProgressDialog_SetProgress(self: *const T, dwCompleted: u32, dwTotal: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProgressDialog.VTable, self.vtable).SetProgress(@ptrCast(*const IProgressDialog, self), dwCompleted, dwTotal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProgressDialog_SetProgress64(self: *const T, ullCompleted: u64, ullTotal: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProgressDialog.VTable, self.vtable).SetProgress64(@ptrCast(*const IProgressDialog, self), ullCompleted, ullTotal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProgressDialog_SetLine(self: *const T, dwLineNum: u32, pwzString: [*:0]const u16, fCompactPath: BOOL, pvResevered: *const c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProgressDialog.VTable, self.vtable).SetLine(@ptrCast(*const IProgressDialog, self), dwLineNum, pwzString, fCompactPath, pvResevered);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProgressDialog_SetCancelMsg(self: *const T, pwzCancelMsg: [*:0]const u16, pvResevered: *const c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProgressDialog.VTable, self.vtable).SetCancelMsg(@ptrCast(*const IProgressDialog, self), pwzCancelMsg, pvResevered);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProgressDialog_Timer(self: *const T, dwTimerAction: u32, pvResevered: *const c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProgressDialog.VTable, self.vtable).Timer(@ptrCast(*const IProgressDialog, self), dwTimerAction, pvResevered);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDockingWindowSite_Value = @import("../zig.zig").Guid.initString("2A342FC2-7B26-11D0-8CA9-00A0C92DBFE8");
pub const IID_IDockingWindowSite = &IID_IDockingWindowSite_Value;
pub const IDockingWindowSite = extern struct {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        GetBorderDW: fn(
            self: *const IDockingWindowSite,
            punkObj: *IUnknown,
            prcBorder: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestBorderSpaceDW: fn(
            self: *const IDockingWindowSite,
            punkObj: *IUnknown,
            pbw: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBorderSpaceDW: fn(
            self: *const IDockingWindowSite,
            punkObj: *IUnknown,
            pbw: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOleWindow.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDockingWindowSite_GetBorderDW(self: *const T, punkObj: *IUnknown, prcBorder: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDockingWindowSite.VTable, self.vtable).GetBorderDW(@ptrCast(*const IDockingWindowSite, self), punkObj, prcBorder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDockingWindowSite_RequestBorderSpaceDW(self: *const T, punkObj: *IUnknown, pbw: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDockingWindowSite.VTable, self.vtable).RequestBorderSpaceDW(@ptrCast(*const IDockingWindowSite, self), punkObj, pbw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDockingWindowSite_SetBorderSpaceDW(self: *const T, punkObj: *IUnknown, pbw: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDockingWindowSite.VTable, self.vtable).SetBorderSpaceDW(@ptrCast(*const IDockingWindowSite, self), punkObj, pbw);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const NRESARRAY = extern struct {
    cItems: u32,
    nr: [1]NETRESOURCEA,
};

pub const CIDA = extern struct {
    cidl: u32,
    aoffset: [1]u32,
};

pub const FD_FLAGS = extern enum(i32) {
    FD_CLSID = 1,
    FD_SIZEPOINT = 2,
    FD_ATTRIBUTES = 4,
    FD_CREATETIME = 8,
    FD_ACCESSTIME = 16,
    FD_WRITESTIME = 32,
    FD_FILESIZE = 64,
    FD_PROGRESSUI = 16384,
    FD_LINKUI = 32768,
    FD_UNICODE = -2147483648,
};
pub const FD_CLSID = FD_FLAGS.FD_CLSID;
pub const FD_SIZEPOINT = FD_FLAGS.FD_SIZEPOINT;
pub const FD_ATTRIBUTES = FD_FLAGS.FD_ATTRIBUTES;
pub const FD_CREATETIME = FD_FLAGS.FD_CREATETIME;
pub const FD_ACCESSTIME = FD_FLAGS.FD_ACCESSTIME;
pub const FD_WRITESTIME = FD_FLAGS.FD_WRITESTIME;
pub const FD_FILESIZE = FD_FLAGS.FD_FILESIZE;
pub const FD_PROGRESSUI = FD_FLAGS.FD_PROGRESSUI;
pub const FD_LINKUI = FD_FLAGS.FD_LINKUI;
pub const FD_UNICODE = FD_FLAGS.FD_UNICODE;

pub const FILEDESCRIPTORA = extern struct {
    dwFlags: u32,
    clsid: Guid,
    sizel: SIZE,
    pointl: POINTL,
    dwFileAttributes: u32,
    ftCreationTime: FILETIME,
    ftLastAccessTime: FILETIME,
    ftLastWriteTime: FILETIME,
    nFileSizeHigh: u32,
    nFileSizeLow: u32,
    cFileName: [260]i8,
};

pub const FILEDESCRIPTORW = extern struct {
    dwFlags: u32,
    clsid: Guid,
    sizel: SIZE,
    pointl: POINTL,
    dwFileAttributes: u32,
    ftCreationTime: FILETIME,
    ftLastAccessTime: FILETIME,
    ftLastWriteTime: FILETIME,
    nFileSizeHigh: u32,
    nFileSizeLow: u32,
    cFileName: [260]u16,
};

pub const FILEGROUPDESCRIPTORA = extern struct {
    cItems: u32,
    fgd: [1]FILEDESCRIPTORA,
};

pub const FILEGROUPDESCRIPTORW = extern struct {
    cItems: u32,
    fgd: [1]FILEDESCRIPTORW,
};

pub const DROPFILES = extern struct {
    pFiles: u32,
    pt: POINT,
    fNC: BOOL,
    fWide: BOOL,
};

pub const FILE_ATTRIBUTES_ARRAY = extern struct {
    cItems: u32,
    dwSumFileAttributes: u32,
    dwProductFileAttributes: u32,
    rgdwFileAttributes: [1]u32,
};

pub const DROPIMAGETYPE = extern enum(i32) {
    DROPIMAGE_INVALID = -1,
    DROPIMAGE_NONE = 0,
    DROPIMAGE_COPY = 1,
    DROPIMAGE_MOVE = 2,
    DROPIMAGE_LINK = 4,
    DROPIMAGE_LABEL = 6,
    DROPIMAGE_WARNING = 7,
    DROPIMAGE_NOIMAGE = 8,
};
pub const DROPIMAGE_INVALID = DROPIMAGETYPE.DROPIMAGE_INVALID;
pub const DROPIMAGE_NONE = DROPIMAGETYPE.DROPIMAGE_NONE;
pub const DROPIMAGE_COPY = DROPIMAGETYPE.DROPIMAGE_COPY;
pub const DROPIMAGE_MOVE = DROPIMAGETYPE.DROPIMAGE_MOVE;
pub const DROPIMAGE_LINK = DROPIMAGETYPE.DROPIMAGE_LINK;
pub const DROPIMAGE_LABEL = DROPIMAGETYPE.DROPIMAGE_LABEL;
pub const DROPIMAGE_WARNING = DROPIMAGETYPE.DROPIMAGE_WARNING;
pub const DROPIMAGE_NOIMAGE = DROPIMAGETYPE.DROPIMAGE_NOIMAGE;

pub const DROPDESCRIPTION = extern struct {
    type: DROPIMAGETYPE,
    szMessage: [260]u16,
    szInsert: [260]u16,
};

pub const SHChangeNotifyEntry = extern struct {
    pidl: *ITEMIDLIST,
    fRecursive: BOOL,
};

const IID_IShellChangeNotify_Value = @import("../zig.zig").Guid.initString("D82BE2B1-5764-11D0-A96E-00C04FD705A2");
pub const IID_IShellChangeNotify = &IID_IShellChangeNotify_Value;
pub const IShellChangeNotify = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnChange: fn(
            self: *const IShellChangeNotify,
            lEvent: i32,
            pidl1: ?*ITEMIDLIST,
            pidl2: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellChangeNotify_OnChange(self: *const T, lEvent: i32, pidl1: ?*ITEMIDLIST, pidl2: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellChangeNotify.VTable, self.vtable).OnChange(@ptrCast(*const IShellChangeNotify, self), lEvent, pidl1, pidl2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IQueryInfo_Value = @import("../zig.zig").Guid.initString("00021500-0000-0000-C000-000000000046");
pub const IID_IQueryInfo = &IID_IQueryInfo_Value;
pub const IQueryInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInfoTip: fn(
            self: *const IQueryInfo,
            dwFlags: QITIPF_FLAGS,
            ppwszTip: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInfoFlags: fn(
            self: *const IQueryInfo,
            pdwFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IQueryInfo_GetInfoTip(self: *const T, dwFlags: QITIPF_FLAGS, ppwszTip: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IQueryInfo.VTable, self.vtable).GetInfoTip(@ptrCast(*const IQueryInfo, self), dwFlags, ppwszTip);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IQueryInfo_GetInfoFlags(self: *const T, pdwFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IQueryInfo.VTable, self.vtable).GetInfoFlags(@ptrCast(*const IQueryInfo, self), pdwFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SHARD = extern enum(i32) {
    PIDL = 1,
    PATHA = 2,
    PATHW = 3,
    APPIDINFO = 4,
    APPIDINFOIDLIST = 5,
    LINK = 6,
    APPIDINFOLINK = 7,
    SHELLITEM = 8,
};
pub const SHARD_PIDL = SHARD.PIDL;
pub const SHARD_PATHA = SHARD.PATHA;
pub const SHARD_PATHW = SHARD.PATHW;
pub const SHARD_APPIDINFO = SHARD.APPIDINFO;
pub const SHARD_APPIDINFOIDLIST = SHARD.APPIDINFOIDLIST;
pub const SHARD_LINK = SHARD.LINK;
pub const SHARD_APPIDINFOLINK = SHARD.APPIDINFOLINK;
pub const SHARD_SHELLITEM = SHARD.SHELLITEM;

pub const SHARDAPPIDINFO = extern struct {
    psi: *IShellItem,
    pszAppID: [*:0]const u16,
};

pub const SHARDAPPIDINFOIDLIST = extern struct {
    pidl: *ITEMIDLIST,
    pszAppID: [*:0]const u16,
};

pub const SHARDAPPIDINFOLINK = extern struct {
    psl: *IShellLinkA,
    pszAppID: [*:0]const u16,
};

pub const SHChangeDWORDAsIDList = extern struct {
    cb: u16,
    dwItem1: u32,
    dwItem2: u32,
    cbZero: u16,
};

pub const SHChangeUpdateImageIDList = extern struct {
    cb: u16,
    iIconIndex: i32,
    iCurIndex: i32,
    uFlags: u32,
    dwProcessID: u32,
    szName: [260]u16,
    cbZero: u16,
};

pub const SCNRT_STATUS = extern enum(i32) {
    SCNRT_ENABLE = 0,
    SCNRT_DISABLE = 1,
};
pub const SCNRT_ENABLE = SCNRT_STATUS.SCNRT_ENABLE;
pub const SCNRT_DISABLE = SCNRT_STATUS.SCNRT_DISABLE;

pub const SHDESCRIPTIONID = extern struct {
    dwDescriptionId: SHDID_ID,
    clsid: Guid,
};

pub const AUTO_SCROLL_DATA = extern struct {
    iNextSample: i32,
    dwLastScroll: u32,
    bFull: BOOL,
    pts: [3]POINT,
    dwTimes: [3]u32,
};

pub const CABINETSTATE = extern struct {
    cLength: u16,
    nVersion: u16,
    _bitfield: i32,
    fMenuEnumFilter: u32,
};

pub const HPSXA__ = extern struct {
    unused: i32,
};

pub const RESTRICTIONS = extern enum(i32) {
    REST_NONE = 0,
    REST_NORUN = 1,
    REST_NOCLOSE = 2,
    REST_NOSAVESET = 4,
    REST_NOFILEMENU = 8,
    REST_NOSETFOLDERS = 16,
    REST_NOSETTASKBAR = 32,
    REST_NODESKTOP = 64,
    REST_NOFIND = 128,
    REST_NODRIVES = 256,
    REST_NODRIVEAUTORUN = 512,
    REST_NODRIVETYPEAUTORUN = 1024,
    REST_NONETHOOD = 2048,
    REST_STARTBANNER = 4096,
    REST_RESTRICTRUN = 8192,
    REST_NOPRINTERTABS = 16384,
    REST_NOPRINTERDELETE = 32768,
    REST_NOPRINTERADD = 65536,
    REST_NOSTARTMENUSUBFOLDERS = 131072,
    REST_MYDOCSONNET = 262144,
    REST_NOEXITTODOS = 524288,
    REST_ENFORCESHELLEXTSECURITY = 1048576,
    REST_LINKRESOLVEIGNORELINKINFO = 2097152,
    REST_NOCOMMONGROUPS = 4194304,
    REST_SEPARATEDESKTOPPROCESS = 8388608,
    REST_NOWEB = 16777216,
    REST_NOTRAYCONTEXTMENU = 33554432,
    REST_NOVIEWCONTEXTMENU = 67108864,
    REST_NONETCONNECTDISCONNECT = 134217728,
    REST_STARTMENULOGOFF = 268435456,
    REST_NOSETTINGSASSIST = 536870912,
    REST_NOINTERNETICON = 1073741825,
    REST_NORECENTDOCSHISTORY = 1073741826,
    REST_NORECENTDOCSMENU = 1073741827,
    REST_NOACTIVEDESKTOP = 1073741828,
    REST_NOACTIVEDESKTOPCHANGES = 1073741829,
    REST_NOFAVORITESMENU = 1073741830,
    REST_CLEARRECENTDOCSONEXIT = 1073741831,
    REST_CLASSICSHELL = 1073741832,
    REST_NOCUSTOMIZEWEBVIEW = 1073741833,
    REST_NOHTMLWALLPAPER = 1073741840,
    REST_NOCHANGINGWALLPAPER = 1073741841,
    REST_NODESKCOMP = 1073741842,
    REST_NOADDDESKCOMP = 1073741843,
    REST_NODELDESKCOMP = 1073741844,
    REST_NOCLOSEDESKCOMP = 1073741845,
    REST_NOCLOSE_DRAGDROPBAND = 1073741846,
    REST_NOMOVINGBAND = 1073741847,
    REST_NOEDITDESKCOMP = 1073741848,
    REST_NORESOLVESEARCH = 1073741849,
    REST_NORESOLVETRACK = 1073741850,
    REST_FORCECOPYACLWITHFILE = 1073741851,
    REST_NOFORGETSOFTWAREUPDATE = 1073741853,
    REST_NOSETACTIVEDESKTOP = 1073741854,
    REST_NOUPDATEWINDOWS = 1073741855,
    REST_NOCHANGESTARMENU = 1073741856,
    REST_NOFOLDEROPTIONS = 1073741857,
    REST_HASFINDCOMPUTERS = 1073741858,
    REST_INTELLIMENUS = 1073741859,
    REST_RUNDLGMEMCHECKBOX = 1073741860,
    REST_ARP_ShowPostSetup = 1073741861,
    REST_NOCSC = 1073741862,
    REST_NOCONTROLPANEL = 1073741863,
    REST_ENUMWORKGROUP = 1073741864,
    REST_ARP_NOARP = 1073741865,
    REST_ARP_NOREMOVEPAGE = 1073741866,
    REST_ARP_NOADDPAGE = 1073741867,
    REST_ARP_NOWINSETUPPAGE = 1073741868,
    REST_GREYMSIADS = 1073741869,
    REST_NOCHANGEMAPPEDDRIVELABEL = 1073741870,
    REST_NOCHANGEMAPPEDDRIVECOMMENT = 1073741871,
    REST_MaxRecentDocs = 1073741872,
    REST_NONETWORKCONNECTIONS = 1073741873,
    REST_FORCESTARTMENULOGOFF = 1073741874,
    REST_NOWEBVIEW = 1073741875,
    REST_NOCUSTOMIZETHISFOLDER = 1073741876,
    REST_NOENCRYPTION = 1073741877,
    REST_DONTSHOWSUPERHIDDEN = 1073741879,
    REST_NOSHELLSEARCHBUTTON = 1073741880,
    REST_NOHARDWARETAB = 1073741881,
    REST_NORUNASINSTALLPROMPT = 1073741882,
    REST_PROMPTRUNASINSTALLNETPATH = 1073741883,
    REST_NOMANAGEMYCOMPUTERVERB = 1073741884,
    REST_DISALLOWRUN = 1073741886,
    REST_NOWELCOMESCREEN = 1073741887,
    REST_RESTRICTCPL = 1073741888,
    REST_DISALLOWCPL = 1073741889,
    REST_NOSMBALLOONTIP = 1073741890,
    REST_NOSMHELP = 1073741891,
    REST_NOWINKEYS = 1073741892,
    REST_NOENCRYPTONMOVE = 1073741893,
    REST_NOLOCALMACHINERUN = 1073741894,
    REST_NOCURRENTUSERRUN = 1073741895,
    REST_NOLOCALMACHINERUNONCE = 1073741896,
    REST_NOCURRENTUSERRUNONCE = 1073741897,
    REST_FORCEACTIVEDESKTOPON = 1073741898,
    REST_NOVIEWONDRIVE = 1073741900,
    REST_NONETCRAWL = 1073741901,
    REST_NOSHAREDDOCUMENTS = 1073741902,
    REST_NOSMMYDOCS = 1073741903,
    REST_NOSMMYPICS = 1073741904,
    REST_ALLOWBITBUCKDRIVES = 1073741905,
    REST_NONLEGACYSHELLMODE = 1073741906,
    REST_NOCONTROLPANELBARRICADE = 1073741907,
    REST_NOSTARTPAGE = 1073741908,
    REST_NOAUTOTRAYNOTIFY = 1073741909,
    REST_NOTASKGROUPING = 1073741910,
    REST_NOCDBURNING = 1073741911,
    REST_MYCOMPNOPROP = 1073741912,
    REST_MYDOCSNOPROP = 1073741913,
    REST_NOSTARTPANEL = 1073741914,
    REST_NODISPLAYAPPEARANCEPAGE = 1073741915,
    REST_NOTHEMESTAB = 1073741916,
    REST_NOVISUALSTYLECHOICE = 1073741917,
    REST_NOSIZECHOICE = 1073741918,
    REST_NOCOLORCHOICE = 1073741919,
    REST_SETVISUALSTYLE = 1073741920,
    REST_STARTRUNNOHOMEPATH = 1073741921,
    REST_NOUSERNAMEINSTARTPANEL = 1073741922,
    REST_NOMYCOMPUTERICON = 1073741923,
    REST_NOSMNETWORKPLACES = 1073741924,
    REST_NOSMPINNEDLIST = 1073741925,
    REST_NOSMMYMUSIC = 1073741926,
    REST_NOSMEJECTPC = 1073741927,
    REST_NOSMMOREPROGRAMS = 1073741928,
    REST_NOSMMFUPROGRAMS = 1073741929,
    REST_NOTRAYITEMSDISPLAY = 1073741930,
    REST_NOTOOLBARSONTASKBAR = 1073741931,
    REST_NOSMCONFIGUREPROGRAMS = 1073741935,
    REST_HIDECLOCK = 1073741936,
    REST_NOLOWDISKSPACECHECKS = 1073741937,
    REST_NOENTIRENETWORK = 1073741938,
    REST_NODESKTOPCLEANUP = 1073741939,
    REST_BITBUCKNUKEONDELETE = 1073741940,
    REST_BITBUCKCONFIRMDELETE = 1073741941,
    REST_BITBUCKNOPROP = 1073741942,
    REST_NODISPBACKGROUND = 1073741943,
    REST_NODISPSCREENSAVEPG = 1073741944,
    REST_NODISPSETTINGSPG = 1073741945,
    REST_NODISPSCREENSAVEPREVIEW = 1073741946,
    REST_NODISPLAYCPL = 1073741947,
    REST_HIDERUNASVERB = 1073741948,
    REST_NOTHUMBNAILCACHE = 1073741949,
    REST_NOSTRCMPLOGICAL = 1073741950,
    REST_NOPUBLISHWIZARD = 1073741951,
    REST_NOONLINEPRINTSWIZARD = 1073741952,
    REST_NOWEBSERVICES = 1073741953,
    REST_ALLOWUNHASHEDWEBVIEW = 1073741954,
    REST_ALLOWLEGACYWEBVIEW = 1073741955,
    REST_REVERTWEBVIEWSECURITY = 1073741956,
    REST_INHERITCONSOLEHANDLES = 1073741958,
    REST_NOREMOTERECURSIVEEVENTS = 1073741961,
    REST_NOREMOTECHANGENOTIFY = 1073741969,
    REST_NOENUMENTIRENETWORK = 1073741971,
    REST_NOINTERNETOPENWITH = 1073741973,
    REST_DONTRETRYBADNETNAME = 1073741979,
    REST_ALLOWFILECLSIDJUNCTIONS = 1073741980,
    REST_NOUPNPINSTALL = 1073741981,
    REST_ARP_DONTGROUPPATCHES = 1073741996,
    REST_ARP_NOCHOOSEPROGRAMSPAGE = 1073741997,
    REST_NODISCONNECT = 1090519041,
    REST_NOSECURITY = 1090519042,
    REST_NOFILEASSOCIATE = 1090519043,
    REST_ALLOWCOMMENTTOGGLE = 1090519044,
};
pub const REST_NONE = RESTRICTIONS.REST_NONE;
pub const REST_NORUN = RESTRICTIONS.REST_NORUN;
pub const REST_NOCLOSE = RESTRICTIONS.REST_NOCLOSE;
pub const REST_NOSAVESET = RESTRICTIONS.REST_NOSAVESET;
pub const REST_NOFILEMENU = RESTRICTIONS.REST_NOFILEMENU;
pub const REST_NOSETFOLDERS = RESTRICTIONS.REST_NOSETFOLDERS;
pub const REST_NOSETTASKBAR = RESTRICTIONS.REST_NOSETTASKBAR;
pub const REST_NODESKTOP = RESTRICTIONS.REST_NODESKTOP;
pub const REST_NOFIND = RESTRICTIONS.REST_NOFIND;
pub const REST_NODRIVES = RESTRICTIONS.REST_NODRIVES;
pub const REST_NODRIVEAUTORUN = RESTRICTIONS.REST_NODRIVEAUTORUN;
pub const REST_NODRIVETYPEAUTORUN = RESTRICTIONS.REST_NODRIVETYPEAUTORUN;
pub const REST_NONETHOOD = RESTRICTIONS.REST_NONETHOOD;
pub const REST_STARTBANNER = RESTRICTIONS.REST_STARTBANNER;
pub const REST_RESTRICTRUN = RESTRICTIONS.REST_RESTRICTRUN;
pub const REST_NOPRINTERTABS = RESTRICTIONS.REST_NOPRINTERTABS;
pub const REST_NOPRINTERDELETE = RESTRICTIONS.REST_NOPRINTERDELETE;
pub const REST_NOPRINTERADD = RESTRICTIONS.REST_NOPRINTERADD;
pub const REST_NOSTARTMENUSUBFOLDERS = RESTRICTIONS.REST_NOSTARTMENUSUBFOLDERS;
pub const REST_MYDOCSONNET = RESTRICTIONS.REST_MYDOCSONNET;
pub const REST_NOEXITTODOS = RESTRICTIONS.REST_NOEXITTODOS;
pub const REST_ENFORCESHELLEXTSECURITY = RESTRICTIONS.REST_ENFORCESHELLEXTSECURITY;
pub const REST_LINKRESOLVEIGNORELINKINFO = RESTRICTIONS.REST_LINKRESOLVEIGNORELINKINFO;
pub const REST_NOCOMMONGROUPS = RESTRICTIONS.REST_NOCOMMONGROUPS;
pub const REST_SEPARATEDESKTOPPROCESS = RESTRICTIONS.REST_SEPARATEDESKTOPPROCESS;
pub const REST_NOWEB = RESTRICTIONS.REST_NOWEB;
pub const REST_NOTRAYCONTEXTMENU = RESTRICTIONS.REST_NOTRAYCONTEXTMENU;
pub const REST_NOVIEWCONTEXTMENU = RESTRICTIONS.REST_NOVIEWCONTEXTMENU;
pub const REST_NONETCONNECTDISCONNECT = RESTRICTIONS.REST_NONETCONNECTDISCONNECT;
pub const REST_STARTMENULOGOFF = RESTRICTIONS.REST_STARTMENULOGOFF;
pub const REST_NOSETTINGSASSIST = RESTRICTIONS.REST_NOSETTINGSASSIST;
pub const REST_NOINTERNETICON = RESTRICTIONS.REST_NOINTERNETICON;
pub const REST_NORECENTDOCSHISTORY = RESTRICTIONS.REST_NORECENTDOCSHISTORY;
pub const REST_NORECENTDOCSMENU = RESTRICTIONS.REST_NORECENTDOCSMENU;
pub const REST_NOACTIVEDESKTOP = RESTRICTIONS.REST_NOACTIVEDESKTOP;
pub const REST_NOACTIVEDESKTOPCHANGES = RESTRICTIONS.REST_NOACTIVEDESKTOPCHANGES;
pub const REST_NOFAVORITESMENU = RESTRICTIONS.REST_NOFAVORITESMENU;
pub const REST_CLEARRECENTDOCSONEXIT = RESTRICTIONS.REST_CLEARRECENTDOCSONEXIT;
pub const REST_CLASSICSHELL = RESTRICTIONS.REST_CLASSICSHELL;
pub const REST_NOCUSTOMIZEWEBVIEW = RESTRICTIONS.REST_NOCUSTOMIZEWEBVIEW;
pub const REST_NOHTMLWALLPAPER = RESTRICTIONS.REST_NOHTMLWALLPAPER;
pub const REST_NOCHANGINGWALLPAPER = RESTRICTIONS.REST_NOCHANGINGWALLPAPER;
pub const REST_NODESKCOMP = RESTRICTIONS.REST_NODESKCOMP;
pub const REST_NOADDDESKCOMP = RESTRICTIONS.REST_NOADDDESKCOMP;
pub const REST_NODELDESKCOMP = RESTRICTIONS.REST_NODELDESKCOMP;
pub const REST_NOCLOSEDESKCOMP = RESTRICTIONS.REST_NOCLOSEDESKCOMP;
pub const REST_NOCLOSE_DRAGDROPBAND = RESTRICTIONS.REST_NOCLOSE_DRAGDROPBAND;
pub const REST_NOMOVINGBAND = RESTRICTIONS.REST_NOMOVINGBAND;
pub const REST_NOEDITDESKCOMP = RESTRICTIONS.REST_NOEDITDESKCOMP;
pub const REST_NORESOLVESEARCH = RESTRICTIONS.REST_NORESOLVESEARCH;
pub const REST_NORESOLVETRACK = RESTRICTIONS.REST_NORESOLVETRACK;
pub const REST_FORCECOPYACLWITHFILE = RESTRICTIONS.REST_FORCECOPYACLWITHFILE;
pub const REST_NOFORGETSOFTWAREUPDATE = RESTRICTIONS.REST_NOFORGETSOFTWAREUPDATE;
pub const REST_NOSETACTIVEDESKTOP = RESTRICTIONS.REST_NOSETACTIVEDESKTOP;
pub const REST_NOUPDATEWINDOWS = RESTRICTIONS.REST_NOUPDATEWINDOWS;
pub const REST_NOCHANGESTARMENU = RESTRICTIONS.REST_NOCHANGESTARMENU;
pub const REST_NOFOLDEROPTIONS = RESTRICTIONS.REST_NOFOLDEROPTIONS;
pub const REST_HASFINDCOMPUTERS = RESTRICTIONS.REST_HASFINDCOMPUTERS;
pub const REST_INTELLIMENUS = RESTRICTIONS.REST_INTELLIMENUS;
pub const REST_RUNDLGMEMCHECKBOX = RESTRICTIONS.REST_RUNDLGMEMCHECKBOX;
pub const REST_ARP_ShowPostSetup = RESTRICTIONS.REST_ARP_ShowPostSetup;
pub const REST_NOCSC = RESTRICTIONS.REST_NOCSC;
pub const REST_NOCONTROLPANEL = RESTRICTIONS.REST_NOCONTROLPANEL;
pub const REST_ENUMWORKGROUP = RESTRICTIONS.REST_ENUMWORKGROUP;
pub const REST_ARP_NOARP = RESTRICTIONS.REST_ARP_NOARP;
pub const REST_ARP_NOREMOVEPAGE = RESTRICTIONS.REST_ARP_NOREMOVEPAGE;
pub const REST_ARP_NOADDPAGE = RESTRICTIONS.REST_ARP_NOADDPAGE;
pub const REST_ARP_NOWINSETUPPAGE = RESTRICTIONS.REST_ARP_NOWINSETUPPAGE;
pub const REST_GREYMSIADS = RESTRICTIONS.REST_GREYMSIADS;
pub const REST_NOCHANGEMAPPEDDRIVELABEL = RESTRICTIONS.REST_NOCHANGEMAPPEDDRIVELABEL;
pub const REST_NOCHANGEMAPPEDDRIVECOMMENT = RESTRICTIONS.REST_NOCHANGEMAPPEDDRIVECOMMENT;
pub const REST_MaxRecentDocs = RESTRICTIONS.REST_MaxRecentDocs;
pub const REST_NONETWORKCONNECTIONS = RESTRICTIONS.REST_NONETWORKCONNECTIONS;
pub const REST_FORCESTARTMENULOGOFF = RESTRICTIONS.REST_FORCESTARTMENULOGOFF;
pub const REST_NOWEBVIEW = RESTRICTIONS.REST_NOWEBVIEW;
pub const REST_NOCUSTOMIZETHISFOLDER = RESTRICTIONS.REST_NOCUSTOMIZETHISFOLDER;
pub const REST_NOENCRYPTION = RESTRICTIONS.REST_NOENCRYPTION;
pub const REST_DONTSHOWSUPERHIDDEN = RESTRICTIONS.REST_DONTSHOWSUPERHIDDEN;
pub const REST_NOSHELLSEARCHBUTTON = RESTRICTIONS.REST_NOSHELLSEARCHBUTTON;
pub const REST_NOHARDWARETAB = RESTRICTIONS.REST_NOHARDWARETAB;
pub const REST_NORUNASINSTALLPROMPT = RESTRICTIONS.REST_NORUNASINSTALLPROMPT;
pub const REST_PROMPTRUNASINSTALLNETPATH = RESTRICTIONS.REST_PROMPTRUNASINSTALLNETPATH;
pub const REST_NOMANAGEMYCOMPUTERVERB = RESTRICTIONS.REST_NOMANAGEMYCOMPUTERVERB;
pub const REST_DISALLOWRUN = RESTRICTIONS.REST_DISALLOWRUN;
pub const REST_NOWELCOMESCREEN = RESTRICTIONS.REST_NOWELCOMESCREEN;
pub const REST_RESTRICTCPL = RESTRICTIONS.REST_RESTRICTCPL;
pub const REST_DISALLOWCPL = RESTRICTIONS.REST_DISALLOWCPL;
pub const REST_NOSMBALLOONTIP = RESTRICTIONS.REST_NOSMBALLOONTIP;
pub const REST_NOSMHELP = RESTRICTIONS.REST_NOSMHELP;
pub const REST_NOWINKEYS = RESTRICTIONS.REST_NOWINKEYS;
pub const REST_NOENCRYPTONMOVE = RESTRICTIONS.REST_NOENCRYPTONMOVE;
pub const REST_NOLOCALMACHINERUN = RESTRICTIONS.REST_NOLOCALMACHINERUN;
pub const REST_NOCURRENTUSERRUN = RESTRICTIONS.REST_NOCURRENTUSERRUN;
pub const REST_NOLOCALMACHINERUNONCE = RESTRICTIONS.REST_NOLOCALMACHINERUNONCE;
pub const REST_NOCURRENTUSERRUNONCE = RESTRICTIONS.REST_NOCURRENTUSERRUNONCE;
pub const REST_FORCEACTIVEDESKTOPON = RESTRICTIONS.REST_FORCEACTIVEDESKTOPON;
pub const REST_NOVIEWONDRIVE = RESTRICTIONS.REST_NOVIEWONDRIVE;
pub const REST_NONETCRAWL = RESTRICTIONS.REST_NONETCRAWL;
pub const REST_NOSHAREDDOCUMENTS = RESTRICTIONS.REST_NOSHAREDDOCUMENTS;
pub const REST_NOSMMYDOCS = RESTRICTIONS.REST_NOSMMYDOCS;
pub const REST_NOSMMYPICS = RESTRICTIONS.REST_NOSMMYPICS;
pub const REST_ALLOWBITBUCKDRIVES = RESTRICTIONS.REST_ALLOWBITBUCKDRIVES;
pub const REST_NONLEGACYSHELLMODE = RESTRICTIONS.REST_NONLEGACYSHELLMODE;
pub const REST_NOCONTROLPANELBARRICADE = RESTRICTIONS.REST_NOCONTROLPANELBARRICADE;
pub const REST_NOSTARTPAGE = RESTRICTIONS.REST_NOSTARTPAGE;
pub const REST_NOAUTOTRAYNOTIFY = RESTRICTIONS.REST_NOAUTOTRAYNOTIFY;
pub const REST_NOTASKGROUPING = RESTRICTIONS.REST_NOTASKGROUPING;
pub const REST_NOCDBURNING = RESTRICTIONS.REST_NOCDBURNING;
pub const REST_MYCOMPNOPROP = RESTRICTIONS.REST_MYCOMPNOPROP;
pub const REST_MYDOCSNOPROP = RESTRICTIONS.REST_MYDOCSNOPROP;
pub const REST_NOSTARTPANEL = RESTRICTIONS.REST_NOSTARTPANEL;
pub const REST_NODISPLAYAPPEARANCEPAGE = RESTRICTIONS.REST_NODISPLAYAPPEARANCEPAGE;
pub const REST_NOTHEMESTAB = RESTRICTIONS.REST_NOTHEMESTAB;
pub const REST_NOVISUALSTYLECHOICE = RESTRICTIONS.REST_NOVISUALSTYLECHOICE;
pub const REST_NOSIZECHOICE = RESTRICTIONS.REST_NOSIZECHOICE;
pub const REST_NOCOLORCHOICE = RESTRICTIONS.REST_NOCOLORCHOICE;
pub const REST_SETVISUALSTYLE = RESTRICTIONS.REST_SETVISUALSTYLE;
pub const REST_STARTRUNNOHOMEPATH = RESTRICTIONS.REST_STARTRUNNOHOMEPATH;
pub const REST_NOUSERNAMEINSTARTPANEL = RESTRICTIONS.REST_NOUSERNAMEINSTARTPANEL;
pub const REST_NOMYCOMPUTERICON = RESTRICTIONS.REST_NOMYCOMPUTERICON;
pub const REST_NOSMNETWORKPLACES = RESTRICTIONS.REST_NOSMNETWORKPLACES;
pub const REST_NOSMPINNEDLIST = RESTRICTIONS.REST_NOSMPINNEDLIST;
pub const REST_NOSMMYMUSIC = RESTRICTIONS.REST_NOSMMYMUSIC;
pub const REST_NOSMEJECTPC = RESTRICTIONS.REST_NOSMEJECTPC;
pub const REST_NOSMMOREPROGRAMS = RESTRICTIONS.REST_NOSMMOREPROGRAMS;
pub const REST_NOSMMFUPROGRAMS = RESTRICTIONS.REST_NOSMMFUPROGRAMS;
pub const REST_NOTRAYITEMSDISPLAY = RESTRICTIONS.REST_NOTRAYITEMSDISPLAY;
pub const REST_NOTOOLBARSONTASKBAR = RESTRICTIONS.REST_NOTOOLBARSONTASKBAR;
pub const REST_NOSMCONFIGUREPROGRAMS = RESTRICTIONS.REST_NOSMCONFIGUREPROGRAMS;
pub const REST_HIDECLOCK = RESTRICTIONS.REST_HIDECLOCK;
pub const REST_NOLOWDISKSPACECHECKS = RESTRICTIONS.REST_NOLOWDISKSPACECHECKS;
pub const REST_NOENTIRENETWORK = RESTRICTIONS.REST_NOENTIRENETWORK;
pub const REST_NODESKTOPCLEANUP = RESTRICTIONS.REST_NODESKTOPCLEANUP;
pub const REST_BITBUCKNUKEONDELETE = RESTRICTIONS.REST_BITBUCKNUKEONDELETE;
pub const REST_BITBUCKCONFIRMDELETE = RESTRICTIONS.REST_BITBUCKCONFIRMDELETE;
pub const REST_BITBUCKNOPROP = RESTRICTIONS.REST_BITBUCKNOPROP;
pub const REST_NODISPBACKGROUND = RESTRICTIONS.REST_NODISPBACKGROUND;
pub const REST_NODISPSCREENSAVEPG = RESTRICTIONS.REST_NODISPSCREENSAVEPG;
pub const REST_NODISPSETTINGSPG = RESTRICTIONS.REST_NODISPSETTINGSPG;
pub const REST_NODISPSCREENSAVEPREVIEW = RESTRICTIONS.REST_NODISPSCREENSAVEPREVIEW;
pub const REST_NODISPLAYCPL = RESTRICTIONS.REST_NODISPLAYCPL;
pub const REST_HIDERUNASVERB = RESTRICTIONS.REST_HIDERUNASVERB;
pub const REST_NOTHUMBNAILCACHE = RESTRICTIONS.REST_NOTHUMBNAILCACHE;
pub const REST_NOSTRCMPLOGICAL = RESTRICTIONS.REST_NOSTRCMPLOGICAL;
pub const REST_NOPUBLISHWIZARD = RESTRICTIONS.REST_NOPUBLISHWIZARD;
pub const REST_NOONLINEPRINTSWIZARD = RESTRICTIONS.REST_NOONLINEPRINTSWIZARD;
pub const REST_NOWEBSERVICES = RESTRICTIONS.REST_NOWEBSERVICES;
pub const REST_ALLOWUNHASHEDWEBVIEW = RESTRICTIONS.REST_ALLOWUNHASHEDWEBVIEW;
pub const REST_ALLOWLEGACYWEBVIEW = RESTRICTIONS.REST_ALLOWLEGACYWEBVIEW;
pub const REST_REVERTWEBVIEWSECURITY = RESTRICTIONS.REST_REVERTWEBVIEWSECURITY;
pub const REST_INHERITCONSOLEHANDLES = RESTRICTIONS.REST_INHERITCONSOLEHANDLES;
pub const REST_NOREMOTERECURSIVEEVENTS = RESTRICTIONS.REST_NOREMOTERECURSIVEEVENTS;
pub const REST_NOREMOTECHANGENOTIFY = RESTRICTIONS.REST_NOREMOTECHANGENOTIFY;
pub const REST_NOENUMENTIRENETWORK = RESTRICTIONS.REST_NOENUMENTIRENETWORK;
pub const REST_NOINTERNETOPENWITH = RESTRICTIONS.REST_NOINTERNETOPENWITH;
pub const REST_DONTRETRYBADNETNAME = RESTRICTIONS.REST_DONTRETRYBADNETNAME;
pub const REST_ALLOWFILECLSIDJUNCTIONS = RESTRICTIONS.REST_ALLOWFILECLSIDJUNCTIONS;
pub const REST_NOUPNPINSTALL = RESTRICTIONS.REST_NOUPNPINSTALL;
pub const REST_ARP_DONTGROUPPATCHES = RESTRICTIONS.REST_ARP_DONTGROUPPATCHES;
pub const REST_ARP_NOCHOOSEPROGRAMSPAGE = RESTRICTIONS.REST_ARP_NOCHOOSEPROGRAMSPAGE;
pub const REST_NODISCONNECT = RESTRICTIONS.REST_NODISCONNECT;
pub const REST_NOSECURITY = RESTRICTIONS.REST_NOSECURITY;
pub const REST_NOFILEASSOCIATE = RESTRICTIONS.REST_NOFILEASSOCIATE;
pub const REST_ALLOWCOMMENTTOGGLE = RESTRICTIONS.REST_ALLOWCOMMENTTOGGLE;

pub const tagOPEN_AS_INFO_FLAGS = extern enum(i32) {
    OAIF_ALLOW_REGISTRATION = 1,
    OAIF_REGISTER_EXT = 2,
    OAIF_EXEC = 4,
    OAIF_FORCE_REGISTRATION = 8,
    OAIF_HIDE_REGISTRATION = 32,
    OAIF_URL_PROTOCOL = 64,
    OAIF_FILE_IS_URI = 128,
};
pub const OAIF_ALLOW_REGISTRATION = tagOPEN_AS_INFO_FLAGS.OAIF_ALLOW_REGISTRATION;
pub const OAIF_REGISTER_EXT = tagOPEN_AS_INFO_FLAGS.OAIF_REGISTER_EXT;
pub const OAIF_EXEC = tagOPEN_AS_INFO_FLAGS.OAIF_EXEC;
pub const OAIF_FORCE_REGISTRATION = tagOPEN_AS_INFO_FLAGS.OAIF_FORCE_REGISTRATION;
pub const OAIF_HIDE_REGISTRATION = tagOPEN_AS_INFO_FLAGS.OAIF_HIDE_REGISTRATION;
pub const OAIF_URL_PROTOCOL = tagOPEN_AS_INFO_FLAGS.OAIF_URL_PROTOCOL;
pub const OAIF_FILE_IS_URI = tagOPEN_AS_INFO_FLAGS.OAIF_FILE_IS_URI;

pub const OPENASINFO = extern struct {
    pcszFile: [*:0]const u16,
    pcszClass: [*:0]const u16,
    oaifInFlags: i32,
};

const IID_IShellFolderViewCB_Value = @import("../zig.zig").Guid.initString("2047E320-F2A9-11CE-AE65-08002B2E1262");
pub const IID_IShellFolderViewCB = &IID_IShellFolderViewCB_Value;
pub const IShellFolderViewCB = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MessageSFVCB: fn(
            self: *const IShellFolderViewCB,
            uMsg: SFVM_MESSAGE_ID,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderViewCB_MessageSFVCB(self: *const T, uMsg: SFVM_MESSAGE_ID, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderViewCB.VTable, self.vtable).MessageSFVCB(@ptrCast(*const IShellFolderViewCB, self), uMsg, wParam, lParam);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const QCMINFO_IDMAP_PLACEMENT = extern struct {
    id: u32,
    fFlags: u32,
};

pub const QCMINFO_IDMAP = extern struct {
    nMaxIds: u32,
    pIdList: [1]QCMINFO_IDMAP_PLACEMENT,
};

pub const QCMINFO = extern struct {
    hmenu: HMENU,
    indexMenu: u32,
    idCmdFirst: u32,
    idCmdLast: u32,
    pIdMap: *const QCMINFO_IDMAP,
};

pub const DETAILSINFO = extern struct {
    pidl: *ITEMIDLIST,
    fmt: i32,
    cxChar: i32,
    str: STRRET,
    iImage: i32,
};

pub const SFVM_PROPPAGE_DATA = extern struct {
    dwReserved: u32,
    pfn: LPFNADDPROPSHEETPAGE,
    lParam: LPARAM,
};

pub const SFVM_HELPTOPIC_DATA = extern struct {
    wszHelpFile: [260]u16,
    wszHelpTopic: [260]u16,
};

pub const ITEMSPACING = extern struct {
    cxSmall: i32,
    cySmall: i32,
    cxLarge: i32,
    cyLarge: i32,
};

const IID_IShellFolderView_Value = @import("../zig.zig").Guid.initString("37A378C0-F82D-11CE-AE65-08002B2E1262");
pub const IID_IShellFolderView = &IID_IShellFolderView_Value;
pub const IShellFolderView = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Rearrange: fn(
            self: *const IShellFolderView,
            lParamSort: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetArrangeParam: fn(
            self: *const IShellFolderView,
            plParamSort: *LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ArrangeGrid: fn(
            self: *const IShellFolderView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AutoArrange: fn(
            self: *const IShellFolderView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutoArrange: fn(
            self: *const IShellFolderView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddObject: fn(
            self: *const IShellFolderView,
            pidl: *ITEMIDLIST,
            puItem: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObject: fn(
            self: *const IShellFolderView,
            ppidl: **ITEMIDLIST,
            uItem: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveObject: fn(
            self: *const IShellFolderView,
            pidl: ?*ITEMIDLIST,
            puItem: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectCount: fn(
            self: *const IShellFolderView,
            puCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetObjectCount: fn(
            self: *const IShellFolderView,
            uCount: u32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateObject: fn(
            self: *const IShellFolderView,
            pidlOld: *ITEMIDLIST,
            pidlNew: *ITEMIDLIST,
            puItem: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshObject: fn(
            self: *const IShellFolderView,
            pidl: *ITEMIDLIST,
            puItem: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedraw: fn(
            self: *const IShellFolderView,
            bRedraw: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedCount: fn(
            self: *const IShellFolderView,
            puSelected: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedObjects: fn(
            self: *const IShellFolderView,
            pppidl: ***ITEMIDLIST,
            puItems: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDropOnSource: fn(
            self: *const IShellFolderView,
            pDropTarget: ?*IDropTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDragPoint: fn(
            self: *const IShellFolderView,
            ppt: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDropPoint: fn(
            self: *const IShellFolderView,
            ppt: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveIcons: fn(
            self: *const IShellFolderView,
            pDataObject: *IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemPos: fn(
            self: *const IShellFolderView,
            pidl: *ITEMIDLIST,
            ppt: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsBkDropTarget: fn(
            self: *const IShellFolderView,
            pDropTarget: ?*IDropTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClipboard: fn(
            self: *const IShellFolderView,
            bMove: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPoints: fn(
            self: *const IShellFolderView,
            pDataObject: *IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemSpacing: fn(
            self: *const IShellFolderView,
            pSpacing: *ITEMSPACING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCallback: fn(
            self: *const IShellFolderView,
            pNewCB: ?*IShellFolderViewCB,
            ppOldCB: ?*?*IShellFolderViewCB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Select: fn(
            self: *const IShellFolderView,
            dwFlags: SFVS_SELECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QuerySupport: fn(
            self: *const IShellFolderView,
            pdwSupport: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAutomationObject: fn(
            self: *const IShellFolderView,
            pdisp: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_Rearrange(self: *const T, lParamSort: LPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).Rearrange(@ptrCast(*const IShellFolderView, self), lParamSort);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_GetArrangeParam(self: *const T, plParamSort: *LPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).GetArrangeParam(@ptrCast(*const IShellFolderView, self), plParamSort);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_ArrangeGrid(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).ArrangeGrid(@ptrCast(*const IShellFolderView, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_AutoArrange(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).AutoArrange(@ptrCast(*const IShellFolderView, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_GetAutoArrange(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).GetAutoArrange(@ptrCast(*const IShellFolderView, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_AddObject(self: *const T, pidl: *ITEMIDLIST, puItem: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).AddObject(@ptrCast(*const IShellFolderView, self), pidl, puItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_GetObject(self: *const T, ppidl: **ITEMIDLIST, uItem: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).GetObject(@ptrCast(*const IShellFolderView, self), ppidl, uItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_RemoveObject(self: *const T, pidl: ?*ITEMIDLIST, puItem: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).RemoveObject(@ptrCast(*const IShellFolderView, self), pidl, puItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_GetObjectCount(self: *const T, puCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).GetObjectCount(@ptrCast(*const IShellFolderView, self), puCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_SetObjectCount(self: *const T, uCount: u32, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).SetObjectCount(@ptrCast(*const IShellFolderView, self), uCount, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_UpdateObject(self: *const T, pidlOld: *ITEMIDLIST, pidlNew: *ITEMIDLIST, puItem: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).UpdateObject(@ptrCast(*const IShellFolderView, self), pidlOld, pidlNew, puItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_RefreshObject(self: *const T, pidl: *ITEMIDLIST, puItem: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).RefreshObject(@ptrCast(*const IShellFolderView, self), pidl, puItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_SetRedraw(self: *const T, bRedraw: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).SetRedraw(@ptrCast(*const IShellFolderView, self), bRedraw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_GetSelectedCount(self: *const T, puSelected: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).GetSelectedCount(@ptrCast(*const IShellFolderView, self), puSelected);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_GetSelectedObjects(self: *const T, pppidl: ***ITEMIDLIST, puItems: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).GetSelectedObjects(@ptrCast(*const IShellFolderView, self), pppidl, puItems);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_IsDropOnSource(self: *const T, pDropTarget: ?*IDropTarget) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).IsDropOnSource(@ptrCast(*const IShellFolderView, self), pDropTarget);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_GetDragPoint(self: *const T, ppt: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).GetDragPoint(@ptrCast(*const IShellFolderView, self), ppt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_GetDropPoint(self: *const T, ppt: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).GetDropPoint(@ptrCast(*const IShellFolderView, self), ppt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_MoveIcons(self: *const T, pDataObject: *IDataObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).MoveIcons(@ptrCast(*const IShellFolderView, self), pDataObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_SetItemPos(self: *const T, pidl: *ITEMIDLIST, ppt: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).SetItemPos(@ptrCast(*const IShellFolderView, self), pidl, ppt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_IsBkDropTarget(self: *const T, pDropTarget: ?*IDropTarget) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).IsBkDropTarget(@ptrCast(*const IShellFolderView, self), pDropTarget);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_SetClipboard(self: *const T, bMove: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).SetClipboard(@ptrCast(*const IShellFolderView, self), bMove);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_SetPoints(self: *const T, pDataObject: *IDataObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).SetPoints(@ptrCast(*const IShellFolderView, self), pDataObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_GetItemSpacing(self: *const T, pSpacing: *ITEMSPACING) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).GetItemSpacing(@ptrCast(*const IShellFolderView, self), pSpacing);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_SetCallback(self: *const T, pNewCB: ?*IShellFolderViewCB, ppOldCB: ?*?*IShellFolderViewCB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).SetCallback(@ptrCast(*const IShellFolderView, self), pNewCB, ppOldCB);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_Select(self: *const T, dwFlags: SFVS_SELECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).Select(@ptrCast(*const IShellFolderView, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_QuerySupport(self: *const T, pdwSupport: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).QuerySupport(@ptrCast(*const IShellFolderView, self), pdwSupport);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderView_SetAutomationObject(self: *const T, pdisp: ?*IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderView.VTable, self.vtable).SetAutomationObject(@ptrCast(*const IShellFolderView, self), pdisp);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SFV_CREATE = extern struct {
    cbSize: u32,
    pshf: *IShellFolder,
    psvOuter: *IShellView,
    psfvcb: *IShellFolderViewCB,
};

pub const LPFNDFMCALLBACK = fn(
    psf: ?*IShellFolder,
    hwnd: HWND,
    pdtobj: ?*IDataObject,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const DEFCONTEXTMENU = extern struct {
    hwnd: HWND,
    pcmcb: *IContextMenuCB,
    pidlFolder: *ITEMIDLIST,
    psf: *IShellFolder,
    cidl: u32,
    apidl: **ITEMIDLIST,
    punkAssociationInfo: *IUnknown,
    cKeys: u32,
    aKeys: *const HKEY,
};

pub const DFMICS = extern struct {
    cbSize: u32,
    fMask: u32,
    lParam: LPARAM,
    idCmdFirst: u32,
    idDefMax: u32,
    pici: *CMINVOKECOMMANDINFO,
    punkSite: *IUnknown,
};

pub const LPFNVIEWCALLBACK = fn(
    psvOuter: *IShellView,
    psf: *IShellFolder,
    hwndMain: HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const CSFV = extern struct {
    cbSize: u32,
    pshf: *IShellFolder,
    psvOuter: *IShellView,
    pidl: *ITEMIDLIST,
    lEvents: i32,
    pfnCallback: LPFNVIEWCALLBACK,
    fvm: FOLDERVIEWMODE,
};

pub const SHELLSTATEA = extern struct {
    _bitfield1: i32,
    dwWin95Unused: u32,
    uWin95Unused: u32,
    lParamSort: i32,
    iSortDirection: i32,
    version: u32,
    uNotUsed: u32,
    _bitfield2: i32,
};

pub const SHELLSTATEW = extern struct {
    _bitfield1: i32,
    dwWin95Unused: u32,
    uWin95Unused: u32,
    lParamSort: i32,
    iSortDirection: i32,
    version: u32,
    uNotUsed: u32,
    _bitfield2: i32,
};

pub const SHELLFLAGSTATE = extern struct {
    _bitfield: i32,
};

const IID_INamedPropertyBag_Value = @import("../zig.zig").Guid.initString("FB700430-952C-11D1-946F-000000000000");
pub const IID_INamedPropertyBag = &IID_INamedPropertyBag_Value;
pub const INamedPropertyBag = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReadPropertyNPB: fn(
            self: *const INamedPropertyBag,
            pszBagname: [*:0]const u16,
            pszPropName: [*:0]const u16,
            pVar: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WritePropertyNPB: fn(
            self: *const INamedPropertyBag,
            pszBagname: [*:0]const u16,
            pszPropName: [*:0]const u16,
            pVar: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemovePropertyNPB: fn(
            self: *const INamedPropertyBag,
            pszBagname: [*:0]const u16,
            pszPropName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INamedPropertyBag_ReadPropertyNPB(self: *const T, pszBagname: [*:0]const u16, pszPropName: [*:0]const u16, pVar: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const INamedPropertyBag.VTable, self.vtable).ReadPropertyNPB(@ptrCast(*const INamedPropertyBag, self), pszBagname, pszPropName, pVar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INamedPropertyBag_WritePropertyNPB(self: *const T, pszBagname: [*:0]const u16, pszPropName: [*:0]const u16, pVar: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const INamedPropertyBag.VTable, self.vtable).WritePropertyNPB(@ptrCast(*const INamedPropertyBag, self), pszBagname, pszPropName, pVar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INamedPropertyBag_RemovePropertyNPB(self: *const T, pszBagname: [*:0]const u16, pszPropName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const INamedPropertyBag.VTable, self.vtable).RemovePropertyNPB(@ptrCast(*const INamedPropertyBag, self), pszBagname, pszPropName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IESHORTCUTFLAGS = extern enum(i32) {
    IESHORTCUT_NEWBROWSER = 1,
    IESHORTCUT_OPENNEWTAB = 2,
    IESHORTCUT_FORCENAVIGATE = 4,
    IESHORTCUT_BACKGROUNDTAB = 8,
};
pub const IESHORTCUT_NEWBROWSER = IESHORTCUTFLAGS.IESHORTCUT_NEWBROWSER;
pub const IESHORTCUT_OPENNEWTAB = IESHORTCUTFLAGS.IESHORTCUT_OPENNEWTAB;
pub const IESHORTCUT_FORCENAVIGATE = IESHORTCUTFLAGS.IESHORTCUT_FORCENAVIGATE;
pub const IESHORTCUT_BACKGROUNDTAB = IESHORTCUTFLAGS.IESHORTCUT_BACKGROUNDTAB;

const IID_INewShortcutHookA_Value = @import("../zig.zig").Guid.initString("000214E1-0000-0000-C000-000000000046");
pub const IID_INewShortcutHookA = &IID_INewShortcutHookA_Value;
pub const INewShortcutHookA = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetReferent: fn(
            self: *const INewShortcutHookA,
            pcszReferent: [*:0]const u8,
            hwnd: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReferent: fn(
            self: *const INewShortcutHookA,
            pszReferent: [*:0]u8,
            cchReferent: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolder: fn(
            self: *const INewShortcutHookA,
            pcszFolder: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: fn(
            self: *const INewShortcutHookA,
            pszFolder: [*:0]u8,
            cchFolder: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: fn(
            self: *const INewShortcutHookA,
            pszName: [*:0]u8,
            cchName: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExtension: fn(
            self: *const INewShortcutHookA,
            pszExtension: [*:0]u8,
            cchExtension: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INewShortcutHookA_SetReferent(self: *const T, pcszReferent: [*:0]const u8, hwnd: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const INewShortcutHookA.VTable, self.vtable).SetReferent(@ptrCast(*const INewShortcutHookA, self), pcszReferent, hwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INewShortcutHookA_GetReferent(self: *const T, pszReferent: [*:0]u8, cchReferent: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INewShortcutHookA.VTable, self.vtable).GetReferent(@ptrCast(*const INewShortcutHookA, self), pszReferent, cchReferent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INewShortcutHookA_SetFolder(self: *const T, pcszFolder: [*:0]const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const INewShortcutHookA.VTable, self.vtable).SetFolder(@ptrCast(*const INewShortcutHookA, self), pcszFolder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INewShortcutHookA_GetFolder(self: *const T, pszFolder: [*:0]u8, cchFolder: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INewShortcutHookA.VTable, self.vtable).GetFolder(@ptrCast(*const INewShortcutHookA, self), pszFolder, cchFolder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INewShortcutHookA_GetName(self: *const T, pszName: [*:0]u8, cchName: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INewShortcutHookA.VTable, self.vtable).GetName(@ptrCast(*const INewShortcutHookA, self), pszName, cchName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INewShortcutHookA_GetExtension(self: *const T, pszExtension: [*:0]u8, cchExtension: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INewShortcutHookA.VTable, self.vtable).GetExtension(@ptrCast(*const INewShortcutHookA, self), pszExtension, cchExtension);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_INewShortcutHookW_Value = @import("../zig.zig").Guid.initString("000214F7-0000-0000-C000-000000000046");
pub const IID_INewShortcutHookW = &IID_INewShortcutHookW_Value;
pub const INewShortcutHookW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetReferent: fn(
            self: *const INewShortcutHookW,
            pcszReferent: [*:0]const u16,
            hwnd: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReferent: fn(
            self: *const INewShortcutHookW,
            pszReferent: [*:0]u16,
            cchReferent: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolder: fn(
            self: *const INewShortcutHookW,
            pcszFolder: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: fn(
            self: *const INewShortcutHookW,
            pszFolder: [*:0]u16,
            cchFolder: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: fn(
            self: *const INewShortcutHookW,
            pszName: [*:0]u16,
            cchName: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExtension: fn(
            self: *const INewShortcutHookW,
            pszExtension: [*:0]u16,
            cchExtension: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INewShortcutHookW_SetReferent(self: *const T, pcszReferent: [*:0]const u16, hwnd: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const INewShortcutHookW.VTable, self.vtable).SetReferent(@ptrCast(*const INewShortcutHookW, self), pcszReferent, hwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INewShortcutHookW_GetReferent(self: *const T, pszReferent: [*:0]u16, cchReferent: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INewShortcutHookW.VTable, self.vtable).GetReferent(@ptrCast(*const INewShortcutHookW, self), pszReferent, cchReferent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INewShortcutHookW_SetFolder(self: *const T, pcszFolder: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const INewShortcutHookW.VTable, self.vtable).SetFolder(@ptrCast(*const INewShortcutHookW, self), pcszFolder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INewShortcutHookW_GetFolder(self: *const T, pszFolder: [*:0]u16, cchFolder: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INewShortcutHookW.VTable, self.vtable).GetFolder(@ptrCast(*const INewShortcutHookW, self), pszFolder, cchFolder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INewShortcutHookW_GetName(self: *const T, pszName: [*:0]u16, cchName: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INewShortcutHookW.VTable, self.vtable).GetName(@ptrCast(*const INewShortcutHookW, self), pszName, cchName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INewShortcutHookW_GetExtension(self: *const T, pszExtension: [*:0]u16, cchExtension: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INewShortcutHookW.VTable, self.vtable).GetExtension(@ptrCast(*const INewShortcutHookW, self), pszExtension, cchExtension);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICopyHookA_Value = @import("../zig.zig").Guid.initString("000214EF-0000-0000-C000-000000000046");
pub const IID_ICopyHookA = &IID_ICopyHookA_Value;
pub const ICopyHookA = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CopyCallback: fn(
            self: *const ICopyHookA,
            hwnd: HWND,
            wFunc: u32,
            wFlags: u32,
            pszSrcFile: [*:0]const u8,
            dwSrcAttribs: u32,
            pszDestFile: ?[*:0]const u8,
            dwDestAttribs: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICopyHookA_CopyCallback(self: *const T, hwnd: HWND, wFunc: u32, wFlags: u32, pszSrcFile: [*:0]const u8, dwSrcAttribs: u32, pszDestFile: ?[*:0]const u8, dwDestAttribs: u32) callconv(.Inline) u32 {
            return @ptrCast(*const ICopyHookA.VTable, self.vtable).CopyCallback(@ptrCast(*const ICopyHookA, self), hwnd, wFunc, wFlags, pszSrcFile, dwSrcAttribs, pszDestFile, dwDestAttribs);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICopyHookW_Value = @import("../zig.zig").Guid.initString("000214FC-0000-0000-C000-000000000046");
pub const IID_ICopyHookW = &IID_ICopyHookW_Value;
pub const ICopyHookW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CopyCallback: fn(
            self: *const ICopyHookW,
            hwnd: HWND,
            wFunc: u32,
            wFlags: u32,
            pszSrcFile: [*:0]const u16,
            dwSrcAttribs: u32,
            pszDestFile: ?[*:0]const u16,
            dwDestAttribs: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICopyHookW_CopyCallback(self: *const T, hwnd: HWND, wFunc: u32, wFlags: u32, pszSrcFile: [*:0]const u16, dwSrcAttribs: u32, pszDestFile: ?[*:0]const u16, dwDestAttribs: u32) callconv(.Inline) u32 {
            return @ptrCast(*const ICopyHookW.VTable, self.vtable).CopyCallback(@ptrCast(*const ICopyHookW, self), hwnd, wFunc, wFlags, pszSrcFile, dwSrcAttribs, pszDestFile, dwDestAttribs);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICurrentWorkingDirectory_Value = @import("../zig.zig").Guid.initString("91956D21-9276-11D1-921A-006097DF5BD4");
pub const IID_ICurrentWorkingDirectory = &IID_ICurrentWorkingDirectory_Value;
pub const ICurrentWorkingDirectory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDirectory: fn(
            self: *const ICurrentWorkingDirectory,
            pwzPath: [*:0]u16,
            cchSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDirectory: fn(
            self: *const ICurrentWorkingDirectory,
            pwzPath: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICurrentWorkingDirectory_GetDirectory(self: *const T, pwzPath: [*:0]u16, cchSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICurrentWorkingDirectory.VTable, self.vtable).GetDirectory(@ptrCast(*const ICurrentWorkingDirectory, self), pwzPath, cchSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICurrentWorkingDirectory_SetDirectory(self: *const T, pwzPath: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICurrentWorkingDirectory.VTable, self.vtable).SetDirectory(@ptrCast(*const ICurrentWorkingDirectory, self), pwzPath);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDockingWindowFrame_Value = @import("../zig.zig").Guid.initString("47D2657A-7B27-11D0-8CA9-00A0C92DBFE8");
pub const IID_IDockingWindowFrame = &IID_IDockingWindowFrame_Value;
pub const IDockingWindowFrame = extern struct {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        AddToolbar: fn(
            self: *const IDockingWindowFrame,
            punkSrc: *IUnknown,
            pwszItem: [*:0]const u16,
            dwAddFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveToolbar: fn(
            self: *const IDockingWindowFrame,
            punkSrc: *IUnknown,
            dwRemoveFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindToolbar: fn(
            self: *const IDockingWindowFrame,
            pwszItem: [*:0]const u16,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOleWindow.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDockingWindowFrame_AddToolbar(self: *const T, punkSrc: *IUnknown, pwszItem: [*:0]const u16, dwAddFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDockingWindowFrame.VTable, self.vtable).AddToolbar(@ptrCast(*const IDockingWindowFrame, self), punkSrc, pwszItem, dwAddFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDockingWindowFrame_RemoveToolbar(self: *const T, punkSrc: *IUnknown, dwRemoveFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDockingWindowFrame.VTable, self.vtable).RemoveToolbar(@ptrCast(*const IDockingWindowFrame, self), punkSrc, dwRemoveFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDockingWindowFrame_FindToolbar(self: *const T, pwszItem: [*:0]const u16, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDockingWindowFrame.VTable, self.vtable).FindToolbar(@ptrCast(*const IDockingWindowFrame, self), pwszItem, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IThumbnailCapture_Value = @import("../zig.zig").Guid.initString("4EA39266-7211-409F-B622-F63DBD16C533");
pub const IID_IThumbnailCapture = &IID_IThumbnailCapture_Value;
pub const IThumbnailCapture = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CaptureThumbnail: fn(
            self: *const IThumbnailCapture,
            pMaxSize: *const SIZE,
            pHTMLDoc2: *IUnknown,
            phbmThumbnail: *HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThumbnailCapture_CaptureThumbnail(self: *const T, pMaxSize: *const SIZE, pHTMLDoc2: *IUnknown, phbmThumbnail: *HBITMAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThumbnailCapture.VTable, self.vtable).CaptureThumbnail(@ptrCast(*const IThumbnailCapture, self), pMaxSize, pHTMLDoc2, phbmThumbnail);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const BANDINFOSFB = extern struct {
    dwMask: u32,
    dwStateMask: u32,
    dwState: u32,
    crBkgnd: u32,
    crBtnLt: u32,
    crBtnDk: u32,
    wViewMode: u16,
    wAlign: u16,
    psf: *IShellFolder,
    pidl: *ITEMIDLIST,
};

const IID_IShellFolderBand_Value = @import("../zig.zig").Guid.initString("7FE80CC8-C247-11D0-B93A-00A0C90312E1");
pub const IID_IShellFolderBand = &IID_IShellFolderBand_Value;
pub const IShellFolderBand = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitializeSFB: fn(
            self: *const IShellFolderBand,
            psf: ?*IShellFolder,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBandInfoSFB: fn(
            self: *const IShellFolderBand,
            pbi: *BANDINFOSFB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBandInfoSFB: fn(
            self: *const IShellFolderBand,
            pbi: *BANDINFOSFB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderBand_InitializeSFB(self: *const T, psf: ?*IShellFolder, pidl: ?*ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderBand.VTable, self.vtable).InitializeSFB(@ptrCast(*const IShellFolderBand, self), psf, pidl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderBand_SetBandInfoSFB(self: *const T, pbi: *BANDINFOSFB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderBand.VTable, self.vtable).SetBandInfoSFB(@ptrCast(*const IShellFolderBand, self), pbi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellFolderBand_GetBandInfoSFB(self: *const T, pbi: *BANDINFOSFB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellFolderBand.VTable, self.vtable).GetBandInfoSFB(@ptrCast(*const IShellFolderBand, self), pbi);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDeskBarClient_Value = @import("../zig.zig").Guid.initString("EB0FE175-1A3A-11D0-89B3-00A0C90A90AC");
pub const IID_IDeskBarClient = &IID_IDeskBarClient_Value;
pub const IDeskBarClient = extern struct {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        SetDeskBarSite: fn(
            self: *const IDeskBarClient,
            punkSite: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetModeDBC: fn(
            self: *const IDeskBarClient,
            dwMode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UIActivateDBC: fn(
            self: *const IDeskBarClient,
            dwState: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: fn(
            self: *const IDeskBarClient,
            dwWhich: u32,
            prc: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOleWindow.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDeskBarClient_SetDeskBarSite(self: *const T, punkSite: ?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDeskBarClient.VTable, self.vtable).SetDeskBarSite(@ptrCast(*const IDeskBarClient, self), punkSite);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDeskBarClient_SetModeDBC(self: *const T, dwMode: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDeskBarClient.VTable, self.vtable).SetModeDBC(@ptrCast(*const IDeskBarClient, self), dwMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDeskBarClient_UIActivateDBC(self: *const T, dwState: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDeskBarClient.VTable, self.vtable).UIActivateDBC(@ptrCast(*const IDeskBarClient, self), dwState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDeskBarClient_GetSize(self: *const T, dwWhich: u32, prc: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDeskBarClient.VTable, self.vtable).GetSize(@ptrCast(*const IDeskBarClient, self), dwWhich, prc);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SHCOLUMNINFO = extern struct {
    scid: PROPERTYKEY,
    vt: u16,
    fmt: u32,
    cChars: u32,
    csFlags: u32,
    wszTitle: [80]u16,
    wszDescription: [128]u16,
};

pub const SHCOLUMNINIT = extern struct {
    dwFlags: u32,
    dwReserved: u32,
    wszFolder: [260]u16,
};

pub const SHCOLUMNDATA = extern struct {
    dwFlags: u32,
    dwFileAttributes: u32,
    dwReserved: u32,
    pwszExt: PWSTR,
    wszFile: [260]u16,
};

const IID_IColumnProvider_Value = @import("../zig.zig").Guid.initString("E8025004-1C42-11D2-BE2C-00A0C9A83DA1");
pub const IID_IColumnProvider = &IID_IColumnProvider_Value;
pub const IColumnProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IColumnProvider,
            psci: *SHCOLUMNINIT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnInfo: fn(
            self: *const IColumnProvider,
            dwIndex: u32,
            psci: *SHCOLUMNINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemData: fn(
            self: *const IColumnProvider,
            pscid: *PROPERTYKEY,
            pscd: *SHCOLUMNDATA,
            pvarData: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IColumnProvider_Initialize(self: *const T, psci: *SHCOLUMNINIT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IColumnProvider.VTable, self.vtable).Initialize(@ptrCast(*const IColumnProvider, self), psci);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IColumnProvider_GetColumnInfo(self: *const T, dwIndex: u32, psci: *SHCOLUMNINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IColumnProvider.VTable, self.vtable).GetColumnInfo(@ptrCast(*const IColumnProvider, self), dwIndex, psci);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IColumnProvider_GetItemData(self: *const T, pscid: *PROPERTYKEY, pscd: *SHCOLUMNDATA, pvarData: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IColumnProvider.VTable, self.vtable).GetItemData(@ptrCast(*const IColumnProvider, self), pscid, pscd, pvarData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SHChangeProductKeyAsIDList = extern struct {
    cb: u16,
    wszProductKey: [39]u16,
    cbZero: u16,
};

const IID_IDocViewSite_Value = @import("../zig.zig").Guid.initString("87D605E0-C511-11CF-89A9-00A0C9054129");
pub const IID_IDocViewSite = &IID_IDocViewSite_Value;
pub const IDocViewSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnSetTitle: fn(
            self: *const IDocViewSite,
            pvTitle: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDocViewSite_OnSetTitle(self: *const T, pvTitle: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDocViewSite.VTable, self.vtable).OnSetTitle(@ptrCast(*const IDocViewSite, self), pvTitle);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInitializeObject_Value = @import("../zig.zig").Guid.initString("4622AD16-FF23-11D0-8D34-00A0C90F2719");
pub const IID_IInitializeObject = &IID_IInitializeObject_Value;
pub const IInitializeObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IInitializeObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInitializeObject_Initialize(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInitializeObject.VTable, self.vtable).Initialize(@ptrCast(*const IInitializeObject, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IBanneredBar_Value = @import("../zig.zig").Guid.initString("596A9A94-013E-11D1-8D34-00A0C90F2719");
pub const IID_IBanneredBar = &IID_IBanneredBar_Value;
pub const IBanneredBar = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetIconSize: fn(
            self: *const IBanneredBar,
            iIcon: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconSize: fn(
            self: *const IBanneredBar,
            piIcon: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBitmap: fn(
            self: *const IBanneredBar,
            hBitmap: HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitmap: fn(
            self: *const IBanneredBar,
            phBitmap: *HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBanneredBar_SetIconSize(self: *const T, iIcon: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBanneredBar.VTable, self.vtable).SetIconSize(@ptrCast(*const IBanneredBar, self), iIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBanneredBar_GetIconSize(self: *const T, piIcon: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBanneredBar.VTable, self.vtable).GetIconSize(@ptrCast(*const IBanneredBar, self), piIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBanneredBar_SetBitmap(self: *const T, hBitmap: HBITMAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBanneredBar.VTable, self.vtable).SetBitmap(@ptrCast(*const IBanneredBar, self), hBitmap);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBanneredBar_GetBitmap(self: *const T, phBitmap: *HBITMAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBanneredBar.VTable, self.vtable).GetBitmap(@ptrCast(*const IBanneredBar, self), phBitmap);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const TBINFO = extern struct {
    cbuttons: u32,
    uFlags: u32,
};

pub const SFV_SETITEMPOS = extern struct {
    pidl: *ITEMIDLIST,
    pt: POINT,
};

pub const AASHELLMENUFILENAME = extern struct {
    cbTotal: i16,
    rgbReserved: [12]u8,
    szFileName: [1]u16,
};

pub const AASHELLMENUITEM = extern struct {
    lpReserved1: *c_void,
    iReserved: i32,
    uiReserved: u32,
    lpName: *AASHELLMENUFILENAME,
    psz: PWSTR,
};

pub const DISPLAY_DEVICE_TYPE = extern enum(i32) {
    DEVICE_PRIMARY = 0,
    DEVICE_IMMERSIVE = 1,
};
pub const DEVICE_PRIMARY = DISPLAY_DEVICE_TYPE.DEVICE_PRIMARY;
pub const DEVICE_IMMERSIVE = DISPLAY_DEVICE_TYPE.DEVICE_IMMERSIVE;

pub const SCALE_CHANGE_FLAGS = extern enum(i32) {
    SCF_VALUE_NONE = 0,
    SCF_SCALE = 1,
    SCF_PHYSICAL = 2,
};
pub const SCF_VALUE_NONE = SCALE_CHANGE_FLAGS.SCF_VALUE_NONE;
pub const SCF_SCALE = SCALE_CHANGE_FLAGS.SCF_SCALE;
pub const SCF_PHYSICAL = SCALE_CHANGE_FLAGS.SCF_PHYSICAL;

pub const SHELL_UI_COMPONENT = extern enum(i32) {
    TASKBARS = 0,
    NOTIFICATIONAREA = 1,
    DESKBAND = 2,
};
pub const SHELL_UI_COMPONENT_TASKBARS = SHELL_UI_COMPONENT.TASKBARS;
pub const SHELL_UI_COMPONENT_NOTIFICATIONAREA = SHELL_UI_COMPONENT.NOTIFICATIONAREA;
pub const SHELL_UI_COMPONENT_DESKBAND = SHELL_UI_COMPONENT.DESKBAND;

pub const tagSFBS_FLAGS = extern enum(i32) {
    SFBS_FLAGS_ROUND_TO_NEAREST_DISPLAYED_DIGIT = 1,
    SFBS_FLAGS_TRUNCATE_UNDISPLAYED_DECIMAL_DIGITS = 2,
};
pub const SFBS_FLAGS_ROUND_TO_NEAREST_DISPLAYED_DIGIT = tagSFBS_FLAGS.SFBS_FLAGS_ROUND_TO_NEAREST_DISPLAYED_DIGIT;
pub const SFBS_FLAGS_TRUNCATE_UNDISPLAYED_DECIMAL_DIGITS = tagSFBS_FLAGS.SFBS_FLAGS_TRUNCATE_UNDISPLAYED_DECIMAL_DIGITS;

pub const URL_SCHEME = extern enum(i32) {
    INVALID = -1,
    UNKNOWN = 0,
    FTP = 1,
    HTTP = 2,
    GOPHER = 3,
    MAILTO = 4,
    NEWS = 5,
    NNTP = 6,
    TELNET = 7,
    WAIS = 8,
    FILE = 9,
    MK = 10,
    HTTPS = 11,
    SHELL = 12,
    SNEWS = 13,
    LOCAL = 14,
    JAVASCRIPT = 15,
    VBSCRIPT = 16,
    ABOUT = 17,
    RES = 18,
    MSSHELLROOTED = 19,
    MSSHELLIDLIST = 20,
    MSHELP = 21,
    MSSHELLDEVICE = 22,
    WILDCARD = 23,
    SEARCH_MS = 24,
    SEARCH = 25,
    KNOWNFOLDER = 26,
    MAXVALUE = 27,
};
pub const URL_SCHEME_INVALID = URL_SCHEME.INVALID;
pub const URL_SCHEME_UNKNOWN = URL_SCHEME.UNKNOWN;
pub const URL_SCHEME_FTP = URL_SCHEME.FTP;
pub const URL_SCHEME_HTTP = URL_SCHEME.HTTP;
pub const URL_SCHEME_GOPHER = URL_SCHEME.GOPHER;
pub const URL_SCHEME_MAILTO = URL_SCHEME.MAILTO;
pub const URL_SCHEME_NEWS = URL_SCHEME.NEWS;
pub const URL_SCHEME_NNTP = URL_SCHEME.NNTP;
pub const URL_SCHEME_TELNET = URL_SCHEME.TELNET;
pub const URL_SCHEME_WAIS = URL_SCHEME.WAIS;
pub const URL_SCHEME_FILE = URL_SCHEME.FILE;
pub const URL_SCHEME_MK = URL_SCHEME.MK;
pub const URL_SCHEME_HTTPS = URL_SCHEME.HTTPS;
pub const URL_SCHEME_SHELL = URL_SCHEME.SHELL;
pub const URL_SCHEME_SNEWS = URL_SCHEME.SNEWS;
pub const URL_SCHEME_LOCAL = URL_SCHEME.LOCAL;
pub const URL_SCHEME_JAVASCRIPT = URL_SCHEME.JAVASCRIPT;
pub const URL_SCHEME_VBSCRIPT = URL_SCHEME.VBSCRIPT;
pub const URL_SCHEME_ABOUT = URL_SCHEME.ABOUT;
pub const URL_SCHEME_RES = URL_SCHEME.RES;
pub const URL_SCHEME_MSSHELLROOTED = URL_SCHEME.MSSHELLROOTED;
pub const URL_SCHEME_MSSHELLIDLIST = URL_SCHEME.MSSHELLIDLIST;
pub const URL_SCHEME_MSHELP = URL_SCHEME.MSHELP;
pub const URL_SCHEME_MSSHELLDEVICE = URL_SCHEME.MSSHELLDEVICE;
pub const URL_SCHEME_WILDCARD = URL_SCHEME.WILDCARD;
pub const URL_SCHEME_SEARCH_MS = URL_SCHEME.SEARCH_MS;
pub const URL_SCHEME_SEARCH = URL_SCHEME.SEARCH;
pub const URL_SCHEME_KNOWNFOLDER = URL_SCHEME.KNOWNFOLDER;
pub const URL_SCHEME_MAXVALUE = URL_SCHEME.MAXVALUE;

pub const URL_PART = extern enum(i32) {
    NONE = 0,
    SCHEME = 1,
    HOSTNAME = 2,
    USERNAME = 3,
    PASSWORD = 4,
    PORT = 5,
    QUERY = 6,
};
pub const URL_PART_NONE = URL_PART.NONE;
pub const URL_PART_SCHEME = URL_PART.SCHEME;
pub const URL_PART_HOSTNAME = URL_PART.HOSTNAME;
pub const URL_PART_USERNAME = URL_PART.USERNAME;
pub const URL_PART_PASSWORD = URL_PART.PASSWORD;
pub const URL_PART_PORT = URL_PART.PORT;
pub const URL_PART_QUERY = URL_PART.QUERY;

pub const URLIS = extern enum(i32) {
    URL = 0,
    OPAQUE = 1,
    NOHISTORY = 2,
    FILEURL = 3,
    APPLIABLE = 4,
    DIRECTORY = 5,
    HASQUERY = 6,
};
pub const URLIS_URL = URLIS.URL;
pub const URLIS_OPAQUE = URLIS.OPAQUE;
pub const URLIS_NOHISTORY = URLIS.NOHISTORY;
pub const URLIS_FILEURL = URLIS.FILEURL;
pub const URLIS_APPLIABLE = URLIS.APPLIABLE;
pub const URLIS_DIRECTORY = URLIS.DIRECTORY;
pub const URLIS_HASQUERY = URLIS.HASQUERY;

pub const PARSEDURLA = extern struct {
    cbSize: u32,
    pszProtocol: [*:0]const u8,
    cchProtocol: u32,
    pszSuffix: [*:0]const u8,
    cchSuffix: u32,
    nScheme: u32,
};

pub const PARSEDURLW = extern struct {
    cbSize: u32,
    pszProtocol: [*:0]const u16,
    cchProtocol: u32,
    pszSuffix: [*:0]const u16,
    cchSuffix: u32,
    nScheme: u32,
};

pub const SHREGDEL_FLAGS = extern enum(i32) {
    SHREGDEL_DEFAULT = 0,
    SHREGDEL_HKCU = 1,
    SHREGDEL_HKLM = 16,
    SHREGDEL_BOTH = 17,
};
pub const SHREGDEL_DEFAULT = SHREGDEL_FLAGS.SHREGDEL_DEFAULT;
pub const SHREGDEL_HKCU = SHREGDEL_FLAGS.SHREGDEL_HKCU;
pub const SHREGDEL_HKLM = SHREGDEL_FLAGS.SHREGDEL_HKLM;
pub const SHREGDEL_BOTH = SHREGDEL_FLAGS.SHREGDEL_BOTH;

pub const SHREGENUM_FLAGS = extern enum(i32) {
    SHREGENUM_DEFAULT = 0,
    SHREGENUM_HKCU = 1,
    SHREGENUM_HKLM = 16,
    SHREGENUM_BOTH = 17,
};
pub const SHREGENUM_DEFAULT = SHREGENUM_FLAGS.SHREGENUM_DEFAULT;
pub const SHREGENUM_HKCU = SHREGENUM_FLAGS.SHREGENUM_HKCU;
pub const SHREGENUM_HKLM = SHREGENUM_FLAGS.SHREGENUM_HKLM;
pub const SHREGENUM_BOTH = SHREGENUM_FLAGS.SHREGENUM_BOTH;

pub const ASSOCSTR = extern enum(i32) {
    COMMAND = 1,
    EXECUTABLE = 2,
    FRIENDLYDOCNAME = 3,
    FRIENDLYAPPNAME = 4,
    NOOPEN = 5,
    SHELLNEWVALUE = 6,
    DDECOMMAND = 7,
    DDEIFEXEC = 8,
    DDEAPPLICATION = 9,
    DDETOPIC = 10,
    INFOTIP = 11,
    QUICKTIP = 12,
    TILEINFO = 13,
    CONTENTTYPE = 14,
    DEFAULTICON = 15,
    SHELLEXTENSION = 16,
    DROPTARGET = 17,
    DELEGATEEXECUTE = 18,
    SUPPORTED_URI_PROTOCOLS = 19,
    PROGID = 20,
    APPID = 21,
    APPPUBLISHER = 22,
    APPICONREFERENCE = 23,
    MAX = 24,
};
pub const ASSOCSTR_COMMAND = ASSOCSTR.COMMAND;
pub const ASSOCSTR_EXECUTABLE = ASSOCSTR.EXECUTABLE;
pub const ASSOCSTR_FRIENDLYDOCNAME = ASSOCSTR.FRIENDLYDOCNAME;
pub const ASSOCSTR_FRIENDLYAPPNAME = ASSOCSTR.FRIENDLYAPPNAME;
pub const ASSOCSTR_NOOPEN = ASSOCSTR.NOOPEN;
pub const ASSOCSTR_SHELLNEWVALUE = ASSOCSTR.SHELLNEWVALUE;
pub const ASSOCSTR_DDECOMMAND = ASSOCSTR.DDECOMMAND;
pub const ASSOCSTR_DDEIFEXEC = ASSOCSTR.DDEIFEXEC;
pub const ASSOCSTR_DDEAPPLICATION = ASSOCSTR.DDEAPPLICATION;
pub const ASSOCSTR_DDETOPIC = ASSOCSTR.DDETOPIC;
pub const ASSOCSTR_INFOTIP = ASSOCSTR.INFOTIP;
pub const ASSOCSTR_QUICKTIP = ASSOCSTR.QUICKTIP;
pub const ASSOCSTR_TILEINFO = ASSOCSTR.TILEINFO;
pub const ASSOCSTR_CONTENTTYPE = ASSOCSTR.CONTENTTYPE;
pub const ASSOCSTR_DEFAULTICON = ASSOCSTR.DEFAULTICON;
pub const ASSOCSTR_SHELLEXTENSION = ASSOCSTR.SHELLEXTENSION;
pub const ASSOCSTR_DROPTARGET = ASSOCSTR.DROPTARGET;
pub const ASSOCSTR_DELEGATEEXECUTE = ASSOCSTR.DELEGATEEXECUTE;
pub const ASSOCSTR_SUPPORTED_URI_PROTOCOLS = ASSOCSTR.SUPPORTED_URI_PROTOCOLS;
pub const ASSOCSTR_PROGID = ASSOCSTR.PROGID;
pub const ASSOCSTR_APPID = ASSOCSTR.APPID;
pub const ASSOCSTR_APPPUBLISHER = ASSOCSTR.APPPUBLISHER;
pub const ASSOCSTR_APPICONREFERENCE = ASSOCSTR.APPICONREFERENCE;
pub const ASSOCSTR_MAX = ASSOCSTR.MAX;

pub const ASSOCKEY = extern enum(i32) {
    SHELLEXECCLASS = 1,
    APP = 2,
    CLASS = 3,
    BASECLASS = 4,
    MAX = 5,
};
pub const ASSOCKEY_SHELLEXECCLASS = ASSOCKEY.SHELLEXECCLASS;
pub const ASSOCKEY_APP = ASSOCKEY.APP;
pub const ASSOCKEY_CLASS = ASSOCKEY.CLASS;
pub const ASSOCKEY_BASECLASS = ASSOCKEY.BASECLASS;
pub const ASSOCKEY_MAX = ASSOCKEY.MAX;

pub const ASSOCDATA = extern enum(i32) {
    MSIDESCRIPTOR = 1,
    NOACTIVATEHANDLER = 2,
    UNUSED1 = 3,
    HASPERUSERASSOC = 4,
    EDITFLAGS = 5,
    VALUE = 6,
    MAX = 7,
};
pub const ASSOCDATA_MSIDESCRIPTOR = ASSOCDATA.MSIDESCRIPTOR;
pub const ASSOCDATA_NOACTIVATEHANDLER = ASSOCDATA.NOACTIVATEHANDLER;
pub const ASSOCDATA_UNUSED1 = ASSOCDATA.UNUSED1;
pub const ASSOCDATA_HASPERUSERASSOC = ASSOCDATA.HASPERUSERASSOC;
pub const ASSOCDATA_EDITFLAGS = ASSOCDATA.EDITFLAGS;
pub const ASSOCDATA_VALUE = ASSOCDATA.VALUE;
pub const ASSOCDATA_MAX = ASSOCDATA.MAX;

pub const ASSOCENUM = extern enum(i32) {
    NONE = 0,
};
pub const ASSOCENUM_NONE = ASSOCENUM.NONE;

pub const FILETYPEATTRIBUTEFLAGS = extern enum(i32) {
    FTA_None = 0,
    FTA_Exclude = 1,
    FTA_Show = 2,
    FTA_HasExtension = 4,
    FTA_NoEdit = 8,
    FTA_NoRemove = 16,
    FTA_NoNewVerb = 32,
    FTA_NoEditVerb = 64,
    FTA_NoRemoveVerb = 128,
    FTA_NoEditDesc = 256,
    FTA_NoEditIcon = 512,
    FTA_NoEditDflt = 1024,
    FTA_NoEditVerbCmd = 2048,
    FTA_NoEditVerbExe = 4096,
    FTA_NoDDE = 8192,
    FTA_NoEditMIME = 32768,
    FTA_OpenIsSafe = 65536,
    FTA_AlwaysUnsafe = 131072,
    FTA_NoRecentDocs = 1048576,
    FTA_SafeForElevation = 2097152,
    FTA_AlwaysUseDirectInvoke = 4194304,
};
pub const FTA_None = FILETYPEATTRIBUTEFLAGS.FTA_None;
pub const FTA_Exclude = FILETYPEATTRIBUTEFLAGS.FTA_Exclude;
pub const FTA_Show = FILETYPEATTRIBUTEFLAGS.FTA_Show;
pub const FTA_HasExtension = FILETYPEATTRIBUTEFLAGS.FTA_HasExtension;
pub const FTA_NoEdit = FILETYPEATTRIBUTEFLAGS.FTA_NoEdit;
pub const FTA_NoRemove = FILETYPEATTRIBUTEFLAGS.FTA_NoRemove;
pub const FTA_NoNewVerb = FILETYPEATTRIBUTEFLAGS.FTA_NoNewVerb;
pub const FTA_NoEditVerb = FILETYPEATTRIBUTEFLAGS.FTA_NoEditVerb;
pub const FTA_NoRemoveVerb = FILETYPEATTRIBUTEFLAGS.FTA_NoRemoveVerb;
pub const FTA_NoEditDesc = FILETYPEATTRIBUTEFLAGS.FTA_NoEditDesc;
pub const FTA_NoEditIcon = FILETYPEATTRIBUTEFLAGS.FTA_NoEditIcon;
pub const FTA_NoEditDflt = FILETYPEATTRIBUTEFLAGS.FTA_NoEditDflt;
pub const FTA_NoEditVerbCmd = FILETYPEATTRIBUTEFLAGS.FTA_NoEditVerbCmd;
pub const FTA_NoEditVerbExe = FILETYPEATTRIBUTEFLAGS.FTA_NoEditVerbExe;
pub const FTA_NoDDE = FILETYPEATTRIBUTEFLAGS.FTA_NoDDE;
pub const FTA_NoEditMIME = FILETYPEATTRIBUTEFLAGS.FTA_NoEditMIME;
pub const FTA_OpenIsSafe = FILETYPEATTRIBUTEFLAGS.FTA_OpenIsSafe;
pub const FTA_AlwaysUnsafe = FILETYPEATTRIBUTEFLAGS.FTA_AlwaysUnsafe;
pub const FTA_NoRecentDocs = FILETYPEATTRIBUTEFLAGS.FTA_NoRecentDocs;
pub const FTA_SafeForElevation = FILETYPEATTRIBUTEFLAGS.FTA_SafeForElevation;
pub const FTA_AlwaysUseDirectInvoke = FILETYPEATTRIBUTEFLAGS.FTA_AlwaysUseDirectInvoke;

const IID_IQueryAssociations_Value = @import("../zig.zig").Guid.initString("C46CA590-3C3F-11D2-BEE6-0000F805CA57");
pub const IID_IQueryAssociations = &IID_IQueryAssociations_Value;
pub const IQueryAssociations = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: fn(
            self: *const IQueryAssociations,
            flags: u32,
            pszAssoc: ?[*:0]const u16,
            hkProgid: HKEY,
            hwnd: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetString: fn(
            self: *const IQueryAssociations,
            flags: u32,
            str: ASSOCSTR,
            pszExtra: ?[*:0]const u16,
            pszOut: ?[*:0]u16,
            pcchOut: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKey: fn(
            self: *const IQueryAssociations,
            flags: u32,
            key: ASSOCKEY,
            pszExtra: ?[*:0]const u16,
            phkeyOut: *HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetData: fn(
            self: *const IQueryAssociations,
            flags: u32,
            data: ASSOCDATA,
            pszExtra: ?[*:0]const u16,
            pvOut: ?[*]u8,
            pcbOut: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnum: fn(
            self: *const IQueryAssociations,
            flags: u32,
            assocenum: ASSOCENUM,
            pszExtra: ?[*:0]const u16,
            riid: *const Guid,
            ppvOut: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IQueryAssociations_Init(self: *const T, flags: u32, pszAssoc: ?[*:0]const u16, hkProgid: HKEY, hwnd: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IQueryAssociations.VTable, self.vtable).Init(@ptrCast(*const IQueryAssociations, self), flags, pszAssoc, hkProgid, hwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IQueryAssociations_GetString(self: *const T, flags: u32, str: ASSOCSTR, pszExtra: ?[*:0]const u16, pszOut: ?[*:0]u16, pcchOut: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IQueryAssociations.VTable, self.vtable).GetString(@ptrCast(*const IQueryAssociations, self), flags, str, pszExtra, pszOut, pcchOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IQueryAssociations_GetKey(self: *const T, flags: u32, key: ASSOCKEY, pszExtra: ?[*:0]const u16, phkeyOut: *HKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IQueryAssociations.VTable, self.vtable).GetKey(@ptrCast(*const IQueryAssociations, self), flags, key, pszExtra, phkeyOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IQueryAssociations_GetData(self: *const T, flags: u32, data: ASSOCDATA, pszExtra: ?[*:0]const u16, pvOut: ?[*]u8, pcbOut: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IQueryAssociations.VTable, self.vtable).GetData(@ptrCast(*const IQueryAssociations, self), flags, data, pszExtra, pvOut, pcbOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IQueryAssociations_GetEnum(self: *const T, flags: u32, assocenum: ASSOCENUM, pszExtra: ?[*:0]const u16, riid: *const Guid, ppvOut: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IQueryAssociations.VTable, self.vtable).GetEnum(@ptrCast(*const IQueryAssociations, self), flags, assocenum, pszExtra, riid, ppvOut);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SHGLOBALCOUNTER = extern enum(i32) {
    GLOBALCOUNTER_SEARCHMANAGER = 0,
    GLOBALCOUNTER_SEARCHOPTIONS = 1,
    GLOBALCOUNTER_FOLDERSETTINGSCHANGE = 2,
    GLOBALCOUNTER_RATINGS = 3,
    GLOBALCOUNTER_APPROVEDSITES = 4,
    GLOBALCOUNTER_RESTRICTIONS = 5,
    GLOBALCOUNTER_SHELLSETTINGSCHANGED = 6,
    GLOBALCOUNTER_SYSTEMPIDLCHANGE = 7,
    GLOBALCOUNTER_OVERLAYMANAGER = 8,
    GLOBALCOUNTER_QUERYASSOCIATIONS = 9,
    GLOBALCOUNTER_IESESSIONS = 10,
    GLOBALCOUNTER_IEONLY_SESSIONS = 11,
    GLOBALCOUNTER_APPLICATION_DESTINATIONS = 12,
    __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_CSCSYNCINPROGRESS = 13,
    GLOBALCOUNTER_BITBUCKETNUMDELETERS = 14,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SHARES = 15,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_A = 16,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_B = 17,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_C = 18,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_D = 19,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_E = 20,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_F = 21,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_G = 22,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_H = 23,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_I = 24,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_J = 25,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_K = 26,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_L = 27,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_M = 28,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_N = 29,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_O = 30,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_P = 31,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Q = 32,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_R = 33,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_S = 34,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_T = 35,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_U = 36,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_V = 37,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_W = 38,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_X = 39,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Y = 40,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Z = 41,
    __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SERVERDRIVE = 42,
    __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEGLOBALDIRTYCOUNT = 43,
    GLOBALCOUNTER_RECYCLEBINENUM = 44,
    GLOBALCOUNTER_RECYCLEBINCORRUPTED = 45,
    GLOBALCOUNTER_RATINGS_STATECOUNTER = 46,
    GLOBALCOUNTER_PRIVATE_PROFILE_CACHE = 47,
    GLOBALCOUNTER_INTERNETTOOLBAR_LAYOUT = 48,
    GLOBALCOUNTER_FOLDERDEFINITION_CACHE = 49,
    GLOBALCOUNTER_COMMONPLACES_LIST_CACHE = 50,
    GLOBALCOUNTER_PRIVATE_PROFILE_CACHE_MACHINEWIDE = 51,
    GLOBALCOUNTER_ASSOCCHANGED = 52,
    GLOBALCOUNTER_APP_ITEMS_STATE_STORE_CACHE = 53,
    GLOBALCOUNTER_SETTINGSYNC_ENABLED = 54,
    GLOBALCOUNTER_APPSFOLDER_FILETYPEASSOCIATION_COUNTER = 55,
    GLOBALCOUNTER_USERINFOCHANGED = 56,
    GLOBALCOUNTER_SYNC_ENGINE_INFORMATION_CACHE_MACHINEWIDE = 57,
    GLOBALCOUNTER_BANNERS_DATAMODEL_CACHE_MACHINEWIDE = 58,
    GLOBALCOUNTER_MAXIMUMVALUE = 59,
};
pub const GLOBALCOUNTER_SEARCHMANAGER = SHGLOBALCOUNTER.GLOBALCOUNTER_SEARCHMANAGER;
pub const GLOBALCOUNTER_SEARCHOPTIONS = SHGLOBALCOUNTER.GLOBALCOUNTER_SEARCHOPTIONS;
pub const GLOBALCOUNTER_FOLDERSETTINGSCHANGE = SHGLOBALCOUNTER.GLOBALCOUNTER_FOLDERSETTINGSCHANGE;
pub const GLOBALCOUNTER_RATINGS = SHGLOBALCOUNTER.GLOBALCOUNTER_RATINGS;
pub const GLOBALCOUNTER_APPROVEDSITES = SHGLOBALCOUNTER.GLOBALCOUNTER_APPROVEDSITES;
pub const GLOBALCOUNTER_RESTRICTIONS = SHGLOBALCOUNTER.GLOBALCOUNTER_RESTRICTIONS;
pub const GLOBALCOUNTER_SHELLSETTINGSCHANGED = SHGLOBALCOUNTER.GLOBALCOUNTER_SHELLSETTINGSCHANGED;
pub const GLOBALCOUNTER_SYSTEMPIDLCHANGE = SHGLOBALCOUNTER.GLOBALCOUNTER_SYSTEMPIDLCHANGE;
pub const GLOBALCOUNTER_OVERLAYMANAGER = SHGLOBALCOUNTER.GLOBALCOUNTER_OVERLAYMANAGER;
pub const GLOBALCOUNTER_QUERYASSOCIATIONS = SHGLOBALCOUNTER.GLOBALCOUNTER_QUERYASSOCIATIONS;
pub const GLOBALCOUNTER_IESESSIONS = SHGLOBALCOUNTER.GLOBALCOUNTER_IESESSIONS;
pub const GLOBALCOUNTER_IEONLY_SESSIONS = SHGLOBALCOUNTER.GLOBALCOUNTER_IEONLY_SESSIONS;
pub const GLOBALCOUNTER_APPLICATION_DESTINATIONS = SHGLOBALCOUNTER.GLOBALCOUNTER_APPLICATION_DESTINATIONS;
pub const __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_CSCSYNCINPROGRESS = SHGLOBALCOUNTER.__UNUSED_RECYCLE_WAS_GLOBALCOUNTER_CSCSYNCINPROGRESS;
pub const GLOBALCOUNTER_BITBUCKETNUMDELETERS = SHGLOBALCOUNTER.GLOBALCOUNTER_BITBUCKETNUMDELETERS;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SHARES = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SHARES;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_A = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_A;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_B = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_B;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_C = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_C;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_D = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_D;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_E = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_E;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_F = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_F;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_G = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_G;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_H = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_H;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_I = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_I;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_J = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_J;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_K = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_K;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_L = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_L;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_M = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_M;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_N = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_N;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_O = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_O;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_P = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_P;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Q = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Q;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_R = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_R;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_S = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_S;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_T = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_T;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_U = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_U;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_V = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_V;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_W = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_W;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_X = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_X;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Y = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Y;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Z = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Z;
pub const __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SERVERDRIVE = SHGLOBALCOUNTER.__UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SERVERDRIVE;
pub const __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEGLOBALDIRTYCOUNT = SHGLOBALCOUNTER.__UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEGLOBALDIRTYCOUNT;
pub const GLOBALCOUNTER_RECYCLEBINENUM = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEBINENUM;
pub const GLOBALCOUNTER_RECYCLEBINCORRUPTED = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEBINCORRUPTED;
pub const GLOBALCOUNTER_RATINGS_STATECOUNTER = SHGLOBALCOUNTER.GLOBALCOUNTER_RATINGS_STATECOUNTER;
pub const GLOBALCOUNTER_PRIVATE_PROFILE_CACHE = SHGLOBALCOUNTER.GLOBALCOUNTER_PRIVATE_PROFILE_CACHE;
pub const GLOBALCOUNTER_INTERNETTOOLBAR_LAYOUT = SHGLOBALCOUNTER.GLOBALCOUNTER_INTERNETTOOLBAR_LAYOUT;
pub const GLOBALCOUNTER_FOLDERDEFINITION_CACHE = SHGLOBALCOUNTER.GLOBALCOUNTER_FOLDERDEFINITION_CACHE;
pub const GLOBALCOUNTER_COMMONPLACES_LIST_CACHE = SHGLOBALCOUNTER.GLOBALCOUNTER_COMMONPLACES_LIST_CACHE;
pub const GLOBALCOUNTER_PRIVATE_PROFILE_CACHE_MACHINEWIDE = SHGLOBALCOUNTER.GLOBALCOUNTER_PRIVATE_PROFILE_CACHE_MACHINEWIDE;
pub const GLOBALCOUNTER_ASSOCCHANGED = SHGLOBALCOUNTER.GLOBALCOUNTER_ASSOCCHANGED;
pub const GLOBALCOUNTER_APP_ITEMS_STATE_STORE_CACHE = SHGLOBALCOUNTER.GLOBALCOUNTER_APP_ITEMS_STATE_STORE_CACHE;
pub const GLOBALCOUNTER_SETTINGSYNC_ENABLED = SHGLOBALCOUNTER.GLOBALCOUNTER_SETTINGSYNC_ENABLED;
pub const GLOBALCOUNTER_APPSFOLDER_FILETYPEASSOCIATION_COUNTER = SHGLOBALCOUNTER.GLOBALCOUNTER_APPSFOLDER_FILETYPEASSOCIATION_COUNTER;
pub const GLOBALCOUNTER_USERINFOCHANGED = SHGLOBALCOUNTER.GLOBALCOUNTER_USERINFOCHANGED;
pub const GLOBALCOUNTER_SYNC_ENGINE_INFORMATION_CACHE_MACHINEWIDE = SHGLOBALCOUNTER.GLOBALCOUNTER_SYNC_ENGINE_INFORMATION_CACHE_MACHINEWIDE;
pub const GLOBALCOUNTER_BANNERS_DATAMODEL_CACHE_MACHINEWIDE = SHGLOBALCOUNTER.GLOBALCOUNTER_BANNERS_DATAMODEL_CACHE_MACHINEWIDE;
pub const GLOBALCOUNTER_MAXIMUMVALUE = SHGLOBALCOUNTER.GLOBALCOUNTER_MAXIMUMVALUE;

pub const QITAB = extern struct {
    piid: *const Guid,
    dwOffset: u32,
};

pub const DLLVERSIONINFO = extern struct {
    cbSize: u32,
    dwMajorVersion: u32,
    dwMinorVersion: u32,
    dwBuildNumber: u32,
    dwPlatformID: u32,
};

pub const DLLVERSIONINFO2 = extern struct {
    info1: DLLVERSIONINFO,
    dwFlags: u32,
    ullVersion: u64,
};

pub const DLLGETVERSIONPROC = fn(
    param0: *DLLVERSIONINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const APPINFODATAFLAGS = extern enum(i32) {
    AIM_DISPLAYNAME = 1,
    AIM_VERSION = 2,
    AIM_PUBLISHER = 4,
    AIM_PRODUCTID = 8,
    AIM_REGISTEREDOWNER = 16,
    AIM_REGISTEREDCOMPANY = 32,
    AIM_LANGUAGE = 64,
    AIM_SUPPORTURL = 128,
    AIM_SUPPORTTELEPHONE = 256,
    AIM_HELPLINK = 512,
    AIM_INSTALLLOCATION = 1024,
    AIM_INSTALLSOURCE = 2048,
    AIM_INSTALLDATE = 4096,
    AIM_CONTACT = 16384,
    AIM_COMMENTS = 32768,
    AIM_IMAGE = 131072,
    AIM_READMEURL = 262144,
    AIM_UPDATEINFOURL = 524288,
};
pub const AIM_DISPLAYNAME = APPINFODATAFLAGS.AIM_DISPLAYNAME;
pub const AIM_VERSION = APPINFODATAFLAGS.AIM_VERSION;
pub const AIM_PUBLISHER = APPINFODATAFLAGS.AIM_PUBLISHER;
pub const AIM_PRODUCTID = APPINFODATAFLAGS.AIM_PRODUCTID;
pub const AIM_REGISTEREDOWNER = APPINFODATAFLAGS.AIM_REGISTEREDOWNER;
pub const AIM_REGISTEREDCOMPANY = APPINFODATAFLAGS.AIM_REGISTEREDCOMPANY;
pub const AIM_LANGUAGE = APPINFODATAFLAGS.AIM_LANGUAGE;
pub const AIM_SUPPORTURL = APPINFODATAFLAGS.AIM_SUPPORTURL;
pub const AIM_SUPPORTTELEPHONE = APPINFODATAFLAGS.AIM_SUPPORTTELEPHONE;
pub const AIM_HELPLINK = APPINFODATAFLAGS.AIM_HELPLINK;
pub const AIM_INSTALLLOCATION = APPINFODATAFLAGS.AIM_INSTALLLOCATION;
pub const AIM_INSTALLSOURCE = APPINFODATAFLAGS.AIM_INSTALLSOURCE;
pub const AIM_INSTALLDATE = APPINFODATAFLAGS.AIM_INSTALLDATE;
pub const AIM_CONTACT = APPINFODATAFLAGS.AIM_CONTACT;
pub const AIM_COMMENTS = APPINFODATAFLAGS.AIM_COMMENTS;
pub const AIM_IMAGE = APPINFODATAFLAGS.AIM_IMAGE;
pub const AIM_READMEURL = APPINFODATAFLAGS.AIM_READMEURL;
pub const AIM_UPDATEINFOURL = APPINFODATAFLAGS.AIM_UPDATEINFOURL;

pub const APPINFODATA = extern struct {
    cbSize: u32,
    dwMask: u32,
    pszDisplayName: PWSTR,
    pszVersion: PWSTR,
    pszPublisher: PWSTR,
    pszProductID: PWSTR,
    pszRegisteredOwner: PWSTR,
    pszRegisteredCompany: PWSTR,
    pszLanguage: PWSTR,
    pszSupportUrl: PWSTR,
    pszSupportTelephone: PWSTR,
    pszHelpLink: PWSTR,
    pszInstallLocation: PWSTR,
    pszInstallSource: PWSTR,
    pszInstallDate: PWSTR,
    pszContact: PWSTR,
    pszComments: PWSTR,
    pszImage: PWSTR,
    pszReadmeUrl: PWSTR,
    pszUpdateInfoUrl: PWSTR,
};

pub const APPACTIONFLAGS = extern enum(i32) {
    APPACTION_INSTALL = 1,
    APPACTION_UNINSTALL = 2,
    APPACTION_MODIFY = 4,
    APPACTION_REPAIR = 8,
    APPACTION_UPGRADE = 16,
    APPACTION_CANGETSIZE = 32,
    APPACTION_MODIFYREMOVE = 128,
    APPACTION_ADDLATER = 256,
    APPACTION_UNSCHEDULE = 512,
};
pub const APPACTION_INSTALL = APPACTIONFLAGS.APPACTION_INSTALL;
pub const APPACTION_UNINSTALL = APPACTIONFLAGS.APPACTION_UNINSTALL;
pub const APPACTION_MODIFY = APPACTIONFLAGS.APPACTION_MODIFY;
pub const APPACTION_REPAIR = APPACTIONFLAGS.APPACTION_REPAIR;
pub const APPACTION_UPGRADE = APPACTIONFLAGS.APPACTION_UPGRADE;
pub const APPACTION_CANGETSIZE = APPACTIONFLAGS.APPACTION_CANGETSIZE;
pub const APPACTION_MODIFYREMOVE = APPACTIONFLAGS.APPACTION_MODIFYREMOVE;
pub const APPACTION_ADDLATER = APPACTIONFLAGS.APPACTION_ADDLATER;
pub const APPACTION_UNSCHEDULE = APPACTIONFLAGS.APPACTION_UNSCHEDULE;

pub const SLOWAPPINFO = extern struct {
    ullSize: u64,
    ftLastUsed: FILETIME,
    iTimesUsed: i32,
    pszImage: PWSTR,
};

const IID_IShellApp_Value = @import("../zig.zig").Guid.initString("A3E14960-935F-11D1-B8B8-006008059382");
pub const IID_IShellApp = &IID_IShellApp_Value;
pub const IShellApp = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAppInfo: fn(
            self: *const IShellApp,
            pai: *APPINFODATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPossibleActions: fn(
            self: *const IShellApp,
            pdwActions: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSlowAppInfo: fn(
            self: *const IShellApp,
            psaid: *SLOWAPPINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCachedSlowAppInfo: fn(
            self: *const IShellApp,
            psaid: *SLOWAPPINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsInstalled: fn(
            self: *const IShellApp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellApp_GetAppInfo(self: *const T, pai: *APPINFODATA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellApp.VTable, self.vtable).GetAppInfo(@ptrCast(*const IShellApp, self), pai);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellApp_GetPossibleActions(self: *const T, pdwActions: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellApp.VTable, self.vtable).GetPossibleActions(@ptrCast(*const IShellApp, self), pdwActions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellApp_GetSlowAppInfo(self: *const T, psaid: *SLOWAPPINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellApp.VTable, self.vtable).GetSlowAppInfo(@ptrCast(*const IShellApp, self), psaid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellApp_GetCachedSlowAppInfo(self: *const T, psaid: *SLOWAPPINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellApp.VTable, self.vtable).GetCachedSlowAppInfo(@ptrCast(*const IShellApp, self), psaid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellApp_IsInstalled(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellApp.VTable, self.vtable).IsInstalled(@ptrCast(*const IShellApp, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PUBAPPINFOFLAGS = extern enum(i32) {
    PAI_SOURCE = 1,
    PAI_ASSIGNEDTIME = 2,
    PAI_PUBLISHEDTIME = 4,
    PAI_SCHEDULEDTIME = 8,
    PAI_EXPIRETIME = 16,
};
pub const PAI_SOURCE = PUBAPPINFOFLAGS.PAI_SOURCE;
pub const PAI_ASSIGNEDTIME = PUBAPPINFOFLAGS.PAI_ASSIGNEDTIME;
pub const PAI_PUBLISHEDTIME = PUBAPPINFOFLAGS.PAI_PUBLISHEDTIME;
pub const PAI_SCHEDULEDTIME = PUBAPPINFOFLAGS.PAI_SCHEDULEDTIME;
pub const PAI_EXPIRETIME = PUBAPPINFOFLAGS.PAI_EXPIRETIME;

pub const PUBAPPINFO = extern struct {
    cbSize: u32,
    dwMask: u32,
    pszSource: PWSTR,
    stAssigned: SYSTEMTIME,
    stPublished: SYSTEMTIME,
    stScheduled: SYSTEMTIME,
    stExpire: SYSTEMTIME,
};

const IID_IPublishedApp_Value = @import("../zig.zig").Guid.initString("1BC752E0-9046-11D1-B8B3-006008059382");
pub const IID_IPublishedApp = &IID_IPublishedApp_Value;
pub const IPublishedApp = extern struct {
    pub const VTable = extern struct {
        base: IShellApp.VTable,
        Install: fn(
            self: *const IPublishedApp,
            pstInstall: *SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPublishedAppInfo: fn(
            self: *const IPublishedApp,
            ppai: *PUBAPPINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unschedule: fn(
            self: *const IPublishedApp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IShellApp.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPublishedApp_Install(self: *const T, pstInstall: *SYSTEMTIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPublishedApp.VTable, self.vtable).Install(@ptrCast(*const IPublishedApp, self), pstInstall);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPublishedApp_GetPublishedAppInfo(self: *const T, ppai: *PUBAPPINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPublishedApp.VTable, self.vtable).GetPublishedAppInfo(@ptrCast(*const IPublishedApp, self), ppai);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPublishedApp_Unschedule(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPublishedApp.VTable, self.vtable).Unschedule(@ptrCast(*const IPublishedApp, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPublishedApp2_Value = @import("../zig.zig").Guid.initString("12B81347-1B3A-4A04-AA61-3F768B67FD7E");
pub const IID_IPublishedApp2 = &IID_IPublishedApp2_Value;
pub const IPublishedApp2 = extern struct {
    pub const VTable = extern struct {
        base: IPublishedApp.VTable,
        Install2: fn(
            self: *const IPublishedApp2,
            pstInstall: *SYSTEMTIME,
            hwndParent: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPublishedApp.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPublishedApp2_Install2(self: *const T, pstInstall: *SYSTEMTIME, hwndParent: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPublishedApp2.VTable, self.vtable).Install2(@ptrCast(*const IPublishedApp2, self), pstInstall, hwndParent);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumPublishedApps_Value = @import("../zig.zig").Guid.initString("0B124F8C-91F0-11D1-B8B5-006008059382");
pub const IID_IEnumPublishedApps = &IID_IEnumPublishedApps_Value;
pub const IEnumPublishedApps = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumPublishedApps,
            pia: **IPublishedApp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumPublishedApps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumPublishedApps_Next(self: *const T, pia: **IPublishedApp) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumPublishedApps.VTable, self.vtable).Next(@ptrCast(*const IEnumPublishedApps, self), pia);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumPublishedApps_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumPublishedApps.VTable, self.vtable).Reset(@ptrCast(*const IEnumPublishedApps, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAppPublisher_Value = @import("../zig.zig").Guid.initString("07250A10-9CF9-11D1-9076-006008059382");
pub const IID_IAppPublisher = &IID_IAppPublisher_Value;
pub const IAppPublisher = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNumberOfCategories: fn(
            self: *const IAppPublisher,
            pdwCat: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategories: fn(
            self: *const IAppPublisher,
            pAppCategoryList: *APPCATEGORYINFOLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumberOfApps: fn(
            self: *const IAppPublisher,
            pdwApps: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumApps: fn(
            self: *const IAppPublisher,
            pAppCategoryId: *Guid,
            ppepa: **IEnumPublishedApps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAppPublisher_GetNumberOfCategories(self: *const T, pdwCat: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAppPublisher.VTable, self.vtable).GetNumberOfCategories(@ptrCast(*const IAppPublisher, self), pdwCat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAppPublisher_GetCategories(self: *const T, pAppCategoryList: *APPCATEGORYINFOLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAppPublisher.VTable, self.vtable).GetCategories(@ptrCast(*const IAppPublisher, self), pAppCategoryList);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAppPublisher_GetNumberOfApps(self: *const T, pdwApps: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAppPublisher.VTable, self.vtable).GetNumberOfApps(@ptrCast(*const IAppPublisher, self), pdwApps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAppPublisher_EnumApps(self: *const T, pAppCategoryId: *Guid, ppepa: **IEnumPublishedApps) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAppPublisher.VTable, self.vtable).EnumApps(@ptrCast(*const IAppPublisher, self), pAppCategoryId, ppepa);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_PasswordCredentialProvider_Value = @import("../zig.zig").Guid.initString("60B78E88-EAD8-445C-9CFD-0B87F74EA6CD");
pub const CLSID_PasswordCredentialProvider = &CLSID_PasswordCredentialProvider_Value;

const CLSID_V1PasswordCredentialProvider_Value = @import("../zig.zig").Guid.initString("6F45DC1E-5384-457A-BC13-2CD81B0D28ED");
pub const CLSID_V1PasswordCredentialProvider = &CLSID_V1PasswordCredentialProvider_Value;

const CLSID_PINLogonCredentialProvider_Value = @import("../zig.zig").Guid.initString("CB82EA12-9F71-446D-89E1-8D0924E1256E");
pub const CLSID_PINLogonCredentialProvider = &CLSID_PINLogonCredentialProvider_Value;

const CLSID_NPCredentialProvider_Value = @import("../zig.zig").Guid.initString("3DD6BEC0-8193-4FFE-AE25-E08E39EA4063");
pub const CLSID_NPCredentialProvider = &CLSID_NPCredentialProvider_Value;

const CLSID_SmartcardCredentialProvider_Value = @import("../zig.zig").Guid.initString("8FD7E19C-3BF7-489B-A72C-846AB3678C96");
pub const CLSID_SmartcardCredentialProvider = &CLSID_SmartcardCredentialProvider_Value;

const CLSID_V1SmartcardCredentialProvider_Value = @import("../zig.zig").Guid.initString("8BF9A910-A8FF-457F-999F-A5CA10B4A885");
pub const CLSID_V1SmartcardCredentialProvider = &CLSID_V1SmartcardCredentialProvider_Value;

const CLSID_SmartcardPinProvider_Value = @import("../zig.zig").Guid.initString("94596C7E-3744-41CE-893E-BBF09122F76A");
pub const CLSID_SmartcardPinProvider = &CLSID_SmartcardPinProvider_Value;

const CLSID_SmartcardReaderSelectionProvider_Value = @import("../zig.zig").Guid.initString("1B283861-754F-4022-AD47-A5EAAA618894");
pub const CLSID_SmartcardReaderSelectionProvider = &CLSID_SmartcardReaderSelectionProvider_Value;

const CLSID_SmartcardWinRTProvider_Value = @import("../zig.zig").Guid.initString("1EE7337F-85AC-45E2-A23C-37C753209769");
pub const CLSID_SmartcardWinRTProvider = &CLSID_SmartcardWinRTProvider_Value;

const CLSID_GenericCredentialProvider_Value = @import("../zig.zig").Guid.initString("25CBB996-92ED-457E-B28C-4774084BD562");
pub const CLSID_GenericCredentialProvider = &CLSID_GenericCredentialProvider_Value;

const CLSID_RASProvider_Value = @import("../zig.zig").Guid.initString("5537E283-B1E7-4EF8-9C6E-7AB0AFE5056D");
pub const CLSID_RASProvider = &CLSID_RASProvider_Value;

const CLSID_OnexCredentialProvider_Value = @import("../zig.zig").Guid.initString("07AA0886-CC8D-4E19-A410-1C75AF686E62");
pub const CLSID_OnexCredentialProvider = &CLSID_OnexCredentialProvider_Value;

const CLSID_OnexPlapSmartcardCredentialProvider_Value = @import("../zig.zig").Guid.initString("33C86CD6-705F-4BA1-9ADB-67070B837775");
pub const CLSID_OnexPlapSmartcardCredentialProvider = &CLSID_OnexPlapSmartcardCredentialProvider_Value;

const CLSID_VaultProvider_Value = @import("../zig.zig").Guid.initString("503739D0-4C5E-4CFD-B3BA-D881334F0DF2");
pub const CLSID_VaultProvider = &CLSID_VaultProvider_Value;

const CLSID_WinBioCredentialProvider_Value = @import("../zig.zig").Guid.initString("BEC09223-B018-416D-A0AC-523971B639F5");
pub const CLSID_WinBioCredentialProvider = &CLSID_WinBioCredentialProvider_Value;

const CLSID_V1WinBioCredentialProvider_Value = @import("../zig.zig").Guid.initString("AC3AC249-E820-4343-A65B-377AC634DC09");
pub const CLSID_V1WinBioCredentialProvider = &CLSID_V1WinBioCredentialProvider_Value;

pub const CREDENTIAL_PROVIDER_USAGE_SCENARIO = extern enum(i32) {
    CPUS_INVALID = 0,
    CPUS_LOGON = 1,
    CPUS_UNLOCK_WORKSTATION = 2,
    CPUS_CHANGE_PASSWORD = 3,
    CPUS_CREDUI = 4,
    CPUS_PLAP = 5,
};
pub const CPUS_INVALID = CREDENTIAL_PROVIDER_USAGE_SCENARIO.CPUS_INVALID;
pub const CPUS_LOGON = CREDENTIAL_PROVIDER_USAGE_SCENARIO.CPUS_LOGON;
pub const CPUS_UNLOCK_WORKSTATION = CREDENTIAL_PROVIDER_USAGE_SCENARIO.CPUS_UNLOCK_WORKSTATION;
pub const CPUS_CHANGE_PASSWORD = CREDENTIAL_PROVIDER_USAGE_SCENARIO.CPUS_CHANGE_PASSWORD;
pub const CPUS_CREDUI = CREDENTIAL_PROVIDER_USAGE_SCENARIO.CPUS_CREDUI;
pub const CPUS_PLAP = CREDENTIAL_PROVIDER_USAGE_SCENARIO.CPUS_PLAP;

pub const CREDENTIAL_PROVIDER_FIELD_TYPE = extern enum(i32) {
    CPFT_INVALID = 0,
    CPFT_LARGE_TEXT = 1,
    CPFT_SMALL_TEXT = 2,
    CPFT_COMMAND_LINK = 3,
    CPFT_EDIT_TEXT = 4,
    CPFT_PASSWORD_TEXT = 5,
    CPFT_TILE_IMAGE = 6,
    CPFT_CHECKBOX = 7,
    CPFT_COMBOBOX = 8,
    CPFT_SUBMIT_BUTTON = 9,
};
pub const CPFT_INVALID = CREDENTIAL_PROVIDER_FIELD_TYPE.CPFT_INVALID;
pub const CPFT_LARGE_TEXT = CREDENTIAL_PROVIDER_FIELD_TYPE.CPFT_LARGE_TEXT;
pub const CPFT_SMALL_TEXT = CREDENTIAL_PROVIDER_FIELD_TYPE.CPFT_SMALL_TEXT;
pub const CPFT_COMMAND_LINK = CREDENTIAL_PROVIDER_FIELD_TYPE.CPFT_COMMAND_LINK;
pub const CPFT_EDIT_TEXT = CREDENTIAL_PROVIDER_FIELD_TYPE.CPFT_EDIT_TEXT;
pub const CPFT_PASSWORD_TEXT = CREDENTIAL_PROVIDER_FIELD_TYPE.CPFT_PASSWORD_TEXT;
pub const CPFT_TILE_IMAGE = CREDENTIAL_PROVIDER_FIELD_TYPE.CPFT_TILE_IMAGE;
pub const CPFT_CHECKBOX = CREDENTIAL_PROVIDER_FIELD_TYPE.CPFT_CHECKBOX;
pub const CPFT_COMBOBOX = CREDENTIAL_PROVIDER_FIELD_TYPE.CPFT_COMBOBOX;
pub const CPFT_SUBMIT_BUTTON = CREDENTIAL_PROVIDER_FIELD_TYPE.CPFT_SUBMIT_BUTTON;

pub const CREDENTIAL_PROVIDER_FIELD_STATE = extern enum(i32) {
    CPFS_HIDDEN = 0,
    CPFS_DISPLAY_IN_SELECTED_TILE = 1,
    CPFS_DISPLAY_IN_DESELECTED_TILE = 2,
    CPFS_DISPLAY_IN_BOTH = 3,
};
pub const CPFS_HIDDEN = CREDENTIAL_PROVIDER_FIELD_STATE.CPFS_HIDDEN;
pub const CPFS_DISPLAY_IN_SELECTED_TILE = CREDENTIAL_PROVIDER_FIELD_STATE.CPFS_DISPLAY_IN_SELECTED_TILE;
pub const CPFS_DISPLAY_IN_DESELECTED_TILE = CREDENTIAL_PROVIDER_FIELD_STATE.CPFS_DISPLAY_IN_DESELECTED_TILE;
pub const CPFS_DISPLAY_IN_BOTH = CREDENTIAL_PROVIDER_FIELD_STATE.CPFS_DISPLAY_IN_BOTH;

pub const CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE = extern enum(i32) {
    CPFIS_NONE = 0,
    CPFIS_READONLY = 1,
    CPFIS_DISABLED = 2,
    CPFIS_FOCUSED = 3,
};
pub const CPFIS_NONE = CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE.CPFIS_NONE;
pub const CPFIS_READONLY = CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE.CPFIS_READONLY;
pub const CPFIS_DISABLED = CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE.CPFIS_DISABLED;
pub const CPFIS_FOCUSED = CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE.CPFIS_FOCUSED;

pub const CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR = extern struct {
    dwFieldID: u32,
    cpft: CREDENTIAL_PROVIDER_FIELD_TYPE,
    pszLabel: PWSTR,
    guidFieldType: Guid,
};

pub const CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE = extern enum(i32) {
    CPGSR_NO_CREDENTIAL_NOT_FINISHED = 0,
    CPGSR_NO_CREDENTIAL_FINISHED = 1,
    CPGSR_RETURN_CREDENTIAL_FINISHED = 2,
    CPGSR_RETURN_NO_CREDENTIAL_FINISHED = 3,
};
pub const CPGSR_NO_CREDENTIAL_NOT_FINISHED = CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE.CPGSR_NO_CREDENTIAL_NOT_FINISHED;
pub const CPGSR_NO_CREDENTIAL_FINISHED = CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE.CPGSR_NO_CREDENTIAL_FINISHED;
pub const CPGSR_RETURN_CREDENTIAL_FINISHED = CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE.CPGSR_RETURN_CREDENTIAL_FINISHED;
pub const CPGSR_RETURN_NO_CREDENTIAL_FINISHED = CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE.CPGSR_RETURN_NO_CREDENTIAL_FINISHED;

pub const CREDENTIAL_PROVIDER_STATUS_ICON = extern enum(i32) {
    CPSI_NONE = 0,
    CPSI_ERROR = 1,
    CPSI_WARNING = 2,
    CPSI_SUCCESS = 3,
};
pub const CPSI_NONE = CREDENTIAL_PROVIDER_STATUS_ICON.CPSI_NONE;
pub const CPSI_ERROR = CREDENTIAL_PROVIDER_STATUS_ICON.CPSI_ERROR;
pub const CPSI_WARNING = CREDENTIAL_PROVIDER_STATUS_ICON.CPSI_WARNING;
pub const CPSI_SUCCESS = CREDENTIAL_PROVIDER_STATUS_ICON.CPSI_SUCCESS;

pub const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION = extern struct {
    ulAuthenticationPackage: u32,
    clsidCredentialProvider: Guid,
    cbSerialization: u32,
    rgbSerialization: *u8,
};

pub const CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS = extern enum(i32) {
    CPAO_NONE = 0,
    CPAO_EMPTY_LOCAL = 1,
    CPAO_EMPTY_CONNECTED = 2,
};
pub const CPAO_NONE = CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS.CPAO_NONE;
pub const CPAO_EMPTY_LOCAL = CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS.CPAO_EMPTY_LOCAL;
pub const CPAO_EMPTY_CONNECTED = CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS.CPAO_EMPTY_CONNECTED;

pub const CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS = extern enum(i32) {
    CPCFO_NONE = 0,
    CPCFO_ENABLE_PASSWORD_REVEAL = 1,
    CPCFO_IS_EMAIL_ADDRESS = 2,
    CPCFO_ENABLE_TOUCH_KEYBOARD_AUTO_INVOKE = 4,
    CPCFO_NUMBERS_ONLY = 8,
    CPCFO_SHOW_ENGLISH_KEYBOARD = 16,
};
pub const CPCFO_NONE = CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS.CPCFO_NONE;
pub const CPCFO_ENABLE_PASSWORD_REVEAL = CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS.CPCFO_ENABLE_PASSWORD_REVEAL;
pub const CPCFO_IS_EMAIL_ADDRESS = CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS.CPCFO_IS_EMAIL_ADDRESS;
pub const CPCFO_ENABLE_TOUCH_KEYBOARD_AUTO_INVOKE = CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS.CPCFO_ENABLE_TOUCH_KEYBOARD_AUTO_INVOKE;
pub const CPCFO_NUMBERS_ONLY = CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS.CPCFO_NUMBERS_ONLY;
pub const CPCFO_SHOW_ENGLISH_KEYBOARD = CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS.CPCFO_SHOW_ENGLISH_KEYBOARD;

const IID_ICredentialProviderCredential_Value = @import("../zig.zig").Guid.initString("63913A93-40C1-481A-818D-4072FF8C70CC");
pub const IID_ICredentialProviderCredential = &IID_ICredentialProviderCredential_Value;
pub const ICredentialProviderCredential = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: fn(
            self: *const ICredentialProviderCredential,
            pcpce: *ICredentialProviderCredentialEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnAdvise: fn(
            self: *const ICredentialProviderCredential,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSelected: fn(
            self: *const ICredentialProviderCredential,
            pbAutoLogon: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDeselected: fn(
            self: *const ICredentialProviderCredential,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFieldState: fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            pcpfs: *CREDENTIAL_PROVIDER_FIELD_STATE,
            pcpfis: *CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringValue: fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            ppsz: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitmapValue: fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            phbmp: *HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCheckboxValue: fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            pbChecked: *BOOL,
            ppszLabel: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubmitButtonValue: fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            pdwAdjacentTo: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComboBoxValueCount: fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            pcItems: *u32,
            pdwSelectedItem: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComboBoxValueAt: fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            dwItem: u32,
            ppszItem: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStringValue: fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            psz: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCheckboxValue: fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            bChecked: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetComboBoxSelectedValue: fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
            dwSelectedItem: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommandLinkClicked: fn(
            self: *const ICredentialProviderCredential,
            dwFieldID: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSerialization: fn(
            self: *const ICredentialProviderCredential,
            pcpgsr: *CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE,
            pcpcs: *CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION,
            ppszOptionalStatusText: ?*?PWSTR,
            pcpsiOptionalStatusIcon: *CREDENTIAL_PROVIDER_STATUS_ICON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReportResult: fn(
            self: *const ICredentialProviderCredential,
            ntsStatus: NTSTATUS,
            ntsSubstatus: NTSTATUS,
            ppszOptionalStatusText: ?*?PWSTR,
            pcpsiOptionalStatusIcon: *CREDENTIAL_PROVIDER_STATUS_ICON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredential_Advise(self: *const T, pcpce: *ICredentialProviderCredentialEvents) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredential.VTable, self.vtable).Advise(@ptrCast(*const ICredentialProviderCredential, self), pcpce);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredential_UnAdvise(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredential.VTable, self.vtable).UnAdvise(@ptrCast(*const ICredentialProviderCredential, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredential_SetSelected(self: *const T, pbAutoLogon: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredential.VTable, self.vtable).SetSelected(@ptrCast(*const ICredentialProviderCredential, self), pbAutoLogon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredential_SetDeselected(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredential.VTable, self.vtable).SetDeselected(@ptrCast(*const ICredentialProviderCredential, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredential_GetFieldState(self: *const T, dwFieldID: u32, pcpfs: *CREDENTIAL_PROVIDER_FIELD_STATE, pcpfis: *CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredential.VTable, self.vtable).GetFieldState(@ptrCast(*const ICredentialProviderCredential, self), dwFieldID, pcpfs, pcpfis);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredential_GetStringValue(self: *const T, dwFieldID: u32, ppsz: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredential.VTable, self.vtable).GetStringValue(@ptrCast(*const ICredentialProviderCredential, self), dwFieldID, ppsz);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredential_GetBitmapValue(self: *const T, dwFieldID: u32, phbmp: *HBITMAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredential.VTable, self.vtable).GetBitmapValue(@ptrCast(*const ICredentialProviderCredential, self), dwFieldID, phbmp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredential_GetCheckboxValue(self: *const T, dwFieldID: u32, pbChecked: *BOOL, ppszLabel: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredential.VTable, self.vtable).GetCheckboxValue(@ptrCast(*const ICredentialProviderCredential, self), dwFieldID, pbChecked, ppszLabel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredential_GetSubmitButtonValue(self: *const T, dwFieldID: u32, pdwAdjacentTo: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredential.VTable, self.vtable).GetSubmitButtonValue(@ptrCast(*const ICredentialProviderCredential, self), dwFieldID, pdwAdjacentTo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredential_GetComboBoxValueCount(self: *const T, dwFieldID: u32, pcItems: *u32, pdwSelectedItem: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredential.VTable, self.vtable).GetComboBoxValueCount(@ptrCast(*const ICredentialProviderCredential, self), dwFieldID, pcItems, pdwSelectedItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredential_GetComboBoxValueAt(self: *const T, dwFieldID: u32, dwItem: u32, ppszItem: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredential.VTable, self.vtable).GetComboBoxValueAt(@ptrCast(*const ICredentialProviderCredential, self), dwFieldID, dwItem, ppszItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredential_SetStringValue(self: *const T, dwFieldID: u32, psz: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredential.VTable, self.vtable).SetStringValue(@ptrCast(*const ICredentialProviderCredential, self), dwFieldID, psz);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredential_SetCheckboxValue(self: *const T, dwFieldID: u32, bChecked: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredential.VTable, self.vtable).SetCheckboxValue(@ptrCast(*const ICredentialProviderCredential, self), dwFieldID, bChecked);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredential_SetComboBoxSelectedValue(self: *const T, dwFieldID: u32, dwSelectedItem: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredential.VTable, self.vtable).SetComboBoxSelectedValue(@ptrCast(*const ICredentialProviderCredential, self), dwFieldID, dwSelectedItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredential_CommandLinkClicked(self: *const T, dwFieldID: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredential.VTable, self.vtable).CommandLinkClicked(@ptrCast(*const ICredentialProviderCredential, self), dwFieldID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredential_GetSerialization(self: *const T, pcpgsr: *CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE, pcpcs: *CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION, ppszOptionalStatusText: ?*?PWSTR, pcpsiOptionalStatusIcon: *CREDENTIAL_PROVIDER_STATUS_ICON) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredential.VTable, self.vtable).GetSerialization(@ptrCast(*const ICredentialProviderCredential, self), pcpgsr, pcpcs, ppszOptionalStatusText, pcpsiOptionalStatusIcon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredential_ReportResult(self: *const T, ntsStatus: NTSTATUS, ntsSubstatus: NTSTATUS, ppszOptionalStatusText: ?*?PWSTR, pcpsiOptionalStatusIcon: *CREDENTIAL_PROVIDER_STATUS_ICON) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredential.VTable, self.vtable).ReportResult(@ptrCast(*const ICredentialProviderCredential, self), ntsStatus, ntsSubstatus, ppszOptionalStatusText, pcpsiOptionalStatusIcon);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IQueryContinueWithStatus_Value = @import("../zig.zig").Guid.initString("9090BE5B-502B-41FB-BCCC-0049A6C7254B");
pub const IID_IQueryContinueWithStatus = &IID_IQueryContinueWithStatus_Value;
pub const IQueryContinueWithStatus = extern struct {
    pub const VTable = extern struct {
        base: IQueryContinue.VTable,
        SetStatusMessage: fn(
            self: *const IQueryContinueWithStatus,
            psz: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IQueryContinue.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IQueryContinueWithStatus_SetStatusMessage(self: *const T, psz: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IQueryContinueWithStatus.VTable, self.vtable).SetStatusMessage(@ptrCast(*const IQueryContinueWithStatus, self), psz);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IConnectableCredentialProviderCredential_Value = @import("../zig.zig").Guid.initString("9387928B-AC75-4BF9-8AB2-2B93C4A55290");
pub const IID_IConnectableCredentialProviderCredential = &IID_IConnectableCredentialProviderCredential_Value;
pub const IConnectableCredentialProviderCredential = extern struct {
    pub const VTable = extern struct {
        base: ICredentialProviderCredential.VTable,
        Connect: fn(
            self: *const IConnectableCredentialProviderCredential,
            pqcws: *IQueryContinueWithStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: fn(
            self: *const IConnectableCredentialProviderCredential,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICredentialProviderCredential.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConnectableCredentialProviderCredential_Connect(self: *const T, pqcws: *IQueryContinueWithStatus) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConnectableCredentialProviderCredential.VTable, self.vtable).Connect(@ptrCast(*const IConnectableCredentialProviderCredential, self), pqcws);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConnectableCredentialProviderCredential_Disconnect(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConnectableCredentialProviderCredential.VTable, self.vtable).Disconnect(@ptrCast(*const IConnectableCredentialProviderCredential, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICredentialProviderCredentialEvents_Value = @import("../zig.zig").Guid.initString("FA6FA76B-66B7-4B11-95F1-86171118E816");
pub const IID_ICredentialProviderCredentialEvents = &IID_ICredentialProviderCredentialEvents_Value;
pub const ICredentialProviderCredentialEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFieldState: fn(
            self: *const ICredentialProviderCredentialEvents,
            pcpc: *ICredentialProviderCredential,
            dwFieldID: u32,
            cpfs: CREDENTIAL_PROVIDER_FIELD_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldInteractiveState: fn(
            self: *const ICredentialProviderCredentialEvents,
            pcpc: *ICredentialProviderCredential,
            dwFieldID: u32,
            cpfis: CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldString: fn(
            self: *const ICredentialProviderCredentialEvents,
            pcpc: *ICredentialProviderCredential,
            dwFieldID: u32,
            psz: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldCheckbox: fn(
            self: *const ICredentialProviderCredentialEvents,
            pcpc: *ICredentialProviderCredential,
            dwFieldID: u32,
            bChecked: BOOL,
            pszLabel: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldBitmap: fn(
            self: *const ICredentialProviderCredentialEvents,
            pcpc: *ICredentialProviderCredential,
            dwFieldID: u32,
            hbmp: HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldComboBoxSelectedItem: fn(
            self: *const ICredentialProviderCredentialEvents,
            pcpc: *ICredentialProviderCredential,
            dwFieldID: u32,
            dwSelectedItem: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteFieldComboBoxItem: fn(
            self: *const ICredentialProviderCredentialEvents,
            pcpc: *ICredentialProviderCredential,
            dwFieldID: u32,
            dwItem: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendFieldComboBoxItem: fn(
            self: *const ICredentialProviderCredentialEvents,
            pcpc: *ICredentialProviderCredential,
            dwFieldID: u32,
            pszItem: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldSubmitButton: fn(
            self: *const ICredentialProviderCredentialEvents,
            pcpc: *ICredentialProviderCredential,
            dwFieldID: u32,
            dwAdjacentTo: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCreatingWindow: fn(
            self: *const ICredentialProviderCredentialEvents,
            phwndOwner: *HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredentialEvents_SetFieldState(self: *const T, pcpc: *ICredentialProviderCredential, dwFieldID: u32, cpfs: CREDENTIAL_PROVIDER_FIELD_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredentialEvents.VTable, self.vtable).SetFieldState(@ptrCast(*const ICredentialProviderCredentialEvents, self), pcpc, dwFieldID, cpfs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredentialEvents_SetFieldInteractiveState(self: *const T, pcpc: *ICredentialProviderCredential, dwFieldID: u32, cpfis: CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredentialEvents.VTable, self.vtable).SetFieldInteractiveState(@ptrCast(*const ICredentialProviderCredentialEvents, self), pcpc, dwFieldID, cpfis);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredentialEvents_SetFieldString(self: *const T, pcpc: *ICredentialProviderCredential, dwFieldID: u32, psz: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredentialEvents.VTable, self.vtable).SetFieldString(@ptrCast(*const ICredentialProviderCredentialEvents, self), pcpc, dwFieldID, psz);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredentialEvents_SetFieldCheckbox(self: *const T, pcpc: *ICredentialProviderCredential, dwFieldID: u32, bChecked: BOOL, pszLabel: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredentialEvents.VTable, self.vtable).SetFieldCheckbox(@ptrCast(*const ICredentialProviderCredentialEvents, self), pcpc, dwFieldID, bChecked, pszLabel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredentialEvents_SetFieldBitmap(self: *const T, pcpc: *ICredentialProviderCredential, dwFieldID: u32, hbmp: HBITMAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredentialEvents.VTable, self.vtable).SetFieldBitmap(@ptrCast(*const ICredentialProviderCredentialEvents, self), pcpc, dwFieldID, hbmp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredentialEvents_SetFieldComboBoxSelectedItem(self: *const T, pcpc: *ICredentialProviderCredential, dwFieldID: u32, dwSelectedItem: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredentialEvents.VTable, self.vtable).SetFieldComboBoxSelectedItem(@ptrCast(*const ICredentialProviderCredentialEvents, self), pcpc, dwFieldID, dwSelectedItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredentialEvents_DeleteFieldComboBoxItem(self: *const T, pcpc: *ICredentialProviderCredential, dwFieldID: u32, dwItem: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredentialEvents.VTable, self.vtable).DeleteFieldComboBoxItem(@ptrCast(*const ICredentialProviderCredentialEvents, self), pcpc, dwFieldID, dwItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredentialEvents_AppendFieldComboBoxItem(self: *const T, pcpc: *ICredentialProviderCredential, dwFieldID: u32, pszItem: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredentialEvents.VTable, self.vtable).AppendFieldComboBoxItem(@ptrCast(*const ICredentialProviderCredentialEvents, self), pcpc, dwFieldID, pszItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredentialEvents_SetFieldSubmitButton(self: *const T, pcpc: *ICredentialProviderCredential, dwFieldID: u32, dwAdjacentTo: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredentialEvents.VTable, self.vtable).SetFieldSubmitButton(@ptrCast(*const ICredentialProviderCredentialEvents, self), pcpc, dwFieldID, dwAdjacentTo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredentialEvents_OnCreatingWindow(self: *const T, phwndOwner: *HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredentialEvents.VTable, self.vtable).OnCreatingWindow(@ptrCast(*const ICredentialProviderCredentialEvents, self), phwndOwner);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICredentialProvider_Value = @import("../zig.zig").Guid.initString("D27C3481-5A1C-45B2-8AAA-C20EBBE8229E");
pub const IID_ICredentialProvider = &IID_ICredentialProvider_Value;
pub const ICredentialProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetUsageScenario: fn(
            self: *const ICredentialProvider,
            cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSerialization: fn(
            self: *const ICredentialProvider,
            pcpcs: *const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: fn(
            self: *const ICredentialProvider,
            pcpe: *ICredentialProviderEvents,
            upAdviseContext: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnAdvise: fn(
            self: *const ICredentialProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFieldDescriptorCount: fn(
            self: *const ICredentialProvider,
            pdwCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFieldDescriptorAt: fn(
            self: *const ICredentialProvider,
            dwIndex: u32,
            ppcpfd: **CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCredentialCount: fn(
            self: *const ICredentialProvider,
            pdwCount: *u32,
            pdwDefault: *u32,
            pbAutoLogonWithDefault: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCredentialAt: fn(
            self: *const ICredentialProvider,
            dwIndex: u32,
            ppcpc: **ICredentialProviderCredential,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProvider_SetUsageScenario(self: *const T, cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProvider.VTable, self.vtable).SetUsageScenario(@ptrCast(*const ICredentialProvider, self), cpus, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProvider_SetSerialization(self: *const T, pcpcs: *const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProvider.VTable, self.vtable).SetSerialization(@ptrCast(*const ICredentialProvider, self), pcpcs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProvider_Advise(self: *const T, pcpe: *ICredentialProviderEvents, upAdviseContext: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProvider.VTable, self.vtable).Advise(@ptrCast(*const ICredentialProvider, self), pcpe, upAdviseContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProvider_UnAdvise(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProvider.VTable, self.vtable).UnAdvise(@ptrCast(*const ICredentialProvider, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProvider_GetFieldDescriptorCount(self: *const T, pdwCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProvider.VTable, self.vtable).GetFieldDescriptorCount(@ptrCast(*const ICredentialProvider, self), pdwCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProvider_GetFieldDescriptorAt(self: *const T, dwIndex: u32, ppcpfd: **CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProvider.VTable, self.vtable).GetFieldDescriptorAt(@ptrCast(*const ICredentialProvider, self), dwIndex, ppcpfd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProvider_GetCredentialCount(self: *const T, pdwCount: *u32, pdwDefault: *u32, pbAutoLogonWithDefault: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProvider.VTable, self.vtable).GetCredentialCount(@ptrCast(*const ICredentialProvider, self), pdwCount, pdwDefault, pbAutoLogonWithDefault);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProvider_GetCredentialAt(self: *const T, dwIndex: u32, ppcpc: **ICredentialProviderCredential) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProvider.VTable, self.vtable).GetCredentialAt(@ptrCast(*const ICredentialProvider, self), dwIndex, ppcpc);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICredentialProviderEvents_Value = @import("../zig.zig").Guid.initString("34201E5A-A787-41A3-A5A4-BD6DCF2A854E");
pub const IID_ICredentialProviderEvents = &IID_ICredentialProviderEvents_Value;
pub const ICredentialProviderEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CredentialsChanged: fn(
            self: *const ICredentialProviderEvents,
            upAdviseContext: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderEvents_CredentialsChanged(self: *const T, upAdviseContext: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderEvents.VTable, self.vtable).CredentialsChanged(@ptrCast(*const ICredentialProviderEvents, self), upAdviseContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICredentialProviderFilter_Value = @import("../zig.zig").Guid.initString("A5DA53F9-D475-4080-A120-910C4A739880");
pub const IID_ICredentialProviderFilter = &IID_ICredentialProviderFilter_Value;
pub const ICredentialProviderFilter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Filter: fn(
            self: *const ICredentialProviderFilter,
            cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO,
            dwFlags: u32,
            rgclsidProviders: [*]Guid,
            rgbAllow: [*]BOOL,
            cProviders: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateRemoteCredential: fn(
            self: *const ICredentialProviderFilter,
            pcpcsIn: *const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION,
            pcpcsOut: *CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderFilter_Filter(self: *const T, cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO, dwFlags: u32, rgclsidProviders: [*]Guid, rgbAllow: [*]BOOL, cProviders: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderFilter.VTable, self.vtable).Filter(@ptrCast(*const ICredentialProviderFilter, self), cpus, dwFlags, rgclsidProviders, rgbAllow, cProviders);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderFilter_UpdateRemoteCredential(self: *const T, pcpcsIn: *const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION, pcpcsOut: *CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderFilter.VTable, self.vtable).UpdateRemoteCredential(@ptrCast(*const ICredentialProviderFilter, self), pcpcsIn, pcpcsOut);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICredentialProviderCredential2_Value = @import("../zig.zig").Guid.initString("FD672C54-40EA-4D6E-9B49-CFB1A7507BD7");
pub const IID_ICredentialProviderCredential2 = &IID_ICredentialProviderCredential2_Value;
pub const ICredentialProviderCredential2 = extern struct {
    pub const VTable = extern struct {
        base: ICredentialProviderCredential.VTable,
        GetUserSid: fn(
            self: *const ICredentialProviderCredential2,
            sid: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICredentialProviderCredential.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredential2_GetUserSid(self: *const T, sid: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredential2.VTable, self.vtable).GetUserSid(@ptrCast(*const ICredentialProviderCredential2, self), sid);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICredentialProviderCredentialWithFieldOptions_Value = @import("../zig.zig").Guid.initString("DBC6FB30-C843-49E3-A645-573E6F39446A");
pub const IID_ICredentialProviderCredentialWithFieldOptions = &IID_ICredentialProviderCredentialWithFieldOptions_Value;
pub const ICredentialProviderCredentialWithFieldOptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFieldOptions: fn(
            self: *const ICredentialProviderCredentialWithFieldOptions,
            fieldID: u32,
            options: *CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredentialWithFieldOptions_GetFieldOptions(self: *const T, fieldID: u32, options: *CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredentialWithFieldOptions.VTable, self.vtable).GetFieldOptions(@ptrCast(*const ICredentialProviderCredentialWithFieldOptions, self), fieldID, options);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICredentialProviderCredentialEvents2_Value = @import("../zig.zig").Guid.initString("B53C00B6-9922-4B78-B1F4-DDFE774DC39B");
pub const IID_ICredentialProviderCredentialEvents2 = &IID_ICredentialProviderCredentialEvents2_Value;
pub const ICredentialProviderCredentialEvents2 = extern struct {
    pub const VTable = extern struct {
        base: ICredentialProviderCredentialEvents.VTable,
        BeginFieldUpdates: fn(
            self: *const ICredentialProviderCredentialEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndFieldUpdates: fn(
            self: *const ICredentialProviderCredentialEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldOptions: fn(
            self: *const ICredentialProviderCredentialEvents2,
            credential: *ICredentialProviderCredential,
            fieldID: u32,
            options: CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICredentialProviderCredentialEvents.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredentialEvents2_BeginFieldUpdates(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredentialEvents2.VTable, self.vtable).BeginFieldUpdates(@ptrCast(*const ICredentialProviderCredentialEvents2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredentialEvents2_EndFieldUpdates(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredentialEvents2.VTable, self.vtable).EndFieldUpdates(@ptrCast(*const ICredentialProviderCredentialEvents2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderCredentialEvents2_SetFieldOptions(self: *const T, credential: *ICredentialProviderCredential, fieldID: u32, options: CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderCredentialEvents2.VTable, self.vtable).SetFieldOptions(@ptrCast(*const ICredentialProviderCredentialEvents2, self), credential, fieldID, options);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICredentialProviderUser_Value = @import("../zig.zig").Guid.initString("13793285-3EA6-40FD-B420-15F47DA41FBB");
pub const IID_ICredentialProviderUser = &IID_ICredentialProviderUser_Value;
pub const ICredentialProviderUser = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSid: fn(
            self: *const ICredentialProviderUser,
            sid: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProviderID: fn(
            self: *const ICredentialProviderUser,
            providerID: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringValue: fn(
            self: *const ICredentialProviderUser,
            key: *const PROPERTYKEY,
            stringValue: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const ICredentialProviderUser,
            key: *const PROPERTYKEY,
            value: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderUser_GetSid(self: *const T, sid: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderUser.VTable, self.vtable).GetSid(@ptrCast(*const ICredentialProviderUser, self), sid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderUser_GetProviderID(self: *const T, providerID: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderUser.VTable, self.vtable).GetProviderID(@ptrCast(*const ICredentialProviderUser, self), providerID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderUser_GetStringValue(self: *const T, key: *const PROPERTYKEY, stringValue: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderUser.VTable, self.vtable).GetStringValue(@ptrCast(*const ICredentialProviderUser, self), key, stringValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderUser_GetValue(self: *const T, key: *const PROPERTYKEY, value: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderUser.VTable, self.vtable).GetValue(@ptrCast(*const ICredentialProviderUser, self), key, value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICredentialProviderUserArray_Value = @import("../zig.zig").Guid.initString("90C119AE-0F18-4520-A1F1-114366A40FE8");
pub const IID_ICredentialProviderUserArray = &IID_ICredentialProviderUserArray_Value;
pub const ICredentialProviderUserArray = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetProviderFilter: fn(
            self: *const ICredentialProviderUserArray,
            guidProviderToFilterTo: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccountOptions: fn(
            self: *const ICredentialProviderUserArray,
            credentialProviderAccountOptions: *CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: fn(
            self: *const ICredentialProviderUserArray,
            userCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const ICredentialProviderUserArray,
            userIndex: u32,
            user: **ICredentialProviderUser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderUserArray_SetProviderFilter(self: *const T, guidProviderToFilterTo: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderUserArray.VTable, self.vtable).SetProviderFilter(@ptrCast(*const ICredentialProviderUserArray, self), guidProviderToFilterTo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderUserArray_GetAccountOptions(self: *const T, credentialProviderAccountOptions: *CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderUserArray.VTable, self.vtable).GetAccountOptions(@ptrCast(*const ICredentialProviderUserArray, self), credentialProviderAccountOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderUserArray_GetCount(self: *const T, userCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderUserArray.VTable, self.vtable).GetCount(@ptrCast(*const ICredentialProviderUserArray, self), userCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderUserArray_GetAt(self: *const T, userIndex: u32, user: **ICredentialProviderUser) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderUserArray.VTable, self.vtable).GetAt(@ptrCast(*const ICredentialProviderUserArray, self), userIndex, user);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICredentialProviderSetUserArray_Value = @import("../zig.zig").Guid.initString("095C1484-1C0C-4388-9C6D-500E61BF84BD");
pub const IID_ICredentialProviderSetUserArray = &IID_ICredentialProviderSetUserArray_Value;
pub const ICredentialProviderSetUserArray = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetUserArray: fn(
            self: *const ICredentialProviderSetUserArray,
            users: *ICredentialProviderUserArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICredentialProviderSetUserArray_SetUserArray(self: *const T, users: *ICredentialProviderUserArray) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICredentialProviderSetUserArray.VTable, self.vtable).SetUserArray(@ptrCast(*const ICredentialProviderSetUserArray, self), users);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_SyncMgrClient_Value = @import("../zig.zig").Guid.initString("1202DB60-1DAC-42C5-AED5-1ABDD432248E");
pub const CLSID_SyncMgrClient = &CLSID_SyncMgrClient_Value;

const CLSID_SyncMgrControl_Value = @import("../zig.zig").Guid.initString("1A1F4206-0688-4E7F-BE03-D82EC69DF9A5");
pub const CLSID_SyncMgrControl = &CLSID_SyncMgrControl_Value;

const CLSID_SyncMgrScheduleWizard_Value = @import("../zig.zig").Guid.initString("8D8B8E30-C451-421B-8553-D2976AFA648C");
pub const CLSID_SyncMgrScheduleWizard = &CLSID_SyncMgrScheduleWizard_Value;

const CLSID_SyncMgrFolder_Value = @import("../zig.zig").Guid.initString("9C73F5E5-7AE7-4E32-A8E8-8D23B85255BF");
pub const CLSID_SyncMgrFolder = &CLSID_SyncMgrFolder_Value;

const CLSID_SyncSetupFolder_Value = @import("../zig.zig").Guid.initString("2E9E59C0-B437-4981-A647-9C34B9B90891");
pub const CLSID_SyncSetupFolder = &CLSID_SyncSetupFolder_Value;

const CLSID_ConflictFolder_Value = @import("../zig.zig").Guid.initString("289978AC-A101-4341-A817-21EBA7FD046D");
pub const CLSID_ConflictFolder = &CLSID_ConflictFolder_Value;

const CLSID_SyncResultsFolder_Value = @import("../zig.zig").Guid.initString("71D99464-3B6B-475C-B241-E15883207529");
pub const CLSID_SyncResultsFolder = &CLSID_SyncResultsFolder_Value;

const CLSID_SimpleConflictPresenter_Value = @import("../zig.zig").Guid.initString("7A0F6AB7-ED84-46B6-B47E-02AA159A152B");
pub const CLSID_SimpleConflictPresenter = &CLSID_SimpleConflictPresenter_Value;

const IID_ISyncMgrHandlerCollection_Value = @import("../zig.zig").Guid.initString("A7F337A3-D20B-45CB-9ED7-87D094CA5045");
pub const IID_ISyncMgrHandlerCollection = &IID_ISyncMgrHandlerCollection_Value;
pub const ISyncMgrHandlerCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetHandlerEnumerator: fn(
            self: *const ISyncMgrHandlerCollection,
            ppenum: **IEnumString,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindToHandler: fn(
            self: *const ISyncMgrHandlerCollection,
            pszHandlerID: [*:0]const u16,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrHandlerCollection_GetHandlerEnumerator(self: *const T, ppenum: **IEnumString) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrHandlerCollection.VTable, self.vtable).GetHandlerEnumerator(@ptrCast(*const ISyncMgrHandlerCollection, self), ppenum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrHandlerCollection_BindToHandler(self: *const T, pszHandlerID: [*:0]const u16, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrHandlerCollection.VTable, self.vtable).BindToHandler(@ptrCast(*const ISyncMgrHandlerCollection, self), pszHandlerID, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGR_HANDLER_CAPABILITIES = extern enum(i32) {
    SYNCMGR_HCM_NONE = 0,
    SYNCMGR_HCM_PROVIDES_ICON = 1,
    SYNCMGR_HCM_EVENT_STORE = 2,
    SYNCMGR_HCM_CONFLICT_STORE = 4,
    SYNCMGR_HCM_SUPPORTS_CONCURRENT_SESSIONS = 16,
    SYNCMGR_HCM_CAN_BROWSE_CONTENT = 65536,
    SYNCMGR_HCM_CAN_SHOW_SCHEDULE = 131072,
    SYNCMGR_HCM_QUERY_BEFORE_ACTIVATE = 1048576,
    SYNCMGR_HCM_QUERY_BEFORE_DEACTIVATE = 2097152,
    SYNCMGR_HCM_QUERY_BEFORE_ENABLE = 4194304,
    SYNCMGR_HCM_QUERY_BEFORE_DISABLE = 8388608,
    SYNCMGR_HCM_VALID_MASK = 15925271,
};
pub const SYNCMGR_HCM_NONE = SYNCMGR_HANDLER_CAPABILITIES.SYNCMGR_HCM_NONE;
pub const SYNCMGR_HCM_PROVIDES_ICON = SYNCMGR_HANDLER_CAPABILITIES.SYNCMGR_HCM_PROVIDES_ICON;
pub const SYNCMGR_HCM_EVENT_STORE = SYNCMGR_HANDLER_CAPABILITIES.SYNCMGR_HCM_EVENT_STORE;
pub const SYNCMGR_HCM_CONFLICT_STORE = SYNCMGR_HANDLER_CAPABILITIES.SYNCMGR_HCM_CONFLICT_STORE;
pub const SYNCMGR_HCM_SUPPORTS_CONCURRENT_SESSIONS = SYNCMGR_HANDLER_CAPABILITIES.SYNCMGR_HCM_SUPPORTS_CONCURRENT_SESSIONS;
pub const SYNCMGR_HCM_CAN_BROWSE_CONTENT = SYNCMGR_HANDLER_CAPABILITIES.SYNCMGR_HCM_CAN_BROWSE_CONTENT;
pub const SYNCMGR_HCM_CAN_SHOW_SCHEDULE = SYNCMGR_HANDLER_CAPABILITIES.SYNCMGR_HCM_CAN_SHOW_SCHEDULE;
pub const SYNCMGR_HCM_QUERY_BEFORE_ACTIVATE = SYNCMGR_HANDLER_CAPABILITIES.SYNCMGR_HCM_QUERY_BEFORE_ACTIVATE;
pub const SYNCMGR_HCM_QUERY_BEFORE_DEACTIVATE = SYNCMGR_HANDLER_CAPABILITIES.SYNCMGR_HCM_QUERY_BEFORE_DEACTIVATE;
pub const SYNCMGR_HCM_QUERY_BEFORE_ENABLE = SYNCMGR_HANDLER_CAPABILITIES.SYNCMGR_HCM_QUERY_BEFORE_ENABLE;
pub const SYNCMGR_HCM_QUERY_BEFORE_DISABLE = SYNCMGR_HANDLER_CAPABILITIES.SYNCMGR_HCM_QUERY_BEFORE_DISABLE;
pub const SYNCMGR_HCM_VALID_MASK = SYNCMGR_HANDLER_CAPABILITIES.SYNCMGR_HCM_VALID_MASK;

pub const SYNCMGR_HANDLER_POLICIES = extern enum(i32) {
    SYNCMGR_HPM_NONE = 0,
    SYNCMGR_HPM_PREVENT_ACTIVATE = 1,
    SYNCMGR_HPM_PREVENT_DEACTIVATE = 2,
    SYNCMGR_HPM_PREVENT_ENABLE = 4,
    SYNCMGR_HPM_PREVENT_DISABLE = 8,
    SYNCMGR_HPM_PREVENT_START_SYNC = 16,
    SYNCMGR_HPM_PREVENT_STOP_SYNC = 32,
    SYNCMGR_HPM_DISABLE_ENABLE = 256,
    SYNCMGR_HPM_DISABLE_DISABLE = 512,
    SYNCMGR_HPM_DISABLE_START_SYNC = 1024,
    SYNCMGR_HPM_DISABLE_STOP_SYNC = 2048,
    SYNCMGR_HPM_DISABLE_BROWSE = 4096,
    SYNCMGR_HPM_DISABLE_SCHEDULE = 8192,
    SYNCMGR_HPM_HIDDEN_BY_DEFAULT = 65536,
    SYNCMGR_HPM_BACKGROUND_SYNC_ONLY = 48,
    SYNCMGR_HPM_VALID_MASK = 77631,
};
pub const SYNCMGR_HPM_NONE = SYNCMGR_HANDLER_POLICIES.SYNCMGR_HPM_NONE;
pub const SYNCMGR_HPM_PREVENT_ACTIVATE = SYNCMGR_HANDLER_POLICIES.SYNCMGR_HPM_PREVENT_ACTIVATE;
pub const SYNCMGR_HPM_PREVENT_DEACTIVATE = SYNCMGR_HANDLER_POLICIES.SYNCMGR_HPM_PREVENT_DEACTIVATE;
pub const SYNCMGR_HPM_PREVENT_ENABLE = SYNCMGR_HANDLER_POLICIES.SYNCMGR_HPM_PREVENT_ENABLE;
pub const SYNCMGR_HPM_PREVENT_DISABLE = SYNCMGR_HANDLER_POLICIES.SYNCMGR_HPM_PREVENT_DISABLE;
pub const SYNCMGR_HPM_PREVENT_START_SYNC = SYNCMGR_HANDLER_POLICIES.SYNCMGR_HPM_PREVENT_START_SYNC;
pub const SYNCMGR_HPM_PREVENT_STOP_SYNC = SYNCMGR_HANDLER_POLICIES.SYNCMGR_HPM_PREVENT_STOP_SYNC;
pub const SYNCMGR_HPM_DISABLE_ENABLE = SYNCMGR_HANDLER_POLICIES.SYNCMGR_HPM_DISABLE_ENABLE;
pub const SYNCMGR_HPM_DISABLE_DISABLE = SYNCMGR_HANDLER_POLICIES.SYNCMGR_HPM_DISABLE_DISABLE;
pub const SYNCMGR_HPM_DISABLE_START_SYNC = SYNCMGR_HANDLER_POLICIES.SYNCMGR_HPM_DISABLE_START_SYNC;
pub const SYNCMGR_HPM_DISABLE_STOP_SYNC = SYNCMGR_HANDLER_POLICIES.SYNCMGR_HPM_DISABLE_STOP_SYNC;
pub const SYNCMGR_HPM_DISABLE_BROWSE = SYNCMGR_HANDLER_POLICIES.SYNCMGR_HPM_DISABLE_BROWSE;
pub const SYNCMGR_HPM_DISABLE_SCHEDULE = SYNCMGR_HANDLER_POLICIES.SYNCMGR_HPM_DISABLE_SCHEDULE;
pub const SYNCMGR_HPM_HIDDEN_BY_DEFAULT = SYNCMGR_HANDLER_POLICIES.SYNCMGR_HPM_HIDDEN_BY_DEFAULT;
pub const SYNCMGR_HPM_BACKGROUND_SYNC_ONLY = SYNCMGR_HANDLER_POLICIES.SYNCMGR_HPM_BACKGROUND_SYNC_ONLY;
pub const SYNCMGR_HPM_VALID_MASK = SYNCMGR_HANDLER_POLICIES.SYNCMGR_HPM_VALID_MASK;

const IID_ISyncMgrHandler_Value = @import("../zig.zig").Guid.initString("04EC2E43-AC77-49F9-9B98-0307EF7A72A2");
pub const IID_ISyncMgrHandler = &IID_ISyncMgrHandler_Value;
pub const ISyncMgrHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetName: fn(
            self: *const ISyncMgrHandler,
            ppszName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHandlerInfo: fn(
            self: *const ISyncMgrHandler,
            ppHandlerInfo: **ISyncMgrHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObject: fn(
            self: *const ISyncMgrHandler,
            rguidObjectID: *const Guid,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCapabilities: fn(
            self: *const ISyncMgrHandler,
            pmCapabilities: *SYNCMGR_HANDLER_CAPABILITIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicies: fn(
            self: *const ISyncMgrHandler,
            pmPolicies: *SYNCMGR_HANDLER_POLICIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: fn(
            self: *const ISyncMgrHandler,
            fActivate: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: fn(
            self: *const ISyncMgrHandler,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Synchronize: fn(
            self: *const ISyncMgrHandler,
            ppszItemIDs: [*]PWSTR,
            cItems: u32,
            hwndOwner: HWND,
            pSessionCreator: *ISyncMgrSessionCreator,
            punk: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrHandler_GetName(self: *const T, ppszName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrHandler.VTable, self.vtable).GetName(@ptrCast(*const ISyncMgrHandler, self), ppszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrHandler_GetHandlerInfo(self: *const T, ppHandlerInfo: **ISyncMgrHandlerInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrHandler.VTable, self.vtable).GetHandlerInfo(@ptrCast(*const ISyncMgrHandler, self), ppHandlerInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrHandler_GetObject(self: *const T, rguidObjectID: *const Guid, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrHandler.VTable, self.vtable).GetObject(@ptrCast(*const ISyncMgrHandler, self), rguidObjectID, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrHandler_GetCapabilities(self: *const T, pmCapabilities: *SYNCMGR_HANDLER_CAPABILITIES) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrHandler.VTable, self.vtable).GetCapabilities(@ptrCast(*const ISyncMgrHandler, self), pmCapabilities);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrHandler_GetPolicies(self: *const T, pmPolicies: *SYNCMGR_HANDLER_POLICIES) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrHandler.VTable, self.vtable).GetPolicies(@ptrCast(*const ISyncMgrHandler, self), pmPolicies);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrHandler_Activate(self: *const T, fActivate: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrHandler.VTable, self.vtable).Activate(@ptrCast(*const ISyncMgrHandler, self), fActivate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrHandler_Enable(self: *const T, fEnable: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrHandler.VTable, self.vtable).Enable(@ptrCast(*const ISyncMgrHandler, self), fEnable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrHandler_Synchronize(self: *const T, ppszItemIDs: [*]PWSTR, cItems: u32, hwndOwner: HWND, pSessionCreator: *ISyncMgrSessionCreator, punk: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrHandler.VTable, self.vtable).Synchronize(@ptrCast(*const ISyncMgrHandler, self), ppszItemIDs, cItems, hwndOwner, pSessionCreator, punk);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGR_HANDLER_TYPE = extern enum(i32) {
    SYNCMGR_HT_UNSPECIFIED = 0,
    SYNCMGR_HT_APPLICATION = 1,
    SYNCMGR_HT_DEVICE = 2,
    SYNCMGR_HT_FOLDER = 3,
    SYNCMGR_HT_SERVICE = 4,
    SYNCMGR_HT_COMPUTER = 5,
    SYNCMGR_HT_MIN = 0,
    SYNCMGR_HT_MAX = 5,
};
pub const SYNCMGR_HT_UNSPECIFIED = SYNCMGR_HANDLER_TYPE.SYNCMGR_HT_UNSPECIFIED;
pub const SYNCMGR_HT_APPLICATION = SYNCMGR_HANDLER_TYPE.SYNCMGR_HT_APPLICATION;
pub const SYNCMGR_HT_DEVICE = SYNCMGR_HANDLER_TYPE.SYNCMGR_HT_DEVICE;
pub const SYNCMGR_HT_FOLDER = SYNCMGR_HANDLER_TYPE.SYNCMGR_HT_FOLDER;
pub const SYNCMGR_HT_SERVICE = SYNCMGR_HANDLER_TYPE.SYNCMGR_HT_SERVICE;
pub const SYNCMGR_HT_COMPUTER = SYNCMGR_HANDLER_TYPE.SYNCMGR_HT_COMPUTER;
pub const SYNCMGR_HT_MIN = SYNCMGR_HANDLER_TYPE.SYNCMGR_HT_MIN;
pub const SYNCMGR_HT_MAX = SYNCMGR_HANDLER_TYPE.SYNCMGR_HT_MAX;

const IID_ISyncMgrHandlerInfo_Value = @import("../zig.zig").Guid.initString("4FF1D798-ECF7-4524-AA81-1E362A0AEF3A");
pub const IID_ISyncMgrHandlerInfo = &IID_ISyncMgrHandlerInfo_Value;
pub const ISyncMgrHandlerInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetType: fn(
            self: *const ISyncMgrHandlerInfo,
            pnType: *SYNCMGR_HANDLER_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTypeLabel: fn(
            self: *const ISyncMgrHandlerInfo,
            ppszTypeLabel: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComment: fn(
            self: *const ISyncMgrHandlerInfo,
            ppszComment: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastSyncTime: fn(
            self: *const ISyncMgrHandlerInfo,
            pftLastSync: *FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsActive: fn(
            self: *const ISyncMgrHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEnabled: fn(
            self: *const ISyncMgrHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsConnected: fn(
            self: *const ISyncMgrHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrHandlerInfo_GetType(self: *const T, pnType: *SYNCMGR_HANDLER_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrHandlerInfo.VTable, self.vtable).GetType(@ptrCast(*const ISyncMgrHandlerInfo, self), pnType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrHandlerInfo_GetTypeLabel(self: *const T, ppszTypeLabel: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrHandlerInfo.VTable, self.vtable).GetTypeLabel(@ptrCast(*const ISyncMgrHandlerInfo, self), ppszTypeLabel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrHandlerInfo_GetComment(self: *const T, ppszComment: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrHandlerInfo.VTable, self.vtable).GetComment(@ptrCast(*const ISyncMgrHandlerInfo, self), ppszComment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrHandlerInfo_GetLastSyncTime(self: *const T, pftLastSync: *FILETIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrHandlerInfo.VTable, self.vtable).GetLastSyncTime(@ptrCast(*const ISyncMgrHandlerInfo, self), pftLastSync);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrHandlerInfo_IsActive(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrHandlerInfo.VTable, self.vtable).IsActive(@ptrCast(*const ISyncMgrHandlerInfo, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrHandlerInfo_IsEnabled(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrHandlerInfo.VTable, self.vtable).IsEnabled(@ptrCast(*const ISyncMgrHandlerInfo, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrHandlerInfo_IsConnected(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrHandlerInfo.VTable, self.vtable).IsConnected(@ptrCast(*const ISyncMgrHandlerInfo, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncMgrSyncItemContainer_Value = @import("../zig.zig").Guid.initString("90701133-BE32-4129-A65C-99E616CAFFF4");
pub const IID_ISyncMgrSyncItemContainer = &IID_ISyncMgrSyncItemContainer_Value;
pub const ISyncMgrSyncItemContainer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSyncItem: fn(
            self: *const ISyncMgrSyncItemContainer,
            pszItemID: [*:0]const u16,
            ppItem: **ISyncMgrSyncItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncItemEnumerator: fn(
            self: *const ISyncMgrSyncItemContainer,
            ppenum: **IEnumSyncMgrSyncItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncItemCount: fn(
            self: *const ISyncMgrSyncItemContainer,
            pcItems: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncItemContainer_GetSyncItem(self: *const T, pszItemID: [*:0]const u16, ppItem: **ISyncMgrSyncItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncItemContainer.VTable, self.vtable).GetSyncItem(@ptrCast(*const ISyncMgrSyncItemContainer, self), pszItemID, ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncItemContainer_GetSyncItemEnumerator(self: *const T, ppenum: **IEnumSyncMgrSyncItems) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncItemContainer.VTable, self.vtable).GetSyncItemEnumerator(@ptrCast(*const ISyncMgrSyncItemContainer, self), ppenum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncItemContainer_GetSyncItemCount(self: *const T, pcItems: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncItemContainer.VTable, self.vtable).GetSyncItemCount(@ptrCast(*const ISyncMgrSyncItemContainer, self), pcItems);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGR_ITEM_CAPABILITIES = extern enum(i32) {
    SYNCMGR_ICM_NONE = 0,
    SYNCMGR_ICM_PROVIDES_ICON = 1,
    SYNCMGR_ICM_EVENT_STORE = 2,
    SYNCMGR_ICM_CONFLICT_STORE = 4,
    SYNCMGR_ICM_CAN_DELETE = 16,
    SYNCMGR_ICM_CAN_BROWSE_CONTENT = 65536,
    SYNCMGR_ICM_QUERY_BEFORE_ENABLE = 1048576,
    SYNCMGR_ICM_QUERY_BEFORE_DISABLE = 2097152,
    SYNCMGR_ICM_QUERY_BEFORE_DELETE = 4194304,
    SYNCMGR_ICM_VALID_MASK = 7405591,
};
pub const SYNCMGR_ICM_NONE = SYNCMGR_ITEM_CAPABILITIES.SYNCMGR_ICM_NONE;
pub const SYNCMGR_ICM_PROVIDES_ICON = SYNCMGR_ITEM_CAPABILITIES.SYNCMGR_ICM_PROVIDES_ICON;
pub const SYNCMGR_ICM_EVENT_STORE = SYNCMGR_ITEM_CAPABILITIES.SYNCMGR_ICM_EVENT_STORE;
pub const SYNCMGR_ICM_CONFLICT_STORE = SYNCMGR_ITEM_CAPABILITIES.SYNCMGR_ICM_CONFLICT_STORE;
pub const SYNCMGR_ICM_CAN_DELETE = SYNCMGR_ITEM_CAPABILITIES.SYNCMGR_ICM_CAN_DELETE;
pub const SYNCMGR_ICM_CAN_BROWSE_CONTENT = SYNCMGR_ITEM_CAPABILITIES.SYNCMGR_ICM_CAN_BROWSE_CONTENT;
pub const SYNCMGR_ICM_QUERY_BEFORE_ENABLE = SYNCMGR_ITEM_CAPABILITIES.SYNCMGR_ICM_QUERY_BEFORE_ENABLE;
pub const SYNCMGR_ICM_QUERY_BEFORE_DISABLE = SYNCMGR_ITEM_CAPABILITIES.SYNCMGR_ICM_QUERY_BEFORE_DISABLE;
pub const SYNCMGR_ICM_QUERY_BEFORE_DELETE = SYNCMGR_ITEM_CAPABILITIES.SYNCMGR_ICM_QUERY_BEFORE_DELETE;
pub const SYNCMGR_ICM_VALID_MASK = SYNCMGR_ITEM_CAPABILITIES.SYNCMGR_ICM_VALID_MASK;

pub const SYNCMGR_ITEM_POLICIES = extern enum(i32) {
    SYNCMGR_IPM_NONE = 0,
    SYNCMGR_IPM_PREVENT_ENABLE = 1,
    SYNCMGR_IPM_PREVENT_DISABLE = 2,
    SYNCMGR_IPM_PREVENT_START_SYNC = 4,
    SYNCMGR_IPM_PREVENT_STOP_SYNC = 8,
    SYNCMGR_IPM_DISABLE_ENABLE = 16,
    SYNCMGR_IPM_DISABLE_DISABLE = 32,
    SYNCMGR_IPM_DISABLE_START_SYNC = 64,
    SYNCMGR_IPM_DISABLE_STOP_SYNC = 128,
    SYNCMGR_IPM_DISABLE_BROWSE = 256,
    SYNCMGR_IPM_DISABLE_DELETE = 512,
    SYNCMGR_IPM_HIDDEN_BY_DEFAULT = 65536,
    SYNCMGR_IPM_VALID_MASK = 66303,
};
pub const SYNCMGR_IPM_NONE = SYNCMGR_ITEM_POLICIES.SYNCMGR_IPM_NONE;
pub const SYNCMGR_IPM_PREVENT_ENABLE = SYNCMGR_ITEM_POLICIES.SYNCMGR_IPM_PREVENT_ENABLE;
pub const SYNCMGR_IPM_PREVENT_DISABLE = SYNCMGR_ITEM_POLICIES.SYNCMGR_IPM_PREVENT_DISABLE;
pub const SYNCMGR_IPM_PREVENT_START_SYNC = SYNCMGR_ITEM_POLICIES.SYNCMGR_IPM_PREVENT_START_SYNC;
pub const SYNCMGR_IPM_PREVENT_STOP_SYNC = SYNCMGR_ITEM_POLICIES.SYNCMGR_IPM_PREVENT_STOP_SYNC;
pub const SYNCMGR_IPM_DISABLE_ENABLE = SYNCMGR_ITEM_POLICIES.SYNCMGR_IPM_DISABLE_ENABLE;
pub const SYNCMGR_IPM_DISABLE_DISABLE = SYNCMGR_ITEM_POLICIES.SYNCMGR_IPM_DISABLE_DISABLE;
pub const SYNCMGR_IPM_DISABLE_START_SYNC = SYNCMGR_ITEM_POLICIES.SYNCMGR_IPM_DISABLE_START_SYNC;
pub const SYNCMGR_IPM_DISABLE_STOP_SYNC = SYNCMGR_ITEM_POLICIES.SYNCMGR_IPM_DISABLE_STOP_SYNC;
pub const SYNCMGR_IPM_DISABLE_BROWSE = SYNCMGR_ITEM_POLICIES.SYNCMGR_IPM_DISABLE_BROWSE;
pub const SYNCMGR_IPM_DISABLE_DELETE = SYNCMGR_ITEM_POLICIES.SYNCMGR_IPM_DISABLE_DELETE;
pub const SYNCMGR_IPM_HIDDEN_BY_DEFAULT = SYNCMGR_ITEM_POLICIES.SYNCMGR_IPM_HIDDEN_BY_DEFAULT;
pub const SYNCMGR_IPM_VALID_MASK = SYNCMGR_ITEM_POLICIES.SYNCMGR_IPM_VALID_MASK;

const IID_ISyncMgrSyncItem_Value = @import("../zig.zig").Guid.initString("B20B24CE-2593-4F04-BD8B-7AD6C45051CD");
pub const IID_ISyncMgrSyncItem = &IID_ISyncMgrSyncItem_Value;
pub const ISyncMgrSyncItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemID: fn(
            self: *const ISyncMgrSyncItem,
            ppszItemID: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: fn(
            self: *const ISyncMgrSyncItem,
            ppszName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemInfo: fn(
            self: *const ISyncMgrSyncItem,
            ppItemInfo: **ISyncMgrSyncItemInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObject: fn(
            self: *const ISyncMgrSyncItem,
            rguidObjectID: *const Guid,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCapabilities: fn(
            self: *const ISyncMgrSyncItem,
            pmCapabilities: *SYNCMGR_ITEM_CAPABILITIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicies: fn(
            self: *const ISyncMgrSyncItem,
            pmPolicies: *SYNCMGR_ITEM_POLICIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: fn(
            self: *const ISyncMgrSyncItem,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: fn(
            self: *const ISyncMgrSyncItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncItem_GetItemID(self: *const T, ppszItemID: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncItem.VTable, self.vtable).GetItemID(@ptrCast(*const ISyncMgrSyncItem, self), ppszItemID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncItem_GetName(self: *const T, ppszName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncItem.VTable, self.vtable).GetName(@ptrCast(*const ISyncMgrSyncItem, self), ppszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncItem_GetItemInfo(self: *const T, ppItemInfo: **ISyncMgrSyncItemInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncItem.VTable, self.vtable).GetItemInfo(@ptrCast(*const ISyncMgrSyncItem, self), ppItemInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncItem_GetObject(self: *const T, rguidObjectID: *const Guid, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncItem.VTable, self.vtable).GetObject(@ptrCast(*const ISyncMgrSyncItem, self), rguidObjectID, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncItem_GetCapabilities(self: *const T, pmCapabilities: *SYNCMGR_ITEM_CAPABILITIES) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncItem.VTable, self.vtable).GetCapabilities(@ptrCast(*const ISyncMgrSyncItem, self), pmCapabilities);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncItem_GetPolicies(self: *const T, pmPolicies: *SYNCMGR_ITEM_POLICIES) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncItem.VTable, self.vtable).GetPolicies(@ptrCast(*const ISyncMgrSyncItem, self), pmPolicies);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncItem_Enable(self: *const T, fEnable: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncItem.VTable, self.vtable).Enable(@ptrCast(*const ISyncMgrSyncItem, self), fEnable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncItem_Delete(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncItem.VTable, self.vtable).Delete(@ptrCast(*const ISyncMgrSyncItem, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncMgrSyncItemInfo_Value = @import("../zig.zig").Guid.initString("E7FD9502-BE0C-4464-90A1-2B5277031232");
pub const IID_ISyncMgrSyncItemInfo = &IID_ISyncMgrSyncItemInfo_Value;
pub const ISyncMgrSyncItemInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTypeLabel: fn(
            self: *const ISyncMgrSyncItemInfo,
            ppszTypeLabel: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComment: fn(
            self: *const ISyncMgrSyncItemInfo,
            ppszComment: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastSyncTime: fn(
            self: *const ISyncMgrSyncItemInfo,
            pftLastSync: *FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEnabled: fn(
            self: *const ISyncMgrSyncItemInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsConnected: fn(
            self: *const ISyncMgrSyncItemInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncItemInfo_GetTypeLabel(self: *const T, ppszTypeLabel: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncItemInfo.VTable, self.vtable).GetTypeLabel(@ptrCast(*const ISyncMgrSyncItemInfo, self), ppszTypeLabel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncItemInfo_GetComment(self: *const T, ppszComment: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncItemInfo.VTable, self.vtable).GetComment(@ptrCast(*const ISyncMgrSyncItemInfo, self), ppszComment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncItemInfo_GetLastSyncTime(self: *const T, pftLastSync: *FILETIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncItemInfo.VTable, self.vtable).GetLastSyncTime(@ptrCast(*const ISyncMgrSyncItemInfo, self), pftLastSync);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncItemInfo_IsEnabled(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncItemInfo.VTable, self.vtable).IsEnabled(@ptrCast(*const ISyncMgrSyncItemInfo, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncItemInfo_IsConnected(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncItemInfo.VTable, self.vtable).IsConnected(@ptrCast(*const ISyncMgrSyncItemInfo, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumSyncMgrSyncItems_Value = @import("../zig.zig").Guid.initString("54B3ABF3-F085-4181-B546-E29C403C726B");
pub const IID_IEnumSyncMgrSyncItems = &IID_IEnumSyncMgrSyncItems_Value;
pub const IEnumSyncMgrSyncItems = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumSyncMgrSyncItems,
            celt: u32,
            rgelt: [*]*ISyncMgrSyncItem,
            pceltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumSyncMgrSyncItems,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumSyncMgrSyncItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumSyncMgrSyncItems,
            ppenum: **IEnumSyncMgrSyncItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncMgrSyncItems_Next(self: *const T, celt: u32, rgelt: [*]*ISyncMgrSyncItem, pceltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncMgrSyncItems.VTable, self.vtable).Next(@ptrCast(*const IEnumSyncMgrSyncItems, self), celt, rgelt, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncMgrSyncItems_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncMgrSyncItems.VTable, self.vtable).Skip(@ptrCast(*const IEnumSyncMgrSyncItems, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncMgrSyncItems_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncMgrSyncItems.VTable, self.vtable).Reset(@ptrCast(*const IEnumSyncMgrSyncItems, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncMgrSyncItems_Clone(self: *const T, ppenum: **IEnumSyncMgrSyncItems) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncMgrSyncItems.VTable, self.vtable).Clone(@ptrCast(*const IEnumSyncMgrSyncItems, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGR_PROGRESS_STATUS = extern enum(i32) {
    SYNCMGR_PS_UPDATING = 1,
    SYNCMGR_PS_UPDATING_INDETERMINATE = 2,
    SYNCMGR_PS_SUCCEEDED = 3,
    SYNCMGR_PS_FAILED = 4,
    SYNCMGR_PS_CANCELED = 5,
    SYNCMGR_PS_DISCONNECTED = 6,
    SYNCMGR_PS_MAX = 6,
};
pub const SYNCMGR_PS_UPDATING = SYNCMGR_PROGRESS_STATUS.SYNCMGR_PS_UPDATING;
pub const SYNCMGR_PS_UPDATING_INDETERMINATE = SYNCMGR_PROGRESS_STATUS.SYNCMGR_PS_UPDATING_INDETERMINATE;
pub const SYNCMGR_PS_SUCCEEDED = SYNCMGR_PROGRESS_STATUS.SYNCMGR_PS_SUCCEEDED;
pub const SYNCMGR_PS_FAILED = SYNCMGR_PROGRESS_STATUS.SYNCMGR_PS_FAILED;
pub const SYNCMGR_PS_CANCELED = SYNCMGR_PROGRESS_STATUS.SYNCMGR_PS_CANCELED;
pub const SYNCMGR_PS_DISCONNECTED = SYNCMGR_PROGRESS_STATUS.SYNCMGR_PS_DISCONNECTED;
pub const SYNCMGR_PS_MAX = SYNCMGR_PROGRESS_STATUS.SYNCMGR_PS_MAX;

pub const SYNCMGR_CANCEL_REQUEST = extern enum(i32) {
    SYNCMGR_CR_NONE = 0,
    SYNCMGR_CR_CANCEL_ITEM = 1,
    SYNCMGR_CR_CANCEL_ALL = 2,
    SYNCMGR_CR_MAX = 2,
};
pub const SYNCMGR_CR_NONE = SYNCMGR_CANCEL_REQUEST.SYNCMGR_CR_NONE;
pub const SYNCMGR_CR_CANCEL_ITEM = SYNCMGR_CANCEL_REQUEST.SYNCMGR_CR_CANCEL_ITEM;
pub const SYNCMGR_CR_CANCEL_ALL = SYNCMGR_CANCEL_REQUEST.SYNCMGR_CR_CANCEL_ALL;
pub const SYNCMGR_CR_MAX = SYNCMGR_CANCEL_REQUEST.SYNCMGR_CR_MAX;

pub const SYNCMGR_EVENT_LEVEL = extern enum(i32) {
    SYNCMGR_EL_INFORMATION = 1,
    SYNCMGR_EL_WARNING = 2,
    SYNCMGR_EL_ERROR = 3,
    SYNCMGR_EL_MAX = 3,
};
pub const SYNCMGR_EL_INFORMATION = SYNCMGR_EVENT_LEVEL.SYNCMGR_EL_INFORMATION;
pub const SYNCMGR_EL_WARNING = SYNCMGR_EVENT_LEVEL.SYNCMGR_EL_WARNING;
pub const SYNCMGR_EL_ERROR = SYNCMGR_EVENT_LEVEL.SYNCMGR_EL_ERROR;
pub const SYNCMGR_EL_MAX = SYNCMGR_EVENT_LEVEL.SYNCMGR_EL_MAX;

pub const SYNCMGR_EVENT_FLAGS = extern enum(i32) {
    SYNCMGR_EF_NONE = 0,
    SYNCMGR_EF_VALID = 0,
};
pub const SYNCMGR_EF_NONE = SYNCMGR_EVENT_FLAGS.SYNCMGR_EF_NONE;
pub const SYNCMGR_EF_VALID = SYNCMGR_EVENT_FLAGS.SYNCMGR_EF_VALID;

const IID_ISyncMgrSessionCreator_Value = @import("../zig.zig").Guid.initString("17F48517-F305-4321-A08D-B25A834918FD");
pub const IID_ISyncMgrSessionCreator = &IID_ISyncMgrSessionCreator_Value;
pub const ISyncMgrSessionCreator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateSession: fn(
            self: *const ISyncMgrSessionCreator,
            pszHandlerID: [*:0]const u16,
            ppszItemIDs: [*]PWSTR,
            cItems: u32,
            ppCallback: **ISyncMgrSyncCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSessionCreator_CreateSession(self: *const T, pszHandlerID: [*:0]const u16, ppszItemIDs: [*]PWSTR, cItems: u32, ppCallback: **ISyncMgrSyncCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSessionCreator.VTable, self.vtable).CreateSession(@ptrCast(*const ISyncMgrSessionCreator, self), pszHandlerID, ppszItemIDs, cItems, ppCallback);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncMgrSyncCallback_Value = @import("../zig.zig").Guid.initString("884CCD87-B139-4937-A4BA-4F8E19513FBE");
pub const IID_ISyncMgrSyncCallback = &IID_ISyncMgrSyncCallback_Value;
pub const ISyncMgrSyncCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReportProgress: fn(
            self: *const ISyncMgrSyncCallback,
            pszItemID: [*:0]const u16,
            pszProgressText: [*:0]const u16,
            nStatus: SYNCMGR_PROGRESS_STATUS,
            uCurrentStep: u32,
            uMaxStep: u32,
            pnCancelRequest: *SYNCMGR_CANCEL_REQUEST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHandlerProgressText: fn(
            self: *const ISyncMgrSyncCallback,
            pszProgressText: [*:0]const u16,
            pnCancelRequest: *SYNCMGR_CANCEL_REQUEST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReportEventA: fn(
            self: *const ISyncMgrSyncCallback,
            pszItemID: [*:0]const u16,
            nLevel: SYNCMGR_EVENT_LEVEL,
            nFlags: SYNCMGR_EVENT_FLAGS,
            pszName: [*:0]const u16,
            pszDescription: [*:0]const u16,
            pszLinkText: [*:0]const u16,
            pszLinkReference: [*:0]const u16,
            pszContext: [*:0]const u16,
            pguidEventID: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanContinue: fn(
            self: *const ISyncMgrSyncCallback,
            pszItemID: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryForAdditionalItems: fn(
            self: *const ISyncMgrSyncCallback,
            ppenumItemIDs: **IEnumString,
            ppenumPunks: **IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddItemToSession: fn(
            self: *const ISyncMgrSyncCallback,
            pszItemID: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddIUnknownToSession: fn(
            self: *const ISyncMgrSyncCallback,
            punk: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProposeItem: fn(
            self: *const ISyncMgrSyncCallback,
            pNewItem: *ISyncMgrSyncItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitItem: fn(
            self: *const ISyncMgrSyncCallback,
            pszItemID: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReportManualSync: fn(
            self: *const ISyncMgrSyncCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncCallback_ReportProgress(self: *const T, pszItemID: [*:0]const u16, pszProgressText: [*:0]const u16, nStatus: SYNCMGR_PROGRESS_STATUS, uCurrentStep: u32, uMaxStep: u32, pnCancelRequest: *SYNCMGR_CANCEL_REQUEST) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncCallback.VTable, self.vtable).ReportProgress(@ptrCast(*const ISyncMgrSyncCallback, self), pszItemID, pszProgressText, nStatus, uCurrentStep, uMaxStep, pnCancelRequest);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncCallback_SetHandlerProgressText(self: *const T, pszProgressText: [*:0]const u16, pnCancelRequest: *SYNCMGR_CANCEL_REQUEST) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncCallback.VTable, self.vtable).SetHandlerProgressText(@ptrCast(*const ISyncMgrSyncCallback, self), pszProgressText, pnCancelRequest);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncCallback_ReportEventA(self: *const T, pszItemID: [*:0]const u16, nLevel: SYNCMGR_EVENT_LEVEL, nFlags: SYNCMGR_EVENT_FLAGS, pszName: [*:0]const u16, pszDescription: [*:0]const u16, pszLinkText: [*:0]const u16, pszLinkReference: [*:0]const u16, pszContext: [*:0]const u16, pguidEventID: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncCallback.VTable, self.vtable).ReportEventA(@ptrCast(*const ISyncMgrSyncCallback, self), pszItemID, nLevel, nFlags, pszName, pszDescription, pszLinkText, pszLinkReference, pszContext, pguidEventID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncCallback_CanContinue(self: *const T, pszItemID: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncCallback.VTable, self.vtable).CanContinue(@ptrCast(*const ISyncMgrSyncCallback, self), pszItemID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncCallback_QueryForAdditionalItems(self: *const T, ppenumItemIDs: **IEnumString, ppenumPunks: **IEnumUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncCallback.VTable, self.vtable).QueryForAdditionalItems(@ptrCast(*const ISyncMgrSyncCallback, self), ppenumItemIDs, ppenumPunks);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncCallback_AddItemToSession(self: *const T, pszItemID: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncCallback.VTable, self.vtable).AddItemToSession(@ptrCast(*const ISyncMgrSyncCallback, self), pszItemID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncCallback_AddIUnknownToSession(self: *const T, punk: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncCallback.VTable, self.vtable).AddIUnknownToSession(@ptrCast(*const ISyncMgrSyncCallback, self), punk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncCallback_ProposeItem(self: *const T, pNewItem: *ISyncMgrSyncItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncCallback.VTable, self.vtable).ProposeItem(@ptrCast(*const ISyncMgrSyncCallback, self), pNewItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncCallback_CommitItem(self: *const T, pszItemID: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncCallback.VTable, self.vtable).CommitItem(@ptrCast(*const ISyncMgrSyncCallback, self), pszItemID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncCallback_ReportManualSync(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncCallback.VTable, self.vtable).ReportManualSync(@ptrCast(*const ISyncMgrSyncCallback, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncMgrUIOperation_Value = @import("../zig.zig").Guid.initString("FC7CFA47-DFE1-45B5-A049-8CFD82BEC271");
pub const IID_ISyncMgrUIOperation = &IID_ISyncMgrUIOperation_Value;
pub const ISyncMgrUIOperation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Run: fn(
            self: *const ISyncMgrUIOperation,
            hwndOwner: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrUIOperation_Run(self: *const T, hwndOwner: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrUIOperation.VTable, self.vtable).Run(@ptrCast(*const ISyncMgrUIOperation, self), hwndOwner);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncMgrEventLinkUIOperation_Value = @import("../zig.zig").Guid.initString("64522E52-848B-4015-89CE-5A36F00B94FF");
pub const IID_ISyncMgrEventLinkUIOperation = &IID_ISyncMgrEventLinkUIOperation_Value;
pub const ISyncMgrEventLinkUIOperation = extern struct {
    pub const VTable = extern struct {
        base: ISyncMgrUIOperation.VTable,
        Init: fn(
            self: *const ISyncMgrEventLinkUIOperation,
            rguidEventID: *const Guid,
            pEvent: *ISyncMgrEvent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISyncMgrUIOperation.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEventLinkUIOperation_Init(self: *const T, rguidEventID: *const Guid, pEvent: *ISyncMgrEvent) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEventLinkUIOperation.VTable, self.vtable).Init(@ptrCast(*const ISyncMgrEventLinkUIOperation, self), rguidEventID, pEvent);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncMgrScheduleWizardUIOperation_Value = @import("../zig.zig").Guid.initString("459A6C84-21D2-4DDC-8A53-F023A46066F2");
pub const IID_ISyncMgrScheduleWizardUIOperation = &IID_ISyncMgrScheduleWizardUIOperation_Value;
pub const ISyncMgrScheduleWizardUIOperation = extern struct {
    pub const VTable = extern struct {
        base: ISyncMgrUIOperation.VTable,
        InitWizard: fn(
            self: *const ISyncMgrScheduleWizardUIOperation,
            pszHandlerID: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISyncMgrUIOperation.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrScheduleWizardUIOperation_InitWizard(self: *const T, pszHandlerID: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrScheduleWizardUIOperation.VTable, self.vtable).InitWizard(@ptrCast(*const ISyncMgrScheduleWizardUIOperation, self), pszHandlerID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncMgrSyncResult_Value = @import("../zig.zig").Guid.initString("2B90F17E-5A3E-4B33-BB7F-1BC48056B94D");
pub const IID_ISyncMgrSyncResult = &IID_ISyncMgrSyncResult_Value;
pub const ISyncMgrSyncResult = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Result: fn(
            self: *const ISyncMgrSyncResult,
            nStatus: SYNCMGR_PROGRESS_STATUS,
            cError: u32,
            cConflicts: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSyncResult_Result(self: *const T, nStatus: SYNCMGR_PROGRESS_STATUS, cError: u32, cConflicts: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSyncResult.VTable, self.vtable).Result(@ptrCast(*const ISyncMgrSyncResult, self), nStatus, cError, cConflicts);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGR_CONTROL_FLAGS = extern enum(i32) {
    SYNCMGR_CF_NONE = 0,
    SYNCMGR_CF_NOWAIT = 0,
    SYNCMGR_CF_WAIT = 1,
    SYNCMGR_CF_NOUI = 2,
    SYNCMGR_CF_VALID = 3,
};
pub const SYNCMGR_CF_NONE = SYNCMGR_CONTROL_FLAGS.SYNCMGR_CF_NONE;
pub const SYNCMGR_CF_NOWAIT = SYNCMGR_CONTROL_FLAGS.SYNCMGR_CF_NOWAIT;
pub const SYNCMGR_CF_WAIT = SYNCMGR_CONTROL_FLAGS.SYNCMGR_CF_WAIT;
pub const SYNCMGR_CF_NOUI = SYNCMGR_CONTROL_FLAGS.SYNCMGR_CF_NOUI;
pub const SYNCMGR_CF_VALID = SYNCMGR_CONTROL_FLAGS.SYNCMGR_CF_VALID;

pub const SYNCMGR_SYNC_CONTROL_FLAGS = extern enum(i32) {
    SYNCMGR_SCF_NONE = 0,
    SYNCMGR_SCF_IGNORE_IF_ALREADY_SYNCING = 1,
    SYNCMGR_SCF_VALID = 1,
};
pub const SYNCMGR_SCF_NONE = SYNCMGR_SYNC_CONTROL_FLAGS.SYNCMGR_SCF_NONE;
pub const SYNCMGR_SCF_IGNORE_IF_ALREADY_SYNCING = SYNCMGR_SYNC_CONTROL_FLAGS.SYNCMGR_SCF_IGNORE_IF_ALREADY_SYNCING;
pub const SYNCMGR_SCF_VALID = SYNCMGR_SYNC_CONTROL_FLAGS.SYNCMGR_SCF_VALID;

pub const SYNCMGR_UPDATE_REASON = extern enum(i32) {
    SYNCMGR_UR_ADDED = 0,
    SYNCMGR_UR_CHANGED = 1,
    SYNCMGR_UR_REMOVED = 2,
    SYNCMGR_UR_MAX = 2,
};
pub const SYNCMGR_UR_ADDED = SYNCMGR_UPDATE_REASON.SYNCMGR_UR_ADDED;
pub const SYNCMGR_UR_CHANGED = SYNCMGR_UPDATE_REASON.SYNCMGR_UR_CHANGED;
pub const SYNCMGR_UR_REMOVED = SYNCMGR_UPDATE_REASON.SYNCMGR_UR_REMOVED;
pub const SYNCMGR_UR_MAX = SYNCMGR_UPDATE_REASON.SYNCMGR_UR_MAX;

const IID_ISyncMgrControl_Value = @import("../zig.zig").Guid.initString("9B63616C-36B2-46BC-959F-C1593952D19B");
pub const IID_ISyncMgrControl = &IID_ISyncMgrControl_Value;
pub const ISyncMgrControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartHandlerSync: fn(
            self: *const ISyncMgrControl,
            pszHandlerID: [*:0]const u16,
            hwndOwner: HWND,
            punk: *IUnknown,
            nSyncControlFlags: SYNCMGR_SYNC_CONTROL_FLAGS,
            pResult: *ISyncMgrSyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartItemSync: fn(
            self: *const ISyncMgrControl,
            pszHandlerID: [*:0]const u16,
            ppszItemIDs: [*]PWSTR,
            cItems: u32,
            hwndOwner: HWND,
            punk: *IUnknown,
            nSyncControlFlags: SYNCMGR_SYNC_CONTROL_FLAGS,
            pResult: *ISyncMgrSyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartSyncAll: fn(
            self: *const ISyncMgrControl,
            hwndOwner: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopHandlerSync: fn(
            self: *const ISyncMgrControl,
            pszHandlerID: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopItemSync: fn(
            self: *const ISyncMgrControl,
            pszHandlerID: [*:0]const u16,
            ppszItemIDs: [*]PWSTR,
            cItems: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopSyncAll: fn(
            self: *const ISyncMgrControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateHandlerCollection: fn(
            self: *const ISyncMgrControl,
            rclsidCollectionID: *const Guid,
            nControlFlags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateHandler: fn(
            self: *const ISyncMgrControl,
            pszHandlerID: [*:0]const u16,
            nControlFlags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateItem: fn(
            self: *const ISyncMgrControl,
            pszHandlerID: [*:0]const u16,
            pszItemID: [*:0]const u16,
            nControlFlags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateEvents: fn(
            self: *const ISyncMgrControl,
            pszHandlerID: [*:0]const u16,
            pszItemID: [*:0]const u16,
            nControlFlags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateConflict: fn(
            self: *const ISyncMgrControl,
            pszHandlerID: [*:0]const u16,
            pszItemID: [*:0]const u16,
            pConflict: *ISyncMgrConflict,
            nReason: SYNCMGR_UPDATE_REASON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateConflicts: fn(
            self: *const ISyncMgrControl,
            pszHandlerID: [*:0]const u16,
            pszItemID: [*:0]const u16,
            nControlFlags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivateHandler: fn(
            self: *const ISyncMgrControl,
            fActivate: BOOL,
            pszHandlerID: [*:0]const u16,
            hwndOwner: HWND,
            nControlFlags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableHandler: fn(
            self: *const ISyncMgrControl,
            fEnable: BOOL,
            pszHandlerID: [*:0]const u16,
            hwndOwner: HWND,
            nControlFlags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableItem: fn(
            self: *const ISyncMgrControl,
            fEnable: BOOL,
            pszHandlerID: [*:0]const u16,
            pszItemID: [*:0]const u16,
            hwndOwner: HWND,
            nControlFlags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrControl_StartHandlerSync(self: *const T, pszHandlerID: [*:0]const u16, hwndOwner: HWND, punk: *IUnknown, nSyncControlFlags: SYNCMGR_SYNC_CONTROL_FLAGS, pResult: *ISyncMgrSyncResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrControl.VTable, self.vtable).StartHandlerSync(@ptrCast(*const ISyncMgrControl, self), pszHandlerID, hwndOwner, punk, nSyncControlFlags, pResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrControl_StartItemSync(self: *const T, pszHandlerID: [*:0]const u16, ppszItemIDs: [*]PWSTR, cItems: u32, hwndOwner: HWND, punk: *IUnknown, nSyncControlFlags: SYNCMGR_SYNC_CONTROL_FLAGS, pResult: *ISyncMgrSyncResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrControl.VTable, self.vtable).StartItemSync(@ptrCast(*const ISyncMgrControl, self), pszHandlerID, ppszItemIDs, cItems, hwndOwner, punk, nSyncControlFlags, pResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrControl_StartSyncAll(self: *const T, hwndOwner: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrControl.VTable, self.vtable).StartSyncAll(@ptrCast(*const ISyncMgrControl, self), hwndOwner);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrControl_StopHandlerSync(self: *const T, pszHandlerID: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrControl.VTable, self.vtable).StopHandlerSync(@ptrCast(*const ISyncMgrControl, self), pszHandlerID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrControl_StopItemSync(self: *const T, pszHandlerID: [*:0]const u16, ppszItemIDs: [*]PWSTR, cItems: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrControl.VTable, self.vtable).StopItemSync(@ptrCast(*const ISyncMgrControl, self), pszHandlerID, ppszItemIDs, cItems);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrControl_StopSyncAll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrControl.VTable, self.vtable).StopSyncAll(@ptrCast(*const ISyncMgrControl, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrControl_UpdateHandlerCollection(self: *const T, rclsidCollectionID: *const Guid, nControlFlags: SYNCMGR_CONTROL_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrControl.VTable, self.vtable).UpdateHandlerCollection(@ptrCast(*const ISyncMgrControl, self), rclsidCollectionID, nControlFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrControl_UpdateHandler(self: *const T, pszHandlerID: [*:0]const u16, nControlFlags: SYNCMGR_CONTROL_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrControl.VTable, self.vtable).UpdateHandler(@ptrCast(*const ISyncMgrControl, self), pszHandlerID, nControlFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrControl_UpdateItem(self: *const T, pszHandlerID: [*:0]const u16, pszItemID: [*:0]const u16, nControlFlags: SYNCMGR_CONTROL_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrControl.VTable, self.vtable).UpdateItem(@ptrCast(*const ISyncMgrControl, self), pszHandlerID, pszItemID, nControlFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrControl_UpdateEvents(self: *const T, pszHandlerID: [*:0]const u16, pszItemID: [*:0]const u16, nControlFlags: SYNCMGR_CONTROL_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrControl.VTable, self.vtable).UpdateEvents(@ptrCast(*const ISyncMgrControl, self), pszHandlerID, pszItemID, nControlFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrControl_UpdateConflict(self: *const T, pszHandlerID: [*:0]const u16, pszItemID: [*:0]const u16, pConflict: *ISyncMgrConflict, nReason: SYNCMGR_UPDATE_REASON) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrControl.VTable, self.vtable).UpdateConflict(@ptrCast(*const ISyncMgrControl, self), pszHandlerID, pszItemID, pConflict, nReason);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrControl_UpdateConflicts(self: *const T, pszHandlerID: [*:0]const u16, pszItemID: [*:0]const u16, nControlFlags: SYNCMGR_CONTROL_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrControl.VTable, self.vtable).UpdateConflicts(@ptrCast(*const ISyncMgrControl, self), pszHandlerID, pszItemID, nControlFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrControl_ActivateHandler(self: *const T, fActivate: BOOL, pszHandlerID: [*:0]const u16, hwndOwner: HWND, nControlFlags: SYNCMGR_CONTROL_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrControl.VTable, self.vtable).ActivateHandler(@ptrCast(*const ISyncMgrControl, self), fActivate, pszHandlerID, hwndOwner, nControlFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrControl_EnableHandler(self: *const T, fEnable: BOOL, pszHandlerID: [*:0]const u16, hwndOwner: HWND, nControlFlags: SYNCMGR_CONTROL_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrControl.VTable, self.vtable).EnableHandler(@ptrCast(*const ISyncMgrControl, self), fEnable, pszHandlerID, hwndOwner, nControlFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrControl_EnableItem(self: *const T, fEnable: BOOL, pszHandlerID: [*:0]const u16, pszItemID: [*:0]const u16, hwndOwner: HWND, nControlFlags: SYNCMGR_CONTROL_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrControl.VTable, self.vtable).EnableItem(@ptrCast(*const ISyncMgrControl, self), fEnable, pszHandlerID, pszItemID, hwndOwner, nControlFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncMgrEventStore_Value = @import("../zig.zig").Guid.initString("37E412F9-016E-44C2-81FF-DB3ADD774266");
pub const IID_ISyncMgrEventStore = &IID_ISyncMgrEventStore_Value;
pub const ISyncMgrEventStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetEventEnumerator: fn(
            self: *const ISyncMgrEventStore,
            ppenum: **IEnumSyncMgrEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventCount: fn(
            self: *const ISyncMgrEventStore,
            pcEvents: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEvent: fn(
            self: *const ISyncMgrEventStore,
            rguidEventID: *const Guid,
            ppEvent: **ISyncMgrEvent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveEvent: fn(
            self: *const ISyncMgrEventStore,
            pguidEventIDs: [*]Guid,
            cEvents: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEventStore_GetEventEnumerator(self: *const T, ppenum: **IEnumSyncMgrEvents) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEventStore.VTable, self.vtable).GetEventEnumerator(@ptrCast(*const ISyncMgrEventStore, self), ppenum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEventStore_GetEventCount(self: *const T, pcEvents: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEventStore.VTable, self.vtable).GetEventCount(@ptrCast(*const ISyncMgrEventStore, self), pcEvents);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEventStore_GetEvent(self: *const T, rguidEventID: *const Guid, ppEvent: **ISyncMgrEvent) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEventStore.VTable, self.vtable).GetEvent(@ptrCast(*const ISyncMgrEventStore, self), rguidEventID, ppEvent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEventStore_RemoveEvent(self: *const T, pguidEventIDs: [*]Guid, cEvents: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEventStore.VTable, self.vtable).RemoveEvent(@ptrCast(*const ISyncMgrEventStore, self), pguidEventIDs, cEvents);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncMgrEvent_Value = @import("../zig.zig").Guid.initString("FEE0EF8B-46BD-4DB4-B7E6-FF2C687313BC");
pub const IID_ISyncMgrEvent = &IID_ISyncMgrEvent_Value;
pub const ISyncMgrEvent = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetEventID: fn(
            self: *const ISyncMgrEvent,
            pguidEventID: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHandlerID: fn(
            self: *const ISyncMgrEvent,
            ppszHandlerID: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemID: fn(
            self: *const ISyncMgrEvent,
            ppszItemID: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLevel: fn(
            self: *const ISyncMgrEvent,
            pnLevel: *SYNCMGR_EVENT_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: fn(
            self: *const ISyncMgrEvent,
            pnFlags: *SYNCMGR_EVENT_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTime: fn(
            self: *const ISyncMgrEvent,
            pfCreationTime: *FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: fn(
            self: *const ISyncMgrEvent,
            ppszName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: fn(
            self: *const ISyncMgrEvent,
            ppszDescription: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLinkText: fn(
            self: *const ISyncMgrEvent,
            ppszLinkText: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLinkReference: fn(
            self: *const ISyncMgrEvent,
            ppszLinkReference: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContext: fn(
            self: *const ISyncMgrEvent,
            ppszContext: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEvent_GetEventID(self: *const T, pguidEventID: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEvent.VTable, self.vtable).GetEventID(@ptrCast(*const ISyncMgrEvent, self), pguidEventID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEvent_GetHandlerID(self: *const T, ppszHandlerID: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEvent.VTable, self.vtable).GetHandlerID(@ptrCast(*const ISyncMgrEvent, self), ppszHandlerID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEvent_GetItemID(self: *const T, ppszItemID: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEvent.VTable, self.vtable).GetItemID(@ptrCast(*const ISyncMgrEvent, self), ppszItemID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEvent_GetLevel(self: *const T, pnLevel: *SYNCMGR_EVENT_LEVEL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEvent.VTable, self.vtable).GetLevel(@ptrCast(*const ISyncMgrEvent, self), pnLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEvent_GetFlags(self: *const T, pnFlags: *SYNCMGR_EVENT_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEvent.VTable, self.vtable).GetFlags(@ptrCast(*const ISyncMgrEvent, self), pnFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEvent_GetTime(self: *const T, pfCreationTime: *FILETIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEvent.VTable, self.vtable).GetTime(@ptrCast(*const ISyncMgrEvent, self), pfCreationTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEvent_GetName(self: *const T, ppszName: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEvent.VTable, self.vtable).GetName(@ptrCast(*const ISyncMgrEvent, self), ppszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEvent_GetDescription(self: *const T, ppszDescription: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEvent.VTable, self.vtable).GetDescription(@ptrCast(*const ISyncMgrEvent, self), ppszDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEvent_GetLinkText(self: *const T, ppszLinkText: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEvent.VTable, self.vtable).GetLinkText(@ptrCast(*const ISyncMgrEvent, self), ppszLinkText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEvent_GetLinkReference(self: *const T, ppszLinkReference: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEvent.VTable, self.vtable).GetLinkReference(@ptrCast(*const ISyncMgrEvent, self), ppszLinkReference);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEvent_GetContext(self: *const T, ppszContext: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEvent.VTable, self.vtable).GetContext(@ptrCast(*const ISyncMgrEvent, self), ppszContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumSyncMgrEvents_Value = @import("../zig.zig").Guid.initString("C81A1D4E-8CF7-4683-80E0-BCAE88D677B6");
pub const IID_IEnumSyncMgrEvents = &IID_IEnumSyncMgrEvents_Value;
pub const IEnumSyncMgrEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumSyncMgrEvents,
            celt: u32,
            rgelt: [*]*ISyncMgrEvent,
            pceltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumSyncMgrEvents,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumSyncMgrEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumSyncMgrEvents,
            ppenum: **IEnumSyncMgrEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncMgrEvents_Next(self: *const T, celt: u32, rgelt: [*]*ISyncMgrEvent, pceltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncMgrEvents.VTable, self.vtable).Next(@ptrCast(*const IEnumSyncMgrEvents, self), celt, rgelt, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncMgrEvents_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncMgrEvents.VTable, self.vtable).Skip(@ptrCast(*const IEnumSyncMgrEvents, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncMgrEvents_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncMgrEvents.VTable, self.vtable).Reset(@ptrCast(*const IEnumSyncMgrEvents, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncMgrEvents_Clone(self: *const T, ppenum: **IEnumSyncMgrEvents) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncMgrEvents.VTable, self.vtable).Clone(@ptrCast(*const IEnumSyncMgrEvents, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGR_CONFLICT_ID_INFO = extern struct {
    pblobID: *BYTE_BLOB,
    pblobExtra: *BYTE_BLOB,
};

const IID_ISyncMgrConflictStore_Value = @import("../zig.zig").Guid.initString("CF8FC579-C396-4774-85F1-D908A831156E");
pub const IID_ISyncMgrConflictStore = &IID_ISyncMgrConflictStore_Value;
pub const ISyncMgrConflictStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumConflicts: fn(
            self: *const ISyncMgrConflictStore,
            pszHandlerID: [*:0]const u16,
            pszItemID: [*:0]const u16,
            ppEnum: **IEnumSyncMgrConflict,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindToConflict: fn(
            self: *const ISyncMgrConflictStore,
            pConflictIdInfo: *const SYNCMGR_CONFLICT_ID_INFO,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveConflicts: fn(
            self: *const ISyncMgrConflictStore,
            rgConflictIdInfo: [*]const SYNCMGR_CONFLICT_ID_INFO,
            cConflicts: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: fn(
            self: *const ISyncMgrConflictStore,
            pszHandlerID: [*:0]const u16,
            pszItemID: [*:0]const u16,
            pnConflicts: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflictStore_EnumConflicts(self: *const T, pszHandlerID: [*:0]const u16, pszItemID: [*:0]const u16, ppEnum: **IEnumSyncMgrConflict) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflictStore.VTable, self.vtable).EnumConflicts(@ptrCast(*const ISyncMgrConflictStore, self), pszHandlerID, pszItemID, ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflictStore_BindToConflict(self: *const T, pConflictIdInfo: *const SYNCMGR_CONFLICT_ID_INFO, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflictStore.VTable, self.vtable).BindToConflict(@ptrCast(*const ISyncMgrConflictStore, self), pConflictIdInfo, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflictStore_RemoveConflicts(self: *const T, rgConflictIdInfo: [*]const SYNCMGR_CONFLICT_ID_INFO, cConflicts: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflictStore.VTable, self.vtable).RemoveConflicts(@ptrCast(*const ISyncMgrConflictStore, self), rgConflictIdInfo, cConflicts);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflictStore_GetCount(self: *const T, pszHandlerID: [*:0]const u16, pszItemID: [*:0]const u16, pnConflicts: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflictStore.VTable, self.vtable).GetCount(@ptrCast(*const ISyncMgrConflictStore, self), pszHandlerID, pszItemID, pnConflicts);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumSyncMgrConflict_Value = @import("../zig.zig").Guid.initString("82705914-DDA3-4893-BA99-49DE6C8C8036");
pub const IID_IEnumSyncMgrConflict = &IID_IEnumSyncMgrConflict_Value;
pub const IEnumSyncMgrConflict = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumSyncMgrConflict,
            celt: u32,
            rgelt: [*]*ISyncMgrConflict,
            pceltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumSyncMgrConflict,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumSyncMgrConflict,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumSyncMgrConflict,
            ppenum: **IEnumSyncMgrConflict,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncMgrConflict_Next(self: *const T, celt: u32, rgelt: [*]*ISyncMgrConflict, pceltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncMgrConflict.VTable, self.vtable).Next(@ptrCast(*const IEnumSyncMgrConflict, self), celt, rgelt, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncMgrConflict_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncMgrConflict.VTable, self.vtable).Skip(@ptrCast(*const IEnumSyncMgrConflict, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncMgrConflict_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncMgrConflict.VTable, self.vtable).Reset(@ptrCast(*const IEnumSyncMgrConflict, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncMgrConflict_Clone(self: *const T, ppenum: **IEnumSyncMgrConflict) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncMgrConflict.VTable, self.vtable).Clone(@ptrCast(*const IEnumSyncMgrConflict, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGR_CONFLICT_ITEM_TYPE = extern enum(i32) {
    SYNCMGR_CIT_UPDATED = 1,
    SYNCMGR_CIT_DELETED = 2,
};
pub const SYNCMGR_CIT_UPDATED = SYNCMGR_CONFLICT_ITEM_TYPE.SYNCMGR_CIT_UPDATED;
pub const SYNCMGR_CIT_DELETED = SYNCMGR_CONFLICT_ITEM_TYPE.SYNCMGR_CIT_DELETED;

const IID_ISyncMgrConflict_Value = @import("../zig.zig").Guid.initString("9C204249-C443-4BA4-85ED-C972681DB137");
pub const IID_ISyncMgrConflict = &IID_ISyncMgrConflict_Value;
pub const ISyncMgrConflict = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetProperty: fn(
            self: *const ISyncMgrConflict,
            propkey: *const PROPERTYKEY,
            ppropvar: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConflictIdInfo: fn(
            self: *const ISyncMgrConflict,
            pConflictIdInfo: *SYNCMGR_CONFLICT_ID_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemsArray: fn(
            self: *const ISyncMgrConflict,
            ppArray: **ISyncMgrConflictItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resolve: fn(
            self: *const ISyncMgrConflict,
            pResolveInfo: *ISyncMgrConflictResolveInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResolutionHandler: fn(
            self: *const ISyncMgrConflict,
            riid: *const Guid,
            ppvResolutionHandler: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflict_GetProperty(self: *const T, propkey: *const PROPERTYKEY, ppropvar: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflict.VTable, self.vtable).GetProperty(@ptrCast(*const ISyncMgrConflict, self), propkey, ppropvar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflict_GetConflictIdInfo(self: *const T, pConflictIdInfo: *SYNCMGR_CONFLICT_ID_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflict.VTable, self.vtable).GetConflictIdInfo(@ptrCast(*const ISyncMgrConflict, self), pConflictIdInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflict_GetItemsArray(self: *const T, ppArray: **ISyncMgrConflictItems) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflict.VTable, self.vtable).GetItemsArray(@ptrCast(*const ISyncMgrConflict, self), ppArray);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflict_Resolve(self: *const T, pResolveInfo: *ISyncMgrConflictResolveInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflict.VTable, self.vtable).Resolve(@ptrCast(*const ISyncMgrConflict, self), pResolveInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflict_GetResolutionHandler(self: *const T, riid: *const Guid, ppvResolutionHandler: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflict.VTable, self.vtable).GetResolutionHandler(@ptrCast(*const ISyncMgrConflict, self), riid, ppvResolutionHandler);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGR_RESOLUTION_ABILITIES = extern enum(i32) {
    SYNCMGR_RA_KEEPOTHER = 1,
    SYNCMGR_RA_KEEPRECENT = 2,
    SYNCMGR_RA_REMOVEFROMSYNCSET = 4,
    SYNCMGR_RA_KEEP_SINGLE = 8,
    SYNCMGR_RA_KEEP_MULTIPLE = 16,
    SYNCMGR_RA_VALID = 31,
};
pub const SYNCMGR_RA_KEEPOTHER = SYNCMGR_RESOLUTION_ABILITIES.SYNCMGR_RA_KEEPOTHER;
pub const SYNCMGR_RA_KEEPRECENT = SYNCMGR_RESOLUTION_ABILITIES.SYNCMGR_RA_KEEPRECENT;
pub const SYNCMGR_RA_REMOVEFROMSYNCSET = SYNCMGR_RESOLUTION_ABILITIES.SYNCMGR_RA_REMOVEFROMSYNCSET;
pub const SYNCMGR_RA_KEEP_SINGLE = SYNCMGR_RESOLUTION_ABILITIES.SYNCMGR_RA_KEEP_SINGLE;
pub const SYNCMGR_RA_KEEP_MULTIPLE = SYNCMGR_RESOLUTION_ABILITIES.SYNCMGR_RA_KEEP_MULTIPLE;
pub const SYNCMGR_RA_VALID = SYNCMGR_RESOLUTION_ABILITIES.SYNCMGR_RA_VALID;

pub const SYNCMGR_RESOLUTION_FEEDBACK = extern enum(i32) {
    SYNCMGR_RF_CONTINUE = 0,
    SYNCMGR_RF_REFRESH = 1,
    SYNCMGR_RF_CANCEL = 2,
};
pub const SYNCMGR_RF_CONTINUE = SYNCMGR_RESOLUTION_FEEDBACK.SYNCMGR_RF_CONTINUE;
pub const SYNCMGR_RF_REFRESH = SYNCMGR_RESOLUTION_FEEDBACK.SYNCMGR_RF_REFRESH;
pub const SYNCMGR_RF_CANCEL = SYNCMGR_RESOLUTION_FEEDBACK.SYNCMGR_RF_CANCEL;

const IID_ISyncMgrResolutionHandler_Value = @import("../zig.zig").Guid.initString("40A3D052-8BFF-4C4B-A338-D4A395700DE9");
pub const IID_ISyncMgrResolutionHandler = &IID_ISyncMgrResolutionHandler_Value;
pub const ISyncMgrResolutionHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryAbilities: fn(
            self: *const ISyncMgrResolutionHandler,
            pdwAbilities: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        KeepOther: fn(
            self: *const ISyncMgrResolutionHandler,
            psiOther: *IShellItem,
            pFeedback: *SYNCMGR_RESOLUTION_FEEDBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        KeepRecent: fn(
            self: *const ISyncMgrResolutionHandler,
            pFeedback: *SYNCMGR_RESOLUTION_FEEDBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveFromSyncSet: fn(
            self: *const ISyncMgrResolutionHandler,
            pFeedback: *SYNCMGR_RESOLUTION_FEEDBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        KeepItems: fn(
            self: *const ISyncMgrResolutionHandler,
            pArray: *ISyncMgrConflictResolutionItems,
            pFeedback: *SYNCMGR_RESOLUTION_FEEDBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrResolutionHandler_QueryAbilities(self: *const T, pdwAbilities: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrResolutionHandler.VTable, self.vtable).QueryAbilities(@ptrCast(*const ISyncMgrResolutionHandler, self), pdwAbilities);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrResolutionHandler_KeepOther(self: *const T, psiOther: *IShellItem, pFeedback: *SYNCMGR_RESOLUTION_FEEDBACK) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrResolutionHandler.VTable, self.vtable).KeepOther(@ptrCast(*const ISyncMgrResolutionHandler, self), psiOther, pFeedback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrResolutionHandler_KeepRecent(self: *const T, pFeedback: *SYNCMGR_RESOLUTION_FEEDBACK) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrResolutionHandler.VTable, self.vtable).KeepRecent(@ptrCast(*const ISyncMgrResolutionHandler, self), pFeedback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrResolutionHandler_RemoveFromSyncSet(self: *const T, pFeedback: *SYNCMGR_RESOLUTION_FEEDBACK) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrResolutionHandler.VTable, self.vtable).RemoveFromSyncSet(@ptrCast(*const ISyncMgrResolutionHandler, self), pFeedback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrResolutionHandler_KeepItems(self: *const T, pArray: *ISyncMgrConflictResolutionItems, pFeedback: *SYNCMGR_RESOLUTION_FEEDBACK) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrResolutionHandler.VTable, self.vtable).KeepItems(@ptrCast(*const ISyncMgrResolutionHandler, self), pArray, pFeedback);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncMgrConflictPresenter_Value = @import("../zig.zig").Guid.initString("0B4F5353-FD2B-42CD-8763-4779F2D508A3");
pub const IID_ISyncMgrConflictPresenter = &IID_ISyncMgrConflictPresenter_Value;
pub const ISyncMgrConflictPresenter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PresentConflict: fn(
            self: *const ISyncMgrConflictPresenter,
            pConflict: *ISyncMgrConflict,
            pResolveInfo: *ISyncMgrConflictResolveInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflictPresenter_PresentConflict(self: *const T, pConflict: *ISyncMgrConflict, pResolveInfo: *ISyncMgrConflictResolveInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflictPresenter.VTable, self.vtable).PresentConflict(@ptrCast(*const ISyncMgrConflictPresenter, self), pConflict, pResolveInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGR_PRESENTER_NEXT_STEP = extern enum(i32) {
    SYNCMGR_PNS_CONTINUE = 0,
    SYNCMGR_PNS_DEFAULT = 1,
    SYNCMGR_PNS_CANCEL = 2,
};
pub const SYNCMGR_PNS_CONTINUE = SYNCMGR_PRESENTER_NEXT_STEP.SYNCMGR_PNS_CONTINUE;
pub const SYNCMGR_PNS_DEFAULT = SYNCMGR_PRESENTER_NEXT_STEP.SYNCMGR_PNS_DEFAULT;
pub const SYNCMGR_PNS_CANCEL = SYNCMGR_PRESENTER_NEXT_STEP.SYNCMGR_PNS_CANCEL;

pub const SYNCMGR_PRESENTER_CHOICE = extern enum(i32) {
    SYNCMGR_PC_NO_CHOICE = 0,
    SYNCMGR_PC_KEEP_ONE = 1,
    SYNCMGR_PC_KEEP_MULTIPLE = 2,
    SYNCMGR_PC_KEEP_RECENT = 3,
    SYNCMGR_PC_REMOVE_FROM_SYNC_SET = 4,
    SYNCMGR_PC_SKIP = 5,
};
pub const SYNCMGR_PC_NO_CHOICE = SYNCMGR_PRESENTER_CHOICE.SYNCMGR_PC_NO_CHOICE;
pub const SYNCMGR_PC_KEEP_ONE = SYNCMGR_PRESENTER_CHOICE.SYNCMGR_PC_KEEP_ONE;
pub const SYNCMGR_PC_KEEP_MULTIPLE = SYNCMGR_PRESENTER_CHOICE.SYNCMGR_PC_KEEP_MULTIPLE;
pub const SYNCMGR_PC_KEEP_RECENT = SYNCMGR_PRESENTER_CHOICE.SYNCMGR_PC_KEEP_RECENT;
pub const SYNCMGR_PC_REMOVE_FROM_SYNC_SET = SYNCMGR_PRESENTER_CHOICE.SYNCMGR_PC_REMOVE_FROM_SYNC_SET;
pub const SYNCMGR_PC_SKIP = SYNCMGR_PRESENTER_CHOICE.SYNCMGR_PC_SKIP;

const IID_ISyncMgrConflictResolveInfo_Value = @import("../zig.zig").Guid.initString("C405A219-25A2-442E-8743-B845A2CEE93F");
pub const IID_ISyncMgrConflictResolveInfo = &IID_ISyncMgrConflictResolveInfo_Value;
pub const ISyncMgrConflictResolveInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIterationInfo: fn(
            self: *const ISyncMgrConflictResolveInfo,
            pnCurrentConflict: *u32,
            pcConflicts: *u32,
            pcRemainingForApplyToAll: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPresenterNextStep: fn(
            self: *const ISyncMgrConflictResolveInfo,
            pnPresenterNextStep: *SYNCMGR_PRESENTER_NEXT_STEP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPresenterChoice: fn(
            self: *const ISyncMgrConflictResolveInfo,
            pnPresenterChoice: *SYNCMGR_PRESENTER_CHOICE,
            pfApplyToAll: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemChoiceCount: fn(
            self: *const ISyncMgrConflictResolveInfo,
            pcChoices: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemChoice: fn(
            self: *const ISyncMgrConflictResolveInfo,
            iChoice: u32,
            piChoiceIndex: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPresenterNextStep: fn(
            self: *const ISyncMgrConflictResolveInfo,
            nPresenterNextStep: SYNCMGR_PRESENTER_NEXT_STEP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPresenterChoice: fn(
            self: *const ISyncMgrConflictResolveInfo,
            nPresenterChoice: SYNCMGR_PRESENTER_CHOICE,
            fApplyToAll: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemChoices: fn(
            self: *const ISyncMgrConflictResolveInfo,
            prgiConflictItemIndexes: *u32,
            cChoices: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflictResolveInfo_GetIterationInfo(self: *const T, pnCurrentConflict: *u32, pcConflicts: *u32, pcRemainingForApplyToAll: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflictResolveInfo.VTable, self.vtable).GetIterationInfo(@ptrCast(*const ISyncMgrConflictResolveInfo, self), pnCurrentConflict, pcConflicts, pcRemainingForApplyToAll);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflictResolveInfo_GetPresenterNextStep(self: *const T, pnPresenterNextStep: *SYNCMGR_PRESENTER_NEXT_STEP) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflictResolveInfo.VTable, self.vtable).GetPresenterNextStep(@ptrCast(*const ISyncMgrConflictResolveInfo, self), pnPresenterNextStep);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflictResolveInfo_GetPresenterChoice(self: *const T, pnPresenterChoice: *SYNCMGR_PRESENTER_CHOICE, pfApplyToAll: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflictResolveInfo.VTable, self.vtable).GetPresenterChoice(@ptrCast(*const ISyncMgrConflictResolveInfo, self), pnPresenterChoice, pfApplyToAll);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflictResolveInfo_GetItemChoiceCount(self: *const T, pcChoices: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflictResolveInfo.VTable, self.vtable).GetItemChoiceCount(@ptrCast(*const ISyncMgrConflictResolveInfo, self), pcChoices);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflictResolveInfo_GetItemChoice(self: *const T, iChoice: u32, piChoiceIndex: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflictResolveInfo.VTable, self.vtable).GetItemChoice(@ptrCast(*const ISyncMgrConflictResolveInfo, self), iChoice, piChoiceIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflictResolveInfo_SetPresenterNextStep(self: *const T, nPresenterNextStep: SYNCMGR_PRESENTER_NEXT_STEP) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflictResolveInfo.VTable, self.vtable).SetPresenterNextStep(@ptrCast(*const ISyncMgrConflictResolveInfo, self), nPresenterNextStep);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflictResolveInfo_SetPresenterChoice(self: *const T, nPresenterChoice: SYNCMGR_PRESENTER_CHOICE, fApplyToAll: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflictResolveInfo.VTable, self.vtable).SetPresenterChoice(@ptrCast(*const ISyncMgrConflictResolveInfo, self), nPresenterChoice, fApplyToAll);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflictResolveInfo_SetItemChoices(self: *const T, prgiConflictItemIndexes: *u32, cChoices: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflictResolveInfo.VTable, self.vtable).SetItemChoices(@ptrCast(*const ISyncMgrConflictResolveInfo, self), prgiConflictItemIndexes, cChoices);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncMgrConflictFolder_Value = @import("../zig.zig").Guid.initString("59287F5E-BC81-4FCA-A7F1-E5A8ECDB1D69");
pub const IID_ISyncMgrConflictFolder = &IID_ISyncMgrConflictFolder_Value;
pub const ISyncMgrConflictFolder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetConflictIDList: fn(
            self: *const ISyncMgrConflictFolder,
            pConflict: *ISyncMgrConflict,
            ppidlConflict: **ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflictFolder_GetConflictIDList(self: *const T, pConflict: *ISyncMgrConflict, ppidlConflict: **ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflictFolder.VTable, self.vtable).GetConflictIDList(@ptrCast(*const ISyncMgrConflictFolder, self), pConflict, ppidlConflict);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CONFIRM_CONFLICT_ITEM = extern struct {
    pShellItem: *IShellItem2,
    pszOriginalName: PWSTR,
    pszAlternateName: PWSTR,
    pszLocationShort: PWSTR,
    pszLocationFull: PWSTR,
    nType: SYNCMGR_CONFLICT_ITEM_TYPE,
};

pub const CONFIRM_CONFLICT_RESULT_INFO = extern struct {
    pszNewName: PWSTR,
    iItemIndex: u32,
};

const IID_ISyncMgrConflictItems_Value = @import("../zig.zig").Guid.initString("9C7EAD52-8023-4936-A4DB-D2A9A99E436A");
pub const IID_ISyncMgrConflictItems = &IID_ISyncMgrConflictItems_Value;
pub const ISyncMgrConflictItems = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const ISyncMgrConflictItems,
            pCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: fn(
            self: *const ISyncMgrConflictItems,
            iIndex: u32,
            pItemInfo: *CONFIRM_CONFLICT_ITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflictItems_GetCount(self: *const T, pCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflictItems.VTable, self.vtable).GetCount(@ptrCast(*const ISyncMgrConflictItems, self), pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflictItems_GetItem(self: *const T, iIndex: u32, pItemInfo: *CONFIRM_CONFLICT_ITEM) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflictItems.VTable, self.vtable).GetItem(@ptrCast(*const ISyncMgrConflictItems, self), iIndex, pItemInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncMgrConflictResolutionItems_Value = @import("../zig.zig").Guid.initString("458725B9-129D-4135-A998-9CEAFEC27007");
pub const IID_ISyncMgrConflictResolutionItems = &IID_ISyncMgrConflictResolutionItems_Value;
pub const ISyncMgrConflictResolutionItems = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const ISyncMgrConflictResolutionItems,
            pCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: fn(
            self: *const ISyncMgrConflictResolutionItems,
            iIndex: u32,
            pItemInfo: *CONFIRM_CONFLICT_RESULT_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflictResolutionItems_GetCount(self: *const T, pCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflictResolutionItems.VTable, self.vtable).GetCount(@ptrCast(*const ISyncMgrConflictResolutionItems, self), pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrConflictResolutionItems_GetItem(self: *const T, iIndex: u32, pItemInfo: *CONFIRM_CONFLICT_RESULT_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrConflictResolutionItems.VTable, self.vtable).GetItem(@ptrCast(*const ISyncMgrConflictResolutionItems, self), iIndex, pItemInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_InputPanelConfiguration_Value = @import("../zig.zig").Guid.initString("2853ADD3-F096-4C63-A78F-7FA3EA837FB7");
pub const CLSID_InputPanelConfiguration = &CLSID_InputPanelConfiguration_Value;

const IID_IInputPanelConfiguration_Value = @import("../zig.zig").Guid.initString("41C81592-514C-48BD-A22E-E6AF638521A6");
pub const IID_IInputPanelConfiguration = &IID_IInputPanelConfiguration_Value;
pub const IInputPanelConfiguration = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnableFocusTracking: fn(
            self: *const IInputPanelConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInputPanelConfiguration_EnableFocusTracking(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInputPanelConfiguration.VTable, self.vtable).EnableFocusTracking(@ptrCast(*const IInputPanelConfiguration, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInputPanelInvocationConfiguration_Value = @import("../zig.zig").Guid.initString("A213F136-3B45-4362-A332-EFB6547CD432");
pub const IID_IInputPanelInvocationConfiguration = &IID_IInputPanelInvocationConfiguration_Value;
pub const IInputPanelInvocationConfiguration = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RequireTouchInEditControl: fn(
            self: *const IInputPanelInvocationConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInputPanelInvocationConfiguration_RequireTouchInEditControl(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInputPanelInvocationConfiguration.VTable, self.vtable).RequireTouchInEditControl(@ptrCast(*const IInputPanelInvocationConfiguration, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_LocalThumbnailCache_Value = @import("../zig.zig").Guid.initString("50EF4544-AC9F-4A8E-B21B-8A26180DB13F");
pub const CLSID_LocalThumbnailCache = &CLSID_LocalThumbnailCache_Value;

const CLSID_SharedBitmap_Value = @import("../zig.zig").Guid.initString("4DB26476-6787-4046-B836-E8412A9E8A27");
pub const CLSID_SharedBitmap = &CLSID_SharedBitmap_Value;

pub const WTS_FLAGS = extern enum(i32) {
    WTS_NONE = 0,
    WTS_EXTRACT = 0,
    WTS_INCACHEONLY = 1,
    WTS_FASTEXTRACT = 2,
    WTS_FORCEEXTRACTION = 4,
    WTS_SLOWRECLAIM = 8,
    WTS_EXTRACTDONOTCACHE = 32,
    WTS_SCALETOREQUESTEDSIZE = 64,
    WTS_SKIPFASTEXTRACT = 128,
    WTS_EXTRACTINPROC = 256,
    WTS_CROPTOSQUARE = 512,
    WTS_INSTANCESURROGATE = 1024,
    WTS_REQUIRESURROGATE = 2048,
    WTS_APPSTYLE = 8192,
    WTS_WIDETHUMBNAILS = 16384,
    WTS_IDEALCACHESIZEONLY = 32768,
    WTS_SCALEUP = 65536,
};
pub const WTS_NONE = WTS_FLAGS.WTS_NONE;
pub const WTS_EXTRACT = WTS_FLAGS.WTS_EXTRACT;
pub const WTS_INCACHEONLY = WTS_FLAGS.WTS_INCACHEONLY;
pub const WTS_FASTEXTRACT = WTS_FLAGS.WTS_FASTEXTRACT;
pub const WTS_FORCEEXTRACTION = WTS_FLAGS.WTS_FORCEEXTRACTION;
pub const WTS_SLOWRECLAIM = WTS_FLAGS.WTS_SLOWRECLAIM;
pub const WTS_EXTRACTDONOTCACHE = WTS_FLAGS.WTS_EXTRACTDONOTCACHE;
pub const WTS_SCALETOREQUESTEDSIZE = WTS_FLAGS.WTS_SCALETOREQUESTEDSIZE;
pub const WTS_SKIPFASTEXTRACT = WTS_FLAGS.WTS_SKIPFASTEXTRACT;
pub const WTS_EXTRACTINPROC = WTS_FLAGS.WTS_EXTRACTINPROC;
pub const WTS_CROPTOSQUARE = WTS_FLAGS.WTS_CROPTOSQUARE;
pub const WTS_INSTANCESURROGATE = WTS_FLAGS.WTS_INSTANCESURROGATE;
pub const WTS_REQUIRESURROGATE = WTS_FLAGS.WTS_REQUIRESURROGATE;
pub const WTS_APPSTYLE = WTS_FLAGS.WTS_APPSTYLE;
pub const WTS_WIDETHUMBNAILS = WTS_FLAGS.WTS_WIDETHUMBNAILS;
pub const WTS_IDEALCACHESIZEONLY = WTS_FLAGS.WTS_IDEALCACHESIZEONLY;
pub const WTS_SCALEUP = WTS_FLAGS.WTS_SCALEUP;

pub const WTS_CACHEFLAGS = extern enum(i32) {
    WTS_DEFAULT = 0,
    WTS_LOWQUALITY = 1,
    WTS_CACHED = 2,
};
pub const WTS_DEFAULT = WTS_CACHEFLAGS.WTS_DEFAULT;
pub const WTS_LOWQUALITY = WTS_CACHEFLAGS.WTS_LOWQUALITY;
pub const WTS_CACHED = WTS_CACHEFLAGS.WTS_CACHED;

pub const WTS_CONTEXTFLAGS = extern enum(i32) {
    WTSCF_DEFAULT = 0,
    WTSCF_APPSTYLE = 1,
    WTSCF_SQUARE = 2,
    WTSCF_WIDE = 4,
    WTSCF_FAST = 8,
};
pub const WTSCF_DEFAULT = WTS_CONTEXTFLAGS.WTSCF_DEFAULT;
pub const WTSCF_APPSTYLE = WTS_CONTEXTFLAGS.WTSCF_APPSTYLE;
pub const WTSCF_SQUARE = WTS_CONTEXTFLAGS.WTSCF_SQUARE;
pub const WTSCF_WIDE = WTS_CONTEXTFLAGS.WTSCF_WIDE;
pub const WTSCF_FAST = WTS_CONTEXTFLAGS.WTSCF_FAST;

pub const WTS_ALPHATYPE = extern enum(i32) {
    WTSAT_UNKNOWN = 0,
    WTSAT_RGB = 1,
    WTSAT_ARGB = 2,
};
pub const WTSAT_UNKNOWN = WTS_ALPHATYPE.WTSAT_UNKNOWN;
pub const WTSAT_RGB = WTS_ALPHATYPE.WTSAT_RGB;
pub const WTSAT_ARGB = WTS_ALPHATYPE.WTSAT_ARGB;

pub const WTS_THUMBNAILID = extern struct {
    rgbKey: [16]u8,
};

const IID_ISharedBitmap_Value = @import("../zig.zig").Guid.initString("091162A4-BC96-411F-AAE8-C5122CD03363");
pub const IID_ISharedBitmap = &IID_ISharedBitmap_Value;
pub const ISharedBitmap = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSharedBitmap: fn(
            self: *const ISharedBitmap,
            phbm: *HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: fn(
            self: *const ISharedBitmap,
            pSize: *SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormat: fn(
            self: *const ISharedBitmap,
            pat: *WTS_ALPHATYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeBitmap: fn(
            self: *const ISharedBitmap,
            hbm: HBITMAP,
            wtsAT: WTS_ALPHATYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Detach: fn(
            self: *const ISharedBitmap,
            phbm: *HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharedBitmap_GetSharedBitmap(self: *const T, phbm: *HBITMAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharedBitmap.VTable, self.vtable).GetSharedBitmap(@ptrCast(*const ISharedBitmap, self), phbm);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharedBitmap_GetSize(self: *const T, pSize: *SIZE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharedBitmap.VTable, self.vtable).GetSize(@ptrCast(*const ISharedBitmap, self), pSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharedBitmap_GetFormat(self: *const T, pat: *WTS_ALPHATYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharedBitmap.VTable, self.vtable).GetFormat(@ptrCast(*const ISharedBitmap, self), pat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharedBitmap_InitializeBitmap(self: *const T, hbm: HBITMAP, wtsAT: WTS_ALPHATYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharedBitmap.VTable, self.vtable).InitializeBitmap(@ptrCast(*const ISharedBitmap, self), hbm, wtsAT);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharedBitmap_Detach(self: *const T, phbm: *HBITMAP) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharedBitmap.VTable, self.vtable).Detach(@ptrCast(*const ISharedBitmap, self), phbm);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IThumbnailCache_Value = @import("../zig.zig").Guid.initString("F676C15D-596A-4CE2-8234-33996F445DB1");
pub const IID_IThumbnailCache = &IID_IThumbnailCache_Value;
pub const IThumbnailCache = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetThumbnail: fn(
            self: *const IThumbnailCache,
            pShellItem: *IShellItem,
            cxyRequestedThumbSize: u32,
            flags: WTS_FLAGS,
            ppvThumb: ?*?*ISharedBitmap,
            pOutFlags: ?*WTS_CACHEFLAGS,
            pThumbnailID: ?*WTS_THUMBNAILID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetThumbnailByID: fn(
            self: *const IThumbnailCache,
            thumbnailID: WTS_THUMBNAILID,
            cxyRequestedThumbSize: u32,
            ppvThumb: ?*?*ISharedBitmap,
            pOutFlags: ?*WTS_CACHEFLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThumbnailCache_GetThumbnail(self: *const T, pShellItem: *IShellItem, cxyRequestedThumbSize: u32, flags: WTS_FLAGS, ppvThumb: ?*?*ISharedBitmap, pOutFlags: ?*WTS_CACHEFLAGS, pThumbnailID: ?*WTS_THUMBNAILID) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThumbnailCache.VTable, self.vtable).GetThumbnail(@ptrCast(*const IThumbnailCache, self), pShellItem, cxyRequestedThumbSize, flags, ppvThumb, pOutFlags, pThumbnailID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThumbnailCache_GetThumbnailByID(self: *const T, thumbnailID: WTS_THUMBNAILID, cxyRequestedThumbSize: u32, ppvThumb: ?*?*ISharedBitmap, pOutFlags: ?*WTS_CACHEFLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThumbnailCache.VTable, self.vtable).GetThumbnailByID(@ptrCast(*const IThumbnailCache, self), thumbnailID, cxyRequestedThumbSize, ppvThumb, pOutFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IThumbnailProvider_Value = @import("../zig.zig").Guid.initString("E357FCCD-A995-4576-B01F-234630154E96");
pub const IID_IThumbnailProvider = &IID_IThumbnailProvider_Value;
pub const IThumbnailProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetThumbnail: fn(
            self: *const IThumbnailProvider,
            cx: u32,
            phbmp: *HBITMAP,
            pdwAlpha: *WTS_ALPHATYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThumbnailProvider_GetThumbnail(self: *const T, cx: u32, phbmp: *HBITMAP, pdwAlpha: *WTS_ALPHATYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThumbnailProvider.VTable, self.vtable).GetThumbnail(@ptrCast(*const IThumbnailProvider, self), cx, phbmp, pdwAlpha);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IThumbnailSettings_Value = @import("../zig.zig").Guid.initString("F4376F00-BEF5-4D45-80F3-1E023BBF1209");
pub const IID_IThumbnailSettings = &IID_IThumbnailSettings_Value;
pub const IThumbnailSettings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetContext: fn(
            self: *const IThumbnailSettings,
            dwContext: WTS_CONTEXTFLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThumbnailSettings_SetContext(self: *const T, dwContext: WTS_CONTEXTFLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThumbnailSettings.VTable, self.vtable).SetContext(@ptrCast(*const IThumbnailSettings, self), dwContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IThumbnailCachePrimer_Value = @import("../zig.zig").Guid.initString("0F03F8FE-2B26-46F0-965A-212AA8D66B76");
pub const IID_IThumbnailCachePrimer = &IID_IThumbnailCachePrimer_Value;
pub const IThumbnailCachePrimer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PageInThumbnail: fn(
            self: *const IThumbnailCachePrimer,
            psi: *IShellItem,
            wtsFlags: WTS_FLAGS,
            cxyRequestedThumbSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThumbnailCachePrimer_PageInThumbnail(self: *const T, psi: *IShellItem, wtsFlags: WTS_FLAGS, cxyRequestedThumbSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThumbnailCachePrimer.VTable, self.vtable).PageInThumbnail(@ptrCast(*const IThumbnailCachePrimer, self), psi, wtsFlags, cxyRequestedThumbSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_ShellImageDataFactory_Value = @import("../zig.zig").Guid.initString("66E4E4FB-F385-4DD0-8D74-A2EFD1BC6178");
pub const CLSID_ShellImageDataFactory = &CLSID_ShellImageDataFactory_Value;

const IID_IShellImageDataFactory_Value = @import("../zig.zig").Guid.initString("9BE8ED5C-EDAB-4D75-90F3-BD5BDBB21C82");
pub const IID_IShellImageDataFactory = &IID_IShellImageDataFactory_Value;
pub const IShellImageDataFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateIShellImageData: fn(
            self: *const IShellImageDataFactory,
            ppshimg: **IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateImageFromFile: fn(
            self: *const IShellImageDataFactory,
            pszPath: [*:0]const u16,
            ppshimg: **IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateImageFromStream: fn(
            self: *const IShellImageDataFactory,
            pStream: ?*IStream,
            ppshimg: **IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataFormatFromPath: fn(
            self: *const IShellImageDataFactory,
            pszPath: [*:0]const u16,
            pDataFormat: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageDataFactory_CreateIShellImageData(self: *const T, ppshimg: **IShellImageData) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageDataFactory.VTable, self.vtable).CreateIShellImageData(@ptrCast(*const IShellImageDataFactory, self), ppshimg);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageDataFactory_CreateImageFromFile(self: *const T, pszPath: [*:0]const u16, ppshimg: **IShellImageData) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageDataFactory.VTable, self.vtable).CreateImageFromFile(@ptrCast(*const IShellImageDataFactory, self), pszPath, ppshimg);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageDataFactory_CreateImageFromStream(self: *const T, pStream: ?*IStream, ppshimg: **IShellImageData) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageDataFactory.VTable, self.vtable).CreateImageFromStream(@ptrCast(*const IShellImageDataFactory, self), pStream, ppshimg);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageDataFactory_GetDataFormatFromPath(self: *const T, pszPath: [*:0]const u16, pDataFormat: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageDataFactory.VTable, self.vtable).GetDataFormatFromPath(@ptrCast(*const IShellImageDataFactory, self), pszPath, pDataFormat);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellImageData_Value = @import("../zig.zig").Guid.initString("BFDEEC12-8040-4403-A5EA-9E07DAFCF530");
pub const IID_IShellImageData = &IID_IShellImageData_Value;
pub const IShellImageData = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Decode: fn(
            self: *const IShellImageData,
            dwFlags: u32,
            cxDesired: u32,
            cyDesired: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Draw: fn(
            self: *const IShellImageData,
            hdc: HDC,
            prcDest: *RECT,
            prcSrc: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NextFrame: fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NextPage: fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrevPage: fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsTransparent: fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsAnimated: fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsVector: fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsMultipage: fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEditable: fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPrintable: fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDecoded: fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentPage: fn(
            self: *const IShellImageData,
            pnPage: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPageCount: fn(
            self: *const IShellImageData,
            pcPages: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectPage: fn(
            self: *const IShellImageData,
            iPage: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: fn(
            self: *const IShellImageData,
            pSize: *SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRawDataFormat: fn(
            self: *const IShellImageData,
            pDataFormat: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelFormat: fn(
            self: *const IShellImageData,
            pFormat: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDelay: fn(
            self: *const IShellImageData,
            pdwDelay: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperties: fn(
            self: *const IShellImageData,
            dwMode: u32,
            ppPropSet: **IPropertySetStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rotate: fn(
            self: *const IShellImageData,
            dwAngle: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Scale: fn(
            self: *const IShellImageData,
            cx: u32,
            cy: u32,
            hints: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DiscardEdit: fn(
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEncoderParams: fn(
            self: *const IShellImageData,
            pbagEnc: *IPropertyBag,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisplayName: fn(
            self: *const IShellImageData,
            wszName: PWSTR,
            cch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResolution: fn(
            self: *const IShellImageData,
            puResolutionX: *u32,
            puResolutionY: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEncoderParams: fn(
            self: *const IShellImageData,
            pguidFmt: *Guid,
            ppEncParams: **u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterAbort: fn(
            self: *const IShellImageData,
            pAbort: *IShellImageDataAbort,
            ppAbortPrev: **IShellImageDataAbort,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloneFrame: fn(
            self: *const IShellImageData,
            ppImg: **u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReplaceFrame: fn(
            self: *const IShellImageData,
            pImg: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_Decode(self: *const T, dwFlags: u32, cxDesired: u32, cyDesired: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).Decode(@ptrCast(*const IShellImageData, self), dwFlags, cxDesired, cyDesired);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_Draw(self: *const T, hdc: HDC, prcDest: *RECT, prcSrc: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).Draw(@ptrCast(*const IShellImageData, self), hdc, prcDest, prcSrc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_NextFrame(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).NextFrame(@ptrCast(*const IShellImageData, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_NextPage(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).NextPage(@ptrCast(*const IShellImageData, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_PrevPage(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).PrevPage(@ptrCast(*const IShellImageData, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_IsTransparent(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).IsTransparent(@ptrCast(*const IShellImageData, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_IsAnimated(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).IsAnimated(@ptrCast(*const IShellImageData, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_IsVector(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).IsVector(@ptrCast(*const IShellImageData, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_IsMultipage(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).IsMultipage(@ptrCast(*const IShellImageData, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_IsEditable(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).IsEditable(@ptrCast(*const IShellImageData, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_IsPrintable(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).IsPrintable(@ptrCast(*const IShellImageData, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_IsDecoded(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).IsDecoded(@ptrCast(*const IShellImageData, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_GetCurrentPage(self: *const T, pnPage: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).GetCurrentPage(@ptrCast(*const IShellImageData, self), pnPage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_GetPageCount(self: *const T, pcPages: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).GetPageCount(@ptrCast(*const IShellImageData, self), pcPages);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_SelectPage(self: *const T, iPage: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).SelectPage(@ptrCast(*const IShellImageData, self), iPage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_GetSize(self: *const T, pSize: *SIZE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).GetSize(@ptrCast(*const IShellImageData, self), pSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_GetRawDataFormat(self: *const T, pDataFormat: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).GetRawDataFormat(@ptrCast(*const IShellImageData, self), pDataFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_GetPixelFormat(self: *const T, pFormat: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).GetPixelFormat(@ptrCast(*const IShellImageData, self), pFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_GetDelay(self: *const T, pdwDelay: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).GetDelay(@ptrCast(*const IShellImageData, self), pdwDelay);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_GetProperties(self: *const T, dwMode: u32, ppPropSet: **IPropertySetStorage) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).GetProperties(@ptrCast(*const IShellImageData, self), dwMode, ppPropSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_Rotate(self: *const T, dwAngle: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).Rotate(@ptrCast(*const IShellImageData, self), dwAngle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_Scale(self: *const T, cx: u32, cy: u32, hints: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).Scale(@ptrCast(*const IShellImageData, self), cx, cy, hints);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_DiscardEdit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).DiscardEdit(@ptrCast(*const IShellImageData, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_SetEncoderParams(self: *const T, pbagEnc: *IPropertyBag) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).SetEncoderParams(@ptrCast(*const IShellImageData, self), pbagEnc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_DisplayName(self: *const T, wszName: PWSTR, cch: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).DisplayName(@ptrCast(*const IShellImageData, self), wszName, cch);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_GetResolution(self: *const T, puResolutionX: *u32, puResolutionY: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).GetResolution(@ptrCast(*const IShellImageData, self), puResolutionX, puResolutionY);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_GetEncoderParams(self: *const T, pguidFmt: *Guid, ppEncParams: **u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).GetEncoderParams(@ptrCast(*const IShellImageData, self), pguidFmt, ppEncParams);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_RegisterAbort(self: *const T, pAbort: *IShellImageDataAbort, ppAbortPrev: **IShellImageDataAbort) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).RegisterAbort(@ptrCast(*const IShellImageData, self), pAbort, ppAbortPrev);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_CloneFrame(self: *const T, ppImg: **u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).CloneFrame(@ptrCast(*const IShellImageData, self), ppImg);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageData_ReplaceFrame(self: *const T, pImg: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageData.VTable, self.vtable).ReplaceFrame(@ptrCast(*const IShellImageData, self), pImg);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellImageDataAbort_Value = @import("../zig.zig").Guid.initString("53FB8E58-50C0-4003-B4AA-0C8DF28E7F3A");
pub const IID_IShellImageDataAbort = &IID_IShellImageDataAbort_Value;
pub const IShellImageDataAbort = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryAbort: fn(
            self: *const IShellImageDataAbort,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellImageDataAbort_QueryAbort(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellImageDataAbort.VTable, self.vtable).QueryAbort(@ptrCast(*const IShellImageDataAbort, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IStorageProviderPropertyHandler_Value = @import("../zig.zig").Guid.initString("301DFBE5-524C-4B0F-8B2D-21C40B3A2988");
pub const IID_IStorageProviderPropertyHandler = &IID_IStorageProviderPropertyHandler_Value;
pub const IStorageProviderPropertyHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RetrieveProperties: fn(
            self: *const IStorageProviderPropertyHandler,
            propertiesToRetrieve: [*]const PROPERTYKEY,
            propertiesToRetrieveCount: u32,
            retrievedProperties: **IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveProperties: fn(
            self: *const IStorageProviderPropertyHandler,
            propertiesToSave: *IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorageProviderPropertyHandler_RetrieveProperties(self: *const T, propertiesToRetrieve: [*]const PROPERTYKEY, propertiesToRetrieveCount: u32, retrievedProperties: **IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorageProviderPropertyHandler.VTable, self.vtable).RetrieveProperties(@ptrCast(*const IStorageProviderPropertyHandler, self), propertiesToRetrieve, propertiesToRetrieveCount, retrievedProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorageProviderPropertyHandler_SaveProperties(self: *const T, propertiesToSave: *IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorageProviderPropertyHandler.VTable, self.vtable).SaveProperties(@ptrCast(*const IStorageProviderPropertyHandler, self), propertiesToSave);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IStorageProviderHandler_Value = @import("../zig.zig").Guid.initString("162C6FB5-44D3-435B-903D-E613FA093FB5");
pub const IID_IStorageProviderHandler = &IID_IStorageProviderHandler_Value;
pub const IStorageProviderHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPropertyHandlerFromPath: fn(
            self: *const IStorageProviderHandler,
            path: [*:0]const u16,
            propertyHandler: **IStorageProviderPropertyHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyHandlerFromUri: fn(
            self: *const IStorageProviderHandler,
            uri: [*:0]const u16,
            propertyHandler: **IStorageProviderPropertyHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyHandlerFromFileId: fn(
            self: *const IStorageProviderHandler,
            fileId: [*:0]const u16,
            propertyHandler: **IStorageProviderPropertyHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorageProviderHandler_GetPropertyHandlerFromPath(self: *const T, path: [*:0]const u16, propertyHandler: **IStorageProviderPropertyHandler) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorageProviderHandler.VTable, self.vtable).GetPropertyHandlerFromPath(@ptrCast(*const IStorageProviderHandler, self), path, propertyHandler);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorageProviderHandler_GetPropertyHandlerFromUri(self: *const T, uri: [*:0]const u16, propertyHandler: **IStorageProviderPropertyHandler) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorageProviderHandler.VTable, self.vtable).GetPropertyHandlerFromUri(@ptrCast(*const IStorageProviderHandler, self), uri, propertyHandler);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IStorageProviderHandler_GetPropertyHandlerFromFileId(self: *const T, fileId: [*:0]const u16, propertyHandler: **IStorageProviderPropertyHandler) callconv(.Inline) HRESULT {
            return @ptrCast(*const IStorageProviderHandler.VTable, self.vtable).GetPropertyHandlerFromFileId(@ptrCast(*const IStorageProviderHandler, self), fileId, propertyHandler);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_SyncMgr_Value = @import("../zig.zig").Guid.initString("6295DF27-35EE-11D1-8707-00C04FD93327");
pub const CLSID_SyncMgr = &CLSID_SyncMgr_Value;

pub const SYNCMGRSTATUS = extern enum(i32) {
    STOPPED = 0,
    SKIPPED = 1,
    PENDING = 2,
    UPDATING = 3,
    SUCCEEDED = 4,
    FAILED = 5,
    PAUSED = 6,
    RESUMING = 7,
    UPDATING_INDETERMINATE = 8,
    DELETED = 256,
};
pub const SYNCMGRSTATUS_STOPPED = SYNCMGRSTATUS.STOPPED;
pub const SYNCMGRSTATUS_SKIPPED = SYNCMGRSTATUS.SKIPPED;
pub const SYNCMGRSTATUS_PENDING = SYNCMGRSTATUS.PENDING;
pub const SYNCMGRSTATUS_UPDATING = SYNCMGRSTATUS.UPDATING;
pub const SYNCMGRSTATUS_SUCCEEDED = SYNCMGRSTATUS.SUCCEEDED;
pub const SYNCMGRSTATUS_FAILED = SYNCMGRSTATUS.FAILED;
pub const SYNCMGRSTATUS_PAUSED = SYNCMGRSTATUS.PAUSED;
pub const SYNCMGRSTATUS_RESUMING = SYNCMGRSTATUS.RESUMING;
pub const SYNCMGRSTATUS_UPDATING_INDETERMINATE = SYNCMGRSTATUS.UPDATING_INDETERMINATE;
pub const SYNCMGRSTATUS_DELETED = SYNCMGRSTATUS.DELETED;

pub const SYNCMGRPROGRESSITEM = extern struct {
    cbSize: u32,
    mask: u32,
    lpcStatusText: [*:0]const u16,
    dwStatusType: u32,
    iProgValue: i32,
    iMaxValue: i32,
};

pub const SYNCMGRLOGLEVEL = extern enum(i32) {
    INFORMATION = 1,
    WARNING = 2,
    ERROR = 3,
    LOGLEVELMAX = 3,
};
pub const SYNCMGRLOGLEVEL_INFORMATION = SYNCMGRLOGLEVEL.INFORMATION;
pub const SYNCMGRLOGLEVEL_WARNING = SYNCMGRLOGLEVEL.WARNING;
pub const SYNCMGRLOGLEVEL_ERROR = SYNCMGRLOGLEVEL.ERROR;
pub const SYNCMGRLOGLEVEL_LOGLEVELMAX = SYNCMGRLOGLEVEL.LOGLEVELMAX;

pub const SYNCMGRERRORFLAGS = extern enum(i32) {
    SYNCMGRERRORFLAG_ENABLEJUMPTEXT = 1,
};
pub const SYNCMGRERRORFLAG_ENABLEJUMPTEXT = SYNCMGRERRORFLAGS.SYNCMGRERRORFLAG_ENABLEJUMPTEXT;

pub const SYNCMGRLOGERRORINFO = extern struct {
    cbSize: u32,
    mask: u32,
    dwSyncMgrErrorFlags: u32,
    ErrorID: Guid,
    ItemID: Guid,
};

const IID_ISyncMgrSynchronizeCallback_Value = @import("../zig.zig").Guid.initString("6295DF41-35EE-11D1-8707-00C04FD93327");
pub const IID_ISyncMgrSynchronizeCallback = &IID_ISyncMgrSynchronizeCallback_Value;
pub const ISyncMgrSynchronizeCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ShowPropertiesCompleted: fn(
            self: *const ISyncMgrSynchronizeCallback,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrepareForSyncCompleted: fn(
            self: *const ISyncMgrSynchronizeCallback,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SynchronizeCompleted: fn(
            self: *const ISyncMgrSynchronizeCallback,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowErrorCompleted: fn(
            self: *const ISyncMgrSynchronizeCallback,
            hr: HRESULT,
            cItems: u32,
            pItemIDs: [*]const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableModeless: fn(
            self: *const ISyncMgrSynchronizeCallback,
            fEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Progress: fn(
            self: *const ISyncMgrSynchronizeCallback,
            ItemID: *const Guid,
            pSyncProgressItem: *const SYNCMGRPROGRESSITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LogError: fn(
            self: *const ISyncMgrSynchronizeCallback,
            dwErrorLevel: u32,
            pszErrorText: [*:0]const u16,
            pSyncLogError: *const SYNCMGRLOGERRORINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteLogError: fn(
            self: *const ISyncMgrSynchronizeCallback,
            ErrorID: *const Guid,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EstablishConnection: fn(
            self: *const ISyncMgrSynchronizeCallback,
            pwszConnection: [*:0]const u16,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronizeCallback_ShowPropertiesCompleted(self: *const T, hr: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronizeCallback.VTable, self.vtable).ShowPropertiesCompleted(@ptrCast(*const ISyncMgrSynchronizeCallback, self), hr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronizeCallback_PrepareForSyncCompleted(self: *const T, hr: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronizeCallback.VTable, self.vtable).PrepareForSyncCompleted(@ptrCast(*const ISyncMgrSynchronizeCallback, self), hr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronizeCallback_SynchronizeCompleted(self: *const T, hr: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronizeCallback.VTable, self.vtable).SynchronizeCompleted(@ptrCast(*const ISyncMgrSynchronizeCallback, self), hr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronizeCallback_ShowErrorCompleted(self: *const T, hr: HRESULT, cItems: u32, pItemIDs: [*]const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronizeCallback.VTable, self.vtable).ShowErrorCompleted(@ptrCast(*const ISyncMgrSynchronizeCallback, self), hr, cItems, pItemIDs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronizeCallback_EnableModeless(self: *const T, fEnable: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronizeCallback.VTable, self.vtable).EnableModeless(@ptrCast(*const ISyncMgrSynchronizeCallback, self), fEnable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronizeCallback_Progress(self: *const T, ItemID: *const Guid, pSyncProgressItem: *const SYNCMGRPROGRESSITEM) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronizeCallback.VTable, self.vtable).Progress(@ptrCast(*const ISyncMgrSynchronizeCallback, self), ItemID, pSyncProgressItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronizeCallback_LogError(self: *const T, dwErrorLevel: u32, pszErrorText: [*:0]const u16, pSyncLogError: *const SYNCMGRLOGERRORINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronizeCallback.VTable, self.vtable).LogError(@ptrCast(*const ISyncMgrSynchronizeCallback, self), dwErrorLevel, pszErrorText, pSyncLogError);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronizeCallback_DeleteLogError(self: *const T, ErrorID: *const Guid, dwReserved: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronizeCallback.VTable, self.vtable).DeleteLogError(@ptrCast(*const ISyncMgrSynchronizeCallback, self), ErrorID, dwReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronizeCallback_EstablishConnection(self: *const T, pwszConnection: [*:0]const u16, dwReserved: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronizeCallback.VTable, self.vtable).EstablishConnection(@ptrCast(*const ISyncMgrSynchronizeCallback, self), pwszConnection, dwReserved);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGRITEMFLAGS = extern enum(i32) {
    SYNCMGRITEM_HASPROPERTIES = 1,
    SYNCMGRITEM_TEMPORARY = 2,
    SYNCMGRITEM_ROAMINGUSER = 4,
    SYNCMGRITEM_LASTUPDATETIME = 8,
    SYNCMGRITEM_MAYDELETEITEM = 16,
    SYNCMGRITEM_HIDDEN = 32,
};
pub const SYNCMGRITEM_HASPROPERTIES = SYNCMGRITEMFLAGS.SYNCMGRITEM_HASPROPERTIES;
pub const SYNCMGRITEM_TEMPORARY = SYNCMGRITEMFLAGS.SYNCMGRITEM_TEMPORARY;
pub const SYNCMGRITEM_ROAMINGUSER = SYNCMGRITEMFLAGS.SYNCMGRITEM_ROAMINGUSER;
pub const SYNCMGRITEM_LASTUPDATETIME = SYNCMGRITEMFLAGS.SYNCMGRITEM_LASTUPDATETIME;
pub const SYNCMGRITEM_MAYDELETEITEM = SYNCMGRITEMFLAGS.SYNCMGRITEM_MAYDELETEITEM;
pub const SYNCMGRITEM_HIDDEN = SYNCMGRITEMFLAGS.SYNCMGRITEM_HIDDEN;

pub const SYNCMGRITEM = extern struct {
    cbSize: u32,
    dwFlags: u32,
    ItemID: Guid,
    dwItemState: u32,
    hIcon: HICON,
    wszItemName: [128]u16,
    ftLastUpdate: FILETIME,
};

const IID_ISyncMgrEnumItems_Value = @import("../zig.zig").Guid.initString("6295DF2A-35EE-11D1-8707-00C04FD93327");
pub const IID_ISyncMgrEnumItems = &IID_ISyncMgrEnumItems_Value;
pub const ISyncMgrEnumItems = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const ISyncMgrEnumItems,
            celt: u32,
            rgelt: [*]SYNCMGRITEM,
            pceltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const ISyncMgrEnumItems,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const ISyncMgrEnumItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const ISyncMgrEnumItems,
            ppenum: **ISyncMgrEnumItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEnumItems_Next(self: *const T, celt: u32, rgelt: [*]SYNCMGRITEM, pceltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEnumItems.VTable, self.vtable).Next(@ptrCast(*const ISyncMgrEnumItems, self), celt, rgelt, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEnumItems_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEnumItems.VTable, self.vtable).Skip(@ptrCast(*const ISyncMgrEnumItems, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEnumItems_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEnumItems.VTable, self.vtable).Reset(@ptrCast(*const ISyncMgrEnumItems, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrEnumItems_Clone(self: *const T, ppenum: **ISyncMgrEnumItems) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrEnumItems.VTable, self.vtable).Clone(@ptrCast(*const ISyncMgrEnumItems, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGRFLAG = extern enum(i32) {
    CONNECT = 1,
    PENDINGDISCONNECT = 2,
    MANUAL = 3,
    IDLE = 4,
    INVOKE = 5,
    SCHEDULED = 6,
    EVENTMASK = 255,
    SETTINGS = 256,
    MAYBOTHERUSER = 512,
};
pub const SYNCMGRFLAG_CONNECT = SYNCMGRFLAG.CONNECT;
pub const SYNCMGRFLAG_PENDINGDISCONNECT = SYNCMGRFLAG.PENDINGDISCONNECT;
pub const SYNCMGRFLAG_MANUAL = SYNCMGRFLAG.MANUAL;
pub const SYNCMGRFLAG_IDLE = SYNCMGRFLAG.IDLE;
pub const SYNCMGRFLAG_INVOKE = SYNCMGRFLAG.INVOKE;
pub const SYNCMGRFLAG_SCHEDULED = SYNCMGRFLAG.SCHEDULED;
pub const SYNCMGRFLAG_EVENTMASK = SYNCMGRFLAG.EVENTMASK;
pub const SYNCMGRFLAG_SETTINGS = SYNCMGRFLAG.SETTINGS;
pub const SYNCMGRFLAG_MAYBOTHERUSER = SYNCMGRFLAG.MAYBOTHERUSER;

pub const SYNCMGRHANDLERFLAGS = extern enum(i32) {
    SYNCMGRHANDLER_HASPROPERTIES = 1,
    SYNCMGRHANDLER_MAYESTABLISHCONNECTION = 2,
    SYNCMGRHANDLER_ALWAYSLISTHANDLER = 4,
    SYNCMGRHANDLER_HIDDEN = 8,
};
pub const SYNCMGRHANDLER_HASPROPERTIES = SYNCMGRHANDLERFLAGS.SYNCMGRHANDLER_HASPROPERTIES;
pub const SYNCMGRHANDLER_MAYESTABLISHCONNECTION = SYNCMGRHANDLERFLAGS.SYNCMGRHANDLER_MAYESTABLISHCONNECTION;
pub const SYNCMGRHANDLER_ALWAYSLISTHANDLER = SYNCMGRHANDLERFLAGS.SYNCMGRHANDLER_ALWAYSLISTHANDLER;
pub const SYNCMGRHANDLER_HIDDEN = SYNCMGRHANDLERFLAGS.SYNCMGRHANDLER_HIDDEN;

pub const SYNCMGRHANDLERINFO = extern struct {
    cbSize: u32,
    hIcon: HICON,
    SyncMgrHandlerFlags: u32,
    wszHandlerName: [32]u16,
};

pub const SYNCMGRITEMSTATE = extern enum(i32) {
    UNCHECKED = 0,
    CHECKED = 1,
};
pub const SYNCMGRITEMSTATE_UNCHECKED = SYNCMGRITEMSTATE.UNCHECKED;
pub const SYNCMGRITEMSTATE_CHECKED = SYNCMGRITEMSTATE.CHECKED;

const IID_ISyncMgrSynchronize_Value = @import("../zig.zig").Guid.initString("6295DF40-35EE-11D1-8707-00C04FD93327");
pub const IID_ISyncMgrSynchronize = &IID_ISyncMgrSynchronize_Value;
pub const ISyncMgrSynchronize = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const ISyncMgrSynchronize,
            dwReserved: u32,
            dwSyncMgrFlags: u32,
            cbCookie: u32,
            lpCookie: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHandlerInfo: fn(
            self: *const ISyncMgrSynchronize,
            ppSyncMgrHandlerInfo: **SYNCMGRHANDLERINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumSyncMgrItems: fn(
            self: *const ISyncMgrSynchronize,
            ppSyncMgrEnumItems: **ISyncMgrEnumItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemObject: fn(
            self: *const ISyncMgrSynchronize,
            ItemID: *const Guid,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowProperties: fn(
            self: *const ISyncMgrSynchronize,
            hWndParent: HWND,
            ItemID: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProgressCallback: fn(
            self: *const ISyncMgrSynchronize,
            lpCallBack: *ISyncMgrSynchronizeCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrepareForSync: fn(
            self: *const ISyncMgrSynchronize,
            cbNumItems: u32,
            pItemIDs: [*]Guid,
            hWndParent: HWND,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Synchronize: fn(
            self: *const ISyncMgrSynchronize,
            hWndParent: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemStatus: fn(
            self: *const ISyncMgrSynchronize,
            pItemID: *const Guid,
            dwSyncMgrStatus: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowError: fn(
            self: *const ISyncMgrSynchronize,
            hWndParent: HWND,
            ErrorID: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronize_Initialize(self: *const T, dwReserved: u32, dwSyncMgrFlags: u32, cbCookie: u32, lpCookie: [*:0]const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronize.VTable, self.vtable).Initialize(@ptrCast(*const ISyncMgrSynchronize, self), dwReserved, dwSyncMgrFlags, cbCookie, lpCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronize_GetHandlerInfo(self: *const T, ppSyncMgrHandlerInfo: **SYNCMGRHANDLERINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronize.VTable, self.vtable).GetHandlerInfo(@ptrCast(*const ISyncMgrSynchronize, self), ppSyncMgrHandlerInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronize_EnumSyncMgrItems(self: *const T, ppSyncMgrEnumItems: **ISyncMgrEnumItems) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronize.VTable, self.vtable).EnumSyncMgrItems(@ptrCast(*const ISyncMgrSynchronize, self), ppSyncMgrEnumItems);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronize_GetItemObject(self: *const T, ItemID: *const Guid, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronize.VTable, self.vtable).GetItemObject(@ptrCast(*const ISyncMgrSynchronize, self), ItemID, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronize_ShowProperties(self: *const T, hWndParent: HWND, ItemID: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronize.VTable, self.vtable).ShowProperties(@ptrCast(*const ISyncMgrSynchronize, self), hWndParent, ItemID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronize_SetProgressCallback(self: *const T, lpCallBack: *ISyncMgrSynchronizeCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronize.VTable, self.vtable).SetProgressCallback(@ptrCast(*const ISyncMgrSynchronize, self), lpCallBack);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronize_PrepareForSync(self: *const T, cbNumItems: u32, pItemIDs: [*]Guid, hWndParent: HWND, dwReserved: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronize.VTable, self.vtable).PrepareForSync(@ptrCast(*const ISyncMgrSynchronize, self), cbNumItems, pItemIDs, hWndParent, dwReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronize_Synchronize(self: *const T, hWndParent: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronize.VTable, self.vtable).Synchronize(@ptrCast(*const ISyncMgrSynchronize, self), hWndParent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronize_SetItemStatus(self: *const T, pItemID: *const Guid, dwSyncMgrStatus: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronize.VTable, self.vtable).SetItemStatus(@ptrCast(*const ISyncMgrSynchronize, self), pItemID, dwSyncMgrStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronize_ShowError(self: *const T, hWndParent: HWND, ErrorID: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronize.VTable, self.vtable).ShowError(@ptrCast(*const ISyncMgrSynchronize, self), hWndParent, ErrorID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGRINVOKEFLAGS = extern enum(i32) {
    SYNCMGRINVOKE_STARTSYNC = 2,
    SYNCMGRINVOKE_MINIMIZED = 4,
};
pub const SYNCMGRINVOKE_STARTSYNC = SYNCMGRINVOKEFLAGS.SYNCMGRINVOKE_STARTSYNC;
pub const SYNCMGRINVOKE_MINIMIZED = SYNCMGRINVOKEFLAGS.SYNCMGRINVOKE_MINIMIZED;

const IID_ISyncMgrSynchronizeInvoke_Value = @import("../zig.zig").Guid.initString("6295DF2C-35EE-11D1-8707-00C04FD93327");
pub const IID_ISyncMgrSynchronizeInvoke = &IID_ISyncMgrSynchronizeInvoke_Value;
pub const ISyncMgrSynchronizeInvoke = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UpdateItems: fn(
            self: *const ISyncMgrSynchronizeInvoke,
            dwInvokeFlags: u32,
            clsid: *const Guid,
            cbCookie: u32,
            pCookie: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateAll: fn(
            self: *const ISyncMgrSynchronizeInvoke,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronizeInvoke_UpdateItems(self: *const T, dwInvokeFlags: u32, clsid: *const Guid, cbCookie: u32, pCookie: [*:0]const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronizeInvoke.VTable, self.vtable).UpdateItems(@ptrCast(*const ISyncMgrSynchronizeInvoke, self), dwInvokeFlags, clsid, cbCookie, pCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrSynchronizeInvoke_UpdateAll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrSynchronizeInvoke.VTable, self.vtable).UpdateAll(@ptrCast(*const ISyncMgrSynchronizeInvoke, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGRREGISTERFLAGS = extern enum(i32) {
    SYNCMGRREGISTERFLAG_CONNECT = 1,
    SYNCMGRREGISTERFLAG_PENDINGDISCONNECT = 2,
    SYNCMGRREGISTERFLAG_IDLE = 4,
};
pub const SYNCMGRREGISTERFLAG_CONNECT = SYNCMGRREGISTERFLAGS.SYNCMGRREGISTERFLAG_CONNECT;
pub const SYNCMGRREGISTERFLAG_PENDINGDISCONNECT = SYNCMGRREGISTERFLAGS.SYNCMGRREGISTERFLAG_PENDINGDISCONNECT;
pub const SYNCMGRREGISTERFLAG_IDLE = SYNCMGRREGISTERFLAGS.SYNCMGRREGISTERFLAG_IDLE;

const IID_ISyncMgrRegister_Value = @import("../zig.zig").Guid.initString("6295DF42-35EE-11D1-8707-00C04FD93327");
pub const IID_ISyncMgrRegister = &IID_ISyncMgrRegister_Value;
pub const ISyncMgrRegister = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterSyncMgrHandler: fn(
            self: *const ISyncMgrRegister,
            clsidHandler: *const Guid,
            pwszDescription: [*:0]const u16,
            dwSyncMgrRegisterFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterSyncMgrHandler: fn(
            self: *const ISyncMgrRegister,
            clsidHandler: *const Guid,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHandlerRegistrationInfo: fn(
            self: *const ISyncMgrRegister,
            clsidHandler: *const Guid,
            pdwSyncMgrRegisterFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrRegister_RegisterSyncMgrHandler(self: *const T, clsidHandler: *const Guid, pwszDescription: [*:0]const u16, dwSyncMgrRegisterFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrRegister.VTable, self.vtable).RegisterSyncMgrHandler(@ptrCast(*const ISyncMgrRegister, self), clsidHandler, pwszDescription, dwSyncMgrRegisterFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrRegister_UnregisterSyncMgrHandler(self: *const T, clsidHandler: *const Guid, dwReserved: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrRegister.VTable, self.vtable).UnregisterSyncMgrHandler(@ptrCast(*const ISyncMgrRegister, self), clsidHandler, dwReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMgrRegister_GetHandlerRegistrationInfo(self: *const T, clsidHandler: *const Guid, pdwSyncMgrRegisterFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMgrRegister.VTable, self.vtable).GetHandlerRegistrationInfo(@ptrCast(*const ISyncMgrRegister, self), clsidHandler, pdwSyncMgrRegisterFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_ThumbnailStreamCache_Value = @import("../zig.zig").Guid.initString("CBE0FED3-4B91-4E90-8354-8A8C84EC6872");
pub const CLSID_ThumbnailStreamCache = &CLSID_ThumbnailStreamCache_Value;

pub const ThumbnailStreamCacheOptions = extern enum(i32) {
    ExtractIfNotCached = 0,
    ReturnOnlyIfCached = 1,
    ResizeThumbnail = 2,
    AllowSmallerSize = 4,
};
pub const ExtractIfNotCached = ThumbnailStreamCacheOptions.ExtractIfNotCached;
pub const ReturnOnlyIfCached = ThumbnailStreamCacheOptions.ReturnOnlyIfCached;
pub const ResizeThumbnail = ThumbnailStreamCacheOptions.ResizeThumbnail;
pub const AllowSmallerSize = ThumbnailStreamCacheOptions.AllowSmallerSize;

const IID_IThumbnailStreamCache_Value = @import("../zig.zig").Guid.initString("90E11430-9569-41D8-AE75-6D4D2AE7CCA0");
pub const IID_IThumbnailStreamCache = &IID_IThumbnailStreamCache_Value;
pub const IThumbnailStreamCache = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetThumbnailStream: fn(
            self: *const IThumbnailStreamCache,
            path: [*:0]const u16,
            cacheId: u64,
            options: ThumbnailStreamCacheOptions,
            requestedThumbnailSize: u32,
            thumbnailSize: *SIZE,
            thumbnailStream: **IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnailStream: fn(
            self: *const IThumbnailStreamCache,
            path: [*:0]const u16,
            cacheId: u64,
            thumbnailSize: SIZE,
            thumbnailStream: *IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThumbnailStreamCache_GetThumbnailStream(self: *const T, path: [*:0]const u16, cacheId: u64, options: ThumbnailStreamCacheOptions, requestedThumbnailSize: u32, thumbnailSize: *SIZE, thumbnailStream: **IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThumbnailStreamCache.VTable, self.vtable).GetThumbnailStream(@ptrCast(*const IThumbnailStreamCache, self), path, cacheId, options, requestedThumbnailSize, thumbnailSize, thumbnailStream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThumbnailStreamCache_SetThumbnailStream(self: *const T, path: [*:0]const u16, cacheId: u64, thumbnailSize: SIZE, thumbnailStream: *IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThumbnailStreamCache.VTable, self.vtable).SetThumbnailStream(@ptrCast(*const IThumbnailStreamCache, self), path, cacheId, thumbnailSize, thumbnailStream);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_TrackShellMenu_Value = @import("../zig.zig").Guid.initString("8278F931-2A3E-11D2-838F-00C04FD918D0");
pub const CLSID_TrackShellMenu = &CLSID_TrackShellMenu_Value;

pub const WINDOWDATA = extern struct {
    dwWindowID: u32,
    uiCP: u32,
    pidl: *ITEMIDLIST,
    lpszUrl: PWSTR,
    lpszUrlLocation: PWSTR,
    lpszTitle: PWSTR,
};

const IID_ITravelLogEntry_Value = @import("../zig.zig").Guid.initString("7EBFDD87-AD18-11D3-A4C5-00C04F72D6B8");
pub const IID_ITravelLogEntry = &IID_ITravelLogEntry_Value;
pub const ITravelLogEntry = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTitle: fn(
            self: *const ITravelLogEntry,
            ppszTitle: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetURL: fn(
            self: *const ITravelLogEntry,
            ppszURL: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLogEntry_GetTitle(self: *const T, ppszTitle: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLogEntry.VTable, self.vtable).GetTitle(@ptrCast(*const ITravelLogEntry, self), ppszTitle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLogEntry_GetURL(self: *const T, ppszURL: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLogEntry.VTable, self.vtable).GetURL(@ptrCast(*const ITravelLogEntry, self), ppszURL);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITravelLogClient_Value = @import("../zig.zig").Guid.initString("241C033E-E659-43DA-AA4D-4086DBC4758D");
pub const IID_ITravelLogClient = &IID_ITravelLogClient_Value;
pub const ITravelLogClient = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindWindowByIndex: fn(
            self: *const ITravelLogClient,
            dwID: u32,
            ppunk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWindowData: fn(
            self: *const ITravelLogClient,
            pStream: *IStream,
            pWinData: *WINDOWDATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadHistoryPosition: fn(
            self: *const ITravelLogClient,
            pszUrlLocation: PWSTR,
            dwPosition: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLogClient_FindWindowByIndex(self: *const T, dwID: u32, ppunk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLogClient.VTable, self.vtable).FindWindowByIndex(@ptrCast(*const ITravelLogClient, self), dwID, ppunk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLogClient_GetWindowData(self: *const T, pStream: *IStream, pWinData: *WINDOWDATA) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLogClient.VTable, self.vtable).GetWindowData(@ptrCast(*const ITravelLogClient, self), pStream, pWinData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLogClient_LoadHistoryPosition(self: *const T, pszUrlLocation: PWSTR, dwPosition: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLogClient.VTable, self.vtable).LoadHistoryPosition(@ptrCast(*const ITravelLogClient, self), pszUrlLocation, dwPosition);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumTravelLogEntry_Value = @import("../zig.zig").Guid.initString("7EBFDD85-AD18-11D3-A4C5-00C04F72D6B8");
pub const IID_IEnumTravelLogEntry = &IID_IEnumTravelLogEntry_Value;
pub const IEnumTravelLogEntry = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumTravelLogEntry,
            cElt: u32,
            rgElt: [*]*ITravelLogEntry,
            pcEltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumTravelLogEntry,
            cElt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumTravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumTravelLogEntry,
            ppEnum: **IEnumTravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumTravelLogEntry_Next(self: *const T, cElt: u32, rgElt: [*]*ITravelLogEntry, pcEltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumTravelLogEntry.VTable, self.vtable).Next(@ptrCast(*const IEnumTravelLogEntry, self), cElt, rgElt, pcEltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumTravelLogEntry_Skip(self: *const T, cElt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumTravelLogEntry.VTable, self.vtable).Skip(@ptrCast(*const IEnumTravelLogEntry, self), cElt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumTravelLogEntry_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumTravelLogEntry.VTable, self.vtable).Reset(@ptrCast(*const IEnumTravelLogEntry, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumTravelLogEntry_Clone(self: *const T, ppEnum: **IEnumTravelLogEntry) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumTravelLogEntry.VTable, self.vtable).Clone(@ptrCast(*const IEnumTravelLogEntry, self), ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const tagTLENUMF = extern enum(i32) {
    TLEF_RELATIVE_INCLUDE_CURRENT = 1,
    TLEF_RELATIVE_BACK = 16,
    TLEF_RELATIVE_FORE = 32,
    TLEF_INCLUDE_UNINVOKEABLE = 64,
    TLEF_ABSOLUTE = 49,
    TLEF_EXCLUDE_SUBFRAME_ENTRIES = 128,
    TLEF_EXCLUDE_ABOUT_PAGES = 256,
};
pub const TLEF_RELATIVE_INCLUDE_CURRENT = tagTLENUMF.TLEF_RELATIVE_INCLUDE_CURRENT;
pub const TLEF_RELATIVE_BACK = tagTLENUMF.TLEF_RELATIVE_BACK;
pub const TLEF_RELATIVE_FORE = tagTLENUMF.TLEF_RELATIVE_FORE;
pub const TLEF_INCLUDE_UNINVOKEABLE = tagTLENUMF.TLEF_INCLUDE_UNINVOKEABLE;
pub const TLEF_ABSOLUTE = tagTLENUMF.TLEF_ABSOLUTE;
pub const TLEF_EXCLUDE_SUBFRAME_ENTRIES = tagTLENUMF.TLEF_EXCLUDE_SUBFRAME_ENTRIES;
pub const TLEF_EXCLUDE_ABOUT_PAGES = tagTLENUMF.TLEF_EXCLUDE_ABOUT_PAGES;

const IID_ITravelLogStg_Value = @import("../zig.zig").Guid.initString("7EBFDD80-AD18-11D3-A4C5-00C04F72D6B8");
pub const IID_ITravelLogStg = &IID_ITravelLogStg_Value;
pub const ITravelLogStg = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateEntry: fn(
            self: *const ITravelLogStg,
            pszUrl: [*:0]const u16,
            pszTitle: [*:0]const u16,
            ptleRelativeTo: *ITravelLogEntry,
            fPrepend: BOOL,
            pptle: **ITravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TravelTo: fn(
            self: *const ITravelLogStg,
            ptle: *ITravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumEntries: fn(
            self: *const ITravelLogStg,
            flags: u32,
            ppenum: **IEnumTravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindEntries: fn(
            self: *const ITravelLogStg,
            flags: u32,
            pszUrl: [*:0]const u16,
            ppenum: **IEnumTravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: fn(
            self: *const ITravelLogStg,
            flags: u32,
            pcEntries: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveEntry: fn(
            self: *const ITravelLogStg,
            ptle: *ITravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRelativeEntry: fn(
            self: *const ITravelLogStg,
            iOffset: i32,
            ptle: **ITravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLogStg_CreateEntry(self: *const T, pszUrl: [*:0]const u16, pszTitle: [*:0]const u16, ptleRelativeTo: *ITravelLogEntry, fPrepend: BOOL, pptle: **ITravelLogEntry) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLogStg.VTable, self.vtable).CreateEntry(@ptrCast(*const ITravelLogStg, self), pszUrl, pszTitle, ptleRelativeTo, fPrepend, pptle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLogStg_TravelTo(self: *const T, ptle: *ITravelLogEntry) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLogStg.VTable, self.vtable).TravelTo(@ptrCast(*const ITravelLogStg, self), ptle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLogStg_EnumEntries(self: *const T, flags: u32, ppenum: **IEnumTravelLogEntry) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLogStg.VTable, self.vtable).EnumEntries(@ptrCast(*const ITravelLogStg, self), flags, ppenum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLogStg_FindEntries(self: *const T, flags: u32, pszUrl: [*:0]const u16, ppenum: **IEnumTravelLogEntry) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLogStg.VTable, self.vtable).FindEntries(@ptrCast(*const ITravelLogStg, self), flags, pszUrl, ppenum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLogStg_GetCount(self: *const T, flags: u32, pcEntries: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLogStg.VTable, self.vtable).GetCount(@ptrCast(*const ITravelLogStg, self), flags, pcEntries);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLogStg_RemoveEntry(self: *const T, ptle: *ITravelLogEntry) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLogStg.VTable, self.vtable).RemoveEntry(@ptrCast(*const ITravelLogStg, self), ptle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLogStg_GetRelativeEntry(self: *const T, iOffset: i32, ptle: **ITravelLogEntry) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLogStg.VTable, self.vtable).GetRelativeEntry(@ptrCast(*const ITravelLogStg, self), iOffset, ptle);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _HLSR_NOREDEF10 = extern enum(i32) {
    HLSR_HOME = 0,
    HLSR_SEARCHPAGE = 1,
    HLSR_HISTORYFOLDER = 2,
};
pub const HLSR_HOME = _HLSR_NOREDEF10.HLSR_HOME;
pub const HLSR_SEARCHPAGE = _HLSR_NOREDEF10.HLSR_SEARCHPAGE;
pub const HLSR_HISTORYFOLDER = _HLSR_NOREDEF10.HLSR_HISTORYFOLDER;

pub const _HLSHORTCUTF__NOREDEF10 = extern enum(i32) {
    HLSHORTCUTF_DEFAULT = 0,
    HLSHORTCUTF_DONTACTUALLYCREATE = 1,
    HLSHORTCUTF_USEFILENAMEFROMFRIENDLYNAME = 2,
    HLSHORTCUTF_USEUNIQUEFILENAME = 4,
    HLSHORTCUTF_MAYUSEEXISTINGSHORTCUT = 8,
};
pub const HLSHORTCUTF_DEFAULT = _HLSHORTCUTF__NOREDEF10.HLSHORTCUTF_DEFAULT;
pub const HLSHORTCUTF_DONTACTUALLYCREATE = _HLSHORTCUTF__NOREDEF10.HLSHORTCUTF_DONTACTUALLYCREATE;
pub const HLSHORTCUTF_USEFILENAMEFROMFRIENDLYNAME = _HLSHORTCUTF__NOREDEF10.HLSHORTCUTF_USEFILENAMEFROMFRIENDLYNAME;
pub const HLSHORTCUTF_USEUNIQUEFILENAME = _HLSHORTCUTF__NOREDEF10.HLSHORTCUTF_USEUNIQUEFILENAME;
pub const HLSHORTCUTF_MAYUSEEXISTINGSHORTCUT = _HLSHORTCUTF__NOREDEF10.HLSHORTCUTF_MAYUSEEXISTINGSHORTCUT;

pub const _HLTRANSLATEF_NOREDEF10 = extern enum(i32) {
    HLTRANSLATEF_DEFAULT = 0,
    HLTRANSLATEF_DONTAPPLYDEFAULTPREFIX = 1,
};
pub const HLTRANSLATEF_DEFAULT = _HLTRANSLATEF_NOREDEF10.HLTRANSLATEF_DEFAULT;
pub const HLTRANSLATEF_DONTAPPLYDEFAULTPREFIX = _HLTRANSLATEF_NOREDEF10.HLTRANSLATEF_DONTAPPLYDEFAULTPREFIX;

pub const __MIDL_IHlink_0001 = extern enum(i32) {
    HLNF_INTERNALJUMP = 1,
    HLNF_OPENINNEWWINDOW = 2,
    HLNF_NAVIGATINGBACK = 4,
    HLNF_NAVIGATINGFORWARD = 8,
    HLNF_NAVIGATINGTOSTACKITEM = 16,
    HLNF_CREATENOHISTORY = 32,
};
pub const HLNF_INTERNALJUMP = __MIDL_IHlink_0001.HLNF_INTERNALJUMP;
pub const HLNF_OPENINNEWWINDOW = __MIDL_IHlink_0001.HLNF_OPENINNEWWINDOW;
pub const HLNF_NAVIGATINGBACK = __MIDL_IHlink_0001.HLNF_NAVIGATINGBACK;
pub const HLNF_NAVIGATINGFORWARD = __MIDL_IHlink_0001.HLNF_NAVIGATINGFORWARD;
pub const HLNF_NAVIGATINGTOSTACKITEM = __MIDL_IHlink_0001.HLNF_NAVIGATINGTOSTACKITEM;
pub const HLNF_CREATENOHISTORY = __MIDL_IHlink_0001.HLNF_CREATENOHISTORY;

pub const __MIDL_IHlink_0002 = extern enum(i32) {
    HLINKGETREF_DEFAULT = 0,
    HLINKGETREF_ABSOLUTE = 1,
    HLINKGETREF_RELATIVE = 2,
};
pub const HLINKGETREF_DEFAULT = __MIDL_IHlink_0002.HLINKGETREF_DEFAULT;
pub const HLINKGETREF_ABSOLUTE = __MIDL_IHlink_0002.HLINKGETREF_ABSOLUTE;
pub const HLINKGETREF_RELATIVE = __MIDL_IHlink_0002.HLINKGETREF_RELATIVE;

pub const __MIDL_IHlink_0003 = extern enum(i32) {
    HLFNAMEF_DEFAULT = 0,
    HLFNAMEF_TRYCACHE = 1,
    HLFNAMEF_TRYPRETTYTARGET = 2,
    HLFNAMEF_TRYFULLTARGET = 4,
    HLFNAMEF_TRYWIN95SHORTCUT = 8,
};
pub const HLFNAMEF_DEFAULT = __MIDL_IHlink_0003.HLFNAMEF_DEFAULT;
pub const HLFNAMEF_TRYCACHE = __MIDL_IHlink_0003.HLFNAMEF_TRYCACHE;
pub const HLFNAMEF_TRYPRETTYTARGET = __MIDL_IHlink_0003.HLFNAMEF_TRYPRETTYTARGET;
pub const HLFNAMEF_TRYFULLTARGET = __MIDL_IHlink_0003.HLFNAMEF_TRYFULLTARGET;
pub const HLFNAMEF_TRYWIN95SHORTCUT = __MIDL_IHlink_0003.HLFNAMEF_TRYWIN95SHORTCUT;

pub const __MIDL_IHlink_0004 = extern enum(i32) {
    HLINKMISC_RELATIVE = 1,
};
pub const HLINKMISC_RELATIVE = __MIDL_IHlink_0004.HLINKMISC_RELATIVE;

pub const __MIDL_IHlink_0005 = extern enum(i32) {
    HLINKSETF_TARGET = 1,
    HLINKSETF_LOCATION = 2,
};
pub const HLINKSETF_TARGET = __MIDL_IHlink_0005.HLINKSETF_TARGET;
pub const HLINKSETF_LOCATION = __MIDL_IHlink_0005.HLINKSETF_LOCATION;

const IID_IHlink_Value = @import("../zig.zig").Guid.initString("79EAC9C3-BAF9-11CE-8C82-00AA004BA90B");
pub const IID_IHlink = &IID_IHlink_Value;
pub const IHlink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetHlinkSite: fn(
            self: *const IHlink,
            pihlSite: *IHlinkSite,
            dwSiteData: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHlinkSite: fn(
            self: *const IHlink,
            ppihlSite: **IHlinkSite,
            pdwSiteData: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMonikerReference: fn(
            self: *const IHlink,
            grfHLSETF: u32,
            pimkTarget: *IMoniker,
            pwzLocation: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMonikerReference: fn(
            self: *const IHlink,
            dwWhichRef: u32,
            ppimkTarget: ?*?*IMoniker,
            ppwzLocation: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStringReference: fn(
            self: *const IHlink,
            grfHLSETF: u32,
            pwzTarget: [*:0]const u16,
            pwzLocation: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringReference: fn(
            self: *const IHlink,
            dwWhichRef: u32,
            ppwzTarget: ?*?PWSTR,
            ppwzLocation: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFriendlyName: fn(
            self: *const IHlink,
            pwzFriendlyName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFriendlyName: fn(
            self: *const IHlink,
            grfHLFNAMEF: u32,
            ppwzFriendlyName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTargetFrameName: fn(
            self: *const IHlink,
            pwzTargetFrameName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTargetFrameName: fn(
            self: *const IHlink,
            ppwzTargetFrameName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMiscStatus: fn(
            self: *const IHlink,
            pdwStatus: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Navigate: fn(
            self: *const IHlink,
            grfHLNF: u32,
            pibc: *IBindCtx,
            pibsc: *IBindStatusCallback,
            pihlbc: *IHlinkBrowseContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAdditionalParams: fn(
            self: *const IHlink,
            pwzAdditionalParams: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAdditionalParams: fn(
            self: *const IHlink,
            ppwzAdditionalParams: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlink_SetHlinkSite(self: *const T, pihlSite: *IHlinkSite, dwSiteData: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlink.VTable, self.vtable).SetHlinkSite(@ptrCast(*const IHlink, self), pihlSite, dwSiteData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlink_GetHlinkSite(self: *const T, ppihlSite: **IHlinkSite, pdwSiteData: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlink.VTable, self.vtable).GetHlinkSite(@ptrCast(*const IHlink, self), ppihlSite, pdwSiteData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlink_SetMonikerReference(self: *const T, grfHLSETF: u32, pimkTarget: *IMoniker, pwzLocation: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlink.VTable, self.vtable).SetMonikerReference(@ptrCast(*const IHlink, self), grfHLSETF, pimkTarget, pwzLocation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlink_GetMonikerReference(self: *const T, dwWhichRef: u32, ppimkTarget: ?*?*IMoniker, ppwzLocation: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlink.VTable, self.vtable).GetMonikerReference(@ptrCast(*const IHlink, self), dwWhichRef, ppimkTarget, ppwzLocation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlink_SetStringReference(self: *const T, grfHLSETF: u32, pwzTarget: [*:0]const u16, pwzLocation: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlink.VTable, self.vtable).SetStringReference(@ptrCast(*const IHlink, self), grfHLSETF, pwzTarget, pwzLocation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlink_GetStringReference(self: *const T, dwWhichRef: u32, ppwzTarget: ?*?PWSTR, ppwzLocation: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlink.VTable, self.vtable).GetStringReference(@ptrCast(*const IHlink, self), dwWhichRef, ppwzTarget, ppwzLocation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlink_SetFriendlyName(self: *const T, pwzFriendlyName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlink.VTable, self.vtable).SetFriendlyName(@ptrCast(*const IHlink, self), pwzFriendlyName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlink_GetFriendlyName(self: *const T, grfHLFNAMEF: u32, ppwzFriendlyName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlink.VTable, self.vtable).GetFriendlyName(@ptrCast(*const IHlink, self), grfHLFNAMEF, ppwzFriendlyName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlink_SetTargetFrameName(self: *const T, pwzTargetFrameName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlink.VTable, self.vtable).SetTargetFrameName(@ptrCast(*const IHlink, self), pwzTargetFrameName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlink_GetTargetFrameName(self: *const T, ppwzTargetFrameName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlink.VTable, self.vtable).GetTargetFrameName(@ptrCast(*const IHlink, self), ppwzTargetFrameName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlink_GetMiscStatus(self: *const T, pdwStatus: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlink.VTable, self.vtable).GetMiscStatus(@ptrCast(*const IHlink, self), pdwStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlink_Navigate(self: *const T, grfHLNF: u32, pibc: *IBindCtx, pibsc: *IBindStatusCallback, pihlbc: *IHlinkBrowseContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlink.VTable, self.vtable).Navigate(@ptrCast(*const IHlink, self), grfHLNF, pibc, pibsc, pihlbc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlink_SetAdditionalParams(self: *const T, pwzAdditionalParams: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlink.VTable, self.vtable).SetAdditionalParams(@ptrCast(*const IHlink, self), pwzAdditionalParams);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlink_GetAdditionalParams(self: *const T, ppwzAdditionalParams: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlink.VTable, self.vtable).GetAdditionalParams(@ptrCast(*const IHlink, self), ppwzAdditionalParams);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const __MIDL_IHlinkSite_0001 = extern enum(i32) {
    HLINKWHICHMK_CONTAINER = 1,
    HLINKWHICHMK_BASE = 2,
};
pub const HLINKWHICHMK_CONTAINER = __MIDL_IHlinkSite_0001.HLINKWHICHMK_CONTAINER;
pub const HLINKWHICHMK_BASE = __MIDL_IHlinkSite_0001.HLINKWHICHMK_BASE;

const IID_IHlinkSite_Value = @import("../zig.zig").Guid.initString("79EAC9C2-BAF9-11CE-8C82-00AA004BA90B");
pub const IID_IHlinkSite = &IID_IHlinkSite_Value;
pub const IHlinkSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryService: fn(
            self: *const IHlinkSite,
            dwSiteData: u32,
            guidService: *const Guid,
            riid: *const Guid,
            ppiunk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMoniker: fn(
            self: *const IHlinkSite,
            dwSiteData: u32,
            dwAssign: u32,
            dwWhich: u32,
            ppimk: **IMoniker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadyToNavigate: fn(
            self: *const IHlinkSite,
            dwSiteData: u32,
            dwReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNavigationComplete: fn(
            self: *const IHlinkSite,
            dwSiteData: u32,
            dwreserved: u32,
            hrError: HRESULT,
            pwzError: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkSite_QueryService(self: *const T, dwSiteData: u32, guidService: *const Guid, riid: *const Guid, ppiunk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkSite.VTable, self.vtable).QueryService(@ptrCast(*const IHlinkSite, self), dwSiteData, guidService, riid, ppiunk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkSite_GetMoniker(self: *const T, dwSiteData: u32, dwAssign: u32, dwWhich: u32, ppimk: **IMoniker) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkSite.VTable, self.vtable).GetMoniker(@ptrCast(*const IHlinkSite, self), dwSiteData, dwAssign, dwWhich, ppimk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkSite_ReadyToNavigate(self: *const T, dwSiteData: u32, dwReserved: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkSite.VTable, self.vtable).ReadyToNavigate(@ptrCast(*const IHlinkSite, self), dwSiteData, dwReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkSite_OnNavigationComplete(self: *const T, dwSiteData: u32, dwreserved: u32, hrError: HRESULT, pwzError: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkSite.VTable, self.vtable).OnNavigationComplete(@ptrCast(*const IHlinkSite, self), dwSiteData, dwreserved, hrError, pwzError);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IHlinkTarget_Value = @import("../zig.zig").Guid.initString("79EAC9C4-BAF9-11CE-8C82-00AA004BA90B");
pub const IID_IHlinkTarget = &IID_IHlinkTarget_Value;
pub const IHlinkTarget = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBrowseContext: fn(
            self: *const IHlinkTarget,
            pihlbc: *IHlinkBrowseContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBrowseContext: fn(
            self: *const IHlinkTarget,
            ppihlbc: **IHlinkBrowseContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Navigate: fn(
            self: *const IHlinkTarget,
            grfHLNF: u32,
            pwzJumpLocation: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMoniker: fn(
            self: *const IHlinkTarget,
            pwzLocation: [*:0]const u16,
            dwAssign: u32,
            ppimkLocation: **IMoniker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFriendlyName: fn(
            self: *const IHlinkTarget,
            pwzLocation: [*:0]const u16,
            ppwzFriendlyName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkTarget_SetBrowseContext(self: *const T, pihlbc: *IHlinkBrowseContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkTarget.VTable, self.vtable).SetBrowseContext(@ptrCast(*const IHlinkTarget, self), pihlbc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkTarget_GetBrowseContext(self: *const T, ppihlbc: **IHlinkBrowseContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkTarget.VTable, self.vtable).GetBrowseContext(@ptrCast(*const IHlinkTarget, self), ppihlbc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkTarget_Navigate(self: *const T, grfHLNF: u32, pwzJumpLocation: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkTarget.VTable, self.vtable).Navigate(@ptrCast(*const IHlinkTarget, self), grfHLNF, pwzJumpLocation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkTarget_GetMoniker(self: *const T, pwzLocation: [*:0]const u16, dwAssign: u32, ppimkLocation: **IMoniker) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkTarget.VTable, self.vtable).GetMoniker(@ptrCast(*const IHlinkTarget, self), pwzLocation, dwAssign, ppimkLocation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkTarget_GetFriendlyName(self: *const T, pwzLocation: [*:0]const u16, ppwzFriendlyName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkTarget.VTable, self.vtable).GetFriendlyName(@ptrCast(*const IHlinkTarget, self), pwzLocation, ppwzFriendlyName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IHlinkFrame_Value = @import("../zig.zig").Guid.initString("79EAC9C5-BAF9-11CE-8C82-00AA004BA90B");
pub const IID_IHlinkFrame = &IID_IHlinkFrame_Value;
pub const IHlinkFrame = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBrowseContext: fn(
            self: *const IHlinkFrame,
            pihlbc: *IHlinkBrowseContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBrowseContext: fn(
            self: *const IHlinkFrame,
            ppihlbc: **IHlinkBrowseContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Navigate: fn(
            self: *const IHlinkFrame,
            grfHLNF: u32,
            pbc: *IBindCtx,
            pibsc: *IBindStatusCallback,
            pihlNavigate: *IHlink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNavigate: fn(
            self: *const IHlinkFrame,
            grfHLNF: u32,
            pimkTarget: *IMoniker,
            pwzLocation: [*:0]const u16,
            pwzFriendlyName: [*:0]const u16,
            dwreserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateHlink: fn(
            self: *const IHlinkFrame,
            uHLID: u32,
            pimkTarget: *IMoniker,
            pwzLocation: [*:0]const u16,
            pwzFriendlyName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkFrame_SetBrowseContext(self: *const T, pihlbc: *IHlinkBrowseContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkFrame.VTable, self.vtable).SetBrowseContext(@ptrCast(*const IHlinkFrame, self), pihlbc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkFrame_GetBrowseContext(self: *const T, ppihlbc: **IHlinkBrowseContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkFrame.VTable, self.vtable).GetBrowseContext(@ptrCast(*const IHlinkFrame, self), ppihlbc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkFrame_Navigate(self: *const T, grfHLNF: u32, pbc: *IBindCtx, pibsc: *IBindStatusCallback, pihlNavigate: *IHlink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkFrame.VTable, self.vtable).Navigate(@ptrCast(*const IHlinkFrame, self), grfHLNF, pbc, pibsc, pihlNavigate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkFrame_OnNavigate(self: *const T, grfHLNF: u32, pimkTarget: *IMoniker, pwzLocation: [*:0]const u16, pwzFriendlyName: [*:0]const u16, dwreserved: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkFrame.VTable, self.vtable).OnNavigate(@ptrCast(*const IHlinkFrame, self), grfHLNF, pimkTarget, pwzLocation, pwzFriendlyName, dwreserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkFrame_UpdateHlink(self: *const T, uHLID: u32, pimkTarget: *IMoniker, pwzLocation: [*:0]const u16, pwzFriendlyName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkFrame.VTable, self.vtable).UpdateHlink(@ptrCast(*const IHlinkFrame, self), uHLID, pimkTarget, pwzLocation, pwzFriendlyName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const HLITEM = extern struct {
    uHLID: u32,
    pwzFriendlyName: PWSTR,
};

const IID_IEnumHLITEM_Value = @import("../zig.zig").Guid.initString("79EAC9C6-BAF9-11CE-8C82-00AA004BA90B");
pub const IID_IEnumHLITEM = &IID_IEnumHLITEM_Value;
pub const IEnumHLITEM = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumHLITEM,
            celt: u32,
            rgelt: *HLITEM,
            pceltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumHLITEM,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumHLITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumHLITEM,
            ppienumhlitem: **IEnumHLITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumHLITEM_Next(self: *const T, celt: u32, rgelt: *HLITEM, pceltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumHLITEM.VTable, self.vtable).Next(@ptrCast(*const IEnumHLITEM, self), celt, rgelt, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumHLITEM_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumHLITEM.VTable, self.vtable).Skip(@ptrCast(*const IEnumHLITEM, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumHLITEM_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumHLITEM.VTable, self.vtable).Reset(@ptrCast(*const IEnumHLITEM, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumHLITEM_Clone(self: *const T, ppienumhlitem: **IEnumHLITEM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumHLITEM.VTable, self.vtable).Clone(@ptrCast(*const IEnumHLITEM, self), ppienumhlitem);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const __MIDL_IHlinkBrowseContext_0001 = extern enum(i32) {
    HLTB_DOCKEDLEFT = 0,
    HLTB_DOCKEDTOP = 1,
    HLTB_DOCKEDRIGHT = 2,
    HLTB_DOCKEDBOTTOM = 3,
    HLTB_FLOATING = 4,
};
pub const HLTB_DOCKEDLEFT = __MIDL_IHlinkBrowseContext_0001.HLTB_DOCKEDLEFT;
pub const HLTB_DOCKEDTOP = __MIDL_IHlinkBrowseContext_0001.HLTB_DOCKEDTOP;
pub const HLTB_DOCKEDRIGHT = __MIDL_IHlinkBrowseContext_0001.HLTB_DOCKEDRIGHT;
pub const HLTB_DOCKEDBOTTOM = __MIDL_IHlinkBrowseContext_0001.HLTB_DOCKEDBOTTOM;
pub const HLTB_FLOATING = __MIDL_IHlinkBrowseContext_0001.HLTB_FLOATING;

pub const HLTBINFO = extern struct {
    uDockType: u32,
    rcTbPos: RECT,
};

pub const __MIDL_IHlinkBrowseContext_0002 = extern enum(i32) {
    HLBWIF_HASFRAMEWNDINFO = 1,
    HLBWIF_HASDOCWNDINFO = 2,
    HLBWIF_FRAMEWNDMAXIMIZED = 4,
    HLBWIF_DOCWNDMAXIMIZED = 8,
    HLBWIF_HASWEBTOOLBARINFO = 16,
    HLBWIF_WEBTOOLBARHIDDEN = 32,
};
pub const HLBWIF_HASFRAMEWNDINFO = __MIDL_IHlinkBrowseContext_0002.HLBWIF_HASFRAMEWNDINFO;
pub const HLBWIF_HASDOCWNDINFO = __MIDL_IHlinkBrowseContext_0002.HLBWIF_HASDOCWNDINFO;
pub const HLBWIF_FRAMEWNDMAXIMIZED = __MIDL_IHlinkBrowseContext_0002.HLBWIF_FRAMEWNDMAXIMIZED;
pub const HLBWIF_DOCWNDMAXIMIZED = __MIDL_IHlinkBrowseContext_0002.HLBWIF_DOCWNDMAXIMIZED;
pub const HLBWIF_HASWEBTOOLBARINFO = __MIDL_IHlinkBrowseContext_0002.HLBWIF_HASWEBTOOLBARINFO;
pub const HLBWIF_WEBTOOLBARHIDDEN = __MIDL_IHlinkBrowseContext_0002.HLBWIF_WEBTOOLBARHIDDEN;

pub const HLBWINFO = extern struct {
    cbSize: u32,
    grfHLBWIF: u32,
    rcFramePos: RECT,
    rcDocPos: RECT,
    hltbinfo: HLTBINFO,
};

pub const __MIDL_IHlinkBrowseContext_0003 = extern enum(i32) {
    HLID_INVALID = 0,
    HLID_PREVIOUS = -1,
    HLID_NEXT = -2,
    HLID_CURRENT = -3,
    HLID_STACKBOTTOM = -4,
    HLID_STACKTOP = -5,
};
pub const HLID_INVALID = __MIDL_IHlinkBrowseContext_0003.HLID_INVALID;
pub const HLID_PREVIOUS = __MIDL_IHlinkBrowseContext_0003.HLID_PREVIOUS;
pub const HLID_NEXT = __MIDL_IHlinkBrowseContext_0003.HLID_NEXT;
pub const HLID_CURRENT = __MIDL_IHlinkBrowseContext_0003.HLID_CURRENT;
pub const HLID_STACKBOTTOM = __MIDL_IHlinkBrowseContext_0003.HLID_STACKBOTTOM;
pub const HLID_STACKTOP = __MIDL_IHlinkBrowseContext_0003.HLID_STACKTOP;

pub const __MIDL_IHlinkBrowseContext_0004 = extern enum(i32) {
    HLQF_ISVALID = 1,
    HLQF_ISCURRENT = 2,
};
pub const HLQF_ISVALID = __MIDL_IHlinkBrowseContext_0004.HLQF_ISVALID;
pub const HLQF_ISCURRENT = __MIDL_IHlinkBrowseContext_0004.HLQF_ISCURRENT;

const IID_IHlinkBrowseContext_Value = @import("../zig.zig").Guid.initString("79EAC9C7-BAF9-11CE-8C82-00AA004BA90B");
pub const IID_IHlinkBrowseContext = &IID_IHlinkBrowseContext_Value;
pub const IHlinkBrowseContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Register: fn(
            self: *const IHlinkBrowseContext,
            reserved: u32,
            piunk: *IUnknown,
            pimk: *IMoniker,
            pdwRegister: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObject: fn(
            self: *const IHlinkBrowseContext,
            pimk: *IMoniker,
            fBindIfRootRegistered: BOOL,
            ppiunk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Revoke: fn(
            self: *const IHlinkBrowseContext,
            dwRegister: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBrowseWindowInfo: fn(
            self: *const IHlinkBrowseContext,
            phlbwi: *HLBWINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBrowseWindowInfo: fn(
            self: *const IHlinkBrowseContext,
            phlbwi: *HLBWINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInitialHlink: fn(
            self: *const IHlinkBrowseContext,
            pimkTarget: *IMoniker,
            pwzLocation: [*:0]const u16,
            pwzFriendlyName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNavigateHlink: fn(
            self: *const IHlinkBrowseContext,
            grfHLNF: u32,
            pimkTarget: *IMoniker,
            pwzLocation: [*:0]const u16,
            pwzFriendlyName: [*:0]const u16,
            puHLID: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateHlink: fn(
            self: *const IHlinkBrowseContext,
            uHLID: u32,
            pimkTarget: *IMoniker,
            pwzLocation: [*:0]const u16,
            pwzFriendlyName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumNavigationStack: fn(
            self: *const IHlinkBrowseContext,
            dwReserved: u32,
            grfHLFNAMEF: u32,
            ppienumhlitem: **IEnumHLITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryHlink: fn(
            self: *const IHlinkBrowseContext,
            grfHLQF: u32,
            uHLID: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHlink: fn(
            self: *const IHlinkBrowseContext,
            uHLID: u32,
            ppihl: **IHlink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCurrentHlink: fn(
            self: *const IHlinkBrowseContext,
            uHLID: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IHlinkBrowseContext,
            piunkOuter: *IUnknown,
            riid: *const Guid,
            ppiunkObj: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IHlinkBrowseContext,
            reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkBrowseContext_Register(self: *const T, reserved: u32, piunk: *IUnknown, pimk: *IMoniker, pdwRegister: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkBrowseContext.VTable, self.vtable).Register(@ptrCast(*const IHlinkBrowseContext, self), reserved, piunk, pimk, pdwRegister);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkBrowseContext_GetObject(self: *const T, pimk: *IMoniker, fBindIfRootRegistered: BOOL, ppiunk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkBrowseContext.VTable, self.vtable).GetObject(@ptrCast(*const IHlinkBrowseContext, self), pimk, fBindIfRootRegistered, ppiunk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkBrowseContext_Revoke(self: *const T, dwRegister: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkBrowseContext.VTable, self.vtable).Revoke(@ptrCast(*const IHlinkBrowseContext, self), dwRegister);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkBrowseContext_SetBrowseWindowInfo(self: *const T, phlbwi: *HLBWINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkBrowseContext.VTable, self.vtable).SetBrowseWindowInfo(@ptrCast(*const IHlinkBrowseContext, self), phlbwi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkBrowseContext_GetBrowseWindowInfo(self: *const T, phlbwi: *HLBWINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkBrowseContext.VTable, self.vtable).GetBrowseWindowInfo(@ptrCast(*const IHlinkBrowseContext, self), phlbwi);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkBrowseContext_SetInitialHlink(self: *const T, pimkTarget: *IMoniker, pwzLocation: [*:0]const u16, pwzFriendlyName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkBrowseContext.VTable, self.vtable).SetInitialHlink(@ptrCast(*const IHlinkBrowseContext, self), pimkTarget, pwzLocation, pwzFriendlyName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkBrowseContext_OnNavigateHlink(self: *const T, grfHLNF: u32, pimkTarget: *IMoniker, pwzLocation: [*:0]const u16, pwzFriendlyName: [*:0]const u16, puHLID: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkBrowseContext.VTable, self.vtable).OnNavigateHlink(@ptrCast(*const IHlinkBrowseContext, self), grfHLNF, pimkTarget, pwzLocation, pwzFriendlyName, puHLID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkBrowseContext_UpdateHlink(self: *const T, uHLID: u32, pimkTarget: *IMoniker, pwzLocation: [*:0]const u16, pwzFriendlyName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkBrowseContext.VTable, self.vtable).UpdateHlink(@ptrCast(*const IHlinkBrowseContext, self), uHLID, pimkTarget, pwzLocation, pwzFriendlyName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkBrowseContext_EnumNavigationStack(self: *const T, dwReserved: u32, grfHLFNAMEF: u32, ppienumhlitem: **IEnumHLITEM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkBrowseContext.VTable, self.vtable).EnumNavigationStack(@ptrCast(*const IHlinkBrowseContext, self), dwReserved, grfHLFNAMEF, ppienumhlitem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkBrowseContext_QueryHlink(self: *const T, grfHLQF: u32, uHLID: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkBrowseContext.VTable, self.vtable).QueryHlink(@ptrCast(*const IHlinkBrowseContext, self), grfHLQF, uHLID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkBrowseContext_GetHlink(self: *const T, uHLID: u32, ppihl: **IHlink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkBrowseContext.VTable, self.vtable).GetHlink(@ptrCast(*const IHlinkBrowseContext, self), uHLID, ppihl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkBrowseContext_SetCurrentHlink(self: *const T, uHLID: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkBrowseContext.VTable, self.vtable).SetCurrentHlink(@ptrCast(*const IHlinkBrowseContext, self), uHLID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkBrowseContext_Clone(self: *const T, piunkOuter: *IUnknown, riid: *const Guid, ppiunkObj: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkBrowseContext.VTable, self.vtable).Clone(@ptrCast(*const IHlinkBrowseContext, self), piunkOuter, riid, ppiunkObj);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHlinkBrowseContext_Close(self: *const T, reserved: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHlinkBrowseContext.VTable, self.vtable).Close(@ptrCast(*const IHlinkBrowseContext, self), reserved);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IExtensionServices_Value = @import("../zig.zig").Guid.initString("79EAC9CB-BAF9-11CE-8C82-00AA004BA90B");
pub const IID_IExtensionServices = &IID_IExtensionServices_Value;
pub const IExtensionServices = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAdditionalHeaders: fn(
            self: *const IExtensionServices,
            pwzAdditionalHeaders: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAuthenticateData: fn(
            self: *const IExtensionServices,
            phwnd: HWND,
            pwzUsername: [*:0]const u16,
            pwzPassword: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExtensionServices_SetAdditionalHeaders(self: *const T, pwzAdditionalHeaders: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExtensionServices.VTable, self.vtable).SetAdditionalHeaders(@ptrCast(*const IExtensionServices, self), pwzAdditionalHeaders);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExtensionServices_SetAuthenticateData(self: *const T, phwnd: HWND, pwzUsername: [*:0]const u16, pwzPassword: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExtensionServices.VTable, self.vtable).SetAuthenticateData(@ptrCast(*const IExtensionServices, self), phwnd, pwzUsername, pwzPassword);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITravelEntry_Value = @import("../zig.zig").Guid.initString("F46EDB3B-BC2F-11D0-9412-00AA00A3EBD3");
pub const IID_ITravelEntry = &IID_ITravelEntry_Value;
pub const ITravelEntry = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Invoke: fn(
            self: *const ITravelEntry,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: fn(
            self: *const ITravelEntry,
            punk: ?*IUnknown,
            fIsLocalAnchor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPidl: fn(
            self: *const ITravelEntry,
            ppidl: **ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelEntry_Invoke(self: *const T, punk: ?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelEntry.VTable, self.vtable).Invoke(@ptrCast(*const ITravelEntry, self), punk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelEntry_Update(self: *const T, punk: ?*IUnknown, fIsLocalAnchor: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelEntry.VTable, self.vtable).Update(@ptrCast(*const ITravelEntry, self), punk, fIsLocalAnchor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelEntry_GetPidl(self: *const T, ppidl: **ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelEntry.VTable, self.vtable).GetPidl(@ptrCast(*const ITravelEntry, self), ppidl);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITravelLog_Value = @import("../zig.zig").Guid.initString("66A9CB08-4802-11D2-A561-00A0C92DBFE8");
pub const IID_ITravelLog = &IID_ITravelLog_Value;
pub const ITravelLog = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddEntry: fn(
            self: *const ITravelLog,
            punk: ?*IUnknown,
            fIsLocalAnchor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateEntry: fn(
            self: *const ITravelLog,
            punk: ?*IUnknown,
            fIsLocalAnchor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateExternal: fn(
            self: *const ITravelLog,
            punk: ?*IUnknown,
            punkHLBrowseContext: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Travel: fn(
            self: *const ITravelLog,
            punk: ?*IUnknown,
            iOffset: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTravelEntry: fn(
            self: *const ITravelLog,
            punk: *IUnknown,
            iOffset: i32,
            ppte: ?*?*ITravelEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindTravelEntry: fn(
            self: *const ITravelLog,
            punk: ?*IUnknown,
            pidl: *ITEMIDLIST,
            ppte: **ITravelEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetToolTipText: fn(
            self: *const ITravelLog,
            punk: ?*IUnknown,
            iOffset: i32,
            idsTemplate: i32,
            pwzText: [*:0]u16,
            cchText: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertMenuEntries: fn(
            self: *const ITravelLog,
            punk: ?*IUnknown,
            hmenu: HMENU,
            nPos: i32,
            idFirst: i32,
            idLast: i32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const ITravelLog,
            pptl: **ITravelLog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CountEntries: fn(
            self: *const ITravelLog,
            punk: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        Revert: fn(
            self: *const ITravelLog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLog_AddEntry(self: *const T, punk: ?*IUnknown, fIsLocalAnchor: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLog.VTable, self.vtable).AddEntry(@ptrCast(*const ITravelLog, self), punk, fIsLocalAnchor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLog_UpdateEntry(self: *const T, punk: ?*IUnknown, fIsLocalAnchor: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLog.VTable, self.vtable).UpdateEntry(@ptrCast(*const ITravelLog, self), punk, fIsLocalAnchor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLog_UpdateExternal(self: *const T, punk: ?*IUnknown, punkHLBrowseContext: ?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLog.VTable, self.vtable).UpdateExternal(@ptrCast(*const ITravelLog, self), punk, punkHLBrowseContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLog_Travel(self: *const T, punk: ?*IUnknown, iOffset: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLog.VTable, self.vtable).Travel(@ptrCast(*const ITravelLog, self), punk, iOffset);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLog_GetTravelEntry(self: *const T, punk: *IUnknown, iOffset: i32, ppte: ?*?*ITravelEntry) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLog.VTable, self.vtable).GetTravelEntry(@ptrCast(*const ITravelLog, self), punk, iOffset, ppte);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLog_FindTravelEntry(self: *const T, punk: ?*IUnknown, pidl: *ITEMIDLIST, ppte: **ITravelEntry) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLog.VTable, self.vtable).FindTravelEntry(@ptrCast(*const ITravelLog, self), punk, pidl, ppte);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLog_GetToolTipText(self: *const T, punk: ?*IUnknown, iOffset: i32, idsTemplate: i32, pwzText: [*:0]u16, cchText: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLog.VTable, self.vtable).GetToolTipText(@ptrCast(*const ITravelLog, self), punk, iOffset, idsTemplate, pwzText, cchText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLog_InsertMenuEntries(self: *const T, punk: ?*IUnknown, hmenu: HMENU, nPos: i32, idFirst: i32, idLast: i32, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLog.VTable, self.vtable).InsertMenuEntries(@ptrCast(*const ITravelLog, self), punk, hmenu, nPos, idFirst, idLast, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLog_Clone(self: *const T, pptl: **ITravelLog) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLog.VTable, self.vtable).Clone(@ptrCast(*const ITravelLog, self), pptl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLog_CountEntries(self: *const T, punk: *IUnknown) callconv(.Inline) u32 {
            return @ptrCast(*const ITravelLog.VTable, self.vtable).CountEntries(@ptrCast(*const ITravelLog, self), punk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITravelLog_Revert(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITravelLog.VTable, self.vtable).Revert(@ptrCast(*const ITravelLog, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CIE4ConnectionPoint = extern struct {
    pub const VTable = extern struct {
        base: IConnectionPoint.VTable,
        DoInvokeIE4: fn(
            self: *const CIE4ConnectionPoint,
            pf: *BOOL,
            ppv: **c_void,
            dispid: i32,
            pdispparams: *DISPPARAMS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoInvokePIDLIE4: fn(
            self: *const CIE4ConnectionPoint,
            dispid: i32,
            pidl: *ITEMIDLIST,
            fCanCancel: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IConnectionPoint.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn CIE4ConnectionPoint_DoInvokeIE4(self: *const T, pf: *BOOL, ppv: **c_void, dispid: i32, pdispparams: *DISPPARAMS) callconv(.Inline) HRESULT {
            return @ptrCast(*const CIE4ConnectionPoint.VTable, self.vtable).DoInvokeIE4(@ptrCast(*const CIE4ConnectionPoint, self), pf, ppv, dispid, pdispparams);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn CIE4ConnectionPoint_DoInvokePIDLIE4(self: *const T, dispid: i32, pidl: *ITEMIDLIST, fCanCancel: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const CIE4ConnectionPoint.VTable, self.vtable).DoInvokePIDLIE4(@ptrCast(*const CIE4ConnectionPoint, self), dispid, pidl, fCanCancel);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IExpDispSupportXP_Value = @import("../zig.zig").Guid.initString("2F0DD58C-F789-4F14-99FB-9293B3C9C212");
pub const IID_IExpDispSupportXP = &IID_IExpDispSupportXP_Value;
pub const IExpDispSupportXP = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindCIE4ConnectionPoint: fn(
            self: *const IExpDispSupportXP,
            riid: *const Guid,
            ppccp: **CIE4ConnectionPoint,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTranslateAccelerator: fn(
            self: *const IExpDispSupportXP,
            pMsg: *MSG,
            grfModifiers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInvoke: fn(
            self: *const IExpDispSupportXP,
            dispidMember: i32,
            iid: *const Guid,
            lcid: u32,
            wFlags: u16,
            pdispparams: *DISPPARAMS,
            pVarResult: *VARIANT,
            pexcepinfo: *EXCEPINFO,
            puArgErr: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExpDispSupportXP_FindCIE4ConnectionPoint(self: *const T, riid: *const Guid, ppccp: **CIE4ConnectionPoint) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExpDispSupportXP.VTable, self.vtable).FindCIE4ConnectionPoint(@ptrCast(*const IExpDispSupportXP, self), riid, ppccp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExpDispSupportXP_OnTranslateAccelerator(self: *const T, pMsg: *MSG, grfModifiers: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExpDispSupportXP.VTable, self.vtable).OnTranslateAccelerator(@ptrCast(*const IExpDispSupportXP, self), pMsg, grfModifiers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExpDispSupportXP_OnInvoke(self: *const T, dispidMember: i32, iid: *const Guid, lcid: u32, wFlags: u16, pdispparams: *DISPPARAMS, pVarResult: *VARIANT, pexcepinfo: *EXCEPINFO, puArgErr: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExpDispSupportXP.VTable, self.vtable).OnInvoke(@ptrCast(*const IExpDispSupportXP, self), dispidMember, iid, lcid, wFlags, pdispparams, pVarResult, pexcepinfo, puArgErr);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IExpDispSupport_Value = @import("../zig.zig").Guid.initString("0D7D1D00-6FC0-11D0-A974-00C04FD705A2");
pub const IID_IExpDispSupport = &IID_IExpDispSupport_Value;
pub const IExpDispSupport = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindConnectionPoint: fn(
            self: *const IExpDispSupport,
            riid: *const Guid,
            ppccp: **IConnectionPoint,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTranslateAccelerator: fn(
            self: *const IExpDispSupport,
            pMsg: *MSG,
            grfModifiers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInvoke: fn(
            self: *const IExpDispSupport,
            dispidMember: i32,
            iid: *const Guid,
            lcid: u32,
            wFlags: u16,
            pdispparams: *DISPPARAMS,
            pVarResult: *VARIANT,
            pexcepinfo: *EXCEPINFO,
            puArgErr: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExpDispSupport_FindConnectionPoint(self: *const T, riid: *const Guid, ppccp: **IConnectionPoint) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExpDispSupport.VTable, self.vtable).FindConnectionPoint(@ptrCast(*const IExpDispSupport, self), riid, ppccp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExpDispSupport_OnTranslateAccelerator(self: *const T, pMsg: *MSG, grfModifiers: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExpDispSupport.VTable, self.vtable).OnTranslateAccelerator(@ptrCast(*const IExpDispSupport, self), pMsg, grfModifiers);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IExpDispSupport_OnInvoke(self: *const T, dispidMember: i32, iid: *const Guid, lcid: u32, wFlags: u16, pdispparams: *DISPPARAMS, pVarResult: *VARIANT, pexcepinfo: *EXCEPINFO, puArgErr: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IExpDispSupport.VTable, self.vtable).OnInvoke(@ptrCast(*const IExpDispSupport, self), dispidMember, iid, lcid, wFlags, pdispparams, pVarResult, pexcepinfo, puArgErr);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const BNSTATE = extern enum(i32) {
    BNS_NORMAL = 0,
    BNS_BEGIN_NAVIGATE = 1,
    BNS_NAVIGATE = 2,
};
pub const BNS_NORMAL = BNSTATE.BNS_NORMAL;
pub const BNS_BEGIN_NAVIGATE = BNSTATE.BNS_BEGIN_NAVIGATE;
pub const BNS_NAVIGATE = BNSTATE.BNS_NAVIGATE;

pub const SHELLBROWSERSHOWCONTROL = extern enum(i32) {
    SBSC_HIDE = 0,
    SBSC_SHOW = 1,
    SBSC_TOGGLE = 2,
    SBSC_QUERY = 3,
};
pub const SBSC_HIDE = SHELLBROWSERSHOWCONTROL.SBSC_HIDE;
pub const SBSC_SHOW = SHELLBROWSERSHOWCONTROL.SBSC_SHOW;
pub const SBSC_TOGGLE = SHELLBROWSERSHOWCONTROL.SBSC_TOGGLE;
pub const SBSC_QUERY = SHELLBROWSERSHOWCONTROL.SBSC_QUERY;

const IID_IBrowserService_Value = @import("../zig.zig").Guid.initString("02BA3B52-0547-11D1-B833-00C04FC9B31F");
pub const IID_IBrowserService = &IID_IBrowserService_Value;
pub const IBrowserService = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetParentSite: fn(
            self: *const IBrowserService,
            ppipsite: **IOleInPlaceSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTitle: fn(
            self: *const IBrowserService,
            psv: *IShellView,
            pszName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTitle: fn(
            self: *const IBrowserService,
            psv: *IShellView,
            pszName: [*:0]u16,
            cchName: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOleObject: fn(
            self: *const IBrowserService,
            ppobjv: **IOleObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTravelLog: fn(
            self: *const IBrowserService,
            pptl: **ITravelLog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowControlWindow: fn(
            self: *const IBrowserService,
            id: u32,
            fShow: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsControlWindowShown: fn(
            self: *const IBrowserService,
            id: u32,
            pfShown: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IEGetDisplayName: fn(
            self: *const IBrowserService,
            pidl: *ITEMIDLIST,
            pwszName: PWSTR,
            uFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IEParseDisplayName: fn(
            self: *const IBrowserService,
            uiCP: u32,
            pwszPath: [*:0]const u16,
            ppidlOut: **ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisplayParseError: fn(
            self: *const IBrowserService,
            hres: HRESULT,
            pwszPath: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NavigateToPidl: fn(
            self: *const IBrowserService,
            pidl: *ITEMIDLIST,
            grfHLNF: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNavigateState: fn(
            self: *const IBrowserService,
            bnstate: BNSTATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNavigateState: fn(
            self: *const IBrowserService,
            pbnstate: *BNSTATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyRedirect: fn(
            self: *const IBrowserService,
            psv: *IShellView,
            pidl: *ITEMIDLIST,
            pfDidBrowse: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateWindowList: fn(
            self: *const IBrowserService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateBackForwardState: fn(
            self: *const IBrowserService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFlags: fn(
            self: *const IBrowserService,
            dwFlags: u32,
            dwFlagMask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: fn(
            self: *const IBrowserService,
            pdwFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanNavigateNow: fn(
            self: *const IBrowserService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPidl: fn(
            self: *const IBrowserService,
            ppidl: **ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReferrer: fn(
            self: *const IBrowserService,
            pidl: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBrowserIndex: fn(
            self: *const IBrowserService,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetBrowserByIndex: fn(
            self: *const IBrowserService,
            dwID: u32,
            ppunk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHistoryObject: fn(
            self: *const IBrowserService,
            ppole: **IOleObject,
            pstm: **IStream,
            ppbc: **IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHistoryObject: fn(
            self: *const IBrowserService,
            pole: *IOleObject,
            fIsLocalAnchor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CacheOLEServer: fn(
            self: *const IBrowserService,
            pole: *IOleObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSetCodePage: fn(
            self: *const IBrowserService,
            pvarIn: *VARIANT,
            pvarOut: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnHttpEquiv: fn(
            self: *const IBrowserService,
            psv: *IShellView,
            fDone: BOOL,
            pvarargIn: *VARIANT,
            pvarargOut: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPalette: fn(
            self: *const IBrowserService,
            hpal: *HPALETTE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterWindow: fn(
            self: *const IBrowserService,
            fForceRegister: BOOL,
            swc: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_GetParentSite(self: *const T, ppipsite: **IOleInPlaceSite) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).GetParentSite(@ptrCast(*const IBrowserService, self), ppipsite);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_SetTitle(self: *const T, psv: *IShellView, pszName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).SetTitle(@ptrCast(*const IBrowserService, self), psv, pszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_GetTitle(self: *const T, psv: *IShellView, pszName: [*:0]u16, cchName: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).GetTitle(@ptrCast(*const IBrowserService, self), psv, pszName, cchName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_GetOleObject(self: *const T, ppobjv: **IOleObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).GetOleObject(@ptrCast(*const IBrowserService, self), ppobjv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_GetTravelLog(self: *const T, pptl: **ITravelLog) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).GetTravelLog(@ptrCast(*const IBrowserService, self), pptl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_ShowControlWindow(self: *const T, id: u32, fShow: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).ShowControlWindow(@ptrCast(*const IBrowserService, self), id, fShow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_IsControlWindowShown(self: *const T, id: u32, pfShown: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).IsControlWindowShown(@ptrCast(*const IBrowserService, self), id, pfShown);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_IEGetDisplayName(self: *const T, pidl: *ITEMIDLIST, pwszName: PWSTR, uFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).IEGetDisplayName(@ptrCast(*const IBrowserService, self), pidl, pwszName, uFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_IEParseDisplayName(self: *const T, uiCP: u32, pwszPath: [*:0]const u16, ppidlOut: **ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).IEParseDisplayName(@ptrCast(*const IBrowserService, self), uiCP, pwszPath, ppidlOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_DisplayParseError(self: *const T, hres: HRESULT, pwszPath: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).DisplayParseError(@ptrCast(*const IBrowserService, self), hres, pwszPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_NavigateToPidl(self: *const T, pidl: *ITEMIDLIST, grfHLNF: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).NavigateToPidl(@ptrCast(*const IBrowserService, self), pidl, grfHLNF);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_SetNavigateState(self: *const T, bnstate: BNSTATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).SetNavigateState(@ptrCast(*const IBrowserService, self), bnstate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_GetNavigateState(self: *const T, pbnstate: *BNSTATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).GetNavigateState(@ptrCast(*const IBrowserService, self), pbnstate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_NotifyRedirect(self: *const T, psv: *IShellView, pidl: *ITEMIDLIST, pfDidBrowse: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).NotifyRedirect(@ptrCast(*const IBrowserService, self), psv, pidl, pfDidBrowse);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_UpdateWindowList(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).UpdateWindowList(@ptrCast(*const IBrowserService, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_UpdateBackForwardState(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).UpdateBackForwardState(@ptrCast(*const IBrowserService, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_SetFlags(self: *const T, dwFlags: u32, dwFlagMask: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).SetFlags(@ptrCast(*const IBrowserService, self), dwFlags, dwFlagMask);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_GetFlags(self: *const T, pdwFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).GetFlags(@ptrCast(*const IBrowserService, self), pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_CanNavigateNow(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).CanNavigateNow(@ptrCast(*const IBrowserService, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_GetPidl(self: *const T, ppidl: **ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).GetPidl(@ptrCast(*const IBrowserService, self), ppidl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_SetReferrer(self: *const T, pidl: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).SetReferrer(@ptrCast(*const IBrowserService, self), pidl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_GetBrowserIndex(self: *const T) callconv(.Inline) u32 {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).GetBrowserIndex(@ptrCast(*const IBrowserService, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_GetBrowserByIndex(self: *const T, dwID: u32, ppunk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).GetBrowserByIndex(@ptrCast(*const IBrowserService, self), dwID, ppunk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_GetHistoryObject(self: *const T, ppole: **IOleObject, pstm: **IStream, ppbc: **IBindCtx) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).GetHistoryObject(@ptrCast(*const IBrowserService, self), ppole, pstm, ppbc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_SetHistoryObject(self: *const T, pole: *IOleObject, fIsLocalAnchor: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).SetHistoryObject(@ptrCast(*const IBrowserService, self), pole, fIsLocalAnchor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_CacheOLEServer(self: *const T, pole: *IOleObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).CacheOLEServer(@ptrCast(*const IBrowserService, self), pole);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_GetSetCodePage(self: *const T, pvarIn: *VARIANT, pvarOut: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).GetSetCodePage(@ptrCast(*const IBrowserService, self), pvarIn, pvarOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_OnHttpEquiv(self: *const T, psv: *IShellView, fDone: BOOL, pvarargIn: *VARIANT, pvarargOut: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).OnHttpEquiv(@ptrCast(*const IBrowserService, self), psv, fDone, pvarargIn, pvarargOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_GetPalette(self: *const T, hpal: *HPALETTE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).GetPalette(@ptrCast(*const IBrowserService, self), hpal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService_RegisterWindow(self: *const T, fForceRegister: BOOL, swc: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService.VTable, self.vtable).RegisterWindow(@ptrCast(*const IBrowserService, self), fForceRegister, swc);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellService_Value = @import("../zig.zig").Guid.initString("5836FB00-8187-11CF-A12B-00AA004AE837");
pub const IID_IShellService = &IID_IShellService_Value;
pub const IShellService = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetOwner: fn(
            self: *const IShellService,
            punkOwner: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellService_SetOwner(self: *const T, punkOwner: ?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellService.VTable, self.vtable).SetOwner(@ptrCast(*const IShellService, self), punkOwner);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SECURELOCKCODE = extern enum(i32) {
    SECURELOCK_NOCHANGE = -1,
    SECURELOCK_SET_UNSECURE = 0,
    SECURELOCK_SET_MIXED = 1,
    SECURELOCK_SET_SECUREUNKNOWNBIT = 2,
    SECURELOCK_SET_SECURE40BIT = 3,
    SECURELOCK_SET_SECURE56BIT = 4,
    SECURELOCK_SET_FORTEZZA = 5,
    SECURELOCK_SET_SECURE128BIT = 6,
    SECURELOCK_FIRSTSUGGEST = 7,
    SECURELOCK_SUGGEST_UNSECURE = 7,
    SECURELOCK_SUGGEST_MIXED = 8,
    SECURELOCK_SUGGEST_SECUREUNKNOWNBIT = 9,
    SECURELOCK_SUGGEST_SECURE40BIT = 10,
    SECURELOCK_SUGGEST_SECURE56BIT = 11,
    SECURELOCK_SUGGEST_FORTEZZA = 12,
    SECURELOCK_SUGGEST_SECURE128BIT = 13,
};
pub const SECURELOCK_NOCHANGE = SECURELOCKCODE.SECURELOCK_NOCHANGE;
pub const SECURELOCK_SET_UNSECURE = SECURELOCKCODE.SECURELOCK_SET_UNSECURE;
pub const SECURELOCK_SET_MIXED = SECURELOCKCODE.SECURELOCK_SET_MIXED;
pub const SECURELOCK_SET_SECUREUNKNOWNBIT = SECURELOCKCODE.SECURELOCK_SET_SECUREUNKNOWNBIT;
pub const SECURELOCK_SET_SECURE40BIT = SECURELOCKCODE.SECURELOCK_SET_SECURE40BIT;
pub const SECURELOCK_SET_SECURE56BIT = SECURELOCKCODE.SECURELOCK_SET_SECURE56BIT;
pub const SECURELOCK_SET_FORTEZZA = SECURELOCKCODE.SECURELOCK_SET_FORTEZZA;
pub const SECURELOCK_SET_SECURE128BIT = SECURELOCKCODE.SECURELOCK_SET_SECURE128BIT;
pub const SECURELOCK_FIRSTSUGGEST = SECURELOCKCODE.SECURELOCK_FIRSTSUGGEST;
pub const SECURELOCK_SUGGEST_UNSECURE = SECURELOCKCODE.SECURELOCK_SUGGEST_UNSECURE;
pub const SECURELOCK_SUGGEST_MIXED = SECURELOCKCODE.SECURELOCK_SUGGEST_MIXED;
pub const SECURELOCK_SUGGEST_SECUREUNKNOWNBIT = SECURELOCKCODE.SECURELOCK_SUGGEST_SECUREUNKNOWNBIT;
pub const SECURELOCK_SUGGEST_SECURE40BIT = SECURELOCKCODE.SECURELOCK_SUGGEST_SECURE40BIT;
pub const SECURELOCK_SUGGEST_SECURE56BIT = SECURELOCKCODE.SECURELOCK_SUGGEST_SECURE56BIT;
pub const SECURELOCK_SUGGEST_FORTEZZA = SECURELOCKCODE.SECURELOCK_SUGGEST_FORTEZZA;
pub const SECURELOCK_SUGGEST_SECURE128BIT = SECURELOCKCODE.SECURELOCK_SUGGEST_SECURE128BIT;

pub const BASEBROWSERDATAXP = extern struct {
    _hwnd: HWND,
    _ptl: *ITravelLog,
    _phlf: *IHlinkFrame,
    _pautoWB2: *IWebBrowser2,
    _pautoEDS: *IExpDispSupportXP,
    _pautoSS: *IShellService,
    _eSecureLockIcon: i32,
    _bitfield: u32,
    _uActivateState: u32,
    _pidlViewState: *ITEMIDLIST,
    _pctView: *IOleCommandTarget,
    _pidlCur: *ITEMIDLIST,
    _psv: *IShellView,
    _psf: *IShellFolder,
    _hwndView: HWND,
    _pszTitleCur: PWSTR,
    _pidlPending: *ITEMIDLIST,
    _psvPending: *IShellView,
    _psfPending: *IShellFolder,
    _hwndViewPending: HWND,
    _pszTitlePending: PWSTR,
    _fIsViewMSHTML: BOOL,
    _fPrivacyImpacted: BOOL,
    _clsidView: Guid,
    _clsidViewPending: Guid,
    _hwndFrame: HWND,
};

pub const BASEBROWSERDATALH = extern struct {
    _hwnd: HWND,
    _ptl: *ITravelLog,
    _phlf: *IHlinkFrame,
    _pautoWB2: *IWebBrowser2,
    _pautoEDS: *IExpDispSupport,
    _pautoSS: *IShellService,
    _eSecureLockIcon: i32,
    _bitfield: u32,
    _uActivateState: u32,
    _pidlViewState: *ITEMIDLIST,
    _pctView: *IOleCommandTarget,
    _pidlCur: *ITEMIDLIST,
    _psv: *IShellView,
    _psf: *IShellFolder,
    _hwndView: HWND,
    _pszTitleCur: PWSTR,
    _pidlPending: *ITEMIDLIST,
    _psvPending: *IShellView,
    _psfPending: *IShellFolder,
    _hwndViewPending: HWND,
    _pszTitlePending: PWSTR,
    _fIsViewMSHTML: BOOL,
    _fPrivacyImpacted: BOOL,
    _clsidView: Guid,
    _clsidViewPending: Guid,
    _hwndFrame: HWND,
    _lPhishingFilterStatus: i32,
};

pub const FOLDERSETDATA = extern struct {
    _fs: FOLDERSETTINGS,
    _vidRestore: Guid,
    _dwViewPriority: u32,
};

pub const TOOLBARITEM = extern struct {
    ptbar: *IDockingWindow,
    rcBorderTool: RECT,
    pwszItem: PWSTR,
    fShow: BOOL,
    hMon: HMONITOR,
};

const IID_IBrowserService2_Value = @import("../zig.zig").Guid.initString("68BD21CC-438B-11D2-A560-00A0C92DBFE8");
pub const IID_IBrowserService2 = &IID_IBrowserService2_Value;
pub const IBrowserService2 = extern struct {
    pub const VTable = extern struct {
        base: IBrowserService.VTable,
        WndProcBS: fn(
            self: *const IBrowserService2,
            hwnd: HWND,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) LRESULT,
        SetAsDefFolderSettings: fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewRect: fn(
            self: *const IBrowserService2,
            prc: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSize: fn(
            self: *const IBrowserService2,
            wParam: WPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCreate: fn(
            self: *const IBrowserService2,
            pcs: *CREATESTRUCTW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCommand: fn(
            self: *const IBrowserService2,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) LRESULT,
        OnDestroy: fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNotify: fn(
            self: *const IBrowserService2,
            pnm: *NMHDR,
        ) callconv(@import("std").os.windows.WINAPI) LRESULT,
        OnSetFocus: fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnFrameWindowActivateBS: fn(
            self: *const IBrowserService2,
            fActive: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseShellView: fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivatePendingView: fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateViewWindow: fn(
            self: *const IBrowserService2,
            psvNew: *IShellView,
            psvOld: *IShellView,
            prcView: *RECT,
            phwnd: *HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBrowserPropSheetExt: fn(
            self: *const IBrowserService2,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewWindow: fn(
            self: *const IBrowserService2,
            phwndView: *HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBaseBrowserData: fn(
            self: *const IBrowserService2,
            pbbd: **BASEBROWSERDATALH,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutBaseBrowserData: fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) *BASEBROWSERDATALH,
        InitializeTravelLog: fn(
            self: *const IBrowserService2,
            ptl: *ITravelLog,
            dw: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopBrowser: fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Offline: fn(
            self: *const IBrowserService2,
            iCmd: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllowViewResize: fn(
            self: *const IBrowserService2,
            f: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActivateState: fn(
            self: *const IBrowserService2,
            u: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateSecureLockIcon: fn(
            self: *const IBrowserService2,
            eSecureLock: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDownloadManager: fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeTransitionSite: fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _Initialize: fn(
            self: *const IBrowserService2,
            hwnd: HWND,
            pauto: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _CancelPendingNavigationAsync: fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _CancelPendingView: fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _MaySaveChanges: fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _PauseOrResumeView: fn(
            self: *const IBrowserService2,
            fPaused: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _DisableModeless: fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _NavigateToPidl2: fn(
            self: *const IBrowserService2,
            pidl: *ITEMIDLIST,
            grfHLNF: u32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _TryShell2Rename: fn(
            self: *const IBrowserService2,
            psv: *IShellView,
            pidlNew: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _SwitchActivationNow: fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _ExecChildren: fn(
            self: *const IBrowserService2,
            punkBar: *IUnknown,
            fBroadcast: BOOL,
            pguidCmdGroup: ?*const Guid,
            nCmdID: u32,
            nCmdexecopt: u32,
            pvarargIn: ?*VARIANT,
            pvarargOut: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _SendChildren: fn(
            self: *const IBrowserService2,
            hwndBar: HWND,
            fBroadcast: BOOL,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderSetData: fn(
            self: *const IBrowserService2,
            pfsd: *FOLDERSETDATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _OnFocusChange: fn(
            self: *const IBrowserService2,
            itb: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        v_ShowHideChildWindows: fn(
            self: *const IBrowserService2,
            fChildOnly: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _get_itbLastFocus: fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        _put_itbLastFocus: fn(
            self: *const IBrowserService2,
            itbLastFocus: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _UIActivateView: fn(
            self: *const IBrowserService2,
            uState: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _GetViewBorderRect: fn(
            self: *const IBrowserService2,
            prc: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _UpdateViewRectSize: fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _ResizeNextBorder: fn(
            self: *const IBrowserService2,
            itb: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _ResizeView: fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _GetEffectiveClientArea: fn(
            self: *const IBrowserService2,
            lprectBorder: *RECT,
            hmon: HMONITOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        v_GetViewStream: fn(
            self: *const IBrowserService2,
            pidl: *ITEMIDLIST,
            grfMode: u32,
            pwszName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) *IStream,
        ForwardViewMsg: fn(
            self: *const IBrowserService2,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) LRESULT,
        SetAcceleratorMenu: fn(
            self: *const IBrowserService2,
            hacc: HACCEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _GetToolbarCount: fn(
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) i32,
        _GetToolbarItem: fn(
            self: *const IBrowserService2,
            itb: i32,
        ) callconv(@import("std").os.windows.WINAPI) *TOOLBARITEM,
        _SaveToolbars: fn(
            self: *const IBrowserService2,
            pstm: *IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _LoadToolbars: fn(
            self: *const IBrowserService2,
            pstm: *IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _CloseAndReleaseToolbars: fn(
            self: *const IBrowserService2,
            fClose: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        v_MayGetNextToolbarFocus: fn(
            self: *const IBrowserService2,
            lpMsg: *MSG,
            itbNext: u32,
            citb: i32,
            pptbi: **TOOLBARITEM,
            phwnd: *HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _ResizeNextBorderHelper: fn(
            self: *const IBrowserService2,
            itb: u32,
            bUseHmonitor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _FindTBar: fn(
            self: *const IBrowserService2,
            punkSrc: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        _SetFocus: fn(
            self: *const IBrowserService2,
            ptbi: *TOOLBARITEM,
            hwnd: HWND,
            lpMsg: *MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        v_MayTranslateAccelerator: fn(
            self: *const IBrowserService2,
            pmsg: *MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _GetBorderDWHelper: fn(
            self: *const IBrowserService2,
            punkSrc: *IUnknown,
            lprectBorder: *RECT,
            bUseHmonitor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        v_CheckZoneCrossing: fn(
            self: *const IBrowserService2,
            pidl: *ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IBrowserService.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_WndProcBS(self: *const T, hwnd: HWND, uMsg: u32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) LRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).WndProcBS(@ptrCast(*const IBrowserService2, self), hwnd, uMsg, wParam, lParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_SetAsDefFolderSettings(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).SetAsDefFolderSettings(@ptrCast(*const IBrowserService2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_GetViewRect(self: *const T, prc: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).GetViewRect(@ptrCast(*const IBrowserService2, self), prc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_OnSize(self: *const T, wParam: WPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).OnSize(@ptrCast(*const IBrowserService2, self), wParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_OnCreate(self: *const T, pcs: *CREATESTRUCTW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).OnCreate(@ptrCast(*const IBrowserService2, self), pcs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_OnCommand(self: *const T, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) LRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).OnCommand(@ptrCast(*const IBrowserService2, self), wParam, lParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_OnDestroy(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).OnDestroy(@ptrCast(*const IBrowserService2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_OnNotify(self: *const T, pnm: *NMHDR) callconv(.Inline) LRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).OnNotify(@ptrCast(*const IBrowserService2, self), pnm);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_OnSetFocus(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).OnSetFocus(@ptrCast(*const IBrowserService2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_OnFrameWindowActivateBS(self: *const T, fActive: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).OnFrameWindowActivateBS(@ptrCast(*const IBrowserService2, self), fActive);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_ReleaseShellView(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).ReleaseShellView(@ptrCast(*const IBrowserService2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_ActivatePendingView(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).ActivatePendingView(@ptrCast(*const IBrowserService2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_CreateViewWindow(self: *const T, psvNew: *IShellView, psvOld: *IShellView, prcView: *RECT, phwnd: *HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).CreateViewWindow(@ptrCast(*const IBrowserService2, self), psvNew, psvOld, prcView, phwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_CreateBrowserPropSheetExt(self: *const T, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).CreateBrowserPropSheetExt(@ptrCast(*const IBrowserService2, self), riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_GetViewWindow(self: *const T, phwndView: *HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).GetViewWindow(@ptrCast(*const IBrowserService2, self), phwndView);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_GetBaseBrowserData(self: *const T, pbbd: **BASEBROWSERDATALH) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).GetBaseBrowserData(@ptrCast(*const IBrowserService2, self), pbbd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_PutBaseBrowserData(self: *const T) callconv(.Inline) *BASEBROWSERDATALH {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).PutBaseBrowserData(@ptrCast(*const IBrowserService2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_InitializeTravelLog(self: *const T, ptl: *ITravelLog, dw: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).InitializeTravelLog(@ptrCast(*const IBrowserService2, self), ptl, dw);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_SetTopBrowser(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).SetTopBrowser(@ptrCast(*const IBrowserService2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_Offline(self: *const T, iCmd: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).Offline(@ptrCast(*const IBrowserService2, self), iCmd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_AllowViewResize(self: *const T, f: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).AllowViewResize(@ptrCast(*const IBrowserService2, self), f);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_SetActivateState(self: *const T, u: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).SetActivateState(@ptrCast(*const IBrowserService2, self), u);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_UpdateSecureLockIcon(self: *const T, eSecureLock: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).UpdateSecureLockIcon(@ptrCast(*const IBrowserService2, self), eSecureLock);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_InitializeDownloadManager(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).InitializeDownloadManager(@ptrCast(*const IBrowserService2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_InitializeTransitionSite(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).InitializeTransitionSite(@ptrCast(*const IBrowserService2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__Initialize(self: *const T, hwnd: HWND, pauto: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._Initialize(@ptrCast(*const IBrowserService2, self), hwnd, pauto);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__CancelPendingNavigationAsync(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._CancelPendingNavigationAsync(@ptrCast(*const IBrowserService2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__CancelPendingView(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._CancelPendingView(@ptrCast(*const IBrowserService2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__MaySaveChanges(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._MaySaveChanges(@ptrCast(*const IBrowserService2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__PauseOrResumeView(self: *const T, fPaused: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._PauseOrResumeView(@ptrCast(*const IBrowserService2, self), fPaused);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__DisableModeless(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._DisableModeless(@ptrCast(*const IBrowserService2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__NavigateToPidl2(self: *const T, pidl: *ITEMIDLIST, grfHLNF: u32, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._NavigateToPidl2(@ptrCast(*const IBrowserService2, self), pidl, grfHLNF, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__TryShell2Rename(self: *const T, psv: *IShellView, pidlNew: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._TryShell2Rename(@ptrCast(*const IBrowserService2, self), psv, pidlNew);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__SwitchActivationNow(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._SwitchActivationNow(@ptrCast(*const IBrowserService2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__ExecChildren(self: *const T, punkBar: *IUnknown, fBroadcast: BOOL, pguidCmdGroup: ?*const Guid, nCmdID: u32, nCmdexecopt: u32, pvarargIn: ?*VARIANT, pvarargOut: ?*VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._ExecChildren(@ptrCast(*const IBrowserService2, self), punkBar, fBroadcast, pguidCmdGroup, nCmdID, nCmdexecopt, pvarargIn, pvarargOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__SendChildren(self: *const T, hwndBar: HWND, fBroadcast: BOOL, uMsg: u32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._SendChildren(@ptrCast(*const IBrowserService2, self), hwndBar, fBroadcast, uMsg, wParam, lParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_GetFolderSetData(self: *const T, pfsd: *FOLDERSETDATA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).GetFolderSetData(@ptrCast(*const IBrowserService2, self), pfsd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__OnFocusChange(self: *const T, itb: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._OnFocusChange(@ptrCast(*const IBrowserService2, self), itb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_v_ShowHideChildWindows(self: *const T, fChildOnly: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).v_ShowHideChildWindows(@ptrCast(*const IBrowserService2, self), fChildOnly);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__get_itbLastFocus(self: *const T) callconv(.Inline) u32 {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._get_itbLastFocus(@ptrCast(*const IBrowserService2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__put_itbLastFocus(self: *const T, itbLastFocus: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._put_itbLastFocus(@ptrCast(*const IBrowserService2, self), itbLastFocus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__UIActivateView(self: *const T, uState: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._UIActivateView(@ptrCast(*const IBrowserService2, self), uState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__GetViewBorderRect(self: *const T, prc: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._GetViewBorderRect(@ptrCast(*const IBrowserService2, self), prc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__UpdateViewRectSize(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._UpdateViewRectSize(@ptrCast(*const IBrowserService2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__ResizeNextBorder(self: *const T, itb: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._ResizeNextBorder(@ptrCast(*const IBrowserService2, self), itb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__ResizeView(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._ResizeView(@ptrCast(*const IBrowserService2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__GetEffectiveClientArea(self: *const T, lprectBorder: *RECT, hmon: HMONITOR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._GetEffectiveClientArea(@ptrCast(*const IBrowserService2, self), lprectBorder, hmon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_v_GetViewStream(self: *const T, pidl: *ITEMIDLIST, grfMode: u32, pwszName: [*:0]const u16) callconv(.Inline) *IStream {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).v_GetViewStream(@ptrCast(*const IBrowserService2, self), pidl, grfMode, pwszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_ForwardViewMsg(self: *const T, uMsg: u32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) LRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).ForwardViewMsg(@ptrCast(*const IBrowserService2, self), uMsg, wParam, lParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_SetAcceleratorMenu(self: *const T, hacc: HACCEL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).SetAcceleratorMenu(@ptrCast(*const IBrowserService2, self), hacc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__GetToolbarCount(self: *const T) callconv(.Inline) i32 {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._GetToolbarCount(@ptrCast(*const IBrowserService2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__GetToolbarItem(self: *const T, itb: i32) callconv(.Inline) *TOOLBARITEM {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._GetToolbarItem(@ptrCast(*const IBrowserService2, self), itb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__SaveToolbars(self: *const T, pstm: *IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._SaveToolbars(@ptrCast(*const IBrowserService2, self), pstm);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__LoadToolbars(self: *const T, pstm: *IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._LoadToolbars(@ptrCast(*const IBrowserService2, self), pstm);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__CloseAndReleaseToolbars(self: *const T, fClose: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._CloseAndReleaseToolbars(@ptrCast(*const IBrowserService2, self), fClose);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_v_MayGetNextToolbarFocus(self: *const T, lpMsg: *MSG, itbNext: u32, citb: i32, pptbi: **TOOLBARITEM, phwnd: *HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).v_MayGetNextToolbarFocus(@ptrCast(*const IBrowserService2, self), lpMsg, itbNext, citb, pptbi, phwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__ResizeNextBorderHelper(self: *const T, itb: u32, bUseHmonitor: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._ResizeNextBorderHelper(@ptrCast(*const IBrowserService2, self), itb, bUseHmonitor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__FindTBar(self: *const T, punkSrc: *IUnknown) callconv(.Inline) u32 {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._FindTBar(@ptrCast(*const IBrowserService2, self), punkSrc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__SetFocus(self: *const T, ptbi: *TOOLBARITEM, hwnd: HWND, lpMsg: *MSG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._SetFocus(@ptrCast(*const IBrowserService2, self), ptbi, hwnd, lpMsg);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_v_MayTranslateAccelerator(self: *const T, pmsg: *MSG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).v_MayTranslateAccelerator(@ptrCast(*const IBrowserService2, self), pmsg);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2__GetBorderDWHelper(self: *const T, punkSrc: *IUnknown, lprectBorder: *RECT, bUseHmonitor: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable)._GetBorderDWHelper(@ptrCast(*const IBrowserService2, self), punkSrc, lprectBorder, bUseHmonitor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService2_v_CheckZoneCrossing(self: *const T, pidl: *ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService2.VTable, self.vtable).v_CheckZoneCrossing(@ptrCast(*const IBrowserService2, self), pidl);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IEPDNFLAGS = extern enum(i32) {
    IEPDN_BINDINGUI = 1,
};
pub const IEPDN_BINDINGUI = IEPDNFLAGS.IEPDN_BINDINGUI;

const IID_IBrowserService3_Value = @import("../zig.zig").Guid.initString("27D7CE21-762D-48F3-86F3-40E2FD3749C4");
pub const IID_IBrowserService3 = &IID_IBrowserService3_Value;
pub const IBrowserService3 = extern struct {
    pub const VTable = extern struct {
        base: IBrowserService2.VTable,
        _PositionViewWindow: fn(
            self: *const IBrowserService3,
            hwnd: HWND,
            prc: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IEParseDisplayNameEx: fn(
            self: *const IBrowserService3,
            uiCP: u32,
            pwszPath: [*:0]const u16,
            dwFlags: u32,
            ppidlOut: **ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IBrowserService2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService3__PositionViewWindow(self: *const T, hwnd: HWND, prc: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService3.VTable, self.vtable)._PositionViewWindow(@ptrCast(*const IBrowserService3, self), hwnd, prc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService3_IEParseDisplayNameEx(self: *const T, uiCP: u32, pwszPath: [*:0]const u16, dwFlags: u32, ppidlOut: **ITEMIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService3.VTable, self.vtable).IEParseDisplayNameEx(@ptrCast(*const IBrowserService3, self), uiCP, pwszPath, dwFlags, ppidlOut);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IBrowserService4_Value = @import("../zig.zig").Guid.initString("639F1BFF-E135-4096-ABD8-E0F504D649A4");
pub const IID_IBrowserService4 = &IID_IBrowserService4_Value;
pub const IBrowserService4 = extern struct {
    pub const VTable = extern struct {
        base: IBrowserService3.VTable,
        ActivateView: fn(
            self: *const IBrowserService4,
            fPendingView: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveViewState: fn(
            self: *const IBrowserService4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _ResizeAllBorders: fn(
            self: *const IBrowserService4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IBrowserService3.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService4_ActivateView(self: *const T, fPendingView: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService4.VTable, self.vtable).ActivateView(@ptrCast(*const IBrowserService4, self), fPendingView);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService4_SaveViewState(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService4.VTable, self.vtable).SaveViewState(@ptrCast(*const IBrowserService4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IBrowserService4__ResizeAllBorders(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IBrowserService4.VTable, self.vtable)._ResizeAllBorders(@ptrCast(*const IBrowserService4, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITrackShellMenu_Value = @import("../zig.zig").Guid.initString("8278F932-2A3E-11D2-838F-00C04FD918D0");
pub const IID_ITrackShellMenu = &IID_ITrackShellMenu_Value;
pub const ITrackShellMenu = extern struct {
    pub const VTable = extern struct {
        base: IShellMenu.VTable,
        SetObscured: fn(
            self: *const ITrackShellMenu,
            hwndTB: HWND,
            punkBand: *IUnknown,
            dwSMSetFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Popup: fn(
            self: *const ITrackShellMenu,
            hwnd: HWND,
            ppt: *POINTL,
            prcExclude: *RECTL,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IShellMenu.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITrackShellMenu_SetObscured(self: *const T, hwndTB: HWND, punkBand: *IUnknown, dwSMSetFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITrackShellMenu.VTable, self.vtable).SetObscured(@ptrCast(*const ITrackShellMenu, self), hwndTB, punkBand, dwSMSetFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITrackShellMenu_Popup(self: *const T, hwnd: HWND, ppt: *POINTL, prcExclude: *RECTL, dwFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITrackShellMenu.VTable, self.vtable).Popup(@ptrCast(*const ITrackShellMenu, self), hwnd, ppt, prcExclude, dwFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_ImageTranscode_Value = @import("../zig.zig").Guid.initString("17B75166-928F-417D-9685-64AA135565C1");
pub const CLSID_ImageTranscode = &CLSID_ImageTranscode_Value;

pub const TI_FLAGS = extern enum(i32) {
    TI_BITMAP = 1,
    TI_JPEG = 2,
};
pub const TI_BITMAP = TI_FLAGS.TI_BITMAP;
pub const TI_JPEG = TI_FLAGS.TI_JPEG;

const IID_ITranscodeImage_Value = @import("../zig.zig").Guid.initString("BAE86DDD-DC11-421C-B7AB-CC55D1D65C44");
pub const IID_ITranscodeImage = &IID_ITranscodeImage_Value;
pub const ITranscodeImage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TranscodeImage: fn(
            self: *const ITranscodeImage,
            pShellItem: ?*IShellItem,
            uiMaxWidth: u32,
            uiMaxHeight: u32,
            flags: u32,
            pvImage: ?*IStream,
            puiWidth: *u32,
            puiHeight: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITranscodeImage_TranscodeImage(self: *const T, pShellItem: ?*IShellItem, uiMaxWidth: u32, uiMaxHeight: u32, flags: u32, pvImage: ?*IStream, puiWidth: *u32, puiHeight: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITranscodeImage.VTable, self.vtable).TranscodeImage(@ptrCast(*const ITranscodeImage, self), pShellItem, uiMaxWidth, uiMaxHeight, flags, pvImage, puiWidth, puiHeight);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PATHCCH_OPTIONS = extern enum(i32) {
    PATHCCH_NONE = 0,
    PATHCCH_ALLOW_LONG_PATHS = 1,
    PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS = 2,
    PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS = 4,
    PATHCCH_DO_NOT_NORMALIZE_SEGMENTS = 8,
    PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH = 16,
    PATHCCH_ENSURE_TRAILING_SLASH = 32,
};
pub const PATHCCH_NONE = PATHCCH_OPTIONS.PATHCCH_NONE;
pub const PATHCCH_ALLOW_LONG_PATHS = PATHCCH_OPTIONS.PATHCCH_ALLOW_LONG_PATHS;
pub const PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS = PATHCCH_OPTIONS.PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS;
pub const PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS = PATHCCH_OPTIONS.PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS;
pub const PATHCCH_DO_NOT_NORMALIZE_SEGMENTS = PATHCCH_OPTIONS.PATHCCH_DO_NOT_NORMALIZE_SEGMENTS;
pub const PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH = PATHCCH_OPTIONS.PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH;
pub const PATHCCH_ENSURE_TRAILING_SLASH = PATHCCH_OPTIONS.PATHCCH_ENSURE_TRAILING_SLASH;

pub const APPLET_PROC = fn(
    hwndCpl: HWND,
    msg: u32,
    lParam1: LPARAM,
    lParam2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const CPLINFO = extern struct {
    idIcon: i32,
    idName: i32,
    idInfo: i32,
    lData: ?*c_void,
};

pub const NEWCPLINFOA = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwHelpContext: u32,
    lData: ?*c_void,
    hIcon: HICON,
    szName: [32]i8,
    szInfo: [64]i8,
    szHelpFile: [128]i8,
};

pub const NEWCPLINFOW = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwHelpContext: u32,
    lData: ?*c_void,
    hIcon: HICON,
    szName: [32]u16,
    szInfo: [64]u16,
    szHelpFile: [128]u16,
};

pub const PROFILEINFOA = extern struct {
    dwSize: u32,
    dwFlags: u32,
    lpUserName: PSTR,
    lpProfilePath: PSTR,
    lpDefaultPath: PSTR,
    lpServerName: PSTR,
    lpPolicyPath: PSTR,
    hProfile: HANDLE,
};

pub const PROFILEINFOW = extern struct {
    dwSize: u32,
    dwFlags: u32,
    lpUserName: PWSTR,
    lpProfilePath: PWSTR,
    lpDefaultPath: PWSTR,
    lpServerName: PWSTR,
    lpPolicyPath: PWSTR,
    hProfile: HANDLE,
};

pub const iurl_seturl_flags = extern enum(i32) {
    IURL_SETURL_FL_GUESS_PROTOCOL = 1,
    IURL_SETURL_FL_USE_DEFAULT_PROTOCOL = 2,
};
pub const IURL_SETURL_FL_GUESS_PROTOCOL = iurl_seturl_flags.IURL_SETURL_FL_GUESS_PROTOCOL;
pub const IURL_SETURL_FL_USE_DEFAULT_PROTOCOL = iurl_seturl_flags.IURL_SETURL_FL_USE_DEFAULT_PROTOCOL;

pub const iurl_invokecommand_flags = extern enum(i32) {
    IURL_INVOKECOMMAND_FL_ALLOW_UI = 1,
    IURL_INVOKECOMMAND_FL_USE_DEFAULT_VERB = 2,
    IURL_INVOKECOMMAND_FL_DDEWAIT = 4,
    IURL_INVOKECOMMAND_FL_ASYNCOK = 8,
    IURL_INVOKECOMMAND_FL_LOG_USAGE = 16,
};
pub const IURL_INVOKECOMMAND_FL_ALLOW_UI = iurl_invokecommand_flags.IURL_INVOKECOMMAND_FL_ALLOW_UI;
pub const IURL_INVOKECOMMAND_FL_USE_DEFAULT_VERB = iurl_invokecommand_flags.IURL_INVOKECOMMAND_FL_USE_DEFAULT_VERB;
pub const IURL_INVOKECOMMAND_FL_DDEWAIT = iurl_invokecommand_flags.IURL_INVOKECOMMAND_FL_DDEWAIT;
pub const IURL_INVOKECOMMAND_FL_ASYNCOK = iurl_invokecommand_flags.IURL_INVOKECOMMAND_FL_ASYNCOK;
pub const IURL_INVOKECOMMAND_FL_LOG_USAGE = iurl_invokecommand_flags.IURL_INVOKECOMMAND_FL_LOG_USAGE;

pub const urlinvokecommandinfoA = extern struct {
    dwcbSize: u32,
    dwFlags: u32,
    hwndParent: HWND,
    pcszVerb: [*:0]const u8,
};

pub const urlinvokecommandinfoW = extern struct {
    dwcbSize: u32,
    dwFlags: u32,
    hwndParent: HWND,
    pcszVerb: [*:0]const u16,
};

const IID_IUniformResourceLocatorA_Value = @import("../zig.zig").Guid.initString("FBF23B80-E3F0-101B-8488-00AA003E56F8");
pub const IID_IUniformResourceLocatorA = &IID_IUniformResourceLocatorA_Value;
pub const IUniformResourceLocatorA = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetURL: fn(
            self: *const IUniformResourceLocatorA,
            pcszURL: [*:0]const u8,
            dwInFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetURL: fn(
            self: *const IUniformResourceLocatorA,
            ppszURL: *PSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeCommand: fn(
            self: *const IUniformResourceLocatorA,
            purlici: *urlinvokecommandinfoA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUniformResourceLocatorA_SetURL(self: *const T, pcszURL: [*:0]const u8, dwInFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUniformResourceLocatorA.VTable, self.vtable).SetURL(@ptrCast(*const IUniformResourceLocatorA, self), pcszURL, dwInFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUniformResourceLocatorA_GetURL(self: *const T, ppszURL: *PSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUniformResourceLocatorA.VTable, self.vtable).GetURL(@ptrCast(*const IUniformResourceLocatorA, self), ppszURL);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUniformResourceLocatorA_InvokeCommand(self: *const T, purlici: *urlinvokecommandinfoA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUniformResourceLocatorA.VTable, self.vtable).InvokeCommand(@ptrCast(*const IUniformResourceLocatorA, self), purlici);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUniformResourceLocatorW_Value = @import("../zig.zig").Guid.initString("CABB0DA0-DA57-11CF-9974-0020AFD79762");
pub const IID_IUniformResourceLocatorW = &IID_IUniformResourceLocatorW_Value;
pub const IUniformResourceLocatorW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetURL: fn(
            self: *const IUniformResourceLocatorW,
            pcszURL: [*:0]const u16,
            dwInFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetURL: fn(
            self: *const IUniformResourceLocatorW,
            ppszURL: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeCommand: fn(
            self: *const IUniformResourceLocatorW,
            purlici: *urlinvokecommandinfoW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUniformResourceLocatorW_SetURL(self: *const T, pcszURL: [*:0]const u16, dwInFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUniformResourceLocatorW.VTable, self.vtable).SetURL(@ptrCast(*const IUniformResourceLocatorW, self), pcszURL, dwInFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUniformResourceLocatorW_GetURL(self: *const T, ppszURL: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUniformResourceLocatorW.VTable, self.vtable).GetURL(@ptrCast(*const IUniformResourceLocatorW, self), ppszURL);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUniformResourceLocatorW_InvokeCommand(self: *const T, purlici: *urlinvokecommandinfoW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUniformResourceLocatorW.VTable, self.vtable).InvokeCommand(@ptrCast(*const IUniformResourceLocatorW, self), purlici);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const translateurl_in_flags = extern enum(i32) {
    TRANSLATEURL_FL_GUESS_PROTOCOL = 1,
    TRANSLATEURL_FL_USE_DEFAULT_PROTOCOL = 2,
};
pub const TRANSLATEURL_FL_GUESS_PROTOCOL = translateurl_in_flags.TRANSLATEURL_FL_GUESS_PROTOCOL;
pub const TRANSLATEURL_FL_USE_DEFAULT_PROTOCOL = translateurl_in_flags.TRANSLATEURL_FL_USE_DEFAULT_PROTOCOL;

pub const urlassociationdialog_in_flags = extern enum(i32) {
    URLASSOCDLG_FL_USE_DEFAULT_NAME = 1,
    URLASSOCDLG_FL_REGISTER_ASSOC = 2,
};
pub const URLASSOCDLG_FL_USE_DEFAULT_NAME = urlassociationdialog_in_flags.URLASSOCDLG_FL_USE_DEFAULT_NAME;
pub const URLASSOCDLG_FL_REGISTER_ASSOC = urlassociationdialog_in_flags.URLASSOCDLG_FL_REGISTER_ASSOC;

pub const mimeassociationdialog_in_flags = extern enum(i32) {
    MIMEASSOCDLG_FL_REGISTER_ASSOC = 1,
};
pub const MIMEASSOCDLG_FL_REGISTER_ASSOC = mimeassociationdialog_in_flags.MIMEASSOCDLG_FL_REGISTER_ASSOC;

pub const PAPPSTATE_CHANGE_ROUTINE = fn(
    Quiesced: u8,
    Context: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const _APPSTATE_REGISTRATION = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const PAPPCONSTRAIN_CHANGE_ROUTINE = fn(
    Constrained: u8,
    Context: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const _APPCONSTRAIN_REGISTRATION = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

const CLSID_CActiveIMM_Value = @import("../zig.zig").Guid.initString("4955DD33-B159-11D0-8FCF-00AA006BCC59");
pub const CLSID_CActiveIMM = &CLSID_CActiveIMM_Value;

pub const __MIDL___MIDL_itf_dimm_0000_0000_0012 = extern struct {
    hWnd: HWND,
    fOpen: BOOL,
    ptStatusWndPos: POINT,
    ptSoftKbdPos: POINT,
    fdwConversion: u32,
    fdwSentence: u32,
    lfFont: __MIDL___MIDL_itf_dimm_0000_0000_0012._lfFont_e__Union,
    cfCompForm: COMPOSITIONFORM,
    cfCandForm: [4]CANDIDATEFORM,
    hCompStr: *HIMCC__,
    hCandInfo: *HIMCC__,
    hGuideLine: *HIMCC__,
    hPrivate: *HIMCC__,
    dwNumMsgBuf: u32,
    hMsgBuf: *HIMCC__,
    fdwInit: u32,
    dwReserve: [3]u32,
    const _lfFont_e__Union = u32; // TODO: generate this nested type!
};

pub const __MIDL___MIDL_itf_dimm_0000_0000_0014 = extern struct {
    dwPrivateDataSize: u32,
    fdwProperty: u32,
    fdwConversionCaps: u32,
    fdwSentenceCaps: u32,
    fdwUICaps: u32,
    fdwSCSCaps: u32,
    fdwSelectCaps: u32,
};

const IID_IEnumRegisterWordA_Value = @import("../zig.zig").Guid.initString("08C03412-F96B-11D0-A475-00AA006BCC59");
pub const IID_IEnumRegisterWordA = &IID_IEnumRegisterWordA_Value;
pub const IEnumRegisterWordA = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Clone: fn(
            self: *const IEnumRegisterWordA,
            ppEnum: **IEnumRegisterWordA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: fn(
            self: *const IEnumRegisterWordA,
            ulCount: u32,
            rgRegisterWord: *REGISTERWORDA,
            pcFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumRegisterWordA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumRegisterWordA,
            ulCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumRegisterWordA_Clone(self: *const T, ppEnum: **IEnumRegisterWordA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumRegisterWordA.VTable, self.vtable).Clone(@ptrCast(*const IEnumRegisterWordA, self), ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumRegisterWordA_Next(self: *const T, ulCount: u32, rgRegisterWord: *REGISTERWORDA, pcFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumRegisterWordA.VTable, self.vtable).Next(@ptrCast(*const IEnumRegisterWordA, self), ulCount, rgRegisterWord, pcFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumRegisterWordA_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumRegisterWordA.VTable, self.vtable).Reset(@ptrCast(*const IEnumRegisterWordA, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumRegisterWordA_Skip(self: *const T, ulCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumRegisterWordA.VTable, self.vtable).Skip(@ptrCast(*const IEnumRegisterWordA, self), ulCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumRegisterWordW_Value = @import("../zig.zig").Guid.initString("4955DD31-B159-11D0-8FCF-00AA006BCC59");
pub const IID_IEnumRegisterWordW = &IID_IEnumRegisterWordW_Value;
pub const IEnumRegisterWordW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Clone: fn(
            self: *const IEnumRegisterWordW,
            ppEnum: **IEnumRegisterWordW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: fn(
            self: *const IEnumRegisterWordW,
            ulCount: u32,
            rgRegisterWord: *REGISTERWORDW,
            pcFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumRegisterWordW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumRegisterWordW,
            ulCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumRegisterWordW_Clone(self: *const T, ppEnum: **IEnumRegisterWordW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumRegisterWordW.VTable, self.vtable).Clone(@ptrCast(*const IEnumRegisterWordW, self), ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumRegisterWordW_Next(self: *const T, ulCount: u32, rgRegisterWord: *REGISTERWORDW, pcFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumRegisterWordW.VTable, self.vtable).Next(@ptrCast(*const IEnumRegisterWordW, self), ulCount, rgRegisterWord, pcFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumRegisterWordW_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumRegisterWordW.VTable, self.vtable).Reset(@ptrCast(*const IEnumRegisterWordW, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumRegisterWordW_Skip(self: *const T, ulCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumRegisterWordW.VTable, self.vtable).Skip(@ptrCast(*const IEnumRegisterWordW, self), ulCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumInputContext_Value = @import("../zig.zig").Guid.initString("09B5EAB0-F997-11D1-93D4-0060B067B86E");
pub const IID_IEnumInputContext = &IID_IEnumInputContext_Value;
pub const IEnumInputContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Clone: fn(
            self: *const IEnumInputContext,
            ppEnum: **IEnumInputContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: fn(
            self: *const IEnumInputContext,
            ulCount: u32,
            rgInputContext: **HIMC__,
            pcFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumInputContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumInputContext,
            ulCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumInputContext_Clone(self: *const T, ppEnum: **IEnumInputContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumInputContext.VTable, self.vtable).Clone(@ptrCast(*const IEnumInputContext, self), ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumInputContext_Next(self: *const T, ulCount: u32, rgInputContext: **HIMC__, pcFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumInputContext.VTable, self.vtable).Next(@ptrCast(*const IEnumInputContext, self), ulCount, rgInputContext, pcFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumInputContext_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumInputContext.VTable, self.vtable).Reset(@ptrCast(*const IEnumInputContext, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumInputContext_Skip(self: *const T, ulCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumInputContext.VTable, self.vtable).Skip(@ptrCast(*const IEnumInputContext, self), ulCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IActiveIMMRegistrar_Value = @import("../zig.zig").Guid.initString("B3458082-BD00-11D1-939B-0060B067B86E");
pub const IID_IActiveIMMRegistrar = &IID_IActiveIMMRegistrar_Value;
pub const IActiveIMMRegistrar = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterIME: fn(
            self: *const IActiveIMMRegistrar,
            rclsid: *const Guid,
            lgid: u16,
            pszIconFile: [*:0]const u16,
            pszDesc: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterIME: fn(
            self: *const IActiveIMMRegistrar,
            rclsid: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMRegistrar_RegisterIME(self: *const T, rclsid: *const Guid, lgid: u16, pszIconFile: [*:0]const u16, pszDesc: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMRegistrar.VTable, self.vtable).RegisterIME(@ptrCast(*const IActiveIMMRegistrar, self), rclsid, lgid, pszIconFile, pszDesc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMRegistrar_UnregisterIME(self: *const T, rclsid: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMRegistrar.VTable, self.vtable).UnregisterIME(@ptrCast(*const IActiveIMMRegistrar, self), rclsid);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IActiveIMMMessagePumpOwner_Value = @import("../zig.zig").Guid.initString("B5CF2CFA-8AEB-11D1-9364-0060B067B86E");
pub const IID_IActiveIMMMessagePumpOwner = &IID_IActiveIMMMessagePumpOwner_Value;
pub const IActiveIMMMessagePumpOwner = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Start: fn(
            self: *const IActiveIMMMessagePumpOwner,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        End: fn(
            self: *const IActiveIMMMessagePumpOwner,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTranslateMessage: fn(
            self: *const IActiveIMMMessagePumpOwner,
            pMsg: *const MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: fn(
            self: *const IActiveIMMMessagePumpOwner,
            pdwCookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: fn(
            self: *const IActiveIMMMessagePumpOwner,
            dwCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMMessagePumpOwner_Start(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMMessagePumpOwner.VTable, self.vtable).Start(@ptrCast(*const IActiveIMMMessagePumpOwner, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMMessagePumpOwner_End(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMMessagePumpOwner.VTable, self.vtable).End(@ptrCast(*const IActiveIMMMessagePumpOwner, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMMessagePumpOwner_OnTranslateMessage(self: *const T, pMsg: *const MSG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMMessagePumpOwner.VTable, self.vtable).OnTranslateMessage(@ptrCast(*const IActiveIMMMessagePumpOwner, self), pMsg);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMMessagePumpOwner_Pause(self: *const T, pdwCookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMMessagePumpOwner.VTable, self.vtable).Pause(@ptrCast(*const IActiveIMMMessagePumpOwner, self), pdwCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMMessagePumpOwner_Resume(self: *const T, dwCookie: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMMessagePumpOwner.VTable, self.vtable).Resume(@ptrCast(*const IActiveIMMMessagePumpOwner, self), dwCookie);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IActiveIMMApp_Value = @import("../zig.zig").Guid.initString("08C0E040-62D1-11D1-9326-0060B067B86E");
pub const IID_IActiveIMMApp = &IID_IActiveIMMApp_Value;
pub const IActiveIMMApp = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AssociateContext: fn(
            self: *const IActiveIMMApp,
            hWnd: HWND,
            hIME: *HIMC__,
            phPrev: **HIMC__,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConfigureIMEA: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            hWnd: HWND,
            dwMode: u32,
            pData: *REGISTERWORDA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConfigureIMEW: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            hWnd: HWND,
            dwMode: u32,
            pData: *REGISTERWORDW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateContext: fn(
            self: *const IActiveIMMApp,
            phIMC: **HIMC__,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyContext: fn(
            self: *const IActiveIMMApp,
            hIME: *HIMC__,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumRegisterWordA: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            szReading: PSTR,
            dwStyle: u32,
            szRegister: PSTR,
            pData: *c_void,
            pEnum: **IEnumRegisterWordA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumRegisterWordW: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            szReading: PWSTR,
            dwStyle: u32,
            szRegister: PWSTR,
            pData: *c_void,
            pEnum: **IEnumRegisterWordW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EscapeA: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            hIMC: *HIMC__,
            uEscape: u32,
            pData: *c_void,
            plResult: *LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EscapeW: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            hIMC: *HIMC__,
            uEscape: u32,
            pData: *c_void,
            plResult: *LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCandidateListA: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            dwIndex: u32,
            uBufLen: u32,
            pCandList: *CANDIDATELIST,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCandidateListW: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            dwIndex: u32,
            uBufLen: u32,
            pCandList: *CANDIDATELIST,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCandidateListCountA: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            pdwListSize: *u32,
            pdwBufLen: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCandidateListCountW: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            pdwListSize: *u32,
            pdwBufLen: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCandidateWindow: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            dwIndex: u32,
            pCandidate: *CANDIDATEFORM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCompositionFontA: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            plf: *LOGFONTA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCompositionFontW: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            plf: *LOGFONTW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCompositionStringA: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            dwIndex: u32,
            dwBufLen: u32,
            plCopied: *i32,
            pBuf: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCompositionStringW: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            dwIndex: u32,
            dwBufLen: u32,
            plCopied: *i32,
            pBuf: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCompositionWindow: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            pCompForm: *COMPOSITIONFORM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContext: fn(
            self: *const IActiveIMMApp,
            hWnd: HWND,
            phIMC: **HIMC__,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConversionListA: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            hIMC: *HIMC__,
            pSrc: PSTR,
            uBufLen: u32,
            uFlag: u32,
            pDst: *CANDIDATELIST,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConversionListW: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            hIMC: *HIMC__,
            pSrc: PWSTR,
            uBufLen: u32,
            uFlag: u32,
            pDst: *CANDIDATELIST,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConversionStatus: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            pfdwConversion: *u32,
            pfdwSentence: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultIMEWnd: fn(
            self: *const IActiveIMMApp,
            hWnd: HWND,
            phDefWnd: *HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescriptionA: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            uBufLen: u32,
            szDescription: PSTR,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescriptionW: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            uBufLen: u32,
            szDescription: PWSTR,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGuideLineA: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            dwIndex: u32,
            dwBufLen: u32,
            pBuf: PSTR,
            pdwResult: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGuideLineW: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            dwIndex: u32,
            dwBufLen: u32,
            pBuf: PWSTR,
            pdwResult: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIMEFileNameA: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            uBufLen: u32,
            szFileName: PSTR,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIMEFileNameW: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            uBufLen: u32,
            szFileName: PWSTR,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOpenStatus: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            fdwIndex: u32,
            pdwProperty: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegisterWordStyleA: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            nItem: u32,
            pStyleBuf: *STYLEBUFA,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegisterWordStyleW: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            nItem: u32,
            pStyleBuf: *STYLEBUFW,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatusWindowPos: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            pptPos: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVirtualKey: fn(
            self: *const IActiveIMMApp,
            hWnd: HWND,
            puVirtualKey: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallIMEA: fn(
            self: *const IActiveIMMApp,
            szIMEFileName: PSTR,
            szLayoutText: PSTR,
            phKL: *HKL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallIMEW: fn(
            self: *const IActiveIMMApp,
            szIMEFileName: PWSTR,
            szLayoutText: PWSTR,
            phKL: *HKL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsIME: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsUIMessageA: fn(
            self: *const IActiveIMMApp,
            hWndIME: HWND,
            msg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsUIMessageW: fn(
            self: *const IActiveIMMApp,
            hWndIME: HWND,
            msg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyIME: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            dwAction: u32,
            dwIndex: u32,
            dwValue: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterWordA: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            szReading: PSTR,
            dwStyle: u32,
            szRegister: PSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterWordW: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            szReading: PWSTR,
            dwStyle: u32,
            szRegister: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseContext: fn(
            self: *const IActiveIMMApp,
            hWnd: HWND,
            hIMC: *HIMC__,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCandidateWindow: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            pCandidate: *CANDIDATEFORM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompositionFontA: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            plf: *LOGFONTA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompositionFontW: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            plf: *LOGFONTW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompositionStringA: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            dwIndex: u32,
            pComp: *c_void,
            dwCompLen: u32,
            pRead: *c_void,
            dwReadLen: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompositionStringW: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            dwIndex: u32,
            pComp: *c_void,
            dwCompLen: u32,
            pRead: *c_void,
            dwReadLen: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompositionWindow: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            pCompForm: *COMPOSITIONFORM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConversionStatus: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            fdwConversion: u32,
            fdwSentence: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpenStatus: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            fOpen: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStatusWindowPos: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            pptPos: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SimulateHotKey: fn(
            self: *const IActiveIMMApp,
            hWnd: HWND,
            dwHotKeyID: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterWordA: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            szReading: PSTR,
            dwStyle: u32,
            szUnregister: PSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterWordW: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            szReading: PWSTR,
            dwStyle: u32,
            szUnregister: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: fn(
            self: *const IActiveIMMApp,
            fRestoreLayout: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Deactivate: fn(
            self: *const IActiveIMMApp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDefWindowProc: fn(
            self: *const IActiveIMMApp,
            hWnd: HWND,
            Msg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
            plResult: *LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FilterClientWindows: fn(
            self: *const IActiveIMMApp,
            aaClassList: *u16,
            uSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCodePageA: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            uCodePage: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLangId: fn(
            self: *const IActiveIMMApp,
            hKL: HKL,
            plid: *u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AssociateContextEx: fn(
            self: *const IActiveIMMApp,
            hWnd: HWND,
            hIMC: *HIMC__,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableIME: fn(
            self: *const IActiveIMMApp,
            idThread: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImeMenuItemsA: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            dwFlags: u32,
            dwType: u32,
            pImeParentMenu: *IMEMENUITEMINFOA,
            pImeMenu: *IMEMENUITEMINFOA,
            dwSize: u32,
            pdwResult: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImeMenuItemsW: fn(
            self: *const IActiveIMMApp,
            hIMC: *HIMC__,
            dwFlags: u32,
            dwType: u32,
            pImeParentMenu: *IMEMENUITEMINFOW,
            pImeMenu: *IMEMENUITEMINFOW,
            dwSize: u32,
            pdwResult: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumInputContext: fn(
            self: *const IActiveIMMApp,
            idThread: u32,
            ppEnum: **IEnumInputContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_AssociateContext(self: *const T, hWnd: HWND, hIME: *HIMC__, phPrev: **HIMC__) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).AssociateContext(@ptrCast(*const IActiveIMMApp, self), hWnd, hIME, phPrev);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_ConfigureIMEA(self: *const T, hKL: HKL, hWnd: HWND, dwMode: u32, pData: *REGISTERWORDA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).ConfigureIMEA(@ptrCast(*const IActiveIMMApp, self), hKL, hWnd, dwMode, pData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_ConfigureIMEW(self: *const T, hKL: HKL, hWnd: HWND, dwMode: u32, pData: *REGISTERWORDW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).ConfigureIMEW(@ptrCast(*const IActiveIMMApp, self), hKL, hWnd, dwMode, pData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_CreateContext(self: *const T, phIMC: **HIMC__) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).CreateContext(@ptrCast(*const IActiveIMMApp, self), phIMC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_DestroyContext(self: *const T, hIME: *HIMC__) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).DestroyContext(@ptrCast(*const IActiveIMMApp, self), hIME);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_EnumRegisterWordA(self: *const T, hKL: HKL, szReading: PSTR, dwStyle: u32, szRegister: PSTR, pData: *c_void, pEnum: **IEnumRegisterWordA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).EnumRegisterWordA(@ptrCast(*const IActiveIMMApp, self), hKL, szReading, dwStyle, szRegister, pData, pEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_EnumRegisterWordW(self: *const T, hKL: HKL, szReading: PWSTR, dwStyle: u32, szRegister: PWSTR, pData: *c_void, pEnum: **IEnumRegisterWordW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).EnumRegisterWordW(@ptrCast(*const IActiveIMMApp, self), hKL, szReading, dwStyle, szRegister, pData, pEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_EscapeA(self: *const T, hKL: HKL, hIMC: *HIMC__, uEscape: u32, pData: *c_void, plResult: *LRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).EscapeA(@ptrCast(*const IActiveIMMApp, self), hKL, hIMC, uEscape, pData, plResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_EscapeW(self: *const T, hKL: HKL, hIMC: *HIMC__, uEscape: u32, pData: *c_void, plResult: *LRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).EscapeW(@ptrCast(*const IActiveIMMApp, self), hKL, hIMC, uEscape, pData, plResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetCandidateListA(self: *const T, hIMC: *HIMC__, dwIndex: u32, uBufLen: u32, pCandList: *CANDIDATELIST, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetCandidateListA(@ptrCast(*const IActiveIMMApp, self), hIMC, dwIndex, uBufLen, pCandList, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetCandidateListW(self: *const T, hIMC: *HIMC__, dwIndex: u32, uBufLen: u32, pCandList: *CANDIDATELIST, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetCandidateListW(@ptrCast(*const IActiveIMMApp, self), hIMC, dwIndex, uBufLen, pCandList, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetCandidateListCountA(self: *const T, hIMC: *HIMC__, pdwListSize: *u32, pdwBufLen: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetCandidateListCountA(@ptrCast(*const IActiveIMMApp, self), hIMC, pdwListSize, pdwBufLen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetCandidateListCountW(self: *const T, hIMC: *HIMC__, pdwListSize: *u32, pdwBufLen: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetCandidateListCountW(@ptrCast(*const IActiveIMMApp, self), hIMC, pdwListSize, pdwBufLen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetCandidateWindow(self: *const T, hIMC: *HIMC__, dwIndex: u32, pCandidate: *CANDIDATEFORM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetCandidateWindow(@ptrCast(*const IActiveIMMApp, self), hIMC, dwIndex, pCandidate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetCompositionFontA(self: *const T, hIMC: *HIMC__, plf: *LOGFONTA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetCompositionFontA(@ptrCast(*const IActiveIMMApp, self), hIMC, plf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetCompositionFontW(self: *const T, hIMC: *HIMC__, plf: *LOGFONTW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetCompositionFontW(@ptrCast(*const IActiveIMMApp, self), hIMC, plf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetCompositionStringA(self: *const T, hIMC: *HIMC__, dwIndex: u32, dwBufLen: u32, plCopied: *i32, pBuf: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetCompositionStringA(@ptrCast(*const IActiveIMMApp, self), hIMC, dwIndex, dwBufLen, plCopied, pBuf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetCompositionStringW(self: *const T, hIMC: *HIMC__, dwIndex: u32, dwBufLen: u32, plCopied: *i32, pBuf: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetCompositionStringW(@ptrCast(*const IActiveIMMApp, self), hIMC, dwIndex, dwBufLen, plCopied, pBuf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetCompositionWindow(self: *const T, hIMC: *HIMC__, pCompForm: *COMPOSITIONFORM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetCompositionWindow(@ptrCast(*const IActiveIMMApp, self), hIMC, pCompForm);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetContext(self: *const T, hWnd: HWND, phIMC: **HIMC__) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetContext(@ptrCast(*const IActiveIMMApp, self), hWnd, phIMC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetConversionListA(self: *const T, hKL: HKL, hIMC: *HIMC__, pSrc: PSTR, uBufLen: u32, uFlag: u32, pDst: *CANDIDATELIST, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetConversionListA(@ptrCast(*const IActiveIMMApp, self), hKL, hIMC, pSrc, uBufLen, uFlag, pDst, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetConversionListW(self: *const T, hKL: HKL, hIMC: *HIMC__, pSrc: PWSTR, uBufLen: u32, uFlag: u32, pDst: *CANDIDATELIST, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetConversionListW(@ptrCast(*const IActiveIMMApp, self), hKL, hIMC, pSrc, uBufLen, uFlag, pDst, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetConversionStatus(self: *const T, hIMC: *HIMC__, pfdwConversion: *u32, pfdwSentence: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetConversionStatus(@ptrCast(*const IActiveIMMApp, self), hIMC, pfdwConversion, pfdwSentence);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetDefaultIMEWnd(self: *const T, hWnd: HWND, phDefWnd: *HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetDefaultIMEWnd(@ptrCast(*const IActiveIMMApp, self), hWnd, phDefWnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetDescriptionA(self: *const T, hKL: HKL, uBufLen: u32, szDescription: PSTR, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetDescriptionA(@ptrCast(*const IActiveIMMApp, self), hKL, uBufLen, szDescription, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetDescriptionW(self: *const T, hKL: HKL, uBufLen: u32, szDescription: PWSTR, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetDescriptionW(@ptrCast(*const IActiveIMMApp, self), hKL, uBufLen, szDescription, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetGuideLineA(self: *const T, hIMC: *HIMC__, dwIndex: u32, dwBufLen: u32, pBuf: PSTR, pdwResult: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetGuideLineA(@ptrCast(*const IActiveIMMApp, self), hIMC, dwIndex, dwBufLen, pBuf, pdwResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetGuideLineW(self: *const T, hIMC: *HIMC__, dwIndex: u32, dwBufLen: u32, pBuf: PWSTR, pdwResult: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetGuideLineW(@ptrCast(*const IActiveIMMApp, self), hIMC, dwIndex, dwBufLen, pBuf, pdwResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetIMEFileNameA(self: *const T, hKL: HKL, uBufLen: u32, szFileName: PSTR, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetIMEFileNameA(@ptrCast(*const IActiveIMMApp, self), hKL, uBufLen, szFileName, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetIMEFileNameW(self: *const T, hKL: HKL, uBufLen: u32, szFileName: PWSTR, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetIMEFileNameW(@ptrCast(*const IActiveIMMApp, self), hKL, uBufLen, szFileName, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetOpenStatus(self: *const T, hIMC: *HIMC__) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetOpenStatus(@ptrCast(*const IActiveIMMApp, self), hIMC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetProperty(self: *const T, hKL: HKL, fdwIndex: u32, pdwProperty: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetProperty(@ptrCast(*const IActiveIMMApp, self), hKL, fdwIndex, pdwProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetRegisterWordStyleA(self: *const T, hKL: HKL, nItem: u32, pStyleBuf: *STYLEBUFA, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetRegisterWordStyleA(@ptrCast(*const IActiveIMMApp, self), hKL, nItem, pStyleBuf, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetRegisterWordStyleW(self: *const T, hKL: HKL, nItem: u32, pStyleBuf: *STYLEBUFW, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetRegisterWordStyleW(@ptrCast(*const IActiveIMMApp, self), hKL, nItem, pStyleBuf, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetStatusWindowPos(self: *const T, hIMC: *HIMC__, pptPos: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetStatusWindowPos(@ptrCast(*const IActiveIMMApp, self), hIMC, pptPos);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetVirtualKey(self: *const T, hWnd: HWND, puVirtualKey: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetVirtualKey(@ptrCast(*const IActiveIMMApp, self), hWnd, puVirtualKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_InstallIMEA(self: *const T, szIMEFileName: PSTR, szLayoutText: PSTR, phKL: *HKL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).InstallIMEA(@ptrCast(*const IActiveIMMApp, self), szIMEFileName, szLayoutText, phKL);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_InstallIMEW(self: *const T, szIMEFileName: PWSTR, szLayoutText: PWSTR, phKL: *HKL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).InstallIMEW(@ptrCast(*const IActiveIMMApp, self), szIMEFileName, szLayoutText, phKL);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_IsIME(self: *const T, hKL: HKL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).IsIME(@ptrCast(*const IActiveIMMApp, self), hKL);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_IsUIMessageA(self: *const T, hWndIME: HWND, msg: u32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).IsUIMessageA(@ptrCast(*const IActiveIMMApp, self), hWndIME, msg, wParam, lParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_IsUIMessageW(self: *const T, hWndIME: HWND, msg: u32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).IsUIMessageW(@ptrCast(*const IActiveIMMApp, self), hWndIME, msg, wParam, lParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_NotifyIME(self: *const T, hIMC: *HIMC__, dwAction: u32, dwIndex: u32, dwValue: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).NotifyIME(@ptrCast(*const IActiveIMMApp, self), hIMC, dwAction, dwIndex, dwValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_RegisterWordA(self: *const T, hKL: HKL, szReading: PSTR, dwStyle: u32, szRegister: PSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).RegisterWordA(@ptrCast(*const IActiveIMMApp, self), hKL, szReading, dwStyle, szRegister);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_RegisterWordW(self: *const T, hKL: HKL, szReading: PWSTR, dwStyle: u32, szRegister: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).RegisterWordW(@ptrCast(*const IActiveIMMApp, self), hKL, szReading, dwStyle, szRegister);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_ReleaseContext(self: *const T, hWnd: HWND, hIMC: *HIMC__) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).ReleaseContext(@ptrCast(*const IActiveIMMApp, self), hWnd, hIMC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_SetCandidateWindow(self: *const T, hIMC: *HIMC__, pCandidate: *CANDIDATEFORM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).SetCandidateWindow(@ptrCast(*const IActiveIMMApp, self), hIMC, pCandidate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_SetCompositionFontA(self: *const T, hIMC: *HIMC__, plf: *LOGFONTA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).SetCompositionFontA(@ptrCast(*const IActiveIMMApp, self), hIMC, plf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_SetCompositionFontW(self: *const T, hIMC: *HIMC__, plf: *LOGFONTW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).SetCompositionFontW(@ptrCast(*const IActiveIMMApp, self), hIMC, plf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_SetCompositionStringA(self: *const T, hIMC: *HIMC__, dwIndex: u32, pComp: *c_void, dwCompLen: u32, pRead: *c_void, dwReadLen: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).SetCompositionStringA(@ptrCast(*const IActiveIMMApp, self), hIMC, dwIndex, pComp, dwCompLen, pRead, dwReadLen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_SetCompositionStringW(self: *const T, hIMC: *HIMC__, dwIndex: u32, pComp: *c_void, dwCompLen: u32, pRead: *c_void, dwReadLen: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).SetCompositionStringW(@ptrCast(*const IActiveIMMApp, self), hIMC, dwIndex, pComp, dwCompLen, pRead, dwReadLen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_SetCompositionWindow(self: *const T, hIMC: *HIMC__, pCompForm: *COMPOSITIONFORM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).SetCompositionWindow(@ptrCast(*const IActiveIMMApp, self), hIMC, pCompForm);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_SetConversionStatus(self: *const T, hIMC: *HIMC__, fdwConversion: u32, fdwSentence: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).SetConversionStatus(@ptrCast(*const IActiveIMMApp, self), hIMC, fdwConversion, fdwSentence);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_SetOpenStatus(self: *const T, hIMC: *HIMC__, fOpen: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).SetOpenStatus(@ptrCast(*const IActiveIMMApp, self), hIMC, fOpen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_SetStatusWindowPos(self: *const T, hIMC: *HIMC__, pptPos: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).SetStatusWindowPos(@ptrCast(*const IActiveIMMApp, self), hIMC, pptPos);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_SimulateHotKey(self: *const T, hWnd: HWND, dwHotKeyID: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).SimulateHotKey(@ptrCast(*const IActiveIMMApp, self), hWnd, dwHotKeyID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_UnregisterWordA(self: *const T, hKL: HKL, szReading: PSTR, dwStyle: u32, szUnregister: PSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).UnregisterWordA(@ptrCast(*const IActiveIMMApp, self), hKL, szReading, dwStyle, szUnregister);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_UnregisterWordW(self: *const T, hKL: HKL, szReading: PWSTR, dwStyle: u32, szUnregister: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).UnregisterWordW(@ptrCast(*const IActiveIMMApp, self), hKL, szReading, dwStyle, szUnregister);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_Activate(self: *const T, fRestoreLayout: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).Activate(@ptrCast(*const IActiveIMMApp, self), fRestoreLayout);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_Deactivate(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).Deactivate(@ptrCast(*const IActiveIMMApp, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_OnDefWindowProc(self: *const T, hWnd: HWND, Msg: u32, wParam: WPARAM, lParam: LPARAM, plResult: *LRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).OnDefWindowProc(@ptrCast(*const IActiveIMMApp, self), hWnd, Msg, wParam, lParam, plResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_FilterClientWindows(self: *const T, aaClassList: *u16, uSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).FilterClientWindows(@ptrCast(*const IActiveIMMApp, self), aaClassList, uSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetCodePageA(self: *const T, hKL: HKL, uCodePage: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetCodePageA(@ptrCast(*const IActiveIMMApp, self), hKL, uCodePage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetLangId(self: *const T, hKL: HKL, plid: *u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetLangId(@ptrCast(*const IActiveIMMApp, self), hKL, plid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_AssociateContextEx(self: *const T, hWnd: HWND, hIMC: *HIMC__, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).AssociateContextEx(@ptrCast(*const IActiveIMMApp, self), hWnd, hIMC, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_DisableIME(self: *const T, idThread: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).DisableIME(@ptrCast(*const IActiveIMMApp, self), idThread);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetImeMenuItemsA(self: *const T, hIMC: *HIMC__, dwFlags: u32, dwType: u32, pImeParentMenu: *IMEMENUITEMINFOA, pImeMenu: *IMEMENUITEMINFOA, dwSize: u32, pdwResult: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetImeMenuItemsA(@ptrCast(*const IActiveIMMApp, self), hIMC, dwFlags, dwType, pImeParentMenu, pImeMenu, dwSize, pdwResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_GetImeMenuItemsW(self: *const T, hIMC: *HIMC__, dwFlags: u32, dwType: u32, pImeParentMenu: *IMEMENUITEMINFOW, pImeMenu: *IMEMENUITEMINFOW, dwSize: u32, pdwResult: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).GetImeMenuItemsW(@ptrCast(*const IActiveIMMApp, self), hIMC, dwFlags, dwType, pImeParentMenu, pImeMenu, dwSize, pdwResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMApp_EnumInputContext(self: *const T, idThread: u32, ppEnum: **IEnumInputContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMApp.VTable, self.vtable).EnumInputContext(@ptrCast(*const IActiveIMMApp, self), idThread, ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IActiveIMMIME_Value = @import("../zig.zig").Guid.initString("08C03411-F96B-11D0-A475-00AA006BCC59");
pub const IID_IActiveIMMIME = &IID_IActiveIMMIME_Value;
pub const IActiveIMMIME = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AssociateContext: fn(
            self: *const IActiveIMMIME,
            hWnd: HWND,
            hIME: *HIMC__,
            phPrev: **HIMC__,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConfigureIMEA: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            hWnd: HWND,
            dwMode: u32,
            pData: *REGISTERWORDA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConfigureIMEW: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            hWnd: HWND,
            dwMode: u32,
            pData: *REGISTERWORDW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateContext: fn(
            self: *const IActiveIMMIME,
            phIMC: **HIMC__,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyContext: fn(
            self: *const IActiveIMMIME,
            hIME: *HIMC__,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumRegisterWordA: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            szReading: PSTR,
            dwStyle: u32,
            szRegister: PSTR,
            pData: *c_void,
            pEnum: **IEnumRegisterWordA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumRegisterWordW: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            szReading: PWSTR,
            dwStyle: u32,
            szRegister: PWSTR,
            pData: *c_void,
            pEnum: **IEnumRegisterWordW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EscapeA: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            hIMC: *HIMC__,
            uEscape: u32,
            pData: *c_void,
            plResult: *LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EscapeW: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            hIMC: *HIMC__,
            uEscape: u32,
            pData: *c_void,
            plResult: *LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCandidateListA: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            dwIndex: u32,
            uBufLen: u32,
            pCandList: *CANDIDATELIST,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCandidateListW: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            dwIndex: u32,
            uBufLen: u32,
            pCandList: *CANDIDATELIST,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCandidateListCountA: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            pdwListSize: *u32,
            pdwBufLen: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCandidateListCountW: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            pdwListSize: *u32,
            pdwBufLen: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCandidateWindow: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            dwIndex: u32,
            pCandidate: *CANDIDATEFORM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCompositionFontA: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            plf: *LOGFONTA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCompositionFontW: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            plf: *LOGFONTW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCompositionStringA: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            dwIndex: u32,
            dwBufLen: u32,
            plCopied: *i32,
            pBuf: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCompositionStringW: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            dwIndex: u32,
            dwBufLen: u32,
            plCopied: *i32,
            pBuf: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCompositionWindow: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            pCompForm: *COMPOSITIONFORM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContext: fn(
            self: *const IActiveIMMIME,
            hWnd: HWND,
            phIMC: **HIMC__,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConversionListA: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            hIMC: *HIMC__,
            pSrc: PSTR,
            uBufLen: u32,
            uFlag: u32,
            pDst: *CANDIDATELIST,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConversionListW: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            hIMC: *HIMC__,
            pSrc: PWSTR,
            uBufLen: u32,
            uFlag: u32,
            pDst: *CANDIDATELIST,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConversionStatus: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            pfdwConversion: *u32,
            pfdwSentence: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultIMEWnd: fn(
            self: *const IActiveIMMIME,
            hWnd: HWND,
            phDefWnd: *HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescriptionA: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            uBufLen: u32,
            szDescription: PSTR,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescriptionW: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            uBufLen: u32,
            szDescription: PWSTR,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGuideLineA: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            dwIndex: u32,
            dwBufLen: u32,
            pBuf: PSTR,
            pdwResult: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGuideLineW: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            dwIndex: u32,
            dwBufLen: u32,
            pBuf: PWSTR,
            pdwResult: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIMEFileNameA: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            uBufLen: u32,
            szFileName: PSTR,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIMEFileNameW: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            uBufLen: u32,
            szFileName: PWSTR,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOpenStatus: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            fdwIndex: u32,
            pdwProperty: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegisterWordStyleA: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            nItem: u32,
            pStyleBuf: *STYLEBUFA,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegisterWordStyleW: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            nItem: u32,
            pStyleBuf: *STYLEBUFW,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatusWindowPos: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            pptPos: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVirtualKey: fn(
            self: *const IActiveIMMIME,
            hWnd: HWND,
            puVirtualKey: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallIMEA: fn(
            self: *const IActiveIMMIME,
            szIMEFileName: PSTR,
            szLayoutText: PSTR,
            phKL: *HKL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallIMEW: fn(
            self: *const IActiveIMMIME,
            szIMEFileName: PWSTR,
            szLayoutText: PWSTR,
            phKL: *HKL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsIME: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsUIMessageA: fn(
            self: *const IActiveIMMIME,
            hWndIME: HWND,
            msg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsUIMessageW: fn(
            self: *const IActiveIMMIME,
            hWndIME: HWND,
            msg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyIME: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            dwAction: u32,
            dwIndex: u32,
            dwValue: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterWordA: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            szReading: PSTR,
            dwStyle: u32,
            szRegister: PSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterWordW: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            szReading: PWSTR,
            dwStyle: u32,
            szRegister: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseContext: fn(
            self: *const IActiveIMMIME,
            hWnd: HWND,
            hIMC: *HIMC__,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCandidateWindow: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            pCandidate: *CANDIDATEFORM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompositionFontA: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            plf: *LOGFONTA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompositionFontW: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            plf: *LOGFONTW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompositionStringA: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            dwIndex: u32,
            pComp: *c_void,
            dwCompLen: u32,
            pRead: *c_void,
            dwReadLen: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompositionStringW: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            dwIndex: u32,
            pComp: *c_void,
            dwCompLen: u32,
            pRead: *c_void,
            dwReadLen: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompositionWindow: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            pCompForm: *COMPOSITIONFORM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConversionStatus: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            fdwConversion: u32,
            fdwSentence: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpenStatus: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            fOpen: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStatusWindowPos: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            pptPos: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SimulateHotKey: fn(
            self: *const IActiveIMMIME,
            hWnd: HWND,
            dwHotKeyID: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterWordA: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            szReading: PSTR,
            dwStyle: u32,
            szUnregister: PSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterWordW: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            szReading: PWSTR,
            dwStyle: u32,
            szUnregister: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateMessage: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LockIMC: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            ppIMC: **__MIDL___MIDL_itf_dimm_0000_0000_0012,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnlockIMC: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIMCLockCount: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            pdwLockCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateIMCC: fn(
            self: *const IActiveIMMIME,
            dwSize: u32,
            phIMCC: **HIMCC__,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyIMCC: fn(
            self: *const IActiveIMMIME,
            hIMCC: *HIMCC__,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LockIMCC: fn(
            self: *const IActiveIMMIME,
            hIMCC: *HIMCC__,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnlockIMCC: fn(
            self: *const IActiveIMMIME,
            hIMCC: *HIMCC__,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReSizeIMCC: fn(
            self: *const IActiveIMMIME,
            hIMCC: *HIMCC__,
            dwSize: u32,
            phIMCC: **HIMCC__,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIMCCSize: fn(
            self: *const IActiveIMMIME,
            hIMCC: *HIMCC__,
            pdwSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIMCCLockCount: fn(
            self: *const IActiveIMMIME,
            hIMCC: *HIMCC__,
            pdwLockCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHotKey: fn(
            self: *const IActiveIMMIME,
            dwHotKeyID: u32,
            puModifiers: *u32,
            puVKey: *u32,
            phKL: *HKL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHotKey: fn(
            self: *const IActiveIMMIME,
            dwHotKeyID: u32,
            uModifiers: u32,
            uVKey: u32,
            hKL: HKL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSoftKeyboard: fn(
            self: *const IActiveIMMIME,
            uType: u32,
            hOwner: HWND,
            x: i32,
            y: i32,
            phSoftKbdWnd: *HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroySoftKeyboard: fn(
            self: *const IActiveIMMIME,
            hSoftKbdWnd: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowSoftKeyboard: fn(
            self: *const IActiveIMMIME,
            hSoftKbdWnd: HWND,
            nCmdShow: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCodePageA: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            uCodePage: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLangId: fn(
            self: *const IActiveIMMIME,
            hKL: HKL,
            plid: *u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        KeybdEvent: fn(
            self: *const IActiveIMMIME,
            lgidIME: u16,
            bVk: u8,
            bScan: u8,
            dwFlags: u32,
            dwExtraInfo: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LockModal: fn(
            self: *const IActiveIMMIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnlockModal: fn(
            self: *const IActiveIMMIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AssociateContextEx: fn(
            self: *const IActiveIMMIME,
            hWnd: HWND,
            hIMC: *HIMC__,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableIME: fn(
            self: *const IActiveIMMIME,
            idThread: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImeMenuItemsA: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            dwFlags: u32,
            dwType: u32,
            pImeParentMenu: *IMEMENUITEMINFOA,
            pImeMenu: *IMEMENUITEMINFOA,
            dwSize: u32,
            pdwResult: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImeMenuItemsW: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            dwFlags: u32,
            dwType: u32,
            pImeParentMenu: *IMEMENUITEMINFOW,
            pImeMenu: *IMEMENUITEMINFOW,
            dwSize: u32,
            pdwResult: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumInputContext: fn(
            self: *const IActiveIMMIME,
            idThread: u32,
            ppEnum: **IEnumInputContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestMessageA: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            wParam: WPARAM,
            lParam: LPARAM,
            plResult: *LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestMessageW: fn(
            self: *const IActiveIMMIME,
            hIMC: *HIMC__,
            wParam: WPARAM,
            lParam: LPARAM,
            plResult: *LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendIMCA: fn(
            self: *const IActiveIMMIME,
            hWnd: HWND,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
            plResult: *LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendIMCW: fn(
            self: *const IActiveIMMIME,
            hWnd: HWND,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
            plResult: *LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSleeping: fn(
            self: *const IActiveIMMIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_AssociateContext(self: *const T, hWnd: HWND, hIME: *HIMC__, phPrev: **HIMC__) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).AssociateContext(@ptrCast(*const IActiveIMMIME, self), hWnd, hIME, phPrev);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_ConfigureIMEA(self: *const T, hKL: HKL, hWnd: HWND, dwMode: u32, pData: *REGISTERWORDA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).ConfigureIMEA(@ptrCast(*const IActiveIMMIME, self), hKL, hWnd, dwMode, pData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_ConfigureIMEW(self: *const T, hKL: HKL, hWnd: HWND, dwMode: u32, pData: *REGISTERWORDW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).ConfigureIMEW(@ptrCast(*const IActiveIMMIME, self), hKL, hWnd, dwMode, pData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_CreateContext(self: *const T, phIMC: **HIMC__) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).CreateContext(@ptrCast(*const IActiveIMMIME, self), phIMC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_DestroyContext(self: *const T, hIME: *HIMC__) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).DestroyContext(@ptrCast(*const IActiveIMMIME, self), hIME);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_EnumRegisterWordA(self: *const T, hKL: HKL, szReading: PSTR, dwStyle: u32, szRegister: PSTR, pData: *c_void, pEnum: **IEnumRegisterWordA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).EnumRegisterWordA(@ptrCast(*const IActiveIMMIME, self), hKL, szReading, dwStyle, szRegister, pData, pEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_EnumRegisterWordW(self: *const T, hKL: HKL, szReading: PWSTR, dwStyle: u32, szRegister: PWSTR, pData: *c_void, pEnum: **IEnumRegisterWordW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).EnumRegisterWordW(@ptrCast(*const IActiveIMMIME, self), hKL, szReading, dwStyle, szRegister, pData, pEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_EscapeA(self: *const T, hKL: HKL, hIMC: *HIMC__, uEscape: u32, pData: *c_void, plResult: *LRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).EscapeA(@ptrCast(*const IActiveIMMIME, self), hKL, hIMC, uEscape, pData, plResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_EscapeW(self: *const T, hKL: HKL, hIMC: *HIMC__, uEscape: u32, pData: *c_void, plResult: *LRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).EscapeW(@ptrCast(*const IActiveIMMIME, self), hKL, hIMC, uEscape, pData, plResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetCandidateListA(self: *const T, hIMC: *HIMC__, dwIndex: u32, uBufLen: u32, pCandList: *CANDIDATELIST, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetCandidateListA(@ptrCast(*const IActiveIMMIME, self), hIMC, dwIndex, uBufLen, pCandList, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetCandidateListW(self: *const T, hIMC: *HIMC__, dwIndex: u32, uBufLen: u32, pCandList: *CANDIDATELIST, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetCandidateListW(@ptrCast(*const IActiveIMMIME, self), hIMC, dwIndex, uBufLen, pCandList, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetCandidateListCountA(self: *const T, hIMC: *HIMC__, pdwListSize: *u32, pdwBufLen: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetCandidateListCountA(@ptrCast(*const IActiveIMMIME, self), hIMC, pdwListSize, pdwBufLen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetCandidateListCountW(self: *const T, hIMC: *HIMC__, pdwListSize: *u32, pdwBufLen: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetCandidateListCountW(@ptrCast(*const IActiveIMMIME, self), hIMC, pdwListSize, pdwBufLen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetCandidateWindow(self: *const T, hIMC: *HIMC__, dwIndex: u32, pCandidate: *CANDIDATEFORM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetCandidateWindow(@ptrCast(*const IActiveIMMIME, self), hIMC, dwIndex, pCandidate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetCompositionFontA(self: *const T, hIMC: *HIMC__, plf: *LOGFONTA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetCompositionFontA(@ptrCast(*const IActiveIMMIME, self), hIMC, plf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetCompositionFontW(self: *const T, hIMC: *HIMC__, plf: *LOGFONTW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetCompositionFontW(@ptrCast(*const IActiveIMMIME, self), hIMC, plf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetCompositionStringA(self: *const T, hIMC: *HIMC__, dwIndex: u32, dwBufLen: u32, plCopied: *i32, pBuf: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetCompositionStringA(@ptrCast(*const IActiveIMMIME, self), hIMC, dwIndex, dwBufLen, plCopied, pBuf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetCompositionStringW(self: *const T, hIMC: *HIMC__, dwIndex: u32, dwBufLen: u32, plCopied: *i32, pBuf: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetCompositionStringW(@ptrCast(*const IActiveIMMIME, self), hIMC, dwIndex, dwBufLen, plCopied, pBuf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetCompositionWindow(self: *const T, hIMC: *HIMC__, pCompForm: *COMPOSITIONFORM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetCompositionWindow(@ptrCast(*const IActiveIMMIME, self), hIMC, pCompForm);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetContext(self: *const T, hWnd: HWND, phIMC: **HIMC__) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetContext(@ptrCast(*const IActiveIMMIME, self), hWnd, phIMC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetConversionListA(self: *const T, hKL: HKL, hIMC: *HIMC__, pSrc: PSTR, uBufLen: u32, uFlag: u32, pDst: *CANDIDATELIST, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetConversionListA(@ptrCast(*const IActiveIMMIME, self), hKL, hIMC, pSrc, uBufLen, uFlag, pDst, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetConversionListW(self: *const T, hKL: HKL, hIMC: *HIMC__, pSrc: PWSTR, uBufLen: u32, uFlag: u32, pDst: *CANDIDATELIST, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetConversionListW(@ptrCast(*const IActiveIMMIME, self), hKL, hIMC, pSrc, uBufLen, uFlag, pDst, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetConversionStatus(self: *const T, hIMC: *HIMC__, pfdwConversion: *u32, pfdwSentence: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetConversionStatus(@ptrCast(*const IActiveIMMIME, self), hIMC, pfdwConversion, pfdwSentence);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetDefaultIMEWnd(self: *const T, hWnd: HWND, phDefWnd: *HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetDefaultIMEWnd(@ptrCast(*const IActiveIMMIME, self), hWnd, phDefWnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetDescriptionA(self: *const T, hKL: HKL, uBufLen: u32, szDescription: PSTR, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetDescriptionA(@ptrCast(*const IActiveIMMIME, self), hKL, uBufLen, szDescription, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetDescriptionW(self: *const T, hKL: HKL, uBufLen: u32, szDescription: PWSTR, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetDescriptionW(@ptrCast(*const IActiveIMMIME, self), hKL, uBufLen, szDescription, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetGuideLineA(self: *const T, hIMC: *HIMC__, dwIndex: u32, dwBufLen: u32, pBuf: PSTR, pdwResult: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetGuideLineA(@ptrCast(*const IActiveIMMIME, self), hIMC, dwIndex, dwBufLen, pBuf, pdwResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetGuideLineW(self: *const T, hIMC: *HIMC__, dwIndex: u32, dwBufLen: u32, pBuf: PWSTR, pdwResult: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetGuideLineW(@ptrCast(*const IActiveIMMIME, self), hIMC, dwIndex, dwBufLen, pBuf, pdwResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetIMEFileNameA(self: *const T, hKL: HKL, uBufLen: u32, szFileName: PSTR, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetIMEFileNameA(@ptrCast(*const IActiveIMMIME, self), hKL, uBufLen, szFileName, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetIMEFileNameW(self: *const T, hKL: HKL, uBufLen: u32, szFileName: PWSTR, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetIMEFileNameW(@ptrCast(*const IActiveIMMIME, self), hKL, uBufLen, szFileName, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetOpenStatus(self: *const T, hIMC: *HIMC__) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetOpenStatus(@ptrCast(*const IActiveIMMIME, self), hIMC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetProperty(self: *const T, hKL: HKL, fdwIndex: u32, pdwProperty: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetProperty(@ptrCast(*const IActiveIMMIME, self), hKL, fdwIndex, pdwProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetRegisterWordStyleA(self: *const T, hKL: HKL, nItem: u32, pStyleBuf: *STYLEBUFA, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetRegisterWordStyleA(@ptrCast(*const IActiveIMMIME, self), hKL, nItem, pStyleBuf, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetRegisterWordStyleW(self: *const T, hKL: HKL, nItem: u32, pStyleBuf: *STYLEBUFW, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetRegisterWordStyleW(@ptrCast(*const IActiveIMMIME, self), hKL, nItem, pStyleBuf, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetStatusWindowPos(self: *const T, hIMC: *HIMC__, pptPos: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetStatusWindowPos(@ptrCast(*const IActiveIMMIME, self), hIMC, pptPos);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetVirtualKey(self: *const T, hWnd: HWND, puVirtualKey: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetVirtualKey(@ptrCast(*const IActiveIMMIME, self), hWnd, puVirtualKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_InstallIMEA(self: *const T, szIMEFileName: PSTR, szLayoutText: PSTR, phKL: *HKL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).InstallIMEA(@ptrCast(*const IActiveIMMIME, self), szIMEFileName, szLayoutText, phKL);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_InstallIMEW(self: *const T, szIMEFileName: PWSTR, szLayoutText: PWSTR, phKL: *HKL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).InstallIMEW(@ptrCast(*const IActiveIMMIME, self), szIMEFileName, szLayoutText, phKL);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_IsIME(self: *const T, hKL: HKL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).IsIME(@ptrCast(*const IActiveIMMIME, self), hKL);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_IsUIMessageA(self: *const T, hWndIME: HWND, msg: u32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).IsUIMessageA(@ptrCast(*const IActiveIMMIME, self), hWndIME, msg, wParam, lParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_IsUIMessageW(self: *const T, hWndIME: HWND, msg: u32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).IsUIMessageW(@ptrCast(*const IActiveIMMIME, self), hWndIME, msg, wParam, lParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_NotifyIME(self: *const T, hIMC: *HIMC__, dwAction: u32, dwIndex: u32, dwValue: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).NotifyIME(@ptrCast(*const IActiveIMMIME, self), hIMC, dwAction, dwIndex, dwValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_RegisterWordA(self: *const T, hKL: HKL, szReading: PSTR, dwStyle: u32, szRegister: PSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).RegisterWordA(@ptrCast(*const IActiveIMMIME, self), hKL, szReading, dwStyle, szRegister);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_RegisterWordW(self: *const T, hKL: HKL, szReading: PWSTR, dwStyle: u32, szRegister: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).RegisterWordW(@ptrCast(*const IActiveIMMIME, self), hKL, szReading, dwStyle, szRegister);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_ReleaseContext(self: *const T, hWnd: HWND, hIMC: *HIMC__) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).ReleaseContext(@ptrCast(*const IActiveIMMIME, self), hWnd, hIMC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_SetCandidateWindow(self: *const T, hIMC: *HIMC__, pCandidate: *CANDIDATEFORM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).SetCandidateWindow(@ptrCast(*const IActiveIMMIME, self), hIMC, pCandidate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_SetCompositionFontA(self: *const T, hIMC: *HIMC__, plf: *LOGFONTA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).SetCompositionFontA(@ptrCast(*const IActiveIMMIME, self), hIMC, plf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_SetCompositionFontW(self: *const T, hIMC: *HIMC__, plf: *LOGFONTW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).SetCompositionFontW(@ptrCast(*const IActiveIMMIME, self), hIMC, plf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_SetCompositionStringA(self: *const T, hIMC: *HIMC__, dwIndex: u32, pComp: *c_void, dwCompLen: u32, pRead: *c_void, dwReadLen: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).SetCompositionStringA(@ptrCast(*const IActiveIMMIME, self), hIMC, dwIndex, pComp, dwCompLen, pRead, dwReadLen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_SetCompositionStringW(self: *const T, hIMC: *HIMC__, dwIndex: u32, pComp: *c_void, dwCompLen: u32, pRead: *c_void, dwReadLen: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).SetCompositionStringW(@ptrCast(*const IActiveIMMIME, self), hIMC, dwIndex, pComp, dwCompLen, pRead, dwReadLen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_SetCompositionWindow(self: *const T, hIMC: *HIMC__, pCompForm: *COMPOSITIONFORM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).SetCompositionWindow(@ptrCast(*const IActiveIMMIME, self), hIMC, pCompForm);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_SetConversionStatus(self: *const T, hIMC: *HIMC__, fdwConversion: u32, fdwSentence: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).SetConversionStatus(@ptrCast(*const IActiveIMMIME, self), hIMC, fdwConversion, fdwSentence);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_SetOpenStatus(self: *const T, hIMC: *HIMC__, fOpen: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).SetOpenStatus(@ptrCast(*const IActiveIMMIME, self), hIMC, fOpen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_SetStatusWindowPos(self: *const T, hIMC: *HIMC__, pptPos: *POINT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).SetStatusWindowPos(@ptrCast(*const IActiveIMMIME, self), hIMC, pptPos);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_SimulateHotKey(self: *const T, hWnd: HWND, dwHotKeyID: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).SimulateHotKey(@ptrCast(*const IActiveIMMIME, self), hWnd, dwHotKeyID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_UnregisterWordA(self: *const T, hKL: HKL, szReading: PSTR, dwStyle: u32, szUnregister: PSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).UnregisterWordA(@ptrCast(*const IActiveIMMIME, self), hKL, szReading, dwStyle, szUnregister);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_UnregisterWordW(self: *const T, hKL: HKL, szReading: PWSTR, dwStyle: u32, szUnregister: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).UnregisterWordW(@ptrCast(*const IActiveIMMIME, self), hKL, szReading, dwStyle, szUnregister);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GenerateMessage(self: *const T, hIMC: *HIMC__) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GenerateMessage(@ptrCast(*const IActiveIMMIME, self), hIMC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_LockIMC(self: *const T, hIMC: *HIMC__, ppIMC: **__MIDL___MIDL_itf_dimm_0000_0000_0012) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).LockIMC(@ptrCast(*const IActiveIMMIME, self), hIMC, ppIMC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_UnlockIMC(self: *const T, hIMC: *HIMC__) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).UnlockIMC(@ptrCast(*const IActiveIMMIME, self), hIMC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetIMCLockCount(self: *const T, hIMC: *HIMC__, pdwLockCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetIMCLockCount(@ptrCast(*const IActiveIMMIME, self), hIMC, pdwLockCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_CreateIMCC(self: *const T, dwSize: u32, phIMCC: **HIMCC__) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).CreateIMCC(@ptrCast(*const IActiveIMMIME, self), dwSize, phIMCC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_DestroyIMCC(self: *const T, hIMCC: *HIMCC__) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).DestroyIMCC(@ptrCast(*const IActiveIMMIME, self), hIMCC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_LockIMCC(self: *const T, hIMCC: *HIMCC__, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).LockIMCC(@ptrCast(*const IActiveIMMIME, self), hIMCC, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_UnlockIMCC(self: *const T, hIMCC: *HIMCC__) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).UnlockIMCC(@ptrCast(*const IActiveIMMIME, self), hIMCC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_ReSizeIMCC(self: *const T, hIMCC: *HIMCC__, dwSize: u32, phIMCC: **HIMCC__) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).ReSizeIMCC(@ptrCast(*const IActiveIMMIME, self), hIMCC, dwSize, phIMCC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetIMCCSize(self: *const T, hIMCC: *HIMCC__, pdwSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetIMCCSize(@ptrCast(*const IActiveIMMIME, self), hIMCC, pdwSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetIMCCLockCount(self: *const T, hIMCC: *HIMCC__, pdwLockCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetIMCCLockCount(@ptrCast(*const IActiveIMMIME, self), hIMCC, pdwLockCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetHotKey(self: *const T, dwHotKeyID: u32, puModifiers: *u32, puVKey: *u32, phKL: *HKL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetHotKey(@ptrCast(*const IActiveIMMIME, self), dwHotKeyID, puModifiers, puVKey, phKL);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_SetHotKey(self: *const T, dwHotKeyID: u32, uModifiers: u32, uVKey: u32, hKL: HKL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).SetHotKey(@ptrCast(*const IActiveIMMIME, self), dwHotKeyID, uModifiers, uVKey, hKL);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_CreateSoftKeyboard(self: *const T, uType: u32, hOwner: HWND, x: i32, y: i32, phSoftKbdWnd: *HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).CreateSoftKeyboard(@ptrCast(*const IActiveIMMIME, self), uType, hOwner, x, y, phSoftKbdWnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_DestroySoftKeyboard(self: *const T, hSoftKbdWnd: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).DestroySoftKeyboard(@ptrCast(*const IActiveIMMIME, self), hSoftKbdWnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_ShowSoftKeyboard(self: *const T, hSoftKbdWnd: HWND, nCmdShow: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).ShowSoftKeyboard(@ptrCast(*const IActiveIMMIME, self), hSoftKbdWnd, nCmdShow);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetCodePageA(self: *const T, hKL: HKL, uCodePage: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetCodePageA(@ptrCast(*const IActiveIMMIME, self), hKL, uCodePage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetLangId(self: *const T, hKL: HKL, plid: *u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetLangId(@ptrCast(*const IActiveIMMIME, self), hKL, plid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_KeybdEvent(self: *const T, lgidIME: u16, bVk: u8, bScan: u8, dwFlags: u32, dwExtraInfo: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).KeybdEvent(@ptrCast(*const IActiveIMMIME, self), lgidIME, bVk, bScan, dwFlags, dwExtraInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_LockModal(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).LockModal(@ptrCast(*const IActiveIMMIME, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_UnlockModal(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).UnlockModal(@ptrCast(*const IActiveIMMIME, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_AssociateContextEx(self: *const T, hWnd: HWND, hIMC: *HIMC__, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).AssociateContextEx(@ptrCast(*const IActiveIMMIME, self), hWnd, hIMC, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_DisableIME(self: *const T, idThread: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).DisableIME(@ptrCast(*const IActiveIMMIME, self), idThread);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetImeMenuItemsA(self: *const T, hIMC: *HIMC__, dwFlags: u32, dwType: u32, pImeParentMenu: *IMEMENUITEMINFOA, pImeMenu: *IMEMENUITEMINFOA, dwSize: u32, pdwResult: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetImeMenuItemsA(@ptrCast(*const IActiveIMMIME, self), hIMC, dwFlags, dwType, pImeParentMenu, pImeMenu, dwSize, pdwResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_GetImeMenuItemsW(self: *const T, hIMC: *HIMC__, dwFlags: u32, dwType: u32, pImeParentMenu: *IMEMENUITEMINFOW, pImeMenu: *IMEMENUITEMINFOW, dwSize: u32, pdwResult: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).GetImeMenuItemsW(@ptrCast(*const IActiveIMMIME, self), hIMC, dwFlags, dwType, pImeParentMenu, pImeMenu, dwSize, pdwResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_EnumInputContext(self: *const T, idThread: u32, ppEnum: **IEnumInputContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).EnumInputContext(@ptrCast(*const IActiveIMMIME, self), idThread, ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_RequestMessageA(self: *const T, hIMC: *HIMC__, wParam: WPARAM, lParam: LPARAM, plResult: *LRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).RequestMessageA(@ptrCast(*const IActiveIMMIME, self), hIMC, wParam, lParam, plResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_RequestMessageW(self: *const T, hIMC: *HIMC__, wParam: WPARAM, lParam: LPARAM, plResult: *LRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).RequestMessageW(@ptrCast(*const IActiveIMMIME, self), hIMC, wParam, lParam, plResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_SendIMCA(self: *const T, hWnd: HWND, uMsg: u32, wParam: WPARAM, lParam: LPARAM, plResult: *LRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).SendIMCA(@ptrCast(*const IActiveIMMIME, self), hWnd, uMsg, wParam, lParam, plResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_SendIMCW(self: *const T, hWnd: HWND, uMsg: u32, wParam: WPARAM, lParam: LPARAM, plResult: *LRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).SendIMCW(@ptrCast(*const IActiveIMMIME, self), hWnd, uMsg, wParam, lParam, plResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIMMIME_IsSleeping(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIMMIME.VTable, self.vtable).IsSleeping(@ptrCast(*const IActiveIMMIME, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IActiveIME_Value = @import("../zig.zig").Guid.initString("6FE20962-D077-11D0-8FE7-00AA006BCC59");
pub const IID_IActiveIME = &IID_IActiveIME_Value;
pub const IActiveIME = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Inquire: fn(
            self: *const IActiveIME,
            dwSystemInfoFlags: u32,
            pIMEInfo: *__MIDL___MIDL_itf_dimm_0000_0000_0014,
            szWndClass: PWSTR,
            pdwPrivate: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConversionList: fn(
            self: *const IActiveIME,
            hIMC: *HIMC__,
            szSource: PWSTR,
            uFlag: u32,
            uBufLen: u32,
            pDest: *CANDIDATELIST,
            puCopied: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Configure: fn(
            self: *const IActiveIME,
            hKL: HKL,
            hWnd: HWND,
            dwMode: u32,
            pRegisterWord: *REGISTERWORDW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Destroy: fn(
            self: *const IActiveIME,
            uReserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Escape: fn(
            self: *const IActiveIME,
            hIMC: *HIMC__,
            uEscape: u32,
            pData: *c_void,
            plResult: *LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActiveContext: fn(
            self: *const IActiveIME,
            hIMC: *HIMC__,
            fFlag: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessKey: fn(
            self: *const IActiveIME,
            hIMC: *HIMC__,
            uVirKey: u32,
            lParam: u32,
            pbKeyState: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Notify: fn(
            self: *const IActiveIME,
            hIMC: *HIMC__,
            dwAction: u32,
            dwIndex: u32,
            dwValue: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Select: fn(
            self: *const IActiveIME,
            hIMC: *HIMC__,
            fSelect: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompositionString: fn(
            self: *const IActiveIME,
            hIMC: *HIMC__,
            dwIndex: u32,
            pComp: *c_void,
            dwCompLen: u32,
            pRead: *c_void,
            dwReadLen: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ToAsciiEx: fn(
            self: *const IActiveIME,
            uVirKey: u32,
            uScanCode: u32,
            pbKeyState: *u8,
            fuState: u32,
            hIMC: *HIMC__,
            pdwTransBuf: *u32,
            puSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterWord: fn(
            self: *const IActiveIME,
            szReading: PWSTR,
            dwStyle: u32,
            szString: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterWord: fn(
            self: *const IActiveIME,
            szReading: PWSTR,
            dwStyle: u32,
            szString: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegisterWordStyle: fn(
            self: *const IActiveIME,
            nItem: u32,
            pStyleBuf: *STYLEBUFW,
            puBufSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumRegisterWord: fn(
            self: *const IActiveIME,
            szReading: PWSTR,
            dwStyle: u32,
            szRegister: PWSTR,
            pData: *c_void,
            ppEnum: **IEnumRegisterWordW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCodePageA: fn(
            self: *const IActiveIME,
            uCodePage: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLangId: fn(
            self: *const IActiveIME,
            plid: *u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME_Inquire(self: *const T, dwSystemInfoFlags: u32, pIMEInfo: *__MIDL___MIDL_itf_dimm_0000_0000_0014, szWndClass: PWSTR, pdwPrivate: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME.VTable, self.vtable).Inquire(@ptrCast(*const IActiveIME, self), dwSystemInfoFlags, pIMEInfo, szWndClass, pdwPrivate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME_ConversionList(self: *const T, hIMC: *HIMC__, szSource: PWSTR, uFlag: u32, uBufLen: u32, pDest: *CANDIDATELIST, puCopied: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME.VTable, self.vtable).ConversionList(@ptrCast(*const IActiveIME, self), hIMC, szSource, uFlag, uBufLen, pDest, puCopied);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME_Configure(self: *const T, hKL: HKL, hWnd: HWND, dwMode: u32, pRegisterWord: *REGISTERWORDW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME.VTable, self.vtable).Configure(@ptrCast(*const IActiveIME, self), hKL, hWnd, dwMode, pRegisterWord);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME_Destroy(self: *const T, uReserved: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME.VTable, self.vtable).Destroy(@ptrCast(*const IActiveIME, self), uReserved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME_Escape(self: *const T, hIMC: *HIMC__, uEscape: u32, pData: *c_void, plResult: *LRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME.VTable, self.vtable).Escape(@ptrCast(*const IActiveIME, self), hIMC, uEscape, pData, plResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME_SetActiveContext(self: *const T, hIMC: *HIMC__, fFlag: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME.VTable, self.vtable).SetActiveContext(@ptrCast(*const IActiveIME, self), hIMC, fFlag);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME_ProcessKey(self: *const T, hIMC: *HIMC__, uVirKey: u32, lParam: u32, pbKeyState: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME.VTable, self.vtable).ProcessKey(@ptrCast(*const IActiveIME, self), hIMC, uVirKey, lParam, pbKeyState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME_Notify(self: *const T, hIMC: *HIMC__, dwAction: u32, dwIndex: u32, dwValue: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME.VTable, self.vtable).Notify(@ptrCast(*const IActiveIME, self), hIMC, dwAction, dwIndex, dwValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME_Select(self: *const T, hIMC: *HIMC__, fSelect: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME.VTable, self.vtable).Select(@ptrCast(*const IActiveIME, self), hIMC, fSelect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME_SetCompositionString(self: *const T, hIMC: *HIMC__, dwIndex: u32, pComp: *c_void, dwCompLen: u32, pRead: *c_void, dwReadLen: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME.VTable, self.vtable).SetCompositionString(@ptrCast(*const IActiveIME, self), hIMC, dwIndex, pComp, dwCompLen, pRead, dwReadLen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME_ToAsciiEx(self: *const T, uVirKey: u32, uScanCode: u32, pbKeyState: *u8, fuState: u32, hIMC: *HIMC__, pdwTransBuf: *u32, puSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME.VTable, self.vtable).ToAsciiEx(@ptrCast(*const IActiveIME, self), uVirKey, uScanCode, pbKeyState, fuState, hIMC, pdwTransBuf, puSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME_RegisterWord(self: *const T, szReading: PWSTR, dwStyle: u32, szString: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME.VTable, self.vtable).RegisterWord(@ptrCast(*const IActiveIME, self), szReading, dwStyle, szString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME_UnregisterWord(self: *const T, szReading: PWSTR, dwStyle: u32, szString: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME.VTable, self.vtable).UnregisterWord(@ptrCast(*const IActiveIME, self), szReading, dwStyle, szString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME_GetRegisterWordStyle(self: *const T, nItem: u32, pStyleBuf: *STYLEBUFW, puBufSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME.VTable, self.vtable).GetRegisterWordStyle(@ptrCast(*const IActiveIME, self), nItem, pStyleBuf, puBufSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME_EnumRegisterWord(self: *const T, szReading: PWSTR, dwStyle: u32, szRegister: PWSTR, pData: *c_void, ppEnum: **IEnumRegisterWordW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME.VTable, self.vtable).EnumRegisterWord(@ptrCast(*const IActiveIME, self), szReading, dwStyle, szRegister, pData, ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME_GetCodePageA(self: *const T, uCodePage: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME.VTable, self.vtable).GetCodePageA(@ptrCast(*const IActiveIME, self), uCodePage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME_GetLangId(self: *const T, plid: *u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME.VTable, self.vtable).GetLangId(@ptrCast(*const IActiveIME, self), plid);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IActiveIME2_Value = @import("../zig.zig").Guid.initString("E1C4BF0E-2D53-11D2-93E1-0060B067B86E");
pub const IID_IActiveIME2 = &IID_IActiveIME2_Value;
pub const IActiveIME2 = extern struct {
    pub const VTable = extern struct {
        base: IActiveIME.VTable,
        Sleep: fn(
            self: *const IActiveIME2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unsleep: fn(
            self: *const IActiveIME2,
            fDead: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IActiveIME.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME2_Sleep(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME2.VTable, self.vtable).Sleep(@ptrCast(*const IActiveIME2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IActiveIME2_Unsleep(self: *const T, fDead: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IActiveIME2.VTable, self.vtable).Unsleep(@ptrCast(*const IActiveIME2, self), fDead);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const NC_ADDRESS = extern struct {
    pAddrInfo: *NET_ADDRESS_INFO,
    PortNumber: u16,
    PrefixLength: u8,
};

pub const APPCATEGORYINFO = extern struct {
    Locale: u32,
    pszDescription: PWSTR,
    AppCategoryId: Guid,
};

pub const APPCATEGORYINFOLIST = extern struct {
    cCategory: u32,
    pCategoryInfo: *APPCATEGORYINFO,
};

const IID_IInitializeWithFile_Value = @import("../zig.zig").Guid.initString("B7D14566-0509-4CCE-A71F-0A554233BD9B");
pub const IID_IInitializeWithFile = &IID_IInitializeWithFile_Value;
pub const IInitializeWithFile = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IInitializeWithFile,
            pszFilePath: [*:0]const u16,
            grfMode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInitializeWithFile_Initialize(self: *const T, pszFilePath: [*:0]const u16, grfMode: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInitializeWithFile.VTable, self.vtable).Initialize(@ptrCast(*const IInitializeWithFile, self), pszFilePath, grfMode);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IInitializeWithStream_Value = @import("../zig.zig").Guid.initString("B824B49D-22AC-4161-AC8A-9916E8FA3F7F");
pub const IID_IInitializeWithStream = &IID_IInitializeWithStream_Value;
pub const IInitializeWithStream = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IInitializeWithStream,
            pstream: *IStream,
            grfMode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IInitializeWithStream_Initialize(self: *const T, pstream: *IStream, grfMode: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IInitializeWithStream.VTable, self.vtable).Initialize(@ptrCast(*const IInitializeWithStream, self), pstream, grfMode);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_INamedPropertyStore_Value = @import("../zig.zig").Guid.initString("71604B0F-97B0-4764-8577-2F13E98A1422");
pub const IID_INamedPropertyStore = &IID_INamedPropertyStore_Value;
pub const INamedPropertyStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNamedValue: fn(
            self: *const INamedPropertyStore,
            pszName: [*:0]const u16,
            ppropvar: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNamedValue: fn(
            self: *const INamedPropertyStore,
            pszName: [*:0]const u16,
            propvar: *const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameCount: fn(
            self: *const INamedPropertyStore,
            pdwCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameAt: fn(
            self: *const INamedPropertyStore,
            iProp: u32,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INamedPropertyStore_GetNamedValue(self: *const T, pszName: [*:0]const u16, ppropvar: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const INamedPropertyStore.VTable, self.vtable).GetNamedValue(@ptrCast(*const INamedPropertyStore, self), pszName, ppropvar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INamedPropertyStore_SetNamedValue(self: *const T, pszName: [*:0]const u16, propvar: *const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const INamedPropertyStore.VTable, self.vtable).SetNamedValue(@ptrCast(*const INamedPropertyStore, self), pszName, propvar);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INamedPropertyStore_GetNameCount(self: *const T, pdwCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const INamedPropertyStore.VTable, self.vtable).GetNameCount(@ptrCast(*const INamedPropertyStore, self), pdwCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn INamedPropertyStore_GetNameAt(self: *const T, iProp: u32, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const INamedPropertyStore.VTable, self.vtable).GetNameAt(@ptrCast(*const INamedPropertyStore, self), iProp, pbstrName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjectWithPropertyKey_Value = @import("../zig.zig").Guid.initString("FC0CA0A7-C316-4FD2-9031-3E628E6D4F23");
pub const IID_IObjectWithPropertyKey = &IID_IObjectWithPropertyKey_Value;
pub const IObjectWithPropertyKey = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetPropertyKey: fn(
            self: *const IObjectWithPropertyKey,
            key: *const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyKey: fn(
            self: *const IObjectWithPropertyKey,
            pkey: *PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectWithPropertyKey_SetPropertyKey(self: *const T, key: *const PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectWithPropertyKey.VTable, self.vtable).SetPropertyKey(@ptrCast(*const IObjectWithPropertyKey, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectWithPropertyKey_GetPropertyKey(self: *const T, pkey: *PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectWithPropertyKey.VTable, self.vtable).GetPropertyKey(@ptrCast(*const IObjectWithPropertyKey, self), pkey);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDelayedPropertyStoreFactory_Value = @import("../zig.zig").Guid.initString("40D4577F-E237-4BDB-BD69-58F089431B6A");
pub const IID_IDelayedPropertyStoreFactory = &IID_IDelayedPropertyStoreFactory_Value;
pub const IDelayedPropertyStoreFactory = extern struct {
    pub const VTable = extern struct {
        base: IPropertyStoreFactory.VTable,
        GetDelayedPropertyStore: fn(
            self: *const IDelayedPropertyStoreFactory,
            flags: GETPROPERTYSTOREFLAGS,
            dwStoreId: u32,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPropertyStoreFactory.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDelayedPropertyStoreFactory_GetDelayedPropertyStore(self: *const T, flags: GETPROPERTYSTOREFLAGS, dwStoreId: u32, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDelayedPropertyStoreFactory.VTable, self.vtable).GetDelayedPropertyStore(@ptrCast(*const IDelayedPropertyStoreFactory, self), flags, dwStoreId, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPersistSerializedPropStorage_Value = @import("../zig.zig").Guid.initString("E318AD57-0AA0-450F-ACA5-6FAB7103D917");
pub const IID_IPersistSerializedPropStorage = &IID_IPersistSerializedPropStorage_Value;
pub const IPersistSerializedPropStorage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFlags: fn(
            self: *const IPersistSerializedPropStorage,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPropertyStorage: fn(
            self: *const IPersistSerializedPropStorage,
            psps: [*]SERIALIZEDPROPSTORAGE,
            cb: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStorage: fn(
            self: *const IPersistSerializedPropStorage,
            ppsps: **SERIALIZEDPROPSTORAGE,
            pcb: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPersistSerializedPropStorage_SetFlags(self: *const T, flags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPersistSerializedPropStorage.VTable, self.vtable).SetFlags(@ptrCast(*const IPersistSerializedPropStorage, self), flags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPersistSerializedPropStorage_SetPropertyStorage(self: *const T, psps: [*]SERIALIZEDPROPSTORAGE, cb: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPersistSerializedPropStorage.VTable, self.vtable).SetPropertyStorage(@ptrCast(*const IPersistSerializedPropStorage, self), psps, cb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPersistSerializedPropStorage_GetPropertyStorage(self: *const T, ppsps: **SERIALIZEDPROPSTORAGE, pcb: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPersistSerializedPropStorage.VTable, self.vtable).GetPropertyStorage(@ptrCast(*const IPersistSerializedPropStorage, self), ppsps, pcb);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPersistSerializedPropStorage2_Value = @import("../zig.zig").Guid.initString("77EFFA68-4F98-4366-BA72-573B3D880571");
pub const IID_IPersistSerializedPropStorage2 = &IID_IPersistSerializedPropStorage2_Value;
pub const IPersistSerializedPropStorage2 = extern struct {
    pub const VTable = extern struct {
        base: IPersistSerializedPropStorage.VTable,
        GetPropertyStorageSize: fn(
            self: *const IPersistSerializedPropStorage2,
            pcb: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStorageBuffer: fn(
            self: *const IPersistSerializedPropStorage2,
            psps: [*]SERIALIZEDPROPSTORAGE,
            cb: u32,
            pcbWritten: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPersistSerializedPropStorage.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPersistSerializedPropStorage2_GetPropertyStorageSize(self: *const T, pcb: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPersistSerializedPropStorage2.VTable, self.vtable).GetPropertyStorageSize(@ptrCast(*const IPersistSerializedPropStorage2, self), pcb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPersistSerializedPropStorage2_GetPropertyStorageBuffer(self: *const T, psps: [*]SERIALIZEDPROPSTORAGE, cb: u32, pcbWritten: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPersistSerializedPropStorage2.VTable, self.vtable).GetPropertyStorageBuffer(@ptrCast(*const IPersistSerializedPropStorage2, self), psps, cb, pcbWritten);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICreateObject_Value = @import("../zig.zig").Guid.initString("75121952-E0D0-43E5-9380-1D80483ACF72");
pub const IID_ICreateObject = &IID_ICreateObject_Value;
pub const ICreateObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateObject: fn(
            self: *const ICreateObject,
            clsid: *const Guid,
            pUnkOuter: *IUnknown,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICreateObject_CreateObject(self: *const T, clsid: *const Guid, pUnkOuter: *IUnknown, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICreateObject.VTable, self.vtable).CreateObject(@ptrCast(*const ICreateObject, self), clsid, pUnkOuter, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SERIALIZEDPROPERTYVALUE = extern struct {
    dwType: u32,
    rgb: [1]u8,
};

pub const ShellWindowTypeConstants = extern enum(i32) {
    SWC_EXPLORER = 0,
    SWC_BROWSER = 1,
    SWC_3RDPARTY = 2,
    SWC_CALLBACK = 4,
    SWC_DESKTOP = 8,
};
pub const SWC_EXPLORER = ShellWindowTypeConstants.SWC_EXPLORER;
pub const SWC_BROWSER = ShellWindowTypeConstants.SWC_BROWSER;
pub const SWC_3RDPARTY = ShellWindowTypeConstants.SWC_3RDPARTY;
pub const SWC_CALLBACK = ShellWindowTypeConstants.SWC_CALLBACK;
pub const SWC_DESKTOP = ShellWindowTypeConstants.SWC_DESKTOP;

pub const ShellWindowFindWindowOptions = extern enum(i32) {
    SWFO_NEEDDISPATCH = 1,
    SWFO_INCLUDEPENDING = 2,
    SWFO_COOKIEPASSED = 4,
};
pub const SWFO_NEEDDISPATCH = ShellWindowFindWindowOptions.SWFO_NEEDDISPATCH;
pub const SWFO_INCLUDEPENDING = ShellWindowFindWindowOptions.SWFO_INCLUDEPENDING;
pub const SWFO_COOKIEPASSED = ShellWindowFindWindowOptions.SWFO_COOKIEPASSED;

const IID_IShellWindows_Value = @import("../zig.zig").Guid.initString("85CB6900-4D95-11CF-960C-0080C7F4EE85");
pub const IID_IShellWindows = &IID_IShellWindows_Value;
pub const IShellWindows = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const IShellWindows,
            Count: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const IShellWindows,
            index: VARIANT,
            Folder: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _NewEnum: fn(
            self: *const IShellWindows,
            ppunk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Register: fn(
            self: *const IShellWindows,
            pid: *IDispatch,
            hwnd: i32,
            swClass: i32,
            plCookie: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterPending: fn(
            self: *const IShellWindows,
            lThreadId: i32,
            pvarloc: *VARIANT,
            pvarlocRoot: *VARIANT,
            swClass: i32,
            plCookie: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Revoke: fn(
            self: *const IShellWindows,
            lCookie: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNavigate: fn(
            self: *const IShellWindows,
            lCookie: i32,
            pvarLoc: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnActivated: fn(
            self: *const IShellWindows,
            lCookie: i32,
            fActive: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindWindowSW: fn(
            self: *const IShellWindows,
            pvarLoc: *VARIANT,
            pvarLocRoot: *VARIANT,
            swClass: i32,
            phwnd: *i32,
            swfwOptions: i32,
            ppdispOut: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCreated: fn(
            self: *const IShellWindows,
            lCookie: i32,
            punk: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessAttachDetach: fn(
            self: *const IShellWindows,
            fAttach: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellWindows_get_Count(self: *const T, Count: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellWindows.VTable, self.vtable).get_Count(@ptrCast(*const IShellWindows, self), Count);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellWindows_Item(self: *const T, index: VARIANT, Folder: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellWindows.VTable, self.vtable).Item(@ptrCast(*const IShellWindows, self), index, Folder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellWindows__NewEnum(self: *const T, ppunk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellWindows.VTable, self.vtable)._NewEnum(@ptrCast(*const IShellWindows, self), ppunk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellWindows_Register(self: *const T, pid: *IDispatch, hwnd: i32, swClass: i32, plCookie: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellWindows.VTable, self.vtable).Register(@ptrCast(*const IShellWindows, self), pid, hwnd, swClass, plCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellWindows_RegisterPending(self: *const T, lThreadId: i32, pvarloc: *VARIANT, pvarlocRoot: *VARIANT, swClass: i32, plCookie: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellWindows.VTable, self.vtable).RegisterPending(@ptrCast(*const IShellWindows, self), lThreadId, pvarloc, pvarlocRoot, swClass, plCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellWindows_Revoke(self: *const T, lCookie: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellWindows.VTable, self.vtable).Revoke(@ptrCast(*const IShellWindows, self), lCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellWindows_OnNavigate(self: *const T, lCookie: i32, pvarLoc: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellWindows.VTable, self.vtable).OnNavigate(@ptrCast(*const IShellWindows, self), lCookie, pvarLoc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellWindows_OnActivated(self: *const T, lCookie: i32, fActive: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellWindows.VTable, self.vtable).OnActivated(@ptrCast(*const IShellWindows, self), lCookie, fActive);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellWindows_FindWindowSW(self: *const T, pvarLoc: *VARIANT, pvarLocRoot: *VARIANT, swClass: i32, phwnd: *i32, swfwOptions: i32, ppdispOut: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellWindows.VTable, self.vtable).FindWindowSW(@ptrCast(*const IShellWindows, self), pvarLoc, pvarLocRoot, swClass, phwnd, swfwOptions, ppdispOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellWindows_OnCreated(self: *const T, lCookie: i32, punk: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellWindows.VTable, self.vtable).OnCreated(@ptrCast(*const IShellWindows, self), lCookie, punk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IShellWindows_ProcessAttachDetach(self: *const T, fAttach: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IShellWindows.VTable, self.vtable).ProcessAttachDetach(@ptrCast(*const IShellWindows, self), fAttach);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (699)
//--------------------------------------------------------------------------------
pub extern "USER32" fn SetWindowContextHelpId(
    param0: HWND,
    param1: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetWindowContextHelpId(
    param0: HWND,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn SetMenuContextHelpId(
    param0: HMENU,
    param1: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMenuContextHelpId(
    param0: HMENU,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn WinHelpA(
    hWndMain: HWND,
    lpszHelp: ?[*:0]const u8,
    uCommand: u32,
    dwData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn WinHelpW(
    hWndMain: HWND,
    lpszHelp: ?[*:0]const u16,
    uCommand: u32,
    dwData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMCTL32" fn SetWindowSubclass(
    hWnd: HWND,
    pfnSubclass: SUBCLASSPROC,
    uIdSubclass: ?*c_void,
    dwRefData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMCTL32" fn GetWindowSubclass(
    hWnd: HWND,
    pfnSubclass: SUBCLASSPROC,
    uIdSubclass: ?*c_void,
    pdwRefData: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMCTL32" fn RemoveWindowSubclass(
    hWnd: HWND,
    pfnSubclass: SUBCLASSPROC,
    uIdSubclass: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMCTL32" fn DefSubclassProc(
    hWnd: HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "SHELL32" fn CommandLineToArgvW(
    lpCmdLine: [*:0]const u16,
    pNumArgs: *i32,
) callconv(@import("std").os.windows.WINAPI) *PWSTR;

pub extern "SHELL32" fn DragQueryFileA(
    hDrop: *HDROP__,
    iFile: u32,
    lpszFile: ?[*:0]u8,
    cch: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHELL32" fn DragQueryFileW(
    hDrop: *HDROP__,
    iFile: u32,
    lpszFile: ?[*:0]u16,
    cch: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHELL32" fn DragQueryPoint(
    hDrop: *HDROP__,
    ppt: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn DragFinish(
    hDrop: *HDROP__,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHELL32" fn DragAcceptFiles(
    hWnd: HWND,
    fAccept: BOOL,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHELL32" fn ShellExecuteA(
    hwnd: HWND,
    lpOperation: ?[*:0]const u8,
    lpFile: [*:0]const u8,
    lpParameters: ?[*:0]const u8,
    lpDirectory: ?[*:0]const u8,
    nShowCmd: i32,
) callconv(@import("std").os.windows.WINAPI) HINSTANCE;

pub extern "SHELL32" fn ShellExecuteW(
    hwnd: HWND,
    lpOperation: ?[*:0]const u16,
    lpFile: [*:0]const u16,
    lpParameters: ?[*:0]const u16,
    lpDirectory: ?[*:0]const u16,
    nShowCmd: i32,
) callconv(@import("std").os.windows.WINAPI) HINSTANCE;

pub extern "SHELL32" fn FindExecutableA(
    lpFile: [*:0]const u8,
    lpDirectory: ?[*:0]const u8,
    lpResult: *[260]u8,
) callconv(@import("std").os.windows.WINAPI) HINSTANCE;

pub extern "SHELL32" fn FindExecutableW(
    lpFile: [*:0]const u16,
    lpDirectory: ?[*:0]const u16,
    lpResult: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) HINSTANCE;

pub extern "SHELL32" fn ShellAboutA(
    hWnd: HWND,
    szApp: [*:0]const u8,
    szOtherStuff: ?[*:0]const u8,
    hIcon: HICON,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn ShellAboutW(
    hWnd: HWND,
    szApp: [*:0]const u16,
    szOtherStuff: ?[*:0]const u16,
    hIcon: HICON,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn DuplicateIcon(
    hInst: HINSTANCE,
    hIcon: HICON,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "SHELL32" fn ExtractAssociatedIconA(
    hInst: HINSTANCE,
    pszIconPath: *[128]u8,
    piIcon: *u16,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "SHELL32" fn ExtractAssociatedIconW(
    hInst: HINSTANCE,
    pszIconPath: *[128]u16,
    piIcon: *u16,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "SHELL32" fn ExtractAssociatedIconExA(
    hInst: HINSTANCE,
    pszIconPath: *[128]u8,
    piIconIndex: *u16,
    piIconId: *u16,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "SHELL32" fn ExtractAssociatedIconExW(
    hInst: HINSTANCE,
    pszIconPath: *[128]u16,
    piIconIndex: *u16,
    piIconId: *u16,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "SHELL32" fn ExtractIconA(
    hInst: HINSTANCE,
    pszExeFileName: [*:0]const u8,
    nIconIndex: u32,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "SHELL32" fn ExtractIconW(
    hInst: HINSTANCE,
    pszExeFileName: [*:0]const u16,
    nIconIndex: u32,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "SHELL32" fn SHAppBarMessage(
    dwMessage: u32,
    pData: *APPBARDATA,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "SHELL32" fn DoEnvironmentSubstA(
    pszSrc: [*:0]u8,
    cchSrc: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHELL32" fn DoEnvironmentSubstW(
    pszSrc: [*:0]u16,
    cchSrc: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHELL32" fn ExtractIconExA(
    lpszFile: [*:0]const u8,
    nIconIndex: i32,
    phiconLarge: ?[*]HICON,
    phiconSmall: ?[*]HICON,
    nIcons: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHELL32" fn ExtractIconExW(
    lpszFile: [*:0]const u16,
    nIconIndex: i32,
    phiconLarge: ?[*]HICON,
    phiconSmall: ?[*]HICON,
    nIcons: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHELL32" fn SHFileOperationA(
    lpFileOp: *SHFILEOPSTRUCTA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn SHFileOperationW(
    lpFileOp: *SHFILEOPSTRUCTW,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn SHFreeNameMappings(
    hNameMappings: HANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHELL32" fn ShellExecuteExA(
    pExecInfo: *SHELLEXECUTEINFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn ShellExecuteExW(
    pExecInfo: *SHELLEXECUTEINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHCreateProcessAsUserW(
    pscpi: *SHCREATEPROCESSINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHEvaluateSystemCommandTemplate(
    pszCmdTemplate: [*:0]const u16,
    ppszApplication: *PWSTR,
    ppszCommandLine: ?*?PWSTR,
    ppszParameters: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn AssocCreateForClasses(
    rgClasses: [*]const ASSOCIATIONELEMENT,
    cClasses: u32,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHQueryRecycleBinA(
    pszRootPath: ?[*:0]const u8,
    pSHQueryRBInfo: *SHQUERYRBINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHQueryRecycleBinW(
    pszRootPath: ?[*:0]const u16,
    pSHQueryRBInfo: *SHQUERYRBINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHEmptyRecycleBinA(
    hwnd: HWND,
    pszRootPath: ?[*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHEmptyRecycleBinW(
    hwnd: HWND,
    pszRootPath: ?[*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHQueryUserNotificationState(
    pquns: *QUERY_USER_NOTIFICATION_STATE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn Shell_NotifyIconA(
    dwMessage: u32,
    lpData: *NOTIFYICONDATAA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn Shell_NotifyIconW(
    dwMessage: u32,
    lpData: *NOTIFYICONDATAW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn Shell_NotifyIconGetRect(
    identifier: *const NOTIFYICONIDENTIFIER,
    iconLocation: *RECT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetFileInfoA(
    pszPath: [*:0]const u8,
    dwFileAttributes: FILE_FLAGS_AND_ATTRIBUTES,
    psfi: ?[*]SHFILEINFOA,
    cbFileInfo: u32,
    uFlags: SHGFI_FLAGS,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "SHELL32" fn SHGetFileInfoW(
    pszPath: [*:0]const u16,
    dwFileAttributes: FILE_FLAGS_AND_ATTRIBUTES,
    psfi: ?[*]SHFILEINFOW,
    cbFileInfo: u32,
    uFlags: SHGFI_FLAGS,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "SHELL32" fn SHGetStockIconInfo(
    siid: SHSTOCKICONID,
    uFlags: u32,
    psii: *SHSTOCKICONINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetDiskFreeSpaceExA(
    pszDirectoryName: [*:0]const u8,
    pulFreeBytesAvailableToCaller: ?*ULARGE_INTEGER,
    pulTotalNumberOfBytes: ?*ULARGE_INTEGER,
    pulTotalNumberOfFreeBytes: ?*ULARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHGetDiskFreeSpaceExW(
    pszDirectoryName: [*:0]const u16,
    pulFreeBytesAvailableToCaller: ?*ULARGE_INTEGER,
    pulTotalNumberOfBytes: ?*ULARGE_INTEGER,
    pulTotalNumberOfFreeBytes: ?*ULARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHGetNewLinkInfoA(
    pszLinkTo: [*:0]const u8,
    pszDir: [*:0]const u8,
    pszName: *[260]u8,
    pfMustCopy: *BOOL,
    uFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHGetNewLinkInfoW(
    pszLinkTo: [*:0]const u16,
    pszDir: [*:0]const u16,
    pszName: *[260]u16,
    pfMustCopy: *BOOL,
    uFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHInvokePrinterCommandA(
    hwnd: HWND,
    uAction: u32,
    lpBuf1: [*:0]const u8,
    lpBuf2: ?[*:0]const u8,
    fModal: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHInvokePrinterCommandW(
    hwnd: HWND,
    uAction: u32,
    lpBuf1: [*:0]const u16,
    lpBuf2: ?[*:0]const u16,
    fModal: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHLoadNonloadedIconOverlayIdentifiers(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHIsFileAvailableOffline(
    pwszPath: [*:0]const u16,
    pdwStatus: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHSetLocalizedName(
    pszPath: [*:0]const u16,
    pszResModule: [*:0]const u16,
    idsRes: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHRemoveLocalizedName(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetLocalizedName(
    pszPath: [*:0]const u16,
    pszResModule: [*:0]u16,
    cch: u32,
    pidsRes: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn ShellMessageBoxA(
    hAppInst: HINSTANCE,
    hWnd: HWND,
    lpcText: [*:0]const u8,
    lpcTitle: ?[*:0]const u8,
    fuStyle: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn ShellMessageBoxW(
    hAppInst: HINSTANCE,
    hWnd: HWND,
    lpcText: [*:0]const u16,
    lpcTitle: ?[*:0]const u16,
    fuStyle: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn IsLFNDriveA(
    pszPath: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn IsLFNDriveW(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHEnumerateUnreadMailAccountsW(
    hKeyUser: HKEY,
    dwIndex: u32,
    pszMailAddress: [*:0]u16,
    cchMailAddress: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetUnreadMailCountW(
    hKeyUser: HKEY,
    pszMailAddress: ?[*:0]const u16,
    pdwCount: ?*u32,
    pFileTime: ?*FILETIME,
    pszShellExecuteCommand: ?[*:0]u16,
    cchShellExecuteCommand: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHSetUnreadMailCountW(
    pszMailAddress: [*:0]const u16,
    dwCount: u32,
    pszShellExecuteCommand: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHTestTokenMembership(
    hToken: HANDLE,
    ulRID: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHGetImageList(
    iImageList: i32,
    riid: *const Guid,
    ppvObj: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn InitNetworkAddressControl(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHGetDriveMedia(
    pszDrive: [*:0]const u16,
    pdwMediaContent: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHSimpleIDListFromPath(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *ITEMIDLIST;

pub extern "SHELL32" fn SHCreateItemFromIDList(
    pidl: *ITEMIDLIST,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHCreateItemFromParsingName(
    pszPath: [*:0]const u16,
    pbc: ?*IBindCtx,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHCreateItemWithParent(
    pidlParent: ?*ITEMIDLIST,
    psfParent: ?*IShellFolder,
    pidl: *ITEMIDLIST,
    riid: *const Guid,
    ppvItem: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHCreateItemFromRelativeName(
    psiParent: *IShellItem,
    pszName: [*:0]const u16,
    pbc: ?*IBindCtx,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHCreateItemInKnownFolder(
    kfid: *const Guid,
    dwKFFlags: u32,
    pszItem: ?[*:0]const u16,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetIDListFromObject(
    punk: *IUnknown,
    ppidl: **ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetItemFromObject(
    punk: *IUnknown,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetNameFromIDList(
    pidl: *ITEMIDLIST,
    sigdnName: SIGDN,
    ppszName: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetItemFromDataObject(
    pdtobj: *IDataObject,
    dwFlags: DATAOBJ_GET_ITEM_FLAGS,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHCreateShellItemArray(
    pidlParent: ?*ITEMIDLIST,
    psf: ?*IShellFolder,
    cidl: u32,
    ppidl: ?[*]?*ITEMIDLIST,
    ppsiItemArray: **IShellItemArray,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHCreateShellItemArrayFromDataObject(
    pdo: *IDataObject,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHCreateShellItemArrayFromIDLists(
    cidl: u32,
    rgpidl: [*]*ITEMIDLIST,
    ppsiItemArray: **IShellItemArray,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHCreateShellItemArrayFromShellItem(
    psi: *IShellItem,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHCreateAssociationRegistration(
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHCreateDefaultExtractIcon(
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SetCurrentProcessExplicitAppUserModelID(
    AppID: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn GetCurrentProcessExplicitAppUserModelID(
    AppID: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetTemporaryPropertyForItem(
    psi: *IShellItem,
    propkey: *const PROPERTYKEY,
    ppropvar: *PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHSetTemporaryPropertyForItem(
    psi: *IShellItem,
    propkey: *const PROPERTYKEY,
    propvar: *const PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHShowManageLibraryUI(
    psiLibrary: *IShellItem,
    hwndOwner: HWND,
    pszTitle: ?[*:0]const u16,
    pszInstruction: ?[*:0]const u16,
    lmdOptions: LIBRARYMANAGEDIALOGOPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHResolveLibrary(
    psiLibrary: *IShellItem,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHAssocEnumHandlers(
    pszExtra: [*:0]const u16,
    afFilter: ASSOC_FILTER,
    ppEnumHandler: **IEnumAssocHandlers,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHAssocEnumHandlersForProtocolByApplication(
    protocol: [*:0]const u16,
    riid: *const Guid,
    enumHandlers: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn HMONITOR_UserSize(
    param0: *u32,
    param1: u32,
    param2: *HMONITOR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "OLE32" fn HMONITOR_UserMarshal(
    param0: *u32,
    param1: *u8,
    param2: *HMONITOR,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "OLE32" fn HMONITOR_UserUnmarshal(
    param0: *u32,
    param1: [*:0]u8,
    param2: *HMONITOR,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "OLE32" fn HMONITOR_UserFree(
    param0: *u32,
    param1: *HMONITOR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "OLE32" fn HMONITOR_UserSize64(
    param0: *u32,
    param1: u32,
    param2: *HMONITOR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "OLE32" fn HMONITOR_UserMarshal64(
    param0: *u32,
    param1: *u8,
    param2: *HMONITOR,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "OLE32" fn HMONITOR_UserUnmarshal64(
    param0: *u32,
    param1: [*:0]u8,
    param2: *HMONITOR,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "OLE32" fn HMONITOR_UserFree64(
    param0: *u32,
    param1: *HMONITOR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHELL32" fn SHCreateDefaultPropertiesOp(
    psi: *IShellItem,
    ppFileOp: **IFileOperation,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHSetDefaultProperties(
    hwnd: HWND,
    psi: *IShellItem,
    dwFileOpFlags: u32,
    pfops: ?*IFileOperationProgressSink,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetMalloc(
    ppMalloc: **IMalloc,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHAlloc(
    cb: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "SHELL32" fn SHFree(
    pv: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHELL32" fn SHGetIconOverlayIndexA(
    pszIconPath: ?[*:0]const u8,
    iIconIndex: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn SHGetIconOverlayIndexW(
    pszIconPath: ?[*:0]const u16,
    iIconIndex: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn ILClone(
    pidl: *ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) *ITEMIDLIST;

pub extern "SHELL32" fn ILCloneFirst(
    pidl: *ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) *ITEMIDLIST;

pub extern "SHELL32" fn ILCombine(
    pidl1: ?*ITEMIDLIST,
    pidl2: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) *ITEMIDLIST;

pub extern "SHELL32" fn ILFree(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHELL32" fn ILGetNext(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) *ITEMIDLIST;

pub extern "SHELL32" fn ILGetSize(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHELL32" fn ILFindChild(
    pidlParent: *ITEMIDLIST,
    pidlChild: *ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) *ITEMIDLIST;

pub extern "SHELL32" fn ILFindLastID(
    pidl: *ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) *ITEMIDLIST;

pub extern "SHELL32" fn ILRemoveLastID(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn ILIsEqual(
    pidl1: *ITEMIDLIST,
    pidl2: *ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn ILIsParent(
    pidl1: *ITEMIDLIST,
    pidl2: *ITEMIDLIST,
    fImmediate: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn ILSaveToStream(
    pstm: *IStream,
    pidl: *ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn ILLoadFromStreamEx(
    pstm: *IStream,
    pidl: **ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn ILCreateFromPathA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) *ITEMIDLIST;

pub extern "SHELL32" fn ILCreateFromPathW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *ITEMIDLIST;

pub extern "SHELL32" fn SHILCreateFromPath(
    pszPath: [*:0]const u16,
    ppidl: **ITEMIDLIST,
    rgfInOut: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn ILAppendID(
    pidl: ?*ITEMIDLIST,
    pmkid: *SHITEMID,
    fAppend: BOOL,
) callconv(@import("std").os.windows.WINAPI) *ITEMIDLIST;

pub extern "SHELL32" fn SHGetPathFromIDListEx(
    pidl: *ITEMIDLIST,
    pszPath: [*:0]u16,
    cchPath: u32,
    uOpts: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHGetPathFromIDListA(
    pidl: *ITEMIDLIST,
    pszPath: *[260]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHGetPathFromIDListW(
    pidl: *ITEMIDLIST,
    pszPath: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHCreateDirectory(
    hwnd: HWND,
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn SHCreateDirectoryExA(
    hwnd: HWND,
    pszPath: [*:0]const u8,
    psa: ?*const SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn SHCreateDirectoryExW(
    hwnd: HWND,
    pszPath: [*:0]const u16,
    psa: ?*const SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn SHOpenFolderAndSelectItems(
    pidlFolder: *ITEMIDLIST,
    cidl: u32,
    apidl: ?[*]?*ITEMIDLIST,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHCreateShellItem(
    pidlParent: ?*ITEMIDLIST,
    psfParent: ?*IShellFolder,
    pidl: *ITEMIDLIST,
    ppsi: **IShellItem,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetSpecialFolderLocation(
    hwnd: HWND,
    csidl: i32,
    ppidl: **ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHCloneSpecialIDList(
    hwnd: HWND,
    csidl: i32,
    fCreate: BOOL,
) callconv(@import("std").os.windows.WINAPI) *ITEMIDLIST;

pub extern "SHELL32" fn SHGetSpecialFolderPathA(
    hwnd: HWND,
    pszPath: *[260]u8,
    csidl: i32,
    fCreate: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHGetSpecialFolderPathW(
    hwnd: HWND,
    pszPath: *[260]u16,
    csidl: i32,
    fCreate: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHFlushSFCache(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHELL32" fn SHGetFolderPathA(
    hwnd: HWND,
    csidl: i32,
    hToken: HANDLE,
    dwFlags: u32,
    pszPath: *[260]u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetFolderPathW(
    hwnd: HWND,
    csidl: i32,
    hToken: HANDLE,
    dwFlags: u32,
    pszPath: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetFolderLocation(
    hwnd: HWND,
    csidl: i32,
    hToken: HANDLE,
    dwFlags: u32,
    ppidl: **ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHSetFolderPathA(
    csidl: i32,
    hToken: HANDLE,
    dwFlags: u32,
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHSetFolderPathW(
    csidl: i32,
    hToken: HANDLE,
    dwFlags: u32,
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetFolderPathAndSubDirA(
    hwnd: HWND,
    csidl: i32,
    hToken: HANDLE,
    dwFlags: u32,
    pszSubDir: ?[*:0]const u8,
    pszPath: *[260]u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetFolderPathAndSubDirW(
    hwnd: HWND,
    csidl: i32,
    hToken: HANDLE,
    dwFlags: u32,
    pszSubDir: ?[*:0]const u16,
    pszPath: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetKnownFolderIDList(
    rfid: *const Guid,
    dwFlags: u32,
    hToken: HANDLE,
    ppidl: **ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHSetKnownFolderPath(
    rfid: *const Guid,
    dwFlags: u32,
    hToken: HANDLE,
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetKnownFolderPath(
    rfid: *const Guid,
    dwFlags: u32,
    hToken: HANDLE,
    ppszPath: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetKnownFolderItem(
    rfid: *const Guid,
    flags: KNOWN_FOLDER_FLAG,
    hToken: HANDLE,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetSetFolderCustomSettings(
    pfcs: *SHFOLDERCUSTOMSETTINGS,
    pszPath: [*:0]const u16,
    dwReadWrite: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHBrowseForFolderA(
    lpbi: *BROWSEINFOA,
) callconv(@import("std").os.windows.WINAPI) *ITEMIDLIST;

pub extern "SHELL32" fn SHBrowseForFolderW(
    lpbi: *BROWSEINFOW,
) callconv(@import("std").os.windows.WINAPI) *ITEMIDLIST;

pub extern "SHELL32" fn SHLoadInProc(
    rclsid: *const Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetDesktopFolder(
    ppshf: **IShellFolder,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHChangeNotify(
    wEventId: SHCNE_ID,
    uFlags: SHCNF_FLAGS,
    dwItem1: ?*const c_void,
    dwItem2: ?*const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHELL32" fn SHAddToRecentDocs(
    uFlags: u32,
    pv: ?*const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHELL32" fn SHHandleUpdateImage(
    pidlExtra: *ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn SHUpdateImageA(
    pszHashItem: [*:0]const u8,
    iIndex: i32,
    uFlags: u32,
    iImageIndex: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHELL32" fn SHUpdateImageW(
    pszHashItem: [*:0]const u16,
    iIndex: i32,
    uFlags: u32,
    iImageIndex: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHELL32" fn SHChangeNotifyRegister(
    hwnd: HWND,
    fSources: SHCNRF_SOURCE,
    fEvents: i32,
    wMsg: u32,
    cEntries: i32,
    pshcne: *const SHChangeNotifyEntry,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHELL32" fn SHChangeNotifyDeregister(
    ulID: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHChangeNotification_Lock(
    hChange: HANDLE,
    dwProcId: u32,
    pppidl: ?*?*?*ITEMIDLIST,
    plEvent: ?*i32,
) callconv(@import("std").os.windows.WINAPI) ShFindChangeNotifcationHandle;

pub extern "SHELL32" fn SHChangeNotification_Unlock(
    hLock: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHGetRealIDL(
    psf: *IShellFolder,
    pidlSimple: *ITEMIDLIST,
    ppidlReal: **ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetInstanceExplorer(
    ppunk: **IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetDataFromIDListA(
    psf: *IShellFolder,
    pidl: *ITEMIDLIST,
    nFormat: SHGDFIL_FORMAT,
    pv: [*]u8,
    cb: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetDataFromIDListW(
    psf: *IShellFolder,
    pidl: *ITEMIDLIST,
    nFormat: SHGDFIL_FORMAT,
    pv: [*]u8,
    cb: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn RestartDialog(
    hwnd: HWND,
    pszPrompt: ?[*:0]const u16,
    dwReturn: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn RestartDialogEx(
    hwnd: HWND,
    pszPrompt: ?[*:0]const u16,
    dwReturn: u32,
    dwReasonCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn SHCoCreateInstance(
    pszCLSID: ?[*:0]const u16,
    pclsid: ?*const Guid,
    pUnkOuter: ?*IUnknown,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHCreateDataObject(
    pidlFolder: ?*ITEMIDLIST,
    cidl: u32,
    apidl: ?[*]?*ITEMIDLIST,
    pdtInner: ?*IDataObject,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn CIDLData_CreateFromIDArray(
    pidlFolder: *ITEMIDLIST,
    cidl: u32,
    apidl: ?[*]?*ITEMIDLIST,
    ppdtobj: **IDataObject,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHCreateStdEnumFmtEtc(
    cfmt: u32,
    afmt: [*]const FORMATETC,
    ppenumFormatEtc: **IEnumFORMATETC,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHDoDragDrop(
    hwnd: HWND,
    pdata: *IDataObject,
    pdsrc: ?*IDropSource,
    dwEffect: u32,
    pdwEffect: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn DAD_SetDragImage(
    him: HIMAGELIST,
    pptOffset: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn DAD_DragEnterEx(
    hwndTarget: HWND,
    ptStart: POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn DAD_DragEnterEx2(
    hwndTarget: HWND,
    ptStart: POINT,
    pdtObject: ?*IDataObject,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn DAD_ShowDragImage(
    fShow: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn DAD_DragMove(
    pt: POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn DAD_DragLeave(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn DAD_AutoScroll(
    hwnd: HWND,
    pad: *AUTO_SCROLL_DATA,
    pptNow: *const POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn ReadCabinetState(
    pcs: [*]CABINETSTATE,
    cLength: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn WriteCabinetState(
    pcs: *CABINETSTATE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn PathMakeUniqueName(
    pszUniqueName: [*:0]u16,
    cchMax: u32,
    pszTemplate: [*:0]const u16,
    pszLongPlate: ?[*:0]const u16,
    pszDir: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn PathIsExe(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn PathCleanupSpec(
    pszDir: ?[*:0]const u16,
    pszSpec: PWSTR,
) callconv(@import("std").os.windows.WINAPI) PCS_RET;

pub extern "SHELL32" fn PathResolve(
    pszPath: *[260]u16,
    dirs: ?*?*u16,
    fFlags: PRF_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn GetFileNameFromBrowse(
    hwnd: HWND,
    pszFilePath: [*:0]u16,
    cchFilePath: u32,
    pszWorkingDir: ?[*:0]const u16,
    pszDefExt: [*:0]const u16,
    pszFilters: ?[*:0]const u16,
    pszTitle: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn DriveType(
    iDrive: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn RealDriveType(
    iDrive: i32,
    fOKToHitNet: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn IsNetDrive(
    iDrive: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn Shell_MergeMenus(
    hmDst: HMENU,
    hmSrc: HMENU,
    uInsert: u32,
    uIDAdjust: u32,
    uIDAdjustMax: u32,
    uFlags: MM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHELL32" fn SHObjectProperties(
    hwnd: HWND,
    shopObjectType: SHOP_TYPE,
    pszObjectName: [*:0]const u16,
    pszPropertyPage: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHFormatDrive(
    hwnd: HWND,
    drive: u32,
    fmtID: SHFMT_ID,
    options: SHFMT_OPT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHELL32" fn SHDestroyPropSheetExtArray(
    hpsxa: *HPSXA__,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHELL32" fn SHAddFromPropSheetExtArray(
    hpsxa: *HPSXA__,
    lpfnAddPage: LPFNADDPROPSHEETPAGE,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHELL32" fn SHReplaceFromPropSheetExtArray(
    hpsxa: *HPSXA__,
    uPageID: u32,
    lpfnReplaceWith: LPFNADDPROPSHEETPAGE,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHELL32" fn OpenRegStream(
    hkey: HKEY,
    pszSubkey: ?[*:0]const u16,
    pszValue: ?[*:0]const u16,
    grfMode: u32,
) callconv(@import("std").os.windows.WINAPI) *IStream;

pub extern "SHELL32" fn SHFindFiles(
    pidlFolder: ?*ITEMIDLIST,
    pidlSaveFile: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn PathGetShortPath(
    pszLongPath: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHELL32" fn PathYetAnotherMakeUniqueName(
    pszUniqueName: *[260]u16,
    pszPath: [*:0]const u16,
    pszShort: ?[*:0]const u16,
    pszFileSpec: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn Win32DeleteFile(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHRestricted(
    rest: RESTRICTIONS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHELL32" fn SignalFileOpen(
    pidl: *ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn AssocGetDetailsOfPropKey(
    psf: *IShellFolder,
    pidl: *ITEMIDLIST,
    pkey: *const PROPERTYKEY,
    pv: *VARIANT,
    pfFoundPropKey: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHStartNetConnectionDialogW(
    hwnd: HWND,
    pszRemoteName: ?[*:0]const u16,
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHDefExtractIconA(
    pszIconFile: [*:0]const u8,
    iIndex: i32,
    uFlags: u32,
    phiconLarge: ?*HICON,
    phiconSmall: ?*HICON,
    nIconSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHDefExtractIconW(
    pszIconFile: [*:0]const u16,
    iIndex: i32,
    uFlags: u32,
    phiconLarge: ?*HICON,
    phiconSmall: ?*HICON,
    nIconSize: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHOpenWithDialog(
    hwndParent: HWND,
    poainfo: *const OPENASINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn Shell_GetImageLists(
    phiml: ?*HIMAGELIST,
    phimlSmall: ?*HIMAGELIST,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn Shell_GetCachedImageIndex(
    pwszIconPath: [*:0]const u16,
    iIconIndex: i32,
    uIconFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn Shell_GetCachedImageIndexA(
    pszIconPath: [*:0]const u8,
    iIconIndex: i32,
    uIconFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn Shell_GetCachedImageIndexW(
    pszIconPath: [*:0]const u16,
    iIconIndex: i32,
    uIconFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn SHValidateUNC(
    hwndOwner: HWND,
    pszFile: PWSTR,
    fConnect: VALIDATEUNC_OPTION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHSetInstanceExplorer(
    punk: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHELL32" fn IsUserAnAdmin(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHShellFolderView_Message(
    hwndMain: HWND,
    uMsg: u32,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "SHELL32" fn SHCreateShellFolderView(
    pcsfv: *const SFV_CREATE,
    ppsv: **IShellView,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn CDefFolderMenu_Create2(
    pidlFolder: ?*ITEMIDLIST,
    hwnd: HWND,
    cidl: u32,
    apidl: ?[*]?*ITEMIDLIST,
    psf: ?*IShellFolder,
    pfn: ?LPFNDFMCALLBACK,
    nKeys: u32,
    ahkeys: ?[*]const HKEY,
    ppcm: **IContextMenu,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHCreateDefaultContextMenu(
    pdcm: *const DEFCONTEXTMENU,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHFind_InitMenuPopup(
    hmenu: HMENU,
    hwndOwner: HWND,
    idCmdFirst: u32,
    idCmdLast: u32,
) callconv(@import("std").os.windows.WINAPI) *IContextMenu;

pub extern "SHELL32" fn SHCreateShellFolderViewEx(
    pcsfv: *CSFV,
    ppsv: **IShellView,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetSetSettings(
    lpss: ?*SHELLSTATEA,
    dwMask: SSF_MASK,
    bSet: BOOL,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHELL32" fn SHGetSettings(
    psfs: *SHELLFLAGSTATE,
    dwMask: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHELL32" fn SHBindToParent(
    pidl: *ITEMIDLIST,
    riid: *const Guid,
    ppv: **c_void,
    ppidlLast: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHBindToFolderIDListParent(
    psfRoot: ?*IShellFolder,
    pidl: *ITEMIDLIST,
    riid: *const Guid,
    ppv: **c_void,
    ppidlLast: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHBindToFolderIDListParentEx(
    psfRoot: ?*IShellFolder,
    pidl: *ITEMIDLIST,
    ppbc: ?*IBindCtx,
    riid: *const Guid,
    ppv: **c_void,
    ppidlLast: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHBindToObject(
    psf: ?*IShellFolder,
    pidl: *ITEMIDLIST,
    pbc: ?*IBindCtx,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHParseDisplayName(
    pszName: [*:0]const u16,
    pbc: ?*IBindCtx,
    ppidl: **ITEMIDLIST,
    sfgaoIn: u32,
    psfgaoOut: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHPathPrepareForWriteA(
    hwnd: HWND,
    punkEnableModless: ?*IUnknown,
    pszPath: [*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHPathPrepareForWriteW(
    hwnd: HWND,
    punkEnableModless: ?*IUnknown,
    pszPath: [*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHCreateFileExtractIconW(
    pszFile: [*:0]const u16,
    dwFileAttributes: u32,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHLimitInputEdit(
    hwndEdit: HWND,
    psf: *IShellFolder,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHGetAttributesFromDataObject(
    pdo: ?*IDataObject,
    dwAttributeMask: u32,
    pdwAttributes: ?*u32,
    pcItems: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHMapPIDLToSystemImageListIndex(
    pshf: *IShellFolder,
    pidl: *ITEMIDLIST,
    piIndexSel: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn SHCLSIDFromString(
    psz: [*:0]const u16,
    pclsid: *Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn PickIconDlg(
    hwnd: HWND,
    pszIconPath: [*:0]u16,
    cchIconPath: u32,
    piIconIndex: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHELL32" fn StgMakeUniqueName(
    pstgParent: *IStorage,
    pszFileSpec: [*:0]const u16,
    grfMode: u32,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHChangeNotifyRegisterThread(
    status: SCNRT_STATUS,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHELL32" fn PathQualify(
    psz: PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHELL32" fn PathIsSlowA(
    pszFile: [*:0]const u8,
    dwAttr: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn PathIsSlowW(
    pszFile: [*:0]const u16,
    dwAttr: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHELL32" fn SHCreatePropSheetExtArray(
    hKey: HKEY,
    pszSubKey: ?[*:0]const u16,
    max_iface: u32,
) callconv(@import("std").os.windows.WINAPI) *HPSXA__;

pub extern "SHELL32" fn SHOpenPropSheetW(
    pszCaption: ?[*:0]const u16,
    ahkeys: ?[*]?*HKEY,
    ckeys: u32,
    pclsidDefault: ?*const Guid,
    pdtobj: *IDataObject,
    psb: ?*IShellBrowser,
    pStartPage: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHDOCVW" fn SoftwareUpdateMessageBox(
    hWnd: HWND,
    pszDistUnit: [*:0]const u16,
    dwFlags: u32,
    psdi: ?*SOFTDISTINFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHELL32" fn SHMultiFileProperties(
    pdtobj: *IDataObject,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHELL32" fn SHCreateQueryCancelAutoPlayMoniker(
    ppmoniker: **IMoniker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHDOCVW" fn ImportPrivacySettings(
    pszFilename: [*:0]const u16,
    pfParsePrivacyPreferences: *BOOL,
    pfParsePerSiteRules: *BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHDOCVW" fn DoPrivacyDlg(
    hwndOwner: HWND,
    pszUrl: [*:0]const u16,
    pPrivacyEnum: *IEnumPrivacyRecords,
    fReportAllSites: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-shcore-scaling-l1-1-0" fn GetScaleFactorForDevice(
    deviceType: DISPLAY_DEVICE_TYPE,
) callconv(@import("std").os.windows.WINAPI) DEVICE_SCALE_FACTOR;

pub extern "api-ms-win-shcore-scaling-l1-1-0" fn RegisterScaleChangeNotifications(
    displayDevice: DISPLAY_DEVICE_TYPE,
    hwndNotify: HWND,
    uMsgNotify: u32,
    pdwCookie: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-shcore-scaling-l1-1-0" fn RevokeScaleChangeNotifications(
    displayDevice: DISPLAY_DEVICE_TYPE,
    dwCookie: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-shcore-scaling-l1-1-1" fn GetScaleFactorForMonitor(
    hMon: HMONITOR,
    pScale: *DEVICE_SCALE_FACTOR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-shcore-scaling-l1-1-1" fn RegisterScaleChangeEvent(
    hEvent: HANDLE,
    pdwCookie: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-shcore-scaling-l1-1-1" fn UnregisterScaleChangeEvent(
    dwCookie: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-shcore-scaling-l1-1-2" fn GetDpiForShellUIComponent(
    param0: SHELL_UI_COMPONENT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHLWAPI" fn StrChrA(
    pszStart: [*:0]const u8,
    wMatch: u16,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn StrChrW(
    pszStart: [*:0]const u16,
    wMatch: u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrChrIA(
    pszStart: [*:0]const u8,
    wMatch: u16,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn StrChrIW(
    pszStart: [*:0]const u16,
    wMatch: u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrChrNW(
    pszStart: [*:0]const u16,
    wMatch: u16,
    cchMax: u32,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrChrNIW(
    pszStart: [*:0]const u16,
    wMatch: u16,
    cchMax: u32,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrCmpNA(
    psz1: [*:0]const u8,
    psz2: [*:0]const u8,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrCmpNW(
    psz1: [*:0]const u16,
    psz2: [*:0]const u16,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrCmpNIA(
    psz1: [*:0]const u8,
    psz2: [*:0]const u8,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrCmpNIW(
    psz1: [*:0]const u16,
    psz2: [*:0]const u16,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrCSpnA(
    pszStr: [*:0]const u8,
    pszSet: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrCSpnW(
    pszStr: [*:0]const u16,
    pszSet: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrCSpnIA(
    pszStr: [*:0]const u8,
    pszSet: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrCSpnIW(
    pszStr: [*:0]const u16,
    pszSet: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrDupA(
    pszSrch: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn StrDupW(
    pszSrch: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrFormatByteSizeEx(
    ull: u64,
    flags: i32,
    pszBuf: [*:0]u16,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn StrFormatByteSizeA(
    dw: u32,
    pszBuf: [*:0]u8,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn StrFormatByteSize64A(
    qdw: i64,
    pszBuf: [*:0]u8,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn StrFormatByteSizeW(
    qdw: i64,
    pszBuf: [*:0]u16,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrFormatKBSizeW(
    qdw: i64,
    pszBuf: [*:0]u16,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrFormatKBSizeA(
    qdw: i64,
    pszBuf: [*:0]u8,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn StrFromTimeIntervalA(
    pszOut: [*:0]u8,
    cchMax: u32,
    dwTimeMS: u32,
    digits: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrFromTimeIntervalW(
    pszOut: [*:0]u16,
    cchMax: u32,
    dwTimeMS: u32,
    digits: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrIsIntlEqualA(
    fCaseSens: BOOL,
    pszString1: [*:0]const u8,
    pszString2: [*:0]const u8,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn StrIsIntlEqualW(
    fCaseSens: BOOL,
    pszString1: [*:0]const u16,
    pszString2: [*:0]const u16,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn StrNCatA(
    psz1: [*:0]u8,
    psz2: [*:0]const u8,
    cchMax: i32,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn StrNCatW(
    psz1: [*:0]u16,
    psz2: [*:0]const u16,
    cchMax: i32,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrPBrkA(
    psz: [*:0]const u8,
    pszSet: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn StrPBrkW(
    psz: [*:0]const u16,
    pszSet: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrRChrA(
    pszStart: [*:0]const u8,
    pszEnd: ?[*:0]const u8,
    wMatch: u16,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn StrRChrW(
    pszStart: [*:0]const u16,
    pszEnd: ?[*:0]const u16,
    wMatch: u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrRChrIA(
    pszStart: [*:0]const u8,
    pszEnd: ?[*:0]const u8,
    wMatch: u16,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn StrRChrIW(
    pszStart: [*:0]const u16,
    pszEnd: ?[*:0]const u16,
    wMatch: u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrRStrIA(
    pszSource: [*:0]const u8,
    pszLast: ?[*:0]const u8,
    pszSrch: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn StrRStrIW(
    pszSource: [*:0]const u16,
    pszLast: ?[*:0]const u16,
    pszSrch: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrSpnA(
    psz: [*:0]const u8,
    pszSet: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrSpnW(
    psz: [*:0]const u16,
    pszSet: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrStrA(
    pszFirst: [*:0]const u8,
    pszSrch: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn StrStrW(
    pszFirst: [*:0]const u16,
    pszSrch: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrStrIA(
    pszFirst: [*:0]const u8,
    pszSrch: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn StrStrIW(
    pszFirst: [*:0]const u16,
    pszSrch: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrStrNW(
    pszFirst: [*:0]const u16,
    pszSrch: [*:0]const u16,
    cchMax: u32,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrStrNIW(
    pszFirst: [*:0]const u16,
    pszSrch: [*:0]const u16,
    cchMax: u32,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrToIntA(
    pszSrc: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrToIntW(
    pszSrc: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrToIntExA(
    pszString: [*:0]const u8,
    dwFlags: i32,
    piRet: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn StrToIntExW(
    pszString: [*:0]const u16,
    dwFlags: i32,
    piRet: *i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn StrToInt64ExA(
    pszString: [*:0]const u8,
    dwFlags: i32,
    pllRet: *i64,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn StrToInt64ExW(
    pszString: [*:0]const u16,
    dwFlags: i32,
    pllRet: *i64,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn StrTrimA(
    psz: PSTR,
    pszTrimChars: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn StrTrimW(
    psz: PWSTR,
    pszTrimChars: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn StrCatW(
    psz1: PWSTR,
    psz2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrCmpW(
    psz1: [*:0]const u16,
    psz2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrCmpIW(
    psz1: [*:0]const u16,
    psz2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrCpyW(
    psz1: PWSTR,
    psz2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrCpyNW(
    pszDst: [*:0]u16,
    pszSrc: [*:0]const u16,
    cchMax: i32,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrCatBuffW(
    pszDest: [*:0]u16,
    pszSrc: [*:0]const u16,
    cchDestBuffSize: i32,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn StrCatBuffA(
    pszDest: [*:0]u8,
    pszSrc: [*:0]const u8,
    cchDestBuffSize: i32,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn ChrCmpIA(
    w1: u16,
    w2: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn ChrCmpIW(
    w1: u16,
    w2: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn wvnsprintfA(
    pszDest: [*:0]u8,
    cchDest: i32,
    pszFmt: [*:0]const u8,
    arglist: *i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn wvnsprintfW(
    pszDest: [*:0]u16,
    cchDest: i32,
    pszFmt: [*:0]const u16,
    arglist: *i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn wnsprintfA(
    pszDest: [*:0]u8,
    cchDest: i32,
    pszFmt: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn wnsprintfW(
    pszDest: [*:0]u16,
    cchDest: i32,
    pszFmt: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrRetToStrA(
    pstr: *STRRET,
    pidl: ?*ITEMIDLIST,
    ppsz: *PSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn StrRetToStrW(
    pstr: *STRRET,
    pidl: ?*ITEMIDLIST,
    ppsz: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn StrRetToBufA(
    pstr: *STRRET,
    pidl: ?*ITEMIDLIST,
    pszBuf: [*:0]u8,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn StrRetToBufW(
    pstr: *STRRET,
    pidl: ?*ITEMIDLIST,
    pszBuf: [*:0]u16,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn SHStrDupA(
    psz: [*:0]const u8,
    ppwsz: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn SHStrDupW(
    psz: [*:0]const u16,
    ppwsz: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn StrCmpLogicalW(
    psz1: [*:0]const u16,
    psz2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrCatChainW(
    pszDst: [*:0]u16,
    cchDst: u32,
    ichAt: u32,
    pszSrc: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHLWAPI" fn StrRetToBSTR(
    pstr: *STRRET,
    pidl: ?*ITEMIDLIST,
    pbstr: *BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn SHLoadIndirectString(
    pszSource: [*:0]const u16,
    pszOutBuf: [*:0]u16,
    cchOutBuf: u32,
    ppvReserved: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn IsCharSpaceA(
    wch: i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn IsCharSpaceW(
    wch: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn StrCmpCA(
    pszStr1: [*:0]const u8,
    pszStr2: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrCmpCW(
    pszStr1: [*:0]const u16,
    pszStr2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrCmpICA(
    pszStr1: [*:0]const u8,
    pszStr2: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrCmpICW(
    pszStr1: [*:0]const u16,
    pszStr2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrCmpNCA(
    pszStr1: [*:0]const u8,
    pszStr2: [*:0]const u8,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrCmpNCW(
    pszStr1: [*:0]const u16,
    pszStr2: [*:0]const u16,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrCmpNICA(
    pszStr1: [*:0]const u8,
    pszStr2: [*:0]const u8,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn StrCmpNICW(
    pszStr1: [*:0]const u16,
    pszStr2: [*:0]const u16,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn IntlStrEqWorkerA(
    fCaseSens: BOOL,
    lpString1: [*:0]const u8,
    lpString2: [*:0]const u8,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn IntlStrEqWorkerW(
    fCaseSens: BOOL,
    lpString1: [*:0]const u16,
    lpString2: [*:0]const u16,
    nChar: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathAddBackslashA(
    pszPath: *[260]u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn PathAddBackslashW(
    pszPath: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn PathAddExtensionA(
    pszPath: *[260]u8,
    pszExt: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathAddExtensionW(
    pszPath: *[260]u16,
    pszExt: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathAppendA(
    pszPath: *[260]u8,
    pszMore: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathAppendW(
    pszPath: *[260]u16,
    pszMore: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathBuildRootA(
    pszRoot: *[4]u8,
    iDrive: i32,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn PathBuildRootW(
    pszRoot: *[4]u16,
    iDrive: i32,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn PathCanonicalizeA(
    pszBuf: *[260]u8,
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathCanonicalizeW(
    pszBuf: *[260]u16,
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathCombineA(
    pszDest: *[260]u8,
    pszDir: ?[*:0]const u8,
    pszFile: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn PathCombineW(
    pszDest: *[260]u16,
    pszDir: ?[*:0]const u16,
    pszFile: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn PathCompactPathA(
    hDC: HDC,
    pszPath: *[260]u8,
    dx: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathCompactPathW(
    hDC: HDC,
    pszPath: *[260]u16,
    dx: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathCompactPathExA(
    pszOut: [*:0]u8,
    pszSrc: [*:0]const u8,
    cchMax: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathCompactPathExW(
    pszOut: [*:0]u16,
    pszSrc: [*:0]const u16,
    cchMax: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathCommonPrefixA(
    pszFile1: [*:0]const u8,
    pszFile2: [*:0]const u8,
    achPath: ?*[260]u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn PathCommonPrefixW(
    pszFile1: [*:0]const u16,
    pszFile2: [*:0]const u16,
    achPath: ?*[260]u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn PathFileExistsA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathFileExistsW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathFindExtensionA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn PathFindExtensionW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn PathFindFileNameA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn PathFindFileNameW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn PathFindNextComponentA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn PathFindNextComponentW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn PathFindOnPathA(
    pszPath: *[260]u8,
    ppszOtherDirs: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathFindOnPathW(
    pszPath: *[260]u16,
    ppszOtherDirs: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathFindSuffixArrayA(
    pszPath: [*:0]const u8,
    apszSuffix: [*]const [*:0]const u8,
    iArraySize: i32,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn PathFindSuffixArrayW(
    pszPath: [*:0]const u16,
    apszSuffix: [*]const [*:0]const u16,
    iArraySize: i32,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn PathGetArgsA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn PathGetArgsW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn PathIsLFNFileSpecA(
    pszName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsLFNFileSpecW(
    pszName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathGetCharTypeA(
    ch: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHLWAPI" fn PathGetCharTypeW(
    ch: u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHLWAPI" fn PathGetDriveNumberA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn PathGetDriveNumberW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn PathIsDirectoryA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsDirectoryW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsDirectoryEmptyA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsDirectoryEmptyW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsFileSpecA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsFileSpecW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsPrefixA(
    pszPrefix: [*:0]const u8,
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsPrefixW(
    pszPrefix: [*:0]const u16,
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsRelativeA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsRelativeW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsRootA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsRootW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsSameRootA(
    pszPath1: [*:0]const u8,
    pszPath2: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsSameRootW(
    pszPath1: [*:0]const u16,
    pszPath2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsUNCA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsUNCW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsNetworkPathA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsNetworkPathW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsUNCServerA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsUNCServerW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsUNCServerShareA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsUNCServerShareW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsContentTypeA(
    pszPath: [*:0]const u8,
    pszContentType: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsContentTypeW(
    pszPath: [*:0]const u16,
    pszContentType: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsURLA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsURLW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathMakePrettyA(
    pszPath: PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathMakePrettyW(
    pszPath: PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathMatchSpecA(
    pszFile: [*:0]const u8,
    pszSpec: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathMatchSpecW(
    pszFile: [*:0]const u16,
    pszSpec: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathMatchSpecExA(
    pszFile: [*:0]const u8,
    pszSpec: [*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn PathMatchSpecExW(
    pszFile: [*:0]const u16,
    pszSpec: [*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn PathParseIconLocationA(
    pszIconFile: PSTR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn PathParseIconLocationW(
    pszIconFile: PWSTR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn PathQuoteSpacesA(
    lpsz: *[260]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathQuoteSpacesW(
    lpsz: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathRelativePathToA(
    pszPath: *[260]u8,
    pszFrom: [*:0]const u8,
    dwAttrFrom: u32,
    pszTo: [*:0]const u8,
    dwAttrTo: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathRelativePathToW(
    pszPath: *[260]u16,
    pszFrom: [*:0]const u16,
    dwAttrFrom: u32,
    pszTo: [*:0]const u16,
    dwAttrTo: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathRemoveArgsA(
    pszPath: PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHLWAPI" fn PathRemoveArgsW(
    pszPath: PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHLWAPI" fn PathRemoveBackslashA(
    pszPath: PSTR,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn PathRemoveBackslashW(
    pszPath: PWSTR,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn PathRemoveBlanksA(
    pszPath: PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHLWAPI" fn PathRemoveBlanksW(
    pszPath: PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHLWAPI" fn PathRemoveExtensionA(
    pszPath: PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHLWAPI" fn PathRemoveExtensionW(
    pszPath: PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHLWAPI" fn PathRemoveFileSpecA(
    pszPath: PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathRemoveFileSpecW(
    pszPath: PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathRenameExtensionA(
    pszPath: *[260]u8,
    pszExt: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathRenameExtensionW(
    pszPath: *[260]u16,
    pszExt: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathSearchAndQualifyA(
    pszPath: [*:0]const u8,
    pszBuf: [*:0]u8,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathSearchAndQualifyW(
    pszPath: [*:0]const u16,
    pszBuf: [*:0]u16,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathSetDlgItemPathA(
    hDlg: HWND,
    id: i32,
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHLWAPI" fn PathSetDlgItemPathW(
    hDlg: HWND,
    id: i32,
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHLWAPI" fn PathSkipRootA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn PathSkipRootW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn PathStripPathA(
    pszPath: PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHLWAPI" fn PathStripPathW(
    pszPath: PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHLWAPI" fn PathStripToRootA(
    pszPath: PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathStripToRootW(
    pszPath: PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathUnquoteSpacesA(
    lpsz: PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathUnquoteSpacesW(
    lpsz: PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathMakeSystemFolderA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathMakeSystemFolderW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathUnmakeSystemFolderA(
    pszPath: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathUnmakeSystemFolderW(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsSystemFolderA(
    pszPath: ?[*:0]const u8,
    dwAttrb: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathIsSystemFolderW(
    pszPath: ?[*:0]const u16,
    dwAttrb: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathUndecorateA(
    pszPath: PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHLWAPI" fn PathUndecorateW(
    pszPath: PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHLWAPI" fn PathUnExpandEnvStringsA(
    pszPath: [*:0]const u8,
    pszBuf: [*:0]u8,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn PathUnExpandEnvStringsW(
    pszPath: [*:0]const u16,
    pszBuf: [*:0]u16,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn UrlCompareA(
    psz1: [*:0]const u8,
    psz2: [*:0]const u8,
    fIgnoreSlash: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn UrlCompareW(
    psz1: [*:0]const u16,
    psz2: [*:0]const u16,
    fIgnoreSlash: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn UrlCombineA(
    pszBase: [*:0]const u8,
    pszRelative: [*:0]const u8,
    pszCombined: ?[*:0]u8,
    pcchCombined: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn UrlCombineW(
    pszBase: [*:0]const u16,
    pszRelative: [*:0]const u16,
    pszCombined: ?[*:0]u16,
    pcchCombined: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn UrlCanonicalizeA(
    pszUrl: [*:0]const u8,
    pszCanonicalized: [*:0]u8,
    pcchCanonicalized: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn UrlCanonicalizeW(
    pszUrl: [*:0]const u16,
    pszCanonicalized: [*:0]u16,
    pcchCanonicalized: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn UrlIsOpaqueA(
    pszURL: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn UrlIsOpaqueW(
    pszURL: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn UrlIsNoHistoryA(
    pszURL: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn UrlIsNoHistoryW(
    pszURL: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn UrlIsA(
    pszUrl: [*:0]const u8,
    UrlIs: URLIS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn UrlIsW(
    pszUrl: [*:0]const u16,
    UrlIs: URLIS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn UrlGetLocationA(
    pszURL: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "SHLWAPI" fn UrlGetLocationW(
    pszURL: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "SHLWAPI" fn UrlUnescapeA(
    pszUrl: PSTR,
    pszUnescaped: ?[*:0]u8,
    pcchUnescaped: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn UrlUnescapeW(
    pszUrl: PWSTR,
    pszUnescaped: ?[*:0]u16,
    pcchUnescaped: ?*u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn UrlEscapeA(
    pszUrl: [*:0]const u8,
    pszEscaped: [*:0]u8,
    pcchEscaped: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn UrlEscapeW(
    pszUrl: [*:0]const u16,
    pszEscaped: [*:0]u16,
    pcchEscaped: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn UrlCreateFromPathA(
    pszPath: [*:0]const u8,
    pszUrl: [*:0]u8,
    pcchUrl: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn UrlCreateFromPathW(
    pszPath: [*:0]const u16,
    pszUrl: [*:0]u16,
    pcchUrl: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn PathCreateFromUrlA(
    pszUrl: [*:0]const u8,
    pszPath: [*:0]u8,
    pcchPath: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn PathCreateFromUrlW(
    pszUrl: [*:0]const u16,
    pszPath: [*:0]u16,
    pcchPath: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn PathCreateFromUrlAlloc(
    pszIn: [*:0]const u16,
    ppszOut: *PWSTR,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn UrlHashA(
    pszUrl: [*:0]const u8,
    pbHash: [*:0]u8,
    cbHash: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn UrlHashW(
    pszUrl: [*:0]const u16,
    pbHash: [*:0]u8,
    cbHash: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn UrlGetPartW(
    pszIn: [*:0]const u16,
    pszOut: [*:0]u16,
    pcchOut: *u32,
    dwPart: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn UrlGetPartA(
    pszIn: [*:0]const u8,
    pszOut: [*:0]u8,
    pcchOut: *u32,
    dwPart: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn UrlApplySchemeA(
    pszIn: [*:0]const u8,
    pszOut: [*:0]u8,
    pcchOut: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn UrlApplySchemeW(
    pszIn: [*:0]const u16,
    pszOut: [*:0]u16,
    pcchOut: *u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn HashData(
    pbData: [*:0]u8,
    cbData: u32,
    pbHash: [*:0]u8,
    cbHash: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn UrlFixupW(
    pcszUrl: [*:0]const u16,
    pszTranslatedUrl: [*:0]u16,
    cchMax: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn ParseURLA(
    pcszURL: [*:0]const u8,
    ppu: *PARSEDURLA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn ParseURLW(
    pcszURL: [*:0]const u16,
    ppu: *PARSEDURLW,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn SHDeleteEmptyKeyA(
    hkey: HKEY,
    pszSubKey: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHDeleteEmptyKeyW(
    hkey: HKEY,
    pszSubKey: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHDeleteKeyA(
    hkey: HKEY,
    pszSubKey: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHDeleteKeyW(
    hkey: HKEY,
    pszSubKey: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegDuplicateHKey(
    hkey: HKEY,
) callconv(@import("std").os.windows.WINAPI) HKEY;

pub extern "SHLWAPI" fn SHDeleteValueA(
    hkey: HKEY,
    pszSubKey: ?[*:0]const u8,
    pszValue: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHDeleteValueW(
    hkey: HKEY,
    pszSubKey: ?[*:0]const u16,
    pszValue: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHGetValueA(
    hkey: HKEY,
    pszSubKey: ?[*:0]const u8,
    pszValue: ?[*:0]const u8,
    pdwType: ?*u32,
    pvData: ?[*]u8,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHGetValueW(
    hkey: HKEY,
    pszSubKey: ?[*:0]const u16,
    pszValue: ?[*:0]const u16,
    pdwType: ?*u32,
    pvData: ?[*]u8,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHSetValueA(
    hkey: HKEY,
    pszSubKey: ?[*:0]const u8,
    pszValue: ?[*:0]const u8,
    dwType: u32,
    pvData: ?[*]const u8,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHSetValueW(
    hkey: HKEY,
    pszSubKey: ?[*:0]const u16,
    pszValue: ?[*:0]const u16,
    dwType: u32,
    pvData: ?[*]const u8,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegGetValueA(
    hkey: HKEY,
    pszSubKey: ?[*:0]const u8,
    pszValue: ?[*:0]const u8,
    srrfFlags: i32,
    pdwType: ?*u32,
    pvData: ?[*]u8,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegGetValueW(
    hkey: HKEY,
    pszSubKey: ?[*:0]const u16,
    pszValue: ?[*:0]const u16,
    srrfFlags: i32,
    pdwType: ?*u32,
    pvData: ?[*]u8,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegGetValueFromHKCUHKLM(
    pwszKey: [*:0]const u16,
    pwszValue: ?[*:0]const u16,
    srrfFlags: i32,
    pdwType: ?*u32,
    pvData: ?[*]u8,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHQueryValueExA(
    hkey: HKEY,
    pszValue: ?[*:0]const u8,
    pdwReserved: *u32,
    pdwType: ?*u32,
    pvData: ?[*]u8,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHQueryValueExW(
    hkey: HKEY,
    pszValue: ?[*:0]const u16,
    pdwReserved: *u32,
    pdwType: ?*u32,
    pvData: ?[*]u8,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHEnumKeyExA(
    hkey: HKEY,
    dwIndex: u32,
    pszName: [*:0]u8,
    pcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHEnumKeyExW(
    hkey: HKEY,
    dwIndex: u32,
    pszName: [*:0]u16,
    pcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHEnumValueA(
    hkey: HKEY,
    dwIndex: u32,
    pszValueName: ?[*:0]u8,
    pcchValueName: ?*u32,
    pdwType: ?*u32,
    pvData: ?[*]u8,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHEnumValueW(
    hkey: HKEY,
    dwIndex: u32,
    pszValueName: ?[*:0]u16,
    pcchValueName: ?*u32,
    pdwType: ?*u32,
    pvData: ?[*]u8,
    pcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHQueryInfoKeyA(
    hkey: HKEY,
    pcSubKeys: ?*u32,
    pcchMaxSubKeyLen: ?*u32,
    pcValues: ?*u32,
    pcchMaxValueNameLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHQueryInfoKeyW(
    hkey: HKEY,
    pcSubKeys: ?*u32,
    pcchMaxSubKeyLen: ?*u32,
    pcValues: ?*u32,
    pcchMaxValueNameLen: ?*u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHCopyKeyA(
    hkeySrc: HKEY,
    pszSrcSubKey: ?[*:0]const u8,
    hkeyDest: HKEY,
    fReserved: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHCopyKeyW(
    hkeySrc: HKEY,
    pszSrcSubKey: ?[*:0]const u16,
    hkeyDest: HKEY,
    fReserved: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegGetPathA(
    hKey: HKEY,
    pcszSubKey: ?[*:0]const u8,
    pcszValue: ?[*:0]const u8,
    pszPath: *[260]u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegGetPathW(
    hKey: HKEY,
    pcszSubKey: ?[*:0]const u16,
    pcszValue: ?[*:0]const u16,
    pszPath: *[260]u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegSetPathA(
    hKey: HKEY,
    pcszSubKey: ?[*:0]const u8,
    pcszValue: ?[*:0]const u8,
    pcszPath: [*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegSetPathW(
    hKey: HKEY,
    pcszSubKey: ?[*:0]const u16,
    pcszValue: ?[*:0]const u16,
    pcszPath: [*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegCreateUSKeyA(
    pszPath: [*:0]const u8,
    samDesired: u32,
    hRelativeUSKey: ?*c_void,
    phNewUSKey: *?*c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegCreateUSKeyW(
    pwzPath: [*:0]const u16,
    samDesired: u32,
    hRelativeUSKey: ?*c_void,
    phNewUSKey: *?*c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegOpenUSKeyA(
    pszPath: [*:0]const u8,
    samDesired: u32,
    hRelativeUSKey: ?*c_void,
    phNewUSKey: *?*c_void,
    fIgnoreHKCU: BOOL,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegOpenUSKeyW(
    pwzPath: [*:0]const u16,
    samDesired: u32,
    hRelativeUSKey: ?*c_void,
    phNewUSKey: *?*c_void,
    fIgnoreHKCU: BOOL,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegQueryUSValueA(
    hUSKey: ?*c_void,
    pszValue: ?[*:0]const u8,
    pdwType: ?*u32,
    pvData: ?[*]u8,
    pcbData: ?*u32,
    fIgnoreHKCU: BOOL,
    pvDefaultData: ?[*]u8,
    dwDefaultDataSize: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegQueryUSValueW(
    hUSKey: ?*c_void,
    pszValue: ?[*:0]const u16,
    pdwType: ?*u32,
    pvData: ?[*]u8,
    pcbData: ?*u32,
    fIgnoreHKCU: BOOL,
    pvDefaultData: ?[*]u8,
    dwDefaultDataSize: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegWriteUSValueA(
    hUSKey: ?*c_void,
    pszValue: [*:0]const u8,
    dwType: u32,
    pvData: [*]const u8,
    cbData: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegWriteUSValueW(
    hUSKey: ?*c_void,
    pwzValue: [*:0]const u16,
    dwType: u32,
    pvData: [*]const u8,
    cbData: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegDeleteUSValueA(
    hUSKey: ?*c_void,
    pszValue: [*:0]const u8,
    delRegFlags: SHREGDEL_FLAGS,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegDeleteUSValueW(
    hUSKey: ?*c_void,
    pwzValue: [*:0]const u16,
    delRegFlags: SHREGDEL_FLAGS,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegDeleteEmptyUSKeyW(
    hUSKey: ?*c_void,
    pwzSubKey: [*:0]const u16,
    delRegFlags: SHREGDEL_FLAGS,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegDeleteEmptyUSKeyA(
    hUSKey: ?*c_void,
    pszSubKey: [*:0]const u8,
    delRegFlags: SHREGDEL_FLAGS,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegEnumUSKeyA(
    hUSKey: ?*c_void,
    dwIndex: u32,
    pszName: [*:0]u8,
    pcchName: *u32,
    enumRegFlags: SHREGENUM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegEnumUSKeyW(
    hUSKey: ?*c_void,
    dwIndex: u32,
    pwzName: [*:0]u16,
    pcchName: *u32,
    enumRegFlags: SHREGENUM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegEnumUSValueA(
    hUSkey: ?*c_void,
    dwIndex: u32,
    pszValueName: [*:0]u8,
    pcchValueName: *u32,
    pdwType: ?*u32,
    pvData: ?[*]u8,
    pcbData: ?*u32,
    enumRegFlags: SHREGENUM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegEnumUSValueW(
    hUSkey: ?*c_void,
    dwIndex: u32,
    pszValueName: [*:0]u16,
    pcchValueName: *u32,
    pdwType: ?*u32,
    pvData: ?[*]u8,
    pcbData: ?*u32,
    enumRegFlags: SHREGENUM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegQueryInfoUSKeyA(
    hUSKey: ?*c_void,
    pcSubKeys: ?*u32,
    pcchMaxSubKeyLen: ?*u32,
    pcValues: ?*u32,
    pcchMaxValueNameLen: ?*u32,
    enumRegFlags: SHREGENUM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegQueryInfoUSKeyW(
    hUSKey: ?*c_void,
    pcSubKeys: ?*u32,
    pcchMaxSubKeyLen: ?*u32,
    pcValues: ?*u32,
    pcchMaxValueNameLen: ?*u32,
    enumRegFlags: SHREGENUM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegCloseUSKey(
    hUSKey: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegGetUSValueA(
    pszSubKey: [*:0]const u8,
    pszValue: ?[*:0]const u8,
    pdwType: ?*u32,
    pvData: ?[*]u8,
    pcbData: ?*u32,
    fIgnoreHKCU: BOOL,
    pvDefaultData: ?[*]u8,
    dwDefaultDataSize: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegGetUSValueW(
    pszSubKey: [*:0]const u16,
    pszValue: ?[*:0]const u16,
    pdwType: ?*u32,
    pvData: ?[*]u8,
    pcbData: ?*u32,
    fIgnoreHKCU: BOOL,
    pvDefaultData: ?[*]u8,
    dwDefaultDataSize: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegSetUSValueA(
    pszSubKey: [*:0]const u8,
    pszValue: [*:0]const u8,
    dwType: u32,
    pvData: ?[*]const u8,
    cbData: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegSetUSValueW(
    pwzSubKey: [*:0]const u16,
    pwzValue: [*:0]const u16,
    dwType: u32,
    pvData: ?[*]const u8,
    cbData: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) LSTATUS;

pub extern "SHLWAPI" fn SHRegGetIntW(
    hk: HKEY,
    pwzKey: ?[*:0]const u16,
    iDefault: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn SHRegGetBoolUSValueA(
    pszSubKey: [*:0]const u8,
    pszValue: ?[*:0]const u8,
    fIgnoreHKCU: BOOL,
    fDefault: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn SHRegGetBoolUSValueW(
    pszSubKey: [*:0]const u16,
    pszValue: ?[*:0]const u16,
    fIgnoreHKCU: BOOL,
    fDefault: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn AssocCreate(
    clsid: Guid,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn AssocQueryStringA(
    flags: u32,
    str: ASSOCSTR,
    pszAssoc: [*:0]const u8,
    pszExtra: ?[*:0]const u8,
    pszOut: ?[*:0]u8,
    pcchOut: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn AssocQueryStringW(
    flags: u32,
    str: ASSOCSTR,
    pszAssoc: [*:0]const u16,
    pszExtra: ?[*:0]const u16,
    pszOut: ?[*:0]u16,
    pcchOut: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn AssocQueryStringByKeyA(
    flags: u32,
    str: ASSOCSTR,
    hkAssoc: HKEY,
    pszExtra: ?[*:0]const u8,
    pszOut: ?[*:0]u8,
    pcchOut: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn AssocQueryStringByKeyW(
    flags: u32,
    str: ASSOCSTR,
    hkAssoc: HKEY,
    pszExtra: ?[*:0]const u16,
    pszOut: ?[*:0]u16,
    pcchOut: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn AssocQueryKeyA(
    flags: u32,
    key: ASSOCKEY,
    pszAssoc: [*:0]const u8,
    pszExtra: ?[*:0]const u8,
    phkeyOut: *HKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn AssocQueryKeyW(
    flags: u32,
    key: ASSOCKEY,
    pszAssoc: [*:0]const u16,
    pszExtra: ?[*:0]const u16,
    phkeyOut: *HKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn AssocIsDangerous(
    pszAssoc: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn AssocGetPerceivedType(
    pszExt: [*:0]const u16,
    ptype: *PERCEIVED,
    pflag: *u32,
    ppszType: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn SHOpenRegStreamA(
    hkey: HKEY,
    pszSubkey: ?[*:0]const u8,
    pszValue: ?[*:0]const u8,
    grfMode: u32,
) callconv(@import("std").os.windows.WINAPI) *IStream;

pub extern "SHLWAPI" fn SHOpenRegStreamW(
    hkey: HKEY,
    pszSubkey: ?[*:0]const u16,
    pszValue: ?[*:0]const u16,
    grfMode: u32,
) callconv(@import("std").os.windows.WINAPI) *IStream;

pub extern "SHLWAPI" fn SHOpenRegStream2A(
    hkey: HKEY,
    pszSubkey: ?[*:0]const u8,
    pszValue: ?[*:0]const u8,
    grfMode: u32,
) callconv(@import("std").os.windows.WINAPI) *IStream;

pub extern "SHLWAPI" fn SHOpenRegStream2W(
    hkey: HKEY,
    pszSubkey: ?[*:0]const u16,
    pszValue: ?[*:0]const u16,
    grfMode: u32,
) callconv(@import("std").os.windows.WINAPI) *IStream;

pub extern "SHLWAPI" fn SHCreateStreamOnFileA(
    pszFile: [*:0]const u8,
    grfMode: u32,
    ppstm: **IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn SHCreateStreamOnFileW(
    pszFile: [*:0]const u16,
    grfMode: u32,
    ppstm: **IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn SHCreateStreamOnFileEx(
    pszFile: [*:0]const u16,
    grfMode: u32,
    dwAttributes: u32,
    fCreate: BOOL,
    pstmTemplate: ?*IStream,
    ppstm: **IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn SHCreateMemStream(
    pInit: ?[*:0]const u8,
    cbInit: u32,
) callconv(@import("std").os.windows.WINAPI) *IStream;

pub extern "SHLWAPI" fn GetAcceptLanguagesA(
    pszLanguages: [*:0]u8,
    pcchLanguages: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn GetAcceptLanguagesW(
    pszLanguages: [*:0]u16,
    pcchLanguages: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn IUnknown_Set(
    ppunk: **IUnknown,
    punk: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHLWAPI" fn IUnknown_AtomicRelease(
    ppunk: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHLWAPI" fn IUnknown_GetWindow(
    punk: *IUnknown,
    phwnd: *HWND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn IUnknown_SetSite(
    punk: *IUnknown,
    punkSite: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn IUnknown_GetSite(
    punk: *IUnknown,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn IUnknown_QueryService(
    punk: ?*IUnknown,
    guidService: *const Guid,
    riid: *const Guid,
    ppvOut: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn IStream_Read(
    pstm: *IStream,
    pv: *c_void,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn IStream_Write(
    pstm: *IStream,
    pv: [*]const u8,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn IStream_Reset(
    pstm: *IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn IStream_Size(
    pstm: *IStream,
    pui: *ULARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn ConnectToConnectionPoint(
    punk: ?*IUnknown,
    riidEvent: *const Guid,
    fConnect: BOOL,
    punkTarget: *IUnknown,
    pdwCookie: *u32,
    ppcpOut: ?*?*IConnectionPoint,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn IStream_ReadPidl(
    pstm: *IStream,
    ppidlOut: **ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn IStream_WritePidl(
    pstm: *IStream,
    pidlWrite: *ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn IStream_ReadStr(
    pstm: *IStream,
    ppsz: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn IStream_WriteStr(
    pstm: *IStream,
    psz: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn IStream_Copy(
    pstmFrom: *IStream,
    pstmTo: *IStream,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn SHGetViewStatePropertyBag(
    pidl: ?*ITEMIDLIST,
    pszBagName: ?[*:0]const u16,
    dwFlags: u32,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn SHFormatDateTimeA(
    pft: *const FILETIME,
    pdwFlags: ?*u32,
    pszBuf: [*:0]u8,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn SHFormatDateTimeW(
    pft: *const FILETIME,
    pdwFlags: ?*u32,
    pszBuf: [*:0]u16,
    cchBuf: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn SHAnsiToUnicode(
    pszSrc: [*:0]const u8,
    pwszDst: [*:0]u16,
    cwchBuf: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn SHAnsiToAnsi(
    pszSrc: [*:0]const u8,
    pszDst: [*:0]u8,
    cchBuf: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn SHUnicodeToAnsi(
    pwszSrc: [*:0]const u16,
    pszDst: [*:0]u8,
    cchBuf: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn SHUnicodeToUnicode(
    pwzSrc: [*:0]const u16,
    pwzDst: [*:0]u16,
    cwchBuf: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn SHMessageBoxCheckA(
    hwnd: HWND,
    pszText: [*:0]const u8,
    pszCaption: [*:0]const u8,
    uType: u32,
    iDefault: i32,
    pszRegVal: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn SHMessageBoxCheckW(
    hwnd: HWND,
    pszText: [*:0]const u16,
    pszCaption: [*:0]const u16,
    uType: u32,
    iDefault: i32,
    pszRegVal: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn SHSendMessageBroadcastA(
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "SHLWAPI" fn SHSendMessageBroadcastW(
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "SHLWAPI" fn SHStripMneumonicA(
    pszMenu: PSTR,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "SHLWAPI" fn SHStripMneumonicW(
    pszMenu: PWSTR,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "SHLWAPI" fn IsOS(
    dwOS: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn SHGlobalCounterGetValue(
    id: SHGLOBALCOUNTER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn SHGlobalCounterIncrement(
    id: SHGLOBALCOUNTER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn SHGlobalCounterDecrement(
    id: SHGLOBALCOUNTER,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn SHAllocShared(
    pvData: ?[*]const u8,
    dwSize: u32,
    dwProcessId: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "SHLWAPI" fn SHFreeShared(
    hData: HANDLE,
    dwProcessId: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn SHLockShared(
    hData: HANDLE,
    dwProcessId: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "SHLWAPI" fn SHUnlockShared(
    pvData: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn WhichPlatform(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHLWAPI" fn QISearch(
    that: *c_void,
    pqit: *QITAB,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn SHIsLowMemoryMachine(
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn GetMenuPosFromID(
    hmenu: HMENU,
    id: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "SHLWAPI" fn SHGetInverseCMAP(
    pbMap: [*:0]u8,
    cbMap: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn SHAutoComplete(
    hwndEdit: HWND,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn SHCreateThreadRef(
    pcRef: *i32,
    ppunk: **IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn SHSetThreadRef(
    punk: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn SHGetThreadRef(
    ppunk: **IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn SHSkipJunction(
    pbc: ?*IBindCtx,
    pclsid: *const Guid,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn SHCreateThread(
    pfnThreadProc: LPTHREAD_START_ROUTINE,
    pData: ?*c_void,
    flags: u32,
    pfnCallback: ?LPTHREAD_START_ROUTINE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn SHCreateThreadWithHandle(
    pfnThreadProc: LPTHREAD_START_ROUTINE,
    pData: ?*c_void,
    flags: u32,
    pfnCallback: ?LPTHREAD_START_ROUTINE,
    pHandle: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "SHLWAPI" fn SHReleaseThreadRef(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "SHLWAPI" fn SHCreateShellPalette(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) HPALETTE;

pub extern "SHLWAPI" fn ColorRGBToHLS(
    clrRGB: u32,
    pwHue: *u16,
    pwLuminance: *u16,
    pwSaturation: *u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "SHLWAPI" fn ColorHLSToRGB(
    wHue: u16,
    wLuminance: u16,
    wSaturation: u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHLWAPI" fn ColorAdjustLuma(
    clrRGB: u32,
    n: i32,
    fScale: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "SHLWAPI" fn IsInternetESCEnabled(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "hlink" fn HlinkCreateFromMoniker(
    pimkTrgt: *IMoniker,
    pwzLocation: [*:0]const u16,
    pwzFriendlyName: [*:0]const u16,
    pihlsite: *IHlinkSite,
    dwSiteData: u32,
    piunkOuter: *IUnknown,
    riid: *const Guid,
    ppvObj: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateFromString(
    pwzTarget: [*:0]const u16,
    pwzLocation: [*:0]const u16,
    pwzFriendlyName: [*:0]const u16,
    pihlsite: *IHlinkSite,
    dwSiteData: u32,
    piunkOuter: *IUnknown,
    riid: *const Guid,
    ppvObj: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateFromData(
    piDataObj: *IDataObject,
    pihlsite: *IHlinkSite,
    dwSiteData: u32,
    piunkOuter: *IUnknown,
    riid: *const Guid,
    ppvObj: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkQueryCreateFromData(
    piDataObj: *IDataObject,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkClone(
    pihl: *IHlink,
    riid: *const Guid,
    pihlsiteForClone: *IHlinkSite,
    dwSiteData: u32,
    ppvObj: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateBrowseContext(
    piunkOuter: *IUnknown,
    riid: *const Guid,
    ppvObj: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkNavigateToStringReference(
    pwzTarget: [*:0]const u16,
    pwzLocation: [*:0]const u16,
    pihlsite: *IHlinkSite,
    dwSiteData: u32,
    pihlframe: *IHlinkFrame,
    grfHLNF: u32,
    pibc: *IBindCtx,
    pibsc: *IBindStatusCallback,
    pihlbc: *IHlinkBrowseContext,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkNavigate(
    pihl: *IHlink,
    pihlframe: *IHlinkFrame,
    grfHLNF: u32,
    pbc: *IBindCtx,
    pibsc: *IBindStatusCallback,
    pihlbc: *IHlinkBrowseContext,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkOnNavigate(
    pihlframe: *IHlinkFrame,
    pihlbc: *IHlinkBrowseContext,
    grfHLNF: u32,
    pimkTarget: *IMoniker,
    pwzLocation: [*:0]const u16,
    pwzFriendlyName: [*:0]const u16,
    puHLID: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkUpdateStackItem(
    pihlframe: *IHlinkFrame,
    pihlbc: *IHlinkBrowseContext,
    uHLID: u32,
    pimkTrgt: *IMoniker,
    pwzLocation: [*:0]const u16,
    pwzFriendlyName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkOnRenameDocument(
    dwReserved: u32,
    pihlbc: *IHlinkBrowseContext,
    pimkOld: *IMoniker,
    pimkNew: *IMoniker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkResolveMonikerForData(
    pimkReference: *IMoniker,
    reserved: u32,
    pibc: *IBindCtx,
    cFmtetc: u32,
    rgFmtetc: *FORMATETC,
    pibsc: *IBindStatusCallback,
    pimkBase: *IMoniker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkResolveStringForData(
    pwzReference: [*:0]const u16,
    reserved: u32,
    pibc: *IBindCtx,
    cFmtetc: u32,
    rgFmtetc: *FORMATETC,
    pibsc: *IBindStatusCallback,
    pimkBase: *IMoniker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkParseDisplayName(
    pibc: *IBindCtx,
    pwzDisplayName: [*:0]const u16,
    fNoForceAbs: BOOL,
    pcchEaten: *u32,
    ppimk: **IMoniker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateExtensionServices(
    pwzAdditionalHeaders: [*:0]const u16,
    phwnd: HWND,
    pszUsername: [*:0]const u16,
    pszPassword: [*:0]const u16,
    piunkOuter: *IUnknown,
    riid: *const Guid,
    ppvObj: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkPreprocessMoniker(
    pibc: *IBindCtx,
    pimkIn: *IMoniker,
    ppimkOut: **IMoniker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn OleSaveToStreamEx(
    piunk: *IUnknown,
    pistm: *IStream,
    fClearDirty: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkSetSpecialReference(
    uReference: u32,
    pwzReference: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkGetSpecialReference(
    uReference: u32,
    ppwzReference: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateShortcut(
    grfHLSHORTCUTF: u32,
    pihl: *IHlink,
    pwzDir: [*:0]const u16,
    pwzFileName: [*:0]const u16,
    ppwzShortcutFile: *PWSTR,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateShortcutFromMoniker(
    grfHLSHORTCUTF: u32,
    pimkTarget: *IMoniker,
    pwzLocation: [*:0]const u16,
    pwzDir: [*:0]const u16,
    pwzFileName: [*:0]const u16,
    ppwzShortcutFile: *PWSTR,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateShortcutFromString(
    grfHLSHORTCUTF: u32,
    pwzTarget: [*:0]const u16,
    pwzLocation: [*:0]const u16,
    pwzDir: [*:0]const u16,
    pwzFileName: [*:0]const u16,
    ppwzShortcutFile: *PWSTR,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkResolveShortcut(
    pwzShortcutFileName: [*:0]const u16,
    pihlsite: *IHlinkSite,
    dwSiteData: u32,
    piunkOuter: *IUnknown,
    riid: *const Guid,
    ppvObj: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkResolveShortcutToMoniker(
    pwzShortcutFileName: [*:0]const u16,
    ppimkTarget: **IMoniker,
    ppwzLocation: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkResolveShortcutToString(
    pwzShortcutFileName: [*:0]const u16,
    ppwzTarget: *PWSTR,
    ppwzLocation: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkIsShortcut(
    pwzFileName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkGetValueFromParams(
    pwzParams: [*:0]const u16,
    pwzName: [*:0]const u16,
    ppwzValue: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkTranslateURL(
    pwzURL: [*:0]const u16,
    grfFlags: u32,
    ppwzTranslatedURL: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathIsUNCEx(
    pszPath: [*:0]const u16,
    ppszServer: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchIsRoot(
    pszPath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAddBackslashEx(
    pszPath: [*:0]u16,
    cchPath: ?*c_void,
    ppszEnd: ?*?PWSTR,
    pcchRemaining: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAddBackslash(
    pszPath: [*:0]u16,
    cchPath: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRemoveBackslashEx(
    pszPath: PWSTR,
    cchPath: ?*c_void,
    ppszEnd: ?*?PWSTR,
    pcchRemaining: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRemoveBackslash(
    pszPath: [*:0]u16,
    cchPath: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchSkipRoot(
    pszPath: [*:0]const u16,
    ppszRootEnd: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchStripToRoot(
    pszPath: PWSTR,
    cchPath: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRemoveFileSpec(
    pszPath: PWSTR,
    cchPath: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchFindExtension(
    pszPath: [*:0]const u16,
    cchPath: ?*c_void,
    ppszExt: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAddExtension(
    pszPath: [*:0]u16,
    cchPath: ?*c_void,
    pszExt: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRenameExtension(
    pszPath: [*:0]u16,
    cchPath: ?*c_void,
    pszExt: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRemoveExtension(
    pszPath: PWSTR,
    cchPath: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchCanonicalizeEx(
    pszPathOut: [*:0]u16,
    cchPathOut: ?*c_void,
    pszPathIn: [*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchCanonicalize(
    pszPathOut: [*:0]u16,
    cchPathOut: ?*c_void,
    pszPathIn: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchCombineEx(
    pszPathOut: [*:0]u16,
    cchPathOut: ?*c_void,
    pszPathIn: ?[*:0]const u16,
    pszMore: ?[*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchCombine(
    pszPathOut: [*:0]u16,
    cchPathOut: ?*c_void,
    pszPathIn: ?[*:0]const u16,
    pszMore: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAppendEx(
    pszPath: [*:0]u16,
    cchPath: ?*c_void,
    pszMore: ?[*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAppend(
    pszPath: [*:0]u16,
    cchPath: ?*c_void,
    pszMore: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathCchStripPrefix(
    pszPath: [*:0]u16,
    cchPath: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathAllocCombine(
    pszPathIn: ?[*:0]const u16,
    pszMore: ?[*:0]const u16,
    dwFlags: u32,
    ppszPathOut: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-path-l1-1-0" fn PathAllocCanonicalize(
    pszPathIn: [*:0]const u16,
    dwFlags: u32,
    ppszPathOut: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-psm-appnotify-l1-1-0" fn RegisterAppStateChangeNotification(
    Routine: PAPPSTATE_CHANGE_ROUTINE,
    Context: ?*c_void,
    Registration: **_APPSTATE_REGISTRATION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "api-ms-win-core-psm-appnotify-l1-1-0" fn UnregisterAppStateChangeNotification(
    Registration: *_APPSTATE_REGISTRATION,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "api-ms-win-core-psm-appnotify-l1-1-1" fn RegisterAppConstrainedChangeNotification(
    Routine: PAPPCONSTRAIN_CHANGE_ROUTINE,
    Context: ?*c_void,
    Registration: **_APPCONSTRAIN_REGISTRATION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "api-ms-win-core-psm-appnotify-l1-1-1" fn UnregisterAppConstrainedChangeNotification(
    Registration: *_APPCONSTRAIN_REGISTRATION,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "USERENV" fn LoadUserProfileA(
    hToken: HANDLE,
    lpProfileInfo: *PROFILEINFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USERENV" fn LoadUserProfileW(
    hToken: HANDLE,
    lpProfileInfo: *PROFILEINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USERENV" fn UnloadUserProfile(
    hToken: HANDLE,
    hProfile: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USERENV" fn GetProfilesDirectoryA(
    lpProfileDir: ?[*:0]u8,
    lpcchSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USERENV" fn GetProfilesDirectoryW(
    lpProfileDir: ?[*:0]u16,
    lpcchSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USERENV" fn GetProfileType(
    dwFlags: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USERENV" fn DeleteProfileA(
    lpSidString: [*:0]const u8,
    lpProfilePath: ?[*:0]const u8,
    lpComputerName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USERENV" fn DeleteProfileW(
    lpSidString: [*:0]const u16,
    lpProfilePath: ?[*:0]const u16,
    lpComputerName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USERENV" fn CreateProfile(
    pszUserSid: [*:0]const u16,
    pszUserName: [*:0]const u16,
    pszProfilePath: [*:0]u16,
    cchProfilePath: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USERENV" fn GetDefaultUserProfileDirectoryA(
    lpProfileDir: ?[*:0]u8,
    lpcchSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USERENV" fn GetDefaultUserProfileDirectoryW(
    lpProfileDir: ?[*:0]u16,
    lpcchSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USERENV" fn GetAllUsersProfileDirectoryA(
    lpProfileDir: ?[*:0]u8,
    lpcchSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USERENV" fn GetAllUsersProfileDirectoryW(
    lpProfileDir: ?[*:0]u16,
    lpcchSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USERENV" fn GetUserProfileDirectoryA(
    hToken: HANDLE,
    lpProfileDir: ?[*:0]u8,
    lpcchSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USERENV" fn GetUserProfileDirectoryW(
    hToken: HANDLE,
    lpProfileDir: ?[*:0]u16,
    lpcchSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USERENV" fn CreateEnvironmentBlock(
    lpEnvironment: **c_void,
    hToken: HANDLE,
    bInherit: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USERENV" fn DestroyEnvironmentBlock(
    lpEnvironment: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USERENV" fn ExpandEnvironmentStringsForUserA(
    hToken: HANDLE,
    lpSrc: [*:0]const u8,
    lpDest: [*:0]u8,
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USERENV" fn ExpandEnvironmentStringsForUserW(
    hToken: HANDLE,
    lpSrc: [*:0]const u16,
    lpDest: [*:0]u16,
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USERENV" fn CreateAppContainerProfile(
    pszAppContainerName: [*:0]const u16,
    pszDisplayName: [*:0]const u16,
    pszDescription: [*:0]const u16,
    pCapabilities: ?[*]SID_AND_ATTRIBUTES,
    dwCapabilityCount: u32,
    ppSidAppContainerSid: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USERENV" fn DeleteAppContainerProfile(
    pszAppContainerName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USERENV" fn GetAppContainerRegistryLocation(
    desiredAccess: u32,
    phAppContainerKey: *HKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USERENV" fn GetAppContainerFolderPath(
    pszAppContainerSid: [*:0]const u16,
    ppszPath: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USERENV" fn DeriveAppContainerSidFromAppContainerName(
    pszAppContainerName: [*:0]const u16,
    ppsidAppContainerSid: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USERENV" fn DeriveRestrictedAppContainerSidFromAppContainerSidAndRestrictedName(
    psidAppContainerSid: *c_void,
    pszRestrictedAppContainerName: [*:0]const u16,
    ppsidRestrictedAppContainerSid: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (209)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const MULTIKEYHELP = MULTIKEYHELPA;
        pub const HELPWININFO = HELPWININFOA;
        pub const LOGFONT = LOGFONTA;
        pub const DRAGINFO = DRAGINFOA;
        pub const SHFILEOPSTRUCT = SHFILEOPSTRUCTA;
        pub const SHNAMEMAPPING = SHNAMEMAPPINGA;
        pub const SHELLEXECUTEINFO = SHELLEXECUTEINFOA;
        pub const NOTIFYICONDATA = NOTIFYICONDATAA;
        pub const SHFILEINFO = SHFILEINFOA;
        pub const OPEN_PRINTER_PROPS_INFO = OPEN_PRINTER_PROPS_INFOA;
        pub const IShellLink = IShellLinkA;
        pub const IExtractIcon = IExtractIconA;
        pub const IShellExecuteHook = IShellExecuteHookA;
        pub const BROWSEINFO = BROWSEINFOA;
        pub const FILEDESCRIPTOR = FILEDESCRIPTORA;
        pub const FILEGROUPDESCRIPTOR = FILEGROUPDESCRIPTORA;
        pub const SHELLSTATE = SHELLSTATEA;
        pub const INewShortcutHook = INewShortcutHookA;
        pub const ICopyHook = ICopyHookA;
        pub const PARSEDURL = PARSEDURLA;
        pub const NEWCPLINFO = NEWCPLINFOA;
        pub const PROFILEINFO = PROFILEINFOA;
        pub const urlinvokecommandinfo = urlinvokecommandinfoA;
        pub const IUniformResourceLocator = IUniformResourceLocatorA;
        pub const IEnumRegisterWord = IEnumRegisterWordA;
        pub const WinHelp = WinHelpA;
        pub const DragQueryFile = DragQueryFileA;
        pub const ShellExecute = ShellExecuteA;
        pub const FindExecutable = FindExecutableA;
        pub const ShellAbout = ShellAboutA;
        pub const ExtractAssociatedIcon = ExtractAssociatedIconA;
        pub const ExtractAssociatedIconEx = ExtractAssociatedIconExA;
        pub const ExtractIcon = ExtractIconA;
        pub const DoEnvironmentSubst = DoEnvironmentSubstA;
        pub const ExtractIconEx = ExtractIconExA;
        pub const SHFileOperation = SHFileOperationA;
        pub const ShellExecuteEx = ShellExecuteExA;
        pub const SHQueryRecycleBin = SHQueryRecycleBinA;
        pub const SHEmptyRecycleBin = SHEmptyRecycleBinA;
        pub const Shell_NotifyIcon = Shell_NotifyIconA;
        pub const SHGetFileInfo = SHGetFileInfoA;
        pub const SHGetDiskFreeSpaceEx = SHGetDiskFreeSpaceExA;
        pub const SHGetNewLinkInfo = SHGetNewLinkInfoA;
        pub const SHInvokePrinterCommand = SHInvokePrinterCommandA;
        pub const ShellMessageBox = ShellMessageBoxA;
        pub const IsLFNDrive = IsLFNDriveA;
        pub const SHGetIconOverlayIndex = SHGetIconOverlayIndexA;
        pub const ILCreateFromPath = ILCreateFromPathA;
        pub const SHGetPathFromIDList = SHGetPathFromIDListA;
        pub const SHCreateDirectoryEx = SHCreateDirectoryExA;
        pub const SHGetSpecialFolderPath = SHGetSpecialFolderPathA;
        pub const SHGetFolderPath = SHGetFolderPathA;
        pub const SHSetFolderPath = SHSetFolderPathA;
        pub const SHGetFolderPathAndSubDir = SHGetFolderPathAndSubDirA;
        pub const SHBrowseForFolder = SHBrowseForFolderA;
        pub const SHUpdateImage = SHUpdateImageA;
        pub const SHGetDataFromIDList = SHGetDataFromIDListA;
        pub const SHDefExtractIcon = SHDefExtractIconA;
        pub const SHPathPrepareForWrite = SHPathPrepareForWriteA;
        pub const PathIsSlow = PathIsSlowA;
        pub const StrChr = StrChrA;
        pub const StrChrI = StrChrIA;
        pub const StrCmpN = StrCmpNA;
        pub const StrCmpNI = StrCmpNIA;
        pub const StrCSpn = StrCSpnA;
        pub const StrCSpnI = StrCSpnIA;
        pub const StrDup = StrDupA;
        pub const StrFormatByteSize = StrFormatByteSizeA;
        pub const StrFormatKBSize = StrFormatKBSizeA;
        pub const StrFromTimeInterval = StrFromTimeIntervalA;
        pub const StrIsIntlEqual = StrIsIntlEqualA;
        pub const StrNCat = StrNCatA;
        pub const StrPBrk = StrPBrkA;
        pub const StrRChr = StrRChrA;
        pub const StrRChrI = StrRChrIA;
        pub const StrRStrI = StrRStrIA;
        pub const StrSpn = StrSpnA;
        pub const StrStr = StrStrA;
        pub const StrStrI = StrStrIA;
        pub const StrToInt = StrToIntA;
        pub const StrToIntEx = StrToIntExA;
        pub const StrToInt64Ex = StrToInt64ExA;
        pub const StrTrim = StrTrimA;
        pub const StrCatBuff = StrCatBuffA;
        pub const ChrCmpI = ChrCmpIA;
        pub const wvnsprintf = wvnsprintfA;
        pub const wnsprintf = wnsprintfA;
        pub const StrRetToStr = StrRetToStrA;
        pub const StrRetToBuf = StrRetToBufA;
        pub const SHStrDup = SHStrDupA;
        pub const IsCharSpace = IsCharSpaceA;
        pub const StrCmpC = StrCmpCA;
        pub const StrCmpIC = StrCmpICA;
        pub const StrCmpNC = StrCmpNCA;
        pub const StrCmpNIC = StrCmpNICA;
        pub const IntlStrEqWorker = IntlStrEqWorkerA;
        pub const PathAddBackslash = PathAddBackslashA;
        pub const PathAddExtension = PathAddExtensionA;
        pub const PathAppend = PathAppendA;
        pub const PathBuildRoot = PathBuildRootA;
        pub const PathCanonicalize = PathCanonicalizeA;
        pub const PathCombine = PathCombineA;
        pub const PathCompactPath = PathCompactPathA;
        pub const PathCompactPathEx = PathCompactPathExA;
        pub const PathCommonPrefix = PathCommonPrefixA;
        pub const PathFileExists = PathFileExistsA;
        pub const PathFindExtension = PathFindExtensionA;
        pub const PathFindFileName = PathFindFileNameA;
        pub const PathFindNextComponent = PathFindNextComponentA;
        pub const PathFindOnPath = PathFindOnPathA;
        pub const PathFindSuffixArray = PathFindSuffixArrayA;
        pub const PathGetArgs = PathGetArgsA;
        pub const PathIsLFNFileSpec = PathIsLFNFileSpecA;
        pub const PathGetCharType = PathGetCharTypeA;
        pub const PathGetDriveNumber = PathGetDriveNumberA;
        pub const PathIsDirectory = PathIsDirectoryA;
        pub const PathIsDirectoryEmpty = PathIsDirectoryEmptyA;
        pub const PathIsFileSpec = PathIsFileSpecA;
        pub const PathIsPrefix = PathIsPrefixA;
        pub const PathIsRelative = PathIsRelativeA;
        pub const PathIsRoot = PathIsRootA;
        pub const PathIsSameRoot = PathIsSameRootA;
        pub const PathIsUNC = PathIsUNCA;
        pub const PathIsNetworkPath = PathIsNetworkPathA;
        pub const PathIsUNCServer = PathIsUNCServerA;
        pub const PathIsUNCServerShare = PathIsUNCServerShareA;
        pub const PathIsContentType = PathIsContentTypeA;
        pub const PathIsURL = PathIsURLA;
        pub const PathMakePretty = PathMakePrettyA;
        pub const PathMatchSpec = PathMatchSpecA;
        pub const PathMatchSpecEx = PathMatchSpecExA;
        pub const PathParseIconLocation = PathParseIconLocationA;
        pub const PathQuoteSpaces = PathQuoteSpacesA;
        pub const PathRelativePathTo = PathRelativePathToA;
        pub const PathRemoveArgs = PathRemoveArgsA;
        pub const PathRemoveBackslash = PathRemoveBackslashA;
        pub const PathRemoveBlanks = PathRemoveBlanksA;
        pub const PathRemoveExtension = PathRemoveExtensionA;
        pub const PathRemoveFileSpec = PathRemoveFileSpecA;
        pub const PathRenameExtension = PathRenameExtensionA;
        pub const PathSearchAndQualify = PathSearchAndQualifyA;
        pub const PathSetDlgItemPath = PathSetDlgItemPathA;
        pub const PathSkipRoot = PathSkipRootA;
        pub const PathStripPath = PathStripPathA;
        pub const PathStripToRoot = PathStripToRootA;
        pub const PathUnquoteSpaces = PathUnquoteSpacesA;
        pub const PathMakeSystemFolder = PathMakeSystemFolderA;
        pub const PathUnmakeSystemFolder = PathUnmakeSystemFolderA;
        pub const PathIsSystemFolder = PathIsSystemFolderA;
        pub const PathUndecorate = PathUndecorateA;
        pub const PathUnExpandEnvStrings = PathUnExpandEnvStringsA;
        pub const UrlCompare = UrlCompareA;
        pub const UrlCombine = UrlCombineA;
        pub const UrlCanonicalize = UrlCanonicalizeA;
        pub const UrlIsOpaque = UrlIsOpaqueA;
        pub const UrlIsNoHistory = UrlIsNoHistoryA;
        pub const UrlIs = UrlIsA;
        pub const UrlGetLocation = UrlGetLocationA;
        pub const UrlUnescape = UrlUnescapeA;
        pub const UrlEscape = UrlEscapeA;
        pub const UrlCreateFromPath = UrlCreateFromPathA;
        pub const PathCreateFromUrl = PathCreateFromUrlA;
        pub const UrlHash = UrlHashA;
        pub const UrlGetPart = UrlGetPartA;
        pub const UrlApplyScheme = UrlApplySchemeA;
        pub const ParseURL = ParseURLA;
        pub const SHDeleteEmptyKey = SHDeleteEmptyKeyA;
        pub const SHDeleteKey = SHDeleteKeyA;
        pub const SHDeleteValue = SHDeleteValueA;
        pub const SHGetValue = SHGetValueA;
        pub const SHSetValue = SHSetValueA;
        pub const SHRegGetValue = SHRegGetValueA;
        pub const SHQueryValueEx = SHQueryValueExA;
        pub const SHEnumKeyEx = SHEnumKeyExA;
        pub const SHEnumValue = SHEnumValueA;
        pub const SHQueryInfoKey = SHQueryInfoKeyA;
        pub const SHCopyKey = SHCopyKeyA;
        pub const SHRegGetPath = SHRegGetPathA;
        pub const SHRegSetPath = SHRegSetPathA;
        pub const SHRegCreateUSKey = SHRegCreateUSKeyA;
        pub const SHRegOpenUSKey = SHRegOpenUSKeyA;
        pub const SHRegQueryUSValue = SHRegQueryUSValueA;
        pub const SHRegWriteUSValue = SHRegWriteUSValueA;
        pub const SHRegDeleteUSValue = SHRegDeleteUSValueA;
        pub const SHRegDeleteEmptyUSKey = SHRegDeleteEmptyUSKeyA;
        pub const SHRegEnumUSKey = SHRegEnumUSKeyA;
        pub const SHRegEnumUSValue = SHRegEnumUSValueA;
        pub const SHRegQueryInfoUSKey = SHRegQueryInfoUSKeyA;
        pub const SHRegGetUSValue = SHRegGetUSValueA;
        pub const SHRegSetUSValue = SHRegSetUSValueA;
        pub const SHRegGetBoolUSValue = SHRegGetBoolUSValueA;
        pub const AssocQueryString = AssocQueryStringA;
        pub const AssocQueryStringByKey = AssocQueryStringByKeyA;
        pub const AssocQueryKey = AssocQueryKeyA;
        pub const SHOpenRegStream = SHOpenRegStreamA;
        pub const SHOpenRegStream2 = SHOpenRegStream2A;
        pub const SHCreateStreamOnFile = SHCreateStreamOnFileA;
        pub const GetAcceptLanguages = GetAcceptLanguagesA;
        pub const SHFormatDateTime = SHFormatDateTimeA;
        pub const SHMessageBoxCheck = SHMessageBoxCheckA;
        pub const SHSendMessageBroadcast = SHSendMessageBroadcastA;
        pub const SHStripMneumonic = SHStripMneumonicA;
        pub const LoadUserProfile = LoadUserProfileA;
        pub const GetProfilesDirectory = GetProfilesDirectoryA;
        pub const DeleteProfile = DeleteProfileA;
        pub const GetDefaultUserProfileDirectory = GetDefaultUserProfileDirectoryA;
        pub const GetAllUsersProfileDirectory = GetAllUsersProfileDirectoryA;
        pub const GetUserProfileDirectory = GetUserProfileDirectoryA;
        pub const ExpandEnvironmentStringsForUser = ExpandEnvironmentStringsForUserA;
    },
    .wide => struct {
        pub const MULTIKEYHELP = MULTIKEYHELPW;
        pub const HELPWININFO = HELPWININFOW;
        pub const LOGFONT = LOGFONTW;
        pub const DRAGINFO = DRAGINFOW;
        pub const SHFILEOPSTRUCT = SHFILEOPSTRUCTW;
        pub const SHNAMEMAPPING = SHNAMEMAPPINGW;
        pub const SHELLEXECUTEINFO = SHELLEXECUTEINFOW;
        pub const NOTIFYICONDATA = NOTIFYICONDATAW;
        pub const SHFILEINFO = SHFILEINFOW;
        pub const OPEN_PRINTER_PROPS_INFO = OPEN_PRINTER_PROPS_INFOW;
        pub const IShellLink = IShellLinkW;
        pub const IExtractIcon = IExtractIconW;
        pub const IShellExecuteHook = IShellExecuteHookW;
        pub const BROWSEINFO = BROWSEINFOW;
        pub const FILEDESCRIPTOR = FILEDESCRIPTORW;
        pub const FILEGROUPDESCRIPTOR = FILEGROUPDESCRIPTORW;
        pub const SHELLSTATE = SHELLSTATEW;
        pub const INewShortcutHook = INewShortcutHookW;
        pub const ICopyHook = ICopyHookW;
        pub const PARSEDURL = PARSEDURLW;
        pub const NEWCPLINFO = NEWCPLINFOW;
        pub const PROFILEINFO = PROFILEINFOW;
        pub const urlinvokecommandinfo = urlinvokecommandinfoW;
        pub const IUniformResourceLocator = IUniformResourceLocatorW;
        pub const IEnumRegisterWord = IEnumRegisterWordW;
        pub const WinHelp = WinHelpW;
        pub const DragQueryFile = DragQueryFileW;
        pub const ShellExecute = ShellExecuteW;
        pub const FindExecutable = FindExecutableW;
        pub const ShellAbout = ShellAboutW;
        pub const ExtractAssociatedIcon = ExtractAssociatedIconW;
        pub const ExtractAssociatedIconEx = ExtractAssociatedIconExW;
        pub const ExtractIcon = ExtractIconW;
        pub const DoEnvironmentSubst = DoEnvironmentSubstW;
        pub const ExtractIconEx = ExtractIconExW;
        pub const SHFileOperation = SHFileOperationW;
        pub const ShellExecuteEx = ShellExecuteExW;
        pub const SHQueryRecycleBin = SHQueryRecycleBinW;
        pub const SHEmptyRecycleBin = SHEmptyRecycleBinW;
        pub const Shell_NotifyIcon = Shell_NotifyIconW;
        pub const SHGetFileInfo = SHGetFileInfoW;
        pub const SHGetDiskFreeSpaceEx = SHGetDiskFreeSpaceExW;
        pub const SHGetNewLinkInfo = SHGetNewLinkInfoW;
        pub const SHInvokePrinterCommand = SHInvokePrinterCommandW;
        pub const ShellMessageBox = ShellMessageBoxW;
        pub const IsLFNDrive = IsLFNDriveW;
        pub const SHGetIconOverlayIndex = SHGetIconOverlayIndexW;
        pub const ILCreateFromPath = ILCreateFromPathW;
        pub const SHGetPathFromIDList = SHGetPathFromIDListW;
        pub const SHCreateDirectoryEx = SHCreateDirectoryExW;
        pub const SHGetSpecialFolderPath = SHGetSpecialFolderPathW;
        pub const SHGetFolderPath = SHGetFolderPathW;
        pub const SHSetFolderPath = SHSetFolderPathW;
        pub const SHGetFolderPathAndSubDir = SHGetFolderPathAndSubDirW;
        pub const SHBrowseForFolder = SHBrowseForFolderW;
        pub const SHUpdateImage = SHUpdateImageW;
        pub const SHGetDataFromIDList = SHGetDataFromIDListW;
        pub const SHDefExtractIcon = SHDefExtractIconW;
        pub const SHPathPrepareForWrite = SHPathPrepareForWriteW;
        pub const PathIsSlow = PathIsSlowW;
        pub const StrChr = StrChrW;
        pub const StrChrI = StrChrIW;
        pub const StrCmpN = StrCmpNW;
        pub const StrCmpNI = StrCmpNIW;
        pub const StrCSpn = StrCSpnW;
        pub const StrCSpnI = StrCSpnIW;
        pub const StrDup = StrDupW;
        pub const StrFormatByteSize = StrFormatByteSizeW;
        pub const StrFormatKBSize = StrFormatKBSizeW;
        pub const StrFromTimeInterval = StrFromTimeIntervalW;
        pub const StrIsIntlEqual = StrIsIntlEqualW;
        pub const StrNCat = StrNCatW;
        pub const StrPBrk = StrPBrkW;
        pub const StrRChr = StrRChrW;
        pub const StrRChrI = StrRChrIW;
        pub const StrRStrI = StrRStrIW;
        pub const StrSpn = StrSpnW;
        pub const StrStr = StrStrW;
        pub const StrStrI = StrStrIW;
        pub const StrToInt = StrToIntW;
        pub const StrToIntEx = StrToIntExW;
        pub const StrToInt64Ex = StrToInt64ExW;
        pub const StrTrim = StrTrimW;
        pub const StrCatBuff = StrCatBuffW;
        pub const ChrCmpI = ChrCmpIW;
        pub const wvnsprintf = wvnsprintfW;
        pub const wnsprintf = wnsprintfW;
        pub const StrRetToStr = StrRetToStrW;
        pub const StrRetToBuf = StrRetToBufW;
        pub const SHStrDup = SHStrDupW;
        pub const IsCharSpace = IsCharSpaceW;
        pub const StrCmpC = StrCmpCW;
        pub const StrCmpIC = StrCmpICW;
        pub const StrCmpNC = StrCmpNCW;
        pub const StrCmpNIC = StrCmpNICW;
        pub const IntlStrEqWorker = IntlStrEqWorkerW;
        pub const PathAddBackslash = PathAddBackslashW;
        pub const PathAddExtension = PathAddExtensionW;
        pub const PathAppend = PathAppendW;
        pub const PathBuildRoot = PathBuildRootW;
        pub const PathCanonicalize = PathCanonicalizeW;
        pub const PathCombine = PathCombineW;
        pub const PathCompactPath = PathCompactPathW;
        pub const PathCompactPathEx = PathCompactPathExW;
        pub const PathCommonPrefix = PathCommonPrefixW;
        pub const PathFileExists = PathFileExistsW;
        pub const PathFindExtension = PathFindExtensionW;
        pub const PathFindFileName = PathFindFileNameW;
        pub const PathFindNextComponent = PathFindNextComponentW;
        pub const PathFindOnPath = PathFindOnPathW;
        pub const PathFindSuffixArray = PathFindSuffixArrayW;
        pub const PathGetArgs = PathGetArgsW;
        pub const PathIsLFNFileSpec = PathIsLFNFileSpecW;
        pub const PathGetCharType = PathGetCharTypeW;
        pub const PathGetDriveNumber = PathGetDriveNumberW;
        pub const PathIsDirectory = PathIsDirectoryW;
        pub const PathIsDirectoryEmpty = PathIsDirectoryEmptyW;
        pub const PathIsFileSpec = PathIsFileSpecW;
        pub const PathIsPrefix = PathIsPrefixW;
        pub const PathIsRelative = PathIsRelativeW;
        pub const PathIsRoot = PathIsRootW;
        pub const PathIsSameRoot = PathIsSameRootW;
        pub const PathIsUNC = PathIsUNCW;
        pub const PathIsNetworkPath = PathIsNetworkPathW;
        pub const PathIsUNCServer = PathIsUNCServerW;
        pub const PathIsUNCServerShare = PathIsUNCServerShareW;
        pub const PathIsContentType = PathIsContentTypeW;
        pub const PathIsURL = PathIsURLW;
        pub const PathMakePretty = PathMakePrettyW;
        pub const PathMatchSpec = PathMatchSpecW;
        pub const PathMatchSpecEx = PathMatchSpecExW;
        pub const PathParseIconLocation = PathParseIconLocationW;
        pub const PathQuoteSpaces = PathQuoteSpacesW;
        pub const PathRelativePathTo = PathRelativePathToW;
        pub const PathRemoveArgs = PathRemoveArgsW;
        pub const PathRemoveBackslash = PathRemoveBackslashW;
        pub const PathRemoveBlanks = PathRemoveBlanksW;
        pub const PathRemoveExtension = PathRemoveExtensionW;
        pub const PathRemoveFileSpec = PathRemoveFileSpecW;
        pub const PathRenameExtension = PathRenameExtensionW;
        pub const PathSearchAndQualify = PathSearchAndQualifyW;
        pub const PathSetDlgItemPath = PathSetDlgItemPathW;
        pub const PathSkipRoot = PathSkipRootW;
        pub const PathStripPath = PathStripPathW;
        pub const PathStripToRoot = PathStripToRootW;
        pub const PathUnquoteSpaces = PathUnquoteSpacesW;
        pub const PathMakeSystemFolder = PathMakeSystemFolderW;
        pub const PathUnmakeSystemFolder = PathUnmakeSystemFolderW;
        pub const PathIsSystemFolder = PathIsSystemFolderW;
        pub const PathUndecorate = PathUndecorateW;
        pub const PathUnExpandEnvStrings = PathUnExpandEnvStringsW;
        pub const UrlCompare = UrlCompareW;
        pub const UrlCombine = UrlCombineW;
        pub const UrlCanonicalize = UrlCanonicalizeW;
        pub const UrlIsOpaque = UrlIsOpaqueW;
        pub const UrlIsNoHistory = UrlIsNoHistoryW;
        pub const UrlIs = UrlIsW;
        pub const UrlGetLocation = UrlGetLocationW;
        pub const UrlUnescape = UrlUnescapeW;
        pub const UrlEscape = UrlEscapeW;
        pub const UrlCreateFromPath = UrlCreateFromPathW;
        pub const PathCreateFromUrl = PathCreateFromUrlW;
        pub const UrlHash = UrlHashW;
        pub const UrlGetPart = UrlGetPartW;
        pub const UrlApplyScheme = UrlApplySchemeW;
        pub const ParseURL = ParseURLW;
        pub const SHDeleteEmptyKey = SHDeleteEmptyKeyW;
        pub const SHDeleteKey = SHDeleteKeyW;
        pub const SHDeleteValue = SHDeleteValueW;
        pub const SHGetValue = SHGetValueW;
        pub const SHSetValue = SHSetValueW;
        pub const SHRegGetValue = SHRegGetValueW;
        pub const SHQueryValueEx = SHQueryValueExW;
        pub const SHEnumKeyEx = SHEnumKeyExW;
        pub const SHEnumValue = SHEnumValueW;
        pub const SHQueryInfoKey = SHQueryInfoKeyW;
        pub const SHCopyKey = SHCopyKeyW;
        pub const SHRegGetPath = SHRegGetPathW;
        pub const SHRegSetPath = SHRegSetPathW;
        pub const SHRegCreateUSKey = SHRegCreateUSKeyW;
        pub const SHRegOpenUSKey = SHRegOpenUSKeyW;
        pub const SHRegQueryUSValue = SHRegQueryUSValueW;
        pub const SHRegWriteUSValue = SHRegWriteUSValueW;
        pub const SHRegDeleteUSValue = SHRegDeleteUSValueW;
        pub const SHRegDeleteEmptyUSKey = SHRegDeleteEmptyUSKeyW;
        pub const SHRegEnumUSKey = SHRegEnumUSKeyW;
        pub const SHRegEnumUSValue = SHRegEnumUSValueW;
        pub const SHRegQueryInfoUSKey = SHRegQueryInfoUSKeyW;
        pub const SHRegGetUSValue = SHRegGetUSValueW;
        pub const SHRegSetUSValue = SHRegSetUSValueW;
        pub const SHRegGetBoolUSValue = SHRegGetBoolUSValueW;
        pub const AssocQueryString = AssocQueryStringW;
        pub const AssocQueryStringByKey = AssocQueryStringByKeyW;
        pub const AssocQueryKey = AssocQueryKeyW;
        pub const SHOpenRegStream = SHOpenRegStreamW;
        pub const SHOpenRegStream2 = SHOpenRegStream2W;
        pub const SHCreateStreamOnFile = SHCreateStreamOnFileW;
        pub const GetAcceptLanguages = GetAcceptLanguagesW;
        pub const SHFormatDateTime = SHFormatDateTimeW;
        pub const SHMessageBoxCheck = SHMessageBoxCheckW;
        pub const SHSendMessageBroadcast = SHSendMessageBroadcastW;
        pub const SHStripMneumonic = SHStripMneumonicW;
        pub const LoadUserProfile = LoadUserProfileW;
        pub const GetProfilesDirectory = GetProfilesDirectoryW;
        pub const DeleteProfile = DeleteProfileW;
        pub const GetDefaultUserProfileDirectory = GetDefaultUserProfileDirectoryW;
        pub const GetAllUsersProfileDirectory = GetAllUsersProfileDirectoryW;
        pub const GetUserProfileDirectory = GetUserProfileDirectoryW;
        pub const ExpandEnvironmentStringsForUser = ExpandEnvironmentStringsForUserW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const MULTIKEYHELP = *opaque{};
        pub const HELPWININFO = *opaque{};
        pub const LOGFONT = *opaque{};
        pub const DRAGINFO = *opaque{};
        pub const SHFILEOPSTRUCT = *opaque{};
        pub const SHNAMEMAPPING = *opaque{};
        pub const SHELLEXECUTEINFO = *opaque{};
        pub const NOTIFYICONDATA = *opaque{};
        pub const SHFILEINFO = *opaque{};
        pub const OPEN_PRINTER_PROPS_INFO = *opaque{};
        pub const IShellLink = *opaque{};
        pub const IExtractIcon = *opaque{};
        pub const IShellExecuteHook = *opaque{};
        pub const BROWSEINFO = *opaque{};
        pub const FILEDESCRIPTOR = *opaque{};
        pub const FILEGROUPDESCRIPTOR = *opaque{};
        pub const SHELLSTATE = *opaque{};
        pub const INewShortcutHook = *opaque{};
        pub const ICopyHook = *opaque{};
        pub const PARSEDURL = *opaque{};
        pub const NEWCPLINFO = *opaque{};
        pub const PROFILEINFO = *opaque{};
        pub const urlinvokecommandinfo = *opaque{};
        pub const IUniformResourceLocator = *opaque{};
        pub const IEnumRegisterWord = *opaque{};
        pub const WinHelp = *opaque{};
        pub const DragQueryFile = *opaque{};
        pub const ShellExecute = *opaque{};
        pub const FindExecutable = *opaque{};
        pub const ShellAbout = *opaque{};
        pub const ExtractAssociatedIcon = *opaque{};
        pub const ExtractAssociatedIconEx = *opaque{};
        pub const ExtractIcon = *opaque{};
        pub const DoEnvironmentSubst = *opaque{};
        pub const ExtractIconEx = *opaque{};
        pub const SHFileOperation = *opaque{};
        pub const ShellExecuteEx = *opaque{};
        pub const SHQueryRecycleBin = *opaque{};
        pub const SHEmptyRecycleBin = *opaque{};
        pub const Shell_NotifyIcon = *opaque{};
        pub const SHGetFileInfo = *opaque{};
        pub const SHGetDiskFreeSpaceEx = *opaque{};
        pub const SHGetNewLinkInfo = *opaque{};
        pub const SHInvokePrinterCommand = *opaque{};
        pub const ShellMessageBox = *opaque{};
        pub const IsLFNDrive = *opaque{};
        pub const SHGetIconOverlayIndex = *opaque{};
        pub const ILCreateFromPath = *opaque{};
        pub const SHGetPathFromIDList = *opaque{};
        pub const SHCreateDirectoryEx = *opaque{};
        pub const SHGetSpecialFolderPath = *opaque{};
        pub const SHGetFolderPath = *opaque{};
        pub const SHSetFolderPath = *opaque{};
        pub const SHGetFolderPathAndSubDir = *opaque{};
        pub const SHBrowseForFolder = *opaque{};
        pub const SHUpdateImage = *opaque{};
        pub const SHGetDataFromIDList = *opaque{};
        pub const SHDefExtractIcon = *opaque{};
        pub const SHPathPrepareForWrite = *opaque{};
        pub const PathIsSlow = *opaque{};
        pub const StrChr = *opaque{};
        pub const StrChrI = *opaque{};
        pub const StrCmpN = *opaque{};
        pub const StrCmpNI = *opaque{};
        pub const StrCSpn = *opaque{};
        pub const StrCSpnI = *opaque{};
        pub const StrDup = *opaque{};
        pub const StrFormatByteSize = *opaque{};
        pub const StrFormatKBSize = *opaque{};
        pub const StrFromTimeInterval = *opaque{};
        pub const StrIsIntlEqual = *opaque{};
        pub const StrNCat = *opaque{};
        pub const StrPBrk = *opaque{};
        pub const StrRChr = *opaque{};
        pub const StrRChrI = *opaque{};
        pub const StrRStrI = *opaque{};
        pub const StrSpn = *opaque{};
        pub const StrStr = *opaque{};
        pub const StrStrI = *opaque{};
        pub const StrToInt = *opaque{};
        pub const StrToIntEx = *opaque{};
        pub const StrToInt64Ex = *opaque{};
        pub const StrTrim = *opaque{};
        pub const StrCatBuff = *opaque{};
        pub const ChrCmpI = *opaque{};
        pub const wvnsprintf = *opaque{};
        pub const wnsprintf = *opaque{};
        pub const StrRetToStr = *opaque{};
        pub const StrRetToBuf = *opaque{};
        pub const SHStrDup = *opaque{};
        pub const IsCharSpace = *opaque{};
        pub const StrCmpC = *opaque{};
        pub const StrCmpIC = *opaque{};
        pub const StrCmpNC = *opaque{};
        pub const StrCmpNIC = *opaque{};
        pub const IntlStrEqWorker = *opaque{};
        pub const PathAddBackslash = *opaque{};
        pub const PathAddExtension = *opaque{};
        pub const PathAppend = *opaque{};
        pub const PathBuildRoot = *opaque{};
        pub const PathCanonicalize = *opaque{};
        pub const PathCombine = *opaque{};
        pub const PathCompactPath = *opaque{};
        pub const PathCompactPathEx = *opaque{};
        pub const PathCommonPrefix = *opaque{};
        pub const PathFileExists = *opaque{};
        pub const PathFindExtension = *opaque{};
        pub const PathFindFileName = *opaque{};
        pub const PathFindNextComponent = *opaque{};
        pub const PathFindOnPath = *opaque{};
        pub const PathFindSuffixArray = *opaque{};
        pub const PathGetArgs = *opaque{};
        pub const PathIsLFNFileSpec = *opaque{};
        pub const PathGetCharType = *opaque{};
        pub const PathGetDriveNumber = *opaque{};
        pub const PathIsDirectory = *opaque{};
        pub const PathIsDirectoryEmpty = *opaque{};
        pub const PathIsFileSpec = *opaque{};
        pub const PathIsPrefix = *opaque{};
        pub const PathIsRelative = *opaque{};
        pub const PathIsRoot = *opaque{};
        pub const PathIsSameRoot = *opaque{};
        pub const PathIsUNC = *opaque{};
        pub const PathIsNetworkPath = *opaque{};
        pub const PathIsUNCServer = *opaque{};
        pub const PathIsUNCServerShare = *opaque{};
        pub const PathIsContentType = *opaque{};
        pub const PathIsURL = *opaque{};
        pub const PathMakePretty = *opaque{};
        pub const PathMatchSpec = *opaque{};
        pub const PathMatchSpecEx = *opaque{};
        pub const PathParseIconLocation = *opaque{};
        pub const PathQuoteSpaces = *opaque{};
        pub const PathRelativePathTo = *opaque{};
        pub const PathRemoveArgs = *opaque{};
        pub const PathRemoveBackslash = *opaque{};
        pub const PathRemoveBlanks = *opaque{};
        pub const PathRemoveExtension = *opaque{};
        pub const PathRemoveFileSpec = *opaque{};
        pub const PathRenameExtension = *opaque{};
        pub const PathSearchAndQualify = *opaque{};
        pub const PathSetDlgItemPath = *opaque{};
        pub const PathSkipRoot = *opaque{};
        pub const PathStripPath = *opaque{};
        pub const PathStripToRoot = *opaque{};
        pub const PathUnquoteSpaces = *opaque{};
        pub const PathMakeSystemFolder = *opaque{};
        pub const PathUnmakeSystemFolder = *opaque{};
        pub const PathIsSystemFolder = *opaque{};
        pub const PathUndecorate = *opaque{};
        pub const PathUnExpandEnvStrings = *opaque{};
        pub const UrlCompare = *opaque{};
        pub const UrlCombine = *opaque{};
        pub const UrlCanonicalize = *opaque{};
        pub const UrlIsOpaque = *opaque{};
        pub const UrlIsNoHistory = *opaque{};
        pub const UrlIs = *opaque{};
        pub const UrlGetLocation = *opaque{};
        pub const UrlUnescape = *opaque{};
        pub const UrlEscape = *opaque{};
        pub const UrlCreateFromPath = *opaque{};
        pub const PathCreateFromUrl = *opaque{};
        pub const UrlHash = *opaque{};
        pub const UrlGetPart = *opaque{};
        pub const UrlApplyScheme = *opaque{};
        pub const ParseURL = *opaque{};
        pub const SHDeleteEmptyKey = *opaque{};
        pub const SHDeleteKey = *opaque{};
        pub const SHDeleteValue = *opaque{};
        pub const SHGetValue = *opaque{};
        pub const SHSetValue = *opaque{};
        pub const SHRegGetValue = *opaque{};
        pub const SHQueryValueEx = *opaque{};
        pub const SHEnumKeyEx = *opaque{};
        pub const SHEnumValue = *opaque{};
        pub const SHQueryInfoKey = *opaque{};
        pub const SHCopyKey = *opaque{};
        pub const SHRegGetPath = *opaque{};
        pub const SHRegSetPath = *opaque{};
        pub const SHRegCreateUSKey = *opaque{};
        pub const SHRegOpenUSKey = *opaque{};
        pub const SHRegQueryUSValue = *opaque{};
        pub const SHRegWriteUSValue = *opaque{};
        pub const SHRegDeleteUSValue = *opaque{};
        pub const SHRegDeleteEmptyUSKey = *opaque{};
        pub const SHRegEnumUSKey = *opaque{};
        pub const SHRegEnumUSValue = *opaque{};
        pub const SHRegQueryInfoUSKey = *opaque{};
        pub const SHRegGetUSValue = *opaque{};
        pub const SHRegSetUSValue = *opaque{};
        pub const SHRegGetBoolUSValue = *opaque{};
        pub const AssocQueryString = *opaque{};
        pub const AssocQueryStringByKey = *opaque{};
        pub const AssocQueryKey = *opaque{};
        pub const SHOpenRegStream = *opaque{};
        pub const SHOpenRegStream2 = *opaque{};
        pub const SHCreateStreamOnFile = *opaque{};
        pub const GetAcceptLanguages = *opaque{};
        pub const SHFormatDateTime = *opaque{};
        pub const SHMessageBoxCheck = *opaque{};
        pub const SHSendMessageBroadcast = *opaque{};
        pub const SHStripMneumonic = *opaque{};
        pub const LoadUserProfile = *opaque{};
        pub const GetProfilesDirectory = *opaque{};
        pub const DeleteProfile = *opaque{};
        pub const GetDefaultUserProfileDirectory = *opaque{};
        pub const GetAllUsersProfileDirectory = *opaque{};
        pub const GetUserProfileDirectory = *opaque{};
        pub const ExpandEnvironmentStringsForUser = *opaque{};
    } else struct {
        pub const MULTIKEYHELP = @compileError("'MULTIKEYHELP' requires that UNICODE be set to true or false in the root module");
        pub const HELPWININFO = @compileError("'HELPWININFO' requires that UNICODE be set to true or false in the root module");
        pub const LOGFONT = @compileError("'LOGFONT' requires that UNICODE be set to true or false in the root module");
        pub const DRAGINFO = @compileError("'DRAGINFO' requires that UNICODE be set to true or false in the root module");
        pub const SHFILEOPSTRUCT = @compileError("'SHFILEOPSTRUCT' requires that UNICODE be set to true or false in the root module");
        pub const SHNAMEMAPPING = @compileError("'SHNAMEMAPPING' requires that UNICODE be set to true or false in the root module");
        pub const SHELLEXECUTEINFO = @compileError("'SHELLEXECUTEINFO' requires that UNICODE be set to true or false in the root module");
        pub const NOTIFYICONDATA = @compileError("'NOTIFYICONDATA' requires that UNICODE be set to true or false in the root module");
        pub const SHFILEINFO = @compileError("'SHFILEINFO' requires that UNICODE be set to true or false in the root module");
        pub const OPEN_PRINTER_PROPS_INFO = @compileError("'OPEN_PRINTER_PROPS_INFO' requires that UNICODE be set to true or false in the root module");
        pub const IShellLink = @compileError("'IShellLink' requires that UNICODE be set to true or false in the root module");
        pub const IExtractIcon = @compileError("'IExtractIcon' requires that UNICODE be set to true or false in the root module");
        pub const IShellExecuteHook = @compileError("'IShellExecuteHook' requires that UNICODE be set to true or false in the root module");
        pub const BROWSEINFO = @compileError("'BROWSEINFO' requires that UNICODE be set to true or false in the root module");
        pub const FILEDESCRIPTOR = @compileError("'FILEDESCRIPTOR' requires that UNICODE be set to true or false in the root module");
        pub const FILEGROUPDESCRIPTOR = @compileError("'FILEGROUPDESCRIPTOR' requires that UNICODE be set to true or false in the root module");
        pub const SHELLSTATE = @compileError("'SHELLSTATE' requires that UNICODE be set to true or false in the root module");
        pub const INewShortcutHook = @compileError("'INewShortcutHook' requires that UNICODE be set to true or false in the root module");
        pub const ICopyHook = @compileError("'ICopyHook' requires that UNICODE be set to true or false in the root module");
        pub const PARSEDURL = @compileError("'PARSEDURL' requires that UNICODE be set to true or false in the root module");
        pub const NEWCPLINFO = @compileError("'NEWCPLINFO' requires that UNICODE be set to true or false in the root module");
        pub const PROFILEINFO = @compileError("'PROFILEINFO' requires that UNICODE be set to true or false in the root module");
        pub const urlinvokecommandinfo = @compileError("'urlinvokecommandinfo' requires that UNICODE be set to true or false in the root module");
        pub const IUniformResourceLocator = @compileError("'IUniformResourceLocator' requires that UNICODE be set to true or false in the root module");
        pub const IEnumRegisterWord = @compileError("'IEnumRegisterWord' requires that UNICODE be set to true or false in the root module");
        pub const WinHelp = @compileError("'WinHelp' requires that UNICODE be set to true or false in the root module");
        pub const DragQueryFile = @compileError("'DragQueryFile' requires that UNICODE be set to true or false in the root module");
        pub const ShellExecute = @compileError("'ShellExecute' requires that UNICODE be set to true or false in the root module");
        pub const FindExecutable = @compileError("'FindExecutable' requires that UNICODE be set to true or false in the root module");
        pub const ShellAbout = @compileError("'ShellAbout' requires that UNICODE be set to true or false in the root module");
        pub const ExtractAssociatedIcon = @compileError("'ExtractAssociatedIcon' requires that UNICODE be set to true or false in the root module");
        pub const ExtractAssociatedIconEx = @compileError("'ExtractAssociatedIconEx' requires that UNICODE be set to true or false in the root module");
        pub const ExtractIcon = @compileError("'ExtractIcon' requires that UNICODE be set to true or false in the root module");
        pub const DoEnvironmentSubst = @compileError("'DoEnvironmentSubst' requires that UNICODE be set to true or false in the root module");
        pub const ExtractIconEx = @compileError("'ExtractIconEx' requires that UNICODE be set to true or false in the root module");
        pub const SHFileOperation = @compileError("'SHFileOperation' requires that UNICODE be set to true or false in the root module");
        pub const ShellExecuteEx = @compileError("'ShellExecuteEx' requires that UNICODE be set to true or false in the root module");
        pub const SHQueryRecycleBin = @compileError("'SHQueryRecycleBin' requires that UNICODE be set to true or false in the root module");
        pub const SHEmptyRecycleBin = @compileError("'SHEmptyRecycleBin' requires that UNICODE be set to true or false in the root module");
        pub const Shell_NotifyIcon = @compileError("'Shell_NotifyIcon' requires that UNICODE be set to true or false in the root module");
        pub const SHGetFileInfo = @compileError("'SHGetFileInfo' requires that UNICODE be set to true or false in the root module");
        pub const SHGetDiskFreeSpaceEx = @compileError("'SHGetDiskFreeSpaceEx' requires that UNICODE be set to true or false in the root module");
        pub const SHGetNewLinkInfo = @compileError("'SHGetNewLinkInfo' requires that UNICODE be set to true or false in the root module");
        pub const SHInvokePrinterCommand = @compileError("'SHInvokePrinterCommand' requires that UNICODE be set to true or false in the root module");
        pub const ShellMessageBox = @compileError("'ShellMessageBox' requires that UNICODE be set to true or false in the root module");
        pub const IsLFNDrive = @compileError("'IsLFNDrive' requires that UNICODE be set to true or false in the root module");
        pub const SHGetIconOverlayIndex = @compileError("'SHGetIconOverlayIndex' requires that UNICODE be set to true or false in the root module");
        pub const ILCreateFromPath = @compileError("'ILCreateFromPath' requires that UNICODE be set to true or false in the root module");
        pub const SHGetPathFromIDList = @compileError("'SHGetPathFromIDList' requires that UNICODE be set to true or false in the root module");
        pub const SHCreateDirectoryEx = @compileError("'SHCreateDirectoryEx' requires that UNICODE be set to true or false in the root module");
        pub const SHGetSpecialFolderPath = @compileError("'SHGetSpecialFolderPath' requires that UNICODE be set to true or false in the root module");
        pub const SHGetFolderPath = @compileError("'SHGetFolderPath' requires that UNICODE be set to true or false in the root module");
        pub const SHSetFolderPath = @compileError("'SHSetFolderPath' requires that UNICODE be set to true or false in the root module");
        pub const SHGetFolderPathAndSubDir = @compileError("'SHGetFolderPathAndSubDir' requires that UNICODE be set to true or false in the root module");
        pub const SHBrowseForFolder = @compileError("'SHBrowseForFolder' requires that UNICODE be set to true or false in the root module");
        pub const SHUpdateImage = @compileError("'SHUpdateImage' requires that UNICODE be set to true or false in the root module");
        pub const SHGetDataFromIDList = @compileError("'SHGetDataFromIDList' requires that UNICODE be set to true or false in the root module");
        pub const SHDefExtractIcon = @compileError("'SHDefExtractIcon' requires that UNICODE be set to true or false in the root module");
        pub const SHPathPrepareForWrite = @compileError("'SHPathPrepareForWrite' requires that UNICODE be set to true or false in the root module");
        pub const PathIsSlow = @compileError("'PathIsSlow' requires that UNICODE be set to true or false in the root module");
        pub const StrChr = @compileError("'StrChr' requires that UNICODE be set to true or false in the root module");
        pub const StrChrI = @compileError("'StrChrI' requires that UNICODE be set to true or false in the root module");
        pub const StrCmpN = @compileError("'StrCmpN' requires that UNICODE be set to true or false in the root module");
        pub const StrCmpNI = @compileError("'StrCmpNI' requires that UNICODE be set to true or false in the root module");
        pub const StrCSpn = @compileError("'StrCSpn' requires that UNICODE be set to true or false in the root module");
        pub const StrCSpnI = @compileError("'StrCSpnI' requires that UNICODE be set to true or false in the root module");
        pub const StrDup = @compileError("'StrDup' requires that UNICODE be set to true or false in the root module");
        pub const StrFormatByteSize = @compileError("'StrFormatByteSize' requires that UNICODE be set to true or false in the root module");
        pub const StrFormatKBSize = @compileError("'StrFormatKBSize' requires that UNICODE be set to true or false in the root module");
        pub const StrFromTimeInterval = @compileError("'StrFromTimeInterval' requires that UNICODE be set to true or false in the root module");
        pub const StrIsIntlEqual = @compileError("'StrIsIntlEqual' requires that UNICODE be set to true or false in the root module");
        pub const StrNCat = @compileError("'StrNCat' requires that UNICODE be set to true or false in the root module");
        pub const StrPBrk = @compileError("'StrPBrk' requires that UNICODE be set to true or false in the root module");
        pub const StrRChr = @compileError("'StrRChr' requires that UNICODE be set to true or false in the root module");
        pub const StrRChrI = @compileError("'StrRChrI' requires that UNICODE be set to true or false in the root module");
        pub const StrRStrI = @compileError("'StrRStrI' requires that UNICODE be set to true or false in the root module");
        pub const StrSpn = @compileError("'StrSpn' requires that UNICODE be set to true or false in the root module");
        pub const StrStr = @compileError("'StrStr' requires that UNICODE be set to true or false in the root module");
        pub const StrStrI = @compileError("'StrStrI' requires that UNICODE be set to true or false in the root module");
        pub const StrToInt = @compileError("'StrToInt' requires that UNICODE be set to true or false in the root module");
        pub const StrToIntEx = @compileError("'StrToIntEx' requires that UNICODE be set to true or false in the root module");
        pub const StrToInt64Ex = @compileError("'StrToInt64Ex' requires that UNICODE be set to true or false in the root module");
        pub const StrTrim = @compileError("'StrTrim' requires that UNICODE be set to true or false in the root module");
        pub const StrCatBuff = @compileError("'StrCatBuff' requires that UNICODE be set to true or false in the root module");
        pub const ChrCmpI = @compileError("'ChrCmpI' requires that UNICODE be set to true or false in the root module");
        pub const wvnsprintf = @compileError("'wvnsprintf' requires that UNICODE be set to true or false in the root module");
        pub const wnsprintf = @compileError("'wnsprintf' requires that UNICODE be set to true or false in the root module");
        pub const StrRetToStr = @compileError("'StrRetToStr' requires that UNICODE be set to true or false in the root module");
        pub const StrRetToBuf = @compileError("'StrRetToBuf' requires that UNICODE be set to true or false in the root module");
        pub const SHStrDup = @compileError("'SHStrDup' requires that UNICODE be set to true or false in the root module");
        pub const IsCharSpace = @compileError("'IsCharSpace' requires that UNICODE be set to true or false in the root module");
        pub const StrCmpC = @compileError("'StrCmpC' requires that UNICODE be set to true or false in the root module");
        pub const StrCmpIC = @compileError("'StrCmpIC' requires that UNICODE be set to true or false in the root module");
        pub const StrCmpNC = @compileError("'StrCmpNC' requires that UNICODE be set to true or false in the root module");
        pub const StrCmpNIC = @compileError("'StrCmpNIC' requires that UNICODE be set to true or false in the root module");
        pub const IntlStrEqWorker = @compileError("'IntlStrEqWorker' requires that UNICODE be set to true or false in the root module");
        pub const PathAddBackslash = @compileError("'PathAddBackslash' requires that UNICODE be set to true or false in the root module");
        pub const PathAddExtension = @compileError("'PathAddExtension' requires that UNICODE be set to true or false in the root module");
        pub const PathAppend = @compileError("'PathAppend' requires that UNICODE be set to true or false in the root module");
        pub const PathBuildRoot = @compileError("'PathBuildRoot' requires that UNICODE be set to true or false in the root module");
        pub const PathCanonicalize = @compileError("'PathCanonicalize' requires that UNICODE be set to true or false in the root module");
        pub const PathCombine = @compileError("'PathCombine' requires that UNICODE be set to true or false in the root module");
        pub const PathCompactPath = @compileError("'PathCompactPath' requires that UNICODE be set to true or false in the root module");
        pub const PathCompactPathEx = @compileError("'PathCompactPathEx' requires that UNICODE be set to true or false in the root module");
        pub const PathCommonPrefix = @compileError("'PathCommonPrefix' requires that UNICODE be set to true or false in the root module");
        pub const PathFileExists = @compileError("'PathFileExists' requires that UNICODE be set to true or false in the root module");
        pub const PathFindExtension = @compileError("'PathFindExtension' requires that UNICODE be set to true or false in the root module");
        pub const PathFindFileName = @compileError("'PathFindFileName' requires that UNICODE be set to true or false in the root module");
        pub const PathFindNextComponent = @compileError("'PathFindNextComponent' requires that UNICODE be set to true or false in the root module");
        pub const PathFindOnPath = @compileError("'PathFindOnPath' requires that UNICODE be set to true or false in the root module");
        pub const PathFindSuffixArray = @compileError("'PathFindSuffixArray' requires that UNICODE be set to true or false in the root module");
        pub const PathGetArgs = @compileError("'PathGetArgs' requires that UNICODE be set to true or false in the root module");
        pub const PathIsLFNFileSpec = @compileError("'PathIsLFNFileSpec' requires that UNICODE be set to true or false in the root module");
        pub const PathGetCharType = @compileError("'PathGetCharType' requires that UNICODE be set to true or false in the root module");
        pub const PathGetDriveNumber = @compileError("'PathGetDriveNumber' requires that UNICODE be set to true or false in the root module");
        pub const PathIsDirectory = @compileError("'PathIsDirectory' requires that UNICODE be set to true or false in the root module");
        pub const PathIsDirectoryEmpty = @compileError("'PathIsDirectoryEmpty' requires that UNICODE be set to true or false in the root module");
        pub const PathIsFileSpec = @compileError("'PathIsFileSpec' requires that UNICODE be set to true or false in the root module");
        pub const PathIsPrefix = @compileError("'PathIsPrefix' requires that UNICODE be set to true or false in the root module");
        pub const PathIsRelative = @compileError("'PathIsRelative' requires that UNICODE be set to true or false in the root module");
        pub const PathIsRoot = @compileError("'PathIsRoot' requires that UNICODE be set to true or false in the root module");
        pub const PathIsSameRoot = @compileError("'PathIsSameRoot' requires that UNICODE be set to true or false in the root module");
        pub const PathIsUNC = @compileError("'PathIsUNC' requires that UNICODE be set to true or false in the root module");
        pub const PathIsNetworkPath = @compileError("'PathIsNetworkPath' requires that UNICODE be set to true or false in the root module");
        pub const PathIsUNCServer = @compileError("'PathIsUNCServer' requires that UNICODE be set to true or false in the root module");
        pub const PathIsUNCServerShare = @compileError("'PathIsUNCServerShare' requires that UNICODE be set to true or false in the root module");
        pub const PathIsContentType = @compileError("'PathIsContentType' requires that UNICODE be set to true or false in the root module");
        pub const PathIsURL = @compileError("'PathIsURL' requires that UNICODE be set to true or false in the root module");
        pub const PathMakePretty = @compileError("'PathMakePretty' requires that UNICODE be set to true or false in the root module");
        pub const PathMatchSpec = @compileError("'PathMatchSpec' requires that UNICODE be set to true or false in the root module");
        pub const PathMatchSpecEx = @compileError("'PathMatchSpecEx' requires that UNICODE be set to true or false in the root module");
        pub const PathParseIconLocation = @compileError("'PathParseIconLocation' requires that UNICODE be set to true or false in the root module");
        pub const PathQuoteSpaces = @compileError("'PathQuoteSpaces' requires that UNICODE be set to true or false in the root module");
        pub const PathRelativePathTo = @compileError("'PathRelativePathTo' requires that UNICODE be set to true or false in the root module");
        pub const PathRemoveArgs = @compileError("'PathRemoveArgs' requires that UNICODE be set to true or false in the root module");
        pub const PathRemoveBackslash = @compileError("'PathRemoveBackslash' requires that UNICODE be set to true or false in the root module");
        pub const PathRemoveBlanks = @compileError("'PathRemoveBlanks' requires that UNICODE be set to true or false in the root module");
        pub const PathRemoveExtension = @compileError("'PathRemoveExtension' requires that UNICODE be set to true or false in the root module");
        pub const PathRemoveFileSpec = @compileError("'PathRemoveFileSpec' requires that UNICODE be set to true or false in the root module");
        pub const PathRenameExtension = @compileError("'PathRenameExtension' requires that UNICODE be set to true or false in the root module");
        pub const PathSearchAndQualify = @compileError("'PathSearchAndQualify' requires that UNICODE be set to true or false in the root module");
        pub const PathSetDlgItemPath = @compileError("'PathSetDlgItemPath' requires that UNICODE be set to true or false in the root module");
        pub const PathSkipRoot = @compileError("'PathSkipRoot' requires that UNICODE be set to true or false in the root module");
        pub const PathStripPath = @compileError("'PathStripPath' requires that UNICODE be set to true or false in the root module");
        pub const PathStripToRoot = @compileError("'PathStripToRoot' requires that UNICODE be set to true or false in the root module");
        pub const PathUnquoteSpaces = @compileError("'PathUnquoteSpaces' requires that UNICODE be set to true or false in the root module");
        pub const PathMakeSystemFolder = @compileError("'PathMakeSystemFolder' requires that UNICODE be set to true or false in the root module");
        pub const PathUnmakeSystemFolder = @compileError("'PathUnmakeSystemFolder' requires that UNICODE be set to true or false in the root module");
        pub const PathIsSystemFolder = @compileError("'PathIsSystemFolder' requires that UNICODE be set to true or false in the root module");
        pub const PathUndecorate = @compileError("'PathUndecorate' requires that UNICODE be set to true or false in the root module");
        pub const PathUnExpandEnvStrings = @compileError("'PathUnExpandEnvStrings' requires that UNICODE be set to true or false in the root module");
        pub const UrlCompare = @compileError("'UrlCompare' requires that UNICODE be set to true or false in the root module");
        pub const UrlCombine = @compileError("'UrlCombine' requires that UNICODE be set to true or false in the root module");
        pub const UrlCanonicalize = @compileError("'UrlCanonicalize' requires that UNICODE be set to true or false in the root module");
        pub const UrlIsOpaque = @compileError("'UrlIsOpaque' requires that UNICODE be set to true or false in the root module");
        pub const UrlIsNoHistory = @compileError("'UrlIsNoHistory' requires that UNICODE be set to true or false in the root module");
        pub const UrlIs = @compileError("'UrlIs' requires that UNICODE be set to true or false in the root module");
        pub const UrlGetLocation = @compileError("'UrlGetLocation' requires that UNICODE be set to true or false in the root module");
        pub const UrlUnescape = @compileError("'UrlUnescape' requires that UNICODE be set to true or false in the root module");
        pub const UrlEscape = @compileError("'UrlEscape' requires that UNICODE be set to true or false in the root module");
        pub const UrlCreateFromPath = @compileError("'UrlCreateFromPath' requires that UNICODE be set to true or false in the root module");
        pub const PathCreateFromUrl = @compileError("'PathCreateFromUrl' requires that UNICODE be set to true or false in the root module");
        pub const UrlHash = @compileError("'UrlHash' requires that UNICODE be set to true or false in the root module");
        pub const UrlGetPart = @compileError("'UrlGetPart' requires that UNICODE be set to true or false in the root module");
        pub const UrlApplyScheme = @compileError("'UrlApplyScheme' requires that UNICODE be set to true or false in the root module");
        pub const ParseURL = @compileError("'ParseURL' requires that UNICODE be set to true or false in the root module");
        pub const SHDeleteEmptyKey = @compileError("'SHDeleteEmptyKey' requires that UNICODE be set to true or false in the root module");
        pub const SHDeleteKey = @compileError("'SHDeleteKey' requires that UNICODE be set to true or false in the root module");
        pub const SHDeleteValue = @compileError("'SHDeleteValue' requires that UNICODE be set to true or false in the root module");
        pub const SHGetValue = @compileError("'SHGetValue' requires that UNICODE be set to true or false in the root module");
        pub const SHSetValue = @compileError("'SHSetValue' requires that UNICODE be set to true or false in the root module");
        pub const SHRegGetValue = @compileError("'SHRegGetValue' requires that UNICODE be set to true or false in the root module");
        pub const SHQueryValueEx = @compileError("'SHQueryValueEx' requires that UNICODE be set to true or false in the root module");
        pub const SHEnumKeyEx = @compileError("'SHEnumKeyEx' requires that UNICODE be set to true or false in the root module");
        pub const SHEnumValue = @compileError("'SHEnumValue' requires that UNICODE be set to true or false in the root module");
        pub const SHQueryInfoKey = @compileError("'SHQueryInfoKey' requires that UNICODE be set to true or false in the root module");
        pub const SHCopyKey = @compileError("'SHCopyKey' requires that UNICODE be set to true or false in the root module");
        pub const SHRegGetPath = @compileError("'SHRegGetPath' requires that UNICODE be set to true or false in the root module");
        pub const SHRegSetPath = @compileError("'SHRegSetPath' requires that UNICODE be set to true or false in the root module");
        pub const SHRegCreateUSKey = @compileError("'SHRegCreateUSKey' requires that UNICODE be set to true or false in the root module");
        pub const SHRegOpenUSKey = @compileError("'SHRegOpenUSKey' requires that UNICODE be set to true or false in the root module");
        pub const SHRegQueryUSValue = @compileError("'SHRegQueryUSValue' requires that UNICODE be set to true or false in the root module");
        pub const SHRegWriteUSValue = @compileError("'SHRegWriteUSValue' requires that UNICODE be set to true or false in the root module");
        pub const SHRegDeleteUSValue = @compileError("'SHRegDeleteUSValue' requires that UNICODE be set to true or false in the root module");
        pub const SHRegDeleteEmptyUSKey = @compileError("'SHRegDeleteEmptyUSKey' requires that UNICODE be set to true or false in the root module");
        pub const SHRegEnumUSKey = @compileError("'SHRegEnumUSKey' requires that UNICODE be set to true or false in the root module");
        pub const SHRegEnumUSValue = @compileError("'SHRegEnumUSValue' requires that UNICODE be set to true or false in the root module");
        pub const SHRegQueryInfoUSKey = @compileError("'SHRegQueryInfoUSKey' requires that UNICODE be set to true or false in the root module");
        pub const SHRegGetUSValue = @compileError("'SHRegGetUSValue' requires that UNICODE be set to true or false in the root module");
        pub const SHRegSetUSValue = @compileError("'SHRegSetUSValue' requires that UNICODE be set to true or false in the root module");
        pub const SHRegGetBoolUSValue = @compileError("'SHRegGetBoolUSValue' requires that UNICODE be set to true or false in the root module");
        pub const AssocQueryString = @compileError("'AssocQueryString' requires that UNICODE be set to true or false in the root module");
        pub const AssocQueryStringByKey = @compileError("'AssocQueryStringByKey' requires that UNICODE be set to true or false in the root module");
        pub const AssocQueryKey = @compileError("'AssocQueryKey' requires that UNICODE be set to true or false in the root module");
        pub const SHOpenRegStream = @compileError("'SHOpenRegStream' requires that UNICODE be set to true or false in the root module");
        pub const SHOpenRegStream2 = @compileError("'SHOpenRegStream2' requires that UNICODE be set to true or false in the root module");
        pub const SHCreateStreamOnFile = @compileError("'SHCreateStreamOnFile' requires that UNICODE be set to true or false in the root module");
        pub const GetAcceptLanguages = @compileError("'GetAcceptLanguages' requires that UNICODE be set to true or false in the root module");
        pub const SHFormatDateTime = @compileError("'SHFormatDateTime' requires that UNICODE be set to true or false in the root module");
        pub const SHMessageBoxCheck = @compileError("'SHMessageBoxCheck' requires that UNICODE be set to true or false in the root module");
        pub const SHSendMessageBroadcast = @compileError("'SHSendMessageBroadcast' requires that UNICODE be set to true or false in the root module");
        pub const SHStripMneumonic = @compileError("'SHStripMneumonic' requires that UNICODE be set to true or false in the root module");
        pub const LoadUserProfile = @compileError("'LoadUserProfile' requires that UNICODE be set to true or false in the root module");
        pub const GetProfilesDirectory = @compileError("'GetProfilesDirectory' requires that UNICODE be set to true or false in the root module");
        pub const DeleteProfile = @compileError("'DeleteProfile' requires that UNICODE be set to true or false in the root module");
        pub const GetDefaultUserProfileDirectory = @compileError("'GetDefaultUserProfileDirectory' requires that UNICODE be set to true or false in the root module");
        pub const GetAllUsersProfileDirectory = @compileError("'GetAllUsersProfileDirectory' requires that UNICODE be set to true or false in the root module");
        pub const GetUserProfileDirectory = @compileError("'GetUserProfileDirectory' requires that UNICODE be set to true or false in the root module");
        pub const ExpandEnvironmentStringsForUser = @compileError("'ExpandEnvironmentStringsForUser' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (106)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const IDispatch = @import("automation.zig").IDispatch;
const LPFNADDPROPSHEETPAGE = @import("controls.zig").LPFNADDPROPSHEETPAGE;
const FILETIME = @import("windows_programming.zig").FILETIME;
const ULARGE_INTEGER = @import("system_services.zig").ULARGE_INTEGER;
const IOleCommandTarget = @import("com.zig").IOleCommandTarget;
const CREATESTRUCTW = @import("windows_and_messaging.zig").CREATESTRUCTW;
const IPropertyStoreFactory = @import("windows_properties_system.zig").IPropertyStoreFactory;
const DISPPARAMS = @import("automation.zig").DISPPARAMS;
const OVERLAPPED = @import("system_services.zig").OVERLAPPED;
const HACCEL = @import("menus_and_resources.zig").HACCEL;
const FORMATETC = @import("com.zig").FORMATETC;
const IDropSource = @import("com.zig").IDropSource;
const OleMenuGroupWidths = @import("com.zig").OleMenuGroupWidths;
const IBindStatusCallback = @import("com.zig").IBindStatusCallback;
const HKL = @import("text_services.zig").HKL;
const CANDIDATELIST = @import("intl.zig").CANDIDATELIST;
const IStream = @import("structured_storage.zig").IStream;
const IEnumPrivacyRecords = @import("debug.zig").IEnumPrivacyRecords;
const IBindCtx = @import("com.zig").IBindCtx;
const EXCEPINFO = @import("automation.zig").EXCEPINFO;
const IEnumFORMATETC = @import("com.zig").IEnumFORMATETC;
const LSTATUS = @import("system_services.zig").LSTATUS;
const PROPVARIANT = @import("structured_storage.zig").PROPVARIANT;
const PSTR = @import("system_services.zig").PSTR;
const RECT = @import("display_devices.zig").RECT;
const STYLEBUFA = @import("intl.zig").STYLEBUFA;
const IPropertySetStorage = @import("structured_storage.zig").IPropertySetStorage;
const SYSTEMTIME = @import("windows_programming.zig").SYSTEMTIME;
const GETPROPERTYSTOREFLAGS = @import("windows_properties_system.zig").GETPROPERTYSTOREFLAGS;
const HANDLE = @import("system_services.zig").HANDLE;
const HIMAGELIST = @import("controls.zig").HIMAGELIST;
const LPARAM = @import("windows_and_messaging.zig").LPARAM;
const MSG = @import("windows_and_messaging.zig").MSG;
const HDC = @import("gdi.zig").HDC;
const BYTE_BLOB = @import("com.zig").BYTE_BLOB;
const IEnumString = @import("com.zig").IEnumString;
const HRESULT = @import("com.zig").HRESULT;
const NMHDR = @import("controls.zig").NMHDR;
const BOOL = @import("system_services.zig").BOOL;
const BFFCALLBACK = @import("active_directory.zig").BFFCALLBACK;
const HPALETTE = @import("gdi.zig").HPALETTE;
const IMalloc = @import("com.zig").IMalloc;
const WIN32_FIND_DATAA = @import("file_system.zig").WIN32_FIND_DATAA;
const SERIALIZEDPROPSTORAGE = @import("windows_properties_system.zig").SERIALIZEDPROPSTORAGE;
const IUnknown = @import("com.zig").IUnknown;
const IDropTarget = @import("com.zig").IDropTarget;
const HBITMAP = @import("gdi.zig").HBITMAP;
const FILE_FLAGS_AND_ATTRIBUTES = @import("file_system.zig").FILE_FLAGS_AND_ATTRIBUTES;
const HWND = @import("windows_and_messaging.zig").HWND;
const WIN32_FIND_DATAW = @import("file_system.zig").WIN32_FIND_DATAW;
const VARIANT = @import("automation.zig").VARIANT;
const IDataObject = @import("com.zig").IDataObject;
const NETRESOURCEA = @import("security.zig").NETRESOURCEA;
const IMoniker = @import("com.zig").IMoniker;
const POINT = @import("display_devices.zig").POINT;
const RECTL = @import("display_devices.zig").RECTL;
const REGISTERWORDW = @import("intl.zig").REGISTERWORDW;
const NTSTATUS = @import("system_services.zig").NTSTATUS;
const COMPOSITIONFORM = @import("intl.zig").COMPOSITIONFORM;
const IServiceProvider = @import("system_services.zig").IServiceProvider;
const IXMLDOMDocument = @import("windows_programming.zig").IXMLDOMDocument;
const SID_AND_ATTRIBUTES = @import("security.zig").SID_AND_ATTRIBUTES;
const REGISTERWORDA = @import("intl.zig").REGISTERWORDA;
const IEnumUnknown = @import("com.zig").IEnumUnknown;
const WPARAM = @import("windows_and_messaging.zig").WPARAM;
const LRESULT = @import("system_services.zig").LRESULT;
const HMENU = @import("menus_and_resources.zig").HMENU;
const IOleWindow = @import("com.zig").IOleWindow;
const IPropertyStore = @import("audio.zig").IPropertyStore;
const STYLEBUFW = @import("intl.zig").STYLEBUFW;
const HMONITOR = @import("gdi.zig").HMONITOR;
const PWSTR = @import("system_services.zig").PWSTR;
const IOleInPlaceSite = @import("com.zig").IOleInPlaceSite;
const COORD = @import("system_services.zig").COORD;
const SECURITY_ATTRIBUTES = @import("system_services.zig").SECURITY_ATTRIBUTES;
const BSTR = @import("automation.zig").BSTR;
const IStorage = @import("structured_storage.zig").IStorage;
const LPTHREAD_START_ROUTINE = @import("system_services.zig").LPTHREAD_START_ROUTINE;
const IPropertyBag = @import("automation.zig").IPropertyBag;
const CANDIDATEFORM = @import("intl.zig").CANDIDATEFORM;
const NET_ADDRESS_INFO = @import("ip_helper.zig").NET_ADDRESS_INFO;
const HPROPSHEETPAGE = @import("controls.zig").HPROPSHEETPAGE;
const IPropertyChangeArray = @import("windows_properties_system.zig").IPropertyChangeArray;
const HIMCC__ = @import("intl.zig").HIMCC__;
const IOleObject = @import("com.zig").IOleObject;
const HKEY = @import("windows_programming.zig").HKEY;
const STARTUPINFOW = @import("system_services.zig").STARTUPINFOW;
const HINSTANCE = @import("system_services.zig").HINSTANCE;
const POINTL = @import("display_devices.zig").POINTL;
const HIMC__ = @import("intl.zig").HIMC__;
const IMEMENUITEMINFOW = @import("intl.zig").IMEMENUITEMINFOW;
const IEnumGUID = @import("com.zig").IEnumGUID;
const IPersist = @import("com.zig").IPersist;
const IConnectionPoint = @import("com.zig").IConnectionPoint;
const PROPERTYKEY = @import("windows_properties_system.zig").PROPERTYKEY;
const PDOPSTATUS = @import("windows_properties_system.zig").PDOPSTATUS;
const HICON = @import("menus_and_resources.zig").HICON;
const PROCESS_INFORMATION = @import("system_services.zig").PROCESS_INFORMATION;
const TBBUTTON = @import("controls.zig").TBBUTTON;
const IPropertyDescriptionList = @import("windows_properties_system.zig").IPropertyDescriptionList;
const ICondition = @import("search.zig").ICondition;
const LARGE_INTEGER = @import("system_services.zig").LARGE_INTEGER;
const IWebBrowser2 = @import("windows_programming.zig").IWebBrowser2;
const SIZE = @import("display_devices.zig").SIZE;
const IMEMENUITEMINFOA = @import("intl.zig").IMEMENUITEMINFOA;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = SUBCLASSPROC;
    _ = PFNCANSHAREFOLDERW;
    _ = PFNSHOWSHAREFOLDERUIW;
    _ = LPFNSVADDPROPSHEETPAGE;
    _ = LPFNDFMCALLBACK;
    _ = LPFNVIEWCALLBACK;
    _ = DLLGETVERSIONPROC;
    _ = APPLET_PROC;
    _ = PAPPSTATE_CHANGE_ROUTINE;
    _ = PAPPCONSTRAIN_CHANGE_ROUTINE;

    const constant_export_count = 49;
    const type_export_count = 831;
    const enum_value_export_count = 2001;
    const com_iface_id_export_count = 412;
    const com_class_id_export_count = 110;
    const func_export_count = 699;
    const unicode_alias_count = 209;
    const import_count = 106;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (3)
//--------------------------------------------------------------------------------
pub const c_DwmMaxQueuedBuffers : u32 = 8;
pub const c_DwmMaxMonitors : u32 = 16;
pub const c_DwmMaxAdapters : u32 = 16;

//--------------------------------------------------------------------------------
// Section: Types (13)
//--------------------------------------------------------------------------------
pub const DWM_BLURBEHIND = extern struct {
    dwFlags: u32,
    fEnable: BOOL,
    hRgnBlur: HRGN,
    fTransitionOnMaximized: BOOL,
};

pub const DWMWINDOWATTRIBUTE = extern enum(i32) {
    DWMWA_NCRENDERING_ENABLED = 1,
    DWMWA_NCRENDERING_POLICY = 2,
    DWMWA_TRANSITIONS_FORCEDISABLED = 3,
    DWMWA_ALLOW_NCPAINT = 4,
    DWMWA_CAPTION_BUTTON_BOUNDS = 5,
    DWMWA_NONCLIENT_RTL_LAYOUT = 6,
    DWMWA_FORCE_ICONIC_REPRESENTATION = 7,
    DWMWA_FLIP3D_POLICY = 8,
    DWMWA_EXTENDED_FRAME_BOUNDS = 9,
    DWMWA_HAS_ICONIC_BITMAP = 10,
    DWMWA_DISALLOW_PEEK = 11,
    DWMWA_EXCLUDED_FROM_PEEK = 12,
    DWMWA_CLOAK = 13,
    DWMWA_CLOAKED = 14,
    DWMWA_FREEZE_REPRESENTATION = 15,
    DWMWA_PASSIVE_UPDATE_MODE = 16,
    DWMWA_LAST = 17,
};
pub const DWMWA_NCRENDERING_ENABLED = DWMWINDOWATTRIBUTE.DWMWA_NCRENDERING_ENABLED;
pub const DWMWA_NCRENDERING_POLICY = DWMWINDOWATTRIBUTE.DWMWA_NCRENDERING_POLICY;
pub const DWMWA_TRANSITIONS_FORCEDISABLED = DWMWINDOWATTRIBUTE.DWMWA_TRANSITIONS_FORCEDISABLED;
pub const DWMWA_ALLOW_NCPAINT = DWMWINDOWATTRIBUTE.DWMWA_ALLOW_NCPAINT;
pub const DWMWA_CAPTION_BUTTON_BOUNDS = DWMWINDOWATTRIBUTE.DWMWA_CAPTION_BUTTON_BOUNDS;
pub const DWMWA_NONCLIENT_RTL_LAYOUT = DWMWINDOWATTRIBUTE.DWMWA_NONCLIENT_RTL_LAYOUT;
pub const DWMWA_FORCE_ICONIC_REPRESENTATION = DWMWINDOWATTRIBUTE.DWMWA_FORCE_ICONIC_REPRESENTATION;
pub const DWMWA_FLIP3D_POLICY = DWMWINDOWATTRIBUTE.DWMWA_FLIP3D_POLICY;
pub const DWMWA_EXTENDED_FRAME_BOUNDS = DWMWINDOWATTRIBUTE.DWMWA_EXTENDED_FRAME_BOUNDS;
pub const DWMWA_HAS_ICONIC_BITMAP = DWMWINDOWATTRIBUTE.DWMWA_HAS_ICONIC_BITMAP;
pub const DWMWA_DISALLOW_PEEK = DWMWINDOWATTRIBUTE.DWMWA_DISALLOW_PEEK;
pub const DWMWA_EXCLUDED_FROM_PEEK = DWMWINDOWATTRIBUTE.DWMWA_EXCLUDED_FROM_PEEK;
pub const DWMWA_CLOAK = DWMWINDOWATTRIBUTE.DWMWA_CLOAK;
pub const DWMWA_CLOAKED = DWMWINDOWATTRIBUTE.DWMWA_CLOAKED;
pub const DWMWA_FREEZE_REPRESENTATION = DWMWINDOWATTRIBUTE.DWMWA_FREEZE_REPRESENTATION;
pub const DWMWA_PASSIVE_UPDATE_MODE = DWMWINDOWATTRIBUTE.DWMWA_PASSIVE_UPDATE_MODE;
pub const DWMWA_LAST = DWMWINDOWATTRIBUTE.DWMWA_LAST;

pub const DWMNCRENDERINGPOLICY = extern enum(i32) {
    DWMNCRP_USEWINDOWSTYLE = 0,
    DWMNCRP_DISABLED = 1,
    DWMNCRP_ENABLED = 2,
    DWMNCRP_LAST = 3,
};
pub const DWMNCRP_USEWINDOWSTYLE = DWMNCRENDERINGPOLICY.DWMNCRP_USEWINDOWSTYLE;
pub const DWMNCRP_DISABLED = DWMNCRENDERINGPOLICY.DWMNCRP_DISABLED;
pub const DWMNCRP_ENABLED = DWMNCRENDERINGPOLICY.DWMNCRP_ENABLED;
pub const DWMNCRP_LAST = DWMNCRENDERINGPOLICY.DWMNCRP_LAST;

pub const DWMFLIP3DWINDOWPOLICY = extern enum(i32) {
    DWMFLIP3D_DEFAULT = 0,
    DWMFLIP3D_EXCLUDEBELOW = 1,
    DWMFLIP3D_EXCLUDEABOVE = 2,
    DWMFLIP3D_LAST = 3,
};
pub const DWMFLIP3D_DEFAULT = DWMFLIP3DWINDOWPOLICY.DWMFLIP3D_DEFAULT;
pub const DWMFLIP3D_EXCLUDEBELOW = DWMFLIP3DWINDOWPOLICY.DWMFLIP3D_EXCLUDEBELOW;
pub const DWMFLIP3D_EXCLUDEABOVE = DWMFLIP3DWINDOWPOLICY.DWMFLIP3D_EXCLUDEABOVE;
pub const DWMFLIP3D_LAST = DWMFLIP3DWINDOWPOLICY.DWMFLIP3D_LAST;

pub const DWM_THUMBNAIL_PROPERTIES = extern struct {
    dwFlags: u32,
    rcDestination: RECT,
    rcSource: RECT,
    opacity: u8,
    fVisible: BOOL,
    fSourceClientAreaOnly: BOOL,
};

pub const UNSIGNED_RATIO = extern struct {
    uiNumerator: u32,
    uiDenominator: u32,
};

pub const DWM_TIMING_INFO = extern struct {
    cbSize: u32,
    rateRefresh: UNSIGNED_RATIO,
    qpcRefreshPeriod: u64,
    rateCompose: UNSIGNED_RATIO,
    qpcVBlank: u64,
    cRefresh: u64,
    cDXRefresh: u32,
    qpcCompose: u64,
    cFrame: u64,
    cDXPresent: u32,
    cRefreshFrame: u64,
    cFrameSubmitted: u64,
    cDXPresentSubmitted: u32,
    cFrameConfirmed: u64,
    cDXPresentConfirmed: u32,
    cRefreshConfirmed: u64,
    cDXRefreshConfirmed: u32,
    cFramesLate: u64,
    cFramesOutstanding: u32,
    cFrameDisplayed: u64,
    qpcFrameDisplayed: u64,
    cRefreshFrameDisplayed: u64,
    cFrameComplete: u64,
    qpcFrameComplete: u64,
    cFramePending: u64,
    qpcFramePending: u64,
    cFramesDisplayed: u64,
    cFramesComplete: u64,
    cFramesPending: u64,
    cFramesAvailable: u64,
    cFramesDropped: u64,
    cFramesMissed: u64,
    cRefreshNextDisplayed: u64,
    cRefreshNextPresented: u64,
    cRefreshesDisplayed: u64,
    cRefreshesPresented: u64,
    cRefreshStarted: u64,
    cPixelsReceived: u64,
    cPixelsDrawn: u64,
    cBuffersEmpty: u64,
};

pub const DWM_SOURCE_FRAME_SAMPLING = extern enum(i32) {
    POINT = 0,
    COVERAGE = 1,
    LAST = 2,
};
pub const DWM_SOURCE_FRAME_SAMPLING_POINT = DWM_SOURCE_FRAME_SAMPLING.POINT;
pub const DWM_SOURCE_FRAME_SAMPLING_COVERAGE = DWM_SOURCE_FRAME_SAMPLING.COVERAGE;
pub const DWM_SOURCE_FRAME_SAMPLING_LAST = DWM_SOURCE_FRAME_SAMPLING.LAST;

pub const DWM_PRESENT_PARAMETERS = extern struct {
    cbSize: u32,
    fQueue: BOOL,
    cRefreshStart: u64,
    cBuffer: u32,
    fUseSourceRate: BOOL,
    rateSource: UNSIGNED_RATIO,
    cRefreshesPerFrame: u32,
    eSampling: DWM_SOURCE_FRAME_SAMPLING,
};

pub const DWMTRANSITION_OWNEDWINDOW_TARGET = extern enum(i32) {
    DWMTRANSITION_OWNEDWINDOW_NULL = -1,
    DWMTRANSITION_OWNEDWINDOW_REPOSITION = 0,
};
pub const DWMTRANSITION_OWNEDWINDOW_NULL = DWMTRANSITION_OWNEDWINDOW_TARGET.DWMTRANSITION_OWNEDWINDOW_NULL;
pub const DWMTRANSITION_OWNEDWINDOW_REPOSITION = DWMTRANSITION_OWNEDWINDOW_TARGET.DWMTRANSITION_OWNEDWINDOW_REPOSITION;

pub const GESTURE_TYPE = extern enum(i32) {
    GT_PEN_TAP = 0,
    GT_PEN_DOUBLETAP = 1,
    GT_PEN_RIGHTTAP = 2,
    GT_PEN_PRESSANDHOLD = 3,
    GT_PEN_PRESSANDHOLDABORT = 4,
    GT_TOUCH_TAP = 5,
    GT_TOUCH_DOUBLETAP = 6,
    GT_TOUCH_RIGHTTAP = 7,
    GT_TOUCH_PRESSANDHOLD = 8,
    GT_TOUCH_PRESSANDHOLDABORT = 9,
    GT_TOUCH_PRESSANDTAP = 10,
};
pub const GT_PEN_TAP = GESTURE_TYPE.GT_PEN_TAP;
pub const GT_PEN_DOUBLETAP = GESTURE_TYPE.GT_PEN_DOUBLETAP;
pub const GT_PEN_RIGHTTAP = GESTURE_TYPE.GT_PEN_RIGHTTAP;
pub const GT_PEN_PRESSANDHOLD = GESTURE_TYPE.GT_PEN_PRESSANDHOLD;
pub const GT_PEN_PRESSANDHOLDABORT = GESTURE_TYPE.GT_PEN_PRESSANDHOLDABORT;
pub const GT_TOUCH_TAP = GESTURE_TYPE.GT_TOUCH_TAP;
pub const GT_TOUCH_DOUBLETAP = GESTURE_TYPE.GT_TOUCH_DOUBLETAP;
pub const GT_TOUCH_RIGHTTAP = GESTURE_TYPE.GT_TOUCH_RIGHTTAP;
pub const GT_TOUCH_PRESSANDHOLD = GESTURE_TYPE.GT_TOUCH_PRESSANDHOLD;
pub const GT_TOUCH_PRESSANDHOLDABORT = GESTURE_TYPE.GT_TOUCH_PRESSANDHOLDABORT;
pub const GT_TOUCH_PRESSANDTAP = GESTURE_TYPE.GT_TOUCH_PRESSANDTAP;

pub const DWM_SHOWCONTACT = extern enum(i32) {
    DWMSC_DOWN = 1,
    DWMSC_UP = 2,
    DWMSC_DRAG = 4,
    DWMSC_HOLD = 8,
    DWMSC_PENBARREL = 16,
    DWMSC_NONE = 0,
    DWMSC_ALL = -1,
};
pub const DWMSC_DOWN = DWM_SHOWCONTACT.DWMSC_DOWN;
pub const DWMSC_UP = DWM_SHOWCONTACT.DWMSC_UP;
pub const DWMSC_DRAG = DWM_SHOWCONTACT.DWMSC_DRAG;
pub const DWMSC_HOLD = DWM_SHOWCONTACT.DWMSC_HOLD;
pub const DWMSC_PENBARREL = DWM_SHOWCONTACT.DWMSC_PENBARREL;
pub const DWMSC_NONE = DWM_SHOWCONTACT.DWMSC_NONE;
pub const DWMSC_ALL = DWM_SHOWCONTACT.DWMSC_ALL;

pub const DWM_TAB_WINDOW_REQUIREMENTS = extern enum(i32) {
    DWMTWR_NONE = 0,
    DWMTWR_IMPLEMENTED_BY_SYSTEM = 1,
    DWMTWR_WINDOW_RELATIONSHIP = 2,
    DWMTWR_WINDOW_STYLES = 4,
    DWMTWR_WINDOW_REGION = 8,
    DWMTWR_WINDOW_DWM_ATTRIBUTES = 16,
    DWMTWR_WINDOW_MARGINS = 32,
    DWMTWR_TABBING_ENABLED = 64,
    DWMTWR_USER_POLICY = 128,
    DWMTWR_GROUP_POLICY = 256,
    DWMTWR_APP_COMPAT = 512,
};
pub const DWMTWR_NONE = DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_NONE;
pub const DWMTWR_IMPLEMENTED_BY_SYSTEM = DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_IMPLEMENTED_BY_SYSTEM;
pub const DWMTWR_WINDOW_RELATIONSHIP = DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_WINDOW_RELATIONSHIP;
pub const DWMTWR_WINDOW_STYLES = DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_WINDOW_STYLES;
pub const DWMTWR_WINDOW_REGION = DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_WINDOW_REGION;
pub const DWMTWR_WINDOW_DWM_ATTRIBUTES = DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_WINDOW_DWM_ATTRIBUTES;
pub const DWMTWR_WINDOW_MARGINS = DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_WINDOW_MARGINS;
pub const DWMTWR_TABBING_ENABLED = DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_TABBING_ENABLED;
pub const DWMTWR_USER_POLICY = DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_USER_POLICY;
pub const DWMTWR_GROUP_POLICY = DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_GROUP_POLICY;
pub const DWMTWR_APP_COMPAT = DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_APP_COMPAT;


//--------------------------------------------------------------------------------
// Section: Functions (31)
//--------------------------------------------------------------------------------
pub extern "dwmapi" fn DwmDefWindowProc(
    hWnd: HWND,
    msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    plResult: *LRESULT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "dwmapi" fn DwmEnableBlurBehindWindow(
    hWnd: HWND,
    pBlurBehind: *const DWM_BLURBEHIND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmEnableComposition(
    uCompositionAction: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmEnableMMCSS(
    fEnableMMCSS: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmExtendFrameIntoClientArea(
    hWnd: HWND,
    pMarInset: *const MARGINS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmGetColorizationColor(
    pcrColorization: *u32,
    pfOpaqueBlend: *BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmGetCompositionTimingInfo(
    hwnd: HWND,
    pTimingInfo: *DWM_TIMING_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmGetWindowAttribute(
    hwnd: HWND,
    dwAttribute: u32,
    pvAttribute: [*]u8,
    cbAttribute: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmIsCompositionEnabled(
    pfEnabled: *BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmModifyPreviousDxFrameDuration(
    hwnd: HWND,
    cRefreshes: i32,
    fRelative: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmQueryThumbnailSourceSize(
    hThumbnail: ?*c_void,
    pSize: *SIZE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmRegisterThumbnail(
    hwndDestination: HWND,
    hwndSource: HWND,
    phThumbnailId: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmSetDxFrameDuration(
    hwnd: HWND,
    cRefreshes: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmSetPresentParameters(
    hwnd: HWND,
    pPresentParams: *DWM_PRESENT_PARAMETERS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmSetWindowAttribute(
    hwnd: HWND,
    dwAttribute: u32,
    pvAttribute: [*]const u8,
    cbAttribute: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmUnregisterThumbnail(
    hThumbnailId: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmUpdateThumbnailProperties(
    hThumbnailId: ?*c_void,
    ptnProperties: *const DWM_THUMBNAIL_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmSetIconicThumbnail(
    hwnd: HWND,
    hbmp: HBITMAP,
    dwSITFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmSetIconicLivePreviewBitmap(
    hwnd: HWND,
    hbmp: HBITMAP,
    pptClient: ?*POINT,
    dwSITFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmInvalidateIconicBitmaps(
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmAttachMilContent(
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmDetachMilContent(
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmFlush(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmGetGraphicsStreamTransformHint(
    uIndex: u32,
    pTransform: *MilMatrix3x2D,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmGetGraphicsStreamClient(
    uIndex: u32,
    pClientUuid: *Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmGetTransportAttributes(
    pfIsRemoting: *BOOL,
    pfIsConnected: *BOOL,
    pDwGeneration: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmTransitionOwnedWindow(
    hwnd: HWND,
    target: DWMTRANSITION_OWNEDWINDOW_TARGET,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmRenderGesture(
    gt: GESTURE_TYPE,
    cContacts: u32,
    pdwPointerID: [*]const u32,
    pPoints: [*]const POINT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmTetherContact(
    dwPointerID: u32,
    fEnable: BOOL,
    ptTether: POINT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmShowContact(
    dwPointerID: u32,
    eShowContact: DWM_SHOWCONTACT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dwmapi" fn DwmGetUnmetTabRequirements(
    appWindow: HWND,
    value: *DWM_TAB_WINDOW_REQUIREMENTS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (14)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const LPARAM = @import("windows_and_messaging.zig").LPARAM;
const HRGN = @import("gdi.zig").HRGN;
const HRESULT = @import("com.zig").HRESULT;
const RECT = @import("display_devices.zig").RECT;
const HBITMAP = @import("gdi.zig").HBITMAP;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const MilMatrix3x2D = @import("wpf_bitmap_effects.zig").MilMatrix3x2D;
const WPARAM = @import("windows_and_messaging.zig").WPARAM;
const LRESULT = @import("system_services.zig").LRESULT;
const MARGINS = @import("controls.zig").MARGINS;
const POINT = @import("display_devices.zig").POINT;
const SIZE = @import("display_devices.zig").SIZE;

test {
    const constant_export_count = 3;
    const type_export_count = 13;
    const enum_value_export_count = 59;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 31;
    const unicode_alias_count = 0;
    const import_count = 14;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (87)
//--------------------------------------------------------------------------------
pub const LPOFNHOOKPROC = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const OPENFILENAME_NT4A = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    lpstrFilter: [*:0]const u8,
    lpstrCustomFilter: PSTR,
    nMaxCustFilter: u32,
    nFilterIndex: u32,
    lpstrFile: PSTR,
    nMaxFile: u32,
    lpstrFileTitle: PSTR,
    nMaxFileTitle: u32,
    lpstrInitialDir: [*:0]const u8,
    lpstrTitle: [*:0]const u8,
    Flags: u32,
    nFileOffset: u16,
    nFileExtension: u16,
    lpstrDefExt: [*:0]const u8,
    lCustData: LPARAM,
    lpfnHook: LPOFNHOOKPROC,
    lpTemplateName: [*:0]const u8,
};

pub const OPENFILENAME_NT4W = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    lpstrFilter: [*:0]const u16,
    lpstrCustomFilter: PWSTR,
    nMaxCustFilter: u32,
    nFilterIndex: u32,
    lpstrFile: PWSTR,
    nMaxFile: u32,
    lpstrFileTitle: PWSTR,
    nMaxFileTitle: u32,
    lpstrInitialDir: [*:0]const u16,
    lpstrTitle: [*:0]const u16,
    Flags: u32,
    nFileOffset: u16,
    nFileExtension: u16,
    lpstrDefExt: [*:0]const u16,
    lCustData: LPARAM,
    lpfnHook: LPOFNHOOKPROC,
    lpTemplateName: [*:0]const u16,
};

pub const OPENFILENAMEA = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    lpstrFilter: [*:0]const u8,
    lpstrCustomFilter: PSTR,
    nMaxCustFilter: u32,
    nFilterIndex: u32,
    lpstrFile: PSTR,
    nMaxFile: u32,
    lpstrFileTitle: PSTR,
    nMaxFileTitle: u32,
    lpstrInitialDir: [*:0]const u8,
    lpstrTitle: [*:0]const u8,
    Flags: u32,
    nFileOffset: u16,
    nFileExtension: u16,
    lpstrDefExt: [*:0]const u8,
    lCustData: LPARAM,
    lpfnHook: LPOFNHOOKPROC,
    lpTemplateName: [*:0]const u8,
    pvReserved: *c_void,
    dwReserved: u32,
    FlagsEx: u32,
};

pub const OPENFILENAMEW = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    lpstrFilter: [*:0]const u16,
    lpstrCustomFilter: PWSTR,
    nMaxCustFilter: u32,
    nFilterIndex: u32,
    lpstrFile: PWSTR,
    nMaxFile: u32,
    lpstrFileTitle: PWSTR,
    nMaxFileTitle: u32,
    lpstrInitialDir: [*:0]const u16,
    lpstrTitle: [*:0]const u16,
    Flags: u32,
    nFileOffset: u16,
    nFileExtension: u16,
    lpstrDefExt: [*:0]const u16,
    lCustData: LPARAM,
    lpfnHook: LPOFNHOOKPROC,
    lpTemplateName: [*:0]const u16,
    pvReserved: *c_void,
    dwReserved: u32,
    FlagsEx: u32,
};

pub const LPCCHOOKPROC = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const OFNOTIFYA = extern struct {
    hdr: NMHDR,
    lpOFN: *OPENFILENAMEA,
    pszFile: PSTR,
};

pub const OFNOTIFYW = extern struct {
    hdr: NMHDR,
    lpOFN: *OPENFILENAMEW,
    pszFile: PWSTR,
};

pub const OFNOTIFYEXA = extern struct {
    hdr: NMHDR,
    lpOFN: *OPENFILENAMEA,
    psf: *c_void,
    pidl: *c_void,
};

pub const OFNOTIFYEXW = extern struct {
    hdr: NMHDR,
    lpOFN: *OPENFILENAMEW,
    psf: *c_void,
    pidl: *c_void,
};

pub const CHOOSECOLORA = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hInstance: HWND,
    rgbResult: u32,
    lpCustColors: *u32,
    Flags: u32,
    lCustData: LPARAM,
    lpfnHook: LPCCHOOKPROC,
    lpTemplateName: [*:0]const u8,
};

pub const CHOOSECOLORW = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hInstance: HWND,
    rgbResult: u32,
    lpCustColors: *u32,
    Flags: u32,
    lCustData: LPARAM,
    lpfnHook: LPCCHOOKPROC,
    lpTemplateName: [*:0]const u16,
};

pub const LPFRHOOKPROC = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const FINDREPLACEA = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    Flags: u32,
    lpstrFindWhat: PSTR,
    lpstrReplaceWith: PSTR,
    wFindWhatLen: u16,
    wReplaceWithLen: u16,
    lCustData: LPARAM,
    lpfnHook: LPFRHOOKPROC,
    lpTemplateName: [*:0]const u8,
};

pub const FINDREPLACEW = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    Flags: u32,
    lpstrFindWhat: PWSTR,
    lpstrReplaceWith: PWSTR,
    wFindWhatLen: u16,
    wReplaceWithLen: u16,
    lCustData: LPARAM,
    lpfnHook: LPFRHOOKPROC,
    lpTemplateName: [*:0]const u16,
};

pub const LPCFHOOKPROC = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const CHOOSEFONTA = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hDC: HDC,
    lpLogFont: *LOGFONTA,
    iPointSize: i32,
    Flags: u32,
    rgbColors: u32,
    lCustData: LPARAM,
    lpfnHook: LPCFHOOKPROC,
    lpTemplateName: [*:0]const u8,
    hInstance: HINSTANCE,
    lpszStyle: PSTR,
    nFontType: u16,
    ___MISSING_ALIGNMENT__: u16,
    nSizeMin: i32,
    nSizeMax: i32,
};

pub const CHOOSEFONTW = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hDC: HDC,
    lpLogFont: *LOGFONTW,
    iPointSize: i32,
    Flags: u32,
    rgbColors: u32,
    lCustData: LPARAM,
    lpfnHook: LPCFHOOKPROC,
    lpTemplateName: [*:0]const u16,
    hInstance: HINSTANCE,
    lpszStyle: PWSTR,
    nFontType: u16,
    ___MISSING_ALIGNMENT__: u16,
    nSizeMin: i32,
    nSizeMax: i32,
};

pub const LPPRINTHOOKPROC = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const LPSETUPHOOKPROC = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const PRINTDLGA = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hDevMode: ?*c_void,
    hDevNames: ?*c_void,
    hDC: HDC,
    Flags: u32,
    nFromPage: u16,
    nToPage: u16,
    nMinPage: u16,
    nMaxPage: u16,
    nCopies: u16,
    hInstance: HINSTANCE,
    lCustData: LPARAM,
    lpfnPrintHook: LPPRINTHOOKPROC,
    lpfnSetupHook: LPSETUPHOOKPROC,
    lpPrintTemplateName: [*:0]const u8,
    lpSetupTemplateName: [*:0]const u8,
    hPrintTemplate: ?*c_void,
    hSetupTemplate: ?*c_void,
};

pub const PRINTDLGW = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hDevMode: ?*c_void,
    hDevNames: ?*c_void,
    hDC: HDC,
    Flags: u32,
    nFromPage: u16,
    nToPage: u16,
    nMinPage: u16,
    nMaxPage: u16,
    nCopies: u16,
    hInstance: HINSTANCE,
    lCustData: LPARAM,
    lpfnPrintHook: LPPRINTHOOKPROC,
    lpfnSetupHook: LPSETUPHOOKPROC,
    lpPrintTemplateName: [*:0]const u16,
    lpSetupTemplateName: [*:0]const u16,
    hPrintTemplate: ?*c_void,
    hSetupTemplate: ?*c_void,
};

const IID_IPrintDialogCallback_Value = @import("../zig.zig").Guid.initString("5852a2c3-6530-11d1-b6a3-0000f8757bf9");
pub const IID_IPrintDialogCallback = &IID_IPrintDialogCallback_Value;
pub const IPrintDialogCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitDone: fn(
            self: *const IPrintDialogCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectionChange: fn(
            self: *const IPrintDialogCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleMessage: fn(
            self: *const IPrintDialogCallback,
            hDlg: HWND,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
            pResult: *LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintDialogCallback_InitDone(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintDialogCallback.VTable, self.vtable).InitDone(@ptrCast(*const IPrintDialogCallback, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintDialogCallback_SelectionChange(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintDialogCallback.VTable, self.vtable).SelectionChange(@ptrCast(*const IPrintDialogCallback, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintDialogCallback_HandleMessage(self: *const T, hDlg: HWND, uMsg: u32, wParam: WPARAM, lParam: LPARAM, pResult: *LRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintDialogCallback.VTable, self.vtable).HandleMessage(@ptrCast(*const IPrintDialogCallback, self), hDlg, uMsg, wParam, lParam, pResult);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintDialogServices_Value = @import("../zig.zig").Guid.initString("509aaeda-5639-11d1-b6a1-0000f8757bf9");
pub const IID_IPrintDialogServices = &IID_IPrintDialogServices_Value;
pub const IPrintDialogServices = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCurrentDevMode: fn(
            self: *const IPrintDialogServices,
            pDevMode: *DEVMODEA,
            pcbSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentPrinterName: fn(
            self: *const IPrintDialogServices,
            pPrinterName: ?[*:0]u16,
            pcchSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentPortName: fn(
            self: *const IPrintDialogServices,
            pPortName: ?[*:0]u16,
            pcchSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintDialogServices_GetCurrentDevMode(self: *const T, pDevMode: *DEVMODEA, pcbSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintDialogServices.VTable, self.vtable).GetCurrentDevMode(@ptrCast(*const IPrintDialogServices, self), pDevMode, pcbSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintDialogServices_GetCurrentPrinterName(self: *const T, pPrinterName: ?[*:0]u16, pcchSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintDialogServices.VTable, self.vtable).GetCurrentPrinterName(@ptrCast(*const IPrintDialogServices, self), pPrinterName, pcchSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintDialogServices_GetCurrentPortName(self: *const T, pPortName: ?[*:0]u16, pcchSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintDialogServices.VTable, self.vtable).GetCurrentPortName(@ptrCast(*const IPrintDialogServices, self), pPortName, pcchSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PRINTPAGERANGE = extern struct {
    nFromPage: u32,
    nToPage: u32,
};

pub const PRINTDLGEXA = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hDevMode: ?*c_void,
    hDevNames: ?*c_void,
    hDC: HDC,
    Flags: u32,
    Flags2: u32,
    ExclusionFlags: u32,
    nPageRanges: u32,
    nMaxPageRanges: u32,
    lpPageRanges: *PRINTPAGERANGE,
    nMinPage: u32,
    nMaxPage: u32,
    nCopies: u32,
    hInstance: HINSTANCE,
    lpPrintTemplateName: [*:0]const u8,
    lpCallback: *IUnknown,
    nPropertyPages: u32,
    lphPropertyPages: *HPROPSHEETPAGE,
    nStartPage: u32,
    dwResultAction: u32,
};

pub const PRINTDLGEXW = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hDevMode: ?*c_void,
    hDevNames: ?*c_void,
    hDC: HDC,
    Flags: u32,
    Flags2: u32,
    ExclusionFlags: u32,
    nPageRanges: u32,
    nMaxPageRanges: u32,
    lpPageRanges: *PRINTPAGERANGE,
    nMinPage: u32,
    nMaxPage: u32,
    nCopies: u32,
    hInstance: HINSTANCE,
    lpPrintTemplateName: [*:0]const u16,
    lpCallback: *IUnknown,
    nPropertyPages: u32,
    lphPropertyPages: *HPROPSHEETPAGE,
    nStartPage: u32,
    dwResultAction: u32,
};

pub const DEVNAMES = extern struct {
    wDriverOffset: u16,
    wDeviceOffset: u16,
    wOutputOffset: u16,
    wDefault: u16,
};

pub const LPPAGEPAINTHOOK = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const LPPAGESETUPHOOK = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const PAGESETUPDLGA = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hDevMode: ?*c_void,
    hDevNames: ?*c_void,
    Flags: u32,
    ptPaperSize: POINT,
    rtMinMargin: RECT,
    rtMargin: RECT,
    hInstance: HINSTANCE,
    lCustData: LPARAM,
    lpfnPageSetupHook: LPPAGESETUPHOOK,
    lpfnPagePaintHook: LPPAGEPAINTHOOK,
    lpPageSetupTemplateName: [*:0]const u8,
    hPageSetupTemplate: ?*c_void,
};

pub const PAGESETUPDLGW = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hDevMode: ?*c_void,
    hDevNames: ?*c_void,
    Flags: u32,
    ptPaperSize: POINT,
    rtMinMargin: RECT,
    rtMargin: RECT,
    hInstance: HINSTANCE,
    lCustData: LPARAM,
    lpfnPageSetupHook: LPPAGESETUPHOOK,
    lpfnPagePaintHook: LPPAGEPAINTHOOK,
    lpPageSetupTemplateName: [*:0]const u16,
    hPageSetupTemplate: ?*c_void,
};

// TODO: this type has a FreeFunc 'UnhookWindowsHookEx', what can Zig do with this information?
pub const HHOOK = ?*c_void;

pub const HWND = ?*c_void;

pub const LPARAM = ?*c_void;

pub const WPARAM = ?*c_void;

pub const DLGPROC = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const TIMERPROC = fn(
    param0: HWND,
    param1: u32,
    param2: ?*c_void,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const HOOKPROC = fn(
    code: i32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const SENDASYNCPROC = fn(
    param0: HWND,
    param1: u32,
    param2: ?*c_void,
    param3: LRESULT,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PROPENUMPROCA = fn(
    param0: HWND,
    param1: [*:0]const u8,
    param2: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PROPENUMPROCW = fn(
    param0: HWND,
    param1: [*:0]const u16,
    param2: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PROPENUMPROCEXA = fn(
    param0: HWND,
    param1: PSTR,
    param2: HANDLE,
    param3: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PROPENUMPROCEXW = fn(
    param0: HWND,
    param1: PWSTR,
    param2: HANDLE,
    param3: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CBT_CREATEWNDA = extern struct {
    lpcs: *CREATESTRUCTA,
    hwndInsertAfter: HWND,
};

pub const CBT_CREATEWNDW = extern struct {
    lpcs: *CREATESTRUCTW,
    hwndInsertAfter: HWND,
};

pub const CBTACTIVATESTRUCT = extern struct {
    fMouse: BOOL,
    hWndActive: HWND,
};

pub const EVENTMSG = extern struct {
    message: u32,
    paramL: u32,
    paramH: u32,
    time: u32,
    hwnd: HWND,
};

pub const CWPSTRUCT = extern struct {
    lParam: LPARAM,
    wParam: WPARAM,
    message: u32,
    hwnd: HWND,
};

pub const CWPRETSTRUCT = extern struct {
    lResult: LRESULT,
    lParam: LPARAM,
    wParam: WPARAM,
    message: u32,
    hwnd: HWND,
};

pub const KBDLLHOOKSTRUCT = extern struct {
    vkCode: u32,
    scanCode: u32,
    flags: u32,
    time: u32,
    dwExtraInfo: ?*c_void,
};

pub const MSLLHOOKSTRUCT = extern struct {
    pt: POINT,
    mouseData: u32,
    flags: u32,
    time: u32,
    dwExtraInfo: ?*c_void,
};

pub const DEBUGHOOKINFO = extern struct {
    idThread: u32,
    idThreadInstaller: u32,
    lParam: LPARAM,
    wParam: WPARAM,
    code: i32,
};

pub const MOUSEHOOKSTRUCT = extern struct {
    pt: POINT,
    hwnd: HWND,
    wHitTestCode: u32,
    dwExtraInfo: ?*c_void,
};

pub const MOUSEHOOKSTRUCTEX = extern struct {
    __AnonymousBase_winuser_L1173_C46: MOUSEHOOKSTRUCT,
    mouseData: u32,
};

pub const WNDCLASSEXA = extern struct {
    cbSize: u32,
    style: u32,
    lpfnWndProc: WNDPROC,
    cbClsExtra: i32,
    cbWndExtra: i32,
    hInstance: HINSTANCE,
    hIcon: HICON,
    hCursor: HCURSOR,
    hbrBackground: HBRUSH,
    lpszMenuName: [*:0]const u8,
    lpszClassName: [*:0]const u8,
    hIconSm: HICON,
};

pub const WNDCLASSEXW = extern struct {
    cbSize: u32,
    style: u32,
    lpfnWndProc: WNDPROC,
    cbClsExtra: i32,
    cbWndExtra: i32,
    hInstance: HINSTANCE,
    hIcon: HICON,
    hCursor: HCURSOR,
    hbrBackground: HBRUSH,
    lpszMenuName: [*:0]const u16,
    lpszClassName: [*:0]const u16,
    hIconSm: HICON,
};

pub const WNDCLASSA = extern struct {
    style: u32,
    lpfnWndProc: WNDPROC,
    cbClsExtra: i32,
    cbWndExtra: i32,
    hInstance: HINSTANCE,
    hIcon: HICON,
    hCursor: HCURSOR,
    hbrBackground: HBRUSH,
    lpszMenuName: [*:0]const u8,
    lpszClassName: [*:0]const u8,
};

pub const WNDCLASSW = extern struct {
    style: u32,
    lpfnWndProc: WNDPROC,
    cbClsExtra: i32,
    cbWndExtra: i32,
    hInstance: HINSTANCE,
    hIcon: HICON,
    hCursor: HCURSOR,
    hbrBackground: HBRUSH,
    lpszMenuName: [*:0]const u16,
    lpszClassName: [*:0]const u16,
};

pub const MSG = extern struct {
    hwnd: HWND,
    message: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    time: u32,
    pt: POINT,
};

pub const MINMAXINFO = extern struct {
    ptReserved: POINT,
    ptMaxSize: POINT,
    ptMaxPosition: POINT,
    ptMinTrackSize: POINT,
    ptMaxTrackSize: POINT,
};

pub const WINDOWPOS = extern struct {
    hwnd: HWND,
    hwndInsertAfter: HWND,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    flags: u32,
};

pub const NCCALCSIZE_PARAMS = extern struct {
    rgrc: [3]RECT,
    lppos: *WINDOWPOS,
};

pub const CREATESTRUCTA = extern struct {
    lpCreateParams: *c_void,
    hInstance: HINSTANCE,
    hMenu: HMENU,
    hwndParent: HWND,
    cy: i32,
    cx: i32,
    y: i32,
    x: i32,
    style: i32,
    lpszName: [*:0]const u8,
    lpszClass: [*:0]const u8,
    dwExStyle: u32,
};

pub const CREATESTRUCTW = extern struct {
    lpCreateParams: *c_void,
    hInstance: HINSTANCE,
    hMenu: HMENU,
    hwndParent: HWND,
    cy: i32,
    cx: i32,
    y: i32,
    x: i32,
    style: i32,
    lpszName: [*:0]const u16,
    lpszClass: [*:0]const u16,
    dwExStyle: u32,
};

pub const WINDOWPLACEMENT = extern struct {
    length: u32,
    flags: u32,
    showCmd: u32,
    ptMinPosition: POINT,
    ptMaxPosition: POINT,
    rcNormalPosition: RECT,
};

pub const STYLESTRUCT = extern struct {
    styleOld: u32,
    styleNew: u32,
};

pub const BSMINFO = extern struct {
    cbSize: u32,
    hdesk: HDESK,
    hwnd: HWND,
    luid: LUID,
};

pub const UPDATELAYEREDWINDOWINFO = extern struct {
    cbSize: u32,
    hdcDst: HDC,
    pptDst: *const POINT,
    psize: *const SIZE,
    hdcSrc: HDC,
    pptSrc: *const POINT,
    crKey: u32,
    pblend: *const BLENDFUNCTION,
    dwFlags: u32,
    prcDirty: *const RECT,
};

pub const DLGTEMPLATE = extern struct {
    style: u32,
    dwExtendedStyle: u32,
    cdit: u16,
    x: i16,
    y: i16,
    cx: i16,
    cy: i16,
};

pub const DLGITEMTEMPLATE = extern struct {
    style: u32,
    dwExtendedStyle: u32,
    x: i16,
    y: i16,
    cx: i16,
    cy: i16,
    id: u16,
};

pub const MSGBOXPARAMSA = extern struct {
    cbSize: u32,
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    lpszText: [*:0]const u8,
    lpszCaption: [*:0]const u8,
    dwStyle: u32,
    lpszIcon: [*:0]const u8,
    dwContextHelpId: ?*c_void,
    lpfnMsgBoxCallback: MSGBOXCALLBACK,
    dwLanguageId: u32,
};

pub const MSGBOXPARAMSW = extern struct {
    cbSize: u32,
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    lpszText: [*:0]const u16,
    lpszCaption: [*:0]const u16,
    dwStyle: u32,
    lpszIcon: [*:0]const u16,
    dwContextHelpId: ?*c_void,
    lpfnMsgBoxCallback: MSGBOXCALLBACK,
    dwLanguageId: u32,
};

pub const MDICREATESTRUCTA = extern struct {
    szClass: [*:0]const u8,
    szTitle: [*:0]const u8,
    hOwner: HANDLE,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    style: u32,
    lParam: LPARAM,
};

pub const MDICREATESTRUCTW = extern struct {
    szClass: [*:0]const u16,
    szTitle: [*:0]const u16,
    hOwner: HANDLE,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    style: u32,
    lParam: LPARAM,
};

pub const CLIENTCREATESTRUCT = extern struct {
    hWindowMenu: HANDLE,
    idFirstChild: u32,
};

pub const NONCLIENTMETRICSA = extern struct {
    cbSize: u32,
    iBorderWidth: i32,
    iScrollWidth: i32,
    iScrollHeight: i32,
    iCaptionWidth: i32,
    iCaptionHeight: i32,
    lfCaptionFont: LOGFONTA,
    iSmCaptionWidth: i32,
    iSmCaptionHeight: i32,
    lfSmCaptionFont: LOGFONTA,
    iMenuWidth: i32,
    iMenuHeight: i32,
    lfMenuFont: LOGFONTA,
    lfStatusFont: LOGFONTA,
    lfMessageFont: LOGFONTA,
    iPaddedBorderWidth: i32,
};

pub const NONCLIENTMETRICSW = extern struct {
    cbSize: u32,
    iBorderWidth: i32,
    iScrollWidth: i32,
    iScrollHeight: i32,
    iCaptionWidth: i32,
    iCaptionHeight: i32,
    lfCaptionFont: LOGFONTW,
    iSmCaptionWidth: i32,
    iSmCaptionHeight: i32,
    lfSmCaptionFont: LOGFONTW,
    iMenuWidth: i32,
    iMenuHeight: i32,
    lfMenuFont: LOGFONTW,
    lfStatusFont: LOGFONTW,
    lfMessageFont: LOGFONTW,
    iPaddedBorderWidth: i32,
};

pub const MINIMIZEDMETRICS = extern struct {
    cbSize: u32,
    iWidth: i32,
    iHorzGap: i32,
    iVertGap: i32,
    iArrange: i32,
};

pub const ANIMATIONINFO = extern struct {
    cbSize: u32,
    iMinAnimate: i32,
};

pub const AUDIODESCRIPTION = extern struct {
    cbSize: u32,
    Enabled: BOOL,
    Locale: u32,
};

pub const GUITHREADINFO = extern struct {
    cbSize: u32,
    flags: u32,
    hwndActive: HWND,
    hwndFocus: HWND,
    hwndCapture: HWND,
    hwndMenuOwner: HWND,
    hwndMoveSize: HWND,
    hwndCaret: HWND,
    rcCaret: RECT,
};

pub const WINDOWINFO = extern struct {
    cbSize: u32,
    rcWindow: RECT,
    rcClient: RECT,
    dwStyle: u32,
    dwExStyle: u32,
    dwWindowStatus: u32,
    cxWindowBorders: u32,
    cyWindowBorders: u32,
    atomWindowType: u16,
    wCreatorVersion: u16,
};

pub const TITLEBARINFO = extern struct {
    cbSize: u32,
    rcTitleBar: RECT,
    rgstate: [6]u32,
};

pub const TITLEBARINFOEX = extern struct {
    cbSize: u32,
    rcTitleBar: RECT,
    rgstate: [6]u32,
    rgrect: [6]RECT,
};

pub const ALTTABINFO = extern struct {
    cbSize: u32,
    cItems: i32,
    cColumns: i32,
    cRows: i32,
    iColFocus: i32,
    iRowFocus: i32,
    cxItem: i32,
    cyItem: i32,
    ptStart: POINT,
};

pub const CHANGEFILTERSTRUCT = extern struct {
    cbSize: u32,
    ExtStatus: u32,
};


//--------------------------------------------------------------------------------
// Section: Functions (236)
//--------------------------------------------------------------------------------
pub extern "COMDLG32" fn GetOpenFileNameA(
    param0: *OPENFILENAMEA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn GetOpenFileNameW(
    param0: *OPENFILENAMEW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn GetSaveFileNameA(
    param0: *OPENFILENAMEA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn GetSaveFileNameW(
    param0: *OPENFILENAMEW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn GetFileTitleA(
    param0: [*:0]const u8,
    Buf: [*:0]u8,
    cchSize: u16,
) callconv(@import("std").os.windows.WINAPI) i16;

pub extern "COMDLG32" fn GetFileTitleW(
    param0: [*:0]const u16,
    Buf: [*:0]u16,
    cchSize: u16,
) callconv(@import("std").os.windows.WINAPI) i16;

pub extern "COMDLG32" fn ChooseColorA(
    param0: *CHOOSECOLORA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn ChooseColorW(
    param0: *CHOOSECOLORW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn FindTextA(
    param0: *FINDREPLACEA,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "COMDLG32" fn FindTextW(
    param0: *FINDREPLACEW,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "COMDLG32" fn ReplaceTextA(
    param0: *FINDREPLACEA,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "COMDLG32" fn ReplaceTextW(
    param0: *FINDREPLACEW,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "COMDLG32" fn ChooseFontA(
    param0: *CHOOSEFONTA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn ChooseFontW(
    param0: *CHOOSEFONTW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn PrintDlgA(
    pPD: *PRINTDLGA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn PrintDlgW(
    pPD: *PRINTDLGW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn PrintDlgExA(
    pPD: *PRINTDLGEXA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "COMDLG32" fn PrintDlgExW(
    pPD: *PRINTDLGEXW,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "COMDLG32" fn CommDlgExtendedError(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "COMDLG32" fn PageSetupDlgA(
    param0: *PAGESETUPDLGA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn PageSetupDlgW(
    param0: *PAGESETUPDLGW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsHungAppWindow(
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn RegisterWindowMessageA(
    lpString: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn RegisterWindowMessageW(
    lpString: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetMessageA(
    lpMsg: *MSG,
    hWnd: HWND,
    wMsgFilterMin: u32,
    wMsgFilterMax: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMessageW(
    lpMsg: *MSG,
    hWnd: HWND,
    wMsgFilterMin: u32,
    wMsgFilterMax: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn TranslateMessage(
    lpMsg: *const MSG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DispatchMessageA(
    lpMsg: *const MSG,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn DispatchMessageW(
    lpMsg: *const MSG,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn PeekMessageA(
    lpMsg: *MSG,
    hWnd: HWND,
    wMsgFilterMin: u32,
    wMsgFilterMax: u32,
    wRemoveMsg: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn PeekMessageW(
    lpMsg: *MSG,
    hWnd: HWND,
    wMsgFilterMin: u32,
    wMsgFilterMax: u32,
    wRemoveMsg: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMessagePos(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetMessageTime(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetMessageExtraInfo(
) callconv(@import("std").os.windows.WINAPI) LPARAM;

pub extern "USER32" fn SetMessageExtraInfo(
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LPARAM;

pub extern "USER32" fn SendMessageA(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn SendMessageW(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn SendMessageTimeoutA(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    fuFlags: u32,
    uTimeout: u32,
    lpdwResult: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn SendMessageTimeoutW(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    fuFlags: u32,
    uTimeout: u32,
    lpdwResult: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn SendNotifyMessageA(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SendNotifyMessageW(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SendMessageCallbackA(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    lpResultCallBack: SENDASYNCPROC,
    dwData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SendMessageCallbackW(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    lpResultCallBack: SENDASYNCPROC,
    dwData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn BroadcastSystemMessageExA(
    flags: u32,
    lpInfo: ?*u32,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    pbsmInfo: ?*BSMINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn BroadcastSystemMessageExW(
    flags: u32,
    lpInfo: ?*u32,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    pbsmInfo: ?*BSMINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn BroadcastSystemMessageW(
    flags: u32,
    lpInfo: ?*u32,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn PostMessageA(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn PostMessageW(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn PostThreadMessageA(
    idThread: u32,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn PostThreadMessageW(
    idThread: u32,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ReplyMessage(
    lResult: LRESULT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn WaitMessage(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DefWindowProcA(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn DefWindowProcW(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn PostQuitMessage(
    nExitCode: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "USER32" fn CallWindowProcA(
    lpPrevWndFunc: WNDPROC,
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn CallWindowProcW(
    lpPrevWndFunc: WNDPROC,
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn InSendMessage(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn InSendMessageEx(
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn RegisterClassA(
    lpWndClass: *const WNDCLASSA,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn RegisterClassW(
    lpWndClass: *const WNDCLASSW,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn UnregisterClassA(
    lpClassName: [*:0]const u8,
    hInstance: HINSTANCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn UnregisterClassW(
    lpClassName: [*:0]const u16,
    hInstance: HINSTANCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetClassInfoA(
    hInstance: HINSTANCE,
    lpClassName: [*:0]const u8,
    lpWndClass: *WNDCLASSA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetClassInfoW(
    hInstance: HINSTANCE,
    lpClassName: [*:0]const u16,
    lpWndClass: *WNDCLASSW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn RegisterClassExA(
    param0: *const WNDCLASSEXA,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn RegisterClassExW(
    param0: *const WNDCLASSEXW,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn GetClassInfoExA(
    hInstance: HINSTANCE,
    lpszClass: [*:0]const u8,
    lpwcx: *WNDCLASSEXA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetClassInfoExW(
    hInstance: HINSTANCE,
    lpszClass: [*:0]const u16,
    lpwcx: *WNDCLASSEXW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CreateWindowExA(
    dwExStyle: u32,
    lpClassName: ?[*:0]const u8,
    lpWindowName: ?[*:0]const u8,
    dwStyle: u32,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
    hWndParent: HWND,
    hMenu: HMENU,
    hInstance: HINSTANCE,
    lpParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn CreateWindowExW(
    dwExStyle: u32,
    lpClassName: ?[*:0]const u16,
    lpWindowName: ?[*:0]const u16,
    dwStyle: u32,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
    hWndParent: HWND,
    hMenu: HMENU,
    hInstance: HINSTANCE,
    lpParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn IsWindow(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsChild(
    hWndParent: HWND,
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DestroyWindow(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ShowWindow(
    hWnd: HWND,
    nCmdShow: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn AnimateWindow(
    hWnd: HWND,
    dwTime: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn UpdateLayeredWindow(
    hWnd: HWND,
    hdcDst: HDC,
    pptDst: ?*POINT,
    psize: ?*SIZE,
    hdcSrc: HDC,
    pptSrc: ?*POINT,
    crKey: u32,
    pblend: ?*BLENDFUNCTION,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetLayeredWindowAttributes(
    hwnd: HWND,
    pcrKey: ?*u32,
    pbAlpha: ?*u8,
    pdwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetLayeredWindowAttributes(
    hwnd: HWND,
    crKey: u32,
    bAlpha: u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ShowWindowAsync(
    hWnd: HWND,
    nCmdShow: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ShowOwnedPopups(
    hWnd: HWND,
    fShow: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn OpenIcon(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CloseWindow(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn MoveWindow(
    hWnd: HWND,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
    bRepaint: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetWindowPos(
    hWnd: HWND,
    hWndInsertAfter: HWND,
    X: i32,
    Y: i32,
    cx: i32,
    cy: i32,
    uFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetWindowPlacement(
    hWnd: HWND,
    lpwndpl: *WINDOWPLACEMENT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetWindowPlacement(
    hWnd: HWND,
    lpwndpl: *const WINDOWPLACEMENT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetWindowDisplayAffinity(
    hWnd: HWND,
    pdwAffinity: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetWindowDisplayAffinity(
    hWnd: HWND,
    dwAffinity: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn BeginDeferWindowPos(
    nNumWindows: i32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn DeferWindowPos(
    hWinPosInfo: ?*c_void,
    hWnd: HWND,
    hWndInsertAfter: HWND,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    uFlags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn EndDeferWindowPos(
    hWinPosInfo: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsWindowVisible(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsIconic(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn AnyPopup(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn BringWindowToTop(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsZoomed(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CreateDialogParamA(
    hInstance: HINSTANCE,
    lpTemplateName: [*:0]const u8,
    hWndParent: HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn CreateDialogParamW(
    hInstance: HINSTANCE,
    lpTemplateName: [*:0]const u16,
    hWndParent: HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn CreateDialogIndirectParamA(
    hInstance: HINSTANCE,
    lpTemplate: *DLGTEMPLATE,
    hWndParent: HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn CreateDialogIndirectParamW(
    hInstance: HINSTANCE,
    lpTemplate: *DLGTEMPLATE,
    hWndParent: HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn DialogBoxParamA(
    hInstance: HINSTANCE,
    lpTemplateName: [*:0]const u8,
    hWndParent: HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn DialogBoxParamW(
    hInstance: HINSTANCE,
    lpTemplateName: [*:0]const u16,
    hWndParent: HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn DialogBoxIndirectParamA(
    hInstance: HINSTANCE,
    hDialogTemplate: *DLGTEMPLATE,
    hWndParent: HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn DialogBoxIndirectParamW(
    hInstance: HINSTANCE,
    hDialogTemplate: *DLGTEMPLATE,
    hWndParent: HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn EndDialog(
    hDlg: HWND,
    nResult: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetDlgItem(
    hDlg: HWND,
    nIDDlgItem: i32,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn SetDlgItemInt(
    hDlg: HWND,
    nIDDlgItem: i32,
    uValue: u32,
    bSigned: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetDlgItemInt(
    hDlg: HWND,
    nIDDlgItem: i32,
    lpTranslated: ?*BOOL,
    bSigned: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn SetDlgItemTextA(
    hDlg: HWND,
    nIDDlgItem: i32,
    lpString: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetDlgItemTextW(
    hDlg: HWND,
    nIDDlgItem: i32,
    lpString: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetDlgItemTextA(
    hDlg: HWND,
    nIDDlgItem: i32,
    lpString: [*:0]u8,
    cchMax: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetDlgItemTextW(
    hDlg: HWND,
    nIDDlgItem: i32,
    lpString: [*:0]u16,
    cchMax: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn SendDlgItemMessageA(
    hDlg: HWND,
    nIDDlgItem: i32,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn SendDlgItemMessageW(
    hDlg: HWND,
    nIDDlgItem: i32,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn GetNextDlgGroupItem(
    hDlg: HWND,
    hCtl: HWND,
    bPrevious: BOOL,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetNextDlgTabItem(
    hDlg: HWND,
    hCtl: HWND,
    bPrevious: BOOL,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetDlgCtrlID(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetDialogBaseUnits(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn DefDlgProcW(
    hDlg: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn CallMsgFilterA(
    lpMsg: *MSG,
    nCode: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CallMsgFilterW(
    lpMsg: *MSG,
    nCode: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetInputState(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetQueueStatus(
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn SetTimer(
    hWnd: HWND,
    nIDEvent: ?*c_void,
    uElapse: u32,
    lpTimerFunc: ?TIMERPROC,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn SetCoalescableTimer(
    hWnd: HWND,
    nIDEvent: ?*c_void,
    uElapse: u32,
    lpTimerFunc: ?TIMERPROC,
    uToleranceDelay: u32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn KillTimer(
    hWnd: HWND,
    uIDEvent: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsWindowUnicode(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetSystemMetrics(
    nIndex: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn CalculatePopupWindowPosition(
    anchorPoint: *const POINT,
    windowSize: *const SIZE,
    flags: u32,
    excludeRect: ?*RECT,
    popupWindowPosition: *RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetForegroundWindow(
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn SwitchToThisWindow(
    hwnd: HWND,
    fUnknown: BOOL,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "USER32" fn SetForegroundWindow(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn AllowSetForegroundWindow(
    dwProcessId: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn LockSetForegroundWindow(
    uLockCode: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetPropA(
    hWnd: HWND,
    lpString: [*:0]const u8,
    hData: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetPropW(
    hWnd: HWND,
    lpString: [*:0]const u16,
    hData: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetPropA(
    hWnd: HWND,
    lpString: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "USER32" fn GetPropW(
    hWnd: HWND,
    lpString: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "USER32" fn RemovePropA(
    hWnd: HWND,
    lpString: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "USER32" fn RemovePropW(
    hWnd: HWND,
    lpString: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "USER32" fn EnumPropsExA(
    hWnd: HWND,
    lpEnumFunc: PROPENUMPROCEXA,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn EnumPropsExW(
    hWnd: HWND,
    lpEnumFunc: PROPENUMPROCEXW,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn EnumPropsA(
    hWnd: HWND,
    lpEnumFunc: PROPENUMPROCA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn EnumPropsW(
    hWnd: HWND,
    lpEnumFunc: PROPENUMPROCW,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn SetWindowTextA(
    hWnd: HWND,
    lpString: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetWindowTextW(
    hWnd: HWND,
    lpString: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetWindowTextA(
    hWnd: HWND,
    lpString: [*:0]u8,
    nMaxCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetWindowTextW(
    hWnd: HWND,
    lpString: [*:0]u16,
    nMaxCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetWindowTextLengthA(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetWindowTextLengthW(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetClientRect(
    hWnd: HWND,
    lpRect: *RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetWindowRect(
    hWnd: HWND,
    lpRect: *RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn AdjustWindowRect(
    lpRect: *RECT,
    dwStyle: u32,
    bMenu: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn AdjustWindowRectEx(
    lpRect: *RECT,
    dwStyle: u32,
    bMenu: BOOL,
    dwExStyle: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn MessageBoxA(
    hWnd: HWND,
    lpText: ?[*:0]const u8,
    lpCaption: ?[*:0]const u8,
    uType: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn MessageBoxW(
    hWnd: HWND,
    lpText: ?[*:0]const u16,
    lpCaption: ?[*:0]const u16,
    uType: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn MessageBoxExA(
    hWnd: HWND,
    lpText: ?[*:0]const u8,
    lpCaption: ?[*:0]const u8,
    uType: u32,
    wLanguageId: u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn MessageBoxExW(
    hWnd: HWND,
    lpText: ?[*:0]const u16,
    lpCaption: ?[*:0]const u16,
    uType: u32,
    wLanguageId: u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn MessageBoxIndirectA(
    lpmbp: *const MSGBOXPARAMSA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn MessageBoxIndirectW(
    lpmbp: *const MSGBOXPARAMSW,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn LogicalToPhysicalPoint(
    hWnd: HWND,
    lpPoint: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn PhysicalToLogicalPoint(
    hWnd: HWND,
    lpPoint: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn WindowFromPoint(
    Point: POINT,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn WindowFromPhysicalPoint(
    Point: POINT,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn ChildWindowFromPoint(
    hWndParent: HWND,
    Point: POINT,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn ChildWindowFromPointEx(
    hwnd: HWND,
    pt: POINT,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetSysColor(
    nIndex: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn SetSysColors(
    cElements: i32,
    lpaElements: [*]const i32,
    lpaRgbValues: [*]const u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetWindowLongA(
    hWnd: HWND,
    nIndex: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetWindowLongW(
    hWnd: HWND,
    nIndex: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn SetWindowLongA(
    hWnd: HWND,
    nIndex: i32,
    dwNewLong: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn SetWindowLongW(
    hWnd: HWND,
    nIndex: i32,
    dwNewLong: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetClassWord(
    hWnd: HWND,
    nIndex: i32,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn SetClassWord(
    hWnd: HWND,
    nIndex: i32,
    wNewWord: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn GetClassLongA(
    hWnd: HWND,
    nIndex: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetClassLongW(
    hWnd: HWND,
    nIndex: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn SetClassLongA(
    hWnd: HWND,
    nIndex: i32,
    dwNewLong: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn SetClassLongW(
    hWnd: HWND,
    nIndex: i32,
    dwNewLong: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetProcessDefaultLayout(
    pdwDefaultLayout: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetProcessDefaultLayout(
    dwDefaultLayout: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetDesktopWindow(
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetParent(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn SetParent(
    hWndChild: HWND,
    hWndNewParent: HWND,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn EnumChildWindows(
    hWndParent: HWND,
    lpEnumFunc: WNDENUMPROC,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn FindWindowA(
    lpClassName: ?[*:0]const u8,
    lpWindowName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn FindWindowW(
    lpClassName: ?[*:0]const u16,
    lpWindowName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn FindWindowExA(
    hWndParent: HWND,
    hWndChildAfter: HWND,
    lpszClass: ?[*:0]const u8,
    lpszWindow: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn FindWindowExW(
    hWndParent: HWND,
    hWndChildAfter: HWND,
    lpszClass: ?[*:0]const u16,
    lpszWindow: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetShellWindow(
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn RegisterShellHookWindow(
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DeregisterShellHookWindow(
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn EnumWindows(
    lpEnumFunc: WNDENUMPROC,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn EnumThreadWindows(
    dwThreadId: u32,
    lpfn: WNDENUMPROC,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetClassNameA(
    hWnd: HWND,
    lpClassName: [*:0]u8,
    nMaxCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetClassNameW(
    hWnd: HWND,
    lpClassName: [*:0]u16,
    nMaxCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetTopWindow(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetWindowThreadProcessId(
    hWnd: HWND,
    lpdwProcessId: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn IsGUIThread(
    bConvert: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetLastActivePopup(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetWindow(
    hWnd: HWND,
    uCmd: u32,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn SetWindowsHookExA(
    idHook: i32,
    lpfn: HOOKPROC,
    hmod: HINSTANCE,
    dwThreadId: u32,
) callconv(@import("std").os.windows.WINAPI) HHOOK;

pub extern "USER32" fn SetWindowsHookExW(
    idHook: i32,
    lpfn: HOOKPROC,
    hmod: HINSTANCE,
    dwThreadId: u32,
) callconv(@import("std").os.windows.WINAPI) HHOOK;

pub extern "USER32" fn UnhookWindowsHookEx(
    hhk: HHOOK,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CallNextHookEx(
    hhk: HHOOK,
    nCode: i32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn IsDialogMessageA(
    hDlg: HWND,
    lpMsg: *MSG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsDialogMessageW(
    hDlg: HWND,
    lpMsg: *MSG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn MapDialogRect(
    hDlg: HWND,
    lpRect: *RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DefFrameProcA(
    hWnd: HWND,
    hWndMDIClient: HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn DefFrameProcW(
    hWnd: HWND,
    hWndMDIClient: HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn DefMDIChildProcA(
    hWnd: HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn DefMDIChildProcW(
    hWnd: HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn TranslateMDISysAccel(
    hWndClient: HWND,
    lpMsg: *MSG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ArrangeIconicWindows(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn CreateMDIWindowA(
    lpClassName: [*:0]const u8,
    lpWindowName: [*:0]const u8,
    dwStyle: u32,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
    hWndParent: HWND,
    hInstance: HINSTANCE,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn CreateMDIWindowW(
    lpClassName: [*:0]const u16,
    lpWindowName: [*:0]const u16,
    dwStyle: u32,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
    hWndParent: HWND,
    hInstance: HINSTANCE,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn TileWindows(
    hwndParent: HWND,
    wHow: u32,
    lpRect: ?*const RECT,
    cKids: u32,
    lpKids: ?[*]const HWND,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn CascadeWindows(
    hwndParent: HWND,
    wHow: u32,
    lpRect: ?*const RECT,
    cKids: u32,
    lpKids: ?[*]const HWND,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn SystemParametersInfoA(
    uiAction: u32,
    uiParam: u32,
    pvParam: ?*c_void,
    fWinIni: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SystemParametersInfoW(
    uiAction: u32,
    uiParam: u32,
    pvParam: ?*c_void,
    fWinIni: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SoundSentry(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn InternalGetWindowText(
    hWnd: HWND,
    pString: [*:0]u16,
    cchMaxCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetGUIThreadInfo(
    idThread: u32,
    pgui: *GUITHREADINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetProcessDPIAware(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsProcessDPIAware(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetWindowModuleFileNameA(
    hwnd: HWND,
    pszFileName: [*:0]u8,
    cchFileNameMax: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetWindowModuleFileNameW(
    hwnd: HWND,
    pszFileName: [*:0]u16,
    cchFileNameMax: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetWindowInfo(
    hwnd: HWND,
    pwi: *WINDOWINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetTitleBarInfo(
    hwnd: HWND,
    pti: *TITLEBARINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetAncestor(
    hwnd: HWND,
    gaFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn RealChildWindowFromPoint(
    hwndParent: HWND,
    ptParentClientCoords: POINT,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn RealGetWindowClassW(
    hwnd: HWND,
    ptszClassName: [*:0]u16,
    cchClassNameMax: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetAltTabInfoA(
    hwnd: HWND,
    iItem: i32,
    pati: *ALTTABINFO,
    pszItemText: ?[*:0]u8,
    cchItemText: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetAltTabInfoW(
    hwnd: HWND,
    iItem: i32,
    pati: *ALTTABINFO,
    pszItemText: ?[*:0]u16,
    cchItemText: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ChangeWindowMessageFilter(
    message: u32,
    dwFlag: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ChangeWindowMessageFilterEx(
    hwnd: HWND,
    message: u32,
    action: u32,
    pChangeFilterStruct: ?*CHANGEFILTERSTRUCT,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (82)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const OPENFILENAME_NT4 = OPENFILENAME_NT4A;
        pub const OPENFILENAME = OPENFILENAMEA;
        pub const OFNOTIFY = OFNOTIFYA;
        pub const OFNOTIFYEX = OFNOTIFYEXA;
        pub const CHOOSECOLOR = CHOOSECOLORA;
        pub const FINDREPLACE = FINDREPLACEA;
        pub const CHOOSEFONT = CHOOSEFONTA;
        pub const PRINTDLG = PRINTDLGA;
        pub const PRINTDLGEX = PRINTDLGEXA;
        pub const PAGESETUPDLG = PAGESETUPDLGA;
        pub const PROPENUMPROC = PROPENUMPROCA;
        pub const PROPENUMPROCEX = PROPENUMPROCEXA;
        pub const CBT_CREATEWND = CBT_CREATEWNDA;
        pub const WNDCLASSEX = WNDCLASSEXA;
        pub const WNDCLASS = WNDCLASSA;
        pub const CREATESTRUCT = CREATESTRUCTA;
        pub const MSGBOXPARAMS = MSGBOXPARAMSA;
        pub const MDICREATESTRUCT = MDICREATESTRUCTA;
        pub const NONCLIENTMETRICS = NONCLIENTMETRICSA;
        pub const GetOpenFileName = GetOpenFileNameA;
        pub const GetSaveFileName = GetSaveFileNameA;
        pub const GetFileTitle = GetFileTitleA;
        pub const ChooseColor = ChooseColorA;
        pub const FindText = FindTextA;
        pub const ReplaceText = ReplaceTextA;
        pub const ChooseFont = ChooseFontA;
        pub const PrintDlg = PrintDlgA;
        pub const PrintDlgEx = PrintDlgExA;
        pub const PageSetupDlg = PageSetupDlgA;
        pub const RegisterWindowMessage = RegisterWindowMessageA;
        pub const GetMessage = GetMessageA;
        pub const DispatchMessage = DispatchMessageA;
        pub const PeekMessage = PeekMessageA;
        pub const SendMessage = SendMessageA;
        pub const SendMessageTimeout = SendMessageTimeoutA;
        pub const SendNotifyMessage = SendNotifyMessageA;
        pub const SendMessageCallback = SendMessageCallbackA;
        pub const BroadcastSystemMessageEx = BroadcastSystemMessageExA;
        pub const PostMessage = PostMessageA;
        pub const PostThreadMessage = PostThreadMessageA;
        pub const DefWindowProc = DefWindowProcA;
        pub const CallWindowProc = CallWindowProcA;
        pub const RegisterClass = RegisterClassA;
        pub const UnregisterClass = UnregisterClassA;
        pub const GetClassInfo = GetClassInfoA;
        pub const RegisterClassEx = RegisterClassExA;
        pub const GetClassInfoEx = GetClassInfoExA;
        pub const CreateWindowEx = CreateWindowExA;
        pub const CreateDialogParam = CreateDialogParamA;
        pub const CreateDialogIndirectParam = CreateDialogIndirectParamA;
        pub const DialogBoxParam = DialogBoxParamA;
        pub const DialogBoxIndirectParam = DialogBoxIndirectParamA;
        pub const SetDlgItemText = SetDlgItemTextA;
        pub const GetDlgItemText = GetDlgItemTextA;
        pub const SendDlgItemMessage = SendDlgItemMessageA;
        pub const CallMsgFilter = CallMsgFilterA;
        pub const SetProp = SetPropA;
        pub const GetProp = GetPropA;
        pub const RemoveProp = RemovePropA;
        pub const EnumPropsEx = EnumPropsExA;
        pub const EnumProps = EnumPropsA;
        pub const SetWindowText = SetWindowTextA;
        pub const GetWindowText = GetWindowTextA;
        pub const GetWindowTextLength = GetWindowTextLengthA;
        pub const MessageBox = MessageBoxA;
        pub const MessageBoxEx = MessageBoxExA;
        pub const MessageBoxIndirect = MessageBoxIndirectA;
        pub const GetWindowLong = GetWindowLongA;
        pub const SetWindowLong = SetWindowLongA;
        pub const GetClassLong = GetClassLongA;
        pub const SetClassLong = SetClassLongA;
        pub const FindWindow = FindWindowA;
        pub const FindWindowEx = FindWindowExA;
        pub const GetClassName = GetClassNameA;
        pub const SetWindowsHookEx = SetWindowsHookExA;
        pub const IsDialogMessage = IsDialogMessageA;
        pub const DefFrameProc = DefFrameProcA;
        pub const DefMDIChildProc = DefMDIChildProcA;
        pub const CreateMDIWindow = CreateMDIWindowA;
        pub const SystemParametersInfo = SystemParametersInfoA;
        pub const GetWindowModuleFileName = GetWindowModuleFileNameA;
        pub const GetAltTabInfo = GetAltTabInfoA;
    },
    .wide => struct {
        pub const OPENFILENAME_NT4 = OPENFILENAME_NT4W;
        pub const OPENFILENAME = OPENFILENAMEW;
        pub const OFNOTIFY = OFNOTIFYW;
        pub const OFNOTIFYEX = OFNOTIFYEXW;
        pub const CHOOSECOLOR = CHOOSECOLORW;
        pub const FINDREPLACE = FINDREPLACEW;
        pub const CHOOSEFONT = CHOOSEFONTW;
        pub const PRINTDLG = PRINTDLGW;
        pub const PRINTDLGEX = PRINTDLGEXW;
        pub const PAGESETUPDLG = PAGESETUPDLGW;
        pub const PROPENUMPROC = PROPENUMPROCW;
        pub const PROPENUMPROCEX = PROPENUMPROCEXW;
        pub const CBT_CREATEWND = CBT_CREATEWNDW;
        pub const WNDCLASSEX = WNDCLASSEXW;
        pub const WNDCLASS = WNDCLASSW;
        pub const CREATESTRUCT = CREATESTRUCTW;
        pub const MSGBOXPARAMS = MSGBOXPARAMSW;
        pub const MDICREATESTRUCT = MDICREATESTRUCTW;
        pub const NONCLIENTMETRICS = NONCLIENTMETRICSW;
        pub const GetOpenFileName = GetOpenFileNameW;
        pub const GetSaveFileName = GetSaveFileNameW;
        pub const GetFileTitle = GetFileTitleW;
        pub const ChooseColor = ChooseColorW;
        pub const FindText = FindTextW;
        pub const ReplaceText = ReplaceTextW;
        pub const ChooseFont = ChooseFontW;
        pub const PrintDlg = PrintDlgW;
        pub const PrintDlgEx = PrintDlgExW;
        pub const PageSetupDlg = PageSetupDlgW;
        pub const RegisterWindowMessage = RegisterWindowMessageW;
        pub const GetMessage = GetMessageW;
        pub const DispatchMessage = DispatchMessageW;
        pub const PeekMessage = PeekMessageW;
        pub const SendMessage = SendMessageW;
        pub const SendMessageTimeout = SendMessageTimeoutW;
        pub const SendNotifyMessage = SendNotifyMessageW;
        pub const SendMessageCallback = SendMessageCallbackW;
        pub const BroadcastSystemMessageEx = BroadcastSystemMessageExW;
        pub const PostMessage = PostMessageW;
        pub const PostThreadMessage = PostThreadMessageW;
        pub const DefWindowProc = DefWindowProcW;
        pub const CallWindowProc = CallWindowProcW;
        pub const RegisterClass = RegisterClassW;
        pub const UnregisterClass = UnregisterClassW;
        pub const GetClassInfo = GetClassInfoW;
        pub const RegisterClassEx = RegisterClassExW;
        pub const GetClassInfoEx = GetClassInfoExW;
        pub const CreateWindowEx = CreateWindowExW;
        pub const CreateDialogParam = CreateDialogParamW;
        pub const CreateDialogIndirectParam = CreateDialogIndirectParamW;
        pub const DialogBoxParam = DialogBoxParamW;
        pub const DialogBoxIndirectParam = DialogBoxIndirectParamW;
        pub const SetDlgItemText = SetDlgItemTextW;
        pub const GetDlgItemText = GetDlgItemTextW;
        pub const SendDlgItemMessage = SendDlgItemMessageW;
        pub const CallMsgFilter = CallMsgFilterW;
        pub const SetProp = SetPropW;
        pub const GetProp = GetPropW;
        pub const RemoveProp = RemovePropW;
        pub const EnumPropsEx = EnumPropsExW;
        pub const EnumProps = EnumPropsW;
        pub const SetWindowText = SetWindowTextW;
        pub const GetWindowText = GetWindowTextW;
        pub const GetWindowTextLength = GetWindowTextLengthW;
        pub const MessageBox = MessageBoxW;
        pub const MessageBoxEx = MessageBoxExW;
        pub const MessageBoxIndirect = MessageBoxIndirectW;
        pub const GetWindowLong = GetWindowLongW;
        pub const SetWindowLong = SetWindowLongW;
        pub const GetClassLong = GetClassLongW;
        pub const SetClassLong = SetClassLongW;
        pub const FindWindow = FindWindowW;
        pub const FindWindowEx = FindWindowExW;
        pub const GetClassName = GetClassNameW;
        pub const SetWindowsHookEx = SetWindowsHookExW;
        pub const IsDialogMessage = IsDialogMessageW;
        pub const DefFrameProc = DefFrameProcW;
        pub const DefMDIChildProc = DefMDIChildProcW;
        pub const CreateMDIWindow = CreateMDIWindowW;
        pub const SystemParametersInfo = SystemParametersInfoW;
        pub const GetWindowModuleFileName = GetWindowModuleFileNameW;
        pub const GetAltTabInfo = GetAltTabInfoW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const OPENFILENAME_NT4 = *opaque{};
        pub const OPENFILENAME = *opaque{};
        pub const OFNOTIFY = *opaque{};
        pub const OFNOTIFYEX = *opaque{};
        pub const CHOOSECOLOR = *opaque{};
        pub const FINDREPLACE = *opaque{};
        pub const CHOOSEFONT = *opaque{};
        pub const PRINTDLG = *opaque{};
        pub const PRINTDLGEX = *opaque{};
        pub const PAGESETUPDLG = *opaque{};
        pub const PROPENUMPROC = *opaque{};
        pub const PROPENUMPROCEX = *opaque{};
        pub const CBT_CREATEWND = *opaque{};
        pub const WNDCLASSEX = *opaque{};
        pub const WNDCLASS = *opaque{};
        pub const CREATESTRUCT = *opaque{};
        pub const MSGBOXPARAMS = *opaque{};
        pub const MDICREATESTRUCT = *opaque{};
        pub const NONCLIENTMETRICS = *opaque{};
        pub const GetOpenFileName = *opaque{};
        pub const GetSaveFileName = *opaque{};
        pub const GetFileTitle = *opaque{};
        pub const ChooseColor = *opaque{};
        pub const FindText = *opaque{};
        pub const ReplaceText = *opaque{};
        pub const ChooseFont = *opaque{};
        pub const PrintDlg = *opaque{};
        pub const PrintDlgEx = *opaque{};
        pub const PageSetupDlg = *opaque{};
        pub const RegisterWindowMessage = *opaque{};
        pub const GetMessage = *opaque{};
        pub const DispatchMessage = *opaque{};
        pub const PeekMessage = *opaque{};
        pub const SendMessage = *opaque{};
        pub const SendMessageTimeout = *opaque{};
        pub const SendNotifyMessage = *opaque{};
        pub const SendMessageCallback = *opaque{};
        pub const BroadcastSystemMessageEx = *opaque{};
        pub const PostMessage = *opaque{};
        pub const PostThreadMessage = *opaque{};
        pub const DefWindowProc = *opaque{};
        pub const CallWindowProc = *opaque{};
        pub const RegisterClass = *opaque{};
        pub const UnregisterClass = *opaque{};
        pub const GetClassInfo = *opaque{};
        pub const RegisterClassEx = *opaque{};
        pub const GetClassInfoEx = *opaque{};
        pub const CreateWindowEx = *opaque{};
        pub const CreateDialogParam = *opaque{};
        pub const CreateDialogIndirectParam = *opaque{};
        pub const DialogBoxParam = *opaque{};
        pub const DialogBoxIndirectParam = *opaque{};
        pub const SetDlgItemText = *opaque{};
        pub const GetDlgItemText = *opaque{};
        pub const SendDlgItemMessage = *opaque{};
        pub const CallMsgFilter = *opaque{};
        pub const SetProp = *opaque{};
        pub const GetProp = *opaque{};
        pub const RemoveProp = *opaque{};
        pub const EnumPropsEx = *opaque{};
        pub const EnumProps = *opaque{};
        pub const SetWindowText = *opaque{};
        pub const GetWindowText = *opaque{};
        pub const GetWindowTextLength = *opaque{};
        pub const MessageBox = *opaque{};
        pub const MessageBoxEx = *opaque{};
        pub const MessageBoxIndirect = *opaque{};
        pub const GetWindowLong = *opaque{};
        pub const SetWindowLong = *opaque{};
        pub const GetClassLong = *opaque{};
        pub const SetClassLong = *opaque{};
        pub const FindWindow = *opaque{};
        pub const FindWindowEx = *opaque{};
        pub const GetClassName = *opaque{};
        pub const SetWindowsHookEx = *opaque{};
        pub const IsDialogMessage = *opaque{};
        pub const DefFrameProc = *opaque{};
        pub const DefMDIChildProc = *opaque{};
        pub const CreateMDIWindow = *opaque{};
        pub const SystemParametersInfo = *opaque{};
        pub const GetWindowModuleFileName = *opaque{};
        pub const GetAltTabInfo = *opaque{};
    } else struct {
        pub const OPENFILENAME_NT4 = @compileError("'OPENFILENAME_NT4' requires that UNICODE be set to true or false in the root module");
        pub const OPENFILENAME = @compileError("'OPENFILENAME' requires that UNICODE be set to true or false in the root module");
        pub const OFNOTIFY = @compileError("'OFNOTIFY' requires that UNICODE be set to true or false in the root module");
        pub const OFNOTIFYEX = @compileError("'OFNOTIFYEX' requires that UNICODE be set to true or false in the root module");
        pub const CHOOSECOLOR = @compileError("'CHOOSECOLOR' requires that UNICODE be set to true or false in the root module");
        pub const FINDREPLACE = @compileError("'FINDREPLACE' requires that UNICODE be set to true or false in the root module");
        pub const CHOOSEFONT = @compileError("'CHOOSEFONT' requires that UNICODE be set to true or false in the root module");
        pub const PRINTDLG = @compileError("'PRINTDLG' requires that UNICODE be set to true or false in the root module");
        pub const PRINTDLGEX = @compileError("'PRINTDLGEX' requires that UNICODE be set to true or false in the root module");
        pub const PAGESETUPDLG = @compileError("'PAGESETUPDLG' requires that UNICODE be set to true or false in the root module");
        pub const PROPENUMPROC = @compileError("'PROPENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const PROPENUMPROCEX = @compileError("'PROPENUMPROCEX' requires that UNICODE be set to true or false in the root module");
        pub const CBT_CREATEWND = @compileError("'CBT_CREATEWND' requires that UNICODE be set to true or false in the root module");
        pub const WNDCLASSEX = @compileError("'WNDCLASSEX' requires that UNICODE be set to true or false in the root module");
        pub const WNDCLASS = @compileError("'WNDCLASS' requires that UNICODE be set to true or false in the root module");
        pub const CREATESTRUCT = @compileError("'CREATESTRUCT' requires that UNICODE be set to true or false in the root module");
        pub const MSGBOXPARAMS = @compileError("'MSGBOXPARAMS' requires that UNICODE be set to true or false in the root module");
        pub const MDICREATESTRUCT = @compileError("'MDICREATESTRUCT' requires that UNICODE be set to true or false in the root module");
        pub const NONCLIENTMETRICS = @compileError("'NONCLIENTMETRICS' requires that UNICODE be set to true or false in the root module");
        pub const GetOpenFileName = @compileError("'GetOpenFileName' requires that UNICODE be set to true or false in the root module");
        pub const GetSaveFileName = @compileError("'GetSaveFileName' requires that UNICODE be set to true or false in the root module");
        pub const GetFileTitle = @compileError("'GetFileTitle' requires that UNICODE be set to true or false in the root module");
        pub const ChooseColor = @compileError("'ChooseColor' requires that UNICODE be set to true or false in the root module");
        pub const FindText = @compileError("'FindText' requires that UNICODE be set to true or false in the root module");
        pub const ReplaceText = @compileError("'ReplaceText' requires that UNICODE be set to true or false in the root module");
        pub const ChooseFont = @compileError("'ChooseFont' requires that UNICODE be set to true or false in the root module");
        pub const PrintDlg = @compileError("'PrintDlg' requires that UNICODE be set to true or false in the root module");
        pub const PrintDlgEx = @compileError("'PrintDlgEx' requires that UNICODE be set to true or false in the root module");
        pub const PageSetupDlg = @compileError("'PageSetupDlg' requires that UNICODE be set to true or false in the root module");
        pub const RegisterWindowMessage = @compileError("'RegisterWindowMessage' requires that UNICODE be set to true or false in the root module");
        pub const GetMessage = @compileError("'GetMessage' requires that UNICODE be set to true or false in the root module");
        pub const DispatchMessage = @compileError("'DispatchMessage' requires that UNICODE be set to true or false in the root module");
        pub const PeekMessage = @compileError("'PeekMessage' requires that UNICODE be set to true or false in the root module");
        pub const SendMessage = @compileError("'SendMessage' requires that UNICODE be set to true or false in the root module");
        pub const SendMessageTimeout = @compileError("'SendMessageTimeout' requires that UNICODE be set to true or false in the root module");
        pub const SendNotifyMessage = @compileError("'SendNotifyMessage' requires that UNICODE be set to true or false in the root module");
        pub const SendMessageCallback = @compileError("'SendMessageCallback' requires that UNICODE be set to true or false in the root module");
        pub const BroadcastSystemMessageEx = @compileError("'BroadcastSystemMessageEx' requires that UNICODE be set to true or false in the root module");
        pub const PostMessage = @compileError("'PostMessage' requires that UNICODE be set to true or false in the root module");
        pub const PostThreadMessage = @compileError("'PostThreadMessage' requires that UNICODE be set to true or false in the root module");
        pub const DefWindowProc = @compileError("'DefWindowProc' requires that UNICODE be set to true or false in the root module");
        pub const CallWindowProc = @compileError("'CallWindowProc' requires that UNICODE be set to true or false in the root module");
        pub const RegisterClass = @compileError("'RegisterClass' requires that UNICODE be set to true or false in the root module");
        pub const UnregisterClass = @compileError("'UnregisterClass' requires that UNICODE be set to true or false in the root module");
        pub const GetClassInfo = @compileError("'GetClassInfo' requires that UNICODE be set to true or false in the root module");
        pub const RegisterClassEx = @compileError("'RegisterClassEx' requires that UNICODE be set to true or false in the root module");
        pub const GetClassInfoEx = @compileError("'GetClassInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const CreateWindowEx = @compileError("'CreateWindowEx' requires that UNICODE be set to true or false in the root module");
        pub const CreateDialogParam = @compileError("'CreateDialogParam' requires that UNICODE be set to true or false in the root module");
        pub const CreateDialogIndirectParam = @compileError("'CreateDialogIndirectParam' requires that UNICODE be set to true or false in the root module");
        pub const DialogBoxParam = @compileError("'DialogBoxParam' requires that UNICODE be set to true or false in the root module");
        pub const DialogBoxIndirectParam = @compileError("'DialogBoxIndirectParam' requires that UNICODE be set to true or false in the root module");
        pub const SetDlgItemText = @compileError("'SetDlgItemText' requires that UNICODE be set to true or false in the root module");
        pub const GetDlgItemText = @compileError("'GetDlgItemText' requires that UNICODE be set to true or false in the root module");
        pub const SendDlgItemMessage = @compileError("'SendDlgItemMessage' requires that UNICODE be set to true or false in the root module");
        pub const CallMsgFilter = @compileError("'CallMsgFilter' requires that UNICODE be set to true or false in the root module");
        pub const SetProp = @compileError("'SetProp' requires that UNICODE be set to true or false in the root module");
        pub const GetProp = @compileError("'GetProp' requires that UNICODE be set to true or false in the root module");
        pub const RemoveProp = @compileError("'RemoveProp' requires that UNICODE be set to true or false in the root module");
        pub const EnumPropsEx = @compileError("'EnumPropsEx' requires that UNICODE be set to true or false in the root module");
        pub const EnumProps = @compileError("'EnumProps' requires that UNICODE be set to true or false in the root module");
        pub const SetWindowText = @compileError("'SetWindowText' requires that UNICODE be set to true or false in the root module");
        pub const GetWindowText = @compileError("'GetWindowText' requires that UNICODE be set to true or false in the root module");
        pub const GetWindowTextLength = @compileError("'GetWindowTextLength' requires that UNICODE be set to true or false in the root module");
        pub const MessageBox = @compileError("'MessageBox' requires that UNICODE be set to true or false in the root module");
        pub const MessageBoxEx = @compileError("'MessageBoxEx' requires that UNICODE be set to true or false in the root module");
        pub const MessageBoxIndirect = @compileError("'MessageBoxIndirect' requires that UNICODE be set to true or false in the root module");
        pub const GetWindowLong = @compileError("'GetWindowLong' requires that UNICODE be set to true or false in the root module");
        pub const SetWindowLong = @compileError("'SetWindowLong' requires that UNICODE be set to true or false in the root module");
        pub const GetClassLong = @compileError("'GetClassLong' requires that UNICODE be set to true or false in the root module");
        pub const SetClassLong = @compileError("'SetClassLong' requires that UNICODE be set to true or false in the root module");
        pub const FindWindow = @compileError("'FindWindow' requires that UNICODE be set to true or false in the root module");
        pub const FindWindowEx = @compileError("'FindWindowEx' requires that UNICODE be set to true or false in the root module");
        pub const GetClassName = @compileError("'GetClassName' requires that UNICODE be set to true or false in the root module");
        pub const SetWindowsHookEx = @compileError("'SetWindowsHookEx' requires that UNICODE be set to true or false in the root module");
        pub const IsDialogMessage = @compileError("'IsDialogMessage' requires that UNICODE be set to true or false in the root module");
        pub const DefFrameProc = @compileError("'DefFrameProc' requires that UNICODE be set to true or false in the root module");
        pub const DefMDIChildProc = @compileError("'DefMDIChildProc' requires that UNICODE be set to true or false in the root module");
        pub const CreateMDIWindow = @compileError("'CreateMDIWindow' requires that UNICODE be set to true or false in the root module");
        pub const SystemParametersInfo = @compileError("'SystemParametersInfo' requires that UNICODE be set to true or false in the root module");
        pub const GetWindowModuleFileName = @compileError("'GetWindowModuleFileName' requires that UNICODE be set to true or false in the root module");
        pub const GetAltTabInfo = @compileError("'GetAltTabInfo' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (27)
//--------------------------------------------------------------------------------
const HDC = @import("gdi.zig").HDC;
const MSGBOXCALLBACK = @import("menus_and_resources.zig").MSGBOXCALLBACK;
const HINSTANCE = @import("system_services.zig").HINSTANCE;
const HRESULT = @import("com.zig").HRESULT;
const NMHDR = @import("controls.zig").NMHDR;
const LOGFONTW = @import("shell.zig").LOGFONTW;
const BOOL = @import("system_services.zig").BOOL;
const DEVMODEA = @import("xps.zig").DEVMODEA;
const HBRUSH = @import("gdi.zig").HBRUSH;
const LUID = @import("kernel.zig").LUID;
const LRESULT = @import("system_services.zig").LRESULT;
const HMENU = @import("menus_and_resources.zig").HMENU;
const WNDENUMPROC = @import("menus_and_resources.zig").WNDENUMPROC;
const HICON = @import("menus_and_resources.zig").HICON;
const WNDPROC = @import("menus_and_resources.zig").WNDPROC;
const PWSTR = @import("system_services.zig").PWSTR;
const HDESK = @import("windows_stations_and_desktops.zig").HDESK;
const IUnknown = @import("com.zig").IUnknown;
const PSTR = @import("system_services.zig").PSTR;
const RECT = @import("display_devices.zig").RECT;
const BLENDFUNCTION = @import("gdi.zig").BLENDFUNCTION;
const POINT = @import("display_devices.zig").POINT;
const SIZE = @import("display_devices.zig").SIZE;
const HPROPSHEETPAGE = @import("controls.zig").HPROPSHEETPAGE;
const LOGFONTA = @import("shell.zig").LOGFONTA;
const HANDLE = @import("system_services.zig").HANDLE;
const HCURSOR = @import("menus_and_resources.zig").HCURSOR;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = LPOFNHOOKPROC;
    _ = LPCCHOOKPROC;
    _ = LPFRHOOKPROC;
    _ = LPCFHOOKPROC;
    _ = LPPRINTHOOKPROC;
    _ = LPSETUPHOOKPROC;
    _ = LPPAGEPAINTHOOK;
    _ = LPPAGESETUPHOOK;
    _ = DLGPROC;
    _ = TIMERPROC;
    _ = HOOKPROC;
    _ = SENDASYNCPROC;
    _ = PROPENUMPROCA;
    _ = PROPENUMPROCW;
    _ = PROPENUMPROCEXA;
    _ = PROPENUMPROCEXW;

    const constant_export_count = 0;
    const type_export_count = 87;
    const enum_value_export_count = 0;
    const com_iface_id_export_count = 2;
    const com_class_id_export_count = 0;
    const func_export_count = 236;
    const unicode_alias_count = 82;
    const import_count = 27;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (1480)
//--------------------------------------------------------------------------------
pub const OFN_READONLY : u32 = 1;
pub const OFN_OVERWRITEPROMPT : u32 = 2;
pub const OFN_HIDEREADONLY : u32 = 4;
pub const OFN_NOCHANGEDIR : u32 = 8;
pub const OFN_SHOWHELP : u32 = 16;
pub const OFN_ENABLEHOOK : u32 = 32;
pub const OFN_ENABLETEMPLATE : u32 = 64;
pub const OFN_ENABLETEMPLATEHANDLE : u32 = 128;
pub const OFN_NOVALIDATE : u32 = 256;
pub const OFN_ALLOWMULTISELECT : u32 = 512;
pub const OFN_EXTENSIONDIFFERENT : u32 = 1024;
pub const OFN_PATHMUSTEXIST : u32 = 2048;
pub const OFN_FILEMUSTEXIST : u32 = 4096;
pub const OFN_CREATEPROMPT : u32 = 8192;
pub const OFN_SHAREAWARE : u32 = 16384;
pub const OFN_NOREADONLYRETURN : u32 = 32768;
pub const OFN_NOTESTFILECREATE : u32 = 65536;
pub const OFN_NONETWORKBUTTON : u32 = 131072;
pub const OFN_NOLONGNAMES : u32 = 262144;
pub const OFN_EXPLORER : u32 = 524288;
pub const OFN_NODEREFERENCELINKS : u32 = 1048576;
pub const OFN_LONGNAMES : u32 = 2097152;
pub const OFN_ENABLEINCLUDENOTIFY : u32 = 4194304;
pub const OFN_ENABLESIZING : u32 = 8388608;
pub const OFN_DONTADDTORECENT : u32 = 33554432;
pub const OFN_FORCESHOWHIDDEN : u32 = 268435456;
pub const OFN_EX_NOPLACESBAR : u32 = 1;
pub const OFN_SHAREFALLTHROUGH : u32 = 2;
pub const OFN_SHARENOWARN : u32 = 1;
pub const OFN_SHAREWARN : u32 = 0;
pub const FR_RAW : u32 = 131072;
pub const FR_SHOWWRAPAROUND : u32 = 262144;
pub const FR_NOWRAPAROUND : u32 = 524288;
pub const FR_WRAPAROUND : u32 = 1048576;
pub const PS_OPENTYPE_FONTTYPE : u32 = 65536;
pub const TT_OPENTYPE_FONTTYPE : u32 = 131072;
pub const TYPE1_FONTTYPE : u32 = 262144;
pub const SYMBOL_FONTTYPE : u32 = 524288;
pub const CD_LBSELNOITEMS : i32 = -1;
pub const CD_LBSELCHANGE : u32 = 0;
pub const CD_LBSELSUB : u32 = 1;
pub const CD_LBSELADD : u32 = 2;
pub const START_PAGE_GENERAL : u32 = 4294967295;
pub const PD_RESULT_CANCEL : u32 = 0;
pub const PD_RESULT_PRINT : u32 = 1;
pub const PD_RESULT_APPLY : u32 = 2;
pub const DN_DEFAULTPRN : u32 = 1;
pub const RT_CURSOR : i32 = 1;
pub const RT_BITMAP : i32 = 2;
pub const RT_ICON : i32 = 3;
pub const RT_MENU : i32 = 4;
pub const RT_DIALOG : i32 = 5;
pub const RT_FONTDIR : i32 = 7;
pub const RT_FONT : i32 = 8;
pub const RT_ACCELERATOR : i32 = 9;
pub const RT_MESSAGETABLE : i32 = 11;
pub const DIFFERENCE : u32 = 11;
pub const RT_VERSION : i32 = 16;
pub const RT_DLGINCLUDE : i32 = 17;
pub const RT_PLUGPLAY : i32 = 19;
pub const RT_VXD : i32 = 20;
pub const RT_ANICURSOR : i32 = 21;
pub const RT_ANIICON : i32 = 22;
pub const RT_HTML : i32 = 23;
pub const RT_MANIFEST : u32 = 24;
pub const CREATEPROCESS_MANIFEST_RESOURCE_ID : u32 = 1;
pub const ISOLATIONAWARE_MANIFEST_RESOURCE_ID : u32 = 2;
pub const ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID : u32 = 3;
pub const ISOLATIONPOLICY_MANIFEST_RESOURCE_ID : u32 = 4;
pub const ISOLATIONPOLICY_BROWSER_MANIFEST_RESOURCE_ID : u32 = 5;
pub const MINIMUM_RESERVED_MANIFEST_RESOURCE_ID : u32 = 1;
pub const MAXIMUM_RESERVED_MANIFEST_RESOURCE_ID : u32 = 16;
pub const SB_LINEUP : u32 = 0;
pub const SB_LINELEFT : u32 = 0;
pub const SB_LINEDOWN : u32 = 1;
pub const SB_LINERIGHT : u32 = 1;
pub const SB_PAGEUP : u32 = 2;
pub const SB_PAGELEFT : u32 = 2;
pub const SB_PAGEDOWN : u32 = 3;
pub const SB_PAGERIGHT : u32 = 3;
pub const SB_THUMBPOSITION : u32 = 4;
pub const SB_THUMBTRACK : u32 = 5;
pub const SB_TOP : u32 = 6;
pub const SB_LEFT : u32 = 6;
pub const SB_BOTTOM : u32 = 7;
pub const SB_RIGHT : u32 = 7;
pub const SB_ENDSCROLL : u32 = 8;
pub const HIDE_WINDOW : u32 = 0;
pub const SHOW_OPENWINDOW : u32 = 1;
pub const SHOW_ICONWINDOW : u32 = 2;
pub const SHOW_FULLSCREEN : u32 = 3;
pub const SHOW_OPENNOACTIVATE : u32 = 4;
pub const KF_EXTENDED : u32 = 256;
pub const KF_DLGMODE : u32 = 2048;
pub const KF_MENUMODE : u32 = 4096;
pub const KF_ALTDOWN : u32 = 8192;
pub const KF_REPEAT : u32 = 16384;
pub const KF_UP : u32 = 32768;
pub const VK_LBUTTON : u32 = 1;
pub const VK_RBUTTON : u32 = 2;
pub const VK_CANCEL : u32 = 3;
pub const VK_MBUTTON : u32 = 4;
pub const VK_XBUTTON1 : u32 = 5;
pub const VK_XBUTTON2 : u32 = 6;
pub const VK_BACK : u32 = 8;
pub const VK_TAB : u32 = 9;
pub const VK_CLEAR : u32 = 12;
pub const VK_RETURN : u32 = 13;
pub const VK_SHIFT : u32 = 16;
pub const VK_CONTROL : u32 = 17;
pub const VK_MENU : u32 = 18;
pub const VK_PAUSE : u32 = 19;
pub const VK_CAPITAL : u32 = 20;
pub const VK_KANA : u32 = 21;
pub const VK_HANGEUL : u32 = 21;
pub const VK_HANGUL : u32 = 21;
pub const VK_JUNJA : u32 = 23;
pub const VK_FINAL : u32 = 24;
pub const VK_HANJA : u32 = 25;
pub const VK_KANJI : u32 = 25;
pub const VK_ESCAPE : u32 = 27;
pub const VK_CONVERT : u32 = 28;
pub const VK_NONCONVERT : u32 = 29;
pub const VK_ACCEPT : u32 = 30;
pub const VK_MODECHANGE : u32 = 31;
pub const VK_SPACE : u32 = 32;
pub const VK_PRIOR : u32 = 33;
pub const VK_NEXT : u32 = 34;
pub const VK_END : u32 = 35;
pub const VK_HOME : u32 = 36;
pub const VK_LEFT : u32 = 37;
pub const VK_UP : u32 = 38;
pub const VK_RIGHT : u32 = 39;
pub const VK_DOWN : u32 = 40;
pub const VK_SELECT : u32 = 41;
pub const VK_PRINT : u32 = 42;
pub const VK_EXECUTE : u32 = 43;
pub const VK_SNAPSHOT : u32 = 44;
pub const VK_INSERT : u32 = 45;
pub const VK_DELETE : u32 = 46;
pub const VK_HELP : u32 = 47;
pub const VK_LWIN : u32 = 91;
pub const VK_RWIN : u32 = 92;
pub const VK_APPS : u32 = 93;
pub const VK_SLEEP : u32 = 95;
pub const VK_NUMPAD0 : u32 = 96;
pub const VK_NUMPAD1 : u32 = 97;
pub const VK_NUMPAD2 : u32 = 98;
pub const VK_NUMPAD3 : u32 = 99;
pub const VK_NUMPAD4 : u32 = 100;
pub const VK_NUMPAD5 : u32 = 101;
pub const VK_NUMPAD6 : u32 = 102;
pub const VK_NUMPAD7 : u32 = 103;
pub const VK_NUMPAD8 : u32 = 104;
pub const VK_NUMPAD9 : u32 = 105;
pub const VK_MULTIPLY : u32 = 106;
pub const VK_ADD : u32 = 107;
pub const VK_SEPARATOR : u32 = 108;
pub const VK_SUBTRACT : u32 = 109;
pub const VK_DECIMAL : u32 = 110;
pub const VK_DIVIDE : u32 = 111;
pub const VK_F1 : u32 = 112;
pub const VK_F2 : u32 = 113;
pub const VK_F3 : u32 = 114;
pub const VK_F4 : u32 = 115;
pub const VK_F5 : u32 = 116;
pub const VK_F6 : u32 = 117;
pub const VK_F7 : u32 = 118;
pub const VK_F8 : u32 = 119;
pub const VK_F9 : u32 = 120;
pub const VK_F10 : u32 = 121;
pub const VK_F11 : u32 = 122;
pub const VK_F12 : u32 = 123;
pub const VK_F13 : u32 = 124;
pub const VK_F14 : u32 = 125;
pub const VK_F15 : u32 = 126;
pub const VK_F16 : u32 = 127;
pub const VK_F17 : u32 = 128;
pub const VK_F18 : u32 = 129;
pub const VK_F19 : u32 = 130;
pub const VK_F20 : u32 = 131;
pub const VK_F21 : u32 = 132;
pub const VK_F22 : u32 = 133;
pub const VK_F23 : u32 = 134;
pub const VK_F24 : u32 = 135;
pub const VK_NAVIGATION_VIEW : u32 = 136;
pub const VK_NAVIGATION_MENU : u32 = 137;
pub const VK_NAVIGATION_UP : u32 = 138;
pub const VK_NAVIGATION_DOWN : u32 = 139;
pub const VK_NAVIGATION_LEFT : u32 = 140;
pub const VK_NAVIGATION_RIGHT : u32 = 141;
pub const VK_NAVIGATION_ACCEPT : u32 = 142;
pub const VK_NAVIGATION_CANCEL : u32 = 143;
pub const VK_NUMLOCK : u32 = 144;
pub const VK_SCROLL : u32 = 145;
pub const VK_OEM_NEC_EQUAL : u32 = 146;
pub const VK_OEM_FJ_JISHO : u32 = 146;
pub const VK_OEM_FJ_MASSHOU : u32 = 147;
pub const VK_OEM_FJ_TOUROKU : u32 = 148;
pub const VK_OEM_FJ_LOYA : u32 = 149;
pub const VK_OEM_FJ_ROYA : u32 = 150;
pub const VK_LSHIFT : u32 = 160;
pub const VK_RSHIFT : u32 = 161;
pub const VK_LCONTROL : u32 = 162;
pub const VK_RCONTROL : u32 = 163;
pub const VK_LMENU : u32 = 164;
pub const VK_RMENU : u32 = 165;
pub const VK_BROWSER_BACK : u32 = 166;
pub const VK_BROWSER_FORWARD : u32 = 167;
pub const VK_BROWSER_REFRESH : u32 = 168;
pub const VK_BROWSER_STOP : u32 = 169;
pub const VK_BROWSER_SEARCH : u32 = 170;
pub const VK_BROWSER_FAVORITES : u32 = 171;
pub const VK_BROWSER_HOME : u32 = 172;
pub const VK_VOLUME_MUTE : u32 = 173;
pub const VK_VOLUME_DOWN : u32 = 174;
pub const VK_VOLUME_UP : u32 = 175;
pub const VK_MEDIA_NEXT_TRACK : u32 = 176;
pub const VK_MEDIA_PREV_TRACK : u32 = 177;
pub const VK_MEDIA_STOP : u32 = 178;
pub const VK_MEDIA_PLAY_PAUSE : u32 = 179;
pub const VK_LAUNCH_MAIL : u32 = 180;
pub const VK_LAUNCH_MEDIA_SELECT : u32 = 181;
pub const VK_LAUNCH_APP1 : u32 = 182;
pub const VK_LAUNCH_APP2 : u32 = 183;
pub const VK_OEM_1 : u32 = 186;
pub const VK_OEM_PLUS : u32 = 187;
pub const VK_OEM_COMMA : u32 = 188;
pub const VK_OEM_MINUS : u32 = 189;
pub const VK_OEM_PERIOD : u32 = 190;
pub const VK_OEM_2 : u32 = 191;
pub const VK_OEM_3 : u32 = 192;
pub const VK_GAMEPAD_A : u32 = 195;
pub const VK_GAMEPAD_B : u32 = 196;
pub const VK_GAMEPAD_X : u32 = 197;
pub const VK_GAMEPAD_Y : u32 = 198;
pub const VK_GAMEPAD_RIGHT_SHOULDER : u32 = 199;
pub const VK_GAMEPAD_LEFT_SHOULDER : u32 = 200;
pub const VK_GAMEPAD_LEFT_TRIGGER : u32 = 201;
pub const VK_GAMEPAD_RIGHT_TRIGGER : u32 = 202;
pub const VK_GAMEPAD_DPAD_UP : u32 = 203;
pub const VK_GAMEPAD_DPAD_DOWN : u32 = 204;
pub const VK_GAMEPAD_DPAD_LEFT : u32 = 205;
pub const VK_GAMEPAD_DPAD_RIGHT : u32 = 206;
pub const VK_GAMEPAD_MENU : u32 = 207;
pub const VK_GAMEPAD_VIEW : u32 = 208;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON : u32 = 209;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON : u32 = 210;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_UP : u32 = 211;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_DOWN : u32 = 212;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT : u32 = 213;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_LEFT : u32 = 214;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_UP : u32 = 215;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN : u32 = 216;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT : u32 = 217;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT : u32 = 218;
pub const VK_OEM_4 : u32 = 219;
pub const VK_OEM_5 : u32 = 220;
pub const VK_OEM_6 : u32 = 221;
pub const VK_OEM_7 : u32 = 222;
pub const VK_OEM_8 : u32 = 223;
pub const VK_OEM_AX : u32 = 225;
pub const VK_OEM_102 : u32 = 226;
pub const VK_ICO_HELP : u32 = 227;
pub const VK_ICO_00 : u32 = 228;
pub const VK_PROCESSKEY : u32 = 229;
pub const VK_ICO_CLEAR : u32 = 230;
pub const VK_PACKET : u32 = 231;
pub const VK_OEM_RESET : u32 = 233;
pub const VK_OEM_JUMP : u32 = 234;
pub const VK_OEM_PA1 : u32 = 235;
pub const VK_OEM_PA2 : u32 = 236;
pub const VK_OEM_PA3 : u32 = 237;
pub const VK_OEM_WSCTRL : u32 = 238;
pub const VK_OEM_CUSEL : u32 = 239;
pub const VK_OEM_ATTN : u32 = 240;
pub const VK_OEM_FINISH : u32 = 241;
pub const VK_OEM_COPY : u32 = 242;
pub const VK_OEM_AUTO : u32 = 243;
pub const VK_OEM_ENLW : u32 = 244;
pub const VK_OEM_BACKTAB : u32 = 245;
pub const VK_ATTN : u32 = 246;
pub const VK_CRSEL : u32 = 247;
pub const VK_EXSEL : u32 = 248;
pub const VK_EREOF : u32 = 249;
pub const VK_PLAY : u32 = 250;
pub const VK_ZOOM : u32 = 251;
pub const VK_NONAME : u32 = 252;
pub const VK_PA1 : u32 = 253;
pub const VK_OEM_CLEAR : u32 = 254;
pub const WH_MIN : i32 = -1;
pub const WH_HARDWARE : u32 = 8;
pub const WH_MAX : u32 = 14;
pub const HC_ACTION : u32 = 0;
pub const HC_GETNEXT : u32 = 1;
pub const HC_SKIP : u32 = 2;
pub const HC_NOREMOVE : u32 = 3;
pub const HC_SYSMODALON : u32 = 4;
pub const HC_SYSMODALOFF : u32 = 5;
pub const HCBT_MOVESIZE : u32 = 0;
pub const HCBT_MINMAX : u32 = 1;
pub const HCBT_QS : u32 = 2;
pub const HCBT_CREATEWND : u32 = 3;
pub const HCBT_DESTROYWND : u32 = 4;
pub const HCBT_ACTIVATE : u32 = 5;
pub const HCBT_CLICKSKIPPED : u32 = 6;
pub const HCBT_KEYSKIPPED : u32 = 7;
pub const HCBT_SYSCOMMAND : u32 = 8;
pub const HCBT_SETFOCUS : u32 = 9;
pub const WTS_CONSOLE_CONNECT : u32 = 1;
pub const WTS_CONSOLE_DISCONNECT : u32 = 2;
pub const WTS_REMOTE_CONNECT : u32 = 3;
pub const WTS_REMOTE_DISCONNECT : u32 = 4;
pub const WTS_SESSION_LOGON : u32 = 5;
pub const WTS_SESSION_LOGOFF : u32 = 6;
pub const WTS_SESSION_LOCK : u32 = 7;
pub const WTS_SESSION_UNLOCK : u32 = 8;
pub const WTS_SESSION_REMOTE_CONTROL : u32 = 9;
pub const WTS_SESSION_CREATE : u32 = 10;
pub const WTS_SESSION_TERMINATE : u32 = 11;
pub const MSGF_DIALOGBOX : u32 = 0;
pub const MSGF_MESSAGEBOX : u32 = 1;
pub const MSGF_MENU : u32 = 2;
pub const MSGF_SCROLLBAR : u32 = 5;
pub const MSGF_NEXTWINDOW : u32 = 6;
pub const MSGF_MAX : u32 = 8;
pub const MSGF_USER : u32 = 4096;
pub const HSHELL_WINDOWCREATED : u32 = 1;
pub const HSHELL_WINDOWDESTROYED : u32 = 2;
pub const HSHELL_ACTIVATESHELLWINDOW : u32 = 3;
pub const HSHELL_WINDOWACTIVATED : u32 = 4;
pub const HSHELL_GETMINRECT : u32 = 5;
pub const HSHELL_REDRAW : u32 = 6;
pub const HSHELL_TASKMAN : u32 = 7;
pub const HSHELL_LANGUAGE : u32 = 8;
pub const HSHELL_SYSMENU : u32 = 9;
pub const HSHELL_ENDTASK : u32 = 10;
pub const HSHELL_ACCESSIBILITYSTATE : u32 = 11;
pub const HSHELL_APPCOMMAND : u32 = 12;
pub const HSHELL_WINDOWREPLACED : u32 = 13;
pub const HSHELL_WINDOWREPLACING : u32 = 14;
pub const HSHELL_MONITORCHANGED : u32 = 16;
pub const HSHELL_HIGHBIT : u32 = 32768;
pub const FAPPCOMMAND_MOUSE : u32 = 32768;
pub const FAPPCOMMAND_KEY : u32 = 0;
pub const FAPPCOMMAND_OEM : u32 = 4096;
pub const FAPPCOMMAND_MASK : u32 = 61440;
pub const LLKHF_INJECTED : u32 = 16;
pub const LLKHF_LOWER_IL_INJECTED : u32 = 2;
pub const LLMHF_INJECTED : u32 = 1;
pub const LLMHF_LOWER_IL_INJECTED : u32 = 2;
pub const INPUTLANGCHANGE_SYSCHARSET : u32 = 1;
pub const INPUTLANGCHANGE_FORWARD : u32 = 2;
pub const INPUTLANGCHANGE_BACKWARD : u32 = 4;
pub const KL_NAMELENGTH : u32 = 9;
pub const DESKTOP_READOBJECTS : i32 = 1;
pub const DESKTOP_CREATEWINDOW : i32 = 2;
pub const DESKTOP_CREATEMENU : i32 = 4;
pub const DESKTOP_HOOKCONTROL : i32 = 8;
pub const DESKTOP_JOURNALRECORD : i32 = 16;
pub const DESKTOP_JOURNALPLAYBACK : i32 = 32;
pub const DESKTOP_ENUMERATE : i32 = 64;
pub const DESKTOP_WRITEOBJECTS : i32 = 128;
pub const DESKTOP_SWITCHDESKTOP : i32 = 256;
pub const DF_ALLOWOTHERACCOUNTHOOK : i32 = 1;
pub const WINSTA_ENUMDESKTOPS : i32 = 1;
pub const WINSTA_READATTRIBUTES : i32 = 2;
pub const WINSTA_ACCESSCLIPBOARD : i32 = 4;
pub const WINSTA_CREATEDESKTOP : i32 = 8;
pub const WINSTA_WRITEATTRIBUTES : i32 = 16;
pub const WINSTA_ACCESSGLOBALATOMS : i32 = 32;
pub const WINSTA_EXITWINDOWS : i32 = 64;
pub const WINSTA_ENUMERATE : i32 = 256;
pub const WINSTA_READSCREEN : i32 = 512;
pub const CWF_CREATE_ONLY : u32 = 1;
pub const WSF_VISIBLE : i32 = 1;
pub const UOI_TIMERPROC_EXCEPTION_SUPPRESSION : u32 = 7;
pub const WM_NULL : u32 = 0;
pub const WM_CREATE : u32 = 1;
pub const WM_DESTROY : u32 = 2;
pub const WM_MOVE : u32 = 3;
pub const WM_SIZE : u32 = 5;
pub const WM_ACTIVATE : u32 = 6;
pub const WA_INACTIVE : u32 = 0;
pub const WA_ACTIVE : u32 = 1;
pub const WA_CLICKACTIVE : u32 = 2;
pub const WM_SETFOCUS : u32 = 7;
pub const WM_KILLFOCUS : u32 = 8;
pub const WM_ENABLE : u32 = 10;
pub const WM_SETREDRAW : u32 = 11;
pub const WM_SETTEXT : u32 = 12;
pub const WM_GETTEXT : u32 = 13;
pub const WM_GETTEXTLENGTH : u32 = 14;
pub const WM_PAINT : u32 = 15;
pub const WM_CLOSE : u32 = 16;
pub const WM_QUERYENDSESSION : u32 = 17;
pub const WM_QUERYOPEN : u32 = 19;
pub const WM_ENDSESSION : u32 = 22;
pub const WM_QUIT : u32 = 18;
pub const WM_ERASEBKGND : u32 = 20;
pub const WM_SYSCOLORCHANGE : u32 = 21;
pub const WM_SHOWWINDOW : u32 = 24;
pub const WM_WININICHANGE : u32 = 26;
pub const WM_DEVMODECHANGE : u32 = 27;
pub const WM_ACTIVATEAPP : u32 = 28;
pub const WM_FONTCHANGE : u32 = 29;
pub const WM_TIMECHANGE : u32 = 30;
pub const WM_CANCELMODE : u32 = 31;
pub const WM_SETCURSOR : u32 = 32;
pub const WM_MOUSEACTIVATE : u32 = 33;
pub const WM_CHILDACTIVATE : u32 = 34;
pub const WM_QUEUESYNC : u32 = 35;
pub const WM_GETMINMAXINFO : u32 = 36;
pub const WM_PAINTICON : u32 = 38;
pub const WM_ICONERASEBKGND : u32 = 39;
pub const WM_NEXTDLGCTL : u32 = 40;
pub const WM_SPOOLERSTATUS : u32 = 42;
pub const WM_DRAWITEM : u32 = 43;
pub const WM_MEASUREITEM : u32 = 44;
pub const WM_DELETEITEM : u32 = 45;
pub const WM_VKEYTOITEM : u32 = 46;
pub const WM_CHARTOITEM : u32 = 47;
pub const WM_SETFONT : u32 = 48;
pub const WM_GETFONT : u32 = 49;
pub const WM_SETHOTKEY : u32 = 50;
pub const WM_GETHOTKEY : u32 = 51;
pub const WM_QUERYDRAGICON : u32 = 55;
pub const WM_COMPAREITEM : u32 = 57;
pub const WM_GETOBJECT : u32 = 61;
pub const WM_COMPACTING : u32 = 65;
pub const WM_COMMNOTIFY : u32 = 68;
pub const WM_WINDOWPOSCHANGING : u32 = 70;
pub const WM_WINDOWPOSCHANGED : u32 = 71;
pub const WM_POWER : u32 = 72;
pub const PWR_OK : u32 = 1;
pub const PWR_FAIL : i32 = -1;
pub const PWR_SUSPENDREQUEST : u32 = 1;
pub const PWR_SUSPENDRESUME : u32 = 2;
pub const PWR_CRITICALRESUME : u32 = 3;
pub const WM_COPYDATA : u32 = 74;
pub const WM_CANCELJOURNAL : u32 = 75;
pub const WM_INPUTLANGCHANGEREQUEST : u32 = 80;
pub const WM_INPUTLANGCHANGE : u32 = 81;
pub const WM_TCARD : u32 = 82;
pub const WM_HELP : u32 = 83;
pub const WM_USERCHANGED : u32 = 84;
pub const WM_NOTIFYFORMAT : u32 = 85;
pub const NFR_ANSI : u32 = 1;
pub const NFR_UNICODE : u32 = 2;
pub const NF_QUERY : u32 = 3;
pub const NF_REQUERY : u32 = 4;
pub const WM_STYLECHANGING : u32 = 124;
pub const WM_STYLECHANGED : u32 = 125;
pub const WM_DISPLAYCHANGE : u32 = 126;
pub const WM_GETICON : u32 = 127;
pub const WM_SETICON : u32 = 128;
pub const WM_NCCREATE : u32 = 129;
pub const WM_NCDESTROY : u32 = 130;
pub const WM_NCCALCSIZE : u32 = 131;
pub const WM_NCHITTEST : u32 = 132;
pub const WM_NCPAINT : u32 = 133;
pub const WM_NCACTIVATE : u32 = 134;
pub const WM_GETDLGCODE : u32 = 135;
pub const WM_SYNCPAINT : u32 = 136;
pub const WM_NCMOUSEMOVE : u32 = 160;
pub const WM_NCLBUTTONDOWN : u32 = 161;
pub const WM_NCLBUTTONUP : u32 = 162;
pub const WM_NCLBUTTONDBLCLK : u32 = 163;
pub const WM_NCRBUTTONDOWN : u32 = 164;
pub const WM_NCRBUTTONUP : u32 = 165;
pub const WM_NCRBUTTONDBLCLK : u32 = 166;
pub const WM_NCMBUTTONDOWN : u32 = 167;
pub const WM_NCMBUTTONUP : u32 = 168;
pub const WM_NCMBUTTONDBLCLK : u32 = 169;
pub const WM_NCXBUTTONDOWN : u32 = 171;
pub const WM_NCXBUTTONUP : u32 = 172;
pub const WM_NCXBUTTONDBLCLK : u32 = 173;
pub const WM_INPUT_DEVICE_CHANGE : u32 = 254;
pub const WM_INPUT : u32 = 255;
pub const WM_KEYFIRST : u32 = 256;
pub const WM_KEYDOWN : u32 = 256;
pub const WM_KEYUP : u32 = 257;
pub const WM_CHAR : u32 = 258;
pub const WM_DEADCHAR : u32 = 259;
pub const WM_SYSKEYDOWN : u32 = 260;
pub const WM_SYSKEYUP : u32 = 261;
pub const WM_SYSCHAR : u32 = 262;
pub const WM_SYSDEADCHAR : u32 = 263;
pub const WM_KEYLAST : u32 = 265;
pub const UNICODE_NOCHAR : u32 = 65535;
pub const WM_IME_STARTCOMPOSITION : u32 = 269;
pub const WM_IME_ENDCOMPOSITION : u32 = 270;
pub const WM_IME_COMPOSITION : u32 = 271;
pub const WM_IME_KEYLAST : u32 = 271;
pub const WM_INITDIALOG : u32 = 272;
pub const WM_COMMAND : u32 = 273;
pub const WM_SYSCOMMAND : u32 = 274;
pub const WM_TIMER : u32 = 275;
pub const WM_HSCROLL : u32 = 276;
pub const WM_VSCROLL : u32 = 277;
pub const WM_INITMENU : u32 = 278;
pub const WM_INITMENUPOPUP : u32 = 279;
pub const WM_GESTURE : u32 = 281;
pub const WM_GESTURENOTIFY : u32 = 282;
pub const WM_MENUSELECT : u32 = 287;
pub const WM_MENUCHAR : u32 = 288;
pub const WM_ENTERIDLE : u32 = 289;
pub const WM_MENURBUTTONUP : u32 = 290;
pub const WM_MENUDRAG : u32 = 291;
pub const WM_MENUGETOBJECT : u32 = 292;
pub const WM_UNINITMENUPOPUP : u32 = 293;
pub const WM_MENUCOMMAND : u32 = 294;
pub const WM_CHANGEUISTATE : u32 = 295;
pub const WM_UPDATEUISTATE : u32 = 296;
pub const WM_QUERYUISTATE : u32 = 297;
pub const UIS_SET : u32 = 1;
pub const UIS_CLEAR : u32 = 2;
pub const UIS_INITIALIZE : u32 = 3;
pub const UISF_HIDEFOCUS : u32 = 1;
pub const UISF_HIDEACCEL : u32 = 2;
pub const UISF_ACTIVE : u32 = 4;
pub const WM_CTLCOLORMSGBOX : u32 = 306;
pub const WM_CTLCOLOREDIT : u32 = 307;
pub const WM_CTLCOLORLISTBOX : u32 = 308;
pub const WM_CTLCOLORBTN : u32 = 309;
pub const WM_CTLCOLORDLG : u32 = 310;
pub const WM_CTLCOLORSCROLLBAR : u32 = 311;
pub const WM_CTLCOLORSTATIC : u32 = 312;
pub const MN_GETHMENU : u32 = 481;
pub const WM_MOUSEFIRST : u32 = 512;
pub const WM_MOUSEMOVE : u32 = 512;
pub const WM_LBUTTONDOWN : u32 = 513;
pub const WM_LBUTTONUP : u32 = 514;
pub const WM_LBUTTONDBLCLK : u32 = 515;
pub const WM_RBUTTONDOWN : u32 = 516;
pub const WM_RBUTTONUP : u32 = 517;
pub const WM_RBUTTONDBLCLK : u32 = 518;
pub const WM_MBUTTONDOWN : u32 = 519;
pub const WM_MBUTTONUP : u32 = 520;
pub const WM_MBUTTONDBLCLK : u32 = 521;
pub const WM_MOUSEWHEEL : u32 = 522;
pub const WM_XBUTTONDOWN : u32 = 523;
pub const WM_XBUTTONUP : u32 = 524;
pub const WM_XBUTTONDBLCLK : u32 = 525;
pub const WM_MOUSEHWHEEL : u32 = 526;
pub const WM_MOUSELAST : u32 = 526;
pub const WHEEL_DELTA : u32 = 120;
pub const WM_PARENTNOTIFY : u32 = 528;
pub const WM_ENTERMENULOOP : u32 = 529;
pub const WM_EXITMENULOOP : u32 = 530;
pub const WM_NEXTMENU : u32 = 531;
pub const WM_SIZING : u32 = 532;
pub const WM_CAPTURECHANGED : u32 = 533;
pub const WM_MOVING : u32 = 534;
pub const WM_POWERBROADCAST : u32 = 536;
pub const PBT_APMQUERYSUSPEND : u32 = 0;
pub const PBT_APMQUERYSTANDBY : u32 = 1;
pub const PBT_APMQUERYSUSPENDFAILED : u32 = 2;
pub const PBT_APMQUERYSTANDBYFAILED : u32 = 3;
pub const PBT_APMSUSPEND : u32 = 4;
pub const PBT_APMSTANDBY : u32 = 5;
pub const PBT_APMRESUMECRITICAL : u32 = 6;
pub const PBT_APMRESUMESUSPEND : u32 = 7;
pub const PBT_APMRESUMESTANDBY : u32 = 8;
pub const PBTF_APMRESUMEFROMFAILURE : u32 = 1;
pub const PBT_APMBATTERYLOW : u32 = 9;
pub const PBT_APMPOWERSTATUSCHANGE : u32 = 10;
pub const PBT_APMOEMEVENT : u32 = 11;
pub const PBT_APMRESUMEAUTOMATIC : u32 = 18;
pub const PBT_POWERSETTINGCHANGE : u32 = 32787;
pub const WM_DEVICECHANGE : u32 = 537;
pub const WM_MDICREATE : u32 = 544;
pub const WM_MDIDESTROY : u32 = 545;
pub const WM_MDIACTIVATE : u32 = 546;
pub const WM_MDIRESTORE : u32 = 547;
pub const WM_MDINEXT : u32 = 548;
pub const WM_MDIMAXIMIZE : u32 = 549;
pub const WM_MDITILE : u32 = 550;
pub const WM_MDICASCADE : u32 = 551;
pub const WM_MDIICONARRANGE : u32 = 552;
pub const WM_MDIGETACTIVE : u32 = 553;
pub const WM_MDISETMENU : u32 = 560;
pub const WM_ENTERSIZEMOVE : u32 = 561;
pub const WM_EXITSIZEMOVE : u32 = 562;
pub const WM_DROPFILES : u32 = 563;
pub const WM_MDIREFRESHMENU : u32 = 564;
pub const WM_POINTERDEVICECHANGE : u32 = 568;
pub const WM_POINTERDEVICEINRANGE : u32 = 569;
pub const WM_POINTERDEVICEOUTOFRANGE : u32 = 570;
pub const WM_TOUCH : u32 = 576;
pub const WM_NCPOINTERUPDATE : u32 = 577;
pub const WM_NCPOINTERDOWN : u32 = 578;
pub const WM_NCPOINTERUP : u32 = 579;
pub const WM_POINTERUPDATE : u32 = 581;
pub const WM_POINTERDOWN : u32 = 582;
pub const WM_POINTERUP : u32 = 583;
pub const WM_POINTERENTER : u32 = 585;
pub const WM_POINTERLEAVE : u32 = 586;
pub const WM_POINTERACTIVATE : u32 = 587;
pub const WM_POINTERCAPTURECHANGED : u32 = 588;
pub const WM_TOUCHHITTESTING : u32 = 589;
pub const WM_POINTERWHEEL : u32 = 590;
pub const WM_POINTERHWHEEL : u32 = 591;
pub const DM_POINTERHITTEST : u32 = 592;
pub const WM_POINTERROUTEDTO : u32 = 593;
pub const WM_POINTERROUTEDAWAY : u32 = 594;
pub const WM_POINTERROUTEDRELEASED : u32 = 595;
pub const WM_IME_SETCONTEXT : u32 = 641;
pub const WM_IME_NOTIFY : u32 = 642;
pub const WM_IME_CONTROL : u32 = 643;
pub const WM_IME_COMPOSITIONFULL : u32 = 644;
pub const WM_IME_SELECT : u32 = 645;
pub const WM_IME_CHAR : u32 = 646;
pub const WM_IME_REQUEST : u32 = 648;
pub const WM_IME_KEYDOWN : u32 = 656;
pub const WM_IME_KEYUP : u32 = 657;
pub const WM_NCMOUSEHOVER : u32 = 672;
pub const WM_NCMOUSELEAVE : u32 = 674;
pub const WM_WTSSESSION_CHANGE : u32 = 689;
pub const WM_TABLET_FIRST : u32 = 704;
pub const WM_TABLET_LAST : u32 = 735;
pub const WM_DPICHANGED : u32 = 736;
pub const WM_DPICHANGED_BEFOREPARENT : u32 = 738;
pub const WM_DPICHANGED_AFTERPARENT : u32 = 739;
pub const WM_GETDPISCALEDSIZE : u32 = 740;
pub const WM_CUT : u32 = 768;
pub const WM_COPY : u32 = 769;
pub const WM_PASTE : u32 = 770;
pub const WM_CLEAR : u32 = 771;
pub const WM_UNDO : u32 = 772;
pub const WM_RENDERFORMAT : u32 = 773;
pub const WM_RENDERALLFORMATS : u32 = 774;
pub const WM_DESTROYCLIPBOARD : u32 = 775;
pub const WM_DRAWCLIPBOARD : u32 = 776;
pub const WM_PAINTCLIPBOARD : u32 = 777;
pub const WM_VSCROLLCLIPBOARD : u32 = 778;
pub const WM_SIZECLIPBOARD : u32 = 779;
pub const WM_ASKCBFORMATNAME : u32 = 780;
pub const WM_CHANGECBCHAIN : u32 = 781;
pub const WM_HSCROLLCLIPBOARD : u32 = 782;
pub const WM_QUERYNEWPALETTE : u32 = 783;
pub const WM_PALETTEISCHANGING : u32 = 784;
pub const WM_PALETTECHANGED : u32 = 785;
pub const WM_HOTKEY : u32 = 786;
pub const WM_PRINT : u32 = 791;
pub const WM_APPCOMMAND : u32 = 793;
pub const WM_THEMECHANGED : u32 = 794;
pub const WM_CLIPBOARDUPDATE : u32 = 797;
pub const WM_DWMCOMPOSITIONCHANGED : u32 = 798;
pub const WM_DWMNCRENDERINGCHANGED : u32 = 799;
pub const WM_DWMCOLORIZATIONCOLORCHANGED : u32 = 800;
pub const WM_DWMWINDOWMAXIMIZEDCHANGE : u32 = 801;
pub const WM_DWMSENDICONICTHUMBNAIL : u32 = 803;
pub const WM_DWMSENDICONICLIVEPREVIEWBITMAP : u32 = 806;
pub const WM_GETTITLEBARINFOEX : u32 = 831;
pub const WM_HANDHELDFIRST : u32 = 856;
pub const WM_HANDHELDLAST : u32 = 863;
pub const WM_AFXFIRST : u32 = 864;
pub const WM_AFXLAST : u32 = 895;
pub const WM_PENWINFIRST : u32 = 896;
pub const WM_PENWINLAST : u32 = 911;
pub const WM_APP : u32 = 32768;
pub const WM_USER : u32 = 1024;
pub const WMSZ_LEFT : u32 = 1;
pub const WMSZ_RIGHT : u32 = 2;
pub const WMSZ_TOP : u32 = 3;
pub const WMSZ_TOPLEFT : u32 = 4;
pub const WMSZ_TOPRIGHT : u32 = 5;
pub const WMSZ_BOTTOM : u32 = 6;
pub const WMSZ_BOTTOMLEFT : u32 = 7;
pub const WMSZ_BOTTOMRIGHT : u32 = 8;
pub const HTERROR : i32 = -2;
pub const HTTRANSPARENT : i32 = -1;
pub const HTNOWHERE : u32 = 0;
pub const HTCLIENT : u32 = 1;
pub const HTCAPTION : u32 = 2;
pub const HTSYSMENU : u32 = 3;
pub const HTGROWBOX : u32 = 4;
pub const HTMENU : u32 = 5;
pub const HTHSCROLL : u32 = 6;
pub const HTVSCROLL : u32 = 7;
pub const HTMINBUTTON : u32 = 8;
pub const HTMAXBUTTON : u32 = 9;
pub const HTLEFT : u32 = 10;
pub const HTRIGHT : u32 = 11;
pub const HTTOP : u32 = 12;
pub const HTTOPLEFT : u32 = 13;
pub const HTTOPRIGHT : u32 = 14;
pub const HTBOTTOM : u32 = 15;
pub const HTBOTTOMLEFT : u32 = 16;
pub const HTBOTTOMRIGHT : u32 = 17;
pub const HTBORDER : u32 = 18;
pub const HTOBJECT : u32 = 19;
pub const HTCLOSE : u32 = 20;
pub const HTHELP : u32 = 21;
pub const MA_ACTIVATE : u32 = 1;
pub const MA_ACTIVATEANDEAT : u32 = 2;
pub const MA_NOACTIVATE : u32 = 3;
pub const MA_NOACTIVATEANDEAT : u32 = 4;
pub const ICON_SMALL : u32 = 0;
pub const ICON_BIG : u32 = 1;
pub const ICON_SMALL2 : u32 = 2;
pub const SIZE_RESTORED : u32 = 0;
pub const SIZE_MINIMIZED : u32 = 1;
pub const SIZE_MAXIMIZED : u32 = 2;
pub const SIZE_MAXSHOW : u32 = 3;
pub const SIZE_MAXHIDE : u32 = 4;
pub const WVR_ALIGNTOP : u32 = 16;
pub const WVR_ALIGNLEFT : u32 = 32;
pub const WVR_ALIGNBOTTOM : u32 = 64;
pub const WVR_ALIGNRIGHT : u32 = 128;
pub const WVR_HREDRAW : u32 = 256;
pub const WVR_VREDRAW : u32 = 512;
pub const WVR_VALIDRECTS : u32 = 1024;
pub const MK_LBUTTON : u32 = 1;
pub const MK_RBUTTON : u32 = 2;
pub const MK_SHIFT : u32 = 4;
pub const MK_CONTROL : u32 = 8;
pub const MK_MBUTTON : u32 = 16;
pub const MK_XBUTTON1 : u32 = 32;
pub const MK_XBUTTON2 : u32 = 64;
pub const PRF_CHECKVISIBLE : i32 = 1;
pub const PRF_NONCLIENT : i32 = 2;
pub const PRF_CLIENT : i32 = 4;
pub const PRF_ERASEBKGND : i32 = 8;
pub const PRF_CHILDREN : i32 = 16;
pub const PRF_OWNED : i32 = 32;
pub const IDANI_OPEN : u32 = 1;
pub const IDANI_CAPTION : u32 = 3;
pub const ODA_DRAWENTIRE : u32 = 1;
pub const ODA_SELECT : u32 = 2;
pub const ODA_FOCUS : u32 = 4;
pub const ODS_SELECTED : u32 = 1;
pub const ODS_GRAYED : u32 = 2;
pub const ODS_DISABLED : u32 = 4;
pub const ODS_CHECKED : u32 = 8;
pub const ODS_FOCUS : u32 = 16;
pub const ODS_DEFAULT : u32 = 32;
pub const ODS_COMBOBOXEDIT : u32 = 4096;
pub const ODS_HOTLIGHT : u32 = 64;
pub const ODS_INACTIVE : u32 = 128;
pub const ODS_NOACCEL : u32 = 256;
pub const ODS_NOFOCUSRECT : u32 = 512;
pub const IDHOT_SNAPWINDOW : i32 = -1;
pub const IDHOT_SNAPDESKTOP : i32 = -2;
pub const ENDSESSION_CLOSEAPP : u32 = 1;
pub const ENDSESSION_CRITICAL : u32 = 1073741824;
pub const ENDSESSION_LOGOFF : u32 = 2147483648;
pub const EWX_FORCE : u32 = 4;
pub const EWX_FORCEIFHUNG : u32 = 16;
pub const EWX_QUICKRESOLVE : u32 = 32;
pub const EWX_BOOTOPTIONS : u32 = 16777216;
pub const EWX_ARSO : u32 = 67108864;
pub const BSM_VXDS : u32 = 1;
pub const BSM_NETDRIVER : u32 = 2;
pub const BSM_INSTALLABLEDRIVERS : u32 = 4;
pub const BROADCAST_QUERY_DENY : u32 = 1112363332;
pub const DEVICE_NOTIFY_ALL_INTERFACE_CLASSES : u32 = 4;
pub const HWND_MESSAGE : i32 = -3;
pub const ISMEX_NOSEND : u32 = 0;
pub const ISMEX_SEND : u32 = 1;
pub const ISMEX_NOTIFY : u32 = 2;
pub const ISMEX_CALLBACK : u32 = 4;
pub const ISMEX_REPLIED : u32 = 8;
pub const HWND_DESKTOP : i32 = 0;
pub const PW_RENDERFULLCONTENT : u32 = 2;
pub const HWND_TOP : i32 = 0;
pub const HWND_BOTTOM : i32 = 1;
pub const HWND_TOPMOST : i32 = -1;
pub const HWND_NOTOPMOST : i32 = -2;
pub const DLGWINDOWEXTRA : u32 = 30;
pub const POINTER_MOD_SHIFT : u32 = 4;
pub const POINTER_MOD_CTRL : u32 = 8;
pub const TOUCH_FLAG_NONE : u32 = 0;
pub const TOUCH_MASK_NONE : u32 = 0;
pub const TOUCH_MASK_CONTACTAREA : u32 = 1;
pub const TOUCH_MASK_ORIENTATION : u32 = 2;
pub const TOUCH_MASK_PRESSURE : u32 = 4;
pub const PEN_FLAG_NONE : u32 = 0;
pub const PEN_FLAG_BARREL : u32 = 1;
pub const PEN_FLAG_INVERTED : u32 = 2;
pub const PEN_FLAG_ERASER : u32 = 4;
pub const PEN_MASK_NONE : u32 = 0;
pub const PEN_MASK_PRESSURE : u32 = 1;
pub const PEN_MASK_ROTATION : u32 = 2;
pub const PEN_MASK_TILT_X : u32 = 4;
pub const PEN_MASK_TILT_Y : u32 = 8;
pub const POINTER_MESSAGE_FLAG_NEW : u32 = 1;
pub const POINTER_MESSAGE_FLAG_INRANGE : u32 = 2;
pub const POINTER_MESSAGE_FLAG_INCONTACT : u32 = 4;
pub const POINTER_MESSAGE_FLAG_FIRSTBUTTON : u32 = 16;
pub const POINTER_MESSAGE_FLAG_SECONDBUTTON : u32 = 32;
pub const POINTER_MESSAGE_FLAG_THIRDBUTTON : u32 = 64;
pub const POINTER_MESSAGE_FLAG_FOURTHBUTTON : u32 = 128;
pub const POINTER_MESSAGE_FLAG_FIFTHBUTTON : u32 = 256;
pub const POINTER_MESSAGE_FLAG_PRIMARY : u32 = 8192;
pub const POINTER_MESSAGE_FLAG_CONFIDENCE : u32 = 16384;
pub const POINTER_MESSAGE_FLAG_CANCELED : u32 = 32768;
pub const MAX_TOUCH_COUNT : u32 = 256;
pub const TOUCH_HIT_TESTING_DEFAULT : u32 = 0;
pub const TOUCH_HIT_TESTING_CLIENT : u32 = 1;
pub const TOUCH_HIT_TESTING_NONE : u32 = 2;
pub const TOUCH_HIT_TESTING_PROXIMITY_CLOSEST : u32 = 0;
pub const TOUCH_HIT_TESTING_PROXIMITY_FARTHEST : u32 = 4095;
pub const GWFS_INCLUDE_ANCESTORS : u32 = 1;
pub const MAPVK_VK_TO_VSC : u32 = 0;
pub const MAPVK_VSC_TO_VK : u32 = 1;
pub const MAPVK_VK_TO_CHAR : u32 = 2;
pub const MAPVK_VSC_TO_VK_EX : u32 = 3;
pub const MAPVK_VK_TO_VSC_EX : u32 = 4;
pub const QS_TOUCH : u32 = 2048;
pub const QS_POINTER : u32 = 4096;
pub const USER_TIMER_MAXIMUM : u32 = 2147483647;
pub const USER_TIMER_MINIMUM : u32 = 10;
pub const TIMERV_COALESCING_MIN : u32 = 1;
pub const TIMERV_COALESCING_MAX : u32 = 2147483637;
pub const SM_RESERVED1 : u32 = 24;
pub const SM_RESERVED2 : u32 = 25;
pub const SM_RESERVED3 : u32 = 26;
pub const SM_RESERVED4 : u32 = 27;
pub const SM_CMETRICS : u32 = 76;
pub const SM_CARETBLINKINGENABLED : u32 = 8194;
pub const SM_SYSTEMDOCKED : u32 = 8196;
pub const PMB_ACTIVE : u32 = 1;
pub const MNC_IGNORE : u32 = 0;
pub const MNC_CLOSE : u32 = 1;
pub const MNC_EXECUTE : u32 = 2;
pub const MNC_SELECT : u32 = 3;
pub const MND_CONTINUE : u32 = 0;
pub const MND_ENDMENU : u32 = 1;
pub const MNGO_NOINTERFACE : u32 = 0;
pub const MNGO_NOERROR : u32 = 1;
pub const DOF_EXECUTABLE : u32 = 32769;
pub const DOF_DOCUMENT : u32 = 32770;
pub const DOF_DIRECTORY : u32 = 32771;
pub const DOF_MULTIPLE : u32 = 32772;
pub const DOF_PROGMAN : u32 = 1;
pub const DOF_SHELLDATA : u32 = 2;
pub const DO_DROPFILE : i32 = 1162627398;
pub const DO_PRINTFILE : i32 = 1414419024;
pub const DCX_EXCLUDEUPDATE : i32 = 256;
pub const HELPINFO_WINDOW : u32 = 1;
pub const HELPINFO_MENUITEM : u32 = 2;
pub const CTLCOLOR_MSGBOX : u32 = 0;
pub const CTLCOLOR_EDIT : u32 = 1;
pub const CTLCOLOR_LISTBOX : u32 = 2;
pub const CTLCOLOR_BTN : u32 = 3;
pub const CTLCOLOR_DLG : u32 = 4;
pub const CTLCOLOR_SCROLLBAR : u32 = 5;
pub const CTLCOLOR_STATIC : u32 = 6;
pub const CTLCOLOR_MAX : u32 = 7;
pub const COLOR_BTNHIGHLIGHT : u32 = 20;
pub const GW_MAX : u32 = 5;
pub const MFS_GRAYED : i32 = 3;
pub const SC_SIZE : u32 = 61440;
pub const SC_MOVE : u32 = 61456;
pub const SC_MINIMIZE : u32 = 61472;
pub const SC_MAXIMIZE : u32 = 61488;
pub const SC_NEXTWINDOW : u32 = 61504;
pub const SC_PREVWINDOW : u32 = 61520;
pub const SC_CLOSE : u32 = 61536;
pub const SC_VSCROLL : u32 = 61552;
pub const SC_HSCROLL : u32 = 61568;
pub const SC_MOUSEMENU : u32 = 61584;
pub const SC_KEYMENU : u32 = 61696;
pub const SC_ARRANGE : u32 = 61712;
pub const SC_RESTORE : u32 = 61728;
pub const SC_TASKLIST : u32 = 61744;
pub const SC_SCREENSAVE : u32 = 61760;
pub const SC_HOTKEY : u32 = 61776;
pub const SC_DEFAULT : u32 = 61792;
pub const SC_MONITORPOWER : u32 = 61808;
pub const SC_CONTEXTHELP : u32 = 61824;
pub const SC_SEPARATOR : u32 = 61455;
pub const SCF_ISSECURE : u32 = 1;
pub const IDC_ARROW : i32 = 32512;
pub const IDC_IBEAM : i32 = 32513;
pub const IDC_WAIT : i32 = 32514;
pub const IDC_CROSS : i32 = 32515;
pub const IDC_UPARROW : i32 = 32516;
pub const IDC_SIZE : i32 = 32640;
pub const IDC_ICON : i32 = 32641;
pub const IDC_SIZENWSE : i32 = 32642;
pub const IDC_SIZENESW : i32 = 32643;
pub const IDC_SIZEWE : i32 = 32644;
pub const IDC_SIZENS : i32 = 32645;
pub const IDC_SIZEALL : i32 = 32646;
pub const IDC_NO : i32 = 32648;
pub const IDC_HAND : i32 = 32649;
pub const IDC_APPSTARTING : i32 = 32650;
pub const IDC_HELP : i32 = 32651;
pub const IDC_PIN : i32 = 32671;
pub const IDC_PERSON : i32 = 32672;
pub const IMAGE_ENHMETAFILE : u32 = 3;
pub const LR_COLOR : u32 = 2;
pub const RES_ICON : u32 = 1;
pub const RES_CURSOR : u32 = 2;
pub const OBM_CLOSE : u32 = 32754;
pub const OBM_UPARROW : u32 = 32753;
pub const OBM_DNARROW : u32 = 32752;
pub const OBM_RGARROW : u32 = 32751;
pub const OBM_LFARROW : u32 = 32750;
pub const OBM_REDUCE : u32 = 32749;
pub const OBM_ZOOM : u32 = 32748;
pub const OBM_RESTORE : u32 = 32747;
pub const OBM_REDUCED : u32 = 32746;
pub const OBM_ZOOMD : u32 = 32745;
pub const OBM_RESTORED : u32 = 32744;
pub const OBM_UPARROWD : u32 = 32743;
pub const OBM_DNARROWD : u32 = 32742;
pub const OBM_RGARROWD : u32 = 32741;
pub const OBM_LFARROWD : u32 = 32740;
pub const OBM_MNARROW : u32 = 32739;
pub const OBM_COMBO : u32 = 32738;
pub const OBM_UPARROWI : u32 = 32737;
pub const OBM_DNARROWI : u32 = 32736;
pub const OBM_RGARROWI : u32 = 32735;
pub const OBM_LFARROWI : u32 = 32734;
pub const OBM_OLD_CLOSE : u32 = 32767;
pub const OBM_SIZE : u32 = 32766;
pub const OBM_OLD_UPARROW : u32 = 32765;
pub const OBM_OLD_DNARROW : u32 = 32764;
pub const OBM_OLD_RGARROW : u32 = 32763;
pub const OBM_OLD_LFARROW : u32 = 32762;
pub const OBM_BTSIZE : u32 = 32761;
pub const OBM_CHECK : u32 = 32760;
pub const OBM_CHECKBOXES : u32 = 32759;
pub const OBM_BTNCORNERS : u32 = 32758;
pub const OBM_OLD_REDUCE : u32 = 32757;
pub const OBM_OLD_ZOOM : u32 = 32756;
pub const OBM_OLD_RESTORE : u32 = 32755;
pub const OCR_SIZE : u32 = 32640;
pub const OCR_ICON : u32 = 32641;
pub const OCR_ICOCUR : u32 = 32647;
pub const OIC_SAMPLE : u32 = 32512;
pub const OIC_HAND : u32 = 32513;
pub const OIC_QUES : u32 = 32514;
pub const OIC_BANG : u32 = 32515;
pub const OIC_NOTE : u32 = 32516;
pub const OIC_WINLOGO : u32 = 32517;
pub const OIC_SHIELD : u32 = 32518;
pub const ORD_LANGDRIVER : u32 = 1;
pub const IDI_APPLICATION : i32 = 32512;
pub const IDI_HAND : i32 = 32513;
pub const IDI_QUESTION : i32 = 32514;
pub const IDI_EXCLAMATION : i32 = 32515;
pub const IDI_ASTERISK : i32 = 32516;
pub const IDI_WINLOGO : i32 = 32517;
pub const IDI_SHIELD : i32 = 32518;
pub const IDOK : u32 = 1;
pub const IDCANCEL : u32 = 2;
pub const IDABORT : u32 = 3;
pub const IDRETRY : u32 = 4;
pub const IDIGNORE : u32 = 5;
pub const IDYES : u32 = 6;
pub const IDNO : u32 = 7;
pub const IDCLOSE : u32 = 8;
pub const IDHELP : u32 = 9;
pub const IDTRYAGAIN : u32 = 10;
pub const IDCONTINUE : u32 = 11;
pub const IDTIMEOUT : u32 = 32000;
pub const EN_SETFOCUS : u32 = 256;
pub const EN_KILLFOCUS : u32 = 512;
pub const EN_CHANGE : u32 = 768;
pub const EN_UPDATE : u32 = 1024;
pub const EN_ERRSPACE : u32 = 1280;
pub const EN_MAXTEXT : u32 = 1281;
pub const EN_HSCROLL : u32 = 1537;
pub const EN_VSCROLL : u32 = 1538;
pub const EN_ALIGN_LTR_EC : u32 = 1792;
pub const EN_ALIGN_RTL_EC : u32 = 1793;
pub const EN_BEFORE_PASTE : u32 = 2048;
pub const EN_AFTER_PASTE : u32 = 2049;
pub const EC_LEFTMARGIN : u32 = 1;
pub const EC_RIGHTMARGIN : u32 = 2;
pub const EC_USEFONTINFO : u32 = 65535;
pub const EMSIS_COMPOSITIONSTRING : u32 = 1;
pub const EIMES_GETCOMPSTRATONCE : u32 = 1;
pub const EIMES_CANCELCOMPSTRINFOCUS : u32 = 2;
pub const EIMES_COMPLETECOMPSTRKILLFOCUS : u32 = 4;
pub const EM_GETSEL : u32 = 176;
pub const EM_SETSEL : u32 = 177;
pub const EM_GETRECT : u32 = 178;
pub const EM_SETRECT : u32 = 179;
pub const EM_SETRECTNP : u32 = 180;
pub const EM_SCROLL : u32 = 181;
pub const EM_LINESCROLL : u32 = 182;
pub const EM_SCROLLCARET : u32 = 183;
pub const EM_GETMODIFY : u32 = 184;
pub const EM_SETMODIFY : u32 = 185;
pub const EM_GETLINECOUNT : u32 = 186;
pub const EM_LINEINDEX : u32 = 187;
pub const EM_SETHANDLE : u32 = 188;
pub const EM_GETHANDLE : u32 = 189;
pub const EM_GETTHUMB : u32 = 190;
pub const EM_LINELENGTH : u32 = 193;
pub const EM_REPLACESEL : u32 = 194;
pub const EM_GETLINE : u32 = 196;
pub const EM_LIMITTEXT : u32 = 197;
pub const EM_CANUNDO : u32 = 198;
pub const EM_UNDO : u32 = 199;
pub const EM_FMTLINES : u32 = 200;
pub const EM_LINEFROMCHAR : u32 = 201;
pub const EM_SETTABSTOPS : u32 = 203;
pub const EM_SETPASSWORDCHAR : u32 = 204;
pub const EM_EMPTYUNDOBUFFER : u32 = 205;
pub const EM_GETFIRSTVISIBLELINE : u32 = 206;
pub const EM_SETREADONLY : u32 = 207;
pub const EM_SETWORDBREAKPROC : u32 = 208;
pub const EM_GETWORDBREAKPROC : u32 = 209;
pub const EM_GETPASSWORDCHAR : u32 = 210;
pub const EM_SETMARGINS : u32 = 211;
pub const EM_GETMARGINS : u32 = 212;
pub const EM_GETLIMITTEXT : u32 = 213;
pub const EM_POSFROMCHAR : u32 = 214;
pub const EM_CHARFROMPOS : u32 = 215;
pub const EM_SETIMESTATUS : u32 = 216;
pub const EM_GETIMESTATUS : u32 = 217;
pub const EM_ENABLEFEATURE : u32 = 218;
pub const BN_CLICKED : u32 = 0;
pub const BN_PAINT : u32 = 1;
pub const BN_HILITE : u32 = 2;
pub const BN_UNHILITE : u32 = 3;
pub const BN_DISABLE : u32 = 4;
pub const BN_DOUBLECLICKED : u32 = 5;
pub const BN_SETFOCUS : u32 = 6;
pub const BN_KILLFOCUS : u32 = 7;
pub const BM_GETCHECK : u32 = 240;
pub const BM_SETCHECK : u32 = 241;
pub const BM_GETSTATE : u32 = 242;
pub const BM_SETSTATE : u32 = 243;
pub const BM_SETSTYLE : u32 = 244;
pub const BM_CLICK : u32 = 245;
pub const BM_GETIMAGE : u32 = 246;
pub const BM_SETIMAGE : u32 = 247;
pub const BM_SETDONTCLICK : u32 = 248;
pub const BST_PUSHED : u32 = 4;
pub const BST_FOCUS : u32 = 8;
pub const STM_SETICON : u32 = 368;
pub const STM_GETICON : u32 = 369;
pub const STM_SETIMAGE : u32 = 370;
pub const STM_GETIMAGE : u32 = 371;
pub const STN_CLICKED : u32 = 0;
pub const STN_DBLCLK : u32 = 1;
pub const STN_ENABLE : u32 = 2;
pub const STN_DISABLE : u32 = 3;
pub const STM_MSGMAX : u32 = 372;
pub const DWL_MSGRESULT : u32 = 0;
pub const DWL_DLGPROC : u32 = 4;
pub const DWL_USER : u32 = 8;
pub const DWLP_MSGRESULT : u32 = 0;
pub const DC_HASDEFID : u32 = 21323;
pub const DLGC_WANTARROWS : u32 = 1;
pub const DLGC_WANTTAB : u32 = 2;
pub const DLGC_WANTALLKEYS : u32 = 4;
pub const DLGC_WANTMESSAGE : u32 = 4;
pub const DLGC_HASSETSEL : u32 = 8;
pub const DLGC_DEFPUSHBUTTON : u32 = 16;
pub const DLGC_UNDEFPUSHBUTTON : u32 = 32;
pub const DLGC_RADIOBUTTON : u32 = 64;
pub const DLGC_WANTCHARS : u32 = 128;
pub const DLGC_STATIC : u32 = 256;
pub const DLGC_BUTTON : u32 = 8192;
pub const LB_CTLCODE : i32 = 0;
pub const LB_OKAY : u32 = 0;
pub const LB_ERR : i32 = -1;
pub const LB_ERRSPACE : i32 = -2;
pub const LBN_ERRSPACE : i32 = -2;
pub const LBN_SELCHANGE : u32 = 1;
pub const LBN_DBLCLK : u32 = 2;
pub const LBN_SELCANCEL : u32 = 3;
pub const LBN_SETFOCUS : u32 = 4;
pub const LBN_KILLFOCUS : u32 = 5;
pub const LB_ADDSTRING : u32 = 384;
pub const LB_INSERTSTRING : u32 = 385;
pub const LB_DELETESTRING : u32 = 386;
pub const LB_SELITEMRANGEEX : u32 = 387;
pub const LB_RESETCONTENT : u32 = 388;
pub const LB_SETSEL : u32 = 389;
pub const LB_SETCURSEL : u32 = 390;
pub const LB_GETSEL : u32 = 391;
pub const LB_GETCURSEL : u32 = 392;
pub const LB_GETTEXT : u32 = 393;
pub const LB_GETTEXTLEN : u32 = 394;
pub const LB_GETCOUNT : u32 = 395;
pub const LB_SELECTSTRING : u32 = 396;
pub const LB_DIR : u32 = 397;
pub const LB_GETTOPINDEX : u32 = 398;
pub const LB_FINDSTRING : u32 = 399;
pub const LB_GETSELCOUNT : u32 = 400;
pub const LB_GETSELITEMS : u32 = 401;
pub const LB_SETTABSTOPS : u32 = 402;
pub const LB_GETHORIZONTALEXTENT : u32 = 403;
pub const LB_SETHORIZONTALEXTENT : u32 = 404;
pub const LB_SETCOLUMNWIDTH : u32 = 405;
pub const LB_ADDFILE : u32 = 406;
pub const LB_SETTOPINDEX : u32 = 407;
pub const LB_GETITEMRECT : u32 = 408;
pub const LB_GETITEMDATA : u32 = 409;
pub const LB_SETITEMDATA : u32 = 410;
pub const LB_SELITEMRANGE : u32 = 411;
pub const LB_SETANCHORINDEX : u32 = 412;
pub const LB_GETANCHORINDEX : u32 = 413;
pub const LB_SETCARETINDEX : u32 = 414;
pub const LB_GETCARETINDEX : u32 = 415;
pub const LB_SETITEMHEIGHT : u32 = 416;
pub const LB_GETITEMHEIGHT : u32 = 417;
pub const LB_FINDSTRINGEXACT : u32 = 418;
pub const LB_SETLOCALE : u32 = 421;
pub const LB_GETLOCALE : u32 = 422;
pub const LB_SETCOUNT : u32 = 423;
pub const LB_INITSTORAGE : u32 = 424;
pub const LB_ITEMFROMPOINT : u32 = 425;
pub const LB_MULTIPLEADDSTRING : u32 = 433;
pub const LB_GETLISTBOXINFO : u32 = 434;
pub const LB_MSGMAX : u32 = 435;
pub const CB_OKAY : u32 = 0;
pub const CB_ERR : i32 = -1;
pub const CB_ERRSPACE : i32 = -2;
pub const CBN_ERRSPACE : i32 = -1;
pub const CBN_SELCHANGE : u32 = 1;
pub const CBN_DBLCLK : u32 = 2;
pub const CBN_SETFOCUS : u32 = 3;
pub const CBN_KILLFOCUS : u32 = 4;
pub const CBN_EDITCHANGE : u32 = 5;
pub const CBN_EDITUPDATE : u32 = 6;
pub const CBN_DROPDOWN : u32 = 7;
pub const CBN_CLOSEUP : u32 = 8;
pub const CBN_SELENDOK : u32 = 9;
pub const CBN_SELENDCANCEL : u32 = 10;
pub const CB_GETEDITSEL : u32 = 320;
pub const CB_LIMITTEXT : u32 = 321;
pub const CB_SETEDITSEL : u32 = 322;
pub const CB_ADDSTRING : u32 = 323;
pub const CB_DELETESTRING : u32 = 324;
pub const CB_DIR : u32 = 325;
pub const CB_GETCOUNT : u32 = 326;
pub const CB_GETCURSEL : u32 = 327;
pub const CB_GETLBTEXT : u32 = 328;
pub const CB_GETLBTEXTLEN : u32 = 329;
pub const CB_INSERTSTRING : u32 = 330;
pub const CB_RESETCONTENT : u32 = 331;
pub const CB_FINDSTRING : u32 = 332;
pub const CB_SELECTSTRING : u32 = 333;
pub const CB_SETCURSEL : u32 = 334;
pub const CB_SHOWDROPDOWN : u32 = 335;
pub const CB_GETITEMDATA : u32 = 336;
pub const CB_SETITEMDATA : u32 = 337;
pub const CB_GETDROPPEDCONTROLRECT : u32 = 338;
pub const CB_SETITEMHEIGHT : u32 = 339;
pub const CB_GETITEMHEIGHT : u32 = 340;
pub const CB_SETEXTENDEDUI : u32 = 341;
pub const CB_GETEXTENDEDUI : u32 = 342;
pub const CB_GETDROPPEDSTATE : u32 = 343;
pub const CB_FINDSTRINGEXACT : u32 = 344;
pub const CB_SETLOCALE : u32 = 345;
pub const CB_GETLOCALE : u32 = 346;
pub const CB_GETTOPINDEX : u32 = 347;
pub const CB_SETTOPINDEX : u32 = 348;
pub const CB_GETHORIZONTALEXTENT : u32 = 349;
pub const CB_SETHORIZONTALEXTENT : u32 = 350;
pub const CB_GETDROPPEDWIDTH : u32 = 351;
pub const CB_SETDROPPEDWIDTH : u32 = 352;
pub const CB_INITSTORAGE : u32 = 353;
pub const CB_MULTIPLEADDSTRING : u32 = 355;
pub const CB_GETCOMBOBOXINFO : u32 = 356;
pub const CB_MSGMAX : u32 = 357;
pub const SBM_SETPOS : u32 = 224;
pub const SBM_GETPOS : u32 = 225;
pub const SBM_SETRANGE : u32 = 226;
pub const SBM_SETRANGEREDRAW : u32 = 230;
pub const SBM_GETRANGE : u32 = 227;
pub const SBM_ENABLE_ARROWS : u32 = 228;
pub const SBM_SETSCROLLINFO : u32 = 233;
pub const SBM_GETSCROLLINFO : u32 = 234;
pub const SBM_GETSCROLLBARINFO : u32 = 235;
pub const MDIS_ALLCHILDSTYLES : u32 = 1;
pub const HELP_CONTEXT : i32 = 1;
pub const HELP_QUIT : i32 = 2;
pub const HELP_INDEX : i32 = 3;
pub const HELP_CONTENTS : i32 = 3;
pub const HELP_HELPONHELP : i32 = 4;
pub const HELP_SETINDEX : i32 = 5;
pub const HELP_SETCONTENTS : i32 = 5;
pub const HELP_CONTEXTPOPUP : i32 = 8;
pub const HELP_FORCEFILE : i32 = 9;
pub const HELP_KEY : i32 = 257;
pub const HELP_COMMAND : i32 = 258;
pub const HELP_PARTIALKEY : i32 = 261;
pub const HELP_MULTIKEY : i32 = 513;
pub const HELP_SETWINPOS : i32 = 515;
pub const HELP_CONTEXTMENU : u32 = 10;
pub const HELP_FINDER : u32 = 11;
pub const HELP_WM_HELP : u32 = 12;
pub const HELP_SETPOPUP_POS : u32 = 13;
pub const HELP_TCARD : u32 = 32768;
pub const HELP_TCARD_DATA : u32 = 16;
pub const HELP_TCARD_OTHER_CALLER : u32 = 17;
pub const IDH_NO_HELP : u32 = 28440;
pub const IDH_MISSING_CONTEXT : u32 = 28441;
pub const IDH_GENERIC_HELP_BUTTON : u32 = 28442;
pub const IDH_OK : u32 = 28443;
pub const IDH_CANCEL : u32 = 28444;
pub const IDH_HELP : u32 = 28445;
pub const MAX_TOUCH_PREDICTION_FILTER_TAPS : u32 = 3;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_LATENCY : u32 = 8;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_SAMPLETIME : u32 = 8;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_USE_HW_TIMESTAMP : u32 = 1;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_DELTA : f32 = 1.0e-03;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MIN : f32 = 9.0e-01;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MAX : f32 = 9.99e-01;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_LEARNING_RATE : f32 = 1.0e-03;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_EXPO_SMOOTH_ALPHA : f32 = 9.9e-01;
pub const MAX_LOGICALDPIOVERRIDE : u32 = 2;
pub const MIN_LOGICALDPIOVERRIDE : i32 = -2;
pub const FE_FONTSMOOTHINGSTANDARD : u32 = 1;
pub const FE_FONTSMOOTHINGCLEARTYPE : u32 = 2;
pub const FE_FONTSMOOTHINGORIENTATIONBGR : u32 = 0;
pub const FE_FONTSMOOTHINGORIENTATIONRGB : u32 = 1;
pub const CONTACTVISUALIZATION_OFF : u32 = 0;
pub const CONTACTVISUALIZATION_ON : u32 = 1;
pub const CONTACTVISUALIZATION_PRESENTATIONMODE : u32 = 2;
pub const GESTUREVISUALIZATION_OFF : u32 = 0;
pub const GESTUREVISUALIZATION_ON : u32 = 31;
pub const GESTUREVISUALIZATION_TAP : u32 = 1;
pub const GESTUREVISUALIZATION_DOUBLETAP : u32 = 2;
pub const GESTUREVISUALIZATION_PRESSANDTAP : u32 = 4;
pub const GESTUREVISUALIZATION_PRESSANDHOLD : u32 = 8;
pub const GESTUREVISUALIZATION_RIGHTTAP : u32 = 16;
pub const MOUSEWHEEL_ROUTING_FOCUS : u32 = 0;
pub const MOUSEWHEEL_ROUTING_HYBRID : u32 = 1;
pub const MOUSEWHEEL_ROUTING_MOUSE_POS : u32 = 2;
pub const PENVISUALIZATION_ON : u32 = 35;
pub const PENVISUALIZATION_OFF : u32 = 0;
pub const PENVISUALIZATION_TAP : u32 = 1;
pub const PENVISUALIZATION_DOUBLETAP : u32 = 2;
pub const PENVISUALIZATION_CURSOR : u32 = 32;
pub const PENARBITRATIONTYPE_NONE : u32 = 0;
pub const PENARBITRATIONTYPE_WIN8 : u32 = 1;
pub const PENARBITRATIONTYPE_FIS : u32 = 2;
pub const PENARBITRATIONTYPE_SPT : u32 = 3;
pub const PENARBITRATIONTYPE_MAX : u32 = 4;
pub const METRICS_USEDEFAULT : i32 = -1;
pub const ARW_STARTMASK : i32 = 3;
pub const ARW_STARTRIGHT : i32 = 1;
pub const ARW_STARTTOP : i32 = 2;
pub const ARW_LEFT : i32 = 0;
pub const ARW_RIGHT : i32 = 0;
pub const ARW_UP : i32 = 4;
pub const ARW_DOWN : i32 = 4;
pub const ARW_HIDE : i32 = 8;
pub const HCF_LOGONDESKTOP : u32 = 256;
pub const HCF_DEFAULTDESKTOP : u32 = 512;
pub const EDS_RAWMODE : u32 = 2;
pub const EDS_ROTATEDMODE : u32 = 4;
pub const EDD_GET_DEVICE_INTERFACE_NAME : u32 = 1;
pub const FKF_FILTERKEYSON : u32 = 1;
pub const FKF_AVAILABLE : u32 = 2;
pub const FKF_HOTKEYACTIVE : u32 = 4;
pub const FKF_CONFIRMHOTKEY : u32 = 8;
pub const FKF_HOTKEYSOUND : u32 = 16;
pub const FKF_INDICATOR : u32 = 32;
pub const FKF_CLICKON : u32 = 64;
pub const MKF_MOUSEKEYSON : u32 = 1;
pub const MKF_AVAILABLE : u32 = 2;
pub const MKF_HOTKEYACTIVE : u32 = 4;
pub const MKF_CONFIRMHOTKEY : u32 = 8;
pub const MKF_HOTKEYSOUND : u32 = 16;
pub const MKF_INDICATOR : u32 = 32;
pub const MKF_MODIFIERS : u32 = 64;
pub const MKF_REPLACENUMBERS : u32 = 128;
pub const MKF_LEFTBUTTONSEL : u32 = 268435456;
pub const MKF_RIGHTBUTTONSEL : u32 = 536870912;
pub const MKF_LEFTBUTTONDOWN : u32 = 16777216;
pub const MKF_RIGHTBUTTONDOWN : u32 = 33554432;
pub const MKF_MOUSEMODE : u32 = 2147483648;
pub const TKF_TOGGLEKEYSON : u32 = 1;
pub const TKF_AVAILABLE : u32 = 2;
pub const TKF_HOTKEYACTIVE : u32 = 4;
pub const TKF_CONFIRMHOTKEY : u32 = 8;
pub const TKF_HOTKEYSOUND : u32 = 16;
pub const TKF_INDICATOR : u32 = 32;
pub const MONITORINFOF_PRIMARY : u32 = 1;
pub const WINEVENT_OUTOFCONTEXT : u32 = 0;
pub const WINEVENT_SKIPOWNTHREAD : u32 = 1;
pub const WINEVENT_SKIPOWNPROCESS : u32 = 2;
pub const WINEVENT_INCONTEXT : u32 = 4;
pub const CHILDID_SELF : u32 = 0;
pub const INDEXID_OBJECT : u32 = 0;
pub const INDEXID_CONTAINER : u32 = 0;
pub const EVENT_MIN : u32 = 1;
pub const EVENT_MAX : u32 = 2147483647;
pub const EVENT_SYSTEM_SOUND : u32 = 1;
pub const EVENT_SYSTEM_ALERT : u32 = 2;
pub const EVENT_SYSTEM_FOREGROUND : u32 = 3;
pub const EVENT_SYSTEM_MENUSTART : u32 = 4;
pub const EVENT_SYSTEM_MENUEND : u32 = 5;
pub const EVENT_SYSTEM_MENUPOPUPSTART : u32 = 6;
pub const EVENT_SYSTEM_MENUPOPUPEND : u32 = 7;
pub const EVENT_SYSTEM_CAPTURESTART : u32 = 8;
pub const EVENT_SYSTEM_CAPTUREEND : u32 = 9;
pub const EVENT_SYSTEM_MOVESIZESTART : u32 = 10;
pub const EVENT_SYSTEM_MOVESIZEEND : u32 = 11;
pub const EVENT_SYSTEM_CONTEXTHELPSTART : u32 = 12;
pub const EVENT_SYSTEM_CONTEXTHELPEND : u32 = 13;
pub const EVENT_SYSTEM_DRAGDROPSTART : u32 = 14;
pub const EVENT_SYSTEM_DRAGDROPEND : u32 = 15;
pub const EVENT_SYSTEM_DIALOGSTART : u32 = 16;
pub const EVENT_SYSTEM_DIALOGEND : u32 = 17;
pub const EVENT_SYSTEM_SCROLLINGSTART : u32 = 18;
pub const EVENT_SYSTEM_SCROLLINGEND : u32 = 19;
pub const EVENT_SYSTEM_SWITCHSTART : u32 = 20;
pub const EVENT_SYSTEM_SWITCHEND : u32 = 21;
pub const EVENT_SYSTEM_MINIMIZESTART : u32 = 22;
pub const EVENT_SYSTEM_MINIMIZEEND : u32 = 23;
pub const EVENT_SYSTEM_DESKTOPSWITCH : u32 = 32;
pub const EVENT_SYSTEM_SWITCHER_APPGRABBED : u32 = 36;
pub const EVENT_SYSTEM_SWITCHER_APPOVERTARGET : u32 = 37;
pub const EVENT_SYSTEM_SWITCHER_APPDROPPED : u32 = 38;
pub const EVENT_SYSTEM_SWITCHER_CANCELLED : u32 = 39;
pub const EVENT_SYSTEM_IME_KEY_NOTIFICATION : u32 = 41;
pub const EVENT_SYSTEM_END : u32 = 255;
pub const EVENT_OEM_DEFINED_START : u32 = 257;
pub const EVENT_OEM_DEFINED_END : u32 = 511;
pub const EVENT_UIA_EVENTID_START : u32 = 19968;
pub const EVENT_UIA_EVENTID_END : u32 = 20223;
pub const EVENT_UIA_PROPID_START : u32 = 29952;
pub const EVENT_UIA_PROPID_END : u32 = 30207;
pub const EVENT_CONSOLE_CARET : u32 = 16385;
pub const EVENT_CONSOLE_UPDATE_REGION : u32 = 16386;
pub const EVENT_CONSOLE_UPDATE_SIMPLE : u32 = 16387;
pub const EVENT_CONSOLE_UPDATE_SCROLL : u32 = 16388;
pub const EVENT_CONSOLE_LAYOUT : u32 = 16389;
pub const EVENT_CONSOLE_START_APPLICATION : u32 = 16390;
pub const EVENT_CONSOLE_END_APPLICATION : u32 = 16391;
pub const CONSOLE_APPLICATION_16BIT : u32 = 0;
pub const CONSOLE_CARET_SELECTION : u32 = 1;
pub const CONSOLE_CARET_VISIBLE : u32 = 2;
pub const EVENT_CONSOLE_END : u32 = 16639;
pub const EVENT_OBJECT_CREATE : u32 = 32768;
pub const EVENT_OBJECT_DESTROY : u32 = 32769;
pub const EVENT_OBJECT_SHOW : u32 = 32770;
pub const EVENT_OBJECT_HIDE : u32 = 32771;
pub const EVENT_OBJECT_REORDER : u32 = 32772;
pub const EVENT_OBJECT_FOCUS : u32 = 32773;
pub const EVENT_OBJECT_SELECTION : u32 = 32774;
pub const EVENT_OBJECT_SELECTIONADD : u32 = 32775;
pub const EVENT_OBJECT_SELECTIONREMOVE : u32 = 32776;
pub const EVENT_OBJECT_SELECTIONWITHIN : u32 = 32777;
pub const EVENT_OBJECT_STATECHANGE : u32 = 32778;
pub const EVENT_OBJECT_LOCATIONCHANGE : u32 = 32779;
pub const EVENT_OBJECT_NAMECHANGE : u32 = 32780;
pub const EVENT_OBJECT_DESCRIPTIONCHANGE : u32 = 32781;
pub const EVENT_OBJECT_VALUECHANGE : u32 = 32782;
pub const EVENT_OBJECT_PARENTCHANGE : u32 = 32783;
pub const EVENT_OBJECT_HELPCHANGE : u32 = 32784;
pub const EVENT_OBJECT_DEFACTIONCHANGE : u32 = 32785;
pub const EVENT_OBJECT_ACCELERATORCHANGE : u32 = 32786;
pub const EVENT_OBJECT_INVOKED : u32 = 32787;
pub const EVENT_OBJECT_TEXTSELECTIONCHANGED : u32 = 32788;
pub const EVENT_OBJECT_CONTENTSCROLLED : u32 = 32789;
pub const EVENT_SYSTEM_ARRANGMENTPREVIEW : u32 = 32790;
pub const EVENT_OBJECT_CLOAKED : u32 = 32791;
pub const EVENT_OBJECT_UNCLOAKED : u32 = 32792;
pub const EVENT_OBJECT_LIVEREGIONCHANGED : u32 = 32793;
pub const EVENT_OBJECT_HOSTEDOBJECTSINVALIDATED : u32 = 32800;
pub const EVENT_OBJECT_DRAGSTART : u32 = 32801;
pub const EVENT_OBJECT_DRAGCANCEL : u32 = 32802;
pub const EVENT_OBJECT_DRAGCOMPLETE : u32 = 32803;
pub const EVENT_OBJECT_DRAGENTER : u32 = 32804;
pub const EVENT_OBJECT_DRAGLEAVE : u32 = 32805;
pub const EVENT_OBJECT_DRAGDROPPED : u32 = 32806;
pub const EVENT_OBJECT_IME_SHOW : u32 = 32807;
pub const EVENT_OBJECT_IME_HIDE : u32 = 32808;
pub const EVENT_OBJECT_IME_CHANGE : u32 = 32809;
pub const EVENT_OBJECT_TEXTEDIT_CONVERSIONTARGETCHANGED : u32 = 32816;
pub const EVENT_OBJECT_END : u32 = 33023;
pub const EVENT_AIA_START : u32 = 40960;
pub const EVENT_AIA_END : u32 = 45055;
pub const SOUND_SYSTEM_STARTUP : u32 = 1;
pub const SOUND_SYSTEM_SHUTDOWN : u32 = 2;
pub const SOUND_SYSTEM_BEEP : u32 = 3;
pub const SOUND_SYSTEM_ERROR : u32 = 4;
pub const SOUND_SYSTEM_QUESTION : u32 = 5;
pub const SOUND_SYSTEM_WARNING : u32 = 6;
pub const SOUND_SYSTEM_INFORMATION : u32 = 7;
pub const SOUND_SYSTEM_MAXIMIZE : u32 = 8;
pub const SOUND_SYSTEM_MINIMIZE : u32 = 9;
pub const SOUND_SYSTEM_RESTOREUP : u32 = 10;
pub const SOUND_SYSTEM_RESTOREDOWN : u32 = 11;
pub const SOUND_SYSTEM_APPSTART : u32 = 12;
pub const SOUND_SYSTEM_FAULT : u32 = 13;
pub const SOUND_SYSTEM_APPEND : u32 = 14;
pub const SOUND_SYSTEM_MENUCOMMAND : u32 = 15;
pub const SOUND_SYSTEM_MENUPOPUP : u32 = 16;
pub const CSOUND_SYSTEM : u32 = 16;
pub const CALERT_SYSTEM : u32 = 6;
pub const GUI_16BITTASK : u32 = 0;
pub const USER_DEFAULT_SCREEN_DPI : u32 = 96;
pub const STATE_SYSTEM_SELECTED : u32 = 2;
pub const STATE_SYSTEM_FOCUSED : u32 = 4;
pub const STATE_SYSTEM_CHECKED : u32 = 16;
pub const STATE_SYSTEM_MIXED : u32 = 32;
pub const STATE_SYSTEM_READONLY : u32 = 64;
pub const STATE_SYSTEM_HOTTRACKED : u32 = 128;
pub const STATE_SYSTEM_DEFAULT : u32 = 256;
pub const STATE_SYSTEM_EXPANDED : u32 = 512;
pub const STATE_SYSTEM_COLLAPSED : u32 = 1024;
pub const STATE_SYSTEM_BUSY : u32 = 2048;
pub const STATE_SYSTEM_FLOATING : u32 = 4096;
pub const STATE_SYSTEM_MARQUEED : u32 = 8192;
pub const STATE_SYSTEM_ANIMATED : u32 = 16384;
pub const STATE_SYSTEM_SIZEABLE : u32 = 131072;
pub const STATE_SYSTEM_MOVEABLE : u32 = 262144;
pub const STATE_SYSTEM_SELFVOICING : u32 = 524288;
pub const STATE_SYSTEM_SELECTABLE : u32 = 2097152;
pub const STATE_SYSTEM_LINKED : u32 = 4194304;
pub const STATE_SYSTEM_TRAVERSED : u32 = 8388608;
pub const STATE_SYSTEM_MULTISELECTABLE : u32 = 16777216;
pub const STATE_SYSTEM_EXTSELECTABLE : u32 = 33554432;
pub const STATE_SYSTEM_ALERT_LOW : u32 = 67108864;
pub const STATE_SYSTEM_ALERT_MEDIUM : u32 = 134217728;
pub const STATE_SYSTEM_ALERT_HIGH : u32 = 268435456;
pub const STATE_SYSTEM_PROTECTED : u32 = 536870912;
pub const STATE_SYSTEM_VALID : u32 = 1073741823;
pub const CCHILDREN_TITLEBAR : u32 = 5;
pub const CCHILDREN_SCROLLBAR : u32 = 5;
pub const RIM_INPUT : u32 = 0;
pub const RIM_INPUTSINK : u32 = 1;
pub const RIM_TYPEMAX : u32 = 2;
pub const RI_KEY_MAKE : u32 = 0;
pub const RI_KEY_BREAK : u32 = 1;
pub const RI_KEY_E0 : u32 = 2;
pub const RI_KEY_E1 : u32 = 4;
pub const RI_KEY_TERMSRV_SET_LED : u32 = 8;
pub const RI_KEY_TERMSRV_SHADOW : u32 = 16;
pub const RIDEV_EXMODEMASK : u32 = 240;
pub const GIDC_ARRIVAL : u32 = 1;
pub const GIDC_REMOVAL : u32 = 2;
pub const POINTER_DEVICE_PRODUCT_STRING_MAX : u32 = 520;
pub const PDC_ARRIVAL : u32 = 1;
pub const PDC_REMOVAL : u32 = 2;
pub const PDC_ORIENTATION_0 : u32 = 4;
pub const PDC_ORIENTATION_90 : u32 = 8;
pub const PDC_ORIENTATION_180 : u32 = 16;
pub const PDC_ORIENTATION_270 : u32 = 32;
pub const PDC_MODE_DEFAULT : u32 = 64;
pub const PDC_MODE_CENTERED : u32 = 128;
pub const PDC_MAPPING_CHANGE : u32 = 256;
pub const PDC_RESOLUTION : u32 = 512;
pub const PDC_ORIGIN : u32 = 1024;
pub const PDC_MODE_ASPECTRATIOPRESERVED : u32 = 2048;
pub const GF_BEGIN : u32 = 1;
pub const GF_INERTIA : u32 = 2;
pub const GF_END : u32 = 4;
pub const GESTURECONFIGMAXCOUNT : u32 = 256;
pub const GCF_INCLUDE_ANCESTORS : u32 = 1;
pub const NID_INTEGRATED_TOUCH : u32 = 1;
pub const NID_EXTERNAL_TOUCH : u32 = 2;
pub const NID_INTEGRATED_PEN : u32 = 4;
pub const NID_EXTERNAL_PEN : u32 = 8;
pub const NID_MULTI_INPUT : u32 = 64;
pub const NID_READY : u32 = 128;
pub const MAX_STR_BLOCKREASON : u32 = 256;
pub const STRSAFE_USE_SECURE_CRT : u32 = 0;
pub const STRSAFE_MAX_CCH : u32 = 2147483647;
pub const STRSAFE_E_INSUFFICIENT_BUFFER : i32 = -2147024774;
pub const STRSAFE_E_INVALID_PARAMETER : i32 = -2147024809;
pub const STRSAFE_E_END_OF_FILE : i32 = -2147024858;
pub const HBMMENU_CALLBACK : i32 = -1;
pub const HBMMENU_SYSTEM : i32 = 1;
pub const HBMMENU_MBAR_RESTORE : i32 = 2;
pub const HBMMENU_MBAR_MINIMIZE : i32 = 3;
pub const HBMMENU_MBAR_CLOSE : i32 = 5;
pub const HBMMENU_MBAR_CLOSE_D : i32 = 6;
pub const HBMMENU_MBAR_MINIMIZE_D : i32 = 7;
pub const HBMMENU_POPUP_CLOSE : i32 = 8;
pub const HBMMENU_POPUP_RESTORE : i32 = 9;
pub const HBMMENU_POPUP_MAXIMIZE : i32 = 10;
pub const HBMMENU_POPUP_MINIMIZE : i32 = 11;

//--------------------------------------------------------------------------------
// Section: Types (197)
//--------------------------------------------------------------------------------
// TODO: This Enum is marked as [Flags], what do I do with this?
pub const CWP_FLAGS = extern enum(u32) {
    ALL = 0,
    SKIPINVISIBLE = 1,
    SKIPDISABLED = 2,
    SKIPTRANSPARENT = 4,
    _,
};
pub const CWP_ALL = CWP_FLAGS.ALL;
pub const CWP_SKIPINVISIBLE = CWP_FLAGS.SKIPINVISIBLE;
pub const CWP_SKIPDISABLED = CWP_FLAGS.SKIPDISABLED;
pub const CWP_SKIPTRANSPARENT = CWP_FLAGS.SKIPTRANSPARENT;

pub const MB_FLAGS = extern enum(i32) {
    OK = 0,
    ABORTRETRYIGNORE = 2,
    CANCELTRYCONTINUE = 6,
    HELP = 16384,
    OKCANCEL = 1,
    RETRYCANCEL = 5,
    YESNO = 4,
    YESNOCANCEL = 3,
    ICONHAND = 16,
    ICONQUESTION = 32,
    ICONEXCLAMATION = 48,
    ICONASTERISK = 64,
    USERICON = 128,
    ICONWARNING = 48,
    ICONERROR = 16,
    ICONINFORMATION = 64,
    ICONSTOP = 16,
    DEFBUTTON1 = 0,
    DEFBUTTON2 = 256,
    DEFBUTTON3 = 512,
    DEFBUTTON4 = 768,
    APPLMODAL = 0,
    SYSTEMMODAL = 4096,
    TASKMODAL = 8192,
    NOFOCUS = 32768,
    SETFOREGROUND = 65536,
    DEFAULT_DESKTOP_ONLY = 131072,
    TOPMOST = 262144,
    RIGHT = 524288,
    RTLREADING = 1048576,
    SERVICE_NOTIFICATION = 2097152,
    SERVICE_NOTIFICATION_NT3X = 262144,
    TYPEMASK = 15,
    ICONMASK = 240,
    DEFMASK = 3840,
    MODEMASK = 12288,
    MISCMASK = 49152,
};
pub const MB_OK = MB_FLAGS.OK;
pub const MB_ABORTRETRYIGNORE = MB_FLAGS.ABORTRETRYIGNORE;
pub const MB_CANCELTRYCONTINUE = MB_FLAGS.CANCELTRYCONTINUE;
pub const MB_HELP = MB_FLAGS.HELP;
pub const MB_OKCANCEL = MB_FLAGS.OKCANCEL;
pub const MB_RETRYCANCEL = MB_FLAGS.RETRYCANCEL;
pub const MB_YESNO = MB_FLAGS.YESNO;
pub const MB_YESNOCANCEL = MB_FLAGS.YESNOCANCEL;
pub const MB_ICONHAND = MB_FLAGS.ICONHAND;
pub const MB_ICONQUESTION = MB_FLAGS.ICONQUESTION;
pub const MB_ICONEXCLAMATION = MB_FLAGS.ICONEXCLAMATION;
pub const MB_ICONASTERISK = MB_FLAGS.ICONASTERISK;
pub const MB_USERICON = MB_FLAGS.USERICON;
pub const MB_ICONWARNING = MB_FLAGS.ICONWARNING;
pub const MB_ICONERROR = MB_FLAGS.ICONERROR;
pub const MB_ICONINFORMATION = MB_FLAGS.ICONINFORMATION;
pub const MB_ICONSTOP = MB_FLAGS.ICONSTOP;
pub const MB_DEFBUTTON1 = MB_FLAGS.DEFBUTTON1;
pub const MB_DEFBUTTON2 = MB_FLAGS.DEFBUTTON2;
pub const MB_DEFBUTTON3 = MB_FLAGS.DEFBUTTON3;
pub const MB_DEFBUTTON4 = MB_FLAGS.DEFBUTTON4;
pub const MB_APPLMODAL = MB_FLAGS.APPLMODAL;
pub const MB_SYSTEMMODAL = MB_FLAGS.SYSTEMMODAL;
pub const MB_TASKMODAL = MB_FLAGS.TASKMODAL;
pub const MB_NOFOCUS = MB_FLAGS.NOFOCUS;
pub const MB_SETFOREGROUND = MB_FLAGS.SETFOREGROUND;
pub const MB_DEFAULT_DESKTOP_ONLY = MB_FLAGS.DEFAULT_DESKTOP_ONLY;
pub const MB_TOPMOST = MB_FLAGS.TOPMOST;
pub const MB_RIGHT = MB_FLAGS.RIGHT;
pub const MB_RTLREADING = MB_FLAGS.RTLREADING;
pub const MB_SERVICE_NOTIFICATION = MB_FLAGS.SERVICE_NOTIFICATION;
pub const MB_SERVICE_NOTIFICATION_NT3X = MB_FLAGS.SERVICE_NOTIFICATION_NT3X;
pub const MB_TYPEMASK = MB_FLAGS.TYPEMASK;
pub const MB_ICONMASK = MB_FLAGS.ICONMASK;
pub const MB_DEFMASK = MB_FLAGS.DEFMASK;
pub const MB_MODEMASK = MB_FLAGS.MODEMASK;
pub const MB_MISCMASK = MB_FLAGS.MISCMASK;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const MENU_FLAGS = extern enum(u32) {
    INSERT = 0,
    CHANGE = 128,
    APPEND = 256,
    DELETE = 512,
    REMOVE = 4096,
    BYCOMMAND = 0,
    BYPOSITION = 1024,
    DISABLED = 2,
    ENABLED = 0,
    GRAYED = 1,
    BITMAP = 4,
    CHECKED = 8,
    MENUBARBREAK = 32,
    MENUBREAK = 64,
    OWNERDRAW = 256,
    POPUP = 16,
    SEPARATOR = 2048,
    STRING = 0,
    UNCHECKED = 0,
    USECHECKBITMAPS = 512,
    UNHILITE = 0,
    HILITE = 128,
    DEFAULT = 4096,
    SYSMENU = 8192,
    HELP = 16384,
    RIGHTJUSTIFY = 16384,
    MOUSESELECT = 32768,
    END = 128,
    _,
};
pub const MF_INSERT = MENU_FLAGS.INSERT;
pub const MF_CHANGE = MENU_FLAGS.CHANGE;
pub const MF_APPEND = MENU_FLAGS.APPEND;
pub const MF_DELETE = MENU_FLAGS.DELETE;
pub const MF_REMOVE = MENU_FLAGS.REMOVE;
pub const MF_BYCOMMAND = MENU_FLAGS.BYCOMMAND;
pub const MF_BYPOSITION = MENU_FLAGS.BYPOSITION;
pub const MF_DISABLED = MENU_FLAGS.DISABLED;
pub const MF_ENABLED = MENU_FLAGS.ENABLED;
pub const MF_GRAYED = MENU_FLAGS.GRAYED;
pub const MF_BITMAP = MENU_FLAGS.BITMAP;
pub const MF_CHECKED = MENU_FLAGS.CHECKED;
pub const MF_MENUBARBREAK = MENU_FLAGS.MENUBARBREAK;
pub const MF_MENUBREAK = MENU_FLAGS.MENUBREAK;
pub const MF_OWNERDRAW = MENU_FLAGS.OWNERDRAW;
pub const MF_POPUP = MENU_FLAGS.POPUP;
pub const MF_SEPARATOR = MENU_FLAGS.SEPARATOR;
pub const MF_STRING = MENU_FLAGS.STRING;
pub const MF_UNCHECKED = MENU_FLAGS.UNCHECKED;
pub const MF_USECHECKBITMAPS = MENU_FLAGS.USECHECKBITMAPS;
pub const MF_UNHILITE = MENU_FLAGS.UNHILITE;
pub const MF_HILITE = MENU_FLAGS.HILITE;
pub const MF_DEFAULT = MENU_FLAGS.DEFAULT;
pub const MF_SYSMENU = MENU_FLAGS.SYSMENU;
pub const MF_HELP = MENU_FLAGS.HELP;
pub const MF_RIGHTJUSTIFY = MENU_FLAGS.RIGHTJUSTIFY;
pub const MF_MOUSESELECT = MENU_FLAGS.MOUSESELECT;
pub const MF_END = MENU_FLAGS.END;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const SHOW_WINDOW_CMD = extern enum(u32) {
    HIDE = 0,
    FORCEMINIMIZE = 11,
    MAXIMIZE = 3,
    MINIMIZE = 6,
    RESTORE = 9,
    SHOW = 5,
    SHOWDEFAULT = 10,
    SHOWMAXIMIZED = 3,
    SHOWMINIMIZED = 2,
    SHOWMINNOACTIVE = 7,
    SHOWNA = 8,
    SHOWNOACTIVATE = 4,
    SHOWNORMAL = 1,
    NORMAL = 1,
    MAX = 11,
    PARENTCLOSING = 1,
    OTHERZOOM = 2,
    PARENTOPENING = 3,
    OTHERUNZOOM = 4,
    SCROLLCHILDREN = 1,
    ERASE = 4,
    INVALIDATE = 2,
    SMOOTHSCROLL = 16,
    _,
};
pub const SW_HIDE = SHOW_WINDOW_CMD.HIDE;
pub const SW_FORCEMINIMIZE = SHOW_WINDOW_CMD.FORCEMINIMIZE;
pub const SW_MAXIMIZE = SHOW_WINDOW_CMD.MAXIMIZE;
pub const SW_MINIMIZE = SHOW_WINDOW_CMD.MINIMIZE;
pub const SW_RESTORE = SHOW_WINDOW_CMD.RESTORE;
pub const SW_SHOW = SHOW_WINDOW_CMD.SHOW;
pub const SW_SHOWDEFAULT = SHOW_WINDOW_CMD.SHOWDEFAULT;
pub const SW_SHOWMAXIMIZED = SHOW_WINDOW_CMD.SHOWMAXIMIZED;
pub const SW_SHOWMINIMIZED = SHOW_WINDOW_CMD.SHOWMINIMIZED;
pub const SW_SHOWMINNOACTIVE = SHOW_WINDOW_CMD.SHOWMINNOACTIVE;
pub const SW_SHOWNA = SHOW_WINDOW_CMD.SHOWNA;
pub const SW_SHOWNOACTIVATE = SHOW_WINDOW_CMD.SHOWNOACTIVATE;
pub const SW_SHOWNORMAL = SHOW_WINDOW_CMD.SHOWNORMAL;
pub const SW_NORMAL = SHOW_WINDOW_CMD.NORMAL;
pub const SW_MAX = SHOW_WINDOW_CMD.MAX;
pub const SW_PARENTCLOSING = SHOW_WINDOW_CMD.PARENTCLOSING;
pub const SW_OTHERZOOM = SHOW_WINDOW_CMD.OTHERZOOM;
pub const SW_PARENTOPENING = SHOW_WINDOW_CMD.PARENTOPENING;
pub const SW_OTHERUNZOOM = SHOW_WINDOW_CMD.OTHERUNZOOM;
pub const SW_SCROLLCHILDREN = SHOW_WINDOW_CMD.SCROLLCHILDREN;
pub const SW_ERASE = SHOW_WINDOW_CMD.ERASE;
pub const SW_INVALIDATE = SHOW_WINDOW_CMD.INVALIDATE;
pub const SW_SMOOTHSCROLL = SHOW_WINDOW_CMD.SMOOTHSCROLL;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const SYSTEM_PARAMETERS_INFO_ACTION = extern enum(u32) {
    GETBEEP = 1,
    SETBEEP = 2,
    GETMOUSE = 3,
    SETMOUSE = 4,
    GETBORDER = 5,
    SETBORDER = 6,
    GETKEYBOARDSPEED = 10,
    SETKEYBOARDSPEED = 11,
    LANGDRIVER = 12,
    ICONHORIZONTALSPACING = 13,
    GETSCREENSAVETIMEOUT = 14,
    SETSCREENSAVETIMEOUT = 15,
    GETSCREENSAVEACTIVE = 16,
    SETSCREENSAVEACTIVE = 17,
    GETGRIDGRANULARITY = 18,
    SETGRIDGRANULARITY = 19,
    SETDESKWALLPAPER = 20,
    SETDESKPATTERN = 21,
    GETKEYBOARDDELAY = 22,
    SETKEYBOARDDELAY = 23,
    ICONVERTICALSPACING = 24,
    GETICONTITLEWRAP = 25,
    SETICONTITLEWRAP = 26,
    GETMENUDROPALIGNMENT = 27,
    SETMENUDROPALIGNMENT = 28,
    SETDOUBLECLKWIDTH = 29,
    SETDOUBLECLKHEIGHT = 30,
    GETICONTITLELOGFONT = 31,
    SETDOUBLECLICKTIME = 32,
    SETMOUSEBUTTONSWAP = 33,
    SETICONTITLELOGFONT = 34,
    GETFASTTASKSWITCH = 35,
    SETFASTTASKSWITCH = 36,
    SETDRAGFULLWINDOWS = 37,
    GETDRAGFULLWINDOWS = 38,
    GETNONCLIENTMETRICS = 41,
    SETNONCLIENTMETRICS = 42,
    GETMINIMIZEDMETRICS = 43,
    SETMINIMIZEDMETRICS = 44,
    GETICONMETRICS = 45,
    SETICONMETRICS = 46,
    SETWORKAREA = 47,
    GETWORKAREA = 48,
    SETPENWINDOWS = 49,
    GETHIGHCONTRAST = 66,
    SETHIGHCONTRAST = 67,
    GETKEYBOARDPREF = 68,
    SETKEYBOARDPREF = 69,
    GETSCREENREADER = 70,
    SETSCREENREADER = 71,
    GETANIMATION = 72,
    SETANIMATION = 73,
    GETFONTSMOOTHING = 74,
    SETFONTSMOOTHING = 75,
    SETDRAGWIDTH = 76,
    SETDRAGHEIGHT = 77,
    SETHANDHELD = 78,
    GETLOWPOWERTIMEOUT = 79,
    GETPOWEROFFTIMEOUT = 80,
    SETLOWPOWERTIMEOUT = 81,
    SETPOWEROFFTIMEOUT = 82,
    GETLOWPOWERACTIVE = 83,
    GETPOWEROFFACTIVE = 84,
    SETLOWPOWERACTIVE = 85,
    SETPOWEROFFACTIVE = 86,
    SETCURSORS = 87,
    SETICONS = 88,
    GETDEFAULTINPUTLANG = 89,
    SETDEFAULTINPUTLANG = 90,
    SETLANGTOGGLE = 91,
    GETWINDOWSEXTENSION = 92,
    SETMOUSETRAILS = 93,
    GETMOUSETRAILS = 94,
    SETSCREENSAVERRUNNING = 97,
    SCREENSAVERRUNNING = 97,
    GETFILTERKEYS = 50,
    SETFILTERKEYS = 51,
    GETTOGGLEKEYS = 52,
    SETTOGGLEKEYS = 53,
    GETMOUSEKEYS = 54,
    SETMOUSEKEYS = 55,
    GETSHOWSOUNDS = 56,
    SETSHOWSOUNDS = 57,
    GETSTICKYKEYS = 58,
    SETSTICKYKEYS = 59,
    GETACCESSTIMEOUT = 60,
    SETACCESSTIMEOUT = 61,
    GETSERIALKEYS = 62,
    SETSERIALKEYS = 63,
    GETSOUNDSENTRY = 64,
    SETSOUNDSENTRY = 65,
    GETSNAPTODEFBUTTON = 95,
    SETSNAPTODEFBUTTON = 96,
    GETMOUSEHOVERWIDTH = 98,
    SETMOUSEHOVERWIDTH = 99,
    GETMOUSEHOVERHEIGHT = 100,
    SETMOUSEHOVERHEIGHT = 101,
    GETMOUSEHOVERTIME = 102,
    SETMOUSEHOVERTIME = 103,
    GETWHEELSCROLLLINES = 104,
    SETWHEELSCROLLLINES = 105,
    GETMENUSHOWDELAY = 106,
    SETMENUSHOWDELAY = 107,
    GETWHEELSCROLLCHARS = 108,
    SETWHEELSCROLLCHARS = 109,
    GETSHOWIMEUI = 110,
    SETSHOWIMEUI = 111,
    GETMOUSESPEED = 112,
    SETMOUSESPEED = 113,
    GETSCREENSAVERRUNNING = 114,
    GETDESKWALLPAPER = 115,
    GETAUDIODESCRIPTION = 116,
    SETAUDIODESCRIPTION = 117,
    GETSCREENSAVESECURE = 118,
    SETSCREENSAVESECURE = 119,
    GETHUNGAPPTIMEOUT = 120,
    SETHUNGAPPTIMEOUT = 121,
    GETWAITTOKILLTIMEOUT = 122,
    SETWAITTOKILLTIMEOUT = 123,
    GETWAITTOKILLSERVICETIMEOUT = 124,
    SETWAITTOKILLSERVICETIMEOUT = 125,
    GETMOUSEDOCKTHRESHOLD = 126,
    SETMOUSEDOCKTHRESHOLD = 127,
    GETPENDOCKTHRESHOLD = 128,
    SETPENDOCKTHRESHOLD = 129,
    GETWINARRANGING = 130,
    SETWINARRANGING = 131,
    GETMOUSEDRAGOUTTHRESHOLD = 132,
    SETMOUSEDRAGOUTTHRESHOLD = 133,
    GETPENDRAGOUTTHRESHOLD = 134,
    SETPENDRAGOUTTHRESHOLD = 135,
    GETMOUSESIDEMOVETHRESHOLD = 136,
    SETMOUSESIDEMOVETHRESHOLD = 137,
    GETPENSIDEMOVETHRESHOLD = 138,
    SETPENSIDEMOVETHRESHOLD = 139,
    GETDRAGFROMMAXIMIZE = 140,
    SETDRAGFROMMAXIMIZE = 141,
    GETSNAPSIZING = 142,
    SETSNAPSIZING = 143,
    GETDOCKMOVING = 144,
    SETDOCKMOVING = 145,
    GETTOUCHPREDICTIONPARAMETERS = 156,
    SETTOUCHPREDICTIONPARAMETERS = 157,
    GETLOGICALDPIOVERRIDE = 158,
    SETLOGICALDPIOVERRIDE = 159,
    GETMENURECT = 162,
    SETMENURECT = 163,
    GETACTIVEWINDOWTRACKING = 4096,
    SETACTIVEWINDOWTRACKING = 4097,
    GETMENUANIMATION = 4098,
    SETMENUANIMATION = 4099,
    GETCOMBOBOXANIMATION = 4100,
    SETCOMBOBOXANIMATION = 4101,
    GETLISTBOXSMOOTHSCROLLING = 4102,
    SETLISTBOXSMOOTHSCROLLING = 4103,
    GETGRADIENTCAPTIONS = 4104,
    SETGRADIENTCAPTIONS = 4105,
    GETKEYBOARDCUES = 4106,
    SETKEYBOARDCUES = 4107,
    GETMENUUNDERLINES = 4106,
    SETMENUUNDERLINES = 4107,
    GETACTIVEWNDTRKZORDER = 4108,
    SETACTIVEWNDTRKZORDER = 4109,
    GETHOTTRACKING = 4110,
    SETHOTTRACKING = 4111,
    GETMENUFADE = 4114,
    SETMENUFADE = 4115,
    GETSELECTIONFADE = 4116,
    SETSELECTIONFADE = 4117,
    GETTOOLTIPANIMATION = 4118,
    SETTOOLTIPANIMATION = 4119,
    GETTOOLTIPFADE = 4120,
    SETTOOLTIPFADE = 4121,
    GETCURSORSHADOW = 4122,
    SETCURSORSHADOW = 4123,
    GETMOUSESONAR = 4124,
    SETMOUSESONAR = 4125,
    GETMOUSECLICKLOCK = 4126,
    SETMOUSECLICKLOCK = 4127,
    GETMOUSEVANISH = 4128,
    SETMOUSEVANISH = 4129,
    GETFLATMENU = 4130,
    SETFLATMENU = 4131,
    GETDROPSHADOW = 4132,
    SETDROPSHADOW = 4133,
    GETBLOCKSENDINPUTRESETS = 4134,
    SETBLOCKSENDINPUTRESETS = 4135,
    GETUIEFFECTS = 4158,
    SETUIEFFECTS = 4159,
    GETDISABLEOVERLAPPEDCONTENT = 4160,
    SETDISABLEOVERLAPPEDCONTENT = 4161,
    GETCLIENTAREAANIMATION = 4162,
    SETCLIENTAREAANIMATION = 4163,
    GETCLEARTYPE = 4168,
    SETCLEARTYPE = 4169,
    GETSPEECHRECOGNITION = 4170,
    SETSPEECHRECOGNITION = 4171,
    GETCARETBROWSING = 4172,
    SETCARETBROWSING = 4173,
    GETTHREADLOCALINPUTSETTINGS = 4174,
    SETTHREADLOCALINPUTSETTINGS = 4175,
    GETSYSTEMLANGUAGEBAR = 4176,
    SETSYSTEMLANGUAGEBAR = 4177,
    GETFOREGROUNDLOCKTIMEOUT = 8192,
    SETFOREGROUNDLOCKTIMEOUT = 8193,
    GETACTIVEWNDTRKTIMEOUT = 8194,
    SETACTIVEWNDTRKTIMEOUT = 8195,
    GETFOREGROUNDFLASHCOUNT = 8196,
    SETFOREGROUNDFLASHCOUNT = 8197,
    GETCARETWIDTH = 8198,
    SETCARETWIDTH = 8199,
    GETMOUSECLICKLOCKTIME = 8200,
    SETMOUSECLICKLOCKTIME = 8201,
    GETFONTSMOOTHINGTYPE = 8202,
    SETFONTSMOOTHINGTYPE = 8203,
    GETFONTSMOOTHINGCONTRAST = 8204,
    SETFONTSMOOTHINGCONTRAST = 8205,
    GETFOCUSBORDERWIDTH = 8206,
    SETFOCUSBORDERWIDTH = 8207,
    GETFOCUSBORDERHEIGHT = 8208,
    SETFOCUSBORDERHEIGHT = 8209,
    GETFONTSMOOTHINGORIENTATION = 8210,
    SETFONTSMOOTHINGORIENTATION = 8211,
    GETMINIMUMHITRADIUS = 8212,
    SETMINIMUMHITRADIUS = 8213,
    GETMESSAGEDURATION = 8214,
    SETMESSAGEDURATION = 8215,
    GETCONTACTVISUALIZATION = 8216,
    SETCONTACTVISUALIZATION = 8217,
    GETGESTUREVISUALIZATION = 8218,
    SETGESTUREVISUALIZATION = 8219,
    GETMOUSEWHEELROUTING = 8220,
    SETMOUSEWHEELROUTING = 8221,
    GETPENVISUALIZATION = 8222,
    SETPENVISUALIZATION = 8223,
    GETPENARBITRATIONTYPE = 8224,
    SETPENARBITRATIONTYPE = 8225,
    GETCARETTIMEOUT = 8226,
    SETCARETTIMEOUT = 8227,
    GETHANDEDNESS = 8228,
    SETHANDEDNESS = 8229,
    _,
};
pub const SPI_GETBEEP = SYSTEM_PARAMETERS_INFO_ACTION.GETBEEP;
pub const SPI_SETBEEP = SYSTEM_PARAMETERS_INFO_ACTION.SETBEEP;
pub const SPI_GETMOUSE = SYSTEM_PARAMETERS_INFO_ACTION.GETMOUSE;
pub const SPI_SETMOUSE = SYSTEM_PARAMETERS_INFO_ACTION.SETMOUSE;
pub const SPI_GETBORDER = SYSTEM_PARAMETERS_INFO_ACTION.GETBORDER;
pub const SPI_SETBORDER = SYSTEM_PARAMETERS_INFO_ACTION.SETBORDER;
pub const SPI_GETKEYBOARDSPEED = SYSTEM_PARAMETERS_INFO_ACTION.GETKEYBOARDSPEED;
pub const SPI_SETKEYBOARDSPEED = SYSTEM_PARAMETERS_INFO_ACTION.SETKEYBOARDSPEED;
pub const SPI_LANGDRIVER = SYSTEM_PARAMETERS_INFO_ACTION.LANGDRIVER;
pub const SPI_ICONHORIZONTALSPACING = SYSTEM_PARAMETERS_INFO_ACTION.ICONHORIZONTALSPACING;
pub const SPI_GETSCREENSAVETIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.GETSCREENSAVETIMEOUT;
pub const SPI_SETSCREENSAVETIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.SETSCREENSAVETIMEOUT;
pub const SPI_GETSCREENSAVEACTIVE = SYSTEM_PARAMETERS_INFO_ACTION.GETSCREENSAVEACTIVE;
pub const SPI_SETSCREENSAVEACTIVE = SYSTEM_PARAMETERS_INFO_ACTION.SETSCREENSAVEACTIVE;
pub const SPI_GETGRIDGRANULARITY = SYSTEM_PARAMETERS_INFO_ACTION.GETGRIDGRANULARITY;
pub const SPI_SETGRIDGRANULARITY = SYSTEM_PARAMETERS_INFO_ACTION.SETGRIDGRANULARITY;
pub const SPI_SETDESKWALLPAPER = SYSTEM_PARAMETERS_INFO_ACTION.SETDESKWALLPAPER;
pub const SPI_SETDESKPATTERN = SYSTEM_PARAMETERS_INFO_ACTION.SETDESKPATTERN;
pub const SPI_GETKEYBOARDDELAY = SYSTEM_PARAMETERS_INFO_ACTION.GETKEYBOARDDELAY;
pub const SPI_SETKEYBOARDDELAY = SYSTEM_PARAMETERS_INFO_ACTION.SETKEYBOARDDELAY;
pub const SPI_ICONVERTICALSPACING = SYSTEM_PARAMETERS_INFO_ACTION.ICONVERTICALSPACING;
pub const SPI_GETICONTITLEWRAP = SYSTEM_PARAMETERS_INFO_ACTION.GETICONTITLEWRAP;
pub const SPI_SETICONTITLEWRAP = SYSTEM_PARAMETERS_INFO_ACTION.SETICONTITLEWRAP;
pub const SPI_GETMENUDROPALIGNMENT = SYSTEM_PARAMETERS_INFO_ACTION.GETMENUDROPALIGNMENT;
pub const SPI_SETMENUDROPALIGNMENT = SYSTEM_PARAMETERS_INFO_ACTION.SETMENUDROPALIGNMENT;
pub const SPI_SETDOUBLECLKWIDTH = SYSTEM_PARAMETERS_INFO_ACTION.SETDOUBLECLKWIDTH;
pub const SPI_SETDOUBLECLKHEIGHT = SYSTEM_PARAMETERS_INFO_ACTION.SETDOUBLECLKHEIGHT;
pub const SPI_GETICONTITLELOGFONT = SYSTEM_PARAMETERS_INFO_ACTION.GETICONTITLELOGFONT;
pub const SPI_SETDOUBLECLICKTIME = SYSTEM_PARAMETERS_INFO_ACTION.SETDOUBLECLICKTIME;
pub const SPI_SETMOUSEBUTTONSWAP = SYSTEM_PARAMETERS_INFO_ACTION.SETMOUSEBUTTONSWAP;
pub const SPI_SETICONTITLELOGFONT = SYSTEM_PARAMETERS_INFO_ACTION.SETICONTITLELOGFONT;
pub const SPI_GETFASTTASKSWITCH = SYSTEM_PARAMETERS_INFO_ACTION.GETFASTTASKSWITCH;
pub const SPI_SETFASTTASKSWITCH = SYSTEM_PARAMETERS_INFO_ACTION.SETFASTTASKSWITCH;
pub const SPI_SETDRAGFULLWINDOWS = SYSTEM_PARAMETERS_INFO_ACTION.SETDRAGFULLWINDOWS;
pub const SPI_GETDRAGFULLWINDOWS = SYSTEM_PARAMETERS_INFO_ACTION.GETDRAGFULLWINDOWS;
pub const SPI_GETNONCLIENTMETRICS = SYSTEM_PARAMETERS_INFO_ACTION.GETNONCLIENTMETRICS;
pub const SPI_SETNONCLIENTMETRICS = SYSTEM_PARAMETERS_INFO_ACTION.SETNONCLIENTMETRICS;
pub const SPI_GETMINIMIZEDMETRICS = SYSTEM_PARAMETERS_INFO_ACTION.GETMINIMIZEDMETRICS;
pub const SPI_SETMINIMIZEDMETRICS = SYSTEM_PARAMETERS_INFO_ACTION.SETMINIMIZEDMETRICS;
pub const SPI_GETICONMETRICS = SYSTEM_PARAMETERS_INFO_ACTION.GETICONMETRICS;
pub const SPI_SETICONMETRICS = SYSTEM_PARAMETERS_INFO_ACTION.SETICONMETRICS;
pub const SPI_SETWORKAREA = SYSTEM_PARAMETERS_INFO_ACTION.SETWORKAREA;
pub const SPI_GETWORKAREA = SYSTEM_PARAMETERS_INFO_ACTION.GETWORKAREA;
pub const SPI_SETPENWINDOWS = SYSTEM_PARAMETERS_INFO_ACTION.SETPENWINDOWS;
pub const SPI_GETHIGHCONTRAST = SYSTEM_PARAMETERS_INFO_ACTION.GETHIGHCONTRAST;
pub const SPI_SETHIGHCONTRAST = SYSTEM_PARAMETERS_INFO_ACTION.SETHIGHCONTRAST;
pub const SPI_GETKEYBOARDPREF = SYSTEM_PARAMETERS_INFO_ACTION.GETKEYBOARDPREF;
pub const SPI_SETKEYBOARDPREF = SYSTEM_PARAMETERS_INFO_ACTION.SETKEYBOARDPREF;
pub const SPI_GETSCREENREADER = SYSTEM_PARAMETERS_INFO_ACTION.GETSCREENREADER;
pub const SPI_SETSCREENREADER = SYSTEM_PARAMETERS_INFO_ACTION.SETSCREENREADER;
pub const SPI_GETANIMATION = SYSTEM_PARAMETERS_INFO_ACTION.GETANIMATION;
pub const SPI_SETANIMATION = SYSTEM_PARAMETERS_INFO_ACTION.SETANIMATION;
pub const SPI_GETFONTSMOOTHING = SYSTEM_PARAMETERS_INFO_ACTION.GETFONTSMOOTHING;
pub const SPI_SETFONTSMOOTHING = SYSTEM_PARAMETERS_INFO_ACTION.SETFONTSMOOTHING;
pub const SPI_SETDRAGWIDTH = SYSTEM_PARAMETERS_INFO_ACTION.SETDRAGWIDTH;
pub const SPI_SETDRAGHEIGHT = SYSTEM_PARAMETERS_INFO_ACTION.SETDRAGHEIGHT;
pub const SPI_SETHANDHELD = SYSTEM_PARAMETERS_INFO_ACTION.SETHANDHELD;
pub const SPI_GETLOWPOWERTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.GETLOWPOWERTIMEOUT;
pub const SPI_GETPOWEROFFTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.GETPOWEROFFTIMEOUT;
pub const SPI_SETLOWPOWERTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.SETLOWPOWERTIMEOUT;
pub const SPI_SETPOWEROFFTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.SETPOWEROFFTIMEOUT;
pub const SPI_GETLOWPOWERACTIVE = SYSTEM_PARAMETERS_INFO_ACTION.GETLOWPOWERACTIVE;
pub const SPI_GETPOWEROFFACTIVE = SYSTEM_PARAMETERS_INFO_ACTION.GETPOWEROFFACTIVE;
pub const SPI_SETLOWPOWERACTIVE = SYSTEM_PARAMETERS_INFO_ACTION.SETLOWPOWERACTIVE;
pub const SPI_SETPOWEROFFACTIVE = SYSTEM_PARAMETERS_INFO_ACTION.SETPOWEROFFACTIVE;
pub const SPI_SETCURSORS = SYSTEM_PARAMETERS_INFO_ACTION.SETCURSORS;
pub const SPI_SETICONS = SYSTEM_PARAMETERS_INFO_ACTION.SETICONS;
pub const SPI_GETDEFAULTINPUTLANG = SYSTEM_PARAMETERS_INFO_ACTION.GETDEFAULTINPUTLANG;
pub const SPI_SETDEFAULTINPUTLANG = SYSTEM_PARAMETERS_INFO_ACTION.SETDEFAULTINPUTLANG;
pub const SPI_SETLANGTOGGLE = SYSTEM_PARAMETERS_INFO_ACTION.SETLANGTOGGLE;
pub const SPI_GETWINDOWSEXTENSION = SYSTEM_PARAMETERS_INFO_ACTION.GETWINDOWSEXTENSION;
pub const SPI_SETMOUSETRAILS = SYSTEM_PARAMETERS_INFO_ACTION.SETMOUSETRAILS;
pub const SPI_GETMOUSETRAILS = SYSTEM_PARAMETERS_INFO_ACTION.GETMOUSETRAILS;
pub const SPI_SETSCREENSAVERRUNNING = SYSTEM_PARAMETERS_INFO_ACTION.SETSCREENSAVERRUNNING;
pub const SPI_SCREENSAVERRUNNING = SYSTEM_PARAMETERS_INFO_ACTION.SCREENSAVERRUNNING;
pub const SPI_GETFILTERKEYS = SYSTEM_PARAMETERS_INFO_ACTION.GETFILTERKEYS;
pub const SPI_SETFILTERKEYS = SYSTEM_PARAMETERS_INFO_ACTION.SETFILTERKEYS;
pub const SPI_GETTOGGLEKEYS = SYSTEM_PARAMETERS_INFO_ACTION.GETTOGGLEKEYS;
pub const SPI_SETTOGGLEKEYS = SYSTEM_PARAMETERS_INFO_ACTION.SETTOGGLEKEYS;
pub const SPI_GETMOUSEKEYS = SYSTEM_PARAMETERS_INFO_ACTION.GETMOUSEKEYS;
pub const SPI_SETMOUSEKEYS = SYSTEM_PARAMETERS_INFO_ACTION.SETMOUSEKEYS;
pub const SPI_GETSHOWSOUNDS = SYSTEM_PARAMETERS_INFO_ACTION.GETSHOWSOUNDS;
pub const SPI_SETSHOWSOUNDS = SYSTEM_PARAMETERS_INFO_ACTION.SETSHOWSOUNDS;
pub const SPI_GETSTICKYKEYS = SYSTEM_PARAMETERS_INFO_ACTION.GETSTICKYKEYS;
pub const SPI_SETSTICKYKEYS = SYSTEM_PARAMETERS_INFO_ACTION.SETSTICKYKEYS;
pub const SPI_GETACCESSTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.GETACCESSTIMEOUT;
pub const SPI_SETACCESSTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.SETACCESSTIMEOUT;
pub const SPI_GETSERIALKEYS = SYSTEM_PARAMETERS_INFO_ACTION.GETSERIALKEYS;
pub const SPI_SETSERIALKEYS = SYSTEM_PARAMETERS_INFO_ACTION.SETSERIALKEYS;
pub const SPI_GETSOUNDSENTRY = SYSTEM_PARAMETERS_INFO_ACTION.GETSOUNDSENTRY;
pub const SPI_SETSOUNDSENTRY = SYSTEM_PARAMETERS_INFO_ACTION.SETSOUNDSENTRY;
pub const SPI_GETSNAPTODEFBUTTON = SYSTEM_PARAMETERS_INFO_ACTION.GETSNAPTODEFBUTTON;
pub const SPI_SETSNAPTODEFBUTTON = SYSTEM_PARAMETERS_INFO_ACTION.SETSNAPTODEFBUTTON;
pub const SPI_GETMOUSEHOVERWIDTH = SYSTEM_PARAMETERS_INFO_ACTION.GETMOUSEHOVERWIDTH;
pub const SPI_SETMOUSEHOVERWIDTH = SYSTEM_PARAMETERS_INFO_ACTION.SETMOUSEHOVERWIDTH;
pub const SPI_GETMOUSEHOVERHEIGHT = SYSTEM_PARAMETERS_INFO_ACTION.GETMOUSEHOVERHEIGHT;
pub const SPI_SETMOUSEHOVERHEIGHT = SYSTEM_PARAMETERS_INFO_ACTION.SETMOUSEHOVERHEIGHT;
pub const SPI_GETMOUSEHOVERTIME = SYSTEM_PARAMETERS_INFO_ACTION.GETMOUSEHOVERTIME;
pub const SPI_SETMOUSEHOVERTIME = SYSTEM_PARAMETERS_INFO_ACTION.SETMOUSEHOVERTIME;
pub const SPI_GETWHEELSCROLLLINES = SYSTEM_PARAMETERS_INFO_ACTION.GETWHEELSCROLLLINES;
pub const SPI_SETWHEELSCROLLLINES = SYSTEM_PARAMETERS_INFO_ACTION.SETWHEELSCROLLLINES;
pub const SPI_GETMENUSHOWDELAY = SYSTEM_PARAMETERS_INFO_ACTION.GETMENUSHOWDELAY;
pub const SPI_SETMENUSHOWDELAY = SYSTEM_PARAMETERS_INFO_ACTION.SETMENUSHOWDELAY;
pub const SPI_GETWHEELSCROLLCHARS = SYSTEM_PARAMETERS_INFO_ACTION.GETWHEELSCROLLCHARS;
pub const SPI_SETWHEELSCROLLCHARS = SYSTEM_PARAMETERS_INFO_ACTION.SETWHEELSCROLLCHARS;
pub const SPI_GETSHOWIMEUI = SYSTEM_PARAMETERS_INFO_ACTION.GETSHOWIMEUI;
pub const SPI_SETSHOWIMEUI = SYSTEM_PARAMETERS_INFO_ACTION.SETSHOWIMEUI;
pub const SPI_GETMOUSESPEED = SYSTEM_PARAMETERS_INFO_ACTION.GETMOUSESPEED;
pub const SPI_SETMOUSESPEED = SYSTEM_PARAMETERS_INFO_ACTION.SETMOUSESPEED;
pub const SPI_GETSCREENSAVERRUNNING = SYSTEM_PARAMETERS_INFO_ACTION.GETSCREENSAVERRUNNING;
pub const SPI_GETDESKWALLPAPER = SYSTEM_PARAMETERS_INFO_ACTION.GETDESKWALLPAPER;
pub const SPI_GETAUDIODESCRIPTION = SYSTEM_PARAMETERS_INFO_ACTION.GETAUDIODESCRIPTION;
pub const SPI_SETAUDIODESCRIPTION = SYSTEM_PARAMETERS_INFO_ACTION.SETAUDIODESCRIPTION;
pub const SPI_GETSCREENSAVESECURE = SYSTEM_PARAMETERS_INFO_ACTION.GETSCREENSAVESECURE;
pub const SPI_SETSCREENSAVESECURE = SYSTEM_PARAMETERS_INFO_ACTION.SETSCREENSAVESECURE;
pub const SPI_GETHUNGAPPTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.GETHUNGAPPTIMEOUT;
pub const SPI_SETHUNGAPPTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.SETHUNGAPPTIMEOUT;
pub const SPI_GETWAITTOKILLTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.GETWAITTOKILLTIMEOUT;
pub const SPI_SETWAITTOKILLTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.SETWAITTOKILLTIMEOUT;
pub const SPI_GETWAITTOKILLSERVICETIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.GETWAITTOKILLSERVICETIMEOUT;
pub const SPI_SETWAITTOKILLSERVICETIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.SETWAITTOKILLSERVICETIMEOUT;
pub const SPI_GETMOUSEDOCKTHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION.GETMOUSEDOCKTHRESHOLD;
pub const SPI_SETMOUSEDOCKTHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION.SETMOUSEDOCKTHRESHOLD;
pub const SPI_GETPENDOCKTHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION.GETPENDOCKTHRESHOLD;
pub const SPI_SETPENDOCKTHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION.SETPENDOCKTHRESHOLD;
pub const SPI_GETWINARRANGING = SYSTEM_PARAMETERS_INFO_ACTION.GETWINARRANGING;
pub const SPI_SETWINARRANGING = SYSTEM_PARAMETERS_INFO_ACTION.SETWINARRANGING;
pub const SPI_GETMOUSEDRAGOUTTHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION.GETMOUSEDRAGOUTTHRESHOLD;
pub const SPI_SETMOUSEDRAGOUTTHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION.SETMOUSEDRAGOUTTHRESHOLD;
pub const SPI_GETPENDRAGOUTTHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION.GETPENDRAGOUTTHRESHOLD;
pub const SPI_SETPENDRAGOUTTHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION.SETPENDRAGOUTTHRESHOLD;
pub const SPI_GETMOUSESIDEMOVETHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION.GETMOUSESIDEMOVETHRESHOLD;
pub const SPI_SETMOUSESIDEMOVETHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION.SETMOUSESIDEMOVETHRESHOLD;
pub const SPI_GETPENSIDEMOVETHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION.GETPENSIDEMOVETHRESHOLD;
pub const SPI_SETPENSIDEMOVETHRESHOLD = SYSTEM_PARAMETERS_INFO_ACTION.SETPENSIDEMOVETHRESHOLD;
pub const SPI_GETDRAGFROMMAXIMIZE = SYSTEM_PARAMETERS_INFO_ACTION.GETDRAGFROMMAXIMIZE;
pub const SPI_SETDRAGFROMMAXIMIZE = SYSTEM_PARAMETERS_INFO_ACTION.SETDRAGFROMMAXIMIZE;
pub const SPI_GETSNAPSIZING = SYSTEM_PARAMETERS_INFO_ACTION.GETSNAPSIZING;
pub const SPI_SETSNAPSIZING = SYSTEM_PARAMETERS_INFO_ACTION.SETSNAPSIZING;
pub const SPI_GETDOCKMOVING = SYSTEM_PARAMETERS_INFO_ACTION.GETDOCKMOVING;
pub const SPI_SETDOCKMOVING = SYSTEM_PARAMETERS_INFO_ACTION.SETDOCKMOVING;
pub const SPI_GETTOUCHPREDICTIONPARAMETERS = SYSTEM_PARAMETERS_INFO_ACTION.GETTOUCHPREDICTIONPARAMETERS;
pub const SPI_SETTOUCHPREDICTIONPARAMETERS = SYSTEM_PARAMETERS_INFO_ACTION.SETTOUCHPREDICTIONPARAMETERS;
pub const SPI_GETLOGICALDPIOVERRIDE = SYSTEM_PARAMETERS_INFO_ACTION.GETLOGICALDPIOVERRIDE;
pub const SPI_SETLOGICALDPIOVERRIDE = SYSTEM_PARAMETERS_INFO_ACTION.SETLOGICALDPIOVERRIDE;
pub const SPI_GETMENURECT = SYSTEM_PARAMETERS_INFO_ACTION.GETMENURECT;
pub const SPI_SETMENURECT = SYSTEM_PARAMETERS_INFO_ACTION.SETMENURECT;
pub const SPI_GETACTIVEWINDOWTRACKING = SYSTEM_PARAMETERS_INFO_ACTION.GETACTIVEWINDOWTRACKING;
pub const SPI_SETACTIVEWINDOWTRACKING = SYSTEM_PARAMETERS_INFO_ACTION.SETACTIVEWINDOWTRACKING;
pub const SPI_GETMENUANIMATION = SYSTEM_PARAMETERS_INFO_ACTION.GETMENUANIMATION;
pub const SPI_SETMENUANIMATION = SYSTEM_PARAMETERS_INFO_ACTION.SETMENUANIMATION;
pub const SPI_GETCOMBOBOXANIMATION = SYSTEM_PARAMETERS_INFO_ACTION.GETCOMBOBOXANIMATION;
pub const SPI_SETCOMBOBOXANIMATION = SYSTEM_PARAMETERS_INFO_ACTION.SETCOMBOBOXANIMATION;
pub const SPI_GETLISTBOXSMOOTHSCROLLING = SYSTEM_PARAMETERS_INFO_ACTION.GETLISTBOXSMOOTHSCROLLING;
pub const SPI_SETLISTBOXSMOOTHSCROLLING = SYSTEM_PARAMETERS_INFO_ACTION.SETLISTBOXSMOOTHSCROLLING;
pub const SPI_GETGRADIENTCAPTIONS = SYSTEM_PARAMETERS_INFO_ACTION.GETGRADIENTCAPTIONS;
pub const SPI_SETGRADIENTCAPTIONS = SYSTEM_PARAMETERS_INFO_ACTION.SETGRADIENTCAPTIONS;
pub const SPI_GETKEYBOARDCUES = SYSTEM_PARAMETERS_INFO_ACTION.GETKEYBOARDCUES;
pub const SPI_SETKEYBOARDCUES = SYSTEM_PARAMETERS_INFO_ACTION.SETKEYBOARDCUES;
pub const SPI_GETMENUUNDERLINES = SYSTEM_PARAMETERS_INFO_ACTION.GETMENUUNDERLINES;
pub const SPI_SETMENUUNDERLINES = SYSTEM_PARAMETERS_INFO_ACTION.SETMENUUNDERLINES;
pub const SPI_GETACTIVEWNDTRKZORDER = SYSTEM_PARAMETERS_INFO_ACTION.GETACTIVEWNDTRKZORDER;
pub const SPI_SETACTIVEWNDTRKZORDER = SYSTEM_PARAMETERS_INFO_ACTION.SETACTIVEWNDTRKZORDER;
pub const SPI_GETHOTTRACKING = SYSTEM_PARAMETERS_INFO_ACTION.GETHOTTRACKING;
pub const SPI_SETHOTTRACKING = SYSTEM_PARAMETERS_INFO_ACTION.SETHOTTRACKING;
pub const SPI_GETMENUFADE = SYSTEM_PARAMETERS_INFO_ACTION.GETMENUFADE;
pub const SPI_SETMENUFADE = SYSTEM_PARAMETERS_INFO_ACTION.SETMENUFADE;
pub const SPI_GETSELECTIONFADE = SYSTEM_PARAMETERS_INFO_ACTION.GETSELECTIONFADE;
pub const SPI_SETSELECTIONFADE = SYSTEM_PARAMETERS_INFO_ACTION.SETSELECTIONFADE;
pub const SPI_GETTOOLTIPANIMATION = SYSTEM_PARAMETERS_INFO_ACTION.GETTOOLTIPANIMATION;
pub const SPI_SETTOOLTIPANIMATION = SYSTEM_PARAMETERS_INFO_ACTION.SETTOOLTIPANIMATION;
pub const SPI_GETTOOLTIPFADE = SYSTEM_PARAMETERS_INFO_ACTION.GETTOOLTIPFADE;
pub const SPI_SETTOOLTIPFADE = SYSTEM_PARAMETERS_INFO_ACTION.SETTOOLTIPFADE;
pub const SPI_GETCURSORSHADOW = SYSTEM_PARAMETERS_INFO_ACTION.GETCURSORSHADOW;
pub const SPI_SETCURSORSHADOW = SYSTEM_PARAMETERS_INFO_ACTION.SETCURSORSHADOW;
pub const SPI_GETMOUSESONAR = SYSTEM_PARAMETERS_INFO_ACTION.GETMOUSESONAR;
pub const SPI_SETMOUSESONAR = SYSTEM_PARAMETERS_INFO_ACTION.SETMOUSESONAR;
pub const SPI_GETMOUSECLICKLOCK = SYSTEM_PARAMETERS_INFO_ACTION.GETMOUSECLICKLOCK;
pub const SPI_SETMOUSECLICKLOCK = SYSTEM_PARAMETERS_INFO_ACTION.SETMOUSECLICKLOCK;
pub const SPI_GETMOUSEVANISH = SYSTEM_PARAMETERS_INFO_ACTION.GETMOUSEVANISH;
pub const SPI_SETMOUSEVANISH = SYSTEM_PARAMETERS_INFO_ACTION.SETMOUSEVANISH;
pub const SPI_GETFLATMENU = SYSTEM_PARAMETERS_INFO_ACTION.GETFLATMENU;
pub const SPI_SETFLATMENU = SYSTEM_PARAMETERS_INFO_ACTION.SETFLATMENU;
pub const SPI_GETDROPSHADOW = SYSTEM_PARAMETERS_INFO_ACTION.GETDROPSHADOW;
pub const SPI_SETDROPSHADOW = SYSTEM_PARAMETERS_INFO_ACTION.SETDROPSHADOW;
pub const SPI_GETBLOCKSENDINPUTRESETS = SYSTEM_PARAMETERS_INFO_ACTION.GETBLOCKSENDINPUTRESETS;
pub const SPI_SETBLOCKSENDINPUTRESETS = SYSTEM_PARAMETERS_INFO_ACTION.SETBLOCKSENDINPUTRESETS;
pub const SPI_GETUIEFFECTS = SYSTEM_PARAMETERS_INFO_ACTION.GETUIEFFECTS;
pub const SPI_SETUIEFFECTS = SYSTEM_PARAMETERS_INFO_ACTION.SETUIEFFECTS;
pub const SPI_GETDISABLEOVERLAPPEDCONTENT = SYSTEM_PARAMETERS_INFO_ACTION.GETDISABLEOVERLAPPEDCONTENT;
pub const SPI_SETDISABLEOVERLAPPEDCONTENT = SYSTEM_PARAMETERS_INFO_ACTION.SETDISABLEOVERLAPPEDCONTENT;
pub const SPI_GETCLIENTAREAANIMATION = SYSTEM_PARAMETERS_INFO_ACTION.GETCLIENTAREAANIMATION;
pub const SPI_SETCLIENTAREAANIMATION = SYSTEM_PARAMETERS_INFO_ACTION.SETCLIENTAREAANIMATION;
pub const SPI_GETCLEARTYPE = SYSTEM_PARAMETERS_INFO_ACTION.GETCLEARTYPE;
pub const SPI_SETCLEARTYPE = SYSTEM_PARAMETERS_INFO_ACTION.SETCLEARTYPE;
pub const SPI_GETSPEECHRECOGNITION = SYSTEM_PARAMETERS_INFO_ACTION.GETSPEECHRECOGNITION;
pub const SPI_SETSPEECHRECOGNITION = SYSTEM_PARAMETERS_INFO_ACTION.SETSPEECHRECOGNITION;
pub const SPI_GETCARETBROWSING = SYSTEM_PARAMETERS_INFO_ACTION.GETCARETBROWSING;
pub const SPI_SETCARETBROWSING = SYSTEM_PARAMETERS_INFO_ACTION.SETCARETBROWSING;
pub const SPI_GETTHREADLOCALINPUTSETTINGS = SYSTEM_PARAMETERS_INFO_ACTION.GETTHREADLOCALINPUTSETTINGS;
pub const SPI_SETTHREADLOCALINPUTSETTINGS = SYSTEM_PARAMETERS_INFO_ACTION.SETTHREADLOCALINPUTSETTINGS;
pub const SPI_GETSYSTEMLANGUAGEBAR = SYSTEM_PARAMETERS_INFO_ACTION.GETSYSTEMLANGUAGEBAR;
pub const SPI_SETSYSTEMLANGUAGEBAR = SYSTEM_PARAMETERS_INFO_ACTION.SETSYSTEMLANGUAGEBAR;
pub const SPI_GETFOREGROUNDLOCKTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.GETFOREGROUNDLOCKTIMEOUT;
pub const SPI_SETFOREGROUNDLOCKTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.SETFOREGROUNDLOCKTIMEOUT;
pub const SPI_GETACTIVEWNDTRKTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.GETACTIVEWNDTRKTIMEOUT;
pub const SPI_SETACTIVEWNDTRKTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.SETACTIVEWNDTRKTIMEOUT;
pub const SPI_GETFOREGROUNDFLASHCOUNT = SYSTEM_PARAMETERS_INFO_ACTION.GETFOREGROUNDFLASHCOUNT;
pub const SPI_SETFOREGROUNDFLASHCOUNT = SYSTEM_PARAMETERS_INFO_ACTION.SETFOREGROUNDFLASHCOUNT;
pub const SPI_GETCARETWIDTH = SYSTEM_PARAMETERS_INFO_ACTION.GETCARETWIDTH;
pub const SPI_SETCARETWIDTH = SYSTEM_PARAMETERS_INFO_ACTION.SETCARETWIDTH;
pub const SPI_GETMOUSECLICKLOCKTIME = SYSTEM_PARAMETERS_INFO_ACTION.GETMOUSECLICKLOCKTIME;
pub const SPI_SETMOUSECLICKLOCKTIME = SYSTEM_PARAMETERS_INFO_ACTION.SETMOUSECLICKLOCKTIME;
pub const SPI_GETFONTSMOOTHINGTYPE = SYSTEM_PARAMETERS_INFO_ACTION.GETFONTSMOOTHINGTYPE;
pub const SPI_SETFONTSMOOTHINGTYPE = SYSTEM_PARAMETERS_INFO_ACTION.SETFONTSMOOTHINGTYPE;
pub const SPI_GETFONTSMOOTHINGCONTRAST = SYSTEM_PARAMETERS_INFO_ACTION.GETFONTSMOOTHINGCONTRAST;
pub const SPI_SETFONTSMOOTHINGCONTRAST = SYSTEM_PARAMETERS_INFO_ACTION.SETFONTSMOOTHINGCONTRAST;
pub const SPI_GETFOCUSBORDERWIDTH = SYSTEM_PARAMETERS_INFO_ACTION.GETFOCUSBORDERWIDTH;
pub const SPI_SETFOCUSBORDERWIDTH = SYSTEM_PARAMETERS_INFO_ACTION.SETFOCUSBORDERWIDTH;
pub const SPI_GETFOCUSBORDERHEIGHT = SYSTEM_PARAMETERS_INFO_ACTION.GETFOCUSBORDERHEIGHT;
pub const SPI_SETFOCUSBORDERHEIGHT = SYSTEM_PARAMETERS_INFO_ACTION.SETFOCUSBORDERHEIGHT;
pub const SPI_GETFONTSMOOTHINGORIENTATION = SYSTEM_PARAMETERS_INFO_ACTION.GETFONTSMOOTHINGORIENTATION;
pub const SPI_SETFONTSMOOTHINGORIENTATION = SYSTEM_PARAMETERS_INFO_ACTION.SETFONTSMOOTHINGORIENTATION;
pub const SPI_GETMINIMUMHITRADIUS = SYSTEM_PARAMETERS_INFO_ACTION.GETMINIMUMHITRADIUS;
pub const SPI_SETMINIMUMHITRADIUS = SYSTEM_PARAMETERS_INFO_ACTION.SETMINIMUMHITRADIUS;
pub const SPI_GETMESSAGEDURATION = SYSTEM_PARAMETERS_INFO_ACTION.GETMESSAGEDURATION;
pub const SPI_SETMESSAGEDURATION = SYSTEM_PARAMETERS_INFO_ACTION.SETMESSAGEDURATION;
pub const SPI_GETCONTACTVISUALIZATION = SYSTEM_PARAMETERS_INFO_ACTION.GETCONTACTVISUALIZATION;
pub const SPI_SETCONTACTVISUALIZATION = SYSTEM_PARAMETERS_INFO_ACTION.SETCONTACTVISUALIZATION;
pub const SPI_GETGESTUREVISUALIZATION = SYSTEM_PARAMETERS_INFO_ACTION.GETGESTUREVISUALIZATION;
pub const SPI_SETGESTUREVISUALIZATION = SYSTEM_PARAMETERS_INFO_ACTION.SETGESTUREVISUALIZATION;
pub const SPI_GETMOUSEWHEELROUTING = SYSTEM_PARAMETERS_INFO_ACTION.GETMOUSEWHEELROUTING;
pub const SPI_SETMOUSEWHEELROUTING = SYSTEM_PARAMETERS_INFO_ACTION.SETMOUSEWHEELROUTING;
pub const SPI_GETPENVISUALIZATION = SYSTEM_PARAMETERS_INFO_ACTION.GETPENVISUALIZATION;
pub const SPI_SETPENVISUALIZATION = SYSTEM_PARAMETERS_INFO_ACTION.SETPENVISUALIZATION;
pub const SPI_GETPENARBITRATIONTYPE = SYSTEM_PARAMETERS_INFO_ACTION.GETPENARBITRATIONTYPE;
pub const SPI_SETPENARBITRATIONTYPE = SYSTEM_PARAMETERS_INFO_ACTION.SETPENARBITRATIONTYPE;
pub const SPI_GETCARETTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.GETCARETTIMEOUT;
pub const SPI_SETCARETTIMEOUT = SYSTEM_PARAMETERS_INFO_ACTION.SETCARETTIMEOUT;
pub const SPI_GETHANDEDNESS = SYSTEM_PARAMETERS_INFO_ACTION.GETHANDEDNESS;
pub const SPI_SETHANDEDNESS = SYSTEM_PARAMETERS_INFO_ACTION.SETHANDEDNESS;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const TRACK_POPUP_MENU_FLAGS = extern enum(u32) {
    LEFTBUTTON = 0,
    RIGHTBUTTON = 2,
    LEFTALIGN = 0,
    CENTERALIGN = 4,
    RIGHTALIGN = 8,
    TOPALIGN = 0,
    VCENTERALIGN = 16,
    BOTTOMALIGN = 32,
    HORIZONTAL = 0,
    VERTICAL = 64,
    NONOTIFY = 128,
    RETURNCMD = 256,
    RECURSE = 1,
    HORPOSANIMATION = 1024,
    HORNEGANIMATION = 2048,
    VERPOSANIMATION = 4096,
    VERNEGANIMATION = 8192,
    NOANIMATION = 16384,
    LAYOUTRTL = 32768,
    WORKAREA = 65536,
    _,
};
pub const TPM_LEFTBUTTON = TRACK_POPUP_MENU_FLAGS.LEFTBUTTON;
pub const TPM_RIGHTBUTTON = TRACK_POPUP_MENU_FLAGS.RIGHTBUTTON;
pub const TPM_LEFTALIGN = TRACK_POPUP_MENU_FLAGS.LEFTALIGN;
pub const TPM_CENTERALIGN = TRACK_POPUP_MENU_FLAGS.CENTERALIGN;
pub const TPM_RIGHTALIGN = TRACK_POPUP_MENU_FLAGS.RIGHTALIGN;
pub const TPM_TOPALIGN = TRACK_POPUP_MENU_FLAGS.TOPALIGN;
pub const TPM_VCENTERALIGN = TRACK_POPUP_MENU_FLAGS.VCENTERALIGN;
pub const TPM_BOTTOMALIGN = TRACK_POPUP_MENU_FLAGS.BOTTOMALIGN;
pub const TPM_HORIZONTAL = TRACK_POPUP_MENU_FLAGS.HORIZONTAL;
pub const TPM_VERTICAL = TRACK_POPUP_MENU_FLAGS.VERTICAL;
pub const TPM_NONOTIFY = TRACK_POPUP_MENU_FLAGS.NONOTIFY;
pub const TPM_RETURNCMD = TRACK_POPUP_MENU_FLAGS.RETURNCMD;
pub const TPM_RECURSE = TRACK_POPUP_MENU_FLAGS.RECURSE;
pub const TPM_HORPOSANIMATION = TRACK_POPUP_MENU_FLAGS.HORPOSANIMATION;
pub const TPM_HORNEGANIMATION = TRACK_POPUP_MENU_FLAGS.HORNEGANIMATION;
pub const TPM_VERPOSANIMATION = TRACK_POPUP_MENU_FLAGS.VERPOSANIMATION;
pub const TPM_VERNEGANIMATION = TRACK_POPUP_MENU_FLAGS.VERNEGANIMATION;
pub const TPM_NOANIMATION = TRACK_POPUP_MENU_FLAGS.NOANIMATION;
pub const TPM_LAYOUTRTL = TRACK_POPUP_MENU_FLAGS.LAYOUTRTL;
pub const TPM_WORKAREA = TRACK_POPUP_MENU_FLAGS.WORKAREA;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const WINDOWS_EX_STYLE = extern enum(u32) {
    DLGMODALFRAME = 1,
    NOPARENTNOTIFY = 4,
    TOPMOST = 8,
    ACCEPTFILES = 16,
    TRANSPARENT = 32,
    MDICHILD = 64,
    TOOLWINDOW = 128,
    WINDOWEDGE = 256,
    CLIENTEDGE = 512,
    CONTEXTHELP = 1024,
    RIGHT = 4096,
    LEFT = 0,
    RTLREADING = 8192,
    LTRREADING = 0,
    LEFTSCROLLBAR = 16384,
    RIGHTSCROLLBAR = 0,
    CONTROLPARENT = 65536,
    STATICEDGE = 131072,
    APPWINDOW = 262144,
    OVERLAPPEDWINDOW = 768,
    PALETTEWINDOW = 392,
    LAYERED = 524288,
    NOINHERITLAYOUT = 1048576,
    NOREDIRECTIONBITMAP = 2097152,
    LAYOUTRTL = 4194304,
    COMPOSITED = 33554432,
    NOACTIVATE = 134217728,
    _,
};
pub const WS_EX_DLGMODALFRAME = WINDOWS_EX_STYLE.DLGMODALFRAME;
pub const WS_EX_NOPARENTNOTIFY = WINDOWS_EX_STYLE.NOPARENTNOTIFY;
pub const WS_EX_TOPMOST = WINDOWS_EX_STYLE.TOPMOST;
pub const WS_EX_ACCEPTFILES = WINDOWS_EX_STYLE.ACCEPTFILES;
pub const WS_EX_TRANSPARENT = WINDOWS_EX_STYLE.TRANSPARENT;
pub const WS_EX_MDICHILD = WINDOWS_EX_STYLE.MDICHILD;
pub const WS_EX_TOOLWINDOW = WINDOWS_EX_STYLE.TOOLWINDOW;
pub const WS_EX_WINDOWEDGE = WINDOWS_EX_STYLE.WINDOWEDGE;
pub const WS_EX_CLIENTEDGE = WINDOWS_EX_STYLE.CLIENTEDGE;
pub const WS_EX_CONTEXTHELP = WINDOWS_EX_STYLE.CONTEXTHELP;
pub const WS_EX_RIGHT = WINDOWS_EX_STYLE.RIGHT;
pub const WS_EX_LEFT = WINDOWS_EX_STYLE.LEFT;
pub const WS_EX_RTLREADING = WINDOWS_EX_STYLE.RTLREADING;
pub const WS_EX_LTRREADING = WINDOWS_EX_STYLE.LTRREADING;
pub const WS_EX_LEFTSCROLLBAR = WINDOWS_EX_STYLE.LEFTSCROLLBAR;
pub const WS_EX_RIGHTSCROLLBAR = WINDOWS_EX_STYLE.RIGHTSCROLLBAR;
pub const WS_EX_CONTROLPARENT = WINDOWS_EX_STYLE.CONTROLPARENT;
pub const WS_EX_STATICEDGE = WINDOWS_EX_STYLE.STATICEDGE;
pub const WS_EX_APPWINDOW = WINDOWS_EX_STYLE.APPWINDOW;
pub const WS_EX_OVERLAPPEDWINDOW = WINDOWS_EX_STYLE.OVERLAPPEDWINDOW;
pub const WS_EX_PALETTEWINDOW = WINDOWS_EX_STYLE.PALETTEWINDOW;
pub const WS_EX_LAYERED = WINDOWS_EX_STYLE.LAYERED;
pub const WS_EX_NOINHERITLAYOUT = WINDOWS_EX_STYLE.NOINHERITLAYOUT;
pub const WS_EX_NOREDIRECTIONBITMAP = WINDOWS_EX_STYLE.NOREDIRECTIONBITMAP;
pub const WS_EX_LAYOUTRTL = WINDOWS_EX_STYLE.LAYOUTRTL;
pub const WS_EX_COMPOSITED = WINDOWS_EX_STYLE.COMPOSITED;
pub const WS_EX_NOACTIVATE = WINDOWS_EX_STYLE.NOACTIVATE;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const WINDOWS_STYLE = extern enum(u32) {
    OVERLAPPED = 0,
    POPUP = 2147483648,
    CHILD = 1073741824,
    MINIMIZE = 536870912,
    MAXIMIZE = 16777216,
    HSCROLL = 1048576,
    VSCROLL = 2097152,
    VISIBLE = 268435456,
    DISABLED = 134217728,
    CLIPSIBLINGS = 67108864,
    CLIPCHILDREN = 33554432,
    CAPTION = 12582912,
    BORDER = 8388608,
    DLGFRAME = 4194304,
    SYSMENU = 524288,
    THICKFRAME = 262144,
    GROUP = 131072,
    TABSTOP = 65536,
    MINIMIZEBOX = 131072,
    MAXIMIZEBOX = 65536,
    TILED = 0,
    ICONIC = 536870912,
    SIZEBOX = 262144,
    TILEDWINDOW = 13565952,
    OVERLAPPEDWINDOW = 13565952,
    POPUPWINDOW = 2156396544,
    CHILDWINDOW = 1073741824,
    ACTIVECAPTION = 1,
    _,
};
pub const WS_OVERLAPPED = WINDOWS_STYLE.OVERLAPPED;
pub const WS_POPUP = WINDOWS_STYLE.POPUP;
pub const WS_CHILD = WINDOWS_STYLE.CHILD;
pub const WS_MINIMIZE = WINDOWS_STYLE.MINIMIZE;
pub const WS_MAXIMIZE = WINDOWS_STYLE.MAXIMIZE;
pub const WS_HSCROLL = WINDOWS_STYLE.HSCROLL;
pub const WS_VSCROLL = WINDOWS_STYLE.VSCROLL;
pub const WS_VISIBLE = WINDOWS_STYLE.VISIBLE;
pub const WS_DISABLED = WINDOWS_STYLE.DISABLED;
pub const WS_CLIPSIBLINGS = WINDOWS_STYLE.CLIPSIBLINGS;
pub const WS_CLIPCHILDREN = WINDOWS_STYLE.CLIPCHILDREN;
pub const WS_CAPTION = WINDOWS_STYLE.CAPTION;
pub const WS_BORDER = WINDOWS_STYLE.BORDER;
pub const WS_DLGFRAME = WINDOWS_STYLE.DLGFRAME;
pub const WS_SYSMENU = WINDOWS_STYLE.SYSMENU;
pub const WS_THICKFRAME = WINDOWS_STYLE.THICKFRAME;
pub const WS_GROUP = WINDOWS_STYLE.GROUP;
pub const WS_TABSTOP = WINDOWS_STYLE.TABSTOP;
pub const WS_MINIMIZEBOX = WINDOWS_STYLE.MINIMIZEBOX;
pub const WS_MAXIMIZEBOX = WINDOWS_STYLE.MAXIMIZEBOX;
pub const WS_TILED = WINDOWS_STYLE.TILED;
pub const WS_ICONIC = WINDOWS_STYLE.ICONIC;
pub const WS_SIZEBOX = WINDOWS_STYLE.SIZEBOX;
pub const WS_TILEDWINDOW = WINDOWS_STYLE.TILEDWINDOW;
pub const WS_OVERLAPPEDWINDOW = WINDOWS_STYLE.OVERLAPPEDWINDOW;
pub const WS_POPUPWINDOW = WINDOWS_STYLE.POPUPWINDOW;
pub const WS_CHILDWINDOW = WINDOWS_STYLE.CHILDWINDOW;
pub const WS_ACTIVECAPTION = WINDOWS_STYLE.ACTIVECAPTION;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const MENU_ITEM_TYPE = extern enum(u32) {
    BITMAP = 4,
    MENUBARBREAK = 32,
    MENUBREAK = 64,
    OWNERDRAW = 256,
    RADIOCHECK = 512,
    RIGHTJUSTIFY = 16384,
    RIGHTORDER = 8192,
    SEPARATOR = 2048,
    STRING = 0,
    _,
};
pub const MFT_BITMAP = MENU_ITEM_TYPE.BITMAP;
pub const MFT_MENUBARBREAK = MENU_ITEM_TYPE.MENUBARBREAK;
pub const MFT_MENUBREAK = MENU_ITEM_TYPE.MENUBREAK;
pub const MFT_OWNERDRAW = MENU_ITEM_TYPE.OWNERDRAW;
pub const MFT_RADIOCHECK = MENU_ITEM_TYPE.RADIOCHECK;
pub const MFT_RIGHTJUSTIFY = MENU_ITEM_TYPE.RIGHTJUSTIFY;
pub const MFT_RIGHTORDER = MENU_ITEM_TYPE.RIGHTORDER;
pub const MFT_SEPARATOR = MENU_ITEM_TYPE.SEPARATOR;
pub const MFT_STRING = MENU_ITEM_TYPE.STRING;

pub const SetCoalescableTimer_uToleranceDelayFlags = extern enum(u32) {
    DEFAULT_COALESCING = 0,
    NO_COALESCING = 4294967295,
};
pub const TIMERV_DEFAULT_COALESCING = SetCoalescableTimer_uToleranceDelayFlags.DEFAULT_COALESCING;
pub const TIMERV_NO_COALESCING = SetCoalescableTimer_uToleranceDelayFlags.NO_COALESCING;

pub const GetClassLong_nIndex = extern enum(i32) {
    W_ATOM = -32,
    L_CBCLSEXTRA = -20,
    L_CBWNDEXTRA = -18,
    L_HBRBACKGROUND = -10,
    L_HCURSOR = -12,
    L_HICON = -14,
    L_HICONSM = -34,
    L_HMODULE = -16,
    L_MENUNAME = -8,
    L_STYLE = -26,
    L_WNDPROC = -24,
    LP_HBRBACKGROUND = -10,
    LP_HCURSOR = -12,
    LP_HICON = -14,
    LP_HICONSM = -34,
    LP_HMODULE = -16,
    LP_MENUNAME = -8,
    LP_WNDPROC = -24,
};
pub const GCW_ATOM = GetClassLong_nIndex.W_ATOM;
pub const GCL_CBCLSEXTRA = GetClassLong_nIndex.L_CBCLSEXTRA;
pub const GCL_CBWNDEXTRA = GetClassLong_nIndex.L_CBWNDEXTRA;
pub const GCL_HBRBACKGROUND = GetClassLong_nIndex.L_HBRBACKGROUND;
pub const GCL_HCURSOR = GetClassLong_nIndex.L_HCURSOR;
pub const GCL_HICON = GetClassLong_nIndex.L_HICON;
pub const GCL_HICONSM = GetClassLong_nIndex.L_HICONSM;
pub const GCL_HMODULE = GetClassLong_nIndex.L_HMODULE;
pub const GCL_MENUNAME = GetClassLong_nIndex.L_MENUNAME;
pub const GCL_STYLE = GetClassLong_nIndex.L_STYLE;
pub const GCL_WNDPROC = GetClassLong_nIndex.L_WNDPROC;
pub const GCLP_HBRBACKGROUND = GetClassLong_nIndex.LP_HBRBACKGROUND;
pub const GCLP_HCURSOR = GetClassLong_nIndex.LP_HCURSOR;
pub const GCLP_HICON = GetClassLong_nIndex.LP_HICON;
pub const GCLP_HICONSM = GetClassLong_nIndex.LP_HICONSM;
pub const GCLP_HMODULE = GetClassLong_nIndex.LP_HMODULE;
pub const GCLP_MENUNAME = GetClassLong_nIndex.LP_MENUNAME;
pub const GCLP_WNDPROC = GetClassLong_nIndex.LP_WNDPROC;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const BroadcastSystemMessage_flags = extern enum(u32) {
    ALLOWSFW = 128,
    FLUSHDISK = 4,
    FORCEIFHUNG = 32,
    IGNORECURRENTTASK = 2,
    NOHANG = 8,
    NOTIMEOUTIFNOTHUNG = 64,
    POSTMESSAGE = 16,
    QUERY = 1,
    SENDNOTIFYMESSAGE = 256,
    LUID = 1024,
    RETURNHDESK = 512,
    _,
};
pub const BSF_ALLOWSFW = BroadcastSystemMessage_flags.ALLOWSFW;
pub const BSF_FLUSHDISK = BroadcastSystemMessage_flags.FLUSHDISK;
pub const BSF_FORCEIFHUNG = BroadcastSystemMessage_flags.FORCEIFHUNG;
pub const BSF_IGNORECURRENTTASK = BroadcastSystemMessage_flags.IGNORECURRENTTASK;
pub const BSF_NOHANG = BroadcastSystemMessage_flags.NOHANG;
pub const BSF_NOTIMEOUTIFNOTHUNG = BroadcastSystemMessage_flags.NOTIMEOUTIFNOTHUNG;
pub const BSF_POSTMESSAGE = BroadcastSystemMessage_flags.POSTMESSAGE;
pub const BSF_QUERY = BroadcastSystemMessage_flags.QUERY;
pub const BSF_SENDNOTIFYMESSAGE = BroadcastSystemMessage_flags.SENDNOTIFYMESSAGE;
pub const BSF_LUID = BroadcastSystemMessage_flags.LUID;
pub const BSF_RETURNHDESK = BroadcastSystemMessage_flags.RETURNHDESK;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const String_dwFlags = extern enum(u32) {
    FILL_BEHIND_NULL = 512,
    IGNORE_NULLS = 256,
    FILL_ON_FAILURE = 1024,
    NULL_ON_FAILURE = 2048,
    NO_TRUNCATION = 4096,
    _,
};
pub const STRSAFE_FILL_BEHIND_NULL = String_dwFlags.FILL_BEHIND_NULL;
pub const STRSAFE_IGNORE_NULLS = String_dwFlags.IGNORE_NULLS;
pub const STRSAFE_FILL_ON_FAILURE = String_dwFlags.FILL_ON_FAILURE;
pub const STRSAFE_NULL_ON_FAILURE = String_dwFlags.NULL_ON_FAILURE;
pub const STRSAFE_NO_TRUNCATION = String_dwFlags.NO_TRUNCATION;

pub const GetIconInfo_hicon = extern enum(u32) {
    APPLICATION = 32512,
    ASTERISK = 32516,
    EXCLAMATION = 32515,
    HAND = 32513,
    QUESTION = 32514,
    WINLOGO = 32517,
    ERROR = 32513,
    INFORMATION = 32516,
    SHIELD = 32518,
    WARNING = 32515,
};
// TODO: enum 'GetIconInfo_hicon' has known issues with its value aliases

pub const UpdateLayeredWindow_dwFlags = extern enum(u32) {
    ALPHA = 2,
    COLORKEY = 1,
    OPAQUE = 4,
    EX_NORESIZE = 8,
};
pub const ULW_ALPHA = UpdateLayeredWindow_dwFlags.ALPHA;
pub const ULW_COLORKEY = UpdateLayeredWindow_dwFlags.COLORKEY;
pub const ULW_OPAQUE = UpdateLayeredWindow_dwFlags.OPAQUE;
pub const ULW_EX_NORESIZE = UpdateLayeredWindow_dwFlags.EX_NORESIZE;

pub const GetWindowLongPtr_nIndex = extern enum(i32) {
    _EXSTYLE = -20,
    P_HINSTANCE = -6,
    P_HWNDPARENT = -8,
    P_ID = -12,
    _STYLE = -16,
    P_USERDATA = -21,
    P_WNDPROC = -4,
    _HINSTANCE = -6,
    _ID = -12,
    _USERDATA = -21,
    _WNDPROC = -4,
    _HWNDPARENT = -8,
};
pub const GWL_EXSTYLE = GetWindowLongPtr_nIndex._EXSTYLE;
pub const GWLP_HINSTANCE = GetWindowLongPtr_nIndex.P_HINSTANCE;
pub const GWLP_HWNDPARENT = GetWindowLongPtr_nIndex.P_HWNDPARENT;
pub const GWLP_ID = GetWindowLongPtr_nIndex.P_ID;
pub const GWL_STYLE = GetWindowLongPtr_nIndex._STYLE;
pub const GWLP_USERDATA = GetWindowLongPtr_nIndex.P_USERDATA;
pub const GWLP_WNDPROC = GetWindowLongPtr_nIndex.P_WNDPROC;
pub const GWL_HINSTANCE = GetWindowLongPtr_nIndex._HINSTANCE;
pub const GWL_ID = GetWindowLongPtr_nIndex._ID;
pub const GWL_USERDATA = GetWindowLongPtr_nIndex._USERDATA;
pub const GWL_WNDPROC = GetWindowLongPtr_nIndex._WNDPROC;
pub const GWL_HWNDPARENT = GetWindowLongPtr_nIndex._HWNDPARENT;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const AnimateWindow_dwFlags = extern enum(u32) {
    ACTIVATE = 131072,
    BLEND = 524288,
    CENTER = 16,
    HIDE = 65536,
    HOR_POSITIVE = 1,
    HOR_NEGATIVE = 2,
    SLIDE = 262144,
    VER_POSITIVE = 4,
    VER_NEGATIVE = 8,
    _,
};
pub const AW_ACTIVATE = AnimateWindow_dwFlags.ACTIVATE;
pub const AW_BLEND = AnimateWindow_dwFlags.BLEND;
pub const AW_CENTER = AnimateWindow_dwFlags.CENTER;
pub const AW_HIDE = AnimateWindow_dwFlags.HIDE;
pub const AW_HOR_POSITIVE = AnimateWindow_dwFlags.HOR_POSITIVE;
pub const AW_HOR_NEGATIVE = AnimateWindow_dwFlags.HOR_NEGATIVE;
pub const AW_SLIDE = AnimateWindow_dwFlags.SLIDE;
pub const AW_VER_POSITIVE = AnimateWindow_dwFlags.VER_POSITIVE;
pub const AW_VER_NEGATIVE = AnimateWindow_dwFlags.VER_NEGATIVE;

pub const ChangeWindowMessageFilter_dwFlagFlags = extern enum(u32) {
    ADD = 1,
    REMOVE = 2,
};
pub const MSGFLT_ADD = ChangeWindowMessageFilter_dwFlagFlags.ADD;
pub const MSGFLT_REMOVE = ChangeWindowMessageFilter_dwFlagFlags.REMOVE;

pub const CopyImage_type = extern enum(u32) {
    BITMAP = 0,
    CURSOR = 2,
    ICON = 1,
};
pub const IMAGE_BITMAP = CopyImage_type.BITMAP;
pub const IMAGE_CURSOR = CopyImage_type.CURSOR;
pub const IMAGE_ICON = CopyImage_type.ICON;

pub const VerInstallFile_uFlags = extern enum(u32) {
    FORCEINSTALL = 1,
    DONTDELETEOLD = 2,
};
pub const VIFF_FORCEINSTALL = VerInstallFile_uFlags.FORCEINSTALL;
pub const VIFF_DONTDELETEOLD = VerInstallFile_uFlags.DONTDELETEOLD;

pub const SetWindowsHookEx_idHook = extern enum(i32) {
    CALLWNDPROC = 4,
    CALLWNDPROCRET = 12,
    CBT = 5,
    DEBUG = 9,
    FOREGROUNDIDLE = 11,
    GETMESSAGE = 3,
    JOURNALPLAYBACK = 1,
    JOURNALRECORD = 0,
    KEYBOARD = 2,
    KEYBOARD_LL = 13,
    MOUSE = 7,
    MOUSE_LL = 14,
    MSGFILTER = -1,
    SHELL = 10,
    SYSMSGFILTER = 6,
};
pub const WH_CALLWNDPROC = SetWindowsHookEx_idHook.CALLWNDPROC;
pub const WH_CALLWNDPROCRET = SetWindowsHookEx_idHook.CALLWNDPROCRET;
pub const WH_CBT = SetWindowsHookEx_idHook.CBT;
pub const WH_DEBUG = SetWindowsHookEx_idHook.DEBUG;
pub const WH_FOREGROUNDIDLE = SetWindowsHookEx_idHook.FOREGROUNDIDLE;
pub const WH_GETMESSAGE = SetWindowsHookEx_idHook.GETMESSAGE;
pub const WH_JOURNALPLAYBACK = SetWindowsHookEx_idHook.JOURNALPLAYBACK;
pub const WH_JOURNALRECORD = SetWindowsHookEx_idHook.JOURNALRECORD;
pub const WH_KEYBOARD = SetWindowsHookEx_idHook.KEYBOARD;
pub const WH_KEYBOARD_LL = SetWindowsHookEx_idHook.KEYBOARD_LL;
pub const WH_MOUSE = SetWindowsHookEx_idHook.MOUSE;
pub const WH_MOUSE_LL = SetWindowsHookEx_idHook.MOUSE_LL;
pub const WH_MSGFILTER = SetWindowsHookEx_idHook.MSGFILTER;
pub const WH_SHELL = SetWindowsHookEx_idHook.SHELL;
pub const WH_SYSMSGFILTER = SetWindowsHookEx_idHook.SYSMSGFILTER;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const BroadcastSystemMessage_lpInfo = extern enum(u32) {
    LLCOMPONENTS = 0,
    LLDESKTOPS = 16,
    PPLICATIONS = 8,
    _,
};
pub const BSM_ALLCOMPONENTS = BroadcastSystemMessage_lpInfo.LLCOMPONENTS;
pub const BSM_ALLDESKTOPS = BroadcastSystemMessage_lpInfo.LLDESKTOPS;
pub const BSM_APPLICATIONS = BroadcastSystemMessage_lpInfo.PPLICATIONS;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const SystemParametersInfo_fWinIni = extern enum(u32) {
    UPDATEINIFILE = 1,
    SENDCHANGE = 2,
    SENDWININICHANGE = 2,
    _,
};
pub const SPIF_UPDATEINIFILE = SystemParametersInfo_fWinIni.UPDATEINIFILE;
pub const SPIF_SENDCHANGE = SystemParametersInfo_fWinIni.SENDCHANGE;
pub const SPIF_SENDWININICHANGE = SystemParametersInfo_fWinIni.SENDWININICHANGE;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const SetWindowPos_uFlags = extern enum(u32) {
    ASYNCWINDOWPOS = 16384,
    DEFERERASE = 8192,
    DRAWFRAME = 32,
    FRAMECHANGED = 32,
    HIDEWINDOW = 128,
    NOACTIVATE = 16,
    NOCOPYBITS = 256,
    NOMOVE = 2,
    NOOWNERZORDER = 512,
    NOREDRAW = 8,
    NOREPOSITION = 512,
    NOSENDCHANGING = 1024,
    NOSIZE = 1,
    NOZORDER = 4,
    SHOWWINDOW = 64,
    _NOOWNERZORDER = 512,
    _,
};
pub const SWP_ASYNCWINDOWPOS = SetWindowPos_uFlags.ASYNCWINDOWPOS;
pub const SWP_DEFERERASE = SetWindowPos_uFlags.DEFERERASE;
pub const SWP_DRAWFRAME = SetWindowPos_uFlags.DRAWFRAME;
pub const SWP_FRAMECHANGED = SetWindowPos_uFlags.FRAMECHANGED;
pub const SWP_HIDEWINDOW = SetWindowPos_uFlags.HIDEWINDOW;
pub const SWP_NOACTIVATE = SetWindowPos_uFlags.NOACTIVATE;
pub const SWP_NOCOPYBITS = SetWindowPos_uFlags.NOCOPYBITS;
pub const SWP_NOMOVE = SetWindowPos_uFlags.NOMOVE;
pub const SWP_NOOWNERZORDER = SetWindowPos_uFlags.NOOWNERZORDER;
pub const SWP_NOREDRAW = SetWindowPos_uFlags.NOREDRAW;
pub const SWP_NOREPOSITION = SetWindowPos_uFlags.NOREPOSITION;
pub const SWP_NOSENDCHANGING = SetWindowPos_uFlags.NOSENDCHANGING;
pub const SWP_NOSIZE = SetWindowPos_uFlags.NOSIZE;
pub const SWP_NOZORDER = SetWindowPos_uFlags.NOZORDER;
pub const SWP_SHOWWINDOW = SetWindowPos_uFlags.SHOWWINDOW;
pub const SWP__NOOWNERZORDER = SetWindowPos_uFlags._NOOWNERZORDER;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const GetQueueStatus_flags = extern enum(u32) {
    ALLEVENTS = 1215,
    ALLINPUT = 1279,
    ALLPOSTMESSAGE = 256,
    HOTKEY = 128,
    INPUT = 1031,
    KEY = 1,
    MOUSE = 6,
    MOUSEBUTTON = 4,
    MOUSEMOVE = 2,
    PAINT = 32,
    POSTMESSAGE = 8,
    RAWINPUT = 1024,
    SENDMESSAGE = 64,
    TIMER = 16,
    _,
};
pub const QS_ALLEVENTS = GetQueueStatus_flags.ALLEVENTS;
pub const QS_ALLINPUT = GetQueueStatus_flags.ALLINPUT;
pub const QS_ALLPOSTMESSAGE = GetQueueStatus_flags.ALLPOSTMESSAGE;
pub const QS_HOTKEY = GetQueueStatus_flags.HOTKEY;
pub const QS_INPUT = GetQueueStatus_flags.INPUT;
pub const QS_KEY = GetQueueStatus_flags.KEY;
pub const QS_MOUSE = GetQueueStatus_flags.MOUSE;
pub const QS_MOUSEBUTTON = GetQueueStatus_flags.MOUSEBUTTON;
pub const QS_MOUSEMOVE = GetQueueStatus_flags.MOUSEMOVE;
pub const QS_PAINT = GetQueueStatus_flags.PAINT;
pub const QS_POSTMESSAGE = GetQueueStatus_flags.POSTMESSAGE;
pub const QS_RAWINPUT = GetQueueStatus_flags.RAWINPUT;
pub const QS_SENDMESSAGE = GetQueueStatus_flags.SENDMESSAGE;
pub const QS_TIMER = GetQueueStatus_flags.TIMER;

pub const SetSystemCursor_idFlags = extern enum(u32) {
    APPSTARTING = 32650,
    NORMAL = 32512,
    CROSS = 32515,
    HAND = 32649,
    HELP = 32651,
    IBEAM = 32513,
    NO = 32648,
    SIZEALL = 32646,
    SIZENESW = 32643,
    SIZENS = 32645,
    SIZENWSE = 32642,
    SIZEWE = 32644,
    UP = 32516,
    WAIT = 32514,
};
pub const OCR_APPSTARTING = SetSystemCursor_idFlags.APPSTARTING;
pub const OCR_NORMAL = SetSystemCursor_idFlags.NORMAL;
pub const OCR_CROSS = SetSystemCursor_idFlags.CROSS;
pub const OCR_HAND = SetSystemCursor_idFlags.HAND;
pub const OCR_HELP = SetSystemCursor_idFlags.HELP;
pub const OCR_IBEAM = SetSystemCursor_idFlags.IBEAM;
pub const OCR_NO = SetSystemCursor_idFlags.NO;
pub const OCR_SIZEALL = SetSystemCursor_idFlags.SIZEALL;
pub const OCR_SIZENESW = SetSystemCursor_idFlags.SIZENESW;
pub const OCR_SIZENS = SetSystemCursor_idFlags.SIZENS;
pub const OCR_SIZENWSE = SetSystemCursor_idFlags.SIZENWSE;
pub const OCR_SIZEWE = SetSystemCursor_idFlags.SIZEWE;
pub const OCR_UP = SetSystemCursor_idFlags.UP;
pub const OCR_WAIT = SetSystemCursor_idFlags.WAIT;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const SetLayeredWindowAttributes_dwFlags = extern enum(u32) {
    ALPHA = 2,
    COLORKEY = 1,
    _,
};
pub const LWA_ALPHA = SetLayeredWindowAttributes_dwFlags.ALPHA;
pub const LWA_COLORKEY = SetLayeredWindowAttributes_dwFlags.COLORKEY;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const SendMessageTimeout_fuFlags = extern enum(u32) {
    ABORTIFHUNG = 2,
    BLOCK = 1,
    NORMAL = 0,
    NOTIMEOUTIFNOTHUNG = 8,
    ERRORONEXIT = 32,
    _,
};
pub const SMTO_ABORTIFHUNG = SendMessageTimeout_fuFlags.ABORTIFHUNG;
pub const SMTO_BLOCK = SendMessageTimeout_fuFlags.BLOCK;
pub const SMTO_NORMAL = SendMessageTimeout_fuFlags.NORMAL;
pub const SMTO_NOTIMEOUTIFNOTHUNG = SendMessageTimeout_fuFlags.NOTIMEOUTIFNOTHUNG;
pub const SMTO_ERRORONEXIT = SendMessageTimeout_fuFlags.ERRORONEXIT;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const PeekMessage_wRemoveMsg = extern enum(u32) {
    NOREMOVE = 0,
    REMOVE = 1,
    NOYIELD = 2,
    _,
};
pub const PM_NOREMOVE = PeekMessage_wRemoveMsg.NOREMOVE;
pub const PM_REMOVE = PeekMessage_wRemoveMsg.REMOVE;
pub const PM_NOYIELD = PeekMessage_wRemoveMsg.NOYIELD;

pub const GetSysColor_nIndexFlags = extern enum(u32) {
    COLOR_3DDKSHADOW = 21,
    COLOR_3DFACE = 15,
    COLOR_3DHIGHLIGHT = 20,
    COLOR_3DHILIGHT = 20,
    COLOR_3DLIGHT = 22,
    COLOR_3DSHADOW = 16,
    COLOR_ACTIVEBORDER = 10,
    COLOR_ACTIVECAPTION = 2,
    COLOR_APPWORKSPACE = 12,
    COLOR_BACKGROUND = 1,
    COLOR_BTNFACE = 15,
    _COLOR_BTNHIGHLIGHT = 20,
    _COLOR_BTNHILIGHT = 20,
    COLOR_BTNSHADOW = 16,
    COLOR_BTNTEXT = 18,
    COLOR_CAPTIONTEXT = 9,
    COLOR_DESKTOP = 1,
    COLOR_GRADIENTACTIVECAPTION = 27,
    COLOR_GRADIENTINACTIVECAPTION = 28,
    COLOR_GRAYTEXT = 17,
    COLOR_HIGHLIGHT = 13,
    COLOR_HIGHLIGHTTEXT = 14,
    COLOR_HOTLIGHT = 26,
    COLOR_INACTIVEBORDER = 11,
    COLOR_INACTIVECAPTION = 3,
    COLOR_INACTIVECAPTIONTEXT = 19,
    COLOR_INFOBK = 24,
    COLOR_INFOTEXT = 23,
    COLOR_MENU = 4,
    COLOR_MENUHILIGHT = 29,
    COLOR_MENUBAR = 30,
    COLOR_MENUTEXT = 7,
    COLOR_SCROLLBAR = 0,
    COLOR_WINDOW = 5,
    COLOR_WINDOWFRAME = 6,
    COLOR_WINDOWTEXT = 8,
};
pub const COLOR_3DDKSHADOW = GetSysColor_nIndexFlags.COLOR_3DDKSHADOW;
pub const COLOR_3DFACE = GetSysColor_nIndexFlags.COLOR_3DFACE;
pub const COLOR_3DHIGHLIGHT = GetSysColor_nIndexFlags.COLOR_3DHIGHLIGHT;
pub const COLOR_3DHILIGHT = GetSysColor_nIndexFlags.COLOR_3DHILIGHT;
pub const COLOR_3DLIGHT = GetSysColor_nIndexFlags.COLOR_3DLIGHT;
pub const COLOR_3DSHADOW = GetSysColor_nIndexFlags.COLOR_3DSHADOW;
pub const COLOR_ACTIVEBORDER = GetSysColor_nIndexFlags.COLOR_ACTIVEBORDER;
pub const COLOR_ACTIVECAPTION = GetSysColor_nIndexFlags.COLOR_ACTIVECAPTION;
pub const COLOR_APPWORKSPACE = GetSysColor_nIndexFlags.COLOR_APPWORKSPACE;
pub const COLOR_BACKGROUND = GetSysColor_nIndexFlags.COLOR_BACKGROUND;
pub const COLOR_BTNFACE = GetSysColor_nIndexFlags.COLOR_BTNFACE;
pub const _COLOR_BTNHIGHLIGHT = GetSysColor_nIndexFlags._COLOR_BTNHIGHLIGHT;
pub const _COLOR_BTNHILIGHT = GetSysColor_nIndexFlags._COLOR_BTNHILIGHT;
pub const COLOR_BTNSHADOW = GetSysColor_nIndexFlags.COLOR_BTNSHADOW;
pub const COLOR_BTNTEXT = GetSysColor_nIndexFlags.COLOR_BTNTEXT;
pub const COLOR_CAPTIONTEXT = GetSysColor_nIndexFlags.COLOR_CAPTIONTEXT;
pub const COLOR_DESKTOP = GetSysColor_nIndexFlags.COLOR_DESKTOP;
pub const COLOR_GRADIENTACTIVECAPTION = GetSysColor_nIndexFlags.COLOR_GRADIENTACTIVECAPTION;
pub const COLOR_GRADIENTINACTIVECAPTION = GetSysColor_nIndexFlags.COLOR_GRADIENTINACTIVECAPTION;
pub const COLOR_GRAYTEXT = GetSysColor_nIndexFlags.COLOR_GRAYTEXT;
pub const COLOR_HIGHLIGHT = GetSysColor_nIndexFlags.COLOR_HIGHLIGHT;
pub const COLOR_HIGHLIGHTTEXT = GetSysColor_nIndexFlags.COLOR_HIGHLIGHTTEXT;
pub const COLOR_HOTLIGHT = GetSysColor_nIndexFlags.COLOR_HOTLIGHT;
pub const COLOR_INACTIVEBORDER = GetSysColor_nIndexFlags.COLOR_INACTIVEBORDER;
pub const COLOR_INACTIVECAPTION = GetSysColor_nIndexFlags.COLOR_INACTIVECAPTION;
pub const COLOR_INACTIVECAPTIONTEXT = GetSysColor_nIndexFlags.COLOR_INACTIVECAPTIONTEXT;
pub const COLOR_INFOBK = GetSysColor_nIndexFlags.COLOR_INFOBK;
pub const COLOR_INFOTEXT = GetSysColor_nIndexFlags.COLOR_INFOTEXT;
pub const COLOR_MENU = GetSysColor_nIndexFlags.COLOR_MENU;
pub const COLOR_MENUHILIGHT = GetSysColor_nIndexFlags.COLOR_MENUHILIGHT;
pub const COLOR_MENUBAR = GetSysColor_nIndexFlags.COLOR_MENUBAR;
pub const COLOR_MENUTEXT = GetSysColor_nIndexFlags.COLOR_MENUTEXT;
pub const COLOR_SCROLLBAR = GetSysColor_nIndexFlags.COLOR_SCROLLBAR;
pub const COLOR_WINDOW = GetSysColor_nIndexFlags.COLOR_WINDOW;
pub const COLOR_WINDOWFRAME = GetSysColor_nIndexFlags.COLOR_WINDOWFRAME;
pub const COLOR_WINDOWTEXT = GetSysColor_nIndexFlags.COLOR_WINDOWTEXT;

pub const GetWindow_uCmdFlags = extern enum(u32) {
    CHILD = 5,
    ENABLEDPOPUP = 6,
    HWNDFIRST = 0,
    HWNDLAST = 1,
    HWNDNEXT = 2,
    HWNDPREV = 3,
    OWNER = 4,
};
pub const GW_CHILD = GetWindow_uCmdFlags.CHILD;
pub const GW_ENABLEDPOPUP = GetWindow_uCmdFlags.ENABLEDPOPUP;
pub const GW_HWNDFIRST = GetWindow_uCmdFlags.HWNDFIRST;
pub const GW_HWNDLAST = GetWindow_uCmdFlags.HWNDLAST;
pub const GW_HWNDNEXT = GetWindow_uCmdFlags.HWNDNEXT;
pub const GW_HWNDPREV = GetWindow_uCmdFlags.HWNDPREV;
pub const GW_OWNER = GetWindow_uCmdFlags.OWNER;

pub const GetSystemMetrics_nIndexFlags = extern enum(u32) {
    ARRANGE = 56,
    CLEANBOOT = 67,
    CMONITORS = 80,
    CMOUSEBUTTONS = 43,
    CONVERTIBLESLATEMODE = 8195,
    CXBORDER = 5,
    CXCURSOR = 13,
    CXDLGFRAME = 7,
    CXDOUBLECLK = 36,
    CXDRAG = 68,
    CXEDGE = 45,
    CXFIXEDFRAME = 7,
    CXFOCUSBORDER = 83,
    CXFRAME = 32,
    CXFULLSCREEN = 16,
    CXHSCROLL = 21,
    CXHTHUMB = 10,
    CXICON = 11,
    CXICONSPACING = 38,
    CXMAXIMIZED = 61,
    CXMAXTRACK = 59,
    CXMENUCHECK = 71,
    CXMENUSIZE = 54,
    CXMIN = 28,
    CXMINIMIZED = 57,
    CXMINSPACING = 47,
    CXMINTRACK = 34,
    CXPADDEDBORDER = 92,
    CXSCREEN = 0,
    CXSIZE = 30,
    CXSIZEFRAME = 32,
    CXSMICON = 49,
    CXSMSIZE = 52,
    CXVIRTUALSCREEN = 78,
    CXVSCROLL = 2,
    CYBORDER = 6,
    CYCAPTION = 4,
    CYCURSOR = 14,
    CYDLGFRAME = 8,
    CYDOUBLECLK = 37,
    CYDRAG = 69,
    CYEDGE = 46,
    CYFIXEDFRAME = 8,
    CYFOCUSBORDER = 84,
    CYFRAME = 33,
    CYFULLSCREEN = 17,
    CYHSCROLL = 3,
    CYICON = 12,
    CYICONSPACING = 39,
    CYKANJIWINDOW = 18,
    CYMAXIMIZED = 62,
    CYMAXTRACK = 60,
    CYMENU = 15,
    CYMENUCHECK = 72,
    CYMENUSIZE = 55,
    CYMIN = 29,
    CYMINIMIZED = 58,
    CYMINSPACING = 48,
    CYMINTRACK = 35,
    CYSCREEN = 1,
    CYSIZE = 31,
    CYSIZEFRAME = 33,
    CYSMCAPTION = 51,
    CYSMICON = 50,
    CYSMSIZE = 53,
    CYVIRTUALSCREEN = 79,
    CYVSCROLL = 20,
    CYVTHUMB = 9,
    DBCSENABLED = 42,
    DEBUG = 22,
    DIGITIZER = 94,
    IMMENABLED = 82,
    MAXIMUMTOUCHES = 95,
    MEDIACENTER = 87,
    MENUDROPALIGNMENT = 40,
    MIDEASTENABLED = 74,
    MOUSEPRESENT = 19,
    MOUSEHORIZONTALWHEELPRESENT = 91,
    MOUSEWHEELPRESENT = 75,
    NETWORK = 63,
    PENWINDOWS = 41,
    REMOTECONTROL = 8193,
    REMOTESESSION = 4096,
    SAMEDISPLAYFORMAT = 81,
    SECURE = 44,
    SERVERR2 = 89,
    SHOWSOUNDS = 70,
    SHUTTINGDOWN = 8192,
    SLOWMACHINE = 73,
    STARTER = 88,
    SWAPBUTTON = 23,
    SYSTEMDOCKED_ = 8196,
    TABLETPC = 86,
    XVIRTUALSCREEN = 76,
    YVIRTUALSCREEN = 77,
};
pub const SM_ARRANGE = GetSystemMetrics_nIndexFlags.ARRANGE;
pub const SM_CLEANBOOT = GetSystemMetrics_nIndexFlags.CLEANBOOT;
pub const SM_CMONITORS = GetSystemMetrics_nIndexFlags.CMONITORS;
pub const SM_CMOUSEBUTTONS = GetSystemMetrics_nIndexFlags.CMOUSEBUTTONS;
pub const SM_CONVERTIBLESLATEMODE = GetSystemMetrics_nIndexFlags.CONVERTIBLESLATEMODE;
pub const SM_CXBORDER = GetSystemMetrics_nIndexFlags.CXBORDER;
pub const SM_CXCURSOR = GetSystemMetrics_nIndexFlags.CXCURSOR;
pub const SM_CXDLGFRAME = GetSystemMetrics_nIndexFlags.CXDLGFRAME;
pub const SM_CXDOUBLECLK = GetSystemMetrics_nIndexFlags.CXDOUBLECLK;
pub const SM_CXDRAG = GetSystemMetrics_nIndexFlags.CXDRAG;
pub const SM_CXEDGE = GetSystemMetrics_nIndexFlags.CXEDGE;
pub const SM_CXFIXEDFRAME = GetSystemMetrics_nIndexFlags.CXFIXEDFRAME;
pub const SM_CXFOCUSBORDER = GetSystemMetrics_nIndexFlags.CXFOCUSBORDER;
pub const SM_CXFRAME = GetSystemMetrics_nIndexFlags.CXFRAME;
pub const SM_CXFULLSCREEN = GetSystemMetrics_nIndexFlags.CXFULLSCREEN;
pub const SM_CXHSCROLL = GetSystemMetrics_nIndexFlags.CXHSCROLL;
pub const SM_CXHTHUMB = GetSystemMetrics_nIndexFlags.CXHTHUMB;
pub const SM_CXICON = GetSystemMetrics_nIndexFlags.CXICON;
pub const SM_CXICONSPACING = GetSystemMetrics_nIndexFlags.CXICONSPACING;
pub const SM_CXMAXIMIZED = GetSystemMetrics_nIndexFlags.CXMAXIMIZED;
pub const SM_CXMAXTRACK = GetSystemMetrics_nIndexFlags.CXMAXTRACK;
pub const SM_CXMENUCHECK = GetSystemMetrics_nIndexFlags.CXMENUCHECK;
pub const SM_CXMENUSIZE = GetSystemMetrics_nIndexFlags.CXMENUSIZE;
pub const SM_CXMIN = GetSystemMetrics_nIndexFlags.CXMIN;
pub const SM_CXMINIMIZED = GetSystemMetrics_nIndexFlags.CXMINIMIZED;
pub const SM_CXMINSPACING = GetSystemMetrics_nIndexFlags.CXMINSPACING;
pub const SM_CXMINTRACK = GetSystemMetrics_nIndexFlags.CXMINTRACK;
pub const SM_CXPADDEDBORDER = GetSystemMetrics_nIndexFlags.CXPADDEDBORDER;
pub const SM_CXSCREEN = GetSystemMetrics_nIndexFlags.CXSCREEN;
pub const SM_CXSIZE = GetSystemMetrics_nIndexFlags.CXSIZE;
pub const SM_CXSIZEFRAME = GetSystemMetrics_nIndexFlags.CXSIZEFRAME;
pub const SM_CXSMICON = GetSystemMetrics_nIndexFlags.CXSMICON;
pub const SM_CXSMSIZE = GetSystemMetrics_nIndexFlags.CXSMSIZE;
pub const SM_CXVIRTUALSCREEN = GetSystemMetrics_nIndexFlags.CXVIRTUALSCREEN;
pub const SM_CXVSCROLL = GetSystemMetrics_nIndexFlags.CXVSCROLL;
pub const SM_CYBORDER = GetSystemMetrics_nIndexFlags.CYBORDER;
pub const SM_CYCAPTION = GetSystemMetrics_nIndexFlags.CYCAPTION;
pub const SM_CYCURSOR = GetSystemMetrics_nIndexFlags.CYCURSOR;
pub const SM_CYDLGFRAME = GetSystemMetrics_nIndexFlags.CYDLGFRAME;
pub const SM_CYDOUBLECLK = GetSystemMetrics_nIndexFlags.CYDOUBLECLK;
pub const SM_CYDRAG = GetSystemMetrics_nIndexFlags.CYDRAG;
pub const SM_CYEDGE = GetSystemMetrics_nIndexFlags.CYEDGE;
pub const SM_CYFIXEDFRAME = GetSystemMetrics_nIndexFlags.CYFIXEDFRAME;
pub const SM_CYFOCUSBORDER = GetSystemMetrics_nIndexFlags.CYFOCUSBORDER;
pub const SM_CYFRAME = GetSystemMetrics_nIndexFlags.CYFRAME;
pub const SM_CYFULLSCREEN = GetSystemMetrics_nIndexFlags.CYFULLSCREEN;
pub const SM_CYHSCROLL = GetSystemMetrics_nIndexFlags.CYHSCROLL;
pub const SM_CYICON = GetSystemMetrics_nIndexFlags.CYICON;
pub const SM_CYICONSPACING = GetSystemMetrics_nIndexFlags.CYICONSPACING;
pub const SM_CYKANJIWINDOW = GetSystemMetrics_nIndexFlags.CYKANJIWINDOW;
pub const SM_CYMAXIMIZED = GetSystemMetrics_nIndexFlags.CYMAXIMIZED;
pub const SM_CYMAXTRACK = GetSystemMetrics_nIndexFlags.CYMAXTRACK;
pub const SM_CYMENU = GetSystemMetrics_nIndexFlags.CYMENU;
pub const SM_CYMENUCHECK = GetSystemMetrics_nIndexFlags.CYMENUCHECK;
pub const SM_CYMENUSIZE = GetSystemMetrics_nIndexFlags.CYMENUSIZE;
pub const SM_CYMIN = GetSystemMetrics_nIndexFlags.CYMIN;
pub const SM_CYMINIMIZED = GetSystemMetrics_nIndexFlags.CYMINIMIZED;
pub const SM_CYMINSPACING = GetSystemMetrics_nIndexFlags.CYMINSPACING;
pub const SM_CYMINTRACK = GetSystemMetrics_nIndexFlags.CYMINTRACK;
pub const SM_CYSCREEN = GetSystemMetrics_nIndexFlags.CYSCREEN;
pub const SM_CYSIZE = GetSystemMetrics_nIndexFlags.CYSIZE;
pub const SM_CYSIZEFRAME = GetSystemMetrics_nIndexFlags.CYSIZEFRAME;
pub const SM_CYSMCAPTION = GetSystemMetrics_nIndexFlags.CYSMCAPTION;
pub const SM_CYSMICON = GetSystemMetrics_nIndexFlags.CYSMICON;
pub const SM_CYSMSIZE = GetSystemMetrics_nIndexFlags.CYSMSIZE;
pub const SM_CYVIRTUALSCREEN = GetSystemMetrics_nIndexFlags.CYVIRTUALSCREEN;
pub const SM_CYVSCROLL = GetSystemMetrics_nIndexFlags.CYVSCROLL;
pub const SM_CYVTHUMB = GetSystemMetrics_nIndexFlags.CYVTHUMB;
pub const SM_DBCSENABLED = GetSystemMetrics_nIndexFlags.DBCSENABLED;
pub const SM_DEBUG = GetSystemMetrics_nIndexFlags.DEBUG;
pub const SM_DIGITIZER = GetSystemMetrics_nIndexFlags.DIGITIZER;
pub const SM_IMMENABLED = GetSystemMetrics_nIndexFlags.IMMENABLED;
pub const SM_MAXIMUMTOUCHES = GetSystemMetrics_nIndexFlags.MAXIMUMTOUCHES;
pub const SM_MEDIACENTER = GetSystemMetrics_nIndexFlags.MEDIACENTER;
pub const SM_MENUDROPALIGNMENT = GetSystemMetrics_nIndexFlags.MENUDROPALIGNMENT;
pub const SM_MIDEASTENABLED = GetSystemMetrics_nIndexFlags.MIDEASTENABLED;
pub const SM_MOUSEPRESENT = GetSystemMetrics_nIndexFlags.MOUSEPRESENT;
pub const SM_MOUSEHORIZONTALWHEELPRESENT = GetSystemMetrics_nIndexFlags.MOUSEHORIZONTALWHEELPRESENT;
pub const SM_MOUSEWHEELPRESENT = GetSystemMetrics_nIndexFlags.MOUSEWHEELPRESENT;
pub const SM_NETWORK = GetSystemMetrics_nIndexFlags.NETWORK;
pub const SM_PENWINDOWS = GetSystemMetrics_nIndexFlags.PENWINDOWS;
pub const SM_REMOTECONTROL = GetSystemMetrics_nIndexFlags.REMOTECONTROL;
pub const SM_REMOTESESSION = GetSystemMetrics_nIndexFlags.REMOTESESSION;
pub const SM_SAMEDISPLAYFORMAT = GetSystemMetrics_nIndexFlags.SAMEDISPLAYFORMAT;
pub const SM_SECURE = GetSystemMetrics_nIndexFlags.SECURE;
pub const SM_SERVERR2 = GetSystemMetrics_nIndexFlags.SERVERR2;
pub const SM_SHOWSOUNDS = GetSystemMetrics_nIndexFlags.SHOWSOUNDS;
pub const SM_SHUTTINGDOWN = GetSystemMetrics_nIndexFlags.SHUTTINGDOWN;
pub const SM_SLOWMACHINE = GetSystemMetrics_nIndexFlags.SLOWMACHINE;
pub const SM_STARTER = GetSystemMetrics_nIndexFlags.STARTER;
pub const SM_SWAPBUTTON = GetSystemMetrics_nIndexFlags.SWAPBUTTON;
pub const SM_SYSTEMDOCKED_ = GetSystemMetrics_nIndexFlags.SYSTEMDOCKED_;
pub const SM_TABLETPC = GetSystemMetrics_nIndexFlags.TABLETPC;
pub const SM_XVIRTUALSCREEN = GetSystemMetrics_nIndexFlags.XVIRTUALSCREEN;
pub const SM_YVIRTUALSCREEN = GetSystemMetrics_nIndexFlags.YVIRTUALSCREEN;

pub const GetAncestor_gaFlags = extern enum(u32) {
    PARENT = 1,
    ROOT = 2,
    ROOTOWNER = 3,
};
pub const GA_PARENT = GetAncestor_gaFlags.PARENT;
pub const GA_ROOT = GetAncestor_gaFlags.ROOT;
pub const GA_ROOTOWNER = GetAncestor_gaFlags.ROOTOWNER;

pub const TileWindows_wHowFlags = extern enum(u32) {
    HORIZONTAL = 1,
    VERTICAL = 0,
};
pub const MDITILE_HORIZONTAL = TileWindows_wHowFlags.HORIZONTAL;
pub const MDITILE_VERTICAL = TileWindows_wHowFlags.VERTICAL;

pub const SetWindowDisplayAffinity_dwAffinityFlags = extern enum(u32) {
    NONE = 0,
    MONITOR = 1,
    EXCLUDEFROMCAPTURE = 17,
};
pub const WDA_NONE = SetWindowDisplayAffinity_dwAffinityFlags.NONE;
pub const WDA_MONITOR = SetWindowDisplayAffinity_dwAffinityFlags.MONITOR;
pub const WDA_EXCLUDEFROMCAPTURE = SetWindowDisplayAffinity_dwAffinityFlags.EXCLUDEFROMCAPTURE;

pub const LockSetForegroundWindow_uLockCodeFlags = extern enum(u32) {
    LOCK = 1,
    UNLOCK = 2,
};
pub const LSFW_LOCK = LockSetForegroundWindow_uLockCodeFlags.LOCK;
pub const LSFW_UNLOCK = LockSetForegroundWindow_uLockCodeFlags.UNLOCK;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const CascadeWindows_wHowFlags = extern enum(u32) {
    SKIPDISABLED = 2,
    ZORDER = 4,
    _,
};
pub const MDITILE_SKIPDISABLED = CascadeWindows_wHowFlags.SKIPDISABLED;
pub const MDITILE_ZORDER = CascadeWindows_wHowFlags.ZORDER;

pub const ChangeWindowMessageFilterEx_actionFlags = extern enum(u32) {
    ALLOW = 1,
    DISALLOW = 2,
    RESET = 0,
};
pub const MSGFLT_ALLOW = ChangeWindowMessageFilterEx_actionFlags.ALLOW;
pub const MSGFLT_DISALLOW = ChangeWindowMessageFilterEx_actionFlags.DISALLOW;
pub const MSGFLT_RESET = ChangeWindowMessageFilterEx_actionFlags.RESET;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const GetMenuDefaultItem_gmdiFlags = extern enum(u32) {
    GOINTOPOPUPS = 2,
    USEDISABLED = 1,
    _,
};
pub const GMDI_GOINTOPOPUPS = GetMenuDefaultItem_gmdiFlags.GOINTOPOPUPS;
pub const GMDI_USEDISABLED = GetMenuDefaultItem_gmdiFlags.USEDISABLED;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const PAGESETUPDLGA_Flags = extern enum(u32) {
    DEFAULTMINMARGINS = 0,
    DISABLEMARGINS = 16,
    DISABLEORIENTATION = 256,
    DISABLEPAGEPAINTING = 524288,
    DISABLEPAPER = 512,
    DISABLEPRINTER = 32,
    ENABLEPAGEPAINTHOOK = 262144,
    ENABLEPAGESETUPHOOK = 8192,
    ENABLEPAGESETUPTEMPLATE = 32768,
    ENABLEPAGESETUPTEMPLATEHANDLE = 131072,
    INHUNDREDTHSOFMILLIMETERS = 8,
    INTHOUSANDTHSOFINCHES = 4,
    INWININIINTLMEASURE = 0,
    MARGINS = 2,
    MINMARGINS = 1,
    NONETWORKBUTTON = 2097152,
    NOWARNING = 128,
    RETURNDEFAULT = 1024,
    SHOWHELP = 2048,
    _,
};
pub const PSD_DEFAULTMINMARGINS = PAGESETUPDLGA_Flags.DEFAULTMINMARGINS;
pub const PSD_DISABLEMARGINS = PAGESETUPDLGA_Flags.DISABLEMARGINS;
pub const PSD_DISABLEORIENTATION = PAGESETUPDLGA_Flags.DISABLEORIENTATION;
pub const PSD_DISABLEPAGEPAINTING = PAGESETUPDLGA_Flags.DISABLEPAGEPAINTING;
pub const PSD_DISABLEPAPER = PAGESETUPDLGA_Flags.DISABLEPAPER;
pub const PSD_DISABLEPRINTER = PAGESETUPDLGA_Flags.DISABLEPRINTER;
pub const PSD_ENABLEPAGEPAINTHOOK = PAGESETUPDLGA_Flags.ENABLEPAGEPAINTHOOK;
pub const PSD_ENABLEPAGESETUPHOOK = PAGESETUPDLGA_Flags.ENABLEPAGESETUPHOOK;
pub const PSD_ENABLEPAGESETUPTEMPLATE = PAGESETUPDLGA_Flags.ENABLEPAGESETUPTEMPLATE;
pub const PSD_ENABLEPAGESETUPTEMPLATEHANDLE = PAGESETUPDLGA_Flags.ENABLEPAGESETUPTEMPLATEHANDLE;
pub const PSD_INHUNDREDTHSOFMILLIMETERS = PAGESETUPDLGA_Flags.INHUNDREDTHSOFMILLIMETERS;
pub const PSD_INTHOUSANDTHSOFINCHES = PAGESETUPDLGA_Flags.INTHOUSANDTHSOFINCHES;
pub const PSD_INWININIINTLMEASURE = PAGESETUPDLGA_Flags.INWININIINTLMEASURE;
pub const PSD_MARGINS = PAGESETUPDLGA_Flags.MARGINS;
pub const PSD_MINMARGINS = PAGESETUPDLGA_Flags.MINMARGINS;
pub const PSD_NONETWORKBUTTON = PAGESETUPDLGA_Flags.NONETWORKBUTTON;
pub const PSD_NOWARNING = PAGESETUPDLGA_Flags.NOWARNING;
pub const PSD_RETURNDEFAULT = PAGESETUPDLGA_Flags.RETURNDEFAULT;
pub const PSD_SHOWHELP = PAGESETUPDLGA_Flags.SHOWHELP;

pub const CHANGEFILTERSTRUCT_ExtStatusFlags = extern enum(u32) {
    NONE = 0,
    ALLOWED_HIGHER = 3,
    ALREADYALLOWED_FORWND = 1,
    ALREADYDISALLOWED_FORWND = 2,
};
pub const MSGFLTINFO_NONE = CHANGEFILTERSTRUCT_ExtStatusFlags.NONE;
pub const MSGFLTINFO_ALLOWED_HIGHER = CHANGEFILTERSTRUCT_ExtStatusFlags.ALLOWED_HIGHER;
pub const MSGFLTINFO_ALREADYALLOWED_FORWND = CHANGEFILTERSTRUCT_ExtStatusFlags.ALREADYALLOWED_FORWND;
pub const MSGFLTINFO_ALREADYDISALLOWED_FORWND = CHANGEFILTERSTRUCT_ExtStatusFlags.ALREADYDISALLOWED_FORWND;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const CHOOSEFONTW_Flags = extern enum(u32) {
    APPLY = 512,
    ANSIONLY = 1024,
    BOTH = 3,
    EFFECTS = 256,
    ENABLEHOOK = 8,
    ENABLETEMPLATE = 16,
    ENABLETEMPLATEHANDLE = 32,
    FIXEDPITCHONLY = 16384,
    FORCEFONTEXIST = 65536,
    INACTIVEFONTS = 33554432,
    INITTOLOGFONTSTRUCT = 64,
    LIMITSIZE = 8192,
    NOOEMFONTS = 2048,
    NOFACESEL = 524288,
    NOSCRIPTSEL = 8388608,
    NOSIMULATIONS = 4096,
    NOSIZESEL = 2097152,
    NOSTYLESEL = 1048576,
    NOVECTORFONTS = 2048,
    NOVERTFONTS = 16777216,
    PRINTERFONTS = 2,
    SCALABLEONLY = 131072,
    SCREENFONTS = 1,
    SCRIPTSONLY = 1024,
    SELECTSCRIPT = 4194304,
    SHOWHELP = 4,
    TTONLY = 262144,
    USESTYLE = 128,
    WYSIWYG = 32768,
    _,
};
pub const CF_APPLY = CHOOSEFONTW_Flags.APPLY;
pub const CF_ANSIONLY = CHOOSEFONTW_Flags.ANSIONLY;
pub const CF_BOTH = CHOOSEFONTW_Flags.BOTH;
pub const CF_EFFECTS = CHOOSEFONTW_Flags.EFFECTS;
pub const CF_ENABLEHOOK = CHOOSEFONTW_Flags.ENABLEHOOK;
pub const CF_ENABLETEMPLATE = CHOOSEFONTW_Flags.ENABLETEMPLATE;
pub const CF_ENABLETEMPLATEHANDLE = CHOOSEFONTW_Flags.ENABLETEMPLATEHANDLE;
pub const CF_FIXEDPITCHONLY = CHOOSEFONTW_Flags.FIXEDPITCHONLY;
pub const CF_FORCEFONTEXIST = CHOOSEFONTW_Flags.FORCEFONTEXIST;
pub const CF_INACTIVEFONTS = CHOOSEFONTW_Flags.INACTIVEFONTS;
pub const CF_INITTOLOGFONTSTRUCT = CHOOSEFONTW_Flags.INITTOLOGFONTSTRUCT;
pub const CF_LIMITSIZE = CHOOSEFONTW_Flags.LIMITSIZE;
pub const CF_NOOEMFONTS = CHOOSEFONTW_Flags.NOOEMFONTS;
pub const CF_NOFACESEL = CHOOSEFONTW_Flags.NOFACESEL;
pub const CF_NOSCRIPTSEL = CHOOSEFONTW_Flags.NOSCRIPTSEL;
pub const CF_NOSIMULATIONS = CHOOSEFONTW_Flags.NOSIMULATIONS;
pub const CF_NOSIZESEL = CHOOSEFONTW_Flags.NOSIZESEL;
pub const CF_NOSTYLESEL = CHOOSEFONTW_Flags.NOSTYLESEL;
pub const CF_NOVECTORFONTS = CHOOSEFONTW_Flags.NOVECTORFONTS;
pub const CF_NOVERTFONTS = CHOOSEFONTW_Flags.NOVERTFONTS;
pub const CF_PRINTERFONTS = CHOOSEFONTW_Flags.PRINTERFONTS;
pub const CF_SCALABLEONLY = CHOOSEFONTW_Flags.SCALABLEONLY;
pub const CF_SCREENFONTS = CHOOSEFONTW_Flags.SCREENFONTS;
pub const CF_SCRIPTSONLY = CHOOSEFONTW_Flags.SCRIPTSONLY;
pub const CF_SELECTSCRIPT = CHOOSEFONTW_Flags.SELECTSCRIPT;
pub const CF_SHOWHELP = CHOOSEFONTW_Flags.SHOWHELP;
pub const CF_TTONLY = CHOOSEFONTW_Flags.TTONLY;
pub const CF_USESTYLE = CHOOSEFONTW_Flags.USESTYLE;
pub const CF_WYSIWYG = CHOOSEFONTW_Flags.WYSIWYG;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const FINDREPLACEW_Flags = extern enum(u32) {
    DIALOGTERM = 64,
    DOWN = 1,
    ENABLEHOOK = 256,
    ENABLETEMPLATE = 512,
    ENABLETEMPLATEHANDLE = 8192,
    FINDNEXT = 8,
    HIDEUPDOWN = 16384,
    HIDEMATCHCASE = 32768,
    HIDEWHOLEWORD = 65536,
    MATCHCASE = 4,
    NOMATCHCASE = 2048,
    NOUPDOWN = 1024,
    NOWHOLEWORD = 4096,
    REPLACE = 16,
    REPLACEALL = 32,
    SHOWHELP = 128,
    WHOLEWORD = 2,
    _,
};
pub const FR_DIALOGTERM = FINDREPLACEW_Flags.DIALOGTERM;
pub const FR_DOWN = FINDREPLACEW_Flags.DOWN;
pub const FR_ENABLEHOOK = FINDREPLACEW_Flags.ENABLEHOOK;
pub const FR_ENABLETEMPLATE = FINDREPLACEW_Flags.ENABLETEMPLATE;
pub const FR_ENABLETEMPLATEHANDLE = FINDREPLACEW_Flags.ENABLETEMPLATEHANDLE;
pub const FR_FINDNEXT = FINDREPLACEW_Flags.FINDNEXT;
pub const FR_HIDEUPDOWN = FINDREPLACEW_Flags.HIDEUPDOWN;
pub const FR_HIDEMATCHCASE = FINDREPLACEW_Flags.HIDEMATCHCASE;
pub const FR_HIDEWHOLEWORD = FINDREPLACEW_Flags.HIDEWHOLEWORD;
pub const FR_MATCHCASE = FINDREPLACEW_Flags.MATCHCASE;
pub const FR_NOMATCHCASE = FINDREPLACEW_Flags.NOMATCHCASE;
pub const FR_NOUPDOWN = FINDREPLACEW_Flags.NOUPDOWN;
pub const FR_NOWHOLEWORD = FINDREPLACEW_Flags.NOWHOLEWORD;
pub const FR_REPLACE = FINDREPLACEW_Flags.REPLACE;
pub const FR_REPLACEALL = FINDREPLACEW_Flags.REPLACEALL;
pub const FR_SHOWHELP = FINDREPLACEW_Flags.SHOWHELP;
pub const FR_WHOLEWORD = FINDREPLACEW_Flags.WHOLEWORD;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const PRINTDLGEXA_Flags = extern enum(u32) {
    ALLPAGES = 0,
    COLLATE = 16,
    CURRENTPAGE = 4194304,
    DISABLEPRINTTOFILE = 524288,
    ENABLEPRINTTEMPLATE = 16384,
    ENABLEPRINTTEMPLATEHANDLE = 65536,
    EXCLUSIONFLAGS = 16777216,
    HIDEPRINTTOFILE = 1048576,
    NOCURRENTPAGE = 8388608,
    NOPAGENUMS = 8,
    NOSELECTION = 4,
    NOWARNING = 128,
    PAGENUMS = 2,
    PRINTTOFILE = 32,
    RETURNDC = 256,
    RETURNDEFAULT = 1024,
    RETURNIC = 512,
    SELECTION = 1,
    USEDEVMODECOPIES = 262144,
    USEDEVMODECOPIESANDCOLLATE = 262144,
    USELARGETEMPLATE = 268435456,
    ENABLEPRINTHOOK = 4096,
    ENABLESETUPHOOK = 8192,
    ENABLESETUPTEMPLATE = 32768,
    ENABLESETUPTEMPLATEHANDLE = 131072,
    NONETWORKBUTTON = 2097152,
    PRINTSETUP = 64,
    SHOWHELP = 2048,
    _,
};
pub const PD_ALLPAGES = PRINTDLGEXA_Flags.ALLPAGES;
pub const PD_COLLATE = PRINTDLGEXA_Flags.COLLATE;
pub const PD_CURRENTPAGE = PRINTDLGEXA_Flags.CURRENTPAGE;
pub const PD_DISABLEPRINTTOFILE = PRINTDLGEXA_Flags.DISABLEPRINTTOFILE;
pub const PD_ENABLEPRINTTEMPLATE = PRINTDLGEXA_Flags.ENABLEPRINTTEMPLATE;
pub const PD_ENABLEPRINTTEMPLATEHANDLE = PRINTDLGEXA_Flags.ENABLEPRINTTEMPLATEHANDLE;
pub const PD_EXCLUSIONFLAGS = PRINTDLGEXA_Flags.EXCLUSIONFLAGS;
pub const PD_HIDEPRINTTOFILE = PRINTDLGEXA_Flags.HIDEPRINTTOFILE;
pub const PD_NOCURRENTPAGE = PRINTDLGEXA_Flags.NOCURRENTPAGE;
pub const PD_NOPAGENUMS = PRINTDLGEXA_Flags.NOPAGENUMS;
pub const PD_NOSELECTION = PRINTDLGEXA_Flags.NOSELECTION;
pub const PD_NOWARNING = PRINTDLGEXA_Flags.NOWARNING;
pub const PD_PAGENUMS = PRINTDLGEXA_Flags.PAGENUMS;
pub const PD_PRINTTOFILE = PRINTDLGEXA_Flags.PRINTTOFILE;
pub const PD_RETURNDC = PRINTDLGEXA_Flags.RETURNDC;
pub const PD_RETURNDEFAULT = PRINTDLGEXA_Flags.RETURNDEFAULT;
pub const PD_RETURNIC = PRINTDLGEXA_Flags.RETURNIC;
pub const PD_SELECTION = PRINTDLGEXA_Flags.SELECTION;
pub const PD_USEDEVMODECOPIES = PRINTDLGEXA_Flags.USEDEVMODECOPIES;
pub const PD_USEDEVMODECOPIESANDCOLLATE = PRINTDLGEXA_Flags.USEDEVMODECOPIESANDCOLLATE;
pub const PD_USELARGETEMPLATE = PRINTDLGEXA_Flags.USELARGETEMPLATE;
pub const PD_ENABLEPRINTHOOK = PRINTDLGEXA_Flags.ENABLEPRINTHOOK;
pub const PD_ENABLESETUPHOOK = PRINTDLGEXA_Flags.ENABLESETUPHOOK;
pub const PD_ENABLESETUPTEMPLATE = PRINTDLGEXA_Flags.ENABLESETUPTEMPLATE;
pub const PD_ENABLESETUPTEMPLATEHANDLE = PRINTDLGEXA_Flags.ENABLESETUPTEMPLATEHANDLE;
pub const PD_NONETWORKBUTTON = PRINTDLGEXA_Flags.NONETWORKBUTTON;
pub const PD_PRINTSETUP = PRINTDLGEXA_Flags.PRINTSETUP;
pub const PD_SHOWHELP = PRINTDLGEXA_Flags.SHOWHELP;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const MOUSEHOOKSTRUCTEX_mouseData = extern enum(u32) {
    @"1" = 1,
    @"2" = 2,
    _,
};
pub const XBUTTON1 = MOUSEHOOKSTRUCTEX_mouseData.@"1";
pub const XBUTTON2 = MOUSEHOOKSTRUCTEX_mouseData.@"2";

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const ACCEL_fVirtFlags = extern enum(u32) {
    ALT = 16,
    CONTROL = 8,
    NOINVERT = 2,
    SHIFT = 4,
    VIRTKEY = 1,
    _,
};
pub const FALT = ACCEL_fVirtFlags.ALT;
pub const FCONTROL = ACCEL_fVirtFlags.CONTROL;
pub const FNOINVERT = ACCEL_fVirtFlags.NOINVERT;
pub const FSHIFT = ACCEL_fVirtFlags.SHIFT;
pub const FVIRTKEY = ACCEL_fVirtFlags.VIRTKEY;

pub const VS_FIXEDFILEINFO_dwFileTypeFlags = extern enum(i32) {
    APP = 1,
    DLL = 2,
    DRV = 3,
    FONT = 4,
    STATIC_LIB = 7,
    UNKNOWN = 0,
    VXD = 5,
};
pub const VFT_APP = VS_FIXEDFILEINFO_dwFileTypeFlags.APP;
pub const VFT_DLL = VS_FIXEDFILEINFO_dwFileTypeFlags.DLL;
pub const VFT_DRV = VS_FIXEDFILEINFO_dwFileTypeFlags.DRV;
pub const VFT_FONT = VS_FIXEDFILEINFO_dwFileTypeFlags.FONT;
pub const VFT_STATIC_LIB = VS_FIXEDFILEINFO_dwFileTypeFlags.STATIC_LIB;
pub const VFT_UNKNOWN = VS_FIXEDFILEINFO_dwFileTypeFlags.UNKNOWN;
pub const VFT_VXD = VS_FIXEDFILEINFO_dwFileTypeFlags.VXD;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const MENUITEMINFOA_fMask = extern enum(u32) {
    BITMAP = 128,
    CHECKMARKS = 8,
    DATA = 32,
    FTYPE = 256,
    ID = 2,
    STATE = 1,
    STRING = 64,
    SUBMENU = 4,
    TYPE = 16,
    _,
};
pub const MIIM_BITMAP = MENUITEMINFOA_fMask.BITMAP;
pub const MIIM_CHECKMARKS = MENUITEMINFOA_fMask.CHECKMARKS;
pub const MIIM_DATA = MENUITEMINFOA_fMask.DATA;
pub const MIIM_FTYPE = MENUITEMINFOA_fMask.FTYPE;
pub const MIIM_ID = MENUITEMINFOA_fMask.ID;
pub const MIIM_STATE = MENUITEMINFOA_fMask.STATE;
pub const MIIM_STRING = MENUITEMINFOA_fMask.STRING;
pub const MIIM_SUBMENU = MENUITEMINFOA_fMask.SUBMENU;
pub const MIIM_TYPE = MENUITEMINFOA_fMask.TYPE;

pub const VS_FIXEDFILEINFO_dwFileOSFlags = extern enum(i32) {
    DOS = 65536,
    NT = 262144,
    _WINDOWS16 = 1,
    _WINDOWS32 = 4,
    OS216 = 131072,
    OS232 = 196608,
    _PM16 = 2,
    _PM32 = 3,
    UNKNOWN = 0,
};
pub const VOS_DOS = VS_FIXEDFILEINFO_dwFileOSFlags.DOS;
pub const VOS_NT = VS_FIXEDFILEINFO_dwFileOSFlags.NT;
pub const VOS__WINDOWS16 = VS_FIXEDFILEINFO_dwFileOSFlags._WINDOWS16;
pub const VOS__WINDOWS32 = VS_FIXEDFILEINFO_dwFileOSFlags._WINDOWS32;
pub const VOS_OS216 = VS_FIXEDFILEINFO_dwFileOSFlags.OS216;
pub const VOS_OS232 = VS_FIXEDFILEINFO_dwFileOSFlags.OS232;
pub const VOS__PM16 = VS_FIXEDFILEINFO_dwFileOSFlags._PM16;
pub const VOS__PM32 = VS_FIXEDFILEINFO_dwFileOSFlags._PM32;
pub const VOS_UNKNOWN = VS_FIXEDFILEINFO_dwFileOSFlags.UNKNOWN;

pub const CURSORINFO_flags = extern enum(u32) {
    HOWING = 1,
    UPPRESSED = 2,
};
pub const CURSOR_SHOWING = CURSORINFO_flags.HOWING;
pub const CURSOR_SUPPRESSED = CURSORINFO_flags.UPPRESSED;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const MENUINFO_dwStyleFlags = extern enum(u32) {
    AUTODISMISS = 268435456,
    CHECKORBMP = 67108864,
    DRAGDROP = 536870912,
    MODELESS = 1073741824,
    NOCHECK = 2147483648,
    NOTIFYBYPOS = 134217728,
    _,
};
pub const MNS_AUTODISMISS = MENUINFO_dwStyleFlags.AUTODISMISS;
pub const MNS_CHECKORBMP = MENUINFO_dwStyleFlags.CHECKORBMP;
pub const MNS_DRAGDROP = MENUINFO_dwStyleFlags.DRAGDROP;
pub const MNS_MODELESS = MENUINFO_dwStyleFlags.MODELESS;
pub const MNS_NOCHECK = MENUINFO_dwStyleFlags.NOCHECK;
pub const MNS_NOTIFYBYPOS = MENUINFO_dwStyleFlags.NOTIFYBYPOS;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const WINDOWPLACEMENT_flags = extern enum(u32) {
    ASYNCWINDOWPLACEMENT = 4,
    RESTORETOMAXIMIZED = 2,
    SETMINPOSITION = 1,
    _,
};
pub const WPF_ASYNCWINDOWPLACEMENT = WINDOWPLACEMENT_flags.ASYNCWINDOWPLACEMENT;
pub const WPF_RESTORETOMAXIMIZED = WINDOWPLACEMENT_flags.RESTORETOMAXIMIZED;
pub const WPF_SETMINPOSITION = WINDOWPLACEMENT_flags.SETMINPOSITION;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const CHOOSEFONTA_nFontType = extern enum(u32) {
    BOLD_FONTTYPE = 256,
    ITALIC_FONTTYPE = 512,
    PRINTER_FONTTYPE = 16384,
    REGULAR_FONTTYPE = 1024,
    SCREEN_FONTTYPE = 8192,
    SIMULATED_FONTTYPE = 32768,
    _,
};
pub const BOLD_FONTTYPE = CHOOSEFONTA_nFontType.BOLD_FONTTYPE;
pub const ITALIC_FONTTYPE = CHOOSEFONTA_nFontType.ITALIC_FONTTYPE;
pub const PRINTER_FONTTYPE = CHOOSEFONTA_nFontType.PRINTER_FONTTYPE;
pub const REGULAR_FONTTYPE = CHOOSEFONTA_nFontType.REGULAR_FONTTYPE;
pub const SCREEN_FONTTYPE = CHOOSEFONTA_nFontType.SCREEN_FONTTYPE;
pub const SIMULATED_FONTTYPE = CHOOSEFONTA_nFontType.SIMULATED_FONTTYPE;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const MENUINFO_fMaskFlags = extern enum(u32) {
    APPLYTOSUBMENUS = 2147483648,
    BACKGROUND = 2,
    HELPID = 4,
    MAXHEIGHT = 1,
    MENUDATA = 8,
    STYLE = 16,
    _,
};
pub const MIM_APPLYTOSUBMENUS = MENUINFO_fMaskFlags.APPLYTOSUBMENUS;
pub const MIM_BACKGROUND = MENUINFO_fMaskFlags.BACKGROUND;
pub const MIM_HELPID = MENUINFO_fMaskFlags.HELPID;
pub const MIM_MAXHEIGHT = MENUINFO_fMaskFlags.MAXHEIGHT;
pub const MIM_MENUDATA = MENUINFO_fMaskFlags.MENUDATA;
pub const MIM_STYLE = MENUINFO_fMaskFlags.STYLE;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const VS_FIXEDFILEINFOFlags = extern enum(u32) {
    DEBUG = 1,
    INFOINFERRED = 16,
    PATCHED = 4,
    PRERELEASE = 2,
    PRIVATEBUILD = 8,
    SPECIALBUILD = 32,
    _,
};
pub const VS_FF_DEBUG = VS_FIXEDFILEINFOFlags.DEBUG;
pub const VS_FF_INFOINFERRED = VS_FIXEDFILEINFOFlags.INFOINFERRED;
pub const VS_FF_PATCHED = VS_FIXEDFILEINFOFlags.PATCHED;
pub const VS_FF_PRERELEASE = VS_FIXEDFILEINFOFlags.PRERELEASE;
pub const VS_FF_PRIVATEBUILD = VS_FIXEDFILEINFOFlags.PRIVATEBUILD;
pub const VS_FF_SPECIALBUILD = VS_FIXEDFILEINFOFlags.SPECIALBUILD;

pub const MINIMIZEDMETRICS_iArrangeFlags = extern enum(i32) {
    BOTTOMLEFT = 0,
    BOTTOMRIGHT = 1,
    TOPLEFT = 2,
    TOPRIGHT = 3,
};
pub const ARW_BOTTOMLEFT = MINIMIZEDMETRICS_iArrangeFlags.BOTTOMLEFT;
pub const ARW_BOTTOMRIGHT = MINIMIZEDMETRICS_iArrangeFlags.BOTTOMRIGHT;
pub const ARW_TOPLEFT = MINIMIZEDMETRICS_iArrangeFlags.TOPLEFT;
pub const ARW_TOPRIGHT = MINIMIZEDMETRICS_iArrangeFlags.TOPRIGHT;

pub const MENUGETOBJECTINFO_dwFlags = extern enum(u32) {
    BOTTOMGAP = 2,
    TOPGAP = 1,
};
pub const MNGOF_BOTTOMGAP = MENUGETOBJECTINFO_dwFlags.BOTTOMGAP;
pub const MNGOF_TOPGAP = MENUGETOBJECTINFO_dwFlags.TOPGAP;

pub const VS_FIXEDFILEINFO_dwFileSubtypeFlags = extern enum(i32) {
    DRV_COMM = 10,
    DRV_DISPLAY = 4,
    DRV_INSTALLABLE = 8,
    DRV_KEYBOARD = 2,
    DRV_LANGUAGE = 3,
    DRV_MOUSE = 5,
    DRV_NETWORK = 6,
    DRV_PRINTER = 1,
    DRV_SOUND = 9,
    DRV_SYSTEM = 7,
    DRV_VERSIONED_PRINTER = 12,
    UNKNOWN = 0,
};
pub const VFT2_DRV_COMM = VS_FIXEDFILEINFO_dwFileSubtypeFlags.DRV_COMM;
pub const VFT2_DRV_DISPLAY = VS_FIXEDFILEINFO_dwFileSubtypeFlags.DRV_DISPLAY;
pub const VFT2_DRV_INSTALLABLE = VS_FIXEDFILEINFO_dwFileSubtypeFlags.DRV_INSTALLABLE;
pub const VFT2_DRV_KEYBOARD = VS_FIXEDFILEINFO_dwFileSubtypeFlags.DRV_KEYBOARD;
pub const VFT2_DRV_LANGUAGE = VS_FIXEDFILEINFO_dwFileSubtypeFlags.DRV_LANGUAGE;
pub const VFT2_DRV_MOUSE = VS_FIXEDFILEINFO_dwFileSubtypeFlags.DRV_MOUSE;
pub const VFT2_DRV_NETWORK = VS_FIXEDFILEINFO_dwFileSubtypeFlags.DRV_NETWORK;
pub const VFT2_DRV_PRINTER = VS_FIXEDFILEINFO_dwFileSubtypeFlags.DRV_PRINTER;
pub const VFT2_DRV_SOUND = VS_FIXEDFILEINFO_dwFileSubtypeFlags.DRV_SOUND;
pub const VFT2_DRV_SYSTEM = VS_FIXEDFILEINFO_dwFileSubtypeFlags.DRV_SYSTEM;
pub const VFT2_DRV_VERSIONED_PRINTER = VS_FIXEDFILEINFO_dwFileSubtypeFlags.DRV_VERSIONED_PRINTER;
pub const VFT2_UNKNOWN = VS_FIXEDFILEINFO_dwFileSubtypeFlags.UNKNOWN;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const GUITHREADINFO_flags = extern enum(u32) {
    CARETBLINKING = 1,
    INMENUMODE = 4,
    INMOVESIZE = 2,
    POPUPMENUMODE = 16,
    SYSTEMMENUMODE = 8,
    _,
};
pub const GUI_CARETBLINKING = GUITHREADINFO_flags.CARETBLINKING;
pub const GUI_INMENUMODE = GUITHREADINFO_flags.INMENUMODE;
pub const GUI_INMOVESIZE = GUITHREADINFO_flags.INMOVESIZE;
pub const GUI_POPUPMENUMODE = GUITHREADINFO_flags.POPUPMENUMODE;
pub const GUI_SYSTEMMENUMODE = GUITHREADINFO_flags.SYSTEMMENUMODE;

// TODO: this type has a FreeFunc 'UnhookWindowsHookEx', what can Zig do with this information?
pub const HHOOK = ?*c_void;

pub const HWND = ?*c_void;

pub const LPARAM = ?*c_void;

pub const WPARAM = ?*c_void;

pub const MESSAGE_RESOURCE_ENTRY = extern struct {
    Length: u16,
    Flags: u16,
    Text: [1]u8,
};

pub const MESSAGE_RESOURCE_BLOCK = extern struct {
    LowId: u32,
    HighId: u32,
    OffsetToEntries: u32,
};

pub const MESSAGE_RESOURCE_DATA = extern struct {
    NumberOfBlocks: u32,
    Blocks: [1]MESSAGE_RESOURCE_BLOCK,
};

pub const ENUMRESNAMEPROCA = fn(
    hModule: ?*c_void,
    lpType: [*:0]const u8,
    lpName: PSTR,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const ENUMRESNAMEPROCW = fn(
    hModule: ?*c_void,
    lpType: [*:0]const u16,
    lpName: PWSTR,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const ENUMRESTYPEPROCA = fn(
    hModule: ?*c_void,
    lpType: PSTR,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const ENUMRESTYPEPROCW = fn(
    hModule: ?*c_void,
    lpType: PWSTR,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const VS_FIXEDFILEINFO = extern struct {
    dwSignature: u32,
    dwStrucVersion: u32,
    dwFileVersionMS: u32,
    dwFileVersionLS: u32,
    dwProductVersionMS: u32,
    dwProductVersionLS: u32,
    dwFileFlagsMask: u32,
    dwFileFlags: VS_FIXEDFILEINFOFlags,
    dwFileOS: VS_FIXEDFILEINFO_dwFileOSFlags,
    dwFileType: VS_FIXEDFILEINFO_dwFileTypeFlags,
    dwFileSubtype: VS_FIXEDFILEINFO_dwFileSubtypeFlags,
    dwFileDateMS: u32,
    dwFileDateLS: u32,
};

pub const WINSTAENUMPROCA = fn(
    param0: PSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const WINSTAENUMPROCW = fn(
    param0: PWSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DESKTOPENUMPROCA = fn(
    param0: PSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DESKTOPENUMPROCW = fn(
    param0: PWSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: This Enum is marked as [Flags], what do I do with this?
pub const DI_FLAGS = extern enum(u32) {
    MASK = 1,
    IMAGE = 2,
    NORMAL = 3,
    COMPAT = 4,
    DEFAULTSIZE = 8,
    NOMIRROR = 16,
    _,
};
pub const DI_MASK = DI_FLAGS.MASK;
pub const DI_IMAGE = DI_FLAGS.IMAGE;
pub const DI_NORMAL = DI_FLAGS.NORMAL;
pub const DI_COMPAT = DI_FLAGS.COMPAT;
pub const DI_DEFAULTSIZE = DI_FLAGS.DEFAULTSIZE;
pub const DI_NOMIRROR = DI_FLAGS.NOMIRROR;

pub const LPOFNHOOKPROC = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const OPENFILENAME_NT4A = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    lpstrFilter: [*:0]const u8,
    lpstrCustomFilter: PSTR,
    nMaxCustFilter: u32,
    nFilterIndex: u32,
    lpstrFile: PSTR,
    nMaxFile: u32,
    lpstrFileTitle: PSTR,
    nMaxFileTitle: u32,
    lpstrInitialDir: [*:0]const u8,
    lpstrTitle: [*:0]const u8,
    Flags: u32,
    nFileOffset: u16,
    nFileExtension: u16,
    lpstrDefExt: [*:0]const u8,
    lCustData: LPARAM,
    lpfnHook: LPOFNHOOKPROC,
    lpTemplateName: [*:0]const u8,
};

pub const OPENFILENAME_NT4W = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    lpstrFilter: [*:0]const u16,
    lpstrCustomFilter: PWSTR,
    nMaxCustFilter: u32,
    nFilterIndex: u32,
    lpstrFile: PWSTR,
    nMaxFile: u32,
    lpstrFileTitle: PWSTR,
    nMaxFileTitle: u32,
    lpstrInitialDir: [*:0]const u16,
    lpstrTitle: [*:0]const u16,
    Flags: u32,
    nFileOffset: u16,
    nFileExtension: u16,
    lpstrDefExt: [*:0]const u16,
    lCustData: LPARAM,
    lpfnHook: LPOFNHOOKPROC,
    lpTemplateName: [*:0]const u16,
};

pub const OPENFILENAMEA = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    lpstrFilter: [*:0]const u8,
    lpstrCustomFilter: PSTR,
    nMaxCustFilter: u32,
    nFilterIndex: u32,
    lpstrFile: PSTR,
    nMaxFile: u32,
    lpstrFileTitle: PSTR,
    nMaxFileTitle: u32,
    lpstrInitialDir: [*:0]const u8,
    lpstrTitle: [*:0]const u8,
    Flags: u32,
    nFileOffset: u16,
    nFileExtension: u16,
    lpstrDefExt: [*:0]const u8,
    lCustData: LPARAM,
    lpfnHook: LPOFNHOOKPROC,
    lpTemplateName: [*:0]const u8,
    pvReserved: *c_void,
    dwReserved: u32,
    FlagsEx: u32,
};

pub const OPENFILENAMEW = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    lpstrFilter: [*:0]const u16,
    lpstrCustomFilter: PWSTR,
    nMaxCustFilter: u32,
    nFilterIndex: u32,
    lpstrFile: PWSTR,
    nMaxFile: u32,
    lpstrFileTitle: PWSTR,
    nMaxFileTitle: u32,
    lpstrInitialDir: [*:0]const u16,
    lpstrTitle: [*:0]const u16,
    Flags: u32,
    nFileOffset: u16,
    nFileExtension: u16,
    lpstrDefExt: [*:0]const u16,
    lCustData: LPARAM,
    lpfnHook: LPOFNHOOKPROC,
    lpTemplateName: [*:0]const u16,
    pvReserved: *c_void,
    dwReserved: u32,
    FlagsEx: u32,
};

pub const LPCCHOOKPROC = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const OFNOTIFYA = extern struct {
    hdr: NMHDR,
    lpOFN: *OPENFILENAMEA,
    pszFile: PSTR,
};

pub const OFNOTIFYW = extern struct {
    hdr: NMHDR,
    lpOFN: *OPENFILENAMEW,
    pszFile: PWSTR,
};

pub const OFNOTIFYEXA = extern struct {
    hdr: NMHDR,
    lpOFN: *OPENFILENAMEA,
    psf: *c_void,
    pidl: *c_void,
};

pub const OFNOTIFYEXW = extern struct {
    hdr: NMHDR,
    lpOFN: *OPENFILENAMEW,
    psf: *c_void,
    pidl: *c_void,
};

pub const CHOOSECOLORA = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hInstance: HWND,
    rgbResult: u32,
    lpCustColors: *u32,
    Flags: u32,
    lCustData: LPARAM,
    lpfnHook: LPCCHOOKPROC,
    lpTemplateName: [*:0]const u8,
};

pub const CHOOSECOLORW = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hInstance: HWND,
    rgbResult: u32,
    lpCustColors: *u32,
    Flags: u32,
    lCustData: LPARAM,
    lpfnHook: LPCCHOOKPROC,
    lpTemplateName: [*:0]const u16,
};

pub const LPFRHOOKPROC = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const FINDREPLACEA = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    Flags: FINDREPLACEW_Flags,
    lpstrFindWhat: PSTR,
    lpstrReplaceWith: PSTR,
    wFindWhatLen: u16,
    wReplaceWithLen: u16,
    lCustData: LPARAM,
    lpfnHook: LPFRHOOKPROC,
    lpTemplateName: [*:0]const u8,
};

pub const FINDREPLACEW = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    Flags: FINDREPLACEW_Flags,
    lpstrFindWhat: PWSTR,
    lpstrReplaceWith: PWSTR,
    wFindWhatLen: u16,
    wReplaceWithLen: u16,
    lCustData: LPARAM,
    lpfnHook: LPFRHOOKPROC,
    lpTemplateName: [*:0]const u16,
};

pub const LPCFHOOKPROC = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const CHOOSEFONTA = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hDC: HDC,
    lpLogFont: *LOGFONTA,
    iPointSize: i32,
    Flags: CHOOSEFONTW_Flags,
    rgbColors: u32,
    lCustData: LPARAM,
    lpfnHook: LPCFHOOKPROC,
    lpTemplateName: [*:0]const u8,
    hInstance: HINSTANCE,
    lpszStyle: PSTR,
    nFontType: CHOOSEFONTA_nFontType,
    ___MISSING_ALIGNMENT__: u16,
    nSizeMin: i32,
    nSizeMax: i32,
};

pub const CHOOSEFONTW = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hDC: HDC,
    lpLogFont: *LOGFONTW,
    iPointSize: i32,
    Flags: CHOOSEFONTW_Flags,
    rgbColors: u32,
    lCustData: LPARAM,
    lpfnHook: LPCFHOOKPROC,
    lpTemplateName: [*:0]const u16,
    hInstance: HINSTANCE,
    lpszStyle: PWSTR,
    nFontType: CHOOSEFONTA_nFontType,
    ___MISSING_ALIGNMENT__: u16,
    nSizeMin: i32,
    nSizeMax: i32,
};

pub const LPPRINTHOOKPROC = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const LPSETUPHOOKPROC = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const PRINTDLGA = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hDevMode: ?*c_void,
    hDevNames: ?*c_void,
    hDC: HDC,
    Flags: PRINTDLGEXA_Flags,
    nFromPage: u16,
    nToPage: u16,
    nMinPage: u16,
    nMaxPage: u16,
    nCopies: u16,
    hInstance: HINSTANCE,
    lCustData: LPARAM,
    lpfnPrintHook: LPPRINTHOOKPROC,
    lpfnSetupHook: LPSETUPHOOKPROC,
    lpPrintTemplateName: [*:0]const u8,
    lpSetupTemplateName: [*:0]const u8,
    hPrintTemplate: ?*c_void,
    hSetupTemplate: ?*c_void,
};

pub const PRINTDLGW = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hDevMode: ?*c_void,
    hDevNames: ?*c_void,
    hDC: HDC,
    Flags: PRINTDLGEXA_Flags,
    nFromPage: u16,
    nToPage: u16,
    nMinPage: u16,
    nMaxPage: u16,
    nCopies: u16,
    hInstance: HINSTANCE,
    lCustData: LPARAM,
    lpfnPrintHook: LPPRINTHOOKPROC,
    lpfnSetupHook: LPSETUPHOOKPROC,
    lpPrintTemplateName: [*:0]const u16,
    lpSetupTemplateName: [*:0]const u16,
    hPrintTemplate: ?*c_void,
    hSetupTemplate: ?*c_void,
};

const IID_IPrintDialogCallback_Value = @import("../zig.zig").Guid.initString("5852a2c3-6530-11d1-b6a3-0000f8757bf9");
pub const IID_IPrintDialogCallback = &IID_IPrintDialogCallback_Value;
pub const IPrintDialogCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitDone: fn(
            self: *const IPrintDialogCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectionChange: fn(
            self: *const IPrintDialogCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleMessage: fn(
            self: *const IPrintDialogCallback,
            hDlg: HWND,
            uMsg: u32,
            wParam: WPARAM,
            lParam: LPARAM,
            pResult: *LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintDialogCallback_InitDone(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintDialogCallback.VTable, self.vtable).InitDone(@ptrCast(*const IPrintDialogCallback, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintDialogCallback_SelectionChange(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintDialogCallback.VTable, self.vtable).SelectionChange(@ptrCast(*const IPrintDialogCallback, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintDialogCallback_HandleMessage(self: *const T, hDlg: HWND, uMsg: u32, wParam: WPARAM, lParam: LPARAM, pResult: *LRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintDialogCallback.VTable, self.vtable).HandleMessage(@ptrCast(*const IPrintDialogCallback, self), hDlg, uMsg, wParam, lParam, pResult);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintDialogServices_Value = @import("../zig.zig").Guid.initString("509aaeda-5639-11d1-b6a1-0000f8757bf9");
pub const IID_IPrintDialogServices = &IID_IPrintDialogServices_Value;
pub const IPrintDialogServices = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCurrentDevMode: fn(
            self: *const IPrintDialogServices,
            pDevMode: *DEVMODEA,
            pcbSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentPrinterName: fn(
            self: *const IPrintDialogServices,
            pPrinterName: ?[*:0]u16,
            pcchSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentPortName: fn(
            self: *const IPrintDialogServices,
            pPortName: ?[*:0]u16,
            pcchSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintDialogServices_GetCurrentDevMode(self: *const T, pDevMode: *DEVMODEA, pcbSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintDialogServices.VTable, self.vtable).GetCurrentDevMode(@ptrCast(*const IPrintDialogServices, self), pDevMode, pcbSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintDialogServices_GetCurrentPrinterName(self: *const T, pPrinterName: ?[*:0]u16, pcchSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintDialogServices.VTable, self.vtable).GetCurrentPrinterName(@ptrCast(*const IPrintDialogServices, self), pPrinterName, pcchSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrintDialogServices_GetCurrentPortName(self: *const T, pPortName: ?[*:0]u16, pcchSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrintDialogServices.VTable, self.vtable).GetCurrentPortName(@ptrCast(*const IPrintDialogServices, self), pPortName, pcchSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PRINTPAGERANGE = extern struct {
    nFromPage: u32,
    nToPage: u32,
};

pub const PRINTDLGEXA = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hDevMode: ?*c_void,
    hDevNames: ?*c_void,
    hDC: HDC,
    Flags: PRINTDLGEXA_Flags,
    Flags2: u32,
    ExclusionFlags: u32,
    nPageRanges: u32,
    nMaxPageRanges: u32,
    lpPageRanges: *PRINTPAGERANGE,
    nMinPage: u32,
    nMaxPage: u32,
    nCopies: u32,
    hInstance: HINSTANCE,
    lpPrintTemplateName: [*:0]const u8,
    lpCallback: *IUnknown,
    nPropertyPages: u32,
    lphPropertyPages: *HPROPSHEETPAGE,
    nStartPage: u32,
    dwResultAction: u32,
};

pub const PRINTDLGEXW = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hDevMode: ?*c_void,
    hDevNames: ?*c_void,
    hDC: HDC,
    Flags: PRINTDLGEXA_Flags,
    Flags2: u32,
    ExclusionFlags: u32,
    nPageRanges: u32,
    nMaxPageRanges: u32,
    lpPageRanges: *PRINTPAGERANGE,
    nMinPage: u32,
    nMaxPage: u32,
    nCopies: u32,
    hInstance: HINSTANCE,
    lpPrintTemplateName: [*:0]const u16,
    lpCallback: *IUnknown,
    nPropertyPages: u32,
    lphPropertyPages: *HPROPSHEETPAGE,
    nStartPage: u32,
    dwResultAction: u32,
};

pub const DEVNAMES = extern struct {
    wDriverOffset: u16,
    wDeviceOffset: u16,
    wOutputOffset: u16,
    wDefault: u16,
};

pub const LPPAGEPAINTHOOK = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const LPPAGESETUPHOOK = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const PAGESETUPDLGA = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hDevMode: ?*c_void,
    hDevNames: ?*c_void,
    Flags: PAGESETUPDLGA_Flags,
    ptPaperSize: POINT,
    rtMinMargin: RECT,
    rtMargin: RECT,
    hInstance: HINSTANCE,
    lCustData: LPARAM,
    lpfnPageSetupHook: LPPAGESETUPHOOK,
    lpfnPagePaintHook: LPPAGEPAINTHOOK,
    lpPageSetupTemplateName: [*:0]const u8,
    hPageSetupTemplate: ?*c_void,
};

pub const PAGESETUPDLGW = extern struct {
    lStructSize: u32,
    hwndOwner: HWND,
    hDevMode: ?*c_void,
    hDevNames: ?*c_void,
    Flags: PAGESETUPDLGA_Flags,
    ptPaperSize: POINT,
    rtMinMargin: RECT,
    rtMargin: RECT,
    hInstance: HINSTANCE,
    lCustData: LPARAM,
    lpfnPageSetupHook: LPPAGESETUPHOOK,
    lpfnPagePaintHook: LPPAGEPAINTHOOK,
    lpPageSetupTemplateName: [*:0]const u16,
    hPageSetupTemplate: ?*c_void,
};

pub const WNDPROC = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const DLGPROC = fn(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub const TIMERPROC = fn(
    param0: HWND,
    param1: u32,
    param2: ?*c_void,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const WNDENUMPROC = fn(
    param0: HWND,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const HOOKPROC = fn(
    code: i32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const SENDASYNCPROC = fn(
    param0: HWND,
    param1: u32,
    param2: ?*c_void,
    param3: LRESULT,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PROPENUMPROCA = fn(
    param0: HWND,
    param1: [*:0]const u8,
    param2: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PROPENUMPROCW = fn(
    param0: HWND,
    param1: [*:0]const u16,
    param2: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PROPENUMPROCEXA = fn(
    param0: HWND,
    param1: PSTR,
    param2: HANDLE,
    param3: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PROPENUMPROCEXW = fn(
    param0: HWND,
    param1: PWSTR,
    param2: HANDLE,
    param3: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const NAMEENUMPROCA = fn(
    param0: PSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const NAMEENUMPROCW = fn(
    param0: PWSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CBT_CREATEWNDA = extern struct {
    lpcs: *CREATESTRUCTA,
    hwndInsertAfter: HWND,
};

pub const CBT_CREATEWNDW = extern struct {
    lpcs: *CREATESTRUCTW,
    hwndInsertAfter: HWND,
};

pub const CBTACTIVATESTRUCT = extern struct {
    fMouse: BOOL,
    hWndActive: HWND,
};

pub const SHELLHOOKINFO = extern struct {
    hwnd: HWND,
    rc: RECT,
};

pub const EVENTMSG = extern struct {
    message: u32,
    paramL: u32,
    paramH: u32,
    time: u32,
    hwnd: HWND,
};

pub const CWPSTRUCT = extern struct {
    lParam: LPARAM,
    wParam: WPARAM,
    message: u32,
    hwnd: HWND,
};

pub const CWPRETSTRUCT = extern struct {
    lResult: LRESULT,
    lParam: LPARAM,
    wParam: WPARAM,
    message: u32,
    hwnd: HWND,
};

pub const KBDLLHOOKSTRUCT = extern struct {
    vkCode: u32,
    scanCode: u32,
    flags: u32,
    time: u32,
    dwExtraInfo: ?*c_void,
};

pub const MSLLHOOKSTRUCT = extern struct {
    pt: POINT,
    mouseData: MOUSEHOOKSTRUCTEX_mouseData,
    flags: u32,
    time: u32,
    dwExtraInfo: ?*c_void,
};

pub const DEBUGHOOKINFO = extern struct {
    idThread: u32,
    idThreadInstaller: u32,
    lParam: LPARAM,
    wParam: WPARAM,
    code: i32,
};

pub const MOUSEHOOKSTRUCT = extern struct {
    pt: POINT,
    hwnd: HWND,
    wHitTestCode: u32,
    dwExtraInfo: ?*c_void,
};

pub const MOUSEHOOKSTRUCTEX = extern struct {
    __AnonymousBase_winuser_L1173_C46: MOUSEHOOKSTRUCT,
    mouseData: MOUSEHOOKSTRUCTEX_mouseData,
};

pub const HARDWAREHOOKSTRUCT = extern struct {
    hwnd: HWND,
    message: u32,
    wParam: WPARAM,
    lParam: LPARAM,
};

pub const WNDCLASSEXA = extern struct {
    cbSize: u32,
    style: u32,
    lpfnWndProc: WNDPROC,
    cbClsExtra: i32,
    cbWndExtra: i32,
    hInstance: HINSTANCE,
    hIcon: HICON,
    hCursor: HCURSOR,
    hbrBackground: HBRUSH,
    lpszMenuName: [*:0]const u8,
    lpszClassName: [*:0]const u8,
    hIconSm: HICON,
};

pub const WNDCLASSEXW = extern struct {
    cbSize: u32,
    style: u32,
    lpfnWndProc: WNDPROC,
    cbClsExtra: i32,
    cbWndExtra: i32,
    hInstance: HINSTANCE,
    hIcon: HICON,
    hCursor: HCURSOR,
    hbrBackground: HBRUSH,
    lpszMenuName: [*:0]const u16,
    lpszClassName: [*:0]const u16,
    hIconSm: HICON,
};

pub const WNDCLASSA = extern struct {
    style: u32,
    lpfnWndProc: WNDPROC,
    cbClsExtra: i32,
    cbWndExtra: i32,
    hInstance: HINSTANCE,
    hIcon: HICON,
    hCursor: HCURSOR,
    hbrBackground: HBRUSH,
    lpszMenuName: [*:0]const u8,
    lpszClassName: [*:0]const u8,
};

pub const WNDCLASSW = extern struct {
    style: u32,
    lpfnWndProc: WNDPROC,
    cbClsExtra: i32,
    cbWndExtra: i32,
    hInstance: HINSTANCE,
    hIcon: HICON,
    hCursor: HCURSOR,
    hbrBackground: HBRUSH,
    lpszMenuName: [*:0]const u16,
    lpszClassName: [*:0]const u16,
};

pub const MSG = extern struct {
    hwnd: HWND,
    message: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    time: u32,
    pt: POINT,
};

pub const MINMAXINFO = extern struct {
    ptReserved: POINT,
    ptMaxSize: POINT,
    ptMaxPosition: POINT,
    ptMinTrackSize: POINT,
    ptMaxTrackSize: POINT,
};

pub const MDINEXTMENU = extern struct {
    hmenuIn: HMENU,
    hmenuNext: HMENU,
    hwndNext: HWND,
};

pub const WINDOWPOS = extern struct {
    hwnd: HWND,
    hwndInsertAfter: HWND,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    flags: SetWindowPos_uFlags,
};

pub const NCCALCSIZE_PARAMS = extern struct {
    rgrc: [3]RECT,
    lppos: *WINDOWPOS,
};

pub const ACCEL = extern struct {
    fVirt: ACCEL_fVirtFlags,
    key: u16,
    cmd: u16,
};

pub const CREATESTRUCTA = extern struct {
    lpCreateParams: *c_void,
    hInstance: HINSTANCE,
    hMenu: HMENU,
    hwndParent: HWND,
    cy: i32,
    cx: i32,
    y: i32,
    x: i32,
    style: i32,
    lpszName: [*:0]const u8,
    lpszClass: [*:0]const u8,
    dwExStyle: u32,
};

pub const CREATESTRUCTW = extern struct {
    lpCreateParams: *c_void,
    hInstance: HINSTANCE,
    hMenu: HMENU,
    hwndParent: HWND,
    cy: i32,
    cx: i32,
    y: i32,
    x: i32,
    style: i32,
    lpszName: [*:0]const u16,
    lpszClass: [*:0]const u16,
    dwExStyle: u32,
};

pub const WINDOWPLACEMENT = extern struct {
    length: u32,
    flags: WINDOWPLACEMENT_flags,
    showCmd: SHOW_WINDOW_CMD,
    ptMinPosition: POINT,
    ptMaxPosition: POINT,
    rcNormalPosition: RECT,
};

pub const STYLESTRUCT = extern struct {
    styleOld: u32,
    styleNew: u32,
};

pub const BSMINFO = extern struct {
    cbSize: u32,
    hdesk: HDESK,
    hwnd: HWND,
    luid: LUID,
};

pub const PREGISTERCLASSNAMEW = fn(
    param0: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u8;

pub const UPDATELAYEREDWINDOWINFO = extern struct {
    cbSize: u32,
    hdcDst: HDC,
    pptDst: *const POINT,
    psize: *const SIZE,
    hdcSrc: HDC,
    pptSrc: *const POINT,
    crKey: u32,
    pblend: *const BLENDFUNCTION,
    dwFlags: UpdateLayeredWindow_dwFlags,
    prcDirty: *const RECT,
};

pub const DLGTEMPLATE = extern struct {
    style: u32,
    dwExtendedStyle: u32,
    cdit: u16,
    x: i16,
    y: i16,
    cx: i16,
    cy: i16,
};

pub const DLGITEMTEMPLATE = extern struct {
    style: u32,
    dwExtendedStyle: u32,
    x: i16,
    y: i16,
    cx: i16,
    cy: i16,
    id: u16,
};

pub const POINTER_INPUT_TYPE = extern enum(i32) {
    POINTER = 1,
    TOUCH = 2,
    PEN = 3,
    MOUSE = 4,
    TOUCHPAD = 5,
};
pub const PT_POINTER = POINTER_INPUT_TYPE.POINTER;
pub const PT_TOUCH = POINTER_INPUT_TYPE.TOUCH;
pub const PT_PEN = POINTER_INPUT_TYPE.PEN;
pub const PT_MOUSE = POINTER_INPUT_TYPE.MOUSE;
pub const PT_TOUCHPAD = POINTER_INPUT_TYPE.TOUCHPAD;

pub const TPMPARAMS = extern struct {
    cbSize: u32,
    rcExclude: RECT,
};

pub const MENUINFO = extern struct {
    cbSize: u32,
    fMask: MENUINFO_fMaskFlags,
    dwStyle: MENUINFO_dwStyleFlags,
    cyMax: u32,
    hbrBack: HBRUSH,
    dwContextHelpID: u32,
    dwMenuData: ?*c_void,
};

pub const MENUGETOBJECTINFO = extern struct {
    dwFlags: MENUGETOBJECTINFO_dwFlags,
    uPos: u32,
    hmenu: HMENU,
    riid: *c_void,
    pvObj: *c_void,
};

pub const MENUITEMINFOA = extern struct {
    cbSize: u32,
    fMask: MENUITEMINFOA_fMask,
    fType: MENU_ITEM_TYPE,
    fState: u32,
    wID: u32,
    hSubMenu: HMENU,
    hbmpChecked: HBITMAP,
    hbmpUnchecked: HBITMAP,
    dwItemData: ?*c_void,
    dwTypeData: PSTR,
    cch: u32,
    hbmpItem: HBITMAP,
};

pub const MENUITEMINFOW = extern struct {
    cbSize: u32,
    fMask: MENUITEMINFOA_fMask,
    fType: MENU_ITEM_TYPE,
    fState: u32,
    wID: u32,
    hSubMenu: HMENU,
    hbmpChecked: HBITMAP,
    hbmpUnchecked: HBITMAP,
    dwItemData: ?*c_void,
    dwTypeData: PWSTR,
    cch: u32,
    hbmpItem: HBITMAP,
};

pub const DROPSTRUCT = extern struct {
    hwndSource: HWND,
    hwndSink: HWND,
    wFmt: u32,
    dwData: ?*c_void,
    ptDrop: POINT,
    dwControlData: u32,
};

pub const MSGBOXCALLBACK = fn(
    lpHelpInfo: *HELPINFO,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MSGBOXPARAMSA = extern struct {
    cbSize: u32,
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    lpszText: [*:0]const u8,
    lpszCaption: [*:0]const u8,
    dwStyle: MB_FLAGS,
    lpszIcon: [*:0]const u8,
    dwContextHelpId: ?*c_void,
    lpfnMsgBoxCallback: MSGBOXCALLBACK,
    dwLanguageId: u32,
};

pub const MSGBOXPARAMSW = extern struct {
    cbSize: u32,
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    lpszText: [*:0]const u16,
    lpszCaption: [*:0]const u16,
    dwStyle: MB_FLAGS,
    lpszIcon: [*:0]const u16,
    dwContextHelpId: ?*c_void,
    lpfnMsgBoxCallback: MSGBOXCALLBACK,
    dwLanguageId: u32,
};

pub const MENUITEMTEMPLATEHEADER = extern struct {
    versionNumber: u16,
    offset: u16,
};

pub const MENUITEMTEMPLATE = extern struct {
    mtOption: u16,
    mtID: u16,
    mtString: [1]u16,
};

pub const ICONINFO = extern struct {
    fIcon: BOOL,
    xHotspot: u32,
    yHotspot: u32,
    hbmMask: HBITMAP,
    hbmColor: HBITMAP,
};

pub const CURSORSHAPE = extern struct {
    xHotSpot: i32,
    yHotSpot: i32,
    cx: i32,
    cy: i32,
    cbWidth: i32,
    Planes: u8,
    BitsPixel: u8,
};

pub const ICONINFOEXA = extern struct {
    cbSize: u32,
    fIcon: BOOL,
    xHotspot: u32,
    yHotspot: u32,
    hbmMask: HBITMAP,
    hbmColor: HBITMAP,
    wResID: u16,
    szModName: [260]i8,
    szResName: [260]i8,
};

pub const ICONINFOEXW = extern struct {
    cbSize: u32,
    fIcon: BOOL,
    xHotspot: u32,
    yHotspot: u32,
    hbmMask: HBITMAP,
    hbmColor: HBITMAP,
    wResID: u16,
    szModName: [260]u16,
    szResName: [260]u16,
};

pub const EDIT_CONTROL_FEATURE = extern enum(i32) {
    ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0,
    PASTE_NOTIFICATIONS = 1,
};
pub const EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = EDIT_CONTROL_FEATURE.ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT;
pub const EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = EDIT_CONTROL_FEATURE.PASTE_NOTIFICATIONS;

pub const MDICREATESTRUCTA = extern struct {
    szClass: [*:0]const u8,
    szTitle: [*:0]const u8,
    hOwner: HANDLE,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    style: WINDOWS_STYLE,
    lParam: LPARAM,
};

pub const MDICREATESTRUCTW = extern struct {
    szClass: [*:0]const u16,
    szTitle: [*:0]const u16,
    hOwner: HANDLE,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    style: WINDOWS_STYLE,
    lParam: LPARAM,
};

pub const CLIENTCREATESTRUCT = extern struct {
    hWindowMenu: HANDLE,
    idFirstChild: u32,
};

pub const TouchPredictionParameters = extern struct {
    cbSize: u32,
    dwLatency: u32,
    dwSampleTime: u32,
    bUseHWTimeStamp: u32,
};

pub const HANDEDNESS = extern enum(i32) {
    LEFT = 0,
    RIGHT = 1,
};
pub const HANDEDNESS_LEFT = HANDEDNESS.LEFT;
pub const HANDEDNESS_RIGHT = HANDEDNESS.RIGHT;

pub const NONCLIENTMETRICSA = extern struct {
    cbSize: u32,
    iBorderWidth: i32,
    iScrollWidth: i32,
    iScrollHeight: i32,
    iCaptionWidth: i32,
    iCaptionHeight: i32,
    lfCaptionFont: LOGFONTA,
    iSmCaptionWidth: i32,
    iSmCaptionHeight: i32,
    lfSmCaptionFont: LOGFONTA,
    iMenuWidth: i32,
    iMenuHeight: i32,
    lfMenuFont: LOGFONTA,
    lfStatusFont: LOGFONTA,
    lfMessageFont: LOGFONTA,
    iPaddedBorderWidth: i32,
};

pub const NONCLIENTMETRICSW = extern struct {
    cbSize: u32,
    iBorderWidth: i32,
    iScrollWidth: i32,
    iScrollHeight: i32,
    iCaptionWidth: i32,
    iCaptionHeight: i32,
    lfCaptionFont: LOGFONTW,
    iSmCaptionWidth: i32,
    iSmCaptionHeight: i32,
    lfSmCaptionFont: LOGFONTW,
    iMenuWidth: i32,
    iMenuHeight: i32,
    lfMenuFont: LOGFONTW,
    lfStatusFont: LOGFONTW,
    lfMessageFont: LOGFONTW,
    iPaddedBorderWidth: i32,
};

pub const MINIMIZEDMETRICS = extern struct {
    cbSize: u32,
    iWidth: i32,
    iHorzGap: i32,
    iVertGap: i32,
    iArrange: MINIMIZEDMETRICS_iArrangeFlags,
};

pub const ICONMETRICSA = extern struct {
    cbSize: u32,
    iHorzSpacing: i32,
    iVertSpacing: i32,
    iTitleWrap: i32,
    lfFont: LOGFONTA,
};

pub const ICONMETRICSW = extern struct {
    cbSize: u32,
    iHorzSpacing: i32,
    iVertSpacing: i32,
    iTitleWrap: i32,
    lfFont: LOGFONTW,
};

pub const ANIMATIONINFO = extern struct {
    cbSize: u32,
    iMinAnimate: i32,
};

pub const AUDIODESCRIPTION = extern struct {
    cbSize: u32,
    Enabled: BOOL,
    Locale: u32,
};

pub const GUITHREADINFO = extern struct {
    cbSize: u32,
    flags: GUITHREADINFO_flags,
    hwndActive: HWND,
    hwndFocus: HWND,
    hwndCapture: HWND,
    hwndMenuOwner: HWND,
    hwndMoveSize: HWND,
    hwndCaret: HWND,
    rcCaret: RECT,
};

pub const CURSORINFO = extern struct {
    cbSize: u32,
    flags: CURSORINFO_flags,
    hCursor: HCURSOR,
    ptScreenPos: POINT,
};

pub const WINDOWINFO = extern struct {
    cbSize: u32,
    rcWindow: RECT,
    rcClient: RECT,
    dwStyle: u32,
    dwExStyle: u32,
    dwWindowStatus: u32,
    cxWindowBorders: u32,
    cyWindowBorders: u32,
    atomWindowType: u16,
    wCreatorVersion: u16,
};

pub const TITLEBARINFO = extern struct {
    cbSize: u32,
    rcTitleBar: RECT,
    rgstate: [6]u32,
};

pub const TITLEBARINFOEX = extern struct {
    cbSize: u32,
    rcTitleBar: RECT,
    rgstate: [6]u32,
    rgrect: [6]RECT,
};

pub const MENUBARINFO = extern struct {
    cbSize: u32,
    rcBar: RECT,
    hMenu: HMENU,
    hwndMenu: HWND,
    _bitfield: i32,
};

pub const ALTTABINFO = extern struct {
    cbSize: u32,
    cItems: i32,
    cColumns: i32,
    cRows: i32,
    iColFocus: i32,
    iRowFocus: i32,
    cxItem: i32,
    cyItem: i32,
    ptStart: POINT,
};

pub const CHANGEFILTERSTRUCT = extern struct {
    cbSize: u32,
    ExtStatus: CHANGEFILTERSTRUCT_ExtStatusFlags,
};

pub const IndexedResourceQualifier = extern struct {
    name: PWSTR,
    value: PWSTR,
};

pub const MrmPlatformVersion = extern enum(i32) {
    Default = 0,
    Windows10_0_0_0 = 17432576,
    Windows10_0_0_5 = 17432581,
};
pub const MrmPlatformVersion_Default = MrmPlatformVersion.Default;
pub const MrmPlatformVersion_Windows10_0_0_0 = MrmPlatformVersion.Windows10_0_0_0;
pub const MrmPlatformVersion_Windows10_0_0_5 = MrmPlatformVersion.Windows10_0_0_5;

pub const MrmResourceIndexerHandle = extern struct {
    handle: *c_void,
};

pub const MrmPackagingMode = extern enum(i32) {
    StandaloneFile = 0,
    AutoSplit = 1,
    ResourcePack = 2,
};
pub const MrmPackagingModeStandaloneFile = MrmPackagingMode.StandaloneFile;
pub const MrmPackagingModeAutoSplit = MrmPackagingMode.AutoSplit;
pub const MrmPackagingModeResourcePack = MrmPackagingMode.ResourcePack;

pub const MrmPackagingOptions = extern enum(i32) {
    None = 0,
    OmitSchemaFromResourcePacks = 1,
    SplitLanguageVariants = 2,
};
pub const MrmPackagingOptionsNone = MrmPackagingOptions.None;
pub const MrmPackagingOptionsOmitSchemaFromResourcePacks = MrmPackagingOptions.OmitSchemaFromResourcePacks;
pub const MrmPackagingOptionsSplitLanguageVariants = MrmPackagingOptions.SplitLanguageVariants;

pub const MrmDumpType = extern enum(i32) {
    Basic = 0,
    Detailed = 1,
    Schema = 2,
};
pub const MrmDumpType_Basic = MrmDumpType.Basic;
pub const MrmDumpType_Detailed = MrmDumpType.Detailed;
pub const MrmDumpType_Schema = MrmDumpType.Schema;

pub const MrmResourceIndexerMessageSeverity = extern enum(i32) {
    Verbose = 0,
    Info = 1,
    Warning = 2,
    Error = 3,
};
pub const MrmResourceIndexerMessageSeverityVerbose = MrmResourceIndexerMessageSeverity.Verbose;
pub const MrmResourceIndexerMessageSeverityInfo = MrmResourceIndexerMessageSeverity.Info;
pub const MrmResourceIndexerMessageSeverityWarning = MrmResourceIndexerMessageSeverity.Warning;
pub const MrmResourceIndexerMessageSeverityError = MrmResourceIndexerMessageSeverity.Error;

pub const MrmResourceIndexerMessage = extern struct {
    severity: MrmResourceIndexerMessageSeverity,
    id: u32,
    text: [*:0]const u16,
};


//--------------------------------------------------------------------------------
// Section: Functions (465)
//--------------------------------------------------------------------------------
pub extern "KERNEL32" fn lstrcmpA(
    lpString1: [*:0]const u8,
    lpString2: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn lstrcmpW(
    lpString1: [*:0]const u16,
    lpString2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn lstrcmpiA(
    lpString1: [*:0]const u8,
    lpString2: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn lstrcmpiW(
    lpString1: [*:0]const u16,
    lpString2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn lstrcpynA(
    lpString1: [*:0]u8,
    lpString2: [*:0]const u8,
    iMaxLength: i32,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "KERNEL32" fn lstrcpynW(
    lpString1: [*:0]u16,
    lpString2: [*:0]const u16,
    iMaxLength: i32,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "KERNEL32" fn lstrcpyA(
    lpString1: PSTR,
    lpString2: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "KERNEL32" fn lstrcpyW(
    lpString1: PWSTR,
    lpString2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "KERNEL32" fn lstrcatA(
    lpString1: PSTR,
    lpString2: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "KERNEL32" fn lstrcatW(
    lpString1: PWSTR,
    lpString2: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "KERNEL32" fn lstrlenA(
    lpString: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn lstrlenW(
    lpString: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn FindResourceA(
    hModule: ?*c_void,
    lpName: [*:0]const u8,
    lpType: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HRSRC;

pub extern "KERNEL32" fn FindResourceExA(
    hModule: ?*c_void,
    lpType: [*:0]const u8,
    lpName: [*:0]const u8,
    wLanguage: u16,
) callconv(@import("std").os.windows.WINAPI) HRSRC;

pub extern "KERNEL32" fn EnumResourceTypesA(
    hModule: ?*c_void,
    lpEnumFunc: ENUMRESTYPEPROCA,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumResourceTypesW(
    hModule: ?*c_void,
    lpEnumFunc: ENUMRESTYPEPROCW,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumResourceNamesA(
    hModule: ?*c_void,
    lpType: [*:0]const u8,
    lpEnumFunc: ENUMRESNAMEPROCA,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumResourceLanguagesA(
    hModule: ?*c_void,
    lpType: [*:0]const u8,
    lpName: [*:0]const u8,
    lpEnumFunc: ENUMRESLANGPROCA,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumResourceLanguagesW(
    hModule: ?*c_void,
    lpType: [*:0]const u16,
    lpName: [*:0]const u16,
    lpEnumFunc: ENUMRESLANGPROCW,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn BeginUpdateResourceA(
    pFileName: [*:0]const u8,
    bDeleteExistingResources: BOOL,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "KERNEL32" fn BeginUpdateResourceW(
    pFileName: [*:0]const u16,
    bDeleteExistingResources: BOOL,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "KERNEL32" fn UpdateResourceA(
    hUpdate: HANDLE,
    lpType: [*:0]const u8,
    lpName: [*:0]const u8,
    wLanguage: u16,
    lpData: ?[*]u8,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn UpdateResourceW(
    hUpdate: HANDLE,
    lpType: [*:0]const u16,
    lpName: [*:0]const u16,
    wLanguage: u16,
    lpData: ?[*]u8,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EndUpdateResourceA(
    hUpdate: HANDLE,
    fDiscard: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EndUpdateResourceW(
    hUpdate: HANDLE,
    fDiscard: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn FreeResource(
    hResData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn LoadResource(
    hModule: ?*c_void,
    hResInfo: HRSRC,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn LoadStringA(
    hInstance: HINSTANCE,
    uID: u32,
    lpBuffer: [*:0]u8,
    cchBufferMax: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn LoadStringW(
    hInstance: HINSTANCE,
    uID: u32,
    lpBuffer: [*:0]u16,
    cchBufferMax: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn LockResource(
    hResData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "KERNEL32" fn SizeofResource(
    hModule: ?*c_void,
    hResInfo: HRSRC,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "KERNEL32" fn EnumResourceLanguagesExA(
    hModule: ?*c_void,
    lpType: [*:0]const u8,
    lpName: [*:0]const u8,
    lpEnumFunc: ENUMRESLANGPROCA,
    lParam: ?*c_void,
    dwFlags: u32,
    LangId: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumResourceLanguagesExW(
    hModule: ?*c_void,
    lpType: [*:0]const u16,
    lpName: [*:0]const u16,
    lpEnumFunc: ENUMRESLANGPROCW,
    lParam: ?*c_void,
    dwFlags: u32,
    LangId: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumResourceNamesExA(
    hModule: ?*c_void,
    lpType: [*:0]const u8,
    lpEnumFunc: ENUMRESNAMEPROCA,
    lParam: ?*c_void,
    dwFlags: u32,
    LangId: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumResourceNamesExW(
    hModule: ?*c_void,
    lpType: [*:0]const u16,
    lpEnumFunc: ENUMRESNAMEPROCW,
    lParam: ?*c_void,
    dwFlags: u32,
    LangId: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumResourceTypesExA(
    hModule: ?*c_void,
    lpEnumFunc: ENUMRESTYPEPROCA,
    lParam: ?*c_void,
    dwFlags: u32,
    LangId: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumResourceTypesExW(
    hModule: ?*c_void,
    lpEnumFunc: ENUMRESTYPEPROCW,
    lParam: ?*c_void,
    dwFlags: u32,
    LangId: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn GetOpenFileNameA(
    param0: *OPENFILENAMEA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn GetOpenFileNameW(
    param0: *OPENFILENAMEW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn GetSaveFileNameA(
    param0: *OPENFILENAMEA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn GetSaveFileNameW(
    param0: *OPENFILENAMEW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn GetFileTitleA(
    param0: [*:0]const u8,
    Buf: [*:0]u8,
    cchSize: u16,
) callconv(@import("std").os.windows.WINAPI) i16;

pub extern "COMDLG32" fn GetFileTitleW(
    param0: [*:0]const u16,
    Buf: [*:0]u16,
    cchSize: u16,
) callconv(@import("std").os.windows.WINAPI) i16;

pub extern "COMDLG32" fn ChooseColorA(
    param0: *CHOOSECOLORA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn ChooseColorW(
    param0: *CHOOSECOLORW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn FindTextA(
    param0: *FINDREPLACEA,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "COMDLG32" fn FindTextW(
    param0: *FINDREPLACEW,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "COMDLG32" fn ReplaceTextA(
    param0: *FINDREPLACEA,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "COMDLG32" fn ReplaceTextW(
    param0: *FINDREPLACEW,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "COMDLG32" fn ChooseFontA(
    param0: *CHOOSEFONTA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn ChooseFontW(
    param0: *CHOOSEFONTW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn PrintDlgA(
    pPD: *PRINTDLGA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn PrintDlgW(
    pPD: *PRINTDLGW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn PrintDlgExA(
    pPD: *PRINTDLGEXA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "COMDLG32" fn PrintDlgExW(
    pPD: *PRINTDLGEXW,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "COMDLG32" fn CommDlgExtendedError(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "COMDLG32" fn PageSetupDlgA(
    param0: *PAGESETUPDLGA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "COMDLG32" fn PageSetupDlgW(
    param0: *PAGESETUPDLGW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn wvsprintfA(
    param0: PSTR,
    param1: [*:0]const u8,
    arglist: *i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn wvsprintfW(
    param0: PWSTR,
    param1: [*:0]const u16,
    arglist: *i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn wsprintfA(
    param0: PSTR,
    param1: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn wsprintfW(
    param0: PWSTR,
    param1: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn IsHungAppWindow(
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn RegisterWindowMessageA(
    lpString: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn RegisterWindowMessageW(
    lpString: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetMessageA(
    lpMsg: *MSG,
    hWnd: HWND,
    wMsgFilterMin: u32,
    wMsgFilterMax: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMessageW(
    lpMsg: *MSG,
    hWnd: HWND,
    wMsgFilterMin: u32,
    wMsgFilterMax: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn TranslateMessage(
    lpMsg: *const MSG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DispatchMessageA(
    lpMsg: *const MSG,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn DispatchMessageW(
    lpMsg: *const MSG,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn SetMessageQueue(
    cMessagesMax: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn PeekMessageA(
    lpMsg: *MSG,
    hWnd: HWND,
    wMsgFilterMin: u32,
    wMsgFilterMax: u32,
    wRemoveMsg: PeekMessage_wRemoveMsg,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn PeekMessageW(
    lpMsg: *MSG,
    hWnd: HWND,
    wMsgFilterMin: u32,
    wMsgFilterMax: u32,
    wRemoveMsg: PeekMessage_wRemoveMsg,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMessagePos(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetMessageTime(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetMessageExtraInfo(
) callconv(@import("std").os.windows.WINAPI) LPARAM;

pub extern "USER32" fn SetMessageExtraInfo(
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LPARAM;

pub extern "USER32" fn SendMessageA(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn SendMessageW(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn SendMessageTimeoutA(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    fuFlags: SendMessageTimeout_fuFlags,
    uTimeout: u32,
    lpdwResult: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn SendMessageTimeoutW(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    fuFlags: SendMessageTimeout_fuFlags,
    uTimeout: u32,
    lpdwResult: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn SendNotifyMessageA(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SendNotifyMessageW(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SendMessageCallbackA(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    lpResultCallBack: SENDASYNCPROC,
    dwData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SendMessageCallbackW(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    lpResultCallBack: SENDASYNCPROC,
    dwData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn BroadcastSystemMessageExA(
    flags: BroadcastSystemMessage_flags,
    lpInfo: ?*BroadcastSystemMessage_lpInfo,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    pbsmInfo: ?*BSMINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn BroadcastSystemMessageExW(
    flags: BroadcastSystemMessage_flags,
    lpInfo: ?*BroadcastSystemMessage_lpInfo,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    pbsmInfo: ?*BSMINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn BroadcastSystemMessageA(
    flags: u32,
    lpInfo: ?*u32,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn BroadcastSystemMessageW(
    flags: BroadcastSystemMessage_flags,
    lpInfo: ?*BroadcastSystemMessage_lpInfo,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn PostMessageA(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn PostMessageW(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn PostThreadMessageA(
    idThread: u32,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn PostThreadMessageW(
    idThread: u32,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ReplyMessage(
    lResult: LRESULT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn WaitMessage(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DefWindowProcA(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn DefWindowProcW(
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn PostQuitMessage(
    nExitCode: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "USER32" fn CallWindowProcA(
    lpPrevWndFunc: WNDPROC,
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn CallWindowProcW(
    lpPrevWndFunc: WNDPROC,
    hWnd: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn InSendMessage(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn InSendMessageEx(
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn RegisterClassA(
    lpWndClass: *const WNDCLASSA,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn RegisterClassW(
    lpWndClass: *const WNDCLASSW,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn UnregisterClassA(
    lpClassName: [*:0]const u8,
    hInstance: HINSTANCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn UnregisterClassW(
    lpClassName: [*:0]const u16,
    hInstance: HINSTANCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetClassInfoA(
    hInstance: HINSTANCE,
    lpClassName: [*:0]const u8,
    lpWndClass: *WNDCLASSA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetClassInfoW(
    hInstance: HINSTANCE,
    lpClassName: [*:0]const u16,
    lpWndClass: *WNDCLASSW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn RegisterClassExA(
    param0: *const WNDCLASSEXA,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn RegisterClassExW(
    param0: *const WNDCLASSEXW,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn GetClassInfoExA(
    hInstance: HINSTANCE,
    lpszClass: [*:0]const u8,
    lpwcx: *WNDCLASSEXA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetClassInfoExW(
    hInstance: HINSTANCE,
    lpszClass: [*:0]const u16,
    lpwcx: *WNDCLASSEXW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CreateWindowExA(
    dwExStyle: WINDOWS_EX_STYLE,
    lpClassName: ?[*:0]const u8,
    lpWindowName: ?[*:0]const u8,
    dwStyle: WINDOWS_STYLE,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
    hWndParent: HWND,
    hMenu: HMENU,
    hInstance: HINSTANCE,
    lpParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn CreateWindowExW(
    dwExStyle: WINDOWS_EX_STYLE,
    lpClassName: ?[*:0]const u16,
    lpWindowName: ?[*:0]const u16,
    dwStyle: WINDOWS_STYLE,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
    hWndParent: HWND,
    hMenu: HMENU,
    hInstance: HINSTANCE,
    lpParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn IsWindow(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsMenu(
    hMenu: HMENU,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsChild(
    hWndParent: HWND,
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DestroyWindow(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ShowWindow(
    hWnd: HWND,
    nCmdShow: SHOW_WINDOW_CMD,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn AnimateWindow(
    hWnd: HWND,
    dwTime: u32,
    dwFlags: AnimateWindow_dwFlags,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn UpdateLayeredWindow(
    hWnd: HWND,
    hdcDst: HDC,
    pptDst: ?*POINT,
    psize: ?*SIZE,
    hdcSrc: HDC,
    pptSrc: ?*POINT,
    crKey: u32,
    pblend: ?*BLENDFUNCTION,
    dwFlags: UpdateLayeredWindow_dwFlags,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn UpdateLayeredWindowIndirect(
    hWnd: HWND,
    pULWInfo: *const UPDATELAYEREDWINDOWINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetLayeredWindowAttributes(
    hwnd: HWND,
    pcrKey: ?*u32,
    pbAlpha: ?*u8,
    pdwFlags: ?*SetLayeredWindowAttributes_dwFlags,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetLayeredWindowAttributes(
    hwnd: HWND,
    crKey: u32,
    bAlpha: u8,
    dwFlags: SetLayeredWindowAttributes_dwFlags,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ShowWindowAsync(
    hWnd: HWND,
    nCmdShow: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ShowOwnedPopups(
    hWnd: HWND,
    fShow: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn OpenIcon(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CloseWindow(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn MoveWindow(
    hWnd: HWND,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
    bRepaint: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetWindowPos(
    hWnd: HWND,
    hWndInsertAfter: HWND,
    X: i32,
    Y: i32,
    cx: i32,
    cy: i32,
    uFlags: SetWindowPos_uFlags,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetWindowPlacement(
    hWnd: HWND,
    lpwndpl: *WINDOWPLACEMENT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetWindowPlacement(
    hWnd: HWND,
    lpwndpl: *const WINDOWPLACEMENT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetWindowDisplayAffinity(
    hWnd: HWND,
    pdwAffinity: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetWindowDisplayAffinity(
    hWnd: HWND,
    dwAffinity: SetWindowDisplayAffinity_dwAffinityFlags,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn BeginDeferWindowPos(
    nNumWindows: i32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn DeferWindowPos(
    hWinPosInfo: ?*c_void,
    hWnd: HWND,
    hWndInsertAfter: HWND,
    x: i32,
    y: i32,
    cx: i32,
    cy: i32,
    uFlags: SetWindowPos_uFlags,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn EndDeferWindowPos(
    hWinPosInfo: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsWindowVisible(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsIconic(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn AnyPopup(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn BringWindowToTop(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsZoomed(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CreateDialogParamA(
    hInstance: HINSTANCE,
    lpTemplateName: [*:0]const u8,
    hWndParent: HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn CreateDialogParamW(
    hInstance: HINSTANCE,
    lpTemplateName: [*:0]const u16,
    hWndParent: HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn CreateDialogIndirectParamA(
    hInstance: HINSTANCE,
    lpTemplate: *DLGTEMPLATE,
    hWndParent: HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn CreateDialogIndirectParamW(
    hInstance: HINSTANCE,
    lpTemplate: *DLGTEMPLATE,
    hWndParent: HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn DialogBoxParamA(
    hInstance: HINSTANCE,
    lpTemplateName: [*:0]const u8,
    hWndParent: HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn DialogBoxParamW(
    hInstance: HINSTANCE,
    lpTemplateName: [*:0]const u16,
    hWndParent: HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn DialogBoxIndirectParamA(
    hInstance: HINSTANCE,
    hDialogTemplate: *DLGTEMPLATE,
    hWndParent: HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn DialogBoxIndirectParamW(
    hInstance: HINSTANCE,
    hDialogTemplate: *DLGTEMPLATE,
    hWndParent: HWND,
    lpDialogFunc: ?DLGPROC,
    dwInitParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn EndDialog(
    hDlg: HWND,
    nResult: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetDlgItem(
    hDlg: HWND,
    nIDDlgItem: i32,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn SetDlgItemInt(
    hDlg: HWND,
    nIDDlgItem: i32,
    uValue: u32,
    bSigned: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetDlgItemInt(
    hDlg: HWND,
    nIDDlgItem: i32,
    lpTranslated: ?*BOOL,
    bSigned: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn SetDlgItemTextA(
    hDlg: HWND,
    nIDDlgItem: i32,
    lpString: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetDlgItemTextW(
    hDlg: HWND,
    nIDDlgItem: i32,
    lpString: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetDlgItemTextA(
    hDlg: HWND,
    nIDDlgItem: i32,
    lpString: [*:0]u8,
    cchMax: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetDlgItemTextW(
    hDlg: HWND,
    nIDDlgItem: i32,
    lpString: [*:0]u16,
    cchMax: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn SendDlgItemMessageA(
    hDlg: HWND,
    nIDDlgItem: i32,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn SendDlgItemMessageW(
    hDlg: HWND,
    nIDDlgItem: i32,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn GetNextDlgGroupItem(
    hDlg: HWND,
    hCtl: HWND,
    bPrevious: BOOL,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetNextDlgTabItem(
    hDlg: HWND,
    hCtl: HWND,
    bPrevious: BOOL,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetDlgCtrlID(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetDialogBaseUnits(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn DefDlgProcA(
    hDlg: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn DefDlgProcW(
    hDlg: HWND,
    Msg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn CallMsgFilterA(
    lpMsg: *MSG,
    nCode: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CallMsgFilterW(
    lpMsg: *MSG,
    nCode: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CharToOemA(
    pSrc: [*:0]const u8,
    pDst: PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CharToOemW(
    pSrc: [*:0]const u16,
    pDst: PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn OemToCharA(
    pSrc: [*:0]const u8,
    pDst: PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn OemToCharW(
    pSrc: [*:0]const u8,
    pDst: PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CharToOemBuffA(
    lpszSrc: [*:0]const u8,
    lpszDst: [*:0]u8,
    cchDstLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CharToOemBuffW(
    lpszSrc: [*:0]const u16,
    lpszDst: [*:0]u8,
    cchDstLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn OemToCharBuffA(
    lpszSrc: [*:0]const u8,
    lpszDst: [*:0]u8,
    cchDstLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn OemToCharBuffW(
    lpszSrc: [*:0]const u8,
    lpszDst: [*:0]u16,
    cchDstLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CharUpperA(
    lpsz: PSTR,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "USER32" fn CharUpperW(
    lpsz: PWSTR,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "USER32" fn CharUpperBuffA(
    lpsz: [*:0]u8,
    cchLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn CharUpperBuffW(
    lpsz: [*:0]u16,
    cchLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn CharLowerA(
    lpsz: PSTR,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "USER32" fn CharLowerW(
    lpsz: PWSTR,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "USER32" fn CharLowerBuffA(
    lpsz: [*:0]u8,
    cchLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn CharLowerBuffW(
    lpsz: [*:0]u16,
    cchLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn CharNextA(
    lpsz: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "USER32" fn CharNextW(
    lpsz: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "USER32" fn CharPrevA(
    lpszStart: [*:0]const u8,
    lpszCurrent: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "USER32" fn CharPrevW(
    lpszStart: [*:0]const u16,
    lpszCurrent: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "USER32" fn CharNextExA(
    CodePage: u16,
    lpCurrentChar: [*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "USER32" fn CharPrevExA(
    CodePage: u16,
    lpStart: [*:0]const u8,
    lpCurrentChar: [*:0]const u8,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) PSTR;

pub extern "USER32" fn IsCharAlphaA(
    ch: i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsCharAlphaW(
    ch: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsCharAlphaNumericA(
    ch: i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsCharAlphaNumericW(
    ch: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsCharUpperA(
    ch: i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsCharUpperW(
    ch: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsCharLowerA(
    ch: i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetInputState(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetQueueStatus(
    flags: GetQueueStatus_flags,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn SetTimer(
    hWnd: HWND,
    nIDEvent: ?*c_void,
    uElapse: u32,
    lpTimerFunc: ?TIMERPROC,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn SetCoalescableTimer(
    hWnd: HWND,
    nIDEvent: ?*c_void,
    uElapse: u32,
    lpTimerFunc: ?TIMERPROC,
    uToleranceDelay: SetCoalescableTimer_uToleranceDelayFlags,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "USER32" fn KillTimer(
    hWnd: HWND,
    uIDEvent: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsWindowUnicode(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn LoadAcceleratorsA(
    hInstance: HINSTANCE,
    lpTableName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HACCEL;

pub extern "USER32" fn LoadAcceleratorsW(
    hInstance: HINSTANCE,
    lpTableName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HACCEL;

pub extern "USER32" fn CreateAcceleratorTableA(
    paccel: [*]ACCEL,
    cAccel: i32,
) callconv(@import("std").os.windows.WINAPI) HACCEL;

pub extern "USER32" fn CreateAcceleratorTableW(
    paccel: [*]ACCEL,
    cAccel: i32,
) callconv(@import("std").os.windows.WINAPI) HACCEL;

pub extern "USER32" fn DestroyAcceleratorTable(
    hAccel: HACCEL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CopyAcceleratorTableA(
    hAccelSrc: HACCEL,
    lpAccelDst: ?[*]ACCEL,
    cAccelEntries: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn CopyAcceleratorTableW(
    hAccelSrc: HACCEL,
    lpAccelDst: ?[*]ACCEL,
    cAccelEntries: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn TranslateAcceleratorA(
    hWnd: HWND,
    hAccTable: HACCEL,
    lpMsg: *MSG,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn TranslateAcceleratorW(
    hWnd: HWND,
    hAccTable: HACCEL,
    lpMsg: *MSG,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetSystemMetrics(
    nIndex: GetSystemMetrics_nIndexFlags,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn LoadMenuA(
    hInstance: HINSTANCE,
    lpMenuName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HMENU;

pub extern "USER32" fn LoadMenuW(
    hInstance: HINSTANCE,
    lpMenuName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HMENU;

pub extern "USER32" fn LoadMenuIndirectA(
    lpMenuTemplate: *const c_void,
) callconv(@import("std").os.windows.WINAPI) HMENU;

pub extern "USER32" fn LoadMenuIndirectW(
    lpMenuTemplate: *const c_void,
) callconv(@import("std").os.windows.WINAPI) HMENU;

pub extern "USER32" fn GetMenu(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HMENU;

pub extern "USER32" fn SetMenu(
    hWnd: HWND,
    hMenu: HMENU,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ChangeMenuA(
    hMenu: HMENU,
    cmd: u32,
    lpszNewItem: ?[*:0]const u8,
    cmdInsert: u32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ChangeMenuW(
    hMenu: HMENU,
    cmd: u32,
    lpszNewItem: ?[*:0]const u16,
    cmdInsert: u32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn HiliteMenuItem(
    hWnd: HWND,
    hMenu: HMENU,
    uIDHiliteItem: u32,
    uHilite: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMenuStringA(
    hMenu: HMENU,
    uIDItem: u32,
    lpString: ?[*:0]u8,
    cchMax: i32,
    flags: MENU_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetMenuStringW(
    hMenu: HMENU,
    uIDItem: u32,
    lpString: ?[*:0]u16,
    cchMax: i32,
    flags: MENU_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetMenuState(
    hMenu: HMENU,
    uId: u32,
    uFlags: MENU_FLAGS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn DrawMenuBar(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetSystemMenu(
    hWnd: HWND,
    bRevert: BOOL,
) callconv(@import("std").os.windows.WINAPI) HMENU;

pub extern "USER32" fn CreateMenu(
) callconv(@import("std").os.windows.WINAPI) HMENU;

pub extern "USER32" fn CreatePopupMenu(
) callconv(@import("std").os.windows.WINAPI) HMENU;

pub extern "USER32" fn DestroyMenu(
    hMenu: HMENU,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CheckMenuItem(
    hMenu: HMENU,
    uIDCheckItem: u32,
    uCheck: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn EnableMenuItem(
    hMenu: HMENU,
    uIDEnableItem: u32,
    uEnable: MENU_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetSubMenu(
    hMenu: HMENU,
    nPos: i32,
) callconv(@import("std").os.windows.WINAPI) HMENU;

pub extern "USER32" fn GetMenuItemID(
    hMenu: HMENU,
    nPos: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetMenuItemCount(
    hMenu: HMENU,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn InsertMenuA(
    hMenu: HMENU,
    uPosition: u32,
    uFlags: MENU_FLAGS,
    uIDNewItem: ?*c_void,
    lpNewItem: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn InsertMenuW(
    hMenu: HMENU,
    uPosition: u32,
    uFlags: MENU_FLAGS,
    uIDNewItem: ?*c_void,
    lpNewItem: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn AppendMenuA(
    hMenu: HMENU,
    uFlags: MENU_FLAGS,
    uIDNewItem: ?*c_void,
    lpNewItem: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn AppendMenuW(
    hMenu: HMENU,
    uFlags: MENU_FLAGS,
    uIDNewItem: ?*c_void,
    lpNewItem: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ModifyMenuA(
    hMnu: HMENU,
    uPosition: u32,
    uFlags: MENU_FLAGS,
    uIDNewItem: ?*c_void,
    lpNewItem: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ModifyMenuW(
    hMnu: HMENU,
    uPosition: u32,
    uFlags: MENU_FLAGS,
    uIDNewItem: ?*c_void,
    lpNewItem: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn RemoveMenu(
    hMenu: HMENU,
    uPosition: u32,
    uFlags: MENU_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DeleteMenu(
    hMenu: HMENU,
    uPosition: u32,
    uFlags: MENU_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetMenuItemBitmaps(
    hMenu: HMENU,
    uPosition: u32,
    uFlags: MENU_FLAGS,
    hBitmapUnchecked: HBITMAP,
    hBitmapChecked: HBITMAP,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMenuCheckMarkDimensions(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn TrackPopupMenu(
    hMenu: HMENU,
    uFlags: TRACK_POPUP_MENU_FLAGS,
    x: i32,
    y: i32,
    nReserved: i32,
    hWnd: HWND,
    prcRect: *const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn TrackPopupMenuEx(
    hMenu: HMENU,
    uFlags: u32,
    x: i32,
    y: i32,
    hwnd: HWND,
    lptpm: ?*TPMPARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CalculatePopupWindowPosition(
    anchorPoint: *const POINT,
    windowSize: *const SIZE,
    flags: u32,
    excludeRect: ?*RECT,
    popupWindowPosition: *RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMenuInfo(
    param0: HMENU,
    param1: *MENUINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetMenuInfo(
    param0: HMENU,
    param1: *MENUINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn EndMenu(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn InsertMenuItemA(
    hmenu: HMENU,
    item: u32,
    fByPosition: BOOL,
    lpmi: *MENUITEMINFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn InsertMenuItemW(
    hmenu: HMENU,
    item: u32,
    fByPosition: BOOL,
    lpmi: *MENUITEMINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMenuItemInfoA(
    hmenu: HMENU,
    item: u32,
    fByPosition: BOOL,
    lpmii: *MENUITEMINFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMenuItemInfoW(
    hmenu: HMENU,
    item: u32,
    fByPosition: BOOL,
    lpmii: *MENUITEMINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetMenuItemInfoA(
    hmenu: HMENU,
    item: u32,
    fByPositon: BOOL,
    lpmii: *MENUITEMINFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetMenuItemInfoW(
    hmenu: HMENU,
    item: u32,
    fByPositon: BOOL,
    lpmii: *MENUITEMINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMenuDefaultItem(
    hMenu: HMENU,
    fByPos: u32,
    gmdiFlags: GetMenuDefaultItem_gmdiFlags,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn SetMenuDefaultItem(
    hMenu: HMENU,
    uItem: u32,
    fByPos: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMenuItemRect(
    hWnd: HWND,
    hMenu: HMENU,
    uItem: u32,
    lprcItem: *RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn MenuItemFromPoint(
    hWnd: HWND,
    hMenu: HMENU,
    ptScreen: POINT,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn DragObject(
    hwndParent: HWND,
    hwndFrom: HWND,
    fmt: u32,
    data: ?*c_void,
    hcur: HCURSOR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn DrawIcon(
    hDC: HDC,
    X: i32,
    Y: i32,
    hIcon: HICON,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetForegroundWindow(
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn SwitchToThisWindow(
    hwnd: HWND,
    fUnknown: BOOL,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "USER32" fn SetForegroundWindow(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn AllowSetForegroundWindow(
    dwProcessId: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn LockSetForegroundWindow(
    uLockCode: LockSetForegroundWindow_uLockCodeFlags,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetPropA(
    hWnd: HWND,
    lpString: [*:0]const u8,
    hData: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetPropW(
    hWnd: HWND,
    lpString: [*:0]const u16,
    hData: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetPropA(
    hWnd: HWND,
    lpString: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "USER32" fn GetPropW(
    hWnd: HWND,
    lpString: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "USER32" fn RemovePropA(
    hWnd: HWND,
    lpString: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "USER32" fn RemovePropW(
    hWnd: HWND,
    lpString: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "USER32" fn EnumPropsExA(
    hWnd: HWND,
    lpEnumFunc: PROPENUMPROCEXA,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn EnumPropsExW(
    hWnd: HWND,
    lpEnumFunc: PROPENUMPROCEXW,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn EnumPropsA(
    hWnd: HWND,
    lpEnumFunc: PROPENUMPROCA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn EnumPropsW(
    hWnd: HWND,
    lpEnumFunc: PROPENUMPROCW,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn SetWindowTextA(
    hWnd: HWND,
    lpString: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetWindowTextW(
    hWnd: HWND,
    lpString: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetWindowTextA(
    hWnd: HWND,
    lpString: [*:0]u8,
    nMaxCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetWindowTextW(
    hWnd: HWND,
    lpString: [*:0]u16,
    nMaxCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetWindowTextLengthA(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetWindowTextLengthW(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetClientRect(
    hWnd: HWND,
    lpRect: *RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetWindowRect(
    hWnd: HWND,
    lpRect: *RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn AdjustWindowRect(
    lpRect: *RECT,
    dwStyle: u32,
    bMenu: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn AdjustWindowRectEx(
    lpRect: *RECT,
    dwStyle: u32,
    bMenu: BOOL,
    dwExStyle: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn MessageBoxA(
    hWnd: HWND,
    lpText: ?[*:0]const u8,
    lpCaption: ?[*:0]const u8,
    uType: MB_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn MessageBoxW(
    hWnd: HWND,
    lpText: ?[*:0]const u16,
    lpCaption: ?[*:0]const u16,
    uType: MB_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn MessageBoxExA(
    hWnd: HWND,
    lpText: ?[*:0]const u8,
    lpCaption: ?[*:0]const u8,
    uType: MB_FLAGS,
    wLanguageId: u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn MessageBoxExW(
    hWnd: HWND,
    lpText: ?[*:0]const u16,
    lpCaption: ?[*:0]const u16,
    uType: MB_FLAGS,
    wLanguageId: u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn MessageBoxIndirectA(
    lpmbp: *const MSGBOXPARAMSA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn MessageBoxIndirectW(
    lpmbp: *const MSGBOXPARAMSW,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn ShowCursor(
    bShow: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn SetCursorPos(
    X: i32,
    Y: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetPhysicalCursorPos(
    X: i32,
    Y: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetCursor(
    hCursor: HCURSOR,
) callconv(@import("std").os.windows.WINAPI) HCURSOR;

pub extern "USER32" fn GetCursorPos(
    lpPoint: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetPhysicalCursorPos(
    lpPoint: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetClipCursor(
    lpRect: *RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetCursor(
) callconv(@import("std").os.windows.WINAPI) HCURSOR;

pub extern "USER32" fn CreateCaret(
    hWnd: HWND,
    hBitmap: HBITMAP,
    nWidth: i32,
    nHeight: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetCaretBlinkTime(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn SetCaretBlinkTime(
    uMSeconds: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DestroyCaret(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn HideCaret(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ShowCaret(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetCaretPos(
    X: i32,
    Y: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetCaretPos(
    lpPoint: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn LogicalToPhysicalPoint(
    hWnd: HWND,
    lpPoint: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn PhysicalToLogicalPoint(
    hWnd: HWND,
    lpPoint: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn WindowFromPoint(
    Point: POINT,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn WindowFromPhysicalPoint(
    Point: POINT,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn ChildWindowFromPoint(
    hWndParent: HWND,
    Point: POINT,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn ClipCursor(
    lpRect: ?*const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ChildWindowFromPointEx(
    hwnd: HWND,
    pt: POINT,
    flags: CWP_FLAGS,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetSysColor(
    nIndex: GetSysColor_nIndexFlags,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn SetSysColors(
    cElements: i32,
    lpaElements: [*]const i32,
    lpaRgbValues: [*]const u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetWindowWord(
    hWnd: HWND,
    nIndex: i32,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn SetWindowWord(
    hWnd: HWND,
    nIndex: i32,
    wNewWord: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn GetWindowLongA(
    hWnd: HWND,
    nIndex: GetWindowLongPtr_nIndex,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetWindowLongW(
    hWnd: HWND,
    nIndex: GetWindowLongPtr_nIndex,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn SetWindowLongA(
    hWnd: HWND,
    nIndex: GetWindowLongPtr_nIndex,
    dwNewLong: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn SetWindowLongW(
    hWnd: HWND,
    nIndex: GetWindowLongPtr_nIndex,
    dwNewLong: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetClassWord(
    hWnd: HWND,
    nIndex: i32,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn SetClassWord(
    hWnd: HWND,
    nIndex: i32,
    wNewWord: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn GetClassLongA(
    hWnd: HWND,
    nIndex: GetClassLong_nIndex,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetClassLongW(
    hWnd: HWND,
    nIndex: GetClassLong_nIndex,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn SetClassLongA(
    hWnd: HWND,
    nIndex: GetClassLong_nIndex,
    dwNewLong: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn SetClassLongW(
    hWnd: HWND,
    nIndex: GetClassLong_nIndex,
    dwNewLong: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetProcessDefaultLayout(
    pdwDefaultLayout: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetProcessDefaultLayout(
    dwDefaultLayout: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetDesktopWindow(
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetParent(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn SetParent(
    hWndChild: HWND,
    hWndNewParent: HWND,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn EnumChildWindows(
    hWndParent: HWND,
    lpEnumFunc: WNDENUMPROC,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn FindWindowA(
    lpClassName: ?[*:0]const u8,
    lpWindowName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn FindWindowW(
    lpClassName: ?[*:0]const u16,
    lpWindowName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn FindWindowExA(
    hWndParent: HWND,
    hWndChildAfter: HWND,
    lpszClass: ?[*:0]const u8,
    lpszWindow: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn FindWindowExW(
    hWndParent: HWND,
    hWndChildAfter: HWND,
    lpszClass: ?[*:0]const u16,
    lpszWindow: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetShellWindow(
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn RegisterShellHookWindow(
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DeregisterShellHookWindow(
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn EnumWindows(
    lpEnumFunc: WNDENUMPROC,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn EnumThreadWindows(
    dwThreadId: u32,
    lpfn: WNDENUMPROC,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetClassNameA(
    hWnd: HWND,
    lpClassName: [*:0]u8,
    nMaxCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetClassNameW(
    hWnd: HWND,
    lpClassName: [*:0]u16,
    nMaxCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetTopWindow(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetWindowThreadProcessId(
    hWnd: HWND,
    lpdwProcessId: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn IsGUIThread(
    bConvert: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetLastActivePopup(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetWindow(
    hWnd: HWND,
    uCmd: GetWindow_uCmdFlags,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn SetWindowsHookA(
    nFilterType: i32,
    pfnFilterProc: HOOKPROC,
) callconv(@import("std").os.windows.WINAPI) HHOOK;

pub extern "USER32" fn SetWindowsHookW(
    nFilterType: i32,
    pfnFilterProc: HOOKPROC,
) callconv(@import("std").os.windows.WINAPI) HHOOK;

pub extern "USER32" fn UnhookWindowsHook(
    nCode: i32,
    pfnFilterProc: HOOKPROC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetWindowsHookExA(
    idHook: SetWindowsHookEx_idHook,
    lpfn: HOOKPROC,
    hmod: HINSTANCE,
    dwThreadId: u32,
) callconv(@import("std").os.windows.WINAPI) HHOOK;

pub extern "USER32" fn SetWindowsHookExW(
    idHook: SetWindowsHookEx_idHook,
    lpfn: HOOKPROC,
    hmod: HINSTANCE,
    dwThreadId: u32,
) callconv(@import("std").os.windows.WINAPI) HHOOK;

pub extern "USER32" fn UnhookWindowsHookEx(
    hhk: HHOOK,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CallNextHookEx(
    hhk: HHOOK,
    nCode: i32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn CheckMenuRadioItem(
    hmenu: HMENU,
    first: u32,
    last: u32,
    check: u32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn LoadCursorA(
    hInstance: HINSTANCE,
    lpCursorName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HCURSOR;

pub extern "USER32" fn LoadCursorW(
    hInstance: HINSTANCE,
    lpCursorName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HCURSOR;

pub extern "USER32" fn LoadCursorFromFileA(
    lpFileName: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HCURSOR;

pub extern "USER32" fn LoadCursorFromFileW(
    lpFileName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HCURSOR;

pub extern "USER32" fn CreateCursor(
    hInst: HINSTANCE,
    xHotSpot: i32,
    yHotSpot: i32,
    nWidth: i32,
    nHeight: i32,
    pvANDPlane: *const c_void,
    pvXORPlane: *const c_void,
) callconv(@import("std").os.windows.WINAPI) HCURSOR;

pub extern "USER32" fn DestroyCursor(
    hCursor: HCURSOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetSystemCursor(
    hcur: HCURSOR,
    id: SetSystemCursor_idFlags,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn LoadIconA(
    hInstance: HINSTANCE,
    lpIconName: GetIconInfo_hicon,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "USER32" fn LoadIconW(
    hInstance: HINSTANCE,
    lpIconName: GetIconInfo_hicon,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "USER32" fn PrivateExtractIconsA(
    szFileName: *[260]u8,
    nIconIndex: i32,
    cxIcon: i32,
    cyIcon: i32,
    phicon: ?[*]HICON,
    piconid: ?[*]u32,
    nIcons: u32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn PrivateExtractIconsW(
    szFileName: *[260]u16,
    nIconIndex: i32,
    cxIcon: i32,
    cyIcon: i32,
    phicon: ?[*]HICON,
    piconid: ?[*]u32,
    nIcons: u32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn CreateIcon(
    hInstance: HINSTANCE,
    nWidth: i32,
    nHeight: i32,
    cPlanes: u8,
    cBitsPixel: u8,
    lpbANDbits: *const u8,
    lpbXORbits: *const u8,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "USER32" fn DestroyIcon(
    hIcon: HICON,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn LookupIconIdFromDirectory(
    presbits: *u8,
    fIcon: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn LookupIconIdFromDirectoryEx(
    presbits: *u8,
    fIcon: BOOL,
    cxDesired: i32,
    cyDesired: i32,
    Flags: ImageListLoadImage_uFlags,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn CreateIconFromResource(
    presbits: [*:0]u8,
    dwResSize: u32,
    fIcon: BOOL,
    dwVer: u32,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "USER32" fn CreateIconFromResourceEx(
    presbits: [*:0]u8,
    dwResSize: u32,
    fIcon: BOOL,
    dwVer: u32,
    cxDesired: i32,
    cyDesired: i32,
    Flags: ImageListLoadImage_uFlags,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "USER32" fn LoadImageA(
    hInst: HINSTANCE,
    name: [*:0]const u8,
    type: CopyImage_type,
    cx: i32,
    cy: i32,
    fuLoad: ImageListLoadImage_uFlags,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "USER32" fn LoadImageW(
    hInst: HINSTANCE,
    name: [*:0]const u16,
    type: CopyImage_type,
    cx: i32,
    cy: i32,
    fuLoad: ImageListLoadImage_uFlags,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "USER32" fn CopyImage(
    h: HANDLE,
    type: CopyImage_type,
    cx: i32,
    cy: i32,
    flags: ImageListLoadImage_uFlags,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "USER32" fn DrawIconEx(
    hdc: HDC,
    xLeft: i32,
    yTop: i32,
    hIcon: HICON,
    cxWidth: i32,
    cyWidth: i32,
    istepIfAniCur: u32,
    hbrFlickerFreeDraw: HBRUSH,
    diFlags: DI_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CreateIconIndirect(
    piconinfo: *ICONINFO,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "USER32" fn CopyIcon(
    hIcon: HICON,
) callconv(@import("std").os.windows.WINAPI) HICON;

pub extern "USER32" fn GetIconInfo(
    hIcon: GetIconInfo_hicon,
    piconinfo: *ICONINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetIconInfoExA(
    hicon: GetIconInfo_hicon,
    piconinfo: *ICONINFOEXA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetIconInfoExW(
    hicon: GetIconInfo_hicon,
    piconinfo: *ICONINFOEXW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsDialogMessageA(
    hDlg: HWND,
    lpMsg: *MSG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsDialogMessageW(
    hDlg: HWND,
    lpMsg: *MSG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn MapDialogRect(
    hDlg: HWND,
    lpRect: *RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DefFrameProcA(
    hWnd: HWND,
    hWndMDIClient: HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn DefFrameProcW(
    hWnd: HWND,
    hWndMDIClient: HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn DefMDIChildProcA(
    hWnd: HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn DefMDIChildProcW(
    hWnd: HWND,
    uMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "USER32" fn TranslateMDISysAccel(
    hWndClient: HWND,
    lpMsg: *MSG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ArrangeIconicWindows(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn CreateMDIWindowA(
    lpClassName: [*:0]const u8,
    lpWindowName: [*:0]const u8,
    dwStyle: WINDOWS_STYLE,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
    hWndParent: HWND,
    hInstance: HINSTANCE,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn CreateMDIWindowW(
    lpClassName: [*:0]const u16,
    lpWindowName: [*:0]const u16,
    dwStyle: WINDOWS_STYLE,
    X: i32,
    Y: i32,
    nWidth: i32,
    nHeight: i32,
    hWndParent: HWND,
    hInstance: HINSTANCE,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn TileWindows(
    hwndParent: HWND,
    wHow: TileWindows_wHowFlags,
    lpRect: ?*const RECT,
    cKids: u32,
    lpKids: ?[*]const HWND,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn CascadeWindows(
    hwndParent: HWND,
    wHow: CascadeWindows_wHowFlags,
    lpRect: ?*const RECT,
    cKids: u32,
    lpKids: ?[*]const HWND,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "USER32" fn SystemParametersInfoA(
    uiAction: SYSTEM_PARAMETERS_INFO_ACTION,
    uiParam: u32,
    pvParam: ?*c_void,
    fWinIni: SystemParametersInfo_fWinIni,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SystemParametersInfoW(
    uiAction: SYSTEM_PARAMETERS_INFO_ACTION,
    uiParam: u32,
    pvParam: ?*c_void,
    fWinIni: SystemParametersInfo_fWinIni,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SoundSentry(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetDebugErrorLevel(
    dwLevel: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "USER32" fn InternalGetWindowText(
    hWnd: HWND,
    pString: [*:0]u16,
    cchMaxCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn CancelShutdown(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetGUIThreadInfo(
    idThread: u32,
    pgui: *GUITHREADINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetProcessDPIAware(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsProcessDPIAware(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn InheritWindowMonitor(
    hwnd: HWND,
    hwndInherit: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetDpiAwarenessContextForProcess(
    hProcess: HANDLE,
) callconv(@import("std").os.windows.WINAPI) DPI_AWARENESS_CONTEXT;

pub extern "USER32" fn GetWindowModuleFileNameA(
    hwnd: HWND,
    pszFileName: [*:0]u8,
    cchFileNameMax: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetWindowModuleFileNameW(
    hwnd: HWND,
    pszFileName: [*:0]u16,
    cchFileNameMax: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetCursorInfo(
    pci: *CURSORINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetWindowInfo(
    hwnd: HWND,
    pwi: *WINDOWINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetTitleBarInfo(
    hwnd: HWND,
    pti: *TITLEBARINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetMenuBarInfo(
    hwnd: HWND,
    idObject: SCROLLBAR_OBJID,
    idItem: i32,
    pmbi: *MENUBARINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetAncestor(
    hwnd: HWND,
    gaFlags: GetAncestor_gaFlags,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn RealChildWindowFromPoint(
    hwndParent: HWND,
    ptParentClientCoords: POINT,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn RealGetWindowClassA(
    hwnd: HWND,
    ptszClassName: [*:0]u8,
    cchClassNameMax: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn RealGetWindowClassW(
    hwnd: HWND,
    ptszClassName: [*:0]u16,
    cchClassNameMax: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetAltTabInfoA(
    hwnd: HWND,
    iItem: i32,
    pati: *ALTTABINFO,
    pszItemText: ?[*:0]u8,
    cchItemText: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetAltTabInfoW(
    hwnd: HWND,
    iItem: i32,
    pati: *ALTTABINFO,
    pszItemText: ?[*:0]u16,
    cchItemText: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ChangeWindowMessageFilter(
    message: u32,
    dwFlag: ChangeWindowMessageFilter_dwFlagFlags,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ChangeWindowMessageFilterEx(
    hwnd: HWND,
    message: u32,
    action: ChangeWindowMessageFilterEx_actionFlags,
    pChangeFilterStruct: ?*CHANGEFILTERSTRUCT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "VERSION" fn VerFindFileA(
    uFlags: u32,
    szFileName: [*:0]const u8,
    szWinDir: ?[*:0]const u8,
    szAppDir: [*:0]const u8,
    szCurDir: [*:0]u8,
    puCurDirLen: *u32,
    szDestDir: [*:0]u8,
    puDestDirLen: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn VerFindFileW(
    uFlags: u32,
    szFileName: [*:0]const u16,
    szWinDir: ?[*:0]const u16,
    szAppDir: [*:0]const u16,
    szCurDir: [*:0]u16,
    puCurDirLen: *u32,
    szDestDir: [*:0]u16,
    puDestDirLen: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn VerInstallFileA(
    uFlags: VerInstallFile_uFlags,
    szSrcFileName: [*:0]const u8,
    szDestFileName: [*:0]const u8,
    szSrcDir: [*:0]const u8,
    szDestDir: [*:0]const u8,
    szCurDir: [*:0]const u8,
    szTmpFile: [*:0]u8,
    puTmpFileLen: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn VerInstallFileW(
    uFlags: VerInstallFile_uFlags,
    szSrcFileName: [*:0]const u16,
    szDestFileName: [*:0]const u16,
    szSrcDir: [*:0]const u16,
    szDestDir: [*:0]const u16,
    szCurDir: [*:0]const u16,
    szTmpFile: [*:0]u16,
    puTmpFileLen: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn GetFileVersionInfoSizeA(
    lptstrFilename: [*:0]const u8,
    lpdwHandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn GetFileVersionInfoSizeW(
    lptstrFilename: [*:0]const u16,
    lpdwHandle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn GetFileVersionInfoA(
    lptstrFilename: [*:0]const u8,
    dwHandle: u32,
    dwLen: u32,
    lpData: [*]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "VERSION" fn GetFileVersionInfoW(
    lptstrFilename: [*:0]const u16,
    dwHandle: u32,
    dwLen: u32,
    lpData: [*]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "VERSION" fn GetFileVersionInfoSizeExA(
    dwFlags: u32,
    lpwstrFilename: [*:0]const u8,
    lpdwHandle: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn GetFileVersionInfoSizeExW(
    dwFlags: u32,
    lpwstrFilename: [*:0]const u16,
    lpdwHandle: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn GetFileVersionInfoExA(
    dwFlags: u32,
    lpwstrFilename: [*:0]const u8,
    dwHandle: u32,
    dwLen: u32,
    lpData: [*]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "VERSION" fn GetFileVersionInfoExW(
    dwFlags: u32,
    lpwstrFilename: [*:0]const u16,
    dwHandle: u32,
    dwLen: u32,
    lpData: [*]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn VerLanguageNameA(
    wLang: u32,
    szLang: [*:0]u8,
    cchLang: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "KERNEL32" fn VerLanguageNameW(
    wLang: u32,
    szLang: [*:0]u16,
    cchLang: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "VERSION" fn VerQueryValueA(
    pBlock: *const c_void,
    lpSubBlock: [*:0]const u8,
    lplpBuffer: **c_void,
    puLen: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "VERSION" fn VerQueryValueW(
    pBlock: *const c_void,
    lpSubBlock: [*:0]const u16,
    lplpBuffer: **c_void,
    puLen: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MrmSupport" fn CreateResourceIndexer(
    projectRoot: [*:0]const u16,
    extensionDllPath: ?[*:0]const u16,
    ppResourceIndexer: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn DestroyResourceIndexer(
    resourceIndexer: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MrmSupport" fn IndexFilePath(
    resourceIndexer: *c_void,
    filePath: [*:0]const u16,
    ppResourceUri: *PWSTR,
    pQualifierCount: *u32,
    ppQualifiers: [*]*IndexedResourceQualifier,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn DestroyIndexedResults(
    resourceUri: ?PWSTR,
    qualifierCount: u32,
    qualifiers: ?[*]IndexedResourceQualifier,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MrmSupport" fn MrmCreateResourceIndexer(
    packageFamilyName: ?[*:0]const u16,
    projectRoot: [*:0]const u16,
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    indexer: *MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmCreateResourceIndexerFromPreviousSchemaFile(
    projectRoot: [*:0]const u16,
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    schemaFile: [*:0]const u16,
    indexer: *MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmCreateResourceIndexerFromPreviousPriFile(
    projectRoot: [*:0]const u16,
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    priFile: [*:0]const u16,
    indexer: *MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmCreateResourceIndexerFromPreviousSchemaData(
    projectRoot: [*:0]const u16,
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    schemaXmlData: [*:0]u8,
    schemaXmlSize: u32,
    indexer: *MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmCreateResourceIndexerFromPreviousPriData(
    projectRoot: [*:0]const u16,
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    priData: [*:0]u8,
    priSize: u32,
    indexer: *MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmIndexString(
    indexer: MrmResourceIndexerHandle,
    resourceUri: [*:0]const u16,
    resourceString: [*:0]const u16,
    qualifiers: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmIndexEmbeddedData(
    indexer: MrmResourceIndexerHandle,
    resourceUri: [*:0]const u16,
    embeddedData: [*:0]const u8,
    embeddedDataSize: u32,
    qualifiers: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmIndexFile(
    indexer: MrmResourceIndexerHandle,
    resourceUri: [*:0]const u16,
    filePath: [*:0]const u16,
    qualifiers: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmIndexFileAutoQualifiers(
    indexer: MrmResourceIndexerHandle,
    filePath: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmIndexResourceContainerAutoQualifiers(
    indexer: MrmResourceIndexerHandle,
    containerPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmCreateResourceFile(
    indexer: MrmResourceIndexerHandle,
    packagingMode: MrmPackagingMode,
    packagingOptions: MrmPackagingOptions,
    outputDirectory: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmCreateResourceFileInMemory(
    indexer: MrmResourceIndexerHandle,
    packagingMode: MrmPackagingMode,
    packagingOptions: MrmPackagingOptions,
    outputPriData: **u8,
    outputPriSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmPeekResourceIndexerMessages(
    handle: MrmResourceIndexerHandle,
    messages: [*]*MrmResourceIndexerMessage,
    numMsgs: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmDestroyIndexerAndMessages(
    indexer: MrmResourceIndexerHandle,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmFreeMemory(
    data: *u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmDumpPriFile(
    indexFileName: [*:0]const u16,
    schemaPriFile: ?[*:0]const u16,
    dumpType: MrmDumpType,
    outputXmlFile: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmDumpPriFileInMemory(
    indexFileName: [*:0]const u16,
    schemaPriFile: ?[*:0]const u16,
    dumpType: MrmDumpType,
    outputXmlData: **u8,
    outputXmlSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmDumpPriDataInMemory(
    inputPriData: [*:0]u8,
    inputPriSize: u32,
    schemaPriData: ?[*:0]u8,
    schemaPriSize: u32,
    dumpType: MrmDumpType,
    outputXmlData: **u8,
    outputXmlSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmCreateConfig(
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    outputXmlFile: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MrmSupport" fn MrmCreateConfigInMemory(
    platformVersion: MrmPlatformVersion,
    defaultQualifiers: ?[*:0]const u16,
    outputXmlData: **u8,
    outputXmlSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (152)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const ENUMRESNAMEPROC = ENUMRESNAMEPROCA;
        pub const ENUMRESTYPEPROC = ENUMRESTYPEPROCA;
        pub const WINSTAENUMPROC = WINSTAENUMPROCA;
        pub const DESKTOPENUMPROC = DESKTOPENUMPROCA;
        pub const OPENFILENAME_NT4 = OPENFILENAME_NT4A;
        pub const OPENFILENAME = OPENFILENAMEA;
        pub const OFNOTIFY = OFNOTIFYA;
        pub const OFNOTIFYEX = OFNOTIFYEXA;
        pub const CHOOSECOLOR = CHOOSECOLORA;
        pub const FINDREPLACE = FINDREPLACEA;
        pub const CHOOSEFONT = CHOOSEFONTA;
        pub const PRINTDLG = PRINTDLGA;
        pub const PRINTDLGEX = PRINTDLGEXA;
        pub const PAGESETUPDLG = PAGESETUPDLGA;
        pub const PROPENUMPROC = PROPENUMPROCA;
        pub const PROPENUMPROCEX = PROPENUMPROCEXA;
        pub const NAMEENUMPROC = NAMEENUMPROCA;
        pub const CBT_CREATEWND = CBT_CREATEWNDA;
        pub const WNDCLASSEX = WNDCLASSEXA;
        pub const WNDCLASS = WNDCLASSA;
        pub const CREATESTRUCT = CREATESTRUCTA;
        pub const MENUITEMINFO = MENUITEMINFOA;
        pub const MSGBOXPARAMS = MSGBOXPARAMSA;
        pub const ICONINFOEX = ICONINFOEXA;
        pub const MDICREATESTRUCT = MDICREATESTRUCTA;
        pub const NONCLIENTMETRICS = NONCLIENTMETRICSA;
        pub const ICONMETRICS = ICONMETRICSA;
        pub const lstrcmp = lstrcmpA;
        pub const lstrcmpi = lstrcmpiA;
        pub const lstrcpyn = lstrcpynA;
        pub const lstrcpy = lstrcpyA;
        pub const lstrcat = lstrcatA;
        pub const lstrlen = lstrlenA;
        pub const EnumResourceTypes = EnumResourceTypesA;
        pub const EnumResourceLanguages = EnumResourceLanguagesA;
        pub const BeginUpdateResource = BeginUpdateResourceA;
        pub const UpdateResource = UpdateResourceA;
        pub const EndUpdateResource = EndUpdateResourceA;
        pub const LoadString = LoadStringA;
        pub const EnumResourceLanguagesEx = EnumResourceLanguagesExA;
        pub const EnumResourceNamesEx = EnumResourceNamesExA;
        pub const EnumResourceTypesEx = EnumResourceTypesExA;
        pub const GetOpenFileName = GetOpenFileNameA;
        pub const GetSaveFileName = GetSaveFileNameA;
        pub const GetFileTitle = GetFileTitleA;
        pub const ChooseColor = ChooseColorA;
        pub const FindText = FindTextA;
        pub const ReplaceText = ReplaceTextA;
        pub const ChooseFont = ChooseFontA;
        pub const PrintDlg = PrintDlgA;
        pub const PrintDlgEx = PrintDlgExA;
        pub const PageSetupDlg = PageSetupDlgA;
        pub const wvsprintf = wvsprintfA;
        pub const wsprintf = wsprintfA;
        pub const RegisterWindowMessage = RegisterWindowMessageA;
        pub const GetMessage = GetMessageA;
        pub const DispatchMessage = DispatchMessageA;
        pub const PeekMessage = PeekMessageA;
        pub const SendMessage = SendMessageA;
        pub const SendMessageTimeout = SendMessageTimeoutA;
        pub const SendNotifyMessage = SendNotifyMessageA;
        pub const SendMessageCallback = SendMessageCallbackA;
        pub const BroadcastSystemMessageEx = BroadcastSystemMessageExA;
        pub const BroadcastSystemMessage = BroadcastSystemMessageA;
        pub const PostMessage = PostMessageA;
        pub const PostThreadMessage = PostThreadMessageA;
        pub const DefWindowProc = DefWindowProcA;
        pub const CallWindowProc = CallWindowProcA;
        pub const RegisterClass = RegisterClassA;
        pub const UnregisterClass = UnregisterClassA;
        pub const GetClassInfo = GetClassInfoA;
        pub const RegisterClassEx = RegisterClassExA;
        pub const GetClassInfoEx = GetClassInfoExA;
        pub const CreateWindowEx = CreateWindowExA;
        pub const CreateDialogParam = CreateDialogParamA;
        pub const CreateDialogIndirectParam = CreateDialogIndirectParamA;
        pub const DialogBoxParam = DialogBoxParamA;
        pub const DialogBoxIndirectParam = DialogBoxIndirectParamA;
        pub const SetDlgItemText = SetDlgItemTextA;
        pub const GetDlgItemText = GetDlgItemTextA;
        pub const SendDlgItemMessage = SendDlgItemMessageA;
        pub const DefDlgProc = DefDlgProcA;
        pub const CallMsgFilter = CallMsgFilterA;
        pub const CharToOem = CharToOemA;
        pub const OemToChar = OemToCharA;
        pub const CharToOemBuff = CharToOemBuffA;
        pub const OemToCharBuff = OemToCharBuffA;
        pub const CharUpper = CharUpperA;
        pub const CharUpperBuff = CharUpperBuffA;
        pub const CharLower = CharLowerA;
        pub const CharLowerBuff = CharLowerBuffA;
        pub const CharNext = CharNextA;
        pub const CharPrev = CharPrevA;
        pub const IsCharAlpha = IsCharAlphaA;
        pub const IsCharAlphaNumeric = IsCharAlphaNumericA;
        pub const IsCharUpper = IsCharUpperA;
        pub const LoadAccelerators = LoadAcceleratorsA;
        pub const CreateAcceleratorTable = CreateAcceleratorTableA;
        pub const CopyAcceleratorTable = CopyAcceleratorTableA;
        pub const TranslateAccelerator = TranslateAcceleratorA;
        pub const LoadMenu = LoadMenuA;
        pub const LoadMenuIndirect = LoadMenuIndirectA;
        pub const ChangeMenu = ChangeMenuA;
        pub const GetMenuString = GetMenuStringA;
        pub const InsertMenu = InsertMenuA;
        pub const AppendMenu = AppendMenuA;
        pub const ModifyMenu = ModifyMenuA;
        pub const InsertMenuItem = InsertMenuItemA;
        pub const GetMenuItemInfo = GetMenuItemInfoA;
        pub const SetMenuItemInfo = SetMenuItemInfoA;
        pub const SetProp = SetPropA;
        pub const GetProp = GetPropA;
        pub const RemoveProp = RemovePropA;
        pub const EnumPropsEx = EnumPropsExA;
        pub const EnumProps = EnumPropsA;
        pub const SetWindowText = SetWindowTextA;
        pub const GetWindowText = GetWindowTextA;
        pub const GetWindowTextLength = GetWindowTextLengthA;
        pub const MessageBox = MessageBoxA;
        pub const MessageBoxEx = MessageBoxExA;
        pub const MessageBoxIndirect = MessageBoxIndirectA;
        pub const GetWindowLong = GetWindowLongA;
        pub const SetWindowLong = SetWindowLongA;
        pub const GetClassLong = GetClassLongA;
        pub const SetClassLong = SetClassLongA;
        pub const FindWindow = FindWindowA;
        pub const FindWindowEx = FindWindowExA;
        pub const GetClassName = GetClassNameA;
        pub const SetWindowsHook = SetWindowsHookA;
        pub const SetWindowsHookEx = SetWindowsHookExA;
        pub const LoadCursor = LoadCursorA;
        pub const LoadCursorFromFile = LoadCursorFromFileA;
        pub const LoadIcon = LoadIconA;
        pub const PrivateExtractIcons = PrivateExtractIconsA;
        pub const LoadImage = LoadImageA;
        pub const GetIconInfoEx = GetIconInfoExA;
        pub const IsDialogMessage = IsDialogMessageA;
        pub const DefFrameProc = DefFrameProcA;
        pub const DefMDIChildProc = DefMDIChildProcA;
        pub const CreateMDIWindow = CreateMDIWindowA;
        pub const SystemParametersInfo = SystemParametersInfoA;
        pub const GetWindowModuleFileName = GetWindowModuleFileNameA;
        pub const RealGetWindowClass = RealGetWindowClassA;
        pub const GetAltTabInfo = GetAltTabInfoA;
        pub const VerFindFile = VerFindFileA;
        pub const VerInstallFile = VerInstallFileA;
        pub const GetFileVersionInfoSize = GetFileVersionInfoSizeA;
        pub const GetFileVersionInfo = GetFileVersionInfoA;
        pub const GetFileVersionInfoSizeEx = GetFileVersionInfoSizeExA;
        pub const GetFileVersionInfoEx = GetFileVersionInfoExA;
        pub const VerLanguageName = VerLanguageNameA;
        pub const VerQueryValue = VerQueryValueA;
    },
    .wide => struct {
        pub const ENUMRESNAMEPROC = ENUMRESNAMEPROCW;
        pub const ENUMRESTYPEPROC = ENUMRESTYPEPROCW;
        pub const WINSTAENUMPROC = WINSTAENUMPROCW;
        pub const DESKTOPENUMPROC = DESKTOPENUMPROCW;
        pub const OPENFILENAME_NT4 = OPENFILENAME_NT4W;
        pub const OPENFILENAME = OPENFILENAMEW;
        pub const OFNOTIFY = OFNOTIFYW;
        pub const OFNOTIFYEX = OFNOTIFYEXW;
        pub const CHOOSECOLOR = CHOOSECOLORW;
        pub const FINDREPLACE = FINDREPLACEW;
        pub const CHOOSEFONT = CHOOSEFONTW;
        pub const PRINTDLG = PRINTDLGW;
        pub const PRINTDLGEX = PRINTDLGEXW;
        pub const PAGESETUPDLG = PAGESETUPDLGW;
        pub const PROPENUMPROC = PROPENUMPROCW;
        pub const PROPENUMPROCEX = PROPENUMPROCEXW;
        pub const NAMEENUMPROC = NAMEENUMPROCW;
        pub const CBT_CREATEWND = CBT_CREATEWNDW;
        pub const WNDCLASSEX = WNDCLASSEXW;
        pub const WNDCLASS = WNDCLASSW;
        pub const CREATESTRUCT = CREATESTRUCTW;
        pub const MENUITEMINFO = MENUITEMINFOW;
        pub const MSGBOXPARAMS = MSGBOXPARAMSW;
        pub const ICONINFOEX = ICONINFOEXW;
        pub const MDICREATESTRUCT = MDICREATESTRUCTW;
        pub const NONCLIENTMETRICS = NONCLIENTMETRICSW;
        pub const ICONMETRICS = ICONMETRICSW;
        pub const lstrcmp = lstrcmpW;
        pub const lstrcmpi = lstrcmpiW;
        pub const lstrcpyn = lstrcpynW;
        pub const lstrcpy = lstrcpyW;
        pub const lstrcat = lstrcatW;
        pub const lstrlen = lstrlenW;
        pub const EnumResourceTypes = EnumResourceTypesW;
        pub const EnumResourceLanguages = EnumResourceLanguagesW;
        pub const BeginUpdateResource = BeginUpdateResourceW;
        pub const UpdateResource = UpdateResourceW;
        pub const EndUpdateResource = EndUpdateResourceW;
        pub const LoadString = LoadStringW;
        pub const EnumResourceLanguagesEx = EnumResourceLanguagesExW;
        pub const EnumResourceNamesEx = EnumResourceNamesExW;
        pub const EnumResourceTypesEx = EnumResourceTypesExW;
        pub const GetOpenFileName = GetOpenFileNameW;
        pub const GetSaveFileName = GetSaveFileNameW;
        pub const GetFileTitle = GetFileTitleW;
        pub const ChooseColor = ChooseColorW;
        pub const FindText = FindTextW;
        pub const ReplaceText = ReplaceTextW;
        pub const ChooseFont = ChooseFontW;
        pub const PrintDlg = PrintDlgW;
        pub const PrintDlgEx = PrintDlgExW;
        pub const PageSetupDlg = PageSetupDlgW;
        pub const wvsprintf = wvsprintfW;
        pub const wsprintf = wsprintfW;
        pub const RegisterWindowMessage = RegisterWindowMessageW;
        pub const GetMessage = GetMessageW;
        pub const DispatchMessage = DispatchMessageW;
        pub const PeekMessage = PeekMessageW;
        pub const SendMessage = SendMessageW;
        pub const SendMessageTimeout = SendMessageTimeoutW;
        pub const SendNotifyMessage = SendNotifyMessageW;
        pub const SendMessageCallback = SendMessageCallbackW;
        pub const BroadcastSystemMessageEx = BroadcastSystemMessageExW;
        pub const BroadcastSystemMessage = BroadcastSystemMessageW;
        pub const PostMessage = PostMessageW;
        pub const PostThreadMessage = PostThreadMessageW;
        pub const DefWindowProc = DefWindowProcW;
        pub const CallWindowProc = CallWindowProcW;
        pub const RegisterClass = RegisterClassW;
        pub const UnregisterClass = UnregisterClassW;
        pub const GetClassInfo = GetClassInfoW;
        pub const RegisterClassEx = RegisterClassExW;
        pub const GetClassInfoEx = GetClassInfoExW;
        pub const CreateWindowEx = CreateWindowExW;
        pub const CreateDialogParam = CreateDialogParamW;
        pub const CreateDialogIndirectParam = CreateDialogIndirectParamW;
        pub const DialogBoxParam = DialogBoxParamW;
        pub const DialogBoxIndirectParam = DialogBoxIndirectParamW;
        pub const SetDlgItemText = SetDlgItemTextW;
        pub const GetDlgItemText = GetDlgItemTextW;
        pub const SendDlgItemMessage = SendDlgItemMessageW;
        pub const DefDlgProc = DefDlgProcW;
        pub const CallMsgFilter = CallMsgFilterW;
        pub const CharToOem = CharToOemW;
        pub const OemToChar = OemToCharW;
        pub const CharToOemBuff = CharToOemBuffW;
        pub const OemToCharBuff = OemToCharBuffW;
        pub const CharUpper = CharUpperW;
        pub const CharUpperBuff = CharUpperBuffW;
        pub const CharLower = CharLowerW;
        pub const CharLowerBuff = CharLowerBuffW;
        pub const CharNext = CharNextW;
        pub const CharPrev = CharPrevW;
        pub const IsCharAlpha = IsCharAlphaW;
        pub const IsCharAlphaNumeric = IsCharAlphaNumericW;
        pub const IsCharUpper = IsCharUpperW;
        pub const LoadAccelerators = LoadAcceleratorsW;
        pub const CreateAcceleratorTable = CreateAcceleratorTableW;
        pub const CopyAcceleratorTable = CopyAcceleratorTableW;
        pub const TranslateAccelerator = TranslateAcceleratorW;
        pub const LoadMenu = LoadMenuW;
        pub const LoadMenuIndirect = LoadMenuIndirectW;
        pub const ChangeMenu = ChangeMenuW;
        pub const GetMenuString = GetMenuStringW;
        pub const InsertMenu = InsertMenuW;
        pub const AppendMenu = AppendMenuW;
        pub const ModifyMenu = ModifyMenuW;
        pub const InsertMenuItem = InsertMenuItemW;
        pub const GetMenuItemInfo = GetMenuItemInfoW;
        pub const SetMenuItemInfo = SetMenuItemInfoW;
        pub const SetProp = SetPropW;
        pub const GetProp = GetPropW;
        pub const RemoveProp = RemovePropW;
        pub const EnumPropsEx = EnumPropsExW;
        pub const EnumProps = EnumPropsW;
        pub const SetWindowText = SetWindowTextW;
        pub const GetWindowText = GetWindowTextW;
        pub const GetWindowTextLength = GetWindowTextLengthW;
        pub const MessageBox = MessageBoxW;
        pub const MessageBoxEx = MessageBoxExW;
        pub const MessageBoxIndirect = MessageBoxIndirectW;
        pub const GetWindowLong = GetWindowLongW;
        pub const SetWindowLong = SetWindowLongW;
        pub const GetClassLong = GetClassLongW;
        pub const SetClassLong = SetClassLongW;
        pub const FindWindow = FindWindowW;
        pub const FindWindowEx = FindWindowExW;
        pub const GetClassName = GetClassNameW;
        pub const SetWindowsHook = SetWindowsHookW;
        pub const SetWindowsHookEx = SetWindowsHookExW;
        pub const LoadCursor = LoadCursorW;
        pub const LoadCursorFromFile = LoadCursorFromFileW;
        pub const LoadIcon = LoadIconW;
        pub const PrivateExtractIcons = PrivateExtractIconsW;
        pub const LoadImage = LoadImageW;
        pub const GetIconInfoEx = GetIconInfoExW;
        pub const IsDialogMessage = IsDialogMessageW;
        pub const DefFrameProc = DefFrameProcW;
        pub const DefMDIChildProc = DefMDIChildProcW;
        pub const CreateMDIWindow = CreateMDIWindowW;
        pub const SystemParametersInfo = SystemParametersInfoW;
        pub const GetWindowModuleFileName = GetWindowModuleFileNameW;
        pub const RealGetWindowClass = RealGetWindowClassW;
        pub const GetAltTabInfo = GetAltTabInfoW;
        pub const VerFindFile = VerFindFileW;
        pub const VerInstallFile = VerInstallFileW;
        pub const GetFileVersionInfoSize = GetFileVersionInfoSizeW;
        pub const GetFileVersionInfo = GetFileVersionInfoW;
        pub const GetFileVersionInfoSizeEx = GetFileVersionInfoSizeExW;
        pub const GetFileVersionInfoEx = GetFileVersionInfoExW;
        pub const VerLanguageName = VerLanguageNameW;
        pub const VerQueryValue = VerQueryValueW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const ENUMRESNAMEPROC = *opaque{};
        pub const ENUMRESTYPEPROC = *opaque{};
        pub const WINSTAENUMPROC = *opaque{};
        pub const DESKTOPENUMPROC = *opaque{};
        pub const OPENFILENAME_NT4 = *opaque{};
        pub const OPENFILENAME = *opaque{};
        pub const OFNOTIFY = *opaque{};
        pub const OFNOTIFYEX = *opaque{};
        pub const CHOOSECOLOR = *opaque{};
        pub const FINDREPLACE = *opaque{};
        pub const CHOOSEFONT = *opaque{};
        pub const PRINTDLG = *opaque{};
        pub const PRINTDLGEX = *opaque{};
        pub const PAGESETUPDLG = *opaque{};
        pub const PROPENUMPROC = *opaque{};
        pub const PROPENUMPROCEX = *opaque{};
        pub const NAMEENUMPROC = *opaque{};
        pub const CBT_CREATEWND = *opaque{};
        pub const WNDCLASSEX = *opaque{};
        pub const WNDCLASS = *opaque{};
        pub const CREATESTRUCT = *opaque{};
        pub const MENUITEMINFO = *opaque{};
        pub const MSGBOXPARAMS = *opaque{};
        pub const ICONINFOEX = *opaque{};
        pub const MDICREATESTRUCT = *opaque{};
        pub const NONCLIENTMETRICS = *opaque{};
        pub const ICONMETRICS = *opaque{};
        pub const lstrcmp = *opaque{};
        pub const lstrcmpi = *opaque{};
        pub const lstrcpyn = *opaque{};
        pub const lstrcpy = *opaque{};
        pub const lstrcat = *opaque{};
        pub const lstrlen = *opaque{};
        pub const EnumResourceTypes = *opaque{};
        pub const EnumResourceLanguages = *opaque{};
        pub const BeginUpdateResource = *opaque{};
        pub const UpdateResource = *opaque{};
        pub const EndUpdateResource = *opaque{};
        pub const LoadString = *opaque{};
        pub const EnumResourceLanguagesEx = *opaque{};
        pub const EnumResourceNamesEx = *opaque{};
        pub const EnumResourceTypesEx = *opaque{};
        pub const GetOpenFileName = *opaque{};
        pub const GetSaveFileName = *opaque{};
        pub const GetFileTitle = *opaque{};
        pub const ChooseColor = *opaque{};
        pub const FindText = *opaque{};
        pub const ReplaceText = *opaque{};
        pub const ChooseFont = *opaque{};
        pub const PrintDlg = *opaque{};
        pub const PrintDlgEx = *opaque{};
        pub const PageSetupDlg = *opaque{};
        pub const wvsprintf = *opaque{};
        pub const wsprintf = *opaque{};
        pub const RegisterWindowMessage = *opaque{};
        pub const GetMessage = *opaque{};
        pub const DispatchMessage = *opaque{};
        pub const PeekMessage = *opaque{};
        pub const SendMessage = *opaque{};
        pub const SendMessageTimeout = *opaque{};
        pub const SendNotifyMessage = *opaque{};
        pub const SendMessageCallback = *opaque{};
        pub const BroadcastSystemMessageEx = *opaque{};
        pub const BroadcastSystemMessage = *opaque{};
        pub const PostMessage = *opaque{};
        pub const PostThreadMessage = *opaque{};
        pub const DefWindowProc = *opaque{};
        pub const CallWindowProc = *opaque{};
        pub const RegisterClass = *opaque{};
        pub const UnregisterClass = *opaque{};
        pub const GetClassInfo = *opaque{};
        pub const RegisterClassEx = *opaque{};
        pub const GetClassInfoEx = *opaque{};
        pub const CreateWindowEx = *opaque{};
        pub const CreateDialogParam = *opaque{};
        pub const CreateDialogIndirectParam = *opaque{};
        pub const DialogBoxParam = *opaque{};
        pub const DialogBoxIndirectParam = *opaque{};
        pub const SetDlgItemText = *opaque{};
        pub const GetDlgItemText = *opaque{};
        pub const SendDlgItemMessage = *opaque{};
        pub const DefDlgProc = *opaque{};
        pub const CallMsgFilter = *opaque{};
        pub const CharToOem = *opaque{};
        pub const OemToChar = *opaque{};
        pub const CharToOemBuff = *opaque{};
        pub const OemToCharBuff = *opaque{};
        pub const CharUpper = *opaque{};
        pub const CharUpperBuff = *opaque{};
        pub const CharLower = *opaque{};
        pub const CharLowerBuff = *opaque{};
        pub const CharNext = *opaque{};
        pub const CharPrev = *opaque{};
        pub const IsCharAlpha = *opaque{};
        pub const IsCharAlphaNumeric = *opaque{};
        pub const IsCharUpper = *opaque{};
        pub const LoadAccelerators = *opaque{};
        pub const CreateAcceleratorTable = *opaque{};
        pub const CopyAcceleratorTable = *opaque{};
        pub const TranslateAccelerator = *opaque{};
        pub const LoadMenu = *opaque{};
        pub const LoadMenuIndirect = *opaque{};
        pub const ChangeMenu = *opaque{};
        pub const GetMenuString = *opaque{};
        pub const InsertMenu = *opaque{};
        pub const AppendMenu = *opaque{};
        pub const ModifyMenu = *opaque{};
        pub const InsertMenuItem = *opaque{};
        pub const GetMenuItemInfo = *opaque{};
        pub const SetMenuItemInfo = *opaque{};
        pub const SetProp = *opaque{};
        pub const GetProp = *opaque{};
        pub const RemoveProp = *opaque{};
        pub const EnumPropsEx = *opaque{};
        pub const EnumProps = *opaque{};
        pub const SetWindowText = *opaque{};
        pub const GetWindowText = *opaque{};
        pub const GetWindowTextLength = *opaque{};
        pub const MessageBox = *opaque{};
        pub const MessageBoxEx = *opaque{};
        pub const MessageBoxIndirect = *opaque{};
        pub const GetWindowLong = *opaque{};
        pub const SetWindowLong = *opaque{};
        pub const GetClassLong = *opaque{};
        pub const SetClassLong = *opaque{};
        pub const FindWindow = *opaque{};
        pub const FindWindowEx = *opaque{};
        pub const GetClassName = *opaque{};
        pub const SetWindowsHook = *opaque{};
        pub const SetWindowsHookEx = *opaque{};
        pub const LoadCursor = *opaque{};
        pub const LoadCursorFromFile = *opaque{};
        pub const LoadIcon = *opaque{};
        pub const PrivateExtractIcons = *opaque{};
        pub const LoadImage = *opaque{};
        pub const GetIconInfoEx = *opaque{};
        pub const IsDialogMessage = *opaque{};
        pub const DefFrameProc = *opaque{};
        pub const DefMDIChildProc = *opaque{};
        pub const CreateMDIWindow = *opaque{};
        pub const SystemParametersInfo = *opaque{};
        pub const GetWindowModuleFileName = *opaque{};
        pub const RealGetWindowClass = *opaque{};
        pub const GetAltTabInfo = *opaque{};
        pub const VerFindFile = *opaque{};
        pub const VerInstallFile = *opaque{};
        pub const GetFileVersionInfoSize = *opaque{};
        pub const GetFileVersionInfo = *opaque{};
        pub const GetFileVersionInfoSizeEx = *opaque{};
        pub const GetFileVersionInfoEx = *opaque{};
        pub const VerLanguageName = *opaque{};
        pub const VerQueryValue = *opaque{};
    } else struct {
        pub const ENUMRESNAMEPROC = @compileError("'ENUMRESNAMEPROC' requires that UNICODE be set to true or false in the root module");
        pub const ENUMRESTYPEPROC = @compileError("'ENUMRESTYPEPROC' requires that UNICODE be set to true or false in the root module");
        pub const WINSTAENUMPROC = @compileError("'WINSTAENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const DESKTOPENUMPROC = @compileError("'DESKTOPENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const OPENFILENAME_NT4 = @compileError("'OPENFILENAME_NT4' requires that UNICODE be set to true or false in the root module");
        pub const OPENFILENAME = @compileError("'OPENFILENAME' requires that UNICODE be set to true or false in the root module");
        pub const OFNOTIFY = @compileError("'OFNOTIFY' requires that UNICODE be set to true or false in the root module");
        pub const OFNOTIFYEX = @compileError("'OFNOTIFYEX' requires that UNICODE be set to true or false in the root module");
        pub const CHOOSECOLOR = @compileError("'CHOOSECOLOR' requires that UNICODE be set to true or false in the root module");
        pub const FINDREPLACE = @compileError("'FINDREPLACE' requires that UNICODE be set to true or false in the root module");
        pub const CHOOSEFONT = @compileError("'CHOOSEFONT' requires that UNICODE be set to true or false in the root module");
        pub const PRINTDLG = @compileError("'PRINTDLG' requires that UNICODE be set to true or false in the root module");
        pub const PRINTDLGEX = @compileError("'PRINTDLGEX' requires that UNICODE be set to true or false in the root module");
        pub const PAGESETUPDLG = @compileError("'PAGESETUPDLG' requires that UNICODE be set to true or false in the root module");
        pub const PROPENUMPROC = @compileError("'PROPENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const PROPENUMPROCEX = @compileError("'PROPENUMPROCEX' requires that UNICODE be set to true or false in the root module");
        pub const NAMEENUMPROC = @compileError("'NAMEENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const CBT_CREATEWND = @compileError("'CBT_CREATEWND' requires that UNICODE be set to true or false in the root module");
        pub const WNDCLASSEX = @compileError("'WNDCLASSEX' requires that UNICODE be set to true or false in the root module");
        pub const WNDCLASS = @compileError("'WNDCLASS' requires that UNICODE be set to true or false in the root module");
        pub const CREATESTRUCT = @compileError("'CREATESTRUCT' requires that UNICODE be set to true or false in the root module");
        pub const MENUITEMINFO = @compileError("'MENUITEMINFO' requires that UNICODE be set to true or false in the root module");
        pub const MSGBOXPARAMS = @compileError("'MSGBOXPARAMS' requires that UNICODE be set to true or false in the root module");
        pub const ICONINFOEX = @compileError("'ICONINFOEX' requires that UNICODE be set to true or false in the root module");
        pub const MDICREATESTRUCT = @compileError("'MDICREATESTRUCT' requires that UNICODE be set to true or false in the root module");
        pub const NONCLIENTMETRICS = @compileError("'NONCLIENTMETRICS' requires that UNICODE be set to true or false in the root module");
        pub const ICONMETRICS = @compileError("'ICONMETRICS' requires that UNICODE be set to true or false in the root module");
        pub const lstrcmp = @compileError("'lstrcmp' requires that UNICODE be set to true or false in the root module");
        pub const lstrcmpi = @compileError("'lstrcmpi' requires that UNICODE be set to true or false in the root module");
        pub const lstrcpyn = @compileError("'lstrcpyn' requires that UNICODE be set to true or false in the root module");
        pub const lstrcpy = @compileError("'lstrcpy' requires that UNICODE be set to true or false in the root module");
        pub const lstrcat = @compileError("'lstrcat' requires that UNICODE be set to true or false in the root module");
        pub const lstrlen = @compileError("'lstrlen' requires that UNICODE be set to true or false in the root module");
        pub const EnumResourceTypes = @compileError("'EnumResourceTypes' requires that UNICODE be set to true or false in the root module");
        pub const EnumResourceLanguages = @compileError("'EnumResourceLanguages' requires that UNICODE be set to true or false in the root module");
        pub const BeginUpdateResource = @compileError("'BeginUpdateResource' requires that UNICODE be set to true or false in the root module");
        pub const UpdateResource = @compileError("'UpdateResource' requires that UNICODE be set to true or false in the root module");
        pub const EndUpdateResource = @compileError("'EndUpdateResource' requires that UNICODE be set to true or false in the root module");
        pub const LoadString = @compileError("'LoadString' requires that UNICODE be set to true or false in the root module");
        pub const EnumResourceLanguagesEx = @compileError("'EnumResourceLanguagesEx' requires that UNICODE be set to true or false in the root module");
        pub const EnumResourceNamesEx = @compileError("'EnumResourceNamesEx' requires that UNICODE be set to true or false in the root module");
        pub const EnumResourceTypesEx = @compileError("'EnumResourceTypesEx' requires that UNICODE be set to true or false in the root module");
        pub const GetOpenFileName = @compileError("'GetOpenFileName' requires that UNICODE be set to true or false in the root module");
        pub const GetSaveFileName = @compileError("'GetSaveFileName' requires that UNICODE be set to true or false in the root module");
        pub const GetFileTitle = @compileError("'GetFileTitle' requires that UNICODE be set to true or false in the root module");
        pub const ChooseColor = @compileError("'ChooseColor' requires that UNICODE be set to true or false in the root module");
        pub const FindText = @compileError("'FindText' requires that UNICODE be set to true or false in the root module");
        pub const ReplaceText = @compileError("'ReplaceText' requires that UNICODE be set to true or false in the root module");
        pub const ChooseFont = @compileError("'ChooseFont' requires that UNICODE be set to true or false in the root module");
        pub const PrintDlg = @compileError("'PrintDlg' requires that UNICODE be set to true or false in the root module");
        pub const PrintDlgEx = @compileError("'PrintDlgEx' requires that UNICODE be set to true or false in the root module");
        pub const PageSetupDlg = @compileError("'PageSetupDlg' requires that UNICODE be set to true or false in the root module");
        pub const wvsprintf = @compileError("'wvsprintf' requires that UNICODE be set to true or false in the root module");
        pub const wsprintf = @compileError("'wsprintf' requires that UNICODE be set to true or false in the root module");
        pub const RegisterWindowMessage = @compileError("'RegisterWindowMessage' requires that UNICODE be set to true or false in the root module");
        pub const GetMessage = @compileError("'GetMessage' requires that UNICODE be set to true or false in the root module");
        pub const DispatchMessage = @compileError("'DispatchMessage' requires that UNICODE be set to true or false in the root module");
        pub const PeekMessage = @compileError("'PeekMessage' requires that UNICODE be set to true or false in the root module");
        pub const SendMessage = @compileError("'SendMessage' requires that UNICODE be set to true or false in the root module");
        pub const SendMessageTimeout = @compileError("'SendMessageTimeout' requires that UNICODE be set to true or false in the root module");
        pub const SendNotifyMessage = @compileError("'SendNotifyMessage' requires that UNICODE be set to true or false in the root module");
        pub const SendMessageCallback = @compileError("'SendMessageCallback' requires that UNICODE be set to true or false in the root module");
        pub const BroadcastSystemMessageEx = @compileError("'BroadcastSystemMessageEx' requires that UNICODE be set to true or false in the root module");
        pub const BroadcastSystemMessage = @compileError("'BroadcastSystemMessage' requires that UNICODE be set to true or false in the root module");
        pub const PostMessage = @compileError("'PostMessage' requires that UNICODE be set to true or false in the root module");
        pub const PostThreadMessage = @compileError("'PostThreadMessage' requires that UNICODE be set to true or false in the root module");
        pub const DefWindowProc = @compileError("'DefWindowProc' requires that UNICODE be set to true or false in the root module");
        pub const CallWindowProc = @compileError("'CallWindowProc' requires that UNICODE be set to true or false in the root module");
        pub const RegisterClass = @compileError("'RegisterClass' requires that UNICODE be set to true or false in the root module");
        pub const UnregisterClass = @compileError("'UnregisterClass' requires that UNICODE be set to true or false in the root module");
        pub const GetClassInfo = @compileError("'GetClassInfo' requires that UNICODE be set to true or false in the root module");
        pub const RegisterClassEx = @compileError("'RegisterClassEx' requires that UNICODE be set to true or false in the root module");
        pub const GetClassInfoEx = @compileError("'GetClassInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const CreateWindowEx = @compileError("'CreateWindowEx' requires that UNICODE be set to true or false in the root module");
        pub const CreateDialogParam = @compileError("'CreateDialogParam' requires that UNICODE be set to true or false in the root module");
        pub const CreateDialogIndirectParam = @compileError("'CreateDialogIndirectParam' requires that UNICODE be set to true or false in the root module");
        pub const DialogBoxParam = @compileError("'DialogBoxParam' requires that UNICODE be set to true or false in the root module");
        pub const DialogBoxIndirectParam = @compileError("'DialogBoxIndirectParam' requires that UNICODE be set to true or false in the root module");
        pub const SetDlgItemText = @compileError("'SetDlgItemText' requires that UNICODE be set to true or false in the root module");
        pub const GetDlgItemText = @compileError("'GetDlgItemText' requires that UNICODE be set to true or false in the root module");
        pub const SendDlgItemMessage = @compileError("'SendDlgItemMessage' requires that UNICODE be set to true or false in the root module");
        pub const DefDlgProc = @compileError("'DefDlgProc' requires that UNICODE be set to true or false in the root module");
        pub const CallMsgFilter = @compileError("'CallMsgFilter' requires that UNICODE be set to true or false in the root module");
        pub const CharToOem = @compileError("'CharToOem' requires that UNICODE be set to true or false in the root module");
        pub const OemToChar = @compileError("'OemToChar' requires that UNICODE be set to true or false in the root module");
        pub const CharToOemBuff = @compileError("'CharToOemBuff' requires that UNICODE be set to true or false in the root module");
        pub const OemToCharBuff = @compileError("'OemToCharBuff' requires that UNICODE be set to true or false in the root module");
        pub const CharUpper = @compileError("'CharUpper' requires that UNICODE be set to true or false in the root module");
        pub const CharUpperBuff = @compileError("'CharUpperBuff' requires that UNICODE be set to true or false in the root module");
        pub const CharLower = @compileError("'CharLower' requires that UNICODE be set to true or false in the root module");
        pub const CharLowerBuff = @compileError("'CharLowerBuff' requires that UNICODE be set to true or false in the root module");
        pub const CharNext = @compileError("'CharNext' requires that UNICODE be set to true or false in the root module");
        pub const CharPrev = @compileError("'CharPrev' requires that UNICODE be set to true or false in the root module");
        pub const IsCharAlpha = @compileError("'IsCharAlpha' requires that UNICODE be set to true or false in the root module");
        pub const IsCharAlphaNumeric = @compileError("'IsCharAlphaNumeric' requires that UNICODE be set to true or false in the root module");
        pub const IsCharUpper = @compileError("'IsCharUpper' requires that UNICODE be set to true or false in the root module");
        pub const LoadAccelerators = @compileError("'LoadAccelerators' requires that UNICODE be set to true or false in the root module");
        pub const CreateAcceleratorTable = @compileError("'CreateAcceleratorTable' requires that UNICODE be set to true or false in the root module");
        pub const CopyAcceleratorTable = @compileError("'CopyAcceleratorTable' requires that UNICODE be set to true or false in the root module");
        pub const TranslateAccelerator = @compileError("'TranslateAccelerator' requires that UNICODE be set to true or false in the root module");
        pub const LoadMenu = @compileError("'LoadMenu' requires that UNICODE be set to true or false in the root module");
        pub const LoadMenuIndirect = @compileError("'LoadMenuIndirect' requires that UNICODE be set to true or false in the root module");
        pub const ChangeMenu = @compileError("'ChangeMenu' requires that UNICODE be set to true or false in the root module");
        pub const GetMenuString = @compileError("'GetMenuString' requires that UNICODE be set to true or false in the root module");
        pub const InsertMenu = @compileError("'InsertMenu' requires that UNICODE be set to true or false in the root module");
        pub const AppendMenu = @compileError("'AppendMenu' requires that UNICODE be set to true or false in the root module");
        pub const ModifyMenu = @compileError("'ModifyMenu' requires that UNICODE be set to true or false in the root module");
        pub const InsertMenuItem = @compileError("'InsertMenuItem' requires that UNICODE be set to true or false in the root module");
        pub const GetMenuItemInfo = @compileError("'GetMenuItemInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetMenuItemInfo = @compileError("'SetMenuItemInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetProp = @compileError("'SetProp' requires that UNICODE be set to true or false in the root module");
        pub const GetProp = @compileError("'GetProp' requires that UNICODE be set to true or false in the root module");
        pub const RemoveProp = @compileError("'RemoveProp' requires that UNICODE be set to true or false in the root module");
        pub const EnumPropsEx = @compileError("'EnumPropsEx' requires that UNICODE be set to true or false in the root module");
        pub const EnumProps = @compileError("'EnumProps' requires that UNICODE be set to true or false in the root module");
        pub const SetWindowText = @compileError("'SetWindowText' requires that UNICODE be set to true or false in the root module");
        pub const GetWindowText = @compileError("'GetWindowText' requires that UNICODE be set to true or false in the root module");
        pub const GetWindowTextLength = @compileError("'GetWindowTextLength' requires that UNICODE be set to true or false in the root module");
        pub const MessageBox = @compileError("'MessageBox' requires that UNICODE be set to true or false in the root module");
        pub const MessageBoxEx = @compileError("'MessageBoxEx' requires that UNICODE be set to true or false in the root module");
        pub const MessageBoxIndirect = @compileError("'MessageBoxIndirect' requires that UNICODE be set to true or false in the root module");
        pub const GetWindowLong = @compileError("'GetWindowLong' requires that UNICODE be set to true or false in the root module");
        pub const SetWindowLong = @compileError("'SetWindowLong' requires that UNICODE be set to true or false in the root module");
        pub const GetClassLong = @compileError("'GetClassLong' requires that UNICODE be set to true or false in the root module");
        pub const SetClassLong = @compileError("'SetClassLong' requires that UNICODE be set to true or false in the root module");
        pub const FindWindow = @compileError("'FindWindow' requires that UNICODE be set to true or false in the root module");
        pub const FindWindowEx = @compileError("'FindWindowEx' requires that UNICODE be set to true or false in the root module");
        pub const GetClassName = @compileError("'GetClassName' requires that UNICODE be set to true or false in the root module");
        pub const SetWindowsHook = @compileError("'SetWindowsHook' requires that UNICODE be set to true or false in the root module");
        pub const SetWindowsHookEx = @compileError("'SetWindowsHookEx' requires that UNICODE be set to true or false in the root module");
        pub const LoadCursor = @compileError("'LoadCursor' requires that UNICODE be set to true or false in the root module");
        pub const LoadCursorFromFile = @compileError("'LoadCursorFromFile' requires that UNICODE be set to true or false in the root module");
        pub const LoadIcon = @compileError("'LoadIcon' requires that UNICODE be set to true or false in the root module");
        pub const PrivateExtractIcons = @compileError("'PrivateExtractIcons' requires that UNICODE be set to true or false in the root module");
        pub const LoadImage = @compileError("'LoadImage' requires that UNICODE be set to true or false in the root module");
        pub const GetIconInfoEx = @compileError("'GetIconInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const IsDialogMessage = @compileError("'IsDialogMessage' requires that UNICODE be set to true or false in the root module");
        pub const DefFrameProc = @compileError("'DefFrameProc' requires that UNICODE be set to true or false in the root module");
        pub const DefMDIChildProc = @compileError("'DefMDIChildProc' requires that UNICODE be set to true or false in the root module");
        pub const CreateMDIWindow = @compileError("'CreateMDIWindow' requires that UNICODE be set to true or false in the root module");
        pub const SystemParametersInfo = @compileError("'SystemParametersInfo' requires that UNICODE be set to true or false in the root module");
        pub const GetWindowModuleFileName = @compileError("'GetWindowModuleFileName' requires that UNICODE be set to true or false in the root module");
        pub const RealGetWindowClass = @compileError("'RealGetWindowClass' requires that UNICODE be set to true or false in the root module");
        pub const GetAltTabInfo = @compileError("'GetAltTabInfo' requires that UNICODE be set to true or false in the root module");
        pub const VerFindFile = @compileError("'VerFindFile' requires that UNICODE be set to true or false in the root module");
        pub const VerInstallFile = @compileError("'VerInstallFile' requires that UNICODE be set to true or false in the root module");
        pub const GetFileVersionInfoSize = @compileError("'GetFileVersionInfoSize' requires that UNICODE be set to true or false in the root module");
        pub const GetFileVersionInfo = @compileError("'GetFileVersionInfo' requires that UNICODE be set to true or false in the root module");
        pub const GetFileVersionInfoSizeEx = @compileError("'GetFileVersionInfoSizeEx' requires that UNICODE be set to true or false in the root module");
        pub const GetFileVersionInfoEx = @compileError("'GetFileVersionInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const VerLanguageName = @compileError("'VerLanguageName' requires that UNICODE be set to true or false in the root module");
        pub const VerQueryValue = @compileError("'VerQueryValue' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (33)
//--------------------------------------------------------------------------------
const HDC = @import("gdi.zig").HDC;
const ImageListLoadImage_uFlags = @import("controls.zig").ImageListLoadImage_uFlags;
const HINSTANCE = @import("system_services.zig").HINSTANCE;
const HRESULT = @import("com.zig").HRESULT;
const NMHDR = @import("controls.zig").NMHDR;
const LOGFONTW = @import("shell.zig").LOGFONTW;
const BOOL = @import("system_services.zig").BOOL;
const DEVMODEA = @import("xps.zig").DEVMODEA;
const HBRUSH = @import("gdi.zig").HBRUSH;
const LUID = @import("kernel.zig").LUID;
const LRESULT = @import("system_services.zig").LRESULT;
const HELPINFO = @import("shell.zig").HELPINFO;
const HMENU = @import("menus_and_resources.zig").HMENU;
const HACCEL = @import("menus_and_resources.zig").HACCEL;
const HRSRC = @import("system_services.zig").HRSRC;
const HICON = @import("menus_and_resources.zig").HICON;
const PWSTR = @import("system_services.zig").PWSTR;
const HDESK = @import("windows_stations_and_desktops.zig").HDESK;
const IUnknown = @import("com.zig").IUnknown;
const SCROLLBAR_OBJID = @import("controls.zig").SCROLLBAR_OBJID;
const PSTR = @import("system_services.zig").PSTR;
const RECT = @import("display_devices.zig").RECT;
const HBITMAP = @import("gdi.zig").HBITMAP;
const DPI_AWARENESS_CONTEXT = @import("system_services.zig").DPI_AWARENESS_CONTEXT;
const ENUMRESLANGPROCA = @import("system_services.zig").ENUMRESLANGPROCA;
const ENUMRESLANGPROCW = @import("system_services.zig").ENUMRESLANGPROCW;
const BLENDFUNCTION = @import("gdi.zig").BLENDFUNCTION;
const POINT = @import("display_devices.zig").POINT;
const SIZE = @import("display_devices.zig").SIZE;
const HPROPSHEETPAGE = @import("controls.zig").HPROPSHEETPAGE;
const LOGFONTA = @import("shell.zig").LOGFONTA;
const HANDLE = @import("system_services.zig").HANDLE;
const HCURSOR = @import("menus_and_resources.zig").HCURSOR;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = ENUMRESNAMEPROCA;
    _ = ENUMRESNAMEPROCW;
    _ = ENUMRESTYPEPROCA;
    _ = ENUMRESTYPEPROCW;
    _ = WINSTAENUMPROCA;
    _ = WINSTAENUMPROCW;
    _ = DESKTOPENUMPROCA;
    _ = DESKTOPENUMPROCW;
    _ = LPOFNHOOKPROC;
    _ = LPCCHOOKPROC;
    _ = LPFRHOOKPROC;
    _ = LPCFHOOKPROC;
    _ = LPPRINTHOOKPROC;
    _ = LPSETUPHOOKPROC;
    _ = LPPAGEPAINTHOOK;
    _ = LPPAGESETUPHOOK;
    _ = WNDPROC;
    _ = DLGPROC;
    _ = TIMERPROC;
    _ = WNDENUMPROC;
    _ = HOOKPROC;
    _ = SENDASYNCPROC;
    _ = PROPENUMPROCA;
    _ = PROPENUMPROCW;
    _ = PROPENUMPROCEXA;
    _ = PROPENUMPROCEXW;
    _ = NAMEENUMPROCA;
    _ = NAMEENUMPROCW;
    _ = PREGISTERCLASSNAMEW;
    _ = MSGBOXCALLBACK;

    const constant_export_count = 1480;
    const type_export_count = 197;
    const enum_value_export_count = 927;
    const com_iface_id_export_count = 2;
    const com_class_id_export_count = 0;
    const func_export_count = 465;
    const unicode_alias_count = 152;
    const import_count = 33;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (14)
//--------------------------------------------------------------------------------
pub const ENHANCED_STORAGE_PASSWORD_SILO_INFORMATION = extern struct {
    CurrentAdminFailures: u8,
    CurrentUserFailures: u8,
    TotalUserAuthenticationCount: u32,
    TotalAdminAuthenticationCount: u32,
    FipsCompliant: BOOL,
    SecurityIDAvailable: BOOL,
    InitializeInProgress: BOOL,
    ITMSArmed: BOOL,
    ITMSArmable: BOOL,
    UserCreated: BOOL,
    ResetOnPORDefault: BOOL,
    ResetOnPORCurrent: BOOL,
    MaxAdminFailures: u8,
    MaxUserFailures: u8,
    TimeToCompleteInitialization: u32,
    TimeRemainingToCompleteInitialization: u32,
    MinTimeToAuthenticate: u32,
    MaxAdminPasswordSize: u8,
    MinAdminPasswordSize: u8,
    MaxAdminHintSize: u8,
    MaxUserPasswordSize: u8,
    MinUserPasswordSize: u8,
    MaxUserHintSize: u8,
    MaxUserNameSize: u8,
    MaxSiloNameSize: u8,
    MaxChallengeSize: u16,
};

const CLSID_EnumEnhancedStorageACT_Value = @import("../zig.zig").Guid.initString("FE841493-835C-4FA3-B6CC-B4B2D4719848");
pub const CLSID_EnumEnhancedStorageACT = &CLSID_EnumEnhancedStorageACT_Value;

const CLSID_EnhancedStorageACT_Value = @import("../zig.zig").Guid.initString("AF076A15-2ECE-4AD4-BB21-29F040E176D8");
pub const CLSID_EnhancedStorageACT = &CLSID_EnhancedStorageACT_Value;

const CLSID_EnhancedStorageSilo_Value = @import("../zig.zig").Guid.initString("CB25220C-76C7-4FEE-842B-F3383CD022BC");
pub const CLSID_EnhancedStorageSilo = &CLSID_EnhancedStorageSilo_Value;

const CLSID_EnhancedStorageSiloAction_Value = @import("../zig.zig").Guid.initString("886D29DD-B506-466B-9FBF-B44FF383FB3F");
pub const CLSID_EnhancedStorageSiloAction = &CLSID_EnhancedStorageSiloAction_Value;

pub const ACT_AUTHORIZATION_STATE = extern struct {
    ulState: u32,
};

pub const SILO_INFO = extern struct {
    ulSTID: u32,
    SpecificationMajor: u8,
    SpecificationMinor: u8,
    ImplementationMajor: u8,
    ImplementationMinor: u8,
    type: u8,
    capabilities: u8,
};

pub const ACT_AUTHORIZATION_STATE_VALUE = extern enum(i32) {
    ACT_UNAUTHORIZED = 0,
    ACT_AUTHORIZED = 1,
};
pub const ACT_UNAUTHORIZED = ACT_AUTHORIZATION_STATE_VALUE.ACT_UNAUTHORIZED;
pub const ACT_AUTHORIZED = ACT_AUTHORIZATION_STATE_VALUE.ACT_AUTHORIZED;

const IID_IEnumEnhancedStorageACT_Value = @import("../zig.zig").Guid.initString("09B224BD-1335-4631-A7FF-CFD3A92646D7");
pub const IID_IEnumEnhancedStorageACT = &IID_IEnumEnhancedStorageACT_Value;
pub const IEnumEnhancedStorageACT = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetACTs: fn(
            self: *const IEnumEnhancedStorageACT,
            pppIEnhancedStorageACTs: [*]**IEnhancedStorageACT,
            pcEnhancedStorageACTs: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMatchingACT: fn(
            self: *const IEnumEnhancedStorageACT,
            szVolume: [*:0]const u16,
            ppIEnhancedStorageACT: **IEnhancedStorageACT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumEnhancedStorageACT_GetACTs(self: *const T, pppIEnhancedStorageACTs: [*]**IEnhancedStorageACT, pcEnhancedStorageACTs: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumEnhancedStorageACT.VTable, self.vtable).GetACTs(@ptrCast(*const IEnumEnhancedStorageACT, self), pppIEnhancedStorageACTs, pcEnhancedStorageACTs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumEnhancedStorageACT_GetMatchingACT(self: *const T, szVolume: [*:0]const u16, ppIEnhancedStorageACT: **IEnhancedStorageACT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumEnhancedStorageACT.VTable, self.vtable).GetMatchingACT(@ptrCast(*const IEnumEnhancedStorageACT, self), szVolume, ppIEnhancedStorageACT);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnhancedStorageACT_Value = @import("../zig.zig").Guid.initString("6E7781F4-E0F2-4239-B976-A01ABAB52930");
pub const IID_IEnhancedStorageACT = &IID_IEnhancedStorageACT_Value;
pub const IEnhancedStorageACT = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Authorize: fn(
            self: *const IEnhancedStorageACT,
            hwndParent: u32,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unauthorize: fn(
            self: *const IEnhancedStorageACT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAuthorizationState: fn(
            self: *const IEnhancedStorageACT,
            pState: *ACT_AUTHORIZATION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMatchingVolume: fn(
            self: *const IEnhancedStorageACT,
            ppwszVolume: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUniqueIdentity: fn(
            self: *const IEnhancedStorageACT,
            ppwszIdentity: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSilos: fn(
            self: *const IEnhancedStorageACT,
            pppIEnhancedStorageSilos: [*]**IEnhancedStorageSilo,
            pcEnhancedStorageSilos: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT_Authorize(self: *const T, hwndParent: u32, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT.VTable, self.vtable).Authorize(@ptrCast(*const IEnhancedStorageACT, self), hwndParent, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT_Unauthorize(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT.VTable, self.vtable).Unauthorize(@ptrCast(*const IEnhancedStorageACT, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT_GetAuthorizationState(self: *const T, pState: *ACT_AUTHORIZATION_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT.VTable, self.vtable).GetAuthorizationState(@ptrCast(*const IEnhancedStorageACT, self), pState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT_GetMatchingVolume(self: *const T, ppwszVolume: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT.VTable, self.vtable).GetMatchingVolume(@ptrCast(*const IEnhancedStorageACT, self), ppwszVolume);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT_GetUniqueIdentity(self: *const T, ppwszIdentity: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT.VTable, self.vtable).GetUniqueIdentity(@ptrCast(*const IEnhancedStorageACT, self), ppwszIdentity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT_GetSilos(self: *const T, pppIEnhancedStorageSilos: [*]**IEnhancedStorageSilo, pcEnhancedStorageSilos: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT.VTable, self.vtable).GetSilos(@ptrCast(*const IEnhancedStorageACT, self), pppIEnhancedStorageSilos, pcEnhancedStorageSilos);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnhancedStorageACT2_Value = @import("../zig.zig").Guid.initString("4DA57D2E-8EB3-41F6-A07E-98B52B88242B");
pub const IID_IEnhancedStorageACT2 = &IID_IEnhancedStorageACT2_Value;
pub const IEnhancedStorageACT2 = extern struct {
    pub const VTable = extern struct {
        base: IEnhancedStorageACT.VTable,
        GetDeviceName: fn(
            self: *const IEnhancedStorageACT2,
            ppwszDeviceName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDeviceRemovable: fn(
            self: *const IEnhancedStorageACT2,
            pIsDeviceRemovable: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IEnhancedStorageACT.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT2_GetDeviceName(self: *const T, ppwszDeviceName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT2.VTable, self.vtable).GetDeviceName(@ptrCast(*const IEnhancedStorageACT2, self), ppwszDeviceName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT2_IsDeviceRemovable(self: *const T, pIsDeviceRemovable: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT2.VTable, self.vtable).IsDeviceRemovable(@ptrCast(*const IEnhancedStorageACT2, self), pIsDeviceRemovable);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnhancedStorageACT3_Value = @import("../zig.zig").Guid.initString("022150A1-113D-11DF-BB61-001AA01BBC58");
pub const IID_IEnhancedStorageACT3 = &IID_IEnhancedStorageACT3_Value;
pub const IEnhancedStorageACT3 = extern struct {
    pub const VTable = extern struct {
        base: IEnhancedStorageACT2.VTable,
        UnauthorizeEx: fn(
            self: *const IEnhancedStorageACT3,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsQueueFrozen: fn(
            self: *const IEnhancedStorageACT3,
            pIsQueueFrozen: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShellExtSupport: fn(
            self: *const IEnhancedStorageACT3,
            pShellExtSupport: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IEnhancedStorageACT2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT3_UnauthorizeEx(self: *const T, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT3.VTable, self.vtable).UnauthorizeEx(@ptrCast(*const IEnhancedStorageACT3, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT3_IsQueueFrozen(self: *const T, pIsQueueFrozen: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT3.VTable, self.vtable).IsQueueFrozen(@ptrCast(*const IEnhancedStorageACT3, self), pIsQueueFrozen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageACT3_GetShellExtSupport(self: *const T, pShellExtSupport: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageACT3.VTable, self.vtable).GetShellExtSupport(@ptrCast(*const IEnhancedStorageACT3, self), pShellExtSupport);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnhancedStorageSilo_Value = @import("../zig.zig").Guid.initString("5AEF78C6-2242-4703-BF49-44B29357A359");
pub const IID_IEnhancedStorageSilo = &IID_IEnhancedStorageSilo_Value;
pub const IEnhancedStorageSilo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInfo: fn(
            self: *const IEnhancedStorageSilo,
            pSiloInfo: *SILO_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetActions: fn(
            self: *const IEnhancedStorageSilo,
            pppIEnhancedStorageSiloActions: [*]**IEnhancedStorageSiloAction,
            pcEnhancedStorageSiloActions: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendCommand: fn(
            self: *const IEnhancedStorageSilo,
            Command: u8,
            pbCommandBuffer: [*:0]u8,
            cbCommandBuffer: u32,
            pbResponseBuffer: [*:0]u8,
            pcbResponseBuffer: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPortableDevice: fn(
            self: *const IEnhancedStorageSilo,
            ppIPortableDevice: **IPortableDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDevicePath: fn(
            self: *const IEnhancedStorageSilo,
            ppwszSiloDevicePath: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageSilo_GetInfo(self: *const T, pSiloInfo: *SILO_INFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageSilo.VTable, self.vtable).GetInfo(@ptrCast(*const IEnhancedStorageSilo, self), pSiloInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageSilo_GetActions(self: *const T, pppIEnhancedStorageSiloActions: [*]**IEnhancedStorageSiloAction, pcEnhancedStorageSiloActions: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageSilo.VTable, self.vtable).GetActions(@ptrCast(*const IEnhancedStorageSilo, self), pppIEnhancedStorageSiloActions, pcEnhancedStorageSiloActions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageSilo_SendCommand(self: *const T, Command: u8, pbCommandBuffer: [*:0]u8, cbCommandBuffer: u32, pbResponseBuffer: [*:0]u8, pcbResponseBuffer: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageSilo.VTable, self.vtable).SendCommand(@ptrCast(*const IEnhancedStorageSilo, self), Command, pbCommandBuffer, cbCommandBuffer, pbResponseBuffer, pcbResponseBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageSilo_GetPortableDevice(self: *const T, ppIPortableDevice: **IPortableDevice) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageSilo.VTable, self.vtable).GetPortableDevice(@ptrCast(*const IEnhancedStorageSilo, self), ppIPortableDevice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageSilo_GetDevicePath(self: *const T, ppwszSiloDevicePath: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageSilo.VTable, self.vtable).GetDevicePath(@ptrCast(*const IEnhancedStorageSilo, self), ppwszSiloDevicePath);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnhancedStorageSiloAction_Value = @import("../zig.zig").Guid.initString("B6F7F311-206F-4FF8-9C4B-27EFEE77A86F");
pub const IID_IEnhancedStorageSiloAction = &IID_IEnhancedStorageSiloAction_Value;
pub const IEnhancedStorageSiloAction = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetName: fn(
            self: *const IEnhancedStorageSiloAction,
            ppwszActionName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: fn(
            self: *const IEnhancedStorageSiloAction,
            ppwszActionDescription: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Invoke: fn(
            self: *const IEnhancedStorageSiloAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageSiloAction_GetName(self: *const T, ppwszActionName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageSiloAction.VTable, self.vtable).GetName(@ptrCast(*const IEnhancedStorageSiloAction, self), ppwszActionName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageSiloAction_GetDescription(self: *const T, ppwszActionDescription: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageSiloAction.VTable, self.vtable).GetDescription(@ptrCast(*const IEnhancedStorageSiloAction, self), ppwszActionDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnhancedStorageSiloAction_Invoke(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnhancedStorageSiloAction.VTable, self.vtable).Invoke(@ptrCast(*const IEnhancedStorageSiloAction, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (5)
//--------------------------------------------------------------------------------
const PWSTR = @import("system_services.zig").PWSTR;
const IPortableDevice = @import("windows_portable_devices.zig").IPortableDevice;
const BOOL = @import("system_services.zig").BOOL;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;

test {
    const constant_export_count = 0;
    const type_export_count = 10;
    const enum_value_export_count = 2;
    const com_iface_id_export_count = 6;
    const com_class_id_export_count = 4;
    const func_export_count = 0;
    const unicode_alias_count = 0;
    const import_count = 5;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

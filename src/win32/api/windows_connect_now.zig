//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (22)
//--------------------------------------------------------------------------------
pub const WCN_ATTRIBUTE_TYPE = extern enum(i32) {
    WCN_TYPE_AP_CHANNEL = 0,
    WCN_TYPE_ASSOCIATION_STATE = 1,
    WCN_TYPE_AUTHENTICATION_TYPE = 2,
    WCN_TYPE_AUTHENTICATION_TYPE_FLAGS = 3,
    WCN_TYPE_AUTHENTICATOR = 4,
    WCN_TYPE_CONFIG_METHODS = 5,
    WCN_TYPE_CONFIGURATION_ERROR = 6,
    WCN_TYPE_CONFIRMATION_URL4 = 7,
    WCN_TYPE_CONFIRMATION_URL6 = 8,
    WCN_TYPE_CONNECTION_TYPE = 9,
    WCN_TYPE_CONNECTION_TYPE_FLAGS = 10,
    WCN_TYPE_CREDENTIAL = 11,
    WCN_TYPE_DEVICE_NAME = 12,
    WCN_TYPE_DEVICE_PASSWORD_ID = 13,
    WCN_TYPE_E_HASH1 = 14,
    WCN_TYPE_E_HASH2 = 15,
    WCN_TYPE_E_SNONCE1 = 16,
    WCN_TYPE_E_SNONCE2 = 17,
    WCN_TYPE_ENCRYPTED_SETTINGS = 18,
    WCN_TYPE_ENCRYPTION_TYPE = 19,
    WCN_TYPE_ENCRYPTION_TYPE_FLAGS = 20,
    WCN_TYPE_ENROLLEE_NONCE = 21,
    WCN_TYPE_FEATURE_ID = 22,
    WCN_TYPE_IDENTITY = 23,
    WCN_TYPE_IDENTITY_PROOF = 24,
    WCN_TYPE_KEY_WRAP_AUTHENTICATOR = 25,
    WCN_TYPE_KEY_IDENTIFIER = 26,
    WCN_TYPE_MAC_ADDRESS = 27,
    WCN_TYPE_MANUFACTURER = 28,
    WCN_TYPE_MESSAGE_TYPE = 29,
    WCN_TYPE_MODEL_NAME = 30,
    WCN_TYPE_MODEL_NUMBER = 31,
    WCN_TYPE_NETWORK_INDEX = 32,
    WCN_TYPE_NETWORK_KEY = 33,
    WCN_TYPE_NETWORK_KEY_INDEX = 34,
    WCN_TYPE_NEW_DEVICE_NAME = 35,
    WCN_TYPE_NEW_PASSWORD = 36,
    WCN_TYPE_OOB_DEVICE_PASSWORD = 37,
    WCN_TYPE_OS_VERSION = 38,
    WCN_TYPE_POWER_LEVEL = 39,
    WCN_TYPE_PSK_CURRENT = 40,
    WCN_TYPE_PSK_MAX = 41,
    WCN_TYPE_PUBLIC_KEY = 42,
    WCN_TYPE_RADIO_ENABLED = 43,
    WCN_TYPE_REBOOT = 44,
    WCN_TYPE_REGISTRAR_CURRENT = 45,
    WCN_TYPE_REGISTRAR_ESTABLISHED = 46,
    WCN_TYPE_REGISTRAR_LIST = 47,
    WCN_TYPE_REGISTRAR_MAX = 48,
    WCN_TYPE_REGISTRAR_NONCE = 49,
    WCN_TYPE_REQUEST_TYPE = 50,
    WCN_TYPE_RESPONSE_TYPE = 51,
    WCN_TYPE_RF_BANDS = 52,
    WCN_TYPE_R_HASH1 = 53,
    WCN_TYPE_R_HASH2 = 54,
    WCN_TYPE_R_SNONCE1 = 55,
    WCN_TYPE_R_SNONCE2 = 56,
    WCN_TYPE_SELECTED_REGISTRAR = 57,
    WCN_TYPE_SERIAL_NUMBER = 58,
    WCN_TYPE_WI_FI_PROTECTED_SETUP_STATE = 59,
    WCN_TYPE_SSID = 60,
    WCN_TYPE_TOTAL_NETWORKS = 61,
    WCN_TYPE_UUID_E = 62,
    WCN_TYPE_UUID_R = 63,
    WCN_TYPE_VENDOR_EXTENSION = 64,
    WCN_TYPE_VERSION = 65,
    WCN_TYPE_X_509_CERTIFICATE_REQUEST = 66,
    WCN_TYPE_X_509_CERTIFICATE = 67,
    WCN_TYPE_EAP_IDENTITY = 68,
    WCN_TYPE_MESSAGE_COUNTER = 69,
    WCN_TYPE_PUBLIC_KEY_HASH = 70,
    WCN_TYPE_REKEY_KEY = 71,
    WCN_TYPE_KEY_LIFETIME = 72,
    WCN_TYPE_PERMITTED_CONFIG_METHODS = 73,
    WCN_TYPE_SELECTED_REGISTRAR_CONFIG_METHODS = 74,
    WCN_TYPE_PRIMARY_DEVICE_TYPE = 75,
    WCN_TYPE_SECONDARY_DEVICE_TYPE_LIST = 76,
    WCN_TYPE_PORTABLE_DEVICE = 77,
    WCN_TYPE_AP_SETUP_LOCKED = 78,
    WCN_TYPE_APPLICATION_EXTENSION = 79,
    WCN_TYPE_EAP_TYPE = 80,
    WCN_TYPE_INITIALIZATION_VECTOR = 81,
    WCN_TYPE_KEY_PROVIDED_AUTOMATICALLY = 82,
    WCN_TYPE_802_1X_ENABLED = 83,
    WCN_TYPE_APPSESSIONKEY = 84,
    WCN_TYPE_WEPTRANSMITKEY = 85,
    WCN_TYPE_UUID = 86,
    WCN_TYPE_PRIMARY_DEVICE_TYPE_CATEGORY = 87,
    WCN_TYPE_PRIMARY_DEVICE_TYPE_SUBCATEGORY_OUI = 88,
    WCN_TYPE_PRIMARY_DEVICE_TYPE_SUBCATEGORY = 89,
    WCN_TYPE_CURRENT_SSID = 90,
    WCN_TYPE_BSSID = 91,
    WCN_TYPE_DOT11_MAC_ADDRESS = 92,
    WCN_TYPE_AUTHORIZED_MACS = 93,
    WCN_TYPE_NETWORK_KEY_SHAREABLE = 94,
    WCN_TYPE_REQUEST_TO_ENROLL = 95,
    WCN_TYPE_REQUESTED_DEVICE_TYPE = 96,
    WCN_TYPE_SETTINGS_DELAY_TIME = 97,
    WCN_TYPE_VERSION2 = 98,
    WCN_TYPE_VENDOR_EXTENSION_WFA = 99,
    WCN_NUM_ATTRIBUTE_TYPES = 100,
};
pub const WCN_TYPE_AP_CHANNEL = WCN_ATTRIBUTE_TYPE.WCN_TYPE_AP_CHANNEL;
pub const WCN_TYPE_ASSOCIATION_STATE = WCN_ATTRIBUTE_TYPE.WCN_TYPE_ASSOCIATION_STATE;
pub const WCN_TYPE_AUTHENTICATION_TYPE = WCN_ATTRIBUTE_TYPE.WCN_TYPE_AUTHENTICATION_TYPE;
pub const WCN_TYPE_AUTHENTICATION_TYPE_FLAGS = WCN_ATTRIBUTE_TYPE.WCN_TYPE_AUTHENTICATION_TYPE_FLAGS;
pub const WCN_TYPE_AUTHENTICATOR = WCN_ATTRIBUTE_TYPE.WCN_TYPE_AUTHENTICATOR;
pub const WCN_TYPE_CONFIG_METHODS = WCN_ATTRIBUTE_TYPE.WCN_TYPE_CONFIG_METHODS;
pub const WCN_TYPE_CONFIGURATION_ERROR = WCN_ATTRIBUTE_TYPE.WCN_TYPE_CONFIGURATION_ERROR;
pub const WCN_TYPE_CONFIRMATION_URL4 = WCN_ATTRIBUTE_TYPE.WCN_TYPE_CONFIRMATION_URL4;
pub const WCN_TYPE_CONFIRMATION_URL6 = WCN_ATTRIBUTE_TYPE.WCN_TYPE_CONFIRMATION_URL6;
pub const WCN_TYPE_CONNECTION_TYPE = WCN_ATTRIBUTE_TYPE.WCN_TYPE_CONNECTION_TYPE;
pub const WCN_TYPE_CONNECTION_TYPE_FLAGS = WCN_ATTRIBUTE_TYPE.WCN_TYPE_CONNECTION_TYPE_FLAGS;
pub const WCN_TYPE_CREDENTIAL = WCN_ATTRIBUTE_TYPE.WCN_TYPE_CREDENTIAL;
pub const WCN_TYPE_DEVICE_NAME = WCN_ATTRIBUTE_TYPE.WCN_TYPE_DEVICE_NAME;
pub const WCN_TYPE_DEVICE_PASSWORD_ID = WCN_ATTRIBUTE_TYPE.WCN_TYPE_DEVICE_PASSWORD_ID;
pub const WCN_TYPE_E_HASH1 = WCN_ATTRIBUTE_TYPE.WCN_TYPE_E_HASH1;
pub const WCN_TYPE_E_HASH2 = WCN_ATTRIBUTE_TYPE.WCN_TYPE_E_HASH2;
pub const WCN_TYPE_E_SNONCE1 = WCN_ATTRIBUTE_TYPE.WCN_TYPE_E_SNONCE1;
pub const WCN_TYPE_E_SNONCE2 = WCN_ATTRIBUTE_TYPE.WCN_TYPE_E_SNONCE2;
pub const WCN_TYPE_ENCRYPTED_SETTINGS = WCN_ATTRIBUTE_TYPE.WCN_TYPE_ENCRYPTED_SETTINGS;
pub const WCN_TYPE_ENCRYPTION_TYPE = WCN_ATTRIBUTE_TYPE.WCN_TYPE_ENCRYPTION_TYPE;
pub const WCN_TYPE_ENCRYPTION_TYPE_FLAGS = WCN_ATTRIBUTE_TYPE.WCN_TYPE_ENCRYPTION_TYPE_FLAGS;
pub const WCN_TYPE_ENROLLEE_NONCE = WCN_ATTRIBUTE_TYPE.WCN_TYPE_ENROLLEE_NONCE;
pub const WCN_TYPE_FEATURE_ID = WCN_ATTRIBUTE_TYPE.WCN_TYPE_FEATURE_ID;
pub const WCN_TYPE_IDENTITY = WCN_ATTRIBUTE_TYPE.WCN_TYPE_IDENTITY;
pub const WCN_TYPE_IDENTITY_PROOF = WCN_ATTRIBUTE_TYPE.WCN_TYPE_IDENTITY_PROOF;
pub const WCN_TYPE_KEY_WRAP_AUTHENTICATOR = WCN_ATTRIBUTE_TYPE.WCN_TYPE_KEY_WRAP_AUTHENTICATOR;
pub const WCN_TYPE_KEY_IDENTIFIER = WCN_ATTRIBUTE_TYPE.WCN_TYPE_KEY_IDENTIFIER;
pub const WCN_TYPE_MAC_ADDRESS = WCN_ATTRIBUTE_TYPE.WCN_TYPE_MAC_ADDRESS;
pub const WCN_TYPE_MANUFACTURER = WCN_ATTRIBUTE_TYPE.WCN_TYPE_MANUFACTURER;
pub const WCN_TYPE_MESSAGE_TYPE = WCN_ATTRIBUTE_TYPE.WCN_TYPE_MESSAGE_TYPE;
pub const WCN_TYPE_MODEL_NAME = WCN_ATTRIBUTE_TYPE.WCN_TYPE_MODEL_NAME;
pub const WCN_TYPE_MODEL_NUMBER = WCN_ATTRIBUTE_TYPE.WCN_TYPE_MODEL_NUMBER;
pub const WCN_TYPE_NETWORK_INDEX = WCN_ATTRIBUTE_TYPE.WCN_TYPE_NETWORK_INDEX;
pub const WCN_TYPE_NETWORK_KEY = WCN_ATTRIBUTE_TYPE.WCN_TYPE_NETWORK_KEY;
pub const WCN_TYPE_NETWORK_KEY_INDEX = WCN_ATTRIBUTE_TYPE.WCN_TYPE_NETWORK_KEY_INDEX;
pub const WCN_TYPE_NEW_DEVICE_NAME = WCN_ATTRIBUTE_TYPE.WCN_TYPE_NEW_DEVICE_NAME;
pub const WCN_TYPE_NEW_PASSWORD = WCN_ATTRIBUTE_TYPE.WCN_TYPE_NEW_PASSWORD;
pub const WCN_TYPE_OOB_DEVICE_PASSWORD = WCN_ATTRIBUTE_TYPE.WCN_TYPE_OOB_DEVICE_PASSWORD;
pub const WCN_TYPE_OS_VERSION = WCN_ATTRIBUTE_TYPE.WCN_TYPE_OS_VERSION;
pub const WCN_TYPE_POWER_LEVEL = WCN_ATTRIBUTE_TYPE.WCN_TYPE_POWER_LEVEL;
pub const WCN_TYPE_PSK_CURRENT = WCN_ATTRIBUTE_TYPE.WCN_TYPE_PSK_CURRENT;
pub const WCN_TYPE_PSK_MAX = WCN_ATTRIBUTE_TYPE.WCN_TYPE_PSK_MAX;
pub const WCN_TYPE_PUBLIC_KEY = WCN_ATTRIBUTE_TYPE.WCN_TYPE_PUBLIC_KEY;
pub const WCN_TYPE_RADIO_ENABLED = WCN_ATTRIBUTE_TYPE.WCN_TYPE_RADIO_ENABLED;
pub const WCN_TYPE_REBOOT = WCN_ATTRIBUTE_TYPE.WCN_TYPE_REBOOT;
pub const WCN_TYPE_REGISTRAR_CURRENT = WCN_ATTRIBUTE_TYPE.WCN_TYPE_REGISTRAR_CURRENT;
pub const WCN_TYPE_REGISTRAR_ESTABLISHED = WCN_ATTRIBUTE_TYPE.WCN_TYPE_REGISTRAR_ESTABLISHED;
pub const WCN_TYPE_REGISTRAR_LIST = WCN_ATTRIBUTE_TYPE.WCN_TYPE_REGISTRAR_LIST;
pub const WCN_TYPE_REGISTRAR_MAX = WCN_ATTRIBUTE_TYPE.WCN_TYPE_REGISTRAR_MAX;
pub const WCN_TYPE_REGISTRAR_NONCE = WCN_ATTRIBUTE_TYPE.WCN_TYPE_REGISTRAR_NONCE;
pub const WCN_TYPE_REQUEST_TYPE = WCN_ATTRIBUTE_TYPE.WCN_TYPE_REQUEST_TYPE;
pub const WCN_TYPE_RESPONSE_TYPE = WCN_ATTRIBUTE_TYPE.WCN_TYPE_RESPONSE_TYPE;
pub const WCN_TYPE_RF_BANDS = WCN_ATTRIBUTE_TYPE.WCN_TYPE_RF_BANDS;
pub const WCN_TYPE_R_HASH1 = WCN_ATTRIBUTE_TYPE.WCN_TYPE_R_HASH1;
pub const WCN_TYPE_R_HASH2 = WCN_ATTRIBUTE_TYPE.WCN_TYPE_R_HASH2;
pub const WCN_TYPE_R_SNONCE1 = WCN_ATTRIBUTE_TYPE.WCN_TYPE_R_SNONCE1;
pub const WCN_TYPE_R_SNONCE2 = WCN_ATTRIBUTE_TYPE.WCN_TYPE_R_SNONCE2;
pub const WCN_TYPE_SELECTED_REGISTRAR = WCN_ATTRIBUTE_TYPE.WCN_TYPE_SELECTED_REGISTRAR;
pub const WCN_TYPE_SERIAL_NUMBER = WCN_ATTRIBUTE_TYPE.WCN_TYPE_SERIAL_NUMBER;
pub const WCN_TYPE_WI_FI_PROTECTED_SETUP_STATE = WCN_ATTRIBUTE_TYPE.WCN_TYPE_WI_FI_PROTECTED_SETUP_STATE;
pub const WCN_TYPE_SSID = WCN_ATTRIBUTE_TYPE.WCN_TYPE_SSID;
pub const WCN_TYPE_TOTAL_NETWORKS = WCN_ATTRIBUTE_TYPE.WCN_TYPE_TOTAL_NETWORKS;
pub const WCN_TYPE_UUID_E = WCN_ATTRIBUTE_TYPE.WCN_TYPE_UUID_E;
pub const WCN_TYPE_UUID_R = WCN_ATTRIBUTE_TYPE.WCN_TYPE_UUID_R;
pub const WCN_TYPE_VENDOR_EXTENSION = WCN_ATTRIBUTE_TYPE.WCN_TYPE_VENDOR_EXTENSION;
pub const WCN_TYPE_VERSION = WCN_ATTRIBUTE_TYPE.WCN_TYPE_VERSION;
pub const WCN_TYPE_X_509_CERTIFICATE_REQUEST = WCN_ATTRIBUTE_TYPE.WCN_TYPE_X_509_CERTIFICATE_REQUEST;
pub const WCN_TYPE_X_509_CERTIFICATE = WCN_ATTRIBUTE_TYPE.WCN_TYPE_X_509_CERTIFICATE;
pub const WCN_TYPE_EAP_IDENTITY = WCN_ATTRIBUTE_TYPE.WCN_TYPE_EAP_IDENTITY;
pub const WCN_TYPE_MESSAGE_COUNTER = WCN_ATTRIBUTE_TYPE.WCN_TYPE_MESSAGE_COUNTER;
pub const WCN_TYPE_PUBLIC_KEY_HASH = WCN_ATTRIBUTE_TYPE.WCN_TYPE_PUBLIC_KEY_HASH;
pub const WCN_TYPE_REKEY_KEY = WCN_ATTRIBUTE_TYPE.WCN_TYPE_REKEY_KEY;
pub const WCN_TYPE_KEY_LIFETIME = WCN_ATTRIBUTE_TYPE.WCN_TYPE_KEY_LIFETIME;
pub const WCN_TYPE_PERMITTED_CONFIG_METHODS = WCN_ATTRIBUTE_TYPE.WCN_TYPE_PERMITTED_CONFIG_METHODS;
pub const WCN_TYPE_SELECTED_REGISTRAR_CONFIG_METHODS = WCN_ATTRIBUTE_TYPE.WCN_TYPE_SELECTED_REGISTRAR_CONFIG_METHODS;
pub const WCN_TYPE_PRIMARY_DEVICE_TYPE = WCN_ATTRIBUTE_TYPE.WCN_TYPE_PRIMARY_DEVICE_TYPE;
pub const WCN_TYPE_SECONDARY_DEVICE_TYPE_LIST = WCN_ATTRIBUTE_TYPE.WCN_TYPE_SECONDARY_DEVICE_TYPE_LIST;
pub const WCN_TYPE_PORTABLE_DEVICE = WCN_ATTRIBUTE_TYPE.WCN_TYPE_PORTABLE_DEVICE;
pub const WCN_TYPE_AP_SETUP_LOCKED = WCN_ATTRIBUTE_TYPE.WCN_TYPE_AP_SETUP_LOCKED;
pub const WCN_TYPE_APPLICATION_EXTENSION = WCN_ATTRIBUTE_TYPE.WCN_TYPE_APPLICATION_EXTENSION;
pub const WCN_TYPE_EAP_TYPE = WCN_ATTRIBUTE_TYPE.WCN_TYPE_EAP_TYPE;
pub const WCN_TYPE_INITIALIZATION_VECTOR = WCN_ATTRIBUTE_TYPE.WCN_TYPE_INITIALIZATION_VECTOR;
pub const WCN_TYPE_KEY_PROVIDED_AUTOMATICALLY = WCN_ATTRIBUTE_TYPE.WCN_TYPE_KEY_PROVIDED_AUTOMATICALLY;
pub const WCN_TYPE_802_1X_ENABLED = WCN_ATTRIBUTE_TYPE.WCN_TYPE_802_1X_ENABLED;
pub const WCN_TYPE_APPSESSIONKEY = WCN_ATTRIBUTE_TYPE.WCN_TYPE_APPSESSIONKEY;
pub const WCN_TYPE_WEPTRANSMITKEY = WCN_ATTRIBUTE_TYPE.WCN_TYPE_WEPTRANSMITKEY;
pub const WCN_TYPE_UUID = WCN_ATTRIBUTE_TYPE.WCN_TYPE_UUID;
pub const WCN_TYPE_PRIMARY_DEVICE_TYPE_CATEGORY = WCN_ATTRIBUTE_TYPE.WCN_TYPE_PRIMARY_DEVICE_TYPE_CATEGORY;
pub const WCN_TYPE_PRIMARY_DEVICE_TYPE_SUBCATEGORY_OUI = WCN_ATTRIBUTE_TYPE.WCN_TYPE_PRIMARY_DEVICE_TYPE_SUBCATEGORY_OUI;
pub const WCN_TYPE_PRIMARY_DEVICE_TYPE_SUBCATEGORY = WCN_ATTRIBUTE_TYPE.WCN_TYPE_PRIMARY_DEVICE_TYPE_SUBCATEGORY;
pub const WCN_TYPE_CURRENT_SSID = WCN_ATTRIBUTE_TYPE.WCN_TYPE_CURRENT_SSID;
pub const WCN_TYPE_BSSID = WCN_ATTRIBUTE_TYPE.WCN_TYPE_BSSID;
pub const WCN_TYPE_DOT11_MAC_ADDRESS = WCN_ATTRIBUTE_TYPE.WCN_TYPE_DOT11_MAC_ADDRESS;
pub const WCN_TYPE_AUTHORIZED_MACS = WCN_ATTRIBUTE_TYPE.WCN_TYPE_AUTHORIZED_MACS;
pub const WCN_TYPE_NETWORK_KEY_SHAREABLE = WCN_ATTRIBUTE_TYPE.WCN_TYPE_NETWORK_KEY_SHAREABLE;
pub const WCN_TYPE_REQUEST_TO_ENROLL = WCN_ATTRIBUTE_TYPE.WCN_TYPE_REQUEST_TO_ENROLL;
pub const WCN_TYPE_REQUESTED_DEVICE_TYPE = WCN_ATTRIBUTE_TYPE.WCN_TYPE_REQUESTED_DEVICE_TYPE;
pub const WCN_TYPE_SETTINGS_DELAY_TIME = WCN_ATTRIBUTE_TYPE.WCN_TYPE_SETTINGS_DELAY_TIME;
pub const WCN_TYPE_VERSION2 = WCN_ATTRIBUTE_TYPE.WCN_TYPE_VERSION2;
pub const WCN_TYPE_VENDOR_EXTENSION_WFA = WCN_ATTRIBUTE_TYPE.WCN_TYPE_VENDOR_EXTENSION_WFA;
pub const WCN_NUM_ATTRIBUTE_TYPES = WCN_ATTRIBUTE_TYPE.WCN_NUM_ATTRIBUTE_TYPES;

pub const WCN_VALUE_TYPE_VERSION = extern enum(i32) {
    WCN_VALUE_VERSION_1_0 = 16,
    WCN_VALUE_VERSION_2_0 = 32,
};
pub const WCN_VALUE_VERSION_1_0 = WCN_VALUE_TYPE_VERSION.WCN_VALUE_VERSION_1_0;
pub const WCN_VALUE_VERSION_2_0 = WCN_VALUE_TYPE_VERSION.WCN_VALUE_VERSION_2_0;

pub const WCN_VALUE_TYPE_BOOLEAN = extern enum(i32) {
    WCN_VALUE_FALSE = 0,
    WCN_VALUE_TRUE = 1,
};
pub const WCN_VALUE_FALSE = WCN_VALUE_TYPE_BOOLEAN.WCN_VALUE_FALSE;
pub const WCN_VALUE_TRUE = WCN_VALUE_TYPE_BOOLEAN.WCN_VALUE_TRUE;

pub const WCN_VALUE_TYPE_ASSOCIATION_STATE = extern enum(i32) {
    WCN_VALUE_AS_NOT_ASSOCIATED = 0,
    WCN_VALUE_AS_CONNECTION_SUCCESS = 1,
    WCN_VALUE_AS_CONFIGURATION_FAILURE = 2,
    WCN_VALUE_AS_ASSOCIATION_FAILURE = 3,
    WCN_VALUE_AS_IP_FAILURE = 4,
};
pub const WCN_VALUE_AS_NOT_ASSOCIATED = WCN_VALUE_TYPE_ASSOCIATION_STATE.WCN_VALUE_AS_NOT_ASSOCIATED;
pub const WCN_VALUE_AS_CONNECTION_SUCCESS = WCN_VALUE_TYPE_ASSOCIATION_STATE.WCN_VALUE_AS_CONNECTION_SUCCESS;
pub const WCN_VALUE_AS_CONFIGURATION_FAILURE = WCN_VALUE_TYPE_ASSOCIATION_STATE.WCN_VALUE_AS_CONFIGURATION_FAILURE;
pub const WCN_VALUE_AS_ASSOCIATION_FAILURE = WCN_VALUE_TYPE_ASSOCIATION_STATE.WCN_VALUE_AS_ASSOCIATION_FAILURE;
pub const WCN_VALUE_AS_IP_FAILURE = WCN_VALUE_TYPE_ASSOCIATION_STATE.WCN_VALUE_AS_IP_FAILURE;

pub const WCN_VALUE_TYPE_AUTHENTICATION_TYPE = extern enum(i32) {
    WCN_VALUE_AT_OPEN = 1,
    WCN_VALUE_AT_WPAPSK = 2,
    WCN_VALUE_AT_SHARED = 4,
    WCN_VALUE_AT_WPA = 8,
    WCN_VALUE_AT_WPA2 = 16,
    WCN_VALUE_AT_WPA2PSK = 32,
    WCN_VALUE_AT_WPAWPA2PSK_MIXED = 34,
};
pub const WCN_VALUE_AT_OPEN = WCN_VALUE_TYPE_AUTHENTICATION_TYPE.WCN_VALUE_AT_OPEN;
pub const WCN_VALUE_AT_WPAPSK = WCN_VALUE_TYPE_AUTHENTICATION_TYPE.WCN_VALUE_AT_WPAPSK;
pub const WCN_VALUE_AT_SHARED = WCN_VALUE_TYPE_AUTHENTICATION_TYPE.WCN_VALUE_AT_SHARED;
pub const WCN_VALUE_AT_WPA = WCN_VALUE_TYPE_AUTHENTICATION_TYPE.WCN_VALUE_AT_WPA;
pub const WCN_VALUE_AT_WPA2 = WCN_VALUE_TYPE_AUTHENTICATION_TYPE.WCN_VALUE_AT_WPA2;
pub const WCN_VALUE_AT_WPA2PSK = WCN_VALUE_TYPE_AUTHENTICATION_TYPE.WCN_VALUE_AT_WPA2PSK;
pub const WCN_VALUE_AT_WPAWPA2PSK_MIXED = WCN_VALUE_TYPE_AUTHENTICATION_TYPE.WCN_VALUE_AT_WPAWPA2PSK_MIXED;

pub const WCN_VALUE_TYPE_CONFIG_METHODS = extern enum(i32) {
    WCN_VALUE_CM_USBA = 1,
    WCN_VALUE_CM_ETHERNET = 2,
    WCN_VALUE_CM_LABEL = 4,
    WCN_VALUE_CM_DISPLAY = 8,
    WCN_VALUE_CM_EXTERNAL_NFC = 16,
    WCN_VALUE_CM_INTEGRATED_NFC = 32,
    WCN_VALUE_CM_NFC_INTERFACE = 64,
    WCN_VALUE_CM_PUSHBUTTON = 128,
    WCN_VALUE_CM_KEYPAD = 256,
    WCN_VALUE_CM_VIRT_PUSHBUTTON = 640,
    WCN_VALUE_CM_PHYS_PUSHBUTTON = 1152,
    WCN_VALUE_CM_VIRT_DISPLAY = 8200,
    WCN_VALUE_CM_PHYS_DISPLAY = 16392,
};
pub const WCN_VALUE_CM_USBA = WCN_VALUE_TYPE_CONFIG_METHODS.WCN_VALUE_CM_USBA;
pub const WCN_VALUE_CM_ETHERNET = WCN_VALUE_TYPE_CONFIG_METHODS.WCN_VALUE_CM_ETHERNET;
pub const WCN_VALUE_CM_LABEL = WCN_VALUE_TYPE_CONFIG_METHODS.WCN_VALUE_CM_LABEL;
pub const WCN_VALUE_CM_DISPLAY = WCN_VALUE_TYPE_CONFIG_METHODS.WCN_VALUE_CM_DISPLAY;
pub const WCN_VALUE_CM_EXTERNAL_NFC = WCN_VALUE_TYPE_CONFIG_METHODS.WCN_VALUE_CM_EXTERNAL_NFC;
pub const WCN_VALUE_CM_INTEGRATED_NFC = WCN_VALUE_TYPE_CONFIG_METHODS.WCN_VALUE_CM_INTEGRATED_NFC;
pub const WCN_VALUE_CM_NFC_INTERFACE = WCN_VALUE_TYPE_CONFIG_METHODS.WCN_VALUE_CM_NFC_INTERFACE;
pub const WCN_VALUE_CM_PUSHBUTTON = WCN_VALUE_TYPE_CONFIG_METHODS.WCN_VALUE_CM_PUSHBUTTON;
pub const WCN_VALUE_CM_KEYPAD = WCN_VALUE_TYPE_CONFIG_METHODS.WCN_VALUE_CM_KEYPAD;
pub const WCN_VALUE_CM_VIRT_PUSHBUTTON = WCN_VALUE_TYPE_CONFIG_METHODS.WCN_VALUE_CM_VIRT_PUSHBUTTON;
pub const WCN_VALUE_CM_PHYS_PUSHBUTTON = WCN_VALUE_TYPE_CONFIG_METHODS.WCN_VALUE_CM_PHYS_PUSHBUTTON;
pub const WCN_VALUE_CM_VIRT_DISPLAY = WCN_VALUE_TYPE_CONFIG_METHODS.WCN_VALUE_CM_VIRT_DISPLAY;
pub const WCN_VALUE_CM_PHYS_DISPLAY = WCN_VALUE_TYPE_CONFIG_METHODS.WCN_VALUE_CM_PHYS_DISPLAY;

pub const WCN_VALUE_TYPE_CONFIGURATION_ERROR = extern enum(i32) {
    WCN_VALUE_CE_NO_ERROR = 0,
    WCN_VALUE_CE_OOB_INTERFACE_READ_ERROR = 1,
    WCN_VALUE_CE_DECRYPTION_CRC_FAILURE = 2,
    WCN_VALUE_CE_2_4_CHANNEL_NOT_SUPPORTED = 3,
    WCN_VALUE_CE_5_0_CHANNEL_NOT_SUPPORTED = 4,
    WCN_VALUE_CE_SIGNAL_TOO_WEAK = 5,
    WCN_VALUE_CE_NETWORK_AUTHENTICATION_FAILURE = 6,
    WCN_VALUE_CE_NETWORK_ASSOCIATION_FAILURE = 7,
    WCN_VALUE_CE_NO_DHCP_RESPONSE = 8,
    WCN_VALUE_CE_FAILED_DHCP_CONFIG = 9,
    WCN_VALUE_CE_IP_ADDRESS_CONFLICT = 10,
    WCN_VALUE_CE_COULD_NOT_CONNECT_TO_REGISTRAR = 11,
    WCN_VALUE_CE_MULTIPLE_PBC_SESSIONS_DETECTED = 12,
    WCN_VALUE_CE_ROGUE_ACTIVITY_SUSPECTED = 13,
    WCN_VALUE_CE_DEVICE_BUSY = 14,
    WCN_VALUE_CE_SETUP_LOCKED = 15,
    WCN_VALUE_CE_MESSAGE_TIMEOUT = 16,
    WCN_VALUE_CE_REGISTRATION_SESSION_TIMEOUT = 17,
    WCN_VALUE_CE_DEVICE_PASSWORD_AUTH_FAILURE = 18,
};
pub const WCN_VALUE_CE_NO_ERROR = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_NO_ERROR;
pub const WCN_VALUE_CE_OOB_INTERFACE_READ_ERROR = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_OOB_INTERFACE_READ_ERROR;
pub const WCN_VALUE_CE_DECRYPTION_CRC_FAILURE = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_DECRYPTION_CRC_FAILURE;
pub const WCN_VALUE_CE_2_4_CHANNEL_NOT_SUPPORTED = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_2_4_CHANNEL_NOT_SUPPORTED;
pub const WCN_VALUE_CE_5_0_CHANNEL_NOT_SUPPORTED = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_5_0_CHANNEL_NOT_SUPPORTED;
pub const WCN_VALUE_CE_SIGNAL_TOO_WEAK = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_SIGNAL_TOO_WEAK;
pub const WCN_VALUE_CE_NETWORK_AUTHENTICATION_FAILURE = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_NETWORK_AUTHENTICATION_FAILURE;
pub const WCN_VALUE_CE_NETWORK_ASSOCIATION_FAILURE = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_NETWORK_ASSOCIATION_FAILURE;
pub const WCN_VALUE_CE_NO_DHCP_RESPONSE = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_NO_DHCP_RESPONSE;
pub const WCN_VALUE_CE_FAILED_DHCP_CONFIG = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_FAILED_DHCP_CONFIG;
pub const WCN_VALUE_CE_IP_ADDRESS_CONFLICT = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_IP_ADDRESS_CONFLICT;
pub const WCN_VALUE_CE_COULD_NOT_CONNECT_TO_REGISTRAR = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_COULD_NOT_CONNECT_TO_REGISTRAR;
pub const WCN_VALUE_CE_MULTIPLE_PBC_SESSIONS_DETECTED = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_MULTIPLE_PBC_SESSIONS_DETECTED;
pub const WCN_VALUE_CE_ROGUE_ACTIVITY_SUSPECTED = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_ROGUE_ACTIVITY_SUSPECTED;
pub const WCN_VALUE_CE_DEVICE_BUSY = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_DEVICE_BUSY;
pub const WCN_VALUE_CE_SETUP_LOCKED = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_SETUP_LOCKED;
pub const WCN_VALUE_CE_MESSAGE_TIMEOUT = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_MESSAGE_TIMEOUT;
pub const WCN_VALUE_CE_REGISTRATION_SESSION_TIMEOUT = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_REGISTRATION_SESSION_TIMEOUT;
pub const WCN_VALUE_CE_DEVICE_PASSWORD_AUTH_FAILURE = WCN_VALUE_TYPE_CONFIGURATION_ERROR.WCN_VALUE_CE_DEVICE_PASSWORD_AUTH_FAILURE;

pub const WCN_VALUE_TYPE_CONNECTION_TYPE = extern enum(i32) {
    WCN_VALUE_CT_ESS = 1,
    WCN_VALUE_CT_IBSS = 2,
};
pub const WCN_VALUE_CT_ESS = WCN_VALUE_TYPE_CONNECTION_TYPE.WCN_VALUE_CT_ESS;
pub const WCN_VALUE_CT_IBSS = WCN_VALUE_TYPE_CONNECTION_TYPE.WCN_VALUE_CT_IBSS;

pub const WCN_VALUE_TYPE_DEVICE_PASSWORD_ID = extern enum(i32) {
    WCN_VALUE_DP_DEFAULT = 0,
    WCN_VALUE_DP_USER_SPECIFIED = 1,
    WCN_VALUE_DP_MACHINE_SPECIFIED = 2,
    WCN_VALUE_DP_REKEY = 3,
    WCN_VALUE_DP_PUSHBUTTON = 4,
    WCN_VALUE_DP_REGISTRAR_SPECIFIED = 5,
    WCN_VALUE_DP_NFC_CONNECTION_HANDOVER = 7,
    WCN_VALUE_DP_WFD_SERVICES = 8,
    WCN_VALUE_DP_OUTOFBAND_MIN = 16,
    WCN_VALUE_DP_OUTOFBAND_MAX = 65535,
};
pub const WCN_VALUE_DP_DEFAULT = WCN_VALUE_TYPE_DEVICE_PASSWORD_ID.WCN_VALUE_DP_DEFAULT;
pub const WCN_VALUE_DP_USER_SPECIFIED = WCN_VALUE_TYPE_DEVICE_PASSWORD_ID.WCN_VALUE_DP_USER_SPECIFIED;
pub const WCN_VALUE_DP_MACHINE_SPECIFIED = WCN_VALUE_TYPE_DEVICE_PASSWORD_ID.WCN_VALUE_DP_MACHINE_SPECIFIED;
pub const WCN_VALUE_DP_REKEY = WCN_VALUE_TYPE_DEVICE_PASSWORD_ID.WCN_VALUE_DP_REKEY;
pub const WCN_VALUE_DP_PUSHBUTTON = WCN_VALUE_TYPE_DEVICE_PASSWORD_ID.WCN_VALUE_DP_PUSHBUTTON;
pub const WCN_VALUE_DP_REGISTRAR_SPECIFIED = WCN_VALUE_TYPE_DEVICE_PASSWORD_ID.WCN_VALUE_DP_REGISTRAR_SPECIFIED;
pub const WCN_VALUE_DP_NFC_CONNECTION_HANDOVER = WCN_VALUE_TYPE_DEVICE_PASSWORD_ID.WCN_VALUE_DP_NFC_CONNECTION_HANDOVER;
pub const WCN_VALUE_DP_WFD_SERVICES = WCN_VALUE_TYPE_DEVICE_PASSWORD_ID.WCN_VALUE_DP_WFD_SERVICES;
pub const WCN_VALUE_DP_OUTOFBAND_MIN = WCN_VALUE_TYPE_DEVICE_PASSWORD_ID.WCN_VALUE_DP_OUTOFBAND_MIN;
pub const WCN_VALUE_DP_OUTOFBAND_MAX = WCN_VALUE_TYPE_DEVICE_PASSWORD_ID.WCN_VALUE_DP_OUTOFBAND_MAX;

pub const WCN_VALUE_TYPE_ENCRYPTION_TYPE = extern enum(i32) {
    WCN_VALUE_ET_NONE = 1,
    WCN_VALUE_ET_WEP = 2,
    WCN_VALUE_ET_TKIP = 4,
    WCN_VALUE_ET_AES = 8,
    WCN_VALUE_ET_TKIP_AES_MIXED = 12,
};
pub const WCN_VALUE_ET_NONE = WCN_VALUE_TYPE_ENCRYPTION_TYPE.WCN_VALUE_ET_NONE;
pub const WCN_VALUE_ET_WEP = WCN_VALUE_TYPE_ENCRYPTION_TYPE.WCN_VALUE_ET_WEP;
pub const WCN_VALUE_ET_TKIP = WCN_VALUE_TYPE_ENCRYPTION_TYPE.WCN_VALUE_ET_TKIP;
pub const WCN_VALUE_ET_AES = WCN_VALUE_TYPE_ENCRYPTION_TYPE.WCN_VALUE_ET_AES;
pub const WCN_VALUE_ET_TKIP_AES_MIXED = WCN_VALUE_TYPE_ENCRYPTION_TYPE.WCN_VALUE_ET_TKIP_AES_MIXED;

pub const WCN_VALUE_TYPE_MESSAGE_TYPE = extern enum(i32) {
    WCN_VALUE_MT_BEACON = 1,
    WCN_VALUE_MT_PROBE_REQUEST = 2,
    WCN_VALUE_MT_PROBE_RESPONSE = 3,
    WCN_VALUE_MT_M1 = 4,
    WCN_VALUE_MT_M2 = 5,
    WCN_VALUE_MT_M2D = 6,
    WCN_VALUE_MT_M3 = 7,
    WCN_VALUE_MT_M4 = 8,
    WCN_VALUE_MT_M5 = 9,
    WCN_VALUE_MT_M6 = 10,
    WCN_VALUE_MT_M7 = 11,
    WCN_VALUE_MT_M8 = 12,
    WCN_VALUE_MT_ACK = 13,
    WCN_VALUE_MT_NACK = 14,
    WCN_VALUE_MT_DONE = 15,
};
pub const WCN_VALUE_MT_BEACON = WCN_VALUE_TYPE_MESSAGE_TYPE.WCN_VALUE_MT_BEACON;
pub const WCN_VALUE_MT_PROBE_REQUEST = WCN_VALUE_TYPE_MESSAGE_TYPE.WCN_VALUE_MT_PROBE_REQUEST;
pub const WCN_VALUE_MT_PROBE_RESPONSE = WCN_VALUE_TYPE_MESSAGE_TYPE.WCN_VALUE_MT_PROBE_RESPONSE;
pub const WCN_VALUE_MT_M1 = WCN_VALUE_TYPE_MESSAGE_TYPE.WCN_VALUE_MT_M1;
pub const WCN_VALUE_MT_M2 = WCN_VALUE_TYPE_MESSAGE_TYPE.WCN_VALUE_MT_M2;
pub const WCN_VALUE_MT_M2D = WCN_VALUE_TYPE_MESSAGE_TYPE.WCN_VALUE_MT_M2D;
pub const WCN_VALUE_MT_M3 = WCN_VALUE_TYPE_MESSAGE_TYPE.WCN_VALUE_MT_M3;
pub const WCN_VALUE_MT_M4 = WCN_VALUE_TYPE_MESSAGE_TYPE.WCN_VALUE_MT_M4;
pub const WCN_VALUE_MT_M5 = WCN_VALUE_TYPE_MESSAGE_TYPE.WCN_VALUE_MT_M5;
pub const WCN_VALUE_MT_M6 = WCN_VALUE_TYPE_MESSAGE_TYPE.WCN_VALUE_MT_M6;
pub const WCN_VALUE_MT_M7 = WCN_VALUE_TYPE_MESSAGE_TYPE.WCN_VALUE_MT_M7;
pub const WCN_VALUE_MT_M8 = WCN_VALUE_TYPE_MESSAGE_TYPE.WCN_VALUE_MT_M8;
pub const WCN_VALUE_MT_ACK = WCN_VALUE_TYPE_MESSAGE_TYPE.WCN_VALUE_MT_ACK;
pub const WCN_VALUE_MT_NACK = WCN_VALUE_TYPE_MESSAGE_TYPE.WCN_VALUE_MT_NACK;
pub const WCN_VALUE_MT_DONE = WCN_VALUE_TYPE_MESSAGE_TYPE.WCN_VALUE_MT_DONE;

pub const WCN_VALUE_TYPE_REQUEST_TYPE = extern enum(i32) {
    WCN_VALUE_ReqT_ENROLLEE_INFO = 0,
    WCN_VALUE_ReqT_ENROLLEE_OPEN_1X = 1,
    WCN_VALUE_ReqT_REGISTRAR = 2,
    WCN_VALUE_ReqT_MANAGER_REGISTRAR = 3,
};
pub const WCN_VALUE_ReqT_ENROLLEE_INFO = WCN_VALUE_TYPE_REQUEST_TYPE.WCN_VALUE_ReqT_ENROLLEE_INFO;
pub const WCN_VALUE_ReqT_ENROLLEE_OPEN_1X = WCN_VALUE_TYPE_REQUEST_TYPE.WCN_VALUE_ReqT_ENROLLEE_OPEN_1X;
pub const WCN_VALUE_ReqT_REGISTRAR = WCN_VALUE_TYPE_REQUEST_TYPE.WCN_VALUE_ReqT_REGISTRAR;
pub const WCN_VALUE_ReqT_MANAGER_REGISTRAR = WCN_VALUE_TYPE_REQUEST_TYPE.WCN_VALUE_ReqT_MANAGER_REGISTRAR;

pub const WCN_VALUE_TYPE_RESPONSE_TYPE = extern enum(i32) {
    WCN_VALUE_RspT_ENROLLEE_INFO = 0,
    WCN_VALUE_RspT_ENROLLEE_OPEN_1X = 1,
    WCN_VALUE_RspT_REGISTRAR = 2,
    WCN_VALUE_RspT_AP = 3,
};
pub const WCN_VALUE_RspT_ENROLLEE_INFO = WCN_VALUE_TYPE_RESPONSE_TYPE.WCN_VALUE_RspT_ENROLLEE_INFO;
pub const WCN_VALUE_RspT_ENROLLEE_OPEN_1X = WCN_VALUE_TYPE_RESPONSE_TYPE.WCN_VALUE_RspT_ENROLLEE_OPEN_1X;
pub const WCN_VALUE_RspT_REGISTRAR = WCN_VALUE_TYPE_RESPONSE_TYPE.WCN_VALUE_RspT_REGISTRAR;
pub const WCN_VALUE_RspT_AP = WCN_VALUE_TYPE_RESPONSE_TYPE.WCN_VALUE_RspT_AP;

pub const WCN_VALUE_TYPE_RF_BANDS = extern enum(i32) {
    WCN_VALUE_RB_24GHZ = 1,
    WCN_VALUE_RB_50GHZ = 2,
};
pub const WCN_VALUE_RB_24GHZ = WCN_VALUE_TYPE_RF_BANDS.WCN_VALUE_RB_24GHZ;
pub const WCN_VALUE_RB_50GHZ = WCN_VALUE_TYPE_RF_BANDS.WCN_VALUE_RB_50GHZ;

pub const WCN_VALUE_TYPE_WI_FI_PROTECTED_SETUP_STATE = extern enum(i32) {
    WCN_VALUE_SS_RESERVED00 = 0,
    WCN_VALUE_SS_NOT_CONFIGURED = 1,
    WCN_VALUE_SS_CONFIGURED = 2,
};
pub const WCN_VALUE_SS_RESERVED00 = WCN_VALUE_TYPE_WI_FI_PROTECTED_SETUP_STATE.WCN_VALUE_SS_RESERVED00;
pub const WCN_VALUE_SS_NOT_CONFIGURED = WCN_VALUE_TYPE_WI_FI_PROTECTED_SETUP_STATE.WCN_VALUE_SS_NOT_CONFIGURED;
pub const WCN_VALUE_SS_CONFIGURED = WCN_VALUE_TYPE_WI_FI_PROTECTED_SETUP_STATE.WCN_VALUE_SS_CONFIGURED;

pub const WCN_VALUE_TYPE_PRIMARY_DEVICE_TYPE = extern struct {
    Category: u16,
    SubCategoryOUI: u32,
    SubCategory: u16,
};

const CLSID_WCNDeviceObject_Value = @import("../zig.zig").Guid.initString("C100BEA7-D33A-4A4B-BF23-BBEF4663D017");
pub const CLSID_WCNDeviceObject = &CLSID_WCNDeviceObject_Value;

pub const WCN_PASSWORD_TYPE = extern enum(i32) {
    PUSH_BUTTON = 0,
    PIN = 1,
    PIN_REGISTRAR_SPECIFIED = 2,
    OOB_SPECIFIED = 3,
    WFDS = 4,
};
pub const WCN_PASSWORD_TYPE_PUSH_BUTTON = WCN_PASSWORD_TYPE.PUSH_BUTTON;
pub const WCN_PASSWORD_TYPE_PIN = WCN_PASSWORD_TYPE.PIN;
pub const WCN_PASSWORD_TYPE_PIN_REGISTRAR_SPECIFIED = WCN_PASSWORD_TYPE.PIN_REGISTRAR_SPECIFIED;
pub const WCN_PASSWORD_TYPE_OOB_SPECIFIED = WCN_PASSWORD_TYPE.OOB_SPECIFIED;
pub const WCN_PASSWORD_TYPE_WFDS = WCN_PASSWORD_TYPE.WFDS;

pub const WCN_SESSION_STATUS = extern enum(i32) {
    SUCCESS = 0,
    FAILURE_GENERIC = 1,
    FAILURE_TIMEOUT = 2,
};
pub const WCN_SESSION_STATUS_SUCCESS = WCN_SESSION_STATUS.SUCCESS;
pub const WCN_SESSION_STATUS_FAILURE_GENERIC = WCN_SESSION_STATUS.FAILURE_GENERIC;
pub const WCN_SESSION_STATUS_FAILURE_TIMEOUT = WCN_SESSION_STATUS.FAILURE_TIMEOUT;

pub const WCN_VENDOR_EXTENSION_SPEC = extern struct {
    VendorId: u32,
    SubType: u32,
    Index: u32,
    Flags: u32,
};

const IID_IWCNDevice_Value = @import("../zig.zig").Guid.initString("C100BE9C-D33A-4A4B-BF23-BBEF4663D017");
pub const IID_IWCNDevice = &IID_IWCNDevice_Value;
pub const IWCNDevice = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetPassword: fn(
            self: *const IWCNDevice,
            Type: WCN_PASSWORD_TYPE,
            dwPasswordLength: u32,
            pbPassword: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Connect: fn(
            self: *const IWCNDevice,
            pNotify: ?*IWCNConnectNotify,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttribute: fn(
            self: *const IWCNDevice,
            AttributeType: WCN_ATTRIBUTE_TYPE,
            dwMaxBufferSize: u32,
            pbBuffer: [*:0]u8,
            pdwBufferUsed: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIntegerAttribute: fn(
            self: *const IWCNDevice,
            AttributeType: WCN_ATTRIBUTE_TYPE,
            puInteger: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringAttribute: fn(
            self: *const IWCNDevice,
            AttributeType: WCN_ATTRIBUTE_TYPE,
            cchMaxString: u32,
            wszString: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetworkProfile: fn(
            self: *const IWCNDevice,
            cchMaxStringLength: u32,
            wszProfile: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNetworkProfile: fn(
            self: *const IWCNDevice,
            pszProfileXml: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVendorExtension: fn(
            self: *const IWCNDevice,
            pVendorExtSpec: *const WCN_VENDOR_EXTENSION_SPEC,
            dwMaxBufferSize: u32,
            pbBuffer: [*:0]u8,
            pdwBufferUsed: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVendorExtension: fn(
            self: *const IWCNDevice,
            pVendorExtSpec: *const WCN_VENDOR_EXTENSION_SPEC,
            cbBuffer: u32,
            pbBuffer: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: fn(
            self: *const IWCNDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNFCPasswordParams: fn(
            self: *const IWCNDevice,
            Type: WCN_PASSWORD_TYPE,
            dwOOBPasswordID: u32,
            dwPasswordLength: u32,
            pbPassword: ?[*:0]const u8,
            dwRemotePublicKeyHashLength: u32,
            pbRemotePublicKeyHash: ?[*:0]const u8,
            dwDHKeyBlobLength: u32,
            pbDHKeyBlob: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCNDevice_SetPassword(self: *const T, Type: WCN_PASSWORD_TYPE, dwPasswordLength: u32, pbPassword: [*:0]const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCNDevice.VTable, self.vtable).SetPassword(@ptrCast(*const IWCNDevice, self), Type, dwPasswordLength, pbPassword);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCNDevice_Connect(self: *const T, pNotify: ?*IWCNConnectNotify) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCNDevice.VTable, self.vtable).Connect(@ptrCast(*const IWCNDevice, self), pNotify);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCNDevice_GetAttribute(self: *const T, AttributeType: WCN_ATTRIBUTE_TYPE, dwMaxBufferSize: u32, pbBuffer: [*:0]u8, pdwBufferUsed: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCNDevice.VTable, self.vtable).GetAttribute(@ptrCast(*const IWCNDevice, self), AttributeType, dwMaxBufferSize, pbBuffer, pdwBufferUsed);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCNDevice_GetIntegerAttribute(self: *const T, AttributeType: WCN_ATTRIBUTE_TYPE, puInteger: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCNDevice.VTable, self.vtable).GetIntegerAttribute(@ptrCast(*const IWCNDevice, self), AttributeType, puInteger);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCNDevice_GetStringAttribute(self: *const T, AttributeType: WCN_ATTRIBUTE_TYPE, cchMaxString: u32, wszString: [*:0]u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCNDevice.VTable, self.vtable).GetStringAttribute(@ptrCast(*const IWCNDevice, self), AttributeType, cchMaxString, wszString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCNDevice_GetNetworkProfile(self: *const T, cchMaxStringLength: u32, wszProfile: [*:0]u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCNDevice.VTable, self.vtable).GetNetworkProfile(@ptrCast(*const IWCNDevice, self), cchMaxStringLength, wszProfile);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCNDevice_SetNetworkProfile(self: *const T, pszProfileXml: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCNDevice.VTable, self.vtable).SetNetworkProfile(@ptrCast(*const IWCNDevice, self), pszProfileXml);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCNDevice_GetVendorExtension(self: *const T, pVendorExtSpec: *const WCN_VENDOR_EXTENSION_SPEC, dwMaxBufferSize: u32, pbBuffer: [*:0]u8, pdwBufferUsed: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCNDevice.VTable, self.vtable).GetVendorExtension(@ptrCast(*const IWCNDevice, self), pVendorExtSpec, dwMaxBufferSize, pbBuffer, pdwBufferUsed);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCNDevice_SetVendorExtension(self: *const T, pVendorExtSpec: *const WCN_VENDOR_EXTENSION_SPEC, cbBuffer: u32, pbBuffer: [*:0]const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCNDevice.VTable, self.vtable).SetVendorExtension(@ptrCast(*const IWCNDevice, self), pVendorExtSpec, cbBuffer, pbBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCNDevice_Unadvise(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCNDevice.VTable, self.vtable).Unadvise(@ptrCast(*const IWCNDevice, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCNDevice_SetNFCPasswordParams(self: *const T, Type: WCN_PASSWORD_TYPE, dwOOBPasswordID: u32, dwPasswordLength: u32, pbPassword: ?[*:0]const u8, dwRemotePublicKeyHashLength: u32, pbRemotePublicKeyHash: ?[*:0]const u8, dwDHKeyBlobLength: u32, pbDHKeyBlob: ?[*:0]const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCNDevice.VTable, self.vtable).SetNFCPasswordParams(@ptrCast(*const IWCNDevice, self), Type, dwOOBPasswordID, dwPasswordLength, pbPassword, dwRemotePublicKeyHashLength, pbRemotePublicKeyHash, dwDHKeyBlobLength, pbDHKeyBlob);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWCNConnectNotify_Value = @import("../zig.zig").Guid.initString("C100BE9F-D33A-4A4B-BF23-BBEF4663D017");
pub const IID_IWCNConnectNotify = &IID_IWCNConnectNotify_Value;
pub const IWCNConnectNotify = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConnectSucceeded: fn(
            self: *const IWCNConnectNotify,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConnectFailed: fn(
            self: *const IWCNConnectNotify,
            hrFailure: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCNConnectNotify_ConnectSucceeded(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCNConnectNotify.VTable, self.vtable).ConnectSucceeded(@ptrCast(*const IWCNConnectNotify, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCNConnectNotify_ConnectFailed(self: *const T, hrFailure: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCNConnectNotify.VTable, self.vtable).ConnectFailed(@ptrCast(*const IWCNConnectNotify, self), hrFailure);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (3)
//--------------------------------------------------------------------------------
const PWSTR = @import("system_services.zig").PWSTR;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;

test {
    const constant_export_count = 0;
    const type_export_count = 21;
    const enum_value_export_count = 202;
    const com_iface_id_export_count = 2;
    const com_class_id_export_count = 1;
    const func_export_count = 0;
    const unicode_alias_count = 0;
    const import_count = 3;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

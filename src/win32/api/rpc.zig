//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (2)
//--------------------------------------------------------------------------------
pub const MidlInterceptionInfoVersionOne : i32 = 1;
pub const MidlWinrtTypeSerializationInfoVersionOne : i32 = 1;

//--------------------------------------------------------------------------------
// Section: Types (161)
//--------------------------------------------------------------------------------
pub const NDR_SCONTEXT_1 = extern struct {
    pad: [2]*c_void,
    userContext: *c_void,
};

pub const RPC_BINDING_VECTOR = extern struct {
    Count: u32,
    BindingH: [1]*c_void,
};

pub const UUID_VECTOR = extern struct {
    Count: u32,
    Uuid: [1]*Guid,
};

pub const RPC_IF_ID = extern struct {
    Uuid: Guid,
    VersMajor: u16,
    VersMinor: u16,
};

pub const RPC_PROTSEQ_VECTORA = extern struct {
    Count: u32,
    Protseq: [1]*u8,
};

pub const RPC_PROTSEQ_VECTORW = extern struct {
    Count: u32,
    Protseq: [1]*u16,
};

pub const RPC_POLICY = extern struct {
    Length: u32,
    EndpointFlags: u32,
    NICFlags: u32,
};

pub const RPC_OBJECT_INQ_FN = fn(
    ObjectUuid: *Guid,
    TypeUuid: *Guid,
    Status: *i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const RPC_IF_CALLBACK_FN = fn(
    InterfaceUuid: *c_void,
    Context: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const RPC_SECURITY_CALLBACK_FN = fn(
    Context: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const RPC_STATS_VECTOR = extern struct {
    Count: u32,
    Stats: [1]u32,
};

pub const RPC_IF_ID_VECTOR = extern struct {
    Count: u32,
    IfId: [1]*RPC_IF_ID,
};

pub const RPC_SECURITY_QOS = extern struct {
    Version: u32,
    Capabilities: u32,
    IdentityTracking: u32,
    ImpersonationType: u32,
};

pub const RPC_HTTP_TRANSPORT_CREDENTIALS_W = extern struct {
    TransportCredentials: *SEC_WINNT_AUTH_IDENTITY_W,
    Flags: u32,
    AuthenticationTarget: u32,
    NumberOfAuthnSchemes: u32,
    AuthnSchemes: *u32,
    ServerCertificateSubject: *u16,
};

pub const RPC_HTTP_TRANSPORT_CREDENTIALS_A = extern struct {
    TransportCredentials: *SEC_WINNT_AUTH_IDENTITY_A,
    Flags: u32,
    AuthenticationTarget: u32,
    NumberOfAuthnSchemes: u32,
    AuthnSchemes: *u32,
    ServerCertificateSubject: *u8,
};

pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W = extern struct {
    TransportCredentials: *SEC_WINNT_AUTH_IDENTITY_W,
    Flags: u32,
    AuthenticationTarget: u32,
    NumberOfAuthnSchemes: u32,
    AuthnSchemes: *u32,
    ServerCertificateSubject: *u16,
    ProxyCredentials: *SEC_WINNT_AUTH_IDENTITY_W,
    NumberOfProxyAuthnSchemes: u32,
    ProxyAuthnSchemes: *u32,
};

pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A = extern struct {
    TransportCredentials: *SEC_WINNT_AUTH_IDENTITY_A,
    Flags: u32,
    AuthenticationTarget: u32,
    NumberOfAuthnSchemes: u32,
    AuthnSchemes: *u32,
    ServerCertificateSubject: *u8,
    ProxyCredentials: *SEC_WINNT_AUTH_IDENTITY_A,
    NumberOfProxyAuthnSchemes: u32,
    ProxyAuthnSchemes: *u32,
};

pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W = extern struct {
    TransportCredentials: *c_void,
    Flags: u32,
    AuthenticationTarget: u32,
    NumberOfAuthnSchemes: u32,
    AuthnSchemes: *u32,
    ServerCertificateSubject: *u16,
    ProxyCredentials: *c_void,
    NumberOfProxyAuthnSchemes: u32,
    ProxyAuthnSchemes: *u32,
};

pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A = extern struct {
    TransportCredentials: *c_void,
    Flags: u32,
    AuthenticationTarget: u32,
    NumberOfAuthnSchemes: u32,
    AuthnSchemes: *u32,
    ServerCertificateSubject: *u8,
    ProxyCredentials: *c_void,
    NumberOfProxyAuthnSchemes: u32,
    ProxyAuthnSchemes: *u32,
};

pub const RPC_SECURITY_QOS_V2_W = extern struct {
    Version: u32,
    Capabilities: u32,
    IdentityTracking: u32,
    ImpersonationType: u32,
    AdditionalSecurityInfoType: u32,
    u: RPC_SECURITY_QOS_V2_W._u_e__Union,
    const _u_e__Union = u32; // TODO: generate this nested type!
};

pub const RPC_SECURITY_QOS_V2_A = extern struct {
    Version: u32,
    Capabilities: u32,
    IdentityTracking: u32,
    ImpersonationType: u32,
    AdditionalSecurityInfoType: u32,
    u: RPC_SECURITY_QOS_V2_A._u_e__Union,
    const _u_e__Union = u32; // TODO: generate this nested type!
};

pub const RPC_SECURITY_QOS_V3_W = extern struct {
    Version: u32,
    Capabilities: u32,
    IdentityTracking: u32,
    ImpersonationType: u32,
    AdditionalSecurityInfoType: u32,
    u: RPC_SECURITY_QOS_V3_W._u_e__Union,
    Sid: *c_void,
    const _u_e__Union = u32; // TODO: generate this nested type!
};

pub const RPC_SECURITY_QOS_V3_A = extern struct {
    Version: u32,
    Capabilities: u32,
    IdentityTracking: u32,
    ImpersonationType: u32,
    AdditionalSecurityInfoType: u32,
    u: RPC_SECURITY_QOS_V3_A._u_e__Union,
    Sid: *c_void,
    const _u_e__Union = u32; // TODO: generate this nested type!
};

pub const RPC_SECURITY_QOS_V4_W = extern struct {
    Version: u32,
    Capabilities: u32,
    IdentityTracking: u32,
    ImpersonationType: u32,
    AdditionalSecurityInfoType: u32,
    u: RPC_SECURITY_QOS_V4_W._u_e__Union,
    Sid: *c_void,
    EffectiveOnly: u32,
    const _u_e__Union = u32; // TODO: generate this nested type!
};

pub const RPC_SECURITY_QOS_V4_A = extern struct {
    Version: u32,
    Capabilities: u32,
    IdentityTracking: u32,
    ImpersonationType: u32,
    AdditionalSecurityInfoType: u32,
    u: RPC_SECURITY_QOS_V4_A._u_e__Union,
    Sid: *c_void,
    EffectiveOnly: u32,
    const _u_e__Union = u32; // TODO: generate this nested type!
};

pub const RPC_SECURITY_QOS_V5_W = extern struct {
    Version: u32,
    Capabilities: u32,
    IdentityTracking: u32,
    ImpersonationType: u32,
    AdditionalSecurityInfoType: u32,
    u: RPC_SECURITY_QOS_V5_W._u_e__Union,
    Sid: *c_void,
    EffectiveOnly: u32,
    ServerSecurityDescriptor: *c_void,
    const _u_e__Union = u32; // TODO: generate this nested type!
};

pub const RPC_SECURITY_QOS_V5_A = extern struct {
    Version: u32,
    Capabilities: u32,
    IdentityTracking: u32,
    ImpersonationType: u32,
    AdditionalSecurityInfoType: u32,
    u: RPC_SECURITY_QOS_V5_A._u_e__Union,
    Sid: *c_void,
    EffectiveOnly: u32,
    ServerSecurityDescriptor: *c_void,
    const _u_e__Union = u32; // TODO: generate this nested type!
};

pub const RPC_BINDING_HANDLE_TEMPLATE_V1_W = extern struct {
    Version: u32,
    Flags: u32,
    ProtocolSequence: u32,
    NetworkAddress: *u16,
    StringEndpoint: *u16,
    u1: RPC_BINDING_HANDLE_TEMPLATE_V1_W._u1_e__Union,
    ObjectUuid: Guid,
    const _u1_e__Union = u32; // TODO: generate this nested type!
};

pub const RPC_BINDING_HANDLE_TEMPLATE_V1_A = extern struct {
    Version: u32,
    Flags: u32,
    ProtocolSequence: u32,
    NetworkAddress: *u8,
    StringEndpoint: *u8,
    u1: RPC_BINDING_HANDLE_TEMPLATE_V1_A._u1_e__Union,
    ObjectUuid: Guid,
    const _u1_e__Union = u32; // TODO: generate this nested type!
};

pub const RPC_BINDING_HANDLE_SECURITY_V1_W = extern struct {
    Version: u32,
    ServerPrincName: *u16,
    AuthnLevel: u32,
    AuthnSvc: u32,
    AuthIdentity: *SEC_WINNT_AUTH_IDENTITY_W,
    SecurityQos: *RPC_SECURITY_QOS,
};

pub const RPC_BINDING_HANDLE_SECURITY_V1_A = extern struct {
    Version: u32,
    ServerPrincName: *u8,
    AuthnLevel: u32,
    AuthnSvc: u32,
    AuthIdentity: *SEC_WINNT_AUTH_IDENTITY_A,
    SecurityQos: *RPC_SECURITY_QOS,
};

pub const RPC_BINDING_HANDLE_OPTIONS_V1 = extern struct {
    Version: u32,
    Flags: u32,
    ComTimeout: u32,
    CallTimeout: u32,
};

pub const RPC_HTTP_REDIRECTOR_STAGE = extern enum(i32) {
    RPCHTTP_RS_REDIRECT = 1,
    RPCHTTP_RS_ACCESS_1 = 2,
    RPCHTTP_RS_SESSION = 3,
    RPCHTTP_RS_ACCESS_2 = 4,
    RPCHTTP_RS_INTERFACE = 5,
};
pub const RPCHTTP_RS_REDIRECT = RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_REDIRECT;
pub const RPCHTTP_RS_ACCESS_1 = RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_ACCESS_1;
pub const RPCHTTP_RS_SESSION = RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_SESSION;
pub const RPCHTTP_RS_ACCESS_2 = RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_ACCESS_2;
pub const RPCHTTP_RS_INTERFACE = RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_INTERFACE;

pub const RPC_NEW_HTTP_PROXY_CHANNEL = fn(
    RedirectorStage: RPC_HTTP_REDIRECTOR_STAGE,
    ServerName: *u16,
    ServerPort: *u16,
    RemoteUser: ?*u16,
    AuthType: ?*u16,
    ResourceUuid: *c_void,
    SessionId: *c_void,
    Interface: ?*c_void,
    Reserved: ?*c_void,
    Flags: u32,
    NewServerName: ?*?*u16,
    NewServerPort: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const RPC_HTTP_PROXY_FREE_STRING = fn(
    String: *u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub const RPC_AUTH_KEY_RETRIEVAL_FN = fn(
    Arg: *c_void,
    ServerPrincName: *u16,
    KeyVer: u32,
    Key: **c_void,
    Status: *i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const RPC_CLIENT_INFORMATION1 = extern struct {
    UserName: *u8,
    ComputerName: *u8,
    Privilege: u16,
    AuthFlags: u32,
};

pub const RPC_MGMT_AUTHORIZATION_FN = fn(
    ClientBinding: *c_void,
    RequestedMgmtOperation: u32,
    Status: *i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const RPC_ENDPOINT_TEMPLATEW = extern struct {
    Version: u32,
    ProtSeq: *u16,
    Endpoint: *u16,
    SecurityDescriptor: *c_void,
    Backlog: u32,
};

pub const RPC_ENDPOINT_TEMPLATEA = extern struct {
    Version: u32,
    ProtSeq: *u8,
    Endpoint: *u8,
    SecurityDescriptor: *c_void,
    Backlog: u32,
};

pub const RPC_INTERFACE_TEMPLATEA = extern struct {
    Version: u32,
    IfSpec: *c_void,
    MgrTypeUuid: *Guid,
    MgrEpv: *c_void,
    Flags: u32,
    MaxCalls: u32,
    MaxRpcSize: u32,
    IfCallback: *RPC_IF_CALLBACK_FN,
    UuidVector: *UUID_VECTOR,
    Annotation: *u8,
    SecurityDescriptor: *c_void,
};

pub const RPC_INTERFACE_TEMPLATEW = extern struct {
    Version: u32,
    IfSpec: *c_void,
    MgrTypeUuid: *Guid,
    MgrEpv: *c_void,
    Flags: u32,
    MaxCalls: u32,
    MaxRpcSize: u32,
    IfCallback: *RPC_IF_CALLBACK_FN,
    UuidVector: *UUID_VECTOR,
    Annotation: *u16,
    SecurityDescriptor: *c_void,
};

pub const RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN = fn(
    IfGroup: *c_void,
    IdleCallbackContext: *c_void,
    IsGroupIdle: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const RPC_VERSION = extern struct {
    MajorVersion: u16,
    MinorVersion: u16,
};

pub const RPC_SYNTAX_IDENTIFIER = extern struct {
    SyntaxGUID: Guid,
    SyntaxVersion: RPC_VERSION,
};

pub const RPC_MESSAGE = extern struct {
    Handle: *c_void,
    DataRepresentation: u32,
    Buffer: *c_void,
    BufferLength: u32,
    ProcNum: u32,
    TransferSyntax: *RPC_SYNTAX_IDENTIFIER,
    RpcInterfaceInformation: *c_void,
    ReservedForRuntime: *c_void,
    ManagerEpv: *c_void,
    ImportContext: *c_void,
    RpcFlags: u32,
};

pub const RPC_FORWARD_FUNCTION = fn(
    InterfaceId: *Guid,
    InterfaceVersion: *RPC_VERSION,
    ObjectId: *Guid,
    Rpcpro: *u8,
    ppDestEndpoint: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const RPC_ADDRESS_CHANGE_TYPE = extern enum(i32) {
    PROTOCOL_NOT_LOADED = 1,
    PROTOCOL_LOADED = 2,
    PROTOCOL_ADDRESS_CHANGE = 3,
};
pub const PROTOCOL_NOT_LOADED = RPC_ADDRESS_CHANGE_TYPE.PROTOCOL_NOT_LOADED;
pub const PROTOCOL_LOADED = RPC_ADDRESS_CHANGE_TYPE.PROTOCOL_LOADED;
pub const PROTOCOL_ADDRESS_CHANGE = RPC_ADDRESS_CHANGE_TYPE.PROTOCOL_ADDRESS_CHANGE;

pub const RPC_ADDRESS_CHANGE_FN = fn(
    arg: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const RPC_DISPATCH_FUNCTION = fn(
    Message: *RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub const RPC_DISPATCH_TABLE = extern struct {
    DispatchTableCount: u32,
    DispatchTable: *RPC_DISPATCH_FUNCTION,
    Reserved: ?*c_void,
};

pub const RPC_PROTSEQ_ENDPOINT = extern struct {
    RpcProtocolSequence: *u8,
    Endpoint: *u8,
};

pub const RPC_SERVER_INTERFACE = extern struct {
    Length: u32,
    InterfaceId: RPC_SYNTAX_IDENTIFIER,
    TransferSyntax: RPC_SYNTAX_IDENTIFIER,
    DispatchTable: *RPC_DISPATCH_TABLE,
    RpcProtseqEndpointCount: u32,
    RpcProtseqEndpoint: *RPC_PROTSEQ_ENDPOINT,
    DefaultManagerEpv: *c_void,
    InterpreterInfo: *const c_void,
    Flags: u32,
};

pub const RPC_CLIENT_INTERFACE = extern struct {
    Length: u32,
    InterfaceId: RPC_SYNTAX_IDENTIFIER,
    TransferSyntax: RPC_SYNTAX_IDENTIFIER,
    DispatchTable: *RPC_DISPATCH_TABLE,
    RpcProtseqEndpointCount: u32,
    RpcProtseqEndpoint: *RPC_PROTSEQ_ENDPOINT,
    Reserved: ?*c_void,
    InterpreterInfo: *const c_void,
    Flags: u32,
};

pub const LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION = extern enum(i32) {
    MarshalDirectionMarshal = 0,
    MarshalDirectionUnmarshal = 1,
};
pub const MarshalDirectionMarshal = LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION.MarshalDirectionMarshal;
pub const MarshalDirectionUnmarshal = LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION.MarshalDirectionUnmarshal;

pub const PRPC_RUNDOWN = fn(
    AssociationContext: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const RPC_SEC_CONTEXT_KEY_INFO = extern struct {
    EncryptAlgorithm: u32,
    KeySize: u32,
    SignatureAlgorithm: u32,
};

pub const RPC_TRANSFER_SYNTAX = extern struct {
    Uuid: Guid,
    VersMajor: u16,
    VersMinor: u16,
};

pub const RPCLT_PDU_FILTER_FUNC = fn(
    Buffer: *c_void,
    BufferLength: u32,
    fDatagram: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const RPC_SETFILTER_FUNC = fn(
    pfnFilter: RPCLT_PDU_FILTER_FUNC,
) callconv(@import("std").os.windows.WINAPI) void;

pub const RPC_BLOCKING_FN = fn(
    hWnd: *c_void,
    Context: *c_void,
    hSyncEvent: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR = extern struct {
    BufferSize: u32,
    Buffer: *i8,
};

pub const RDR_CALLOUT_STATE = extern struct {
    LastError: i32,
    LastEEInfo: *c_void,
    LastCalledStage: RPC_HTTP_REDIRECTOR_STAGE,
    ServerName: *u16,
    ServerPort: *u16,
    RemoteUser: *u16,
    AuthType: *u16,
    ResourceTypePresent: u8,
    SessionIdPresent: u8,
    InterfacePresent: u8,
    ResourceType: Guid,
    SessionId: Guid,
    Interface: RPC_SYNTAX_IDENTIFIER,
    CertContext: *c_void,
};

pub const I_RpcProxyIsValidMachineFn = fn(
    Machine: *u16,
    DotMachine: *u16,
    PortNumber: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const I_RpcProxyGetClientAddressFn = fn(
    Context: *c_void,
    Buffer: *i8,
    BufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const I_RpcProxyGetConnectionTimeoutFn = fn(
    ConnectionTimeout: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const I_RpcPerformCalloutFn = fn(
    Context: *c_void,
    CallOutState: *RDR_CALLOUT_STATE,
    Stage: RPC_HTTP_REDIRECTOR_STAGE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const I_RpcFreeCalloutStateFn = fn(
    CallOutState: *RDR_CALLOUT_STATE,
) callconv(@import("std").os.windows.WINAPI) void;

pub const I_RpcProxyGetClientSessionAndResourceUUID = fn(
    Context: *c_void,
    SessionIdPresent: ?*i32,
    SessionId: ?*Guid,
    ResourceIdPresent: *i32,
    ResourceId: *Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const I_RpcProxyFilterIfFn = fn(
    Context: *c_void,
    IfUuid: *Guid,
    IfMajorVersion: u16,
    fAllow: *i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const RpcProxyPerfCounters = extern enum(i32) {
    RpcCurrentUniqueUser = 1,
    RpcBackEndConnectionAttempts = 2,
    RpcBackEndConnectionFailed = 3,
    RpcRequestsPerSecond = 4,
    RpcIncomingConnections = 5,
    RpcIncomingBandwidth = 6,
    RpcOutgoingBandwidth = 7,
    RpcAttemptedLbsDecisions = 8,
    RpcFailedLbsDecisions = 9,
    RpcAttemptedLbsMessages = 10,
    RpcFailedLbsMessages = 11,
    RpcLastCounter = 12,
};
pub const RpcCurrentUniqueUser = RpcProxyPerfCounters.RpcCurrentUniqueUser;
pub const RpcBackEndConnectionAttempts = RpcProxyPerfCounters.RpcBackEndConnectionAttempts;
pub const RpcBackEndConnectionFailed = RpcProxyPerfCounters.RpcBackEndConnectionFailed;
pub const RpcRequestsPerSecond = RpcProxyPerfCounters.RpcRequestsPerSecond;
pub const RpcIncomingConnections = RpcProxyPerfCounters.RpcIncomingConnections;
pub const RpcIncomingBandwidth = RpcProxyPerfCounters.RpcIncomingBandwidth;
pub const RpcOutgoingBandwidth = RpcProxyPerfCounters.RpcOutgoingBandwidth;
pub const RpcAttemptedLbsDecisions = RpcProxyPerfCounters.RpcAttemptedLbsDecisions;
pub const RpcFailedLbsDecisions = RpcProxyPerfCounters.RpcFailedLbsDecisions;
pub const RpcAttemptedLbsMessages = RpcProxyPerfCounters.RpcAttemptedLbsMessages;
pub const RpcFailedLbsMessages = RpcProxyPerfCounters.RpcFailedLbsMessages;
pub const RpcLastCounter = RpcProxyPerfCounters.RpcLastCounter;

pub const I_RpcProxyUpdatePerfCounterFn = fn(
    Counter: RpcProxyPerfCounters,
    ModifyTrend: i32,
    Size: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const I_RpcProxyUpdatePerfCounterBackendServerFn = fn(
    MachineName: *u16,
    IsConnectEvent: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const I_RpcProxyCallbackInterface = extern struct {
    IsValidMachineFn: I_RpcProxyIsValidMachineFn,
    GetClientAddressFn: I_RpcProxyGetClientAddressFn,
    GetConnectionTimeoutFn: I_RpcProxyGetConnectionTimeoutFn,
    PerformCalloutFn: I_RpcPerformCalloutFn,
    FreeCalloutStateFn: I_RpcFreeCalloutStateFn,
    GetClientSessionAndResourceUUIDFn: I_RpcProxyGetClientSessionAndResourceUUID,
    ProxyFilterIfFn: I_RpcProxyFilterIfFn,
    RpcProxyUpdatePerfCounterFn: I_RpcProxyUpdatePerfCounterFn,
    RpcProxyUpdatePerfCounterBackendServerFn: I_RpcProxyUpdatePerfCounterBackendServerFn,
};

pub const RPC_NOTIFICATION_TYPES = extern enum(i32) {
    RpcNotificationTypeNone = 0,
    RpcNotificationTypeEvent = 1,
    RpcNotificationTypeApc = 2,
    RpcNotificationTypeIoc = 3,
    RpcNotificationTypeHwnd = 4,
    RpcNotificationTypeCallback = 5,
};
pub const RpcNotificationTypeNone = RPC_NOTIFICATION_TYPES.RpcNotificationTypeNone;
pub const RpcNotificationTypeEvent = RPC_NOTIFICATION_TYPES.RpcNotificationTypeEvent;
pub const RpcNotificationTypeApc = RPC_NOTIFICATION_TYPES.RpcNotificationTypeApc;
pub const RpcNotificationTypeIoc = RPC_NOTIFICATION_TYPES.RpcNotificationTypeIoc;
pub const RpcNotificationTypeHwnd = RPC_NOTIFICATION_TYPES.RpcNotificationTypeHwnd;
pub const RpcNotificationTypeCallback = RPC_NOTIFICATION_TYPES.RpcNotificationTypeCallback;

pub const RPC_ASYNC_EVENT = extern enum(i32) {
    RpcCallComplete = 0,
    RpcSendComplete = 1,
    RpcReceiveComplete = 2,
    RpcClientDisconnect = 3,
    RpcClientCancel = 4,
};
pub const RpcCallComplete = RPC_ASYNC_EVENT.RpcCallComplete;
pub const RpcSendComplete = RPC_ASYNC_EVENT.RpcSendComplete;
pub const RpcReceiveComplete = RPC_ASYNC_EVENT.RpcReceiveComplete;
pub const RpcClientDisconnect = RPC_ASYNC_EVENT.RpcClientDisconnect;
pub const RpcClientCancel = RPC_ASYNC_EVENT.RpcClientCancel;

pub const RPCNOTIFICATION_ROUTINE = fn(
    pAsync: *RPC_ASYNC_STATE,
    Context: *c_void,
    Event: RPC_ASYNC_EVENT,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFN_RPCNOTIFICATION_ROUTINE = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const RPC_ASYNC_NOTIFICATION_INFO = u32; // TODO: implement StructOrUnion types?

pub const RPC_ASYNC_STATE = extern struct {
    Size: u32,
    Signature: u32,
    Lock: i32,
    Flags: u32,
    StubInfo: *c_void,
    UserInfo: *c_void,
    RuntimeInfo: *c_void,
    Event: RPC_ASYNC_EVENT,
    NotificationType: RPC_NOTIFICATION_TYPES,
    u: RPC_ASYNC_NOTIFICATION_INFO,
    Reserved: [4]?*c_void,
};

pub const ExtendedErrorParamTypes = extern enum(i32) {
    eeptAnsiString = 1,
    eeptUnicodeString = 2,
    eeptLongVal = 3,
    eeptShortVal = 4,
    eeptPointerVal = 5,
    eeptNone = 6,
    eeptBinary = 7,
};
pub const eeptAnsiString = ExtendedErrorParamTypes.eeptAnsiString;
pub const eeptUnicodeString = ExtendedErrorParamTypes.eeptUnicodeString;
pub const eeptLongVal = ExtendedErrorParamTypes.eeptLongVal;
pub const eeptShortVal = ExtendedErrorParamTypes.eeptShortVal;
pub const eeptPointerVal = ExtendedErrorParamTypes.eeptPointerVal;
pub const eeptNone = ExtendedErrorParamTypes.eeptNone;
pub const eeptBinary = ExtendedErrorParamTypes.eeptBinary;

pub const BinaryParam = extern struct {
    Buffer: *c_void,
    Size: i16,
};

pub const RPC_EE_INFO_PARAM = extern struct {
    ParameterType: ExtendedErrorParamTypes,
    u: RPC_EE_INFO_PARAM._u_e__Union,
    const _u_e__Union = u32; // TODO: generate this nested type!
};

pub const RPC_EXTENDED_ERROR_INFO = extern struct {
    Version: u32,
    ComputerName: PWSTR,
    ProcessID: u32,
    u: RPC_EXTENDED_ERROR_INFO._u_e__Union,
    GeneratingComponent: u32,
    Status: u32,
    DetectionLocation: u16,
    Flags: u16,
    NumberOfParameters: i32,
    Parameters: [4]RPC_EE_INFO_PARAM,
    const _u_e__Union = u32; // TODO: generate this nested type!
};

pub const RPC_ERROR_ENUM_HANDLE = extern struct {
    Signature: u32,
    CurrentPos: *c_void,
    Head: *c_void,
};

pub const RpcLocalAddressFormat = extern enum(i32) {
    rlafInvalid = 0,
    rlafIPv4 = 1,
    rlafIPv6 = 2,
};
pub const rlafInvalid = RpcLocalAddressFormat.rlafInvalid;
pub const rlafIPv4 = RpcLocalAddressFormat.rlafIPv4;
pub const rlafIPv6 = RpcLocalAddressFormat.rlafIPv6;

pub const RPC_CALL_LOCAL_ADDRESS_V1 = extern struct {
    Version: u32,
    Buffer: *c_void,
    BufferSize: u32,
    AddressFormat: RpcLocalAddressFormat,
};

pub const RPC_CALL_ATTRIBUTES_V1_W = extern struct {
    Version: u32,
    Flags: u32,
    ServerPrincipalNameBufferLength: u32,
    ServerPrincipalName: *u16,
    ClientPrincipalNameBufferLength: u32,
    ClientPrincipalName: *u16,
    AuthenticationLevel: u32,
    AuthenticationService: u32,
    NullSession: BOOL,
};

pub const RPC_CALL_ATTRIBUTES_V1_A = extern struct {
    Version: u32,
    Flags: u32,
    ServerPrincipalNameBufferLength: u32,
    ServerPrincipalName: *u8,
    ClientPrincipalNameBufferLength: u32,
    ClientPrincipalName: *u8,
    AuthenticationLevel: u32,
    AuthenticationService: u32,
    NullSession: BOOL,
};

pub const RpcCallType = extern enum(i32) {
    rctInvalid = 0,
    rctNormal = 1,
    rctTraining = 2,
    rctGuaranteed = 3,
};
pub const rctInvalid = RpcCallType.rctInvalid;
pub const rctNormal = RpcCallType.rctNormal;
pub const rctTraining = RpcCallType.rctTraining;
pub const rctGuaranteed = RpcCallType.rctGuaranteed;

pub const RpcCallClientLocality = extern enum(i32) {
    rcclInvalid = 0,
    rcclLocal = 1,
    rcclRemote = 2,
    rcclClientUnknownLocality = 3,
};
pub const rcclInvalid = RpcCallClientLocality.rcclInvalid;
pub const rcclLocal = RpcCallClientLocality.rcclLocal;
pub const rcclRemote = RpcCallClientLocality.rcclRemote;
pub const rcclClientUnknownLocality = RpcCallClientLocality.rcclClientUnknownLocality;

pub const RPC_CALL_ATTRIBUTES_V2_W = extern struct {
    Version: u32,
    Flags: u32,
    ServerPrincipalNameBufferLength: u32,
    ServerPrincipalName: *u16,
    ClientPrincipalNameBufferLength: u32,
    ClientPrincipalName: *u16,
    AuthenticationLevel: u32,
    AuthenticationService: u32,
    NullSession: BOOL,
    KernelModeCaller: BOOL,
    ProtocolSequence: u32,
    IsClientLocal: RpcCallClientLocality,
    ClientPID: HANDLE,
    CallStatus: u32,
    CallType: RpcCallType,
    CallLocalAddress: *RPC_CALL_LOCAL_ADDRESS_V1,
    OpNum: u16,
    InterfaceUuid: Guid,
};

pub const RPC_CALL_ATTRIBUTES_V2_A = extern struct {
    Version: u32,
    Flags: u32,
    ServerPrincipalNameBufferLength: u32,
    ServerPrincipalName: *u8,
    ClientPrincipalNameBufferLength: u32,
    ClientPrincipalName: *u8,
    AuthenticationLevel: u32,
    AuthenticationService: u32,
    NullSession: BOOL,
    KernelModeCaller: BOOL,
    ProtocolSequence: u32,
    IsClientLocal: u32,
    ClientPID: HANDLE,
    CallStatus: u32,
    CallType: RpcCallType,
    CallLocalAddress: *RPC_CALL_LOCAL_ADDRESS_V1,
    OpNum: u16,
    InterfaceUuid: Guid,
};

pub const RPC_CALL_ATTRIBUTES_V3_W = extern struct {
    Version: u32,
    Flags: u32,
    ServerPrincipalNameBufferLength: u32,
    ServerPrincipalName: *u16,
    ClientPrincipalNameBufferLength: u32,
    ClientPrincipalName: *u16,
    AuthenticationLevel: u32,
    AuthenticationService: u32,
    NullSession: BOOL,
    KernelModeCaller: BOOL,
    ProtocolSequence: u32,
    IsClientLocal: RpcCallClientLocality,
    ClientPID: HANDLE,
    CallStatus: u32,
    CallType: RpcCallType,
    CallLocalAddress: *RPC_CALL_LOCAL_ADDRESS_V1,
    OpNum: u16,
    InterfaceUuid: Guid,
    ClientIdentifierBufferLength: u32,
    ClientIdentifier: *u8,
};

pub const RPC_CALL_ATTRIBUTES_V3_A = extern struct {
    Version: u32,
    Flags: u32,
    ServerPrincipalNameBufferLength: u32,
    ServerPrincipalName: *u8,
    ClientPrincipalNameBufferLength: u32,
    ClientPrincipalName: *u8,
    AuthenticationLevel: u32,
    AuthenticationService: u32,
    NullSession: BOOL,
    KernelModeCaller: BOOL,
    ProtocolSequence: u32,
    IsClientLocal: u32,
    ClientPID: HANDLE,
    CallStatus: u32,
    CallType: RpcCallType,
    CallLocalAddress: *RPC_CALL_LOCAL_ADDRESS_V1,
    OpNum: u16,
    InterfaceUuid: Guid,
    ClientIdentifierBufferLength: u32,
    ClientIdentifier: *u8,
};

pub const RPC_NOTIFICATIONS = extern enum(i32) {
    RpcNotificationCallNone = 0,
    RpcNotificationClientDisconnect = 1,
    RpcNotificationCallCancel = 2,
};
pub const RpcNotificationCallNone = RPC_NOTIFICATIONS.RpcNotificationCallNone;
pub const RpcNotificationClientDisconnect = RPC_NOTIFICATIONS.RpcNotificationClientDisconnect;
pub const RpcNotificationCallCancel = RPC_NOTIFICATIONS.RpcNotificationCallCancel;

pub const __AnonymousRecord_rpcndr_L275_C9 = extern struct {
    pad: [2]*c_void,
    userContext: *c_void,
};

pub const NDR_RUNDOWN = fn(
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const NDR_NOTIFY_ROUTINE = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const NDR_NOTIFY2_ROUTINE = fn(
    flag: u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub const SCONTEXT_QUEUE = extern struct {
    NumberOfObjects: u32,
    ArrayOfObjects: **NDR_SCONTEXT_1,
};

pub const EXPR_EVAL = fn(
    param0: *MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub const ARRAY_INFO = extern struct {
    Dimension: i32,
    BufferConformanceMark: *u32,
    BufferVarianceMark: *u32,
    MaxCountArray: *u32,
    OffsetArray: *u32,
    ActualCountArray: *u32,
};

pub const _NDR_ASYNC_MESSAGE = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _NDR_CORRELATION_INFO = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const NDR_ALLOC_ALL_NODES_CONTEXT = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const NDR_POINTER_QUEUE_STATE = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _NDR_PROC_CONTEXT = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const MIDL_STUB_MESSAGE = extern struct {
    RpcMsg: *RPC_MESSAGE,
    Buffer: *u8,
    BufferStart: *u8,
    BufferEnd: *u8,
    BufferMark: *u8,
    BufferLength: u32,
    MemorySize: u32,
    Memory: *u8,
    IsClient: u8,
    Pad: u8,
    uFlags2: u16,
    ReuseBuffer: i32,
    pAllocAllNodesContext: *NDR_ALLOC_ALL_NODES_CONTEXT,
    pPointerQueueState: *NDR_POINTER_QUEUE_STATE,
    IgnoreEmbeddedPointers: i32,
    PointerBufferMark: *u8,
    CorrDespIncrement: u8,
    uFlags: u8,
    UniquePtrCount: u16,
    MaxCount: ?*c_void,
    Offset: u32,
    ActualCount: u32,
    pfnAllocate: ?*c_void,
    pfnFree: ?*c_void,
    StackTop: *u8,
    pPresentedType: *u8,
    pTransmitType: *u8,
    SavedHandle: *c_void,
    StubDesc: *const MIDL_STUB_DESC,
    FullPtrXlatTables: *FULL_PTR_XLAT_TABLES,
    FullPtrRefId: u32,
    PointerLength: u32,
    _bitfield: i32,
    dwDestContext: u32,
    pvDestContext: *c_void,
    SavedContextHandles: **NDR_SCONTEXT_1,
    ParamNumber: i32,
    pRpcChannelBuffer: *IRpcChannelBuffer,
    pArrayInfo: *ARRAY_INFO,
    SizePtrCountArray: *u32,
    SizePtrOffsetArray: *u32,
    SizePtrLengthArray: *u32,
    pArgQueue: *c_void,
    dwStubPhase: u32,
    LowStackMark: *c_void,
    pAsyncMsg: *_NDR_ASYNC_MESSAGE,
    pCorrInfo: *_NDR_CORRELATION_INFO,
    pCorrMemory: *u8,
    pMemoryList: *c_void,
    pCSInfo: ?*c_void,
    ConformanceMark: *u8,
    VarianceMark: *u8,
    Unused: ?*c_void,
    pContext: *_NDR_PROC_CONTEXT,
    ContextHandleHash: *c_void,
    pUserMarshalList: *c_void,
    Reserved51_3: ?*c_void,
    Reserved51_4: ?*c_void,
    Reserved51_5: ?*c_void,
};

pub const GENERIC_BINDING_ROUTINE = fn(
    param0: *c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const GENERIC_UNBIND_ROUTINE = fn(
    param0: *c_void,
    param1: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub const GENERIC_BINDING_ROUTINE_PAIR = extern struct {
    pfnBind: GENERIC_BINDING_ROUTINE,
    pfnUnbind: GENERIC_UNBIND_ROUTINE,
};

pub const __GENERIC_BINDING_INFO = extern struct {
    pObj: *c_void,
    Size: u32,
    pfnBind: GENERIC_BINDING_ROUTINE,
    pfnUnbind: GENERIC_UNBIND_ROUTINE,
};

pub const XMIT_HELPER_ROUTINE = fn(
    param0: *MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub const XMIT_ROUTINE_QUINTUPLE = extern struct {
    pfnTranslateToXmit: XMIT_HELPER_ROUTINE,
    pfnTranslateFromXmit: XMIT_HELPER_ROUTINE,
    pfnFreeXmit: XMIT_HELPER_ROUTINE,
    pfnFreeInst: XMIT_HELPER_ROUTINE,
};

pub const USER_MARSHAL_SIZING_ROUTINE = fn(
    param0: *u32,
    param1: u32,
    param2: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const USER_MARSHAL_MARSHALLING_ROUTINE = fn(
    param0: *u32,
    param1: *u8,
    param2: *c_void,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub const USER_MARSHAL_UNMARSHALLING_ROUTINE = fn(
    param0: *u32,
    param1: *u8,
    param2: *c_void,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub const USER_MARSHAL_FREEING_ROUTINE = fn(
    param0: *u32,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const USER_MARSHAL_ROUTINE_QUADRUPLE = extern struct {
    pfnBufferSize: USER_MARSHAL_SIZING_ROUTINE,
    pfnMarshall: USER_MARSHAL_MARSHALLING_ROUTINE,
    pfnUnmarshall: USER_MARSHAL_UNMARSHALLING_ROUTINE,
    pfnFree: USER_MARSHAL_FREEING_ROUTINE,
};

pub const USER_MARSHAL_CB_TYPE = extern enum(i32) {
    USER_MARSHAL_CB_BUFFER_SIZE = 0,
    USER_MARSHAL_CB_MARSHALL = 1,
    USER_MARSHAL_CB_UNMARSHALL = 2,
    USER_MARSHAL_CB_FREE = 3,
};
pub const USER_MARSHAL_CB_BUFFER_SIZE = USER_MARSHAL_CB_TYPE.USER_MARSHAL_CB_BUFFER_SIZE;
pub const USER_MARSHAL_CB_MARSHALL = USER_MARSHAL_CB_TYPE.USER_MARSHAL_CB_MARSHALL;
pub const USER_MARSHAL_CB_UNMARSHALL = USER_MARSHAL_CB_TYPE.USER_MARSHAL_CB_UNMARSHALL;
pub const USER_MARSHAL_CB_FREE = USER_MARSHAL_CB_TYPE.USER_MARSHAL_CB_FREE;

pub const USER_MARSHAL_CB = extern struct {
    Flags: u32,
    pStubMsg: *MIDL_STUB_MESSAGE,
    pReserve: *u8,
    Signature: u32,
    CBType: USER_MARSHAL_CB_TYPE,
    pFormat: *u8,
    pTypeFormat: *u8,
};

pub const MALLOC_FREE_STRUCT = extern struct {
    pfnAllocate: ?*c_void,
    pfnFree: ?*c_void,
};

pub const COMM_FAULT_OFFSETS = extern struct {
    CommOffset: i16,
    FaultOffset: i16,
};

pub const IDL_CS_CONVERT = extern enum(i32) {
    IDL_CS_NO_CONVERT = 0,
    IDL_CS_IN_PLACE_CONVERT = 1,
    IDL_CS_NEW_BUFFER_CONVERT = 2,
};
pub const IDL_CS_NO_CONVERT = IDL_CS_CONVERT.IDL_CS_NO_CONVERT;
pub const IDL_CS_IN_PLACE_CONVERT = IDL_CS_CONVERT.IDL_CS_IN_PLACE_CONVERT;
pub const IDL_CS_NEW_BUFFER_CONVERT = IDL_CS_CONVERT.IDL_CS_NEW_BUFFER_CONVERT;

pub const CS_TYPE_NET_SIZE_ROUTINE = fn(
    hBinding: *c_void,
    ulNetworkCodeSet: u32,
    ulLocalBufferSize: u32,
    conversionType: *IDL_CS_CONVERT,
    pulNetworkBufferSize: *u32,
    pStatus: *u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const CS_TYPE_LOCAL_SIZE_ROUTINE = fn(
    hBinding: *c_void,
    ulNetworkCodeSet: u32,
    ulNetworkBufferSize: u32,
    conversionType: *IDL_CS_CONVERT,
    pulLocalBufferSize: *u32,
    pStatus: *u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const CS_TYPE_TO_NETCS_ROUTINE = fn(
    hBinding: *c_void,
    ulNetworkCodeSet: u32,
    pLocalData: *c_void,
    ulLocalDataLength: u32,
    pNetworkData: *u8,
    pulNetworkDataLength: *u32,
    pStatus: *u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const CS_TYPE_FROM_NETCS_ROUTINE = fn(
    hBinding: *c_void,
    ulNetworkCodeSet: u32,
    pNetworkData: *u8,
    ulNetworkDataLength: u32,
    ulLocalBufferSize: u32,
    pLocalData: *c_void,
    pulLocalDataLength: *u32,
    pStatus: *u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const CS_TAG_GETTING_ROUTINE = fn(
    hBinding: *c_void,
    fServerSide: i32,
    pulSendingTag: *u32,
    pulDesiredReceivingTag: *u32,
    pulReceivingTag: *u32,
    pStatus: *u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const NDR_CS_SIZE_CONVERT_ROUTINES = extern struct {
    pfnNetSize: CS_TYPE_NET_SIZE_ROUTINE,
    pfnToNetCs: CS_TYPE_TO_NETCS_ROUTINE,
    pfnLocalSize: CS_TYPE_LOCAL_SIZE_ROUTINE,
    pfnFromNetCs: CS_TYPE_FROM_NETCS_ROUTINE,
};

pub const NDR_CS_ROUTINES = extern struct {
    pSizeConvertRoutines: *NDR_CS_SIZE_CONVERT_ROUTINES,
    pTagGettingRoutines: *CS_TAG_GETTING_ROUTINE,
};

pub const NDR_EXPR_DESC = extern struct {
    pOffset: *const u16,
    pFormatExpr: *u8,
};

pub const MIDL_STUB_DESC = extern struct {
    RpcInterfaceInformation: *c_void,
    pfnAllocate: ?*c_void,
    pfnFree: ?*c_void,
    IMPLICIT_HANDLE_INFO: MIDL_STUB_DESC._IMPLICIT_HANDLE_INFO_e__Union,
    apfnNdrRundownRoutines: *const NDR_RUNDOWN,
    aGenericBindingRoutinePairs: *const GENERIC_BINDING_ROUTINE_PAIR,
    apfnExprEval: *const EXPR_EVAL,
    aXmitQuintuple: *const XMIT_ROUTINE_QUINTUPLE,
    pFormatTypes: *const u8,
    fCheckBounds: i32,
    Version: u32,
    pMallocFreeStruct: *MALLOC_FREE_STRUCT,
    MIDLVersion: i32,
    CommFaultOffsets: *const COMM_FAULT_OFFSETS,
    aUserMarshalQuadruple: *const USER_MARSHAL_ROUTINE_QUADRUPLE,
    NotifyRoutineTable: *const NDR_NOTIFY_ROUTINE,
    mFlags: ?*c_void,
    CsRoutineTables: *const NDR_CS_ROUTINES,
    ProxyServerInfo: *c_void,
    pExprInfo: *const NDR_EXPR_DESC,
    const _IMPLICIT_HANDLE_INFO_e__Union = u32; // TODO: generate this nested type!
};

pub const MIDL_FORMAT_STRING = extern struct {
    Pad: i16,
    Format: u8,
};

pub const STUB_THUNK = fn(
    param0: *MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub const SERVER_ROUTINE = fn(
) callconv(@import("std").os.windows.WINAPI) i32;

pub const MIDL_METHOD_PROPERTY = extern struct {
    Id: u32,
    Value: ?*c_void,
};

pub const MIDL_METHOD_PROPERTY_MAP = extern struct {
    Count: u32,
    Properties: *const MIDL_METHOD_PROPERTY,
};

pub const MIDL_INTERFACE_METHOD_PROPERTIES = extern struct {
    MethodCount: u16,
    MethodProperties: *const *const MIDL_METHOD_PROPERTY_MAP,
};

pub const _MIDL_SERVER_INFO_ = extern struct {
    pStubDesc: *MIDL_STUB_DESC,
    DispatchTable: *const SERVER_ROUTINE,
    ProcString: *u8,
    FmtStringOffset: *const u16,
    ThunkTable: *const STUB_THUNK,
    pTransferSyntax: *RPC_SYNTAX_IDENTIFIER,
    nCount: ?*c_void,
    pSyntaxInfo: *MIDL_SYNTAX_INFO,
};

pub const MIDL_STUBLESS_PROXY_INFO = extern struct {
    pStubDesc: *MIDL_STUB_DESC,
    ProcFormatString: *u8,
    FormatStringOffset: *const u16,
    pTransferSyntax: *RPC_SYNTAX_IDENTIFIER,
    nCount: ?*c_void,
    pSyntaxInfo: *MIDL_SYNTAX_INFO,
};

pub const MIDL_SYNTAX_INFO = extern struct {
    TransferSyntax: RPC_SYNTAX_IDENTIFIER,
    DispatchTable: *RPC_DISPATCH_TABLE,
    ProcString: *u8,
    FmtStringOffset: *const u16,
    TypeString: *u8,
    aUserMarshalQuadruple: *const c_void,
    pMethodProperties: *const MIDL_INTERFACE_METHOD_PROPERTIES,
    pReserved2: ?*c_void,
};

pub const CLIENT_CALL_RETURN = u32; // TODO: implement StructOrUnion types?

pub const XLAT_SIDE = extern enum(i32) {
    XLAT_SERVER = 1,
    XLAT_CLIENT = 2,
};
pub const XLAT_SERVER = XLAT_SIDE.XLAT_SERVER;
pub const XLAT_CLIENT = XLAT_SIDE.XLAT_CLIENT;

pub const FULL_PTR_XLAT_TABLES = extern struct {
    RefIdToPointer: *c_void,
    PointerToRefId: *c_void,
    NextRefId: u32,
    XlatSide: XLAT_SIDE,
};

pub const system_handle_t = extern enum(i32) {
    SYSTEM_HANDLE_FILE = 0,
    SYSTEM_HANDLE_SEMAPHORE = 1,
    SYSTEM_HANDLE_EVENT = 2,
    SYSTEM_HANDLE_MUTEX = 3,
    SYSTEM_HANDLE_PROCESS = 4,
    SYSTEM_HANDLE_TOKEN = 5,
    SYSTEM_HANDLE_SECTION = 6,
    SYSTEM_HANDLE_REG_KEY = 7,
    SYSTEM_HANDLE_THREAD = 8,
    SYSTEM_HANDLE_COMPOSITION_OBJECT = 9,
    SYSTEM_HANDLE_SOCKET = 10,
    SYSTEM_HANDLE_JOB = 11,
    SYSTEM_HANDLE_PIPE = 12,
    SYSTEM_HANDLE_MAX = 12,
    SYSTEM_HANDLE_INVALID = 255,
};
pub const SYSTEM_HANDLE_FILE = system_handle_t.SYSTEM_HANDLE_FILE;
pub const SYSTEM_HANDLE_SEMAPHORE = system_handle_t.SYSTEM_HANDLE_SEMAPHORE;
pub const SYSTEM_HANDLE_EVENT = system_handle_t.SYSTEM_HANDLE_EVENT;
pub const SYSTEM_HANDLE_MUTEX = system_handle_t.SYSTEM_HANDLE_MUTEX;
pub const SYSTEM_HANDLE_PROCESS = system_handle_t.SYSTEM_HANDLE_PROCESS;
pub const SYSTEM_HANDLE_TOKEN = system_handle_t.SYSTEM_HANDLE_TOKEN;
pub const SYSTEM_HANDLE_SECTION = system_handle_t.SYSTEM_HANDLE_SECTION;
pub const SYSTEM_HANDLE_REG_KEY = system_handle_t.SYSTEM_HANDLE_REG_KEY;
pub const SYSTEM_HANDLE_THREAD = system_handle_t.SYSTEM_HANDLE_THREAD;
pub const SYSTEM_HANDLE_COMPOSITION_OBJECT = system_handle_t.SYSTEM_HANDLE_COMPOSITION_OBJECT;
pub const SYSTEM_HANDLE_SOCKET = system_handle_t.SYSTEM_HANDLE_SOCKET;
pub const SYSTEM_HANDLE_JOB = system_handle_t.SYSTEM_HANDLE_JOB;
pub const SYSTEM_HANDLE_PIPE = system_handle_t.SYSTEM_HANDLE_PIPE;
pub const SYSTEM_HANDLE_MAX = system_handle_t.SYSTEM_HANDLE_MAX;
pub const SYSTEM_HANDLE_INVALID = system_handle_t.SYSTEM_HANDLE_INVALID;

pub const MIDL_INTERCEPTION_INFO = extern struct {
    Version: u32,
    ProcString: *u8,
    ProcFormatOffsetTable: *const u16,
    ProcCount: u32,
    TypeString: *u8,
};

pub const MIDL_WINRT_TYPE_SERIALIZATION_INFO = extern struct {
    Version: u32,
    TypeFormatString: *u8,
    FormatStringSize: u16,
    TypeOffset: u16,
    StubDesc: *MIDL_STUB_DESC,
};

pub const STUB_PHASE = extern enum(i32) {
    STUB_UNMARSHAL = 0,
    STUB_CALL_SERVER = 1,
    STUB_MARSHAL = 2,
    STUB_CALL_SERVER_NO_HRESULT = 3,
};
pub const STUB_UNMARSHAL = STUB_PHASE.STUB_UNMARSHAL;
pub const STUB_CALL_SERVER = STUB_PHASE.STUB_CALL_SERVER;
pub const STUB_MARSHAL = STUB_PHASE.STUB_MARSHAL;
pub const STUB_CALL_SERVER_NO_HRESULT = STUB_PHASE.STUB_CALL_SERVER_NO_HRESULT;

pub const PROXY_PHASE = extern enum(i32) {
    PROXY_CALCSIZE = 0,
    PROXY_GETBUFFER = 1,
    PROXY_MARSHAL = 2,
    PROXY_SENDRECEIVE = 3,
    PROXY_UNMARSHAL = 4,
};
pub const PROXY_CALCSIZE = PROXY_PHASE.PROXY_CALCSIZE;
pub const PROXY_GETBUFFER = PROXY_PHASE.PROXY_GETBUFFER;
pub const PROXY_MARSHAL = PROXY_PHASE.PROXY_MARSHAL;
pub const PROXY_SENDRECEIVE = PROXY_PHASE.PROXY_SENDRECEIVE;
pub const PROXY_UNMARSHAL = PROXY_PHASE.PROXY_UNMARSHAL;

pub const RPC_CLIENT_ALLOC = fn(
    Size: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const RPC_CLIENT_FREE = fn(
    Ptr: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const NDR_USER_MARSHAL_INFO_LEVEL1 = extern struct {
    Buffer: *c_void,
    BufferSize: u32,
    pfnAllocate: ?*c_void,
    pfnFree: ?*c_void,
    pRpcChannelBuffer: *IRpcChannelBuffer,
    Reserved: [5]?*c_void,
};

pub const NDR_USER_MARSHAL_INFO = extern struct {
    InformationLevel: u32,
    Anonymous: NDR_USER_MARSHAL_INFO._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const MIDL_ES_CODE = extern enum(i32) {
    MES_ENCODE = 0,
    MES_DECODE = 1,
    MES_ENCODE_NDR64 = 2,
};
pub const MES_ENCODE = MIDL_ES_CODE.MES_ENCODE;
pub const MES_DECODE = MIDL_ES_CODE.MES_DECODE;
pub const MES_ENCODE_NDR64 = MIDL_ES_CODE.MES_ENCODE_NDR64;

pub const MIDL_ES_HANDLE_STYLE = extern enum(i32) {
    MES_INCREMENTAL_HANDLE = 0,
    MES_FIXED_BUFFER_HANDLE = 1,
    MES_DYNAMIC_BUFFER_HANDLE = 2,
};
pub const MES_INCREMENTAL_HANDLE = MIDL_ES_HANDLE_STYLE.MES_INCREMENTAL_HANDLE;
pub const MES_FIXED_BUFFER_HANDLE = MIDL_ES_HANDLE_STYLE.MES_FIXED_BUFFER_HANDLE;
pub const MES_DYNAMIC_BUFFER_HANDLE = MIDL_ES_HANDLE_STYLE.MES_DYNAMIC_BUFFER_HANDLE;

pub const MIDL_ES_ALLOC = fn(
    state: *c_void,
    pbuffer: **i8,
    psize: *u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MIDL_ES_WRITE = fn(
    state: *c_void,
    buffer: *i8,
    size: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MIDL_ES_READ = fn(
    state: *c_void,
    pbuffer: **i8,
    psize: *u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MIDL_TYPE_PICKLING_INFO = extern struct {
    Version: u32,
    Flags: u32,
    Reserved: [3]?*c_void,
};


//--------------------------------------------------------------------------------
// Section: Functions (491)
//--------------------------------------------------------------------------------
pub extern "RPCRT4" fn RpcBindingCopy(
    SourceBinding: *c_void,
    DestinationBinding: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingFree(
    Binding: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingSetOption(
    hBinding: *c_void,
    option: u32,
    optionValue: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingInqOption(
    hBinding: *c_void,
    option: u32,
    pOptionValue: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingFromStringBindingA(
    StringBinding: *u8,
    Binding: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingFromStringBindingW(
    StringBinding: *u16,
    Binding: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcSsGetContextBinding(
    ContextHandle: *c_void,
    Binding: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingInqObject(
    Binding: *c_void,
    ObjectUuid: *Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingReset(
    Binding: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingSetObject(
    Binding: *c_void,
    ObjectUuid: *Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcMgmtInqDefaultProtectLevel(
    AuthnSvc: u32,
    AuthnLevel: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingToStringBindingA(
    Binding: *c_void,
    StringBinding: **u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingToStringBindingW(
    Binding: *c_void,
    StringBinding: **u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingVectorFree(
    BindingVector: **RPC_BINDING_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcStringBindingComposeA(
    ObjUuid: ?*u8,
    ProtSeq: ?*u8,
    NetworkAddr: ?*u8,
    Endpoint: ?*u8,
    Options: ?*u8,
    StringBinding: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcStringBindingComposeW(
    ObjUuid: ?*u16,
    ProtSeq: ?*u16,
    NetworkAddr: ?*u16,
    Endpoint: ?*u16,
    Options: ?*u16,
    StringBinding: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcStringBindingParseA(
    StringBinding: *u8,
    ObjUuid: ?*?*u8,
    Protseq: ?*?*u8,
    NetworkAddr: ?*?*u8,
    Endpoint: ?*?*u8,
    NetworkOptions: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcStringBindingParseW(
    StringBinding: *u16,
    ObjUuid: ?*?*u16,
    Protseq: ?*?*u16,
    NetworkAddr: ?*?*u16,
    Endpoint: ?*?*u16,
    NetworkOptions: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcStringFreeA(
    String: **u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcStringFreeW(
    String: **u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcIfInqId(
    RpcIfHandle: *c_void,
    RpcIfId: *RPC_IF_ID,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcNetworkIsProtseqValidA(
    Protseq: *u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcNetworkIsProtseqValidW(
    Protseq: *u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcMgmtInqComTimeout(
    Binding: *c_void,
    Timeout: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcMgmtSetComTimeout(
    Binding: *c_void,
    Timeout: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcMgmtSetCancelTimeout(
    Timeout: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcNetworkInqProtseqsA(
    ProtseqVector: **RPC_PROTSEQ_VECTORA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcNetworkInqProtseqsW(
    ProtseqVector: **RPC_PROTSEQ_VECTORW,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcObjectInqType(
    ObjUuid: *Guid,
    TypeUuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcObjectSetInqFn(
    InquiryFn: *RPC_OBJECT_INQ_FN,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcObjectSetType(
    ObjUuid: *Guid,
    TypeUuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcProtseqVectorFreeA(
    ProtseqVector: **RPC_PROTSEQ_VECTORA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcProtseqVectorFreeW(
    ProtseqVector: **RPC_PROTSEQ_VECTORW,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerInqBindings(
    BindingVector: **RPC_BINDING_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerInqBindingsEx(
    SecurityDescriptor: ?*c_void,
    BindingVector: **RPC_BINDING_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerInqIf(
    IfSpec: *c_void,
    MgrTypeUuid: ?*Guid,
    MgrEpv: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerListen(
    MinimumCallThreads: u32,
    MaxCalls: u32,
    DontWait: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerRegisterIf(
    IfSpec: *c_void,
    MgrTypeUuid: ?*Guid,
    MgrEpv: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerRegisterIfEx(
    IfSpec: *c_void,
    MgrTypeUuid: ?*Guid,
    MgrEpv: ?*c_void,
    Flags: u32,
    MaxCalls: u32,
    IfCallback: ?*?RPC_IF_CALLBACK_FN,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerRegisterIf2(
    IfSpec: *c_void,
    MgrTypeUuid: ?*Guid,
    MgrEpv: ?*c_void,
    Flags: u32,
    MaxCalls: u32,
    MaxRpcSize: u32,
    IfCallbackFn: ?*?RPC_IF_CALLBACK_FN,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerRegisterIf3(
    IfSpec: *c_void,
    MgrTypeUuid: ?*Guid,
    MgrEpv: ?*c_void,
    Flags: u32,
    MaxCalls: u32,
    MaxRpcSize: u32,
    IfCallback: ?*?RPC_IF_CALLBACK_FN,
    SecurityDescriptor: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUnregisterIf(
    IfSpec: ?*c_void,
    MgrTypeUuid: ?*Guid,
    WaitForCallsToComplete: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUnregisterIfEx(
    IfSpec: ?*c_void,
    MgrTypeUuid: ?*Guid,
    RundownContextHandles: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUseAllProtseqs(
    MaxCalls: u32,
    SecurityDescriptor: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUseAllProtseqsEx(
    MaxCalls: u32,
    SecurityDescriptor: ?*c_void,
    Policy: *RPC_POLICY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUseAllProtseqsIf(
    MaxCalls: u32,
    IfSpec: *c_void,
    SecurityDescriptor: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUseAllProtseqsIfEx(
    MaxCalls: u32,
    IfSpec: *c_void,
    SecurityDescriptor: ?*c_void,
    Policy: *RPC_POLICY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUseProtseqA(
    Protseq: *u8,
    MaxCalls: u32,
    SecurityDescriptor: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUseProtseqExA(
    Protseq: *u8,
    MaxCalls: u32,
    SecurityDescriptor: ?*c_void,
    Policy: *RPC_POLICY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUseProtseqW(
    Protseq: *u16,
    MaxCalls: u32,
    SecurityDescriptor: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUseProtseqExW(
    Protseq: *u16,
    MaxCalls: u32,
    SecurityDescriptor: ?*c_void,
    Policy: *RPC_POLICY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUseProtseqEpA(
    Protseq: *u8,
    MaxCalls: u32,
    Endpoint: *u8,
    SecurityDescriptor: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUseProtseqEpExA(
    Protseq: *u8,
    MaxCalls: u32,
    Endpoint: *u8,
    SecurityDescriptor: ?*c_void,
    Policy: *RPC_POLICY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUseProtseqEpW(
    Protseq: *u16,
    MaxCalls: u32,
    Endpoint: *u16,
    SecurityDescriptor: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUseProtseqEpExW(
    Protseq: *u16,
    MaxCalls: u32,
    Endpoint: *u16,
    SecurityDescriptor: ?*c_void,
    Policy: *RPC_POLICY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUseProtseqIfA(
    Protseq: *u8,
    MaxCalls: u32,
    IfSpec: *c_void,
    SecurityDescriptor: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUseProtseqIfExA(
    Protseq: *u8,
    MaxCalls: u32,
    IfSpec: *c_void,
    SecurityDescriptor: ?*c_void,
    Policy: *RPC_POLICY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUseProtseqIfW(
    Protseq: *u16,
    MaxCalls: u32,
    IfSpec: *c_void,
    SecurityDescriptor: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUseProtseqIfExW(
    Protseq: *u16,
    MaxCalls: u32,
    IfSpec: *c_void,
    SecurityDescriptor: ?*c_void,
    Policy: *RPC_POLICY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerYield(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn RpcMgmtStatsVectorFree(
    StatsVector: **RPC_STATS_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcMgmtInqStats(
    Binding: ?*c_void,
    Statistics: **RPC_STATS_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcMgmtIsServerListening(
    Binding: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcMgmtStopServerListening(
    Binding: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcMgmtWaitServerListen(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcMgmtSetServerStackSize(
    ThreadStackSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcSsDontSerializeContext(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn RpcMgmtEnableIdleCleanup(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcMgmtInqIfIds(
    Binding: ?*c_void,
    IfIdVector: **RPC_IF_ID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcIfIdVectorFree(
    IfIdVector: **RPC_IF_ID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcMgmtInqServerPrincNameA(
    Binding: ?*c_void,
    AuthnSvc: u32,
    ServerPrincName: **u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcMgmtInqServerPrincNameW(
    Binding: ?*c_void,
    AuthnSvc: u32,
    ServerPrincName: **u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerInqDefaultPrincNameA(
    AuthnSvc: u32,
    PrincName: **u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerInqDefaultPrincNameW(
    AuthnSvc: u32,
    PrincName: **u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcEpResolveBinding(
    Binding: *c_void,
    IfSpec: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcNsBindingInqEntryNameA(
    Binding: *c_void,
    EntryNameSyntax: u32,
    EntryName: **u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcNsBindingInqEntryNameW(
    Binding: *c_void,
    EntryNameSyntax: u32,
    EntryName: **u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingCreateA(
    Template: *RPC_BINDING_HANDLE_TEMPLATE_V1_A,
    Security: ?*RPC_BINDING_HANDLE_SECURITY_V1_A,
    Options: ?*RPC_BINDING_HANDLE_OPTIONS_V1,
    Binding: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingCreateW(
    Template: *RPC_BINDING_HANDLE_TEMPLATE_V1_W,
    Security: ?*RPC_BINDING_HANDLE_SECURITY_V1_W,
    Options: ?*RPC_BINDING_HANDLE_OPTIONS_V1,
    Binding: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerInqBindingHandle(
    Binding: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcImpersonateClient(
    BindingHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcImpersonateClient2(
    BindingHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcRevertToSelfEx(
    BindingHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcRevertToSelf(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcImpersonateClientContainer(
    BindingHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcRevertContainerImpersonation(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingInqAuthClientA(
    ClientBinding: ?*c_void,
    Privs: **c_void,
    ServerPrincName: ?*?*u8,
    AuthnLevel: ?*u32,
    AuthnSvc: ?*u32,
    AuthzSvc: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingInqAuthClientW(
    ClientBinding: ?*c_void,
    Privs: **c_void,
    ServerPrincName: ?*?*u16,
    AuthnLevel: ?*u32,
    AuthnSvc: ?*u32,
    AuthzSvc: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingInqAuthClientExA(
    ClientBinding: ?*c_void,
    Privs: **c_void,
    ServerPrincName: ?*?*u8,
    AuthnLevel: ?*u32,
    AuthnSvc: ?*u32,
    AuthzSvc: ?*u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingInqAuthClientExW(
    ClientBinding: ?*c_void,
    Privs: **c_void,
    ServerPrincName: ?*?*u16,
    AuthnLevel: ?*u32,
    AuthnSvc: ?*u32,
    AuthzSvc: ?*u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingInqAuthInfoA(
    Binding: *c_void,
    ServerPrincName: ?*?*u8,
    AuthnLevel: ?*u32,
    AuthnSvc: ?*u32,
    AuthIdentity: ?*?*c_void,
    AuthzSvc: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingInqAuthInfoW(
    Binding: *c_void,
    ServerPrincName: ?*?*u16,
    AuthnLevel: ?*u32,
    AuthnSvc: ?*u32,
    AuthIdentity: ?*?*c_void,
    AuthzSvc: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingSetAuthInfoA(
    Binding: *c_void,
    ServerPrincName: ?*u8,
    AuthnLevel: u32,
    AuthnSvc: u32,
    AuthIdentity: ?*c_void,
    AuthzSvc: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingSetAuthInfoExA(
    Binding: *c_void,
    ServerPrincName: ?*u8,
    AuthnLevel: u32,
    AuthnSvc: u32,
    AuthIdentity: ?*c_void,
    AuthzSvc: u32,
    SecurityQos: ?*RPC_SECURITY_QOS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingSetAuthInfoW(
    Binding: *c_void,
    ServerPrincName: ?*u16,
    AuthnLevel: u32,
    AuthnSvc: u32,
    AuthIdentity: ?*c_void,
    AuthzSvc: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingSetAuthInfoExW(
    Binding: *c_void,
    ServerPrincName: ?*u16,
    AuthnLevel: u32,
    AuthnSvc: u32,
    AuthIdentity: ?*c_void,
    AuthzSvc: u32,
    SecurityQOS: ?*RPC_SECURITY_QOS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingInqAuthInfoExA(
    Binding: *c_void,
    ServerPrincName: ?*?*u8,
    AuthnLevel: ?*u32,
    AuthnSvc: ?*u32,
    AuthIdentity: ?*?*c_void,
    AuthzSvc: ?*u32,
    RpcQosVersion: u32,
    SecurityQOS: ?*RPC_SECURITY_QOS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingInqAuthInfoExW(
    Binding: *c_void,
    ServerPrincName: ?*?*u16,
    AuthnLevel: ?*u32,
    AuthnSvc: ?*u32,
    AuthIdentity: ?*?*c_void,
    AuthzSvc: ?*u32,
    RpcQosVersion: u32,
    SecurityQOS: ?*RPC_SECURITY_QOS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerCompleteSecurityCallback(
    BindingHandle: *c_void,
    Status: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerRegisterAuthInfoA(
    ServerPrincName: ?*u8,
    AuthnSvc: u32,
    GetKeyFn: ?RPC_AUTH_KEY_RETRIEVAL_FN,
    Arg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerRegisterAuthInfoW(
    ServerPrincName: ?*u16,
    AuthnSvc: u32,
    GetKeyFn: ?RPC_AUTH_KEY_RETRIEVAL_FN,
    Arg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingServerFromClient(
    ClientBinding: ?*c_void,
    ServerBinding: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcRaiseException(
    exception: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn RpcTestCancel(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerTestCancel(
    BindingHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcCancelThread(
    Thread: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcCancelThreadEx(
    Thread: *c_void,
    Timeout: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn UuidCreate(
    Uuid: *Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn UuidCreateSequential(
    Uuid: *Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn UuidToStringA(
    Uuid: *const Guid,
    StringUuid: **u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn UuidFromStringA(
    StringUuid: ?*u8,
    Uuid: *Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn UuidToStringW(
    Uuid: *const Guid,
    StringUuid: **u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn UuidFromStringW(
    StringUuid: ?*u16,
    Uuid: *Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn UuidCompare(
    Uuid1: *Guid,
    Uuid2: *Guid,
    Status: *i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn UuidCreateNil(
    NilUuid: *Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn UuidEqual(
    Uuid1: *Guid,
    Uuid2: *Guid,
    Status: *i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn UuidHash(
    Uuid: *Guid,
    Status: *i32,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "RPCRT4" fn UuidIsNil(
    Uuid: *Guid,
    Status: *i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcEpRegisterNoReplaceA(
    IfSpec: *c_void,
    BindingVector: *RPC_BINDING_VECTOR,
    UuidVector: ?*UUID_VECTOR,
    Annotation: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcEpRegisterNoReplaceW(
    IfSpec: *c_void,
    BindingVector: *RPC_BINDING_VECTOR,
    UuidVector: ?*UUID_VECTOR,
    Annotation: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcEpRegisterA(
    IfSpec: *c_void,
    BindingVector: *RPC_BINDING_VECTOR,
    UuidVector: ?*UUID_VECTOR,
    Annotation: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcEpRegisterW(
    IfSpec: *c_void,
    BindingVector: *RPC_BINDING_VECTOR,
    UuidVector: ?*UUID_VECTOR,
    Annotation: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcEpUnregister(
    IfSpec: *c_void,
    BindingVector: *RPC_BINDING_VECTOR,
    UuidVector: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn DceErrorInqTextA(
    RpcStatus: i32,
    ErrorText: *[256]u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn DceErrorInqTextW(
    RpcStatus: i32,
    ErrorText: *[256]u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcMgmtEpEltInqBegin(
    EpBinding: ?*c_void,
    InquiryType: u32,
    IfId: ?*RPC_IF_ID,
    VersOption: u32,
    ObjectUuid: ?*Guid,
    InquiryContext: ***c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcMgmtEpEltInqDone(
    InquiryContext: ***c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcMgmtEpEltInqNextA(
    InquiryContext: **c_void,
    IfId: *RPC_IF_ID,
    Binding: ?*?*c_void,
    ObjectUuid: ?*Guid,
    Annotation: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcMgmtEpEltInqNextW(
    InquiryContext: **c_void,
    IfId: *RPC_IF_ID,
    Binding: ?*?*c_void,
    ObjectUuid: ?*Guid,
    Annotation: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcMgmtEpUnregister(
    EpBinding: ?*c_void,
    IfId: *RPC_IF_ID,
    Binding: *c_void,
    ObjectUuid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcMgmtSetAuthorizationFn(
    AuthorizationFn: RPC_MGMT_AUTHORIZATION_FN,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcExceptionFilter(
    ExceptionCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerInterfaceGroupCreateW(
    Interfaces: [*]RPC_INTERFACE_TEMPLATEW,
    NumIfs: u32,
    Endpoints: [*]RPC_ENDPOINT_TEMPLATEW,
    NumEndpoints: u32,
    IdlePeriod: u32,
    IdleCallbackFn: RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN,
    IdleCallbackContext: *c_void,
    IfGroup: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerInterfaceGroupCreateA(
    Interfaces: [*]RPC_INTERFACE_TEMPLATEA,
    NumIfs: u32,
    Endpoints: [*]RPC_ENDPOINT_TEMPLATEA,
    NumEndpoints: u32,
    IdlePeriod: u32,
    IdleCallbackFn: RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN,
    IdleCallbackContext: *c_void,
    IfGroup: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerInterfaceGroupClose(
    IfGroup: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerInterfaceGroupActivate(
    IfGroup: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerInterfaceGroupDeactivate(
    IfGroup: *c_void,
    ForceDeactivation: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerInterfaceGroupInqBindings(
    IfGroup: *c_void,
    BindingVector: **RPC_BINDING_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcNegotiateTransferSyntax(
    Message: *RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcGetBuffer(
    Message: *RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcGetBufferWithObject(
    Message: *RPC_MESSAGE,
    ObjectUuid: *Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcSendReceive(
    Message: *RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcFreeBuffer(
    Message: *RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcSend(
    Message: *RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcReceive(
    Message: *RPC_MESSAGE,
    Size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcFreePipeBuffer(
    Message: *RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcReallocPipeBuffer(
    Message: *RPC_MESSAGE,
    NewSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcRequestMutex(
    Mutex: **c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn I_RpcClearMutex(
    Mutex: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn I_RpcDeleteMutex(
    Mutex: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn I_RpcAllocate(
    Size: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "RPCRT4" fn I_RpcFree(
    Object: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn I_RpcPauseExecution(
    Milliseconds: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn I_RpcGetExtendedError(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcSystemHandleTypeSpecificWork(
    Handle: *c_void,
    ActualType: u8,
    IdlType: u8,
    MarshalDirection: LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcGetCurrentCallHandle(
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "RPCRT4" fn I_RpcNsInterfaceExported(
    EntryNameSyntax: u32,
    EntryName: *u16,
    RpcInterfaceInformation: *RPC_SERVER_INTERFACE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcNsInterfaceUnexported(
    EntryNameSyntax: u32,
    EntryName: *u16,
    RpcInterfaceInformation: *RPC_SERVER_INTERFACE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcBindingToStaticStringBindingW(
    Binding: *c_void,
    StringBinding: **u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcBindingInqSecurityContext(
    Binding: *c_void,
    SecurityContextHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcBindingInqSecurityContextKeyInfo(
    Binding: ?*c_void,
    KeyInfo: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcBindingInqWireIdForSnego(
    Binding: *c_void,
    WireId: *u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcBindingInqMarshalledTargetInfo(
    Binding: *c_void,
    MarshalledTargetInfoSize: *u32,
    MarshalledTargetInfo: **u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcBindingInqLocalClientPID(
    Binding: *c_void,
    Pid: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcBindingHandleToAsyncHandle(
    Binding: *c_void,
    AsyncHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcNsBindingSetEntryNameW(
    Binding: *c_void,
    EntryNameSyntax: u32,
    EntryName: *u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcNsBindingSetEntryNameA(
    Binding: *c_void,
    EntryNameSyntax: u32,
    EntryName: *u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcServerUseProtseqEp2A(
    NetworkAddress: ?*u8,
    Protseq: *u8,
    MaxCalls: u32,
    Endpoint: *u8,
    SecurityDescriptor: ?*c_void,
    Policy: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcServerUseProtseqEp2W(
    NetworkAddress: ?*u16,
    Protseq: *u16,
    MaxCalls: u32,
    Endpoint: *u16,
    SecurityDescriptor: ?*c_void,
    Policy: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcServerUseProtseq2W(
    NetworkAddress: ?*u16,
    Protseq: *u16,
    MaxCalls: u32,
    SecurityDescriptor: ?*c_void,
    Policy: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcServerUseProtseq2A(
    NetworkAddress: ?*u8,
    Protseq: *u8,
    MaxCalls: u32,
    SecurityDescriptor: ?*c_void,
    Policy: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcServerStartService(
    Protseq: *u16,
    Endpoint: *u16,
    IfSpec: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcBindingInqDynamicEndpointW(
    Binding: *c_void,
    DynamicEndpoint: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcBindingInqDynamicEndpointA(
    Binding: *c_void,
    DynamicEndpoint: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcServerCheckClientRestriction(
    Context: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcBindingInqTransportType(
    Binding: *c_void,
    Type: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcIfInqTransferSyntaxes(
    RpcIfHandle: *c_void,
    TransferSyntaxes: *RPC_TRANSFER_SYNTAX,
    TransferSyntaxSize: u32,
    TransferSyntaxCount: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_UuidCreate(
    Uuid: *Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcBindingCopy(
    SourceBinding: *c_void,
    DestinationBinding: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcBindingIsClientLocal(
    BindingHandle: *c_void,
    ClientLocalFlag: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcBindingCreateNP(
    ServerName: *u16,
    ServiceName: *u16,
    NetworkOptions: *u16,
    Binding: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcSsDontSerializeContext(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn I_RpcServerRegisterForwardFunction(
    pForwardFunction: *RPC_FORWARD_FUNCTION,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcServerInqAddressChangeFn(
) callconv(@import("std").os.windows.WINAPI) *RPC_ADDRESS_CHANGE_FN;

pub extern "RPCRT4" fn I_RpcServerSetAddressChangeFn(
    pAddressChangeFn: *RPC_ADDRESS_CHANGE_FN,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcServerInqLocalConnAddress(
    Binding: *c_void,
    Buffer: *c_void,
    BufferSize: *u32,
    AddressFormat: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcServerInqRemoteConnAddress(
    Binding: *c_void,
    Buffer: *c_void,
    BufferSize: *u32,
    AddressFormat: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcSessionStrictContextHandle(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn I_RpcTurnOnEEInfoPropagation(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcServerInqTransportType(
    Type: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcMapWin32Status(
    Status: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcRecordCalloutFailure(
    RpcStatus: i32,
    CallOutState: *RDR_CALLOUT_STATE,
    DllName: *u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn I_RpcMgmtEnableDedicatedThreadPool(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcGetDefaultSD(
    ppSecurityDescriptor: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcOpenClientProcess(
    Binding: ?*c_void,
    DesiredAccess: u32,
    ClientProcess: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcBindingIsServerLocal(
    Binding: *c_void,
    ServerLocalFlag: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcBindingSetPrivateOption(
    hBinding: *c_void,
    option: u32,
    optionValue: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcServerSubscribeForDisconnectNotification(
    Binding: ?*c_void,
    hEvent: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcServerGetAssociationID(
    Binding: ?*c_void,
    AssociationID: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcServerDisableExceptionFilter(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcServerSubscribeForDisconnectNotification2(
    Binding: ?*c_void,
    hEvent: *c_void,
    SubscriptionId: *Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcServerUnsubscribeForDisconnectNotification(
    Binding: ?*c_void,
    SubscriptionId: Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsBindingExportA(
    EntryNameSyntax: u32,
    EntryName: ?*u8,
    IfSpec: ?*c_void,
    BindingVec: ?*RPC_BINDING_VECTOR,
    ObjectUuidVec: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsBindingUnexportA(
    EntryNameSyntax: u32,
    EntryName: ?*u8,
    IfSpec: ?*c_void,
    ObjectUuidVec: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsBindingExportW(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
    IfSpec: ?*c_void,
    BindingVec: ?*RPC_BINDING_VECTOR,
    ObjectUuidVec: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsBindingUnexportW(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
    IfSpec: ?*c_void,
    ObjectUuidVec: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsBindingExportPnPA(
    EntryNameSyntax: u32,
    EntryName: ?*u8,
    IfSpec: ?*c_void,
    ObjectVector: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsBindingUnexportPnPA(
    EntryNameSyntax: u32,
    EntryName: ?*u8,
    IfSpec: ?*c_void,
    ObjectVector: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsBindingExportPnPW(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
    IfSpec: ?*c_void,
    ObjectVector: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsBindingUnexportPnPW(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
    IfSpec: ?*c_void,
    ObjectVector: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsBindingLookupBeginA(
    EntryNameSyntax: u32,
    EntryName: ?*u8,
    IfSpec: ?*c_void,
    ObjUuid: ?*Guid,
    BindingMaxCount: u32,
    LookupContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsBindingLookupBeginW(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
    IfSpec: ?*c_void,
    ObjUuid: ?*Guid,
    BindingMaxCount: u32,
    LookupContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsBindingLookupNext(
    LookupContext: *c_void,
    BindingVec: **RPC_BINDING_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsBindingLookupDone(
    LookupContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsGroupDeleteA(
    GroupNameSyntax: u32,
    GroupName: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsGroupMbrAddA(
    GroupNameSyntax: u32,
    GroupName: *u8,
    MemberNameSyntax: u32,
    MemberName: *u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsGroupMbrRemoveA(
    GroupNameSyntax: u32,
    GroupName: *u8,
    MemberNameSyntax: u32,
    MemberName: *u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsGroupMbrInqBeginA(
    GroupNameSyntax: u32,
    GroupName: *u8,
    MemberNameSyntax: u32,
    InquiryContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsGroupMbrInqNextA(
    InquiryContext: *c_void,
    MemberName: **u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsGroupDeleteW(
    GroupNameSyntax: u32,
    GroupName: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsGroupMbrAddW(
    GroupNameSyntax: u32,
    GroupName: *u16,
    MemberNameSyntax: u32,
    MemberName: *u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsGroupMbrRemoveW(
    GroupNameSyntax: u32,
    GroupName: *u16,
    MemberNameSyntax: u32,
    MemberName: *u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsGroupMbrInqBeginW(
    GroupNameSyntax: u32,
    GroupName: *u16,
    MemberNameSyntax: u32,
    InquiryContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsGroupMbrInqNextW(
    InquiryContext: *c_void,
    MemberName: **u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsGroupMbrInqDone(
    InquiryContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsProfileDeleteA(
    ProfileNameSyntax: u32,
    ProfileName: *u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsProfileEltAddA(
    ProfileNameSyntax: u32,
    ProfileName: *u8,
    IfId: ?*RPC_IF_ID,
    MemberNameSyntax: u32,
    MemberName: *u8,
    Priority: u32,
    Annotation: ?*u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsProfileEltRemoveA(
    ProfileNameSyntax: u32,
    ProfileName: *u8,
    IfId: ?*RPC_IF_ID,
    MemberNameSyntax: u32,
    MemberName: *u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsProfileEltInqBeginA(
    ProfileNameSyntax: u32,
    ProfileName: *u8,
    InquiryType: u32,
    IfId: ?*RPC_IF_ID,
    VersOption: u32,
    MemberNameSyntax: u32,
    MemberName: ?*u8,
    InquiryContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsProfileEltInqNextA(
    InquiryContext: *c_void,
    IfId: ?*RPC_IF_ID,
    MemberName: **u8,
    Priority: *u32,
    Annotation: **u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsProfileDeleteW(
    ProfileNameSyntax: u32,
    ProfileName: *u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsProfileEltAddW(
    ProfileNameSyntax: u32,
    ProfileName: *u16,
    IfId: ?*RPC_IF_ID,
    MemberNameSyntax: u32,
    MemberName: *u16,
    Priority: u32,
    Annotation: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsProfileEltRemoveW(
    ProfileNameSyntax: u32,
    ProfileName: *u16,
    IfId: ?*RPC_IF_ID,
    MemberNameSyntax: u32,
    MemberName: *u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsProfileEltInqBeginW(
    ProfileNameSyntax: u32,
    ProfileName: *u16,
    InquiryType: u32,
    IfId: ?*RPC_IF_ID,
    VersOption: u32,
    MemberNameSyntax: u32,
    MemberName: ?*u16,
    InquiryContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsProfileEltInqNextW(
    InquiryContext: *c_void,
    IfId: ?*RPC_IF_ID,
    MemberName: **u16,
    Priority: *u32,
    Annotation: **u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsProfileEltInqDone(
    InquiryContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsEntryObjectInqBeginA(
    EntryNameSyntax: u32,
    EntryName: *u8,
    InquiryContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsEntryObjectInqBeginW(
    EntryNameSyntax: u32,
    EntryName: *u16,
    InquiryContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsEntryObjectInqNext(
    InquiryContext: *c_void,
    ObjUuid: *Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsEntryObjectInqDone(
    InquiryContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsEntryExpandNameA(
    EntryNameSyntax: u32,
    EntryName: *u8,
    ExpandedName: **u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsMgmtBindingUnexportA(
    EntryNameSyntax: u32,
    EntryName: *u8,
    IfId: ?*RPC_IF_ID,
    VersOption: u32,
    ObjectUuidVec: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsMgmtEntryCreateA(
    EntryNameSyntax: u32,
    EntryName: *u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsMgmtEntryDeleteA(
    EntryNameSyntax: u32,
    EntryName: *u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsMgmtEntryInqIfIdsA(
    EntryNameSyntax: u32,
    EntryName: *u8,
    IfIdVec: **RPC_IF_ID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsMgmtHandleSetExpAge(
    NsHandle: *c_void,
    ExpirationAge: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsMgmtInqExpAge(
    ExpirationAge: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsMgmtSetExpAge(
    ExpirationAge: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsEntryExpandNameW(
    EntryNameSyntax: u32,
    EntryName: *u16,
    ExpandedName: **u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsMgmtBindingUnexportW(
    EntryNameSyntax: u32,
    EntryName: *u16,
    IfId: ?*RPC_IF_ID,
    VersOption: u32,
    ObjectUuidVec: ?*UUID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsMgmtEntryCreateW(
    EntryNameSyntax: u32,
    EntryName: *u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsMgmtEntryDeleteW(
    EntryNameSyntax: u32,
    EntryName: *u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsMgmtEntryInqIfIdsW(
    EntryNameSyntax: u32,
    EntryName: *u16,
    IfIdVec: **RPC_IF_ID_VECTOR,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsBindingImportBeginA(
    EntryNameSyntax: u32,
    EntryName: ?*u8,
    IfSpec: ?*c_void,
    ObjUuid: ?*Guid,
    ImportContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsBindingImportBeginW(
    EntryNameSyntax: u32,
    EntryName: ?*u16,
    IfSpec: ?*c_void,
    ObjUuid: ?*Guid,
    ImportContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsBindingImportNext(
    ImportContext: *c_void,
    Binding: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsBindingImportDone(
    ImportContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCNS4" fn RpcNsBindingSelect(
    BindingVec: *RPC_BINDING_VECTOR,
    Binding: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcAsyncRegisterInfo(
    pAsync: *RPC_ASYNC_STATE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcAsyncInitializeHandle(
    pAsync: [*]RPC_ASYNC_STATE,
    Size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcAsyncGetCallStatus(
    pAsync: *RPC_ASYNC_STATE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcAsyncCompleteCall(
    pAsync: *RPC_ASYNC_STATE,
    Reply: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcAsyncAbortCall(
    pAsync: *RPC_ASYNC_STATE,
    ExceptionCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcAsyncCancelCall(
    pAsync: *RPC_ASYNC_STATE,
    fAbort: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcErrorStartEnumeration(
    EnumHandle: *RPC_ERROR_ENUM_HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcErrorGetNextRecord(
    EnumHandle: *RPC_ERROR_ENUM_HANDLE,
    CopyStrings: BOOL,
    ErrorInfo: *RPC_EXTENDED_ERROR_INFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcErrorEndEnumeration(
    EnumHandle: *RPC_ERROR_ENUM_HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcErrorResetEnumeration(
    EnumHandle: *RPC_ERROR_ENUM_HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcErrorGetNumberOfRecords(
    EnumHandle: *RPC_ERROR_ENUM_HANDLE,
    Records: *i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcErrorSaveErrorInfo(
    EnumHandle: *RPC_ERROR_ENUM_HANDLE,
    ErrorBlob: **c_void,
    BlobSize: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcErrorLoadErrorInfo(
    ErrorBlob: [*]u8,
    BlobSize: ?*c_void,
    EnumHandle: *RPC_ERROR_ENUM_HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcErrorAddRecord(
    ErrorInfo: *RPC_EXTENDED_ERROR_INFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcErrorClearInformation(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn RpcGetAuthorizationContextForClient(
    ClientBinding: ?*c_void,
    ImpersonateOnReturn: BOOL,
    Reserved1: ?*c_void,
    pExpirationTime: ?*LARGE_INTEGER,
    Reserved2: LUID,
    Reserved3: u32,
    Reserved4: ?*c_void,
    pAuthzClientContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcFreeAuthorizationContext(
    pAuthzClientContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcSsContextLockExclusive(
    ServerBindingHandle: ?*c_void,
    UserContext: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcSsContextLockShared(
    ServerBindingHandle: *c_void,
    UserContext: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerInqCallAttributesW(
    ClientBinding: ?*c_void,
    RpcCallAttributes: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerInqCallAttributesA(
    ClientBinding: ?*c_void,
    RpcCallAttributes: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerSubscribeForNotification(
    Binding: ?*c_void,
    Notification: RPC_NOTIFICATIONS,
    NotificationType: RPC_NOTIFICATION_TYPES,
    NotificationInfo: *RPC_ASYNC_NOTIFICATION_INFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcServerUnsubscribeForNotification(
    Binding: ?*c_void,
    Notification: RPC_NOTIFICATIONS,
    NotificationsQueued: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingBind(
    pAsync: ?*RPC_ASYNC_STATE,
    Binding: *c_void,
    IfSpec: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcBindingUnbind(
    Binding: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcAsyncSetHandle(
    Message: *RPC_MESSAGE,
    pAsync: *RPC_ASYNC_STATE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcAsyncAbortCall(
    pAsync: *RPC_ASYNC_STATE,
    ExceptionCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcExceptionFilter(
    ExceptionCode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn I_RpcBindingInqClientTokenAttributes(
    Binding: *c_void,
    TokenId: ?*LUID,
    AuthenticationId: ?*LUID,
    ModifiedId: ?*LUID,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn NDRCContextBinding(
    CContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "RPCRT4" fn NDRCContextMarshall(
    CContext: ?*c_void,
    pBuff: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NDRCContextUnmarshall(
    pCContext: ?*?*c_void,
    hBinding: *c_void,
    pBuff: *c_void,
    DataRepresentation: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NDRSContextMarshall(
    CContext: *NDR_SCONTEXT_1,
    pBuff: *c_void,
    userRunDownIn: NDR_RUNDOWN,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NDRSContextUnmarshall(
    pBuff: *c_void,
    DataRepresentation: u32,
) callconv(@import("std").os.windows.WINAPI) *NDR_SCONTEXT_1;

pub extern "RPCRT4" fn NDRSContextMarshallEx(
    BindingHandle: *c_void,
    CContext: *NDR_SCONTEXT_1,
    pBuff: *c_void,
    userRunDownIn: NDR_RUNDOWN,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NDRSContextMarshall2(
    BindingHandle: *c_void,
    CContext: *NDR_SCONTEXT_1,
    pBuff: *c_void,
    userRunDownIn: NDR_RUNDOWN,
    CtxGuard: ?*c_void,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NDRSContextUnmarshallEx(
    BindingHandle: *c_void,
    pBuff: *c_void,
    DataRepresentation: u32,
) callconv(@import("std").os.windows.WINAPI) *NDR_SCONTEXT_1;

pub extern "RPCRT4" fn NDRSContextUnmarshall2(
    BindingHandle: *c_void,
    pBuff: ?*c_void,
    DataRepresentation: u32,
    CtxGuard: ?*c_void,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) *NDR_SCONTEXT_1;

pub extern "RPCRT4" fn RpcSsDestroyClientContext(
    ContextHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrSimpleTypeMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    FormatChar: u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrPointerMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrConformantStructMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrConformantVaryingStructMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrFixedArrayMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrConformantVaryingArrayMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrVaryingArrayMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrNonConformantStringMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrConformantStringMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrEncapsulatedUnionMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrNonEncapsulatedUnionMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrByteCountPointerMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrXmitOrRepAsMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrUserMarshalMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrInterfacePointerMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrClientContextMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ContextHandle: ?*c_void,
    fCheck: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrServerContextMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ContextHandle: *NDR_SCONTEXT_1,
    RundownRoutine: NDR_RUNDOWN,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrServerContextNewMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ContextHandle: *NDR_SCONTEXT_1,
    RundownRoutine: NDR_RUNDOWN,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrSimpleTypeUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    FormatChar: u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrRangeUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ppMemory: **u8,
    pFormat: *u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrCorrelationInitialize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *c_void,
    CacheSize: u32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrCorrelationPass(
    pStubMsg: *MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrCorrelationFree(
    pStubMsg: *MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrPointerUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ppMemory: **u8,
    pFormat: *u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrConformantStructUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ppMemory: **u8,
    pFormat: *u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrConformantVaryingStructUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ppMemory: **u8,
    pFormat: *u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrFixedArrayUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ppMemory: **u8,
    pFormat: *u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrConformantArrayUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ppMemory: **u8,
    pFormat: *u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrConformantVaryingArrayUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ppMemory: **u8,
    pFormat: *u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrVaryingArrayUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ppMemory: **u8,
    pFormat: *u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrNonConformantStringUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ppMemory: **u8,
    pFormat: *u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrConformantStringUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ppMemory: **u8,
    pFormat: *u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrEncapsulatedUnionUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ppMemory: **u8,
    pFormat: *u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrNonEncapsulatedUnionUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ppMemory: **u8,
    pFormat: *u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrByteCountPointerUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ppMemory: **u8,
    pFormat: *u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrXmitOrRepAsUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ppMemory: **u8,
    pFormat: *u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrInterfacePointerUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ppMemory: **u8,
    pFormat: *u8,
    fMustAlloc: u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrClientContextUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pContextHandle: *?*c_void,
    BindHandle: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrServerContextUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) *NDR_SCONTEXT_1;

pub extern "RPCRT4" fn NdrContextHandleInitialize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) *NDR_SCONTEXT_1;

pub extern "RPCRT4" fn NdrServerContextNewUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) *NDR_SCONTEXT_1;

pub extern "RPCRT4" fn NdrPointerBufferSize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrConformantStructBufferSize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrConformantVaryingStructBufferSize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrFixedArrayBufferSize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrConformantVaryingArrayBufferSize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrVaryingArrayBufferSize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrConformantStringBufferSize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrNonConformantStringBufferSize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrEncapsulatedUnionBufferSize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrNonEncapsulatedUnionBufferSize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrByteCountPointerBufferSize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrXmitOrRepAsBufferSize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrUserMarshalBufferSize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrInterfacePointerBufferSize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrContextHandleSize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrPointerMemorySize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RPCRT4" fn NdrSimpleStructMemorySize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RPCRT4" fn NdrConformantStructMemorySize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RPCRT4" fn NdrConformantVaryingStructMemorySize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RPCRT4" fn NdrComplexStructMemorySize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RPCRT4" fn NdrFixedArrayMemorySize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RPCRT4" fn NdrConformantArrayMemorySize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RPCRT4" fn NdrConformantVaryingArrayMemorySize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RPCRT4" fn NdrVaryingArrayMemorySize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RPCRT4" fn NdrComplexArrayMemorySize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RPCRT4" fn NdrConformantStringMemorySize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RPCRT4" fn NdrNonConformantStringMemorySize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RPCRT4" fn NdrEncapsulatedUnionMemorySize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RPCRT4" fn NdrNonEncapsulatedUnionMemorySize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RPCRT4" fn NdrXmitOrRepAsMemorySize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RPCRT4" fn NdrUserMarshalMemorySize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RPCRT4" fn NdrInterfacePointerMemorySize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RPCRT4" fn NdrPointerFree(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrSimpleStructFree(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrConformantStructFree(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrConformantVaryingStructFree(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrComplexStructFree(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrFixedArrayFree(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrConformantArrayFree(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrConformantVaryingArrayFree(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrVaryingArrayFree(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrComplexArrayFree(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrEncapsulatedUnionFree(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrNonEncapsulatedUnionFree(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrByteCountPointerFree(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrXmitOrRepAsFree(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrUserMarshalFree(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrInterfacePointerFree(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *u8,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrConvert2(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
    NumberParams: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrConvert(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrUserMarshalSimpleTypeConvert(
    pFlags: *u32,
    pBuffer: *u8,
    FormatChar: u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrClientInitializeNew(
    pRpcMsg: *RPC_MESSAGE,
    pStubMsg: *MIDL_STUB_MESSAGE,
    pStubDescriptor: *MIDL_STUB_DESC,
    ProcNum: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrServerInitializeNew(
    pRpcMsg: *RPC_MESSAGE,
    pStubMsg: *MIDL_STUB_MESSAGE,
    pStubDescriptor: *MIDL_STUB_DESC,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrServerInitializePartial(
    pRpcMsg: *RPC_MESSAGE,
    pStubMsg: *MIDL_STUB_MESSAGE,
    pStubDescriptor: *MIDL_STUB_DESC,
    RequestedBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrClientInitialize(
    pRpcMsg: *RPC_MESSAGE,
    pStubMsg: *MIDL_STUB_MESSAGE,
    pStubDescriptor: *MIDL_STUB_DESC,
    ProcNum: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrServerInitialize(
    pRpcMsg: *RPC_MESSAGE,
    pStubMsg: *MIDL_STUB_MESSAGE,
    pStubDescriptor: *MIDL_STUB_DESC,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrServerInitializeUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pStubDescriptor: *MIDL_STUB_DESC,
    pRpcMsg: *RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrServerInitializeMarshall(
    pRpcMsg: *RPC_MESSAGE,
    pStubMsg: *MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrGetBuffer(
    pStubMsg: *MIDL_STUB_MESSAGE,
    BufferLength: u32,
    Handle: *c_void,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrNsGetBuffer(
    pStubMsg: *MIDL_STUB_MESSAGE,
    BufferLength: u32,
    Handle: *c_void,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrSendReceive(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pBufferEnd: *u8,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrNsSendReceive(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pBufferEnd: *u8,
    pAutoHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "RPCRT4" fn NdrFreeBuffer(
    pStubMsg: *MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrGetDcomProtocolVersion(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pVersion: *RPC_VERSION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "RPCRT4" fn NdrClientCall2(
    pStubDescriptor: *MIDL_STUB_DESC,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) CLIENT_CALL_RETURN;

pub extern "RPCRT4" fn NdrAsyncClientCall(
    pStubDescriptor: *MIDL_STUB_DESC,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) CLIENT_CALL_RETURN;

pub extern "RPCRT4" fn NdrDcomAsyncClientCall(
    pStubDescriptor: *MIDL_STUB_DESC,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) CLIENT_CALL_RETURN;

pub extern "RPCRT4" fn NdrAsyncServerCall(
    pRpcMsg: *RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrDcomAsyncStubCall(
    pThis: *IRpcStubBuffer,
    pChannel: *IRpcChannelBuffer,
    pRpcMsg: *RPC_MESSAGE,
    pdwStubPhase: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn NdrStubCall2(
    pThis: *c_void,
    pChannel: *c_void,
    pRpcMsg: *RPC_MESSAGE,
    pdwStubPhase: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn NdrServerCall2(
    pRpcMsg: *RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrMapCommAndFaultStatus(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pCommStatus: *u32,
    pFaultStatus: *u32,
    Status: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcSsAllocate(
    Size: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "RPCRT4" fn RpcSsDisableAllocate(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn RpcSsEnableAllocate(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn RpcSsFree(
    NodeToFree: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn RpcSsGetThreadHandle(
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "RPCRT4" fn RpcSsSetClientAllocFree(
    ClientAlloc: *RPC_CLIENT_ALLOC,
    ClientFree: *RPC_CLIENT_FREE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn RpcSsSetThreadHandle(
    Id: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn RpcSsSwapClientAllocFree(
    ClientAlloc: *RPC_CLIENT_ALLOC,
    ClientFree: *RPC_CLIENT_FREE,
    OldClientAlloc: **RPC_CLIENT_ALLOC,
    OldClientFree: **RPC_CLIENT_FREE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn RpcSmAllocate(
    Size: ?*c_void,
    pStatus: *i32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "RPCRT4" fn RpcSmClientFree(
    pNodeToFree: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcSmDestroyClientContext(
    ContextHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcSmDisableAllocate(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcSmEnableAllocate(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcSmFree(
    NodeToFree: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcSmGetThreadHandle(
    pStatus: *i32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "RPCRT4" fn RpcSmSetClientAllocFree(
    ClientAlloc: *RPC_CLIENT_ALLOC,
    ClientFree: *RPC_CLIENT_FREE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcSmSetThreadHandle(
    Id: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcSmSwapClientAllocFree(
    ClientAlloc: *RPC_CLIENT_ALLOC,
    ClientFree: *RPC_CLIENT_FREE,
    OldClientAlloc: **RPC_CLIENT_ALLOC,
    OldClientFree: **RPC_CLIENT_FREE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn NdrRpcSsEnableAllocate(
    pMessage: *MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrRpcSsDisableAllocate(
    pMessage: *MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrRpcSmSetClientToOsf(
    pMessage: *MIDL_STUB_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrRpcSmClientAllocate(
    Size: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "RPCRT4" fn NdrRpcSmClientFree(
    NodeToFree: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrRpcSsDefaultAllocate(
    Size: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "RPCRT4" fn NdrRpcSsDefaultFree(
    NodeToFree: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrFullPointerXlatInit(
    NumberOfPointers: u32,
    XlatSide: XLAT_SIDE,
) callconv(@import("std").os.windows.WINAPI) *FULL_PTR_XLAT_TABLES;

pub extern "RPCRT4" fn NdrFullPointerXlatFree(
    pXlatTables: *FULL_PTR_XLAT_TABLES,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrAllocate(
    pStubMsg: *MIDL_STUB_MESSAGE,
    Len: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "RPCRT4" fn NdrClearOutParameters(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pFormat: *u8,
    ArgAddr: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrOleAllocate(
    Size: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "RPCRT4" fn NdrOleFree(
    NodeToFree: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrGetUserMarshalInfo(
    pFlags: *u32,
    InformationLevel: u32,
    pMarshalInfo: *NDR_USER_MARSHAL_INFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn NdrCreateServerInterfaceFromStub(
    pStub: *IRpcStubBuffer,
    pServerIf: *RPC_SERVER_INTERFACE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn NdrClientCall3(
    pProxyInfo: *MIDL_STUBLESS_PROXY_INFO,
    nProcNum: u32,
    pReturnValue: *c_void,
) callconv(@import("std").os.windows.WINAPI) CLIENT_CALL_RETURN;

pub extern "RPCRT4" fn Ndr64AsyncClientCall(
    pProxyInfo: *MIDL_STUBLESS_PROXY_INFO,
    nProcNum: u32,
    pReturnValue: *c_void,
) callconv(@import("std").os.windows.WINAPI) CLIENT_CALL_RETURN;

pub extern "RPCRT4" fn Ndr64DcomAsyncClientCall(
    pProxyInfo: *MIDL_STUBLESS_PROXY_INFO,
    nProcNum: u32,
    pReturnValue: *c_void,
) callconv(@import("std").os.windows.WINAPI) CLIENT_CALL_RETURN;

pub extern "RPCRT4" fn Ndr64AsyncServerCall64(
    pRpcMsg: *RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn Ndr64AsyncServerCallAll(
    pRpcMsg: *RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn Ndr64DcomAsyncStubCall(
    pThis: *IRpcStubBuffer,
    pChannel: *IRpcChannelBuffer,
    pRpcMsg: *RPC_MESSAGE,
    pdwStubPhase: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn NdrStubCall3(
    pThis: *c_void,
    pChannel: *c_void,
    pRpcMsg: *RPC_MESSAGE,
    pdwStubPhase: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn NdrServerCallAll(
    pRpcMsg: *RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrServerCallNdr64(
    pRpcMsg: *RPC_MESSAGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrPartialIgnoreClientMarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrPartialIgnoreServerUnmarshall(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ppMemory: **c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrPartialIgnoreClientBufferSize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    pMemory: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrPartialIgnoreServerInitialize(
    pStubMsg: *MIDL_STUB_MESSAGE,
    ppMemory: **c_void,
    pFormat: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn RpcUserFree(
    AsyncHandle: *c_void,
    pBuffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn MesEncodeIncrementalHandleCreate(
    UserState: *c_void,
    AllocFn: MIDL_ES_ALLOC,
    WriteFn: MIDL_ES_WRITE,
    pHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn MesDecodeIncrementalHandleCreate(
    UserState: *c_void,
    ReadFn: MIDL_ES_READ,
    pHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn MesIncrementalHandleReset(
    Handle: *c_void,
    UserState: *c_void,
    AllocFn: MIDL_ES_ALLOC,
    WriteFn: MIDL_ES_WRITE,
    ReadFn: MIDL_ES_READ,
    Operation: MIDL_ES_CODE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn MesEncodeFixedBufferHandleCreate(
    pBuffer: [*]i8,
    BufferSize: u32,
    pEncodedSize: *u32,
    pHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn MesEncodeDynBufferHandleCreate(
    pBuffer: **i8,
    pEncodedSize: *u32,
    pHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn MesDecodeBufferHandleCreate(
    Buffer: [*]i8,
    BufferSize: u32,
    pHandle: **c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn MesBufferHandleReset(
    Handle: *c_void,
    HandleStyle: u32,
    Operation: MIDL_ES_CODE,
    pBuffer: ?[*]?*i8,
    BufferSize: u32,
    pEncodedSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn MesHandleFree(
    Handle: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn MesInqProcEncodingId(
    Handle: *c_void,
    pInterfaceId: *RPC_SYNTAX_IDENTIFIER,
    pProcNum: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn NdrMesSimpleTypeAlignSize(
    param0: *c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "RPCRT4" fn NdrMesSimpleTypeDecode(
    Handle: *c_void,
    pObject: *c_void,
    Size: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrMesSimpleTypeEncode(
    Handle: *c_void,
    pStubDesc: *const MIDL_STUB_DESC,
    pObject: *const c_void,
    Size: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrMesTypeAlignSize(
    Handle: *c_void,
    pStubDesc: *const MIDL_STUB_DESC,
    pFormatString: *u8,
    pObject: *const c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "RPCRT4" fn NdrMesTypeEncode(
    Handle: *c_void,
    pStubDesc: *const MIDL_STUB_DESC,
    pFormatString: *u8,
    pObject: *const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrMesTypeDecode(
    Handle: *c_void,
    pStubDesc: *const MIDL_STUB_DESC,
    pFormatString: *u8,
    pObject: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrMesTypeAlignSize2(
    Handle: *c_void,
    pPicklingInfo: *const MIDL_TYPE_PICKLING_INFO,
    pStubDesc: *const MIDL_STUB_DESC,
    pFormatString: *u8,
    pObject: *const c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "RPCRT4" fn NdrMesTypeEncode2(
    Handle: *c_void,
    pPicklingInfo: *const MIDL_TYPE_PICKLING_INFO,
    pStubDesc: *const MIDL_STUB_DESC,
    pFormatString: *u8,
    pObject: *const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrMesTypeDecode2(
    Handle: *c_void,
    pPicklingInfo: *const MIDL_TYPE_PICKLING_INFO,
    pStubDesc: *const MIDL_STUB_DESC,
    pFormatString: *u8,
    pObject: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrMesTypeFree2(
    Handle: *c_void,
    pPicklingInfo: *const MIDL_TYPE_PICKLING_INFO,
    pStubDesc: *const MIDL_STUB_DESC,
    pFormatString: *u8,
    pObject: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrMesProcEncodeDecode(
    Handle: *c_void,
    pStubDesc: *const MIDL_STUB_DESC,
    pFormatString: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrMesProcEncodeDecode2(
    Handle: *c_void,
    pStubDesc: *const MIDL_STUB_DESC,
    pFormatString: *u8,
) callconv(@import("std").os.windows.WINAPI) CLIENT_CALL_RETURN;

pub extern "RPCRT4" fn NdrMesTypeAlignSize3(
    Handle: *c_void,
    pPicklingInfo: *const MIDL_TYPE_PICKLING_INFO,
    pProxyInfo: *const MIDL_STUBLESS_PROXY_INFO,
    ArrTypeOffset: *const *const u32,
    nTypeIndex: u32,
    pObject: *const c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "RPCRT4" fn NdrMesTypeEncode3(
    Handle: *c_void,
    pPicklingInfo: *const MIDL_TYPE_PICKLING_INFO,
    pProxyInfo: *const MIDL_STUBLESS_PROXY_INFO,
    ArrTypeOffset: *const *const u32,
    nTypeIndex: u32,
    pObject: *const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrMesTypeDecode3(
    Handle: *c_void,
    pPicklingInfo: *const MIDL_TYPE_PICKLING_INFO,
    pProxyInfo: *const MIDL_STUBLESS_PROXY_INFO,
    ArrTypeOffset: *const *const u32,
    nTypeIndex: u32,
    pObject: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrMesTypeFree3(
    Handle: *c_void,
    pPicklingInfo: *const MIDL_TYPE_PICKLING_INFO,
    pProxyInfo: *const MIDL_STUBLESS_PROXY_INFO,
    ArrTypeOffset: *const *const u32,
    nTypeIndex: u32,
    pObject: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrMesProcEncodeDecode3(
    Handle: *c_void,
    pProxyInfo: *const MIDL_STUBLESS_PROXY_INFO,
    nProcNum: u32,
    pReturnValue: *c_void,
) callconv(@import("std").os.windows.WINAPI) CLIENT_CALL_RETURN;

pub extern "RPCRT4" fn NdrMesSimpleTypeDecodeAll(
    Handle: *c_void,
    pProxyInfo: *const MIDL_STUBLESS_PROXY_INFO,
    pObject: *c_void,
    Size: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrMesSimpleTypeEncodeAll(
    Handle: *c_void,
    pProxyInfo: *const MIDL_STUBLESS_PROXY_INFO,
    pObject: *const c_void,
    Size: i16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RPCRT4" fn NdrMesSimpleTypeAlignSizeAll(
    Handle: *c_void,
    pProxyInfo: *const MIDL_STUBLESS_PROXY_INFO,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "RPCRT4" fn RpcCertGeneratePrincipalNameW(
    Context: *CERT_CONTEXT,
    Flags: u32,
    pBuffer: **u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn RpcCertGeneratePrincipalNameA(
    Context: *CERT_CONTEXT,
    Flags: u32,
    pBuffer: **u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "RPCRT4" fn IUnknown_QueryInterface_Proxy(
    This: *IUnknown,
    riid: *const Guid,
    ppvObject: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "RPCRT4" fn IUnknown_AddRef_Proxy(
    This: *IUnknown,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RPCRT4" fn IUnknown_Release_Proxy(
    This: *IUnknown,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (75)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const RPC_PROTSEQ_VECTOR = RPC_PROTSEQ_VECTORA;
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_ = RPC_HTTP_TRANSPORT_CREDENTIALS_A;
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V2_ = RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V3_ = RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A;
        pub const RPC_SECURITY_QOS_V2_ = RPC_SECURITY_QOS_V2_A;
        pub const RPC_SECURITY_QOS_V3_ = RPC_SECURITY_QOS_V3_A;
        pub const RPC_SECURITY_QOS_V4_ = RPC_SECURITY_QOS_V4_A;
        pub const RPC_SECURITY_QOS_V5_ = RPC_SECURITY_QOS_V5_A;
        pub const RPC_BINDING_HANDLE_TEMPLATE_V1_ = RPC_BINDING_HANDLE_TEMPLATE_V1_A;
        pub const RPC_BINDING_HANDLE_SECURITY_V1_ = RPC_BINDING_HANDLE_SECURITY_V1_A;
        pub const RPC_ENDPOINT_TEMPLATE = RPC_ENDPOINT_TEMPLATEA;
        pub const RPC_INTERFACE_TEMPLATE = RPC_INTERFACE_TEMPLATEA;
        pub const RPC_CALL_ATTRIBUTES_V1_ = RPC_CALL_ATTRIBUTES_V1_A;
        pub const RPC_CALL_ATTRIBUTES_V2_ = RPC_CALL_ATTRIBUTES_V2_A;
        pub const RPC_CALL_ATTRIBUTES_V3_ = RPC_CALL_ATTRIBUTES_V3_A;
        pub const RpcBindingFromStringBinding = RpcBindingFromStringBindingA;
        pub const RpcBindingToStringBinding = RpcBindingToStringBindingA;
        pub const RpcStringBindingCompose = RpcStringBindingComposeA;
        pub const RpcStringBindingParse = RpcStringBindingParseA;
        pub const RpcStringFree = RpcStringFreeA;
        pub const RpcNetworkIsProtseqValid = RpcNetworkIsProtseqValidA;
        pub const RpcNetworkInqProtseqs = RpcNetworkInqProtseqsA;
        pub const RpcProtseqVectorFree = RpcProtseqVectorFreeA;
        pub const RpcServerUseProtseq = RpcServerUseProtseqA;
        pub const RpcServerUseProtseqEx = RpcServerUseProtseqExA;
        pub const RpcServerUseProtseqEp = RpcServerUseProtseqEpA;
        pub const RpcServerUseProtseqEpEx = RpcServerUseProtseqEpExA;
        pub const RpcServerUseProtseqIf = RpcServerUseProtseqIfA;
        pub const RpcServerUseProtseqIfEx = RpcServerUseProtseqIfExA;
        pub const RpcMgmtInqServerPrincName = RpcMgmtInqServerPrincNameA;
        pub const RpcServerInqDefaultPrincName = RpcServerInqDefaultPrincNameA;
        pub const RpcNsBindingInqEntryName = RpcNsBindingInqEntryNameA;
        pub const RpcBindingCreate = RpcBindingCreateA;
        pub const RpcBindingInqAuthClient = RpcBindingInqAuthClientA;
        pub const RpcBindingInqAuthClientEx = RpcBindingInqAuthClientExA;
        pub const RpcBindingInqAuthInfo = RpcBindingInqAuthInfoA;
        pub const RpcBindingSetAuthInfo = RpcBindingSetAuthInfoA;
        pub const RpcBindingSetAuthInfoEx = RpcBindingSetAuthInfoExA;
        pub const RpcBindingInqAuthInfoEx = RpcBindingInqAuthInfoExA;
        pub const RpcServerRegisterAuthInfo = RpcServerRegisterAuthInfoA;
        pub const UuidToString = UuidToStringA;
        pub const UuidFromString = UuidFromStringA;
        pub const RpcEpRegisterNoReplace = RpcEpRegisterNoReplaceA;
        pub const RpcEpRegister = RpcEpRegisterA;
        pub const DceErrorInqText = DceErrorInqTextA;
        pub const RpcMgmtEpEltInqNext = RpcMgmtEpEltInqNextA;
        pub const RpcServerInterfaceGroupCreate = RpcServerInterfaceGroupCreateA;
        pub const I_RpcNsBindingSetEntryName = I_RpcNsBindingSetEntryNameA;
        pub const I_RpcServerUseProtseqEp2 = I_RpcServerUseProtseqEp2A;
        pub const I_RpcServerUseProtseq2 = I_RpcServerUseProtseq2A;
        pub const I_RpcBindingInqDynamicEndpoint = I_RpcBindingInqDynamicEndpointA;
        pub const RpcNsBindingExport = RpcNsBindingExportA;
        pub const RpcNsBindingUnexport = RpcNsBindingUnexportA;
        pub const RpcNsBindingExportPnP = RpcNsBindingExportPnPA;
        pub const RpcNsBindingUnexportPnP = RpcNsBindingUnexportPnPA;
        pub const RpcNsBindingLookupBegin = RpcNsBindingLookupBeginA;
        pub const RpcNsGroupDelete = RpcNsGroupDeleteA;
        pub const RpcNsGroupMbrAdd = RpcNsGroupMbrAddA;
        pub const RpcNsGroupMbrRemove = RpcNsGroupMbrRemoveA;
        pub const RpcNsGroupMbrInqBegin = RpcNsGroupMbrInqBeginA;
        pub const RpcNsGroupMbrInqNext = RpcNsGroupMbrInqNextA;
        pub const RpcNsProfileDelete = RpcNsProfileDeleteA;
        pub const RpcNsProfileEltAdd = RpcNsProfileEltAddA;
        pub const RpcNsProfileEltRemove = RpcNsProfileEltRemoveA;
        pub const RpcNsProfileEltInqBegin = RpcNsProfileEltInqBeginA;
        pub const RpcNsProfileEltInqNext = RpcNsProfileEltInqNextA;
        pub const RpcNsEntryObjectInqBegin = RpcNsEntryObjectInqBeginA;
        pub const RpcNsEntryExpandName = RpcNsEntryExpandNameA;
        pub const RpcNsMgmtBindingUnexport = RpcNsMgmtBindingUnexportA;
        pub const RpcNsMgmtEntryCreate = RpcNsMgmtEntryCreateA;
        pub const RpcNsMgmtEntryDelete = RpcNsMgmtEntryDeleteA;
        pub const RpcNsMgmtEntryInqIfIds = RpcNsMgmtEntryInqIfIdsA;
        pub const RpcNsBindingImportBegin = RpcNsBindingImportBeginA;
        pub const RpcServerInqCallAttributes = RpcServerInqCallAttributesA;
        pub const RpcCertGeneratePrincipalName = RpcCertGeneratePrincipalNameA;
    },
    .wide => struct {
        pub const RPC_PROTSEQ_VECTOR = RPC_PROTSEQ_VECTORW;
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_ = RPC_HTTP_TRANSPORT_CREDENTIALS_W;
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V2_ = RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V3_ = RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W;
        pub const RPC_SECURITY_QOS_V2_ = RPC_SECURITY_QOS_V2_W;
        pub const RPC_SECURITY_QOS_V3_ = RPC_SECURITY_QOS_V3_W;
        pub const RPC_SECURITY_QOS_V4_ = RPC_SECURITY_QOS_V4_W;
        pub const RPC_SECURITY_QOS_V5_ = RPC_SECURITY_QOS_V5_W;
        pub const RPC_BINDING_HANDLE_TEMPLATE_V1_ = RPC_BINDING_HANDLE_TEMPLATE_V1_W;
        pub const RPC_BINDING_HANDLE_SECURITY_V1_ = RPC_BINDING_HANDLE_SECURITY_V1_W;
        pub const RPC_ENDPOINT_TEMPLATE = RPC_ENDPOINT_TEMPLATEW;
        pub const RPC_INTERFACE_TEMPLATE = RPC_INTERFACE_TEMPLATEW;
        pub const RPC_CALL_ATTRIBUTES_V1_ = RPC_CALL_ATTRIBUTES_V1_W;
        pub const RPC_CALL_ATTRIBUTES_V2_ = RPC_CALL_ATTRIBUTES_V2_W;
        pub const RPC_CALL_ATTRIBUTES_V3_ = RPC_CALL_ATTRIBUTES_V3_W;
        pub const RpcBindingFromStringBinding = RpcBindingFromStringBindingW;
        pub const RpcBindingToStringBinding = RpcBindingToStringBindingW;
        pub const RpcStringBindingCompose = RpcStringBindingComposeW;
        pub const RpcStringBindingParse = RpcStringBindingParseW;
        pub const RpcStringFree = RpcStringFreeW;
        pub const RpcNetworkIsProtseqValid = RpcNetworkIsProtseqValidW;
        pub const RpcNetworkInqProtseqs = RpcNetworkInqProtseqsW;
        pub const RpcProtseqVectorFree = RpcProtseqVectorFreeW;
        pub const RpcServerUseProtseq = RpcServerUseProtseqW;
        pub const RpcServerUseProtseqEx = RpcServerUseProtseqExW;
        pub const RpcServerUseProtseqEp = RpcServerUseProtseqEpW;
        pub const RpcServerUseProtseqEpEx = RpcServerUseProtseqEpExW;
        pub const RpcServerUseProtseqIf = RpcServerUseProtseqIfW;
        pub const RpcServerUseProtseqIfEx = RpcServerUseProtseqIfExW;
        pub const RpcMgmtInqServerPrincName = RpcMgmtInqServerPrincNameW;
        pub const RpcServerInqDefaultPrincName = RpcServerInqDefaultPrincNameW;
        pub const RpcNsBindingInqEntryName = RpcNsBindingInqEntryNameW;
        pub const RpcBindingCreate = RpcBindingCreateW;
        pub const RpcBindingInqAuthClient = RpcBindingInqAuthClientW;
        pub const RpcBindingInqAuthClientEx = RpcBindingInqAuthClientExW;
        pub const RpcBindingInqAuthInfo = RpcBindingInqAuthInfoW;
        pub const RpcBindingSetAuthInfo = RpcBindingSetAuthInfoW;
        pub const RpcBindingSetAuthInfoEx = RpcBindingSetAuthInfoExW;
        pub const RpcBindingInqAuthInfoEx = RpcBindingInqAuthInfoExW;
        pub const RpcServerRegisterAuthInfo = RpcServerRegisterAuthInfoW;
        pub const UuidToString = UuidToStringW;
        pub const UuidFromString = UuidFromStringW;
        pub const RpcEpRegisterNoReplace = RpcEpRegisterNoReplaceW;
        pub const RpcEpRegister = RpcEpRegisterW;
        pub const DceErrorInqText = DceErrorInqTextW;
        pub const RpcMgmtEpEltInqNext = RpcMgmtEpEltInqNextW;
        pub const RpcServerInterfaceGroupCreate = RpcServerInterfaceGroupCreateW;
        pub const I_RpcNsBindingSetEntryName = I_RpcNsBindingSetEntryNameW;
        pub const I_RpcServerUseProtseqEp2 = I_RpcServerUseProtseqEp2W;
        pub const I_RpcServerUseProtseq2 = I_RpcServerUseProtseq2W;
        pub const I_RpcBindingInqDynamicEndpoint = I_RpcBindingInqDynamicEndpointW;
        pub const RpcNsBindingExport = RpcNsBindingExportW;
        pub const RpcNsBindingUnexport = RpcNsBindingUnexportW;
        pub const RpcNsBindingExportPnP = RpcNsBindingExportPnPW;
        pub const RpcNsBindingUnexportPnP = RpcNsBindingUnexportPnPW;
        pub const RpcNsBindingLookupBegin = RpcNsBindingLookupBeginW;
        pub const RpcNsGroupDelete = RpcNsGroupDeleteW;
        pub const RpcNsGroupMbrAdd = RpcNsGroupMbrAddW;
        pub const RpcNsGroupMbrRemove = RpcNsGroupMbrRemoveW;
        pub const RpcNsGroupMbrInqBegin = RpcNsGroupMbrInqBeginW;
        pub const RpcNsGroupMbrInqNext = RpcNsGroupMbrInqNextW;
        pub const RpcNsProfileDelete = RpcNsProfileDeleteW;
        pub const RpcNsProfileEltAdd = RpcNsProfileEltAddW;
        pub const RpcNsProfileEltRemove = RpcNsProfileEltRemoveW;
        pub const RpcNsProfileEltInqBegin = RpcNsProfileEltInqBeginW;
        pub const RpcNsProfileEltInqNext = RpcNsProfileEltInqNextW;
        pub const RpcNsEntryObjectInqBegin = RpcNsEntryObjectInqBeginW;
        pub const RpcNsEntryExpandName = RpcNsEntryExpandNameW;
        pub const RpcNsMgmtBindingUnexport = RpcNsMgmtBindingUnexportW;
        pub const RpcNsMgmtEntryCreate = RpcNsMgmtEntryCreateW;
        pub const RpcNsMgmtEntryDelete = RpcNsMgmtEntryDeleteW;
        pub const RpcNsMgmtEntryInqIfIds = RpcNsMgmtEntryInqIfIdsW;
        pub const RpcNsBindingImportBegin = RpcNsBindingImportBeginW;
        pub const RpcServerInqCallAttributes = RpcServerInqCallAttributesW;
        pub const RpcCertGeneratePrincipalName = RpcCertGeneratePrincipalNameW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const RPC_PROTSEQ_VECTOR = *opaque{};
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_ = *opaque{};
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V2_ = *opaque{};
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V3_ = *opaque{};
        pub const RPC_SECURITY_QOS_V2_ = *opaque{};
        pub const RPC_SECURITY_QOS_V3_ = *opaque{};
        pub const RPC_SECURITY_QOS_V4_ = *opaque{};
        pub const RPC_SECURITY_QOS_V5_ = *opaque{};
        pub const RPC_BINDING_HANDLE_TEMPLATE_V1_ = *opaque{};
        pub const RPC_BINDING_HANDLE_SECURITY_V1_ = *opaque{};
        pub const RPC_ENDPOINT_TEMPLATE = *opaque{};
        pub const RPC_INTERFACE_TEMPLATE = *opaque{};
        pub const RPC_CALL_ATTRIBUTES_V1_ = *opaque{};
        pub const RPC_CALL_ATTRIBUTES_V2_ = *opaque{};
        pub const RPC_CALL_ATTRIBUTES_V3_ = *opaque{};
        pub const RpcBindingFromStringBinding = *opaque{};
        pub const RpcBindingToStringBinding = *opaque{};
        pub const RpcStringBindingCompose = *opaque{};
        pub const RpcStringBindingParse = *opaque{};
        pub const RpcStringFree = *opaque{};
        pub const RpcNetworkIsProtseqValid = *opaque{};
        pub const RpcNetworkInqProtseqs = *opaque{};
        pub const RpcProtseqVectorFree = *opaque{};
        pub const RpcServerUseProtseq = *opaque{};
        pub const RpcServerUseProtseqEx = *opaque{};
        pub const RpcServerUseProtseqEp = *opaque{};
        pub const RpcServerUseProtseqEpEx = *opaque{};
        pub const RpcServerUseProtseqIf = *opaque{};
        pub const RpcServerUseProtseqIfEx = *opaque{};
        pub const RpcMgmtInqServerPrincName = *opaque{};
        pub const RpcServerInqDefaultPrincName = *opaque{};
        pub const RpcNsBindingInqEntryName = *opaque{};
        pub const RpcBindingCreate = *opaque{};
        pub const RpcBindingInqAuthClient = *opaque{};
        pub const RpcBindingInqAuthClientEx = *opaque{};
        pub const RpcBindingInqAuthInfo = *opaque{};
        pub const RpcBindingSetAuthInfo = *opaque{};
        pub const RpcBindingSetAuthInfoEx = *opaque{};
        pub const RpcBindingInqAuthInfoEx = *opaque{};
        pub const RpcServerRegisterAuthInfo = *opaque{};
        pub const UuidToString = *opaque{};
        pub const UuidFromString = *opaque{};
        pub const RpcEpRegisterNoReplace = *opaque{};
        pub const RpcEpRegister = *opaque{};
        pub const DceErrorInqText = *opaque{};
        pub const RpcMgmtEpEltInqNext = *opaque{};
        pub const RpcServerInterfaceGroupCreate = *opaque{};
        pub const I_RpcNsBindingSetEntryName = *opaque{};
        pub const I_RpcServerUseProtseqEp2 = *opaque{};
        pub const I_RpcServerUseProtseq2 = *opaque{};
        pub const I_RpcBindingInqDynamicEndpoint = *opaque{};
        pub const RpcNsBindingExport = *opaque{};
        pub const RpcNsBindingUnexport = *opaque{};
        pub const RpcNsBindingExportPnP = *opaque{};
        pub const RpcNsBindingUnexportPnP = *opaque{};
        pub const RpcNsBindingLookupBegin = *opaque{};
        pub const RpcNsGroupDelete = *opaque{};
        pub const RpcNsGroupMbrAdd = *opaque{};
        pub const RpcNsGroupMbrRemove = *opaque{};
        pub const RpcNsGroupMbrInqBegin = *opaque{};
        pub const RpcNsGroupMbrInqNext = *opaque{};
        pub const RpcNsProfileDelete = *opaque{};
        pub const RpcNsProfileEltAdd = *opaque{};
        pub const RpcNsProfileEltRemove = *opaque{};
        pub const RpcNsProfileEltInqBegin = *opaque{};
        pub const RpcNsProfileEltInqNext = *opaque{};
        pub const RpcNsEntryObjectInqBegin = *opaque{};
        pub const RpcNsEntryExpandName = *opaque{};
        pub const RpcNsMgmtBindingUnexport = *opaque{};
        pub const RpcNsMgmtEntryCreate = *opaque{};
        pub const RpcNsMgmtEntryDelete = *opaque{};
        pub const RpcNsMgmtEntryInqIfIds = *opaque{};
        pub const RpcNsBindingImportBegin = *opaque{};
        pub const RpcServerInqCallAttributes = *opaque{};
        pub const RpcCertGeneratePrincipalName = *opaque{};
    } else struct {
        pub const RPC_PROTSEQ_VECTOR = @compileError("'RPC_PROTSEQ_VECTOR' requires that UNICODE be set to true or false in the root module");
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_ = @compileError("'RPC_HTTP_TRANSPORT_CREDENTIALS_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V2_ = @compileError("'RPC_HTTP_TRANSPORT_CREDENTIALS_V2_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_HTTP_TRANSPORT_CREDENTIALS_V3_ = @compileError("'RPC_HTTP_TRANSPORT_CREDENTIALS_V3_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_SECURITY_QOS_V2_ = @compileError("'RPC_SECURITY_QOS_V2_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_SECURITY_QOS_V3_ = @compileError("'RPC_SECURITY_QOS_V3_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_SECURITY_QOS_V4_ = @compileError("'RPC_SECURITY_QOS_V4_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_SECURITY_QOS_V5_ = @compileError("'RPC_SECURITY_QOS_V5_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_BINDING_HANDLE_TEMPLATE_V1_ = @compileError("'RPC_BINDING_HANDLE_TEMPLATE_V1_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_BINDING_HANDLE_SECURITY_V1_ = @compileError("'RPC_BINDING_HANDLE_SECURITY_V1_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_ENDPOINT_TEMPLATE = @compileError("'RPC_ENDPOINT_TEMPLATE' requires that UNICODE be set to true or false in the root module");
        pub const RPC_INTERFACE_TEMPLATE = @compileError("'RPC_INTERFACE_TEMPLATE' requires that UNICODE be set to true or false in the root module");
        pub const RPC_CALL_ATTRIBUTES_V1_ = @compileError("'RPC_CALL_ATTRIBUTES_V1_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_CALL_ATTRIBUTES_V2_ = @compileError("'RPC_CALL_ATTRIBUTES_V2_' requires that UNICODE be set to true or false in the root module");
        pub const RPC_CALL_ATTRIBUTES_V3_ = @compileError("'RPC_CALL_ATTRIBUTES_V3_' requires that UNICODE be set to true or false in the root module");
        pub const RpcBindingFromStringBinding = @compileError("'RpcBindingFromStringBinding' requires that UNICODE be set to true or false in the root module");
        pub const RpcBindingToStringBinding = @compileError("'RpcBindingToStringBinding' requires that UNICODE be set to true or false in the root module");
        pub const RpcStringBindingCompose = @compileError("'RpcStringBindingCompose' requires that UNICODE be set to true or false in the root module");
        pub const RpcStringBindingParse = @compileError("'RpcStringBindingParse' requires that UNICODE be set to true or false in the root module");
        pub const RpcStringFree = @compileError("'RpcStringFree' requires that UNICODE be set to true or false in the root module");
        pub const RpcNetworkIsProtseqValid = @compileError("'RpcNetworkIsProtseqValid' requires that UNICODE be set to true or false in the root module");
        pub const RpcNetworkInqProtseqs = @compileError("'RpcNetworkInqProtseqs' requires that UNICODE be set to true or false in the root module");
        pub const RpcProtseqVectorFree = @compileError("'RpcProtseqVectorFree' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerUseProtseq = @compileError("'RpcServerUseProtseq' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerUseProtseqEx = @compileError("'RpcServerUseProtseqEx' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerUseProtseqEp = @compileError("'RpcServerUseProtseqEp' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerUseProtseqEpEx = @compileError("'RpcServerUseProtseqEpEx' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerUseProtseqIf = @compileError("'RpcServerUseProtseqIf' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerUseProtseqIfEx = @compileError("'RpcServerUseProtseqIfEx' requires that UNICODE be set to true or false in the root module");
        pub const RpcMgmtInqServerPrincName = @compileError("'RpcMgmtInqServerPrincName' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerInqDefaultPrincName = @compileError("'RpcServerInqDefaultPrincName' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsBindingInqEntryName = @compileError("'RpcNsBindingInqEntryName' requires that UNICODE be set to true or false in the root module");
        pub const RpcBindingCreate = @compileError("'RpcBindingCreate' requires that UNICODE be set to true or false in the root module");
        pub const RpcBindingInqAuthClient = @compileError("'RpcBindingInqAuthClient' requires that UNICODE be set to true or false in the root module");
        pub const RpcBindingInqAuthClientEx = @compileError("'RpcBindingInqAuthClientEx' requires that UNICODE be set to true or false in the root module");
        pub const RpcBindingInqAuthInfo = @compileError("'RpcBindingInqAuthInfo' requires that UNICODE be set to true or false in the root module");
        pub const RpcBindingSetAuthInfo = @compileError("'RpcBindingSetAuthInfo' requires that UNICODE be set to true or false in the root module");
        pub const RpcBindingSetAuthInfoEx = @compileError("'RpcBindingSetAuthInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const RpcBindingInqAuthInfoEx = @compileError("'RpcBindingInqAuthInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerRegisterAuthInfo = @compileError("'RpcServerRegisterAuthInfo' requires that UNICODE be set to true or false in the root module");
        pub const UuidToString = @compileError("'UuidToString' requires that UNICODE be set to true or false in the root module");
        pub const UuidFromString = @compileError("'UuidFromString' requires that UNICODE be set to true or false in the root module");
        pub const RpcEpRegisterNoReplace = @compileError("'RpcEpRegisterNoReplace' requires that UNICODE be set to true or false in the root module");
        pub const RpcEpRegister = @compileError("'RpcEpRegister' requires that UNICODE be set to true or false in the root module");
        pub const DceErrorInqText = @compileError("'DceErrorInqText' requires that UNICODE be set to true or false in the root module");
        pub const RpcMgmtEpEltInqNext = @compileError("'RpcMgmtEpEltInqNext' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerInterfaceGroupCreate = @compileError("'RpcServerInterfaceGroupCreate' requires that UNICODE be set to true or false in the root module");
        pub const I_RpcNsBindingSetEntryName = @compileError("'I_RpcNsBindingSetEntryName' requires that UNICODE be set to true or false in the root module");
        pub const I_RpcServerUseProtseqEp2 = @compileError("'I_RpcServerUseProtseqEp2' requires that UNICODE be set to true or false in the root module");
        pub const I_RpcServerUseProtseq2 = @compileError("'I_RpcServerUseProtseq2' requires that UNICODE be set to true or false in the root module");
        pub const I_RpcBindingInqDynamicEndpoint = @compileError("'I_RpcBindingInqDynamicEndpoint' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsBindingExport = @compileError("'RpcNsBindingExport' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsBindingUnexport = @compileError("'RpcNsBindingUnexport' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsBindingExportPnP = @compileError("'RpcNsBindingExportPnP' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsBindingUnexportPnP = @compileError("'RpcNsBindingUnexportPnP' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsBindingLookupBegin = @compileError("'RpcNsBindingLookupBegin' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsGroupDelete = @compileError("'RpcNsGroupDelete' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsGroupMbrAdd = @compileError("'RpcNsGroupMbrAdd' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsGroupMbrRemove = @compileError("'RpcNsGroupMbrRemove' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsGroupMbrInqBegin = @compileError("'RpcNsGroupMbrInqBegin' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsGroupMbrInqNext = @compileError("'RpcNsGroupMbrInqNext' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsProfileDelete = @compileError("'RpcNsProfileDelete' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsProfileEltAdd = @compileError("'RpcNsProfileEltAdd' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsProfileEltRemove = @compileError("'RpcNsProfileEltRemove' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsProfileEltInqBegin = @compileError("'RpcNsProfileEltInqBegin' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsProfileEltInqNext = @compileError("'RpcNsProfileEltInqNext' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsEntryObjectInqBegin = @compileError("'RpcNsEntryObjectInqBegin' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsEntryExpandName = @compileError("'RpcNsEntryExpandName' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsMgmtBindingUnexport = @compileError("'RpcNsMgmtBindingUnexport' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsMgmtEntryCreate = @compileError("'RpcNsMgmtEntryCreate' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsMgmtEntryDelete = @compileError("'RpcNsMgmtEntryDelete' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsMgmtEntryInqIfIds = @compileError("'RpcNsMgmtEntryInqIfIds' requires that UNICODE be set to true or false in the root module");
        pub const RpcNsBindingImportBegin = @compileError("'RpcNsBindingImportBegin' requires that UNICODE be set to true or false in the root module");
        pub const RpcServerInqCallAttributes = @compileError("'RpcServerInqCallAttributes' requires that UNICODE be set to true or false in the root module");
        pub const RpcCertGeneratePrincipalName = @compileError("'RpcCertGeneratePrincipalName' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (13)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const SEC_WINNT_AUTH_IDENTITY_A = @import("security.zig").SEC_WINNT_AUTH_IDENTITY_A;
const PWSTR = @import("system_services.zig").PWSTR;
const LARGE_INTEGER = @import("system_services.zig").LARGE_INTEGER;
const CERT_CONTEXT = @import("security.zig").CERT_CONTEXT;
const IUnknown = @import("com.zig").IUnknown;
const IRpcChannelBuffer = @import("com.zig").IRpcChannelBuffer;
const HRESULT = @import("com.zig").HRESULT;
const IRpcStubBuffer = @import("com.zig").IRpcStubBuffer;
const SEC_WINNT_AUTH_IDENTITY_W = @import("security.zig").SEC_WINNT_AUTH_IDENTITY_W;
const HANDLE = @import("system_services.zig").HANDLE;
const BOOL = @import("system_services.zig").BOOL;
const LUID = @import("kernel.zig").LUID;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = RPC_OBJECT_INQ_FN;
    _ = RPC_IF_CALLBACK_FN;
    _ = RPC_SECURITY_CALLBACK_FN;
    _ = RPC_NEW_HTTP_PROXY_CHANNEL;
    _ = RPC_HTTP_PROXY_FREE_STRING;
    _ = RPC_AUTH_KEY_RETRIEVAL_FN;
    _ = RPC_MGMT_AUTHORIZATION_FN;
    _ = RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN;
    _ = RPC_FORWARD_FUNCTION;
    _ = RPC_ADDRESS_CHANGE_FN;
    _ = RPC_DISPATCH_FUNCTION;
    _ = PRPC_RUNDOWN;
    _ = RPCLT_PDU_FILTER_FUNC;
    _ = RPC_SETFILTER_FUNC;
    _ = RPC_BLOCKING_FN;
    _ = I_RpcProxyIsValidMachineFn;
    _ = I_RpcProxyGetClientAddressFn;
    _ = I_RpcProxyGetConnectionTimeoutFn;
    _ = I_RpcPerformCalloutFn;
    _ = I_RpcFreeCalloutStateFn;
    _ = I_RpcProxyGetClientSessionAndResourceUUID;
    _ = I_RpcProxyFilterIfFn;
    _ = I_RpcProxyUpdatePerfCounterFn;
    _ = I_RpcProxyUpdatePerfCounterBackendServerFn;
    _ = RPCNOTIFICATION_ROUTINE;
    _ = PFN_RPCNOTIFICATION_ROUTINE;
    _ = NDR_RUNDOWN;
    _ = NDR_NOTIFY_ROUTINE;
    _ = NDR_NOTIFY2_ROUTINE;
    _ = EXPR_EVAL;
    _ = GENERIC_BINDING_ROUTINE;
    _ = GENERIC_UNBIND_ROUTINE;
    _ = XMIT_HELPER_ROUTINE;
    _ = USER_MARSHAL_SIZING_ROUTINE;
    _ = USER_MARSHAL_MARSHALLING_ROUTINE;
    _ = USER_MARSHAL_UNMARSHALLING_ROUTINE;
    _ = USER_MARSHAL_FREEING_ROUTINE;
    _ = CS_TYPE_NET_SIZE_ROUTINE;
    _ = CS_TYPE_LOCAL_SIZE_ROUTINE;
    _ = CS_TYPE_TO_NETCS_ROUTINE;
    _ = CS_TYPE_FROM_NETCS_ROUTINE;
    _ = CS_TAG_GETTING_ROUTINE;
    _ = STUB_THUNK;
    _ = SERVER_ROUTINE;
    _ = RPC_CLIENT_ALLOC;
    _ = RPC_CLIENT_FREE;
    _ = MIDL_ES_ALLOC;
    _ = MIDL_ES_WRITE;
    _ = MIDL_ES_READ;

    const constant_export_count = 2;
    const type_export_count = 161;
    const enum_value_export_count = 93;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 491;
    const unicode_alias_count = 75;
    const import_count = 13;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

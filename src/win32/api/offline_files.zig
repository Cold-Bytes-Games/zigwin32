//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (51)
//--------------------------------------------------------------------------------
const CLSID_OfflineFilesSetting_Value = @import("../zig.zig").Guid.initString("FD3659E9-A920-4123-AD64-7FC76C7AACDF");
pub const CLSID_OfflineFilesSetting = &CLSID_OfflineFilesSetting_Value;

const CLSID_OfflineFilesCache_Value = @import("../zig.zig").Guid.initString("48C6BE7C-3871-43CC-B46F-1449A1BB2FF3");
pub const CLSID_OfflineFilesCache = &CLSID_OfflineFilesCache_Value;

pub const OFFLINEFILES_ITEM_TYPE = extern enum(i32) {
    FILE = 0,
    DIRECTORY = 1,
    SHARE = 2,
    SERVER = 3,
};
pub const OFFLINEFILES_ITEM_TYPE_FILE = OFFLINEFILES_ITEM_TYPE.FILE;
pub const OFFLINEFILES_ITEM_TYPE_DIRECTORY = OFFLINEFILES_ITEM_TYPE.DIRECTORY;
pub const OFFLINEFILES_ITEM_TYPE_SHARE = OFFLINEFILES_ITEM_TYPE.SHARE;
pub const OFFLINEFILES_ITEM_TYPE_SERVER = OFFLINEFILES_ITEM_TYPE.SERVER;

pub const OFFLINEFILES_ITEM_COPY = extern enum(i32) {
    LOCAL = 0,
    REMOTE = 1,
    ORIGINAL = 2,
};
pub const OFFLINEFILES_ITEM_COPY_LOCAL = OFFLINEFILES_ITEM_COPY.LOCAL;
pub const OFFLINEFILES_ITEM_COPY_REMOTE = OFFLINEFILES_ITEM_COPY.REMOTE;
pub const OFFLINEFILES_ITEM_COPY_ORIGINAL = OFFLINEFILES_ITEM_COPY.ORIGINAL;

pub const OFFLINEFILES_CONNECT_STATE = extern enum(i32) {
    UNKNOWN = 0,
    OFFLINE = 1,
    ONLINE = 2,
    TRANSPARENTLY_CACHED = 3,
    PARTLY_TRANSPARENTLY_CACHED = 4,
};
pub const OFFLINEFILES_CONNECT_STATE_UNKNOWN = OFFLINEFILES_CONNECT_STATE.UNKNOWN;
pub const OFFLINEFILES_CONNECT_STATE_OFFLINE = OFFLINEFILES_CONNECT_STATE.OFFLINE;
pub const OFFLINEFILES_CONNECT_STATE_ONLINE = OFFLINEFILES_CONNECT_STATE.ONLINE;
pub const OFFLINEFILES_CONNECT_STATE_TRANSPARENTLY_CACHED = OFFLINEFILES_CONNECT_STATE.TRANSPARENTLY_CACHED;
pub const OFFLINEFILES_CONNECT_STATE_PARTLY_TRANSPARENTLY_CACHED = OFFLINEFILES_CONNECT_STATE.PARTLY_TRANSPARENTLY_CACHED;

pub const OFFLINEFILES_OFFLINE_REASON = extern enum(i32) {
    UNKNOWN = 0,
    NOT_APPLICABLE = 1,
    CONNECTION_FORCED = 2,
    CONNECTION_SLOW = 3,
    CONNECTION_ERROR = 4,
    ITEM_VERSION_CONFLICT = 5,
    ITEM_SUSPENDED = 6,
};
pub const OFFLINEFILES_OFFLINE_REASON_UNKNOWN = OFFLINEFILES_OFFLINE_REASON.UNKNOWN;
pub const OFFLINEFILES_OFFLINE_REASON_NOT_APPLICABLE = OFFLINEFILES_OFFLINE_REASON.NOT_APPLICABLE;
pub const OFFLINEFILES_OFFLINE_REASON_CONNECTION_FORCED = OFFLINEFILES_OFFLINE_REASON.CONNECTION_FORCED;
pub const OFFLINEFILES_OFFLINE_REASON_CONNECTION_SLOW = OFFLINEFILES_OFFLINE_REASON.CONNECTION_SLOW;
pub const OFFLINEFILES_OFFLINE_REASON_CONNECTION_ERROR = OFFLINEFILES_OFFLINE_REASON.CONNECTION_ERROR;
pub const OFFLINEFILES_OFFLINE_REASON_ITEM_VERSION_CONFLICT = OFFLINEFILES_OFFLINE_REASON.ITEM_VERSION_CONFLICT;
pub const OFFLINEFILES_OFFLINE_REASON_ITEM_SUSPENDED = OFFLINEFILES_OFFLINE_REASON.ITEM_SUSPENDED;

pub const OFFLINEFILES_CACHING_MODE = extern enum(i32) {
    NONE = 0,
    NOCACHING = 1,
    MANUAL = 2,
    AUTO_DOC = 3,
    AUTO_PROGANDDOC = 4,
};
pub const OFFLINEFILES_CACHING_MODE_NONE = OFFLINEFILES_CACHING_MODE.NONE;
pub const OFFLINEFILES_CACHING_MODE_NOCACHING = OFFLINEFILES_CACHING_MODE.NOCACHING;
pub const OFFLINEFILES_CACHING_MODE_MANUAL = OFFLINEFILES_CACHING_MODE.MANUAL;
pub const OFFLINEFILES_CACHING_MODE_AUTO_DOC = OFFLINEFILES_CACHING_MODE.AUTO_DOC;
pub const OFFLINEFILES_CACHING_MODE_AUTO_PROGANDDOC = OFFLINEFILES_CACHING_MODE.AUTO_PROGANDDOC;

pub const OFFLINEFILES_OP_RESPONSE = extern enum(i32) {
    OFFLINEFILES_OP_CONTINUE = 0,
    OFFLINEFILES_OP_RETRY = 1,
    OFFLINEFILES_OP_ABORT = 2,
};
pub const OFFLINEFILES_OP_CONTINUE = OFFLINEFILES_OP_RESPONSE.OFFLINEFILES_OP_CONTINUE;
pub const OFFLINEFILES_OP_RETRY = OFFLINEFILES_OP_RESPONSE.OFFLINEFILES_OP_RETRY;
pub const OFFLINEFILES_OP_ABORT = OFFLINEFILES_OP_RESPONSE.OFFLINEFILES_OP_ABORT;

pub const OFFLINEFILES_EVENTS = extern enum(i32) {
    OFFLINEFILES_EVENT_CACHEMOVED = 0,
    OFFLINEFILES_EVENT_CACHEISFULL = 1,
    OFFLINEFILES_EVENT_CACHEISCORRUPTED = 2,
    OFFLINEFILES_EVENT_ENABLED = 3,
    OFFLINEFILES_EVENT_ENCRYPTIONCHANGED = 4,
    OFFLINEFILES_EVENT_SYNCBEGIN = 5,
    OFFLINEFILES_EVENT_SYNCFILERESULT = 6,
    OFFLINEFILES_EVENT_SYNCCONFLICTRECADDED = 7,
    OFFLINEFILES_EVENT_SYNCCONFLICTRECUPDATED = 8,
    OFFLINEFILES_EVENT_SYNCCONFLICTRECREMOVED = 9,
    OFFLINEFILES_EVENT_SYNCEND = 10,
    OFFLINEFILES_EVENT_BACKGROUNDSYNCBEGIN = 11,
    OFFLINEFILES_EVENT_BACKGROUNDSYNCEND = 12,
    OFFLINEFILES_EVENT_NETTRANSPORTARRIVED = 13,
    OFFLINEFILES_EVENT_NONETTRANSPORTS = 14,
    OFFLINEFILES_EVENT_ITEMDISCONNECTED = 15,
    OFFLINEFILES_EVENT_ITEMRECONNECTED = 16,
    OFFLINEFILES_EVENT_ITEMAVAILABLEOFFLINE = 17,
    OFFLINEFILES_EVENT_ITEMNOTAVAILABLEOFFLINE = 18,
    OFFLINEFILES_EVENT_ITEMPINNED = 19,
    OFFLINEFILES_EVENT_ITEMNOTPINNED = 20,
    OFFLINEFILES_EVENT_ITEMMODIFIED = 21,
    OFFLINEFILES_EVENT_ITEMADDEDTOCACHE = 22,
    OFFLINEFILES_EVENT_ITEMDELETEDFROMCACHE = 23,
    OFFLINEFILES_EVENT_ITEMRENAMED = 24,
    OFFLINEFILES_EVENT_DATALOST = 25,
    OFFLINEFILES_EVENT_PING = 26,
    OFFLINEFILES_EVENT_ITEMRECONNECTBEGIN = 27,
    OFFLINEFILES_EVENT_ITEMRECONNECTEND = 28,
    OFFLINEFILES_EVENT_CACHEEVICTBEGIN = 29,
    OFFLINEFILES_EVENT_CACHEEVICTEND = 30,
    OFFLINEFILES_EVENT_POLICYCHANGEDETECTED = 31,
    OFFLINEFILES_EVENT_PREFERENCECHANGEDETECTED = 32,
    OFFLINEFILES_EVENT_SETTINGSCHANGESAPPLIED = 33,
    OFFLINEFILES_EVENT_TRANSPARENTCACHEITEMNOTIFY = 34,
    OFFLINEFILES_EVENT_PREFETCHFILEBEGIN = 35,
    OFFLINEFILES_EVENT_PREFETCHFILEEND = 36,
    OFFLINEFILES_EVENT_PREFETCHCLOSEHANDLEBEGIN = 37,
    OFFLINEFILES_EVENT_PREFETCHCLOSEHANDLEEND = 38,
    OFFLINEFILES_NUM_EVENTS = 39,
};
pub const OFFLINEFILES_EVENT_CACHEMOVED = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_CACHEMOVED;
pub const OFFLINEFILES_EVENT_CACHEISFULL = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_CACHEISFULL;
pub const OFFLINEFILES_EVENT_CACHEISCORRUPTED = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_CACHEISCORRUPTED;
pub const OFFLINEFILES_EVENT_ENABLED = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_ENABLED;
pub const OFFLINEFILES_EVENT_ENCRYPTIONCHANGED = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_ENCRYPTIONCHANGED;
pub const OFFLINEFILES_EVENT_SYNCBEGIN = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_SYNCBEGIN;
pub const OFFLINEFILES_EVENT_SYNCFILERESULT = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_SYNCFILERESULT;
pub const OFFLINEFILES_EVENT_SYNCCONFLICTRECADDED = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_SYNCCONFLICTRECADDED;
pub const OFFLINEFILES_EVENT_SYNCCONFLICTRECUPDATED = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_SYNCCONFLICTRECUPDATED;
pub const OFFLINEFILES_EVENT_SYNCCONFLICTRECREMOVED = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_SYNCCONFLICTRECREMOVED;
pub const OFFLINEFILES_EVENT_SYNCEND = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_SYNCEND;
pub const OFFLINEFILES_EVENT_BACKGROUNDSYNCBEGIN = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_BACKGROUNDSYNCBEGIN;
pub const OFFLINEFILES_EVENT_BACKGROUNDSYNCEND = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_BACKGROUNDSYNCEND;
pub const OFFLINEFILES_EVENT_NETTRANSPORTARRIVED = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_NETTRANSPORTARRIVED;
pub const OFFLINEFILES_EVENT_NONETTRANSPORTS = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_NONETTRANSPORTS;
pub const OFFLINEFILES_EVENT_ITEMDISCONNECTED = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_ITEMDISCONNECTED;
pub const OFFLINEFILES_EVENT_ITEMRECONNECTED = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_ITEMRECONNECTED;
pub const OFFLINEFILES_EVENT_ITEMAVAILABLEOFFLINE = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_ITEMAVAILABLEOFFLINE;
pub const OFFLINEFILES_EVENT_ITEMNOTAVAILABLEOFFLINE = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_ITEMNOTAVAILABLEOFFLINE;
pub const OFFLINEFILES_EVENT_ITEMPINNED = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_ITEMPINNED;
pub const OFFLINEFILES_EVENT_ITEMNOTPINNED = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_ITEMNOTPINNED;
pub const OFFLINEFILES_EVENT_ITEMMODIFIED = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_ITEMMODIFIED;
pub const OFFLINEFILES_EVENT_ITEMADDEDTOCACHE = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_ITEMADDEDTOCACHE;
pub const OFFLINEFILES_EVENT_ITEMDELETEDFROMCACHE = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_ITEMDELETEDFROMCACHE;
pub const OFFLINEFILES_EVENT_ITEMRENAMED = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_ITEMRENAMED;
pub const OFFLINEFILES_EVENT_DATALOST = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_DATALOST;
pub const OFFLINEFILES_EVENT_PING = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_PING;
pub const OFFLINEFILES_EVENT_ITEMRECONNECTBEGIN = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_ITEMRECONNECTBEGIN;
pub const OFFLINEFILES_EVENT_ITEMRECONNECTEND = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_ITEMRECONNECTEND;
pub const OFFLINEFILES_EVENT_CACHEEVICTBEGIN = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_CACHEEVICTBEGIN;
pub const OFFLINEFILES_EVENT_CACHEEVICTEND = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_CACHEEVICTEND;
pub const OFFLINEFILES_EVENT_POLICYCHANGEDETECTED = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_POLICYCHANGEDETECTED;
pub const OFFLINEFILES_EVENT_PREFERENCECHANGEDETECTED = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_PREFERENCECHANGEDETECTED;
pub const OFFLINEFILES_EVENT_SETTINGSCHANGESAPPLIED = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_SETTINGSCHANGESAPPLIED;
pub const OFFLINEFILES_EVENT_TRANSPARENTCACHEITEMNOTIFY = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_TRANSPARENTCACHEITEMNOTIFY;
pub const OFFLINEFILES_EVENT_PREFETCHFILEBEGIN = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_PREFETCHFILEBEGIN;
pub const OFFLINEFILES_EVENT_PREFETCHFILEEND = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_PREFETCHFILEEND;
pub const OFFLINEFILES_EVENT_PREFETCHCLOSEHANDLEBEGIN = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_PREFETCHCLOSEHANDLEBEGIN;
pub const OFFLINEFILES_EVENT_PREFETCHCLOSEHANDLEEND = OFFLINEFILES_EVENTS.OFFLINEFILES_EVENT_PREFETCHCLOSEHANDLEEND;
pub const OFFLINEFILES_NUM_EVENTS = OFFLINEFILES_EVENTS.OFFLINEFILES_NUM_EVENTS;

pub const OFFLINEFILES_PATHFILTER_MATCH = extern enum(i32) {
    OFFLINEFILES_PATHFILTER_SELF = 0,
    OFFLINEFILES_PATHFILTER_CHILD = 1,
    OFFLINEFILES_PATHFILTER_DESCENDENT = 2,
    OFFLINEFILES_PATHFILTER_SELFORCHILD = 3,
    OFFLINEFILES_PATHFILTER_SELFORDESCENDENT = 4,
};
pub const OFFLINEFILES_PATHFILTER_SELF = OFFLINEFILES_PATHFILTER_MATCH.OFFLINEFILES_PATHFILTER_SELF;
pub const OFFLINEFILES_PATHFILTER_CHILD = OFFLINEFILES_PATHFILTER_MATCH.OFFLINEFILES_PATHFILTER_CHILD;
pub const OFFLINEFILES_PATHFILTER_DESCENDENT = OFFLINEFILES_PATHFILTER_MATCH.OFFLINEFILES_PATHFILTER_DESCENDENT;
pub const OFFLINEFILES_PATHFILTER_SELFORCHILD = OFFLINEFILES_PATHFILTER_MATCH.OFFLINEFILES_PATHFILTER_SELFORCHILD;
pub const OFFLINEFILES_PATHFILTER_SELFORDESCENDENT = OFFLINEFILES_PATHFILTER_MATCH.OFFLINEFILES_PATHFILTER_SELFORDESCENDENT;

pub const OFFLINEFILES_SYNC_CONFLICT_RESOLVE = extern enum(i32) {
    NONE = 0,
    KEEPLOCAL = 1,
    KEEPREMOTE = 2,
    KEEPALLCHANGES = 3,
    KEEPLATEST = 4,
    LOG = 5,
    SKIP = 6,
    OFFLINEFILES_SYNC_CONFLICT_ABORT = 7,
    NUMCODES = 8,
};
pub const OFFLINEFILES_SYNC_CONFLICT_RESOLVE_NONE = OFFLINEFILES_SYNC_CONFLICT_RESOLVE.NONE;
pub const OFFLINEFILES_SYNC_CONFLICT_RESOLVE_KEEPLOCAL = OFFLINEFILES_SYNC_CONFLICT_RESOLVE.KEEPLOCAL;
pub const OFFLINEFILES_SYNC_CONFLICT_RESOLVE_KEEPREMOTE = OFFLINEFILES_SYNC_CONFLICT_RESOLVE.KEEPREMOTE;
pub const OFFLINEFILES_SYNC_CONFLICT_RESOLVE_KEEPALLCHANGES = OFFLINEFILES_SYNC_CONFLICT_RESOLVE.KEEPALLCHANGES;
pub const OFFLINEFILES_SYNC_CONFLICT_RESOLVE_KEEPLATEST = OFFLINEFILES_SYNC_CONFLICT_RESOLVE.KEEPLATEST;
pub const OFFLINEFILES_SYNC_CONFLICT_RESOLVE_LOG = OFFLINEFILES_SYNC_CONFLICT_RESOLVE.LOG;
pub const OFFLINEFILES_SYNC_CONFLICT_RESOLVE_SKIP = OFFLINEFILES_SYNC_CONFLICT_RESOLVE.SKIP;
pub const OFFLINEFILES_SYNC_CONFLICT_ABORT = OFFLINEFILES_SYNC_CONFLICT_RESOLVE.OFFLINEFILES_SYNC_CONFLICT_ABORT;
pub const OFFLINEFILES_SYNC_CONFLICT_RESOLVE_NUMCODES = OFFLINEFILES_SYNC_CONFLICT_RESOLVE.NUMCODES;

pub const OFFLINEFILES_ITEM_TIME = extern enum(i32) {
    CREATION = 0,
    LASTACCESS = 1,
    LASTWRITE = 2,
};
pub const OFFLINEFILES_ITEM_TIME_CREATION = OFFLINEFILES_ITEM_TIME.CREATION;
pub const OFFLINEFILES_ITEM_TIME_LASTACCESS = OFFLINEFILES_ITEM_TIME.LASTACCESS;
pub const OFFLINEFILES_ITEM_TIME_LASTWRITE = OFFLINEFILES_ITEM_TIME.LASTWRITE;

pub const OFFLINEFILES_COMPARE = extern enum(i32) {
    EQ = 0,
    NEQ = 1,
    LT = 2,
    GT = 3,
    LTE = 4,
    GTE = 5,
};
pub const OFFLINEFILES_COMPARE_EQ = OFFLINEFILES_COMPARE.EQ;
pub const OFFLINEFILES_COMPARE_NEQ = OFFLINEFILES_COMPARE.NEQ;
pub const OFFLINEFILES_COMPARE_LT = OFFLINEFILES_COMPARE.LT;
pub const OFFLINEFILES_COMPARE_GT = OFFLINEFILES_COMPARE.GT;
pub const OFFLINEFILES_COMPARE_LTE = OFFLINEFILES_COMPARE.LTE;
pub const OFFLINEFILES_COMPARE_GTE = OFFLINEFILES_COMPARE.GTE;

pub const OFFLINEFILES_SETTING_VALUE_TYPE = extern enum(i32) {
    OFFLINEFILES_SETTING_VALUE_UI4 = 0,
    OFFLINEFILES_SETTING_VALUE_BSTR = 1,
    OFFLINEFILES_SETTING_VALUE_BSTR_DBLNULTERM = 2,
    OFFLINEFILES_SETTING_VALUE_2DIM_ARRAY_BSTR_UI4 = 3,
    OFFLINEFILES_SETTING_VALUE_2DIM_ARRAY_BSTR_BSTR = 4,
};
pub const OFFLINEFILES_SETTING_VALUE_UI4 = OFFLINEFILES_SETTING_VALUE_TYPE.OFFLINEFILES_SETTING_VALUE_UI4;
pub const OFFLINEFILES_SETTING_VALUE_BSTR = OFFLINEFILES_SETTING_VALUE_TYPE.OFFLINEFILES_SETTING_VALUE_BSTR;
pub const OFFLINEFILES_SETTING_VALUE_BSTR_DBLNULTERM = OFFLINEFILES_SETTING_VALUE_TYPE.OFFLINEFILES_SETTING_VALUE_BSTR_DBLNULTERM;
pub const OFFLINEFILES_SETTING_VALUE_2DIM_ARRAY_BSTR_UI4 = OFFLINEFILES_SETTING_VALUE_TYPE.OFFLINEFILES_SETTING_VALUE_2DIM_ARRAY_BSTR_UI4;
pub const OFFLINEFILES_SETTING_VALUE_2DIM_ARRAY_BSTR_BSTR = OFFLINEFILES_SETTING_VALUE_TYPE.OFFLINEFILES_SETTING_VALUE_2DIM_ARRAY_BSTR_BSTR;

pub const OFFLINEFILES_SYNC_OPERATION = extern enum(i32) {
    CREATE_COPY_ON_SERVER = 0,
    CREATE_COPY_ON_CLIENT = 1,
    SYNC_TO_SERVER = 2,
    SYNC_TO_CLIENT = 3,
    DELETE_SERVER_COPY = 4,
    DELETE_CLIENT_COPY = 5,
    PIN = 6,
    PREPARE = 7,
};
pub const OFFLINEFILES_SYNC_OPERATION_CREATE_COPY_ON_SERVER = OFFLINEFILES_SYNC_OPERATION.CREATE_COPY_ON_SERVER;
pub const OFFLINEFILES_SYNC_OPERATION_CREATE_COPY_ON_CLIENT = OFFLINEFILES_SYNC_OPERATION.CREATE_COPY_ON_CLIENT;
pub const OFFLINEFILES_SYNC_OPERATION_SYNC_TO_SERVER = OFFLINEFILES_SYNC_OPERATION.SYNC_TO_SERVER;
pub const OFFLINEFILES_SYNC_OPERATION_SYNC_TO_CLIENT = OFFLINEFILES_SYNC_OPERATION.SYNC_TO_CLIENT;
pub const OFFLINEFILES_SYNC_OPERATION_DELETE_SERVER_COPY = OFFLINEFILES_SYNC_OPERATION.DELETE_SERVER_COPY;
pub const OFFLINEFILES_SYNC_OPERATION_DELETE_CLIENT_COPY = OFFLINEFILES_SYNC_OPERATION.DELETE_CLIENT_COPY;
pub const OFFLINEFILES_SYNC_OPERATION_PIN = OFFLINEFILES_SYNC_OPERATION.PIN;
pub const OFFLINEFILES_SYNC_OPERATION_PREPARE = OFFLINEFILES_SYNC_OPERATION.PREPARE;

pub const OFFLINEFILES_SYNC_STATE = extern enum(i32) {
    Stable = 0,
    FileOnClient_DirOnServer = 1,
    FileOnClient_NoServerCopy = 2,
    DirOnClient_FileOnServer = 3,
    DirOnClient_FileChangedOnServer = 4,
    DirOnClient_NoServerCopy = 5,
    FileCreatedOnClient_NoServerCopy = 6,
    FileCreatedOnClient_FileChangedOnServer = 7,
    FileCreatedOnClient_DirChangedOnServer = 8,
    FileCreatedOnClient_FileOnServer = 9,
    FileCreatedOnClient_DirOnServer = 10,
    FileCreatedOnClient_DeletedOnServer = 11,
    FileChangedOnClient_ChangedOnServer = 12,
    FileChangedOnClient_DirOnServer = 13,
    FileChangedOnClient_DirChangedOnServer = 14,
    FileChangedOnClient_DeletedOnServer = 15,
    FileSparseOnClient_ChangedOnServer = 16,
    FileSparseOnClient_DeletedOnServer = 17,
    FileSparseOnClient_DirOnServer = 18,
    FileSparseOnClient_DirChangedOnServer = 19,
    DirCreatedOnClient_NoServerCopy = 20,
    DirCreatedOnClient_DirOnServer = 21,
    DirCreatedOnClient_FileOnServer = 22,
    DirCreatedOnClient_FileChangedOnServer = 23,
    DirCreatedOnClient_DirChangedOnServer = 24,
    DirCreatedOnClient_DeletedOnServer = 25,
    DirChangedOnClient_FileOnServer = 26,
    DirChangedOnClient_FileChangedOnServer = 27,
    DirChangedOnClient_ChangedOnServer = 28,
    DirChangedOnClient_DeletedOnServer = 29,
    NoClientCopy_FileOnServer = 30,
    NoClientCopy_DirOnServer = 31,
    NoClientCopy_FileChangedOnServer = 32,
    NoClientCopy_DirChangedOnServer = 33,
    DeletedOnClient_FileOnServer = 34,
    DeletedOnClient_DirOnServer = 35,
    DeletedOnClient_FileChangedOnServer = 36,
    DeletedOnClient_DirChangedOnServer = 37,
    FileSparseOnClient = 38,
    FileChangedOnClient = 39,
    FileRenamedOnClient = 40,
    DirSparseOnClient = 41,
    DirChangedOnClient = 42,
    DirRenamedOnClient = 43,
    FileChangedOnServer = 44,
    FileRenamedOnServer = 45,
    FileDeletedOnServer = 46,
    DirChangedOnServer = 47,
    DirRenamedOnServer = 48,
    DirDeletedOnServer = 49,
    FileReplacedAndDeletedOnClient_FileOnServer = 50,
    FileReplacedAndDeletedOnClient_FileChangedOnServer = 51,
    FileReplacedAndDeletedOnClient_DirOnServer = 52,
    FileReplacedAndDeletedOnClient_DirChangedOnServer = 53,
    NUMSTATES = 54,
};
pub const OFFLINEFILES_SYNC_STATE_Stable = OFFLINEFILES_SYNC_STATE.Stable;
pub const OFFLINEFILES_SYNC_STATE_FileOnClient_DirOnServer = OFFLINEFILES_SYNC_STATE.FileOnClient_DirOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileOnClient_NoServerCopy = OFFLINEFILES_SYNC_STATE.FileOnClient_NoServerCopy;
pub const OFFLINEFILES_SYNC_STATE_DirOnClient_FileOnServer = OFFLINEFILES_SYNC_STATE.DirOnClient_FileOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirOnClient_FileChangedOnServer = OFFLINEFILES_SYNC_STATE.DirOnClient_FileChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirOnClient_NoServerCopy = OFFLINEFILES_SYNC_STATE.DirOnClient_NoServerCopy;
pub const OFFLINEFILES_SYNC_STATE_FileCreatedOnClient_NoServerCopy = OFFLINEFILES_SYNC_STATE.FileCreatedOnClient_NoServerCopy;
pub const OFFLINEFILES_SYNC_STATE_FileCreatedOnClient_FileChangedOnServer = OFFLINEFILES_SYNC_STATE.FileCreatedOnClient_FileChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileCreatedOnClient_DirChangedOnServer = OFFLINEFILES_SYNC_STATE.FileCreatedOnClient_DirChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileCreatedOnClient_FileOnServer = OFFLINEFILES_SYNC_STATE.FileCreatedOnClient_FileOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileCreatedOnClient_DirOnServer = OFFLINEFILES_SYNC_STATE.FileCreatedOnClient_DirOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileCreatedOnClient_DeletedOnServer = OFFLINEFILES_SYNC_STATE.FileCreatedOnClient_DeletedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileChangedOnClient_ChangedOnServer = OFFLINEFILES_SYNC_STATE.FileChangedOnClient_ChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileChangedOnClient_DirOnServer = OFFLINEFILES_SYNC_STATE.FileChangedOnClient_DirOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileChangedOnClient_DirChangedOnServer = OFFLINEFILES_SYNC_STATE.FileChangedOnClient_DirChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileChangedOnClient_DeletedOnServer = OFFLINEFILES_SYNC_STATE.FileChangedOnClient_DeletedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileSparseOnClient_ChangedOnServer = OFFLINEFILES_SYNC_STATE.FileSparseOnClient_ChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileSparseOnClient_DeletedOnServer = OFFLINEFILES_SYNC_STATE.FileSparseOnClient_DeletedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileSparseOnClient_DirOnServer = OFFLINEFILES_SYNC_STATE.FileSparseOnClient_DirOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileSparseOnClient_DirChangedOnServer = OFFLINEFILES_SYNC_STATE.FileSparseOnClient_DirChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirCreatedOnClient_NoServerCopy = OFFLINEFILES_SYNC_STATE.DirCreatedOnClient_NoServerCopy;
pub const OFFLINEFILES_SYNC_STATE_DirCreatedOnClient_DirOnServer = OFFLINEFILES_SYNC_STATE.DirCreatedOnClient_DirOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirCreatedOnClient_FileOnServer = OFFLINEFILES_SYNC_STATE.DirCreatedOnClient_FileOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirCreatedOnClient_FileChangedOnServer = OFFLINEFILES_SYNC_STATE.DirCreatedOnClient_FileChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirCreatedOnClient_DirChangedOnServer = OFFLINEFILES_SYNC_STATE.DirCreatedOnClient_DirChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirCreatedOnClient_DeletedOnServer = OFFLINEFILES_SYNC_STATE.DirCreatedOnClient_DeletedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirChangedOnClient_FileOnServer = OFFLINEFILES_SYNC_STATE.DirChangedOnClient_FileOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirChangedOnClient_FileChangedOnServer = OFFLINEFILES_SYNC_STATE.DirChangedOnClient_FileChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirChangedOnClient_ChangedOnServer = OFFLINEFILES_SYNC_STATE.DirChangedOnClient_ChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirChangedOnClient_DeletedOnServer = OFFLINEFILES_SYNC_STATE.DirChangedOnClient_DeletedOnServer;
pub const OFFLINEFILES_SYNC_STATE_NoClientCopy_FileOnServer = OFFLINEFILES_SYNC_STATE.NoClientCopy_FileOnServer;
pub const OFFLINEFILES_SYNC_STATE_NoClientCopy_DirOnServer = OFFLINEFILES_SYNC_STATE.NoClientCopy_DirOnServer;
pub const OFFLINEFILES_SYNC_STATE_NoClientCopy_FileChangedOnServer = OFFLINEFILES_SYNC_STATE.NoClientCopy_FileChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_NoClientCopy_DirChangedOnServer = OFFLINEFILES_SYNC_STATE.NoClientCopy_DirChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DeletedOnClient_FileOnServer = OFFLINEFILES_SYNC_STATE.DeletedOnClient_FileOnServer;
pub const OFFLINEFILES_SYNC_STATE_DeletedOnClient_DirOnServer = OFFLINEFILES_SYNC_STATE.DeletedOnClient_DirOnServer;
pub const OFFLINEFILES_SYNC_STATE_DeletedOnClient_FileChangedOnServer = OFFLINEFILES_SYNC_STATE.DeletedOnClient_FileChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DeletedOnClient_DirChangedOnServer = OFFLINEFILES_SYNC_STATE.DeletedOnClient_DirChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileSparseOnClient = OFFLINEFILES_SYNC_STATE.FileSparseOnClient;
pub const OFFLINEFILES_SYNC_STATE_FileChangedOnClient = OFFLINEFILES_SYNC_STATE.FileChangedOnClient;
pub const OFFLINEFILES_SYNC_STATE_FileRenamedOnClient = OFFLINEFILES_SYNC_STATE.FileRenamedOnClient;
pub const OFFLINEFILES_SYNC_STATE_DirSparseOnClient = OFFLINEFILES_SYNC_STATE.DirSparseOnClient;
pub const OFFLINEFILES_SYNC_STATE_DirChangedOnClient = OFFLINEFILES_SYNC_STATE.DirChangedOnClient;
pub const OFFLINEFILES_SYNC_STATE_DirRenamedOnClient = OFFLINEFILES_SYNC_STATE.DirRenamedOnClient;
pub const OFFLINEFILES_SYNC_STATE_FileChangedOnServer = OFFLINEFILES_SYNC_STATE.FileChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileRenamedOnServer = OFFLINEFILES_SYNC_STATE.FileRenamedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileDeletedOnServer = OFFLINEFILES_SYNC_STATE.FileDeletedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirChangedOnServer = OFFLINEFILES_SYNC_STATE.DirChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirRenamedOnServer = OFFLINEFILES_SYNC_STATE.DirRenamedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirDeletedOnServer = OFFLINEFILES_SYNC_STATE.DirDeletedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileReplacedAndDeletedOnClient_FileOnServer = OFFLINEFILES_SYNC_STATE.FileReplacedAndDeletedOnClient_FileOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileReplacedAndDeletedOnClient_FileChangedOnServer = OFFLINEFILES_SYNC_STATE.FileReplacedAndDeletedOnClient_FileChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileReplacedAndDeletedOnClient_DirOnServer = OFFLINEFILES_SYNC_STATE.FileReplacedAndDeletedOnClient_DirOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileReplacedAndDeletedOnClient_DirChangedOnServer = OFFLINEFILES_SYNC_STATE.FileReplacedAndDeletedOnClient_DirChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_NUMSTATES = OFFLINEFILES_SYNC_STATE.NUMSTATES;

const IID_IOfflineFilesEvents_Value = @import("../zig.zig").Guid.initString("E25585C1-0CAA-4EB1-873B-1CAE5B77C314");
pub const IID_IOfflineFilesEvents = &IID_IOfflineFilesEvents_Value;
pub const IOfflineFilesEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CacheMoved: fn(
            self: *const IOfflineFilesEvents,
            pszOldPath: [*:0]const u16,
            pszNewPath: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CacheIsFull: fn(
            self: *const IOfflineFilesEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CacheIsCorrupted: fn(
            self: *const IOfflineFilesEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enabled: fn(
            self: *const IOfflineFilesEvents,
            bEnabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncryptionChanged: fn(
            self: *const IOfflineFilesEvents,
            bWasEncrypted: BOOL,
            bWasPartial: BOOL,
            bIsEncrypted: BOOL,
            bIsPartial: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncBegin: fn(
            self: *const IOfflineFilesEvents,
            rSyncId: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncFileResult: fn(
            self: *const IOfflineFilesEvents,
            rSyncId: *const Guid,
            pszFile: [*:0]const u16,
            hrResult: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncConflictRecAdded: fn(
            self: *const IOfflineFilesEvents,
            pszConflictPath: [*:0]const u16,
            pftConflictDateTime: *const FILETIME,
            ConflictSyncState: OFFLINEFILES_SYNC_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncConflictRecUpdated: fn(
            self: *const IOfflineFilesEvents,
            pszConflictPath: [*:0]const u16,
            pftConflictDateTime: *const FILETIME,
            ConflictSyncState: OFFLINEFILES_SYNC_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncConflictRecRemoved: fn(
            self: *const IOfflineFilesEvents,
            pszConflictPath: [*:0]const u16,
            pftConflictDateTime: *const FILETIME,
            ConflictSyncState: OFFLINEFILES_SYNC_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncEnd: fn(
            self: *const IOfflineFilesEvents,
            rSyncId: *const Guid,
            hrResult: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NetTransportArrived: fn(
            self: *const IOfflineFilesEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NoNetTransports: fn(
            self: *const IOfflineFilesEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemDisconnected: fn(
            self: *const IOfflineFilesEvents,
            pszPath: [*:0]const u16,
            ItemType: OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemReconnected: fn(
            self: *const IOfflineFilesEvents,
            pszPath: [*:0]const u16,
            ItemType: OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemAvailableOffline: fn(
            self: *const IOfflineFilesEvents,
            pszPath: [*:0]const u16,
            ItemType: OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemNotAvailableOffline: fn(
            self: *const IOfflineFilesEvents,
            pszPath: [*:0]const u16,
            ItemType: OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemPinned: fn(
            self: *const IOfflineFilesEvents,
            pszPath: [*:0]const u16,
            ItemType: OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemNotPinned: fn(
            self: *const IOfflineFilesEvents,
            pszPath: [*:0]const u16,
            ItemType: OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemModified: fn(
            self: *const IOfflineFilesEvents,
            pszPath: [*:0]const u16,
            ItemType: OFFLINEFILES_ITEM_TYPE,
            bModifiedData: BOOL,
            bModifiedAttributes: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemAddedToCache: fn(
            self: *const IOfflineFilesEvents,
            pszPath: [*:0]const u16,
            ItemType: OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemDeletedFromCache: fn(
            self: *const IOfflineFilesEvents,
            pszPath: [*:0]const u16,
            ItemType: OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemRenamed: fn(
            self: *const IOfflineFilesEvents,
            pszOldPath: [*:0]const u16,
            pszNewPath: [*:0]const u16,
            ItemType: OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DataLost: fn(
            self: *const IOfflineFilesEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Ping: fn(
            self: *const IOfflineFilesEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_CacheMoved(self: *const T, pszOldPath: [*:0]const u16, pszNewPath: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).CacheMoved(@ptrCast(*const IOfflineFilesEvents, self), pszOldPath, pszNewPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_CacheIsFull(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).CacheIsFull(@ptrCast(*const IOfflineFilesEvents, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_CacheIsCorrupted(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).CacheIsCorrupted(@ptrCast(*const IOfflineFilesEvents, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_Enabled(self: *const T, bEnabled: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).Enabled(@ptrCast(*const IOfflineFilesEvents, self), bEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_EncryptionChanged(self: *const T, bWasEncrypted: BOOL, bWasPartial: BOOL, bIsEncrypted: BOOL, bIsPartial: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).EncryptionChanged(@ptrCast(*const IOfflineFilesEvents, self), bWasEncrypted, bWasPartial, bIsEncrypted, bIsPartial);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_SyncBegin(self: *const T, rSyncId: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).SyncBegin(@ptrCast(*const IOfflineFilesEvents, self), rSyncId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_SyncFileResult(self: *const T, rSyncId: *const Guid, pszFile: [*:0]const u16, hrResult: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).SyncFileResult(@ptrCast(*const IOfflineFilesEvents, self), rSyncId, pszFile, hrResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_SyncConflictRecAdded(self: *const T, pszConflictPath: [*:0]const u16, pftConflictDateTime: *const FILETIME, ConflictSyncState: OFFLINEFILES_SYNC_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).SyncConflictRecAdded(@ptrCast(*const IOfflineFilesEvents, self), pszConflictPath, pftConflictDateTime, ConflictSyncState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_SyncConflictRecUpdated(self: *const T, pszConflictPath: [*:0]const u16, pftConflictDateTime: *const FILETIME, ConflictSyncState: OFFLINEFILES_SYNC_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).SyncConflictRecUpdated(@ptrCast(*const IOfflineFilesEvents, self), pszConflictPath, pftConflictDateTime, ConflictSyncState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_SyncConflictRecRemoved(self: *const T, pszConflictPath: [*:0]const u16, pftConflictDateTime: *const FILETIME, ConflictSyncState: OFFLINEFILES_SYNC_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).SyncConflictRecRemoved(@ptrCast(*const IOfflineFilesEvents, self), pszConflictPath, pftConflictDateTime, ConflictSyncState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_SyncEnd(self: *const T, rSyncId: *const Guid, hrResult: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).SyncEnd(@ptrCast(*const IOfflineFilesEvents, self), rSyncId, hrResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_NetTransportArrived(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).NetTransportArrived(@ptrCast(*const IOfflineFilesEvents, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_NoNetTransports(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).NoNetTransports(@ptrCast(*const IOfflineFilesEvents, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_ItemDisconnected(self: *const T, pszPath: [*:0]const u16, ItemType: OFFLINEFILES_ITEM_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).ItemDisconnected(@ptrCast(*const IOfflineFilesEvents, self), pszPath, ItemType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_ItemReconnected(self: *const T, pszPath: [*:0]const u16, ItemType: OFFLINEFILES_ITEM_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).ItemReconnected(@ptrCast(*const IOfflineFilesEvents, self), pszPath, ItemType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_ItemAvailableOffline(self: *const T, pszPath: [*:0]const u16, ItemType: OFFLINEFILES_ITEM_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).ItemAvailableOffline(@ptrCast(*const IOfflineFilesEvents, self), pszPath, ItemType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_ItemNotAvailableOffline(self: *const T, pszPath: [*:0]const u16, ItemType: OFFLINEFILES_ITEM_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).ItemNotAvailableOffline(@ptrCast(*const IOfflineFilesEvents, self), pszPath, ItemType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_ItemPinned(self: *const T, pszPath: [*:0]const u16, ItemType: OFFLINEFILES_ITEM_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).ItemPinned(@ptrCast(*const IOfflineFilesEvents, self), pszPath, ItemType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_ItemNotPinned(self: *const T, pszPath: [*:0]const u16, ItemType: OFFLINEFILES_ITEM_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).ItemNotPinned(@ptrCast(*const IOfflineFilesEvents, self), pszPath, ItemType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_ItemModified(self: *const T, pszPath: [*:0]const u16, ItemType: OFFLINEFILES_ITEM_TYPE, bModifiedData: BOOL, bModifiedAttributes: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).ItemModified(@ptrCast(*const IOfflineFilesEvents, self), pszPath, ItemType, bModifiedData, bModifiedAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_ItemAddedToCache(self: *const T, pszPath: [*:0]const u16, ItemType: OFFLINEFILES_ITEM_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).ItemAddedToCache(@ptrCast(*const IOfflineFilesEvents, self), pszPath, ItemType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_ItemDeletedFromCache(self: *const T, pszPath: [*:0]const u16, ItemType: OFFLINEFILES_ITEM_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).ItemDeletedFromCache(@ptrCast(*const IOfflineFilesEvents, self), pszPath, ItemType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_ItemRenamed(self: *const T, pszOldPath: [*:0]const u16, pszNewPath: [*:0]const u16, ItemType: OFFLINEFILES_ITEM_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).ItemRenamed(@ptrCast(*const IOfflineFilesEvents, self), pszOldPath, pszNewPath, ItemType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_DataLost(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).DataLost(@ptrCast(*const IOfflineFilesEvents, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents_Ping(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents.VTable, self.vtable).Ping(@ptrCast(*const IOfflineFilesEvents, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesEvents2_Value = @import("../zig.zig").Guid.initString("1EAD8F56-FF76-4FAA-A795-6F6EF792498B");
pub const IID_IOfflineFilesEvents2 = &IID_IOfflineFilesEvents2_Value;
pub const IOfflineFilesEvents2 = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesEvents.VTable,
        ItemReconnectBegin: fn(
            self: *const IOfflineFilesEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemReconnectEnd: fn(
            self: *const IOfflineFilesEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CacheEvictBegin: fn(
            self: *const IOfflineFilesEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CacheEvictEnd: fn(
            self: *const IOfflineFilesEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackgroundSyncBegin: fn(
            self: *const IOfflineFilesEvents2,
            dwSyncControlFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackgroundSyncEnd: fn(
            self: *const IOfflineFilesEvents2,
            dwSyncControlFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PolicyChangeDetected: fn(
            self: *const IOfflineFilesEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreferenceChangeDetected: fn(
            self: *const IOfflineFilesEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SettingsChangesApplied: fn(
            self: *const IOfflineFilesEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOfflineFilesEvents.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents2_ItemReconnectBegin(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents2.VTable, self.vtable).ItemReconnectBegin(@ptrCast(*const IOfflineFilesEvents2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents2_ItemReconnectEnd(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents2.VTable, self.vtable).ItemReconnectEnd(@ptrCast(*const IOfflineFilesEvents2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents2_CacheEvictBegin(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents2.VTable, self.vtable).CacheEvictBegin(@ptrCast(*const IOfflineFilesEvents2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents2_CacheEvictEnd(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents2.VTable, self.vtable).CacheEvictEnd(@ptrCast(*const IOfflineFilesEvents2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents2_BackgroundSyncBegin(self: *const T, dwSyncControlFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents2.VTable, self.vtable).BackgroundSyncBegin(@ptrCast(*const IOfflineFilesEvents2, self), dwSyncControlFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents2_BackgroundSyncEnd(self: *const T, dwSyncControlFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents2.VTable, self.vtable).BackgroundSyncEnd(@ptrCast(*const IOfflineFilesEvents2, self), dwSyncControlFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents2_PolicyChangeDetected(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents2.VTable, self.vtable).PolicyChangeDetected(@ptrCast(*const IOfflineFilesEvents2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents2_PreferenceChangeDetected(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents2.VTable, self.vtable).PreferenceChangeDetected(@ptrCast(*const IOfflineFilesEvents2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents2_SettingsChangesApplied(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents2.VTable, self.vtable).SettingsChangesApplied(@ptrCast(*const IOfflineFilesEvents2, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesEvents3_Value = @import("../zig.zig").Guid.initString("9BA04A45-EE69-42F0-9AB1-7DB5C8805808");
pub const IID_IOfflineFilesEvents3 = &IID_IOfflineFilesEvents3_Value;
pub const IOfflineFilesEvents3 = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesEvents2.VTable,
        TransparentCacheItemNotify: fn(
            self: *const IOfflineFilesEvents3,
            pszPath: [*:0]const u16,
            EventType: OFFLINEFILES_EVENTS,
            ItemType: OFFLINEFILES_ITEM_TYPE,
            bModifiedData: BOOL,
            bModifiedAttributes: BOOL,
            pzsOldPath: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrefetchFileBegin: fn(
            self: *const IOfflineFilesEvents3,
            pszPath: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrefetchFileEnd: fn(
            self: *const IOfflineFilesEvents3,
            pszPath: [*:0]const u16,
            hrResult: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOfflineFilesEvents2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents3_TransparentCacheItemNotify(self: *const T, pszPath: [*:0]const u16, EventType: OFFLINEFILES_EVENTS, ItemType: OFFLINEFILES_ITEM_TYPE, bModifiedData: BOOL, bModifiedAttributes: BOOL, pzsOldPath: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents3.VTable, self.vtable).TransparentCacheItemNotify(@ptrCast(*const IOfflineFilesEvents3, self), pszPath, EventType, ItemType, bModifiedData, bModifiedAttributes, pzsOldPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents3_PrefetchFileBegin(self: *const T, pszPath: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents3.VTable, self.vtable).PrefetchFileBegin(@ptrCast(*const IOfflineFilesEvents3, self), pszPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents3_PrefetchFileEnd(self: *const T, pszPath: [*:0]const u16, hrResult: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents3.VTable, self.vtable).PrefetchFileEnd(@ptrCast(*const IOfflineFilesEvents3, self), pszPath, hrResult);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesEvents4_Value = @import("../zig.zig").Guid.initString("DBD69B1E-C7D2-473E-B35F-9D8C24C0C484");
pub const IID_IOfflineFilesEvents4 = &IID_IOfflineFilesEvents4_Value;
pub const IOfflineFilesEvents4 = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesEvents3.VTable,
        PrefetchCloseHandleBegin: fn(
            self: *const IOfflineFilesEvents4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrefetchCloseHandleEnd: fn(
            self: *const IOfflineFilesEvents4,
            dwClosedHandleCount: u32,
            dwOpenHandleCount: u32,
            hrResult: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOfflineFilesEvents3.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents4_PrefetchCloseHandleBegin(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents4.VTable, self.vtable).PrefetchCloseHandleBegin(@ptrCast(*const IOfflineFilesEvents4, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEvents4_PrefetchCloseHandleEnd(self: *const T, dwClosedHandleCount: u32, dwOpenHandleCount: u32, hrResult: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEvents4.VTable, self.vtable).PrefetchCloseHandleEnd(@ptrCast(*const IOfflineFilesEvents4, self), dwClosedHandleCount, dwOpenHandleCount, hrResult);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesEventsFilter_Value = @import("../zig.zig").Guid.initString("33FC4E1B-0716-40FA-BA65-6E62A84A846F");
pub const IID_IOfflineFilesEventsFilter = &IID_IOfflineFilesEventsFilter_Value;
pub const IOfflineFilesEventsFilter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPathFilter: fn(
            self: *const IOfflineFilesEventsFilter,
            ppszFilter: ?*?PWSTR,
            pMatch: *OFFLINEFILES_PATHFILTER_MATCH,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIncludedEvents: fn(
            self: *const IOfflineFilesEventsFilter,
            cElements: u32,
            prgEvents: [*]OFFLINEFILES_EVENTS,
            pcEvents: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExcludedEvents: fn(
            self: *const IOfflineFilesEventsFilter,
            cElements: u32,
            prgEvents: [*]OFFLINEFILES_EVENTS,
            pcEvents: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEventsFilter_GetPathFilter(self: *const T, ppszFilter: ?*?PWSTR, pMatch: *OFFLINEFILES_PATHFILTER_MATCH) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEventsFilter.VTable, self.vtable).GetPathFilter(@ptrCast(*const IOfflineFilesEventsFilter, self), ppszFilter, pMatch);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEventsFilter_GetIncludedEvents(self: *const T, cElements: u32, prgEvents: [*]OFFLINEFILES_EVENTS, pcEvents: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEventsFilter.VTable, self.vtable).GetIncludedEvents(@ptrCast(*const IOfflineFilesEventsFilter, self), cElements, prgEvents, pcEvents);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesEventsFilter_GetExcludedEvents(self: *const T, cElements: u32, prgEvents: [*]OFFLINEFILES_EVENTS, pcEvents: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesEventsFilter.VTable, self.vtable).GetExcludedEvents(@ptrCast(*const IOfflineFilesEventsFilter, self), cElements, prgEvents, pcEvents);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesErrorInfo_Value = @import("../zig.zig").Guid.initString("7112FA5F-7571-435A-8EB7-195C7C1429BC");
pub const IID_IOfflineFilesErrorInfo = &IID_IOfflineFilesErrorInfo_Value;
pub const IOfflineFilesErrorInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRawData: fn(
            self: *const IOfflineFilesErrorInfo,
            ppBlob: **BYTE_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: fn(
            self: *const IOfflineFilesErrorInfo,
            ppszDescription: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesErrorInfo_GetRawData(self: *const T, ppBlob: **BYTE_BLOB) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesErrorInfo.VTable, self.vtable).GetRawData(@ptrCast(*const IOfflineFilesErrorInfo, self), ppBlob);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesErrorInfo_GetDescription(self: *const T, ppszDescription: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesErrorInfo.VTable, self.vtable).GetDescription(@ptrCast(*const IOfflineFilesErrorInfo, self), ppszDescription);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesSyncErrorItemInfo_Value = @import("../zig.zig").Guid.initString("ECDBAF0D-6A18-4D55-8017-108F7660BA44");
pub const IID_IOfflineFilesSyncErrorItemInfo = &IID_IOfflineFilesSyncErrorItemInfo_Value;
pub const IOfflineFilesSyncErrorItemInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFileAttributesA: fn(
            self: *const IOfflineFilesSyncErrorItemInfo,
            pdwAttributes: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileTimes: fn(
            self: *const IOfflineFilesSyncErrorItemInfo,
            pftLastWrite: *FILETIME,
            pftChange: *FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileSize: fn(
            self: *const IOfflineFilesSyncErrorItemInfo,
            pSize: *LARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSyncErrorItemInfo_GetFileAttributesA(self: *const T, pdwAttributes: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSyncErrorItemInfo.VTable, self.vtable).GetFileAttributesA(@ptrCast(*const IOfflineFilesSyncErrorItemInfo, self), pdwAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSyncErrorItemInfo_GetFileTimes(self: *const T, pftLastWrite: *FILETIME, pftChange: *FILETIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSyncErrorItemInfo.VTable, self.vtable).GetFileTimes(@ptrCast(*const IOfflineFilesSyncErrorItemInfo, self), pftLastWrite, pftChange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSyncErrorItemInfo_GetFileSize(self: *const T, pSize: *LARGE_INTEGER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSyncErrorItemInfo.VTable, self.vtable).GetFileSize(@ptrCast(*const IOfflineFilesSyncErrorItemInfo, self), pSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesSyncErrorInfo_Value = @import("../zig.zig").Guid.initString("59F95E46-EB54-49D1-BE76-DE95458D01B0");
pub const IID_IOfflineFilesSyncErrorInfo = &IID_IOfflineFilesSyncErrorInfo_Value;
pub const IOfflineFilesSyncErrorInfo = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesErrorInfo.VTable,
        GetSyncOperation: fn(
            self: *const IOfflineFilesSyncErrorInfo,
            pSyncOp: *OFFLINEFILES_SYNC_OPERATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemChangeFlags: fn(
            self: *const IOfflineFilesSyncErrorInfo,
            pdwItemChangeFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InfoEnumerated: fn(
            self: *const IOfflineFilesSyncErrorInfo,
            pbLocalEnumerated: *BOOL,
            pbRemoteEnumerated: *BOOL,
            pbOriginalEnumerated: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InfoAvailable: fn(
            self: *const IOfflineFilesSyncErrorInfo,
            pbLocalInfo: *BOOL,
            pbRemoteInfo: *BOOL,
            pbOriginalInfo: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocalInfo: fn(
            self: *const IOfflineFilesSyncErrorInfo,
            ppInfo: **IOfflineFilesSyncErrorItemInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRemoteInfo: fn(
            self: *const IOfflineFilesSyncErrorInfo,
            ppInfo: **IOfflineFilesSyncErrorItemInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOriginalInfo: fn(
            self: *const IOfflineFilesSyncErrorInfo,
            ppInfo: **IOfflineFilesSyncErrorItemInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOfflineFilesErrorInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSyncErrorInfo_GetSyncOperation(self: *const T, pSyncOp: *OFFLINEFILES_SYNC_OPERATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSyncErrorInfo.VTable, self.vtable).GetSyncOperation(@ptrCast(*const IOfflineFilesSyncErrorInfo, self), pSyncOp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSyncErrorInfo_GetItemChangeFlags(self: *const T, pdwItemChangeFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSyncErrorInfo.VTable, self.vtable).GetItemChangeFlags(@ptrCast(*const IOfflineFilesSyncErrorInfo, self), pdwItemChangeFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSyncErrorInfo_InfoEnumerated(self: *const T, pbLocalEnumerated: *BOOL, pbRemoteEnumerated: *BOOL, pbOriginalEnumerated: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSyncErrorInfo.VTable, self.vtable).InfoEnumerated(@ptrCast(*const IOfflineFilesSyncErrorInfo, self), pbLocalEnumerated, pbRemoteEnumerated, pbOriginalEnumerated);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSyncErrorInfo_InfoAvailable(self: *const T, pbLocalInfo: *BOOL, pbRemoteInfo: *BOOL, pbOriginalInfo: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSyncErrorInfo.VTable, self.vtable).InfoAvailable(@ptrCast(*const IOfflineFilesSyncErrorInfo, self), pbLocalInfo, pbRemoteInfo, pbOriginalInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSyncErrorInfo_GetLocalInfo(self: *const T, ppInfo: **IOfflineFilesSyncErrorItemInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSyncErrorInfo.VTable, self.vtable).GetLocalInfo(@ptrCast(*const IOfflineFilesSyncErrorInfo, self), ppInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSyncErrorInfo_GetRemoteInfo(self: *const T, ppInfo: **IOfflineFilesSyncErrorItemInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSyncErrorInfo.VTable, self.vtable).GetRemoteInfo(@ptrCast(*const IOfflineFilesSyncErrorInfo, self), ppInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSyncErrorInfo_GetOriginalInfo(self: *const T, ppInfo: **IOfflineFilesSyncErrorItemInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSyncErrorInfo.VTable, self.vtable).GetOriginalInfo(@ptrCast(*const IOfflineFilesSyncErrorInfo, self), ppInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesProgress_Value = @import("../zig.zig").Guid.initString("FAD63237-C55B-4911-9850-BCF96D4C979E");
pub const IID_IOfflineFilesProgress = &IID_IOfflineFilesProgress_Value;
pub const IOfflineFilesProgress = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin: fn(
            self: *const IOfflineFilesProgress,
            pbAbort: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryAbort: fn(
            self: *const IOfflineFilesProgress,
            pbAbort: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        End: fn(
            self: *const IOfflineFilesProgress,
            hrResult: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesProgress_Begin(self: *const T, pbAbort: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesProgress.VTable, self.vtable).Begin(@ptrCast(*const IOfflineFilesProgress, self), pbAbort);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesProgress_QueryAbort(self: *const T, pbAbort: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesProgress.VTable, self.vtable).QueryAbort(@ptrCast(*const IOfflineFilesProgress, self), pbAbort);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesProgress_End(self: *const T, hrResult: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesProgress.VTable, self.vtable).End(@ptrCast(*const IOfflineFilesProgress, self), hrResult);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesSimpleProgress_Value = @import("../zig.zig").Guid.initString("C34F7F9B-C43D-4F9D-A776-C0EB6DE5D401");
pub const IID_IOfflineFilesSimpleProgress = &IID_IOfflineFilesSimpleProgress_Value;
pub const IOfflineFilesSimpleProgress = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesProgress.VTable,
        ItemBegin: fn(
            self: *const IOfflineFilesSimpleProgress,
            pszFile: [*:0]const u16,
            pResponse: *OFFLINEFILES_OP_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemResult: fn(
            self: *const IOfflineFilesSimpleProgress,
            pszFile: [*:0]const u16,
            hrResult: HRESULT,
            pResponse: *OFFLINEFILES_OP_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOfflineFilesProgress.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSimpleProgress_ItemBegin(self: *const T, pszFile: [*:0]const u16, pResponse: *OFFLINEFILES_OP_RESPONSE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSimpleProgress.VTable, self.vtable).ItemBegin(@ptrCast(*const IOfflineFilesSimpleProgress, self), pszFile, pResponse);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSimpleProgress_ItemResult(self: *const T, pszFile: [*:0]const u16, hrResult: HRESULT, pResponse: *OFFLINEFILES_OP_RESPONSE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSimpleProgress.VTable, self.vtable).ItemResult(@ptrCast(*const IOfflineFilesSimpleProgress, self), pszFile, hrResult, pResponse);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesSyncProgress_Value = @import("../zig.zig").Guid.initString("6931F49A-6FC7-4C1B-B265-56793FC451B7");
pub const IID_IOfflineFilesSyncProgress = &IID_IOfflineFilesSyncProgress_Value;
pub const IOfflineFilesSyncProgress = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesProgress.VTable,
        SyncItemBegin: fn(
            self: *const IOfflineFilesSyncProgress,
            pszFile: [*:0]const u16,
            pResponse: *OFFLINEFILES_OP_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncItemResult: fn(
            self: *const IOfflineFilesSyncProgress,
            pszFile: [*:0]const u16,
            hrResult: HRESULT,
            pErrorInfo: ?*IOfflineFilesSyncErrorInfo,
            pResponse: *OFFLINEFILES_OP_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOfflineFilesProgress.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSyncProgress_SyncItemBegin(self: *const T, pszFile: [*:0]const u16, pResponse: *OFFLINEFILES_OP_RESPONSE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSyncProgress.VTable, self.vtable).SyncItemBegin(@ptrCast(*const IOfflineFilesSyncProgress, self), pszFile, pResponse);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSyncProgress_SyncItemResult(self: *const T, pszFile: [*:0]const u16, hrResult: HRESULT, pErrorInfo: ?*IOfflineFilesSyncErrorInfo, pResponse: *OFFLINEFILES_OP_RESPONSE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSyncProgress.VTable, self.vtable).SyncItemResult(@ptrCast(*const IOfflineFilesSyncProgress, self), pszFile, hrResult, pErrorInfo, pResponse);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesSyncConflictHandler_Value = @import("../zig.zig").Guid.initString("B6DD5092-C65C-46B6-97B8-FADD08E7E1BE");
pub const IID_IOfflineFilesSyncConflictHandler = &IID_IOfflineFilesSyncConflictHandler_Value;
pub const IOfflineFilesSyncConflictHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ResolveConflict: fn(
            self: *const IOfflineFilesSyncConflictHandler,
            pszPath: [*:0]const u16,
            fStateKnown: u32,
            state: OFFLINEFILES_SYNC_STATE,
            fChangeDetails: u32,
            pConflictResolution: *OFFLINEFILES_SYNC_CONFLICT_RESOLVE,
            ppszNewName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSyncConflictHandler_ResolveConflict(self: *const T, pszPath: [*:0]const u16, fStateKnown: u32, state: OFFLINEFILES_SYNC_STATE, fChangeDetails: u32, pConflictResolution: *OFFLINEFILES_SYNC_CONFLICT_RESOLVE, ppszNewName: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSyncConflictHandler.VTable, self.vtable).ResolveConflict(@ptrCast(*const IOfflineFilesSyncConflictHandler, self), pszPath, fStateKnown, state, fChangeDetails, pConflictResolution, ppszNewName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesItemFilter_Value = @import("../zig.zig").Guid.initString("F4B5A26C-DC05-4F20-ADA4-551F1077BE5C");
pub const IID_IOfflineFilesItemFilter = &IID_IOfflineFilesItemFilter_Value;
pub const IOfflineFilesItemFilter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFilterFlags: fn(
            self: *const IOfflineFilesItemFilter,
            pullFlags: *u64,
            pullMask: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTimeFilter: fn(
            self: *const IOfflineFilesItemFilter,
            pftTime: *FILETIME,
            pbEvalTimeOfDay: *BOOL,
            pTimeType: *OFFLINEFILES_ITEM_TIME,
            pCompare: *OFFLINEFILES_COMPARE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPatternFilter: fn(
            self: *const IOfflineFilesItemFilter,
            pszPattern: [*:0]u16,
            cchPattern: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesItemFilter_GetFilterFlags(self: *const T, pullFlags: *u64, pullMask: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesItemFilter.VTable, self.vtable).GetFilterFlags(@ptrCast(*const IOfflineFilesItemFilter, self), pullFlags, pullMask);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesItemFilter_GetTimeFilter(self: *const T, pftTime: *FILETIME, pbEvalTimeOfDay: *BOOL, pTimeType: *OFFLINEFILES_ITEM_TIME, pCompare: *OFFLINEFILES_COMPARE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesItemFilter.VTable, self.vtable).GetTimeFilter(@ptrCast(*const IOfflineFilesItemFilter, self), pftTime, pbEvalTimeOfDay, pTimeType, pCompare);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesItemFilter_GetPatternFilter(self: *const T, pszPattern: [*:0]u16, cchPattern: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesItemFilter.VTable, self.vtable).GetPatternFilter(@ptrCast(*const IOfflineFilesItemFilter, self), pszPattern, cchPattern);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesItem_Value = @import("../zig.zig").Guid.initString("4A753DA6-E044-4F12-A718-5D14D079A906");
pub const IID_IOfflineFilesItem = &IID_IOfflineFilesItem_Value;
pub const IOfflineFilesItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemType: fn(
            self: *const IOfflineFilesItem,
            pItemType: *OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPath: fn(
            self: *const IOfflineFilesItem,
            ppszPath: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParentItem: fn(
            self: *const IOfflineFilesItem,
            ppItem: **IOfflineFilesItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const IOfflineFilesItem,
            dwQueryFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsMarkedForDeletion: fn(
            self: *const IOfflineFilesItem,
            pbMarkedForDeletion: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesItem_GetItemType(self: *const T, pItemType: *OFFLINEFILES_ITEM_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesItem.VTable, self.vtable).GetItemType(@ptrCast(*const IOfflineFilesItem, self), pItemType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesItem_GetPath(self: *const T, ppszPath: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesItem.VTable, self.vtable).GetPath(@ptrCast(*const IOfflineFilesItem, self), ppszPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesItem_GetParentItem(self: *const T, ppItem: **IOfflineFilesItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesItem.VTable, self.vtable).GetParentItem(@ptrCast(*const IOfflineFilesItem, self), ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesItem_Refresh(self: *const T, dwQueryFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesItem.VTable, self.vtable).Refresh(@ptrCast(*const IOfflineFilesItem, self), dwQueryFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesItem_IsMarkedForDeletion(self: *const T, pbMarkedForDeletion: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesItem.VTable, self.vtable).IsMarkedForDeletion(@ptrCast(*const IOfflineFilesItem, self), pbMarkedForDeletion);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesServerItem_Value = @import("../zig.zig").Guid.initString("9B1C9576-A92B-4151-8E9E-7C7B3EC2E016");
pub const IID_IOfflineFilesServerItem = &IID_IOfflineFilesServerItem_Value;
pub const IOfflineFilesServerItem = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOfflineFilesItem.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesShareItem_Value = @import("../zig.zig").Guid.initString("BAB7E48D-4804-41B5-A44D-0F199B06B145");
pub const IID_IOfflineFilesShareItem = &IID_IOfflineFilesShareItem_Value;
pub const IOfflineFilesShareItem = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOfflineFilesItem.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesDirectoryItem_Value = @import("../zig.zig").Guid.initString("2273597A-A08C-4A00-A37A-C1AE4E9A1CFD");
pub const IID_IOfflineFilesDirectoryItem = &IID_IOfflineFilesDirectoryItem_Value;
pub const IOfflineFilesDirectoryItem = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOfflineFilesItem.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesFileItem_Value = @import("../zig.zig").Guid.initString("8DFADEAD-26C2-4EFF-8A72-6B50723D9A00");
pub const IID_IOfflineFilesFileItem = &IID_IOfflineFilesFileItem_Value;
pub const IOfflineFilesFileItem = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesItem.VTable,
        IsSparse: fn(
            self: *const IOfflineFilesFileItem,
            pbIsSparse: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEncrypted: fn(
            self: *const IOfflineFilesFileItem,
            pbIsEncrypted: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOfflineFilesItem.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesFileItem_IsSparse(self: *const T, pbIsSparse: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesFileItem.VTable, self.vtable).IsSparse(@ptrCast(*const IOfflineFilesFileItem, self), pbIsSparse);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesFileItem_IsEncrypted(self: *const T, pbIsEncrypted: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesFileItem.VTable, self.vtable).IsEncrypted(@ptrCast(*const IOfflineFilesFileItem, self), pbIsEncrypted);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumOfflineFilesItems_Value = @import("../zig.zig").Guid.initString("DA70E815-C361-4407-BC0B-0D7046E5F2CD");
pub const IID_IEnumOfflineFilesItems = &IID_IEnumOfflineFilesItems_Value;
pub const IEnumOfflineFilesItems = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumOfflineFilesItems,
            celt: u32,
            rgelt: [*]*IOfflineFilesItem,
            pceltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumOfflineFilesItems,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumOfflineFilesItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumOfflineFilesItems,
            ppenum: **IEnumOfflineFilesItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumOfflineFilesItems_Next(self: *const T, celt: u32, rgelt: [*]*IOfflineFilesItem, pceltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumOfflineFilesItems.VTable, self.vtable).Next(@ptrCast(*const IEnumOfflineFilesItems, self), celt, rgelt, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumOfflineFilesItems_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumOfflineFilesItems.VTable, self.vtable).Skip(@ptrCast(*const IEnumOfflineFilesItems, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumOfflineFilesItems_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumOfflineFilesItems.VTable, self.vtable).Reset(@ptrCast(*const IEnumOfflineFilesItems, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumOfflineFilesItems_Clone(self: *const T, ppenum: **IEnumOfflineFilesItems) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumOfflineFilesItems.VTable, self.vtable).Clone(@ptrCast(*const IEnumOfflineFilesItems, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesItemContainer_Value = @import("../zig.zig").Guid.initString("3836F049-9413-45DD-BF46-B5AAA82DC310");
pub const IID_IOfflineFilesItemContainer = &IID_IOfflineFilesItemContainer_Value;
pub const IOfflineFilesItemContainer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumItems: fn(
            self: *const IOfflineFilesItemContainer,
            dwQueryFlags: u32,
            ppenum: **IEnumOfflineFilesItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumItemsEx: fn(
            self: *const IOfflineFilesItemContainer,
            pIncludeFileFilter: ?*IOfflineFilesItemFilter,
            pIncludeDirFilter: ?*IOfflineFilesItemFilter,
            pExcludeFileFilter: ?*IOfflineFilesItemFilter,
            pExcludeDirFilter: ?*IOfflineFilesItemFilter,
            dwEnumFlags: u32,
            dwQueryFlags: u32,
            ppenum: **IEnumOfflineFilesItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesItemContainer_EnumItems(self: *const T, dwQueryFlags: u32, ppenum: **IEnumOfflineFilesItems) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesItemContainer.VTable, self.vtable).EnumItems(@ptrCast(*const IOfflineFilesItemContainer, self), dwQueryFlags, ppenum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesItemContainer_EnumItemsEx(self: *const T, pIncludeFileFilter: ?*IOfflineFilesItemFilter, pIncludeDirFilter: ?*IOfflineFilesItemFilter, pExcludeFileFilter: ?*IOfflineFilesItemFilter, pExcludeDirFilter: ?*IOfflineFilesItemFilter, dwEnumFlags: u32, dwQueryFlags: u32, ppenum: **IEnumOfflineFilesItems) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesItemContainer.VTable, self.vtable).EnumItemsEx(@ptrCast(*const IOfflineFilesItemContainer, self), pIncludeFileFilter, pIncludeDirFilter, pExcludeFileFilter, pExcludeDirFilter, dwEnumFlags, dwQueryFlags, ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesChangeInfo_Value = @import("../zig.zig").Guid.initString("A96E6FA4-E0D1-4C29-960B-EE508FE68C72");
pub const IID_IOfflineFilesChangeInfo = &IID_IOfflineFilesChangeInfo_Value;
pub const IOfflineFilesChangeInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsDirty: fn(
            self: *const IOfflineFilesChangeInfo,
            pbDirty: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDeletedOffline: fn(
            self: *const IOfflineFilesChangeInfo,
            pbDeletedOffline: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsCreatedOffline: fn(
            self: *const IOfflineFilesChangeInfo,
            pbCreatedOffline: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsLocallyModifiedData: fn(
            self: *const IOfflineFilesChangeInfo,
            pbLocallyModifiedData: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsLocallyModifiedAttributes: fn(
            self: *const IOfflineFilesChangeInfo,
            pbLocallyModifiedAttributes: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsLocallyModifiedTime: fn(
            self: *const IOfflineFilesChangeInfo,
            pbLocallyModifiedTime: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesChangeInfo_IsDirty(self: *const T, pbDirty: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesChangeInfo.VTable, self.vtable).IsDirty(@ptrCast(*const IOfflineFilesChangeInfo, self), pbDirty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesChangeInfo_IsDeletedOffline(self: *const T, pbDeletedOffline: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesChangeInfo.VTable, self.vtable).IsDeletedOffline(@ptrCast(*const IOfflineFilesChangeInfo, self), pbDeletedOffline);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesChangeInfo_IsCreatedOffline(self: *const T, pbCreatedOffline: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesChangeInfo.VTable, self.vtable).IsCreatedOffline(@ptrCast(*const IOfflineFilesChangeInfo, self), pbCreatedOffline);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesChangeInfo_IsLocallyModifiedData(self: *const T, pbLocallyModifiedData: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesChangeInfo.VTable, self.vtable).IsLocallyModifiedData(@ptrCast(*const IOfflineFilesChangeInfo, self), pbLocallyModifiedData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesChangeInfo_IsLocallyModifiedAttributes(self: *const T, pbLocallyModifiedAttributes: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesChangeInfo.VTable, self.vtable).IsLocallyModifiedAttributes(@ptrCast(*const IOfflineFilesChangeInfo, self), pbLocallyModifiedAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesChangeInfo_IsLocallyModifiedTime(self: *const T, pbLocallyModifiedTime: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesChangeInfo.VTable, self.vtable).IsLocallyModifiedTime(@ptrCast(*const IOfflineFilesChangeInfo, self), pbLocallyModifiedTime);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesDirtyInfo_Value = @import("../zig.zig").Guid.initString("0F50CE33-BAC9-4EAA-A11D-DA0E527D047D");
pub const IID_IOfflineFilesDirtyInfo = &IID_IOfflineFilesDirtyInfo_Value;
pub const IOfflineFilesDirtyInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LocalDirtyByteCount: fn(
            self: *const IOfflineFilesDirtyInfo,
            pDirtyByteCount: *LARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoteDirtyByteCount: fn(
            self: *const IOfflineFilesDirtyInfo,
            pDirtyByteCount: *LARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesDirtyInfo_LocalDirtyByteCount(self: *const T, pDirtyByteCount: *LARGE_INTEGER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesDirtyInfo.VTable, self.vtable).LocalDirtyByteCount(@ptrCast(*const IOfflineFilesDirtyInfo, self), pDirtyByteCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesDirtyInfo_RemoteDirtyByteCount(self: *const T, pDirtyByteCount: *LARGE_INTEGER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesDirtyInfo.VTable, self.vtable).RemoteDirtyByteCount(@ptrCast(*const IOfflineFilesDirtyInfo, self), pDirtyByteCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesFileSysInfo_Value = @import("../zig.zig").Guid.initString("BC1A163F-7BFD-4D88-9C66-96EA9A6A3D6B");
pub const IID_IOfflineFilesFileSysInfo = &IID_IOfflineFilesFileSysInfo_Value;
pub const IOfflineFilesFileSysInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAttributes: fn(
            self: *const IOfflineFilesFileSysInfo,
            copy: OFFLINEFILES_ITEM_COPY,
            pdwAttributes: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTimes: fn(
            self: *const IOfflineFilesFileSysInfo,
            copy: OFFLINEFILES_ITEM_COPY,
            pftCreationTime: *FILETIME,
            pftLastWriteTime: *FILETIME,
            pftChangeTime: *FILETIME,
            pftLastAccessTime: *FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileSize: fn(
            self: *const IOfflineFilesFileSysInfo,
            copy: OFFLINEFILES_ITEM_COPY,
            pSize: *LARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesFileSysInfo_GetAttributes(self: *const T, copy: OFFLINEFILES_ITEM_COPY, pdwAttributes: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesFileSysInfo.VTable, self.vtable).GetAttributes(@ptrCast(*const IOfflineFilesFileSysInfo, self), copy, pdwAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesFileSysInfo_GetTimes(self: *const T, copy: OFFLINEFILES_ITEM_COPY, pftCreationTime: *FILETIME, pftLastWriteTime: *FILETIME, pftChangeTime: *FILETIME, pftLastAccessTime: *FILETIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesFileSysInfo.VTable, self.vtable).GetTimes(@ptrCast(*const IOfflineFilesFileSysInfo, self), copy, pftCreationTime, pftLastWriteTime, pftChangeTime, pftLastAccessTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesFileSysInfo_GetFileSize(self: *const T, copy: OFFLINEFILES_ITEM_COPY, pSize: *LARGE_INTEGER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesFileSysInfo.VTable, self.vtable).GetFileSize(@ptrCast(*const IOfflineFilesFileSysInfo, self), copy, pSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesPinInfo_Value = @import("../zig.zig").Guid.initString("5B2B0655-B3FD-497D-ADEB-BD156BC8355B");
pub const IID_IOfflineFilesPinInfo = &IID_IOfflineFilesPinInfo_Value;
pub const IOfflineFilesPinInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsPinned: fn(
            self: *const IOfflineFilesPinInfo,
            pbPinned: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPinnedForUser: fn(
            self: *const IOfflineFilesPinInfo,
            pbPinnedForUser: *BOOL,
            pbInherit: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPinnedForUserByPolicy: fn(
            self: *const IOfflineFilesPinInfo,
            pbPinnedForUser: *BOOL,
            pbInherit: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPinnedForComputer: fn(
            self: *const IOfflineFilesPinInfo,
            pbPinnedForComputer: *BOOL,
            pbInherit: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPinnedForFolderRedirection: fn(
            self: *const IOfflineFilesPinInfo,
            pbPinnedForFolderRedirection: *BOOL,
            pbInherit: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesPinInfo_IsPinned(self: *const T, pbPinned: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesPinInfo.VTable, self.vtable).IsPinned(@ptrCast(*const IOfflineFilesPinInfo, self), pbPinned);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesPinInfo_IsPinnedForUser(self: *const T, pbPinnedForUser: *BOOL, pbInherit: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesPinInfo.VTable, self.vtable).IsPinnedForUser(@ptrCast(*const IOfflineFilesPinInfo, self), pbPinnedForUser, pbInherit);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesPinInfo_IsPinnedForUserByPolicy(self: *const T, pbPinnedForUser: *BOOL, pbInherit: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesPinInfo.VTable, self.vtable).IsPinnedForUserByPolicy(@ptrCast(*const IOfflineFilesPinInfo, self), pbPinnedForUser, pbInherit);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesPinInfo_IsPinnedForComputer(self: *const T, pbPinnedForComputer: *BOOL, pbInherit: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesPinInfo.VTable, self.vtable).IsPinnedForComputer(@ptrCast(*const IOfflineFilesPinInfo, self), pbPinnedForComputer, pbInherit);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesPinInfo_IsPinnedForFolderRedirection(self: *const T, pbPinnedForFolderRedirection: *BOOL, pbInherit: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesPinInfo.VTable, self.vtable).IsPinnedForFolderRedirection(@ptrCast(*const IOfflineFilesPinInfo, self), pbPinnedForFolderRedirection, pbInherit);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesPinInfo2_Value = @import("../zig.zig").Guid.initString("623C58A2-42ED-4AD7-B69A-0F1B30A72D0D");
pub const IID_IOfflineFilesPinInfo2 = &IID_IOfflineFilesPinInfo2_Value;
pub const IOfflineFilesPinInfo2 = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesPinInfo.VTable,
        IsPartlyPinned: fn(
            self: *const IOfflineFilesPinInfo2,
            pbPartlyPinned: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOfflineFilesPinInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesPinInfo2_IsPartlyPinned(self: *const T, pbPartlyPinned: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesPinInfo2.VTable, self.vtable).IsPartlyPinned(@ptrCast(*const IOfflineFilesPinInfo2, self), pbPartlyPinned);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesTransparentCacheInfo_Value = @import("../zig.zig").Guid.initString("BCAF4A01-5B68-4B56-A6A1-8D2786EDE8E3");
pub const IID_IOfflineFilesTransparentCacheInfo = &IID_IOfflineFilesTransparentCacheInfo_Value;
pub const IOfflineFilesTransparentCacheInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsTransparentlyCached: fn(
            self: *const IOfflineFilesTransparentCacheInfo,
            pbTransparentlyCached: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesTransparentCacheInfo_IsTransparentlyCached(self: *const T, pbTransparentlyCached: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesTransparentCacheInfo.VTable, self.vtable).IsTransparentlyCached(@ptrCast(*const IOfflineFilesTransparentCacheInfo, self), pbTransparentlyCached);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesGhostInfo_Value = @import("../zig.zig").Guid.initString("2B09D48C-8AB5-464F-A755-A59D92F99429");
pub const IID_IOfflineFilesGhostInfo = &IID_IOfflineFilesGhostInfo_Value;
pub const IOfflineFilesGhostInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsGhosted: fn(
            self: *const IOfflineFilesGhostInfo,
            pbGhosted: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesGhostInfo_IsGhosted(self: *const T, pbGhosted: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesGhostInfo.VTable, self.vtable).IsGhosted(@ptrCast(*const IOfflineFilesGhostInfo, self), pbGhosted);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesConnectionInfo_Value = @import("../zig.zig").Guid.initString("EFB23A09-A867-4BE8-83A6-86969A7D0856");
pub const IID_IOfflineFilesConnectionInfo = &IID_IOfflineFilesConnectionInfo_Value;
pub const IOfflineFilesConnectionInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetConnectState: fn(
            self: *const IOfflineFilesConnectionInfo,
            pConnectState: *OFFLINEFILES_CONNECT_STATE,
            pOfflineReason: *OFFLINEFILES_OFFLINE_REASON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConnectState: fn(
            self: *const IOfflineFilesConnectionInfo,
            hwndParent: HWND,
            dwFlags: u32,
            ConnectState: OFFLINEFILES_CONNECT_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransitionOnline: fn(
            self: *const IOfflineFilesConnectionInfo,
            hwndParent: HWND,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransitionOffline: fn(
            self: *const IOfflineFilesConnectionInfo,
            hwndParent: HWND,
            dwFlags: u32,
            bForceOpenFilesClosed: BOOL,
            pbOpenFilesPreventedTransition: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesConnectionInfo_GetConnectState(self: *const T, pConnectState: *OFFLINEFILES_CONNECT_STATE, pOfflineReason: *OFFLINEFILES_OFFLINE_REASON) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesConnectionInfo.VTable, self.vtable).GetConnectState(@ptrCast(*const IOfflineFilesConnectionInfo, self), pConnectState, pOfflineReason);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesConnectionInfo_SetConnectState(self: *const T, hwndParent: HWND, dwFlags: u32, ConnectState: OFFLINEFILES_CONNECT_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesConnectionInfo.VTable, self.vtable).SetConnectState(@ptrCast(*const IOfflineFilesConnectionInfo, self), hwndParent, dwFlags, ConnectState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesConnectionInfo_TransitionOnline(self: *const T, hwndParent: HWND, dwFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesConnectionInfo.VTable, self.vtable).TransitionOnline(@ptrCast(*const IOfflineFilesConnectionInfo, self), hwndParent, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesConnectionInfo_TransitionOffline(self: *const T, hwndParent: HWND, dwFlags: u32, bForceOpenFilesClosed: BOOL, pbOpenFilesPreventedTransition: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesConnectionInfo.VTable, self.vtable).TransitionOffline(@ptrCast(*const IOfflineFilesConnectionInfo, self), hwndParent, dwFlags, bForceOpenFilesClosed, pbOpenFilesPreventedTransition);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesShareInfo_Value = @import("../zig.zig").Guid.initString("7BCC43E7-31CE-4CA4-8CCD-1CFF2DC494DA");
pub const IID_IOfflineFilesShareInfo = &IID_IOfflineFilesShareInfo_Value;
pub const IOfflineFilesShareInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetShareItem: fn(
            self: *const IOfflineFilesShareInfo,
            ppShareItem: **IOfflineFilesShareItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShareCachingMode: fn(
            self: *const IOfflineFilesShareInfo,
            pCachingMode: *OFFLINEFILES_CACHING_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsShareDfsJunction: fn(
            self: *const IOfflineFilesShareInfo,
            pbIsDfsJunction: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesShareInfo_GetShareItem(self: *const T, ppShareItem: **IOfflineFilesShareItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesShareInfo.VTable, self.vtable).GetShareItem(@ptrCast(*const IOfflineFilesShareInfo, self), ppShareItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesShareInfo_GetShareCachingMode(self: *const T, pCachingMode: *OFFLINEFILES_CACHING_MODE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesShareInfo.VTable, self.vtable).GetShareCachingMode(@ptrCast(*const IOfflineFilesShareInfo, self), pCachingMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesShareInfo_IsShareDfsJunction(self: *const T, pbIsDfsJunction: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesShareInfo.VTable, self.vtable).IsShareDfsJunction(@ptrCast(*const IOfflineFilesShareInfo, self), pbIsDfsJunction);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesSuspend_Value = @import("../zig.zig").Guid.initString("62C4560F-BC0B-48CA-AD9D-34CB528D99A9");
pub const IID_IOfflineFilesSuspend = &IID_IOfflineFilesSuspend_Value;
pub const IOfflineFilesSuspend = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SuspendRoot: fn(
            self: *const IOfflineFilesSuspend,
            bSuspend: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSuspend_SuspendRoot(self: *const T, bSuspend: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSuspend.VTable, self.vtable).SuspendRoot(@ptrCast(*const IOfflineFilesSuspend, self), bSuspend);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesSuspendInfo_Value = @import("../zig.zig").Guid.initString("A457C25B-4E9C-4B04-85AF-8932CCD97889");
pub const IID_IOfflineFilesSuspendInfo = &IID_IOfflineFilesSuspendInfo_Value;
pub const IOfflineFilesSuspendInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsSuspended: fn(
            self: *const IOfflineFilesSuspendInfo,
            pbSuspended: *BOOL,
            pbSuspendedRoot: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSuspendInfo_IsSuspended(self: *const T, pbSuspended: *BOOL, pbSuspendedRoot: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSuspendInfo.VTable, self.vtable).IsSuspended(@ptrCast(*const IOfflineFilesSuspendInfo, self), pbSuspended, pbSuspendedRoot);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesSetting_Value = @import("../zig.zig").Guid.initString("D871D3F7-F613-48A1-827E-7A34E560FFF6");
pub const IID_IOfflineFilesSetting = &IID_IOfflineFilesSetting_Value;
pub const IOfflineFilesSetting = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetName: fn(
            self: *const IOfflineFilesSetting,
            ppszName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValueType: fn(
            self: *const IOfflineFilesSetting,
            pType: *OFFLINEFILES_SETTING_VALUE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreference: fn(
            self: *const IOfflineFilesSetting,
            pvarValue: *VARIANT,
            dwScope: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreferenceScope: fn(
            self: *const IOfflineFilesSetting,
            pdwScope: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPreference: fn(
            self: *const IOfflineFilesSetting,
            pvarValue: *const VARIANT,
            dwScope: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePreference: fn(
            self: *const IOfflineFilesSetting,
            dwScope: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicy: fn(
            self: *const IOfflineFilesSetting,
            pvarValue: *VARIANT,
            dwScope: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicyScope: fn(
            self: *const IOfflineFilesSetting,
            pdwScope: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const IOfflineFilesSetting,
            pvarValue: *VARIANT,
            pbSetByPolicy: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSetting_GetName(self: *const T, ppszName: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSetting.VTable, self.vtable).GetName(@ptrCast(*const IOfflineFilesSetting, self), ppszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSetting_GetValueType(self: *const T, pType: *OFFLINEFILES_SETTING_VALUE_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSetting.VTable, self.vtable).GetValueType(@ptrCast(*const IOfflineFilesSetting, self), pType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSetting_GetPreference(self: *const T, pvarValue: *VARIANT, dwScope: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSetting.VTable, self.vtable).GetPreference(@ptrCast(*const IOfflineFilesSetting, self), pvarValue, dwScope);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSetting_GetPreferenceScope(self: *const T, pdwScope: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSetting.VTable, self.vtable).GetPreferenceScope(@ptrCast(*const IOfflineFilesSetting, self), pdwScope);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSetting_SetPreference(self: *const T, pvarValue: *const VARIANT, dwScope: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSetting.VTable, self.vtable).SetPreference(@ptrCast(*const IOfflineFilesSetting, self), pvarValue, dwScope);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSetting_DeletePreference(self: *const T, dwScope: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSetting.VTable, self.vtable).DeletePreference(@ptrCast(*const IOfflineFilesSetting, self), dwScope);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSetting_GetPolicy(self: *const T, pvarValue: *VARIANT, dwScope: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSetting.VTable, self.vtable).GetPolicy(@ptrCast(*const IOfflineFilesSetting, self), pvarValue, dwScope);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSetting_GetPolicyScope(self: *const T, pdwScope: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSetting.VTable, self.vtable).GetPolicyScope(@ptrCast(*const IOfflineFilesSetting, self), pdwScope);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesSetting_GetValue(self: *const T, pvarValue: *VARIANT, pbSetByPolicy: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesSetting.VTable, self.vtable).GetValue(@ptrCast(*const IOfflineFilesSetting, self), pvarValue, pbSetByPolicy);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumOfflineFilesSettings_Value = @import("../zig.zig").Guid.initString("729680C4-1A38-47BC-9E5C-02C51562AC30");
pub const IID_IEnumOfflineFilesSettings = &IID_IEnumOfflineFilesSettings_Value;
pub const IEnumOfflineFilesSettings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumOfflineFilesSettings,
            celt: u32,
            rgelt: [*]*IOfflineFilesSetting,
            pceltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumOfflineFilesSettings,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumOfflineFilesSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumOfflineFilesSettings,
            ppenum: **IEnumOfflineFilesSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumOfflineFilesSettings_Next(self: *const T, celt: u32, rgelt: [*]*IOfflineFilesSetting, pceltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumOfflineFilesSettings.VTable, self.vtable).Next(@ptrCast(*const IEnumOfflineFilesSettings, self), celt, rgelt, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumOfflineFilesSettings_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumOfflineFilesSettings.VTable, self.vtable).Skip(@ptrCast(*const IEnumOfflineFilesSettings, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumOfflineFilesSettings_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumOfflineFilesSettings.VTable, self.vtable).Reset(@ptrCast(*const IEnumOfflineFilesSettings, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumOfflineFilesSettings_Clone(self: *const T, ppenum: **IEnumOfflineFilesSettings) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumOfflineFilesSettings.VTable, self.vtable).Clone(@ptrCast(*const IEnumOfflineFilesSettings, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesCache_Value = @import("../zig.zig").Guid.initString("855D6203-7914-48B9-8D40-4C56F5ACFFC5");
pub const IID_IOfflineFilesCache = &IID_IOfflineFilesCache_Value;
pub const IOfflineFilesCache = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Synchronize: fn(
            self: *const IOfflineFilesCache,
            hwndParent: HWND,
            rgpszPaths: [*]PWSTR,
            cPaths: u32,
            bAsync: BOOL,
            dwSyncControl: u32,
            pISyncConflictHandler: ?*IOfflineFilesSyncConflictHandler,
            pIProgress: ?*IOfflineFilesSyncProgress,
            pSyncId: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItems: fn(
            self: *const IOfflineFilesCache,
            rgpszPaths: [*]PWSTR,
            cPaths: u32,
            dwFlags: u32,
            bAsync: BOOL,
            pIProgress: ?*IOfflineFilesSimpleProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItemsForUser: fn(
            self: *const IOfflineFilesCache,
            pszUser: [*:0]const u16,
            rgpszPaths: [*]PWSTR,
            cPaths: u32,
            dwFlags: u32,
            bAsync: BOOL,
            pIProgress: ?*IOfflineFilesSimpleProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pin: fn(
            self: *const IOfflineFilesCache,
            hwndParent: HWND,
            rgpszPaths: [*]PWSTR,
            cPaths: u32,
            bDeep: BOOL,
            bAsync: BOOL,
            dwPinControlFlags: u32,
            pIProgress: ?*IOfflineFilesSyncProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unpin: fn(
            self: *const IOfflineFilesCache,
            hwndParent: HWND,
            rgpszPaths: [*]PWSTR,
            cPaths: u32,
            bDeep: BOOL,
            bAsync: BOOL,
            dwPinControlFlags: u32,
            pIProgress: ?*IOfflineFilesSyncProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEncryptionStatus: fn(
            self: *const IOfflineFilesCache,
            pbEncrypted: *BOOL,
            pbPartial: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encrypt: fn(
            self: *const IOfflineFilesCache,
            hwndParent: HWND,
            bEncrypt: BOOL,
            dwEncryptionControlFlags: u32,
            bAsync: BOOL,
            pIProgress: ?*IOfflineFilesSyncProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindItem: fn(
            self: *const IOfflineFilesCache,
            pszPath: [*:0]const u16,
            dwQueryFlags: u32,
            ppItem: **IOfflineFilesItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindItemEx: fn(
            self: *const IOfflineFilesCache,
            pszPath: [*:0]const u16,
            pIncludeFileFilter: ?*IOfflineFilesItemFilter,
            pIncludeDirFilter: ?*IOfflineFilesItemFilter,
            pExcludeFileFilter: ?*IOfflineFilesItemFilter,
            pExcludeDirFilter: ?*IOfflineFilesItemFilter,
            dwQueryFlags: u32,
            ppItem: **IOfflineFilesItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenameItem: fn(
            self: *const IOfflineFilesCache,
            pszPathOriginal: [*:0]const u16,
            pszPathNew: [*:0]const u16,
            bReplaceIfExists: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocation: fn(
            self: *const IOfflineFilesCache,
            ppszPath: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDiskSpaceInformationA: fn(
            self: *const IOfflineFilesCache,
            pcbVolumeTotal: *u64,
            pcbLimit: *u64,
            pcbUsed: *u64,
            pcbUnpinnedLimit: *u64,
            pcbUnpinnedUsed: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDiskSpaceLimits: fn(
            self: *const IOfflineFilesCache,
            cbLimit: u64,
            cbUnpinnedLimit: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessAdminPinPolicy: fn(
            self: *const IOfflineFilesCache,
            pPinProgress: ?*IOfflineFilesSyncProgress,
            pUnpinProgress: ?*IOfflineFilesSyncProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSettingObject: fn(
            self: *const IOfflineFilesCache,
            pszSettingName: [*:0]const u16,
            ppSetting: **IOfflineFilesSetting,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumSettingObjects: fn(
            self: *const IOfflineFilesCache,
            ppEnum: **IEnumOfflineFilesSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPathCacheable: fn(
            self: *const IOfflineFilesCache,
            pszPath: [*:0]const u16,
            pbCacheable: *BOOL,
            pShareCachingMode: *OFFLINEFILES_CACHING_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesCache_Synchronize(self: *const T, hwndParent: HWND, rgpszPaths: [*]PWSTR, cPaths: u32, bAsync: BOOL, dwSyncControl: u32, pISyncConflictHandler: ?*IOfflineFilesSyncConflictHandler, pIProgress: ?*IOfflineFilesSyncProgress, pSyncId: ?*Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesCache.VTable, self.vtable).Synchronize(@ptrCast(*const IOfflineFilesCache, self), hwndParent, rgpszPaths, cPaths, bAsync, dwSyncControl, pISyncConflictHandler, pIProgress, pSyncId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesCache_DeleteItems(self: *const T, rgpszPaths: [*]PWSTR, cPaths: u32, dwFlags: u32, bAsync: BOOL, pIProgress: ?*IOfflineFilesSimpleProgress) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesCache.VTable, self.vtable).DeleteItems(@ptrCast(*const IOfflineFilesCache, self), rgpszPaths, cPaths, dwFlags, bAsync, pIProgress);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesCache_DeleteItemsForUser(self: *const T, pszUser: [*:0]const u16, rgpszPaths: [*]PWSTR, cPaths: u32, dwFlags: u32, bAsync: BOOL, pIProgress: ?*IOfflineFilesSimpleProgress) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesCache.VTable, self.vtable).DeleteItemsForUser(@ptrCast(*const IOfflineFilesCache, self), pszUser, rgpszPaths, cPaths, dwFlags, bAsync, pIProgress);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesCache_Pin(self: *const T, hwndParent: HWND, rgpszPaths: [*]PWSTR, cPaths: u32, bDeep: BOOL, bAsync: BOOL, dwPinControlFlags: u32, pIProgress: ?*IOfflineFilesSyncProgress) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesCache.VTable, self.vtable).Pin(@ptrCast(*const IOfflineFilesCache, self), hwndParent, rgpszPaths, cPaths, bDeep, bAsync, dwPinControlFlags, pIProgress);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesCache_Unpin(self: *const T, hwndParent: HWND, rgpszPaths: [*]PWSTR, cPaths: u32, bDeep: BOOL, bAsync: BOOL, dwPinControlFlags: u32, pIProgress: ?*IOfflineFilesSyncProgress) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesCache.VTable, self.vtable).Unpin(@ptrCast(*const IOfflineFilesCache, self), hwndParent, rgpszPaths, cPaths, bDeep, bAsync, dwPinControlFlags, pIProgress);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesCache_GetEncryptionStatus(self: *const T, pbEncrypted: *BOOL, pbPartial: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesCache.VTable, self.vtable).GetEncryptionStatus(@ptrCast(*const IOfflineFilesCache, self), pbEncrypted, pbPartial);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesCache_Encrypt(self: *const T, hwndParent: HWND, bEncrypt: BOOL, dwEncryptionControlFlags: u32, bAsync: BOOL, pIProgress: ?*IOfflineFilesSyncProgress) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesCache.VTable, self.vtable).Encrypt(@ptrCast(*const IOfflineFilesCache, self), hwndParent, bEncrypt, dwEncryptionControlFlags, bAsync, pIProgress);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesCache_FindItem(self: *const T, pszPath: [*:0]const u16, dwQueryFlags: u32, ppItem: **IOfflineFilesItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesCache.VTable, self.vtable).FindItem(@ptrCast(*const IOfflineFilesCache, self), pszPath, dwQueryFlags, ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesCache_FindItemEx(self: *const T, pszPath: [*:0]const u16, pIncludeFileFilter: ?*IOfflineFilesItemFilter, pIncludeDirFilter: ?*IOfflineFilesItemFilter, pExcludeFileFilter: ?*IOfflineFilesItemFilter, pExcludeDirFilter: ?*IOfflineFilesItemFilter, dwQueryFlags: u32, ppItem: **IOfflineFilesItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesCache.VTable, self.vtable).FindItemEx(@ptrCast(*const IOfflineFilesCache, self), pszPath, pIncludeFileFilter, pIncludeDirFilter, pExcludeFileFilter, pExcludeDirFilter, dwQueryFlags, ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesCache_RenameItem(self: *const T, pszPathOriginal: [*:0]const u16, pszPathNew: [*:0]const u16, bReplaceIfExists: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesCache.VTable, self.vtable).RenameItem(@ptrCast(*const IOfflineFilesCache, self), pszPathOriginal, pszPathNew, bReplaceIfExists);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesCache_GetLocation(self: *const T, ppszPath: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesCache.VTable, self.vtable).GetLocation(@ptrCast(*const IOfflineFilesCache, self), ppszPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesCache_GetDiskSpaceInformationA(self: *const T, pcbVolumeTotal: *u64, pcbLimit: *u64, pcbUsed: *u64, pcbUnpinnedLimit: *u64, pcbUnpinnedUsed: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesCache.VTable, self.vtable).GetDiskSpaceInformationA(@ptrCast(*const IOfflineFilesCache, self), pcbVolumeTotal, pcbLimit, pcbUsed, pcbUnpinnedLimit, pcbUnpinnedUsed);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesCache_SetDiskSpaceLimits(self: *const T, cbLimit: u64, cbUnpinnedLimit: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesCache.VTable, self.vtable).SetDiskSpaceLimits(@ptrCast(*const IOfflineFilesCache, self), cbLimit, cbUnpinnedLimit);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesCache_ProcessAdminPinPolicy(self: *const T, pPinProgress: ?*IOfflineFilesSyncProgress, pUnpinProgress: ?*IOfflineFilesSyncProgress) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesCache.VTable, self.vtable).ProcessAdminPinPolicy(@ptrCast(*const IOfflineFilesCache, self), pPinProgress, pUnpinProgress);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesCache_GetSettingObject(self: *const T, pszSettingName: [*:0]const u16, ppSetting: **IOfflineFilesSetting) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesCache.VTable, self.vtable).GetSettingObject(@ptrCast(*const IOfflineFilesCache, self), pszSettingName, ppSetting);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesCache_EnumSettingObjects(self: *const T, ppEnum: **IEnumOfflineFilesSettings) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesCache.VTable, self.vtable).EnumSettingObjects(@ptrCast(*const IOfflineFilesCache, self), ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesCache_IsPathCacheable(self: *const T, pszPath: [*:0]const u16, pbCacheable: *BOOL, pShareCachingMode: *OFFLINEFILES_CACHING_MODE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesCache.VTable, self.vtable).IsPathCacheable(@ptrCast(*const IOfflineFilesCache, self), pszPath, pbCacheable, pShareCachingMode);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesCache2_Value = @import("../zig.zig").Guid.initString("8C075039-1551-4ED9-8781-56705C04D3C0");
pub const IID_IOfflineFilesCache2 = &IID_IOfflineFilesCache2_Value;
pub const IOfflineFilesCache2 = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesCache.VTable,
        RenameItemEx: fn(
            self: *const IOfflineFilesCache2,
            pszPathOriginal: [*:0]const u16,
            pszPathNew: [*:0]const u16,
            bReplaceIfExists: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IOfflineFilesCache.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOfflineFilesCache2_RenameItemEx(self: *const T, pszPathOriginal: [*:0]const u16, pszPathNew: [*:0]const u16, bReplaceIfExists: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOfflineFilesCache2.VTable, self.vtable).RenameItemEx(@ptrCast(*const IOfflineFilesCache2, self), pszPathOriginal, pszPathNew, bReplaceIfExists);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (4)
//--------------------------------------------------------------------------------
pub extern "CSCAPI" fn OfflineFilesEnable(
    bEnable: BOOL,
    pbRebootRequired: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CSCAPI" fn OfflineFilesStart(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CSCAPI" fn OfflineFilesQueryStatus(
    pbActive: ?*BOOL,
    pbEnabled: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CSCAPI" fn OfflineFilesQueryStatusEx(
    pbActive: ?*BOOL,
    pbEnabled: ?*BOOL,
    pbAvailable: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (10)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const PWSTR = @import("system_services.zig").PWSTR;
const FILETIME = @import("windows_programming.zig").FILETIME;
const BYTE_BLOB = @import("com.zig").BYTE_BLOB;
const IUnknown = @import("com.zig").IUnknown;
const LARGE_INTEGER = @import("system_services.zig").LARGE_INTEGER;
const HRESULT = @import("com.zig").HRESULT;
const VARIANT = @import("automation.zig").VARIANT;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;

test {
    const constant_export_count = 0;
    const type_export_count = 49;
    const enum_value_export_count = 158;
    const com_iface_id_export_count = 35;
    const com_class_id_export_count = 2;
    const func_export_count = 4;
    const unicode_alias_count = 0;
    const import_count = 10;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

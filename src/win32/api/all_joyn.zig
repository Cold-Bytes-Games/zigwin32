//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (20)
//--------------------------------------------------------------------------------
pub const ALLJOYN_LITTLE_ENDIAN : u8 = 108;
pub const ALLJOYN_BIG_ENDIAN : u8 = 66;
pub const ALLJOYN_MESSAGE_DEFAULT_TIMEOUT : u32 = 25000;
pub const ALLJOYN_CRED_PASSWORD : u16 = 1;
pub const ALLJOYN_CRED_USER_NAME : u16 = 2;
pub const ALLJOYN_CRED_CERT_CHAIN : u16 = 4;
pub const ALLJOYN_CRED_PRIVATE_KEY : u16 = 8;
pub const ALLJOYN_CRED_LOGON_ENTRY : u16 = 16;
pub const ALLJOYN_CRED_EXPIRATION : u16 = 32;
pub const ALLJOYN_CRED_NEW_PASSWORD : u16 = 4097;
pub const ALLJOYN_CRED_ONE_TIME_PWD : u16 = 8193;
pub const ALLJOYN_PROP_ACCESS_READ : u8 = 1;
pub const ALLJOYN_PROP_ACCESS_WRITE : u8 = 2;
pub const ALLJOYN_PROP_ACCESS_RW : u8 = 3;
pub const ALLJOYN_MEMBER_ANNOTATE_NO_REPLY : u8 = 1;
pub const ALLJOYN_MEMBER_ANNOTATE_DEPRECATED : u8 = 2;
pub const ALLJOYN_MEMBER_ANNOTATE_SESSIONCAST : u8 = 4;
pub const ALLJOYN_MEMBER_ANNOTATE_SESSIONLESS : u8 = 8;
pub const ALLJOYN_MEMBER_ANNOTATE_UNICAST : u8 = 16;
pub const ALLJOYN_MEMBER_ANNOTATE_GLOBAL_BROADCAST : u8 = 32;

//--------------------------------------------------------------------------------
// Section: Types (107)
//--------------------------------------------------------------------------------
pub const alljoyn_about_announceflag = extern enum(i32) {
    UNANNOUNCED = 0,
    ANNOUNCED = 1,
};
pub const UNANNOUNCED = alljoyn_about_announceflag.UNANNOUNCED;
pub const ANNOUNCED = alljoyn_about_announceflag.ANNOUNCED;

pub const QStatus = extern enum(i32) {
    ER_OK = 0,
    ER_FAIL = 1,
    ER_UTF_CONVERSION_FAILED = 2,
    ER_BUFFER_TOO_SMALL = 3,
    ER_OS_ERROR = 4,
    ER_OUT_OF_MEMORY = 5,
    ER_SOCKET_BIND_ERROR = 6,
    ER_INIT_FAILED = 7,
    ER_WOULDBLOCK = 8,
    ER_NOT_IMPLEMENTED = 9,
    ER_TIMEOUT = 10,
    ER_SOCK_OTHER_END_CLOSED = 11,
    ER_BAD_ARG_1 = 12,
    ER_BAD_ARG_2 = 13,
    ER_BAD_ARG_3 = 14,
    ER_BAD_ARG_4 = 15,
    ER_BAD_ARG_5 = 16,
    ER_BAD_ARG_6 = 17,
    ER_BAD_ARG_7 = 18,
    ER_BAD_ARG_8 = 19,
    ER_INVALID_ADDRESS = 20,
    ER_INVALID_DATA = 21,
    ER_READ_ERROR = 22,
    ER_WRITE_ERROR = 23,
    ER_OPEN_FAILED = 24,
    ER_PARSE_ERROR = 25,
    ER_END_OF_DATA = 26,
    ER_CONN_REFUSED = 27,
    ER_BAD_ARG_COUNT = 28,
    ER_WARNING = 29,
    ER_EOF = 30,
    ER_DEADLOCK = 31,
    ER_COMMON_ERRORS = 4096,
    ER_STOPPING_THREAD = 4097,
    ER_ALERTED_THREAD = 4098,
    ER_XML_MALFORMED = 4099,
    ER_AUTH_FAIL = 4100,
    ER_AUTH_USER_REJECT = 4101,
    ER_NO_SUCH_ALARM = 4102,
    ER_TIMER_FALLBEHIND = 4103,
    ER_SSL_ERRORS = 4104,
    ER_SSL_INIT = 4105,
    ER_SSL_CONNECT = 4106,
    ER_SSL_VERIFY = 4107,
    ER_EXTERNAL_THREAD = 4108,
    ER_CRYPTO_ERROR = 4109,
    ER_CRYPTO_TRUNCATED = 4110,
    ER_CRYPTO_KEY_UNAVAILABLE = 4111,
    ER_BAD_HOSTNAME = 4112,
    ER_CRYPTO_KEY_UNUSABLE = 4113,
    ER_EMPTY_KEY_BLOB = 4114,
    ER_CORRUPT_KEYBLOB = 4115,
    ER_INVALID_KEY_ENCODING = 4116,
    ER_DEAD_THREAD = 4117,
    ER_THREAD_RUNNING = 4118,
    ER_THREAD_STOPPING = 4119,
    ER_BAD_STRING_ENCODING = 4120,
    ER_CRYPTO_INSUFFICIENT_SECURITY = 4121,
    ER_CRYPTO_ILLEGAL_PARAMETERS = 4122,
    ER_CRYPTO_HASH_UNINITIALIZED = 4123,
    ER_THREAD_NO_WAIT = 4124,
    ER_TIMER_EXITING = 4125,
    ER_INVALID_GUID = 4126,
    ER_THREADPOOL_EXHAUSTED = 4127,
    ER_THREADPOOL_STOPPING = 4128,
    ER_INVALID_STREAM = 4129,
    ER_TIMER_FULL = 4130,
    ER_IODISPATCH_STOPPING = 4131,
    ER_SLAP_INVALID_PACKET_LEN = 4132,
    ER_SLAP_HDR_CHECKSUM_ERROR = 4133,
    ER_SLAP_INVALID_PACKET_TYPE = 4134,
    ER_SLAP_LEN_MISMATCH = 4135,
    ER_SLAP_PACKET_TYPE_MISMATCH = 4136,
    ER_SLAP_CRC_ERROR = 4137,
    ER_SLAP_ERROR = 4138,
    ER_SLAP_OTHER_END_CLOSED = 4139,
    ER_TIMER_NOT_ALLOWED = 4140,
    ER_NOT_CONN = 4141,
    ER_XML_CONVERTER_ERROR = 8192,
    ER_XML_INVALID_RULES_COUNT = 8193,
    ER_XML_INTERFACE_MEMBERS_MISSING = 8194,
    ER_XML_INVALID_MEMBER_TYPE = 8195,
    ER_XML_INVALID_MEMBER_ACTION = 8196,
    ER_XML_MEMBER_DENY_ACTION_WITH_OTHER = 8197,
    ER_XML_INVALID_ANNOTATIONS_COUNT = 8198,
    ER_XML_INVALID_ELEMENT_NAME = 8199,
    ER_XML_INVALID_ATTRIBUTE_VALUE = 8200,
    ER_XML_INVALID_SECURITY_LEVEL_ANNOTATION_VALUE = 8201,
    ER_XML_INVALID_ELEMENT_CHILDREN_COUNT = 8202,
    ER_XML_INVALID_POLICY_VERSION = 8203,
    ER_XML_INVALID_POLICY_SERIAL_NUMBER = 8204,
    ER_XML_INVALID_ACL_PEER_TYPE = 8205,
    ER_XML_INVALID_ACL_PEER_CHILDREN_COUNT = 8206,
    ER_XML_ACL_ALL_TYPE_PEER_WITH_OTHERS = 8207,
    ER_XML_INVALID_ACL_PEER_PUBLIC_KEY = 8208,
    ER_XML_ACL_PEER_NOT_UNIQUE = 8209,
    ER_XML_ACL_PEER_PUBLIC_KEY_SET = 8210,
    ER_XML_ACLS_MISSING = 8211,
    ER_XML_ACL_PEERS_MISSING = 8212,
    ER_XML_INVALID_OBJECT_PATH = 8213,
    ER_XML_INVALID_INTERFACE_NAME = 8214,
    ER_XML_INVALID_MEMBER_NAME = 8215,
    ER_XML_INVALID_MANIFEST_VERSION = 8216,
    ER_XML_INVALID_OID = 8217,
    ER_XML_INVALID_BASE64 = 8218,
    ER_XML_INTERFACE_NAME_NOT_UNIQUE = 8219,
    ER_XML_MEMBER_NAME_NOT_UNIQUE = 8220,
    ER_XML_OBJECT_PATH_NOT_UNIQUE = 8221,
    ER_XML_ANNOTATION_NOT_UNIQUE = 8222,
    ER_NONE = 65535,
    ER_BUS_ERRORS = 36864,
    ER_BUS_READ_ERROR = 36865,
    ER_BUS_WRITE_ERROR = 36866,
    ER_BUS_BAD_VALUE_TYPE = 36867,
    ER_BUS_BAD_HEADER_FIELD = 36868,
    ER_BUS_BAD_SIGNATURE = 36869,
    ER_BUS_BAD_OBJ_PATH = 36870,
    ER_BUS_BAD_MEMBER_NAME = 36871,
    ER_BUS_BAD_INTERFACE_NAME = 36872,
    ER_BUS_BAD_ERROR_NAME = 36873,
    ER_BUS_BAD_BUS_NAME = 36874,
    ER_BUS_NAME_TOO_LONG = 36875,
    ER_BUS_BAD_LENGTH = 36876,
    ER_BUS_BAD_VALUE = 36877,
    ER_BUS_BAD_HDR_FLAGS = 36878,
    ER_BUS_BAD_BODY_LEN = 36879,
    ER_BUS_BAD_HEADER_LEN = 36880,
    ER_BUS_UNKNOWN_SERIAL = 36881,
    ER_BUS_UNKNOWN_PATH = 36882,
    ER_BUS_UNKNOWN_INTERFACE = 36883,
    ER_BUS_ESTABLISH_FAILED = 36884,
    ER_BUS_UNEXPECTED_SIGNATURE = 36885,
    ER_BUS_INTERFACE_MISSING = 36886,
    ER_BUS_PATH_MISSING = 36887,
    ER_BUS_MEMBER_MISSING = 36888,
    ER_BUS_REPLY_SERIAL_MISSING = 36889,
    ER_BUS_ERROR_NAME_MISSING = 36890,
    ER_BUS_INTERFACE_NO_SUCH_MEMBER = 36891,
    ER_BUS_NO_SUCH_OBJECT = 36892,
    ER_BUS_OBJECT_NO_SUCH_MEMBER = 36893,
    ER_BUS_OBJECT_NO_SUCH_INTERFACE = 36894,
    ER_BUS_NO_SUCH_INTERFACE = 36895,
    ER_BUS_MEMBER_NO_SUCH_SIGNATURE = 36896,
    ER_BUS_NOT_NUL_TERMINATED = 36897,
    ER_BUS_NO_SUCH_PROPERTY = 36898,
    ER_BUS_SET_WRONG_SIGNATURE = 36899,
    ER_BUS_PROPERTY_VALUE_NOT_SET = 36900,
    ER_BUS_PROPERTY_ACCESS_DENIED = 36901,
    ER_BUS_NO_TRANSPORTS = 36902,
    ER_BUS_BAD_TRANSPORT_ARGS = 36903,
    ER_BUS_NO_ROUTE = 36904,
    ER_BUS_NO_ENDPOINT = 36905,
    ER_BUS_BAD_SEND_PARAMETER = 36906,
    ER_BUS_UNMATCHED_REPLY_SERIAL = 36907,
    ER_BUS_BAD_SENDER_ID = 36908,
    ER_BUS_TRANSPORT_NOT_STARTED = 36909,
    ER_BUS_EMPTY_MESSAGE = 36910,
    ER_BUS_NOT_OWNER = 36911,
    ER_BUS_SET_PROPERTY_REJECTED = 36912,
    ER_BUS_CONNECT_FAILED = 36913,
    ER_BUS_REPLY_IS_ERROR_MESSAGE = 36914,
    ER_BUS_NOT_AUTHENTICATING = 36915,
    ER_BUS_NO_LISTENER = 36916,
    ER_BUS_NOT_ALLOWED = 36918,
    ER_BUS_WRITE_QUEUE_FULL = 36919,
    ER_BUS_ENDPOINT_CLOSING = 36920,
    ER_BUS_INTERFACE_MISMATCH = 36921,
    ER_BUS_MEMBER_ALREADY_EXISTS = 36922,
    ER_BUS_PROPERTY_ALREADY_EXISTS = 36923,
    ER_BUS_IFACE_ALREADY_EXISTS = 36924,
    ER_BUS_ERROR_RESPONSE = 36925,
    ER_BUS_BAD_XML = 36926,
    ER_BUS_BAD_CHILD_PATH = 36927,
    ER_BUS_OBJ_ALREADY_EXISTS = 36928,
    ER_BUS_OBJ_NOT_FOUND = 36929,
    ER_BUS_CANNOT_EXPAND_MESSAGE = 36930,
    ER_BUS_NOT_COMPRESSED = 36931,
    ER_BUS_ALREADY_CONNECTED = 36932,
    ER_BUS_NOT_CONNECTED = 36933,
    ER_BUS_ALREADY_LISTENING = 36934,
    ER_BUS_KEY_UNAVAILABLE = 36935,
    ER_BUS_TRUNCATED = 36936,
    ER_BUS_KEY_STORE_NOT_LOADED = 36937,
    ER_BUS_NO_AUTHENTICATION_MECHANISM = 36938,
    ER_BUS_BUS_ALREADY_STARTED = 36939,
    ER_BUS_BUS_NOT_STARTED = 36940,
    ER_BUS_KEYBLOB_OP_INVALID = 36941,
    ER_BUS_INVALID_HEADER_CHECKSUM = 36942,
    ER_BUS_MESSAGE_NOT_ENCRYPTED = 36943,
    ER_BUS_INVALID_HEADER_SERIAL = 36944,
    ER_BUS_TIME_TO_LIVE_EXPIRED = 36945,
    ER_BUS_HDR_EXPANSION_INVALID = 36946,
    ER_BUS_MISSING_COMPRESSION_TOKEN = 36947,
    ER_BUS_NO_PEER_GUID = 36948,
    ER_BUS_MESSAGE_DECRYPTION_FAILED = 36949,
    ER_BUS_SECURITY_FATAL = 36950,
    ER_BUS_KEY_EXPIRED = 36951,
    ER_BUS_CORRUPT_KEYSTORE = 36952,
    ER_BUS_NO_CALL_FOR_REPLY = 36953,
    ER_BUS_NOT_A_COMPLETE_TYPE = 36954,
    ER_BUS_POLICY_VIOLATION = 36955,
    ER_BUS_NO_SUCH_SERVICE = 36956,
    ER_BUS_TRANSPORT_NOT_AVAILABLE = 36957,
    ER_BUS_INVALID_AUTH_MECHANISM = 36958,
    ER_BUS_KEYSTORE_VERSION_MISMATCH = 36959,
    ER_BUS_BLOCKING_CALL_NOT_ALLOWED = 36960,
    ER_BUS_SIGNATURE_MISMATCH = 36961,
    ER_BUS_STOPPING = 36962,
    ER_BUS_METHOD_CALL_ABORTED = 36963,
    ER_BUS_CANNOT_ADD_INTERFACE = 36964,
    ER_BUS_CANNOT_ADD_HANDLER = 36965,
    ER_BUS_KEYSTORE_NOT_LOADED = 36966,
    ER_BUS_NO_SUCH_HANDLE = 36971,
    ER_BUS_HANDLES_NOT_ENABLED = 36972,
    ER_BUS_HANDLES_MISMATCH = 36973,
    ER_BUS_NO_SESSION = 36975,
    ER_BUS_ELEMENT_NOT_FOUND = 36976,
    ER_BUS_NOT_A_DICTIONARY = 36977,
    ER_BUS_WAIT_FAILED = 36978,
    ER_BUS_BAD_SESSION_OPTS = 36980,
    ER_BUS_CONNECTION_REJECTED = 36981,
    ER_DBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER = 36982,
    ER_DBUS_REQUEST_NAME_REPLY_IN_QUEUE = 36983,
    ER_DBUS_REQUEST_NAME_REPLY_EXISTS = 36984,
    ER_DBUS_REQUEST_NAME_REPLY_ALREADY_OWNER = 36985,
    ER_DBUS_RELEASE_NAME_REPLY_RELEASED = 36986,
    ER_DBUS_RELEASE_NAME_REPLY_NON_EXISTENT = 36987,
    ER_DBUS_RELEASE_NAME_REPLY_NOT_OWNER = 36988,
    ER_DBUS_START_REPLY_ALREADY_RUNNING = 36990,
    ER_ALLJOYN_BINDSESSIONPORT_REPLY_ALREADY_EXISTS = 36992,
    ER_ALLJOYN_BINDSESSIONPORT_REPLY_FAILED = 36993,
    ER_ALLJOYN_JOINSESSION_REPLY_NO_SESSION = 36995,
    ER_ALLJOYN_JOINSESSION_REPLY_UNREACHABLE = 36996,
    ER_ALLJOYN_JOINSESSION_REPLY_CONNECT_FAILED = 36997,
    ER_ALLJOYN_JOINSESSION_REPLY_REJECTED = 36998,
    ER_ALLJOYN_JOINSESSION_REPLY_BAD_SESSION_OPTS = 36999,
    ER_ALLJOYN_JOINSESSION_REPLY_FAILED = 37000,
    ER_ALLJOYN_LEAVESESSION_REPLY_NO_SESSION = 37002,
    ER_ALLJOYN_LEAVESESSION_REPLY_FAILED = 37003,
    ER_ALLJOYN_ADVERTISENAME_REPLY_TRANSPORT_NOT_AVAILABLE = 37004,
    ER_ALLJOYN_ADVERTISENAME_REPLY_ALREADY_ADVERTISING = 37005,
    ER_ALLJOYN_ADVERTISENAME_REPLY_FAILED = 37006,
    ER_ALLJOYN_CANCELADVERTISENAME_REPLY_FAILED = 37008,
    ER_ALLJOYN_FINDADVERTISEDNAME_REPLY_TRANSPORT_NOT_AVAILABLE = 37009,
    ER_ALLJOYN_FINDADVERTISEDNAME_REPLY_ALREADY_DISCOVERING = 37010,
    ER_ALLJOYN_FINDADVERTISEDNAME_REPLY_FAILED = 37011,
    ER_ALLJOYN_CANCELFINDADVERTISEDNAME_REPLY_FAILED = 37013,
    ER_BUS_UNEXPECTED_DISPOSITION = 37014,
    ER_BUS_INTERFACE_ACTIVATED = 37015,
    ER_ALLJOYN_UNBINDSESSIONPORT_REPLY_BAD_PORT = 37016,
    ER_ALLJOYN_UNBINDSESSIONPORT_REPLY_FAILED = 37017,
    ER_ALLJOYN_BINDSESSIONPORT_REPLY_INVALID_OPTS = 37018,
    ER_ALLJOYN_JOINSESSION_REPLY_ALREADY_JOINED = 37019,
    ER_BUS_SELF_CONNECT = 37020,
    ER_BUS_SECURITY_NOT_ENABLED = 37021,
    ER_BUS_LISTENER_ALREADY_SET = 37022,
    ER_BUS_PEER_AUTH_VERSION_MISMATCH = 37023,
    ER_ALLJOYN_SETLINKTIMEOUT_REPLY_NOT_SUPPORTED = 37024,
    ER_ALLJOYN_SETLINKTIMEOUT_REPLY_NO_DEST_SUPPORT = 37025,
    ER_ALLJOYN_SETLINKTIMEOUT_REPLY_FAILED = 37026,
    ER_ALLJOYN_ACCESS_PERMISSION_WARNING = 37027,
    ER_ALLJOYN_ACCESS_PERMISSION_ERROR = 37028,
    ER_BUS_DESTINATION_NOT_AUTHENTICATED = 37029,
    ER_BUS_ENDPOINT_REDIRECTED = 37030,
    ER_BUS_AUTHENTICATION_PENDING = 37031,
    ER_BUS_NOT_AUTHORIZED = 37032,
    ER_PACKET_BUS_NO_SUCH_CHANNEL = 37033,
    ER_PACKET_BAD_FORMAT = 37034,
    ER_PACKET_CONNECT_TIMEOUT = 37035,
    ER_PACKET_CHANNEL_FAIL = 37036,
    ER_PACKET_TOO_LARGE = 37037,
    ER_PACKET_BAD_PARAMETER = 37038,
    ER_PACKET_BAD_CRC = 37039,
    ER_RENDEZVOUS_SERVER_DEACTIVATED_USER = 37067,
    ER_RENDEZVOUS_SERVER_UNKNOWN_USER = 37068,
    ER_UNABLE_TO_CONNECT_TO_RENDEZVOUS_SERVER = 37069,
    ER_NOT_CONNECTED_TO_RENDEZVOUS_SERVER = 37070,
    ER_UNABLE_TO_SEND_MESSAGE_TO_RENDEZVOUS_SERVER = 37071,
    ER_INVALID_RENDEZVOUS_SERVER_INTERFACE_MESSAGE = 37072,
    ER_INVALID_PERSISTENT_CONNECTION_MESSAGE_RESPONSE = 37073,
    ER_INVALID_ON_DEMAND_CONNECTION_MESSAGE_RESPONSE = 37074,
    ER_INVALID_HTTP_METHOD_USED_FOR_RENDEZVOUS_SERVER_INTERFACE_MESSAGE = 37075,
    ER_RENDEZVOUS_SERVER_ERR500_INTERNAL_ERROR = 37076,
    ER_RENDEZVOUS_SERVER_ERR503_STATUS_UNAVAILABLE = 37077,
    ER_RENDEZVOUS_SERVER_ERR401_UNAUTHORIZED_REQUEST = 37078,
    ER_RENDEZVOUS_SERVER_UNRECOVERABLE_ERROR = 37079,
    ER_RENDEZVOUS_SERVER_ROOT_CERTIFICATE_UNINITIALIZED = 37080,
    ER_BUS_NO_SUCH_ANNOTATION = 37081,
    ER_BUS_ANNOTATION_ALREADY_EXISTS = 37082,
    ER_SOCK_CLOSING = 37083,
    ER_NO_SUCH_DEVICE = 37084,
    ER_P2P = 37085,
    ER_P2P_TIMEOUT = 37086,
    ER_P2P_NOT_CONNECTED = 37087,
    ER_BAD_TRANSPORT_MASK = 37088,
    ER_PROXIMITY_CONNECTION_ESTABLISH_FAIL = 37089,
    ER_PROXIMITY_NO_PEERS_FOUND = 37090,
    ER_BUS_OBJECT_NOT_REGISTERED = 37091,
    ER_P2P_DISABLED = 37092,
    ER_P2P_BUSY = 37093,
    ER_BUS_INCOMPATIBLE_DAEMON = 37094,
    ER_P2P_NO_GO = 37095,
    ER_P2P_NO_STA = 37096,
    ER_P2P_FORBIDDEN = 37097,
    ER_ALLJOYN_ONAPPSUSPEND_REPLY_FAILED = 37098,
    ER_ALLJOYN_ONAPPSUSPEND_REPLY_UNSUPPORTED = 37099,
    ER_ALLJOYN_ONAPPRESUME_REPLY_FAILED = 37100,
    ER_ALLJOYN_ONAPPRESUME_REPLY_UNSUPPORTED = 37101,
    ER_BUS_NO_SUCH_MESSAGE = 37102,
    ER_ALLJOYN_REMOVESESSIONMEMBER_REPLY_NO_SESSION = 37103,
    ER_ALLJOYN_REMOVESESSIONMEMBER_NOT_BINDER = 37104,
    ER_ALLJOYN_REMOVESESSIONMEMBER_NOT_MULTIPOINT = 37105,
    ER_ALLJOYN_REMOVESESSIONMEMBER_NOT_FOUND = 37106,
    ER_ALLJOYN_REMOVESESSIONMEMBER_INCOMPATIBLE_REMOTE_DAEMON = 37107,
    ER_ALLJOYN_REMOVESESSIONMEMBER_REPLY_FAILED = 37108,
    ER_BUS_REMOVED_BY_BINDER = 37109,
    ER_BUS_MATCH_RULE_NOT_FOUND = 37110,
    ER_ALLJOYN_PING_FAILED = 37111,
    ER_ALLJOYN_PING_REPLY_UNREACHABLE = 37112,
    ER_UDP_MSG_TOO_LONG = 37113,
    ER_UDP_DEMUX_NO_ENDPOINT = 37114,
    ER_UDP_NO_NETWORK = 37115,
    ER_UDP_UNEXPECTED_LENGTH = 37116,
    ER_UDP_UNEXPECTED_FLOW = 37117,
    ER_UDP_DISCONNECT = 37118,
    ER_UDP_NOT_IMPLEMENTED = 37119,
    ER_UDP_NO_LISTENER = 37120,
    ER_UDP_STOPPING = 37121,
    ER_ARDP_BACKPRESSURE = 37122,
    ER_UDP_BACKPRESSURE = 37123,
    ER_ARDP_INVALID_STATE = 37124,
    ER_ARDP_TTL_EXPIRED = 37125,
    ER_ARDP_PERSIST_TIMEOUT = 37126,
    ER_ARDP_PROBE_TIMEOUT = 37127,
    ER_ARDP_REMOTE_CONNECTION_RESET = 37128,
    ER_UDP_BUSHELLO = 37129,
    ER_UDP_MESSAGE = 37130,
    ER_UDP_INVALID = 37131,
    ER_UDP_UNSUPPORTED = 37132,
    ER_UDP_ENDPOINT_STALLED = 37133,
    ER_ARDP_INVALID_RESPONSE = 37134,
    ER_ARDP_INVALID_CONNECTION = 37135,
    ER_UDP_LOCAL_DISCONNECT = 37136,
    ER_UDP_EARLY_EXIT = 37137,
    ER_UDP_LOCAL_DISCONNECT_FAIL = 37138,
    ER_ARDP_DISCONNECTING = 37139,
    ER_ALLJOYN_PING_REPLY_INCOMPATIBLE_REMOTE_ROUTING_NODE = 37140,
    ER_ALLJOYN_PING_REPLY_TIMEOUT = 37141,
    ER_ALLJOYN_PING_REPLY_UNKNOWN_NAME = 37142,
    ER_ALLJOYN_PING_REPLY_FAILED = 37143,
    ER_TCP_MAX_UNTRUSTED = 37144,
    ER_ALLJOYN_PING_REPLY_IN_PROGRESS = 37145,
    ER_LANGUAGE_NOT_SUPPORTED = 37146,
    ER_ABOUT_FIELD_ALREADY_SPECIFIED = 37147,
    ER_UDP_NOT_DISCONNECTED = 37148,
    ER_UDP_ENDPOINT_NOT_STARTED = 37149,
    ER_UDP_ENDPOINT_REMOVED = 37150,
    ER_ARDP_VERSION_NOT_SUPPORTED = 37151,
    ER_CONNECTION_LIMIT_EXCEEDED = 37152,
    ER_ARDP_WRITE_BLOCKED = 37153,
    ER_PERMISSION_DENIED = 37154,
    ER_ABOUT_DEFAULT_LANGUAGE_NOT_SPECIFIED = 37155,
    ER_ABOUT_SESSIONPORT_NOT_BOUND = 37156,
    ER_ABOUT_ABOUTDATA_MISSING_REQUIRED_FIELD = 37157,
    ER_ABOUT_INVALID_ABOUTDATA_LISTENER = 37158,
    ER_BUS_PING_GROUP_NOT_FOUND = 37159,
    ER_BUS_REMOVED_BY_BINDER_SELF = 37160,
    ER_INVALID_CONFIG = 37161,
    ER_ABOUT_INVALID_ABOUTDATA_FIELD_VALUE = 37162,
    ER_ABOUT_INVALID_ABOUTDATA_FIELD_APPID_SIZE = 37163,
    ER_BUS_TRANSPORT_ACCESS_DENIED = 37164,
    ER_INVALID_CERTIFICATE = 37165,
    ER_CERTIFICATE_NOT_FOUND = 37166,
    ER_DUPLICATE_CERTIFICATE = 37167,
    ER_UNKNOWN_CERTIFICATE = 37168,
    ER_MISSING_DIGEST_IN_CERTIFICATE = 37169,
    ER_DIGEST_MISMATCH = 37170,
    ER_DUPLICATE_KEY = 37171,
    ER_NO_COMMON_TRUST = 37172,
    ER_MANIFEST_NOT_FOUND = 37173,
    ER_INVALID_CERT_CHAIN = 37174,
    ER_NO_TRUST_ANCHOR = 37175,
    ER_INVALID_APPLICATION_STATE = 37176,
    ER_FEATURE_NOT_AVAILABLE = 37177,
    ER_KEY_STORE_ALREADY_INITIALIZED = 37178,
    ER_KEY_STORE_ID_NOT_YET_SET = 37179,
    ER_POLICY_NOT_NEWER = 37180,
    ER_MANIFEST_REJECTED = 37181,
    ER_INVALID_CERTIFICATE_USAGE = 37182,
    ER_INVALID_SIGNAL_EMISSION_TYPE = 37183,
    ER_APPLICATION_STATE_LISTENER_ALREADY_EXISTS = 37184,
    ER_APPLICATION_STATE_LISTENER_NO_SUCH_LISTENER = 37185,
    ER_MANAGEMENT_ALREADY_STARTED = 37186,
    ER_MANAGEMENT_NOT_STARTED = 37187,
    ER_BUS_DESCRIPTION_ALREADY_EXISTS = 37188,
};
pub const ER_OK = QStatus.ER_OK;
pub const ER_FAIL = QStatus.ER_FAIL;
pub const ER_UTF_CONVERSION_FAILED = QStatus.ER_UTF_CONVERSION_FAILED;
pub const ER_BUFFER_TOO_SMALL = QStatus.ER_BUFFER_TOO_SMALL;
pub const ER_OS_ERROR = QStatus.ER_OS_ERROR;
pub const ER_OUT_OF_MEMORY = QStatus.ER_OUT_OF_MEMORY;
pub const ER_SOCKET_BIND_ERROR = QStatus.ER_SOCKET_BIND_ERROR;
pub const ER_INIT_FAILED = QStatus.ER_INIT_FAILED;
pub const ER_WOULDBLOCK = QStatus.ER_WOULDBLOCK;
pub const ER_NOT_IMPLEMENTED = QStatus.ER_NOT_IMPLEMENTED;
pub const ER_TIMEOUT = QStatus.ER_TIMEOUT;
pub const ER_SOCK_OTHER_END_CLOSED = QStatus.ER_SOCK_OTHER_END_CLOSED;
pub const ER_BAD_ARG_1 = QStatus.ER_BAD_ARG_1;
pub const ER_BAD_ARG_2 = QStatus.ER_BAD_ARG_2;
pub const ER_BAD_ARG_3 = QStatus.ER_BAD_ARG_3;
pub const ER_BAD_ARG_4 = QStatus.ER_BAD_ARG_4;
pub const ER_BAD_ARG_5 = QStatus.ER_BAD_ARG_5;
pub const ER_BAD_ARG_6 = QStatus.ER_BAD_ARG_6;
pub const ER_BAD_ARG_7 = QStatus.ER_BAD_ARG_7;
pub const ER_BAD_ARG_8 = QStatus.ER_BAD_ARG_8;
pub const ER_INVALID_ADDRESS = QStatus.ER_INVALID_ADDRESS;
pub const ER_INVALID_DATA = QStatus.ER_INVALID_DATA;
pub const ER_READ_ERROR = QStatus.ER_READ_ERROR;
pub const ER_WRITE_ERROR = QStatus.ER_WRITE_ERROR;
pub const ER_OPEN_FAILED = QStatus.ER_OPEN_FAILED;
pub const ER_PARSE_ERROR = QStatus.ER_PARSE_ERROR;
pub const ER_END_OF_DATA = QStatus.ER_END_OF_DATA;
pub const ER_CONN_REFUSED = QStatus.ER_CONN_REFUSED;
pub const ER_BAD_ARG_COUNT = QStatus.ER_BAD_ARG_COUNT;
pub const ER_WARNING = QStatus.ER_WARNING;
pub const ER_EOF = QStatus.ER_EOF;
pub const ER_DEADLOCK = QStatus.ER_DEADLOCK;
pub const ER_COMMON_ERRORS = QStatus.ER_COMMON_ERRORS;
pub const ER_STOPPING_THREAD = QStatus.ER_STOPPING_THREAD;
pub const ER_ALERTED_THREAD = QStatus.ER_ALERTED_THREAD;
pub const ER_XML_MALFORMED = QStatus.ER_XML_MALFORMED;
pub const ER_AUTH_FAIL = QStatus.ER_AUTH_FAIL;
pub const ER_AUTH_USER_REJECT = QStatus.ER_AUTH_USER_REJECT;
pub const ER_NO_SUCH_ALARM = QStatus.ER_NO_SUCH_ALARM;
pub const ER_TIMER_FALLBEHIND = QStatus.ER_TIMER_FALLBEHIND;
pub const ER_SSL_ERRORS = QStatus.ER_SSL_ERRORS;
pub const ER_SSL_INIT = QStatus.ER_SSL_INIT;
pub const ER_SSL_CONNECT = QStatus.ER_SSL_CONNECT;
pub const ER_SSL_VERIFY = QStatus.ER_SSL_VERIFY;
pub const ER_EXTERNAL_THREAD = QStatus.ER_EXTERNAL_THREAD;
pub const ER_CRYPTO_ERROR = QStatus.ER_CRYPTO_ERROR;
pub const ER_CRYPTO_TRUNCATED = QStatus.ER_CRYPTO_TRUNCATED;
pub const ER_CRYPTO_KEY_UNAVAILABLE = QStatus.ER_CRYPTO_KEY_UNAVAILABLE;
pub const ER_BAD_HOSTNAME = QStatus.ER_BAD_HOSTNAME;
pub const ER_CRYPTO_KEY_UNUSABLE = QStatus.ER_CRYPTO_KEY_UNUSABLE;
pub const ER_EMPTY_KEY_BLOB = QStatus.ER_EMPTY_KEY_BLOB;
pub const ER_CORRUPT_KEYBLOB = QStatus.ER_CORRUPT_KEYBLOB;
pub const ER_INVALID_KEY_ENCODING = QStatus.ER_INVALID_KEY_ENCODING;
pub const ER_DEAD_THREAD = QStatus.ER_DEAD_THREAD;
pub const ER_THREAD_RUNNING = QStatus.ER_THREAD_RUNNING;
pub const ER_THREAD_STOPPING = QStatus.ER_THREAD_STOPPING;
pub const ER_BAD_STRING_ENCODING = QStatus.ER_BAD_STRING_ENCODING;
pub const ER_CRYPTO_INSUFFICIENT_SECURITY = QStatus.ER_CRYPTO_INSUFFICIENT_SECURITY;
pub const ER_CRYPTO_ILLEGAL_PARAMETERS = QStatus.ER_CRYPTO_ILLEGAL_PARAMETERS;
pub const ER_CRYPTO_HASH_UNINITIALIZED = QStatus.ER_CRYPTO_HASH_UNINITIALIZED;
pub const ER_THREAD_NO_WAIT = QStatus.ER_THREAD_NO_WAIT;
pub const ER_TIMER_EXITING = QStatus.ER_TIMER_EXITING;
pub const ER_INVALID_GUID = QStatus.ER_INVALID_GUID;
pub const ER_THREADPOOL_EXHAUSTED = QStatus.ER_THREADPOOL_EXHAUSTED;
pub const ER_THREADPOOL_STOPPING = QStatus.ER_THREADPOOL_STOPPING;
pub const ER_INVALID_STREAM = QStatus.ER_INVALID_STREAM;
pub const ER_TIMER_FULL = QStatus.ER_TIMER_FULL;
pub const ER_IODISPATCH_STOPPING = QStatus.ER_IODISPATCH_STOPPING;
pub const ER_SLAP_INVALID_PACKET_LEN = QStatus.ER_SLAP_INVALID_PACKET_LEN;
pub const ER_SLAP_HDR_CHECKSUM_ERROR = QStatus.ER_SLAP_HDR_CHECKSUM_ERROR;
pub const ER_SLAP_INVALID_PACKET_TYPE = QStatus.ER_SLAP_INVALID_PACKET_TYPE;
pub const ER_SLAP_LEN_MISMATCH = QStatus.ER_SLAP_LEN_MISMATCH;
pub const ER_SLAP_PACKET_TYPE_MISMATCH = QStatus.ER_SLAP_PACKET_TYPE_MISMATCH;
pub const ER_SLAP_CRC_ERROR = QStatus.ER_SLAP_CRC_ERROR;
pub const ER_SLAP_ERROR = QStatus.ER_SLAP_ERROR;
pub const ER_SLAP_OTHER_END_CLOSED = QStatus.ER_SLAP_OTHER_END_CLOSED;
pub const ER_TIMER_NOT_ALLOWED = QStatus.ER_TIMER_NOT_ALLOWED;
pub const ER_NOT_CONN = QStatus.ER_NOT_CONN;
pub const ER_XML_CONVERTER_ERROR = QStatus.ER_XML_CONVERTER_ERROR;
pub const ER_XML_INVALID_RULES_COUNT = QStatus.ER_XML_INVALID_RULES_COUNT;
pub const ER_XML_INTERFACE_MEMBERS_MISSING = QStatus.ER_XML_INTERFACE_MEMBERS_MISSING;
pub const ER_XML_INVALID_MEMBER_TYPE = QStatus.ER_XML_INVALID_MEMBER_TYPE;
pub const ER_XML_INVALID_MEMBER_ACTION = QStatus.ER_XML_INVALID_MEMBER_ACTION;
pub const ER_XML_MEMBER_DENY_ACTION_WITH_OTHER = QStatus.ER_XML_MEMBER_DENY_ACTION_WITH_OTHER;
pub const ER_XML_INVALID_ANNOTATIONS_COUNT = QStatus.ER_XML_INVALID_ANNOTATIONS_COUNT;
pub const ER_XML_INVALID_ELEMENT_NAME = QStatus.ER_XML_INVALID_ELEMENT_NAME;
pub const ER_XML_INVALID_ATTRIBUTE_VALUE = QStatus.ER_XML_INVALID_ATTRIBUTE_VALUE;
pub const ER_XML_INVALID_SECURITY_LEVEL_ANNOTATION_VALUE = QStatus.ER_XML_INVALID_SECURITY_LEVEL_ANNOTATION_VALUE;
pub const ER_XML_INVALID_ELEMENT_CHILDREN_COUNT = QStatus.ER_XML_INVALID_ELEMENT_CHILDREN_COUNT;
pub const ER_XML_INVALID_POLICY_VERSION = QStatus.ER_XML_INVALID_POLICY_VERSION;
pub const ER_XML_INVALID_POLICY_SERIAL_NUMBER = QStatus.ER_XML_INVALID_POLICY_SERIAL_NUMBER;
pub const ER_XML_INVALID_ACL_PEER_TYPE = QStatus.ER_XML_INVALID_ACL_PEER_TYPE;
pub const ER_XML_INVALID_ACL_PEER_CHILDREN_COUNT = QStatus.ER_XML_INVALID_ACL_PEER_CHILDREN_COUNT;
pub const ER_XML_ACL_ALL_TYPE_PEER_WITH_OTHERS = QStatus.ER_XML_ACL_ALL_TYPE_PEER_WITH_OTHERS;
pub const ER_XML_INVALID_ACL_PEER_PUBLIC_KEY = QStatus.ER_XML_INVALID_ACL_PEER_PUBLIC_KEY;
pub const ER_XML_ACL_PEER_NOT_UNIQUE = QStatus.ER_XML_ACL_PEER_NOT_UNIQUE;
pub const ER_XML_ACL_PEER_PUBLIC_KEY_SET = QStatus.ER_XML_ACL_PEER_PUBLIC_KEY_SET;
pub const ER_XML_ACLS_MISSING = QStatus.ER_XML_ACLS_MISSING;
pub const ER_XML_ACL_PEERS_MISSING = QStatus.ER_XML_ACL_PEERS_MISSING;
pub const ER_XML_INVALID_OBJECT_PATH = QStatus.ER_XML_INVALID_OBJECT_PATH;
pub const ER_XML_INVALID_INTERFACE_NAME = QStatus.ER_XML_INVALID_INTERFACE_NAME;
pub const ER_XML_INVALID_MEMBER_NAME = QStatus.ER_XML_INVALID_MEMBER_NAME;
pub const ER_XML_INVALID_MANIFEST_VERSION = QStatus.ER_XML_INVALID_MANIFEST_VERSION;
pub const ER_XML_INVALID_OID = QStatus.ER_XML_INVALID_OID;
pub const ER_XML_INVALID_BASE64 = QStatus.ER_XML_INVALID_BASE64;
pub const ER_XML_INTERFACE_NAME_NOT_UNIQUE = QStatus.ER_XML_INTERFACE_NAME_NOT_UNIQUE;
pub const ER_XML_MEMBER_NAME_NOT_UNIQUE = QStatus.ER_XML_MEMBER_NAME_NOT_UNIQUE;
pub const ER_XML_OBJECT_PATH_NOT_UNIQUE = QStatus.ER_XML_OBJECT_PATH_NOT_UNIQUE;
pub const ER_XML_ANNOTATION_NOT_UNIQUE = QStatus.ER_XML_ANNOTATION_NOT_UNIQUE;
pub const ER_NONE = QStatus.ER_NONE;
pub const ER_BUS_ERRORS = QStatus.ER_BUS_ERRORS;
pub const ER_BUS_READ_ERROR = QStatus.ER_BUS_READ_ERROR;
pub const ER_BUS_WRITE_ERROR = QStatus.ER_BUS_WRITE_ERROR;
pub const ER_BUS_BAD_VALUE_TYPE = QStatus.ER_BUS_BAD_VALUE_TYPE;
pub const ER_BUS_BAD_HEADER_FIELD = QStatus.ER_BUS_BAD_HEADER_FIELD;
pub const ER_BUS_BAD_SIGNATURE = QStatus.ER_BUS_BAD_SIGNATURE;
pub const ER_BUS_BAD_OBJ_PATH = QStatus.ER_BUS_BAD_OBJ_PATH;
pub const ER_BUS_BAD_MEMBER_NAME = QStatus.ER_BUS_BAD_MEMBER_NAME;
pub const ER_BUS_BAD_INTERFACE_NAME = QStatus.ER_BUS_BAD_INTERFACE_NAME;
pub const ER_BUS_BAD_ERROR_NAME = QStatus.ER_BUS_BAD_ERROR_NAME;
pub const ER_BUS_BAD_BUS_NAME = QStatus.ER_BUS_BAD_BUS_NAME;
pub const ER_BUS_NAME_TOO_LONG = QStatus.ER_BUS_NAME_TOO_LONG;
pub const ER_BUS_BAD_LENGTH = QStatus.ER_BUS_BAD_LENGTH;
pub const ER_BUS_BAD_VALUE = QStatus.ER_BUS_BAD_VALUE;
pub const ER_BUS_BAD_HDR_FLAGS = QStatus.ER_BUS_BAD_HDR_FLAGS;
pub const ER_BUS_BAD_BODY_LEN = QStatus.ER_BUS_BAD_BODY_LEN;
pub const ER_BUS_BAD_HEADER_LEN = QStatus.ER_BUS_BAD_HEADER_LEN;
pub const ER_BUS_UNKNOWN_SERIAL = QStatus.ER_BUS_UNKNOWN_SERIAL;
pub const ER_BUS_UNKNOWN_PATH = QStatus.ER_BUS_UNKNOWN_PATH;
pub const ER_BUS_UNKNOWN_INTERFACE = QStatus.ER_BUS_UNKNOWN_INTERFACE;
pub const ER_BUS_ESTABLISH_FAILED = QStatus.ER_BUS_ESTABLISH_FAILED;
pub const ER_BUS_UNEXPECTED_SIGNATURE = QStatus.ER_BUS_UNEXPECTED_SIGNATURE;
pub const ER_BUS_INTERFACE_MISSING = QStatus.ER_BUS_INTERFACE_MISSING;
pub const ER_BUS_PATH_MISSING = QStatus.ER_BUS_PATH_MISSING;
pub const ER_BUS_MEMBER_MISSING = QStatus.ER_BUS_MEMBER_MISSING;
pub const ER_BUS_REPLY_SERIAL_MISSING = QStatus.ER_BUS_REPLY_SERIAL_MISSING;
pub const ER_BUS_ERROR_NAME_MISSING = QStatus.ER_BUS_ERROR_NAME_MISSING;
pub const ER_BUS_INTERFACE_NO_SUCH_MEMBER = QStatus.ER_BUS_INTERFACE_NO_SUCH_MEMBER;
pub const ER_BUS_NO_SUCH_OBJECT = QStatus.ER_BUS_NO_SUCH_OBJECT;
pub const ER_BUS_OBJECT_NO_SUCH_MEMBER = QStatus.ER_BUS_OBJECT_NO_SUCH_MEMBER;
pub const ER_BUS_OBJECT_NO_SUCH_INTERFACE = QStatus.ER_BUS_OBJECT_NO_SUCH_INTERFACE;
pub const ER_BUS_NO_SUCH_INTERFACE = QStatus.ER_BUS_NO_SUCH_INTERFACE;
pub const ER_BUS_MEMBER_NO_SUCH_SIGNATURE = QStatus.ER_BUS_MEMBER_NO_SUCH_SIGNATURE;
pub const ER_BUS_NOT_NUL_TERMINATED = QStatus.ER_BUS_NOT_NUL_TERMINATED;
pub const ER_BUS_NO_SUCH_PROPERTY = QStatus.ER_BUS_NO_SUCH_PROPERTY;
pub const ER_BUS_SET_WRONG_SIGNATURE = QStatus.ER_BUS_SET_WRONG_SIGNATURE;
pub const ER_BUS_PROPERTY_VALUE_NOT_SET = QStatus.ER_BUS_PROPERTY_VALUE_NOT_SET;
pub const ER_BUS_PROPERTY_ACCESS_DENIED = QStatus.ER_BUS_PROPERTY_ACCESS_DENIED;
pub const ER_BUS_NO_TRANSPORTS = QStatus.ER_BUS_NO_TRANSPORTS;
pub const ER_BUS_BAD_TRANSPORT_ARGS = QStatus.ER_BUS_BAD_TRANSPORT_ARGS;
pub const ER_BUS_NO_ROUTE = QStatus.ER_BUS_NO_ROUTE;
pub const ER_BUS_NO_ENDPOINT = QStatus.ER_BUS_NO_ENDPOINT;
pub const ER_BUS_BAD_SEND_PARAMETER = QStatus.ER_BUS_BAD_SEND_PARAMETER;
pub const ER_BUS_UNMATCHED_REPLY_SERIAL = QStatus.ER_BUS_UNMATCHED_REPLY_SERIAL;
pub const ER_BUS_BAD_SENDER_ID = QStatus.ER_BUS_BAD_SENDER_ID;
pub const ER_BUS_TRANSPORT_NOT_STARTED = QStatus.ER_BUS_TRANSPORT_NOT_STARTED;
pub const ER_BUS_EMPTY_MESSAGE = QStatus.ER_BUS_EMPTY_MESSAGE;
pub const ER_BUS_NOT_OWNER = QStatus.ER_BUS_NOT_OWNER;
pub const ER_BUS_SET_PROPERTY_REJECTED = QStatus.ER_BUS_SET_PROPERTY_REJECTED;
pub const ER_BUS_CONNECT_FAILED = QStatus.ER_BUS_CONNECT_FAILED;
pub const ER_BUS_REPLY_IS_ERROR_MESSAGE = QStatus.ER_BUS_REPLY_IS_ERROR_MESSAGE;
pub const ER_BUS_NOT_AUTHENTICATING = QStatus.ER_BUS_NOT_AUTHENTICATING;
pub const ER_BUS_NO_LISTENER = QStatus.ER_BUS_NO_LISTENER;
pub const ER_BUS_NOT_ALLOWED = QStatus.ER_BUS_NOT_ALLOWED;
pub const ER_BUS_WRITE_QUEUE_FULL = QStatus.ER_BUS_WRITE_QUEUE_FULL;
pub const ER_BUS_ENDPOINT_CLOSING = QStatus.ER_BUS_ENDPOINT_CLOSING;
pub const ER_BUS_INTERFACE_MISMATCH = QStatus.ER_BUS_INTERFACE_MISMATCH;
pub const ER_BUS_MEMBER_ALREADY_EXISTS = QStatus.ER_BUS_MEMBER_ALREADY_EXISTS;
pub const ER_BUS_PROPERTY_ALREADY_EXISTS = QStatus.ER_BUS_PROPERTY_ALREADY_EXISTS;
pub const ER_BUS_IFACE_ALREADY_EXISTS = QStatus.ER_BUS_IFACE_ALREADY_EXISTS;
pub const ER_BUS_ERROR_RESPONSE = QStatus.ER_BUS_ERROR_RESPONSE;
pub const ER_BUS_BAD_XML = QStatus.ER_BUS_BAD_XML;
pub const ER_BUS_BAD_CHILD_PATH = QStatus.ER_BUS_BAD_CHILD_PATH;
pub const ER_BUS_OBJ_ALREADY_EXISTS = QStatus.ER_BUS_OBJ_ALREADY_EXISTS;
pub const ER_BUS_OBJ_NOT_FOUND = QStatus.ER_BUS_OBJ_NOT_FOUND;
pub const ER_BUS_CANNOT_EXPAND_MESSAGE = QStatus.ER_BUS_CANNOT_EXPAND_MESSAGE;
pub const ER_BUS_NOT_COMPRESSED = QStatus.ER_BUS_NOT_COMPRESSED;
pub const ER_BUS_ALREADY_CONNECTED = QStatus.ER_BUS_ALREADY_CONNECTED;
pub const ER_BUS_NOT_CONNECTED = QStatus.ER_BUS_NOT_CONNECTED;
pub const ER_BUS_ALREADY_LISTENING = QStatus.ER_BUS_ALREADY_LISTENING;
pub const ER_BUS_KEY_UNAVAILABLE = QStatus.ER_BUS_KEY_UNAVAILABLE;
pub const ER_BUS_TRUNCATED = QStatus.ER_BUS_TRUNCATED;
pub const ER_BUS_KEY_STORE_NOT_LOADED = QStatus.ER_BUS_KEY_STORE_NOT_LOADED;
pub const ER_BUS_NO_AUTHENTICATION_MECHANISM = QStatus.ER_BUS_NO_AUTHENTICATION_MECHANISM;
pub const ER_BUS_BUS_ALREADY_STARTED = QStatus.ER_BUS_BUS_ALREADY_STARTED;
pub const ER_BUS_BUS_NOT_STARTED = QStatus.ER_BUS_BUS_NOT_STARTED;
pub const ER_BUS_KEYBLOB_OP_INVALID = QStatus.ER_BUS_KEYBLOB_OP_INVALID;
pub const ER_BUS_INVALID_HEADER_CHECKSUM = QStatus.ER_BUS_INVALID_HEADER_CHECKSUM;
pub const ER_BUS_MESSAGE_NOT_ENCRYPTED = QStatus.ER_BUS_MESSAGE_NOT_ENCRYPTED;
pub const ER_BUS_INVALID_HEADER_SERIAL = QStatus.ER_BUS_INVALID_HEADER_SERIAL;
pub const ER_BUS_TIME_TO_LIVE_EXPIRED = QStatus.ER_BUS_TIME_TO_LIVE_EXPIRED;
pub const ER_BUS_HDR_EXPANSION_INVALID = QStatus.ER_BUS_HDR_EXPANSION_INVALID;
pub const ER_BUS_MISSING_COMPRESSION_TOKEN = QStatus.ER_BUS_MISSING_COMPRESSION_TOKEN;
pub const ER_BUS_NO_PEER_GUID = QStatus.ER_BUS_NO_PEER_GUID;
pub const ER_BUS_MESSAGE_DECRYPTION_FAILED = QStatus.ER_BUS_MESSAGE_DECRYPTION_FAILED;
pub const ER_BUS_SECURITY_FATAL = QStatus.ER_BUS_SECURITY_FATAL;
pub const ER_BUS_KEY_EXPIRED = QStatus.ER_BUS_KEY_EXPIRED;
pub const ER_BUS_CORRUPT_KEYSTORE = QStatus.ER_BUS_CORRUPT_KEYSTORE;
pub const ER_BUS_NO_CALL_FOR_REPLY = QStatus.ER_BUS_NO_CALL_FOR_REPLY;
pub const ER_BUS_NOT_A_COMPLETE_TYPE = QStatus.ER_BUS_NOT_A_COMPLETE_TYPE;
pub const ER_BUS_POLICY_VIOLATION = QStatus.ER_BUS_POLICY_VIOLATION;
pub const ER_BUS_NO_SUCH_SERVICE = QStatus.ER_BUS_NO_SUCH_SERVICE;
pub const ER_BUS_TRANSPORT_NOT_AVAILABLE = QStatus.ER_BUS_TRANSPORT_NOT_AVAILABLE;
pub const ER_BUS_INVALID_AUTH_MECHANISM = QStatus.ER_BUS_INVALID_AUTH_MECHANISM;
pub const ER_BUS_KEYSTORE_VERSION_MISMATCH = QStatus.ER_BUS_KEYSTORE_VERSION_MISMATCH;
pub const ER_BUS_BLOCKING_CALL_NOT_ALLOWED = QStatus.ER_BUS_BLOCKING_CALL_NOT_ALLOWED;
pub const ER_BUS_SIGNATURE_MISMATCH = QStatus.ER_BUS_SIGNATURE_MISMATCH;
pub const ER_BUS_STOPPING = QStatus.ER_BUS_STOPPING;
pub const ER_BUS_METHOD_CALL_ABORTED = QStatus.ER_BUS_METHOD_CALL_ABORTED;
pub const ER_BUS_CANNOT_ADD_INTERFACE = QStatus.ER_BUS_CANNOT_ADD_INTERFACE;
pub const ER_BUS_CANNOT_ADD_HANDLER = QStatus.ER_BUS_CANNOT_ADD_HANDLER;
pub const ER_BUS_KEYSTORE_NOT_LOADED = QStatus.ER_BUS_KEYSTORE_NOT_LOADED;
pub const ER_BUS_NO_SUCH_HANDLE = QStatus.ER_BUS_NO_SUCH_HANDLE;
pub const ER_BUS_HANDLES_NOT_ENABLED = QStatus.ER_BUS_HANDLES_NOT_ENABLED;
pub const ER_BUS_HANDLES_MISMATCH = QStatus.ER_BUS_HANDLES_MISMATCH;
pub const ER_BUS_NO_SESSION = QStatus.ER_BUS_NO_SESSION;
pub const ER_BUS_ELEMENT_NOT_FOUND = QStatus.ER_BUS_ELEMENT_NOT_FOUND;
pub const ER_BUS_NOT_A_DICTIONARY = QStatus.ER_BUS_NOT_A_DICTIONARY;
pub const ER_BUS_WAIT_FAILED = QStatus.ER_BUS_WAIT_FAILED;
pub const ER_BUS_BAD_SESSION_OPTS = QStatus.ER_BUS_BAD_SESSION_OPTS;
pub const ER_BUS_CONNECTION_REJECTED = QStatus.ER_BUS_CONNECTION_REJECTED;
pub const ER_DBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER = QStatus.ER_DBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER;
pub const ER_DBUS_REQUEST_NAME_REPLY_IN_QUEUE = QStatus.ER_DBUS_REQUEST_NAME_REPLY_IN_QUEUE;
pub const ER_DBUS_REQUEST_NAME_REPLY_EXISTS = QStatus.ER_DBUS_REQUEST_NAME_REPLY_EXISTS;
pub const ER_DBUS_REQUEST_NAME_REPLY_ALREADY_OWNER = QStatus.ER_DBUS_REQUEST_NAME_REPLY_ALREADY_OWNER;
pub const ER_DBUS_RELEASE_NAME_REPLY_RELEASED = QStatus.ER_DBUS_RELEASE_NAME_REPLY_RELEASED;
pub const ER_DBUS_RELEASE_NAME_REPLY_NON_EXISTENT = QStatus.ER_DBUS_RELEASE_NAME_REPLY_NON_EXISTENT;
pub const ER_DBUS_RELEASE_NAME_REPLY_NOT_OWNER = QStatus.ER_DBUS_RELEASE_NAME_REPLY_NOT_OWNER;
pub const ER_DBUS_START_REPLY_ALREADY_RUNNING = QStatus.ER_DBUS_START_REPLY_ALREADY_RUNNING;
pub const ER_ALLJOYN_BINDSESSIONPORT_REPLY_ALREADY_EXISTS = QStatus.ER_ALLJOYN_BINDSESSIONPORT_REPLY_ALREADY_EXISTS;
pub const ER_ALLJOYN_BINDSESSIONPORT_REPLY_FAILED = QStatus.ER_ALLJOYN_BINDSESSIONPORT_REPLY_FAILED;
pub const ER_ALLJOYN_JOINSESSION_REPLY_NO_SESSION = QStatus.ER_ALLJOYN_JOINSESSION_REPLY_NO_SESSION;
pub const ER_ALLJOYN_JOINSESSION_REPLY_UNREACHABLE = QStatus.ER_ALLJOYN_JOINSESSION_REPLY_UNREACHABLE;
pub const ER_ALLJOYN_JOINSESSION_REPLY_CONNECT_FAILED = QStatus.ER_ALLJOYN_JOINSESSION_REPLY_CONNECT_FAILED;
pub const ER_ALLJOYN_JOINSESSION_REPLY_REJECTED = QStatus.ER_ALLJOYN_JOINSESSION_REPLY_REJECTED;
pub const ER_ALLJOYN_JOINSESSION_REPLY_BAD_SESSION_OPTS = QStatus.ER_ALLJOYN_JOINSESSION_REPLY_BAD_SESSION_OPTS;
pub const ER_ALLJOYN_JOINSESSION_REPLY_FAILED = QStatus.ER_ALLJOYN_JOINSESSION_REPLY_FAILED;
pub const ER_ALLJOYN_LEAVESESSION_REPLY_NO_SESSION = QStatus.ER_ALLJOYN_LEAVESESSION_REPLY_NO_SESSION;
pub const ER_ALLJOYN_LEAVESESSION_REPLY_FAILED = QStatus.ER_ALLJOYN_LEAVESESSION_REPLY_FAILED;
pub const ER_ALLJOYN_ADVERTISENAME_REPLY_TRANSPORT_NOT_AVAILABLE = QStatus.ER_ALLJOYN_ADVERTISENAME_REPLY_TRANSPORT_NOT_AVAILABLE;
pub const ER_ALLJOYN_ADVERTISENAME_REPLY_ALREADY_ADVERTISING = QStatus.ER_ALLJOYN_ADVERTISENAME_REPLY_ALREADY_ADVERTISING;
pub const ER_ALLJOYN_ADVERTISENAME_REPLY_FAILED = QStatus.ER_ALLJOYN_ADVERTISENAME_REPLY_FAILED;
pub const ER_ALLJOYN_CANCELADVERTISENAME_REPLY_FAILED = QStatus.ER_ALLJOYN_CANCELADVERTISENAME_REPLY_FAILED;
pub const ER_ALLJOYN_FINDADVERTISEDNAME_REPLY_TRANSPORT_NOT_AVAILABLE = QStatus.ER_ALLJOYN_FINDADVERTISEDNAME_REPLY_TRANSPORT_NOT_AVAILABLE;
pub const ER_ALLJOYN_FINDADVERTISEDNAME_REPLY_ALREADY_DISCOVERING = QStatus.ER_ALLJOYN_FINDADVERTISEDNAME_REPLY_ALREADY_DISCOVERING;
pub const ER_ALLJOYN_FINDADVERTISEDNAME_REPLY_FAILED = QStatus.ER_ALLJOYN_FINDADVERTISEDNAME_REPLY_FAILED;
pub const ER_ALLJOYN_CANCELFINDADVERTISEDNAME_REPLY_FAILED = QStatus.ER_ALLJOYN_CANCELFINDADVERTISEDNAME_REPLY_FAILED;
pub const ER_BUS_UNEXPECTED_DISPOSITION = QStatus.ER_BUS_UNEXPECTED_DISPOSITION;
pub const ER_BUS_INTERFACE_ACTIVATED = QStatus.ER_BUS_INTERFACE_ACTIVATED;
pub const ER_ALLJOYN_UNBINDSESSIONPORT_REPLY_BAD_PORT = QStatus.ER_ALLJOYN_UNBINDSESSIONPORT_REPLY_BAD_PORT;
pub const ER_ALLJOYN_UNBINDSESSIONPORT_REPLY_FAILED = QStatus.ER_ALLJOYN_UNBINDSESSIONPORT_REPLY_FAILED;
pub const ER_ALLJOYN_BINDSESSIONPORT_REPLY_INVALID_OPTS = QStatus.ER_ALLJOYN_BINDSESSIONPORT_REPLY_INVALID_OPTS;
pub const ER_ALLJOYN_JOINSESSION_REPLY_ALREADY_JOINED = QStatus.ER_ALLJOYN_JOINSESSION_REPLY_ALREADY_JOINED;
pub const ER_BUS_SELF_CONNECT = QStatus.ER_BUS_SELF_CONNECT;
pub const ER_BUS_SECURITY_NOT_ENABLED = QStatus.ER_BUS_SECURITY_NOT_ENABLED;
pub const ER_BUS_LISTENER_ALREADY_SET = QStatus.ER_BUS_LISTENER_ALREADY_SET;
pub const ER_BUS_PEER_AUTH_VERSION_MISMATCH = QStatus.ER_BUS_PEER_AUTH_VERSION_MISMATCH;
pub const ER_ALLJOYN_SETLINKTIMEOUT_REPLY_NOT_SUPPORTED = QStatus.ER_ALLJOYN_SETLINKTIMEOUT_REPLY_NOT_SUPPORTED;
pub const ER_ALLJOYN_SETLINKTIMEOUT_REPLY_NO_DEST_SUPPORT = QStatus.ER_ALLJOYN_SETLINKTIMEOUT_REPLY_NO_DEST_SUPPORT;
pub const ER_ALLJOYN_SETLINKTIMEOUT_REPLY_FAILED = QStatus.ER_ALLJOYN_SETLINKTIMEOUT_REPLY_FAILED;
pub const ER_ALLJOYN_ACCESS_PERMISSION_WARNING = QStatus.ER_ALLJOYN_ACCESS_PERMISSION_WARNING;
pub const ER_ALLJOYN_ACCESS_PERMISSION_ERROR = QStatus.ER_ALLJOYN_ACCESS_PERMISSION_ERROR;
pub const ER_BUS_DESTINATION_NOT_AUTHENTICATED = QStatus.ER_BUS_DESTINATION_NOT_AUTHENTICATED;
pub const ER_BUS_ENDPOINT_REDIRECTED = QStatus.ER_BUS_ENDPOINT_REDIRECTED;
pub const ER_BUS_AUTHENTICATION_PENDING = QStatus.ER_BUS_AUTHENTICATION_PENDING;
pub const ER_BUS_NOT_AUTHORIZED = QStatus.ER_BUS_NOT_AUTHORIZED;
pub const ER_PACKET_BUS_NO_SUCH_CHANNEL = QStatus.ER_PACKET_BUS_NO_SUCH_CHANNEL;
pub const ER_PACKET_BAD_FORMAT = QStatus.ER_PACKET_BAD_FORMAT;
pub const ER_PACKET_CONNECT_TIMEOUT = QStatus.ER_PACKET_CONNECT_TIMEOUT;
pub const ER_PACKET_CHANNEL_FAIL = QStatus.ER_PACKET_CHANNEL_FAIL;
pub const ER_PACKET_TOO_LARGE = QStatus.ER_PACKET_TOO_LARGE;
pub const ER_PACKET_BAD_PARAMETER = QStatus.ER_PACKET_BAD_PARAMETER;
pub const ER_PACKET_BAD_CRC = QStatus.ER_PACKET_BAD_CRC;
pub const ER_RENDEZVOUS_SERVER_DEACTIVATED_USER = QStatus.ER_RENDEZVOUS_SERVER_DEACTIVATED_USER;
pub const ER_RENDEZVOUS_SERVER_UNKNOWN_USER = QStatus.ER_RENDEZVOUS_SERVER_UNKNOWN_USER;
pub const ER_UNABLE_TO_CONNECT_TO_RENDEZVOUS_SERVER = QStatus.ER_UNABLE_TO_CONNECT_TO_RENDEZVOUS_SERVER;
pub const ER_NOT_CONNECTED_TO_RENDEZVOUS_SERVER = QStatus.ER_NOT_CONNECTED_TO_RENDEZVOUS_SERVER;
pub const ER_UNABLE_TO_SEND_MESSAGE_TO_RENDEZVOUS_SERVER = QStatus.ER_UNABLE_TO_SEND_MESSAGE_TO_RENDEZVOUS_SERVER;
pub const ER_INVALID_RENDEZVOUS_SERVER_INTERFACE_MESSAGE = QStatus.ER_INVALID_RENDEZVOUS_SERVER_INTERFACE_MESSAGE;
pub const ER_INVALID_PERSISTENT_CONNECTION_MESSAGE_RESPONSE = QStatus.ER_INVALID_PERSISTENT_CONNECTION_MESSAGE_RESPONSE;
pub const ER_INVALID_ON_DEMAND_CONNECTION_MESSAGE_RESPONSE = QStatus.ER_INVALID_ON_DEMAND_CONNECTION_MESSAGE_RESPONSE;
pub const ER_INVALID_HTTP_METHOD_USED_FOR_RENDEZVOUS_SERVER_INTERFACE_MESSAGE = QStatus.ER_INVALID_HTTP_METHOD_USED_FOR_RENDEZVOUS_SERVER_INTERFACE_MESSAGE;
pub const ER_RENDEZVOUS_SERVER_ERR500_INTERNAL_ERROR = QStatus.ER_RENDEZVOUS_SERVER_ERR500_INTERNAL_ERROR;
pub const ER_RENDEZVOUS_SERVER_ERR503_STATUS_UNAVAILABLE = QStatus.ER_RENDEZVOUS_SERVER_ERR503_STATUS_UNAVAILABLE;
pub const ER_RENDEZVOUS_SERVER_ERR401_UNAUTHORIZED_REQUEST = QStatus.ER_RENDEZVOUS_SERVER_ERR401_UNAUTHORIZED_REQUEST;
pub const ER_RENDEZVOUS_SERVER_UNRECOVERABLE_ERROR = QStatus.ER_RENDEZVOUS_SERVER_UNRECOVERABLE_ERROR;
pub const ER_RENDEZVOUS_SERVER_ROOT_CERTIFICATE_UNINITIALIZED = QStatus.ER_RENDEZVOUS_SERVER_ROOT_CERTIFICATE_UNINITIALIZED;
pub const ER_BUS_NO_SUCH_ANNOTATION = QStatus.ER_BUS_NO_SUCH_ANNOTATION;
pub const ER_BUS_ANNOTATION_ALREADY_EXISTS = QStatus.ER_BUS_ANNOTATION_ALREADY_EXISTS;
pub const ER_SOCK_CLOSING = QStatus.ER_SOCK_CLOSING;
pub const ER_NO_SUCH_DEVICE = QStatus.ER_NO_SUCH_DEVICE;
pub const ER_P2P = QStatus.ER_P2P;
pub const ER_P2P_TIMEOUT = QStatus.ER_P2P_TIMEOUT;
pub const ER_P2P_NOT_CONNECTED = QStatus.ER_P2P_NOT_CONNECTED;
pub const ER_BAD_TRANSPORT_MASK = QStatus.ER_BAD_TRANSPORT_MASK;
pub const ER_PROXIMITY_CONNECTION_ESTABLISH_FAIL = QStatus.ER_PROXIMITY_CONNECTION_ESTABLISH_FAIL;
pub const ER_PROXIMITY_NO_PEERS_FOUND = QStatus.ER_PROXIMITY_NO_PEERS_FOUND;
pub const ER_BUS_OBJECT_NOT_REGISTERED = QStatus.ER_BUS_OBJECT_NOT_REGISTERED;
pub const ER_P2P_DISABLED = QStatus.ER_P2P_DISABLED;
pub const ER_P2P_BUSY = QStatus.ER_P2P_BUSY;
pub const ER_BUS_INCOMPATIBLE_DAEMON = QStatus.ER_BUS_INCOMPATIBLE_DAEMON;
pub const ER_P2P_NO_GO = QStatus.ER_P2P_NO_GO;
pub const ER_P2P_NO_STA = QStatus.ER_P2P_NO_STA;
pub const ER_P2P_FORBIDDEN = QStatus.ER_P2P_FORBIDDEN;
pub const ER_ALLJOYN_ONAPPSUSPEND_REPLY_FAILED = QStatus.ER_ALLJOYN_ONAPPSUSPEND_REPLY_FAILED;
pub const ER_ALLJOYN_ONAPPSUSPEND_REPLY_UNSUPPORTED = QStatus.ER_ALLJOYN_ONAPPSUSPEND_REPLY_UNSUPPORTED;
pub const ER_ALLJOYN_ONAPPRESUME_REPLY_FAILED = QStatus.ER_ALLJOYN_ONAPPRESUME_REPLY_FAILED;
pub const ER_ALLJOYN_ONAPPRESUME_REPLY_UNSUPPORTED = QStatus.ER_ALLJOYN_ONAPPRESUME_REPLY_UNSUPPORTED;
pub const ER_BUS_NO_SUCH_MESSAGE = QStatus.ER_BUS_NO_SUCH_MESSAGE;
pub const ER_ALLJOYN_REMOVESESSIONMEMBER_REPLY_NO_SESSION = QStatus.ER_ALLJOYN_REMOVESESSIONMEMBER_REPLY_NO_SESSION;
pub const ER_ALLJOYN_REMOVESESSIONMEMBER_NOT_BINDER = QStatus.ER_ALLJOYN_REMOVESESSIONMEMBER_NOT_BINDER;
pub const ER_ALLJOYN_REMOVESESSIONMEMBER_NOT_MULTIPOINT = QStatus.ER_ALLJOYN_REMOVESESSIONMEMBER_NOT_MULTIPOINT;
pub const ER_ALLJOYN_REMOVESESSIONMEMBER_NOT_FOUND = QStatus.ER_ALLJOYN_REMOVESESSIONMEMBER_NOT_FOUND;
pub const ER_ALLJOYN_REMOVESESSIONMEMBER_INCOMPATIBLE_REMOTE_DAEMON = QStatus.ER_ALLJOYN_REMOVESESSIONMEMBER_INCOMPATIBLE_REMOTE_DAEMON;
pub const ER_ALLJOYN_REMOVESESSIONMEMBER_REPLY_FAILED = QStatus.ER_ALLJOYN_REMOVESESSIONMEMBER_REPLY_FAILED;
pub const ER_BUS_REMOVED_BY_BINDER = QStatus.ER_BUS_REMOVED_BY_BINDER;
pub const ER_BUS_MATCH_RULE_NOT_FOUND = QStatus.ER_BUS_MATCH_RULE_NOT_FOUND;
pub const ER_ALLJOYN_PING_FAILED = QStatus.ER_ALLJOYN_PING_FAILED;
pub const ER_ALLJOYN_PING_REPLY_UNREACHABLE = QStatus.ER_ALLJOYN_PING_REPLY_UNREACHABLE;
pub const ER_UDP_MSG_TOO_LONG = QStatus.ER_UDP_MSG_TOO_LONG;
pub const ER_UDP_DEMUX_NO_ENDPOINT = QStatus.ER_UDP_DEMUX_NO_ENDPOINT;
pub const ER_UDP_NO_NETWORK = QStatus.ER_UDP_NO_NETWORK;
pub const ER_UDP_UNEXPECTED_LENGTH = QStatus.ER_UDP_UNEXPECTED_LENGTH;
pub const ER_UDP_UNEXPECTED_FLOW = QStatus.ER_UDP_UNEXPECTED_FLOW;
pub const ER_UDP_DISCONNECT = QStatus.ER_UDP_DISCONNECT;
pub const ER_UDP_NOT_IMPLEMENTED = QStatus.ER_UDP_NOT_IMPLEMENTED;
pub const ER_UDP_NO_LISTENER = QStatus.ER_UDP_NO_LISTENER;
pub const ER_UDP_STOPPING = QStatus.ER_UDP_STOPPING;
pub const ER_ARDP_BACKPRESSURE = QStatus.ER_ARDP_BACKPRESSURE;
pub const ER_UDP_BACKPRESSURE = QStatus.ER_UDP_BACKPRESSURE;
pub const ER_ARDP_INVALID_STATE = QStatus.ER_ARDP_INVALID_STATE;
pub const ER_ARDP_TTL_EXPIRED = QStatus.ER_ARDP_TTL_EXPIRED;
pub const ER_ARDP_PERSIST_TIMEOUT = QStatus.ER_ARDP_PERSIST_TIMEOUT;
pub const ER_ARDP_PROBE_TIMEOUT = QStatus.ER_ARDP_PROBE_TIMEOUT;
pub const ER_ARDP_REMOTE_CONNECTION_RESET = QStatus.ER_ARDP_REMOTE_CONNECTION_RESET;
pub const ER_UDP_BUSHELLO = QStatus.ER_UDP_BUSHELLO;
pub const ER_UDP_MESSAGE = QStatus.ER_UDP_MESSAGE;
pub const ER_UDP_INVALID = QStatus.ER_UDP_INVALID;
pub const ER_UDP_UNSUPPORTED = QStatus.ER_UDP_UNSUPPORTED;
pub const ER_UDP_ENDPOINT_STALLED = QStatus.ER_UDP_ENDPOINT_STALLED;
pub const ER_ARDP_INVALID_RESPONSE = QStatus.ER_ARDP_INVALID_RESPONSE;
pub const ER_ARDP_INVALID_CONNECTION = QStatus.ER_ARDP_INVALID_CONNECTION;
pub const ER_UDP_LOCAL_DISCONNECT = QStatus.ER_UDP_LOCAL_DISCONNECT;
pub const ER_UDP_EARLY_EXIT = QStatus.ER_UDP_EARLY_EXIT;
pub const ER_UDP_LOCAL_DISCONNECT_FAIL = QStatus.ER_UDP_LOCAL_DISCONNECT_FAIL;
pub const ER_ARDP_DISCONNECTING = QStatus.ER_ARDP_DISCONNECTING;
pub const ER_ALLJOYN_PING_REPLY_INCOMPATIBLE_REMOTE_ROUTING_NODE = QStatus.ER_ALLJOYN_PING_REPLY_INCOMPATIBLE_REMOTE_ROUTING_NODE;
pub const ER_ALLJOYN_PING_REPLY_TIMEOUT = QStatus.ER_ALLJOYN_PING_REPLY_TIMEOUT;
pub const ER_ALLJOYN_PING_REPLY_UNKNOWN_NAME = QStatus.ER_ALLJOYN_PING_REPLY_UNKNOWN_NAME;
pub const ER_ALLJOYN_PING_REPLY_FAILED = QStatus.ER_ALLJOYN_PING_REPLY_FAILED;
pub const ER_TCP_MAX_UNTRUSTED = QStatus.ER_TCP_MAX_UNTRUSTED;
pub const ER_ALLJOYN_PING_REPLY_IN_PROGRESS = QStatus.ER_ALLJOYN_PING_REPLY_IN_PROGRESS;
pub const ER_LANGUAGE_NOT_SUPPORTED = QStatus.ER_LANGUAGE_NOT_SUPPORTED;
pub const ER_ABOUT_FIELD_ALREADY_SPECIFIED = QStatus.ER_ABOUT_FIELD_ALREADY_SPECIFIED;
pub const ER_UDP_NOT_DISCONNECTED = QStatus.ER_UDP_NOT_DISCONNECTED;
pub const ER_UDP_ENDPOINT_NOT_STARTED = QStatus.ER_UDP_ENDPOINT_NOT_STARTED;
pub const ER_UDP_ENDPOINT_REMOVED = QStatus.ER_UDP_ENDPOINT_REMOVED;
pub const ER_ARDP_VERSION_NOT_SUPPORTED = QStatus.ER_ARDP_VERSION_NOT_SUPPORTED;
pub const ER_CONNECTION_LIMIT_EXCEEDED = QStatus.ER_CONNECTION_LIMIT_EXCEEDED;
pub const ER_ARDP_WRITE_BLOCKED = QStatus.ER_ARDP_WRITE_BLOCKED;
pub const ER_PERMISSION_DENIED = QStatus.ER_PERMISSION_DENIED;
pub const ER_ABOUT_DEFAULT_LANGUAGE_NOT_SPECIFIED = QStatus.ER_ABOUT_DEFAULT_LANGUAGE_NOT_SPECIFIED;
pub const ER_ABOUT_SESSIONPORT_NOT_BOUND = QStatus.ER_ABOUT_SESSIONPORT_NOT_BOUND;
pub const ER_ABOUT_ABOUTDATA_MISSING_REQUIRED_FIELD = QStatus.ER_ABOUT_ABOUTDATA_MISSING_REQUIRED_FIELD;
pub const ER_ABOUT_INVALID_ABOUTDATA_LISTENER = QStatus.ER_ABOUT_INVALID_ABOUTDATA_LISTENER;
pub const ER_BUS_PING_GROUP_NOT_FOUND = QStatus.ER_BUS_PING_GROUP_NOT_FOUND;
pub const ER_BUS_REMOVED_BY_BINDER_SELF = QStatus.ER_BUS_REMOVED_BY_BINDER_SELF;
pub const ER_INVALID_CONFIG = QStatus.ER_INVALID_CONFIG;
pub const ER_ABOUT_INVALID_ABOUTDATA_FIELD_VALUE = QStatus.ER_ABOUT_INVALID_ABOUTDATA_FIELD_VALUE;
pub const ER_ABOUT_INVALID_ABOUTDATA_FIELD_APPID_SIZE = QStatus.ER_ABOUT_INVALID_ABOUTDATA_FIELD_APPID_SIZE;
pub const ER_BUS_TRANSPORT_ACCESS_DENIED = QStatus.ER_BUS_TRANSPORT_ACCESS_DENIED;
pub const ER_INVALID_CERTIFICATE = QStatus.ER_INVALID_CERTIFICATE;
pub const ER_CERTIFICATE_NOT_FOUND = QStatus.ER_CERTIFICATE_NOT_FOUND;
pub const ER_DUPLICATE_CERTIFICATE = QStatus.ER_DUPLICATE_CERTIFICATE;
pub const ER_UNKNOWN_CERTIFICATE = QStatus.ER_UNKNOWN_CERTIFICATE;
pub const ER_MISSING_DIGEST_IN_CERTIFICATE = QStatus.ER_MISSING_DIGEST_IN_CERTIFICATE;
pub const ER_DIGEST_MISMATCH = QStatus.ER_DIGEST_MISMATCH;
pub const ER_DUPLICATE_KEY = QStatus.ER_DUPLICATE_KEY;
pub const ER_NO_COMMON_TRUST = QStatus.ER_NO_COMMON_TRUST;
pub const ER_MANIFEST_NOT_FOUND = QStatus.ER_MANIFEST_NOT_FOUND;
pub const ER_INVALID_CERT_CHAIN = QStatus.ER_INVALID_CERT_CHAIN;
pub const ER_NO_TRUST_ANCHOR = QStatus.ER_NO_TRUST_ANCHOR;
pub const ER_INVALID_APPLICATION_STATE = QStatus.ER_INVALID_APPLICATION_STATE;
pub const ER_FEATURE_NOT_AVAILABLE = QStatus.ER_FEATURE_NOT_AVAILABLE;
pub const ER_KEY_STORE_ALREADY_INITIALIZED = QStatus.ER_KEY_STORE_ALREADY_INITIALIZED;
pub const ER_KEY_STORE_ID_NOT_YET_SET = QStatus.ER_KEY_STORE_ID_NOT_YET_SET;
pub const ER_POLICY_NOT_NEWER = QStatus.ER_POLICY_NOT_NEWER;
pub const ER_MANIFEST_REJECTED = QStatus.ER_MANIFEST_REJECTED;
pub const ER_INVALID_CERTIFICATE_USAGE = QStatus.ER_INVALID_CERTIFICATE_USAGE;
pub const ER_INVALID_SIGNAL_EMISSION_TYPE = QStatus.ER_INVALID_SIGNAL_EMISSION_TYPE;
pub const ER_APPLICATION_STATE_LISTENER_ALREADY_EXISTS = QStatus.ER_APPLICATION_STATE_LISTENER_ALREADY_EXISTS;
pub const ER_APPLICATION_STATE_LISTENER_NO_SUCH_LISTENER = QStatus.ER_APPLICATION_STATE_LISTENER_NO_SUCH_LISTENER;
pub const ER_MANAGEMENT_ALREADY_STARTED = QStatus.ER_MANAGEMENT_ALREADY_STARTED;
pub const ER_MANAGEMENT_NOT_STARTED = QStatus.ER_MANAGEMENT_NOT_STARTED;
pub const ER_BUS_DESCRIPTION_ALREADY_EXISTS = QStatus.ER_BUS_DESCRIPTION_ALREADY_EXISTS;

pub const _alljoyn_msgarg_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const alljoyn_typeid = extern enum(i32) {
    ALLJOYN_INVALID = 0,
    ALLJOYN_ARRAY = 97,
    ALLJOYN_BOOLEAN = 98,
    ALLJOYN_DOUBLE = 100,
    ALLJOYN_DICT_ENTRY = 101,
    ALLJOYN_SIGNATURE = 103,
    ALLJOYN_HANDLE = 104,
    ALLJOYN_INT32 = 105,
    ALLJOYN_INT16 = 110,
    ALLJOYN_OBJECT_PATH = 111,
    ALLJOYN_UINT16 = 113,
    ALLJOYN_STRUCT = 114,
    ALLJOYN_STRING = 115,
    ALLJOYN_UINT64 = 116,
    ALLJOYN_UINT32 = 117,
    ALLJOYN_VARIANT = 118,
    ALLJOYN_INT64 = 120,
    ALLJOYN_BYTE = 121,
    ALLJOYN_STRUCT_OPEN = 40,
    ALLJOYN_STRUCT_CLOSE = 41,
    ALLJOYN_DICT_ENTRY_OPEN = 123,
    ALLJOYN_DICT_ENTRY_CLOSE = 125,
    ALLJOYN_BOOLEAN_ARRAY = 25185,
    ALLJOYN_DOUBLE_ARRAY = 25697,
    ALLJOYN_INT32_ARRAY = 26977,
    ALLJOYN_INT16_ARRAY = 28257,
    ALLJOYN_UINT16_ARRAY = 29025,
    ALLJOYN_UINT64_ARRAY = 29793,
    ALLJOYN_UINT32_ARRAY = 30049,
    ALLJOYN_INT64_ARRAY = 30817,
    ALLJOYN_BYTE_ARRAY = 31073,
    ALLJOYN_WILDCARD = 42,
};
pub const ALLJOYN_INVALID = alljoyn_typeid.ALLJOYN_INVALID;
pub const ALLJOYN_ARRAY = alljoyn_typeid.ALLJOYN_ARRAY;
pub const ALLJOYN_BOOLEAN = alljoyn_typeid.ALLJOYN_BOOLEAN;
pub const ALLJOYN_DOUBLE = alljoyn_typeid.ALLJOYN_DOUBLE;
pub const ALLJOYN_DICT_ENTRY = alljoyn_typeid.ALLJOYN_DICT_ENTRY;
pub const ALLJOYN_SIGNATURE = alljoyn_typeid.ALLJOYN_SIGNATURE;
pub const ALLJOYN_HANDLE = alljoyn_typeid.ALLJOYN_HANDLE;
pub const ALLJOYN_INT32 = alljoyn_typeid.ALLJOYN_INT32;
pub const ALLJOYN_INT16 = alljoyn_typeid.ALLJOYN_INT16;
pub const ALLJOYN_OBJECT_PATH = alljoyn_typeid.ALLJOYN_OBJECT_PATH;
pub const ALLJOYN_UINT16 = alljoyn_typeid.ALLJOYN_UINT16;
pub const ALLJOYN_STRUCT = alljoyn_typeid.ALLJOYN_STRUCT;
pub const ALLJOYN_STRING = alljoyn_typeid.ALLJOYN_STRING;
pub const ALLJOYN_UINT64 = alljoyn_typeid.ALLJOYN_UINT64;
pub const ALLJOYN_UINT32 = alljoyn_typeid.ALLJOYN_UINT32;
pub const ALLJOYN_VARIANT = alljoyn_typeid.ALLJOYN_VARIANT;
pub const ALLJOYN_INT64 = alljoyn_typeid.ALLJOYN_INT64;
pub const ALLJOYN_BYTE = alljoyn_typeid.ALLJOYN_BYTE;
pub const ALLJOYN_STRUCT_OPEN = alljoyn_typeid.ALLJOYN_STRUCT_OPEN;
pub const ALLJOYN_STRUCT_CLOSE = alljoyn_typeid.ALLJOYN_STRUCT_CLOSE;
pub const ALLJOYN_DICT_ENTRY_OPEN = alljoyn_typeid.ALLJOYN_DICT_ENTRY_OPEN;
pub const ALLJOYN_DICT_ENTRY_CLOSE = alljoyn_typeid.ALLJOYN_DICT_ENTRY_CLOSE;
pub const ALLJOYN_BOOLEAN_ARRAY = alljoyn_typeid.ALLJOYN_BOOLEAN_ARRAY;
pub const ALLJOYN_DOUBLE_ARRAY = alljoyn_typeid.ALLJOYN_DOUBLE_ARRAY;
pub const ALLJOYN_INT32_ARRAY = alljoyn_typeid.ALLJOYN_INT32_ARRAY;
pub const ALLJOYN_INT16_ARRAY = alljoyn_typeid.ALLJOYN_INT16_ARRAY;
pub const ALLJOYN_UINT16_ARRAY = alljoyn_typeid.ALLJOYN_UINT16_ARRAY;
pub const ALLJOYN_UINT64_ARRAY = alljoyn_typeid.ALLJOYN_UINT64_ARRAY;
pub const ALLJOYN_UINT32_ARRAY = alljoyn_typeid.ALLJOYN_UINT32_ARRAY;
pub const ALLJOYN_INT64_ARRAY = alljoyn_typeid.ALLJOYN_INT64_ARRAY;
pub const ALLJOYN_BYTE_ARRAY = alljoyn_typeid.ALLJOYN_BYTE_ARRAY;
pub const ALLJOYN_WILDCARD = alljoyn_typeid.ALLJOYN_WILDCARD;

pub const _alljoyn_aboutdata_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _alljoyn_aboutdatalistener_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const alljoyn_aboutdatalistener_getaboutdata_ptr = fn(
    context: *const c_void,
    msgArg: *_alljoyn_msgarg_handle,
    language: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub const alljoyn_aboutdatalistener_getannouncedaboutdata_ptr = fn(
    context: *const c_void,
    msgArg: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub const alljoyn_aboutdatalistener_callbacks = extern struct {
    about_datalistener_getaboutdata: alljoyn_aboutdatalistener_getaboutdata_ptr,
    about_datalistener_getannouncedaboutdata: alljoyn_aboutdatalistener_getannouncedaboutdata_ptr,
};

pub const _alljoyn_permissionconfigurator_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const alljoyn_applicationstate = extern enum(i32) {
    NOT_CLAIMABLE = 0,
    CLAIMABLE = 1,
    CLAIMED = 2,
    NEED_UPDATE = 3,
};
pub const NOT_CLAIMABLE = alljoyn_applicationstate.NOT_CLAIMABLE;
pub const CLAIMABLE = alljoyn_applicationstate.CLAIMABLE;
pub const CLAIMED = alljoyn_applicationstate.CLAIMED;
pub const NEED_UPDATE = alljoyn_applicationstate.NEED_UPDATE;

pub const alljoyn_claimcapability_masks = extern enum(i32) {
    CAPABLE_ECDHE_NULL = 1,
    CAPABLE_ECDHE_ECDSA = 4,
    CAPABLE_ECDHE_SPEKE = 8,
};
pub const CAPABLE_ECDHE_NULL = alljoyn_claimcapability_masks.CAPABLE_ECDHE_NULL;
pub const CAPABLE_ECDHE_ECDSA = alljoyn_claimcapability_masks.CAPABLE_ECDHE_ECDSA;
pub const CAPABLE_ECDHE_SPEKE = alljoyn_claimcapability_masks.CAPABLE_ECDHE_SPEKE;

pub const alljoyn_claimcapabilityadditionalinfo_masks = extern enum(i32) {
    PASSWORD_GENERATED_BY_SECURITY_MANAGER = 1,
    PASSWORD_GENERATED_BY_APPLICATION = 2,
};
pub const PASSWORD_GENERATED_BY_SECURITY_MANAGER = alljoyn_claimcapabilityadditionalinfo_masks.PASSWORD_GENERATED_BY_SECURITY_MANAGER;
pub const PASSWORD_GENERATED_BY_APPLICATION = alljoyn_claimcapabilityadditionalinfo_masks.PASSWORD_GENERATED_BY_APPLICATION;

pub const alljoyn_certificateid = extern struct {
    serial: *u8,
    serialLen: ?*c_void,
    issuerPublicKey: *i8,
    issuerAki: *u8,
    issuerAkiLen: ?*c_void,
};

pub const alljoyn_certificateidarray = extern struct {
    count: ?*c_void,
    ids: *alljoyn_certificateid,
};

pub const alljoyn_manifestarray = extern struct {
    count: ?*c_void,
    xmls: **i8,
};

pub const _alljoyn_applicationstatelistener_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const alljoyn_applicationstatelistener_state_ptr = fn(
    busName: *i8,
    publicKey: *i8,
    applicationState: alljoyn_applicationstate,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_applicationstatelistener_callbacks = extern struct {
    state: alljoyn_applicationstatelistener_state_ptr,
};

pub const _alljoyn_keystore_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _alljoyn_keystorelistener_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const alljoyn_keystorelistener_loadrequest_ptr = fn(
    context: *const c_void,
    listener: *_alljoyn_keystorelistener_handle,
    keyStore: *_alljoyn_keystore_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub const alljoyn_keystorelistener_storerequest_ptr = fn(
    context: *const c_void,
    listener: *_alljoyn_keystorelistener_handle,
    keyStore: *_alljoyn_keystore_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub const alljoyn_keystorelistener_acquireexclusivelock_ptr = fn(
    context: *const c_void,
    listener: *_alljoyn_keystorelistener_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub const alljoyn_keystorelistener_releaseexclusivelock_ptr = fn(
    context: *const c_void,
    listener: *_alljoyn_keystorelistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_keystorelistener_callbacks = extern struct {
    load_request: alljoyn_keystorelistener_loadrequest_ptr,
    store_request: alljoyn_keystorelistener_storerequest_ptr,
};

pub const alljoyn_keystorelistener_with_synchronization_callbacks = extern struct {
    load_request: alljoyn_keystorelistener_loadrequest_ptr,
    store_request: alljoyn_keystorelistener_storerequest_ptr,
    acquire_exclusive_lock: alljoyn_keystorelistener_acquireexclusivelock_ptr,
    release_exclusive_lock: alljoyn_keystorelistener_releaseexclusivelock_ptr,
};

pub const _alljoyn_sessionopts_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _alljoyn_message_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _alljoyn_busattachment_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const alljoyn_messagetype = extern enum(i32) {
    ALLJOYN_MESSAGE_INVALID = 0,
    ALLJOYN_MESSAGE_METHOD_CALL = 1,
    ALLJOYN_MESSAGE_METHOD_RET = 2,
    ALLJOYN_MESSAGE_ERROR = 3,
    ALLJOYN_MESSAGE_SIGNAL = 4,
};
pub const ALLJOYN_MESSAGE_INVALID = alljoyn_messagetype.ALLJOYN_MESSAGE_INVALID;
pub const ALLJOYN_MESSAGE_METHOD_CALL = alljoyn_messagetype.ALLJOYN_MESSAGE_METHOD_CALL;
pub const ALLJOYN_MESSAGE_METHOD_RET = alljoyn_messagetype.ALLJOYN_MESSAGE_METHOD_RET;
pub const ALLJOYN_MESSAGE_ERROR = alljoyn_messagetype.ALLJOYN_MESSAGE_ERROR;
pub const ALLJOYN_MESSAGE_SIGNAL = alljoyn_messagetype.ALLJOYN_MESSAGE_SIGNAL;

pub const _alljoyn_authlistener_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _alljoyn_credentials_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const alljoyn_authlistener_requestcredentials_ptr = fn(
    context: *const c_void,
    authMechanism: *const i8,
    peerName: *const i8,
    authCount: u16,
    userName: *const i8,
    credMask: u16,
    credentials: *_alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const alljoyn_authlistener_requestcredentialsasync_ptr = fn(
    context: *const c_void,
    listener: *_alljoyn_authlistener_handle,
    authMechanism: *const i8,
    peerName: *const i8,
    authCount: u16,
    userName: *const i8,
    credMask: u16,
    authContext: *c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub const alljoyn_authlistener_verifycredentials_ptr = fn(
    context: *const c_void,
    authMechanism: *const i8,
    peerName: *const i8,
    credentials: *const _alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const alljoyn_authlistener_verifycredentialsasync_ptr = fn(
    context: *const c_void,
    listener: *_alljoyn_authlistener_handle,
    authMechanism: *const i8,
    peerName: *const i8,
    credentials: *const _alljoyn_credentials_handle,
    authContext: *c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub const alljoyn_authlistener_securityviolation_ptr = fn(
    context: *const c_void,
    status: QStatus,
    msg: *const _alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_authlistener_authenticationcomplete_ptr = fn(
    context: *const c_void,
    authMechanism: *const i8,
    peerName: *const i8,
    success: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_authlistener_callbacks = extern struct {
    request_credentials: alljoyn_authlistener_requestcredentials_ptr,
    verify_credentials: alljoyn_authlistener_verifycredentials_ptr,
    security_violation: alljoyn_authlistener_securityviolation_ptr,
    authentication_complete: alljoyn_authlistener_authenticationcomplete_ptr,
};

pub const alljoyn_authlistenerasync_callbacks = extern struct {
    request_credentials: alljoyn_authlistener_requestcredentialsasync_ptr,
    verify_credentials: alljoyn_authlistener_verifycredentialsasync_ptr,
    security_violation: alljoyn_authlistener_securityviolation_ptr,
    authentication_complete: alljoyn_authlistener_authenticationcomplete_ptr,
};

pub const _alljoyn_buslistener_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const alljoyn_buslistener_listener_registered_ptr = fn(
    context: *const c_void,
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_buslistener_listener_unregistered_ptr = fn(
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_buslistener_found_advertised_name_ptr = fn(
    context: *const c_void,
    name: *const i8,
    transport: u16,
    namePrefix: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_buslistener_lost_advertised_name_ptr = fn(
    context: *const c_void,
    name: *const i8,
    transport: u16,
    namePrefix: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_buslistener_name_owner_changed_ptr = fn(
    context: *const c_void,
    busName: *const i8,
    previousOwner: *const i8,
    newOwner: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_buslistener_bus_stopping_ptr = fn(
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_buslistener_bus_disconnected_ptr = fn(
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_buslistener_bus_prop_changed_ptr = fn(
    context: *const c_void,
    prop_name: *const i8,
    prop_value: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_buslistener_callbacks = extern struct {
    listener_registered: alljoyn_buslistener_listener_registered_ptr,
    listener_unregistered: alljoyn_buslistener_listener_unregistered_ptr,
    found_advertised_name: alljoyn_buslistener_found_advertised_name_ptr,
    lost_advertised_name: alljoyn_buslistener_lost_advertised_name_ptr,
    name_owner_changed: alljoyn_buslistener_name_owner_changed_ptr,
    bus_stopping: alljoyn_buslistener_bus_stopping_ptr,
    bus_disconnected: alljoyn_buslistener_bus_disconnected_ptr,
    property_changed: alljoyn_buslistener_bus_prop_changed_ptr,
};

pub const _alljoyn_interfacedescription_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const alljoyn_interfacedescription_securitypolicy = extern enum(i32) {
    AJ_IFC_SECURITY_INHERIT = 0,
    AJ_IFC_SECURITY_REQUIRED = 1,
    AJ_IFC_SECURITY_OFF = 2,
};
pub const AJ_IFC_SECURITY_INHERIT = alljoyn_interfacedescription_securitypolicy.AJ_IFC_SECURITY_INHERIT;
pub const AJ_IFC_SECURITY_REQUIRED = alljoyn_interfacedescription_securitypolicy.AJ_IFC_SECURITY_REQUIRED;
pub const AJ_IFC_SECURITY_OFF = alljoyn_interfacedescription_securitypolicy.AJ_IFC_SECURITY_OFF;

pub const alljoyn_interfacedescription_member = extern struct {
    iface: *_alljoyn_interfacedescription_handle,
    memberType: alljoyn_messagetype,
    name: *const i8,
    signature: *const i8,
    returnSignature: *const i8,
    argNames: *const i8,
    internal_member: *const c_void,
};

pub const alljoyn_interfacedescription_translation_callback_ptr = fn(
    sourceLanguage: *const i8,
    targetLanguage: *const i8,
    sourceText: *const i8,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub const alljoyn_interfacedescription_property = extern struct {
    name: *const i8,
    signature: *const i8,
    access: u8,
    internal_property: *const c_void,
};

pub const _alljoyn_busobject_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const alljoyn_messagereceiver_methodhandler_ptr = fn(
    bus: *_alljoyn_busobject_handle,
    member: *const alljoyn_interfacedescription_member,
    message: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_messagereceiver_replyhandler_ptr = fn(
    message: *_alljoyn_message_handle,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_messagereceiver_signalhandler_ptr = fn(
    member: *const alljoyn_interfacedescription_member,
    srcPath: *const i8,
    message: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_busobject_prop_get_ptr = fn(
    context: *const c_void,
    ifcName: *const i8,
    propName: *const i8,
    val: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub const alljoyn_busobject_prop_set_ptr = fn(
    context: *const c_void,
    ifcName: *const i8,
    propName: *const i8,
    val: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub const alljoyn_busobject_object_registration_ptr = fn(
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_busobject_callbacks = extern struct {
    property_get: alljoyn_busobject_prop_get_ptr,
    property_set: alljoyn_busobject_prop_set_ptr,
    object_registered: alljoyn_busobject_object_registration_ptr,
    object_unregistered: alljoyn_busobject_object_registration_ptr,
};

pub const alljoyn_busobject_methodentry = extern struct {
    member: *const alljoyn_interfacedescription_member,
    method_handler: alljoyn_messagereceiver_methodhandler_ptr,
};

pub const _alljoyn_proxybusobject_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const alljoyn_proxybusobject_listener_introspectcb_ptr = fn(
    status: QStatus,
    obj: *_alljoyn_proxybusobject_handle,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_proxybusobject_listener_getpropertycb_ptr = fn(
    status: QStatus,
    obj: *_alljoyn_proxybusobject_handle,
    value: *const _alljoyn_msgarg_handle,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_proxybusobject_listener_getallpropertiescb_ptr = fn(
    status: QStatus,
    obj: *_alljoyn_proxybusobject_handle,
    values: *const _alljoyn_msgarg_handle,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_proxybusobject_listener_setpropertycb_ptr = fn(
    status: QStatus,
    obj: *_alljoyn_proxybusobject_handle,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_proxybusobject_listener_propertieschanged_ptr = fn(
    obj: *_alljoyn_proxybusobject_handle,
    ifaceName: *const i8,
    changed: *const _alljoyn_msgarg_handle,
    invalidated: *const _alljoyn_msgarg_handle,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const _alljoyn_permissionconfigurationlistener_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const alljoyn_permissionconfigurationlistener_factoryreset_ptr = fn(
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub const alljoyn_permissionconfigurationlistener_policychanged_ptr = fn(
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_permissionconfigurationlistener_startmanagement_ptr = fn(
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_permissionconfigurationlistener_endmanagement_ptr = fn(
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_permissionconfigurationlistener_callbacks = extern struct {
    factory_reset: alljoyn_permissionconfigurationlistener_factoryreset_ptr,
    policy_changed: alljoyn_permissionconfigurationlistener_policychanged_ptr,
    start_management: alljoyn_permissionconfigurationlistener_startmanagement_ptr,
    end_management: alljoyn_permissionconfigurationlistener_endmanagement_ptr,
};

pub const alljoyn_sessionlostreason = extern enum(i32) {
    ALLJOYN_SESSIONLOST_INVALID = 0,
    ALLJOYN_SESSIONLOST_REMOTE_END_LEFT_SESSION = 1,
    ALLJOYN_SESSIONLOST_REMOTE_END_CLOSED_ABRUPTLY = 2,
    ALLJOYN_SESSIONLOST_REMOVED_BY_BINDER = 3,
    ALLJOYN_SESSIONLOST_LINK_TIMEOUT = 4,
    ALLJOYN_SESSIONLOST_REASON_OTHER = 5,
};
pub const ALLJOYN_SESSIONLOST_INVALID = alljoyn_sessionlostreason.ALLJOYN_SESSIONLOST_INVALID;
pub const ALLJOYN_SESSIONLOST_REMOTE_END_LEFT_SESSION = alljoyn_sessionlostreason.ALLJOYN_SESSIONLOST_REMOTE_END_LEFT_SESSION;
pub const ALLJOYN_SESSIONLOST_REMOTE_END_CLOSED_ABRUPTLY = alljoyn_sessionlostreason.ALLJOYN_SESSIONLOST_REMOTE_END_CLOSED_ABRUPTLY;
pub const ALLJOYN_SESSIONLOST_REMOVED_BY_BINDER = alljoyn_sessionlostreason.ALLJOYN_SESSIONLOST_REMOVED_BY_BINDER;
pub const ALLJOYN_SESSIONLOST_LINK_TIMEOUT = alljoyn_sessionlostreason.ALLJOYN_SESSIONLOST_LINK_TIMEOUT;
pub const ALLJOYN_SESSIONLOST_REASON_OTHER = alljoyn_sessionlostreason.ALLJOYN_SESSIONLOST_REASON_OTHER;

pub const _alljoyn_sessionlistener_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const alljoyn_sessionlistener_sessionlost_ptr = fn(
    context: *const c_void,
    sessionId: u32,
    reason: alljoyn_sessionlostreason,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_sessionlistener_sessionmemberadded_ptr = fn(
    context: *const c_void,
    sessionId: u32,
    uniqueName: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_sessionlistener_sessionmemberremoved_ptr = fn(
    context: *const c_void,
    sessionId: u32,
    uniqueName: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_sessionlistener_callbacks = extern struct {
    session_lost: alljoyn_sessionlistener_sessionlost_ptr,
    session_member_added: alljoyn_sessionlistener_sessionmemberadded_ptr,
    session_member_removed: alljoyn_sessionlistener_sessionmemberremoved_ptr,
};

pub const _alljoyn_sessionportlistener_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const alljoyn_sessionportlistener_acceptsessionjoiner_ptr = fn(
    context: *const c_void,
    sessionPort: u16,
    joiner: *const i8,
    opts: *const _alljoyn_sessionopts_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const alljoyn_sessionportlistener_sessionjoined_ptr = fn(
    context: *const c_void,
    sessionPort: u16,
    id: u32,
    joiner: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_sessionportlistener_callbacks = extern struct {
    accept_session_joiner: alljoyn_sessionportlistener_acceptsessionjoiner_ptr,
    session_joined: alljoyn_sessionportlistener_sessionjoined_ptr,
};

pub const _alljoyn_aboutlistener_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const alljoyn_about_announced_ptr = fn(
    context: *const c_void,
    busName: *const i8,
    version: u16,
    port: u16,
    objectDescriptionArg: *const _alljoyn_msgarg_handle,
    aboutDataArg: *const _alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_aboutlistener_callback = extern struct {
    about_listener_announced: alljoyn_about_announced_ptr,
};

pub const alljoyn_busattachment_joinsessioncb_ptr = fn(
    status: QStatus,
    sessionId: u32,
    opts: *const _alljoyn_sessionopts_handle,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_busattachment_setlinktimeoutcb_ptr = fn(
    status: QStatus,
    timeout: u32,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const _alljoyn_aboutobj_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _alljoyn_aboutobjectdescription_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _alljoyn_aboutproxy_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _alljoyn_pinglistener_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const alljoyn_autopinger_destination_lost_ptr = fn(
    context: *const c_void,
    group: *const i8,
    destination: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_autopinger_destination_found_ptr = fn(
    context: *const c_void,
    group: *const i8,
    destination: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_pinglistener_callback = extern struct {
    destination_found: alljoyn_autopinger_destination_found_ptr,
    destination_lost: alljoyn_autopinger_destination_lost_ptr,
};

pub const _alljoyn_autopinger_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _alljoyn_proxybusobject_ref_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _alljoyn_observerlistener_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const alljoyn_observer_object_discovered_ptr = fn(
    context: *const c_void,
    proxyref: *_alljoyn_proxybusobject_ref_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_observer_object_lost_ptr = fn(
    context: *const c_void,
    proxyref: *_alljoyn_proxybusobject_ref_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub const alljoyn_observerlistener_callback = extern struct {
    object_discovered: alljoyn_observer_object_discovered_ptr,
    object_lost: alljoyn_observer_object_lost_ptr,
};

pub const _alljoyn_observer_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _alljoyn_securityapplicationproxy_handle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };


//--------------------------------------------------------------------------------
// Section: Functions (532)
//--------------------------------------------------------------------------------
pub extern "MSAJApi" fn AllJoynConnectToBus(
    connectionSpec: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "MSAJApi" fn AllJoynCloseBusHandle(
    busHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSAJApi" fn AllJoynSendToBus(
    connectedBusHandle: HANDLE,
    buffer: ?[*]const u8,
    bytesToWrite: u32,
    bytesTransferred: ?*u32,
    reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSAJApi" fn AllJoynReceiveFromBus(
    connectedBusHandle: HANDLE,
    buffer: ?[*]u8,
    bytesToRead: u32,
    bytesTransferred: ?*u32,
    reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSAJApi" fn AllJoynEventSelect(
    connectedBusHandle: HANDLE,
    eventHandle: HANDLE,
    eventTypes: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSAJApi" fn AllJoynEnumEvents(
    connectedBusHandle: HANDLE,
    eventToReset: HANDLE,
    eventTypes: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "MSAJApi" fn AllJoynCreateBus(
    outBufferSize: u32,
    inBufferSize: u32,
    lpSecurityAttributes: ?*SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "MSAJApi" fn AllJoynAcceptBusConnection(
    serverBusHandle: HANDLE,
    abortEvent: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSAJApi" fn alljoyn_unity_deferred_callbacks_process(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_unity_set_deferred_callback_mainthread_only(
    mainthread_only: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn QCC_StatusText(
    status: QStatus,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_msgarg_create(
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_msgarg_handle;

pub extern "MSAJApi" fn alljoyn_msgarg_create_and_set(
    signature: *const i8,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_msgarg_handle;

pub extern "MSAJApi" fn alljoyn_msgarg_destroy(
    arg: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_msgarg_array_create(
    size: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_msgarg_handle;

pub extern "MSAJApi" fn alljoyn_msgarg_array_element(
    arg: *_alljoyn_msgarg_handle,
    index: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_msgarg_handle;

pub extern "MSAJApi" fn alljoyn_msgarg_set(
    arg: *_alljoyn_msgarg_handle,
    signature: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get(
    arg: *_alljoyn_msgarg_handle,
    signature: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_copy(
    source: *const _alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_msgarg_handle;

pub extern "MSAJApi" fn alljoyn_msgarg_clone(
    destination: *_alljoyn_msgarg_handle,
    source: *const _alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_msgarg_equal(
    lhv: *_alljoyn_msgarg_handle,
    rhv: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_msgarg_array_set(
    args: *_alljoyn_msgarg_handle,
    numArgs: *?*c_void,
    signature: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_array_get(
    args: *const _alljoyn_msgarg_handle,
    numArgs: ?*c_void,
    signature: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_tostring(
    arg: *_alljoyn_msgarg_handle,
    str: *i8,
    buf: ?*c_void,
    indent: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_msgarg_array_tostring(
    args: *const _alljoyn_msgarg_handle,
    numArgs: ?*c_void,
    str: *i8,
    buf: ?*c_void,
    indent: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_msgarg_signature(
    arg: *_alljoyn_msgarg_handle,
    str: *i8,
    buf: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_msgarg_array_signature(
    values: *_alljoyn_msgarg_handle,
    numValues: ?*c_void,
    str: *i8,
    buf: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_msgarg_hassignature(
    arg: *_alljoyn_msgarg_handle,
    signature: *const i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_msgarg_getdictelement(
    arg: *_alljoyn_msgarg_handle,
    elemSig: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_gettype(
    arg: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) alljoyn_typeid;

pub extern "MSAJApi" fn alljoyn_msgarg_clear(
    arg: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_msgarg_stabilize(
    arg: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_msgarg_array_set_offset(
    args: *_alljoyn_msgarg_handle,
    argOffset: ?*c_void,
    numArgs: *?*c_void,
    signature: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_and_stabilize(
    arg: *_alljoyn_msgarg_handle,
    signature: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_uint8(
    arg: *_alljoyn_msgarg_handle,
    y: u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_bool(
    arg: *_alljoyn_msgarg_handle,
    b: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_int16(
    arg: *_alljoyn_msgarg_handle,
    n: i16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_uint16(
    arg: *_alljoyn_msgarg_handle,
    q: u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_int32(
    arg: *_alljoyn_msgarg_handle,
    i: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_uint32(
    arg: *_alljoyn_msgarg_handle,
    u: u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_int64(
    arg: *_alljoyn_msgarg_handle,
    x: i64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_uint64(
    arg: *_alljoyn_msgarg_handle,
    t: u64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_double(
    arg: *_alljoyn_msgarg_handle,
    d: f64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_string(
    arg: *_alljoyn_msgarg_handle,
    s: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_objectpath(
    arg: *_alljoyn_msgarg_handle,
    o: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_signature(
    arg: *_alljoyn_msgarg_handle,
    g: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_uint8(
    arg: *const _alljoyn_msgarg_handle,
    y: *u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_bool(
    arg: *const _alljoyn_msgarg_handle,
    b: *i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_int16(
    arg: *const _alljoyn_msgarg_handle,
    n: *i16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_uint16(
    arg: *const _alljoyn_msgarg_handle,
    q: *u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_int32(
    arg: *const _alljoyn_msgarg_handle,
    i: *i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_uint32(
    arg: *const _alljoyn_msgarg_handle,
    u: *u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_int64(
    arg: *const _alljoyn_msgarg_handle,
    x: *i64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_uint64(
    arg: *const _alljoyn_msgarg_handle,
    t: *u64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_double(
    arg: *const _alljoyn_msgarg_handle,
    d: *f64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_string(
    arg: *const _alljoyn_msgarg_handle,
    s: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_objectpath(
    arg: *const _alljoyn_msgarg_handle,
    o: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_signature(
    arg: *const _alljoyn_msgarg_handle,
    g: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_variant(
    arg: *const _alljoyn_msgarg_handle,
    v: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_uint8_array(
    arg: *_alljoyn_msgarg_handle,
    length: ?*c_void,
    ay: *u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_bool_array(
    arg: *_alljoyn_msgarg_handle,
    length: ?*c_void,
    ab: *i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_int16_array(
    arg: *_alljoyn_msgarg_handle,
    length: ?*c_void,
    an: *i16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_uint16_array(
    arg: *_alljoyn_msgarg_handle,
    length: ?*c_void,
    aq: *u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_int32_array(
    arg: *_alljoyn_msgarg_handle,
    length: ?*c_void,
    ai: *i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_uint32_array(
    arg: *_alljoyn_msgarg_handle,
    length: ?*c_void,
    au: *u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_int64_array(
    arg: *_alljoyn_msgarg_handle,
    length: ?*c_void,
    ax: *i64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_uint64_array(
    arg: *_alljoyn_msgarg_handle,
    length: ?*c_void,
    at: *u64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_double_array(
    arg: *_alljoyn_msgarg_handle,
    length: ?*c_void,
    ad: *f64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_string_array(
    arg: *_alljoyn_msgarg_handle,
    length: ?*c_void,
    as: *const *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_objectpath_array(
    arg: *_alljoyn_msgarg_handle,
    length: ?*c_void,
    ao: *const *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_set_signature_array(
    arg: *_alljoyn_msgarg_handle,
    length: ?*c_void,
    ag: *const *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_uint8_array(
    arg: *const _alljoyn_msgarg_handle,
    length: *?*c_void,
    ay: *u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_bool_array(
    arg: *const _alljoyn_msgarg_handle,
    length: *?*c_void,
    ab: *i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_int16_array(
    arg: *const _alljoyn_msgarg_handle,
    length: *?*c_void,
    an: *i16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_uint16_array(
    arg: *const _alljoyn_msgarg_handle,
    length: *?*c_void,
    aq: *u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_int32_array(
    arg: *const _alljoyn_msgarg_handle,
    length: *?*c_void,
    ai: *i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_uint32_array(
    arg: *const _alljoyn_msgarg_handle,
    length: *?*c_void,
    au: *u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_int64_array(
    arg: *const _alljoyn_msgarg_handle,
    length: *?*c_void,
    ax: *i64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_uint64_array(
    arg: *const _alljoyn_msgarg_handle,
    length: *?*c_void,
    at: *u64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_double_array(
    arg: *const _alljoyn_msgarg_handle,
    length: *?*c_void,
    ad: *f64,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_variant_array(
    arg: *const _alljoyn_msgarg_handle,
    signature: *const i8,
    length: *?*c_void,
    av: **_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_get_array_numberofelements(
    arg: *const _alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_msgarg_get_array_element(
    arg: *const _alljoyn_msgarg_handle,
    index: ?*c_void,
    element: **_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_msgarg_get_array_elementsignature(
    arg: *const _alljoyn_msgarg_handle,
    index: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_msgarg_getkey(
    arg: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_msgarg_handle;

pub extern "MSAJApi" fn alljoyn_msgarg_getvalue(
    arg: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_msgarg_handle;

pub extern "MSAJApi" fn alljoyn_msgarg_setdictentry(
    arg: *_alljoyn_msgarg_handle,
    key: *_alljoyn_msgarg_handle,
    value: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_setstruct(
    arg: *_alljoyn_msgarg_handle,
    struct_members: *_alljoyn_msgarg_handle,
    num_members: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_msgarg_getnummembers(
    arg: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_msgarg_getmember(
    arg: *_alljoyn_msgarg_handle,
    index: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_msgarg_handle;

pub extern "MSAJApi" fn alljoyn_aboutdata_create_empty(
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_aboutdata_handle;

pub extern "MSAJApi" fn alljoyn_aboutdata_create(
    defaultLanguage: *const i8,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_aboutdata_handle;

pub extern "MSAJApi" fn alljoyn_aboutdata_create_full(
    arg: *const _alljoyn_msgarg_handle,
    language: *const i8,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_aboutdata_handle;

pub extern "MSAJApi" fn alljoyn_aboutdata_destroy(
    data: *_alljoyn_aboutdata_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_aboutdata_createfromxml(
    data: *_alljoyn_aboutdata_handle,
    aboutDataXml: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_isvalid(
    data: *_alljoyn_aboutdata_handle,
    language: *const i8,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "MSAJApi" fn alljoyn_aboutdata_createfrommsgarg(
    data: *_alljoyn_aboutdata_handle,
    arg: *const _alljoyn_msgarg_handle,
    language: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_setappid(
    data: *_alljoyn_aboutdata_handle,
    appId: *const u8,
    num: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_setappid_fromstring(
    data: *_alljoyn_aboutdata_handle,
    appId: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_getappid(
    data: *_alljoyn_aboutdata_handle,
    appId: **u8,
    num: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_setdefaultlanguage(
    data: *_alljoyn_aboutdata_handle,
    defaultLanguage: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_getdefaultlanguage(
    data: *_alljoyn_aboutdata_handle,
    defaultLanguage: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_setdevicename(
    data: *_alljoyn_aboutdata_handle,
    deviceName: *const i8,
    language: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_getdevicename(
    data: *_alljoyn_aboutdata_handle,
    deviceName: **i8,
    language: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_setdeviceid(
    data: *_alljoyn_aboutdata_handle,
    deviceId: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_getdeviceid(
    data: *_alljoyn_aboutdata_handle,
    deviceId: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_setappname(
    data: *_alljoyn_aboutdata_handle,
    appName: *const i8,
    language: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_getappname(
    data: *_alljoyn_aboutdata_handle,
    appName: **i8,
    language: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_setmanufacturer(
    data: *_alljoyn_aboutdata_handle,
    manufacturer: *const i8,
    language: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_getmanufacturer(
    data: *_alljoyn_aboutdata_handle,
    manufacturer: **i8,
    language: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_setmodelnumber(
    data: *_alljoyn_aboutdata_handle,
    modelNumber: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_getmodelnumber(
    data: *_alljoyn_aboutdata_handle,
    modelNumber: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_setsupportedlanguage(
    data: *_alljoyn_aboutdata_handle,
    language: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_getsupportedlanguages(
    data: *_alljoyn_aboutdata_handle,
    languageTags: *const *const i8,
    num: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_aboutdata_setdescription(
    data: *_alljoyn_aboutdata_handle,
    description: *const i8,
    language: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_getdescription(
    data: *_alljoyn_aboutdata_handle,
    description: **i8,
    language: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_setdateofmanufacture(
    data: *_alljoyn_aboutdata_handle,
    dateOfManufacture: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_getdateofmanufacture(
    data: *_alljoyn_aboutdata_handle,
    dateOfManufacture: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_setsoftwareversion(
    data: *_alljoyn_aboutdata_handle,
    softwareVersion: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_getsoftwareversion(
    data: *_alljoyn_aboutdata_handle,
    softwareVersion: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_getajsoftwareversion(
    data: *_alljoyn_aboutdata_handle,
    ajSoftwareVersion: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_sethardwareversion(
    data: *_alljoyn_aboutdata_handle,
    hardwareVersion: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_gethardwareversion(
    data: *_alljoyn_aboutdata_handle,
    hardwareVersion: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_setsupporturl(
    data: *_alljoyn_aboutdata_handle,
    supportUrl: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_getsupporturl(
    data: *_alljoyn_aboutdata_handle,
    supportUrl: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_setfield(
    data: *_alljoyn_aboutdata_handle,
    name: *const i8,
    value: *_alljoyn_msgarg_handle,
    language: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_getfield(
    data: *_alljoyn_aboutdata_handle,
    name: *const i8,
    value: **_alljoyn_msgarg_handle,
    language: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_getfields(
    data: *_alljoyn_aboutdata_handle,
    fields: *const *const i8,
    num_fields: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_aboutdata_getaboutdata(
    data: *_alljoyn_aboutdata_handle,
    msgArg: *_alljoyn_msgarg_handle,
    language: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_getannouncedaboutdata(
    data: *_alljoyn_aboutdata_handle,
    msgArg: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutdata_isfieldrequired(
    data: *_alljoyn_aboutdata_handle,
    fieldName: *const i8,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "MSAJApi" fn alljoyn_aboutdata_isfieldannounced(
    data: *_alljoyn_aboutdata_handle,
    fieldName: *const i8,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "MSAJApi" fn alljoyn_aboutdata_isfieldlocalized(
    data: *_alljoyn_aboutdata_handle,
    fieldName: *const i8,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "MSAJApi" fn alljoyn_aboutdata_getfieldsignature(
    data: *_alljoyn_aboutdata_handle,
    fieldName: *const i8,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_aboutdatalistener_create(
    callbacks: *const alljoyn_aboutdatalistener_callbacks,
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_aboutdatalistener_handle;

pub extern "MSAJApi" fn alljoyn_aboutdatalistener_destroy(
    listener: *_alljoyn_aboutdatalistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getdefaultclaimcapabilities(
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getapplicationstate(
    configurator: *const _alljoyn_permissionconfigurator_handle,
    state: *alljoyn_applicationstate,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_setapplicationstate(
    configurator: *_alljoyn_permissionconfigurator_handle,
    state: alljoyn_applicationstate,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getpublickey(
    configurator: *_alljoyn_permissionconfigurator_handle,
    publicKey: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_publickey_destroy(
    publicKey: *i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getmanifesttemplate(
    configurator: *_alljoyn_permissionconfigurator_handle,
    manifestTemplateXml: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_manifesttemplate_destroy(
    manifestTemplateXml: *i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_setmanifesttemplatefromxml(
    configurator: *_alljoyn_permissionconfigurator_handle,
    manifestTemplateXml: *i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getclaimcapabilities(
    configurator: *const _alljoyn_permissionconfigurator_handle,
    claimCapabilities: *u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_setclaimcapabilities(
    configurator: *_alljoyn_permissionconfigurator_handle,
    claimCapabilities: u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getclaimcapabilitiesadditionalinfo(
    configurator: *const _alljoyn_permissionconfigurator_handle,
    additionalInfo: *u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_setclaimcapabilitiesadditionalinfo(
    configurator: *_alljoyn_permissionconfigurator_handle,
    additionalInfo: u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_reset(
    configurator: *_alljoyn_permissionconfigurator_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_claim(
    configurator: *_alljoyn_permissionconfigurator_handle,
    caKey: *i8,
    identityCertificateChain: *i8,
    groupId: *const u8,
    groupSize: ?*c_void,
    groupAuthority: *i8,
    manifestsXmls: **i8,
    manifestsCount: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_updateidentity(
    configurator: *_alljoyn_permissionconfigurator_handle,
    identityCertificateChain: *i8,
    manifestsXmls: **i8,
    manifestsCount: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getidentity(
    configurator: *_alljoyn_permissionconfigurator_handle,
    identityCertificateChain: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_certificatechain_destroy(
    certificateChain: *i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getmanifests(
    configurator: *_alljoyn_permissionconfigurator_handle,
    manifestArray: *alljoyn_manifestarray,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_manifestarray_cleanup(
    manifestArray: *alljoyn_manifestarray,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_installmanifests(
    configurator: *_alljoyn_permissionconfigurator_handle,
    manifestsXmls: **i8,
    manifestsCount: ?*c_void,
    append: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getidentitycertificateid(
    configurator: *_alljoyn_permissionconfigurator_handle,
    certificateId: *alljoyn_certificateid,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_certificateid_cleanup(
    certificateId: *alljoyn_certificateid,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_updatepolicy(
    configurator: *_alljoyn_permissionconfigurator_handle,
    policyXml: *i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getpolicy(
    configurator: *_alljoyn_permissionconfigurator_handle,
    policyXml: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getdefaultpolicy(
    configurator: *_alljoyn_permissionconfigurator_handle,
    policyXml: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_policy_destroy(
    policyXml: *i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_resetpolicy(
    configurator: *_alljoyn_permissionconfigurator_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_getmembershipsummaries(
    configurator: *_alljoyn_permissionconfigurator_handle,
    certificateIds: *alljoyn_certificateidarray,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_certificateidarray_cleanup(
    certificateIdArray: *alljoyn_certificateidarray,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_installmembership(
    configurator: *_alljoyn_permissionconfigurator_handle,
    membershipCertificateChain: *i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_removemembership(
    configurator: *_alljoyn_permissionconfigurator_handle,
    serial: *const u8,
    serialLen: ?*c_void,
    issuerPublicKey: *i8,
    issuerAki: *const u8,
    issuerAkiLen: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_startmanagement(
    configurator: *_alljoyn_permissionconfigurator_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_permissionconfigurator_endmanagement(
    configurator: *_alljoyn_permissionconfigurator_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_applicationstatelistener_create(
    callbacks: *const alljoyn_applicationstatelistener_callbacks,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_applicationstatelistener_handle;

pub extern "MSAJApi" fn alljoyn_applicationstatelistener_destroy(
    listener: *_alljoyn_applicationstatelistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_keystorelistener_create(
    callbacks: *const alljoyn_keystorelistener_callbacks,
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_keystorelistener_handle;

pub extern "MSAJApi" fn alljoyn_keystorelistener_with_synchronization_create(
    callbacks: *const alljoyn_keystorelistener_with_synchronization_callbacks,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_keystorelistener_handle;

pub extern "MSAJApi" fn alljoyn_keystorelistener_destroy(
    listener: *_alljoyn_keystorelistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_keystorelistener_putkeys(
    listener: *_alljoyn_keystorelistener_handle,
    keyStore: *_alljoyn_keystore_handle,
    source: *const i8,
    password: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_keystorelistener_getkeys(
    listener: *_alljoyn_keystorelistener_handle,
    keyStore: *_alljoyn_keystore_handle,
    sink: *i8,
    sink_sz: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_sessionopts_create(
    traffic: u8,
    isMultipoint: i32,
    proximity: u8,
    transports: u16,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_sessionopts_handle;

pub extern "MSAJApi" fn alljoyn_sessionopts_destroy(
    opts: *_alljoyn_sessionopts_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_sessionopts_get_traffic(
    opts: *const _alljoyn_sessionopts_handle,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "MSAJApi" fn alljoyn_sessionopts_set_traffic(
    opts: *_alljoyn_sessionopts_handle,
    traffic: u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_sessionopts_get_multipoint(
    opts: *const _alljoyn_sessionopts_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_sessionopts_set_multipoint(
    opts: *_alljoyn_sessionopts_handle,
    isMultipoint: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_sessionopts_get_proximity(
    opts: *const _alljoyn_sessionopts_handle,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "MSAJApi" fn alljoyn_sessionopts_set_proximity(
    opts: *_alljoyn_sessionopts_handle,
    proximity: u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_sessionopts_get_transports(
    opts: *const _alljoyn_sessionopts_handle,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "MSAJApi" fn alljoyn_sessionopts_set_transports(
    opts: *_alljoyn_sessionopts_handle,
    transports: u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_sessionopts_iscompatible(
    one: *const _alljoyn_sessionopts_handle,
    other: *const _alljoyn_sessionopts_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_sessionopts_cmp(
    one: *const _alljoyn_sessionopts_handle,
    other: *const _alljoyn_sessionopts_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_message_create(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_message_handle;

pub extern "MSAJApi" fn alljoyn_message_destroy(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_message_isbroadcastsignal(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_message_isglobalbroadcast(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_message_issessionless(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_message_getflags(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "MSAJApi" fn alljoyn_message_isexpired(
    msg: *_alljoyn_message_handle,
    tillExpireMS: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_message_isunreliable(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_message_isencrypted(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_message_getauthmechanism(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_message_gettype(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) alljoyn_messagetype;

pub extern "MSAJApi" fn alljoyn_message_getargs(
    msg: *_alljoyn_message_handle,
    numArgs: *?*c_void,
    args: **_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_message_getarg(
    msg: *_alljoyn_message_handle,
    argN: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_msgarg_handle;

pub extern "MSAJApi" fn alljoyn_message_parseargs(
    msg: *_alljoyn_message_handle,
    signature: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_message_getcallserial(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSAJApi" fn alljoyn_message_getsignature(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_message_getobjectpath(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_message_getinterface(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_message_getmembername(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_message_getreplyserial(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSAJApi" fn alljoyn_message_getsender(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_message_getreceiveendpointname(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_message_getdestination(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_message_getcompressiontoken(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSAJApi" fn alljoyn_message_getsessionid(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSAJApi" fn alljoyn_message_geterrorname(
    msg: *_alljoyn_message_handle,
    errorMessage: *i8,
    errorMessage_size: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_message_tostring(
    msg: *_alljoyn_message_handle,
    str: *i8,
    buf: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_message_description(
    msg: *_alljoyn_message_handle,
    str: *i8,
    buf: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_message_gettimestamp(
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSAJApi" fn alljoyn_message_eql(
    one: *const _alljoyn_message_handle,
    other: *const _alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_message_setendianess(
    endian: i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_authlistener_requestcredentialsresponse(
    listener: *_alljoyn_authlistener_handle,
    authContext: *c_void,
    accept: i32,
    credentials: *_alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_authlistener_verifycredentialsresponse(
    listener: *_alljoyn_authlistener_handle,
    authContext: *c_void,
    accept: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_authlistener_create(
    callbacks: *const alljoyn_authlistener_callbacks,
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_authlistener_handle;

pub extern "MSAJApi" fn alljoyn_authlistenerasync_create(
    callbacks: *const alljoyn_authlistenerasync_callbacks,
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_authlistener_handle;

pub extern "MSAJApi" fn alljoyn_authlistener_destroy(
    listener: *_alljoyn_authlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_authlistenerasync_destroy(
    listener: *_alljoyn_authlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_authlistener_setsharedsecret(
    listener: *_alljoyn_authlistener_handle,
    sharedSecret: *const u8,
    sharedSecretSize: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_credentials_create(
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_credentials_handle;

pub extern "MSAJApi" fn alljoyn_credentials_destroy(
    cred: *_alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_credentials_isset(
    cred: *const _alljoyn_credentials_handle,
    creds: u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_credentials_setpassword(
    cred: *_alljoyn_credentials_handle,
    pwd: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_credentials_setusername(
    cred: *_alljoyn_credentials_handle,
    userName: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_credentials_setcertchain(
    cred: *_alljoyn_credentials_handle,
    certChain: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_credentials_setprivatekey(
    cred: *_alljoyn_credentials_handle,
    pk: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_credentials_setlogonentry(
    cred: *_alljoyn_credentials_handle,
    logonEntry: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_credentials_setexpiration(
    cred: *_alljoyn_credentials_handle,
    expiration: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_credentials_getpassword(
    cred: *const _alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_credentials_getusername(
    cred: *const _alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_credentials_getcertchain(
    cred: *const _alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_credentials_getprivateKey(
    cred: *const _alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_credentials_getlogonentry(
    cred: *const _alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_credentials_getexpiration(
    cred: *const _alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSAJApi" fn alljoyn_credentials_clear(
    cred: *_alljoyn_credentials_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_buslistener_create(
    callbacks: *const alljoyn_buslistener_callbacks,
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_buslistener_handle;

pub extern "MSAJApi" fn alljoyn_buslistener_destroy(
    listener: *_alljoyn_buslistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_member_getannotationscount(
    member: alljoyn_interfacedescription_member,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_member_getannotationatindex(
    member: alljoyn_interfacedescription_member,
    index: ?*c_void,
    name: *i8,
    name_size: *?*c_void,
    value: *i8,
    value_size: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_member_getannotation(
    member: alljoyn_interfacedescription_member,
    name: *const i8,
    value: *i8,
    value_size: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_interfacedescription_member_getargannotationscount(
    member: alljoyn_interfacedescription_member,
    argName: *const i8,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_member_getargannotationatindex(
    member: alljoyn_interfacedescription_member,
    argName: *const i8,
    index: ?*c_void,
    name: *i8,
    name_size: *?*c_void,
    value: *i8,
    value_size: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_member_getargannotation(
    member: alljoyn_interfacedescription_member,
    argName: *const i8,
    name: *const i8,
    value: *i8,
    value_size: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_interfacedescription_property_getannotationscount(
    property: alljoyn_interfacedescription_property,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_property_getannotationatindex(
    property: alljoyn_interfacedescription_property,
    index: ?*c_void,
    name: *i8,
    name_size: *?*c_void,
    value: *i8,
    value_size: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_property_getannotation(
    property: alljoyn_interfacedescription_property,
    name: *const i8,
    value: *i8,
    value_size: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_interfacedescription_activate(
    iface: *_alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_addannotation(
    iface: *_alljoyn_interfacedescription_handle,
    name: *const i8,
    value: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getannotation(
    iface: *_alljoyn_interfacedescription_handle,
    name: *const i8,
    value: *i8,
    value_size: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getannotationscount(
    iface: *_alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getannotationatindex(
    iface: *_alljoyn_interfacedescription_handle,
    index: ?*c_void,
    name: *i8,
    name_size: *?*c_void,
    value: *i8,
    value_size: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getmember(
    iface: *const _alljoyn_interfacedescription_handle,
    name: *const i8,
    member: *alljoyn_interfacedescription_member,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_interfacedescription_addmember(
    iface: *_alljoyn_interfacedescription_handle,
    type: alljoyn_messagetype,
    name: *const i8,
    inputSig: *const i8,
    outSig: *const i8,
    argNames: *const i8,
    annotation: u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_interfacedescription_addmemberannotation(
    iface: *_alljoyn_interfacedescription_handle,
    member: *const i8,
    name: *const i8,
    value: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getmemberannotation(
    iface: *_alljoyn_interfacedescription_handle,
    member: *const i8,
    name: *const i8,
    value: *i8,
    value_size: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getmembers(
    iface: *const _alljoyn_interfacedescription_handle,
    members: *alljoyn_interfacedescription_member,
    numMembers: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_hasmember(
    iface: *_alljoyn_interfacedescription_handle,
    name: *const i8,
    inSig: *const i8,
    outSig: *const i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_interfacedescription_addmethod(
    iface: *_alljoyn_interfacedescription_handle,
    name: *const i8,
    inputSig: *const i8,
    outSig: *const i8,
    argNames: *const i8,
    annotation: u8,
    accessPerms: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getmethod(
    iface: *_alljoyn_interfacedescription_handle,
    name: *const i8,
    member: *alljoyn_interfacedescription_member,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_interfacedescription_addsignal(
    iface: *_alljoyn_interfacedescription_handle,
    name: *const i8,
    sig: *const i8,
    argNames: *const i8,
    annotation: u8,
    accessPerms: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getsignal(
    iface: *_alljoyn_interfacedescription_handle,
    name: *const i8,
    member: *alljoyn_interfacedescription_member,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getproperty(
    iface: *const _alljoyn_interfacedescription_handle,
    name: *const i8,
    property: *alljoyn_interfacedescription_property,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getproperties(
    iface: *const _alljoyn_interfacedescription_handle,
    props: *alljoyn_interfacedescription_property,
    numProps: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_addproperty(
    iface: *_alljoyn_interfacedescription_handle,
    name: *const i8,
    signature: *const i8,
    access: u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_interfacedescription_addpropertyannotation(
    iface: *_alljoyn_interfacedescription_handle,
    property: *const i8,
    name: *const i8,
    value: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getpropertyannotation(
    iface: *_alljoyn_interfacedescription_handle,
    property: *const i8,
    name: *const i8,
    value: *i8,
    str_size: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_interfacedescription_hasproperty(
    iface: *const _alljoyn_interfacedescription_handle,
    name: *const i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_interfacedescription_hasproperties(
    iface: *const _alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getname(
    iface: *const _alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_interfacedescription_introspect(
    iface: *const _alljoyn_interfacedescription_handle,
    str: *i8,
    buf: ?*c_void,
    indent: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_issecure(
    iface: *const _alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getsecuritypolicy(
    iface: *const _alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) alljoyn_interfacedescription_securitypolicy;

pub extern "MSAJApi" fn alljoyn_interfacedescription_setdescriptionlanguage(
    iface: *_alljoyn_interfacedescription_handle,
    language: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getdescriptionlanguages(
    iface: *const _alljoyn_interfacedescription_handle,
    languages: *const *const i8,
    size: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getdescriptionlanguages2(
    iface: *const _alljoyn_interfacedescription_handle,
    languages: *i8,
    languagesSize: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_setdescription(
    iface: *_alljoyn_interfacedescription_handle,
    description: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_setdescriptionforlanguage(
    iface: *_alljoyn_interfacedescription_handle,
    description: *const i8,
    languageTag: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getdescriptionforlanguage(
    iface: *_alljoyn_interfacedescription_handle,
    description: *i8,
    maxLanguageLength: ?*c_void,
    languageTag: *const i8,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_setmemberdescription(
    iface: *_alljoyn_interfacedescription_handle,
    member: *const i8,
    description: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_interfacedescription_setmemberdescriptionforlanguage(
    iface: *_alljoyn_interfacedescription_handle,
    member: *const i8,
    description: *const i8,
    languageTag: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getmemberdescriptionforlanguage(
    iface: *_alljoyn_interfacedescription_handle,
    member: *const i8,
    description: *i8,
    maxLanguageLength: ?*c_void,
    languageTag: *const i8,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_setargdescription(
    iface: *_alljoyn_interfacedescription_handle,
    member: *const i8,
    argName: *const i8,
    description: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_interfacedescription_setargdescriptionforlanguage(
    iface: *_alljoyn_interfacedescription_handle,
    member: *const i8,
    arg: *const i8,
    description: *const i8,
    languageTag: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getargdescriptionforlanguage(
    iface: *_alljoyn_interfacedescription_handle,
    member: *const i8,
    arg: *const i8,
    description: *i8,
    maxLanguageLength: ?*c_void,
    languageTag: *const i8,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_setpropertydescription(
    iface: *_alljoyn_interfacedescription_handle,
    name: *const i8,
    description: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_interfacedescription_setpropertydescriptionforlanguage(
    iface: *_alljoyn_interfacedescription_handle,
    name: *const i8,
    description: *const i8,
    languageTag: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getpropertydescriptionforlanguage(
    iface: *_alljoyn_interfacedescription_handle,
    property: *const i8,
    description: *i8,
    maxLanguageLength: ?*c_void,
    languageTag: *const i8,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_setdescriptiontranslationcallback(
    iface: *_alljoyn_interfacedescription_handle,
    translationCallback: alljoyn_interfacedescription_translation_callback_ptr,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getdescriptiontranslationcallback(
    iface: *const _alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) alljoyn_interfacedescription_translation_callback_ptr;

pub extern "MSAJApi" fn alljoyn_interfacedescription_hasdescription(
    iface: *const _alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_interfacedescription_addargannotation(
    iface: *_alljoyn_interfacedescription_handle,
    member: *const i8,
    argName: *const i8,
    name: *const i8,
    value: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_interfacedescription_getmemberargannotation(
    iface: *const _alljoyn_interfacedescription_handle,
    member: *const i8,
    argName: *const i8,
    name: *const i8,
    value: *i8,
    value_size: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_interfacedescription_eql(
    one: *const _alljoyn_interfacedescription_handle,
    other: *const _alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_interfacedescription_member_eql(
    one: alljoyn_interfacedescription_member,
    other: alljoyn_interfacedescription_member,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_interfacedescription_property_eql(
    one: alljoyn_interfacedescription_property,
    other: alljoyn_interfacedescription_property,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_busobject_create(
    path: *const i8,
    isPlaceholder: i32,
    callbacks_in: *const alljoyn_busobject_callbacks,
    context_in: *const c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_busobject_handle;

pub extern "MSAJApi" fn alljoyn_busobject_destroy(
    bus: *_alljoyn_busobject_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_busobject_getpath(
    bus: *_alljoyn_busobject_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_busobject_emitpropertychanged(
    bus: *_alljoyn_busobject_handle,
    ifcName: *const i8,
    propName: *const i8,
    val: *_alljoyn_msgarg_handle,
    id: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_busobject_emitpropertieschanged(
    bus: *_alljoyn_busobject_handle,
    ifcName: *const i8,
    propNames: *const *const i8,
    numProps: ?*c_void,
    id: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_busobject_getname(
    bus: *_alljoyn_busobject_handle,
    buffer: *i8,
    bufferSz: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_busobject_addinterface(
    bus: *_alljoyn_busobject_handle,
    iface: *const _alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busobject_addmethodhandler(
    bus: *_alljoyn_busobject_handle,
    member: alljoyn_interfacedescription_member,
    handler: alljoyn_messagereceiver_methodhandler_ptr,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busobject_addmethodhandlers(
    bus: *_alljoyn_busobject_handle,
    entries: *const alljoyn_busobject_methodentry,
    numEntries: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busobject_methodreply_args(
    bus: *_alljoyn_busobject_handle,
    msg: *_alljoyn_message_handle,
    args: *const _alljoyn_msgarg_handle,
    numArgs: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busobject_methodreply_err(
    bus: *_alljoyn_busobject_handle,
    msg: *_alljoyn_message_handle,
    @"error": *const i8,
    errorMessage: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busobject_methodreply_status(
    bus: *_alljoyn_busobject_handle,
    msg: *_alljoyn_message_handle,
    status: QStatus,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busobject_getbusattachment(
    bus: *_alljoyn_busobject_handle,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_busattachment_handle;

pub extern "MSAJApi" fn alljoyn_busobject_signal(
    bus: *_alljoyn_busobject_handle,
    destination: *const i8,
    sessionId: u32,
    signal: alljoyn_interfacedescription_member,
    args: *const _alljoyn_msgarg_handle,
    numArgs: ?*c_void,
    timeToLive: u16,
    flags: u8,
    msg: *_alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busobject_cancelsessionlessmessage_serial(
    bus: *_alljoyn_busobject_handle,
    serialNumber: u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busobject_cancelsessionlessmessage(
    bus: *_alljoyn_busobject_handle,
    msg: *const _alljoyn_message_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busobject_issecure(
    bus: *_alljoyn_busobject_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_busobject_getannouncedinterfacenames(
    bus: *_alljoyn_busobject_handle,
    interfaces: *const *const i8,
    numInterfaces: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_busobject_setannounceflag(
    bus: *_alljoyn_busobject_handle,
    iface: *const _alljoyn_interfacedescription_handle,
    isAnnounced: alljoyn_about_announceflag,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busobject_addinterface_announced(
    bus: *_alljoyn_busobject_handle,
    iface: *const _alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_create(
    bus: *_alljoyn_busattachment_handle,
    service: *const i8,
    path: *const i8,
    sessionId: u32,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_proxybusobject_handle;

pub extern "MSAJApi" fn alljoyn_proxybusobject_create_secure(
    bus: *_alljoyn_busattachment_handle,
    service: *const i8,
    path: *const i8,
    sessionId: u32,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_proxybusobject_handle;

pub extern "MSAJApi" fn alljoyn_proxybusobject_destroy(
    proxyObj: *_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_proxybusobject_addinterface(
    proxyObj: *_alljoyn_proxybusobject_handle,
    iface: *const _alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_addinterface_by_name(
    proxyObj: *_alljoyn_proxybusobject_handle,
    name: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_getchildren(
    proxyObj: *_alljoyn_proxybusobject_handle,
    children: **_alljoyn_proxybusobject_handle,
    numChildren: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_proxybusobject_getchild(
    proxyObj: *_alljoyn_proxybusobject_handle,
    path: *const i8,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_proxybusobject_handle;

pub extern "MSAJApi" fn alljoyn_proxybusobject_addchild(
    proxyObj: *_alljoyn_proxybusobject_handle,
    child: *const _alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_removechild(
    proxyObj: *_alljoyn_proxybusobject_handle,
    path: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_introspectremoteobject(
    proxyObj: *_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_introspectremoteobjectasync(
    proxyObj: *_alljoyn_proxybusobject_handle,
    callback: alljoyn_proxybusobject_listener_introspectcb_ptr,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_getproperty(
    proxyObj: *_alljoyn_proxybusobject_handle,
    iface: *const i8,
    property: *const i8,
    value: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_getpropertyasync(
    proxyObj: *_alljoyn_proxybusobject_handle,
    iface: *const i8,
    property: *const i8,
    callback: alljoyn_proxybusobject_listener_getpropertycb_ptr,
    timeout: u32,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_getallproperties(
    proxyObj: *_alljoyn_proxybusobject_handle,
    iface: *const i8,
    values: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_getallpropertiesasync(
    proxyObj: *_alljoyn_proxybusobject_handle,
    iface: *const i8,
    callback: alljoyn_proxybusobject_listener_getallpropertiescb_ptr,
    timeout: u32,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_setproperty(
    proxyObj: *_alljoyn_proxybusobject_handle,
    iface: *const i8,
    property: *const i8,
    value: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_registerpropertieschangedlistener(
    proxyObj: *_alljoyn_proxybusobject_handle,
    iface: *const i8,
    properties: *const *const i8,
    numProperties: ?*c_void,
    callback: alljoyn_proxybusobject_listener_propertieschanged_ptr,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_unregisterpropertieschangedlistener(
    proxyObj: *_alljoyn_proxybusobject_handle,
    iface: *const i8,
    callback: alljoyn_proxybusobject_listener_propertieschanged_ptr,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_setpropertyasync(
    proxyObj: *_alljoyn_proxybusobject_handle,
    iface: *const i8,
    property: *const i8,
    value: *_alljoyn_msgarg_handle,
    callback: alljoyn_proxybusobject_listener_setpropertycb_ptr,
    timeout: u32,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_methodcall(
    proxyObj: *_alljoyn_proxybusobject_handle,
    ifaceName: *const i8,
    methodName: *const i8,
    args: *const _alljoyn_msgarg_handle,
    numArgs: ?*c_void,
    replyMsg: *_alljoyn_message_handle,
    timeout: u32,
    flags: u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_methodcall_member(
    proxyObj: *_alljoyn_proxybusobject_handle,
    method: alljoyn_interfacedescription_member,
    args: *const _alljoyn_msgarg_handle,
    numArgs: ?*c_void,
    replyMsg: *_alljoyn_message_handle,
    timeout: u32,
    flags: u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_methodcall_noreply(
    proxyObj: *_alljoyn_proxybusobject_handle,
    ifaceName: *const i8,
    methodName: *const i8,
    args: *const _alljoyn_msgarg_handle,
    numArgs: ?*c_void,
    flags: u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_methodcall_member_noreply(
    proxyObj: *_alljoyn_proxybusobject_handle,
    method: alljoyn_interfacedescription_member,
    args: *const _alljoyn_msgarg_handle,
    numArgs: ?*c_void,
    flags: u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_methodcallasync(
    proxyObj: *_alljoyn_proxybusobject_handle,
    ifaceName: *const i8,
    methodName: *const i8,
    replyFunc: alljoyn_messagereceiver_replyhandler_ptr,
    args: *const _alljoyn_msgarg_handle,
    numArgs: ?*c_void,
    context: *c_void,
    timeout: u32,
    flags: u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_methodcallasync_member(
    proxyObj: *_alljoyn_proxybusobject_handle,
    method: alljoyn_interfacedescription_member,
    replyFunc: alljoyn_messagereceiver_replyhandler_ptr,
    args: *const _alljoyn_msgarg_handle,
    numArgs: ?*c_void,
    context: *c_void,
    timeout: u32,
    flags: u8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_parsexml(
    proxyObj: *_alljoyn_proxybusobject_handle,
    xml: *const i8,
    identifier: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_secureconnection(
    proxyObj: *_alljoyn_proxybusobject_handle,
    forceAuth: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_secureconnectionasync(
    proxyObj: *_alljoyn_proxybusobject_handle,
    forceAuth: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_getinterface(
    proxyObj: *_alljoyn_proxybusobject_handle,
    iface: *const i8,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_interfacedescription_handle;

pub extern "MSAJApi" fn alljoyn_proxybusobject_getinterfaces(
    proxyObj: *_alljoyn_proxybusobject_handle,
    ifaces: *const *const _alljoyn_interfacedescription_handle,
    numIfaces: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_proxybusobject_getpath(
    proxyObj: *_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_proxybusobject_getservicename(
    proxyObj: *_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_proxybusobject_getuniquename(
    proxyObj: *_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_proxybusobject_getsessionid(
    proxyObj: *_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSAJApi" fn alljoyn_proxybusobject_implementsinterface(
    proxyObj: *_alljoyn_proxybusobject_handle,
    iface: *const i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_proxybusobject_copy(
    source: *const _alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_proxybusobject_handle;

pub extern "MSAJApi" fn alljoyn_proxybusobject_isvalid(
    proxyObj: *_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_proxybusobject_issecure(
    proxyObj: *_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_proxybusobject_enablepropertycaching(
    proxyObj: *_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_permissionconfigurationlistener_create(
    callbacks: *const alljoyn_permissionconfigurationlistener_callbacks,
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_permissionconfigurationlistener_handle;

pub extern "MSAJApi" fn alljoyn_permissionconfigurationlistener_destroy(
    listener: *_alljoyn_permissionconfigurationlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_sessionlistener_create(
    callbacks: *const alljoyn_sessionlistener_callbacks,
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_sessionlistener_handle;

pub extern "MSAJApi" fn alljoyn_sessionlistener_destroy(
    listener: *_alljoyn_sessionlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_sessionportlistener_create(
    callbacks: *const alljoyn_sessionportlistener_callbacks,
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_sessionportlistener_handle;

pub extern "MSAJApi" fn alljoyn_sessionportlistener_destroy(
    listener: *_alljoyn_sessionportlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_aboutlistener_create(
    callback: *const alljoyn_aboutlistener_callback,
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_aboutlistener_handle;

pub extern "MSAJApi" fn alljoyn_aboutlistener_destroy(
    listener: *_alljoyn_aboutlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_busattachment_create(
    applicationName: *const i8,
    allowRemoteMessages: i32,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_busattachment_handle;

pub extern "MSAJApi" fn alljoyn_busattachment_create_concurrency(
    applicationName: *const i8,
    allowRemoteMessages: i32,
    concurrency: u32,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_busattachment_handle;

pub extern "MSAJApi" fn alljoyn_busattachment_destroy(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_busattachment_start(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_stop(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_join(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_getconcurrency(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSAJApi" fn alljoyn_busattachment_getconnectspec(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_busattachment_enableconcurrentcallbacks(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_busattachment_createinterface(
    bus: *_alljoyn_busattachment_handle,
    name: *const i8,
    iface: **_alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_createinterface_secure(
    bus: *_alljoyn_busattachment_handle,
    name: *const i8,
    iface: **_alljoyn_interfacedescription_handle,
    secPolicy: alljoyn_interfacedescription_securitypolicy,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_connect(
    bus: *_alljoyn_busattachment_handle,
    connectSpec: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_registerbuslistener(
    bus: *_alljoyn_busattachment_handle,
    listener: *_alljoyn_buslistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_busattachment_unregisterbuslistener(
    bus: *_alljoyn_busattachment_handle,
    listener: *_alljoyn_buslistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_busattachment_findadvertisedname(
    bus: *_alljoyn_busattachment_handle,
    namePrefix: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_findadvertisednamebytransport(
    bus: *_alljoyn_busattachment_handle,
    namePrefix: *const i8,
    transports: u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_cancelfindadvertisedname(
    bus: *_alljoyn_busattachment_handle,
    namePrefix: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_cancelfindadvertisednamebytransport(
    bus: *_alljoyn_busattachment_handle,
    namePrefix: *const i8,
    transports: u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_advertisename(
    bus: *_alljoyn_busattachment_handle,
    name: *const i8,
    transports: u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_canceladvertisename(
    bus: *_alljoyn_busattachment_handle,
    name: *const i8,
    transports: u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_getinterface(
    bus: *_alljoyn_busattachment_handle,
    name: *const i8,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_interfacedescription_handle;

pub extern "MSAJApi" fn alljoyn_busattachment_joinsession(
    bus: *_alljoyn_busattachment_handle,
    sessionHost: *const i8,
    sessionPort: u16,
    listener: *_alljoyn_sessionlistener_handle,
    sessionId: *u32,
    opts: *_alljoyn_sessionopts_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_joinsessionasync(
    bus: *_alljoyn_busattachment_handle,
    sessionHost: *const i8,
    sessionPort: u16,
    listener: *_alljoyn_sessionlistener_handle,
    opts: *const _alljoyn_sessionopts_handle,
    callback: alljoyn_busattachment_joinsessioncb_ptr,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_registerbusobject(
    bus: *_alljoyn_busattachment_handle,
    obj: *_alljoyn_busobject_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_registerbusobject_secure(
    bus: *_alljoyn_busattachment_handle,
    obj: *_alljoyn_busobject_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_unregisterbusobject(
    bus: *_alljoyn_busattachment_handle,
    object: *_alljoyn_busobject_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_busattachment_requestname(
    bus: *_alljoyn_busattachment_handle,
    requestedName: *const i8,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_releasename(
    bus: *_alljoyn_busattachment_handle,
    name: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_bindsessionport(
    bus: *_alljoyn_busattachment_handle,
    sessionPort: *u16,
    opts: *const _alljoyn_sessionopts_handle,
    listener: *_alljoyn_sessionportlistener_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_unbindsessionport(
    bus: *_alljoyn_busattachment_handle,
    sessionPort: u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_enablepeersecurity(
    bus: *_alljoyn_busattachment_handle,
    authMechanisms: *const i8,
    listener: *_alljoyn_authlistener_handle,
    keyStoreFileName: *const i8,
    isShared: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_enablepeersecuritywithpermissionconfigurationlistener(
    bus: *_alljoyn_busattachment_handle,
    authMechanisms: *const i8,
    authListener: *_alljoyn_authlistener_handle,
    keyStoreFileName: *const i8,
    isShared: i32,
    permissionConfigurationListener: *_alljoyn_permissionconfigurationlistener_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_ispeersecurityenabled(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_busattachment_createinterfacesfromxml(
    bus: *_alljoyn_busattachment_handle,
    xml: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_getinterfaces(
    bus: *const _alljoyn_busattachment_handle,
    ifaces: *const *const _alljoyn_interfacedescription_handle,
    numIfaces: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_busattachment_deleteinterface(
    bus: *_alljoyn_busattachment_handle,
    iface: *_alljoyn_interfacedescription_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_isstarted(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_busattachment_isstopping(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_busattachment_isconnected(
    bus: *const _alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSAJApi" fn alljoyn_busattachment_disconnect(
    bus: *_alljoyn_busattachment_handle,
    unused: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_getdbusproxyobj(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_proxybusobject_handle;

pub extern "MSAJApi" fn alljoyn_busattachment_getalljoynproxyobj(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_proxybusobject_handle;

pub extern "MSAJApi" fn alljoyn_busattachment_getalljoyndebugobj(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_proxybusobject_handle;

pub extern "MSAJApi" fn alljoyn_busattachment_getuniquename(
    bus: *const _alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_busattachment_getglobalguidstring(
    bus: *const _alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_busattachment_registersignalhandler(
    bus: *_alljoyn_busattachment_handle,
    signal_handler: alljoyn_messagereceiver_signalhandler_ptr,
    member: alljoyn_interfacedescription_member,
    srcPath: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_registersignalhandlerwithrule(
    bus: *_alljoyn_busattachment_handle,
    signal_handler: alljoyn_messagereceiver_signalhandler_ptr,
    member: alljoyn_interfacedescription_member,
    matchRule: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_unregistersignalhandler(
    bus: *_alljoyn_busattachment_handle,
    signal_handler: alljoyn_messagereceiver_signalhandler_ptr,
    member: alljoyn_interfacedescription_member,
    srcPath: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_unregistersignalhandlerwithrule(
    bus: *_alljoyn_busattachment_handle,
    signal_handler: alljoyn_messagereceiver_signalhandler_ptr,
    member: alljoyn_interfacedescription_member,
    matchRule: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_unregisterallhandlers(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_registerkeystorelistener(
    bus: *_alljoyn_busattachment_handle,
    listener: *_alljoyn_keystorelistener_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_reloadkeystore(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_clearkeystore(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_busattachment_clearkeys(
    bus: *_alljoyn_busattachment_handle,
    guid: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_setkeyexpiration(
    bus: *_alljoyn_busattachment_handle,
    guid: *const i8,
    timeout: u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_getkeyexpiration(
    bus: *_alljoyn_busattachment_handle,
    guid: *const i8,
    timeout: *u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_addlogonentry(
    bus: *_alljoyn_busattachment_handle,
    authMechanism: *const i8,
    userName: *const i8,
    password: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_addmatch(
    bus: *_alljoyn_busattachment_handle,
    rule: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_removematch(
    bus: *_alljoyn_busattachment_handle,
    rule: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_setsessionlistener(
    bus: *_alljoyn_busattachment_handle,
    sessionId: u32,
    listener: *_alljoyn_sessionlistener_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_leavesession(
    bus: *_alljoyn_busattachment_handle,
    sessionId: u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_secureconnection(
    bus: *_alljoyn_busattachment_handle,
    name: *const i8,
    forceAuth: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_secureconnectionasync(
    bus: *_alljoyn_busattachment_handle,
    name: *const i8,
    forceAuth: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_removesessionmember(
    bus: *_alljoyn_busattachment_handle,
    sessionId: u32,
    memberName: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_setlinktimeout(
    bus: *_alljoyn_busattachment_handle,
    sessionid: u32,
    linkTimeout: *u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_setlinktimeoutasync(
    bus: *_alljoyn_busattachment_handle,
    sessionid: u32,
    linkTimeout: u32,
    callback: alljoyn_busattachment_setlinktimeoutcb_ptr,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_namehasowner(
    bus: *_alljoyn_busattachment_handle,
    name: *const i8,
    hasOwner: *i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_getpeerguid(
    bus: *_alljoyn_busattachment_handle,
    name: *const i8,
    guid: *i8,
    guidSz: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_setdaemondebug(
    bus: *_alljoyn_busattachment_handle,
    module: *const i8,
    level: u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_gettimestamp(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSAJApi" fn alljoyn_busattachment_ping(
    bus: *_alljoyn_busattachment_handle,
    name: *const i8,
    timeout: u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_registeraboutlistener(
    bus: *_alljoyn_busattachment_handle,
    aboutListener: *_alljoyn_aboutlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_busattachment_unregisteraboutlistener(
    bus: *_alljoyn_busattachment_handle,
    aboutListener: *_alljoyn_aboutlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_busattachment_unregisterallaboutlisteners(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_busattachment_whoimplements_interfaces(
    bus: *_alljoyn_busattachment_handle,
    implementsInterfaces: *const *const i8,
    numberInterfaces: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_whoimplements_interface(
    bus: *_alljoyn_busattachment_handle,
    implementsInterface: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_cancelwhoimplements_interfaces(
    bus: *_alljoyn_busattachment_handle,
    implementsInterfaces: *const *const i8,
    numberInterfaces: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_cancelwhoimplements_interface(
    bus: *_alljoyn_busattachment_handle,
    implementsInterface: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_getpermissionconfigurator(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_permissionconfigurator_handle;

pub extern "MSAJApi" fn alljoyn_busattachment_registerapplicationstatelistener(
    bus: *_alljoyn_busattachment_handle,
    listener: *_alljoyn_applicationstatelistener_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_unregisterapplicationstatelistener(
    bus: *_alljoyn_busattachment_handle,
    listener: *_alljoyn_applicationstatelistener_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_busattachment_deletedefaultkeystore(
    applicationName: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutobj_create(
    bus: *_alljoyn_busattachment_handle,
    isAnnounced: alljoyn_about_announceflag,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_aboutobj_handle;

pub extern "MSAJApi" fn alljoyn_aboutobj_destroy(
    obj: *_alljoyn_aboutobj_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_aboutobj_announce(
    obj: *_alljoyn_aboutobj_handle,
    sessionPort: u16,
    aboutData: *_alljoyn_aboutdata_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutobj_announce_using_datalistener(
    obj: *_alljoyn_aboutobj_handle,
    sessionPort: u16,
    aboutListener: *_alljoyn_aboutdatalistener_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutobj_unannounce(
    obj: *_alljoyn_aboutobj_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_create(
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_aboutobjectdescription_handle;

pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_create_full(
    arg: *const _alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_aboutobjectdescription_handle;

pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_createfrommsgarg(
    description: *_alljoyn_aboutobjectdescription_handle,
    arg: *const _alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_destroy(
    description: *_alljoyn_aboutobjectdescription_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_getpaths(
    description: *_alljoyn_aboutobjectdescription_handle,
    paths: *const *const i8,
    numPaths: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_getinterfaces(
    description: *_alljoyn_aboutobjectdescription_handle,
    path: *const i8,
    interfaces: *const *const i8,
    numInterfaces: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_getinterfacepaths(
    description: *_alljoyn_aboutobjectdescription_handle,
    interfaceName: *const i8,
    paths: *const *const i8,
    numPaths: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_clear(
    description: *_alljoyn_aboutobjectdescription_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_haspath(
    description: *_alljoyn_aboutobjectdescription_handle,
    path: *const i8,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_hasinterface(
    description: *_alljoyn_aboutobjectdescription_handle,
    interfaceName: *const i8,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_hasinterfaceatpath(
    description: *_alljoyn_aboutobjectdescription_handle,
    path: *const i8,
    interfaceName: *const i8,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "MSAJApi" fn alljoyn_aboutobjectdescription_getmsgarg(
    description: *_alljoyn_aboutobjectdescription_handle,
    msgArg: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutproxy_create(
    bus: *_alljoyn_busattachment_handle,
    busName: *const i8,
    sessionId: u32,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_aboutproxy_handle;

pub extern "MSAJApi" fn alljoyn_aboutproxy_destroy(
    proxy: *_alljoyn_aboutproxy_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_aboutproxy_getobjectdescription(
    proxy: *_alljoyn_aboutproxy_handle,
    objectDesc: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutproxy_getaboutdata(
    proxy: *_alljoyn_aboutproxy_handle,
    language: *const i8,
    data: *_alljoyn_msgarg_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_aboutproxy_getversion(
    proxy: *_alljoyn_aboutproxy_handle,
    version: *u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_pinglistener_create(
    callback: *const alljoyn_pinglistener_callback,
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_pinglistener_handle;

pub extern "MSAJApi" fn alljoyn_pinglistener_destroy(
    listener: *_alljoyn_pinglistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_autopinger_create(
    bus: *_alljoyn_busattachment_handle,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_autopinger_handle;

pub extern "MSAJApi" fn alljoyn_autopinger_destroy(
    autopinger: *_alljoyn_autopinger_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_autopinger_pause(
    autopinger: *_alljoyn_autopinger_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_autopinger_resume(
    autopinger: *_alljoyn_autopinger_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_autopinger_addpinggroup(
    autopinger: *_alljoyn_autopinger_handle,
    group: *const i8,
    listener: *_alljoyn_pinglistener_handle,
    pinginterval: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_autopinger_removepinggroup(
    autopinger: *_alljoyn_autopinger_handle,
    group: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_autopinger_setpinginterval(
    autopinger: *_alljoyn_autopinger_handle,
    group: *const i8,
    pinginterval: u32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_autopinger_adddestination(
    autopinger: *_alljoyn_autopinger_handle,
    group: *const i8,
    destination: *const i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_autopinger_removedestination(
    autopinger: *_alljoyn_autopinger_handle,
    group: *const i8,
    destination: *const i8,
    removeall: i32,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_getversion(
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_getbuildinfo(
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "MSAJApi" fn alljoyn_getnumericversion(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "MSAJApi" fn alljoyn_init(
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_shutdown(
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_routerinit(
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_routerinitwithconfig(
    configXml: *i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_routershutdown(
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_proxybusobject_ref_create(
    proxy: *_alljoyn_proxybusobject_handle,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_proxybusobject_ref_handle;

pub extern "MSAJApi" fn alljoyn_proxybusobject_ref_get(
    ref: *_alljoyn_proxybusobject_ref_handle,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_proxybusobject_handle;

pub extern "MSAJApi" fn alljoyn_proxybusobject_ref_incref(
    ref: *_alljoyn_proxybusobject_ref_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_proxybusobject_ref_decref(
    ref: *_alljoyn_proxybusobject_ref_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_observerlistener_create(
    callback: *const alljoyn_observerlistener_callback,
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_observerlistener_handle;

pub extern "MSAJApi" fn alljoyn_observerlistener_destroy(
    listener: *_alljoyn_observerlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_observer_create(
    bus: *_alljoyn_busattachment_handle,
    mandatoryInterfaces: *const *const i8,
    numMandatoryInterfaces: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_observer_handle;

pub extern "MSAJApi" fn alljoyn_observer_destroy(
    observer: *_alljoyn_observer_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_observer_registerlistener(
    observer: *_alljoyn_observer_handle,
    listener: *_alljoyn_observerlistener_handle,
    triggerOnExisting: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_observer_unregisterlistener(
    observer: *_alljoyn_observer_handle,
    listener: *_alljoyn_observerlistener_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_observer_unregisteralllisteners(
    observer: *_alljoyn_observer_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_observer_get(
    observer: *_alljoyn_observer_handle,
    uniqueBusName: *const i8,
    objectPath: *const i8,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_proxybusobject_ref_handle;

pub extern "MSAJApi" fn alljoyn_observer_getfirst(
    observer: *_alljoyn_observer_handle,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_proxybusobject_ref_handle;

pub extern "MSAJApi" fn alljoyn_observer_getnext(
    observer: *_alljoyn_observer_handle,
    proxyref: *_alljoyn_proxybusobject_ref_handle,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_proxybusobject_ref_handle;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_getpermissionmanagementsessionport(
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_create(
    bus: *_alljoyn_busattachment_handle,
    appBusName: *i8,
    sessionId: u32,
) callconv(@import("std").os.windows.WINAPI) *_alljoyn_securityapplicationproxy_handle;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_destroy(
    proxy: *_alljoyn_securityapplicationproxy_handle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_claim(
    proxy: *_alljoyn_securityapplicationproxy_handle,
    caKey: *i8,
    identityCertificateChain: *i8,
    groupId: *const u8,
    groupSize: ?*c_void,
    groupAuthority: *i8,
    manifestsXmls: **i8,
    manifestsCount: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_getmanifesttemplate(
    proxy: *_alljoyn_securityapplicationproxy_handle,
    manifestTemplateXml: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_manifesttemplate_destroy(
    manifestTemplateXml: *i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_getapplicationstate(
    proxy: *_alljoyn_securityapplicationproxy_handle,
    applicationState: *alljoyn_applicationstate,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_getclaimcapabilities(
    proxy: *_alljoyn_securityapplicationproxy_handle,
    capabilities: *u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_getclaimcapabilitiesadditionalinfo(
    proxy: *_alljoyn_securityapplicationproxy_handle,
    additionalInfo: *u16,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_getpolicy(
    proxy: *_alljoyn_securityapplicationproxy_handle,
    policyXml: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_getdefaultpolicy(
    proxy: *_alljoyn_securityapplicationproxy_handle,
    policyXml: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_policy_destroy(
    policyXml: *i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_updatepolicy(
    proxy: *_alljoyn_securityapplicationproxy_handle,
    policyXml: *i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_updateidentity(
    proxy: *_alljoyn_securityapplicationproxy_handle,
    identityCertificateChain: *i8,
    manifestsXmls: **i8,
    manifestsCount: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_installmembership(
    proxy: *_alljoyn_securityapplicationproxy_handle,
    membershipCertificateChain: *i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_reset(
    proxy: *_alljoyn_securityapplicationproxy_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_resetpolicy(
    proxy: *_alljoyn_securityapplicationproxy_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_startmanagement(
    proxy: *_alljoyn_securityapplicationproxy_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_endmanagement(
    proxy: *_alljoyn_securityapplicationproxy_handle,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_geteccpublickey(
    proxy: *_alljoyn_securityapplicationproxy_handle,
    eccPublicKey: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_eccpublickey_destroy(
    eccPublicKey: *i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_signmanifest(
    unsignedManifestXml: *i8,
    identityCertificatePem: *i8,
    signingPrivateKeyPem: *i8,
    signedManifestXml: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_manifest_destroy(
    signedManifestXml: *i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_computemanifestdigest(
    unsignedManifestXml: *i8,
    identityCertificatePem: *i8,
    digest: **u8,
    digestSize: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) QStatus;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_digest_destroy(
    digest: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "MSAJApi" fn alljoyn_securityapplicationproxy_setmanifestsignature(
    unsignedManifestXml: *i8,
    identityCertificatePem: *i8,
    signature: *const u8,
    signatureSize: ?*c_void,
    signedManifestXml: **i8,
) callconv(@import("std").os.windows.WINAPI) QStatus;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (4)
//--------------------------------------------------------------------------------
const SECURITY_ATTRIBUTES = @import("system_services.zig").SECURITY_ATTRIBUTES;
const PWSTR = @import("system_services.zig").PWSTR;
const HANDLE = @import("system_services.zig").HANDLE;
const BOOL = @import("system_services.zig").BOOL;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = alljoyn_aboutdatalistener_getaboutdata_ptr;
    _ = alljoyn_aboutdatalistener_getannouncedaboutdata_ptr;
    _ = alljoyn_applicationstatelistener_state_ptr;
    _ = alljoyn_keystorelistener_loadrequest_ptr;
    _ = alljoyn_keystorelistener_storerequest_ptr;
    _ = alljoyn_keystorelistener_acquireexclusivelock_ptr;
    _ = alljoyn_keystorelistener_releaseexclusivelock_ptr;
    _ = alljoyn_authlistener_requestcredentials_ptr;
    _ = alljoyn_authlistener_requestcredentialsasync_ptr;
    _ = alljoyn_authlistener_verifycredentials_ptr;
    _ = alljoyn_authlistener_verifycredentialsasync_ptr;
    _ = alljoyn_authlistener_securityviolation_ptr;
    _ = alljoyn_authlistener_authenticationcomplete_ptr;
    _ = alljoyn_buslistener_listener_registered_ptr;
    _ = alljoyn_buslistener_listener_unregistered_ptr;
    _ = alljoyn_buslistener_found_advertised_name_ptr;
    _ = alljoyn_buslistener_lost_advertised_name_ptr;
    _ = alljoyn_buslistener_name_owner_changed_ptr;
    _ = alljoyn_buslistener_bus_stopping_ptr;
    _ = alljoyn_buslistener_bus_disconnected_ptr;
    _ = alljoyn_buslistener_bus_prop_changed_ptr;
    _ = alljoyn_interfacedescription_translation_callback_ptr;
    _ = alljoyn_messagereceiver_methodhandler_ptr;
    _ = alljoyn_messagereceiver_replyhandler_ptr;
    _ = alljoyn_messagereceiver_signalhandler_ptr;
    _ = alljoyn_busobject_prop_get_ptr;
    _ = alljoyn_busobject_prop_set_ptr;
    _ = alljoyn_busobject_object_registration_ptr;
    _ = alljoyn_proxybusobject_listener_introspectcb_ptr;
    _ = alljoyn_proxybusobject_listener_getpropertycb_ptr;
    _ = alljoyn_proxybusobject_listener_getallpropertiescb_ptr;
    _ = alljoyn_proxybusobject_listener_setpropertycb_ptr;
    _ = alljoyn_proxybusobject_listener_propertieschanged_ptr;
    _ = alljoyn_permissionconfigurationlistener_factoryreset_ptr;
    _ = alljoyn_permissionconfigurationlistener_policychanged_ptr;
    _ = alljoyn_permissionconfigurationlistener_startmanagement_ptr;
    _ = alljoyn_permissionconfigurationlistener_endmanagement_ptr;
    _ = alljoyn_sessionlistener_sessionlost_ptr;
    _ = alljoyn_sessionlistener_sessionmemberadded_ptr;
    _ = alljoyn_sessionlistener_sessionmemberremoved_ptr;
    _ = alljoyn_sessionportlistener_acceptsessionjoiner_ptr;
    _ = alljoyn_sessionportlistener_sessionjoined_ptr;
    _ = alljoyn_about_announced_ptr;
    _ = alljoyn_busattachment_joinsessioncb_ptr;
    _ = alljoyn_busattachment_setlinktimeoutcb_ptr;
    _ = alljoyn_autopinger_destination_lost_ptr;
    _ = alljoyn_autopinger_destination_found_ptr;
    _ = alljoyn_observer_object_discovered_ptr;
    _ = alljoyn_observer_object_lost_ptr;

    const constant_export_count = 20;
    const type_export_count = 107;
    const enum_value_export_count = 452;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 532;
    const unicode_alias_count = 0;
    const import_count = 4;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (25)
//--------------------------------------------------------------------------------
pub const INTERACTION_ID = extern enum(i32) {
    NONE = 0,
    MANIPULATION = 1,
    TAP = 2,
    SECONDARY_TAP = 3,
    HOLD = 4,
    DRAG = 5,
    CROSS_SLIDE = 6,
    MAX = -1,
};
pub const INTERACTION_ID_NONE = INTERACTION_ID.NONE;
pub const INTERACTION_ID_MANIPULATION = INTERACTION_ID.MANIPULATION;
pub const INTERACTION_ID_TAP = INTERACTION_ID.TAP;
pub const INTERACTION_ID_SECONDARY_TAP = INTERACTION_ID.SECONDARY_TAP;
pub const INTERACTION_ID_HOLD = INTERACTION_ID.HOLD;
pub const INTERACTION_ID_DRAG = INTERACTION_ID.DRAG;
pub const INTERACTION_ID_CROSS_SLIDE = INTERACTION_ID.CROSS_SLIDE;
pub const INTERACTION_ID_MAX = INTERACTION_ID.MAX;

pub const INTERACTION_FLAGS = extern enum(i32) {
    INTERACTION_FLAG_NONE = 0,
    INTERACTION_FLAG_BEGIN = 1,
    INTERACTION_FLAG_END = 2,
    INTERACTION_FLAG_CANCEL = 4,
    INTERACTION_FLAG_INERTIA = 8,
    INTERACTION_FLAG_MAX = -1,
};
pub const INTERACTION_FLAG_NONE = INTERACTION_FLAGS.INTERACTION_FLAG_NONE;
pub const INTERACTION_FLAG_BEGIN = INTERACTION_FLAGS.INTERACTION_FLAG_BEGIN;
pub const INTERACTION_FLAG_END = INTERACTION_FLAGS.INTERACTION_FLAG_END;
pub const INTERACTION_FLAG_CANCEL = INTERACTION_FLAGS.INTERACTION_FLAG_CANCEL;
pub const INTERACTION_FLAG_INERTIA = INTERACTION_FLAGS.INTERACTION_FLAG_INERTIA;
pub const INTERACTION_FLAG_MAX = INTERACTION_FLAGS.INTERACTION_FLAG_MAX;

pub const INTERACTION_CONFIGURATION_FLAGS = extern enum(i32) {
    INTERACTION_CONFIGURATION_FLAG_NONE = 0,
    INTERACTION_CONFIGURATION_FLAG_MANIPULATION = 1,
    INTERACTION_CONFIGURATION_FLAG_MANIPULATION_TRANSLATION_X = 2,
    INTERACTION_CONFIGURATION_FLAG_MANIPULATION_TRANSLATION_Y = 4,
    INTERACTION_CONFIGURATION_FLAG_MANIPULATION_ROTATION = 8,
    INTERACTION_CONFIGURATION_FLAG_MANIPULATION_SCALING = 16,
    INTERACTION_CONFIGURATION_FLAG_MANIPULATION_TRANSLATION_INERTIA = 32,
    INTERACTION_CONFIGURATION_FLAG_MANIPULATION_ROTATION_INERTIA = 64,
    INTERACTION_CONFIGURATION_FLAG_MANIPULATION_SCALING_INERTIA = 128,
    INTERACTION_CONFIGURATION_FLAG_MANIPULATION_RAILS_X = 256,
    INTERACTION_CONFIGURATION_FLAG_MANIPULATION_RAILS_Y = 512,
    INTERACTION_CONFIGURATION_FLAG_MANIPULATION_EXACT = 1024,
    INTERACTION_CONFIGURATION_FLAG_MANIPULATION_MULTIPLE_FINGER_PANNING = 2048,
    INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE = 1,
    INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_HORIZONTAL = 2,
    INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_SELECT = 4,
    INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_SPEED_BUMP = 8,
    INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_REARRANGE = 16,
    INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_EXACT = 32,
    INTERACTION_CONFIGURATION_FLAG_TAP = 1,
    INTERACTION_CONFIGURATION_FLAG_TAP_DOUBLE = 2,
    INTERACTION_CONFIGURATION_FLAG_TAP_MULTIPLE_FINGER = 4,
    INTERACTION_CONFIGURATION_FLAG_SECONDARY_TAP = 1,
    INTERACTION_CONFIGURATION_FLAG_HOLD = 1,
    INTERACTION_CONFIGURATION_FLAG_HOLD_MOUSE = 2,
    INTERACTION_CONFIGURATION_FLAG_HOLD_MULTIPLE_FINGER = 4,
    INTERACTION_CONFIGURATION_FLAG_DRAG = 1,
    INTERACTION_CONFIGURATION_FLAG_MAX = -1,
};
pub const INTERACTION_CONFIGURATION_FLAG_NONE = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_NONE;
pub const INTERACTION_CONFIGURATION_FLAG_MANIPULATION = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_MANIPULATION;
pub const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_TRANSLATION_X = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_MANIPULATION_TRANSLATION_X;
pub const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_TRANSLATION_Y = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_MANIPULATION_TRANSLATION_Y;
pub const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_ROTATION = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_MANIPULATION_ROTATION;
pub const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_SCALING = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_MANIPULATION_SCALING;
pub const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_TRANSLATION_INERTIA = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_MANIPULATION_TRANSLATION_INERTIA;
pub const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_ROTATION_INERTIA = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_MANIPULATION_ROTATION_INERTIA;
pub const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_SCALING_INERTIA = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_MANIPULATION_SCALING_INERTIA;
pub const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_RAILS_X = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_MANIPULATION_RAILS_X;
pub const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_RAILS_Y = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_MANIPULATION_RAILS_Y;
pub const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_EXACT = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_MANIPULATION_EXACT;
pub const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_MULTIPLE_FINGER_PANNING = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_MANIPULATION_MULTIPLE_FINGER_PANNING;
pub const INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE;
pub const INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_HORIZONTAL = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_HORIZONTAL;
pub const INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_SELECT = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_SELECT;
pub const INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_SPEED_BUMP = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_SPEED_BUMP;
pub const INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_REARRANGE = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_REARRANGE;
pub const INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_EXACT = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_EXACT;
pub const INTERACTION_CONFIGURATION_FLAG_TAP = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_TAP;
pub const INTERACTION_CONFIGURATION_FLAG_TAP_DOUBLE = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_TAP_DOUBLE;
pub const INTERACTION_CONFIGURATION_FLAG_TAP_MULTIPLE_FINGER = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_TAP_MULTIPLE_FINGER;
pub const INTERACTION_CONFIGURATION_FLAG_SECONDARY_TAP = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_SECONDARY_TAP;
pub const INTERACTION_CONFIGURATION_FLAG_HOLD = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_HOLD;
pub const INTERACTION_CONFIGURATION_FLAG_HOLD_MOUSE = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_HOLD_MOUSE;
pub const INTERACTION_CONFIGURATION_FLAG_HOLD_MULTIPLE_FINGER = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_HOLD_MULTIPLE_FINGER;
pub const INTERACTION_CONFIGURATION_FLAG_DRAG = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_DRAG;
pub const INTERACTION_CONFIGURATION_FLAG_MAX = INTERACTION_CONFIGURATION_FLAGS.INTERACTION_CONFIGURATION_FLAG_MAX;

pub const INERTIA_PARAMETER = extern enum(i32) {
    TRANSLATION_DECELERATION = 1,
    TRANSLATION_DISPLACEMENT = 2,
    ROTATION_DECELERATION = 3,
    ROTATION_ANGLE = 4,
    EXPANSION_DECELERATION = 5,
    EXPANSION_EXPANSION = 6,
    MAX = -1,
};
pub const INERTIA_PARAMETER_TRANSLATION_DECELERATION = INERTIA_PARAMETER.TRANSLATION_DECELERATION;
pub const INERTIA_PARAMETER_TRANSLATION_DISPLACEMENT = INERTIA_PARAMETER.TRANSLATION_DISPLACEMENT;
pub const INERTIA_PARAMETER_ROTATION_DECELERATION = INERTIA_PARAMETER.ROTATION_DECELERATION;
pub const INERTIA_PARAMETER_ROTATION_ANGLE = INERTIA_PARAMETER.ROTATION_ANGLE;
pub const INERTIA_PARAMETER_EXPANSION_DECELERATION = INERTIA_PARAMETER.EXPANSION_DECELERATION;
pub const INERTIA_PARAMETER_EXPANSION_EXPANSION = INERTIA_PARAMETER.EXPANSION_EXPANSION;
pub const INERTIA_PARAMETER_MAX = INERTIA_PARAMETER.MAX;

pub const INTERACTION_STATE = extern enum(i32) {
    IDLE = 0,
    IN_INTERACTION = 1,
    POSSIBLE_DOUBLE_TAP = 2,
    MAX = -1,
};
pub const INTERACTION_STATE_IDLE = INTERACTION_STATE.IDLE;
pub const INTERACTION_STATE_IN_INTERACTION = INTERACTION_STATE.IN_INTERACTION;
pub const INTERACTION_STATE_POSSIBLE_DOUBLE_TAP = INTERACTION_STATE.POSSIBLE_DOUBLE_TAP;
pub const INTERACTION_STATE_MAX = INTERACTION_STATE.MAX;

pub const INTERACTION_CONTEXT_PROPERTY = extern enum(i32) {
    MEASUREMENT_UNITS = 1,
    INTERACTION_UI_FEEDBACK = 2,
    FILTER_POINTERS = 3,
    MAX = -1,
};
pub const INTERACTION_CONTEXT_PROPERTY_MEASUREMENT_UNITS = INTERACTION_CONTEXT_PROPERTY.MEASUREMENT_UNITS;
pub const INTERACTION_CONTEXT_PROPERTY_INTERACTION_UI_FEEDBACK = INTERACTION_CONTEXT_PROPERTY.INTERACTION_UI_FEEDBACK;
pub const INTERACTION_CONTEXT_PROPERTY_FILTER_POINTERS = INTERACTION_CONTEXT_PROPERTY.FILTER_POINTERS;
pub const INTERACTION_CONTEXT_PROPERTY_MAX = INTERACTION_CONTEXT_PROPERTY.MAX;

pub const CROSS_SLIDE_THRESHOLD = extern enum(i32) {
    SELECT_START = 0,
    SPEED_BUMP_START = 1,
    SPEED_BUMP_END = 2,
    REARRANGE_START = 3,
    COUNT = 4,
    MAX = -1,
};
pub const CROSS_SLIDE_THRESHOLD_SELECT_START = CROSS_SLIDE_THRESHOLD.SELECT_START;
pub const CROSS_SLIDE_THRESHOLD_SPEED_BUMP_START = CROSS_SLIDE_THRESHOLD.SPEED_BUMP_START;
pub const CROSS_SLIDE_THRESHOLD_SPEED_BUMP_END = CROSS_SLIDE_THRESHOLD.SPEED_BUMP_END;
pub const CROSS_SLIDE_THRESHOLD_REARRANGE_START = CROSS_SLIDE_THRESHOLD.REARRANGE_START;
pub const CROSS_SLIDE_THRESHOLD_COUNT = CROSS_SLIDE_THRESHOLD.COUNT;
pub const CROSS_SLIDE_THRESHOLD_MAX = CROSS_SLIDE_THRESHOLD.MAX;

pub const CROSS_SLIDE_FLAGS = extern enum(i32) {
    NONE = 0,
    SELECT = 1,
    SPEED_BUMP = 2,
    REARRANGE = 4,
    MAX = -1,
};
pub const CROSS_SLIDE_FLAGS_NONE = CROSS_SLIDE_FLAGS.NONE;
pub const CROSS_SLIDE_FLAGS_SELECT = CROSS_SLIDE_FLAGS.SELECT;
pub const CROSS_SLIDE_FLAGS_SPEED_BUMP = CROSS_SLIDE_FLAGS.SPEED_BUMP;
pub const CROSS_SLIDE_FLAGS_REARRANGE = CROSS_SLIDE_FLAGS.REARRANGE;
pub const CROSS_SLIDE_FLAGS_MAX = CROSS_SLIDE_FLAGS.MAX;

pub const MOUSE_WHEEL_PARAMETER = extern enum(i32) {
    CHAR_TRANSLATION_X = 1,
    CHAR_TRANSLATION_Y = 2,
    DELTA_SCALE = 3,
    DELTA_ROTATION = 4,
    PAGE_TRANSLATION_X = 5,
    PAGE_TRANSLATION_Y = 6,
    MAX = -1,
};
pub const MOUSE_WHEEL_PARAMETER_CHAR_TRANSLATION_X = MOUSE_WHEEL_PARAMETER.CHAR_TRANSLATION_X;
pub const MOUSE_WHEEL_PARAMETER_CHAR_TRANSLATION_Y = MOUSE_WHEEL_PARAMETER.CHAR_TRANSLATION_Y;
pub const MOUSE_WHEEL_PARAMETER_DELTA_SCALE = MOUSE_WHEEL_PARAMETER.DELTA_SCALE;
pub const MOUSE_WHEEL_PARAMETER_DELTA_ROTATION = MOUSE_WHEEL_PARAMETER.DELTA_ROTATION;
pub const MOUSE_WHEEL_PARAMETER_PAGE_TRANSLATION_X = MOUSE_WHEEL_PARAMETER.PAGE_TRANSLATION_X;
pub const MOUSE_WHEEL_PARAMETER_PAGE_TRANSLATION_Y = MOUSE_WHEEL_PARAMETER.PAGE_TRANSLATION_Y;
pub const MOUSE_WHEEL_PARAMETER_MAX = MOUSE_WHEEL_PARAMETER.MAX;

pub const TAP_PARAMETER = extern enum(i32) {
    MIN_CONTACT_COUNT = 0,
    MAX_CONTACT_COUNT = 1,
    MAX = -1,
};
pub const TAP_PARAMETER_MIN_CONTACT_COUNT = TAP_PARAMETER.MIN_CONTACT_COUNT;
pub const TAP_PARAMETER_MAX_CONTACT_COUNT = TAP_PARAMETER.MAX_CONTACT_COUNT;
pub const TAP_PARAMETER_MAX = TAP_PARAMETER.MAX;

pub const HOLD_PARAMETER = extern enum(i32) {
    MIN_CONTACT_COUNT = 0,
    MAX_CONTACT_COUNT = 1,
    THRESHOLD_RADIUS = 2,
    THRESHOLD_START_DELAY = 3,
    MAX = -1,
};
pub const HOLD_PARAMETER_MIN_CONTACT_COUNT = HOLD_PARAMETER.MIN_CONTACT_COUNT;
pub const HOLD_PARAMETER_MAX_CONTACT_COUNT = HOLD_PARAMETER.MAX_CONTACT_COUNT;
pub const HOLD_PARAMETER_THRESHOLD_RADIUS = HOLD_PARAMETER.THRESHOLD_RADIUS;
pub const HOLD_PARAMETER_THRESHOLD_START_DELAY = HOLD_PARAMETER.THRESHOLD_START_DELAY;
pub const HOLD_PARAMETER_MAX = HOLD_PARAMETER.MAX;

pub const TRANSLATION_PARAMETER = extern enum(i32) {
    MIN_CONTACT_COUNT = 0,
    MAX_CONTACT_COUNT = 1,
    MAX = -1,
};
pub const TRANSLATION_PARAMETER_MIN_CONTACT_COUNT = TRANSLATION_PARAMETER.MIN_CONTACT_COUNT;
pub const TRANSLATION_PARAMETER_MAX_CONTACT_COUNT = TRANSLATION_PARAMETER.MAX_CONTACT_COUNT;
pub const TRANSLATION_PARAMETER_MAX = TRANSLATION_PARAMETER.MAX;

pub const MANIPULATION_RAILS_STATE = extern enum(i32) {
    UNDECIDED = 0,
    FREE = 1,
    RAILED = 2,
    MAX = -1,
};
pub const MANIPULATION_RAILS_STATE_UNDECIDED = MANIPULATION_RAILS_STATE.UNDECIDED;
pub const MANIPULATION_RAILS_STATE_FREE = MANIPULATION_RAILS_STATE.FREE;
pub const MANIPULATION_RAILS_STATE_RAILED = MANIPULATION_RAILS_STATE.RAILED;
pub const MANIPULATION_RAILS_STATE_MAX = MANIPULATION_RAILS_STATE.MAX;

pub const MANIPULATION_TRANSFORM = extern struct {
    translationX: f32,
    translationY: f32,
    scale: f32,
    expansion: f32,
    rotation: f32,
};

pub const MANIPULATION_VELOCITY = extern struct {
    velocityX: f32,
    velocityY: f32,
    velocityExpansion: f32,
    velocityAngular: f32,
};

pub const INTERACTION_ARGUMENTS_MANIPULATION = extern struct {
    delta: MANIPULATION_TRANSFORM,
    cumulative: MANIPULATION_TRANSFORM,
    velocity: MANIPULATION_VELOCITY,
    railsState: MANIPULATION_RAILS_STATE,
};

pub const INTERACTION_ARGUMENTS_TAP = extern struct {
    count: u32,
};

pub const INTERACTION_ARGUMENTS_CROSS_SLIDE = extern struct {
    flags: CROSS_SLIDE_FLAGS,
};

pub const INTERACTION_CONTEXT_OUTPUT = extern struct {
    interactionId: INTERACTION_ID,
    interactionFlags: INTERACTION_FLAGS,
    inputType: POINTER_INPUT_TYPE,
    x: f32,
    y: f32,
    arguments: INTERACTION_CONTEXT_OUTPUT._arguments_e__Union,
    const _arguments_e__Union = u32; // TODO: generate this nested type!
};

pub const INTERACTION_CONTEXT_OUTPUT2 = extern struct {
    interactionId: INTERACTION_ID,
    interactionFlags: INTERACTION_FLAGS,
    inputType: POINTER_INPUT_TYPE,
    contactCount: u32,
    currentContactCount: u32,
    x: f32,
    y: f32,
    arguments: INTERACTION_CONTEXT_OUTPUT2._arguments_e__Union,
    const _arguments_e__Union = u32; // TODO: generate this nested type!
};

pub const INTERACTION_CONTEXT_CONFIGURATION = extern struct {
    interactionId: INTERACTION_ID,
    enable: INTERACTION_CONFIGURATION_FLAGS,
};

pub const CROSS_SLIDE_PARAMETER = extern struct {
    threshold: CROSS_SLIDE_THRESHOLD,
    distance: f32,
};

pub const INTERACTION_CONTEXT_OUTPUT_CALLBACK = fn(
    clientData: ?*c_void,
    output: *const INTERACTION_CONTEXT_OUTPUT,
) callconv(@import("std").os.windows.WINAPI) void;

pub const INTERACTION_CONTEXT_OUTPUT_CALLBACK2 = fn(
    clientData: ?*c_void,
    output: *const INTERACTION_CONTEXT_OUTPUT2,
) callconv(@import("std").os.windows.WINAPI) void;

pub const HINTERACTIONCONTEXT__ = extern struct {
    unused: i32,
};


//--------------------------------------------------------------------------------
// Section: Functions (30)
//--------------------------------------------------------------------------------
pub extern "NInput" fn CreateInteractionContext(
    interactionContext: **HINTERACTIONCONTEXT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn DestroyInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn RegisterOutputCallbackInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    outputCallback: INTERACTION_CONTEXT_OUTPUT_CALLBACK,
    clientData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn RegisterOutputCallbackInteractionContext2(
    interactionContext: *HINTERACTIONCONTEXT__,
    outputCallback: INTERACTION_CONTEXT_OUTPUT_CALLBACK2,
    clientData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn SetInteractionConfigurationInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    configurationCount: u32,
    configuration: [*]const INTERACTION_CONTEXT_CONFIGURATION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn GetInteractionConfigurationInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    configurationCount: u32,
    configuration: [*]INTERACTION_CONTEXT_CONFIGURATION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn SetPropertyInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    contextProperty: INTERACTION_CONTEXT_PROPERTY,
    value: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn GetPropertyInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    contextProperty: INTERACTION_CONTEXT_PROPERTY,
    value: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn SetInertiaParameterInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    inertiaParameter: INERTIA_PARAMETER,
    value: f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn GetInertiaParameterInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    inertiaParameter: INERTIA_PARAMETER,
    value: *f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn SetCrossSlideParametersInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    parameterCount: u32,
    crossSlideParameters: [*]CROSS_SLIDE_PARAMETER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn GetCrossSlideParameterInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    threshold: CROSS_SLIDE_THRESHOLD,
    distance: *f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn SetTapParameterInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    parameter: TAP_PARAMETER,
    value: f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn GetTapParameterInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    parameter: TAP_PARAMETER,
    value: *f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn SetHoldParameterInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    parameter: HOLD_PARAMETER,
    value: f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn GetHoldParameterInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    parameter: HOLD_PARAMETER,
    value: *f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn SetTranslationParameterInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    parameter: TRANSLATION_PARAMETER,
    value: f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn GetTranslationParameterInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    parameter: TRANSLATION_PARAMETER,
    value: *f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn SetMouseWheelParameterInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    parameter: MOUSE_WHEEL_PARAMETER,
    value: f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn GetMouseWheelParameterInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    parameter: MOUSE_WHEEL_PARAMETER,
    value: *f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn ResetInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn GetStateInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    pointerInfo: ?*const POINTER_INFO,
    state: *INTERACTION_STATE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn AddPointerInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    pointerId: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn RemovePointerInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    pointerId: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn ProcessPointerFramesInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    entriesCount: u32,
    pointerCount: u32,
    pointerInfo: *const POINTER_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn BufferPointerPacketsInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    entriesCount: u32,
    pointerInfo: [*]const POINTER_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn ProcessBufferedPacketsInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn ProcessInertiaInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn StopInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "NInput" fn SetPivotInteractionContext(
    interactionContext: *HINTERACTIONCONTEXT__,
    x: f32,
    y: f32,
    radius: f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (3)
//--------------------------------------------------------------------------------
const POINTER_INFO = @import("pointer_input.zig").POINTER_INFO;
const POINTER_INPUT_TYPE = @import("menus_and_resources.zig").POINTER_INPUT_TYPE;
const HRESULT = @import("com.zig").HRESULT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = INTERACTION_CONTEXT_OUTPUT_CALLBACK;
    _ = INTERACTION_CONTEXT_OUTPUT_CALLBACK2;

    const constant_export_count = 0;
    const type_export_count = 25;
    const enum_value_export_count = 90;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 30;
    const unicode_alias_count = 0;
    const import_count = 3;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (102)
//--------------------------------------------------------------------------------
pub const ID_PARAMETER_PAIR = extern struct {
    fIsVariable: BOOL,
    cbIdSize: u16,
};

pub const ID_PARAMETERS = extern struct {
    dwSize: u32,
    replicaId: ID_PARAMETER_PAIR,
    itemId: ID_PARAMETER_PAIR,
    changeUnitId: ID_PARAMETER_PAIR,
};

pub const SYNC_SESSION_STATISTICS = extern struct {
    dwChangesApplied: u32,
    dwChangesFailed: u32,
};

pub const SYNC_VERSION = extern struct {
    dwLastUpdatingReplicaKey: u32,
    ullTickCount: u64,
};

pub const SYNC_RANGE = extern struct {
    pbClosedLowerBound: *u8,
    pbClosedUpperBound: *u8,
};

pub const SYNC_TIME = extern struct {
    dwDate: u32,
    dwTime: u32,
};

pub const SYNC_FILTER_CHANGE = extern struct {
    fMoveIn: BOOL,
    moveVersion: SYNC_VERSION,
};

pub const SYNC_PROVIDER_ROLE = extern enum(i32) {
    SPR_SOURCE = 0,
    SPR_DESTINATION = 1,
};
pub const SPR_SOURCE = SYNC_PROVIDER_ROLE.SPR_SOURCE;
pub const SPR_DESTINATION = SYNC_PROVIDER_ROLE.SPR_DESTINATION;

pub const CONFLICT_RESOLUTION_POLICY = extern enum(i32) {
    CRP_NONE = 0,
    CRP_DESTINATION_PROVIDER_WINS = 1,
    CRP_SOURCE_PROVIDER_WINS = 2,
    CRP_LAST = 3,
};
pub const CRP_NONE = CONFLICT_RESOLUTION_POLICY.CRP_NONE;
pub const CRP_DESTINATION_PROVIDER_WINS = CONFLICT_RESOLUTION_POLICY.CRP_DESTINATION_PROVIDER_WINS;
pub const CRP_SOURCE_PROVIDER_WINS = CONFLICT_RESOLUTION_POLICY.CRP_SOURCE_PROVIDER_WINS;
pub const CRP_LAST = CONFLICT_RESOLUTION_POLICY.CRP_LAST;

pub const SYNC_PROGRESS_STAGE = extern enum(i32) {
    SPS_CHANGE_DETECTION = 0,
    SPS_CHANGE_ENUMERATION = 1,
    SPS_CHANGE_APPLICATION = 2,
};
pub const SPS_CHANGE_DETECTION = SYNC_PROGRESS_STAGE.SPS_CHANGE_DETECTION;
pub const SPS_CHANGE_ENUMERATION = SYNC_PROGRESS_STAGE.SPS_CHANGE_ENUMERATION;
pub const SPS_CHANGE_APPLICATION = SYNC_PROGRESS_STAGE.SPS_CHANGE_APPLICATION;

pub const SYNC_FULL_ENUMERATION_ACTION = extern enum(i32) {
    SFEA_FULL_ENUMERATION = 0,
    SFEA_PARTIAL_SYNC = 1,
    SFEA_ABORT = 2,
};
pub const SFEA_FULL_ENUMERATION = SYNC_FULL_ENUMERATION_ACTION.SFEA_FULL_ENUMERATION;
pub const SFEA_PARTIAL_SYNC = SYNC_FULL_ENUMERATION_ACTION.SFEA_PARTIAL_SYNC;
pub const SFEA_ABORT = SYNC_FULL_ENUMERATION_ACTION.SFEA_ABORT;

pub const SYNC_RESOLVE_ACTION = extern enum(i32) {
    SRA_DEFER = 0,
    SRA_ACCEPT_DESTINATION_PROVIDER = 1,
    SRA_ACCEPT_SOURCE_PROVIDER = 2,
    SRA_MERGE = 3,
    SRA_TRANSFER_AND_DEFER = 4,
    SRA_LAST = 5,
};
pub const SRA_DEFER = SYNC_RESOLVE_ACTION.SRA_DEFER;
pub const SRA_ACCEPT_DESTINATION_PROVIDER = SYNC_RESOLVE_ACTION.SRA_ACCEPT_DESTINATION_PROVIDER;
pub const SRA_ACCEPT_SOURCE_PROVIDER = SYNC_RESOLVE_ACTION.SRA_ACCEPT_SOURCE_PROVIDER;
pub const SRA_MERGE = SYNC_RESOLVE_ACTION.SRA_MERGE;
pub const SRA_TRANSFER_AND_DEFER = SYNC_RESOLVE_ACTION.SRA_TRANSFER_AND_DEFER;
pub const SRA_LAST = SYNC_RESOLVE_ACTION.SRA_LAST;

pub const SYNC_STATISTICS = extern enum(i32) {
    RANGE_COUNT = 0,
};
pub const SYNC_STATISTICS_RANGE_COUNT = SYNC_STATISTICS.RANGE_COUNT;

pub const SYNC_SERIALIZATION_VERSION = extern enum(i32) {
    V1 = 1,
    V2 = 4,
    V3 = 5,
};
pub const SYNC_SERIALIZATION_VERSION_V1 = SYNC_SERIALIZATION_VERSION.V1;
pub const SYNC_SERIALIZATION_VERSION_V2 = SYNC_SERIALIZATION_VERSION.V2;
pub const SYNC_SERIALIZATION_VERSION_V3 = SYNC_SERIALIZATION_VERSION.V3;

pub const FILTERING_TYPE = extern enum(i32) {
    FT_CURRENT_ITEMS_ONLY = 0,
    FT_CURRENT_ITEMS_AND_VERSIONS_FOR_MOVED_OUT_ITEMS = 1,
};
pub const FT_CURRENT_ITEMS_ONLY = FILTERING_TYPE.FT_CURRENT_ITEMS_ONLY;
pub const FT_CURRENT_ITEMS_AND_VERSIONS_FOR_MOVED_OUT_ITEMS = FILTERING_TYPE.FT_CURRENT_ITEMS_AND_VERSIONS_FOR_MOVED_OUT_ITEMS;

pub const __MIDL___MIDL_itf_winsync_0000_0000_0009 = extern enum(i32) {
    SCRA_DEFER = 0,
    SCRA_ACCEPT_DESTINATION_PROVIDER = 1,
    SCRA_ACCEPT_SOURCE_PROVIDER = 2,
    SCRA_TRANSFER_AND_DEFER = 3,
    SCRA_MERGE = 4,
    SCRA_RENAME_SOURCE = 5,
    SCRA_RENAME_DESTINATION = 6,
};
pub const SCRA_DEFER = __MIDL___MIDL_itf_winsync_0000_0000_0009.SCRA_DEFER;
pub const SCRA_ACCEPT_DESTINATION_PROVIDER = __MIDL___MIDL_itf_winsync_0000_0000_0009.SCRA_ACCEPT_DESTINATION_PROVIDER;
pub const SCRA_ACCEPT_SOURCE_PROVIDER = __MIDL___MIDL_itf_winsync_0000_0000_0009.SCRA_ACCEPT_SOURCE_PROVIDER;
pub const SCRA_TRANSFER_AND_DEFER = __MIDL___MIDL_itf_winsync_0000_0000_0009.SCRA_TRANSFER_AND_DEFER;
pub const SCRA_MERGE = __MIDL___MIDL_itf_winsync_0000_0000_0009.SCRA_MERGE;
pub const SCRA_RENAME_SOURCE = __MIDL___MIDL_itf_winsync_0000_0000_0009.SCRA_RENAME_SOURCE;
pub const SCRA_RENAME_DESTINATION = __MIDL___MIDL_itf_winsync_0000_0000_0009.SCRA_RENAME_DESTINATION;

pub const __MIDL___MIDL_itf_winsync_0000_0000_0010 = extern enum(i32) {
    CCR_OTHER = 0,
    CCR_COLLISION = 1,
    CCR_NOPARENT = 2,
    CCR_IDENTITY = 3,
};
pub const CCR_OTHER = __MIDL___MIDL_itf_winsync_0000_0000_0010.CCR_OTHER;
pub const CCR_COLLISION = __MIDL___MIDL_itf_winsync_0000_0000_0010.CCR_COLLISION;
pub const CCR_NOPARENT = __MIDL___MIDL_itf_winsync_0000_0000_0010.CCR_NOPARENT;
pub const CCR_IDENTITY = __MIDL___MIDL_itf_winsync_0000_0000_0010.CCR_IDENTITY;

pub const KNOWLEDGE_COOKIE_COMPARISON_RESULT = extern enum(i32) {
    KCCR_COOKIE_KNOWLEDGE_EQUAL = 0,
    KCCR_COOKIE_KNOWLEDGE_CONTAINED = 1,
    KCCR_COOKIE_KNOWLEDGE_CONTAINS = 2,
    KCCR_COOKIE_KNOWLEDGE_NOT_COMPARABLE = 3,
};
pub const KCCR_COOKIE_KNOWLEDGE_EQUAL = KNOWLEDGE_COOKIE_COMPARISON_RESULT.KCCR_COOKIE_KNOWLEDGE_EQUAL;
pub const KCCR_COOKIE_KNOWLEDGE_CONTAINED = KNOWLEDGE_COOKIE_COMPARISON_RESULT.KCCR_COOKIE_KNOWLEDGE_CONTAINED;
pub const KCCR_COOKIE_KNOWLEDGE_CONTAINS = KNOWLEDGE_COOKIE_COMPARISON_RESULT.KCCR_COOKIE_KNOWLEDGE_CONTAINS;
pub const KCCR_COOKIE_KNOWLEDGE_NOT_COMPARABLE = KNOWLEDGE_COOKIE_COMPARISON_RESULT.KCCR_COOKIE_KNOWLEDGE_NOT_COMPARABLE;

const IID_IClockVectorElement_Value = @import("../zig.zig").Guid.initString("E71C4250-ADF8-4A07-8FAE-5669596909C1");
pub const IID_IClockVectorElement = &IID_IClockVectorElement_Value;
pub const IClockVectorElement = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetReplicaKey: fn(
            self: *const IClockVectorElement,
            pdwReplicaKey: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTickCount: fn(
            self: *const IClockVectorElement,
            pullTickCount: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IClockVectorElement_GetReplicaKey(self: *const T, pdwReplicaKey: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IClockVectorElement.VTable, self.vtable).GetReplicaKey(@ptrCast(*const IClockVectorElement, self), pdwReplicaKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IClockVectorElement_GetTickCount(self: *const T, pullTickCount: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IClockVectorElement.VTable, self.vtable).GetTickCount(@ptrCast(*const IClockVectorElement, self), pullTickCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFeedClockVectorElement_Value = @import("../zig.zig").Guid.initString("A40B46D2-E97B-4156-B6DA-991F501B0F05");
pub const IID_IFeedClockVectorElement = &IID_IFeedClockVectorElement_Value;
pub const IFeedClockVectorElement = extern struct {
    pub const VTable = extern struct {
        base: IClockVectorElement.VTable,
        GetSyncTime: fn(
            self: *const IFeedClockVectorElement,
            pSyncTime: *SYNC_TIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: fn(
            self: *const IFeedClockVectorElement,
            pbFlags: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IClockVectorElement.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFeedClockVectorElement_GetSyncTime(self: *const T, pSyncTime: *SYNC_TIME) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFeedClockVectorElement.VTable, self.vtable).GetSyncTime(@ptrCast(*const IFeedClockVectorElement, self), pSyncTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFeedClockVectorElement_GetFlags(self: *const T, pbFlags: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFeedClockVectorElement.VTable, self.vtable).GetFlags(@ptrCast(*const IFeedClockVectorElement, self), pbFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IClockVector_Value = @import("../zig.zig").Guid.initString("14B2274A-8698-4CC6-9333-F89BD1D47BC4");
pub const IID_IClockVector = &IID_IClockVector_Value;
pub const IClockVector = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetClockVectorElements: fn(
            self: *const IClockVector,
            riid: *const Guid,
            ppiEnumClockVector: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClockVectorElementCount: fn(
            self: *const IClockVector,
            pdwCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IClockVector_GetClockVectorElements(self: *const T, riid: *const Guid, ppiEnumClockVector: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IClockVector.VTable, self.vtable).GetClockVectorElements(@ptrCast(*const IClockVector, self), riid, ppiEnumClockVector);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IClockVector_GetClockVectorElementCount(self: *const T, pdwCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IClockVector.VTable, self.vtable).GetClockVectorElementCount(@ptrCast(*const IClockVector, self), pdwCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFeedClockVector_Value = @import("../zig.zig").Guid.initString("8D1D98D1-9FB8-4EC9-A553-54DD924E0F67");
pub const IID_IFeedClockVector = &IID_IFeedClockVector_Value;
pub const IFeedClockVector = extern struct {
    pub const VTable = extern struct {
        base: IClockVector.VTable,
        GetUpdateCount: fn(
            self: *const IFeedClockVector,
            pdwUpdateCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsNoConflictsSpecified: fn(
            self: *const IFeedClockVector,
            pfIsNoConflictsSpecified: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IClockVector.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFeedClockVector_GetUpdateCount(self: *const T, pdwUpdateCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFeedClockVector.VTable, self.vtable).GetUpdateCount(@ptrCast(*const IFeedClockVector, self), pdwUpdateCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFeedClockVector_IsNoConflictsSpecified(self: *const T, pfIsNoConflictsSpecified: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFeedClockVector.VTable, self.vtable).IsNoConflictsSpecified(@ptrCast(*const IFeedClockVector, self), pfIsNoConflictsSpecified);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumClockVector_Value = @import("../zig.zig").Guid.initString("525844DB-2837-4799-9E80-81A66E02220C");
pub const IID_IEnumClockVector = &IID_IEnumClockVector_Value;
pub const IEnumClockVector = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumClockVector,
            cClockVectorElements: u32,
            ppiClockVectorElements: **IClockVectorElement,
            pcFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumClockVector,
            cSyncVersions: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumClockVector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumClockVector,
            ppiEnum: **IEnumClockVector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumClockVector_Next(self: *const T, cClockVectorElements: u32, ppiClockVectorElements: **IClockVectorElement, pcFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumClockVector.VTable, self.vtable).Next(@ptrCast(*const IEnumClockVector, self), cClockVectorElements, ppiClockVectorElements, pcFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumClockVector_Skip(self: *const T, cSyncVersions: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumClockVector.VTable, self.vtable).Skip(@ptrCast(*const IEnumClockVector, self), cSyncVersions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumClockVector_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumClockVector.VTable, self.vtable).Reset(@ptrCast(*const IEnumClockVector, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumClockVector_Clone(self: *const T, ppiEnum: **IEnumClockVector) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumClockVector.VTable, self.vtable).Clone(@ptrCast(*const IEnumClockVector, self), ppiEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumFeedClockVector_Value = @import("../zig.zig").Guid.initString("550F763D-146A-48F6-ABEB-6C88C7F70514");
pub const IID_IEnumFeedClockVector = &IID_IEnumFeedClockVector_Value;
pub const IEnumFeedClockVector = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumFeedClockVector,
            cClockVectorElements: u32,
            ppiClockVectorElements: **IFeedClockVectorElement,
            pcFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumFeedClockVector,
            cSyncVersions: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumFeedClockVector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumFeedClockVector,
            ppiEnum: **IEnumFeedClockVector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumFeedClockVector_Next(self: *const T, cClockVectorElements: u32, ppiClockVectorElements: **IFeedClockVectorElement, pcFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumFeedClockVector.VTable, self.vtable).Next(@ptrCast(*const IEnumFeedClockVector, self), cClockVectorElements, ppiClockVectorElements, pcFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumFeedClockVector_Skip(self: *const T, cSyncVersions: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumFeedClockVector.VTable, self.vtable).Skip(@ptrCast(*const IEnumFeedClockVector, self), cSyncVersions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumFeedClockVector_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumFeedClockVector.VTable, self.vtable).Reset(@ptrCast(*const IEnumFeedClockVector, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumFeedClockVector_Clone(self: *const T, ppiEnum: **IEnumFeedClockVector) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumFeedClockVector.VTable, self.vtable).Clone(@ptrCast(*const IEnumFeedClockVector, self), ppiEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICoreFragment_Value = @import("../zig.zig").Guid.initString("613B2AB5-B304-47D9-9C31-CE6C54401A15");
pub const IID_ICoreFragment = &IID_ICoreFragment_Value;
pub const ICoreFragment = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NextColumn: fn(
            self: *const ICoreFragment,
            pChangeUnitId: *u8,
            pChangeUnitIdSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NextRange: fn(
            self: *const ICoreFragment,
            pItemId: *u8,
            pItemIdSize: *u32,
            piClockVector: **IClockVector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const ICoreFragment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnCount: fn(
            self: *const ICoreFragment,
            pColumnCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRangeCount: fn(
            self: *const ICoreFragment,
            pRangeCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICoreFragment_NextColumn(self: *const T, pChangeUnitId: *u8, pChangeUnitIdSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICoreFragment.VTable, self.vtable).NextColumn(@ptrCast(*const ICoreFragment, self), pChangeUnitId, pChangeUnitIdSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICoreFragment_NextRange(self: *const T, pItemId: *u8, pItemIdSize: *u32, piClockVector: **IClockVector) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICoreFragment.VTable, self.vtable).NextRange(@ptrCast(*const ICoreFragment, self), pItemId, pItemIdSize, piClockVector);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICoreFragment_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICoreFragment.VTable, self.vtable).Reset(@ptrCast(*const ICoreFragment, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICoreFragment_GetColumnCount(self: *const T, pColumnCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICoreFragment.VTable, self.vtable).GetColumnCount(@ptrCast(*const ICoreFragment, self), pColumnCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICoreFragment_GetRangeCount(self: *const T, pRangeCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICoreFragment.VTable, self.vtable).GetRangeCount(@ptrCast(*const ICoreFragment, self), pRangeCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICoreFragmentInspector_Value = @import("../zig.zig").Guid.initString("F7FCC5FD-AE26-4679-BA16-96AAC583C134");
pub const IID_ICoreFragmentInspector = &IID_ICoreFragmentInspector_Value;
pub const ICoreFragmentInspector = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NextCoreFragments: fn(
            self: *const ICoreFragmentInspector,
            requestedCount: u32,
            ppiCoreFragments: **ICoreFragment,
            pFetchedCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const ICoreFragmentInspector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICoreFragmentInspector_NextCoreFragments(self: *const T, requestedCount: u32, ppiCoreFragments: **ICoreFragment, pFetchedCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICoreFragmentInspector.VTable, self.vtable).NextCoreFragments(@ptrCast(*const ICoreFragmentInspector, self), requestedCount, ppiCoreFragments, pFetchedCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICoreFragmentInspector_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICoreFragmentInspector.VTable, self.vtable).Reset(@ptrCast(*const ICoreFragmentInspector, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRangeException_Value = @import("../zig.zig").Guid.initString("75AE8777-6848-49F7-956C-A3A92F5096E8");
pub const IID_IRangeException = &IID_IRangeException_Value;
pub const IRangeException = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetClosedRangeStart: fn(
            self: *const IRangeException,
            pbClosedRangeStart: *u8,
            pcbIdSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClosedRangeEnd: fn(
            self: *const IRangeException,
            pbClosedRangeEnd: *u8,
            pcbIdSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClockVector: fn(
            self: *const IRangeException,
            riid: *const Guid,
            ppUnk: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRangeException_GetClosedRangeStart(self: *const T, pbClosedRangeStart: *u8, pcbIdSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRangeException.VTable, self.vtable).GetClosedRangeStart(@ptrCast(*const IRangeException, self), pbClosedRangeStart, pcbIdSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRangeException_GetClosedRangeEnd(self: *const T, pbClosedRangeEnd: *u8, pcbIdSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRangeException.VTable, self.vtable).GetClosedRangeEnd(@ptrCast(*const IRangeException, self), pbClosedRangeEnd, pcbIdSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRangeException_GetClockVector(self: *const T, riid: *const Guid, ppUnk: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRangeException.VTable, self.vtable).GetClockVector(@ptrCast(*const IRangeException, self), riid, ppUnk);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumRangeExceptions_Value = @import("../zig.zig").Guid.initString("0944439F-DDB1-4176-B703-046FF22A2386");
pub const IID_IEnumRangeExceptions = &IID_IEnumRangeExceptions_Value;
pub const IEnumRangeExceptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumRangeExceptions,
            cExceptions: u32,
            ppRangeException: **IRangeException,
            pcFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumRangeExceptions,
            cExceptions: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumRangeExceptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumRangeExceptions,
            ppEnum: **IEnumRangeExceptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumRangeExceptions_Next(self: *const T, cExceptions: u32, ppRangeException: **IRangeException, pcFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumRangeExceptions.VTable, self.vtable).Next(@ptrCast(*const IEnumRangeExceptions, self), cExceptions, ppRangeException, pcFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumRangeExceptions_Skip(self: *const T, cExceptions: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumRangeExceptions.VTable, self.vtable).Skip(@ptrCast(*const IEnumRangeExceptions, self), cExceptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumRangeExceptions_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumRangeExceptions.VTable, self.vtable).Reset(@ptrCast(*const IEnumRangeExceptions, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumRangeExceptions_Clone(self: *const T, ppEnum: **IEnumRangeExceptions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumRangeExceptions.VTable, self.vtable).Clone(@ptrCast(*const IEnumRangeExceptions, self), ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISingleItemException_Value = @import("../zig.zig").Guid.initString("892FB9B0-7C55-4A18-9316-FDF449569B64");
pub const IID_ISingleItemException = &IID_ISingleItemException_Value;
pub const ISingleItemException = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemId: fn(
            self: *const ISingleItemException,
            pbItemId: *u8,
            pcbIdSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClockVector: fn(
            self: *const ISingleItemException,
            riid: *const Guid,
            ppUnk: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISingleItemException_GetItemId(self: *const T, pbItemId: *u8, pcbIdSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISingleItemException.VTable, self.vtable).GetItemId(@ptrCast(*const ISingleItemException, self), pbItemId, pcbIdSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISingleItemException_GetClockVector(self: *const T, riid: *const Guid, ppUnk: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISingleItemException.VTable, self.vtable).GetClockVector(@ptrCast(*const ISingleItemException, self), riid, ppUnk);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumSingleItemExceptions_Value = @import("../zig.zig").Guid.initString("E563381C-1B4D-4C66-9796-C86FACCDCD40");
pub const IID_IEnumSingleItemExceptions = &IID_IEnumSingleItemExceptions_Value;
pub const IEnumSingleItemExceptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumSingleItemExceptions,
            cExceptions: u32,
            ppSingleItemException: **ISingleItemException,
            pcFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumSingleItemExceptions,
            cExceptions: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumSingleItemExceptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumSingleItemExceptions,
            ppEnum: **IEnumSingleItemExceptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSingleItemExceptions_Next(self: *const T, cExceptions: u32, ppSingleItemException: **ISingleItemException, pcFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSingleItemExceptions.VTable, self.vtable).Next(@ptrCast(*const IEnumSingleItemExceptions, self), cExceptions, ppSingleItemException, pcFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSingleItemExceptions_Skip(self: *const T, cExceptions: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSingleItemExceptions.VTable, self.vtable).Skip(@ptrCast(*const IEnumSingleItemExceptions, self), cExceptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSingleItemExceptions_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSingleItemExceptions.VTable, self.vtable).Reset(@ptrCast(*const IEnumSingleItemExceptions, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSingleItemExceptions_Clone(self: *const T, ppEnum: **IEnumSingleItemExceptions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSingleItemExceptions.VTable, self.vtable).Clone(@ptrCast(*const IEnumSingleItemExceptions, self), ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IChangeUnitException_Value = @import("../zig.zig").Guid.initString("0CD7EE7C-FEC0-4021-99EE-F0E5348F2A5F");
pub const IID_IChangeUnitException = &IID_IChangeUnitException_Value;
pub const IChangeUnitException = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemId: fn(
            self: *const IChangeUnitException,
            pbItemId: *u8,
            pcbIdSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeUnitId: fn(
            self: *const IChangeUnitException,
            pbChangeUnitId: *u8,
            pcbIdSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClockVector: fn(
            self: *const IChangeUnitException,
            riid: *const Guid,
            ppUnk: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IChangeUnitException_GetItemId(self: *const T, pbItemId: *u8, pcbIdSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IChangeUnitException.VTable, self.vtable).GetItemId(@ptrCast(*const IChangeUnitException, self), pbItemId, pcbIdSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IChangeUnitException_GetChangeUnitId(self: *const T, pbChangeUnitId: *u8, pcbIdSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IChangeUnitException.VTable, self.vtable).GetChangeUnitId(@ptrCast(*const IChangeUnitException, self), pbChangeUnitId, pcbIdSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IChangeUnitException_GetClockVector(self: *const T, riid: *const Guid, ppUnk: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IChangeUnitException.VTable, self.vtable).GetClockVector(@ptrCast(*const IChangeUnitException, self), riid, ppUnk);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumChangeUnitExceptions_Value = @import("../zig.zig").Guid.initString("3074E802-9319-4420-BE21-1022E2E21DA8");
pub const IID_IEnumChangeUnitExceptions = &IID_IEnumChangeUnitExceptions_Value;
pub const IEnumChangeUnitExceptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumChangeUnitExceptions,
            cExceptions: u32,
            ppChangeUnitException: **IChangeUnitException,
            pcFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumChangeUnitExceptions,
            cExceptions: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumChangeUnitExceptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumChangeUnitExceptions,
            ppEnum: **IEnumChangeUnitExceptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumChangeUnitExceptions_Next(self: *const T, cExceptions: u32, ppChangeUnitException: **IChangeUnitException, pcFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumChangeUnitExceptions.VTable, self.vtable).Next(@ptrCast(*const IEnumChangeUnitExceptions, self), cExceptions, ppChangeUnitException, pcFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumChangeUnitExceptions_Skip(self: *const T, cExceptions: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumChangeUnitExceptions.VTable, self.vtable).Skip(@ptrCast(*const IEnumChangeUnitExceptions, self), cExceptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumChangeUnitExceptions_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumChangeUnitExceptions.VTable, self.vtable).Reset(@ptrCast(*const IEnumChangeUnitExceptions, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumChangeUnitExceptions_Clone(self: *const T, ppEnum: **IEnumChangeUnitExceptions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumChangeUnitExceptions.VTable, self.vtable).Clone(@ptrCast(*const IEnumChangeUnitExceptions, self), ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IReplicaKeyMap_Value = @import("../zig.zig").Guid.initString("2209F4FC-FD10-4FF0-84A8-F0A1982E440E");
pub const IID_IReplicaKeyMap = &IID_IReplicaKeyMap_Value;
pub const IReplicaKeyMap = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LookupReplicaKey: fn(
            self: *const IReplicaKeyMap,
            pbReplicaId: *const u8,
            pdwReplicaKey: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LookupReplicaId: fn(
            self: *const IReplicaKeyMap,
            dwReplicaKey: u32,
            pbReplicaId: *u8,
            pcbIdSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Serialize: fn(
            self: *const IReplicaKeyMap,
            pbReplicaKeyMap: *u8,
            pcbReplicaKeyMap: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IReplicaKeyMap_LookupReplicaKey(self: *const T, pbReplicaId: *const u8, pdwReplicaKey: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IReplicaKeyMap.VTable, self.vtable).LookupReplicaKey(@ptrCast(*const IReplicaKeyMap, self), pbReplicaId, pdwReplicaKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IReplicaKeyMap_LookupReplicaId(self: *const T, dwReplicaKey: u32, pbReplicaId: *u8, pcbIdSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IReplicaKeyMap.VTable, self.vtable).LookupReplicaId(@ptrCast(*const IReplicaKeyMap, self), dwReplicaKey, pbReplicaId, pcbIdSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IReplicaKeyMap_Serialize(self: *const T, pbReplicaKeyMap: *u8, pcbReplicaKeyMap: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IReplicaKeyMap.VTable, self.vtable).Serialize(@ptrCast(*const IReplicaKeyMap, self), pbReplicaKeyMap, pcbReplicaKeyMap);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IConstructReplicaKeyMap_Value = @import("../zig.zig").Guid.initString("DED10970-EC85-4115-B52C-4405845642A5");
pub const IID_IConstructReplicaKeyMap = &IID_IConstructReplicaKeyMap_Value;
pub const IConstructReplicaKeyMap = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindOrAddReplica: fn(
            self: *const IConstructReplicaKeyMap,
            pbReplicaId: *const u8,
            pdwReplicaKey: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConstructReplicaKeyMap_FindOrAddReplica(self: *const T, pbReplicaId: *const u8, pdwReplicaKey: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConstructReplicaKeyMap.VTable, self.vtable).FindOrAddReplica(@ptrCast(*const IConstructReplicaKeyMap, self), pbReplicaId, pdwReplicaKey);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncKnowledge_Value = @import("../zig.zig").Guid.initString("615BBB53-C945-4203-BF4B-2CB65919A0AA");
pub const IID_ISyncKnowledge = &IID_ISyncKnowledge_Value;
pub const ISyncKnowledge = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOwnerReplicaId: fn(
            self: *const ISyncKnowledge,
            pbReplicaId: *u8,
            pcbIdSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Serialize: fn(
            self: *const ISyncKnowledge,
            fSerializeReplicaKeyMap: BOOL,
            pbKnowledge: *u8,
            pcbKnowledge: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLocalTickCount: fn(
            self: *const ISyncKnowledge,
            ullTickCount: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ContainsChange: fn(
            self: *const ISyncKnowledge,
            pbVersionOwnerReplicaId: *const u8,
            pgidItemId: *const u8,
            pSyncVersion: *const SYNC_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ContainsChangeUnit: fn(
            self: *const ISyncKnowledge,
            pbVersionOwnerReplicaId: *const u8,
            pbItemId: *const u8,
            pbChangeUnitId: *const u8,
            pSyncVersion: *const SYNC_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScopeVector: fn(
            self: *const ISyncKnowledge,
            riid: *const Guid,
            ppUnk: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReplicaKeyMap: fn(
            self: *const ISyncKnowledge,
            ppReplicaKeyMap: **IReplicaKeyMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const ISyncKnowledge,
            ppClonedKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertVersion: fn(
            self: *const ISyncKnowledge,
            pKnowledgeIn: *ISyncKnowledge,
            pbCurrentOwnerId: *const u8,
            pVersionIn: *const SYNC_VERSION,
            pbNewOwnerId: *u8,
            pcbIdSize: *u32,
            pVersionOut: *SYNC_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MapRemoteToLocal: fn(
            self: *const ISyncKnowledge,
            pRemoteKnowledge: *ISyncKnowledge,
            ppMappedKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Union: fn(
            self: *const ISyncKnowledge,
            pKnowledge: *ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProjectOntoItem: fn(
            self: *const ISyncKnowledge,
            pbItemId: *const u8,
            ppKnowledgeOut: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProjectOntoChangeUnit: fn(
            self: *const ISyncKnowledge,
            pbItemId: *const u8,
            pbChangeUnitId: *const u8,
            ppKnowledgeOut: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProjectOntoRange: fn(
            self: *const ISyncKnowledge,
            psrngSyncRange: *const SYNC_RANGE,
            ppKnowledgeOut: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExcludeItem: fn(
            self: *const ISyncKnowledge,
            pbItemId: *const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExcludeChangeUnit: fn(
            self: *const ISyncKnowledge,
            pbItemId: *const u8,
            pbChangeUnitId: *const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ContainsKnowledge: fn(
            self: *const ISyncKnowledge,
            pKnowledge: *ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindMinTickCountForReplica: fn(
            self: *const ISyncKnowledge,
            pbReplicaId: *const u8,
            pullReplicaTickCount: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRangeExceptions: fn(
            self: *const ISyncKnowledge,
            riid: *const Guid,
            ppUnk: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSingleItemExceptions: fn(
            self: *const ISyncKnowledge,
            riid: *const Guid,
            ppUnk: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeUnitExceptions: fn(
            self: *const ISyncKnowledge,
            riid: *const Guid,
            ppUnk: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindClockVectorForItem: fn(
            self: *const ISyncKnowledge,
            pbItemId: *const u8,
            riid: *const Guid,
            ppUnk: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindClockVectorForChangeUnit: fn(
            self: *const ISyncKnowledge,
            pbItemId: *const u8,
            pbChangeUnitId: *const u8,
            riid: *const Guid,
            ppUnk: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVersion: fn(
            self: *const ISyncKnowledge,
            pdwVersion: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_GetOwnerReplicaId(self: *const T, pbReplicaId: *u8, pcbIdSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).GetOwnerReplicaId(@ptrCast(*const ISyncKnowledge, self), pbReplicaId, pcbIdSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_Serialize(self: *const T, fSerializeReplicaKeyMap: BOOL, pbKnowledge: *u8, pcbKnowledge: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).Serialize(@ptrCast(*const ISyncKnowledge, self), fSerializeReplicaKeyMap, pbKnowledge, pcbKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_SetLocalTickCount(self: *const T, ullTickCount: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).SetLocalTickCount(@ptrCast(*const ISyncKnowledge, self), ullTickCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_ContainsChange(self: *const T, pbVersionOwnerReplicaId: *const u8, pgidItemId: *const u8, pSyncVersion: *const SYNC_VERSION) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).ContainsChange(@ptrCast(*const ISyncKnowledge, self), pbVersionOwnerReplicaId, pgidItemId, pSyncVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_ContainsChangeUnit(self: *const T, pbVersionOwnerReplicaId: *const u8, pbItemId: *const u8, pbChangeUnitId: *const u8, pSyncVersion: *const SYNC_VERSION) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).ContainsChangeUnit(@ptrCast(*const ISyncKnowledge, self), pbVersionOwnerReplicaId, pbItemId, pbChangeUnitId, pSyncVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_GetScopeVector(self: *const T, riid: *const Guid, ppUnk: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).GetScopeVector(@ptrCast(*const ISyncKnowledge, self), riid, ppUnk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_GetReplicaKeyMap(self: *const T, ppReplicaKeyMap: **IReplicaKeyMap) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).GetReplicaKeyMap(@ptrCast(*const ISyncKnowledge, self), ppReplicaKeyMap);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_Clone(self: *const T, ppClonedKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).Clone(@ptrCast(*const ISyncKnowledge, self), ppClonedKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_ConvertVersion(self: *const T, pKnowledgeIn: *ISyncKnowledge, pbCurrentOwnerId: *const u8, pVersionIn: *const SYNC_VERSION, pbNewOwnerId: *u8, pcbIdSize: *u32, pVersionOut: *SYNC_VERSION) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).ConvertVersion(@ptrCast(*const ISyncKnowledge, self), pKnowledgeIn, pbCurrentOwnerId, pVersionIn, pbNewOwnerId, pcbIdSize, pVersionOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_MapRemoteToLocal(self: *const T, pRemoteKnowledge: *ISyncKnowledge, ppMappedKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).MapRemoteToLocal(@ptrCast(*const ISyncKnowledge, self), pRemoteKnowledge, ppMappedKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_Union(self: *const T, pKnowledge: *ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).Union(@ptrCast(*const ISyncKnowledge, self), pKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_ProjectOntoItem(self: *const T, pbItemId: *const u8, ppKnowledgeOut: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).ProjectOntoItem(@ptrCast(*const ISyncKnowledge, self), pbItemId, ppKnowledgeOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_ProjectOntoChangeUnit(self: *const T, pbItemId: *const u8, pbChangeUnitId: *const u8, ppKnowledgeOut: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).ProjectOntoChangeUnit(@ptrCast(*const ISyncKnowledge, self), pbItemId, pbChangeUnitId, ppKnowledgeOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_ProjectOntoRange(self: *const T, psrngSyncRange: *const SYNC_RANGE, ppKnowledgeOut: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).ProjectOntoRange(@ptrCast(*const ISyncKnowledge, self), psrngSyncRange, ppKnowledgeOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_ExcludeItem(self: *const T, pbItemId: *const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).ExcludeItem(@ptrCast(*const ISyncKnowledge, self), pbItemId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_ExcludeChangeUnit(self: *const T, pbItemId: *const u8, pbChangeUnitId: *const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).ExcludeChangeUnit(@ptrCast(*const ISyncKnowledge, self), pbItemId, pbChangeUnitId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_ContainsKnowledge(self: *const T, pKnowledge: *ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).ContainsKnowledge(@ptrCast(*const ISyncKnowledge, self), pKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_FindMinTickCountForReplica(self: *const T, pbReplicaId: *const u8, pullReplicaTickCount: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).FindMinTickCountForReplica(@ptrCast(*const ISyncKnowledge, self), pbReplicaId, pullReplicaTickCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_GetRangeExceptions(self: *const T, riid: *const Guid, ppUnk: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).GetRangeExceptions(@ptrCast(*const ISyncKnowledge, self), riid, ppUnk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_GetSingleItemExceptions(self: *const T, riid: *const Guid, ppUnk: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).GetSingleItemExceptions(@ptrCast(*const ISyncKnowledge, self), riid, ppUnk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_GetChangeUnitExceptions(self: *const T, riid: *const Guid, ppUnk: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).GetChangeUnitExceptions(@ptrCast(*const ISyncKnowledge, self), riid, ppUnk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_FindClockVectorForItem(self: *const T, pbItemId: *const u8, riid: *const Guid, ppUnk: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).FindClockVectorForItem(@ptrCast(*const ISyncKnowledge, self), pbItemId, riid, ppUnk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_FindClockVectorForChangeUnit(self: *const T, pbItemId: *const u8, pbChangeUnitId: *const u8, riid: *const Guid, ppUnk: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).FindClockVectorForChangeUnit(@ptrCast(*const ISyncKnowledge, self), pbItemId, pbChangeUnitId, riid, ppUnk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge_GetVersion(self: *const T, pdwVersion: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge.VTable, self.vtable).GetVersion(@ptrCast(*const ISyncKnowledge, self), pdwVersion);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IForgottenKnowledge_Value = @import("../zig.zig").Guid.initString("456E0F96-6036-452B-9F9D-BCC4B4A85DB2");
pub const IID_IForgottenKnowledge = &IID_IForgottenKnowledge_Value;
pub const IForgottenKnowledge = extern struct {
    pub const VTable = extern struct {
        base: ISyncKnowledge.VTable,
        ForgetToVersion: fn(
            self: *const IForgottenKnowledge,
            pKnowledge: *ISyncKnowledge,
            pVersion: *const SYNC_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISyncKnowledge.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IForgottenKnowledge_ForgetToVersion(self: *const T, pKnowledge: *ISyncKnowledge, pVersion: *const SYNC_VERSION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IForgottenKnowledge.VTable, self.vtable).ForgetToVersion(@ptrCast(*const IForgottenKnowledge, self), pKnowledge, pVersion);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncKnowledge2_Value = @import("../zig.zig").Guid.initString("ED0ADDC0-3B4B-46A1-9A45-45661D2114C8");
pub const IID_ISyncKnowledge2 = &IID_ISyncKnowledge2_Value;
pub const ISyncKnowledge2 = extern struct {
    pub const VTable = extern struct {
        base: ISyncKnowledge.VTable,
        GetIdParameters: fn(
            self: *const ISyncKnowledge2,
            pIdParameters: *ID_PARAMETERS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProjectOntoColumnSet: fn(
            self: *const ISyncKnowledge2,
            ppColumns: *const *const u8,
            count: u32,
            ppiKnowledgeOut: **ISyncKnowledge2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SerializeWithOptions: fn(
            self: *const ISyncKnowledge2,
            targetFormatVersion: SYNC_SERIALIZATION_VERSION,
            dwFlags: u32,
            pbBuffer: *u8,
            pdwSerializedSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLowestUncontainedId: fn(
            self: *const ISyncKnowledge2,
            piSyncKnowledge: *ISyncKnowledge2,
            pbItemId: *u8,
            pcbItemIdSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInspector: fn(
            self: *const ISyncKnowledge2,
            riid: *const Guid,
            ppiInspector: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMinimumSupportedVersion: fn(
            self: *const ISyncKnowledge2,
            pVersion: *SYNC_SERIALIZATION_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatistics: fn(
            self: *const ISyncKnowledge2,
            which: SYNC_STATISTICS,
            pValue: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ContainsKnowledgeForItem: fn(
            self: *const ISyncKnowledge2,
            pKnowledge: *ISyncKnowledge,
            pbItemId: *const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ContainsKnowledgeForChangeUnit: fn(
            self: *const ISyncKnowledge2,
            pKnowledge: *ISyncKnowledge,
            pbItemId: *const u8,
            pbChangeUnitId: *const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProjectOntoKnowledgeWithPrerequisite: fn(
            self: *const ISyncKnowledge2,
            pPrerequisiteKnowledge: *ISyncKnowledge,
            pTemplateKnowledge: *ISyncKnowledge,
            ppProjectedKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Complement: fn(
            self: *const ISyncKnowledge2,
            pSyncKnowledge: *ISyncKnowledge,
            ppComplementedKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IntersectsWithKnowledge: fn(
            self: *const ISyncKnowledge2,
            pSyncKnowledge: *ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKnowledgeCookie: fn(
            self: *const ISyncKnowledge2,
            ppKnowledgeCookie: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompareToKnowledgeCookie: fn(
            self: *const ISyncKnowledge2,
            pKnowledgeCookie: *IUnknown,
            pResult: *KNOWLEDGE_COOKIE_COMPARISON_RESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISyncKnowledge.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge2_GetIdParameters(self: *const T, pIdParameters: *ID_PARAMETERS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge2.VTable, self.vtable).GetIdParameters(@ptrCast(*const ISyncKnowledge2, self), pIdParameters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge2_ProjectOntoColumnSet(self: *const T, ppColumns: *const *const u8, count: u32, ppiKnowledgeOut: **ISyncKnowledge2) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge2.VTable, self.vtable).ProjectOntoColumnSet(@ptrCast(*const ISyncKnowledge2, self), ppColumns, count, ppiKnowledgeOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge2_SerializeWithOptions(self: *const T, targetFormatVersion: SYNC_SERIALIZATION_VERSION, dwFlags: u32, pbBuffer: *u8, pdwSerializedSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge2.VTable, self.vtable).SerializeWithOptions(@ptrCast(*const ISyncKnowledge2, self), targetFormatVersion, dwFlags, pbBuffer, pdwSerializedSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge2_GetLowestUncontainedId(self: *const T, piSyncKnowledge: *ISyncKnowledge2, pbItemId: *u8, pcbItemIdSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge2.VTable, self.vtable).GetLowestUncontainedId(@ptrCast(*const ISyncKnowledge2, self), piSyncKnowledge, pbItemId, pcbItemIdSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge2_GetInspector(self: *const T, riid: *const Guid, ppiInspector: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge2.VTable, self.vtable).GetInspector(@ptrCast(*const ISyncKnowledge2, self), riid, ppiInspector);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge2_GetMinimumSupportedVersion(self: *const T, pVersion: *SYNC_SERIALIZATION_VERSION) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge2.VTable, self.vtable).GetMinimumSupportedVersion(@ptrCast(*const ISyncKnowledge2, self), pVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge2_GetStatistics(self: *const T, which: SYNC_STATISTICS, pValue: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge2.VTable, self.vtable).GetStatistics(@ptrCast(*const ISyncKnowledge2, self), which, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge2_ContainsKnowledgeForItem(self: *const T, pKnowledge: *ISyncKnowledge, pbItemId: *const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge2.VTable, self.vtable).ContainsKnowledgeForItem(@ptrCast(*const ISyncKnowledge2, self), pKnowledge, pbItemId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge2_ContainsKnowledgeForChangeUnit(self: *const T, pKnowledge: *ISyncKnowledge, pbItemId: *const u8, pbChangeUnitId: *const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge2.VTable, self.vtable).ContainsKnowledgeForChangeUnit(@ptrCast(*const ISyncKnowledge2, self), pKnowledge, pbItemId, pbChangeUnitId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge2_ProjectOntoKnowledgeWithPrerequisite(self: *const T, pPrerequisiteKnowledge: *ISyncKnowledge, pTemplateKnowledge: *ISyncKnowledge, ppProjectedKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge2.VTable, self.vtable).ProjectOntoKnowledgeWithPrerequisite(@ptrCast(*const ISyncKnowledge2, self), pPrerequisiteKnowledge, pTemplateKnowledge, ppProjectedKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge2_Complement(self: *const T, pSyncKnowledge: *ISyncKnowledge, ppComplementedKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge2.VTable, self.vtable).Complement(@ptrCast(*const ISyncKnowledge2, self), pSyncKnowledge, ppComplementedKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge2_IntersectsWithKnowledge(self: *const T, pSyncKnowledge: *ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge2.VTable, self.vtable).IntersectsWithKnowledge(@ptrCast(*const ISyncKnowledge2, self), pSyncKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge2_GetKnowledgeCookie(self: *const T, ppKnowledgeCookie: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge2.VTable, self.vtable).GetKnowledgeCookie(@ptrCast(*const ISyncKnowledge2, self), ppKnowledgeCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncKnowledge2_CompareToKnowledgeCookie(self: *const T, pKnowledgeCookie: *IUnknown, pResult: *KNOWLEDGE_COOKIE_COMPARISON_RESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncKnowledge2.VTable, self.vtable).CompareToKnowledgeCookie(@ptrCast(*const ISyncKnowledge2, self), pKnowledgeCookie, pResult);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRecoverableErrorData_Value = @import("../zig.zig").Guid.initString("B37C4A0A-4B7D-4C2D-9711-3B00D119B1C8");
pub const IID_IRecoverableErrorData = &IID_IRecoverableErrorData_Value;
pub const IRecoverableErrorData = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IRecoverableErrorData,
            pcszItemDisplayName: [*:0]const u16,
            pcszErrorDescription: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemDisplayName: fn(
            self: *const IRecoverableErrorData,
            pszItemDisplayName: PWSTR,
            pcchItemDisplayName: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorDescription: fn(
            self: *const IRecoverableErrorData,
            pszErrorDescription: PWSTR,
            pcchErrorDescription: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRecoverableErrorData_Initialize(self: *const T, pcszItemDisplayName: [*:0]const u16, pcszErrorDescription: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRecoverableErrorData.VTable, self.vtable).Initialize(@ptrCast(*const IRecoverableErrorData, self), pcszItemDisplayName, pcszErrorDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRecoverableErrorData_GetItemDisplayName(self: *const T, pszItemDisplayName: PWSTR, pcchItemDisplayName: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRecoverableErrorData.VTable, self.vtable).GetItemDisplayName(@ptrCast(*const IRecoverableErrorData, self), pszItemDisplayName, pcchItemDisplayName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRecoverableErrorData_GetErrorDescription(self: *const T, pszErrorDescription: PWSTR, pcchErrorDescription: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRecoverableErrorData.VTable, self.vtable).GetErrorDescription(@ptrCast(*const IRecoverableErrorData, self), pszErrorDescription, pcchErrorDescription);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRecoverableError_Value = @import("../zig.zig").Guid.initString("0F5625E8-0A7B-45EE-9637-1CE13645909E");
pub const IID_IRecoverableError = &IID_IRecoverableError_Value;
pub const IRecoverableError = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStage: fn(
            self: *const IRecoverableError,
            pStage: *SYNC_PROGRESS_STAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProvider: fn(
            self: *const IRecoverableError,
            pProviderRole: *SYNC_PROVIDER_ROLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeWithRecoverableError: fn(
            self: *const IRecoverableError,
            ppChangeWithRecoverableError: **ISyncChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecoverableErrorDataForChange: fn(
            self: *const IRecoverableError,
            phrError: *HRESULT,
            ppErrorData: **IRecoverableErrorData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecoverableErrorDataForChangeUnit: fn(
            self: *const IRecoverableError,
            pChangeUnit: *ISyncChangeUnit,
            phrError: *HRESULT,
            ppErrorData: **IRecoverableErrorData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRecoverableError_GetStage(self: *const T, pStage: *SYNC_PROGRESS_STAGE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRecoverableError.VTable, self.vtable).GetStage(@ptrCast(*const IRecoverableError, self), pStage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRecoverableError_GetProvider(self: *const T, pProviderRole: *SYNC_PROVIDER_ROLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRecoverableError.VTable, self.vtable).GetProvider(@ptrCast(*const IRecoverableError, self), pProviderRole);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRecoverableError_GetChangeWithRecoverableError(self: *const T, ppChangeWithRecoverableError: **ISyncChange) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRecoverableError.VTable, self.vtable).GetChangeWithRecoverableError(@ptrCast(*const IRecoverableError, self), ppChangeWithRecoverableError);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRecoverableError_GetRecoverableErrorDataForChange(self: *const T, phrError: *HRESULT, ppErrorData: **IRecoverableErrorData) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRecoverableError.VTable, self.vtable).GetRecoverableErrorDataForChange(@ptrCast(*const IRecoverableError, self), phrError, ppErrorData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRecoverableError_GetRecoverableErrorDataForChangeUnit(self: *const T, pChangeUnit: *ISyncChangeUnit, phrError: *HRESULT, ppErrorData: **IRecoverableErrorData) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRecoverableError.VTable, self.vtable).GetRecoverableErrorDataForChangeUnit(@ptrCast(*const IRecoverableError, self), pChangeUnit, phrError, ppErrorData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IChangeConflict_Value = @import("../zig.zig").Guid.initString("014EBF97-9F20-4F7A-BDD4-25979C77C002");
pub const IID_IChangeConflict = &IID_IChangeConflict_Value;
pub const IChangeConflict = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDestinationProviderConflictingChange: fn(
            self: *const IChangeConflict,
            ppConflictingChange: **ISyncChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceProviderConflictingChange: fn(
            self: *const IChangeConflict,
            ppConflictingChange: **ISyncChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDestinationProviderConflictingData: fn(
            self: *const IChangeConflict,
            ppConflictingData: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceProviderConflictingData: fn(
            self: *const IChangeConflict,
            ppConflictingData: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResolveActionForChange: fn(
            self: *const IChangeConflict,
            pResolveAction: *SYNC_RESOLVE_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetResolveActionForChange: fn(
            self: *const IChangeConflict,
            resolveAction: SYNC_RESOLVE_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResolveActionForChangeUnit: fn(
            self: *const IChangeConflict,
            pChangeUnit: *ISyncChangeUnit,
            pResolveAction: *SYNC_RESOLVE_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetResolveActionForChangeUnit: fn(
            self: *const IChangeConflict,
            pChangeUnit: *ISyncChangeUnit,
            resolveAction: SYNC_RESOLVE_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IChangeConflict_GetDestinationProviderConflictingChange(self: *const T, ppConflictingChange: **ISyncChange) callconv(.Inline) HRESULT {
            return @ptrCast(*const IChangeConflict.VTable, self.vtable).GetDestinationProviderConflictingChange(@ptrCast(*const IChangeConflict, self), ppConflictingChange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IChangeConflict_GetSourceProviderConflictingChange(self: *const T, ppConflictingChange: **ISyncChange) callconv(.Inline) HRESULT {
            return @ptrCast(*const IChangeConflict.VTable, self.vtable).GetSourceProviderConflictingChange(@ptrCast(*const IChangeConflict, self), ppConflictingChange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IChangeConflict_GetDestinationProviderConflictingData(self: *const T, ppConflictingData: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IChangeConflict.VTable, self.vtable).GetDestinationProviderConflictingData(@ptrCast(*const IChangeConflict, self), ppConflictingData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IChangeConflict_GetSourceProviderConflictingData(self: *const T, ppConflictingData: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IChangeConflict.VTable, self.vtable).GetSourceProviderConflictingData(@ptrCast(*const IChangeConflict, self), ppConflictingData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IChangeConflict_GetResolveActionForChange(self: *const T, pResolveAction: *SYNC_RESOLVE_ACTION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IChangeConflict.VTable, self.vtable).GetResolveActionForChange(@ptrCast(*const IChangeConflict, self), pResolveAction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IChangeConflict_SetResolveActionForChange(self: *const T, resolveAction: SYNC_RESOLVE_ACTION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IChangeConflict.VTable, self.vtable).SetResolveActionForChange(@ptrCast(*const IChangeConflict, self), resolveAction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IChangeConflict_GetResolveActionForChangeUnit(self: *const T, pChangeUnit: *ISyncChangeUnit, pResolveAction: *SYNC_RESOLVE_ACTION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IChangeConflict.VTable, self.vtable).GetResolveActionForChangeUnit(@ptrCast(*const IChangeConflict, self), pChangeUnit, pResolveAction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IChangeConflict_SetResolveActionForChangeUnit(self: *const T, pChangeUnit: *ISyncChangeUnit, resolveAction: SYNC_RESOLVE_ACTION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IChangeConflict.VTable, self.vtable).SetResolveActionForChangeUnit(@ptrCast(*const IChangeConflict, self), pChangeUnit, resolveAction);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IConstraintConflict_Value = @import("../zig.zig").Guid.initString("00D2302E-1CF8-4835-B85F-B7CA4F799E0A");
pub const IID_IConstraintConflict = &IID_IConstraintConflict_Value;
pub const IConstraintConflict = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDestinationProviderConflictingChange: fn(
            self: *const IConstraintConflict,
            ppConflictingChange: **ISyncChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceProviderConflictingChange: fn(
            self: *const IConstraintConflict,
            ppConflictingChange: **ISyncChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDestinationProviderOriginalChange: fn(
            self: *const IConstraintConflict,
            ppOriginalChange: **ISyncChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDestinationProviderConflictingData: fn(
            self: *const IConstraintConflict,
            ppConflictingData: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceProviderConflictingData: fn(
            self: *const IConstraintConflict,
            ppConflictingData: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDestinationProviderOriginalData: fn(
            self: *const IConstraintConflict,
            ppOriginalData: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConstraintResolveActionForChange: fn(
            self: *const IConstraintConflict,
            pConstraintResolveAction: *__MIDL___MIDL_itf_winsync_0000_0000_0009,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConstraintResolveActionForChange: fn(
            self: *const IConstraintConflict,
            constraintResolveAction: __MIDL___MIDL_itf_winsync_0000_0000_0009,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConstraintResolveActionForChangeUnit: fn(
            self: *const IConstraintConflict,
            pChangeUnit: *ISyncChangeUnit,
            pConstraintResolveAction: *__MIDL___MIDL_itf_winsync_0000_0000_0009,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConstraintResolveActionForChangeUnit: fn(
            self: *const IConstraintConflict,
            pChangeUnit: *ISyncChangeUnit,
            constraintResolveAction: __MIDL___MIDL_itf_winsync_0000_0000_0009,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConstraintConflictReason: fn(
            self: *const IConstraintConflict,
            pConstraintConflictReason: *__MIDL___MIDL_itf_winsync_0000_0000_0010,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsTemporary: fn(
            self: *const IConstraintConflict,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConstraintConflict_GetDestinationProviderConflictingChange(self: *const T, ppConflictingChange: **ISyncChange) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConstraintConflict.VTable, self.vtable).GetDestinationProviderConflictingChange(@ptrCast(*const IConstraintConflict, self), ppConflictingChange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConstraintConflict_GetSourceProviderConflictingChange(self: *const T, ppConflictingChange: **ISyncChange) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConstraintConflict.VTable, self.vtable).GetSourceProviderConflictingChange(@ptrCast(*const IConstraintConflict, self), ppConflictingChange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConstraintConflict_GetDestinationProviderOriginalChange(self: *const T, ppOriginalChange: **ISyncChange) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConstraintConflict.VTable, self.vtable).GetDestinationProviderOriginalChange(@ptrCast(*const IConstraintConflict, self), ppOriginalChange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConstraintConflict_GetDestinationProviderConflictingData(self: *const T, ppConflictingData: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConstraintConflict.VTable, self.vtable).GetDestinationProviderConflictingData(@ptrCast(*const IConstraintConflict, self), ppConflictingData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConstraintConflict_GetSourceProviderConflictingData(self: *const T, ppConflictingData: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConstraintConflict.VTable, self.vtable).GetSourceProviderConflictingData(@ptrCast(*const IConstraintConflict, self), ppConflictingData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConstraintConflict_GetDestinationProviderOriginalData(self: *const T, ppOriginalData: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConstraintConflict.VTable, self.vtable).GetDestinationProviderOriginalData(@ptrCast(*const IConstraintConflict, self), ppOriginalData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConstraintConflict_GetConstraintResolveActionForChange(self: *const T, pConstraintResolveAction: *__MIDL___MIDL_itf_winsync_0000_0000_0009) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConstraintConflict.VTable, self.vtable).GetConstraintResolveActionForChange(@ptrCast(*const IConstraintConflict, self), pConstraintResolveAction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConstraintConflict_SetConstraintResolveActionForChange(self: *const T, constraintResolveAction: __MIDL___MIDL_itf_winsync_0000_0000_0009) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConstraintConflict.VTable, self.vtable).SetConstraintResolveActionForChange(@ptrCast(*const IConstraintConflict, self), constraintResolveAction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConstraintConflict_GetConstraintResolveActionForChangeUnit(self: *const T, pChangeUnit: *ISyncChangeUnit, pConstraintResolveAction: *__MIDL___MIDL_itf_winsync_0000_0000_0009) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConstraintConflict.VTable, self.vtable).GetConstraintResolveActionForChangeUnit(@ptrCast(*const IConstraintConflict, self), pChangeUnit, pConstraintResolveAction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConstraintConflict_SetConstraintResolveActionForChangeUnit(self: *const T, pChangeUnit: *ISyncChangeUnit, constraintResolveAction: __MIDL___MIDL_itf_winsync_0000_0000_0009) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConstraintConflict.VTable, self.vtable).SetConstraintResolveActionForChangeUnit(@ptrCast(*const IConstraintConflict, self), pChangeUnit, constraintResolveAction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConstraintConflict_GetConstraintConflictReason(self: *const T, pConstraintConflictReason: *__MIDL___MIDL_itf_winsync_0000_0000_0010) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConstraintConflict.VTable, self.vtable).GetConstraintConflictReason(@ptrCast(*const IConstraintConflict, self), pConstraintConflictReason);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConstraintConflict_IsTemporary(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConstraintConflict.VTable, self.vtable).IsTemporary(@ptrCast(*const IConstraintConflict, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncCallback_Value = @import("../zig.zig").Guid.initString("0599797F-5ED9-485C-AE36-0C5D1BF2E7A5");
pub const IID_ISyncCallback = &IID_ISyncCallback_Value;
pub const ISyncCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnProgress: fn(
            self: *const ISyncCallback,
            provider: SYNC_PROVIDER_ROLE,
            syncStage: SYNC_PROGRESS_STAGE,
            dwCompletedWork: u32,
            dwTotalWork: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnChange: fn(
            self: *const ISyncCallback,
            pSyncChange: *ISyncChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnConflict: fn(
            self: *const ISyncCallback,
            pConflict: *IChangeConflict,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnFullEnumerationNeeded: fn(
            self: *const ISyncCallback,
            pFullEnumerationAction: *SYNC_FULL_ENUMERATION_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnRecoverableError: fn(
            self: *const ISyncCallback,
            pRecoverableError: *IRecoverableError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncCallback_OnProgress(self: *const T, provider: SYNC_PROVIDER_ROLE, syncStage: SYNC_PROGRESS_STAGE, dwCompletedWork: u32, dwTotalWork: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncCallback.VTable, self.vtable).OnProgress(@ptrCast(*const ISyncCallback, self), provider, syncStage, dwCompletedWork, dwTotalWork);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncCallback_OnChange(self: *const T, pSyncChange: *ISyncChange) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncCallback.VTable, self.vtable).OnChange(@ptrCast(*const ISyncCallback, self), pSyncChange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncCallback_OnConflict(self: *const T, pConflict: *IChangeConflict) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncCallback.VTable, self.vtable).OnConflict(@ptrCast(*const ISyncCallback, self), pConflict);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncCallback_OnFullEnumerationNeeded(self: *const T, pFullEnumerationAction: *SYNC_FULL_ENUMERATION_ACTION) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncCallback.VTable, self.vtable).OnFullEnumerationNeeded(@ptrCast(*const ISyncCallback, self), pFullEnumerationAction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncCallback_OnRecoverableError(self: *const T, pRecoverableError: *IRecoverableError) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncCallback.VTable, self.vtable).OnRecoverableError(@ptrCast(*const ISyncCallback, self), pRecoverableError);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncCallback2_Value = @import("../zig.zig").Guid.initString("47CE84AF-7442-4EAD-8630-12015E030AD7");
pub const IID_ISyncCallback2 = &IID_ISyncCallback2_Value;
pub const ISyncCallback2 = extern struct {
    pub const VTable = extern struct {
        base: ISyncCallback.VTable,
        OnChangeApplied: fn(
            self: *const ISyncCallback2,
            dwChangesApplied: u32,
            dwChangesFailed: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnChangeFailed: fn(
            self: *const ISyncCallback2,
            dwChangesApplied: u32,
            dwChangesFailed: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISyncCallback.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncCallback2_OnChangeApplied(self: *const T, dwChangesApplied: u32, dwChangesFailed: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncCallback2.VTable, self.vtable).OnChangeApplied(@ptrCast(*const ISyncCallback2, self), dwChangesApplied, dwChangesFailed);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncCallback2_OnChangeFailed(self: *const T, dwChangesApplied: u32, dwChangesFailed: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncCallback2.VTable, self.vtable).OnChangeFailed(@ptrCast(*const ISyncCallback2, self), dwChangesApplied, dwChangesFailed);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncConstraintCallback_Value = @import("../zig.zig").Guid.initString("8AF3843E-75B3-438C-BB51-6F020D70D3CB");
pub const IID_ISyncConstraintCallback = &IID_ISyncConstraintCallback_Value;
pub const ISyncConstraintCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnConstraintConflict: fn(
            self: *const ISyncConstraintCallback,
            pConflict: *IConstraintConflict,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncConstraintCallback_OnConstraintConflict(self: *const T, pConflict: *IConstraintConflict) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncConstraintCallback.VTable, self.vtable).OnConstraintConflict(@ptrCast(*const ISyncConstraintCallback, self), pConflict);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncProvider_Value = @import("../zig.zig").Guid.initString("8F657056-2BCE-4A17-8C68-C7BB7898B56F");
pub const IID_ISyncProvider = &IID_ISyncProvider_Value;
pub const ISyncProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIdParameters: fn(
            self: *const ISyncProvider,
            pIdParameters: *ID_PARAMETERS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProvider_GetIdParameters(self: *const T, pIdParameters: *ID_PARAMETERS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProvider.VTable, self.vtable).GetIdParameters(@ptrCast(*const ISyncProvider, self), pIdParameters);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncSessionState_Value = @import("../zig.zig").Guid.initString("B8A940FE-9F01-483B-9434-C37D361225D9");
pub const IID_ISyncSessionState = &IID_ISyncSessionState_Value;
pub const ISyncSessionState = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsCanceled: fn(
            self: *const ISyncSessionState,
            pfIsCanceled: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInfoForChangeApplication: fn(
            self: *const ISyncSessionState,
            pbChangeApplierInfo: *u8,
            pcbChangeApplierInfo: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadInfoFromChangeApplication: fn(
            self: *const ISyncSessionState,
            pbChangeApplierInfo: *const u8,
            cbChangeApplierInfo: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForgottenKnowledgeRecoveryRangeStart: fn(
            self: *const ISyncSessionState,
            pbRangeStart: *u8,
            pcbRangeStart: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForgottenKnowledgeRecoveryRangeEnd: fn(
            self: *const ISyncSessionState,
            pbRangeEnd: *u8,
            pcbRangeEnd: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetForgottenKnowledgeRecoveryRange: fn(
            self: *const ISyncSessionState,
            pRange: *const SYNC_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnProgress: fn(
            self: *const ISyncSessionState,
            provider: SYNC_PROVIDER_ROLE,
            syncStage: SYNC_PROGRESS_STAGE,
            dwCompletedWork: u32,
            dwTotalWork: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncSessionState_IsCanceled(self: *const T, pfIsCanceled: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncSessionState.VTable, self.vtable).IsCanceled(@ptrCast(*const ISyncSessionState, self), pfIsCanceled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncSessionState_GetInfoForChangeApplication(self: *const T, pbChangeApplierInfo: *u8, pcbChangeApplierInfo: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncSessionState.VTable, self.vtable).GetInfoForChangeApplication(@ptrCast(*const ISyncSessionState, self), pbChangeApplierInfo, pcbChangeApplierInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncSessionState_LoadInfoFromChangeApplication(self: *const T, pbChangeApplierInfo: *const u8, cbChangeApplierInfo: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncSessionState.VTable, self.vtable).LoadInfoFromChangeApplication(@ptrCast(*const ISyncSessionState, self), pbChangeApplierInfo, cbChangeApplierInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncSessionState_GetForgottenKnowledgeRecoveryRangeStart(self: *const T, pbRangeStart: *u8, pcbRangeStart: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncSessionState.VTable, self.vtable).GetForgottenKnowledgeRecoveryRangeStart(@ptrCast(*const ISyncSessionState, self), pbRangeStart, pcbRangeStart);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncSessionState_GetForgottenKnowledgeRecoveryRangeEnd(self: *const T, pbRangeEnd: *u8, pcbRangeEnd: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncSessionState.VTable, self.vtable).GetForgottenKnowledgeRecoveryRangeEnd(@ptrCast(*const ISyncSessionState, self), pbRangeEnd, pcbRangeEnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncSessionState_SetForgottenKnowledgeRecoveryRange(self: *const T, pRange: *const SYNC_RANGE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncSessionState.VTable, self.vtable).SetForgottenKnowledgeRecoveryRange(@ptrCast(*const ISyncSessionState, self), pRange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncSessionState_OnProgress(self: *const T, provider: SYNC_PROVIDER_ROLE, syncStage: SYNC_PROGRESS_STAGE, dwCompletedWork: u32, dwTotalWork: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncSessionState.VTable, self.vtable).OnProgress(@ptrCast(*const ISyncSessionState, self), provider, syncStage, dwCompletedWork, dwTotalWork);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncSessionExtendedErrorInfo_Value = @import("../zig.zig").Guid.initString("326C6810-790A-409B-B741-6999388761EB");
pub const IID_ISyncSessionExtendedErrorInfo = &IID_ISyncSessionExtendedErrorInfo_Value;
pub const ISyncSessionExtendedErrorInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSyncProviderWithError: fn(
            self: *const ISyncSessionExtendedErrorInfo,
            ppProviderWithError: **ISyncProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncSessionExtendedErrorInfo_GetSyncProviderWithError(self: *const T, ppProviderWithError: **ISyncProvider) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncSessionExtendedErrorInfo.VTable, self.vtable).GetSyncProviderWithError(@ptrCast(*const ISyncSessionExtendedErrorInfo, self), ppProviderWithError);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncSessionState2_Value = @import("../zig.zig").Guid.initString("9E37CFA3-9E38-4C61-9CA3-FFE810B45CA2");
pub const IID_ISyncSessionState2 = &IID_ISyncSessionState2_Value;
pub const ISyncSessionState2 = extern struct {
    pub const VTable = extern struct {
        base: ISyncSessionState.VTable,
        SetProviderWithError: fn(
            self: *const ISyncSessionState2,
            fSelf: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSessionErrorStatus: fn(
            self: *const ISyncSessionState2,
            phrSessionError: *HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISyncSessionState.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncSessionState2_SetProviderWithError(self: *const T, fSelf: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncSessionState2.VTable, self.vtable).SetProviderWithError(@ptrCast(*const ISyncSessionState2, self), fSelf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncSessionState2_GetSessionErrorStatus(self: *const T, phrSessionError: *HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncSessionState2.VTable, self.vtable).GetSessionErrorStatus(@ptrCast(*const ISyncSessionState2, self), phrSessionError);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncFilterInfo_Value = @import("../zig.zig").Guid.initString("794EAAF8-3F2E-47E6-9728-17E6FCF94CB7");
pub const IID_ISyncFilterInfo = &IID_ISyncFilterInfo_Value;
pub const ISyncFilterInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Serialize: fn(
            self: *const ISyncFilterInfo,
            pbBuffer: *u8,
            pcbBuffer: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncFilterInfo_Serialize(self: *const T, pbBuffer: *u8, pcbBuffer: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncFilterInfo.VTable, self.vtable).Serialize(@ptrCast(*const ISyncFilterInfo, self), pbBuffer, pcbBuffer);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncFilterInfo2_Value = @import("../zig.zig").Guid.initString("19B394BA-E3D0-468C-934D-321968B2AB34");
pub const IID_ISyncFilterInfo2 = &IID_ISyncFilterInfo2_Value;
pub const ISyncFilterInfo2 = extern struct {
    pub const VTable = extern struct {
        base: ISyncFilterInfo.VTable,
        GetFlags: fn(
            self: *const ISyncFilterInfo2,
            pdwFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISyncFilterInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncFilterInfo2_GetFlags(self: *const T, pdwFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncFilterInfo2.VTable, self.vtable).GetFlags(@ptrCast(*const ISyncFilterInfo2, self), pdwFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IChangeUnitListFilterInfo_Value = @import("../zig.zig").Guid.initString("F2837671-0BDF-43FA-B502-232375FB50C2");
pub const IID_IChangeUnitListFilterInfo = &IID_IChangeUnitListFilterInfo_Value;
pub const IChangeUnitListFilterInfo = extern struct {
    pub const VTable = extern struct {
        base: ISyncFilterInfo.VTable,
        Initialize: fn(
            self: *const IChangeUnitListFilterInfo,
            ppbChangeUnitIds: *const *const u8,
            dwChangeUnitCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeUnitIdCount: fn(
            self: *const IChangeUnitListFilterInfo,
            pdwChangeUnitIdCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeUnitId: fn(
            self: *const IChangeUnitListFilterInfo,
            dwChangeUnitIdIndex: u32,
            pbChangeUnitId: *u8,
            pcbIdSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISyncFilterInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IChangeUnitListFilterInfo_Initialize(self: *const T, ppbChangeUnitIds: *const *const u8, dwChangeUnitCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IChangeUnitListFilterInfo.VTable, self.vtable).Initialize(@ptrCast(*const IChangeUnitListFilterInfo, self), ppbChangeUnitIds, dwChangeUnitCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IChangeUnitListFilterInfo_GetChangeUnitIdCount(self: *const T, pdwChangeUnitIdCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IChangeUnitListFilterInfo.VTable, self.vtable).GetChangeUnitIdCount(@ptrCast(*const IChangeUnitListFilterInfo, self), pdwChangeUnitIdCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IChangeUnitListFilterInfo_GetChangeUnitId(self: *const T, dwChangeUnitIdIndex: u32, pbChangeUnitId: *u8, pcbIdSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IChangeUnitListFilterInfo.VTable, self.vtable).GetChangeUnitId(@ptrCast(*const IChangeUnitListFilterInfo, self), dwChangeUnitIdIndex, pbChangeUnitId, pcbIdSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncFilter_Value = @import("../zig.zig").Guid.initString("087A3F15-0FCB-44C1-9639-53C14E2B5506");
pub const IID_ISyncFilter = &IID_ISyncFilter_Value;
pub const ISyncFilter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsIdentical: fn(
            self: *const ISyncFilter,
            pSyncFilter: *ISyncFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Serialize: fn(
            self: *const ISyncFilter,
            pbSyncFilter: *u8,
            pcbSyncFilter: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncFilter_IsIdentical(self: *const T, pSyncFilter: *ISyncFilter) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncFilter.VTable, self.vtable).IsIdentical(@ptrCast(*const ISyncFilter, self), pSyncFilter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncFilter_Serialize(self: *const T, pbSyncFilter: *u8, pcbSyncFilter: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncFilter.VTable, self.vtable).Serialize(@ptrCast(*const ISyncFilter, self), pbSyncFilter, pcbSyncFilter);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncFilterDeserializer_Value = @import("../zig.zig").Guid.initString("B45B7A72-E5C7-46BE-9C82-77B8B15DAB8A");
pub const IID_ISyncFilterDeserializer = &IID_ISyncFilterDeserializer_Value;
pub const ISyncFilterDeserializer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DeserializeSyncFilter: fn(
            self: *const ISyncFilterDeserializer,
            pbSyncFilter: *const u8,
            dwCbSyncFilter: u32,
            ppISyncFilter: **ISyncFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncFilterDeserializer_DeserializeSyncFilter(self: *const T, pbSyncFilter: *const u8, dwCbSyncFilter: u32, ppISyncFilter: **ISyncFilter) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncFilterDeserializer.VTable, self.vtable).DeserializeSyncFilter(@ptrCast(*const ISyncFilterDeserializer, self), pbSyncFilter, dwCbSyncFilter, ppISyncFilter);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICustomFilterInfo_Value = @import("../zig.zig").Guid.initString("1D335DFF-6F88-4E4D-91A8-A3F351CFD473");
pub const IID_ICustomFilterInfo = &IID_ICustomFilterInfo_Value;
pub const ICustomFilterInfo = extern struct {
    pub const VTable = extern struct {
        base: ISyncFilterInfo.VTable,
        GetSyncFilter: fn(
            self: *const ICustomFilterInfo,
            pISyncFilter: **ISyncFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISyncFilterInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICustomFilterInfo_GetSyncFilter(self: *const T, pISyncFilter: **ISyncFilter) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICustomFilterInfo.VTable, self.vtable).GetSyncFilter(@ptrCast(*const ICustomFilterInfo, self), pISyncFilter);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const __MIDL___MIDL_itf_winsync_0000_0036_0001 = extern enum(i32) {
    FCT_INTERSECTION = 0,
};
pub const FCT_INTERSECTION = __MIDL___MIDL_itf_winsync_0000_0036_0001.FCT_INTERSECTION;

const IID_ICombinedFilterInfo_Value = @import("../zig.zig").Guid.initString("11F9DE71-2818-4779-B2AC-42D450565F45");
pub const IID_ICombinedFilterInfo = &IID_ICombinedFilterInfo_Value;
pub const ICombinedFilterInfo = extern struct {
    pub const VTable = extern struct {
        base: ISyncFilterInfo.VTable,
        GetFilterCount: fn(
            self: *const ICombinedFilterInfo,
            pdwFilterCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilterInfo: fn(
            self: *const ICombinedFilterInfo,
            dwFilterIndex: u32,
            ppIFilterInfo: **ISyncFilterInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilterCombinationType: fn(
            self: *const ICombinedFilterInfo,
            pFilterCombinationType: *__MIDL___MIDL_itf_winsync_0000_0036_0001,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISyncFilterInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICombinedFilterInfo_GetFilterCount(self: *const T, pdwFilterCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICombinedFilterInfo.VTable, self.vtable).GetFilterCount(@ptrCast(*const ICombinedFilterInfo, self), pdwFilterCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICombinedFilterInfo_GetFilterInfo(self: *const T, dwFilterIndex: u32, ppIFilterInfo: **ISyncFilterInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICombinedFilterInfo.VTable, self.vtable).GetFilterInfo(@ptrCast(*const ICombinedFilterInfo, self), dwFilterIndex, ppIFilterInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICombinedFilterInfo_GetFilterCombinationType(self: *const T, pFilterCombinationType: *__MIDL___MIDL_itf_winsync_0000_0036_0001) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICombinedFilterInfo.VTable, self.vtable).GetFilterCombinationType(@ptrCast(*const ICombinedFilterInfo, self), pFilterCombinationType);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumSyncChanges_Value = @import("../zig.zig").Guid.initString("5F86BE4A-5E78-4E32-AC1C-C24FD223EF85");
pub const IID_IEnumSyncChanges = &IID_IEnumSyncChanges_Value;
pub const IEnumSyncChanges = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumSyncChanges,
            cChanges: u32,
            ppChange: **ISyncChange,
            pcFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumSyncChanges,
            cChanges: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumSyncChanges,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumSyncChanges,
            ppEnum: **IEnumSyncChanges,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncChanges_Next(self: *const T, cChanges: u32, ppChange: **ISyncChange, pcFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncChanges.VTable, self.vtable).Next(@ptrCast(*const IEnumSyncChanges, self), cChanges, ppChange, pcFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncChanges_Skip(self: *const T, cChanges: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncChanges.VTable, self.vtable).Skip(@ptrCast(*const IEnumSyncChanges, self), cChanges);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncChanges_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncChanges.VTable, self.vtable).Reset(@ptrCast(*const IEnumSyncChanges, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncChanges_Clone(self: *const T, ppEnum: **IEnumSyncChanges) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncChanges.VTable, self.vtable).Clone(@ptrCast(*const IEnumSyncChanges, self), ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncChangeBuilder_Value = @import("../zig.zig").Guid.initString("56F14771-8677-484F-A170-E386E418A676");
pub const IID_ISyncChangeBuilder = &IID_ISyncChangeBuilder_Value;
pub const ISyncChangeBuilder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddChangeUnitMetadata: fn(
            self: *const ISyncChangeBuilder,
            pbChangeUnitId: *const u8,
            pChangeUnitVersion: *const SYNC_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBuilder_AddChangeUnitMetadata(self: *const T, pbChangeUnitId: *const u8, pChangeUnitVersion: *const SYNC_VERSION) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBuilder.VTable, self.vtable).AddChangeUnitMetadata(@ptrCast(*const ISyncChangeBuilder, self), pbChangeUnitId, pChangeUnitVersion);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFilterTrackingSyncChangeBuilder_Value = @import("../zig.zig").Guid.initString("295024A0-70DA-4C58-883C-CE2AFB308D0B");
pub const IID_IFilterTrackingSyncChangeBuilder = &IID_IFilterTrackingSyncChangeBuilder_Value;
pub const IFilterTrackingSyncChangeBuilder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddFilterChange: fn(
            self: *const IFilterTrackingSyncChangeBuilder,
            dwFilterKey: u32,
            pFilterChange: *const SYNC_FILTER_CHANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllChangeUnitsPresentFlag: fn(
            self: *const IFilterTrackingSyncChangeBuilder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFilterTrackingSyncChangeBuilder_AddFilterChange(self: *const T, dwFilterKey: u32, pFilterChange: *const SYNC_FILTER_CHANGE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFilterTrackingSyncChangeBuilder.VTable, self.vtable).AddFilterChange(@ptrCast(*const IFilterTrackingSyncChangeBuilder, self), dwFilterKey, pFilterChange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFilterTrackingSyncChangeBuilder_SetAllChangeUnitsPresentFlag(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFilterTrackingSyncChangeBuilder.VTable, self.vtable).SetAllChangeUnitsPresentFlag(@ptrCast(*const IFilterTrackingSyncChangeBuilder, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncChangeBatchBase_Value = @import("../zig.zig").Guid.initString("52F6E694-6A71-4494-A184-A8311BF5D227");
pub const IID_ISyncChangeBatchBase = &IID_ISyncChangeBatchBase_Value;
pub const ISyncChangeBatchBase = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetChangeEnumerator: fn(
            self: *const ISyncChangeBatchBase,
            ppEnum: **IEnumSyncChanges,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsLastBatch: fn(
            self: *const ISyncChangeBatchBase,
            pfLastBatch: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWorkEstimateForBatch: fn(
            self: *const ISyncChangeBatchBase,
            pdwWorkForBatch: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRemainingWorkEstimateForSession: fn(
            self: *const ISyncChangeBatchBase,
            pdwRemainingWorkForSession: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginOrderedGroup: fn(
            self: *const ISyncChangeBatchBase,
            pbLowerBound: *const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndOrderedGroup: fn(
            self: *const ISyncChangeBatchBase,
            pbUpperBound: *const u8,
            pMadeWithKnowledge: *ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddItemMetadataToGroup: fn(
            self: *const ISyncChangeBatchBase,
            pbOwnerReplicaId: *const u8,
            pbItemId: *const u8,
            pChangeVersion: *const SYNC_VERSION,
            pCreationVersion: *const SYNC_VERSION,
            dwFlags: u32,
            dwWorkForChange: u32,
            ppChangeBuilder: **ISyncChangeBuilder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedKnowledge: fn(
            self: *const ISyncChangeBatchBase,
            ppLearnedKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrerequisiteKnowledge: fn(
            self: *const ISyncChangeBatchBase,
            ppPrerequisteKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceForgottenKnowledge: fn(
            self: *const ISyncChangeBatchBase,
            ppSourceForgottenKnowledge: **IForgottenKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLastBatch: fn(
            self: *const ISyncChangeBatchBase,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWorkEstimateForBatch: fn(
            self: *const ISyncChangeBatchBase,
            dwWorkForBatch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRemainingWorkEstimateForSession: fn(
            self: *const ISyncChangeBatchBase,
            dwRemainingWorkForSession: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Serialize: fn(
            self: *const ISyncChangeBatchBase,
            pbChangeBatch: *u8,
            pcbChangeBatch: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchBase_GetChangeEnumerator(self: *const T, ppEnum: **IEnumSyncChanges) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchBase.VTable, self.vtable).GetChangeEnumerator(@ptrCast(*const ISyncChangeBatchBase, self), ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchBase_GetIsLastBatch(self: *const T, pfLastBatch: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchBase.VTable, self.vtable).GetIsLastBatch(@ptrCast(*const ISyncChangeBatchBase, self), pfLastBatch);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchBase_GetWorkEstimateForBatch(self: *const T, pdwWorkForBatch: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchBase.VTable, self.vtable).GetWorkEstimateForBatch(@ptrCast(*const ISyncChangeBatchBase, self), pdwWorkForBatch);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchBase_GetRemainingWorkEstimateForSession(self: *const T, pdwRemainingWorkForSession: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchBase.VTable, self.vtable).GetRemainingWorkEstimateForSession(@ptrCast(*const ISyncChangeBatchBase, self), pdwRemainingWorkForSession);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchBase_BeginOrderedGroup(self: *const T, pbLowerBound: *const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchBase.VTable, self.vtable).BeginOrderedGroup(@ptrCast(*const ISyncChangeBatchBase, self), pbLowerBound);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchBase_EndOrderedGroup(self: *const T, pbUpperBound: *const u8, pMadeWithKnowledge: *ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchBase.VTable, self.vtable).EndOrderedGroup(@ptrCast(*const ISyncChangeBatchBase, self), pbUpperBound, pMadeWithKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchBase_AddItemMetadataToGroup(self: *const T, pbOwnerReplicaId: *const u8, pbItemId: *const u8, pChangeVersion: *const SYNC_VERSION, pCreationVersion: *const SYNC_VERSION, dwFlags: u32, dwWorkForChange: u32, ppChangeBuilder: **ISyncChangeBuilder) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchBase.VTable, self.vtable).AddItemMetadataToGroup(@ptrCast(*const ISyncChangeBatchBase, self), pbOwnerReplicaId, pbItemId, pChangeVersion, pCreationVersion, dwFlags, dwWorkForChange, ppChangeBuilder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchBase_GetLearnedKnowledge(self: *const T, ppLearnedKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchBase.VTable, self.vtable).GetLearnedKnowledge(@ptrCast(*const ISyncChangeBatchBase, self), ppLearnedKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchBase_GetPrerequisiteKnowledge(self: *const T, ppPrerequisteKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchBase.VTable, self.vtable).GetPrerequisiteKnowledge(@ptrCast(*const ISyncChangeBatchBase, self), ppPrerequisteKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchBase_GetSourceForgottenKnowledge(self: *const T, ppSourceForgottenKnowledge: **IForgottenKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchBase.VTable, self.vtable).GetSourceForgottenKnowledge(@ptrCast(*const ISyncChangeBatchBase, self), ppSourceForgottenKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchBase_SetLastBatch(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchBase.VTable, self.vtable).SetLastBatch(@ptrCast(*const ISyncChangeBatchBase, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchBase_SetWorkEstimateForBatch(self: *const T, dwWorkForBatch: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchBase.VTable, self.vtable).SetWorkEstimateForBatch(@ptrCast(*const ISyncChangeBatchBase, self), dwWorkForBatch);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchBase_SetRemainingWorkEstimateForSession(self: *const T, dwRemainingWorkForSession: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchBase.VTable, self.vtable).SetRemainingWorkEstimateForSession(@ptrCast(*const ISyncChangeBatchBase, self), dwRemainingWorkForSession);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchBase_Serialize(self: *const T, pbChangeBatch: *u8, pcbChangeBatch: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchBase.VTable, self.vtable).Serialize(@ptrCast(*const ISyncChangeBatchBase, self), pbChangeBatch, pcbChangeBatch);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncChangeBatch_Value = @import("../zig.zig").Guid.initString("70C64DEE-380F-4C2E-8F70-31C55BD5F9B3");
pub const IID_ISyncChangeBatch = &IID_ISyncChangeBatch_Value;
pub const ISyncChangeBatch = extern struct {
    pub const VTable = extern struct {
        base: ISyncChangeBatchBase.VTable,
        BeginUnorderedGroup: fn(
            self: *const ISyncChangeBatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndUnorderedGroup: fn(
            self: *const ISyncChangeBatch,
            pMadeWithKnowledge: *ISyncKnowledge,
            fAllChangesForKnowledge: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddLoggedConflict: fn(
            self: *const ISyncChangeBatch,
            pbOwnerReplicaId: *const u8,
            pbItemId: *const u8,
            pChangeVersion: *const SYNC_VERSION,
            pCreationVersion: *const SYNC_VERSION,
            dwFlags: u32,
            dwWorkForChange: u32,
            pConflictKnowledge: *ISyncKnowledge,
            ppChangeBuilder: **ISyncChangeBuilder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISyncChangeBatchBase.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatch_BeginUnorderedGroup(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatch.VTable, self.vtable).BeginUnorderedGroup(@ptrCast(*const ISyncChangeBatch, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatch_EndUnorderedGroup(self: *const T, pMadeWithKnowledge: *ISyncKnowledge, fAllChangesForKnowledge: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatch.VTable, self.vtable).EndUnorderedGroup(@ptrCast(*const ISyncChangeBatch, self), pMadeWithKnowledge, fAllChangesForKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatch_AddLoggedConflict(self: *const T, pbOwnerReplicaId: *const u8, pbItemId: *const u8, pChangeVersion: *const SYNC_VERSION, pCreationVersion: *const SYNC_VERSION, dwFlags: u32, dwWorkForChange: u32, pConflictKnowledge: *ISyncKnowledge, ppChangeBuilder: **ISyncChangeBuilder) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatch.VTable, self.vtable).AddLoggedConflict(@ptrCast(*const ISyncChangeBatch, self), pbOwnerReplicaId, pbItemId, pChangeVersion, pCreationVersion, dwFlags, dwWorkForChange, pConflictKnowledge, ppChangeBuilder);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncFullEnumerationChangeBatch_Value = @import("../zig.zig").Guid.initString("EF64197D-4F44-4EA2-B355-4524713E3BED");
pub const IID_ISyncFullEnumerationChangeBatch = &IID_ISyncFullEnumerationChangeBatch_Value;
pub const ISyncFullEnumerationChangeBatch = extern struct {
    pub const VTable = extern struct {
        base: ISyncChangeBatchBase.VTable,
        GetLearnedKnowledgeAfterRecoveryComplete: fn(
            self: *const ISyncFullEnumerationChangeBatch,
            ppLearnedKnowledgeAfterRecoveryComplete: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClosedLowerBoundItemId: fn(
            self: *const ISyncFullEnumerationChangeBatch,
            pbClosedLowerBoundItemId: *u8,
            pcbIdSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClosedUpperBoundItemId: fn(
            self: *const ISyncFullEnumerationChangeBatch,
            pbClosedUpperBoundItemId: *u8,
            pcbIdSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISyncChangeBatchBase.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncFullEnumerationChangeBatch_GetLearnedKnowledgeAfterRecoveryComplete(self: *const T, ppLearnedKnowledgeAfterRecoveryComplete: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncFullEnumerationChangeBatch.VTable, self.vtable).GetLearnedKnowledgeAfterRecoveryComplete(@ptrCast(*const ISyncFullEnumerationChangeBatch, self), ppLearnedKnowledgeAfterRecoveryComplete);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncFullEnumerationChangeBatch_GetClosedLowerBoundItemId(self: *const T, pbClosedLowerBoundItemId: *u8, pcbIdSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncFullEnumerationChangeBatch.VTable, self.vtable).GetClosedLowerBoundItemId(@ptrCast(*const ISyncFullEnumerationChangeBatch, self), pbClosedLowerBoundItemId, pcbIdSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncFullEnumerationChangeBatch_GetClosedUpperBoundItemId(self: *const T, pbClosedUpperBoundItemId: *u8, pcbIdSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncFullEnumerationChangeBatch.VTable, self.vtable).GetClosedUpperBoundItemId(@ptrCast(*const ISyncFullEnumerationChangeBatch, self), pbClosedUpperBoundItemId, pcbIdSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncChangeBatchWithPrerequisite_Value = @import("../zig.zig").Guid.initString("097F13BE-5B92-4048-B3F2-7B42A2515E07");
pub const IID_ISyncChangeBatchWithPrerequisite = &IID_ISyncChangeBatchWithPrerequisite_Value;
pub const ISyncChangeBatchWithPrerequisite = extern struct {
    pub const VTable = extern struct {
        base: ISyncChangeBatchBase.VTable,
        SetPrerequisiteKnowledge: fn(
            self: *const ISyncChangeBatchWithPrerequisite,
            pPrerequisiteKnowledge: *ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedKnowledgeWithPrerequisite: fn(
            self: *const ISyncChangeBatchWithPrerequisite,
            pDestinationKnowledge: *ISyncKnowledge,
            ppLearnedWithPrerequisiteKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedForgottenKnowledge: fn(
            self: *const ISyncChangeBatchWithPrerequisite,
            ppLearnedForgottenKnowledge: **IForgottenKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISyncChangeBatchBase.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchWithPrerequisite_SetPrerequisiteKnowledge(self: *const T, pPrerequisiteKnowledge: *ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchWithPrerequisite.VTable, self.vtable).SetPrerequisiteKnowledge(@ptrCast(*const ISyncChangeBatchWithPrerequisite, self), pPrerequisiteKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchWithPrerequisite_GetLearnedKnowledgeWithPrerequisite(self: *const T, pDestinationKnowledge: *ISyncKnowledge, ppLearnedWithPrerequisiteKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchWithPrerequisite.VTable, self.vtable).GetLearnedKnowledgeWithPrerequisite(@ptrCast(*const ISyncChangeBatchWithPrerequisite, self), pDestinationKnowledge, ppLearnedWithPrerequisiteKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchWithPrerequisite_GetLearnedForgottenKnowledge(self: *const T, ppLearnedForgottenKnowledge: **IForgottenKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchWithPrerequisite.VTable, self.vtable).GetLearnedForgottenKnowledge(@ptrCast(*const ISyncChangeBatchWithPrerequisite, self), ppLearnedForgottenKnowledge);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncChangeBatchBase2_Value = @import("../zig.zig").Guid.initString("6FDB596A-D755-4584-BD0C-C0C23A548FBF");
pub const IID_ISyncChangeBatchBase2 = &IID_ISyncChangeBatchBase2_Value;
pub const ISyncChangeBatchBase2 = extern struct {
    pub const VTable = extern struct {
        base: ISyncChangeBatchBase.VTable,
        SerializeWithOptions: fn(
            self: *const ISyncChangeBatchBase2,
            targetFormatVersion: SYNC_SERIALIZATION_VERSION,
            dwFlags: u32,
            pbBuffer: *u8,
            pdwSerializedSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISyncChangeBatchBase.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchBase2_SerializeWithOptions(self: *const T, targetFormatVersion: SYNC_SERIALIZATION_VERSION, dwFlags: u32, pbBuffer: *u8, pdwSerializedSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchBase2.VTable, self.vtable).SerializeWithOptions(@ptrCast(*const ISyncChangeBatchBase2, self), targetFormatVersion, dwFlags, pbBuffer, pdwSerializedSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncChangeBatchAdvanced_Value = @import("../zig.zig").Guid.initString("0F1A4995-CBC8-421D-B550-5D0BEBF3E9A5");
pub const IID_ISyncChangeBatchAdvanced = &IID_ISyncChangeBatchAdvanced_Value;
pub const ISyncChangeBatchAdvanced = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFilterInfo: fn(
            self: *const ISyncChangeBatchAdvanced,
            ppFilterInfo: **ISyncFilterInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertFullEnumerationChangeBatchToRegularChangeBatch: fn(
            self: *const ISyncChangeBatchAdvanced,
            ppChangeBatch: **ISyncChangeBatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUpperBoundItemId: fn(
            self: *const ISyncChangeBatchAdvanced,
            pbItemId: *u8,
            pcbIdSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBatchLevelKnowledgeShouldBeApplied: fn(
            self: *const ISyncChangeBatchAdvanced,
            pfBatchKnowledgeShouldBeApplied: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchAdvanced_GetFilterInfo(self: *const T, ppFilterInfo: **ISyncFilterInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchAdvanced.VTable, self.vtable).GetFilterInfo(@ptrCast(*const ISyncChangeBatchAdvanced, self), ppFilterInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchAdvanced_ConvertFullEnumerationChangeBatchToRegularChangeBatch(self: *const T, ppChangeBatch: **ISyncChangeBatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchAdvanced.VTable, self.vtable).ConvertFullEnumerationChangeBatchToRegularChangeBatch(@ptrCast(*const ISyncChangeBatchAdvanced, self), ppChangeBatch);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchAdvanced_GetUpperBoundItemId(self: *const T, pbItemId: *u8, pcbIdSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchAdvanced.VTable, self.vtable).GetUpperBoundItemId(@ptrCast(*const ISyncChangeBatchAdvanced, self), pbItemId, pcbIdSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchAdvanced_GetBatchLevelKnowledgeShouldBeApplied(self: *const T, pfBatchKnowledgeShouldBeApplied: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchAdvanced.VTable, self.vtable).GetBatchLevelKnowledgeShouldBeApplied(@ptrCast(*const ISyncChangeBatchAdvanced, self), pfBatchKnowledgeShouldBeApplied);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncChangeBatch2_Value = @import("../zig.zig").Guid.initString("225F4A33-F5EE-4CC7-B039-67A262B4B2AC");
pub const IID_ISyncChangeBatch2 = &IID_ISyncChangeBatch2_Value;
pub const ISyncChangeBatch2 = extern struct {
    pub const VTable = extern struct {
        base: ISyncChangeBatch.VTable,
        AddMergeTombstoneMetadataToGroup: fn(
            self: *const ISyncChangeBatch2,
            pbOwnerReplicaId: *const u8,
            pbWinnerItemId: *const u8,
            pbItemId: *const u8,
            pChangeVersion: *const SYNC_VERSION,
            pCreationVersion: *const SYNC_VERSION,
            dwWorkForChange: u32,
            ppChangeBuilder: **ISyncChangeBuilder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMergeTombstoneLoggedConflict: fn(
            self: *const ISyncChangeBatch2,
            pbOwnerReplicaId: *const u8,
            pbWinnerItemId: *const u8,
            pbItemId: *const u8,
            pChangeVersion: *const SYNC_VERSION,
            pCreationVersion: *const SYNC_VERSION,
            dwWorkForChange: u32,
            pConflictKnowledge: *ISyncKnowledge,
            ppChangeBuilder: **ISyncChangeBuilder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISyncChangeBatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatch2_AddMergeTombstoneMetadataToGroup(self: *const T, pbOwnerReplicaId: *const u8, pbWinnerItemId: *const u8, pbItemId: *const u8, pChangeVersion: *const SYNC_VERSION, pCreationVersion: *const SYNC_VERSION, dwWorkForChange: u32, ppChangeBuilder: **ISyncChangeBuilder) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatch2.VTable, self.vtable).AddMergeTombstoneMetadataToGroup(@ptrCast(*const ISyncChangeBatch2, self), pbOwnerReplicaId, pbWinnerItemId, pbItemId, pChangeVersion, pCreationVersion, dwWorkForChange, ppChangeBuilder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatch2_AddMergeTombstoneLoggedConflict(self: *const T, pbOwnerReplicaId: *const u8, pbWinnerItemId: *const u8, pbItemId: *const u8, pChangeVersion: *const SYNC_VERSION, pCreationVersion: *const SYNC_VERSION, dwWorkForChange: u32, pConflictKnowledge: *ISyncKnowledge, ppChangeBuilder: **ISyncChangeBuilder) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatch2.VTable, self.vtable).AddMergeTombstoneLoggedConflict(@ptrCast(*const ISyncChangeBatch2, self), pbOwnerReplicaId, pbWinnerItemId, pbItemId, pChangeVersion, pCreationVersion, dwWorkForChange, pConflictKnowledge, ppChangeBuilder);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncFullEnumerationChangeBatch2_Value = @import("../zig.zig").Guid.initString("E06449F4-A205-4B65-9724-01B22101EEC1");
pub const IID_ISyncFullEnumerationChangeBatch2 = &IID_ISyncFullEnumerationChangeBatch2_Value;
pub const ISyncFullEnumerationChangeBatch2 = extern struct {
    pub const VTable = extern struct {
        base: ISyncFullEnumerationChangeBatch.VTable,
        AddMergeTombstoneMetadataToGroup: fn(
            self: *const ISyncFullEnumerationChangeBatch2,
            pbOwnerReplicaId: *const u8,
            pbWinnerItemId: *const u8,
            pbItemId: *const u8,
            pChangeVersion: *const SYNC_VERSION,
            pCreationVersion: *const SYNC_VERSION,
            dwWorkForChange: u32,
            ppChangeBuilder: **ISyncChangeBuilder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISyncFullEnumerationChangeBatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncFullEnumerationChangeBatch2_AddMergeTombstoneMetadataToGroup(self: *const T, pbOwnerReplicaId: *const u8, pbWinnerItemId: *const u8, pbItemId: *const u8, pChangeVersion: *const SYNC_VERSION, pCreationVersion: *const SYNC_VERSION, dwWorkForChange: u32, ppChangeBuilder: **ISyncChangeBuilder) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncFullEnumerationChangeBatch2.VTable, self.vtable).AddMergeTombstoneMetadataToGroup(@ptrCast(*const ISyncFullEnumerationChangeBatch2, self), pbOwnerReplicaId, pbWinnerItemId, pbItemId, pChangeVersion, pCreationVersion, dwWorkForChange, ppChangeBuilder);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IKnowledgeSyncProvider_Value = @import("../zig.zig").Guid.initString("43434A49-8DA4-47F2-8172-AD7B8B024978");
pub const IID_IKnowledgeSyncProvider = &IID_IKnowledgeSyncProvider_Value;
pub const IKnowledgeSyncProvider = extern struct {
    pub const VTable = extern struct {
        base: ISyncProvider.VTable,
        BeginSession: fn(
            self: *const IKnowledgeSyncProvider,
            role: SYNC_PROVIDER_ROLE,
            pSessionState: *ISyncSessionState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncBatchParameters: fn(
            self: *const IKnowledgeSyncProvider,
            ppSyncKnowledge: **ISyncKnowledge,
            pdwRequestedBatchSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeBatch: fn(
            self: *const IKnowledgeSyncProvider,
            dwBatchSize: u32,
            pSyncKnowledge: *ISyncKnowledge,
            ppSyncChangeBatch: **ISyncChangeBatch,
            ppUnkDataRetriever: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFullEnumerationChangeBatch: fn(
            self: *const IKnowledgeSyncProvider,
            dwBatchSize: u32,
            pbLowerEnumerationBound: *const u8,
            pSyncKnowledge: *ISyncKnowledge,
            ppSyncChangeBatch: **ISyncFullEnumerationChangeBatch,
            ppUnkDataRetriever: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessChangeBatch: fn(
            self: *const IKnowledgeSyncProvider,
            resolutionPolicy: CONFLICT_RESOLUTION_POLICY,
            pSourceChangeBatch: *ISyncChangeBatch,
            pUnkDataRetriever: *IUnknown,
            pCallback: *ISyncCallback,
            pSyncSessionStatistics: *SYNC_SESSION_STATISTICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessFullEnumerationChangeBatch: fn(
            self: *const IKnowledgeSyncProvider,
            resolutionPolicy: CONFLICT_RESOLUTION_POLICY,
            pSourceChangeBatch: *ISyncFullEnumerationChangeBatch,
            pUnkDataRetriever: *IUnknown,
            pCallback: *ISyncCallback,
            pSyncSessionStatistics: *SYNC_SESSION_STATISTICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndSession: fn(
            self: *const IKnowledgeSyncProvider,
            pSessionState: *ISyncSessionState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISyncProvider.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnowledgeSyncProvider_BeginSession(self: *const T, role: SYNC_PROVIDER_ROLE, pSessionState: *ISyncSessionState) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnowledgeSyncProvider.VTable, self.vtable).BeginSession(@ptrCast(*const IKnowledgeSyncProvider, self), role, pSessionState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnowledgeSyncProvider_GetSyncBatchParameters(self: *const T, ppSyncKnowledge: **ISyncKnowledge, pdwRequestedBatchSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnowledgeSyncProvider.VTable, self.vtable).GetSyncBatchParameters(@ptrCast(*const IKnowledgeSyncProvider, self), ppSyncKnowledge, pdwRequestedBatchSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnowledgeSyncProvider_GetChangeBatch(self: *const T, dwBatchSize: u32, pSyncKnowledge: *ISyncKnowledge, ppSyncChangeBatch: **ISyncChangeBatch, ppUnkDataRetriever: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnowledgeSyncProvider.VTable, self.vtable).GetChangeBatch(@ptrCast(*const IKnowledgeSyncProvider, self), dwBatchSize, pSyncKnowledge, ppSyncChangeBatch, ppUnkDataRetriever);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnowledgeSyncProvider_GetFullEnumerationChangeBatch(self: *const T, dwBatchSize: u32, pbLowerEnumerationBound: *const u8, pSyncKnowledge: *ISyncKnowledge, ppSyncChangeBatch: **ISyncFullEnumerationChangeBatch, ppUnkDataRetriever: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnowledgeSyncProvider.VTable, self.vtable).GetFullEnumerationChangeBatch(@ptrCast(*const IKnowledgeSyncProvider, self), dwBatchSize, pbLowerEnumerationBound, pSyncKnowledge, ppSyncChangeBatch, ppUnkDataRetriever);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnowledgeSyncProvider_ProcessChangeBatch(self: *const T, resolutionPolicy: CONFLICT_RESOLUTION_POLICY, pSourceChangeBatch: *ISyncChangeBatch, pUnkDataRetriever: *IUnknown, pCallback: *ISyncCallback, pSyncSessionStatistics: *SYNC_SESSION_STATISTICS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnowledgeSyncProvider.VTable, self.vtable).ProcessChangeBatch(@ptrCast(*const IKnowledgeSyncProvider, self), resolutionPolicy, pSourceChangeBatch, pUnkDataRetriever, pCallback, pSyncSessionStatistics);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnowledgeSyncProvider_ProcessFullEnumerationChangeBatch(self: *const T, resolutionPolicy: CONFLICT_RESOLUTION_POLICY, pSourceChangeBatch: *ISyncFullEnumerationChangeBatch, pUnkDataRetriever: *IUnknown, pCallback: *ISyncCallback, pSyncSessionStatistics: *SYNC_SESSION_STATISTICS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnowledgeSyncProvider.VTable, self.vtable).ProcessFullEnumerationChangeBatch(@ptrCast(*const IKnowledgeSyncProvider, self), resolutionPolicy, pSourceChangeBatch, pUnkDataRetriever, pCallback, pSyncSessionStatistics);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKnowledgeSyncProvider_EndSession(self: *const T, pSessionState: *ISyncSessionState) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKnowledgeSyncProvider.VTable, self.vtable).EndSession(@ptrCast(*const IKnowledgeSyncProvider, self), pSessionState);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncChangeUnit_Value = @import("../zig.zig").Guid.initString("60EDD8CA-7341-4BB7-95CE-FAB6394B51CB");
pub const IID_ISyncChangeUnit = &IID_ISyncChangeUnit_Value;
pub const ISyncChangeUnit = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemChange: fn(
            self: *const ISyncChangeUnit,
            ppSyncChange: **ISyncChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeUnitId: fn(
            self: *const ISyncChangeUnit,
            pbChangeUnitId: *u8,
            pcbIdSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeUnitVersion: fn(
            self: *const ISyncChangeUnit,
            pbCurrentReplicaId: *const u8,
            pVersion: *SYNC_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeUnit_GetItemChange(self: *const T, ppSyncChange: **ISyncChange) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeUnit.VTable, self.vtable).GetItemChange(@ptrCast(*const ISyncChangeUnit, self), ppSyncChange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeUnit_GetChangeUnitId(self: *const T, pbChangeUnitId: *u8, pcbIdSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeUnit.VTable, self.vtable).GetChangeUnitId(@ptrCast(*const ISyncChangeUnit, self), pbChangeUnitId, pcbIdSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeUnit_GetChangeUnitVersion(self: *const T, pbCurrentReplicaId: *const u8, pVersion: *SYNC_VERSION) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeUnit.VTable, self.vtable).GetChangeUnitVersion(@ptrCast(*const ISyncChangeUnit, self), pbCurrentReplicaId, pVersion);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumSyncChangeUnits_Value = @import("../zig.zig").Guid.initString("346B35F1-8703-4C6D-AB1A-4DBCA2CFF97F");
pub const IID_IEnumSyncChangeUnits = &IID_IEnumSyncChangeUnits_Value;
pub const IEnumSyncChangeUnits = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumSyncChangeUnits,
            cChanges: u32,
            ppChangeUnit: **ISyncChangeUnit,
            pcFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumSyncChangeUnits,
            cChanges: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumSyncChangeUnits,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumSyncChangeUnits,
            ppEnum: **IEnumSyncChangeUnits,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncChangeUnits_Next(self: *const T, cChanges: u32, ppChangeUnit: **ISyncChangeUnit, pcFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncChangeUnits.VTable, self.vtable).Next(@ptrCast(*const IEnumSyncChangeUnits, self), cChanges, ppChangeUnit, pcFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncChangeUnits_Skip(self: *const T, cChanges: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncChangeUnits.VTable, self.vtable).Skip(@ptrCast(*const IEnumSyncChangeUnits, self), cChanges);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncChangeUnits_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncChangeUnits.VTable, self.vtable).Reset(@ptrCast(*const IEnumSyncChangeUnits, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncChangeUnits_Clone(self: *const T, ppEnum: **IEnumSyncChangeUnits) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncChangeUnits.VTable, self.vtable).Clone(@ptrCast(*const IEnumSyncChangeUnits, self), ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncChange_Value = @import("../zig.zig").Guid.initString("A1952BEB-0F6B-4711-B136-01DA85B968A6");
pub const IID_ISyncChange = &IID_ISyncChange_Value;
pub const ISyncChange = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOwnerReplicaId: fn(
            self: *const ISyncChange,
            pbReplicaId: *u8,
            pcbIdSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRootItemId: fn(
            self: *const ISyncChange,
            pbRootItemId: *u8,
            pcbIdSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeVersion: fn(
            self: *const ISyncChange,
            pbCurrentReplicaId: *const u8,
            pVersion: *SYNC_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCreationVersion: fn(
            self: *const ISyncChange,
            pbCurrentReplicaId: *const u8,
            pVersion: *SYNC_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: fn(
            self: *const ISyncChange,
            pdwFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWorkEstimate: fn(
            self: *const ISyncChange,
            pdwWork: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeUnits: fn(
            self: *const ISyncChange,
            ppEnum: **IEnumSyncChangeUnits,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMadeWithKnowledge: fn(
            self: *const ISyncChange,
            ppMadeWithKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedKnowledge: fn(
            self: *const ISyncChange,
            ppLearnedKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWorkEstimate: fn(
            self: *const ISyncChange,
            dwWork: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChange_GetOwnerReplicaId(self: *const T, pbReplicaId: *u8, pcbIdSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChange.VTable, self.vtable).GetOwnerReplicaId(@ptrCast(*const ISyncChange, self), pbReplicaId, pcbIdSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChange_GetRootItemId(self: *const T, pbRootItemId: *u8, pcbIdSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChange.VTable, self.vtable).GetRootItemId(@ptrCast(*const ISyncChange, self), pbRootItemId, pcbIdSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChange_GetChangeVersion(self: *const T, pbCurrentReplicaId: *const u8, pVersion: *SYNC_VERSION) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChange.VTable, self.vtable).GetChangeVersion(@ptrCast(*const ISyncChange, self), pbCurrentReplicaId, pVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChange_GetCreationVersion(self: *const T, pbCurrentReplicaId: *const u8, pVersion: *SYNC_VERSION) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChange.VTable, self.vtable).GetCreationVersion(@ptrCast(*const ISyncChange, self), pbCurrentReplicaId, pVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChange_GetFlags(self: *const T, pdwFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChange.VTable, self.vtable).GetFlags(@ptrCast(*const ISyncChange, self), pdwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChange_GetWorkEstimate(self: *const T, pdwWork: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChange.VTable, self.vtable).GetWorkEstimate(@ptrCast(*const ISyncChange, self), pdwWork);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChange_GetChangeUnits(self: *const T, ppEnum: **IEnumSyncChangeUnits) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChange.VTable, self.vtable).GetChangeUnits(@ptrCast(*const ISyncChange, self), ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChange_GetMadeWithKnowledge(self: *const T, ppMadeWithKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChange.VTable, self.vtable).GetMadeWithKnowledge(@ptrCast(*const ISyncChange, self), ppMadeWithKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChange_GetLearnedKnowledge(self: *const T, ppLearnedKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChange.VTable, self.vtable).GetLearnedKnowledge(@ptrCast(*const ISyncChange, self), ppLearnedKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChange_SetWorkEstimate(self: *const T, dwWork: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChange.VTable, self.vtable).SetWorkEstimate(@ptrCast(*const ISyncChange, self), dwWork);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncChangeWithPrerequisite_Value = @import("../zig.zig").Guid.initString("9E38382F-1589-48C3-92E4-05ECDCB4F3F7");
pub const IID_ISyncChangeWithPrerequisite = &IID_ISyncChangeWithPrerequisite_Value;
pub const ISyncChangeWithPrerequisite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPrerequisiteKnowledge: fn(
            self: *const ISyncChangeWithPrerequisite,
            ppPrerequisiteKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedKnowledgeWithPrerequisite: fn(
            self: *const ISyncChangeWithPrerequisite,
            pDestinationKnowledge: *ISyncKnowledge,
            ppLearnedKnowledgeWithPrerequisite: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeWithPrerequisite_GetPrerequisiteKnowledge(self: *const T, ppPrerequisiteKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeWithPrerequisite.VTable, self.vtable).GetPrerequisiteKnowledge(@ptrCast(*const ISyncChangeWithPrerequisite, self), ppPrerequisiteKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeWithPrerequisite_GetLearnedKnowledgeWithPrerequisite(self: *const T, pDestinationKnowledge: *ISyncKnowledge, ppLearnedKnowledgeWithPrerequisite: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeWithPrerequisite.VTable, self.vtable).GetLearnedKnowledgeWithPrerequisite(@ptrCast(*const ISyncChangeWithPrerequisite, self), pDestinationKnowledge, ppLearnedKnowledgeWithPrerequisite);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncFullEnumerationChange_Value = @import("../zig.zig").Guid.initString("9785E0BD-BDFF-40C4-98C5-B34B2F1991B3");
pub const IID_ISyncFullEnumerationChange = &IID_ISyncFullEnumerationChange_Value;
pub const ISyncFullEnumerationChange = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLearnedKnowledgeAfterRecoveryComplete: fn(
            self: *const ISyncFullEnumerationChange,
            ppLearnedKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedForgottenKnowledge: fn(
            self: *const ISyncFullEnumerationChange,
            ppLearnedForgottenKnowledge: **IForgottenKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncFullEnumerationChange_GetLearnedKnowledgeAfterRecoveryComplete(self: *const T, ppLearnedKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncFullEnumerationChange.VTable, self.vtable).GetLearnedKnowledgeAfterRecoveryComplete(@ptrCast(*const ISyncFullEnumerationChange, self), ppLearnedKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncFullEnumerationChange_GetLearnedForgottenKnowledge(self: *const T, ppLearnedForgottenKnowledge: **IForgottenKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncFullEnumerationChange.VTable, self.vtable).GetLearnedForgottenKnowledge(@ptrCast(*const ISyncFullEnumerationChange, self), ppLearnedForgottenKnowledge);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncMergeTombstoneChange_Value = @import("../zig.zig").Guid.initString("6EC62597-0903-484C-AD61-36D6E938F47B");
pub const IID_ISyncMergeTombstoneChange = &IID_ISyncMergeTombstoneChange_Value;
pub const ISyncMergeTombstoneChange = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetWinnerItemId: fn(
            self: *const ISyncMergeTombstoneChange,
            pbWinnerItemId: *u8,
            pcbIdSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncMergeTombstoneChange_GetWinnerItemId(self: *const T, pbWinnerItemId: *u8, pcbIdSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncMergeTombstoneChange.VTable, self.vtable).GetWinnerItemId(@ptrCast(*const ISyncMergeTombstoneChange, self), pbWinnerItemId, pcbIdSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumItemIds_Value = @import("../zig.zig").Guid.initString("43AA3F61-4B2E-4B60-83DF-B110D3E148F1");
pub const IID_IEnumItemIds = &IID_IEnumItemIds_Value;
pub const IEnumItemIds = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumItemIds,
            pbItemId: *u8,
            pcbItemIdSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumItemIds_Next(self: *const T, pbItemId: *u8, pcbItemIdSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumItemIds.VTable, self.vtable).Next(@ptrCast(*const IEnumItemIds, self), pbItemId, pcbItemIdSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFilterKeyMap_Value = @import("../zig.zig").Guid.initString("CA169652-07C6-4708-A3DA-6E4EBA8D2297");
pub const IID_IFilterKeyMap = &IID_IFilterKeyMap_Value;
pub const IFilterKeyMap = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IFilterKeyMap,
            pdwCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFilter: fn(
            self: *const IFilterKeyMap,
            pISyncFilter: *ISyncFilter,
            pdwFilterKey: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilter: fn(
            self: *const IFilterKeyMap,
            dwFilterKey: u32,
            ppISyncFilter: **ISyncFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Serialize: fn(
            self: *const IFilterKeyMap,
            pbFilterKeyMap: *u8,
            pcbFilterKeyMap: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFilterKeyMap_GetCount(self: *const T, pdwCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFilterKeyMap.VTable, self.vtable).GetCount(@ptrCast(*const IFilterKeyMap, self), pdwCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFilterKeyMap_AddFilter(self: *const T, pISyncFilter: *ISyncFilter, pdwFilterKey: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFilterKeyMap.VTable, self.vtable).AddFilter(@ptrCast(*const IFilterKeyMap, self), pISyncFilter, pdwFilterKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFilterKeyMap_GetFilter(self: *const T, dwFilterKey: u32, ppISyncFilter: **ISyncFilter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFilterKeyMap.VTable, self.vtable).GetFilter(@ptrCast(*const IFilterKeyMap, self), dwFilterKey, ppISyncFilter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFilterKeyMap_Serialize(self: *const T, pbFilterKeyMap: *u8, pcbFilterKeyMap: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFilterKeyMap.VTable, self.vtable).Serialize(@ptrCast(*const IFilterKeyMap, self), pbFilterKeyMap, pcbFilterKeyMap);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncChangeWithFilterKeyMap_Value = @import("../zig.zig").Guid.initString("BFE1EF00-E87D-42FD-A4E9-242D70414AEF");
pub const IID_ISyncChangeWithFilterKeyMap = &IID_ISyncChangeWithFilterKeyMap_Value;
pub const ISyncChangeWithFilterKeyMap = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFilterCount: fn(
            self: *const ISyncChangeWithFilterKeyMap,
            pdwFilterCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilterChange: fn(
            self: *const ISyncChangeWithFilterKeyMap,
            dwFilterKey: u32,
            pFilterChange: *SYNC_FILTER_CHANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllChangeUnitsPresentFlag: fn(
            self: *const ISyncChangeWithFilterKeyMap,
            pfAllChangeUnitsPresent: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilterForgottenKnowledge: fn(
            self: *const ISyncChangeWithFilterKeyMap,
            dwFilterKey: u32,
            ppIFilterForgottenKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredReplicaLearnedKnowledge: fn(
            self: *const ISyncChangeWithFilterKeyMap,
            pDestinationKnowledge: *ISyncKnowledge,
            pNewMoveins: *IEnumItemIds,
            ppLearnedKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedFilterForgottenKnowledge: fn(
            self: *const ISyncChangeWithFilterKeyMap,
            pDestinationKnowledge: *ISyncKnowledge,
            pNewMoveins: *IEnumItemIds,
            dwFilterKey: u32,
            ppLearnedFilterForgottenKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredReplicaLearnedForgottenKnowledge: fn(
            self: *const ISyncChangeWithFilterKeyMap,
            pDestinationKnowledge: *ISyncKnowledge,
            pNewMoveins: *IEnumItemIds,
            ppLearnedForgottenKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredReplicaLearnedForgottenKnowledgeAfterRecoveryComplete: fn(
            self: *const ISyncChangeWithFilterKeyMap,
            pDestinationKnowledge: *ISyncKnowledge,
            pNewMoveins: *IEnumItemIds,
            ppLearnedForgottenKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedFilterForgottenKnowledgeAfterRecoveryComplete: fn(
            self: *const ISyncChangeWithFilterKeyMap,
            pDestinationKnowledge: *ISyncKnowledge,
            pNewMoveins: *IEnumItemIds,
            dwFilterKey: u32,
            ppLearnedFilterForgottenKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeWithFilterKeyMap_GetFilterCount(self: *const T, pdwFilterCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeWithFilterKeyMap.VTable, self.vtable).GetFilterCount(@ptrCast(*const ISyncChangeWithFilterKeyMap, self), pdwFilterCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeWithFilterKeyMap_GetFilterChange(self: *const T, dwFilterKey: u32, pFilterChange: *SYNC_FILTER_CHANGE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeWithFilterKeyMap.VTable, self.vtable).GetFilterChange(@ptrCast(*const ISyncChangeWithFilterKeyMap, self), dwFilterKey, pFilterChange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeWithFilterKeyMap_GetAllChangeUnitsPresentFlag(self: *const T, pfAllChangeUnitsPresent: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeWithFilterKeyMap.VTable, self.vtable).GetAllChangeUnitsPresentFlag(@ptrCast(*const ISyncChangeWithFilterKeyMap, self), pfAllChangeUnitsPresent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeWithFilterKeyMap_GetFilterForgottenKnowledge(self: *const T, dwFilterKey: u32, ppIFilterForgottenKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeWithFilterKeyMap.VTable, self.vtable).GetFilterForgottenKnowledge(@ptrCast(*const ISyncChangeWithFilterKeyMap, self), dwFilterKey, ppIFilterForgottenKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeWithFilterKeyMap_GetFilteredReplicaLearnedKnowledge(self: *const T, pDestinationKnowledge: *ISyncKnowledge, pNewMoveins: *IEnumItemIds, ppLearnedKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeWithFilterKeyMap.VTable, self.vtable).GetFilteredReplicaLearnedKnowledge(@ptrCast(*const ISyncChangeWithFilterKeyMap, self), pDestinationKnowledge, pNewMoveins, ppLearnedKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeWithFilterKeyMap_GetLearnedFilterForgottenKnowledge(self: *const T, pDestinationKnowledge: *ISyncKnowledge, pNewMoveins: *IEnumItemIds, dwFilterKey: u32, ppLearnedFilterForgottenKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeWithFilterKeyMap.VTable, self.vtable).GetLearnedFilterForgottenKnowledge(@ptrCast(*const ISyncChangeWithFilterKeyMap, self), pDestinationKnowledge, pNewMoveins, dwFilterKey, ppLearnedFilterForgottenKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeWithFilterKeyMap_GetFilteredReplicaLearnedForgottenKnowledge(self: *const T, pDestinationKnowledge: *ISyncKnowledge, pNewMoveins: *IEnumItemIds, ppLearnedForgottenKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeWithFilterKeyMap.VTable, self.vtable).GetFilteredReplicaLearnedForgottenKnowledge(@ptrCast(*const ISyncChangeWithFilterKeyMap, self), pDestinationKnowledge, pNewMoveins, ppLearnedForgottenKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeWithFilterKeyMap_GetFilteredReplicaLearnedForgottenKnowledgeAfterRecoveryComplete(self: *const T, pDestinationKnowledge: *ISyncKnowledge, pNewMoveins: *IEnumItemIds, ppLearnedForgottenKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeWithFilterKeyMap.VTable, self.vtable).GetFilteredReplicaLearnedForgottenKnowledgeAfterRecoveryComplete(@ptrCast(*const ISyncChangeWithFilterKeyMap, self), pDestinationKnowledge, pNewMoveins, ppLearnedForgottenKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeWithFilterKeyMap_GetLearnedFilterForgottenKnowledgeAfterRecoveryComplete(self: *const T, pDestinationKnowledge: *ISyncKnowledge, pNewMoveins: *IEnumItemIds, dwFilterKey: u32, ppLearnedFilterForgottenKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeWithFilterKeyMap.VTable, self.vtable).GetLearnedFilterForgottenKnowledgeAfterRecoveryComplete(@ptrCast(*const ISyncChangeWithFilterKeyMap, self), pDestinationKnowledge, pNewMoveins, dwFilterKey, ppLearnedFilterForgottenKnowledge);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncChangeBatchWithFilterKeyMap_Value = @import("../zig.zig").Guid.initString("DE247002-566D-459A-A6ED-A5AAB3459FB7");
pub const IID_ISyncChangeBatchWithFilterKeyMap = &IID_ISyncChangeBatchWithFilterKeyMap_Value;
pub const ISyncChangeBatchWithFilterKeyMap = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFilterKeyMap: fn(
            self: *const ISyncChangeBatchWithFilterKeyMap,
            ppIFilterKeyMap: **IFilterKeyMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFilterKeyMap: fn(
            self: *const ISyncChangeBatchWithFilterKeyMap,
            pIFilterKeyMap: *IFilterKeyMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFilterForgottenKnowledge: fn(
            self: *const ISyncChangeBatchWithFilterKeyMap,
            dwFilterKey: u32,
            pFilterForgottenKnowledge: *ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredReplicaLearnedKnowledge: fn(
            self: *const ISyncChangeBatchWithFilterKeyMap,
            pDestinationKnowledge: *ISyncKnowledge,
            pNewMoveins: *IEnumItemIds,
            ppLearnedForgottenKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedFilterForgottenKnowledge: fn(
            self: *const ISyncChangeBatchWithFilterKeyMap,
            pDestinationKnowledge: *ISyncKnowledge,
            pNewMoveins: *IEnumItemIds,
            dwFilterKey: u32,
            ppLearnedFilterForgottenKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredReplicaLearnedForgottenKnowledge: fn(
            self: *const ISyncChangeBatchWithFilterKeyMap,
            pDestinationKnowledge: *ISyncKnowledge,
            pNewMoveins: *IEnumItemIds,
            ppLearnedForgottenKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredReplicaLearnedForgottenKnowledgeAfterRecoveryComplete: fn(
            self: *const ISyncChangeBatchWithFilterKeyMap,
            pDestinationKnowledge: *ISyncKnowledge,
            pNewMoveins: *IEnumItemIds,
            ppLearnedForgottenKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedFilterForgottenKnowledgeAfterRecoveryComplete: fn(
            self: *const ISyncChangeBatchWithFilterKeyMap,
            pDestinationKnowledge: *ISyncKnowledge,
            pNewMoveins: *IEnumItemIds,
            dwFilterKey: u32,
            ppLearnedFilterForgottenKnowledge: **ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchWithFilterKeyMap_GetFilterKeyMap(self: *const T, ppIFilterKeyMap: **IFilterKeyMap) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchWithFilterKeyMap.VTable, self.vtable).GetFilterKeyMap(@ptrCast(*const ISyncChangeBatchWithFilterKeyMap, self), ppIFilterKeyMap);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchWithFilterKeyMap_SetFilterKeyMap(self: *const T, pIFilterKeyMap: *IFilterKeyMap) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchWithFilterKeyMap.VTable, self.vtable).SetFilterKeyMap(@ptrCast(*const ISyncChangeBatchWithFilterKeyMap, self), pIFilterKeyMap);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchWithFilterKeyMap_SetFilterForgottenKnowledge(self: *const T, dwFilterKey: u32, pFilterForgottenKnowledge: *ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchWithFilterKeyMap.VTable, self.vtable).SetFilterForgottenKnowledge(@ptrCast(*const ISyncChangeBatchWithFilterKeyMap, self), dwFilterKey, pFilterForgottenKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchWithFilterKeyMap_GetFilteredReplicaLearnedKnowledge(self: *const T, pDestinationKnowledge: *ISyncKnowledge, pNewMoveins: *IEnumItemIds, ppLearnedForgottenKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchWithFilterKeyMap.VTable, self.vtable).GetFilteredReplicaLearnedKnowledge(@ptrCast(*const ISyncChangeBatchWithFilterKeyMap, self), pDestinationKnowledge, pNewMoveins, ppLearnedForgottenKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchWithFilterKeyMap_GetLearnedFilterForgottenKnowledge(self: *const T, pDestinationKnowledge: *ISyncKnowledge, pNewMoveins: *IEnumItemIds, dwFilterKey: u32, ppLearnedFilterForgottenKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchWithFilterKeyMap.VTable, self.vtable).GetLearnedFilterForgottenKnowledge(@ptrCast(*const ISyncChangeBatchWithFilterKeyMap, self), pDestinationKnowledge, pNewMoveins, dwFilterKey, ppLearnedFilterForgottenKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchWithFilterKeyMap_GetFilteredReplicaLearnedForgottenKnowledge(self: *const T, pDestinationKnowledge: *ISyncKnowledge, pNewMoveins: *IEnumItemIds, ppLearnedForgottenKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchWithFilterKeyMap.VTable, self.vtable).GetFilteredReplicaLearnedForgottenKnowledge(@ptrCast(*const ISyncChangeBatchWithFilterKeyMap, self), pDestinationKnowledge, pNewMoveins, ppLearnedForgottenKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchWithFilterKeyMap_GetFilteredReplicaLearnedForgottenKnowledgeAfterRecoveryComplete(self: *const T, pDestinationKnowledge: *ISyncKnowledge, pNewMoveins: *IEnumItemIds, ppLearnedForgottenKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchWithFilterKeyMap.VTable, self.vtable).GetFilteredReplicaLearnedForgottenKnowledgeAfterRecoveryComplete(@ptrCast(*const ISyncChangeBatchWithFilterKeyMap, self), pDestinationKnowledge, pNewMoveins, ppLearnedForgottenKnowledge);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncChangeBatchWithFilterKeyMap_GetLearnedFilterForgottenKnowledgeAfterRecoveryComplete(self: *const T, pDestinationKnowledge: *ISyncKnowledge, pNewMoveins: *IEnumItemIds, dwFilterKey: u32, ppLearnedFilterForgottenKnowledge: **ISyncKnowledge) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncChangeBatchWithFilterKeyMap.VTable, self.vtable).GetLearnedFilterForgottenKnowledgeAfterRecoveryComplete(@ptrCast(*const ISyncChangeBatchWithFilterKeyMap, self), pDestinationKnowledge, pNewMoveins, dwFilterKey, ppLearnedFilterForgottenKnowledge);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDataRetrieverCallback_Value = @import("../zig.zig").Guid.initString("71B4863B-F969-4676-BBC3-3D9FDC3FB2C7");
pub const IID_IDataRetrieverCallback = &IID_IDataRetrieverCallback_Value;
pub const IDataRetrieverCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LoadChangeDataComplete: fn(
            self: *const IDataRetrieverCallback,
            pUnkData: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadChangeDataError: fn(
            self: *const IDataRetrieverCallback,
            hrError: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataRetrieverCallback_LoadChangeDataComplete(self: *const T, pUnkData: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataRetrieverCallback.VTable, self.vtable).LoadChangeDataComplete(@ptrCast(*const IDataRetrieverCallback, self), pUnkData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDataRetrieverCallback_LoadChangeDataError(self: *const T, hrError: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDataRetrieverCallback.VTable, self.vtable).LoadChangeDataError(@ptrCast(*const IDataRetrieverCallback, self), hrError);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILoadChangeContext_Value = @import("../zig.zig").Guid.initString("44A4AACA-EC39-46D5-B5C9-D633C0EE67E2");
pub const IID_ILoadChangeContext = &IID_ILoadChangeContext_Value;
pub const ILoadChangeContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSyncChange: fn(
            self: *const ILoadChangeContext,
            ppSyncChange: **ISyncChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRecoverableErrorOnChange: fn(
            self: *const ILoadChangeContext,
            hrError: HRESULT,
            pErrorData: *IRecoverableErrorData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRecoverableErrorOnChangeUnit: fn(
            self: *const ILoadChangeContext,
            hrError: HRESULT,
            pChangeUnit: *ISyncChangeUnit,
            pErrorData: *IRecoverableErrorData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILoadChangeContext_GetSyncChange(self: *const T, ppSyncChange: **ISyncChange) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILoadChangeContext.VTable, self.vtable).GetSyncChange(@ptrCast(*const ILoadChangeContext, self), ppSyncChange);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILoadChangeContext_SetRecoverableErrorOnChange(self: *const T, hrError: HRESULT, pErrorData: *IRecoverableErrorData) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILoadChangeContext.VTable, self.vtable).SetRecoverableErrorOnChange(@ptrCast(*const ILoadChangeContext, self), hrError, pErrorData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILoadChangeContext_SetRecoverableErrorOnChangeUnit(self: *const T, hrError: HRESULT, pChangeUnit: *ISyncChangeUnit, pErrorData: *IRecoverableErrorData) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILoadChangeContext.VTable, self.vtable).SetRecoverableErrorOnChangeUnit(@ptrCast(*const ILoadChangeContext, self), hrError, pChangeUnit, pErrorData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISynchronousDataRetriever_Value = @import("../zig.zig").Guid.initString("9B22F2A9-A4CD-4648-9D8E-3A510D4DA04B");
pub const IID_ISynchronousDataRetriever = &IID_ISynchronousDataRetriever_Value;
pub const ISynchronousDataRetriever = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIdParameters: fn(
            self: *const ISynchronousDataRetriever,
            pIdParameters: *ID_PARAMETERS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadChangeData: fn(
            self: *const ISynchronousDataRetriever,
            pLoadChangeContext: *ILoadChangeContext,
            ppUnkData: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISynchronousDataRetriever_GetIdParameters(self: *const T, pIdParameters: *ID_PARAMETERS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISynchronousDataRetriever.VTable, self.vtable).GetIdParameters(@ptrCast(*const ISynchronousDataRetriever, self), pIdParameters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISynchronousDataRetriever_LoadChangeData(self: *const T, pLoadChangeContext: *ILoadChangeContext, ppUnkData: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISynchronousDataRetriever.VTable, self.vtable).LoadChangeData(@ptrCast(*const ISynchronousDataRetriever, self), pLoadChangeContext, ppUnkData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAsynchronousDataRetriever_Value = @import("../zig.zig").Guid.initString("9FC7E470-61EA-4A88-9BE4-DF56A27CFEF2");
pub const IID_IAsynchronousDataRetriever = &IID_IAsynchronousDataRetriever_Value;
pub const IAsynchronousDataRetriever = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIdParameters: fn(
            self: *const IAsynchronousDataRetriever,
            pIdParameters: *ID_PARAMETERS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterCallback: fn(
            self: *const IAsynchronousDataRetriever,
            pDataRetrieverCallback: *IDataRetrieverCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RevokeCallback: fn(
            self: *const IAsynchronousDataRetriever,
            pDataRetrieverCallback: *IDataRetrieverCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadChangeData: fn(
            self: *const IAsynchronousDataRetriever,
            pLoadChangeContext: *ILoadChangeContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAsynchronousDataRetriever_GetIdParameters(self: *const T, pIdParameters: *ID_PARAMETERS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAsynchronousDataRetriever.VTable, self.vtable).GetIdParameters(@ptrCast(*const IAsynchronousDataRetriever, self), pIdParameters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAsynchronousDataRetriever_RegisterCallback(self: *const T, pDataRetrieverCallback: *IDataRetrieverCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAsynchronousDataRetriever.VTable, self.vtable).RegisterCallback(@ptrCast(*const IAsynchronousDataRetriever, self), pDataRetrieverCallback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAsynchronousDataRetriever_RevokeCallback(self: *const T, pDataRetrieverCallback: *IDataRetrieverCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAsynchronousDataRetriever.VTable, self.vtable).RevokeCallback(@ptrCast(*const IAsynchronousDataRetriever, self), pDataRetrieverCallback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAsynchronousDataRetriever_LoadChangeData(self: *const T, pLoadChangeContext: *ILoadChangeContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAsynchronousDataRetriever.VTable, self.vtable).LoadChangeData(@ptrCast(*const IAsynchronousDataRetriever, self), pLoadChangeContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFilterRequestCallback_Value = @import("../zig.zig").Guid.initString("82DF8873-6360-463A-A8A1-EDE5E1A1594D");
pub const IID_IFilterRequestCallback = &IID_IFilterRequestCallback_Value;
pub const IFilterRequestCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RequestFilter: fn(
            self: *const IFilterRequestCallback,
            pFilter: ?*IUnknown,
            filteringType: FILTERING_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFilterRequestCallback_RequestFilter(self: *const T, pFilter: ?*IUnknown, filteringType: FILTERING_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFilterRequestCallback.VTable, self.vtable).RequestFilter(@ptrCast(*const IFilterRequestCallback, self), pFilter, filteringType);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRequestFilteredSync_Value = @import("../zig.zig").Guid.initString("2E020184-6D18-46A7-A32A-DA4AEB06696C");
pub const IID_IRequestFilteredSync = &IID_IRequestFilteredSync_Value;
pub const IRequestFilteredSync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SpecifyFilter: fn(
            self: *const IRequestFilteredSync,
            pCallback: ?*IFilterRequestCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRequestFilteredSync_SpecifyFilter(self: *const T, pCallback: ?*IFilterRequestCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRequestFilteredSync.VTable, self.vtable).SpecifyFilter(@ptrCast(*const IRequestFilteredSync, self), pCallback);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISupportFilteredSync_Value = @import("../zig.zig").Guid.initString("3D128DED-D555-4E0D-BF4B-FB213A8A9302");
pub const IID_ISupportFilteredSync = &IID_ISupportFilteredSync_Value;
pub const ISupportFilteredSync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddFilter: fn(
            self: *const ISupportFilteredSync,
            pFilter: ?*IUnknown,
            filteringType: FILTERING_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISupportFilteredSync_AddFilter(self: *const T, pFilter: ?*IUnknown, filteringType: FILTERING_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISupportFilteredSync.VTable, self.vtable).AddFilter(@ptrCast(*const ISupportFilteredSync, self), pFilter, filteringType);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFilterTrackingRequestCallback_Value = @import("../zig.zig").Guid.initString("713CA7BB-C858-4674-B4B6-1122436587A9");
pub const IID_IFilterTrackingRequestCallback = &IID_IFilterTrackingRequestCallback_Value;
pub const IFilterTrackingRequestCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RequestTrackedFilter: fn(
            self: *const IFilterTrackingRequestCallback,
            pFilter: ?*ISyncFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFilterTrackingRequestCallback_RequestTrackedFilter(self: *const T, pFilter: ?*ISyncFilter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFilterTrackingRequestCallback.VTable, self.vtable).RequestTrackedFilter(@ptrCast(*const IFilterTrackingRequestCallback, self), pFilter);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFilterTrackingProvider_Value = @import("../zig.zig").Guid.initString("743383C0-FC4E-45BA-AD81-D9D84C7A24F8");
pub const IID_IFilterTrackingProvider = &IID_IFilterTrackingProvider_Value;
pub const IFilterTrackingProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SpecifyTrackedFilters: fn(
            self: *const IFilterTrackingProvider,
            pCallback: ?*IFilterTrackingRequestCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTrackedFilter: fn(
            self: *const IFilterTrackingProvider,
            pFilter: ?*ISyncFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFilterTrackingProvider_SpecifyTrackedFilters(self: *const T, pCallback: ?*IFilterTrackingRequestCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFilterTrackingProvider.VTable, self.vtable).SpecifyTrackedFilters(@ptrCast(*const IFilterTrackingProvider, self), pCallback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFilterTrackingProvider_AddTrackedFilter(self: *const T, pFilter: ?*ISyncFilter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFilterTrackingProvider.VTable, self.vtable).AddTrackedFilter(@ptrCast(*const IFilterTrackingProvider, self), pFilter);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISupportLastWriteTime_Value = @import("../zig.zig").Guid.initString("EADF816F-D0BD-43CA-8F40-5ACDC6C06F7A");
pub const IID_ISupportLastWriteTime = &IID_ISupportLastWriteTime_Value;
pub const ISupportLastWriteTime = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemChangeTime: fn(
            self: *const ISupportLastWriteTime,
            pbItemId: *const u8,
            pullTimestamp: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeUnitChangeTime: fn(
            self: *const ISupportLastWriteTime,
            pbItemId: *const u8,
            pbChangeUnitId: *const u8,
            pullTimestamp: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISupportLastWriteTime_GetItemChangeTime(self: *const T, pbItemId: *const u8, pullTimestamp: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISupportLastWriteTime.VTable, self.vtable).GetItemChangeTime(@ptrCast(*const ISupportLastWriteTime, self), pbItemId, pullTimestamp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISupportLastWriteTime_GetChangeUnitChangeTime(self: *const T, pbItemId: *const u8, pbChangeUnitId: *const u8, pullTimestamp: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISupportLastWriteTime.VTable, self.vtable).GetChangeUnitChangeTime(@ptrCast(*const ISupportLastWriteTime, self), pbItemId, pbChangeUnitId, pullTimestamp);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IProviderConverter_Value = @import("../zig.zig").Guid.initString("809B7276-98CF-4957-93A5-0EBDD3DDDFFD");
pub const IID_IProviderConverter = &IID_IProviderConverter_Value;
pub const IProviderConverter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IProviderConverter,
            pISyncProvider: *ISyncProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProviderConverter_Initialize(self: *const T, pISyncProvider: *ISyncProvider) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProviderConverter.VTable, self.vtable).Initialize(@ptrCast(*const IProviderConverter, self), pISyncProvider);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncDataConverter_Value = @import("../zig.zig").Guid.initString("435D4861-68D5-44AA-A0F9-72A0B00EF9CF");
pub const IID_ISyncDataConverter = &IID_ISyncDataConverter_Value;
pub const ISyncDataConverter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConvertDataRetrieverFromProviderFormat: fn(
            self: *const ISyncDataConverter,
            pUnkDataRetrieverIn: *IUnknown,
            pEnumSyncChanges: *IEnumSyncChanges,
            ppUnkDataOut: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertDataRetrieverToProviderFormat: fn(
            self: *const ISyncDataConverter,
            pUnkDataRetrieverIn: *IUnknown,
            pEnumSyncChanges: *IEnumSyncChanges,
            ppUnkDataOut: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertDataFromProviderFormat: fn(
            self: *const ISyncDataConverter,
            pDataContext: *ILoadChangeContext,
            pUnkDataIn: *IUnknown,
            ppUnkDataOut: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertDataToProviderFormat: fn(
            self: *const ISyncDataConverter,
            pDataContext: *ILoadChangeContext,
            pUnkDataOut: *IUnknown,
            ppUnkDataout: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncDataConverter_ConvertDataRetrieverFromProviderFormat(self: *const T, pUnkDataRetrieverIn: *IUnknown, pEnumSyncChanges: *IEnumSyncChanges, ppUnkDataOut: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncDataConverter.VTable, self.vtable).ConvertDataRetrieverFromProviderFormat(@ptrCast(*const ISyncDataConverter, self), pUnkDataRetrieverIn, pEnumSyncChanges, ppUnkDataOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncDataConverter_ConvertDataRetrieverToProviderFormat(self: *const T, pUnkDataRetrieverIn: *IUnknown, pEnumSyncChanges: *IEnumSyncChanges, ppUnkDataOut: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncDataConverter.VTable, self.vtable).ConvertDataRetrieverToProviderFormat(@ptrCast(*const ISyncDataConverter, self), pUnkDataRetrieverIn, pEnumSyncChanges, ppUnkDataOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncDataConverter_ConvertDataFromProviderFormat(self: *const T, pDataContext: *ILoadChangeContext, pUnkDataIn: *IUnknown, ppUnkDataOut: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncDataConverter.VTable, self.vtable).ConvertDataFromProviderFormat(@ptrCast(*const ISyncDataConverter, self), pDataContext, pUnkDataIn, ppUnkDataOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncDataConverter_ConvertDataToProviderFormat(self: *const T, pDataContext: *ILoadChangeContext, pUnkDataOut: *IUnknown, ppUnkDataout: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncDataConverter.VTable, self.vtable).ConvertDataToProviderFormat(@ptrCast(*const ISyncDataConverter, self), pDataContext, pUnkDataOut, ppUnkDataout);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_SyncProviderRegistration_Value = @import("../zig.zig").Guid.initString("F82B4EF1-93A9-4DDE-8015-F7950A1A6E31");
pub const CLSID_SyncProviderRegistration = &CLSID_SyncProviderRegistration_Value;

pub const SyncProviderConfiguration = extern struct {
    dwVersion: u32,
    guidInstanceId: Guid,
    clsidProvider: Guid,
    guidConfigUIInstanceId: Guid,
    guidContentType: Guid,
    dwCapabilities: u32,
    dwSupportedArchitecture: u32,
};

pub const SyncProviderConfigUIConfiguration = extern struct {
    dwVersion: u32,
    guidInstanceId: Guid,
    clsidConfigUI: Guid,
    guidContentType: Guid,
    dwCapabilities: u32,
    dwSupportedArchitecture: u32,
    fIsGlobal: BOOL,
};

const IID_ISyncProviderRegistration_Value = @import("../zig.zig").Guid.initString("CB45953B-7624-47BC-A472-EB8CAC6B222E");
pub const IID_ISyncProviderRegistration = &IID_ISyncProviderRegistration_Value;
pub const ISyncProviderRegistration = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateSyncProviderConfigUIRegistrationInstance: fn(
            self: *const ISyncProviderRegistration,
            pConfigUIConfig: *const SyncProviderConfigUIConfiguration,
            ppConfigUIInfo: **ISyncProviderConfigUIInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterSyncProviderConfigUI: fn(
            self: *const ISyncProviderRegistration,
            pguidInstanceId: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateSyncProviderConfigUIs: fn(
            self: *const ISyncProviderRegistration,
            pguidContentType: ?*Guid,
            dwSupportedArchitecture: u32,
            ppEnumSyncProviderConfigUIInfos: **IEnumSyncProviderConfigUIInfos,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSyncProviderRegistrationInstance: fn(
            self: *const ISyncProviderRegistration,
            pProviderConfiguration: *const SyncProviderConfiguration,
            ppProviderInfo: **ISyncProviderInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterSyncProvider: fn(
            self: *const ISyncProviderRegistration,
            pguidInstanceId: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncProviderConfigUIInfoforProvider: fn(
            self: *const ISyncProviderRegistration,
            pguidProviderInstanceId: *Guid,
            ppProviderConfigUIInfo: **ISyncProviderConfigUIInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateSyncProviders: fn(
            self: *const ISyncProviderRegistration,
            pguidContentType: ?*Guid,
            dwStateFlagsToFilterMask: u32,
            dwStateFlagsToFilter: u32,
            refProviderClsId: *const Guid,
            dwSupportedArchitecture: u32,
            ppEnumSyncProviderInfos: **IEnumSyncProviderInfos,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncProviderInfo: fn(
            self: *const ISyncProviderRegistration,
            pguidInstanceId: *Guid,
            ppProviderInfo: **ISyncProviderInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncProviderFromInstanceId: fn(
            self: *const ISyncProviderRegistration,
            pguidInstanceId: *Guid,
            dwClsContext: u32,
            ppSyncProvider: **IRegisteredSyncProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncProviderConfigUIInfo: fn(
            self: *const ISyncProviderRegistration,
            pguidInstanceId: *Guid,
            ppConfigUIInfo: **ISyncProviderConfigUIInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncProviderConfigUIFromInstanceId: fn(
            self: *const ISyncProviderRegistration,
            pguidInstanceId: *Guid,
            dwClsContext: u32,
            ppConfigUI: **ISyncProviderConfigUI,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncProviderState: fn(
            self: *const ISyncProviderRegistration,
            pguidInstanceId: *Guid,
            pdwStateFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSyncProviderState: fn(
            self: *const ISyncProviderRegistration,
            pguidInstanceId: *Guid,
            dwStateFlagsMask: u32,
            dwStateFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterForEvent: fn(
            self: *const ISyncProviderRegistration,
            phEvent: *HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RevokeEvent: fn(
            self: *const ISyncProviderRegistration,
            hEvent: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChange: fn(
            self: *const ISyncProviderRegistration,
            hEvent: HANDLE,
            ppChange: **ISyncRegistrationChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderRegistration_CreateSyncProviderConfigUIRegistrationInstance(self: *const T, pConfigUIConfig: *const SyncProviderConfigUIConfiguration, ppConfigUIInfo: **ISyncProviderConfigUIInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderRegistration.VTable, self.vtable).CreateSyncProviderConfigUIRegistrationInstance(@ptrCast(*const ISyncProviderRegistration, self), pConfigUIConfig, ppConfigUIInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderRegistration_UnregisterSyncProviderConfigUI(self: *const T, pguidInstanceId: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderRegistration.VTable, self.vtable).UnregisterSyncProviderConfigUI(@ptrCast(*const ISyncProviderRegistration, self), pguidInstanceId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderRegistration_EnumerateSyncProviderConfigUIs(self: *const T, pguidContentType: ?*Guid, dwSupportedArchitecture: u32, ppEnumSyncProviderConfigUIInfos: **IEnumSyncProviderConfigUIInfos) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderRegistration.VTable, self.vtable).EnumerateSyncProviderConfigUIs(@ptrCast(*const ISyncProviderRegistration, self), pguidContentType, dwSupportedArchitecture, ppEnumSyncProviderConfigUIInfos);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderRegistration_CreateSyncProviderRegistrationInstance(self: *const T, pProviderConfiguration: *const SyncProviderConfiguration, ppProviderInfo: **ISyncProviderInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderRegistration.VTable, self.vtable).CreateSyncProviderRegistrationInstance(@ptrCast(*const ISyncProviderRegistration, self), pProviderConfiguration, ppProviderInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderRegistration_UnregisterSyncProvider(self: *const T, pguidInstanceId: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderRegistration.VTable, self.vtable).UnregisterSyncProvider(@ptrCast(*const ISyncProviderRegistration, self), pguidInstanceId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderRegistration_GetSyncProviderConfigUIInfoforProvider(self: *const T, pguidProviderInstanceId: *Guid, ppProviderConfigUIInfo: **ISyncProviderConfigUIInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderRegistration.VTable, self.vtable).GetSyncProviderConfigUIInfoforProvider(@ptrCast(*const ISyncProviderRegistration, self), pguidProviderInstanceId, ppProviderConfigUIInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderRegistration_EnumerateSyncProviders(self: *const T, pguidContentType: ?*Guid, dwStateFlagsToFilterMask: u32, dwStateFlagsToFilter: u32, refProviderClsId: *const Guid, dwSupportedArchitecture: u32, ppEnumSyncProviderInfos: **IEnumSyncProviderInfos) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderRegistration.VTable, self.vtable).EnumerateSyncProviders(@ptrCast(*const ISyncProviderRegistration, self), pguidContentType, dwStateFlagsToFilterMask, dwStateFlagsToFilter, refProviderClsId, dwSupportedArchitecture, ppEnumSyncProviderInfos);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderRegistration_GetSyncProviderInfo(self: *const T, pguidInstanceId: *Guid, ppProviderInfo: **ISyncProviderInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderRegistration.VTable, self.vtable).GetSyncProviderInfo(@ptrCast(*const ISyncProviderRegistration, self), pguidInstanceId, ppProviderInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderRegistration_GetSyncProviderFromInstanceId(self: *const T, pguidInstanceId: *Guid, dwClsContext: u32, ppSyncProvider: **IRegisteredSyncProvider) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderRegistration.VTable, self.vtable).GetSyncProviderFromInstanceId(@ptrCast(*const ISyncProviderRegistration, self), pguidInstanceId, dwClsContext, ppSyncProvider);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderRegistration_GetSyncProviderConfigUIInfo(self: *const T, pguidInstanceId: *Guid, ppConfigUIInfo: **ISyncProviderConfigUIInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderRegistration.VTable, self.vtable).GetSyncProviderConfigUIInfo(@ptrCast(*const ISyncProviderRegistration, self), pguidInstanceId, ppConfigUIInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderRegistration_GetSyncProviderConfigUIFromInstanceId(self: *const T, pguidInstanceId: *Guid, dwClsContext: u32, ppConfigUI: **ISyncProviderConfigUI) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderRegistration.VTable, self.vtable).GetSyncProviderConfigUIFromInstanceId(@ptrCast(*const ISyncProviderRegistration, self), pguidInstanceId, dwClsContext, ppConfigUI);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderRegistration_GetSyncProviderState(self: *const T, pguidInstanceId: *Guid, pdwStateFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderRegistration.VTable, self.vtable).GetSyncProviderState(@ptrCast(*const ISyncProviderRegistration, self), pguidInstanceId, pdwStateFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderRegistration_SetSyncProviderState(self: *const T, pguidInstanceId: *Guid, dwStateFlagsMask: u32, dwStateFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderRegistration.VTable, self.vtable).SetSyncProviderState(@ptrCast(*const ISyncProviderRegistration, self), pguidInstanceId, dwStateFlagsMask, dwStateFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderRegistration_RegisterForEvent(self: *const T, phEvent: *HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderRegistration.VTable, self.vtable).RegisterForEvent(@ptrCast(*const ISyncProviderRegistration, self), phEvent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderRegistration_RevokeEvent(self: *const T, hEvent: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderRegistration.VTable, self.vtable).RevokeEvent(@ptrCast(*const ISyncProviderRegistration, self), hEvent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderRegistration_GetChange(self: *const T, hEvent: HANDLE, ppChange: **ISyncRegistrationChange) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderRegistration.VTable, self.vtable).GetChange(@ptrCast(*const ISyncProviderRegistration, self), hEvent, ppChange);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumSyncProviderConfigUIInfos_Value = @import("../zig.zig").Guid.initString("F6BE2602-17C6-4658-A2D7-68ED3330F641");
pub const IID_IEnumSyncProviderConfigUIInfos = &IID_IEnumSyncProviderConfigUIInfos_Value;
pub const IEnumSyncProviderConfigUIInfos = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumSyncProviderConfigUIInfos,
            cFactories: u32,
            ppSyncProviderConfigUIInfo: [*]*ISyncProviderConfigUIInfo,
            pcFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumSyncProviderConfigUIInfos,
            cFactories: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumSyncProviderConfigUIInfos,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumSyncProviderConfigUIInfos,
            ppEnum: **IEnumSyncProviderConfigUIInfos,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncProviderConfigUIInfos_Next(self: *const T, cFactories: u32, ppSyncProviderConfigUIInfo: [*]*ISyncProviderConfigUIInfo, pcFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncProviderConfigUIInfos.VTable, self.vtable).Next(@ptrCast(*const IEnumSyncProviderConfigUIInfos, self), cFactories, ppSyncProviderConfigUIInfo, pcFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncProviderConfigUIInfos_Skip(self: *const T, cFactories: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncProviderConfigUIInfos.VTable, self.vtable).Skip(@ptrCast(*const IEnumSyncProviderConfigUIInfos, self), cFactories);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncProviderConfigUIInfos_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncProviderConfigUIInfos.VTable, self.vtable).Reset(@ptrCast(*const IEnumSyncProviderConfigUIInfos, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncProviderConfigUIInfos_Clone(self: *const T, ppEnum: **IEnumSyncProviderConfigUIInfos) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncProviderConfigUIInfos.VTable, self.vtable).Clone(@ptrCast(*const IEnumSyncProviderConfigUIInfos, self), ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumSyncProviderInfos_Value = @import("../zig.zig").Guid.initString("A04BA850-5EB1-460D-A973-393FCB608A11");
pub const IID_IEnumSyncProviderInfos = &IID_IEnumSyncProviderInfos_Value;
pub const IEnumSyncProviderInfos = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumSyncProviderInfos,
            cInstances: u32,
            ppSyncProviderInfo: [*]*ISyncProviderInfo,
            pcFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumSyncProviderInfos,
            cInstances: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumSyncProviderInfos,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumSyncProviderInfos,
            ppEnum: **IEnumSyncProviderInfos,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncProviderInfos_Next(self: *const T, cInstances: u32, ppSyncProviderInfo: [*]*ISyncProviderInfo, pcFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncProviderInfos.VTable, self.vtable).Next(@ptrCast(*const IEnumSyncProviderInfos, self), cInstances, ppSyncProviderInfo, pcFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncProviderInfos_Skip(self: *const T, cInstances: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncProviderInfos.VTable, self.vtable).Skip(@ptrCast(*const IEnumSyncProviderInfos, self), cInstances);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncProviderInfos_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncProviderInfos.VTable, self.vtable).Reset(@ptrCast(*const IEnumSyncProviderInfos, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSyncProviderInfos_Clone(self: *const T, ppEnum: **IEnumSyncProviderInfos) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSyncProviderInfos.VTable, self.vtable).Clone(@ptrCast(*const IEnumSyncProviderInfos, self), ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncProviderInfo_Value = @import("../zig.zig").Guid.initString("1EE135DE-88A4-4504-B0D0-F7920D7E5BA6");
pub const IID_ISyncProviderInfo = &IID_ISyncProviderInfo_Value;
pub const ISyncProviderInfo = extern struct {
    pub const VTable = extern struct {
        base: IPropertyStore.VTable,
        GetSyncProvider: fn(
            self: *const ISyncProviderInfo,
            dwClsContext: u32,
            ppSyncProvider: **IRegisteredSyncProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPropertyStore.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderInfo_GetSyncProvider(self: *const T, dwClsContext: u32, ppSyncProvider: **IRegisteredSyncProvider) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderInfo.VTable, self.vtable).GetSyncProvider(@ptrCast(*const ISyncProviderInfo, self), dwClsContext, ppSyncProvider);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncProviderConfigUIInfo_Value = @import("../zig.zig").Guid.initString("214141AE-33D7-4D8D-8E37-F227E880CE50");
pub const IID_ISyncProviderConfigUIInfo = &IID_ISyncProviderConfigUIInfo_Value;
pub const ISyncProviderConfigUIInfo = extern struct {
    pub const VTable = extern struct {
        base: IPropertyStore.VTable,
        GetSyncProviderConfigUI: fn(
            self: *const ISyncProviderConfigUIInfo,
            dwClsContext: u32,
            ppSyncProviderConfigUI: **ISyncProviderConfigUI,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPropertyStore.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderConfigUIInfo_GetSyncProviderConfigUI(self: *const T, dwClsContext: u32, ppSyncProviderConfigUI: **ISyncProviderConfigUI) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderConfigUIInfo.VTable, self.vtable).GetSyncProviderConfigUI(@ptrCast(*const ISyncProviderConfigUIInfo, self), dwClsContext, ppSyncProviderConfigUI);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncProviderConfigUI_Value = @import("../zig.zig").Guid.initString("7B0705F6-CBCD-4071-AB05-3BDC364D4A0C");
pub const IID_ISyncProviderConfigUI = &IID_ISyncProviderConfigUI_Value;
pub const ISyncProviderConfigUI = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: fn(
            self: *const ISyncProviderConfigUI,
            pguidInstanceId: *Guid,
            pguidContentType: *Guid,
            pConfigurationProperties: ?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegisteredProperties: fn(
            self: *const ISyncProviderConfigUI,
            ppConfigUIProperties: **IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAndRegisterNewSyncProvider: fn(
            self: *const ISyncProviderConfigUI,
            hwndParent: HWND,
            pUnkContext: ?*IUnknown,
            ppProviderInfo: **ISyncProviderInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ModifySyncProvider: fn(
            self: *const ISyncProviderConfigUI,
            hwndParent: HWND,
            pUnkContext: ?*IUnknown,
            pProviderInfo: ?*ISyncProviderInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderConfigUI_Init(self: *const T, pguidInstanceId: *Guid, pguidContentType: *Guid, pConfigurationProperties: ?*IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderConfigUI.VTable, self.vtable).Init(@ptrCast(*const ISyncProviderConfigUI, self), pguidInstanceId, pguidContentType, pConfigurationProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderConfigUI_GetRegisteredProperties(self: *const T, ppConfigUIProperties: **IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderConfigUI.VTable, self.vtable).GetRegisteredProperties(@ptrCast(*const ISyncProviderConfigUI, self), ppConfigUIProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderConfigUI_CreateAndRegisterNewSyncProvider(self: *const T, hwndParent: HWND, pUnkContext: ?*IUnknown, ppProviderInfo: **ISyncProviderInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderConfigUI.VTable, self.vtable).CreateAndRegisterNewSyncProvider(@ptrCast(*const ISyncProviderConfigUI, self), hwndParent, pUnkContext, ppProviderInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncProviderConfigUI_ModifySyncProvider(self: *const T, hwndParent: HWND, pUnkContext: ?*IUnknown, pProviderInfo: ?*ISyncProviderInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncProviderConfigUI.VTable, self.vtable).ModifySyncProvider(@ptrCast(*const ISyncProviderConfigUI, self), hwndParent, pUnkContext, pProviderInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRegisteredSyncProvider_Value = @import("../zig.zig").Guid.initString("913BCF76-47C1-40B5-A896-5E8A9C414C14");
pub const IID_IRegisteredSyncProvider = &IID_IRegisteredSyncProvider_Value;
pub const IRegisteredSyncProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: fn(
            self: *const IRegisteredSyncProvider,
            pguidInstanceId: *Guid,
            pguidContentType: *Guid,
            pContextPropertyStore: ?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInstanceId: fn(
            self: *const IRegisteredSyncProvider,
            pguidInstanceId: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IRegisteredSyncProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRegisteredSyncProvider_Init(self: *const T, pguidInstanceId: *Guid, pguidContentType: *Guid, pContextPropertyStore: ?*IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRegisteredSyncProvider.VTable, self.vtable).Init(@ptrCast(*const IRegisteredSyncProvider, self), pguidInstanceId, pguidContentType, pContextPropertyStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRegisteredSyncProvider_GetInstanceId(self: *const T, pguidInstanceId: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRegisteredSyncProvider.VTable, self.vtable).GetInstanceId(@ptrCast(*const IRegisteredSyncProvider, self), pguidInstanceId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRegisteredSyncProvider_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRegisteredSyncProvider.VTable, self.vtable).Reset(@ptrCast(*const IRegisteredSyncProvider, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SYNC_REGISTRATION_EVENT = extern enum(i32) {
    SRE_PROVIDER_ADDED = 0,
    SRE_PROVIDER_REMOVED = 1,
    SRE_PROVIDER_UPDATED = 2,
    SRE_PROVIDER_STATE_CHANGED = 3,
    SRE_CONFIGUI_ADDED = 4,
    SRE_CONFIGUI_REMOVED = 5,
    SRE_CONFIGUI_UPDATED = 6,
};
pub const SRE_PROVIDER_ADDED = SYNC_REGISTRATION_EVENT.SRE_PROVIDER_ADDED;
pub const SRE_PROVIDER_REMOVED = SYNC_REGISTRATION_EVENT.SRE_PROVIDER_REMOVED;
pub const SRE_PROVIDER_UPDATED = SYNC_REGISTRATION_EVENT.SRE_PROVIDER_UPDATED;
pub const SRE_PROVIDER_STATE_CHANGED = SYNC_REGISTRATION_EVENT.SRE_PROVIDER_STATE_CHANGED;
pub const SRE_CONFIGUI_ADDED = SYNC_REGISTRATION_EVENT.SRE_CONFIGUI_ADDED;
pub const SRE_CONFIGUI_REMOVED = SYNC_REGISTRATION_EVENT.SRE_CONFIGUI_REMOVED;
pub const SRE_CONFIGUI_UPDATED = SYNC_REGISTRATION_EVENT.SRE_CONFIGUI_UPDATED;

const IID_ISyncRegistrationChange_Value = @import("../zig.zig").Guid.initString("EEA0D9AE-6B29-43B4-9E70-E3AE33BB2C3B");
pub const IID_ISyncRegistrationChange = &IID_ISyncRegistrationChange_Value;
pub const ISyncRegistrationChange = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetEvent: fn(
            self: *const ISyncRegistrationChange,
            psreEvent: *SYNC_REGISTRATION_EVENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInstanceId: fn(
            self: *const ISyncRegistrationChange,
            pguidInstanceId: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncRegistrationChange_GetEvent(self: *const T, psreEvent: *SYNC_REGISTRATION_EVENT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncRegistrationChange.VTable, self.vtable).GetEvent(@ptrCast(*const ISyncRegistrationChange, self), psreEvent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISyncRegistrationChange_GetInstanceId(self: *const T, pguidInstanceId: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISyncRegistrationChange.VTable, self.vtable).GetInstanceId(@ptrCast(*const ISyncRegistrationChange, self), pguidInstanceId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (8)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const PWSTR = @import("system_services.zig").PWSTR;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const HANDLE = @import("system_services.zig").HANDLE;
const IPropertyStore = @import("audio.zig").IPropertyStore;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;

test {
    const constant_export_count = 0;
    const type_export_count = 101;
    const enum_value_export_count = 47;
    const com_iface_id_export_count = 79;
    const com_class_id_export_count = 1;
    const func_export_count = 0;
    const unicode_alias_count = 0;
    const import_count = 8;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

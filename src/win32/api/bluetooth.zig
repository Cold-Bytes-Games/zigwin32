//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (49)
//--------------------------------------------------------------------------------
pub const SDP_LARGE_INTEGER_16 = extern struct {
    LowPart: u64,
    HighPart: i64,
};

pub const SDP_ULARGE_INTEGER_16 = extern struct {
    LowPart: u64,
    HighPart: u64,
};

pub const NodeContainerType = extern enum(i32) {
    NodeContainerTypeSequence = 0,
    NodeContainerTypeAlternative = 1,
};
pub const NodeContainerTypeSequence = NodeContainerType.NodeContainerTypeSequence;
pub const NodeContainerTypeAlternative = NodeContainerType.NodeContainerTypeAlternative;

pub const SDP_TYPE = extern enum(i32) {
    NIL = 0,
    UINT = 1,
    INT = 2,
    UUID = 3,
    STRING = 4,
    BOOLEAN = 5,
    SEQUENCE = 6,
    ALTERNATIVE = 7,
    URL = 8,
    CONTAINER = 32,
};
pub const SDP_TYPE_NIL = SDP_TYPE.NIL;
pub const SDP_TYPE_UINT = SDP_TYPE.UINT;
pub const SDP_TYPE_INT = SDP_TYPE.INT;
pub const SDP_TYPE_UUID = SDP_TYPE.UUID;
pub const SDP_TYPE_STRING = SDP_TYPE.STRING;
pub const SDP_TYPE_BOOLEAN = SDP_TYPE.BOOLEAN;
pub const SDP_TYPE_SEQUENCE = SDP_TYPE.SEQUENCE;
pub const SDP_TYPE_ALTERNATIVE = SDP_TYPE.ALTERNATIVE;
pub const SDP_TYPE_URL = SDP_TYPE.URL;
pub const SDP_TYPE_CONTAINER = SDP_TYPE.CONTAINER;

pub const SDP_SPECIFICTYPE = extern enum(i32) {
    SDP_ST_NONE = 0,
    SDP_ST_UINT8 = 16,
    SDP_ST_UINT16 = 272,
    SDP_ST_UINT32 = 528,
    SDP_ST_UINT64 = 784,
    SDP_ST_UINT128 = 1040,
    SDP_ST_INT8 = 32,
    SDP_ST_INT16 = 288,
    SDP_ST_INT32 = 544,
    SDP_ST_INT64 = 800,
    SDP_ST_INT128 = 1056,
    SDP_ST_UUID16 = 304,
    SDP_ST_UUID32 = 544,
    SDP_ST_UUID128 = 1072,
};
pub const SDP_ST_NONE = SDP_SPECIFICTYPE.SDP_ST_NONE;
pub const SDP_ST_UINT8 = SDP_SPECIFICTYPE.SDP_ST_UINT8;
pub const SDP_ST_UINT16 = SDP_SPECIFICTYPE.SDP_ST_UINT16;
pub const SDP_ST_UINT32 = SDP_SPECIFICTYPE.SDP_ST_UINT32;
pub const SDP_ST_UINT64 = SDP_SPECIFICTYPE.SDP_ST_UINT64;
pub const SDP_ST_UINT128 = SDP_SPECIFICTYPE.SDP_ST_UINT128;
pub const SDP_ST_INT8 = SDP_SPECIFICTYPE.SDP_ST_INT8;
pub const SDP_ST_INT16 = SDP_SPECIFICTYPE.SDP_ST_INT16;
pub const SDP_ST_INT32 = SDP_SPECIFICTYPE.SDP_ST_INT32;
pub const SDP_ST_INT64 = SDP_SPECIFICTYPE.SDP_ST_INT64;
pub const SDP_ST_INT128 = SDP_SPECIFICTYPE.SDP_ST_INT128;
pub const SDP_ST_UUID16 = SDP_SPECIFICTYPE.SDP_ST_UUID16;
pub const SDP_ST_UUID32 = SDP_SPECIFICTYPE.SDP_ST_UUID32;
pub const SDP_ST_UUID128 = SDP_SPECIFICTYPE.SDP_ST_UUID128;

pub const SdpAttributeRange = extern struct {
    minAttribute: u16,
    maxAttribute: u16,
};

pub const SdpQueryUuidUnion = u32; // TODO: implement StructOrUnion types?

pub const SdpQueryUuid = extern struct {
    u: SdpQueryUuidUnion,
    uuidType: u16,
};

pub const BTH_DEVICE_INFO = extern struct {
    flags: u32,
    address: u64,
    classOfDevice: u32,
    name: [248]i8,
};

pub const BTH_RADIO_IN_RANGE = extern struct {
    deviceInfo: BTH_DEVICE_INFO,
    previousDeviceFlags: u32,
};

pub const BTH_L2CAP_EVENT_INFO = extern struct {
    bthAddress: u64,
    psm: u16,
    connected: u8,
    initiated: u8,
};

pub const BTH_HCI_EVENT_INFO = extern struct {
    bthAddress: u64,
    connectionType: u8,
    connected: u8,
};

pub const IO_CAPABILITY = extern enum(i32) {
    IoCaps_DisplayOnly = 0,
    IoCaps_DisplayYesNo = 1,
    IoCaps_KeyboardOnly = 2,
    IoCaps_NoInputNoOutput = 3,
    IoCaps_Undefined = 255,
};
pub const IoCaps_DisplayOnly = IO_CAPABILITY.IoCaps_DisplayOnly;
pub const IoCaps_DisplayYesNo = IO_CAPABILITY.IoCaps_DisplayYesNo;
pub const IoCaps_KeyboardOnly = IO_CAPABILITY.IoCaps_KeyboardOnly;
pub const IoCaps_NoInputNoOutput = IO_CAPABILITY.IoCaps_NoInputNoOutput;
pub const IoCaps_Undefined = IO_CAPABILITY.IoCaps_Undefined;

pub const AUTHENTICATION_REQUIREMENTS = extern enum(i32) {
    MITMProtectionNotRequired = 0,
    MITMProtectionRequired = 1,
    MITMProtectionNotRequiredBonding = 2,
    MITMProtectionRequiredBonding = 3,
    MITMProtectionNotRequiredGeneralBonding = 4,
    MITMProtectionRequiredGeneralBonding = 5,
    MITMProtectionNotDefined = 255,
};
pub const MITMProtectionNotRequired = AUTHENTICATION_REQUIREMENTS.MITMProtectionNotRequired;
pub const MITMProtectionRequired = AUTHENTICATION_REQUIREMENTS.MITMProtectionRequired;
pub const MITMProtectionNotRequiredBonding = AUTHENTICATION_REQUIREMENTS.MITMProtectionNotRequiredBonding;
pub const MITMProtectionRequiredBonding = AUTHENTICATION_REQUIREMENTS.MITMProtectionRequiredBonding;
pub const MITMProtectionNotRequiredGeneralBonding = AUTHENTICATION_REQUIREMENTS.MITMProtectionNotRequiredGeneralBonding;
pub const MITMProtectionRequiredGeneralBonding = AUTHENTICATION_REQUIREMENTS.MITMProtectionRequiredGeneralBonding;
pub const MITMProtectionNotDefined = AUTHENTICATION_REQUIREMENTS.MITMProtectionNotDefined;

pub const BLUETOOTH_ADDRESS_STRUCT = extern struct {
    Anonymous: BLUETOOTH_ADDRESS_STRUCT._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const BLUETOOTH_LOCAL_SERVICE_INFO_STRUCT = extern struct {
    Enabled: BOOL,
    btAddr: BLUETOOTH_ADDRESS_STRUCT,
    szName: [256]u16,
    szDeviceString: [256]u16,
};

pub const BLUETOOTH_FIND_RADIO_PARAMS = extern struct {
    dwSize: u32,
};

pub const BLUETOOTH_RADIO_INFO = extern struct {
    dwSize: u32,
    address: BLUETOOTH_ADDRESS_STRUCT,
    szName: [248]u16,
    ulClassofDevice: u32,
    lmpSubversion: u16,
    manufacturer: u16,
};

pub const BLUETOOTH_DEVICE_INFO_STRUCT = extern struct {
    dwSize: u32,
    Address: BLUETOOTH_ADDRESS_STRUCT,
    ulClassofDevice: u32,
    fConnected: BOOL,
    fRemembered: BOOL,
    fAuthenticated: BOOL,
    stLastSeen: SYSTEMTIME,
    stLastUsed: SYSTEMTIME,
    szName: [248]u16,
};

pub const BLUETOOTH_AUTHENTICATION_METHOD = extern enum(i32) {
    LEGACY = 1,
    OOB = 2,
    NUMERIC_COMPARISON = 3,
    PASSKEY_NOTIFICATION = 4,
    PASSKEY = 5,
};
pub const BLUETOOTH_AUTHENTICATION_METHOD_LEGACY = BLUETOOTH_AUTHENTICATION_METHOD.LEGACY;
pub const BLUETOOTH_AUTHENTICATION_METHOD_OOB = BLUETOOTH_AUTHENTICATION_METHOD.OOB;
pub const BLUETOOTH_AUTHENTICATION_METHOD_NUMERIC_COMPARISON = BLUETOOTH_AUTHENTICATION_METHOD.NUMERIC_COMPARISON;
pub const BLUETOOTH_AUTHENTICATION_METHOD_PASSKEY_NOTIFICATION = BLUETOOTH_AUTHENTICATION_METHOD.PASSKEY_NOTIFICATION;
pub const BLUETOOTH_AUTHENTICATION_METHOD_PASSKEY = BLUETOOTH_AUTHENTICATION_METHOD.PASSKEY;

pub const BLUETOOTH_IO_CAPABILITY = extern enum(i32) {
    DISPLAYONLY = 0,
    DISPLAYYESNO = 1,
    KEYBOARDONLY = 2,
    NOINPUTNOOUTPUT = 3,
    UNDEFINED = 255,
};
pub const BLUETOOTH_IO_CAPABILITY_DISPLAYONLY = BLUETOOTH_IO_CAPABILITY.DISPLAYONLY;
pub const BLUETOOTH_IO_CAPABILITY_DISPLAYYESNO = BLUETOOTH_IO_CAPABILITY.DISPLAYYESNO;
pub const BLUETOOTH_IO_CAPABILITY_KEYBOARDONLY = BLUETOOTH_IO_CAPABILITY.KEYBOARDONLY;
pub const BLUETOOTH_IO_CAPABILITY_NOINPUTNOOUTPUT = BLUETOOTH_IO_CAPABILITY.NOINPUTNOOUTPUT;
pub const BLUETOOTH_IO_CAPABILITY_UNDEFINED = BLUETOOTH_IO_CAPABILITY.UNDEFINED;

pub const BLUETOOTH_AUTHENTICATION_REQUIREMENTS = extern enum(i32) {
    BLUETOOTH_MITM_ProtectionNotRequired = 0,
    BLUETOOTH_MITM_ProtectionRequired = 1,
    BLUETOOTH_MITM_ProtectionNotRequiredBonding = 2,
    BLUETOOTH_MITM_ProtectionRequiredBonding = 3,
    BLUETOOTH_MITM_ProtectionNotRequiredGeneralBonding = 4,
    BLUETOOTH_MITM_ProtectionRequiredGeneralBonding = 5,
    BLUETOOTH_MITM_ProtectionNotDefined = 255,
};
pub const BLUETOOTH_MITM_ProtectionNotRequired = BLUETOOTH_AUTHENTICATION_REQUIREMENTS.BLUETOOTH_MITM_ProtectionNotRequired;
pub const BLUETOOTH_MITM_ProtectionRequired = BLUETOOTH_AUTHENTICATION_REQUIREMENTS.BLUETOOTH_MITM_ProtectionRequired;
pub const BLUETOOTH_MITM_ProtectionNotRequiredBonding = BLUETOOTH_AUTHENTICATION_REQUIREMENTS.BLUETOOTH_MITM_ProtectionNotRequiredBonding;
pub const BLUETOOTH_MITM_ProtectionRequiredBonding = BLUETOOTH_AUTHENTICATION_REQUIREMENTS.BLUETOOTH_MITM_ProtectionRequiredBonding;
pub const BLUETOOTH_MITM_ProtectionNotRequiredGeneralBonding = BLUETOOTH_AUTHENTICATION_REQUIREMENTS.BLUETOOTH_MITM_ProtectionNotRequiredGeneralBonding;
pub const BLUETOOTH_MITM_ProtectionRequiredGeneralBonding = BLUETOOTH_AUTHENTICATION_REQUIREMENTS.BLUETOOTH_MITM_ProtectionRequiredGeneralBonding;
pub const BLUETOOTH_MITM_ProtectionNotDefined = BLUETOOTH_AUTHENTICATION_REQUIREMENTS.BLUETOOTH_MITM_ProtectionNotDefined;

pub const BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS = extern struct {
    deviceInfo: BLUETOOTH_DEVICE_INFO_STRUCT,
    authenticationMethod: BLUETOOTH_AUTHENTICATION_METHOD,
    ioCapability: BLUETOOTH_IO_CAPABILITY,
    authenticationRequirements: BLUETOOTH_AUTHENTICATION_REQUIREMENTS,
    Anonymous: BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const BLUETOOTH_DEVICE_SEARCH_PARAMS = extern struct {
    dwSize: u32,
    fReturnAuthenticated: BOOL,
    fReturnRemembered: BOOL,
    fReturnUnknown: BOOL,
    fReturnConnected: BOOL,
    fIssueInquiry: BOOL,
    cTimeoutMultiplier: u8,
    hRadio: HANDLE,
};

pub const BLUETOOTH_COD_PAIRS = extern struct {
    ulCODMask: u32,
    pcszDescription: [*:0]const u16,
};

pub const PFN_DEVICE_CALLBACK = fn(
    pvParam: *c_void,
    pDevice: *const BLUETOOTH_DEVICE_INFO_STRUCT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const BLUETOOTH_SELECT_DEVICE_PARAMS = extern struct {
    dwSize: u32,
    cNumOfClasses: u32,
    prgClassOfDevices: *BLUETOOTH_COD_PAIRS,
    pszInfo: PWSTR,
    hwndParent: HWND,
    fForceAuthentication: BOOL,
    fShowAuthenticated: BOOL,
    fShowRemembered: BOOL,
    fShowUnknown: BOOL,
    fAddNewDeviceWizard: BOOL,
    fSkipServicesPage: BOOL,
    pfnDeviceCallback: PFN_DEVICE_CALLBACK,
    pvParam: *c_void,
    cNumDevices: u32,
    pDevices: *BLUETOOTH_DEVICE_INFO_STRUCT,
};

pub const BLUETOOTH_PIN_INFO = extern struct {
    pin: [16]u8,
    pinLength: u8,
};

pub const BLUETOOTH_OOB_DATA_INFO = extern struct {
    C: [16]u8,
    R: [16]u8,
};

pub const BLUETOOTH_NUMERIC_COMPARISON_INFO = extern struct {
    NumericValue: u32,
};

pub const BLUETOOTH_PASSKEY_INFO = extern struct {
    passkey: u32,
};

pub const PFN_AUTHENTICATION_CALLBACK = fn(
    pvParam: *c_void,
    pDevice: *BLUETOOTH_DEVICE_INFO_STRUCT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_AUTHENTICATION_CALLBACK_EX = fn(
    pvParam: ?*c_void,
    pAuthCallbackParams: *BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const BLUETOOTH_AUTHENTICATE_RESPONSE = extern struct {
    bthAddressRemote: BLUETOOTH_ADDRESS_STRUCT,
    authMethod: BLUETOOTH_AUTHENTICATION_METHOD,
    Anonymous: BLUETOOTH_AUTHENTICATE_RESPONSE._Anonymous_e__Union,
    negativeResponse: u8,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const SDP_ELEMENT_DATA = extern struct {
    type: SDP_TYPE,
    specificType: SDP_SPECIFICTYPE,
    data: SDP_ELEMENT_DATA._data_e__Union,
    const _data_e__Union = u32; // TODO: generate this nested type!
};

pub const SDP_STRING_TYPE_DATA = extern struct {
    encoding: u16,
    mibeNum: u16,
    attributeId: u16,
};

pub const PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK = fn(
    uAttribId: u32,
    pValueStream: [*:0]u8,
    cbStreamSize: u32,
    pvParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const SOCKADDR_BTH = extern struct {
    addressFamily: u16,
    btAddr: u64,
    serviceClassId: Guid,
    port: u32,
};

pub const BTH_SET_SERVICE = extern struct {
    pSdpVersion: *u32,
    pRecordHandle: *HANDLE,
    fCodService: u32,
    Reserved: [5]u32,
    ulRecordLength: u32,
    pRecord: [1]u8,
};

pub const BTH_QUERY_DEVICE = extern struct {
    LAP: u32,
    length: u8,
};

pub const BTH_QUERY_SERVICE = extern struct {
    type: u32,
    serviceHandle: u32,
    uuids: [12]SdpQueryUuid,
    numRange: u32,
    pRange: [1]SdpAttributeRange,
};

pub const RFCOMM_MSC_DATA = extern struct {
    Signals: u8,
    Break: u8,
};

pub const RFCOMM_RLS_DATA = extern struct {
    LineStatus: u8,
};

pub const RFCOMM_RPN_DATA = extern struct {
    Baud: u8,
    Data: u8,
    FlowControl: u8,
    XonChar: u8,
    XoffChar: u8,
    ParameterMask1: u8,
    ParameterMask2: u8,
};

pub const RFCOMM_COMMAND = extern struct {
    CmdType: u32,
    Data: RFCOMM_COMMAND._Data_e__Union,
    const _Data_e__Union = u32; // TODO: generate this nested type!
};

pub const BTH_PING_REQ = extern struct {
    btAddr: u64,
    dataLen: u8,
    data: [44]u8,
};

pub const BTH_PING_RSP = extern struct {
    dataLen: u8,
    data: [44]u8,
};

pub const BTH_INFO_REQ = extern struct {
    btAddr: u64,
    infoType: u16,
};

pub const BTH_INFO_RSP = extern struct {
    result: u16,
    dataLen: u8,
    Anonymous: BTH_INFO_RSP._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};


//--------------------------------------------------------------------------------
// Section: Functions (34)
//--------------------------------------------------------------------------------
pub extern "BluetoothApis" fn BluetoothFindFirstRadio(
    pbtfrp: *const BLUETOOTH_FIND_RADIO_PARAMS,
    phRadio: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "BluetoothApis" fn BluetoothFindNextRadio(
    hFind: ?*c_void,
    phRadio: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "BluetoothApis" fn BluetoothFindRadioClose(
    hFind: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "BluetoothApis" fn BluetoothGetRadioInfo(
    hRadio: HANDLE,
    pRadioInfo: *BLUETOOTH_RADIO_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "BluetoothApis" fn BluetoothFindFirstDevice(
    pbtsp: *const BLUETOOTH_DEVICE_SEARCH_PARAMS,
    pbtdi: *BLUETOOTH_DEVICE_INFO_STRUCT,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "BluetoothApis" fn BluetoothFindNextDevice(
    hFind: ?*c_void,
    pbtdi: *BLUETOOTH_DEVICE_INFO_STRUCT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "BluetoothApis" fn BluetoothFindDeviceClose(
    hFind: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "BluetoothApis" fn BluetoothGetDeviceInfo(
    hRadio: HANDLE,
    pbtdi: *BLUETOOTH_DEVICE_INFO_STRUCT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "BluetoothApis" fn BluetoothUpdateDeviceRecord(
    pbtdi: *const BLUETOOTH_DEVICE_INFO_STRUCT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "BluetoothApis" fn BluetoothRemoveDevice(
    pAddress: *const BLUETOOTH_ADDRESS_STRUCT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "bthprops" fn BluetoothSelectDevices(
    pbtsdp: *BLUETOOTH_SELECT_DEVICE_PARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "bthprops" fn BluetoothSelectDevicesFree(
    pbtsdp: *BLUETOOTH_SELECT_DEVICE_PARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "bthprops" fn BluetoothDisplayDeviceProperties(
    hwndParent: HWND,
    pbtdi: *BLUETOOTH_DEVICE_INFO_STRUCT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "bthprops" fn BluetoothAuthenticateDevice(
    hwndParent: HWND,
    hRadio: HANDLE,
    pbtbi: *BLUETOOTH_DEVICE_INFO_STRUCT,
    pszPasskey: ?[*:0]u16,
    ulPasskeyLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "bthprops" fn BluetoothAuthenticateDeviceEx(
    hwndParentIn: HWND,
    hRadioIn: HANDLE,
    pbtdiInout: *BLUETOOTH_DEVICE_INFO_STRUCT,
    pbtOobData: ?*BLUETOOTH_OOB_DATA_INFO,
    authenticationRequirement: AUTHENTICATION_REQUIREMENTS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "bthprops" fn BluetoothAuthenticateMultipleDevices(
    hwndParent: HWND,
    hRadio: HANDLE,
    cDevices: u32,
    rgbtdi: [*]BLUETOOTH_DEVICE_INFO_STRUCT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "BluetoothApis" fn BluetoothSetServiceState(
    hRadio: HANDLE,
    pbtdi: *const BLUETOOTH_DEVICE_INFO_STRUCT,
    pGuidService: *const Guid,
    dwServiceFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "BluetoothApis" fn BluetoothEnumerateInstalledServices(
    hRadio: HANDLE,
    pbtdi: *const BLUETOOTH_DEVICE_INFO_STRUCT,
    pcServiceInout: *u32,
    pGuidServices: ?[*]Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "BluetoothApis" fn BluetoothEnableDiscovery(
    hRadio: HANDLE,
    fEnabled: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "BluetoothApis" fn BluetoothIsDiscoverable(
    hRadio: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "BluetoothApis" fn BluetoothEnableIncomingConnections(
    hRadio: HANDLE,
    fEnabled: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "BluetoothApis" fn BluetoothIsConnectable(
    hRadio: HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "BluetoothApis" fn BluetoothRegisterForAuthentication(
    pbtdi: ?*const BLUETOOTH_DEVICE_INFO_STRUCT,
    phRegHandle: *?*c_void,
    pfnCallback: ?PFN_AUTHENTICATION_CALLBACK,
    pvParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "BluetoothApis" fn BluetoothRegisterForAuthenticationEx(
    pbtdiIn: ?*const BLUETOOTH_DEVICE_INFO_STRUCT,
    phRegHandleOut: *?*c_void,
    pfnCallbackIn: ?PFN_AUTHENTICATION_CALLBACK_EX,
    pvParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "BluetoothApis" fn BluetoothUnregisterAuthentication(
    hRegHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "BluetoothApis" fn BluetoothSendAuthenticationResponse(
    hRadio: HANDLE,
    pbtdi: *const BLUETOOTH_DEVICE_INFO_STRUCT,
    pszPasskey: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "BluetoothApis" fn BluetoothSendAuthenticationResponseEx(
    hRadioIn: HANDLE,
    pauthResponse: *BLUETOOTH_AUTHENTICATE_RESPONSE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "BluetoothApis" fn BluetoothSdpGetElementData(
    pSdpStream: [*:0]u8,
    cbSdpStreamLength: u32,
    pData: *SDP_ELEMENT_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "BluetoothApis" fn BluetoothSdpGetContainerElementData(
    pContainerStream: [*:0]u8,
    cbContainerLength: u32,
    pElement: *?*c_void,
    pData: *SDP_ELEMENT_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "BluetoothApis" fn BluetoothSdpGetAttributeValue(
    pRecordStream: [*:0]u8,
    cbRecordLength: u32,
    usAttributeId: u16,
    pAttributeData: *SDP_ELEMENT_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "BluetoothApis" fn BluetoothSdpGetString(
    pRecordStream: [*:0]u8,
    cbRecordLength: u32,
    pStringData: ?*const SDP_STRING_TYPE_DATA,
    usStringOffset: u16,
    pszString: [*:0]u16,
    pcchStringLength: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "BluetoothApis" fn BluetoothSdpEnumAttributes(
    pSDPStream: [*:0]u8,
    cbStreamSize: u32,
    pfnCallback: PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK,
    pvParam: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "BluetoothApis" fn BluetoothSetLocalServiceInfo(
    hRadioIn: HANDLE,
    pClassGuid: *const Guid,
    ulInstance: u32,
    pServiceInfoIn: *const BLUETOOTH_LOCAL_SERVICE_INFO_STRUCT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "BluetoothApis" fn BluetoothIsVersionAvailable(
    MajorVersion: u8,
    MinorVersion: u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const HANDLE = @import("system_services.zig").HANDLE;
const PWSTR = @import("system_services.zig").PWSTR;
const BOOL = @import("system_services.zig").BOOL;
const SYSTEMTIME = @import("windows_programming.zig").SYSTEMTIME;
const HWND = @import("windows_and_messaging.zig").HWND;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = PFN_DEVICE_CALLBACK;
    _ = PFN_AUTHENTICATION_CALLBACK;
    _ = PFN_AUTHENTICATION_CALLBACK_EX;
    _ = PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK;

    const constant_export_count = 0;
    const type_export_count = 49;
    const enum_value_export_count = 55;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 34;
    const unicode_alias_count = 0;
    const import_count = 6;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

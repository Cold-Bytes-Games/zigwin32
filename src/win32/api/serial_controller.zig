//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (4)
//--------------------------------------------------------------------------------
pub const COMDB_MIN_PORTS_ARBITRATED = @as(u32, 256);
pub const COMDB_MAX_PORTS_ARBITRATED = @as(u32, 4096);
pub const CDB_REPORT_BITS = @as(u32, 0);
pub const CDB_REPORT_BYTES = @as(u32, 1);

//--------------------------------------------------------------------------------
// Section: Types (1)
//--------------------------------------------------------------------------------
pub const HCOMDB = ?*c_void;


//--------------------------------------------------------------------------------
// Section: Functions (7)
//--------------------------------------------------------------------------------
pub extern "MSPORTS" fn ComDBOpen(
    PHComDB: *isize,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSPORTS" fn ComDBClose(
    HComDB: HCOMDB,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSPORTS" fn ComDBGetCurrentPortUsage(
    HComDB: HCOMDB,
    Buffer: ?[*:0]u8,
    BufferSize: u32,
    ReportType: u32,
    MaxPortsReported: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSPORTS" fn ComDBClaimNextFreePort(
    HComDB: HCOMDB,
    ComNumber: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSPORTS" fn ComDBClaimPort(
    HComDB: HCOMDB,
    ComNumber: u32,
    ForceClaim: BOOL,
    Forced: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSPORTS" fn ComDBReleasePort(
    HComDB: HCOMDB,
    ComNumber: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "MSPORTS" fn ComDBResizeDatabase(
    HComDB: HCOMDB,
    NewSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (1)
//--------------------------------------------------------------------------------
const BOOL = @import("system_services.zig").BOOL;

test {
    const constant_export_count = 4;
    const type_export_count = 1;
    const enum_value_export_count = 0;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 7;
    const unicode_alias_count = 0;
    const import_count = 1;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (34)
//--------------------------------------------------------------------------------
pub const UITER_UNKNOWN_INDEX : i32 = -2;
pub const UTEXT_PROVIDER_LENGTH_IS_EXPENSIVE : i32 = 1;
pub const UTEXT_PROVIDER_STABLE_CHUNKS : i32 = 2;
pub const UTEXT_PROVIDER_WRITABLE : i32 = 3;
pub const UTEXT_PROVIDER_HAS_META_DATA : i32 = 4;
pub const UTEXT_PROVIDER_OWNS_TEXT : i32 = 5;
pub const UTEXT_MAGIC : i32 = 878368812;
pub const USET_IGNORE_SPACE : i32 = 1;
pub const USET_CASE_INSENSITIVE : i32 = 2;
pub const USET_ADD_CASE_MAPPINGS : i32 = 4;
pub const USET_SERIALIZED_STATIC_ARRAY_CAPACITY : i32 = 8;
pub const U_PARSE_CONTEXT_LEN : i32 = 16;
pub const UIDNA_DEFAULT : i32 = 0;
pub const UIDNA_USE_STD3_RULES : i32 = 2;
pub const UIDNA_CHECK_BIDI : i32 = 4;
pub const UIDNA_CHECK_CONTEXTJ : i32 = 8;
pub const UIDNA_NONTRANSITIONAL_TO_ASCII : i32 = 16;
pub const UIDNA_NONTRANSITIONAL_TO_UNICODE : i32 = 32;
pub const UIDNA_CHECK_CONTEXTO : i32 = 64;
pub const UIDNA_ERROR_EMPTY_LABEL : i32 = 1;
pub const UIDNA_ERROR_LABEL_TOO_LONG : i32 = 2;
pub const UIDNA_ERROR_DOMAIN_NAME_TOO_LONG : i32 = 4;
pub const UIDNA_ERROR_LEADING_HYPHEN : i32 = 8;
pub const UIDNA_ERROR_TRAILING_HYPHEN : i32 = 16;
pub const UIDNA_ERROR_HYPHEN_3_4 : i32 = 32;
pub const UIDNA_ERROR_LEADING_COMBINING_MARK : i32 = 64;
pub const UIDNA_ERROR_DISALLOWED : i32 = 128;
pub const UIDNA_ERROR_PUNYCODE : i32 = 256;
pub const UIDNA_ERROR_LABEL_HAS_DOT : i32 = 512;
pub const UIDNA_ERROR_INVALID_ACE_LABEL : i32 = 1024;
pub const UIDNA_ERROR_BIDI : i32 = 2048;
pub const UIDNA_ERROR_CONTEXTJ : i32 = 4096;
pub const UIDNA_ERROR_CONTEXTO_PUNCTUATION : i32 = 8192;
pub const UIDNA_ERROR_CONTEXTO_DIGITS : i32 = 16384;

//--------------------------------------------------------------------------------
// Section: Types (331)
//--------------------------------------------------------------------------------
pub const CPINFO = extern struct {
    MaxCharSize: u32,
    DefaultChar: [2]u8,
    LeadByte: [12]u8,
};

pub const CPINFOEXA = extern struct {
    MaxCharSize: u32,
    DefaultChar: [2]u8,
    LeadByte: [12]u8,
    UnicodeDefaultChar: u16,
    CodePage: u32,
    CodePageName: [260]i8,
};

pub const CPINFOEXW = extern struct {
    MaxCharSize: u32,
    DefaultChar: [2]u8,
    LeadByte: [12]u8,
    UnicodeDefaultChar: u16,
    CodePage: u32,
    CodePageName: [260]u16,
};

pub const NUMBERFMTA = extern struct {
    NumDigits: u32,
    LeadingZero: u32,
    Grouping: u32,
    lpDecimalSep: PSTR,
    lpThousandSep: PSTR,
    NegativeOrder: u32,
};

pub const NUMBERFMTW = extern struct {
    NumDigits: u32,
    LeadingZero: u32,
    Grouping: u32,
    lpDecimalSep: PWSTR,
    lpThousandSep: PWSTR,
    NegativeOrder: u32,
};

pub const CURRENCYFMTA = extern struct {
    NumDigits: u32,
    LeadingZero: u32,
    Grouping: u32,
    lpDecimalSep: PSTR,
    lpThousandSep: PSTR,
    NegativeOrder: u32,
    PositiveOrder: u32,
    lpCurrencySymbol: PSTR,
};

pub const CURRENCYFMTW = extern struct {
    NumDigits: u32,
    LeadingZero: u32,
    Grouping: u32,
    lpDecimalSep: PWSTR,
    lpThousandSep: PWSTR,
    NegativeOrder: u32,
    PositiveOrder: u32,
    lpCurrencySymbol: PWSTR,
};

pub const SYSNLS_FUNCTION = extern enum(i32) {
    COMPARE_STRING = 1,
};
pub const COMPARE_STRING = SYSNLS_FUNCTION.COMPARE_STRING;

pub const NLSVERSIONINFO = extern struct {
    dwNLSVersionInfoSize: u32,
    dwNLSVersion: u32,
    dwDefinedVersion: u32,
    dwEffectiveId: u32,
    guidCustomVersion: Guid,
};

pub const NLSVERSIONINFOEX = extern struct {
    dwNLSVersionInfoSize: u32,
    dwNLSVersion: u32,
    dwDefinedVersion: u32,
    dwEffectiveId: u32,
    guidCustomVersion: Guid,
};

pub const SYSGEOTYPE = extern enum(i32) {
    GEO_NATION = 1,
    GEO_LATITUDE = 2,
    GEO_LONGITUDE = 3,
    GEO_ISO2 = 4,
    GEO_ISO3 = 5,
    GEO_RFC1766 = 6,
    GEO_LCID = 7,
    GEO_FRIENDLYNAME = 8,
    GEO_OFFICIALNAME = 9,
    GEO_TIMEZONES = 10,
    GEO_OFFICIALLANGUAGES = 11,
    GEO_ISO_UN_NUMBER = 12,
    GEO_PARENT = 13,
    GEO_DIALINGCODE = 14,
    GEO_CURRENCYCODE = 15,
    GEO_CURRENCYSYMBOL = 16,
    GEO_NAME = 17,
    GEO_ID = 18,
};
pub const GEO_NATION = SYSGEOTYPE.GEO_NATION;
pub const GEO_LATITUDE = SYSGEOTYPE.GEO_LATITUDE;
pub const GEO_LONGITUDE = SYSGEOTYPE.GEO_LONGITUDE;
pub const GEO_ISO2 = SYSGEOTYPE.GEO_ISO2;
pub const GEO_ISO3 = SYSGEOTYPE.GEO_ISO3;
pub const GEO_RFC1766 = SYSGEOTYPE.GEO_RFC1766;
pub const GEO_LCID = SYSGEOTYPE.GEO_LCID;
pub const GEO_FRIENDLYNAME = SYSGEOTYPE.GEO_FRIENDLYNAME;
pub const GEO_OFFICIALNAME = SYSGEOTYPE.GEO_OFFICIALNAME;
pub const GEO_TIMEZONES = SYSGEOTYPE.GEO_TIMEZONES;
pub const GEO_OFFICIALLANGUAGES = SYSGEOTYPE.GEO_OFFICIALLANGUAGES;
pub const GEO_ISO_UN_NUMBER = SYSGEOTYPE.GEO_ISO_UN_NUMBER;
pub const GEO_PARENT = SYSGEOTYPE.GEO_PARENT;
pub const GEO_DIALINGCODE = SYSGEOTYPE.GEO_DIALINGCODE;
pub const GEO_CURRENCYCODE = SYSGEOTYPE.GEO_CURRENCYCODE;
pub const GEO_CURRENCYSYMBOL = SYSGEOTYPE.GEO_CURRENCYSYMBOL;
pub const GEO_NAME = SYSGEOTYPE.GEO_NAME;
pub const GEO_ID = SYSGEOTYPE.GEO_ID;

pub const SYSGEOCLASS = extern enum(i32) {
    GEOCLASS_NATION = 16,
    GEOCLASS_REGION = 14,
    GEOCLASS_ALL = 0,
};
pub const GEOCLASS_NATION = SYSGEOCLASS.GEOCLASS_NATION;
pub const GEOCLASS_REGION = SYSGEOCLASS.GEOCLASS_REGION;
pub const GEOCLASS_ALL = SYSGEOCLASS.GEOCLASS_ALL;

pub const LOCALE_ENUMPROCA = fn(
    param0: PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LOCALE_ENUMPROCW = fn(
    param0: PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const NORM_FORM = extern enum(i32) {
    NormalizationOther = 0,
    NormalizationC = 1,
    NormalizationD = 2,
    NormalizationKC = 5,
    NormalizationKD = 6,
};
pub const NormalizationOther = NORM_FORM.NormalizationOther;
pub const NormalizationC = NORM_FORM.NormalizationC;
pub const NormalizationD = NORM_FORM.NormalizationD;
pub const NormalizationKC = NORM_FORM.NormalizationKC;
pub const NormalizationKD = NORM_FORM.NormalizationKD;

pub const LANGUAGEGROUP_ENUMPROCA = fn(
    param0: u32,
    param1: PSTR,
    param2: PSTR,
    param3: u32,
    param4: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LANGGROUPLOCALE_ENUMPROCA = fn(
    param0: u32,
    param1: u32,
    param2: PSTR,
    param3: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const UILANGUAGE_ENUMPROCA = fn(
    param0: PSTR,
    param1: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CODEPAGE_ENUMPROCA = fn(
    param0: PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DATEFMT_ENUMPROCA = fn(
    param0: PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DATEFMT_ENUMPROCEXA = fn(
    param0: PSTR,
    param1: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const TIMEFMT_ENUMPROCA = fn(
    param0: PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CALINFO_ENUMPROCA = fn(
    param0: PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CALINFO_ENUMPROCEXA = fn(
    param0: PSTR,
    param1: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LANGUAGEGROUP_ENUMPROCW = fn(
    param0: u32,
    param1: PWSTR,
    param2: PWSTR,
    param3: u32,
    param4: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LANGGROUPLOCALE_ENUMPROCW = fn(
    param0: u32,
    param1: u32,
    param2: PWSTR,
    param3: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const UILANGUAGE_ENUMPROCW = fn(
    param0: PWSTR,
    param1: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CODEPAGE_ENUMPROCW = fn(
    param0: PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DATEFMT_ENUMPROCW = fn(
    param0: PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DATEFMT_ENUMPROCEXW = fn(
    param0: PWSTR,
    param1: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const TIMEFMT_ENUMPROCW = fn(
    param0: PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CALINFO_ENUMPROCW = fn(
    param0: PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CALINFO_ENUMPROCEXW = fn(
    param0: PWSTR,
    param1: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const GEO_ENUMPROC = fn(
    param0: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const GEO_ENUMNAMEPROC = fn(
    param0: PWSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const FILEMUIINFO = extern struct {
    dwSize: u32,
    dwVersion: u32,
    dwFileType: u32,
    pChecksum: [16]u8,
    pServiceChecksum: [16]u8,
    dwLanguageNameOffset: u32,
    dwTypeIDMainSize: u32,
    dwTypeIDMainOffset: u32,
    dwTypeNameMainOffset: u32,
    dwTypeIDMUISize: u32,
    dwTypeIDMUIOffset: u32,
    dwTypeNameMUIOffset: u32,
    abBuffer: [8]u8,
};

pub const HSAVEDUILANGUAGES__ = extern struct {
    unused: i32,
};

pub const CALINFO_ENUMPROCEXEX = fn(
    param0: PWSTR,
    param1: u32,
    param2: PWSTR,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DATEFMT_ENUMPROCEXEX = fn(
    param0: PWSTR,
    param1: u32,
    param2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const TIMEFMT_ENUMPROCEX = fn(
    param0: PWSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LOCALE_ENUMPROCEX = fn(
    param0: PWSTR,
    param1: u32,
    param2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const HIMC__ = extern struct {
    unused: i32,
};

pub const HIMCC__ = extern struct {
    unused: i32,
};

pub const COMPOSITIONFORM = extern struct {
    dwStyle: u32,
    ptCurrentPos: POINT,
    rcArea: RECT,
};

pub const CANDIDATEFORM = extern struct {
    dwIndex: u32,
    dwStyle: u32,
    ptCurrentPos: POINT,
    rcArea: RECT,
};

pub const CANDIDATELIST = extern struct {
    dwSize: u32,
    dwStyle: u32,
    dwCount: u32,
    dwSelection: u32,
    dwPageStart: u32,
    dwPageSize: u32,
    dwOffset: [1]u32,
};

pub const REGISTERWORDA = extern struct {
    lpReading: PSTR,
    lpWord: PSTR,
};

pub const REGISTERWORDW = extern struct {
    lpReading: PWSTR,
    lpWord: PWSTR,
};

pub const RECONVERTSTRING = extern struct {
    dwSize: u32,
    dwVersion: u32,
    dwStrLen: u32,
    dwStrOffset: u32,
    dwCompStrLen: u32,
    dwCompStrOffset: u32,
    dwTargetStrLen: u32,
    dwTargetStrOffset: u32,
};

pub const STYLEBUFA = extern struct {
    dwStyle: u32,
    szDescription: [32]i8,
};

pub const STYLEBUFW = extern struct {
    dwStyle: u32,
    szDescription: [32]u16,
};

pub const IMEMENUITEMINFOA = extern struct {
    cbSize: u32,
    fType: u32,
    fState: u32,
    wID: u32,
    hbmpChecked: HBITMAP,
    hbmpUnchecked: HBITMAP,
    dwItemData: u32,
    szString: [80]i8,
    hbmpItem: HBITMAP,
};

pub const IMEMENUITEMINFOW = extern struct {
    cbSize: u32,
    fType: u32,
    fState: u32,
    wID: u32,
    hbmpChecked: HBITMAP,
    hbmpUnchecked: HBITMAP,
    dwItemData: u32,
    szString: [80]u16,
    hbmpItem: HBITMAP,
};

pub const IMECHARPOSITION = extern struct {
    dwSize: u32,
    dwCharPos: u32,
    pt: POINT,
    cLineHeight: u32,
    rcDocument: RECT,
};

pub const IMCENUMPROC = fn(
    param0: *HIMC__,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const REGISTERWORDENUMPROCA = fn(
    lpszReading: [*:0]const u8,
    param1: u32,
    lpszString: [*:0]const u8,
    param3: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const REGISTERWORDENUMPROCW = fn(
    lpszReading: [*:0]const u16,
    param1: u32,
    lpszString: [*:0]const u16,
    param3: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PFN_MAPPINGCALLBACKPROC = fn(
    pBag: *MAPPING_PROPERTY_BAG,
    data: *c_void,
    dwDataSize: u32,
    Result: HRESULT,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MAPPING_SERVICE_INFO = extern struct {
    Size: ?*c_void,
    pszCopyright: PWSTR,
    wMajorVersion: u16,
    wMinorVersion: u16,
    wBuildVersion: u16,
    wStepVersion: u16,
    dwInputContentTypesCount: u32,
    prgInputContentTypes: *PWSTR,
    dwOutputContentTypesCount: u32,
    prgOutputContentTypes: *PWSTR,
    dwInputLanguagesCount: u32,
    prgInputLanguages: *PWSTR,
    dwOutputLanguagesCount: u32,
    prgOutputLanguages: *PWSTR,
    dwInputScriptsCount: u32,
    prgInputScripts: *PWSTR,
    dwOutputScriptsCount: u32,
    prgOutputScripts: *PWSTR,
    guid: Guid,
    pszCategory: PWSTR,
    pszDescription: PWSTR,
    dwPrivateDataSize: u32,
    pPrivateData: *c_void,
    pContext: *c_void,
    _bitfield: u32,
};

pub const MAPPING_ENUM_OPTIONS = extern struct {
    Size: ?*c_void,
    pszCategory: PWSTR,
    pszInputLanguage: PWSTR,
    pszOutputLanguage: PWSTR,
    pszInputScript: PWSTR,
    pszOutputScript: PWSTR,
    pszInputContentType: PWSTR,
    pszOutputContentType: PWSTR,
    pGuid: *Guid,
    _bitfield: u32,
};

pub const MAPPING_OPTIONS = extern struct {
    Size: ?*c_void,
    pszInputLanguage: PWSTR,
    pszOutputLanguage: PWSTR,
    pszInputScript: PWSTR,
    pszOutputScript: PWSTR,
    pszInputContentType: PWSTR,
    pszOutputContentType: PWSTR,
    pszUILanguage: PWSTR,
    pfnRecognizeCallback: PFN_MAPPINGCALLBACKPROC,
    pRecognizeCallerData: *c_void,
    dwRecognizeCallerDataSize: u32,
    pfnActionCallback: PFN_MAPPINGCALLBACKPROC,
    pActionCallerData: *c_void,
    dwActionCallerDataSize: u32,
    dwServiceFlag: u32,
    _bitfield: u32,
};

pub const MAPPING_DATA_RANGE = extern struct {
    dwStartIndex: u32,
    dwEndIndex: u32,
    pszDescription: PWSTR,
    dwDescriptionLength: u32,
    pData: *c_void,
    dwDataSize: u32,
    pszContentType: PWSTR,
    prgActionIds: *PWSTR,
    dwActionsCount: u32,
    prgActionDisplayNames: *PWSTR,
};

pub const MAPPING_PROPERTY_BAG = extern struct {
    Size: ?*c_void,
    prgResultRanges: *MAPPING_DATA_RANGE,
    dwRangesCount: u32,
    pServiceData: *c_void,
    dwServiceDataSize: u32,
    pCallerData: *c_void,
    dwCallerDataSize: u32,
    pContext: *c_void,
};

const CLSID_SpellCheckerFactory_Value = @import("../zig.zig").Guid.initString("7ab36653-1796-484b-bdfa-e74f1db7c1dc");
pub const CLSID_SpellCheckerFactory = &CLSID_SpellCheckerFactory_Value;

pub const WORDLIST_TYPE = extern enum(i32) {
    IGNORE = 0,
    ADD = 1,
    EXCLUDE = 2,
    AUTOCORRECT = 3,
};
pub const WORDLIST_TYPE_IGNORE = WORDLIST_TYPE.IGNORE;
pub const WORDLIST_TYPE_ADD = WORDLIST_TYPE.ADD;
pub const WORDLIST_TYPE_EXCLUDE = WORDLIST_TYPE.EXCLUDE;
pub const WORDLIST_TYPE_AUTOCORRECT = WORDLIST_TYPE.AUTOCORRECT;

pub const CORRECTIVE_ACTION = extern enum(i32) {
    NONE = 0,
    GET_SUGGESTIONS = 1,
    REPLACE = 2,
    DELETE = 3,
};
pub const CORRECTIVE_ACTION_NONE = CORRECTIVE_ACTION.NONE;
pub const CORRECTIVE_ACTION_GET_SUGGESTIONS = CORRECTIVE_ACTION.GET_SUGGESTIONS;
pub const CORRECTIVE_ACTION_REPLACE = CORRECTIVE_ACTION.REPLACE;
pub const CORRECTIVE_ACTION_DELETE = CORRECTIVE_ACTION.DELETE;

const IID_ISpellingError_Value = @import("../zig.zig").Guid.initString("b7c82d61-fbe8-4b47-9b27-6c0d2e0de0a3");
pub const IID_ISpellingError = &IID_ISpellingError_Value;
pub const ISpellingError = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_StartIndex: fn(
            self: *const ISpellingError,
            value: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Length: fn(
            self: *const ISpellingError,
            value: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CorrectiveAction: fn(
            self: *const ISpellingError,
            value: *CORRECTIVE_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Replacement: fn(
            self: *const ISpellingError,
            value: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellingError_get_StartIndex(self: *const T, value: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellingError.VTable, self.vtable).get_StartIndex(@ptrCast(*const ISpellingError, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellingError_get_Length(self: *const T, value: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellingError.VTable, self.vtable).get_Length(@ptrCast(*const ISpellingError, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellingError_get_CorrectiveAction(self: *const T, value: *CORRECTIVE_ACTION) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellingError.VTable, self.vtable).get_CorrectiveAction(@ptrCast(*const ISpellingError, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellingError_get_Replacement(self: *const T, value: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellingError.VTable, self.vtable).get_Replacement(@ptrCast(*const ISpellingError, self), value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumSpellingError_Value = @import("../zig.zig").Guid.initString("803e3bd4-2828-4410-8290-418d1d73c762");
pub const IID_IEnumSpellingError = &IID_IEnumSpellingError_Value;
pub const IEnumSpellingError = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumSpellingError,
            value: **ISpellingError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumSpellingError_Next(self: *const T, value: **ISpellingError) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumSpellingError.VTable, self.vtable).Next(@ptrCast(*const IEnumSpellingError, self), value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IOptionDescription_Value = @import("../zig.zig").Guid.initString("432e5f85-35cf-4606-a801-6f70277e1d7a");
pub const IID_IOptionDescription = &IID_IOptionDescription_Value;
pub const IOptionDescription = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_Id: fn(
            self: *const IOptionDescription,
            value: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Heading: fn(
            self: *const IOptionDescription,
            value: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Description: fn(
            self: *const IOptionDescription,
            value: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Labels: fn(
            self: *const IOptionDescription,
            value: **IEnumString,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOptionDescription_get_Id(self: *const T, value: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOptionDescription.VTable, self.vtable).get_Id(@ptrCast(*const IOptionDescription, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOptionDescription_get_Heading(self: *const T, value: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOptionDescription.VTable, self.vtable).get_Heading(@ptrCast(*const IOptionDescription, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOptionDescription_get_Description(self: *const T, value: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOptionDescription.VTable, self.vtable).get_Description(@ptrCast(*const IOptionDescription, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IOptionDescription_get_Labels(self: *const T, value: **IEnumString) callconv(.Inline) HRESULT {
            return @ptrCast(*const IOptionDescription.VTable, self.vtable).get_Labels(@ptrCast(*const IOptionDescription, self), value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISpellCheckerChangedEventHandler_Value = @import("../zig.zig").Guid.initString("0b83a5b0-792f-4eab-9799-acf52c5ed08a");
pub const IID_ISpellCheckerChangedEventHandler = &IID_ISpellCheckerChangedEventHandler_Value;
pub const ISpellCheckerChangedEventHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Invoke: fn(
            self: *const ISpellCheckerChangedEventHandler,
            sender: *ISpellChecker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellCheckerChangedEventHandler_Invoke(self: *const T, sender: *ISpellChecker) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellCheckerChangedEventHandler.VTable, self.vtable).Invoke(@ptrCast(*const ISpellCheckerChangedEventHandler, self), sender);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISpellChecker_Value = @import("../zig.zig").Guid.initString("b6fd0b71-e2bc-4653-8d05-f197e412770b");
pub const IID_ISpellChecker = &IID_ISpellChecker_Value;
pub const ISpellChecker = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_LanguageTag: fn(
            self: *const ISpellChecker,
            value: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Check: fn(
            self: *const ISpellChecker,
            text: [*:0]const u16,
            value: **IEnumSpellingError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Suggest: fn(
            self: *const ISpellChecker,
            word: [*:0]const u16,
            value: **IEnumString,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ISpellChecker,
            word: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Ignore: fn(
            self: *const ISpellChecker,
            word: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AutoCorrect: fn(
            self: *const ISpellChecker,
            from: [*:0]const u16,
            to: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptionValue: fn(
            self: *const ISpellChecker,
            optionId: [*:0]const u16,
            value: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_OptionIds: fn(
            self: *const ISpellChecker,
            value: **IEnumString,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Id: fn(
            self: *const ISpellChecker,
            value: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_LocalizedName: fn(
            self: *const ISpellChecker,
            value: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        add_SpellCheckerChanged: fn(
            self: *const ISpellChecker,
            handler: *ISpellCheckerChangedEventHandler,
            eventCookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        remove_SpellCheckerChanged: fn(
            self: *const ISpellChecker,
            eventCookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptionDescription: fn(
            self: *const ISpellChecker,
            optionId: [*:0]const u16,
            value: **IOptionDescription,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ComprehensiveCheck: fn(
            self: *const ISpellChecker,
            text: [*:0]const u16,
            value: **IEnumSpellingError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellChecker_get_LanguageTag(self: *const T, value: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellChecker.VTable, self.vtable).get_LanguageTag(@ptrCast(*const ISpellChecker, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellChecker_Check(self: *const T, text: [*:0]const u16, value: **IEnumSpellingError) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellChecker.VTable, self.vtable).Check(@ptrCast(*const ISpellChecker, self), text, value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellChecker_Suggest(self: *const T, word: [*:0]const u16, value: **IEnumString) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellChecker.VTable, self.vtable).Suggest(@ptrCast(*const ISpellChecker, self), word, value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellChecker_Add(self: *const T, word: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellChecker.VTable, self.vtable).Add(@ptrCast(*const ISpellChecker, self), word);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellChecker_Ignore(self: *const T, word: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellChecker.VTable, self.vtable).Ignore(@ptrCast(*const ISpellChecker, self), word);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellChecker_AutoCorrect(self: *const T, from: [*:0]const u16, to: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellChecker.VTable, self.vtable).AutoCorrect(@ptrCast(*const ISpellChecker, self), from, to);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellChecker_GetOptionValue(self: *const T, optionId: [*:0]const u16, value: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellChecker.VTable, self.vtable).GetOptionValue(@ptrCast(*const ISpellChecker, self), optionId, value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellChecker_get_OptionIds(self: *const T, value: **IEnumString) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellChecker.VTable, self.vtable).get_OptionIds(@ptrCast(*const ISpellChecker, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellChecker_get_Id(self: *const T, value: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellChecker.VTable, self.vtable).get_Id(@ptrCast(*const ISpellChecker, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellChecker_get_LocalizedName(self: *const T, value: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellChecker.VTable, self.vtable).get_LocalizedName(@ptrCast(*const ISpellChecker, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellChecker_add_SpellCheckerChanged(self: *const T, handler: *ISpellCheckerChangedEventHandler, eventCookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellChecker.VTable, self.vtable).add_SpellCheckerChanged(@ptrCast(*const ISpellChecker, self), handler, eventCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellChecker_remove_SpellCheckerChanged(self: *const T, eventCookie: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellChecker.VTable, self.vtable).remove_SpellCheckerChanged(@ptrCast(*const ISpellChecker, self), eventCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellChecker_GetOptionDescription(self: *const T, optionId: [*:0]const u16, value: **IOptionDescription) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellChecker.VTable, self.vtable).GetOptionDescription(@ptrCast(*const ISpellChecker, self), optionId, value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellChecker_ComprehensiveCheck(self: *const T, text: [*:0]const u16, value: **IEnumSpellingError) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellChecker.VTable, self.vtable).ComprehensiveCheck(@ptrCast(*const ISpellChecker, self), text, value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISpellChecker2_Value = @import("../zig.zig").Guid.initString("e7ed1c71-87f7-4378-a840-c9200dacee47");
pub const IID_ISpellChecker2 = &IID_ISpellChecker2_Value;
pub const ISpellChecker2 = extern struct {
    pub const VTable = extern struct {
        base: ISpellChecker.VTable,
        Remove: fn(
            self: *const ISpellChecker2,
            word: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISpellChecker.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellChecker2_Remove(self: *const T, word: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellChecker2.VTable, self.vtable).Remove(@ptrCast(*const ISpellChecker2, self), word);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISpellCheckerFactory_Value = @import("../zig.zig").Guid.initString("8e018a9d-2415-4677-bf08-794ea61f94bb");
pub const IID_ISpellCheckerFactory = &IID_ISpellCheckerFactory_Value;
pub const ISpellCheckerFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_SupportedLanguages: fn(
            self: *const ISpellCheckerFactory,
            value: **IEnumString,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSupported: fn(
            self: *const ISpellCheckerFactory,
            languageTag: [*:0]const u16,
            value: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSpellChecker: fn(
            self: *const ISpellCheckerFactory,
            languageTag: [*:0]const u16,
            value: **ISpellChecker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellCheckerFactory_get_SupportedLanguages(self: *const T, value: **IEnumString) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellCheckerFactory.VTable, self.vtable).get_SupportedLanguages(@ptrCast(*const ISpellCheckerFactory, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellCheckerFactory_IsSupported(self: *const T, languageTag: [*:0]const u16, value: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellCheckerFactory.VTable, self.vtable).IsSupported(@ptrCast(*const ISpellCheckerFactory, self), languageTag, value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellCheckerFactory_CreateSpellChecker(self: *const T, languageTag: [*:0]const u16, value: **ISpellChecker) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellCheckerFactory.VTable, self.vtable).CreateSpellChecker(@ptrCast(*const ISpellCheckerFactory, self), languageTag, value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUserDictionariesRegistrar_Value = @import("../zig.zig").Guid.initString("aa176b85-0e12-4844-8e1a-eef1da77f586");
pub const IID_IUserDictionariesRegistrar = &IID_IUserDictionariesRegistrar_Value;
pub const IUserDictionariesRegistrar = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterUserDictionary: fn(
            self: *const IUserDictionariesRegistrar,
            dictionaryPath: [*:0]const u16,
            languageTag: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterUserDictionary: fn(
            self: *const IUserDictionariesRegistrar,
            dictionaryPath: [*:0]const u16,
            languageTag: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserDictionariesRegistrar_RegisterUserDictionary(self: *const T, dictionaryPath: [*:0]const u16, languageTag: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserDictionariesRegistrar.VTable, self.vtable).RegisterUserDictionary(@ptrCast(*const IUserDictionariesRegistrar, self), dictionaryPath, languageTag);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUserDictionariesRegistrar_UnregisterUserDictionary(self: *const T, dictionaryPath: [*:0]const u16, languageTag: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUserDictionariesRegistrar.VTable, self.vtable).UnregisterUserDictionary(@ptrCast(*const IUserDictionariesRegistrar, self), dictionaryPath, languageTag);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISpellCheckProvider_Value = @import("../zig.zig").Guid.initString("73e976e0-8ed4-4eb1-80d7-1be0a16b0c38");
pub const IID_ISpellCheckProvider = &IID_ISpellCheckProvider_Value;
pub const ISpellCheckProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_LanguageTag: fn(
            self: *const ISpellCheckProvider,
            value: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Check: fn(
            self: *const ISpellCheckProvider,
            text: [*:0]const u16,
            value: **IEnumSpellingError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Suggest: fn(
            self: *const ISpellCheckProvider,
            word: [*:0]const u16,
            value: **IEnumString,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptionValue: fn(
            self: *const ISpellCheckProvider,
            optionId: [*:0]const u16,
            value: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOptionValue: fn(
            self: *const ISpellCheckProvider,
            optionId: [*:0]const u16,
            value: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_OptionIds: fn(
            self: *const ISpellCheckProvider,
            value: **IEnumString,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Id: fn(
            self: *const ISpellCheckProvider,
            value: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_LocalizedName: fn(
            self: *const ISpellCheckProvider,
            value: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptionDescription: fn(
            self: *const ISpellCheckProvider,
            optionId: [*:0]const u16,
            value: **IOptionDescription,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeWordlist: fn(
            self: *const ISpellCheckProvider,
            wordlistType: WORDLIST_TYPE,
            words: *IEnumString,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellCheckProvider_get_LanguageTag(self: *const T, value: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellCheckProvider.VTable, self.vtable).get_LanguageTag(@ptrCast(*const ISpellCheckProvider, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellCheckProvider_Check(self: *const T, text: [*:0]const u16, value: **IEnumSpellingError) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellCheckProvider.VTable, self.vtable).Check(@ptrCast(*const ISpellCheckProvider, self), text, value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellCheckProvider_Suggest(self: *const T, word: [*:0]const u16, value: **IEnumString) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellCheckProvider.VTable, self.vtable).Suggest(@ptrCast(*const ISpellCheckProvider, self), word, value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellCheckProvider_GetOptionValue(self: *const T, optionId: [*:0]const u16, value: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellCheckProvider.VTable, self.vtable).GetOptionValue(@ptrCast(*const ISpellCheckProvider, self), optionId, value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellCheckProvider_SetOptionValue(self: *const T, optionId: [*:0]const u16, value: u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellCheckProvider.VTable, self.vtable).SetOptionValue(@ptrCast(*const ISpellCheckProvider, self), optionId, value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellCheckProvider_get_OptionIds(self: *const T, value: **IEnumString) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellCheckProvider.VTable, self.vtable).get_OptionIds(@ptrCast(*const ISpellCheckProvider, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellCheckProvider_get_Id(self: *const T, value: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellCheckProvider.VTable, self.vtable).get_Id(@ptrCast(*const ISpellCheckProvider, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellCheckProvider_get_LocalizedName(self: *const T, value: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellCheckProvider.VTable, self.vtable).get_LocalizedName(@ptrCast(*const ISpellCheckProvider, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellCheckProvider_GetOptionDescription(self: *const T, optionId: [*:0]const u16, value: **IOptionDescription) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellCheckProvider.VTable, self.vtable).GetOptionDescription(@ptrCast(*const ISpellCheckProvider, self), optionId, value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellCheckProvider_InitializeWordlist(self: *const T, wordlistType: WORDLIST_TYPE, words: *IEnumString) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellCheckProvider.VTable, self.vtable).InitializeWordlist(@ptrCast(*const ISpellCheckProvider, self), wordlistType, words);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComprehensiveSpellCheckProvider_Value = @import("../zig.zig").Guid.initString("0c58f8de-8e94-479e-9717-70c42c4ad2c3");
pub const IID_IComprehensiveSpellCheckProvider = &IID_IComprehensiveSpellCheckProvider_Value;
pub const IComprehensiveSpellCheckProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ComprehensiveCheck: fn(
            self: *const IComprehensiveSpellCheckProvider,
            text: [*:0]const u16,
            value: **IEnumSpellingError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComprehensiveSpellCheckProvider_ComprehensiveCheck(self: *const T, text: [*:0]const u16, value: **IEnumSpellingError) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComprehensiveSpellCheckProvider.VTable, self.vtable).ComprehensiveCheck(@ptrCast(*const IComprehensiveSpellCheckProvider, self), text, value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISpellCheckProviderFactory_Value = @import("../zig.zig").Guid.initString("9f671e11-77d6-4c92-aefb-615215e3a4be");
pub const IID_ISpellCheckProviderFactory = &IID_ISpellCheckProviderFactory_Value;
pub const ISpellCheckProviderFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_SupportedLanguages: fn(
            self: *const ISpellCheckProviderFactory,
            value: **IEnumString,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSupported: fn(
            self: *const ISpellCheckProviderFactory,
            languageTag: [*:0]const u16,
            value: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSpellCheckProvider: fn(
            self: *const ISpellCheckProviderFactory,
            languageTag: [*:0]const u16,
            value: **ISpellCheckProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellCheckProviderFactory_get_SupportedLanguages(self: *const T, value: **IEnumString) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellCheckProviderFactory.VTable, self.vtable).get_SupportedLanguages(@ptrCast(*const ISpellCheckProviderFactory, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellCheckProviderFactory_IsSupported(self: *const T, languageTag: [*:0]const u16, value: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellCheckProviderFactory.VTable, self.vtable).IsSupported(@ptrCast(*const ISpellCheckProviderFactory, self), languageTag, value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISpellCheckProviderFactory_CreateSpellCheckProvider(self: *const T, languageTag: [*:0]const u16, value: **ISpellCheckProvider) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISpellCheckProviderFactory.VTable, self.vtable).CreateSpellCheckProvider(@ptrCast(*const ISpellCheckProviderFactory, self), languageTag, value);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IFEClassFactory = extern struct {
    pub const VTable = extern struct {
        base: IClassFactory.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IClassFactory.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IMEDLG = extern struct {
    cbIMEDLG: i32,
    hwnd: HWND,
    lpwstrWord: PWSTR,
    nTabId: i32,
};

pub const IFECommon = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsDefaultIME: fn(
            self: *const IFECommon,
            szName: [*]const i8,
            cszName: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultIME: fn(
            self: *const IFECommon,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeWordRegDialog: fn(
            self: *const IFECommon,
            pimedlg: *IMEDLG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeDictToolDialog: fn(
            self: *const IFECommon,
            pimedlg: *IMEDLG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFECommon_IsDefaultIME(self: *const T, szName: [*]const i8, cszName: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFECommon.VTable, self.vtable).IsDefaultIME(@ptrCast(*const IFECommon, self), szName, cszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFECommon_SetDefaultIME(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFECommon.VTable, self.vtable).SetDefaultIME(@ptrCast(*const IFECommon, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFECommon_InvokeWordRegDialog(self: *const T, pimedlg: *IMEDLG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFECommon.VTable, self.vtable).InvokeWordRegDialog(@ptrCast(*const IFECommon, self), pimedlg);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFECommon_InvokeDictToolDialog(self: *const T, pimedlg: *IMEDLG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFECommon.VTable, self.vtable).InvokeDictToolDialog(@ptrCast(*const IFECommon, self), pimedlg);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WDD = extern struct {
    wDispPos: u16,
    Anonymous1: WDD._Anonymous1_e__Union,
    cchDisp: u16,
    Anonymous2: WDD._Anonymous2_e__Union,
    WDD_nReserve1: u32,
    nPos: u16,
    _bitfield: u16,
    pReserved: *c_void,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const MORRSLT = extern struct {
    dwSize: u32,
    pwchOutput: PWSTR,
    cchOutput: u16,
    Anonymous1: MORRSLT._Anonymous1_e__Union,
    Anonymous2: MORRSLT._Anonymous2_e__Union,
    pchInputPos: *u16,
    pchOutputIdxWDD: *u16,
    Anonymous3: MORRSLT._Anonymous3_e__Union,
    paMonoRubyPos: *u16,
    pWDD: *WDD,
    cWDD: i32,
    pPrivate: *c_void,
    BLKBuff: u16,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous3_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const IFELanguage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: fn(
            self: *const IFELanguage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IFELanguage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetJMorphResult: fn(
            self: *const IFELanguage,
            dwRequest: u32,
            dwCMode: u32,
            cwchInput: i32,
            pwchInput: [*:0]const u16,
            pfCInfo: *u32,
            ppResult: **MORRSLT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConversionModeCaps: fn(
            self: *const IFELanguage,
            pdwCaps: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPhonetic: fn(
            self: *const IFELanguage,
            string: BSTR,
            start: i32,
            length: i32,
            phonetic: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConversion: fn(
            self: *const IFELanguage,
            string: BSTR,
            start: i32,
            length: i32,
            result: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFELanguage_Open(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFELanguage.VTable, self.vtable).Open(@ptrCast(*const IFELanguage, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFELanguage_Close(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFELanguage.VTable, self.vtable).Close(@ptrCast(*const IFELanguage, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFELanguage_GetJMorphResult(self: *const T, dwRequest: u32, dwCMode: u32, cwchInput: i32, pwchInput: [*:0]const u16, pfCInfo: *u32, ppResult: **MORRSLT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFELanguage.VTable, self.vtable).GetJMorphResult(@ptrCast(*const IFELanguage, self), dwRequest, dwCMode, cwchInput, pwchInput, pfCInfo, ppResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFELanguage_GetConversionModeCaps(self: *const T, pdwCaps: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFELanguage.VTable, self.vtable).GetConversionModeCaps(@ptrCast(*const IFELanguage, self), pdwCaps);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFELanguage_GetPhonetic(self: *const T, string: BSTR, start: i32, length: i32, phonetic: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFELanguage.VTable, self.vtable).GetPhonetic(@ptrCast(*const IFELanguage, self), string, start, length, phonetic);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFELanguage_GetConversion(self: *const T, string: BSTR, start: i32, length: i32, result: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFELanguage.VTable, self.vtable).GetConversion(@ptrCast(*const IFELanguage, self), string, start, length, result);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IMEREG = extern enum(i32) {
    IFED_REG_HEAD = 0,
    IFED_REG_TAIL = 1,
    IFED_REG_DEL = 2,
};
pub const IFED_REG_HEAD = IMEREG.IFED_REG_HEAD;
pub const IFED_REG_TAIL = IMEREG.IFED_REG_TAIL;
pub const IFED_REG_DEL = IMEREG.IFED_REG_DEL;

pub const IMEFMT = extern enum(i32) {
    IFED_UNKNOWN = 0,
    IFED_MSIME2_BIN_SYSTEM = 1,
    IFED_MSIME2_BIN_USER = 2,
    IFED_MSIME2_TEXT_USER = 3,
    IFED_MSIME95_BIN_SYSTEM = 4,
    IFED_MSIME95_BIN_USER = 5,
    IFED_MSIME95_TEXT_USER = 6,
    IFED_MSIME97_BIN_SYSTEM = 7,
    IFED_MSIME97_BIN_USER = 8,
    IFED_MSIME97_TEXT_USER = 9,
    IFED_MSIME98_BIN_SYSTEM = 10,
    IFED_MSIME98_BIN_USER = 11,
    IFED_MSIME98_TEXT_USER = 12,
    IFED_ACTIVE_DICT = 13,
    IFED_ATOK9 = 14,
    IFED_ATOK10 = 15,
    IFED_NEC_AI_ = 16,
    IFED_WX_II = 17,
    IFED_WX_III = 18,
    IFED_VJE_20 = 19,
    IFED_MSIME98_SYSTEM_CE = 20,
    IFED_MSIME_BIN_SYSTEM = 21,
    IFED_MSIME_BIN_USER = 22,
    IFED_MSIME_TEXT_USER = 23,
    IFED_PIME2_BIN_USER = 24,
    IFED_PIME2_BIN_SYSTEM = 25,
    IFED_PIME2_BIN_STANDARD_SYSTEM = 26,
};
pub const IFED_UNKNOWN = IMEFMT.IFED_UNKNOWN;
pub const IFED_MSIME2_BIN_SYSTEM = IMEFMT.IFED_MSIME2_BIN_SYSTEM;
pub const IFED_MSIME2_BIN_USER = IMEFMT.IFED_MSIME2_BIN_USER;
pub const IFED_MSIME2_TEXT_USER = IMEFMT.IFED_MSIME2_TEXT_USER;
pub const IFED_MSIME95_BIN_SYSTEM = IMEFMT.IFED_MSIME95_BIN_SYSTEM;
pub const IFED_MSIME95_BIN_USER = IMEFMT.IFED_MSIME95_BIN_USER;
pub const IFED_MSIME95_TEXT_USER = IMEFMT.IFED_MSIME95_TEXT_USER;
pub const IFED_MSIME97_BIN_SYSTEM = IMEFMT.IFED_MSIME97_BIN_SYSTEM;
pub const IFED_MSIME97_BIN_USER = IMEFMT.IFED_MSIME97_BIN_USER;
pub const IFED_MSIME97_TEXT_USER = IMEFMT.IFED_MSIME97_TEXT_USER;
pub const IFED_MSIME98_BIN_SYSTEM = IMEFMT.IFED_MSIME98_BIN_SYSTEM;
pub const IFED_MSIME98_BIN_USER = IMEFMT.IFED_MSIME98_BIN_USER;
pub const IFED_MSIME98_TEXT_USER = IMEFMT.IFED_MSIME98_TEXT_USER;
pub const IFED_ACTIVE_DICT = IMEFMT.IFED_ACTIVE_DICT;
pub const IFED_ATOK9 = IMEFMT.IFED_ATOK9;
pub const IFED_ATOK10 = IMEFMT.IFED_ATOK10;
pub const IFED_NEC_AI_ = IMEFMT.IFED_NEC_AI_;
pub const IFED_WX_II = IMEFMT.IFED_WX_II;
pub const IFED_WX_III = IMEFMT.IFED_WX_III;
pub const IFED_VJE_20 = IMEFMT.IFED_VJE_20;
pub const IFED_MSIME98_SYSTEM_CE = IMEFMT.IFED_MSIME98_SYSTEM_CE;
pub const IFED_MSIME_BIN_SYSTEM = IMEFMT.IFED_MSIME_BIN_SYSTEM;
pub const IFED_MSIME_BIN_USER = IMEFMT.IFED_MSIME_BIN_USER;
pub const IFED_MSIME_TEXT_USER = IMEFMT.IFED_MSIME_TEXT_USER;
pub const IFED_PIME2_BIN_USER = IMEFMT.IFED_PIME2_BIN_USER;
pub const IFED_PIME2_BIN_SYSTEM = IMEFMT.IFED_PIME2_BIN_SYSTEM;
pub const IFED_PIME2_BIN_STANDARD_SYSTEM = IMEFMT.IFED_PIME2_BIN_STANDARD_SYSTEM;

pub const IMEUCT = extern enum(i32) {
    IFED_UCT_NONE = 0,
    IFED_UCT_STRING_SJIS = 1,
    IFED_UCT_STRING_UNICODE = 2,
    IFED_UCT_USER_DEFINED = 3,
    IFED_UCT_MAX = 4,
};
pub const IFED_UCT_NONE = IMEUCT.IFED_UCT_NONE;
pub const IFED_UCT_STRING_SJIS = IMEUCT.IFED_UCT_STRING_SJIS;
pub const IFED_UCT_STRING_UNICODE = IMEUCT.IFED_UCT_STRING_UNICODE;
pub const IFED_UCT_USER_DEFINED = IMEUCT.IFED_UCT_USER_DEFINED;
pub const IFED_UCT_MAX = IMEUCT.IFED_UCT_MAX;

pub const IMEWRD = extern struct {
    pwchReading: PWSTR,
    pwchDisplay: PWSTR,
    Anonymous: IMEWRD._Anonymous_e__Union,
    rgulAttrs: [2]u32,
    cbComment: i32,
    uct: IMEUCT,
    pvComment: *c_void,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const IMESHF = extern struct {
    cbShf: u16,
    verDic: u16,
    szTitle: [48]i8,
    szDescription: [256]i8,
    szCopyright: [128]i8,
};

pub const POSTBL = extern struct {
    nPos: u16,
    szName: *u8,
};

pub const IMEREL = extern enum(i32) {
    IFED_REL_NONE = 0,
    IFED_REL_NO = 1,
    IFED_REL_GA = 2,
    IFED_REL_WO = 3,
    IFED_REL_NI = 4,
    IFED_REL_DE = 5,
    IFED_REL_YORI = 6,
    IFED_REL_KARA = 7,
    IFED_REL_MADE = 8,
    IFED_REL_HE = 9,
    IFED_REL_TO = 10,
    IFED_REL_IDEOM = 11,
    IFED_REL_FUKU_YOUGEN = 12,
    IFED_REL_KEIYOU_YOUGEN = 13,
    IFED_REL_KEIDOU1_YOUGEN = 14,
    IFED_REL_KEIDOU2_YOUGEN = 15,
    IFED_REL_TAIGEN = 16,
    IFED_REL_YOUGEN = 17,
    IFED_REL_RENTAI_MEI = 18,
    IFED_REL_RENSOU = 19,
    IFED_REL_KEIYOU_TO_YOUGEN = 20,
    IFED_REL_KEIYOU_TARU_YOUGEN = 21,
    IFED_REL_UNKNOWN1 = 22,
    IFED_REL_UNKNOWN2 = 23,
    IFED_REL_ALL = 24,
};
pub const IFED_REL_NONE = IMEREL.IFED_REL_NONE;
pub const IFED_REL_NO = IMEREL.IFED_REL_NO;
pub const IFED_REL_GA = IMEREL.IFED_REL_GA;
pub const IFED_REL_WO = IMEREL.IFED_REL_WO;
pub const IFED_REL_NI = IMEREL.IFED_REL_NI;
pub const IFED_REL_DE = IMEREL.IFED_REL_DE;
pub const IFED_REL_YORI = IMEREL.IFED_REL_YORI;
pub const IFED_REL_KARA = IMEREL.IFED_REL_KARA;
pub const IFED_REL_MADE = IMEREL.IFED_REL_MADE;
pub const IFED_REL_HE = IMEREL.IFED_REL_HE;
pub const IFED_REL_TO = IMEREL.IFED_REL_TO;
pub const IFED_REL_IDEOM = IMEREL.IFED_REL_IDEOM;
pub const IFED_REL_FUKU_YOUGEN = IMEREL.IFED_REL_FUKU_YOUGEN;
pub const IFED_REL_KEIYOU_YOUGEN = IMEREL.IFED_REL_KEIYOU_YOUGEN;
pub const IFED_REL_KEIDOU1_YOUGEN = IMEREL.IFED_REL_KEIDOU1_YOUGEN;
pub const IFED_REL_KEIDOU2_YOUGEN = IMEREL.IFED_REL_KEIDOU2_YOUGEN;
pub const IFED_REL_TAIGEN = IMEREL.IFED_REL_TAIGEN;
pub const IFED_REL_YOUGEN = IMEREL.IFED_REL_YOUGEN;
pub const IFED_REL_RENTAI_MEI = IMEREL.IFED_REL_RENTAI_MEI;
pub const IFED_REL_RENSOU = IMEREL.IFED_REL_RENSOU;
pub const IFED_REL_KEIYOU_TO_YOUGEN = IMEREL.IFED_REL_KEIYOU_TO_YOUGEN;
pub const IFED_REL_KEIYOU_TARU_YOUGEN = IMEREL.IFED_REL_KEIYOU_TARU_YOUGEN;
pub const IFED_REL_UNKNOWN1 = IMEREL.IFED_REL_UNKNOWN1;
pub const IFED_REL_UNKNOWN2 = IMEREL.IFED_REL_UNKNOWN2;
pub const IFED_REL_ALL = IMEREL.IFED_REL_ALL;

pub const IMEDP = extern struct {
    wrdModifier: IMEWRD,
    wrdModifiee: IMEWRD,
    relID: IMEREL,
};

pub const PFNLOG = fn(
    param0: *IMEDP,
    param1: HRESULT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const IFEDictionary = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: fn(
            self: *const IFEDictionary,
            pchDictPath: ?*[260]i8,
            pshf: *IMESHF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IFEDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHeader: fn(
            self: *const IFEDictionary,
            pchDictPath: ?*[260]i8,
            pshf: *IMESHF,
            pjfmt: *IMEFMT,
            pulType: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisplayProperty: fn(
            self: *const IFEDictionary,
            hwnd: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPosTable: fn(
            self: *const IFEDictionary,
            prgPosTbl: **POSTBL,
            pcPosTbl: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWords: fn(
            self: *const IFEDictionary,
            pwchFirst: [*:0]const u16,
            pwchLast: [*:0]const u16,
            pwchDisplay: [*:0]const u16,
            ulPos: u32,
            ulSelect: u32,
            ulWordSrc: u32,
            pchBuffer: *u8,
            cbBuffer: u32,
            pcWrd: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NextWords: fn(
            self: *const IFEDictionary,
            pchBuffer: *u8,
            cbBuffer: u32,
            pcWrd: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: fn(
            self: *const IFEDictionary,
            pchDictPath: *const i8,
            pshf: *IMESHF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHeader: fn(
            self: *const IFEDictionary,
            pshf: *IMESHF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExistWord: fn(
            self: *const IFEDictionary,
            pwrd: *IMEWRD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExistDependency: fn(
            self: *const IFEDictionary,
            pdp: *IMEDP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterWord: fn(
            self: *const IFEDictionary,
            reg: IMEREG,
            pwrd: *IMEWRD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterDependency: fn(
            self: *const IFEDictionary,
            reg: IMEREG,
            pdp: *IMEDP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDependencies: fn(
            self: *const IFEDictionary,
            pwchKakariReading: [*:0]const u16,
            pwchKakariDisplay: [*:0]const u16,
            ulKakariPos: u32,
            pwchUkeReading: [*:0]const u16,
            pwchUkeDisplay: [*:0]const u16,
            ulUkePos: u32,
            jrel: IMEREL,
            ulWordSrc: u32,
            pchBuffer: *u8,
            cbBuffer: u32,
            pcdp: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NextDependencies: fn(
            self: *const IFEDictionary,
            pchBuffer: *u8,
            cbBuffer: u32,
            pcDp: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertFromOldMSIME: fn(
            self: *const IFEDictionary,
            pchDic: *const i8,
            pfnLog: PFNLOG,
            reg: IMEREG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertFromUserToSys: fn(
            self: *const IFEDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFEDictionary_Open(self: *const T, pchDictPath: ?*[260]i8, pshf: *IMESHF) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFEDictionary.VTable, self.vtable).Open(@ptrCast(*const IFEDictionary, self), pchDictPath, pshf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFEDictionary_Close(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFEDictionary.VTable, self.vtable).Close(@ptrCast(*const IFEDictionary, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFEDictionary_GetHeader(self: *const T, pchDictPath: ?*[260]i8, pshf: *IMESHF, pjfmt: *IMEFMT, pulType: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFEDictionary.VTable, self.vtable).GetHeader(@ptrCast(*const IFEDictionary, self), pchDictPath, pshf, pjfmt, pulType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFEDictionary_DisplayProperty(self: *const T, hwnd: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFEDictionary.VTable, self.vtable).DisplayProperty(@ptrCast(*const IFEDictionary, self), hwnd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFEDictionary_GetPosTable(self: *const T, prgPosTbl: **POSTBL, pcPosTbl: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFEDictionary.VTable, self.vtable).GetPosTable(@ptrCast(*const IFEDictionary, self), prgPosTbl, pcPosTbl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFEDictionary_GetWords(self: *const T, pwchFirst: [*:0]const u16, pwchLast: [*:0]const u16, pwchDisplay: [*:0]const u16, ulPos: u32, ulSelect: u32, ulWordSrc: u32, pchBuffer: *u8, cbBuffer: u32, pcWrd: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFEDictionary.VTable, self.vtable).GetWords(@ptrCast(*const IFEDictionary, self), pwchFirst, pwchLast, pwchDisplay, ulPos, ulSelect, ulWordSrc, pchBuffer, cbBuffer, pcWrd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFEDictionary_NextWords(self: *const T, pchBuffer: *u8, cbBuffer: u32, pcWrd: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFEDictionary.VTable, self.vtable).NextWords(@ptrCast(*const IFEDictionary, self), pchBuffer, cbBuffer, pcWrd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFEDictionary_Create(self: *const T, pchDictPath: *const i8, pshf: *IMESHF) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFEDictionary.VTable, self.vtable).Create(@ptrCast(*const IFEDictionary, self), pchDictPath, pshf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFEDictionary_SetHeader(self: *const T, pshf: *IMESHF) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFEDictionary.VTable, self.vtable).SetHeader(@ptrCast(*const IFEDictionary, self), pshf);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFEDictionary_ExistWord(self: *const T, pwrd: *IMEWRD) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFEDictionary.VTable, self.vtable).ExistWord(@ptrCast(*const IFEDictionary, self), pwrd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFEDictionary_ExistDependency(self: *const T, pdp: *IMEDP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFEDictionary.VTable, self.vtable).ExistDependency(@ptrCast(*const IFEDictionary, self), pdp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFEDictionary_RegisterWord(self: *const T, reg: IMEREG, pwrd: *IMEWRD) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFEDictionary.VTable, self.vtable).RegisterWord(@ptrCast(*const IFEDictionary, self), reg, pwrd);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFEDictionary_RegisterDependency(self: *const T, reg: IMEREG, pdp: *IMEDP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFEDictionary.VTable, self.vtable).RegisterDependency(@ptrCast(*const IFEDictionary, self), reg, pdp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFEDictionary_GetDependencies(self: *const T, pwchKakariReading: [*:0]const u16, pwchKakariDisplay: [*:0]const u16, ulKakariPos: u32, pwchUkeReading: [*:0]const u16, pwchUkeDisplay: [*:0]const u16, ulUkePos: u32, jrel: IMEREL, ulWordSrc: u32, pchBuffer: *u8, cbBuffer: u32, pcdp: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFEDictionary.VTable, self.vtable).GetDependencies(@ptrCast(*const IFEDictionary, self), pwchKakariReading, pwchKakariDisplay, ulKakariPos, pwchUkeReading, pwchUkeDisplay, ulUkePos, jrel, ulWordSrc, pchBuffer, cbBuffer, pcdp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFEDictionary_NextDependencies(self: *const T, pchBuffer: *u8, cbBuffer: u32, pcDp: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFEDictionary.VTable, self.vtable).NextDependencies(@ptrCast(*const IFEDictionary, self), pchBuffer, cbBuffer, pcDp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFEDictionary_ConvertFromOldMSIME(self: *const T, pchDic: *const i8, pfnLog: PFNLOG, reg: IMEREG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFEDictionary.VTable, self.vtable).ConvertFromOldMSIME(@ptrCast(*const IFEDictionary, self), pchDic, pfnLog, reg);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFEDictionary_ConvertFromUserToSys(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFEDictionary.VTable, self.vtable).ConvertFromUserToSys(@ptrCast(*const IFEDictionary, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IMEKMSINIT = extern struct {
    cbSize: i32,
    hWnd: HWND,
};

pub const IMEKMSKEY = extern struct {
    dwStatus: u32,
    dwCompStatus: u32,
    dwVKEY: u32,
    Anonymous1: IMEKMSKEY._Anonymous1_e__Union,
    Anonymous2: IMEKMSKEY._Anonymous2_e__Union,
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
};

pub const IMEKMS = extern struct {
    cbSize: i32,
    hIMC: *HIMC__,
    cKeyList: u32,
    pKeyList: *IMEKMSKEY,
};

pub const IMEKMSNTFY = extern struct {
    cbSize: i32,
    hIMC: *HIMC__,
    fSelect: BOOL,
};

pub const IMEKMSKMP = extern struct {
    cbSize: i32,
    hIMC: *HIMC__,
    idLang: u16,
    wVKStart: u16,
    wVKEnd: u16,
    cKeyList: i32,
    pKeyList: *IMEKMSKEY,
};

pub const IMEKMSINVK = extern struct {
    cbSize: i32,
    hIMC: *HIMC__,
    dwControl: u32,
};

pub const IMEKMSFUNCDESC = extern struct {
    cbSize: i32,
    idLang: u16,
    dwControl: u32,
    pwszDescription: [128]u16,
};

pub const fpCreateIFECommonInstanceType = fn(
    ppvObj: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const fpCreateIFELanguageInstanceType = fn(
    clsid: *const Guid,
    ppvObj: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const fpCreateIFEDictionaryInstanceType = fn(
    ppvObj: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const COMPOSITIONSTRING = extern struct {
    dwSize: u32,
    dwCompReadAttrLen: u32,
    dwCompReadAttrOffset: u32,
    dwCompReadClauseLen: u32,
    dwCompReadClauseOffset: u32,
    dwCompReadStrLen: u32,
    dwCompReadStrOffset: u32,
    dwCompAttrLen: u32,
    dwCompAttrOffset: u32,
    dwCompClauseLen: u32,
    dwCompClauseOffset: u32,
    dwCompStrLen: u32,
    dwCompStrOffset: u32,
    dwCursorPos: u32,
    dwDeltaStart: u32,
    dwResultReadClauseLen: u32,
    dwResultReadClauseOffset: u32,
    dwResultReadStrLen: u32,
    dwResultReadStrOffset: u32,
    dwResultClauseLen: u32,
    dwResultClauseOffset: u32,
    dwResultStrLen: u32,
    dwResultStrOffset: u32,
    dwPrivateSize: u32,
    dwPrivateOffset: u32,
};

pub const GUIDELINE = extern struct {
    dwSize: u32,
    dwLevel: u32,
    dwIndex: u32,
    dwStrLen: u32,
    dwStrOffset: u32,
    dwPrivateSize: u32,
    dwPrivateOffset: u32,
};

pub const TRANSMSG = extern struct {
    message: u32,
    wParam: WPARAM,
    lParam: LPARAM,
};

pub const TRANSMSGLIST = extern struct {
    uMsgCount: u32,
    TransMsg: [1]TRANSMSG,
};

pub const CANDIDATEINFO = extern struct {
    dwSize: u32,
    dwCount: u32,
    dwOffset: [32]u32,
    dwPrivateSize: u32,
    dwPrivateOffset: u32,
};

pub const INPUTCONTEXT = extern struct {
    hWnd: HWND,
    fOpen: BOOL,
    ptStatusWndPos: POINT,
    ptSoftKbdPos: POINT,
    fdwConversion: u32,
    fdwSentence: u32,
    lfFont: INPUTCONTEXT._lfFont_e__Union,
    cfCompForm: COMPOSITIONFORM,
    cfCandForm: [4]CANDIDATEFORM,
    hCompStr: *HIMCC__,
    hCandInfo: *HIMCC__,
    hGuideLine: *HIMCC__,
    hPrivate: *HIMCC__,
    dwNumMsgBuf: u32,
    hMsgBuf: *HIMCC__,
    fdwInit: u32,
    dwReserve: [3]u32,
    const _lfFont_e__Union = u32; // TODO: generate this nested type!
};

pub const IMEINFO = extern struct {
    dwPrivateDataSize: u32,
    fdwProperty: u32,
    fdwConversionCaps: u32,
    fdwSentenceCaps: u32,
    fdwUICaps: u32,
    fdwSCSCaps: u32,
    fdwSelectCaps: u32,
};

pub const SOFTKBDDATA = extern struct {
    uCount: u32,
    wCode: [256]u16,
};

pub const APPLETIDLIST = extern struct {
    count: i32,
    pIIDList: *Guid,
};

pub const IMESTRINGCANDIDATE = extern struct {
    uCount: u32,
    lpwstr: [1]*u16,
};

pub const IMEITEM = extern struct {
    cbSize: i32,
    iType: i32,
    lpItemData: *c_void,
};

pub const IMEITEMCANDIDATE = extern struct {
    uCount: u32,
    imeItem: [1]IMEITEM,
};

pub const tabIMESTRINGINFO = extern struct {
    dwFarEastId: u32,
    lpwstr: PWSTR,
};

pub const tabIMEFAREASTINFO = extern struct {
    dwSize: u32,
    dwType: u32,
    dwData: [1]u32,
};

pub const IMESTRINGCANDIDATEINFO = extern struct {
    dwFarEastId: u32,
    lpFarEastInfo: *tabIMEFAREASTINFO,
    fInfoMask: u32,
    iSelIndex: i32,
    uCount: u32,
    lpwstr: [1]*u16,
};

pub const IMECOMPOSITIONSTRINGINFO = extern struct {
    iCompStrLen: i32,
    iCaretPos: i32,
    iEditStart: i32,
    iEditLen: i32,
    iTargetStart: i32,
    iTargetLen: i32,
};

pub const IMECHARINFO = extern struct {
    wch: u16,
    dwCharInfo: u32,
};

pub const IMEAPPLETCFG = extern struct {
    dwConfig: u32,
    wchTitle: [64]u16,
    wchTitleFontFace: [32]u16,
    dwCharSet: u32,
    iCategory: i32,
    hIcon: HICON,
    langID: u16,
    dummy: u16,
    lReserved1: LPARAM,
};

pub const IMEAPPLETUI = extern struct {
    hwnd: HWND,
    dwStyle: u32,
    width: i32,
    height: i32,
    minWidth: i32,
    minHeight: i32,
    maxWidth: i32,
    maxHeight: i32,
    lReserved1: LPARAM,
    lReserved2: LPARAM,
};

pub const APPLYCANDEXPARAM = extern struct {
    dwSize: u32,
    lpwstrDisplay: PWSTR,
    lpwstrReading: PWSTR,
    dwReserved: u32,
};

pub const IImeSpecifyApplets = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAppletIIDList: fn(
            self: *const IImeSpecifyApplets,
            refiid: *const Guid,
            lpIIDList: *APPLETIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IImeSpecifyApplets_GetAppletIIDList(self: *const T, refiid: *const Guid, lpIIDList: *APPLETIDLIST) callconv(.Inline) HRESULT {
            return @ptrCast(*const IImeSpecifyApplets.VTable, self.vtable).GetAppletIIDList(@ptrCast(*const IImeSpecifyApplets, self), refiid, lpIIDList);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IImePadApplet = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IImePadApplet,
            lpIImePad: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Terminate: fn(
            self: *const IImePadApplet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAppletConfig: fn(
            self: *const IImePadApplet,
            lpAppletCfg: *IMEAPPLETCFG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateUI: fn(
            self: *const IImePadApplet,
            hwndParent: HWND,
            lpImeAppletUI: *IMEAPPLETUI,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Notify: fn(
            self: *const IImePadApplet,
            lpImePad: *IUnknown,
            notify: i32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IImePadApplet_Initialize(self: *const T, lpIImePad: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IImePadApplet.VTable, self.vtable).Initialize(@ptrCast(*const IImePadApplet, self), lpIImePad);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IImePadApplet_Terminate(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IImePadApplet.VTable, self.vtable).Terminate(@ptrCast(*const IImePadApplet, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IImePadApplet_GetAppletConfig(self: *const T, lpAppletCfg: *IMEAPPLETCFG) callconv(.Inline) HRESULT {
            return @ptrCast(*const IImePadApplet.VTable, self.vtable).GetAppletConfig(@ptrCast(*const IImePadApplet, self), lpAppletCfg);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IImePadApplet_CreateUI(self: *const T, hwndParent: HWND, lpImeAppletUI: *IMEAPPLETUI) callconv(.Inline) HRESULT {
            return @ptrCast(*const IImePadApplet.VTable, self.vtable).CreateUI(@ptrCast(*const IImePadApplet, self), hwndParent, lpImeAppletUI);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IImePadApplet_Notify(self: *const T, lpImePad: *IUnknown, notify: i32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IImePadApplet.VTable, self.vtable).Notify(@ptrCast(*const IImePadApplet, self), lpImePad, notify, wParam, lParam);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IImePad = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Request: fn(
            self: *const IImePad,
            pIImePadApplet: *IImePadApplet,
            reqId: i32,
            wParam: WPARAM,
            lParam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IImePad_Request(self: *const T, pIImePadApplet: *IImePadApplet, reqId: i32, wParam: WPARAM, lParam: LPARAM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IImePad.VTable, self.vtable).Request(@ptrCast(*const IImePad, self), pIImePadApplet, reqId, wParam, lParam);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IImePlugInDictDictionaryList_Value = @import("../zig.zig").Guid.initString("98752974-b0a6-489b-8f6f-bff3769c8eeb");
pub const IID_IImePlugInDictDictionaryList = &IID_IImePlugInDictDictionaryList_Value;
pub const IImePlugInDictDictionaryList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDictionariesInUse: fn(
            self: *const IImePlugInDictDictionaryList,
            prgDictionaryGUID: **SAFEARRAY,
            prgDateCreated: **SAFEARRAY,
            prgfEncrypted: **SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteDictionary: fn(
            self: *const IImePlugInDictDictionaryList,
            bstrDictionaryGUID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IImePlugInDictDictionaryList_GetDictionariesInUse(self: *const T, prgDictionaryGUID: **SAFEARRAY, prgDateCreated: **SAFEARRAY, prgfEncrypted: **SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IImePlugInDictDictionaryList.VTable, self.vtable).GetDictionariesInUse(@ptrCast(*const IImePlugInDictDictionaryList, self), prgDictionaryGUID, prgDateCreated, prgfEncrypted);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IImePlugInDictDictionaryList_DeleteDictionary(self: *const T, bstrDictionaryGUID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IImePlugInDictDictionaryList.VTable, self.vtable).DeleteDictionary(@ptrCast(*const IImePlugInDictDictionaryList, self), bstrDictionaryGUID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const SCRIPT_CONTROL = extern struct {
    _bitfield: u32,
};

pub const SCRIPT_STATE = extern struct {
    _bitfield: u16,
};

pub const SCRIPT_ANALYSIS = extern struct {
    _bitfield: u16,
    s: SCRIPT_STATE,
};

pub const SCRIPT_ITEM = extern struct {
    iCharPos: i32,
    a: SCRIPT_ANALYSIS,
};

pub const SCRIPT_JUSTIFY = extern enum(i32) {
    NONE = 0,
    ARABIC_BLANK = 1,
    CHARACTER = 2,
    RESERVED1 = 3,
    BLANK = 4,
    RESERVED2 = 5,
    RESERVED3 = 6,
    ARABIC_NORMAL = 7,
    ARABIC_KASHIDA = 8,
    ARABIC_ALEF = 9,
    ARABIC_HA = 10,
    ARABIC_RA = 11,
    ARABIC_BA = 12,
    ARABIC_BARA = 13,
    ARABIC_SEEN = 14,
    ARABIC_SEEN_M = 15,
};
pub const SCRIPT_JUSTIFY_NONE = SCRIPT_JUSTIFY.NONE;
pub const SCRIPT_JUSTIFY_ARABIC_BLANK = SCRIPT_JUSTIFY.ARABIC_BLANK;
pub const SCRIPT_JUSTIFY_CHARACTER = SCRIPT_JUSTIFY.CHARACTER;
pub const SCRIPT_JUSTIFY_RESERVED1 = SCRIPT_JUSTIFY.RESERVED1;
pub const SCRIPT_JUSTIFY_BLANK = SCRIPT_JUSTIFY.BLANK;
pub const SCRIPT_JUSTIFY_RESERVED2 = SCRIPT_JUSTIFY.RESERVED2;
pub const SCRIPT_JUSTIFY_RESERVED3 = SCRIPT_JUSTIFY.RESERVED3;
pub const SCRIPT_JUSTIFY_ARABIC_NORMAL = SCRIPT_JUSTIFY.ARABIC_NORMAL;
pub const SCRIPT_JUSTIFY_ARABIC_KASHIDA = SCRIPT_JUSTIFY.ARABIC_KASHIDA;
pub const SCRIPT_JUSTIFY_ARABIC_ALEF = SCRIPT_JUSTIFY.ARABIC_ALEF;
pub const SCRIPT_JUSTIFY_ARABIC_HA = SCRIPT_JUSTIFY.ARABIC_HA;
pub const SCRIPT_JUSTIFY_ARABIC_RA = SCRIPT_JUSTIFY.ARABIC_RA;
pub const SCRIPT_JUSTIFY_ARABIC_BA = SCRIPT_JUSTIFY.ARABIC_BA;
pub const SCRIPT_JUSTIFY_ARABIC_BARA = SCRIPT_JUSTIFY.ARABIC_BARA;
pub const SCRIPT_JUSTIFY_ARABIC_SEEN = SCRIPT_JUSTIFY.ARABIC_SEEN;
pub const SCRIPT_JUSTIFY_ARABIC_SEEN_M = SCRIPT_JUSTIFY.ARABIC_SEEN_M;

pub const SCRIPT_VISATTR = extern struct {
    _bitfield: u16,
};

pub const GOFFSET = extern struct {
    du: i32,
    dv: i32,
};

pub const SCRIPT_LOGATTR = extern struct {
    _bitfield: u8,
};

pub const SCRIPT_PROPERTIES = extern struct {
    _bitfield1: u32,
    _bitfield2: u32,
};

pub const SCRIPT_FONTPROPERTIES = extern struct {
    cBytes: i32,
    wgBlank: u16,
    wgDefault: u16,
    wgInvalid: u16,
    wgKashida: u16,
    iKashidaWidth: i32,
};

pub const SCRIPT_TABDEF = extern struct {
    cTabStops: i32,
    iScale: i32,
    pTabStops: *i32,
    iTabOrigin: i32,
};

pub const SCRIPT_DIGITSUBSTITUTE = extern struct {
    _bitfield1: u32,
    _bitfield2: u32,
    dwReserved: u32,
};

pub const opentype_feature_record = extern struct {
    tagFeature: u32,
    lParameter: i32,
};

pub const textrange_properties = extern struct {
    potfRecords: *opentype_feature_record,
    cotfRecords: i32,
};

pub const script_charprop = extern struct {
    _bitfield: u16,
};

pub const script_glyphprop = extern struct {
    sva: SCRIPT_VISATTR,
    reserved: u16,
};

pub const UErrorCode = extern enum(i32) {
    U_USING_FALLBACK_WARNING = -128,
    U_ERROR_WARNING_START = -128,
    U_USING_DEFAULT_WARNING = -127,
    U_SAFECLONE_ALLOCATED_WARNING = -126,
    U_STATE_OLD_WARNING = -125,
    U_STRING_NOT_TERMINATED_WARNING = -124,
    U_SORT_KEY_TOO_SHORT_WARNING = -123,
    U_AMBIGUOUS_ALIAS_WARNING = -122,
    U_DIFFERENT_UCA_VERSION = -121,
    U_PLUGIN_CHANGED_LEVEL_WARNING = -120,
    U_ZERO_ERROR = 0,
    U_ILLEGAL_ARGUMENT_ERROR = 1,
    U_MISSING_RESOURCE_ERROR = 2,
    U_INVALID_FORMAT_ERROR = 3,
    U_FILE_ACCESS_ERROR = 4,
    U_INTERNAL_PROGRAM_ERROR = 5,
    U_MESSAGE_PARSE_ERROR = 6,
    U_MEMORY_ALLOCATION_ERROR = 7,
    U_INDEX_OUTOFBOUNDS_ERROR = 8,
    U_PARSE_ERROR = 9,
    U_INVALID_CHAR_FOUND = 10,
    U_TRUNCATED_CHAR_FOUND = 11,
    U_ILLEGAL_CHAR_FOUND = 12,
    U_INVALID_TABLE_FORMAT = 13,
    U_INVALID_TABLE_FILE = 14,
    U_BUFFER_OVERFLOW_ERROR = 15,
    U_UNSUPPORTED_ERROR = 16,
    U_RESOURCE_TYPE_MISMATCH = 17,
    U_ILLEGAL_ESCAPE_SEQUENCE = 18,
    U_UNSUPPORTED_ESCAPE_SEQUENCE = 19,
    U_NO_SPACE_AVAILABLE = 20,
    U_CE_NOT_FOUND_ERROR = 21,
    U_PRIMARY_TOO_LONG_ERROR = 22,
    U_STATE_TOO_OLD_ERROR = 23,
    U_TOO_MANY_ALIASES_ERROR = 24,
    U_ENUM_OUT_OF_SYNC_ERROR = 25,
    U_INVARIANT_CONVERSION_ERROR = 26,
    U_INVALID_STATE_ERROR = 27,
    U_COLLATOR_VERSION_MISMATCH = 28,
    U_USELESS_COLLATOR_ERROR = 29,
    U_NO_WRITE_PERMISSION = 30,
    U_BAD_VARIABLE_DEFINITION = 65536,
    U_PARSE_ERROR_START = 65536,
    U_MALFORMED_RULE = 65537,
    U_MALFORMED_SET = 65538,
    U_MALFORMED_SYMBOL_REFERENCE = 65539,
    U_MALFORMED_UNICODE_ESCAPE = 65540,
    U_MALFORMED_VARIABLE_DEFINITION = 65541,
    U_MALFORMED_VARIABLE_REFERENCE = 65542,
    U_MISMATCHED_SEGMENT_DELIMITERS = 65543,
    U_MISPLACED_ANCHOR_START = 65544,
    U_MISPLACED_CURSOR_OFFSET = 65545,
    U_MISPLACED_QUANTIFIER = 65546,
    U_MISSING_OPERATOR = 65547,
    U_MISSING_SEGMENT_CLOSE = 65548,
    U_MULTIPLE_ANTE_CONTEXTS = 65549,
    U_MULTIPLE_CURSORS = 65550,
    U_MULTIPLE_POST_CONTEXTS = 65551,
    U_TRAILING_BACKSLASH = 65552,
    U_UNDEFINED_SEGMENT_REFERENCE = 65553,
    U_UNDEFINED_VARIABLE = 65554,
    U_UNQUOTED_SPECIAL = 65555,
    U_UNTERMINATED_QUOTE = 65556,
    U_RULE_MASK_ERROR = 65557,
    U_MISPLACED_COMPOUND_FILTER = 65558,
    U_MULTIPLE_COMPOUND_FILTERS = 65559,
    U_INVALID_RBT_SYNTAX = 65560,
    U_INVALID_PROPERTY_PATTERN = 65561,
    U_MALFORMED_PRAGMA = 65562,
    U_UNCLOSED_SEGMENT = 65563,
    U_ILLEGAL_CHAR_IN_SEGMENT = 65564,
    U_VARIABLE_RANGE_EXHAUSTED = 65565,
    U_VARIABLE_RANGE_OVERLAP = 65566,
    U_ILLEGAL_CHARACTER = 65567,
    U_INTERNAL_TRANSLITERATOR_ERROR = 65568,
    U_INVALID_ID = 65569,
    U_INVALID_FUNCTION = 65570,
    U_UNEXPECTED_TOKEN = 65792,
    U_FMT_PARSE_ERROR_START = 65792,
    U_MULTIPLE_DECIMAL_SEPARATORS = 65793,
    U_MULTIPLE_DECIMAL_SEPERATORS = 65793,
    U_MULTIPLE_EXPONENTIAL_SYMBOLS = 65794,
    U_MALFORMED_EXPONENTIAL_PATTERN = 65795,
    U_MULTIPLE_PERCENT_SYMBOLS = 65796,
    U_MULTIPLE_PERMILL_SYMBOLS = 65797,
    U_MULTIPLE_PAD_SPECIFIERS = 65798,
    U_PATTERN_SYNTAX_ERROR = 65799,
    U_ILLEGAL_PAD_POSITION = 65800,
    U_UNMATCHED_BRACES = 65801,
    U_UNSUPPORTED_PROPERTY = 65802,
    U_UNSUPPORTED_ATTRIBUTE = 65803,
    U_ARGUMENT_TYPE_MISMATCH = 65804,
    U_DUPLICATE_KEYWORD = 65805,
    U_UNDEFINED_KEYWORD = 65806,
    U_DEFAULT_KEYWORD_MISSING = 65807,
    U_DECIMAL_NUMBER_SYNTAX_ERROR = 65808,
    U_FORMAT_INEXACT_ERROR = 65809,
    U_NUMBER_ARG_OUTOFBOUNDS_ERROR = 65810,
    U_NUMBER_SKELETON_SYNTAX_ERROR = 65811,
    U_BRK_INTERNAL_ERROR = 66048,
    U_BRK_ERROR_START = 66048,
    U_BRK_HEX_DIGITS_EXPECTED = 66049,
    U_BRK_SEMICOLON_EXPECTED = 66050,
    U_BRK_RULE_SYNTAX = 66051,
    U_BRK_UNCLOSED_SET = 66052,
    U_BRK_ASSIGN_ERROR = 66053,
    U_BRK_VARIABLE_REDFINITION = 66054,
    U_BRK_MISMATCHED_PAREN = 66055,
    U_BRK_NEW_LINE_IN_QUOTED_STRING = 66056,
    U_BRK_UNDEFINED_VARIABLE = 66057,
    U_BRK_INIT_ERROR = 66058,
    U_BRK_RULE_EMPTY_SET = 66059,
    U_BRK_UNRECOGNIZED_OPTION = 66060,
    U_BRK_MALFORMED_RULE_TAG = 66061,
    U_REGEX_INTERNAL_ERROR = 66304,
    U_REGEX_ERROR_START = 66304,
    U_REGEX_RULE_SYNTAX = 66305,
    U_REGEX_INVALID_STATE = 66306,
    U_REGEX_BAD_ESCAPE_SEQUENCE = 66307,
    U_REGEX_PROPERTY_SYNTAX = 66308,
    U_REGEX_UNIMPLEMENTED = 66309,
    U_REGEX_MISMATCHED_PAREN = 66310,
    U_REGEX_NUMBER_TOO_BIG = 66311,
    U_REGEX_BAD_INTERVAL = 66312,
    U_REGEX_MAX_LT_MIN = 66313,
    U_REGEX_INVALID_BACK_REF = 66314,
    U_REGEX_INVALID_FLAG = 66315,
    U_REGEX_LOOK_BEHIND_LIMIT = 66316,
    U_REGEX_SET_CONTAINS_STRING = 66317,
    U_REGEX_MISSING_CLOSE_BRACKET = 66319,
    U_REGEX_INVALID_RANGE = 66320,
    U_REGEX_STACK_OVERFLOW = 66321,
    U_REGEX_TIME_OUT = 66322,
    U_REGEX_STOPPED_BY_CALLER = 66323,
    U_REGEX_PATTERN_TOO_BIG = 66324,
    U_REGEX_INVALID_CAPTURE_GROUP_NAME = 66325,
    U_IDNA_PROHIBITED_ERROR = 66560,
    U_IDNA_ERROR_START = 66560,
    U_IDNA_UNASSIGNED_ERROR = 66561,
    U_IDNA_CHECK_BIDI_ERROR = 66562,
    U_IDNA_STD3_ASCII_RULES_ERROR = 66563,
    U_IDNA_ACE_PREFIX_ERROR = 66564,
    U_IDNA_VERIFICATION_ERROR = 66565,
    U_IDNA_LABEL_TOO_LONG_ERROR = 66566,
    U_IDNA_ZERO_LENGTH_LABEL_ERROR = 66567,
    U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR = 66568,
    U_STRINGPREP_PROHIBITED_ERROR = 66560,
    U_STRINGPREP_UNASSIGNED_ERROR = 66561,
    U_STRINGPREP_CHECK_BIDI_ERROR = 66562,
    U_PLUGIN_ERROR_START = 66816,
    U_PLUGIN_TOO_HIGH = 66816,
    U_PLUGIN_DIDNT_SET_LEVEL = 66817,
};
pub const U_USING_FALLBACK_WARNING = UErrorCode.U_USING_FALLBACK_WARNING;
pub const U_ERROR_WARNING_START = UErrorCode.U_ERROR_WARNING_START;
pub const U_USING_DEFAULT_WARNING = UErrorCode.U_USING_DEFAULT_WARNING;
pub const U_SAFECLONE_ALLOCATED_WARNING = UErrorCode.U_SAFECLONE_ALLOCATED_WARNING;
pub const U_STATE_OLD_WARNING = UErrorCode.U_STATE_OLD_WARNING;
pub const U_STRING_NOT_TERMINATED_WARNING = UErrorCode.U_STRING_NOT_TERMINATED_WARNING;
pub const U_SORT_KEY_TOO_SHORT_WARNING = UErrorCode.U_SORT_KEY_TOO_SHORT_WARNING;
pub const U_AMBIGUOUS_ALIAS_WARNING = UErrorCode.U_AMBIGUOUS_ALIAS_WARNING;
pub const U_DIFFERENT_UCA_VERSION = UErrorCode.U_DIFFERENT_UCA_VERSION;
pub const U_PLUGIN_CHANGED_LEVEL_WARNING = UErrorCode.U_PLUGIN_CHANGED_LEVEL_WARNING;
pub const U_ZERO_ERROR = UErrorCode.U_ZERO_ERROR;
pub const U_ILLEGAL_ARGUMENT_ERROR = UErrorCode.U_ILLEGAL_ARGUMENT_ERROR;
pub const U_MISSING_RESOURCE_ERROR = UErrorCode.U_MISSING_RESOURCE_ERROR;
pub const U_INVALID_FORMAT_ERROR = UErrorCode.U_INVALID_FORMAT_ERROR;
pub const U_FILE_ACCESS_ERROR = UErrorCode.U_FILE_ACCESS_ERROR;
pub const U_INTERNAL_PROGRAM_ERROR = UErrorCode.U_INTERNAL_PROGRAM_ERROR;
pub const U_MESSAGE_PARSE_ERROR = UErrorCode.U_MESSAGE_PARSE_ERROR;
pub const U_MEMORY_ALLOCATION_ERROR = UErrorCode.U_MEMORY_ALLOCATION_ERROR;
pub const U_INDEX_OUTOFBOUNDS_ERROR = UErrorCode.U_INDEX_OUTOFBOUNDS_ERROR;
pub const U_PARSE_ERROR = UErrorCode.U_PARSE_ERROR;
pub const U_INVALID_CHAR_FOUND = UErrorCode.U_INVALID_CHAR_FOUND;
pub const U_TRUNCATED_CHAR_FOUND = UErrorCode.U_TRUNCATED_CHAR_FOUND;
pub const U_ILLEGAL_CHAR_FOUND = UErrorCode.U_ILLEGAL_CHAR_FOUND;
pub const U_INVALID_TABLE_FORMAT = UErrorCode.U_INVALID_TABLE_FORMAT;
pub const U_INVALID_TABLE_FILE = UErrorCode.U_INVALID_TABLE_FILE;
pub const U_BUFFER_OVERFLOW_ERROR = UErrorCode.U_BUFFER_OVERFLOW_ERROR;
pub const U_UNSUPPORTED_ERROR = UErrorCode.U_UNSUPPORTED_ERROR;
pub const U_RESOURCE_TYPE_MISMATCH = UErrorCode.U_RESOURCE_TYPE_MISMATCH;
pub const U_ILLEGAL_ESCAPE_SEQUENCE = UErrorCode.U_ILLEGAL_ESCAPE_SEQUENCE;
pub const U_UNSUPPORTED_ESCAPE_SEQUENCE = UErrorCode.U_UNSUPPORTED_ESCAPE_SEQUENCE;
pub const U_NO_SPACE_AVAILABLE = UErrorCode.U_NO_SPACE_AVAILABLE;
pub const U_CE_NOT_FOUND_ERROR = UErrorCode.U_CE_NOT_FOUND_ERROR;
pub const U_PRIMARY_TOO_LONG_ERROR = UErrorCode.U_PRIMARY_TOO_LONG_ERROR;
pub const U_STATE_TOO_OLD_ERROR = UErrorCode.U_STATE_TOO_OLD_ERROR;
pub const U_TOO_MANY_ALIASES_ERROR = UErrorCode.U_TOO_MANY_ALIASES_ERROR;
pub const U_ENUM_OUT_OF_SYNC_ERROR = UErrorCode.U_ENUM_OUT_OF_SYNC_ERROR;
pub const U_INVARIANT_CONVERSION_ERROR = UErrorCode.U_INVARIANT_CONVERSION_ERROR;
pub const U_INVALID_STATE_ERROR = UErrorCode.U_INVALID_STATE_ERROR;
pub const U_COLLATOR_VERSION_MISMATCH = UErrorCode.U_COLLATOR_VERSION_MISMATCH;
pub const U_USELESS_COLLATOR_ERROR = UErrorCode.U_USELESS_COLLATOR_ERROR;
pub const U_NO_WRITE_PERMISSION = UErrorCode.U_NO_WRITE_PERMISSION;
pub const U_BAD_VARIABLE_DEFINITION = UErrorCode.U_BAD_VARIABLE_DEFINITION;
pub const U_PARSE_ERROR_START = UErrorCode.U_PARSE_ERROR_START;
pub const U_MALFORMED_RULE = UErrorCode.U_MALFORMED_RULE;
pub const U_MALFORMED_SET = UErrorCode.U_MALFORMED_SET;
pub const U_MALFORMED_SYMBOL_REFERENCE = UErrorCode.U_MALFORMED_SYMBOL_REFERENCE;
pub const U_MALFORMED_UNICODE_ESCAPE = UErrorCode.U_MALFORMED_UNICODE_ESCAPE;
pub const U_MALFORMED_VARIABLE_DEFINITION = UErrorCode.U_MALFORMED_VARIABLE_DEFINITION;
pub const U_MALFORMED_VARIABLE_REFERENCE = UErrorCode.U_MALFORMED_VARIABLE_REFERENCE;
pub const U_MISMATCHED_SEGMENT_DELIMITERS = UErrorCode.U_MISMATCHED_SEGMENT_DELIMITERS;
pub const U_MISPLACED_ANCHOR_START = UErrorCode.U_MISPLACED_ANCHOR_START;
pub const U_MISPLACED_CURSOR_OFFSET = UErrorCode.U_MISPLACED_CURSOR_OFFSET;
pub const U_MISPLACED_QUANTIFIER = UErrorCode.U_MISPLACED_QUANTIFIER;
pub const U_MISSING_OPERATOR = UErrorCode.U_MISSING_OPERATOR;
pub const U_MISSING_SEGMENT_CLOSE = UErrorCode.U_MISSING_SEGMENT_CLOSE;
pub const U_MULTIPLE_ANTE_CONTEXTS = UErrorCode.U_MULTIPLE_ANTE_CONTEXTS;
pub const U_MULTIPLE_CURSORS = UErrorCode.U_MULTIPLE_CURSORS;
pub const U_MULTIPLE_POST_CONTEXTS = UErrorCode.U_MULTIPLE_POST_CONTEXTS;
pub const U_TRAILING_BACKSLASH = UErrorCode.U_TRAILING_BACKSLASH;
pub const U_UNDEFINED_SEGMENT_REFERENCE = UErrorCode.U_UNDEFINED_SEGMENT_REFERENCE;
pub const U_UNDEFINED_VARIABLE = UErrorCode.U_UNDEFINED_VARIABLE;
pub const U_UNQUOTED_SPECIAL = UErrorCode.U_UNQUOTED_SPECIAL;
pub const U_UNTERMINATED_QUOTE = UErrorCode.U_UNTERMINATED_QUOTE;
pub const U_RULE_MASK_ERROR = UErrorCode.U_RULE_MASK_ERROR;
pub const U_MISPLACED_COMPOUND_FILTER = UErrorCode.U_MISPLACED_COMPOUND_FILTER;
pub const U_MULTIPLE_COMPOUND_FILTERS = UErrorCode.U_MULTIPLE_COMPOUND_FILTERS;
pub const U_INVALID_RBT_SYNTAX = UErrorCode.U_INVALID_RBT_SYNTAX;
pub const U_INVALID_PROPERTY_PATTERN = UErrorCode.U_INVALID_PROPERTY_PATTERN;
pub const U_MALFORMED_PRAGMA = UErrorCode.U_MALFORMED_PRAGMA;
pub const U_UNCLOSED_SEGMENT = UErrorCode.U_UNCLOSED_SEGMENT;
pub const U_ILLEGAL_CHAR_IN_SEGMENT = UErrorCode.U_ILLEGAL_CHAR_IN_SEGMENT;
pub const U_VARIABLE_RANGE_EXHAUSTED = UErrorCode.U_VARIABLE_RANGE_EXHAUSTED;
pub const U_VARIABLE_RANGE_OVERLAP = UErrorCode.U_VARIABLE_RANGE_OVERLAP;
pub const U_ILLEGAL_CHARACTER = UErrorCode.U_ILLEGAL_CHARACTER;
pub const U_INTERNAL_TRANSLITERATOR_ERROR = UErrorCode.U_INTERNAL_TRANSLITERATOR_ERROR;
pub const U_INVALID_ID = UErrorCode.U_INVALID_ID;
pub const U_INVALID_FUNCTION = UErrorCode.U_INVALID_FUNCTION;
pub const U_UNEXPECTED_TOKEN = UErrorCode.U_UNEXPECTED_TOKEN;
pub const U_FMT_PARSE_ERROR_START = UErrorCode.U_FMT_PARSE_ERROR_START;
pub const U_MULTIPLE_DECIMAL_SEPARATORS = UErrorCode.U_MULTIPLE_DECIMAL_SEPARATORS;
pub const U_MULTIPLE_DECIMAL_SEPERATORS = UErrorCode.U_MULTIPLE_DECIMAL_SEPERATORS;
pub const U_MULTIPLE_EXPONENTIAL_SYMBOLS = UErrorCode.U_MULTIPLE_EXPONENTIAL_SYMBOLS;
pub const U_MALFORMED_EXPONENTIAL_PATTERN = UErrorCode.U_MALFORMED_EXPONENTIAL_PATTERN;
pub const U_MULTIPLE_PERCENT_SYMBOLS = UErrorCode.U_MULTIPLE_PERCENT_SYMBOLS;
pub const U_MULTIPLE_PERMILL_SYMBOLS = UErrorCode.U_MULTIPLE_PERMILL_SYMBOLS;
pub const U_MULTIPLE_PAD_SPECIFIERS = UErrorCode.U_MULTIPLE_PAD_SPECIFIERS;
pub const U_PATTERN_SYNTAX_ERROR = UErrorCode.U_PATTERN_SYNTAX_ERROR;
pub const U_ILLEGAL_PAD_POSITION = UErrorCode.U_ILLEGAL_PAD_POSITION;
pub const U_UNMATCHED_BRACES = UErrorCode.U_UNMATCHED_BRACES;
pub const U_UNSUPPORTED_PROPERTY = UErrorCode.U_UNSUPPORTED_PROPERTY;
pub const U_UNSUPPORTED_ATTRIBUTE = UErrorCode.U_UNSUPPORTED_ATTRIBUTE;
pub const U_ARGUMENT_TYPE_MISMATCH = UErrorCode.U_ARGUMENT_TYPE_MISMATCH;
pub const U_DUPLICATE_KEYWORD = UErrorCode.U_DUPLICATE_KEYWORD;
pub const U_UNDEFINED_KEYWORD = UErrorCode.U_UNDEFINED_KEYWORD;
pub const U_DEFAULT_KEYWORD_MISSING = UErrorCode.U_DEFAULT_KEYWORD_MISSING;
pub const U_DECIMAL_NUMBER_SYNTAX_ERROR = UErrorCode.U_DECIMAL_NUMBER_SYNTAX_ERROR;
pub const U_FORMAT_INEXACT_ERROR = UErrorCode.U_FORMAT_INEXACT_ERROR;
pub const U_NUMBER_ARG_OUTOFBOUNDS_ERROR = UErrorCode.U_NUMBER_ARG_OUTOFBOUNDS_ERROR;
pub const U_NUMBER_SKELETON_SYNTAX_ERROR = UErrorCode.U_NUMBER_SKELETON_SYNTAX_ERROR;
pub const U_BRK_INTERNAL_ERROR = UErrorCode.U_BRK_INTERNAL_ERROR;
pub const U_BRK_ERROR_START = UErrorCode.U_BRK_ERROR_START;
pub const U_BRK_HEX_DIGITS_EXPECTED = UErrorCode.U_BRK_HEX_DIGITS_EXPECTED;
pub const U_BRK_SEMICOLON_EXPECTED = UErrorCode.U_BRK_SEMICOLON_EXPECTED;
pub const U_BRK_RULE_SYNTAX = UErrorCode.U_BRK_RULE_SYNTAX;
pub const U_BRK_UNCLOSED_SET = UErrorCode.U_BRK_UNCLOSED_SET;
pub const U_BRK_ASSIGN_ERROR = UErrorCode.U_BRK_ASSIGN_ERROR;
pub const U_BRK_VARIABLE_REDFINITION = UErrorCode.U_BRK_VARIABLE_REDFINITION;
pub const U_BRK_MISMATCHED_PAREN = UErrorCode.U_BRK_MISMATCHED_PAREN;
pub const U_BRK_NEW_LINE_IN_QUOTED_STRING = UErrorCode.U_BRK_NEW_LINE_IN_QUOTED_STRING;
pub const U_BRK_UNDEFINED_VARIABLE = UErrorCode.U_BRK_UNDEFINED_VARIABLE;
pub const U_BRK_INIT_ERROR = UErrorCode.U_BRK_INIT_ERROR;
pub const U_BRK_RULE_EMPTY_SET = UErrorCode.U_BRK_RULE_EMPTY_SET;
pub const U_BRK_UNRECOGNIZED_OPTION = UErrorCode.U_BRK_UNRECOGNIZED_OPTION;
pub const U_BRK_MALFORMED_RULE_TAG = UErrorCode.U_BRK_MALFORMED_RULE_TAG;
pub const U_REGEX_INTERNAL_ERROR = UErrorCode.U_REGEX_INTERNAL_ERROR;
pub const U_REGEX_ERROR_START = UErrorCode.U_REGEX_ERROR_START;
pub const U_REGEX_RULE_SYNTAX = UErrorCode.U_REGEX_RULE_SYNTAX;
pub const U_REGEX_INVALID_STATE = UErrorCode.U_REGEX_INVALID_STATE;
pub const U_REGEX_BAD_ESCAPE_SEQUENCE = UErrorCode.U_REGEX_BAD_ESCAPE_SEQUENCE;
pub const U_REGEX_PROPERTY_SYNTAX = UErrorCode.U_REGEX_PROPERTY_SYNTAX;
pub const U_REGEX_UNIMPLEMENTED = UErrorCode.U_REGEX_UNIMPLEMENTED;
pub const U_REGEX_MISMATCHED_PAREN = UErrorCode.U_REGEX_MISMATCHED_PAREN;
pub const U_REGEX_NUMBER_TOO_BIG = UErrorCode.U_REGEX_NUMBER_TOO_BIG;
pub const U_REGEX_BAD_INTERVAL = UErrorCode.U_REGEX_BAD_INTERVAL;
pub const U_REGEX_MAX_LT_MIN = UErrorCode.U_REGEX_MAX_LT_MIN;
pub const U_REGEX_INVALID_BACK_REF = UErrorCode.U_REGEX_INVALID_BACK_REF;
pub const U_REGEX_INVALID_FLAG = UErrorCode.U_REGEX_INVALID_FLAG;
pub const U_REGEX_LOOK_BEHIND_LIMIT = UErrorCode.U_REGEX_LOOK_BEHIND_LIMIT;
pub const U_REGEX_SET_CONTAINS_STRING = UErrorCode.U_REGEX_SET_CONTAINS_STRING;
pub const U_REGEX_MISSING_CLOSE_BRACKET = UErrorCode.U_REGEX_MISSING_CLOSE_BRACKET;
pub const U_REGEX_INVALID_RANGE = UErrorCode.U_REGEX_INVALID_RANGE;
pub const U_REGEX_STACK_OVERFLOW = UErrorCode.U_REGEX_STACK_OVERFLOW;
pub const U_REGEX_TIME_OUT = UErrorCode.U_REGEX_TIME_OUT;
pub const U_REGEX_STOPPED_BY_CALLER = UErrorCode.U_REGEX_STOPPED_BY_CALLER;
pub const U_REGEX_PATTERN_TOO_BIG = UErrorCode.U_REGEX_PATTERN_TOO_BIG;
pub const U_REGEX_INVALID_CAPTURE_GROUP_NAME = UErrorCode.U_REGEX_INVALID_CAPTURE_GROUP_NAME;
pub const U_IDNA_PROHIBITED_ERROR = UErrorCode.U_IDNA_PROHIBITED_ERROR;
pub const U_IDNA_ERROR_START = UErrorCode.U_IDNA_ERROR_START;
pub const U_IDNA_UNASSIGNED_ERROR = UErrorCode.U_IDNA_UNASSIGNED_ERROR;
pub const U_IDNA_CHECK_BIDI_ERROR = UErrorCode.U_IDNA_CHECK_BIDI_ERROR;
pub const U_IDNA_STD3_ASCII_RULES_ERROR = UErrorCode.U_IDNA_STD3_ASCII_RULES_ERROR;
pub const U_IDNA_ACE_PREFIX_ERROR = UErrorCode.U_IDNA_ACE_PREFIX_ERROR;
pub const U_IDNA_VERIFICATION_ERROR = UErrorCode.U_IDNA_VERIFICATION_ERROR;
pub const U_IDNA_LABEL_TOO_LONG_ERROR = UErrorCode.U_IDNA_LABEL_TOO_LONG_ERROR;
pub const U_IDNA_ZERO_LENGTH_LABEL_ERROR = UErrorCode.U_IDNA_ZERO_LENGTH_LABEL_ERROR;
pub const U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR = UErrorCode.U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR;
pub const U_STRINGPREP_PROHIBITED_ERROR = UErrorCode.U_STRINGPREP_PROHIBITED_ERROR;
pub const U_STRINGPREP_UNASSIGNED_ERROR = UErrorCode.U_STRINGPREP_UNASSIGNED_ERROR;
pub const U_STRINGPREP_CHECK_BIDI_ERROR = UErrorCode.U_STRINGPREP_CHECK_BIDI_ERROR;
pub const U_PLUGIN_ERROR_START = UErrorCode.U_PLUGIN_ERROR_START;
pub const U_PLUGIN_TOO_HIGH = UErrorCode.U_PLUGIN_TOO_HIGH;
pub const U_PLUGIN_DIDNT_SET_LEVEL = UErrorCode.U_PLUGIN_DIDNT_SET_LEVEL;

pub const UTraceLevel = extern enum(i32) {
    UTRACE_OFF = -1,
    UTRACE_ERROR = 0,
    UTRACE_WARNING = 3,
    UTRACE_OPEN_CLOSE = 5,
    UTRACE_INFO = 7,
    UTRACE_VERBOSE = 9,
};
pub const UTRACE_OFF = UTraceLevel.UTRACE_OFF;
pub const UTRACE_ERROR = UTraceLevel.UTRACE_ERROR;
pub const UTRACE_WARNING = UTraceLevel.UTRACE_WARNING;
pub const UTRACE_OPEN_CLOSE = UTraceLevel.UTRACE_OPEN_CLOSE;
pub const UTRACE_INFO = UTraceLevel.UTRACE_INFO;
pub const UTRACE_VERBOSE = UTraceLevel.UTRACE_VERBOSE;

pub const UTraceFunctionNumber = extern enum(i32) {
    UTRACE_FUNCTION_START = 0,
    UTRACE_U_INIT = 0,
    UTRACE_U_CLEANUP = 1,
    UTRACE_CONVERSION_START = 4096,
    UTRACE_UCNV_OPEN = 4096,
    UTRACE_UCNV_OPEN_PACKAGE = 4097,
    UTRACE_UCNV_OPEN_ALGORITHMIC = 4098,
    UTRACE_UCNV_CLONE = 4099,
    UTRACE_UCNV_CLOSE = 4100,
    UTRACE_UCNV_FLUSH_CACHE = 4101,
    UTRACE_UCNV_LOAD = 4102,
    UTRACE_UCNV_UNLOAD = 4103,
    UTRACE_COLLATION_START = 8192,
    UTRACE_UCOL_OPEN = 8192,
    UTRACE_UCOL_CLOSE = 8193,
    UTRACE_UCOL_STRCOLL = 8194,
    UTRACE_UCOL_GET_SORTKEY = 8195,
    UTRACE_UCOL_GETLOCALE = 8196,
    UTRACE_UCOL_NEXTSORTKEYPART = 8197,
    UTRACE_UCOL_STRCOLLITER = 8198,
    UTRACE_UCOL_OPEN_FROM_SHORT_STRING = 8199,
    UTRACE_UCOL_STRCOLLUTF8 = 8200,
};
pub const UTRACE_FUNCTION_START = UTraceFunctionNumber.UTRACE_FUNCTION_START;
pub const UTRACE_U_INIT = UTraceFunctionNumber.UTRACE_U_INIT;
pub const UTRACE_U_CLEANUP = UTraceFunctionNumber.UTRACE_U_CLEANUP;
pub const UTRACE_CONVERSION_START = UTraceFunctionNumber.UTRACE_CONVERSION_START;
pub const UTRACE_UCNV_OPEN = UTraceFunctionNumber.UTRACE_UCNV_OPEN;
pub const UTRACE_UCNV_OPEN_PACKAGE = UTraceFunctionNumber.UTRACE_UCNV_OPEN_PACKAGE;
pub const UTRACE_UCNV_OPEN_ALGORITHMIC = UTraceFunctionNumber.UTRACE_UCNV_OPEN_ALGORITHMIC;
pub const UTRACE_UCNV_CLONE = UTraceFunctionNumber.UTRACE_UCNV_CLONE;
pub const UTRACE_UCNV_CLOSE = UTraceFunctionNumber.UTRACE_UCNV_CLOSE;
pub const UTRACE_UCNV_FLUSH_CACHE = UTraceFunctionNumber.UTRACE_UCNV_FLUSH_CACHE;
pub const UTRACE_UCNV_LOAD = UTraceFunctionNumber.UTRACE_UCNV_LOAD;
pub const UTRACE_UCNV_UNLOAD = UTraceFunctionNumber.UTRACE_UCNV_UNLOAD;
pub const UTRACE_COLLATION_START = UTraceFunctionNumber.UTRACE_COLLATION_START;
pub const UTRACE_UCOL_OPEN = UTraceFunctionNumber.UTRACE_UCOL_OPEN;
pub const UTRACE_UCOL_CLOSE = UTraceFunctionNumber.UTRACE_UCOL_CLOSE;
pub const UTRACE_UCOL_STRCOLL = UTraceFunctionNumber.UTRACE_UCOL_STRCOLL;
pub const UTRACE_UCOL_GET_SORTKEY = UTraceFunctionNumber.UTRACE_UCOL_GET_SORTKEY;
pub const UTRACE_UCOL_GETLOCALE = UTraceFunctionNumber.UTRACE_UCOL_GETLOCALE;
pub const UTRACE_UCOL_NEXTSORTKEYPART = UTraceFunctionNumber.UTRACE_UCOL_NEXTSORTKEYPART;
pub const UTRACE_UCOL_STRCOLLITER = UTraceFunctionNumber.UTRACE_UCOL_STRCOLLITER;
pub const UTRACE_UCOL_OPEN_FROM_SHORT_STRING = UTraceFunctionNumber.UTRACE_UCOL_OPEN_FROM_SHORT_STRING;
pub const UTRACE_UCOL_STRCOLLUTF8 = UTraceFunctionNumber.UTRACE_UCOL_STRCOLLUTF8;

pub const UTraceEntry = fn(
    context: *const c_void,
    fnNumber: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const UTraceExit = fn(
    context: *const c_void,
    fnNumber: i32,
    fmt: *const i8,
    args: *i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub const UTraceData = fn(
    context: *const c_void,
    fnNumber: i32,
    level: i32,
    fmt: *const i8,
    args: *i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub const UStringTrieResult = extern enum(i32) {
    USTRINGTRIE_NO_MATCH = 0,
    USTRINGTRIE_NO_VALUE = 1,
    USTRINGTRIE_FINAL_VALUE = 2,
    USTRINGTRIE_INTERMEDIATE_VALUE = 3,
};
pub const USTRINGTRIE_NO_MATCH = UStringTrieResult.USTRINGTRIE_NO_MATCH;
pub const USTRINGTRIE_NO_VALUE = UStringTrieResult.USTRINGTRIE_NO_VALUE;
pub const USTRINGTRIE_FINAL_VALUE = UStringTrieResult.USTRINGTRIE_FINAL_VALUE;
pub const USTRINGTRIE_INTERMEDIATE_VALUE = UStringTrieResult.USTRINGTRIE_INTERMEDIATE_VALUE;

pub const UScriptCode = extern enum(i32) {
    USCRIPT_INVALID_CODE = -1,
    USCRIPT_COMMON = 0,
    USCRIPT_INHERITED = 1,
    USCRIPT_ARABIC = 2,
    USCRIPT_ARMENIAN = 3,
    USCRIPT_BENGALI = 4,
    USCRIPT_BOPOMOFO = 5,
    USCRIPT_CHEROKEE = 6,
    USCRIPT_COPTIC = 7,
    USCRIPT_CYRILLIC = 8,
    USCRIPT_DESERET = 9,
    USCRIPT_DEVANAGARI = 10,
    USCRIPT_ETHIOPIC = 11,
    USCRIPT_GEORGIAN = 12,
    USCRIPT_GOTHIC = 13,
    USCRIPT_GREEK = 14,
    USCRIPT_GUJARATI = 15,
    USCRIPT_GURMUKHI = 16,
    USCRIPT_HAN = 17,
    USCRIPT_HANGUL = 18,
    USCRIPT_HEBREW = 19,
    USCRIPT_HIRAGANA = 20,
    USCRIPT_KANNADA = 21,
    USCRIPT_KATAKANA = 22,
    USCRIPT_KHMER = 23,
    USCRIPT_LAO = 24,
    USCRIPT_LATIN = 25,
    USCRIPT_MALAYALAM = 26,
    USCRIPT_MONGOLIAN = 27,
    USCRIPT_MYANMAR = 28,
    USCRIPT_OGHAM = 29,
    USCRIPT_OLD_ITALIC = 30,
    USCRIPT_ORIYA = 31,
    USCRIPT_RUNIC = 32,
    USCRIPT_SINHALA = 33,
    USCRIPT_SYRIAC = 34,
    USCRIPT_TAMIL = 35,
    USCRIPT_TELUGU = 36,
    USCRIPT_THAANA = 37,
    USCRIPT_THAI = 38,
    USCRIPT_TIBETAN = 39,
    USCRIPT_CANADIAN_ABORIGINAL = 40,
    USCRIPT_UCAS = 40,
    USCRIPT_YI = 41,
    USCRIPT_TAGALOG = 42,
    USCRIPT_HANUNOO = 43,
    USCRIPT_BUHID = 44,
    USCRIPT_TAGBANWA = 45,
    USCRIPT_BRAILLE = 46,
    USCRIPT_CYPRIOT = 47,
    USCRIPT_LIMBU = 48,
    USCRIPT_LINEAR_B = 49,
    USCRIPT_OSMANYA = 50,
    USCRIPT_SHAVIAN = 51,
    USCRIPT_TAI_LE = 52,
    USCRIPT_UGARITIC = 53,
    USCRIPT_KATAKANA_OR_HIRAGANA = 54,
    USCRIPT_BUGINESE = 55,
    USCRIPT_GLAGOLITIC = 56,
    USCRIPT_KHAROSHTHI = 57,
    USCRIPT_SYLOTI_NAGRI = 58,
    USCRIPT_NEW_TAI_LUE = 59,
    USCRIPT_TIFINAGH = 60,
    USCRIPT_OLD_PERSIAN = 61,
    USCRIPT_BALINESE = 62,
    USCRIPT_BATAK = 63,
    USCRIPT_BLISSYMBOLS = 64,
    USCRIPT_BRAHMI = 65,
    USCRIPT_CHAM = 66,
    USCRIPT_CIRTH = 67,
    USCRIPT_OLD_CHURCH_SLAVONIC_CYRILLIC = 68,
    USCRIPT_DEMOTIC_EGYPTIAN = 69,
    USCRIPT_HIERATIC_EGYPTIAN = 70,
    USCRIPT_EGYPTIAN_HIEROGLYPHS = 71,
    USCRIPT_KHUTSURI = 72,
    USCRIPT_SIMPLIFIED_HAN = 73,
    USCRIPT_TRADITIONAL_HAN = 74,
    USCRIPT_PAHAWH_HMONG = 75,
    USCRIPT_OLD_HUNGARIAN = 76,
    USCRIPT_HARAPPAN_INDUS = 77,
    USCRIPT_JAVANESE = 78,
    USCRIPT_KAYAH_LI = 79,
    USCRIPT_LATIN_FRAKTUR = 80,
    USCRIPT_LATIN_GAELIC = 81,
    USCRIPT_LEPCHA = 82,
    USCRIPT_LINEAR_A = 83,
    USCRIPT_MANDAIC = 84,
    USCRIPT_MANDAEAN = 84,
    USCRIPT_MAYAN_HIEROGLYPHS = 85,
    USCRIPT_MEROITIC_HIEROGLYPHS = 86,
    USCRIPT_MEROITIC = 86,
    USCRIPT_NKO = 87,
    USCRIPT_ORKHON = 88,
    USCRIPT_OLD_PERMIC = 89,
    USCRIPT_PHAGS_PA = 90,
    USCRIPT_PHOENICIAN = 91,
    USCRIPT_MIAO = 92,
    USCRIPT_PHONETIC_POLLARD = 92,
    USCRIPT_RONGORONGO = 93,
    USCRIPT_SARATI = 94,
    USCRIPT_ESTRANGELO_SYRIAC = 95,
    USCRIPT_WESTERN_SYRIAC = 96,
    USCRIPT_EASTERN_SYRIAC = 97,
    USCRIPT_TENGWAR = 98,
    USCRIPT_VAI = 99,
    USCRIPT_VISIBLE_SPEECH = 100,
    USCRIPT_CUNEIFORM = 101,
    USCRIPT_UNWRITTEN_LANGUAGES = 102,
    USCRIPT_UNKNOWN = 103,
    USCRIPT_CARIAN = 104,
    USCRIPT_JAPANESE = 105,
    USCRIPT_LANNA = 106,
    USCRIPT_LYCIAN = 107,
    USCRIPT_LYDIAN = 108,
    USCRIPT_OL_CHIKI = 109,
    USCRIPT_REJANG = 110,
    USCRIPT_SAURASHTRA = 111,
    USCRIPT_SIGN_WRITING = 112,
    USCRIPT_SUNDANESE = 113,
    USCRIPT_MOON = 114,
    USCRIPT_MEITEI_MAYEK = 115,
    USCRIPT_IMPERIAL_ARAMAIC = 116,
    USCRIPT_AVESTAN = 117,
    USCRIPT_CHAKMA = 118,
    USCRIPT_KOREAN = 119,
    USCRIPT_KAITHI = 120,
    USCRIPT_MANICHAEAN = 121,
    USCRIPT_INSCRIPTIONAL_PAHLAVI = 122,
    USCRIPT_PSALTER_PAHLAVI = 123,
    USCRIPT_BOOK_PAHLAVI = 124,
    USCRIPT_INSCRIPTIONAL_PARTHIAN = 125,
    USCRIPT_SAMARITAN = 126,
    USCRIPT_TAI_VIET = 127,
    USCRIPT_MATHEMATICAL_NOTATION = 128,
    USCRIPT_SYMBOLS = 129,
    USCRIPT_BAMUM = 130,
    USCRIPT_LISU = 131,
    USCRIPT_NAKHI_GEBA = 132,
    USCRIPT_OLD_SOUTH_ARABIAN = 133,
    USCRIPT_BASSA_VAH = 134,
    USCRIPT_DUPLOYAN = 135,
    USCRIPT_ELBASAN = 136,
    USCRIPT_GRANTHA = 137,
    USCRIPT_KPELLE = 138,
    USCRIPT_LOMA = 139,
    USCRIPT_MENDE = 140,
    USCRIPT_MEROITIC_CURSIVE = 141,
    USCRIPT_OLD_NORTH_ARABIAN = 142,
    USCRIPT_NABATAEAN = 143,
    USCRIPT_PALMYRENE = 144,
    USCRIPT_KHUDAWADI = 145,
    USCRIPT_SINDHI = 145,
    USCRIPT_WARANG_CITI = 146,
    USCRIPT_AFAKA = 147,
    USCRIPT_JURCHEN = 148,
    USCRIPT_MRO = 149,
    USCRIPT_NUSHU = 150,
    USCRIPT_SHARADA = 151,
    USCRIPT_SORA_SOMPENG = 152,
    USCRIPT_TAKRI = 153,
    USCRIPT_TANGUT = 154,
    USCRIPT_WOLEAI = 155,
    USCRIPT_ANATOLIAN_HIEROGLYPHS = 156,
    USCRIPT_KHOJKI = 157,
    USCRIPT_TIRHUTA = 158,
    USCRIPT_CAUCASIAN_ALBANIAN = 159,
    USCRIPT_MAHAJANI = 160,
    USCRIPT_AHOM = 161,
    USCRIPT_HATRAN = 162,
    USCRIPT_MODI = 163,
    USCRIPT_MULTANI = 164,
    USCRIPT_PAU_CIN_HAU = 165,
    USCRIPT_SIDDHAM = 166,
    USCRIPT_ADLAM = 167,
    USCRIPT_BHAIKSUKI = 168,
    USCRIPT_MARCHEN = 169,
    USCRIPT_NEWA = 170,
    USCRIPT_OSAGE = 171,
    USCRIPT_HAN_WITH_BOPOMOFO = 172,
    USCRIPT_JAMO = 173,
    USCRIPT_SYMBOLS_EMOJI = 174,
    USCRIPT_MASARAM_GONDI = 175,
    USCRIPT_SOYOMBO = 176,
    USCRIPT_ZANABAZAR_SQUARE = 177,
    USCRIPT_DOGRA = 178,
    USCRIPT_GUNJALA_GONDI = 179,
    USCRIPT_MAKASAR = 180,
    USCRIPT_MEDEFAIDRIN = 181,
    USCRIPT_HANIFI_ROHINGYA = 182,
    USCRIPT_SOGDIAN = 183,
    USCRIPT_OLD_SOGDIAN = 184,
    USCRIPT_ELYMAIC = 185,
    USCRIPT_NYIAKENG_PUACHUE_HMONG = 186,
    USCRIPT_NANDINAGARI = 187,
    USCRIPT_WANCHO = 188,
};
pub const USCRIPT_INVALID_CODE = UScriptCode.USCRIPT_INVALID_CODE;
pub const USCRIPT_COMMON = UScriptCode.USCRIPT_COMMON;
pub const USCRIPT_INHERITED = UScriptCode.USCRIPT_INHERITED;
pub const USCRIPT_ARABIC = UScriptCode.USCRIPT_ARABIC;
pub const USCRIPT_ARMENIAN = UScriptCode.USCRIPT_ARMENIAN;
pub const USCRIPT_BENGALI = UScriptCode.USCRIPT_BENGALI;
pub const USCRIPT_BOPOMOFO = UScriptCode.USCRIPT_BOPOMOFO;
pub const USCRIPT_CHEROKEE = UScriptCode.USCRIPT_CHEROKEE;
pub const USCRIPT_COPTIC = UScriptCode.USCRIPT_COPTIC;
pub const USCRIPT_CYRILLIC = UScriptCode.USCRIPT_CYRILLIC;
pub const USCRIPT_DESERET = UScriptCode.USCRIPT_DESERET;
pub const USCRIPT_DEVANAGARI = UScriptCode.USCRIPT_DEVANAGARI;
pub const USCRIPT_ETHIOPIC = UScriptCode.USCRIPT_ETHIOPIC;
pub const USCRIPT_GEORGIAN = UScriptCode.USCRIPT_GEORGIAN;
pub const USCRIPT_GOTHIC = UScriptCode.USCRIPT_GOTHIC;
pub const USCRIPT_GREEK = UScriptCode.USCRIPT_GREEK;
pub const USCRIPT_GUJARATI = UScriptCode.USCRIPT_GUJARATI;
pub const USCRIPT_GURMUKHI = UScriptCode.USCRIPT_GURMUKHI;
pub const USCRIPT_HAN = UScriptCode.USCRIPT_HAN;
pub const USCRIPT_HANGUL = UScriptCode.USCRIPT_HANGUL;
pub const USCRIPT_HEBREW = UScriptCode.USCRIPT_HEBREW;
pub const USCRIPT_HIRAGANA = UScriptCode.USCRIPT_HIRAGANA;
pub const USCRIPT_KANNADA = UScriptCode.USCRIPT_KANNADA;
pub const USCRIPT_KATAKANA = UScriptCode.USCRIPT_KATAKANA;
pub const USCRIPT_KHMER = UScriptCode.USCRIPT_KHMER;
pub const USCRIPT_LAO = UScriptCode.USCRIPT_LAO;
pub const USCRIPT_LATIN = UScriptCode.USCRIPT_LATIN;
pub const USCRIPT_MALAYALAM = UScriptCode.USCRIPT_MALAYALAM;
pub const USCRIPT_MONGOLIAN = UScriptCode.USCRIPT_MONGOLIAN;
pub const USCRIPT_MYANMAR = UScriptCode.USCRIPT_MYANMAR;
pub const USCRIPT_OGHAM = UScriptCode.USCRIPT_OGHAM;
pub const USCRIPT_OLD_ITALIC = UScriptCode.USCRIPT_OLD_ITALIC;
pub const USCRIPT_ORIYA = UScriptCode.USCRIPT_ORIYA;
pub const USCRIPT_RUNIC = UScriptCode.USCRIPT_RUNIC;
pub const USCRIPT_SINHALA = UScriptCode.USCRIPT_SINHALA;
pub const USCRIPT_SYRIAC = UScriptCode.USCRIPT_SYRIAC;
pub const USCRIPT_TAMIL = UScriptCode.USCRIPT_TAMIL;
pub const USCRIPT_TELUGU = UScriptCode.USCRIPT_TELUGU;
pub const USCRIPT_THAANA = UScriptCode.USCRIPT_THAANA;
pub const USCRIPT_THAI = UScriptCode.USCRIPT_THAI;
pub const USCRIPT_TIBETAN = UScriptCode.USCRIPT_TIBETAN;
pub const USCRIPT_CANADIAN_ABORIGINAL = UScriptCode.USCRIPT_CANADIAN_ABORIGINAL;
pub const USCRIPT_UCAS = UScriptCode.USCRIPT_UCAS;
pub const USCRIPT_YI = UScriptCode.USCRIPT_YI;
pub const USCRIPT_TAGALOG = UScriptCode.USCRIPT_TAGALOG;
pub const USCRIPT_HANUNOO = UScriptCode.USCRIPT_HANUNOO;
pub const USCRIPT_BUHID = UScriptCode.USCRIPT_BUHID;
pub const USCRIPT_TAGBANWA = UScriptCode.USCRIPT_TAGBANWA;
pub const USCRIPT_BRAILLE = UScriptCode.USCRIPT_BRAILLE;
pub const USCRIPT_CYPRIOT = UScriptCode.USCRIPT_CYPRIOT;
pub const USCRIPT_LIMBU = UScriptCode.USCRIPT_LIMBU;
pub const USCRIPT_LINEAR_B = UScriptCode.USCRIPT_LINEAR_B;
pub const USCRIPT_OSMANYA = UScriptCode.USCRIPT_OSMANYA;
pub const USCRIPT_SHAVIAN = UScriptCode.USCRIPT_SHAVIAN;
pub const USCRIPT_TAI_LE = UScriptCode.USCRIPT_TAI_LE;
pub const USCRIPT_UGARITIC = UScriptCode.USCRIPT_UGARITIC;
pub const USCRIPT_KATAKANA_OR_HIRAGANA = UScriptCode.USCRIPT_KATAKANA_OR_HIRAGANA;
pub const USCRIPT_BUGINESE = UScriptCode.USCRIPT_BUGINESE;
pub const USCRIPT_GLAGOLITIC = UScriptCode.USCRIPT_GLAGOLITIC;
pub const USCRIPT_KHAROSHTHI = UScriptCode.USCRIPT_KHAROSHTHI;
pub const USCRIPT_SYLOTI_NAGRI = UScriptCode.USCRIPT_SYLOTI_NAGRI;
pub const USCRIPT_NEW_TAI_LUE = UScriptCode.USCRIPT_NEW_TAI_LUE;
pub const USCRIPT_TIFINAGH = UScriptCode.USCRIPT_TIFINAGH;
pub const USCRIPT_OLD_PERSIAN = UScriptCode.USCRIPT_OLD_PERSIAN;
pub const USCRIPT_BALINESE = UScriptCode.USCRIPT_BALINESE;
pub const USCRIPT_BATAK = UScriptCode.USCRIPT_BATAK;
pub const USCRIPT_BLISSYMBOLS = UScriptCode.USCRIPT_BLISSYMBOLS;
pub const USCRIPT_BRAHMI = UScriptCode.USCRIPT_BRAHMI;
pub const USCRIPT_CHAM = UScriptCode.USCRIPT_CHAM;
pub const USCRIPT_CIRTH = UScriptCode.USCRIPT_CIRTH;
pub const USCRIPT_OLD_CHURCH_SLAVONIC_CYRILLIC = UScriptCode.USCRIPT_OLD_CHURCH_SLAVONIC_CYRILLIC;
pub const USCRIPT_DEMOTIC_EGYPTIAN = UScriptCode.USCRIPT_DEMOTIC_EGYPTIAN;
pub const USCRIPT_HIERATIC_EGYPTIAN = UScriptCode.USCRIPT_HIERATIC_EGYPTIAN;
pub const USCRIPT_EGYPTIAN_HIEROGLYPHS = UScriptCode.USCRIPT_EGYPTIAN_HIEROGLYPHS;
pub const USCRIPT_KHUTSURI = UScriptCode.USCRIPT_KHUTSURI;
pub const USCRIPT_SIMPLIFIED_HAN = UScriptCode.USCRIPT_SIMPLIFIED_HAN;
pub const USCRIPT_TRADITIONAL_HAN = UScriptCode.USCRIPT_TRADITIONAL_HAN;
pub const USCRIPT_PAHAWH_HMONG = UScriptCode.USCRIPT_PAHAWH_HMONG;
pub const USCRIPT_OLD_HUNGARIAN = UScriptCode.USCRIPT_OLD_HUNGARIAN;
pub const USCRIPT_HARAPPAN_INDUS = UScriptCode.USCRIPT_HARAPPAN_INDUS;
pub const USCRIPT_JAVANESE = UScriptCode.USCRIPT_JAVANESE;
pub const USCRIPT_KAYAH_LI = UScriptCode.USCRIPT_KAYAH_LI;
pub const USCRIPT_LATIN_FRAKTUR = UScriptCode.USCRIPT_LATIN_FRAKTUR;
pub const USCRIPT_LATIN_GAELIC = UScriptCode.USCRIPT_LATIN_GAELIC;
pub const USCRIPT_LEPCHA = UScriptCode.USCRIPT_LEPCHA;
pub const USCRIPT_LINEAR_A = UScriptCode.USCRIPT_LINEAR_A;
pub const USCRIPT_MANDAIC = UScriptCode.USCRIPT_MANDAIC;
pub const USCRIPT_MANDAEAN = UScriptCode.USCRIPT_MANDAEAN;
pub const USCRIPT_MAYAN_HIEROGLYPHS = UScriptCode.USCRIPT_MAYAN_HIEROGLYPHS;
pub const USCRIPT_MEROITIC_HIEROGLYPHS = UScriptCode.USCRIPT_MEROITIC_HIEROGLYPHS;
pub const USCRIPT_MEROITIC = UScriptCode.USCRIPT_MEROITIC;
pub const USCRIPT_NKO = UScriptCode.USCRIPT_NKO;
pub const USCRIPT_ORKHON = UScriptCode.USCRIPT_ORKHON;
pub const USCRIPT_OLD_PERMIC = UScriptCode.USCRIPT_OLD_PERMIC;
pub const USCRIPT_PHAGS_PA = UScriptCode.USCRIPT_PHAGS_PA;
pub const USCRIPT_PHOENICIAN = UScriptCode.USCRIPT_PHOENICIAN;
pub const USCRIPT_MIAO = UScriptCode.USCRIPT_MIAO;
pub const USCRIPT_PHONETIC_POLLARD = UScriptCode.USCRIPT_PHONETIC_POLLARD;
pub const USCRIPT_RONGORONGO = UScriptCode.USCRIPT_RONGORONGO;
pub const USCRIPT_SARATI = UScriptCode.USCRIPT_SARATI;
pub const USCRIPT_ESTRANGELO_SYRIAC = UScriptCode.USCRIPT_ESTRANGELO_SYRIAC;
pub const USCRIPT_WESTERN_SYRIAC = UScriptCode.USCRIPT_WESTERN_SYRIAC;
pub const USCRIPT_EASTERN_SYRIAC = UScriptCode.USCRIPT_EASTERN_SYRIAC;
pub const USCRIPT_TENGWAR = UScriptCode.USCRIPT_TENGWAR;
pub const USCRIPT_VAI = UScriptCode.USCRIPT_VAI;
pub const USCRIPT_VISIBLE_SPEECH = UScriptCode.USCRIPT_VISIBLE_SPEECH;
pub const USCRIPT_CUNEIFORM = UScriptCode.USCRIPT_CUNEIFORM;
pub const USCRIPT_UNWRITTEN_LANGUAGES = UScriptCode.USCRIPT_UNWRITTEN_LANGUAGES;
pub const USCRIPT_UNKNOWN = UScriptCode.USCRIPT_UNKNOWN;
pub const USCRIPT_CARIAN = UScriptCode.USCRIPT_CARIAN;
pub const USCRIPT_JAPANESE = UScriptCode.USCRIPT_JAPANESE;
pub const USCRIPT_LANNA = UScriptCode.USCRIPT_LANNA;
pub const USCRIPT_LYCIAN = UScriptCode.USCRIPT_LYCIAN;
pub const USCRIPT_LYDIAN = UScriptCode.USCRIPT_LYDIAN;
pub const USCRIPT_OL_CHIKI = UScriptCode.USCRIPT_OL_CHIKI;
pub const USCRIPT_REJANG = UScriptCode.USCRIPT_REJANG;
pub const USCRIPT_SAURASHTRA = UScriptCode.USCRIPT_SAURASHTRA;
pub const USCRIPT_SIGN_WRITING = UScriptCode.USCRIPT_SIGN_WRITING;
pub const USCRIPT_SUNDANESE = UScriptCode.USCRIPT_SUNDANESE;
pub const USCRIPT_MOON = UScriptCode.USCRIPT_MOON;
pub const USCRIPT_MEITEI_MAYEK = UScriptCode.USCRIPT_MEITEI_MAYEK;
pub const USCRIPT_IMPERIAL_ARAMAIC = UScriptCode.USCRIPT_IMPERIAL_ARAMAIC;
pub const USCRIPT_AVESTAN = UScriptCode.USCRIPT_AVESTAN;
pub const USCRIPT_CHAKMA = UScriptCode.USCRIPT_CHAKMA;
pub const USCRIPT_KOREAN = UScriptCode.USCRIPT_KOREAN;
pub const USCRIPT_KAITHI = UScriptCode.USCRIPT_KAITHI;
pub const USCRIPT_MANICHAEAN = UScriptCode.USCRIPT_MANICHAEAN;
pub const USCRIPT_INSCRIPTIONAL_PAHLAVI = UScriptCode.USCRIPT_INSCRIPTIONAL_PAHLAVI;
pub const USCRIPT_PSALTER_PAHLAVI = UScriptCode.USCRIPT_PSALTER_PAHLAVI;
pub const USCRIPT_BOOK_PAHLAVI = UScriptCode.USCRIPT_BOOK_PAHLAVI;
pub const USCRIPT_INSCRIPTIONAL_PARTHIAN = UScriptCode.USCRIPT_INSCRIPTIONAL_PARTHIAN;
pub const USCRIPT_SAMARITAN = UScriptCode.USCRIPT_SAMARITAN;
pub const USCRIPT_TAI_VIET = UScriptCode.USCRIPT_TAI_VIET;
pub const USCRIPT_MATHEMATICAL_NOTATION = UScriptCode.USCRIPT_MATHEMATICAL_NOTATION;
pub const USCRIPT_SYMBOLS = UScriptCode.USCRIPT_SYMBOLS;
pub const USCRIPT_BAMUM = UScriptCode.USCRIPT_BAMUM;
pub const USCRIPT_LISU = UScriptCode.USCRIPT_LISU;
pub const USCRIPT_NAKHI_GEBA = UScriptCode.USCRIPT_NAKHI_GEBA;
pub const USCRIPT_OLD_SOUTH_ARABIAN = UScriptCode.USCRIPT_OLD_SOUTH_ARABIAN;
pub const USCRIPT_BASSA_VAH = UScriptCode.USCRIPT_BASSA_VAH;
pub const USCRIPT_DUPLOYAN = UScriptCode.USCRIPT_DUPLOYAN;
pub const USCRIPT_ELBASAN = UScriptCode.USCRIPT_ELBASAN;
pub const USCRIPT_GRANTHA = UScriptCode.USCRIPT_GRANTHA;
pub const USCRIPT_KPELLE = UScriptCode.USCRIPT_KPELLE;
pub const USCRIPT_LOMA = UScriptCode.USCRIPT_LOMA;
pub const USCRIPT_MENDE = UScriptCode.USCRIPT_MENDE;
pub const USCRIPT_MEROITIC_CURSIVE = UScriptCode.USCRIPT_MEROITIC_CURSIVE;
pub const USCRIPT_OLD_NORTH_ARABIAN = UScriptCode.USCRIPT_OLD_NORTH_ARABIAN;
pub const USCRIPT_NABATAEAN = UScriptCode.USCRIPT_NABATAEAN;
pub const USCRIPT_PALMYRENE = UScriptCode.USCRIPT_PALMYRENE;
pub const USCRIPT_KHUDAWADI = UScriptCode.USCRIPT_KHUDAWADI;
pub const USCRIPT_SINDHI = UScriptCode.USCRIPT_SINDHI;
pub const USCRIPT_WARANG_CITI = UScriptCode.USCRIPT_WARANG_CITI;
pub const USCRIPT_AFAKA = UScriptCode.USCRIPT_AFAKA;
pub const USCRIPT_JURCHEN = UScriptCode.USCRIPT_JURCHEN;
pub const USCRIPT_MRO = UScriptCode.USCRIPT_MRO;
pub const USCRIPT_NUSHU = UScriptCode.USCRIPT_NUSHU;
pub const USCRIPT_SHARADA = UScriptCode.USCRIPT_SHARADA;
pub const USCRIPT_SORA_SOMPENG = UScriptCode.USCRIPT_SORA_SOMPENG;
pub const USCRIPT_TAKRI = UScriptCode.USCRIPT_TAKRI;
pub const USCRIPT_TANGUT = UScriptCode.USCRIPT_TANGUT;
pub const USCRIPT_WOLEAI = UScriptCode.USCRIPT_WOLEAI;
pub const USCRIPT_ANATOLIAN_HIEROGLYPHS = UScriptCode.USCRIPT_ANATOLIAN_HIEROGLYPHS;
pub const USCRIPT_KHOJKI = UScriptCode.USCRIPT_KHOJKI;
pub const USCRIPT_TIRHUTA = UScriptCode.USCRIPT_TIRHUTA;
pub const USCRIPT_CAUCASIAN_ALBANIAN = UScriptCode.USCRIPT_CAUCASIAN_ALBANIAN;
pub const USCRIPT_MAHAJANI = UScriptCode.USCRIPT_MAHAJANI;
pub const USCRIPT_AHOM = UScriptCode.USCRIPT_AHOM;
pub const USCRIPT_HATRAN = UScriptCode.USCRIPT_HATRAN;
pub const USCRIPT_MODI = UScriptCode.USCRIPT_MODI;
pub const USCRIPT_MULTANI = UScriptCode.USCRIPT_MULTANI;
pub const USCRIPT_PAU_CIN_HAU = UScriptCode.USCRIPT_PAU_CIN_HAU;
pub const USCRIPT_SIDDHAM = UScriptCode.USCRIPT_SIDDHAM;
pub const USCRIPT_ADLAM = UScriptCode.USCRIPT_ADLAM;
pub const USCRIPT_BHAIKSUKI = UScriptCode.USCRIPT_BHAIKSUKI;
pub const USCRIPT_MARCHEN = UScriptCode.USCRIPT_MARCHEN;
pub const USCRIPT_NEWA = UScriptCode.USCRIPT_NEWA;
pub const USCRIPT_OSAGE = UScriptCode.USCRIPT_OSAGE;
pub const USCRIPT_HAN_WITH_BOPOMOFO = UScriptCode.USCRIPT_HAN_WITH_BOPOMOFO;
pub const USCRIPT_JAMO = UScriptCode.USCRIPT_JAMO;
pub const USCRIPT_SYMBOLS_EMOJI = UScriptCode.USCRIPT_SYMBOLS_EMOJI;
pub const USCRIPT_MASARAM_GONDI = UScriptCode.USCRIPT_MASARAM_GONDI;
pub const USCRIPT_SOYOMBO = UScriptCode.USCRIPT_SOYOMBO;
pub const USCRIPT_ZANABAZAR_SQUARE = UScriptCode.USCRIPT_ZANABAZAR_SQUARE;
pub const USCRIPT_DOGRA = UScriptCode.USCRIPT_DOGRA;
pub const USCRIPT_GUNJALA_GONDI = UScriptCode.USCRIPT_GUNJALA_GONDI;
pub const USCRIPT_MAKASAR = UScriptCode.USCRIPT_MAKASAR;
pub const USCRIPT_MEDEFAIDRIN = UScriptCode.USCRIPT_MEDEFAIDRIN;
pub const USCRIPT_HANIFI_ROHINGYA = UScriptCode.USCRIPT_HANIFI_ROHINGYA;
pub const USCRIPT_SOGDIAN = UScriptCode.USCRIPT_SOGDIAN;
pub const USCRIPT_OLD_SOGDIAN = UScriptCode.USCRIPT_OLD_SOGDIAN;
pub const USCRIPT_ELYMAIC = UScriptCode.USCRIPT_ELYMAIC;
pub const USCRIPT_NYIAKENG_PUACHUE_HMONG = UScriptCode.USCRIPT_NYIAKENG_PUACHUE_HMONG;
pub const USCRIPT_NANDINAGARI = UScriptCode.USCRIPT_NANDINAGARI;
pub const USCRIPT_WANCHO = UScriptCode.USCRIPT_WANCHO;

pub const UScriptUsage = extern enum(i32) {
    USCRIPT_USAGE_NOT_ENCODED = 0,
    USCRIPT_USAGE_UNKNOWN = 1,
    USCRIPT_USAGE_EXCLUDED = 2,
    USCRIPT_USAGE_LIMITED_USE = 3,
    USCRIPT_USAGE_ASPIRATIONAL = 4,
    USCRIPT_USAGE_RECOMMENDED = 5,
};
pub const USCRIPT_USAGE_NOT_ENCODED = UScriptUsage.USCRIPT_USAGE_NOT_ENCODED;
pub const USCRIPT_USAGE_UNKNOWN = UScriptUsage.USCRIPT_USAGE_UNKNOWN;
pub const USCRIPT_USAGE_EXCLUDED = UScriptUsage.USCRIPT_USAGE_EXCLUDED;
pub const USCRIPT_USAGE_LIMITED_USE = UScriptUsage.USCRIPT_USAGE_LIMITED_USE;
pub const USCRIPT_USAGE_ASPIRATIONAL = UScriptUsage.USCRIPT_USAGE_ASPIRATIONAL;
pub const USCRIPT_USAGE_RECOMMENDED = UScriptUsage.USCRIPT_USAGE_RECOMMENDED;

pub const UReplaceableCallbacks = extern struct {
    length: ?*c_void,
    charAt: ?*c_void,
    char32At: ?*c_void,
    replace: ?*c_void,
    extract: ?*c_void,
    copy: ?*c_void,
};

pub const UFieldPosition = extern struct {
    field: i32,
    beginIndex: i32,
    endIndex: i32,
};

pub const UCharIteratorOrigin = extern enum(i32) {
    UITER_START = 0,
    UITER_CURRENT = 1,
    UITER_LIMIT = 2,
    UITER_ZERO = 3,
    UITER_LENGTH = 4,
};
pub const UITER_START = UCharIteratorOrigin.UITER_START;
pub const UITER_CURRENT = UCharIteratorOrigin.UITER_CURRENT;
pub const UITER_LIMIT = UCharIteratorOrigin.UITER_LIMIT;
pub const UITER_ZERO = UCharIteratorOrigin.UITER_ZERO;
pub const UITER_LENGTH = UCharIteratorOrigin.UITER_LENGTH;

pub const UCharIteratorGetIndex = fn(
    iter: *UCharIterator,
    origin: UCharIteratorOrigin,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const UCharIteratorMove = fn(
    iter: *UCharIterator,
    delta: i32,
    origin: UCharIteratorOrigin,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const UCharIteratorHasNext = fn(
    iter: *UCharIterator,
) callconv(@import("std").os.windows.WINAPI) i8;

pub const UCharIteratorHasPrevious = fn(
    iter: *UCharIterator,
) callconv(@import("std").os.windows.WINAPI) i8;

pub const UCharIteratorCurrent = fn(
    iter: *UCharIterator,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const UCharIteratorNext = fn(
    iter: *UCharIterator,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const UCharIteratorPrevious = fn(
    iter: *UCharIterator,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const UCharIteratorReserved = fn(
    iter: *UCharIterator,
    something: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const UCharIteratorGetState = fn(
    iter: *const UCharIterator,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const UCharIteratorSetState = fn(
    iter: *UCharIterator,
    state: u32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub const UCharIterator = extern struct {
    context: *const c_void,
    length: i32,
    start: i32,
    index: i32,
    limit: i32,
    reservedField: i32,
    getIndex: *UCharIteratorGetIndex,
    move: *UCharIteratorMove,
    hasNext: *UCharIteratorHasNext,
    hasPrevious: *UCharIteratorHasPrevious,
    current: *UCharIteratorCurrent,
    next: *UCharIteratorNext,
    previous: *UCharIteratorPrevious,
    reservedFn: *UCharIteratorReserved,
    getState: *UCharIteratorGetState,
    setState: *UCharIteratorSetState,
};

pub const UEnumeration = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const ULocDataLocaleType = extern enum(i32) {
    ULOC_ACTUAL_LOCALE = 0,
    ULOC_VALID_LOCALE = 1,
};
pub const ULOC_ACTUAL_LOCALE = ULocDataLocaleType.ULOC_ACTUAL_LOCALE;
pub const ULOC_VALID_LOCALE = ULocDataLocaleType.ULOC_VALID_LOCALE;

pub const ULayoutType = extern enum(i32) {
    ULOC_LAYOUT_LTR = 0,
    ULOC_LAYOUT_RTL = 1,
    ULOC_LAYOUT_TTB = 2,
    ULOC_LAYOUT_BTT = 3,
    ULOC_LAYOUT_UNKNOWN = 4,
};
pub const ULOC_LAYOUT_LTR = ULayoutType.ULOC_LAYOUT_LTR;
pub const ULOC_LAYOUT_RTL = ULayoutType.ULOC_LAYOUT_RTL;
pub const ULOC_LAYOUT_TTB = ULayoutType.ULOC_LAYOUT_TTB;
pub const ULOC_LAYOUT_BTT = ULayoutType.ULOC_LAYOUT_BTT;
pub const ULOC_LAYOUT_UNKNOWN = ULayoutType.ULOC_LAYOUT_UNKNOWN;

pub const UAcceptResult = extern enum(i32) {
    ULOC_ACCEPT_FAILED = 0,
    ULOC_ACCEPT_VALID = 1,
    ULOC_ACCEPT_FALLBACK = 2,
};
pub const ULOC_ACCEPT_FAILED = UAcceptResult.ULOC_ACCEPT_FAILED;
pub const ULOC_ACCEPT_VALID = UAcceptResult.ULOC_ACCEPT_VALID;
pub const ULOC_ACCEPT_FALLBACK = UAcceptResult.ULOC_ACCEPT_FALLBACK;

pub const UResourceBundle = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UResType = extern enum(i32) {
    URES_NONE = -1,
    URES_STRING = 0,
    URES_BINARY = 1,
    URES_TABLE = 2,
    URES_ALIAS = 3,
    URES_INT = 7,
    URES_ARRAY = 8,
    URES_INT_VECTOR = 14,
};
pub const URES_NONE = UResType.URES_NONE;
pub const URES_STRING = UResType.URES_STRING;
pub const URES_BINARY = UResType.URES_BINARY;
pub const URES_TABLE = UResType.URES_TABLE;
pub const URES_ALIAS = UResType.URES_ALIAS;
pub const URES_INT = UResType.URES_INT;
pub const URES_ARRAY = UResType.URES_ARRAY;
pub const URES_INT_VECTOR = UResType.URES_INT_VECTOR;

pub const UDisplayContextType = extern enum(i32) {
    UDISPCTX_TYPE_DIALECT_HANDLING = 0,
    UDISPCTX_TYPE_CAPITALIZATION = 1,
    UDISPCTX_TYPE_DISPLAY_LENGTH = 2,
    UDISPCTX_TYPE_SUBSTITUTE_HANDLING = 3,
};
pub const UDISPCTX_TYPE_DIALECT_HANDLING = UDisplayContextType.UDISPCTX_TYPE_DIALECT_HANDLING;
pub const UDISPCTX_TYPE_CAPITALIZATION = UDisplayContextType.UDISPCTX_TYPE_CAPITALIZATION;
pub const UDISPCTX_TYPE_DISPLAY_LENGTH = UDisplayContextType.UDISPCTX_TYPE_DISPLAY_LENGTH;
pub const UDISPCTX_TYPE_SUBSTITUTE_HANDLING = UDisplayContextType.UDISPCTX_TYPE_SUBSTITUTE_HANDLING;

pub const UDisplayContext = extern enum(i32) {
    UDISPCTX_STANDARD_NAMES = 0,
    UDISPCTX_DIALECT_NAMES = 1,
    UDISPCTX_CAPITALIZATION_NONE = 256,
    UDISPCTX_CAPITALIZATION_FOR_MIDDLE_OF_SENTENCE = 257,
    UDISPCTX_CAPITALIZATION_FOR_BEGINNING_OF_SENTENCE = 258,
    UDISPCTX_CAPITALIZATION_FOR_UI_LIST_OR_MENU = 259,
    UDISPCTX_CAPITALIZATION_FOR_STANDALONE = 260,
    UDISPCTX_LENGTH_FULL = 512,
    UDISPCTX_LENGTH_SHORT = 513,
    UDISPCTX_SUBSTITUTE = 768,
    UDISPCTX_NO_SUBSTITUTE = 769,
};
pub const UDISPCTX_STANDARD_NAMES = UDisplayContext.UDISPCTX_STANDARD_NAMES;
pub const UDISPCTX_DIALECT_NAMES = UDisplayContext.UDISPCTX_DIALECT_NAMES;
pub const UDISPCTX_CAPITALIZATION_NONE = UDisplayContext.UDISPCTX_CAPITALIZATION_NONE;
pub const UDISPCTX_CAPITALIZATION_FOR_MIDDLE_OF_SENTENCE = UDisplayContext.UDISPCTX_CAPITALIZATION_FOR_MIDDLE_OF_SENTENCE;
pub const UDISPCTX_CAPITALIZATION_FOR_BEGINNING_OF_SENTENCE = UDisplayContext.UDISPCTX_CAPITALIZATION_FOR_BEGINNING_OF_SENTENCE;
pub const UDISPCTX_CAPITALIZATION_FOR_UI_LIST_OR_MENU = UDisplayContext.UDISPCTX_CAPITALIZATION_FOR_UI_LIST_OR_MENU;
pub const UDISPCTX_CAPITALIZATION_FOR_STANDALONE = UDisplayContext.UDISPCTX_CAPITALIZATION_FOR_STANDALONE;
pub const UDISPCTX_LENGTH_FULL = UDisplayContext.UDISPCTX_LENGTH_FULL;
pub const UDISPCTX_LENGTH_SHORT = UDisplayContext.UDISPCTX_LENGTH_SHORT;
pub const UDISPCTX_SUBSTITUTE = UDisplayContext.UDISPCTX_SUBSTITUTE;
pub const UDISPCTX_NO_SUBSTITUTE = UDisplayContext.UDISPCTX_NO_SUBSTITUTE;

pub const UDialectHandling = extern enum(i32) {
    ULDN_STANDARD_NAMES = 0,
    ULDN_DIALECT_NAMES = 1,
};
pub const ULDN_STANDARD_NAMES = UDialectHandling.ULDN_STANDARD_NAMES;
pub const ULDN_DIALECT_NAMES = UDialectHandling.ULDN_DIALECT_NAMES;

pub const ULocaleDisplayNames = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UCurrencyUsage = extern enum(i32) {
    UCURR_USAGE_STANDARD = 0,
    UCURR_USAGE_CASH = 1,
};
pub const UCURR_USAGE_STANDARD = UCurrencyUsage.UCURR_USAGE_STANDARD;
pub const UCURR_USAGE_CASH = UCurrencyUsage.UCURR_USAGE_CASH;

pub const UCurrNameStyle = extern enum(i32) {
    UCURR_SYMBOL_NAME = 0,
    UCURR_LONG_NAME = 1,
    UCURR_NARROW_SYMBOL_NAME = 2,
};
pub const UCURR_SYMBOL_NAME = UCurrNameStyle.UCURR_SYMBOL_NAME;
pub const UCURR_LONG_NAME = UCurrNameStyle.UCURR_LONG_NAME;
pub const UCURR_NARROW_SYMBOL_NAME = UCurrNameStyle.UCURR_NARROW_SYMBOL_NAME;

pub const UCurrCurrencyType = extern enum(i32) {
    UCURR_ALL = 2147483647,
    UCURR_COMMON = 1,
    UCURR_UNCOMMON = 2,
    UCURR_DEPRECATED = 4,
    UCURR_NON_DEPRECATED = 8,
};
pub const UCURR_ALL = UCurrCurrencyType.UCURR_ALL;
pub const UCURR_COMMON = UCurrCurrencyType.UCURR_COMMON;
pub const UCURR_UNCOMMON = UCurrCurrencyType.UCURR_UNCOMMON;
pub const UCURR_DEPRECATED = UCurrCurrencyType.UCURR_DEPRECATED;
pub const UCURR_NON_DEPRECATED = UCurrCurrencyType.UCURR_NON_DEPRECATED;

pub const UConverter = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UConverterCallbackReason = extern enum(i32) {
    UCNV_UNASSIGNED = 0,
    UCNV_ILLEGAL = 1,
    UCNV_IRREGULAR = 2,
    UCNV_RESET = 3,
    UCNV_CLOSE = 4,
    UCNV_CLONE = 5,
};
pub const UCNV_UNASSIGNED = UConverterCallbackReason.UCNV_UNASSIGNED;
pub const UCNV_ILLEGAL = UConverterCallbackReason.UCNV_ILLEGAL;
pub const UCNV_IRREGULAR = UConverterCallbackReason.UCNV_IRREGULAR;
pub const UCNV_RESET = UConverterCallbackReason.UCNV_RESET;
pub const UCNV_CLOSE = UConverterCallbackReason.UCNV_CLOSE;
pub const UCNV_CLONE = UConverterCallbackReason.UCNV_CLONE;

pub const UConverterFromUnicodeArgs = extern struct {
    size: u16,
    flush: i8,
    converter: *UConverter,
    source: *const u16,
    sourceLimit: *const u16,
    target: *i8,
    targetLimit: *const i8,
    offsets: *i32,
};

pub const UConverterToUnicodeArgs = extern struct {
    size: u16,
    flush: i8,
    converter: *UConverter,
    source: *const i8,
    sourceLimit: *const i8,
    target: *u16,
    targetLimit: *const u16,
    offsets: *i32,
};

pub const USet = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UConverterType = extern enum(i32) {
    UCNV_UNSUPPORTED_CONVERTER = -1,
    UCNV_SBCS = 0,
    UCNV_DBCS = 1,
    UCNV_MBCS = 2,
    UCNV_LATIN_1 = 3,
    UCNV_UTF8 = 4,
    UCNV_UTF16_BigEndian = 5,
    UCNV_UTF16_LittleEndian = 6,
    UCNV_UTF32_BigEndian = 7,
    UCNV_UTF32_LittleEndian = 8,
    UCNV_EBCDIC_STATEFUL = 9,
    UCNV_ISO_2022 = 10,
    UCNV_LMBCS_1 = 11,
    UCNV_LMBCS_2 = 12,
    UCNV_LMBCS_3 = 13,
    UCNV_LMBCS_4 = 14,
    UCNV_LMBCS_5 = 15,
    UCNV_LMBCS_6 = 16,
    UCNV_LMBCS_8 = 17,
    UCNV_LMBCS_11 = 18,
    UCNV_LMBCS_16 = 19,
    UCNV_LMBCS_17 = 20,
    UCNV_LMBCS_18 = 21,
    UCNV_LMBCS_19 = 22,
    UCNV_LMBCS_LAST = 22,
    UCNV_HZ = 23,
    UCNV_SCSU = 24,
    UCNV_ISCII = 25,
    UCNV_US_ASCII = 26,
    UCNV_UTF7 = 27,
    UCNV_BOCU1 = 28,
    UCNV_UTF16 = 29,
    UCNV_UTF32 = 30,
    UCNV_CESU8 = 31,
    UCNV_IMAP_MAILBOX = 32,
    UCNV_COMPOUND_TEXT = 33,
    UCNV_NUMBER_OF_SUPPORTED_CONVERTER_TYPES = 34,
};
pub const UCNV_UNSUPPORTED_CONVERTER = UConverterType.UCNV_UNSUPPORTED_CONVERTER;
pub const UCNV_SBCS = UConverterType.UCNV_SBCS;
pub const UCNV_DBCS = UConverterType.UCNV_DBCS;
pub const UCNV_MBCS = UConverterType.UCNV_MBCS;
pub const UCNV_LATIN_1 = UConverterType.UCNV_LATIN_1;
pub const UCNV_UTF8 = UConverterType.UCNV_UTF8;
pub const UCNV_UTF16_BigEndian = UConverterType.UCNV_UTF16_BigEndian;
pub const UCNV_UTF16_LittleEndian = UConverterType.UCNV_UTF16_LittleEndian;
pub const UCNV_UTF32_BigEndian = UConverterType.UCNV_UTF32_BigEndian;
pub const UCNV_UTF32_LittleEndian = UConverterType.UCNV_UTF32_LittleEndian;
pub const UCNV_EBCDIC_STATEFUL = UConverterType.UCNV_EBCDIC_STATEFUL;
pub const UCNV_ISO_2022 = UConverterType.UCNV_ISO_2022;
pub const UCNV_LMBCS_1 = UConverterType.UCNV_LMBCS_1;
pub const UCNV_LMBCS_2 = UConverterType.UCNV_LMBCS_2;
pub const UCNV_LMBCS_3 = UConverterType.UCNV_LMBCS_3;
pub const UCNV_LMBCS_4 = UConverterType.UCNV_LMBCS_4;
pub const UCNV_LMBCS_5 = UConverterType.UCNV_LMBCS_5;
pub const UCNV_LMBCS_6 = UConverterType.UCNV_LMBCS_6;
pub const UCNV_LMBCS_8 = UConverterType.UCNV_LMBCS_8;
pub const UCNV_LMBCS_11 = UConverterType.UCNV_LMBCS_11;
pub const UCNV_LMBCS_16 = UConverterType.UCNV_LMBCS_16;
pub const UCNV_LMBCS_17 = UConverterType.UCNV_LMBCS_17;
pub const UCNV_LMBCS_18 = UConverterType.UCNV_LMBCS_18;
pub const UCNV_LMBCS_19 = UConverterType.UCNV_LMBCS_19;
pub const UCNV_LMBCS_LAST = UConverterType.UCNV_LMBCS_LAST;
pub const UCNV_HZ = UConverterType.UCNV_HZ;
pub const UCNV_SCSU = UConverterType.UCNV_SCSU;
pub const UCNV_ISCII = UConverterType.UCNV_ISCII;
pub const UCNV_US_ASCII = UConverterType.UCNV_US_ASCII;
pub const UCNV_UTF7 = UConverterType.UCNV_UTF7;
pub const UCNV_BOCU1 = UConverterType.UCNV_BOCU1;
pub const UCNV_UTF16 = UConverterType.UCNV_UTF16;
pub const UCNV_UTF32 = UConverterType.UCNV_UTF32;
pub const UCNV_CESU8 = UConverterType.UCNV_CESU8;
pub const UCNV_IMAP_MAILBOX = UConverterType.UCNV_IMAP_MAILBOX;
pub const UCNV_COMPOUND_TEXT = UConverterType.UCNV_COMPOUND_TEXT;
pub const UCNV_NUMBER_OF_SUPPORTED_CONVERTER_TYPES = UConverterType.UCNV_NUMBER_OF_SUPPORTED_CONVERTER_TYPES;

pub const UConverterPlatform = extern enum(i32) {
    UCNV_UNKNOWN = -1,
    UCNV_IBM = 0,
};
pub const UCNV_UNKNOWN = UConverterPlatform.UCNV_UNKNOWN;
pub const UCNV_IBM = UConverterPlatform.UCNV_IBM;

pub const UConverterToUCallback = fn(
    context: *const c_void,
    args: *UConverterToUnicodeArgs,
    codeUnits: *const i8,
    length: i32,
    reason: UConverterCallbackReason,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub const UConverterFromUCallback = fn(
    context: *const c_void,
    args: *UConverterFromUnicodeArgs,
    codeUnits: *const u16,
    length: i32,
    codePoint: i32,
    reason: UConverterCallbackReason,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub const UConverterUnicodeSet = extern enum(i32) {
    UCNV_ROUNDTRIP_SET = 0,
    UCNV_ROUNDTRIP_AND_FALLBACK_SET = 1,
};
pub const UCNV_ROUNDTRIP_SET = UConverterUnicodeSet.UCNV_ROUNDTRIP_SET;
pub const UCNV_ROUNDTRIP_AND_FALLBACK_SET = UConverterUnicodeSet.UCNV_ROUNDTRIP_AND_FALLBACK_SET;

pub const UMemAllocFn = fn(
    context: *const c_void,
    size: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const UMemReallocFn = fn(
    context: *const c_void,
    mem: *c_void,
    size: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const UMemFreeFn = fn(
    context: *const c_void,
    mem: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const UProperty = extern enum(i32) {
    UCHAR_ALPHABETIC = 0,
    UCHAR_BINARY_START = 0,
    UCHAR_ASCII_HEX_DIGIT = 1,
    UCHAR_BIDI_CONTROL = 2,
    UCHAR_BIDI_MIRRORED = 3,
    UCHAR_DASH = 4,
    UCHAR_DEFAULT_IGNORABLE_CODE_POINT = 5,
    UCHAR_DEPRECATED = 6,
    UCHAR_DIACRITIC = 7,
    UCHAR_EXTENDER = 8,
    UCHAR_FULL_COMPOSITION_EXCLUSION = 9,
    UCHAR_GRAPHEME_BASE = 10,
    UCHAR_GRAPHEME_EXTEND = 11,
    UCHAR_GRAPHEME_LINK = 12,
    UCHAR_HEX_DIGIT = 13,
    UCHAR_HYPHEN = 14,
    UCHAR_ID_CONTINUE = 15,
    UCHAR_ID_START = 16,
    UCHAR_IDEOGRAPHIC = 17,
    UCHAR_IDS_BINARY_OPERATOR = 18,
    UCHAR_IDS_TRINARY_OPERATOR = 19,
    UCHAR_JOIN_CONTROL = 20,
    UCHAR_LOGICAL_ORDER_EXCEPTION = 21,
    UCHAR_LOWERCASE = 22,
    UCHAR_MATH = 23,
    UCHAR_NONCHARACTER_CODE_POINT = 24,
    UCHAR_QUOTATION_MARK = 25,
    UCHAR_RADICAL = 26,
    UCHAR_SOFT_DOTTED = 27,
    UCHAR_TERMINAL_PUNCTUATION = 28,
    UCHAR_UNIFIED_IDEOGRAPH = 29,
    UCHAR_UPPERCASE = 30,
    UCHAR_WHITE_SPACE = 31,
    UCHAR_XID_CONTINUE = 32,
    UCHAR_XID_START = 33,
    UCHAR_CASE_SENSITIVE = 34,
    UCHAR_S_TERM = 35,
    UCHAR_VARIATION_SELECTOR = 36,
    UCHAR_NFD_INERT = 37,
    UCHAR_NFKD_INERT = 38,
    UCHAR_NFC_INERT = 39,
    UCHAR_NFKC_INERT = 40,
    UCHAR_SEGMENT_STARTER = 41,
    UCHAR_PATTERN_SYNTAX = 42,
    UCHAR_PATTERN_WHITE_SPACE = 43,
    UCHAR_POSIX_ALNUM = 44,
    UCHAR_POSIX_BLANK = 45,
    UCHAR_POSIX_GRAPH = 46,
    UCHAR_POSIX_PRINT = 47,
    UCHAR_POSIX_XDIGIT = 48,
    UCHAR_CASED = 49,
    UCHAR_CASE_IGNORABLE = 50,
    UCHAR_CHANGES_WHEN_LOWERCASED = 51,
    UCHAR_CHANGES_WHEN_UPPERCASED = 52,
    UCHAR_CHANGES_WHEN_TITLECASED = 53,
    UCHAR_CHANGES_WHEN_CASEFOLDED = 54,
    UCHAR_CHANGES_WHEN_CASEMAPPED = 55,
    UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED = 56,
    UCHAR_EMOJI = 57,
    UCHAR_EMOJI_PRESENTATION = 58,
    UCHAR_EMOJI_MODIFIER = 59,
    UCHAR_EMOJI_MODIFIER_BASE = 60,
    UCHAR_EMOJI_COMPONENT = 61,
    UCHAR_REGIONAL_INDICATOR = 62,
    UCHAR_PREPENDED_CONCATENATION_MARK = 63,
    UCHAR_EXTENDED_PICTOGRAPHIC = 64,
    UCHAR_BIDI_CLASS = 4096,
    UCHAR_INT_START = 4096,
    UCHAR_BLOCK = 4097,
    UCHAR_CANONICAL_COMBINING_CLASS = 4098,
    UCHAR_DECOMPOSITION_TYPE = 4099,
    UCHAR_EAST_ASIAN_WIDTH = 4100,
    UCHAR_GENERAL_CATEGORY = 4101,
    UCHAR_JOINING_GROUP = 4102,
    UCHAR_JOINING_TYPE = 4103,
    UCHAR_LINE_BREAK = 4104,
    UCHAR_NUMERIC_TYPE = 4105,
    UCHAR_SCRIPT = 4106,
    UCHAR_HANGUL_SYLLABLE_TYPE = 4107,
    UCHAR_NFD_QUICK_CHECK = 4108,
    UCHAR_NFKD_QUICK_CHECK = 4109,
    UCHAR_NFC_QUICK_CHECK = 4110,
    UCHAR_NFKC_QUICK_CHECK = 4111,
    UCHAR_LEAD_CANONICAL_COMBINING_CLASS = 4112,
    UCHAR_TRAIL_CANONICAL_COMBINING_CLASS = 4113,
    UCHAR_GRAPHEME_CLUSTER_BREAK = 4114,
    UCHAR_SENTENCE_BREAK = 4115,
    UCHAR_WORD_BREAK = 4116,
    UCHAR_BIDI_PAIRED_BRACKET_TYPE = 4117,
    UCHAR_INDIC_POSITIONAL_CATEGORY = 4118,
    UCHAR_INDIC_SYLLABIC_CATEGORY = 4119,
    UCHAR_VERTICAL_ORIENTATION = 4120,
    UCHAR_GENERAL_CATEGORY_MASK = 8192,
    UCHAR_MASK_START = 8192,
    UCHAR_NUMERIC_VALUE = 12288,
    UCHAR_DOUBLE_START = 12288,
    UCHAR_AGE = 16384,
    UCHAR_STRING_START = 16384,
    UCHAR_BIDI_MIRRORING_GLYPH = 16385,
    UCHAR_CASE_FOLDING = 16386,
    UCHAR_LOWERCASE_MAPPING = 16388,
    UCHAR_NAME = 16389,
    UCHAR_SIMPLE_CASE_FOLDING = 16390,
    UCHAR_SIMPLE_LOWERCASE_MAPPING = 16391,
    UCHAR_SIMPLE_TITLECASE_MAPPING = 16392,
    UCHAR_SIMPLE_UPPERCASE_MAPPING = 16393,
    UCHAR_TITLECASE_MAPPING = 16394,
    UCHAR_UPPERCASE_MAPPING = 16396,
    UCHAR_BIDI_PAIRED_BRACKET = 16397,
    UCHAR_SCRIPT_EXTENSIONS = 28672,
    UCHAR_OTHER_PROPERTY_START = 28672,
    UCHAR_INVALID_CODE = -1,
};
pub const UCHAR_ALPHABETIC = UProperty.UCHAR_ALPHABETIC;
pub const UCHAR_BINARY_START = UProperty.UCHAR_BINARY_START;
pub const UCHAR_ASCII_HEX_DIGIT = UProperty.UCHAR_ASCII_HEX_DIGIT;
pub const UCHAR_BIDI_CONTROL = UProperty.UCHAR_BIDI_CONTROL;
pub const UCHAR_BIDI_MIRRORED = UProperty.UCHAR_BIDI_MIRRORED;
pub const UCHAR_DASH = UProperty.UCHAR_DASH;
pub const UCHAR_DEFAULT_IGNORABLE_CODE_POINT = UProperty.UCHAR_DEFAULT_IGNORABLE_CODE_POINT;
pub const UCHAR_DEPRECATED = UProperty.UCHAR_DEPRECATED;
pub const UCHAR_DIACRITIC = UProperty.UCHAR_DIACRITIC;
pub const UCHAR_EXTENDER = UProperty.UCHAR_EXTENDER;
pub const UCHAR_FULL_COMPOSITION_EXCLUSION = UProperty.UCHAR_FULL_COMPOSITION_EXCLUSION;
pub const UCHAR_GRAPHEME_BASE = UProperty.UCHAR_GRAPHEME_BASE;
pub const UCHAR_GRAPHEME_EXTEND = UProperty.UCHAR_GRAPHEME_EXTEND;
pub const UCHAR_GRAPHEME_LINK = UProperty.UCHAR_GRAPHEME_LINK;
pub const UCHAR_HEX_DIGIT = UProperty.UCHAR_HEX_DIGIT;
pub const UCHAR_HYPHEN = UProperty.UCHAR_HYPHEN;
pub const UCHAR_ID_CONTINUE = UProperty.UCHAR_ID_CONTINUE;
pub const UCHAR_ID_START = UProperty.UCHAR_ID_START;
pub const UCHAR_IDEOGRAPHIC = UProperty.UCHAR_IDEOGRAPHIC;
pub const UCHAR_IDS_BINARY_OPERATOR = UProperty.UCHAR_IDS_BINARY_OPERATOR;
pub const UCHAR_IDS_TRINARY_OPERATOR = UProperty.UCHAR_IDS_TRINARY_OPERATOR;
pub const UCHAR_JOIN_CONTROL = UProperty.UCHAR_JOIN_CONTROL;
pub const UCHAR_LOGICAL_ORDER_EXCEPTION = UProperty.UCHAR_LOGICAL_ORDER_EXCEPTION;
pub const UCHAR_LOWERCASE = UProperty.UCHAR_LOWERCASE;
pub const UCHAR_MATH = UProperty.UCHAR_MATH;
pub const UCHAR_NONCHARACTER_CODE_POINT = UProperty.UCHAR_NONCHARACTER_CODE_POINT;
pub const UCHAR_QUOTATION_MARK = UProperty.UCHAR_QUOTATION_MARK;
pub const UCHAR_RADICAL = UProperty.UCHAR_RADICAL;
pub const UCHAR_SOFT_DOTTED = UProperty.UCHAR_SOFT_DOTTED;
pub const UCHAR_TERMINAL_PUNCTUATION = UProperty.UCHAR_TERMINAL_PUNCTUATION;
pub const UCHAR_UNIFIED_IDEOGRAPH = UProperty.UCHAR_UNIFIED_IDEOGRAPH;
pub const UCHAR_UPPERCASE = UProperty.UCHAR_UPPERCASE;
pub const UCHAR_WHITE_SPACE = UProperty.UCHAR_WHITE_SPACE;
pub const UCHAR_XID_CONTINUE = UProperty.UCHAR_XID_CONTINUE;
pub const UCHAR_XID_START = UProperty.UCHAR_XID_START;
pub const UCHAR_CASE_SENSITIVE = UProperty.UCHAR_CASE_SENSITIVE;
pub const UCHAR_S_TERM = UProperty.UCHAR_S_TERM;
pub const UCHAR_VARIATION_SELECTOR = UProperty.UCHAR_VARIATION_SELECTOR;
pub const UCHAR_NFD_INERT = UProperty.UCHAR_NFD_INERT;
pub const UCHAR_NFKD_INERT = UProperty.UCHAR_NFKD_INERT;
pub const UCHAR_NFC_INERT = UProperty.UCHAR_NFC_INERT;
pub const UCHAR_NFKC_INERT = UProperty.UCHAR_NFKC_INERT;
pub const UCHAR_SEGMENT_STARTER = UProperty.UCHAR_SEGMENT_STARTER;
pub const UCHAR_PATTERN_SYNTAX = UProperty.UCHAR_PATTERN_SYNTAX;
pub const UCHAR_PATTERN_WHITE_SPACE = UProperty.UCHAR_PATTERN_WHITE_SPACE;
pub const UCHAR_POSIX_ALNUM = UProperty.UCHAR_POSIX_ALNUM;
pub const UCHAR_POSIX_BLANK = UProperty.UCHAR_POSIX_BLANK;
pub const UCHAR_POSIX_GRAPH = UProperty.UCHAR_POSIX_GRAPH;
pub const UCHAR_POSIX_PRINT = UProperty.UCHAR_POSIX_PRINT;
pub const UCHAR_POSIX_XDIGIT = UProperty.UCHAR_POSIX_XDIGIT;
pub const UCHAR_CASED = UProperty.UCHAR_CASED;
pub const UCHAR_CASE_IGNORABLE = UProperty.UCHAR_CASE_IGNORABLE;
pub const UCHAR_CHANGES_WHEN_LOWERCASED = UProperty.UCHAR_CHANGES_WHEN_LOWERCASED;
pub const UCHAR_CHANGES_WHEN_UPPERCASED = UProperty.UCHAR_CHANGES_WHEN_UPPERCASED;
pub const UCHAR_CHANGES_WHEN_TITLECASED = UProperty.UCHAR_CHANGES_WHEN_TITLECASED;
pub const UCHAR_CHANGES_WHEN_CASEFOLDED = UProperty.UCHAR_CHANGES_WHEN_CASEFOLDED;
pub const UCHAR_CHANGES_WHEN_CASEMAPPED = UProperty.UCHAR_CHANGES_WHEN_CASEMAPPED;
pub const UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED = UProperty.UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED;
pub const UCHAR_EMOJI = UProperty.UCHAR_EMOJI;
pub const UCHAR_EMOJI_PRESENTATION = UProperty.UCHAR_EMOJI_PRESENTATION;
pub const UCHAR_EMOJI_MODIFIER = UProperty.UCHAR_EMOJI_MODIFIER;
pub const UCHAR_EMOJI_MODIFIER_BASE = UProperty.UCHAR_EMOJI_MODIFIER_BASE;
pub const UCHAR_EMOJI_COMPONENT = UProperty.UCHAR_EMOJI_COMPONENT;
pub const UCHAR_REGIONAL_INDICATOR = UProperty.UCHAR_REGIONAL_INDICATOR;
pub const UCHAR_PREPENDED_CONCATENATION_MARK = UProperty.UCHAR_PREPENDED_CONCATENATION_MARK;
pub const UCHAR_EXTENDED_PICTOGRAPHIC = UProperty.UCHAR_EXTENDED_PICTOGRAPHIC;
pub const UCHAR_BIDI_CLASS = UProperty.UCHAR_BIDI_CLASS;
pub const UCHAR_INT_START = UProperty.UCHAR_INT_START;
pub const UCHAR_BLOCK = UProperty.UCHAR_BLOCK;
pub const UCHAR_CANONICAL_COMBINING_CLASS = UProperty.UCHAR_CANONICAL_COMBINING_CLASS;
pub const UCHAR_DECOMPOSITION_TYPE = UProperty.UCHAR_DECOMPOSITION_TYPE;
pub const UCHAR_EAST_ASIAN_WIDTH = UProperty.UCHAR_EAST_ASIAN_WIDTH;
pub const UCHAR_GENERAL_CATEGORY = UProperty.UCHAR_GENERAL_CATEGORY;
pub const UCHAR_JOINING_GROUP = UProperty.UCHAR_JOINING_GROUP;
pub const UCHAR_JOINING_TYPE = UProperty.UCHAR_JOINING_TYPE;
pub const UCHAR_LINE_BREAK = UProperty.UCHAR_LINE_BREAK;
pub const UCHAR_NUMERIC_TYPE = UProperty.UCHAR_NUMERIC_TYPE;
pub const UCHAR_SCRIPT = UProperty.UCHAR_SCRIPT;
pub const UCHAR_HANGUL_SYLLABLE_TYPE = UProperty.UCHAR_HANGUL_SYLLABLE_TYPE;
pub const UCHAR_NFD_QUICK_CHECK = UProperty.UCHAR_NFD_QUICK_CHECK;
pub const UCHAR_NFKD_QUICK_CHECK = UProperty.UCHAR_NFKD_QUICK_CHECK;
pub const UCHAR_NFC_QUICK_CHECK = UProperty.UCHAR_NFC_QUICK_CHECK;
pub const UCHAR_NFKC_QUICK_CHECK = UProperty.UCHAR_NFKC_QUICK_CHECK;
pub const UCHAR_LEAD_CANONICAL_COMBINING_CLASS = UProperty.UCHAR_LEAD_CANONICAL_COMBINING_CLASS;
pub const UCHAR_TRAIL_CANONICAL_COMBINING_CLASS = UProperty.UCHAR_TRAIL_CANONICAL_COMBINING_CLASS;
pub const UCHAR_GRAPHEME_CLUSTER_BREAK = UProperty.UCHAR_GRAPHEME_CLUSTER_BREAK;
pub const UCHAR_SENTENCE_BREAK = UProperty.UCHAR_SENTENCE_BREAK;
pub const UCHAR_WORD_BREAK = UProperty.UCHAR_WORD_BREAK;
pub const UCHAR_BIDI_PAIRED_BRACKET_TYPE = UProperty.UCHAR_BIDI_PAIRED_BRACKET_TYPE;
pub const UCHAR_INDIC_POSITIONAL_CATEGORY = UProperty.UCHAR_INDIC_POSITIONAL_CATEGORY;
pub const UCHAR_INDIC_SYLLABIC_CATEGORY = UProperty.UCHAR_INDIC_SYLLABIC_CATEGORY;
pub const UCHAR_VERTICAL_ORIENTATION = UProperty.UCHAR_VERTICAL_ORIENTATION;
pub const UCHAR_GENERAL_CATEGORY_MASK = UProperty.UCHAR_GENERAL_CATEGORY_MASK;
pub const UCHAR_MASK_START = UProperty.UCHAR_MASK_START;
pub const UCHAR_NUMERIC_VALUE = UProperty.UCHAR_NUMERIC_VALUE;
pub const UCHAR_DOUBLE_START = UProperty.UCHAR_DOUBLE_START;
pub const UCHAR_AGE = UProperty.UCHAR_AGE;
pub const UCHAR_STRING_START = UProperty.UCHAR_STRING_START;
pub const UCHAR_BIDI_MIRRORING_GLYPH = UProperty.UCHAR_BIDI_MIRRORING_GLYPH;
pub const UCHAR_CASE_FOLDING = UProperty.UCHAR_CASE_FOLDING;
pub const UCHAR_LOWERCASE_MAPPING = UProperty.UCHAR_LOWERCASE_MAPPING;
pub const UCHAR_NAME = UProperty.UCHAR_NAME;
pub const UCHAR_SIMPLE_CASE_FOLDING = UProperty.UCHAR_SIMPLE_CASE_FOLDING;
pub const UCHAR_SIMPLE_LOWERCASE_MAPPING = UProperty.UCHAR_SIMPLE_LOWERCASE_MAPPING;
pub const UCHAR_SIMPLE_TITLECASE_MAPPING = UProperty.UCHAR_SIMPLE_TITLECASE_MAPPING;
pub const UCHAR_SIMPLE_UPPERCASE_MAPPING = UProperty.UCHAR_SIMPLE_UPPERCASE_MAPPING;
pub const UCHAR_TITLECASE_MAPPING = UProperty.UCHAR_TITLECASE_MAPPING;
pub const UCHAR_UPPERCASE_MAPPING = UProperty.UCHAR_UPPERCASE_MAPPING;
pub const UCHAR_BIDI_PAIRED_BRACKET = UProperty.UCHAR_BIDI_PAIRED_BRACKET;
pub const UCHAR_SCRIPT_EXTENSIONS = UProperty.UCHAR_SCRIPT_EXTENSIONS;
pub const UCHAR_OTHER_PROPERTY_START = UProperty.UCHAR_OTHER_PROPERTY_START;
pub const UCHAR_INVALID_CODE = UProperty.UCHAR_INVALID_CODE;

pub const UCharCategory = extern enum(i32) {
    U_UNASSIGNED = 0,
    U_GENERAL_OTHER_TYPES = 0,
    U_UPPERCASE_LETTER = 1,
    U_LOWERCASE_LETTER = 2,
    U_TITLECASE_LETTER = 3,
    U_MODIFIER_LETTER = 4,
    U_OTHER_LETTER = 5,
    U_NON_SPACING_MARK = 6,
    U_ENCLOSING_MARK = 7,
    U_COMBINING_SPACING_MARK = 8,
    U_DECIMAL_DIGIT_NUMBER = 9,
    U_LETTER_NUMBER = 10,
    U_OTHER_NUMBER = 11,
    U_SPACE_SEPARATOR = 12,
    U_LINE_SEPARATOR = 13,
    U_PARAGRAPH_SEPARATOR = 14,
    U_CONTROL_CHAR = 15,
    U_FORMAT_CHAR = 16,
    U_PRIVATE_USE_CHAR = 17,
    U_SURROGATE = 18,
    U_DASH_PUNCTUATION = 19,
    U_START_PUNCTUATION = 20,
    U_END_PUNCTUATION = 21,
    U_CONNECTOR_PUNCTUATION = 22,
    U_OTHER_PUNCTUATION = 23,
    U_MATH_SYMBOL = 24,
    U_CURRENCY_SYMBOL = 25,
    U_MODIFIER_SYMBOL = 26,
    U_OTHER_SYMBOL = 27,
    U_INITIAL_PUNCTUATION = 28,
    U_FINAL_PUNCTUATION = 29,
    U_CHAR_CATEGORY_COUNT = 30,
};
pub const U_UNASSIGNED = UCharCategory.U_UNASSIGNED;
pub const U_GENERAL_OTHER_TYPES = UCharCategory.U_GENERAL_OTHER_TYPES;
pub const U_UPPERCASE_LETTER = UCharCategory.U_UPPERCASE_LETTER;
pub const U_LOWERCASE_LETTER = UCharCategory.U_LOWERCASE_LETTER;
pub const U_TITLECASE_LETTER = UCharCategory.U_TITLECASE_LETTER;
pub const U_MODIFIER_LETTER = UCharCategory.U_MODIFIER_LETTER;
pub const U_OTHER_LETTER = UCharCategory.U_OTHER_LETTER;
pub const U_NON_SPACING_MARK = UCharCategory.U_NON_SPACING_MARK;
pub const U_ENCLOSING_MARK = UCharCategory.U_ENCLOSING_MARK;
pub const U_COMBINING_SPACING_MARK = UCharCategory.U_COMBINING_SPACING_MARK;
pub const U_DECIMAL_DIGIT_NUMBER = UCharCategory.U_DECIMAL_DIGIT_NUMBER;
pub const U_LETTER_NUMBER = UCharCategory.U_LETTER_NUMBER;
pub const U_OTHER_NUMBER = UCharCategory.U_OTHER_NUMBER;
pub const U_SPACE_SEPARATOR = UCharCategory.U_SPACE_SEPARATOR;
pub const U_LINE_SEPARATOR = UCharCategory.U_LINE_SEPARATOR;
pub const U_PARAGRAPH_SEPARATOR = UCharCategory.U_PARAGRAPH_SEPARATOR;
pub const U_CONTROL_CHAR = UCharCategory.U_CONTROL_CHAR;
pub const U_FORMAT_CHAR = UCharCategory.U_FORMAT_CHAR;
pub const U_PRIVATE_USE_CHAR = UCharCategory.U_PRIVATE_USE_CHAR;
pub const U_SURROGATE = UCharCategory.U_SURROGATE;
pub const U_DASH_PUNCTUATION = UCharCategory.U_DASH_PUNCTUATION;
pub const U_START_PUNCTUATION = UCharCategory.U_START_PUNCTUATION;
pub const U_END_PUNCTUATION = UCharCategory.U_END_PUNCTUATION;
pub const U_CONNECTOR_PUNCTUATION = UCharCategory.U_CONNECTOR_PUNCTUATION;
pub const U_OTHER_PUNCTUATION = UCharCategory.U_OTHER_PUNCTUATION;
pub const U_MATH_SYMBOL = UCharCategory.U_MATH_SYMBOL;
pub const U_CURRENCY_SYMBOL = UCharCategory.U_CURRENCY_SYMBOL;
pub const U_MODIFIER_SYMBOL = UCharCategory.U_MODIFIER_SYMBOL;
pub const U_OTHER_SYMBOL = UCharCategory.U_OTHER_SYMBOL;
pub const U_INITIAL_PUNCTUATION = UCharCategory.U_INITIAL_PUNCTUATION;
pub const U_FINAL_PUNCTUATION = UCharCategory.U_FINAL_PUNCTUATION;
pub const U_CHAR_CATEGORY_COUNT = UCharCategory.U_CHAR_CATEGORY_COUNT;

pub const UCharDirection = extern enum(i32) {
    U_LEFT_TO_RIGHT = 0,
    U_RIGHT_TO_LEFT = 1,
    U_EUROPEAN_NUMBER = 2,
    U_EUROPEAN_NUMBER_SEPARATOR = 3,
    U_EUROPEAN_NUMBER_TERMINATOR = 4,
    U_ARABIC_NUMBER = 5,
    U_COMMON_NUMBER_SEPARATOR = 6,
    U_BLOCK_SEPARATOR = 7,
    U_SEGMENT_SEPARATOR = 8,
    U_WHITE_SPACE_NEUTRAL = 9,
    U_OTHER_NEUTRAL = 10,
    U_LEFT_TO_RIGHT_EMBEDDING = 11,
    U_LEFT_TO_RIGHT_OVERRIDE = 12,
    U_RIGHT_TO_LEFT_ARABIC = 13,
    U_RIGHT_TO_LEFT_EMBEDDING = 14,
    U_RIGHT_TO_LEFT_OVERRIDE = 15,
    U_POP_DIRECTIONAL_FORMAT = 16,
    U_DIR_NON_SPACING_MARK = 17,
    U_BOUNDARY_NEUTRAL = 18,
    U_FIRST_STRONG_ISOLATE = 19,
    U_LEFT_TO_RIGHT_ISOLATE = 20,
    U_RIGHT_TO_LEFT_ISOLATE = 21,
    U_POP_DIRECTIONAL_ISOLATE = 22,
};
pub const U_LEFT_TO_RIGHT = UCharDirection.U_LEFT_TO_RIGHT;
pub const U_RIGHT_TO_LEFT = UCharDirection.U_RIGHT_TO_LEFT;
pub const U_EUROPEAN_NUMBER = UCharDirection.U_EUROPEAN_NUMBER;
pub const U_EUROPEAN_NUMBER_SEPARATOR = UCharDirection.U_EUROPEAN_NUMBER_SEPARATOR;
pub const U_EUROPEAN_NUMBER_TERMINATOR = UCharDirection.U_EUROPEAN_NUMBER_TERMINATOR;
pub const U_ARABIC_NUMBER = UCharDirection.U_ARABIC_NUMBER;
pub const U_COMMON_NUMBER_SEPARATOR = UCharDirection.U_COMMON_NUMBER_SEPARATOR;
pub const U_BLOCK_SEPARATOR = UCharDirection.U_BLOCK_SEPARATOR;
pub const U_SEGMENT_SEPARATOR = UCharDirection.U_SEGMENT_SEPARATOR;
pub const U_WHITE_SPACE_NEUTRAL = UCharDirection.U_WHITE_SPACE_NEUTRAL;
pub const U_OTHER_NEUTRAL = UCharDirection.U_OTHER_NEUTRAL;
pub const U_LEFT_TO_RIGHT_EMBEDDING = UCharDirection.U_LEFT_TO_RIGHT_EMBEDDING;
pub const U_LEFT_TO_RIGHT_OVERRIDE = UCharDirection.U_LEFT_TO_RIGHT_OVERRIDE;
pub const U_RIGHT_TO_LEFT_ARABIC = UCharDirection.U_RIGHT_TO_LEFT_ARABIC;
pub const U_RIGHT_TO_LEFT_EMBEDDING = UCharDirection.U_RIGHT_TO_LEFT_EMBEDDING;
pub const U_RIGHT_TO_LEFT_OVERRIDE = UCharDirection.U_RIGHT_TO_LEFT_OVERRIDE;
pub const U_POP_DIRECTIONAL_FORMAT = UCharDirection.U_POP_DIRECTIONAL_FORMAT;
pub const U_DIR_NON_SPACING_MARK = UCharDirection.U_DIR_NON_SPACING_MARK;
pub const U_BOUNDARY_NEUTRAL = UCharDirection.U_BOUNDARY_NEUTRAL;
pub const U_FIRST_STRONG_ISOLATE = UCharDirection.U_FIRST_STRONG_ISOLATE;
pub const U_LEFT_TO_RIGHT_ISOLATE = UCharDirection.U_LEFT_TO_RIGHT_ISOLATE;
pub const U_RIGHT_TO_LEFT_ISOLATE = UCharDirection.U_RIGHT_TO_LEFT_ISOLATE;
pub const U_POP_DIRECTIONAL_ISOLATE = UCharDirection.U_POP_DIRECTIONAL_ISOLATE;

pub const UBidiPairedBracketType = extern enum(i32) {
    U_BPT_NONE = 0,
    U_BPT_OPEN = 1,
    U_BPT_CLOSE = 2,
};
pub const U_BPT_NONE = UBidiPairedBracketType.U_BPT_NONE;
pub const U_BPT_OPEN = UBidiPairedBracketType.U_BPT_OPEN;
pub const U_BPT_CLOSE = UBidiPairedBracketType.U_BPT_CLOSE;

pub const UBlockCode = extern enum(i32) {
    UBLOCK_NO_BLOCK = 0,
    UBLOCK_BASIC_LATIN = 1,
    UBLOCK_LATIN_1_SUPPLEMENT = 2,
    UBLOCK_LATIN_EXTENDED_A = 3,
    UBLOCK_LATIN_EXTENDED_B = 4,
    UBLOCK_IPA_EXTENSIONS = 5,
    UBLOCK_SPACING_MODIFIER_LETTERS = 6,
    UBLOCK_COMBINING_DIACRITICAL_MARKS = 7,
    UBLOCK_GREEK = 8,
    UBLOCK_CYRILLIC = 9,
    UBLOCK_ARMENIAN = 10,
    UBLOCK_HEBREW = 11,
    UBLOCK_ARABIC = 12,
    UBLOCK_SYRIAC = 13,
    UBLOCK_THAANA = 14,
    UBLOCK_DEVANAGARI = 15,
    UBLOCK_BENGALI = 16,
    UBLOCK_GURMUKHI = 17,
    UBLOCK_GUJARATI = 18,
    UBLOCK_ORIYA = 19,
    UBLOCK_TAMIL = 20,
    UBLOCK_TELUGU = 21,
    UBLOCK_KANNADA = 22,
    UBLOCK_MALAYALAM = 23,
    UBLOCK_SINHALA = 24,
    UBLOCK_THAI = 25,
    UBLOCK_LAO = 26,
    UBLOCK_TIBETAN = 27,
    UBLOCK_MYANMAR = 28,
    UBLOCK_GEORGIAN = 29,
    UBLOCK_HANGUL_JAMO = 30,
    UBLOCK_ETHIOPIC = 31,
    UBLOCK_CHEROKEE = 32,
    UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS = 33,
    UBLOCK_OGHAM = 34,
    UBLOCK_RUNIC = 35,
    UBLOCK_KHMER = 36,
    UBLOCK_MONGOLIAN = 37,
    UBLOCK_LATIN_EXTENDED_ADDITIONAL = 38,
    UBLOCK_GREEK_EXTENDED = 39,
    UBLOCK_GENERAL_PUNCTUATION = 40,
    UBLOCK_SUPERSCRIPTS_AND_SUBSCRIPTS = 41,
    UBLOCK_CURRENCY_SYMBOLS = 42,
    UBLOCK_COMBINING_MARKS_FOR_SYMBOLS = 43,
    UBLOCK_LETTERLIKE_SYMBOLS = 44,
    UBLOCK_NUMBER_FORMS = 45,
    UBLOCK_ARROWS = 46,
    UBLOCK_MATHEMATICAL_OPERATORS = 47,
    UBLOCK_MISCELLANEOUS_TECHNICAL = 48,
    UBLOCK_CONTROL_PICTURES = 49,
    UBLOCK_OPTICAL_CHARACTER_RECOGNITION = 50,
    UBLOCK_ENCLOSED_ALPHANUMERICS = 51,
    UBLOCK_BOX_DRAWING = 52,
    UBLOCK_BLOCK_ELEMENTS = 53,
    UBLOCK_GEOMETRIC_SHAPES = 54,
    UBLOCK_MISCELLANEOUS_SYMBOLS = 55,
    UBLOCK_DINGBATS = 56,
    UBLOCK_BRAILLE_PATTERNS = 57,
    UBLOCK_CJK_RADICALS_SUPPLEMENT = 58,
    UBLOCK_KANGXI_RADICALS = 59,
    UBLOCK_IDEOGRAPHIC_DESCRIPTION_CHARACTERS = 60,
    UBLOCK_CJK_SYMBOLS_AND_PUNCTUATION = 61,
    UBLOCK_HIRAGANA = 62,
    UBLOCK_KATAKANA = 63,
    UBLOCK_BOPOMOFO = 64,
    UBLOCK_HANGUL_COMPATIBILITY_JAMO = 65,
    UBLOCK_KANBUN = 66,
    UBLOCK_BOPOMOFO_EXTENDED = 67,
    UBLOCK_ENCLOSED_CJK_LETTERS_AND_MONTHS = 68,
    UBLOCK_CJK_COMPATIBILITY = 69,
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A = 70,
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS = 71,
    UBLOCK_YI_SYLLABLES = 72,
    UBLOCK_YI_RADICALS = 73,
    UBLOCK_HANGUL_SYLLABLES = 74,
    UBLOCK_HIGH_SURROGATES = 75,
    UBLOCK_HIGH_PRIVATE_USE_SURROGATES = 76,
    UBLOCK_LOW_SURROGATES = 77,
    UBLOCK_PRIVATE_USE_AREA = 78,
    UBLOCK_PRIVATE_USE = 78,
    UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS = 79,
    UBLOCK_ALPHABETIC_PRESENTATION_FORMS = 80,
    UBLOCK_ARABIC_PRESENTATION_FORMS_A = 81,
    UBLOCK_COMBINING_HALF_MARKS = 82,
    UBLOCK_CJK_COMPATIBILITY_FORMS = 83,
    UBLOCK_SMALL_FORM_VARIANTS = 84,
    UBLOCK_ARABIC_PRESENTATION_FORMS_B = 85,
    UBLOCK_SPECIALS = 86,
    UBLOCK_HALFWIDTH_AND_FULLWIDTH_FORMS = 87,
    UBLOCK_OLD_ITALIC = 88,
    UBLOCK_GOTHIC = 89,
    UBLOCK_DESERET = 90,
    UBLOCK_BYZANTINE_MUSICAL_SYMBOLS = 91,
    UBLOCK_MUSICAL_SYMBOLS = 92,
    UBLOCK_MATHEMATICAL_ALPHANUMERIC_SYMBOLS = 93,
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B = 94,
    UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT = 95,
    UBLOCK_TAGS = 96,
    UBLOCK_CYRILLIC_SUPPLEMENT = 97,
    UBLOCK_CYRILLIC_SUPPLEMENTARY = 97,
    UBLOCK_TAGALOG = 98,
    UBLOCK_HANUNOO = 99,
    UBLOCK_BUHID = 100,
    UBLOCK_TAGBANWA = 101,
    UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A = 102,
    UBLOCK_SUPPLEMENTAL_ARROWS_A = 103,
    UBLOCK_SUPPLEMENTAL_ARROWS_B = 104,
    UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B = 105,
    UBLOCK_SUPPLEMENTAL_MATHEMATICAL_OPERATORS = 106,
    UBLOCK_KATAKANA_PHONETIC_EXTENSIONS = 107,
    UBLOCK_VARIATION_SELECTORS = 108,
    UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_A = 109,
    UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_B = 110,
    UBLOCK_LIMBU = 111,
    UBLOCK_TAI_LE = 112,
    UBLOCK_KHMER_SYMBOLS = 113,
    UBLOCK_PHONETIC_EXTENSIONS = 114,
    UBLOCK_MISCELLANEOUS_SYMBOLS_AND_ARROWS = 115,
    UBLOCK_YIJING_HEXAGRAM_SYMBOLS = 116,
    UBLOCK_LINEAR_B_SYLLABARY = 117,
    UBLOCK_LINEAR_B_IDEOGRAMS = 118,
    UBLOCK_AEGEAN_NUMBERS = 119,
    UBLOCK_UGARITIC = 120,
    UBLOCK_SHAVIAN = 121,
    UBLOCK_OSMANYA = 122,
    UBLOCK_CYPRIOT_SYLLABARY = 123,
    UBLOCK_TAI_XUAN_JING_SYMBOLS = 124,
    UBLOCK_VARIATION_SELECTORS_SUPPLEMENT = 125,
    UBLOCK_ANCIENT_GREEK_MUSICAL_NOTATION = 126,
    UBLOCK_ANCIENT_GREEK_NUMBERS = 127,
    UBLOCK_ARABIC_SUPPLEMENT = 128,
    UBLOCK_BUGINESE = 129,
    UBLOCK_CJK_STROKES = 130,
    UBLOCK_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT = 131,
    UBLOCK_COPTIC = 132,
    UBLOCK_ETHIOPIC_EXTENDED = 133,
    UBLOCK_ETHIOPIC_SUPPLEMENT = 134,
    UBLOCK_GEORGIAN_SUPPLEMENT = 135,
    UBLOCK_GLAGOLITIC = 136,
    UBLOCK_KHAROSHTHI = 137,
    UBLOCK_MODIFIER_TONE_LETTERS = 138,
    UBLOCK_NEW_TAI_LUE = 139,
    UBLOCK_OLD_PERSIAN = 140,
    UBLOCK_PHONETIC_EXTENSIONS_SUPPLEMENT = 141,
    UBLOCK_SUPPLEMENTAL_PUNCTUATION = 142,
    UBLOCK_SYLOTI_NAGRI = 143,
    UBLOCK_TIFINAGH = 144,
    UBLOCK_VERTICAL_FORMS = 145,
    UBLOCK_NKO = 146,
    UBLOCK_BALINESE = 147,
    UBLOCK_LATIN_EXTENDED_C = 148,
    UBLOCK_LATIN_EXTENDED_D = 149,
    UBLOCK_PHAGS_PA = 150,
    UBLOCK_PHOENICIAN = 151,
    UBLOCK_CUNEIFORM = 152,
    UBLOCK_CUNEIFORM_NUMBERS_AND_PUNCTUATION = 153,
    UBLOCK_COUNTING_ROD_NUMERALS = 154,
    UBLOCK_SUNDANESE = 155,
    UBLOCK_LEPCHA = 156,
    UBLOCK_OL_CHIKI = 157,
    UBLOCK_CYRILLIC_EXTENDED_A = 158,
    UBLOCK_VAI = 159,
    UBLOCK_CYRILLIC_EXTENDED_B = 160,
    UBLOCK_SAURASHTRA = 161,
    UBLOCK_KAYAH_LI = 162,
    UBLOCK_REJANG = 163,
    UBLOCK_CHAM = 164,
    UBLOCK_ANCIENT_SYMBOLS = 165,
    UBLOCK_PHAISTOS_DISC = 166,
    UBLOCK_LYCIAN = 167,
    UBLOCK_CARIAN = 168,
    UBLOCK_LYDIAN = 169,
    UBLOCK_MAHJONG_TILES = 170,
    UBLOCK_DOMINO_TILES = 171,
    UBLOCK_SAMARITAN = 172,
    UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED = 173,
    UBLOCK_TAI_THAM = 174,
    UBLOCK_VEDIC_EXTENSIONS = 175,
    UBLOCK_LISU = 176,
    UBLOCK_BAMUM = 177,
    UBLOCK_COMMON_INDIC_NUMBER_FORMS = 178,
    UBLOCK_DEVANAGARI_EXTENDED = 179,
    UBLOCK_HANGUL_JAMO_EXTENDED_A = 180,
    UBLOCK_JAVANESE = 181,
    UBLOCK_MYANMAR_EXTENDED_A = 182,
    UBLOCK_TAI_VIET = 183,
    UBLOCK_MEETEI_MAYEK = 184,
    UBLOCK_HANGUL_JAMO_EXTENDED_B = 185,
    UBLOCK_IMPERIAL_ARAMAIC = 186,
    UBLOCK_OLD_SOUTH_ARABIAN = 187,
    UBLOCK_AVESTAN = 188,
    UBLOCK_INSCRIPTIONAL_PARTHIAN = 189,
    UBLOCK_INSCRIPTIONAL_PAHLAVI = 190,
    UBLOCK_OLD_TURKIC = 191,
    UBLOCK_RUMI_NUMERAL_SYMBOLS = 192,
    UBLOCK_KAITHI = 193,
    UBLOCK_EGYPTIAN_HIEROGLYPHS = 194,
    UBLOCK_ENCLOSED_ALPHANUMERIC_SUPPLEMENT = 195,
    UBLOCK_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT = 196,
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C = 197,
    UBLOCK_MANDAIC = 198,
    UBLOCK_BATAK = 199,
    UBLOCK_ETHIOPIC_EXTENDED_A = 200,
    UBLOCK_BRAHMI = 201,
    UBLOCK_BAMUM_SUPPLEMENT = 202,
    UBLOCK_KANA_SUPPLEMENT = 203,
    UBLOCK_PLAYING_CARDS = 204,
    UBLOCK_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS = 205,
    UBLOCK_EMOTICONS = 206,
    UBLOCK_TRANSPORT_AND_MAP_SYMBOLS = 207,
    UBLOCK_ALCHEMICAL_SYMBOLS = 208,
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D = 209,
    UBLOCK_ARABIC_EXTENDED_A = 210,
    UBLOCK_ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS = 211,
    UBLOCK_CHAKMA = 212,
    UBLOCK_MEETEI_MAYEK_EXTENSIONS = 213,
    UBLOCK_MEROITIC_CURSIVE = 214,
    UBLOCK_MEROITIC_HIEROGLYPHS = 215,
    UBLOCK_MIAO = 216,
    UBLOCK_SHARADA = 217,
    UBLOCK_SORA_SOMPENG = 218,
    UBLOCK_SUNDANESE_SUPPLEMENT = 219,
    UBLOCK_TAKRI = 220,
    UBLOCK_BASSA_VAH = 221,
    UBLOCK_CAUCASIAN_ALBANIAN = 222,
    UBLOCK_COPTIC_EPACT_NUMBERS = 223,
    UBLOCK_COMBINING_DIACRITICAL_MARKS_EXTENDED = 224,
    UBLOCK_DUPLOYAN = 225,
    UBLOCK_ELBASAN = 226,
    UBLOCK_GEOMETRIC_SHAPES_EXTENDED = 227,
    UBLOCK_GRANTHA = 228,
    UBLOCK_KHOJKI = 229,
    UBLOCK_KHUDAWADI = 230,
    UBLOCK_LATIN_EXTENDED_E = 231,
    UBLOCK_LINEAR_A = 232,
    UBLOCK_MAHAJANI = 233,
    UBLOCK_MANICHAEAN = 234,
    UBLOCK_MENDE_KIKAKUI = 235,
    UBLOCK_MODI = 236,
    UBLOCK_MRO = 237,
    UBLOCK_MYANMAR_EXTENDED_B = 238,
    UBLOCK_NABATAEAN = 239,
    UBLOCK_OLD_NORTH_ARABIAN = 240,
    UBLOCK_OLD_PERMIC = 241,
    UBLOCK_ORNAMENTAL_DINGBATS = 242,
    UBLOCK_PAHAWH_HMONG = 243,
    UBLOCK_PALMYRENE = 244,
    UBLOCK_PAU_CIN_HAU = 245,
    UBLOCK_PSALTER_PAHLAVI = 246,
    UBLOCK_SHORTHAND_FORMAT_CONTROLS = 247,
    UBLOCK_SIDDHAM = 248,
    UBLOCK_SINHALA_ARCHAIC_NUMBERS = 249,
    UBLOCK_SUPPLEMENTAL_ARROWS_C = 250,
    UBLOCK_TIRHUTA = 251,
    UBLOCK_WARANG_CITI = 252,
    UBLOCK_AHOM = 253,
    UBLOCK_ANATOLIAN_HIEROGLYPHS = 254,
    UBLOCK_CHEROKEE_SUPPLEMENT = 255,
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E = 256,
    UBLOCK_EARLY_DYNASTIC_CUNEIFORM = 257,
    UBLOCK_HATRAN = 258,
    UBLOCK_MULTANI = 259,
    UBLOCK_OLD_HUNGARIAN = 260,
    UBLOCK_SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS = 261,
    UBLOCK_SUTTON_SIGNWRITING = 262,
    UBLOCK_ADLAM = 263,
    UBLOCK_BHAIKSUKI = 264,
    UBLOCK_CYRILLIC_EXTENDED_C = 265,
    UBLOCK_GLAGOLITIC_SUPPLEMENT = 266,
    UBLOCK_IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION = 267,
    UBLOCK_MARCHEN = 268,
    UBLOCK_MONGOLIAN_SUPPLEMENT = 269,
    UBLOCK_NEWA = 270,
    UBLOCK_OSAGE = 271,
    UBLOCK_TANGUT = 272,
    UBLOCK_TANGUT_COMPONENTS = 273,
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F = 274,
    UBLOCK_KANA_EXTENDED_A = 275,
    UBLOCK_MASARAM_GONDI = 276,
    UBLOCK_NUSHU = 277,
    UBLOCK_SOYOMBO = 278,
    UBLOCK_SYRIAC_SUPPLEMENT = 279,
    UBLOCK_ZANABAZAR_SQUARE = 280,
    UBLOCK_CHESS_SYMBOLS = 281,
    UBLOCK_DOGRA = 282,
    UBLOCK_GEORGIAN_EXTENDED = 283,
    UBLOCK_GUNJALA_GONDI = 284,
    UBLOCK_HANIFI_ROHINGYA = 285,
    UBLOCK_INDIC_SIYAQ_NUMBERS = 286,
    UBLOCK_MAKASAR = 287,
    UBLOCK_MAYAN_NUMERALS = 288,
    UBLOCK_MEDEFAIDRIN = 289,
    UBLOCK_OLD_SOGDIAN = 290,
    UBLOCK_SOGDIAN = 291,
    UBLOCK_EGYPTIAN_HIEROGLYPH_FORMAT_CONTROLS = 292,
    UBLOCK_ELYMAIC = 293,
    UBLOCK_NANDINAGARI = 294,
    UBLOCK_NYIAKENG_PUACHUE_HMONG = 295,
    UBLOCK_OTTOMAN_SIYAQ_NUMBERS = 296,
    UBLOCK_SMALL_KANA_EXTENSION = 297,
    UBLOCK_SYMBOLS_AND_PICTOGRAPHS_EXTENDED_A = 298,
    UBLOCK_TAMIL_SUPPLEMENT = 299,
    UBLOCK_WANCHO = 300,
    UBLOCK_INVALID_CODE = -1,
};
pub const UBLOCK_NO_BLOCK = UBlockCode.UBLOCK_NO_BLOCK;
pub const UBLOCK_BASIC_LATIN = UBlockCode.UBLOCK_BASIC_LATIN;
pub const UBLOCK_LATIN_1_SUPPLEMENT = UBlockCode.UBLOCK_LATIN_1_SUPPLEMENT;
pub const UBLOCK_LATIN_EXTENDED_A = UBlockCode.UBLOCK_LATIN_EXTENDED_A;
pub const UBLOCK_LATIN_EXTENDED_B = UBlockCode.UBLOCK_LATIN_EXTENDED_B;
pub const UBLOCK_IPA_EXTENSIONS = UBlockCode.UBLOCK_IPA_EXTENSIONS;
pub const UBLOCK_SPACING_MODIFIER_LETTERS = UBlockCode.UBLOCK_SPACING_MODIFIER_LETTERS;
pub const UBLOCK_COMBINING_DIACRITICAL_MARKS = UBlockCode.UBLOCK_COMBINING_DIACRITICAL_MARKS;
pub const UBLOCK_GREEK = UBlockCode.UBLOCK_GREEK;
pub const UBLOCK_CYRILLIC = UBlockCode.UBLOCK_CYRILLIC;
pub const UBLOCK_ARMENIAN = UBlockCode.UBLOCK_ARMENIAN;
pub const UBLOCK_HEBREW = UBlockCode.UBLOCK_HEBREW;
pub const UBLOCK_ARABIC = UBlockCode.UBLOCK_ARABIC;
pub const UBLOCK_SYRIAC = UBlockCode.UBLOCK_SYRIAC;
pub const UBLOCK_THAANA = UBlockCode.UBLOCK_THAANA;
pub const UBLOCK_DEVANAGARI = UBlockCode.UBLOCK_DEVANAGARI;
pub const UBLOCK_BENGALI = UBlockCode.UBLOCK_BENGALI;
pub const UBLOCK_GURMUKHI = UBlockCode.UBLOCK_GURMUKHI;
pub const UBLOCK_GUJARATI = UBlockCode.UBLOCK_GUJARATI;
pub const UBLOCK_ORIYA = UBlockCode.UBLOCK_ORIYA;
pub const UBLOCK_TAMIL = UBlockCode.UBLOCK_TAMIL;
pub const UBLOCK_TELUGU = UBlockCode.UBLOCK_TELUGU;
pub const UBLOCK_KANNADA = UBlockCode.UBLOCK_KANNADA;
pub const UBLOCK_MALAYALAM = UBlockCode.UBLOCK_MALAYALAM;
pub const UBLOCK_SINHALA = UBlockCode.UBLOCK_SINHALA;
pub const UBLOCK_THAI = UBlockCode.UBLOCK_THAI;
pub const UBLOCK_LAO = UBlockCode.UBLOCK_LAO;
pub const UBLOCK_TIBETAN = UBlockCode.UBLOCK_TIBETAN;
pub const UBLOCK_MYANMAR = UBlockCode.UBLOCK_MYANMAR;
pub const UBLOCK_GEORGIAN = UBlockCode.UBLOCK_GEORGIAN;
pub const UBLOCK_HANGUL_JAMO = UBlockCode.UBLOCK_HANGUL_JAMO;
pub const UBLOCK_ETHIOPIC = UBlockCode.UBLOCK_ETHIOPIC;
pub const UBLOCK_CHEROKEE = UBlockCode.UBLOCK_CHEROKEE;
pub const UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS = UBlockCode.UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS;
pub const UBLOCK_OGHAM = UBlockCode.UBLOCK_OGHAM;
pub const UBLOCK_RUNIC = UBlockCode.UBLOCK_RUNIC;
pub const UBLOCK_KHMER = UBlockCode.UBLOCK_KHMER;
pub const UBLOCK_MONGOLIAN = UBlockCode.UBLOCK_MONGOLIAN;
pub const UBLOCK_LATIN_EXTENDED_ADDITIONAL = UBlockCode.UBLOCK_LATIN_EXTENDED_ADDITIONAL;
pub const UBLOCK_GREEK_EXTENDED = UBlockCode.UBLOCK_GREEK_EXTENDED;
pub const UBLOCK_GENERAL_PUNCTUATION = UBlockCode.UBLOCK_GENERAL_PUNCTUATION;
pub const UBLOCK_SUPERSCRIPTS_AND_SUBSCRIPTS = UBlockCode.UBLOCK_SUPERSCRIPTS_AND_SUBSCRIPTS;
pub const UBLOCK_CURRENCY_SYMBOLS = UBlockCode.UBLOCK_CURRENCY_SYMBOLS;
pub const UBLOCK_COMBINING_MARKS_FOR_SYMBOLS = UBlockCode.UBLOCK_COMBINING_MARKS_FOR_SYMBOLS;
pub const UBLOCK_LETTERLIKE_SYMBOLS = UBlockCode.UBLOCK_LETTERLIKE_SYMBOLS;
pub const UBLOCK_NUMBER_FORMS = UBlockCode.UBLOCK_NUMBER_FORMS;
pub const UBLOCK_ARROWS = UBlockCode.UBLOCK_ARROWS;
pub const UBLOCK_MATHEMATICAL_OPERATORS = UBlockCode.UBLOCK_MATHEMATICAL_OPERATORS;
pub const UBLOCK_MISCELLANEOUS_TECHNICAL = UBlockCode.UBLOCK_MISCELLANEOUS_TECHNICAL;
pub const UBLOCK_CONTROL_PICTURES = UBlockCode.UBLOCK_CONTROL_PICTURES;
pub const UBLOCK_OPTICAL_CHARACTER_RECOGNITION = UBlockCode.UBLOCK_OPTICAL_CHARACTER_RECOGNITION;
pub const UBLOCK_ENCLOSED_ALPHANUMERICS = UBlockCode.UBLOCK_ENCLOSED_ALPHANUMERICS;
pub const UBLOCK_BOX_DRAWING = UBlockCode.UBLOCK_BOX_DRAWING;
pub const UBLOCK_BLOCK_ELEMENTS = UBlockCode.UBLOCK_BLOCK_ELEMENTS;
pub const UBLOCK_GEOMETRIC_SHAPES = UBlockCode.UBLOCK_GEOMETRIC_SHAPES;
pub const UBLOCK_MISCELLANEOUS_SYMBOLS = UBlockCode.UBLOCK_MISCELLANEOUS_SYMBOLS;
pub const UBLOCK_DINGBATS = UBlockCode.UBLOCK_DINGBATS;
pub const UBLOCK_BRAILLE_PATTERNS = UBlockCode.UBLOCK_BRAILLE_PATTERNS;
pub const UBLOCK_CJK_RADICALS_SUPPLEMENT = UBlockCode.UBLOCK_CJK_RADICALS_SUPPLEMENT;
pub const UBLOCK_KANGXI_RADICALS = UBlockCode.UBLOCK_KANGXI_RADICALS;
pub const UBLOCK_IDEOGRAPHIC_DESCRIPTION_CHARACTERS = UBlockCode.UBLOCK_IDEOGRAPHIC_DESCRIPTION_CHARACTERS;
pub const UBLOCK_CJK_SYMBOLS_AND_PUNCTUATION = UBlockCode.UBLOCK_CJK_SYMBOLS_AND_PUNCTUATION;
pub const UBLOCK_HIRAGANA = UBlockCode.UBLOCK_HIRAGANA;
pub const UBLOCK_KATAKANA = UBlockCode.UBLOCK_KATAKANA;
pub const UBLOCK_BOPOMOFO = UBlockCode.UBLOCK_BOPOMOFO;
pub const UBLOCK_HANGUL_COMPATIBILITY_JAMO = UBlockCode.UBLOCK_HANGUL_COMPATIBILITY_JAMO;
pub const UBLOCK_KANBUN = UBlockCode.UBLOCK_KANBUN;
pub const UBLOCK_BOPOMOFO_EXTENDED = UBlockCode.UBLOCK_BOPOMOFO_EXTENDED;
pub const UBLOCK_ENCLOSED_CJK_LETTERS_AND_MONTHS = UBlockCode.UBLOCK_ENCLOSED_CJK_LETTERS_AND_MONTHS;
pub const UBLOCK_CJK_COMPATIBILITY = UBlockCode.UBLOCK_CJK_COMPATIBILITY;
pub const UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A = UBlockCode.UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A;
pub const UBLOCK_CJK_UNIFIED_IDEOGRAPHS = UBlockCode.UBLOCK_CJK_UNIFIED_IDEOGRAPHS;
pub const UBLOCK_YI_SYLLABLES = UBlockCode.UBLOCK_YI_SYLLABLES;
pub const UBLOCK_YI_RADICALS = UBlockCode.UBLOCK_YI_RADICALS;
pub const UBLOCK_HANGUL_SYLLABLES = UBlockCode.UBLOCK_HANGUL_SYLLABLES;
pub const UBLOCK_HIGH_SURROGATES = UBlockCode.UBLOCK_HIGH_SURROGATES;
pub const UBLOCK_HIGH_PRIVATE_USE_SURROGATES = UBlockCode.UBLOCK_HIGH_PRIVATE_USE_SURROGATES;
pub const UBLOCK_LOW_SURROGATES = UBlockCode.UBLOCK_LOW_SURROGATES;
pub const UBLOCK_PRIVATE_USE_AREA = UBlockCode.UBLOCK_PRIVATE_USE_AREA;
pub const UBLOCK_PRIVATE_USE = UBlockCode.UBLOCK_PRIVATE_USE;
pub const UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS = UBlockCode.UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS;
pub const UBLOCK_ALPHABETIC_PRESENTATION_FORMS = UBlockCode.UBLOCK_ALPHABETIC_PRESENTATION_FORMS;
pub const UBLOCK_ARABIC_PRESENTATION_FORMS_A = UBlockCode.UBLOCK_ARABIC_PRESENTATION_FORMS_A;
pub const UBLOCK_COMBINING_HALF_MARKS = UBlockCode.UBLOCK_COMBINING_HALF_MARKS;
pub const UBLOCK_CJK_COMPATIBILITY_FORMS = UBlockCode.UBLOCK_CJK_COMPATIBILITY_FORMS;
pub const UBLOCK_SMALL_FORM_VARIANTS = UBlockCode.UBLOCK_SMALL_FORM_VARIANTS;
pub const UBLOCK_ARABIC_PRESENTATION_FORMS_B = UBlockCode.UBLOCK_ARABIC_PRESENTATION_FORMS_B;
pub const UBLOCK_SPECIALS = UBlockCode.UBLOCK_SPECIALS;
pub const UBLOCK_HALFWIDTH_AND_FULLWIDTH_FORMS = UBlockCode.UBLOCK_HALFWIDTH_AND_FULLWIDTH_FORMS;
pub const UBLOCK_OLD_ITALIC = UBlockCode.UBLOCK_OLD_ITALIC;
pub const UBLOCK_GOTHIC = UBlockCode.UBLOCK_GOTHIC;
pub const UBLOCK_DESERET = UBlockCode.UBLOCK_DESERET;
pub const UBLOCK_BYZANTINE_MUSICAL_SYMBOLS = UBlockCode.UBLOCK_BYZANTINE_MUSICAL_SYMBOLS;
pub const UBLOCK_MUSICAL_SYMBOLS = UBlockCode.UBLOCK_MUSICAL_SYMBOLS;
pub const UBLOCK_MATHEMATICAL_ALPHANUMERIC_SYMBOLS = UBlockCode.UBLOCK_MATHEMATICAL_ALPHANUMERIC_SYMBOLS;
pub const UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B = UBlockCode.UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B;
pub const UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT = UBlockCode.UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT;
pub const UBLOCK_TAGS = UBlockCode.UBLOCK_TAGS;
pub const UBLOCK_CYRILLIC_SUPPLEMENT = UBlockCode.UBLOCK_CYRILLIC_SUPPLEMENT;
pub const UBLOCK_CYRILLIC_SUPPLEMENTARY = UBlockCode.UBLOCK_CYRILLIC_SUPPLEMENTARY;
pub const UBLOCK_TAGALOG = UBlockCode.UBLOCK_TAGALOG;
pub const UBLOCK_HANUNOO = UBlockCode.UBLOCK_HANUNOO;
pub const UBLOCK_BUHID = UBlockCode.UBLOCK_BUHID;
pub const UBLOCK_TAGBANWA = UBlockCode.UBLOCK_TAGBANWA;
pub const UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A = UBlockCode.UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A;
pub const UBLOCK_SUPPLEMENTAL_ARROWS_A = UBlockCode.UBLOCK_SUPPLEMENTAL_ARROWS_A;
pub const UBLOCK_SUPPLEMENTAL_ARROWS_B = UBlockCode.UBLOCK_SUPPLEMENTAL_ARROWS_B;
pub const UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B = UBlockCode.UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B;
pub const UBLOCK_SUPPLEMENTAL_MATHEMATICAL_OPERATORS = UBlockCode.UBLOCK_SUPPLEMENTAL_MATHEMATICAL_OPERATORS;
pub const UBLOCK_KATAKANA_PHONETIC_EXTENSIONS = UBlockCode.UBLOCK_KATAKANA_PHONETIC_EXTENSIONS;
pub const UBLOCK_VARIATION_SELECTORS = UBlockCode.UBLOCK_VARIATION_SELECTORS;
pub const UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_A = UBlockCode.UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_A;
pub const UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_B = UBlockCode.UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_B;
pub const UBLOCK_LIMBU = UBlockCode.UBLOCK_LIMBU;
pub const UBLOCK_TAI_LE = UBlockCode.UBLOCK_TAI_LE;
pub const UBLOCK_KHMER_SYMBOLS = UBlockCode.UBLOCK_KHMER_SYMBOLS;
pub const UBLOCK_PHONETIC_EXTENSIONS = UBlockCode.UBLOCK_PHONETIC_EXTENSIONS;
pub const UBLOCK_MISCELLANEOUS_SYMBOLS_AND_ARROWS = UBlockCode.UBLOCK_MISCELLANEOUS_SYMBOLS_AND_ARROWS;
pub const UBLOCK_YIJING_HEXAGRAM_SYMBOLS = UBlockCode.UBLOCK_YIJING_HEXAGRAM_SYMBOLS;
pub const UBLOCK_LINEAR_B_SYLLABARY = UBlockCode.UBLOCK_LINEAR_B_SYLLABARY;
pub const UBLOCK_LINEAR_B_IDEOGRAMS = UBlockCode.UBLOCK_LINEAR_B_IDEOGRAMS;
pub const UBLOCK_AEGEAN_NUMBERS = UBlockCode.UBLOCK_AEGEAN_NUMBERS;
pub const UBLOCK_UGARITIC = UBlockCode.UBLOCK_UGARITIC;
pub const UBLOCK_SHAVIAN = UBlockCode.UBLOCK_SHAVIAN;
pub const UBLOCK_OSMANYA = UBlockCode.UBLOCK_OSMANYA;
pub const UBLOCK_CYPRIOT_SYLLABARY = UBlockCode.UBLOCK_CYPRIOT_SYLLABARY;
pub const UBLOCK_TAI_XUAN_JING_SYMBOLS = UBlockCode.UBLOCK_TAI_XUAN_JING_SYMBOLS;
pub const UBLOCK_VARIATION_SELECTORS_SUPPLEMENT = UBlockCode.UBLOCK_VARIATION_SELECTORS_SUPPLEMENT;
pub const UBLOCK_ANCIENT_GREEK_MUSICAL_NOTATION = UBlockCode.UBLOCK_ANCIENT_GREEK_MUSICAL_NOTATION;
pub const UBLOCK_ANCIENT_GREEK_NUMBERS = UBlockCode.UBLOCK_ANCIENT_GREEK_NUMBERS;
pub const UBLOCK_ARABIC_SUPPLEMENT = UBlockCode.UBLOCK_ARABIC_SUPPLEMENT;
pub const UBLOCK_BUGINESE = UBlockCode.UBLOCK_BUGINESE;
pub const UBLOCK_CJK_STROKES = UBlockCode.UBLOCK_CJK_STROKES;
pub const UBLOCK_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT = UBlockCode.UBLOCK_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT;
pub const UBLOCK_COPTIC = UBlockCode.UBLOCK_COPTIC;
pub const UBLOCK_ETHIOPIC_EXTENDED = UBlockCode.UBLOCK_ETHIOPIC_EXTENDED;
pub const UBLOCK_ETHIOPIC_SUPPLEMENT = UBlockCode.UBLOCK_ETHIOPIC_SUPPLEMENT;
pub const UBLOCK_GEORGIAN_SUPPLEMENT = UBlockCode.UBLOCK_GEORGIAN_SUPPLEMENT;
pub const UBLOCK_GLAGOLITIC = UBlockCode.UBLOCK_GLAGOLITIC;
pub const UBLOCK_KHAROSHTHI = UBlockCode.UBLOCK_KHAROSHTHI;
pub const UBLOCK_MODIFIER_TONE_LETTERS = UBlockCode.UBLOCK_MODIFIER_TONE_LETTERS;
pub const UBLOCK_NEW_TAI_LUE = UBlockCode.UBLOCK_NEW_TAI_LUE;
pub const UBLOCK_OLD_PERSIAN = UBlockCode.UBLOCK_OLD_PERSIAN;
pub const UBLOCK_PHONETIC_EXTENSIONS_SUPPLEMENT = UBlockCode.UBLOCK_PHONETIC_EXTENSIONS_SUPPLEMENT;
pub const UBLOCK_SUPPLEMENTAL_PUNCTUATION = UBlockCode.UBLOCK_SUPPLEMENTAL_PUNCTUATION;
pub const UBLOCK_SYLOTI_NAGRI = UBlockCode.UBLOCK_SYLOTI_NAGRI;
pub const UBLOCK_TIFINAGH = UBlockCode.UBLOCK_TIFINAGH;
pub const UBLOCK_VERTICAL_FORMS = UBlockCode.UBLOCK_VERTICAL_FORMS;
pub const UBLOCK_NKO = UBlockCode.UBLOCK_NKO;
pub const UBLOCK_BALINESE = UBlockCode.UBLOCK_BALINESE;
pub const UBLOCK_LATIN_EXTENDED_C = UBlockCode.UBLOCK_LATIN_EXTENDED_C;
pub const UBLOCK_LATIN_EXTENDED_D = UBlockCode.UBLOCK_LATIN_EXTENDED_D;
pub const UBLOCK_PHAGS_PA = UBlockCode.UBLOCK_PHAGS_PA;
pub const UBLOCK_PHOENICIAN = UBlockCode.UBLOCK_PHOENICIAN;
pub const UBLOCK_CUNEIFORM = UBlockCode.UBLOCK_CUNEIFORM;
pub const UBLOCK_CUNEIFORM_NUMBERS_AND_PUNCTUATION = UBlockCode.UBLOCK_CUNEIFORM_NUMBERS_AND_PUNCTUATION;
pub const UBLOCK_COUNTING_ROD_NUMERALS = UBlockCode.UBLOCK_COUNTING_ROD_NUMERALS;
pub const UBLOCK_SUNDANESE = UBlockCode.UBLOCK_SUNDANESE;
pub const UBLOCK_LEPCHA = UBlockCode.UBLOCK_LEPCHA;
pub const UBLOCK_OL_CHIKI = UBlockCode.UBLOCK_OL_CHIKI;
pub const UBLOCK_CYRILLIC_EXTENDED_A = UBlockCode.UBLOCK_CYRILLIC_EXTENDED_A;
pub const UBLOCK_VAI = UBlockCode.UBLOCK_VAI;
pub const UBLOCK_CYRILLIC_EXTENDED_B = UBlockCode.UBLOCK_CYRILLIC_EXTENDED_B;
pub const UBLOCK_SAURASHTRA = UBlockCode.UBLOCK_SAURASHTRA;
pub const UBLOCK_KAYAH_LI = UBlockCode.UBLOCK_KAYAH_LI;
pub const UBLOCK_REJANG = UBlockCode.UBLOCK_REJANG;
pub const UBLOCK_CHAM = UBlockCode.UBLOCK_CHAM;
pub const UBLOCK_ANCIENT_SYMBOLS = UBlockCode.UBLOCK_ANCIENT_SYMBOLS;
pub const UBLOCK_PHAISTOS_DISC = UBlockCode.UBLOCK_PHAISTOS_DISC;
pub const UBLOCK_LYCIAN = UBlockCode.UBLOCK_LYCIAN;
pub const UBLOCK_CARIAN = UBlockCode.UBLOCK_CARIAN;
pub const UBLOCK_LYDIAN = UBlockCode.UBLOCK_LYDIAN;
pub const UBLOCK_MAHJONG_TILES = UBlockCode.UBLOCK_MAHJONG_TILES;
pub const UBLOCK_DOMINO_TILES = UBlockCode.UBLOCK_DOMINO_TILES;
pub const UBLOCK_SAMARITAN = UBlockCode.UBLOCK_SAMARITAN;
pub const UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED = UBlockCode.UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED;
pub const UBLOCK_TAI_THAM = UBlockCode.UBLOCK_TAI_THAM;
pub const UBLOCK_VEDIC_EXTENSIONS = UBlockCode.UBLOCK_VEDIC_EXTENSIONS;
pub const UBLOCK_LISU = UBlockCode.UBLOCK_LISU;
pub const UBLOCK_BAMUM = UBlockCode.UBLOCK_BAMUM;
pub const UBLOCK_COMMON_INDIC_NUMBER_FORMS = UBlockCode.UBLOCK_COMMON_INDIC_NUMBER_FORMS;
pub const UBLOCK_DEVANAGARI_EXTENDED = UBlockCode.UBLOCK_DEVANAGARI_EXTENDED;
pub const UBLOCK_HANGUL_JAMO_EXTENDED_A = UBlockCode.UBLOCK_HANGUL_JAMO_EXTENDED_A;
pub const UBLOCK_JAVANESE = UBlockCode.UBLOCK_JAVANESE;
pub const UBLOCK_MYANMAR_EXTENDED_A = UBlockCode.UBLOCK_MYANMAR_EXTENDED_A;
pub const UBLOCK_TAI_VIET = UBlockCode.UBLOCK_TAI_VIET;
pub const UBLOCK_MEETEI_MAYEK = UBlockCode.UBLOCK_MEETEI_MAYEK;
pub const UBLOCK_HANGUL_JAMO_EXTENDED_B = UBlockCode.UBLOCK_HANGUL_JAMO_EXTENDED_B;
pub const UBLOCK_IMPERIAL_ARAMAIC = UBlockCode.UBLOCK_IMPERIAL_ARAMAIC;
pub const UBLOCK_OLD_SOUTH_ARABIAN = UBlockCode.UBLOCK_OLD_SOUTH_ARABIAN;
pub const UBLOCK_AVESTAN = UBlockCode.UBLOCK_AVESTAN;
pub const UBLOCK_INSCRIPTIONAL_PARTHIAN = UBlockCode.UBLOCK_INSCRIPTIONAL_PARTHIAN;
pub const UBLOCK_INSCRIPTIONAL_PAHLAVI = UBlockCode.UBLOCK_INSCRIPTIONAL_PAHLAVI;
pub const UBLOCK_OLD_TURKIC = UBlockCode.UBLOCK_OLD_TURKIC;
pub const UBLOCK_RUMI_NUMERAL_SYMBOLS = UBlockCode.UBLOCK_RUMI_NUMERAL_SYMBOLS;
pub const UBLOCK_KAITHI = UBlockCode.UBLOCK_KAITHI;
pub const UBLOCK_EGYPTIAN_HIEROGLYPHS = UBlockCode.UBLOCK_EGYPTIAN_HIEROGLYPHS;
pub const UBLOCK_ENCLOSED_ALPHANUMERIC_SUPPLEMENT = UBlockCode.UBLOCK_ENCLOSED_ALPHANUMERIC_SUPPLEMENT;
pub const UBLOCK_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT = UBlockCode.UBLOCK_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT;
pub const UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C = UBlockCode.UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C;
pub const UBLOCK_MANDAIC = UBlockCode.UBLOCK_MANDAIC;
pub const UBLOCK_BATAK = UBlockCode.UBLOCK_BATAK;
pub const UBLOCK_ETHIOPIC_EXTENDED_A = UBlockCode.UBLOCK_ETHIOPIC_EXTENDED_A;
pub const UBLOCK_BRAHMI = UBlockCode.UBLOCK_BRAHMI;
pub const UBLOCK_BAMUM_SUPPLEMENT = UBlockCode.UBLOCK_BAMUM_SUPPLEMENT;
pub const UBLOCK_KANA_SUPPLEMENT = UBlockCode.UBLOCK_KANA_SUPPLEMENT;
pub const UBLOCK_PLAYING_CARDS = UBlockCode.UBLOCK_PLAYING_CARDS;
pub const UBLOCK_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS = UBlockCode.UBLOCK_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS;
pub const UBLOCK_EMOTICONS = UBlockCode.UBLOCK_EMOTICONS;
pub const UBLOCK_TRANSPORT_AND_MAP_SYMBOLS = UBlockCode.UBLOCK_TRANSPORT_AND_MAP_SYMBOLS;
pub const UBLOCK_ALCHEMICAL_SYMBOLS = UBlockCode.UBLOCK_ALCHEMICAL_SYMBOLS;
pub const UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D = UBlockCode.UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D;
pub const UBLOCK_ARABIC_EXTENDED_A = UBlockCode.UBLOCK_ARABIC_EXTENDED_A;
pub const UBLOCK_ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS = UBlockCode.UBLOCK_ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS;
pub const UBLOCK_CHAKMA = UBlockCode.UBLOCK_CHAKMA;
pub const UBLOCK_MEETEI_MAYEK_EXTENSIONS = UBlockCode.UBLOCK_MEETEI_MAYEK_EXTENSIONS;
pub const UBLOCK_MEROITIC_CURSIVE = UBlockCode.UBLOCK_MEROITIC_CURSIVE;
pub const UBLOCK_MEROITIC_HIEROGLYPHS = UBlockCode.UBLOCK_MEROITIC_HIEROGLYPHS;
pub const UBLOCK_MIAO = UBlockCode.UBLOCK_MIAO;
pub const UBLOCK_SHARADA = UBlockCode.UBLOCK_SHARADA;
pub const UBLOCK_SORA_SOMPENG = UBlockCode.UBLOCK_SORA_SOMPENG;
pub const UBLOCK_SUNDANESE_SUPPLEMENT = UBlockCode.UBLOCK_SUNDANESE_SUPPLEMENT;
pub const UBLOCK_TAKRI = UBlockCode.UBLOCK_TAKRI;
pub const UBLOCK_BASSA_VAH = UBlockCode.UBLOCK_BASSA_VAH;
pub const UBLOCK_CAUCASIAN_ALBANIAN = UBlockCode.UBLOCK_CAUCASIAN_ALBANIAN;
pub const UBLOCK_COPTIC_EPACT_NUMBERS = UBlockCode.UBLOCK_COPTIC_EPACT_NUMBERS;
pub const UBLOCK_COMBINING_DIACRITICAL_MARKS_EXTENDED = UBlockCode.UBLOCK_COMBINING_DIACRITICAL_MARKS_EXTENDED;
pub const UBLOCK_DUPLOYAN = UBlockCode.UBLOCK_DUPLOYAN;
pub const UBLOCK_ELBASAN = UBlockCode.UBLOCK_ELBASAN;
pub const UBLOCK_GEOMETRIC_SHAPES_EXTENDED = UBlockCode.UBLOCK_GEOMETRIC_SHAPES_EXTENDED;
pub const UBLOCK_GRANTHA = UBlockCode.UBLOCK_GRANTHA;
pub const UBLOCK_KHOJKI = UBlockCode.UBLOCK_KHOJKI;
pub const UBLOCK_KHUDAWADI = UBlockCode.UBLOCK_KHUDAWADI;
pub const UBLOCK_LATIN_EXTENDED_E = UBlockCode.UBLOCK_LATIN_EXTENDED_E;
pub const UBLOCK_LINEAR_A = UBlockCode.UBLOCK_LINEAR_A;
pub const UBLOCK_MAHAJANI = UBlockCode.UBLOCK_MAHAJANI;
pub const UBLOCK_MANICHAEAN = UBlockCode.UBLOCK_MANICHAEAN;
pub const UBLOCK_MENDE_KIKAKUI = UBlockCode.UBLOCK_MENDE_KIKAKUI;
pub const UBLOCK_MODI = UBlockCode.UBLOCK_MODI;
pub const UBLOCK_MRO = UBlockCode.UBLOCK_MRO;
pub const UBLOCK_MYANMAR_EXTENDED_B = UBlockCode.UBLOCK_MYANMAR_EXTENDED_B;
pub const UBLOCK_NABATAEAN = UBlockCode.UBLOCK_NABATAEAN;
pub const UBLOCK_OLD_NORTH_ARABIAN = UBlockCode.UBLOCK_OLD_NORTH_ARABIAN;
pub const UBLOCK_OLD_PERMIC = UBlockCode.UBLOCK_OLD_PERMIC;
pub const UBLOCK_ORNAMENTAL_DINGBATS = UBlockCode.UBLOCK_ORNAMENTAL_DINGBATS;
pub const UBLOCK_PAHAWH_HMONG = UBlockCode.UBLOCK_PAHAWH_HMONG;
pub const UBLOCK_PALMYRENE = UBlockCode.UBLOCK_PALMYRENE;
pub const UBLOCK_PAU_CIN_HAU = UBlockCode.UBLOCK_PAU_CIN_HAU;
pub const UBLOCK_PSALTER_PAHLAVI = UBlockCode.UBLOCK_PSALTER_PAHLAVI;
pub const UBLOCK_SHORTHAND_FORMAT_CONTROLS = UBlockCode.UBLOCK_SHORTHAND_FORMAT_CONTROLS;
pub const UBLOCK_SIDDHAM = UBlockCode.UBLOCK_SIDDHAM;
pub const UBLOCK_SINHALA_ARCHAIC_NUMBERS = UBlockCode.UBLOCK_SINHALA_ARCHAIC_NUMBERS;
pub const UBLOCK_SUPPLEMENTAL_ARROWS_C = UBlockCode.UBLOCK_SUPPLEMENTAL_ARROWS_C;
pub const UBLOCK_TIRHUTA = UBlockCode.UBLOCK_TIRHUTA;
pub const UBLOCK_WARANG_CITI = UBlockCode.UBLOCK_WARANG_CITI;
pub const UBLOCK_AHOM = UBlockCode.UBLOCK_AHOM;
pub const UBLOCK_ANATOLIAN_HIEROGLYPHS = UBlockCode.UBLOCK_ANATOLIAN_HIEROGLYPHS;
pub const UBLOCK_CHEROKEE_SUPPLEMENT = UBlockCode.UBLOCK_CHEROKEE_SUPPLEMENT;
pub const UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E = UBlockCode.UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E;
pub const UBLOCK_EARLY_DYNASTIC_CUNEIFORM = UBlockCode.UBLOCK_EARLY_DYNASTIC_CUNEIFORM;
pub const UBLOCK_HATRAN = UBlockCode.UBLOCK_HATRAN;
pub const UBLOCK_MULTANI = UBlockCode.UBLOCK_MULTANI;
pub const UBLOCK_OLD_HUNGARIAN = UBlockCode.UBLOCK_OLD_HUNGARIAN;
pub const UBLOCK_SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS = UBlockCode.UBLOCK_SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS;
pub const UBLOCK_SUTTON_SIGNWRITING = UBlockCode.UBLOCK_SUTTON_SIGNWRITING;
pub const UBLOCK_ADLAM = UBlockCode.UBLOCK_ADLAM;
pub const UBLOCK_BHAIKSUKI = UBlockCode.UBLOCK_BHAIKSUKI;
pub const UBLOCK_CYRILLIC_EXTENDED_C = UBlockCode.UBLOCK_CYRILLIC_EXTENDED_C;
pub const UBLOCK_GLAGOLITIC_SUPPLEMENT = UBlockCode.UBLOCK_GLAGOLITIC_SUPPLEMENT;
pub const UBLOCK_IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION = UBlockCode.UBLOCK_IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION;
pub const UBLOCK_MARCHEN = UBlockCode.UBLOCK_MARCHEN;
pub const UBLOCK_MONGOLIAN_SUPPLEMENT = UBlockCode.UBLOCK_MONGOLIAN_SUPPLEMENT;
pub const UBLOCK_NEWA = UBlockCode.UBLOCK_NEWA;
pub const UBLOCK_OSAGE = UBlockCode.UBLOCK_OSAGE;
pub const UBLOCK_TANGUT = UBlockCode.UBLOCK_TANGUT;
pub const UBLOCK_TANGUT_COMPONENTS = UBlockCode.UBLOCK_TANGUT_COMPONENTS;
pub const UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F = UBlockCode.UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F;
pub const UBLOCK_KANA_EXTENDED_A = UBlockCode.UBLOCK_KANA_EXTENDED_A;
pub const UBLOCK_MASARAM_GONDI = UBlockCode.UBLOCK_MASARAM_GONDI;
pub const UBLOCK_NUSHU = UBlockCode.UBLOCK_NUSHU;
pub const UBLOCK_SOYOMBO = UBlockCode.UBLOCK_SOYOMBO;
pub const UBLOCK_SYRIAC_SUPPLEMENT = UBlockCode.UBLOCK_SYRIAC_SUPPLEMENT;
pub const UBLOCK_ZANABAZAR_SQUARE = UBlockCode.UBLOCK_ZANABAZAR_SQUARE;
pub const UBLOCK_CHESS_SYMBOLS = UBlockCode.UBLOCK_CHESS_SYMBOLS;
pub const UBLOCK_DOGRA = UBlockCode.UBLOCK_DOGRA;
pub const UBLOCK_GEORGIAN_EXTENDED = UBlockCode.UBLOCK_GEORGIAN_EXTENDED;
pub const UBLOCK_GUNJALA_GONDI = UBlockCode.UBLOCK_GUNJALA_GONDI;
pub const UBLOCK_HANIFI_ROHINGYA = UBlockCode.UBLOCK_HANIFI_ROHINGYA;
pub const UBLOCK_INDIC_SIYAQ_NUMBERS = UBlockCode.UBLOCK_INDIC_SIYAQ_NUMBERS;
pub const UBLOCK_MAKASAR = UBlockCode.UBLOCK_MAKASAR;
pub const UBLOCK_MAYAN_NUMERALS = UBlockCode.UBLOCK_MAYAN_NUMERALS;
pub const UBLOCK_MEDEFAIDRIN = UBlockCode.UBLOCK_MEDEFAIDRIN;
pub const UBLOCK_OLD_SOGDIAN = UBlockCode.UBLOCK_OLD_SOGDIAN;
pub const UBLOCK_SOGDIAN = UBlockCode.UBLOCK_SOGDIAN;
pub const UBLOCK_EGYPTIAN_HIEROGLYPH_FORMAT_CONTROLS = UBlockCode.UBLOCK_EGYPTIAN_HIEROGLYPH_FORMAT_CONTROLS;
pub const UBLOCK_ELYMAIC = UBlockCode.UBLOCK_ELYMAIC;
pub const UBLOCK_NANDINAGARI = UBlockCode.UBLOCK_NANDINAGARI;
pub const UBLOCK_NYIAKENG_PUACHUE_HMONG = UBlockCode.UBLOCK_NYIAKENG_PUACHUE_HMONG;
pub const UBLOCK_OTTOMAN_SIYAQ_NUMBERS = UBlockCode.UBLOCK_OTTOMAN_SIYAQ_NUMBERS;
pub const UBLOCK_SMALL_KANA_EXTENSION = UBlockCode.UBLOCK_SMALL_KANA_EXTENSION;
pub const UBLOCK_SYMBOLS_AND_PICTOGRAPHS_EXTENDED_A = UBlockCode.UBLOCK_SYMBOLS_AND_PICTOGRAPHS_EXTENDED_A;
pub const UBLOCK_TAMIL_SUPPLEMENT = UBlockCode.UBLOCK_TAMIL_SUPPLEMENT;
pub const UBLOCK_WANCHO = UBlockCode.UBLOCK_WANCHO;
pub const UBLOCK_INVALID_CODE = UBlockCode.UBLOCK_INVALID_CODE;

pub const UEastAsianWidth = extern enum(i32) {
    U_EA_NEUTRAL = 0,
    U_EA_AMBIGUOUS = 1,
    U_EA_HALFWIDTH = 2,
    U_EA_FULLWIDTH = 3,
    U_EA_NARROW = 4,
    U_EA_WIDE = 5,
};
pub const U_EA_NEUTRAL = UEastAsianWidth.U_EA_NEUTRAL;
pub const U_EA_AMBIGUOUS = UEastAsianWidth.U_EA_AMBIGUOUS;
pub const U_EA_HALFWIDTH = UEastAsianWidth.U_EA_HALFWIDTH;
pub const U_EA_FULLWIDTH = UEastAsianWidth.U_EA_FULLWIDTH;
pub const U_EA_NARROW = UEastAsianWidth.U_EA_NARROW;
pub const U_EA_WIDE = UEastAsianWidth.U_EA_WIDE;

pub const UCharNameChoice = extern enum(i32) {
    U_UNICODE_CHAR_NAME = 0,
    U_EXTENDED_CHAR_NAME = 2,
    U_CHAR_NAME_ALIAS = 3,
};
pub const U_UNICODE_CHAR_NAME = UCharNameChoice.U_UNICODE_CHAR_NAME;
pub const U_EXTENDED_CHAR_NAME = UCharNameChoice.U_EXTENDED_CHAR_NAME;
pub const U_CHAR_NAME_ALIAS = UCharNameChoice.U_CHAR_NAME_ALIAS;

pub const UPropertyNameChoice = extern enum(i32) {
    U_SHORT_PROPERTY_NAME = 0,
    U_LONG_PROPERTY_NAME = 1,
};
pub const U_SHORT_PROPERTY_NAME = UPropertyNameChoice.U_SHORT_PROPERTY_NAME;
pub const U_LONG_PROPERTY_NAME = UPropertyNameChoice.U_LONG_PROPERTY_NAME;

pub const UDecompositionType = extern enum(i32) {
    U_DT_NONE = 0,
    U_DT_CANONICAL = 1,
    U_DT_COMPAT = 2,
    U_DT_CIRCLE = 3,
    U_DT_FINAL = 4,
    U_DT_FONT = 5,
    U_DT_FRACTION = 6,
    U_DT_INITIAL = 7,
    U_DT_ISOLATED = 8,
    U_DT_MEDIAL = 9,
    U_DT_NARROW = 10,
    U_DT_NOBREAK = 11,
    U_DT_SMALL = 12,
    U_DT_SQUARE = 13,
    U_DT_SUB = 14,
    U_DT_SUPER = 15,
    U_DT_VERTICAL = 16,
    U_DT_WIDE = 17,
};
pub const U_DT_NONE = UDecompositionType.U_DT_NONE;
pub const U_DT_CANONICAL = UDecompositionType.U_DT_CANONICAL;
pub const U_DT_COMPAT = UDecompositionType.U_DT_COMPAT;
pub const U_DT_CIRCLE = UDecompositionType.U_DT_CIRCLE;
pub const U_DT_FINAL = UDecompositionType.U_DT_FINAL;
pub const U_DT_FONT = UDecompositionType.U_DT_FONT;
pub const U_DT_FRACTION = UDecompositionType.U_DT_FRACTION;
pub const U_DT_INITIAL = UDecompositionType.U_DT_INITIAL;
pub const U_DT_ISOLATED = UDecompositionType.U_DT_ISOLATED;
pub const U_DT_MEDIAL = UDecompositionType.U_DT_MEDIAL;
pub const U_DT_NARROW = UDecompositionType.U_DT_NARROW;
pub const U_DT_NOBREAK = UDecompositionType.U_DT_NOBREAK;
pub const U_DT_SMALL = UDecompositionType.U_DT_SMALL;
pub const U_DT_SQUARE = UDecompositionType.U_DT_SQUARE;
pub const U_DT_SUB = UDecompositionType.U_DT_SUB;
pub const U_DT_SUPER = UDecompositionType.U_DT_SUPER;
pub const U_DT_VERTICAL = UDecompositionType.U_DT_VERTICAL;
pub const U_DT_WIDE = UDecompositionType.U_DT_WIDE;

pub const UJoiningType = extern enum(i32) {
    U_JT_NON_JOINING = 0,
    U_JT_JOIN_CAUSING = 1,
    U_JT_DUAL_JOINING = 2,
    U_JT_LEFT_JOINING = 3,
    U_JT_RIGHT_JOINING = 4,
    U_JT_TRANSPARENT = 5,
};
pub const U_JT_NON_JOINING = UJoiningType.U_JT_NON_JOINING;
pub const U_JT_JOIN_CAUSING = UJoiningType.U_JT_JOIN_CAUSING;
pub const U_JT_DUAL_JOINING = UJoiningType.U_JT_DUAL_JOINING;
pub const U_JT_LEFT_JOINING = UJoiningType.U_JT_LEFT_JOINING;
pub const U_JT_RIGHT_JOINING = UJoiningType.U_JT_RIGHT_JOINING;
pub const U_JT_TRANSPARENT = UJoiningType.U_JT_TRANSPARENT;

pub const UJoiningGroup = extern enum(i32) {
    U_JG_NO_JOINING_GROUP = 0,
    U_JG_AIN = 1,
    U_JG_ALAPH = 2,
    U_JG_ALEF = 3,
    U_JG_BEH = 4,
    U_JG_BETH = 5,
    U_JG_DAL = 6,
    U_JG_DALATH_RISH = 7,
    U_JG_E = 8,
    U_JG_FEH = 9,
    U_JG_FINAL_SEMKATH = 10,
    U_JG_GAF = 11,
    U_JG_GAMAL = 12,
    U_JG_HAH = 13,
    U_JG_TEH_MARBUTA_GOAL = 14,
    U_JG_HAMZA_ON_HEH_GOAL = 14,
    U_JG_HE = 15,
    U_JG_HEH = 16,
    U_JG_HEH_GOAL = 17,
    U_JG_HETH = 18,
    U_JG_KAF = 19,
    U_JG_KAPH = 20,
    U_JG_KNOTTED_HEH = 21,
    U_JG_LAM = 22,
    U_JG_LAMADH = 23,
    U_JG_MEEM = 24,
    U_JG_MIM = 25,
    U_JG_NOON = 26,
    U_JG_NUN = 27,
    U_JG_PE = 28,
    U_JG_QAF = 29,
    U_JG_QAPH = 30,
    U_JG_REH = 31,
    U_JG_REVERSED_PE = 32,
    U_JG_SAD = 33,
    U_JG_SADHE = 34,
    U_JG_SEEN = 35,
    U_JG_SEMKATH = 36,
    U_JG_SHIN = 37,
    U_JG_SWASH_KAF = 38,
    U_JG_SYRIAC_WAW = 39,
    U_JG_TAH = 40,
    U_JG_TAW = 41,
    U_JG_TEH_MARBUTA = 42,
    U_JG_TETH = 43,
    U_JG_WAW = 44,
    U_JG_YEH = 45,
    U_JG_YEH_BARREE = 46,
    U_JG_YEH_WITH_TAIL = 47,
    U_JG_YUDH = 48,
    U_JG_YUDH_HE = 49,
    U_JG_ZAIN = 50,
    U_JG_FE = 51,
    U_JG_KHAPH = 52,
    U_JG_ZHAIN = 53,
    U_JG_BURUSHASKI_YEH_BARREE = 54,
    U_JG_FARSI_YEH = 55,
    U_JG_NYA = 56,
    U_JG_ROHINGYA_YEH = 57,
    U_JG_MANICHAEAN_ALEPH = 58,
    U_JG_MANICHAEAN_AYIN = 59,
    U_JG_MANICHAEAN_BETH = 60,
    U_JG_MANICHAEAN_DALETH = 61,
    U_JG_MANICHAEAN_DHAMEDH = 62,
    U_JG_MANICHAEAN_FIVE = 63,
    U_JG_MANICHAEAN_GIMEL = 64,
    U_JG_MANICHAEAN_HETH = 65,
    U_JG_MANICHAEAN_HUNDRED = 66,
    U_JG_MANICHAEAN_KAPH = 67,
    U_JG_MANICHAEAN_LAMEDH = 68,
    U_JG_MANICHAEAN_MEM = 69,
    U_JG_MANICHAEAN_NUN = 70,
    U_JG_MANICHAEAN_ONE = 71,
    U_JG_MANICHAEAN_PE = 72,
    U_JG_MANICHAEAN_QOPH = 73,
    U_JG_MANICHAEAN_RESH = 74,
    U_JG_MANICHAEAN_SADHE = 75,
    U_JG_MANICHAEAN_SAMEKH = 76,
    U_JG_MANICHAEAN_TAW = 77,
    U_JG_MANICHAEAN_TEN = 78,
    U_JG_MANICHAEAN_TETH = 79,
    U_JG_MANICHAEAN_THAMEDH = 80,
    U_JG_MANICHAEAN_TWENTY = 81,
    U_JG_MANICHAEAN_WAW = 82,
    U_JG_MANICHAEAN_YODH = 83,
    U_JG_MANICHAEAN_ZAYIN = 84,
    U_JG_STRAIGHT_WAW = 85,
    U_JG_AFRICAN_FEH = 86,
    U_JG_AFRICAN_NOON = 87,
    U_JG_AFRICAN_QAF = 88,
    U_JG_MALAYALAM_BHA = 89,
    U_JG_MALAYALAM_JA = 90,
    U_JG_MALAYALAM_LLA = 91,
    U_JG_MALAYALAM_LLLA = 92,
    U_JG_MALAYALAM_NGA = 93,
    U_JG_MALAYALAM_NNA = 94,
    U_JG_MALAYALAM_NNNA = 95,
    U_JG_MALAYALAM_NYA = 96,
    U_JG_MALAYALAM_RA = 97,
    U_JG_MALAYALAM_SSA = 98,
    U_JG_MALAYALAM_TTA = 99,
    U_JG_HANIFI_ROHINGYA_KINNA_YA = 100,
    U_JG_HANIFI_ROHINGYA_PA = 101,
};
pub const U_JG_NO_JOINING_GROUP = UJoiningGroup.U_JG_NO_JOINING_GROUP;
pub const U_JG_AIN = UJoiningGroup.U_JG_AIN;
pub const U_JG_ALAPH = UJoiningGroup.U_JG_ALAPH;
pub const U_JG_ALEF = UJoiningGroup.U_JG_ALEF;
pub const U_JG_BEH = UJoiningGroup.U_JG_BEH;
pub const U_JG_BETH = UJoiningGroup.U_JG_BETH;
pub const U_JG_DAL = UJoiningGroup.U_JG_DAL;
pub const U_JG_DALATH_RISH = UJoiningGroup.U_JG_DALATH_RISH;
pub const U_JG_E = UJoiningGroup.U_JG_E;
pub const U_JG_FEH = UJoiningGroup.U_JG_FEH;
pub const U_JG_FINAL_SEMKATH = UJoiningGroup.U_JG_FINAL_SEMKATH;
pub const U_JG_GAF = UJoiningGroup.U_JG_GAF;
pub const U_JG_GAMAL = UJoiningGroup.U_JG_GAMAL;
pub const U_JG_HAH = UJoiningGroup.U_JG_HAH;
pub const U_JG_TEH_MARBUTA_GOAL = UJoiningGroup.U_JG_TEH_MARBUTA_GOAL;
pub const U_JG_HAMZA_ON_HEH_GOAL = UJoiningGroup.U_JG_HAMZA_ON_HEH_GOAL;
pub const U_JG_HE = UJoiningGroup.U_JG_HE;
pub const U_JG_HEH = UJoiningGroup.U_JG_HEH;
pub const U_JG_HEH_GOAL = UJoiningGroup.U_JG_HEH_GOAL;
pub const U_JG_HETH = UJoiningGroup.U_JG_HETH;
pub const U_JG_KAF = UJoiningGroup.U_JG_KAF;
pub const U_JG_KAPH = UJoiningGroup.U_JG_KAPH;
pub const U_JG_KNOTTED_HEH = UJoiningGroup.U_JG_KNOTTED_HEH;
pub const U_JG_LAM = UJoiningGroup.U_JG_LAM;
pub const U_JG_LAMADH = UJoiningGroup.U_JG_LAMADH;
pub const U_JG_MEEM = UJoiningGroup.U_JG_MEEM;
pub const U_JG_MIM = UJoiningGroup.U_JG_MIM;
pub const U_JG_NOON = UJoiningGroup.U_JG_NOON;
pub const U_JG_NUN = UJoiningGroup.U_JG_NUN;
pub const U_JG_PE = UJoiningGroup.U_JG_PE;
pub const U_JG_QAF = UJoiningGroup.U_JG_QAF;
pub const U_JG_QAPH = UJoiningGroup.U_JG_QAPH;
pub const U_JG_REH = UJoiningGroup.U_JG_REH;
pub const U_JG_REVERSED_PE = UJoiningGroup.U_JG_REVERSED_PE;
pub const U_JG_SAD = UJoiningGroup.U_JG_SAD;
pub const U_JG_SADHE = UJoiningGroup.U_JG_SADHE;
pub const U_JG_SEEN = UJoiningGroup.U_JG_SEEN;
pub const U_JG_SEMKATH = UJoiningGroup.U_JG_SEMKATH;
pub const U_JG_SHIN = UJoiningGroup.U_JG_SHIN;
pub const U_JG_SWASH_KAF = UJoiningGroup.U_JG_SWASH_KAF;
pub const U_JG_SYRIAC_WAW = UJoiningGroup.U_JG_SYRIAC_WAW;
pub const U_JG_TAH = UJoiningGroup.U_JG_TAH;
pub const U_JG_TAW = UJoiningGroup.U_JG_TAW;
pub const U_JG_TEH_MARBUTA = UJoiningGroup.U_JG_TEH_MARBUTA;
pub const U_JG_TETH = UJoiningGroup.U_JG_TETH;
pub const U_JG_WAW = UJoiningGroup.U_JG_WAW;
pub const U_JG_YEH = UJoiningGroup.U_JG_YEH;
pub const U_JG_YEH_BARREE = UJoiningGroup.U_JG_YEH_BARREE;
pub const U_JG_YEH_WITH_TAIL = UJoiningGroup.U_JG_YEH_WITH_TAIL;
pub const U_JG_YUDH = UJoiningGroup.U_JG_YUDH;
pub const U_JG_YUDH_HE = UJoiningGroup.U_JG_YUDH_HE;
pub const U_JG_ZAIN = UJoiningGroup.U_JG_ZAIN;
pub const U_JG_FE = UJoiningGroup.U_JG_FE;
pub const U_JG_KHAPH = UJoiningGroup.U_JG_KHAPH;
pub const U_JG_ZHAIN = UJoiningGroup.U_JG_ZHAIN;
pub const U_JG_BURUSHASKI_YEH_BARREE = UJoiningGroup.U_JG_BURUSHASKI_YEH_BARREE;
pub const U_JG_FARSI_YEH = UJoiningGroup.U_JG_FARSI_YEH;
pub const U_JG_NYA = UJoiningGroup.U_JG_NYA;
pub const U_JG_ROHINGYA_YEH = UJoiningGroup.U_JG_ROHINGYA_YEH;
pub const U_JG_MANICHAEAN_ALEPH = UJoiningGroup.U_JG_MANICHAEAN_ALEPH;
pub const U_JG_MANICHAEAN_AYIN = UJoiningGroup.U_JG_MANICHAEAN_AYIN;
pub const U_JG_MANICHAEAN_BETH = UJoiningGroup.U_JG_MANICHAEAN_BETH;
pub const U_JG_MANICHAEAN_DALETH = UJoiningGroup.U_JG_MANICHAEAN_DALETH;
pub const U_JG_MANICHAEAN_DHAMEDH = UJoiningGroup.U_JG_MANICHAEAN_DHAMEDH;
pub const U_JG_MANICHAEAN_FIVE = UJoiningGroup.U_JG_MANICHAEAN_FIVE;
pub const U_JG_MANICHAEAN_GIMEL = UJoiningGroup.U_JG_MANICHAEAN_GIMEL;
pub const U_JG_MANICHAEAN_HETH = UJoiningGroup.U_JG_MANICHAEAN_HETH;
pub const U_JG_MANICHAEAN_HUNDRED = UJoiningGroup.U_JG_MANICHAEAN_HUNDRED;
pub const U_JG_MANICHAEAN_KAPH = UJoiningGroup.U_JG_MANICHAEAN_KAPH;
pub const U_JG_MANICHAEAN_LAMEDH = UJoiningGroup.U_JG_MANICHAEAN_LAMEDH;
pub const U_JG_MANICHAEAN_MEM = UJoiningGroup.U_JG_MANICHAEAN_MEM;
pub const U_JG_MANICHAEAN_NUN = UJoiningGroup.U_JG_MANICHAEAN_NUN;
pub const U_JG_MANICHAEAN_ONE = UJoiningGroup.U_JG_MANICHAEAN_ONE;
pub const U_JG_MANICHAEAN_PE = UJoiningGroup.U_JG_MANICHAEAN_PE;
pub const U_JG_MANICHAEAN_QOPH = UJoiningGroup.U_JG_MANICHAEAN_QOPH;
pub const U_JG_MANICHAEAN_RESH = UJoiningGroup.U_JG_MANICHAEAN_RESH;
pub const U_JG_MANICHAEAN_SADHE = UJoiningGroup.U_JG_MANICHAEAN_SADHE;
pub const U_JG_MANICHAEAN_SAMEKH = UJoiningGroup.U_JG_MANICHAEAN_SAMEKH;
pub const U_JG_MANICHAEAN_TAW = UJoiningGroup.U_JG_MANICHAEAN_TAW;
pub const U_JG_MANICHAEAN_TEN = UJoiningGroup.U_JG_MANICHAEAN_TEN;
pub const U_JG_MANICHAEAN_TETH = UJoiningGroup.U_JG_MANICHAEAN_TETH;
pub const U_JG_MANICHAEAN_THAMEDH = UJoiningGroup.U_JG_MANICHAEAN_THAMEDH;
pub const U_JG_MANICHAEAN_TWENTY = UJoiningGroup.U_JG_MANICHAEAN_TWENTY;
pub const U_JG_MANICHAEAN_WAW = UJoiningGroup.U_JG_MANICHAEAN_WAW;
pub const U_JG_MANICHAEAN_YODH = UJoiningGroup.U_JG_MANICHAEAN_YODH;
pub const U_JG_MANICHAEAN_ZAYIN = UJoiningGroup.U_JG_MANICHAEAN_ZAYIN;
pub const U_JG_STRAIGHT_WAW = UJoiningGroup.U_JG_STRAIGHT_WAW;
pub const U_JG_AFRICAN_FEH = UJoiningGroup.U_JG_AFRICAN_FEH;
pub const U_JG_AFRICAN_NOON = UJoiningGroup.U_JG_AFRICAN_NOON;
pub const U_JG_AFRICAN_QAF = UJoiningGroup.U_JG_AFRICAN_QAF;
pub const U_JG_MALAYALAM_BHA = UJoiningGroup.U_JG_MALAYALAM_BHA;
pub const U_JG_MALAYALAM_JA = UJoiningGroup.U_JG_MALAYALAM_JA;
pub const U_JG_MALAYALAM_LLA = UJoiningGroup.U_JG_MALAYALAM_LLA;
pub const U_JG_MALAYALAM_LLLA = UJoiningGroup.U_JG_MALAYALAM_LLLA;
pub const U_JG_MALAYALAM_NGA = UJoiningGroup.U_JG_MALAYALAM_NGA;
pub const U_JG_MALAYALAM_NNA = UJoiningGroup.U_JG_MALAYALAM_NNA;
pub const U_JG_MALAYALAM_NNNA = UJoiningGroup.U_JG_MALAYALAM_NNNA;
pub const U_JG_MALAYALAM_NYA = UJoiningGroup.U_JG_MALAYALAM_NYA;
pub const U_JG_MALAYALAM_RA = UJoiningGroup.U_JG_MALAYALAM_RA;
pub const U_JG_MALAYALAM_SSA = UJoiningGroup.U_JG_MALAYALAM_SSA;
pub const U_JG_MALAYALAM_TTA = UJoiningGroup.U_JG_MALAYALAM_TTA;
pub const U_JG_HANIFI_ROHINGYA_KINNA_YA = UJoiningGroup.U_JG_HANIFI_ROHINGYA_KINNA_YA;
pub const U_JG_HANIFI_ROHINGYA_PA = UJoiningGroup.U_JG_HANIFI_ROHINGYA_PA;

pub const UGraphemeClusterBreak = extern enum(i32) {
    U_GCB_OTHER = 0,
    U_GCB_CONTROL = 1,
    U_GCB_CR = 2,
    U_GCB_EXTEND = 3,
    U_GCB_L = 4,
    U_GCB_LF = 5,
    U_GCB_LV = 6,
    U_GCB_LVT = 7,
    U_GCB_T = 8,
    U_GCB_V = 9,
    U_GCB_SPACING_MARK = 10,
    U_GCB_PREPEND = 11,
    U_GCB_REGIONAL_INDICATOR = 12,
    U_GCB_E_BASE = 13,
    U_GCB_E_BASE_GAZ = 14,
    U_GCB_E_MODIFIER = 15,
    U_GCB_GLUE_AFTER_ZWJ = 16,
    U_GCB_ZWJ = 17,
};
pub const U_GCB_OTHER = UGraphemeClusterBreak.U_GCB_OTHER;
pub const U_GCB_CONTROL = UGraphemeClusterBreak.U_GCB_CONTROL;
pub const U_GCB_CR = UGraphemeClusterBreak.U_GCB_CR;
pub const U_GCB_EXTEND = UGraphemeClusterBreak.U_GCB_EXTEND;
pub const U_GCB_L = UGraphemeClusterBreak.U_GCB_L;
pub const U_GCB_LF = UGraphemeClusterBreak.U_GCB_LF;
pub const U_GCB_LV = UGraphemeClusterBreak.U_GCB_LV;
pub const U_GCB_LVT = UGraphemeClusterBreak.U_GCB_LVT;
pub const U_GCB_T = UGraphemeClusterBreak.U_GCB_T;
pub const U_GCB_V = UGraphemeClusterBreak.U_GCB_V;
pub const U_GCB_SPACING_MARK = UGraphemeClusterBreak.U_GCB_SPACING_MARK;
pub const U_GCB_PREPEND = UGraphemeClusterBreak.U_GCB_PREPEND;
pub const U_GCB_REGIONAL_INDICATOR = UGraphemeClusterBreak.U_GCB_REGIONAL_INDICATOR;
pub const U_GCB_E_BASE = UGraphemeClusterBreak.U_GCB_E_BASE;
pub const U_GCB_E_BASE_GAZ = UGraphemeClusterBreak.U_GCB_E_BASE_GAZ;
pub const U_GCB_E_MODIFIER = UGraphemeClusterBreak.U_GCB_E_MODIFIER;
pub const U_GCB_GLUE_AFTER_ZWJ = UGraphemeClusterBreak.U_GCB_GLUE_AFTER_ZWJ;
pub const U_GCB_ZWJ = UGraphemeClusterBreak.U_GCB_ZWJ;

pub const UWordBreakValues = extern enum(i32) {
    U_WB_OTHER = 0,
    U_WB_ALETTER = 1,
    U_WB_FORMAT = 2,
    U_WB_KATAKANA = 3,
    U_WB_MIDLETTER = 4,
    U_WB_MIDNUM = 5,
    U_WB_NUMERIC = 6,
    U_WB_EXTENDNUMLET = 7,
    U_WB_CR = 8,
    U_WB_EXTEND = 9,
    U_WB_LF = 10,
    U_WB_MIDNUMLET = 11,
    U_WB_NEWLINE = 12,
    U_WB_REGIONAL_INDICATOR = 13,
    U_WB_HEBREW_LETTER = 14,
    U_WB_SINGLE_QUOTE = 15,
    U_WB_DOUBLE_QUOTE = 16,
    U_WB_E_BASE = 17,
    U_WB_E_BASE_GAZ = 18,
    U_WB_E_MODIFIER = 19,
    U_WB_GLUE_AFTER_ZWJ = 20,
    U_WB_ZWJ = 21,
    U_WB_WSEGSPACE = 22,
};
pub const U_WB_OTHER = UWordBreakValues.U_WB_OTHER;
pub const U_WB_ALETTER = UWordBreakValues.U_WB_ALETTER;
pub const U_WB_FORMAT = UWordBreakValues.U_WB_FORMAT;
pub const U_WB_KATAKANA = UWordBreakValues.U_WB_KATAKANA;
pub const U_WB_MIDLETTER = UWordBreakValues.U_WB_MIDLETTER;
pub const U_WB_MIDNUM = UWordBreakValues.U_WB_MIDNUM;
pub const U_WB_NUMERIC = UWordBreakValues.U_WB_NUMERIC;
pub const U_WB_EXTENDNUMLET = UWordBreakValues.U_WB_EXTENDNUMLET;
pub const U_WB_CR = UWordBreakValues.U_WB_CR;
pub const U_WB_EXTEND = UWordBreakValues.U_WB_EXTEND;
pub const U_WB_LF = UWordBreakValues.U_WB_LF;
pub const U_WB_MIDNUMLET = UWordBreakValues.U_WB_MIDNUMLET;
pub const U_WB_NEWLINE = UWordBreakValues.U_WB_NEWLINE;
pub const U_WB_REGIONAL_INDICATOR = UWordBreakValues.U_WB_REGIONAL_INDICATOR;
pub const U_WB_HEBREW_LETTER = UWordBreakValues.U_WB_HEBREW_LETTER;
pub const U_WB_SINGLE_QUOTE = UWordBreakValues.U_WB_SINGLE_QUOTE;
pub const U_WB_DOUBLE_QUOTE = UWordBreakValues.U_WB_DOUBLE_QUOTE;
pub const U_WB_E_BASE = UWordBreakValues.U_WB_E_BASE;
pub const U_WB_E_BASE_GAZ = UWordBreakValues.U_WB_E_BASE_GAZ;
pub const U_WB_E_MODIFIER = UWordBreakValues.U_WB_E_MODIFIER;
pub const U_WB_GLUE_AFTER_ZWJ = UWordBreakValues.U_WB_GLUE_AFTER_ZWJ;
pub const U_WB_ZWJ = UWordBreakValues.U_WB_ZWJ;
pub const U_WB_WSEGSPACE = UWordBreakValues.U_WB_WSEGSPACE;

pub const USentenceBreak = extern enum(i32) {
    U_SB_OTHER = 0,
    U_SB_ATERM = 1,
    U_SB_CLOSE = 2,
    U_SB_FORMAT = 3,
    U_SB_LOWER = 4,
    U_SB_NUMERIC = 5,
    U_SB_OLETTER = 6,
    U_SB_SEP = 7,
    U_SB_SP = 8,
    U_SB_STERM = 9,
    U_SB_UPPER = 10,
    U_SB_CR = 11,
    U_SB_EXTEND = 12,
    U_SB_LF = 13,
    U_SB_SCONTINUE = 14,
};
pub const U_SB_OTHER = USentenceBreak.U_SB_OTHER;
pub const U_SB_ATERM = USentenceBreak.U_SB_ATERM;
pub const U_SB_CLOSE = USentenceBreak.U_SB_CLOSE;
pub const U_SB_FORMAT = USentenceBreak.U_SB_FORMAT;
pub const U_SB_LOWER = USentenceBreak.U_SB_LOWER;
pub const U_SB_NUMERIC = USentenceBreak.U_SB_NUMERIC;
pub const U_SB_OLETTER = USentenceBreak.U_SB_OLETTER;
pub const U_SB_SEP = USentenceBreak.U_SB_SEP;
pub const U_SB_SP = USentenceBreak.U_SB_SP;
pub const U_SB_STERM = USentenceBreak.U_SB_STERM;
pub const U_SB_UPPER = USentenceBreak.U_SB_UPPER;
pub const U_SB_CR = USentenceBreak.U_SB_CR;
pub const U_SB_EXTEND = USentenceBreak.U_SB_EXTEND;
pub const U_SB_LF = USentenceBreak.U_SB_LF;
pub const U_SB_SCONTINUE = USentenceBreak.U_SB_SCONTINUE;

pub const ULineBreak = extern enum(i32) {
    U_LB_UNKNOWN = 0,
    U_LB_AMBIGUOUS = 1,
    U_LB_ALPHABETIC = 2,
    U_LB_BREAK_BOTH = 3,
    U_LB_BREAK_AFTER = 4,
    U_LB_BREAK_BEFORE = 5,
    U_LB_MANDATORY_BREAK = 6,
    U_LB_CONTINGENT_BREAK = 7,
    U_LB_CLOSE_PUNCTUATION = 8,
    U_LB_COMBINING_MARK = 9,
    U_LB_CARRIAGE_RETURN = 10,
    U_LB_EXCLAMATION = 11,
    U_LB_GLUE = 12,
    U_LB_HYPHEN = 13,
    U_LB_IDEOGRAPHIC = 14,
    U_LB_INSEPARABLE = 15,
    U_LB_INSEPERABLE = 15,
    U_LB_INFIX_NUMERIC = 16,
    U_LB_LINE_FEED = 17,
    U_LB_NONSTARTER = 18,
    U_LB_NUMERIC = 19,
    U_LB_OPEN_PUNCTUATION = 20,
    U_LB_POSTFIX_NUMERIC = 21,
    U_LB_PREFIX_NUMERIC = 22,
    U_LB_QUOTATION = 23,
    U_LB_COMPLEX_CONTEXT = 24,
    U_LB_SURROGATE = 25,
    U_LB_SPACE = 26,
    U_LB_BREAK_SYMBOLS = 27,
    U_LB_ZWSPACE = 28,
    U_LB_NEXT_LINE = 29,
    U_LB_WORD_JOINER = 30,
    U_LB_H2 = 31,
    U_LB_H3 = 32,
    U_LB_JL = 33,
    U_LB_JT = 34,
    U_LB_JV = 35,
    U_LB_CLOSE_PARENTHESIS = 36,
    U_LB_CONDITIONAL_JAPANESE_STARTER = 37,
    U_LB_HEBREW_LETTER = 38,
    U_LB_REGIONAL_INDICATOR = 39,
    U_LB_E_BASE = 40,
    U_LB_E_MODIFIER = 41,
    U_LB_ZWJ = 42,
};
pub const U_LB_UNKNOWN = ULineBreak.U_LB_UNKNOWN;
pub const U_LB_AMBIGUOUS = ULineBreak.U_LB_AMBIGUOUS;
pub const U_LB_ALPHABETIC = ULineBreak.U_LB_ALPHABETIC;
pub const U_LB_BREAK_BOTH = ULineBreak.U_LB_BREAK_BOTH;
pub const U_LB_BREAK_AFTER = ULineBreak.U_LB_BREAK_AFTER;
pub const U_LB_BREAK_BEFORE = ULineBreak.U_LB_BREAK_BEFORE;
pub const U_LB_MANDATORY_BREAK = ULineBreak.U_LB_MANDATORY_BREAK;
pub const U_LB_CONTINGENT_BREAK = ULineBreak.U_LB_CONTINGENT_BREAK;
pub const U_LB_CLOSE_PUNCTUATION = ULineBreak.U_LB_CLOSE_PUNCTUATION;
pub const U_LB_COMBINING_MARK = ULineBreak.U_LB_COMBINING_MARK;
pub const U_LB_CARRIAGE_RETURN = ULineBreak.U_LB_CARRIAGE_RETURN;
pub const U_LB_EXCLAMATION = ULineBreak.U_LB_EXCLAMATION;
pub const U_LB_GLUE = ULineBreak.U_LB_GLUE;
pub const U_LB_HYPHEN = ULineBreak.U_LB_HYPHEN;
pub const U_LB_IDEOGRAPHIC = ULineBreak.U_LB_IDEOGRAPHIC;
pub const U_LB_INSEPARABLE = ULineBreak.U_LB_INSEPARABLE;
pub const U_LB_INSEPERABLE = ULineBreak.U_LB_INSEPERABLE;
pub const U_LB_INFIX_NUMERIC = ULineBreak.U_LB_INFIX_NUMERIC;
pub const U_LB_LINE_FEED = ULineBreak.U_LB_LINE_FEED;
pub const U_LB_NONSTARTER = ULineBreak.U_LB_NONSTARTER;
pub const U_LB_NUMERIC = ULineBreak.U_LB_NUMERIC;
pub const U_LB_OPEN_PUNCTUATION = ULineBreak.U_LB_OPEN_PUNCTUATION;
pub const U_LB_POSTFIX_NUMERIC = ULineBreak.U_LB_POSTFIX_NUMERIC;
pub const U_LB_PREFIX_NUMERIC = ULineBreak.U_LB_PREFIX_NUMERIC;
pub const U_LB_QUOTATION = ULineBreak.U_LB_QUOTATION;
pub const U_LB_COMPLEX_CONTEXT = ULineBreak.U_LB_COMPLEX_CONTEXT;
pub const U_LB_SURROGATE = ULineBreak.U_LB_SURROGATE;
pub const U_LB_SPACE = ULineBreak.U_LB_SPACE;
pub const U_LB_BREAK_SYMBOLS = ULineBreak.U_LB_BREAK_SYMBOLS;
pub const U_LB_ZWSPACE = ULineBreak.U_LB_ZWSPACE;
pub const U_LB_NEXT_LINE = ULineBreak.U_LB_NEXT_LINE;
pub const U_LB_WORD_JOINER = ULineBreak.U_LB_WORD_JOINER;
pub const U_LB_H2 = ULineBreak.U_LB_H2;
pub const U_LB_H3 = ULineBreak.U_LB_H3;
pub const U_LB_JL = ULineBreak.U_LB_JL;
pub const U_LB_JT = ULineBreak.U_LB_JT;
pub const U_LB_JV = ULineBreak.U_LB_JV;
pub const U_LB_CLOSE_PARENTHESIS = ULineBreak.U_LB_CLOSE_PARENTHESIS;
pub const U_LB_CONDITIONAL_JAPANESE_STARTER = ULineBreak.U_LB_CONDITIONAL_JAPANESE_STARTER;
pub const U_LB_HEBREW_LETTER = ULineBreak.U_LB_HEBREW_LETTER;
pub const U_LB_REGIONAL_INDICATOR = ULineBreak.U_LB_REGIONAL_INDICATOR;
pub const U_LB_E_BASE = ULineBreak.U_LB_E_BASE;
pub const U_LB_E_MODIFIER = ULineBreak.U_LB_E_MODIFIER;
pub const U_LB_ZWJ = ULineBreak.U_LB_ZWJ;

pub const UNumericType = extern enum(i32) {
    U_NT_NONE = 0,
    U_NT_DECIMAL = 1,
    U_NT_DIGIT = 2,
    U_NT_NUMERIC = 3,
};
pub const U_NT_NONE = UNumericType.U_NT_NONE;
pub const U_NT_DECIMAL = UNumericType.U_NT_DECIMAL;
pub const U_NT_DIGIT = UNumericType.U_NT_DIGIT;
pub const U_NT_NUMERIC = UNumericType.U_NT_NUMERIC;

pub const UHangulSyllableType = extern enum(i32) {
    U_HST_NOT_APPLICABLE = 0,
    U_HST_LEADING_JAMO = 1,
    U_HST_VOWEL_JAMO = 2,
    U_HST_TRAILING_JAMO = 3,
    U_HST_LV_SYLLABLE = 4,
    U_HST_LVT_SYLLABLE = 5,
};
pub const U_HST_NOT_APPLICABLE = UHangulSyllableType.U_HST_NOT_APPLICABLE;
pub const U_HST_LEADING_JAMO = UHangulSyllableType.U_HST_LEADING_JAMO;
pub const U_HST_VOWEL_JAMO = UHangulSyllableType.U_HST_VOWEL_JAMO;
pub const U_HST_TRAILING_JAMO = UHangulSyllableType.U_HST_TRAILING_JAMO;
pub const U_HST_LV_SYLLABLE = UHangulSyllableType.U_HST_LV_SYLLABLE;
pub const U_HST_LVT_SYLLABLE = UHangulSyllableType.U_HST_LVT_SYLLABLE;

pub const UIndicPositionalCategory = extern enum(i32) {
    U_INPC_NA = 0,
    U_INPC_BOTTOM = 1,
    U_INPC_BOTTOM_AND_LEFT = 2,
    U_INPC_BOTTOM_AND_RIGHT = 3,
    U_INPC_LEFT = 4,
    U_INPC_LEFT_AND_RIGHT = 5,
    U_INPC_OVERSTRUCK = 6,
    U_INPC_RIGHT = 7,
    U_INPC_TOP = 8,
    U_INPC_TOP_AND_BOTTOM = 9,
    U_INPC_TOP_AND_BOTTOM_AND_RIGHT = 10,
    U_INPC_TOP_AND_LEFT = 11,
    U_INPC_TOP_AND_LEFT_AND_RIGHT = 12,
    U_INPC_TOP_AND_RIGHT = 13,
    U_INPC_VISUAL_ORDER_LEFT = 14,
};
pub const U_INPC_NA = UIndicPositionalCategory.U_INPC_NA;
pub const U_INPC_BOTTOM = UIndicPositionalCategory.U_INPC_BOTTOM;
pub const U_INPC_BOTTOM_AND_LEFT = UIndicPositionalCategory.U_INPC_BOTTOM_AND_LEFT;
pub const U_INPC_BOTTOM_AND_RIGHT = UIndicPositionalCategory.U_INPC_BOTTOM_AND_RIGHT;
pub const U_INPC_LEFT = UIndicPositionalCategory.U_INPC_LEFT;
pub const U_INPC_LEFT_AND_RIGHT = UIndicPositionalCategory.U_INPC_LEFT_AND_RIGHT;
pub const U_INPC_OVERSTRUCK = UIndicPositionalCategory.U_INPC_OVERSTRUCK;
pub const U_INPC_RIGHT = UIndicPositionalCategory.U_INPC_RIGHT;
pub const U_INPC_TOP = UIndicPositionalCategory.U_INPC_TOP;
pub const U_INPC_TOP_AND_BOTTOM = UIndicPositionalCategory.U_INPC_TOP_AND_BOTTOM;
pub const U_INPC_TOP_AND_BOTTOM_AND_RIGHT = UIndicPositionalCategory.U_INPC_TOP_AND_BOTTOM_AND_RIGHT;
pub const U_INPC_TOP_AND_LEFT = UIndicPositionalCategory.U_INPC_TOP_AND_LEFT;
pub const U_INPC_TOP_AND_LEFT_AND_RIGHT = UIndicPositionalCategory.U_INPC_TOP_AND_LEFT_AND_RIGHT;
pub const U_INPC_TOP_AND_RIGHT = UIndicPositionalCategory.U_INPC_TOP_AND_RIGHT;
pub const U_INPC_VISUAL_ORDER_LEFT = UIndicPositionalCategory.U_INPC_VISUAL_ORDER_LEFT;

pub const UIndicSyllabicCategory = extern enum(i32) {
    U_INSC_OTHER = 0,
    U_INSC_AVAGRAHA = 1,
    U_INSC_BINDU = 2,
    U_INSC_BRAHMI_JOINING_NUMBER = 3,
    U_INSC_CANTILLATION_MARK = 4,
    U_INSC_CONSONANT = 5,
    U_INSC_CONSONANT_DEAD = 6,
    U_INSC_CONSONANT_FINAL = 7,
    U_INSC_CONSONANT_HEAD_LETTER = 8,
    U_INSC_CONSONANT_INITIAL_POSTFIXED = 9,
    U_INSC_CONSONANT_KILLER = 10,
    U_INSC_CONSONANT_MEDIAL = 11,
    U_INSC_CONSONANT_PLACEHOLDER = 12,
    U_INSC_CONSONANT_PRECEDING_REPHA = 13,
    U_INSC_CONSONANT_PREFIXED = 14,
    U_INSC_CONSONANT_SUBJOINED = 15,
    U_INSC_CONSONANT_SUCCEEDING_REPHA = 16,
    U_INSC_CONSONANT_WITH_STACKER = 17,
    U_INSC_GEMINATION_MARK = 18,
    U_INSC_INVISIBLE_STACKER = 19,
    U_INSC_JOINER = 20,
    U_INSC_MODIFYING_LETTER = 21,
    U_INSC_NON_JOINER = 22,
    U_INSC_NUKTA = 23,
    U_INSC_NUMBER = 24,
    U_INSC_NUMBER_JOINER = 25,
    U_INSC_PURE_KILLER = 26,
    U_INSC_REGISTER_SHIFTER = 27,
    U_INSC_SYLLABLE_MODIFIER = 28,
    U_INSC_TONE_LETTER = 29,
    U_INSC_TONE_MARK = 30,
    U_INSC_VIRAMA = 31,
    U_INSC_VISARGA = 32,
    U_INSC_VOWEL = 33,
    U_INSC_VOWEL_DEPENDENT = 34,
    U_INSC_VOWEL_INDEPENDENT = 35,
};
pub const U_INSC_OTHER = UIndicSyllabicCategory.U_INSC_OTHER;
pub const U_INSC_AVAGRAHA = UIndicSyllabicCategory.U_INSC_AVAGRAHA;
pub const U_INSC_BINDU = UIndicSyllabicCategory.U_INSC_BINDU;
pub const U_INSC_BRAHMI_JOINING_NUMBER = UIndicSyllabicCategory.U_INSC_BRAHMI_JOINING_NUMBER;
pub const U_INSC_CANTILLATION_MARK = UIndicSyllabicCategory.U_INSC_CANTILLATION_MARK;
pub const U_INSC_CONSONANT = UIndicSyllabicCategory.U_INSC_CONSONANT;
pub const U_INSC_CONSONANT_DEAD = UIndicSyllabicCategory.U_INSC_CONSONANT_DEAD;
pub const U_INSC_CONSONANT_FINAL = UIndicSyllabicCategory.U_INSC_CONSONANT_FINAL;
pub const U_INSC_CONSONANT_HEAD_LETTER = UIndicSyllabicCategory.U_INSC_CONSONANT_HEAD_LETTER;
pub const U_INSC_CONSONANT_INITIAL_POSTFIXED = UIndicSyllabicCategory.U_INSC_CONSONANT_INITIAL_POSTFIXED;
pub const U_INSC_CONSONANT_KILLER = UIndicSyllabicCategory.U_INSC_CONSONANT_KILLER;
pub const U_INSC_CONSONANT_MEDIAL = UIndicSyllabicCategory.U_INSC_CONSONANT_MEDIAL;
pub const U_INSC_CONSONANT_PLACEHOLDER = UIndicSyllabicCategory.U_INSC_CONSONANT_PLACEHOLDER;
pub const U_INSC_CONSONANT_PRECEDING_REPHA = UIndicSyllabicCategory.U_INSC_CONSONANT_PRECEDING_REPHA;
pub const U_INSC_CONSONANT_PREFIXED = UIndicSyllabicCategory.U_INSC_CONSONANT_PREFIXED;
pub const U_INSC_CONSONANT_SUBJOINED = UIndicSyllabicCategory.U_INSC_CONSONANT_SUBJOINED;
pub const U_INSC_CONSONANT_SUCCEEDING_REPHA = UIndicSyllabicCategory.U_INSC_CONSONANT_SUCCEEDING_REPHA;
pub const U_INSC_CONSONANT_WITH_STACKER = UIndicSyllabicCategory.U_INSC_CONSONANT_WITH_STACKER;
pub const U_INSC_GEMINATION_MARK = UIndicSyllabicCategory.U_INSC_GEMINATION_MARK;
pub const U_INSC_INVISIBLE_STACKER = UIndicSyllabicCategory.U_INSC_INVISIBLE_STACKER;
pub const U_INSC_JOINER = UIndicSyllabicCategory.U_INSC_JOINER;
pub const U_INSC_MODIFYING_LETTER = UIndicSyllabicCategory.U_INSC_MODIFYING_LETTER;
pub const U_INSC_NON_JOINER = UIndicSyllabicCategory.U_INSC_NON_JOINER;
pub const U_INSC_NUKTA = UIndicSyllabicCategory.U_INSC_NUKTA;
pub const U_INSC_NUMBER = UIndicSyllabicCategory.U_INSC_NUMBER;
pub const U_INSC_NUMBER_JOINER = UIndicSyllabicCategory.U_INSC_NUMBER_JOINER;
pub const U_INSC_PURE_KILLER = UIndicSyllabicCategory.U_INSC_PURE_KILLER;
pub const U_INSC_REGISTER_SHIFTER = UIndicSyllabicCategory.U_INSC_REGISTER_SHIFTER;
pub const U_INSC_SYLLABLE_MODIFIER = UIndicSyllabicCategory.U_INSC_SYLLABLE_MODIFIER;
pub const U_INSC_TONE_LETTER = UIndicSyllabicCategory.U_INSC_TONE_LETTER;
pub const U_INSC_TONE_MARK = UIndicSyllabicCategory.U_INSC_TONE_MARK;
pub const U_INSC_VIRAMA = UIndicSyllabicCategory.U_INSC_VIRAMA;
pub const U_INSC_VISARGA = UIndicSyllabicCategory.U_INSC_VISARGA;
pub const U_INSC_VOWEL = UIndicSyllabicCategory.U_INSC_VOWEL;
pub const U_INSC_VOWEL_DEPENDENT = UIndicSyllabicCategory.U_INSC_VOWEL_DEPENDENT;
pub const U_INSC_VOWEL_INDEPENDENT = UIndicSyllabicCategory.U_INSC_VOWEL_INDEPENDENT;

pub const UVerticalOrientation = extern enum(i32) {
    U_VO_ROTATED = 0,
    U_VO_TRANSFORMED_ROTATED = 1,
    U_VO_TRANSFORMED_UPRIGHT = 2,
    U_VO_UPRIGHT = 3,
};
pub const U_VO_ROTATED = UVerticalOrientation.U_VO_ROTATED;
pub const U_VO_TRANSFORMED_ROTATED = UVerticalOrientation.U_VO_TRANSFORMED_ROTATED;
pub const U_VO_TRANSFORMED_UPRIGHT = UVerticalOrientation.U_VO_TRANSFORMED_UPRIGHT;
pub const U_VO_UPRIGHT = UVerticalOrientation.U_VO_UPRIGHT;

pub const UCharEnumTypeRange = fn(
    context: *const c_void,
    start: i32,
    limit: i32,
    type: UCharCategory,
) callconv(@import("std").os.windows.WINAPI) i8;

pub const UEnumCharNamesFn = fn(
    context: *c_void,
    code: i32,
    nameChoice: UCharNameChoice,
    name: *const i8,
    length: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub const UBiDiDirection = extern enum(i32) {
    UBIDI_LTR = 0,
    UBIDI_RTL = 1,
    UBIDI_MIXED = 2,
    UBIDI_NEUTRAL = 3,
};
pub const UBIDI_LTR = UBiDiDirection.UBIDI_LTR;
pub const UBIDI_RTL = UBiDiDirection.UBIDI_RTL;
pub const UBIDI_MIXED = UBiDiDirection.UBIDI_MIXED;
pub const UBIDI_NEUTRAL = UBiDiDirection.UBIDI_NEUTRAL;

pub const UBiDi = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UBiDiReorderingMode = extern enum(i32) {
    UBIDI_REORDER_DEFAULT = 0,
    UBIDI_REORDER_NUMBERS_SPECIAL = 1,
    UBIDI_REORDER_GROUP_NUMBERS_WITH_R = 2,
    UBIDI_REORDER_RUNS_ONLY = 3,
    UBIDI_REORDER_INVERSE_NUMBERS_AS_L = 4,
    UBIDI_REORDER_INVERSE_LIKE_DIRECT = 5,
    UBIDI_REORDER_INVERSE_FOR_NUMBERS_SPECIAL = 6,
};
pub const UBIDI_REORDER_DEFAULT = UBiDiReorderingMode.UBIDI_REORDER_DEFAULT;
pub const UBIDI_REORDER_NUMBERS_SPECIAL = UBiDiReorderingMode.UBIDI_REORDER_NUMBERS_SPECIAL;
pub const UBIDI_REORDER_GROUP_NUMBERS_WITH_R = UBiDiReorderingMode.UBIDI_REORDER_GROUP_NUMBERS_WITH_R;
pub const UBIDI_REORDER_RUNS_ONLY = UBiDiReorderingMode.UBIDI_REORDER_RUNS_ONLY;
pub const UBIDI_REORDER_INVERSE_NUMBERS_AS_L = UBiDiReorderingMode.UBIDI_REORDER_INVERSE_NUMBERS_AS_L;
pub const UBIDI_REORDER_INVERSE_LIKE_DIRECT = UBiDiReorderingMode.UBIDI_REORDER_INVERSE_LIKE_DIRECT;
pub const UBIDI_REORDER_INVERSE_FOR_NUMBERS_SPECIAL = UBiDiReorderingMode.UBIDI_REORDER_INVERSE_FOR_NUMBERS_SPECIAL;

pub const UBiDiReorderingOption = extern enum(i32) {
    UBIDI_OPTION_DEFAULT = 0,
    UBIDI_OPTION_INSERT_MARKS = 1,
    UBIDI_OPTION_REMOVE_CONTROLS = 2,
    UBIDI_OPTION_STREAMING = 4,
};
pub const UBIDI_OPTION_DEFAULT = UBiDiReorderingOption.UBIDI_OPTION_DEFAULT;
pub const UBIDI_OPTION_INSERT_MARKS = UBiDiReorderingOption.UBIDI_OPTION_INSERT_MARKS;
pub const UBIDI_OPTION_REMOVE_CONTROLS = UBiDiReorderingOption.UBIDI_OPTION_REMOVE_CONTROLS;
pub const UBIDI_OPTION_STREAMING = UBiDiReorderingOption.UBIDI_OPTION_STREAMING;

pub const UBiDiClassCallback = fn(
    context: *const c_void,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) UCharDirection;

pub const UBiDiOrder = extern enum(i32) {
    UBIDI_LOGICAL = 0,
    UBIDI_VISUAL = 1,
};
pub const UBIDI_LOGICAL = UBiDiOrder.UBIDI_LOGICAL;
pub const UBIDI_VISUAL = UBiDiOrder.UBIDI_VISUAL;

pub const UBiDiMirroring = extern enum(i32) {
    UBIDI_MIRRORING_OFF = 0,
    UBIDI_MIRRORING_ON = 1,
};
pub const UBIDI_MIRRORING_OFF = UBiDiMirroring.UBIDI_MIRRORING_OFF;
pub const UBIDI_MIRRORING_ON = UBiDiMirroring.UBIDI_MIRRORING_ON;

pub const UBiDiTransform = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UTextClone = fn(
    dest: *UText,
    src: *const UText,
    deep: i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UText;

pub const UTextNativeLength = fn(
    ut: *UText,
) callconv(@import("std").os.windows.WINAPI) i64;

pub const UTextAccess = fn(
    ut: *UText,
    nativeIndex: i64,
    forward: i8,
) callconv(@import("std").os.windows.WINAPI) i8;

pub const UTextExtract = fn(
    ut: *UText,
    nativeStart: i64,
    nativeLimit: i64,
    dest: *u16,
    destCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const UTextReplace = fn(
    ut: *UText,
    nativeStart: i64,
    nativeLimit: i64,
    replacementText: *const u16,
    replacmentLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const UTextCopy = fn(
    ut: *UText,
    nativeStart: i64,
    nativeLimit: i64,
    nativeDest: i64,
    move: i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub const UTextMapOffsetToNative = fn(
    ut: *const UText,
) callconv(@import("std").os.windows.WINAPI) i64;

pub const UTextMapNativeIndexToUTF16 = fn(
    ut: *const UText,
    nativeIndex: i64,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const UTextClose = fn(
    ut: *UText,
) callconv(@import("std").os.windows.WINAPI) void;

pub const UTextFuncs = extern struct {
    tableSize: i32,
    reserved1: i32,
    reserved2: i32,
    reserved3: i32,
    clone: *UTextClone,
    nativeLength: *UTextNativeLength,
    access: *UTextAccess,
    extract: *UTextExtract,
    replace: *UTextReplace,
    copy: *UTextCopy,
    mapOffsetToNative: *UTextMapOffsetToNative,
    mapNativeIndexToUTF16: *UTextMapNativeIndexToUTF16,
    close: *UTextClose,
    spare1: *UTextClose,
    spare2: *UTextClose,
    spare3: *UTextClose,
};

pub const UText = extern struct {
    magic: u32,
    flags: i32,
    providerProperties: i32,
    sizeOfStruct: i32,
    chunkNativeLimit: i64,
    extraSize: i32,
    nativeIndexingLimit: i32,
    chunkNativeStart: i64,
    chunkOffset: i32,
    chunkLength: i32,
    chunkContents: *const u16,
    pFuncs: *const UTextFuncs,
    pExtra: *c_void,
    context: *const c_void,
    p: *const c_void,
    q: *const c_void,
    r: *const c_void,
    privP: *c_void,
    a: i64,
    b: i32,
    c: i32,
    privA: i64,
    privB: i32,
    privC: i32,
};

pub const USetSpanCondition = extern enum(i32) {
    USET_SPAN_NOT_CONTAINED = 0,
    USET_SPAN_CONTAINED = 1,
    USET_SPAN_SIMPLE = 2,
};
pub const USET_SPAN_NOT_CONTAINED = USetSpanCondition.USET_SPAN_NOT_CONTAINED;
pub const USET_SPAN_CONTAINED = USetSpanCondition.USET_SPAN_CONTAINED;
pub const USET_SPAN_SIMPLE = USetSpanCondition.USET_SPAN_SIMPLE;

pub const USerializedSet = extern struct {
    array: *const u16,
    bmpLength: i32,
    length: i32,
    staticArray: [8]u16,
};

pub const UNormalization2Mode = extern enum(i32) {
    UNORM2_COMPOSE = 0,
    UNORM2_DECOMPOSE = 1,
    UNORM2_FCD = 2,
    UNORM2_COMPOSE_CONTIGUOUS = 3,
};
pub const UNORM2_COMPOSE = UNormalization2Mode.UNORM2_COMPOSE;
pub const UNORM2_DECOMPOSE = UNormalization2Mode.UNORM2_DECOMPOSE;
pub const UNORM2_FCD = UNormalization2Mode.UNORM2_FCD;
pub const UNORM2_COMPOSE_CONTIGUOUS = UNormalization2Mode.UNORM2_COMPOSE_CONTIGUOUS;

pub const UNormalizationCheckResult = extern enum(i32) {
    UNORM_NO = 0,
    UNORM_YES = 1,
    UNORM_MAYBE = 2,
};
pub const UNORM_NO = UNormalizationCheckResult.UNORM_NO;
pub const UNORM_YES = UNormalizationCheckResult.UNORM_YES;
pub const UNORM_MAYBE = UNormalizationCheckResult.UNORM_MAYBE;

pub const UNormalizer2 = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UNormalizationMode = extern enum(i32) {
    UNORM_NONE = 1,
    UNORM_NFD = 2,
    UNORM_NFKD = 3,
    UNORM_NFC = 4,
    UNORM_DEFAULT = 4,
    UNORM_NFKC = 5,
    UNORM_FCD = 6,
    UNORM_MODE_COUNT = 7,
};
pub const UNORM_NONE = UNormalizationMode.UNORM_NONE;
pub const UNORM_NFD = UNormalizationMode.UNORM_NFD;
pub const UNORM_NFKD = UNormalizationMode.UNORM_NFKD;
pub const UNORM_NFC = UNormalizationMode.UNORM_NFC;
pub const UNORM_DEFAULT = UNormalizationMode.UNORM_DEFAULT;
pub const UNORM_NFKC = UNormalizationMode.UNORM_NFKC;
pub const UNORM_FCD = UNormalizationMode.UNORM_FCD;
pub const UNORM_MODE_COUNT = UNormalizationMode.UNORM_MODE_COUNT;

pub const UConverterSelector = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UBreakIterator = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UNESCAPE_CHAR_AT = fn(
    offset: i32,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) u16;

pub const UCaseMap = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UParseError = extern struct {
    line: i32,
    offset: i32,
    preContext: [16]u16,
    postContext: [16]u16,
};

pub const UStringPrepProfile = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UStringPrepProfileType = extern enum(i32) {
    USPREP_RFC3491_NAMEPREP = 0,
    USPREP_RFC3530_NFS4_CS_PREP = 1,
    USPREP_RFC3530_NFS4_CS_PREP_CI = 2,
    USPREP_RFC3530_NFS4_CIS_PREP = 3,
    USPREP_RFC3530_NFS4_MIXED_PREP_PREFIX = 4,
    USPREP_RFC3530_NFS4_MIXED_PREP_SUFFIX = 5,
    USPREP_RFC3722_ISCSI = 6,
    USPREP_RFC3920_NODEPREP = 7,
    USPREP_RFC3920_RESOURCEPREP = 8,
    USPREP_RFC4011_MIB = 9,
    USPREP_RFC4013_SASLPREP = 10,
    USPREP_RFC4505_TRACE = 11,
    USPREP_RFC4518_LDAP = 12,
    USPREP_RFC4518_LDAP_CI = 13,
};
pub const USPREP_RFC3491_NAMEPREP = UStringPrepProfileType.USPREP_RFC3491_NAMEPREP;
pub const USPREP_RFC3530_NFS4_CS_PREP = UStringPrepProfileType.USPREP_RFC3530_NFS4_CS_PREP;
pub const USPREP_RFC3530_NFS4_CS_PREP_CI = UStringPrepProfileType.USPREP_RFC3530_NFS4_CS_PREP_CI;
pub const USPREP_RFC3530_NFS4_CIS_PREP = UStringPrepProfileType.USPREP_RFC3530_NFS4_CIS_PREP;
pub const USPREP_RFC3530_NFS4_MIXED_PREP_PREFIX = UStringPrepProfileType.USPREP_RFC3530_NFS4_MIXED_PREP_PREFIX;
pub const USPREP_RFC3530_NFS4_MIXED_PREP_SUFFIX = UStringPrepProfileType.USPREP_RFC3530_NFS4_MIXED_PREP_SUFFIX;
pub const USPREP_RFC3722_ISCSI = UStringPrepProfileType.USPREP_RFC3722_ISCSI;
pub const USPREP_RFC3920_NODEPREP = UStringPrepProfileType.USPREP_RFC3920_NODEPREP;
pub const USPREP_RFC3920_RESOURCEPREP = UStringPrepProfileType.USPREP_RFC3920_RESOURCEPREP;
pub const USPREP_RFC4011_MIB = UStringPrepProfileType.USPREP_RFC4011_MIB;
pub const USPREP_RFC4013_SASLPREP = UStringPrepProfileType.USPREP_RFC4013_SASLPREP;
pub const USPREP_RFC4505_TRACE = UStringPrepProfileType.USPREP_RFC4505_TRACE;
pub const USPREP_RFC4518_LDAP = UStringPrepProfileType.USPREP_RFC4518_LDAP;
pub const USPREP_RFC4518_LDAP_CI = UStringPrepProfileType.USPREP_RFC4518_LDAP_CI;

pub const UIDNA = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UIDNAInfo = extern struct {
    size: i16,
    isTransitionalDifferent: i8,
    reservedB3: i8,
    errors: u32,
    reservedI2: i32,
    reservedI3: i32,
};

pub const UBreakIteratorType = extern enum(i32) {
    UBRK_CHARACTER = 0,
    UBRK_WORD = 1,
    UBRK_LINE = 2,
    UBRK_SENTENCE = 3,
};
pub const UBRK_CHARACTER = UBreakIteratorType.UBRK_CHARACTER;
pub const UBRK_WORD = UBreakIteratorType.UBRK_WORD;
pub const UBRK_LINE = UBreakIteratorType.UBRK_LINE;
pub const UBRK_SENTENCE = UBreakIteratorType.UBRK_SENTENCE;

pub const UWordBreak = extern enum(i32) {
    UBRK_WORD_NONE = 0,
    UBRK_WORD_NONE_LIMIT = 100,
    UBRK_WORD_NUMBER = 100,
    UBRK_WORD_NUMBER_LIMIT = 200,
    UBRK_WORD_LETTER = 200,
    UBRK_WORD_LETTER_LIMIT = 300,
    UBRK_WORD_KANA = 300,
    UBRK_WORD_KANA_LIMIT = 400,
    UBRK_WORD_IDEO = 400,
    UBRK_WORD_IDEO_LIMIT = 500,
};
pub const UBRK_WORD_NONE = UWordBreak.UBRK_WORD_NONE;
pub const UBRK_WORD_NONE_LIMIT = UWordBreak.UBRK_WORD_NONE_LIMIT;
pub const UBRK_WORD_NUMBER = UWordBreak.UBRK_WORD_NUMBER;
pub const UBRK_WORD_NUMBER_LIMIT = UWordBreak.UBRK_WORD_NUMBER_LIMIT;
pub const UBRK_WORD_LETTER = UWordBreak.UBRK_WORD_LETTER;
pub const UBRK_WORD_LETTER_LIMIT = UWordBreak.UBRK_WORD_LETTER_LIMIT;
pub const UBRK_WORD_KANA = UWordBreak.UBRK_WORD_KANA;
pub const UBRK_WORD_KANA_LIMIT = UWordBreak.UBRK_WORD_KANA_LIMIT;
pub const UBRK_WORD_IDEO = UWordBreak.UBRK_WORD_IDEO;
pub const UBRK_WORD_IDEO_LIMIT = UWordBreak.UBRK_WORD_IDEO_LIMIT;

pub const ULineBreakTag = extern enum(i32) {
    UBRK_LINE_SOFT = 0,
    UBRK_LINE_SOFT_LIMIT = 100,
    UBRK_LINE_HARD = 100,
    UBRK_LINE_HARD_LIMIT = 200,
};
pub const UBRK_LINE_SOFT = ULineBreakTag.UBRK_LINE_SOFT;
pub const UBRK_LINE_SOFT_LIMIT = ULineBreakTag.UBRK_LINE_SOFT_LIMIT;
pub const UBRK_LINE_HARD = ULineBreakTag.UBRK_LINE_HARD;
pub const UBRK_LINE_HARD_LIMIT = ULineBreakTag.UBRK_LINE_HARD_LIMIT;

pub const USentenceBreakTag = extern enum(i32) {
    UBRK_SENTENCE_TERM = 0,
    UBRK_SENTENCE_TERM_LIMIT = 100,
    UBRK_SENTENCE_SEP = 100,
    UBRK_SENTENCE_SEP_LIMIT = 200,
};
pub const UBRK_SENTENCE_TERM = USentenceBreakTag.UBRK_SENTENCE_TERM;
pub const UBRK_SENTENCE_TERM_LIMIT = USentenceBreakTag.UBRK_SENTENCE_TERM_LIMIT;
pub const UBRK_SENTENCE_SEP = USentenceBreakTag.UBRK_SENTENCE_SEP;
pub const UBRK_SENTENCE_SEP_LIMIT = USentenceBreakTag.UBRK_SENTENCE_SEP_LIMIT;

pub const UCalendarType = extern enum(i32) {
    UCAL_TRADITIONAL = 0,
    UCAL_DEFAULT = 0,
    UCAL_GREGORIAN = 1,
};
pub const UCAL_TRADITIONAL = UCalendarType.UCAL_TRADITIONAL;
pub const UCAL_DEFAULT = UCalendarType.UCAL_DEFAULT;
pub const UCAL_GREGORIAN = UCalendarType.UCAL_GREGORIAN;

pub const UCalendarDateFields = extern enum(i32) {
    UCAL_ERA = 0,
    UCAL_YEAR = 1,
    UCAL_MONTH = 2,
    UCAL_WEEK_OF_YEAR = 3,
    UCAL_WEEK_OF_MONTH = 4,
    UCAL_DATE = 5,
    UCAL_DAY_OF_YEAR = 6,
    UCAL_DAY_OF_WEEK = 7,
    UCAL_DAY_OF_WEEK_IN_MONTH = 8,
    UCAL_AM_PM = 9,
    UCAL_HOUR = 10,
    UCAL_HOUR_OF_DAY = 11,
    UCAL_MINUTE = 12,
    UCAL_SECOND = 13,
    UCAL_MILLISECOND = 14,
    UCAL_ZONE_OFFSET = 15,
    UCAL_DST_OFFSET = 16,
    UCAL_YEAR_WOY = 17,
    UCAL_DOW_LOCAL = 18,
    UCAL_EXTENDED_YEAR = 19,
    UCAL_JULIAN_DAY = 20,
    UCAL_MILLISECONDS_IN_DAY = 21,
    UCAL_IS_LEAP_MONTH = 22,
    UCAL_FIELD_COUNT = 23,
    UCAL_DAY_OF_MONTH = 5,
};
pub const UCAL_ERA = UCalendarDateFields.UCAL_ERA;
pub const UCAL_YEAR = UCalendarDateFields.UCAL_YEAR;
pub const UCAL_MONTH = UCalendarDateFields.UCAL_MONTH;
pub const UCAL_WEEK_OF_YEAR = UCalendarDateFields.UCAL_WEEK_OF_YEAR;
pub const UCAL_WEEK_OF_MONTH = UCalendarDateFields.UCAL_WEEK_OF_MONTH;
pub const UCAL_DATE = UCalendarDateFields.UCAL_DATE;
pub const UCAL_DAY_OF_YEAR = UCalendarDateFields.UCAL_DAY_OF_YEAR;
pub const UCAL_DAY_OF_WEEK = UCalendarDateFields.UCAL_DAY_OF_WEEK;
pub const UCAL_DAY_OF_WEEK_IN_MONTH = UCalendarDateFields.UCAL_DAY_OF_WEEK_IN_MONTH;
pub const UCAL_AM_PM = UCalendarDateFields.UCAL_AM_PM;
pub const UCAL_HOUR = UCalendarDateFields.UCAL_HOUR;
pub const UCAL_HOUR_OF_DAY = UCalendarDateFields.UCAL_HOUR_OF_DAY;
pub const UCAL_MINUTE = UCalendarDateFields.UCAL_MINUTE;
pub const UCAL_SECOND = UCalendarDateFields.UCAL_SECOND;
pub const UCAL_MILLISECOND = UCalendarDateFields.UCAL_MILLISECOND;
pub const UCAL_ZONE_OFFSET = UCalendarDateFields.UCAL_ZONE_OFFSET;
pub const UCAL_DST_OFFSET = UCalendarDateFields.UCAL_DST_OFFSET;
pub const UCAL_YEAR_WOY = UCalendarDateFields.UCAL_YEAR_WOY;
pub const UCAL_DOW_LOCAL = UCalendarDateFields.UCAL_DOW_LOCAL;
pub const UCAL_EXTENDED_YEAR = UCalendarDateFields.UCAL_EXTENDED_YEAR;
pub const UCAL_JULIAN_DAY = UCalendarDateFields.UCAL_JULIAN_DAY;
pub const UCAL_MILLISECONDS_IN_DAY = UCalendarDateFields.UCAL_MILLISECONDS_IN_DAY;
pub const UCAL_IS_LEAP_MONTH = UCalendarDateFields.UCAL_IS_LEAP_MONTH;
pub const UCAL_FIELD_COUNT = UCalendarDateFields.UCAL_FIELD_COUNT;
pub const UCAL_DAY_OF_MONTH = UCalendarDateFields.UCAL_DAY_OF_MONTH;

pub const UCalendarDaysOfWeek = extern enum(i32) {
    UCAL_SUNDAY = 1,
    UCAL_MONDAY = 2,
    UCAL_TUESDAY = 3,
    UCAL_WEDNESDAY = 4,
    UCAL_THURSDAY = 5,
    UCAL_FRIDAY = 6,
    UCAL_SATURDAY = 7,
};
pub const UCAL_SUNDAY = UCalendarDaysOfWeek.UCAL_SUNDAY;
pub const UCAL_MONDAY = UCalendarDaysOfWeek.UCAL_MONDAY;
pub const UCAL_TUESDAY = UCalendarDaysOfWeek.UCAL_TUESDAY;
pub const UCAL_WEDNESDAY = UCalendarDaysOfWeek.UCAL_WEDNESDAY;
pub const UCAL_THURSDAY = UCalendarDaysOfWeek.UCAL_THURSDAY;
pub const UCAL_FRIDAY = UCalendarDaysOfWeek.UCAL_FRIDAY;
pub const UCAL_SATURDAY = UCalendarDaysOfWeek.UCAL_SATURDAY;

pub const UCalendarMonths = extern enum(i32) {
    UCAL_JANUARY = 0,
    UCAL_FEBRUARY = 1,
    UCAL_MARCH = 2,
    UCAL_APRIL = 3,
    UCAL_MAY = 4,
    UCAL_JUNE = 5,
    UCAL_JULY = 6,
    UCAL_AUGUST = 7,
    UCAL_SEPTEMBER = 8,
    UCAL_OCTOBER = 9,
    UCAL_NOVEMBER = 10,
    UCAL_DECEMBER = 11,
    UCAL_UNDECIMBER = 12,
};
pub const UCAL_JANUARY = UCalendarMonths.UCAL_JANUARY;
pub const UCAL_FEBRUARY = UCalendarMonths.UCAL_FEBRUARY;
pub const UCAL_MARCH = UCalendarMonths.UCAL_MARCH;
pub const UCAL_APRIL = UCalendarMonths.UCAL_APRIL;
pub const UCAL_MAY = UCalendarMonths.UCAL_MAY;
pub const UCAL_JUNE = UCalendarMonths.UCAL_JUNE;
pub const UCAL_JULY = UCalendarMonths.UCAL_JULY;
pub const UCAL_AUGUST = UCalendarMonths.UCAL_AUGUST;
pub const UCAL_SEPTEMBER = UCalendarMonths.UCAL_SEPTEMBER;
pub const UCAL_OCTOBER = UCalendarMonths.UCAL_OCTOBER;
pub const UCAL_NOVEMBER = UCalendarMonths.UCAL_NOVEMBER;
pub const UCAL_DECEMBER = UCalendarMonths.UCAL_DECEMBER;
pub const UCAL_UNDECIMBER = UCalendarMonths.UCAL_UNDECIMBER;

pub const UCalendarAMPMs = extern enum(i32) {
    UCAL_AM = 0,
    UCAL_PM = 1,
};
pub const UCAL_AM = UCalendarAMPMs.UCAL_AM;
pub const UCAL_PM = UCalendarAMPMs.UCAL_PM;

pub const USystemTimeZoneType = extern enum(i32) {
    UCAL_ZONE_TYPE_ANY = 0,
    UCAL_ZONE_TYPE_CANONICAL = 1,
    UCAL_ZONE_TYPE_CANONICAL_LOCATION = 2,
};
pub const UCAL_ZONE_TYPE_ANY = USystemTimeZoneType.UCAL_ZONE_TYPE_ANY;
pub const UCAL_ZONE_TYPE_CANONICAL = USystemTimeZoneType.UCAL_ZONE_TYPE_CANONICAL;
pub const UCAL_ZONE_TYPE_CANONICAL_LOCATION = USystemTimeZoneType.UCAL_ZONE_TYPE_CANONICAL_LOCATION;

pub const UCalendarDisplayNameType = extern enum(i32) {
    UCAL_STANDARD = 0,
    UCAL_SHORT_STANDARD = 1,
    UCAL_DST = 2,
    UCAL_SHORT_DST = 3,
};
pub const UCAL_STANDARD = UCalendarDisplayNameType.UCAL_STANDARD;
pub const UCAL_SHORT_STANDARD = UCalendarDisplayNameType.UCAL_SHORT_STANDARD;
pub const UCAL_DST = UCalendarDisplayNameType.UCAL_DST;
pub const UCAL_SHORT_DST = UCalendarDisplayNameType.UCAL_SHORT_DST;

pub const UCalendarAttribute = extern enum(i32) {
    UCAL_LENIENT = 0,
    UCAL_FIRST_DAY_OF_WEEK = 1,
    UCAL_MINIMAL_DAYS_IN_FIRST_WEEK = 2,
    UCAL_REPEATED_WALL_TIME = 3,
    UCAL_SKIPPED_WALL_TIME = 4,
};
pub const UCAL_LENIENT = UCalendarAttribute.UCAL_LENIENT;
pub const UCAL_FIRST_DAY_OF_WEEK = UCalendarAttribute.UCAL_FIRST_DAY_OF_WEEK;
pub const UCAL_MINIMAL_DAYS_IN_FIRST_WEEK = UCalendarAttribute.UCAL_MINIMAL_DAYS_IN_FIRST_WEEK;
pub const UCAL_REPEATED_WALL_TIME = UCalendarAttribute.UCAL_REPEATED_WALL_TIME;
pub const UCAL_SKIPPED_WALL_TIME = UCalendarAttribute.UCAL_SKIPPED_WALL_TIME;

pub const UCalendarWallTimeOption = extern enum(i32) {
    UCAL_WALLTIME_LAST = 0,
    UCAL_WALLTIME_FIRST = 1,
    UCAL_WALLTIME_NEXT_VALID = 2,
};
pub const UCAL_WALLTIME_LAST = UCalendarWallTimeOption.UCAL_WALLTIME_LAST;
pub const UCAL_WALLTIME_FIRST = UCalendarWallTimeOption.UCAL_WALLTIME_FIRST;
pub const UCAL_WALLTIME_NEXT_VALID = UCalendarWallTimeOption.UCAL_WALLTIME_NEXT_VALID;

pub const UCalendarLimitType = extern enum(i32) {
    UCAL_MINIMUM = 0,
    UCAL_MAXIMUM = 1,
    UCAL_GREATEST_MINIMUM = 2,
    UCAL_LEAST_MAXIMUM = 3,
    UCAL_ACTUAL_MINIMUM = 4,
    UCAL_ACTUAL_MAXIMUM = 5,
};
pub const UCAL_MINIMUM = UCalendarLimitType.UCAL_MINIMUM;
pub const UCAL_MAXIMUM = UCalendarLimitType.UCAL_MAXIMUM;
pub const UCAL_GREATEST_MINIMUM = UCalendarLimitType.UCAL_GREATEST_MINIMUM;
pub const UCAL_LEAST_MAXIMUM = UCalendarLimitType.UCAL_LEAST_MAXIMUM;
pub const UCAL_ACTUAL_MINIMUM = UCalendarLimitType.UCAL_ACTUAL_MINIMUM;
pub const UCAL_ACTUAL_MAXIMUM = UCalendarLimitType.UCAL_ACTUAL_MAXIMUM;

pub const UCalendarWeekdayType = extern enum(i32) {
    UCAL_WEEKDAY = 0,
    UCAL_WEEKEND = 1,
    UCAL_WEEKEND_ONSET = 2,
    UCAL_WEEKEND_CEASE = 3,
};
pub const UCAL_WEEKDAY = UCalendarWeekdayType.UCAL_WEEKDAY;
pub const UCAL_WEEKEND = UCalendarWeekdayType.UCAL_WEEKEND;
pub const UCAL_WEEKEND_ONSET = UCalendarWeekdayType.UCAL_WEEKEND_ONSET;
pub const UCAL_WEEKEND_CEASE = UCalendarWeekdayType.UCAL_WEEKEND_CEASE;

pub const UTimeZoneTransitionType = extern enum(i32) {
    UCAL_TZ_TRANSITION_NEXT = 0,
    UCAL_TZ_TRANSITION_NEXT_INCLUSIVE = 1,
    UCAL_TZ_TRANSITION_PREVIOUS = 2,
    UCAL_TZ_TRANSITION_PREVIOUS_INCLUSIVE = 3,
};
pub const UCAL_TZ_TRANSITION_NEXT = UTimeZoneTransitionType.UCAL_TZ_TRANSITION_NEXT;
pub const UCAL_TZ_TRANSITION_NEXT_INCLUSIVE = UTimeZoneTransitionType.UCAL_TZ_TRANSITION_NEXT_INCLUSIVE;
pub const UCAL_TZ_TRANSITION_PREVIOUS = UTimeZoneTransitionType.UCAL_TZ_TRANSITION_PREVIOUS;
pub const UCAL_TZ_TRANSITION_PREVIOUS_INCLUSIVE = UTimeZoneTransitionType.UCAL_TZ_TRANSITION_PREVIOUS_INCLUSIVE;

pub const UCollator = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UCollationResult = extern enum(i32) {
    UCOL_EQUAL = 0,
    UCOL_GREATER = 1,
    UCOL_LESS = -1,
};
pub const UCOL_EQUAL = UCollationResult.UCOL_EQUAL;
pub const UCOL_GREATER = UCollationResult.UCOL_GREATER;
pub const UCOL_LESS = UCollationResult.UCOL_LESS;

pub const UColAttributeValue = extern enum(i32) {
    UCOL_DEFAULT = -1,
    UCOL_PRIMARY = 0,
    UCOL_SECONDARY = 1,
    UCOL_TERTIARY = 2,
    UCOL_DEFAULT_STRENGTH = 2,
    UCOL_CE_STRENGTH_LIMIT = 3,
    UCOL_QUATERNARY = 3,
    UCOL_IDENTICAL = 15,
    UCOL_STRENGTH_LIMIT = 16,
    UCOL_OFF = 16,
    UCOL_ON = 17,
    UCOL_SHIFTED = 20,
    UCOL_NON_IGNORABLE = 21,
    UCOL_LOWER_FIRST = 24,
    UCOL_UPPER_FIRST = 25,
};
pub const UCOL_DEFAULT = UColAttributeValue.UCOL_DEFAULT;
pub const UCOL_PRIMARY = UColAttributeValue.UCOL_PRIMARY;
pub const UCOL_SECONDARY = UColAttributeValue.UCOL_SECONDARY;
pub const UCOL_TERTIARY = UColAttributeValue.UCOL_TERTIARY;
pub const UCOL_DEFAULT_STRENGTH = UColAttributeValue.UCOL_DEFAULT_STRENGTH;
pub const UCOL_CE_STRENGTH_LIMIT = UColAttributeValue.UCOL_CE_STRENGTH_LIMIT;
pub const UCOL_QUATERNARY = UColAttributeValue.UCOL_QUATERNARY;
pub const UCOL_IDENTICAL = UColAttributeValue.UCOL_IDENTICAL;
pub const UCOL_STRENGTH_LIMIT = UColAttributeValue.UCOL_STRENGTH_LIMIT;
pub const UCOL_OFF = UColAttributeValue.UCOL_OFF;
pub const UCOL_ON = UColAttributeValue.UCOL_ON;
pub const UCOL_SHIFTED = UColAttributeValue.UCOL_SHIFTED;
pub const UCOL_NON_IGNORABLE = UColAttributeValue.UCOL_NON_IGNORABLE;
pub const UCOL_LOWER_FIRST = UColAttributeValue.UCOL_LOWER_FIRST;
pub const UCOL_UPPER_FIRST = UColAttributeValue.UCOL_UPPER_FIRST;

pub const UColReorderCode = extern enum(i32) {
    UCOL_REORDER_CODE_DEFAULT = -1,
    UCOL_REORDER_CODE_NONE = 103,
    UCOL_REORDER_CODE_OTHERS = 103,
    UCOL_REORDER_CODE_SPACE = 4096,
    UCOL_REORDER_CODE_FIRST = 4096,
    UCOL_REORDER_CODE_PUNCTUATION = 4097,
    UCOL_REORDER_CODE_SYMBOL = 4098,
    UCOL_REORDER_CODE_CURRENCY = 4099,
    UCOL_REORDER_CODE_DIGIT = 4100,
};
pub const UCOL_REORDER_CODE_DEFAULT = UColReorderCode.UCOL_REORDER_CODE_DEFAULT;
pub const UCOL_REORDER_CODE_NONE = UColReorderCode.UCOL_REORDER_CODE_NONE;
pub const UCOL_REORDER_CODE_OTHERS = UColReorderCode.UCOL_REORDER_CODE_OTHERS;
pub const UCOL_REORDER_CODE_SPACE = UColReorderCode.UCOL_REORDER_CODE_SPACE;
pub const UCOL_REORDER_CODE_FIRST = UColReorderCode.UCOL_REORDER_CODE_FIRST;
pub const UCOL_REORDER_CODE_PUNCTUATION = UColReorderCode.UCOL_REORDER_CODE_PUNCTUATION;
pub const UCOL_REORDER_CODE_SYMBOL = UColReorderCode.UCOL_REORDER_CODE_SYMBOL;
pub const UCOL_REORDER_CODE_CURRENCY = UColReorderCode.UCOL_REORDER_CODE_CURRENCY;
pub const UCOL_REORDER_CODE_DIGIT = UColReorderCode.UCOL_REORDER_CODE_DIGIT;

pub const UColAttribute = extern enum(i32) {
    UCOL_FRENCH_COLLATION = 0,
    UCOL_ALTERNATE_HANDLING = 1,
    UCOL_CASE_FIRST = 2,
    UCOL_CASE_LEVEL = 3,
    UCOL_NORMALIZATION_MODE = 4,
    UCOL_DECOMPOSITION_MODE = 4,
    UCOL_STRENGTH = 5,
    UCOL_NUMERIC_COLLATION = 7,
    UCOL_ATTRIBUTE_COUNT = 8,
};
pub const UCOL_FRENCH_COLLATION = UColAttribute.UCOL_FRENCH_COLLATION;
pub const UCOL_ALTERNATE_HANDLING = UColAttribute.UCOL_ALTERNATE_HANDLING;
pub const UCOL_CASE_FIRST = UColAttribute.UCOL_CASE_FIRST;
pub const UCOL_CASE_LEVEL = UColAttribute.UCOL_CASE_LEVEL;
pub const UCOL_NORMALIZATION_MODE = UColAttribute.UCOL_NORMALIZATION_MODE;
pub const UCOL_DECOMPOSITION_MODE = UColAttribute.UCOL_DECOMPOSITION_MODE;
pub const UCOL_STRENGTH = UColAttribute.UCOL_STRENGTH;
pub const UCOL_NUMERIC_COLLATION = UColAttribute.UCOL_NUMERIC_COLLATION;
pub const UCOL_ATTRIBUTE_COUNT = UColAttribute.UCOL_ATTRIBUTE_COUNT;

pub const UColRuleOption = extern enum(i32) {
    UCOL_TAILORING_ONLY = 0,
    UCOL_FULL_RULES = 1,
};
pub const UCOL_TAILORING_ONLY = UColRuleOption.UCOL_TAILORING_ONLY;
pub const UCOL_FULL_RULES = UColRuleOption.UCOL_FULL_RULES;

pub const UColBoundMode = extern enum(i32) {
    UCOL_BOUND_LOWER = 0,
    UCOL_BOUND_UPPER = 1,
    UCOL_BOUND_UPPER_LONG = 2,
};
pub const UCOL_BOUND_LOWER = UColBoundMode.UCOL_BOUND_LOWER;
pub const UCOL_BOUND_UPPER = UColBoundMode.UCOL_BOUND_UPPER;
pub const UCOL_BOUND_UPPER_LONG = UColBoundMode.UCOL_BOUND_UPPER_LONG;

pub const UCollationElements = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UCharsetDetector = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UCharsetMatch = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UDateTimePatternField = extern enum(i32) {
    UDATPG_ERA_FIELD = 0,
    UDATPG_YEAR_FIELD = 1,
    UDATPG_QUARTER_FIELD = 2,
    UDATPG_MONTH_FIELD = 3,
    UDATPG_WEEK_OF_YEAR_FIELD = 4,
    UDATPG_WEEK_OF_MONTH_FIELD = 5,
    UDATPG_WEEKDAY_FIELD = 6,
    UDATPG_DAY_OF_YEAR_FIELD = 7,
    UDATPG_DAY_OF_WEEK_IN_MONTH_FIELD = 8,
    UDATPG_DAY_FIELD = 9,
    UDATPG_DAYPERIOD_FIELD = 10,
    UDATPG_HOUR_FIELD = 11,
    UDATPG_MINUTE_FIELD = 12,
    UDATPG_SECOND_FIELD = 13,
    UDATPG_FRACTIONAL_SECOND_FIELD = 14,
    UDATPG_ZONE_FIELD = 15,
    UDATPG_FIELD_COUNT = 16,
};
pub const UDATPG_ERA_FIELD = UDateTimePatternField.UDATPG_ERA_FIELD;
pub const UDATPG_YEAR_FIELD = UDateTimePatternField.UDATPG_YEAR_FIELD;
pub const UDATPG_QUARTER_FIELD = UDateTimePatternField.UDATPG_QUARTER_FIELD;
pub const UDATPG_MONTH_FIELD = UDateTimePatternField.UDATPG_MONTH_FIELD;
pub const UDATPG_WEEK_OF_YEAR_FIELD = UDateTimePatternField.UDATPG_WEEK_OF_YEAR_FIELD;
pub const UDATPG_WEEK_OF_MONTH_FIELD = UDateTimePatternField.UDATPG_WEEK_OF_MONTH_FIELD;
pub const UDATPG_WEEKDAY_FIELD = UDateTimePatternField.UDATPG_WEEKDAY_FIELD;
pub const UDATPG_DAY_OF_YEAR_FIELD = UDateTimePatternField.UDATPG_DAY_OF_YEAR_FIELD;
pub const UDATPG_DAY_OF_WEEK_IN_MONTH_FIELD = UDateTimePatternField.UDATPG_DAY_OF_WEEK_IN_MONTH_FIELD;
pub const UDATPG_DAY_FIELD = UDateTimePatternField.UDATPG_DAY_FIELD;
pub const UDATPG_DAYPERIOD_FIELD = UDateTimePatternField.UDATPG_DAYPERIOD_FIELD;
pub const UDATPG_HOUR_FIELD = UDateTimePatternField.UDATPG_HOUR_FIELD;
pub const UDATPG_MINUTE_FIELD = UDateTimePatternField.UDATPG_MINUTE_FIELD;
pub const UDATPG_SECOND_FIELD = UDateTimePatternField.UDATPG_SECOND_FIELD;
pub const UDATPG_FRACTIONAL_SECOND_FIELD = UDateTimePatternField.UDATPG_FRACTIONAL_SECOND_FIELD;
pub const UDATPG_ZONE_FIELD = UDateTimePatternField.UDATPG_ZONE_FIELD;
pub const UDATPG_FIELD_COUNT = UDateTimePatternField.UDATPG_FIELD_COUNT;

pub const UDateTimePGDisplayWidth = extern enum(i32) {
    UDATPG_WIDE = 0,
    UDATPG_ABBREVIATED = 1,
    UDATPG_NARROW = 2,
};
pub const UDATPG_WIDE = UDateTimePGDisplayWidth.UDATPG_WIDE;
pub const UDATPG_ABBREVIATED = UDateTimePGDisplayWidth.UDATPG_ABBREVIATED;
pub const UDATPG_NARROW = UDateTimePGDisplayWidth.UDATPG_NARROW;

pub const UDateTimePatternMatchOptions = extern enum(i32) {
    UDATPG_MATCH_NO_OPTIONS = 0,
    UDATPG_MATCH_HOUR_FIELD_LENGTH = 2048,
    UDATPG_MATCH_ALL_FIELDS_LENGTH = 65535,
};
pub const UDATPG_MATCH_NO_OPTIONS = UDateTimePatternMatchOptions.UDATPG_MATCH_NO_OPTIONS;
pub const UDATPG_MATCH_HOUR_FIELD_LENGTH = UDateTimePatternMatchOptions.UDATPG_MATCH_HOUR_FIELD_LENGTH;
pub const UDATPG_MATCH_ALL_FIELDS_LENGTH = UDateTimePatternMatchOptions.UDATPG_MATCH_ALL_FIELDS_LENGTH;

pub const UDateTimePatternConflict = extern enum(i32) {
    UDATPG_NO_CONFLICT = 0,
    UDATPG_BASE_CONFLICT = 1,
    UDATPG_CONFLICT = 2,
};
pub const UDATPG_NO_CONFLICT = UDateTimePatternConflict.UDATPG_NO_CONFLICT;
pub const UDATPG_BASE_CONFLICT = UDateTimePatternConflict.UDATPG_BASE_CONFLICT;
pub const UDATPG_CONFLICT = UDateTimePatternConflict.UDATPG_CONFLICT;

pub const UFieldPositionIterator = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UFormattableType = extern enum(i32) {
    UFMT_DATE = 0,
    UFMT_DOUBLE = 1,
    UFMT_LONG = 2,
    UFMT_STRING = 3,
    UFMT_ARRAY = 4,
    UFMT_INT64 = 5,
    UFMT_OBJECT = 6,
};
pub const UFMT_DATE = UFormattableType.UFMT_DATE;
pub const UFMT_DOUBLE = UFormattableType.UFMT_DOUBLE;
pub const UFMT_LONG = UFormattableType.UFMT_LONG;
pub const UFMT_STRING = UFormattableType.UFMT_STRING;
pub const UFMT_ARRAY = UFormattableType.UFMT_ARRAY;
pub const UFMT_INT64 = UFormattableType.UFMT_INT64;
pub const UFMT_OBJECT = UFormattableType.UFMT_OBJECT;

pub const UDateIntervalFormat = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UGender = extern enum(i32) {
    UGENDER_MALE = 0,
    UGENDER_FEMALE = 1,
    UGENDER_OTHER = 2,
};
pub const UGENDER_MALE = UGender.UGENDER_MALE;
pub const UGENDER_FEMALE = UGender.UGENDER_FEMALE;
pub const UGENDER_OTHER = UGender.UGENDER_OTHER;

pub const UGenderInfo = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UListFormatter = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const ULocaleData = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const ULocaleDataExemplarSetType = extern enum(i32) {
    ULOCDATA_ES_STANDARD = 0,
    ULOCDATA_ES_AUXILIARY = 1,
    ULOCDATA_ES_INDEX = 2,
    ULOCDATA_ES_PUNCTUATION = 3,
};
pub const ULOCDATA_ES_STANDARD = ULocaleDataExemplarSetType.ULOCDATA_ES_STANDARD;
pub const ULOCDATA_ES_AUXILIARY = ULocaleDataExemplarSetType.ULOCDATA_ES_AUXILIARY;
pub const ULOCDATA_ES_INDEX = ULocaleDataExemplarSetType.ULOCDATA_ES_INDEX;
pub const ULOCDATA_ES_PUNCTUATION = ULocaleDataExemplarSetType.ULOCDATA_ES_PUNCTUATION;

pub const ULocaleDataDelimiterType = extern enum(i32) {
    ULOCDATA_QUOTATION_START = 0,
    ULOCDATA_QUOTATION_END = 1,
    ULOCDATA_ALT_QUOTATION_START = 2,
    ULOCDATA_ALT_QUOTATION_END = 3,
};
pub const ULOCDATA_QUOTATION_START = ULocaleDataDelimiterType.ULOCDATA_QUOTATION_START;
pub const ULOCDATA_QUOTATION_END = ULocaleDataDelimiterType.ULOCDATA_QUOTATION_END;
pub const ULOCDATA_ALT_QUOTATION_START = ULocaleDataDelimiterType.ULOCDATA_ALT_QUOTATION_START;
pub const ULOCDATA_ALT_QUOTATION_END = ULocaleDataDelimiterType.ULOCDATA_ALT_QUOTATION_END;

pub const UMeasurementSystem = extern enum(i32) {
    UMS_SI = 0,
    UMS_US = 1,
    UMS_UK = 2,
};
pub const UMS_SI = UMeasurementSystem.UMS_SI;
pub const UMS_US = UMeasurementSystem.UMS_US;
pub const UMS_UK = UMeasurementSystem.UMS_UK;

pub const UNumberFormatStyle = extern enum(i32) {
    UNUM_PATTERN_DECIMAL = 0,
    UNUM_DECIMAL = 1,
    UNUM_CURRENCY = 2,
    UNUM_PERCENT = 3,
    UNUM_SCIENTIFIC = 4,
    UNUM_SPELLOUT = 5,
    UNUM_ORDINAL = 6,
    UNUM_DURATION = 7,
    UNUM_NUMBERING_SYSTEM = 8,
    UNUM_PATTERN_RULEBASED = 9,
    UNUM_CURRENCY_ISO = 10,
    UNUM_CURRENCY_PLURAL = 11,
    UNUM_CURRENCY_ACCOUNTING = 12,
    UNUM_CASH_CURRENCY = 13,
    UNUM_DECIMAL_COMPACT_SHORT = 14,
    UNUM_DECIMAL_COMPACT_LONG = 15,
    UNUM_CURRENCY_STANDARD = 16,
    UNUM_DEFAULT = 1,
    UNUM_IGNORE = 0,
};
pub const UNUM_PATTERN_DECIMAL = UNumberFormatStyle.UNUM_PATTERN_DECIMAL;
pub const UNUM_DECIMAL = UNumberFormatStyle.UNUM_DECIMAL;
pub const UNUM_CURRENCY = UNumberFormatStyle.UNUM_CURRENCY;
pub const UNUM_PERCENT = UNumberFormatStyle.UNUM_PERCENT;
pub const UNUM_SCIENTIFIC = UNumberFormatStyle.UNUM_SCIENTIFIC;
pub const UNUM_SPELLOUT = UNumberFormatStyle.UNUM_SPELLOUT;
pub const UNUM_ORDINAL = UNumberFormatStyle.UNUM_ORDINAL;
pub const UNUM_DURATION = UNumberFormatStyle.UNUM_DURATION;
pub const UNUM_NUMBERING_SYSTEM = UNumberFormatStyle.UNUM_NUMBERING_SYSTEM;
pub const UNUM_PATTERN_RULEBASED = UNumberFormatStyle.UNUM_PATTERN_RULEBASED;
pub const UNUM_CURRENCY_ISO = UNumberFormatStyle.UNUM_CURRENCY_ISO;
pub const UNUM_CURRENCY_PLURAL = UNumberFormatStyle.UNUM_CURRENCY_PLURAL;
pub const UNUM_CURRENCY_ACCOUNTING = UNumberFormatStyle.UNUM_CURRENCY_ACCOUNTING;
pub const UNUM_CASH_CURRENCY = UNumberFormatStyle.UNUM_CASH_CURRENCY;
pub const UNUM_DECIMAL_COMPACT_SHORT = UNumberFormatStyle.UNUM_DECIMAL_COMPACT_SHORT;
pub const UNUM_DECIMAL_COMPACT_LONG = UNumberFormatStyle.UNUM_DECIMAL_COMPACT_LONG;
pub const UNUM_CURRENCY_STANDARD = UNumberFormatStyle.UNUM_CURRENCY_STANDARD;
pub const UNUM_DEFAULT = UNumberFormatStyle.UNUM_DEFAULT;
pub const UNUM_IGNORE = UNumberFormatStyle.UNUM_IGNORE;

pub const UNumberFormatRoundingMode = extern enum(i32) {
    UNUM_ROUND_CEILING = 0,
    UNUM_ROUND_FLOOR = 1,
    UNUM_ROUND_DOWN = 2,
    UNUM_ROUND_UP = 3,
    UNUM_ROUND_HALFEVEN = 4,
    UNUM_ROUND_HALFDOWN = 5,
    UNUM_ROUND_HALFUP = 6,
    UNUM_ROUND_UNNECESSARY = 7,
};
pub const UNUM_ROUND_CEILING = UNumberFormatRoundingMode.UNUM_ROUND_CEILING;
pub const UNUM_ROUND_FLOOR = UNumberFormatRoundingMode.UNUM_ROUND_FLOOR;
pub const UNUM_ROUND_DOWN = UNumberFormatRoundingMode.UNUM_ROUND_DOWN;
pub const UNUM_ROUND_UP = UNumberFormatRoundingMode.UNUM_ROUND_UP;
pub const UNUM_ROUND_HALFEVEN = UNumberFormatRoundingMode.UNUM_ROUND_HALFEVEN;
pub const UNUM_ROUND_HALFDOWN = UNumberFormatRoundingMode.UNUM_ROUND_HALFDOWN;
pub const UNUM_ROUND_HALFUP = UNumberFormatRoundingMode.UNUM_ROUND_HALFUP;
pub const UNUM_ROUND_UNNECESSARY = UNumberFormatRoundingMode.UNUM_ROUND_UNNECESSARY;

pub const UNumberFormatPadPosition = extern enum(i32) {
    UNUM_PAD_BEFORE_PREFIX = 0,
    UNUM_PAD_AFTER_PREFIX = 1,
    UNUM_PAD_BEFORE_SUFFIX = 2,
    UNUM_PAD_AFTER_SUFFIX = 3,
};
pub const UNUM_PAD_BEFORE_PREFIX = UNumberFormatPadPosition.UNUM_PAD_BEFORE_PREFIX;
pub const UNUM_PAD_AFTER_PREFIX = UNumberFormatPadPosition.UNUM_PAD_AFTER_PREFIX;
pub const UNUM_PAD_BEFORE_SUFFIX = UNumberFormatPadPosition.UNUM_PAD_BEFORE_SUFFIX;
pub const UNUM_PAD_AFTER_SUFFIX = UNumberFormatPadPosition.UNUM_PAD_AFTER_SUFFIX;

pub const UNumberCompactStyle = extern enum(i32) {
    UNUM_SHORT = 0,
    UNUM_LONG = 1,
};
pub const UNUM_SHORT = UNumberCompactStyle.UNUM_SHORT;
pub const UNUM_LONG = UNumberCompactStyle.UNUM_LONG;

pub const UCurrencySpacing = extern enum(i32) {
    UNUM_CURRENCY_MATCH = 0,
    UNUM_CURRENCY_SURROUNDING_MATCH = 1,
    UNUM_CURRENCY_INSERT = 2,
    UNUM_CURRENCY_SPACING_COUNT = 3,
};
pub const UNUM_CURRENCY_MATCH = UCurrencySpacing.UNUM_CURRENCY_MATCH;
pub const UNUM_CURRENCY_SURROUNDING_MATCH = UCurrencySpacing.UNUM_CURRENCY_SURROUNDING_MATCH;
pub const UNUM_CURRENCY_INSERT = UCurrencySpacing.UNUM_CURRENCY_INSERT;
pub const UNUM_CURRENCY_SPACING_COUNT = UCurrencySpacing.UNUM_CURRENCY_SPACING_COUNT;

pub const UNumberFormatFields = extern enum(i32) {
    UNUM_INTEGER_FIELD = 0,
    UNUM_FRACTION_FIELD = 1,
    UNUM_DECIMAL_SEPARATOR_FIELD = 2,
    UNUM_EXPONENT_SYMBOL_FIELD = 3,
    UNUM_EXPONENT_SIGN_FIELD = 4,
    UNUM_EXPONENT_FIELD = 5,
    UNUM_GROUPING_SEPARATOR_FIELD = 6,
    UNUM_CURRENCY_FIELD = 7,
    UNUM_PERCENT_FIELD = 8,
    UNUM_PERMILL_FIELD = 9,
    UNUM_SIGN_FIELD = 10,
};
pub const UNUM_INTEGER_FIELD = UNumberFormatFields.UNUM_INTEGER_FIELD;
pub const UNUM_FRACTION_FIELD = UNumberFormatFields.UNUM_FRACTION_FIELD;
pub const UNUM_DECIMAL_SEPARATOR_FIELD = UNumberFormatFields.UNUM_DECIMAL_SEPARATOR_FIELD;
pub const UNUM_EXPONENT_SYMBOL_FIELD = UNumberFormatFields.UNUM_EXPONENT_SYMBOL_FIELD;
pub const UNUM_EXPONENT_SIGN_FIELD = UNumberFormatFields.UNUM_EXPONENT_SIGN_FIELD;
pub const UNUM_EXPONENT_FIELD = UNumberFormatFields.UNUM_EXPONENT_FIELD;
pub const UNUM_GROUPING_SEPARATOR_FIELD = UNumberFormatFields.UNUM_GROUPING_SEPARATOR_FIELD;
pub const UNUM_CURRENCY_FIELD = UNumberFormatFields.UNUM_CURRENCY_FIELD;
pub const UNUM_PERCENT_FIELD = UNumberFormatFields.UNUM_PERCENT_FIELD;
pub const UNUM_PERMILL_FIELD = UNumberFormatFields.UNUM_PERMILL_FIELD;
pub const UNUM_SIGN_FIELD = UNumberFormatFields.UNUM_SIGN_FIELD;

pub const UNumberFormatAttributeValue = extern enum(i32) {
    UNUM_FORMAT_ATTRIBUTE_VALUE_HIDDEN = 0,
};
pub const UNUM_FORMAT_ATTRIBUTE_VALUE_HIDDEN = UNumberFormatAttributeValue.UNUM_FORMAT_ATTRIBUTE_VALUE_HIDDEN;

pub const UNumberFormatAttribute = extern enum(i32) {
    UNUM_PARSE_INT_ONLY = 0,
    UNUM_GROUPING_USED = 1,
    UNUM_DECIMAL_ALWAYS_SHOWN = 2,
    UNUM_MAX_INTEGER_DIGITS = 3,
    UNUM_MIN_INTEGER_DIGITS = 4,
    UNUM_INTEGER_DIGITS = 5,
    UNUM_MAX_FRACTION_DIGITS = 6,
    UNUM_MIN_FRACTION_DIGITS = 7,
    UNUM_FRACTION_DIGITS = 8,
    UNUM_MULTIPLIER = 9,
    UNUM_GROUPING_SIZE = 10,
    UNUM_ROUNDING_MODE = 11,
    UNUM_ROUNDING_INCREMENT = 12,
    UNUM_FORMAT_WIDTH = 13,
    UNUM_PADDING_POSITION = 14,
    UNUM_SECONDARY_GROUPING_SIZE = 15,
    UNUM_SIGNIFICANT_DIGITS_USED = 16,
    UNUM_MIN_SIGNIFICANT_DIGITS = 17,
    UNUM_MAX_SIGNIFICANT_DIGITS = 18,
    UNUM_LENIENT_PARSE = 19,
    UNUM_PARSE_ALL_INPUT = 20,
    UNUM_SCALE = 21,
    UNUM_CURRENCY_USAGE = 23,
    UNUM_FORMAT_FAIL_IF_MORE_THAN_MAX_DIGITS = 4096,
    UNUM_PARSE_NO_EXPONENT = 4097,
    UNUM_PARSE_DECIMAL_MARK_REQUIRED = 4098,
};
pub const UNUM_PARSE_INT_ONLY = UNumberFormatAttribute.UNUM_PARSE_INT_ONLY;
pub const UNUM_GROUPING_USED = UNumberFormatAttribute.UNUM_GROUPING_USED;
pub const UNUM_DECIMAL_ALWAYS_SHOWN = UNumberFormatAttribute.UNUM_DECIMAL_ALWAYS_SHOWN;
pub const UNUM_MAX_INTEGER_DIGITS = UNumberFormatAttribute.UNUM_MAX_INTEGER_DIGITS;
pub const UNUM_MIN_INTEGER_DIGITS = UNumberFormatAttribute.UNUM_MIN_INTEGER_DIGITS;
pub const UNUM_INTEGER_DIGITS = UNumberFormatAttribute.UNUM_INTEGER_DIGITS;
pub const UNUM_MAX_FRACTION_DIGITS = UNumberFormatAttribute.UNUM_MAX_FRACTION_DIGITS;
pub const UNUM_MIN_FRACTION_DIGITS = UNumberFormatAttribute.UNUM_MIN_FRACTION_DIGITS;
pub const UNUM_FRACTION_DIGITS = UNumberFormatAttribute.UNUM_FRACTION_DIGITS;
pub const UNUM_MULTIPLIER = UNumberFormatAttribute.UNUM_MULTIPLIER;
pub const UNUM_GROUPING_SIZE = UNumberFormatAttribute.UNUM_GROUPING_SIZE;
pub const UNUM_ROUNDING_MODE = UNumberFormatAttribute.UNUM_ROUNDING_MODE;
pub const UNUM_ROUNDING_INCREMENT = UNumberFormatAttribute.UNUM_ROUNDING_INCREMENT;
pub const UNUM_FORMAT_WIDTH = UNumberFormatAttribute.UNUM_FORMAT_WIDTH;
pub const UNUM_PADDING_POSITION = UNumberFormatAttribute.UNUM_PADDING_POSITION;
pub const UNUM_SECONDARY_GROUPING_SIZE = UNumberFormatAttribute.UNUM_SECONDARY_GROUPING_SIZE;
pub const UNUM_SIGNIFICANT_DIGITS_USED = UNumberFormatAttribute.UNUM_SIGNIFICANT_DIGITS_USED;
pub const UNUM_MIN_SIGNIFICANT_DIGITS = UNumberFormatAttribute.UNUM_MIN_SIGNIFICANT_DIGITS;
pub const UNUM_MAX_SIGNIFICANT_DIGITS = UNumberFormatAttribute.UNUM_MAX_SIGNIFICANT_DIGITS;
pub const UNUM_LENIENT_PARSE = UNumberFormatAttribute.UNUM_LENIENT_PARSE;
pub const UNUM_PARSE_ALL_INPUT = UNumberFormatAttribute.UNUM_PARSE_ALL_INPUT;
pub const UNUM_SCALE = UNumberFormatAttribute.UNUM_SCALE;
pub const UNUM_CURRENCY_USAGE = UNumberFormatAttribute.UNUM_CURRENCY_USAGE;
pub const UNUM_FORMAT_FAIL_IF_MORE_THAN_MAX_DIGITS = UNumberFormatAttribute.UNUM_FORMAT_FAIL_IF_MORE_THAN_MAX_DIGITS;
pub const UNUM_PARSE_NO_EXPONENT = UNumberFormatAttribute.UNUM_PARSE_NO_EXPONENT;
pub const UNUM_PARSE_DECIMAL_MARK_REQUIRED = UNumberFormatAttribute.UNUM_PARSE_DECIMAL_MARK_REQUIRED;

pub const UNumberFormatTextAttribute = extern enum(i32) {
    UNUM_POSITIVE_PREFIX = 0,
    UNUM_POSITIVE_SUFFIX = 1,
    UNUM_NEGATIVE_PREFIX = 2,
    UNUM_NEGATIVE_SUFFIX = 3,
    UNUM_PADDING_CHARACTER = 4,
    UNUM_CURRENCY_CODE = 5,
    UNUM_DEFAULT_RULESET = 6,
    UNUM_PUBLIC_RULESETS = 7,
};
pub const UNUM_POSITIVE_PREFIX = UNumberFormatTextAttribute.UNUM_POSITIVE_PREFIX;
pub const UNUM_POSITIVE_SUFFIX = UNumberFormatTextAttribute.UNUM_POSITIVE_SUFFIX;
pub const UNUM_NEGATIVE_PREFIX = UNumberFormatTextAttribute.UNUM_NEGATIVE_PREFIX;
pub const UNUM_NEGATIVE_SUFFIX = UNumberFormatTextAttribute.UNUM_NEGATIVE_SUFFIX;
pub const UNUM_PADDING_CHARACTER = UNumberFormatTextAttribute.UNUM_PADDING_CHARACTER;
pub const UNUM_CURRENCY_CODE = UNumberFormatTextAttribute.UNUM_CURRENCY_CODE;
pub const UNUM_DEFAULT_RULESET = UNumberFormatTextAttribute.UNUM_DEFAULT_RULESET;
pub const UNUM_PUBLIC_RULESETS = UNumberFormatTextAttribute.UNUM_PUBLIC_RULESETS;

pub const UNumberFormatSymbol = extern enum(i32) {
    UNUM_DECIMAL_SEPARATOR_SYMBOL = 0,
    UNUM_GROUPING_SEPARATOR_SYMBOL = 1,
    UNUM_PATTERN_SEPARATOR_SYMBOL = 2,
    UNUM_PERCENT_SYMBOL = 3,
    UNUM_ZERO_DIGIT_SYMBOL = 4,
    UNUM_DIGIT_SYMBOL = 5,
    UNUM_MINUS_SIGN_SYMBOL = 6,
    UNUM_PLUS_SIGN_SYMBOL = 7,
    UNUM_CURRENCY_SYMBOL = 8,
    UNUM_INTL_CURRENCY_SYMBOL = 9,
    UNUM_MONETARY_SEPARATOR_SYMBOL = 10,
    UNUM_EXPONENTIAL_SYMBOL = 11,
    UNUM_PERMILL_SYMBOL = 12,
    UNUM_PAD_ESCAPE_SYMBOL = 13,
    UNUM_INFINITY_SYMBOL = 14,
    UNUM_NAN_SYMBOL = 15,
    UNUM_SIGNIFICANT_DIGIT_SYMBOL = 16,
    UNUM_MONETARY_GROUPING_SEPARATOR_SYMBOL = 17,
    UNUM_ONE_DIGIT_SYMBOL = 18,
    UNUM_TWO_DIGIT_SYMBOL = 19,
    UNUM_THREE_DIGIT_SYMBOL = 20,
    UNUM_FOUR_DIGIT_SYMBOL = 21,
    UNUM_FIVE_DIGIT_SYMBOL = 22,
    UNUM_SIX_DIGIT_SYMBOL = 23,
    UNUM_SEVEN_DIGIT_SYMBOL = 24,
    UNUM_EIGHT_DIGIT_SYMBOL = 25,
    UNUM_NINE_DIGIT_SYMBOL = 26,
    UNUM_EXPONENT_MULTIPLICATION_SYMBOL = 27,
};
pub const UNUM_DECIMAL_SEPARATOR_SYMBOL = UNumberFormatSymbol.UNUM_DECIMAL_SEPARATOR_SYMBOL;
pub const UNUM_GROUPING_SEPARATOR_SYMBOL = UNumberFormatSymbol.UNUM_GROUPING_SEPARATOR_SYMBOL;
pub const UNUM_PATTERN_SEPARATOR_SYMBOL = UNumberFormatSymbol.UNUM_PATTERN_SEPARATOR_SYMBOL;
pub const UNUM_PERCENT_SYMBOL = UNumberFormatSymbol.UNUM_PERCENT_SYMBOL;
pub const UNUM_ZERO_DIGIT_SYMBOL = UNumberFormatSymbol.UNUM_ZERO_DIGIT_SYMBOL;
pub const UNUM_DIGIT_SYMBOL = UNumberFormatSymbol.UNUM_DIGIT_SYMBOL;
pub const UNUM_MINUS_SIGN_SYMBOL = UNumberFormatSymbol.UNUM_MINUS_SIGN_SYMBOL;
pub const UNUM_PLUS_SIGN_SYMBOL = UNumberFormatSymbol.UNUM_PLUS_SIGN_SYMBOL;
pub const UNUM_CURRENCY_SYMBOL = UNumberFormatSymbol.UNUM_CURRENCY_SYMBOL;
pub const UNUM_INTL_CURRENCY_SYMBOL = UNumberFormatSymbol.UNUM_INTL_CURRENCY_SYMBOL;
pub const UNUM_MONETARY_SEPARATOR_SYMBOL = UNumberFormatSymbol.UNUM_MONETARY_SEPARATOR_SYMBOL;
pub const UNUM_EXPONENTIAL_SYMBOL = UNumberFormatSymbol.UNUM_EXPONENTIAL_SYMBOL;
pub const UNUM_PERMILL_SYMBOL = UNumberFormatSymbol.UNUM_PERMILL_SYMBOL;
pub const UNUM_PAD_ESCAPE_SYMBOL = UNumberFormatSymbol.UNUM_PAD_ESCAPE_SYMBOL;
pub const UNUM_INFINITY_SYMBOL = UNumberFormatSymbol.UNUM_INFINITY_SYMBOL;
pub const UNUM_NAN_SYMBOL = UNumberFormatSymbol.UNUM_NAN_SYMBOL;
pub const UNUM_SIGNIFICANT_DIGIT_SYMBOL = UNumberFormatSymbol.UNUM_SIGNIFICANT_DIGIT_SYMBOL;
pub const UNUM_MONETARY_GROUPING_SEPARATOR_SYMBOL = UNumberFormatSymbol.UNUM_MONETARY_GROUPING_SEPARATOR_SYMBOL;
pub const UNUM_ONE_DIGIT_SYMBOL = UNumberFormatSymbol.UNUM_ONE_DIGIT_SYMBOL;
pub const UNUM_TWO_DIGIT_SYMBOL = UNumberFormatSymbol.UNUM_TWO_DIGIT_SYMBOL;
pub const UNUM_THREE_DIGIT_SYMBOL = UNumberFormatSymbol.UNUM_THREE_DIGIT_SYMBOL;
pub const UNUM_FOUR_DIGIT_SYMBOL = UNumberFormatSymbol.UNUM_FOUR_DIGIT_SYMBOL;
pub const UNUM_FIVE_DIGIT_SYMBOL = UNumberFormatSymbol.UNUM_FIVE_DIGIT_SYMBOL;
pub const UNUM_SIX_DIGIT_SYMBOL = UNumberFormatSymbol.UNUM_SIX_DIGIT_SYMBOL;
pub const UNUM_SEVEN_DIGIT_SYMBOL = UNumberFormatSymbol.UNUM_SEVEN_DIGIT_SYMBOL;
pub const UNUM_EIGHT_DIGIT_SYMBOL = UNumberFormatSymbol.UNUM_EIGHT_DIGIT_SYMBOL;
pub const UNUM_NINE_DIGIT_SYMBOL = UNumberFormatSymbol.UNUM_NINE_DIGIT_SYMBOL;
pub const UNUM_EXPONENT_MULTIPLICATION_SYMBOL = UNumberFormatSymbol.UNUM_EXPONENT_MULTIPLICATION_SYMBOL;

pub const UDateFormatStyle = extern enum(i32) {
    UDAT_FULL = 0,
    UDAT_LONG = 1,
    UDAT_MEDIUM = 2,
    UDAT_SHORT = 3,
    UDAT_DEFAULT = 2,
    UDAT_RELATIVE = 128,
    UDAT_FULL_RELATIVE = 128,
    UDAT_LONG_RELATIVE = 129,
    UDAT_MEDIUM_RELATIVE = 130,
    UDAT_SHORT_RELATIVE = 131,
    UDAT_NONE = -1,
    UDAT_PATTERN = -2,
};
pub const UDAT_FULL = UDateFormatStyle.UDAT_FULL;
pub const UDAT_LONG = UDateFormatStyle.UDAT_LONG;
pub const UDAT_MEDIUM = UDateFormatStyle.UDAT_MEDIUM;
pub const UDAT_SHORT = UDateFormatStyle.UDAT_SHORT;
pub const UDAT_DEFAULT = UDateFormatStyle.UDAT_DEFAULT;
pub const UDAT_RELATIVE = UDateFormatStyle.UDAT_RELATIVE;
pub const UDAT_FULL_RELATIVE = UDateFormatStyle.UDAT_FULL_RELATIVE;
pub const UDAT_LONG_RELATIVE = UDateFormatStyle.UDAT_LONG_RELATIVE;
pub const UDAT_MEDIUM_RELATIVE = UDateFormatStyle.UDAT_MEDIUM_RELATIVE;
pub const UDAT_SHORT_RELATIVE = UDateFormatStyle.UDAT_SHORT_RELATIVE;
pub const UDAT_NONE = UDateFormatStyle.UDAT_NONE;
pub const UDAT_PATTERN = UDateFormatStyle.UDAT_PATTERN;

pub const UDateFormatField = extern enum(i32) {
    UDAT_ERA_FIELD = 0,
    UDAT_YEAR_FIELD = 1,
    UDAT_MONTH_FIELD = 2,
    UDAT_DATE_FIELD = 3,
    UDAT_HOUR_OF_DAY1_FIELD = 4,
    UDAT_HOUR_OF_DAY0_FIELD = 5,
    UDAT_MINUTE_FIELD = 6,
    UDAT_SECOND_FIELD = 7,
    UDAT_FRACTIONAL_SECOND_FIELD = 8,
    UDAT_DAY_OF_WEEK_FIELD = 9,
    UDAT_DAY_OF_YEAR_FIELD = 10,
    UDAT_DAY_OF_WEEK_IN_MONTH_FIELD = 11,
    UDAT_WEEK_OF_YEAR_FIELD = 12,
    UDAT_WEEK_OF_MONTH_FIELD = 13,
    UDAT_AM_PM_FIELD = 14,
    UDAT_HOUR1_FIELD = 15,
    UDAT_HOUR0_FIELD = 16,
    UDAT_TIMEZONE_FIELD = 17,
    UDAT_YEAR_WOY_FIELD = 18,
    UDAT_DOW_LOCAL_FIELD = 19,
    UDAT_EXTENDED_YEAR_FIELD = 20,
    UDAT_JULIAN_DAY_FIELD = 21,
    UDAT_MILLISECONDS_IN_DAY_FIELD = 22,
    UDAT_TIMEZONE_RFC_FIELD = 23,
    UDAT_TIMEZONE_GENERIC_FIELD = 24,
    UDAT_STANDALONE_DAY_FIELD = 25,
    UDAT_STANDALONE_MONTH_FIELD = 26,
    UDAT_QUARTER_FIELD = 27,
    UDAT_STANDALONE_QUARTER_FIELD = 28,
    UDAT_TIMEZONE_SPECIAL_FIELD = 29,
    UDAT_YEAR_NAME_FIELD = 30,
    UDAT_TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD = 31,
    UDAT_TIMEZONE_ISO_FIELD = 32,
    UDAT_TIMEZONE_ISO_LOCAL_FIELD = 33,
    UDAT_AM_PM_MIDNIGHT_NOON_FIELD = 35,
    UDAT_FLEXIBLE_DAY_PERIOD_FIELD = 36,
};
pub const UDAT_ERA_FIELD = UDateFormatField.UDAT_ERA_FIELD;
pub const UDAT_YEAR_FIELD = UDateFormatField.UDAT_YEAR_FIELD;
pub const UDAT_MONTH_FIELD = UDateFormatField.UDAT_MONTH_FIELD;
pub const UDAT_DATE_FIELD = UDateFormatField.UDAT_DATE_FIELD;
pub const UDAT_HOUR_OF_DAY1_FIELD = UDateFormatField.UDAT_HOUR_OF_DAY1_FIELD;
pub const UDAT_HOUR_OF_DAY0_FIELD = UDateFormatField.UDAT_HOUR_OF_DAY0_FIELD;
pub const UDAT_MINUTE_FIELD = UDateFormatField.UDAT_MINUTE_FIELD;
pub const UDAT_SECOND_FIELD = UDateFormatField.UDAT_SECOND_FIELD;
pub const UDAT_FRACTIONAL_SECOND_FIELD = UDateFormatField.UDAT_FRACTIONAL_SECOND_FIELD;
pub const UDAT_DAY_OF_WEEK_FIELD = UDateFormatField.UDAT_DAY_OF_WEEK_FIELD;
pub const UDAT_DAY_OF_YEAR_FIELD = UDateFormatField.UDAT_DAY_OF_YEAR_FIELD;
pub const UDAT_DAY_OF_WEEK_IN_MONTH_FIELD = UDateFormatField.UDAT_DAY_OF_WEEK_IN_MONTH_FIELD;
pub const UDAT_WEEK_OF_YEAR_FIELD = UDateFormatField.UDAT_WEEK_OF_YEAR_FIELD;
pub const UDAT_WEEK_OF_MONTH_FIELD = UDateFormatField.UDAT_WEEK_OF_MONTH_FIELD;
pub const UDAT_AM_PM_FIELD = UDateFormatField.UDAT_AM_PM_FIELD;
pub const UDAT_HOUR1_FIELD = UDateFormatField.UDAT_HOUR1_FIELD;
pub const UDAT_HOUR0_FIELD = UDateFormatField.UDAT_HOUR0_FIELD;
pub const UDAT_TIMEZONE_FIELD = UDateFormatField.UDAT_TIMEZONE_FIELD;
pub const UDAT_YEAR_WOY_FIELD = UDateFormatField.UDAT_YEAR_WOY_FIELD;
pub const UDAT_DOW_LOCAL_FIELD = UDateFormatField.UDAT_DOW_LOCAL_FIELD;
pub const UDAT_EXTENDED_YEAR_FIELD = UDateFormatField.UDAT_EXTENDED_YEAR_FIELD;
pub const UDAT_JULIAN_DAY_FIELD = UDateFormatField.UDAT_JULIAN_DAY_FIELD;
pub const UDAT_MILLISECONDS_IN_DAY_FIELD = UDateFormatField.UDAT_MILLISECONDS_IN_DAY_FIELD;
pub const UDAT_TIMEZONE_RFC_FIELD = UDateFormatField.UDAT_TIMEZONE_RFC_FIELD;
pub const UDAT_TIMEZONE_GENERIC_FIELD = UDateFormatField.UDAT_TIMEZONE_GENERIC_FIELD;
pub const UDAT_STANDALONE_DAY_FIELD = UDateFormatField.UDAT_STANDALONE_DAY_FIELD;
pub const UDAT_STANDALONE_MONTH_FIELD = UDateFormatField.UDAT_STANDALONE_MONTH_FIELD;
pub const UDAT_QUARTER_FIELD = UDateFormatField.UDAT_QUARTER_FIELD;
pub const UDAT_STANDALONE_QUARTER_FIELD = UDateFormatField.UDAT_STANDALONE_QUARTER_FIELD;
pub const UDAT_TIMEZONE_SPECIAL_FIELD = UDateFormatField.UDAT_TIMEZONE_SPECIAL_FIELD;
pub const UDAT_YEAR_NAME_FIELD = UDateFormatField.UDAT_YEAR_NAME_FIELD;
pub const UDAT_TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD = UDateFormatField.UDAT_TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD;
pub const UDAT_TIMEZONE_ISO_FIELD = UDateFormatField.UDAT_TIMEZONE_ISO_FIELD;
pub const UDAT_TIMEZONE_ISO_LOCAL_FIELD = UDateFormatField.UDAT_TIMEZONE_ISO_LOCAL_FIELD;
pub const UDAT_AM_PM_MIDNIGHT_NOON_FIELD = UDateFormatField.UDAT_AM_PM_MIDNIGHT_NOON_FIELD;
pub const UDAT_FLEXIBLE_DAY_PERIOD_FIELD = UDateFormatField.UDAT_FLEXIBLE_DAY_PERIOD_FIELD;

pub const UDateFormatBooleanAttribute = extern enum(i32) {
    UDAT_PARSE_ALLOW_WHITESPACE = 0,
    UDAT_PARSE_ALLOW_NUMERIC = 1,
    UDAT_PARSE_PARTIAL_LITERAL_MATCH = 2,
    UDAT_PARSE_MULTIPLE_PATTERNS_FOR_MATCH = 3,
    UDAT_BOOLEAN_ATTRIBUTE_COUNT = 4,
};
pub const UDAT_PARSE_ALLOW_WHITESPACE = UDateFormatBooleanAttribute.UDAT_PARSE_ALLOW_WHITESPACE;
pub const UDAT_PARSE_ALLOW_NUMERIC = UDateFormatBooleanAttribute.UDAT_PARSE_ALLOW_NUMERIC;
pub const UDAT_PARSE_PARTIAL_LITERAL_MATCH = UDateFormatBooleanAttribute.UDAT_PARSE_PARTIAL_LITERAL_MATCH;
pub const UDAT_PARSE_MULTIPLE_PATTERNS_FOR_MATCH = UDateFormatBooleanAttribute.UDAT_PARSE_MULTIPLE_PATTERNS_FOR_MATCH;
pub const UDAT_BOOLEAN_ATTRIBUTE_COUNT = UDateFormatBooleanAttribute.UDAT_BOOLEAN_ATTRIBUTE_COUNT;

pub const UDateFormatSymbolType = extern enum(i32) {
    UDAT_ERAS = 0,
    UDAT_MONTHS = 1,
    UDAT_SHORT_MONTHS = 2,
    UDAT_WEEKDAYS = 3,
    UDAT_SHORT_WEEKDAYS = 4,
    UDAT_AM_PMS = 5,
    UDAT_LOCALIZED_CHARS = 6,
    UDAT_ERA_NAMES = 7,
    UDAT_NARROW_MONTHS = 8,
    UDAT_NARROW_WEEKDAYS = 9,
    UDAT_STANDALONE_MONTHS = 10,
    UDAT_STANDALONE_SHORT_MONTHS = 11,
    UDAT_STANDALONE_NARROW_MONTHS = 12,
    UDAT_STANDALONE_WEEKDAYS = 13,
    UDAT_STANDALONE_SHORT_WEEKDAYS = 14,
    UDAT_STANDALONE_NARROW_WEEKDAYS = 15,
    UDAT_QUARTERS = 16,
    UDAT_SHORT_QUARTERS = 17,
    UDAT_STANDALONE_QUARTERS = 18,
    UDAT_STANDALONE_SHORT_QUARTERS = 19,
    UDAT_SHORTER_WEEKDAYS = 20,
    UDAT_STANDALONE_SHORTER_WEEKDAYS = 21,
    UDAT_CYCLIC_YEARS_WIDE = 22,
    UDAT_CYCLIC_YEARS_ABBREVIATED = 23,
    UDAT_CYCLIC_YEARS_NARROW = 24,
    UDAT_ZODIAC_NAMES_WIDE = 25,
    UDAT_ZODIAC_NAMES_ABBREVIATED = 26,
    UDAT_ZODIAC_NAMES_NARROW = 27,
};
pub const UDAT_ERAS = UDateFormatSymbolType.UDAT_ERAS;
pub const UDAT_MONTHS = UDateFormatSymbolType.UDAT_MONTHS;
pub const UDAT_SHORT_MONTHS = UDateFormatSymbolType.UDAT_SHORT_MONTHS;
pub const UDAT_WEEKDAYS = UDateFormatSymbolType.UDAT_WEEKDAYS;
pub const UDAT_SHORT_WEEKDAYS = UDateFormatSymbolType.UDAT_SHORT_WEEKDAYS;
pub const UDAT_AM_PMS = UDateFormatSymbolType.UDAT_AM_PMS;
pub const UDAT_LOCALIZED_CHARS = UDateFormatSymbolType.UDAT_LOCALIZED_CHARS;
pub const UDAT_ERA_NAMES = UDateFormatSymbolType.UDAT_ERA_NAMES;
pub const UDAT_NARROW_MONTHS = UDateFormatSymbolType.UDAT_NARROW_MONTHS;
pub const UDAT_NARROW_WEEKDAYS = UDateFormatSymbolType.UDAT_NARROW_WEEKDAYS;
pub const UDAT_STANDALONE_MONTHS = UDateFormatSymbolType.UDAT_STANDALONE_MONTHS;
pub const UDAT_STANDALONE_SHORT_MONTHS = UDateFormatSymbolType.UDAT_STANDALONE_SHORT_MONTHS;
pub const UDAT_STANDALONE_NARROW_MONTHS = UDateFormatSymbolType.UDAT_STANDALONE_NARROW_MONTHS;
pub const UDAT_STANDALONE_WEEKDAYS = UDateFormatSymbolType.UDAT_STANDALONE_WEEKDAYS;
pub const UDAT_STANDALONE_SHORT_WEEKDAYS = UDateFormatSymbolType.UDAT_STANDALONE_SHORT_WEEKDAYS;
pub const UDAT_STANDALONE_NARROW_WEEKDAYS = UDateFormatSymbolType.UDAT_STANDALONE_NARROW_WEEKDAYS;
pub const UDAT_QUARTERS = UDateFormatSymbolType.UDAT_QUARTERS;
pub const UDAT_SHORT_QUARTERS = UDateFormatSymbolType.UDAT_SHORT_QUARTERS;
pub const UDAT_STANDALONE_QUARTERS = UDateFormatSymbolType.UDAT_STANDALONE_QUARTERS;
pub const UDAT_STANDALONE_SHORT_QUARTERS = UDateFormatSymbolType.UDAT_STANDALONE_SHORT_QUARTERS;
pub const UDAT_SHORTER_WEEKDAYS = UDateFormatSymbolType.UDAT_SHORTER_WEEKDAYS;
pub const UDAT_STANDALONE_SHORTER_WEEKDAYS = UDateFormatSymbolType.UDAT_STANDALONE_SHORTER_WEEKDAYS;
pub const UDAT_CYCLIC_YEARS_WIDE = UDateFormatSymbolType.UDAT_CYCLIC_YEARS_WIDE;
pub const UDAT_CYCLIC_YEARS_ABBREVIATED = UDateFormatSymbolType.UDAT_CYCLIC_YEARS_ABBREVIATED;
pub const UDAT_CYCLIC_YEARS_NARROW = UDateFormatSymbolType.UDAT_CYCLIC_YEARS_NARROW;
pub const UDAT_ZODIAC_NAMES_WIDE = UDateFormatSymbolType.UDAT_ZODIAC_NAMES_WIDE;
pub const UDAT_ZODIAC_NAMES_ABBREVIATED = UDateFormatSymbolType.UDAT_ZODIAC_NAMES_ABBREVIATED;
pub const UDAT_ZODIAC_NAMES_NARROW = UDateFormatSymbolType.UDAT_ZODIAC_NAMES_NARROW;

pub const UDateFormatSymbols = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UNumberFormatter = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UFormattedNumber = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UNumberingSystem = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UPluralType = extern enum(i32) {
    UPLURAL_TYPE_CARDINAL = 0,
    UPLURAL_TYPE_ORDINAL = 1,
};
pub const UPLURAL_TYPE_CARDINAL = UPluralType.UPLURAL_TYPE_CARDINAL;
pub const UPLURAL_TYPE_ORDINAL = UPluralType.UPLURAL_TYPE_ORDINAL;

pub const UPluralRules = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const URegularExpression = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const URegexpFlag = extern enum(i32) {
    UREGEX_CASE_INSENSITIVE = 2,
    UREGEX_COMMENTS = 4,
    UREGEX_DOTALL = 32,
    UREGEX_LITERAL = 16,
    UREGEX_MULTILINE = 8,
    UREGEX_UNIX_LINES = 1,
    UREGEX_UWORD = 256,
    UREGEX_ERROR_ON_UNKNOWN_ESCAPES = 512,
};
pub const UREGEX_CASE_INSENSITIVE = URegexpFlag.UREGEX_CASE_INSENSITIVE;
pub const UREGEX_COMMENTS = URegexpFlag.UREGEX_COMMENTS;
pub const UREGEX_DOTALL = URegexpFlag.UREGEX_DOTALL;
pub const UREGEX_LITERAL = URegexpFlag.UREGEX_LITERAL;
pub const UREGEX_MULTILINE = URegexpFlag.UREGEX_MULTILINE;
pub const UREGEX_UNIX_LINES = URegexpFlag.UREGEX_UNIX_LINES;
pub const UREGEX_UWORD = URegexpFlag.UREGEX_UWORD;
pub const UREGEX_ERROR_ON_UNKNOWN_ESCAPES = URegexpFlag.UREGEX_ERROR_ON_UNKNOWN_ESCAPES;

pub const URegexMatchCallback = fn(
    context: *const c_void,
    steps: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub const URegexFindProgressCallback = fn(
    context: *const c_void,
    matchIndex: i64,
) callconv(@import("std").os.windows.WINAPI) i8;

pub const URegionType = extern enum(i32) {
    URGN_UNKNOWN = 0,
    URGN_TERRITORY = 1,
    URGN_WORLD = 2,
    URGN_CONTINENT = 3,
    URGN_SUBCONTINENT = 4,
    URGN_GROUPING = 5,
    URGN_DEPRECATED = 6,
};
pub const URGN_UNKNOWN = URegionType.URGN_UNKNOWN;
pub const URGN_TERRITORY = URegionType.URGN_TERRITORY;
pub const URGN_WORLD = URegionType.URGN_WORLD;
pub const URGN_CONTINENT = URegionType.URGN_CONTINENT;
pub const URGN_SUBCONTINENT = URegionType.URGN_SUBCONTINENT;
pub const URGN_GROUPING = URegionType.URGN_GROUPING;
pub const URGN_DEPRECATED = URegionType.URGN_DEPRECATED;

pub const URegion = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UDateRelativeDateTimeFormatterStyle = extern enum(i32) {
    UDAT_STYLE_LONG = 0,
    UDAT_STYLE_SHORT = 1,
    UDAT_STYLE_NARROW = 2,
};
pub const UDAT_STYLE_LONG = UDateRelativeDateTimeFormatterStyle.UDAT_STYLE_LONG;
pub const UDAT_STYLE_SHORT = UDateRelativeDateTimeFormatterStyle.UDAT_STYLE_SHORT;
pub const UDAT_STYLE_NARROW = UDateRelativeDateTimeFormatterStyle.UDAT_STYLE_NARROW;

pub const URelativeDateTimeUnit = extern enum(i32) {
    UDAT_REL_UNIT_YEAR = 0,
    UDAT_REL_UNIT_QUARTER = 1,
    UDAT_REL_UNIT_MONTH = 2,
    UDAT_REL_UNIT_WEEK = 3,
    UDAT_REL_UNIT_DAY = 4,
    UDAT_REL_UNIT_HOUR = 5,
    UDAT_REL_UNIT_MINUTE = 6,
    UDAT_REL_UNIT_SECOND = 7,
    UDAT_REL_UNIT_SUNDAY = 8,
    UDAT_REL_UNIT_MONDAY = 9,
    UDAT_REL_UNIT_TUESDAY = 10,
    UDAT_REL_UNIT_WEDNESDAY = 11,
    UDAT_REL_UNIT_THURSDAY = 12,
    UDAT_REL_UNIT_FRIDAY = 13,
    UDAT_REL_UNIT_SATURDAY = 14,
};
pub const UDAT_REL_UNIT_YEAR = URelativeDateTimeUnit.UDAT_REL_UNIT_YEAR;
pub const UDAT_REL_UNIT_QUARTER = URelativeDateTimeUnit.UDAT_REL_UNIT_QUARTER;
pub const UDAT_REL_UNIT_MONTH = URelativeDateTimeUnit.UDAT_REL_UNIT_MONTH;
pub const UDAT_REL_UNIT_WEEK = URelativeDateTimeUnit.UDAT_REL_UNIT_WEEK;
pub const UDAT_REL_UNIT_DAY = URelativeDateTimeUnit.UDAT_REL_UNIT_DAY;
pub const UDAT_REL_UNIT_HOUR = URelativeDateTimeUnit.UDAT_REL_UNIT_HOUR;
pub const UDAT_REL_UNIT_MINUTE = URelativeDateTimeUnit.UDAT_REL_UNIT_MINUTE;
pub const UDAT_REL_UNIT_SECOND = URelativeDateTimeUnit.UDAT_REL_UNIT_SECOND;
pub const UDAT_REL_UNIT_SUNDAY = URelativeDateTimeUnit.UDAT_REL_UNIT_SUNDAY;
pub const UDAT_REL_UNIT_MONDAY = URelativeDateTimeUnit.UDAT_REL_UNIT_MONDAY;
pub const UDAT_REL_UNIT_TUESDAY = URelativeDateTimeUnit.UDAT_REL_UNIT_TUESDAY;
pub const UDAT_REL_UNIT_WEDNESDAY = URelativeDateTimeUnit.UDAT_REL_UNIT_WEDNESDAY;
pub const UDAT_REL_UNIT_THURSDAY = URelativeDateTimeUnit.UDAT_REL_UNIT_THURSDAY;
pub const UDAT_REL_UNIT_FRIDAY = URelativeDateTimeUnit.UDAT_REL_UNIT_FRIDAY;
pub const UDAT_REL_UNIT_SATURDAY = URelativeDateTimeUnit.UDAT_REL_UNIT_SATURDAY;

pub const URelativeDateTimeFormatter = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const UStringSearch = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const USearchAttribute = extern enum(i32) {
    USEARCH_OVERLAP = 0,
    USEARCH_ELEMENT_COMPARISON = 2,
};
pub const USEARCH_OVERLAP = USearchAttribute.USEARCH_OVERLAP;
pub const USEARCH_ELEMENT_COMPARISON = USearchAttribute.USEARCH_ELEMENT_COMPARISON;

pub const USearchAttributeValue = extern enum(i32) {
    USEARCH_DEFAULT = -1,
    USEARCH_OFF = 0,
    USEARCH_ON = 1,
    USEARCH_STANDARD_ELEMENT_COMPARISON = 2,
    USEARCH_PATTERN_BASE_WEIGHT_IS_WILDCARD = 3,
    USEARCH_ANY_BASE_WEIGHT_IS_WILDCARD = 4,
};
pub const USEARCH_DEFAULT = USearchAttributeValue.USEARCH_DEFAULT;
pub const USEARCH_OFF = USearchAttributeValue.USEARCH_OFF;
pub const USEARCH_ON = USearchAttributeValue.USEARCH_ON;
pub const USEARCH_STANDARD_ELEMENT_COMPARISON = USearchAttributeValue.USEARCH_STANDARD_ELEMENT_COMPARISON;
pub const USEARCH_PATTERN_BASE_WEIGHT_IS_WILDCARD = USearchAttributeValue.USEARCH_PATTERN_BASE_WEIGHT_IS_WILDCARD;
pub const USEARCH_ANY_BASE_WEIGHT_IS_WILDCARD = USearchAttributeValue.USEARCH_ANY_BASE_WEIGHT_IS_WILDCARD;

pub const USpoofChecker = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const USpoofCheckResult = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const USpoofChecks = extern enum(i32) {
    USPOOF_SINGLE_SCRIPT_CONFUSABLE = 1,
    USPOOF_MIXED_SCRIPT_CONFUSABLE = 2,
    USPOOF_WHOLE_SCRIPT_CONFUSABLE = 4,
    USPOOF_CONFUSABLE = 7,
    USPOOF_RESTRICTION_LEVEL = 16,
    USPOOF_INVISIBLE = 32,
    USPOOF_CHAR_LIMIT = 64,
    USPOOF_MIXED_NUMBERS = 128,
    USPOOF_ALL_CHECKS = 65535,
    USPOOF_AUX_INFO = 1073741824,
};
pub const USPOOF_SINGLE_SCRIPT_CONFUSABLE = USpoofChecks.USPOOF_SINGLE_SCRIPT_CONFUSABLE;
pub const USPOOF_MIXED_SCRIPT_CONFUSABLE = USpoofChecks.USPOOF_MIXED_SCRIPT_CONFUSABLE;
pub const USPOOF_WHOLE_SCRIPT_CONFUSABLE = USpoofChecks.USPOOF_WHOLE_SCRIPT_CONFUSABLE;
pub const USPOOF_CONFUSABLE = USpoofChecks.USPOOF_CONFUSABLE;
pub const USPOOF_RESTRICTION_LEVEL = USpoofChecks.USPOOF_RESTRICTION_LEVEL;
pub const USPOOF_INVISIBLE = USpoofChecks.USPOOF_INVISIBLE;
pub const USPOOF_CHAR_LIMIT = USpoofChecks.USPOOF_CHAR_LIMIT;
pub const USPOOF_MIXED_NUMBERS = USpoofChecks.USPOOF_MIXED_NUMBERS;
pub const USPOOF_ALL_CHECKS = USpoofChecks.USPOOF_ALL_CHECKS;
pub const USPOOF_AUX_INFO = USpoofChecks.USPOOF_AUX_INFO;

pub const URestrictionLevel = extern enum(i32) {
    USPOOF_ASCII = 268435456,
    USPOOF_SINGLE_SCRIPT_RESTRICTIVE = 536870912,
    USPOOF_HIGHLY_RESTRICTIVE = 805306368,
    USPOOF_MODERATELY_RESTRICTIVE = 1073741824,
    USPOOF_MINIMALLY_RESTRICTIVE = 1342177280,
    USPOOF_UNRESTRICTIVE = 1610612736,
    USPOOF_RESTRICTION_LEVEL_MASK = 2130706432,
};
pub const USPOOF_ASCII = URestrictionLevel.USPOOF_ASCII;
pub const USPOOF_SINGLE_SCRIPT_RESTRICTIVE = URestrictionLevel.USPOOF_SINGLE_SCRIPT_RESTRICTIVE;
pub const USPOOF_HIGHLY_RESTRICTIVE = URestrictionLevel.USPOOF_HIGHLY_RESTRICTIVE;
pub const USPOOF_MODERATELY_RESTRICTIVE = URestrictionLevel.USPOOF_MODERATELY_RESTRICTIVE;
pub const USPOOF_MINIMALLY_RESTRICTIVE = URestrictionLevel.USPOOF_MINIMALLY_RESTRICTIVE;
pub const USPOOF_UNRESTRICTIVE = URestrictionLevel.USPOOF_UNRESTRICTIVE;
pub const USPOOF_RESTRICTION_LEVEL_MASK = URestrictionLevel.USPOOF_RESTRICTION_LEVEL_MASK;

pub const UDateTimeScale = extern enum(i32) {
    UDTS_JAVA_TIME = 0,
    UDTS_UNIX_TIME = 1,
    UDTS_ICU4C_TIME = 2,
    UDTS_WINDOWS_FILE_TIME = 3,
    UDTS_DOTNET_DATE_TIME = 4,
    UDTS_MAC_OLD_TIME = 5,
    UDTS_MAC_TIME = 6,
    UDTS_EXCEL_TIME = 7,
    UDTS_DB2_TIME = 8,
    UDTS_UNIX_MICROSECONDS_TIME = 9,
};
pub const UDTS_JAVA_TIME = UDateTimeScale.UDTS_JAVA_TIME;
pub const UDTS_UNIX_TIME = UDateTimeScale.UDTS_UNIX_TIME;
pub const UDTS_ICU4C_TIME = UDateTimeScale.UDTS_ICU4C_TIME;
pub const UDTS_WINDOWS_FILE_TIME = UDateTimeScale.UDTS_WINDOWS_FILE_TIME;
pub const UDTS_DOTNET_DATE_TIME = UDateTimeScale.UDTS_DOTNET_DATE_TIME;
pub const UDTS_MAC_OLD_TIME = UDateTimeScale.UDTS_MAC_OLD_TIME;
pub const UDTS_MAC_TIME = UDateTimeScale.UDTS_MAC_TIME;
pub const UDTS_EXCEL_TIME = UDateTimeScale.UDTS_EXCEL_TIME;
pub const UDTS_DB2_TIME = UDateTimeScale.UDTS_DB2_TIME;
pub const UDTS_UNIX_MICROSECONDS_TIME = UDateTimeScale.UDTS_UNIX_MICROSECONDS_TIME;

pub const UTimeScaleValue = extern enum(i32) {
    UTSV_UNITS_VALUE = 0,
    UTSV_EPOCH_OFFSET_VALUE = 1,
    UTSV_FROM_MIN_VALUE = 2,
    UTSV_FROM_MAX_VALUE = 3,
    UTSV_TO_MIN_VALUE = 4,
    UTSV_TO_MAX_VALUE = 5,
};
pub const UTSV_UNITS_VALUE = UTimeScaleValue.UTSV_UNITS_VALUE;
pub const UTSV_EPOCH_OFFSET_VALUE = UTimeScaleValue.UTSV_EPOCH_OFFSET_VALUE;
pub const UTSV_FROM_MIN_VALUE = UTimeScaleValue.UTSV_FROM_MIN_VALUE;
pub const UTSV_FROM_MAX_VALUE = UTimeScaleValue.UTSV_FROM_MAX_VALUE;
pub const UTSV_TO_MIN_VALUE = UTimeScaleValue.UTSV_TO_MIN_VALUE;
pub const UTSV_TO_MAX_VALUE = UTimeScaleValue.UTSV_TO_MAX_VALUE;

pub const UTransDirection = extern enum(i32) {
    UTRANS_FORWARD = 0,
    UTRANS_REVERSE = 1,
};
pub const UTRANS_FORWARD = UTransDirection.UTRANS_FORWARD;
pub const UTRANS_REVERSE = UTransDirection.UTRANS_REVERSE;

pub const UTransPosition = extern struct {
    contextStart: i32,
    contextLimit: i32,
    start: i32,
    limit: i32,
};

pub const FONTSIGNATURE = extern struct {
    fsUsb: [4]u32,
    fsCsb: [2]u32,
};

pub const CHARSETINFO = extern struct {
    ciCharset: u32,
    ciACP: u32,
    fs: FONTSIGNATURE,
};

pub const LOCALESIGNATURE = extern struct {
    lsUsb: [4]u32,
    lsCsbDefault: [2]u32,
    lsCsbSupported: [2]u32,
};


//--------------------------------------------------------------------------------
// Section: Functions (1225)
//--------------------------------------------------------------------------------
pub extern "KERNEL32" fn GetDateFormatA(
    Locale: u32,
    dwFlags: u32,
    lpDate: ?*const SYSTEMTIME,
    lpFormat: ?[*:0]const u8,
    lpDateStr: ?[*:0]u8,
    cchDate: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetDateFormatW(
    Locale: u32,
    dwFlags: u32,
    lpDate: ?*const SYSTEMTIME,
    lpFormat: ?[*:0]const u16,
    lpDateStr: ?[*:0]u16,
    cchDate: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetTimeFormatA(
    Locale: u32,
    dwFlags: u32,
    lpTime: ?*const SYSTEMTIME,
    lpFormat: ?[*:0]const u8,
    lpTimeStr: ?[*:0]u8,
    cchTime: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetTimeFormatW(
    Locale: u32,
    dwFlags: u32,
    lpTime: ?*const SYSTEMTIME,
    lpFormat: ?[*:0]const u16,
    lpTimeStr: ?[*:0]u16,
    cchTime: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetTimeFormatEx(
    lpLocaleName: ?[*:0]const u16,
    dwFlags: u32,
    lpTime: ?*const SYSTEMTIME,
    lpFormat: ?[*:0]const u16,
    lpTimeStr: ?[*:0]u16,
    cchTime: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetDateFormatEx(
    lpLocaleName: ?[*:0]const u16,
    dwFlags: u32,
    lpDate: ?*const SYSTEMTIME,
    lpFormat: ?[*:0]const u16,
    lpDateStr: ?[*:0]u16,
    cchDate: i32,
    lpCalendar: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetDurationFormatEx(
    lpLocaleName: ?[*:0]const u16,
    dwFlags: u32,
    lpDuration: ?*const SYSTEMTIME,
    ullDuration: u64,
    lpFormat: ?[*:0]const u16,
    lpDurationStr: ?[*:0]u16,
    cchDuration: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn CompareStringEx(
    lpLocaleName: ?[*:0]const u16,
    dwCmpFlags: u32,
    lpString1: [*:0]const u16,
    cchCount1: i32,
    lpString2: [*:0]const u16,
    cchCount2: i32,
    lpVersionInformation: *NLSVERSIONINFO,
    lpReserved: *c_void,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn CompareStringOrdinal(
    lpString1: [*:0]const u16,
    cchCount1: i32,
    lpString2: [*:0]const u16,
    cchCount2: i32,
    bIgnoreCase: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn CompareStringW(
    Locale: u32,
    dwCmpFlags: u32,
    lpString1: [*:0]u16,
    cchCount1: i32,
    lpString2: [*:0]u16,
    cchCount2: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn FoldStringW(
    dwMapFlags: u32,
    lpSrcStr: [*:0]const u16,
    cchSrc: i32,
    lpDestStr: ?[*:0]u16,
    cchDest: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetStringTypeExW(
    Locale: u32,
    dwInfoType: u32,
    lpSrcStr: [*:0]const u16,
    cchSrc: i32,
    lpCharType: [*:0]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetStringTypeW(
    dwInfoType: u32,
    lpSrcStr: [*:0]const u16,
    cchSrc: i32,
    lpCharType: *u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn MultiByteToWideChar(
    CodePage: u32,
    dwFlags: u32,
    lpMultiByteStr: [*]const u8,
    cbMultiByte: i32,
    lpWideCharStr: ?[*:0]u16,
    cchWideChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn WideCharToMultiByte(
    CodePage: u32,
    dwFlags: u32,
    lpWideCharStr: [*:0]const u16,
    cchWideChar: i32,
    lpMultiByteStr: ?[*:0]u8,
    cbMultiByte: i32,
    lpDefaultChar: ?[*]const u8,
    lpUsedDefaultChar: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn IsValidCodePage(
    CodePage: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetACP(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "KERNEL32" fn GetOEMCP(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "KERNEL32" fn GetCPInfo(
    CodePage: u32,
    lpCPInfo: *CPINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetCPInfoExA(
    CodePage: u32,
    dwFlags: u32,
    lpCPInfoEx: *CPINFOEXA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetCPInfoExW(
    CodePage: u32,
    dwFlags: u32,
    lpCPInfoEx: *CPINFOEXW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn CompareStringA(
    Locale: u32,
    dwCmpFlags: u32,
    lpString1: [*]i8,
    cchCount1: i32,
    lpString2: [*]i8,
    cchCount2: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn FindNLSString(
    Locale: u32,
    dwFindNLSStringFlags: u32,
    lpStringSource: [*:0]const u16,
    cchSource: i32,
    lpStringValue: [*:0]const u16,
    cchValue: i32,
    pcchFound: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn LCMapStringW(
    Locale: u32,
    dwMapFlags: u32,
    lpSrcStr: [*:0]const u16,
    cchSrc: i32,
    lpDestStr: ?PWSTR,
    cchDest: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn LCMapStringA(
    Locale: u32,
    dwMapFlags: u32,
    lpSrcStr: [*:0]const u8,
    cchSrc: i32,
    lpDestStr: ?PSTR,
    cchDest: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetLocaleInfoW(
    Locale: u32,
    LCType: u32,
    lpLCData: ?[*:0]u16,
    cchData: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetLocaleInfoA(
    Locale: u32,
    LCType: u32,
    lpLCData: ?[*:0]u8,
    cchData: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn SetLocaleInfoA(
    Locale: u32,
    LCType: u32,
    lpLCData: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn SetLocaleInfoW(
    Locale: u32,
    LCType: u32,
    lpLCData: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetCalendarInfoA(
    Locale: u32,
    Calendar: u32,
    CalType: u32,
    lpCalData: ?[*:0]u8,
    cchData: i32,
    lpValue: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetCalendarInfoW(
    Locale: u32,
    Calendar: u32,
    CalType: u32,
    lpCalData: ?[*:0]u16,
    cchData: i32,
    lpValue: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn SetCalendarInfoA(
    Locale: u32,
    Calendar: u32,
    CalType: u32,
    lpCalData: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn SetCalendarInfoW(
    Locale: u32,
    Calendar: u32,
    CalType: u32,
    lpCalData: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn IsDBCSLeadByte(
    TestChar: u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn IsDBCSLeadByteEx(
    CodePage: u32,
    TestChar: u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn LocaleNameToLCID(
    lpName: [*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "KERNEL32" fn LCIDToLocaleName(
    Locale: u32,
    lpName: ?[*:0]u16,
    cchName: i32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetDurationFormat(
    Locale: u32,
    dwFlags: u32,
    lpDuration: ?*const SYSTEMTIME,
    ullDuration: u64,
    lpFormat: ?[*:0]const u16,
    lpDurationStr: ?[*:0]u16,
    cchDuration: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetNumberFormatA(
    Locale: u32,
    dwFlags: u32,
    lpValue: [*:0]const u8,
    lpFormat: ?*const NUMBERFMTA,
    lpNumberStr: ?[*:0]u8,
    cchNumber: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetNumberFormatW(
    Locale: u32,
    dwFlags: u32,
    lpValue: [*:0]const u16,
    lpFormat: ?*const NUMBERFMTW,
    lpNumberStr: ?[*:0]u16,
    cchNumber: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetCurrencyFormatA(
    Locale: u32,
    dwFlags: u32,
    lpValue: [*:0]const u8,
    lpFormat: ?*const CURRENCYFMTA,
    lpCurrencyStr: ?[*:0]u8,
    cchCurrency: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetCurrencyFormatW(
    Locale: u32,
    dwFlags: u32,
    lpValue: [*:0]const u16,
    lpFormat: ?*const CURRENCYFMTW,
    lpCurrencyStr: ?[*:0]u16,
    cchCurrency: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn EnumCalendarInfoA(
    lpCalInfoEnumProc: CALINFO_ENUMPROCA,
    Locale: u32,
    Calendar: u32,
    CalType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumCalendarInfoW(
    lpCalInfoEnumProc: CALINFO_ENUMPROCW,
    Locale: u32,
    Calendar: u32,
    CalType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumCalendarInfoExA(
    lpCalInfoEnumProcEx: CALINFO_ENUMPROCEXA,
    Locale: u32,
    Calendar: u32,
    CalType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumCalendarInfoExW(
    lpCalInfoEnumProcEx: CALINFO_ENUMPROCEXW,
    Locale: u32,
    Calendar: u32,
    CalType: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumTimeFormatsA(
    lpTimeFmtEnumProc: TIMEFMT_ENUMPROCA,
    Locale: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumTimeFormatsW(
    lpTimeFmtEnumProc: TIMEFMT_ENUMPROCW,
    Locale: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumDateFormatsA(
    lpDateFmtEnumProc: DATEFMT_ENUMPROCA,
    Locale: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumDateFormatsW(
    lpDateFmtEnumProc: DATEFMT_ENUMPROCW,
    Locale: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumDateFormatsExA(
    lpDateFmtEnumProcEx: DATEFMT_ENUMPROCEXA,
    Locale: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumDateFormatsExW(
    lpDateFmtEnumProcEx: DATEFMT_ENUMPROCEXW,
    Locale: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn IsValidLanguageGroup(
    LanguageGroup: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetNLSVersion(
    Function: u32,
    Locale: u32,
    lpVersionInformation: *NLSVERSIONINFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn IsValidLocale(
    Locale: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetGeoInfoA(
    Location: i32,
    GeoType: u32,
    lpGeoData: ?[*:0]u8,
    cchData: i32,
    LangId: u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetGeoInfoW(
    Location: i32,
    GeoType: u32,
    lpGeoData: ?[*:0]u16,
    cchData: i32,
    LangId: u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetGeoInfoEx(
    location: PWSTR,
    geoType: u32,
    geoData: ?[*:0]u16,
    geoDataCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn EnumSystemGeoID(
    GeoClass: u32,
    ParentGeoId: i32,
    lpGeoEnumProc: GEO_ENUMPROC,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumSystemGeoNames(
    geoClass: u32,
    geoEnumProc: GEO_ENUMNAMEPROC,
    data: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetUserGeoID(
    GeoClass: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetUserDefaultGeoName(
    geoName: [*:0]u16,
    geoNameCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn SetUserGeoID(
    GeoId: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn SetUserGeoName(
    geoName: PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn ConvertDefaultLocale(
    Locale: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "KERNEL32" fn GetSystemDefaultUILanguage(
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "KERNEL32" fn GetThreadLocale(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "KERNEL32" fn SetThreadLocale(
    Locale: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetUserDefaultUILanguage(
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "KERNEL32" fn GetUserDefaultLangID(
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "KERNEL32" fn GetSystemDefaultLangID(
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "KERNEL32" fn GetSystemDefaultLCID(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "KERNEL32" fn GetUserDefaultLCID(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "KERNEL32" fn SetThreadUILanguage(
    LangId: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "KERNEL32" fn GetThreadUILanguage(
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "KERNEL32" fn GetProcessPreferredUILanguages(
    dwFlags: u32,
    pulNumLanguages: *u32,
    pwszLanguagesBuffer: ?[*]u16,
    pcchLanguagesBuffer: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn SetProcessPreferredUILanguages(
    dwFlags: u32,
    pwszLanguagesBuffer: ?[*]const u16,
    pulNumLanguages: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetUserPreferredUILanguages(
    dwFlags: u32,
    pulNumLanguages: *u32,
    pwszLanguagesBuffer: ?[*]u16,
    pcchLanguagesBuffer: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetSystemPreferredUILanguages(
    dwFlags: u32,
    pulNumLanguages: *u32,
    pwszLanguagesBuffer: ?[*]u16,
    pcchLanguagesBuffer: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetThreadPreferredUILanguages(
    dwFlags: u32,
    pulNumLanguages: *u32,
    pwszLanguagesBuffer: ?[*]u16,
    pcchLanguagesBuffer: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn SetThreadPreferredUILanguages(
    dwFlags: u32,
    pwszLanguagesBuffer: ?[*]const u16,
    pulNumLanguages: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetFileMUIInfo(
    dwFlags: u32,
    pcwszFilePath: [*:0]const u16,
    pFileMUIInfo: ?[*]FILEMUIINFO,
    pcbFileMUIInfo: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetFileMUIPath(
    dwFlags: u32,
    pcwszFilePath: [*:0]const u16,
    pwszLanguage: ?[*:0]u16,
    pcchLanguage: *u32,
    pwszFileMUIPath: ?[*:0]u16,
    pcchFileMUIPath: *u32,
    pululEnumerator: *u64,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetUILanguageInfo(
    dwFlags: u32,
    pwmszLanguage: [*]const u16,
    pwszFallbackLanguages: ?[*]u16,
    pcchFallbackLanguages: ?*u32,
    pAttributes: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn SetThreadPreferredUILanguages2(
    flags: u32,
    languages: ?[*]const u16,
    numLanguagesSet: ?*u32,
    snapshot: ?*?*HSAVEDUILANGUAGES__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn RestoreThreadPreferredUILanguages(
    snapshot: *const HSAVEDUILANGUAGES__,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "KERNEL32" fn NotifyUILanguageChange(
    dwFlags: u32,
    pcwstrNewLanguage: ?[*:0]const u16,
    pcwstrPreviousLanguage: ?[*:0]const u16,
    dwReserved: u32,
    pdwStatusRtrn: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetStringTypeExA(
    Locale: u32,
    dwInfoType: u32,
    lpSrcStr: [*:0]const u8,
    cchSrc: i32,
    lpCharType: [*:0]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetStringTypeA(
    Locale: u32,
    dwInfoType: u32,
    lpSrcStr: [*:0]const u8,
    cchSrc: i32,
    lpCharType: *u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn FoldStringA(
    dwMapFlags: u32,
    lpSrcStr: [*:0]const u8,
    cchSrc: i32,
    lpDestStr: ?[*:0]u8,
    cchDest: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn EnumSystemLocalesA(
    lpLocaleEnumProc: LOCALE_ENUMPROCA,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumSystemLocalesW(
    lpLocaleEnumProc: LOCALE_ENUMPROCW,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumSystemLanguageGroupsA(
    lpLanguageGroupEnumProc: LANGUAGEGROUP_ENUMPROCA,
    dwFlags: u32,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumSystemLanguageGroupsW(
    lpLanguageGroupEnumProc: LANGUAGEGROUP_ENUMPROCW,
    dwFlags: u32,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumLanguageGroupLocalesA(
    lpLangGroupLocaleEnumProc: LANGGROUPLOCALE_ENUMPROCA,
    LanguageGroup: u32,
    dwFlags: u32,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumLanguageGroupLocalesW(
    lpLangGroupLocaleEnumProc: LANGGROUPLOCALE_ENUMPROCW,
    LanguageGroup: u32,
    dwFlags: u32,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumUILanguagesA(
    lpUILanguageEnumProc: UILANGUAGE_ENUMPROCA,
    dwFlags: u32,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumUILanguagesW(
    lpUILanguageEnumProc: UILANGUAGE_ENUMPROCW,
    dwFlags: u32,
    lParam: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumSystemCodePagesA(
    lpCodePageEnumProc: CODEPAGE_ENUMPROCA,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumSystemCodePagesW(
    lpCodePageEnumProc: CODEPAGE_ENUMPROCW,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "NORMALIZ" fn IdnToAscii(
    dwFlags: u32,
    lpUnicodeCharStr: [*:0]const u16,
    cchUnicodeChar: i32,
    lpASCIICharStr: ?[*:0]u16,
    cchASCIIChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "NORMALIZ" fn IdnToUnicode(
    dwFlags: u32,
    lpASCIICharStr: [*:0]const u16,
    cchASCIIChar: i32,
    lpUnicodeCharStr: ?[*:0]u16,
    cchUnicodeChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn IdnToNameprepUnicode(
    dwFlags: u32,
    lpUnicodeCharStr: [*:0]const u16,
    cchUnicodeChar: i32,
    lpNameprepCharStr: ?[*:0]u16,
    cchNameprepChar: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn NormalizeString(
    NormForm: NORM_FORM,
    lpSrcString: [*:0]const u16,
    cwSrcLength: i32,
    lpDstString: ?[*:0]u16,
    cwDstLength: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn IsNormalizedString(
    NormForm: NORM_FORM,
    lpString: [*:0]const u16,
    cwLength: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn VerifyScripts(
    dwFlags: u32,
    lpLocaleScripts: [*:0]const u16,
    cchLocaleScripts: i32,
    lpTestScripts: [*:0]const u16,
    cchTestScripts: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetStringScripts(
    dwFlags: u32,
    lpString: [*:0]const u16,
    cchString: i32,
    lpScripts: ?[*:0]u16,
    cchScripts: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetLocaleInfoEx(
    lpLocaleName: ?[*:0]const u16,
    LCType: u32,
    lpLCData: ?[*:0]u16,
    cchData: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetCalendarInfoEx(
    lpLocaleName: ?[*:0]const u16,
    Calendar: u32,
    lpReserved: ?[*:0]const u16,
    CalType: u32,
    lpCalData: ?[*:0]u16,
    cchData: i32,
    lpValue: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetNumberFormatEx(
    lpLocaleName: ?[*:0]const u16,
    dwFlags: u32,
    lpValue: [*:0]const u16,
    lpFormat: ?*const NUMBERFMTW,
    lpNumberStr: ?[*:0]u16,
    cchNumber: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetCurrencyFormatEx(
    lpLocaleName: ?[*:0]const u16,
    dwFlags: u32,
    lpValue: [*:0]const u16,
    lpFormat: ?*const CURRENCYFMTW,
    lpCurrencyStr: ?[*:0]u16,
    cchCurrency: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetUserDefaultLocaleName(
    lpLocaleName: [*:0]u16,
    cchLocaleName: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn GetSystemDefaultLocaleName(
    lpLocaleName: [*:0]u16,
    cchLocaleName: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn IsNLSDefinedString(
    Function: u32,
    dwFlags: u32,
    lpVersionInformation: *NLSVERSIONINFO,
    lpString: [*:0]const u16,
    cchStr: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetNLSVersionEx(
    function: u32,
    lpLocaleName: ?[*:0]const u16,
    lpVersionInformation: *NLSVERSIONINFOEX,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn IsValidNLSVersion(
    function: u32,
    lpLocaleName: ?[*:0]const u16,
    lpVersionInformation: *NLSVERSIONINFOEX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "KERNEL32" fn FindNLSStringEx(
    lpLocaleName: ?[*:0]const u16,
    dwFindNLSStringFlags: u32,
    lpStringSource: [*:0]const u16,
    cchSource: i32,
    lpStringValue: [*:0]const u16,
    cchValue: i32,
    pcchFound: ?*i32,
    lpVersionInformation: ?*NLSVERSIONINFO,
    lpReserved: ?*c_void,
    sortHandle: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn LCMapStringEx(
    lpLocaleName: ?[*:0]const u16,
    dwMapFlags: u32,
    lpSrcStr: [*:0]const u16,
    cchSrc: i32,
    lpDestStr: ?[*:0]u16,
    cchDest: i32,
    lpVersionInformation: ?*NLSVERSIONINFO,
    lpReserved: ?*c_void,
    sortHandle: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "KERNEL32" fn IsValidLocaleName(
    lpLocaleName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumCalendarInfoExEx(
    pCalInfoEnumProcExEx: CALINFO_ENUMPROCEXEX,
    lpLocaleName: ?[*:0]const u16,
    Calendar: u32,
    lpReserved: ?[*:0]const u16,
    CalType: u32,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumDateFormatsExEx(
    lpDateFmtEnumProcExEx: DATEFMT_ENUMPROCEXEX,
    lpLocaleName: ?[*:0]const u16,
    dwFlags: u32,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumTimeFormatsEx(
    lpTimeFmtEnumProcEx: TIMEFMT_ENUMPROCEX,
    lpLocaleName: ?[*:0]const u16,
    dwFlags: u32,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn EnumSystemLocalesEx(
    lpLocaleEnumProcEx: LOCALE_ENUMPROCEX,
    dwFlags: u32,
    lParam: LPARAM,
    lpReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn ResolveLocaleName(
    lpNameToResolve: ?[*:0]const u16,
    lpLocaleName: ?[*:0]u16,
    cchLocaleName: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "IMM32" fn ImmInstallIMEA(
    lpszIMEFileName: [*:0]const u8,
    lpszLayoutText: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HKL;

pub extern "IMM32" fn ImmInstallIMEW(
    lpszIMEFileName: [*:0]const u16,
    lpszLayoutText: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HKL;

pub extern "IMM32" fn ImmGetDefaultIMEWnd(
    param0: HWND,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "IMM32" fn ImmGetDescriptionA(
    param0: HKL,
    lpszDescription: ?[*:0]u8,
    uBufLen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmGetDescriptionW(
    param0: HKL,
    lpszDescription: ?[*:0]u16,
    uBufLen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmGetIMEFileNameA(
    param0: HKL,
    lpszFileName: ?[*:0]u8,
    uBufLen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmGetIMEFileNameW(
    param0: HKL,
    lpszFileName: ?[*:0]u16,
    uBufLen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmGetProperty(
    param0: HKL,
    param1: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmIsIME(
    param0: HKL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmSimulateHotKey(
    param0: HWND,
    param1: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmCreateContext(
) callconv(@import("std").os.windows.WINAPI) *HIMC__;

pub extern "IMM32" fn ImmDestroyContext(
    param0: *HIMC__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmGetContext(
    param0: HWND,
) callconv(@import("std").os.windows.WINAPI) *HIMC__;

pub extern "IMM32" fn ImmReleaseContext(
    param0: HWND,
    param1: *HIMC__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmAssociateContext(
    param0: HWND,
    param1: *HIMC__,
) callconv(@import("std").os.windows.WINAPI) *HIMC__;

pub extern "IMM32" fn ImmAssociateContextEx(
    param0: HWND,
    param1: *HIMC__,
    param2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmGetCompositionStringA(
    param0: *HIMC__,
    param1: u32,
    lpBuf: ?[*]u8,
    dwBufLen: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "IMM32" fn ImmGetCompositionStringW(
    param0: *HIMC__,
    param1: u32,
    lpBuf: ?[*]u8,
    dwBufLen: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "IMM32" fn ImmSetCompositionStringA(
    param0: *HIMC__,
    dwIndex: u32,
    lpComp: ?[*]u8,
    dwCompLen: u32,
    lpRead: ?[*]u8,
    dwReadLen: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmSetCompositionStringW(
    param0: *HIMC__,
    dwIndex: u32,
    lpComp: ?[*]u8,
    dwCompLen: u32,
    lpRead: ?[*]u8,
    dwReadLen: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmGetCandidateListCountA(
    param0: *HIMC__,
    lpdwListCount: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmGetCandidateListCountW(
    param0: *HIMC__,
    lpdwListCount: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmGetCandidateListA(
    param0: *HIMC__,
    deIndex: u32,
    lpCandList: ?[*]CANDIDATELIST,
    dwBufLen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmGetCandidateListW(
    param0: *HIMC__,
    deIndex: u32,
    lpCandList: ?[*]CANDIDATELIST,
    dwBufLen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmGetGuideLineA(
    param0: *HIMC__,
    dwIndex: u32,
    lpBuf: ?[*:0]u8,
    dwBufLen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmGetGuideLineW(
    param0: *HIMC__,
    dwIndex: u32,
    lpBuf: ?[*:0]u16,
    dwBufLen: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmGetConversionStatus(
    param0: *HIMC__,
    lpfdwConversion: ?*u32,
    lpfdwSentence: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmSetConversionStatus(
    param0: *HIMC__,
    param1: u32,
    param2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmGetOpenStatus(
    param0: *HIMC__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmSetOpenStatus(
    param0: *HIMC__,
    param1: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmGetCompositionFontA(
    param0: *HIMC__,
    lplf: *LOGFONTA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmGetCompositionFontW(
    param0: *HIMC__,
    lplf: *LOGFONTW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmSetCompositionFontA(
    param0: *HIMC__,
    lplf: *LOGFONTA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmSetCompositionFontW(
    param0: *HIMC__,
    lplf: *LOGFONTW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmConfigureIMEA(
    param0: HKL,
    param1: HWND,
    param2: u32,
    param3: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmConfigureIMEW(
    param0: HKL,
    param1: HWND,
    param2: u32,
    param3: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmEscapeA(
    param0: HKL,
    param1: *HIMC__,
    param2: u32,
    param3: *c_void,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "IMM32" fn ImmEscapeW(
    param0: HKL,
    param1: *HIMC__,
    param2: u32,
    param3: *c_void,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "IMM32" fn ImmGetConversionListA(
    param0: HKL,
    param1: *HIMC__,
    lpSrc: [*:0]const u8,
    lpDst: [*]CANDIDATELIST,
    dwBufLen: u32,
    uFlag: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmGetConversionListW(
    param0: HKL,
    param1: *HIMC__,
    lpSrc: [*:0]const u16,
    lpDst: [*]CANDIDATELIST,
    dwBufLen: u32,
    uFlag: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmNotifyIME(
    param0: *HIMC__,
    dwAction: u32,
    dwIndex: u32,
    dwValue: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmGetStatusWindowPos(
    param0: *HIMC__,
    lpptPos: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmSetStatusWindowPos(
    param0: *HIMC__,
    lpptPos: *POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmGetCompositionWindow(
    param0: *HIMC__,
    lpCompForm: *COMPOSITIONFORM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmSetCompositionWindow(
    param0: *HIMC__,
    lpCompForm: *COMPOSITIONFORM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmGetCandidateWindow(
    param0: *HIMC__,
    param1: u32,
    lpCandidate: *CANDIDATEFORM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmSetCandidateWindow(
    param0: *HIMC__,
    lpCandidate: *CANDIDATEFORM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmIsUIMessageA(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmIsUIMessageW(
    param0: HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmGetVirtualKey(
    param0: HWND,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmRegisterWordA(
    param0: HKL,
    lpszReading: [*:0]const u8,
    param2: u32,
    lpszRegister: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmRegisterWordW(
    param0: HKL,
    lpszReading: [*:0]const u16,
    param2: u32,
    lpszRegister: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmUnregisterWordA(
    param0: HKL,
    lpszReading: [*:0]const u8,
    param2: u32,
    lpszUnregister: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmUnregisterWordW(
    param0: HKL,
    lpszReading: [*:0]const u16,
    param2: u32,
    lpszUnregister: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmGetRegisterWordStyleA(
    param0: HKL,
    nItem: u32,
    lpStyleBuf: [*]STYLEBUFA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmGetRegisterWordStyleW(
    param0: HKL,
    nItem: u32,
    lpStyleBuf: [*]STYLEBUFW,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmEnumRegisterWordA(
    param0: HKL,
    param1: REGISTERWORDENUMPROCA,
    lpszReading: ?[*:0]const u8,
    param3: u32,
    lpszRegister: ?[*:0]const u8,
    param5: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmEnumRegisterWordW(
    param0: HKL,
    param1: REGISTERWORDENUMPROCW,
    lpszReading: ?[*:0]const u16,
    param3: u32,
    lpszRegister: ?[*:0]const u16,
    param5: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmDisableIME(
    param0: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmEnumInputContext(
    idThread: u32,
    lpfn: IMCENUMPROC,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmGetImeMenuItemsA(
    param0: *HIMC__,
    param1: u32,
    param2: u32,
    lpImeParentMenu: ?*IMEMENUITEMINFOA,
    lpImeMenu: ?[*]IMEMENUITEMINFOA,
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmGetImeMenuItemsW(
    param0: *HIMC__,
    param1: u32,
    param2: u32,
    lpImeParentMenu: ?*IMEMENUITEMINFOW,
    lpImeMenu: ?[*]IMEMENUITEMINFOW,
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmDisableTextFrameService(
    idThread: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmDisableLegacyIME(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "elscore" fn MappingGetServices(
    pOptions: ?*MAPPING_ENUM_OPTIONS,
    prgServices: **MAPPING_SERVICE_INFO,
    pdwServicesCount: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "elscore" fn MappingFreeServices(
    pServiceInfo: *MAPPING_SERVICE_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "elscore" fn MappingRecognizeText(
    pServiceInfo: *MAPPING_SERVICE_INFO,
    pszText: [*:0]const u16,
    dwLength: u32,
    dwIndex: u32,
    pOptions: ?*MAPPING_OPTIONS,
    pbag: *MAPPING_PROPERTY_BAG,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "elscore" fn MappingDoAction(
    pBag: *MAPPING_PROPERTY_BAG,
    dwRangeIndex: u32,
    pszActionId: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "elscore" fn MappingFreePropertyBag(
    pBag: *MAPPING_PROPERTY_BAG,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "IMM32" fn ImmGetHotKey(
    param0: u32,
    lpuModifiers: *u32,
    lpuVKey: *u32,
    phKL: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmSetHotKey(
    param0: u32,
    param1: u32,
    param2: u32,
    param3: HKL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmGenerateMessage(
    param0: *HIMC__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmRequestMessageA(
    param0: *HIMC__,
    param1: WPARAM,
    param2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "IMM32" fn ImmRequestMessageW(
    param0: *HIMC__,
    param1: WPARAM,
    param2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub extern "IMM32" fn ImmCreateSoftKeyboard(
    param0: u32,
    param1: HWND,
    param2: i32,
    param3: i32,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "IMM32" fn ImmDestroySoftKeyboard(
    param0: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmShowSoftKeyboard(
    param0: HWND,
    param1: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmLockIMC(
    param0: *HIMC__,
) callconv(@import("std").os.windows.WINAPI) *INPUTCONTEXT;

pub extern "IMM32" fn ImmUnlockIMC(
    param0: *HIMC__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmGetIMCLockCount(
    param0: *HIMC__,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmCreateIMCC(
    param0: u32,
) callconv(@import("std").os.windows.WINAPI) *HIMCC__;

pub extern "IMM32" fn ImmDestroyIMCC(
    param0: *HIMCC__,
) callconv(@import("std").os.windows.WINAPI) *HIMCC__;

pub extern "IMM32" fn ImmLockIMCC(
    param0: *HIMCC__,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "IMM32" fn ImmUnlockIMCC(
    param0: *HIMCC__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "IMM32" fn ImmGetIMCCLockCount(
    param0: *HIMCC__,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "IMM32" fn ImmReSizeIMCC(
    param0: *HIMCC__,
    param1: u32,
) callconv(@import("std").os.windows.WINAPI) *HIMCC__;

pub extern "IMM32" fn ImmGetIMCCSize(
    param0: *HIMCC__,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USP10" fn ScriptFreeCache(
    psc: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptItemize(
    pwcInChars: [*:0]const u16,
    cInChars: i32,
    cMaxItems: i32,
    psControl: ?*const SCRIPT_CONTROL,
    psState: ?*const SCRIPT_STATE,
    pItems: [*]SCRIPT_ITEM,
    pcItems: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptLayout(
    cRuns: i32,
    pbLevel: [*:0]const u8,
    piVisualToLogical: ?*i32,
    piLogicalToVisual: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptShape(
    hdc: HDC,
    psc: **c_void,
    pwcChars: [*:0]const u16,
    cChars: i32,
    cMaxGlyphs: i32,
    psa: *SCRIPT_ANALYSIS,
    pwOutGlyphs: [*:0]u16,
    pwLogClust: *u16,
    psva: [*]SCRIPT_VISATTR,
    pcGlyphs: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptPlace(
    hdc: HDC,
    psc: **c_void,
    pwGlyphs: [*:0]const u16,
    cGlyphs: i32,
    psva: [*]const SCRIPT_VISATTR,
    psa: *SCRIPT_ANALYSIS,
    piAdvance: *i32,
    pGoffset: ?*GOFFSET,
    pABC: *ABC,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptTextOut(
    hdc: HDC,
    psc: **c_void,
    x: i32,
    y: i32,
    fuOptions: u32,
    lprc: ?*const RECT,
    psa: *const SCRIPT_ANALYSIS,
    pwcReserved: [*:0]const u16,
    iReserved: i32,
    pwGlyphs: [*:0]const u16,
    cGlyphs: i32,
    piAdvance: [*]const i32,
    piJustify: ?[*]const i32,
    pGoffset: [*]const GOFFSET,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptJustify(
    psva: [*]const SCRIPT_VISATTR,
    piAdvance: [*]const i32,
    cGlyphs: i32,
    iDx: i32,
    iMinKashida: i32,
    piJustify: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptBreak(
    pwcChars: [*:0]const u16,
    cChars: i32,
    psa: *const SCRIPT_ANALYSIS,
    psla: *SCRIPT_LOGATTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptCPtoX(
    iCP: i32,
    fTrailing: BOOL,
    cChars: i32,
    cGlyphs: i32,
    pwLogClust: [*:0]const u16,
    psva: [*]const SCRIPT_VISATTR,
    piAdvance: [*]const i32,
    psa: *const SCRIPT_ANALYSIS,
    piX: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptXtoCP(
    iX: i32,
    cChars: i32,
    cGlyphs: i32,
    pwLogClust: [*:0]const u16,
    psva: [*]const SCRIPT_VISATTR,
    piAdvance: [*]const i32,
    psa: *const SCRIPT_ANALYSIS,
    piCP: *i32,
    piTrailing: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptGetLogicalWidths(
    psa: *const SCRIPT_ANALYSIS,
    cChars: i32,
    cGlyphs: i32,
    piGlyphWidth: [*]const i32,
    pwLogClust: [*:0]const u16,
    psva: [*]const SCRIPT_VISATTR,
    piDx: [*]i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptApplyLogicalWidth(
    piDx: [*]const i32,
    cChars: i32,
    cGlyphs: i32,
    pwLogClust: [*:0]const u16,
    psva: [*]const SCRIPT_VISATTR,
    piAdvance: [*]const i32,
    psa: *const SCRIPT_ANALYSIS,
    pABC: ?*ABC,
    piJustify: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptGetCMap(
    hdc: HDC,
    psc: **c_void,
    pwcInChars: [*:0]const u16,
    cChars: i32,
    dwFlags: u32,
    pwOutGlyphs: [*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptGetGlyphABCWidth(
    hdc: HDC,
    psc: **c_void,
    wGlyph: u16,
    pABC: *ABC,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptGetProperties(
    ppSp: *const *const *const SCRIPT_PROPERTIES,
    piNumScripts: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptGetFontProperties(
    hdc: HDC,
    psc: **c_void,
    sfp: *SCRIPT_FONTPROPERTIES,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptCacheGetHeight(
    hdc: HDC,
    psc: **c_void,
    tmHeight: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptStringAnalyse(
    hdc: HDC,
    pString: *const c_void,
    cString: i32,
    cGlyphs: i32,
    iCharset: i32,
    dwFlags: u32,
    iReqWidth: i32,
    psControl: ?*SCRIPT_CONTROL,
    psState: ?*SCRIPT_STATE,
    piDx: ?[*]const i32,
    pTabdef: ?*SCRIPT_TABDEF,
    pbInClass: *const u8,
    pssa: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptStringFree(
    pssa: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptString_pSize(
    ssa: *c_void,
) callconv(@import("std").os.windows.WINAPI) *SIZE;

pub extern "USP10" fn ScriptString_pcOutChars(
    ssa: *c_void,
) callconv(@import("std").os.windows.WINAPI) *i32;

pub extern "USP10" fn ScriptString_pLogAttr(
    ssa: *c_void,
) callconv(@import("std").os.windows.WINAPI) *SCRIPT_LOGATTR;

pub extern "USP10" fn ScriptStringGetOrder(
    ssa: *c_void,
    puOrder: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptStringCPtoX(
    ssa: *c_void,
    icp: i32,
    fTrailing: BOOL,
    pX: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptStringXtoCP(
    ssa: *c_void,
    iX: i32,
    piCh: *i32,
    piTrailing: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptStringGetLogicalWidths(
    ssa: *c_void,
    piDx: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptStringValidate(
    ssa: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptStringOut(
    ssa: *c_void,
    iX: i32,
    iY: i32,
    uOptions: u32,
    prc: ?*const RECT,
    iMinSel: i32,
    iMaxSel: i32,
    fDisabled: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptIsComplex(
    pwcInChars: [*:0]const u16,
    cInChars: i32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptRecordDigitSubstitution(
    Locale: u32,
    psds: *SCRIPT_DIGITSUBSTITUTE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptApplyDigitSubstitution(
    psds: *const SCRIPT_DIGITSUBSTITUTE,
    psc: *SCRIPT_CONTROL,
    pss: *SCRIPT_STATE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptShapeOpenType(
    hdc: HDC,
    psc: **c_void,
    psa: *SCRIPT_ANALYSIS,
    tagScript: u32,
    tagLangSys: u32,
    rcRangeChars: ?[*]i32,
    rpRangeProperties: ?[*]?*textrange_properties,
    cRanges: i32,
    pwcChars: [*:0]const u16,
    cChars: i32,
    cMaxGlyphs: i32,
    pwLogClust: *u16,
    pCharProps: *script_charprop,
    pwOutGlyphs: [*:0]u16,
    pOutGlyphProps: [*]script_glyphprop,
    pcGlyphs: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptPlaceOpenType(
    hdc: HDC,
    psc: **c_void,
    psa: *SCRIPT_ANALYSIS,
    tagScript: u32,
    tagLangSys: u32,
    rcRangeChars: ?[*]i32,
    rpRangeProperties: ?[*]?*textrange_properties,
    cRanges: i32,
    pwcChars: [*:0]const u16,
    pwLogClust: [*:0]u16,
    pCharProps: [*]script_charprop,
    cChars: i32,
    pwGlyphs: [*:0]const u16,
    pGlyphProps: [*]const script_glyphprop,
    cGlyphs: i32,
    piAdvance: *i32,
    pGoffset: *GOFFSET,
    pABC: ?*ABC,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptItemizeOpenType(
    pwcInChars: [*:0]const u16,
    cInChars: i32,
    cMaxItems: i32,
    psControl: ?*const SCRIPT_CONTROL,
    psState: ?*const SCRIPT_STATE,
    pItems: [*]SCRIPT_ITEM,
    pScriptTags: [*]u32,
    pcItems: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptGetFontScriptTags(
    hdc: HDC,
    psc: **c_void,
    psa: ?*SCRIPT_ANALYSIS,
    cMaxTags: i32,
    pScriptTags: [*]u32,
    pcTags: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptGetFontLanguageTags(
    hdc: HDC,
    psc: **c_void,
    psa: ?*SCRIPT_ANALYSIS,
    tagScript: u32,
    cMaxTags: i32,
    pLangsysTags: [*]u32,
    pcTags: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptGetFontFeatureTags(
    hdc: HDC,
    psc: **c_void,
    psa: ?*SCRIPT_ANALYSIS,
    tagScript: u32,
    tagLangSys: u32,
    cMaxTags: i32,
    pFeatureTags: [*]u32,
    pcTags: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptGetFontAlternateGlyphs(
    hdc: HDC,
    psc: **c_void,
    psa: ?*SCRIPT_ANALYSIS,
    tagScript: u32,
    tagLangSys: u32,
    tagFeature: u32,
    wGlyphId: u16,
    cMaxAlternates: i32,
    pAlternateGlyphs: [*:0]u16,
    pcAlternates: *i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptSubstituteSingleGlyph(
    hdc: HDC,
    psc: **c_void,
    psa: ?*SCRIPT_ANALYSIS,
    tagScript: u32,
    tagLangSys: u32,
    tagFeature: u32,
    lParameter: i32,
    wGlyphId: u16,
    pwOutGlyphId: *u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "USP10" fn ScriptPositionSingleGlyph(
    hdc: HDC,
    psc: **c_void,
    psa: ?*SCRIPT_ANALYSIS,
    tagScript: u32,
    tagLangSys: u32,
    tagFeature: u32,
    lParameter: i32,
    wGlyphId: u16,
    iAdvance: i32,
    GOffset: GOFFSET,
    piOutAdvance: *i32,
    pOutGoffset: *GOFFSET,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "icu" fn utf8_nextCharSafeBody(
    s: *const u8,
    pi: *i32,
    length: i32,
    c: i32,
    strict: i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn utf8_appendCharSafeBody(
    s: *u8,
    i: i32,
    length: i32,
    c: i32,
    pIsError: *i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn utf8_prevCharSafeBody(
    s: *const u8,
    start: i32,
    pi: *i32,
    c: i32,
    strict: i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn utf8_back1SafeBody(
    s: *const u8,
    start: i32,
    i: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_versionFromString(
    versionArray: *u8,
    versionString: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn u_versionFromUString(
    versionArray: *u8,
    versionString: *const u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn u_versionToString(
    versionArray: *const u8,
    versionString: *i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn u_getVersion(
    versionArray: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn u_errorName(
    code: UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn utrace_setLevel(
    traceLevel: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn utrace_getLevel(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn utrace_setFunctions(
    context: *const c_void,
    e: *UTraceEntry,
    x: *UTraceExit,
    d: *UTraceData,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn utrace_getFunctions(
    context: *const *const c_void,
    e: **UTraceEntry,
    x: **UTraceExit,
    d: **UTraceData,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn utrace_vformat(
    outBuf: *i8,
    capacity: i32,
    indent: i32,
    fmt: *const i8,
    args: *i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn utrace_format(
    outBuf: *i8,
    capacity: i32,
    indent: i32,
    fmt: *const i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn utrace_functionName(
    fnNumber: i32,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn u_shapeArabic(
    source: *const u16,
    sourceLength: i32,
    dest: *u16,
    destSize: i32,
    options: u32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uscript_getCode(
    nameOrAbbrOrLocale: *const i8,
    fillIn: *UScriptCode,
    capacity: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uscript_getName(
    scriptCode: UScriptCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn uscript_getShortName(
    scriptCode: UScriptCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn uscript_getScript(
    codepoint: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) UScriptCode;

pub extern "icu" fn uscript_hasScript(
    c: i32,
    sc: UScriptCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uscript_getScriptExtensions(
    c: i32,
    scripts: *UScriptCode,
    capacity: i32,
    errorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uscript_getSampleString(
    script: UScriptCode,
    dest: *u16,
    capacity: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uscript_getUsage(
    script: UScriptCode,
) callconv(@import("std").os.windows.WINAPI) UScriptUsage;

pub extern "icu" fn uscript_isRightToLeft(
    script: UScriptCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uscript_breaksBetweenLetters(
    script: UScriptCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uscript_isCased(
    script: UScriptCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uiter_current32(
    iter: *UCharIterator,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uiter_next32(
    iter: *UCharIterator,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uiter_previous32(
    iter: *UCharIterator,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uiter_getState(
    iter: *const UCharIterator,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "icu" fn uiter_setState(
    iter: *UCharIterator,
    state: u32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uiter_setString(
    iter: *UCharIterator,
    s: *const u16,
    length: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uiter_setUTF16BE(
    iter: *UCharIterator,
    s: *const i8,
    length: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uiter_setUTF8(
    iter: *UCharIterator,
    s: *const i8,
    length: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uenum_close(
    en: *UEnumeration,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uenum_count(
    en: *UEnumeration,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uenum_unext(
    en: *UEnumeration,
    resultLength: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn uenum_next(
    en: *UEnumeration,
    resultLength: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn uenum_reset(
    en: *UEnumeration,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uenum_openUCharStringsEnumeration(
    strings: *const *const u16,
    count: i32,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn uenum_openCharStringsEnumeration(
    strings: *const *const i8,
    count: i32,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn uloc_getDefault(
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn uloc_setDefault(
    localeID: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uloc_getLanguage(
    localeID: *const i8,
    language: *i8,
    languageCapacity: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_getScript(
    localeID: *const i8,
    script: *i8,
    scriptCapacity: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_getCountry(
    localeID: *const i8,
    country: *i8,
    countryCapacity: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_getVariant(
    localeID: *const i8,
    variant: *i8,
    variantCapacity: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_getName(
    localeID: *const i8,
    name: *i8,
    nameCapacity: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_canonicalize(
    localeID: *const i8,
    name: *i8,
    nameCapacity: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_getISO3Language(
    localeID: *const i8,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn uloc_getISO3Country(
    localeID: *const i8,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn uloc_getLCID(
    localeID: *const i8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "icu" fn uloc_getDisplayLanguage(
    locale: *const i8,
    displayLocale: *const i8,
    language: *u16,
    languageCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_getDisplayScript(
    locale: *const i8,
    displayLocale: *const i8,
    script: *u16,
    scriptCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_getDisplayCountry(
    locale: *const i8,
    displayLocale: *const i8,
    country: *u16,
    countryCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_getDisplayVariant(
    locale: *const i8,
    displayLocale: *const i8,
    variant: *u16,
    variantCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_getDisplayKeyword(
    keyword: *const i8,
    displayLocale: *const i8,
    dest: *u16,
    destCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_getDisplayKeywordValue(
    locale: *const i8,
    keyword: *const i8,
    displayLocale: *const i8,
    dest: *u16,
    destCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_getDisplayName(
    localeID: *const i8,
    inLocaleID: *const i8,
    result: *u16,
    maxResultSize: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_getAvailable(
    n: i32,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn uloc_countAvailable(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_getISOLanguages(
) callconv(@import("std").os.windows.WINAPI) **i8;

pub extern "icu" fn uloc_getISOCountries(
) callconv(@import("std").os.windows.WINAPI) **i8;

pub extern "icu" fn uloc_getParent(
    localeID: *const i8,
    parent: *i8,
    parentCapacity: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_getBaseName(
    localeID: *const i8,
    name: *i8,
    nameCapacity: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_openKeywords(
    localeID: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn uloc_getKeywordValue(
    localeID: *const i8,
    keywordName: *const i8,
    buffer: *i8,
    bufferCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_setKeywordValue(
    keywordName: *const i8,
    keywordValue: *const i8,
    buffer: *i8,
    bufferCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_isRightToLeft(
    locale: *const i8,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uloc_getCharacterOrientation(
    localeId: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) ULayoutType;

pub extern "icu" fn uloc_getLineOrientation(
    localeId: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) ULayoutType;

pub extern "icu" fn uloc_acceptLanguageFromHTTP(
    result: *i8,
    resultAvailable: i32,
    outResult: *UAcceptResult,
    httpAcceptLanguage: *const i8,
    availableLocales: *UEnumeration,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_acceptLanguage(
    result: *i8,
    resultAvailable: i32,
    outResult: *UAcceptResult,
    acceptList: *const *const i8,
    acceptListCount: i32,
    availableLocales: *UEnumeration,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_getLocaleForLCID(
    hostID: u32,
    locale: *i8,
    localeCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_addLikelySubtags(
    localeID: *const i8,
    maximizedLocaleID: *i8,
    maximizedLocaleIDCapacity: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_minimizeSubtags(
    localeID: *const i8,
    minimizedLocaleID: *i8,
    minimizedLocaleIDCapacity: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_forLanguageTag(
    langtag: *const i8,
    localeID: *i8,
    localeIDCapacity: i32,
    parsedLength: *i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_toLanguageTag(
    localeID: *const i8,
    langtag: *i8,
    langtagCapacity: i32,
    strict: i8,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uloc_toUnicodeLocaleKey(
    keyword: *const i8,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn uloc_toUnicodeLocaleType(
    keyword: *const i8,
    value: *const i8,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn uloc_toLegacyKey(
    keyword: *const i8,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn uloc_toLegacyType(
    keyword: *const i8,
    value: *const i8,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ures_open(
    packageName: *const i8,
    locale: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UResourceBundle;

pub extern "icu" fn ures_openDirect(
    packageName: *const i8,
    locale: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UResourceBundle;

pub extern "icu" fn ures_openU(
    packageName: *const u16,
    locale: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UResourceBundle;

pub extern "icu" fn ures_close(
    resourceBundle: *UResourceBundle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ures_getVersion(
    resB: *const UResourceBundle,
    versionInfo: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ures_getLocaleByType(
    resourceBundle: *const UResourceBundle,
    type: ULocDataLocaleType,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ures_getString(
    resourceBundle: *const UResourceBundle,
    len: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn ures_getUTF8String(
    resB: *const UResourceBundle,
    dest: *i8,
    length: *i32,
    forceCopy: i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ures_getBinary(
    resourceBundle: *const UResourceBundle,
    len: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "icu" fn ures_getIntVector(
    resourceBundle: *const UResourceBundle,
    len: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i32;

pub extern "icu" fn ures_getUInt(
    resourceBundle: *const UResourceBundle,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "icu" fn ures_getInt(
    resourceBundle: *const UResourceBundle,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ures_getSize(
    resourceBundle: *const UResourceBundle,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ures_getType(
    resourceBundle: *const UResourceBundle,
) callconv(@import("std").os.windows.WINAPI) UResType;

pub extern "icu" fn ures_getKey(
    resourceBundle: *const UResourceBundle,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ures_resetIterator(
    resourceBundle: *UResourceBundle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ures_hasNext(
    resourceBundle: *const UResourceBundle,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ures_getNextResource(
    resourceBundle: *UResourceBundle,
    fillIn: *UResourceBundle,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UResourceBundle;

pub extern "icu" fn ures_getNextString(
    resourceBundle: *UResourceBundle,
    len: *i32,
    key: *const *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn ures_getByIndex(
    resourceBundle: *const UResourceBundle,
    indexR: i32,
    fillIn: *UResourceBundle,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UResourceBundle;

pub extern "icu" fn ures_getStringByIndex(
    resourceBundle: *const UResourceBundle,
    indexS: i32,
    len: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn ures_getUTF8StringByIndex(
    resB: *const UResourceBundle,
    stringIndex: i32,
    dest: *i8,
    pLength: *i32,
    forceCopy: i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ures_getByKey(
    resourceBundle: *const UResourceBundle,
    key: *const i8,
    fillIn: *UResourceBundle,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UResourceBundle;

pub extern "icu" fn ures_getStringByKey(
    resB: *const UResourceBundle,
    key: *const i8,
    len: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn ures_getUTF8StringByKey(
    resB: *const UResourceBundle,
    key: *const i8,
    dest: *i8,
    pLength: *i32,
    forceCopy: i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ures_openAvailableLocales(
    packageName: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn uldn_open(
    locale: *const i8,
    dialectHandling: UDialectHandling,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *ULocaleDisplayNames;

pub extern "icu" fn uldn_close(
    ldn: *ULocaleDisplayNames,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uldn_getLocale(
    ldn: *const ULocaleDisplayNames,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn uldn_getDialectHandling(
    ldn: *const ULocaleDisplayNames,
) callconv(@import("std").os.windows.WINAPI) UDialectHandling;

pub extern "icu" fn uldn_localeDisplayName(
    ldn: *const ULocaleDisplayNames,
    locale: *const i8,
    result: *u16,
    maxResultSize: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uldn_languageDisplayName(
    ldn: *const ULocaleDisplayNames,
    lang: *const i8,
    result: *u16,
    maxResultSize: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uldn_scriptDisplayName(
    ldn: *const ULocaleDisplayNames,
    script: *const i8,
    result: *u16,
    maxResultSize: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uldn_scriptCodeDisplayName(
    ldn: *const ULocaleDisplayNames,
    scriptCode: UScriptCode,
    result: *u16,
    maxResultSize: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uldn_regionDisplayName(
    ldn: *const ULocaleDisplayNames,
    region: *const i8,
    result: *u16,
    maxResultSize: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uldn_variantDisplayName(
    ldn: *const ULocaleDisplayNames,
    variant: *const i8,
    result: *u16,
    maxResultSize: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uldn_keyDisplayName(
    ldn: *const ULocaleDisplayNames,
    key: *const i8,
    result: *u16,
    maxResultSize: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uldn_keyValueDisplayName(
    ldn: *const ULocaleDisplayNames,
    key: *const i8,
    value: *const i8,
    result: *u16,
    maxResultSize: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uldn_openForContext(
    locale: *const i8,
    contexts: *UDisplayContext,
    length: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *ULocaleDisplayNames;

pub extern "icu" fn uldn_getContext(
    ldn: *const ULocaleDisplayNames,
    type: UDisplayContextType,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) UDisplayContext;

pub extern "icu" fn ucurr_forLocale(
    locale: *const i8,
    buff: *u16,
    buffCapacity: i32,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucurr_register(
    isoCode: *const u16,
    locale: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "icu" fn ucurr_unregister(
    key: *c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ucurr_getName(
    currency: *const u16,
    locale: *const i8,
    nameStyle: UCurrNameStyle,
    isChoiceFormat: *i8,
    len: *i32,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn ucurr_getPluralName(
    currency: *const u16,
    locale: *const i8,
    isChoiceFormat: *i8,
    pluralCount: *const i8,
    len: *i32,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn ucurr_getDefaultFractionDigits(
    currency: *const u16,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucurr_getDefaultFractionDigitsForUsage(
    currency: *const u16,
    usage: UCurrencyUsage,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucurr_getRoundingIncrement(
    currency: *const u16,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) f64;

pub extern "icu" fn ucurr_getRoundingIncrementForUsage(
    currency: *const u16,
    usage: UCurrencyUsage,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) f64;

pub extern "icu" fn ucurr_openISOCurrencies(
    currType: u32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn ucurr_isAvailable(
    isoCode: *const u16,
    from: f64,
    to: f64,
    errorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ucurr_countCurrencies(
    locale: *const i8,
    date: f64,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucurr_forLocaleAndDate(
    locale: *const i8,
    date: f64,
    index: i32,
    buff: *u16,
    buffCapacity: i32,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucurr_getKeywordValuesForLocale(
    key: *const i8,
    locale: *const i8,
    commonlyUsed: i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn ucurr_getNumericCode(
    currency: *const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn UCNV_FROM_U_CALLBACK_STOP(
    context: *const c_void,
    fromUArgs: *UConverterFromUnicodeArgs,
    codeUnits: *const u16,
    length: i32,
    codePoint: i32,
    reason: UConverterCallbackReason,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn UCNV_TO_U_CALLBACK_STOP(
    context: *const c_void,
    toUArgs: *UConverterToUnicodeArgs,
    codeUnits: *const i8,
    length: i32,
    reason: UConverterCallbackReason,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn UCNV_FROM_U_CALLBACK_SKIP(
    context: *const c_void,
    fromUArgs: *UConverterFromUnicodeArgs,
    codeUnits: *const u16,
    length: i32,
    codePoint: i32,
    reason: UConverterCallbackReason,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn UCNV_FROM_U_CALLBACK_SUBSTITUTE(
    context: *const c_void,
    fromUArgs: *UConverterFromUnicodeArgs,
    codeUnits: *const u16,
    length: i32,
    codePoint: i32,
    reason: UConverterCallbackReason,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn UCNV_FROM_U_CALLBACK_ESCAPE(
    context: *const c_void,
    fromUArgs: *UConverterFromUnicodeArgs,
    codeUnits: *const u16,
    length: i32,
    codePoint: i32,
    reason: UConverterCallbackReason,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn UCNV_TO_U_CALLBACK_SKIP(
    context: *const c_void,
    toUArgs: *UConverterToUnicodeArgs,
    codeUnits: *const i8,
    length: i32,
    reason: UConverterCallbackReason,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn UCNV_TO_U_CALLBACK_SUBSTITUTE(
    context: *const c_void,
    toUArgs: *UConverterToUnicodeArgs,
    codeUnits: *const i8,
    length: i32,
    reason: UConverterCallbackReason,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn UCNV_TO_U_CALLBACK_ESCAPE(
    context: *const c_void,
    toUArgs: *UConverterToUnicodeArgs,
    codeUnits: *const i8,
    length: i32,
    reason: UConverterCallbackReason,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_compareNames(
    name1: *const i8,
    name2: *const i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucnv_open(
    converterName: *const i8,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UConverter;

pub extern "icu" fn ucnv_openU(
    name: *const u16,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UConverter;

pub extern "icu" fn ucnv_openCCSID(
    codepage: i32,
    platform: UConverterPlatform,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UConverter;

pub extern "icu" fn ucnv_openPackage(
    packageName: *const i8,
    converterName: *const i8,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UConverter;

pub extern "icu" fn ucnv_safeClone(
    cnv: *const UConverter,
    stackBuffer: *c_void,
    pBufferSize: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UConverter;

pub extern "icu" fn ucnv_close(
    converter: *UConverter,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_getSubstChars(
    converter: *const UConverter,
    subChars: *i8,
    len: *i8,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_setSubstChars(
    converter: *UConverter,
    subChars: *const i8,
    len: i8,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_setSubstString(
    cnv: *UConverter,
    s: *const u16,
    length: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_getInvalidChars(
    converter: *const UConverter,
    errBytes: *i8,
    len: *i8,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_getInvalidUChars(
    converter: *const UConverter,
    errUChars: *u16,
    len: *i8,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_reset(
    converter: *UConverter,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_resetToUnicode(
    converter: *UConverter,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_resetFromUnicode(
    converter: *UConverter,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_getMaxCharSize(
    converter: *const UConverter,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ucnv_getMinCharSize(
    converter: *const UConverter,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ucnv_getDisplayName(
    converter: *const UConverter,
    displayLocale: *const i8,
    displayName: *u16,
    displayNameCapacity: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucnv_getName(
    converter: *const UConverter,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ucnv_getCCSID(
    converter: *const UConverter,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucnv_getPlatform(
    converter: *const UConverter,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) UConverterPlatform;

pub extern "icu" fn ucnv_getType(
    converter: *const UConverter,
) callconv(@import("std").os.windows.WINAPI) UConverterType;

pub extern "icu" fn ucnv_getStarters(
    converter: *const UConverter,
    starters: *i8,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_getUnicodeSet(
    cnv: *const UConverter,
    setFillIn: *USet,
    whichSet: UConverterUnicodeSet,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_getToUCallBack(
    converter: *const UConverter,
    action: *UConverterToUCallback,
    context: *const *const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_getFromUCallBack(
    converter: *const UConverter,
    action: *UConverterFromUCallback,
    context: *const *const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_setToUCallBack(
    converter: *UConverter,
    newAction: UConverterToUCallback,
    newContext: *const c_void,
    oldAction: *UConverterToUCallback,
    oldContext: *const *const c_void,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_setFromUCallBack(
    converter: *UConverter,
    newAction: UConverterFromUCallback,
    newContext: *const c_void,
    oldAction: *UConverterFromUCallback,
    oldContext: *const *const c_void,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_fromUnicode(
    converter: *UConverter,
    target: **i8,
    targetLimit: *const i8,
    source: *const *const u16,
    sourceLimit: *const u16,
    offsets: *i32,
    flush: i8,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_toUnicode(
    converter: *UConverter,
    target: **u16,
    targetLimit: *const u16,
    source: *const *const i8,
    sourceLimit: *const i8,
    offsets: *i32,
    flush: i8,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_fromUChars(
    cnv: *UConverter,
    dest: *i8,
    destCapacity: i32,
    src: *const u16,
    srcLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucnv_toUChars(
    cnv: *UConverter,
    dest: *u16,
    destCapacity: i32,
    src: *const i8,
    srcLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucnv_getNextUChar(
    converter: *UConverter,
    source: *const *const i8,
    sourceLimit: *const i8,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucnv_convertEx(
    targetCnv: *UConverter,
    sourceCnv: *UConverter,
    target: **i8,
    targetLimit: *const i8,
    source: *const *const i8,
    sourceLimit: *const i8,
    pivotStart: *u16,
    pivotSource: **u16,
    pivotTarget: **u16,
    pivotLimit: *const u16,
    reset: i8,
    flush: i8,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_convert(
    toConverterName: *const i8,
    fromConverterName: *const i8,
    target: *i8,
    targetCapacity: i32,
    source: *const i8,
    sourceLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucnv_toAlgorithmic(
    algorithmicType: UConverterType,
    cnv: *UConverter,
    target: *i8,
    targetCapacity: i32,
    source: *const i8,
    sourceLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucnv_fromAlgorithmic(
    cnv: *UConverter,
    algorithmicType: UConverterType,
    target: *i8,
    targetCapacity: i32,
    source: *const i8,
    sourceLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucnv_flushCache(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucnv_countAvailable(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucnv_getAvailableName(
    n: i32,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ucnv_openAllNames(
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn ucnv_countAliases(
    alias: *const i8,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "icu" fn ucnv_getAlias(
    alias: *const i8,
    n: u16,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ucnv_getAliases(
    alias: *const i8,
    aliases: *const *const i8,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_openStandardNames(
    convName: *const i8,
    standard: *const i8,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn ucnv_countStandards(
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "icu" fn ucnv_getStandard(
    n: u16,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ucnv_getStandardName(
    name: *const i8,
    standard: *const i8,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ucnv_getCanonicalName(
    alias: *const i8,
    standard: *const i8,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ucnv_getDefaultName(
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ucnv_setDefaultName(
    name: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_fixFileSeparator(
    cnv: *const UConverter,
    source: *u16,
    sourceLen: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_isAmbiguous(
    cnv: *const UConverter,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ucnv_setFallback(
    cnv: *UConverter,
    usesFallback: i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_usesFallback(
    cnv: *const UConverter,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ucnv_detectUnicodeSignature(
    source: *const i8,
    sourceLength: i32,
    signatureLength: *i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ucnv_fromUCountPending(
    cnv: *const UConverter,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucnv_toUCountPending(
    cnv: *const UConverter,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucnv_isFixedWidth(
    cnv: *UConverter,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ucnv_cbFromUWriteBytes(
    args: *UConverterFromUnicodeArgs,
    source: *const i8,
    length: i32,
    offsetIndex: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_cbFromUWriteSub(
    args: *UConverterFromUnicodeArgs,
    offsetIndex: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_cbFromUWriteUChars(
    args: *UConverterFromUnicodeArgs,
    source: *const *const u16,
    sourceLimit: *const u16,
    offsetIndex: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_cbToUWriteUChars(
    args: *UConverterToUnicodeArgs,
    source: *const u16,
    length: i32,
    offsetIndex: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnv_cbToUWriteSub(
    args: *UConverterToUnicodeArgs,
    offsetIndex: i32,
    err: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn u_init(
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn u_cleanup(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn u_setMemoryFunctions(
    context: *const c_void,
    a: *UMemAllocFn,
    r: *UMemReallocFn,
    f: *UMemFreeFn,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn u_catopen(
    name: *const i8,
    locale: *const i8,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UResourceBundle;

pub extern "icu" fn u_catclose(
    catd: *UResourceBundle,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn u_catgets(
    catd: *UResourceBundle,
    set_num: i32,
    msg_num: i32,
    s: *const u16,
    len: *i32,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_hasBinaryProperty(
    c: i32,
    which: UProperty,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isUAlphabetic(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isULowercase(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isUUppercase(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isUWhiteSpace(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_getIntPropertyValue(
    c: i32,
    which: UProperty,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_getIntPropertyMinValue(
    which: UProperty,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_getIntPropertyMaxValue(
    which: UProperty,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_getNumericValue(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) f64;

pub extern "icu" fn u_islower(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isupper(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_istitle(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isdigit(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isalpha(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isalnum(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isxdigit(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_ispunct(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isgraph(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isblank(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isdefined(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isspace(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isJavaSpaceChar(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isWhitespace(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_iscntrl(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isISOControl(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isprint(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isbase(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_charDirection(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) UCharDirection;

pub extern "icu" fn u_isMirrored(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_charMirror(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_getBidiPairedBracket(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_charType(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_enumCharTypes(
    enumRange: *UCharEnumTypeRange,
    context: *const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn u_getCombiningClass(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "icu" fn u_charDigitValue(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ublock_getCode(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) UBlockCode;

pub extern "icu" fn u_charName(
    code: i32,
    nameChoice: UCharNameChoice,
    buffer: *i8,
    bufferLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_charFromName(
    nameChoice: UCharNameChoice,
    name: *const i8,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_enumCharNames(
    start: i32,
    limit: i32,
    @"fn": *UEnumCharNamesFn,
    context: *c_void,
    nameChoice: UCharNameChoice,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn u_getPropertyName(
    property: UProperty,
    nameChoice: UPropertyNameChoice,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn u_getPropertyEnum(
    alias: *const i8,
) callconv(@import("std").os.windows.WINAPI) UProperty;

pub extern "icu" fn u_getPropertyValueName(
    property: UProperty,
    value: i32,
    nameChoice: UPropertyNameChoice,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn u_getPropertyValueEnum(
    property: UProperty,
    alias: *const i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_isIDStart(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isIDPart(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isIDIgnorable(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isJavaIDStart(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_isJavaIDPart(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_tolower(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_toupper(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_totitle(
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_foldCase(
    c: i32,
    options: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_digit(
    ch: i32,
    radix: i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_forDigit(
    digit: i32,
    radix: i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_charAge(
    c: i32,
    versionArray: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn u_getUnicodeVersion(
    versionArray: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn u_getFC_NFKC_Closure(
    c: i32,
    dest: *u16,
    destCapacity: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubidi_open(
) callconv(@import("std").os.windows.WINAPI) *UBiDi;

pub extern "icu" fn ubidi_openSized(
    maxLength: i32,
    maxRunCount: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UBiDi;

pub extern "icu" fn ubidi_close(
    pBiDi: *UBiDi,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubidi_setInverse(
    pBiDi: *UBiDi,
    isInverse: i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubidi_isInverse(
    pBiDi: *UBiDi,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ubidi_orderParagraphsLTR(
    pBiDi: *UBiDi,
    orderParagraphsLTR: i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubidi_isOrderParagraphsLTR(
    pBiDi: *UBiDi,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ubidi_setReorderingMode(
    pBiDi: *UBiDi,
    reorderingMode: UBiDiReorderingMode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubidi_getReorderingMode(
    pBiDi: *UBiDi,
) callconv(@import("std").os.windows.WINAPI) UBiDiReorderingMode;

pub extern "icu" fn ubidi_setReorderingOptions(
    pBiDi: *UBiDi,
    reorderingOptions: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubidi_getReorderingOptions(
    pBiDi: *UBiDi,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "icu" fn ubidi_setContext(
    pBiDi: *UBiDi,
    prologue: *const u16,
    proLength: i32,
    epilogue: *const u16,
    epiLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubidi_setPara(
    pBiDi: *UBiDi,
    text: *const u16,
    length: i32,
    paraLevel: u8,
    embeddingLevels: *u8,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubidi_setLine(
    pParaBiDi: *const UBiDi,
    start: i32,
    limit: i32,
    pLineBiDi: *UBiDi,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubidi_getDirection(
    pBiDi: *const UBiDi,
) callconv(@import("std").os.windows.WINAPI) UBiDiDirection;

pub extern "icu" fn ubidi_getBaseDirection(
    text: *const u16,
    length: i32,
) callconv(@import("std").os.windows.WINAPI) UBiDiDirection;

pub extern "icu" fn ubidi_getText(
    pBiDi: *const UBiDi,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn ubidi_getLength(
    pBiDi: *const UBiDi,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubidi_getParaLevel(
    pBiDi: *const UBiDi,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "icu" fn ubidi_countParagraphs(
    pBiDi: *UBiDi,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubidi_getParagraph(
    pBiDi: *const UBiDi,
    charIndex: i32,
    pParaStart: *i32,
    pParaLimit: *i32,
    pParaLevel: *u8,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubidi_getParagraphByIndex(
    pBiDi: *const UBiDi,
    paraIndex: i32,
    pParaStart: *i32,
    pParaLimit: *i32,
    pParaLevel: *u8,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubidi_getLevelAt(
    pBiDi: *const UBiDi,
    charIndex: i32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "icu" fn ubidi_getLevels(
    pBiDi: *UBiDi,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "icu" fn ubidi_getLogicalRun(
    pBiDi: *const UBiDi,
    logicalPosition: i32,
    pLogicalLimit: *i32,
    pLevel: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubidi_countRuns(
    pBiDi: *UBiDi,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubidi_getVisualRun(
    pBiDi: *UBiDi,
    runIndex: i32,
    pLogicalStart: *i32,
    pLength: *i32,
) callconv(@import("std").os.windows.WINAPI) UBiDiDirection;

pub extern "icu" fn ubidi_getVisualIndex(
    pBiDi: *UBiDi,
    logicalIndex: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubidi_getLogicalIndex(
    pBiDi: *UBiDi,
    visualIndex: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubidi_getLogicalMap(
    pBiDi: *UBiDi,
    indexMap: *i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubidi_getVisualMap(
    pBiDi: *UBiDi,
    indexMap: *i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubidi_reorderLogical(
    levels: *const u8,
    length: i32,
    indexMap: *i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubidi_reorderVisual(
    levels: *const u8,
    length: i32,
    indexMap: *i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubidi_invertMap(
    srcMap: *const i32,
    destMap: *i32,
    length: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubidi_getProcessedLength(
    pBiDi: *const UBiDi,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubidi_getResultLength(
    pBiDi: *const UBiDi,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubidi_getCustomizedClass(
    pBiDi: *UBiDi,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) UCharDirection;

pub extern "icu" fn ubidi_setClassCallback(
    pBiDi: *UBiDi,
    newFn: *UBiDiClassCallback,
    newContext: *const c_void,
    oldFn: **UBiDiClassCallback,
    oldContext: *const *const c_void,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubidi_getClassCallback(
    pBiDi: *UBiDi,
    @"fn": **UBiDiClassCallback,
    context: *const *const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubidi_writeReordered(
    pBiDi: *UBiDi,
    dest: *u16,
    destSize: i32,
    options: u16,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubidi_writeReverse(
    src: *const u16,
    srcLength: i32,
    dest: *u16,
    destSize: i32,
    options: u16,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubiditransform_transform(
    pBiDiTransform: *UBiDiTransform,
    src: *const u16,
    srcLength: i32,
    dest: *u16,
    destSize: i32,
    inParaLevel: u8,
    inOrder: UBiDiOrder,
    outParaLevel: u8,
    outOrder: UBiDiOrder,
    doMirroring: UBiDiMirroring,
    shapingOptions: u32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "icu" fn ubiditransform_open(
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UBiDiTransform;

pub extern "icu" fn ubiditransform_close(
    pBidiTransform: *UBiDiTransform,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn utext_close(
    ut: *UText,
) callconv(@import("std").os.windows.WINAPI) *UText;

pub extern "icu" fn utext_openUTF8(
    ut: *UText,
    s: *const i8,
    length: i64,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UText;

pub extern "icu" fn utext_openUChars(
    ut: *UText,
    s: *const u16,
    length: i64,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UText;

pub extern "icu" fn utext_clone(
    dest: *UText,
    src: *const UText,
    deep: i8,
    readOnly: i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UText;

pub extern "icu" fn utext_equals(
    a: *const UText,
    b: *const UText,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn utext_nativeLength(
    ut: *UText,
) callconv(@import("std").os.windows.WINAPI) i64;

pub extern "icu" fn utext_isLengthExpensive(
    ut: *const UText,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn utext_char32At(
    ut: *UText,
    nativeIndex: i64,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn utext_current32(
    ut: *UText,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn utext_next32(
    ut: *UText,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn utext_previous32(
    ut: *UText,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn utext_next32From(
    ut: *UText,
    nativeIndex: i64,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn utext_previous32From(
    ut: *UText,
    nativeIndex: i64,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn utext_getNativeIndex(
    ut: *const UText,
) callconv(@import("std").os.windows.WINAPI) i64;

pub extern "icu" fn utext_setNativeIndex(
    ut: *UText,
    nativeIndex: i64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn utext_moveIndex32(
    ut: *UText,
    delta: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn utext_getPreviousNativeIndex(
    ut: *UText,
) callconv(@import("std").os.windows.WINAPI) i64;

pub extern "icu" fn utext_extract(
    ut: *UText,
    nativeStart: i64,
    nativeLimit: i64,
    dest: *u16,
    destCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn utext_isWritable(
    ut: *const UText,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn utext_hasMetaData(
    ut: *const UText,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn utext_replace(
    ut: *UText,
    nativeStart: i64,
    nativeLimit: i64,
    replacementText: *const u16,
    replacementLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn utext_copy(
    ut: *UText,
    nativeStart: i64,
    nativeLimit: i64,
    destIndex: i64,
    move: i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn utext_freeze(
    ut: *UText,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn utext_setup(
    ut: *UText,
    extraSpace: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UText;

pub extern "icu" fn uset_openEmpty(
) callconv(@import("std").os.windows.WINAPI) *USet;

pub extern "icu" fn uset_open(
    start: i32,
    end: i32,
) callconv(@import("std").os.windows.WINAPI) *USet;

pub extern "icu" fn uset_openPattern(
    pattern: *const u16,
    patternLength: i32,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *USet;

pub extern "icu" fn uset_openPatternOptions(
    pattern: *const u16,
    patternLength: i32,
    options: u32,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *USet;

pub extern "icu" fn uset_close(
    set: *USet,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_clone(
    set: *const USet,
) callconv(@import("std").os.windows.WINAPI) *USet;

pub extern "icu" fn uset_isFrozen(
    set: *const USet,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uset_freeze(
    set: *USet,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_cloneAsThawed(
    set: *const USet,
) callconv(@import("std").os.windows.WINAPI) *USet;

pub extern "icu" fn uset_set(
    set: *USet,
    start: i32,
    end: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_applyPattern(
    set: *USet,
    pattern: *const u16,
    patternLength: i32,
    options: u32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uset_applyIntPropertyValue(
    set: *USet,
    prop: UProperty,
    value: i32,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_applyPropertyAlias(
    set: *USet,
    prop: *const u16,
    propLength: i32,
    value: *const u16,
    valueLength: i32,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_resemblesPattern(
    pattern: *const u16,
    patternLength: i32,
    pos: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uset_toPattern(
    set: *const USet,
    result: *u16,
    resultCapacity: i32,
    escapeUnprintable: i8,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uset_add(
    set: *USet,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_addAll(
    set: *USet,
    additionalSet: *const USet,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_addRange(
    set: *USet,
    start: i32,
    end: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_addString(
    set: *USet,
    str: *const u16,
    strLen: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_addAllCodePoints(
    set: *USet,
    str: *const u16,
    strLen: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_remove(
    set: *USet,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_removeRange(
    set: *USet,
    start: i32,
    end: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_removeString(
    set: *USet,
    str: *const u16,
    strLen: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_removeAll(
    set: *USet,
    removeSet: *const USet,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_retain(
    set: *USet,
    start: i32,
    end: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_retainAll(
    set: *USet,
    retain: *const USet,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_compact(
    set: *USet,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_complement(
    set: *USet,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_complementAll(
    set: *USet,
    complement: *const USet,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_clear(
    set: *USet,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_closeOver(
    set: *USet,
    attributes: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_removeAllStrings(
    set: *USet,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_isEmpty(
    set: *const USet,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uset_contains(
    set: *const USet,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uset_containsRange(
    set: *const USet,
    start: i32,
    end: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uset_containsString(
    set: *const USet,
    str: *const u16,
    strLen: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uset_indexOf(
    set: *const USet,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uset_charAt(
    set: *const USet,
    charIndex: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uset_size(
    set: *const USet,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uset_getItemCount(
    set: *const USet,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uset_getItem(
    set: *const USet,
    itemIndex: i32,
    start: *i32,
    end: *i32,
    str: *u16,
    strCapacity: i32,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uset_containsAll(
    set1: *const USet,
    set2: *const USet,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uset_containsAllCodePoints(
    set: *const USet,
    str: *const u16,
    strLen: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uset_containsNone(
    set1: *const USet,
    set2: *const USet,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uset_containsSome(
    set1: *const USet,
    set2: *const USet,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uset_span(
    set: *const USet,
    s: *const u16,
    length: i32,
    spanCondition: USetSpanCondition,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uset_spanBack(
    set: *const USet,
    s: *const u16,
    length: i32,
    spanCondition: USetSpanCondition,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uset_spanUTF8(
    set: *const USet,
    s: *const i8,
    length: i32,
    spanCondition: USetSpanCondition,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uset_spanBackUTF8(
    set: *const USet,
    s: *const i8,
    length: i32,
    spanCondition: USetSpanCondition,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uset_equals(
    set1: *const USet,
    set2: *const USet,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uset_serialize(
    set: *const USet,
    dest: *u16,
    destCapacity: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uset_getSerializedSet(
    fillSet: *USerializedSet,
    src: *const u16,
    srcLength: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uset_setSerializedToOne(
    fillSet: *USerializedSet,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uset_serializedContains(
    set: *const USerializedSet,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uset_getSerializedRangeCount(
    set: *const USerializedSet,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uset_getSerializedRange(
    set: *const USerializedSet,
    rangeIndex: i32,
    pStart: *i32,
    pEnd: *i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn unorm2_getNFCInstance(
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UNormalizer2;

pub extern "icu" fn unorm2_getNFDInstance(
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UNormalizer2;

pub extern "icu" fn unorm2_getNFKCInstance(
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UNormalizer2;

pub extern "icu" fn unorm2_getNFKDInstance(
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UNormalizer2;

pub extern "icu" fn unorm2_getNFKCCasefoldInstance(
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UNormalizer2;

pub extern "icu" fn unorm2_getInstance(
    packageName: *const i8,
    name: *const i8,
    mode: UNormalization2Mode,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UNormalizer2;

pub extern "icu" fn unorm2_openFiltered(
    norm2: *const UNormalizer2,
    filterSet: *const USet,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UNormalizer2;

pub extern "icu" fn unorm2_close(
    norm2: *UNormalizer2,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn unorm2_normalize(
    norm2: *const UNormalizer2,
    src: *const u16,
    length: i32,
    dest: *u16,
    capacity: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unorm2_normalizeSecondAndAppend(
    norm2: *const UNormalizer2,
    first: *u16,
    firstLength: i32,
    firstCapacity: i32,
    second: *const u16,
    secondLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unorm2_append(
    norm2: *const UNormalizer2,
    first: *u16,
    firstLength: i32,
    firstCapacity: i32,
    second: *const u16,
    secondLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unorm2_getDecomposition(
    norm2: *const UNormalizer2,
    c: i32,
    decomposition: *u16,
    capacity: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unorm2_getRawDecomposition(
    norm2: *const UNormalizer2,
    c: i32,
    decomposition: *u16,
    capacity: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unorm2_composePair(
    norm2: *const UNormalizer2,
    a: i32,
    b: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unorm2_getCombiningClass(
    norm2: *const UNormalizer2,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "icu" fn unorm2_isNormalized(
    norm2: *const UNormalizer2,
    s: *const u16,
    length: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn unorm2_quickCheck(
    norm2: *const UNormalizer2,
    s: *const u16,
    length: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) UNormalizationCheckResult;

pub extern "icu" fn unorm2_spanQuickCheckYes(
    norm2: *const UNormalizer2,
    s: *const u16,
    length: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unorm2_hasBoundaryBefore(
    norm2: *const UNormalizer2,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn unorm2_hasBoundaryAfter(
    norm2: *const UNormalizer2,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn unorm2_isInert(
    norm2: *const UNormalizer2,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn unorm_compare(
    s1: *const u16,
    length1: i32,
    s2: *const u16,
    length2: i32,
    options: u32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucnvsel_open(
    converterList: *const *const i8,
    converterListSize: i32,
    excludedCodePoints: *const USet,
    whichSet: UConverterUnicodeSet,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UConverterSelector;

pub extern "icu" fn ucnvsel_close(
    sel: *UConverterSelector,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucnvsel_openFromSerialized(
    buffer: *const c_void,
    length: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UConverterSelector;

pub extern "icu" fn ucnvsel_serialize(
    sel: *const UConverterSelector,
    buffer: *c_void,
    bufferCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucnvsel_selectForString(
    sel: *const UConverterSelector,
    s: *const u16,
    length: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn ucnvsel_selectForUTF8(
    sel: *const UConverterSelector,
    s: *const i8,
    length: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn u_charsToUChars(
    cs: *const i8,
    us: *u16,
    length: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn u_UCharsToChars(
    us: *const u16,
    cs: *i8,
    length: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn u_strlen(
    s: *const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_countChar32(
    s: *const u16,
    length: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_strHasMoreChar32Than(
    s: *const u16,
    length: i32,
    number: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn u_strcat(
    dst: *u16,
    src: *const u16,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strncat(
    dst: *u16,
    src: *const u16,
    n: i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strstr(
    s: *const u16,
    substring: *const u16,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strFindFirst(
    s: *const u16,
    length: i32,
    substring: *const u16,
    subLength: i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strchr(
    s: *const u16,
    c: u16,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strchr32(
    s: *const u16,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strrstr(
    s: *const u16,
    substring: *const u16,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strFindLast(
    s: *const u16,
    length: i32,
    substring: *const u16,
    subLength: i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strrchr(
    s: *const u16,
    c: u16,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strrchr32(
    s: *const u16,
    c: i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strpbrk(
    string: *const u16,
    matchSet: *const u16,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strcspn(
    string: *const u16,
    matchSet: *const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_strspn(
    string: *const u16,
    matchSet: *const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_strtok_r(
    src: *u16,
    delim: *const u16,
    saveState: **u16,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strcmp(
    s1: *const u16,
    s2: *const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_strcmpCodePointOrder(
    s1: *const u16,
    s2: *const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_strCompare(
    s1: *const u16,
    length1: i32,
    s2: *const u16,
    length2: i32,
    codePointOrder: i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_strCompareIter(
    iter1: *UCharIterator,
    iter2: *UCharIterator,
    codePointOrder: i8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_strCaseCompare(
    s1: *const u16,
    length1: i32,
    s2: *const u16,
    length2: i32,
    options: u32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_strncmp(
    ucs1: *const u16,
    ucs2: *const u16,
    n: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_strncmpCodePointOrder(
    s1: *const u16,
    s2: *const u16,
    n: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_strcasecmp(
    s1: *const u16,
    s2: *const u16,
    options: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_strncasecmp(
    s1: *const u16,
    s2: *const u16,
    n: i32,
    options: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_memcasecmp(
    s1: *const u16,
    s2: *const u16,
    length: i32,
    options: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_strcpy(
    dst: *u16,
    src: *const u16,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strncpy(
    dst: *u16,
    src: *const u16,
    n: i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_uastrcpy(
    dst: *u16,
    src: *const i8,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_uastrncpy(
    dst: *u16,
    src: *const i8,
    n: i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_austrcpy(
    dst: *i8,
    src: *const u16,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn u_austrncpy(
    dst: *i8,
    src: *const u16,
    n: i32,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn u_memcpy(
    dest: *u16,
    src: *const u16,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_memmove(
    dest: *u16,
    src: *const u16,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_memset(
    dest: *u16,
    c: u16,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_memcmp(
    buf1: *const u16,
    buf2: *const u16,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_memcmpCodePointOrder(
    s1: *const u16,
    s2: *const u16,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_memchr(
    s: *const u16,
    c: u16,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_memchr32(
    s: *const u16,
    c: i32,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_memrchr(
    s: *const u16,
    c: u16,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_memrchr32(
    s: *const u16,
    c: i32,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_unescape(
    src: *const i8,
    dest: *u16,
    destCapacity: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_unescapeAt(
    charAt: UNESCAPE_CHAR_AT,
    offset: *i32,
    length: i32,
    context: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_strToUpper(
    dest: *u16,
    destCapacity: i32,
    src: *const u16,
    srcLength: i32,
    locale: *const i8,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_strToLower(
    dest: *u16,
    destCapacity: i32,
    src: *const u16,
    srcLength: i32,
    locale: *const i8,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_strToTitle(
    dest: *u16,
    destCapacity: i32,
    src: *const u16,
    srcLength: i32,
    titleIter: *UBreakIterator,
    locale: *const i8,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_strFoldCase(
    dest: *u16,
    destCapacity: i32,
    src: *const u16,
    srcLength: i32,
    options: u32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_strToWCS(
    dest: PWSTR,
    destCapacity: i32,
    pDestLength: *i32,
    src: *const u16,
    srcLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "icu" fn u_strFromWCS(
    dest: *u16,
    destCapacity: i32,
    pDestLength: *i32,
    src: [*:0]const u16,
    srcLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strToUTF8(
    dest: *i8,
    destCapacity: i32,
    pDestLength: *i32,
    src: *const u16,
    srcLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn u_strFromUTF8(
    dest: *u16,
    destCapacity: i32,
    pDestLength: *i32,
    src: *const i8,
    srcLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strToUTF8WithSub(
    dest: *i8,
    destCapacity: i32,
    pDestLength: *i32,
    src: *const u16,
    srcLength: i32,
    subchar: i32,
    pNumSubstitutions: *i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn u_strFromUTF8WithSub(
    dest: *u16,
    destCapacity: i32,
    pDestLength: *i32,
    src: *const i8,
    srcLength: i32,
    subchar: i32,
    pNumSubstitutions: *i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strFromUTF8Lenient(
    dest: *u16,
    destCapacity: i32,
    pDestLength: *i32,
    src: *const i8,
    srcLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strToUTF32(
    dest: *i32,
    destCapacity: i32,
    pDestLength: *i32,
    src: *const u16,
    srcLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i32;

pub extern "icu" fn u_strFromUTF32(
    dest: *u16,
    destCapacity: i32,
    pDestLength: *i32,
    src: *const i32,
    srcLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strToUTF32WithSub(
    dest: *i32,
    destCapacity: i32,
    pDestLength: *i32,
    src: *const u16,
    srcLength: i32,
    subchar: i32,
    pNumSubstitutions: *i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i32;

pub extern "icu" fn u_strFromUTF32WithSub(
    dest: *u16,
    destCapacity: i32,
    pDestLength: *i32,
    src: *const i32,
    srcLength: i32,
    subchar: i32,
    pNumSubstitutions: *i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn u_strToJavaModifiedUTF8(
    dest: *i8,
    destCapacity: i32,
    pDestLength: *i32,
    src: *const u16,
    srcLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn u_strFromJavaModifiedUTF8WithSub(
    dest: *u16,
    destCapacity: i32,
    pDestLength: *i32,
    src: *const i8,
    srcLength: i32,
    subchar: i32,
    pNumSubstitutions: *i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn ucasemap_open(
    locale: *const i8,
    options: u32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UCaseMap;

pub extern "icu" fn ucasemap_close(
    csm: *UCaseMap,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucasemap_getLocale(
    csm: *const UCaseMap,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ucasemap_getOptions(
    csm: *const UCaseMap,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "icu" fn ucasemap_setLocale(
    csm: *UCaseMap,
    locale: *const i8,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucasemap_setOptions(
    csm: *UCaseMap,
    options: u32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucasemap_getBreakIterator(
    csm: *const UCaseMap,
) callconv(@import("std").os.windows.WINAPI) *UBreakIterator;

pub extern "icu" fn ucasemap_setBreakIterator(
    csm: *UCaseMap,
    iterToAdopt: *UBreakIterator,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucasemap_toTitle(
    csm: *UCaseMap,
    dest: *u16,
    destCapacity: i32,
    src: *const u16,
    srcLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucasemap_utf8ToLower(
    csm: *const UCaseMap,
    dest: *i8,
    destCapacity: i32,
    src: *const i8,
    srcLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucasemap_utf8ToUpper(
    csm: *const UCaseMap,
    dest: *i8,
    destCapacity: i32,
    src: *const i8,
    srcLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucasemap_utf8ToTitle(
    csm: *UCaseMap,
    dest: *i8,
    destCapacity: i32,
    src: *const i8,
    srcLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucasemap_utf8FoldCase(
    csm: *const UCaseMap,
    dest: *i8,
    destCapacity: i32,
    src: *const i8,
    srcLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn usprep_open(
    path: *const i8,
    fileName: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UStringPrepProfile;

pub extern "icu" fn usprep_openByType(
    type: UStringPrepProfileType,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UStringPrepProfile;

pub extern "icu" fn usprep_close(
    profile: *UStringPrepProfile,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn usprep_prepare(
    prep: *const UStringPrepProfile,
    src: *const u16,
    srcLength: i32,
    dest: *u16,
    destCapacity: i32,
    options: i32,
    parseError: *UParseError,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uidna_openUTS46(
    options: u32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UIDNA;

pub extern "icu" fn uidna_close(
    idna: *UIDNA,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uidna_labelToASCII(
    idna: *const UIDNA,
    label: *const u16,
    length: i32,
    dest: *u16,
    capacity: i32,
    pInfo: *UIDNAInfo,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uidna_labelToUnicode(
    idna: *const UIDNA,
    label: *const u16,
    length: i32,
    dest: *u16,
    capacity: i32,
    pInfo: *UIDNAInfo,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uidna_nameToASCII(
    idna: *const UIDNA,
    name: *const u16,
    length: i32,
    dest: *u16,
    capacity: i32,
    pInfo: *UIDNAInfo,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uidna_nameToUnicode(
    idna: *const UIDNA,
    name: *const u16,
    length: i32,
    dest: *u16,
    capacity: i32,
    pInfo: *UIDNAInfo,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uidna_labelToASCII_UTF8(
    idna: *const UIDNA,
    label: *const i8,
    length: i32,
    dest: *i8,
    capacity: i32,
    pInfo: *UIDNAInfo,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uidna_labelToUnicodeUTF8(
    idna: *const UIDNA,
    label: *const i8,
    length: i32,
    dest: *i8,
    capacity: i32,
    pInfo: *UIDNAInfo,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uidna_nameToASCII_UTF8(
    idna: *const UIDNA,
    name: *const i8,
    length: i32,
    dest: *i8,
    capacity: i32,
    pInfo: *UIDNAInfo,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uidna_nameToUnicodeUTF8(
    idna: *const UIDNA,
    name: *const i8,
    length: i32,
    dest: *i8,
    capacity: i32,
    pInfo: *UIDNAInfo,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubrk_open(
    type: UBreakIteratorType,
    locale: *const i8,
    text: *const u16,
    textLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UBreakIterator;

pub extern "icu" fn ubrk_openRules(
    rules: *const u16,
    rulesLength: i32,
    text: *const u16,
    textLength: i32,
    parseErr: *UParseError,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UBreakIterator;

pub extern "icu" fn ubrk_openBinaryRules(
    binaryRules: *const u8,
    rulesLength: i32,
    text: *const u16,
    textLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UBreakIterator;

pub extern "icu" fn ubrk_safeClone(
    bi: *const UBreakIterator,
    stackBuffer: *c_void,
    pBufferSize: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UBreakIterator;

pub extern "icu" fn ubrk_close(
    bi: *UBreakIterator,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubrk_setText(
    bi: *UBreakIterator,
    text: *const u16,
    textLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubrk_setUText(
    bi: *UBreakIterator,
    text: *UText,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubrk_current(
    bi: *const UBreakIterator,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubrk_next(
    bi: *UBreakIterator,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubrk_previous(
    bi: *UBreakIterator,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubrk_first(
    bi: *UBreakIterator,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubrk_last(
    bi: *UBreakIterator,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubrk_preceding(
    bi: *UBreakIterator,
    offset: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubrk_following(
    bi: *UBreakIterator,
    offset: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubrk_getAvailable(
    index: i32,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ubrk_countAvailable(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubrk_isBoundary(
    bi: *UBreakIterator,
    offset: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ubrk_getRuleStatus(
    bi: *UBreakIterator,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubrk_getRuleStatusVec(
    bi: *UBreakIterator,
    fillInVec: *i32,
    capacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ubrk_getLocaleByType(
    bi: *const UBreakIterator,
    type: ULocDataLocaleType,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ubrk_refreshUText(
    bi: *UBreakIterator,
    text: *UText,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ubrk_getBinaryRules(
    bi: *UBreakIterator,
    binaryRules: *u8,
    rulesCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_getDataVersion(
    dataVersionFillin: *u8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucal_openTimeZoneIDEnumeration(
    zoneType: USystemTimeZoneType,
    region: *const i8,
    rawOffset: *const i32,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn ucal_openTimeZones(
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn ucal_openCountryTimeZones(
    country: *const i8,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn ucal_getDefaultTimeZone(
    result: *u16,
    resultCapacity: i32,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucal_setDefaultTimeZone(
    zoneID: *const u16,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucal_getDSTSavings(
    zoneID: *const u16,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucal_getNow(
) callconv(@import("std").os.windows.WINAPI) f64;

pub extern "icu" fn ucal_open(
    zoneID: *const u16,
    len: i32,
    locale: *const i8,
    type: UCalendarType,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn ucal_close(
    cal: **c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucal_clone(
    cal: *const *const c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn ucal_setTimeZone(
    cal: **c_void,
    zoneID: *const u16,
    len: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucal_getTimeZoneID(
    cal: *const *const c_void,
    result: *u16,
    resultLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucal_getTimeZoneDisplayName(
    cal: *const *const c_void,
    type: UCalendarDisplayNameType,
    locale: *const i8,
    result: *u16,
    resultLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucal_inDaylightTime(
    cal: *const *const c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ucal_setGregorianChange(
    cal: **c_void,
    date: f64,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucal_getGregorianChange(
    cal: *const *const c_void,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) f64;

pub extern "icu" fn ucal_getAttribute(
    cal: *const *const c_void,
    attr: UCalendarAttribute,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucal_setAttribute(
    cal: **c_void,
    attr: UCalendarAttribute,
    newValue: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucal_getAvailable(
    localeIndex: i32,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ucal_countAvailable(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucal_getMillis(
    cal: *const *const c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) f64;

pub extern "icu" fn ucal_setMillis(
    cal: **c_void,
    dateTime: f64,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucal_setDate(
    cal: **c_void,
    year: i32,
    month: i32,
    date: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucal_setDateTime(
    cal: **c_void,
    year: i32,
    month: i32,
    date: i32,
    hour: i32,
    minute: i32,
    second: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucal_equivalentTo(
    cal1: *const *const c_void,
    cal2: *const *const c_void,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ucal_add(
    cal: **c_void,
    field: UCalendarDateFields,
    amount: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucal_roll(
    cal: **c_void,
    field: UCalendarDateFields,
    amount: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucal_get(
    cal: *const *const c_void,
    field: UCalendarDateFields,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucal_set(
    cal: **c_void,
    field: UCalendarDateFields,
    value: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucal_isSet(
    cal: *const *const c_void,
    field: UCalendarDateFields,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ucal_clearField(
    cal: **c_void,
    field: UCalendarDateFields,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucal_clear(
    calendar: **c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucal_getLimit(
    cal: *const *const c_void,
    field: UCalendarDateFields,
    type: UCalendarLimitType,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucal_getLocaleByType(
    cal: *const *const c_void,
    type: ULocDataLocaleType,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ucal_getTZDataVersion(
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ucal_getCanonicalTimeZoneID(
    id: *const u16,
    len: i32,
    result: *u16,
    resultCapacity: i32,
    isSystemID: *i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucal_getType(
    cal: *const *const c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ucal_getKeywordValuesForLocale(
    key: *const i8,
    locale: *const i8,
    commonlyUsed: i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn ucal_getDayOfWeekType(
    cal: *const *const c_void,
    dayOfWeek: UCalendarDaysOfWeek,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) UCalendarWeekdayType;

pub extern "icu" fn ucal_getWeekendTransition(
    cal: *const *const c_void,
    dayOfWeek: UCalendarDaysOfWeek,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucal_isWeekend(
    cal: *const *const c_void,
    date: f64,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ucal_getFieldDifference(
    cal: **c_void,
    target: f64,
    field: UCalendarDateFields,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucal_getTimeZoneTransitionDate(
    cal: *const *const c_void,
    type: UTimeZoneTransitionType,
    transition: *f64,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ucal_getWindowsTimeZoneID(
    id: *const u16,
    len: i32,
    winid: *u16,
    winidCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucal_getTimeZoneIDForWindowsID(
    winid: *const u16,
    len: i32,
    region: *const i8,
    id: *u16,
    idCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_open(
    loc: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UCollator;

pub extern "icu" fn ucol_openRules(
    rules: *const u16,
    rulesLength: i32,
    normalizationMode: UColAttributeValue,
    strength: UColAttributeValue,
    parseError: *UParseError,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UCollator;

pub extern "icu" fn ucol_getContractionsAndExpansions(
    coll: *const UCollator,
    contractions: *USet,
    expansions: *USet,
    addPrefixes: i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucol_close(
    coll: *UCollator,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucol_strcoll(
    coll: *const UCollator,
    source: *const u16,
    sourceLength: i32,
    target: *const u16,
    targetLength: i32,
) callconv(@import("std").os.windows.WINAPI) UCollationResult;

pub extern "icu" fn ucol_strcollUTF8(
    coll: *const UCollator,
    source: *const i8,
    sourceLength: i32,
    target: *const i8,
    targetLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) UCollationResult;

pub extern "icu" fn ucol_greater(
    coll: *const UCollator,
    source: *const u16,
    sourceLength: i32,
    target: *const u16,
    targetLength: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ucol_greaterOrEqual(
    coll: *const UCollator,
    source: *const u16,
    sourceLength: i32,
    target: *const u16,
    targetLength: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ucol_equal(
    coll: *const UCollator,
    source: *const u16,
    sourceLength: i32,
    target: *const u16,
    targetLength: i32,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ucol_strcollIter(
    coll: *const UCollator,
    sIter: *UCharIterator,
    tIter: *UCharIterator,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) UCollationResult;

pub extern "icu" fn ucol_getStrength(
    coll: *const UCollator,
) callconv(@import("std").os.windows.WINAPI) UColAttributeValue;

pub extern "icu" fn ucol_setStrength(
    coll: *UCollator,
    strength: UColAttributeValue,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucol_getReorderCodes(
    coll: *const UCollator,
    dest: *i32,
    destCapacity: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_setReorderCodes(
    coll: *UCollator,
    reorderCodes: *const i32,
    reorderCodesLength: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucol_getEquivalentReorderCodes(
    reorderCode: i32,
    dest: *i32,
    destCapacity: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_getDisplayName(
    objLoc: *const i8,
    dispLoc: *const i8,
    result: *u16,
    resultLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_getAvailable(
    localeIndex: i32,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ucol_countAvailable(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_openAvailableLocales(
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn ucol_getKeywords(
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn ucol_getKeywordValues(
    keyword: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn ucol_getKeywordValuesForLocale(
    key: *const i8,
    locale: *const i8,
    commonlyUsed: i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn ucol_getFunctionalEquivalent(
    result: *i8,
    resultCapacity: i32,
    keyword: *const i8,
    locale: *const i8,
    isAvailable: *i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_getRules(
    coll: *const UCollator,
    length: *i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn ucol_getSortKey(
    coll: *const UCollator,
    source: *const u16,
    sourceLength: i32,
    result: *u8,
    resultLength: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_nextSortKeyPart(
    coll: *const UCollator,
    iter: *UCharIterator,
    state: *u32,
    dest: *u8,
    count: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_getBound(
    source: *const u8,
    sourceLength: i32,
    boundType: UColBoundMode,
    noOfLevels: u32,
    result: *u8,
    resultLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_getVersion(
    coll: *const UCollator,
    info: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucol_getUCAVersion(
    coll: *const UCollator,
    info: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucol_mergeSortkeys(
    src1: *const u8,
    src1Length: i32,
    src2: *const u8,
    src2Length: i32,
    dest: *u8,
    destCapacity: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_setAttribute(
    coll: *UCollator,
    attr: UColAttribute,
    value: UColAttributeValue,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucol_getAttribute(
    coll: *const UCollator,
    attr: UColAttribute,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) UColAttributeValue;

pub extern "icu" fn ucol_setMaxVariable(
    coll: *UCollator,
    group: UColReorderCode,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucol_getMaxVariable(
    coll: *const UCollator,
) callconv(@import("std").os.windows.WINAPI) UColReorderCode;

pub extern "icu" fn ucol_getVariableTop(
    coll: *const UCollator,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "icu" fn ucol_safeClone(
    coll: *const UCollator,
    stackBuffer: *c_void,
    pBufferSize: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UCollator;

pub extern "icu" fn ucol_getRulesEx(
    coll: *const UCollator,
    delta: UColRuleOption,
    buffer: *u16,
    bufferLen: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_getLocaleByType(
    coll: *const UCollator,
    type: ULocDataLocaleType,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ucol_getTailoredSet(
    coll: *const UCollator,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *USet;

pub extern "icu" fn ucol_cloneBinary(
    coll: *const UCollator,
    buffer: *u8,
    capacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_openBinary(
    bin: *const u8,
    length: i32,
    base: *const UCollator,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UCollator;

pub extern "icu" fn ucol_openElements(
    coll: *const UCollator,
    text: *const u16,
    textLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UCollationElements;

pub extern "icu" fn ucol_keyHashCode(
    key: *const u8,
    length: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_closeElements(
    elems: *UCollationElements,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucol_reset(
    elems: *UCollationElements,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucol_next(
    elems: *UCollationElements,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_previous(
    elems: *UCollationElements,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_getMaxExpansion(
    elems: *const UCollationElements,
    order: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_setText(
    elems: *UCollationElements,
    text: *const u16,
    textLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucol_getOffset(
    elems: *const UCollationElements,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_setOffset(
    elems: *UCollationElements,
    offset: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucol_primaryOrder(
    order: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_secondaryOrder(
    order: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucol_tertiaryOrder(
    order: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucsdet_open(
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UCharsetDetector;

pub extern "icu" fn ucsdet_close(
    ucsd: *UCharsetDetector,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucsdet_setText(
    ucsd: *UCharsetDetector,
    textIn: *const i8,
    len: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucsdet_setDeclaredEncoding(
    ucsd: *UCharsetDetector,
    encoding: *const i8,
    length: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ucsdet_detect(
    ucsd: *UCharsetDetector,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UCharsetMatch;

pub extern "icu" fn ucsdet_detectAll(
    ucsd: *UCharsetDetector,
    matchesFound: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) **UCharsetMatch;

pub extern "icu" fn ucsdet_getName(
    ucsm: *const UCharsetMatch,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ucsdet_getConfidence(
    ucsm: *const UCharsetMatch,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucsdet_getLanguage(
    ucsm: *const UCharsetMatch,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn ucsdet_getUChars(
    ucsm: *const UCharsetMatch,
    buf: *u16,
    cap: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ucsdet_getAllDetectableCharsets(
    ucsd: *const UCharsetDetector,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn ucsdet_isInputFilterEnabled(
    ucsd: *const UCharsetDetector,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ucsdet_enableInputFilter(
    ucsd: *UCharsetDetector,
    filter: i8,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn udatpg_open(
    locale: *const i8,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn udatpg_openEmpty(
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn udatpg_close(
    dtpg: **c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn udatpg_clone(
    dtpg: *const *const c_void,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn udatpg_getBestPattern(
    dtpg: **c_void,
    skeleton: *const u16,
    length: i32,
    bestPattern: *u16,
    capacity: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn udatpg_getBestPatternWithOptions(
    dtpg: **c_void,
    skeleton: *const u16,
    length: i32,
    options: UDateTimePatternMatchOptions,
    bestPattern: *u16,
    capacity: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn udatpg_getSkeleton(
    unusedDtpg: **c_void,
    pattern: *const u16,
    length: i32,
    skeleton: *u16,
    capacity: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn udatpg_getBaseSkeleton(
    unusedDtpg: **c_void,
    pattern: *const u16,
    length: i32,
    baseSkeleton: *u16,
    capacity: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn udatpg_addPattern(
    dtpg: **c_void,
    pattern: *const u16,
    patternLength: i32,
    override: i8,
    conflictingPattern: *u16,
    capacity: i32,
    pLength: *i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) UDateTimePatternConflict;

pub extern "icu" fn udatpg_setAppendItemFormat(
    dtpg: **c_void,
    field: UDateTimePatternField,
    value: *const u16,
    length: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn udatpg_getAppendItemFormat(
    dtpg: *const *const c_void,
    field: UDateTimePatternField,
    pLength: *i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn udatpg_setAppendItemName(
    dtpg: **c_void,
    field: UDateTimePatternField,
    value: *const u16,
    length: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn udatpg_getAppendItemName(
    dtpg: *const *const c_void,
    field: UDateTimePatternField,
    pLength: *i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn udatpg_getFieldDisplayName(
    dtpg: *const *const c_void,
    field: UDateTimePatternField,
    width: UDateTimePGDisplayWidth,
    fieldName: *u16,
    capacity: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn udatpg_setDateTimeFormat(
    dtpg: *const *const c_void,
    dtFormat: *const u16,
    length: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn udatpg_getDateTimeFormat(
    dtpg: *const *const c_void,
    pLength: *i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn udatpg_setDecimal(
    dtpg: **c_void,
    decimal: *const u16,
    length: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn udatpg_getDecimal(
    dtpg: *const *const c_void,
    pLength: *i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn udatpg_replaceFieldTypes(
    dtpg: **c_void,
    pattern: *const u16,
    patternLength: i32,
    skeleton: *const u16,
    skeletonLength: i32,
    dest: *u16,
    destCapacity: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn udatpg_replaceFieldTypesWithOptions(
    dtpg: **c_void,
    pattern: *const u16,
    patternLength: i32,
    skeleton: *const u16,
    skeletonLength: i32,
    options: UDateTimePatternMatchOptions,
    dest: *u16,
    destCapacity: i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn udatpg_openSkeletons(
    dtpg: *const *const c_void,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn udatpg_openBaseSkeletons(
    dtpg: *const *const c_void,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn udatpg_getPatternForSkeleton(
    dtpg: *const *const c_void,
    skeleton: *const u16,
    skeletonLength: i32,
    pLength: *i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn ufieldpositer_open(
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UFieldPositionIterator;

pub extern "icu" fn ufieldpositer_close(
    fpositer: *UFieldPositionIterator,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ufieldpositer_next(
    fpositer: *UFieldPositionIterator,
    beginIndex: *i32,
    endIndex: *i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ufmt_open(
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn ufmt_close(
    fmt: **c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ufmt_getType(
    fmt: *const *const c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) UFormattableType;

pub extern "icu" fn ufmt_isNumeric(
    fmt: *const *const c_void,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ufmt_getDate(
    fmt: *const *const c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) f64;

pub extern "icu" fn ufmt_getDouble(
    fmt: **c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) f64;

pub extern "icu" fn ufmt_getLong(
    fmt: **c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ufmt_getInt64(
    fmt: **c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i64;

pub extern "icu" fn ufmt_getObject(
    fmt: *const *const c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "icu" fn ufmt_getUChars(
    fmt: **c_void,
    len: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn ufmt_getArrayLength(
    fmt: *const *const c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ufmt_getArrayItemByIndex(
    fmt: **c_void,
    n: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn ufmt_getDecNumChars(
    fmt: **c_void,
    len: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn udtitvfmt_open(
    locale: *const i8,
    skeleton: *const u16,
    skeletonLength: i32,
    tzID: *const u16,
    tzIDLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UDateIntervalFormat;

pub extern "icu" fn udtitvfmt_close(
    formatter: *UDateIntervalFormat,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn udtitvfmt_format(
    formatter: *const UDateIntervalFormat,
    fromDate: f64,
    toDate: f64,
    result: *u16,
    resultCapacity: i32,
    position: *UFieldPosition,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ugender_getInstance(
    locale: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UGenderInfo;

pub extern "icu" fn ugender_getListGender(
    genderInfo: *const UGenderInfo,
    genders: *const UGender,
    size: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) UGender;

pub extern "icu" fn ulistfmt_open(
    locale: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UListFormatter;

pub extern "icu" fn ulistfmt_close(
    listfmt: *UListFormatter,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ulistfmt_format(
    listfmt: *const UListFormatter,
    strings: *const *const u16,
    stringLengths: *const i32,
    stringCount: i32,
    result: *u16,
    resultCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ulocdata_open(
    localeID: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *ULocaleData;

pub extern "icu" fn ulocdata_close(
    uld: *ULocaleData,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ulocdata_setNoSubstitute(
    uld: *ULocaleData,
    setting: i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ulocdata_getNoSubstitute(
    uld: *ULocaleData,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn ulocdata_getExemplarSet(
    uld: *ULocaleData,
    fillIn: *USet,
    options: u32,
    extype: ULocaleDataExemplarSetType,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *USet;

pub extern "icu" fn ulocdata_getDelimiter(
    uld: *ULocaleData,
    type: ULocaleDataDelimiterType,
    result: *u16,
    resultLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ulocdata_getMeasurementSystem(
    localeID: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) UMeasurementSystem;

pub extern "icu" fn ulocdata_getPaperSize(
    localeID: *const i8,
    height: *i32,
    width: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ulocdata_getCLDRVersion(
    versionArray: *u8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ulocdata_getLocaleDisplayPattern(
    uld: *ULocaleData,
    pattern: *u16,
    patternCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ulocdata_getLocaleSeparator(
    uld: *ULocaleData,
    separator: *u16,
    separatorCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_formatMessage(
    locale: *const i8,
    pattern: *const u16,
    patternLength: i32,
    result: *u16,
    resultLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_vformatMessage(
    locale: *const i8,
    pattern: *const u16,
    patternLength: i32,
    result: *u16,
    resultLength: i32,
    ap: *i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_parseMessage(
    locale: *const i8,
    pattern: *const u16,
    patternLength: i32,
    source: *const u16,
    sourceLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn u_vparseMessage(
    locale: *const i8,
    pattern: *const u16,
    patternLength: i32,
    source: *const u16,
    sourceLength: i32,
    ap: *i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn u_formatMessageWithError(
    locale: *const i8,
    pattern: *const u16,
    patternLength: i32,
    result: *u16,
    resultLength: i32,
    parseError: *UParseError,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_vformatMessageWithError(
    locale: *const i8,
    pattern: *const u16,
    patternLength: i32,
    result: *u16,
    resultLength: i32,
    parseError: *UParseError,
    ap: *i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn u_parseMessageWithError(
    locale: *const i8,
    pattern: *const u16,
    patternLength: i32,
    source: *const u16,
    sourceLength: i32,
    parseError: *UParseError,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn u_vparseMessageWithError(
    locale: *const i8,
    pattern: *const u16,
    patternLength: i32,
    source: *const u16,
    sourceLength: i32,
    ap: *i8,
    parseError: *UParseError,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn umsg_open(
    pattern: *const u16,
    patternLength: i32,
    locale: *const i8,
    parseError: *UParseError,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn umsg_close(
    format: **c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn umsg_clone(
    fmt: *const *const c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "icu" fn umsg_setLocale(
    fmt: **c_void,
    locale: *const i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn umsg_getLocale(
    fmt: *const *const c_void,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn umsg_applyPattern(
    fmt: **c_void,
    pattern: *const u16,
    patternLength: i32,
    parseError: *UParseError,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn umsg_toPattern(
    fmt: *const *const c_void,
    result: *u16,
    resultLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn umsg_format(
    fmt: *const *const c_void,
    result: *u16,
    resultLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn umsg_vformat(
    fmt: *const *const c_void,
    result: *u16,
    resultLength: i32,
    ap: *i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn umsg_parse(
    fmt: *const *const c_void,
    source: *const u16,
    sourceLength: i32,
    count: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn umsg_vparse(
    fmt: *const *const c_void,
    source: *const u16,
    sourceLength: i32,
    count: *i32,
    ap: *i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn umsg_autoQuoteApostrophe(
    pattern: *const u16,
    patternLength: i32,
    dest: *u16,
    destCapacity: i32,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unum_open(
    style: UNumberFormatStyle,
    pattern: *const u16,
    patternLength: i32,
    locale: *const i8,
    parseErr: *UParseError,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn unum_close(
    fmt: **c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn unum_clone(
    fmt: *const *const c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn unum_format(
    fmt: *const *const c_void,
    number: i32,
    result: *u16,
    resultLength: i32,
    pos: *UFieldPosition,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unum_formatInt64(
    fmt: *const *const c_void,
    number: i64,
    result: *u16,
    resultLength: i32,
    pos: *UFieldPosition,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unum_formatDouble(
    fmt: *const *const c_void,
    number: f64,
    result: *u16,
    resultLength: i32,
    pos: *UFieldPosition,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unum_formatDoubleForFields(
    format: *const *const c_void,
    number: f64,
    result: *u16,
    resultLength: i32,
    fpositer: *UFieldPositionIterator,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unum_formatDecimal(
    fmt: *const *const c_void,
    number: *const i8,
    length: i32,
    result: *u16,
    resultLength: i32,
    pos: *UFieldPosition,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unum_formatDoubleCurrency(
    fmt: *const *const c_void,
    number: f64,
    currency: *u16,
    result: *u16,
    resultLength: i32,
    pos: *UFieldPosition,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unum_formatUFormattable(
    fmt: *const *const c_void,
    number: *const *const c_void,
    result: *u16,
    resultLength: i32,
    pos: *UFieldPosition,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unum_parse(
    fmt: *const *const c_void,
    text: *const u16,
    textLength: i32,
    parsePos: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unum_parseInt64(
    fmt: *const *const c_void,
    text: *const u16,
    textLength: i32,
    parsePos: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i64;

pub extern "icu" fn unum_parseDouble(
    fmt: *const *const c_void,
    text: *const u16,
    textLength: i32,
    parsePos: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) f64;

pub extern "icu" fn unum_parseDecimal(
    fmt: *const *const c_void,
    text: *const u16,
    textLength: i32,
    parsePos: *i32,
    outBuf: *i8,
    outBufLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unum_parseDoubleCurrency(
    fmt: *const *const c_void,
    text: *const u16,
    textLength: i32,
    parsePos: *i32,
    currency: *u16,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) f64;

pub extern "icu" fn unum_parseToUFormattable(
    fmt: *const *const c_void,
    result: **c_void,
    text: *const u16,
    textLength: i32,
    parsePos: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn unum_applyPattern(
    format: **c_void,
    localized: i8,
    pattern: *const u16,
    patternLength: i32,
    parseError: *UParseError,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn unum_getAvailable(
    localeIndex: i32,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn unum_countAvailable(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unum_getAttribute(
    fmt: *const *const c_void,
    attr: UNumberFormatAttribute,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unum_setAttribute(
    fmt: **c_void,
    attr: UNumberFormatAttribute,
    newValue: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn unum_getDoubleAttribute(
    fmt: *const *const c_void,
    attr: UNumberFormatAttribute,
) callconv(@import("std").os.windows.WINAPI) f64;

pub extern "icu" fn unum_setDoubleAttribute(
    fmt: **c_void,
    attr: UNumberFormatAttribute,
    newValue: f64,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn unum_getTextAttribute(
    fmt: *const *const c_void,
    tag: UNumberFormatTextAttribute,
    result: *u16,
    resultLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unum_setTextAttribute(
    fmt: **c_void,
    tag: UNumberFormatTextAttribute,
    newValue: *const u16,
    newValueLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn unum_toPattern(
    fmt: *const *const c_void,
    isPatternLocalized: i8,
    result: *u16,
    resultLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unum_getSymbol(
    fmt: *const *const c_void,
    symbol: UNumberFormatSymbol,
    buffer: *u16,
    size: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unum_setSymbol(
    fmt: **c_void,
    symbol: UNumberFormatSymbol,
    value: *const u16,
    length: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn unum_getLocaleByType(
    fmt: *const *const c_void,
    type: ULocDataLocaleType,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn unum_setContext(
    fmt: **c_void,
    value: UDisplayContext,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn unum_getContext(
    fmt: *const *const c_void,
    type: UDisplayContextType,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) UDisplayContext;

pub extern "icu" fn udat_toCalendarDateField(
    field: UDateFormatField,
) callconv(@import("std").os.windows.WINAPI) UCalendarDateFields;

pub extern "icu" fn udat_open(
    timeStyle: UDateFormatStyle,
    dateStyle: UDateFormatStyle,
    locale: *const i8,
    tzID: *const u16,
    tzIDLength: i32,
    pattern: *const u16,
    patternLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn udat_close(
    format: **c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn udat_getBooleanAttribute(
    fmt: *const *const c_void,
    attr: UDateFormatBooleanAttribute,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn udat_setBooleanAttribute(
    fmt: **c_void,
    attr: UDateFormatBooleanAttribute,
    newValue: i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn udat_clone(
    fmt: *const *const c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn udat_format(
    format: *const *const c_void,
    dateToFormat: f64,
    result: *u16,
    resultLength: i32,
    position: *UFieldPosition,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn udat_formatCalendar(
    format: *const *const c_void,
    calendar: **c_void,
    result: *u16,
    capacity: i32,
    position: *UFieldPosition,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn udat_formatForFields(
    format: *const *const c_void,
    dateToFormat: f64,
    result: *u16,
    resultLength: i32,
    fpositer: *UFieldPositionIterator,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn udat_formatCalendarForFields(
    format: *const *const c_void,
    calendar: **c_void,
    result: *u16,
    capacity: i32,
    fpositer: *UFieldPositionIterator,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn udat_parse(
    format: *const *const c_void,
    text: *const u16,
    textLength: i32,
    parsePos: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) f64;

pub extern "icu" fn udat_parseCalendar(
    format: *const *const c_void,
    calendar: **c_void,
    text: *const u16,
    textLength: i32,
    parsePos: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn udat_isLenient(
    fmt: *const *const c_void,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn udat_setLenient(
    fmt: **c_void,
    isLenient: i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn udat_getCalendar(
    fmt: *const *const c_void,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn udat_setCalendar(
    fmt: **c_void,
    calendarToSet: *const *const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn udat_getNumberFormat(
    fmt: *const *const c_void,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn udat_getNumberFormatForField(
    fmt: *const *const c_void,
    field: u16,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn udat_adoptNumberFormatForFields(
    fmt: **c_void,
    fields: *const u16,
    numberFormatToSet: **c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn udat_setNumberFormat(
    fmt: **c_void,
    numberFormatToSet: *const *const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn udat_adoptNumberFormat(
    fmt: **c_void,
    numberFormatToAdopt: **c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn udat_getAvailable(
    localeIndex: i32,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn udat_countAvailable(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn udat_get2DigitYearStart(
    fmt: *const *const c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) f64;

pub extern "icu" fn udat_set2DigitYearStart(
    fmt: **c_void,
    d: f64,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn udat_toPattern(
    fmt: *const *const c_void,
    localized: i8,
    result: *u16,
    resultLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn udat_applyPattern(
    format: **c_void,
    localized: i8,
    pattern: *const u16,
    patternLength: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn udat_getSymbols(
    fmt: *const *const c_void,
    type: UDateFormatSymbolType,
    symbolIndex: i32,
    result: *u16,
    resultLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn udat_countSymbols(
    fmt: *const *const c_void,
    type: UDateFormatSymbolType,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn udat_setSymbols(
    format: **c_void,
    type: UDateFormatSymbolType,
    symbolIndex: i32,
    value: *u16,
    valueLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn udat_getLocaleByType(
    fmt: *const *const c_void,
    type: ULocDataLocaleType,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn udat_setContext(
    fmt: **c_void,
    value: UDisplayContext,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn udat_getContext(
    fmt: *const *const c_void,
    type: UDisplayContextType,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) UDisplayContext;

pub extern "icu" fn unumf_openForSkeletonAndLocale(
    skeleton: *const u16,
    skeletonLen: i32,
    locale: *const i8,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UNumberFormatter;

pub extern "icu" fn unumf_openResult(
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UFormattedNumber;

pub extern "icu" fn unumf_formatInt(
    uformatter: *const UNumberFormatter,
    value: i64,
    uresult: *UFormattedNumber,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn unumf_formatDouble(
    uformatter: *const UNumberFormatter,
    value: f64,
    uresult: *UFormattedNumber,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn unumf_formatDecimal(
    uformatter: *const UNumberFormatter,
    value: *const i8,
    valueLen: i32,
    uresult: *UFormattedNumber,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn unumf_resultToString(
    uresult: *const UFormattedNumber,
    buffer: *u16,
    bufferCapacity: i32,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unumf_resultNextFieldPosition(
    uresult: *const UFormattedNumber,
    ufpos: *UFieldPosition,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn unumf_resultGetAllFieldPositions(
    uresult: *const UFormattedNumber,
    ufpositer: *UFieldPositionIterator,
    ec: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn unumf_close(
    uformatter: *UNumberFormatter,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn unumf_closeResult(
    uresult: *UFormattedNumber,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn unumsys_open(
    locale: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UNumberingSystem;

pub extern "icu" fn unumsys_openByName(
    name: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UNumberingSystem;

pub extern "icu" fn unumsys_close(
    unumsys: *UNumberingSystem,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn unumsys_openAvailableNames(
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn unumsys_getName(
    unumsys: *const UNumberingSystem,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn unumsys_isAlgorithmic(
    unumsys: *const UNumberingSystem,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn unumsys_getRadix(
    unumsys: *const UNumberingSystem,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn unumsys_getDescription(
    unumsys: *const UNumberingSystem,
    result: *u16,
    resultLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uplrules_open(
    locale: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UPluralRules;

pub extern "icu" fn uplrules_openForType(
    locale: *const i8,
    type: UPluralType,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UPluralRules;

pub extern "icu" fn uplrules_close(
    uplrules: *UPluralRules,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uplrules_select(
    uplrules: *const UPluralRules,
    number: f64,
    keyword: *u16,
    capacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uplrules_getKeywords(
    uplrules: *const UPluralRules,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn uregex_open(
    pattern: *const u16,
    patternLength: i32,
    flags: u32,
    pe: *UParseError,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *URegularExpression;

pub extern "icu" fn uregex_openUText(
    pattern: *UText,
    flags: u32,
    pe: *UParseError,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *URegularExpression;

pub extern "icu" fn uregex_openC(
    pattern: *const i8,
    flags: u32,
    pe: *UParseError,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *URegularExpression;

pub extern "icu" fn uregex_close(
    regexp: *URegularExpression,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uregex_clone(
    regexp: *const URegularExpression,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *URegularExpression;

pub extern "icu" fn uregex_pattern(
    regexp: *const URegularExpression,
    patLength: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn uregex_patternUText(
    regexp: *const URegularExpression,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UText;

pub extern "icu" fn uregex_flags(
    regexp: *const URegularExpression,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uregex_setText(
    regexp: *URegularExpression,
    text: *const u16,
    textLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uregex_setUText(
    regexp: *URegularExpression,
    text: *UText,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uregex_getText(
    regexp: *URegularExpression,
    textLength: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn uregex_getUText(
    regexp: *URegularExpression,
    dest: *UText,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UText;

pub extern "icu" fn uregex_refreshUText(
    regexp: *URegularExpression,
    text: *UText,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uregex_matches(
    regexp: *URegularExpression,
    startIndex: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uregex_matches64(
    regexp: *URegularExpression,
    startIndex: i64,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uregex_lookingAt(
    regexp: *URegularExpression,
    startIndex: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uregex_lookingAt64(
    regexp: *URegularExpression,
    startIndex: i64,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uregex_find(
    regexp: *URegularExpression,
    startIndex: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uregex_find64(
    regexp: *URegularExpression,
    startIndex: i64,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uregex_findNext(
    regexp: *URegularExpression,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uregex_groupCount(
    regexp: *URegularExpression,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uregex_groupNumberFromName(
    regexp: *URegularExpression,
    groupName: *const u16,
    nameLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uregex_groupNumberFromCName(
    regexp: *URegularExpression,
    groupName: *const i8,
    nameLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uregex_group(
    regexp: *URegularExpression,
    groupNum: i32,
    dest: *u16,
    destCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uregex_groupUText(
    regexp: *URegularExpression,
    groupNum: i32,
    dest: *UText,
    groupLength: *i64,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UText;

pub extern "icu" fn uregex_start(
    regexp: *URegularExpression,
    groupNum: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uregex_start64(
    regexp: *URegularExpression,
    groupNum: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i64;

pub extern "icu" fn uregex_end(
    regexp: *URegularExpression,
    groupNum: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uregex_end64(
    regexp: *URegularExpression,
    groupNum: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i64;

pub extern "icu" fn uregex_reset(
    regexp: *URegularExpression,
    index: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uregex_reset64(
    regexp: *URegularExpression,
    index: i64,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uregex_setRegion(
    regexp: *URegularExpression,
    regionStart: i32,
    regionLimit: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uregex_setRegion64(
    regexp: *URegularExpression,
    regionStart: i64,
    regionLimit: i64,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uregex_setRegionAndStart(
    regexp: *URegularExpression,
    regionStart: i64,
    regionLimit: i64,
    startIndex: i64,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uregex_regionStart(
    regexp: *const URegularExpression,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uregex_regionStart64(
    regexp: *const URegularExpression,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i64;

pub extern "icu" fn uregex_regionEnd(
    regexp: *const URegularExpression,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uregex_regionEnd64(
    regexp: *const URegularExpression,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i64;

pub extern "icu" fn uregex_hasTransparentBounds(
    regexp: *const URegularExpression,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uregex_useTransparentBounds(
    regexp: *URegularExpression,
    b: i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uregex_hasAnchoringBounds(
    regexp: *const URegularExpression,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uregex_useAnchoringBounds(
    regexp: *URegularExpression,
    b: i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uregex_hitEnd(
    regexp: *const URegularExpression,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uregex_requireEnd(
    regexp: *const URegularExpression,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uregex_replaceAll(
    regexp: *URegularExpression,
    replacementText: *const u16,
    replacementLength: i32,
    destBuf: *u16,
    destCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uregex_replaceAllUText(
    regexp: *URegularExpression,
    replacement: *UText,
    dest: *UText,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UText;

pub extern "icu" fn uregex_replaceFirst(
    regexp: *URegularExpression,
    replacementText: *const u16,
    replacementLength: i32,
    destBuf: *u16,
    destCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uregex_replaceFirstUText(
    regexp: *URegularExpression,
    replacement: *UText,
    dest: *UText,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UText;

pub extern "icu" fn uregex_appendReplacement(
    regexp: *URegularExpression,
    replacementText: *const u16,
    replacementLength: i32,
    destBuf: **u16,
    destCapacity: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uregex_appendReplacementUText(
    regexp: *URegularExpression,
    replacementText: *UText,
    dest: *UText,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uregex_appendTail(
    regexp: *URegularExpression,
    destBuf: **u16,
    destCapacity: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uregex_appendTailUText(
    regexp: *URegularExpression,
    dest: *UText,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UText;

pub extern "icu" fn uregex_split(
    regexp: *URegularExpression,
    destBuf: *u16,
    destCapacity: i32,
    requiredCapacity: *i32,
    destFields: **u16,
    destFieldsCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uregex_splitUText(
    regexp: *URegularExpression,
    destFields: **UText,
    destFieldsCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uregex_setTimeLimit(
    regexp: *URegularExpression,
    limit: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uregex_getTimeLimit(
    regexp: *const URegularExpression,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uregex_setStackLimit(
    regexp: *URegularExpression,
    limit: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uregex_getStackLimit(
    regexp: *const URegularExpression,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uregex_setMatchCallback(
    regexp: *URegularExpression,
    callback: *URegexMatchCallback,
    context: *const c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uregex_getMatchCallback(
    regexp: *const URegularExpression,
    callback: **URegexMatchCallback,
    context: *const *const c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uregex_setFindProgressCallback(
    regexp: *URegularExpression,
    callback: *URegexFindProgressCallback,
    context: *const c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uregex_getFindProgressCallback(
    regexp: *const URegularExpression,
    callback: **URegexFindProgressCallback,
    context: *const *const c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uregion_getRegionFromCode(
    regionCode: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *URegion;

pub extern "icu" fn uregion_getRegionFromNumericCode(
    code: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *URegion;

pub extern "icu" fn uregion_getAvailable(
    type: URegionType,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn uregion_areEqual(
    uregion: *const URegion,
    otherRegion: *const URegion,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uregion_getContainingRegion(
    uregion: *const URegion,
) callconv(@import("std").os.windows.WINAPI) *URegion;

pub extern "icu" fn uregion_getContainingRegionOfType(
    uregion: *const URegion,
    type: URegionType,
) callconv(@import("std").os.windows.WINAPI) *URegion;

pub extern "icu" fn uregion_getContainedRegions(
    uregion: *const URegion,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn uregion_getContainedRegionsOfType(
    uregion: *const URegion,
    type: URegionType,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn uregion_contains(
    uregion: *const URegion,
    otherRegion: *const URegion,
) callconv(@import("std").os.windows.WINAPI) i8;

pub extern "icu" fn uregion_getPreferredValues(
    uregion: *const URegion,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn uregion_getRegionCode(
    uregion: *const URegion,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn uregion_getNumericCode(
    uregion: *const URegion,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uregion_getType(
    uregion: *const URegion,
) callconv(@import("std").os.windows.WINAPI) URegionType;

pub extern "icu" fn ureldatefmt_open(
    locale: *const i8,
    nfToAdopt: **c_void,
    width: UDateRelativeDateTimeFormatterStyle,
    capitalizationContext: UDisplayContext,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *URelativeDateTimeFormatter;

pub extern "icu" fn ureldatefmt_close(
    reldatefmt: *URelativeDateTimeFormatter,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn ureldatefmt_formatNumeric(
    reldatefmt: *const URelativeDateTimeFormatter,
    offset: f64,
    unit: URelativeDateTimeUnit,
    result: *u16,
    resultCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ureldatefmt_format(
    reldatefmt: *const URelativeDateTimeFormatter,
    offset: f64,
    unit: URelativeDateTimeUnit,
    result: *u16,
    resultCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn ureldatefmt_combineDateAndTime(
    reldatefmt: *const URelativeDateTimeFormatter,
    relativeDateString: *const u16,
    relativeDateStringLen: i32,
    timeString: *const u16,
    timeStringLen: i32,
    result: *u16,
    resultCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn usearch_open(
    pattern: *const u16,
    patternlength: i32,
    text: *const u16,
    textlength: i32,
    locale: *const i8,
    breakiter: *UBreakIterator,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UStringSearch;

pub extern "icu" fn usearch_openFromCollator(
    pattern: *const u16,
    patternlength: i32,
    text: *const u16,
    textlength: i32,
    collator: *const UCollator,
    breakiter: *UBreakIterator,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UStringSearch;

pub extern "icu" fn usearch_close(
    searchiter: *UStringSearch,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn usearch_setOffset(
    strsrch: *UStringSearch,
    position: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn usearch_getOffset(
    strsrch: *const UStringSearch,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn usearch_setAttribute(
    strsrch: *UStringSearch,
    attribute: USearchAttribute,
    value: USearchAttributeValue,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn usearch_getAttribute(
    strsrch: *const UStringSearch,
    attribute: USearchAttribute,
) callconv(@import("std").os.windows.WINAPI) USearchAttributeValue;

pub extern "icu" fn usearch_getMatchedStart(
    strsrch: *const UStringSearch,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn usearch_getMatchedLength(
    strsrch: *const UStringSearch,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn usearch_getMatchedText(
    strsrch: *const UStringSearch,
    result: *u16,
    resultCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn usearch_setBreakIterator(
    strsrch: *UStringSearch,
    breakiter: *UBreakIterator,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn usearch_getBreakIterator(
    strsrch: *const UStringSearch,
) callconv(@import("std").os.windows.WINAPI) *UBreakIterator;

pub extern "icu" fn usearch_setText(
    strsrch: *UStringSearch,
    text: *const u16,
    textlength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn usearch_getText(
    strsrch: *const UStringSearch,
    length: *i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn usearch_getCollator(
    strsrch: *const UStringSearch,
) callconv(@import("std").os.windows.WINAPI) *UCollator;

pub extern "icu" fn usearch_setCollator(
    strsrch: *UStringSearch,
    collator: *const UCollator,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn usearch_setPattern(
    strsrch: *UStringSearch,
    pattern: *const u16,
    patternlength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn usearch_getPattern(
    strsrch: *const UStringSearch,
    length: *i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn usearch_first(
    strsrch: *UStringSearch,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn usearch_following(
    strsrch: *UStringSearch,
    position: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn usearch_last(
    strsrch: *UStringSearch,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn usearch_preceding(
    strsrch: *UStringSearch,
    position: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn usearch_next(
    strsrch: *UStringSearch,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn usearch_previous(
    strsrch: *UStringSearch,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn usearch_reset(
    strsrch: *UStringSearch,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uspoof_open(
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *USpoofChecker;

pub extern "icu" fn uspoof_openFromSerialized(
    data: *const c_void,
    length: i32,
    pActualLength: *i32,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *USpoofChecker;

pub extern "icu" fn uspoof_openFromSource(
    confusables: *const i8,
    confusablesLen: i32,
    confusablesWholeScript: *const i8,
    confusablesWholeScriptLen: i32,
    errType: *i32,
    pe: *UParseError,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *USpoofChecker;

pub extern "icu" fn uspoof_close(
    sc: *USpoofChecker,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uspoof_clone(
    sc: *const USpoofChecker,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *USpoofChecker;

pub extern "icu" fn uspoof_setChecks(
    sc: *USpoofChecker,
    checks: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uspoof_getChecks(
    sc: *const USpoofChecker,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uspoof_setRestrictionLevel(
    sc: *USpoofChecker,
    restrictionLevel: URestrictionLevel,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uspoof_getRestrictionLevel(
    sc: *const USpoofChecker,
) callconv(@import("std").os.windows.WINAPI) URestrictionLevel;

pub extern "icu" fn uspoof_setAllowedLocales(
    sc: *USpoofChecker,
    localesList: *const i8,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uspoof_getAllowedLocales(
    sc: *USpoofChecker,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *i8;

pub extern "icu" fn uspoof_setAllowedChars(
    sc: *USpoofChecker,
    chars: *const USet,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uspoof_getAllowedChars(
    sc: *const USpoofChecker,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *USet;

pub extern "icu" fn uspoof_check(
    sc: *const USpoofChecker,
    id: *const u16,
    length: i32,
    position: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uspoof_checkUTF8(
    sc: *const USpoofChecker,
    id: *const i8,
    length: i32,
    position: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uspoof_check2(
    sc: *const USpoofChecker,
    id: *const u16,
    length: i32,
    checkResult: *USpoofCheckResult,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uspoof_check2UTF8(
    sc: *const USpoofChecker,
    id: *const i8,
    length: i32,
    checkResult: *USpoofCheckResult,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uspoof_openCheckResult(
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *USpoofCheckResult;

pub extern "icu" fn uspoof_closeCheckResult(
    checkResult: *USpoofCheckResult,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn uspoof_getCheckResultChecks(
    checkResult: *const USpoofCheckResult,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uspoof_getCheckResultRestrictionLevel(
    checkResult: *const USpoofCheckResult,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) URestrictionLevel;

pub extern "icu" fn uspoof_getCheckResultNumerics(
    checkResult: *const USpoofCheckResult,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *USet;

pub extern "icu" fn uspoof_areConfusable(
    sc: *const USpoofChecker,
    id1: *const u16,
    length1: i32,
    id2: *const u16,
    length2: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uspoof_areConfusableUTF8(
    sc: *const USpoofChecker,
    id1: *const i8,
    length1: i32,
    id2: *const i8,
    length2: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uspoof_getSkeleton(
    sc: *const USpoofChecker,
    type: u32,
    id: *const u16,
    length: i32,
    dest: *u16,
    destCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uspoof_getSkeletonUTF8(
    sc: *const USpoofChecker,
    type: u32,
    id: *const i8,
    length: i32,
    dest: *i8,
    destCapacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn uspoof_getInclusionSet(
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *USet;

pub extern "icu" fn uspoof_getRecommendedSet(
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *USet;

pub extern "icu" fn uspoof_serialize(
    sc: *USpoofChecker,
    data: *c_void,
    capacity: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn utmscale_getTimeScaleValue(
    timeScale: UDateTimeScale,
    value: UTimeScaleValue,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i64;

pub extern "icu" fn utmscale_fromInt64(
    otherTime: i64,
    timeScale: UDateTimeScale,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i64;

pub extern "icu" fn utmscale_toInt64(
    universalTime: i64,
    timeScale: UDateTimeScale,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i64;

pub extern "icu" fn utrans_openU(
    id: *const u16,
    idLength: i32,
    dir: UTransDirection,
    rules: *const u16,
    rulesLength: i32,
    parseError: *UParseError,
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn utrans_openInverse(
    trans: *const *const c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn utrans_clone(
    trans: *const *const c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) **c_void;

pub extern "icu" fn utrans_close(
    trans: **c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn utrans_getUnicodeID(
    trans: *const *const c_void,
    resultLength: *i32,
) callconv(@import("std").os.windows.WINAPI) *u16;

pub extern "icu" fn utrans_register(
    adoptedTrans: **c_void,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn utrans_unregisterID(
    id: *const u16,
    idLength: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn utrans_setFilter(
    trans: **c_void,
    filterPattern: *const u16,
    filterPatternLen: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn utrans_countAvailableIDs(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn utrans_openIDs(
    pErrorCode: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *UEnumeration;

pub extern "icu" fn utrans_trans(
    trans: *const *const c_void,
    rep: **c_void,
    repFunc: *const UReplaceableCallbacks,
    start: i32,
    limit: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn utrans_transIncremental(
    trans: *const *const c_void,
    rep: **c_void,
    repFunc: *const UReplaceableCallbacks,
    pos: *UTransPosition,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn utrans_transUChars(
    trans: *const *const c_void,
    text: *u16,
    textLength: *i32,
    textCapacity: i32,
    start: i32,
    limit: *i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn utrans_transIncrementalUChars(
    trans: *const *const c_void,
    text: *u16,
    textLength: *i32,
    textCapacity: i32,
    pos: *UTransPosition,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "icu" fn utrans_toRules(
    trans: *const *const c_void,
    escapeUnprintable: i8,
    result: *u16,
    resultLength: i32,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "icu" fn utrans_getSourceSet(
    trans: *const *const c_void,
    ignoreFilter: i8,
    fillIn: *USet,
    status: *UErrorCode,
) callconv(@import("std").os.windows.WINAPI) *USet;

pub extern "KERNEL32" fn FindStringOrdinal(
    dwFindStringOrdinalFlags: u32,
    lpStringSource: [*:0]const u16,
    cchSource: i32,
    lpStringValue: [*:0]const u16,
    cchValue: i32,
    bIgnoreCase: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetTextCharset(
    hdc: HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn GetTextCharsetInfo(
    hdc: HDC,
    lpSig: ?*FONTSIGNATURE,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "GDI32" fn TranslateCharsetInfo(
    lpSrc: *u32,
    lpCs: *CHARSETINFO,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "ADVAPI32" fn IsTextUnicode(
    lpv: [*]const u8,
    iSize: i32,
    lpiResult: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (62)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const CPINFOEX = CPINFOEXA;
        pub const NUMBERFMT = NUMBERFMTA;
        pub const CURRENCYFMT = CURRENCYFMTA;
        pub const LOCALE_ENUMPROC = LOCALE_ENUMPROCA;
        pub const LANGUAGEGROUP_ENUMPROC = LANGUAGEGROUP_ENUMPROCA;
        pub const LANGGROUPLOCALE_ENUMPROC = LANGGROUPLOCALE_ENUMPROCA;
        pub const UILANGUAGE_ENUMPROC = UILANGUAGE_ENUMPROCA;
        pub const CODEPAGE_ENUMPROC = CODEPAGE_ENUMPROCA;
        pub const DATEFMT_ENUMPROC = DATEFMT_ENUMPROCA;
        pub const DATEFMT_ENUMPROCEX = DATEFMT_ENUMPROCEXA;
        pub const TIMEFMT_ENUMPROC = TIMEFMT_ENUMPROCA;
        pub const CALINFO_ENUMPROC = CALINFO_ENUMPROCA;
        pub const CALINFO_ENUMPROCEX = CALINFO_ENUMPROCEXA;
        pub const REGISTERWORD = REGISTERWORDA;
        pub const STYLEBUF = STYLEBUFA;
        pub const IMEMENUITEMINFO = IMEMENUITEMINFOA;
        pub const REGISTERWORDENUMPROC = REGISTERWORDENUMPROCA;
        pub const GetDateFormat = GetDateFormatA;
        pub const GetTimeFormat = GetTimeFormatA;
        pub const CompareString = CompareStringA;
        pub const FoldString = FoldStringA;
        pub const GetStringTypeEx = GetStringTypeExA;
        pub const GetStringType = GetStringTypeA;
        pub const GetCPInfoEx = GetCPInfoExA;
        pub const LCMapString = LCMapStringA;
        pub const GetLocaleInfo = GetLocaleInfoA;
        pub const SetLocaleInfo = SetLocaleInfoA;
        pub const GetCalendarInfo = GetCalendarInfoA;
        pub const SetCalendarInfo = SetCalendarInfoA;
        pub const GetNumberFormat = GetNumberFormatA;
        pub const GetCurrencyFormat = GetCurrencyFormatA;
        pub const EnumCalendarInfo = EnumCalendarInfoA;
        pub const EnumCalendarInfoEx = EnumCalendarInfoExA;
        pub const EnumTimeFormats = EnumTimeFormatsA;
        pub const EnumDateFormats = EnumDateFormatsA;
        pub const EnumDateFormatsEx = EnumDateFormatsExA;
        pub const GetGeoInfo = GetGeoInfoA;
        pub const EnumSystemLocales = EnumSystemLocalesA;
        pub const EnumSystemLanguageGroups = EnumSystemLanguageGroupsA;
        pub const EnumLanguageGroupLocales = EnumLanguageGroupLocalesA;
        pub const EnumUILanguages = EnumUILanguagesA;
        pub const EnumSystemCodePages = EnumSystemCodePagesA;
        pub const ImmInstallIME = ImmInstallIMEA;
        pub const ImmGetDescription = ImmGetDescriptionA;
        pub const ImmGetIMEFileName = ImmGetIMEFileNameA;
        pub const ImmGetCompositionString = ImmGetCompositionStringA;
        pub const ImmSetCompositionString = ImmSetCompositionStringA;
        pub const ImmGetCandidateListCount = ImmGetCandidateListCountA;
        pub const ImmGetCandidateList = ImmGetCandidateListA;
        pub const ImmGetGuideLine = ImmGetGuideLineA;
        pub const ImmGetCompositionFont = ImmGetCompositionFontA;
        pub const ImmSetCompositionFont = ImmSetCompositionFontA;
        pub const ImmConfigureIME = ImmConfigureIMEA;
        pub const ImmEscape = ImmEscapeA;
        pub const ImmGetConversionList = ImmGetConversionListA;
        pub const ImmIsUIMessage = ImmIsUIMessageA;
        pub const ImmRegisterWord = ImmRegisterWordA;
        pub const ImmUnregisterWord = ImmUnregisterWordA;
        pub const ImmGetRegisterWordStyle = ImmGetRegisterWordStyleA;
        pub const ImmEnumRegisterWord = ImmEnumRegisterWordA;
        pub const ImmGetImeMenuItems = ImmGetImeMenuItemsA;
        pub const ImmRequestMessage = ImmRequestMessageA;
    },
    .wide => struct {
        pub const CPINFOEX = CPINFOEXW;
        pub const NUMBERFMT = NUMBERFMTW;
        pub const CURRENCYFMT = CURRENCYFMTW;
        pub const LOCALE_ENUMPROC = LOCALE_ENUMPROCW;
        pub const LANGUAGEGROUP_ENUMPROC = LANGUAGEGROUP_ENUMPROCW;
        pub const LANGGROUPLOCALE_ENUMPROC = LANGGROUPLOCALE_ENUMPROCW;
        pub const UILANGUAGE_ENUMPROC = UILANGUAGE_ENUMPROCW;
        pub const CODEPAGE_ENUMPROC = CODEPAGE_ENUMPROCW;
        pub const DATEFMT_ENUMPROC = DATEFMT_ENUMPROCW;
        pub const DATEFMT_ENUMPROCEX = DATEFMT_ENUMPROCEXW;
        pub const TIMEFMT_ENUMPROC = TIMEFMT_ENUMPROCW;
        pub const CALINFO_ENUMPROC = CALINFO_ENUMPROCW;
        pub const CALINFO_ENUMPROCEX = CALINFO_ENUMPROCEXW;
        pub const REGISTERWORD = REGISTERWORDW;
        pub const STYLEBUF = STYLEBUFW;
        pub const IMEMENUITEMINFO = IMEMENUITEMINFOW;
        pub const REGISTERWORDENUMPROC = REGISTERWORDENUMPROCW;
        pub const GetDateFormat = GetDateFormatW;
        pub const GetTimeFormat = GetTimeFormatW;
        pub const CompareString = CompareStringW;
        pub const FoldString = FoldStringW;
        pub const GetStringTypeEx = GetStringTypeExW;
        pub const GetStringType = GetStringTypeW;
        pub const GetCPInfoEx = GetCPInfoExW;
        pub const LCMapString = LCMapStringW;
        pub const GetLocaleInfo = GetLocaleInfoW;
        pub const SetLocaleInfo = SetLocaleInfoW;
        pub const GetCalendarInfo = GetCalendarInfoW;
        pub const SetCalendarInfo = SetCalendarInfoW;
        pub const GetNumberFormat = GetNumberFormatW;
        pub const GetCurrencyFormat = GetCurrencyFormatW;
        pub const EnumCalendarInfo = EnumCalendarInfoW;
        pub const EnumCalendarInfoEx = EnumCalendarInfoExW;
        pub const EnumTimeFormats = EnumTimeFormatsW;
        pub const EnumDateFormats = EnumDateFormatsW;
        pub const EnumDateFormatsEx = EnumDateFormatsExW;
        pub const GetGeoInfo = GetGeoInfoW;
        pub const EnumSystemLocales = EnumSystemLocalesW;
        pub const EnumSystemLanguageGroups = EnumSystemLanguageGroupsW;
        pub const EnumLanguageGroupLocales = EnumLanguageGroupLocalesW;
        pub const EnumUILanguages = EnumUILanguagesW;
        pub const EnumSystemCodePages = EnumSystemCodePagesW;
        pub const ImmInstallIME = ImmInstallIMEW;
        pub const ImmGetDescription = ImmGetDescriptionW;
        pub const ImmGetIMEFileName = ImmGetIMEFileNameW;
        pub const ImmGetCompositionString = ImmGetCompositionStringW;
        pub const ImmSetCompositionString = ImmSetCompositionStringW;
        pub const ImmGetCandidateListCount = ImmGetCandidateListCountW;
        pub const ImmGetCandidateList = ImmGetCandidateListW;
        pub const ImmGetGuideLine = ImmGetGuideLineW;
        pub const ImmGetCompositionFont = ImmGetCompositionFontW;
        pub const ImmSetCompositionFont = ImmSetCompositionFontW;
        pub const ImmConfigureIME = ImmConfigureIMEW;
        pub const ImmEscape = ImmEscapeW;
        pub const ImmGetConversionList = ImmGetConversionListW;
        pub const ImmIsUIMessage = ImmIsUIMessageW;
        pub const ImmRegisterWord = ImmRegisterWordW;
        pub const ImmUnregisterWord = ImmUnregisterWordW;
        pub const ImmGetRegisterWordStyle = ImmGetRegisterWordStyleW;
        pub const ImmEnumRegisterWord = ImmEnumRegisterWordW;
        pub const ImmGetImeMenuItems = ImmGetImeMenuItemsW;
        pub const ImmRequestMessage = ImmRequestMessageW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const CPINFOEX = *opaque{};
        pub const NUMBERFMT = *opaque{};
        pub const CURRENCYFMT = *opaque{};
        pub const LOCALE_ENUMPROC = *opaque{};
        pub const LANGUAGEGROUP_ENUMPROC = *opaque{};
        pub const LANGGROUPLOCALE_ENUMPROC = *opaque{};
        pub const UILANGUAGE_ENUMPROC = *opaque{};
        pub const CODEPAGE_ENUMPROC = *opaque{};
        pub const DATEFMT_ENUMPROC = *opaque{};
        pub const DATEFMT_ENUMPROCEX = *opaque{};
        pub const TIMEFMT_ENUMPROC = *opaque{};
        pub const CALINFO_ENUMPROC = *opaque{};
        pub const CALINFO_ENUMPROCEX = *opaque{};
        pub const REGISTERWORD = *opaque{};
        pub const STYLEBUF = *opaque{};
        pub const IMEMENUITEMINFO = *opaque{};
        pub const REGISTERWORDENUMPROC = *opaque{};
        pub const GetDateFormat = *opaque{};
        pub const GetTimeFormat = *opaque{};
        pub const CompareString = *opaque{};
        pub const FoldString = *opaque{};
        pub const GetStringTypeEx = *opaque{};
        pub const GetStringType = *opaque{};
        pub const GetCPInfoEx = *opaque{};
        pub const LCMapString = *opaque{};
        pub const GetLocaleInfo = *opaque{};
        pub const SetLocaleInfo = *opaque{};
        pub const GetCalendarInfo = *opaque{};
        pub const SetCalendarInfo = *opaque{};
        pub const GetNumberFormat = *opaque{};
        pub const GetCurrencyFormat = *opaque{};
        pub const EnumCalendarInfo = *opaque{};
        pub const EnumCalendarInfoEx = *opaque{};
        pub const EnumTimeFormats = *opaque{};
        pub const EnumDateFormats = *opaque{};
        pub const EnumDateFormatsEx = *opaque{};
        pub const GetGeoInfo = *opaque{};
        pub const EnumSystemLocales = *opaque{};
        pub const EnumSystemLanguageGroups = *opaque{};
        pub const EnumLanguageGroupLocales = *opaque{};
        pub const EnumUILanguages = *opaque{};
        pub const EnumSystemCodePages = *opaque{};
        pub const ImmInstallIME = *opaque{};
        pub const ImmGetDescription = *opaque{};
        pub const ImmGetIMEFileName = *opaque{};
        pub const ImmGetCompositionString = *opaque{};
        pub const ImmSetCompositionString = *opaque{};
        pub const ImmGetCandidateListCount = *opaque{};
        pub const ImmGetCandidateList = *opaque{};
        pub const ImmGetGuideLine = *opaque{};
        pub const ImmGetCompositionFont = *opaque{};
        pub const ImmSetCompositionFont = *opaque{};
        pub const ImmConfigureIME = *opaque{};
        pub const ImmEscape = *opaque{};
        pub const ImmGetConversionList = *opaque{};
        pub const ImmIsUIMessage = *opaque{};
        pub const ImmRegisterWord = *opaque{};
        pub const ImmUnregisterWord = *opaque{};
        pub const ImmGetRegisterWordStyle = *opaque{};
        pub const ImmEnumRegisterWord = *opaque{};
        pub const ImmGetImeMenuItems = *opaque{};
        pub const ImmRequestMessage = *opaque{};
    } else struct {
        pub const CPINFOEX = @compileError("'CPINFOEX' requires that UNICODE be set to true or false in the root module");
        pub const NUMBERFMT = @compileError("'NUMBERFMT' requires that UNICODE be set to true or false in the root module");
        pub const CURRENCYFMT = @compileError("'CURRENCYFMT' requires that UNICODE be set to true or false in the root module");
        pub const LOCALE_ENUMPROC = @compileError("'LOCALE_ENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const LANGUAGEGROUP_ENUMPROC = @compileError("'LANGUAGEGROUP_ENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const LANGGROUPLOCALE_ENUMPROC = @compileError("'LANGGROUPLOCALE_ENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const UILANGUAGE_ENUMPROC = @compileError("'UILANGUAGE_ENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const CODEPAGE_ENUMPROC = @compileError("'CODEPAGE_ENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const DATEFMT_ENUMPROC = @compileError("'DATEFMT_ENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const DATEFMT_ENUMPROCEX = @compileError("'DATEFMT_ENUMPROCEX' requires that UNICODE be set to true or false in the root module");
        pub const TIMEFMT_ENUMPROC = @compileError("'TIMEFMT_ENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const CALINFO_ENUMPROC = @compileError("'CALINFO_ENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const CALINFO_ENUMPROCEX = @compileError("'CALINFO_ENUMPROCEX' requires that UNICODE be set to true or false in the root module");
        pub const REGISTERWORD = @compileError("'REGISTERWORD' requires that UNICODE be set to true or false in the root module");
        pub const STYLEBUF = @compileError("'STYLEBUF' requires that UNICODE be set to true or false in the root module");
        pub const IMEMENUITEMINFO = @compileError("'IMEMENUITEMINFO' requires that UNICODE be set to true or false in the root module");
        pub const REGISTERWORDENUMPROC = @compileError("'REGISTERWORDENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const GetDateFormat = @compileError("'GetDateFormat' requires that UNICODE be set to true or false in the root module");
        pub const GetTimeFormat = @compileError("'GetTimeFormat' requires that UNICODE be set to true or false in the root module");
        pub const CompareString = @compileError("'CompareString' requires that UNICODE be set to true or false in the root module");
        pub const FoldString = @compileError("'FoldString' requires that UNICODE be set to true or false in the root module");
        pub const GetStringTypeEx = @compileError("'GetStringTypeEx' requires that UNICODE be set to true or false in the root module");
        pub const GetStringType = @compileError("'GetStringType' requires that UNICODE be set to true or false in the root module");
        pub const GetCPInfoEx = @compileError("'GetCPInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const LCMapString = @compileError("'LCMapString' requires that UNICODE be set to true or false in the root module");
        pub const GetLocaleInfo = @compileError("'GetLocaleInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetLocaleInfo = @compileError("'SetLocaleInfo' requires that UNICODE be set to true or false in the root module");
        pub const GetCalendarInfo = @compileError("'GetCalendarInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetCalendarInfo = @compileError("'SetCalendarInfo' requires that UNICODE be set to true or false in the root module");
        pub const GetNumberFormat = @compileError("'GetNumberFormat' requires that UNICODE be set to true or false in the root module");
        pub const GetCurrencyFormat = @compileError("'GetCurrencyFormat' requires that UNICODE be set to true or false in the root module");
        pub const EnumCalendarInfo = @compileError("'EnumCalendarInfo' requires that UNICODE be set to true or false in the root module");
        pub const EnumCalendarInfoEx = @compileError("'EnumCalendarInfoEx' requires that UNICODE be set to true or false in the root module");
        pub const EnumTimeFormats = @compileError("'EnumTimeFormats' requires that UNICODE be set to true or false in the root module");
        pub const EnumDateFormats = @compileError("'EnumDateFormats' requires that UNICODE be set to true or false in the root module");
        pub const EnumDateFormatsEx = @compileError("'EnumDateFormatsEx' requires that UNICODE be set to true or false in the root module");
        pub const GetGeoInfo = @compileError("'GetGeoInfo' requires that UNICODE be set to true or false in the root module");
        pub const EnumSystemLocales = @compileError("'EnumSystemLocales' requires that UNICODE be set to true or false in the root module");
        pub const EnumSystemLanguageGroups = @compileError("'EnumSystemLanguageGroups' requires that UNICODE be set to true or false in the root module");
        pub const EnumLanguageGroupLocales = @compileError("'EnumLanguageGroupLocales' requires that UNICODE be set to true or false in the root module");
        pub const EnumUILanguages = @compileError("'EnumUILanguages' requires that UNICODE be set to true or false in the root module");
        pub const EnumSystemCodePages = @compileError("'EnumSystemCodePages' requires that UNICODE be set to true or false in the root module");
        pub const ImmInstallIME = @compileError("'ImmInstallIME' requires that UNICODE be set to true or false in the root module");
        pub const ImmGetDescription = @compileError("'ImmGetDescription' requires that UNICODE be set to true or false in the root module");
        pub const ImmGetIMEFileName = @compileError("'ImmGetIMEFileName' requires that UNICODE be set to true or false in the root module");
        pub const ImmGetCompositionString = @compileError("'ImmGetCompositionString' requires that UNICODE be set to true or false in the root module");
        pub const ImmSetCompositionString = @compileError("'ImmSetCompositionString' requires that UNICODE be set to true or false in the root module");
        pub const ImmGetCandidateListCount = @compileError("'ImmGetCandidateListCount' requires that UNICODE be set to true or false in the root module");
        pub const ImmGetCandidateList = @compileError("'ImmGetCandidateList' requires that UNICODE be set to true or false in the root module");
        pub const ImmGetGuideLine = @compileError("'ImmGetGuideLine' requires that UNICODE be set to true or false in the root module");
        pub const ImmGetCompositionFont = @compileError("'ImmGetCompositionFont' requires that UNICODE be set to true or false in the root module");
        pub const ImmSetCompositionFont = @compileError("'ImmSetCompositionFont' requires that UNICODE be set to true or false in the root module");
        pub const ImmConfigureIME = @compileError("'ImmConfigureIME' requires that UNICODE be set to true or false in the root module");
        pub const ImmEscape = @compileError("'ImmEscape' requires that UNICODE be set to true or false in the root module");
        pub const ImmGetConversionList = @compileError("'ImmGetConversionList' requires that UNICODE be set to true or false in the root module");
        pub const ImmIsUIMessage = @compileError("'ImmIsUIMessage' requires that UNICODE be set to true or false in the root module");
        pub const ImmRegisterWord = @compileError("'ImmRegisterWord' requires that UNICODE be set to true or false in the root module");
        pub const ImmUnregisterWord = @compileError("'ImmUnregisterWord' requires that UNICODE be set to true or false in the root module");
        pub const ImmGetRegisterWordStyle = @compileError("'ImmGetRegisterWordStyle' requires that UNICODE be set to true or false in the root module");
        pub const ImmEnumRegisterWord = @compileError("'ImmEnumRegisterWord' requires that UNICODE be set to true or false in the root module");
        pub const ImmGetImeMenuItems = @compileError("'ImmGetImeMenuItems' requires that UNICODE be set to true or false in the root module");
        pub const ImmRequestMessage = @compileError("'ImmRequestMessage' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (25)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const LPARAM = @import("windows_and_messaging.zig").LPARAM;
const SAFEARRAY = @import("automation.zig").SAFEARRAY;
const PWSTR = @import("system_services.zig").PWSTR;
const HDC = @import("gdi.zig").HDC;
const IUnknown = @import("com.zig").IUnknown;
const IEnumString = @import("com.zig").IEnumString;
const HRESULT = @import("com.zig").HRESULT;
const ABC = @import("gdi.zig").ABC;
const BSTR = @import("automation.zig").BSTR;
const PSTR = @import("system_services.zig").PSTR;
const RECT = @import("display_devices.zig").RECT;
const BOOL = @import("system_services.zig").BOOL;
const HBITMAP = @import("gdi.zig").HBITMAP;
const HWND = @import("windows_and_messaging.zig").HWND;
const IClassFactory = @import("com.zig").IClassFactory;
const WPARAM = @import("windows_and_messaging.zig").WPARAM;
const LOGFONTW = @import("shell.zig").LOGFONTW;
const LRESULT = @import("system_services.zig").LRESULT;
const SYSTEMTIME = @import("windows_programming.zig").SYSTEMTIME;
const POINT = @import("display_devices.zig").POINT;
const HKL = @import("text_services.zig").HKL;
const LOGFONTA = @import("shell.zig").LOGFONTA;
const SIZE = @import("display_devices.zig").SIZE;
const HICON = @import("menus_and_resources.zig").HICON;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = LOCALE_ENUMPROCA;
    _ = LOCALE_ENUMPROCW;
    _ = LANGUAGEGROUP_ENUMPROCA;
    _ = LANGGROUPLOCALE_ENUMPROCA;
    _ = UILANGUAGE_ENUMPROCA;
    _ = CODEPAGE_ENUMPROCA;
    _ = DATEFMT_ENUMPROCA;
    _ = DATEFMT_ENUMPROCEXA;
    _ = TIMEFMT_ENUMPROCA;
    _ = CALINFO_ENUMPROCA;
    _ = CALINFO_ENUMPROCEXA;
    _ = LANGUAGEGROUP_ENUMPROCW;
    _ = LANGGROUPLOCALE_ENUMPROCW;
    _ = UILANGUAGE_ENUMPROCW;
    _ = CODEPAGE_ENUMPROCW;
    _ = DATEFMT_ENUMPROCW;
    _ = DATEFMT_ENUMPROCEXW;
    _ = TIMEFMT_ENUMPROCW;
    _ = CALINFO_ENUMPROCW;
    _ = CALINFO_ENUMPROCEXW;
    _ = GEO_ENUMPROC;
    _ = GEO_ENUMNAMEPROC;
    _ = CALINFO_ENUMPROCEXEX;
    _ = DATEFMT_ENUMPROCEXEX;
    _ = TIMEFMT_ENUMPROCEX;
    _ = LOCALE_ENUMPROCEX;
    _ = IMCENUMPROC;
    _ = REGISTERWORDENUMPROCA;
    _ = REGISTERWORDENUMPROCW;
    _ = PFN_MAPPINGCALLBACKPROC;
    _ = PFNLOG;
    _ = fpCreateIFECommonInstanceType;
    _ = fpCreateIFELanguageInstanceType;
    _ = fpCreateIFEDictionaryInstanceType;
    _ = UTraceEntry;
    _ = UTraceExit;
    _ = UTraceData;
    _ = UCharIteratorGetIndex;
    _ = UCharIteratorMove;
    _ = UCharIteratorHasNext;
    _ = UCharIteratorHasPrevious;
    _ = UCharIteratorCurrent;
    _ = UCharIteratorNext;
    _ = UCharIteratorPrevious;
    _ = UCharIteratorReserved;
    _ = UCharIteratorGetState;
    _ = UCharIteratorSetState;
    _ = UConverterToUCallback;
    _ = UConverterFromUCallback;
    _ = UMemAllocFn;
    _ = UMemReallocFn;
    _ = UMemFreeFn;
    _ = UCharEnumTypeRange;
    _ = UEnumCharNamesFn;
    _ = UBiDiClassCallback;
    _ = UTextClone;
    _ = UTextNativeLength;
    _ = UTextAccess;
    _ = UTextExtract;
    _ = UTextReplace;
    _ = UTextCopy;
    _ = UTextMapOffsetToNative;
    _ = UTextMapNativeIndexToUTF16;
    _ = UTextClose;
    _ = UNESCAPE_CHAR_AT;
    _ = URegexMatchCallback;
    _ = URegexFindProgressCallback;

    const constant_export_count = 34;
    const type_export_count = 330;
    const enum_value_export_count = 1880;
    const com_iface_id_export_count = 12;
    const com_class_id_export_count = 1;
    const func_export_count = 1225;
    const unicode_alias_count = 62;
    const import_count = 25;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

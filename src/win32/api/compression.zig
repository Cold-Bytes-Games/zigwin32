//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (4)
//--------------------------------------------------------------------------------
pub const COMPRESS_ALGORITHM_INVALID = @as(u32, 0);
pub const COMPRESS_ALGORITHM_NULL = @as(u32, 1);
pub const COMPRESS_ALGORITHM_MAX = @as(u32, 6);
pub const COMPRESS_RAW = @as(u32, 536870912);

//--------------------------------------------------------------------------------
// Section: Types (6)
//--------------------------------------------------------------------------------
// TODO: this type has a FreeFunc 'CloseDecompressor', what can Zig do with this information?
pub const COMPRESSOR_HANDLE = isize;

pub const PFN_COMPRESS_ALLOCATE = fn(
    UserContext: *c_void,
    Size: usize,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const PFN_COMPRESS_FREE = fn(
    UserContext: *c_void,
    Memory: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const COMPRESS_ALLOCATION_ROUTINES = extern struct {
    Allocate: PFN_COMPRESS_ALLOCATE,
    Free: PFN_COMPRESS_FREE,
    UserContext: *c_void,
};

pub const COMPRESS_INFORMATION_CLASS = extern enum(i32) {
    INVALID = 0,
    BLOCK_SIZE = 1,
    LEVEL = 2,
};
pub const COMPRESS_INFORMATION_CLASS_INVALID = COMPRESS_INFORMATION_CLASS.INVALID;
pub const COMPRESS_INFORMATION_CLASS_BLOCK_SIZE = COMPRESS_INFORMATION_CLASS.BLOCK_SIZE;
pub const COMPRESS_INFORMATION_CLASS_LEVEL = COMPRESS_INFORMATION_CLASS.LEVEL;

pub const COMPRESS_ALGORITHM = extern enum(u32) {
    MSZIP = 2,
    XPRESS = 3,
    XPRESS_HUFF = 4,
    LZMS = 5,
};
pub const COMPRESS_ALGORITHM_MSZIP = COMPRESS_ALGORITHM.MSZIP;
pub const COMPRESS_ALGORITHM_XPRESS = COMPRESS_ALGORITHM.XPRESS;
pub const COMPRESS_ALGORITHM_XPRESS_HUFF = COMPRESS_ALGORITHM.XPRESS_HUFF;
pub const COMPRESS_ALGORITHM_LZMS = COMPRESS_ALGORITHM.LZMS;


//--------------------------------------------------------------------------------
// Section: Functions (12)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows8.0'
pub extern "Cabinet" fn CreateCompressor(
    Algorithm: COMPRESS_ALGORITHM,
    AllocationRoutines: ?*COMPRESS_ALLOCATION_ROUTINES,
    CompressorHandle: *isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "Cabinet" fn SetCompressorInformation(
    CompressorHandle: COMPRESSOR_HANDLE,
    CompressInformationClass: COMPRESS_INFORMATION_CLASS,
    CompressInformation: [*]const u8,
    CompressInformationSize: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "Cabinet" fn QueryCompressorInformation(
    CompressorHandle: COMPRESSOR_HANDLE,
    CompressInformationClass: COMPRESS_INFORMATION_CLASS,
    CompressInformation: [*]u8,
    CompressInformationSize: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "Cabinet" fn Compress(
    CompressorHandle: COMPRESSOR_HANDLE,
    UncompressedData: ?[*]const u8,
    UncompressedDataSize: usize,
    CompressedBuffer: ?[*]u8,
    CompressedBufferSize: usize,
    CompressedDataSize: *usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "Cabinet" fn ResetCompressor(
    CompressorHandle: COMPRESSOR_HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "Cabinet" fn CloseCompressor(
    CompressorHandle: COMPRESSOR_HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "Cabinet" fn CreateDecompressor(
    Algorithm: COMPRESS_ALGORITHM,
    AllocationRoutines: ?*COMPRESS_ALLOCATION_ROUTINES,
    DecompressorHandle: *isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "Cabinet" fn SetDecompressorInformation(
    DecompressorHandle: isize,
    CompressInformationClass: COMPRESS_INFORMATION_CLASS,
    CompressInformation: [*]const u8,
    CompressInformationSize: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "Cabinet" fn QueryDecompressorInformation(
    DecompressorHandle: isize,
    CompressInformationClass: COMPRESS_INFORMATION_CLASS,
    CompressInformation: [*]u8,
    CompressInformationSize: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "Cabinet" fn Decompress(
    DecompressorHandle: isize,
    CompressedData: ?[*]const u8,
    CompressedDataSize: usize,
    UncompressedBuffer: ?[*]u8,
    UncompressedBufferSize: usize,
    UncompressedDataSize: ?*usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "Cabinet" fn ResetDecompressor(
    DecompressorHandle: isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "Cabinet" fn CloseDecompressor(
    DecompressorHandle: isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (1)
//--------------------------------------------------------------------------------
const BOOL = @import("system_services.zig").BOOL;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = PFN_COMPRESS_ALLOCATE;
    _ = PFN_COMPRESS_FREE;

    const constant_export_count = 4;
    const type_export_count = 6;
    const enum_value_export_count = 7;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 12;
    const unicode_alias_count = 0;
    const import_count = 1;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

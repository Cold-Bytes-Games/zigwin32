//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (6)
//--------------------------------------------------------------------------------
const CLSID_RendezvousApplication_Value = @import("../zig.zig").Guid.initString("0B7E019A-B5DE-47FA-8966-9082F82FB192");
pub const CLSID_RendezvousApplication = &CLSID_RendezvousApplication_Value;

pub const RENDEZVOUS_SESSION_STATE = extern enum(i32) {
    RSS_UNKNOWN = 0,
    RSS_READY = 1,
    RSS_INVITATION = 2,
    RSS_ACCEPTED = 3,
    RSS_CONNECTED = 4,
    RSS_CANCELLED = 5,
    RSS_DECLINED = 6,
    RSS_TERMINATED = 7,
};
pub const RSS_UNKNOWN = RENDEZVOUS_SESSION_STATE.RSS_UNKNOWN;
pub const RSS_READY = RENDEZVOUS_SESSION_STATE.RSS_READY;
pub const RSS_INVITATION = RENDEZVOUS_SESSION_STATE.RSS_INVITATION;
pub const RSS_ACCEPTED = RENDEZVOUS_SESSION_STATE.RSS_ACCEPTED;
pub const RSS_CONNECTED = RENDEZVOUS_SESSION_STATE.RSS_CONNECTED;
pub const RSS_CANCELLED = RENDEZVOUS_SESSION_STATE.RSS_CANCELLED;
pub const RSS_DECLINED = RENDEZVOUS_SESSION_STATE.RSS_DECLINED;
pub const RSS_TERMINATED = RENDEZVOUS_SESSION_STATE.RSS_TERMINATED;

pub const RENDEZVOUS_SESSION_FLAGS = extern enum(i32) {
    RSF_NONE = 0,
    RSF_INVITER = 1,
    RSF_INVITEE = 2,
    RSF_ORIGINAL_INVITER = 4,
    RSF_REMOTE_LEGACYSESSION = 8,
    RSF_REMOTE_WIN7SESSION = 16,
};
pub const RSF_NONE = RENDEZVOUS_SESSION_FLAGS.RSF_NONE;
pub const RSF_INVITER = RENDEZVOUS_SESSION_FLAGS.RSF_INVITER;
pub const RSF_INVITEE = RENDEZVOUS_SESSION_FLAGS.RSF_INVITEE;
pub const RSF_ORIGINAL_INVITER = RENDEZVOUS_SESSION_FLAGS.RSF_ORIGINAL_INVITER;
pub const RSF_REMOTE_LEGACYSESSION = RENDEZVOUS_SESSION_FLAGS.RSF_REMOTE_LEGACYSESSION;
pub const RSF_REMOTE_WIN7SESSION = RENDEZVOUS_SESSION_FLAGS.RSF_REMOTE_WIN7SESSION;

const IID_IRendezvousSession_Value = @import("../zig.zig").Guid.initString("9BA4B1DD-8B0C-48B7-9E7C-2F25857C8DF5");
pub const IID_IRendezvousSession = &IID_IRendezvousSession_Value;
pub const IRendezvousSession = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_State: fn(
            self: *const IRendezvousSession,
            pSessionState: *RENDEZVOUS_SESSION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RemoteUser: fn(
            self: *const IRendezvousSession,
            bstrUserName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Flags: fn(
            self: *const IRendezvousSession,
            pFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendContextData: fn(
            self: *const IRendezvousSession,
            bstrData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Terminate: fn(
            self: *const IRendezvousSession,
            hr: HRESULT,
            bstrAppData: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRendezvousSession_get_State(self: *const T, pSessionState: *RENDEZVOUS_SESSION_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRendezvousSession.VTable, self.vtable).get_State(@ptrCast(*const IRendezvousSession, self), pSessionState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRendezvousSession_get_RemoteUser(self: *const T, bstrUserName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRendezvousSession.VTable, self.vtable).get_RemoteUser(@ptrCast(*const IRendezvousSession, self), bstrUserName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRendezvousSession_get_Flags(self: *const T, pFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRendezvousSession.VTable, self.vtable).get_Flags(@ptrCast(*const IRendezvousSession, self), pFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRendezvousSession_SendContextData(self: *const T, bstrData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRendezvousSession.VTable, self.vtable).SendContextData(@ptrCast(*const IRendezvousSession, self), bstrData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRendezvousSession_Terminate(self: *const T, hr: HRESULT, bstrAppData: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRendezvousSession.VTable, self.vtable).Terminate(@ptrCast(*const IRendezvousSession, self), hr, bstrAppData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_DRendezvousSessionEvents_Value = @import("../zig.zig").Guid.initString("3FA19CF8-64C4-4F53-AE60-635B3806ECA6");
pub const IID_DRendezvousSessionEvents = &IID_DRendezvousSessionEvents_Value;
pub const DRendezvousSessionEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRendezvousApplication_Value = @import("../zig.zig").Guid.initString("4F4D070B-A275-49FB-B10D-8EC26387B50D");
pub const IID_IRendezvousApplication = &IID_IRendezvousApplication_Value;
pub const IRendezvousApplication = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetRendezvousSession: fn(
            self: *const IRendezvousApplication,
            pRendezvousSession: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRendezvousApplication_SetRendezvousSession(self: *const T, pRendezvousSession: ?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRendezvousApplication.VTable, self.vtable).SetRendezvousSession(@ptrCast(*const IRendezvousApplication, self), pRendezvousSession);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (4)
//--------------------------------------------------------------------------------
const IDispatch = @import("automation.zig").IDispatch;
const BSTR = @import("automation.zig").BSTR;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;

test {
    const constant_export_count = 0;
    const type_export_count = 5;
    const enum_value_export_count = 14;
    const com_iface_id_export_count = 3;
    const com_class_id_export_count = 1;
    const func_export_count = 0;
    const unicode_alias_count = 0;
    const import_count = 4;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (36)
//--------------------------------------------------------------------------------
const CLSID_UPnPDeviceFinder_Value = @import("../zig.zig").Guid.initString("E2085F28-FEB7-404A-B8E7-E659BDEAAA02");
pub const CLSID_UPnPDeviceFinder = &CLSID_UPnPDeviceFinder_Value;

const CLSID_UPnPDevices_Value = @import("../zig.zig").Guid.initString("B9E84FFD-AD3C-40A4-B835-0882EBCBAAA8");
pub const CLSID_UPnPDevices = &CLSID_UPnPDevices_Value;

const CLSID_UPnPDevice_Value = @import("../zig.zig").Guid.initString("A32552C5-BA61-457A-B59A-A2561E125E33");
pub const CLSID_UPnPDevice = &CLSID_UPnPDevice_Value;

const CLSID_UPnPServices_Value = @import("../zig.zig").Guid.initString("C0BC4B4A-A406-4EFC-932F-B8546B8100CC");
pub const CLSID_UPnPServices = &CLSID_UPnPServices_Value;

const CLSID_UPnPService_Value = @import("../zig.zig").Guid.initString("C624BA95-FBCB-4409-8C03-8CCEEC533EF1");
pub const CLSID_UPnPService = &CLSID_UPnPService_Value;

const CLSID_UPnPDescriptionDocument_Value = @import("../zig.zig").Guid.initString("1D8A9B47-3A28-4CE2-8A4B-BD34E45BCEEB");
pub const CLSID_UPnPDescriptionDocument = &CLSID_UPnPDescriptionDocument_Value;

const CLSID_UPnPDeviceFinderEx_Value = @import("../zig.zig").Guid.initString("181B54FC-380B-4A75-B3F1-4AC45E9605B0");
pub const CLSID_UPnPDeviceFinderEx = &CLSID_UPnPDeviceFinderEx_Value;

const CLSID_UPnPDescriptionDocumentEx_Value = @import("../zig.zig").Guid.initString("33FD0563-D81A-4393-83CC-0195B1DA2F91");
pub const CLSID_UPnPDescriptionDocumentEx = &CLSID_UPnPDescriptionDocumentEx_Value;

const IID_IUPnPDeviceFinder_Value = @import("../zig.zig").Guid.initString("ADDA3D55-6F72-4319-BFF9-18600A539B10");
pub const IID_IUPnPDeviceFinder = &IID_IUPnPDeviceFinder_Value;
pub const IUPnPDeviceFinder = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        FindByType: fn(
            self: *const IUPnPDeviceFinder,
            bstrTypeURI: BSTR,
            dwFlags: u32,
            pDevices: **IUPnPDevices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAsyncFind: fn(
            self: *const IUPnPDeviceFinder,
            bstrTypeURI: BSTR,
            dwFlags: u32,
            punkDeviceFinderCallback: *IUnknown,
            plFindData: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartAsyncFind: fn(
            self: *const IUPnPDeviceFinder,
            lFindData: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelAsyncFind: fn(
            self: *const IUPnPDeviceFinder,
            lFindData: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindByUDN: fn(
            self: *const IUPnPDeviceFinder,
            bstrUDN: BSTR,
            pDevice: **IUPnPDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDeviceFinder_FindByType(self: *const T, bstrTypeURI: BSTR, dwFlags: u32, pDevices: **IUPnPDevices) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDeviceFinder.VTable, self.vtable).FindByType(@ptrCast(*const IUPnPDeviceFinder, self), bstrTypeURI, dwFlags, pDevices);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDeviceFinder_CreateAsyncFind(self: *const T, bstrTypeURI: BSTR, dwFlags: u32, punkDeviceFinderCallback: *IUnknown, plFindData: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDeviceFinder.VTable, self.vtable).CreateAsyncFind(@ptrCast(*const IUPnPDeviceFinder, self), bstrTypeURI, dwFlags, punkDeviceFinderCallback, plFindData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDeviceFinder_StartAsyncFind(self: *const T, lFindData: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDeviceFinder.VTable, self.vtable).StartAsyncFind(@ptrCast(*const IUPnPDeviceFinder, self), lFindData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDeviceFinder_CancelAsyncFind(self: *const T, lFindData: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDeviceFinder.VTable, self.vtable).CancelAsyncFind(@ptrCast(*const IUPnPDeviceFinder, self), lFindData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDeviceFinder_FindByUDN(self: *const T, bstrUDN: BSTR, pDevice: **IUPnPDevice) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDeviceFinder.VTable, self.vtable).FindByUDN(@ptrCast(*const IUPnPDeviceFinder, self), bstrUDN, pDevice);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPAddressFamilyControl_Value = @import("../zig.zig").Guid.initString("E3BF6178-694E-459F-A5A6-191EA0FFA1C7");
pub const IID_IUPnPAddressFamilyControl = &IID_IUPnPAddressFamilyControl_Value;
pub const IUPnPAddressFamilyControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAddressFamily: fn(
            self: *const IUPnPAddressFamilyControl,
            dwFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAddressFamily: fn(
            self: *const IUPnPAddressFamilyControl,
            pdwFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPAddressFamilyControl_SetAddressFamily(self: *const T, dwFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPAddressFamilyControl.VTable, self.vtable).SetAddressFamily(@ptrCast(*const IUPnPAddressFamilyControl, self), dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPAddressFamilyControl_GetAddressFamily(self: *const T, pdwFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPAddressFamilyControl.VTable, self.vtable).GetAddressFamily(@ptrCast(*const IUPnPAddressFamilyControl, self), pdwFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPHttpHeaderControl_Value = @import("../zig.zig").Guid.initString("0405AF4F-8B5C-447C-80F2-B75984A31F3C");
pub const IID_IUPnPHttpHeaderControl = &IID_IUPnPHttpHeaderControl_Value;
pub const IUPnPHttpHeaderControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddRequestHeaders: fn(
            self: *const IUPnPHttpHeaderControl,
            bstrHttpHeaders: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPHttpHeaderControl_AddRequestHeaders(self: *const T, bstrHttpHeaders: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPHttpHeaderControl.VTable, self.vtable).AddRequestHeaders(@ptrCast(*const IUPnPHttpHeaderControl, self), bstrHttpHeaders);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPDeviceFinderCallback_Value = @import("../zig.zig").Guid.initString("415A984A-88B3-49F3-92AF-0508BEDF0D6C");
pub const IID_IUPnPDeviceFinderCallback = &IID_IUPnPDeviceFinderCallback_Value;
pub const IUPnPDeviceFinderCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DeviceAdded: fn(
            self: *const IUPnPDeviceFinderCallback,
            lFindData: i32,
            pDevice: *IUPnPDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeviceRemoved: fn(
            self: *const IUPnPDeviceFinderCallback,
            lFindData: i32,
            bstrUDN: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SearchComplete: fn(
            self: *const IUPnPDeviceFinderCallback,
            lFindData: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDeviceFinderCallback_DeviceAdded(self: *const T, lFindData: i32, pDevice: *IUPnPDevice) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDeviceFinderCallback.VTable, self.vtable).DeviceAdded(@ptrCast(*const IUPnPDeviceFinderCallback, self), lFindData, pDevice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDeviceFinderCallback_DeviceRemoved(self: *const T, lFindData: i32, bstrUDN: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDeviceFinderCallback.VTable, self.vtable).DeviceRemoved(@ptrCast(*const IUPnPDeviceFinderCallback, self), lFindData, bstrUDN);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDeviceFinderCallback_SearchComplete(self: *const T, lFindData: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDeviceFinderCallback.VTable, self.vtable).SearchComplete(@ptrCast(*const IUPnPDeviceFinderCallback, self), lFindData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPServices_Value = @import("../zig.zig").Guid.initString("3F8C8E9E-9A7A-4DC8-BC41-FF31FA374956");
pub const IID_IUPnPServices = &IID_IUPnPServices_Value;
pub const IUPnPServices = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const IUPnPServices,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IUPnPServices,
            ppunk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const IUPnPServices,
            bstrServiceId: BSTR,
            ppService: **IUPnPService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPServices_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPServices.VTable, self.vtable).get_Count(@ptrCast(*const IUPnPServices, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPServices_get__NewEnum(self: *const T, ppunk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPServices.VTable, self.vtable).get__NewEnum(@ptrCast(*const IUPnPServices, self), ppunk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPServices_get_Item(self: *const T, bstrServiceId: BSTR, ppService: **IUPnPService) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPServices.VTable, self.vtable).get_Item(@ptrCast(*const IUPnPServices, self), bstrServiceId, ppService);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPService_Value = @import("../zig.zig").Guid.initString("A295019C-DC65-47DD-90DC-7FE918A1AB44");
pub const IID_IUPnPService = &IID_IUPnPService_Value;
pub const IUPnPService = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        QueryStateVariable: fn(
            self: *const IUPnPService,
            bstrVariableName: BSTR,
            pValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeAction: fn(
            self: *const IUPnPService,
            bstrActionName: BSTR,
            vInActionArgs: VARIANT,
            pvOutActionArgs: *VARIANT,
            pvRetVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ServiceTypeIdentifier: fn(
            self: *const IUPnPService,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCallback: fn(
            self: *const IUPnPService,
            pUnkCallback: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Id: fn(
            self: *const IUPnPService,
            pbstrId: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_LastTransportStatus: fn(
            self: *const IUPnPService,
            plValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPService_QueryStateVariable(self: *const T, bstrVariableName: BSTR, pValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPService.VTable, self.vtable).QueryStateVariable(@ptrCast(*const IUPnPService, self), bstrVariableName, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPService_InvokeAction(self: *const T, bstrActionName: BSTR, vInActionArgs: VARIANT, pvOutActionArgs: *VARIANT, pvRetVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPService.VTable, self.vtable).InvokeAction(@ptrCast(*const IUPnPService, self), bstrActionName, vInActionArgs, pvOutActionArgs, pvRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPService_get_ServiceTypeIdentifier(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPService.VTable, self.vtable).get_ServiceTypeIdentifier(@ptrCast(*const IUPnPService, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPService_AddCallback(self: *const T, pUnkCallback: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPService.VTable, self.vtable).AddCallback(@ptrCast(*const IUPnPService, self), pUnkCallback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPService_get_Id(self: *const T, pbstrId: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPService.VTable, self.vtable).get_Id(@ptrCast(*const IUPnPService, self), pbstrId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPService_get_LastTransportStatus(self: *const T, plValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPService.VTable, self.vtable).get_LastTransportStatus(@ptrCast(*const IUPnPService, self), plValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPAsyncResult_Value = @import("../zig.zig").Guid.initString("4D65FD08-D13E-4274-9C8B-DD8D028C8644");
pub const IID_IUPnPAsyncResult = &IID_IUPnPAsyncResult_Value;
pub const IUPnPAsyncResult = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AsyncOperationComplete: fn(
            self: *const IUPnPAsyncResult,
            ullRequestID: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPAsyncResult_AsyncOperationComplete(self: *const T, ullRequestID: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPAsyncResult.VTable, self.vtable).AsyncOperationComplete(@ptrCast(*const IUPnPAsyncResult, self), ullRequestID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPServiceAsync_Value = @import("../zig.zig").Guid.initString("098BDAF5-5EC1-49E7-A260-B3A11DD8680C");
pub const IID_IUPnPServiceAsync = &IID_IUPnPServiceAsync_Value;
pub const IUPnPServiceAsync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BeginInvokeAction: fn(
            self: *const IUPnPServiceAsync,
            bstrActionName: BSTR,
            vInActionArgs: VARIANT,
            pAsyncResult: *IUPnPAsyncResult,
            pullRequestID: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndInvokeAction: fn(
            self: *const IUPnPServiceAsync,
            ullRequestID: u64,
            pvOutActionArgs: *VARIANT,
            pvRetVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginQueryStateVariable: fn(
            self: *const IUPnPServiceAsync,
            bstrVariableName: BSTR,
            pAsyncResult: *IUPnPAsyncResult,
            pullRequestID: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndQueryStateVariable: fn(
            self: *const IUPnPServiceAsync,
            ullRequestID: u64,
            pValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginSubscribeToEvents: fn(
            self: *const IUPnPServiceAsync,
            pUnkCallback: *IUnknown,
            pAsyncResult: *IUPnPAsyncResult,
            pullRequestID: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndSubscribeToEvents: fn(
            self: *const IUPnPServiceAsync,
            ullRequestID: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginSCPDDownload: fn(
            self: *const IUPnPServiceAsync,
            pAsyncResult: *IUPnPAsyncResult,
            pullRequestID: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndSCPDDownload: fn(
            self: *const IUPnPServiceAsync,
            ullRequestID: u64,
            pbstrSCPDDoc: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelAsyncOperation: fn(
            self: *const IUPnPServiceAsync,
            ullRequestID: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPServiceAsync_BeginInvokeAction(self: *const T, bstrActionName: BSTR, vInActionArgs: VARIANT, pAsyncResult: *IUPnPAsyncResult, pullRequestID: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPServiceAsync.VTable, self.vtable).BeginInvokeAction(@ptrCast(*const IUPnPServiceAsync, self), bstrActionName, vInActionArgs, pAsyncResult, pullRequestID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPServiceAsync_EndInvokeAction(self: *const T, ullRequestID: u64, pvOutActionArgs: *VARIANT, pvRetVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPServiceAsync.VTable, self.vtable).EndInvokeAction(@ptrCast(*const IUPnPServiceAsync, self), ullRequestID, pvOutActionArgs, pvRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPServiceAsync_BeginQueryStateVariable(self: *const T, bstrVariableName: BSTR, pAsyncResult: *IUPnPAsyncResult, pullRequestID: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPServiceAsync.VTable, self.vtable).BeginQueryStateVariable(@ptrCast(*const IUPnPServiceAsync, self), bstrVariableName, pAsyncResult, pullRequestID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPServiceAsync_EndQueryStateVariable(self: *const T, ullRequestID: u64, pValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPServiceAsync.VTable, self.vtable).EndQueryStateVariable(@ptrCast(*const IUPnPServiceAsync, self), ullRequestID, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPServiceAsync_BeginSubscribeToEvents(self: *const T, pUnkCallback: *IUnknown, pAsyncResult: *IUPnPAsyncResult, pullRequestID: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPServiceAsync.VTable, self.vtable).BeginSubscribeToEvents(@ptrCast(*const IUPnPServiceAsync, self), pUnkCallback, pAsyncResult, pullRequestID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPServiceAsync_EndSubscribeToEvents(self: *const T, ullRequestID: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPServiceAsync.VTable, self.vtable).EndSubscribeToEvents(@ptrCast(*const IUPnPServiceAsync, self), ullRequestID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPServiceAsync_BeginSCPDDownload(self: *const T, pAsyncResult: *IUPnPAsyncResult, pullRequestID: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPServiceAsync.VTable, self.vtable).BeginSCPDDownload(@ptrCast(*const IUPnPServiceAsync, self), pAsyncResult, pullRequestID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPServiceAsync_EndSCPDDownload(self: *const T, ullRequestID: u64, pbstrSCPDDoc: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPServiceAsync.VTable, self.vtable).EndSCPDDownload(@ptrCast(*const IUPnPServiceAsync, self), ullRequestID, pbstrSCPDDoc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPServiceAsync_CancelAsyncOperation(self: *const T, ullRequestID: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPServiceAsync.VTable, self.vtable).CancelAsyncOperation(@ptrCast(*const IUPnPServiceAsync, self), ullRequestID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPServiceCallback_Value = @import("../zig.zig").Guid.initString("31FADCA9-AB73-464B-B67D-5C1D0F83C8B8");
pub const IID_IUPnPServiceCallback = &IID_IUPnPServiceCallback_Value;
pub const IUPnPServiceCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StateVariableChanged: fn(
            self: *const IUPnPServiceCallback,
            pus: *IUPnPService,
            pcwszStateVarName: [*:0]const u16,
            vaValue: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ServiceInstanceDied: fn(
            self: *const IUPnPServiceCallback,
            pus: *IUPnPService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPServiceCallback_StateVariableChanged(self: *const T, pus: *IUPnPService, pcwszStateVarName: [*:0]const u16, vaValue: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPServiceCallback.VTable, self.vtable).StateVariableChanged(@ptrCast(*const IUPnPServiceCallback, self), pus, pcwszStateVarName, vaValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPServiceCallback_ServiceInstanceDied(self: *const T, pus: *IUPnPService) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPServiceCallback.VTable, self.vtable).ServiceInstanceDied(@ptrCast(*const IUPnPServiceCallback, self), pus);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPServiceEnumProperty_Value = @import("../zig.zig").Guid.initString("38873B37-91BB-49F4-B249-2E8EFBB8A816");
pub const IID_IUPnPServiceEnumProperty = &IID_IUPnPServiceEnumProperty_Value;
pub const IUPnPServiceEnumProperty = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetServiceEnumProperty: fn(
            self: *const IUPnPServiceEnumProperty,
            dwMask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPServiceEnumProperty_SetServiceEnumProperty(self: *const T, dwMask: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPServiceEnumProperty.VTable, self.vtable).SetServiceEnumProperty(@ptrCast(*const IUPnPServiceEnumProperty, self), dwMask);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPServiceDocumentAccess_Value = @import("../zig.zig").Guid.initString("21905529-0A5E-4589-825D-7E6D87EA6998");
pub const IID_IUPnPServiceDocumentAccess = &IID_IUPnPServiceDocumentAccess_Value;
pub const IUPnPServiceDocumentAccess = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDocumentURL: fn(
            self: *const IUPnPServiceDocumentAccess,
            pbstrDocUrl: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocument: fn(
            self: *const IUPnPServiceDocumentAccess,
            pbstrDoc: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPServiceDocumentAccess_GetDocumentURL(self: *const T, pbstrDocUrl: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPServiceDocumentAccess.VTable, self.vtable).GetDocumentURL(@ptrCast(*const IUPnPServiceDocumentAccess, self), pbstrDocUrl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPServiceDocumentAccess_GetDocument(self: *const T, pbstrDoc: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPServiceDocumentAccess.VTable, self.vtable).GetDocument(@ptrCast(*const IUPnPServiceDocumentAccess, self), pbstrDoc);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPDevices_Value = @import("../zig.zig").Guid.initString("FDBC0C73-BDA3-4C66-AC4F-F2D96FDAD68C");
pub const IID_IUPnPDevices = &IID_IUPnPDevices_Value;
pub const IUPnPDevices = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const IUPnPDevices,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const IUPnPDevices,
            ppunk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const IUPnPDevices,
            bstrUDN: BSTR,
            ppDevice: **IUPnPDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevices_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevices.VTable, self.vtable).get_Count(@ptrCast(*const IUPnPDevices, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevices_get__NewEnum(self: *const T, ppunk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevices.VTable, self.vtable).get__NewEnum(@ptrCast(*const IUPnPDevices, self), ppunk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevices_get_Item(self: *const T, bstrUDN: BSTR, ppDevice: **IUPnPDevice) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevices.VTable, self.vtable).get_Item(@ptrCast(*const IUPnPDevices, self), bstrUDN, ppDevice);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPDevice_Value = @import("../zig.zig").Guid.initString("3D44D0D1-98C9-4889-ACD1-F9D674BF2221");
pub const IID_IUPnPDevice = &IID_IUPnPDevice_Value;
pub const IUPnPDevice = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_IsRootDevice: fn(
            self: *const IUPnPDevice,
            pvarb: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RootDevice: fn(
            self: *const IUPnPDevice,
            ppudRootDevice: **IUPnPDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ParentDevice: fn(
            self: *const IUPnPDevice,
            ppudDeviceParent: **IUPnPDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_HasChildren: fn(
            self: *const IUPnPDevice,
            pvarb: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Children: fn(
            self: *const IUPnPDevice,
            ppudChildren: **IUPnPDevices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UniqueDeviceName: fn(
            self: *const IUPnPDevice,
            pbstr: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_FriendlyName: fn(
            self: *const IUPnPDevice,
            pbstr: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Type: fn(
            self: *const IUPnPDevice,
            pbstr: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PresentationURL: fn(
            self: *const IUPnPDevice,
            pbstr: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ManufacturerName: fn(
            self: *const IUPnPDevice,
            pbstr: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ManufacturerURL: fn(
            self: *const IUPnPDevice,
            pbstr: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ModelName: fn(
            self: *const IUPnPDevice,
            pbstr: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ModelNumber: fn(
            self: *const IUPnPDevice,
            pbstr: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Description: fn(
            self: *const IUPnPDevice,
            pbstr: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ModelURL: fn(
            self: *const IUPnPDevice,
            pbstr: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_UPC: fn(
            self: *const IUPnPDevice,
            pbstr: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SerialNumber: fn(
            self: *const IUPnPDevice,
            pbstr: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IconURL: fn(
            self: *const IUPnPDevice,
            bstrEncodingFormat: BSTR,
            lSizeX: i32,
            lSizeY: i32,
            lBitDepth: i32,
            pbstrIconURL: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Services: fn(
            self: *const IUPnPDevice,
            ppusServices: **IUPnPServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_get_IsRootDevice(self: *const T, pvarb: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).get_IsRootDevice(@ptrCast(*const IUPnPDevice, self), pvarb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_get_RootDevice(self: *const T, ppudRootDevice: **IUPnPDevice) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).get_RootDevice(@ptrCast(*const IUPnPDevice, self), ppudRootDevice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_get_ParentDevice(self: *const T, ppudDeviceParent: **IUPnPDevice) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).get_ParentDevice(@ptrCast(*const IUPnPDevice, self), ppudDeviceParent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_get_HasChildren(self: *const T, pvarb: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).get_HasChildren(@ptrCast(*const IUPnPDevice, self), pvarb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_get_Children(self: *const T, ppudChildren: **IUPnPDevices) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).get_Children(@ptrCast(*const IUPnPDevice, self), ppudChildren);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_get_UniqueDeviceName(self: *const T, pbstr: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).get_UniqueDeviceName(@ptrCast(*const IUPnPDevice, self), pbstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_get_FriendlyName(self: *const T, pbstr: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).get_FriendlyName(@ptrCast(*const IUPnPDevice, self), pbstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_get_Type(self: *const T, pbstr: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).get_Type(@ptrCast(*const IUPnPDevice, self), pbstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_get_PresentationURL(self: *const T, pbstr: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).get_PresentationURL(@ptrCast(*const IUPnPDevice, self), pbstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_get_ManufacturerName(self: *const T, pbstr: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).get_ManufacturerName(@ptrCast(*const IUPnPDevice, self), pbstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_get_ManufacturerURL(self: *const T, pbstr: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).get_ManufacturerURL(@ptrCast(*const IUPnPDevice, self), pbstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_get_ModelName(self: *const T, pbstr: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).get_ModelName(@ptrCast(*const IUPnPDevice, self), pbstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_get_ModelNumber(self: *const T, pbstr: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).get_ModelNumber(@ptrCast(*const IUPnPDevice, self), pbstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_get_Description(self: *const T, pbstr: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).get_Description(@ptrCast(*const IUPnPDevice, self), pbstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_get_ModelURL(self: *const T, pbstr: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).get_ModelURL(@ptrCast(*const IUPnPDevice, self), pbstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_get_UPC(self: *const T, pbstr: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).get_UPC(@ptrCast(*const IUPnPDevice, self), pbstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_get_SerialNumber(self: *const T, pbstr: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).get_SerialNumber(@ptrCast(*const IUPnPDevice, self), pbstr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_IconURL(self: *const T, bstrEncodingFormat: BSTR, lSizeX: i32, lSizeY: i32, lBitDepth: i32, pbstrIconURL: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).IconURL(@ptrCast(*const IUPnPDevice, self), bstrEncodingFormat, lSizeX, lSizeY, lBitDepth, pbstrIconURL);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDevice_get_Services(self: *const T, ppusServices: **IUPnPServices) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDevice.VTable, self.vtable).get_Services(@ptrCast(*const IUPnPDevice, self), ppusServices);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPDeviceDocumentAccess_Value = @import("../zig.zig").Guid.initString("E7772804-3287-418E-9072-CF2B47238981");
pub const IID_IUPnPDeviceDocumentAccess = &IID_IUPnPDeviceDocumentAccess_Value;
pub const IUPnPDeviceDocumentAccess = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDocumentURL: fn(
            self: *const IUPnPDeviceDocumentAccess,
            pbstrDocument: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDeviceDocumentAccess_GetDocumentURL(self: *const T, pbstrDocument: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDeviceDocumentAccess.VTable, self.vtable).GetDocumentURL(@ptrCast(*const IUPnPDeviceDocumentAccess, self), pbstrDocument);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPDeviceDocumentAccessEx_Value = @import("../zig.zig").Guid.initString("C4BC4050-6178-4BD1-A4B8-6398321F3247");
pub const IID_IUPnPDeviceDocumentAccessEx = &IID_IUPnPDeviceDocumentAccessEx_Value;
pub const IUPnPDeviceDocumentAccessEx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDocument: fn(
            self: *const IUPnPDeviceDocumentAccessEx,
            pbstrDocument: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDeviceDocumentAccessEx_GetDocument(self: *const T, pbstrDocument: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDeviceDocumentAccessEx.VTable, self.vtable).GetDocument(@ptrCast(*const IUPnPDeviceDocumentAccessEx, self), pbstrDocument);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPDescriptionDocument_Value = @import("../zig.zig").Guid.initString("11D1C1B2-7DAA-4C9E-9595-7F82ED206D1E");
pub const IID_IUPnPDescriptionDocument = &IID_IUPnPDescriptionDocument_Value;
pub const IUPnPDescriptionDocument = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ReadyState: fn(
            self: *const IUPnPDescriptionDocument,
            plReadyState: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Load: fn(
            self: *const IUPnPDescriptionDocument,
            bstrUrl: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadAsync: fn(
            self: *const IUPnPDescriptionDocument,
            bstrUrl: BSTR,
            punkCallback: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_LoadResult: fn(
            self: *const IUPnPDescriptionDocument,
            phrError: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: fn(
            self: *const IUPnPDescriptionDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RootDevice: fn(
            self: *const IUPnPDescriptionDocument,
            ppudRootDevice: **IUPnPDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeviceByUDN: fn(
            self: *const IUPnPDescriptionDocument,
            bstrUDN: BSTR,
            ppudDevice: **IUPnPDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDescriptionDocument_get_ReadyState(self: *const T, plReadyState: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDescriptionDocument.VTable, self.vtable).get_ReadyState(@ptrCast(*const IUPnPDescriptionDocument, self), plReadyState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDescriptionDocument_Load(self: *const T, bstrUrl: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDescriptionDocument.VTable, self.vtable).Load(@ptrCast(*const IUPnPDescriptionDocument, self), bstrUrl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDescriptionDocument_LoadAsync(self: *const T, bstrUrl: BSTR, punkCallback: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDescriptionDocument.VTable, self.vtable).LoadAsync(@ptrCast(*const IUPnPDescriptionDocument, self), bstrUrl, punkCallback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDescriptionDocument_get_LoadResult(self: *const T, phrError: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDescriptionDocument.VTable, self.vtable).get_LoadResult(@ptrCast(*const IUPnPDescriptionDocument, self), phrError);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDescriptionDocument_Abort(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDescriptionDocument.VTable, self.vtable).Abort(@ptrCast(*const IUPnPDescriptionDocument, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDescriptionDocument_RootDevice(self: *const T, ppudRootDevice: **IUPnPDevice) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDescriptionDocument.VTable, self.vtable).RootDevice(@ptrCast(*const IUPnPDescriptionDocument, self), ppudRootDevice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDescriptionDocument_DeviceByUDN(self: *const T, bstrUDN: BSTR, ppudDevice: **IUPnPDevice) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDescriptionDocument.VTable, self.vtable).DeviceByUDN(@ptrCast(*const IUPnPDescriptionDocument, self), bstrUDN, ppudDevice);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPDeviceFinderAddCallbackWithInterface_Value = @import("../zig.zig").Guid.initString("983DFC0B-1796-44DF-8975-CA545B620EE5");
pub const IID_IUPnPDeviceFinderAddCallbackWithInterface = &IID_IUPnPDeviceFinderAddCallbackWithInterface_Value;
pub const IUPnPDeviceFinderAddCallbackWithInterface = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DeviceAddedWithInterface: fn(
            self: *const IUPnPDeviceFinderAddCallbackWithInterface,
            lFindData: i32,
            pDevice: *IUPnPDevice,
            pguidInterface: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDeviceFinderAddCallbackWithInterface_DeviceAddedWithInterface(self: *const T, lFindData: i32, pDevice: *IUPnPDevice, pguidInterface: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDeviceFinderAddCallbackWithInterface.VTable, self.vtable).DeviceAddedWithInterface(@ptrCast(*const IUPnPDeviceFinderAddCallbackWithInterface, self), lFindData, pDevice, pguidInterface);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPDescriptionDocumentCallback_Value = @import("../zig.zig").Guid.initString("77394C69-5486-40D6-9BC3-4991983E02DA");
pub const IID_IUPnPDescriptionDocumentCallback = &IID_IUPnPDescriptionDocumentCallback_Value;
pub const IUPnPDescriptionDocumentCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LoadComplete: fn(
            self: *const IUPnPDescriptionDocumentCallback,
            hrLoadResult: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDescriptionDocumentCallback_LoadComplete(self: *const T, hrLoadResult: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDescriptionDocumentCallback.VTable, self.vtable).LoadComplete(@ptrCast(*const IUPnPDescriptionDocumentCallback, self), hrLoadResult);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_UPnPRegistrar_Value = @import("../zig.zig").Guid.initString("204810B9-73B2-11D4-BF42-00B0D0118B56");
pub const CLSID_UPnPRegistrar = &CLSID_UPnPRegistrar_Value;

const CLSID_UPnPRemoteEndpointInfo_Value = @import("../zig.zig").Guid.initString("2E5E84E9-4049-4244-B728-2D24227157C7");
pub const CLSID_UPnPRemoteEndpointInfo = &CLSID_UPnPRemoteEndpointInfo_Value;

const IID_IUPnPEventSink_Value = @import("../zig.zig").Guid.initString("204810B4-73B2-11D4-BF42-00B0D0118B56");
pub const IID_IUPnPEventSink = &IID_IUPnPEventSink_Value;
pub const IUPnPEventSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStateChanged: fn(
            self: *const IUPnPEventSink,
            cChanges: u32,
            rgdispidChanges: [*]i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnStateChangedSafe: fn(
            self: *const IUPnPEventSink,
            varsadispidChanges: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPEventSink_OnStateChanged(self: *const T, cChanges: u32, rgdispidChanges: [*]i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPEventSink.VTable, self.vtable).OnStateChanged(@ptrCast(*const IUPnPEventSink, self), cChanges, rgdispidChanges);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPEventSink_OnStateChangedSafe(self: *const T, varsadispidChanges: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPEventSink.VTable, self.vtable).OnStateChangedSafe(@ptrCast(*const IUPnPEventSink, self), varsadispidChanges);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPEventSource_Value = @import("../zig.zig").Guid.initString("204810B5-73B2-11D4-BF42-00B0D0118B56");
pub const IID_IUPnPEventSource = &IID_IUPnPEventSource_Value;
pub const IUPnPEventSource = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: fn(
            self: *const IUPnPEventSource,
            pesSubscriber: *IUPnPEventSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: fn(
            self: *const IUPnPEventSource,
            pesSubscriber: *IUPnPEventSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPEventSource_Advise(self: *const T, pesSubscriber: *IUPnPEventSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPEventSource.VTable, self.vtable).Advise(@ptrCast(*const IUPnPEventSource, self), pesSubscriber);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPEventSource_Unadvise(self: *const T, pesSubscriber: *IUPnPEventSink) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPEventSource.VTable, self.vtable).Unadvise(@ptrCast(*const IUPnPEventSource, self), pesSubscriber);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPRegistrar_Value = @import("../zig.zig").Guid.initString("204810B6-73B2-11D4-BF42-00B0D0118B56");
pub const IID_IUPnPRegistrar = &IID_IUPnPRegistrar_Value;
pub const IUPnPRegistrar = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterDevice: fn(
            self: *const IUPnPRegistrar,
            bstrXMLDesc: BSTR,
            bstrProgIDDeviceControlClass: BSTR,
            bstrInitString: BSTR,
            bstrContainerId: BSTR,
            bstrResourcePath: BSTR,
            nLifeTime: i32,
            pbstrDeviceIdentifier: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterRunningDevice: fn(
            self: *const IUPnPRegistrar,
            bstrXMLDesc: BSTR,
            punkDeviceControl: *IUnknown,
            bstrInitString: BSTR,
            bstrResourcePath: BSTR,
            nLifeTime: i32,
            pbstrDeviceIdentifier: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterDeviceProvider: fn(
            self: *const IUPnPRegistrar,
            bstrProviderName: BSTR,
            bstrProgIDProviderClass: BSTR,
            bstrInitString: BSTR,
            bstrContainerId: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUniqueDeviceName: fn(
            self: *const IUPnPRegistrar,
            bstrDeviceIdentifier: BSTR,
            bstrTemplateUDN: BSTR,
            pbstrUDN: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterDevice: fn(
            self: *const IUPnPRegistrar,
            bstrDeviceIdentifier: BSTR,
            fPermanent: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterDeviceProvider: fn(
            self: *const IUPnPRegistrar,
            bstrProviderName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPRegistrar_RegisterDevice(self: *const T, bstrXMLDesc: BSTR, bstrProgIDDeviceControlClass: BSTR, bstrInitString: BSTR, bstrContainerId: BSTR, bstrResourcePath: BSTR, nLifeTime: i32, pbstrDeviceIdentifier: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPRegistrar.VTable, self.vtable).RegisterDevice(@ptrCast(*const IUPnPRegistrar, self), bstrXMLDesc, bstrProgIDDeviceControlClass, bstrInitString, bstrContainerId, bstrResourcePath, nLifeTime, pbstrDeviceIdentifier);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPRegistrar_RegisterRunningDevice(self: *const T, bstrXMLDesc: BSTR, punkDeviceControl: *IUnknown, bstrInitString: BSTR, bstrResourcePath: BSTR, nLifeTime: i32, pbstrDeviceIdentifier: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPRegistrar.VTable, self.vtable).RegisterRunningDevice(@ptrCast(*const IUPnPRegistrar, self), bstrXMLDesc, punkDeviceControl, bstrInitString, bstrResourcePath, nLifeTime, pbstrDeviceIdentifier);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPRegistrar_RegisterDeviceProvider(self: *const T, bstrProviderName: BSTR, bstrProgIDProviderClass: BSTR, bstrInitString: BSTR, bstrContainerId: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPRegistrar.VTable, self.vtable).RegisterDeviceProvider(@ptrCast(*const IUPnPRegistrar, self), bstrProviderName, bstrProgIDProviderClass, bstrInitString, bstrContainerId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPRegistrar_GetUniqueDeviceName(self: *const T, bstrDeviceIdentifier: BSTR, bstrTemplateUDN: BSTR, pbstrUDN: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPRegistrar.VTable, self.vtable).GetUniqueDeviceName(@ptrCast(*const IUPnPRegistrar, self), bstrDeviceIdentifier, bstrTemplateUDN, pbstrUDN);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPRegistrar_UnregisterDevice(self: *const T, bstrDeviceIdentifier: BSTR, fPermanent: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPRegistrar.VTable, self.vtable).UnregisterDevice(@ptrCast(*const IUPnPRegistrar, self), bstrDeviceIdentifier, fPermanent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPRegistrar_UnregisterDeviceProvider(self: *const T, bstrProviderName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPRegistrar.VTable, self.vtable).UnregisterDeviceProvider(@ptrCast(*const IUPnPRegistrar, self), bstrProviderName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPReregistrar_Value = @import("../zig.zig").Guid.initString("204810B7-73B2-11D4-BF42-00B0D0118B56");
pub const IID_IUPnPReregistrar = &IID_IUPnPReregistrar_Value;
pub const IUPnPReregistrar = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReregisterDevice: fn(
            self: *const IUPnPReregistrar,
            bstrDeviceIdentifier: BSTR,
            bstrXMLDesc: BSTR,
            bstrProgIDDeviceControlClass: BSTR,
            bstrInitString: BSTR,
            bstrContainerId: BSTR,
            bstrResourcePath: BSTR,
            nLifeTime: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReregisterRunningDevice: fn(
            self: *const IUPnPReregistrar,
            bstrDeviceIdentifier: BSTR,
            bstrXMLDesc: BSTR,
            punkDeviceControl: *IUnknown,
            bstrInitString: BSTR,
            bstrResourcePath: BSTR,
            nLifeTime: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPReregistrar_ReregisterDevice(self: *const T, bstrDeviceIdentifier: BSTR, bstrXMLDesc: BSTR, bstrProgIDDeviceControlClass: BSTR, bstrInitString: BSTR, bstrContainerId: BSTR, bstrResourcePath: BSTR, nLifeTime: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPReregistrar.VTable, self.vtable).ReregisterDevice(@ptrCast(*const IUPnPReregistrar, self), bstrDeviceIdentifier, bstrXMLDesc, bstrProgIDDeviceControlClass, bstrInitString, bstrContainerId, bstrResourcePath, nLifeTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPReregistrar_ReregisterRunningDevice(self: *const T, bstrDeviceIdentifier: BSTR, bstrXMLDesc: BSTR, punkDeviceControl: *IUnknown, bstrInitString: BSTR, bstrResourcePath: BSTR, nLifeTime: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPReregistrar.VTable, self.vtable).ReregisterRunningDevice(@ptrCast(*const IUPnPReregistrar, self), bstrDeviceIdentifier, bstrXMLDesc, punkDeviceControl, bstrInitString, bstrResourcePath, nLifeTime);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPDeviceControl_Value = @import("../zig.zig").Guid.initString("204810BA-73B2-11D4-BF42-00B0D0118B56");
pub const IID_IUPnPDeviceControl = &IID_IUPnPDeviceControl_Value;
pub const IUPnPDeviceControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IUPnPDeviceControl,
            bstrXMLDesc: BSTR,
            bstrDeviceIdentifier: BSTR,
            bstrInitString: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetServiceObject: fn(
            self: *const IUPnPDeviceControl,
            bstrUDN: BSTR,
            bstrServiceId: BSTR,
            ppdispService: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDeviceControl_Initialize(self: *const T, bstrXMLDesc: BSTR, bstrDeviceIdentifier: BSTR, bstrInitString: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDeviceControl.VTable, self.vtable).Initialize(@ptrCast(*const IUPnPDeviceControl, self), bstrXMLDesc, bstrDeviceIdentifier, bstrInitString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDeviceControl_GetServiceObject(self: *const T, bstrUDN: BSTR, bstrServiceId: BSTR, ppdispService: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDeviceControl.VTable, self.vtable).GetServiceObject(@ptrCast(*const IUPnPDeviceControl, self), bstrUDN, bstrServiceId, ppdispService);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPDeviceControlHttpHeaders_Value = @import("../zig.zig").Guid.initString("204810BB-73B2-11D4-BF42-00B0D0118B56");
pub const IID_IUPnPDeviceControlHttpHeaders = &IID_IUPnPDeviceControlHttpHeaders_Value;
pub const IUPnPDeviceControlHttpHeaders = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAdditionalResponseHeaders: fn(
            self: *const IUPnPDeviceControlHttpHeaders,
            bstrHttpResponseHeaders: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDeviceControlHttpHeaders_GetAdditionalResponseHeaders(self: *const T, bstrHttpResponseHeaders: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDeviceControlHttpHeaders.VTable, self.vtable).GetAdditionalResponseHeaders(@ptrCast(*const IUPnPDeviceControlHttpHeaders, self), bstrHttpResponseHeaders);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPDeviceProvider_Value = @import("../zig.zig").Guid.initString("204810B8-73B2-11D4-BF42-00B0D0118B56");
pub const IID_IUPnPDeviceProvider = &IID_IUPnPDeviceProvider_Value;
pub const IUPnPDeviceProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Start: fn(
            self: *const IUPnPDeviceProvider,
            bstrInitString: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: fn(
            self: *const IUPnPDeviceProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDeviceProvider_Start(self: *const T, bstrInitString: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDeviceProvider.VTable, self.vtable).Start(@ptrCast(*const IUPnPDeviceProvider, self), bstrInitString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPDeviceProvider_Stop(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPDeviceProvider.VTable, self.vtable).Stop(@ptrCast(*const IUPnPDeviceProvider, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPRemoteEndpointInfo_Value = @import("../zig.zig").Guid.initString("C92EB863-0269-4AFF-9C72-75321BBA2952");
pub const IID_IUPnPRemoteEndpointInfo = &IID_IUPnPRemoteEndpointInfo_Value;
pub const IUPnPRemoteEndpointInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDwordValue: fn(
            self: *const IUPnPRemoteEndpointInfo,
            bstrValueName: BSTR,
            pdwValue: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringValue: fn(
            self: *const IUPnPRemoteEndpointInfo,
            bstrValueName: BSTR,
            pbstrValue: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGuidValue: fn(
            self: *const IUPnPRemoteEndpointInfo,
            bstrValueName: BSTR,
            pguidValue: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPRemoteEndpointInfo_GetDwordValue(self: *const T, bstrValueName: BSTR, pdwValue: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPRemoteEndpointInfo.VTable, self.vtable).GetDwordValue(@ptrCast(*const IUPnPRemoteEndpointInfo, self), bstrValueName, pdwValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPRemoteEndpointInfo_GetStringValue(self: *const T, bstrValueName: BSTR, pbstrValue: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPRemoteEndpointInfo.VTable, self.vtable).GetStringValue(@ptrCast(*const IUPnPRemoteEndpointInfo, self), bstrValueName, pbstrValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IUPnPRemoteEndpointInfo_GetGuidValue(self: *const T, bstrValueName: BSTR, pguidValue: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IUPnPRemoteEndpointInfo.VTable, self.vtable).GetGuidValue(@ptrCast(*const IUPnPRemoteEndpointInfo, self), bstrValueName, pguidValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (8)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const IDispatch = @import("automation.zig").IDispatch;
const PWSTR = @import("system_services.zig").PWSTR;
const VARIANT = @import("automation.zig").VARIANT;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const BSTR = @import("automation.zig").BSTR;
const BOOL = @import("system_services.zig").BOOL;

test {
    const constant_export_count = 0;
    const type_export_count = 26;
    const enum_value_export_count = 0;
    const com_iface_id_export_count = 26;
    const com_class_id_export_count = 10;
    const func_export_count = 0;
    const unicode_alias_count = 0;
    const import_count = 8;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

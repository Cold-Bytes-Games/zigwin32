//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (1699)
//--------------------------------------------------------------------------------
pub const GUID_DEVINTERFACE_MOUSE = @import("../zig.zig").Guid.initString("378de44c-56ef-11d1-bc8c-00a0c91405dd");
pub const MOUSE_LEFT_BUTTON_DOWN : u32 = 1;
pub const MOUSE_LEFT_BUTTON_UP : u32 = 2;
pub const MOUSE_RIGHT_BUTTON_DOWN : u32 = 4;
pub const MOUSE_RIGHT_BUTTON_UP : u32 = 8;
pub const MOUSE_MIDDLE_BUTTON_DOWN : u32 = 16;
pub const MOUSE_MIDDLE_BUTTON_UP : u32 = 32;
pub const MOUSE_BUTTON_4_DOWN : u32 = 64;
pub const MOUSE_BUTTON_4_UP : u32 = 128;
pub const MOUSE_BUTTON_5_DOWN : u32 = 256;
pub const MOUSE_BUTTON_5_UP : u32 = 512;
pub const MOUSE_WHEEL : u32 = 1024;
pub const MOUSE_HWHEEL : u32 = 2048;
pub const MOUSE_MOVE_RELATIVE : u32 = 0;
pub const MOUSE_MOVE_ABSOLUTE : u32 = 1;
pub const MOUSE_VIRTUAL_DESKTOP : u32 = 2;
pub const MOUSE_ATTRIBUTES_CHANGED : u32 = 4;
pub const MOUSE_MOVE_NOCOALESCE : u32 = 8;
pub const MOUSE_TERMSRV_SRC_SHADOW : u32 = 256;
pub const MOUSE_INPORT_HARDWARE : u32 = 1;
pub const MOUSE_I8042_HARDWARE : u32 = 2;
pub const MOUSE_SERIAL_HARDWARE : u32 = 4;
pub const BALLPOINT_I8042_HARDWARE : u32 = 8;
pub const BALLPOINT_SERIAL_HARDWARE : u32 = 16;
pub const WHEELMOUSE_I8042_HARDWARE : u32 = 32;
pub const WHEELMOUSE_SERIAL_HARDWARE : u32 = 64;
pub const MOUSE_HID_HARDWARE : u32 = 128;
pub const WHEELMOUSE_HID_HARDWARE : u32 = 256;
pub const HORIZONTAL_WHEEL_PRESENT : u32 = 32768;
pub const MOUSE_ERROR_VALUE_BASE : u32 = 20000;
pub const GUID_DEVINTERFACE_KEYBOARD = @import("../zig.zig").Guid.initString("884b96c3-56ef-11d1-bc8c-00a0c91405dd");
pub const KEYBOARD_OVERRUN_MAKE_CODE : u32 = 255;
pub const KEY_MAKE : u32 = 0;
pub const KEY_BREAK : u32 = 1;
pub const KEY_E0 : u32 = 2;
pub const KEY_E1 : u32 = 4;
pub const KEY_TERMSRV_SET_LED : u32 = 8;
pub const KEY_TERMSRV_SHADOW : u32 = 16;
pub const KEY_TERMSRV_VKPACKET : u32 = 32;
pub const KEY_RIM_VKEY : u32 = 64;
pub const KEY_FROM_KEYBOARD_OVERRIDER : u32 = 128;
pub const KEY_UNICODE_SEQUENCE_ITEM : u32 = 256;
pub const KEY_UNICODE_SEQUENCE_END : u32 = 512;
pub const KEYBOARD_EXTENDED_ATTRIBUTES_STRUCT_VERSION_1 : u32 = 1;
pub const KEYBOARD_LED_INJECTED : u32 = 32768;
pub const KEYBOARD_SHADOW : u32 = 16384;
pub const KEYBOARD_KANA_LOCK_ON : u32 = 8;
pub const KEYBOARD_CAPS_LOCK_ON : u32 = 4;
pub const KEYBOARD_NUM_LOCK_ON : u32 = 2;
pub const KEYBOARD_SCROLL_LOCK_ON : u32 = 1;
pub const KEYBOARD_ERROR_VALUE_BASE : u32 = 10000;
pub const DIRECTINPUT_HEADER_VERSION : u32 = 2048;
pub const CLSID_DirectInput = @import("../zig.zig").Guid.initString("25e609e0-b259-11cf-bfc7-444553540000");
pub const CLSID_DirectInputDevice = @import("../zig.zig").Guid.initString("25e609e1-b259-11cf-bfc7-444553540000");
pub const CLSID_DirectInput8 = @import("../zig.zig").Guid.initString("25e609e4-b259-11cf-bfc7-444553540000");
pub const CLSID_DirectInputDevice8 = @import("../zig.zig").Guid.initString("25e609e5-b259-11cf-bfc7-444553540000");
pub const GUID_XAxis = @import("../zig.zig").Guid.initString("a36d02e0-c9f3-11cf-bfc7-444553540000");
pub const GUID_YAxis = @import("../zig.zig").Guid.initString("a36d02e1-c9f3-11cf-bfc7-444553540000");
pub const GUID_ZAxis = @import("../zig.zig").Guid.initString("a36d02e2-c9f3-11cf-bfc7-444553540000");
pub const GUID_RxAxis = @import("../zig.zig").Guid.initString("a36d02f4-c9f3-11cf-bfc7-444553540000");
pub const GUID_RyAxis = @import("../zig.zig").Guid.initString("a36d02f5-c9f3-11cf-bfc7-444553540000");
pub const GUID_RzAxis = @import("../zig.zig").Guid.initString("a36d02e3-c9f3-11cf-bfc7-444553540000");
pub const GUID_Slider = @import("../zig.zig").Guid.initString("a36d02e4-c9f3-11cf-bfc7-444553540000");
pub const GUID_Button = @import("../zig.zig").Guid.initString("a36d02f0-c9f3-11cf-bfc7-444553540000");
pub const GUID_Key = @import("../zig.zig").Guid.initString("55728220-d33c-11cf-bfc7-444553540000");
pub const GUID_POV = @import("../zig.zig").Guid.initString("a36d02f2-c9f3-11cf-bfc7-444553540000");
pub const GUID_Unknown = @import("../zig.zig").Guid.initString("a36d02f3-c9f3-11cf-bfc7-444553540000");
pub const GUID_SysMouse = @import("../zig.zig").Guid.initString("6f1d2b60-d5a0-11cf-bfc7-444553540000");
pub const GUID_SysKeyboard = @import("../zig.zig").Guid.initString("6f1d2b61-d5a0-11cf-bfc7-444553540000");
pub const GUID_Joystick = @import("../zig.zig").Guid.initString("6f1d2b70-d5a0-11cf-bfc7-444553540000");
pub const GUID_SysMouseEm = @import("../zig.zig").Guid.initString("6f1d2b80-d5a0-11cf-bfc7-444553540000");
pub const GUID_SysMouseEm2 = @import("../zig.zig").Guid.initString("6f1d2b81-d5a0-11cf-bfc7-444553540000");
pub const GUID_SysKeyboardEm = @import("../zig.zig").Guid.initString("6f1d2b82-d5a0-11cf-bfc7-444553540000");
pub const GUID_SysKeyboardEm2 = @import("../zig.zig").Guid.initString("6f1d2b83-d5a0-11cf-bfc7-444553540000");
pub const GUID_ConstantForce = @import("../zig.zig").Guid.initString("13541c20-8e33-11d0-9ad0-00a0c9a06e35");
pub const GUID_RampForce = @import("../zig.zig").Guid.initString("13541c21-8e33-11d0-9ad0-00a0c9a06e35");
pub const GUID_Square = @import("../zig.zig").Guid.initString("13541c22-8e33-11d0-9ad0-00a0c9a06e35");
pub const GUID_Sine = @import("../zig.zig").Guid.initString("13541c23-8e33-11d0-9ad0-00a0c9a06e35");
pub const GUID_Triangle = @import("../zig.zig").Guid.initString("13541c24-8e33-11d0-9ad0-00a0c9a06e35");
pub const GUID_SawtoothUp = @import("../zig.zig").Guid.initString("13541c25-8e33-11d0-9ad0-00a0c9a06e35");
pub const GUID_SawtoothDown = @import("../zig.zig").Guid.initString("13541c26-8e33-11d0-9ad0-00a0c9a06e35");
pub const GUID_Spring = @import("../zig.zig").Guid.initString("13541c27-8e33-11d0-9ad0-00a0c9a06e35");
pub const GUID_Damper = @import("../zig.zig").Guid.initString("13541c28-8e33-11d0-9ad0-00a0c9a06e35");
pub const GUID_Inertia = @import("../zig.zig").Guid.initString("13541c29-8e33-11d0-9ad0-00a0c9a06e35");
pub const GUID_Friction = @import("../zig.zig").Guid.initString("13541c2a-8e33-11d0-9ad0-00a0c9a06e35");
pub const GUID_CustomForce = @import("../zig.zig").Guid.initString("13541c2b-8e33-11d0-9ad0-00a0c9a06e35");
pub const DIEFT_ALL : u32 = 0;
pub const DIEFT_CONSTANTFORCE : u32 = 1;
pub const DIEFT_RAMPFORCE : u32 = 2;
pub const DIEFT_PERIODIC : u32 = 3;
pub const DIEFT_CONDITION : u32 = 4;
pub const DIEFT_CUSTOMFORCE : u32 = 5;
pub const DIEFT_HARDWARE : u32 = 255;
pub const DIEFT_FFATTACK : u32 = 512;
pub const DIEFT_FFFADE : u32 = 1024;
pub const DIEFT_SATURATION : u32 = 2048;
pub const DIEFT_POSNEGCOEFFICIENTS : u32 = 4096;
pub const DIEFT_POSNEGSATURATION : u32 = 8192;
pub const DIEFT_DEADBAND : u32 = 16384;
pub const DIEFT_STARTDELAY : u32 = 32768;
pub const DI_DEGREES : u32 = 100;
pub const DI_FFNOMINALMAX : u32 = 10000;
pub const DI_SECONDS : u32 = 1000000;
pub const DIEFF_OBJECTIDS : u32 = 1;
pub const DIEFF_OBJECTOFFSETS : u32 = 2;
pub const DIEFF_CARTESIAN : u32 = 16;
pub const DIEFF_POLAR : u32 = 32;
pub const DIEFF_SPHERICAL : u32 = 64;
pub const DIEP_DURATION : u32 = 1;
pub const DIEP_SAMPLEPERIOD : u32 = 2;
pub const DIEP_GAIN : u32 = 4;
pub const DIEP_TRIGGERBUTTON : u32 = 8;
pub const DIEP_TRIGGERREPEATINTERVAL : u32 = 16;
pub const DIEP_AXES : u32 = 32;
pub const DIEP_DIRECTION : u32 = 64;
pub const DIEP_ENVELOPE : u32 = 128;
pub const DIEP_TYPESPECIFICPARAMS : u32 = 256;
pub const DIEP_STARTDELAY : u32 = 512;
pub const DIEP_ALLPARAMS_DX5 : u32 = 511;
pub const DIEP_ALLPARAMS : u32 = 1023;
pub const DIEP_START : u32 = 536870912;
pub const DIEP_NORESTART : u32 = 1073741824;
pub const DIEP_NODOWNLOAD : u32 = 2147483648;
pub const DIEB_NOTRIGGER : u32 = 4294967295;
pub const DIES_SOLO : u32 = 1;
pub const DIES_NODOWNLOAD : u32 = 2147483648;
pub const DIEGES_PLAYING : u32 = 1;
pub const DIEGES_EMULATED : u32 = 2;
pub const DIDEVTYPE_DEVICE : u32 = 1;
pub const DIDEVTYPE_MOUSE : u32 = 2;
pub const DIDEVTYPE_KEYBOARD : u32 = 3;
pub const DIDEVTYPE_JOYSTICK : u32 = 4;
pub const DI8DEVCLASS_ALL : u32 = 0;
pub const DI8DEVCLASS_DEVICE : u32 = 1;
pub const DI8DEVCLASS_POINTER : u32 = 2;
pub const DI8DEVCLASS_KEYBOARD : u32 = 3;
pub const DI8DEVCLASS_GAMECTRL : u32 = 4;
pub const DI8DEVTYPE_DEVICE : u32 = 17;
pub const DI8DEVTYPE_MOUSE : u32 = 18;
pub const DI8DEVTYPE_KEYBOARD : u32 = 19;
pub const DI8DEVTYPE_JOYSTICK : u32 = 20;
pub const DI8DEVTYPE_GAMEPAD : u32 = 21;
pub const DI8DEVTYPE_DRIVING : u32 = 22;
pub const DI8DEVTYPE_FLIGHT : u32 = 23;
pub const DI8DEVTYPE_1STPERSON : u32 = 24;
pub const DI8DEVTYPE_DEVICECTRL : u32 = 25;
pub const DI8DEVTYPE_SCREENPOINTER : u32 = 26;
pub const DI8DEVTYPE_REMOTE : u32 = 27;
pub const DI8DEVTYPE_SUPPLEMENTAL : u32 = 28;
pub const DIDEVTYPE_HID : u32 = 65536;
pub const DIDEVTYPEMOUSE_UNKNOWN : u32 = 1;
pub const DIDEVTYPEMOUSE_TRADITIONAL : u32 = 2;
pub const DIDEVTYPEMOUSE_FINGERSTICK : u32 = 3;
pub const DIDEVTYPEMOUSE_TOUCHPAD : u32 = 4;
pub const DIDEVTYPEMOUSE_TRACKBALL : u32 = 5;
pub const DIDEVTYPEKEYBOARD_UNKNOWN : u32 = 0;
pub const DIDEVTYPEKEYBOARD_PCXT : u32 = 1;
pub const DIDEVTYPEKEYBOARD_OLIVETTI : u32 = 2;
pub const DIDEVTYPEKEYBOARD_PCAT : u32 = 3;
pub const DIDEVTYPEKEYBOARD_PCENH : u32 = 4;
pub const DIDEVTYPEKEYBOARD_NOKIA1050 : u32 = 5;
pub const DIDEVTYPEKEYBOARD_NOKIA9140 : u32 = 6;
pub const DIDEVTYPEKEYBOARD_NEC98 : u32 = 7;
pub const DIDEVTYPEKEYBOARD_NEC98LAPTOP : u32 = 8;
pub const DIDEVTYPEKEYBOARD_NEC98106 : u32 = 9;
pub const DIDEVTYPEKEYBOARD_JAPAN106 : u32 = 10;
pub const DIDEVTYPEKEYBOARD_JAPANAX : u32 = 11;
pub const DIDEVTYPEKEYBOARD_J3100 : u32 = 12;
pub const DIDEVTYPEJOYSTICK_UNKNOWN : u32 = 1;
pub const DIDEVTYPEJOYSTICK_TRADITIONAL : u32 = 2;
pub const DIDEVTYPEJOYSTICK_FLIGHTSTICK : u32 = 3;
pub const DIDEVTYPEJOYSTICK_GAMEPAD : u32 = 4;
pub const DIDEVTYPEJOYSTICK_RUDDER : u32 = 5;
pub const DIDEVTYPEJOYSTICK_WHEEL : u32 = 6;
pub const DIDEVTYPEJOYSTICK_HEADTRACKER : u32 = 7;
pub const DI8DEVTYPEMOUSE_UNKNOWN : u32 = 1;
pub const DI8DEVTYPEMOUSE_TRADITIONAL : u32 = 2;
pub const DI8DEVTYPEMOUSE_FINGERSTICK : u32 = 3;
pub const DI8DEVTYPEMOUSE_TOUCHPAD : u32 = 4;
pub const DI8DEVTYPEMOUSE_TRACKBALL : u32 = 5;
pub const DI8DEVTYPEMOUSE_ABSOLUTE : u32 = 6;
pub const DI8DEVTYPEKEYBOARD_UNKNOWN : u32 = 0;
pub const DI8DEVTYPEKEYBOARD_PCXT : u32 = 1;
pub const DI8DEVTYPEKEYBOARD_OLIVETTI : u32 = 2;
pub const DI8DEVTYPEKEYBOARD_PCAT : u32 = 3;
pub const DI8DEVTYPEKEYBOARD_PCENH : u32 = 4;
pub const DI8DEVTYPEKEYBOARD_NOKIA1050 : u32 = 5;
pub const DI8DEVTYPEKEYBOARD_NOKIA9140 : u32 = 6;
pub const DI8DEVTYPEKEYBOARD_NEC98 : u32 = 7;
pub const DI8DEVTYPEKEYBOARD_NEC98LAPTOP : u32 = 8;
pub const DI8DEVTYPEKEYBOARD_NEC98106 : u32 = 9;
pub const DI8DEVTYPEKEYBOARD_JAPAN106 : u32 = 10;
pub const DI8DEVTYPEKEYBOARD_JAPANAX : u32 = 11;
pub const DI8DEVTYPEKEYBOARD_J3100 : u32 = 12;
pub const DI8DEVTYPE_LIMITEDGAMESUBTYPE : u32 = 1;
pub const DI8DEVTYPEJOYSTICK_STANDARD : u32 = 2;
pub const DI8DEVTYPEGAMEPAD_STANDARD : u32 = 2;
pub const DI8DEVTYPEGAMEPAD_TILT : u32 = 3;
pub const DI8DEVTYPEDRIVING_COMBINEDPEDALS : u32 = 2;
pub const DI8DEVTYPEDRIVING_DUALPEDALS : u32 = 3;
pub const DI8DEVTYPEDRIVING_THREEPEDALS : u32 = 4;
pub const DI8DEVTYPEDRIVING_HANDHELD : u32 = 5;
pub const DI8DEVTYPEFLIGHT_STICK : u32 = 2;
pub const DI8DEVTYPEFLIGHT_YOKE : u32 = 3;
pub const DI8DEVTYPEFLIGHT_RC : u32 = 4;
pub const DI8DEVTYPE1STPERSON_UNKNOWN : u32 = 2;
pub const DI8DEVTYPE1STPERSON_SIXDOF : u32 = 3;
pub const DI8DEVTYPE1STPERSON_SHOOTER : u32 = 4;
pub const DI8DEVTYPESCREENPTR_UNKNOWN : u32 = 2;
pub const DI8DEVTYPESCREENPTR_LIGHTGUN : u32 = 3;
pub const DI8DEVTYPESCREENPTR_LIGHTPEN : u32 = 4;
pub const DI8DEVTYPESCREENPTR_TOUCH : u32 = 5;
pub const DI8DEVTYPEREMOTE_UNKNOWN : u32 = 2;
pub const DI8DEVTYPEDEVICECTRL_UNKNOWN : u32 = 2;
pub const DI8DEVTYPEDEVICECTRL_COMMSSELECTION : u32 = 3;
pub const DI8DEVTYPEDEVICECTRL_COMMSSELECTION_HARDWIRED : u32 = 4;
pub const DI8DEVTYPESUPPLEMENTAL_UNKNOWN : u32 = 2;
pub const DI8DEVTYPESUPPLEMENTAL_2NDHANDCONTROLLER : u32 = 3;
pub const DI8DEVTYPESUPPLEMENTAL_HEADTRACKER : u32 = 4;
pub const DI8DEVTYPESUPPLEMENTAL_HANDTRACKER : u32 = 5;
pub const DI8DEVTYPESUPPLEMENTAL_SHIFTSTICKGATE : u32 = 6;
pub const DI8DEVTYPESUPPLEMENTAL_SHIFTER : u32 = 7;
pub const DI8DEVTYPESUPPLEMENTAL_THROTTLE : u32 = 8;
pub const DI8DEVTYPESUPPLEMENTAL_SPLITTHROTTLE : u32 = 9;
pub const DI8DEVTYPESUPPLEMENTAL_COMBINEDPEDALS : u32 = 10;
pub const DI8DEVTYPESUPPLEMENTAL_DUALPEDALS : u32 = 11;
pub const DI8DEVTYPESUPPLEMENTAL_THREEPEDALS : u32 = 12;
pub const DI8DEVTYPESUPPLEMENTAL_RUDDERPEDALS : u32 = 13;
pub const DIDC_ATTACHED : u32 = 1;
pub const DIDC_POLLEDDEVICE : u32 = 2;
pub const DIDC_EMULATED : u32 = 4;
pub const DIDC_POLLEDDATAFORMAT : u32 = 8;
pub const DIDC_FORCEFEEDBACK : u32 = 256;
pub const DIDC_FFATTACK : u32 = 512;
pub const DIDC_FFFADE : u32 = 1024;
pub const DIDC_SATURATION : u32 = 2048;
pub const DIDC_POSNEGCOEFFICIENTS : u32 = 4096;
pub const DIDC_POSNEGSATURATION : u32 = 8192;
pub const DIDC_DEADBAND : u32 = 16384;
pub const DIDC_STARTDELAY : u32 = 32768;
pub const DIDC_ALIAS : u32 = 65536;
pub const DIDC_PHANTOM : u32 = 131072;
pub const DIDC_HIDDEN : u32 = 262144;
pub const DIDFT_ALL : u32 = 0;
pub const DIDFT_RELAXIS : u32 = 1;
pub const DIDFT_ABSAXIS : u32 = 2;
pub const DIDFT_AXIS : u32 = 3;
pub const DIDFT_PSHBUTTON : u32 = 4;
pub const DIDFT_TGLBUTTON : u32 = 8;
pub const DIDFT_BUTTON : u32 = 12;
pub const DIDFT_POV : u32 = 16;
pub const DIDFT_COLLECTION : u32 = 64;
pub const DIDFT_NODATA : u32 = 128;
pub const DIDFT_ANYINSTANCE : u32 = 16776960;
pub const DIDFT_FFACTUATOR : u32 = 16777216;
pub const DIDFT_FFEFFECTTRIGGER : u32 = 33554432;
pub const DIDFT_OUTPUT : u32 = 268435456;
pub const DIDFT_VENDORDEFINED : u32 = 67108864;
pub const DIDFT_ALIAS : u32 = 134217728;
pub const DIDFT_NOCOLLECTION : u32 = 16776960;
pub const DIDF_ABSAXIS : u32 = 1;
pub const DIDF_RELAXIS : u32 = 2;
pub const DIA_FORCEFEEDBACK : u32 = 1;
pub const DIA_APPMAPPED : u32 = 2;
pub const DIA_APPNOMAP : u32 = 4;
pub const DIA_NORANGE : u32 = 8;
pub const DIA_APPFIXED : u32 = 16;
pub const DIAH_UNMAPPED : u32 = 0;
pub const DIAH_USERCONFIG : u32 = 1;
pub const DIAH_APPREQUESTED : u32 = 2;
pub const DIAH_HWAPP : u32 = 4;
pub const DIAH_HWDEFAULT : u32 = 8;
pub const DIAH_DEFAULT : u32 = 32;
pub const DIAH_ERROR : u32 = 2147483648;
pub const DIAFTS_NEWDEVICELOW : u32 = 4294967295;
pub const DIAFTS_NEWDEVICEHIGH : u32 = 4294967295;
pub const DIAFTS_UNUSEDDEVICELOW : u32 = 0;
pub const DIAFTS_UNUSEDDEVICEHIGH : u32 = 0;
pub const DIDBAM_DEFAULT : u32 = 0;
pub const DIDBAM_PRESERVE : u32 = 1;
pub const DIDBAM_INITIALIZE : u32 = 2;
pub const DIDBAM_HWDEFAULTS : u32 = 4;
pub const DIDSAM_DEFAULT : u32 = 0;
pub const DIDSAM_NOUSER : u32 = 1;
pub const DIDSAM_FORCESAVE : u32 = 2;
pub const DICD_DEFAULT : u32 = 0;
pub const DICD_EDIT : u32 = 1;
pub const DIDIFT_CONFIGURATION : u32 = 1;
pub const DIDIFT_OVERLAY : u32 = 2;
pub const DIDAL_CENTERED : u32 = 0;
pub const DIDAL_LEFTALIGNED : u32 = 1;
pub const DIDAL_RIGHTALIGNED : u32 = 2;
pub const DIDAL_MIDDLE : u32 = 0;
pub const DIDAL_TOPALIGNED : u32 = 4;
pub const DIDAL_BOTTOMALIGNED : u32 = 8;
pub const DIDOI_FFACTUATOR : u32 = 1;
pub const DIDOI_FFEFFECTTRIGGER : u32 = 2;
pub const DIDOI_POLLED : u32 = 32768;
pub const DIDOI_ASPECTPOSITION : u32 = 256;
pub const DIDOI_ASPECTVELOCITY : u32 = 512;
pub const DIDOI_ASPECTACCEL : u32 = 768;
pub const DIDOI_ASPECTFORCE : u32 = 1024;
pub const DIDOI_ASPECTMASK : u32 = 3840;
pub const DIDOI_GUIDISUSAGE : u32 = 65536;
pub const DIPH_DEVICE : u32 = 0;
pub const DIPH_BYOFFSET : u32 = 1;
pub const DIPH_BYID : u32 = 2;
pub const DIPH_BYUSAGE : u32 = 3;
pub const MAXCPOINTSNUM : u32 = 8;
pub const DIPROPAXISMODE_ABS : u32 = 0;
pub const DIPROPAXISMODE_REL : u32 = 1;
pub const DIPROPAUTOCENTER_OFF : u32 = 0;
pub const DIPROPAUTOCENTER_ON : u32 = 1;
pub const DIPROPCALIBRATIONMODE_COOKED : u32 = 0;
pub const DIPROPCALIBRATIONMODE_RAW : u32 = 1;
pub const DIGDD_PEEK : u32 = 1;
pub const DISCL_EXCLUSIVE : u32 = 1;
pub const DISCL_NONEXCLUSIVE : u32 = 2;
pub const DISCL_FOREGROUND : u32 = 4;
pub const DISCL_BACKGROUND : u32 = 8;
pub const DISCL_NOWINKEY : u32 = 16;
pub const DISFFC_RESET : u32 = 1;
pub const DISFFC_STOPALL : u32 = 2;
pub const DISFFC_PAUSE : u32 = 4;
pub const DISFFC_CONTINUE : u32 = 8;
pub const DISFFC_SETACTUATORSON : u32 = 16;
pub const DISFFC_SETACTUATORSOFF : u32 = 32;
pub const DIGFFS_EMPTY : u32 = 1;
pub const DIGFFS_STOPPED : u32 = 2;
pub const DIGFFS_PAUSED : u32 = 4;
pub const DIGFFS_ACTUATORSON : u32 = 16;
pub const DIGFFS_ACTUATORSOFF : u32 = 32;
pub const DIGFFS_POWERON : u32 = 64;
pub const DIGFFS_POWEROFF : u32 = 128;
pub const DIGFFS_SAFETYSWITCHON : u32 = 256;
pub const DIGFFS_SAFETYSWITCHOFF : u32 = 512;
pub const DIGFFS_USERFFSWITCHON : u32 = 1024;
pub const DIGFFS_USERFFSWITCHOFF : u32 = 2048;
pub const DIGFFS_DEVICELOST : u32 = 2147483648;
pub const DISDD_CONTINUE : u32 = 1;
pub const DIFEF_DEFAULT : u32 = 0;
pub const DIFEF_INCLUDENONSTANDARD : u32 = 1;
pub const DIFEF_MODIFYIFNEEDED : u32 = 16;
pub const DIK_ESCAPE : u32 = 1;
pub const DIK_1 : u32 = 2;
pub const DIK_2 : u32 = 3;
pub const DIK_3 : u32 = 4;
pub const DIK_4 : u32 = 5;
pub const DIK_5 : u32 = 6;
pub const DIK_6 : u32 = 7;
pub const DIK_7 : u32 = 8;
pub const DIK_8 : u32 = 9;
pub const DIK_9 : u32 = 10;
pub const DIK_0 : u32 = 11;
pub const DIK_MINUS : u32 = 12;
pub const DIK_EQUALS : u32 = 13;
pub const DIK_BACK : u32 = 14;
pub const DIK_TAB : u32 = 15;
pub const DIK_Q : u32 = 16;
pub const DIK_W : u32 = 17;
pub const DIK_E : u32 = 18;
pub const DIK_R : u32 = 19;
pub const DIK_T : u32 = 20;
pub const DIK_Y : u32 = 21;
pub const DIK_U : u32 = 22;
pub const DIK_I : u32 = 23;
pub const DIK_O : u32 = 24;
pub const DIK_P : u32 = 25;
pub const DIK_LBRACKET : u32 = 26;
pub const DIK_RBRACKET : u32 = 27;
pub const DIK_RETURN : u32 = 28;
pub const DIK_LCONTROL : u32 = 29;
pub const DIK_A : u32 = 30;
pub const DIK_S : u32 = 31;
pub const DIK_D : u32 = 32;
pub const DIK_F : u32 = 33;
pub const DIK_G : u32 = 34;
pub const DIK_H : u32 = 35;
pub const DIK_J : u32 = 36;
pub const DIK_K : u32 = 37;
pub const DIK_L : u32 = 38;
pub const DIK_SEMICOLON : u32 = 39;
pub const DIK_APOSTROPHE : u32 = 40;
pub const DIK_GRAVE : u32 = 41;
pub const DIK_LSHIFT : u32 = 42;
pub const DIK_BACKSLASH : u32 = 43;
pub const DIK_Z : u32 = 44;
pub const DIK_X : u32 = 45;
pub const DIK_C : u32 = 46;
pub const DIK_V : u32 = 47;
pub const DIK_B : u32 = 48;
pub const DIK_N : u32 = 49;
pub const DIK_M : u32 = 50;
pub const DIK_COMMA : u32 = 51;
pub const DIK_PERIOD : u32 = 52;
pub const DIK_SLASH : u32 = 53;
pub const DIK_RSHIFT : u32 = 54;
pub const DIK_MULTIPLY : u32 = 55;
pub const DIK_LMENU : u32 = 56;
pub const DIK_SPACE : u32 = 57;
pub const DIK_CAPITAL : u32 = 58;
pub const DIK_F1 : u32 = 59;
pub const DIK_F2 : u32 = 60;
pub const DIK_F3 : u32 = 61;
pub const DIK_F4 : u32 = 62;
pub const DIK_F5 : u32 = 63;
pub const DIK_F6 : u32 = 64;
pub const DIK_F7 : u32 = 65;
pub const DIK_F8 : u32 = 66;
pub const DIK_F9 : u32 = 67;
pub const DIK_F10 : u32 = 68;
pub const DIK_NUMLOCK : u32 = 69;
pub const DIK_SCROLL : u32 = 70;
pub const DIK_NUMPAD7 : u32 = 71;
pub const DIK_NUMPAD8 : u32 = 72;
pub const DIK_NUMPAD9 : u32 = 73;
pub const DIK_SUBTRACT : u32 = 74;
pub const DIK_NUMPAD4 : u32 = 75;
pub const DIK_NUMPAD5 : u32 = 76;
pub const DIK_NUMPAD6 : u32 = 77;
pub const DIK_ADD : u32 = 78;
pub const DIK_NUMPAD1 : u32 = 79;
pub const DIK_NUMPAD2 : u32 = 80;
pub const DIK_NUMPAD3 : u32 = 81;
pub const DIK_NUMPAD0 : u32 = 82;
pub const DIK_DECIMAL : u32 = 83;
pub const DIK_OEM_102 : u32 = 86;
pub const DIK_F11 : u32 = 87;
pub const DIK_F12 : u32 = 88;
pub const DIK_F13 : u32 = 100;
pub const DIK_F14 : u32 = 101;
pub const DIK_F15 : u32 = 102;
pub const DIK_KANA : u32 = 112;
pub const DIK_ABNT_C1 : u32 = 115;
pub const DIK_CONVERT : u32 = 121;
pub const DIK_NOCONVERT : u32 = 123;
pub const DIK_YEN : u32 = 125;
pub const DIK_ABNT_C2 : u32 = 126;
pub const DIK_NUMPADEQUALS : u32 = 141;
pub const DIK_PREVTRACK : u32 = 144;
pub const DIK_AT : u32 = 145;
pub const DIK_COLON : u32 = 146;
pub const DIK_UNDERLINE : u32 = 147;
pub const DIK_KANJI : u32 = 148;
pub const DIK_STOP : u32 = 149;
pub const DIK_AX : u32 = 150;
pub const DIK_UNLABELED : u32 = 151;
pub const DIK_NEXTTRACK : u32 = 153;
pub const DIK_NUMPADENTER : u32 = 156;
pub const DIK_RCONTROL : u32 = 157;
pub const DIK_MUTE : u32 = 160;
pub const DIK_CALCULATOR : u32 = 161;
pub const DIK_PLAYPAUSE : u32 = 162;
pub const DIK_MEDIASTOP : u32 = 164;
pub const DIK_VOLUMEDOWN : u32 = 174;
pub const DIK_VOLUMEUP : u32 = 176;
pub const DIK_WEBHOME : u32 = 178;
pub const DIK_NUMPADCOMMA : u32 = 179;
pub const DIK_DIVIDE : u32 = 181;
pub const DIK_SYSRQ : u32 = 183;
pub const DIK_RMENU : u32 = 184;
pub const DIK_PAUSE : u32 = 197;
pub const DIK_HOME : u32 = 199;
pub const DIK_UP : u32 = 200;
pub const DIK_PRIOR : u32 = 201;
pub const DIK_LEFT : u32 = 203;
pub const DIK_RIGHT : u32 = 205;
pub const DIK_END : u32 = 207;
pub const DIK_DOWN : u32 = 208;
pub const DIK_NEXT : u32 = 209;
pub const DIK_INSERT : u32 = 210;
pub const DIK_DELETE : u32 = 211;
pub const DIK_LWIN : u32 = 219;
pub const DIK_RWIN : u32 = 220;
pub const DIK_APPS : u32 = 221;
pub const DIK_POWER : u32 = 222;
pub const DIK_SLEEP : u32 = 223;
pub const DIK_WAKE : u32 = 227;
pub const DIK_WEBSEARCH : u32 = 229;
pub const DIK_WEBFAVORITES : u32 = 230;
pub const DIK_WEBREFRESH : u32 = 231;
pub const DIK_WEBSTOP : u32 = 232;
pub const DIK_WEBFORWARD : u32 = 233;
pub const DIK_WEBBACK : u32 = 234;
pub const DIK_MYCOMPUTER : u32 = 235;
pub const DIK_MAIL : u32 = 236;
pub const DIK_MEDIASELECT : u32 = 237;
pub const DIENUM_STOP : u32 = 0;
pub const DIENUM_CONTINUE : u32 = 1;
pub const DIEDFL_ALLDEVICES : u32 = 0;
pub const DIEDFL_ATTACHEDONLY : u32 = 1;
pub const DIEDFL_FORCEFEEDBACK : u32 = 256;
pub const DIEDFL_INCLUDEALIASES : u32 = 65536;
pub const DIEDFL_INCLUDEPHANTOMS : u32 = 131072;
pub const DIEDFL_INCLUDEHIDDEN : u32 = 262144;
pub const DIEDBS_MAPPEDPRI1 : u32 = 1;
pub const DIEDBS_MAPPEDPRI2 : u32 = 2;
pub const DIEDBS_RECENTDEVICE : u32 = 16;
pub const DIEDBS_NEWDEVICE : u32 = 32;
pub const DIEDBSFL_ATTACHEDONLY : u32 = 0;
pub const DIEDBSFL_THISUSER : u32 = 16;
pub const DIEDBSFL_AVAILABLEDEVICES : u32 = 4096;
pub const DIEDBSFL_MULTIMICEKEYBOARDS : u32 = 8192;
pub const DIEDBSFL_NONGAMINGDEVICES : u32 = 16384;
pub const DIEDBSFL_VALID : u32 = 28944;
pub const DI_POLLEDDEVICE : i32 = 2;
pub const DI_DOWNLOADSKIPPED : i32 = 3;
pub const DI_EFFECTRESTARTED : i32 = 4;
pub const DI_TRUNCATED : i32 = 8;
pub const DI_SETTINGSNOTSAVED : i32 = 11;
pub const DI_TRUNCATEDANDRESTARTED : i32 = 12;
pub const DI_WRITEPROTECT : i32 = 19;
pub const DIERR_INSUFFICIENTPRIVS : i32 = -2147220992;
pub const DIERR_DEVICEFULL : i32 = -2147220991;
pub const DIERR_MOREDATA : i32 = -2147220990;
pub const DIERR_NOTDOWNLOADED : i32 = -2147220989;
pub const DIERR_HASEFFECTS : i32 = -2147220988;
pub const DIERR_NOTEXCLUSIVEACQUIRED : i32 = -2147220987;
pub const DIERR_INCOMPLETEEFFECT : i32 = -2147220986;
pub const DIERR_NOTBUFFERED : i32 = -2147220985;
pub const DIERR_EFFECTPLAYING : i32 = -2147220984;
pub const DIERR_UNPLUGGED : i32 = -2147220983;
pub const DIERR_REPORTFULL : i32 = -2147220982;
pub const DIERR_MAPFILEFAIL : i32 = -2147220981;
pub const DIKEYBOARD_ESCAPE : u32 = 2164261889;
pub const DIKEYBOARD_1 : u32 = 2164261890;
pub const DIKEYBOARD_2 : u32 = 2164261891;
pub const DIKEYBOARD_3 : u32 = 2164261892;
pub const DIKEYBOARD_4 : u32 = 2164261893;
pub const DIKEYBOARD_5 : u32 = 2164261894;
pub const DIKEYBOARD_6 : u32 = 2164261895;
pub const DIKEYBOARD_7 : u32 = 2164261896;
pub const DIKEYBOARD_8 : u32 = 2164261897;
pub const DIKEYBOARD_9 : u32 = 2164261898;
pub const DIKEYBOARD_0 : u32 = 2164261899;
pub const DIKEYBOARD_MINUS : u32 = 2164261900;
pub const DIKEYBOARD_EQUALS : u32 = 2164261901;
pub const DIKEYBOARD_BACK : u32 = 2164261902;
pub const DIKEYBOARD_TAB : u32 = 2164261903;
pub const DIKEYBOARD_Q : u32 = 2164261904;
pub const DIKEYBOARD_W : u32 = 2164261905;
pub const DIKEYBOARD_E : u32 = 2164261906;
pub const DIKEYBOARD_R : u32 = 2164261907;
pub const DIKEYBOARD_T : u32 = 2164261908;
pub const DIKEYBOARD_Y : u32 = 2164261909;
pub const DIKEYBOARD_U : u32 = 2164261910;
pub const DIKEYBOARD_I : u32 = 2164261911;
pub const DIKEYBOARD_O : u32 = 2164261912;
pub const DIKEYBOARD_P : u32 = 2164261913;
pub const DIKEYBOARD_LBRACKET : u32 = 2164261914;
pub const DIKEYBOARD_RBRACKET : u32 = 2164261915;
pub const DIKEYBOARD_RETURN : u32 = 2164261916;
pub const DIKEYBOARD_LCONTROL : u32 = 2164261917;
pub const DIKEYBOARD_A : u32 = 2164261918;
pub const DIKEYBOARD_S : u32 = 2164261919;
pub const DIKEYBOARD_D : u32 = 2164261920;
pub const DIKEYBOARD_F : u32 = 2164261921;
pub const DIKEYBOARD_G : u32 = 2164261922;
pub const DIKEYBOARD_H : u32 = 2164261923;
pub const DIKEYBOARD_J : u32 = 2164261924;
pub const DIKEYBOARD_K : u32 = 2164261925;
pub const DIKEYBOARD_L : u32 = 2164261926;
pub const DIKEYBOARD_SEMICOLON : u32 = 2164261927;
pub const DIKEYBOARD_APOSTROPHE : u32 = 2164261928;
pub const DIKEYBOARD_GRAVE : u32 = 2164261929;
pub const DIKEYBOARD_LSHIFT : u32 = 2164261930;
pub const DIKEYBOARD_BACKSLASH : u32 = 2164261931;
pub const DIKEYBOARD_Z : u32 = 2164261932;
pub const DIKEYBOARD_X : u32 = 2164261933;
pub const DIKEYBOARD_C : u32 = 2164261934;
pub const DIKEYBOARD_V : u32 = 2164261935;
pub const DIKEYBOARD_B : u32 = 2164261936;
pub const DIKEYBOARD_N : u32 = 2164261937;
pub const DIKEYBOARD_M : u32 = 2164261938;
pub const DIKEYBOARD_COMMA : u32 = 2164261939;
pub const DIKEYBOARD_PERIOD : u32 = 2164261940;
pub const DIKEYBOARD_SLASH : u32 = 2164261941;
pub const DIKEYBOARD_RSHIFT : u32 = 2164261942;
pub const DIKEYBOARD_MULTIPLY : u32 = 2164261943;
pub const DIKEYBOARD_LMENU : u32 = 2164261944;
pub const DIKEYBOARD_SPACE : u32 = 2164261945;
pub const DIKEYBOARD_CAPITAL : u32 = 2164261946;
pub const DIKEYBOARD_F1 : u32 = 2164261947;
pub const DIKEYBOARD_F2 : u32 = 2164261948;
pub const DIKEYBOARD_F3 : u32 = 2164261949;
pub const DIKEYBOARD_F4 : u32 = 2164261950;
pub const DIKEYBOARD_F5 : u32 = 2164261951;
pub const DIKEYBOARD_F6 : u32 = 2164261952;
pub const DIKEYBOARD_F7 : u32 = 2164261953;
pub const DIKEYBOARD_F8 : u32 = 2164261954;
pub const DIKEYBOARD_F9 : u32 = 2164261955;
pub const DIKEYBOARD_F10 : u32 = 2164261956;
pub const DIKEYBOARD_NUMLOCK : u32 = 2164261957;
pub const DIKEYBOARD_SCROLL : u32 = 2164261958;
pub const DIKEYBOARD_NUMPAD7 : u32 = 2164261959;
pub const DIKEYBOARD_NUMPAD8 : u32 = 2164261960;
pub const DIKEYBOARD_NUMPAD9 : u32 = 2164261961;
pub const DIKEYBOARD_SUBTRACT : u32 = 2164261962;
pub const DIKEYBOARD_NUMPAD4 : u32 = 2164261963;
pub const DIKEYBOARD_NUMPAD5 : u32 = 2164261964;
pub const DIKEYBOARD_NUMPAD6 : u32 = 2164261965;
pub const DIKEYBOARD_ADD : u32 = 2164261966;
pub const DIKEYBOARD_NUMPAD1 : u32 = 2164261967;
pub const DIKEYBOARD_NUMPAD2 : u32 = 2164261968;
pub const DIKEYBOARD_NUMPAD3 : u32 = 2164261969;
pub const DIKEYBOARD_NUMPAD0 : u32 = 2164261970;
pub const DIKEYBOARD_DECIMAL : u32 = 2164261971;
pub const DIKEYBOARD_OEM_102 : u32 = 2164261974;
pub const DIKEYBOARD_F11 : u32 = 2164261975;
pub const DIKEYBOARD_F12 : u32 = 2164261976;
pub const DIKEYBOARD_F13 : u32 = 2164261988;
pub const DIKEYBOARD_F14 : u32 = 2164261989;
pub const DIKEYBOARD_F15 : u32 = 2164261990;
pub const DIKEYBOARD_KANA : u32 = 2164262000;
pub const DIKEYBOARD_ABNT_C1 : u32 = 2164262003;
pub const DIKEYBOARD_CONVERT : u32 = 2164262009;
pub const DIKEYBOARD_NOCONVERT : u32 = 2164262011;
pub const DIKEYBOARD_YEN : u32 = 2164262013;
pub const DIKEYBOARD_ABNT_C2 : u32 = 2164262014;
pub const DIKEYBOARD_NUMPADEQUALS : u32 = 2164262029;
pub const DIKEYBOARD_PREVTRACK : u32 = 2164262032;
pub const DIKEYBOARD_AT : u32 = 2164262033;
pub const DIKEYBOARD_COLON : u32 = 2164262034;
pub const DIKEYBOARD_UNDERLINE : u32 = 2164262035;
pub const DIKEYBOARD_KANJI : u32 = 2164262036;
pub const DIKEYBOARD_STOP : u32 = 2164262037;
pub const DIKEYBOARD_AX : u32 = 2164262038;
pub const DIKEYBOARD_UNLABELED : u32 = 2164262039;
pub const DIKEYBOARD_NEXTTRACK : u32 = 2164262041;
pub const DIKEYBOARD_NUMPADENTER : u32 = 2164262044;
pub const DIKEYBOARD_RCONTROL : u32 = 2164262045;
pub const DIKEYBOARD_MUTE : u32 = 2164262048;
pub const DIKEYBOARD_CALCULATOR : u32 = 2164262049;
pub const DIKEYBOARD_PLAYPAUSE : u32 = 2164262050;
pub const DIKEYBOARD_MEDIASTOP : u32 = 2164262052;
pub const DIKEYBOARD_VOLUMEDOWN : u32 = 2164262062;
pub const DIKEYBOARD_VOLUMEUP : u32 = 2164262064;
pub const DIKEYBOARD_WEBHOME : u32 = 2164262066;
pub const DIKEYBOARD_NUMPADCOMMA : u32 = 2164262067;
pub const DIKEYBOARD_DIVIDE : u32 = 2164262069;
pub const DIKEYBOARD_SYSRQ : u32 = 2164262071;
pub const DIKEYBOARD_RMENU : u32 = 2164262072;
pub const DIKEYBOARD_PAUSE : u32 = 2164262085;
pub const DIKEYBOARD_HOME : u32 = 2164262087;
pub const DIKEYBOARD_UP : u32 = 2164262088;
pub const DIKEYBOARD_PRIOR : u32 = 2164262089;
pub const DIKEYBOARD_LEFT : u32 = 2164262091;
pub const DIKEYBOARD_RIGHT : u32 = 2164262093;
pub const DIKEYBOARD_END : u32 = 2164262095;
pub const DIKEYBOARD_DOWN : u32 = 2164262096;
pub const DIKEYBOARD_NEXT : u32 = 2164262097;
pub const DIKEYBOARD_INSERT : u32 = 2164262098;
pub const DIKEYBOARD_DELETE : u32 = 2164262099;
pub const DIKEYBOARD_LWIN : u32 = 2164262107;
pub const DIKEYBOARD_RWIN : u32 = 2164262108;
pub const DIKEYBOARD_APPS : u32 = 2164262109;
pub const DIKEYBOARD_POWER : u32 = 2164262110;
pub const DIKEYBOARD_SLEEP : u32 = 2164262111;
pub const DIKEYBOARD_WAKE : u32 = 2164262115;
pub const DIKEYBOARD_WEBSEARCH : u32 = 2164262117;
pub const DIKEYBOARD_WEBFAVORITES : u32 = 2164262118;
pub const DIKEYBOARD_WEBREFRESH : u32 = 2164262119;
pub const DIKEYBOARD_WEBSTOP : u32 = 2164262120;
pub const DIKEYBOARD_WEBFORWARD : u32 = 2164262121;
pub const DIKEYBOARD_WEBBACK : u32 = 2164262122;
pub const DIKEYBOARD_MYCOMPUTER : u32 = 2164262123;
pub const DIKEYBOARD_MAIL : u32 = 2164262124;
pub const DIKEYBOARD_MEDIASELECT : u32 = 2164262125;
pub const DIVOICE_CHANNEL1 : u32 = 2197816321;
pub const DIVOICE_CHANNEL2 : u32 = 2197816322;
pub const DIVOICE_CHANNEL3 : u32 = 2197816323;
pub const DIVOICE_CHANNEL4 : u32 = 2197816324;
pub const DIVOICE_CHANNEL5 : u32 = 2197816325;
pub const DIVOICE_CHANNEL6 : u32 = 2197816326;
pub const DIVOICE_CHANNEL7 : u32 = 2197816327;
pub const DIVOICE_CHANNEL8 : u32 = 2197816328;
pub const DIVOICE_TEAM : u32 = 2197816329;
pub const DIVOICE_ALL : u32 = 2197816330;
pub const DIVOICE_RECORDMUTE : u32 = 2197816331;
pub const DIVOICE_PLAYBACKMUTE : u32 = 2197816332;
pub const DIVOICE_TRANSMIT : u32 = 2197816333;
pub const DIVOICE_VOICECOMMAND : u32 = 2197816336;
pub const DIVIRTUAL_DRIVING_RACE : u32 = 16777216;
pub const DIAXIS_DRIVINGR_STEER : u32 = 16812545;
pub const DIAXIS_DRIVINGR_ACCELERATE : u32 = 17011202;
pub const DIAXIS_DRIVINGR_BRAKE : u32 = 17043971;
pub const DIBUTTON_DRIVINGR_SHIFTUP : u32 = 16780289;
pub const DIBUTTON_DRIVINGR_SHIFTDOWN : u32 = 16780290;
pub const DIBUTTON_DRIVINGR_VIEW : u32 = 16784387;
pub const DIBUTTON_DRIVINGR_MENU : u32 = 16778493;
pub const DIAXIS_DRIVINGR_ACCEL_AND_BRAKE : u32 = 16861700;
pub const DIHATSWITCH_DRIVINGR_GLANCE : u32 = 16795137;
pub const DIBUTTON_DRIVINGR_BRAKE : u32 = 16796676;
pub const DIBUTTON_DRIVINGR_DASHBOARD : u32 = 16794629;
pub const DIBUTTON_DRIVINGR_AIDS : u32 = 16794630;
pub const DIBUTTON_DRIVINGR_MAP : u32 = 16794631;
pub const DIBUTTON_DRIVINGR_BOOST : u32 = 16794632;
pub const DIBUTTON_DRIVINGR_PIT : u32 = 16794633;
pub const DIBUTTON_DRIVINGR_ACCELERATE_LINK : u32 = 17028320;
pub const DIBUTTON_DRIVINGR_STEER_LEFT_LINK : u32 = 16829668;
pub const DIBUTTON_DRIVINGR_STEER_RIGHT_LINK : u32 = 16829676;
pub const DIBUTTON_DRIVINGR_GLANCE_LEFT_LINK : u32 = 17286372;
pub const DIBUTTON_DRIVINGR_GLANCE_RIGHT_LINK : u32 = 17286380;
pub const DIBUTTON_DRIVINGR_DEVICE : u32 = 16794878;
pub const DIBUTTON_DRIVINGR_PAUSE : u32 = 16794876;
pub const DIVIRTUAL_DRIVING_COMBAT : u32 = 33554432;
pub const DIAXIS_DRIVINGC_STEER : u32 = 33589761;
pub const DIAXIS_DRIVINGC_ACCELERATE : u32 = 33788418;
pub const DIAXIS_DRIVINGC_BRAKE : u32 = 33821187;
pub const DIBUTTON_DRIVINGC_FIRE : u32 = 33557505;
pub const DIBUTTON_DRIVINGC_WEAPONS : u32 = 33557506;
pub const DIBUTTON_DRIVINGC_TARGET : u32 = 33557507;
pub const DIBUTTON_DRIVINGC_MENU : u32 = 33555709;
pub const DIAXIS_DRIVINGC_ACCEL_AND_BRAKE : u32 = 33638916;
pub const DIHATSWITCH_DRIVINGC_GLANCE : u32 = 33572353;
pub const DIBUTTON_DRIVINGC_SHIFTUP : u32 = 33573892;
pub const DIBUTTON_DRIVINGC_SHIFTDOWN : u32 = 33573893;
pub const DIBUTTON_DRIVINGC_DASHBOARD : u32 = 33571846;
pub const DIBUTTON_DRIVINGC_AIDS : u32 = 33571847;
pub const DIBUTTON_DRIVINGC_BRAKE : u32 = 33573896;
pub const DIBUTTON_DRIVINGC_FIRESECONDARY : u32 = 33573897;
pub const DIBUTTON_DRIVINGC_ACCELERATE_LINK : u32 = 33805536;
pub const DIBUTTON_DRIVINGC_STEER_LEFT_LINK : u32 = 33606884;
pub const DIBUTTON_DRIVINGC_STEER_RIGHT_LINK : u32 = 33606892;
pub const DIBUTTON_DRIVINGC_GLANCE_LEFT_LINK : u32 = 34063588;
pub const DIBUTTON_DRIVINGC_GLANCE_RIGHT_LINK : u32 = 34063596;
pub const DIBUTTON_DRIVINGC_DEVICE : u32 = 33572094;
pub const DIBUTTON_DRIVINGC_PAUSE : u32 = 33572092;
pub const DIVIRTUAL_DRIVING_TANK : u32 = 50331648;
pub const DIAXIS_DRIVINGT_STEER : u32 = 50366977;
pub const DIAXIS_DRIVINGT_BARREL : u32 = 50397698;
pub const DIAXIS_DRIVINGT_ACCELERATE : u32 = 50565635;
pub const DIAXIS_DRIVINGT_ROTATE : u32 = 50463236;
pub const DIBUTTON_DRIVINGT_FIRE : u32 = 50334721;
pub const DIBUTTON_DRIVINGT_WEAPONS : u32 = 50334722;
pub const DIBUTTON_DRIVINGT_TARGET : u32 = 50334723;
pub const DIBUTTON_DRIVINGT_MENU : u32 = 50332925;
pub const DIHATSWITCH_DRIVINGT_GLANCE : u32 = 50349569;
pub const DIAXIS_DRIVINGT_BRAKE : u32 = 50614789;
pub const DIAXIS_DRIVINGT_ACCEL_AND_BRAKE : u32 = 50416134;
pub const DIBUTTON_DRIVINGT_VIEW : u32 = 50355204;
pub const DIBUTTON_DRIVINGT_DASHBOARD : u32 = 50355205;
pub const DIBUTTON_DRIVINGT_BRAKE : u32 = 50351110;
pub const DIBUTTON_DRIVINGT_FIRESECONDARY : u32 = 50351111;
pub const DIBUTTON_DRIVINGT_ACCELERATE_LINK : u32 = 50582752;
pub const DIBUTTON_DRIVINGT_STEER_LEFT_LINK : u32 = 50384100;
pub const DIBUTTON_DRIVINGT_STEER_RIGHT_LINK : u32 = 50384108;
pub const DIBUTTON_DRIVINGT_BARREL_UP_LINK : u32 = 50414816;
pub const DIBUTTON_DRIVINGT_BARREL_DOWN_LINK : u32 = 50414824;
pub const DIBUTTON_DRIVINGT_ROTATE_LEFT_LINK : u32 = 50480356;
pub const DIBUTTON_DRIVINGT_ROTATE_RIGHT_LINK : u32 = 50480364;
pub const DIBUTTON_DRIVINGT_GLANCE_LEFT_LINK : u32 = 50840804;
pub const DIBUTTON_DRIVINGT_GLANCE_RIGHT_LINK : u32 = 50840812;
pub const DIBUTTON_DRIVINGT_DEVICE : u32 = 50349310;
pub const DIBUTTON_DRIVINGT_PAUSE : u32 = 50349308;
pub const DIVIRTUAL_FLYING_CIVILIAN : u32 = 67108864;
pub const DIAXIS_FLYINGC_BANK : u32 = 67144193;
pub const DIAXIS_FLYINGC_PITCH : u32 = 67176962;
pub const DIAXIS_FLYINGC_THROTTLE : u32 = 67342851;
pub const DIBUTTON_FLYINGC_VIEW : u32 = 67118081;
pub const DIBUTTON_FLYINGC_DISPLAY : u32 = 67118082;
pub const DIBUTTON_FLYINGC_GEAR : u32 = 67120131;
pub const DIBUTTON_FLYINGC_MENU : u32 = 67110141;
pub const DIHATSWITCH_FLYINGC_GLANCE : u32 = 67126785;
pub const DIAXIS_FLYINGC_BRAKE : u32 = 67398148;
pub const DIAXIS_FLYINGC_RUDDER : u32 = 67260933;
pub const DIAXIS_FLYINGC_FLAPS : u32 = 67459590;
pub const DIBUTTON_FLYINGC_FLAPSUP : u32 = 67134468;
pub const DIBUTTON_FLYINGC_FLAPSDOWN : u32 = 67134469;
pub const DIBUTTON_FLYINGC_BRAKE_LINK : u32 = 67398880;
pub const DIBUTTON_FLYINGC_FASTER_LINK : u32 = 67359968;
pub const DIBUTTON_FLYINGC_SLOWER_LINK : u32 = 67359976;
pub const DIBUTTON_FLYINGC_GLANCE_LEFT_LINK : u32 = 67618020;
pub const DIBUTTON_FLYINGC_GLANCE_RIGHT_LINK : u32 = 67618028;
pub const DIBUTTON_FLYINGC_GLANCE_UP_LINK : u32 = 67618016;
pub const DIBUTTON_FLYINGC_GLANCE_DOWN_LINK : u32 = 67618024;
pub const DIBUTTON_FLYINGC_DEVICE : u32 = 67126526;
pub const DIBUTTON_FLYINGC_PAUSE : u32 = 67126524;
pub const DIVIRTUAL_FLYING_MILITARY : u32 = 83886080;
pub const DIAXIS_FLYINGM_BANK : u32 = 83921409;
pub const DIAXIS_FLYINGM_PITCH : u32 = 83954178;
pub const DIAXIS_FLYINGM_THROTTLE : u32 = 84120067;
pub const DIBUTTON_FLYINGM_FIRE : u32 = 83889153;
pub const DIBUTTON_FLYINGM_WEAPONS : u32 = 83889154;
pub const DIBUTTON_FLYINGM_TARGET : u32 = 83889155;
pub const DIBUTTON_FLYINGM_MENU : u32 = 83887357;
pub const DIHATSWITCH_FLYINGM_GLANCE : u32 = 83904001;
pub const DIBUTTON_FLYINGM_COUNTER : u32 = 83909636;
pub const DIAXIS_FLYINGM_RUDDER : u32 = 84036100;
pub const DIAXIS_FLYINGM_BRAKE : u32 = 84173317;
pub const DIBUTTON_FLYINGM_VIEW : u32 = 83911685;
pub const DIBUTTON_FLYINGM_DISPLAY : u32 = 83911686;
pub const DIAXIS_FLYINGM_FLAPS : u32 = 84234758;
pub const DIBUTTON_FLYINGM_FLAPSUP : u32 = 83907591;
pub const DIBUTTON_FLYINGM_FLAPSDOWN : u32 = 83907592;
pub const DIBUTTON_FLYINGM_FIRESECONDARY : u32 = 83905545;
pub const DIBUTTON_FLYINGM_GEAR : u32 = 83911690;
pub const DIBUTTON_FLYINGM_BRAKE_LINK : u32 = 84174048;
pub const DIBUTTON_FLYINGM_FASTER_LINK : u32 = 84137184;
pub const DIBUTTON_FLYINGM_SLOWER_LINK : u32 = 84137192;
pub const DIBUTTON_FLYINGM_GLANCE_LEFT_LINK : u32 = 84395236;
pub const DIBUTTON_FLYINGM_GLANCE_RIGHT_LINK : u32 = 84395244;
pub const DIBUTTON_FLYINGM_GLANCE_UP_LINK : u32 = 84395232;
pub const DIBUTTON_FLYINGM_GLANCE_DOWN_LINK : u32 = 84395240;
pub const DIBUTTON_FLYINGM_DEVICE : u32 = 83903742;
pub const DIBUTTON_FLYINGM_PAUSE : u32 = 83903740;
pub const DIVIRTUAL_FLYING_HELICOPTER : u32 = 100663296;
pub const DIAXIS_FLYINGH_BANK : u32 = 100698625;
pub const DIAXIS_FLYINGH_PITCH : u32 = 100731394;
pub const DIAXIS_FLYINGH_COLLECTIVE : u32 = 100764163;
pub const DIBUTTON_FLYINGH_FIRE : u32 = 100668417;
pub const DIBUTTON_FLYINGH_WEAPONS : u32 = 100668418;
pub const DIBUTTON_FLYINGH_TARGET : u32 = 100668419;
pub const DIBUTTON_FLYINGH_MENU : u32 = 100664573;
pub const DIHATSWITCH_FLYINGH_GLANCE : u32 = 100681217;
pub const DIAXIS_FLYINGH_TORQUE : u32 = 100817412;
pub const DIAXIS_FLYINGH_THROTTLE : u32 = 100915717;
pub const DIBUTTON_FLYINGH_COUNTER : u32 = 100684804;
pub const DIBUTTON_FLYINGH_VIEW : u32 = 100688901;
pub const DIBUTTON_FLYINGH_GEAR : u32 = 100688902;
pub const DIBUTTON_FLYINGH_FIRESECONDARY : u32 = 100682759;
pub const DIBUTTON_FLYINGH_FASTER_LINK : u32 = 100916448;
pub const DIBUTTON_FLYINGH_SLOWER_LINK : u32 = 100916456;
pub const DIBUTTON_FLYINGH_GLANCE_LEFT_LINK : u32 = 101172452;
pub const DIBUTTON_FLYINGH_GLANCE_RIGHT_LINK : u32 = 101172460;
pub const DIBUTTON_FLYINGH_GLANCE_UP_LINK : u32 = 101172448;
pub const DIBUTTON_FLYINGH_GLANCE_DOWN_LINK : u32 = 101172456;
pub const DIBUTTON_FLYINGH_DEVICE : u32 = 100680958;
pub const DIBUTTON_FLYINGH_PAUSE : u32 = 100680956;
pub const DIVIRTUAL_SPACESIM : u32 = 117440512;
pub const DIAXIS_SPACESIM_LATERAL : u32 = 117473793;
pub const DIAXIS_SPACESIM_MOVE : u32 = 117506562;
pub const DIAXIS_SPACESIM_THROTTLE : u32 = 117670403;
pub const DIBUTTON_SPACESIM_FIRE : u32 = 117441537;
pub const DIBUTTON_SPACESIM_WEAPONS : u32 = 117441538;
pub const DIBUTTON_SPACESIM_TARGET : u32 = 117441539;
pub const DIBUTTON_SPACESIM_MENU : u32 = 117441789;
pub const DIHATSWITCH_SPACESIM_GLANCE : u32 = 117458433;
pub const DIAXIS_SPACESIM_CLIMB : u32 = 117555716;
pub const DIAXIS_SPACESIM_ROTATE : u32 = 117588485;
pub const DIBUTTON_SPACESIM_VIEW : u32 = 117457924;
pub const DIBUTTON_SPACESIM_DISPLAY : u32 = 117457925;
pub const DIBUTTON_SPACESIM_RAISE : u32 = 117457926;
pub const DIBUTTON_SPACESIM_LOWER : u32 = 117457927;
pub const DIBUTTON_SPACESIM_GEAR : u32 = 117457928;
pub const DIBUTTON_SPACESIM_FIRESECONDARY : u32 = 117457929;
pub const DIBUTTON_SPACESIM_LEFT_LINK : u32 = 117490916;
pub const DIBUTTON_SPACESIM_RIGHT_LINK : u32 = 117490924;
pub const DIBUTTON_SPACESIM_FORWARD_LINK : u32 = 117523680;
pub const DIBUTTON_SPACESIM_BACKWARD_LINK : u32 = 117523688;
pub const DIBUTTON_SPACESIM_FASTER_LINK : u32 = 117687520;
pub const DIBUTTON_SPACESIM_SLOWER_LINK : u32 = 117687528;
pub const DIBUTTON_SPACESIM_TURN_LEFT_LINK : u32 = 117589220;
pub const DIBUTTON_SPACESIM_TURN_RIGHT_LINK : u32 = 117589228;
pub const DIBUTTON_SPACESIM_GLANCE_LEFT_LINK : u32 = 117949668;
pub const DIBUTTON_SPACESIM_GLANCE_RIGHT_LINK : u32 = 117949676;
pub const DIBUTTON_SPACESIM_GLANCE_UP_LINK : u32 = 117949664;
pub const DIBUTTON_SPACESIM_GLANCE_DOWN_LINK : u32 = 117949672;
pub const DIBUTTON_SPACESIM_DEVICE : u32 = 117458174;
pub const DIBUTTON_SPACESIM_PAUSE : u32 = 117458172;
pub const DIVIRTUAL_FIGHTING_HAND2HAND : u32 = 134217728;
pub const DIAXIS_FIGHTINGH_LATERAL : u32 = 134251009;
pub const DIAXIS_FIGHTINGH_MOVE : u32 = 134283778;
pub const DIBUTTON_FIGHTINGH_PUNCH : u32 = 134218753;
pub const DIBUTTON_FIGHTINGH_KICK : u32 = 134218754;
pub const DIBUTTON_FIGHTINGH_BLOCK : u32 = 134218755;
pub const DIBUTTON_FIGHTINGH_CROUCH : u32 = 134218756;
pub const DIBUTTON_FIGHTINGH_JUMP : u32 = 134218757;
pub const DIBUTTON_FIGHTINGH_SPECIAL1 : u32 = 134218758;
pub const DIBUTTON_FIGHTINGH_SPECIAL2 : u32 = 134218759;
pub const DIBUTTON_FIGHTINGH_MENU : u32 = 134219005;
pub const DIBUTTON_FIGHTINGH_SELECT : u32 = 134235144;
pub const DIHATSWITCH_FIGHTINGH_SLIDE : u32 = 134235649;
pub const DIBUTTON_FIGHTINGH_DISPLAY : u32 = 134235145;
pub const DIAXIS_FIGHTINGH_ROTATE : u32 = 134365699;
pub const DIBUTTON_FIGHTINGH_DODGE : u32 = 134235146;
pub const DIBUTTON_FIGHTINGH_LEFT_LINK : u32 = 134268132;
pub const DIBUTTON_FIGHTINGH_RIGHT_LINK : u32 = 134268140;
pub const DIBUTTON_FIGHTINGH_FORWARD_LINK : u32 = 134300896;
pub const DIBUTTON_FIGHTINGH_BACKWARD_LINK : u32 = 134300904;
pub const DIBUTTON_FIGHTINGH_DEVICE : u32 = 134235390;
pub const DIBUTTON_FIGHTINGH_PAUSE : u32 = 134235388;
pub const DIVIRTUAL_FIGHTING_FPS : u32 = 150994944;
pub const DIAXIS_FPS_ROTATE : u32 = 151028225;
pub const DIAXIS_FPS_MOVE : u32 = 151060994;
pub const DIBUTTON_FPS_FIRE : u32 = 150995969;
pub const DIBUTTON_FPS_WEAPONS : u32 = 150995970;
pub const DIBUTTON_FPS_APPLY : u32 = 150995971;
pub const DIBUTTON_FPS_SELECT : u32 = 150995972;
pub const DIBUTTON_FPS_CROUCH : u32 = 150995973;
pub const DIBUTTON_FPS_JUMP : u32 = 150995974;
pub const DIAXIS_FPS_LOOKUPDOWN : u32 = 151093763;
pub const DIBUTTON_FPS_STRAFE : u32 = 150995975;
pub const DIBUTTON_FPS_MENU : u32 = 150996221;
pub const DIHATSWITCH_FPS_GLANCE : u32 = 151012865;
pub const DIBUTTON_FPS_DISPLAY : u32 = 151012360;
pub const DIAXIS_FPS_SIDESTEP : u32 = 151142916;
pub const DIBUTTON_FPS_DODGE : u32 = 151012361;
pub const DIBUTTON_FPS_GLANCEL : u32 = 151012362;
pub const DIBUTTON_FPS_GLANCER : u32 = 151012363;
pub const DIBUTTON_FPS_FIRESECONDARY : u32 = 151012364;
pub const DIBUTTON_FPS_ROTATE_LEFT_LINK : u32 = 151045348;
pub const DIBUTTON_FPS_ROTATE_RIGHT_LINK : u32 = 151045356;
pub const DIBUTTON_FPS_FORWARD_LINK : u32 = 151078112;
pub const DIBUTTON_FPS_BACKWARD_LINK : u32 = 151078120;
pub const DIBUTTON_FPS_GLANCE_UP_LINK : u32 = 151110880;
pub const DIBUTTON_FPS_GLANCE_DOWN_LINK : u32 = 151110888;
pub const DIBUTTON_FPS_STEP_LEFT_LINK : u32 = 151143652;
pub const DIBUTTON_FPS_STEP_RIGHT_LINK : u32 = 151143660;
pub const DIBUTTON_FPS_DEVICE : u32 = 151012606;
pub const DIBUTTON_FPS_PAUSE : u32 = 151012604;
pub const DIVIRTUAL_FIGHTING_THIRDPERSON : u32 = 167772160;
pub const DIAXIS_TPS_TURN : u32 = 167903745;
pub const DIAXIS_TPS_MOVE : u32 = 167838210;
pub const DIBUTTON_TPS_RUN : u32 = 167773185;
pub const DIBUTTON_TPS_ACTION : u32 = 167773186;
pub const DIBUTTON_TPS_SELECT : u32 = 167773187;
pub const DIBUTTON_TPS_USE : u32 = 167773188;
pub const DIBUTTON_TPS_JUMP : u32 = 167773189;
pub const DIBUTTON_TPS_MENU : u32 = 167773437;
pub const DIHATSWITCH_TPS_GLANCE : u32 = 167790081;
pub const DIBUTTON_TPS_VIEW : u32 = 167789574;
pub const DIBUTTON_TPS_STEPLEFT : u32 = 167789575;
pub const DIBUTTON_TPS_STEPRIGHT : u32 = 167789576;
pub const DIAXIS_TPS_STEP : u32 = 167821827;
pub const DIBUTTON_TPS_DODGE : u32 = 167789577;
pub const DIBUTTON_TPS_INVENTORY : u32 = 167789578;
pub const DIBUTTON_TPS_TURN_LEFT_LINK : u32 = 167920868;
pub const DIBUTTON_TPS_TURN_RIGHT_LINK : u32 = 167920876;
pub const DIBUTTON_TPS_FORWARD_LINK : u32 = 167855328;
pub const DIBUTTON_TPS_BACKWARD_LINK : u32 = 167855336;
pub const DIBUTTON_TPS_GLANCE_UP_LINK : u32 = 168281312;
pub const DIBUTTON_TPS_GLANCE_DOWN_LINK : u32 = 168281320;
pub const DIBUTTON_TPS_GLANCE_LEFT_LINK : u32 = 168281316;
pub const DIBUTTON_TPS_GLANCE_RIGHT_LINK : u32 = 168281324;
pub const DIBUTTON_TPS_DEVICE : u32 = 167789822;
pub const DIBUTTON_TPS_PAUSE : u32 = 167789820;
pub const DIVIRTUAL_STRATEGY_ROLEPLAYING : u32 = 184549376;
pub const DIAXIS_STRATEGYR_LATERAL : u32 = 184582657;
pub const DIAXIS_STRATEGYR_MOVE : u32 = 184615426;
pub const DIBUTTON_STRATEGYR_GET : u32 = 184550401;
pub const DIBUTTON_STRATEGYR_APPLY : u32 = 184550402;
pub const DIBUTTON_STRATEGYR_SELECT : u32 = 184550403;
pub const DIBUTTON_STRATEGYR_ATTACK : u32 = 184550404;
pub const DIBUTTON_STRATEGYR_CAST : u32 = 184550405;
pub const DIBUTTON_STRATEGYR_CROUCH : u32 = 184550406;
pub const DIBUTTON_STRATEGYR_JUMP : u32 = 184550407;
pub const DIBUTTON_STRATEGYR_MENU : u32 = 184550653;
pub const DIHATSWITCH_STRATEGYR_GLANCE : u32 = 184567297;
pub const DIBUTTON_STRATEGYR_MAP : u32 = 184566792;
pub const DIBUTTON_STRATEGYR_DISPLAY : u32 = 184566793;
pub const DIAXIS_STRATEGYR_ROTATE : u32 = 184697347;
pub const DIBUTTON_STRATEGYR_LEFT_LINK : u32 = 184599780;
pub const DIBUTTON_STRATEGYR_RIGHT_LINK : u32 = 184599788;
pub const DIBUTTON_STRATEGYR_FORWARD_LINK : u32 = 184632544;
pub const DIBUTTON_STRATEGYR_BACK_LINK : u32 = 184632552;
pub const DIBUTTON_STRATEGYR_ROTATE_LEFT_LINK : u32 = 184698084;
pub const DIBUTTON_STRATEGYR_ROTATE_RIGHT_LINK : u32 = 184698092;
pub const DIBUTTON_STRATEGYR_DEVICE : u32 = 184567038;
pub const DIBUTTON_STRATEGYR_PAUSE : u32 = 184567036;
pub const DIVIRTUAL_STRATEGY_TURN : u32 = 201326592;
pub const DIAXIS_STRATEGYT_LATERAL : u32 = 201359873;
pub const DIAXIS_STRATEGYT_MOVE : u32 = 201392642;
pub const DIBUTTON_STRATEGYT_SELECT : u32 = 201327617;
pub const DIBUTTON_STRATEGYT_INSTRUCT : u32 = 201327618;
pub const DIBUTTON_STRATEGYT_APPLY : u32 = 201327619;
pub const DIBUTTON_STRATEGYT_TEAM : u32 = 201327620;
pub const DIBUTTON_STRATEGYT_TURN : u32 = 201327621;
pub const DIBUTTON_STRATEGYT_MENU : u32 = 201327869;
pub const DIBUTTON_STRATEGYT_ZOOM : u32 = 201344006;
pub const DIBUTTON_STRATEGYT_MAP : u32 = 201344007;
pub const DIBUTTON_STRATEGYT_DISPLAY : u32 = 201344008;
pub const DIBUTTON_STRATEGYT_LEFT_LINK : u32 = 201376996;
pub const DIBUTTON_STRATEGYT_RIGHT_LINK : u32 = 201377004;
pub const DIBUTTON_STRATEGYT_FORWARD_LINK : u32 = 201409760;
pub const DIBUTTON_STRATEGYT_BACK_LINK : u32 = 201409768;
pub const DIBUTTON_STRATEGYT_DEVICE : u32 = 201344254;
pub const DIBUTTON_STRATEGYT_PAUSE : u32 = 201344252;
pub const DIVIRTUAL_SPORTS_HUNTING : u32 = 218103808;
pub const DIAXIS_HUNTING_LATERAL : u32 = 218137089;
pub const DIAXIS_HUNTING_MOVE : u32 = 218169858;
pub const DIBUTTON_HUNTING_FIRE : u32 = 218104833;
pub const DIBUTTON_HUNTING_AIM : u32 = 218104834;
pub const DIBUTTON_HUNTING_WEAPON : u32 = 218104835;
pub const DIBUTTON_HUNTING_BINOCULAR : u32 = 218104836;
pub const DIBUTTON_HUNTING_CALL : u32 = 218104837;
pub const DIBUTTON_HUNTING_MAP : u32 = 218104838;
pub const DIBUTTON_HUNTING_SPECIAL : u32 = 218104839;
pub const DIBUTTON_HUNTING_MENU : u32 = 218105085;
pub const DIHATSWITCH_HUNTING_GLANCE : u32 = 218121729;
pub const DIBUTTON_HUNTING_DISPLAY : u32 = 218121224;
pub const DIAXIS_HUNTING_ROTATE : u32 = 218251779;
pub const DIBUTTON_HUNTING_CROUCH : u32 = 218121225;
pub const DIBUTTON_HUNTING_JUMP : u32 = 218121226;
pub const DIBUTTON_HUNTING_FIRESECONDARY : u32 = 218121227;
pub const DIBUTTON_HUNTING_LEFT_LINK : u32 = 218154212;
pub const DIBUTTON_HUNTING_RIGHT_LINK : u32 = 218154220;
pub const DIBUTTON_HUNTING_FORWARD_LINK : u32 = 218186976;
pub const DIBUTTON_HUNTING_BACK_LINK : u32 = 218186984;
pub const DIBUTTON_HUNTING_ROTATE_LEFT_LINK : u32 = 218252516;
pub const DIBUTTON_HUNTING_ROTATE_RIGHT_LINK : u32 = 218252524;
pub const DIBUTTON_HUNTING_DEVICE : u32 = 218121470;
pub const DIBUTTON_HUNTING_PAUSE : u32 = 218121468;
pub const DIVIRTUAL_SPORTS_FISHING : u32 = 234881024;
pub const DIAXIS_FISHING_LATERAL : u32 = 234914305;
pub const DIAXIS_FISHING_MOVE : u32 = 234947074;
pub const DIBUTTON_FISHING_CAST : u32 = 234882049;
pub const DIBUTTON_FISHING_TYPE : u32 = 234882050;
pub const DIBUTTON_FISHING_BINOCULAR : u32 = 234882051;
pub const DIBUTTON_FISHING_BAIT : u32 = 234882052;
pub const DIBUTTON_FISHING_MAP : u32 = 234882053;
pub const DIBUTTON_FISHING_MENU : u32 = 234882301;
pub const DIHATSWITCH_FISHING_GLANCE : u32 = 234898945;
pub const DIBUTTON_FISHING_DISPLAY : u32 = 234898438;
pub const DIAXIS_FISHING_ROTATE : u32 = 235028995;
pub const DIBUTTON_FISHING_CROUCH : u32 = 234898439;
pub const DIBUTTON_FISHING_JUMP : u32 = 234898440;
pub const DIBUTTON_FISHING_LEFT_LINK : u32 = 234931428;
pub const DIBUTTON_FISHING_RIGHT_LINK : u32 = 234931436;
pub const DIBUTTON_FISHING_FORWARD_LINK : u32 = 234964192;
pub const DIBUTTON_FISHING_BACK_LINK : u32 = 234964200;
pub const DIBUTTON_FISHING_ROTATE_LEFT_LINK : u32 = 235029732;
pub const DIBUTTON_FISHING_ROTATE_RIGHT_LINK : u32 = 235029740;
pub const DIBUTTON_FISHING_DEVICE : u32 = 234898686;
pub const DIBUTTON_FISHING_PAUSE : u32 = 234898684;
pub const DIVIRTUAL_SPORTS_BASEBALL_BAT : u32 = 251658240;
pub const DIAXIS_BASEBALLB_LATERAL : u32 = 251691521;
pub const DIAXIS_BASEBALLB_MOVE : u32 = 251724290;
pub const DIBUTTON_BASEBALLB_SELECT : u32 = 251659265;
pub const DIBUTTON_BASEBALLB_NORMAL : u32 = 251659266;
pub const DIBUTTON_BASEBALLB_POWER : u32 = 251659267;
pub const DIBUTTON_BASEBALLB_BUNT : u32 = 251659268;
pub const DIBUTTON_BASEBALLB_STEAL : u32 = 251659269;
pub const DIBUTTON_BASEBALLB_BURST : u32 = 251659270;
pub const DIBUTTON_BASEBALLB_SLIDE : u32 = 251659271;
pub const DIBUTTON_BASEBALLB_CONTACT : u32 = 251659272;
pub const DIBUTTON_BASEBALLB_MENU : u32 = 251659517;
pub const DIBUTTON_BASEBALLB_NOSTEAL : u32 = 251675657;
pub const DIBUTTON_BASEBALLB_BOX : u32 = 251675658;
pub const DIBUTTON_BASEBALLB_LEFT_LINK : u32 = 251708644;
pub const DIBUTTON_BASEBALLB_RIGHT_LINK : u32 = 251708652;
pub const DIBUTTON_BASEBALLB_FORWARD_LINK : u32 = 251741408;
pub const DIBUTTON_BASEBALLB_BACK_LINK : u32 = 251741416;
pub const DIBUTTON_BASEBALLB_DEVICE : u32 = 251675902;
pub const DIBUTTON_BASEBALLB_PAUSE : u32 = 251675900;
pub const DIVIRTUAL_SPORTS_BASEBALL_PITCH : u32 = 268435456;
pub const DIAXIS_BASEBALLP_LATERAL : u32 = 268468737;
pub const DIAXIS_BASEBALLP_MOVE : u32 = 268501506;
pub const DIBUTTON_BASEBALLP_SELECT : u32 = 268436481;
pub const DIBUTTON_BASEBALLP_PITCH : u32 = 268436482;
pub const DIBUTTON_BASEBALLP_BASE : u32 = 268436483;
pub const DIBUTTON_BASEBALLP_THROW : u32 = 268436484;
pub const DIBUTTON_BASEBALLP_FAKE : u32 = 268436485;
pub const DIBUTTON_BASEBALLP_MENU : u32 = 268436733;
pub const DIBUTTON_BASEBALLP_WALK : u32 = 268452870;
pub const DIBUTTON_BASEBALLP_LOOK : u32 = 268452871;
pub const DIBUTTON_BASEBALLP_LEFT_LINK : u32 = 268485860;
pub const DIBUTTON_BASEBALLP_RIGHT_LINK : u32 = 268485868;
pub const DIBUTTON_BASEBALLP_FORWARD_LINK : u32 = 268518624;
pub const DIBUTTON_BASEBALLP_BACK_LINK : u32 = 268518632;
pub const DIBUTTON_BASEBALLP_DEVICE : u32 = 268453118;
pub const DIBUTTON_BASEBALLP_PAUSE : u32 = 268453116;
pub const DIVIRTUAL_SPORTS_BASEBALL_FIELD : u32 = 285212672;
pub const DIAXIS_BASEBALLF_LATERAL : u32 = 285245953;
pub const DIAXIS_BASEBALLF_MOVE : u32 = 285278722;
pub const DIBUTTON_BASEBALLF_NEAREST : u32 = 285213697;
pub const DIBUTTON_BASEBALLF_THROW1 : u32 = 285213698;
pub const DIBUTTON_BASEBALLF_THROW2 : u32 = 285213699;
pub const DIBUTTON_BASEBALLF_BURST : u32 = 285213700;
pub const DIBUTTON_BASEBALLF_JUMP : u32 = 285213701;
pub const DIBUTTON_BASEBALLF_DIVE : u32 = 285213702;
pub const DIBUTTON_BASEBALLF_MENU : u32 = 285213949;
pub const DIBUTTON_BASEBALLF_SHIFTIN : u32 = 285230087;
pub const DIBUTTON_BASEBALLF_SHIFTOUT : u32 = 285230088;
pub const DIBUTTON_BASEBALLF_AIM_LEFT_LINK : u32 = 285263076;
pub const DIBUTTON_BASEBALLF_AIM_RIGHT_LINK : u32 = 285263084;
pub const DIBUTTON_BASEBALLF_FORWARD_LINK : u32 = 285295840;
pub const DIBUTTON_BASEBALLF_BACK_LINK : u32 = 285295848;
pub const DIBUTTON_BASEBALLF_DEVICE : u32 = 285230334;
pub const DIBUTTON_BASEBALLF_PAUSE : u32 = 285230332;
pub const DIVIRTUAL_SPORTS_BASKETBALL_OFFENSE : u32 = 301989888;
pub const DIAXIS_BBALLO_LATERAL : u32 = 302023169;
pub const DIAXIS_BBALLO_MOVE : u32 = 302055938;
pub const DIBUTTON_BBALLO_SHOOT : u32 = 301990913;
pub const DIBUTTON_BBALLO_DUNK : u32 = 301990914;
pub const DIBUTTON_BBALLO_PASS : u32 = 301990915;
pub const DIBUTTON_BBALLO_FAKE : u32 = 301990916;
pub const DIBUTTON_BBALLO_SPECIAL : u32 = 301990917;
pub const DIBUTTON_BBALLO_PLAYER : u32 = 301990918;
pub const DIBUTTON_BBALLO_BURST : u32 = 301990919;
pub const DIBUTTON_BBALLO_CALL : u32 = 301990920;
pub const DIBUTTON_BBALLO_MENU : u32 = 301991165;
pub const DIHATSWITCH_BBALLO_GLANCE : u32 = 302007809;
pub const DIBUTTON_BBALLO_SCREEN : u32 = 302007305;
pub const DIBUTTON_BBALLO_PLAY : u32 = 302007306;
pub const DIBUTTON_BBALLO_JAB : u32 = 302007307;
pub const DIBUTTON_BBALLO_POST : u32 = 302007308;
pub const DIBUTTON_BBALLO_TIMEOUT : u32 = 302007309;
pub const DIBUTTON_BBALLO_SUBSTITUTE : u32 = 302007310;
pub const DIBUTTON_BBALLO_LEFT_LINK : u32 = 302040292;
pub const DIBUTTON_BBALLO_RIGHT_LINK : u32 = 302040300;
pub const DIBUTTON_BBALLO_FORWARD_LINK : u32 = 302073056;
pub const DIBUTTON_BBALLO_BACK_LINK : u32 = 302073064;
pub const DIBUTTON_BBALLO_DEVICE : u32 = 302007550;
pub const DIBUTTON_BBALLO_PAUSE : u32 = 302007548;
pub const DIVIRTUAL_SPORTS_BASKETBALL_DEFENSE : u32 = 318767104;
pub const DIAXIS_BBALLD_LATERAL : u32 = 318800385;
pub const DIAXIS_BBALLD_MOVE : u32 = 318833154;
pub const DIBUTTON_BBALLD_JUMP : u32 = 318768129;
pub const DIBUTTON_BBALLD_STEAL : u32 = 318768130;
pub const DIBUTTON_BBALLD_FAKE : u32 = 318768131;
pub const DIBUTTON_BBALLD_SPECIAL : u32 = 318768132;
pub const DIBUTTON_BBALLD_PLAYER : u32 = 318768133;
pub const DIBUTTON_BBALLD_BURST : u32 = 318768134;
pub const DIBUTTON_BBALLD_PLAY : u32 = 318768135;
pub const DIBUTTON_BBALLD_MENU : u32 = 318768381;
pub const DIHATSWITCH_BBALLD_GLANCE : u32 = 318785025;
pub const DIBUTTON_BBALLD_TIMEOUT : u32 = 318784520;
pub const DIBUTTON_BBALLD_SUBSTITUTE : u32 = 318784521;
pub const DIBUTTON_BBALLD_LEFT_LINK : u32 = 318817508;
pub const DIBUTTON_BBALLD_RIGHT_LINK : u32 = 318817516;
pub const DIBUTTON_BBALLD_FORWARD_LINK : u32 = 318850272;
pub const DIBUTTON_BBALLD_BACK_LINK : u32 = 318850280;
pub const DIBUTTON_BBALLD_DEVICE : u32 = 318784766;
pub const DIBUTTON_BBALLD_PAUSE : u32 = 318784764;
pub const DIVIRTUAL_SPORTS_FOOTBALL_FIELD : u32 = 335544320;
pub const DIBUTTON_FOOTBALLP_PLAY : u32 = 335545345;
pub const DIBUTTON_FOOTBALLP_SELECT : u32 = 335545346;
pub const DIBUTTON_FOOTBALLP_HELP : u32 = 335545347;
pub const DIBUTTON_FOOTBALLP_MENU : u32 = 335545597;
pub const DIBUTTON_FOOTBALLP_DEVICE : u32 = 335561982;
pub const DIBUTTON_FOOTBALLP_PAUSE : u32 = 335561980;
pub const DIVIRTUAL_SPORTS_FOOTBALL_QBCK : u32 = 352321536;
pub const DIAXIS_FOOTBALLQ_LATERAL : u32 = 352354817;
pub const DIAXIS_FOOTBALLQ_MOVE : u32 = 352387586;
pub const DIBUTTON_FOOTBALLQ_SELECT : u32 = 352322561;
pub const DIBUTTON_FOOTBALLQ_SNAP : u32 = 352322562;
pub const DIBUTTON_FOOTBALLQ_JUMP : u32 = 352322563;
pub const DIBUTTON_FOOTBALLQ_SLIDE : u32 = 352322564;
pub const DIBUTTON_FOOTBALLQ_PASS : u32 = 352322565;
pub const DIBUTTON_FOOTBALLQ_FAKE : u32 = 352322566;
pub const DIBUTTON_FOOTBALLQ_MENU : u32 = 352322813;
pub const DIBUTTON_FOOTBALLQ_FAKESNAP : u32 = 352338951;
pub const DIBUTTON_FOOTBALLQ_MOTION : u32 = 352338952;
pub const DIBUTTON_FOOTBALLQ_AUDIBLE : u32 = 352338953;
pub const DIBUTTON_FOOTBALLQ_LEFT_LINK : u32 = 352371940;
pub const DIBUTTON_FOOTBALLQ_RIGHT_LINK : u32 = 352371948;
pub const DIBUTTON_FOOTBALLQ_FORWARD_LINK : u32 = 352404704;
pub const DIBUTTON_FOOTBALLQ_BACK_LINK : u32 = 352404712;
pub const DIBUTTON_FOOTBALLQ_DEVICE : u32 = 352339198;
pub const DIBUTTON_FOOTBALLQ_PAUSE : u32 = 352339196;
pub const DIVIRTUAL_SPORTS_FOOTBALL_OFFENSE : u32 = 369098752;
pub const DIAXIS_FOOTBALLO_LATERAL : u32 = 369132033;
pub const DIAXIS_FOOTBALLO_MOVE : u32 = 369164802;
pub const DIBUTTON_FOOTBALLO_JUMP : u32 = 369099777;
pub const DIBUTTON_FOOTBALLO_LEFTARM : u32 = 369099778;
pub const DIBUTTON_FOOTBALLO_RIGHTARM : u32 = 369099779;
pub const DIBUTTON_FOOTBALLO_THROW : u32 = 369099780;
pub const DIBUTTON_FOOTBALLO_SPIN : u32 = 369099781;
pub const DIBUTTON_FOOTBALLO_MENU : u32 = 369100029;
pub const DIBUTTON_FOOTBALLO_JUKE : u32 = 369116166;
pub const DIBUTTON_FOOTBALLO_SHOULDER : u32 = 369116167;
pub const DIBUTTON_FOOTBALLO_TURBO : u32 = 369116168;
pub const DIBUTTON_FOOTBALLO_DIVE : u32 = 369116169;
pub const DIBUTTON_FOOTBALLO_ZOOM : u32 = 369116170;
pub const DIBUTTON_FOOTBALLO_SUBSTITUTE : u32 = 369116171;
pub const DIBUTTON_FOOTBALLO_LEFT_LINK : u32 = 369149156;
pub const DIBUTTON_FOOTBALLO_RIGHT_LINK : u32 = 369149164;
pub const DIBUTTON_FOOTBALLO_FORWARD_LINK : u32 = 369181920;
pub const DIBUTTON_FOOTBALLO_BACK_LINK : u32 = 369181928;
pub const DIBUTTON_FOOTBALLO_DEVICE : u32 = 369116414;
pub const DIBUTTON_FOOTBALLO_PAUSE : u32 = 369116412;
pub const DIVIRTUAL_SPORTS_FOOTBALL_DEFENSE : u32 = 385875968;
pub const DIAXIS_FOOTBALLD_LATERAL : u32 = 385909249;
pub const DIAXIS_FOOTBALLD_MOVE : u32 = 385942018;
pub const DIBUTTON_FOOTBALLD_PLAY : u32 = 385876993;
pub const DIBUTTON_FOOTBALLD_SELECT : u32 = 385876994;
pub const DIBUTTON_FOOTBALLD_JUMP : u32 = 385876995;
pub const DIBUTTON_FOOTBALLD_TACKLE : u32 = 385876996;
pub const DIBUTTON_FOOTBALLD_FAKE : u32 = 385876997;
pub const DIBUTTON_FOOTBALLD_SUPERTACKLE : u32 = 385876998;
pub const DIBUTTON_FOOTBALLD_MENU : u32 = 385877245;
pub const DIBUTTON_FOOTBALLD_SPIN : u32 = 385893383;
pub const DIBUTTON_FOOTBALLD_SWIM : u32 = 385893384;
pub const DIBUTTON_FOOTBALLD_BULLRUSH : u32 = 385893385;
pub const DIBUTTON_FOOTBALLD_RIP : u32 = 385893386;
pub const DIBUTTON_FOOTBALLD_AUDIBLE : u32 = 385893387;
pub const DIBUTTON_FOOTBALLD_ZOOM : u32 = 385893388;
pub const DIBUTTON_FOOTBALLD_SUBSTITUTE : u32 = 385893389;
pub const DIBUTTON_FOOTBALLD_LEFT_LINK : u32 = 385926372;
pub const DIBUTTON_FOOTBALLD_RIGHT_LINK : u32 = 385926380;
pub const DIBUTTON_FOOTBALLD_FORWARD_LINK : u32 = 385959136;
pub const DIBUTTON_FOOTBALLD_BACK_LINK : u32 = 385959144;
pub const DIBUTTON_FOOTBALLD_DEVICE : u32 = 385893630;
pub const DIBUTTON_FOOTBALLD_PAUSE : u32 = 385893628;
pub const DIVIRTUAL_SPORTS_GOLF : u32 = 402653184;
pub const DIAXIS_GOLF_LATERAL : u32 = 402686465;
pub const DIAXIS_GOLF_MOVE : u32 = 402719234;
pub const DIBUTTON_GOLF_SWING : u32 = 402654209;
pub const DIBUTTON_GOLF_SELECT : u32 = 402654210;
pub const DIBUTTON_GOLF_UP : u32 = 402654211;
pub const DIBUTTON_GOLF_DOWN : u32 = 402654212;
pub const DIBUTTON_GOLF_TERRAIN : u32 = 402654213;
pub const DIBUTTON_GOLF_FLYBY : u32 = 402654214;
pub const DIBUTTON_GOLF_MENU : u32 = 402654461;
pub const DIHATSWITCH_GOLF_SCROLL : u32 = 402671105;
pub const DIBUTTON_GOLF_ZOOM : u32 = 402670599;
pub const DIBUTTON_GOLF_TIMEOUT : u32 = 402670600;
pub const DIBUTTON_GOLF_SUBSTITUTE : u32 = 402670601;
pub const DIBUTTON_GOLF_LEFT_LINK : u32 = 402703588;
pub const DIBUTTON_GOLF_RIGHT_LINK : u32 = 402703596;
pub const DIBUTTON_GOLF_FORWARD_LINK : u32 = 402736352;
pub const DIBUTTON_GOLF_BACK_LINK : u32 = 402736360;
pub const DIBUTTON_GOLF_DEVICE : u32 = 402670846;
pub const DIBUTTON_GOLF_PAUSE : u32 = 402670844;
pub const DIVIRTUAL_SPORTS_HOCKEY_OFFENSE : u32 = 419430400;
pub const DIAXIS_HOCKEYO_LATERAL : u32 = 419463681;
pub const DIAXIS_HOCKEYO_MOVE : u32 = 419496450;
pub const DIBUTTON_HOCKEYO_SHOOT : u32 = 419431425;
pub const DIBUTTON_HOCKEYO_PASS : u32 = 419431426;
pub const DIBUTTON_HOCKEYO_BURST : u32 = 419431427;
pub const DIBUTTON_HOCKEYO_SPECIAL : u32 = 419431428;
pub const DIBUTTON_HOCKEYO_FAKE : u32 = 419431429;
pub const DIBUTTON_HOCKEYO_MENU : u32 = 419431677;
pub const DIHATSWITCH_HOCKEYO_SCROLL : u32 = 419448321;
pub const DIBUTTON_HOCKEYO_ZOOM : u32 = 419447814;
pub const DIBUTTON_HOCKEYO_STRATEGY : u32 = 419447815;
pub const DIBUTTON_HOCKEYO_TIMEOUT : u32 = 419447816;
pub const DIBUTTON_HOCKEYO_SUBSTITUTE : u32 = 419447817;
pub const DIBUTTON_HOCKEYO_LEFT_LINK : u32 = 419480804;
pub const DIBUTTON_HOCKEYO_RIGHT_LINK : u32 = 419480812;
pub const DIBUTTON_HOCKEYO_FORWARD_LINK : u32 = 419513568;
pub const DIBUTTON_HOCKEYO_BACK_LINK : u32 = 419513576;
pub const DIBUTTON_HOCKEYO_DEVICE : u32 = 419448062;
pub const DIBUTTON_HOCKEYO_PAUSE : u32 = 419448060;
pub const DIVIRTUAL_SPORTS_HOCKEY_DEFENSE : u32 = 436207616;
pub const DIAXIS_HOCKEYD_LATERAL : u32 = 436240897;
pub const DIAXIS_HOCKEYD_MOVE : u32 = 436273666;
pub const DIBUTTON_HOCKEYD_PLAYER : u32 = 436208641;
pub const DIBUTTON_HOCKEYD_STEAL : u32 = 436208642;
pub const DIBUTTON_HOCKEYD_BURST : u32 = 436208643;
pub const DIBUTTON_HOCKEYD_BLOCK : u32 = 436208644;
pub const DIBUTTON_HOCKEYD_FAKE : u32 = 436208645;
pub const DIBUTTON_HOCKEYD_MENU : u32 = 436208893;
pub const DIHATSWITCH_HOCKEYD_SCROLL : u32 = 436225537;
pub const DIBUTTON_HOCKEYD_ZOOM : u32 = 436225030;
pub const DIBUTTON_HOCKEYD_STRATEGY : u32 = 436225031;
pub const DIBUTTON_HOCKEYD_TIMEOUT : u32 = 436225032;
pub const DIBUTTON_HOCKEYD_SUBSTITUTE : u32 = 436225033;
pub const DIBUTTON_HOCKEYD_LEFT_LINK : u32 = 436258020;
pub const DIBUTTON_HOCKEYD_RIGHT_LINK : u32 = 436258028;
pub const DIBUTTON_HOCKEYD_FORWARD_LINK : u32 = 436290784;
pub const DIBUTTON_HOCKEYD_BACK_LINK : u32 = 436290792;
pub const DIBUTTON_HOCKEYD_DEVICE : u32 = 436225278;
pub const DIBUTTON_HOCKEYD_PAUSE : u32 = 436225276;
pub const DIVIRTUAL_SPORTS_HOCKEY_GOALIE : u32 = 452984832;
pub const DIAXIS_HOCKEYG_LATERAL : u32 = 453018113;
pub const DIAXIS_HOCKEYG_MOVE : u32 = 453050882;
pub const DIBUTTON_HOCKEYG_PASS : u32 = 452985857;
pub const DIBUTTON_HOCKEYG_POKE : u32 = 452985858;
pub const DIBUTTON_HOCKEYG_STEAL : u32 = 452985859;
pub const DIBUTTON_HOCKEYG_BLOCK : u32 = 452985860;
pub const DIBUTTON_HOCKEYG_MENU : u32 = 452986109;
pub const DIHATSWITCH_HOCKEYG_SCROLL : u32 = 453002753;
pub const DIBUTTON_HOCKEYG_ZOOM : u32 = 453002245;
pub const DIBUTTON_HOCKEYG_STRATEGY : u32 = 453002246;
pub const DIBUTTON_HOCKEYG_TIMEOUT : u32 = 453002247;
pub const DIBUTTON_HOCKEYG_SUBSTITUTE : u32 = 453002248;
pub const DIBUTTON_HOCKEYG_LEFT_LINK : u32 = 453035236;
pub const DIBUTTON_HOCKEYG_RIGHT_LINK : u32 = 453035244;
pub const DIBUTTON_HOCKEYG_FORWARD_LINK : u32 = 453068000;
pub const DIBUTTON_HOCKEYG_BACK_LINK : u32 = 453068008;
pub const DIBUTTON_HOCKEYG_DEVICE : u32 = 453002494;
pub const DIBUTTON_HOCKEYG_PAUSE : u32 = 453002492;
pub const DIVIRTUAL_SPORTS_BIKING_MOUNTAIN : u32 = 469762048;
pub const DIAXIS_BIKINGM_TURN : u32 = 469795329;
pub const DIAXIS_BIKINGM_PEDAL : u32 = 469828098;
pub const DIBUTTON_BIKINGM_JUMP : u32 = 469763073;
pub const DIBUTTON_BIKINGM_CAMERA : u32 = 469763074;
pub const DIBUTTON_BIKINGM_SPECIAL1 : u32 = 469763075;
pub const DIBUTTON_BIKINGM_SELECT : u32 = 469763076;
pub const DIBUTTON_BIKINGM_SPECIAL2 : u32 = 469763077;
pub const DIBUTTON_BIKINGM_MENU : u32 = 469763325;
pub const DIHATSWITCH_BIKINGM_SCROLL : u32 = 469779969;
pub const DIBUTTON_BIKINGM_ZOOM : u32 = 469779462;
pub const DIAXIS_BIKINGM_BRAKE : u32 = 470041091;
pub const DIBUTTON_BIKINGM_LEFT_LINK : u32 = 469812452;
pub const DIBUTTON_BIKINGM_RIGHT_LINK : u32 = 469812460;
pub const DIBUTTON_BIKINGM_FASTER_LINK : u32 = 469845216;
pub const DIBUTTON_BIKINGM_SLOWER_LINK : u32 = 469845224;
pub const DIBUTTON_BIKINGM_BRAKE_BUTTON_LINK : u32 = 470041832;
pub const DIBUTTON_BIKINGM_DEVICE : u32 = 469779710;
pub const DIBUTTON_BIKINGM_PAUSE : u32 = 469779708;
pub const DIVIRTUAL_SPORTS_SKIING : u32 = 486539264;
pub const DIAXIS_SKIING_TURN : u32 = 486572545;
pub const DIAXIS_SKIING_SPEED : u32 = 486605314;
pub const DIBUTTON_SKIING_JUMP : u32 = 486540289;
pub const DIBUTTON_SKIING_CROUCH : u32 = 486540290;
pub const DIBUTTON_SKIING_CAMERA : u32 = 486540291;
pub const DIBUTTON_SKIING_SPECIAL1 : u32 = 486540292;
pub const DIBUTTON_SKIING_SELECT : u32 = 486540293;
pub const DIBUTTON_SKIING_SPECIAL2 : u32 = 486540294;
pub const DIBUTTON_SKIING_MENU : u32 = 486540541;
pub const DIHATSWITCH_SKIING_GLANCE : u32 = 486557185;
pub const DIBUTTON_SKIING_ZOOM : u32 = 486556679;
pub const DIBUTTON_SKIING_LEFT_LINK : u32 = 486589668;
pub const DIBUTTON_SKIING_RIGHT_LINK : u32 = 486589676;
pub const DIBUTTON_SKIING_FASTER_LINK : u32 = 486622432;
pub const DIBUTTON_SKIING_SLOWER_LINK : u32 = 486622440;
pub const DIBUTTON_SKIING_DEVICE : u32 = 486556926;
pub const DIBUTTON_SKIING_PAUSE : u32 = 486556924;
pub const DIVIRTUAL_SPORTS_SOCCER_OFFENSE : u32 = 503316480;
pub const DIAXIS_SOCCERO_LATERAL : u32 = 503349761;
pub const DIAXIS_SOCCERO_MOVE : u32 = 503382530;
pub const DIAXIS_SOCCERO_BEND : u32 = 503415299;
pub const DIBUTTON_SOCCERO_SHOOT : u32 = 503317505;
pub const DIBUTTON_SOCCERO_PASS : u32 = 503317506;
pub const DIBUTTON_SOCCERO_FAKE : u32 = 503317507;
pub const DIBUTTON_SOCCERO_PLAYER : u32 = 503317508;
pub const DIBUTTON_SOCCERO_SPECIAL1 : u32 = 503317509;
pub const DIBUTTON_SOCCERO_SELECT : u32 = 503317510;
pub const DIBUTTON_SOCCERO_MENU : u32 = 503317757;
pub const DIHATSWITCH_SOCCERO_GLANCE : u32 = 503334401;
pub const DIBUTTON_SOCCERO_SUBSTITUTE : u32 = 503333895;
pub const DIBUTTON_SOCCERO_SHOOTLOW : u32 = 503333896;
pub const DIBUTTON_SOCCERO_SHOOTHIGH : u32 = 503333897;
pub const DIBUTTON_SOCCERO_PASSTHRU : u32 = 503333898;
pub const DIBUTTON_SOCCERO_SPRINT : u32 = 503333899;
pub const DIBUTTON_SOCCERO_CONTROL : u32 = 503333900;
pub const DIBUTTON_SOCCERO_HEAD : u32 = 503333901;
pub const DIBUTTON_SOCCERO_LEFT_LINK : u32 = 503366884;
pub const DIBUTTON_SOCCERO_RIGHT_LINK : u32 = 503366892;
pub const DIBUTTON_SOCCERO_FORWARD_LINK : u32 = 503399648;
pub const DIBUTTON_SOCCERO_BACK_LINK : u32 = 503399656;
pub const DIBUTTON_SOCCERO_DEVICE : u32 = 503334142;
pub const DIBUTTON_SOCCERO_PAUSE : u32 = 503334140;
pub const DIVIRTUAL_SPORTS_SOCCER_DEFENSE : u32 = 520093696;
pub const DIAXIS_SOCCERD_LATERAL : u32 = 520126977;
pub const DIAXIS_SOCCERD_MOVE : u32 = 520159746;
pub const DIBUTTON_SOCCERD_BLOCK : u32 = 520094721;
pub const DIBUTTON_SOCCERD_STEAL : u32 = 520094722;
pub const DIBUTTON_SOCCERD_FAKE : u32 = 520094723;
pub const DIBUTTON_SOCCERD_PLAYER : u32 = 520094724;
pub const DIBUTTON_SOCCERD_SPECIAL : u32 = 520094725;
pub const DIBUTTON_SOCCERD_SELECT : u32 = 520094726;
pub const DIBUTTON_SOCCERD_SLIDE : u32 = 520094727;
pub const DIBUTTON_SOCCERD_MENU : u32 = 520094973;
pub const DIHATSWITCH_SOCCERD_GLANCE : u32 = 520111617;
pub const DIBUTTON_SOCCERD_FOUL : u32 = 520111112;
pub const DIBUTTON_SOCCERD_HEAD : u32 = 520111113;
pub const DIBUTTON_SOCCERD_CLEAR : u32 = 520111114;
pub const DIBUTTON_SOCCERD_GOALIECHARGE : u32 = 520111115;
pub const DIBUTTON_SOCCERD_SUBSTITUTE : u32 = 520111116;
pub const DIBUTTON_SOCCERD_LEFT_LINK : u32 = 520144100;
pub const DIBUTTON_SOCCERD_RIGHT_LINK : u32 = 520144108;
pub const DIBUTTON_SOCCERD_FORWARD_LINK : u32 = 520176864;
pub const DIBUTTON_SOCCERD_BACK_LINK : u32 = 520176872;
pub const DIBUTTON_SOCCERD_DEVICE : u32 = 520111358;
pub const DIBUTTON_SOCCERD_PAUSE : u32 = 520111356;
pub const DIVIRTUAL_SPORTS_RACQUET : u32 = 536870912;
pub const DIAXIS_RACQUET_LATERAL : u32 = 536904193;
pub const DIAXIS_RACQUET_MOVE : u32 = 536936962;
pub const DIBUTTON_RACQUET_SWING : u32 = 536871937;
pub const DIBUTTON_RACQUET_BACKSWING : u32 = 536871938;
pub const DIBUTTON_RACQUET_SMASH : u32 = 536871939;
pub const DIBUTTON_RACQUET_SPECIAL : u32 = 536871940;
pub const DIBUTTON_RACQUET_SELECT : u32 = 536871941;
pub const DIBUTTON_RACQUET_MENU : u32 = 536872189;
pub const DIHATSWITCH_RACQUET_GLANCE : u32 = 536888833;
pub const DIBUTTON_RACQUET_TIMEOUT : u32 = 536888326;
pub const DIBUTTON_RACQUET_SUBSTITUTE : u32 = 536888327;
pub const DIBUTTON_RACQUET_LEFT_LINK : u32 = 536921316;
pub const DIBUTTON_RACQUET_RIGHT_LINK : u32 = 536921324;
pub const DIBUTTON_RACQUET_FORWARD_LINK : u32 = 536954080;
pub const DIBUTTON_RACQUET_BACK_LINK : u32 = 536954088;
pub const DIBUTTON_RACQUET_DEVICE : u32 = 536888574;
pub const DIBUTTON_RACQUET_PAUSE : u32 = 536888572;
pub const DIVIRTUAL_ARCADE_SIDE2SIDE : u32 = 553648128;
pub const DIAXIS_ARCADES_LATERAL : u32 = 553681409;
pub const DIAXIS_ARCADES_MOVE : u32 = 553714178;
pub const DIBUTTON_ARCADES_THROW : u32 = 553649153;
pub const DIBUTTON_ARCADES_CARRY : u32 = 553649154;
pub const DIBUTTON_ARCADES_ATTACK : u32 = 553649155;
pub const DIBUTTON_ARCADES_SPECIAL : u32 = 553649156;
pub const DIBUTTON_ARCADES_SELECT : u32 = 553649157;
pub const DIBUTTON_ARCADES_MENU : u32 = 553649405;
pub const DIHATSWITCH_ARCADES_VIEW : u32 = 553666049;
pub const DIBUTTON_ARCADES_LEFT_LINK : u32 = 553698532;
pub const DIBUTTON_ARCADES_RIGHT_LINK : u32 = 553698540;
pub const DIBUTTON_ARCADES_FORWARD_LINK : u32 = 553731296;
pub const DIBUTTON_ARCADES_BACK_LINK : u32 = 553731304;
pub const DIBUTTON_ARCADES_VIEW_UP_LINK : u32 = 554157280;
pub const DIBUTTON_ARCADES_VIEW_DOWN_LINK : u32 = 554157288;
pub const DIBUTTON_ARCADES_VIEW_LEFT_LINK : u32 = 554157284;
pub const DIBUTTON_ARCADES_VIEW_RIGHT_LINK : u32 = 554157292;
pub const DIBUTTON_ARCADES_DEVICE : u32 = 553665790;
pub const DIBUTTON_ARCADES_PAUSE : u32 = 553665788;
pub const DIVIRTUAL_ARCADE_PLATFORM : u32 = 570425344;
pub const DIAXIS_ARCADEP_LATERAL : u32 = 570458625;
pub const DIAXIS_ARCADEP_MOVE : u32 = 570491394;
pub const DIBUTTON_ARCADEP_JUMP : u32 = 570426369;
pub const DIBUTTON_ARCADEP_FIRE : u32 = 570426370;
pub const DIBUTTON_ARCADEP_CROUCH : u32 = 570426371;
pub const DIBUTTON_ARCADEP_SPECIAL : u32 = 570426372;
pub const DIBUTTON_ARCADEP_SELECT : u32 = 570426373;
pub const DIBUTTON_ARCADEP_MENU : u32 = 570426621;
pub const DIHATSWITCH_ARCADEP_VIEW : u32 = 570443265;
pub const DIBUTTON_ARCADEP_FIRESECONDARY : u32 = 570442758;
pub const DIBUTTON_ARCADEP_LEFT_LINK : u32 = 570475748;
pub const DIBUTTON_ARCADEP_RIGHT_LINK : u32 = 570475756;
pub const DIBUTTON_ARCADEP_FORWARD_LINK : u32 = 570508512;
pub const DIBUTTON_ARCADEP_BACK_LINK : u32 = 570508520;
pub const DIBUTTON_ARCADEP_VIEW_UP_LINK : u32 = 570934496;
pub const DIBUTTON_ARCADEP_VIEW_DOWN_LINK : u32 = 570934504;
pub const DIBUTTON_ARCADEP_VIEW_LEFT_LINK : u32 = 570934500;
pub const DIBUTTON_ARCADEP_VIEW_RIGHT_LINK : u32 = 570934508;
pub const DIBUTTON_ARCADEP_DEVICE : u32 = 570443006;
pub const DIBUTTON_ARCADEP_PAUSE : u32 = 570443004;
pub const DIVIRTUAL_CAD_2DCONTROL : u32 = 587202560;
pub const DIAXIS_2DCONTROL_LATERAL : u32 = 587235841;
pub const DIAXIS_2DCONTROL_MOVE : u32 = 587268610;
pub const DIAXIS_2DCONTROL_INOUT : u32 = 587301379;
pub const DIBUTTON_2DCONTROL_SELECT : u32 = 587203585;
pub const DIBUTTON_2DCONTROL_SPECIAL1 : u32 = 587203586;
pub const DIBUTTON_2DCONTROL_SPECIAL : u32 = 587203587;
pub const DIBUTTON_2DCONTROL_SPECIAL2 : u32 = 587203588;
pub const DIBUTTON_2DCONTROL_MENU : u32 = 587203837;
pub const DIHATSWITCH_2DCONTROL_HATSWITCH : u32 = 587220481;
pub const DIAXIS_2DCONTROL_ROTATEZ : u32 = 587350532;
pub const DIBUTTON_2DCONTROL_DISPLAY : u32 = 587219973;
pub const DIBUTTON_2DCONTROL_DEVICE : u32 = 587220222;
pub const DIBUTTON_2DCONTROL_PAUSE : u32 = 587220220;
pub const DIVIRTUAL_CAD_3DCONTROL : u32 = 603979776;
pub const DIAXIS_3DCONTROL_LATERAL : u32 = 604013057;
pub const DIAXIS_3DCONTROL_MOVE : u32 = 604045826;
pub const DIAXIS_3DCONTROL_INOUT : u32 = 604078595;
pub const DIBUTTON_3DCONTROL_SELECT : u32 = 603980801;
pub const DIBUTTON_3DCONTROL_SPECIAL1 : u32 = 603980802;
pub const DIBUTTON_3DCONTROL_SPECIAL : u32 = 603980803;
pub const DIBUTTON_3DCONTROL_SPECIAL2 : u32 = 603980804;
pub const DIBUTTON_3DCONTROL_MENU : u32 = 603981053;
pub const DIHATSWITCH_3DCONTROL_HATSWITCH : u32 = 603997697;
pub const DIAXIS_3DCONTROL_ROTATEX : u32 = 604193284;
pub const DIAXIS_3DCONTROL_ROTATEY : u32 = 604160517;
pub const DIAXIS_3DCONTROL_ROTATEZ : u32 = 604127750;
pub const DIBUTTON_3DCONTROL_DISPLAY : u32 = 603997189;
pub const DIBUTTON_3DCONTROL_DEVICE : u32 = 603997438;
pub const DIBUTTON_3DCONTROL_PAUSE : u32 = 603997436;
pub const DIVIRTUAL_CAD_FLYBY : u32 = 620756992;
pub const DIAXIS_CADF_LATERAL : u32 = 620790273;
pub const DIAXIS_CADF_MOVE : u32 = 620823042;
pub const DIAXIS_CADF_INOUT : u32 = 620855811;
pub const DIBUTTON_CADF_SELECT : u32 = 620758017;
pub const DIBUTTON_CADF_SPECIAL1 : u32 = 620758018;
pub const DIBUTTON_CADF_SPECIAL : u32 = 620758019;
pub const DIBUTTON_CADF_SPECIAL2 : u32 = 620758020;
pub const DIBUTTON_CADF_MENU : u32 = 620758269;
pub const DIHATSWITCH_CADF_HATSWITCH : u32 = 620774913;
pub const DIAXIS_CADF_ROTATEX : u32 = 620970500;
pub const DIAXIS_CADF_ROTATEY : u32 = 620937733;
pub const DIAXIS_CADF_ROTATEZ : u32 = 620904966;
pub const DIBUTTON_CADF_DISPLAY : u32 = 620774405;
pub const DIBUTTON_CADF_DEVICE : u32 = 620774654;
pub const DIBUTTON_CADF_PAUSE : u32 = 620774652;
pub const DIVIRTUAL_CAD_MODEL : u32 = 637534208;
pub const DIAXIS_CADM_LATERAL : u32 = 637567489;
pub const DIAXIS_CADM_MOVE : u32 = 637600258;
pub const DIAXIS_CADM_INOUT : u32 = 637633027;
pub const DIBUTTON_CADM_SELECT : u32 = 637535233;
pub const DIBUTTON_CADM_SPECIAL1 : u32 = 637535234;
pub const DIBUTTON_CADM_SPECIAL : u32 = 637535235;
pub const DIBUTTON_CADM_SPECIAL2 : u32 = 637535236;
pub const DIBUTTON_CADM_MENU : u32 = 637535485;
pub const DIHATSWITCH_CADM_HATSWITCH : u32 = 637552129;
pub const DIAXIS_CADM_ROTATEX : u32 = 637747716;
pub const DIAXIS_CADM_ROTATEY : u32 = 637714949;
pub const DIAXIS_CADM_ROTATEZ : u32 = 637682182;
pub const DIBUTTON_CADM_DISPLAY : u32 = 637551621;
pub const DIBUTTON_CADM_DEVICE : u32 = 637551870;
pub const DIBUTTON_CADM_PAUSE : u32 = 637551868;
pub const DIVIRTUAL_REMOTE_CONTROL : u32 = 654311424;
pub const DIAXIS_REMOTE_SLIDER : u32 = 654639617;
pub const DIBUTTON_REMOTE_MUTE : u32 = 654312449;
pub const DIBUTTON_REMOTE_SELECT : u32 = 654312450;
pub const DIBUTTON_REMOTE_PLAY : u32 = 654320643;
pub const DIBUTTON_REMOTE_CUE : u32 = 654320644;
pub const DIBUTTON_REMOTE_REVIEW : u32 = 654320645;
pub const DIBUTTON_REMOTE_CHANGE : u32 = 654320646;
pub const DIBUTTON_REMOTE_RECORD : u32 = 654320647;
pub const DIBUTTON_REMOTE_MENU : u32 = 654312701;
pub const DIAXIS_REMOTE_SLIDER2 : u32 = 654656002;
pub const DIBUTTON_REMOTE_TV : u32 = 654334984;
pub const DIBUTTON_REMOTE_CABLE : u32 = 654334985;
pub const DIBUTTON_REMOTE_CD : u32 = 654334986;
pub const DIBUTTON_REMOTE_VCR : u32 = 654334987;
pub const DIBUTTON_REMOTE_TUNER : u32 = 654334988;
pub const DIBUTTON_REMOTE_DVD : u32 = 654334989;
pub const DIBUTTON_REMOTE_ADJUST : u32 = 654334990;
pub const DIBUTTON_REMOTE_DIGIT0 : u32 = 654332943;
pub const DIBUTTON_REMOTE_DIGIT1 : u32 = 654332944;
pub const DIBUTTON_REMOTE_DIGIT2 : u32 = 654332945;
pub const DIBUTTON_REMOTE_DIGIT3 : u32 = 654332946;
pub const DIBUTTON_REMOTE_DIGIT4 : u32 = 654332947;
pub const DIBUTTON_REMOTE_DIGIT5 : u32 = 654332948;
pub const DIBUTTON_REMOTE_DIGIT6 : u32 = 654332949;
pub const DIBUTTON_REMOTE_DIGIT7 : u32 = 654332950;
pub const DIBUTTON_REMOTE_DIGIT8 : u32 = 654332951;
pub const DIBUTTON_REMOTE_DIGIT9 : u32 = 654332952;
pub const DIBUTTON_REMOTE_DEVICE : u32 = 654329086;
pub const DIBUTTON_REMOTE_PAUSE : u32 = 654329084;
pub const DIVIRTUAL_BROWSER_CONTROL : u32 = 671088640;
pub const DIAXIS_BROWSER_LATERAL : u32 = 671121921;
pub const DIAXIS_BROWSER_MOVE : u32 = 671154690;
pub const DIBUTTON_BROWSER_SELECT : u32 = 671089665;
pub const DIAXIS_BROWSER_VIEW : u32 = 671187459;
pub const DIBUTTON_BROWSER_REFRESH : u32 = 671089666;
pub const DIBUTTON_BROWSER_MENU : u32 = 671089917;
pub const DIBUTTON_BROWSER_SEARCH : u32 = 671106051;
pub const DIBUTTON_BROWSER_STOP : u32 = 671106052;
pub const DIBUTTON_BROWSER_HOME : u32 = 671106053;
pub const DIBUTTON_BROWSER_FAVORITES : u32 = 671106054;
pub const DIBUTTON_BROWSER_NEXT : u32 = 671106055;
pub const DIBUTTON_BROWSER_PREVIOUS : u32 = 671106056;
pub const DIBUTTON_BROWSER_HISTORY : u32 = 671106057;
pub const DIBUTTON_BROWSER_PRINT : u32 = 671106058;
pub const DIBUTTON_BROWSER_DEVICE : u32 = 671106302;
pub const DIBUTTON_BROWSER_PAUSE : u32 = 671106300;
pub const DIVIRTUAL_DRIVING_MECHA : u32 = 687865856;
pub const DIAXIS_MECHA_STEER : u32 = 687899137;
pub const DIAXIS_MECHA_TORSO : u32 = 687931906;
pub const DIAXIS_MECHA_ROTATE : u32 = 687997443;
pub const DIAXIS_MECHA_THROTTLE : u32 = 688095748;
pub const DIBUTTON_MECHA_FIRE : u32 = 687866881;
pub const DIBUTTON_MECHA_WEAPONS : u32 = 687866882;
pub const DIBUTTON_MECHA_TARGET : u32 = 687866883;
pub const DIBUTTON_MECHA_REVERSE : u32 = 687866884;
pub const DIBUTTON_MECHA_ZOOM : u32 = 687866885;
pub const DIBUTTON_MECHA_JUMP : u32 = 687866886;
pub const DIBUTTON_MECHA_MENU : u32 = 687867133;
pub const DIBUTTON_MECHA_CENTER : u32 = 687883271;
pub const DIHATSWITCH_MECHA_GLANCE : u32 = 687883777;
pub const DIBUTTON_MECHA_VIEW : u32 = 687883272;
pub const DIBUTTON_MECHA_FIRESECONDARY : u32 = 687883273;
pub const DIBUTTON_MECHA_LEFT_LINK : u32 = 687916260;
pub const DIBUTTON_MECHA_RIGHT_LINK : u32 = 687916268;
pub const DIBUTTON_MECHA_FORWARD_LINK : u32 = 687949024;
pub const DIBUTTON_MECHA_BACK_LINK : u32 = 687949032;
pub const DIBUTTON_MECHA_ROTATE_LEFT_LINK : u32 = 688014564;
pub const DIBUTTON_MECHA_ROTATE_RIGHT_LINK : u32 = 688014572;
pub const DIBUTTON_MECHA_FASTER_LINK : u32 = 688112864;
pub const DIBUTTON_MECHA_SLOWER_LINK : u32 = 688112872;
pub const DIBUTTON_MECHA_DEVICE : u32 = 687883518;
pub const DIBUTTON_MECHA_PAUSE : u32 = 687883516;
pub const DIAXIS_ANY_X_1 : u32 = 4278239745;
pub const DIAXIS_ANY_X_2 : u32 = 4278239746;
pub const DIAXIS_ANY_Y_1 : u32 = 4278272513;
pub const DIAXIS_ANY_Y_2 : u32 = 4278272514;
pub const DIAXIS_ANY_Z_1 : u32 = 4278305281;
pub const DIAXIS_ANY_Z_2 : u32 = 4278305282;
pub const DIAXIS_ANY_R_1 : u32 = 4278338049;
pub const DIAXIS_ANY_R_2 : u32 = 4278338050;
pub const DIAXIS_ANY_U_1 : u32 = 4278370817;
pub const DIAXIS_ANY_U_2 : u32 = 4278370818;
pub const DIAXIS_ANY_V_1 : u32 = 4278403585;
pub const DIAXIS_ANY_V_2 : u32 = 4278403586;
pub const DIAXIS_ANY_A_1 : u32 = 4278436353;
pub const DIAXIS_ANY_A_2 : u32 = 4278436354;
pub const DIAXIS_ANY_B_1 : u32 = 4278469121;
pub const DIAXIS_ANY_B_2 : u32 = 4278469122;
pub const DIAXIS_ANY_C_1 : u32 = 4278501889;
pub const DIAXIS_ANY_C_2 : u32 = 4278501890;
pub const DIAXIS_ANY_S_1 : u32 = 4278534657;
pub const DIAXIS_ANY_S_2 : u32 = 4278534658;
pub const DIAXIS_ANY_1 : u32 = 4278206977;
pub const DIAXIS_ANY_2 : u32 = 4278206978;
pub const DIAXIS_ANY_3 : u32 = 4278206979;
pub const DIAXIS_ANY_4 : u32 = 4278206980;
pub const DIPOV_ANY_1 : u32 = 4278208001;
pub const DIPOV_ANY_2 : u32 = 4278208002;
pub const DIPOV_ANY_3 : u32 = 4278208003;
pub const DIPOV_ANY_4 : u32 = 4278208004;
pub const JOY_PASSDRIVERDATA : i32 = 268435456;
pub const JOY_HWS_ISHEADTRACKER : i32 = 33554432;
pub const JOY_HWS_ISGAMEPORTDRIVER : i32 = 67108864;
pub const JOY_HWS_ISANALOGPORTDRIVER : i32 = 134217728;
pub const JOY_HWS_AUTOLOAD : i32 = 268435456;
pub const JOY_HWS_NODEVNODE : i32 = 536870912;
pub const JOY_HWS_ISGAMEPORTBUS : i32 = -2147483648;
pub const JOY_HWS_GAMEPORTBUSBUSY : i32 = 1;
pub const JOY_US_VOLATILE : i32 = 8;
pub const JOY_OEMPOLL_PASSDRIVERDATA : u32 = 7;
pub const DIRECTINPUT_VERSION : u32 = 2048;
pub const JOY_HW_NONE : u32 = 0;
pub const JOY_HW_CUSTOM : u32 = 1;
pub const JOY_HW_2A_2B_GENERIC : u32 = 2;
pub const JOY_HW_2A_4B_GENERIC : u32 = 3;
pub const JOY_HW_2B_GAMEPAD : u32 = 4;
pub const JOY_HW_2B_FLIGHTYOKE : u32 = 5;
pub const JOY_HW_2B_FLIGHTYOKETHROTTLE : u32 = 6;
pub const JOY_HW_3A_2B_GENERIC : u32 = 7;
pub const JOY_HW_3A_4B_GENERIC : u32 = 8;
pub const JOY_HW_4B_GAMEPAD : u32 = 9;
pub const JOY_HW_4B_FLIGHTYOKE : u32 = 10;
pub const JOY_HW_4B_FLIGHTYOKETHROTTLE : u32 = 11;
pub const JOY_HW_TWO_2A_2B_WITH_Y : u32 = 12;
pub const JOY_HW_LASTENTRY : u32 = 13;
pub const JOY_ISCAL_XY : i32 = 1;
pub const JOY_ISCAL_Z : i32 = 2;
pub const JOY_ISCAL_R : i32 = 4;
pub const JOY_ISCAL_U : i32 = 8;
pub const JOY_ISCAL_V : i32 = 16;
pub const JOY_ISCAL_POV : i32 = 32;
pub const JOY_POV_NUMDIRS : u32 = 4;
pub const JOY_POVVAL_FORWARD : u32 = 0;
pub const JOY_POVVAL_BACKWARD : u32 = 1;
pub const JOY_POVVAL_LEFT : u32 = 2;
pub const JOY_POVVAL_RIGHT : u32 = 3;
pub const JOY_HWS_HASZ : i32 = 1;
pub const JOY_HWS_HASPOV : i32 = 2;
pub const JOY_HWS_POVISBUTTONCOMBOS : i32 = 4;
pub const JOY_HWS_POVISPOLL : i32 = 8;
pub const JOY_HWS_ISYOKE : i32 = 16;
pub const JOY_HWS_ISGAMEPAD : i32 = 32;
pub const JOY_HWS_ISCARCTRL : i32 = 64;
pub const JOY_HWS_XISJ1Y : i32 = 128;
pub const JOY_HWS_XISJ2X : i32 = 256;
pub const JOY_HWS_XISJ2Y : i32 = 512;
pub const JOY_HWS_YISJ1X : i32 = 1024;
pub const JOY_HWS_YISJ2X : i32 = 2048;
pub const JOY_HWS_YISJ2Y : i32 = 4096;
pub const JOY_HWS_ZISJ1X : i32 = 8192;
pub const JOY_HWS_ZISJ1Y : i32 = 16384;
pub const JOY_HWS_ZISJ2X : i32 = 32768;
pub const JOY_HWS_POVISJ1X : i32 = 65536;
pub const JOY_HWS_POVISJ1Y : i32 = 131072;
pub const JOY_HWS_POVISJ2X : i32 = 262144;
pub const JOY_HWS_HASR : i32 = 524288;
pub const JOY_HWS_RISJ1X : i32 = 1048576;
pub const JOY_HWS_RISJ1Y : i32 = 2097152;
pub const JOY_HWS_RISJ2Y : i32 = 4194304;
pub const JOY_HWS_HASU : i32 = 8388608;
pub const JOY_HWS_HASV : i32 = 16777216;
pub const JOY_US_HASRUDDER : i32 = 1;
pub const JOY_US_PRESENT : i32 = 2;
pub const JOY_US_ISOEM : i32 = 4;
pub const JOY_US_RESERVED : i32 = -2147483648;
pub const JOYTYPE_ZEROGAMEENUMOEMDATA : i32 = 1;
pub const JOYTYPE_NOAUTODETECTGAMEPORT : i32 = 2;
pub const JOYTYPE_NOHIDDIRECT : i32 = 4;
pub const JOYTYPE_ANALOGCOMPAT : i32 = 8;
pub const JOYTYPE_DEFAULTPROPSHEET : i32 = -2147483648;
pub const JOYTYPE_DEVICEHIDE : i32 = 65536;
pub const JOYTYPE_MOUSEHIDE : i32 = 131072;
pub const JOYTYPE_KEYBHIDE : i32 = 262144;
pub const JOYTYPE_GAMEHIDE : i32 = 524288;
pub const JOYTYPE_HIDEACTIVE : i32 = 1048576;
pub const JOYTYPE_INFOMASK : i32 = 14680064;
pub const JOYTYPE_INFODEFAULT : i32 = 0;
pub const JOYTYPE_INFOYYPEDALS : i32 = 2097152;
pub const JOYTYPE_INFOZYPEDALS : i32 = 4194304;
pub const JOYTYPE_INFOYRPEDALS : i32 = 6291456;
pub const JOYTYPE_INFOZRPEDALS : i32 = 8388608;
pub const JOYTYPE_INFOZISSLIDER : i32 = 2097152;
pub const JOYTYPE_INFOZISZ : i32 = 4194304;
pub const JOYTYPE_ENABLEINPUTREPORT : i32 = 16777216;
pub const MAX_JOYSTRING : u32 = 256;
pub const MAX_JOYSTICKOEMVXDNAME : u32 = 260;
pub const DITC_REGHWSETTINGS : u32 = 1;
pub const DITC_CLSIDCONFIG : u32 = 2;
pub const DITC_DISPLAYNAME : u32 = 4;
pub const DITC_CALLOUT : u32 = 8;
pub const DITC_HARDWAREID : u32 = 16;
pub const DITC_FLAGS1 : u32 = 32;
pub const DITC_FLAGS2 : u32 = 64;
pub const DITC_MAPFILE : u32 = 128;
pub const DIJC_GUIDINSTANCE : u32 = 1;
pub const DIJC_REGHWCONFIGTYPE : u32 = 2;
pub const DIJC_GAIN : u32 = 4;
pub const DIJC_CALLOUT : u32 = 8;
pub const DIJC_WDMGAMEPORT : u32 = 16;
pub const DIJU_USERVALUES : u32 = 1;
pub const DIJU_GLOBALDRIVER : u32 = 2;
pub const DIJU_GAMEPORTEMULATOR : u32 = 4;
pub const GUID_KeyboardClass = @import("../zig.zig").Guid.initString("4d36e96b-e325-11ce-bfc1-08002be10318");
pub const GUID_MediaClass = @import("../zig.zig").Guid.initString("4d36e96c-e325-11ce-bfc1-08002be10318");
pub const GUID_MouseClass = @import("../zig.zig").Guid.initString("4d36e96f-e325-11ce-bfc1-08002be10318");
pub const GUID_HIDClass = @import("../zig.zig").Guid.initString("745a17a0-74d3-11d0-b6fe-00a0c90f57da");
pub const DIMSGWP_NEWAPPSTART : u32 = 1;
pub const DIMSGWP_DX8APPSTART : u32 = 2;
pub const DIMSGWP_DX8MAPPERAPPSTART : u32 = 3;
pub const DIAPPIDFLAG_NOTIME : u32 = 1;
pub const DIAPPIDFLAG_NOSIZE : u32 = 2;
pub const DIERR_DRIVERFIRST : i32 = -2147220736;
pub const DIERR_DRIVERLAST : i32 = -2147220481;
pub const DIERR_INVALIDCLASSINSTALLER : i32 = -2147220480;
pub const DIERR_CANCELLED : i32 = -2147220479;
pub const DIERR_BADINF : i32 = -2147220478;
pub const DIDIFT_DELETE : u32 = 16777216;
pub const FACILITY_HID_ERROR_CODE : u32 = 17;

//--------------------------------------------------------------------------------
// Section: Types (128)
//--------------------------------------------------------------------------------
pub const JOYREGHWVALUES = extern struct {
    jrvHardware: joyrange_tag,
    dwPOVValues: [4]u32,
    dwCalFlags: u32,
};

pub const DICONSTANTFORCE = extern struct {
    lMagnitude: i32,
};

pub const DIRAMPFORCE = extern struct {
    lStart: i32,
    lEnd: i32,
};

pub const DIPERIODIC = extern struct {
    dwMagnitude: u32,
    lOffset: i32,
    dwPhase: u32,
    dwPeriod: u32,
};

pub const DICONDITION = extern struct {
    lOffset: i32,
    lPositiveCoefficient: i32,
    lNegativeCoefficient: i32,
    dwPositiveSaturation: u32,
    dwNegativeSaturation: u32,
    lDeadBand: i32,
};

pub const DICUSTOMFORCE = extern struct {
    cChannels: u32,
    dwSamplePeriod: u32,
    cSamples: u32,
    rglForceData: *i32,
};

pub const DIENVELOPE = extern struct {
    dwSize: u32,
    dwAttackLevel: u32,
    dwAttackTime: u32,
    dwFadeLevel: u32,
    dwFadeTime: u32,
};

pub const DIEFFECT_DX5 = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwDuration: u32,
    dwSamplePeriod: u32,
    dwGain: u32,
    dwTriggerButton: u32,
    dwTriggerRepeatInterval: u32,
    cAxes: u32,
    rgdwAxes: *u32,
    rglDirection: *i32,
    lpEnvelope: *DIENVELOPE,
    cbTypeSpecificParams: u32,
    lpvTypeSpecificParams: *c_void,
};

pub const DIEFFECT = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwDuration: u32,
    dwSamplePeriod: u32,
    dwGain: u32,
    dwTriggerButton: u32,
    dwTriggerRepeatInterval: u32,
    cAxes: u32,
    rgdwAxes: *u32,
    rglDirection: *i32,
    lpEnvelope: *DIENVELOPE,
    cbTypeSpecificParams: u32,
    lpvTypeSpecificParams: *c_void,
    dwStartDelay: u32,
};

pub const DIFILEEFFECT = extern struct {
    dwSize: u32,
    GuidEffect: Guid,
    lpDiEffect: *DIEFFECT,
    szFriendlyName: [260]i8,
};

pub const LPDIENUMEFFECTSINFILECALLBACK = fn(
    param0: *DIFILEEFFECT,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DIEFFESCAPE = extern struct {
    dwSize: u32,
    dwCommand: u32,
    lpvInBuffer: *c_void,
    cbInBuffer: u32,
    lpvOutBuffer: *c_void,
    cbOutBuffer: u32,
};

const IID_IDirectInputEffect_Value = @import("../zig.zig").Guid.initString("e7e1f7c0-88d2-11d0-9ad0-00a0c9a06e35");
pub const IID_IDirectInputEffect = &IID_IDirectInputEffect_Value;
pub const IDirectInputEffect = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IDirectInputEffect,
            param0: HINSTANCE,
            param1: u32,
            param2: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectGuid: fn(
            self: *const IDirectInputEffect,
            param0: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParameters: fn(
            self: *const IDirectInputEffect,
            param0: *DIEFFECT,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParameters: fn(
            self: *const IDirectInputEffect,
            param0: *DIEFFECT,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Start: fn(
            self: *const IDirectInputEffect,
            param0: u32,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: fn(
            self: *const IDirectInputEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectStatus: fn(
            self: *const IDirectInputEffect,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Download: fn(
            self: *const IDirectInputEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unload: fn(
            self: *const IDirectInputEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Escape: fn(
            self: *const IDirectInputEffect,
            param0: *DIEFFESCAPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_Initialize(self: *const T, param0: HINSTANCE, param1: u32, param2: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).Initialize(@ptrCast(*const IDirectInputEffect, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_GetEffectGuid(self: *const T, param0: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).GetEffectGuid(@ptrCast(*const IDirectInputEffect, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_GetParameters(self: *const T, param0: *DIEFFECT, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).GetParameters(@ptrCast(*const IDirectInputEffect, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_SetParameters(self: *const T, param0: *DIEFFECT, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).SetParameters(@ptrCast(*const IDirectInputEffect, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_Start(self: *const T, param0: u32, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).Start(@ptrCast(*const IDirectInputEffect, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_Stop(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).Stop(@ptrCast(*const IDirectInputEffect, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_GetEffectStatus(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).GetEffectStatus(@ptrCast(*const IDirectInputEffect, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_Download(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).Download(@ptrCast(*const IDirectInputEffect, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_Unload(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).Unload(@ptrCast(*const IDirectInputEffect, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_Escape(self: *const T, param0: *DIEFFESCAPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).Escape(@ptrCast(*const IDirectInputEffect, self), param0);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DIDEVCAPS_DX3 = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwDevType: u32,
    dwAxes: u32,
    dwButtons: u32,
    dwPOVs: u32,
};

pub const DIDEVCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwDevType: u32,
    dwAxes: u32,
    dwButtons: u32,
    dwPOVs: u32,
    dwFFSamplePeriod: u32,
    dwFFMinTimeResolution: u32,
    dwFirmwareRevision: u32,
    dwHardwareRevision: u32,
    dwFFDriverVersion: u32,
};

pub const DIOBJECTDATAFORMAT = extern struct {
    pguid: *const Guid,
    dwOfs: u32,
    dwType: u32,
    dwFlags: u32,
};

pub const DIDATAFORMAT = extern struct {
    dwSize: u32,
    dwObjSize: u32,
    dwFlags: u32,
    dwDataSize: u32,
    dwNumObjs: u32,
    rgodf: *DIOBJECTDATAFORMAT,
};

pub const DIACTIONA = extern struct {
    uAppData: ?*c_void,
    dwSemantic: u32,
    dwFlags: u32,
    Anonymous: DIACTIONA._Anonymous_e__Union,
    guidInstance: Guid,
    dwObjID: u32,
    dwHow: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DIACTIONW = extern struct {
    uAppData: ?*c_void,
    dwSemantic: u32,
    dwFlags: u32,
    Anonymous: DIACTIONW._Anonymous_e__Union,
    guidInstance: Guid,
    dwObjID: u32,
    dwHow: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DIACTIONFORMATA = extern struct {
    dwSize: u32,
    dwActionSize: u32,
    dwDataSize: u32,
    dwNumActions: u32,
    rgoAction: *DIACTIONA,
    guidActionMap: Guid,
    dwGenre: u32,
    dwBufferSize: u32,
    lAxisMin: i32,
    lAxisMax: i32,
    hInstString: HINSTANCE,
    ftTimeStamp: FILETIME,
    dwCRC: u32,
    tszActionMap: [260]i8,
};

pub const DIACTIONFORMATW = extern struct {
    dwSize: u32,
    dwActionSize: u32,
    dwDataSize: u32,
    dwNumActions: u32,
    rgoAction: *DIACTIONW,
    guidActionMap: Guid,
    dwGenre: u32,
    dwBufferSize: u32,
    lAxisMin: i32,
    lAxisMax: i32,
    hInstString: HINSTANCE,
    ftTimeStamp: FILETIME,
    dwCRC: u32,
    tszActionMap: [260]u16,
};

pub const DICOLORSET = extern struct {
    dwSize: u32,
    cTextFore: u32,
    cTextHighlight: u32,
    cCalloutLine: u32,
    cCalloutHighlight: u32,
    cBorder: u32,
    cControlFill: u32,
    cHighlightFill: u32,
    cAreaFill: u32,
};

pub const DICONFIGUREDEVICESPARAMSA = extern struct {
    dwSize: u32,
    dwcUsers: u32,
    lptszUserNames: PSTR,
    dwcFormats: u32,
    lprgFormats: *DIACTIONFORMATA,
    hwnd: HWND,
    dics: DICOLORSET,
    lpUnkDDSTarget: *IUnknown,
};

pub const DICONFIGUREDEVICESPARAMSW = extern struct {
    dwSize: u32,
    dwcUsers: u32,
    lptszUserNames: PWSTR,
    dwcFormats: u32,
    lprgFormats: *DIACTIONFORMATW,
    hwnd: HWND,
    dics: DICOLORSET,
    lpUnkDDSTarget: *IUnknown,
};

pub const DIDEVICEIMAGEINFOA = extern struct {
    tszImagePath: [260]i8,
    dwFlags: u32,
    dwViewID: u32,
    rcOverlay: RECT,
    dwObjID: u32,
    dwcValidPts: u32,
    rgptCalloutLine: [5]POINT,
    rcCalloutRect: RECT,
    dwTextAlign: u32,
};

pub const DIDEVICEIMAGEINFOW = extern struct {
    tszImagePath: [260]u16,
    dwFlags: u32,
    dwViewID: u32,
    rcOverlay: RECT,
    dwObjID: u32,
    dwcValidPts: u32,
    rgptCalloutLine: [5]POINT,
    rcCalloutRect: RECT,
    dwTextAlign: u32,
};

pub const DIDEVICEIMAGEINFOHEADERA = extern struct {
    dwSize: u32,
    dwSizeImageInfo: u32,
    dwcViews: u32,
    dwcButtons: u32,
    dwcAxes: u32,
    dwcPOVs: u32,
    dwBufferSize: u32,
    dwBufferUsed: u32,
    lprgImageInfoArray: *DIDEVICEIMAGEINFOA,
};

pub const DIDEVICEIMAGEINFOHEADERW = extern struct {
    dwSize: u32,
    dwSizeImageInfo: u32,
    dwcViews: u32,
    dwcButtons: u32,
    dwcAxes: u32,
    dwcPOVs: u32,
    dwBufferSize: u32,
    dwBufferUsed: u32,
    lprgImageInfoArray: *DIDEVICEIMAGEINFOW,
};

pub const DIDEVICEOBJECTINSTANCE_DX3A = extern struct {
    dwSize: u32,
    guidType: Guid,
    dwOfs: u32,
    dwType: u32,
    dwFlags: u32,
    tszName: [260]i8,
};

pub const DIDEVICEOBJECTINSTANCE_DX3W = extern struct {
    dwSize: u32,
    guidType: Guid,
    dwOfs: u32,
    dwType: u32,
    dwFlags: u32,
    tszName: [260]u16,
};

pub const DIDEVICEOBJECTINSTANCEA = extern struct {
    dwSize: u32,
    guidType: Guid,
    dwOfs: u32,
    dwType: u32,
    dwFlags: u32,
    tszName: [260]i8,
    dwFFMaxForce: u32,
    dwFFForceResolution: u32,
    wCollectionNumber: u16,
    wDesignatorIndex: u16,
    wUsagePage: u16,
    wUsage: u16,
    dwDimension: u32,
    wExponent: u16,
    wReportId: u16,
};

pub const DIDEVICEOBJECTINSTANCEW = extern struct {
    dwSize: u32,
    guidType: Guid,
    dwOfs: u32,
    dwType: u32,
    dwFlags: u32,
    tszName: [260]u16,
    dwFFMaxForce: u32,
    dwFFForceResolution: u32,
    wCollectionNumber: u16,
    wDesignatorIndex: u16,
    wUsagePage: u16,
    wUsage: u16,
    dwDimension: u32,
    wExponent: u16,
    wReportId: u16,
};

pub const LPDIENUMDEVICEOBJECTSCALLBACKA = fn(
    param0: *DIDEVICEOBJECTINSTANCEA,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDIENUMDEVICEOBJECTSCALLBACKW = fn(
    param0: *DIDEVICEOBJECTINSTANCEW,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DIPROPHEADER = extern struct {
    dwSize: u32,
    dwHeaderSize: u32,
    dwObj: u32,
    dwHow: u32,
};

pub const DIPROPDWORD = extern struct {
    diph: DIPROPHEADER,
    dwData: u32,
};

pub const DIPROPPOINTER = extern struct {
    diph: DIPROPHEADER,
    uData: ?*c_void,
};

pub const DIPROPRANGE = extern struct {
    diph: DIPROPHEADER,
    lMin: i32,
    lMax: i32,
};

pub const DIPROPCAL = extern struct {
    diph: DIPROPHEADER,
    lMin: i32,
    lCenter: i32,
    lMax: i32,
};

pub const DIPROPCALPOV = extern struct {
    diph: DIPROPHEADER,
    lMin: [5]i32,
    lMax: [5]i32,
};

pub const DIPROPGUIDANDPATH = extern struct {
    diph: DIPROPHEADER,
    guidClass: Guid,
    wszPath: [260]u16,
};

pub const DIPROPSTRING = extern struct {
    diph: DIPROPHEADER,
    wsz: [260]u16,
};

pub const CPOINT = extern struct {
    lP: i32,
    dwLog: u32,
};

pub const DIPROPCPOINTS = extern struct {
    diph: DIPROPHEADER,
    dwCPointsNum: u32,
    cp: [8]CPOINT,
};

pub const DIDEVICEOBJECTDATA_DX3 = extern struct {
    dwOfs: u32,
    dwData: u32,
    dwTimeStamp: u32,
    dwSequence: u32,
};

pub const DIDEVICEOBJECTDATA = extern struct {
    dwOfs: u32,
    dwData: u32,
    dwTimeStamp: u32,
    dwSequence: u32,
    uAppData: ?*c_void,
};

pub const DIDEVICEINSTANCE_DX3A = extern struct {
    dwSize: u32,
    guidInstance: Guid,
    guidProduct: Guid,
    dwDevType: u32,
    tszInstanceName: [260]i8,
    tszProductName: [260]i8,
};

pub const DIDEVICEINSTANCE_DX3W = extern struct {
    dwSize: u32,
    guidInstance: Guid,
    guidProduct: Guid,
    dwDevType: u32,
    tszInstanceName: [260]u16,
    tszProductName: [260]u16,
};

pub const DIDEVICEINSTANCEA = extern struct {
    dwSize: u32,
    guidInstance: Guid,
    guidProduct: Guid,
    dwDevType: u32,
    tszInstanceName: [260]i8,
    tszProductName: [260]i8,
    guidFFDriver: Guid,
    wUsagePage: u16,
    wUsage: u16,
};

pub const DIDEVICEINSTANCEW = extern struct {
    dwSize: u32,
    guidInstance: Guid,
    guidProduct: Guid,
    dwDevType: u32,
    tszInstanceName: [260]u16,
    tszProductName: [260]u16,
    guidFFDriver: Guid,
    wUsagePage: u16,
    wUsage: u16,
};

const IID_IDirectInputDeviceW_Value = @import("../zig.zig").Guid.initString("5944e681-c92e-11cf-bfc7-444553540000");
pub const IID_IDirectInputDeviceW = &IID_IDirectInputDeviceW_Value;
pub const IDirectInputDeviceW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCapabilities: fn(
            self: *const IDirectInputDeviceW,
            param0: *DIDEVCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumObjects: fn(
            self: *const IDirectInputDeviceW,
            param0: LPDIENUMDEVICEOBJECTSCALLBACKW,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IDirectInputDeviceW,
            param0: *const Guid,
            param1: *DIPROPHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IDirectInputDeviceW,
            param0: *const Guid,
            param1: *DIPROPHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Acquire: fn(
            self: *const IDirectInputDeviceW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unacquire: fn(
            self: *const IDirectInputDeviceW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceState: fn(
            self: *const IDirectInputDeviceW,
            param0: u32,
            param1: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceData: fn(
            self: *const IDirectInputDeviceW,
            param0: u32,
            param1: *DIDEVICEOBJECTDATA,
            param2: *u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDataFormat: fn(
            self: *const IDirectInputDeviceW,
            param0: *DIDATAFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEventNotification: fn(
            self: *const IDirectInputDeviceW,
            param0: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCooperativeLevel: fn(
            self: *const IDirectInputDeviceW,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectInfo: fn(
            self: *const IDirectInputDeviceW,
            param0: *DIDEVICEOBJECTINSTANCEW,
            param1: u32,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceInfo: fn(
            self: *const IDirectInputDeviceW,
            param0: *DIDEVICEINSTANCEW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunControlPanel: fn(
            self: *const IDirectInputDeviceW,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectInputDeviceW,
            param0: HINSTANCE,
            param1: u32,
            param2: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_GetCapabilities(self: *const T, param0: *DIDEVCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).GetCapabilities(@ptrCast(*const IDirectInputDeviceW, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_EnumObjects(self: *const T, param0: LPDIENUMDEVICEOBJECTSCALLBACKW, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).EnumObjects(@ptrCast(*const IDirectInputDeviceW, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_GetProperty(self: *const T, param0: *const Guid, param1: *DIPROPHEADER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).GetProperty(@ptrCast(*const IDirectInputDeviceW, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_SetProperty(self: *const T, param0: *const Guid, param1: *DIPROPHEADER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).SetProperty(@ptrCast(*const IDirectInputDeviceW, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_Acquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).Acquire(@ptrCast(*const IDirectInputDeviceW, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_Unacquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).Unacquire(@ptrCast(*const IDirectInputDeviceW, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_GetDeviceState(self: *const T, param0: u32, param1: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).GetDeviceState(@ptrCast(*const IDirectInputDeviceW, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_GetDeviceData(self: *const T, param0: u32, param1: *DIDEVICEOBJECTDATA, param2: *u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).GetDeviceData(@ptrCast(*const IDirectInputDeviceW, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_SetDataFormat(self: *const T, param0: *DIDATAFORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).SetDataFormat(@ptrCast(*const IDirectInputDeviceW, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_SetEventNotification(self: *const T, param0: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).SetEventNotification(@ptrCast(*const IDirectInputDeviceW, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_SetCooperativeLevel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).SetCooperativeLevel(@ptrCast(*const IDirectInputDeviceW, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_GetObjectInfo(self: *const T, param0: *DIDEVICEOBJECTINSTANCEW, param1: u32, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).GetObjectInfo(@ptrCast(*const IDirectInputDeviceW, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_GetDeviceInfo(self: *const T, param0: *DIDEVICEINSTANCEW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).GetDeviceInfo(@ptrCast(*const IDirectInputDeviceW, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_RunControlPanel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).RunControlPanel(@ptrCast(*const IDirectInputDeviceW, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_Initialize(self: *const T, param0: HINSTANCE, param1: u32, param2: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).Initialize(@ptrCast(*const IDirectInputDeviceW, self), param0, param1, param2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectInputDeviceA_Value = @import("../zig.zig").Guid.initString("5944e680-c92e-11cf-bfc7-444553540000");
pub const IID_IDirectInputDeviceA = &IID_IDirectInputDeviceA_Value;
pub const IDirectInputDeviceA = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCapabilities: fn(
            self: *const IDirectInputDeviceA,
            param0: *DIDEVCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumObjects: fn(
            self: *const IDirectInputDeviceA,
            param0: LPDIENUMDEVICEOBJECTSCALLBACKA,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IDirectInputDeviceA,
            param0: *const Guid,
            param1: *DIPROPHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IDirectInputDeviceA,
            param0: *const Guid,
            param1: *DIPROPHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Acquire: fn(
            self: *const IDirectInputDeviceA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unacquire: fn(
            self: *const IDirectInputDeviceA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceState: fn(
            self: *const IDirectInputDeviceA,
            param0: u32,
            param1: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceData: fn(
            self: *const IDirectInputDeviceA,
            param0: u32,
            param1: *DIDEVICEOBJECTDATA,
            param2: *u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDataFormat: fn(
            self: *const IDirectInputDeviceA,
            param0: *DIDATAFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEventNotification: fn(
            self: *const IDirectInputDeviceA,
            param0: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCooperativeLevel: fn(
            self: *const IDirectInputDeviceA,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectInfo: fn(
            self: *const IDirectInputDeviceA,
            param0: *DIDEVICEOBJECTINSTANCEA,
            param1: u32,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceInfo: fn(
            self: *const IDirectInputDeviceA,
            param0: *DIDEVICEINSTANCEA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunControlPanel: fn(
            self: *const IDirectInputDeviceA,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectInputDeviceA,
            param0: HINSTANCE,
            param1: u32,
            param2: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_GetCapabilities(self: *const T, param0: *DIDEVCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).GetCapabilities(@ptrCast(*const IDirectInputDeviceA, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_EnumObjects(self: *const T, param0: LPDIENUMDEVICEOBJECTSCALLBACKA, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).EnumObjects(@ptrCast(*const IDirectInputDeviceA, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_GetProperty(self: *const T, param0: *const Guid, param1: *DIPROPHEADER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).GetProperty(@ptrCast(*const IDirectInputDeviceA, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_SetProperty(self: *const T, param0: *const Guid, param1: *DIPROPHEADER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).SetProperty(@ptrCast(*const IDirectInputDeviceA, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_Acquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).Acquire(@ptrCast(*const IDirectInputDeviceA, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_Unacquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).Unacquire(@ptrCast(*const IDirectInputDeviceA, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_GetDeviceState(self: *const T, param0: u32, param1: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).GetDeviceState(@ptrCast(*const IDirectInputDeviceA, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_GetDeviceData(self: *const T, param0: u32, param1: *DIDEVICEOBJECTDATA, param2: *u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).GetDeviceData(@ptrCast(*const IDirectInputDeviceA, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_SetDataFormat(self: *const T, param0: *DIDATAFORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).SetDataFormat(@ptrCast(*const IDirectInputDeviceA, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_SetEventNotification(self: *const T, param0: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).SetEventNotification(@ptrCast(*const IDirectInputDeviceA, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_SetCooperativeLevel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).SetCooperativeLevel(@ptrCast(*const IDirectInputDeviceA, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_GetObjectInfo(self: *const T, param0: *DIDEVICEOBJECTINSTANCEA, param1: u32, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).GetObjectInfo(@ptrCast(*const IDirectInputDeviceA, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_GetDeviceInfo(self: *const T, param0: *DIDEVICEINSTANCEA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).GetDeviceInfo(@ptrCast(*const IDirectInputDeviceA, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_RunControlPanel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).RunControlPanel(@ptrCast(*const IDirectInputDeviceA, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_Initialize(self: *const T, param0: HINSTANCE, param1: u32, param2: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).Initialize(@ptrCast(*const IDirectInputDeviceA, self), param0, param1, param2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DIEFFECTINFOA = extern struct {
    dwSize: u32,
    guid: Guid,
    dwEffType: u32,
    dwStaticParams: u32,
    dwDynamicParams: u32,
    tszName: [260]i8,
};

pub const DIEFFECTINFOW = extern struct {
    dwSize: u32,
    guid: Guid,
    dwEffType: u32,
    dwStaticParams: u32,
    dwDynamicParams: u32,
    tszName: [260]u16,
};

pub const LPDIENUMEFFECTSCALLBACKA = fn(
    param0: *DIEFFECTINFOA,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDIENUMEFFECTSCALLBACKW = fn(
    param0: *DIEFFECTINFOW,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDIENUMCREATEDEFFECTOBJECTSCALLBACK = fn(
    param0: *IDirectInputEffect,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

const IID_IDirectInputDevice2W_Value = @import("../zig.zig").Guid.initString("5944e683-c92e-11cf-bfc7-444553540000");
pub const IID_IDirectInputDevice2W = &IID_IDirectInputDevice2W_Value;
pub const IDirectInputDevice2W = extern struct {
    pub const VTable = extern struct {
        base: IDirectInputDeviceW.VTable,
        CreateEffect: fn(
            self: *const IDirectInputDevice2W,
            param0: *const Guid,
            param1: *DIEFFECT,
            param2: **IDirectInputEffect,
            param3: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumEffects: fn(
            self: *const IDirectInputDevice2W,
            param0: LPDIENUMEFFECTSCALLBACKW,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectInfo: fn(
            self: *const IDirectInputDevice2W,
            param0: *DIEFFECTINFOW,
            param1: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForceFeedbackState: fn(
            self: *const IDirectInputDevice2W,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendForceFeedbackCommand: fn(
            self: *const IDirectInputDevice2W,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCreatedEffectObjects: fn(
            self: *const IDirectInputDevice2W,
            param0: LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Escape: fn(
            self: *const IDirectInputDevice2W,
            param0: *DIEFFESCAPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Poll: fn(
            self: *const IDirectInputDevice2W,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendDeviceData: fn(
            self: *const IDirectInputDevice2W,
            param0: u32,
            param1: *DIDEVICEOBJECTDATA,
            param2: *u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectInputDeviceW.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2W_CreateEffect(self: *const T, param0: *const Guid, param1: *DIEFFECT, param2: **IDirectInputEffect, param3: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2W.VTable, self.vtable).CreateEffect(@ptrCast(*const IDirectInputDevice2W, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2W_EnumEffects(self: *const T, param0: LPDIENUMEFFECTSCALLBACKW, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2W.VTable, self.vtable).EnumEffects(@ptrCast(*const IDirectInputDevice2W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2W_GetEffectInfo(self: *const T, param0: *DIEFFECTINFOW, param1: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2W.VTable, self.vtable).GetEffectInfo(@ptrCast(*const IDirectInputDevice2W, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2W_GetForceFeedbackState(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2W.VTable, self.vtable).GetForceFeedbackState(@ptrCast(*const IDirectInputDevice2W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2W_SendForceFeedbackCommand(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2W.VTable, self.vtable).SendForceFeedbackCommand(@ptrCast(*const IDirectInputDevice2W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2W_EnumCreatedEffectObjects(self: *const T, param0: LPDIENUMCREATEDEFFECTOBJECTSCALLBACK, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2W.VTable, self.vtable).EnumCreatedEffectObjects(@ptrCast(*const IDirectInputDevice2W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2W_Escape(self: *const T, param0: *DIEFFESCAPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2W.VTable, self.vtable).Escape(@ptrCast(*const IDirectInputDevice2W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2W_Poll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2W.VTable, self.vtable).Poll(@ptrCast(*const IDirectInputDevice2W, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2W_SendDeviceData(self: *const T, param0: u32, param1: *DIDEVICEOBJECTDATA, param2: *u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2W.VTable, self.vtable).SendDeviceData(@ptrCast(*const IDirectInputDevice2W, self), param0, param1, param2, param3);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectInputDevice2A_Value = @import("../zig.zig").Guid.initString("5944e682-c92e-11cf-bfc7-444553540000");
pub const IID_IDirectInputDevice2A = &IID_IDirectInputDevice2A_Value;
pub const IDirectInputDevice2A = extern struct {
    pub const VTable = extern struct {
        base: IDirectInputDeviceA.VTable,
        CreateEffect: fn(
            self: *const IDirectInputDevice2A,
            param0: *const Guid,
            param1: *DIEFFECT,
            param2: **IDirectInputEffect,
            param3: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumEffects: fn(
            self: *const IDirectInputDevice2A,
            param0: LPDIENUMEFFECTSCALLBACKA,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectInfo: fn(
            self: *const IDirectInputDevice2A,
            param0: *DIEFFECTINFOA,
            param1: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForceFeedbackState: fn(
            self: *const IDirectInputDevice2A,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendForceFeedbackCommand: fn(
            self: *const IDirectInputDevice2A,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCreatedEffectObjects: fn(
            self: *const IDirectInputDevice2A,
            param0: LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Escape: fn(
            self: *const IDirectInputDevice2A,
            param0: *DIEFFESCAPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Poll: fn(
            self: *const IDirectInputDevice2A,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendDeviceData: fn(
            self: *const IDirectInputDevice2A,
            param0: u32,
            param1: *DIDEVICEOBJECTDATA,
            param2: *u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectInputDeviceA.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2A_CreateEffect(self: *const T, param0: *const Guid, param1: *DIEFFECT, param2: **IDirectInputEffect, param3: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2A.VTable, self.vtable).CreateEffect(@ptrCast(*const IDirectInputDevice2A, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2A_EnumEffects(self: *const T, param0: LPDIENUMEFFECTSCALLBACKA, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2A.VTable, self.vtable).EnumEffects(@ptrCast(*const IDirectInputDevice2A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2A_GetEffectInfo(self: *const T, param0: *DIEFFECTINFOA, param1: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2A.VTable, self.vtable).GetEffectInfo(@ptrCast(*const IDirectInputDevice2A, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2A_GetForceFeedbackState(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2A.VTable, self.vtable).GetForceFeedbackState(@ptrCast(*const IDirectInputDevice2A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2A_SendForceFeedbackCommand(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2A.VTable, self.vtable).SendForceFeedbackCommand(@ptrCast(*const IDirectInputDevice2A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2A_EnumCreatedEffectObjects(self: *const T, param0: LPDIENUMCREATEDEFFECTOBJECTSCALLBACK, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2A.VTable, self.vtable).EnumCreatedEffectObjects(@ptrCast(*const IDirectInputDevice2A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2A_Escape(self: *const T, param0: *DIEFFESCAPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2A.VTable, self.vtable).Escape(@ptrCast(*const IDirectInputDevice2A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2A_Poll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2A.VTable, self.vtable).Poll(@ptrCast(*const IDirectInputDevice2A, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2A_SendDeviceData(self: *const T, param0: u32, param1: *DIDEVICEOBJECTDATA, param2: *u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2A.VTable, self.vtable).SendDeviceData(@ptrCast(*const IDirectInputDevice2A, self), param0, param1, param2, param3);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectInputDevice7W_Value = @import("../zig.zig").Guid.initString("57d7c6bd-2356-11d3-8e9d-00c04f6844ae");
pub const IID_IDirectInputDevice7W = &IID_IDirectInputDevice7W_Value;
pub const IDirectInputDevice7W = extern struct {
    pub const VTable = extern struct {
        base: IDirectInputDevice2W.VTable,
        EnumEffectsInFile: fn(
            self: *const IDirectInputDevice7W,
            param0: [*:0]const u16,
            param1: LPDIENUMEFFECTSINFILECALLBACK,
            param2: *c_void,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteEffectToFile: fn(
            self: *const IDirectInputDevice7W,
            param0: [*:0]const u16,
            param1: u32,
            param2: *DIFILEEFFECT,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectInputDevice2W.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice7W_EnumEffectsInFile(self: *const T, param0: [*:0]const u16, param1: LPDIENUMEFFECTSINFILECALLBACK, param2: *c_void, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice7W.VTable, self.vtable).EnumEffectsInFile(@ptrCast(*const IDirectInputDevice7W, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice7W_WriteEffectToFile(self: *const T, param0: [*:0]const u16, param1: u32, param2: *DIFILEEFFECT, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice7W.VTable, self.vtable).WriteEffectToFile(@ptrCast(*const IDirectInputDevice7W, self), param0, param1, param2, param3);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectInputDevice7A_Value = @import("../zig.zig").Guid.initString("57d7c6bc-2356-11d3-8e9d-00c04f6844ae");
pub const IID_IDirectInputDevice7A = &IID_IDirectInputDevice7A_Value;
pub const IDirectInputDevice7A = extern struct {
    pub const VTable = extern struct {
        base: IDirectInputDevice2A.VTable,
        EnumEffectsInFile: fn(
            self: *const IDirectInputDevice7A,
            param0: [*:0]const u8,
            param1: LPDIENUMEFFECTSINFILECALLBACK,
            param2: *c_void,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteEffectToFile: fn(
            self: *const IDirectInputDevice7A,
            param0: [*:0]const u8,
            param1: u32,
            param2: *DIFILEEFFECT,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectInputDevice2A.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice7A_EnumEffectsInFile(self: *const T, param0: [*:0]const u8, param1: LPDIENUMEFFECTSINFILECALLBACK, param2: *c_void, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice7A.VTable, self.vtable).EnumEffectsInFile(@ptrCast(*const IDirectInputDevice7A, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice7A_WriteEffectToFile(self: *const T, param0: [*:0]const u8, param1: u32, param2: *DIFILEEFFECT, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice7A.VTable, self.vtable).WriteEffectToFile(@ptrCast(*const IDirectInputDevice7A, self), param0, param1, param2, param3);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectInputDevice8W_Value = @import("../zig.zig").Guid.initString("54d41081-dc15-4833-a41b-748f73a38179");
pub const IID_IDirectInputDevice8W = &IID_IDirectInputDevice8W_Value;
pub const IDirectInputDevice8W = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCapabilities: fn(
            self: *const IDirectInputDevice8W,
            param0: *DIDEVCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumObjects: fn(
            self: *const IDirectInputDevice8W,
            param0: LPDIENUMDEVICEOBJECTSCALLBACKW,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IDirectInputDevice8W,
            param0: *const Guid,
            param1: *DIPROPHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IDirectInputDevice8W,
            param0: *const Guid,
            param1: *DIPROPHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Acquire: fn(
            self: *const IDirectInputDevice8W,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unacquire: fn(
            self: *const IDirectInputDevice8W,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceState: fn(
            self: *const IDirectInputDevice8W,
            param0: u32,
            param1: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceData: fn(
            self: *const IDirectInputDevice8W,
            param0: u32,
            param1: *DIDEVICEOBJECTDATA,
            param2: *u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDataFormat: fn(
            self: *const IDirectInputDevice8W,
            param0: *DIDATAFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEventNotification: fn(
            self: *const IDirectInputDevice8W,
            param0: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCooperativeLevel: fn(
            self: *const IDirectInputDevice8W,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectInfo: fn(
            self: *const IDirectInputDevice8W,
            param0: *DIDEVICEOBJECTINSTANCEW,
            param1: u32,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceInfo: fn(
            self: *const IDirectInputDevice8W,
            param0: *DIDEVICEINSTANCEW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunControlPanel: fn(
            self: *const IDirectInputDevice8W,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectInputDevice8W,
            param0: HINSTANCE,
            param1: u32,
            param2: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEffect: fn(
            self: *const IDirectInputDevice8W,
            param0: *const Guid,
            param1: *DIEFFECT,
            param2: **IDirectInputEffect,
            param3: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumEffects: fn(
            self: *const IDirectInputDevice8W,
            param0: LPDIENUMEFFECTSCALLBACKW,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectInfo: fn(
            self: *const IDirectInputDevice8W,
            param0: *DIEFFECTINFOW,
            param1: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForceFeedbackState: fn(
            self: *const IDirectInputDevice8W,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendForceFeedbackCommand: fn(
            self: *const IDirectInputDevice8W,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCreatedEffectObjects: fn(
            self: *const IDirectInputDevice8W,
            param0: LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Escape: fn(
            self: *const IDirectInputDevice8W,
            param0: *DIEFFESCAPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Poll: fn(
            self: *const IDirectInputDevice8W,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendDeviceData: fn(
            self: *const IDirectInputDevice8W,
            param0: u32,
            param1: *DIDEVICEOBJECTDATA,
            param2: *u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumEffectsInFile: fn(
            self: *const IDirectInputDevice8W,
            param0: [*:0]const u16,
            param1: LPDIENUMEFFECTSINFILECALLBACK,
            param2: *c_void,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteEffectToFile: fn(
            self: *const IDirectInputDevice8W,
            param0: [*:0]const u16,
            param1: u32,
            param2: *DIFILEEFFECT,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BuildActionMap: fn(
            self: *const IDirectInputDevice8W,
            param0: *DIACTIONFORMATW,
            param1: [*:0]const u16,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActionMap: fn(
            self: *const IDirectInputDevice8W,
            param0: *DIACTIONFORMATW,
            param1: [*:0]const u16,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImageInfo: fn(
            self: *const IDirectInputDevice8W,
            param0: *DIDEVICEIMAGEINFOHEADERW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_GetCapabilities(self: *const T, param0: *DIDEVCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).GetCapabilities(@ptrCast(*const IDirectInputDevice8W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_EnumObjects(self: *const T, param0: LPDIENUMDEVICEOBJECTSCALLBACKW, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).EnumObjects(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_GetProperty(self: *const T, param0: *const Guid, param1: *DIPROPHEADER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).GetProperty(@ptrCast(*const IDirectInputDevice8W, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_SetProperty(self: *const T, param0: *const Guid, param1: *DIPROPHEADER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).SetProperty(@ptrCast(*const IDirectInputDevice8W, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_Acquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).Acquire(@ptrCast(*const IDirectInputDevice8W, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_Unacquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).Unacquire(@ptrCast(*const IDirectInputDevice8W, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_GetDeviceState(self: *const T, param0: u32, param1: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).GetDeviceState(@ptrCast(*const IDirectInputDevice8W, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_GetDeviceData(self: *const T, param0: u32, param1: *DIDEVICEOBJECTDATA, param2: *u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).GetDeviceData(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_SetDataFormat(self: *const T, param0: *DIDATAFORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).SetDataFormat(@ptrCast(*const IDirectInputDevice8W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_SetEventNotification(self: *const T, param0: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).SetEventNotification(@ptrCast(*const IDirectInputDevice8W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_SetCooperativeLevel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).SetCooperativeLevel(@ptrCast(*const IDirectInputDevice8W, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_GetObjectInfo(self: *const T, param0: *DIDEVICEOBJECTINSTANCEW, param1: u32, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).GetObjectInfo(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_GetDeviceInfo(self: *const T, param0: *DIDEVICEINSTANCEW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).GetDeviceInfo(@ptrCast(*const IDirectInputDevice8W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_RunControlPanel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).RunControlPanel(@ptrCast(*const IDirectInputDevice8W, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_Initialize(self: *const T, param0: HINSTANCE, param1: u32, param2: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).Initialize(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_CreateEffect(self: *const T, param0: *const Guid, param1: *DIEFFECT, param2: **IDirectInputEffect, param3: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).CreateEffect(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_EnumEffects(self: *const T, param0: LPDIENUMEFFECTSCALLBACKW, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).EnumEffects(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_GetEffectInfo(self: *const T, param0: *DIEFFECTINFOW, param1: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).GetEffectInfo(@ptrCast(*const IDirectInputDevice8W, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_GetForceFeedbackState(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).GetForceFeedbackState(@ptrCast(*const IDirectInputDevice8W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_SendForceFeedbackCommand(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).SendForceFeedbackCommand(@ptrCast(*const IDirectInputDevice8W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_EnumCreatedEffectObjects(self: *const T, param0: LPDIENUMCREATEDEFFECTOBJECTSCALLBACK, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).EnumCreatedEffectObjects(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_Escape(self: *const T, param0: *DIEFFESCAPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).Escape(@ptrCast(*const IDirectInputDevice8W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_Poll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).Poll(@ptrCast(*const IDirectInputDevice8W, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_SendDeviceData(self: *const T, param0: u32, param1: *DIDEVICEOBJECTDATA, param2: *u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).SendDeviceData(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_EnumEffectsInFile(self: *const T, param0: [*:0]const u16, param1: LPDIENUMEFFECTSINFILECALLBACK, param2: *c_void, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).EnumEffectsInFile(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_WriteEffectToFile(self: *const T, param0: [*:0]const u16, param1: u32, param2: *DIFILEEFFECT, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).WriteEffectToFile(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_BuildActionMap(self: *const T, param0: *DIACTIONFORMATW, param1: [*:0]const u16, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).BuildActionMap(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_SetActionMap(self: *const T, param0: *DIACTIONFORMATW, param1: [*:0]const u16, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).SetActionMap(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_GetImageInfo(self: *const T, param0: *DIDEVICEIMAGEINFOHEADERW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).GetImageInfo(@ptrCast(*const IDirectInputDevice8W, self), param0);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectInputDevice8A_Value = @import("../zig.zig").Guid.initString("54d41080-dc15-4833-a41b-748f73a38179");
pub const IID_IDirectInputDevice8A = &IID_IDirectInputDevice8A_Value;
pub const IDirectInputDevice8A = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCapabilities: fn(
            self: *const IDirectInputDevice8A,
            param0: *DIDEVCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumObjects: fn(
            self: *const IDirectInputDevice8A,
            param0: LPDIENUMDEVICEOBJECTSCALLBACKA,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IDirectInputDevice8A,
            param0: *const Guid,
            param1: *DIPROPHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IDirectInputDevice8A,
            param0: *const Guid,
            param1: *DIPROPHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Acquire: fn(
            self: *const IDirectInputDevice8A,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unacquire: fn(
            self: *const IDirectInputDevice8A,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceState: fn(
            self: *const IDirectInputDevice8A,
            param0: u32,
            param1: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceData: fn(
            self: *const IDirectInputDevice8A,
            param0: u32,
            param1: *DIDEVICEOBJECTDATA,
            param2: *u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDataFormat: fn(
            self: *const IDirectInputDevice8A,
            param0: *DIDATAFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEventNotification: fn(
            self: *const IDirectInputDevice8A,
            param0: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCooperativeLevel: fn(
            self: *const IDirectInputDevice8A,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectInfo: fn(
            self: *const IDirectInputDevice8A,
            param0: *DIDEVICEOBJECTINSTANCEA,
            param1: u32,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceInfo: fn(
            self: *const IDirectInputDevice8A,
            param0: *DIDEVICEINSTANCEA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunControlPanel: fn(
            self: *const IDirectInputDevice8A,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectInputDevice8A,
            param0: HINSTANCE,
            param1: u32,
            param2: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEffect: fn(
            self: *const IDirectInputDevice8A,
            param0: *const Guid,
            param1: *DIEFFECT,
            param2: **IDirectInputEffect,
            param3: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumEffects: fn(
            self: *const IDirectInputDevice8A,
            param0: LPDIENUMEFFECTSCALLBACKA,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectInfo: fn(
            self: *const IDirectInputDevice8A,
            param0: *DIEFFECTINFOA,
            param1: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForceFeedbackState: fn(
            self: *const IDirectInputDevice8A,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendForceFeedbackCommand: fn(
            self: *const IDirectInputDevice8A,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCreatedEffectObjects: fn(
            self: *const IDirectInputDevice8A,
            param0: LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Escape: fn(
            self: *const IDirectInputDevice8A,
            param0: *DIEFFESCAPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Poll: fn(
            self: *const IDirectInputDevice8A,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendDeviceData: fn(
            self: *const IDirectInputDevice8A,
            param0: u32,
            param1: *DIDEVICEOBJECTDATA,
            param2: *u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumEffectsInFile: fn(
            self: *const IDirectInputDevice8A,
            param0: [*:0]const u8,
            param1: LPDIENUMEFFECTSINFILECALLBACK,
            param2: *c_void,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteEffectToFile: fn(
            self: *const IDirectInputDevice8A,
            param0: [*:0]const u8,
            param1: u32,
            param2: *DIFILEEFFECT,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BuildActionMap: fn(
            self: *const IDirectInputDevice8A,
            param0: *DIACTIONFORMATA,
            param1: [*:0]const u8,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActionMap: fn(
            self: *const IDirectInputDevice8A,
            param0: *DIACTIONFORMATA,
            param1: [*:0]const u8,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImageInfo: fn(
            self: *const IDirectInputDevice8A,
            param0: *DIDEVICEIMAGEINFOHEADERA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_GetCapabilities(self: *const T, param0: *DIDEVCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).GetCapabilities(@ptrCast(*const IDirectInputDevice8A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_EnumObjects(self: *const T, param0: LPDIENUMDEVICEOBJECTSCALLBACKA, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).EnumObjects(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_GetProperty(self: *const T, param0: *const Guid, param1: *DIPROPHEADER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).GetProperty(@ptrCast(*const IDirectInputDevice8A, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_SetProperty(self: *const T, param0: *const Guid, param1: *DIPROPHEADER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).SetProperty(@ptrCast(*const IDirectInputDevice8A, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_Acquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).Acquire(@ptrCast(*const IDirectInputDevice8A, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_Unacquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).Unacquire(@ptrCast(*const IDirectInputDevice8A, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_GetDeviceState(self: *const T, param0: u32, param1: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).GetDeviceState(@ptrCast(*const IDirectInputDevice8A, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_GetDeviceData(self: *const T, param0: u32, param1: *DIDEVICEOBJECTDATA, param2: *u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).GetDeviceData(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_SetDataFormat(self: *const T, param0: *DIDATAFORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).SetDataFormat(@ptrCast(*const IDirectInputDevice8A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_SetEventNotification(self: *const T, param0: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).SetEventNotification(@ptrCast(*const IDirectInputDevice8A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_SetCooperativeLevel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).SetCooperativeLevel(@ptrCast(*const IDirectInputDevice8A, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_GetObjectInfo(self: *const T, param0: *DIDEVICEOBJECTINSTANCEA, param1: u32, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).GetObjectInfo(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_GetDeviceInfo(self: *const T, param0: *DIDEVICEINSTANCEA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).GetDeviceInfo(@ptrCast(*const IDirectInputDevice8A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_RunControlPanel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).RunControlPanel(@ptrCast(*const IDirectInputDevice8A, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_Initialize(self: *const T, param0: HINSTANCE, param1: u32, param2: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).Initialize(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_CreateEffect(self: *const T, param0: *const Guid, param1: *DIEFFECT, param2: **IDirectInputEffect, param3: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).CreateEffect(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_EnumEffects(self: *const T, param0: LPDIENUMEFFECTSCALLBACKA, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).EnumEffects(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_GetEffectInfo(self: *const T, param0: *DIEFFECTINFOA, param1: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).GetEffectInfo(@ptrCast(*const IDirectInputDevice8A, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_GetForceFeedbackState(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).GetForceFeedbackState(@ptrCast(*const IDirectInputDevice8A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_SendForceFeedbackCommand(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).SendForceFeedbackCommand(@ptrCast(*const IDirectInputDevice8A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_EnumCreatedEffectObjects(self: *const T, param0: LPDIENUMCREATEDEFFECTOBJECTSCALLBACK, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).EnumCreatedEffectObjects(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_Escape(self: *const T, param0: *DIEFFESCAPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).Escape(@ptrCast(*const IDirectInputDevice8A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_Poll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).Poll(@ptrCast(*const IDirectInputDevice8A, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_SendDeviceData(self: *const T, param0: u32, param1: *DIDEVICEOBJECTDATA, param2: *u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).SendDeviceData(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_EnumEffectsInFile(self: *const T, param0: [*:0]const u8, param1: LPDIENUMEFFECTSINFILECALLBACK, param2: *c_void, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).EnumEffectsInFile(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_WriteEffectToFile(self: *const T, param0: [*:0]const u8, param1: u32, param2: *DIFILEEFFECT, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).WriteEffectToFile(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_BuildActionMap(self: *const T, param0: *DIACTIONFORMATA, param1: [*:0]const u8, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).BuildActionMap(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_SetActionMap(self: *const T, param0: *DIACTIONFORMATA, param1: [*:0]const u8, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).SetActionMap(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_GetImageInfo(self: *const T, param0: *DIDEVICEIMAGEINFOHEADERA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).GetImageInfo(@ptrCast(*const IDirectInputDevice8A, self), param0);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DIMOUSESTATE = extern struct {
    lX: i32,
    lY: i32,
    lZ: i32,
    rgbButtons: [4]u8,
};

pub const DIMOUSESTATE2 = extern struct {
    lX: i32,
    lY: i32,
    lZ: i32,
    rgbButtons: [8]u8,
};

pub const DIJOYSTATE = extern struct {
    lX: i32,
    lY: i32,
    lZ: i32,
    lRx: i32,
    lRy: i32,
    lRz: i32,
    rglSlider: [2]i32,
    rgdwPOV: [4]u32,
    rgbButtons: [32]u8,
};

pub const DIJOYSTATE2 = extern struct {
    lX: i32,
    lY: i32,
    lZ: i32,
    lRx: i32,
    lRy: i32,
    lRz: i32,
    rglSlider: [2]i32,
    rgdwPOV: [4]u32,
    rgbButtons: [128]u8,
    lVX: i32,
    lVY: i32,
    lVZ: i32,
    lVRx: i32,
    lVRy: i32,
    lVRz: i32,
    rglVSlider: [2]i32,
    lAX: i32,
    lAY: i32,
    lAZ: i32,
    lARx: i32,
    lARy: i32,
    lARz: i32,
    rglASlider: [2]i32,
    lFX: i32,
    lFY: i32,
    lFZ: i32,
    lFRx: i32,
    lFRy: i32,
    lFRz: i32,
    rglFSlider: [2]i32,
};

pub const LPDIENUMDEVICESCALLBACKA = fn(
    param0: *DIDEVICEINSTANCEA,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDIENUMDEVICESCALLBACKW = fn(
    param0: *DIDEVICEINSTANCEW,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDICONFIGUREDEVICESCALLBACK = fn(
    param0: *IUnknown,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDIENUMDEVICESBYSEMANTICSCBA = fn(
    param0: *DIDEVICEINSTANCEA,
    param1: *IDirectInputDevice8A,
    param2: u32,
    param3: u32,
    param4: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDIENUMDEVICESBYSEMANTICSCBW = fn(
    param0: *DIDEVICEINSTANCEW,
    param1: *IDirectInputDevice8W,
    param2: u32,
    param3: u32,
    param4: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

const IID_IDirectInputW_Value = @import("../zig.zig").Guid.initString("89521361-aa8a-11cf-bfc7-444553540000");
pub const IID_IDirectInputW = &IID_IDirectInputW_Value;
pub const IDirectInputW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateDevice: fn(
            self: *const IDirectInputW,
            param0: *const Guid,
            param1: **IDirectInputDeviceW,
            param2: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDevices: fn(
            self: *const IDirectInputW,
            param0: u32,
            param1: LPDIENUMDEVICESCALLBACKW,
            param2: *c_void,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceStatus: fn(
            self: *const IDirectInputW,
            param0: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunControlPanel: fn(
            self: *const IDirectInputW,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectInputW,
            param0: HINSTANCE,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputW_CreateDevice(self: *const T, param0: *const Guid, param1: **IDirectInputDeviceW, param2: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputW.VTable, self.vtable).CreateDevice(@ptrCast(*const IDirectInputW, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputW_EnumDevices(self: *const T, param0: u32, param1: LPDIENUMDEVICESCALLBACKW, param2: *c_void, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputW.VTable, self.vtable).EnumDevices(@ptrCast(*const IDirectInputW, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputW_GetDeviceStatus(self: *const T, param0: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputW.VTable, self.vtable).GetDeviceStatus(@ptrCast(*const IDirectInputW, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputW_RunControlPanel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputW.VTable, self.vtable).RunControlPanel(@ptrCast(*const IDirectInputW, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputW_Initialize(self: *const T, param0: HINSTANCE, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputW.VTable, self.vtable).Initialize(@ptrCast(*const IDirectInputW, self), param0, param1);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectInputA_Value = @import("../zig.zig").Guid.initString("89521360-aa8a-11cf-bfc7-444553540000");
pub const IID_IDirectInputA = &IID_IDirectInputA_Value;
pub const IDirectInputA = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateDevice: fn(
            self: *const IDirectInputA,
            param0: *const Guid,
            param1: **IDirectInputDeviceA,
            param2: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDevices: fn(
            self: *const IDirectInputA,
            param0: u32,
            param1: LPDIENUMDEVICESCALLBACKA,
            param2: *c_void,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceStatus: fn(
            self: *const IDirectInputA,
            param0: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunControlPanel: fn(
            self: *const IDirectInputA,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectInputA,
            param0: HINSTANCE,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputA_CreateDevice(self: *const T, param0: *const Guid, param1: **IDirectInputDeviceA, param2: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputA.VTable, self.vtable).CreateDevice(@ptrCast(*const IDirectInputA, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputA_EnumDevices(self: *const T, param0: u32, param1: LPDIENUMDEVICESCALLBACKA, param2: *c_void, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputA.VTable, self.vtable).EnumDevices(@ptrCast(*const IDirectInputA, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputA_GetDeviceStatus(self: *const T, param0: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputA.VTable, self.vtable).GetDeviceStatus(@ptrCast(*const IDirectInputA, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputA_RunControlPanel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputA.VTable, self.vtable).RunControlPanel(@ptrCast(*const IDirectInputA, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputA_Initialize(self: *const T, param0: HINSTANCE, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputA.VTable, self.vtable).Initialize(@ptrCast(*const IDirectInputA, self), param0, param1);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectInput2W_Value = @import("../zig.zig").Guid.initString("5944e663-aa8a-11cf-bfc7-444553540000");
pub const IID_IDirectInput2W = &IID_IDirectInput2W_Value;
pub const IDirectInput2W = extern struct {
    pub const VTable = extern struct {
        base: IDirectInputW.VTable,
        FindDevice: fn(
            self: *const IDirectInput2W,
            param0: *const Guid,
            param1: [*:0]const u16,
            param2: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectInputW.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput2W_FindDevice(self: *const T, param0: *const Guid, param1: [*:0]const u16, param2: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput2W.VTable, self.vtable).FindDevice(@ptrCast(*const IDirectInput2W, self), param0, param1, param2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectInput2A_Value = @import("../zig.zig").Guid.initString("5944e662-aa8a-11cf-bfc7-444553540000");
pub const IID_IDirectInput2A = &IID_IDirectInput2A_Value;
pub const IDirectInput2A = extern struct {
    pub const VTable = extern struct {
        base: IDirectInputA.VTable,
        FindDevice: fn(
            self: *const IDirectInput2A,
            param0: *const Guid,
            param1: [*:0]const u8,
            param2: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectInputA.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput2A_FindDevice(self: *const T, param0: *const Guid, param1: [*:0]const u8, param2: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput2A.VTable, self.vtable).FindDevice(@ptrCast(*const IDirectInput2A, self), param0, param1, param2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectInput7W_Value = @import("../zig.zig").Guid.initString("9a4cb685-236d-11d3-8e9d-00c04f6844ae");
pub const IID_IDirectInput7W = &IID_IDirectInput7W_Value;
pub const IDirectInput7W = extern struct {
    pub const VTable = extern struct {
        base: IDirectInput2W.VTable,
        CreateDeviceEx: fn(
            self: *const IDirectInput7W,
            param0: *const Guid,
            param1: *const Guid,
            param2: **c_void,
            param3: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectInput2W.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput7W_CreateDeviceEx(self: *const T, param0: *const Guid, param1: *const Guid, param2: **c_void, param3: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput7W.VTable, self.vtable).CreateDeviceEx(@ptrCast(*const IDirectInput7W, self), param0, param1, param2, param3);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectInput7A_Value = @import("../zig.zig").Guid.initString("9a4cb684-236d-11d3-8e9d-00c04f6844ae");
pub const IID_IDirectInput7A = &IID_IDirectInput7A_Value;
pub const IDirectInput7A = extern struct {
    pub const VTable = extern struct {
        base: IDirectInput2A.VTable,
        CreateDeviceEx: fn(
            self: *const IDirectInput7A,
            param0: *const Guid,
            param1: *const Guid,
            param2: **c_void,
            param3: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectInput2A.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput7A_CreateDeviceEx(self: *const T, param0: *const Guid, param1: *const Guid, param2: **c_void, param3: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput7A.VTable, self.vtable).CreateDeviceEx(@ptrCast(*const IDirectInput7A, self), param0, param1, param2, param3);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectInput8W_Value = @import("../zig.zig").Guid.initString("bf798031-483a-4da2-aa99-5d64ed369700");
pub const IID_IDirectInput8W = &IID_IDirectInput8W_Value;
pub const IDirectInput8W = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateDevice: fn(
            self: *const IDirectInput8W,
            param0: *const Guid,
            param1: **IDirectInputDevice8W,
            param2: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDevices: fn(
            self: *const IDirectInput8W,
            param0: u32,
            param1: LPDIENUMDEVICESCALLBACKW,
            param2: *c_void,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceStatus: fn(
            self: *const IDirectInput8W,
            param0: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunControlPanel: fn(
            self: *const IDirectInput8W,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectInput8W,
            param0: HINSTANCE,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindDevice: fn(
            self: *const IDirectInput8W,
            param0: *const Guid,
            param1: [*:0]const u16,
            param2: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDevicesBySemantics: fn(
            self: *const IDirectInput8W,
            param0: [*:0]const u16,
            param1: *DIACTIONFORMATW,
            param2: LPDIENUMDEVICESBYSEMANTICSCBW,
            param3: *c_void,
            param4: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConfigureDevices: fn(
            self: *const IDirectInput8W,
            param0: LPDICONFIGUREDEVICESCALLBACK,
            param1: *DICONFIGUREDEVICESPARAMSW,
            param2: u32,
            param3: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8W_CreateDevice(self: *const T, param0: *const Guid, param1: **IDirectInputDevice8W, param2: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8W.VTable, self.vtable).CreateDevice(@ptrCast(*const IDirectInput8W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8W_EnumDevices(self: *const T, param0: u32, param1: LPDIENUMDEVICESCALLBACKW, param2: *c_void, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8W.VTable, self.vtable).EnumDevices(@ptrCast(*const IDirectInput8W, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8W_GetDeviceStatus(self: *const T, param0: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8W.VTable, self.vtable).GetDeviceStatus(@ptrCast(*const IDirectInput8W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8W_RunControlPanel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8W.VTable, self.vtable).RunControlPanel(@ptrCast(*const IDirectInput8W, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8W_Initialize(self: *const T, param0: HINSTANCE, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8W.VTable, self.vtable).Initialize(@ptrCast(*const IDirectInput8W, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8W_FindDevice(self: *const T, param0: *const Guid, param1: [*:0]const u16, param2: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8W.VTable, self.vtable).FindDevice(@ptrCast(*const IDirectInput8W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8W_EnumDevicesBySemantics(self: *const T, param0: [*:0]const u16, param1: *DIACTIONFORMATW, param2: LPDIENUMDEVICESBYSEMANTICSCBW, param3: *c_void, param4: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8W.VTable, self.vtable).EnumDevicesBySemantics(@ptrCast(*const IDirectInput8W, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8W_ConfigureDevices(self: *const T, param0: LPDICONFIGUREDEVICESCALLBACK, param1: *DICONFIGUREDEVICESPARAMSW, param2: u32, param3: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8W.VTable, self.vtable).ConfigureDevices(@ptrCast(*const IDirectInput8W, self), param0, param1, param2, param3);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectInput8A_Value = @import("../zig.zig").Guid.initString("bf798030-483a-4da2-aa99-5d64ed369700");
pub const IID_IDirectInput8A = &IID_IDirectInput8A_Value;
pub const IDirectInput8A = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateDevice: fn(
            self: *const IDirectInput8A,
            param0: *const Guid,
            param1: **IDirectInputDevice8A,
            param2: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDevices: fn(
            self: *const IDirectInput8A,
            param0: u32,
            param1: LPDIENUMDEVICESCALLBACKA,
            param2: *c_void,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceStatus: fn(
            self: *const IDirectInput8A,
            param0: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunControlPanel: fn(
            self: *const IDirectInput8A,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectInput8A,
            param0: HINSTANCE,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindDevice: fn(
            self: *const IDirectInput8A,
            param0: *const Guid,
            param1: [*:0]const u8,
            param2: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDevicesBySemantics: fn(
            self: *const IDirectInput8A,
            param0: [*:0]const u8,
            param1: *DIACTIONFORMATA,
            param2: LPDIENUMDEVICESBYSEMANTICSCBA,
            param3: *c_void,
            param4: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConfigureDevices: fn(
            self: *const IDirectInput8A,
            param0: LPDICONFIGUREDEVICESCALLBACK,
            param1: *DICONFIGUREDEVICESPARAMSA,
            param2: u32,
            param3: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8A_CreateDevice(self: *const T, param0: *const Guid, param1: **IDirectInputDevice8A, param2: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8A.VTable, self.vtable).CreateDevice(@ptrCast(*const IDirectInput8A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8A_EnumDevices(self: *const T, param0: u32, param1: LPDIENUMDEVICESCALLBACKA, param2: *c_void, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8A.VTable, self.vtable).EnumDevices(@ptrCast(*const IDirectInput8A, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8A_GetDeviceStatus(self: *const T, param0: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8A.VTable, self.vtable).GetDeviceStatus(@ptrCast(*const IDirectInput8A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8A_RunControlPanel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8A.VTable, self.vtable).RunControlPanel(@ptrCast(*const IDirectInput8A, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8A_Initialize(self: *const T, param0: HINSTANCE, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8A.VTable, self.vtable).Initialize(@ptrCast(*const IDirectInput8A, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8A_FindDevice(self: *const T, param0: *const Guid, param1: [*:0]const u8, param2: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8A.VTable, self.vtable).FindDevice(@ptrCast(*const IDirectInput8A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8A_EnumDevicesBySemantics(self: *const T, param0: [*:0]const u8, param1: *DIACTIONFORMATA, param2: LPDIENUMDEVICESBYSEMANTICSCBA, param3: *c_void, param4: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8A.VTable, self.vtable).EnumDevicesBySemantics(@ptrCast(*const IDirectInput8A, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8A_ConfigureDevices(self: *const T, param0: LPDICONFIGUREDEVICESCALLBACK, param1: *DICONFIGUREDEVICESPARAMSA, param2: u32, param3: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8A.VTable, self.vtable).ConfigureDevices(@ptrCast(*const IDirectInput8A, self), param0, param1, param2, param3);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const LPFNSHOWJOYCPL = fn(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) void;

pub const DIOBJECTATTRIBUTES = extern struct {
    dwFlags: u32,
    wUsagePage: u16,
    wUsage: u16,
};

pub const DIFFOBJECTATTRIBUTES = extern struct {
    dwFFMaxForce: u32,
    dwFFForceResolution: u32,
};

pub const DIOBJECTCALIBRATION = extern struct {
    lMin: i32,
    lCenter: i32,
    lMax: i32,
};

pub const DIPOVCALIBRATION = extern struct {
    lMin: [5]i32,
    lMax: [5]i32,
};

pub const DIEFFECTATTRIBUTES = extern struct {
    dwEffectId: u32,
    dwEffType: u32,
    dwStaticParams: u32,
    dwDynamicParams: u32,
    dwCoords: u32,
};

pub const DIFFDEVICEATTRIBUTES = extern struct {
    dwFlags: u32,
    dwFFSamplePeriod: u32,
    dwFFMinTimeResolution: u32,
};

pub const DIDRIVERVERSIONS = extern struct {
    dwSize: u32,
    dwFirmwareRevision: u32,
    dwHardwareRevision: u32,
    dwFFDriverVersion: u32,
};

pub const DIDEVICESTATE = extern struct {
    dwSize: u32,
    dwState: u32,
    dwLoad: u32,
};

pub const DIHIDFFINITINFO = extern struct {
    dwSize: u32,
    pwszDeviceInterface: PWSTR,
    GuidInstance: Guid,
};

const IID_IDirectInputEffectDriver_Value = @import("../zig.zig").Guid.initString("02538130-898f-11d0-9ad0-00a0c9a06e35");
pub const IID_IDirectInputEffectDriver = &IID_IDirectInputEffectDriver_Value;
pub const IDirectInputEffectDriver = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DeviceID: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: u32,
            param2: u32,
            param3: u32,
            param4: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVersions: fn(
            self: *const IDirectInputEffectDriver,
            param0: *DIDRIVERVERSIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Escape: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: u32,
            param2: *DIEFFESCAPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGain: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendForceFeedbackCommand: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForceFeedbackState: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: *DIDEVICESTATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DownloadEffect: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: u32,
            param2: *u32,
            param3: *DIEFFECT,
            param4: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyEffect: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartEffect: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: u32,
            param2: u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopEffect: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectStatus: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: u32,
            param2: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_DeviceID(self: *const T, param0: u32, param1: u32, param2: u32, param3: u32, param4: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).DeviceID(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_GetVersions(self: *const T, param0: *DIDRIVERVERSIONS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).GetVersions(@ptrCast(*const IDirectInputEffectDriver, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_Escape(self: *const T, param0: u32, param1: u32, param2: *DIEFFESCAPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).Escape(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_SetGain(self: *const T, param0: u32, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).SetGain(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_SendForceFeedbackCommand(self: *const T, param0: u32, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).SendForceFeedbackCommand(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_GetForceFeedbackState(self: *const T, param0: u32, param1: *DIDEVICESTATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).GetForceFeedbackState(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_DownloadEffect(self: *const T, param0: u32, param1: u32, param2: *u32, param3: *DIEFFECT, param4: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).DownloadEffect(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_DestroyEffect(self: *const T, param0: u32, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).DestroyEffect(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_StartEffect(self: *const T, param0: u32, param1: u32, param2: u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).StartEffect(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_StopEffect(self: *const T, param0: u32, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).StopEffect(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_GetEffectStatus(self: *const T, param0: u32, param1: u32, param2: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).GetEffectStatus(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1, param2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const LPDIJOYTYPECALLBACK = fn(
    param0: [*:0]const u16,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DIJOYTYPEINFO_DX5 = extern struct {
    dwSize: u32,
    hws: joyreghwsettings_tag,
    clsidConfig: Guid,
    wszDisplayName: [256]u16,
    wszCallout: [260]u16,
};

pub const DIJOYTYPEINFO_DX6 = extern struct {
    dwSize: u32,
    hws: joyreghwsettings_tag,
    clsidConfig: Guid,
    wszDisplayName: [256]u16,
    wszCallout: [260]u16,
    wszHardwareId: [256]u16,
    dwFlags1: u32,
};

pub const DIJOYTYPEINFO = extern struct {
    dwSize: u32,
    hws: joyreghwsettings_tag,
    clsidConfig: Guid,
    wszDisplayName: [256]u16,
    wszCallout: [260]u16,
    wszHardwareId: [256]u16,
    dwFlags1: u32,
    dwFlags2: u32,
    wszMapFile: [256]u16,
};

pub const DIJOYCONFIG_DX5 = extern struct {
    dwSize: u32,
    guidInstance: Guid,
    hwc: joyreghwconfig_tag,
    dwGain: u32,
    wszType: [256]u16,
    wszCallout: [256]u16,
};

pub const DIJOYCONFIG = extern struct {
    dwSize: u32,
    guidInstance: Guid,
    hwc: joyreghwconfig_tag,
    dwGain: u32,
    wszType: [256]u16,
    wszCallout: [256]u16,
    guidGameport: Guid,
};

pub const DIJOYUSERVALUES = extern struct {
    dwSize: u32,
    ruv: joyreguservalues_tag,
    wszGlobalDriver: [256]u16,
    wszGameportEmulator: [256]u16,
};

const IID_IDirectInputJoyConfig_Value = @import("../zig.zig").Guid.initString("1de12ab1-c9f5-11cf-bfc7-444553540000");
pub const IID_IDirectInputJoyConfig = &IID_IDirectInputJoyConfig_Value;
pub const IDirectInputJoyConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Acquire: fn(
            self: *const IDirectInputJoyConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unacquire: fn(
            self: *const IDirectInputJoyConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCooperativeLevel: fn(
            self: *const IDirectInputJoyConfig,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendNotify: fn(
            self: *const IDirectInputJoyConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumTypes: fn(
            self: *const IDirectInputJoyConfig,
            param0: LPDIJOYTYPECALLBACK,
            param1: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTypeInfo: fn(
            self: *const IDirectInputJoyConfig,
            param0: [*:0]const u16,
            param1: *DIJOYTYPEINFO,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTypeInfo: fn(
            self: *const IDirectInputJoyConfig,
            param0: [*:0]const u16,
            param1: *DIJOYTYPEINFO,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteType: fn(
            self: *const IDirectInputJoyConfig,
            param0: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConfig: fn(
            self: *const IDirectInputJoyConfig,
            param0: u32,
            param1: *DIJOYCONFIG,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConfig: fn(
            self: *const IDirectInputJoyConfig,
            param0: u32,
            param1: *DIJOYCONFIG,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteConfig: fn(
            self: *const IDirectInputJoyConfig,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserValues: fn(
            self: *const IDirectInputJoyConfig,
            param0: *DIJOYUSERVALUES,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUserValues: fn(
            self: *const IDirectInputJoyConfig,
            param0: *DIJOYUSERVALUES,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddNewHardware: fn(
            self: *const IDirectInputJoyConfig,
            param0: HWND,
            param1: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenTypeKey: fn(
            self: *const IDirectInputJoyConfig,
            param0: [*:0]const u16,
            param1: u32,
            param2: *HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenConfigKey: fn(
            self: *const IDirectInputJoyConfig,
            param0: u32,
            param1: u32,
            param2: *HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_Acquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).Acquire(@ptrCast(*const IDirectInputJoyConfig, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_Unacquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).Unacquire(@ptrCast(*const IDirectInputJoyConfig, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_SetCooperativeLevel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).SetCooperativeLevel(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_SendNotify(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).SendNotify(@ptrCast(*const IDirectInputJoyConfig, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_EnumTypes(self: *const T, param0: LPDIJOYTYPECALLBACK, param1: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).EnumTypes(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_GetTypeInfo(self: *const T, param0: [*:0]const u16, param1: *DIJOYTYPEINFO, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).GetTypeInfo(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_SetTypeInfo(self: *const T, param0: [*:0]const u16, param1: *DIJOYTYPEINFO, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).SetTypeInfo(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_DeleteType(self: *const T, param0: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).DeleteType(@ptrCast(*const IDirectInputJoyConfig, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_GetConfig(self: *const T, param0: u32, param1: *DIJOYCONFIG, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).GetConfig(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_SetConfig(self: *const T, param0: u32, param1: *DIJOYCONFIG, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).SetConfig(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_DeleteConfig(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).DeleteConfig(@ptrCast(*const IDirectInputJoyConfig, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_GetUserValues(self: *const T, param0: *DIJOYUSERVALUES, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).GetUserValues(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_SetUserValues(self: *const T, param0: *DIJOYUSERVALUES, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).SetUserValues(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_AddNewHardware(self: *const T, param0: HWND, param1: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).AddNewHardware(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_OpenTypeKey(self: *const T, param0: [*:0]const u16, param1: u32, param2: *HKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).OpenTypeKey(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_OpenConfigKey(self: *const T, param0: u32, param1: u32, param2: *HKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).OpenConfigKey(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1, param2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectInputJoyConfig8_Value = @import("../zig.zig").Guid.initString("eb0d7dfa-1990-4f27-b4d6-edf2eec4a44c");
pub const IID_IDirectInputJoyConfig8 = &IID_IDirectInputJoyConfig8_Value;
pub const IDirectInputJoyConfig8 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Acquire: fn(
            self: *const IDirectInputJoyConfig8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unacquire: fn(
            self: *const IDirectInputJoyConfig8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCooperativeLevel: fn(
            self: *const IDirectInputJoyConfig8,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendNotify: fn(
            self: *const IDirectInputJoyConfig8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumTypes: fn(
            self: *const IDirectInputJoyConfig8,
            param0: LPDIJOYTYPECALLBACK,
            param1: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTypeInfo: fn(
            self: *const IDirectInputJoyConfig8,
            param0: [*:0]const u16,
            param1: *DIJOYTYPEINFO,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTypeInfo: fn(
            self: *const IDirectInputJoyConfig8,
            param0: [*:0]const u16,
            param1: *DIJOYTYPEINFO,
            param2: u32,
            param3: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteType: fn(
            self: *const IDirectInputJoyConfig8,
            param0: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConfig: fn(
            self: *const IDirectInputJoyConfig8,
            param0: u32,
            param1: *DIJOYCONFIG,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConfig: fn(
            self: *const IDirectInputJoyConfig8,
            param0: u32,
            param1: *DIJOYCONFIG,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteConfig: fn(
            self: *const IDirectInputJoyConfig8,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserValues: fn(
            self: *const IDirectInputJoyConfig8,
            param0: *DIJOYUSERVALUES,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUserValues: fn(
            self: *const IDirectInputJoyConfig8,
            param0: *DIJOYUSERVALUES,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddNewHardware: fn(
            self: *const IDirectInputJoyConfig8,
            param0: HWND,
            param1: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenTypeKey: fn(
            self: *const IDirectInputJoyConfig8,
            param0: [*:0]const u16,
            param1: u32,
            param2: *HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenAppStatusKey: fn(
            self: *const IDirectInputJoyConfig8,
            param0: *HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_Acquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).Acquire(@ptrCast(*const IDirectInputJoyConfig8, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_Unacquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).Unacquire(@ptrCast(*const IDirectInputJoyConfig8, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_SetCooperativeLevel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).SetCooperativeLevel(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_SendNotify(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).SendNotify(@ptrCast(*const IDirectInputJoyConfig8, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_EnumTypes(self: *const T, param0: LPDIJOYTYPECALLBACK, param1: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).EnumTypes(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_GetTypeInfo(self: *const T, param0: [*:0]const u16, param1: *DIJOYTYPEINFO, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).GetTypeInfo(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_SetTypeInfo(self: *const T, param0: [*:0]const u16, param1: *DIJOYTYPEINFO, param2: u32, param3: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).SetTypeInfo(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_DeleteType(self: *const T, param0: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).DeleteType(@ptrCast(*const IDirectInputJoyConfig8, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_GetConfig(self: *const T, param0: u32, param1: *DIJOYCONFIG, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).GetConfig(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_SetConfig(self: *const T, param0: u32, param1: *DIJOYCONFIG, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).SetConfig(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_DeleteConfig(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).DeleteConfig(@ptrCast(*const IDirectInputJoyConfig8, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_GetUserValues(self: *const T, param0: *DIJOYUSERVALUES, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).GetUserValues(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_SetUserValues(self: *const T, param0: *DIJOYUSERVALUES, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).SetUserValues(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_AddNewHardware(self: *const T, param0: HWND, param1: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).AddNewHardware(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_OpenTypeKey(self: *const T, param0: [*:0]const u16, param1: u32, param2: *HKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).OpenTypeKey(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_OpenAppStatusKey(self: *const T, param0: *HKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).OpenAppStatusKey(@ptrCast(*const IDirectInputJoyConfig8, self), param0);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const KEYBOARD_INPUT_DATA = extern struct {
    UnitId: u16,
    MakeCode: u16,
    Flags: u16,
    Reserved: u16,
    ExtraInformation: u32,
};

pub const KEYBOARD_TYPEMATIC_PARAMETERS = extern struct {
    UnitId: u16,
    Rate: u16,
    Delay: u16,
};

pub const KEYBOARD_ID = extern struct {
    Type: u8,
    Subtype: u8,
};

pub const KEYBOARD_ATTRIBUTES = extern struct {
    KeyboardIdentifier: KEYBOARD_ID,
    KeyboardMode: u16,
    NumberOfFunctionKeys: u16,
    NumberOfIndicators: u16,
    NumberOfKeysTotal: u16,
    InputDataQueueLength: u32,
    KeyRepeatMinimum: KEYBOARD_TYPEMATIC_PARAMETERS,
    KeyRepeatMaximum: KEYBOARD_TYPEMATIC_PARAMETERS,
};

pub const KEYBOARD_EXTENDED_ATTRIBUTES = extern struct {
    Version: u8,
    FormFactor: u8,
    KeyType: u8,
    PhysicalLayout: u8,
    VendorSpecificPhysicalLayout: u8,
    IETFLanguageTagIndex: u8,
    ImplementedInputAssistControls: u8,
};

pub const KEYBOARD_INDICATOR_PARAMETERS = extern struct {
    UnitId: u16,
    LedFlags: u16,
};

pub const INDICATOR_LIST = extern struct {
    MakeCode: u16,
    IndicatorFlags: u16,
};

pub const KEYBOARD_INDICATOR_TRANSLATION = extern struct {
    NumberOfIndicatorKeys: u16,
    IndicatorList: [1]INDICATOR_LIST,
};

pub const KEYBOARD_UNIT_ID_PARAMETER = extern struct {
    UnitId: u16,
};

pub const KEYBOARD_IME_STATUS = extern struct {
    UnitId: u16,
    ImeOpen: u32,
    ImeConvMode: u32,
};

pub const MOUSE_INPUT_DATA = extern struct {
    UnitId: u16,
    Flags: u16,
    Anonymous: MOUSE_INPUT_DATA._Anonymous_e__Union,
    RawButtons: u32,
    LastX: i32,
    LastY: i32,
    ExtraInformation: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const MOUSE_ATTRIBUTES = extern struct {
    MouseIdentifier: u16,
    NumberOfButtons: u16,
    SampleRate: u16,
    InputDataQueueLength: u32,
};

pub const MOUSE_UNIT_ID_PARAMETER = extern struct {
    UnitId: u16,
};

pub const HIDP_REPORT_TYPE = extern enum(i32) {
    Input = 0,
    Output = 1,
    Feature = 2,
};
pub const HidP_Input = HIDP_REPORT_TYPE.Input;
pub const HidP_Output = HIDP_REPORT_TYPE.Output;
pub const HidP_Feature = HIDP_REPORT_TYPE.Feature;

pub const USAGE_AND_PAGE = extern struct {
    Usage: u16,
    UsagePage: u16,
};

pub const HIDP_BUTTON_CAPS = extern struct {
    UsagePage: u16,
    ReportID: u8,
    IsAlias: u8,
    BitField: u16,
    LinkCollection: u16,
    LinkUsage: u16,
    LinkUsagePage: u16,
    IsRange: u8,
    IsStringRange: u8,
    IsDesignatorRange: u8,
    IsAbsolute: u8,
    Reserved: [10]u32,
    Anonymous: HIDP_BUTTON_CAPS._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const HIDP_VALUE_CAPS = extern struct {
    UsagePage: u16,
    ReportID: u8,
    IsAlias: u8,
    BitField: u16,
    LinkCollection: u16,
    LinkUsage: u16,
    LinkUsagePage: u16,
    IsRange: u8,
    IsStringRange: u8,
    IsDesignatorRange: u8,
    IsAbsolute: u8,
    HasNull: u8,
    Reserved: u8,
    BitSize: u16,
    ReportCount: u16,
    Reserved2: [5]u16,
    UnitsExp: u32,
    Units: u32,
    LogicalMin: i32,
    LogicalMax: i32,
    PhysicalMin: i32,
    PhysicalMax: i32,
    Anonymous: HIDP_VALUE_CAPS._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const HIDP_LINK_COLLECTION_NODE = extern struct {
    LinkUsage: u16,
    LinkUsagePage: u16,
    Parent: u16,
    NumberOfChildren: u16,
    NextSibling: u16,
    FirstChild: u16,
    _bitfield: u32,
    UserContext: *c_void,
};

pub const _HIDP_PREPARSED_DATA = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const HIDP_CAPS = extern struct {
    Usage: u16,
    UsagePage: u16,
    InputReportByteLength: u16,
    OutputReportByteLength: u16,
    FeatureReportByteLength: u16,
    Reserved: [17]u16,
    NumberLinkCollectionNodes: u16,
    NumberInputButtonCaps: u16,
    NumberInputValueCaps: u16,
    NumberInputDataIndices: u16,
    NumberOutputButtonCaps: u16,
    NumberOutputValueCaps: u16,
    NumberOutputDataIndices: u16,
    NumberFeatureButtonCaps: u16,
    NumberFeatureValueCaps: u16,
    NumberFeatureDataIndices: u16,
};

pub const HIDP_DATA = extern struct {
    DataIndex: u16,
    Reserved: u16,
    Anonymous: HIDP_DATA._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const HIDP_UNKNOWN_TOKEN = extern struct {
    Token: u8,
    Reserved: [3]u8,
    BitField: u32,
};

pub const HIDP_EXTENDED_ATTRIBUTES = extern struct {
    NumGlobalUnknowns: u8,
    Reserved: [3]u8,
    GlobalUnknowns: *HIDP_UNKNOWN_TOKEN,
    Data: [1]u32,
};

pub const HIDP_KEYBOARD_DIRECTION = extern enum(i32) {
    Break = 0,
    Make = 1,
};
pub const HidP_Keyboard_Break = HIDP_KEYBOARD_DIRECTION.Break;
pub const HidP_Keyboard_Make = HIDP_KEYBOARD_DIRECTION.Make;

pub const HIDP_KEYBOARD_MODIFIER_STATE = extern struct {
    Anonymous: HIDP_KEYBOARD_MODIFIER_STATE._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PHIDP_INSERT_SCANCODES = fn(
    Context: ?*c_void,
    NewScanCodes: [*]u8,
    Length: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub const HIDD_CONFIGURATION = extern struct {
    cookie: *c_void,
    size: u32,
    RingBufferSize: u32,
};

pub const HIDD_ATTRIBUTES = extern struct {
    Size: u32,
    VendorID: u16,
    ProductID: u16,
    VersionNumber: u16,
};


//--------------------------------------------------------------------------------
// Section: Functions (44)
//--------------------------------------------------------------------------------
pub extern "DINPUT8" fn DirectInput8Create(
    hinst: HINSTANCE,
    dwVersion: u32,
    riidltf: *const Guid,
    ppvOut: **c_void,
    punkOuter: *IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "HID" fn HidP_GetCaps(
    PreparsedData: ?*c_void,
    Capabilities: *HIDP_CAPS,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetLinkCollectionNodes(
    LinkCollectionNodes: [*]HIDP_LINK_COLLECTION_NODE,
    LinkCollectionNodesLength: *u32,
    PreparsedData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetSpecificButtonCaps(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    ButtonCaps: [*]HIDP_BUTTON_CAPS,
    ButtonCapsLength: *u16,
    PreparsedData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetButtonCaps(
    ReportType: HIDP_REPORT_TYPE,
    ButtonCaps: [*]HIDP_BUTTON_CAPS,
    ButtonCapsLength: *u16,
    PreparsedData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetSpecificValueCaps(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    ValueCaps: [*]HIDP_VALUE_CAPS,
    ValueCapsLength: *u16,
    PreparsedData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetValueCaps(
    ReportType: HIDP_REPORT_TYPE,
    ValueCaps: [*]HIDP_VALUE_CAPS,
    ValueCapsLength: *u16,
    PreparsedData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetExtendedAttributes(
    ReportType: HIDP_REPORT_TYPE,
    DataIndex: u16,
    PreparsedData: ?*c_void,
    Attributes: [*]HIDP_EXTENDED_ATTRIBUTES,
    LengthAttributes: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_InitializeReportForID(
    ReportType: HIDP_REPORT_TYPE,
    ReportID: u8,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_SetData(
    ReportType: HIDP_REPORT_TYPE,
    DataList: [*]HIDP_DATA,
    DataLength: *u32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetData(
    ReportType: HIDP_REPORT_TYPE,
    DataList: [*]HIDP_DATA,
    DataLength: *u32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_MaxDataListLength(
    ReportType: HIDP_REPORT_TYPE,
    PreparsedData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HID" fn HidP_SetUsages(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    UsageList: [*:0]u16,
    UsageLength: *u32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_UnsetUsages(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    UsageList: [*:0]u16,
    UsageLength: *u32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetUsages(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    UsageList: [*:0]u16,
    UsageLength: *u32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetUsagesEx(
    ReportType: HIDP_REPORT_TYPE,
    LinkCollection: u16,
    ButtonList: [*]USAGE_AND_PAGE,
    UsageLength: *u32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_MaxUsageListLength(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    PreparsedData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HID" fn HidP_SetUsageValue(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    UsageValue: u32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_SetScaledUsageValue(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    UsageValue: i32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_SetUsageValueArray(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    UsageValue: [*]u8,
    UsageValueByteLength: u16,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetUsageValue(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    UsageValue: *u32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetScaledUsageValue(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    UsageValue: *i32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetUsageValueArray(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    UsageValue: [*]u8,
    UsageValueByteLength: u16,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_UsageListDifference(
    PreviousUsageList: [*:0]u16,
    CurrentUsageList: [*:0]u16,
    BreakUsageList: [*:0]u16,
    MakeUsageList: [*:0]u16,
    UsageListLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_TranslateUsagesToI8042ScanCodes(
    ChangedUsageList: [*:0]u16,
    UsageListLength: u32,
    KeyAction: HIDP_KEYBOARD_DIRECTION,
    ModifierState: *HIDP_KEYBOARD_MODIFIER_STATE,
    InsertCodesProcedure: PHIDP_INSERT_SCANCODES,
    InsertCodesContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidD_GetAttributes(
    HidDeviceObject: HANDLE,
    Attributes: *HIDD_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetHidGuid(
    HidGuid: *Guid,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "HID" fn HidD_GetPreparsedData(
    HidDeviceObject: HANDLE,
    PreparsedData: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_FreePreparsedData(
    PreparsedData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_FlushQueue(
    HidDeviceObject: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetConfiguration(
    HidDeviceObject: HANDLE,
    Configuration: [*]HIDD_CONFIGURATION,
    ConfigurationLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_SetConfiguration(
    HidDeviceObject: HANDLE,
    Configuration: [*]HIDD_CONFIGURATION,
    ConfigurationLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetFeature(
    HidDeviceObject: HANDLE,
    ReportBuffer: [*]u8,
    ReportBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_SetFeature(
    HidDeviceObject: HANDLE,
    ReportBuffer: [*]u8,
    ReportBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetInputReport(
    HidDeviceObject: HANDLE,
    ReportBuffer: [*]u8,
    ReportBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_SetOutputReport(
    HidDeviceObject: HANDLE,
    ReportBuffer: [*]u8,
    ReportBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetNumInputBuffers(
    HidDeviceObject: HANDLE,
    NumberBuffers: *u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_SetNumInputBuffers(
    HidDeviceObject: HANDLE,
    NumberBuffers: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetPhysicalDescriptor(
    HidDeviceObject: HANDLE,
    Buffer: [*]u8,
    BufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetManufacturerString(
    HidDeviceObject: HANDLE,
    Buffer: [*]u8,
    BufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetProductString(
    HidDeviceObject: HANDLE,
    Buffer: [*]u8,
    BufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetIndexedString(
    HidDeviceObject: HANDLE,
    StringIndex: u32,
    Buffer: [*]u8,
    BufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetSerialNumberString(
    HidDeviceObject: HANDLE,
    Buffer: [*]u8,
    BufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetMsGenreDescriptor(
    HidDeviceObject: HANDLE,
    Buffer: [*]u8,
    BufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (22)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const DIACTION = DIACTIONA;
        pub const DIACTIONFORMAT = DIACTIONFORMATA;
        pub const DICONFIGUREDEVICESPARAMS = DICONFIGUREDEVICESPARAMSA;
        pub const DIDEVICEIMAGEINFO = DIDEVICEIMAGEINFOA;
        pub const DIDEVICEIMAGEINFOHEADER = DIDEVICEIMAGEINFOHEADERA;
        pub const DIDEVICEOBJECTINSTANCE_DX3 = DIDEVICEOBJECTINSTANCE_DX3A;
        pub const DIDEVICEOBJECTINSTANCE = DIDEVICEOBJECTINSTANCEA;
        pub const LPDIENUMDEVICEOBJECTSCALLBACK = LPDIENUMDEVICEOBJECTSCALLBACKA;
        pub const DIDEVICEINSTANCE_DX3 = DIDEVICEINSTANCE_DX3A;
        pub const DIDEVICEINSTANCE = DIDEVICEINSTANCEA;
        pub const IDirectInputDevice = IDirectInputDeviceA;
        pub const DIEFFECTINFO = DIEFFECTINFOA;
        pub const LPDIENUMEFFECTSCALLBACK = LPDIENUMEFFECTSCALLBACKA;
        pub const IDirectInputDevice2 = IDirectInputDevice2A;
        pub const IDirectInputDevice7 = IDirectInputDevice7A;
        pub const IDirectInputDevice8 = IDirectInputDevice8A;
        pub const LPDIENUMDEVICESCALLBACK = LPDIENUMDEVICESCALLBACKA;
        pub const LPDIENUMDEVICESBYSEMANTICSCB = LPDIENUMDEVICESBYSEMANTICSCBA;
        pub const IDirectInput = IDirectInputA;
        pub const IDirectInput2 = IDirectInput2A;
        pub const IDirectInput7 = IDirectInput7A;
        pub const IDirectInput8 = IDirectInput8A;
    },
    .wide => struct {
        pub const DIACTION = DIACTIONW;
        pub const DIACTIONFORMAT = DIACTIONFORMATW;
        pub const DICONFIGUREDEVICESPARAMS = DICONFIGUREDEVICESPARAMSW;
        pub const DIDEVICEIMAGEINFO = DIDEVICEIMAGEINFOW;
        pub const DIDEVICEIMAGEINFOHEADER = DIDEVICEIMAGEINFOHEADERW;
        pub const DIDEVICEOBJECTINSTANCE_DX3 = DIDEVICEOBJECTINSTANCE_DX3W;
        pub const DIDEVICEOBJECTINSTANCE = DIDEVICEOBJECTINSTANCEW;
        pub const LPDIENUMDEVICEOBJECTSCALLBACK = LPDIENUMDEVICEOBJECTSCALLBACKW;
        pub const DIDEVICEINSTANCE_DX3 = DIDEVICEINSTANCE_DX3W;
        pub const DIDEVICEINSTANCE = DIDEVICEINSTANCEW;
        pub const IDirectInputDevice = IDirectInputDeviceW;
        pub const DIEFFECTINFO = DIEFFECTINFOW;
        pub const LPDIENUMEFFECTSCALLBACK = LPDIENUMEFFECTSCALLBACKW;
        pub const IDirectInputDevice2 = IDirectInputDevice2W;
        pub const IDirectInputDevice7 = IDirectInputDevice7W;
        pub const IDirectInputDevice8 = IDirectInputDevice8W;
        pub const LPDIENUMDEVICESCALLBACK = LPDIENUMDEVICESCALLBACKW;
        pub const LPDIENUMDEVICESBYSEMANTICSCB = LPDIENUMDEVICESBYSEMANTICSCBW;
        pub const IDirectInput = IDirectInputW;
        pub const IDirectInput2 = IDirectInput2W;
        pub const IDirectInput7 = IDirectInput7W;
        pub const IDirectInput8 = IDirectInput8W;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const DIACTION = *opaque{};
        pub const DIACTIONFORMAT = *opaque{};
        pub const DICONFIGUREDEVICESPARAMS = *opaque{};
        pub const DIDEVICEIMAGEINFO = *opaque{};
        pub const DIDEVICEIMAGEINFOHEADER = *opaque{};
        pub const DIDEVICEOBJECTINSTANCE_DX3 = *opaque{};
        pub const DIDEVICEOBJECTINSTANCE = *opaque{};
        pub const LPDIENUMDEVICEOBJECTSCALLBACK = *opaque{};
        pub const DIDEVICEINSTANCE_DX3 = *opaque{};
        pub const DIDEVICEINSTANCE = *opaque{};
        pub const IDirectInputDevice = *opaque{};
        pub const DIEFFECTINFO = *opaque{};
        pub const LPDIENUMEFFECTSCALLBACK = *opaque{};
        pub const IDirectInputDevice2 = *opaque{};
        pub const IDirectInputDevice7 = *opaque{};
        pub const IDirectInputDevice8 = *opaque{};
        pub const LPDIENUMDEVICESCALLBACK = *opaque{};
        pub const LPDIENUMDEVICESBYSEMANTICSCB = *opaque{};
        pub const IDirectInput = *opaque{};
        pub const IDirectInput2 = *opaque{};
        pub const IDirectInput7 = *opaque{};
        pub const IDirectInput8 = *opaque{};
    } else struct {
        pub const DIACTION = @compileError("'DIACTION' requires that UNICODE be set to true or false in the root module");
        pub const DIACTIONFORMAT = @compileError("'DIACTIONFORMAT' requires that UNICODE be set to true or false in the root module");
        pub const DICONFIGUREDEVICESPARAMS = @compileError("'DICONFIGUREDEVICESPARAMS' requires that UNICODE be set to true or false in the root module");
        pub const DIDEVICEIMAGEINFO = @compileError("'DIDEVICEIMAGEINFO' requires that UNICODE be set to true or false in the root module");
        pub const DIDEVICEIMAGEINFOHEADER = @compileError("'DIDEVICEIMAGEINFOHEADER' requires that UNICODE be set to true or false in the root module");
        pub const DIDEVICEOBJECTINSTANCE_DX3 = @compileError("'DIDEVICEOBJECTINSTANCE_DX3' requires that UNICODE be set to true or false in the root module");
        pub const DIDEVICEOBJECTINSTANCE = @compileError("'DIDEVICEOBJECTINSTANCE' requires that UNICODE be set to true or false in the root module");
        pub const LPDIENUMDEVICEOBJECTSCALLBACK = @compileError("'LPDIENUMDEVICEOBJECTSCALLBACK' requires that UNICODE be set to true or false in the root module");
        pub const DIDEVICEINSTANCE_DX3 = @compileError("'DIDEVICEINSTANCE_DX3' requires that UNICODE be set to true or false in the root module");
        pub const DIDEVICEINSTANCE = @compileError("'DIDEVICEINSTANCE' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInputDevice = @compileError("'IDirectInputDevice' requires that UNICODE be set to true or false in the root module");
        pub const DIEFFECTINFO = @compileError("'DIEFFECTINFO' requires that UNICODE be set to true or false in the root module");
        pub const LPDIENUMEFFECTSCALLBACK = @compileError("'LPDIENUMEFFECTSCALLBACK' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInputDevice2 = @compileError("'IDirectInputDevice2' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInputDevice7 = @compileError("'IDirectInputDevice7' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInputDevice8 = @compileError("'IDirectInputDevice8' requires that UNICODE be set to true or false in the root module");
        pub const LPDIENUMDEVICESCALLBACK = @compileError("'LPDIENUMDEVICESCALLBACK' requires that UNICODE be set to true or false in the root module");
        pub const LPDIENUMDEVICESBYSEMANTICSCB = @compileError("'LPDIENUMDEVICESBYSEMANTICSCB' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInput = @compileError("'IDirectInput' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInput2 = @compileError("'IDirectInput2' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInput7 = @compileError("'IDirectInput7' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInput8 = @compileError("'IDirectInput8' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (18)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const HKEY = @import("windows_programming.zig").HKEY;
const HINSTANCE = @import("system_services.zig").HINSTANCE;
const FILETIME = @import("windows_programming.zig").FILETIME;
const PWSTR = @import("system_services.zig").PWSTR;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const joyreguservalues_tag = @import("multimedia.zig").joyreguservalues_tag;
const PSTR = @import("system_services.zig").PSTR;
const RECT = @import("display_devices.zig").RECT;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const joyreghwsettings_tag = @import("multimedia.zig").joyreghwsettings_tag;
const joyrange_tag = @import("multimedia.zig").joyrange_tag;
const joyreghwconfig_tag = @import("multimedia.zig").joyreghwconfig_tag;
const POINT = @import("display_devices.zig").POINT;
const HANDLE = @import("system_services.zig").HANDLE;
const NTSTATUS = @import("system_services.zig").NTSTATUS;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = LPDIENUMEFFECTSINFILECALLBACK;
    _ = LPDIENUMDEVICEOBJECTSCALLBACKA;
    _ = LPDIENUMDEVICEOBJECTSCALLBACKW;
    _ = LPDIENUMEFFECTSCALLBACKA;
    _ = LPDIENUMEFFECTSCALLBACKW;
    _ = LPDIENUMCREATEDEFFECTOBJECTSCALLBACK;
    _ = LPDIENUMDEVICESCALLBACKA;
    _ = LPDIENUMDEVICESCALLBACKW;
    _ = LPDICONFIGUREDEVICESCALLBACK;
    _ = LPDIENUMDEVICESBYSEMANTICSCBA;
    _ = LPDIENUMDEVICESBYSEMANTICSCBW;
    _ = LPFNSHOWJOYCPL;
    _ = LPDIJOYTYPECALLBACK;
    _ = PHIDP_INSERT_SCANCODES;

    const constant_export_count = 1699;
    const type_export_count = 128;
    const enum_value_export_count = 5;
    const com_iface_id_export_count = 20;
    const com_class_id_export_count = 0;
    const func_export_count = 44;
    const unicode_alias_count = 22;
    const import_count = 18;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

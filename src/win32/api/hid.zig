//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (128)
//--------------------------------------------------------------------------------
pub const JOYREGHWVALUES = extern struct {
    jrvHardware: joyrange_tag,
    dwPOVValues: [4]u32,
    dwCalFlags: u32,
};

pub const DICONSTANTFORCE = extern struct {
    lMagnitude: i32,
};

pub const DIRAMPFORCE = extern struct {
    lStart: i32,
    lEnd: i32,
};

pub const DIPERIODIC = extern struct {
    dwMagnitude: u32,
    lOffset: i32,
    dwPhase: u32,
    dwPeriod: u32,
};

pub const DICONDITION = extern struct {
    lOffset: i32,
    lPositiveCoefficient: i32,
    lNegativeCoefficient: i32,
    dwPositiveSaturation: u32,
    dwNegativeSaturation: u32,
    lDeadBand: i32,
};

pub const DICUSTOMFORCE = extern struct {
    cChannels: u32,
    dwSamplePeriod: u32,
    cSamples: u32,
    rglForceData: *i32,
};

pub const DIENVELOPE = extern struct {
    dwSize: u32,
    dwAttackLevel: u32,
    dwAttackTime: u32,
    dwFadeLevel: u32,
    dwFadeTime: u32,
};

pub const DIEFFECT_DX5 = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwDuration: u32,
    dwSamplePeriod: u32,
    dwGain: u32,
    dwTriggerButton: u32,
    dwTriggerRepeatInterval: u32,
    cAxes: u32,
    rgdwAxes: *u32,
    rglDirection: *i32,
    lpEnvelope: *DIENVELOPE,
    cbTypeSpecificParams: u32,
    lpvTypeSpecificParams: *c_void,
};

pub const DIEFFECT = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwDuration: u32,
    dwSamplePeriod: u32,
    dwGain: u32,
    dwTriggerButton: u32,
    dwTriggerRepeatInterval: u32,
    cAxes: u32,
    rgdwAxes: *u32,
    rglDirection: *i32,
    lpEnvelope: *DIENVELOPE,
    cbTypeSpecificParams: u32,
    lpvTypeSpecificParams: *c_void,
    dwStartDelay: u32,
};

pub const DIFILEEFFECT = extern struct {
    dwSize: u32,
    GuidEffect: Guid,
    lpDiEffect: *DIEFFECT,
    szFriendlyName: [260]i8,
};

pub const LPDIENUMEFFECTSINFILECALLBACK = fn(
    param0: *DIFILEEFFECT,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DIEFFESCAPE = extern struct {
    dwSize: u32,
    dwCommand: u32,
    lpvInBuffer: *c_void,
    cbInBuffer: u32,
    lpvOutBuffer: *c_void,
    cbOutBuffer: u32,
};

pub const IDirectInputEffect = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IDirectInputEffect,
            param0: HINSTANCE,
            param1: u32,
            param2: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectGuid: fn(
            self: *const IDirectInputEffect,
            param0: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParameters: fn(
            self: *const IDirectInputEffect,
            param0: *DIEFFECT,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParameters: fn(
            self: *const IDirectInputEffect,
            param0: *DIEFFECT,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Start: fn(
            self: *const IDirectInputEffect,
            param0: u32,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: fn(
            self: *const IDirectInputEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectStatus: fn(
            self: *const IDirectInputEffect,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Download: fn(
            self: *const IDirectInputEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unload: fn(
            self: *const IDirectInputEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Escape: fn(
            self: *const IDirectInputEffect,
            param0: *DIEFFESCAPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_Initialize(self: *const T, param0: HINSTANCE, param1: u32, param2: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).Initialize(@ptrCast(*const IDirectInputEffect, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_GetEffectGuid(self: *const T, param0: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).GetEffectGuid(@ptrCast(*const IDirectInputEffect, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_GetParameters(self: *const T, param0: *DIEFFECT, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).GetParameters(@ptrCast(*const IDirectInputEffect, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_SetParameters(self: *const T, param0: *DIEFFECT, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).SetParameters(@ptrCast(*const IDirectInputEffect, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_Start(self: *const T, param0: u32, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).Start(@ptrCast(*const IDirectInputEffect, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_Stop(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).Stop(@ptrCast(*const IDirectInputEffect, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_GetEffectStatus(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).GetEffectStatus(@ptrCast(*const IDirectInputEffect, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_Download(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).Download(@ptrCast(*const IDirectInputEffect, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_Unload(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).Unload(@ptrCast(*const IDirectInputEffect, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffect_Escape(self: *const T, param0: *DIEFFESCAPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffect.VTable, self.vtable).Escape(@ptrCast(*const IDirectInputEffect, self), param0);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DIDEVCAPS_DX3 = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwDevType: u32,
    dwAxes: u32,
    dwButtons: u32,
    dwPOVs: u32,
};

pub const DIDEVCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwDevType: u32,
    dwAxes: u32,
    dwButtons: u32,
    dwPOVs: u32,
    dwFFSamplePeriod: u32,
    dwFFMinTimeResolution: u32,
    dwFirmwareRevision: u32,
    dwHardwareRevision: u32,
    dwFFDriverVersion: u32,
};

pub const DIOBJECTDATAFORMAT = extern struct {
    pguid: *const Guid,
    dwOfs: u32,
    dwType: u32,
    dwFlags: u32,
};

pub const DIDATAFORMAT = extern struct {
    dwSize: u32,
    dwObjSize: u32,
    dwFlags: u32,
    dwDataSize: u32,
    dwNumObjs: u32,
    rgodf: *DIOBJECTDATAFORMAT,
};

pub const DIACTIONA = extern struct {
    uAppData: ?*c_void,
    dwSemantic: u32,
    dwFlags: u32,
    Anonymous: DIACTIONA._Anonymous_e__Union,
    guidInstance: Guid,
    dwObjID: u32,
    dwHow: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DIACTIONW = extern struct {
    uAppData: ?*c_void,
    dwSemantic: u32,
    dwFlags: u32,
    Anonymous: DIACTIONW._Anonymous_e__Union,
    guidInstance: Guid,
    dwObjID: u32,
    dwHow: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DIACTIONFORMATA = extern struct {
    dwSize: u32,
    dwActionSize: u32,
    dwDataSize: u32,
    dwNumActions: u32,
    rgoAction: *DIACTIONA,
    guidActionMap: Guid,
    dwGenre: u32,
    dwBufferSize: u32,
    lAxisMin: i32,
    lAxisMax: i32,
    hInstString: HINSTANCE,
    ftTimeStamp: FILETIME,
    dwCRC: u32,
    tszActionMap: [260]i8,
};

pub const DIACTIONFORMATW = extern struct {
    dwSize: u32,
    dwActionSize: u32,
    dwDataSize: u32,
    dwNumActions: u32,
    rgoAction: *DIACTIONW,
    guidActionMap: Guid,
    dwGenre: u32,
    dwBufferSize: u32,
    lAxisMin: i32,
    lAxisMax: i32,
    hInstString: HINSTANCE,
    ftTimeStamp: FILETIME,
    dwCRC: u32,
    tszActionMap: [260]u16,
};

pub const DICOLORSET = extern struct {
    dwSize: u32,
    cTextFore: u32,
    cTextHighlight: u32,
    cCalloutLine: u32,
    cCalloutHighlight: u32,
    cBorder: u32,
    cControlFill: u32,
    cHighlightFill: u32,
    cAreaFill: u32,
};

pub const DICONFIGUREDEVICESPARAMSA = extern struct {
    dwSize: u32,
    dwcUsers: u32,
    lptszUserNames: PSTR,
    dwcFormats: u32,
    lprgFormats: *DIACTIONFORMATA,
    hwnd: HWND,
    dics: DICOLORSET,
    lpUnkDDSTarget: *IUnknown,
};

pub const DICONFIGUREDEVICESPARAMSW = extern struct {
    dwSize: u32,
    dwcUsers: u32,
    lptszUserNames: PWSTR,
    dwcFormats: u32,
    lprgFormats: *DIACTIONFORMATW,
    hwnd: HWND,
    dics: DICOLORSET,
    lpUnkDDSTarget: *IUnknown,
};

pub const DIDEVICEIMAGEINFOA = extern struct {
    tszImagePath: [260]i8,
    dwFlags: u32,
    dwViewID: u32,
    rcOverlay: RECT,
    dwObjID: u32,
    dwcValidPts: u32,
    rgptCalloutLine: [5]POINT,
    rcCalloutRect: RECT,
    dwTextAlign: u32,
};

pub const DIDEVICEIMAGEINFOW = extern struct {
    tszImagePath: [260]u16,
    dwFlags: u32,
    dwViewID: u32,
    rcOverlay: RECT,
    dwObjID: u32,
    dwcValidPts: u32,
    rgptCalloutLine: [5]POINT,
    rcCalloutRect: RECT,
    dwTextAlign: u32,
};

pub const DIDEVICEIMAGEINFOHEADERA = extern struct {
    dwSize: u32,
    dwSizeImageInfo: u32,
    dwcViews: u32,
    dwcButtons: u32,
    dwcAxes: u32,
    dwcPOVs: u32,
    dwBufferSize: u32,
    dwBufferUsed: u32,
    lprgImageInfoArray: *DIDEVICEIMAGEINFOA,
};

pub const DIDEVICEIMAGEINFOHEADERW = extern struct {
    dwSize: u32,
    dwSizeImageInfo: u32,
    dwcViews: u32,
    dwcButtons: u32,
    dwcAxes: u32,
    dwcPOVs: u32,
    dwBufferSize: u32,
    dwBufferUsed: u32,
    lprgImageInfoArray: *DIDEVICEIMAGEINFOW,
};

pub const DIDEVICEOBJECTINSTANCE_DX3A = extern struct {
    dwSize: u32,
    guidType: Guid,
    dwOfs: u32,
    dwType: u32,
    dwFlags: u32,
    tszName: [260]i8,
};

pub const DIDEVICEOBJECTINSTANCE_DX3W = extern struct {
    dwSize: u32,
    guidType: Guid,
    dwOfs: u32,
    dwType: u32,
    dwFlags: u32,
    tszName: [260]u16,
};

pub const DIDEVICEOBJECTINSTANCEA = extern struct {
    dwSize: u32,
    guidType: Guid,
    dwOfs: u32,
    dwType: u32,
    dwFlags: u32,
    tszName: [260]i8,
    dwFFMaxForce: u32,
    dwFFForceResolution: u32,
    wCollectionNumber: u16,
    wDesignatorIndex: u16,
    wUsagePage: u16,
    wUsage: u16,
    dwDimension: u32,
    wExponent: u16,
    wReportId: u16,
};

pub const DIDEVICEOBJECTINSTANCEW = extern struct {
    dwSize: u32,
    guidType: Guid,
    dwOfs: u32,
    dwType: u32,
    dwFlags: u32,
    tszName: [260]u16,
    dwFFMaxForce: u32,
    dwFFForceResolution: u32,
    wCollectionNumber: u16,
    wDesignatorIndex: u16,
    wUsagePage: u16,
    wUsage: u16,
    dwDimension: u32,
    wExponent: u16,
    wReportId: u16,
};

pub const LPDIENUMDEVICEOBJECTSCALLBACKA = fn(
    param0: *DIDEVICEOBJECTINSTANCEA,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDIENUMDEVICEOBJECTSCALLBACKW = fn(
    param0: *DIDEVICEOBJECTINSTANCEW,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DIPROPHEADER = extern struct {
    dwSize: u32,
    dwHeaderSize: u32,
    dwObj: u32,
    dwHow: u32,
};

pub const DIPROPDWORD = extern struct {
    diph: DIPROPHEADER,
    dwData: u32,
};

pub const DIPROPPOINTER = extern struct {
    diph: DIPROPHEADER,
    uData: ?*c_void,
};

pub const DIPROPRANGE = extern struct {
    diph: DIPROPHEADER,
    lMin: i32,
    lMax: i32,
};

pub const DIPROPCAL = extern struct {
    diph: DIPROPHEADER,
    lMin: i32,
    lCenter: i32,
    lMax: i32,
};

pub const DIPROPCALPOV = extern struct {
    diph: DIPROPHEADER,
    lMin: [5]i32,
    lMax: [5]i32,
};

pub const DIPROPGUIDANDPATH = extern struct {
    diph: DIPROPHEADER,
    guidClass: Guid,
    wszPath: [260]u16,
};

pub const DIPROPSTRING = extern struct {
    diph: DIPROPHEADER,
    wsz: [260]u16,
};

pub const CPOINT = extern struct {
    lP: i32,
    dwLog: u32,
};

pub const DIPROPCPOINTS = extern struct {
    diph: DIPROPHEADER,
    dwCPointsNum: u32,
    cp: [8]CPOINT,
};

pub const DIDEVICEOBJECTDATA_DX3 = extern struct {
    dwOfs: u32,
    dwData: u32,
    dwTimeStamp: u32,
    dwSequence: u32,
};

pub const DIDEVICEOBJECTDATA = extern struct {
    dwOfs: u32,
    dwData: u32,
    dwTimeStamp: u32,
    dwSequence: u32,
    uAppData: ?*c_void,
};

pub const DIDEVICEINSTANCE_DX3A = extern struct {
    dwSize: u32,
    guidInstance: Guid,
    guidProduct: Guid,
    dwDevType: u32,
    tszInstanceName: [260]i8,
    tszProductName: [260]i8,
};

pub const DIDEVICEINSTANCE_DX3W = extern struct {
    dwSize: u32,
    guidInstance: Guid,
    guidProduct: Guid,
    dwDevType: u32,
    tszInstanceName: [260]u16,
    tszProductName: [260]u16,
};

pub const DIDEVICEINSTANCEA = extern struct {
    dwSize: u32,
    guidInstance: Guid,
    guidProduct: Guid,
    dwDevType: u32,
    tszInstanceName: [260]i8,
    tszProductName: [260]i8,
    guidFFDriver: Guid,
    wUsagePage: u16,
    wUsage: u16,
};

pub const DIDEVICEINSTANCEW = extern struct {
    dwSize: u32,
    guidInstance: Guid,
    guidProduct: Guid,
    dwDevType: u32,
    tszInstanceName: [260]u16,
    tszProductName: [260]u16,
    guidFFDriver: Guid,
    wUsagePage: u16,
    wUsage: u16,
};

pub const IDirectInputDeviceW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCapabilities: fn(
            self: *const IDirectInputDeviceW,
            param0: *DIDEVCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumObjects: fn(
            self: *const IDirectInputDeviceW,
            param0: LPDIENUMDEVICEOBJECTSCALLBACKW,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IDirectInputDeviceW,
            param0: *const Guid,
            param1: *DIPROPHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IDirectInputDeviceW,
            param0: *const Guid,
            param1: *DIPROPHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Acquire: fn(
            self: *const IDirectInputDeviceW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unacquire: fn(
            self: *const IDirectInputDeviceW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceState: fn(
            self: *const IDirectInputDeviceW,
            param0: u32,
            param1: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceData: fn(
            self: *const IDirectInputDeviceW,
            param0: u32,
            param1: *DIDEVICEOBJECTDATA,
            param2: *u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDataFormat: fn(
            self: *const IDirectInputDeviceW,
            param0: *DIDATAFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEventNotification: fn(
            self: *const IDirectInputDeviceW,
            param0: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCooperativeLevel: fn(
            self: *const IDirectInputDeviceW,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectInfo: fn(
            self: *const IDirectInputDeviceW,
            param0: *DIDEVICEOBJECTINSTANCEW,
            param1: u32,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceInfo: fn(
            self: *const IDirectInputDeviceW,
            param0: *DIDEVICEINSTANCEW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunControlPanel: fn(
            self: *const IDirectInputDeviceW,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectInputDeviceW,
            param0: HINSTANCE,
            param1: u32,
            param2: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_GetCapabilities(self: *const T, param0: *DIDEVCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).GetCapabilities(@ptrCast(*const IDirectInputDeviceW, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_EnumObjects(self: *const T, param0: LPDIENUMDEVICEOBJECTSCALLBACKW, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).EnumObjects(@ptrCast(*const IDirectInputDeviceW, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_GetProperty(self: *const T, param0: *const Guid, param1: *DIPROPHEADER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).GetProperty(@ptrCast(*const IDirectInputDeviceW, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_SetProperty(self: *const T, param0: *const Guid, param1: *DIPROPHEADER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).SetProperty(@ptrCast(*const IDirectInputDeviceW, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_Acquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).Acquire(@ptrCast(*const IDirectInputDeviceW, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_Unacquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).Unacquire(@ptrCast(*const IDirectInputDeviceW, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_GetDeviceState(self: *const T, param0: u32, param1: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).GetDeviceState(@ptrCast(*const IDirectInputDeviceW, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_GetDeviceData(self: *const T, param0: u32, param1: *DIDEVICEOBJECTDATA, param2: *u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).GetDeviceData(@ptrCast(*const IDirectInputDeviceW, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_SetDataFormat(self: *const T, param0: *DIDATAFORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).SetDataFormat(@ptrCast(*const IDirectInputDeviceW, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_SetEventNotification(self: *const T, param0: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).SetEventNotification(@ptrCast(*const IDirectInputDeviceW, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_SetCooperativeLevel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).SetCooperativeLevel(@ptrCast(*const IDirectInputDeviceW, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_GetObjectInfo(self: *const T, param0: *DIDEVICEOBJECTINSTANCEW, param1: u32, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).GetObjectInfo(@ptrCast(*const IDirectInputDeviceW, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_GetDeviceInfo(self: *const T, param0: *DIDEVICEINSTANCEW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).GetDeviceInfo(@ptrCast(*const IDirectInputDeviceW, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_RunControlPanel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).RunControlPanel(@ptrCast(*const IDirectInputDeviceW, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceW_Initialize(self: *const T, param0: HINSTANCE, param1: u32, param2: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceW.VTable, self.vtable).Initialize(@ptrCast(*const IDirectInputDeviceW, self), param0, param1, param2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IDirectInputDeviceA = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCapabilities: fn(
            self: *const IDirectInputDeviceA,
            param0: *DIDEVCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumObjects: fn(
            self: *const IDirectInputDeviceA,
            param0: LPDIENUMDEVICEOBJECTSCALLBACKA,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IDirectInputDeviceA,
            param0: *const Guid,
            param1: *DIPROPHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IDirectInputDeviceA,
            param0: *const Guid,
            param1: *DIPROPHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Acquire: fn(
            self: *const IDirectInputDeviceA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unacquire: fn(
            self: *const IDirectInputDeviceA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceState: fn(
            self: *const IDirectInputDeviceA,
            param0: u32,
            param1: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceData: fn(
            self: *const IDirectInputDeviceA,
            param0: u32,
            param1: *DIDEVICEOBJECTDATA,
            param2: *u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDataFormat: fn(
            self: *const IDirectInputDeviceA,
            param0: *DIDATAFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEventNotification: fn(
            self: *const IDirectInputDeviceA,
            param0: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCooperativeLevel: fn(
            self: *const IDirectInputDeviceA,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectInfo: fn(
            self: *const IDirectInputDeviceA,
            param0: *DIDEVICEOBJECTINSTANCEA,
            param1: u32,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceInfo: fn(
            self: *const IDirectInputDeviceA,
            param0: *DIDEVICEINSTANCEA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunControlPanel: fn(
            self: *const IDirectInputDeviceA,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectInputDeviceA,
            param0: HINSTANCE,
            param1: u32,
            param2: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_GetCapabilities(self: *const T, param0: *DIDEVCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).GetCapabilities(@ptrCast(*const IDirectInputDeviceA, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_EnumObjects(self: *const T, param0: LPDIENUMDEVICEOBJECTSCALLBACKA, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).EnumObjects(@ptrCast(*const IDirectInputDeviceA, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_GetProperty(self: *const T, param0: *const Guid, param1: *DIPROPHEADER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).GetProperty(@ptrCast(*const IDirectInputDeviceA, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_SetProperty(self: *const T, param0: *const Guid, param1: *DIPROPHEADER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).SetProperty(@ptrCast(*const IDirectInputDeviceA, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_Acquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).Acquire(@ptrCast(*const IDirectInputDeviceA, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_Unacquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).Unacquire(@ptrCast(*const IDirectInputDeviceA, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_GetDeviceState(self: *const T, param0: u32, param1: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).GetDeviceState(@ptrCast(*const IDirectInputDeviceA, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_GetDeviceData(self: *const T, param0: u32, param1: *DIDEVICEOBJECTDATA, param2: *u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).GetDeviceData(@ptrCast(*const IDirectInputDeviceA, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_SetDataFormat(self: *const T, param0: *DIDATAFORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).SetDataFormat(@ptrCast(*const IDirectInputDeviceA, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_SetEventNotification(self: *const T, param0: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).SetEventNotification(@ptrCast(*const IDirectInputDeviceA, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_SetCooperativeLevel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).SetCooperativeLevel(@ptrCast(*const IDirectInputDeviceA, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_GetObjectInfo(self: *const T, param0: *DIDEVICEOBJECTINSTANCEA, param1: u32, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).GetObjectInfo(@ptrCast(*const IDirectInputDeviceA, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_GetDeviceInfo(self: *const T, param0: *DIDEVICEINSTANCEA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).GetDeviceInfo(@ptrCast(*const IDirectInputDeviceA, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_RunControlPanel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).RunControlPanel(@ptrCast(*const IDirectInputDeviceA, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDeviceA_Initialize(self: *const T, param0: HINSTANCE, param1: u32, param2: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDeviceA.VTable, self.vtable).Initialize(@ptrCast(*const IDirectInputDeviceA, self), param0, param1, param2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DIEFFECTINFOA = extern struct {
    dwSize: u32,
    guid: Guid,
    dwEffType: u32,
    dwStaticParams: u32,
    dwDynamicParams: u32,
    tszName: [260]i8,
};

pub const DIEFFECTINFOW = extern struct {
    dwSize: u32,
    guid: Guid,
    dwEffType: u32,
    dwStaticParams: u32,
    dwDynamicParams: u32,
    tszName: [260]u16,
};

pub const LPDIENUMEFFECTSCALLBACKA = fn(
    param0: *DIEFFECTINFOA,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDIENUMEFFECTSCALLBACKW = fn(
    param0: *DIEFFECTINFOW,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDIENUMCREATEDEFFECTOBJECTSCALLBACK = fn(
    param0: *IDirectInputEffect,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const IDirectInputDevice2W = extern struct {
    pub const VTable = extern struct {
        base: IDirectInputDeviceW.VTable,
        CreateEffect: fn(
            self: *const IDirectInputDevice2W,
            param0: *const Guid,
            param1: *DIEFFECT,
            param2: **IDirectInputEffect,
            param3: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumEffects: fn(
            self: *const IDirectInputDevice2W,
            param0: LPDIENUMEFFECTSCALLBACKW,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectInfo: fn(
            self: *const IDirectInputDevice2W,
            param0: *DIEFFECTINFOW,
            param1: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForceFeedbackState: fn(
            self: *const IDirectInputDevice2W,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendForceFeedbackCommand: fn(
            self: *const IDirectInputDevice2W,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCreatedEffectObjects: fn(
            self: *const IDirectInputDevice2W,
            param0: LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Escape: fn(
            self: *const IDirectInputDevice2W,
            param0: *DIEFFESCAPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Poll: fn(
            self: *const IDirectInputDevice2W,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendDeviceData: fn(
            self: *const IDirectInputDevice2W,
            param0: u32,
            param1: *DIDEVICEOBJECTDATA,
            param2: *u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectInputDeviceW.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2W_CreateEffect(self: *const T, param0: *const Guid, param1: *DIEFFECT, param2: **IDirectInputEffect, param3: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2W.VTable, self.vtable).CreateEffect(@ptrCast(*const IDirectInputDevice2W, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2W_EnumEffects(self: *const T, param0: LPDIENUMEFFECTSCALLBACKW, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2W.VTable, self.vtable).EnumEffects(@ptrCast(*const IDirectInputDevice2W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2W_GetEffectInfo(self: *const T, param0: *DIEFFECTINFOW, param1: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2W.VTable, self.vtable).GetEffectInfo(@ptrCast(*const IDirectInputDevice2W, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2W_GetForceFeedbackState(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2W.VTable, self.vtable).GetForceFeedbackState(@ptrCast(*const IDirectInputDevice2W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2W_SendForceFeedbackCommand(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2W.VTable, self.vtable).SendForceFeedbackCommand(@ptrCast(*const IDirectInputDevice2W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2W_EnumCreatedEffectObjects(self: *const T, param0: LPDIENUMCREATEDEFFECTOBJECTSCALLBACK, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2W.VTable, self.vtable).EnumCreatedEffectObjects(@ptrCast(*const IDirectInputDevice2W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2W_Escape(self: *const T, param0: *DIEFFESCAPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2W.VTable, self.vtable).Escape(@ptrCast(*const IDirectInputDevice2W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2W_Poll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2W.VTable, self.vtable).Poll(@ptrCast(*const IDirectInputDevice2W, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2W_SendDeviceData(self: *const T, param0: u32, param1: *DIDEVICEOBJECTDATA, param2: *u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2W.VTable, self.vtable).SendDeviceData(@ptrCast(*const IDirectInputDevice2W, self), param0, param1, param2, param3);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IDirectInputDevice2A = extern struct {
    pub const VTable = extern struct {
        base: IDirectInputDeviceA.VTable,
        CreateEffect: fn(
            self: *const IDirectInputDevice2A,
            param0: *const Guid,
            param1: *DIEFFECT,
            param2: **IDirectInputEffect,
            param3: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumEffects: fn(
            self: *const IDirectInputDevice2A,
            param0: LPDIENUMEFFECTSCALLBACKA,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectInfo: fn(
            self: *const IDirectInputDevice2A,
            param0: *DIEFFECTINFOA,
            param1: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForceFeedbackState: fn(
            self: *const IDirectInputDevice2A,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendForceFeedbackCommand: fn(
            self: *const IDirectInputDevice2A,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCreatedEffectObjects: fn(
            self: *const IDirectInputDevice2A,
            param0: LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Escape: fn(
            self: *const IDirectInputDevice2A,
            param0: *DIEFFESCAPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Poll: fn(
            self: *const IDirectInputDevice2A,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendDeviceData: fn(
            self: *const IDirectInputDevice2A,
            param0: u32,
            param1: *DIDEVICEOBJECTDATA,
            param2: *u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectInputDeviceA.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2A_CreateEffect(self: *const T, param0: *const Guid, param1: *DIEFFECT, param2: **IDirectInputEffect, param3: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2A.VTable, self.vtable).CreateEffect(@ptrCast(*const IDirectInputDevice2A, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2A_EnumEffects(self: *const T, param0: LPDIENUMEFFECTSCALLBACKA, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2A.VTable, self.vtable).EnumEffects(@ptrCast(*const IDirectInputDevice2A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2A_GetEffectInfo(self: *const T, param0: *DIEFFECTINFOA, param1: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2A.VTable, self.vtable).GetEffectInfo(@ptrCast(*const IDirectInputDevice2A, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2A_GetForceFeedbackState(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2A.VTable, self.vtable).GetForceFeedbackState(@ptrCast(*const IDirectInputDevice2A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2A_SendForceFeedbackCommand(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2A.VTable, self.vtable).SendForceFeedbackCommand(@ptrCast(*const IDirectInputDevice2A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2A_EnumCreatedEffectObjects(self: *const T, param0: LPDIENUMCREATEDEFFECTOBJECTSCALLBACK, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2A.VTable, self.vtable).EnumCreatedEffectObjects(@ptrCast(*const IDirectInputDevice2A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2A_Escape(self: *const T, param0: *DIEFFESCAPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2A.VTable, self.vtable).Escape(@ptrCast(*const IDirectInputDevice2A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2A_Poll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2A.VTable, self.vtable).Poll(@ptrCast(*const IDirectInputDevice2A, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice2A_SendDeviceData(self: *const T, param0: u32, param1: *DIDEVICEOBJECTDATA, param2: *u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice2A.VTable, self.vtable).SendDeviceData(@ptrCast(*const IDirectInputDevice2A, self), param0, param1, param2, param3);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IDirectInputDevice7W = extern struct {
    pub const VTable = extern struct {
        base: IDirectInputDevice2W.VTable,
        EnumEffectsInFile: fn(
            self: *const IDirectInputDevice7W,
            param0: [*:0]const u16,
            param1: LPDIENUMEFFECTSINFILECALLBACK,
            param2: *c_void,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteEffectToFile: fn(
            self: *const IDirectInputDevice7W,
            param0: [*:0]const u16,
            param1: u32,
            param2: *DIFILEEFFECT,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectInputDevice2W.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice7W_EnumEffectsInFile(self: *const T, param0: [*:0]const u16, param1: LPDIENUMEFFECTSINFILECALLBACK, param2: *c_void, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice7W.VTable, self.vtable).EnumEffectsInFile(@ptrCast(*const IDirectInputDevice7W, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice7W_WriteEffectToFile(self: *const T, param0: [*:0]const u16, param1: u32, param2: *DIFILEEFFECT, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice7W.VTable, self.vtable).WriteEffectToFile(@ptrCast(*const IDirectInputDevice7W, self), param0, param1, param2, param3);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IDirectInputDevice7A = extern struct {
    pub const VTable = extern struct {
        base: IDirectInputDevice2A.VTable,
        EnumEffectsInFile: fn(
            self: *const IDirectInputDevice7A,
            param0: [*:0]const u8,
            param1: LPDIENUMEFFECTSINFILECALLBACK,
            param2: *c_void,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteEffectToFile: fn(
            self: *const IDirectInputDevice7A,
            param0: [*:0]const u8,
            param1: u32,
            param2: *DIFILEEFFECT,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectInputDevice2A.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice7A_EnumEffectsInFile(self: *const T, param0: [*:0]const u8, param1: LPDIENUMEFFECTSINFILECALLBACK, param2: *c_void, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice7A.VTable, self.vtable).EnumEffectsInFile(@ptrCast(*const IDirectInputDevice7A, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice7A_WriteEffectToFile(self: *const T, param0: [*:0]const u8, param1: u32, param2: *DIFILEEFFECT, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice7A.VTable, self.vtable).WriteEffectToFile(@ptrCast(*const IDirectInputDevice7A, self), param0, param1, param2, param3);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IDirectInputDevice8W = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCapabilities: fn(
            self: *const IDirectInputDevice8W,
            param0: *DIDEVCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumObjects: fn(
            self: *const IDirectInputDevice8W,
            param0: LPDIENUMDEVICEOBJECTSCALLBACKW,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IDirectInputDevice8W,
            param0: *const Guid,
            param1: *DIPROPHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IDirectInputDevice8W,
            param0: *const Guid,
            param1: *DIPROPHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Acquire: fn(
            self: *const IDirectInputDevice8W,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unacquire: fn(
            self: *const IDirectInputDevice8W,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceState: fn(
            self: *const IDirectInputDevice8W,
            param0: u32,
            param1: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceData: fn(
            self: *const IDirectInputDevice8W,
            param0: u32,
            param1: *DIDEVICEOBJECTDATA,
            param2: *u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDataFormat: fn(
            self: *const IDirectInputDevice8W,
            param0: *DIDATAFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEventNotification: fn(
            self: *const IDirectInputDevice8W,
            param0: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCooperativeLevel: fn(
            self: *const IDirectInputDevice8W,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectInfo: fn(
            self: *const IDirectInputDevice8W,
            param0: *DIDEVICEOBJECTINSTANCEW,
            param1: u32,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceInfo: fn(
            self: *const IDirectInputDevice8W,
            param0: *DIDEVICEINSTANCEW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunControlPanel: fn(
            self: *const IDirectInputDevice8W,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectInputDevice8W,
            param0: HINSTANCE,
            param1: u32,
            param2: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEffect: fn(
            self: *const IDirectInputDevice8W,
            param0: *const Guid,
            param1: *DIEFFECT,
            param2: **IDirectInputEffect,
            param3: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumEffects: fn(
            self: *const IDirectInputDevice8W,
            param0: LPDIENUMEFFECTSCALLBACKW,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectInfo: fn(
            self: *const IDirectInputDevice8W,
            param0: *DIEFFECTINFOW,
            param1: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForceFeedbackState: fn(
            self: *const IDirectInputDevice8W,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendForceFeedbackCommand: fn(
            self: *const IDirectInputDevice8W,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCreatedEffectObjects: fn(
            self: *const IDirectInputDevice8W,
            param0: LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Escape: fn(
            self: *const IDirectInputDevice8W,
            param0: *DIEFFESCAPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Poll: fn(
            self: *const IDirectInputDevice8W,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendDeviceData: fn(
            self: *const IDirectInputDevice8W,
            param0: u32,
            param1: *DIDEVICEOBJECTDATA,
            param2: *u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumEffectsInFile: fn(
            self: *const IDirectInputDevice8W,
            param0: [*:0]const u16,
            param1: LPDIENUMEFFECTSINFILECALLBACK,
            param2: *c_void,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteEffectToFile: fn(
            self: *const IDirectInputDevice8W,
            param0: [*:0]const u16,
            param1: u32,
            param2: *DIFILEEFFECT,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BuildActionMap: fn(
            self: *const IDirectInputDevice8W,
            param0: *DIACTIONFORMATW,
            param1: [*:0]const u16,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActionMap: fn(
            self: *const IDirectInputDevice8W,
            param0: *DIACTIONFORMATW,
            param1: [*:0]const u16,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImageInfo: fn(
            self: *const IDirectInputDevice8W,
            param0: *DIDEVICEIMAGEINFOHEADERW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_GetCapabilities(self: *const T, param0: *DIDEVCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).GetCapabilities(@ptrCast(*const IDirectInputDevice8W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_EnumObjects(self: *const T, param0: LPDIENUMDEVICEOBJECTSCALLBACKW, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).EnumObjects(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_GetProperty(self: *const T, param0: *const Guid, param1: *DIPROPHEADER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).GetProperty(@ptrCast(*const IDirectInputDevice8W, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_SetProperty(self: *const T, param0: *const Guid, param1: *DIPROPHEADER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).SetProperty(@ptrCast(*const IDirectInputDevice8W, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_Acquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).Acquire(@ptrCast(*const IDirectInputDevice8W, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_Unacquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).Unacquire(@ptrCast(*const IDirectInputDevice8W, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_GetDeviceState(self: *const T, param0: u32, param1: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).GetDeviceState(@ptrCast(*const IDirectInputDevice8W, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_GetDeviceData(self: *const T, param0: u32, param1: *DIDEVICEOBJECTDATA, param2: *u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).GetDeviceData(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_SetDataFormat(self: *const T, param0: *DIDATAFORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).SetDataFormat(@ptrCast(*const IDirectInputDevice8W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_SetEventNotification(self: *const T, param0: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).SetEventNotification(@ptrCast(*const IDirectInputDevice8W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_SetCooperativeLevel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).SetCooperativeLevel(@ptrCast(*const IDirectInputDevice8W, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_GetObjectInfo(self: *const T, param0: *DIDEVICEOBJECTINSTANCEW, param1: u32, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).GetObjectInfo(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_GetDeviceInfo(self: *const T, param0: *DIDEVICEINSTANCEW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).GetDeviceInfo(@ptrCast(*const IDirectInputDevice8W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_RunControlPanel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).RunControlPanel(@ptrCast(*const IDirectInputDevice8W, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_Initialize(self: *const T, param0: HINSTANCE, param1: u32, param2: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).Initialize(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_CreateEffect(self: *const T, param0: *const Guid, param1: *DIEFFECT, param2: **IDirectInputEffect, param3: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).CreateEffect(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_EnumEffects(self: *const T, param0: LPDIENUMEFFECTSCALLBACKW, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).EnumEffects(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_GetEffectInfo(self: *const T, param0: *DIEFFECTINFOW, param1: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).GetEffectInfo(@ptrCast(*const IDirectInputDevice8W, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_GetForceFeedbackState(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).GetForceFeedbackState(@ptrCast(*const IDirectInputDevice8W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_SendForceFeedbackCommand(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).SendForceFeedbackCommand(@ptrCast(*const IDirectInputDevice8W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_EnumCreatedEffectObjects(self: *const T, param0: LPDIENUMCREATEDEFFECTOBJECTSCALLBACK, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).EnumCreatedEffectObjects(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_Escape(self: *const T, param0: *DIEFFESCAPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).Escape(@ptrCast(*const IDirectInputDevice8W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_Poll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).Poll(@ptrCast(*const IDirectInputDevice8W, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_SendDeviceData(self: *const T, param0: u32, param1: *DIDEVICEOBJECTDATA, param2: *u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).SendDeviceData(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_EnumEffectsInFile(self: *const T, param0: [*:0]const u16, param1: LPDIENUMEFFECTSINFILECALLBACK, param2: *c_void, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).EnumEffectsInFile(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_WriteEffectToFile(self: *const T, param0: [*:0]const u16, param1: u32, param2: *DIFILEEFFECT, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).WriteEffectToFile(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_BuildActionMap(self: *const T, param0: *DIACTIONFORMATW, param1: [*:0]const u16, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).BuildActionMap(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_SetActionMap(self: *const T, param0: *DIACTIONFORMATW, param1: [*:0]const u16, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).SetActionMap(@ptrCast(*const IDirectInputDevice8W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8W_GetImageInfo(self: *const T, param0: *DIDEVICEIMAGEINFOHEADERW) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8W.VTable, self.vtable).GetImageInfo(@ptrCast(*const IDirectInputDevice8W, self), param0);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IDirectInputDevice8A = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCapabilities: fn(
            self: *const IDirectInputDevice8A,
            param0: *DIDEVCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumObjects: fn(
            self: *const IDirectInputDevice8A,
            param0: LPDIENUMDEVICEOBJECTSCALLBACKA,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IDirectInputDevice8A,
            param0: *const Guid,
            param1: *DIPROPHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IDirectInputDevice8A,
            param0: *const Guid,
            param1: *DIPROPHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Acquire: fn(
            self: *const IDirectInputDevice8A,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unacquire: fn(
            self: *const IDirectInputDevice8A,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceState: fn(
            self: *const IDirectInputDevice8A,
            param0: u32,
            param1: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceData: fn(
            self: *const IDirectInputDevice8A,
            param0: u32,
            param1: *DIDEVICEOBJECTDATA,
            param2: *u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDataFormat: fn(
            self: *const IDirectInputDevice8A,
            param0: *DIDATAFORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEventNotification: fn(
            self: *const IDirectInputDevice8A,
            param0: HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCooperativeLevel: fn(
            self: *const IDirectInputDevice8A,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectInfo: fn(
            self: *const IDirectInputDevice8A,
            param0: *DIDEVICEOBJECTINSTANCEA,
            param1: u32,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceInfo: fn(
            self: *const IDirectInputDevice8A,
            param0: *DIDEVICEINSTANCEA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunControlPanel: fn(
            self: *const IDirectInputDevice8A,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectInputDevice8A,
            param0: HINSTANCE,
            param1: u32,
            param2: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEffect: fn(
            self: *const IDirectInputDevice8A,
            param0: *const Guid,
            param1: *DIEFFECT,
            param2: **IDirectInputEffect,
            param3: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumEffects: fn(
            self: *const IDirectInputDevice8A,
            param0: LPDIENUMEFFECTSCALLBACKA,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectInfo: fn(
            self: *const IDirectInputDevice8A,
            param0: *DIEFFECTINFOA,
            param1: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForceFeedbackState: fn(
            self: *const IDirectInputDevice8A,
            param0: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendForceFeedbackCommand: fn(
            self: *const IDirectInputDevice8A,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCreatedEffectObjects: fn(
            self: *const IDirectInputDevice8A,
            param0: LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,
            param1: *c_void,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Escape: fn(
            self: *const IDirectInputDevice8A,
            param0: *DIEFFESCAPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Poll: fn(
            self: *const IDirectInputDevice8A,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendDeviceData: fn(
            self: *const IDirectInputDevice8A,
            param0: u32,
            param1: *DIDEVICEOBJECTDATA,
            param2: *u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumEffectsInFile: fn(
            self: *const IDirectInputDevice8A,
            param0: [*:0]const u8,
            param1: LPDIENUMEFFECTSINFILECALLBACK,
            param2: *c_void,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteEffectToFile: fn(
            self: *const IDirectInputDevice8A,
            param0: [*:0]const u8,
            param1: u32,
            param2: *DIFILEEFFECT,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BuildActionMap: fn(
            self: *const IDirectInputDevice8A,
            param0: *DIACTIONFORMATA,
            param1: [*:0]const u8,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActionMap: fn(
            self: *const IDirectInputDevice8A,
            param0: *DIACTIONFORMATA,
            param1: [*:0]const u8,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImageInfo: fn(
            self: *const IDirectInputDevice8A,
            param0: *DIDEVICEIMAGEINFOHEADERA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_GetCapabilities(self: *const T, param0: *DIDEVCAPS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).GetCapabilities(@ptrCast(*const IDirectInputDevice8A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_EnumObjects(self: *const T, param0: LPDIENUMDEVICEOBJECTSCALLBACKA, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).EnumObjects(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_GetProperty(self: *const T, param0: *const Guid, param1: *DIPROPHEADER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).GetProperty(@ptrCast(*const IDirectInputDevice8A, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_SetProperty(self: *const T, param0: *const Guid, param1: *DIPROPHEADER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).SetProperty(@ptrCast(*const IDirectInputDevice8A, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_Acquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).Acquire(@ptrCast(*const IDirectInputDevice8A, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_Unacquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).Unacquire(@ptrCast(*const IDirectInputDevice8A, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_GetDeviceState(self: *const T, param0: u32, param1: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).GetDeviceState(@ptrCast(*const IDirectInputDevice8A, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_GetDeviceData(self: *const T, param0: u32, param1: *DIDEVICEOBJECTDATA, param2: *u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).GetDeviceData(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_SetDataFormat(self: *const T, param0: *DIDATAFORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).SetDataFormat(@ptrCast(*const IDirectInputDevice8A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_SetEventNotification(self: *const T, param0: HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).SetEventNotification(@ptrCast(*const IDirectInputDevice8A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_SetCooperativeLevel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).SetCooperativeLevel(@ptrCast(*const IDirectInputDevice8A, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_GetObjectInfo(self: *const T, param0: *DIDEVICEOBJECTINSTANCEA, param1: u32, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).GetObjectInfo(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_GetDeviceInfo(self: *const T, param0: *DIDEVICEINSTANCEA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).GetDeviceInfo(@ptrCast(*const IDirectInputDevice8A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_RunControlPanel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).RunControlPanel(@ptrCast(*const IDirectInputDevice8A, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_Initialize(self: *const T, param0: HINSTANCE, param1: u32, param2: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).Initialize(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_CreateEffect(self: *const T, param0: *const Guid, param1: *DIEFFECT, param2: **IDirectInputEffect, param3: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).CreateEffect(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_EnumEffects(self: *const T, param0: LPDIENUMEFFECTSCALLBACKA, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).EnumEffects(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_GetEffectInfo(self: *const T, param0: *DIEFFECTINFOA, param1: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).GetEffectInfo(@ptrCast(*const IDirectInputDevice8A, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_GetForceFeedbackState(self: *const T, param0: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).GetForceFeedbackState(@ptrCast(*const IDirectInputDevice8A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_SendForceFeedbackCommand(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).SendForceFeedbackCommand(@ptrCast(*const IDirectInputDevice8A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_EnumCreatedEffectObjects(self: *const T, param0: LPDIENUMCREATEDEFFECTOBJECTSCALLBACK, param1: *c_void, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).EnumCreatedEffectObjects(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_Escape(self: *const T, param0: *DIEFFESCAPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).Escape(@ptrCast(*const IDirectInputDevice8A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_Poll(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).Poll(@ptrCast(*const IDirectInputDevice8A, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_SendDeviceData(self: *const T, param0: u32, param1: *DIDEVICEOBJECTDATA, param2: *u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).SendDeviceData(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_EnumEffectsInFile(self: *const T, param0: [*:0]const u8, param1: LPDIENUMEFFECTSINFILECALLBACK, param2: *c_void, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).EnumEffectsInFile(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_WriteEffectToFile(self: *const T, param0: [*:0]const u8, param1: u32, param2: *DIFILEEFFECT, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).WriteEffectToFile(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_BuildActionMap(self: *const T, param0: *DIACTIONFORMATA, param1: [*:0]const u8, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).BuildActionMap(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_SetActionMap(self: *const T, param0: *DIACTIONFORMATA, param1: [*:0]const u8, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).SetActionMap(@ptrCast(*const IDirectInputDevice8A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputDevice8A_GetImageInfo(self: *const T, param0: *DIDEVICEIMAGEINFOHEADERA) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputDevice8A.VTable, self.vtable).GetImageInfo(@ptrCast(*const IDirectInputDevice8A, self), param0);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DIMOUSESTATE = extern struct {
    lX: i32,
    lY: i32,
    lZ: i32,
    rgbButtons: [4]u8,
};

pub const DIMOUSESTATE2 = extern struct {
    lX: i32,
    lY: i32,
    lZ: i32,
    rgbButtons: [8]u8,
};

pub const DIJOYSTATE = extern struct {
    lX: i32,
    lY: i32,
    lZ: i32,
    lRx: i32,
    lRy: i32,
    lRz: i32,
    rglSlider: [2]i32,
    rgdwPOV: [4]u32,
    rgbButtons: [32]u8,
};

pub const DIJOYSTATE2 = extern struct {
    lX: i32,
    lY: i32,
    lZ: i32,
    lRx: i32,
    lRy: i32,
    lRz: i32,
    rglSlider: [2]i32,
    rgdwPOV: [4]u32,
    rgbButtons: [128]u8,
    lVX: i32,
    lVY: i32,
    lVZ: i32,
    lVRx: i32,
    lVRy: i32,
    lVRz: i32,
    rglVSlider: [2]i32,
    lAX: i32,
    lAY: i32,
    lAZ: i32,
    lARx: i32,
    lARy: i32,
    lARz: i32,
    rglASlider: [2]i32,
    lFX: i32,
    lFY: i32,
    lFZ: i32,
    lFRx: i32,
    lFRy: i32,
    lFRz: i32,
    rglFSlider: [2]i32,
};

pub const LPDIENUMDEVICESCALLBACKA = fn(
    param0: *DIDEVICEINSTANCEA,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDIENUMDEVICESCALLBACKW = fn(
    param0: *DIDEVICEINSTANCEW,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDICONFIGUREDEVICESCALLBACK = fn(
    param0: *IUnknown,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDIENUMDEVICESBYSEMANTICSCBA = fn(
    param0: *DIDEVICEINSTANCEA,
    param1: *IDirectInputDevice8A,
    param2: u32,
    param3: u32,
    param4: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDIENUMDEVICESBYSEMANTICSCBW = fn(
    param0: *DIDEVICEINSTANCEW,
    param1: *IDirectInputDevice8W,
    param2: u32,
    param3: u32,
    param4: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const IDirectInputW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateDevice: fn(
            self: *const IDirectInputW,
            param0: *const Guid,
            param1: **IDirectInputDeviceW,
            param2: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDevices: fn(
            self: *const IDirectInputW,
            param0: u32,
            param1: LPDIENUMDEVICESCALLBACKW,
            param2: *c_void,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceStatus: fn(
            self: *const IDirectInputW,
            param0: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunControlPanel: fn(
            self: *const IDirectInputW,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectInputW,
            param0: HINSTANCE,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputW_CreateDevice(self: *const T, param0: *const Guid, param1: **IDirectInputDeviceW, param2: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputW.VTable, self.vtable).CreateDevice(@ptrCast(*const IDirectInputW, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputW_EnumDevices(self: *const T, param0: u32, param1: LPDIENUMDEVICESCALLBACKW, param2: *c_void, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputW.VTable, self.vtable).EnumDevices(@ptrCast(*const IDirectInputW, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputW_GetDeviceStatus(self: *const T, param0: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputW.VTable, self.vtable).GetDeviceStatus(@ptrCast(*const IDirectInputW, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputW_RunControlPanel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputW.VTable, self.vtable).RunControlPanel(@ptrCast(*const IDirectInputW, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputW_Initialize(self: *const T, param0: HINSTANCE, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputW.VTable, self.vtable).Initialize(@ptrCast(*const IDirectInputW, self), param0, param1);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IDirectInputA = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateDevice: fn(
            self: *const IDirectInputA,
            param0: *const Guid,
            param1: **IDirectInputDeviceA,
            param2: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDevices: fn(
            self: *const IDirectInputA,
            param0: u32,
            param1: LPDIENUMDEVICESCALLBACKA,
            param2: *c_void,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceStatus: fn(
            self: *const IDirectInputA,
            param0: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunControlPanel: fn(
            self: *const IDirectInputA,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectInputA,
            param0: HINSTANCE,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputA_CreateDevice(self: *const T, param0: *const Guid, param1: **IDirectInputDeviceA, param2: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputA.VTable, self.vtable).CreateDevice(@ptrCast(*const IDirectInputA, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputA_EnumDevices(self: *const T, param0: u32, param1: LPDIENUMDEVICESCALLBACKA, param2: *c_void, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputA.VTable, self.vtable).EnumDevices(@ptrCast(*const IDirectInputA, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputA_GetDeviceStatus(self: *const T, param0: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputA.VTable, self.vtable).GetDeviceStatus(@ptrCast(*const IDirectInputA, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputA_RunControlPanel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputA.VTable, self.vtable).RunControlPanel(@ptrCast(*const IDirectInputA, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputA_Initialize(self: *const T, param0: HINSTANCE, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputA.VTable, self.vtable).Initialize(@ptrCast(*const IDirectInputA, self), param0, param1);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IDirectInput2W = extern struct {
    pub const VTable = extern struct {
        base: IDirectInputW.VTable,
        FindDevice: fn(
            self: *const IDirectInput2W,
            param0: *const Guid,
            param1: [*:0]const u16,
            param2: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectInputW.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput2W_FindDevice(self: *const T, param0: *const Guid, param1: [*:0]const u16, param2: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput2W.VTable, self.vtable).FindDevice(@ptrCast(*const IDirectInput2W, self), param0, param1, param2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IDirectInput2A = extern struct {
    pub const VTable = extern struct {
        base: IDirectInputA.VTable,
        FindDevice: fn(
            self: *const IDirectInput2A,
            param0: *const Guid,
            param1: [*:0]const u8,
            param2: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectInputA.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput2A_FindDevice(self: *const T, param0: *const Guid, param1: [*:0]const u8, param2: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput2A.VTable, self.vtable).FindDevice(@ptrCast(*const IDirectInput2A, self), param0, param1, param2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IDirectInput7W = extern struct {
    pub const VTable = extern struct {
        base: IDirectInput2W.VTable,
        CreateDeviceEx: fn(
            self: *const IDirectInput7W,
            param0: *const Guid,
            param1: *const Guid,
            param2: **c_void,
            param3: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectInput2W.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput7W_CreateDeviceEx(self: *const T, param0: *const Guid, param1: *const Guid, param2: **c_void, param3: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput7W.VTable, self.vtable).CreateDeviceEx(@ptrCast(*const IDirectInput7W, self), param0, param1, param2, param3);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IDirectInput7A = extern struct {
    pub const VTable = extern struct {
        base: IDirectInput2A.VTable,
        CreateDeviceEx: fn(
            self: *const IDirectInput7A,
            param0: *const Guid,
            param1: *const Guid,
            param2: **c_void,
            param3: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectInput2A.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput7A_CreateDeviceEx(self: *const T, param0: *const Guid, param1: *const Guid, param2: **c_void, param3: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput7A.VTable, self.vtable).CreateDeviceEx(@ptrCast(*const IDirectInput7A, self), param0, param1, param2, param3);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IDirectInput8W = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateDevice: fn(
            self: *const IDirectInput8W,
            param0: *const Guid,
            param1: **IDirectInputDevice8W,
            param2: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDevices: fn(
            self: *const IDirectInput8W,
            param0: u32,
            param1: LPDIENUMDEVICESCALLBACKW,
            param2: *c_void,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceStatus: fn(
            self: *const IDirectInput8W,
            param0: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunControlPanel: fn(
            self: *const IDirectInput8W,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectInput8W,
            param0: HINSTANCE,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindDevice: fn(
            self: *const IDirectInput8W,
            param0: *const Guid,
            param1: [*:0]const u16,
            param2: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDevicesBySemantics: fn(
            self: *const IDirectInput8W,
            param0: [*:0]const u16,
            param1: *DIACTIONFORMATW,
            param2: LPDIENUMDEVICESBYSEMANTICSCBW,
            param3: *c_void,
            param4: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConfigureDevices: fn(
            self: *const IDirectInput8W,
            param0: LPDICONFIGUREDEVICESCALLBACK,
            param1: *DICONFIGUREDEVICESPARAMSW,
            param2: u32,
            param3: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8W_CreateDevice(self: *const T, param0: *const Guid, param1: **IDirectInputDevice8W, param2: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8W.VTable, self.vtable).CreateDevice(@ptrCast(*const IDirectInput8W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8W_EnumDevices(self: *const T, param0: u32, param1: LPDIENUMDEVICESCALLBACKW, param2: *c_void, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8W.VTable, self.vtable).EnumDevices(@ptrCast(*const IDirectInput8W, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8W_GetDeviceStatus(self: *const T, param0: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8W.VTable, self.vtable).GetDeviceStatus(@ptrCast(*const IDirectInput8W, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8W_RunControlPanel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8W.VTable, self.vtable).RunControlPanel(@ptrCast(*const IDirectInput8W, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8W_Initialize(self: *const T, param0: HINSTANCE, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8W.VTable, self.vtable).Initialize(@ptrCast(*const IDirectInput8W, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8W_FindDevice(self: *const T, param0: *const Guid, param1: [*:0]const u16, param2: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8W.VTable, self.vtable).FindDevice(@ptrCast(*const IDirectInput8W, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8W_EnumDevicesBySemantics(self: *const T, param0: [*:0]const u16, param1: *DIACTIONFORMATW, param2: LPDIENUMDEVICESBYSEMANTICSCBW, param3: *c_void, param4: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8W.VTable, self.vtable).EnumDevicesBySemantics(@ptrCast(*const IDirectInput8W, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8W_ConfigureDevices(self: *const T, param0: LPDICONFIGUREDEVICESCALLBACK, param1: *DICONFIGUREDEVICESPARAMSW, param2: u32, param3: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8W.VTable, self.vtable).ConfigureDevices(@ptrCast(*const IDirectInput8W, self), param0, param1, param2, param3);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IDirectInput8A = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateDevice: fn(
            self: *const IDirectInput8A,
            param0: *const Guid,
            param1: **IDirectInputDevice8A,
            param2: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDevices: fn(
            self: *const IDirectInput8A,
            param0: u32,
            param1: LPDIENUMDEVICESCALLBACKA,
            param2: *c_void,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceStatus: fn(
            self: *const IDirectInput8A,
            param0: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunControlPanel: fn(
            self: *const IDirectInput8A,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IDirectInput8A,
            param0: HINSTANCE,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindDevice: fn(
            self: *const IDirectInput8A,
            param0: *const Guid,
            param1: [*:0]const u8,
            param2: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDevicesBySemantics: fn(
            self: *const IDirectInput8A,
            param0: [*:0]const u8,
            param1: *DIACTIONFORMATA,
            param2: LPDIENUMDEVICESBYSEMANTICSCBA,
            param3: *c_void,
            param4: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConfigureDevices: fn(
            self: *const IDirectInput8A,
            param0: LPDICONFIGUREDEVICESCALLBACK,
            param1: *DICONFIGUREDEVICESPARAMSA,
            param2: u32,
            param3: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8A_CreateDevice(self: *const T, param0: *const Guid, param1: **IDirectInputDevice8A, param2: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8A.VTable, self.vtable).CreateDevice(@ptrCast(*const IDirectInput8A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8A_EnumDevices(self: *const T, param0: u32, param1: LPDIENUMDEVICESCALLBACKA, param2: *c_void, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8A.VTable, self.vtable).EnumDevices(@ptrCast(*const IDirectInput8A, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8A_GetDeviceStatus(self: *const T, param0: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8A.VTable, self.vtable).GetDeviceStatus(@ptrCast(*const IDirectInput8A, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8A_RunControlPanel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8A.VTable, self.vtable).RunControlPanel(@ptrCast(*const IDirectInput8A, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8A_Initialize(self: *const T, param0: HINSTANCE, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8A.VTable, self.vtable).Initialize(@ptrCast(*const IDirectInput8A, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8A_FindDevice(self: *const T, param0: *const Guid, param1: [*:0]const u8, param2: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8A.VTable, self.vtable).FindDevice(@ptrCast(*const IDirectInput8A, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8A_EnumDevicesBySemantics(self: *const T, param0: [*:0]const u8, param1: *DIACTIONFORMATA, param2: LPDIENUMDEVICESBYSEMANTICSCBA, param3: *c_void, param4: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8A.VTable, self.vtable).EnumDevicesBySemantics(@ptrCast(*const IDirectInput8A, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInput8A_ConfigureDevices(self: *const T, param0: LPDICONFIGUREDEVICESCALLBACK, param1: *DICONFIGUREDEVICESPARAMSA, param2: u32, param3: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInput8A.VTable, self.vtable).ConfigureDevices(@ptrCast(*const IDirectInput8A, self), param0, param1, param2, param3);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const LPFNSHOWJOYCPL = fn(
    hWnd: HWND,
) callconv(@import("std").os.windows.WINAPI) void;

pub const DIOBJECTATTRIBUTES = extern struct {
    dwFlags: u32,
    wUsagePage: u16,
    wUsage: u16,
};

pub const DIFFOBJECTATTRIBUTES = extern struct {
    dwFFMaxForce: u32,
    dwFFForceResolution: u32,
};

pub const DIOBJECTCALIBRATION = extern struct {
    lMin: i32,
    lCenter: i32,
    lMax: i32,
};

pub const DIPOVCALIBRATION = extern struct {
    lMin: [5]i32,
    lMax: [5]i32,
};

pub const DIEFFECTATTRIBUTES = extern struct {
    dwEffectId: u32,
    dwEffType: u32,
    dwStaticParams: u32,
    dwDynamicParams: u32,
    dwCoords: u32,
};

pub const DIFFDEVICEATTRIBUTES = extern struct {
    dwFlags: u32,
    dwFFSamplePeriod: u32,
    dwFFMinTimeResolution: u32,
};

pub const DIDRIVERVERSIONS = extern struct {
    dwSize: u32,
    dwFirmwareRevision: u32,
    dwHardwareRevision: u32,
    dwFFDriverVersion: u32,
};

pub const DIDEVICESTATE = extern struct {
    dwSize: u32,
    dwState: u32,
    dwLoad: u32,
};

pub const DIHIDFFINITINFO = extern struct {
    dwSize: u32,
    pwszDeviceInterface: PWSTR,
    GuidInstance: Guid,
};

pub const IDirectInputEffectDriver = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DeviceID: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: u32,
            param2: u32,
            param3: u32,
            param4: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVersions: fn(
            self: *const IDirectInputEffectDriver,
            param0: *DIDRIVERVERSIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Escape: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: u32,
            param2: *DIEFFESCAPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGain: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendForceFeedbackCommand: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForceFeedbackState: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: *DIDEVICESTATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DownloadEffect: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: u32,
            param2: *u32,
            param3: *DIEFFECT,
            param4: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyEffect: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartEffect: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: u32,
            param2: u32,
            param3: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopEffect: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectStatus: fn(
            self: *const IDirectInputEffectDriver,
            param0: u32,
            param1: u32,
            param2: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_DeviceID(self: *const T, param0: u32, param1: u32, param2: u32, param3: u32, param4: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).DeviceID(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_GetVersions(self: *const T, param0: *DIDRIVERVERSIONS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).GetVersions(@ptrCast(*const IDirectInputEffectDriver, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_Escape(self: *const T, param0: u32, param1: u32, param2: *DIEFFESCAPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).Escape(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_SetGain(self: *const T, param0: u32, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).SetGain(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_SendForceFeedbackCommand(self: *const T, param0: u32, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).SendForceFeedbackCommand(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_GetForceFeedbackState(self: *const T, param0: u32, param1: *DIDEVICESTATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).GetForceFeedbackState(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_DownloadEffect(self: *const T, param0: u32, param1: u32, param2: *u32, param3: *DIEFFECT, param4: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).DownloadEffect(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1, param2, param3, param4);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_DestroyEffect(self: *const T, param0: u32, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).DestroyEffect(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_StartEffect(self: *const T, param0: u32, param1: u32, param2: u32, param3: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).StartEffect(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_StopEffect(self: *const T, param0: u32, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).StopEffect(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputEffectDriver_GetEffectStatus(self: *const T, param0: u32, param1: u32, param2: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputEffectDriver.VTable, self.vtable).GetEffectStatus(@ptrCast(*const IDirectInputEffectDriver, self), param0, param1, param2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const LPDIJOYTYPECALLBACK = fn(
    param0: [*:0]const u16,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DIJOYTYPEINFO_DX5 = extern struct {
    dwSize: u32,
    hws: joyreghwsettings_tag,
    clsidConfig: Guid,
    wszDisplayName: [256]u16,
    wszCallout: [260]u16,
};

pub const DIJOYTYPEINFO_DX6 = extern struct {
    dwSize: u32,
    hws: joyreghwsettings_tag,
    clsidConfig: Guid,
    wszDisplayName: [256]u16,
    wszCallout: [260]u16,
    wszHardwareId: [256]u16,
    dwFlags1: u32,
};

pub const DIJOYTYPEINFO = extern struct {
    dwSize: u32,
    hws: joyreghwsettings_tag,
    clsidConfig: Guid,
    wszDisplayName: [256]u16,
    wszCallout: [260]u16,
    wszHardwareId: [256]u16,
    dwFlags1: u32,
    dwFlags2: u32,
    wszMapFile: [256]u16,
};

pub const DIJOYCONFIG_DX5 = extern struct {
    dwSize: u32,
    guidInstance: Guid,
    hwc: joyreghwconfig_tag,
    dwGain: u32,
    wszType: [256]u16,
    wszCallout: [256]u16,
};

pub const DIJOYCONFIG = extern struct {
    dwSize: u32,
    guidInstance: Guid,
    hwc: joyreghwconfig_tag,
    dwGain: u32,
    wszType: [256]u16,
    wszCallout: [256]u16,
    guidGameport: Guid,
};

pub const DIJOYUSERVALUES = extern struct {
    dwSize: u32,
    ruv: joyreguservalues_tag,
    wszGlobalDriver: [256]u16,
    wszGameportEmulator: [256]u16,
};

pub const IDirectInputJoyConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Acquire: fn(
            self: *const IDirectInputJoyConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unacquire: fn(
            self: *const IDirectInputJoyConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCooperativeLevel: fn(
            self: *const IDirectInputJoyConfig,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendNotify: fn(
            self: *const IDirectInputJoyConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumTypes: fn(
            self: *const IDirectInputJoyConfig,
            param0: LPDIJOYTYPECALLBACK,
            param1: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTypeInfo: fn(
            self: *const IDirectInputJoyConfig,
            param0: [*:0]const u16,
            param1: *DIJOYTYPEINFO,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTypeInfo: fn(
            self: *const IDirectInputJoyConfig,
            param0: [*:0]const u16,
            param1: *DIJOYTYPEINFO,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteType: fn(
            self: *const IDirectInputJoyConfig,
            param0: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConfig: fn(
            self: *const IDirectInputJoyConfig,
            param0: u32,
            param1: *DIJOYCONFIG,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConfig: fn(
            self: *const IDirectInputJoyConfig,
            param0: u32,
            param1: *DIJOYCONFIG,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteConfig: fn(
            self: *const IDirectInputJoyConfig,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserValues: fn(
            self: *const IDirectInputJoyConfig,
            param0: *DIJOYUSERVALUES,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUserValues: fn(
            self: *const IDirectInputJoyConfig,
            param0: *DIJOYUSERVALUES,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddNewHardware: fn(
            self: *const IDirectInputJoyConfig,
            param0: HWND,
            param1: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenTypeKey: fn(
            self: *const IDirectInputJoyConfig,
            param0: [*:0]const u16,
            param1: u32,
            param2: *HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenConfigKey: fn(
            self: *const IDirectInputJoyConfig,
            param0: u32,
            param1: u32,
            param2: *HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_Acquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).Acquire(@ptrCast(*const IDirectInputJoyConfig, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_Unacquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).Unacquire(@ptrCast(*const IDirectInputJoyConfig, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_SetCooperativeLevel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).SetCooperativeLevel(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_SendNotify(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).SendNotify(@ptrCast(*const IDirectInputJoyConfig, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_EnumTypes(self: *const T, param0: LPDIJOYTYPECALLBACK, param1: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).EnumTypes(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_GetTypeInfo(self: *const T, param0: [*:0]const u16, param1: *DIJOYTYPEINFO, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).GetTypeInfo(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_SetTypeInfo(self: *const T, param0: [*:0]const u16, param1: *DIJOYTYPEINFO, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).SetTypeInfo(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_DeleteType(self: *const T, param0: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).DeleteType(@ptrCast(*const IDirectInputJoyConfig, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_GetConfig(self: *const T, param0: u32, param1: *DIJOYCONFIG, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).GetConfig(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_SetConfig(self: *const T, param0: u32, param1: *DIJOYCONFIG, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).SetConfig(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_DeleteConfig(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).DeleteConfig(@ptrCast(*const IDirectInputJoyConfig, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_GetUserValues(self: *const T, param0: *DIJOYUSERVALUES, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).GetUserValues(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_SetUserValues(self: *const T, param0: *DIJOYUSERVALUES, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).SetUserValues(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_AddNewHardware(self: *const T, param0: HWND, param1: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).AddNewHardware(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_OpenTypeKey(self: *const T, param0: [*:0]const u16, param1: u32, param2: *HKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).OpenTypeKey(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig_OpenConfigKey(self: *const T, param0: u32, param1: u32, param2: *HKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig.VTable, self.vtable).OpenConfigKey(@ptrCast(*const IDirectInputJoyConfig, self), param0, param1, param2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const IDirectInputJoyConfig8 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Acquire: fn(
            self: *const IDirectInputJoyConfig8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unacquire: fn(
            self: *const IDirectInputJoyConfig8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCooperativeLevel: fn(
            self: *const IDirectInputJoyConfig8,
            param0: HWND,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendNotify: fn(
            self: *const IDirectInputJoyConfig8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumTypes: fn(
            self: *const IDirectInputJoyConfig8,
            param0: LPDIJOYTYPECALLBACK,
            param1: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTypeInfo: fn(
            self: *const IDirectInputJoyConfig8,
            param0: [*:0]const u16,
            param1: *DIJOYTYPEINFO,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTypeInfo: fn(
            self: *const IDirectInputJoyConfig8,
            param0: [*:0]const u16,
            param1: *DIJOYTYPEINFO,
            param2: u32,
            param3: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteType: fn(
            self: *const IDirectInputJoyConfig8,
            param0: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConfig: fn(
            self: *const IDirectInputJoyConfig8,
            param0: u32,
            param1: *DIJOYCONFIG,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConfig: fn(
            self: *const IDirectInputJoyConfig8,
            param0: u32,
            param1: *DIJOYCONFIG,
            param2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteConfig: fn(
            self: *const IDirectInputJoyConfig8,
            param0: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserValues: fn(
            self: *const IDirectInputJoyConfig8,
            param0: *DIJOYUSERVALUES,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUserValues: fn(
            self: *const IDirectInputJoyConfig8,
            param0: *DIJOYUSERVALUES,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddNewHardware: fn(
            self: *const IDirectInputJoyConfig8,
            param0: HWND,
            param1: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenTypeKey: fn(
            self: *const IDirectInputJoyConfig8,
            param0: [*:0]const u16,
            param1: u32,
            param2: *HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenAppStatusKey: fn(
            self: *const IDirectInputJoyConfig8,
            param0: *HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_Acquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).Acquire(@ptrCast(*const IDirectInputJoyConfig8, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_Unacquire(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).Unacquire(@ptrCast(*const IDirectInputJoyConfig8, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_SetCooperativeLevel(self: *const T, param0: HWND, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).SetCooperativeLevel(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_SendNotify(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).SendNotify(@ptrCast(*const IDirectInputJoyConfig8, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_EnumTypes(self: *const T, param0: LPDIJOYTYPECALLBACK, param1: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).EnumTypes(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_GetTypeInfo(self: *const T, param0: [*:0]const u16, param1: *DIJOYTYPEINFO, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).GetTypeInfo(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_SetTypeInfo(self: *const T, param0: [*:0]const u16, param1: *DIJOYTYPEINFO, param2: u32, param3: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).SetTypeInfo(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1, param2, param3);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_DeleteType(self: *const T, param0: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).DeleteType(@ptrCast(*const IDirectInputJoyConfig8, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_GetConfig(self: *const T, param0: u32, param1: *DIJOYCONFIG, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).GetConfig(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_SetConfig(self: *const T, param0: u32, param1: *DIJOYCONFIG, param2: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).SetConfig(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_DeleteConfig(self: *const T, param0: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).DeleteConfig(@ptrCast(*const IDirectInputJoyConfig8, self), param0);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_GetUserValues(self: *const T, param0: *DIJOYUSERVALUES, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).GetUserValues(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_SetUserValues(self: *const T, param0: *DIJOYUSERVALUES, param1: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).SetUserValues(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_AddNewHardware(self: *const T, param0: HWND, param1: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).AddNewHardware(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_OpenTypeKey(self: *const T, param0: [*:0]const u16, param1: u32, param2: *HKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).OpenTypeKey(@ptrCast(*const IDirectInputJoyConfig8, self), param0, param1, param2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectInputJoyConfig8_OpenAppStatusKey(self: *const T, param0: *HKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectInputJoyConfig8.VTable, self.vtable).OpenAppStatusKey(@ptrCast(*const IDirectInputJoyConfig8, self), param0);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const KEYBOARD_INPUT_DATA = extern struct {
    UnitId: u16,
    MakeCode: u16,
    Flags: u16,
    Reserved: u16,
    ExtraInformation: u32,
};

pub const KEYBOARD_TYPEMATIC_PARAMETERS = extern struct {
    UnitId: u16,
    Rate: u16,
    Delay: u16,
};

pub const KEYBOARD_ID = extern struct {
    Type: u8,
    Subtype: u8,
};

pub const KEYBOARD_ATTRIBUTES = extern struct {
    KeyboardIdentifier: KEYBOARD_ID,
    KeyboardMode: u16,
    NumberOfFunctionKeys: u16,
    NumberOfIndicators: u16,
    NumberOfKeysTotal: u16,
    InputDataQueueLength: u32,
    KeyRepeatMinimum: KEYBOARD_TYPEMATIC_PARAMETERS,
    KeyRepeatMaximum: KEYBOARD_TYPEMATIC_PARAMETERS,
};

pub const KEYBOARD_EXTENDED_ATTRIBUTES = extern struct {
    Version: u8,
    FormFactor: u8,
    KeyType: u8,
    PhysicalLayout: u8,
    VendorSpecificPhysicalLayout: u8,
    IETFLanguageTagIndex: u8,
    ImplementedInputAssistControls: u8,
};

pub const KEYBOARD_INDICATOR_PARAMETERS = extern struct {
    UnitId: u16,
    LedFlags: u16,
};

pub const INDICATOR_LIST = extern struct {
    MakeCode: u16,
    IndicatorFlags: u16,
};

pub const KEYBOARD_INDICATOR_TRANSLATION = extern struct {
    NumberOfIndicatorKeys: u16,
    IndicatorList: [1]INDICATOR_LIST,
};

pub const KEYBOARD_UNIT_ID_PARAMETER = extern struct {
    UnitId: u16,
};

pub const KEYBOARD_IME_STATUS = extern struct {
    UnitId: u16,
    ImeOpen: u32,
    ImeConvMode: u32,
};

pub const MOUSE_INPUT_DATA = extern struct {
    UnitId: u16,
    Flags: u16,
    Anonymous: MOUSE_INPUT_DATA._Anonymous_e__Union,
    RawButtons: u32,
    LastX: i32,
    LastY: i32,
    ExtraInformation: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const MOUSE_ATTRIBUTES = extern struct {
    MouseIdentifier: u16,
    NumberOfButtons: u16,
    SampleRate: u16,
    InputDataQueueLength: u32,
};

pub const MOUSE_UNIT_ID_PARAMETER = extern struct {
    UnitId: u16,
};

pub const HIDP_REPORT_TYPE = extern enum(i32) {
    HidP_Input = 0,
    HidP_Output = 1,
    HidP_Feature = 2,
};
pub const HidP_Input = HIDP_REPORT_TYPE.HidP_Input;
pub const HidP_Output = HIDP_REPORT_TYPE.HidP_Output;
pub const HidP_Feature = HIDP_REPORT_TYPE.HidP_Feature;

pub const USAGE_AND_PAGE = extern struct {
    Usage: u16,
    UsagePage: u16,
};

pub const HIDP_BUTTON_CAPS = extern struct {
    UsagePage: u16,
    ReportID: u8,
    IsAlias: u8,
    BitField: u16,
    LinkCollection: u16,
    LinkUsage: u16,
    LinkUsagePage: u16,
    IsRange: u8,
    IsStringRange: u8,
    IsDesignatorRange: u8,
    IsAbsolute: u8,
    Reserved: [10]u32,
    Anonymous: HIDP_BUTTON_CAPS._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const HIDP_VALUE_CAPS = extern struct {
    UsagePage: u16,
    ReportID: u8,
    IsAlias: u8,
    BitField: u16,
    LinkCollection: u16,
    LinkUsage: u16,
    LinkUsagePage: u16,
    IsRange: u8,
    IsStringRange: u8,
    IsDesignatorRange: u8,
    IsAbsolute: u8,
    HasNull: u8,
    Reserved: u8,
    BitSize: u16,
    ReportCount: u16,
    Reserved2: [5]u16,
    UnitsExp: u32,
    Units: u32,
    LogicalMin: i32,
    LogicalMax: i32,
    PhysicalMin: i32,
    PhysicalMax: i32,
    Anonymous: HIDP_VALUE_CAPS._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const HIDP_LINK_COLLECTION_NODE = extern struct {
    LinkUsage: u16,
    LinkUsagePage: u16,
    Parent: u16,
    NumberOfChildren: u16,
    NextSibling: u16,
    FirstChild: u16,
    _bitfield: u32,
    UserContext: *c_void,
};

pub const _HIDP_PREPARSED_DATA = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const HIDP_CAPS = extern struct {
    Usage: u16,
    UsagePage: u16,
    InputReportByteLength: u16,
    OutputReportByteLength: u16,
    FeatureReportByteLength: u16,
    Reserved: [17]u16,
    NumberLinkCollectionNodes: u16,
    NumberInputButtonCaps: u16,
    NumberInputValueCaps: u16,
    NumberInputDataIndices: u16,
    NumberOutputButtonCaps: u16,
    NumberOutputValueCaps: u16,
    NumberOutputDataIndices: u16,
    NumberFeatureButtonCaps: u16,
    NumberFeatureValueCaps: u16,
    NumberFeatureDataIndices: u16,
};

pub const HIDP_DATA = extern struct {
    DataIndex: u16,
    Reserved: u16,
    Anonymous: HIDP_DATA._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const HIDP_UNKNOWN_TOKEN = extern struct {
    Token: u8,
    Reserved: [3]u8,
    BitField: u32,
};

pub const HIDP_EXTENDED_ATTRIBUTES = extern struct {
    NumGlobalUnknowns: u8,
    Reserved: [3]u8,
    GlobalUnknowns: *HIDP_UNKNOWN_TOKEN,
    Data: [1]u32,
};

pub const HIDP_KEYBOARD_DIRECTION = extern enum(i32) {
    HidP_Keyboard_Break = 0,
    HidP_Keyboard_Make = 1,
};
pub const HidP_Keyboard_Break = HIDP_KEYBOARD_DIRECTION.HidP_Keyboard_Break;
pub const HidP_Keyboard_Make = HIDP_KEYBOARD_DIRECTION.HidP_Keyboard_Make;

pub const HIDP_KEYBOARD_MODIFIER_STATE = extern struct {
    Anonymous: HIDP_KEYBOARD_MODIFIER_STATE._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PHIDP_INSERT_SCANCODES = fn(
    Context: ?*c_void,
    NewScanCodes: [*]u8,
    Length: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub const HIDD_CONFIGURATION = extern struct {
    cookie: *c_void,
    size: u32,
    RingBufferSize: u32,
};

pub const HIDD_ATTRIBUTES = extern struct {
    Size: u32,
    VendorID: u16,
    ProductID: u16,
    VersionNumber: u16,
};


//--------------------------------------------------------------------------------
// Section: Functions (44)
//--------------------------------------------------------------------------------
pub extern "DINPUT8" fn DirectInput8Create(
    hinst: HINSTANCE,
    dwVersion: u32,
    riidltf: *const Guid,
    ppvOut: **c_void,
    punkOuter: *IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "HID" fn HidP_GetCaps(
    PreparsedData: ?*c_void,
    Capabilities: *HIDP_CAPS,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetLinkCollectionNodes(
    LinkCollectionNodes: [*]HIDP_LINK_COLLECTION_NODE,
    LinkCollectionNodesLength: *u32,
    PreparsedData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetSpecificButtonCaps(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    ButtonCaps: [*]HIDP_BUTTON_CAPS,
    ButtonCapsLength: *u16,
    PreparsedData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetButtonCaps(
    ReportType: HIDP_REPORT_TYPE,
    ButtonCaps: [*]HIDP_BUTTON_CAPS,
    ButtonCapsLength: *u16,
    PreparsedData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetSpecificValueCaps(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    ValueCaps: [*]HIDP_VALUE_CAPS,
    ValueCapsLength: *u16,
    PreparsedData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetValueCaps(
    ReportType: HIDP_REPORT_TYPE,
    ValueCaps: [*]HIDP_VALUE_CAPS,
    ValueCapsLength: *u16,
    PreparsedData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetExtendedAttributes(
    ReportType: HIDP_REPORT_TYPE,
    DataIndex: u16,
    PreparsedData: ?*c_void,
    Attributes: [*]HIDP_EXTENDED_ATTRIBUTES,
    LengthAttributes: *u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_InitializeReportForID(
    ReportType: HIDP_REPORT_TYPE,
    ReportID: u8,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_SetData(
    ReportType: HIDP_REPORT_TYPE,
    DataList: [*]HIDP_DATA,
    DataLength: *u32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetData(
    ReportType: HIDP_REPORT_TYPE,
    DataList: [*]HIDP_DATA,
    DataLength: *u32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_MaxDataListLength(
    ReportType: HIDP_REPORT_TYPE,
    PreparsedData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HID" fn HidP_SetUsages(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    UsageList: [*:0]u16,
    UsageLength: *u32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_UnsetUsages(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    UsageList: [*:0]u16,
    UsageLength: *u32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetUsages(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    UsageList: [*:0]u16,
    UsageLength: *u32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetUsagesEx(
    ReportType: HIDP_REPORT_TYPE,
    LinkCollection: u16,
    ButtonList: [*]USAGE_AND_PAGE,
    UsageLength: *u32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_MaxUsageListLength(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    PreparsedData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HID" fn HidP_SetUsageValue(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    UsageValue: u32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_SetScaledUsageValue(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    UsageValue: i32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_SetUsageValueArray(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    UsageValue: [*]u8,
    UsageValueByteLength: u16,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetUsageValue(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    UsageValue: *u32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetScaledUsageValue(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    UsageValue: *i32,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_GetUsageValueArray(
    ReportType: HIDP_REPORT_TYPE,
    UsagePage: u16,
    LinkCollection: u16,
    Usage: u16,
    UsageValue: [*]u8,
    UsageValueByteLength: u16,
    PreparsedData: ?*c_void,
    Report: [*]u8,
    ReportLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_UsageListDifference(
    PreviousUsageList: [*:0]u16,
    CurrentUsageList: [*:0]u16,
    BreakUsageList: [*:0]u16,
    MakeUsageList: [*:0]u16,
    UsageListLength: u32,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidP_TranslateUsagesToI8042ScanCodes(
    ChangedUsageList: [*:0]u16,
    UsageListLength: u32,
    KeyAction: HIDP_KEYBOARD_DIRECTION,
    ModifierState: *HIDP_KEYBOARD_MODIFIER_STATE,
    InsertCodesProcedure: PHIDP_INSERT_SCANCODES,
    InsertCodesContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "HID" fn HidD_GetAttributes(
    HidDeviceObject: HANDLE,
    Attributes: *HIDD_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetHidGuid(
    HidGuid: *Guid,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "HID" fn HidD_GetPreparsedData(
    HidDeviceObject: HANDLE,
    PreparsedData: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_FreePreparsedData(
    PreparsedData: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_FlushQueue(
    HidDeviceObject: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetConfiguration(
    HidDeviceObject: HANDLE,
    Configuration: [*]HIDD_CONFIGURATION,
    ConfigurationLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_SetConfiguration(
    HidDeviceObject: HANDLE,
    Configuration: [*]HIDD_CONFIGURATION,
    ConfigurationLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetFeature(
    HidDeviceObject: HANDLE,
    ReportBuffer: [*]u8,
    ReportBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_SetFeature(
    HidDeviceObject: HANDLE,
    ReportBuffer: [*]u8,
    ReportBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetInputReport(
    HidDeviceObject: HANDLE,
    ReportBuffer: [*]u8,
    ReportBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_SetOutputReport(
    HidDeviceObject: HANDLE,
    ReportBuffer: [*]u8,
    ReportBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetNumInputBuffers(
    HidDeviceObject: HANDLE,
    NumberBuffers: *u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_SetNumInputBuffers(
    HidDeviceObject: HANDLE,
    NumberBuffers: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetPhysicalDescriptor(
    HidDeviceObject: HANDLE,
    Buffer: [*]u8,
    BufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetManufacturerString(
    HidDeviceObject: HANDLE,
    Buffer: [*]u8,
    BufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetProductString(
    HidDeviceObject: HANDLE,
    Buffer: [*]u8,
    BufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetIndexedString(
    HidDeviceObject: HANDLE,
    StringIndex: u32,
    Buffer: [*]u8,
    BufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetSerialNumberString(
    HidDeviceObject: HANDLE,
    Buffer: [*]u8,
    BufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;

pub extern "HID" fn HidD_GetMsGenreDescriptor(
    HidDeviceObject: HANDLE,
    Buffer: [*]u8,
    BufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u8;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (22)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const DIACTION = DIACTIONA;
        pub const DIACTIONFORMAT = DIACTIONFORMATA;
        pub const DICONFIGUREDEVICESPARAMS = DICONFIGUREDEVICESPARAMSA;
        pub const DIDEVICEIMAGEINFO = DIDEVICEIMAGEINFOA;
        pub const DIDEVICEIMAGEINFOHEADER = DIDEVICEIMAGEINFOHEADERA;
        pub const DIDEVICEOBJECTINSTANCE_DX3 = DIDEVICEOBJECTINSTANCE_DX3A;
        pub const DIDEVICEOBJECTINSTANCE = DIDEVICEOBJECTINSTANCEA;
        pub const LPDIENUMDEVICEOBJECTSCALLBACK = LPDIENUMDEVICEOBJECTSCALLBACKA;
        pub const DIDEVICEINSTANCE_DX3 = DIDEVICEINSTANCE_DX3A;
        pub const DIDEVICEINSTANCE = DIDEVICEINSTANCEA;
        pub const IDirectInputDevice = IDirectInputDeviceA;
        pub const DIEFFECTINFO = DIEFFECTINFOA;
        pub const LPDIENUMEFFECTSCALLBACK = LPDIENUMEFFECTSCALLBACKA;
        pub const IDirectInputDevice2 = IDirectInputDevice2A;
        pub const IDirectInputDevice7 = IDirectInputDevice7A;
        pub const IDirectInputDevice8 = IDirectInputDevice8A;
        pub const LPDIENUMDEVICESCALLBACK = LPDIENUMDEVICESCALLBACKA;
        pub const LPDIENUMDEVICESBYSEMANTICSCB = LPDIENUMDEVICESBYSEMANTICSCBA;
        pub const IDirectInput = IDirectInputA;
        pub const IDirectInput2 = IDirectInput2A;
        pub const IDirectInput7 = IDirectInput7A;
        pub const IDirectInput8 = IDirectInput8A;
    },
    .wide => struct {
        pub const DIACTION = DIACTIONW;
        pub const DIACTIONFORMAT = DIACTIONFORMATW;
        pub const DICONFIGUREDEVICESPARAMS = DICONFIGUREDEVICESPARAMSW;
        pub const DIDEVICEIMAGEINFO = DIDEVICEIMAGEINFOW;
        pub const DIDEVICEIMAGEINFOHEADER = DIDEVICEIMAGEINFOHEADERW;
        pub const DIDEVICEOBJECTINSTANCE_DX3 = DIDEVICEOBJECTINSTANCE_DX3W;
        pub const DIDEVICEOBJECTINSTANCE = DIDEVICEOBJECTINSTANCEW;
        pub const LPDIENUMDEVICEOBJECTSCALLBACK = LPDIENUMDEVICEOBJECTSCALLBACKW;
        pub const DIDEVICEINSTANCE_DX3 = DIDEVICEINSTANCE_DX3W;
        pub const DIDEVICEINSTANCE = DIDEVICEINSTANCEW;
        pub const IDirectInputDevice = IDirectInputDeviceW;
        pub const DIEFFECTINFO = DIEFFECTINFOW;
        pub const LPDIENUMEFFECTSCALLBACK = LPDIENUMEFFECTSCALLBACKW;
        pub const IDirectInputDevice2 = IDirectInputDevice2W;
        pub const IDirectInputDevice7 = IDirectInputDevice7W;
        pub const IDirectInputDevice8 = IDirectInputDevice8W;
        pub const LPDIENUMDEVICESCALLBACK = LPDIENUMDEVICESCALLBACKW;
        pub const LPDIENUMDEVICESBYSEMANTICSCB = LPDIENUMDEVICESBYSEMANTICSCBW;
        pub const IDirectInput = IDirectInputW;
        pub const IDirectInput2 = IDirectInput2W;
        pub const IDirectInput7 = IDirectInput7W;
        pub const IDirectInput8 = IDirectInput8W;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const DIACTION = *opaque{};
        pub const DIACTIONFORMAT = *opaque{};
        pub const DICONFIGUREDEVICESPARAMS = *opaque{};
        pub const DIDEVICEIMAGEINFO = *opaque{};
        pub const DIDEVICEIMAGEINFOHEADER = *opaque{};
        pub const DIDEVICEOBJECTINSTANCE_DX3 = *opaque{};
        pub const DIDEVICEOBJECTINSTANCE = *opaque{};
        pub const LPDIENUMDEVICEOBJECTSCALLBACK = *opaque{};
        pub const DIDEVICEINSTANCE_DX3 = *opaque{};
        pub const DIDEVICEINSTANCE = *opaque{};
        pub const IDirectInputDevice = *opaque{};
        pub const DIEFFECTINFO = *opaque{};
        pub const LPDIENUMEFFECTSCALLBACK = *opaque{};
        pub const IDirectInputDevice2 = *opaque{};
        pub const IDirectInputDevice7 = *opaque{};
        pub const IDirectInputDevice8 = *opaque{};
        pub const LPDIENUMDEVICESCALLBACK = *opaque{};
        pub const LPDIENUMDEVICESBYSEMANTICSCB = *opaque{};
        pub const IDirectInput = *opaque{};
        pub const IDirectInput2 = *opaque{};
        pub const IDirectInput7 = *opaque{};
        pub const IDirectInput8 = *opaque{};
    } else struct {
        pub const DIACTION = @compileError("'DIACTION' requires that UNICODE be set to true or false in the root module");
        pub const DIACTIONFORMAT = @compileError("'DIACTIONFORMAT' requires that UNICODE be set to true or false in the root module");
        pub const DICONFIGUREDEVICESPARAMS = @compileError("'DICONFIGUREDEVICESPARAMS' requires that UNICODE be set to true or false in the root module");
        pub const DIDEVICEIMAGEINFO = @compileError("'DIDEVICEIMAGEINFO' requires that UNICODE be set to true or false in the root module");
        pub const DIDEVICEIMAGEINFOHEADER = @compileError("'DIDEVICEIMAGEINFOHEADER' requires that UNICODE be set to true or false in the root module");
        pub const DIDEVICEOBJECTINSTANCE_DX3 = @compileError("'DIDEVICEOBJECTINSTANCE_DX3' requires that UNICODE be set to true or false in the root module");
        pub const DIDEVICEOBJECTINSTANCE = @compileError("'DIDEVICEOBJECTINSTANCE' requires that UNICODE be set to true or false in the root module");
        pub const LPDIENUMDEVICEOBJECTSCALLBACK = @compileError("'LPDIENUMDEVICEOBJECTSCALLBACK' requires that UNICODE be set to true or false in the root module");
        pub const DIDEVICEINSTANCE_DX3 = @compileError("'DIDEVICEINSTANCE_DX3' requires that UNICODE be set to true or false in the root module");
        pub const DIDEVICEINSTANCE = @compileError("'DIDEVICEINSTANCE' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInputDevice = @compileError("'IDirectInputDevice' requires that UNICODE be set to true or false in the root module");
        pub const DIEFFECTINFO = @compileError("'DIEFFECTINFO' requires that UNICODE be set to true or false in the root module");
        pub const LPDIENUMEFFECTSCALLBACK = @compileError("'LPDIENUMEFFECTSCALLBACK' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInputDevice2 = @compileError("'IDirectInputDevice2' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInputDevice7 = @compileError("'IDirectInputDevice7' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInputDevice8 = @compileError("'IDirectInputDevice8' requires that UNICODE be set to true or false in the root module");
        pub const LPDIENUMDEVICESCALLBACK = @compileError("'LPDIENUMDEVICESCALLBACK' requires that UNICODE be set to true or false in the root module");
        pub const LPDIENUMDEVICESBYSEMANTICSCB = @compileError("'LPDIENUMDEVICESBYSEMANTICSCB' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInput = @compileError("'IDirectInput' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInput2 = @compileError("'IDirectInput2' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInput7 = @compileError("'IDirectInput7' requires that UNICODE be set to true or false in the root module");
        pub const IDirectInput8 = @compileError("'IDirectInput8' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (18)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const HKEY = @import("windows_programming.zig").HKEY;
const HINSTANCE = @import("system_services.zig").HINSTANCE;
const FILETIME = @import("windows_programming.zig").FILETIME;
const PWSTR = @import("system_services.zig").PWSTR;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const joyreguservalues_tag = @import("multimedia.zig").joyreguservalues_tag;
const PSTR = @import("system_services.zig").PSTR;
const RECT = @import("display_devices.zig").RECT;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const joyreghwsettings_tag = @import("multimedia.zig").joyreghwsettings_tag;
const joyrange_tag = @import("multimedia.zig").joyrange_tag;
const joyreghwconfig_tag = @import("multimedia.zig").joyreghwconfig_tag;
const POINT = @import("display_devices.zig").POINT;
const HANDLE = @import("system_services.zig").HANDLE;
const NTSTATUS = @import("system_services.zig").NTSTATUS;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = LPDIENUMEFFECTSINFILECALLBACK;
    _ = LPDIENUMDEVICEOBJECTSCALLBACKA;
    _ = LPDIENUMDEVICEOBJECTSCALLBACKW;
    _ = LPDIENUMEFFECTSCALLBACKA;
    _ = LPDIENUMEFFECTSCALLBACKW;
    _ = LPDIENUMCREATEDEFFECTOBJECTSCALLBACK;
    _ = LPDIENUMDEVICESCALLBACKA;
    _ = LPDIENUMDEVICESCALLBACKW;
    _ = LPDICONFIGUREDEVICESCALLBACK;
    _ = LPDIENUMDEVICESBYSEMANTICSCBA;
    _ = LPDIENUMDEVICESBYSEMANTICSCBW;
    _ = LPFNSHOWJOYCPL;
    _ = LPDIJOYTYPECALLBACK;
    _ = PHIDP_INSERT_SCANCODES;

    const constant_export_count = 0;
    const type_export_count = 128;
    const enum_value_export_count = 5;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 44;
    const unicode_alias_count = 22;
    const import_count = 18;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (10)
//--------------------------------------------------------------------------------
pub const RM_APP_TYPE = extern enum(i32) {
    RmUnknownApp = 0,
    RmMainWindow = 1,
    RmOtherWindow = 2,
    RmService = 3,
    RmExplorer = 4,
    RmConsole = 5,
    RmCritical = 1000,
};
pub const RmUnknownApp = RM_APP_TYPE.RmUnknownApp;
pub const RmMainWindow = RM_APP_TYPE.RmMainWindow;
pub const RmOtherWindow = RM_APP_TYPE.RmOtherWindow;
pub const RmService = RM_APP_TYPE.RmService;
pub const RmExplorer = RM_APP_TYPE.RmExplorer;
pub const RmConsole = RM_APP_TYPE.RmConsole;
pub const RmCritical = RM_APP_TYPE.RmCritical;

pub const RM_SHUTDOWN_TYPE = extern enum(i32) {
    RmForceShutdown = 1,
    RmShutdownOnlyRegistered = 16,
};
pub const RmForceShutdown = RM_SHUTDOWN_TYPE.RmForceShutdown;
pub const RmShutdownOnlyRegistered = RM_SHUTDOWN_TYPE.RmShutdownOnlyRegistered;

pub const RM_APP_STATUS = extern enum(i32) {
    RmStatusUnknown = 0,
    RmStatusRunning = 1,
    RmStatusStopped = 2,
    RmStatusStoppedOther = 4,
    RmStatusRestarted = 8,
    RmStatusErrorOnStop = 16,
    RmStatusErrorOnRestart = 32,
    RmStatusShutdownMasked = 64,
    RmStatusRestartMasked = 128,
};
pub const RmStatusUnknown = RM_APP_STATUS.RmStatusUnknown;
pub const RmStatusRunning = RM_APP_STATUS.RmStatusRunning;
pub const RmStatusStopped = RM_APP_STATUS.RmStatusStopped;
pub const RmStatusStoppedOther = RM_APP_STATUS.RmStatusStoppedOther;
pub const RmStatusRestarted = RM_APP_STATUS.RmStatusRestarted;
pub const RmStatusErrorOnStop = RM_APP_STATUS.RmStatusErrorOnStop;
pub const RmStatusErrorOnRestart = RM_APP_STATUS.RmStatusErrorOnRestart;
pub const RmStatusShutdownMasked = RM_APP_STATUS.RmStatusShutdownMasked;
pub const RmStatusRestartMasked = RM_APP_STATUS.RmStatusRestartMasked;

pub const RM_REBOOT_REASON = extern enum(i32) {
    RmRebootReasonNone = 0,
    RmRebootReasonPermissionDenied = 1,
    RmRebootReasonSessionMismatch = 2,
    RmRebootReasonCriticalProcess = 4,
    RmRebootReasonCriticalService = 8,
    RmRebootReasonDetectedSelf = 16,
};
pub const RmRebootReasonNone = RM_REBOOT_REASON.RmRebootReasonNone;
pub const RmRebootReasonPermissionDenied = RM_REBOOT_REASON.RmRebootReasonPermissionDenied;
pub const RmRebootReasonSessionMismatch = RM_REBOOT_REASON.RmRebootReasonSessionMismatch;
pub const RmRebootReasonCriticalProcess = RM_REBOOT_REASON.RmRebootReasonCriticalProcess;
pub const RmRebootReasonCriticalService = RM_REBOOT_REASON.RmRebootReasonCriticalService;
pub const RmRebootReasonDetectedSelf = RM_REBOOT_REASON.RmRebootReasonDetectedSelf;

pub const RM_UNIQUE_PROCESS = extern struct {
    dwProcessId: u32,
    ProcessStartTime: FILETIME,
};

pub const RM_PROCESS_INFO = extern struct {
    Process: RM_UNIQUE_PROCESS,
    strAppName: [256]u16,
    strServiceShortName: [64]u16,
    ApplicationType: RM_APP_TYPE,
    AppStatus: u32,
    TSSessionId: u32,
    bRestartable: BOOL,
};

pub const RM_FILTER_TRIGGER = extern enum(i32) {
    RmFilterTriggerInvalid = 0,
    RmFilterTriggerFile = 1,
    RmFilterTriggerProcess = 2,
    RmFilterTriggerService = 3,
};
pub const RmFilterTriggerInvalid = RM_FILTER_TRIGGER.RmFilterTriggerInvalid;
pub const RmFilterTriggerFile = RM_FILTER_TRIGGER.RmFilterTriggerFile;
pub const RmFilterTriggerProcess = RM_FILTER_TRIGGER.RmFilterTriggerProcess;
pub const RmFilterTriggerService = RM_FILTER_TRIGGER.RmFilterTriggerService;

pub const RM_FILTER_ACTION = extern enum(i32) {
    RmInvalidFilterAction = 0,
    RmNoRestart = 1,
    RmNoShutdown = 2,
};
pub const RmInvalidFilterAction = RM_FILTER_ACTION.RmInvalidFilterAction;
pub const RmNoRestart = RM_FILTER_ACTION.RmNoRestart;
pub const RmNoShutdown = RM_FILTER_ACTION.RmNoShutdown;

pub const RM_FILTER_INFO = extern struct {
    FilterAction: RM_FILTER_ACTION,
    FilterTrigger: RM_FILTER_TRIGGER,
    cbNextOffset: u32,
    Anonymous: RM_FILTER_INFO._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const RM_WRITE_STATUS_CALLBACK = fn(
    nPercentComplete: u32,
) callconv(@import("std").os.windows.WINAPI) void;


//--------------------------------------------------------------------------------
// Section: Functions (11)
//--------------------------------------------------------------------------------
pub extern "rstrtmgr" fn RmStartSession(
    pSessionHandle: *u32,
    dwSessionFlags: u32,
    strSessionKey: *u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RstrtMgr" fn RmJoinSession(
    pSessionHandle: *u32,
    strSessionKey: *const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rstrtmgr" fn RmEndSession(
    dwSessionHandle: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rstrtmgr" fn RmRegisterResources(
    dwSessionHandle: u32,
    nFiles: u32,
    rgsFileNames: ?[*]?*?PWSTR,
    nApplications: u32,
    rgApplications: ?[*]RM_UNIQUE_PROCESS,
    nServices: u32,
    rgsServiceNames: ?[*]?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rstrtmgr" fn RmGetList(
    dwSessionHandle: u32,
    pnProcInfoNeeded: *u32,
    pnProcInfo: *u32,
    rgAffectedApps: ?[*]RM_PROCESS_INFO,
    lpdwRebootReasons: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rstrtmgr" fn RmShutdown(
    dwSessionHandle: u32,
    lActionFlags: u32,
    fnStatus: ?RM_WRITE_STATUS_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "rstrtmgr" fn RmRestart(
    dwSessionHandle: u32,
    dwRestartFlags: u32,
    fnStatus: ?RM_WRITE_STATUS_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RstrtMgr" fn RmCancelCurrentTask(
    dwSessionHandle: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RstrtMgr" fn RmAddFilter(
    dwSessionHandle: u32,
    strModuleName: ?[*:0]const u16,
    pProcess: ?*RM_UNIQUE_PROCESS,
    strServiceShortName: ?[*:0]const u16,
    FilterAction: RM_FILTER_ACTION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RstrtMgr" fn RmRemoveFilter(
    dwSessionHandle: u32,
    strModuleName: ?[*:0]const u16,
    pProcess: ?*RM_UNIQUE_PROCESS,
    strServiceShortName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RstrtMgr" fn RmGetFilterList(
    dwSessionHandle: u32,
    pbFilterBuf: ?[*:0]u8,
    cbFilterBuf: u32,
    cbFilterBufNeeded: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (3)
//--------------------------------------------------------------------------------
const FILETIME = @import("windows_programming.zig").FILETIME;
const PWSTR = @import("system_services.zig").PWSTR;
const BOOL = @import("system_services.zig").BOOL;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = RM_WRITE_STATUS_CALLBACK;

    const constant_export_count = 0;
    const type_export_count = 10;
    const enum_value_export_count = 31;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 11;
    const unicode_alias_count = 0;
    const import_count = 3;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (54)
//--------------------------------------------------------------------------------
pub const GUID_EapHost_Default = @import("../zig.zig").Guid.initString("00000000-0000-0000-0000-000000000000");
pub const GUID_EapHost_Cause_MethodDLLNotFound = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000001");
pub const GUID_EapHost_Repair_ContactSysadmin = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000002");
pub const GUID_EapHost_Cause_CertStoreInaccessible = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000004");
pub const GUID_EapHost_Cause_Generic_AuthFailure = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000104");
pub const GUID_EapHost_Cause_IdentityUnknown = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000204");
pub const GUID_EapHost_Cause_SimNotValid = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000304");
pub const GUID_EapHost_Cause_Server_CertExpired = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000005");
pub const GUID_EapHost_Cause_Server_CertInvalid = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000006");
pub const GUID_EapHost_Cause_Server_CertNotFound = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000007");
pub const GUID_EapHost_Cause_Server_CertRevoked = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000008");
pub const GUID_EapHost_Cause_Server_CertOtherError = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000108");
pub const GUID_EapHost_Cause_User_CertExpired = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000009");
pub const GUID_EapHost_Cause_User_CertInvalid = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000000a");
pub const GUID_EapHost_Cause_User_CertNotFound = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000000b");
pub const GUID_EapHost_Cause_User_CertOtherError = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000000c");
pub const GUID_EapHost_Cause_User_CertRejected = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000000d");
pub const GUID_EapHost_Cause_User_CertRevoked = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000000e");
pub const GUID_EapHost_Cause_User_Account_OtherProblem = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000010e");
pub const GUID_EapHost_Cause_User_CredsRejected = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000020e");
pub const GUID_EapHost_Cause_User_Root_CertExpired = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000000f");
pub const GUID_EapHost_Cause_User_Root_CertInvalid = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000010");
pub const GUID_EapHost_Cause_User_Root_CertNotFound = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000011");
pub const GUID_EapHost_Cause_Server_Root_CertNameRequired = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000012");
pub const GUID_EapHost_Cause_Server_Root_CertNotFound = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000112");
pub const GUID_EapHost_Cause_ThirdPartyMethod_Host_Reset = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000212");
pub const GUID_EapHost_Cause_EapQecInaccessible = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000312");
pub const GUID_EapHost_Repair_Server_ClientSelectServerCert = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000018");
pub const GUID_EapHost_Repair_User_AuthFailure = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000019");
pub const GUID_EapHost_Repair_User_GetNewCert = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000001a");
pub const GUID_EapHost_Repair_User_SelectValidCert = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000001b");
pub const GUID_EapHost_Repair_Retry_Authentication = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000011b");
pub const GUID_EapHost_Cause_EapNegotiationFailed = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000001c");
pub const GUID_EapHost_Cause_XmlMalformed = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000001d");
pub const GUID_EapHost_Cause_MethodDoesNotSupportOperation = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000001e");
pub const GUID_EapHost_Repair_ContactAdmin_AuthFailure = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000001f");
pub const GUID_EapHost_Repair_ContactAdmin_IdentityUnknown = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000020");
pub const GUID_EapHost_Repair_ContactAdmin_NegotiationFailed = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000021");
pub const GUID_EapHost_Repair_ContactAdmin_MethodNotFound = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000022");
pub const GUID_EapHost_Repair_RestartNap = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000023");
pub const GUID_EapHost_Repair_ContactAdmin_CertStoreInaccessible = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000024");
pub const GUID_EapHost_Repair_ContactAdmin_InvalidUserAccount = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000025");
pub const GUID_EapHost_Repair_ContactAdmin_RootCertInvalid = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000026");
pub const GUID_EapHost_Repair_ContactAdmin_RootCertNotFound = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000027");
pub const GUID_EapHost_Repair_ContactAdmin_RootExpired = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000028");
pub const GUID_EapHost_Repair_ContactAdmin_CertNameAbsent = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d800000029");
pub const GUID_EapHost_Repair_ContactAdmin_NoSmartCardReader = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000002a");
pub const GUID_EapHost_Cause_No_SmartCardReader_Found = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000002b");
pub const GUID_EapHost_Repair_ContactAdmin_InvalidUserCert = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000002c");
pub const GUID_EapHost_Repair_Method_Not_Support_Sso = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000002d");
pub const GUID_EapHost_Repair_No_ValidSim_Found = @import("../zig.zig").Guid.initString("9612fc67-6150-4209-a85e-a8d80000002e");
pub const GUID_EapHost_Help_ObtainingCerts = @import("../zig.zig").Guid.initString("f535eea3-1bdd-46ca-a2fc-a6655939b7e8");
pub const GUID_EapHost_Help_Troubleshooting = @import("../zig.zig").Guid.initString("33307acf-0698-41ba-b014-ea0a2eb8d0a8");
pub const GUID_EapHost_Cause_Method_Config_Does_Not_Support_Sso = @import("../zig.zig").Guid.initString("da18bd32-004f-41fa-ae08-0bc85e5845ac");

//--------------------------------------------------------------------------------
// Section: Types (68)
//--------------------------------------------------------------------------------
pub const RAS_AUTH_ATTRIBUTE_TYPE = extern enum(i32) {
    raatMinimum = 0,
    raatUserName = 1,
    raatUserPassword = 2,
    raatMD5CHAPPassword = 3,
    raatNASIPAddress = 4,
    raatNASPort = 5,
    raatServiceType = 6,
    raatFramedProtocol = 7,
    raatFramedIPAddress = 8,
    raatFramedIPNetmask = 9,
    raatFramedRouting = 10,
    raatFilterId = 11,
    raatFramedMTU = 12,
    raatFramedCompression = 13,
    raatLoginIPHost = 14,
    raatLoginService = 15,
    raatLoginTCPPort = 16,
    raatUnassigned17 = 17,
    raatReplyMessage = 18,
    raatCallbackNumber = 19,
    raatCallbackId = 20,
    raatUnassigned21 = 21,
    raatFramedRoute = 22,
    raatFramedIPXNetwork = 23,
    raatState = 24,
    raatClass = 25,
    raatVendorSpecific = 26,
    raatSessionTimeout = 27,
    raatIdleTimeout = 28,
    raatTerminationAction = 29,
    raatCalledStationId = 30,
    raatCallingStationId = 31,
    raatNASIdentifier = 32,
    raatProxyState = 33,
    raatLoginLATService = 34,
    raatLoginLATNode = 35,
    raatLoginLATGroup = 36,
    raatFramedAppleTalkLink = 37,
    raatFramedAppleTalkNetwork = 38,
    raatFramedAppleTalkZone = 39,
    raatAcctStatusType = 40,
    raatAcctDelayTime = 41,
    raatAcctInputOctets = 42,
    raatAcctOutputOctets = 43,
    raatAcctSessionId = 44,
    raatAcctAuthentic = 45,
    raatAcctSessionTime = 46,
    raatAcctInputPackets = 47,
    raatAcctOutputPackets = 48,
    raatAcctTerminateCause = 49,
    raatAcctMultiSessionId = 50,
    raatAcctLinkCount = 51,
    raatAcctEventTimeStamp = 55,
    raatMD5CHAPChallenge = 60,
    raatNASPortType = 61,
    raatPortLimit = 62,
    raatLoginLATPort = 63,
    raatTunnelType = 64,
    raatTunnelMediumType = 65,
    raatTunnelClientEndpoint = 66,
    raatTunnelServerEndpoint = 67,
    raatARAPPassword = 70,
    raatARAPFeatures = 71,
    raatARAPZoneAccess = 72,
    raatARAPSecurity = 73,
    raatARAPSecurityData = 74,
    raatPasswordRetry = 75,
    raatPrompt = 76,
    raatConnectInfo = 77,
    raatConfigurationToken = 78,
    raatEAPMessage = 79,
    raatSignature = 80,
    raatARAPChallengeResponse = 84,
    raatAcctInterimInterval = 85,
    raatNASIPv6Address = 95,
    raatFramedInterfaceId = 96,
    raatFramedIPv6Prefix = 97,
    raatLoginIPv6Host = 98,
    raatFramedIPv6Route = 99,
    raatFramedIPv6Pool = 100,
    raatARAPGuestLogon = 8096,
    raatCertificateOID = 8097,
    raatEAPConfiguration = 8098,
    raatPEAPEmbeddedEAPTypeId = 8099,
    raatInnerEAPTypeId = 8099,
    raatPEAPFastRoamedSession = 8100,
    raatFastRoamedSession = 8100,
    raatEAPTLV = 8102,
    raatCredentialsChanged = 8103,
    raatCertificateThumbprint = 8250,
    raatPeerId = 9000,
    raatServerId = 9001,
    raatMethodId = 9002,
    raatEMSK = 9003,
    raatSessionId = 9004,
    raatReserved = -1,
};
pub const raatMinimum = RAS_AUTH_ATTRIBUTE_TYPE.raatMinimum;
pub const raatUserName = RAS_AUTH_ATTRIBUTE_TYPE.raatUserName;
pub const raatUserPassword = RAS_AUTH_ATTRIBUTE_TYPE.raatUserPassword;
pub const raatMD5CHAPPassword = RAS_AUTH_ATTRIBUTE_TYPE.raatMD5CHAPPassword;
pub const raatNASIPAddress = RAS_AUTH_ATTRIBUTE_TYPE.raatNASIPAddress;
pub const raatNASPort = RAS_AUTH_ATTRIBUTE_TYPE.raatNASPort;
pub const raatServiceType = RAS_AUTH_ATTRIBUTE_TYPE.raatServiceType;
pub const raatFramedProtocol = RAS_AUTH_ATTRIBUTE_TYPE.raatFramedProtocol;
pub const raatFramedIPAddress = RAS_AUTH_ATTRIBUTE_TYPE.raatFramedIPAddress;
pub const raatFramedIPNetmask = RAS_AUTH_ATTRIBUTE_TYPE.raatFramedIPNetmask;
pub const raatFramedRouting = RAS_AUTH_ATTRIBUTE_TYPE.raatFramedRouting;
pub const raatFilterId = RAS_AUTH_ATTRIBUTE_TYPE.raatFilterId;
pub const raatFramedMTU = RAS_AUTH_ATTRIBUTE_TYPE.raatFramedMTU;
pub const raatFramedCompression = RAS_AUTH_ATTRIBUTE_TYPE.raatFramedCompression;
pub const raatLoginIPHost = RAS_AUTH_ATTRIBUTE_TYPE.raatLoginIPHost;
pub const raatLoginService = RAS_AUTH_ATTRIBUTE_TYPE.raatLoginService;
pub const raatLoginTCPPort = RAS_AUTH_ATTRIBUTE_TYPE.raatLoginTCPPort;
pub const raatUnassigned17 = RAS_AUTH_ATTRIBUTE_TYPE.raatUnassigned17;
pub const raatReplyMessage = RAS_AUTH_ATTRIBUTE_TYPE.raatReplyMessage;
pub const raatCallbackNumber = RAS_AUTH_ATTRIBUTE_TYPE.raatCallbackNumber;
pub const raatCallbackId = RAS_AUTH_ATTRIBUTE_TYPE.raatCallbackId;
pub const raatUnassigned21 = RAS_AUTH_ATTRIBUTE_TYPE.raatUnassigned21;
pub const raatFramedRoute = RAS_AUTH_ATTRIBUTE_TYPE.raatFramedRoute;
pub const raatFramedIPXNetwork = RAS_AUTH_ATTRIBUTE_TYPE.raatFramedIPXNetwork;
pub const raatState = RAS_AUTH_ATTRIBUTE_TYPE.raatState;
pub const raatClass = RAS_AUTH_ATTRIBUTE_TYPE.raatClass;
pub const raatVendorSpecific = RAS_AUTH_ATTRIBUTE_TYPE.raatVendorSpecific;
pub const raatSessionTimeout = RAS_AUTH_ATTRIBUTE_TYPE.raatSessionTimeout;
pub const raatIdleTimeout = RAS_AUTH_ATTRIBUTE_TYPE.raatIdleTimeout;
pub const raatTerminationAction = RAS_AUTH_ATTRIBUTE_TYPE.raatTerminationAction;
pub const raatCalledStationId = RAS_AUTH_ATTRIBUTE_TYPE.raatCalledStationId;
pub const raatCallingStationId = RAS_AUTH_ATTRIBUTE_TYPE.raatCallingStationId;
pub const raatNASIdentifier = RAS_AUTH_ATTRIBUTE_TYPE.raatNASIdentifier;
pub const raatProxyState = RAS_AUTH_ATTRIBUTE_TYPE.raatProxyState;
pub const raatLoginLATService = RAS_AUTH_ATTRIBUTE_TYPE.raatLoginLATService;
pub const raatLoginLATNode = RAS_AUTH_ATTRIBUTE_TYPE.raatLoginLATNode;
pub const raatLoginLATGroup = RAS_AUTH_ATTRIBUTE_TYPE.raatLoginLATGroup;
pub const raatFramedAppleTalkLink = RAS_AUTH_ATTRIBUTE_TYPE.raatFramedAppleTalkLink;
pub const raatFramedAppleTalkNetwork = RAS_AUTH_ATTRIBUTE_TYPE.raatFramedAppleTalkNetwork;
pub const raatFramedAppleTalkZone = RAS_AUTH_ATTRIBUTE_TYPE.raatFramedAppleTalkZone;
pub const raatAcctStatusType = RAS_AUTH_ATTRIBUTE_TYPE.raatAcctStatusType;
pub const raatAcctDelayTime = RAS_AUTH_ATTRIBUTE_TYPE.raatAcctDelayTime;
pub const raatAcctInputOctets = RAS_AUTH_ATTRIBUTE_TYPE.raatAcctInputOctets;
pub const raatAcctOutputOctets = RAS_AUTH_ATTRIBUTE_TYPE.raatAcctOutputOctets;
pub const raatAcctSessionId = RAS_AUTH_ATTRIBUTE_TYPE.raatAcctSessionId;
pub const raatAcctAuthentic = RAS_AUTH_ATTRIBUTE_TYPE.raatAcctAuthentic;
pub const raatAcctSessionTime = RAS_AUTH_ATTRIBUTE_TYPE.raatAcctSessionTime;
pub const raatAcctInputPackets = RAS_AUTH_ATTRIBUTE_TYPE.raatAcctInputPackets;
pub const raatAcctOutputPackets = RAS_AUTH_ATTRIBUTE_TYPE.raatAcctOutputPackets;
pub const raatAcctTerminateCause = RAS_AUTH_ATTRIBUTE_TYPE.raatAcctTerminateCause;
pub const raatAcctMultiSessionId = RAS_AUTH_ATTRIBUTE_TYPE.raatAcctMultiSessionId;
pub const raatAcctLinkCount = RAS_AUTH_ATTRIBUTE_TYPE.raatAcctLinkCount;
pub const raatAcctEventTimeStamp = RAS_AUTH_ATTRIBUTE_TYPE.raatAcctEventTimeStamp;
pub const raatMD5CHAPChallenge = RAS_AUTH_ATTRIBUTE_TYPE.raatMD5CHAPChallenge;
pub const raatNASPortType = RAS_AUTH_ATTRIBUTE_TYPE.raatNASPortType;
pub const raatPortLimit = RAS_AUTH_ATTRIBUTE_TYPE.raatPortLimit;
pub const raatLoginLATPort = RAS_AUTH_ATTRIBUTE_TYPE.raatLoginLATPort;
pub const raatTunnelType = RAS_AUTH_ATTRIBUTE_TYPE.raatTunnelType;
pub const raatTunnelMediumType = RAS_AUTH_ATTRIBUTE_TYPE.raatTunnelMediumType;
pub const raatTunnelClientEndpoint = RAS_AUTH_ATTRIBUTE_TYPE.raatTunnelClientEndpoint;
pub const raatTunnelServerEndpoint = RAS_AUTH_ATTRIBUTE_TYPE.raatTunnelServerEndpoint;
pub const raatARAPPassword = RAS_AUTH_ATTRIBUTE_TYPE.raatARAPPassword;
pub const raatARAPFeatures = RAS_AUTH_ATTRIBUTE_TYPE.raatARAPFeatures;
pub const raatARAPZoneAccess = RAS_AUTH_ATTRIBUTE_TYPE.raatARAPZoneAccess;
pub const raatARAPSecurity = RAS_AUTH_ATTRIBUTE_TYPE.raatARAPSecurity;
pub const raatARAPSecurityData = RAS_AUTH_ATTRIBUTE_TYPE.raatARAPSecurityData;
pub const raatPasswordRetry = RAS_AUTH_ATTRIBUTE_TYPE.raatPasswordRetry;
pub const raatPrompt = RAS_AUTH_ATTRIBUTE_TYPE.raatPrompt;
pub const raatConnectInfo = RAS_AUTH_ATTRIBUTE_TYPE.raatConnectInfo;
pub const raatConfigurationToken = RAS_AUTH_ATTRIBUTE_TYPE.raatConfigurationToken;
pub const raatEAPMessage = RAS_AUTH_ATTRIBUTE_TYPE.raatEAPMessage;
pub const raatSignature = RAS_AUTH_ATTRIBUTE_TYPE.raatSignature;
pub const raatARAPChallengeResponse = RAS_AUTH_ATTRIBUTE_TYPE.raatARAPChallengeResponse;
pub const raatAcctInterimInterval = RAS_AUTH_ATTRIBUTE_TYPE.raatAcctInterimInterval;
pub const raatNASIPv6Address = RAS_AUTH_ATTRIBUTE_TYPE.raatNASIPv6Address;
pub const raatFramedInterfaceId = RAS_AUTH_ATTRIBUTE_TYPE.raatFramedInterfaceId;
pub const raatFramedIPv6Prefix = RAS_AUTH_ATTRIBUTE_TYPE.raatFramedIPv6Prefix;
pub const raatLoginIPv6Host = RAS_AUTH_ATTRIBUTE_TYPE.raatLoginIPv6Host;
pub const raatFramedIPv6Route = RAS_AUTH_ATTRIBUTE_TYPE.raatFramedIPv6Route;
pub const raatFramedIPv6Pool = RAS_AUTH_ATTRIBUTE_TYPE.raatFramedIPv6Pool;
pub const raatARAPGuestLogon = RAS_AUTH_ATTRIBUTE_TYPE.raatARAPGuestLogon;
pub const raatCertificateOID = RAS_AUTH_ATTRIBUTE_TYPE.raatCertificateOID;
pub const raatEAPConfiguration = RAS_AUTH_ATTRIBUTE_TYPE.raatEAPConfiguration;
pub const raatPEAPEmbeddedEAPTypeId = RAS_AUTH_ATTRIBUTE_TYPE.raatPEAPEmbeddedEAPTypeId;
pub const raatInnerEAPTypeId = RAS_AUTH_ATTRIBUTE_TYPE.raatInnerEAPTypeId;
pub const raatPEAPFastRoamedSession = RAS_AUTH_ATTRIBUTE_TYPE.raatPEAPFastRoamedSession;
pub const raatFastRoamedSession = RAS_AUTH_ATTRIBUTE_TYPE.raatFastRoamedSession;
pub const raatEAPTLV = RAS_AUTH_ATTRIBUTE_TYPE.raatEAPTLV;
pub const raatCredentialsChanged = RAS_AUTH_ATTRIBUTE_TYPE.raatCredentialsChanged;
pub const raatCertificateThumbprint = RAS_AUTH_ATTRIBUTE_TYPE.raatCertificateThumbprint;
pub const raatPeerId = RAS_AUTH_ATTRIBUTE_TYPE.raatPeerId;
pub const raatServerId = RAS_AUTH_ATTRIBUTE_TYPE.raatServerId;
pub const raatMethodId = RAS_AUTH_ATTRIBUTE_TYPE.raatMethodId;
pub const raatEMSK = RAS_AUTH_ATTRIBUTE_TYPE.raatEMSK;
pub const raatSessionId = RAS_AUTH_ATTRIBUTE_TYPE.raatSessionId;
pub const raatReserved = RAS_AUTH_ATTRIBUTE_TYPE.raatReserved;

pub const NgcTicketContext = extern struct {
    wszTicket: [45]u16,
    hKey: ?*c_void,
    hImpersonateToken: HANDLE,
};

pub const RAS_AUTH_ATTRIBUTE = extern struct {
    raaType: RAS_AUTH_ATTRIBUTE_TYPE,
    dwLength: u32,
    Value: *c_void,
};

pub const PPP_EAP_PACKET = extern struct {
    Code: u8,
    Id: u8,
    Length: [2]u8,
    Data: [1]u8,
};

pub const PPP_EAP_INPUT = extern struct {
    dwSizeInBytes: u32,
    fFlags: u32,
    fAuthenticator: BOOL,
    pwszIdentity: PWSTR,
    pwszPassword: PWSTR,
    bInitialId: u8,
    pUserAttributes: *RAS_AUTH_ATTRIBUTE,
    fAuthenticationComplete: BOOL,
    dwAuthResultCode: u32,
    hTokenImpersonateUser: HANDLE,
    fSuccessPacketReceived: BOOL,
    fDataReceivedFromInteractiveUI: BOOL,
    pDataFromInteractiveUI: *u8,
    dwSizeOfDataFromInteractiveUI: u32,
    pConnectionData: *u8,
    dwSizeOfConnectionData: u32,
    pUserData: *u8,
    dwSizeOfUserData: u32,
    hReserved: HANDLE,
    guidConnectionId: Guid,
    isVpn: BOOL,
};

pub const PPP_EAP_ACTION = extern enum(i32) {
    EAPACTION_NoAction = 0,
    EAPACTION_Authenticate = 1,
    EAPACTION_Done = 2,
    EAPACTION_SendAndDone = 3,
    EAPACTION_Send = 4,
    EAPACTION_SendWithTimeout = 5,
    EAPACTION_SendWithTimeoutInteractive = 6,
    EAPACTION_IndicateTLV = 7,
    EAPACTION_IndicateIdentity = 8,
};
pub const EAPACTION_NoAction = PPP_EAP_ACTION.EAPACTION_NoAction;
pub const EAPACTION_Authenticate = PPP_EAP_ACTION.EAPACTION_Authenticate;
pub const EAPACTION_Done = PPP_EAP_ACTION.EAPACTION_Done;
pub const EAPACTION_SendAndDone = PPP_EAP_ACTION.EAPACTION_SendAndDone;
pub const EAPACTION_Send = PPP_EAP_ACTION.EAPACTION_Send;
pub const EAPACTION_SendWithTimeout = PPP_EAP_ACTION.EAPACTION_SendWithTimeout;
pub const EAPACTION_SendWithTimeoutInteractive = PPP_EAP_ACTION.EAPACTION_SendWithTimeoutInteractive;
pub const EAPACTION_IndicateTLV = PPP_EAP_ACTION.EAPACTION_IndicateTLV;
pub const EAPACTION_IndicateIdentity = PPP_EAP_ACTION.EAPACTION_IndicateIdentity;

pub const PPP_EAP_OUTPUT = extern struct {
    dwSizeInBytes: u32,
    Action: PPP_EAP_ACTION,
    dwAuthResultCode: u32,
    pUserAttributes: *RAS_AUTH_ATTRIBUTE,
    fInvokeInteractiveUI: BOOL,
    pUIContextData: *u8,
    dwSizeOfUIContextData: u32,
    fSaveConnectionData: BOOL,
    pConnectionData: *u8,
    dwSizeOfConnectionData: u32,
    fSaveUserData: BOOL,
    pUserData: *u8,
    dwSizeOfUserData: u32,
    pNgcKerbTicket: *NgcTicketContext,
    fSaveToCredMan: BOOL,
};

pub const PPP_EAP_INFO = extern struct {
    dwSizeInBytes: u32,
    dwEapTypeId: u32,
    RasEapInitialize: ?*c_void,
    RasEapBegin: ?*c_void,
    RasEapEnd: ?*c_void,
    RasEapMakeMessage: ?*c_void,
};

pub const LEGACY_IDENTITY_UI_PARAMS = extern struct {
    eapType: u32,
    dwFlags: u32,
    dwSizeofConnectionData: u32,
    pConnectionData: *u8,
    dwSizeofUserData: u32,
    pUserData: *u8,
    dwSizeofUserDataOut: u32,
    pUserDataOut: *u8,
    pwszIdentity: PWSTR,
    dwError: u32,
};

pub const LEGACY_INTERACTIVE_UI_PARAMS = extern struct {
    eapType: u32,
    dwSizeofContextData: u32,
    pContextData: *u8,
    dwSizeofInteractiveUIData: u32,
    pInteractiveUIData: *u8,
    dwError: u32,
};

const IID_IRouterProtocolConfig_Value = @import("../zig.zig").Guid.initString("66A2DB16-D706-11D0-A37B-00C04FC9DA04");
pub const IID_IRouterProtocolConfig = &IID_IRouterProtocolConfig_Value;
pub const IRouterProtocolConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddProtocol: fn(
            self: *const IRouterProtocolConfig,
            pszMachineName: [*:0]const u16,
            dwTransportId: u32,
            dwProtocolId: u32,
            hWnd: HWND,
            dwFlags: u32,
            pRouter: *IUnknown,
            uReserved1: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveProtocol: fn(
            self: *const IRouterProtocolConfig,
            pszMachineName: [*:0]const u16,
            dwTransportId: u32,
            dwProtocolId: u32,
            hWnd: HWND,
            dwFlags: u32,
            pRouter: *IUnknown,
            uReserved1: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRouterProtocolConfig_AddProtocol(self: *const T, pszMachineName: [*:0]const u16, dwTransportId: u32, dwProtocolId: u32, hWnd: HWND, dwFlags: u32, pRouter: *IUnknown, uReserved1: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRouterProtocolConfig.VTable, self.vtable).AddProtocol(@ptrCast(*const IRouterProtocolConfig, self), pszMachineName, dwTransportId, dwProtocolId, hWnd, dwFlags, pRouter, uReserved1);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRouterProtocolConfig_RemoveProtocol(self: *const T, pszMachineName: [*:0]const u16, dwTransportId: u32, dwProtocolId: u32, hWnd: HWND, dwFlags: u32, pRouter: *IUnknown, uReserved1: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRouterProtocolConfig.VTable, self.vtable).RemoveProtocol(@ptrCast(*const IRouterProtocolConfig, self), pszMachineName, dwTransportId, dwProtocolId, hWnd, dwFlags, pRouter, uReserved1);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAuthenticationProviderConfig_Value = @import("../zig.zig").Guid.initString("66A2DB17-D706-11D0-A37B-00C04FC9DA04");
pub const IID_IAuthenticationProviderConfig = &IID_IAuthenticationProviderConfig_Value;
pub const IAuthenticationProviderConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IAuthenticationProviderConfig,
            pszMachineName: [*:0]const u16,
            puConnectionParam: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Uninitialize: fn(
            self: *const IAuthenticationProviderConfig,
            uConnectionParam: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Configure: fn(
            self: *const IAuthenticationProviderConfig,
            uConnectionParam: ?*c_void,
            hWnd: HWND,
            dwFlags: u32,
            uReserved1: ?*c_void,
            uReserved2: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: fn(
            self: *const IAuthenticationProviderConfig,
            uConnectionParam: ?*c_void,
            uReserved1: ?*c_void,
            uReserved2: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Deactivate: fn(
            self: *const IAuthenticationProviderConfig,
            uConnectionParam: ?*c_void,
            uReserved1: ?*c_void,
            uReserved2: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAuthenticationProviderConfig_Initialize(self: *const T, pszMachineName: [*:0]const u16, puConnectionParam: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAuthenticationProviderConfig.VTable, self.vtable).Initialize(@ptrCast(*const IAuthenticationProviderConfig, self), pszMachineName, puConnectionParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAuthenticationProviderConfig_Uninitialize(self: *const T, uConnectionParam: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAuthenticationProviderConfig.VTable, self.vtable).Uninitialize(@ptrCast(*const IAuthenticationProviderConfig, self), uConnectionParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAuthenticationProviderConfig_Configure(self: *const T, uConnectionParam: ?*c_void, hWnd: HWND, dwFlags: u32, uReserved1: ?*c_void, uReserved2: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAuthenticationProviderConfig.VTable, self.vtable).Configure(@ptrCast(*const IAuthenticationProviderConfig, self), uConnectionParam, hWnd, dwFlags, uReserved1, uReserved2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAuthenticationProviderConfig_Activate(self: *const T, uConnectionParam: ?*c_void, uReserved1: ?*c_void, uReserved2: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAuthenticationProviderConfig.VTable, self.vtable).Activate(@ptrCast(*const IAuthenticationProviderConfig, self), uConnectionParam, uReserved1, uReserved2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAuthenticationProviderConfig_Deactivate(self: *const T, uConnectionParam: ?*c_void, uReserved1: ?*c_void, uReserved2: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAuthenticationProviderConfig.VTable, self.vtable).Deactivate(@ptrCast(*const IAuthenticationProviderConfig, self), uConnectionParam, uReserved1, uReserved2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAccountingProviderConfig_Value = @import("../zig.zig").Guid.initString("66A2DB18-D706-11D0-A37B-00C04FC9DA04");
pub const IID_IAccountingProviderConfig = &IID_IAccountingProviderConfig_Value;
pub const IAccountingProviderConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IAccountingProviderConfig,
            pszMachineName: [*:0]const u16,
            puConnectionParam: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Uninitialize: fn(
            self: *const IAccountingProviderConfig,
            uConnectionParam: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Configure: fn(
            self: *const IAccountingProviderConfig,
            uConnectionParam: ?*c_void,
            hWnd: HWND,
            dwFlags: u32,
            uReserved1: ?*c_void,
            uReserved2: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: fn(
            self: *const IAccountingProviderConfig,
            uConnectionParam: ?*c_void,
            uReserved1: ?*c_void,
            uReserved2: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Deactivate: fn(
            self: *const IAccountingProviderConfig,
            uConnectionParam: ?*c_void,
            uReserved1: ?*c_void,
            uReserved2: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAccountingProviderConfig_Initialize(self: *const T, pszMachineName: [*:0]const u16, puConnectionParam: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAccountingProviderConfig.VTable, self.vtable).Initialize(@ptrCast(*const IAccountingProviderConfig, self), pszMachineName, puConnectionParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAccountingProviderConfig_Uninitialize(self: *const T, uConnectionParam: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAccountingProviderConfig.VTable, self.vtable).Uninitialize(@ptrCast(*const IAccountingProviderConfig, self), uConnectionParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAccountingProviderConfig_Configure(self: *const T, uConnectionParam: ?*c_void, hWnd: HWND, dwFlags: u32, uReserved1: ?*c_void, uReserved2: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAccountingProviderConfig.VTable, self.vtable).Configure(@ptrCast(*const IAccountingProviderConfig, self), uConnectionParam, hWnd, dwFlags, uReserved1, uReserved2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAccountingProviderConfig_Activate(self: *const T, uConnectionParam: ?*c_void, uReserved1: ?*c_void, uReserved2: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAccountingProviderConfig.VTable, self.vtable).Activate(@ptrCast(*const IAccountingProviderConfig, self), uConnectionParam, uReserved1, uReserved2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAccountingProviderConfig_Deactivate(self: *const T, uConnectionParam: ?*c_void, uReserved1: ?*c_void, uReserved2: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAccountingProviderConfig.VTable, self.vtable).Deactivate(@ptrCast(*const IAccountingProviderConfig, self), uConnectionParam, uReserved1, uReserved2);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEAPProviderConfig_Value = @import("../zig.zig").Guid.initString("66A2DB19-D706-11D0-A37B-00C04FC9DA04");
pub const IID_IEAPProviderConfig = &IID_IEAPProviderConfig_Value;
pub const IEAPProviderConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IEAPProviderConfig,
            pszMachineName: [*:0]const u16,
            dwEapTypeId: u32,
            puConnectionParam: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Uninitialize: fn(
            self: *const IEAPProviderConfig,
            dwEapTypeId: u32,
            uConnectionParam: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ServerInvokeConfigUI: fn(
            self: *const IEAPProviderConfig,
            dwEapTypeId: u32,
            uConnectionParam: ?*c_void,
            hWnd: HWND,
            uReserved1: ?*c_void,
            uReserved2: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RouterInvokeConfigUI: fn(
            self: *const IEAPProviderConfig,
            dwEapTypeId: u32,
            uConnectionParam: ?*c_void,
            hwndParent: HWND,
            dwFlags: u32,
            pConnectionDataIn: [*:0]u8,
            dwSizeOfConnectionDataIn: u32,
            ppConnectionDataOut: [*]*u8,
            pdwSizeOfConnectionDataOut: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RouterInvokeCredentialsUI: fn(
            self: *const IEAPProviderConfig,
            dwEapTypeId: u32,
            uConnectionParam: ?*c_void,
            hwndParent: HWND,
            dwFlags: u32,
            pConnectionDataIn: [*:0]u8,
            dwSizeOfConnectionDataIn: u32,
            pUserDataIn: [*:0]u8,
            dwSizeOfUserDataIn: u32,
            ppUserDataOut: [*]*u8,
            pdwSizeOfUserDataOut: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEAPProviderConfig_Initialize(self: *const T, pszMachineName: [*:0]const u16, dwEapTypeId: u32, puConnectionParam: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEAPProviderConfig.VTable, self.vtable).Initialize(@ptrCast(*const IEAPProviderConfig, self), pszMachineName, dwEapTypeId, puConnectionParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEAPProviderConfig_Uninitialize(self: *const T, dwEapTypeId: u32, uConnectionParam: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEAPProviderConfig.VTable, self.vtable).Uninitialize(@ptrCast(*const IEAPProviderConfig, self), dwEapTypeId, uConnectionParam);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEAPProviderConfig_ServerInvokeConfigUI(self: *const T, dwEapTypeId: u32, uConnectionParam: ?*c_void, hWnd: HWND, uReserved1: ?*c_void, uReserved2: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEAPProviderConfig.VTable, self.vtable).ServerInvokeConfigUI(@ptrCast(*const IEAPProviderConfig, self), dwEapTypeId, uConnectionParam, hWnd, uReserved1, uReserved2);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEAPProviderConfig_RouterInvokeConfigUI(self: *const T, dwEapTypeId: u32, uConnectionParam: ?*c_void, hwndParent: HWND, dwFlags: u32, pConnectionDataIn: [*:0]u8, dwSizeOfConnectionDataIn: u32, ppConnectionDataOut: [*]*u8, pdwSizeOfConnectionDataOut: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEAPProviderConfig.VTable, self.vtable).RouterInvokeConfigUI(@ptrCast(*const IEAPProviderConfig, self), dwEapTypeId, uConnectionParam, hwndParent, dwFlags, pConnectionDataIn, dwSizeOfConnectionDataIn, ppConnectionDataOut, pdwSizeOfConnectionDataOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEAPProviderConfig_RouterInvokeCredentialsUI(self: *const T, dwEapTypeId: u32, uConnectionParam: ?*c_void, hwndParent: HWND, dwFlags: u32, pConnectionDataIn: [*:0]u8, dwSizeOfConnectionDataIn: u32, pUserDataIn: [*:0]u8, dwSizeOfUserDataIn: u32, ppUserDataOut: [*]*u8, pdwSizeOfUserDataOut: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEAPProviderConfig.VTable, self.vtable).RouterInvokeCredentialsUI(@ptrCast(*const IEAPProviderConfig, self), dwEapTypeId, uConnectionParam, hwndParent, dwFlags, pConnectionDataIn, dwSizeOfConnectionDataIn, pUserDataIn, dwSizeOfUserDataIn, ppUserDataOut, pdwSizeOfUserDataOut);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEAPProviderConfig2_Value = @import("../zig.zig").Guid.initString("D565917A-85C4-4466-856E-671C3742EA9A");
pub const IID_IEAPProviderConfig2 = &IID_IEAPProviderConfig2_Value;
pub const IEAPProviderConfig2 = extern struct {
    pub const VTable = extern struct {
        base: IEAPProviderConfig.VTable,
        ServerInvokeConfigUI2: fn(
            self: *const IEAPProviderConfig2,
            dwEapTypeId: u32,
            uConnectionParam: ?*c_void,
            hWnd: HWND,
            pConfigDataIn: *const u8,
            dwSizeOfConfigDataIn: u32,
            ppConfigDataOut: **u8,
            pdwSizeOfConfigDataOut: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlobalConfig: fn(
            self: *const IEAPProviderConfig2,
            dwEapTypeId: u32,
            ppConfigDataOut: **u8,
            pdwSizeOfConfigDataOut: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IEAPProviderConfig.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEAPProviderConfig2_ServerInvokeConfigUI2(self: *const T, dwEapTypeId: u32, uConnectionParam: ?*c_void, hWnd: HWND, pConfigDataIn: *const u8, dwSizeOfConfigDataIn: u32, ppConfigDataOut: **u8, pdwSizeOfConfigDataOut: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEAPProviderConfig2.VTable, self.vtable).ServerInvokeConfigUI2(@ptrCast(*const IEAPProviderConfig2, self), dwEapTypeId, uConnectionParam, hWnd, pConfigDataIn, dwSizeOfConfigDataIn, ppConfigDataOut, pdwSizeOfConfigDataOut);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEAPProviderConfig2_GetGlobalConfig(self: *const T, dwEapTypeId: u32, ppConfigDataOut: **u8, pdwSizeOfConfigDataOut: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEAPProviderConfig2.VTable, self.vtable).GetGlobalConfig(@ptrCast(*const IEAPProviderConfig2, self), dwEapTypeId, ppConfigDataOut, pdwSizeOfConfigDataOut);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEAPProviderConfig3_Value = @import("../zig.zig").Guid.initString("B78ECD12-68BB-4F86-9BF0-8438DD3BE982");
pub const IID_IEAPProviderConfig3 = &IID_IEAPProviderConfig3_Value;
pub const IEAPProviderConfig3 = extern struct {
    pub const VTable = extern struct {
        base: IEAPProviderConfig2.VTable,
        ServerInvokeCertificateConfigUI: fn(
            self: *const IEAPProviderConfig3,
            dwEapTypeId: u32,
            uConnectionParam: ?*c_void,
            hWnd: HWND,
            pConfigDataIn: *const u8,
            dwSizeOfConfigDataIn: u32,
            ppConfigDataOut: **u8,
            pdwSizeOfConfigDataOut: *u32,
            uReserved: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IEAPProviderConfig2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEAPProviderConfig3_ServerInvokeCertificateConfigUI(self: *const T, dwEapTypeId: u32, uConnectionParam: ?*c_void, hWnd: HWND, pConfigDataIn: *const u8, dwSizeOfConfigDataIn: u32, ppConfigDataOut: **u8, pdwSizeOfConfigDataOut: *u32, uReserved: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEAPProviderConfig3.VTable, self.vtable).ServerInvokeCertificateConfigUI(@ptrCast(*const IEAPProviderConfig3, self), dwEapTypeId, uConnectionParam, hWnd, pConfigDataIn, dwSizeOfConfigDataIn, ppConfigDataOut, pdwSizeOfConfigDataOut, uReserved);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const EAP_TYPE = extern struct {
    type: u8,
    dwVendorId: u32,
    dwVendorType: u32,
};

pub const EAP_METHOD_TYPE = extern struct {
    eapType: EAP_TYPE,
    dwAuthorId: u32,
};

pub const EAP_METHOD_INFO = extern struct {
    eaptype: EAP_METHOD_TYPE,
    pwszAuthorName: PWSTR,
    pwszFriendlyName: PWSTR,
    eapProperties: u32,
    pInnerMethodInfo: *EAP_METHOD_INFO,
};

pub const EAP_METHOD_INFO_EX = extern struct {
    eaptype: EAP_METHOD_TYPE,
    pwszAuthorName: PWSTR,
    pwszFriendlyName: PWSTR,
    eapProperties: u32,
    pInnerMethodInfoArray: *EAP_METHOD_INFO_ARRAY_EX,
};

pub const EAP_METHOD_INFO_ARRAY = extern struct {
    dwNumberOfMethods: u32,
    pEapMethods: *EAP_METHOD_INFO,
};

pub const EAP_METHOD_INFO_ARRAY_EX = extern struct {
    dwNumberOfMethods: u32,
    pEapMethods: *EAP_METHOD_INFO_EX,
};

pub const EAP_ERROR = extern struct {
    dwWinError: u32,
    type: EAP_METHOD_TYPE,
    dwReasonCode: u32,
    rootCauseGuid: Guid,
    repairGuid: Guid,
    helpLinkGuid: Guid,
    pRootCauseString: PWSTR,
    pRepairString: PWSTR,
};

pub const EAP_ATTRIBUTE_TYPE = extern enum(i32) {
    eatMinimum = 0,
    eatUserName = 1,
    eatUserPassword = 2,
    eatMD5CHAPPassword = 3,
    eatNASIPAddress = 4,
    eatNASPort = 5,
    eatServiceType = 6,
    eatFramedProtocol = 7,
    eatFramedIPAddress = 8,
    eatFramedIPNetmask = 9,
    eatFramedRouting = 10,
    eatFilterId = 11,
    eatFramedMTU = 12,
    eatFramedCompression = 13,
    eatLoginIPHost = 14,
    eatLoginService = 15,
    eatLoginTCPPort = 16,
    eatUnassigned17 = 17,
    eatReplyMessage = 18,
    eatCallbackNumber = 19,
    eatCallbackId = 20,
    eatUnassigned21 = 21,
    eatFramedRoute = 22,
    eatFramedIPXNetwork = 23,
    eatState = 24,
    eatClass = 25,
    eatVendorSpecific = 26,
    eatSessionTimeout = 27,
    eatIdleTimeout = 28,
    eatTerminationAction = 29,
    eatCalledStationId = 30,
    eatCallingStationId = 31,
    eatNASIdentifier = 32,
    eatProxyState = 33,
    eatLoginLATService = 34,
    eatLoginLATNode = 35,
    eatLoginLATGroup = 36,
    eatFramedAppleTalkLink = 37,
    eatFramedAppleTalkNetwork = 38,
    eatFramedAppleTalkZone = 39,
    eatAcctStatusType = 40,
    eatAcctDelayTime = 41,
    eatAcctInputOctets = 42,
    eatAcctOutputOctets = 43,
    eatAcctSessionId = 44,
    eatAcctAuthentic = 45,
    eatAcctSessionTime = 46,
    eatAcctInputPackets = 47,
    eatAcctOutputPackets = 48,
    eatAcctTerminateCause = 49,
    eatAcctMultiSessionId = 50,
    eatAcctLinkCount = 51,
    eatAcctEventTimeStamp = 55,
    eatMD5CHAPChallenge = 60,
    eatNASPortType = 61,
    eatPortLimit = 62,
    eatLoginLATPort = 63,
    eatTunnelType = 64,
    eatTunnelMediumType = 65,
    eatTunnelClientEndpoint = 66,
    eatTunnelServerEndpoint = 67,
    eatARAPPassword = 70,
    eatARAPFeatures = 71,
    eatARAPZoneAccess = 72,
    eatARAPSecurity = 73,
    eatARAPSecurityData = 74,
    eatPasswordRetry = 75,
    eatPrompt = 76,
    eatConnectInfo = 77,
    eatConfigurationToken = 78,
    eatEAPMessage = 79,
    eatSignature = 80,
    eatARAPChallengeResponse = 84,
    eatAcctInterimInterval = 85,
    eatNASIPv6Address = 95,
    eatFramedInterfaceId = 96,
    eatFramedIPv6Prefix = 97,
    eatLoginIPv6Host = 98,
    eatFramedIPv6Route = 99,
    eatFramedIPv6Pool = 100,
    eatARAPGuestLogon = 8096,
    eatCertificateOID = 8097,
    eatEAPConfiguration = 8098,
    eatPEAPEmbeddedEAPTypeId = 8099,
    eatPEAPFastRoamedSession = 8100,
    eatFastRoamedSession = 8100,
    eatEAPTLV = 8102,
    eatCredentialsChanged = 8103,
    eatInnerEapMethodType = 8104,
    eatClearTextPassword = 8107,
    eatQuarantineSoH = 8150,
    eatCertificateThumbprint = 8250,
    eatPeerId = 9000,
    eatServerId = 9001,
    eatMethodId = 9002,
    eatEMSK = 9003,
    eatSessionId = 9004,
    eatReserved = -1,
};
pub const eatMinimum = EAP_ATTRIBUTE_TYPE.eatMinimum;
pub const eatUserName = EAP_ATTRIBUTE_TYPE.eatUserName;
pub const eatUserPassword = EAP_ATTRIBUTE_TYPE.eatUserPassword;
pub const eatMD5CHAPPassword = EAP_ATTRIBUTE_TYPE.eatMD5CHAPPassword;
pub const eatNASIPAddress = EAP_ATTRIBUTE_TYPE.eatNASIPAddress;
pub const eatNASPort = EAP_ATTRIBUTE_TYPE.eatNASPort;
pub const eatServiceType = EAP_ATTRIBUTE_TYPE.eatServiceType;
pub const eatFramedProtocol = EAP_ATTRIBUTE_TYPE.eatFramedProtocol;
pub const eatFramedIPAddress = EAP_ATTRIBUTE_TYPE.eatFramedIPAddress;
pub const eatFramedIPNetmask = EAP_ATTRIBUTE_TYPE.eatFramedIPNetmask;
pub const eatFramedRouting = EAP_ATTRIBUTE_TYPE.eatFramedRouting;
pub const eatFilterId = EAP_ATTRIBUTE_TYPE.eatFilterId;
pub const eatFramedMTU = EAP_ATTRIBUTE_TYPE.eatFramedMTU;
pub const eatFramedCompression = EAP_ATTRIBUTE_TYPE.eatFramedCompression;
pub const eatLoginIPHost = EAP_ATTRIBUTE_TYPE.eatLoginIPHost;
pub const eatLoginService = EAP_ATTRIBUTE_TYPE.eatLoginService;
pub const eatLoginTCPPort = EAP_ATTRIBUTE_TYPE.eatLoginTCPPort;
pub const eatUnassigned17 = EAP_ATTRIBUTE_TYPE.eatUnassigned17;
pub const eatReplyMessage = EAP_ATTRIBUTE_TYPE.eatReplyMessage;
pub const eatCallbackNumber = EAP_ATTRIBUTE_TYPE.eatCallbackNumber;
pub const eatCallbackId = EAP_ATTRIBUTE_TYPE.eatCallbackId;
pub const eatUnassigned21 = EAP_ATTRIBUTE_TYPE.eatUnassigned21;
pub const eatFramedRoute = EAP_ATTRIBUTE_TYPE.eatFramedRoute;
pub const eatFramedIPXNetwork = EAP_ATTRIBUTE_TYPE.eatFramedIPXNetwork;
pub const eatState = EAP_ATTRIBUTE_TYPE.eatState;
pub const eatClass = EAP_ATTRIBUTE_TYPE.eatClass;
pub const eatVendorSpecific = EAP_ATTRIBUTE_TYPE.eatVendorSpecific;
pub const eatSessionTimeout = EAP_ATTRIBUTE_TYPE.eatSessionTimeout;
pub const eatIdleTimeout = EAP_ATTRIBUTE_TYPE.eatIdleTimeout;
pub const eatTerminationAction = EAP_ATTRIBUTE_TYPE.eatTerminationAction;
pub const eatCalledStationId = EAP_ATTRIBUTE_TYPE.eatCalledStationId;
pub const eatCallingStationId = EAP_ATTRIBUTE_TYPE.eatCallingStationId;
pub const eatNASIdentifier = EAP_ATTRIBUTE_TYPE.eatNASIdentifier;
pub const eatProxyState = EAP_ATTRIBUTE_TYPE.eatProxyState;
pub const eatLoginLATService = EAP_ATTRIBUTE_TYPE.eatLoginLATService;
pub const eatLoginLATNode = EAP_ATTRIBUTE_TYPE.eatLoginLATNode;
pub const eatLoginLATGroup = EAP_ATTRIBUTE_TYPE.eatLoginLATGroup;
pub const eatFramedAppleTalkLink = EAP_ATTRIBUTE_TYPE.eatFramedAppleTalkLink;
pub const eatFramedAppleTalkNetwork = EAP_ATTRIBUTE_TYPE.eatFramedAppleTalkNetwork;
pub const eatFramedAppleTalkZone = EAP_ATTRIBUTE_TYPE.eatFramedAppleTalkZone;
pub const eatAcctStatusType = EAP_ATTRIBUTE_TYPE.eatAcctStatusType;
pub const eatAcctDelayTime = EAP_ATTRIBUTE_TYPE.eatAcctDelayTime;
pub const eatAcctInputOctets = EAP_ATTRIBUTE_TYPE.eatAcctInputOctets;
pub const eatAcctOutputOctets = EAP_ATTRIBUTE_TYPE.eatAcctOutputOctets;
pub const eatAcctSessionId = EAP_ATTRIBUTE_TYPE.eatAcctSessionId;
pub const eatAcctAuthentic = EAP_ATTRIBUTE_TYPE.eatAcctAuthentic;
pub const eatAcctSessionTime = EAP_ATTRIBUTE_TYPE.eatAcctSessionTime;
pub const eatAcctInputPackets = EAP_ATTRIBUTE_TYPE.eatAcctInputPackets;
pub const eatAcctOutputPackets = EAP_ATTRIBUTE_TYPE.eatAcctOutputPackets;
pub const eatAcctTerminateCause = EAP_ATTRIBUTE_TYPE.eatAcctTerminateCause;
pub const eatAcctMultiSessionId = EAP_ATTRIBUTE_TYPE.eatAcctMultiSessionId;
pub const eatAcctLinkCount = EAP_ATTRIBUTE_TYPE.eatAcctLinkCount;
pub const eatAcctEventTimeStamp = EAP_ATTRIBUTE_TYPE.eatAcctEventTimeStamp;
pub const eatMD5CHAPChallenge = EAP_ATTRIBUTE_TYPE.eatMD5CHAPChallenge;
pub const eatNASPortType = EAP_ATTRIBUTE_TYPE.eatNASPortType;
pub const eatPortLimit = EAP_ATTRIBUTE_TYPE.eatPortLimit;
pub const eatLoginLATPort = EAP_ATTRIBUTE_TYPE.eatLoginLATPort;
pub const eatTunnelType = EAP_ATTRIBUTE_TYPE.eatTunnelType;
pub const eatTunnelMediumType = EAP_ATTRIBUTE_TYPE.eatTunnelMediumType;
pub const eatTunnelClientEndpoint = EAP_ATTRIBUTE_TYPE.eatTunnelClientEndpoint;
pub const eatTunnelServerEndpoint = EAP_ATTRIBUTE_TYPE.eatTunnelServerEndpoint;
pub const eatARAPPassword = EAP_ATTRIBUTE_TYPE.eatARAPPassword;
pub const eatARAPFeatures = EAP_ATTRIBUTE_TYPE.eatARAPFeatures;
pub const eatARAPZoneAccess = EAP_ATTRIBUTE_TYPE.eatARAPZoneAccess;
pub const eatARAPSecurity = EAP_ATTRIBUTE_TYPE.eatARAPSecurity;
pub const eatARAPSecurityData = EAP_ATTRIBUTE_TYPE.eatARAPSecurityData;
pub const eatPasswordRetry = EAP_ATTRIBUTE_TYPE.eatPasswordRetry;
pub const eatPrompt = EAP_ATTRIBUTE_TYPE.eatPrompt;
pub const eatConnectInfo = EAP_ATTRIBUTE_TYPE.eatConnectInfo;
pub const eatConfigurationToken = EAP_ATTRIBUTE_TYPE.eatConfigurationToken;
pub const eatEAPMessage = EAP_ATTRIBUTE_TYPE.eatEAPMessage;
pub const eatSignature = EAP_ATTRIBUTE_TYPE.eatSignature;
pub const eatARAPChallengeResponse = EAP_ATTRIBUTE_TYPE.eatARAPChallengeResponse;
pub const eatAcctInterimInterval = EAP_ATTRIBUTE_TYPE.eatAcctInterimInterval;
pub const eatNASIPv6Address = EAP_ATTRIBUTE_TYPE.eatNASIPv6Address;
pub const eatFramedInterfaceId = EAP_ATTRIBUTE_TYPE.eatFramedInterfaceId;
pub const eatFramedIPv6Prefix = EAP_ATTRIBUTE_TYPE.eatFramedIPv6Prefix;
pub const eatLoginIPv6Host = EAP_ATTRIBUTE_TYPE.eatLoginIPv6Host;
pub const eatFramedIPv6Route = EAP_ATTRIBUTE_TYPE.eatFramedIPv6Route;
pub const eatFramedIPv6Pool = EAP_ATTRIBUTE_TYPE.eatFramedIPv6Pool;
pub const eatARAPGuestLogon = EAP_ATTRIBUTE_TYPE.eatARAPGuestLogon;
pub const eatCertificateOID = EAP_ATTRIBUTE_TYPE.eatCertificateOID;
pub const eatEAPConfiguration = EAP_ATTRIBUTE_TYPE.eatEAPConfiguration;
pub const eatPEAPEmbeddedEAPTypeId = EAP_ATTRIBUTE_TYPE.eatPEAPEmbeddedEAPTypeId;
pub const eatPEAPFastRoamedSession = EAP_ATTRIBUTE_TYPE.eatPEAPFastRoamedSession;
pub const eatFastRoamedSession = EAP_ATTRIBUTE_TYPE.eatFastRoamedSession;
pub const eatEAPTLV = EAP_ATTRIBUTE_TYPE.eatEAPTLV;
pub const eatCredentialsChanged = EAP_ATTRIBUTE_TYPE.eatCredentialsChanged;
pub const eatInnerEapMethodType = EAP_ATTRIBUTE_TYPE.eatInnerEapMethodType;
pub const eatClearTextPassword = EAP_ATTRIBUTE_TYPE.eatClearTextPassword;
pub const eatQuarantineSoH = EAP_ATTRIBUTE_TYPE.eatQuarantineSoH;
pub const eatCertificateThumbprint = EAP_ATTRIBUTE_TYPE.eatCertificateThumbprint;
pub const eatPeerId = EAP_ATTRIBUTE_TYPE.eatPeerId;
pub const eatServerId = EAP_ATTRIBUTE_TYPE.eatServerId;
pub const eatMethodId = EAP_ATTRIBUTE_TYPE.eatMethodId;
pub const eatEMSK = EAP_ATTRIBUTE_TYPE.eatEMSK;
pub const eatSessionId = EAP_ATTRIBUTE_TYPE.eatSessionId;
pub const eatReserved = EAP_ATTRIBUTE_TYPE.eatReserved;

pub const EAP_ATTRIBUTE = extern struct {
    eaType: EAP_ATTRIBUTE_TYPE,
    dwLength: u32,
    pValue: *u8,
};

pub const EAP_ATTRIBUTES = extern struct {
    dwNumberOfAttributes: u32,
    pAttribs: *EAP_ATTRIBUTE,
};

pub const EAP_CONFIG_INPUT_FIELD_TYPE = extern enum(i32) {
    EapConfigInputUsername = 0,
    EapConfigInputPassword = 1,
    EapConfigInputNetworkUsername = 2,
    EapConfigInputNetworkPassword = 3,
    EapConfigInputPin = 4,
    EapConfigInputPSK = 5,
    EapConfigInputEdit = 6,
    EapConfigSmartCardUsername = 7,
    EapConfigSmartCardError = 8,
};
pub const EapConfigInputUsername = EAP_CONFIG_INPUT_FIELD_TYPE.EapConfigInputUsername;
pub const EapConfigInputPassword = EAP_CONFIG_INPUT_FIELD_TYPE.EapConfigInputPassword;
pub const EapConfigInputNetworkUsername = EAP_CONFIG_INPUT_FIELD_TYPE.EapConfigInputNetworkUsername;
pub const EapConfigInputNetworkPassword = EAP_CONFIG_INPUT_FIELD_TYPE.EapConfigInputNetworkPassword;
pub const EapConfigInputPin = EAP_CONFIG_INPUT_FIELD_TYPE.EapConfigInputPin;
pub const EapConfigInputPSK = EAP_CONFIG_INPUT_FIELD_TYPE.EapConfigInputPSK;
pub const EapConfigInputEdit = EAP_CONFIG_INPUT_FIELD_TYPE.EapConfigInputEdit;
pub const EapConfigSmartCardUsername = EAP_CONFIG_INPUT_FIELD_TYPE.EapConfigSmartCardUsername;
pub const EapConfigSmartCardError = EAP_CONFIG_INPUT_FIELD_TYPE.EapConfigSmartCardError;

pub const EAP_CONFIG_INPUT_FIELD_DATA = extern struct {
    dwSize: u32,
    Type: EAP_CONFIG_INPUT_FIELD_TYPE,
    dwFlagProps: u32,
    pwszLabel: PWSTR,
    pwszData: PWSTR,
    dwMinDataLength: u32,
    dwMaxDataLength: u32,
};

pub const EAP_CONFIG_INPUT_FIELD_ARRAY = extern struct {
    dwVersion: u32,
    dwNumberOfFields: u32,
    pFields: *EAP_CONFIG_INPUT_FIELD_DATA,
};

pub const EAP_INTERACTIVE_UI_DATA_TYPE = extern enum(i32) {
    EapCredReq = 0,
    EapCredResp = 1,
    EapCredExpiryReq = 2,
    EapCredExpiryResp = 3,
    EapCredLogonReq = 4,
    EapCredLogonResp = 5,
};
pub const EapCredReq = EAP_INTERACTIVE_UI_DATA_TYPE.EapCredReq;
pub const EapCredResp = EAP_INTERACTIVE_UI_DATA_TYPE.EapCredResp;
pub const EapCredExpiryReq = EAP_INTERACTIVE_UI_DATA_TYPE.EapCredExpiryReq;
pub const EapCredExpiryResp = EAP_INTERACTIVE_UI_DATA_TYPE.EapCredExpiryResp;
pub const EapCredLogonReq = EAP_INTERACTIVE_UI_DATA_TYPE.EapCredLogonReq;
pub const EapCredLogonResp = EAP_INTERACTIVE_UI_DATA_TYPE.EapCredLogonResp;

pub const EAP_CRED_EXPIRY_REQ = extern struct {
    curCreds: EAP_CONFIG_INPUT_FIELD_ARRAY,
    newCreds: EAP_CONFIG_INPUT_FIELD_ARRAY,
};

pub const EAP_UI_DATA_FORMAT = u32; // TODO: implement StructOrUnion types?

pub const EAP_INTERACTIVE_UI_DATA = extern struct {
    dwVersion: u32,
    dwSize: u32,
    dwDataType: EAP_INTERACTIVE_UI_DATA_TYPE,
    cbUiData: u32,
    pbUiData: EAP_UI_DATA_FORMAT,
};

pub const EAP_METHOD_PROPERTY_TYPE = extern enum(i32) {
    emptPropCipherSuiteNegotiation = 0,
    emptPropMutualAuth = 1,
    emptPropIntegrity = 2,
    emptPropReplayProtection = 3,
    emptPropConfidentiality = 4,
    emptPropKeyDerivation = 5,
    emptPropKeyStrength64 = 6,
    emptPropKeyStrength128 = 7,
    emptPropKeyStrength256 = 8,
    emptPropKeyStrength512 = 9,
    emptPropKeyStrength1024 = 10,
    emptPropDictionaryAttackResistance = 11,
    emptPropFastReconnect = 12,
    emptPropCryptoBinding = 13,
    emptPropSessionIndependence = 14,
    emptPropFragmentation = 15,
    emptPropChannelBinding = 16,
    emptPropNap = 17,
    emptPropStandalone = 18,
    emptPropMppeEncryption = 19,
    emptPropTunnelMethod = 20,
    emptPropSupportsConfig = 21,
    emptPropCertifiedMethod = 22,
    emptPropHiddenMethod = 23,
    emptPropMachineAuth = 24,
    emptPropUserAuth = 25,
    emptPropIdentityPrivacy = 26,
    emptPropMethodChaining = 27,
    emptPropSharedStateEquivalence = 28,
    emptLegacyMethodPropertyFlag = 31,
    emptPropVendorSpecific = 255,
};
pub const emptPropCipherSuiteNegotiation = EAP_METHOD_PROPERTY_TYPE.emptPropCipherSuiteNegotiation;
pub const emptPropMutualAuth = EAP_METHOD_PROPERTY_TYPE.emptPropMutualAuth;
pub const emptPropIntegrity = EAP_METHOD_PROPERTY_TYPE.emptPropIntegrity;
pub const emptPropReplayProtection = EAP_METHOD_PROPERTY_TYPE.emptPropReplayProtection;
pub const emptPropConfidentiality = EAP_METHOD_PROPERTY_TYPE.emptPropConfidentiality;
pub const emptPropKeyDerivation = EAP_METHOD_PROPERTY_TYPE.emptPropKeyDerivation;
pub const emptPropKeyStrength64 = EAP_METHOD_PROPERTY_TYPE.emptPropKeyStrength64;
pub const emptPropKeyStrength128 = EAP_METHOD_PROPERTY_TYPE.emptPropKeyStrength128;
pub const emptPropKeyStrength256 = EAP_METHOD_PROPERTY_TYPE.emptPropKeyStrength256;
pub const emptPropKeyStrength512 = EAP_METHOD_PROPERTY_TYPE.emptPropKeyStrength512;
pub const emptPropKeyStrength1024 = EAP_METHOD_PROPERTY_TYPE.emptPropKeyStrength1024;
pub const emptPropDictionaryAttackResistance = EAP_METHOD_PROPERTY_TYPE.emptPropDictionaryAttackResistance;
pub const emptPropFastReconnect = EAP_METHOD_PROPERTY_TYPE.emptPropFastReconnect;
pub const emptPropCryptoBinding = EAP_METHOD_PROPERTY_TYPE.emptPropCryptoBinding;
pub const emptPropSessionIndependence = EAP_METHOD_PROPERTY_TYPE.emptPropSessionIndependence;
pub const emptPropFragmentation = EAP_METHOD_PROPERTY_TYPE.emptPropFragmentation;
pub const emptPropChannelBinding = EAP_METHOD_PROPERTY_TYPE.emptPropChannelBinding;
pub const emptPropNap = EAP_METHOD_PROPERTY_TYPE.emptPropNap;
pub const emptPropStandalone = EAP_METHOD_PROPERTY_TYPE.emptPropStandalone;
pub const emptPropMppeEncryption = EAP_METHOD_PROPERTY_TYPE.emptPropMppeEncryption;
pub const emptPropTunnelMethod = EAP_METHOD_PROPERTY_TYPE.emptPropTunnelMethod;
pub const emptPropSupportsConfig = EAP_METHOD_PROPERTY_TYPE.emptPropSupportsConfig;
pub const emptPropCertifiedMethod = EAP_METHOD_PROPERTY_TYPE.emptPropCertifiedMethod;
pub const emptPropHiddenMethod = EAP_METHOD_PROPERTY_TYPE.emptPropHiddenMethod;
pub const emptPropMachineAuth = EAP_METHOD_PROPERTY_TYPE.emptPropMachineAuth;
pub const emptPropUserAuth = EAP_METHOD_PROPERTY_TYPE.emptPropUserAuth;
pub const emptPropIdentityPrivacy = EAP_METHOD_PROPERTY_TYPE.emptPropIdentityPrivacy;
pub const emptPropMethodChaining = EAP_METHOD_PROPERTY_TYPE.emptPropMethodChaining;
pub const emptPropSharedStateEquivalence = EAP_METHOD_PROPERTY_TYPE.emptPropSharedStateEquivalence;
pub const emptLegacyMethodPropertyFlag = EAP_METHOD_PROPERTY_TYPE.emptLegacyMethodPropertyFlag;
pub const emptPropVendorSpecific = EAP_METHOD_PROPERTY_TYPE.emptPropVendorSpecific;

pub const EAP_METHOD_PROPERTY_VALUE_TYPE = extern enum(i32) {
    empvtBool = 0,
    empvtDword = 1,
    empvtString = 2,
};
pub const empvtBool = EAP_METHOD_PROPERTY_VALUE_TYPE.empvtBool;
pub const empvtDword = EAP_METHOD_PROPERTY_VALUE_TYPE.empvtDword;
pub const empvtString = EAP_METHOD_PROPERTY_VALUE_TYPE.empvtString;

pub const EAP_METHOD_PROPERTY_VALUE_BOOL = extern struct {
    length: u32,
    value: BOOL,
};

pub const EAP_METHOD_PROPERTY_VALUE_DWORD = extern struct {
    length: u32,
    value: u32,
};

pub const EAP_METHOD_PROPERTY_VALUE_STRING = extern struct {
    length: u32,
    value: *u8,
};

pub const EAP_METHOD_PROPERTY_VALUE = u32; // TODO: implement StructOrUnion types?

pub const EAP_METHOD_PROPERTY = extern struct {
    eapMethodPropertyType: EAP_METHOD_PROPERTY_TYPE,
    eapMethodPropertyValueType: EAP_METHOD_PROPERTY_VALUE_TYPE,
    eapMethodPropertyValue: EAP_METHOD_PROPERTY_VALUE,
};

pub const EAP_METHOD_PROPERTY_ARRAY = extern struct {
    dwNumberOfProperties: u32,
    pMethodProperty: *EAP_METHOD_PROPERTY,
};

pub const EAPHOST_IDENTITY_UI_PARAMS = extern struct {
    eapMethodType: EAP_METHOD_TYPE,
    dwFlags: u32,
    dwSizeofConnectionData: u32,
    pConnectionData: *u8,
    dwSizeofUserData: u32,
    pUserData: *u8,
    dwSizeofUserDataOut: u32,
    pUserDataOut: *u8,
    pwszIdentity: PWSTR,
    dwError: u32,
    pEapError: *EAP_ERROR,
};

pub const EAPHOST_INTERACTIVE_UI_PARAMS = extern struct {
    dwSizeofContextData: u32,
    pContextData: *u8,
    dwSizeofInteractiveUIData: u32,
    pInteractiveUIData: *u8,
    dwError: u32,
    pEapError: *EAP_ERROR,
};

pub const EapCredentialType = extern enum(i32) {
    EAP_EMPTY_CREDENTIAL = 0,
    EAP_USERNAME_PASSWORD_CREDENTIAL = 1,
    EAP_WINLOGON_CREDENTIAL = 2,
    EAP_CERTIFICATE_CREDENTIAL = 3,
    EAP_SIM_CREDENTIAL = 4,
};
pub const EAP_EMPTY_CREDENTIAL = EapCredentialType.EAP_EMPTY_CREDENTIAL;
pub const EAP_USERNAME_PASSWORD_CREDENTIAL = EapCredentialType.EAP_USERNAME_PASSWORD_CREDENTIAL;
pub const EAP_WINLOGON_CREDENTIAL = EapCredentialType.EAP_WINLOGON_CREDENTIAL;
pub const EAP_CERTIFICATE_CREDENTIAL = EapCredentialType.EAP_CERTIFICATE_CREDENTIAL;
pub const EAP_SIM_CREDENTIAL = EapCredentialType.EAP_SIM_CREDENTIAL;

pub const EapUsernamePasswordCredential = extern struct {
    username: PWSTR,
    password: PWSTR,
};

pub const EapCertificateCredential = extern struct {
    certHash: [20]u8,
    password: PWSTR,
};

pub const EapSimCredential = extern struct {
    iccID: PWSTR,
};

pub const EapCredentialTypeData = u32; // TODO: implement StructOrUnion types?

pub const EapCredential = extern struct {
    credType: EapCredentialType,
    credData: EapCredentialTypeData,
};

pub const EapHostPeerMethodResultReason = extern enum(i32) {
    EapHostPeerMethodResultAltSuccessReceived = 1,
    EapHostPeerMethodResultTimeout = 2,
    EapHostPeerMethodResultFromMethod = 3,
};
pub const EapHostPeerMethodResultAltSuccessReceived = EapHostPeerMethodResultReason.EapHostPeerMethodResultAltSuccessReceived;
pub const EapHostPeerMethodResultTimeout = EapHostPeerMethodResultReason.EapHostPeerMethodResultTimeout;
pub const EapHostPeerMethodResultFromMethod = EapHostPeerMethodResultReason.EapHostPeerMethodResultFromMethod;

pub const EapHostPeerResponseAction = extern enum(i32) {
    EapHostPeerResponseDiscard = 0,
    EapHostPeerResponseSend = 1,
    EapHostPeerResponseResult = 2,
    EapHostPeerResponseInvokeUi = 3,
    EapHostPeerResponseRespond = 4,
    EapHostPeerResponseStartAuthentication = 5,
    EapHostPeerResponseNone = 6,
};
pub const EapHostPeerResponseDiscard = EapHostPeerResponseAction.EapHostPeerResponseDiscard;
pub const EapHostPeerResponseSend = EapHostPeerResponseAction.EapHostPeerResponseSend;
pub const EapHostPeerResponseResult = EapHostPeerResponseAction.EapHostPeerResponseResult;
pub const EapHostPeerResponseInvokeUi = EapHostPeerResponseAction.EapHostPeerResponseInvokeUi;
pub const EapHostPeerResponseRespond = EapHostPeerResponseAction.EapHostPeerResponseRespond;
pub const EapHostPeerResponseStartAuthentication = EapHostPeerResponseAction.EapHostPeerResponseStartAuthentication;
pub const EapHostPeerResponseNone = EapHostPeerResponseAction.EapHostPeerResponseNone;

pub const EapHostPeerAuthParams = extern enum(i32) {
    EapHostPeerAuthStatus = 1,
    EapHostPeerIdentity = 2,
    EapHostPeerIdentityExtendedInfo = 3,
    EapHostNapInfo = 4,
};
pub const EapHostPeerAuthStatus = EapHostPeerAuthParams.EapHostPeerAuthStatus;
pub const EapHostPeerIdentity = EapHostPeerAuthParams.EapHostPeerIdentity;
pub const EapHostPeerIdentityExtendedInfo = EapHostPeerAuthParams.EapHostPeerIdentityExtendedInfo;
pub const EapHostNapInfo = EapHostPeerAuthParams.EapHostNapInfo;

pub const EAPHOST_AUTH_STATUS = extern enum(i32) {
    EapHostInvalidSession = 0,
    EapHostAuthNotStarted = 1,
    EapHostAuthIdentityExchange = 2,
    EapHostAuthNegotiatingType = 3,
    EapHostAuthInProgress = 4,
    EapHostAuthSucceeded = 5,
    EapHostAuthFailed = 6,
};
pub const EapHostInvalidSession = EAPHOST_AUTH_STATUS.EapHostInvalidSession;
pub const EapHostAuthNotStarted = EAPHOST_AUTH_STATUS.EapHostAuthNotStarted;
pub const EapHostAuthIdentityExchange = EAPHOST_AUTH_STATUS.EapHostAuthIdentityExchange;
pub const EapHostAuthNegotiatingType = EAPHOST_AUTH_STATUS.EapHostAuthNegotiatingType;
pub const EapHostAuthInProgress = EAPHOST_AUTH_STATUS.EapHostAuthInProgress;
pub const EapHostAuthSucceeded = EAPHOST_AUTH_STATUS.EapHostAuthSucceeded;
pub const EapHostAuthFailed = EAPHOST_AUTH_STATUS.EapHostAuthFailed;

pub const EAPHOST_AUTH_INFO = extern struct {
    status: EAPHOST_AUTH_STATUS,
    dwErrorCode: u32,
    dwReasonCode: u32,
};

pub const ISOLATION_STATE = extern enum(i32) {
    UNKNOWN = 0,
    NOT_RESTRICTED = 1,
    IN_PROBATION = 2,
    RESTRICTED_ACCESS = 3,
};
pub const ISOLATION_STATE_UNKNOWN = ISOLATION_STATE.UNKNOWN;
pub const ISOLATION_STATE_NOT_RESTRICTED = ISOLATION_STATE.NOT_RESTRICTED;
pub const ISOLATION_STATE_IN_PROBATION = ISOLATION_STATE.IN_PROBATION;
pub const ISOLATION_STATE_RESTRICTED_ACCESS = ISOLATION_STATE.RESTRICTED_ACCESS;

pub const EapHostPeerMethodResult = extern struct {
    fIsSuccess: BOOL,
    dwFailureReasonCode: u32,
    fSaveConnectionData: BOOL,
    dwSizeofConnectionData: u32,
    pConnectionData: *u8,
    fSaveUserData: BOOL,
    dwSizeofUserData: u32,
    pUserData: *u8,
    pAttribArray: *EAP_ATTRIBUTES,
    isolationState: ISOLATION_STATE,
    pEapMethodInfo: *EAP_METHOD_INFO,
    pEapError: *EAP_ERROR,
};

pub const EapPacket = extern struct {
    Code: u8,
    Id: u8,
    Length: [2]u8,
    Data: [1]u8,
};

pub const EapCode = extern enum(i32) {
    EapCodeMinimum = 1,
    EapCodeRequest = 1,
    EapCodeResponse = 2,
    EapCodeSuccess = 3,
    EapCodeFailure = 4,
    EapCodeMaximum = 4,
};
pub const EapCodeMinimum = EapCode.EapCodeMinimum;
pub const EapCodeRequest = EapCode.EapCodeRequest;
pub const EapCodeResponse = EapCode.EapCodeResponse;
pub const EapCodeSuccess = EapCode.EapCodeSuccess;
pub const EapCodeFailure = EapCode.EapCodeFailure;
pub const EapCodeMaximum = EapCode.EapCodeMaximum;

pub const NotificationHandler = fn(
    connectionId: Guid,
    pContextData: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION = extern enum(i32) {
    EAP_METHOD_AUTHENTICATOR_RESPONSE_DISCARD = 0,
    EAP_METHOD_AUTHENTICATOR_RESPONSE_SEND = 1,
    EAP_METHOD_AUTHENTICATOR_RESPONSE_RESULT = 2,
    EAP_METHOD_AUTHENTICATOR_RESPONSE_RESPOND = 3,
    EAP_METHOD_AUTHENTICATOR_RESPONSE_AUTHENTICATE = 4,
    EAP_METHOD_AUTHENTICATOR_RESPONSE_HANDLE_IDENTITY = 5,
};
pub const EAP_METHOD_AUTHENTICATOR_RESPONSE_DISCARD = EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION.EAP_METHOD_AUTHENTICATOR_RESPONSE_DISCARD;
pub const EAP_METHOD_AUTHENTICATOR_RESPONSE_SEND = EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION.EAP_METHOD_AUTHENTICATOR_RESPONSE_SEND;
pub const EAP_METHOD_AUTHENTICATOR_RESPONSE_RESULT = EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION.EAP_METHOD_AUTHENTICATOR_RESPONSE_RESULT;
pub const EAP_METHOD_AUTHENTICATOR_RESPONSE_RESPOND = EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION.EAP_METHOD_AUTHENTICATOR_RESPONSE_RESPOND;
pub const EAP_METHOD_AUTHENTICATOR_RESPONSE_AUTHENTICATE = EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION.EAP_METHOD_AUTHENTICATOR_RESPONSE_AUTHENTICATE;
pub const EAP_METHOD_AUTHENTICATOR_RESPONSE_HANDLE_IDENTITY = EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION.EAP_METHOD_AUTHENTICATOR_RESPONSE_HANDLE_IDENTITY;

pub const EAP_METHOD_AUTHENTICATOR_RESULT = extern struct {
    fIsSuccess: BOOL,
    dwFailureReason: u32,
    pAuthAttribs: *EAP_ATTRIBUTES,
};

pub const EapPeerMethodResponseAction = extern enum(i32) {
    EapPeerMethodResponseActionDiscard = 0,
    EapPeerMethodResponseActionSend = 1,
    EapPeerMethodResponseActionResult = 2,
    EapPeerMethodResponseActionInvokeUI = 3,
    EapPeerMethodResponseActionRespond = 4,
    EapPeerMethodResponseActionNone = 5,
};
pub const EapPeerMethodResponseActionDiscard = EapPeerMethodResponseAction.EapPeerMethodResponseActionDiscard;
pub const EapPeerMethodResponseActionSend = EapPeerMethodResponseAction.EapPeerMethodResponseActionSend;
pub const EapPeerMethodResponseActionResult = EapPeerMethodResponseAction.EapPeerMethodResponseActionResult;
pub const EapPeerMethodResponseActionInvokeUI = EapPeerMethodResponseAction.EapPeerMethodResponseActionInvokeUI;
pub const EapPeerMethodResponseActionRespond = EapPeerMethodResponseAction.EapPeerMethodResponseActionRespond;
pub const EapPeerMethodResponseActionNone = EapPeerMethodResponseAction.EapPeerMethodResponseActionNone;

pub const EapPeerMethodOutput = extern struct {
    action: EapPeerMethodResponseAction,
    fAllowNotifications: BOOL,
};

pub const EapPeerMethodResultReason = extern enum(i32) {
    EapPeerMethodResultUnknown = 1,
    EapPeerMethodResultSuccess = 2,
    EapPeerMethodResultFailure = 3,
};
pub const EapPeerMethodResultUnknown = EapPeerMethodResultReason.EapPeerMethodResultUnknown;
pub const EapPeerMethodResultSuccess = EapPeerMethodResultReason.EapPeerMethodResultSuccess;
pub const EapPeerMethodResultFailure = EapPeerMethodResultReason.EapPeerMethodResultFailure;

pub const EapPeerMethodResult = extern struct {
    fIsSuccess: BOOL,
    dwFailureReasonCode: u32,
    fSaveConnectionData: BOOL,
    dwSizeofConnectionData: u32,
    pConnectionData: *u8,
    fSaveUserData: BOOL,
    dwSizeofUserData: u32,
    pUserData: *u8,
    pAttribArray: *EAP_ATTRIBUTES,
    pEapError: *EAP_ERROR,
    pNgcKerbTicket: *NgcTicketContext,
    fSaveToCredMan: BOOL,
};

pub const EAP_PEER_METHOD_ROUTINES = extern struct {
    dwVersion: u32,
    pEapType: *EAP_TYPE,
    EapPeerInitialize: ?*c_void,
    EapPeerGetIdentity: ?*c_void,
    EapPeerBeginSession: ?*c_void,
    EapPeerSetCredentials: ?*c_void,
    EapPeerProcessRequestPacket: ?*c_void,
    EapPeerGetResponsePacket: ?*c_void,
    EapPeerGetResult: ?*c_void,
    EapPeerGetUIContext: ?*c_void,
    EapPeerSetUIContext: ?*c_void,
    EapPeerGetResponseAttributes: ?*c_void,
    EapPeerSetResponseAttributes: ?*c_void,
    EapPeerEndSession: ?*c_void,
    EapPeerShutdown: ?*c_void,
};

pub const EAP_AUTHENTICATOR_SEND_TIMEOUT = extern enum(i32) {
    NONE = 0,
    BASIC = 1,
    INTERACTIVE = 2,
};
pub const EAP_AUTHENTICATOR_SEND_TIMEOUT_NONE = EAP_AUTHENTICATOR_SEND_TIMEOUT.NONE;
pub const EAP_AUTHENTICATOR_SEND_TIMEOUT_BASIC = EAP_AUTHENTICATOR_SEND_TIMEOUT.BASIC;
pub const EAP_AUTHENTICATOR_SEND_TIMEOUT_INTERACTIVE = EAP_AUTHENTICATOR_SEND_TIMEOUT.INTERACTIVE;

pub const EAP_AUTHENTICATOR_METHOD_ROUTINES = extern struct {
    dwSizeInBytes: u32,
    pEapType: *EAP_METHOD_TYPE,
    EapMethodAuthenticatorInitialize: ?*c_void,
    EapMethodAuthenticatorBeginSession: ?*c_void,
    EapMethodAuthenticatorUpdateInnerMethodParams: ?*c_void,
    EapMethodAuthenticatorReceivePacket: ?*c_void,
    EapMethodAuthenticatorSendPacket: ?*c_void,
    EapMethodAuthenticatorGetAttributes: ?*c_void,
    EapMethodAuthenticatorSetAttributes: ?*c_void,
    EapMethodAuthenticatorGetResult: ?*c_void,
    EapMethodAuthenticatorEndSession: ?*c_void,
    EapMethodAuthenticatorShutdown: ?*c_void,
};


//--------------------------------------------------------------------------------
// Section: Functions (32)
//--------------------------------------------------------------------------------
pub extern "eappcfg" fn EapHostPeerGetMethods(
    pEapMethodInfoArray: *EAP_METHOD_INFO_ARRAY,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappcfg" fn EapHostPeerGetMethodProperties(
    dwVersion: u32,
    dwFlags: u32,
    eapMethodType: EAP_METHOD_TYPE,
    hUserImpersonationToken: HANDLE,
    dwEapConnDataSize: u32,
    pbEapConnData: [*:0]const u8,
    dwUserDataSize: u32,
    pbUserData: [*:0]const u8,
    pMethodPropertyArray: *EAP_METHOD_PROPERTY_ARRAY,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappcfg" fn EapHostPeerInvokeConfigUI(
    hwndParent: HWND,
    dwFlags: u32,
    eapMethodType: EAP_METHOD_TYPE,
    dwSizeOfConfigIn: u32,
    pConfigIn: ?[*:0]const u8,
    pdwSizeOfConfigOut: *u32,
    ppConfigOut: **u8,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappcfg" fn EapHostPeerQueryCredentialInputFields(
    hUserImpersonationToken: HANDLE,
    eapMethodType: EAP_METHOD_TYPE,
    dwFlags: u32,
    dwEapConnDataSize: u32,
    pbEapConnData: [*:0]const u8,
    pEapConfigInputFieldArray: *EAP_CONFIG_INPUT_FIELD_ARRAY,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappcfg" fn EapHostPeerQueryUserBlobFromCredentialInputFields(
    hUserImpersonationToken: HANDLE,
    eapMethodType: EAP_METHOD_TYPE,
    dwFlags: u32,
    dwEapConnDataSize: u32,
    pbEapConnData: [*:0]const u8,
    pEapConfigInputFieldArray: *const EAP_CONFIG_INPUT_FIELD_ARRAY,
    pdwUserBlobSize: *u32,
    ppbUserBlob: [*]*u8,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappcfg" fn EapHostPeerInvokeIdentityUI(
    dwVersion: u32,
    eapMethodType: EAP_METHOD_TYPE,
    dwFlags: u32,
    hwndParent: HWND,
    dwSizeofConnectionData: u32,
    pConnectionData: [*:0]const u8,
    dwSizeofUserData: u32,
    pUserData: ?[*:0]const u8,
    pdwSizeOfUserDataOut: *u32,
    ppUserDataOut: **u8,
    ppwszIdentity: *PWSTR,
    ppEapError: **EAP_ERROR,
    ppvReserved: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappcfg" fn EapHostPeerInvokeInteractiveUI(
    hwndParent: HWND,
    dwSizeofUIContextData: u32,
    pUIContextData: ?[*:0]const u8,
    pdwSizeOfDataFromInteractiveUI: *u32,
    ppDataFromInteractiveUI: **u8,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappcfg" fn EapHostPeerQueryInteractiveUIInputFields(
    dwVersion: u32,
    dwFlags: u32,
    dwSizeofUIContextData: u32,
    pUIContextData: [*:0]const u8,
    pEapInteractiveUIData: *EAP_INTERACTIVE_UI_DATA,
    ppEapError: **EAP_ERROR,
    ppvReserved: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappcfg" fn EapHostPeerQueryUIBlobFromInteractiveUIInputFields(
    dwVersion: u32,
    dwFlags: u32,
    dwSizeofUIContextData: u32,
    pUIContextData: [*:0]const u8,
    pEapInteractiveUIData: *const EAP_INTERACTIVE_UI_DATA,
    pdwSizeOfDataFromInteractiveUI: *u32,
    ppDataFromInteractiveUI: **u8,
    ppEapError: **EAP_ERROR,
    ppvReserved: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappcfg" fn EapHostPeerConfigXml2Blob(
    dwFlags: u32,
    pConfigDoc: *IXMLDOMNode,
    pdwSizeOfConfigOut: *u32,
    ppConfigOut: **u8,
    pEapMethodType: *EAP_METHOD_TYPE,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappcfg" fn EapHostPeerCredentialsXml2Blob(
    dwFlags: u32,
    pCredentialsDoc: *IXMLDOMNode,
    dwSizeOfConfigIn: u32,
    pConfigIn: [*:0]u8,
    pdwSizeOfCredentialsOut: *u32,
    ppCredentialsOut: **u8,
    pEapMethodType: *EAP_METHOD_TYPE,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappcfg" fn EapHostPeerConfigBlob2Xml(
    dwFlags: u32,
    eapMethodType: EAP_METHOD_TYPE,
    dwSizeOfConfigIn: u32,
    pConfigIn: [*:0]u8,
    ppConfigDoc: **IXMLDOMDocument2,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappcfg" fn EapHostPeerFreeMemory(
    pData: *u8,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "eappcfg" fn EapHostPeerFreeErrorMemory(
    pEapError: *EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "eappprxy" fn EapHostPeerInitialize(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappprxy" fn EapHostPeerUninitialize(
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "eappprxy" fn EapHostPeerBeginSession(
    dwFlags: u32,
    eapType: EAP_METHOD_TYPE,
    pAttributeArray: *const EAP_ATTRIBUTES,
    hTokenImpersonateUser: HANDLE,
    dwSizeofConnectionData: u32,
    pConnectionData: *const u8,
    dwSizeofUserData: u32,
    pUserData: *const u8,
    dwMaxSendPacketSize: u32,
    pConnectionId: *const Guid,
    func: NotificationHandler,
    pContextData: *c_void,
    pSessionId: *u32,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappprxy" fn EapHostPeerProcessReceivedPacket(
    sessionHandle: u32,
    cbReceivePacket: u32,
    pReceivePacket: *const u8,
    pEapOutput: *EapHostPeerResponseAction,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappprxy" fn EapHostPeerGetSendPacket(
    sessionHandle: u32,
    pcbSendPacket: *u32,
    ppSendPacket: **u8,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappprxy" fn EapHostPeerGetResult(
    sessionHandle: u32,
    reason: EapHostPeerMethodResultReason,
    ppResult: *EapHostPeerMethodResult,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappprxy" fn EapHostPeerGetUIContext(
    sessionHandle: u32,
    pdwSizeOfUIContextData: *u32,
    ppUIContextData: **u8,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappprxy" fn EapHostPeerSetUIContext(
    sessionHandle: u32,
    dwSizeOfUIContextData: u32,
    pUIContextData: *const u8,
    pEapOutput: *EapHostPeerResponseAction,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappprxy" fn EapHostPeerGetResponseAttributes(
    sessionHandle: u32,
    pAttribs: *EAP_ATTRIBUTES,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappprxy" fn EapHostPeerSetResponseAttributes(
    sessionHandle: u32,
    pAttribs: *const EAP_ATTRIBUTES,
    pEapOutput: *EapHostPeerResponseAction,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappprxy" fn EapHostPeerGetAuthStatus(
    sessionHandle: u32,
    authParam: EapHostPeerAuthParams,
    pcbAuthData: *u32,
    ppAuthData: **u8,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappprxy" fn EapHostPeerEndSession(
    sessionHandle: u32,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappprxy" fn EapHostPeerGetDataToUnplumbCredentials(
    pConnectionIdThatLastSavedCreds: *Guid,
    phCredentialImpersonationToken: *i32,
    sessionHandle: u32,
    ppEapError: **EAP_ERROR,
    fSaveToCredMan: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappprxy" fn EapHostPeerClearConnection(
    pConnectionId: *Guid,
    ppEapError: **EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappprxy" fn EapHostPeerFreeEapError(
    pEapError: *EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "eappprxy" fn EapHostPeerGetIdentity(
    dwVersion: u32,
    dwFlags: u32,
    eapMethodType: EAP_METHOD_TYPE,
    dwSizeofConnectionData: u32,
    pConnectionData: [*:0]const u8,
    dwSizeofUserData: u32,
    pUserData: ?[*:0]const u8,
    hTokenImpersonateUser: HANDLE,
    pfInvokeUI: *BOOL,
    pdwSizeOfUserDataOut: *u32,
    ppUserDataOut: **u8,
    ppwszIdentity: *PWSTR,
    ppEapError: **EAP_ERROR,
    ppvReserved: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappprxy" fn EapHostPeerGetEncryptedPassword(
    dwSizeofPassword: u32,
    szPassword: [*:0]u16,
    ppszEncPassword: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappprxy" fn EapHostPeerFreeRuntimeMemory(
    pData: *u8,
) callconv(@import("std").os.windows.WINAPI) void;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (9)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const PWSTR = @import("system_services.zig").PWSTR;
const IXMLDOMDocument2 = @import("xml_http_extended_request.zig").IXMLDOMDocument2;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const HANDLE = @import("system_services.zig").HANDLE;
const IXMLDOMNode = @import("windows_programming.zig").IXMLDOMNode;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = NotificationHandler;

    const constant_export_count = 54;
    const type_export_count = 68;
    const enum_value_export_count = 306;
    const com_iface_id_export_count = 6;
    const com_class_id_export_count = 0;
    const func_export_count = 32;
    const unicode_alias_count = 0;
    const import_count = 9;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

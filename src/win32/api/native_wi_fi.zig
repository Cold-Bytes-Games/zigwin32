//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (456)
//--------------------------------------------------------------------------------
pub const DOT11_BSS_TYPE = extern enum(i32) {
    dot11_BSS_type_infrastructure = 1,
    dot11_BSS_type_independent = 2,
    dot11_BSS_type_any = 3,
};
pub const dot11_BSS_type_infrastructure = DOT11_BSS_TYPE.dot11_BSS_type_infrastructure;
pub const dot11_BSS_type_independent = DOT11_BSS_TYPE.dot11_BSS_type_independent;
pub const dot11_BSS_type_any = DOT11_BSS_TYPE.dot11_BSS_type_any;

pub const DOT11_SSID = extern struct {
    uSSIDLength: u32,
    ucSSID: [32]u8,
};

pub const DOT11_AUTH_ALGORITHM = extern enum(i32) {
    DOT11_AUTH_ALGO_80211_OPEN = 1,
    DOT11_AUTH_ALGO_80211_SHARED_KEY = 2,
    DOT11_AUTH_ALGO_WPA = 3,
    DOT11_AUTH_ALGO_WPA_PSK = 4,
    DOT11_AUTH_ALGO_WPA_NONE = 5,
    DOT11_AUTH_ALGO_RSNA = 6,
    DOT11_AUTH_ALGO_RSNA_PSK = 7,
    DOT11_AUTH_ALGO_WPA3 = 8,
    DOT11_AUTH_ALGO_WPA3_SAE = 9,
    DOT11_AUTH_ALGO_OWE = 10,
    DOT11_AUTH_ALGO_IHV_START = -2147483648,
    DOT11_AUTH_ALGO_IHV_END = -1,
};
pub const DOT11_AUTH_ALGO_80211_OPEN = DOT11_AUTH_ALGORITHM.DOT11_AUTH_ALGO_80211_OPEN;
pub const DOT11_AUTH_ALGO_80211_SHARED_KEY = DOT11_AUTH_ALGORITHM.DOT11_AUTH_ALGO_80211_SHARED_KEY;
pub const DOT11_AUTH_ALGO_WPA = DOT11_AUTH_ALGORITHM.DOT11_AUTH_ALGO_WPA;
pub const DOT11_AUTH_ALGO_WPA_PSK = DOT11_AUTH_ALGORITHM.DOT11_AUTH_ALGO_WPA_PSK;
pub const DOT11_AUTH_ALGO_WPA_NONE = DOT11_AUTH_ALGORITHM.DOT11_AUTH_ALGO_WPA_NONE;
pub const DOT11_AUTH_ALGO_RSNA = DOT11_AUTH_ALGORITHM.DOT11_AUTH_ALGO_RSNA;
pub const DOT11_AUTH_ALGO_RSNA_PSK = DOT11_AUTH_ALGORITHM.DOT11_AUTH_ALGO_RSNA_PSK;
pub const DOT11_AUTH_ALGO_WPA3 = DOT11_AUTH_ALGORITHM.DOT11_AUTH_ALGO_WPA3;
pub const DOT11_AUTH_ALGO_WPA3_SAE = DOT11_AUTH_ALGORITHM.DOT11_AUTH_ALGO_WPA3_SAE;
pub const DOT11_AUTH_ALGO_OWE = DOT11_AUTH_ALGORITHM.DOT11_AUTH_ALGO_OWE;
pub const DOT11_AUTH_ALGO_IHV_START = DOT11_AUTH_ALGORITHM.DOT11_AUTH_ALGO_IHV_START;
pub const DOT11_AUTH_ALGO_IHV_END = DOT11_AUTH_ALGORITHM.DOT11_AUTH_ALGO_IHV_END;

pub const DOT11_CIPHER_ALGORITHM = extern enum(i32) {
    DOT11_CIPHER_ALGO_NONE = 0,
    DOT11_CIPHER_ALGO_WEP40 = 1,
    DOT11_CIPHER_ALGO_TKIP = 2,
    DOT11_CIPHER_ALGO_CCMP = 4,
    DOT11_CIPHER_ALGO_WEP104 = 5,
    DOT11_CIPHER_ALGO_BIP = 6,
    DOT11_CIPHER_ALGO_GCMP = 8,
    DOT11_CIPHER_ALGO_GCMP_256 = 9,
    DOT11_CIPHER_ALGO_CCMP_256 = 10,
    DOT11_CIPHER_ALGO_BIP_GMAC_128 = 11,
    DOT11_CIPHER_ALGO_BIP_GMAC_256 = 12,
    DOT11_CIPHER_ALGO_BIP_CMAC_256 = 13,
    DOT11_CIPHER_ALGO_WPA_USE_GROUP = 256,
    DOT11_CIPHER_ALGO_RSN_USE_GROUP = 256,
    DOT11_CIPHER_ALGO_WEP = 257,
    DOT11_CIPHER_ALGO_IHV_START = -2147483648,
    DOT11_CIPHER_ALGO_IHV_END = -1,
};
pub const DOT11_CIPHER_ALGO_NONE = DOT11_CIPHER_ALGORITHM.DOT11_CIPHER_ALGO_NONE;
pub const DOT11_CIPHER_ALGO_WEP40 = DOT11_CIPHER_ALGORITHM.DOT11_CIPHER_ALGO_WEP40;
pub const DOT11_CIPHER_ALGO_TKIP = DOT11_CIPHER_ALGORITHM.DOT11_CIPHER_ALGO_TKIP;
pub const DOT11_CIPHER_ALGO_CCMP = DOT11_CIPHER_ALGORITHM.DOT11_CIPHER_ALGO_CCMP;
pub const DOT11_CIPHER_ALGO_WEP104 = DOT11_CIPHER_ALGORITHM.DOT11_CIPHER_ALGO_WEP104;
pub const DOT11_CIPHER_ALGO_BIP = DOT11_CIPHER_ALGORITHM.DOT11_CIPHER_ALGO_BIP;
pub const DOT11_CIPHER_ALGO_GCMP = DOT11_CIPHER_ALGORITHM.DOT11_CIPHER_ALGO_GCMP;
pub const DOT11_CIPHER_ALGO_GCMP_256 = DOT11_CIPHER_ALGORITHM.DOT11_CIPHER_ALGO_GCMP_256;
pub const DOT11_CIPHER_ALGO_CCMP_256 = DOT11_CIPHER_ALGORITHM.DOT11_CIPHER_ALGO_CCMP_256;
pub const DOT11_CIPHER_ALGO_BIP_GMAC_128 = DOT11_CIPHER_ALGORITHM.DOT11_CIPHER_ALGO_BIP_GMAC_128;
pub const DOT11_CIPHER_ALGO_BIP_GMAC_256 = DOT11_CIPHER_ALGORITHM.DOT11_CIPHER_ALGO_BIP_GMAC_256;
pub const DOT11_CIPHER_ALGO_BIP_CMAC_256 = DOT11_CIPHER_ALGORITHM.DOT11_CIPHER_ALGO_BIP_CMAC_256;
pub const DOT11_CIPHER_ALGO_WPA_USE_GROUP = DOT11_CIPHER_ALGORITHM.DOT11_CIPHER_ALGO_WPA_USE_GROUP;
pub const DOT11_CIPHER_ALGO_RSN_USE_GROUP = DOT11_CIPHER_ALGORITHM.DOT11_CIPHER_ALGO_RSN_USE_GROUP;
pub const DOT11_CIPHER_ALGO_WEP = DOT11_CIPHER_ALGORITHM.DOT11_CIPHER_ALGO_WEP;
pub const DOT11_CIPHER_ALGO_IHV_START = DOT11_CIPHER_ALGORITHM.DOT11_CIPHER_ALGO_IHV_START;
pub const DOT11_CIPHER_ALGO_IHV_END = DOT11_CIPHER_ALGORITHM.DOT11_CIPHER_ALGO_IHV_END;

pub const DOT11_AUTH_CIPHER_PAIR = extern struct {
    AuthAlgoId: DOT11_AUTH_ALGORITHM,
    CipherAlgoId: DOT11_CIPHER_ALGORITHM,
};

pub const DOT11_OI = extern struct {
    OILength: u16,
    OI: [5]u8,
};

pub const DOT11_ACCESSNETWORKOPTIONS = extern struct {
    AccessNetworkType: u8,
    Internet: u8,
    ASRA: u8,
    ESR: u8,
    UESA: u8,
};

pub const DOT11_VENUEINFO = extern struct {
    VenueGroup: u8,
    VenueType: u8,
};

pub const NDIS_STATISTICS_VALUE = extern struct {
    Oid: u32,
    DataLength: u32,
    Data: [1]u8,
};

pub const NDIS_STATISTICS_VALUE_EX = extern struct {
    Oid: u32,
    DataLength: u32,
    Length: u32,
    Data: [1]u8,
};

pub const NDIS_VAR_DATA_DESC = extern struct {
    Length: u16,
    MaximumLength: u16,
    Offset: ?*c_void,
};

pub const NDIS_OBJECT_HEADER = extern struct {
    Type: u8,
    Revision: u8,
    Size: u16,
};

pub const NDIS_REQUEST_TYPE = extern enum(i32) {
    NdisRequestQueryInformation = 0,
    NdisRequestSetInformation = 1,
    NdisRequestQueryStatistics = 2,
    NdisRequestOpen = 3,
    NdisRequestClose = 4,
    NdisRequestSend = 5,
    NdisRequestTransferData = 6,
    NdisRequestReset = 7,
    NdisRequestGeneric1 = 8,
    NdisRequestGeneric2 = 9,
    NdisRequestGeneric3 = 10,
    NdisRequestGeneric4 = 11,
};
pub const NdisRequestQueryInformation = NDIS_REQUEST_TYPE.NdisRequestQueryInformation;
pub const NdisRequestSetInformation = NDIS_REQUEST_TYPE.NdisRequestSetInformation;
pub const NdisRequestQueryStatistics = NDIS_REQUEST_TYPE.NdisRequestQueryStatistics;
pub const NdisRequestOpen = NDIS_REQUEST_TYPE.NdisRequestOpen;
pub const NdisRequestClose = NDIS_REQUEST_TYPE.NdisRequestClose;
pub const NdisRequestSend = NDIS_REQUEST_TYPE.NdisRequestSend;
pub const NdisRequestTransferData = NDIS_REQUEST_TYPE.NdisRequestTransferData;
pub const NdisRequestReset = NDIS_REQUEST_TYPE.NdisRequestReset;
pub const NdisRequestGeneric1 = NDIS_REQUEST_TYPE.NdisRequestGeneric1;
pub const NdisRequestGeneric2 = NDIS_REQUEST_TYPE.NdisRequestGeneric2;
pub const NdisRequestGeneric3 = NDIS_REQUEST_TYPE.NdisRequestGeneric3;
pub const NdisRequestGeneric4 = NDIS_REQUEST_TYPE.NdisRequestGeneric4;

pub const NDIS_STATISTICS_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    SupportedStatistics: u32,
    ifInDiscards: u64,
    ifInErrors: u64,
    ifHCInOctets: u64,
    ifHCInUcastPkts: u64,
    ifHCInMulticastPkts: u64,
    ifHCInBroadcastPkts: u64,
    ifHCOutOctets: u64,
    ifHCOutUcastPkts: u64,
    ifHCOutMulticastPkts: u64,
    ifHCOutBroadcastPkts: u64,
    ifOutErrors: u64,
    ifOutDiscards: u64,
    ifHCInUcastOctets: u64,
    ifHCInMulticastOctets: u64,
    ifHCInBroadcastOctets: u64,
    ifHCOutUcastOctets: u64,
    ifHCOutMulticastOctets: u64,
    ifHCOutBroadcastOctets: u64,
};

pub const NDIS_INTERRUPT_MODERATION = extern enum(i32) {
    NdisInterruptModerationUnknown = 0,
    NdisInterruptModerationNotSupported = 1,
    NdisInterruptModerationEnabled = 2,
    NdisInterruptModerationDisabled = 3,
};
pub const NdisInterruptModerationUnknown = NDIS_INTERRUPT_MODERATION.NdisInterruptModerationUnknown;
pub const NdisInterruptModerationNotSupported = NDIS_INTERRUPT_MODERATION.NdisInterruptModerationNotSupported;
pub const NdisInterruptModerationEnabled = NDIS_INTERRUPT_MODERATION.NdisInterruptModerationEnabled;
pub const NdisInterruptModerationDisabled = NDIS_INTERRUPT_MODERATION.NdisInterruptModerationDisabled;

pub const NDIS_INTERRUPT_MODERATION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    InterruptModeration: NDIS_INTERRUPT_MODERATION,
};

pub const NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    TimeoutArrayLength: u32,
    TimeoutArray: [1]u32,
};

pub const NDIS_PCI_DEVICE_CUSTOM_PROPERTIES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    DeviceType: u32,
    CurrentSpeedAndMode: u32,
    CurrentPayloadSize: u32,
    MaxPayloadSize: u32,
    MaxReadRequestSize: u32,
    CurrentLinkSpeed: u32,
    CurrentLinkWidth: u32,
    MaxLinkSpeed: u32,
    MaxLinkWidth: u32,
    PciExpressVersion: u32,
    InterruptType: u32,
    MaxInterruptMessages: u32,
};

pub const NDIS_802_11_STATUS_TYPE = extern enum(i32) {
    Ndis802_11StatusType_Authentication = 0,
    Ndis802_11StatusType_MediaStreamMode = 1,
    Ndis802_11StatusType_PMKID_CandidateList = 2,
    Ndis802_11StatusTypeMax = 3,
};
pub const Ndis802_11StatusType_Authentication = NDIS_802_11_STATUS_TYPE.Ndis802_11StatusType_Authentication;
pub const Ndis802_11StatusType_MediaStreamMode = NDIS_802_11_STATUS_TYPE.Ndis802_11StatusType_MediaStreamMode;
pub const Ndis802_11StatusType_PMKID_CandidateList = NDIS_802_11_STATUS_TYPE.Ndis802_11StatusType_PMKID_CandidateList;
pub const Ndis802_11StatusTypeMax = NDIS_802_11_STATUS_TYPE.Ndis802_11StatusTypeMax;

pub const NDIS_802_11_STATUS_INDICATION = extern struct {
    StatusType: NDIS_802_11_STATUS_TYPE,
};

pub const NDIS_802_11_AUTHENTICATION_REQUEST = extern struct {
    Length: u32,
    Bssid: [6]u8,
    Flags: u32,
};

pub const PMKID_CANDIDATE = extern struct {
    BSSID: [6]u8,
    Flags: u32,
};

pub const NDIS_802_11_PMKID_CANDIDATE_LIST = extern struct {
    Version: u32,
    NumCandidates: u32,
    CandidateList: [1]PMKID_CANDIDATE,
};

pub const NDIS_802_11_NETWORK_TYPE = extern enum(i32) {
    Ndis802_11FH = 0,
    Ndis802_11DS = 1,
    Ndis802_11OFDM5 = 2,
    Ndis802_11OFDM24 = 3,
    Ndis802_11Automode = 4,
    Ndis802_11NetworkTypeMax = 5,
};
pub const Ndis802_11FH = NDIS_802_11_NETWORK_TYPE.Ndis802_11FH;
pub const Ndis802_11DS = NDIS_802_11_NETWORK_TYPE.Ndis802_11DS;
pub const Ndis802_11OFDM5 = NDIS_802_11_NETWORK_TYPE.Ndis802_11OFDM5;
pub const Ndis802_11OFDM24 = NDIS_802_11_NETWORK_TYPE.Ndis802_11OFDM24;
pub const Ndis802_11Automode = NDIS_802_11_NETWORK_TYPE.Ndis802_11Automode;
pub const Ndis802_11NetworkTypeMax = NDIS_802_11_NETWORK_TYPE.Ndis802_11NetworkTypeMax;

pub const NDIS_802_11_NETWORK_TYPE_LIST = extern struct {
    NumberOfItems: u32,
    NetworkType: [1]NDIS_802_11_NETWORK_TYPE,
};

pub const NDIS_802_11_POWER_MODE = extern enum(i32) {
    Ndis802_11PowerModeCAM = 0,
    Ndis802_11PowerModeMAX_PSP = 1,
    Ndis802_11PowerModeFast_PSP = 2,
    Ndis802_11PowerModeMax = 3,
};
pub const Ndis802_11PowerModeCAM = NDIS_802_11_POWER_MODE.Ndis802_11PowerModeCAM;
pub const Ndis802_11PowerModeMAX_PSP = NDIS_802_11_POWER_MODE.Ndis802_11PowerModeMAX_PSP;
pub const Ndis802_11PowerModeFast_PSP = NDIS_802_11_POWER_MODE.Ndis802_11PowerModeFast_PSP;
pub const Ndis802_11PowerModeMax = NDIS_802_11_POWER_MODE.Ndis802_11PowerModeMax;

pub const NDIS_802_11_CONFIGURATION_FH = extern struct {
    Length: u32,
    HopPattern: u32,
    HopSet: u32,
    DwellTime: u32,
};

pub const NDIS_802_11_CONFIGURATION = extern struct {
    Length: u32,
    BeaconPeriod: u32,
    ATIMWindow: u32,
    DSConfig: u32,
    FHConfig: NDIS_802_11_CONFIGURATION_FH,
};

pub const NDIS_802_11_STATISTICS = extern struct {
    Length: u32,
    TransmittedFragmentCount: LARGE_INTEGER,
    MulticastTransmittedFrameCount: LARGE_INTEGER,
    FailedCount: LARGE_INTEGER,
    RetryCount: LARGE_INTEGER,
    MultipleRetryCount: LARGE_INTEGER,
    RTSSuccessCount: LARGE_INTEGER,
    RTSFailureCount: LARGE_INTEGER,
    ACKFailureCount: LARGE_INTEGER,
    FrameDuplicateCount: LARGE_INTEGER,
    ReceivedFragmentCount: LARGE_INTEGER,
    MulticastReceivedFrameCount: LARGE_INTEGER,
    FCSErrorCount: LARGE_INTEGER,
    TKIPLocalMICFailures: LARGE_INTEGER,
    TKIPICVErrorCount: LARGE_INTEGER,
    TKIPCounterMeasuresInvoked: LARGE_INTEGER,
    TKIPReplays: LARGE_INTEGER,
    CCMPFormatErrors: LARGE_INTEGER,
    CCMPReplays: LARGE_INTEGER,
    CCMPDecryptErrors: LARGE_INTEGER,
    FourWayHandshakeFailures: LARGE_INTEGER,
    WEPUndecryptableCount: LARGE_INTEGER,
    WEPICVErrorCount: LARGE_INTEGER,
    DecryptSuccessCount: LARGE_INTEGER,
    DecryptFailureCount: LARGE_INTEGER,
};

pub const NDIS_802_11_KEY = extern struct {
    Length: u32,
    KeyIndex: u32,
    KeyLength: u32,
    BSSID: [6]u8,
    KeyRSC: u64,
    KeyMaterial: [1]u8,
};

pub const NDIS_802_11_REMOVE_KEY = extern struct {
    Length: u32,
    KeyIndex: u32,
    BSSID: [6]u8,
};

pub const NDIS_802_11_WEP = extern struct {
    Length: u32,
    KeyIndex: u32,
    KeyLength: u32,
    KeyMaterial: [1]u8,
};

pub const NDIS_802_11_NETWORK_INFRASTRUCTURE = extern enum(i32) {
    Ndis802_11IBSS = 0,
    Ndis802_11Infrastructure = 1,
    Ndis802_11AutoUnknown = 2,
    Ndis802_11InfrastructureMax = 3,
};
pub const Ndis802_11IBSS = NDIS_802_11_NETWORK_INFRASTRUCTURE.Ndis802_11IBSS;
pub const Ndis802_11Infrastructure = NDIS_802_11_NETWORK_INFRASTRUCTURE.Ndis802_11Infrastructure;
pub const Ndis802_11AutoUnknown = NDIS_802_11_NETWORK_INFRASTRUCTURE.Ndis802_11AutoUnknown;
pub const Ndis802_11InfrastructureMax = NDIS_802_11_NETWORK_INFRASTRUCTURE.Ndis802_11InfrastructureMax;

pub const NDIS_802_11_AUTHENTICATION_MODE = extern enum(i32) {
    Ndis802_11AuthModeOpen = 0,
    Ndis802_11AuthModeShared = 1,
    Ndis802_11AuthModeAutoSwitch = 2,
    Ndis802_11AuthModeWPA = 3,
    Ndis802_11AuthModeWPAPSK = 4,
    Ndis802_11AuthModeWPANone = 5,
    Ndis802_11AuthModeWPA2 = 6,
    Ndis802_11AuthModeWPA2PSK = 7,
    Ndis802_11AuthModeWPA3 = 8,
    Ndis802_11AuthModeWPA3SAE = 9,
    Ndis802_11AuthModeMax = 10,
};
pub const Ndis802_11AuthModeOpen = NDIS_802_11_AUTHENTICATION_MODE.Ndis802_11AuthModeOpen;
pub const Ndis802_11AuthModeShared = NDIS_802_11_AUTHENTICATION_MODE.Ndis802_11AuthModeShared;
pub const Ndis802_11AuthModeAutoSwitch = NDIS_802_11_AUTHENTICATION_MODE.Ndis802_11AuthModeAutoSwitch;
pub const Ndis802_11AuthModeWPA = NDIS_802_11_AUTHENTICATION_MODE.Ndis802_11AuthModeWPA;
pub const Ndis802_11AuthModeWPAPSK = NDIS_802_11_AUTHENTICATION_MODE.Ndis802_11AuthModeWPAPSK;
pub const Ndis802_11AuthModeWPANone = NDIS_802_11_AUTHENTICATION_MODE.Ndis802_11AuthModeWPANone;
pub const Ndis802_11AuthModeWPA2 = NDIS_802_11_AUTHENTICATION_MODE.Ndis802_11AuthModeWPA2;
pub const Ndis802_11AuthModeWPA2PSK = NDIS_802_11_AUTHENTICATION_MODE.Ndis802_11AuthModeWPA2PSK;
pub const Ndis802_11AuthModeWPA3 = NDIS_802_11_AUTHENTICATION_MODE.Ndis802_11AuthModeWPA3;
pub const Ndis802_11AuthModeWPA3SAE = NDIS_802_11_AUTHENTICATION_MODE.Ndis802_11AuthModeWPA3SAE;
pub const Ndis802_11AuthModeMax = NDIS_802_11_AUTHENTICATION_MODE.Ndis802_11AuthModeMax;

pub const NDIS_802_11_SSID = extern struct {
    SsidLength: u32,
    Ssid: [32]u8,
};

pub const NDIS_WLAN_BSSID = extern struct {
    Length: u32,
    MacAddress: [6]u8,
    Reserved: [2]u8,
    Ssid: NDIS_802_11_SSID,
    Privacy: u32,
    Rssi: i32,
    NetworkTypeInUse: NDIS_802_11_NETWORK_TYPE,
    Configuration: NDIS_802_11_CONFIGURATION,
    InfrastructureMode: NDIS_802_11_NETWORK_INFRASTRUCTURE,
    SupportedRates: [8]u8,
};

pub const NDIS_802_11_BSSID_LIST = extern struct {
    NumberOfItems: u32,
    Bssid: [1]NDIS_WLAN_BSSID,
};

pub const NDIS_WLAN_BSSID_EX = extern struct {
    Length: u32,
    MacAddress: [6]u8,
    Reserved: [2]u8,
    Ssid: NDIS_802_11_SSID,
    Privacy: u32,
    Rssi: i32,
    NetworkTypeInUse: NDIS_802_11_NETWORK_TYPE,
    Configuration: NDIS_802_11_CONFIGURATION,
    InfrastructureMode: NDIS_802_11_NETWORK_INFRASTRUCTURE,
    SupportedRates: [16]u8,
    IELength: u32,
    IEs: [1]u8,
};

pub const NDIS_802_11_BSSID_LIST_EX = extern struct {
    NumberOfItems: u32,
    Bssid: [1]NDIS_WLAN_BSSID_EX,
};

pub const NDIS_802_11_FIXED_IEs = extern struct {
    Timestamp: [8]u8,
    BeaconInterval: u16,
    Capabilities: u16,
};

pub const NDIS_802_11_VARIABLE_IEs = extern struct {
    ElementID: u8,
    Length: u8,
    data: [1]u8,
};

pub const NDIS_802_11_PRIVACY_FILTER = extern enum(i32) {
    Ndis802_11PrivFilterAcceptAll = 0,
    Ndis802_11PrivFilter8021xWEP = 1,
};
pub const Ndis802_11PrivFilterAcceptAll = NDIS_802_11_PRIVACY_FILTER.Ndis802_11PrivFilterAcceptAll;
pub const Ndis802_11PrivFilter8021xWEP = NDIS_802_11_PRIVACY_FILTER.Ndis802_11PrivFilter8021xWEP;

pub const NDIS_802_11_WEP_STATUS = extern enum(i32) {
    Ndis802_11WEPEnabled = 0,
    Ndis802_11Encryption1Enabled = 0,
    Ndis802_11WEPDisabled = 1,
    Ndis802_11EncryptionDisabled = 1,
    Ndis802_11WEPKeyAbsent = 2,
    Ndis802_11Encryption1KeyAbsent = 2,
    Ndis802_11WEPNotSupported = 3,
    Ndis802_11EncryptionNotSupported = 3,
    Ndis802_11Encryption2Enabled = 4,
    Ndis802_11Encryption2KeyAbsent = 5,
    Ndis802_11Encryption3Enabled = 6,
    Ndis802_11Encryption3KeyAbsent = 7,
};
pub const Ndis802_11WEPEnabled = NDIS_802_11_WEP_STATUS.Ndis802_11WEPEnabled;
pub const Ndis802_11Encryption1Enabled = NDIS_802_11_WEP_STATUS.Ndis802_11Encryption1Enabled;
pub const Ndis802_11WEPDisabled = NDIS_802_11_WEP_STATUS.Ndis802_11WEPDisabled;
pub const Ndis802_11EncryptionDisabled = NDIS_802_11_WEP_STATUS.Ndis802_11EncryptionDisabled;
pub const Ndis802_11WEPKeyAbsent = NDIS_802_11_WEP_STATUS.Ndis802_11WEPKeyAbsent;
pub const Ndis802_11Encryption1KeyAbsent = NDIS_802_11_WEP_STATUS.Ndis802_11Encryption1KeyAbsent;
pub const Ndis802_11WEPNotSupported = NDIS_802_11_WEP_STATUS.Ndis802_11WEPNotSupported;
pub const Ndis802_11EncryptionNotSupported = NDIS_802_11_WEP_STATUS.Ndis802_11EncryptionNotSupported;
pub const Ndis802_11Encryption2Enabled = NDIS_802_11_WEP_STATUS.Ndis802_11Encryption2Enabled;
pub const Ndis802_11Encryption2KeyAbsent = NDIS_802_11_WEP_STATUS.Ndis802_11Encryption2KeyAbsent;
pub const Ndis802_11Encryption3Enabled = NDIS_802_11_WEP_STATUS.Ndis802_11Encryption3Enabled;
pub const Ndis802_11Encryption3KeyAbsent = NDIS_802_11_WEP_STATUS.Ndis802_11Encryption3KeyAbsent;

pub const NDIS_802_11_RELOAD_DEFAULTS = extern enum(i32) {
    Ndis802_11ReloadWEPKeys = 0,
};
pub const Ndis802_11ReloadWEPKeys = NDIS_802_11_RELOAD_DEFAULTS.Ndis802_11ReloadWEPKeys;

pub const NDIS_802_11_AI_REQFI = extern struct {
    Capabilities: u16,
    ListenInterval: u16,
    CurrentAPAddress: [6]u8,
};

pub const NDIS_802_11_AI_RESFI = extern struct {
    Capabilities: u16,
    StatusCode: u16,
    AssociationId: u16,
};

pub const NDIS_802_11_ASSOCIATION_INFORMATION = extern struct {
    Length: u32,
    AvailableRequestFixedIEs: u16,
    RequestFixedIEs: NDIS_802_11_AI_REQFI,
    RequestIELength: u32,
    OffsetRequestIEs: u32,
    AvailableResponseFixedIEs: u16,
    ResponseFixedIEs: NDIS_802_11_AI_RESFI,
    ResponseIELength: u32,
    OffsetResponseIEs: u32,
};

pub const NDIS_802_11_AUTHENTICATION_EVENT = extern struct {
    Status: NDIS_802_11_STATUS_INDICATION,
    Request: [1]NDIS_802_11_AUTHENTICATION_REQUEST,
};

pub const NDIS_802_11_TEST = extern struct {
    Length: u32,
    Type: u32,
    Anonymous: NDIS_802_11_TEST._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const NDIS_802_11_MEDIA_STREAM_MODE = extern enum(i32) {
    Ndis802_11MediaStreamOff = 0,
    Ndis802_11MediaStreamOn = 1,
};
pub const Ndis802_11MediaStreamOff = NDIS_802_11_MEDIA_STREAM_MODE.Ndis802_11MediaStreamOff;
pub const Ndis802_11MediaStreamOn = NDIS_802_11_MEDIA_STREAM_MODE.Ndis802_11MediaStreamOn;

pub const BSSID_INFO = extern struct {
    BSSID: [6]u8,
    PMKID: [16]u8,
};

pub const NDIS_802_11_PMKID = extern struct {
    Length: u32,
    BSSIDInfoCount: u32,
    BSSIDInfo: [1]BSSID_INFO,
};

pub const NDIS_802_11_AUTHENTICATION_ENCRYPTION = extern struct {
    AuthModeSupported: NDIS_802_11_AUTHENTICATION_MODE,
    EncryptStatusSupported: NDIS_802_11_WEP_STATUS,
};

pub const NDIS_802_11_CAPABILITY = extern struct {
    Length: u32,
    Version: u32,
    NoOfPMKIDs: u32,
    NoOfAuthEncryptPairsSupported: u32,
    AuthenticationEncryptionSupported: [1]NDIS_802_11_AUTHENTICATION_ENCRYPTION,
};

pub const NDIS_802_11_NON_BCAST_SSID_LIST = extern struct {
    NumberOfItems: u32,
    Non_Bcast_Ssid: [1]NDIS_802_11_SSID,
};

pub const NDIS_802_11_RADIO_STATUS = extern enum(i32) {
    Ndis802_11RadioStatusOn = 0,
    Ndis802_11RadioStatusHardwareOff = 1,
    Ndis802_11RadioStatusSoftwareOff = 2,
    Ndis802_11RadioStatusHardwareSoftwareOff = 3,
    Ndis802_11RadioStatusMax = 4,
};
pub const Ndis802_11RadioStatusOn = NDIS_802_11_RADIO_STATUS.Ndis802_11RadioStatusOn;
pub const Ndis802_11RadioStatusHardwareOff = NDIS_802_11_RADIO_STATUS.Ndis802_11RadioStatusHardwareOff;
pub const Ndis802_11RadioStatusSoftwareOff = NDIS_802_11_RADIO_STATUS.Ndis802_11RadioStatusSoftwareOff;
pub const Ndis802_11RadioStatusHardwareSoftwareOff = NDIS_802_11_RADIO_STATUS.Ndis802_11RadioStatusHardwareSoftwareOff;
pub const Ndis802_11RadioStatusMax = NDIS_802_11_RADIO_STATUS.Ndis802_11RadioStatusMax;

pub const NDIS_CO_DEVICE_PROFILE = extern struct {
    DeviceDescription: NDIS_VAR_DATA_DESC,
    DevSpecificInfo: NDIS_VAR_DATA_DESC,
    ulTAPISupplementaryPassThru: u32,
    ulAddressModes: u32,
    ulNumAddresses: u32,
    ulBearerModes: u32,
    ulMaxTxRate: u32,
    ulMinTxRate: u32,
    ulMaxRxRate: u32,
    ulMinRxRate: u32,
    ulMediaModes: u32,
    ulGenerateToneModes: u32,
    ulGenerateToneMaxNumFreq: u32,
    ulGenerateDigitModes: u32,
    ulMonitorToneMaxNumFreq: u32,
    ulMonitorToneMaxNumEntries: u32,
    ulMonitorDigitModes: u32,
    ulGatherDigitsMinTimeout: u32,
    ulGatherDigitsMaxTimeout: u32,
    ulDevCapFlags: u32,
    ulMaxNumActiveCalls: u32,
    ulAnswerMode: u32,
    ulUUIAcceptSize: u32,
    ulUUIAnswerSize: u32,
    ulUUIMakeCallSize: u32,
    ulUUIDropSize: u32,
    ulUUISendUserUserInfoSize: u32,
    ulUUICallInfoSize: u32,
};

pub const OFFLOAD_OPERATION_E = extern enum(i32) {
    AUTHENTICATE = 1,
    ENCRYPT = 2,
};
pub const AUTHENTICATE = OFFLOAD_OPERATION_E.AUTHENTICATE;
pub const ENCRYPT = OFFLOAD_OPERATION_E.ENCRYPT;

pub const OFFLOAD_ALGO_INFO = extern struct {
    algoIdentifier: u32,
    algoKeylen: u32,
    algoRounds: u32,
};

pub const OFFLOAD_CONF_ALGO = extern enum(i32) {
    OFFLOAD_IPSEC_CONF_NONE = 0,
    OFFLOAD_IPSEC_CONF_DES = 1,
    OFFLOAD_IPSEC_CONF_RESERVED = 2,
    OFFLOAD_IPSEC_CONF_3_DES = 3,
    OFFLOAD_IPSEC_CONF_MAX = 4,
};
pub const OFFLOAD_IPSEC_CONF_NONE = OFFLOAD_CONF_ALGO.OFFLOAD_IPSEC_CONF_NONE;
pub const OFFLOAD_IPSEC_CONF_DES = OFFLOAD_CONF_ALGO.OFFLOAD_IPSEC_CONF_DES;
pub const OFFLOAD_IPSEC_CONF_RESERVED = OFFLOAD_CONF_ALGO.OFFLOAD_IPSEC_CONF_RESERVED;
pub const OFFLOAD_IPSEC_CONF_3_DES = OFFLOAD_CONF_ALGO.OFFLOAD_IPSEC_CONF_3_DES;
pub const OFFLOAD_IPSEC_CONF_MAX = OFFLOAD_CONF_ALGO.OFFLOAD_IPSEC_CONF_MAX;

pub const OFFLOAD_INTEGRITY_ALGO = extern enum(i32) {
    OFFLOAD_IPSEC_INTEGRITY_NONE = 0,
    OFFLOAD_IPSEC_INTEGRITY_MD5 = 1,
    OFFLOAD_IPSEC_INTEGRITY_SHA = 2,
    OFFLOAD_IPSEC_INTEGRITY_MAX = 3,
};
pub const OFFLOAD_IPSEC_INTEGRITY_NONE = OFFLOAD_INTEGRITY_ALGO.OFFLOAD_IPSEC_INTEGRITY_NONE;
pub const OFFLOAD_IPSEC_INTEGRITY_MD5 = OFFLOAD_INTEGRITY_ALGO.OFFLOAD_IPSEC_INTEGRITY_MD5;
pub const OFFLOAD_IPSEC_INTEGRITY_SHA = OFFLOAD_INTEGRITY_ALGO.OFFLOAD_IPSEC_INTEGRITY_SHA;
pub const OFFLOAD_IPSEC_INTEGRITY_MAX = OFFLOAD_INTEGRITY_ALGO.OFFLOAD_IPSEC_INTEGRITY_MAX;

pub const OFFLOAD_SECURITY_ASSOCIATION = extern struct {
    Operation: OFFLOAD_OPERATION_E,
    SPI: u32,
    IntegrityAlgo: OFFLOAD_ALGO_INFO,
    ConfAlgo: OFFLOAD_ALGO_INFO,
    Reserved: OFFLOAD_ALGO_INFO,
};

pub const OFFLOAD_IPSEC_ADD_SA = extern struct {
    SrcAddr: u32,
    SrcMask: u32,
    DestAddr: u32,
    DestMask: u32,
    Protocol: u32,
    SrcPort: u16,
    DestPort: u16,
    SrcTunnelAddr: u32,
    DestTunnelAddr: u32,
    Flags: u16,
    NumSAs: i16,
    SecAssoc: [3]OFFLOAD_SECURITY_ASSOCIATION,
    OffloadHandle: HANDLE,
    KeyLen: u32,
    KeyMat: [1]u8,
};

pub const OFFLOAD_IPSEC_DELETE_SA = extern struct {
    OffloadHandle: HANDLE,
};

pub const UDP_ENCAP_TYPE = extern enum(i32) {
    OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_IKE = 0,
    OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_OTHER = 1,
};
pub const OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_IKE = UDP_ENCAP_TYPE.OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_IKE;
pub const OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_OTHER = UDP_ENCAP_TYPE.OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_OTHER;

pub const OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY = extern struct {
    UdpEncapType: UDP_ENCAP_TYPE,
    DstEncapPort: u16,
};

pub const OFFLOAD_IPSEC_ADD_UDPESP_SA = extern struct {
    SrcAddr: u32,
    SrcMask: u32,
    DstAddr: u32,
    DstMask: u32,
    Protocol: u32,
    SrcPort: u16,
    DstPort: u16,
    SrcTunnelAddr: u32,
    DstTunnelAddr: u32,
    Flags: u16,
    NumSAs: i16,
    SecAssoc: [3]OFFLOAD_SECURITY_ASSOCIATION,
    OffloadHandle: HANDLE,
    EncapTypeEntry: OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY,
    EncapTypeEntryOffldHandle: HANDLE,
    KeyLen: u32,
    KeyMat: [1]u8,
};

pub const OFFLOAD_IPSEC_DELETE_UDPESP_SA = extern struct {
    OffloadHandle: HANDLE,
    EncapTypeEntryOffldHandle: HANDLE,
};

pub const NDIS_MEDIUM = extern enum(i32) {
    NdisMedium802_3 = 0,
    NdisMedium802_5 = 1,
    NdisMediumFddi = 2,
    NdisMediumWan = 3,
    NdisMediumLocalTalk = 4,
    NdisMediumDix = 5,
    NdisMediumArcnetRaw = 6,
    NdisMediumArcnet878_2 = 7,
    NdisMediumAtm = 8,
    NdisMediumWirelessWan = 9,
    NdisMediumIrda = 10,
    NdisMediumBpc = 11,
    NdisMediumCoWan = 12,
    NdisMedium1394 = 13,
    NdisMediumInfiniBand = 14,
    NdisMediumTunnel = 15,
    NdisMediumNative802_11 = 16,
    NdisMediumLoopback = 17,
    NdisMediumWiMAX = 18,
    NdisMediumIP = 19,
    NdisMediumMax = 20,
};
pub const NdisMedium802_3 = NDIS_MEDIUM.NdisMedium802_3;
pub const NdisMedium802_5 = NDIS_MEDIUM.NdisMedium802_5;
pub const NdisMediumFddi = NDIS_MEDIUM.NdisMediumFddi;
pub const NdisMediumWan = NDIS_MEDIUM.NdisMediumWan;
pub const NdisMediumLocalTalk = NDIS_MEDIUM.NdisMediumLocalTalk;
pub const NdisMediumDix = NDIS_MEDIUM.NdisMediumDix;
pub const NdisMediumArcnetRaw = NDIS_MEDIUM.NdisMediumArcnetRaw;
pub const NdisMediumArcnet878_2 = NDIS_MEDIUM.NdisMediumArcnet878_2;
pub const NdisMediumAtm = NDIS_MEDIUM.NdisMediumAtm;
pub const NdisMediumWirelessWan = NDIS_MEDIUM.NdisMediumWirelessWan;
pub const NdisMediumIrda = NDIS_MEDIUM.NdisMediumIrda;
pub const NdisMediumBpc = NDIS_MEDIUM.NdisMediumBpc;
pub const NdisMediumCoWan = NDIS_MEDIUM.NdisMediumCoWan;
pub const NdisMedium1394 = NDIS_MEDIUM.NdisMedium1394;
pub const NdisMediumInfiniBand = NDIS_MEDIUM.NdisMediumInfiniBand;
pub const NdisMediumTunnel = NDIS_MEDIUM.NdisMediumTunnel;
pub const NdisMediumNative802_11 = NDIS_MEDIUM.NdisMediumNative802_11;
pub const NdisMediumLoopback = NDIS_MEDIUM.NdisMediumLoopback;
pub const NdisMediumWiMAX = NDIS_MEDIUM.NdisMediumWiMAX;
pub const NdisMediumIP = NDIS_MEDIUM.NdisMediumIP;
pub const NdisMediumMax = NDIS_MEDIUM.NdisMediumMax;

pub const NDIS_PHYSICAL_MEDIUM = extern enum(i32) {
    NdisPhysicalMediumUnspecified = 0,
    NdisPhysicalMediumWirelessLan = 1,
    NdisPhysicalMediumCableModem = 2,
    NdisPhysicalMediumPhoneLine = 3,
    NdisPhysicalMediumPowerLine = 4,
    NdisPhysicalMediumDSL = 5,
    NdisPhysicalMediumFibreChannel = 6,
    NdisPhysicalMedium1394 = 7,
    NdisPhysicalMediumWirelessWan = 8,
    NdisPhysicalMediumNative802_11 = 9,
    NdisPhysicalMediumBluetooth = 10,
    NdisPhysicalMediumInfiniband = 11,
    NdisPhysicalMediumWiMax = 12,
    NdisPhysicalMediumUWB = 13,
    NdisPhysicalMedium802_3 = 14,
    NdisPhysicalMedium802_5 = 15,
    NdisPhysicalMediumIrda = 16,
    NdisPhysicalMediumWiredWAN = 17,
    NdisPhysicalMediumWiredCoWan = 18,
    NdisPhysicalMediumOther = 19,
    NdisPhysicalMediumNative802_15_4 = 20,
    NdisPhysicalMediumMax = 21,
};
pub const NdisPhysicalMediumUnspecified = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumUnspecified;
pub const NdisPhysicalMediumWirelessLan = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumWirelessLan;
pub const NdisPhysicalMediumCableModem = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumCableModem;
pub const NdisPhysicalMediumPhoneLine = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumPhoneLine;
pub const NdisPhysicalMediumPowerLine = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumPowerLine;
pub const NdisPhysicalMediumDSL = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumDSL;
pub const NdisPhysicalMediumFibreChannel = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumFibreChannel;
pub const NdisPhysicalMedium1394 = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMedium1394;
pub const NdisPhysicalMediumWirelessWan = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumWirelessWan;
pub const NdisPhysicalMediumNative802_11 = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumNative802_11;
pub const NdisPhysicalMediumBluetooth = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumBluetooth;
pub const NdisPhysicalMediumInfiniband = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumInfiniband;
pub const NdisPhysicalMediumWiMax = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumWiMax;
pub const NdisPhysicalMediumUWB = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumUWB;
pub const NdisPhysicalMedium802_3 = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMedium802_3;
pub const NdisPhysicalMedium802_5 = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMedium802_5;
pub const NdisPhysicalMediumIrda = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumIrda;
pub const NdisPhysicalMediumWiredWAN = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumWiredWAN;
pub const NdisPhysicalMediumWiredCoWan = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumWiredCoWan;
pub const NdisPhysicalMediumOther = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumOther;
pub const NdisPhysicalMediumNative802_15_4 = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumNative802_15_4;
pub const NdisPhysicalMediumMax = NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumMax;

pub const TRANSPORT_HEADER_OFFSET = extern struct {
    ProtocolType: u16,
    HeaderOffset: u16,
};

pub const NETWORK_ADDRESS = extern struct {
    AddressLength: u16,
    AddressType: u16,
    Address: [1]u8,
};

pub const NETWORK_ADDRESS_LIST = extern struct {
    AddressCount: i32,
    AddressType: u16,
    Address: [1]NETWORK_ADDRESS,
};

pub const NETWORK_ADDRESS_IP = extern struct {
    sin_port: u16,
    in_addr: u32,
    sin_zero: [8]u8,
};

pub const NETWORK_ADDRESS_IP6 = extern struct {
    sin6_port: u16,
    sin6_flowinfo: u32,
    sin6_addr: [8]u16,
    sin6_scope_id: u32,
};

pub const NETWORK_ADDRESS_IPX = extern struct {
    NetworkAddress: u32,
    NodeAddress: [6]u8,
    Socket: u16,
};

pub const NDIS_HARDWARE_STATUS = extern enum(i32) {
    NdisHardwareStatusReady = 0,
    NdisHardwareStatusInitializing = 1,
    NdisHardwareStatusReset = 2,
    NdisHardwareStatusClosing = 3,
    NdisHardwareStatusNotReady = 4,
};
pub const NdisHardwareStatusReady = NDIS_HARDWARE_STATUS.NdisHardwareStatusReady;
pub const NdisHardwareStatusInitializing = NDIS_HARDWARE_STATUS.NdisHardwareStatusInitializing;
pub const NdisHardwareStatusReset = NDIS_HARDWARE_STATUS.NdisHardwareStatusReset;
pub const NdisHardwareStatusClosing = NDIS_HARDWARE_STATUS.NdisHardwareStatusClosing;
pub const NdisHardwareStatusNotReady = NDIS_HARDWARE_STATUS.NdisHardwareStatusNotReady;

pub const GEN_GET_TIME_CAPS = extern struct {
    Flags: u32,
    ClockPrecision: u32,
};

pub const GEN_GET_NETCARD_TIME = extern struct {
    ReadTime: u64,
};

pub const NDIS_PM_PACKET_PATTERN = extern struct {
    Priority: u32,
    Reserved: u32,
    MaskSize: u32,
    PatternOffset: u32,
    PatternSize: u32,
    PatternFlags: u32,
};

pub const NDIS_DEVICE_POWER_STATE = extern enum(i32) {
    NdisDeviceStateUnspecified = 0,
    NdisDeviceStateD0 = 1,
    NdisDeviceStateD1 = 2,
    NdisDeviceStateD2 = 3,
    NdisDeviceStateD3 = 4,
    NdisDeviceStateMaximum = 5,
};
pub const NdisDeviceStateUnspecified = NDIS_DEVICE_POWER_STATE.NdisDeviceStateUnspecified;
pub const NdisDeviceStateD0 = NDIS_DEVICE_POWER_STATE.NdisDeviceStateD0;
pub const NdisDeviceStateD1 = NDIS_DEVICE_POWER_STATE.NdisDeviceStateD1;
pub const NdisDeviceStateD2 = NDIS_DEVICE_POWER_STATE.NdisDeviceStateD2;
pub const NdisDeviceStateD3 = NDIS_DEVICE_POWER_STATE.NdisDeviceStateD3;
pub const NdisDeviceStateMaximum = NDIS_DEVICE_POWER_STATE.NdisDeviceStateMaximum;

pub const NDIS_PM_WAKE_UP_CAPABILITIES = extern struct {
    MinMagicPacketWakeUp: NDIS_DEVICE_POWER_STATE,
    MinPatternWakeUp: NDIS_DEVICE_POWER_STATE,
    MinLinkChangeWakeUp: NDIS_DEVICE_POWER_STATE,
};

pub const NDIS_PNP_CAPABILITIES = extern struct {
    Flags: u32,
    WakeUpCapabilities: NDIS_PM_WAKE_UP_CAPABILITIES,
};

pub const NDIS_FDDI_ATTACHMENT_TYPE = extern enum(i32) {
    NdisFddiTypeIsolated = 1,
    NdisFddiTypeLocalA = 2,
    NdisFddiTypeLocalB = 3,
    NdisFddiTypeLocalAB = 4,
    NdisFddiTypeLocalS = 5,
    NdisFddiTypeWrapA = 6,
    NdisFddiTypeWrapB = 7,
    NdisFddiTypeWrapAB = 8,
    NdisFddiTypeWrapS = 9,
    NdisFddiTypeCWrapA = 10,
    NdisFddiTypeCWrapB = 11,
    NdisFddiTypeCWrapS = 12,
    NdisFddiTypeThrough = 13,
};
pub const NdisFddiTypeIsolated = NDIS_FDDI_ATTACHMENT_TYPE.NdisFddiTypeIsolated;
pub const NdisFddiTypeLocalA = NDIS_FDDI_ATTACHMENT_TYPE.NdisFddiTypeLocalA;
pub const NdisFddiTypeLocalB = NDIS_FDDI_ATTACHMENT_TYPE.NdisFddiTypeLocalB;
pub const NdisFddiTypeLocalAB = NDIS_FDDI_ATTACHMENT_TYPE.NdisFddiTypeLocalAB;
pub const NdisFddiTypeLocalS = NDIS_FDDI_ATTACHMENT_TYPE.NdisFddiTypeLocalS;
pub const NdisFddiTypeWrapA = NDIS_FDDI_ATTACHMENT_TYPE.NdisFddiTypeWrapA;
pub const NdisFddiTypeWrapB = NDIS_FDDI_ATTACHMENT_TYPE.NdisFddiTypeWrapB;
pub const NdisFddiTypeWrapAB = NDIS_FDDI_ATTACHMENT_TYPE.NdisFddiTypeWrapAB;
pub const NdisFddiTypeWrapS = NDIS_FDDI_ATTACHMENT_TYPE.NdisFddiTypeWrapS;
pub const NdisFddiTypeCWrapA = NDIS_FDDI_ATTACHMENT_TYPE.NdisFddiTypeCWrapA;
pub const NdisFddiTypeCWrapB = NDIS_FDDI_ATTACHMENT_TYPE.NdisFddiTypeCWrapB;
pub const NdisFddiTypeCWrapS = NDIS_FDDI_ATTACHMENT_TYPE.NdisFddiTypeCWrapS;
pub const NdisFddiTypeThrough = NDIS_FDDI_ATTACHMENT_TYPE.NdisFddiTypeThrough;

pub const NDIS_FDDI_RING_MGT_STATE = extern enum(i32) {
    NdisFddiRingIsolated = 1,
    NdisFddiRingNonOperational = 2,
    NdisFddiRingOperational = 3,
    NdisFddiRingDetect = 4,
    NdisFddiRingNonOperationalDup = 5,
    NdisFddiRingOperationalDup = 6,
    NdisFddiRingDirected = 7,
    NdisFddiRingTrace = 8,
};
pub const NdisFddiRingIsolated = NDIS_FDDI_RING_MGT_STATE.NdisFddiRingIsolated;
pub const NdisFddiRingNonOperational = NDIS_FDDI_RING_MGT_STATE.NdisFddiRingNonOperational;
pub const NdisFddiRingOperational = NDIS_FDDI_RING_MGT_STATE.NdisFddiRingOperational;
pub const NdisFddiRingDetect = NDIS_FDDI_RING_MGT_STATE.NdisFddiRingDetect;
pub const NdisFddiRingNonOperationalDup = NDIS_FDDI_RING_MGT_STATE.NdisFddiRingNonOperationalDup;
pub const NdisFddiRingOperationalDup = NDIS_FDDI_RING_MGT_STATE.NdisFddiRingOperationalDup;
pub const NdisFddiRingDirected = NDIS_FDDI_RING_MGT_STATE.NdisFddiRingDirected;
pub const NdisFddiRingTrace = NDIS_FDDI_RING_MGT_STATE.NdisFddiRingTrace;

pub const NDIS_FDDI_LCONNECTION_STATE = extern enum(i32) {
    NdisFddiStateOff = 1,
    NdisFddiStateBreak = 2,
    NdisFddiStateTrace = 3,
    NdisFddiStateConnect = 4,
    NdisFddiStateNext = 5,
    NdisFddiStateSignal = 6,
    NdisFddiStateJoin = 7,
    NdisFddiStateVerify = 8,
    NdisFddiStateActive = 9,
    NdisFddiStateMaintenance = 10,
};
pub const NdisFddiStateOff = NDIS_FDDI_LCONNECTION_STATE.NdisFddiStateOff;
pub const NdisFddiStateBreak = NDIS_FDDI_LCONNECTION_STATE.NdisFddiStateBreak;
pub const NdisFddiStateTrace = NDIS_FDDI_LCONNECTION_STATE.NdisFddiStateTrace;
pub const NdisFddiStateConnect = NDIS_FDDI_LCONNECTION_STATE.NdisFddiStateConnect;
pub const NdisFddiStateNext = NDIS_FDDI_LCONNECTION_STATE.NdisFddiStateNext;
pub const NdisFddiStateSignal = NDIS_FDDI_LCONNECTION_STATE.NdisFddiStateSignal;
pub const NdisFddiStateJoin = NDIS_FDDI_LCONNECTION_STATE.NdisFddiStateJoin;
pub const NdisFddiStateVerify = NDIS_FDDI_LCONNECTION_STATE.NdisFddiStateVerify;
pub const NdisFddiStateActive = NDIS_FDDI_LCONNECTION_STATE.NdisFddiStateActive;
pub const NdisFddiStateMaintenance = NDIS_FDDI_LCONNECTION_STATE.NdisFddiStateMaintenance;

pub const NDIS_WAN_MEDIUM_SUBTYPE = extern enum(i32) {
    NdisWanMediumHub = 0,
    NdisWanMediumX_25 = 1,
    NdisWanMediumIsdn = 2,
    NdisWanMediumSerial = 3,
    NdisWanMediumFrameRelay = 4,
    NdisWanMediumAtm = 5,
    NdisWanMediumSonet = 6,
    NdisWanMediumSW56K = 7,
    NdisWanMediumPPTP = 8,
    NdisWanMediumL2TP = 9,
    NdisWanMediumIrda = 10,
    NdisWanMediumParallel = 11,
    NdisWanMediumPppoe = 12,
    NdisWanMediumSSTP = 13,
    NdisWanMediumAgileVPN = 14,
    NdisWanMediumGre = 15,
    NdisWanMediumSubTypeMax = 16,
};
pub const NdisWanMediumHub = NDIS_WAN_MEDIUM_SUBTYPE.NdisWanMediumHub;
pub const NdisWanMediumX_25 = NDIS_WAN_MEDIUM_SUBTYPE.NdisWanMediumX_25;
pub const NdisWanMediumIsdn = NDIS_WAN_MEDIUM_SUBTYPE.NdisWanMediumIsdn;
pub const NdisWanMediumSerial = NDIS_WAN_MEDIUM_SUBTYPE.NdisWanMediumSerial;
pub const NdisWanMediumFrameRelay = NDIS_WAN_MEDIUM_SUBTYPE.NdisWanMediumFrameRelay;
pub const NdisWanMediumAtm = NDIS_WAN_MEDIUM_SUBTYPE.NdisWanMediumAtm;
pub const NdisWanMediumSonet = NDIS_WAN_MEDIUM_SUBTYPE.NdisWanMediumSonet;
pub const NdisWanMediumSW56K = NDIS_WAN_MEDIUM_SUBTYPE.NdisWanMediumSW56K;
pub const NdisWanMediumPPTP = NDIS_WAN_MEDIUM_SUBTYPE.NdisWanMediumPPTP;
pub const NdisWanMediumL2TP = NDIS_WAN_MEDIUM_SUBTYPE.NdisWanMediumL2TP;
pub const NdisWanMediumIrda = NDIS_WAN_MEDIUM_SUBTYPE.NdisWanMediumIrda;
pub const NdisWanMediumParallel = NDIS_WAN_MEDIUM_SUBTYPE.NdisWanMediumParallel;
pub const NdisWanMediumPppoe = NDIS_WAN_MEDIUM_SUBTYPE.NdisWanMediumPppoe;
pub const NdisWanMediumSSTP = NDIS_WAN_MEDIUM_SUBTYPE.NdisWanMediumSSTP;
pub const NdisWanMediumAgileVPN = NDIS_WAN_MEDIUM_SUBTYPE.NdisWanMediumAgileVPN;
pub const NdisWanMediumGre = NDIS_WAN_MEDIUM_SUBTYPE.NdisWanMediumGre;
pub const NdisWanMediumSubTypeMax = NDIS_WAN_MEDIUM_SUBTYPE.NdisWanMediumSubTypeMax;

pub const NDIS_WAN_HEADER_FORMAT = extern enum(i32) {
    NdisWanHeaderNative = 0,
    NdisWanHeaderEthernet = 1,
};
pub const NdisWanHeaderNative = NDIS_WAN_HEADER_FORMAT.NdisWanHeaderNative;
pub const NdisWanHeaderEthernet = NDIS_WAN_HEADER_FORMAT.NdisWanHeaderEthernet;

pub const NDIS_WAN_QUALITY = extern enum(i32) {
    NdisWanRaw = 0,
    NdisWanErrorControl = 1,
    NdisWanReliable = 2,
};
pub const NdisWanRaw = NDIS_WAN_QUALITY.NdisWanRaw;
pub const NdisWanErrorControl = NDIS_WAN_QUALITY.NdisWanErrorControl;
pub const NdisWanReliable = NDIS_WAN_QUALITY.NdisWanReliable;

pub const NDIS_WAN_PROTOCOL_CAPS = extern struct {
    Flags: u32,
    Reserved: u32,
};

pub const NDIS_802_5_RING_STATE = extern enum(i32) {
    NdisRingStateOpened = 1,
    NdisRingStateClosed = 2,
    NdisRingStateOpening = 3,
    NdisRingStateClosing = 4,
    NdisRingStateOpenFailure = 5,
    NdisRingStateRingFailure = 6,
};
pub const NdisRingStateOpened = NDIS_802_5_RING_STATE.NdisRingStateOpened;
pub const NdisRingStateClosed = NDIS_802_5_RING_STATE.NdisRingStateClosed;
pub const NdisRingStateOpening = NDIS_802_5_RING_STATE.NdisRingStateOpening;
pub const NdisRingStateClosing = NDIS_802_5_RING_STATE.NdisRingStateClosing;
pub const NdisRingStateOpenFailure = NDIS_802_5_RING_STATE.NdisRingStateOpenFailure;
pub const NdisRingStateRingFailure = NDIS_802_5_RING_STATE.NdisRingStateRingFailure;

pub const NDIS_MEDIA_STATE = extern enum(i32) {
    NdisMediaStateConnected = 0,
    NdisMediaStateDisconnected = 1,
};
pub const NdisMediaStateConnected = NDIS_MEDIA_STATE.NdisMediaStateConnected;
pub const NdisMediaStateDisconnected = NDIS_MEDIA_STATE.NdisMediaStateDisconnected;

pub const NDIS_CO_LINK_SPEED = extern struct {
    Outbound: u32,
    Inbound: u32,
};

pub const NDIS_LINK_SPEED = extern struct {
    XmitLinkSpeed: u64,
    RcvLinkSpeed: u64,
};

pub const NDIS_GUID = extern struct {
    Guid: Guid,
    Anonymous: NDIS_GUID._Anonymous_e__Union,
    Size: u32,
    Flags: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const NDIS_IRDA_PACKET_INFO = extern struct {
    ExtraBOFs: u32,
    MinTurnAroundTime: u32,
};

pub const NDIS_SUPPORTED_PAUSE_FUNCTIONS = extern enum(i32) {
    NdisPauseFunctionsUnsupported = 0,
    NdisPauseFunctionsSendOnly = 1,
    NdisPauseFunctionsReceiveOnly = 2,
    NdisPauseFunctionsSendAndReceive = 3,
    NdisPauseFunctionsUnknown = 4,
};
pub const NdisPauseFunctionsUnsupported = NDIS_SUPPORTED_PAUSE_FUNCTIONS.NdisPauseFunctionsUnsupported;
pub const NdisPauseFunctionsSendOnly = NDIS_SUPPORTED_PAUSE_FUNCTIONS.NdisPauseFunctionsSendOnly;
pub const NdisPauseFunctionsReceiveOnly = NDIS_SUPPORTED_PAUSE_FUNCTIONS.NdisPauseFunctionsReceiveOnly;
pub const NdisPauseFunctionsSendAndReceive = NDIS_SUPPORTED_PAUSE_FUNCTIONS.NdisPauseFunctionsSendAndReceive;
pub const NdisPauseFunctionsUnknown = NDIS_SUPPORTED_PAUSE_FUNCTIONS.NdisPauseFunctionsUnknown;

pub const NDIS_LINK_STATE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    MediaConnectState: NET_IF_MEDIA_CONNECT_STATE,
    MediaDuplexState: NET_IF_MEDIA_DUPLEX_STATE,
    XmitLinkSpeed: u64,
    RcvLinkSpeed: u64,
    PauseFunctions: NDIS_SUPPORTED_PAUSE_FUNCTIONS,
    AutoNegotiationFlags: u32,
};

pub const NDIS_LINK_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    MediaDuplexState: NET_IF_MEDIA_DUPLEX_STATE,
    XmitLinkSpeed: u64,
    RcvLinkSpeed: u64,
    PauseFunctions: NDIS_SUPPORTED_PAUSE_FUNCTIONS,
    AutoNegotiationFlags: u32,
};

pub const NDIS_OPER_STATE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    OperationalStatus: NET_IF_OPER_STATUS,
    OperationalStatusFlags: u32,
};

pub const NDIS_IP_OPER_STATUS = extern struct {
    AddressFamily: u32,
    OperationalStatus: NET_IF_OPER_STATUS,
    OperationalStatusFlags: u32,
};

pub const NDIS_IP_OPER_STATUS_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    NumberofAddressFamiliesReturned: u32,
    IpOperationalStatus: [32]NDIS_IP_OPER_STATUS,
};

pub const NDIS_IP_OPER_STATE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    IpOperationalStatus: NDIS_IP_OPER_STATUS,
};

pub const NDIS_OFFLOAD_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    IPv4Checksum: u8,
    TCPIPv4Checksum: u8,
    UDPIPv4Checksum: u8,
    TCPIPv6Checksum: u8,
    UDPIPv6Checksum: u8,
    LsoV1: u8,
    IPsecV1: u8,
    LsoV2IPv4: u8,
    LsoV2IPv6: u8,
    TcpConnectionIPv4: u8,
    TcpConnectionIPv6: u8,
    Flags: u32,
};

pub const NDIS_TCP_LARGE_SEND_OFFLOAD_V1 = extern struct {
    IPv4: NDIS_TCP_LARGE_SEND_OFFLOAD_V1._IPv4_e__Struct,
    const _IPv4_e__Struct = u32; // TODO: generate this nested type!
};

pub const NDIS_TCP_IP_CHECKSUM_OFFLOAD = extern struct {
    IPv4Transmit: NDIS_TCP_IP_CHECKSUM_OFFLOAD._IPv4Transmit_e__Struct,
    IPv4Receive: NDIS_TCP_IP_CHECKSUM_OFFLOAD._IPv4Receive_e__Struct,
    IPv6Transmit: NDIS_TCP_IP_CHECKSUM_OFFLOAD._IPv6Transmit_e__Struct,
    IPv6Receive: NDIS_TCP_IP_CHECKSUM_OFFLOAD._IPv6Receive_e__Struct,
    const _IPv6Receive_e__Struct = u32; // TODO: generate this nested type!
    const _IPv4Receive_e__Struct = u32; // TODO: generate this nested type!
    const _IPv6Transmit_e__Struct = u32; // TODO: generate this nested type!
    const _IPv4Transmit_e__Struct = u32; // TODO: generate this nested type!
};

pub const NDIS_IPSEC_OFFLOAD_V1 = extern struct {
    Supported: NDIS_IPSEC_OFFLOAD_V1._Supported_e__Struct,
    IPv4AH: NDIS_IPSEC_OFFLOAD_V1._IPv4AH_e__Struct,
    IPv4ESP: NDIS_IPSEC_OFFLOAD_V1._IPv4ESP_e__Struct,
    const _IPv4AH_e__Struct = u32; // TODO: generate this nested type!
    const _IPv4ESP_e__Struct = u32; // TODO: generate this nested type!
    const _Supported_e__Struct = u32; // TODO: generate this nested type!
};

pub const NDIS_TCP_LARGE_SEND_OFFLOAD_V2 = extern struct {
    IPv4: NDIS_TCP_LARGE_SEND_OFFLOAD_V2._IPv4_e__Struct,
    IPv6: NDIS_TCP_LARGE_SEND_OFFLOAD_V2._IPv6_e__Struct,
    const _IPv4_e__Struct = u32; // TODO: generate this nested type!
    const _IPv6_e__Struct = u32; // TODO: generate this nested type!
};

pub const NDIS_OFFLOAD = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Checksum: NDIS_TCP_IP_CHECKSUM_OFFLOAD,
    LsoV1: NDIS_TCP_LARGE_SEND_OFFLOAD_V1,
    IPsecV1: NDIS_IPSEC_OFFLOAD_V1,
    LsoV2: NDIS_TCP_LARGE_SEND_OFFLOAD_V2,
    Flags: u32,
};

pub const NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1 = extern struct {
    IPv4: NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1._IPv4_e__Struct,
    const _IPv4_e__Struct = u32; // TODO: generate this nested type!
};

pub const NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD = extern struct {
    IPv4Transmit: NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD._IPv4Transmit_e__Struct,
    IPv4Receive: NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD._IPv4Receive_e__Struct,
    IPv6Transmit: NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD._IPv6Transmit_e__Struct,
    IPv6Receive: NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD._IPv6Receive_e__Struct,
    const _IPv6Receive_e__Struct = u32; // TODO: generate this nested type!
    const _IPv4Receive_e__Struct = u32; // TODO: generate this nested type!
    const _IPv4Transmit_e__Struct = u32; // TODO: generate this nested type!
    const _IPv6Transmit_e__Struct = u32; // TODO: generate this nested type!
};

pub const NDIS_WMI_IPSEC_OFFLOAD_V1 = extern struct {
    Supported: NDIS_WMI_IPSEC_OFFLOAD_V1._Supported_e__Struct,
    IPv4AH: NDIS_WMI_IPSEC_OFFLOAD_V1._IPv4AH_e__Struct,
    IPv4ESP: NDIS_WMI_IPSEC_OFFLOAD_V1._IPv4ESP_e__Struct,
    const _IPv4AH_e__Struct = u32; // TODO: generate this nested type!
    const _Supported_e__Struct = u32; // TODO: generate this nested type!
    const _IPv4ESP_e__Struct = u32; // TODO: generate this nested type!
};

pub const NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2 = extern struct {
    IPv4: NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2._IPv4_e__Struct,
    IPv6: NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2._IPv6_e__Struct,
    const _IPv4_e__Struct = u32; // TODO: generate this nested type!
    const _IPv6_e__Struct = u32; // TODO: generate this nested type!
};

pub const NDIS_WMI_OFFLOAD = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Checksum: NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD,
    LsoV1: NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1,
    IPsecV1: NDIS_WMI_IPSEC_OFFLOAD_V1,
    LsoV2: NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2,
    Flags: u32,
};

pub const NDIS_TCP_CONNECTION_OFFLOAD = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Encapsulation: u32,
    _bitfield: u32,
    TcpConnectionOffloadCapacity: u32,
    Flags: u32,
};

pub const NDIS_WMI_TCP_CONNECTION_OFFLOAD = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Encapsulation: u32,
    SupportIPv4: u32,
    SupportIPv6: u32,
    SupportIPv6ExtensionHeaders: u32,
    SupportSack: u32,
    TcpConnectionOffloadCapacity: u32,
    Flags: u32,
};

pub const NDIS_PORT_TYPE = extern enum(i32) {
    NdisPortTypeUndefined = 0,
    NdisPortTypeBridge = 1,
    NdisPortTypeRasConnection = 2,
    NdisPortType8021xSupplicant = 3,
    NdisPortTypeMax = 4,
};
pub const NdisPortTypeUndefined = NDIS_PORT_TYPE.NdisPortTypeUndefined;
pub const NdisPortTypeBridge = NDIS_PORT_TYPE.NdisPortTypeBridge;
pub const NdisPortTypeRasConnection = NDIS_PORT_TYPE.NdisPortTypeRasConnection;
pub const NdisPortType8021xSupplicant = NDIS_PORT_TYPE.NdisPortType8021xSupplicant;
pub const NdisPortTypeMax = NDIS_PORT_TYPE.NdisPortTypeMax;

pub const NDIS_PORT_AUTHORIZATION_STATE = extern enum(i32) {
    NdisPortAuthorizationUnknown = 0,
    NdisPortAuthorized = 1,
    NdisPortUnauthorized = 2,
    NdisPortReauthorizing = 3,
};
pub const NdisPortAuthorizationUnknown = NDIS_PORT_AUTHORIZATION_STATE.NdisPortAuthorizationUnknown;
pub const NdisPortAuthorized = NDIS_PORT_AUTHORIZATION_STATE.NdisPortAuthorized;
pub const NdisPortUnauthorized = NDIS_PORT_AUTHORIZATION_STATE.NdisPortUnauthorized;
pub const NdisPortReauthorizing = NDIS_PORT_AUTHORIZATION_STATE.NdisPortReauthorizing;

pub const NDIS_PORT_CONTROL_STATE = extern enum(i32) {
    NdisPortControlStateUnknown = 0,
    NdisPortControlStateControlled = 1,
    NdisPortControlStateUncontrolled = 2,
};
pub const NdisPortControlStateUnknown = NDIS_PORT_CONTROL_STATE.NdisPortControlStateUnknown;
pub const NdisPortControlStateControlled = NDIS_PORT_CONTROL_STATE.NdisPortControlStateControlled;
pub const NdisPortControlStateUncontrolled = NDIS_PORT_CONTROL_STATE.NdisPortControlStateUncontrolled;

pub const NDIS_PORT_AUTHENTICATION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    SendControlState: NDIS_PORT_CONTROL_STATE,
    RcvControlState: NDIS_PORT_CONTROL_STATE,
    SendAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
    RcvAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
};

pub const NDIS_NETWORK_CHANGE_TYPE = extern enum(i32) {
    NdisPossibleNetworkChange = 1,
    NdisDefinitelyNetworkChange = 2,
    NdisNetworkChangeFromMediaConnect = 3,
    NdisNetworkChangeMax = 4,
};
pub const NdisPossibleNetworkChange = NDIS_NETWORK_CHANGE_TYPE.NdisPossibleNetworkChange;
pub const NdisDefinitelyNetworkChange = NDIS_NETWORK_CHANGE_TYPE.NdisDefinitelyNetworkChange;
pub const NdisNetworkChangeFromMediaConnect = NDIS_NETWORK_CHANGE_TYPE.NdisNetworkChangeFromMediaConnect;
pub const NdisNetworkChangeMax = NDIS_NETWORK_CHANGE_TYPE.NdisNetworkChangeMax;

pub const NDIS_WMI_METHOD_HEADER = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PortNumber: u32,
    NetLuid: NET_LUID_LH,
    RequestId: u64,
    Timeout: u32,
    Padding: [4]u8,
};

pub const NDIS_WMI_SET_HEADER = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PortNumber: u32,
    NetLuid: NET_LUID_LH,
    RequestId: u64,
    Timeout: u32,
    Padding: [4]u8,
};

pub const NDIS_WMI_EVENT_HEADER = extern struct {
    Header: NDIS_OBJECT_HEADER,
    IfIndex: u32,
    NetLuid: NET_LUID_LH,
    RequestId: u64,
    PortNumber: u32,
    DeviceNameLength: u32,
    DeviceNameOffset: u32,
    Padding: [4]u8,
};

pub const NDIS_WMI_ENUM_ADAPTER = extern struct {
    Header: NDIS_OBJECT_HEADER,
    IfIndex: u32,
    NetLuid: NET_LUID_LH,
    DeviceNameLength: u16,
    DeviceName: [1]i8,
};

pub const NDIS_WMI_OUTPUT_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    SupportedRevision: u8,
    DataOffset: u32,
};

pub const NDIS_RECEIVE_SCALE_CAPABILITIES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    CapabilitiesFlags: u32,
    NumberOfInterruptMessages: u32,
    NumberOfReceiveQueues: u32,
};

pub const NDIS_RECEIVE_SCALE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u16,
    BaseCpuNumber: u16,
    HashInformation: u32,
    IndirectionTableSize: u16,
    IndirectionTableOffset: u32,
    HashSecretKeySize: u16,
    HashSecretKeyOffset: u32,
};

pub const NDIS_RECEIVE_HASH_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    HashInformation: u32,
    HashSecretKeySize: u16,
    HashSecretKeyOffset: u32,
};

pub const NDIS_PROCESSOR_VENDOR = extern enum(i32) {
    NdisProcessorVendorUnknown = 0,
    NdisProcessorVendorGenuinIntel = 1,
    NdisProcessorVendorGenuineIntel = 1,
    NdisProcessorVendorAuthenticAMD = 2,
};
pub const NdisProcessorVendorUnknown = NDIS_PROCESSOR_VENDOR.NdisProcessorVendorUnknown;
pub const NdisProcessorVendorGenuinIntel = NDIS_PROCESSOR_VENDOR.NdisProcessorVendorGenuinIntel;
pub const NdisProcessorVendorGenuineIntel = NDIS_PROCESSOR_VENDOR.NdisProcessorVendorGenuineIntel;
pub const NdisProcessorVendorAuthenticAMD = NDIS_PROCESSOR_VENDOR.NdisProcessorVendorAuthenticAMD;

pub const NDIS_PORT_STATE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    MediaConnectState: NET_IF_MEDIA_CONNECT_STATE,
    XmitLinkSpeed: u64,
    RcvLinkSpeed: u64,
    Direction: NET_IF_DIRECTION_TYPE,
    SendControlState: NDIS_PORT_CONTROL_STATE,
    RcvControlState: NDIS_PORT_CONTROL_STATE,
    SendAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
    RcvAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
    Flags: u32,
};

pub const NDIS_PORT_CHARACTERISTICS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PortNumber: u32,
    Flags: u32,
    Type: NDIS_PORT_TYPE,
    MediaConnectState: NET_IF_MEDIA_CONNECT_STATE,
    XmitLinkSpeed: u64,
    RcvLinkSpeed: u64,
    Direction: NET_IF_DIRECTION_TYPE,
    SendControlState: NDIS_PORT_CONTROL_STATE,
    RcvControlState: NDIS_PORT_CONTROL_STATE,
    SendAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
    RcvAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
};

pub const NDIS_PORT = extern struct {
    Next: *NDIS_PORT,
    NdisReserved: *c_void,
    MiniportReserved: *c_void,
    ProtocolReserved: *c_void,
    PortCharacteristics: NDIS_PORT_CHARACTERISTICS,
};

pub const NDIS_PORT_ARRAY = extern struct {
    Header: NDIS_OBJECT_HEADER,
    NumberOfPorts: u32,
    OffsetFirstPort: u32,
    ElementSize: u32,
    Ports: [1]NDIS_PORT_CHARACTERISTICS,
};

pub const NDIS_TIMESTAMP_CAPABILITY_FLAGS = extern struct {
    PtpV2OverUdpIPv4EventMsgReceiveHw: u8,
    PtpV2OverUdpIPv4AllMsgReceiveHw: u8,
    PtpV2OverUdpIPv4EventMsgTransmitHw: u8,
    PtpV2OverUdpIPv4AllMsgTransmitHw: u8,
    PtpV2OverUdpIPv6EventMsgReceiveHw: u8,
    PtpV2OverUdpIPv6AllMsgReceiveHw: u8,
    PtpV2OverUdpIPv6EventMsgTransmitHw: u8,
    PtpV2OverUdpIPv6AllMsgTransmitHw: u8,
    AllReceiveHw: u8,
    AllTransmitHw: u8,
    TaggedTransmitHw: u8,
    AllReceiveSw: u8,
    AllTransmitSw: u8,
    TaggedTransmitSw: u8,
};

pub const NDIS_TIMESTAMP_CAPABILITIES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    HardwareClockFrequencyHz: u64,
    CrossTimestamp: u8,
    Reserved1: u64,
    Reserved2: u64,
    TimestampFlags: NDIS_TIMESTAMP_CAPABILITY_FLAGS,
};

pub const NDIS_HARDWARE_CROSSTIMESTAMP = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Flags: u32,
    SystemTimestamp1: u64,
    HardwareClockTimestamp: u64,
    SystemTimestamp2: u64,
};

pub const DOT11_BSSID_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    BSSIDs: [6]u8,
};

pub const DOT11_PHY_TYPE = extern enum(i32) {
    dot11_phy_type_unknown = 0,
    dot11_phy_type_any = 0,
    dot11_phy_type_fhss = 1,
    dot11_phy_type_dsss = 2,
    dot11_phy_type_irbaseband = 3,
    dot11_phy_type_ofdm = 4,
    dot11_phy_type_hrdsss = 5,
    dot11_phy_type_erp = 6,
    dot11_phy_type_ht = 7,
    dot11_phy_type_vht = 8,
    dot11_phy_type_dmg = 9,
    dot11_phy_type_he = 10,
    dot11_phy_type_IHV_start = -2147483648,
    dot11_phy_type_IHV_end = -1,
};
pub const dot11_phy_type_unknown = DOT11_PHY_TYPE.dot11_phy_type_unknown;
pub const dot11_phy_type_any = DOT11_PHY_TYPE.dot11_phy_type_any;
pub const dot11_phy_type_fhss = DOT11_PHY_TYPE.dot11_phy_type_fhss;
pub const dot11_phy_type_dsss = DOT11_PHY_TYPE.dot11_phy_type_dsss;
pub const dot11_phy_type_irbaseband = DOT11_PHY_TYPE.dot11_phy_type_irbaseband;
pub const dot11_phy_type_ofdm = DOT11_PHY_TYPE.dot11_phy_type_ofdm;
pub const dot11_phy_type_hrdsss = DOT11_PHY_TYPE.dot11_phy_type_hrdsss;
pub const dot11_phy_type_erp = DOT11_PHY_TYPE.dot11_phy_type_erp;
pub const dot11_phy_type_ht = DOT11_PHY_TYPE.dot11_phy_type_ht;
pub const dot11_phy_type_vht = DOT11_PHY_TYPE.dot11_phy_type_vht;
pub const dot11_phy_type_dmg = DOT11_PHY_TYPE.dot11_phy_type_dmg;
pub const dot11_phy_type_he = DOT11_PHY_TYPE.dot11_phy_type_he;
pub const dot11_phy_type_IHV_start = DOT11_PHY_TYPE.dot11_phy_type_IHV_start;
pub const dot11_phy_type_IHV_end = DOT11_PHY_TYPE.dot11_phy_type_IHV_end;

pub const DOT11_RATE_SET = extern struct {
    uRateSetLength: u32,
    ucRateSet: [126]u8,
};

pub const DOT11_WFD_SESSION_INFO = extern struct {
    uSessionInfoLength: u16,
    ucSessionInfo: [144]u8,
};

pub const DOT11_OFFLOAD_CAPABILITY = extern struct {
    uReserved: u32,
    uFlags: u32,
    uSupportedWEPAlgorithms: u32,
    uNumOfReplayWindows: u32,
    uMaxWEPKeyMappingLength: u32,
    uSupportedAuthAlgorithms: u32,
    uMaxAuthKeyMappingLength: u32,
};

pub const DOT11_CURRENT_OFFLOAD_CAPABILITY = extern struct {
    uReserved: u32,
    uFlags: u32,
};

pub const DOT11_OFFLOAD_TYPE = extern enum(i32) {
    dot11_offload_type_wep = 1,
    dot11_offload_type_auth = 2,
};
pub const dot11_offload_type_wep = DOT11_OFFLOAD_TYPE.dot11_offload_type_wep;
pub const dot11_offload_type_auth = DOT11_OFFLOAD_TYPE.dot11_offload_type_auth;

pub const DOT11_IV48_COUNTER = extern struct {
    uIV32Counter: u32,
    usIV16Counter: u16,
};

pub const DOT11_WEP_OFFLOAD = extern struct {
    uReserved: u32,
    hOffloadContext: HANDLE,
    hOffload: HANDLE,
    dot11OffloadType: DOT11_OFFLOAD_TYPE,
    dwAlgorithm: u32,
    bRowIsOutbound: u8,
    bUseDefault: u8,
    uFlags: u32,
    ucMacAddress: [6]u8,
    uNumOfRWsOnPeer: u32,
    uNumOfRWsOnMe: u32,
    dot11IV48Counters: [16]DOT11_IV48_COUNTER,
    usDot11RWBitMaps: [16]u16,
    usKeyLength: u16,
    ucKey: [1]u8,
};

pub const DOT11_WEP_UPLOAD = extern struct {
    uReserved: u32,
    dot11OffloadType: DOT11_OFFLOAD_TYPE,
    hOffload: HANDLE,
    uNumOfRWsUsed: u32,
    dot11IV48Counters: [16]DOT11_IV48_COUNTER,
    usDot11RWBitMaps: [16]u16,
};

pub const DOT11_KEY_DIRECTION = extern enum(i32) {
    dot11_key_direction_both = 1,
    dot11_key_direction_inbound = 2,
    dot11_key_direction_outbound = 3,
};
pub const dot11_key_direction_both = DOT11_KEY_DIRECTION.dot11_key_direction_both;
pub const dot11_key_direction_inbound = DOT11_KEY_DIRECTION.dot11_key_direction_inbound;
pub const dot11_key_direction_outbound = DOT11_KEY_DIRECTION.dot11_key_direction_outbound;

pub const DOT11_DEFAULT_WEP_OFFLOAD = extern struct {
    uReserved: u32,
    hOffloadContext: HANDLE,
    hOffload: HANDLE,
    dwIndex: u32,
    dot11OffloadType: DOT11_OFFLOAD_TYPE,
    dwAlgorithm: u32,
    uFlags: u32,
    dot11KeyDirection: DOT11_KEY_DIRECTION,
    ucMacAddress: [6]u8,
    uNumOfRWsOnMe: u32,
    dot11IV48Counters: [16]DOT11_IV48_COUNTER,
    usDot11RWBitMaps: [16]u16,
    usKeyLength: u16,
    ucKey: [1]u8,
};

pub const DOT11_DEFAULT_WEP_UPLOAD = extern struct {
    uReserved: u32,
    dot11OffloadType: DOT11_OFFLOAD_TYPE,
    hOffload: HANDLE,
    uNumOfRWsUsed: u32,
    dot11IV48Counters: [16]DOT11_IV48_COUNTER,
    usDot11RWBitMaps: [16]u16,
};

pub const DOT11_OPERATION_MODE_CAPABILITY = extern struct {
    uReserved: u32,
    uMajorVersion: u32,
    uMinorVersion: u32,
    uNumOfTXBuffers: u32,
    uNumOfRXBuffers: u32,
    uOpModeCapability: u32,
};

pub const DOT11_CURRENT_OPERATION_MODE = extern struct {
    uReserved: u32,
    uCurrentOpMode: u32,
};

pub const DOT11_SCAN_TYPE = extern enum(i32) {
    dot11_scan_type_active = 1,
    dot11_scan_type_passive = 2,
    dot11_scan_type_auto = 3,
    dot11_scan_type_forced = -2147483648,
};
pub const dot11_scan_type_active = DOT11_SCAN_TYPE.dot11_scan_type_active;
pub const dot11_scan_type_passive = DOT11_SCAN_TYPE.dot11_scan_type_passive;
pub const dot11_scan_type_auto = DOT11_SCAN_TYPE.dot11_scan_type_auto;
pub const dot11_scan_type_forced = DOT11_SCAN_TYPE.dot11_scan_type_forced;

pub const DOT11_SCAN_REQUEST = extern struct {
    dot11BSSType: DOT11_BSS_TYPE,
    dot11BSSID: [6]u8,
    dot11SSID: DOT11_SSID,
    dot11ScanType: DOT11_SCAN_TYPE,
    bRestrictedScan: u8,
    bUseRequestIE: u8,
    uRequestIDsOffset: u32,
    uNumOfRequestIDs: u32,
    uPhyTypesOffset: u32,
    uNumOfPhyTypes: u32,
    uIEsOffset: u32,
    uIEsLength: u32,
    ucBuffer: [1]u8,
};

pub const CH_DESCRIPTION_TYPE = extern enum(i32) {
    ch_description_type_logical = 1,
    ch_description_type_center_frequency = 2,
    ch_description_type_phy_specific = 3,
};
pub const ch_description_type_logical = CH_DESCRIPTION_TYPE.ch_description_type_logical;
pub const ch_description_type_center_frequency = CH_DESCRIPTION_TYPE.ch_description_type_center_frequency;
pub const ch_description_type_phy_specific = CH_DESCRIPTION_TYPE.ch_description_type_phy_specific;

pub const DOT11_PHY_TYPE_INFO = extern struct {
    dot11PhyType: DOT11_PHY_TYPE,
    bUseParameters: u8,
    uProbeDelay: u32,
    uMinChannelTime: u32,
    uMaxChannelTime: u32,
    ChDescriptionType: CH_DESCRIPTION_TYPE,
    uChannelListSize: u32,
    ucChannelListBuffer: [1]u8,
};

pub const DOT11_SCAN_REQUEST_V2 = extern struct {
    dot11BSSType: DOT11_BSS_TYPE,
    dot11BSSID: [6]u8,
    dot11ScanType: DOT11_SCAN_TYPE,
    bRestrictedScan: u8,
    udot11SSIDsOffset: u32,
    uNumOfdot11SSIDs: u32,
    bUseRequestIE: u8,
    uRequestIDsOffset: u32,
    uNumOfRequestIDs: u32,
    uPhyTypeInfosOffset: u32,
    uNumOfPhyTypeInfos: u32,
    uIEsOffset: u32,
    uIEsLength: u32,
    ucBuffer: [1]u8,
};

pub const DOT11_PHY_TYPE_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11PhyType: [1]DOT11_PHY_TYPE,
};

pub const DOT11_BSS_DESCRIPTION = extern struct {
    uReserved: u32,
    dot11BSSID: [6]u8,
    dot11BSSType: DOT11_BSS_TYPE,
    usBeaconPeriod: u16,
    ullTimestamp: u64,
    usCapabilityInformation: u16,
    uBufferLength: u32,
    ucBuffer: [1]u8,
};

pub const DOT11_JOIN_REQUEST = extern struct {
    uJoinFailureTimeout: u32,
    OperationalRateSet: DOT11_RATE_SET,
    uChCenterFrequency: u32,
    dot11BSSDescription: DOT11_BSS_DESCRIPTION,
};

pub const DOT11_START_REQUEST = extern struct {
    uStartFailureTimeout: u32,
    OperationalRateSet: DOT11_RATE_SET,
    uChCenterFrequency: u32,
    dot11BSSDescription: DOT11_BSS_DESCRIPTION,
};

pub const DOT11_UPDATE_IE_OP = extern enum(i32) {
    dot11_update_ie_op_create_replace = 1,
    dot11_update_ie_op_delete = 2,
};
pub const dot11_update_ie_op_create_replace = DOT11_UPDATE_IE_OP.dot11_update_ie_op_create_replace;
pub const dot11_update_ie_op_delete = DOT11_UPDATE_IE_OP.dot11_update_ie_op_delete;

pub const DOT11_UPDATE_IE = extern struct {
    dot11UpdateIEOp: DOT11_UPDATE_IE_OP,
    uBufferLength: u32,
    ucBuffer: [1]u8,
};

pub const DOT11_RESET_TYPE = extern enum(i32) {
    dot11_reset_type_phy = 1,
    dot11_reset_type_mac = 2,
    dot11_reset_type_phy_and_mac = 3,
};
pub const dot11_reset_type_phy = DOT11_RESET_TYPE.dot11_reset_type_phy;
pub const dot11_reset_type_mac = DOT11_RESET_TYPE.dot11_reset_type_mac;
pub const dot11_reset_type_phy_and_mac = DOT11_RESET_TYPE.dot11_reset_type_phy_and_mac;

pub const DOT11_RESET_REQUEST = extern struct {
    dot11ResetType: DOT11_RESET_TYPE,
    dot11MacAddress: [6]u8,
    bSetDefaultMIB: u8,
};

pub const DOT11_OPTIONAL_CAPABILITY = extern struct {
    uReserved: u32,
    bDot11PCF: u8,
    bDot11PCFMPDUTransferToPC: u8,
    bStrictlyOrderedServiceClass: u8,
};

pub const DOT11_CURRENT_OPTIONAL_CAPABILITY = extern struct {
    uReserved: u32,
    bDot11CFPollable: u8,
    bDot11PCF: u8,
    bDot11PCFMPDUTransferToPC: u8,
    bStrictlyOrderedServiceClass: u8,
};

pub const DOT11_POWER_MODE = extern enum(i32) {
    dot11_power_mode_unknown = 0,
    dot11_power_mode_active = 1,
    dot11_power_mode_powersave = 2,
};
pub const dot11_power_mode_unknown = DOT11_POWER_MODE.dot11_power_mode_unknown;
pub const dot11_power_mode_active = DOT11_POWER_MODE.dot11_power_mode_active;
pub const dot11_power_mode_powersave = DOT11_POWER_MODE.dot11_power_mode_powersave;

pub const DOT11_POWER_MGMT_MODE = extern struct {
    dot11PowerMode: DOT11_POWER_MODE,
    uPowerSaveLevel: u32,
    usListenInterval: u16,
    usAID: u16,
    bReceiveDTIMs: u8,
};

pub const DOT11_COUNTERS_ENTRY = extern struct {
    uTransmittedFragmentCount: u32,
    uMulticastTransmittedFrameCount: u32,
    uFailedCount: u32,
    uRetryCount: u32,
    uMultipleRetryCount: u32,
    uFrameDuplicateCount: u32,
    uRTSSuccessCount: u32,
    uRTSFailureCount: u32,
    uACKFailureCount: u32,
    uReceivedFragmentCount: u32,
    uMulticastReceivedFrameCount: u32,
    uFCSErrorCount: u32,
    uTransmittedFrameCount: u32,
};

pub const DOT11_SUPPORTED_PHY_TYPES = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11PHYType: [1]DOT11_PHY_TYPE,
};

pub const DOT11_TEMP_TYPE = extern enum(i32) {
    dot11_temp_type_unknown = 0,
    dot11_temp_type_1 = 1,
    dot11_temp_type_2 = 2,
};
pub const dot11_temp_type_unknown = DOT11_TEMP_TYPE.dot11_temp_type_unknown;
pub const dot11_temp_type_1 = DOT11_TEMP_TYPE.dot11_temp_type_1;
pub const dot11_temp_type_2 = DOT11_TEMP_TYPE.dot11_temp_type_2;

pub const DOT11_DIVERSITY_SUPPORT = extern enum(i32) {
    dot11_diversity_support_unknown = 0,
    dot11_diversity_support_fixedlist = 1,
    dot11_diversity_support_notsupported = 2,
    dot11_diversity_support_dynamic = 3,
};
pub const dot11_diversity_support_unknown = DOT11_DIVERSITY_SUPPORT.dot11_diversity_support_unknown;
pub const dot11_diversity_support_fixedlist = DOT11_DIVERSITY_SUPPORT.dot11_diversity_support_fixedlist;
pub const dot11_diversity_support_notsupported = DOT11_DIVERSITY_SUPPORT.dot11_diversity_support_notsupported;
pub const dot11_diversity_support_dynamic = DOT11_DIVERSITY_SUPPORT.dot11_diversity_support_dynamic;

pub const DOT11_SUPPORTED_POWER_LEVELS = extern struct {
    uNumOfSupportedPowerLevels: u32,
    uTxPowerLevelValues: [8]u32,
};

pub const DOT11_REG_DOMAIN_VALUE = extern struct {
    uRegDomainsSupportIndex: u32,
    uRegDomainsSupportValue: u32,
};

pub const DOT11_REG_DOMAINS_SUPPORT_VALUE = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11RegDomainValue: [1]DOT11_REG_DOMAIN_VALUE,
};

pub const DOT11_SUPPORTED_ANTENNA = extern struct {
    uAntennaListIndex: u32,
    bSupportedAntenna: u8,
};

pub const DOT11_SUPPORTED_ANTENNA_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11SupportedAntenna: [1]DOT11_SUPPORTED_ANTENNA,
};

pub const DOT11_DIVERSITY_SELECTION_RX = extern struct {
    uAntennaListIndex: u32,
    bDiversitySelectionRX: u8,
};

pub const DOT11_DIVERSITY_SELECTION_RX_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11DiversitySelectionRx: [1]DOT11_DIVERSITY_SELECTION_RX,
};

pub const DOT11_SUPPORTED_DATA_RATES_VALUE = extern struct {
    ucSupportedTxDataRatesValue: [8]u8,
    ucSupportedRxDataRatesValue: [8]u8,
};

pub const DOT11_SUPPORTED_DATA_RATES_VALUE_V2 = extern struct {
    ucSupportedTxDataRatesValue: [255]u8,
    ucSupportedRxDataRatesValue: [255]u8,
};

pub const DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY = extern struct {
    uMultiDomainCapabilityIndex: u32,
    uFirstChannelNumber: u32,
    uNumberOfChannels: u32,
    lMaximumTransmitPowerLevel: i32,
};

pub const DOT11_MD_CAPABILITY_ENTRY_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11MDCapabilityEntry: [1]DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY,
};

pub const DOT11_HOP_ALGO_ADOPTED = extern enum(i32) {
    dot11_hop_algo_current = 0,
    dot11_hop_algo_hop_index = 1,
    dot11_hop_algo_hcc = 2,
};
pub const dot11_hop_algo_current = DOT11_HOP_ALGO_ADOPTED.dot11_hop_algo_current;
pub const dot11_hop_algo_hop_index = DOT11_HOP_ALGO_ADOPTED.dot11_hop_algo_hop_index;
pub const dot11_hop_algo_hcc = DOT11_HOP_ALGO_ADOPTED.dot11_hop_algo_hcc;

pub const DOT11_HOPPING_PATTERN_ENTRY = extern struct {
    uHoppingPatternIndex: u32,
    uRandomTableFieldNumber: u32,
};

pub const DOT11_HOPPING_PATTERN_ENTRY_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11HoppingPatternEntry: [1]DOT11_HOPPING_PATTERN_ENTRY,
};

pub const DOT11_WPA_TSC = extern struct {
    uReserved: u32,
    dot11OffloadType: DOT11_OFFLOAD_TYPE,
    hOffload: HANDLE,
    dot11IV48Counter: DOT11_IV48_COUNTER,
};

pub const DOT11_RSSI_RANGE = extern struct {
    dot11PhyType: DOT11_PHY_TYPE,
    uRSSIMin: u32,
    uRSSIMax: u32,
};

pub const DOT11_NIC_SPECIFIC_EXTENSION = extern struct {
    uBufferLength: u32,
    uTotalBufferLength: u32,
    ucBuffer: [1]u8,
};

pub const DOT11_AP_JOIN_REQUEST = extern struct {
    uJoinFailureTimeout: u32,
    OperationalRateSet: DOT11_RATE_SET,
    uChCenterFrequency: u32,
    dot11BSSDescription: DOT11_BSS_DESCRIPTION,
};

pub const DOT11_RECV_SENSITIVITY = extern struct {
    ucDataRate: u8,
    lRSSIMin: i32,
    lRSSIMax: i32,
};

pub const DOT11_RECV_SENSITIVITY_LIST = extern struct {
    Anonymous: DOT11_RECV_SENSITIVITY_LIST._Anonymous_e__Union,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11RecvSensitivity: [1]DOT11_RECV_SENSITIVITY,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DOT11_AC_PARAM = extern enum(i32) {
    dot11_AC_param_BE = 0,
    dot11_AC_param_BK = 1,
    dot11_AC_param_VI = 2,
    dot11_AC_param_VO = 3,
    dot11_AC_param_max = 4,
};
pub const dot11_AC_param_BE = DOT11_AC_PARAM.dot11_AC_param_BE;
pub const dot11_AC_param_BK = DOT11_AC_PARAM.dot11_AC_param_BK;
pub const dot11_AC_param_VI = DOT11_AC_PARAM.dot11_AC_param_VI;
pub const dot11_AC_param_VO = DOT11_AC_PARAM.dot11_AC_param_VO;
pub const dot11_AC_param_max = DOT11_AC_PARAM.dot11_AC_param_max;

pub const DOT11_WME_AC_PARAMETERS = extern struct {
    ucAccessCategoryIndex: u8,
    ucAIFSN: u8,
    ucECWmin: u8,
    ucECWmax: u8,
    usTXOPLimit: u16,
};

pub const _DOT11_WME_AC_PARAMTERS_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11WMEACParameters: [1]DOT11_WME_AC_PARAMETERS,
};

pub const DOT11_WME_UPDATE_IE = extern struct {
    uParamElemMinBeaconIntervals: u32,
    uWMEInfoElemOffset: u32,
    uWMEInfoElemLength: u32,
    uWMEParamElemOffset: u32,
    uWMEParamElemLength: u32,
    ucBuffer: [1]u8,
};

pub const DOT11_QOS_TX_DURATION = extern struct {
    uNominalMSDUSize: u32,
    uMinPHYRate: u32,
    uDuration: u32,
};

pub const DOT11_QOS_TX_MEDIUM_TIME = extern struct {
    dot11PeerAddress: [6]u8,
    ucQoSPriority: u8,
    uMediumTimeAdmited: u32,
};

pub const DOT11_SUPPORTED_OFDM_FREQUENCY = extern struct {
    uCenterFrequency: u32,
};

pub const DOT11_SUPPORTED_OFDM_FREQUENCY_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11SupportedOFDMFrequency: [1]DOT11_SUPPORTED_OFDM_FREQUENCY,
};

pub const DOT11_SUPPORTED_DSSS_CHANNEL = extern struct {
    uChannel: u32,
};

pub const DOT11_SUPPORTED_DSSS_CHANNEL_LIST = extern struct {
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11SupportedDSSSChannel: [1]DOT11_SUPPORTED_DSSS_CHANNEL,
};

pub const DOT11_BYTE_ARRAY = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfBytes: u32,
    uTotalNumOfBytes: u32,
    ucBuffer: [1]u8,
};

pub const DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO = u32; // TODO: implement StructOrUnion types?

pub const DOT11_BSS_ENTRY = extern struct {
    uPhyId: u32,
    PhySpecificInfo: DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO,
    dot11BSSID: [6]u8,
    dot11BSSType: DOT11_BSS_TYPE,
    lRSSI: i32,
    uLinkQuality: u32,
    bInRegDomain: u8,
    usBeaconPeriod: u16,
    ullTimestamp: u64,
    ullHostTimestamp: u64,
    usCapabilityInformation: u16,
    uBufferLength: u32,
    ucBuffer: [1]u8,
};

pub const DOT11_SSID_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    SSIDs: [1]DOT11_SSID,
};

pub const DOT11_MAC_ADDRESS_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    MacAddrs: [6]u8,
};

pub const DOT11_PMKID_ENTRY = extern struct {
    BSSID: [6]u8,
    PMKID: [16]u8,
    uFlags: u32,
};

pub const DOT11_PMKID_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    PMKIDs: [1]DOT11_PMKID_ENTRY,
};

pub const DOT11_PHY_FRAME_STATISTICS = extern struct {
    ullTransmittedFrameCount: u64,
    ullMulticastTransmittedFrameCount: u64,
    ullFailedCount: u64,
    ullRetryCount: u64,
    ullMultipleRetryCount: u64,
    ullMaxTXLifetimeExceededCount: u64,
    ullTransmittedFragmentCount: u64,
    ullRTSSuccessCount: u64,
    ullRTSFailureCount: u64,
    ullACKFailureCount: u64,
    ullReceivedFrameCount: u64,
    ullMulticastReceivedFrameCount: u64,
    ullPromiscuousReceivedFrameCount: u64,
    ullMaxRXLifetimeExceededCount: u64,
    ullFrameDuplicateCount: u64,
    ullReceivedFragmentCount: u64,
    ullPromiscuousReceivedFragmentCount: u64,
    ullFCSErrorCount: u64,
};

pub const DOT11_MAC_FRAME_STATISTICS = extern struct {
    ullTransmittedFrameCount: u64,
    ullReceivedFrameCount: u64,
    ullTransmittedFailureFrameCount: u64,
    ullReceivedFailureFrameCount: u64,
    ullWEPExcludedCount: u64,
    ullTKIPLocalMICFailures: u64,
    ullTKIPReplays: u64,
    ullTKIPICVErrorCount: u64,
    ullCCMPReplays: u64,
    ullCCMPDecryptErrors: u64,
    ullWEPUndecryptableCount: u64,
    ullWEPICVErrorCount: u64,
    ullDecryptSuccessCount: u64,
    ullDecryptFailureCount: u64,
};

pub const DOT11_STATISTICS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ullFourWayHandshakeFailures: u64,
    ullTKIPCounterMeasuresInvoked: u64,
    ullReserved: u64,
    MacUcastCounters: DOT11_MAC_FRAME_STATISTICS,
    MacMcastCounters: DOT11_MAC_FRAME_STATISTICS,
    PhyCounters: [1]DOT11_PHY_FRAME_STATISTICS,
};

pub const DOT11_PRIVACY_EXEMPTION = extern struct {
    usEtherType: u16,
    usExemptionActionType: u16,
    usExemptionPacketType: u16,
};

pub const DOT11_PRIVACY_EXEMPTION_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    PrivacyExemptionEntries: [1]DOT11_PRIVACY_EXEMPTION,
};

pub const DOT11_AUTH_ALGORITHM_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    AlgorithmIds: [1]DOT11_AUTH_ALGORITHM,
};

pub const DOT11_AUTH_CIPHER_PAIR_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    AuthCipherPairs: [1]DOT11_AUTH_CIPHER_PAIR,
};

pub const DOT11_CIPHER_ALGORITHM_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    AlgorithmIds: [1]DOT11_CIPHER_ALGORITHM,
};

pub const DOT11_CIPHER_DEFAULT_KEY_VALUE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uKeyIndex: u32,
    AlgorithmId: DOT11_CIPHER_ALGORITHM,
    MacAddr: [6]u8,
    bDelete: u8,
    bStatic: u8,
    usKeyLength: u16,
    ucKey: [1]u8,
};

pub const DOT11_KEY_ALGO_TKIP_MIC = extern struct {
    ucIV48Counter: [6]u8,
    ulTKIPKeyLength: u32,
    ulMICKeyLength: u32,
    ucTKIPMICKeys: [1]u8,
};

pub const DOT11_KEY_ALGO_CCMP = extern struct {
    ucIV48Counter: [6]u8,
    ulCCMPKeyLength: u32,
    ucCCMPKey: [1]u8,
};

pub const DOT11_KEY_ALGO_GCMP = extern struct {
    ucIV48Counter: [6]u8,
    ulGCMPKeyLength: u32,
    ucGCMPKey: [1]u8,
};

pub const DOT11_KEY_ALGO_GCMP_256 = extern struct {
    ucIV48Counter: [6]u8,
    ulGCMP256KeyLength: u32,
    ucGCMP256Key: [1]u8,
};

pub const DOT11_KEY_ALGO_BIP = extern struct {
    ucIPN: [6]u8,
    ulBIPKeyLength: u32,
    ucBIPKey: [1]u8,
};

pub const DOT11_KEY_ALGO_BIP_GMAC_256 = extern struct {
    ucIPN: [6]u8,
    ulBIPGmac256KeyLength: u32,
    ucBIPGmac256Key: [1]u8,
};

pub const DOT11_DIRECTION = extern enum(i32) {
    DOT11_DIR_INBOUND = 1,
    DOT11_DIR_OUTBOUND = 2,
    DOT11_DIR_BOTH = 3,
};
pub const DOT11_DIR_INBOUND = DOT11_DIRECTION.DOT11_DIR_INBOUND;
pub const DOT11_DIR_OUTBOUND = DOT11_DIRECTION.DOT11_DIR_OUTBOUND;
pub const DOT11_DIR_BOTH = DOT11_DIRECTION.DOT11_DIR_BOTH;

pub const DOT11_CIPHER_KEY_MAPPING_KEY_VALUE = extern struct {
    PeerMacAddr: [6]u8,
    AlgorithmId: DOT11_CIPHER_ALGORITHM,
    Direction: DOT11_DIRECTION,
    bDelete: u8,
    bStatic: u8,
    usKeyLength: u16,
    ucKey: [1]u8,
};

pub const DOT11_ASSOCIATION_STATE = extern enum(i32) {
    dot11_assoc_state_zero = 0,
    dot11_assoc_state_unauth_unassoc = 1,
    dot11_assoc_state_auth_unassoc = 2,
    dot11_assoc_state_auth_assoc = 3,
};
pub const dot11_assoc_state_zero = DOT11_ASSOCIATION_STATE.dot11_assoc_state_zero;
pub const dot11_assoc_state_unauth_unassoc = DOT11_ASSOCIATION_STATE.dot11_assoc_state_unauth_unassoc;
pub const dot11_assoc_state_auth_unassoc = DOT11_ASSOCIATION_STATE.dot11_assoc_state_auth_unassoc;
pub const dot11_assoc_state_auth_assoc = DOT11_ASSOCIATION_STATE.dot11_assoc_state_auth_assoc;

pub const DOT11_ASSOCIATION_INFO_EX = extern struct {
    PeerMacAddress: [6]u8,
    BSSID: [6]u8,
    usCapabilityInformation: u16,
    usListenInterval: u16,
    ucPeerSupportedRates: [255]u8,
    usAssociationID: u16,
    dot11AssociationState: DOT11_ASSOCIATION_STATE,
    dot11PowerMode: DOT11_POWER_MODE,
    liAssociationUpTime: LARGE_INTEGER,
    ullNumOfTxPacketSuccesses: u64,
    ullNumOfTxPacketFailures: u64,
    ullNumOfRxPacketSuccesses: u64,
    ullNumOfRxPacketFailures: u64,
};

pub const DOT11_ASSOCIATION_INFO_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11AssocInfo: [1]DOT11_ASSOCIATION_INFO_EX,
};

pub const DOT11_PHY_ID_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    dot11PhyId: [1]u32,
};

pub const DOT11_EXTSTA_CAPABILITY = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uScanSSIDListSize: u32,
    uDesiredBSSIDListSize: u32,
    uDesiredSSIDListSize: u32,
    uExcludedMacAddressListSize: u32,
    uPrivacyExemptionListSize: u32,
    uKeyMappingTableSize: u32,
    uDefaultKeyTableSize: u32,
    uWEPKeyValueMaxLength: u32,
    uPMKIDCacheSize: u32,
    uMaxNumPerSTADefaultKeyTables: u32,
};

pub const DOT11_DATA_RATE_MAPPING_ENTRY = extern struct {
    ucDataRateIndex: u8,
    ucDataRateFlag: u8,
    usDataRateValue: u16,
};

pub const DOT11_DATA_RATE_MAPPING_TABLE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uDataRateMappingLength: u32,
    DataRateMappingEntries: [126]DOT11_DATA_RATE_MAPPING_ENTRY,
};

pub const DOT11_COUNTRY_OR_REGION_STRING_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    CountryOrRegionStrings: [3]u8,
};

pub const DOT11_PORT_STATE_NOTIFICATION = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMac: [6]u8,
    bOpen: u8,
};

pub const DOT11_IBSS_PARAMS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    bJoinOnly: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_QOS_PARAMS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ucEnabledQoSProtocolFlags: u8,
};

pub const DOT11_ASSOCIATION_PARAMS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    BSSID: [6]u8,
    uAssocRequestIEsOffset: u32,
    uAssocRequestIEsLength: u32,
};

pub const DOT11_FRAGMENT_DESCRIPTOR = extern struct {
    uOffset: u32,
    uLength: u32,
};

pub const DOT11_PER_MSDU_COUNTERS = extern struct {
    uTransmittedFragmentCount: u32,
    uRetryCount: u32,
    uRTSSuccessCount: u32,
    uRTSFailureCount: u32,
    uACKFailureCount: u32,
};

pub const DOT11_HRDSSS_PHY_ATTRIBUTES = extern struct {
    bShortPreambleOptionImplemented: u8,
    bPBCCOptionImplemented: u8,
    bChannelAgilityPresent: u8,
    uHRCCAModeSupported: u32,
};

pub const DOT11_OFDM_PHY_ATTRIBUTES = extern struct {
    uFrequencyBandsSupported: u32,
};

pub const DOT11_ERP_PHY_ATTRIBUTES = extern struct {
    HRDSSSAttributes: DOT11_HRDSSS_PHY_ATTRIBUTES,
    bERPPBCCOptionImplemented: u8,
    bDSSSOFDMOptionImplemented: u8,
    bShortSlotTimeOptionImplemented: u8,
};

pub const DOT11_PHY_ATTRIBUTES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PhyType: DOT11_PHY_TYPE,
    bHardwarePhyState: u8,
    bSoftwarePhyState: u8,
    bCFPollable: u8,
    uMPDUMaxLength: u32,
    TempType: DOT11_TEMP_TYPE,
    DiversitySupport: DOT11_DIVERSITY_SUPPORT,
    PhySpecificAttributes: DOT11_PHY_ATTRIBUTES._PhySpecificAttributes_e__Union,
    uNumberSupportedPowerLevels: u32,
    TxPowerLevels: [8]u32,
    uNumDataRateMappingEntries: u32,
    DataRateMappingEntries: [126]DOT11_DATA_RATE_MAPPING_ENTRY,
    SupportedDataRatesValue: DOT11_SUPPORTED_DATA_RATES_VALUE_V2,
    const _PhySpecificAttributes_e__Union = u32; // TODO: generate this nested type!
};

pub const DOT11_EXTSTA_ATTRIBUTES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uScanSSIDListSize: u32,
    uDesiredBSSIDListSize: u32,
    uDesiredSSIDListSize: u32,
    uExcludedMacAddressListSize: u32,
    uPrivacyExemptionListSize: u32,
    uKeyMappingTableSize: u32,
    uDefaultKeyTableSize: u32,
    uWEPKeyValueMaxLength: u32,
    uPMKIDCacheSize: u32,
    uMaxNumPerSTADefaultKeyTables: u32,
    bStrictlyOrderedServiceClassImplemented: u8,
    ucSupportedQoSProtocolFlags: u8,
    bSafeModeImplemented: u8,
    uNumSupportedCountryOrRegionStrings: u32,
    pSupportedCountryOrRegionStrings: *u8,
    uInfraNumSupportedUcastAlgoPairs: u32,
    pInfraSupportedUcastAlgoPairs: *DOT11_AUTH_CIPHER_PAIR,
    uInfraNumSupportedMcastAlgoPairs: u32,
    pInfraSupportedMcastAlgoPairs: *DOT11_AUTH_CIPHER_PAIR,
    uAdhocNumSupportedUcastAlgoPairs: u32,
    pAdhocSupportedUcastAlgoPairs: *DOT11_AUTH_CIPHER_PAIR,
    uAdhocNumSupportedMcastAlgoPairs: u32,
    pAdhocSupportedMcastAlgoPairs: *DOT11_AUTH_CIPHER_PAIR,
    bAutoPowerSaveMode: u8,
    uMaxNetworkOffloadListSize: u32,
    bMFPCapable: u8,
    uInfraNumSupportedMcastMgmtAlgoPairs: u32,
    pInfraSupportedMcastMgmtAlgoPairs: *DOT11_AUTH_CIPHER_PAIR,
    bNeighborReportSupported: u8,
    bAPChannelReportSupported: u8,
    bActionFramesSupported: u8,
    bANQPQueryOffloadSupported: u8,
    bHESSIDConnectionSupported: u8,
};

pub const DOT11_RECV_EXTENSION_INFO = extern struct {
    uVersion: u32,
    pvReserved: *c_void,
    dot11PhyType: DOT11_PHY_TYPE,
    uChCenterFrequency: u32,
    lRSSI: i32,
    lRSSIMin: i32,
    lRSSIMax: i32,
    uRSSI: u32,
    ucPriority: u8,
    ucDataRate: u8,
    ucPeerMacAddress: [6]u8,
    dwExtendedStatus: u32,
    hWEPOffloadContext: HANDLE,
    hAuthOffloadContext: HANDLE,
    usWEPAppliedMask: u16,
    usWPAMSDUPriority: u16,
    dot11LowestIV48Counter: DOT11_IV48_COUNTER,
    usDot11LeftRWBitMap: u16,
    dot11HighestIV48Counter: DOT11_IV48_COUNTER,
    usDot11RightRWBitMap: u16,
    usNumberOfMPDUsReceived: u16,
    usNumberOfFragments: u16,
    pNdisPackets: [1]*c_void,
};

pub const DOT11_RECV_EXTENSION_INFO_V2 = extern struct {
    uVersion: u32,
    pvReserved: *c_void,
    dot11PhyType: DOT11_PHY_TYPE,
    uChCenterFrequency: u32,
    lRSSI: i32,
    uRSSI: u32,
    ucPriority: u8,
    ucDataRate: u8,
    ucPeerMacAddress: [6]u8,
    dwExtendedStatus: u32,
    hWEPOffloadContext: HANDLE,
    hAuthOffloadContext: HANDLE,
    usWEPAppliedMask: u16,
    usWPAMSDUPriority: u16,
    dot11LowestIV48Counter: DOT11_IV48_COUNTER,
    usDot11LeftRWBitMap: u16,
    dot11HighestIV48Counter: DOT11_IV48_COUNTER,
    usDot11RightRWBitMap: u16,
    usNumberOfMPDUsReceived: u16,
    usNumberOfFragments: u16,
    pNdisPackets: [1]*c_void,
};

pub const DOT11_STATUS_INDICATION = extern struct {
    uStatusType: u32,
    ndisStatus: i32,
};

pub const DOT11_MPDU_MAX_LENGTH_INDICATION = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uPhyId: u32,
    uMPDUMaxLength: u32,
};

pub const DOT11_ASSOCIATION_START_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    MacAddr: [6]u8,
    SSID: DOT11_SSID,
    uIHVDataOffset: u32,
    uIHVDataSize: u32,
};

pub const DOT11_ENCAP_ENTRY = extern struct {
    usEtherType: u16,
    usEncapType: u16,
};

pub const DOT11_DS_INFO = extern enum(i32) {
    DOT11_DS_CHANGED = 0,
    DOT11_DS_UNCHANGED = 1,
    DOT11_DS_UNKNOWN = 2,
};
pub const DOT11_DS_CHANGED = DOT11_DS_INFO.DOT11_DS_CHANGED;
pub const DOT11_DS_UNCHANGED = DOT11_DS_INFO.DOT11_DS_UNCHANGED;
pub const DOT11_DS_UNKNOWN = DOT11_DS_INFO.DOT11_DS_UNKNOWN;

pub const DOT11_ASSOCIATION_COMPLETION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    MacAddr: [6]u8,
    uStatus: u32,
    bReAssocReq: u8,
    bReAssocResp: u8,
    uAssocReqOffset: u32,
    uAssocReqSize: u32,
    uAssocRespOffset: u32,
    uAssocRespSize: u32,
    uBeaconOffset: u32,
    uBeaconSize: u32,
    uIHVDataOffset: u32,
    uIHVDataSize: u32,
    AuthAlgo: DOT11_AUTH_ALGORITHM,
    UnicastCipher: DOT11_CIPHER_ALGORITHM,
    MulticastCipher: DOT11_CIPHER_ALGORITHM,
    uActivePhyListOffset: u32,
    uActivePhyListSize: u32,
    bFourAddressSupported: u8,
    bPortAuthorized: u8,
    ucActiveQoSProtocol: u8,
    DSInfo: DOT11_DS_INFO,
    uEncapTableOffset: u32,
    uEncapTableSize: u32,
    MulticastMgmtCipher: DOT11_CIPHER_ALGORITHM,
    uAssocComebackTime: u32,
};

pub const DOT11_CONNECTION_START_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    BSSType: DOT11_BSS_TYPE,
    AdhocBSSID: [6]u8,
    AdhocSSID: DOT11_SSID,
};

pub const DOT11_CONNECTION_COMPLETION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uStatus: u32,
};

pub const DOT11_ROAMING_START_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    AdhocBSSID: [6]u8,
    AdhocSSID: DOT11_SSID,
    uRoamingReason: u32,
};

pub const DOT11_ROAMING_COMPLETION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uStatus: u32,
};

pub const DOT11_DISASSOCIATION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    MacAddr: [6]u8,
    uReason: u32,
    uIHVDataOffset: u32,
    uIHVDataSize: u32,
};

pub const DOT11_TKIPMIC_FAILURE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    bDefaultKeyFailure: u8,
    uKeyIndex: u32,
    PeerMac: [6]u8,
};

pub const DOT11_PMKID_CANDIDATE_LIST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uCandidateListSize: u32,
    uCandidateListOffset: u32,
};

pub const DOT11_BSSID_CANDIDATE = extern struct {
    BSSID: [6]u8,
    uFlags: u32,
};

pub const DOT11_PHY_STATE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uPhyId: u32,
    bHardwarePhyState: u8,
    bSoftwarePhyState: u8,
};

pub const DOT11_LINK_QUALITY_ENTRY = extern struct {
    PeerMacAddr: [6]u8,
    ucLinkQuality: u8,
};

pub const DOT11_LINK_QUALITY_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uLinkQualityListSize: u32,
    uLinkQualityListOffset: u32,
};

pub const DOT11_EXTSTA_SEND_CONTEXT = extern struct {
    Header: NDIS_OBJECT_HEADER,
    usExemptionActionType: u16,
    uPhyId: u32,
    uDelayedSleepValue: u32,
    pvMediaSpecificInfo: *c_void,
    uSendFlags: u32,
};

pub const DOT11_EXTSTA_RECV_CONTEXT = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uReceiveFlags: u32,
    uPhyId: u32,
    uChCenterFrequency: u32,
    usNumberOfMPDUsReceived: u16,
    lRSSI: i32,
    ucDataRate: u8,
    uSizeMediaSpecificInfo: u32,
    pvMediaSpecificInfo: *c_void,
    ullTimestamp: u64,
};

pub const DOT11_EXTAP_ATTRIBUTES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uScanSSIDListSize: u32,
    uDesiredSSIDListSize: u32,
    uPrivacyExemptionListSize: u32,
    uAssociationTableSize: u32,
    uDefaultKeyTableSize: u32,
    uWEPKeyValueMaxLength: u32,
    bStrictlyOrderedServiceClassImplemented: u8,
    uNumSupportedCountryOrRegionStrings: u32,
    pSupportedCountryOrRegionStrings: *u8,
    uInfraNumSupportedUcastAlgoPairs: u32,
    pInfraSupportedUcastAlgoPairs: *DOT11_AUTH_CIPHER_PAIR,
    uInfraNumSupportedMcastAlgoPairs: u32,
    pInfraSupportedMcastAlgoPairs: *DOT11_AUTH_CIPHER_PAIR,
};

pub const DOT11_INCOMING_ASSOC_STARTED_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMacAddr: [6]u8,
};

pub const DOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMacAddr: [6]u8,
    bReAssocReq: u8,
    uAssocReqOffset: u32,
    uAssocReqSize: u32,
};

pub const DOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMacAddr: [6]u8,
    uStatus: u32,
    ucErrorSource: u8,
    bReAssocReq: u8,
    bReAssocResp: u8,
    uAssocReqOffset: u32,
    uAssocReqSize: u32,
    uAssocRespOffset: u32,
    uAssocRespSize: u32,
    AuthAlgo: DOT11_AUTH_ALGORITHM,
    UnicastCipher: DOT11_CIPHER_ALGORITHM,
    MulticastCipher: DOT11_CIPHER_ALGORITHM,
    uActivePhyListOffset: u32,
    uActivePhyListSize: u32,
    uBeaconOffset: u32,
    uBeaconSize: u32,
};

pub const DOT11_STOP_AP_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ulReason: u32,
};

pub const DOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ulPhyId: u32,
    Anonymous: DOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const DOT11_CAN_SUSTAIN_AP_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ulReason: u32,
};

pub const DOT11_AVAILABLE_CHANNEL_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    uChannelNumber: [1]u32,
};

pub const DOT11_AVAILABLE_FREQUENCY_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    uFrequencyValue: [1]u32,
};

pub const DOT11_DISASSOCIATE_PEER_REQUEST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMacAddr: [6]u8,
    usReason: u16,
};

pub const DOT11_INCOMING_ASSOC_DECISION = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMacAddr: [6]u8,
    bAccept: u8,
    usReasonCode: u16,
    uAssocResponseIEsOffset: u32,
    uAssocResponseIEsLength: u32,
};

pub const DOT11_INCOMING_ASSOC_DECISION_V2 = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerMacAddr: [6]u8,
    bAccept: u8,
    usReasonCode: u16,
    uAssocResponseIEsOffset: u32,
    uAssocResponseIEsLength: u32,
    WFDStatus: u8,
};

pub const DOT11_ADDITIONAL_IE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uBeaconIEsOffset: u32,
    uBeaconIEsLength: u32,
    uResponseIEsOffset: u32,
    uResponseIEsLength: u32,
};

pub const DOT11_PEER_STATISTICS = extern struct {
    ullDecryptSuccessCount: u64,
    ullDecryptFailureCount: u64,
    ullTxPacketSuccessCount: u64,
    ullTxPacketFailureCount: u64,
    ullRxPacketSuccessCount: u64,
    ullRxPacketFailureCount: u64,
};

pub const DOT11_PEER_INFO = extern struct {
    MacAddress: [6]u8,
    usCapabilityInformation: u16,
    AuthAlgo: DOT11_AUTH_ALGORITHM,
    UnicastCipherAlgo: DOT11_CIPHER_ALGORITHM,
    MulticastCipherAlgo: DOT11_CIPHER_ALGORITHM,
    bWpsEnabled: u8,
    usListenInterval: u16,
    ucSupportedRates: [255]u8,
    usAssociationID: u16,
    AssociationState: DOT11_ASSOCIATION_STATE,
    PowerMode: DOT11_POWER_MODE,
    liAssociationUpTime: LARGE_INTEGER,
    Statistics: DOT11_PEER_STATISTICS,
};

pub const DOT11_PEER_INFO_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    PeerInfo: [1]DOT11_PEER_INFO,
};

pub const DOT11_VWIFI_COMBINATION = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumInfrastructure: u32,
    uNumAdhoc: u32,
    uNumSoftAP: u32,
};

pub const DOT11_VWIFI_COMBINATION_V2 = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumInfrastructure: u32,
    uNumAdhoc: u32,
    uNumSoftAP: u32,
    uNumVirtualStation: u32,
};

pub const DOT11_VWIFI_COMBINATION_V3 = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumInfrastructure: u32,
    uNumAdhoc: u32,
    uNumSoftAP: u32,
    uNumVirtualStation: u32,
    uNumWFDGroup: u32,
};

pub const DOT11_VWIFI_ATTRIBUTES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uTotalNumOfEntries: u32,
    Combinations: [1]DOT11_VWIFI_COMBINATION,
};

pub const DOT11_MAC_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uOpmodeMask: u32,
};

pub const DOT11_MAC_INFO = extern struct {
    uReserved: u32,
    uNdisPortNumber: u32,
    MacAddr: [6]u8,
};

pub const DOT11_WFD_ATTRIBUTES = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumConcurrentGORole: u32,
    uNumConcurrentClientRole: u32,
    WPSVersionsSupported: u32,
    bServiceDiscoverySupported: u8,
    bClientDiscoverabilitySupported: u8,
    bInfrastructureManagementSupported: u8,
    uMaxSecondaryDeviceTypeListSize: u32,
    DeviceAddress: [6]u8,
    uInterfaceAddressListCount: u32,
    pInterfaceAddressList: *u8,
    uNumSupportedCountryOrRegionStrings: u32,
    pSupportedCountryOrRegionStrings: *u8,
    uDiscoveryFilterListSize: u32,
    uGORoleClientTableSize: u32,
};

pub const DOT11_WFD_DEVICE_TYPE = extern struct {
    CategoryID: u16,
    SubCategoryID: u16,
    OUI: [4]u8,
};

pub const DOT11_WPS_DEVICE_NAME = extern struct {
    uDeviceNameLength: u32,
    ucDeviceName: [32]u8,
};

pub const DOT11_WFD_CONFIGURATION_TIMEOUT = extern struct {
    GOTimeout: u8,
    ClientTimeout: u8,
};

pub const DOT11_WFD_GROUP_ID = extern struct {
    DeviceAddress: [6]u8,
    SSID: DOT11_SSID,
};

pub const DOT11_WFD_GO_INTENT = extern struct {
    _bitfield: u8,
};

pub const DOT11_WFD_CHANNEL = extern struct {
    CountryRegionString: [3]u8,
    OperatingClass: u8,
    ChannelNumber: u8,
};

pub const DOT11_WPS_CONFIG_METHOD = extern enum(i32) {
    NULL = 0,
    DISPLAY = 8,
    NFC_TAG = 32,
    NFC_INTERFACE = 64,
    PUSHBUTTON = 128,
    KEYPAD = 256,
    WFDS_DEFAULT = 4096,
};
pub const DOT11_WPS_CONFIG_METHOD_NULL = DOT11_WPS_CONFIG_METHOD.NULL;
pub const DOT11_WPS_CONFIG_METHOD_DISPLAY = DOT11_WPS_CONFIG_METHOD.DISPLAY;
pub const DOT11_WPS_CONFIG_METHOD_NFC_TAG = DOT11_WPS_CONFIG_METHOD.NFC_TAG;
pub const DOT11_WPS_CONFIG_METHOD_NFC_INTERFACE = DOT11_WPS_CONFIG_METHOD.NFC_INTERFACE;
pub const DOT11_WPS_CONFIG_METHOD_PUSHBUTTON = DOT11_WPS_CONFIG_METHOD.PUSHBUTTON;
pub const DOT11_WPS_CONFIG_METHOD_KEYPAD = DOT11_WPS_CONFIG_METHOD.KEYPAD;
pub const DOT11_WPS_CONFIG_METHOD_WFDS_DEFAULT = DOT11_WPS_CONFIG_METHOD.WFDS_DEFAULT;

pub const DOT11_WPS_DEVICE_PASSWORD_ID = extern enum(i32) {
    DOT11_WPS_PASSWORD_ID_DEFAULT = 0,
    DOT11_WPS_PASSWORD_ID_USER_SPECIFIED = 1,
    DOT11_WPS_PASSWORD_ID_MACHINE_SPECIFIED = 2,
    DOT11_WPS_PASSWORD_ID_REKEY = 3,
    DOT11_WPS_PASSWORD_ID_PUSHBUTTON = 4,
    DOT11_WPS_PASSWORD_ID_REGISTRAR_SPECIFIED = 5,
    DOT11_WPS_PASSWORD_ID_NFC_CONNECTION_HANDOVER = 7,
    DOT11_WPS_PASSWORD_ID_WFD_SERVICES = 8,
    DOT11_WPS_PASSWORD_ID_OOB_RANGE_MIN = 16,
    DOT11_WPS_PASSWORD_ID_OOB_RANGE_MAX = 65535,
};
pub const DOT11_WPS_PASSWORD_ID_DEFAULT = DOT11_WPS_DEVICE_PASSWORD_ID.DOT11_WPS_PASSWORD_ID_DEFAULT;
pub const DOT11_WPS_PASSWORD_ID_USER_SPECIFIED = DOT11_WPS_DEVICE_PASSWORD_ID.DOT11_WPS_PASSWORD_ID_USER_SPECIFIED;
pub const DOT11_WPS_PASSWORD_ID_MACHINE_SPECIFIED = DOT11_WPS_DEVICE_PASSWORD_ID.DOT11_WPS_PASSWORD_ID_MACHINE_SPECIFIED;
pub const DOT11_WPS_PASSWORD_ID_REKEY = DOT11_WPS_DEVICE_PASSWORD_ID.DOT11_WPS_PASSWORD_ID_REKEY;
pub const DOT11_WPS_PASSWORD_ID_PUSHBUTTON = DOT11_WPS_DEVICE_PASSWORD_ID.DOT11_WPS_PASSWORD_ID_PUSHBUTTON;
pub const DOT11_WPS_PASSWORD_ID_REGISTRAR_SPECIFIED = DOT11_WPS_DEVICE_PASSWORD_ID.DOT11_WPS_PASSWORD_ID_REGISTRAR_SPECIFIED;
pub const DOT11_WPS_PASSWORD_ID_NFC_CONNECTION_HANDOVER = DOT11_WPS_DEVICE_PASSWORD_ID.DOT11_WPS_PASSWORD_ID_NFC_CONNECTION_HANDOVER;
pub const DOT11_WPS_PASSWORD_ID_WFD_SERVICES = DOT11_WPS_DEVICE_PASSWORD_ID.DOT11_WPS_PASSWORD_ID_WFD_SERVICES;
pub const DOT11_WPS_PASSWORD_ID_OOB_RANGE_MIN = DOT11_WPS_DEVICE_PASSWORD_ID.DOT11_WPS_PASSWORD_ID_OOB_RANGE_MIN;
pub const DOT11_WPS_PASSWORD_ID_OOB_RANGE_MAX = DOT11_WPS_DEVICE_PASSWORD_ID.DOT11_WPS_PASSWORD_ID_OOB_RANGE_MAX;

pub const WFDSVC_CONNECTION_CAPABILITY = extern struct {
    bNew: u8,
    bClient: u8,
    bGO: u8,
};

pub const DOT11_WFD_SERVICE_HASH_LIST = extern struct {
    ServiceHashCount: u16,
    ServiceHash: [6]u8,
};

pub const DOT11_WFD_ADVERTISEMENT_ID = extern struct {
    AdvertisementID: u32,
    ServiceAddress: [6]u8,
};

pub const DOT11_WFD_SESSION_ID = extern struct {
    SessionID: u32,
    SessionAddress: [6]u8,
};

pub const DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR = extern struct {
    AdvertisementID: u32,
    ConfigMethods: u16,
    ServiceNameLength: u8,
    ServiceName: [255]u8,
};

pub const DOT11_WFD_ADVERTISED_SERVICE_LIST = extern struct {
    ServiceCount: u16,
    AdvertisedService: [1]DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR,
};

pub const DOT11_WFD_DISCOVER_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Status: i32,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    uListOffset: u32,
    uListLength: u32,
};

pub const DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    DialogToken: u8,
    RequestContext: *c_void,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    DialogToken: u8,
    ResponseContext: *c_void,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    DialogToken: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    ReceiverAddress: [6]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    TransmitterDeviceAddress: [6]u8,
    BSSID: [6]u8,
    DialogToken: u8,
    RequestContext: *c_void,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ReceiverDeviceAddress: [6]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    TransmitterDeviceAddress: [6]u8,
    BSSID: [6]u8,
    DialogToken: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    ReceiverAddress: [6]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    TransmitterDeviceAddress: [6]u8,
    BSSID: [6]u8,
    DialogToken: u8,
    RequestContext: *c_void,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ReceiverDeviceAddress: [6]u8,
    DialogToken: u8,
    Status: i32,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    TransmitterDeviceAddress: [6]u8,
    BSSID: [6]u8,
    DialogToken: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_ANQP_QUERY_RESULT = extern enum(i32) {
    dot11_ANQP_query_result_success = 0,
    dot11_ANQP_query_result_failure = 1,
    dot11_ANQP_query_result_timed_out = 2,
    dot11_ANQP_query_result_resources = 3,
    dot11_ANQP_query_result_advertisement_protocol_not_supported_on_remote = 4,
    dot11_ANQP_query_result_gas_protocol_failure = 5,
    dot11_ANQP_query_result_advertisement_server_not_responding = 6,
    dot11_ANQP_query_result_access_issues = 7,
};
pub const dot11_ANQP_query_result_success = DOT11_ANQP_QUERY_RESULT.dot11_ANQP_query_result_success;
pub const dot11_ANQP_query_result_failure = DOT11_ANQP_QUERY_RESULT.dot11_ANQP_query_result_failure;
pub const dot11_ANQP_query_result_timed_out = DOT11_ANQP_QUERY_RESULT.dot11_ANQP_query_result_timed_out;
pub const dot11_ANQP_query_result_resources = DOT11_ANQP_QUERY_RESULT.dot11_ANQP_query_result_resources;
pub const dot11_ANQP_query_result_advertisement_protocol_not_supported_on_remote = DOT11_ANQP_QUERY_RESULT.dot11_ANQP_query_result_advertisement_protocol_not_supported_on_remote;
pub const dot11_ANQP_query_result_gas_protocol_failure = DOT11_ANQP_QUERY_RESULT.dot11_ANQP_query_result_gas_protocol_failure;
pub const dot11_ANQP_query_result_advertisement_server_not_responding = DOT11_ANQP_QUERY_RESULT.dot11_ANQP_query_result_advertisement_server_not_responding;
pub const dot11_ANQP_query_result_access_issues = DOT11_ANQP_QUERY_RESULT.dot11_ANQP_query_result_access_issues;

pub const DOT11_ANQP_QUERY_COMPLETE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Status: DOT11_ANQP_QUERY_RESULT,
    hContext: HANDLE,
    uResponseLength: u32,
};

pub const DOT11_WFD_DEVICE_CAPABILITY_CONFIG = extern struct {
    Header: NDIS_OBJECT_HEADER,
    bServiceDiscoveryEnabled: u8,
    bClientDiscoverabilityEnabled: u8,
    bConcurrentOperationSupported: u8,
    bInfrastructureManagementEnabled: u8,
    bDeviceLimitReached: u8,
    bInvitationProcedureEnabled: u8,
    WPSVersionsEnabled: u32,
};

pub const DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG = extern struct {
    Header: NDIS_OBJECT_HEADER,
    bPersistentGroupEnabled: u8,
    bIntraBSSDistributionSupported: u8,
    bCrossConnectionSupported: u8,
    bPersistentReconnectSupported: u8,
    bGroupFormationEnabled: u8,
    uMaximumGroupLimit: u32,
};

pub const DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_V2 = extern struct {
    Header: NDIS_OBJECT_HEADER,
    bPersistentGroupEnabled: u8,
    bIntraBSSDistributionSupported: u8,
    bCrossConnectionSupported: u8,
    bPersistentReconnectSupported: u8,
    bGroupFormationEnabled: u8,
    uMaximumGroupLimit: u32,
    bEapolKeyIpAddressAllocationSupported: u8,
};

pub const DOT11_WFD_DEVICE_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    DeviceAddress: [6]u8,
    ConfigMethods: u16,
    PrimaryDeviceType: DOT11_WFD_DEVICE_TYPE,
    DeviceName: DOT11_WPS_DEVICE_NAME,
};

pub const DOT11_WFD_SECONDARY_DEVICE_TYPE_LIST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uNumOfEntries: u32,
    uTotalNumOfEntries: u32,
    SecondaryDeviceTypes: [1]DOT11_WFD_DEVICE_TYPE,
};

pub const DOT11_WFD_DISCOVER_TYPE = extern enum(i32) {
    dot11_wfd_discover_type_scan_only = 1,
    dot11_wfd_discover_type_find_only = 2,
    dot11_wfd_discover_type_auto = 3,
    dot11_wfd_discover_type_scan_social_channels = 4,
    dot11_wfd_discover_type_forced = -2147483648,
};
pub const dot11_wfd_discover_type_scan_only = DOT11_WFD_DISCOVER_TYPE.dot11_wfd_discover_type_scan_only;
pub const dot11_wfd_discover_type_find_only = DOT11_WFD_DISCOVER_TYPE.dot11_wfd_discover_type_find_only;
pub const dot11_wfd_discover_type_auto = DOT11_WFD_DISCOVER_TYPE.dot11_wfd_discover_type_auto;
pub const dot11_wfd_discover_type_scan_social_channels = DOT11_WFD_DISCOVER_TYPE.dot11_wfd_discover_type_scan_social_channels;
pub const dot11_wfd_discover_type_forced = DOT11_WFD_DISCOVER_TYPE.dot11_wfd_discover_type_forced;

pub const DOT11_WFD_SCAN_TYPE = extern enum(i32) {
    dot11_wfd_scan_type_active = 1,
    dot11_wfd_scan_type_passive = 2,
    dot11_wfd_scan_type_auto = 3,
};
pub const dot11_wfd_scan_type_active = DOT11_WFD_SCAN_TYPE.dot11_wfd_scan_type_active;
pub const dot11_wfd_scan_type_passive = DOT11_WFD_SCAN_TYPE.dot11_wfd_scan_type_passive;
pub const dot11_wfd_scan_type_auto = DOT11_WFD_SCAN_TYPE.dot11_wfd_scan_type_auto;

pub const DOT11_WFD_DISCOVER_DEVICE_FILTER = extern struct {
    DeviceID: [6]u8,
    ucBitmask: u8,
    GroupSSID: DOT11_SSID,
};

pub const DOT11_WFD_DISCOVER_REQUEST = extern struct {
    Header: NDIS_OBJECT_HEADER,
    DiscoverType: DOT11_WFD_DISCOVER_TYPE,
    ScanType: DOT11_WFD_SCAN_TYPE,
    uDiscoverTimeout: u32,
    uDeviceFilterListOffset: u32,
    uNumDeviceFilters: u32,
    uIEsOffset: u32,
    uIEsLength: u32,
    bForceScanLegacyNetworks: u8,
};

pub const DOT11_WFD_DEVICE_ENTRY = extern struct {
    uPhyId: u32,
    PhySpecificInfo: DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO,
    dot11BSSID: [6]u8,
    dot11BSSType: DOT11_BSS_TYPE,
    TransmitterAddress: [6]u8,
    lRSSI: i32,
    uLinkQuality: u32,
    usBeaconPeriod: u16,
    ullTimestamp: u64,
    ullBeaconHostTimestamp: u64,
    ullProbeResponseHostTimestamp: u64,
    usCapabilityInformation: u16,
    uBeaconIEsOffset: u32,
    uBeaconIEsLength: u32,
    uProbeResponseIEsOffset: u32,
    uProbeResponseIEsLength: u32,
};

pub const DOT11_WFD_ADDITIONAL_IE = extern struct {
    Header: NDIS_OBJECT_HEADER,
    uBeaconIEsOffset: u32,
    uBeaconIEsLength: u32,
    uProbeResponseIEsOffset: u32,
    uProbeResponseIEsLength: u32,
    uDefaultRequestIEsOffset: u32,
    uDefaultRequestIEsLength: u32,
};

pub const DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    DialogToken: u8,
    uSendTimeout: u32,
    GroupOwnerIntent: DOT11_WFD_GO_INTENT,
    MinimumConfigTimeout: DOT11_WFD_CONFIGURATION_TIMEOUT,
    IntendedInterfaceAddress: [6]u8,
    GroupCapability: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    DialogToken: u8,
    RequestContext: *c_void,
    uSendTimeout: u32,
    Status: u8,
    GroupOwnerIntent: DOT11_WFD_GO_INTENT,
    MinimumConfigTimeout: DOT11_WFD_CONFIGURATION_TIMEOUT,
    IntendedInterfaceAddress: [6]u8,
    GroupCapability: u8,
    GroupID: DOT11_WFD_GROUP_ID,
    bUseGroupID: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PeerDeviceAddress: [6]u8,
    DialogToken: u8,
    ResponseContext: *c_void,
    uSendTimeout: u32,
    Status: u8,
    GroupCapability: u8,
    GroupID: DOT11_WFD_GROUP_ID,
    bUseGroupID: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_WFD_INVITATION_FLAGS = extern struct {
    _bitfield: u8,
};

pub const DOT11_SEND_INVITATION_REQUEST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    DialogToken: u8,
    PeerDeviceAddress: [6]u8,
    uSendTimeout: u32,
    MinimumConfigTimeout: DOT11_WFD_CONFIGURATION_TIMEOUT,
    InvitationFlags: DOT11_WFD_INVITATION_FLAGS,
    GroupBSSID: [6]u8,
    bUseGroupBSSID: u8,
    OperatingChannel: DOT11_WFD_CHANNEL,
    bUseSpecifiedOperatingChannel: u8,
    GroupID: DOT11_WFD_GROUP_ID,
    bLocalGO: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_SEND_INVITATION_RESPONSE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ReceiverDeviceAddress: [6]u8,
    DialogToken: u8,
    RequestContext: *c_void,
    uSendTimeout: u32,
    Status: u8,
    MinimumConfigTimeout: DOT11_WFD_CONFIGURATION_TIMEOUT,
    GroupBSSID: [6]u8,
    bUseGroupBSSID: u8,
    OperatingChannel: DOT11_WFD_CHANNEL,
    bUseSpecifiedOperatingChannel: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    DialogToken: u8,
    PeerDeviceAddress: [6]u8,
    uSendTimeout: u32,
    GroupCapability: u8,
    GroupID: DOT11_WFD_GROUP_ID,
    bUseGroupID: u8,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ReceiverDeviceAddress: [6]u8,
    DialogToken: u8,
    RequestContext: *c_void,
    uSendTimeout: u32,
    uIEsOffset: u32,
    uIEsLength: u32,
};

pub const DOT11_WFD_DEVICE_LISTEN_CHANNEL = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ChannelNumber: u8,
};

pub const DOT11_WFD_GROUP_START_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    AdvertisedOperatingChannel: DOT11_WFD_CHANNEL,
};

pub const DOT11_WFD_GROUP_JOIN_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    GOOperatingChannel: DOT11_WFD_CHANNEL,
    GOConfigTime: u32,
    bInGroupFormation: u8,
    bWaitForWPSReady: u8,
};

pub const DOT11_POWER_MGMT_AUTO_MODE_ENABLED_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    bEnabled: u8,
};

pub const DOT11_POWER_MODE_REASON = extern enum(i32) {
    dot11_power_mode_reason_no_change = 0,
    dot11_power_mode_reason_noncompliant_AP = 1,
    dot11_power_mode_reason_legacy_WFD_device = 2,
    dot11_power_mode_reason_compliant_AP = 3,
    dot11_power_mode_reason_compliant_WFD_device = 4,
    dot11_power_mode_reason_others = 5,
};
pub const dot11_power_mode_reason_no_change = DOT11_POWER_MODE_REASON.dot11_power_mode_reason_no_change;
pub const dot11_power_mode_reason_noncompliant_AP = DOT11_POWER_MODE_REASON.dot11_power_mode_reason_noncompliant_AP;
pub const dot11_power_mode_reason_legacy_WFD_device = DOT11_POWER_MODE_REASON.dot11_power_mode_reason_legacy_WFD_device;
pub const dot11_power_mode_reason_compliant_AP = DOT11_POWER_MODE_REASON.dot11_power_mode_reason_compliant_AP;
pub const dot11_power_mode_reason_compliant_WFD_device = DOT11_POWER_MODE_REASON.dot11_power_mode_reason_compliant_WFD_device;
pub const dot11_power_mode_reason_others = DOT11_POWER_MODE_REASON.dot11_power_mode_reason_others;

pub const DOT11_POWER_MGMT_MODE_STATUS_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    PowerSaveMode: DOT11_POWER_MODE,
    uPowerSaveLevel: u32,
    Reason: DOT11_POWER_MODE_REASON,
};

pub const DOT11_CHANNEL_HINT = extern struct {
    Dot11PhyType: DOT11_PHY_TYPE,
    uChannelNumber: u32,
};

pub const DOT11_OFFLOAD_NETWORK = extern struct {
    Ssid: DOT11_SSID,
    UnicastCipher: DOT11_CIPHER_ALGORITHM,
    AuthAlgo: DOT11_AUTH_ALGORITHM,
    Dot11ChannelHints: [4]DOT11_CHANNEL_HINT,
};

pub const DOT11_OFFLOAD_NETWORK_LIST_INFO = extern struct {
    Header: NDIS_OBJECT_HEADER,
    ulFlags: u32,
    FastScanPeriod: u32,
    FastScanIterations: u32,
    SlowScanPeriod: u32,
    uNumOfEntries: u32,
    offloadNetworkList: [1]DOT11_OFFLOAD_NETWORK,
};

pub const DOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    Status: i32,
};

pub const DOT11_MANUFACTURING_TEST_TYPE = extern enum(i32) {
    dot11_manufacturing_test_unknown = 0,
    dot11_manufacturing_test_self_start = 1,
    dot11_manufacturing_test_self_query_result = 2,
    dot11_manufacturing_test_rx = 3,
    dot11_manufacturing_test_tx = 4,
    dot11_manufacturing_test_query_adc = 5,
    dot11_manufacturing_test_set_data = 6,
    dot11_manufacturing_test_query_data = 7,
    dot11_manufacturing_test_sleep = 8,
    dot11_manufacturing_test_awake = 9,
    dot11_manufacturing_test_IHV_start = -2147483648,
    dot11_manufacturing_test_IHV_end = -1,
};
pub const dot11_manufacturing_test_unknown = DOT11_MANUFACTURING_TEST_TYPE.dot11_manufacturing_test_unknown;
pub const dot11_manufacturing_test_self_start = DOT11_MANUFACTURING_TEST_TYPE.dot11_manufacturing_test_self_start;
pub const dot11_manufacturing_test_self_query_result = DOT11_MANUFACTURING_TEST_TYPE.dot11_manufacturing_test_self_query_result;
pub const dot11_manufacturing_test_rx = DOT11_MANUFACTURING_TEST_TYPE.dot11_manufacturing_test_rx;
pub const dot11_manufacturing_test_tx = DOT11_MANUFACTURING_TEST_TYPE.dot11_manufacturing_test_tx;
pub const dot11_manufacturing_test_query_adc = DOT11_MANUFACTURING_TEST_TYPE.dot11_manufacturing_test_query_adc;
pub const dot11_manufacturing_test_set_data = DOT11_MANUFACTURING_TEST_TYPE.dot11_manufacturing_test_set_data;
pub const dot11_manufacturing_test_query_data = DOT11_MANUFACTURING_TEST_TYPE.dot11_manufacturing_test_query_data;
pub const dot11_manufacturing_test_sleep = DOT11_MANUFACTURING_TEST_TYPE.dot11_manufacturing_test_sleep;
pub const dot11_manufacturing_test_awake = DOT11_MANUFACTURING_TEST_TYPE.dot11_manufacturing_test_awake;
pub const dot11_manufacturing_test_IHV_start = DOT11_MANUFACTURING_TEST_TYPE.dot11_manufacturing_test_IHV_start;
pub const dot11_manufacturing_test_IHV_end = DOT11_MANUFACTURING_TEST_TYPE.dot11_manufacturing_test_IHV_end;

pub const DOT11_MANUFACTURING_TEST = extern struct {
    dot11ManufacturingTestType: DOT11_MANUFACTURING_TEST_TYPE,
    uBufferLength: u32,
    ucBuffer: [1]u8,
};

pub const DOT11_MANUFACTURING_SELF_TEST_TYPE = extern enum(i32) {
    INTERFACE = 1,
    RF_INTERFACE = 2,
    BT_COEXISTENCE = 3,
};
pub const DOT11_MANUFACTURING_SELF_TEST_TYPE_INTERFACE = DOT11_MANUFACTURING_SELF_TEST_TYPE.INTERFACE;
pub const DOT11_MANUFACTURING_SELF_TEST_TYPE_RF_INTERFACE = DOT11_MANUFACTURING_SELF_TEST_TYPE.RF_INTERFACE;
pub const DOT11_MANUFACTURING_SELF_TEST_TYPE_BT_COEXISTENCE = DOT11_MANUFACTURING_SELF_TEST_TYPE.BT_COEXISTENCE;

pub const DOT11_MANUFACTURING_SELF_TEST_SET_PARAMS = extern struct {
    SelfTestType: DOT11_MANUFACTURING_SELF_TEST_TYPE,
    uTestID: u32,
    uPinBitMask: u32,
    pvContext: *c_void,
    uBufferLength: u32,
    ucBufferIn: [1]u8,
};

pub const DOT11_MANUFACTURING_SELF_TEST_QUERY_RESULTS = extern struct {
    SelfTestType: DOT11_MANUFACTURING_SELF_TEST_TYPE,
    uTestID: u32,
    bResult: u8,
    uPinFailedBitMask: u32,
    pvContext: *c_void,
    uBytesWrittenOut: u32,
    ucBufferOut: [1]u8,
};

pub const DOT11_BAND = extern enum(i32) {
    dot11_band_2p4g = 1,
    dot11_band_4p9g = 2,
    dot11_band_5g = 3,
};
pub const dot11_band_2p4g = DOT11_BAND.dot11_band_2p4g;
pub const dot11_band_4p9g = DOT11_BAND.dot11_band_4p9g;
pub const dot11_band_5g = DOT11_BAND.dot11_band_5g;

pub const DOT11_MANUFACTURING_FUNCTIONAL_TEST_RX = extern struct {
    bEnabled: u8,
    Dot11Band: DOT11_BAND,
    uChannel: u32,
    PowerLevel: i32,
};

pub const DOT11_MANUFACTURING_FUNCTIONAL_TEST_TX = extern struct {
    bEnable: u8,
    bOpenLoop: u8,
    Dot11Band: DOT11_BAND,
    uChannel: u32,
    uSetPowerLevel: u32,
    ADCPowerLevel: i32,
};

pub const DOT11_MANUFACTURING_FUNCTIONAL_TEST_QUERY_ADC = extern struct {
    Dot11Band: DOT11_BAND,
    uChannel: u32,
    ADCPowerLevel: i32,
};

pub const DOT11_MANUFACTURING_TEST_SET_DATA = extern struct {
    uKey: u32,
    uOffset: u32,
    uBufferLength: u32,
    ucBufferIn: [1]u8,
};

pub const DOT11_MANUFACTURING_TEST_QUERY_DATA = extern struct {
    uKey: u32,
    uOffset: u32,
    uBufferLength: u32,
    uBytesRead: u32,
    ucBufferOut: [1]u8,
};

pub const DOT11_MANUFACTURING_TEST_SLEEP = extern struct {
    uSleepTime: u32,
    pvContext: *c_void,
};

pub const DOT11_MANUFACTURING_CALLBACK_TYPE = extern enum(i32) {
    dot11_manufacturing_callback_unknown = 0,
    dot11_manufacturing_callback_self_test_complete = 1,
    dot11_manufacturing_callback_sleep_complete = 2,
    dot11_manufacturing_callback_IHV_start = -2147483648,
    dot11_manufacturing_callback_IHV_end = -1,
};
pub const dot11_manufacturing_callback_unknown = DOT11_MANUFACTURING_CALLBACK_TYPE.dot11_manufacturing_callback_unknown;
pub const dot11_manufacturing_callback_self_test_complete = DOT11_MANUFACTURING_CALLBACK_TYPE.dot11_manufacturing_callback_self_test_complete;
pub const dot11_manufacturing_callback_sleep_complete = DOT11_MANUFACTURING_CALLBACK_TYPE.dot11_manufacturing_callback_sleep_complete;
pub const dot11_manufacturing_callback_IHV_start = DOT11_MANUFACTURING_CALLBACK_TYPE.dot11_manufacturing_callback_IHV_start;
pub const dot11_manufacturing_callback_IHV_end = DOT11_MANUFACTURING_CALLBACK_TYPE.dot11_manufacturing_callback_IHV_end;

pub const DOT11_MANUFACTURING_CALLBACK_PARAMETERS = extern struct {
    Header: NDIS_OBJECT_HEADER,
    dot11ManufacturingCallbackType: DOT11_MANUFACTURING_CALLBACK_TYPE,
    uStatus: u32,
    pvContext: *c_void,
};

pub const WLAN_PROFILE_INFO = extern struct {
    strProfileName: [256]u16,
    dwFlags: u32,
};

pub const DOT11_NETWORK = extern struct {
    dot11Ssid: DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
};

pub const WLAN_RAW_DATA = extern struct {
    dwDataSize: u32,
    DataBlob: [1]u8,
};

pub const WLAN_RAW_DATA_LIST = extern struct {
    dwTotalSize: u32,
    dwNumberOfItems: u32,
    DataList: [1]WLAN_RAW_DATA_LIST._Anonymous_e__Struct,
    const _Anonymous_e__Struct = u32; // TODO: generate this nested type!
};

pub const WLAN_CONNECTION_MODE = extern enum(i32) {
    wlan_connection_mode_profile = 0,
    wlan_connection_mode_temporary_profile = 1,
    wlan_connection_mode_discovery_secure = 2,
    wlan_connection_mode_discovery_unsecure = 3,
    wlan_connection_mode_auto = 4,
    wlan_connection_mode_invalid = 5,
};
pub const wlan_connection_mode_profile = WLAN_CONNECTION_MODE.wlan_connection_mode_profile;
pub const wlan_connection_mode_temporary_profile = WLAN_CONNECTION_MODE.wlan_connection_mode_temporary_profile;
pub const wlan_connection_mode_discovery_secure = WLAN_CONNECTION_MODE.wlan_connection_mode_discovery_secure;
pub const wlan_connection_mode_discovery_unsecure = WLAN_CONNECTION_MODE.wlan_connection_mode_discovery_unsecure;
pub const wlan_connection_mode_auto = WLAN_CONNECTION_MODE.wlan_connection_mode_auto;
pub const wlan_connection_mode_invalid = WLAN_CONNECTION_MODE.wlan_connection_mode_invalid;

pub const WLAN_RATE_SET = extern struct {
    uRateSetLength: u32,
    usRateSet: [126]u16,
};

pub const WLAN_AVAILABLE_NETWORK = extern struct {
    strProfileName: [256]u16,
    dot11Ssid: DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
    uNumberOfBssids: u32,
    bNetworkConnectable: BOOL,
    wlanNotConnectableReason: u32,
    uNumberOfPhyTypes: u32,
    dot11PhyTypes: [8]DOT11_PHY_TYPE,
    bMorePhyTypes: BOOL,
    wlanSignalQuality: u32,
    bSecurityEnabled: BOOL,
    dot11DefaultAuthAlgorithm: DOT11_AUTH_ALGORITHM,
    dot11DefaultCipherAlgorithm: DOT11_CIPHER_ALGORITHM,
    dwFlags: u32,
    dwReserved: u32,
};

pub const WLAN_AVAILABLE_NETWORK_V2 = extern struct {
    strProfileName: [256]u16,
    dot11Ssid: DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
    uNumberOfBssids: u32,
    bNetworkConnectable: BOOL,
    wlanNotConnectableReason: u32,
    uNumberOfPhyTypes: u32,
    dot11PhyTypes: [8]DOT11_PHY_TYPE,
    bMorePhyTypes: BOOL,
    wlanSignalQuality: u32,
    bSecurityEnabled: BOOL,
    dot11DefaultAuthAlgorithm: DOT11_AUTH_ALGORITHM,
    dot11DefaultCipherAlgorithm: DOT11_CIPHER_ALGORITHM,
    dwFlags: u32,
    AccessNetworkOptions: DOT11_ACCESSNETWORKOPTIONS,
    dot11HESSID: [6]u8,
    VenueInfo: DOT11_VENUEINFO,
    dwReserved: u32,
};

pub const WLAN_BSS_ENTRY = extern struct {
    dot11Ssid: DOT11_SSID,
    uPhyId: u32,
    dot11Bssid: [6]u8,
    dot11BssType: DOT11_BSS_TYPE,
    dot11BssPhyType: DOT11_PHY_TYPE,
    lRssi: i32,
    uLinkQuality: u32,
    bInRegDomain: u8,
    usBeaconPeriod: u16,
    ullTimestamp: u64,
    ullHostTimestamp: u64,
    usCapabilityInformation: u16,
    ulChCenterFrequency: u32,
    wlanRateSet: WLAN_RATE_SET,
    ulIeOffset: u32,
    ulIeSize: u32,
};

pub const WLAN_BSS_LIST = extern struct {
    dwTotalSize: u32,
    dwNumberOfItems: u32,
    wlanBssEntries: [1]WLAN_BSS_ENTRY,
};

pub const WLAN_INTERFACE_STATE = extern enum(i32) {
    wlan_interface_state_not_ready = 0,
    wlan_interface_state_connected = 1,
    wlan_interface_state_ad_hoc_network_formed = 2,
    wlan_interface_state_disconnecting = 3,
    wlan_interface_state_disconnected = 4,
    wlan_interface_state_associating = 5,
    wlan_interface_state_discovering = 6,
    wlan_interface_state_authenticating = 7,
};
pub const wlan_interface_state_not_ready = WLAN_INTERFACE_STATE.wlan_interface_state_not_ready;
pub const wlan_interface_state_connected = WLAN_INTERFACE_STATE.wlan_interface_state_connected;
pub const wlan_interface_state_ad_hoc_network_formed = WLAN_INTERFACE_STATE.wlan_interface_state_ad_hoc_network_formed;
pub const wlan_interface_state_disconnecting = WLAN_INTERFACE_STATE.wlan_interface_state_disconnecting;
pub const wlan_interface_state_disconnected = WLAN_INTERFACE_STATE.wlan_interface_state_disconnected;
pub const wlan_interface_state_associating = WLAN_INTERFACE_STATE.wlan_interface_state_associating;
pub const wlan_interface_state_discovering = WLAN_INTERFACE_STATE.wlan_interface_state_discovering;
pub const wlan_interface_state_authenticating = WLAN_INTERFACE_STATE.wlan_interface_state_authenticating;

pub const WLAN_ADHOC_NETWORK_STATE = extern enum(i32) {
    wlan_adhoc_network_state_formed = 0,
    wlan_adhoc_network_state_connected = 1,
};
pub const wlan_adhoc_network_state_formed = WLAN_ADHOC_NETWORK_STATE.wlan_adhoc_network_state_formed;
pub const wlan_adhoc_network_state_connected = WLAN_ADHOC_NETWORK_STATE.wlan_adhoc_network_state_connected;

pub const WLAN_INTERFACE_INFO = extern struct {
    InterfaceGuid: Guid,
    strInterfaceDescription: [256]u16,
    isState: WLAN_INTERFACE_STATE,
};

pub const WLAN_ASSOCIATION_ATTRIBUTES = extern struct {
    dot11Ssid: DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
    dot11Bssid: [6]u8,
    dot11PhyType: DOT11_PHY_TYPE,
    uDot11PhyIndex: u32,
    wlanSignalQuality: u32,
    ulRxRate: u32,
    ulTxRate: u32,
};

pub const WLAN_SECURITY_ATTRIBUTES = extern struct {
    bSecurityEnabled: BOOL,
    bOneXEnabled: BOOL,
    dot11AuthAlgorithm: DOT11_AUTH_ALGORITHM,
    dot11CipherAlgorithm: DOT11_CIPHER_ALGORITHM,
};

pub const WLAN_CONNECTION_ATTRIBUTES = extern struct {
    isState: WLAN_INTERFACE_STATE,
    wlanConnectionMode: WLAN_CONNECTION_MODE,
    strProfileName: [256]u16,
    wlanAssociationAttributes: WLAN_ASSOCIATION_ATTRIBUTES,
    wlanSecurityAttributes: WLAN_SECURITY_ATTRIBUTES,
};

pub const DOT11_RADIO_STATE = extern enum(i32) {
    dot11_radio_state_unknown = 0,
    dot11_radio_state_on = 1,
    dot11_radio_state_off = 2,
};
pub const dot11_radio_state_unknown = DOT11_RADIO_STATE.dot11_radio_state_unknown;
pub const dot11_radio_state_on = DOT11_RADIO_STATE.dot11_radio_state_on;
pub const dot11_radio_state_off = DOT11_RADIO_STATE.dot11_radio_state_off;

pub const WLAN_PHY_RADIO_STATE = extern struct {
    dwPhyIndex: u32,
    dot11SoftwareRadioState: DOT11_RADIO_STATE,
    dot11HardwareRadioState: DOT11_RADIO_STATE,
};

pub const WLAN_RADIO_STATE = extern struct {
    dwNumberOfPhys: u32,
    PhyRadioState: [64]WLAN_PHY_RADIO_STATE,
};

pub const WLAN_OPERATIONAL_STATE = extern enum(i32) {
    wlan_operational_state_unknown = 0,
    wlan_operational_state_off = 1,
    wlan_operational_state_on = 2,
    wlan_operational_state_going_off = 3,
    wlan_operational_state_going_on = 4,
};
pub const wlan_operational_state_unknown = WLAN_OPERATIONAL_STATE.wlan_operational_state_unknown;
pub const wlan_operational_state_off = WLAN_OPERATIONAL_STATE.wlan_operational_state_off;
pub const wlan_operational_state_on = WLAN_OPERATIONAL_STATE.wlan_operational_state_on;
pub const wlan_operational_state_going_off = WLAN_OPERATIONAL_STATE.wlan_operational_state_going_off;
pub const wlan_operational_state_going_on = WLAN_OPERATIONAL_STATE.wlan_operational_state_going_on;

pub const WLAN_INTERFACE_TYPE = extern enum(i32) {
    wlan_interface_type_emulated_802_11 = 0,
    wlan_interface_type_native_802_11 = 1,
    wlan_interface_type_invalid = 2,
};
pub const wlan_interface_type_emulated_802_11 = WLAN_INTERFACE_TYPE.wlan_interface_type_emulated_802_11;
pub const wlan_interface_type_native_802_11 = WLAN_INTERFACE_TYPE.wlan_interface_type_native_802_11;
pub const wlan_interface_type_invalid = WLAN_INTERFACE_TYPE.wlan_interface_type_invalid;

pub const WLAN_INTERFACE_CAPABILITY = extern struct {
    interfaceType: WLAN_INTERFACE_TYPE,
    bDot11DSupported: BOOL,
    dwMaxDesiredSsidListSize: u32,
    dwMaxDesiredBssidListSize: u32,
    dwNumberOfSupportedPhys: u32,
    dot11PhyTypes: [64]DOT11_PHY_TYPE,
};

pub const WLAN_AUTH_CIPHER_PAIR_LIST = extern struct {
    dwNumberOfItems: u32,
    pAuthCipherPairList: [1]DOT11_AUTH_CIPHER_PAIR,
};

pub const WLAN_COUNTRY_OR_REGION_STRING_LIST = extern struct {
    dwNumberOfItems: u32,
    pCountryOrRegionStringList: [3]u8,
};

pub const WLAN_PROFILE_INFO_LIST = extern struct {
    dwNumberOfItems: u32,
    dwIndex: u32,
    ProfileInfo: [1]WLAN_PROFILE_INFO,
};

pub const WLAN_AVAILABLE_NETWORK_LIST = extern struct {
    dwNumberOfItems: u32,
    dwIndex: u32,
    Network: [1]WLAN_AVAILABLE_NETWORK,
};

pub const WLAN_AVAILABLE_NETWORK_LIST_V2 = extern struct {
    dwNumberOfItems: u32,
    dwIndex: u32,
    Network: [1]WLAN_AVAILABLE_NETWORK_V2,
};

pub const WLAN_INTERFACE_INFO_LIST = extern struct {
    dwNumberOfItems: u32,
    dwIndex: u32,
    InterfaceInfo: [1]WLAN_INTERFACE_INFO,
};

pub const DOT11_NETWORK_LIST = extern struct {
    dwNumberOfItems: u32,
    dwIndex: u32,
    Network: [1]DOT11_NETWORK,
};

pub const WLAN_POWER_SETTING = extern enum(i32) {
    wlan_power_setting_no_saving = 0,
    wlan_power_setting_low_saving = 1,
    wlan_power_setting_medium_saving = 2,
    wlan_power_setting_maximum_saving = 3,
    wlan_power_setting_invalid = 4,
};
pub const wlan_power_setting_no_saving = WLAN_POWER_SETTING.wlan_power_setting_no_saving;
pub const wlan_power_setting_low_saving = WLAN_POWER_SETTING.wlan_power_setting_low_saving;
pub const wlan_power_setting_medium_saving = WLAN_POWER_SETTING.wlan_power_setting_medium_saving;
pub const wlan_power_setting_maximum_saving = WLAN_POWER_SETTING.wlan_power_setting_maximum_saving;
pub const wlan_power_setting_invalid = WLAN_POWER_SETTING.wlan_power_setting_invalid;

pub const WLAN_CONNECTION_PARAMETERS = extern struct {
    wlanConnectionMode: WLAN_CONNECTION_MODE,
    strProfile: [*:0]const u16,
    pDot11Ssid: *DOT11_SSID,
    pDesiredBssidList: *DOT11_BSSID_LIST,
    dot11BssType: DOT11_BSS_TYPE,
    dwFlags: u32,
};

pub const WLAN_CONNECTION_PARAMETERS_V2 = extern struct {
    wlanConnectionMode: WLAN_CONNECTION_MODE,
    strProfile: [*:0]const u16,
    pDot11Ssid: *DOT11_SSID,
    pDot11Hessid: *u8,
    pDesiredBssidList: *DOT11_BSSID_LIST,
    dot11BssType: DOT11_BSS_TYPE,
    dwFlags: u32,
    pDot11AccessNetworkOptions: *DOT11_ACCESSNETWORKOPTIONS,
};

pub const WLAN_MSM_NOTIFICATION_DATA = extern struct {
    wlanConnectionMode: WLAN_CONNECTION_MODE,
    strProfileName: [256]u16,
    dot11Ssid: DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
    dot11MacAddr: [6]u8,
    bSecurityEnabled: BOOL,
    bFirstPeer: BOOL,
    bLastPeer: BOOL,
    wlanReasonCode: u32,
};

pub const WLAN_CONNECTION_NOTIFICATION_DATA = extern struct {
    wlanConnectionMode: WLAN_CONNECTION_MODE,
    strProfileName: [256]u16,
    dot11Ssid: DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
    bSecurityEnabled: BOOL,
    wlanReasonCode: u32,
    dwFlags: u32,
    strProfileXml: [1]u16,
};

pub const WLAN_DEVICE_SERVICE_NOTIFICATION_DATA = extern struct {
    DeviceService: Guid,
    dwOpCode: u32,
    dwDataSize: u32,
    DataBlob: [1]u8,
};

pub const WLAN_NOTIFICATION_ACM = extern enum(i32) {
    wlan_notification_acm_start = 0,
    wlan_notification_acm_autoconf_enabled = 1,
    wlan_notification_acm_autoconf_disabled = 2,
    wlan_notification_acm_background_scan_enabled = 3,
    wlan_notification_acm_background_scan_disabled = 4,
    wlan_notification_acm_bss_type_change = 5,
    wlan_notification_acm_power_setting_change = 6,
    wlan_notification_acm_scan_complete = 7,
    wlan_notification_acm_scan_fail = 8,
    wlan_notification_acm_connection_start = 9,
    wlan_notification_acm_connection_complete = 10,
    wlan_notification_acm_connection_attempt_fail = 11,
    wlan_notification_acm_filter_list_change = 12,
    wlan_notification_acm_interface_arrival = 13,
    wlan_notification_acm_interface_removal = 14,
    wlan_notification_acm_profile_change = 15,
    wlan_notification_acm_profile_name_change = 16,
    wlan_notification_acm_profiles_exhausted = 17,
    wlan_notification_acm_network_not_available = 18,
    wlan_notification_acm_network_available = 19,
    wlan_notification_acm_disconnecting = 20,
    wlan_notification_acm_disconnected = 21,
    wlan_notification_acm_adhoc_network_state_change = 22,
    wlan_notification_acm_profile_unblocked = 23,
    wlan_notification_acm_screen_power_change = 24,
    wlan_notification_acm_profile_blocked = 25,
    wlan_notification_acm_scan_list_refresh = 26,
    wlan_notification_acm_operational_state_change = 27,
    wlan_notification_acm_end = 28,
};
pub const wlan_notification_acm_start = WLAN_NOTIFICATION_ACM.wlan_notification_acm_start;
pub const wlan_notification_acm_autoconf_enabled = WLAN_NOTIFICATION_ACM.wlan_notification_acm_autoconf_enabled;
pub const wlan_notification_acm_autoconf_disabled = WLAN_NOTIFICATION_ACM.wlan_notification_acm_autoconf_disabled;
pub const wlan_notification_acm_background_scan_enabled = WLAN_NOTIFICATION_ACM.wlan_notification_acm_background_scan_enabled;
pub const wlan_notification_acm_background_scan_disabled = WLAN_NOTIFICATION_ACM.wlan_notification_acm_background_scan_disabled;
pub const wlan_notification_acm_bss_type_change = WLAN_NOTIFICATION_ACM.wlan_notification_acm_bss_type_change;
pub const wlan_notification_acm_power_setting_change = WLAN_NOTIFICATION_ACM.wlan_notification_acm_power_setting_change;
pub const wlan_notification_acm_scan_complete = WLAN_NOTIFICATION_ACM.wlan_notification_acm_scan_complete;
pub const wlan_notification_acm_scan_fail = WLAN_NOTIFICATION_ACM.wlan_notification_acm_scan_fail;
pub const wlan_notification_acm_connection_start = WLAN_NOTIFICATION_ACM.wlan_notification_acm_connection_start;
pub const wlan_notification_acm_connection_complete = WLAN_NOTIFICATION_ACM.wlan_notification_acm_connection_complete;
pub const wlan_notification_acm_connection_attempt_fail = WLAN_NOTIFICATION_ACM.wlan_notification_acm_connection_attempt_fail;
pub const wlan_notification_acm_filter_list_change = WLAN_NOTIFICATION_ACM.wlan_notification_acm_filter_list_change;
pub const wlan_notification_acm_interface_arrival = WLAN_NOTIFICATION_ACM.wlan_notification_acm_interface_arrival;
pub const wlan_notification_acm_interface_removal = WLAN_NOTIFICATION_ACM.wlan_notification_acm_interface_removal;
pub const wlan_notification_acm_profile_change = WLAN_NOTIFICATION_ACM.wlan_notification_acm_profile_change;
pub const wlan_notification_acm_profile_name_change = WLAN_NOTIFICATION_ACM.wlan_notification_acm_profile_name_change;
pub const wlan_notification_acm_profiles_exhausted = WLAN_NOTIFICATION_ACM.wlan_notification_acm_profiles_exhausted;
pub const wlan_notification_acm_network_not_available = WLAN_NOTIFICATION_ACM.wlan_notification_acm_network_not_available;
pub const wlan_notification_acm_network_available = WLAN_NOTIFICATION_ACM.wlan_notification_acm_network_available;
pub const wlan_notification_acm_disconnecting = WLAN_NOTIFICATION_ACM.wlan_notification_acm_disconnecting;
pub const wlan_notification_acm_disconnected = WLAN_NOTIFICATION_ACM.wlan_notification_acm_disconnected;
pub const wlan_notification_acm_adhoc_network_state_change = WLAN_NOTIFICATION_ACM.wlan_notification_acm_adhoc_network_state_change;
pub const wlan_notification_acm_profile_unblocked = WLAN_NOTIFICATION_ACM.wlan_notification_acm_profile_unblocked;
pub const wlan_notification_acm_screen_power_change = WLAN_NOTIFICATION_ACM.wlan_notification_acm_screen_power_change;
pub const wlan_notification_acm_profile_blocked = WLAN_NOTIFICATION_ACM.wlan_notification_acm_profile_blocked;
pub const wlan_notification_acm_scan_list_refresh = WLAN_NOTIFICATION_ACM.wlan_notification_acm_scan_list_refresh;
pub const wlan_notification_acm_operational_state_change = WLAN_NOTIFICATION_ACM.wlan_notification_acm_operational_state_change;
pub const wlan_notification_acm_end = WLAN_NOTIFICATION_ACM.wlan_notification_acm_end;

pub const WLAN_NOTIFICATION_MSM = extern enum(i32) {
    wlan_notification_msm_start = 0,
    wlan_notification_msm_associating = 1,
    wlan_notification_msm_associated = 2,
    wlan_notification_msm_authenticating = 3,
    wlan_notification_msm_connected = 4,
    wlan_notification_msm_roaming_start = 5,
    wlan_notification_msm_roaming_end = 6,
    wlan_notification_msm_radio_state_change = 7,
    wlan_notification_msm_signal_quality_change = 8,
    wlan_notification_msm_disassociating = 9,
    wlan_notification_msm_disconnected = 10,
    wlan_notification_msm_peer_join = 11,
    wlan_notification_msm_peer_leave = 12,
    wlan_notification_msm_adapter_removal = 13,
    wlan_notification_msm_adapter_operation_mode_change = 14,
    wlan_notification_msm_link_degraded = 15,
    wlan_notification_msm_link_improved = 16,
    wlan_notification_msm_end = 17,
};
pub const wlan_notification_msm_start = WLAN_NOTIFICATION_MSM.wlan_notification_msm_start;
pub const wlan_notification_msm_associating = WLAN_NOTIFICATION_MSM.wlan_notification_msm_associating;
pub const wlan_notification_msm_associated = WLAN_NOTIFICATION_MSM.wlan_notification_msm_associated;
pub const wlan_notification_msm_authenticating = WLAN_NOTIFICATION_MSM.wlan_notification_msm_authenticating;
pub const wlan_notification_msm_connected = WLAN_NOTIFICATION_MSM.wlan_notification_msm_connected;
pub const wlan_notification_msm_roaming_start = WLAN_NOTIFICATION_MSM.wlan_notification_msm_roaming_start;
pub const wlan_notification_msm_roaming_end = WLAN_NOTIFICATION_MSM.wlan_notification_msm_roaming_end;
pub const wlan_notification_msm_radio_state_change = WLAN_NOTIFICATION_MSM.wlan_notification_msm_radio_state_change;
pub const wlan_notification_msm_signal_quality_change = WLAN_NOTIFICATION_MSM.wlan_notification_msm_signal_quality_change;
pub const wlan_notification_msm_disassociating = WLAN_NOTIFICATION_MSM.wlan_notification_msm_disassociating;
pub const wlan_notification_msm_disconnected = WLAN_NOTIFICATION_MSM.wlan_notification_msm_disconnected;
pub const wlan_notification_msm_peer_join = WLAN_NOTIFICATION_MSM.wlan_notification_msm_peer_join;
pub const wlan_notification_msm_peer_leave = WLAN_NOTIFICATION_MSM.wlan_notification_msm_peer_leave;
pub const wlan_notification_msm_adapter_removal = WLAN_NOTIFICATION_MSM.wlan_notification_msm_adapter_removal;
pub const wlan_notification_msm_adapter_operation_mode_change = WLAN_NOTIFICATION_MSM.wlan_notification_msm_adapter_operation_mode_change;
pub const wlan_notification_msm_link_degraded = WLAN_NOTIFICATION_MSM.wlan_notification_msm_link_degraded;
pub const wlan_notification_msm_link_improved = WLAN_NOTIFICATION_MSM.wlan_notification_msm_link_improved;
pub const wlan_notification_msm_end = WLAN_NOTIFICATION_MSM.wlan_notification_msm_end;

pub const WLAN_NOTIFICATION_SECURITY = extern enum(i32) {
    wlan_notification_security_start = 0,
    wlan_notification_security_end = 1,
};
pub const wlan_notification_security_start = WLAN_NOTIFICATION_SECURITY.wlan_notification_security_start;
pub const wlan_notification_security_end = WLAN_NOTIFICATION_SECURITY.wlan_notification_security_end;

pub const WLAN_NOTIFICATION_CALLBACK = fn(
    param0: *L2_NOTIFICATION_DATA,
    param1: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const WLAN_OPCODE_VALUE_TYPE = extern enum(i32) {
    wlan_opcode_value_type_query_only = 0,
    wlan_opcode_value_type_set_by_group_policy = 1,
    wlan_opcode_value_type_set_by_user = 2,
    wlan_opcode_value_type_invalid = 3,
};
pub const wlan_opcode_value_type_query_only = WLAN_OPCODE_VALUE_TYPE.wlan_opcode_value_type_query_only;
pub const wlan_opcode_value_type_set_by_group_policy = WLAN_OPCODE_VALUE_TYPE.wlan_opcode_value_type_set_by_group_policy;
pub const wlan_opcode_value_type_set_by_user = WLAN_OPCODE_VALUE_TYPE.wlan_opcode_value_type_set_by_user;
pub const wlan_opcode_value_type_invalid = WLAN_OPCODE_VALUE_TYPE.wlan_opcode_value_type_invalid;

pub const WLAN_INTF_OPCODE = extern enum(i32) {
    wlan_intf_opcode_autoconf_start = 0,
    wlan_intf_opcode_autoconf_enabled = 1,
    wlan_intf_opcode_background_scan_enabled = 2,
    wlan_intf_opcode_media_streaming_mode = 3,
    wlan_intf_opcode_radio_state = 4,
    wlan_intf_opcode_bss_type = 5,
    wlan_intf_opcode_interface_state = 6,
    wlan_intf_opcode_current_connection = 7,
    wlan_intf_opcode_channel_number = 8,
    wlan_intf_opcode_supported_infrastructure_auth_cipher_pairs = 9,
    wlan_intf_opcode_supported_adhoc_auth_cipher_pairs = 10,
    wlan_intf_opcode_supported_country_or_region_string_list = 11,
    wlan_intf_opcode_current_operation_mode = 12,
    wlan_intf_opcode_supported_safe_mode = 13,
    wlan_intf_opcode_certified_safe_mode = 14,
    wlan_intf_opcode_hosted_network_capable = 15,
    wlan_intf_opcode_management_frame_protection_capable = 16,
    wlan_intf_opcode_autoconf_end = 268435455,
    wlan_intf_opcode_msm_start = 268435712,
    wlan_intf_opcode_statistics = 268435713,
    wlan_intf_opcode_rssi = 268435714,
    wlan_intf_opcode_msm_end = 536870911,
    wlan_intf_opcode_security_start = 536936448,
    wlan_intf_opcode_security_end = 805306367,
    wlan_intf_opcode_ihv_start = 805306368,
    wlan_intf_opcode_ihv_end = 1073741823,
};
pub const wlan_intf_opcode_autoconf_start = WLAN_INTF_OPCODE.wlan_intf_opcode_autoconf_start;
pub const wlan_intf_opcode_autoconf_enabled = WLAN_INTF_OPCODE.wlan_intf_opcode_autoconf_enabled;
pub const wlan_intf_opcode_background_scan_enabled = WLAN_INTF_OPCODE.wlan_intf_opcode_background_scan_enabled;
pub const wlan_intf_opcode_media_streaming_mode = WLAN_INTF_OPCODE.wlan_intf_opcode_media_streaming_mode;
pub const wlan_intf_opcode_radio_state = WLAN_INTF_OPCODE.wlan_intf_opcode_radio_state;
pub const wlan_intf_opcode_bss_type = WLAN_INTF_OPCODE.wlan_intf_opcode_bss_type;
pub const wlan_intf_opcode_interface_state = WLAN_INTF_OPCODE.wlan_intf_opcode_interface_state;
pub const wlan_intf_opcode_current_connection = WLAN_INTF_OPCODE.wlan_intf_opcode_current_connection;
pub const wlan_intf_opcode_channel_number = WLAN_INTF_OPCODE.wlan_intf_opcode_channel_number;
pub const wlan_intf_opcode_supported_infrastructure_auth_cipher_pairs = WLAN_INTF_OPCODE.wlan_intf_opcode_supported_infrastructure_auth_cipher_pairs;
pub const wlan_intf_opcode_supported_adhoc_auth_cipher_pairs = WLAN_INTF_OPCODE.wlan_intf_opcode_supported_adhoc_auth_cipher_pairs;
pub const wlan_intf_opcode_supported_country_or_region_string_list = WLAN_INTF_OPCODE.wlan_intf_opcode_supported_country_or_region_string_list;
pub const wlan_intf_opcode_current_operation_mode = WLAN_INTF_OPCODE.wlan_intf_opcode_current_operation_mode;
pub const wlan_intf_opcode_supported_safe_mode = WLAN_INTF_OPCODE.wlan_intf_opcode_supported_safe_mode;
pub const wlan_intf_opcode_certified_safe_mode = WLAN_INTF_OPCODE.wlan_intf_opcode_certified_safe_mode;
pub const wlan_intf_opcode_hosted_network_capable = WLAN_INTF_OPCODE.wlan_intf_opcode_hosted_network_capable;
pub const wlan_intf_opcode_management_frame_protection_capable = WLAN_INTF_OPCODE.wlan_intf_opcode_management_frame_protection_capable;
pub const wlan_intf_opcode_autoconf_end = WLAN_INTF_OPCODE.wlan_intf_opcode_autoconf_end;
pub const wlan_intf_opcode_msm_start = WLAN_INTF_OPCODE.wlan_intf_opcode_msm_start;
pub const wlan_intf_opcode_statistics = WLAN_INTF_OPCODE.wlan_intf_opcode_statistics;
pub const wlan_intf_opcode_rssi = WLAN_INTF_OPCODE.wlan_intf_opcode_rssi;
pub const wlan_intf_opcode_msm_end = WLAN_INTF_OPCODE.wlan_intf_opcode_msm_end;
pub const wlan_intf_opcode_security_start = WLAN_INTF_OPCODE.wlan_intf_opcode_security_start;
pub const wlan_intf_opcode_security_end = WLAN_INTF_OPCODE.wlan_intf_opcode_security_end;
pub const wlan_intf_opcode_ihv_start = WLAN_INTF_OPCODE.wlan_intf_opcode_ihv_start;
pub const wlan_intf_opcode_ihv_end = WLAN_INTF_OPCODE.wlan_intf_opcode_ihv_end;

pub const WLAN_AUTOCONF_OPCODE = extern enum(i32) {
    wlan_autoconf_opcode_start = 0,
    wlan_autoconf_opcode_show_denied_networks = 1,
    wlan_autoconf_opcode_power_setting = 2,
    wlan_autoconf_opcode_only_use_gp_profiles_for_allowed_networks = 3,
    wlan_autoconf_opcode_allow_explicit_creds = 4,
    wlan_autoconf_opcode_block_period = 5,
    wlan_autoconf_opcode_allow_virtual_station_extensibility = 6,
    wlan_autoconf_opcode_end = 7,
};
pub const wlan_autoconf_opcode_start = WLAN_AUTOCONF_OPCODE.wlan_autoconf_opcode_start;
pub const wlan_autoconf_opcode_show_denied_networks = WLAN_AUTOCONF_OPCODE.wlan_autoconf_opcode_show_denied_networks;
pub const wlan_autoconf_opcode_power_setting = WLAN_AUTOCONF_OPCODE.wlan_autoconf_opcode_power_setting;
pub const wlan_autoconf_opcode_only_use_gp_profiles_for_allowed_networks = WLAN_AUTOCONF_OPCODE.wlan_autoconf_opcode_only_use_gp_profiles_for_allowed_networks;
pub const wlan_autoconf_opcode_allow_explicit_creds = WLAN_AUTOCONF_OPCODE.wlan_autoconf_opcode_allow_explicit_creds;
pub const wlan_autoconf_opcode_block_period = WLAN_AUTOCONF_OPCODE.wlan_autoconf_opcode_block_period;
pub const wlan_autoconf_opcode_allow_virtual_station_extensibility = WLAN_AUTOCONF_OPCODE.wlan_autoconf_opcode_allow_virtual_station_extensibility;
pub const wlan_autoconf_opcode_end = WLAN_AUTOCONF_OPCODE.wlan_autoconf_opcode_end;

pub const WLAN_IHV_CONTROL_TYPE = extern enum(i32) {
    wlan_ihv_control_type_service = 0,
    wlan_ihv_control_type_driver = 1,
};
pub const wlan_ihv_control_type_service = WLAN_IHV_CONTROL_TYPE.wlan_ihv_control_type_service;
pub const wlan_ihv_control_type_driver = WLAN_IHV_CONTROL_TYPE.wlan_ihv_control_type_driver;

pub const WLAN_FILTER_LIST_TYPE = extern enum(i32) {
    wlan_filter_list_type_gp_permit = 0,
    wlan_filter_list_type_gp_deny = 1,
    wlan_filter_list_type_user_permit = 2,
    wlan_filter_list_type_user_deny = 3,
};
pub const wlan_filter_list_type_gp_permit = WLAN_FILTER_LIST_TYPE.wlan_filter_list_type_gp_permit;
pub const wlan_filter_list_type_gp_deny = WLAN_FILTER_LIST_TYPE.wlan_filter_list_type_gp_deny;
pub const wlan_filter_list_type_user_permit = WLAN_FILTER_LIST_TYPE.wlan_filter_list_type_user_permit;
pub const wlan_filter_list_type_user_deny = WLAN_FILTER_LIST_TYPE.wlan_filter_list_type_user_deny;

pub const WLAN_PHY_FRAME_STATISTICS = extern struct {
    ullTransmittedFrameCount: u64,
    ullMulticastTransmittedFrameCount: u64,
    ullFailedCount: u64,
    ullRetryCount: u64,
    ullMultipleRetryCount: u64,
    ullMaxTXLifetimeExceededCount: u64,
    ullTransmittedFragmentCount: u64,
    ullRTSSuccessCount: u64,
    ullRTSFailureCount: u64,
    ullACKFailureCount: u64,
    ullReceivedFrameCount: u64,
    ullMulticastReceivedFrameCount: u64,
    ullPromiscuousReceivedFrameCount: u64,
    ullMaxRXLifetimeExceededCount: u64,
    ullFrameDuplicateCount: u64,
    ullReceivedFragmentCount: u64,
    ullPromiscuousReceivedFragmentCount: u64,
    ullFCSErrorCount: u64,
};

pub const WLAN_MAC_FRAME_STATISTICS = extern struct {
    ullTransmittedFrameCount: u64,
    ullReceivedFrameCount: u64,
    ullWEPExcludedCount: u64,
    ullTKIPLocalMICFailures: u64,
    ullTKIPReplays: u64,
    ullTKIPICVErrorCount: u64,
    ullCCMPReplays: u64,
    ullCCMPDecryptErrors: u64,
    ullWEPUndecryptableCount: u64,
    ullWEPICVErrorCount: u64,
    ullDecryptSuccessCount: u64,
    ullDecryptFailureCount: u64,
};

pub const WLAN_STATISTICS = extern struct {
    ullFourWayHandshakeFailures: u64,
    ullTKIPCounterMeasuresInvoked: u64,
    ullReserved: u64,
    MacUcastCounters: WLAN_MAC_FRAME_STATISTICS,
    MacMcastCounters: WLAN_MAC_FRAME_STATISTICS,
    dwNumberOfPhys: u32,
    PhyCounters: [1]WLAN_PHY_FRAME_STATISTICS,
};

pub const WLAN_SECURABLE_OBJECT = extern enum(i32) {
    wlan_secure_permit_list = 0,
    wlan_secure_deny_list = 1,
    wlan_secure_ac_enabled = 2,
    wlan_secure_bc_scan_enabled = 3,
    wlan_secure_bss_type = 4,
    wlan_secure_show_denied = 5,
    wlan_secure_interface_properties = 6,
    wlan_secure_ihv_control = 7,
    wlan_secure_all_user_profiles_order = 8,
    wlan_secure_add_new_all_user_profiles = 9,
    wlan_secure_add_new_per_user_profiles = 10,
    wlan_secure_media_streaming_mode_enabled = 11,
    wlan_secure_current_operation_mode = 12,
    wlan_secure_get_plaintext_key = 13,
    wlan_secure_hosted_network_elevated_access = 14,
    wlan_secure_virtual_station_extensibility = 15,
    wlan_secure_wfd_elevated_access = 16,
    COUNT = 17,
};
pub const wlan_secure_permit_list = WLAN_SECURABLE_OBJECT.wlan_secure_permit_list;
pub const wlan_secure_deny_list = WLAN_SECURABLE_OBJECT.wlan_secure_deny_list;
pub const wlan_secure_ac_enabled = WLAN_SECURABLE_OBJECT.wlan_secure_ac_enabled;
pub const wlan_secure_bc_scan_enabled = WLAN_SECURABLE_OBJECT.wlan_secure_bc_scan_enabled;
pub const wlan_secure_bss_type = WLAN_SECURABLE_OBJECT.wlan_secure_bss_type;
pub const wlan_secure_show_denied = WLAN_SECURABLE_OBJECT.wlan_secure_show_denied;
pub const wlan_secure_interface_properties = WLAN_SECURABLE_OBJECT.wlan_secure_interface_properties;
pub const wlan_secure_ihv_control = WLAN_SECURABLE_OBJECT.wlan_secure_ihv_control;
pub const wlan_secure_all_user_profiles_order = WLAN_SECURABLE_OBJECT.wlan_secure_all_user_profiles_order;
pub const wlan_secure_add_new_all_user_profiles = WLAN_SECURABLE_OBJECT.wlan_secure_add_new_all_user_profiles;
pub const wlan_secure_add_new_per_user_profiles = WLAN_SECURABLE_OBJECT.wlan_secure_add_new_per_user_profiles;
pub const wlan_secure_media_streaming_mode_enabled = WLAN_SECURABLE_OBJECT.wlan_secure_media_streaming_mode_enabled;
pub const wlan_secure_current_operation_mode = WLAN_SECURABLE_OBJECT.wlan_secure_current_operation_mode;
pub const wlan_secure_get_plaintext_key = WLAN_SECURABLE_OBJECT.wlan_secure_get_plaintext_key;
pub const wlan_secure_hosted_network_elevated_access = WLAN_SECURABLE_OBJECT.wlan_secure_hosted_network_elevated_access;
pub const wlan_secure_virtual_station_extensibility = WLAN_SECURABLE_OBJECT.wlan_secure_virtual_station_extensibility;
pub const wlan_secure_wfd_elevated_access = WLAN_SECURABLE_OBJECT.wlan_secure_wfd_elevated_access;
pub const WLAN_SECURABLE_OBJECT_COUNT = WLAN_SECURABLE_OBJECT.COUNT;

pub const WLAN_DEVICE_SERVICE_GUID_LIST = extern struct {
    dwNumberOfItems: u32,
    dwIndex: u32,
    DeviceService: [1]Guid,
};

pub const WFD_ROLE_TYPE = extern enum(i32) {
    NONE = 0,
    DEVICE = 1,
    GROUP_OWNER = 2,
    CLIENT = 4,
    MAX = 5,
};
pub const WFD_ROLE_TYPE_NONE = WFD_ROLE_TYPE.NONE;
pub const WFD_ROLE_TYPE_DEVICE = WFD_ROLE_TYPE.DEVICE;
pub const WFD_ROLE_TYPE_GROUP_OWNER = WFD_ROLE_TYPE.GROUP_OWNER;
pub const WFD_ROLE_TYPE_CLIENT = WFD_ROLE_TYPE.CLIENT;
pub const WFD_ROLE_TYPE_MAX = WFD_ROLE_TYPE.MAX;

pub const WFD_GROUP_ID = extern struct {
    DeviceAddress: [6]u8,
    GroupSSID: DOT11_SSID,
};

pub const WL_DISPLAY_PAGES = extern enum(i32) {
    WLConnectionPage = 0,
    WLSecurityPage = 1,
    WLAdvPage = 2,
};
pub const WLConnectionPage = WL_DISPLAY_PAGES.WLConnectionPage;
pub const WLSecurityPage = WL_DISPLAY_PAGES.WLSecurityPage;
pub const WLAdvPage = WL_DISPLAY_PAGES.WLAdvPage;

pub const WLAN_HOSTED_NETWORK_STATE = extern enum(i32) {
    wlan_hosted_network_unavailable = 0,
    wlan_hosted_network_idle = 1,
    wlan_hosted_network_active = 2,
};
pub const wlan_hosted_network_unavailable = WLAN_HOSTED_NETWORK_STATE.wlan_hosted_network_unavailable;
pub const wlan_hosted_network_idle = WLAN_HOSTED_NETWORK_STATE.wlan_hosted_network_idle;
pub const wlan_hosted_network_active = WLAN_HOSTED_NETWORK_STATE.wlan_hosted_network_active;

pub const WLAN_HOSTED_NETWORK_REASON = extern enum(i32) {
    wlan_hosted_network_reason_success = 0,
    wlan_hosted_network_reason_unspecified = 1,
    wlan_hosted_network_reason_bad_parameters = 2,
    wlan_hosted_network_reason_service_shutting_down = 3,
    wlan_hosted_network_reason_insufficient_resources = 4,
    wlan_hosted_network_reason_elevation_required = 5,
    wlan_hosted_network_reason_read_only = 6,
    wlan_hosted_network_reason_persistence_failed = 7,
    wlan_hosted_network_reason_crypt_error = 8,
    wlan_hosted_network_reason_impersonation = 9,
    wlan_hosted_network_reason_stop_before_start = 10,
    wlan_hosted_network_reason_interface_available = 11,
    wlan_hosted_network_reason_interface_unavailable = 12,
    wlan_hosted_network_reason_miniport_stopped = 13,
    wlan_hosted_network_reason_miniport_started = 14,
    wlan_hosted_network_reason_incompatible_connection_started = 15,
    wlan_hosted_network_reason_incompatible_connection_stopped = 16,
    wlan_hosted_network_reason_user_action = 17,
    wlan_hosted_network_reason_client_abort = 18,
    wlan_hosted_network_reason_ap_start_failed = 19,
    wlan_hosted_network_reason_peer_arrived = 20,
    wlan_hosted_network_reason_peer_departed = 21,
    wlan_hosted_network_reason_peer_timeout = 22,
    wlan_hosted_network_reason_gp_denied = 23,
    wlan_hosted_network_reason_service_unavailable = 24,
    wlan_hosted_network_reason_device_change = 25,
    wlan_hosted_network_reason_properties_change = 26,
    wlan_hosted_network_reason_virtual_station_blocking_use = 27,
    wlan_hosted_network_reason_service_available_on_virtual_station = 28,
};
pub const wlan_hosted_network_reason_success = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_success;
pub const wlan_hosted_network_reason_unspecified = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_unspecified;
pub const wlan_hosted_network_reason_bad_parameters = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_bad_parameters;
pub const wlan_hosted_network_reason_service_shutting_down = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_service_shutting_down;
pub const wlan_hosted_network_reason_insufficient_resources = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_insufficient_resources;
pub const wlan_hosted_network_reason_elevation_required = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_elevation_required;
pub const wlan_hosted_network_reason_read_only = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_read_only;
pub const wlan_hosted_network_reason_persistence_failed = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_persistence_failed;
pub const wlan_hosted_network_reason_crypt_error = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_crypt_error;
pub const wlan_hosted_network_reason_impersonation = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_impersonation;
pub const wlan_hosted_network_reason_stop_before_start = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_stop_before_start;
pub const wlan_hosted_network_reason_interface_available = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_interface_available;
pub const wlan_hosted_network_reason_interface_unavailable = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_interface_unavailable;
pub const wlan_hosted_network_reason_miniport_stopped = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_miniport_stopped;
pub const wlan_hosted_network_reason_miniport_started = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_miniport_started;
pub const wlan_hosted_network_reason_incompatible_connection_started = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_incompatible_connection_started;
pub const wlan_hosted_network_reason_incompatible_connection_stopped = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_incompatible_connection_stopped;
pub const wlan_hosted_network_reason_user_action = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_user_action;
pub const wlan_hosted_network_reason_client_abort = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_client_abort;
pub const wlan_hosted_network_reason_ap_start_failed = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_ap_start_failed;
pub const wlan_hosted_network_reason_peer_arrived = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_peer_arrived;
pub const wlan_hosted_network_reason_peer_departed = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_peer_departed;
pub const wlan_hosted_network_reason_peer_timeout = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_peer_timeout;
pub const wlan_hosted_network_reason_gp_denied = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_gp_denied;
pub const wlan_hosted_network_reason_service_unavailable = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_service_unavailable;
pub const wlan_hosted_network_reason_device_change = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_device_change;
pub const wlan_hosted_network_reason_properties_change = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_properties_change;
pub const wlan_hosted_network_reason_virtual_station_blocking_use = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_virtual_station_blocking_use;
pub const wlan_hosted_network_reason_service_available_on_virtual_station = WLAN_HOSTED_NETWORK_REASON.wlan_hosted_network_reason_service_available_on_virtual_station;

pub const WLAN_HOSTED_NETWORK_PEER_AUTH_STATE = extern enum(i32) {
    wlan_hosted_network_peer_state_invalid = 0,
    wlan_hosted_network_peer_state_authenticated = 1,
};
pub const wlan_hosted_network_peer_state_invalid = WLAN_HOSTED_NETWORK_PEER_AUTH_STATE.wlan_hosted_network_peer_state_invalid;
pub const wlan_hosted_network_peer_state_authenticated = WLAN_HOSTED_NETWORK_PEER_AUTH_STATE.wlan_hosted_network_peer_state_authenticated;

pub const WLAN_HOSTED_NETWORK_PEER_STATE = extern struct {
    PeerMacAddress: [6]u8,
    PeerAuthState: WLAN_HOSTED_NETWORK_PEER_AUTH_STATE,
};

pub const WLAN_HOSTED_NETWORK_RADIO_STATE = extern struct {
    dot11SoftwareRadioState: DOT11_RADIO_STATE,
    dot11HardwareRadioState: DOT11_RADIO_STATE,
};

pub const WLAN_HOSTED_NETWORK_NOTIFICATION_CODE = extern enum(i32) {
    wlan_hosted_network_state_change = 4096,
    wlan_hosted_network_peer_state_change = 4097,
    wlan_hosted_network_radio_state_change = 4098,
};
pub const wlan_hosted_network_state_change = WLAN_HOSTED_NETWORK_NOTIFICATION_CODE.wlan_hosted_network_state_change;
pub const wlan_hosted_network_peer_state_change = WLAN_HOSTED_NETWORK_NOTIFICATION_CODE.wlan_hosted_network_peer_state_change;
pub const wlan_hosted_network_radio_state_change = WLAN_HOSTED_NETWORK_NOTIFICATION_CODE.wlan_hosted_network_radio_state_change;

pub const WLAN_HOSTED_NETWORK_STATE_CHANGE = extern struct {
    OldState: WLAN_HOSTED_NETWORK_STATE,
    NewState: WLAN_HOSTED_NETWORK_STATE,
    StateChangeReason: WLAN_HOSTED_NETWORK_REASON,
};

pub const WLAN_HOSTED_NETWORK_DATA_PEER_STATE_CHANGE = extern struct {
    OldState: WLAN_HOSTED_NETWORK_PEER_STATE,
    NewState: WLAN_HOSTED_NETWORK_PEER_STATE,
    PeerStateChangeReason: WLAN_HOSTED_NETWORK_REASON,
};

pub const WLAN_HOSTED_NETWORK_OPCODE = extern enum(i32) {
    wlan_hosted_network_opcode_connection_settings = 0,
    wlan_hosted_network_opcode_security_settings = 1,
    wlan_hosted_network_opcode_station_profile = 2,
    wlan_hosted_network_opcode_enable = 3,
};
pub const wlan_hosted_network_opcode_connection_settings = WLAN_HOSTED_NETWORK_OPCODE.wlan_hosted_network_opcode_connection_settings;
pub const wlan_hosted_network_opcode_security_settings = WLAN_HOSTED_NETWORK_OPCODE.wlan_hosted_network_opcode_security_settings;
pub const wlan_hosted_network_opcode_station_profile = WLAN_HOSTED_NETWORK_OPCODE.wlan_hosted_network_opcode_station_profile;
pub const wlan_hosted_network_opcode_enable = WLAN_HOSTED_NETWORK_OPCODE.wlan_hosted_network_opcode_enable;

pub const WLAN_HOSTED_NETWORK_CONNECTION_SETTINGS = extern struct {
    hostedNetworkSSID: DOT11_SSID,
    dwMaxNumberOfPeers: u32,
};

pub const WLAN_HOSTED_NETWORK_SECURITY_SETTINGS = extern struct {
    dot11AuthAlgo: DOT11_AUTH_ALGORITHM,
    dot11CipherAlgo: DOT11_CIPHER_ALGORITHM,
};

pub const WLAN_HOSTED_NETWORK_STATUS = extern struct {
    HostedNetworkState: WLAN_HOSTED_NETWORK_STATE,
    IPDeviceID: Guid,
    wlanHostedNetworkBSSID: [6]u8,
    dot11PhyType: DOT11_PHY_TYPE,
    ulChannelFrequency: u32,
    dwNumberOfPeers: u32,
    PeerList: [1]WLAN_HOSTED_NETWORK_PEER_STATE,
};

pub const WFD_OPEN_SESSION_COMPLETE_CALLBACK = fn(
    hSessionHandle: HANDLE,
    pvContext: *c_void,
    guidSessionInterface: Guid,
    dwError: u32,
    dwReasonCode: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const ONEX_AUTH_IDENTITY = extern enum(i32) {
    OneXAuthIdentityNone = 0,
    OneXAuthIdentityMachine = 1,
    OneXAuthIdentityUser = 2,
    OneXAuthIdentityExplicitUser = 3,
    OneXAuthIdentityGuest = 4,
    OneXAuthIdentityInvalid = 5,
};
pub const OneXAuthIdentityNone = ONEX_AUTH_IDENTITY.OneXAuthIdentityNone;
pub const OneXAuthIdentityMachine = ONEX_AUTH_IDENTITY.OneXAuthIdentityMachine;
pub const OneXAuthIdentityUser = ONEX_AUTH_IDENTITY.OneXAuthIdentityUser;
pub const OneXAuthIdentityExplicitUser = ONEX_AUTH_IDENTITY.OneXAuthIdentityExplicitUser;
pub const OneXAuthIdentityGuest = ONEX_AUTH_IDENTITY.OneXAuthIdentityGuest;
pub const OneXAuthIdentityInvalid = ONEX_AUTH_IDENTITY.OneXAuthIdentityInvalid;

pub const ONEX_AUTH_STATUS = extern enum(i32) {
    OneXAuthNotStarted = 0,
    OneXAuthInProgress = 1,
    OneXAuthNoAuthenticatorFound = 2,
    OneXAuthSuccess = 3,
    OneXAuthFailure = 4,
    OneXAuthInvalid = 5,
};
pub const OneXAuthNotStarted = ONEX_AUTH_STATUS.OneXAuthNotStarted;
pub const OneXAuthInProgress = ONEX_AUTH_STATUS.OneXAuthInProgress;
pub const OneXAuthNoAuthenticatorFound = ONEX_AUTH_STATUS.OneXAuthNoAuthenticatorFound;
pub const OneXAuthSuccess = ONEX_AUTH_STATUS.OneXAuthSuccess;
pub const OneXAuthFailure = ONEX_AUTH_STATUS.OneXAuthFailure;
pub const OneXAuthInvalid = ONEX_AUTH_STATUS.OneXAuthInvalid;

pub const ONEX_REASON_CODE = extern enum(i32) {
    SUCCESS = 0,
    ONEX_REASON_START = 327680,
    ONEX_UNABLE_TO_IDENTIFY_USER = 327681,
    ONEX_IDENTITY_NOT_FOUND = 327682,
    ONEX_UI_DISABLED = 327683,
    ONEX_UI_FAILURE = 327684,
    ONEX_EAP_FAILURE_RECEIVED = 327685,
    ONEX_AUTHENTICATOR_NO_LONGER_PRESENT = 327686,
    ONEX_NO_RESPONSE_TO_IDENTITY = 327687,
    ONEX_PROFILE_VERSION_NOT_SUPPORTED = 327688,
    ONEX_PROFILE_INVALID_LENGTH = 327689,
    ONEX_PROFILE_DISALLOWED_EAP_TYPE = 327690,
    ONEX_PROFILE_INVALID_EAP_TYPE_OR_FLAG = 327691,
    ONEX_PROFILE_INVALID_ONEX_FLAGS = 327692,
    ONEX_PROFILE_INVALID_TIMER_VALUE = 327693,
    ONEX_PROFILE_INVALID_SUPPLICANT_MODE = 327694,
    ONEX_PROFILE_INVALID_AUTH_MODE = 327695,
    ONEX_PROFILE_INVALID_EAP_CONNECTION_PROPERTIES = 327696,
    ONEX_UI_CANCELLED = 327697,
    ONEX_PROFILE_INVALID_EXPLICIT_CREDENTIALS = 327698,
    ONEX_PROFILE_EXPIRED_EXPLICIT_CREDENTIALS = 327699,
    ONEX_UI_NOT_PERMITTED = 327700,
};
pub const ONEX_REASON_CODE_SUCCESS = ONEX_REASON_CODE.SUCCESS;
pub const ONEX_REASON_START = ONEX_REASON_CODE.ONEX_REASON_START;
pub const ONEX_UNABLE_TO_IDENTIFY_USER = ONEX_REASON_CODE.ONEX_UNABLE_TO_IDENTIFY_USER;
pub const ONEX_IDENTITY_NOT_FOUND = ONEX_REASON_CODE.ONEX_IDENTITY_NOT_FOUND;
pub const ONEX_UI_DISABLED = ONEX_REASON_CODE.ONEX_UI_DISABLED;
pub const ONEX_UI_FAILURE = ONEX_REASON_CODE.ONEX_UI_FAILURE;
pub const ONEX_EAP_FAILURE_RECEIVED = ONEX_REASON_CODE.ONEX_EAP_FAILURE_RECEIVED;
pub const ONEX_AUTHENTICATOR_NO_LONGER_PRESENT = ONEX_REASON_CODE.ONEX_AUTHENTICATOR_NO_LONGER_PRESENT;
pub const ONEX_NO_RESPONSE_TO_IDENTITY = ONEX_REASON_CODE.ONEX_NO_RESPONSE_TO_IDENTITY;
pub const ONEX_PROFILE_VERSION_NOT_SUPPORTED = ONEX_REASON_CODE.ONEX_PROFILE_VERSION_NOT_SUPPORTED;
pub const ONEX_PROFILE_INVALID_LENGTH = ONEX_REASON_CODE.ONEX_PROFILE_INVALID_LENGTH;
pub const ONEX_PROFILE_DISALLOWED_EAP_TYPE = ONEX_REASON_CODE.ONEX_PROFILE_DISALLOWED_EAP_TYPE;
pub const ONEX_PROFILE_INVALID_EAP_TYPE_OR_FLAG = ONEX_REASON_CODE.ONEX_PROFILE_INVALID_EAP_TYPE_OR_FLAG;
pub const ONEX_PROFILE_INVALID_ONEX_FLAGS = ONEX_REASON_CODE.ONEX_PROFILE_INVALID_ONEX_FLAGS;
pub const ONEX_PROFILE_INVALID_TIMER_VALUE = ONEX_REASON_CODE.ONEX_PROFILE_INVALID_TIMER_VALUE;
pub const ONEX_PROFILE_INVALID_SUPPLICANT_MODE = ONEX_REASON_CODE.ONEX_PROFILE_INVALID_SUPPLICANT_MODE;
pub const ONEX_PROFILE_INVALID_AUTH_MODE = ONEX_REASON_CODE.ONEX_PROFILE_INVALID_AUTH_MODE;
pub const ONEX_PROFILE_INVALID_EAP_CONNECTION_PROPERTIES = ONEX_REASON_CODE.ONEX_PROFILE_INVALID_EAP_CONNECTION_PROPERTIES;
pub const ONEX_UI_CANCELLED = ONEX_REASON_CODE.ONEX_UI_CANCELLED;
pub const ONEX_PROFILE_INVALID_EXPLICIT_CREDENTIALS = ONEX_REASON_CODE.ONEX_PROFILE_INVALID_EXPLICIT_CREDENTIALS;
pub const ONEX_PROFILE_EXPIRED_EXPLICIT_CREDENTIALS = ONEX_REASON_CODE.ONEX_PROFILE_EXPIRED_EXPLICIT_CREDENTIALS;
pub const ONEX_UI_NOT_PERMITTED = ONEX_REASON_CODE.ONEX_UI_NOT_PERMITTED;

pub const ONEX_NOTIFICATION_TYPE = extern enum(i32) {
    OneXPublicNotificationBase = 0,
    OneXNotificationTypeResultUpdate = 1,
    OneXNotificationTypeAuthRestarted = 2,
    OneXNotificationTypeEventInvalid = 3,
    OneXNumNotifications = 3,
};
pub const OneXPublicNotificationBase = ONEX_NOTIFICATION_TYPE.OneXPublicNotificationBase;
pub const OneXNotificationTypeResultUpdate = ONEX_NOTIFICATION_TYPE.OneXNotificationTypeResultUpdate;
pub const OneXNotificationTypeAuthRestarted = ONEX_NOTIFICATION_TYPE.OneXNotificationTypeAuthRestarted;
pub const OneXNotificationTypeEventInvalid = ONEX_NOTIFICATION_TYPE.OneXNotificationTypeEventInvalid;
pub const OneXNumNotifications = ONEX_NOTIFICATION_TYPE.OneXNumNotifications;

pub const ONEX_AUTH_RESTART_REASON = extern enum(i32) {
    OneXRestartReasonPeerInitiated = 0,
    OneXRestartReasonMsmInitiated = 1,
    OneXRestartReasonOneXHeldStateTimeout = 2,
    OneXRestartReasonOneXAuthTimeout = 3,
    OneXRestartReasonOneXConfigurationChanged = 4,
    OneXRestartReasonOneXUserChanged = 5,
    OneXRestartReasonQuarantineStateChanged = 6,
    OneXRestartReasonAltCredsTrial = 7,
    OneXRestartReasonInvalid = 8,
};
pub const OneXRestartReasonPeerInitiated = ONEX_AUTH_RESTART_REASON.OneXRestartReasonPeerInitiated;
pub const OneXRestartReasonMsmInitiated = ONEX_AUTH_RESTART_REASON.OneXRestartReasonMsmInitiated;
pub const OneXRestartReasonOneXHeldStateTimeout = ONEX_AUTH_RESTART_REASON.OneXRestartReasonOneXHeldStateTimeout;
pub const OneXRestartReasonOneXAuthTimeout = ONEX_AUTH_RESTART_REASON.OneXRestartReasonOneXAuthTimeout;
pub const OneXRestartReasonOneXConfigurationChanged = ONEX_AUTH_RESTART_REASON.OneXRestartReasonOneXConfigurationChanged;
pub const OneXRestartReasonOneXUserChanged = ONEX_AUTH_RESTART_REASON.OneXRestartReasonOneXUserChanged;
pub const OneXRestartReasonQuarantineStateChanged = ONEX_AUTH_RESTART_REASON.OneXRestartReasonQuarantineStateChanged;
pub const OneXRestartReasonAltCredsTrial = ONEX_AUTH_RESTART_REASON.OneXRestartReasonAltCredsTrial;
pub const OneXRestartReasonInvalid = ONEX_AUTH_RESTART_REASON.OneXRestartReasonInvalid;

pub const ONEX_VARIABLE_BLOB = extern struct {
    dwSize: u32,
    dwOffset: u32,
};

pub const ONEX_AUTH_PARAMS = extern struct {
    fUpdatePending: BOOL,
    oneXConnProfile: ONEX_VARIABLE_BLOB,
    authIdentity: ONEX_AUTH_IDENTITY,
    dwQuarantineState: u32,
    _bitfield: u32,
    dwSessionId: u32,
    hUserToken: HANDLE,
    OneXUserProfile: ONEX_VARIABLE_BLOB,
    Identity: ONEX_VARIABLE_BLOB,
    UserName: ONEX_VARIABLE_BLOB,
    Domain: ONEX_VARIABLE_BLOB,
};

pub const ONEX_EAP_ERROR = extern struct {
    dwWinError: u32,
    type: EAP_METHOD_TYPE,
    dwReasonCode: u32,
    rootCauseGuid: Guid,
    repairGuid: Guid,
    helpLinkGuid: Guid,
    _bitfield: u32,
    RootCauseString: ONEX_VARIABLE_BLOB,
    RepairString: ONEX_VARIABLE_BLOB,
};

pub const ONEX_STATUS = extern struct {
    authStatus: ONEX_AUTH_STATUS,
    dwReason: u32,
    dwError: u32,
};

pub const ONEX_EAP_METHOD_BACKEND_SUPPORT = extern enum(i32) {
    OneXEapMethodBackendSupportUnknown = 0,
    OneXEapMethodBackendSupported = 1,
    OneXEapMethodBackendUnsupported = 2,
};
pub const OneXEapMethodBackendSupportUnknown = ONEX_EAP_METHOD_BACKEND_SUPPORT.OneXEapMethodBackendSupportUnknown;
pub const OneXEapMethodBackendSupported = ONEX_EAP_METHOD_BACKEND_SUPPORT.OneXEapMethodBackendSupported;
pub const OneXEapMethodBackendUnsupported = ONEX_EAP_METHOD_BACKEND_SUPPORT.OneXEapMethodBackendUnsupported;

pub const ONEX_RESULT_UPDATE_DATA = extern struct {
    oneXStatus: ONEX_STATUS,
    BackendSupport: ONEX_EAP_METHOD_BACKEND_SUPPORT,
    fBackendEngaged: BOOL,
    _bitfield: u32,
    authParams: ONEX_VARIABLE_BLOB,
    eapError: ONEX_VARIABLE_BLOB,
};

pub const ONEX_USER_INFO = extern struct {
    authIdentity: ONEX_AUTH_IDENTITY,
    _bitfield: u32,
    UserName: ONEX_VARIABLE_BLOB,
    DomainName: ONEX_VARIABLE_BLOB,
};

const CLSID_Dot11AdHocManager_Value = @import("../zig.zig").Guid.initString("DD06A84F-83BD-4D01-8AB9-2389FEA0869E");
pub const CLSID_Dot11AdHocManager = &CLSID_Dot11AdHocManager_Value;

pub const DOT11_ADHOC_CIPHER_ALGORITHM = extern enum(i32) {
    DOT11_ADHOC_CIPHER_ALGO_INVALID = -1,
    DOT11_ADHOC_CIPHER_ALGO_NONE = 0,
    DOT11_ADHOC_CIPHER_ALGO_CCMP = 4,
    DOT11_ADHOC_CIPHER_ALGO_WEP = 257,
};
pub const DOT11_ADHOC_CIPHER_ALGO_INVALID = DOT11_ADHOC_CIPHER_ALGORITHM.DOT11_ADHOC_CIPHER_ALGO_INVALID;
pub const DOT11_ADHOC_CIPHER_ALGO_NONE = DOT11_ADHOC_CIPHER_ALGORITHM.DOT11_ADHOC_CIPHER_ALGO_NONE;
pub const DOT11_ADHOC_CIPHER_ALGO_CCMP = DOT11_ADHOC_CIPHER_ALGORITHM.DOT11_ADHOC_CIPHER_ALGO_CCMP;
pub const DOT11_ADHOC_CIPHER_ALGO_WEP = DOT11_ADHOC_CIPHER_ALGORITHM.DOT11_ADHOC_CIPHER_ALGO_WEP;

pub const DOT11_ADHOC_AUTH_ALGORITHM = extern enum(i32) {
    DOT11_ADHOC_AUTH_ALGO_INVALID = -1,
    DOT11_ADHOC_AUTH_ALGO_80211_OPEN = 1,
    DOT11_ADHOC_AUTH_ALGO_RSNA_PSK = 7,
};
pub const DOT11_ADHOC_AUTH_ALGO_INVALID = DOT11_ADHOC_AUTH_ALGORITHM.DOT11_ADHOC_AUTH_ALGO_INVALID;
pub const DOT11_ADHOC_AUTH_ALGO_80211_OPEN = DOT11_ADHOC_AUTH_ALGORITHM.DOT11_ADHOC_AUTH_ALGO_80211_OPEN;
pub const DOT11_ADHOC_AUTH_ALGO_RSNA_PSK = DOT11_ADHOC_AUTH_ALGORITHM.DOT11_ADHOC_AUTH_ALGO_RSNA_PSK;

pub const DOT11_ADHOC_NETWORK_CONNECTION_STATUS = extern enum(i32) {
    INVALID = 0,
    DISCONNECTED = 11,
    CONNECTING = 12,
    CONNECTED = 13,
    FORMED = 14,
};
pub const DOT11_ADHOC_NETWORK_CONNECTION_STATUS_INVALID = DOT11_ADHOC_NETWORK_CONNECTION_STATUS.INVALID;
pub const DOT11_ADHOC_NETWORK_CONNECTION_STATUS_DISCONNECTED = DOT11_ADHOC_NETWORK_CONNECTION_STATUS.DISCONNECTED;
pub const DOT11_ADHOC_NETWORK_CONNECTION_STATUS_CONNECTING = DOT11_ADHOC_NETWORK_CONNECTION_STATUS.CONNECTING;
pub const DOT11_ADHOC_NETWORK_CONNECTION_STATUS_CONNECTED = DOT11_ADHOC_NETWORK_CONNECTION_STATUS.CONNECTED;
pub const DOT11_ADHOC_NETWORK_CONNECTION_STATUS_FORMED = DOT11_ADHOC_NETWORK_CONNECTION_STATUS.FORMED;

pub const DOT11_ADHOC_CONNECT_FAIL_REASON = extern enum(i32) {
    DOT11_ADHOC_CONNECT_FAIL_DOMAIN_MISMATCH = 0,
    DOT11_ADHOC_CONNECT_FAIL_PASSPHRASE_MISMATCH = 1,
    DOT11_ADHOC_CONNECT_FAIL_OTHER = 2,
};
pub const DOT11_ADHOC_CONNECT_FAIL_DOMAIN_MISMATCH = DOT11_ADHOC_CONNECT_FAIL_REASON.DOT11_ADHOC_CONNECT_FAIL_DOMAIN_MISMATCH;
pub const DOT11_ADHOC_CONNECT_FAIL_PASSPHRASE_MISMATCH = DOT11_ADHOC_CONNECT_FAIL_REASON.DOT11_ADHOC_CONNECT_FAIL_PASSPHRASE_MISMATCH;
pub const DOT11_ADHOC_CONNECT_FAIL_OTHER = DOT11_ADHOC_CONNECT_FAIL_REASON.DOT11_ADHOC_CONNECT_FAIL_OTHER;

const IID_IDot11AdHocManager_Value = @import("../zig.zig").Guid.initString("8F10CC26-CF0D-42A0-ACBE-E2DE7007384D");
pub const IID_IDot11AdHocManager = &IID_IDot11AdHocManager_Value;
pub const IDot11AdHocManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateNetwork: fn(
            self: *const IDot11AdHocManager,
            Name: [*:0]const u16,
            Password: [*:0]const u16,
            GeographicalId: i32,
            pInterface: *IDot11AdHocInterface,
            pSecurity: *IDot11AdHocSecuritySettings,
            pContextGuid: *Guid,
            pIAdHoc: **IDot11AdHocNetwork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitCreatedNetwork: fn(
            self: *const IDot11AdHocManager,
            pIAdHoc: *IDot11AdHocNetwork,
            fSaveProfile: u8,
            fMakeSavedProfileUserSpecific: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIEnumDot11AdHocNetworks: fn(
            self: *const IDot11AdHocManager,
            pContextGuid: *Guid,
            ppEnum: **IEnumDot11AdHocNetworks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIEnumDot11AdHocInterfaces: fn(
            self: *const IDot11AdHocManager,
            ppEnum: **IEnumDot11AdHocInterfaces,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetwork: fn(
            self: *const IDot11AdHocManager,
            NetworkSignature: *Guid,
            pNetwork: **IDot11AdHocNetwork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocManager_CreateNetwork(self: *const T, Name: [*:0]const u16, Password: [*:0]const u16, GeographicalId: i32, pInterface: *IDot11AdHocInterface, pSecurity: *IDot11AdHocSecuritySettings, pContextGuid: *Guid, pIAdHoc: **IDot11AdHocNetwork) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocManager.VTable, self.vtable).CreateNetwork(@ptrCast(*const IDot11AdHocManager, self), Name, Password, GeographicalId, pInterface, pSecurity, pContextGuid, pIAdHoc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocManager_CommitCreatedNetwork(self: *const T, pIAdHoc: *IDot11AdHocNetwork, fSaveProfile: u8, fMakeSavedProfileUserSpecific: u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocManager.VTable, self.vtable).CommitCreatedNetwork(@ptrCast(*const IDot11AdHocManager, self), pIAdHoc, fSaveProfile, fMakeSavedProfileUserSpecific);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocManager_GetIEnumDot11AdHocNetworks(self: *const T, pContextGuid: *Guid, ppEnum: **IEnumDot11AdHocNetworks) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocManager.VTable, self.vtable).GetIEnumDot11AdHocNetworks(@ptrCast(*const IDot11AdHocManager, self), pContextGuid, ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocManager_GetIEnumDot11AdHocInterfaces(self: *const T, ppEnum: **IEnumDot11AdHocInterfaces) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocManager.VTable, self.vtable).GetIEnumDot11AdHocInterfaces(@ptrCast(*const IDot11AdHocManager, self), ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocManager_GetNetwork(self: *const T, NetworkSignature: *Guid, pNetwork: **IDot11AdHocNetwork) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocManager.VTable, self.vtable).GetNetwork(@ptrCast(*const IDot11AdHocManager, self), NetworkSignature, pNetwork);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDot11AdHocManagerNotificationSink_Value = @import("../zig.zig").Guid.initString("8F10CC27-CF0D-42A0-ACBE-E2DE7007384D");
pub const IID_IDot11AdHocManagerNotificationSink = &IID_IDot11AdHocManagerNotificationSink_Value;
pub const IDot11AdHocManagerNotificationSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnNetworkAdd: fn(
            self: *const IDot11AdHocManagerNotificationSink,
            pIAdHocNetwork: *IDot11AdHocNetwork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNetworkRemove: fn(
            self: *const IDot11AdHocManagerNotificationSink,
            Signature: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInterfaceAdd: fn(
            self: *const IDot11AdHocManagerNotificationSink,
            pIAdHocInterface: *IDot11AdHocInterface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInterfaceRemove: fn(
            self: *const IDot11AdHocManagerNotificationSink,
            Signature: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocManagerNotificationSink_OnNetworkAdd(self: *const T, pIAdHocNetwork: *IDot11AdHocNetwork) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocManagerNotificationSink.VTable, self.vtable).OnNetworkAdd(@ptrCast(*const IDot11AdHocManagerNotificationSink, self), pIAdHocNetwork);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocManagerNotificationSink_OnNetworkRemove(self: *const T, Signature: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocManagerNotificationSink.VTable, self.vtable).OnNetworkRemove(@ptrCast(*const IDot11AdHocManagerNotificationSink, self), Signature);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocManagerNotificationSink_OnInterfaceAdd(self: *const T, pIAdHocInterface: *IDot11AdHocInterface) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocManagerNotificationSink.VTable, self.vtable).OnInterfaceAdd(@ptrCast(*const IDot11AdHocManagerNotificationSink, self), pIAdHocInterface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocManagerNotificationSink_OnInterfaceRemove(self: *const T, Signature: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocManagerNotificationSink.VTable, self.vtable).OnInterfaceRemove(@ptrCast(*const IDot11AdHocManagerNotificationSink, self), Signature);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumDot11AdHocNetworks_Value = @import("../zig.zig").Guid.initString("8F10CC28-CF0D-42A0-ACBE-E2DE7007384D");
pub const IID_IEnumDot11AdHocNetworks = &IID_IEnumDot11AdHocNetworks_Value;
pub const IEnumDot11AdHocNetworks = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumDot11AdHocNetworks,
            cElt: u32,
            rgElt: [*]*IDot11AdHocNetwork,
            pcEltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumDot11AdHocNetworks,
            cElt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumDot11AdHocNetworks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumDot11AdHocNetworks,
            ppEnum: **IEnumDot11AdHocNetworks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocNetworks_Next(self: *const T, cElt: u32, rgElt: [*]*IDot11AdHocNetwork, pcEltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocNetworks.VTable, self.vtable).Next(@ptrCast(*const IEnumDot11AdHocNetworks, self), cElt, rgElt, pcEltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocNetworks_Skip(self: *const T, cElt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocNetworks.VTable, self.vtable).Skip(@ptrCast(*const IEnumDot11AdHocNetworks, self), cElt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocNetworks_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocNetworks.VTable, self.vtable).Reset(@ptrCast(*const IEnumDot11AdHocNetworks, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocNetworks_Clone(self: *const T, ppEnum: **IEnumDot11AdHocNetworks) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocNetworks.VTable, self.vtable).Clone(@ptrCast(*const IEnumDot11AdHocNetworks, self), ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDot11AdHocNetwork_Value = @import("../zig.zig").Guid.initString("8F10CC29-CF0D-42A0-ACBE-E2DE7007384D");
pub const IID_IDot11AdHocNetwork = &IID_IDot11AdHocNetwork_Value;
pub const IDot11AdHocNetwork = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStatus: fn(
            self: *const IDot11AdHocNetwork,
            eStatus: *DOT11_ADHOC_NETWORK_CONNECTION_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSSID: fn(
            self: *const IDot11AdHocNetwork,
            ppszwSSID: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasProfile: fn(
            self: *const IDot11AdHocNetwork,
            pf11d: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProfileName: fn(
            self: *const IDot11AdHocNetwork,
            ppszwProfileName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteProfile: fn(
            self: *const IDot11AdHocNetwork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignalQuality: fn(
            self: *const IDot11AdHocNetwork,
            puStrengthValue: *u32,
            puStrengthMax: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecuritySetting: fn(
            self: *const IDot11AdHocNetwork,
            pAdHocSecuritySetting: **IDot11AdHocSecuritySettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContextGuid: fn(
            self: *const IDot11AdHocNetwork,
            pContextGuid: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignature: fn(
            self: *const IDot11AdHocNetwork,
            pSignature: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInterface: fn(
            self: *const IDot11AdHocNetwork,
            pAdHocInterface: **IDot11AdHocInterface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Connect: fn(
            self: *const IDot11AdHocNetwork,
            Passphrase: [*:0]const u16,
            GeographicalId: i32,
            fSaveProfile: u8,
            fMakeSavedProfileUserSpecific: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: fn(
            self: *const IDot11AdHocNetwork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_GetStatus(self: *const T, eStatus: *DOT11_ADHOC_NETWORK_CONNECTION_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).GetStatus(@ptrCast(*const IDot11AdHocNetwork, self), eStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_GetSSID(self: *const T, ppszwSSID: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).GetSSID(@ptrCast(*const IDot11AdHocNetwork, self), ppszwSSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_HasProfile(self: *const T, pf11d: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).HasProfile(@ptrCast(*const IDot11AdHocNetwork, self), pf11d);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_GetProfileName(self: *const T, ppszwProfileName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).GetProfileName(@ptrCast(*const IDot11AdHocNetwork, self), ppszwProfileName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_DeleteProfile(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).DeleteProfile(@ptrCast(*const IDot11AdHocNetwork, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_GetSignalQuality(self: *const T, puStrengthValue: *u32, puStrengthMax: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).GetSignalQuality(@ptrCast(*const IDot11AdHocNetwork, self), puStrengthValue, puStrengthMax);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_GetSecuritySetting(self: *const T, pAdHocSecuritySetting: **IDot11AdHocSecuritySettings) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).GetSecuritySetting(@ptrCast(*const IDot11AdHocNetwork, self), pAdHocSecuritySetting);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_GetContextGuid(self: *const T, pContextGuid: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).GetContextGuid(@ptrCast(*const IDot11AdHocNetwork, self), pContextGuid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_GetSignature(self: *const T, pSignature: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).GetSignature(@ptrCast(*const IDot11AdHocNetwork, self), pSignature);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_GetInterface(self: *const T, pAdHocInterface: **IDot11AdHocInterface) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).GetInterface(@ptrCast(*const IDot11AdHocNetwork, self), pAdHocInterface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_Connect(self: *const T, Passphrase: [*:0]const u16, GeographicalId: i32, fSaveProfile: u8, fMakeSavedProfileUserSpecific: u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).Connect(@ptrCast(*const IDot11AdHocNetwork, self), Passphrase, GeographicalId, fSaveProfile, fMakeSavedProfileUserSpecific);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetwork_Disconnect(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetwork.VTable, self.vtable).Disconnect(@ptrCast(*const IDot11AdHocNetwork, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDot11AdHocNetworkNotificationSink_Value = @import("../zig.zig").Guid.initString("8F10CC2A-CF0D-42A0-ACBE-E2DE7007384D");
pub const IID_IDot11AdHocNetworkNotificationSink = &IID_IDot11AdHocNetworkNotificationSink_Value;
pub const IDot11AdHocNetworkNotificationSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStatusChange: fn(
            self: *const IDot11AdHocNetworkNotificationSink,
            eStatus: DOT11_ADHOC_NETWORK_CONNECTION_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnConnectFail: fn(
            self: *const IDot11AdHocNetworkNotificationSink,
            eFailReason: DOT11_ADHOC_CONNECT_FAIL_REASON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetworkNotificationSink_OnStatusChange(self: *const T, eStatus: DOT11_ADHOC_NETWORK_CONNECTION_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetworkNotificationSink.VTable, self.vtable).OnStatusChange(@ptrCast(*const IDot11AdHocNetworkNotificationSink, self), eStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocNetworkNotificationSink_OnConnectFail(self: *const T, eFailReason: DOT11_ADHOC_CONNECT_FAIL_REASON) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocNetworkNotificationSink.VTable, self.vtable).OnConnectFail(@ptrCast(*const IDot11AdHocNetworkNotificationSink, self), eFailReason);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDot11AdHocInterface_Value = @import("../zig.zig").Guid.initString("8F10CC2B-CF0D-42A0-ACBE-E2DE7007384D");
pub const IID_IDot11AdHocInterface = &IID_IDot11AdHocInterface_Value;
pub const IDot11AdHocInterface = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDeviceSignature: fn(
            self: *const IDot11AdHocInterface,
            pSignature: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFriendlyName: fn(
            self: *const IDot11AdHocInterface,
            ppszName: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDot11d: fn(
            self: *const IDot11AdHocInterface,
            pf11d: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsAdHocCapable: fn(
            self: *const IDot11AdHocInterface,
            pfAdHocCapable: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRadioOn: fn(
            self: *const IDot11AdHocInterface,
            pfIsRadioOn: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetActiveNetwork: fn(
            self: *const IDot11AdHocInterface,
            ppNetwork: **IDot11AdHocNetwork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIEnumSecuritySettings: fn(
            self: *const IDot11AdHocInterface,
            ppEnum: **IEnumDot11AdHocSecuritySettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIEnumDot11AdHocNetworks: fn(
            self: *const IDot11AdHocInterface,
            pFilterGuid: *Guid,
            ppEnum: **IEnumDot11AdHocNetworks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: fn(
            self: *const IDot11AdHocInterface,
            pState: *DOT11_ADHOC_NETWORK_CONNECTION_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterface_GetDeviceSignature(self: *const T, pSignature: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterface.VTable, self.vtable).GetDeviceSignature(@ptrCast(*const IDot11AdHocInterface, self), pSignature);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterface_GetFriendlyName(self: *const T, ppszName: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterface.VTable, self.vtable).GetFriendlyName(@ptrCast(*const IDot11AdHocInterface, self), ppszName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterface_IsDot11d(self: *const T, pf11d: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterface.VTable, self.vtable).IsDot11d(@ptrCast(*const IDot11AdHocInterface, self), pf11d);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterface_IsAdHocCapable(self: *const T, pfAdHocCapable: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterface.VTable, self.vtable).IsAdHocCapable(@ptrCast(*const IDot11AdHocInterface, self), pfAdHocCapable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterface_IsRadioOn(self: *const T, pfIsRadioOn: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterface.VTable, self.vtable).IsRadioOn(@ptrCast(*const IDot11AdHocInterface, self), pfIsRadioOn);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterface_GetActiveNetwork(self: *const T, ppNetwork: **IDot11AdHocNetwork) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterface.VTable, self.vtable).GetActiveNetwork(@ptrCast(*const IDot11AdHocInterface, self), ppNetwork);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterface_GetIEnumSecuritySettings(self: *const T, ppEnum: **IEnumDot11AdHocSecuritySettings) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterface.VTable, self.vtable).GetIEnumSecuritySettings(@ptrCast(*const IDot11AdHocInterface, self), ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterface_GetIEnumDot11AdHocNetworks(self: *const T, pFilterGuid: *Guid, ppEnum: **IEnumDot11AdHocNetworks) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterface.VTable, self.vtable).GetIEnumDot11AdHocNetworks(@ptrCast(*const IDot11AdHocInterface, self), pFilterGuid, ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterface_GetStatus(self: *const T, pState: *DOT11_ADHOC_NETWORK_CONNECTION_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterface.VTable, self.vtable).GetStatus(@ptrCast(*const IDot11AdHocInterface, self), pState);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumDot11AdHocInterfaces_Value = @import("../zig.zig").Guid.initString("8F10CC2C-CF0D-42A0-ACBE-E2DE7007384D");
pub const IID_IEnumDot11AdHocInterfaces = &IID_IEnumDot11AdHocInterfaces_Value;
pub const IEnumDot11AdHocInterfaces = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumDot11AdHocInterfaces,
            cElt: u32,
            rgElt: [*]*IDot11AdHocInterface,
            pcEltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumDot11AdHocInterfaces,
            cElt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumDot11AdHocInterfaces,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumDot11AdHocInterfaces,
            ppEnum: **IEnumDot11AdHocInterfaces,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocInterfaces_Next(self: *const T, cElt: u32, rgElt: [*]*IDot11AdHocInterface, pcEltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocInterfaces.VTable, self.vtable).Next(@ptrCast(*const IEnumDot11AdHocInterfaces, self), cElt, rgElt, pcEltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocInterfaces_Skip(self: *const T, cElt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocInterfaces.VTable, self.vtable).Skip(@ptrCast(*const IEnumDot11AdHocInterfaces, self), cElt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocInterfaces_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocInterfaces.VTable, self.vtable).Reset(@ptrCast(*const IEnumDot11AdHocInterfaces, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocInterfaces_Clone(self: *const T, ppEnum: **IEnumDot11AdHocInterfaces) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocInterfaces.VTable, self.vtable).Clone(@ptrCast(*const IEnumDot11AdHocInterfaces, self), ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumDot11AdHocSecuritySettings_Value = @import("../zig.zig").Guid.initString("8F10CC2D-CF0D-42A0-ACBE-E2DE7007384D");
pub const IID_IEnumDot11AdHocSecuritySettings = &IID_IEnumDot11AdHocSecuritySettings_Value;
pub const IEnumDot11AdHocSecuritySettings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumDot11AdHocSecuritySettings,
            cElt: u32,
            rgElt: [*]*IDot11AdHocSecuritySettings,
            pcEltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumDot11AdHocSecuritySettings,
            cElt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumDot11AdHocSecuritySettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumDot11AdHocSecuritySettings,
            ppEnum: **IEnumDot11AdHocSecuritySettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocSecuritySettings_Next(self: *const T, cElt: u32, rgElt: [*]*IDot11AdHocSecuritySettings, pcEltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocSecuritySettings.VTable, self.vtable).Next(@ptrCast(*const IEnumDot11AdHocSecuritySettings, self), cElt, rgElt, pcEltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocSecuritySettings_Skip(self: *const T, cElt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocSecuritySettings.VTable, self.vtable).Skip(@ptrCast(*const IEnumDot11AdHocSecuritySettings, self), cElt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocSecuritySettings_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocSecuritySettings.VTable, self.vtable).Reset(@ptrCast(*const IEnumDot11AdHocSecuritySettings, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumDot11AdHocSecuritySettings_Clone(self: *const T, ppEnum: **IEnumDot11AdHocSecuritySettings) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumDot11AdHocSecuritySettings.VTable, self.vtable).Clone(@ptrCast(*const IEnumDot11AdHocSecuritySettings, self), ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDot11AdHocSecuritySettings_Value = @import("../zig.zig").Guid.initString("8F10CC2E-CF0D-42A0-ACBE-E2DE7007384D");
pub const IID_IDot11AdHocSecuritySettings = &IID_IDot11AdHocSecuritySettings_Value;
pub const IDot11AdHocSecuritySettings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDot11AuthAlgorithm: fn(
            self: *const IDot11AdHocSecuritySettings,
            pAuth: *DOT11_ADHOC_AUTH_ALGORITHM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDot11CipherAlgorithm: fn(
            self: *const IDot11AdHocSecuritySettings,
            pCipher: *DOT11_ADHOC_CIPHER_ALGORITHM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocSecuritySettings_GetDot11AuthAlgorithm(self: *const T, pAuth: *DOT11_ADHOC_AUTH_ALGORITHM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocSecuritySettings.VTable, self.vtable).GetDot11AuthAlgorithm(@ptrCast(*const IDot11AdHocSecuritySettings, self), pAuth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocSecuritySettings_GetDot11CipherAlgorithm(self: *const T, pCipher: *DOT11_ADHOC_CIPHER_ALGORITHM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocSecuritySettings.VTable, self.vtable).GetDot11CipherAlgorithm(@ptrCast(*const IDot11AdHocSecuritySettings, self), pCipher);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDot11AdHocInterfaceNotificationSink_Value = @import("../zig.zig").Guid.initString("8F10CC2F-CF0D-42A0-ACBE-E2DE7007384D");
pub const IID_IDot11AdHocInterfaceNotificationSink = &IID_IDot11AdHocInterfaceNotificationSink_Value;
pub const IDot11AdHocInterfaceNotificationSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnConnectionStatusChange: fn(
            self: *const IDot11AdHocInterfaceNotificationSink,
            eStatus: DOT11_ADHOC_NETWORK_CONNECTION_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDot11AdHocInterfaceNotificationSink_OnConnectionStatusChange(self: *const T, eStatus: DOT11_ADHOC_NETWORK_CONNECTION_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDot11AdHocInterfaceNotificationSink.VTable, self.vtable).OnConnectionStatusChange(@ptrCast(*const IDot11AdHocInterfaceNotificationSink, self), eStatus);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (61)
//--------------------------------------------------------------------------------
pub extern "wlanapi" fn WlanOpenHandle(
    dwClientVersion: u32,
    pReserved: *c_void,
    pdwNegotiatedVersion: *u32,
    phClientHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanCloseHandle(
    hClientHandle: HANDLE,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanEnumInterfaces(
    hClientHandle: HANDLE,
    pReserved: *c_void,
    ppInterfaceList: **WLAN_INTERFACE_INFO_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanSetAutoConfigParameter(
    hClientHandle: HANDLE,
    OpCode: WLAN_AUTOCONF_OPCODE,
    dwDataSize: u32,
    pData: [*]const u8,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanQueryAutoConfigParameter(
    hClientHandle: HANDLE,
    OpCode: WLAN_AUTOCONF_OPCODE,
    pReserved: *c_void,
    pdwDataSize: *u32,
    ppData: **c_void,
    pWlanOpcodeValueType: ?*WLAN_OPCODE_VALUE_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanGetInterfaceCapability(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    pReserved: *c_void,
    ppCapability: **WLAN_INTERFACE_CAPABILITY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanSetInterface(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    OpCode: WLAN_INTF_OPCODE,
    dwDataSize: u32,
    pData: [*]const u8,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanQueryInterface(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    OpCode: WLAN_INTF_OPCODE,
    pReserved: *c_void,
    pdwDataSize: *u32,
    ppData: **c_void,
    pWlanOpcodeValueType: ?*WLAN_OPCODE_VALUE_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanIhvControl(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    Type: WLAN_IHV_CONTROL_TYPE,
    dwInBufferSize: u32,
    pInBuffer: [*]u8,
    dwOutBufferSize: u32,
    pOutBuffer: ?[*]u8,
    pdwBytesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanScan(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    pDot11Ssid: ?*const DOT11_SSID,
    pIeData: ?*const WLAN_RAW_DATA,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanGetAvailableNetworkList(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    dwFlags: u32,
    pReserved: *c_void,
    ppAvailableNetworkList: **WLAN_AVAILABLE_NETWORK_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanGetAvailableNetworkList2(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    dwFlags: u32,
    pReserved: *c_void,
    ppAvailableNetworkList: **WLAN_AVAILABLE_NETWORK_LIST_V2,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanGetNetworkBssList(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    pDot11Ssid: ?*const DOT11_SSID,
    dot11BssType: DOT11_BSS_TYPE,
    bSecurityEnabled: BOOL,
    pReserved: *c_void,
    ppWlanBssList: **WLAN_BSS_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanConnect(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    pConnectionParameters: *const WLAN_CONNECTION_PARAMETERS,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanConnect2(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    pConnectionParameters: *const WLAN_CONNECTION_PARAMETERS_V2,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanDisconnect(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanRegisterNotification(
    hClientHandle: HANDLE,
    dwNotifSource: u32,
    bIgnoreDuplicate: BOOL,
    funcCallback: ?WLAN_NOTIFICATION_CALLBACK,
    pCallbackContext: ?*c_void,
    pReserved: *c_void,
    pdwPrevNotifSource: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanGetProfile(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    strProfileName: [*:0]const u16,
    pReserved: *c_void,
    pstrProfileXml: *PWSTR,
    pdwFlags: ?*u32,
    pdwGrantedAccess: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanSetProfileEapUserData(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    strProfileName: [*:0]const u16,
    eapType: EAP_METHOD_TYPE,
    dwFlags: u32,
    dwEapUserDataSize: u32,
    pbEapUserData: ?[*:0]const u8,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanSetProfileEapXmlUserData(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    strProfileName: [*:0]const u16,
    dwFlags: u32,
    strEapXmlUserData: [*:0]const u16,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanSetProfile(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    dwFlags: u32,
    strProfileXml: [*:0]const u16,
    strAllUserProfileSecurity: ?[*:0]const u16,
    bOverwrite: BOOL,
    pReserved: *c_void,
    pdwReasonCode: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanDeleteProfile(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    strProfileName: [*:0]const u16,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanRenameProfile(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    strOldProfileName: [*:0]const u16,
    strNewProfileName: [*:0]const u16,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanGetProfileList(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    pReserved: *c_void,
    ppProfileList: **WLAN_PROFILE_INFO_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanSetProfileList(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    dwItems: u32,
    strProfileNames: [*]PWSTR,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanSetProfilePosition(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    strProfileName: [*:0]const u16,
    dwPosition: u32,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanSetProfileCustomUserData(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    strProfileName: [*:0]const u16,
    dwDataSize: u32,
    pData: [*:0]const u8,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanGetProfileCustomUserData(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    strProfileName: [*:0]const u16,
    pReserved: *c_void,
    pdwDataSize: *u32,
    ppData: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanSetFilterList(
    hClientHandle: HANDLE,
    wlanFilterListType: WLAN_FILTER_LIST_TYPE,
    pNetworkList: ?*const DOT11_NETWORK_LIST,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanGetFilterList(
    hClientHandle: HANDLE,
    wlanFilterListType: WLAN_FILTER_LIST_TYPE,
    pReserved: *c_void,
    ppNetworkList: **DOT11_NETWORK_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanSetPsdIEDataList(
    hClientHandle: HANDLE,
    strFormat: ?[*:0]const u16,
    pPsdIEDataList: ?*const WLAN_RAW_DATA_LIST,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanSaveTemporaryProfile(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    strProfileName: [*:0]const u16,
    strAllUserProfileSecurity: ?[*:0]const u16,
    dwFlags: u32,
    bOverWrite: BOOL,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanDeviceServiceCommand(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    pDeviceServiceGuid: *Guid,
    dwOpCode: u32,
    dwInBufferSize: u32,
    pInBuffer: ?[*]u8,
    dwOutBufferSize: u32,
    pOutBuffer: ?[*]u8,
    pdwBytesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanGetSupportedDeviceServices(
    hClientHandle: HANDLE,
    pInterfaceGuid: *const Guid,
    ppDevSvcGuidList: **WLAN_DEVICE_SERVICE_GUID_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanRegisterDeviceServiceNotification(
    hClientHandle: HANDLE,
    pDevSvcGuidList: ?*const WLAN_DEVICE_SERVICE_GUID_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanExtractPsdIEDataList(
    hClientHandle: HANDLE,
    dwIeDataSize: u32,
    pRawIeData: [*:0]const u8,
    strFormat: [*:0]const u16,
    pReserved: *c_void,
    ppPsdIEDataList: **WLAN_RAW_DATA_LIST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanReasonCodeToString(
    dwReasonCode: u32,
    dwBufferSize: u32,
    pStringBuffer: [*]u16,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanAllocateMemory(
    dwMemorySize: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "wlanapi" fn WlanFreeMemory(
    pMemory: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "wlanapi" fn WlanSetSecuritySettings(
    hClientHandle: HANDLE,
    SecurableObject: WLAN_SECURABLE_OBJECT,
    strModifiedSDDL: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanGetSecuritySettings(
    hClientHandle: HANDLE,
    SecurableObject: WLAN_SECURABLE_OBJECT,
    pValueType: ?*WLAN_OPCODE_VALUE_TYPE,
    pstrCurrentSDDL: *PWSTR,
    pdwGrantedAccess: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanUIEditProfile(
    dwClientVersion: u32,
    wstrProfileName: [*:0]const u16,
    pInterfaceGuid: *Guid,
    hWnd: HWND,
    wlStartPage: WL_DISPLAY_PAGES,
    pReserved: *c_void,
    pWlanReasonCode: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanHostedNetworkStartUsing(
    hClientHandle: HANDLE,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanHostedNetworkStopUsing(
    hClientHandle: HANDLE,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanHostedNetworkForceStart(
    hClientHandle: HANDLE,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanHostedNetworkForceStop(
    hClientHandle: HANDLE,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanHostedNetworkQueryProperty(
    hClientHandle: HANDLE,
    OpCode: WLAN_HOSTED_NETWORK_OPCODE,
    pdwDataSize: *u32,
    ppvData: **c_void,
    pWlanOpcodeValueType: *WLAN_OPCODE_VALUE_TYPE,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanHostedNetworkSetProperty(
    hClientHandle: HANDLE,
    OpCode: WLAN_HOSTED_NETWORK_OPCODE,
    dwDataSize: u32,
    pvData: [*]u8,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanHostedNetworkInitSettings(
    hClientHandle: HANDLE,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanHostedNetworkRefreshSecuritySettings(
    hClientHandle: HANDLE,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanHostedNetworkQueryStatus(
    hClientHandle: HANDLE,
    ppWlanHostedNetworkStatus: **WLAN_HOSTED_NETWORK_STATUS,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanHostedNetworkSetSecondaryKey(
    hClientHandle: HANDLE,
    dwKeyLength: u32,
    pucKeyData: [*:0]u8,
    bIsPassPhrase: BOOL,
    bPersistent: BOOL,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanHostedNetworkQuerySecondaryKey(
    hClientHandle: HANDLE,
    pdwKeyLength: *u32,
    ppucKeyData: **u8,
    pbIsPassPhrase: *BOOL,
    pbPersistent: *BOOL,
    pFailReason: ?*WLAN_HOSTED_NETWORK_REASON,
    pvReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WlanRegisterVirtualStationNotification(
    hClientHandle: HANDLE,
    bRegister: BOOL,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WFDOpenHandle(
    dwClientVersion: u32,
    pdwNegotiatedVersion: *u32,
    phClientHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WFDCloseHandle(
    hClientHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WFDStartOpenSession(
    hClientHandle: HANDLE,
    pDeviceAddress: **u8,
    pvContext: ?*c_void,
    pfnCallback: WFD_OPEN_SESSION_COMPLETE_CALLBACK,
    phSessionHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WFDCancelOpenSession(
    hSessionHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WFDOpenLegacySession(
    hClientHandle: HANDLE,
    pLegacyMacAddress: **u8,
    phSessionHandle: *HANDLE,
    pGuidSessionInterface: *Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WFDCloseSession(
    hSessionHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wlanapi" fn WFDUpdateDeviceVisibility(
    pDeviceAddress: **u8,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (15)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const NET_LUID_LH = @import("ip_helper.zig").NET_LUID_LH;
const PWSTR = @import("system_services.zig").PWSTR;
const IUnknown = @import("com.zig").IUnknown;
const L2_NOTIFICATION_DATA = @import("network_drivers.zig").L2_NOTIFICATION_DATA;
const HRESULT = @import("com.zig").HRESULT;
const NET_IF_OPER_STATUS = @import("network_drivers.zig").NET_IF_OPER_STATUS;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const NET_IF_MEDIA_CONNECT_STATE = @import("network_drivers.zig").NET_IF_MEDIA_CONNECT_STATE;
const LARGE_INTEGER = @import("system_services.zig").LARGE_INTEGER;
const EAP_METHOD_TYPE = @import("extensible_authentication_protocol.zig").EAP_METHOD_TYPE;
const NET_IF_DIRECTION_TYPE = @import("network_drivers.zig").NET_IF_DIRECTION_TYPE;
const HANDLE = @import("system_services.zig").HANDLE;
const NET_IF_MEDIA_DUPLEX_STATE = @import("network_drivers.zig").NET_IF_MEDIA_DUPLEX_STATE;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = WLAN_NOTIFICATION_CALLBACK;
    _ = WFD_OPEN_SESSION_COMPLETE_CALLBACK;

    const constant_export_count = 0;
    const type_export_count = 455;
    const enum_value_export_count = 631;
    const com_iface_id_export_count = 10;
    const com_class_id_export_count = 1;
    const func_export_count = 61;
    const unicode_alias_count = 0;
    const import_count = 15;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (6)
//--------------------------------------------------------------------------------
pub const XINPUT_GAMEPAD = extern struct {
    wButtons: u16,
    bLeftTrigger: u8,
    bRightTrigger: u8,
    sThumbLX: i16,
    sThumbLY: i16,
    sThumbRX: i16,
    sThumbRY: i16,
};

pub const XINPUT_STATE = extern struct {
    dwPacketNumber: u32,
    Gamepad: XINPUT_GAMEPAD,
};

pub const XINPUT_VIBRATION = extern struct {
    wLeftMotorSpeed: u16,
    wRightMotorSpeed: u16,
};

pub const XINPUT_CAPABILITIES = extern struct {
    Type: u8,
    SubType: u8,
    Flags: u16,
    Gamepad: XINPUT_GAMEPAD,
    Vibration: XINPUT_VIBRATION,
};

pub const XINPUT_BATTERY_INFORMATION = extern struct {
    BatteryType: u8,
    BatteryLevel: u8,
};

pub const XINPUT_KEYSTROKE = extern struct {
    VirtualKey: u16,
    Unicode: u16,
    Flags: u16,
    UserIndex: u8,
    HidCode: u8,
};


//--------------------------------------------------------------------------------
// Section: Functions (7)
//--------------------------------------------------------------------------------
pub extern "XINPUTUAP" fn XInputGetState(
    dwUserIndex: u32,
    pState: *XINPUT_STATE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "XINPUTUAP" fn XInputSetState(
    dwUserIndex: u32,
    pVibration: *XINPUT_VIBRATION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "XINPUTUAP" fn XInputGetCapabilities(
    dwUserIndex: u32,
    dwFlags: u32,
    pCapabilities: *XINPUT_CAPABILITIES,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "XINPUTUAP" fn XInputEnable(
    enable: BOOL,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "XINPUTUAP" fn XInputGetAudioDeviceIds(
    dwUserIndex: u32,
    pRenderDeviceId: ?[*:0]u16,
    pRenderCount: ?*u32,
    pCaptureDeviceId: ?[*:0]u16,
    pCaptureCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "XINPUTUAP" fn XInputGetBatteryInformation(
    dwUserIndex: u32,
    devType: u8,
    pBatteryInformation: *XINPUT_BATTERY_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "XINPUTUAP" fn XInputGetKeystroke(
    dwUserIndex: u32,
    dwReserved: u32,
    pKeystroke: *XINPUT_KEYSTROKE,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (1)
//--------------------------------------------------------------------------------
const BOOL = @import("system_services.zig").BOOL;

test {
    const constant_export_count = 0;
    const type_export_count = 6;
    const enum_value_export_count = 0;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 7;
    const unicode_alias_count = 0;
    const import_count = 1;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

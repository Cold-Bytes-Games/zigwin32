//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (83)
//--------------------------------------------------------------------------------
pub const XINPUT_DEVTYPE_GAMEPAD : u32 = 1;
pub const XINPUT_DEVSUBTYPE_GAMEPAD : u32 = 1;
pub const XINPUT_DEVSUBTYPE_UNKNOWN : u32 = 0;
pub const XINPUT_DEVSUBTYPE_WHEEL : u32 = 2;
pub const XINPUT_DEVSUBTYPE_ARCADE_STICK : u32 = 3;
pub const XINPUT_DEVSUBTYPE_FLIGHT_STICK : u32 = 4;
pub const XINPUT_DEVSUBTYPE_DANCE_PAD : u32 = 5;
pub const XINPUT_DEVSUBTYPE_GUITAR : u32 = 6;
pub const XINPUT_DEVSUBTYPE_GUITAR_ALTERNATE : u32 = 7;
pub const XINPUT_DEVSUBTYPE_DRUM_KIT : u32 = 8;
pub const XINPUT_DEVSUBTYPE_GUITAR_BASS : u32 = 11;
pub const XINPUT_DEVSUBTYPE_ARCADE_PAD : u32 = 19;
pub const XINPUT_CAPS_VOICE_SUPPORTED : u32 = 4;
pub const XINPUT_CAPS_FFB_SUPPORTED : u32 = 1;
pub const XINPUT_CAPS_WIRELESS : u32 = 2;
pub const XINPUT_CAPS_PMD_SUPPORTED : u32 = 8;
pub const XINPUT_CAPS_NO_NAVIGATION : u32 = 16;
pub const XINPUT_GAMEPAD_DPAD_UP : u32 = 1;
pub const XINPUT_GAMEPAD_DPAD_DOWN : u32 = 2;
pub const XINPUT_GAMEPAD_DPAD_LEFT : u32 = 4;
pub const XINPUT_GAMEPAD_DPAD_RIGHT : u32 = 8;
pub const XINPUT_GAMEPAD_START : u32 = 16;
pub const XINPUT_GAMEPAD_BACK : u32 = 32;
pub const XINPUT_GAMEPAD_LEFT_THUMB : u32 = 64;
pub const XINPUT_GAMEPAD_RIGHT_THUMB : u32 = 128;
pub const XINPUT_GAMEPAD_LEFT_SHOULDER : u32 = 256;
pub const XINPUT_GAMEPAD_RIGHT_SHOULDER : u32 = 512;
pub const XINPUT_GAMEPAD_A : u32 = 4096;
pub const XINPUT_GAMEPAD_B : u32 = 8192;
pub const XINPUT_GAMEPAD_X : u32 = 16384;
pub const XINPUT_GAMEPAD_Y : u32 = 32768;
pub const XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE : u32 = 7849;
pub const XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE : u32 = 8689;
pub const XINPUT_GAMEPAD_TRIGGER_THRESHOLD : u32 = 30;
pub const XINPUT_FLAG_GAMEPAD : u32 = 1;
pub const BATTERY_DEVTYPE_GAMEPAD : u32 = 0;
pub const BATTERY_DEVTYPE_HEADSET : u32 = 1;
pub const BATTERY_TYPE_DISCONNECTED : u32 = 0;
pub const BATTERY_TYPE_WIRED : u32 = 1;
pub const BATTERY_TYPE_ALKALINE : u32 = 2;
pub const BATTERY_TYPE_NIMH : u32 = 3;
pub const BATTERY_TYPE_UNKNOWN : u32 = 255;
pub const BATTERY_LEVEL_EMPTY : u32 = 0;
pub const BATTERY_LEVEL_LOW : u32 = 1;
pub const BATTERY_LEVEL_MEDIUM : u32 = 2;
pub const BATTERY_LEVEL_FULL : u32 = 3;
pub const XUSER_MAX_COUNT : u32 = 4;
pub const XUSER_INDEX_ANY : u32 = 255;
pub const VK_PAD_A : u32 = 22528;
pub const VK_PAD_B : u32 = 22529;
pub const VK_PAD_X : u32 = 22530;
pub const VK_PAD_Y : u32 = 22531;
pub const VK_PAD_RSHOULDER : u32 = 22532;
pub const VK_PAD_LSHOULDER : u32 = 22533;
pub const VK_PAD_LTRIGGER : u32 = 22534;
pub const VK_PAD_RTRIGGER : u32 = 22535;
pub const VK_PAD_DPAD_UP : u32 = 22544;
pub const VK_PAD_DPAD_DOWN : u32 = 22545;
pub const VK_PAD_DPAD_LEFT : u32 = 22546;
pub const VK_PAD_DPAD_RIGHT : u32 = 22547;
pub const VK_PAD_START : u32 = 22548;
pub const VK_PAD_BACK : u32 = 22549;
pub const VK_PAD_LTHUMB_PRESS : u32 = 22550;
pub const VK_PAD_RTHUMB_PRESS : u32 = 22551;
pub const VK_PAD_LTHUMB_UP : u32 = 22560;
pub const VK_PAD_LTHUMB_DOWN : u32 = 22561;
pub const VK_PAD_LTHUMB_RIGHT : u32 = 22562;
pub const VK_PAD_LTHUMB_LEFT : u32 = 22563;
pub const VK_PAD_LTHUMB_UPLEFT : u32 = 22564;
pub const VK_PAD_LTHUMB_UPRIGHT : u32 = 22565;
pub const VK_PAD_LTHUMB_DOWNRIGHT : u32 = 22566;
pub const VK_PAD_LTHUMB_DOWNLEFT : u32 = 22567;
pub const VK_PAD_RTHUMB_UP : u32 = 22576;
pub const VK_PAD_RTHUMB_DOWN : u32 = 22577;
pub const VK_PAD_RTHUMB_RIGHT : u32 = 22578;
pub const VK_PAD_RTHUMB_LEFT : u32 = 22579;
pub const VK_PAD_RTHUMB_UPLEFT : u32 = 22580;
pub const VK_PAD_RTHUMB_UPRIGHT : u32 = 22581;
pub const VK_PAD_RTHUMB_DOWNRIGHT : u32 = 22582;
pub const VK_PAD_RTHUMB_DOWNLEFT : u32 = 22583;
pub const XINPUT_KEYSTROKE_KEYDOWN : u32 = 1;
pub const XINPUT_KEYSTROKE_KEYUP : u32 = 2;
pub const XINPUT_KEYSTROKE_REPEAT : u32 = 4;

//--------------------------------------------------------------------------------
// Section: Types (6)
//--------------------------------------------------------------------------------
pub const XINPUT_GAMEPAD = extern struct {
    wButtons: u16,
    bLeftTrigger: u8,
    bRightTrigger: u8,
    sThumbLX: i16,
    sThumbLY: i16,
    sThumbRX: i16,
    sThumbRY: i16,
};

pub const XINPUT_STATE = extern struct {
    dwPacketNumber: u32,
    Gamepad: XINPUT_GAMEPAD,
};

pub const XINPUT_VIBRATION = extern struct {
    wLeftMotorSpeed: u16,
    wRightMotorSpeed: u16,
};

pub const XINPUT_CAPABILITIES = extern struct {
    Type: u8,
    SubType: u8,
    Flags: u16,
    Gamepad: XINPUT_GAMEPAD,
    Vibration: XINPUT_VIBRATION,
};

pub const XINPUT_BATTERY_INFORMATION = extern struct {
    BatteryType: u8,
    BatteryLevel: u8,
};

pub const XINPUT_KEYSTROKE = extern struct {
    VirtualKey: u16,
    Unicode: u16,
    Flags: u16,
    UserIndex: u8,
    HidCode: u8,
};


//--------------------------------------------------------------------------------
// Section: Functions (7)
//--------------------------------------------------------------------------------
pub extern "XINPUTUAP" fn XInputGetState(
    dwUserIndex: u32,
    pState: *XINPUT_STATE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "XINPUTUAP" fn XInputSetState(
    dwUserIndex: u32,
    pVibration: *XINPUT_VIBRATION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "XINPUTUAP" fn XInputGetCapabilities(
    dwUserIndex: u32,
    dwFlags: u32,
    pCapabilities: *XINPUT_CAPABILITIES,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "XINPUTUAP" fn XInputEnable(
    enable: BOOL,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "XINPUTUAP" fn XInputGetAudioDeviceIds(
    dwUserIndex: u32,
    pRenderDeviceId: ?[*:0]u16,
    pRenderCount: ?*u32,
    pCaptureDeviceId: ?[*:0]u16,
    pCaptureCount: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "XINPUTUAP" fn XInputGetBatteryInformation(
    dwUserIndex: u32,
    devType: u8,
    pBatteryInformation: *XINPUT_BATTERY_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "XINPUTUAP" fn XInputGetKeystroke(
    dwUserIndex: u32,
    dwReserved: u32,
    pKeystroke: *XINPUT_KEYSTROKE,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (1)
//--------------------------------------------------------------------------------
const BOOL = @import("system_services.zig").BOOL;

test {
    const constant_export_count = 83;
    const type_export_count = 6;
    const enum_value_export_count = 0;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 7;
    const unicode_alias_count = 0;
    const import_count = 1;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

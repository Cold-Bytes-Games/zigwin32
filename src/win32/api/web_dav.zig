//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (7)
//--------------------------------------------------------------------------------
pub const DAV_AUTHN_SCHEME_BASIC = @as(u32, 1);
pub const DAV_AUTHN_SCHEME_NTLM = @as(u32, 2);
pub const DAV_AUTHN_SCHEME_PASSPORT = @as(u32, 4);
pub const DAV_AUTHN_SCHEME_DIGEST = @as(u32, 8);
pub const DAV_AUTHN_SCHEME_NEGOTIATE = @as(u32, 16);
pub const DAV_AUTHN_SCHEME_CERT = @as(u32, 65536);
pub const DAV_AUTHN_SCHEME_FBA = @as(u32, 1048576);

//--------------------------------------------------------------------------------
// Section: Types (6)
//--------------------------------------------------------------------------------
pub const DAV_CALLBACK_AUTH_BLOB = extern struct {
    pBuffer: *c_void,
    ulSize: u32,
    ulType: u32,
};

pub const DAV_CALLBACK_AUTH_UNP = extern struct {
    pszUserName: PWSTR,
    ulUserNameLength: u32,
    pszPassword: PWSTR,
    ulPasswordLength: u32,
};

pub const DAV_CALLBACK_CRED = extern struct {
    AuthBlob: DAV_CALLBACK_AUTH_BLOB,
    UNPBlob: DAV_CALLBACK_AUTH_UNP,
    bAuthBlobValid: BOOL,
    bSave: BOOL,
};

pub const AUTHNEXTSTEP = extern enum(i32) {
    DefaultBehavior = 0,
    RetryRequest = 1,
    CancelRequest = 2,
};
pub const DefaultBehavior = AUTHNEXTSTEP.DefaultBehavior;
pub const RetryRequest = AUTHNEXTSTEP.RetryRequest;
pub const CancelRequest = AUTHNEXTSTEP.CancelRequest;

pub const PFNDAVAUTHCALLBACK_FREECRED = fn(
    pbuffer: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFNDAVAUTHCALLBACK = fn(
    lpwzServerName: PWSTR,
    lpwzRemoteName: PWSTR,
    dwAuthScheme: u32,
    dwFlags: u32,
    pCallbackCred: *DAV_CALLBACK_CRED,
    NextStep: *AUTHNEXTSTEP,
    pFreeCred: *PFNDAVAUTHCALLBACK_FREECRED,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Functions (11)
//--------------------------------------------------------------------------------
pub extern "NETAPI32" fn DavAddConnection(
    ConnectionHandle: *HANDLE,
    RemoteName: [*:0]const u16,
    UserName: ?[*:0]const u16,
    Password: ?[*:0]const u16,
    ClientCert: [*:0]u8,
    CertSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NETAPI32" fn DavDeleteConnection(
    ConnectionHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NETAPI32" fn DavGetUNCFromHTTPPath(
    Url: [*:0]const u16,
    UncPath: ?[*:0]u16,
    lpSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NETAPI32" fn DavGetHTTPFromUNCPath(
    UncPath: [*:0]const u16,
    Url: ?[*:0]u16,
    lpSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "davclnt" fn DavGetTheLockOwnerOfTheFile(
    FileName: [*:0]const u16,
    LockOwnerName: ?[*:0]u16,
    LockOwnerNameLengthInBytes: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NETAPI32" fn DavGetExtendedError(
    hFile: HANDLE,
    ExtError: *u32,
    ExtErrorString: [*:0]u16,
    cChSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NETAPI32" fn DavFlushFile(
    hFile: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "davclnt" fn DavInvalidateCache(
    URLName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "davclnt" fn DavCancelConnectionsToServer(
    lpName: PWSTR,
    fForce: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "davclnt" fn DavRegisterAuthCallback(
    CallBack: PFNDAVAUTHCALLBACK,
    Version: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "davclnt" fn DavUnregisterAuthCallback(
    hCallback: u32,
) callconv(@import("std").os.windows.WINAPI) void;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (3)
//--------------------------------------------------------------------------------
const PWSTR = @import("system_services.zig").PWSTR;
const HANDLE = @import("system_services.zig").HANDLE;
const BOOL = @import("system_services.zig").BOOL;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = PFNDAVAUTHCALLBACK_FREECRED;
    _ = PFNDAVAUTHCALLBACK;

    const constant_export_count = 7;
    const type_export_count = 6;
    const enum_value_export_count = 3;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 11;
    const unicode_alias_count = 0;
    const import_count = 3;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

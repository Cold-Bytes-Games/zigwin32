//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (6)
//--------------------------------------------------------------------------------
pub const MDM_REGISTRATION_FACILITY_CODE : u32 = 25;
pub const DEVICE_ENROLLER_FACILITY_CODE : u32 = 24;
pub const DEVICEREGISTRATIONTYPE_MDM_ONLY : u32 = 0;
pub const DEVICEREGISTRATIONTYPE_MAM : u32 = 5;
pub const DEVICEREGISTRATIONTYPE_MDM_DEVICEWIDE_WITH_AAD : u32 = 6;
pub const DEVICEREGISTRATIONTYPE_MDM_USERSPECIFIC_WITH_AAD : u32 = 13;

//--------------------------------------------------------------------------------
// Section: Types (3)
//--------------------------------------------------------------------------------
pub const MANAGEMENT_SERVICE_INFO = extern struct {
    pszMDMServiceUri: PWSTR,
    pszAuthenticationUri: PWSTR,
};

pub const MANAGEMENT_REGISTRATION_INFO = extern struct {
    fDeviceRegisteredWithManagement: BOOL,
    dwDeviceRegistionKind: u32,
    pszUPN: PWSTR,
    pszMDMServiceUri: PWSTR,
};

pub const REGISTRATION_INFORMATION_CLASS = extern enum(i32) {
    DeviceRegistrationBasicInfo = 1,
    MaxDeviceInfoClass = 2,
};
pub const DeviceRegistrationBasicInfo = REGISTRATION_INFORMATION_CLASS.DeviceRegistrationBasicInfo;
pub const MaxDeviceInfoClass = REGISTRATION_INFORMATION_CLASS.MaxDeviceInfoClass;


//--------------------------------------------------------------------------------
// Section: Functions (12)
//--------------------------------------------------------------------------------
pub extern "MDMRegistration" fn GetDeviceRegistrationInfo(
    DeviceInformationClass: REGISTRATION_INFORMATION_CLASS,
    ppDeviceRegistrationInfo: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MDMRegistration" fn IsDeviceRegisteredWithManagement(
    pfIsDeviceRegisteredWithManagement: *BOOL,
    cchUPN: u32,
    pszUPN: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MDMRegistration" fn IsManagementRegistrationAllowed(
    pfIsManagementRegistrationAllowed: *BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MDMRegistration" fn IsMdmUxWithoutAadAllowed(
    isEnrollmentAllowed: *BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MDMRegistration" fn SetManagedExternally(
    IsManagedExternally: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MDMRegistration" fn DiscoverManagementService(
    pszUPN: [*:0]const u16,
    ppMgmtInfo: **MANAGEMENT_SERVICE_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MDMRegistration" fn RegisterDeviceWithManagementUsingAADCredentials(
    UserToken: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MDMRegistration" fn RegisterDeviceWithManagementUsingAADDeviceCredentials(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MDMRegistration" fn RegisterDeviceWithManagement(
    pszUPN: [*:0]const u16,
    ppszMDMServiceUri: [*:0]const u16,
    ppzsAccessToken: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MDMRegistration" fn UnregisterDeviceWithManagement(
    enrollmentID: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MDMRegistration" fn GetManagementAppHyperlink(
    cchHyperlink: u32,
    pszHyperlink: [*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MDMRegistration" fn DiscoverManagementServiceEx(
    pszUPN: [*:0]const u16,
    pszDiscoveryServiceCandidate: [*:0]const u16,
    ppMgmtInfo: **MANAGEMENT_SERVICE_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (4)
//--------------------------------------------------------------------------------
const PWSTR = @import("system_services.zig").PWSTR;
const HANDLE = @import("system_services.zig").HANDLE;
const BOOL = @import("system_services.zig").BOOL;
const HRESULT = @import("com.zig").HRESULT;

test {
    const constant_export_count = 6;
    const type_export_count = 3;
    const enum_value_export_count = 2;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 12;
    const unicode_alias_count = 0;
    const import_count = 4;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

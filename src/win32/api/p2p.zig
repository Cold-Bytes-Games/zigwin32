//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (109)
//--------------------------------------------------------------------------------
pub const PNRP_SCOPE = extern enum(i32) {
    ANY = 0,
    PNRP_GLOBAL_SCOPE = 1,
    PNRP_SITE_LOCAL_SCOPE = 2,
    PNRP_LINK_LOCAL_SCOPE = 3,
};
pub const PNRP_SCOPE_ANY = PNRP_SCOPE.ANY;
pub const PNRP_GLOBAL_SCOPE = PNRP_SCOPE.PNRP_GLOBAL_SCOPE;
pub const PNRP_SITE_LOCAL_SCOPE = PNRP_SCOPE.PNRP_SITE_LOCAL_SCOPE;
pub const PNRP_LINK_LOCAL_SCOPE = PNRP_SCOPE.PNRP_LINK_LOCAL_SCOPE;

pub const PNRP_CLOUD_STATE = extern enum(i32) {
    VIRTUAL = 0,
    SYNCHRONISING = 1,
    ACTIVE = 2,
    DEAD = 3,
    DISABLED = 4,
    NO_NET = 5,
    ALONE = 6,
};
pub const PNRP_CLOUD_STATE_VIRTUAL = PNRP_CLOUD_STATE.VIRTUAL;
pub const PNRP_CLOUD_STATE_SYNCHRONISING = PNRP_CLOUD_STATE.SYNCHRONISING;
pub const PNRP_CLOUD_STATE_ACTIVE = PNRP_CLOUD_STATE.ACTIVE;
pub const PNRP_CLOUD_STATE_DEAD = PNRP_CLOUD_STATE.DEAD;
pub const PNRP_CLOUD_STATE_DISABLED = PNRP_CLOUD_STATE.DISABLED;
pub const PNRP_CLOUD_STATE_NO_NET = PNRP_CLOUD_STATE.NO_NET;
pub const PNRP_CLOUD_STATE_ALONE = PNRP_CLOUD_STATE.ALONE;

pub const PNRP_CLOUD_FLAGS = extern enum(i32) {
    PNRP_CLOUD_NO_FLAGS = 0,
    PNRP_CLOUD_NAME_LOCAL = 1,
    PNRP_CLOUD_RESOLVE_ONLY = 2,
    PNRP_CLOUD_FULL_PARTICIPANT = 4,
};
pub const PNRP_CLOUD_NO_FLAGS = PNRP_CLOUD_FLAGS.PNRP_CLOUD_NO_FLAGS;
pub const PNRP_CLOUD_NAME_LOCAL = PNRP_CLOUD_FLAGS.PNRP_CLOUD_NAME_LOCAL;
pub const PNRP_CLOUD_RESOLVE_ONLY = PNRP_CLOUD_FLAGS.PNRP_CLOUD_RESOLVE_ONLY;
pub const PNRP_CLOUD_FULL_PARTICIPANT = PNRP_CLOUD_FLAGS.PNRP_CLOUD_FULL_PARTICIPANT;

pub const PNRP_REGISTERED_ID_STATE = extern enum(i32) {
    OK = 1,
    PROBLEM = 2,
};
pub const PNRP_REGISTERED_ID_STATE_OK = PNRP_REGISTERED_ID_STATE.OK;
pub const PNRP_REGISTERED_ID_STATE_PROBLEM = PNRP_REGISTERED_ID_STATE.PROBLEM;

pub const PNRP_RESOLVE_CRITERIA = extern enum(i32) {
    DEFAULT = 0,
    REMOTE_PEER_NAME = 1,
    NEAREST_REMOTE_PEER_NAME = 2,
    NON_CURRENT_PROCESS_PEER_NAME = 3,
    NEAREST_NON_CURRENT_PROCESS_PEER_NAME = 4,
    ANY_PEER_NAME = 5,
    NEAREST_PEER_NAME = 6,
};
pub const PNRP_RESOLVE_CRITERIA_DEFAULT = PNRP_RESOLVE_CRITERIA.DEFAULT;
pub const PNRP_RESOLVE_CRITERIA_REMOTE_PEER_NAME = PNRP_RESOLVE_CRITERIA.REMOTE_PEER_NAME;
pub const PNRP_RESOLVE_CRITERIA_NEAREST_REMOTE_PEER_NAME = PNRP_RESOLVE_CRITERIA.NEAREST_REMOTE_PEER_NAME;
pub const PNRP_RESOLVE_CRITERIA_NON_CURRENT_PROCESS_PEER_NAME = PNRP_RESOLVE_CRITERIA.NON_CURRENT_PROCESS_PEER_NAME;
pub const PNRP_RESOLVE_CRITERIA_NEAREST_NON_CURRENT_PROCESS_PEER_NAME = PNRP_RESOLVE_CRITERIA.NEAREST_NON_CURRENT_PROCESS_PEER_NAME;
pub const PNRP_RESOLVE_CRITERIA_ANY_PEER_NAME = PNRP_RESOLVE_CRITERIA.ANY_PEER_NAME;
pub const PNRP_RESOLVE_CRITERIA_NEAREST_PEER_NAME = PNRP_RESOLVE_CRITERIA.NEAREST_PEER_NAME;

pub const PNRP_CLOUD_ID = extern struct {
    AddressFamily: i32,
    Scope: PNRP_SCOPE,
    ScopeId: u32,
};

pub const PNRP_EXTENDED_PAYLOAD_TYPE = extern enum(i32) {
    NONE = 0,
    BINARY = 1,
    STRING = 2,
};
pub const PNRP_EXTENDED_PAYLOAD_TYPE_NONE = PNRP_EXTENDED_PAYLOAD_TYPE.NONE;
pub const PNRP_EXTENDED_PAYLOAD_TYPE_BINARY = PNRP_EXTENDED_PAYLOAD_TYPE.BINARY;
pub const PNRP_EXTENDED_PAYLOAD_TYPE_STRING = PNRP_EXTENDED_PAYLOAD_TYPE.STRING;

pub const PNRPINFO_V1 = extern struct {
    dwSize: u32,
    lpwszIdentity: PWSTR,
    nMaxResolve: u32,
    dwTimeout: u32,
    dwLifetime: u32,
    enResolveCriteria: PNRP_RESOLVE_CRITERIA,
    dwFlags: u32,
    saHint: SOCKET_ADDRESS,
    enNameState: PNRP_REGISTERED_ID_STATE,
};

pub const PNRPINFO_V2 = extern struct {
    dwSize: u32,
    lpwszIdentity: PWSTR,
    nMaxResolve: u32,
    dwTimeout: u32,
    dwLifetime: u32,
    enResolveCriteria: PNRP_RESOLVE_CRITERIA,
    dwFlags: u32,
    saHint: SOCKET_ADDRESS,
    enNameState: PNRP_REGISTERED_ID_STATE,
    enExtendedPayloadType: PNRP_EXTENDED_PAYLOAD_TYPE,
    Anonymous: PNRPINFO_V2._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PNRPCLOUDINFO = extern struct {
    dwSize: u32,
    Cloud: PNRP_CLOUD_ID,
    enCloudState: PNRP_CLOUD_STATE,
    enCloudFlags: PNRP_CLOUD_FLAGS,
};

pub const PEER_RECORD_CHANGE_TYPE = extern enum(i32) {
    PEER_RECORD_ADDED = 1,
    PEER_RECORD_UPDATED = 2,
    PEER_RECORD_DELETED = 3,
    PEER_RECORD_EXPIRED = 4,
};
pub const PEER_RECORD_ADDED = PEER_RECORD_CHANGE_TYPE.PEER_RECORD_ADDED;
pub const PEER_RECORD_UPDATED = PEER_RECORD_CHANGE_TYPE.PEER_RECORD_UPDATED;
pub const PEER_RECORD_DELETED = PEER_RECORD_CHANGE_TYPE.PEER_RECORD_DELETED;
pub const PEER_RECORD_EXPIRED = PEER_RECORD_CHANGE_TYPE.PEER_RECORD_EXPIRED;

pub const PEER_CONNECTION_STATUS = extern enum(i32) {
    PEER_CONNECTED = 1,
    PEER_DISCONNECTED = 2,
    PEER_CONNECTION_FAILED = 3,
};
pub const PEER_CONNECTED = PEER_CONNECTION_STATUS.PEER_CONNECTED;
pub const PEER_DISCONNECTED = PEER_CONNECTION_STATUS.PEER_DISCONNECTED;
pub const PEER_CONNECTION_FAILED = PEER_CONNECTION_STATUS.PEER_CONNECTION_FAILED;

pub const PEER_CONNECTION_FLAGS = extern enum(i32) {
    PEER_CONNECTION_NEIGHBOR = 1,
    PEER_CONNECTION_DIRECT = 2,
};
pub const PEER_CONNECTION_NEIGHBOR = PEER_CONNECTION_FLAGS.PEER_CONNECTION_NEIGHBOR;
pub const PEER_CONNECTION_DIRECT = PEER_CONNECTION_FLAGS.PEER_CONNECTION_DIRECT;

pub const PEER_RECORD_FLAGS = extern enum(i32) {
    PEER_RECORD_FLAG_AUTOREFRESH = 1,
    PEER_RECORD_FLAG_DELETED = 2,
};
pub const PEER_RECORD_FLAG_AUTOREFRESH = PEER_RECORD_FLAGS.PEER_RECORD_FLAG_AUTOREFRESH;
pub const PEER_RECORD_FLAG_DELETED = PEER_RECORD_FLAGS.PEER_RECORD_FLAG_DELETED;

pub const PEER_VERSION_DATA = extern struct {
    wVersion: u16,
    wHighestVersion: u16,
};

pub const PEER_DATA = extern struct {
    cbData: u32,
    pbData: *u8,
};

pub const PEER_RECORD = extern struct {
    dwSize: u32,
    type: Guid,
    id: Guid,
    dwVersion: u32,
    dwFlags: u32,
    pwzCreatorId: PWSTR,
    pwzModifiedById: PWSTR,
    pwzAttributes: PWSTR,
    ftCreation: FILETIME,
    ftExpiration: FILETIME,
    ftLastModified: FILETIME,
    securityData: PEER_DATA,
    data: PEER_DATA,
};

pub const PEER_ADDRESS = extern struct {
    dwSize: u32,
    sin6: SOCKADDR_IN6_LH,
};

pub const PEER_CONNECTION_INFO = extern struct {
    dwSize: u32,
    dwFlags: u32,
    ullConnectionId: u64,
    ullNodeId: u64,
    pwzPeerId: PWSTR,
    address: PEER_ADDRESS,
};

pub const PEER_EVENT_INCOMING_DATA = extern struct {
    dwSize: u32,
    ullConnectionId: u64,
    type: Guid,
    data: PEER_DATA,
};

pub const PEER_EVENT_RECORD_CHANGE_DATA = extern struct {
    dwSize: u32,
    changeType: PEER_RECORD_CHANGE_TYPE,
    recordId: Guid,
    recordType: Guid,
};

pub const PEER_EVENT_CONNECTION_CHANGE_DATA = extern struct {
    dwSize: u32,
    status: PEER_CONNECTION_STATUS,
    ullConnectionId: u64,
    ullNodeId: u64,
    ullNextConnectionId: u64,
    hrConnectionFailedReason: HRESULT,
};

pub const PEER_EVENT_SYNCHRONIZED_DATA = extern struct {
    dwSize: u32,
    recordType: Guid,
};

pub const PEER_GRAPH_EVENT_TYPE = extern enum(i32) {
    PEER_GRAPH_EVENT_STATUS_CHANGED = 1,
    PEER_GRAPH_EVENT_PROPERTY_CHANGED = 2,
    PEER_GRAPH_EVENT_RECORD_CHANGED = 3,
    PEER_GRAPH_EVENT_DIRECT_CONNECTION = 4,
    PEER_GRAPH_EVENT_NEIGHBOR_CONNECTION = 5,
    PEER_GRAPH_EVENT_INCOMING_DATA = 6,
    PEER_GRAPH_EVENT_CONNECTION_REQUIRED = 7,
    PEER_GRAPH_EVENT_NODE_CHANGED = 8,
    PEER_GRAPH_EVENT_SYNCHRONIZED = 9,
};
pub const PEER_GRAPH_EVENT_STATUS_CHANGED = PEER_GRAPH_EVENT_TYPE.PEER_GRAPH_EVENT_STATUS_CHANGED;
pub const PEER_GRAPH_EVENT_PROPERTY_CHANGED = PEER_GRAPH_EVENT_TYPE.PEER_GRAPH_EVENT_PROPERTY_CHANGED;
pub const PEER_GRAPH_EVENT_RECORD_CHANGED = PEER_GRAPH_EVENT_TYPE.PEER_GRAPH_EVENT_RECORD_CHANGED;
pub const PEER_GRAPH_EVENT_DIRECT_CONNECTION = PEER_GRAPH_EVENT_TYPE.PEER_GRAPH_EVENT_DIRECT_CONNECTION;
pub const PEER_GRAPH_EVENT_NEIGHBOR_CONNECTION = PEER_GRAPH_EVENT_TYPE.PEER_GRAPH_EVENT_NEIGHBOR_CONNECTION;
pub const PEER_GRAPH_EVENT_INCOMING_DATA = PEER_GRAPH_EVENT_TYPE.PEER_GRAPH_EVENT_INCOMING_DATA;
pub const PEER_GRAPH_EVENT_CONNECTION_REQUIRED = PEER_GRAPH_EVENT_TYPE.PEER_GRAPH_EVENT_CONNECTION_REQUIRED;
pub const PEER_GRAPH_EVENT_NODE_CHANGED = PEER_GRAPH_EVENT_TYPE.PEER_GRAPH_EVENT_NODE_CHANGED;
pub const PEER_GRAPH_EVENT_SYNCHRONIZED = PEER_GRAPH_EVENT_TYPE.PEER_GRAPH_EVENT_SYNCHRONIZED;

pub const PEER_NODE_CHANGE_TYPE = extern enum(i32) {
    PEER_NODE_CHANGE_CONNECTED = 1,
    PEER_NODE_CHANGE_DISCONNECTED = 2,
    PEER_NODE_CHANGE_UPDATED = 3,
};
pub const PEER_NODE_CHANGE_CONNECTED = PEER_NODE_CHANGE_TYPE.PEER_NODE_CHANGE_CONNECTED;
pub const PEER_NODE_CHANGE_DISCONNECTED = PEER_NODE_CHANGE_TYPE.PEER_NODE_CHANGE_DISCONNECTED;
pub const PEER_NODE_CHANGE_UPDATED = PEER_NODE_CHANGE_TYPE.PEER_NODE_CHANGE_UPDATED;

pub const PEER_GRAPH_STATUS_FLAGS = extern enum(i32) {
    PEER_GRAPH_STATUS_LISTENING = 1,
    PEER_GRAPH_STATUS_HAS_CONNECTIONS = 2,
    PEER_GRAPH_STATUS_SYNCHRONIZED = 4,
};
pub const PEER_GRAPH_STATUS_LISTENING = PEER_GRAPH_STATUS_FLAGS.PEER_GRAPH_STATUS_LISTENING;
pub const PEER_GRAPH_STATUS_HAS_CONNECTIONS = PEER_GRAPH_STATUS_FLAGS.PEER_GRAPH_STATUS_HAS_CONNECTIONS;
pub const PEER_GRAPH_STATUS_SYNCHRONIZED = PEER_GRAPH_STATUS_FLAGS.PEER_GRAPH_STATUS_SYNCHRONIZED;

pub const PEER_GRAPH_PROPERTY_FLAGS = extern enum(i32) {
    PEER_GRAPH_PROPERTY_HEARTBEATS = 1,
    PEER_GRAPH_PROPERTY_DEFER_EXPIRATION = 2,
};
pub const PEER_GRAPH_PROPERTY_HEARTBEATS = PEER_GRAPH_PROPERTY_FLAGS.PEER_GRAPH_PROPERTY_HEARTBEATS;
pub const PEER_GRAPH_PROPERTY_DEFER_EXPIRATION = PEER_GRAPH_PROPERTY_FLAGS.PEER_GRAPH_PROPERTY_DEFER_EXPIRATION;

pub const PEER_GRAPH_SCOPE = extern enum(i32) {
    ANY = 0,
    GLOBAL = 1,
    SITELOCAL = 2,
    LINKLOCAL = 3,
    LOOPBACK = 4,
};
pub const PEER_GRAPH_SCOPE_ANY = PEER_GRAPH_SCOPE.ANY;
pub const PEER_GRAPH_SCOPE_GLOBAL = PEER_GRAPH_SCOPE.GLOBAL;
pub const PEER_GRAPH_SCOPE_SITELOCAL = PEER_GRAPH_SCOPE.SITELOCAL;
pub const PEER_GRAPH_SCOPE_LINKLOCAL = PEER_GRAPH_SCOPE.LINKLOCAL;
pub const PEER_GRAPH_SCOPE_LOOPBACK = PEER_GRAPH_SCOPE.LOOPBACK;

pub const PEER_GRAPH_PROPERTIES = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwScope: u32,
    dwMaxRecordSize: u32,
    pwzGraphId: PWSTR,
    pwzCreatorId: PWSTR,
    pwzFriendlyName: PWSTR,
    pwzComment: PWSTR,
    ulPresenceLifetime: u32,
    cPresenceMax: u32,
};

pub const PEER_NODE_INFO = extern struct {
    dwSize: u32,
    ullNodeId: u64,
    pwzPeerId: PWSTR,
    cAddresses: u32,
    pAddresses: *PEER_ADDRESS,
    pwzAttributes: PWSTR,
};

pub const PEER_EVENT_NODE_CHANGE_DATA = extern struct {
    dwSize: u32,
    changeType: PEER_NODE_CHANGE_TYPE,
    ullNodeId: u64,
    pwzPeerId: PWSTR,
};

pub const PEER_GRAPH_EVENT_REGISTRATION = extern struct {
    eventType: PEER_GRAPH_EVENT_TYPE,
    pType: *Guid,
};

pub const PEER_GRAPH_EVENT_DATA = extern struct {
    eventType: PEER_GRAPH_EVENT_TYPE,
    Anonymous: PEER_GRAPH_EVENT_DATA._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PFNPEER_VALIDATE_RECORD = fn(
    hGraph: *c_void,
    pvContext: ?*c_void,
    pRecord: *PEER_RECORD,
    changeType: PEER_RECORD_CHANGE_TYPE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFNPEER_SECURE_RECORD = fn(
    hGraph: *c_void,
    pvContext: ?*c_void,
    pRecord: *PEER_RECORD,
    changeType: PEER_RECORD_CHANGE_TYPE,
    ppSecurityData: **PEER_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFNPEER_FREE_SECURITY_DATA = fn(
    hGraph: *c_void,
    pvContext: ?*c_void,
    pSecurityData: *PEER_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFNPEER_ON_PASSWORD_AUTH_FAILED = fn(
    hGraph: *c_void,
    pvContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PEER_SECURITY_INTERFACE = extern struct {
    dwSize: u32,
    pwzSspFilename: PWSTR,
    pwzPackageName: PWSTR,
    cbSecurityInfo: u32,
    pbSecurityInfo: *u8,
    pvContext: *c_void,
    pfnValidateRecord: PFNPEER_VALIDATE_RECORD,
    pfnSecureRecord: PFNPEER_SECURE_RECORD,
    pfnFreeSecurityData: PFNPEER_FREE_SECURITY_DATA,
    pfnAuthFailed: PFNPEER_ON_PASSWORD_AUTH_FAILED,
};

pub const PEER_GROUP_EVENT_TYPE = extern enum(i32) {
    PEER_GROUP_EVENT_STATUS_CHANGED = 1,
    PEER_GROUP_EVENT_PROPERTY_CHANGED = 2,
    PEER_GROUP_EVENT_RECORD_CHANGED = 3,
    PEER_GROUP_EVENT_DIRECT_CONNECTION = 4,
    PEER_GROUP_EVENT_NEIGHBOR_CONNECTION = 5,
    PEER_GROUP_EVENT_INCOMING_DATA = 6,
    PEER_GROUP_EVENT_MEMBER_CHANGED = 8,
    PEER_GROUP_EVENT_CONNECTION_FAILED = 10,
    PEER_GROUP_EVENT_AUTHENTICATION_FAILED = 11,
};
pub const PEER_GROUP_EVENT_STATUS_CHANGED = PEER_GROUP_EVENT_TYPE.PEER_GROUP_EVENT_STATUS_CHANGED;
pub const PEER_GROUP_EVENT_PROPERTY_CHANGED = PEER_GROUP_EVENT_TYPE.PEER_GROUP_EVENT_PROPERTY_CHANGED;
pub const PEER_GROUP_EVENT_RECORD_CHANGED = PEER_GROUP_EVENT_TYPE.PEER_GROUP_EVENT_RECORD_CHANGED;
pub const PEER_GROUP_EVENT_DIRECT_CONNECTION = PEER_GROUP_EVENT_TYPE.PEER_GROUP_EVENT_DIRECT_CONNECTION;
pub const PEER_GROUP_EVENT_NEIGHBOR_CONNECTION = PEER_GROUP_EVENT_TYPE.PEER_GROUP_EVENT_NEIGHBOR_CONNECTION;
pub const PEER_GROUP_EVENT_INCOMING_DATA = PEER_GROUP_EVENT_TYPE.PEER_GROUP_EVENT_INCOMING_DATA;
pub const PEER_GROUP_EVENT_MEMBER_CHANGED = PEER_GROUP_EVENT_TYPE.PEER_GROUP_EVENT_MEMBER_CHANGED;
pub const PEER_GROUP_EVENT_CONNECTION_FAILED = PEER_GROUP_EVENT_TYPE.PEER_GROUP_EVENT_CONNECTION_FAILED;
pub const PEER_GROUP_EVENT_AUTHENTICATION_FAILED = PEER_GROUP_EVENT_TYPE.PEER_GROUP_EVENT_AUTHENTICATION_FAILED;

pub const PEER_GROUP_STATUS = extern enum(i32) {
    LISTENING = 1,
    HAS_CONNECTIONS = 2,
};
pub const PEER_GROUP_STATUS_LISTENING = PEER_GROUP_STATUS.LISTENING;
pub const PEER_GROUP_STATUS_HAS_CONNECTIONS = PEER_GROUP_STATUS.HAS_CONNECTIONS;

pub const PEER_GROUP_PROPERTY_FLAGS = extern enum(i32) {
    PEER_MEMBER_DATA_OPTIONAL = 1,
    PEER_DISABLE_PRESENCE = 2,
    PEER_DEFER_EXPIRATION = 4,
};
pub const PEER_MEMBER_DATA_OPTIONAL = PEER_GROUP_PROPERTY_FLAGS.PEER_MEMBER_DATA_OPTIONAL;
pub const PEER_DISABLE_PRESENCE = PEER_GROUP_PROPERTY_FLAGS.PEER_DISABLE_PRESENCE;
pub const PEER_DEFER_EXPIRATION = PEER_GROUP_PROPERTY_FLAGS.PEER_DEFER_EXPIRATION;

pub const PEER_GROUP_AUTHENTICATION_SCHEME = extern enum(i32) {
    PEER_GROUP_GMC_AUTHENTICATION = 1,
    PEER_GROUP_PASSWORD_AUTHENTICATION = 2,
};
pub const PEER_GROUP_GMC_AUTHENTICATION = PEER_GROUP_AUTHENTICATION_SCHEME.PEER_GROUP_GMC_AUTHENTICATION;
pub const PEER_GROUP_PASSWORD_AUTHENTICATION = PEER_GROUP_AUTHENTICATION_SCHEME.PEER_GROUP_PASSWORD_AUTHENTICATION;

pub const PEER_MEMBER_FLAGS = extern enum(i32) {
    PEER_MEMBER_PRESENT = 1,
};
pub const PEER_MEMBER_PRESENT = PEER_MEMBER_FLAGS.PEER_MEMBER_PRESENT;

pub const PEER_MEMBER_CHANGE_TYPE = extern enum(i32) {
    PEER_MEMBER_CONNECTED = 1,
    PEER_MEMBER_DISCONNECTED = 2,
    PEER_MEMBER_UPDATED = 3,
    PEER_MEMBER_JOINED = 4,
    PEER_MEMBER_LEFT = 5,
};
pub const PEER_MEMBER_CONNECTED = PEER_MEMBER_CHANGE_TYPE.PEER_MEMBER_CONNECTED;
pub const PEER_MEMBER_DISCONNECTED = PEER_MEMBER_CHANGE_TYPE.PEER_MEMBER_DISCONNECTED;
pub const PEER_MEMBER_UPDATED = PEER_MEMBER_CHANGE_TYPE.PEER_MEMBER_UPDATED;
pub const PEER_MEMBER_JOINED = PEER_MEMBER_CHANGE_TYPE.PEER_MEMBER_JOINED;
pub const PEER_MEMBER_LEFT = PEER_MEMBER_CHANGE_TYPE.PEER_MEMBER_LEFT;

pub const PEER_GROUP_ISSUE_CREDENTIAL_FLAGS = extern enum(i32) {
    PEER_GROUP_STORE_CREDENTIALS = 1,
};
pub const PEER_GROUP_STORE_CREDENTIALS = PEER_GROUP_ISSUE_CREDENTIAL_FLAGS.PEER_GROUP_STORE_CREDENTIALS;

pub const PEER_CREDENTIAL_INFO = extern struct {
    dwSize: u32,
    dwFlags: u32,
    pwzFriendlyName: PWSTR,
    pPublicKey: *CERT_PUBLIC_KEY_INFO,
    pwzIssuerPeerName: PWSTR,
    pwzIssuerFriendlyName: PWSTR,
    ftValidityStart: FILETIME,
    ftValidityEnd: FILETIME,
    cRoles: u32,
    pRoles: *Guid,
};

pub const PEER_MEMBER = extern struct {
    dwSize: u32,
    dwFlags: u32,
    pwzIdentity: PWSTR,
    pwzAttributes: PWSTR,
    ullNodeId: u64,
    cAddresses: u32,
    pAddresses: *PEER_ADDRESS,
    pCredentialInfo: *PEER_CREDENTIAL_INFO,
};

pub const PEER_INVITATION_INFO = extern struct {
    dwSize: u32,
    dwFlags: u32,
    pwzCloudName: PWSTR,
    dwScope: u32,
    dwCloudFlags: u32,
    pwzGroupPeerName: PWSTR,
    pwzIssuerPeerName: PWSTR,
    pwzSubjectPeerName: PWSTR,
    pwzGroupFriendlyName: PWSTR,
    pwzIssuerFriendlyName: PWSTR,
    pwzSubjectFriendlyName: PWSTR,
    ftValidityStart: FILETIME,
    ftValidityEnd: FILETIME,
    cRoles: u32,
    pRoles: *Guid,
    cClassifiers: u32,
    ppwzClassifiers: *PWSTR,
    pSubjectPublicKey: *CERT_PUBLIC_KEY_INFO,
    authScheme: PEER_GROUP_AUTHENTICATION_SCHEME,
};

pub const PEER_GROUP_PROPERTIES = extern struct {
    dwSize: u32,
    dwFlags: u32,
    pwzCloud: PWSTR,
    pwzClassifier: PWSTR,
    pwzGroupPeerName: PWSTR,
    pwzCreatorPeerName: PWSTR,
    pwzFriendlyName: PWSTR,
    pwzComment: PWSTR,
    ulMemberDataLifetime: u32,
    ulPresenceLifetime: u32,
    dwAuthenticationSchemes: u32,
    pwzGroupPassword: PWSTR,
    groupPasswordRole: Guid,
};

pub const PEER_EVENT_MEMBER_CHANGE_DATA = extern struct {
    dwSize: u32,
    changeType: PEER_MEMBER_CHANGE_TYPE,
    pwzIdentity: PWSTR,
};

pub const PEER_GROUP_EVENT_REGISTRATION = extern struct {
    eventType: PEER_GROUP_EVENT_TYPE,
    pType: *Guid,
};

pub const PEER_GROUP_EVENT_DATA = extern struct {
    eventType: PEER_GROUP_EVENT_TYPE,
    Anonymous: PEER_GROUP_EVENT_DATA._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PEER_NAME_PAIR = extern struct {
    dwSize: u32,
    pwzPeerName: PWSTR,
    pwzFriendlyName: PWSTR,
};

pub const PEER_SIGNIN_FLAGS = extern enum(i32) {
    PEER_SIGNIN_NONE = 0,
    PEER_SIGNIN_NEAR_ME = 1,
    PEER_SIGNIN_INTERNET = 2,
    PEER_SIGNIN_ALL = 3,
};
pub const PEER_SIGNIN_NONE = PEER_SIGNIN_FLAGS.PEER_SIGNIN_NONE;
pub const PEER_SIGNIN_NEAR_ME = PEER_SIGNIN_FLAGS.PEER_SIGNIN_NEAR_ME;
pub const PEER_SIGNIN_INTERNET = PEER_SIGNIN_FLAGS.PEER_SIGNIN_INTERNET;
pub const PEER_SIGNIN_ALL = PEER_SIGNIN_FLAGS.PEER_SIGNIN_ALL;

pub const PEER_WATCH_PERMISSION = extern enum(i32) {
    PEER_WATCH_BLOCKED = 0,
    PEER_WATCH_ALLOWED = 1,
};
pub const PEER_WATCH_BLOCKED = PEER_WATCH_PERMISSION.PEER_WATCH_BLOCKED;
pub const PEER_WATCH_ALLOWED = PEER_WATCH_PERMISSION.PEER_WATCH_ALLOWED;

pub const PEER_PUBLICATION_SCOPE = extern enum(i32) {
    NONE = 0,
    NEAR_ME = 1,
    INTERNET = 2,
    ALL = 3,
};
pub const PEER_PUBLICATION_SCOPE_NONE = PEER_PUBLICATION_SCOPE.NONE;
pub const PEER_PUBLICATION_SCOPE_NEAR_ME = PEER_PUBLICATION_SCOPE.NEAR_ME;
pub const PEER_PUBLICATION_SCOPE_INTERNET = PEER_PUBLICATION_SCOPE.INTERNET;
pub const PEER_PUBLICATION_SCOPE_ALL = PEER_PUBLICATION_SCOPE.ALL;

pub const PEER_APPLICATION = extern struct {
    id: Guid,
    data: PEER_DATA,
    pwzDescription: PWSTR,
};

pub const PEER_OBJECT = extern struct {
    id: Guid,
    data: PEER_DATA,
    dwPublicationScope: u32,
};

pub const PEER_CONTACT = extern struct {
    pwzPeerName: PWSTR,
    pwzNickName: PWSTR,
    pwzDisplayName: PWSTR,
    pwzEmailAddress: PWSTR,
    fWatch: BOOL,
    WatcherPermissions: PEER_WATCH_PERMISSION,
    credentials: PEER_DATA,
};

pub const PEER_ENDPOINT = extern struct {
    address: PEER_ADDRESS,
    pwzEndpointName: PWSTR,
};

pub const PEER_PEOPLE_NEAR_ME = extern struct {
    pwzNickName: PWSTR,
    endpoint: PEER_ENDPOINT,
    id: Guid,
};

pub const PEER_INVITATION_RESPONSE_TYPE = extern enum(i32) {
    PEER_INVITATION_RESPONSE_DECLINED = 0,
    PEER_INVITATION_RESPONSE_ACCEPTED = 1,
    PEER_INVITATION_RESPONSE_EXPIRED = 2,
    PEER_INVITATION_RESPONSE_ERROR = 3,
};
pub const PEER_INVITATION_RESPONSE_DECLINED = PEER_INVITATION_RESPONSE_TYPE.PEER_INVITATION_RESPONSE_DECLINED;
pub const PEER_INVITATION_RESPONSE_ACCEPTED = PEER_INVITATION_RESPONSE_TYPE.PEER_INVITATION_RESPONSE_ACCEPTED;
pub const PEER_INVITATION_RESPONSE_EXPIRED = PEER_INVITATION_RESPONSE_TYPE.PEER_INVITATION_RESPONSE_EXPIRED;
pub const PEER_INVITATION_RESPONSE_ERROR = PEER_INVITATION_RESPONSE_TYPE.PEER_INVITATION_RESPONSE_ERROR;

pub const PEER_APPLICATION_REGISTRATION_TYPE = extern enum(i32) {
    PEER_APPLICATION_CURRENT_USER = 0,
    PEER_APPLICATION_ALL_USERS = 1,
};
pub const PEER_APPLICATION_CURRENT_USER = PEER_APPLICATION_REGISTRATION_TYPE.PEER_APPLICATION_CURRENT_USER;
pub const PEER_APPLICATION_ALL_USERS = PEER_APPLICATION_REGISTRATION_TYPE.PEER_APPLICATION_ALL_USERS;

pub const PEER_INVITATION = extern struct {
    applicationId: Guid,
    applicationData: PEER_DATA,
    pwzMessage: PWSTR,
};

pub const PEER_INVITATION_RESPONSE = extern struct {
    action: PEER_INVITATION_RESPONSE_TYPE,
    pwzMessage: PWSTR,
    hrExtendedInfo: HRESULT,
};

pub const PEER_APP_LAUNCH_INFO = extern struct {
    pContact: *PEER_CONTACT,
    pEndpoint: *PEER_ENDPOINT,
    pInvitation: *PEER_INVITATION,
};

pub const PEER_APPLICATION_REGISTRATION_INFO = extern struct {
    application: PEER_APPLICATION,
    pwzApplicationToLaunch: PWSTR,
    pwzApplicationArguments: PWSTR,
    dwPublicationScope: u32,
};

pub const PEER_PRESENCE_STATUS = extern enum(i32) {
    PEER_PRESENCE_OFFLINE = 0,
    PEER_PRESENCE_OUT_TO_LUNCH = 1,
    PEER_PRESENCE_AWAY = 2,
    PEER_PRESENCE_BE_RIGHT_BACK = 3,
    PEER_PRESENCE_IDLE = 4,
    PEER_PRESENCE_BUSY = 5,
    PEER_PRESENCE_ON_THE_PHONE = 6,
    PEER_PRESENCE_ONLINE = 7,
};
pub const PEER_PRESENCE_OFFLINE = PEER_PRESENCE_STATUS.PEER_PRESENCE_OFFLINE;
pub const PEER_PRESENCE_OUT_TO_LUNCH = PEER_PRESENCE_STATUS.PEER_PRESENCE_OUT_TO_LUNCH;
pub const PEER_PRESENCE_AWAY = PEER_PRESENCE_STATUS.PEER_PRESENCE_AWAY;
pub const PEER_PRESENCE_BE_RIGHT_BACK = PEER_PRESENCE_STATUS.PEER_PRESENCE_BE_RIGHT_BACK;
pub const PEER_PRESENCE_IDLE = PEER_PRESENCE_STATUS.PEER_PRESENCE_IDLE;
pub const PEER_PRESENCE_BUSY = PEER_PRESENCE_STATUS.PEER_PRESENCE_BUSY;
pub const PEER_PRESENCE_ON_THE_PHONE = PEER_PRESENCE_STATUS.PEER_PRESENCE_ON_THE_PHONE;
pub const PEER_PRESENCE_ONLINE = PEER_PRESENCE_STATUS.PEER_PRESENCE_ONLINE;

pub const PEER_PRESENCE_INFO = extern struct {
    status: PEER_PRESENCE_STATUS,
    pwzDescriptiveText: PWSTR,
};

pub const PEER_CHANGE_TYPE = extern enum(i32) {
    PEER_CHANGE_ADDED = 0,
    PEER_CHANGE_DELETED = 1,
    PEER_CHANGE_UPDATED = 2,
};
pub const PEER_CHANGE_ADDED = PEER_CHANGE_TYPE.PEER_CHANGE_ADDED;
pub const PEER_CHANGE_DELETED = PEER_CHANGE_TYPE.PEER_CHANGE_DELETED;
pub const PEER_CHANGE_UPDATED = PEER_CHANGE_TYPE.PEER_CHANGE_UPDATED;

pub const PEER_COLLAB_EVENT_TYPE = extern enum(i32) {
    PEER_EVENT_WATCHLIST_CHANGED = 1,
    PEER_EVENT_ENDPOINT_CHANGED = 2,
    PEER_EVENT_ENDPOINT_PRESENCE_CHANGED = 3,
    PEER_EVENT_ENDPOINT_APPLICATION_CHANGED = 4,
    PEER_EVENT_ENDPOINT_OBJECT_CHANGED = 5,
    PEER_EVENT_MY_ENDPOINT_CHANGED = 6,
    PEER_EVENT_MY_PRESENCE_CHANGED = 7,
    PEER_EVENT_MY_APPLICATION_CHANGED = 8,
    PEER_EVENT_MY_OBJECT_CHANGED = 9,
    PEER_EVENT_PEOPLE_NEAR_ME_CHANGED = 10,
    PEER_EVENT_REQUEST_STATUS_CHANGED = 11,
};
pub const PEER_EVENT_WATCHLIST_CHANGED = PEER_COLLAB_EVENT_TYPE.PEER_EVENT_WATCHLIST_CHANGED;
pub const PEER_EVENT_ENDPOINT_CHANGED = PEER_COLLAB_EVENT_TYPE.PEER_EVENT_ENDPOINT_CHANGED;
pub const PEER_EVENT_ENDPOINT_PRESENCE_CHANGED = PEER_COLLAB_EVENT_TYPE.PEER_EVENT_ENDPOINT_PRESENCE_CHANGED;
pub const PEER_EVENT_ENDPOINT_APPLICATION_CHANGED = PEER_COLLAB_EVENT_TYPE.PEER_EVENT_ENDPOINT_APPLICATION_CHANGED;
pub const PEER_EVENT_ENDPOINT_OBJECT_CHANGED = PEER_COLLAB_EVENT_TYPE.PEER_EVENT_ENDPOINT_OBJECT_CHANGED;
pub const PEER_EVENT_MY_ENDPOINT_CHANGED = PEER_COLLAB_EVENT_TYPE.PEER_EVENT_MY_ENDPOINT_CHANGED;
pub const PEER_EVENT_MY_PRESENCE_CHANGED = PEER_COLLAB_EVENT_TYPE.PEER_EVENT_MY_PRESENCE_CHANGED;
pub const PEER_EVENT_MY_APPLICATION_CHANGED = PEER_COLLAB_EVENT_TYPE.PEER_EVENT_MY_APPLICATION_CHANGED;
pub const PEER_EVENT_MY_OBJECT_CHANGED = PEER_COLLAB_EVENT_TYPE.PEER_EVENT_MY_OBJECT_CHANGED;
pub const PEER_EVENT_PEOPLE_NEAR_ME_CHANGED = PEER_COLLAB_EVENT_TYPE.PEER_EVENT_PEOPLE_NEAR_ME_CHANGED;
pub const PEER_EVENT_REQUEST_STATUS_CHANGED = PEER_COLLAB_EVENT_TYPE.PEER_EVENT_REQUEST_STATUS_CHANGED;

pub const PEER_COLLAB_EVENT_REGISTRATION = extern struct {
    eventType: PEER_COLLAB_EVENT_TYPE,
    pInstance: *Guid,
};

pub const PEER_EVENT_WATCHLIST_CHANGED_DATA = extern struct {
    pContact: *PEER_CONTACT,
    changeType: PEER_CHANGE_TYPE,
};

pub const PEER_EVENT_PRESENCE_CHANGED_DATA = extern struct {
    pContact: *PEER_CONTACT,
    pEndpoint: *PEER_ENDPOINT,
    changeType: PEER_CHANGE_TYPE,
    pPresenceInfo: *PEER_PRESENCE_INFO,
};

pub const PEER_EVENT_APPLICATION_CHANGED_DATA = extern struct {
    pContact: *PEER_CONTACT,
    pEndpoint: *PEER_ENDPOINT,
    changeType: PEER_CHANGE_TYPE,
    pApplication: *PEER_APPLICATION,
};

pub const PEER_EVENT_OBJECT_CHANGED_DATA = extern struct {
    pContact: *PEER_CONTACT,
    pEndpoint: *PEER_ENDPOINT,
    changeType: PEER_CHANGE_TYPE,
    pObject: *PEER_OBJECT,
};

pub const PEER_EVENT_ENDPOINT_CHANGED_DATA = extern struct {
    pContact: *PEER_CONTACT,
    pEndpoint: *PEER_ENDPOINT,
};

pub const PEER_EVENT_PEOPLE_NEAR_ME_CHANGED_DATA = extern struct {
    changeType: PEER_CHANGE_TYPE,
    pPeopleNearMe: *PEER_PEOPLE_NEAR_ME,
};

pub const PEER_EVENT_REQUEST_STATUS_CHANGED_DATA = extern struct {
    pEndpoint: *PEER_ENDPOINT,
    hrChange: HRESULT,
};

pub const PEER_COLLAB_EVENT_DATA = extern struct {
    eventType: PEER_COLLAB_EVENT_TYPE,
    Anonymous: PEER_COLLAB_EVENT_DATA._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PEER_PNRP_ENDPOINT_INFO = extern struct {
    pwzPeerName: PWSTR,
    cAddresses: u32,
    ppAddresses: **SOCKADDR,
    pwzComment: PWSTR,
    payload: PEER_DATA,
};

pub const PEER_PNRP_CLOUD_INFO = extern struct {
    pwzCloudName: PWSTR,
    dwScope: PNRP_SCOPE,
    dwScopeId: u32,
};

pub const PEER_PNRP_REGISTRATION_INFO = extern struct {
    pwzCloudName: PWSTR,
    pwzPublishingIdentity: PWSTR,
    cAddresses: u32,
    ppAddresses: **SOCKADDR,
    wPort: u16,
    pwzComment: PWSTR,
    payload: PEER_DATA,
};

pub const DRT_SCOPE = extern enum(i32) {
    DRT_GLOBAL_SCOPE = 1,
    DRT_SITE_LOCAL_SCOPE = 2,
    DRT_LINK_LOCAL_SCOPE = 3,
};
pub const DRT_GLOBAL_SCOPE = DRT_SCOPE.DRT_GLOBAL_SCOPE;
pub const DRT_SITE_LOCAL_SCOPE = DRT_SCOPE.DRT_SITE_LOCAL_SCOPE;
pub const DRT_LINK_LOCAL_SCOPE = DRT_SCOPE.DRT_LINK_LOCAL_SCOPE;

pub const DRT_STATUS = extern enum(i32) {
    DRT_ACTIVE = 0,
    DRT_ALONE = 1,
    DRT_NO_NETWORK = 10,
    DRT_FAULTED = 20,
};
pub const DRT_ACTIVE = DRT_STATUS.DRT_ACTIVE;
pub const DRT_ALONE = DRT_STATUS.DRT_ALONE;
pub const DRT_NO_NETWORK = DRT_STATUS.DRT_NO_NETWORK;
pub const DRT_FAULTED = DRT_STATUS.DRT_FAULTED;

pub const DRT_MATCH_TYPE = extern enum(i32) {
    DRT_MATCH_EXACT = 0,
    DRT_MATCH_NEAR = 1,
    DRT_MATCH_INTERMEDIATE = 2,
};
pub const DRT_MATCH_EXACT = DRT_MATCH_TYPE.DRT_MATCH_EXACT;
pub const DRT_MATCH_NEAR = DRT_MATCH_TYPE.DRT_MATCH_NEAR;
pub const DRT_MATCH_INTERMEDIATE = DRT_MATCH_TYPE.DRT_MATCH_INTERMEDIATE;

pub const DRT_LEAFSET_KEY_CHANGE_TYPE = extern enum(i32) {
    DRT_LEAFSET_KEY_ADDED = 0,
    DRT_LEAFSET_KEY_DELETED = 1,
};
pub const DRT_LEAFSET_KEY_ADDED = DRT_LEAFSET_KEY_CHANGE_TYPE.DRT_LEAFSET_KEY_ADDED;
pub const DRT_LEAFSET_KEY_DELETED = DRT_LEAFSET_KEY_CHANGE_TYPE.DRT_LEAFSET_KEY_DELETED;

pub const DRT_EVENT_TYPE = extern enum(i32) {
    DRT_EVENT_STATUS_CHANGED = 0,
    DRT_EVENT_LEAFSET_KEY_CHANGED = 1,
    DRT_EVENT_REGISTRATION_STATE_CHANGED = 2,
};
pub const DRT_EVENT_STATUS_CHANGED = DRT_EVENT_TYPE.DRT_EVENT_STATUS_CHANGED;
pub const DRT_EVENT_LEAFSET_KEY_CHANGED = DRT_EVENT_TYPE.DRT_EVENT_LEAFSET_KEY_CHANGED;
pub const DRT_EVENT_REGISTRATION_STATE_CHANGED = DRT_EVENT_TYPE.DRT_EVENT_REGISTRATION_STATE_CHANGED;

pub const DRT_SECURITY_MODE = extern enum(i32) {
    DRT_SECURE_RESOLVE = 0,
    DRT_SECURE_MEMBERSHIP = 1,
    DRT_SECURE_CONFIDENTIALPAYLOAD = 2,
};
pub const DRT_SECURE_RESOLVE = DRT_SECURITY_MODE.DRT_SECURE_RESOLVE;
pub const DRT_SECURE_MEMBERSHIP = DRT_SECURITY_MODE.DRT_SECURE_MEMBERSHIP;
pub const DRT_SECURE_CONFIDENTIALPAYLOAD = DRT_SECURITY_MODE.DRT_SECURE_CONFIDENTIALPAYLOAD;

pub const DRT_REGISTRATION_STATE = extern enum(i32) {
    UNRESOLVEABLE = 1,
};
pub const DRT_REGISTRATION_STATE_UNRESOLVEABLE = DRT_REGISTRATION_STATE.UNRESOLVEABLE;

pub const DRT_ADDRESS_FLAGS = extern enum(i32) {
    DRT_ADDRESS_FLAG_ACCEPTED = 1,
    DRT_ADDRESS_FLAG_REJECTED = 2,
    DRT_ADDRESS_FLAG_UNREACHABLE = 4,
    DRT_ADDRESS_FLAG_LOOP = 8,
    DRT_ADDRESS_FLAG_TOO_BUSY = 16,
    DRT_ADDRESS_FLAG_BAD_VALIDATE_ID = 32,
    DRT_ADDRESS_FLAG_SUSPECT_UNREGISTERED_ID = 64,
    DRT_ADDRESS_FLAG_INQUIRE = 128,
};
pub const DRT_ADDRESS_FLAG_ACCEPTED = DRT_ADDRESS_FLAGS.DRT_ADDRESS_FLAG_ACCEPTED;
pub const DRT_ADDRESS_FLAG_REJECTED = DRT_ADDRESS_FLAGS.DRT_ADDRESS_FLAG_REJECTED;
pub const DRT_ADDRESS_FLAG_UNREACHABLE = DRT_ADDRESS_FLAGS.DRT_ADDRESS_FLAG_UNREACHABLE;
pub const DRT_ADDRESS_FLAG_LOOP = DRT_ADDRESS_FLAGS.DRT_ADDRESS_FLAG_LOOP;
pub const DRT_ADDRESS_FLAG_TOO_BUSY = DRT_ADDRESS_FLAGS.DRT_ADDRESS_FLAG_TOO_BUSY;
pub const DRT_ADDRESS_FLAG_BAD_VALIDATE_ID = DRT_ADDRESS_FLAGS.DRT_ADDRESS_FLAG_BAD_VALIDATE_ID;
pub const DRT_ADDRESS_FLAG_SUSPECT_UNREGISTERED_ID = DRT_ADDRESS_FLAGS.DRT_ADDRESS_FLAG_SUSPECT_UNREGISTERED_ID;
pub const DRT_ADDRESS_FLAG_INQUIRE = DRT_ADDRESS_FLAGS.DRT_ADDRESS_FLAG_INQUIRE;

pub const DRT_DATA = extern struct {
    cb: u32,
    pb: *u8,
};

pub const DRT_REGISTRATION = extern struct {
    key: DRT_DATA,
    appData: DRT_DATA,
};

pub const DRT_SECURITY_PROVIDER = extern struct {
    pvContext: *c_void,
    Attach: *********HRESULT,
    Detach: ?*c_void,
    RegisterKey: *********HRESULT,
    UnregisterKey: *********HRESULT,
    ValidateAndUnpackPayload: *********HRESULT,
    SecureAndPackPayload: *********HRESULT,
    FreeData: ?*c_void,
    EncryptData: *********HRESULT,
    DecryptData: *********HRESULT,
    GetSerializedCredential: *********HRESULT,
    ValidateRemoteCredential: *********HRESULT,
    SignData: *********HRESULT,
    VerifyData: *********HRESULT,
};

pub const DRT_BOOTSTRAP_RESOLVE_CALLBACK = fn(
    hr: HRESULT,
    pvContext: *c_void,
    pAddresses: *SOCKET_ADDRESS_LIST,
    fFatalError: BOOL,
) callconv(@import("std").os.windows.WINAPI) void;

pub const DRT_BOOTSTRAP_PROVIDER = extern struct {
    pvContext: *c_void,
    Attach: *********HRESULT,
    Detach: ?*c_void,
    InitResolve: *********HRESULT,
    IssueResolve: *********HRESULT,
    EndResolve: ?*c_void,
    Register: *********HRESULT,
    Unregister: ?*c_void,
};

pub const DRT_SETTINGS = extern struct {
    dwSize: u32,
    cbKey: u32,
    bProtocolMajorVersion: u8,
    bProtocolMinorVersion: u8,
    ulMaxRoutingAddresses: u32,
    pwzDrtInstancePrefix: PWSTR,
    hTransport: *c_void,
    pSecurityProvider: *DRT_SECURITY_PROVIDER,
    pBootstrapProvider: *DRT_BOOTSTRAP_PROVIDER,
    eSecurityMode: DRT_SECURITY_MODE,
};

pub const DRT_SEARCH_INFO = extern struct {
    dwSize: u32,
    fIterative: BOOL,
    fAllowCurrentInstanceMatch: BOOL,
    fAnyMatchInRange: BOOL,
    cMaxEndpoints: u32,
    pMaximumKey: *DRT_DATA,
    pMinimumKey: *DRT_DATA,
};

pub const DRT_ADDRESS = extern struct {
    socketAddress: SOCKADDR_STORAGE_LH,
    flags: u32,
    nearness: i32,
    latency: u32,
};

pub const DRT_ADDRESS_LIST = extern struct {
    AddressCount: u32,
    AddressList: [1]DRT_ADDRESS,
};

pub const DRT_SEARCH_RESULT = extern struct {
    dwSize: u32,
    type: DRT_MATCH_TYPE,
    pvContext: *c_void,
    registration: DRT_REGISTRATION,
};

pub const DRT_EVENT_DATA = extern struct {
    type: DRT_EVENT_TYPE,
    hr: HRESULT,
    pvContext: *c_void,
    Anonymous: DRT_EVENT_DATA._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PEERDIST_STATUS = extern enum(i32) {
    DISABLED = 0,
    UNAVAILABLE = 1,
    AVAILABLE = 2,
};
pub const PEERDIST_STATUS_DISABLED = PEERDIST_STATUS.DISABLED;
pub const PEERDIST_STATUS_UNAVAILABLE = PEERDIST_STATUS.UNAVAILABLE;
pub const PEERDIST_STATUS_AVAILABLE = PEERDIST_STATUS.AVAILABLE;

pub const PEERDIST_PUBLICATION_OPTIONS = extern struct {
    dwVersion: u32,
    dwFlags: u32,
};

pub const PEERDIST_CONTENT_TAG = extern struct {
    Data: [16]u8,
};

pub const PEERDIST_RETRIEVAL_OPTIONS = extern struct {
    cbSize: u32,
    dwContentInfoMinVersion: u32,
    dwContentInfoMaxVersion: u32,
    dwReserved: u32,
};

pub const PEERDIST_STATUS_INFO = extern struct {
    cbSize: u32,
    status: PEERDIST_STATUS,
    dwMinVer: u32,
    dwMaxVer: u32,
};

pub const PEERDIST_CLIENT_INFO_BY_HANDLE_CLASS = extern enum(i32) {
    PeerDistClientBasicInfo = 0,
    MaximumPeerDistClientInfoByHandlesClass = 1,
};
pub const PeerDistClientBasicInfo = PEERDIST_CLIENT_INFO_BY_HANDLE_CLASS.PeerDistClientBasicInfo;
pub const MaximumPeerDistClientInfoByHandlesClass = PEERDIST_CLIENT_INFO_BY_HANDLE_CLASS.MaximumPeerDistClientInfoByHandlesClass;

pub const PEERDIST_CLIENT_BASIC_INFO = extern struct {
    fFlashCrowd: BOOL,
};


//--------------------------------------------------------------------------------
// Section: Functions (200)
//--------------------------------------------------------------------------------
pub extern "P2PGRAPH" fn PeerGraphStartup(
    wVersionRequested: u16,
    pVersionData: *PEER_VERSION_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphShutdown(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphFreeData(
    pvData: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "P2PGRAPH" fn PeerGraphGetItemCount(
    hPeerEnum: *c_void,
    pCount: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphGetNextItem(
    hPeerEnum: *c_void,
    pCount: *u32,
    pppvItems: ***c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphEndEnumeration(
    hPeerEnum: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphCreate(
    pGraphProperties: *PEER_GRAPH_PROPERTIES,
    pwzDatabaseName: [*:0]const u16,
    pSecurityInterface: ?*PEER_SECURITY_INTERFACE,
    phGraph: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphOpen(
    pwzGraphId: [*:0]const u16,
    pwzPeerId: [*:0]const u16,
    pwzDatabaseName: [*:0]const u16,
    pSecurityInterface: ?*PEER_SECURITY_INTERFACE,
    cRecordTypeSyncPrecedence: u32,
    pRecordTypeSyncPrecedence: ?[*]const Guid,
    phGraph: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphListen(
    hGraph: *c_void,
    dwScope: u32,
    dwScopeId: u32,
    wPort: u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphConnect(
    hGraph: *c_void,
    pwzPeerId: ?[*:0]const u16,
    pAddress: *PEER_ADDRESS,
    pullConnectionId: *u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphClose(
    hGraph: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphDelete(
    pwzGraphId: [*:0]const u16,
    pwzPeerId: [*:0]const u16,
    pwzDatabaseName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphGetStatus(
    hGraph: *c_void,
    pdwStatus: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphGetProperties(
    hGraph: *c_void,
    ppGraphProperties: **PEER_GRAPH_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphSetProperties(
    hGraph: *c_void,
    pGraphProperties: *PEER_GRAPH_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphRegisterEvent(
    hGraph: *c_void,
    hEvent: HANDLE,
    cEventRegistrations: u32,
    pEventRegistrations: [*]PEER_GRAPH_EVENT_REGISTRATION,
    phPeerEvent: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphUnregisterEvent(
    hPeerEvent: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphGetEventData(
    hPeerEvent: *c_void,
    ppEventData: **PEER_GRAPH_EVENT_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphGetRecord(
    hGraph: *c_void,
    pRecordId: *const Guid,
    ppRecord: **PEER_RECORD,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphAddRecord(
    hGraph: *c_void,
    pRecord: *PEER_RECORD,
    pRecordId: *Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphUpdateRecord(
    hGraph: *c_void,
    pRecord: *PEER_RECORD,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphDeleteRecord(
    hGraph: *c_void,
    pRecordId: *const Guid,
    fLocal: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphEnumRecords(
    hGraph: *c_void,
    pRecordType: ?*const Guid,
    pwzPeerId: ?[*:0]const u16,
    phPeerEnum: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphSearchRecords(
    hGraph: *c_void,
    pwzCriteria: [*:0]const u16,
    phPeerEnum: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphExportDatabase(
    hGraph: *c_void,
    pwzFilePath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphImportDatabase(
    hGraph: *c_void,
    pwzFilePath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphValidateDeferredRecords(
    hGraph: *c_void,
    cRecordIds: u32,
    pRecordIds: [*]const Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphOpenDirectConnection(
    hGraph: *c_void,
    pwzPeerId: [*:0]const u16,
    pAddress: *PEER_ADDRESS,
    pullConnectionId: *u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphSendData(
    hGraph: *c_void,
    ullConnectionId: u64,
    pType: *const Guid,
    cbData: u32,
    pvData: [*]u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphCloseDirectConnection(
    hGraph: *c_void,
    ullConnectionId: u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphEnumConnections(
    hGraph: *c_void,
    dwFlags: u32,
    phPeerEnum: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphEnumNodes(
    hGraph: *c_void,
    pwzPeerId: ?[*:0]const u16,
    phPeerEnum: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphSetPresence(
    hGraph: *c_void,
    fPresent: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphGetNodeInfo(
    hGraph: *c_void,
    ullNodeId: u64,
    ppNodeInfo: **PEER_NODE_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphSetNodeAttributes(
    hGraph: *c_void,
    pwzAttributes: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphPeerTimeToUniversalTime(
    hGraph: *c_void,
    pftPeerTime: *FILETIME,
    pftUniversalTime: *FILETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2PGRAPH" fn PeerGraphUniversalTimeToPeerTime(
    hGraph: *c_void,
    pftUniversalTime: *FILETIME,
    pftPeerTime: *FILETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerFreeData(
    pvData: ?*const c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "P2P" fn PeerGetItemCount(
    hPeerEnum: *c_void,
    pCount: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGetNextItem(
    hPeerEnum: *c_void,
    pCount: *u32,
    pppvItems: ***c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerEndEnumeration(
    hPeerEnum: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupStartup(
    wVersionRequested: u16,
    pVersionData: *PEER_VERSION_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupShutdown(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupCreate(
    pProperties: *PEER_GROUP_PROPERTIES,
    phGroup: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupOpen(
    pwzIdentity: [*:0]const u16,
    pwzGroupPeerName: [*:0]const u16,
    pwzCloud: ?[*:0]const u16,
    phGroup: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupJoin(
    pwzIdentity: [*:0]const u16,
    pwzInvitation: [*:0]const u16,
    pwzCloud: ?[*:0]const u16,
    phGroup: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupPasswordJoin(
    pwzIdentity: [*:0]const u16,
    pwzInvitation: [*:0]const u16,
    pwzPassword: [*:0]const u16,
    pwzCloud: ?[*:0]const u16,
    phGroup: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupConnect(
    hGroup: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupConnectByAddress(
    hGroup: *c_void,
    cAddresses: u32,
    pAddresses: [*]PEER_ADDRESS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupClose(
    hGroup: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupDelete(
    pwzIdentity: [*:0]const u16,
    pwzGroupPeerName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupCreateInvitation(
    hGroup: *c_void,
    pwzIdentityInfo: [*:0]const u16,
    pftExpiration: ?*FILETIME,
    cRoles: u32,
    pRoles: ?[*]const Guid,
    ppwzInvitation: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupCreatePasswordInvitation(
    hGroup: *c_void,
    ppwzInvitation: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupParseInvitation(
    pwzInvitation: [*:0]const u16,
    ppInvitationInfo: **PEER_INVITATION_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupGetStatus(
    hGroup: *c_void,
    pdwStatus: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupGetProperties(
    hGroup: *c_void,
    ppProperties: **PEER_GROUP_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupSetProperties(
    hGroup: *c_void,
    pProperties: *PEER_GROUP_PROPERTIES,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupEnumMembers(
    hGroup: *c_void,
    dwFlags: u32,
    pwzIdentity: ?[*:0]const u16,
    phPeerEnum: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupOpenDirectConnection(
    hGroup: *c_void,
    pwzIdentity: [*:0]const u16,
    pAddress: *PEER_ADDRESS,
    pullConnectionId: *u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupCloseDirectConnection(
    hGroup: *c_void,
    ullConnectionId: u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupEnumConnections(
    hGroup: *c_void,
    dwFlags: u32,
    phPeerEnum: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupSendData(
    hGroup: *c_void,
    ullConnectionId: u64,
    pType: *const Guid,
    cbData: u32,
    pvData: [*]u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupRegisterEvent(
    hGroup: *c_void,
    hEvent: HANDLE,
    cEventRegistration: u32,
    pEventRegistrations: [*]PEER_GROUP_EVENT_REGISTRATION,
    phPeerEvent: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupUnregisterEvent(
    hPeerEvent: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupGetEventData(
    hPeerEvent: *c_void,
    ppEventData: **PEER_GROUP_EVENT_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupGetRecord(
    hGroup: *c_void,
    pRecordId: *const Guid,
    ppRecord: **PEER_RECORD,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupAddRecord(
    hGroup: *c_void,
    pRecord: *PEER_RECORD,
    pRecordId: *Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupUpdateRecord(
    hGroup: *c_void,
    pRecord: *PEER_RECORD,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupDeleteRecord(
    hGroup: *c_void,
    pRecordId: *const Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupEnumRecords(
    hGroup: *c_void,
    pRecordType: ?*const Guid,
    phPeerEnum: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupSearchRecords(
    hGroup: *c_void,
    pwzCriteria: [*:0]const u16,
    phPeerEnum: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupExportDatabase(
    hGroup: *c_void,
    pwzFilePath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupImportDatabase(
    hGroup: *c_void,
    pwzFilePath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupIssueCredentials(
    hGroup: *c_void,
    pwzSubjectIdentity: [*:0]const u16,
    pCredentialInfo: ?*PEER_CREDENTIAL_INFO,
    dwFlags: u32,
    ppwzInvitation: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupExportConfig(
    hGroup: *c_void,
    pwzPassword: [*:0]const u16,
    ppwzXML: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupImportConfig(
    pwzXML: [*:0]const u16,
    pwzPassword: [*:0]const u16,
    fOverwrite: BOOL,
    ppwzIdentity: *PWSTR,
    ppwzGroup: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupPeerTimeToUniversalTime(
    hGroup: *c_void,
    pftPeerTime: *FILETIME,
    pftUniversalTime: *FILETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupUniversalTimeToPeerTime(
    hGroup: *c_void,
    pftUniversalTime: *FILETIME,
    pftPeerTime: *FILETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerGroupResumePasswordAuthentication(
    hGroup: *c_void,
    hPeerEventHandle: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerIdentityCreate(
    pwzClassifier: ?[*:0]const u16,
    pwzFriendlyName: ?[*:0]const u16,
    hCryptProv: ?*c_void,
    ppwzIdentity: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerIdentityGetFriendlyName(
    pwzIdentity: ?[*:0]const u16,
    ppwzFriendlyName: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerIdentitySetFriendlyName(
    pwzIdentity: ?[*:0]const u16,
    pwzFriendlyName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerIdentityGetCryptKey(
    pwzIdentity: ?[*:0]const u16,
    phCryptProv: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerIdentityDelete(
    pwzIdentity: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerEnumIdentities(
    phPeerEnum: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerEnumGroups(
    pwzIdentity: [*:0]const u16,
    phPeerEnum: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCreatePeerName(
    pwzIdentity: ?[*:0]const u16,
    pwzClassifier: ?[*:0]const u16,
    ppwzPeerName: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerIdentityGetXML(
    pwzIdentity: ?[*:0]const u16,
    ppwzIdentityXML: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerIdentityExport(
    pwzIdentity: ?[*:0]const u16,
    pwzPassword: [*:0]const u16,
    ppwzExportXML: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerIdentityImport(
    pwzImportXML: [*:0]const u16,
    pwzPassword: [*:0]const u16,
    ppwzIdentity: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerIdentityGetDefault(
    ppwzPeerName: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabStartup(
    wVersionRequested: u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabShutdown(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabSignin(
    hwndParent: HWND,
    dwSigninOptions: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabSignout(
    dwSigninOptions: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabGetSigninOptions(
    pdwSigninOptions: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabAsyncInviteContact(
    pcContact: ?*PEER_CONTACT,
    pcEndpoint: *PEER_ENDPOINT,
    pcInvitation: *PEER_INVITATION,
    hEvent: HANDLE,
    phInvitation: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabGetInvitationResponse(
    hInvitation: HANDLE,
    ppInvitationResponse: **PEER_INVITATION_RESPONSE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabCancelInvitation(
    hInvitation: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabCloseHandle(
    hInvitation: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabInviteContact(
    pcContact: ?*PEER_CONTACT,
    pcEndpoint: *PEER_ENDPOINT,
    pcInvitation: *PEER_INVITATION,
    ppResponse: **PEER_INVITATION_RESPONSE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabAsyncInviteEndpoint(
    pcEndpoint: *PEER_ENDPOINT,
    pcInvitation: *PEER_INVITATION,
    hEvent: HANDLE,
    phInvitation: ?*HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabInviteEndpoint(
    pcEndpoint: *PEER_ENDPOINT,
    pcInvitation: *PEER_INVITATION,
    ppResponse: **PEER_INVITATION_RESPONSE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabGetAppLaunchInfo(
    ppLaunchInfo: **PEER_APP_LAUNCH_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabRegisterApplication(
    pcApplication: *PEER_APPLICATION_REGISTRATION_INFO,
    registrationType: PEER_APPLICATION_REGISTRATION_TYPE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabUnregisterApplication(
    pApplicationId: *const Guid,
    registrationType: PEER_APPLICATION_REGISTRATION_TYPE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabGetApplicationRegistrationInfo(
    pApplicationId: *const Guid,
    registrationType: PEER_APPLICATION_REGISTRATION_TYPE,
    ppApplication: **PEER_APPLICATION_REGISTRATION_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabEnumApplicationRegistrationInfo(
    registrationType: PEER_APPLICATION_REGISTRATION_TYPE,
    phPeerEnum: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabGetPresenceInfo(
    pcEndpoint: ?*PEER_ENDPOINT,
    ppPresenceInfo: **PEER_PRESENCE_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabEnumApplications(
    pcEndpoint: ?*PEER_ENDPOINT,
    pApplicationId: ?*const Guid,
    phPeerEnum: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabEnumObjects(
    pcEndpoint: ?*PEER_ENDPOINT,
    pObjectId: ?*const Guid,
    phPeerEnum: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabEnumEndpoints(
    pcContact: ?*PEER_CONTACT,
    phPeerEnum: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabRefreshEndpointData(
    pcEndpoint: *PEER_ENDPOINT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabDeleteEndpointData(
    pcEndpoint: *PEER_ENDPOINT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabQueryContactData(
    pcEndpoint: ?*PEER_ENDPOINT,
    ppwzContactData: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabSubscribeEndpointData(
    pcEndpoint: *const PEER_ENDPOINT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabUnsubscribeEndpointData(
    pcEndpoint: *const PEER_ENDPOINT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabSetPresenceInfo(
    pcPresenceInfo: *PEER_PRESENCE_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabGetEndpointName(
    ppwzEndpointName: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabSetEndpointName(
    pwzEndpointName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabSetObject(
    pcObject: *PEER_OBJECT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabDeleteObject(
    pObjectId: *const Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabRegisterEvent(
    hEvent: HANDLE,
    cEventRegistration: u32,
    pEventRegistrations: [*]PEER_COLLAB_EVENT_REGISTRATION,
    phPeerEvent: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabGetEventData(
    hPeerEvent: *c_void,
    ppEventData: **PEER_COLLAB_EVENT_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabUnregisterEvent(
    hPeerEvent: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabEnumPeopleNearMe(
    phPeerEnum: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabAddContact(
    pwzContactData: [*:0]const u16,
    ppContact: ?*?*PEER_CONTACT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabDeleteContact(
    pwzPeerName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabGetContact(
    pwzPeerName: ?[*:0]const u16,
    ppContact: **PEER_CONTACT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabUpdateContact(
    pContact: *PEER_CONTACT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabEnumContacts(
    phPeerEnum: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabExportContact(
    pwzPeerName: ?[*:0]const u16,
    ppwzContactData: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerCollabParseContact(
    pwzContactData: [*:0]const u16,
    ppContact: **PEER_CONTACT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerNameToPeerHostName(
    pwzPeerName: [*:0]const u16,
    ppwzHostName: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerHostNameToPeerName(
    pwzHostName: [*:0]const u16,
    ppwzPeerName: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerPnrpStartup(
    wVersionRequested: u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerPnrpShutdown(
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerPnrpRegister(
    pcwzPeerName: [*:0]const u16,
    pRegistrationInfo: ?*PEER_PNRP_REGISTRATION_INFO,
    phRegistration: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerPnrpUpdateRegistration(
    hRegistration: *c_void,
    pRegistrationInfo: *PEER_PNRP_REGISTRATION_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerPnrpUnregister(
    hRegistration: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerPnrpResolve(
    pcwzPeerName: [*:0]const u16,
    pcwzCloudName: ?[*:0]const u16,
    pcEndpoints: *u32,
    ppEndpoints: **PEER_PNRP_ENDPOINT_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerPnrpStartResolve(
    pcwzPeerName: [*:0]const u16,
    pcwzCloudName: ?[*:0]const u16,
    cMaxEndpoints: u32,
    hEvent: HANDLE,
    phResolve: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerPnrpGetCloudInfo(
    pcNumClouds: *u32,
    ppCloudInfo: **PEER_PNRP_CLOUD_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerPnrpGetEndpoint(
    hResolve: *c_void,
    ppEndpoint: **PEER_PNRP_ENDPOINT_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "P2P" fn PeerPnrpEndResolve(
    hResolve: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drtprov" fn DrtCreatePnrpBootstrapResolver(
    fPublish: BOOL,
    pwzPeerName: [*:0]const u16,
    pwzCloudName: ?[*:0]const u16,
    pwzPublishingIdentity: ?[*:0]const u16,
    ppResolver: **DRT_BOOTSTRAP_PROVIDER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drtprov" fn DrtDeletePnrpBootstrapResolver(
    pResolver: *DRT_BOOTSTRAP_PROVIDER,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "drtprov" fn DrtCreateDnsBootstrapResolver(
    port: u16,
    pwszAddress: [*:0]const u16,
    ppModule: **DRT_BOOTSTRAP_PROVIDER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drtprov" fn DrtDeleteDnsBootstrapResolver(
    pResolver: *DRT_BOOTSTRAP_PROVIDER,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "drttransport" fn DrtCreateIpv6UdpTransport(
    scope: DRT_SCOPE,
    dwScopeId: u32,
    dwLocalityThreshold: u32,
    pwPort: *u16,
    phTransport: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drttransport" fn DrtDeleteIpv6UdpTransport(
    hTransport: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drtprov" fn DrtCreateDerivedKeySecurityProvider(
    pRootCert: *CERT_CONTEXT,
    pLocalCert: ?*CERT_CONTEXT,
    ppSecurityProvider: **DRT_SECURITY_PROVIDER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drtprov" fn DrtCreateDerivedKey(
    pLocalCert: *CERT_CONTEXT,
    pKey: *DRT_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drtprov" fn DrtDeleteDerivedKeySecurityProvider(
    pSecurityProvider: *DRT_SECURITY_PROVIDER,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "drtprov" fn DrtCreateNullSecurityProvider(
    ppSecurityProvider: **DRT_SECURITY_PROVIDER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drtprov" fn DrtDeleteNullSecurityProvider(
    pSecurityProvider: *DRT_SECURITY_PROVIDER,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "drt" fn DrtOpen(
    pSettings: *const DRT_SETTINGS,
    hEvent: HANDLE,
    pvContext: ?*const c_void,
    phDrt: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drt" fn DrtClose(
    hDrt: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "drt" fn DrtGetEventDataSize(
    hDrt: *c_void,
    pulEventDataLen: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drt" fn DrtGetEventData(
    hDrt: *c_void,
    ulEventDataLen: u32,
    pEventData: *DRT_EVENT_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drt" fn DrtRegisterKey(
    hDrt: *c_void,
    pRegistration: *DRT_REGISTRATION,
    pvKeyContext: ?*c_void,
    phKeyRegistration: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drt" fn DrtUpdateKey(
    hKeyRegistration: *c_void,
    pAppData: *DRT_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drt" fn DrtUnregisterKey(
    hKeyRegistration: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "drt" fn DrtStartSearch(
    hDrt: *c_void,
    pKey: *DRT_DATA,
    pInfo: ?*const DRT_SEARCH_INFO,
    timeout: u32,
    hEvent: HANDLE,
    pvContext: ?*const c_void,
    hSearchContext: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drt" fn DrtContinueSearch(
    hSearchContext: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drt" fn DrtGetSearchResultSize(
    hSearchContext: *c_void,
    pulSearchResultSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drt" fn DrtGetSearchResult(
    hSearchContext: *c_void,
    ulSearchResultSize: u32,
    pSearchResult: *DRT_SEARCH_RESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drt" fn DrtGetSearchPathSize(
    hSearchContext: *c_void,
    pulSearchPathSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drt" fn DrtGetSearchPath(
    hSearchContext: *c_void,
    ulSearchPathSize: u32,
    pSearchPath: *DRT_ADDRESS_LIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drt" fn DrtEndSearch(
    hSearchContext: *c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drt" fn DrtGetInstanceName(
    hDrt: *c_void,
    ulcbInstanceNameSize: u32,
    pwzDrtInstanceName: PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "drt" fn DrtGetInstanceNameSize(
    hDrt: *c_void,
    pulcbInstanceNameSize: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "PeerDist" fn PeerDistStartup(
    dwVersionRequested: u32,
    phPeerDist: *?*c_void,
    pdwSupportedVersion: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistShutdown(
    hPeerDist: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistGetStatus(
    hPeerDist: ?*c_void,
    pPeerDistStatus: *PEERDIST_STATUS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistRegisterForStatusChangeNotification(
    hPeerDist: ?*c_void,
    hCompletionPort: HANDLE,
    ulCompletionKey: ?*c_void,
    lpOverlapped: *OVERLAPPED,
    pPeerDistStatus: *PEERDIST_STATUS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistUnregisterForStatusChangeNotification(
    hPeerDist: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistServerPublishStream(
    hPeerDist: ?*c_void,
    cbContentIdentifier: u32,
    pContentIdentifier: [*:0]u8,
    cbContentLength: u64,
    pPublishOptions: ?*PEERDIST_PUBLICATION_OPTIONS,
    hCompletionPort: HANDLE,
    ulCompletionKey: ?*c_void,
    phStream: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistServerPublishAddToStream(
    hPeerDist: ?*c_void,
    hStream: ?*c_void,
    cbNumberOfBytes: u32,
    pBuffer: [*:0]u8,
    lpOverlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistServerPublishCompleteStream(
    hPeerDist: ?*c_void,
    hStream: ?*c_void,
    lpOverlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistServerCloseStreamHandle(
    hPeerDist: ?*c_void,
    hStream: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistServerUnpublish(
    hPeerDist: ?*c_void,
    cbContentIdentifier: u32,
    pContentIdentifier: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistServerOpenContentInformation(
    hPeerDist: ?*c_void,
    cbContentIdentifier: u32,
    pContentIdentifier: [*:0]u8,
    ullContentOffset: u64,
    cbContentLength: u64,
    hCompletionPort: HANDLE,
    ulCompletionKey: ?*c_void,
    phContentInfo: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistServerRetrieveContentInformation(
    hPeerDist: ?*c_void,
    hContentInfo: ?*c_void,
    cbMaxNumberOfBytes: u32,
    pBuffer: [*:0]u8,
    lpOverlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistServerCloseContentInformation(
    hPeerDist: ?*c_void,
    hContentInfo: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistServerCancelAsyncOperation(
    hPeerDist: ?*c_void,
    cbContentIdentifier: u32,
    pContentIdentifier: [*:0]u8,
    pOverlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistClientOpenContent(
    hPeerDist: ?*c_void,
    pContentTag: *PEERDIST_CONTENT_TAG,
    hCompletionPort: HANDLE,
    ulCompletionKey: ?*c_void,
    phContentHandle: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistClientCloseContent(
    hPeerDist: ?*c_void,
    hContentHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistClientAddContentInformation(
    hPeerDist: ?*c_void,
    hContentHandle: ?*c_void,
    cbNumberOfBytes: u32,
    pBuffer: [*:0]u8,
    lpOverlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistClientCompleteContentInformation(
    hPeerDist: ?*c_void,
    hContentHandle: ?*c_void,
    lpOverlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistClientAddData(
    hPeerDist: ?*c_void,
    hContentHandle: ?*c_void,
    cbNumberOfBytes: u32,
    pBuffer: [*:0]u8,
    lpOverlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistClientBlockRead(
    hPeerDist: ?*c_void,
    hContentHandle: ?*c_void,
    cbMaxNumberOfBytes: u32,
    pBuffer: ?[*:0]u8,
    dwTimeoutInMilliseconds: u32,
    lpOverlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistClientStreamRead(
    hPeerDist: ?*c_void,
    hContentHandle: ?*c_void,
    cbMaxNumberOfBytes: u32,
    pBuffer: ?[*:0]u8,
    dwTimeoutInMilliseconds: u32,
    lpOverlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistClientFlushContent(
    hPeerDist: ?*c_void,
    pContentTag: *PEERDIST_CONTENT_TAG,
    hCompletionPort: HANDLE,
    ulCompletionKey: ?*c_void,
    lpOverlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistClientCancelAsyncOperation(
    hPeerDist: ?*c_void,
    hContentHandle: ?*c_void,
    pOverlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistGetStatusEx(
    hPeerDist: ?*c_void,
    pPeerDistStatus: *PEERDIST_STATUS_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistRegisterForStatusChangeNotificationEx(
    hPeerDist: ?*c_void,
    hCompletionPort: HANDLE,
    ulCompletionKey: ?*c_void,
    lpOverlapped: *OVERLAPPED,
    pPeerDistStatus: *PEERDIST_STATUS_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistGetOverlappedResult(
    lpOverlapped: *OVERLAPPED,
    lpNumberOfBytesTransferred: *u32,
    bWait: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "PeerDist" fn PeerDistServerOpenContentInformationEx(
    hPeerDist: ?*c_void,
    cbContentIdentifier: u32,
    pContentIdentifier: [*:0]u8,
    ullContentOffset: u64,
    cbContentLength: u64,
    pRetrievalOptions: *PEERDIST_RETRIEVAL_OPTIONS,
    hCompletionPort: HANDLE,
    ulCompletionKey: ?*c_void,
    phContentInfo: *?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "PeerDist" fn PeerDistClientGetInformationByHandle(
    hPeerDist: ?*c_void,
    hContentHandle: ?*c_void,
    PeerDistClientInfoClass: PEERDIST_CLIENT_INFO_BY_HANDLE_CLASS,
    dwBufferSize: u32,
    lpInformation: [*]u8,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (15)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const PWSTR = @import("system_services.zig").PWSTR;
const FILETIME = @import("windows_programming.zig").FILETIME;
const CERT_CONTEXT = @import("security.zig").CERT_CONTEXT;
const SOCKADDR_STORAGE_LH = @import("network_drivers.zig").SOCKADDR_STORAGE_LH;
const HRESULT = @import("com.zig").HRESULT;
const SOCKET_ADDRESS_LIST = @import("network_drivers.zig").SOCKET_ADDRESS_LIST;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;
const SOCKADDR = @import("win_sock.zig").SOCKADDR;
const CERT_PUBLIC_KEY_INFO = @import("security.zig").CERT_PUBLIC_KEY_INFO;
const OVERLAPPED = @import("system_services.zig").OVERLAPPED;
const SOCKADDR_IN6_LH = @import("network_drivers.zig").SOCKADDR_IN6_LH;
const HANDLE = @import("system_services.zig").HANDLE;
const SOCKET_ADDRESS = @import("win_sock.zig").SOCKET_ADDRESS;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = PFNPEER_VALIDATE_RECORD;
    _ = PFNPEER_SECURE_RECORD;
    _ = PFNPEER_FREE_SECURITY_DATA;
    _ = PFNPEER_ON_PASSWORD_AUTH_FAILED;
    _ = DRT_BOOTSTRAP_RESOLVE_CALLBACK;

    const constant_export_count = 0;
    const type_export_count = 109;
    const enum_value_export_count = 153;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 200;
    const unicode_alias_count = 0;
    const import_count = 15;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
